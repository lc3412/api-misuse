ff_oss_audio_close:
0 -> []

audio_read_close:
0 -> []

av_make_error_string.67:
$

ff_oss_audio_open:
-5 -> [avpriv_open: [-inf, -1], ioctl: [-inf, -1]]
0 -> [avpriv_open: [0, +inf], ioctl: [0, +inf]]

audio_read_header:
-12 -> [avformat_new_stream: [0, 0]]
-5 -> [avformat_new_stream: [-inf, -1],[1, +inf], ff_oss_audio_open: [-inf, -1]]
0 -> [avformat_new_stream: [-inf, -1],[1, +inf], ff_oss_audio_open: [0, +inf]]

audio_read_packet:
-541478725 -> [av_new_packet: [0, +inf]]
0 -> [av_new_packet: [1, +inf]]

audio_write_header:
-5 -> [ff_oss_audio_open: [-inf, -1]]
0 -> [ff_oss_audio_open: [0, +inf]]

audio_write_packet:
-5 -> []
0 -> []

audio_write_trailer:
0 -> []

av_bprint_is_complete:
$

device_next:
$

av_input_audio_device_next:
$

av_input_video_device_next:
$

av_make_error_string:
$

av_make_error_string.113:
$

av_make_error_string.49:
$

av_make_error_string.62:
$

av_output_audio_device_next:
$

av_output_video_device_next:
$

av_q2d:
$

avdevice_app_to_dev_control_message:
$

avdevice_capabilities_create:
0 -> [av_opt_set_dict: [0, +inf]]

avdevice_capabilities_free:
$

avdevice_configuration:
$

avdevice_dev_to_app_control_message:
$

avdevice_free_list_devices:
$

avdevice_license:
$

avdevice_list_devices:
$

list_devices_for_context:
$

ff_alloc_input_device_context:
-22 -> [avformat_alloc_context: [-inf, -1],[1, +inf]]
-12 -> [avformat_alloc_context: [0, 0]]
0 -> [avformat_alloc_context: [-inf, -1],[1, +inf]]

avdevice_list_input_sources:
-22 -> [ff_alloc_input_device_context: [-inf, -1]]
-12 -> [ff_alloc_input_device_context: [-inf, -1]]
0 -> [ff_alloc_input_device_context: [-inf, -1]]

avdevice_list_output_sinks:
$

avdevice_register_all:
$

avdevice_version:
3802725 -> []

create_all_formats:
$

pixfmt_from_pixmap_format:
-1163346256 -> [xcb_setup_pixmap_formats_length: [0, 0]]
0 -> [xcb_setup_pixmap_formats_length: [-inf, -1],[1, +inf]]

create_stream:
-1163346256 -> [avformat_new_stream: [-inf, -1],[1, +inf], av_parse_video_size: [0, +inf], av_parse_video_rate: [0, +inf]]
-22 -> [avformat_new_stream: [-inf, -1],[1, +inf], av_parse_video_size: [0, +inf], av_parse_video_rate: [0, +inf]]
-12 -> [avformat_new_stream: [0, 0]]
0 -> [avformat_new_stream: [-inf, -1],[1, +inf], av_parse_video_size: [0, +inf], av_parse_video_rate: [0, +inf]]

create_subcc_packet:
0 -> [av_new_packet: [0, +inf]]

create_subcc_streams:
-12 -> [avformat_new_stream: [0, 0]]
0 -> [avformat_new_stream: [-inf, -1],[1, +inf]]

draw_rectangle:
$

ff_fbdev_default_device:
$

ff_fbdev_get_device_list:
-12 -> [ioctl: [-inf, -2],[0, +inf]]
0 -> [ioctl: [-inf, -2],[0, +inf]]

fbdev_get_device_list:
$

fbdev_get_device_list.107:
$

fbdev_read_close:
0 -> []

ff_get_pixfmt_from_fb_varinfo:
$

fbdev_read_header:
-22 -> [ff_get_pixfmt_from_fb_varinfo: [-1, -1]]
-12 -> [avformat_new_stream: [0, 0]]

fbdev_read_packet:
$

fbdev_write_header:
-22 -> [ff_get_pixfmt_from_fb_varinfo: [-1, -1]]

fbdev_write_packet:
-22 -> []
0 -> []

fbdev_write_trailer:
0 -> []

ff_fmt_ff2v4l:
$

ff_fmt_v4l2codec:
$

ff_fmt_v4l2ff:
$

ff_timefilter_destroy:
$

ff_timefilter_eval:
$

qexpneg:
$

ff_timefilter_new:
$

ff_timefilter_reset:
$

ff_timefilter_update:
$

get_screen:
$

lavfi_read_close:
0 -> []

lavfi_read_header:
-1279870712 -> [avfilter_get_by_name: [0, 0]]
-22 -> [avfilter_pad_get_type: [-inf, 0],[2, +inf]]
-12 -> [avformat_new_stream: [0, 0], avfilter_graph_config: [0, +inf], avfilter_graph_alloc: [0, 0], av_frame_alloc: [0, 0]]
0 -> [avfilter_graph_config: [0, +inf], av_frame_alloc: [-inf, -1],[1, +inf]]

lavfi_read_packet:
-12 -> [av_packet_new_side_data: [0, 0], av_bprint_is_complete: [0, 0]]

setup_window:
$

wait_frame:
$

write_header:
-22 -> [ff_fmt_ff2v4l: [0, 0]]
0 -> [ioctl: [0, +inf]]

write_packet:
0 -> [write: [-inf, -2],[0, +inf]]

write_trailer:
0 -> []

xcbgrab_frame:
-11 -> [xcb_get_image_reply: [0, 0]]

xcbgrab_read_close:
0 -> []

xcbgrab_read_header:
-12 -> [av_strdup: [0, 0]]
-5 -> [xcb_connection_has_error: [-inf, -1],[1, +inf]]
0 -> [create_stream: [0, +inf]]

xcbgrab_reposition:
-5 -> []
0 -> []

xcbgrab_update_region:
$

xcbgrab_read_packet:
$

