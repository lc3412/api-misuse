; ModuleID = '/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libswscale--libswscale.a/[inter]libswscale--x86--rgb2rgb.o.i'
source_filename = "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libswscale--libswscale.a/[inter]libswscale--x86--rgb2rgb.o.i"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@mmx_ff = internal constant i64 255, align 8
@mmx_null = internal constant i64 0, align 8
@mmx_one = internal constant i64 -1, align 8
@mask32b = internal constant i64 1095216660735, align 8
@mask32g = internal constant i64 280375465148160, align 8
@mask32r = internal constant i64 71776119077928960, align 8
@mask32a = internal constant i64 -72057589759737856, align 8
@mask32 = internal constant i64 72057589759737855, align 8
@mask3216br = internal constant i64 69806859392385272, align 8
@mask3216g = internal constant i64 277076930264064, align 8
@mask3215g = internal constant i64 272678883751936, align 8
@mul3216 = internal constant i64 2305843026930434052, align 8
@mul3215 = internal constant i64 2305843044110303240, align 8
@mask24b = internal constant i64 71776123339407615, align 8
@mask24g = internal constant i64 -72056498821202176, align 8
@mask24r = internal constant i64 280375481794560, align 8
@mask24l = internal constant i64 16777215, align 8
@mask24h = internal constant i64 281474959933440, align 8
@mask24hh = internal constant i64 -281474976710656, align 8
@mask24hhh = internal constant i64 -4294967296, align 8
@mask24hhhh = internal constant i64 -65536, align 8
@mask15b = internal constant i64 8725857424048159, align 8
@mask15rg = internal constant i64 9214505439794855904, align 8
@mask15s = internal constant i64 -8725857424048160, align 8
@mask15g = internal constant i64 279227437569541088, align 8
@mask15r = internal constant i64 8935278002225314816, align 8
@mask16g = internal constant i64 567462211834873824, align 8
@mask16r = internal constant i64 -576188069258921984, align 8
@red_16mask = internal constant i64 272678883751936, align 8
@green_16mask = internal constant i64 8658654070752, align 8
@blue_16mask = internal constant i64 133143986207, align 8
@red_15mask = internal constant i64 136339441875968, align 8
@green_15mask = internal constant i64 4260607558624, align 8
@blue_15mask = internal constant i64 133143986207, align 8
@mul15_mid = internal constant i64 4755873775377990144, align 8
@mul15_hi = internal constant i64 148621055480562192, align 8
@mul16_mid = internal constant i64 2341907540905828480, align 8
@rgb15to16 = external global void (i8*, i8*, i32)*, align 8
@rgb15tobgr24 = external global void (i8*, i8*, i32)*, align 8
@rgb15to32 = external global void (i8*, i8*, i32)*, align 8
@rgb16tobgr24 = external global void (i8*, i8*, i32)*, align 8
@rgb16to32 = external global void (i8*, i8*, i32)*, align 8
@rgb16to15 = external global void (i8*, i8*, i32)*, align 8
@rgb24tobgr16 = external global void (i8*, i8*, i32)*, align 8
@rgb24tobgr15 = external global void (i8*, i8*, i32)*, align 8
@rgb24tobgr32 = external global void (i8*, i8*, i32)*, align 8
@rgb32to16 = external global void (i8*, i8*, i32)*, align 8
@rgb32to15 = external global void (i8*, i8*, i32)*, align 8
@rgb32tobgr24 = external global void (i8*, i8*, i32)*, align 8
@rgb24to15 = external global void (i8*, i8*, i32)*, align 8
@rgb24to16 = external global void (i8*, i8*, i32)*, align 8
@rgb24tobgr24 = external global void (i8*, i8*, i32)*, align 8
@rgb32tobgr16 = external global void (i8*, i8*, i32)*, align 8
@rgb32tobgr15 = external global void (i8*, i8*, i32)*, align 8
@yv12toyuy2 = external global void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)*, align 8
@yv12touyvy = external global void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)*, align 8
@yuv422ptoyuy2 = external global void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)*, align 8
@yuv422ptouyvy = external global void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)*, align 8
@yuy2toyv12 = external global void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)*, align 8
@vu9_to_vu12 = external global void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32)*, align 8
@yvu9_to_yuy2 = external global void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32)*, align 8
@uyvytoyuv422 = external global void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)*, align 8
@yuyvtoyuv422 = external global void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)*, align 8
@ff_rgb24toyv12 = external global void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32*)*, align 8
@yuyvtoyuv420 = external global void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)*, align 8
@uyvytoyuv420 = external global void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)*, align 8
@interleaveBytes = external global void (i8*, i8*, i8*, i32, i32, i32, i32, i32)*, align 8
@planar2x = external global void (i8*, i8*, i32, i32, i32, i32)*, align 8
@llvm.used = appending global [37 x i8*] [i8* bitcast (i64* @mmx_ff to i8*), i8* bitcast (i64* @mmx_null to i8*), i8* bitcast (i64* @mmx_one to i8*), i8* bitcast (i64* @mask32b to i8*), i8* bitcast (i64* @mask32g to i8*), i8* bitcast (i64* @mask32r to i8*), i8* bitcast (i64* @mask32a to i8*), i8* bitcast (i64* @mask32 to i8*), i8* bitcast (i64* @mask3216br to i8*), i8* bitcast (i64* @mask3216g to i8*), i8* bitcast (i64* @mask3215g to i8*), i8* bitcast (i64* @mul3216 to i8*), i8* bitcast (i64* @mul3215 to i8*), i8* bitcast (i64* @mask24b to i8*), i8* bitcast (i64* @mask24g to i8*), i8* bitcast (i64* @mask24r to i8*), i8* bitcast (i64* @mask24l to i8*), i8* bitcast (i64* @mask24h to i8*), i8* bitcast (i64* @mask24hh to i8*), i8* bitcast (i64* @mask24hhh to i8*), i8* bitcast (i64* @mask24hhhh to i8*), i8* bitcast (i64* @mask15b to i8*), i8* bitcast (i64* @mask15rg to i8*), i8* bitcast (i64* @mask15s to i8*), i8* bitcast (i64* @mask15g to i8*), i8* bitcast (i64* @mask15r to i8*), i8* bitcast (i64* @mask16g to i8*), i8* bitcast (i64* @mask16r to i8*), i8* bitcast (i64* @red_16mask to i8*), i8* bitcast (i64* @green_16mask to i8*), i8* bitcast (i64* @blue_16mask to i8*), i8* bitcast (i64* @red_15mask to i8*), i8* bitcast (i64* @green_15mask to i8*), i8* bitcast (i64* @blue_15mask to i8*), i8* bitcast (i64* @mul15_mid to i8*), i8* bitcast (i64* @mul15_hi to i8*), i8* bitcast (i64* @mul16_mid to i8*)], section "llvm.metadata"

; Function Attrs: cold nounwind optsize uwtable
define void @rgb2rgb_init_x86() #0 !dbg !68 {
entry:
  %cpu_flags = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %cpu_flags, metadata !71, metadata !73), !dbg !74
  %call = call i32 @av_get_cpu_flags(), !dbg !75
  store i32 %call, i32* %cpu_flags, align 4, !dbg !74
  %0 = load i32, i32* %cpu_flags, align 4, !dbg !76
  %and = and i32 %0, 1, !dbg !78
  %tobool = icmp ne i32 %and, 0, !dbg !78
  br i1 %tobool, label %if.then, label %if.end, !dbg !79

if.then:                                          ; preds = %entry
  call void @rgb2rgb_init_mmx(), !dbg !80
  br label %if.end, !dbg !80

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %cpu_flags, align 4, !dbg !81
  %and1 = and i32 %1, 4, !dbg !83
  %tobool2 = icmp ne i32 %and1, 0, !dbg !83
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !84

if.then3:                                         ; preds = %if.end
  call void @rgb2rgb_init_3dnow(), !dbg !85
  br label %if.end4, !dbg !85

if.end4:                                          ; preds = %if.then3, %if.end
  %2 = load i32, i32* %cpu_flags, align 4, !dbg !86
  %and5 = and i32 %2, 2, !dbg !88
  %tobool6 = icmp ne i32 %and5, 0, !dbg !88
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !89

if.then7:                                         ; preds = %if.end4
  call void @rgb2rgb_init_mmxext(), !dbg !90
  br label %if.end8, !dbg !90

if.end8:                                          ; preds = %if.then7, %if.end4
  %3 = load i32, i32* %cpu_flags, align 4, !dbg !91
  %and9 = and i32 %3, 16, !dbg !93
  %tobool10 = icmp ne i32 %and9, 0, !dbg !93
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !94

if.then11:                                        ; preds = %if.end8
  call void @rgb2rgb_init_sse2(), !dbg !95
  br label %if.end12, !dbg !95

if.end12:                                         ; preds = %if.then11, %if.end8
  %4 = load i32, i32* %cpu_flags, align 4, !dbg !96
  %and13 = and i32 %4, 16384, !dbg !98
  %tobool14 = icmp ne i32 %and13, 0, !dbg !98
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !99

if.then15:                                        ; preds = %if.end12
  call void @rgb2rgb_init_avx(), !dbg !100
  br label %if.end16, !dbg !100

if.end16:                                         ; preds = %if.then15, %if.end12
  ret void, !dbg !101
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @av_get_cpu_flags() #2

; Function Attrs: cold nounwind optsize uwtable
define internal void @rgb2rgb_init_mmx() #0 !dbg !102 {
entry:
  store void (i8*, i8*, i32)* @rgb15to16_mmx, void (i8*, i8*, i32)** @rgb15to16, align 8, !dbg !104
  store void (i8*, i8*, i32)* @rgb15tobgr24_mmx, void (i8*, i8*, i32)** @rgb15tobgr24, align 8, !dbg !105
  store void (i8*, i8*, i32)* @rgb15to32_mmx, void (i8*, i8*, i32)** @rgb15to32, align 8, !dbg !106
  store void (i8*, i8*, i32)* @rgb16tobgr24_mmx, void (i8*, i8*, i32)** @rgb16tobgr24, align 8, !dbg !107
  store void (i8*, i8*, i32)* @rgb16to32_mmx, void (i8*, i8*, i32)** @rgb16to32, align 8, !dbg !108
  store void (i8*, i8*, i32)* @rgb16to15_mmx, void (i8*, i8*, i32)** @rgb16to15, align 8, !dbg !109
  store void (i8*, i8*, i32)* @rgb24tobgr16_mmx, void (i8*, i8*, i32)** @rgb24tobgr16, align 8, !dbg !110
  store void (i8*, i8*, i32)* @rgb24tobgr15_mmx, void (i8*, i8*, i32)** @rgb24tobgr15, align 8, !dbg !111
  store void (i8*, i8*, i32)* @rgb24tobgr32_mmx, void (i8*, i8*, i32)** @rgb24tobgr32, align 8, !dbg !112
  store void (i8*, i8*, i32)* @rgb32to16_mmx, void (i8*, i8*, i32)** @rgb32to16, align 8, !dbg !113
  store void (i8*, i8*, i32)* @rgb32to15_mmx, void (i8*, i8*, i32)** @rgb32to15, align 8, !dbg !114
  store void (i8*, i8*, i32)* @rgb32tobgr24_mmx, void (i8*, i8*, i32)** @rgb32tobgr24, align 8, !dbg !115
  store void (i8*, i8*, i32)* @rgb24to15_mmx, void (i8*, i8*, i32)** @rgb24to15, align 8, !dbg !116
  store void (i8*, i8*, i32)* @rgb24to16_mmx, void (i8*, i8*, i32)** @rgb24to16, align 8, !dbg !117
  store void (i8*, i8*, i32)* @rgb24tobgr24_mmx, void (i8*, i8*, i32)** @rgb24tobgr24, align 8, !dbg !118
  store void (i8*, i8*, i32)* @rgb32tobgr16_mmx, void (i8*, i8*, i32)** @rgb32tobgr16, align 8, !dbg !119
  store void (i8*, i8*, i32)* @rgb32tobgr15_mmx, void (i8*, i8*, i32)** @rgb32tobgr15, align 8, !dbg !120
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yv12toyuy2_mmx, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yv12toyuy2, align 8, !dbg !121
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yv12touyvy_mmx, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yv12touyvy, align 8, !dbg !122
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yuv422ptoyuy2_mmx, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yuv422ptoyuy2, align 8, !dbg !123
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yuv422ptouyvy_mmx, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yuv422ptouyvy, align 8, !dbg !124
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yuy2toyv12_mmx, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yuy2toyv12, align 8, !dbg !125
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32)* @vu9_to_vu12_mmx, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32)** @vu9_to_vu12, align 8, !dbg !126
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32)* @yvu9_to_yuy2_mmx, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32)** @yvu9_to_yuy2, align 8, !dbg !127
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @uyvytoyuv422_mmx, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @uyvytoyuv422, align 8, !dbg !128
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yuyvtoyuv422_mmx, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yuyvtoyuv422, align 8, !dbg !129
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32*)* @rgb24toyv12_mmx, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32*)** @ff_rgb24toyv12, align 8, !dbg !130
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yuyvtoyuv420_mmx, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yuyvtoyuv420, align 8, !dbg !131
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @uyvytoyuv420_mmx, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @uyvytoyuv420, align 8, !dbg !132
  store void (i8*, i8*, i8*, i32, i32, i32, i32, i32)* @interleaveBytes_mmx, void (i8*, i8*, i8*, i32, i32, i32, i32, i32)** @interleaveBytes, align 8, !dbg !133
  ret void, !dbg !134
}

; Function Attrs: cold nounwind optsize uwtable
define internal void @rgb2rgb_init_3dnow() #0 !dbg !135 {
entry:
  store void (i8*, i8*, i32, i32, i32, i32)* @planar2x_3dnow, void (i8*, i8*, i32, i32, i32, i32)** @planar2x, align 8, !dbg !136
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32*)* @rgb24toyv12_3dnow, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32*)** @ff_rgb24toyv12, align 8, !dbg !137
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yuyvtoyuv420_3dnow, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yuyvtoyuv420, align 8, !dbg !138
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @uyvytoyuv420_3dnow, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @uyvytoyuv420, align 8, !dbg !139
  ret void, !dbg !140
}

; Function Attrs: cold nounwind optsize uwtable
define internal void @rgb2rgb_init_mmxext() #0 !dbg !141 {
entry:
  store void (i8*, i8*, i32)* @rgb15to16_mmxext, void (i8*, i8*, i32)** @rgb15to16, align 8, !dbg !142
  store void (i8*, i8*, i32)* @rgb15tobgr24_mmxext, void (i8*, i8*, i32)** @rgb15tobgr24, align 8, !dbg !143
  store void (i8*, i8*, i32)* @rgb15to32_mmxext, void (i8*, i8*, i32)** @rgb15to32, align 8, !dbg !144
  store void (i8*, i8*, i32)* @rgb16tobgr24_mmxext, void (i8*, i8*, i32)** @rgb16tobgr24, align 8, !dbg !145
  store void (i8*, i8*, i32)* @rgb16to32_mmxext, void (i8*, i8*, i32)** @rgb16to32, align 8, !dbg !146
  store void (i8*, i8*, i32)* @rgb16to15_mmxext, void (i8*, i8*, i32)** @rgb16to15, align 8, !dbg !147
  store void (i8*, i8*, i32)* @rgb24tobgr16_mmxext, void (i8*, i8*, i32)** @rgb24tobgr16, align 8, !dbg !148
  store void (i8*, i8*, i32)* @rgb24tobgr15_mmxext, void (i8*, i8*, i32)** @rgb24tobgr15, align 8, !dbg !149
  store void (i8*, i8*, i32)* @rgb24tobgr32_mmxext, void (i8*, i8*, i32)** @rgb24tobgr32, align 8, !dbg !150
  store void (i8*, i8*, i32)* @rgb32to16_mmxext, void (i8*, i8*, i32)** @rgb32to16, align 8, !dbg !151
  store void (i8*, i8*, i32)* @rgb32to15_mmxext, void (i8*, i8*, i32)** @rgb32to15, align 8, !dbg !152
  store void (i8*, i8*, i32)* @rgb32tobgr24_mmxext, void (i8*, i8*, i32)** @rgb32tobgr24, align 8, !dbg !153
  store void (i8*, i8*, i32)* @rgb24to15_mmxext, void (i8*, i8*, i32)** @rgb24to15, align 8, !dbg !154
  store void (i8*, i8*, i32)* @rgb24to16_mmxext, void (i8*, i8*, i32)** @rgb24to16, align 8, !dbg !155
  store void (i8*, i8*, i32)* @rgb24tobgr24_mmxext, void (i8*, i8*, i32)** @rgb24tobgr24, align 8, !dbg !156
  store void (i8*, i8*, i32)* @rgb32tobgr16_mmxext, void (i8*, i8*, i32)** @rgb32tobgr16, align 8, !dbg !157
  store void (i8*, i8*, i32)* @rgb32tobgr15_mmxext, void (i8*, i8*, i32)** @rgb32tobgr15, align 8, !dbg !158
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yv12toyuy2_mmxext, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yv12toyuy2, align 8, !dbg !159
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yv12touyvy_mmxext, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yv12touyvy, align 8, !dbg !160
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yuv422ptoyuy2_mmxext, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yuv422ptoyuy2, align 8, !dbg !161
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yuv422ptouyvy_mmxext, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yuv422ptouyvy, align 8, !dbg !162
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yuy2toyv12_mmxext, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yuy2toyv12, align 8, !dbg !163
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32)* @vu9_to_vu12_mmxext, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32)** @vu9_to_vu12, align 8, !dbg !164
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32)* @yvu9_to_yuy2_mmxext, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32)** @yvu9_to_yuy2, align 8, !dbg !165
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @uyvytoyuv422_mmxext, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @uyvytoyuv422, align 8, !dbg !166
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yuyvtoyuv422_mmxext, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yuyvtoyuv422, align 8, !dbg !167
  store void (i8*, i8*, i32, i32, i32, i32)* @planar2x_mmxext, void (i8*, i8*, i32, i32, i32, i32)** @planar2x, align 8, !dbg !168
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32*)* @rgb24toyv12_mmxext, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32*)** @ff_rgb24toyv12, align 8, !dbg !169
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @yuyvtoyuv420_mmxext, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @yuyvtoyuv420, align 8, !dbg !170
  store void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)* @uyvytoyuv420_mmxext, void (i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32)** @uyvytoyuv420, align 8, !dbg !171
  store void (i8*, i8*, i8*, i32, i32, i32, i32, i32)* @interleaveBytes_mmxext, void (i8*, i8*, i8*, i32, i32, i32, i32, i32)** @interleaveBytes, align 8, !dbg !172
  ret void, !dbg !173
}

; Function Attrs: cold nounwind optsize uwtable
define internal void @rgb2rgb_init_sse2() #0 !dbg !174 {
entry:
  store void (i8*, i8*, i8*, i32, i32, i32, i32, i32)* @interleaveBytes_sse2, void (i8*, i8*, i8*, i32, i32, i32, i32, i32)** @interleaveBytes, align 8, !dbg !175
  ret void, !dbg !176
}

; Function Attrs: cold nounwind optsize uwtable
define internal void @rgb2rgb_init_avx() #0 !dbg !177 {
entry:
  ret void, !dbg !178
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb15to16_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !179 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %x = alloca i32, align 4
  %x13 = alloca i16, align 2
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !184, metadata !73), !dbg !185
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !186, metadata !73), !dbg !187
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !188, metadata !73), !dbg !189
  call void @llvm.dbg.declare(metadata i8** %s, metadata !190, metadata !73), !dbg !191
  %0 = load i8*, i8** %src.addr, align 8, !dbg !192
  store i8* %0, i8** %s, align 8, !dbg !191
  call void @llvm.dbg.declare(metadata i8** %d, metadata !193, metadata !73), !dbg !194
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !195
  store i8* %1, i8** %d, align 8, !dbg !194
  call void @llvm.dbg.declare(metadata i8** %end, metadata !196, metadata !73), !dbg !197
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !198, metadata !73), !dbg !199
  %2 = load i8*, i8** %s, align 8, !dbg !200
  %3 = load i32, i32* %src_size.addr, align 4, !dbg !201
  %idx.ext = sext i32 %3 to i64, !dbg !202
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext, !dbg !202
  store i8* %add.ptr, i8** %end, align 8, !dbg !203
  %4 = load i8*, i8** %s, align 8, !dbg !204
  call void asm sideeffect " # nop    $0", "*m,~{dirflag},~{fpsr},~{flags}"(i8* %4) #5, !dbg !205, !srcloc !206
  call void asm sideeffect "movq        $0, %mm4", "*m,~{dirflag},~{fpsr},~{flags}"(i64* @mask15s) #5, !dbg !207, !srcloc !208
  %5 = load i8*, i8** %end, align 8, !dbg !209
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 -15, !dbg !210
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !211
  br label %while.cond, !dbg !212

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i8*, i8** %s, align 8, !dbg !213
  %7 = load i8*, i8** %mm_end, align 8, !dbg !215
  %cmp = icmp ult i8* %6, %7, !dbg !216
  br i1 %cmp, label %while.body, label %while.end, !dbg !217

while.body:                                       ; preds = %while.cond
  %8 = load i8*, i8** %d, align 8, !dbg !218
  %9 = load i8*, i8** %s, align 8, !dbg !220
  call void asm sideeffect " # nop 32($1)        \0A\09movq      ($1), %mm0  \0A\09movq     8($1), %mm2  \0A\09movq     %mm0, %mm1  \0A\09movq     %mm2, %mm3  \0A\09pand     %mm4, %mm0  \0A\09pand     %mm4, %mm2  \0A\09paddw    %mm1, %mm0  \0A\09paddw    %mm3, %mm2  \0A\09movq   %mm0,  ($0)  \0A\09movq   %mm2, 8($0)", "r,r,~{dirflag},~{fpsr},~{flags}"(i8* %8, i8* %9) #5, !dbg !221, !srcloc !222
  %10 = load i8*, i8** %d, align 8, !dbg !223
  %add.ptr2 = getelementptr inbounds i8, i8* %10, i64 16, !dbg !223
  store i8* %add.ptr2, i8** %d, align 8, !dbg !223
  %11 = load i8*, i8** %s, align 8, !dbg !224
  %add.ptr3 = getelementptr inbounds i8, i8* %11, i64 16, !dbg !224
  store i8* %add.ptr3, i8** %s, align 8, !dbg !224
  br label %while.cond, !dbg !225, !llvm.loop !227

while.end:                                        ; preds = %while.cond
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !228, !srcloc !229
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !230, !srcloc !231
  %12 = load i8*, i8** %end, align 8, !dbg !232
  %add.ptr4 = getelementptr inbounds i8, i8* %12, i64 -3, !dbg !233
  store i8* %add.ptr4, i8** %mm_end, align 8, !dbg !234
  br label %while.cond5, !dbg !235

while.cond5:                                      ; preds = %while.body7, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !236
  %14 = load i8*, i8** %mm_end, align 8, !dbg !237
  %cmp6 = icmp ult i8* %13, %14, !dbg !238
  br i1 %cmp6, label %while.body7, label %while.end11, !dbg !239

while.body7:                                      ; preds = %while.cond5
  call void @llvm.dbg.declare(metadata i32* %x, metadata !240, metadata !73), !dbg !242
  %15 = load i8*, i8** %s, align 8, !dbg !243
  %16 = bitcast i8* %15 to i32*, !dbg !244
  %17 = load i32, i32* %16, align 4, !dbg !244
  store i32 %17, i32* %x, align 4, !dbg !242
  %18 = load i32, i32* %x, align 4, !dbg !245
  %and = and i32 %18, 2147450879, !dbg !246
  %19 = load i32, i32* %x, align 4, !dbg !247
  %and8 = and i32 %19, 2145419232, !dbg !248
  %add = add i32 %and, %and8, !dbg !249
  %20 = load i8*, i8** %d, align 8, !dbg !250
  %21 = bitcast i8* %20 to i32*, !dbg !251
  store i32 %add, i32* %21, align 4, !dbg !252
  %22 = load i8*, i8** %d, align 8, !dbg !253
  %add.ptr9 = getelementptr inbounds i8, i8* %22, i64 4, !dbg !253
  store i8* %add.ptr9, i8** %d, align 8, !dbg !253
  %23 = load i8*, i8** %s, align 8, !dbg !254
  %add.ptr10 = getelementptr inbounds i8, i8* %23, i64 4, !dbg !254
  store i8* %add.ptr10, i8** %s, align 8, !dbg !254
  br label %while.cond5, !dbg !255, !llvm.loop !256

while.end11:                                      ; preds = %while.cond5
  %24 = load i8*, i8** %s, align 8, !dbg !257
  %25 = load i8*, i8** %end, align 8, !dbg !259
  %cmp12 = icmp ult i8* %24, %25, !dbg !260
  br i1 %cmp12, label %if.then, label %if.end, !dbg !261

if.then:                                          ; preds = %while.end11
  call void @llvm.dbg.declare(metadata i16* %x13, metadata !262, metadata !73), !dbg !264
  %26 = load i8*, i8** %s, align 8, !dbg !265
  %27 = bitcast i8* %26 to i16*, !dbg !266
  %28 = load i16, i16* %27, align 2, !dbg !266
  store i16 %28, i16* %x13, align 2, !dbg !264
  %29 = load i16, i16* %x13, align 2, !dbg !267
  %conv = zext i16 %29 to i32, !dbg !267
  %and14 = and i32 %conv, 32767, !dbg !268
  %30 = load i16, i16* %x13, align 2, !dbg !269
  %conv15 = zext i16 %30 to i32, !dbg !269
  %and16 = and i32 %conv15, 32736, !dbg !270
  %add17 = add nsw i32 %and14, %and16, !dbg !271
  %conv18 = trunc i32 %add17 to i16, !dbg !272
  %31 = load i8*, i8** %d, align 8, !dbg !273
  %32 = bitcast i8* %31 to i16*, !dbg !274
  store i16 %conv18, i16* %32, align 2, !dbg !275
  br label %if.end, !dbg !276

if.end:                                           ; preds = %if.then, %while.end11
  ret void, !dbg !277
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb15tobgr24_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !278 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %end = alloca i16*, align 8
  %mm_end = alloca i16*, align 8
  %d = alloca i8*, align 8
  %s = alloca i16*, align 8
  %bgr = alloca i16, align 2
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !279, metadata !73), !dbg !280
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !281, metadata !73), !dbg !282
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !283, metadata !73), !dbg !284
  call void @llvm.dbg.declare(metadata i16** %end, metadata !285, metadata !73), !dbg !286
  call void @llvm.dbg.declare(metadata i16** %mm_end, metadata !287, metadata !73), !dbg !288
  call void @llvm.dbg.declare(metadata i8** %d, metadata !289, metadata !73), !dbg !290
  %0 = load i8*, i8** %dst.addr, align 8, !dbg !291
  store i8* %0, i8** %d, align 8, !dbg !290
  call void @llvm.dbg.declare(metadata i16** %s, metadata !292, metadata !73), !dbg !293
  %1 = load i8*, i8** %src.addr, align 8, !dbg !294
  %2 = bitcast i8* %1 to i16*, !dbg !295
  store i16* %2, i16** %s, align 8, !dbg !293
  %3 = load i16*, i16** %s, align 8, !dbg !296
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !297
  %div = sdiv i32 %4, 2, !dbg !298
  %idx.ext = sext i32 %div to i64, !dbg !299
  %add.ptr = getelementptr inbounds i16, i16* %3, i64 %idx.ext, !dbg !299
  store i16* %add.ptr, i16** %end, align 8, !dbg !300
  %5 = load i16*, i16** %s, align 8, !dbg !301
  call void asm sideeffect " # nop    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %5) #5, !dbg !302, !srcloc !303
  %6 = load i16*, i16** %end, align 8, !dbg !304
  %add.ptr1 = getelementptr inbounds i16, i16* %6, i64 -7, !dbg !305
  store i16* %add.ptr1, i16** %mm_end, align 8, !dbg !306
  br label %while.cond, !dbg !307

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i16*, i16** %s, align 8, !dbg !308
  %8 = load i16*, i16** %mm_end, align 8, !dbg !310
  %cmp = icmp ult i16* %7, %8, !dbg !311
  br i1 %cmp, label %while.body, label %while.end, !dbg !312

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %d, align 8, !dbg !313
  %10 = load i16*, i16** %s, align 8, !dbg !315
  call void asm sideeffect " # nop  32($1)           \0A\09movq        ($1), %mm0    \0A\09movq        ($1), %mm1    \0A\09movq        ($1), %mm2    \0A\09pand          $2, %mm0    \0A\09pand          $3, %mm1    \0A\09pand          $4, %mm2    \0A\09psllq         $$5, %mm0    \0A\09pmulhw        mul15_mid, %mm0    \0A\09pmulhw        mul15_mid, %mm1    \0A\09pmulhw        mul15_hi, %mm2    \0A\09movq       %mm0, %mm3    \0A\09movq       %mm1, %mm4    \0A\09movq       %mm2, %mm5    \0A\09punpcklwd     $5, %mm0    \0A\09punpcklwd     $5, %mm1    \0A\09punpcklwd     $5, %mm2    \0A\09punpckhwd     $5, %mm3    \0A\09punpckhwd     $5, %mm4    \0A\09punpckhwd     $5, %mm5    \0A\09psllq         $$8, %mm1    \0A\09psllq        $$16, %mm2    \0A\09por        %mm1, %mm0    \0A\09por        %mm2, %mm0    \0A\09psllq         $$8, %mm4    \0A\09psllq        $$16, %mm5    \0A\09por        %mm4, %mm3    \0A\09por        %mm5, %mm3    \0A\09movq       %mm0, %mm6    \0A\09movq       %mm3, %mm7    \0A\09movq       8($1), %mm0    \0A\09movq       8($1), %mm1    \0A\09movq       8($1), %mm2    \0A\09pand          $2, %mm0    \0A\09pand          $3, %mm1    \0A\09pand          $4, %mm2    \0A\09psllq         $$5, %mm0    \0A\09pmulhw        mul15_mid, %mm0    \0A\09pmulhw        mul15_mid, %mm1    \0A\09pmulhw        mul15_hi, %mm2    \0A\09movq       %mm0, %mm3    \0A\09movq       %mm1, %mm4    \0A\09movq       %mm2, %mm5    \0A\09punpcklwd     $5, %mm0    \0A\09punpcklwd     $5, %mm1    \0A\09punpcklwd     $5, %mm2    \0A\09punpckhwd     $5, %mm3    \0A\09punpckhwd     $5, %mm4    \0A\09punpckhwd     $5, %mm5    \0A\09psllq         $$8, %mm1    \0A\09psllq        $$16, %mm2    \0A\09por        %mm1, %mm0    \0A\09por        %mm2, %mm0    \0A\09psllq         $$8, %mm4    \0A\09psllq        $$16, %mm5    \0A\09por        %mm4, %mm3    \0A\09por        %mm5, %mm3    \0A\09", "=*m,r,*m,*m,*m,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %9, i16* %10, i64* @mask15b, i64* @mask15g, i64* @mask15r, i64* @mmx_null) #5, !dbg !316, !srcloc !317
  %11 = load i8*, i8** %d, align 8, !dbg !318
  %12 = load i16*, i16** %s, align 8, !dbg !319
  call void asm sideeffect "movq       %mm0, %mm4    \0A\09movq       %mm3, %mm5    \0A\09movq       %mm6, %mm0    \0A\09movq       %mm7, %mm1    \0A\09movq       %mm4, %mm6    \0A\09movq       %mm5, %mm7    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm1, %mm3    \0A\09psrlq         $$8, %mm2    \0A\09psrlq         $$8, %mm3    \0A\09psrlq         $$8, %mm6    \0A\09psrlq         $$8, %mm7    \0A\09pand mask24l, %mm0\0A\09pand mask24l, %mm1\0A\09pand mask24l, %mm4\0A\09pand mask24l, %mm5\0A\09pand mask24h, %mm2\0A\09pand mask24h, %mm3\0A\09pand mask24h, %mm6\0A\09pand mask24h, %mm7\0A\09por        %mm2, %mm0    \0A\09por        %mm3, %mm1    \0A\09por        %mm6, %mm4    \0A\09por        %mm7, %mm5    \0A\09movq       %mm1, %mm2    \0A\09movq       %mm4, %mm3    \0A\09psllq        $$48, %mm2    \0A\09psllq        $$32, %mm3    \0A\09por        %mm2, %mm0    \0A\09psrlq        $$16, %mm1    \0A\09psrlq        $$32, %mm4    \0A\09psllq        $$16, %mm5    \0A\09por        %mm3, %mm1    \0A\09por        %mm5, %mm4    \0A\09movq     %mm0,   ($0)    \0A\09movq     %mm1,  8($0)    \0A\09movq     %mm4, 16($0)", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %11, i16* %12) #5, !dbg !320, !srcloc !321
  %13 = load i8*, i8** %d, align 8, !dbg !322
  %add.ptr2 = getelementptr inbounds i8, i8* %13, i64 24, !dbg !322
  store i8* %add.ptr2, i8** %d, align 8, !dbg !322
  %14 = load i16*, i16** %s, align 8, !dbg !323
  %add.ptr3 = getelementptr inbounds i16, i16* %14, i64 8, !dbg !323
  store i16* %add.ptr3, i16** %s, align 8, !dbg !323
  br label %while.cond, !dbg !324, !llvm.loop !326

while.end:                                        ; preds = %while.cond
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !327, !srcloc !328
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !329, !srcloc !330
  br label %while.cond4, !dbg !331

while.cond4:                                      ; preds = %while.body6, %while.end
  %15 = load i16*, i16** %s, align 8, !dbg !332
  %16 = load i16*, i16** %end, align 8, !dbg !333
  %cmp5 = icmp ult i16* %15, %16, !dbg !334
  br i1 %cmp5, label %while.body6, label %while.end29, !dbg !335

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i16* %bgr, metadata !336, metadata !73), !dbg !338
  %17 = load i16*, i16** %s, align 8, !dbg !339
  %incdec.ptr = getelementptr inbounds i16, i16* %17, i32 1, !dbg !339
  store i16* %incdec.ptr, i16** %s, align 8, !dbg !339
  %18 = load i16, i16* %17, align 2, !dbg !340
  store i16 %18, i16* %bgr, align 2, !dbg !341
  %19 = load i16, i16* %bgr, align 2, !dbg !342
  %conv = zext i16 %19 to i32, !dbg !342
  %and = and i32 %conv, 31, !dbg !343
  %shl = shl i32 %and, 3, !dbg !344
  %20 = load i16, i16* %bgr, align 2, !dbg !345
  %conv7 = zext i16 %20 to i32, !dbg !345
  %and8 = and i32 %conv7, 31, !dbg !346
  %shr = ashr i32 %and8, 2, !dbg !347
  %or = or i32 %shl, %shr, !dbg !348
  %conv9 = trunc i32 %or to i8, !dbg !349
  %21 = load i8*, i8** %d, align 8, !dbg !350
  %incdec.ptr10 = getelementptr inbounds i8, i8* %21, i32 1, !dbg !350
  store i8* %incdec.ptr10, i8** %d, align 8, !dbg !350
  store i8 %conv9, i8* %21, align 1, !dbg !351
  %22 = load i16, i16* %bgr, align 2, !dbg !352
  %conv11 = zext i16 %22 to i32, !dbg !352
  %and12 = and i32 %conv11, 992, !dbg !353
  %shr13 = ashr i32 %and12, 2, !dbg !354
  %23 = load i16, i16* %bgr, align 2, !dbg !355
  %conv14 = zext i16 %23 to i32, !dbg !355
  %and15 = and i32 %conv14, 992, !dbg !356
  %shr16 = ashr i32 %and15, 7, !dbg !357
  %or17 = or i32 %shr13, %shr16, !dbg !358
  %conv18 = trunc i32 %or17 to i8, !dbg !359
  %24 = load i8*, i8** %d, align 8, !dbg !360
  %incdec.ptr19 = getelementptr inbounds i8, i8* %24, i32 1, !dbg !360
  store i8* %incdec.ptr19, i8** %d, align 8, !dbg !360
  store i8 %conv18, i8* %24, align 1, !dbg !361
  %25 = load i16, i16* %bgr, align 2, !dbg !362
  %conv20 = zext i16 %25 to i32, !dbg !362
  %and21 = and i32 %conv20, 31744, !dbg !363
  %shr22 = ashr i32 %and21, 7, !dbg !364
  %26 = load i16, i16* %bgr, align 2, !dbg !365
  %conv23 = zext i16 %26 to i32, !dbg !365
  %and24 = and i32 %conv23, 31744, !dbg !366
  %shr25 = ashr i32 %and24, 12, !dbg !367
  %or26 = or i32 %shr22, %shr25, !dbg !368
  %conv27 = trunc i32 %or26 to i8, !dbg !369
  %27 = load i8*, i8** %d, align 8, !dbg !370
  %incdec.ptr28 = getelementptr inbounds i8, i8* %27, i32 1, !dbg !370
  store i8* %incdec.ptr28, i8** %d, align 8, !dbg !370
  store i8 %conv27, i8* %27, align 1, !dbg !371
  br label %while.cond4, !dbg !372, !llvm.loop !373

while.end29:                                      ; preds = %while.cond4
  ret void, !dbg !374
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb15to32_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !375 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %end = alloca i16*, align 8
  %mm_end = alloca i16*, align 8
  %d = alloca i8*, align 8
  %s = alloca i16*, align 8
  %bgr = alloca i16, align 2
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !376, metadata !73), !dbg !377
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !378, metadata !73), !dbg !379
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !380, metadata !73), !dbg !381
  call void @llvm.dbg.declare(metadata i16** %end, metadata !382, metadata !73), !dbg !383
  call void @llvm.dbg.declare(metadata i16** %mm_end, metadata !384, metadata !73), !dbg !385
  call void @llvm.dbg.declare(metadata i8** %d, metadata !386, metadata !73), !dbg !387
  %0 = load i8*, i8** %dst.addr, align 8, !dbg !388
  store i8* %0, i8** %d, align 8, !dbg !387
  call void @llvm.dbg.declare(metadata i16** %s, metadata !389, metadata !73), !dbg !390
  %1 = load i8*, i8** %src.addr, align 8, !dbg !391
  %2 = bitcast i8* %1 to i16*, !dbg !392
  store i16* %2, i16** %s, align 8, !dbg !390
  %3 = load i16*, i16** %s, align 8, !dbg !393
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !394
  %div = sdiv i32 %4, 2, !dbg !395
  %idx.ext = sext i32 %div to i64, !dbg !396
  %add.ptr = getelementptr inbounds i16, i16* %3, i64 %idx.ext, !dbg !396
  store i16* %add.ptr, i16** %end, align 8, !dbg !397
  %5 = load i16*, i16** %s, align 8, !dbg !398
  call void asm sideeffect " # nop    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %5) #5, !dbg !399, !srcloc !400
  call void asm sideeffect "pxor    %mm7,%mm7    \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !401, !srcloc !402
  call void asm sideeffect "pcmpeqd %mm6,%mm6    \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !403, !srcloc !404
  %6 = load i16*, i16** %end, align 8, !dbg !405
  %add.ptr1 = getelementptr inbounds i16, i16* %6, i64 -3, !dbg !406
  store i16* %add.ptr1, i16** %mm_end, align 8, !dbg !407
  br label %while.cond, !dbg !408

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i16*, i16** %s, align 8, !dbg !409
  %8 = load i16*, i16** %mm_end, align 8, !dbg !411
  %cmp = icmp ult i16* %7, %8, !dbg !412
  br i1 %cmp, label %while.body, label %while.end, !dbg !413

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %d, align 8, !dbg !414
  %10 = load i16*, i16** %s, align 8, !dbg !416
  call void asm sideeffect " # nop  32($1)           \0A\09movq        ($1), %mm0    \0A\09movq        ($1), %mm1    \0A\09movq        ($1), %mm2    \0A\09pand          $2, %mm0    \0A\09pand          $3, %mm1    \0A\09pand          $4, %mm2    \0A\09psllq         $$5, %mm0    \0A\09pmulhw        $5, %mm0    \0A\09pmulhw        $5, %mm1    \0A\09pmulhw        mul15_hi, %mm2    \0A\09packuswb   %mm7, %mm0    \0A\09packuswb   %mm7, %mm1    \0A\09packuswb   %mm7, %mm2    \0A\09punpcklbw  %mm1, %mm0    \0A\09punpcklbw  %mm6, %mm2    \0A\09movq       %mm0, %mm3    \0A\09punpcklwd  %mm2, %mm0    \0A\09punpckhwd  %mm2, %mm3    \0A\09movq     %mm0,  ($0)    \0A\09movq     %mm3, 8($0)    \0A\09", "r,r,*m,*m,*m,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %9, i16* %10, i64* @mask15b, i64* @mask15g, i64* @mask15r, i64* @mul15_mid) #5, !dbg !417, !srcloc !418
  %11 = load i8*, i8** %d, align 8, !dbg !419
  %add.ptr2 = getelementptr inbounds i8, i8* %11, i64 16, !dbg !419
  store i8* %add.ptr2, i8** %d, align 8, !dbg !419
  %12 = load i16*, i16** %s, align 8, !dbg !420
  %add.ptr3 = getelementptr inbounds i16, i16* %12, i64 4, !dbg !420
  store i16* %add.ptr3, i16** %s, align 8, !dbg !420
  br label %while.cond, !dbg !421, !llvm.loop !423

while.end:                                        ; preds = %while.cond
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !424, !srcloc !425
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !426, !srcloc !427
  br label %while.cond4, !dbg !428

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i16*, i16** %s, align 8, !dbg !429
  %14 = load i16*, i16** %end, align 8, !dbg !430
  %cmp5 = icmp ult i16* %13, %14, !dbg !431
  br i1 %cmp5, label %while.body6, label %while.end30, !dbg !432

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i16* %bgr, metadata !433, metadata !73), !dbg !435
  %15 = load i16*, i16** %s, align 8, !dbg !436
  %incdec.ptr = getelementptr inbounds i16, i16* %15, i32 1, !dbg !436
  store i16* %incdec.ptr, i16** %s, align 8, !dbg !436
  %16 = load i16, i16* %15, align 2, !dbg !437
  store i16 %16, i16* %bgr, align 2, !dbg !438
  %17 = load i16, i16* %bgr, align 2, !dbg !439
  %conv = zext i16 %17 to i32, !dbg !439
  %and = and i32 %conv, 31, !dbg !440
  %shl = shl i32 %and, 3, !dbg !441
  %18 = load i16, i16* %bgr, align 2, !dbg !442
  %conv7 = zext i16 %18 to i32, !dbg !442
  %and8 = and i32 %conv7, 31, !dbg !443
  %shr = ashr i32 %and8, 2, !dbg !444
  %or = or i32 %shl, %shr, !dbg !445
  %conv9 = trunc i32 %or to i8, !dbg !446
  %19 = load i8*, i8** %d, align 8, !dbg !447
  %incdec.ptr10 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !447
  store i8* %incdec.ptr10, i8** %d, align 8, !dbg !447
  store i8 %conv9, i8* %19, align 1, !dbg !448
  %20 = load i16, i16* %bgr, align 2, !dbg !449
  %conv11 = zext i16 %20 to i32, !dbg !449
  %and12 = and i32 %conv11, 992, !dbg !450
  %shr13 = ashr i32 %and12, 2, !dbg !451
  %21 = load i16, i16* %bgr, align 2, !dbg !452
  %conv14 = zext i16 %21 to i32, !dbg !452
  %and15 = and i32 %conv14, 992, !dbg !453
  %shr16 = ashr i32 %and15, 7, !dbg !454
  %or17 = or i32 %shr13, %shr16, !dbg !455
  %conv18 = trunc i32 %or17 to i8, !dbg !456
  %22 = load i8*, i8** %d, align 8, !dbg !457
  %incdec.ptr19 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !457
  store i8* %incdec.ptr19, i8** %d, align 8, !dbg !457
  store i8 %conv18, i8* %22, align 1, !dbg !458
  %23 = load i16, i16* %bgr, align 2, !dbg !459
  %conv20 = zext i16 %23 to i32, !dbg !459
  %and21 = and i32 %conv20, 31744, !dbg !460
  %shr22 = ashr i32 %and21, 7, !dbg !461
  %24 = load i16, i16* %bgr, align 2, !dbg !462
  %conv23 = zext i16 %24 to i32, !dbg !462
  %and24 = and i32 %conv23, 31744, !dbg !463
  %shr25 = ashr i32 %and24, 12, !dbg !464
  %or26 = or i32 %shr22, %shr25, !dbg !465
  %conv27 = trunc i32 %or26 to i8, !dbg !466
  %25 = load i8*, i8** %d, align 8, !dbg !467
  %incdec.ptr28 = getelementptr inbounds i8, i8* %25, i32 1, !dbg !467
  store i8* %incdec.ptr28, i8** %d, align 8, !dbg !467
  store i8 %conv27, i8* %25, align 1, !dbg !468
  %26 = load i8*, i8** %d, align 8, !dbg !469
  %incdec.ptr29 = getelementptr inbounds i8, i8* %26, i32 1, !dbg !469
  store i8* %incdec.ptr29, i8** %d, align 8, !dbg !469
  store i8 -1, i8* %26, align 1, !dbg !470
  br label %while.cond4, !dbg !471, !llvm.loop !472

while.end30:                                      ; preds = %while.cond4
  ret void, !dbg !473
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb16tobgr24_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !474 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %end = alloca i16*, align 8
  %mm_end = alloca i16*, align 8
  %d = alloca i8*, align 8
  %s = alloca i16*, align 8
  %bgr = alloca i16, align 2
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !475, metadata !73), !dbg !476
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !477, metadata !73), !dbg !478
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !479, metadata !73), !dbg !480
  call void @llvm.dbg.declare(metadata i16** %end, metadata !481, metadata !73), !dbg !482
  call void @llvm.dbg.declare(metadata i16** %mm_end, metadata !483, metadata !73), !dbg !484
  call void @llvm.dbg.declare(metadata i8** %d, metadata !485, metadata !73), !dbg !486
  %0 = load i8*, i8** %dst.addr, align 8, !dbg !487
  store i8* %0, i8** %d, align 8, !dbg !486
  call void @llvm.dbg.declare(metadata i16** %s, metadata !488, metadata !73), !dbg !489
  %1 = load i8*, i8** %src.addr, align 8, !dbg !490
  %2 = bitcast i8* %1 to i16*, !dbg !491
  store i16* %2, i16** %s, align 8, !dbg !489
  %3 = load i16*, i16** %s, align 8, !dbg !492
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !493
  %div = sdiv i32 %4, 2, !dbg !494
  %idx.ext = sext i32 %div to i64, !dbg !495
  %add.ptr = getelementptr inbounds i16, i16* %3, i64 %idx.ext, !dbg !495
  store i16* %add.ptr, i16** %end, align 8, !dbg !496
  %5 = load i16*, i16** %s, align 8, !dbg !497
  call void asm sideeffect " # nop    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %5) #5, !dbg !498, !srcloc !499
  %6 = load i16*, i16** %end, align 8, !dbg !500
  %add.ptr1 = getelementptr inbounds i16, i16* %6, i64 -7, !dbg !501
  store i16* %add.ptr1, i16** %mm_end, align 8, !dbg !502
  br label %while.cond, !dbg !503

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i16*, i16** %s, align 8, !dbg !504
  %8 = load i16*, i16** %mm_end, align 8, !dbg !506
  %cmp = icmp ult i16* %7, %8, !dbg !507
  br i1 %cmp, label %while.body, label %while.end, !dbg !508

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %d, align 8, !dbg !509
  %10 = load i16*, i16** %s, align 8, !dbg !511
  call void asm sideeffect " # nop  32($1)           \0A\09movq        ($1), %mm0    \0A\09movq        ($1), %mm1    \0A\09movq        ($1), %mm2    \0A\09pand          $2, %mm0    \0A\09pand          $3, %mm1    \0A\09pand          $4, %mm2    \0A\09psllq         $$5, %mm0    \0A\09psrlq         $$1, %mm2    \0A\09pmulhw        mul15_mid, %mm0    \0A\09pmulhw        mul16_mid, %mm1    \0A\09pmulhw        mul15_hi, %mm2    \0A\09movq       %mm0, %mm3    \0A\09movq       %mm1, %mm4    \0A\09movq       %mm2, %mm5    \0A\09punpcklwd     $5, %mm0    \0A\09punpcklwd     $5, %mm1    \0A\09punpcklwd     $5, %mm2    \0A\09punpckhwd     $5, %mm3    \0A\09punpckhwd     $5, %mm4    \0A\09punpckhwd     $5, %mm5    \0A\09psllq         $$8, %mm1    \0A\09psllq        $$16, %mm2    \0A\09por        %mm1, %mm0    \0A\09por        %mm2, %mm0    \0A\09psllq         $$8, %mm4    \0A\09psllq        $$16, %mm5    \0A\09por        %mm4, %mm3    \0A\09por        %mm5, %mm3    \0A\09movq       %mm0, %mm6    \0A\09movq       %mm3, %mm7    \0A\09movq       8($1), %mm0    \0A\09movq       8($1), %mm1    \0A\09movq       8($1), %mm2    \0A\09pand          $2, %mm0    \0A\09pand          $3, %mm1    \0A\09pand          $4, %mm2    \0A\09psllq         $$5, %mm0    \0A\09psrlq         $$1, %mm2    \0A\09pmulhw        mul15_mid, %mm0    \0A\09pmulhw        mul16_mid, %mm1    \0A\09pmulhw        mul15_hi, %mm2    \0A\09movq       %mm0, %mm3    \0A\09movq       %mm1, %mm4    \0A\09movq       %mm2, %mm5    \0A\09punpcklwd     $5, %mm0    \0A\09punpcklwd     $5, %mm1    \0A\09punpcklwd     $5, %mm2    \0A\09punpckhwd     $5, %mm3    \0A\09punpckhwd     $5, %mm4    \0A\09punpckhwd     $5, %mm5    \0A\09psllq         $$8, %mm1    \0A\09psllq        $$16, %mm2    \0A\09por        %mm1, %mm0    \0A\09por        %mm2, %mm0    \0A\09psllq         $$8, %mm4    \0A\09psllq        $$16, %mm5    \0A\09por        %mm4, %mm3    \0A\09por        %mm5, %mm3    \0A\09", "=*m,r,*m,*m,*m,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %9, i16* %10, i64* @mask15b, i64* @mask16g, i64* @mask16r, i64* @mmx_null) #5, !dbg !512, !srcloc !513
  %11 = load i8*, i8** %d, align 8, !dbg !514
  %12 = load i16*, i16** %s, align 8, !dbg !515
  call void asm sideeffect "movq       %mm0, %mm4    \0A\09movq       %mm3, %mm5    \0A\09movq       %mm6, %mm0    \0A\09movq       %mm7, %mm1    \0A\09movq       %mm4, %mm6    \0A\09movq       %mm5, %mm7    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm1, %mm3    \0A\09psrlq         $$8, %mm2    \0A\09psrlq         $$8, %mm3    \0A\09psrlq         $$8, %mm6    \0A\09psrlq         $$8, %mm7    \0A\09pand mask24l, %mm0\0A\09pand mask24l, %mm1\0A\09pand mask24l, %mm4\0A\09pand mask24l, %mm5\0A\09pand mask24h, %mm2\0A\09pand mask24h, %mm3\0A\09pand mask24h, %mm6\0A\09pand mask24h, %mm7\0A\09por        %mm2, %mm0    \0A\09por        %mm3, %mm1    \0A\09por        %mm6, %mm4    \0A\09por        %mm7, %mm5    \0A\09movq       %mm1, %mm2    \0A\09movq       %mm4, %mm3    \0A\09psllq        $$48, %mm2    \0A\09psllq        $$32, %mm3    \0A\09por        %mm2, %mm0    \0A\09psrlq        $$16, %mm1    \0A\09psrlq        $$32, %mm4    \0A\09psllq        $$16, %mm5    \0A\09por        %mm3, %mm1    \0A\09por        %mm5, %mm4    \0A\09movq     %mm0,   ($0)    \0A\09movq     %mm1,  8($0)    \0A\09movq     %mm4, 16($0)", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %11, i16* %12) #5, !dbg !516, !srcloc !517
  %13 = load i8*, i8** %d, align 8, !dbg !518
  %add.ptr2 = getelementptr inbounds i8, i8* %13, i64 24, !dbg !518
  store i8* %add.ptr2, i8** %d, align 8, !dbg !518
  %14 = load i16*, i16** %s, align 8, !dbg !519
  %add.ptr3 = getelementptr inbounds i16, i16* %14, i64 8, !dbg !519
  store i16* %add.ptr3, i16** %s, align 8, !dbg !519
  br label %while.cond, !dbg !520, !llvm.loop !522

while.end:                                        ; preds = %while.cond
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !523, !srcloc !524
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !525, !srcloc !526
  br label %while.cond4, !dbg !527

while.cond4:                                      ; preds = %while.body6, %while.end
  %15 = load i16*, i16** %s, align 8, !dbg !528
  %16 = load i16*, i16** %end, align 8, !dbg !529
  %cmp5 = icmp ult i16* %15, %16, !dbg !530
  br i1 %cmp5, label %while.body6, label %while.end29, !dbg !531

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i16* %bgr, metadata !532, metadata !73), !dbg !534
  %17 = load i16*, i16** %s, align 8, !dbg !535
  %incdec.ptr = getelementptr inbounds i16, i16* %17, i32 1, !dbg !535
  store i16* %incdec.ptr, i16** %s, align 8, !dbg !535
  %18 = load i16, i16* %17, align 2, !dbg !536
  store i16 %18, i16* %bgr, align 2, !dbg !537
  %19 = load i16, i16* %bgr, align 2, !dbg !538
  %conv = zext i16 %19 to i32, !dbg !538
  %and = and i32 %conv, 31, !dbg !539
  %shl = shl i32 %and, 3, !dbg !540
  %20 = load i16, i16* %bgr, align 2, !dbg !541
  %conv7 = zext i16 %20 to i32, !dbg !541
  %and8 = and i32 %conv7, 31, !dbg !542
  %shr = ashr i32 %and8, 2, !dbg !543
  %or = or i32 %shl, %shr, !dbg !544
  %conv9 = trunc i32 %or to i8, !dbg !545
  %21 = load i8*, i8** %d, align 8, !dbg !546
  %incdec.ptr10 = getelementptr inbounds i8, i8* %21, i32 1, !dbg !546
  store i8* %incdec.ptr10, i8** %d, align 8, !dbg !546
  store i8 %conv9, i8* %21, align 1, !dbg !547
  %22 = load i16, i16* %bgr, align 2, !dbg !548
  %conv11 = zext i16 %22 to i32, !dbg !548
  %and12 = and i32 %conv11, 2016, !dbg !549
  %shr13 = ashr i32 %and12, 3, !dbg !550
  %23 = load i16, i16* %bgr, align 2, !dbg !551
  %conv14 = zext i16 %23 to i32, !dbg !551
  %and15 = and i32 %conv14, 2016, !dbg !552
  %shr16 = ashr i32 %and15, 9, !dbg !553
  %or17 = or i32 %shr13, %shr16, !dbg !554
  %conv18 = trunc i32 %or17 to i8, !dbg !555
  %24 = load i8*, i8** %d, align 8, !dbg !556
  %incdec.ptr19 = getelementptr inbounds i8, i8* %24, i32 1, !dbg !556
  store i8* %incdec.ptr19, i8** %d, align 8, !dbg !556
  store i8 %conv18, i8* %24, align 1, !dbg !557
  %25 = load i16, i16* %bgr, align 2, !dbg !558
  %conv20 = zext i16 %25 to i32, !dbg !558
  %and21 = and i32 %conv20, 63488, !dbg !559
  %shr22 = ashr i32 %and21, 8, !dbg !560
  %26 = load i16, i16* %bgr, align 2, !dbg !561
  %conv23 = zext i16 %26 to i32, !dbg !561
  %and24 = and i32 %conv23, 63488, !dbg !562
  %shr25 = ashr i32 %and24, 13, !dbg !563
  %or26 = or i32 %shr22, %shr25, !dbg !564
  %conv27 = trunc i32 %or26 to i8, !dbg !565
  %27 = load i8*, i8** %d, align 8, !dbg !566
  %incdec.ptr28 = getelementptr inbounds i8, i8* %27, i32 1, !dbg !566
  store i8* %incdec.ptr28, i8** %d, align 8, !dbg !566
  store i8 %conv27, i8* %27, align 1, !dbg !567
  br label %while.cond4, !dbg !568, !llvm.loop !569

while.end29:                                      ; preds = %while.cond4
  ret void, !dbg !570
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb16to32_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !571 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %end = alloca i16*, align 8
  %mm_end = alloca i16*, align 8
  %d = alloca i8*, align 8
  %s = alloca i16*, align 8
  %bgr = alloca i16, align 2
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !572, metadata !73), !dbg !573
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !574, metadata !73), !dbg !575
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !576, metadata !73), !dbg !577
  call void @llvm.dbg.declare(metadata i16** %end, metadata !578, metadata !73), !dbg !579
  call void @llvm.dbg.declare(metadata i16** %mm_end, metadata !580, metadata !73), !dbg !581
  call void @llvm.dbg.declare(metadata i8** %d, metadata !582, metadata !73), !dbg !583
  %0 = load i8*, i8** %dst.addr, align 8, !dbg !584
  store i8* %0, i8** %d, align 8, !dbg !583
  call void @llvm.dbg.declare(metadata i16** %s, metadata !585, metadata !73), !dbg !586
  %1 = load i8*, i8** %src.addr, align 8, !dbg !587
  %2 = bitcast i8* %1 to i16*, !dbg !588
  store i16* %2, i16** %s, align 8, !dbg !586
  %3 = load i16*, i16** %s, align 8, !dbg !589
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !590
  %div = sdiv i32 %4, 2, !dbg !591
  %idx.ext = sext i32 %div to i64, !dbg !592
  %add.ptr = getelementptr inbounds i16, i16* %3, i64 %idx.ext, !dbg !592
  store i16* %add.ptr, i16** %end, align 8, !dbg !593
  %5 = load i16*, i16** %s, align 8, !dbg !594
  call void asm sideeffect " # nop    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %5) #5, !dbg !595, !srcloc !596
  call void asm sideeffect "pxor    %mm7,%mm7    \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !597, !srcloc !598
  call void asm sideeffect "pcmpeqd %mm6,%mm6    \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !599, !srcloc !600
  %6 = load i16*, i16** %end, align 8, !dbg !601
  %add.ptr1 = getelementptr inbounds i16, i16* %6, i64 -3, !dbg !602
  store i16* %add.ptr1, i16** %mm_end, align 8, !dbg !603
  br label %while.cond, !dbg !604

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i16*, i16** %s, align 8, !dbg !605
  %8 = load i16*, i16** %mm_end, align 8, !dbg !607
  %cmp = icmp ult i16* %7, %8, !dbg !608
  br i1 %cmp, label %while.body, label %while.end, !dbg !609

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %d, align 8, !dbg !610
  %10 = load i16*, i16** %s, align 8, !dbg !612
  call void asm sideeffect " # nop  32($1)           \0A\09movq        ($1), %mm0    \0A\09movq        ($1), %mm1    \0A\09movq        ($1), %mm2    \0A\09pand          $2, %mm0    \0A\09pand          $3, %mm1    \0A\09pand          $4, %mm2    \0A\09psllq         $$5, %mm0    \0A\09psrlq         $$1, %mm2    \0A\09pmulhw        $5, %mm0    \0A\09pmulhw        mul16_mid, %mm1    \0A\09pmulhw        mul15_hi, %mm2    \0A\09packuswb   %mm7, %mm0    \0A\09packuswb   %mm7, %mm1    \0A\09packuswb   %mm7, %mm2    \0A\09punpcklbw  %mm1, %mm0    \0A\09punpcklbw  %mm6, %mm2    \0A\09movq       %mm0, %mm3    \0A\09punpcklwd  %mm2, %mm0    \0A\09punpckhwd  %mm2, %mm3    \0A\09movq     %mm0,  ($0)    \0A\09movq     %mm3, 8($0)    \0A\09", "r,r,*m,*m,*m,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %9, i16* %10, i64* @mask15b, i64* @mask16g, i64* @mask16r, i64* @mul15_mid) #5, !dbg !613, !srcloc !614
  %11 = load i8*, i8** %d, align 8, !dbg !615
  %add.ptr2 = getelementptr inbounds i8, i8* %11, i64 16, !dbg !615
  store i8* %add.ptr2, i8** %d, align 8, !dbg !615
  %12 = load i16*, i16** %s, align 8, !dbg !616
  %add.ptr3 = getelementptr inbounds i16, i16* %12, i64 4, !dbg !616
  store i16* %add.ptr3, i16** %s, align 8, !dbg !616
  br label %while.cond, !dbg !617, !llvm.loop !619

while.end:                                        ; preds = %while.cond
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !620, !srcloc !621
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !622, !srcloc !623
  br label %while.cond4, !dbg !624

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i16*, i16** %s, align 8, !dbg !625
  %14 = load i16*, i16** %end, align 8, !dbg !626
  %cmp5 = icmp ult i16* %13, %14, !dbg !627
  br i1 %cmp5, label %while.body6, label %while.end30, !dbg !628

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i16* %bgr, metadata !629, metadata !73), !dbg !631
  %15 = load i16*, i16** %s, align 8, !dbg !632
  %incdec.ptr = getelementptr inbounds i16, i16* %15, i32 1, !dbg !632
  store i16* %incdec.ptr, i16** %s, align 8, !dbg !632
  %16 = load i16, i16* %15, align 2, !dbg !633
  store i16 %16, i16* %bgr, align 2, !dbg !634
  %17 = load i16, i16* %bgr, align 2, !dbg !635
  %conv = zext i16 %17 to i32, !dbg !635
  %and = and i32 %conv, 31, !dbg !636
  %shl = shl i32 %and, 3, !dbg !637
  %18 = load i16, i16* %bgr, align 2, !dbg !638
  %conv7 = zext i16 %18 to i32, !dbg !638
  %and8 = and i32 %conv7, 31, !dbg !639
  %shr = ashr i32 %and8, 2, !dbg !640
  %or = or i32 %shl, %shr, !dbg !641
  %conv9 = trunc i32 %or to i8, !dbg !642
  %19 = load i8*, i8** %d, align 8, !dbg !643
  %incdec.ptr10 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !643
  store i8* %incdec.ptr10, i8** %d, align 8, !dbg !643
  store i8 %conv9, i8* %19, align 1, !dbg !644
  %20 = load i16, i16* %bgr, align 2, !dbg !645
  %conv11 = zext i16 %20 to i32, !dbg !645
  %and12 = and i32 %conv11, 2016, !dbg !646
  %shr13 = ashr i32 %and12, 3, !dbg !647
  %21 = load i16, i16* %bgr, align 2, !dbg !648
  %conv14 = zext i16 %21 to i32, !dbg !648
  %and15 = and i32 %conv14, 2016, !dbg !649
  %shr16 = ashr i32 %and15, 9, !dbg !650
  %or17 = or i32 %shr13, %shr16, !dbg !651
  %conv18 = trunc i32 %or17 to i8, !dbg !652
  %22 = load i8*, i8** %d, align 8, !dbg !653
  %incdec.ptr19 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !653
  store i8* %incdec.ptr19, i8** %d, align 8, !dbg !653
  store i8 %conv18, i8* %22, align 1, !dbg !654
  %23 = load i16, i16* %bgr, align 2, !dbg !655
  %conv20 = zext i16 %23 to i32, !dbg !655
  %and21 = and i32 %conv20, 63488, !dbg !656
  %shr22 = ashr i32 %and21, 8, !dbg !657
  %24 = load i16, i16* %bgr, align 2, !dbg !658
  %conv23 = zext i16 %24 to i32, !dbg !658
  %and24 = and i32 %conv23, 63488, !dbg !659
  %shr25 = ashr i32 %and24, 13, !dbg !660
  %or26 = or i32 %shr22, %shr25, !dbg !661
  %conv27 = trunc i32 %or26 to i8, !dbg !662
  %25 = load i8*, i8** %d, align 8, !dbg !663
  %incdec.ptr28 = getelementptr inbounds i8, i8* %25, i32 1, !dbg !663
  store i8* %incdec.ptr28, i8** %d, align 8, !dbg !663
  store i8 %conv27, i8* %25, align 1, !dbg !664
  %26 = load i8*, i8** %d, align 8, !dbg !665
  %incdec.ptr29 = getelementptr inbounds i8, i8* %26, i32 1, !dbg !665
  store i8* %incdec.ptr29, i8** %d, align 8, !dbg !665
  store i8 -1, i8* %26, align 1, !dbg !666
  br label %while.cond4, !dbg !667, !llvm.loop !668

while.end30:                                      ; preds = %while.cond4
  ret void, !dbg !669
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb16to15_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !670 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %x = alloca i32, align 4
  %x13 = alloca i16, align 2
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !671, metadata !73), !dbg !672
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !673, metadata !73), !dbg !674
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !675, metadata !73), !dbg !676
  call void @llvm.dbg.declare(metadata i8** %s, metadata !677, metadata !73), !dbg !678
  %0 = load i8*, i8** %src.addr, align 8, !dbg !679
  store i8* %0, i8** %s, align 8, !dbg !678
  call void @llvm.dbg.declare(metadata i8** %d, metadata !680, metadata !73), !dbg !681
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !682
  store i8* %1, i8** %d, align 8, !dbg !681
  call void @llvm.dbg.declare(metadata i8** %end, metadata !683, metadata !73), !dbg !684
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !685, metadata !73), !dbg !686
  %2 = load i8*, i8** %s, align 8, !dbg !687
  %3 = load i32, i32* %src_size.addr, align 4, !dbg !688
  %idx.ext = sext i32 %3 to i64, !dbg !689
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext, !dbg !689
  store i8* %add.ptr, i8** %end, align 8, !dbg !690
  %4 = load i8*, i8** %s, align 8, !dbg !691
  call void asm sideeffect " # nop    $0", "*m,~{dirflag},~{fpsr},~{flags}"(i8* %4) #5, !dbg !692, !srcloc !693
  call void asm sideeffect "movq        $0, %mm7", "*m,~{dirflag},~{fpsr},~{flags}"(i64* @mask15rg) #5, !dbg !694, !srcloc !695
  call void asm sideeffect "movq        $0, %mm6", "*m,~{dirflag},~{fpsr},~{flags}"(i64* @mask15b) #5, !dbg !696, !srcloc !697
  %5 = load i8*, i8** %end, align 8, !dbg !698
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 -15, !dbg !699
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !700
  br label %while.cond, !dbg !701

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i8*, i8** %s, align 8, !dbg !702
  %7 = load i8*, i8** %mm_end, align 8, !dbg !704
  %cmp = icmp ult i8* %6, %7, !dbg !705
  br i1 %cmp, label %while.body, label %while.end, !dbg !706

while.body:                                       ; preds = %while.cond
  %8 = load i8*, i8** %d, align 8, !dbg !707
  %9 = load i8*, i8** %s, align 8, !dbg !709
  call void asm sideeffect " # nop 32($1)        \0A\09movq      ($1), %mm0  \0A\09movq     8($1), %mm2  \0A\09movq     %mm0, %mm1  \0A\09movq     %mm2, %mm3  \0A\09psrlq       $$1, %mm0  \0A\09psrlq       $$1, %mm2  \0A\09pand     %mm7, %mm0  \0A\09pand     %mm7, %mm2  \0A\09pand     %mm6, %mm1  \0A\09pand     %mm6, %mm3  \0A\09por      %mm1, %mm0  \0A\09por      %mm3, %mm2  \0A\09movq   %mm0,  ($0)  \0A\09movq   %mm2, 8($0)", "r,r,~{dirflag},~{fpsr},~{flags}"(i8* %8, i8* %9) #5, !dbg !710, !srcloc !711
  %10 = load i8*, i8** %d, align 8, !dbg !712
  %add.ptr2 = getelementptr inbounds i8, i8* %10, i64 16, !dbg !712
  store i8* %add.ptr2, i8** %d, align 8, !dbg !712
  %11 = load i8*, i8** %s, align 8, !dbg !713
  %add.ptr3 = getelementptr inbounds i8, i8* %11, i64 16, !dbg !713
  store i8* %add.ptr3, i8** %s, align 8, !dbg !713
  br label %while.cond, !dbg !714, !llvm.loop !716

while.end:                                        ; preds = %while.cond
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !717, !srcloc !718
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !719, !srcloc !720
  %12 = load i8*, i8** %end, align 8, !dbg !721
  %add.ptr4 = getelementptr inbounds i8, i8* %12, i64 -3, !dbg !722
  store i8* %add.ptr4, i8** %mm_end, align 8, !dbg !723
  br label %while.cond5, !dbg !724

while.cond5:                                      ; preds = %while.body7, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !725
  %14 = load i8*, i8** %mm_end, align 8, !dbg !726
  %cmp6 = icmp ult i8* %13, %14, !dbg !727
  br i1 %cmp6, label %while.body7, label %while.end11, !dbg !728

while.body7:                                      ; preds = %while.cond5
  call void @llvm.dbg.declare(metadata i32* %x, metadata !729, metadata !73), !dbg !731
  %15 = load i8*, i8** %s, align 8, !dbg !732
  %16 = bitcast i8* %15 to i32*, !dbg !733
  %17 = load i32, i32* %16, align 4, !dbg !733
  store i32 %17, i32* %x, align 4, !dbg !731
  %18 = load i32, i32* %x, align 4, !dbg !734
  %shr = lshr i32 %18, 1, !dbg !735
  %and = and i32 %shr, 2145419232, !dbg !736
  %19 = load i32, i32* %x, align 4, !dbg !737
  %and8 = and i32 %19, 2031647, !dbg !738
  %or = or i32 %and, %and8, !dbg !739
  %20 = load i8*, i8** %d, align 8, !dbg !740
  %21 = bitcast i8* %20 to i32*, !dbg !741
  store i32 %or, i32* %21, align 4, !dbg !742
  %22 = load i8*, i8** %s, align 8, !dbg !743
  %add.ptr9 = getelementptr inbounds i8, i8* %22, i64 4, !dbg !743
  store i8* %add.ptr9, i8** %s, align 8, !dbg !743
  %23 = load i8*, i8** %d, align 8, !dbg !744
  %add.ptr10 = getelementptr inbounds i8, i8* %23, i64 4, !dbg !744
  store i8* %add.ptr10, i8** %d, align 8, !dbg !744
  br label %while.cond5, !dbg !745, !llvm.loop !746

while.end11:                                      ; preds = %while.cond5
  %24 = load i8*, i8** %s, align 8, !dbg !747
  %25 = load i8*, i8** %end, align 8, !dbg !749
  %cmp12 = icmp ult i8* %24, %25, !dbg !750
  br i1 %cmp12, label %if.then, label %if.end, !dbg !751

if.then:                                          ; preds = %while.end11
  call void @llvm.dbg.declare(metadata i16* %x13, metadata !752, metadata !73), !dbg !754
  %26 = load i8*, i8** %s, align 8, !dbg !755
  %27 = bitcast i8* %26 to i16*, !dbg !756
  %28 = load i16, i16* %27, align 2, !dbg !756
  store i16 %28, i16* %x13, align 2, !dbg !754
  %29 = load i16, i16* %x13, align 2, !dbg !757
  %conv = zext i16 %29 to i32, !dbg !757
  %shr14 = ashr i32 %conv, 1, !dbg !758
  %and15 = and i32 %shr14, 32736, !dbg !759
  %30 = load i16, i16* %x13, align 2, !dbg !760
  %conv16 = zext i16 %30 to i32, !dbg !760
  %and17 = and i32 %conv16, 31, !dbg !761
  %or18 = or i32 %and15, %and17, !dbg !762
  %conv19 = trunc i32 %or18 to i16, !dbg !763
  %31 = load i8*, i8** %d, align 8, !dbg !764
  %32 = bitcast i8* %31 to i16*, !dbg !765
  store i16 %conv19, i16* %32, align 2, !dbg !766
  br label %if.end, !dbg !767

if.end:                                           ; preds = %if.then, %while.end11
  ret void, !dbg !768
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24tobgr16_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !769 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %b = alloca i32, align 4
  %g = alloca i32, align 4
  %r = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !770, metadata !73), !dbg !771
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !772, metadata !73), !dbg !773
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !774, metadata !73), !dbg !775
  call void @llvm.dbg.declare(metadata i8** %s, metadata !776, metadata !73), !dbg !777
  %0 = load i8*, i8** %src.addr, align 8, !dbg !778
  store i8* %0, i8** %s, align 8, !dbg !777
  call void @llvm.dbg.declare(metadata i8** %end, metadata !779, metadata !73), !dbg !780
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !781, metadata !73), !dbg !782
  call void @llvm.dbg.declare(metadata i16** %d, metadata !783, metadata !73), !dbg !784
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !785
  %2 = bitcast i8* %1 to i16*, !dbg !786
  store i16* %2, i16** %d, align 8, !dbg !784
  %3 = load i8*, i8** %s, align 8, !dbg !787
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !788
  %idx.ext = sext i32 %4 to i64, !dbg !789
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !789
  store i8* %add.ptr, i8** %end, align 8, !dbg !790
  %5 = load i8*, i8** %src.addr, align 8, !dbg !791
  call void asm sideeffect " # nop    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %5) #5, !dbg !792, !srcloc !793
  call void asm sideeffect "movq         $0, %mm7     \0A\09movq         $1, %mm6     \0A\09", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i64* @red_16mask, i64* @green_16mask) #5, !dbg !794, !srcloc !795
  %6 = load i8*, i8** %end, align 8, !dbg !796
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 -11, !dbg !797
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !798
  br label %while.cond, !dbg !799

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i8*, i8** %s, align 8, !dbg !800
  %8 = load i8*, i8** %mm_end, align 8, !dbg !802
  %cmp = icmp ult i8* %7, %8, !dbg !803
  br i1 %cmp, label %while.body, label %while.end, !dbg !804

while.body:                                       ; preds = %while.cond
  %9 = load i16*, i16** %d, align 8, !dbg !805
  %10 = load i8*, i8** %s, align 8, !dbg !807
  call void asm sideeffect " # nop  32($1)           \0A\09movd        ($1), %mm0    \0A\09movd       3($1), %mm3    \0A\09punpckldq  6($1), %mm0    \0A\09punpckldq  9($1), %mm3    \0A\09movq       %mm0, %mm1    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm3, %mm4    \0A\09movq       %mm3, %mm5    \0A\09psrlq         $$3, %mm0    \0A\09psrlq         $$3, %mm3    \0A\09pand          $2, %mm0    \0A\09pand          $2, %mm3    \0A\09psrlq         $$5, %mm1    \0A\09psrlq         $$5, %mm4    \0A\09pand       %mm6, %mm1    \0A\09pand       %mm6, %mm4    \0A\09psrlq         $$8, %mm2    \0A\09psrlq         $$8, %mm5    \0A\09pand       %mm7, %mm2    \0A\09pand       %mm7, %mm5    \0A\09por        %mm1, %mm0    \0A\09por        %mm4, %mm3    \0A\09por        %mm2, %mm0    \0A\09por        %mm5, %mm3    \0A\09psllq        $$16, %mm3    \0A\09por        %mm3, %mm0    \0A\09movq     %mm0, ($0)     \0A\09", "r,r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %9, i8* %10, i64* @blue_16mask) #5, !dbg !808, !srcloc !809
  %11 = load i16*, i16** %d, align 8, !dbg !810
  %add.ptr2 = getelementptr inbounds i16, i16* %11, i64 4, !dbg !810
  store i16* %add.ptr2, i16** %d, align 8, !dbg !810
  %12 = load i8*, i8** %s, align 8, !dbg !811
  %add.ptr3 = getelementptr inbounds i8, i8* %12, i64 12, !dbg !811
  store i8* %add.ptr3, i8** %s, align 8, !dbg !811
  br label %while.cond, !dbg !812, !llvm.loop !814

while.end:                                        ; preds = %while.cond
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !815, !srcloc !816
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !817, !srcloc !818
  br label %while.cond4, !dbg !819

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !820
  %14 = load i8*, i8** %end, align 8, !dbg !821
  %cmp5 = icmp ult i8* %13, %14, !dbg !822
  br i1 %cmp5, label %while.body6, label %while.end16, !dbg !823

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i32* %b, metadata !824, metadata !73), !dbg !827
  %15 = load i8*, i8** %s, align 8, !dbg !828
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1, !dbg !828
  store i8* %incdec.ptr, i8** %s, align 8, !dbg !828
  %16 = load i8, i8* %15, align 1, !dbg !829
  %conv = zext i8 %16 to i32, !dbg !829
  store i32 %conv, i32* %b, align 4, !dbg !827
  call void @llvm.dbg.declare(metadata i32* %g, metadata !830, metadata !73), !dbg !831
  %17 = load i8*, i8** %s, align 8, !dbg !832
  %incdec.ptr7 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !832
  store i8* %incdec.ptr7, i8** %s, align 8, !dbg !832
  %18 = load i8, i8* %17, align 1, !dbg !833
  %conv8 = zext i8 %18 to i32, !dbg !833
  store i32 %conv8, i32* %g, align 4, !dbg !831
  call void @llvm.dbg.declare(metadata i32* %r, metadata !834, metadata !73), !dbg !835
  %19 = load i8*, i8** %s, align 8, !dbg !836
  %incdec.ptr9 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !836
  store i8* %incdec.ptr9, i8** %s, align 8, !dbg !836
  %20 = load i8, i8* %19, align 1, !dbg !837
  %conv10 = zext i8 %20 to i32, !dbg !837
  store i32 %conv10, i32* %r, align 4, !dbg !835
  %21 = load i32, i32* %b, align 4, !dbg !838
  %shr = ashr i32 %21, 3, !dbg !839
  %22 = load i32, i32* %g, align 4, !dbg !840
  %and = and i32 %22, 252, !dbg !841
  %shl = shl i32 %and, 3, !dbg !842
  %or = or i32 %shr, %shl, !dbg !843
  %23 = load i32, i32* %r, align 4, !dbg !844
  %and11 = and i32 %23, 248, !dbg !845
  %shl12 = shl i32 %and11, 8, !dbg !846
  %or13 = or i32 %or, %shl12, !dbg !847
  %conv14 = trunc i32 %or13 to i16, !dbg !848
  %24 = load i16*, i16** %d, align 8, !dbg !849
  %incdec.ptr15 = getelementptr inbounds i16, i16* %24, i32 1, !dbg !849
  store i16* %incdec.ptr15, i16** %d, align 8, !dbg !849
  store i16 %conv14, i16* %24, align 2, !dbg !850
  br label %while.cond4, !dbg !851, !llvm.loop !852

while.end16:                                      ; preds = %while.cond4
  ret void, !dbg !853
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24tobgr15_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !854 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %b = alloca i32, align 4
  %g = alloca i32, align 4
  %r = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !855, metadata !73), !dbg !856
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !857, metadata !73), !dbg !858
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !859, metadata !73), !dbg !860
  call void @llvm.dbg.declare(metadata i8** %s, metadata !861, metadata !73), !dbg !862
  %0 = load i8*, i8** %src.addr, align 8, !dbg !863
  store i8* %0, i8** %s, align 8, !dbg !862
  call void @llvm.dbg.declare(metadata i8** %end, metadata !864, metadata !73), !dbg !865
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !866, metadata !73), !dbg !867
  call void @llvm.dbg.declare(metadata i16** %d, metadata !868, metadata !73), !dbg !869
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !870
  %2 = bitcast i8* %1 to i16*, !dbg !871
  store i16* %2, i16** %d, align 8, !dbg !869
  %3 = load i8*, i8** %s, align 8, !dbg !872
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !873
  %idx.ext = sext i32 %4 to i64, !dbg !874
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !874
  store i8* %add.ptr, i8** %end, align 8, !dbg !875
  %5 = load i8*, i8** %src.addr, align 8, !dbg !876
  call void asm sideeffect " # nop    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %5) #5, !dbg !877, !srcloc !878
  call void asm sideeffect "movq          $0, %mm7    \0A\09movq          $1, %mm6    \0A\09", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i64* @red_15mask, i64* @green_15mask) #5, !dbg !879, !srcloc !880
  %6 = load i8*, i8** %end, align 8, !dbg !881
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 -11, !dbg !882
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !883
  br label %while.cond, !dbg !884

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i8*, i8** %s, align 8, !dbg !885
  %8 = load i8*, i8** %mm_end, align 8, !dbg !887
  %cmp = icmp ult i8* %7, %8, !dbg !888
  br i1 %cmp, label %while.body, label %while.end, !dbg !889

while.body:                                       ; preds = %while.cond
  %9 = load i16*, i16** %d, align 8, !dbg !890
  %10 = load i8*, i8** %s, align 8, !dbg !892
  call void asm sideeffect " # nop  32($1)           \0A\09movd        ($1), %mm0    \0A\09movd       3($1), %mm3    \0A\09punpckldq  6($1), %mm0    \0A\09punpckldq  9($1), %mm3    \0A\09movq       %mm0, %mm1    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm3, %mm4    \0A\09movq       %mm3, %mm5    \0A\09psrlq         $$3, %mm0    \0A\09psrlq         $$3, %mm3    \0A\09pand          $2, %mm0    \0A\09pand          $2, %mm3    \0A\09psrlq         $$6, %mm1    \0A\09psrlq         $$6, %mm4    \0A\09pand       %mm6, %mm1    \0A\09pand       %mm6, %mm4    \0A\09psrlq         $$9, %mm2    \0A\09psrlq         $$9, %mm5    \0A\09pand       %mm7, %mm2    \0A\09pand       %mm7, %mm5    \0A\09por        %mm1, %mm0    \0A\09por        %mm4, %mm3    \0A\09por        %mm2, %mm0    \0A\09por        %mm5, %mm3    \0A\09psllq        $$16, %mm3    \0A\09por        %mm3, %mm0    \0A\09movq     %mm0, ($0)     \0A\09", "r,r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %9, i8* %10, i64* @blue_15mask) #5, !dbg !893, !srcloc !894
  %11 = load i16*, i16** %d, align 8, !dbg !895
  %add.ptr2 = getelementptr inbounds i16, i16* %11, i64 4, !dbg !895
  store i16* %add.ptr2, i16** %d, align 8, !dbg !895
  %12 = load i8*, i8** %s, align 8, !dbg !896
  %add.ptr3 = getelementptr inbounds i8, i8* %12, i64 12, !dbg !896
  store i8* %add.ptr3, i8** %s, align 8, !dbg !896
  br label %while.cond, !dbg !897, !llvm.loop !899

while.end:                                        ; preds = %while.cond
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !900, !srcloc !901
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !902, !srcloc !903
  br label %while.cond4, !dbg !904

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !905
  %14 = load i8*, i8** %end, align 8, !dbg !906
  %cmp5 = icmp ult i8* %13, %14, !dbg !907
  br i1 %cmp5, label %while.body6, label %while.end16, !dbg !908

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i32* %b, metadata !909, metadata !73), !dbg !911
  %15 = load i8*, i8** %s, align 8, !dbg !912
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1, !dbg !912
  store i8* %incdec.ptr, i8** %s, align 8, !dbg !912
  %16 = load i8, i8* %15, align 1, !dbg !913
  %conv = zext i8 %16 to i32, !dbg !913
  store i32 %conv, i32* %b, align 4, !dbg !911
  call void @llvm.dbg.declare(metadata i32* %g, metadata !914, metadata !73), !dbg !915
  %17 = load i8*, i8** %s, align 8, !dbg !916
  %incdec.ptr7 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !916
  store i8* %incdec.ptr7, i8** %s, align 8, !dbg !916
  %18 = load i8, i8* %17, align 1, !dbg !917
  %conv8 = zext i8 %18 to i32, !dbg !917
  store i32 %conv8, i32* %g, align 4, !dbg !915
  call void @llvm.dbg.declare(metadata i32* %r, metadata !918, metadata !73), !dbg !919
  %19 = load i8*, i8** %s, align 8, !dbg !920
  %incdec.ptr9 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !920
  store i8* %incdec.ptr9, i8** %s, align 8, !dbg !920
  %20 = load i8, i8* %19, align 1, !dbg !921
  %conv10 = zext i8 %20 to i32, !dbg !921
  store i32 %conv10, i32* %r, align 4, !dbg !919
  %21 = load i32, i32* %b, align 4, !dbg !922
  %shr = ashr i32 %21, 3, !dbg !923
  %22 = load i32, i32* %g, align 4, !dbg !924
  %and = and i32 %22, 248, !dbg !925
  %shl = shl i32 %and, 2, !dbg !926
  %or = or i32 %shr, %shl, !dbg !927
  %23 = load i32, i32* %r, align 4, !dbg !928
  %and11 = and i32 %23, 248, !dbg !929
  %shl12 = shl i32 %and11, 7, !dbg !930
  %or13 = or i32 %or, %shl12, !dbg !931
  %conv14 = trunc i32 %or13 to i16, !dbg !932
  %24 = load i16*, i16** %d, align 8, !dbg !933
  %incdec.ptr15 = getelementptr inbounds i16, i16* %24, i32 1, !dbg !933
  store i16* %incdec.ptr15, i16** %d, align 8, !dbg !933
  store i16 %conv14, i16* %24, align 2, !dbg !934
  br label %while.cond4, !dbg !935, !llvm.loop !936

while.end16:                                      ; preds = %while.cond4
  ret void, !dbg !937
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24tobgr32_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !938 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %dest = alloca i8*, align 8
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !939, metadata !73), !dbg !940
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !941, metadata !73), !dbg !942
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !943, metadata !73), !dbg !944
  call void @llvm.dbg.declare(metadata i8** %dest, metadata !945, metadata !73), !dbg !946
  %0 = load i8*, i8** %dst.addr, align 8, !dbg !947
  store i8* %0, i8** %dest, align 8, !dbg !946
  call void @llvm.dbg.declare(metadata i8** %s, metadata !948, metadata !73), !dbg !949
  %1 = load i8*, i8** %src.addr, align 8, !dbg !950
  store i8* %1, i8** %s, align 8, !dbg !949
  call void @llvm.dbg.declare(metadata i8** %end, metadata !951, metadata !73), !dbg !952
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !953, metadata !73), !dbg !954
  %2 = load i8*, i8** %s, align 8, !dbg !955
  %3 = load i32, i32* %src_size.addr, align 4, !dbg !956
  %idx.ext = sext i32 %3 to i64, !dbg !957
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext, !dbg !957
  store i8* %add.ptr, i8** %end, align 8, !dbg !958
  %4 = load i8*, i8** %s, align 8, !dbg !959
  call void asm sideeffect " # nop    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %4) #5, !dbg !960, !srcloc !961
  %5 = load i8*, i8** %end, align 8, !dbg !962
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 -23, !dbg !963
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !964
  call void asm sideeffect "movq        $0, %mm7", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* @mask32a) #5, !dbg !965, !srcloc !966
  br label %while.cond, !dbg !967

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i8*, i8** %s, align 8, !dbg !968
  %7 = load i8*, i8** %mm_end, align 8, !dbg !970
  %cmp = icmp ult i8* %6, %7, !dbg !971
  br i1 %cmp, label %while.body, label %while.end, !dbg !972

while.body:                                       ; preds = %while.cond
  %8 = load i8*, i8** %dest, align 8, !dbg !973
  %9 = load i8*, i8** %s, align 8, !dbg !975
  call void asm sideeffect " # nop  32($1)           \0A\09movd        ($1), %mm0    \0A\09punpckldq  3($1), %mm0    \0A\09movd       6($1), %mm1    \0A\09punpckldq  9($1), %mm1    \0A\09movd      12($1), %mm2    \0A\09punpckldq 15($1), %mm2    \0A\09movd      18($1), %mm3    \0A\09punpckldq 21($1), %mm3    \0A\09por        %mm7, %mm0    \0A\09por        %mm7, %mm1    \0A\09por        %mm7, %mm2    \0A\09por        %mm7, %mm3    \0A\09movq     %mm0,   ($0)   \0A\09movq     %mm1,  8($0)   \0A\09movq     %mm2, 16($0)   \0A\09movq     %mm3, 24($0)", "r,r,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %8, i8* %9) #5, !dbg !976, !srcloc !977
  %10 = load i8*, i8** %dest, align 8, !dbg !978
  %add.ptr2 = getelementptr inbounds i8, i8* %10, i64 32, !dbg !978
  store i8* %add.ptr2, i8** %dest, align 8, !dbg !978
  %11 = load i8*, i8** %s, align 8, !dbg !979
  %add.ptr3 = getelementptr inbounds i8, i8* %11, i64 24, !dbg !979
  store i8* %add.ptr3, i8** %s, align 8, !dbg !979
  br label %while.cond, !dbg !980, !llvm.loop !982

while.end:                                        ; preds = %while.cond
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !983, !srcloc !984
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !985, !srcloc !986
  br label %while.cond4, !dbg !987

while.cond4:                                      ; preds = %while.body6, %while.end
  %12 = load i8*, i8** %s, align 8, !dbg !988
  %13 = load i8*, i8** %end, align 8, !dbg !989
  %cmp5 = icmp ult i8* %12, %13, !dbg !990
  br i1 %cmp5, label %while.body6, label %while.end13, !dbg !991

while.body6:                                      ; preds = %while.cond4
  %14 = load i8*, i8** %s, align 8, !dbg !992
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1, !dbg !992
  store i8* %incdec.ptr, i8** %s, align 8, !dbg !992
  %15 = load i8, i8* %14, align 1, !dbg !994
  %16 = load i8*, i8** %dest, align 8, !dbg !995
  %incdec.ptr7 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !995
  store i8* %incdec.ptr7, i8** %dest, align 8, !dbg !995
  store i8 %15, i8* %16, align 1, !dbg !996
  %17 = load i8*, i8** %s, align 8, !dbg !997
  %incdec.ptr8 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !997
  store i8* %incdec.ptr8, i8** %s, align 8, !dbg !997
  %18 = load i8, i8* %17, align 1, !dbg !998
  %19 = load i8*, i8** %dest, align 8, !dbg !999
  %incdec.ptr9 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !999
  store i8* %incdec.ptr9, i8** %dest, align 8, !dbg !999
  store i8 %18, i8* %19, align 1, !dbg !1000
  %20 = load i8*, i8** %s, align 8, !dbg !1001
  %incdec.ptr10 = getelementptr inbounds i8, i8* %20, i32 1, !dbg !1001
  store i8* %incdec.ptr10, i8** %s, align 8, !dbg !1001
  %21 = load i8, i8* %20, align 1, !dbg !1002
  %22 = load i8*, i8** %dest, align 8, !dbg !1003
  %incdec.ptr11 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !1003
  store i8* %incdec.ptr11, i8** %dest, align 8, !dbg !1003
  store i8 %21, i8* %22, align 1, !dbg !1004
  %23 = load i8*, i8** %dest, align 8, !dbg !1005
  %incdec.ptr12 = getelementptr inbounds i8, i8* %23, i32 1, !dbg !1005
  store i8* %incdec.ptr12, i8** %dest, align 8, !dbg !1005
  store i8 -1, i8* %23, align 1, !dbg !1006
  br label %while.cond4, !dbg !1007, !llvm.loop !1008

while.end13:                                      ; preds = %while.cond4
  ret void, !dbg !1009
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb32to16_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !1010 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %rgb = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !1011, metadata !73), !dbg !1012
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !1013, metadata !73), !dbg !1014
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !1015, metadata !73), !dbg !1016
  call void @llvm.dbg.declare(metadata i8** %s, metadata !1017, metadata !73), !dbg !1018
  %0 = load i8*, i8** %src.addr, align 8, !dbg !1019
  store i8* %0, i8** %s, align 8, !dbg !1018
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1020, metadata !73), !dbg !1021
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !1022, metadata !73), !dbg !1023
  call void @llvm.dbg.declare(metadata i16** %d, metadata !1024, metadata !73), !dbg !1025
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !1026
  %2 = bitcast i8* %1 to i16*, !dbg !1027
  store i16* %2, i16** %d, align 8, !dbg !1025
  %3 = load i8*, i8** %s, align 8, !dbg !1028
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !1029
  %idx.ext = sext i32 %4 to i64, !dbg !1030
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !1030
  store i8* %add.ptr, i8** %end, align 8, !dbg !1031
  %5 = load i8*, i8** %end, align 8, !dbg !1032
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 -15, !dbg !1033
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !1034
  %6 = load i16*, i16** %d, align 8, !dbg !1035
  %7 = load i8*, i8** %s, align 8, !dbg !1035
  %8 = load i8*, i8** %mm_end, align 8, !dbg !1036
  %9 = call { i16*, i8* } asm sideeffect "movq           $3, %mm5   \0A\09movq           $4, %mm6   \0A\09movq           $5, %mm7   \0A\09jmp 2f                     \0A\09.p2align        4          \0A\091:                         \0A\09 # nop   32($1)          \0A\09movd         ($1), %mm0   \0A\09movd        4($1), %mm3   \0A\09punpckldq   8($1), %mm0   \0A\09punpckldq  12($1), %mm3   \0A\09movq        %mm0, %mm1   \0A\09movq        %mm3, %mm4   \0A\09pand        %mm6, %mm0   \0A\09pand        %mm6, %mm3   \0A\09pmaddwd     %mm7, %mm0   \0A\09pmaddwd     %mm7, %mm3   \0A\09pand        %mm5, %mm1   \0A\09pand        %mm5, %mm4   \0A\09por         %mm1, %mm0   \0A\09por         %mm4, %mm3   \0A\09psrld          $$5, %mm0   \0A\09pslld         $$11, %mm3   \0A\09por         %mm3, %mm0   \0A\09movq      %mm0, ($0)    \0A\09add           $$16,  $1     \0A\09add            $$8,  $0     \0A\092:                         \0A\09cmp            $2,  $1     \0A\09 jb            1b          \0A\09", "=r,=r,r,*m,*m,*m,0,1,~{dirflag},~{fpsr},~{flags}"(i8* %8, i64* @mask3216g, i64* @mask3216br, i64* @mul3216, i16* %6, i8* %7) #5, !dbg !1035, !srcloc !1037
  %asmresult = extractvalue { i16*, i8* } %9, 0, !dbg !1035
  %asmresult2 = extractvalue { i16*, i8* } %9, 1, !dbg !1035
  store i16* %asmresult, i16** %d, align 8, !dbg !1035
  store i8* %asmresult2, i8** %s, align 8, !dbg !1035
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1038, !srcloc !1039
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1040, !srcloc !1041
  br label %while.cond, !dbg !1042

while.cond:                                       ; preds = %while.body, %entry
  %10 = load i8*, i8** %s, align 8, !dbg !1043
  %11 = load i8*, i8** %end, align 8, !dbg !1045
  %cmp = icmp ult i8* %10, %11, !dbg !1046
  br i1 %cmp, label %while.body, label %while.end, !dbg !1047

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %rgb, metadata !1048, metadata !73), !dbg !1050
  %12 = load i8*, i8** %s, align 8, !dbg !1051
  %13 = bitcast i8* %12 to i32*, !dbg !1052
  %14 = load i32, i32* %13, align 4, !dbg !1052
  store i32 %14, i32* %rgb, align 4, !dbg !1050
  %15 = load i8*, i8** %s, align 8, !dbg !1053
  %add.ptr3 = getelementptr inbounds i8, i8* %15, i64 4, !dbg !1053
  store i8* %add.ptr3, i8** %s, align 8, !dbg !1053
  %16 = load i32, i32* %rgb, align 4, !dbg !1054
  %and = and i32 %16, 255, !dbg !1055
  %shr = ashr i32 %and, 3, !dbg !1056
  %17 = load i32, i32* %rgb, align 4, !dbg !1057
  %and4 = and i32 %17, 64512, !dbg !1058
  %shr5 = ashr i32 %and4, 5, !dbg !1059
  %add = add nsw i32 %shr, %shr5, !dbg !1060
  %18 = load i32, i32* %rgb, align 4, !dbg !1061
  %and6 = and i32 %18, 16252928, !dbg !1062
  %shr7 = ashr i32 %and6, 8, !dbg !1063
  %add8 = add nsw i32 %add, %shr7, !dbg !1064
  %conv = trunc i32 %add8 to i16, !dbg !1065
  %19 = load i16*, i16** %d, align 8, !dbg !1066
  %incdec.ptr = getelementptr inbounds i16, i16* %19, i32 1, !dbg !1066
  store i16* %incdec.ptr, i16** %d, align 8, !dbg !1066
  store i16 %conv, i16* %19, align 2, !dbg !1067
  br label %while.cond, !dbg !1068, !llvm.loop !1070

while.end:                                        ; preds = %while.cond
  ret void, !dbg !1071
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb32to15_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !1072 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %rgb = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !1073, metadata !73), !dbg !1074
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !1075, metadata !73), !dbg !1076
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !1077, metadata !73), !dbg !1078
  call void @llvm.dbg.declare(metadata i8** %s, metadata !1079, metadata !73), !dbg !1080
  %0 = load i8*, i8** %src.addr, align 8, !dbg !1081
  store i8* %0, i8** %s, align 8, !dbg !1080
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1082, metadata !73), !dbg !1083
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !1084, metadata !73), !dbg !1085
  call void @llvm.dbg.declare(metadata i16** %d, metadata !1086, metadata !73), !dbg !1087
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !1088
  %2 = bitcast i8* %1 to i16*, !dbg !1089
  store i16* %2, i16** %d, align 8, !dbg !1087
  %3 = load i8*, i8** %s, align 8, !dbg !1090
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !1091
  %idx.ext = sext i32 %4 to i64, !dbg !1092
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !1092
  store i8* %add.ptr, i8** %end, align 8, !dbg !1093
  %5 = load i8*, i8** %end, align 8, !dbg !1094
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 -15, !dbg !1095
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !1096
  %6 = load i16*, i16** %d, align 8, !dbg !1097
  %7 = load i8*, i8** %s, align 8, !dbg !1097
  %8 = load i8*, i8** %mm_end, align 8, !dbg !1098
  %9 = call { i16*, i8* } asm sideeffect "movq           $3, %mm5   \0A\09movq           $4, %mm6   \0A\09movq           $5, %mm7   \0A\09jmp            2f          \0A\09.p2align        4          \0A\091:                         \0A\09 # nop   32($1)          \0A\09movd         ($1), %mm0   \0A\09movd        4($1), %mm3   \0A\09punpckldq   8($1), %mm0   \0A\09punpckldq  12($1), %mm3   \0A\09movq        %mm0, %mm1   \0A\09movq        %mm3, %mm4   \0A\09pand        %mm6, %mm0   \0A\09pand        %mm6, %mm3   \0A\09pmaddwd     %mm7, %mm0   \0A\09pmaddwd     %mm7, %mm3   \0A\09pand        %mm5, %mm1   \0A\09pand        %mm5, %mm4   \0A\09por         %mm1, %mm0   \0A\09por         %mm4, %mm3   \0A\09psrld          $$6, %mm0   \0A\09pslld         $$10, %mm3   \0A\09por         %mm3, %mm0   \0A\09movq      %mm0, ($0)    \0A\09add           $$16,  $1     \0A\09add            $$8,  $0     \0A\092:                         \0A\09cmp            $2,  $1     \0A\09 jb            1b          \0A\09", "=r,=r,r,*m,*m,*m,0,1,~{dirflag},~{fpsr},~{flags}"(i8* %8, i64* @mask3215g, i64* @mask3216br, i64* @mul3215, i16* %6, i8* %7) #5, !dbg !1097, !srcloc !1099
  %asmresult = extractvalue { i16*, i8* } %9, 0, !dbg !1097
  %asmresult2 = extractvalue { i16*, i8* } %9, 1, !dbg !1097
  store i16* %asmresult, i16** %d, align 8, !dbg !1097
  store i8* %asmresult2, i8** %s, align 8, !dbg !1097
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1100, !srcloc !1101
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1102, !srcloc !1103
  br label %while.cond, !dbg !1104

while.cond:                                       ; preds = %while.body, %entry
  %10 = load i8*, i8** %s, align 8, !dbg !1105
  %11 = load i8*, i8** %end, align 8, !dbg !1107
  %cmp = icmp ult i8* %10, %11, !dbg !1108
  br i1 %cmp, label %while.body, label %while.end, !dbg !1109

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %rgb, metadata !1110, metadata !73), !dbg !1112
  %12 = load i8*, i8** %s, align 8, !dbg !1113
  %13 = bitcast i8* %12 to i32*, !dbg !1114
  %14 = load i32, i32* %13, align 4, !dbg !1114
  store i32 %14, i32* %rgb, align 4, !dbg !1112
  %15 = load i8*, i8** %s, align 8, !dbg !1115
  %add.ptr3 = getelementptr inbounds i8, i8* %15, i64 4, !dbg !1115
  store i8* %add.ptr3, i8** %s, align 8, !dbg !1115
  %16 = load i32, i32* %rgb, align 4, !dbg !1116
  %and = and i32 %16, 255, !dbg !1117
  %shr = ashr i32 %and, 3, !dbg !1118
  %17 = load i32, i32* %rgb, align 4, !dbg !1119
  %and4 = and i32 %17, 63488, !dbg !1120
  %shr5 = ashr i32 %and4, 6, !dbg !1121
  %add = add nsw i32 %shr, %shr5, !dbg !1122
  %18 = load i32, i32* %rgb, align 4, !dbg !1123
  %and6 = and i32 %18, 16252928, !dbg !1124
  %shr7 = ashr i32 %and6, 9, !dbg !1125
  %add8 = add nsw i32 %add, %shr7, !dbg !1126
  %conv = trunc i32 %add8 to i16, !dbg !1127
  %19 = load i16*, i16** %d, align 8, !dbg !1128
  %incdec.ptr = getelementptr inbounds i16, i16* %19, i32 1, !dbg !1128
  store i16* %incdec.ptr, i16** %d, align 8, !dbg !1128
  store i16 %conv, i16* %19, align 2, !dbg !1129
  br label %while.cond, !dbg !1130, !llvm.loop !1132

while.end:                                        ; preds = %while.cond
  ret void, !dbg !1133
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb32tobgr24_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !1134 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %dest = alloca i8*, align 8
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !1135, metadata !73), !dbg !1136
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !1137, metadata !73), !dbg !1138
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !1139, metadata !73), !dbg !1140
  call void @llvm.dbg.declare(metadata i8** %dest, metadata !1141, metadata !73), !dbg !1142
  %0 = load i8*, i8** %dst.addr, align 8, !dbg !1143
  store i8* %0, i8** %dest, align 8, !dbg !1142
  call void @llvm.dbg.declare(metadata i8** %s, metadata !1144, metadata !73), !dbg !1145
  %1 = load i8*, i8** %src.addr, align 8, !dbg !1146
  store i8* %1, i8** %s, align 8, !dbg !1145
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1147, metadata !73), !dbg !1148
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !1149, metadata !73), !dbg !1150
  %2 = load i8*, i8** %s, align 8, !dbg !1151
  %3 = load i32, i32* %src_size.addr, align 4, !dbg !1152
  %idx.ext = sext i32 %3 to i64, !dbg !1153
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext, !dbg !1153
  store i8* %add.ptr, i8** %end, align 8, !dbg !1154
  %4 = load i8*, i8** %s, align 8, !dbg !1155
  call void asm sideeffect " # nop    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %4) #5, !dbg !1156, !srcloc !1157
  %5 = load i8*, i8** %end, align 8, !dbg !1158
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 -31, !dbg !1159
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !1160
  br label %while.cond, !dbg !1161

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i8*, i8** %s, align 8, !dbg !1162
  %7 = load i8*, i8** %mm_end, align 8, !dbg !1164
  %cmp = icmp ult i8* %6, %7, !dbg !1165
  br i1 %cmp, label %while.body, label %while.end, !dbg !1166

while.body:                                       ; preds = %while.cond
  %8 = load i8*, i8** %dest, align 8, !dbg !1167
  %9 = load i8*, i8** %s, align 8, !dbg !1169
  call void asm sideeffect " # nop  32($1)           \0A\09movq        ($1), %mm0    \0A\09movq       8($1), %mm1    \0A\09movq      16($1), %mm4    \0A\09movq      24($1), %mm5    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm1, %mm3    \0A\09movq       %mm4, %mm6    \0A\09movq       %mm5, %mm7    \0A\09psrlq         $$8, %mm2    \0A\09psrlq         $$8, %mm3    \0A\09psrlq         $$8, %mm6    \0A\09psrlq         $$8, %mm7    \0A\09pand mask24l, %mm0\0A\09pand mask24l, %mm1\0A\09pand mask24l, %mm4\0A\09pand mask24l, %mm5\0A\09pand mask24h, %mm2\0A\09pand mask24h, %mm3\0A\09pand mask24h, %mm6\0A\09pand mask24h, %mm7\0A\09por        %mm2, %mm0    \0A\09por        %mm3, %mm1    \0A\09por        %mm6, %mm4    \0A\09por        %mm7, %mm5    \0A\09movq       %mm1, %mm2    \0A\09movq       %mm4, %mm3    \0A\09psllq        $$48, %mm2    \0A\09psllq        $$32, %mm3    \0A\09por        %mm2, %mm0    \0A\09psrlq        $$16, %mm1    \0A\09psrlq        $$32, %mm4    \0A\09psllq        $$16, %mm5    \0A\09por        %mm3, %mm1    \0A\09por        %mm5, %mm4    \0A\09movq     %mm0,   ($0)    \0A\09movq     %mm1,  8($0)    \0A\09movq     %mm4, 16($0)", "r,r,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %8, i8* %9) #5, !dbg !1170, !srcloc !1171
  %10 = load i8*, i8** %dest, align 8, !dbg !1172
  %add.ptr2 = getelementptr inbounds i8, i8* %10, i64 24, !dbg !1172
  store i8* %add.ptr2, i8** %dest, align 8, !dbg !1172
  %11 = load i8*, i8** %s, align 8, !dbg !1173
  %add.ptr3 = getelementptr inbounds i8, i8* %11, i64 32, !dbg !1173
  store i8* %add.ptr3, i8** %s, align 8, !dbg !1173
  br label %while.cond, !dbg !1174, !llvm.loop !1176

while.end:                                        ; preds = %while.cond
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1177, !srcloc !1178
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1179, !srcloc !1180
  br label %while.cond4, !dbg !1181

while.cond4:                                      ; preds = %while.body6, %while.end
  %12 = load i8*, i8** %s, align 8, !dbg !1182
  %13 = load i8*, i8** %end, align 8, !dbg !1183
  %cmp5 = icmp ult i8* %12, %13, !dbg !1184
  br i1 %cmp5, label %while.body6, label %while.end13, !dbg !1185

while.body6:                                      ; preds = %while.cond4
  %14 = load i8*, i8** %s, align 8, !dbg !1186
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1, !dbg !1186
  store i8* %incdec.ptr, i8** %s, align 8, !dbg !1186
  %15 = load i8, i8* %14, align 1, !dbg !1188
  %16 = load i8*, i8** %dest, align 8, !dbg !1189
  %incdec.ptr7 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !1189
  store i8* %incdec.ptr7, i8** %dest, align 8, !dbg !1189
  store i8 %15, i8* %16, align 1, !dbg !1190
  %17 = load i8*, i8** %s, align 8, !dbg !1191
  %incdec.ptr8 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !1191
  store i8* %incdec.ptr8, i8** %s, align 8, !dbg !1191
  %18 = load i8, i8* %17, align 1, !dbg !1192
  %19 = load i8*, i8** %dest, align 8, !dbg !1193
  %incdec.ptr9 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !1193
  store i8* %incdec.ptr9, i8** %dest, align 8, !dbg !1193
  store i8 %18, i8* %19, align 1, !dbg !1194
  %20 = load i8*, i8** %s, align 8, !dbg !1195
  %incdec.ptr10 = getelementptr inbounds i8, i8* %20, i32 1, !dbg !1195
  store i8* %incdec.ptr10, i8** %s, align 8, !dbg !1195
  %21 = load i8, i8* %20, align 1, !dbg !1196
  %22 = load i8*, i8** %dest, align 8, !dbg !1197
  %incdec.ptr11 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !1197
  store i8* %incdec.ptr11, i8** %dest, align 8, !dbg !1197
  store i8 %21, i8* %22, align 1, !dbg !1198
  %23 = load i8*, i8** %s, align 8, !dbg !1199
  %incdec.ptr12 = getelementptr inbounds i8, i8* %23, i32 1, !dbg !1199
  store i8* %incdec.ptr12, i8** %s, align 8, !dbg !1199
  br label %while.cond4, !dbg !1200, !llvm.loop !1201

while.end13:                                      ; preds = %while.cond4
  ret void, !dbg !1202
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24to15_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !1203 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %r = alloca i32, align 4
  %g = alloca i32, align 4
  %b = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !1204, metadata !73), !dbg !1205
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !1206, metadata !73), !dbg !1207
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !1208, metadata !73), !dbg !1209
  call void @llvm.dbg.declare(metadata i8** %s, metadata !1210, metadata !73), !dbg !1211
  %0 = load i8*, i8** %src.addr, align 8, !dbg !1212
  store i8* %0, i8** %s, align 8, !dbg !1211
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1213, metadata !73), !dbg !1214
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !1215, metadata !73), !dbg !1216
  call void @llvm.dbg.declare(metadata i16** %d, metadata !1217, metadata !73), !dbg !1218
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !1219
  %2 = bitcast i8* %1 to i16*, !dbg !1220
  store i16* %2, i16** %d, align 8, !dbg !1218
  %3 = load i8*, i8** %s, align 8, !dbg !1221
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !1222
  %idx.ext = sext i32 %4 to i64, !dbg !1223
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !1223
  store i8* %add.ptr, i8** %end, align 8, !dbg !1224
  %5 = load i8*, i8** %src.addr, align 8, !dbg !1225
  call void asm sideeffect " # nop    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %5) #5, !dbg !1226, !srcloc !1227
  call void asm sideeffect "movq         $0, %mm7     \0A\09movq         $1, %mm6     \0A\09", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i64* @red_15mask, i64* @green_15mask) #5, !dbg !1228, !srcloc !1229
  %6 = load i8*, i8** %end, align 8, !dbg !1230
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 -15, !dbg !1231
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !1232
  br label %while.cond, !dbg !1233

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i8*, i8** %s, align 8, !dbg !1234
  %8 = load i8*, i8** %mm_end, align 8, !dbg !1236
  %cmp = icmp ult i8* %7, %8, !dbg !1237
  br i1 %cmp, label %while.body, label %while.end, !dbg !1238

while.body:                                       ; preds = %while.cond
  %9 = load i16*, i16** %d, align 8, !dbg !1239
  %10 = load i8*, i8** %s, align 8, !dbg !1241
  call void asm sideeffect " # nop 32($1)            \0A\09movd       ($1), %mm0     \0A\09movd      3($1), %mm3     \0A\09punpckldq 6($1), %mm0     \0A\09punpckldq 9($1), %mm3     \0A\09movq      %mm0, %mm1     \0A\09movq      %mm0, %mm2     \0A\09movq      %mm3, %mm4     \0A\09movq      %mm3, %mm5     \0A\09psllq        $$7, %mm0     \0A\09psllq        $$7, %mm3     \0A\09pand      %mm7, %mm0     \0A\09pand      %mm7, %mm3     \0A\09psrlq        $$6, %mm1     \0A\09psrlq        $$6, %mm4     \0A\09pand      %mm6, %mm1     \0A\09pand      %mm6, %mm4     \0A\09psrlq       $$19, %mm2     \0A\09psrlq       $$19, %mm5     \0A\09pand         $2, %mm2     \0A\09pand         $2, %mm5     \0A\09por       %mm1, %mm0     \0A\09por       %mm4, %mm3     \0A\09por       %mm2, %mm0     \0A\09por       %mm5, %mm3     \0A\09psllq       $$16, %mm3     \0A\09por       %mm3, %mm0     \0A\09movq    %mm0, ($0)      \0A\09", "r,r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %9, i8* %10, i64* @blue_15mask) #5, !dbg !1242, !srcloc !1243
  %11 = load i16*, i16** %d, align 8, !dbg !1244
  %add.ptr2 = getelementptr inbounds i16, i16* %11, i64 4, !dbg !1244
  store i16* %add.ptr2, i16** %d, align 8, !dbg !1244
  %12 = load i8*, i8** %s, align 8, !dbg !1245
  %add.ptr3 = getelementptr inbounds i8, i8* %12, i64 12, !dbg !1245
  store i8* %add.ptr3, i8** %s, align 8, !dbg !1245
  br label %while.cond, !dbg !1246, !llvm.loop !1248

while.end:                                        ; preds = %while.cond
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1249, !srcloc !1250
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1251, !srcloc !1252
  br label %while.cond4, !dbg !1253

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !1254
  %14 = load i8*, i8** %end, align 8, !dbg !1255
  %cmp5 = icmp ult i8* %13, %14, !dbg !1256
  br i1 %cmp5, label %while.body6, label %while.end16, !dbg !1257

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i32* %r, metadata !1258, metadata !73), !dbg !1260
  %15 = load i8*, i8** %s, align 8, !dbg !1261
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1, !dbg !1261
  store i8* %incdec.ptr, i8** %s, align 8, !dbg !1261
  %16 = load i8, i8* %15, align 1, !dbg !1262
  %conv = zext i8 %16 to i32, !dbg !1262
  store i32 %conv, i32* %r, align 4, !dbg !1260
  call void @llvm.dbg.declare(metadata i32* %g, metadata !1263, metadata !73), !dbg !1264
  %17 = load i8*, i8** %s, align 8, !dbg !1265
  %incdec.ptr7 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !1265
  store i8* %incdec.ptr7, i8** %s, align 8, !dbg !1265
  %18 = load i8, i8* %17, align 1, !dbg !1266
  %conv8 = zext i8 %18 to i32, !dbg !1266
  store i32 %conv8, i32* %g, align 4, !dbg !1264
  call void @llvm.dbg.declare(metadata i32* %b, metadata !1267, metadata !73), !dbg !1268
  %19 = load i8*, i8** %s, align 8, !dbg !1269
  %incdec.ptr9 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !1269
  store i8* %incdec.ptr9, i8** %s, align 8, !dbg !1269
  %20 = load i8, i8* %19, align 1, !dbg !1270
  %conv10 = zext i8 %20 to i32, !dbg !1270
  store i32 %conv10, i32* %b, align 4, !dbg !1268
  %21 = load i32, i32* %b, align 4, !dbg !1271
  %shr = ashr i32 %21, 3, !dbg !1272
  %22 = load i32, i32* %g, align 4, !dbg !1273
  %and = and i32 %22, 248, !dbg !1274
  %shl = shl i32 %and, 2, !dbg !1275
  %or = or i32 %shr, %shl, !dbg !1276
  %23 = load i32, i32* %r, align 4, !dbg !1277
  %and11 = and i32 %23, 248, !dbg !1278
  %shl12 = shl i32 %and11, 7, !dbg !1279
  %or13 = or i32 %or, %shl12, !dbg !1280
  %conv14 = trunc i32 %or13 to i16, !dbg !1281
  %24 = load i16*, i16** %d, align 8, !dbg !1282
  %incdec.ptr15 = getelementptr inbounds i16, i16* %24, i32 1, !dbg !1282
  store i16* %incdec.ptr15, i16** %d, align 8, !dbg !1282
  store i16 %conv14, i16* %24, align 2, !dbg !1283
  br label %while.cond4, !dbg !1284, !llvm.loop !1285

while.end16:                                      ; preds = %while.cond4
  ret void, !dbg !1286
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24to16_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !1287 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %r = alloca i32, align 4
  %g = alloca i32, align 4
  %b = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !1288, metadata !73), !dbg !1289
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !1290, metadata !73), !dbg !1291
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !1292, metadata !73), !dbg !1293
  call void @llvm.dbg.declare(metadata i8** %s, metadata !1294, metadata !73), !dbg !1295
  %0 = load i8*, i8** %src.addr, align 8, !dbg !1296
  store i8* %0, i8** %s, align 8, !dbg !1295
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1297, metadata !73), !dbg !1298
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !1299, metadata !73), !dbg !1300
  call void @llvm.dbg.declare(metadata i16** %d, metadata !1301, metadata !73), !dbg !1302
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !1303
  %2 = bitcast i8* %1 to i16*, !dbg !1304
  store i16* %2, i16** %d, align 8, !dbg !1302
  %3 = load i8*, i8** %s, align 8, !dbg !1305
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !1306
  %idx.ext = sext i32 %4 to i64, !dbg !1307
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !1307
  store i8* %add.ptr, i8** %end, align 8, !dbg !1308
  %5 = load i8*, i8** %src.addr, align 8, !dbg !1309
  call void asm sideeffect " # nop    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %5) #5, !dbg !1310, !srcloc !1311
  call void asm sideeffect "movq         $0, %mm7     \0A\09movq         $1, %mm6     \0A\09", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i64* @red_16mask, i64* @green_16mask) #5, !dbg !1312, !srcloc !1313
  %6 = load i8*, i8** %end, align 8, !dbg !1314
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 -15, !dbg !1315
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !1316
  br label %while.cond, !dbg !1317

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i8*, i8** %s, align 8, !dbg !1318
  %8 = load i8*, i8** %mm_end, align 8, !dbg !1320
  %cmp = icmp ult i8* %7, %8, !dbg !1321
  br i1 %cmp, label %while.body, label %while.end, !dbg !1322

while.body:                                       ; preds = %while.cond
  %9 = load i16*, i16** %d, align 8, !dbg !1323
  %10 = load i8*, i8** %s, align 8, !dbg !1325
  call void asm sideeffect " # nop  32($1)           \0A\09movd        ($1), %mm0    \0A\09movd       3($1), %mm3    \0A\09punpckldq  6($1), %mm0    \0A\09punpckldq  9($1), %mm3    \0A\09movq       %mm0, %mm1    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm3, %mm4    \0A\09movq       %mm3, %mm5    \0A\09psllq         $$8, %mm0    \0A\09psllq         $$8, %mm3    \0A\09pand       %mm7, %mm0    \0A\09pand       %mm7, %mm3    \0A\09psrlq         $$5, %mm1    \0A\09psrlq         $$5, %mm4    \0A\09pand       %mm6, %mm1    \0A\09pand       %mm6, %mm4    \0A\09psrlq        $$19, %mm2    \0A\09psrlq        $$19, %mm5    \0A\09pand          $2, %mm2    \0A\09pand          $2, %mm5    \0A\09por        %mm1, %mm0    \0A\09por        %mm4, %mm3    \0A\09por        %mm2, %mm0    \0A\09por        %mm5, %mm3    \0A\09psllq        $$16, %mm3    \0A\09por        %mm3, %mm0    \0A\09movq     %mm0, ($0)     \0A\09", "r,r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %9, i8* %10, i64* @blue_16mask) #5, !dbg !1326, !srcloc !1327
  %11 = load i16*, i16** %d, align 8, !dbg !1328
  %add.ptr2 = getelementptr inbounds i16, i16* %11, i64 4, !dbg !1328
  store i16* %add.ptr2, i16** %d, align 8, !dbg !1328
  %12 = load i8*, i8** %s, align 8, !dbg !1329
  %add.ptr3 = getelementptr inbounds i8, i8* %12, i64 12, !dbg !1329
  store i8* %add.ptr3, i8** %s, align 8, !dbg !1329
  br label %while.cond, !dbg !1330, !llvm.loop !1332

while.end:                                        ; preds = %while.cond
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1333, !srcloc !1334
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1335, !srcloc !1336
  br label %while.cond4, !dbg !1337

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !1338
  %14 = load i8*, i8** %end, align 8, !dbg !1339
  %cmp5 = icmp ult i8* %13, %14, !dbg !1340
  br i1 %cmp5, label %while.body6, label %while.end16, !dbg !1341

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i32* %r, metadata !1342, metadata !73), !dbg !1344
  %15 = load i8*, i8** %s, align 8, !dbg !1345
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1, !dbg !1345
  store i8* %incdec.ptr, i8** %s, align 8, !dbg !1345
  %16 = load i8, i8* %15, align 1, !dbg !1346
  %conv = zext i8 %16 to i32, !dbg !1346
  store i32 %conv, i32* %r, align 4, !dbg !1344
  call void @llvm.dbg.declare(metadata i32* %g, metadata !1347, metadata !73), !dbg !1348
  %17 = load i8*, i8** %s, align 8, !dbg !1349
  %incdec.ptr7 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !1349
  store i8* %incdec.ptr7, i8** %s, align 8, !dbg !1349
  %18 = load i8, i8* %17, align 1, !dbg !1350
  %conv8 = zext i8 %18 to i32, !dbg !1350
  store i32 %conv8, i32* %g, align 4, !dbg !1348
  call void @llvm.dbg.declare(metadata i32* %b, metadata !1351, metadata !73), !dbg !1352
  %19 = load i8*, i8** %s, align 8, !dbg !1353
  %incdec.ptr9 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !1353
  store i8* %incdec.ptr9, i8** %s, align 8, !dbg !1353
  %20 = load i8, i8* %19, align 1, !dbg !1354
  %conv10 = zext i8 %20 to i32, !dbg !1354
  store i32 %conv10, i32* %b, align 4, !dbg !1352
  %21 = load i32, i32* %b, align 4, !dbg !1355
  %shr = ashr i32 %21, 3, !dbg !1356
  %22 = load i32, i32* %g, align 4, !dbg !1357
  %and = and i32 %22, 252, !dbg !1358
  %shl = shl i32 %and, 3, !dbg !1359
  %or = or i32 %shr, %shl, !dbg !1360
  %23 = load i32, i32* %r, align 4, !dbg !1361
  %and11 = and i32 %23, 248, !dbg !1362
  %shl12 = shl i32 %and11, 8, !dbg !1363
  %or13 = or i32 %or, %shl12, !dbg !1364
  %conv14 = trunc i32 %or13 to i16, !dbg !1365
  %24 = load i16*, i16** %d, align 8, !dbg !1366
  %incdec.ptr15 = getelementptr inbounds i16, i16* %24, i32 1, !dbg !1366
  store i16* %incdec.ptr15, i16** %d, align 8, !dbg !1366
  store i16 %conv14, i16* %24, align 2, !dbg !1367
  br label %while.cond4, !dbg !1368, !llvm.loop !1369

while.end16:                                      ; preds = %while.cond4
  ret void, !dbg !1370
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24tobgr24_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !1371 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %mmx_size = alloca i64, align 8
  %x = alloca i8, align 1
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !1372, metadata !73), !dbg !1373
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !1374, metadata !73), !dbg !1375
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !1376, metadata !73), !dbg !1377
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1378, metadata !73), !dbg !1379
  call void @llvm.dbg.declare(metadata i64* %mmx_size, metadata !1380, metadata !73), !dbg !1381
  %0 = load i32, i32* %src_size.addr, align 4, !dbg !1382
  %sub = sub nsw i32 23, %0, !dbg !1383
  %conv = sext i32 %sub to i64, !dbg !1384
  store i64 %conv, i64* %mmx_size, align 8, !dbg !1381
  %1 = load i64, i64* %mmx_size, align 8, !dbg !1385
  %2 = load i8*, i8** %src.addr, align 8, !dbg !1386
  %3 = load i64, i64* %mmx_size, align 8, !dbg !1387
  %idx.neg = sub i64 0, %3, !dbg !1388
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.neg, !dbg !1388
  %4 = load i8*, i8** %dst.addr, align 8, !dbg !1389
  %5 = load i64, i64* %mmx_size, align 8, !dbg !1390
  %idx.neg1 = sub i64 0, %5, !dbg !1391
  %add.ptr2 = getelementptr inbounds i8, i8* %4, i64 %idx.neg1, !dbg !1391
  %6 = call i64 asm sideeffect "test             %rax, %rax    \0A\09jns                     2f                     \0A\09movq     mask24r, %mm5              \0A\09movq     mask24g, %mm6              \0A\09movq     mask24b, %mm7              \0A\09.p2align                 4                     \0A\091:                                             \0A\09 # nop 32($1, %rax)                  \0A\09movq    ($1, %rax), %mm0              \0A\09movq    ($1, %rax), %mm1              \0A\09movq   2($1, %rax), %mm2              \0A\09psllq                  $$16, %mm0              \0A\09pand                 %mm5, %mm0              \0A\09pand                 %mm6, %mm1              \0A\09pand                 %mm7, %mm2              \0A\09por                  %mm0, %mm1              \0A\09por                  %mm2, %mm1              \0A\09movq   6($1, %rax), %mm0              \0A\09movq               %mm1,($2, %rax)  \0A\09movq   8($1, %rax), %mm1              \0A\09movq  10($1, %rax), %mm2              \0A\09pand                 %mm7, %mm0              \0A\09pand                 %mm5, %mm1              \0A\09pand                 %mm6, %mm2              \0A\09por                  %mm0, %mm1              \0A\09por                  %mm2, %mm1              \0A\09movq  14($1, %rax), %mm0              \0A\09movq               %mm1, 8($2, %rax)\0A\09movq  16($1, %rax), %mm1              \0A\09movq  18($1, %rax), %mm2              \0A\09pand                 %mm6, %mm0              \0A\09pand                 %mm7, %mm1              \0A\09pand                 %mm5, %mm2              \0A\09por                  %mm0, %mm1              \0A\09por                  %mm2, %mm1              \0A\09movq               %mm1, 16($2, %rax) \0A\09add                    $$24, %rax       \0A\09 js                     1b                     \0A\092:                                             \0A\09", "={ax},r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr, i8* %add.ptr2, i64 %1) #5, !dbg !1385, !srcloc !1392
  store i64 %6, i64* %mmx_size, align 8, !dbg !1385
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1393, !srcloc !1394
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1395, !srcloc !1396
  %7 = load i64, i64* %mmx_size, align 8, !dbg !1397
  %cmp = icmp eq i64 %7, 23, !dbg !1399
  br i1 %cmp, label %if.then, label %if.end, !dbg !1400

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !1401

if.end:                                           ; preds = %entry
  %8 = load i32, i32* %src_size.addr, align 4, !dbg !1403
  %9 = load i8*, i8** %src.addr, align 8, !dbg !1404
  %idx.ext = sext i32 %8 to i64, !dbg !1404
  %add.ptr4 = getelementptr inbounds i8, i8* %9, i64 %idx.ext, !dbg !1404
  store i8* %add.ptr4, i8** %src.addr, align 8, !dbg !1404
  %10 = load i32, i32* %src_size.addr, align 4, !dbg !1405
  %11 = load i8*, i8** %dst.addr, align 8, !dbg !1406
  %idx.ext5 = sext i32 %10 to i64, !dbg !1406
  %add.ptr6 = getelementptr inbounds i8, i8* %11, i64 %idx.ext5, !dbg !1406
  store i8* %add.ptr6, i8** %dst.addr, align 8, !dbg !1406
  %12 = load i64, i64* %mmx_size, align 8, !dbg !1407
  %sub7 = sub nsw i64 23, %12, !dbg !1408
  %conv8 = trunc i64 %sub7 to i32, !dbg !1409
  store i32 %conv8, i32* %src_size.addr, align 4, !dbg !1410
  %13 = load i32, i32* %src_size.addr, align 4, !dbg !1411
  %14 = load i8*, i8** %src.addr, align 8, !dbg !1412
  %idx.ext9 = sext i32 %13 to i64, !dbg !1412
  %idx.neg10 = sub i64 0, %idx.ext9, !dbg !1412
  %add.ptr11 = getelementptr inbounds i8, i8* %14, i64 %idx.neg10, !dbg !1412
  store i8* %add.ptr11, i8** %src.addr, align 8, !dbg !1412
  %15 = load i32, i32* %src_size.addr, align 4, !dbg !1413
  %16 = load i8*, i8** %dst.addr, align 8, !dbg !1414
  %idx.ext12 = sext i32 %15 to i64, !dbg !1414
  %idx.neg13 = sub i64 0, %idx.ext12, !dbg !1414
  %add.ptr14 = getelementptr inbounds i8, i8* %16, i64 %idx.neg13, !dbg !1414
  store i8* %add.ptr14, i8** %dst.addr, align 8, !dbg !1414
  store i32 0, i32* %i, align 4, !dbg !1415
  br label %for.cond, !dbg !1417

for.cond:                                         ; preds = %for.inc, %if.end
  %17 = load i32, i32* %i, align 4, !dbg !1418
  %18 = load i32, i32* %src_size.addr, align 4, !dbg !1421
  %cmp15 = icmp ult i32 %17, %18, !dbg !1422
  br i1 %cmp15, label %for.body, label %for.end, !dbg !1423

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8* %x, metadata !1424, metadata !73), !dbg !1426
  %19 = load i32, i32* %i, align 4, !dbg !1427
  %add = add i32 %19, 2, !dbg !1428
  %idxprom = zext i32 %add to i64, !dbg !1429
  %20 = load i8*, i8** %src.addr, align 8, !dbg !1429
  %arrayidx = getelementptr inbounds i8, i8* %20, i64 %idxprom, !dbg !1429
  %21 = load i8, i8* %arrayidx, align 1, !dbg !1429
  store i8 %21, i8* %x, align 1, !dbg !1430
  %22 = load i32, i32* %i, align 4, !dbg !1431
  %add17 = add i32 %22, 1, !dbg !1432
  %idxprom18 = zext i32 %add17 to i64, !dbg !1433
  %23 = load i8*, i8** %src.addr, align 8, !dbg !1433
  %arrayidx19 = getelementptr inbounds i8, i8* %23, i64 %idxprom18, !dbg !1433
  %24 = load i8, i8* %arrayidx19, align 1, !dbg !1433
  %25 = load i32, i32* %i, align 4, !dbg !1434
  %add20 = add i32 %25, 1, !dbg !1435
  %idxprom21 = zext i32 %add20 to i64, !dbg !1436
  %26 = load i8*, i8** %dst.addr, align 8, !dbg !1436
  %arrayidx22 = getelementptr inbounds i8, i8* %26, i64 %idxprom21, !dbg !1436
  store i8 %24, i8* %arrayidx22, align 1, !dbg !1437
  %27 = load i32, i32* %i, align 4, !dbg !1438
  %add23 = add i32 %27, 0, !dbg !1439
  %idxprom24 = zext i32 %add23 to i64, !dbg !1440
  %28 = load i8*, i8** %src.addr, align 8, !dbg !1440
  %arrayidx25 = getelementptr inbounds i8, i8* %28, i64 %idxprom24, !dbg !1440
  %29 = load i8, i8* %arrayidx25, align 1, !dbg !1440
  %30 = load i32, i32* %i, align 4, !dbg !1441
  %add26 = add i32 %30, 2, !dbg !1442
  %idxprom27 = zext i32 %add26 to i64, !dbg !1443
  %31 = load i8*, i8** %dst.addr, align 8, !dbg !1443
  %arrayidx28 = getelementptr inbounds i8, i8* %31, i64 %idxprom27, !dbg !1443
  store i8 %29, i8* %arrayidx28, align 1, !dbg !1444
  %32 = load i8, i8* %x, align 1, !dbg !1445
  %33 = load i32, i32* %i, align 4, !dbg !1446
  %add29 = add i32 %33, 0, !dbg !1447
  %idxprom30 = zext i32 %add29 to i64, !dbg !1448
  %34 = load i8*, i8** %dst.addr, align 8, !dbg !1448
  %arrayidx31 = getelementptr inbounds i8, i8* %34, i64 %idxprom30, !dbg !1448
  store i8 %32, i8* %arrayidx31, align 1, !dbg !1449
  br label %for.inc, !dbg !1450

for.inc:                                          ; preds = %for.body
  %35 = load i32, i32* %i, align 4, !dbg !1451
  %add32 = add i32 %35, 3, !dbg !1451
  store i32 %add32, i32* %i, align 4, !dbg !1451
  br label %for.cond, !dbg !1453, !llvm.loop !1454

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !1456
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb32tobgr16_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !1457 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %rgb = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !1458, metadata !73), !dbg !1459
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !1460, metadata !73), !dbg !1461
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !1462, metadata !73), !dbg !1463
  call void @llvm.dbg.declare(metadata i8** %s, metadata !1464, metadata !73), !dbg !1465
  %0 = load i8*, i8** %src.addr, align 8, !dbg !1466
  store i8* %0, i8** %s, align 8, !dbg !1465
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1467, metadata !73), !dbg !1468
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !1469, metadata !73), !dbg !1470
  call void @llvm.dbg.declare(metadata i16** %d, metadata !1471, metadata !73), !dbg !1472
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !1473
  %2 = bitcast i8* %1 to i16*, !dbg !1474
  store i16* %2, i16** %d, align 8, !dbg !1472
  %3 = load i8*, i8** %s, align 8, !dbg !1475
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !1476
  %idx.ext = sext i32 %4 to i64, !dbg !1477
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !1477
  store i8* %add.ptr, i8** %end, align 8, !dbg !1478
  %5 = load i8*, i8** %src.addr, align 8, !dbg !1479
  call void asm sideeffect " # nop    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %5) #5, !dbg !1480, !srcloc !1481
  call void asm sideeffect "movq          $0, %mm7    \0A\09movq          $1, %mm6    \0A\09", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i64* @red_16mask, i64* @green_16mask) #5, !dbg !1482, !srcloc !1483
  %6 = load i8*, i8** %end, align 8, !dbg !1484
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 -15, !dbg !1485
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !1486
  br label %while.cond, !dbg !1487

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i8*, i8** %s, align 8, !dbg !1488
  %8 = load i8*, i8** %mm_end, align 8, !dbg !1490
  %cmp = icmp ult i8* %7, %8, !dbg !1491
  br i1 %cmp, label %while.body, label %while.end, !dbg !1492

while.body:                                       ; preds = %while.cond
  %9 = load i16*, i16** %d, align 8, !dbg !1493
  %10 = load i8*, i8** %s, align 8, !dbg !1495
  call void asm sideeffect " # nop  32($1)           \0A\09movd        ($1), %mm0    \0A\09movd       4($1), %mm3    \0A\09punpckldq  8($1), %mm0    \0A\09punpckldq 12($1), %mm3    \0A\09movq       %mm0, %mm1    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm3, %mm4    \0A\09movq       %mm3, %mm5    \0A\09psllq         $$8, %mm0    \0A\09psllq         $$8, %mm3    \0A\09pand       %mm7, %mm0    \0A\09pand       %mm7, %mm3    \0A\09psrlq         $$5, %mm1    \0A\09psrlq         $$5, %mm4    \0A\09pand       %mm6, %mm1    \0A\09pand       %mm6, %mm4    \0A\09psrlq        $$19, %mm2    \0A\09psrlq        $$19, %mm5    \0A\09pand          $2, %mm2    \0A\09pand          $2, %mm5    \0A\09por        %mm1, %mm0    \0A\09por        %mm4, %mm3    \0A\09por        %mm2, %mm0    \0A\09por        %mm5, %mm3    \0A\09psllq        $$16, %mm3    \0A\09por        %mm3, %mm0    \0A\09movq     %mm0, ($0)     \0A\09", "r,r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %9, i8* %10, i64* @blue_16mask) #5, !dbg !1496, !srcloc !1497
  %11 = load i16*, i16** %d, align 8, !dbg !1498
  %add.ptr2 = getelementptr inbounds i16, i16* %11, i64 4, !dbg !1498
  store i16* %add.ptr2, i16** %d, align 8, !dbg !1498
  %12 = load i8*, i8** %s, align 8, !dbg !1499
  %add.ptr3 = getelementptr inbounds i8, i8* %12, i64 16, !dbg !1499
  store i8* %add.ptr3, i8** %s, align 8, !dbg !1499
  br label %while.cond, !dbg !1500, !llvm.loop !1502

while.end:                                        ; preds = %while.cond
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1503, !srcloc !1504
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1505, !srcloc !1506
  br label %while.cond4, !dbg !1507

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !1508
  %14 = load i8*, i8** %end, align 8, !dbg !1509
  %cmp5 = icmp ult i8* %13, %14, !dbg !1510
  br i1 %cmp5, label %while.body6, label %while.end12, !dbg !1511

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i32* %rgb, metadata !1512, metadata !73), !dbg !1514
  %15 = load i8*, i8** %s, align 8, !dbg !1515
  %16 = bitcast i8* %15 to i32*, !dbg !1516
  %17 = load i32, i32* %16, align 4, !dbg !1516
  store i32 %17, i32* %rgb, align 4, !dbg !1514
  %18 = load i8*, i8** %s, align 8, !dbg !1517
  %add.ptr7 = getelementptr inbounds i8, i8* %18, i64 4, !dbg !1517
  store i8* %add.ptr7, i8** %s, align 8, !dbg !1517
  %19 = load i32, i32* %rgb, align 4, !dbg !1518
  %and = and i32 %19, 248, !dbg !1519
  %shl = shl i32 %and, 8, !dbg !1520
  %20 = load i32, i32* %rgb, align 4, !dbg !1521
  %and8 = and i32 %20, 64512, !dbg !1522
  %shr = ashr i32 %and8, 5, !dbg !1523
  %add = add nsw i32 %shl, %shr, !dbg !1524
  %21 = load i32, i32* %rgb, align 4, !dbg !1525
  %and9 = and i32 %21, 16252928, !dbg !1526
  %shr10 = ashr i32 %and9, 19, !dbg !1527
  %add11 = add nsw i32 %add, %shr10, !dbg !1528
  %conv = trunc i32 %add11 to i16, !dbg !1529
  %22 = load i16*, i16** %d, align 8, !dbg !1530
  %incdec.ptr = getelementptr inbounds i16, i16* %22, i32 1, !dbg !1530
  store i16* %incdec.ptr, i16** %d, align 8, !dbg !1530
  store i16 %conv, i16* %22, align 2, !dbg !1531
  br label %while.cond4, !dbg !1532, !llvm.loop !1533

while.end12:                                      ; preds = %while.cond4
  ret void, !dbg !1534
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb32tobgr15_mmx(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !1535 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %rgb = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !1536, metadata !73), !dbg !1537
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !1538, metadata !73), !dbg !1539
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !1540, metadata !73), !dbg !1541
  call void @llvm.dbg.declare(metadata i8** %s, metadata !1542, metadata !73), !dbg !1543
  %0 = load i8*, i8** %src.addr, align 8, !dbg !1544
  store i8* %0, i8** %s, align 8, !dbg !1543
  call void @llvm.dbg.declare(metadata i8** %end, metadata !1545, metadata !73), !dbg !1546
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !1547, metadata !73), !dbg !1548
  call void @llvm.dbg.declare(metadata i16** %d, metadata !1549, metadata !73), !dbg !1550
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !1551
  %2 = bitcast i8* %1 to i16*, !dbg !1552
  store i16* %2, i16** %d, align 8, !dbg !1550
  %3 = load i8*, i8** %s, align 8, !dbg !1553
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !1554
  %idx.ext = sext i32 %4 to i64, !dbg !1555
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !1555
  store i8* %add.ptr, i8** %end, align 8, !dbg !1556
  %5 = load i8*, i8** %src.addr, align 8, !dbg !1557
  call void asm sideeffect " # nop    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %5) #5, !dbg !1558, !srcloc !1559
  call void asm sideeffect "movq          $0, %mm7    \0A\09movq          $1, %mm6    \0A\09", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i64* @red_15mask, i64* @green_15mask) #5, !dbg !1560, !srcloc !1561
  %6 = load i8*, i8** %end, align 8, !dbg !1562
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 -15, !dbg !1563
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !1564
  br label %while.cond, !dbg !1565

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i8*, i8** %s, align 8, !dbg !1566
  %8 = load i8*, i8** %mm_end, align 8, !dbg !1568
  %cmp = icmp ult i8* %7, %8, !dbg !1569
  br i1 %cmp, label %while.body, label %while.end, !dbg !1570

while.body:                                       ; preds = %while.cond
  %9 = load i16*, i16** %d, align 8, !dbg !1571
  %10 = load i8*, i8** %s, align 8, !dbg !1573
  call void asm sideeffect " # nop  32($1)           \0A\09movd        ($1), %mm0    \0A\09movd       4($1), %mm3    \0A\09punpckldq  8($1), %mm0    \0A\09punpckldq 12($1), %mm3    \0A\09movq       %mm0, %mm1    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm3, %mm4    \0A\09movq       %mm3, %mm5    \0A\09psllq         $$7, %mm0    \0A\09psllq         $$7, %mm3    \0A\09pand       %mm7, %mm0    \0A\09pand       %mm7, %mm3    \0A\09psrlq         $$6, %mm1    \0A\09psrlq         $$6, %mm4    \0A\09pand       %mm6, %mm1    \0A\09pand       %mm6, %mm4    \0A\09psrlq        $$19, %mm2    \0A\09psrlq        $$19, %mm5    \0A\09pand          $2, %mm2    \0A\09pand          $2, %mm5    \0A\09por        %mm1, %mm0    \0A\09por        %mm4, %mm3    \0A\09por        %mm2, %mm0    \0A\09por        %mm5, %mm3    \0A\09psllq        $$16, %mm3    \0A\09por        %mm3, %mm0    \0A\09movq     %mm0, ($0)     \0A\09", "r,r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %9, i8* %10, i64* @blue_15mask) #5, !dbg !1574, !srcloc !1575
  %11 = load i16*, i16** %d, align 8, !dbg !1576
  %add.ptr2 = getelementptr inbounds i16, i16* %11, i64 4, !dbg !1576
  store i16* %add.ptr2, i16** %d, align 8, !dbg !1576
  %12 = load i8*, i8** %s, align 8, !dbg !1577
  %add.ptr3 = getelementptr inbounds i8, i8* %12, i64 16, !dbg !1577
  store i8* %add.ptr3, i8** %s, align 8, !dbg !1577
  br label %while.cond, !dbg !1578, !llvm.loop !1580

while.end:                                        ; preds = %while.cond
  call void asm sideeffect " # nop", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1581, !srcloc !1582
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1583, !srcloc !1584
  br label %while.cond4, !dbg !1585

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !1586
  %14 = load i8*, i8** %end, align 8, !dbg !1587
  %cmp5 = icmp ult i8* %13, %14, !dbg !1588
  br i1 %cmp5, label %while.body6, label %while.end12, !dbg !1589

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i32* %rgb, metadata !1590, metadata !73), !dbg !1592
  %15 = load i8*, i8** %s, align 8, !dbg !1593
  %16 = bitcast i8* %15 to i32*, !dbg !1594
  %17 = load i32, i32* %16, align 4, !dbg !1594
  store i32 %17, i32* %rgb, align 4, !dbg !1592
  %18 = load i8*, i8** %s, align 8, !dbg !1595
  %add.ptr7 = getelementptr inbounds i8, i8* %18, i64 4, !dbg !1595
  store i8* %add.ptr7, i8** %s, align 8, !dbg !1595
  %19 = load i32, i32* %rgb, align 4, !dbg !1596
  %and = and i32 %19, 248, !dbg !1597
  %shl = shl i32 %and, 7, !dbg !1598
  %20 = load i32, i32* %rgb, align 4, !dbg !1599
  %and8 = and i32 %20, 63488, !dbg !1600
  %shr = ashr i32 %and8, 6, !dbg !1601
  %add = add nsw i32 %shl, %shr, !dbg !1602
  %21 = load i32, i32* %rgb, align 4, !dbg !1603
  %and9 = and i32 %21, 16252928, !dbg !1604
  %shr10 = ashr i32 %and9, 19, !dbg !1605
  %add11 = add nsw i32 %add, %shr10, !dbg !1606
  %conv = trunc i32 %add11 to i16, !dbg !1607
  %22 = load i16*, i16** %d, align 8, !dbg !1608
  %incdec.ptr = getelementptr inbounds i16, i16* %22, i32 1, !dbg !1608
  store i16* %incdec.ptr, i16** %d, align 8, !dbg !1608
  store i16 %conv, i16* %22, align 2, !dbg !1609
  br label %while.cond4, !dbg !1610, !llvm.loop !1611

while.end12:                                      ; preds = %while.cond4
  ret void, !dbg !1612
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yv12toyuy2_mmx(i8* %ysrc, i8* %usrc, i8* %vsrc, i8* %dst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %dstStride) #3 !dbg !1613 {
entry:
  %ysrc.addr = alloca i8*, align 8
  %usrc.addr = alloca i8*, align 8
  %vsrc.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  store i8* %ysrc, i8** %ysrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ysrc.addr, metadata !1616, metadata !73), !dbg !1617
  store i8* %usrc, i8** %usrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %usrc.addr, metadata !1618, metadata !73), !dbg !1619
  store i8* %vsrc, i8** %vsrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vsrc.addr, metadata !1620, metadata !73), !dbg !1621
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !1622, metadata !73), !dbg !1623
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !1624, metadata !73), !dbg !1625
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !1626, metadata !73), !dbg !1627
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !1628, metadata !73), !dbg !1629
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !1630, metadata !73), !dbg !1631
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !1632, metadata !73), !dbg !1633
  %0 = load i8*, i8** %ysrc.addr, align 8, !dbg !1634
  %1 = load i8*, i8** %usrc.addr, align 8, !dbg !1635
  %2 = load i8*, i8** %vsrc.addr, align 8, !dbg !1636
  %3 = load i8*, i8** %dst.addr, align 8, !dbg !1637
  %4 = load i32, i32* %width.addr, align 4, !dbg !1638
  %5 = load i32, i32* %height.addr, align 4, !dbg !1639
  %6 = load i32, i32* %lumStride.addr, align 4, !dbg !1640
  %7 = load i32, i32* %chromStride.addr, align 4, !dbg !1641
  %8 = load i32, i32* %dstStride.addr, align 4, !dbg !1642
  call void @yuvPlanartoyuy2_mmx(i8* %0, i8* %1, i8* %2, i8* %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 2), !dbg !1643
  ret void, !dbg !1644
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yv12touyvy_mmx(i8* %ysrc, i8* %usrc, i8* %vsrc, i8* %dst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %dstStride) #3 !dbg !1645 {
entry:
  %ysrc.addr = alloca i8*, align 8
  %usrc.addr = alloca i8*, align 8
  %vsrc.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  store i8* %ysrc, i8** %ysrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ysrc.addr, metadata !1646, metadata !73), !dbg !1647
  store i8* %usrc, i8** %usrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %usrc.addr, metadata !1648, metadata !73), !dbg !1649
  store i8* %vsrc, i8** %vsrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vsrc.addr, metadata !1650, metadata !73), !dbg !1651
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !1652, metadata !73), !dbg !1653
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !1654, metadata !73), !dbg !1655
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !1656, metadata !73), !dbg !1657
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !1658, metadata !73), !dbg !1659
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !1660, metadata !73), !dbg !1661
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !1662, metadata !73), !dbg !1663
  %0 = load i8*, i8** %ysrc.addr, align 8, !dbg !1664
  %1 = load i8*, i8** %usrc.addr, align 8, !dbg !1665
  %2 = load i8*, i8** %vsrc.addr, align 8, !dbg !1666
  %3 = load i8*, i8** %dst.addr, align 8, !dbg !1667
  %4 = load i32, i32* %width.addr, align 4, !dbg !1668
  %5 = load i32, i32* %height.addr, align 4, !dbg !1669
  %6 = load i32, i32* %lumStride.addr, align 4, !dbg !1670
  %7 = load i32, i32* %chromStride.addr, align 4, !dbg !1671
  %8 = load i32, i32* %dstStride.addr, align 4, !dbg !1672
  call void @yuvPlanartouyvy_mmx(i8* %0, i8* %1, i8* %2, i8* %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 2), !dbg !1673
  ret void, !dbg !1674
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yuv422ptoyuy2_mmx(i8* %ysrc, i8* %usrc, i8* %vsrc, i8* %dst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %dstStride) #3 !dbg !1675 {
entry:
  %ysrc.addr = alloca i8*, align 8
  %usrc.addr = alloca i8*, align 8
  %vsrc.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  store i8* %ysrc, i8** %ysrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ysrc.addr, metadata !1676, metadata !73), !dbg !1677
  store i8* %usrc, i8** %usrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %usrc.addr, metadata !1678, metadata !73), !dbg !1679
  store i8* %vsrc, i8** %vsrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vsrc.addr, metadata !1680, metadata !73), !dbg !1681
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !1682, metadata !73), !dbg !1683
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !1684, metadata !73), !dbg !1685
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !1686, metadata !73), !dbg !1687
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !1688, metadata !73), !dbg !1689
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !1690, metadata !73), !dbg !1691
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !1692, metadata !73), !dbg !1693
  %0 = load i8*, i8** %ysrc.addr, align 8, !dbg !1694
  %1 = load i8*, i8** %usrc.addr, align 8, !dbg !1695
  %2 = load i8*, i8** %vsrc.addr, align 8, !dbg !1696
  %3 = load i8*, i8** %dst.addr, align 8, !dbg !1697
  %4 = load i32, i32* %width.addr, align 4, !dbg !1698
  %5 = load i32, i32* %height.addr, align 4, !dbg !1699
  %6 = load i32, i32* %lumStride.addr, align 4, !dbg !1700
  %7 = load i32, i32* %chromStride.addr, align 4, !dbg !1701
  %8 = load i32, i32* %dstStride.addr, align 4, !dbg !1702
  call void @yuvPlanartoyuy2_mmx(i8* %0, i8* %1, i8* %2, i8* %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 1), !dbg !1703
  ret void, !dbg !1704
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yuv422ptouyvy_mmx(i8* %ysrc, i8* %usrc, i8* %vsrc, i8* %dst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %dstStride) #3 !dbg !1705 {
entry:
  %ysrc.addr = alloca i8*, align 8
  %usrc.addr = alloca i8*, align 8
  %vsrc.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  store i8* %ysrc, i8** %ysrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ysrc.addr, metadata !1706, metadata !73), !dbg !1707
  store i8* %usrc, i8** %usrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %usrc.addr, metadata !1708, metadata !73), !dbg !1709
  store i8* %vsrc, i8** %vsrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vsrc.addr, metadata !1710, metadata !73), !dbg !1711
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !1712, metadata !73), !dbg !1713
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !1714, metadata !73), !dbg !1715
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !1716, metadata !73), !dbg !1717
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !1718, metadata !73), !dbg !1719
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !1720, metadata !73), !dbg !1721
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !1722, metadata !73), !dbg !1723
  %0 = load i8*, i8** %ysrc.addr, align 8, !dbg !1724
  %1 = load i8*, i8** %usrc.addr, align 8, !dbg !1725
  %2 = load i8*, i8** %vsrc.addr, align 8, !dbg !1726
  %3 = load i8*, i8** %dst.addr, align 8, !dbg !1727
  %4 = load i32, i32* %width.addr, align 4, !dbg !1728
  %5 = load i32, i32* %height.addr, align 4, !dbg !1729
  %6 = load i32, i32* %lumStride.addr, align 4, !dbg !1730
  %7 = load i32, i32* %chromStride.addr, align 4, !dbg !1731
  %8 = load i32, i32* %dstStride.addr, align 4, !dbg !1732
  call void @yuvPlanartouyvy_mmx(i8* %0, i8* %1, i8* %2, i8* %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 1), !dbg !1733
  ret void, !dbg !1734
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yuy2toyv12_mmx(i8* %src, i8* %ydst, i8* %udst, i8* %vdst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride) #3 !dbg !1735 {
entry:
  %src.addr = alloca i8*, align 8
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !1738, metadata !73), !dbg !1739
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !1740, metadata !73), !dbg !1741
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !1742, metadata !73), !dbg !1743
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !1744, metadata !73), !dbg !1745
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !1746, metadata !73), !dbg !1747
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !1748, metadata !73), !dbg !1749
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !1750, metadata !73), !dbg !1751
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !1752, metadata !73), !dbg !1753
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !1754, metadata !73), !dbg !1755
  call void @llvm.dbg.declare(metadata i32* %y, metadata !1756, metadata !73), !dbg !1757
  call void @llvm.dbg.declare(metadata i64* %chromWidth, metadata !1758, metadata !73), !dbg !1760
  %0 = load i32, i32* %width.addr, align 4, !dbg !1761
  %shr = ashr i32 %0, 1, !dbg !1762
  %conv = sext i32 %shr to i64, !dbg !1761
  store i64 %conv, i64* %chromWidth, align 8, !dbg !1760
  store i32 0, i32* %y, align 4, !dbg !1763
  br label %for.cond, !dbg !1765

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !1766
  %2 = load i32, i32* %height.addr, align 4, !dbg !1769
  %cmp = icmp slt i32 %1, %2, !dbg !1770
  br i1 %cmp, label %for.body, label %for.end, !dbg !1771

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 8, !dbg !1772
  %4 = load i8*, i8** %ydst.addr, align 8, !dbg !1774
  %5 = load i8*, i8** %udst.addr, align 8, !dbg !1775
  %6 = load i8*, i8** %vdst.addr, align 8, !dbg !1776
  %7 = load i64, i64* %chromWidth, align 8, !dbg !1777
  call void asm sideeffect "xor              %rax, %rax\0A\09pcmpeqw                 %mm7, %mm7       \0A\09psrlw                      $$8, %mm7       \0A\09.p2align                    4              \0A\091:                \0A\09 # nop 64($0, %rax, 4)           \0A\09movq    ($0, %rax, 4), %mm0       \0A\09movq   8($0, %rax, 4), %mm1       \0A\09movq                    %mm0, %mm2       \0A\09movq                    %mm1, %mm3       \0A\09psrlw                      $$8, %mm0       \0A\09psrlw                      $$8, %mm1       \0A\09pand                    %mm7, %mm2       \0A\09pand                    %mm7, %mm3       \0A\09packuswb                %mm1, %mm0       \0A\09packuswb                %mm3, %mm2       \0A\09movq                  %mm2, ($1, %rax, 2) \0A\09movq  16($0, %rax, 4), %mm1       \0A\09movq  24($0, %rax, 4), %mm2       \0A\09movq                    %mm1, %mm3       \0A\09movq                    %mm2, %mm4       \0A\09psrlw                      $$8, %mm1       \0A\09psrlw                      $$8, %mm2       \0A\09pand                    %mm7, %mm3       \0A\09pand                    %mm7, %mm4       \0A\09packuswb                %mm2, %mm1       \0A\09packuswb                %mm4, %mm3       \0A\09movq                  %mm3, 8($1, %rax, 2) \0A\09movq                    %mm0, %mm2       \0A\09movq                    %mm1, %mm3       \0A\09psrlw                      $$8, %mm0       \0A\09psrlw                      $$8, %mm1       \0A\09pand                    %mm7, %mm2       \0A\09pand                    %mm7, %mm3       \0A\09packuswb                %mm1, %mm0       \0A\09packuswb                %mm3, %mm2       \0A\09movq                  %mm0, ($3, %rax)     \0A\09movq                  %mm2, ($2, %rax)     \0A\09add                        $$8, %rax \0A\09cmp                        $4, %rax \0A\09 jb                        1b               \0A\09", "r,r,r,r,imr,~{memory},~{rax},~{dirflag},~{fpsr},~{flags}"(i8* %3, i8* %4, i8* %5, i8* %6, i64 %7) #5, !dbg !1778, !srcloc !1779
  %8 = load i32, i32* %lumStride.addr, align 4, !dbg !1780
  %9 = load i8*, i8** %ydst.addr, align 8, !dbg !1781
  %idx.ext = sext i32 %8 to i64, !dbg !1781
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %idx.ext, !dbg !1781
  store i8* %add.ptr, i8** %ydst.addr, align 8, !dbg !1781
  %10 = load i32, i32* %srcStride.addr, align 4, !dbg !1782
  %11 = load i8*, i8** %src.addr, align 8, !dbg !1783
  %idx.ext2 = sext i32 %10 to i64, !dbg !1783
  %add.ptr3 = getelementptr inbounds i8, i8* %11, i64 %idx.ext2, !dbg !1783
  store i8* %add.ptr3, i8** %src.addr, align 8, !dbg !1783
  %12 = load i8*, i8** %src.addr, align 8, !dbg !1784
  %13 = load i8*, i8** %ydst.addr, align 8, !dbg !1785
  %14 = load i8*, i8** %udst.addr, align 8, !dbg !1786
  %15 = load i8*, i8** %vdst.addr, align 8, !dbg !1787
  %16 = load i64, i64* %chromWidth, align 8, !dbg !1788
  call void asm sideeffect "xor              %rax, %rax\0A\09.p2align                    4              \0A\091:                                         \0A\09 # nop 64($0, %rax, 4)           \0A\09movq    ($0, %rax, 4), %mm0       \0A\09movq   8($0, %rax, 4), %mm1       \0A\09movq  16($0, %rax, 4), %mm2       \0A\09movq  24($0, %rax, 4), %mm3       \0A\09pand                    %mm7, %mm0       \0A\09pand                    %mm7, %mm1       \0A\09pand                    %mm7, %mm2       \0A\09pand                    %mm7, %mm3       \0A\09packuswb                %mm1, %mm0       \0A\09packuswb                %mm3, %mm2       \0A\09movq                  %mm0,  ($1, %rax, 2) \0A\09movq                  %mm2, 8($1, %rax, 2) \0A\09add                        $$8, %rax\0A\09cmp                        $4, %rax\0A\09 jb                        1b              \0A\09", "r,r,r,r,imr,~{memory},~{rax},~{dirflag},~{fpsr},~{flags}"(i8* %12, i8* %13, i8* %14, i8* %15, i64 %16) #5, !dbg !1789, !srcloc !1790
  %17 = load i32, i32* %chromStride.addr, align 4, !dbg !1791
  %18 = load i8*, i8** %udst.addr, align 8, !dbg !1792
  %idx.ext4 = sext i32 %17 to i64, !dbg !1792
  %add.ptr5 = getelementptr inbounds i8, i8* %18, i64 %idx.ext4, !dbg !1792
  store i8* %add.ptr5, i8** %udst.addr, align 8, !dbg !1792
  %19 = load i32, i32* %chromStride.addr, align 4, !dbg !1793
  %20 = load i8*, i8** %vdst.addr, align 8, !dbg !1794
  %idx.ext6 = sext i32 %19 to i64, !dbg !1794
  %add.ptr7 = getelementptr inbounds i8, i8* %20, i64 %idx.ext6, !dbg !1794
  store i8* %add.ptr7, i8** %vdst.addr, align 8, !dbg !1794
  %21 = load i32, i32* %lumStride.addr, align 4, !dbg !1795
  %22 = load i8*, i8** %ydst.addr, align 8, !dbg !1796
  %idx.ext8 = sext i32 %21 to i64, !dbg !1796
  %add.ptr9 = getelementptr inbounds i8, i8* %22, i64 %idx.ext8, !dbg !1796
  store i8* %add.ptr9, i8** %ydst.addr, align 8, !dbg !1796
  %23 = load i32, i32* %srcStride.addr, align 4, !dbg !1797
  %24 = load i8*, i8** %src.addr, align 8, !dbg !1798
  %idx.ext10 = sext i32 %23 to i64, !dbg !1798
  %add.ptr11 = getelementptr inbounds i8, i8* %24, i64 %idx.ext10, !dbg !1798
  store i8* %add.ptr11, i8** %src.addr, align 8, !dbg !1798
  br label %for.inc, !dbg !1799

for.inc:                                          ; preds = %for.body
  %25 = load i32, i32* %y, align 4, !dbg !1800
  %add = add nsw i32 %25, 2, !dbg !1800
  store i32 %add, i32* %y, align 4, !dbg !1800
  br label %for.cond, !dbg !1802, !llvm.loop !1803

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !1805, !srcloc !1806
  ret void, !dbg !1807
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @vu9_to_vu12_mmx(i8* %src1, i8* %src2, i8* %dst1, i8* %dst2, i32 %width, i32 %height, i32 %srcStride1, i32 %srcStride2, i32 %dstStride1, i32 %dstStride2) #3 !dbg !1808 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dst1.addr = alloca i8*, align 8
  %dst2.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %srcStride1.addr = alloca i32, align 4
  %srcStride2.addr = alloca i32, align 4
  %dstStride1.addr = alloca i32, align 4
  %dstStride2.addr = alloca i32, align 4
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  %s1 = alloca i8*, align 8
  %d = alloca i8*, align 8
  %s2 = alloca i8*, align 8
  %d39 = alloca i8*, align 8
  store i8* %src1, i8** %src1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src1.addr, metadata !1811, metadata !73), !dbg !1812
  store i8* %src2, i8** %src2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src2.addr, metadata !1813, metadata !73), !dbg !1814
  store i8* %dst1, i8** %dst1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst1.addr, metadata !1815, metadata !73), !dbg !1816
  store i8* %dst2, i8** %dst2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst2.addr, metadata !1817, metadata !73), !dbg !1818
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !1819, metadata !73), !dbg !1820
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !1821, metadata !73), !dbg !1822
  store i32 %srcStride1, i32* %srcStride1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride1.addr, metadata !1823, metadata !73), !dbg !1824
  store i32 %srcStride2, i32* %srcStride2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride2.addr, metadata !1825, metadata !73), !dbg !1826
  store i32 %dstStride1, i32* %dstStride1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride1.addr, metadata !1827, metadata !73), !dbg !1828
  store i32 %dstStride2, i32* %dstStride2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride2.addr, metadata !1829, metadata !73), !dbg !1830
  call void @llvm.dbg.declare(metadata i64* %x, metadata !1831, metadata !73), !dbg !1832
  call void @llvm.dbg.declare(metadata i64* %y, metadata !1833, metadata !73), !dbg !1834
  call void @llvm.dbg.declare(metadata i32* %w, metadata !1835, metadata !73), !dbg !1836
  call void @llvm.dbg.declare(metadata i32* %h, metadata !1837, metadata !73), !dbg !1838
  %0 = load i32, i32* %width.addr, align 4, !dbg !1839
  %div = sdiv i32 %0, 2, !dbg !1840
  store i32 %div, i32* %w, align 4, !dbg !1841
  %1 = load i32, i32* %height.addr, align 4, !dbg !1842
  %div1 = sdiv i32 %1, 2, !dbg !1843
  store i32 %div1, i32* %h, align 4, !dbg !1844
  %2 = load i8*, i8** %src1.addr, align 8, !dbg !1845
  %3 = load i32, i32* %srcStride1.addr, align 4, !dbg !1846
  %idx.ext = sext i32 %3 to i64, !dbg !1847
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext, !dbg !1847
  %4 = load i8*, i8** %src2.addr, align 8, !dbg !1848
  %5 = load i32, i32* %srcStride2.addr, align 4, !dbg !1849
  %idx.ext2 = sext i32 %5 to i64, !dbg !1850
  %add.ptr3 = getelementptr inbounds i8, i8* %4, i64 %idx.ext2, !dbg !1850
  call void asm sideeffect " # nop $0    \0A\09 # nop $1    \0A\09", "*m,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr, i8* %add.ptr3) #5, !dbg !1851, !srcloc !1852
  store i64 0, i64* %y, align 8, !dbg !1853
  br label %for.cond, !dbg !1855

for.cond:                                         ; preds = %for.inc27, %entry
  %6 = load i64, i64* %y, align 8, !dbg !1856
  %7 = load i32, i32* %h, align 4, !dbg !1859
  %conv = sext i32 %7 to i64, !dbg !1859
  %cmp = icmp slt i64 %6, %conv, !dbg !1860
  br i1 %cmp, label %for.body, label %for.end29, !dbg !1861

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8** %s1, metadata !1862, metadata !73), !dbg !1864
  %8 = load i8*, i8** %src1.addr, align 8, !dbg !1865
  %9 = load i32, i32* %srcStride1.addr, align 4, !dbg !1866
  %conv5 = sext i32 %9 to i64, !dbg !1866
  %10 = load i64, i64* %y, align 8, !dbg !1867
  %shr = ashr i64 %10, 1, !dbg !1868
  %mul = mul nsw i64 %conv5, %shr, !dbg !1869
  %add.ptr6 = getelementptr inbounds i8, i8* %8, i64 %mul, !dbg !1870
  store i8* %add.ptr6, i8** %s1, align 8, !dbg !1864
  call void @llvm.dbg.declare(metadata i8** %d, metadata !1871, metadata !73), !dbg !1872
  %11 = load i8*, i8** %dst1.addr, align 8, !dbg !1873
  %12 = load i32, i32* %dstStride1.addr, align 4, !dbg !1874
  %conv7 = sext i32 %12 to i64, !dbg !1874
  %13 = load i64, i64* %y, align 8, !dbg !1875
  %mul8 = mul nsw i64 %conv7, %13, !dbg !1876
  %add.ptr9 = getelementptr inbounds i8, i8* %11, i64 %mul8, !dbg !1877
  store i8* %add.ptr9, i8** %d, align 8, !dbg !1872
  store i64 0, i64* %x, align 8, !dbg !1878
  br label %for.cond10, !dbg !1879

for.cond10:                                       ; preds = %for.inc, %for.body
  %14 = load i64, i64* %x, align 8, !dbg !1880
  %15 = load i32, i32* %w, align 4, !dbg !1884
  %sub = sub nsw i32 %15, 31, !dbg !1885
  %conv11 = sext i32 %sub to i64, !dbg !1884
  %cmp12 = icmp slt i64 %14, %conv11, !dbg !1886
  br i1 %cmp12, label %for.body14, label %for.end, !dbg !1887

for.body14:                                       ; preds = %for.cond10
  %16 = load i8*, i8** %d, align 8, !dbg !1888
  %17 = load i8*, i8** %s1, align 8, !dbg !1890
  %18 = load i64, i64* %x, align 8, !dbg !1891
  call void asm sideeffect " # nop   32($1,$2)        \0A\09movq         ($1,$2), %mm0 \0A\09movq        8($1,$2), %mm2 \0A\09movq       16($1,$2), %mm4 \0A\09movq       24($1,$2), %mm6 \0A\09movq      %mm0, %mm1 \0A\09movq      %mm2, %mm3 \0A\09movq      %mm4, %mm5 \0A\09movq      %mm6, %mm7 \0A\09punpcklbw %mm0, %mm0 \0A\09punpckhbw %mm1, %mm1 \0A\09punpcklbw %mm2, %mm2 \0A\09punpckhbw %mm3, %mm3 \0A\09punpcklbw %mm4, %mm4 \0A\09punpckhbw %mm5, %mm5 \0A\09punpcklbw %mm6, %mm6 \0A\09punpckhbw %mm7, %mm7 \0A\09movq    %mm0,   ($0,$2,2)  \0A\09movq    %mm1,  8($0,$2,2)  \0A\09movq    %mm2, 16($0,$2,2)  \0A\09movq    %mm3, 24($0,$2,2)  \0A\09movq    %mm4, 32($0,$2,2)  \0A\09movq    %mm5, 40($0,$2,2)  \0A\09movq    %mm6, 48($0,$2,2)  \0A\09movq    %mm7, 56($0,$2,2)", "r,r,r,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %16, i8* %17, i64 %18) #5, !dbg !1892, !srcloc !1893
  br label %for.inc, !dbg !1894

for.inc:                                          ; preds = %for.body14
  %19 = load i64, i64* %x, align 8, !dbg !1895
  %add = add nsw i64 %19, 32, !dbg !1895
  store i64 %add, i64* %x, align 8, !dbg !1895
  br label %for.cond10, !dbg !1897, !llvm.loop !1898

for.end:                                          ; preds = %for.cond10
  br label %for.cond15, !dbg !1899

for.cond15:                                       ; preds = %for.inc25, %for.end
  %20 = load i64, i64* %x, align 8, !dbg !1900
  %21 = load i32, i32* %w, align 4, !dbg !1904
  %conv16 = sext i32 %21 to i64, !dbg !1904
  %cmp17 = icmp slt i64 %20, %conv16, !dbg !1905
  br i1 %cmp17, label %for.body19, label %for.end26, !dbg !1906

for.body19:                                       ; preds = %for.cond15
  %22 = load i64, i64* %x, align 8, !dbg !1907
  %23 = load i8*, i8** %s1, align 8, !dbg !1909
  %arrayidx = getelementptr inbounds i8, i8* %23, i64 %22, !dbg !1909
  %24 = load i8, i8* %arrayidx, align 1, !dbg !1909
  %25 = load i64, i64* %x, align 8, !dbg !1910
  %mul20 = mul nsw i64 2, %25, !dbg !1911
  %add21 = add nsw i64 %mul20, 1, !dbg !1912
  %26 = load i8*, i8** %d, align 8, !dbg !1913
  %arrayidx22 = getelementptr inbounds i8, i8* %26, i64 %add21, !dbg !1913
  store i8 %24, i8* %arrayidx22, align 1, !dbg !1914
  %27 = load i64, i64* %x, align 8, !dbg !1915
  %mul23 = mul nsw i64 2, %27, !dbg !1916
  %28 = load i8*, i8** %d, align 8, !dbg !1917
  %arrayidx24 = getelementptr inbounds i8, i8* %28, i64 %mul23, !dbg !1917
  store i8 %24, i8* %arrayidx24, align 1, !dbg !1918
  br label %for.inc25, !dbg !1917

for.inc25:                                        ; preds = %for.body19
  %29 = load i64, i64* %x, align 8, !dbg !1919
  %inc = add nsw i64 %29, 1, !dbg !1919
  store i64 %inc, i64* %x, align 8, !dbg !1919
  br label %for.cond15, !dbg !1921, !llvm.loop !1922

for.end26:                                        ; preds = %for.cond15
  br label %for.inc27, !dbg !1923

for.inc27:                                        ; preds = %for.end26
  %30 = load i64, i64* %y, align 8, !dbg !1924
  %inc28 = add nsw i64 %30, 1, !dbg !1924
  store i64 %inc28, i64* %y, align 8, !dbg !1924
  br label %for.cond, !dbg !1926, !llvm.loop !1927

for.end29:                                        ; preds = %for.cond
  store i64 0, i64* %y, align 8, !dbg !1929
  br label %for.cond30, !dbg !1931

for.cond30:                                       ; preds = %for.inc66, %for.end29
  %31 = load i64, i64* %y, align 8, !dbg !1932
  %32 = load i32, i32* %h, align 4, !dbg !1935
  %conv31 = sext i32 %32 to i64, !dbg !1935
  %cmp32 = icmp slt i64 %31, %conv31, !dbg !1936
  br i1 %cmp32, label %for.body34, label %for.end68, !dbg !1937

for.body34:                                       ; preds = %for.cond30
  call void @llvm.dbg.declare(metadata i8** %s2, metadata !1938, metadata !73), !dbg !1940
  %33 = load i8*, i8** %src2.addr, align 8, !dbg !1941
  %34 = load i32, i32* %srcStride2.addr, align 4, !dbg !1942
  %conv35 = sext i32 %34 to i64, !dbg !1942
  %35 = load i64, i64* %y, align 8, !dbg !1943
  %shr36 = ashr i64 %35, 1, !dbg !1944
  %mul37 = mul nsw i64 %conv35, %shr36, !dbg !1945
  %add.ptr38 = getelementptr inbounds i8, i8* %33, i64 %mul37, !dbg !1946
  store i8* %add.ptr38, i8** %s2, align 8, !dbg !1940
  call void @llvm.dbg.declare(metadata i8** %d39, metadata !1947, metadata !73), !dbg !1948
  %36 = load i8*, i8** %dst2.addr, align 8, !dbg !1949
  %37 = load i32, i32* %dstStride2.addr, align 4, !dbg !1950
  %conv40 = sext i32 %37 to i64, !dbg !1950
  %38 = load i64, i64* %y, align 8, !dbg !1951
  %mul41 = mul nsw i64 %conv40, %38, !dbg !1952
  %add.ptr42 = getelementptr inbounds i8, i8* %36, i64 %mul41, !dbg !1953
  store i8* %add.ptr42, i8** %d39, align 8, !dbg !1948
  store i64 0, i64* %x, align 8, !dbg !1954
  br label %for.cond43, !dbg !1955

for.cond43:                                       ; preds = %for.inc49, %for.body34
  %39 = load i64, i64* %x, align 8, !dbg !1956
  %40 = load i32, i32* %w, align 4, !dbg !1960
  %sub44 = sub nsw i32 %40, 31, !dbg !1961
  %conv45 = sext i32 %sub44 to i64, !dbg !1960
  %cmp46 = icmp slt i64 %39, %conv45, !dbg !1962
  br i1 %cmp46, label %for.body48, label %for.end51, !dbg !1963

for.body48:                                       ; preds = %for.cond43
  %41 = load i8*, i8** %d39, align 8, !dbg !1964
  %42 = load i8*, i8** %s2, align 8, !dbg !1966
  %43 = load i64, i64* %x, align 8, !dbg !1967
  call void asm sideeffect " # nop   32($1,$2)        \0A\09movq         ($1,$2), %mm0 \0A\09movq        8($1,$2), %mm2 \0A\09movq       16($1,$2), %mm4 \0A\09movq       24($1,$2), %mm6 \0A\09movq      %mm0, %mm1 \0A\09movq      %mm2, %mm3 \0A\09movq      %mm4, %mm5 \0A\09movq      %mm6, %mm7 \0A\09punpcklbw %mm0, %mm0 \0A\09punpckhbw %mm1, %mm1 \0A\09punpcklbw %mm2, %mm2 \0A\09punpckhbw %mm3, %mm3 \0A\09punpcklbw %mm4, %mm4 \0A\09punpckhbw %mm5, %mm5 \0A\09punpcklbw %mm6, %mm6 \0A\09punpckhbw %mm7, %mm7 \0A\09movq    %mm0,   ($0,$2,2)  \0A\09movq    %mm1,  8($0,$2,2)  \0A\09movq    %mm2, 16($0,$2,2)  \0A\09movq    %mm3, 24($0,$2,2)  \0A\09movq    %mm4, 32($0,$2,2)  \0A\09movq    %mm5, 40($0,$2,2)  \0A\09movq    %mm6, 48($0,$2,2)  \0A\09movq    %mm7, 56($0,$2,2)", "r,r,r,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %41, i8* %42, i64 %43) #5, !dbg !1968, !srcloc !1969
  br label %for.inc49, !dbg !1970

for.inc49:                                        ; preds = %for.body48
  %44 = load i64, i64* %x, align 8, !dbg !1971
  %add50 = add nsw i64 %44, 32, !dbg !1971
  store i64 %add50, i64* %x, align 8, !dbg !1971
  br label %for.cond43, !dbg !1973, !llvm.loop !1974

for.end51:                                        ; preds = %for.cond43
  br label %for.cond52, !dbg !1975

for.cond52:                                       ; preds = %for.inc63, %for.end51
  %45 = load i64, i64* %x, align 8, !dbg !1976
  %46 = load i32, i32* %w, align 4, !dbg !1980
  %conv53 = sext i32 %46 to i64, !dbg !1980
  %cmp54 = icmp slt i64 %45, %conv53, !dbg !1981
  br i1 %cmp54, label %for.body56, label %for.end65, !dbg !1982

for.body56:                                       ; preds = %for.cond52
  %47 = load i64, i64* %x, align 8, !dbg !1983
  %48 = load i8*, i8** %s2, align 8, !dbg !1985
  %arrayidx57 = getelementptr inbounds i8, i8* %48, i64 %47, !dbg !1985
  %49 = load i8, i8* %arrayidx57, align 1, !dbg !1985
  %50 = load i64, i64* %x, align 8, !dbg !1986
  %mul58 = mul nsw i64 2, %50, !dbg !1987
  %add59 = add nsw i64 %mul58, 1, !dbg !1988
  %51 = load i8*, i8** %d39, align 8, !dbg !1989
  %arrayidx60 = getelementptr inbounds i8, i8* %51, i64 %add59, !dbg !1989
  store i8 %49, i8* %arrayidx60, align 1, !dbg !1990
  %52 = load i64, i64* %x, align 8, !dbg !1991
  %mul61 = mul nsw i64 2, %52, !dbg !1992
  %53 = load i8*, i8** %d39, align 8, !dbg !1993
  %arrayidx62 = getelementptr inbounds i8, i8* %53, i64 %mul61, !dbg !1993
  store i8 %49, i8* %arrayidx62, align 1, !dbg !1994
  br label %for.inc63, !dbg !1993

for.inc63:                                        ; preds = %for.body56
  %54 = load i64, i64* %x, align 8, !dbg !1995
  %inc64 = add nsw i64 %54, 1, !dbg !1995
  store i64 %inc64, i64* %x, align 8, !dbg !1995
  br label %for.cond52, !dbg !1997, !llvm.loop !1998

for.end65:                                        ; preds = %for.cond52
  br label %for.inc66, !dbg !1999

for.inc66:                                        ; preds = %for.end65
  %55 = load i64, i64* %y, align 8, !dbg !2000
  %inc67 = add nsw i64 %55, 1, !dbg !2000
  store i64 %inc67, i64* %y, align 8, !dbg !2000
  br label %for.cond30, !dbg !2002, !llvm.loop !2003

for.end68:                                        ; preds = %for.cond30
  call void asm sideeffect "emms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !2005, !srcloc !2006
  ret void, !dbg !2007
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yvu9_to_yuy2_mmx(i8* %src1, i8* %src2, i8* %src3, i8* %dst, i32 %width, i32 %height, i32 %srcStride1, i32 %srcStride2, i32 %srcStride3, i32 %dstStride) #3 !dbg !2008 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %src3.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %srcStride1.addr = alloca i32, align 4
  %srcStride2.addr = alloca i32, align 4
  %srcStride3.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  %x = alloca i64, align 8
  %y = alloca i32, align 4
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  %yp = alloca i8*, align 8
  %up = alloca i8*, align 8
  %vp = alloca i8*, align 8
  %d = alloca i8*, align 8
  %x2 = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src1.addr, metadata !2011, metadata !73), !dbg !2012
  store i8* %src2, i8** %src2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src2.addr, metadata !2013, metadata !73), !dbg !2014
  store i8* %src3, i8** %src3.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src3.addr, metadata !2015, metadata !73), !dbg !2016
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !2017, metadata !73), !dbg !2018
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !2019, metadata !73), !dbg !2020
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !2021, metadata !73), !dbg !2022
  store i32 %srcStride1, i32* %srcStride1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride1.addr, metadata !2023, metadata !73), !dbg !2024
  store i32 %srcStride2, i32* %srcStride2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride2.addr, metadata !2025, metadata !73), !dbg !2026
  store i32 %srcStride3, i32* %srcStride3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride3.addr, metadata !2027, metadata !73), !dbg !2028
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !2029, metadata !73), !dbg !2030
  call void @llvm.dbg.declare(metadata i64* %x, metadata !2031, metadata !73), !dbg !2032
  call void @llvm.dbg.declare(metadata i32* %y, metadata !2033, metadata !73), !dbg !2034
  call void @llvm.dbg.declare(metadata i32* %w, metadata !2035, metadata !73), !dbg !2036
  call void @llvm.dbg.declare(metadata i32* %h, metadata !2037, metadata !73), !dbg !2038
  %0 = load i32, i32* %width.addr, align 4, !dbg !2039
  %div = sdiv i32 %0, 2, !dbg !2040
  store i32 %div, i32* %w, align 4, !dbg !2041
  %1 = load i32, i32* %height.addr, align 4, !dbg !2042
  store i32 %1, i32* %h, align 4, !dbg !2043
  store i32 0, i32* %y, align 4, !dbg !2044
  br label %for.cond, !dbg !2046

for.cond:                                         ; preds = %for.inc60, %entry
  %2 = load i32, i32* %y, align 4, !dbg !2047
  %3 = load i32, i32* %h, align 4, !dbg !2050
  %cmp = icmp slt i32 %2, %3, !dbg !2051
  br i1 %cmp, label %for.body, label %for.end62, !dbg !2052

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8** %yp, metadata !2053, metadata !73), !dbg !2055
  %4 = load i8*, i8** %src1.addr, align 8, !dbg !2056
  %5 = load i32, i32* %srcStride1.addr, align 4, !dbg !2057
  %6 = load i32, i32* %y, align 4, !dbg !2058
  %mul = mul nsw i32 %5, %6, !dbg !2059
  %idx.ext = sext i32 %mul to i64, !dbg !2060
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %idx.ext, !dbg !2060
  store i8* %add.ptr, i8** %yp, align 8, !dbg !2055
  call void @llvm.dbg.declare(metadata i8** %up, metadata !2061, metadata !73), !dbg !2062
  %7 = load i8*, i8** %src2.addr, align 8, !dbg !2063
  %8 = load i32, i32* %srcStride2.addr, align 4, !dbg !2064
  %9 = load i32, i32* %y, align 4, !dbg !2065
  %shr = ashr i32 %9, 2, !dbg !2066
  %mul1 = mul nsw i32 %8, %shr, !dbg !2067
  %idx.ext2 = sext i32 %mul1 to i64, !dbg !2068
  %add.ptr3 = getelementptr inbounds i8, i8* %7, i64 %idx.ext2, !dbg !2068
  store i8* %add.ptr3, i8** %up, align 8, !dbg !2062
  call void @llvm.dbg.declare(metadata i8** %vp, metadata !2069, metadata !73), !dbg !2070
  %10 = load i8*, i8** %src3.addr, align 8, !dbg !2071
  %11 = load i32, i32* %srcStride3.addr, align 4, !dbg !2072
  %12 = load i32, i32* %y, align 4, !dbg !2073
  %shr4 = ashr i32 %12, 2, !dbg !2074
  %mul5 = mul nsw i32 %11, %shr4, !dbg !2075
  %idx.ext6 = sext i32 %mul5 to i64, !dbg !2076
  %add.ptr7 = getelementptr inbounds i8, i8* %10, i64 %idx.ext6, !dbg !2076
  store i8* %add.ptr7, i8** %vp, align 8, !dbg !2070
  call void @llvm.dbg.declare(metadata i8** %d, metadata !2077, metadata !73), !dbg !2078
  %13 = load i8*, i8** %dst.addr, align 8, !dbg !2079
  %14 = load i32, i32* %dstStride.addr, align 4, !dbg !2080
  %15 = load i32, i32* %y, align 4, !dbg !2081
  %mul8 = mul nsw i32 %14, %15, !dbg !2082
  %idx.ext9 = sext i32 %mul8 to i64, !dbg !2083
  %add.ptr10 = getelementptr inbounds i8, i8* %13, i64 %idx.ext9, !dbg !2083
  store i8* %add.ptr10, i8** %d, align 8, !dbg !2078
  store i64 0, i64* %x, align 8, !dbg !2084
  br label %for.cond11, !dbg !2085

for.cond11:                                       ; preds = %for.inc, %for.body
  %16 = load i64, i64* %x, align 8, !dbg !2086
  %17 = load i32, i32* %w, align 4, !dbg !2090
  %sub = sub nsw i32 %17, 7, !dbg !2091
  %conv = sext i32 %sub to i64, !dbg !2090
  %cmp12 = icmp slt i64 %16, %conv, !dbg !2092
  br i1 %cmp12, label %for.body14, label %for.end, !dbg !2093

for.body14:                                       ; preds = %for.cond11
  %18 = load i64, i64* %x, align 8, !dbg !2094
  %19 = load i8*, i8** %yp, align 8, !dbg !2096
  %20 = load i8*, i8** %up, align 8, !dbg !2097
  %21 = load i8*, i8** %vp, align 8, !dbg !2098
  %22 = load i8*, i8** %d, align 8, !dbg !2099
  %23 = call i64 asm sideeffect " # nop   32($1, $0)          \0A\09 # nop   32($2, $0)          \0A\09 # nop   32($3, $0)          \0A\09movq      ($1, $0, 4), %mm0   \0A\09movq         ($2, $0), %mm1   \0A\09movq         ($3, $0), %mm2   \0A\09movq            %mm0, %mm3   \0A\09movq            %mm1, %mm4   \0A\09movq            %mm2, %mm5   \0A\09punpcklbw       %mm1, %mm1   \0A\09punpcklbw       %mm2, %mm2   \0A\09punpckhbw       %mm4, %mm4   \0A\09punpckhbw       %mm5, %mm5   \0A\09movq            %mm1, %mm6   \0A\09punpcklbw       %mm2, %mm1   \0A\09punpcklbw       %mm1, %mm0   \0A\09punpckhbw       %mm1, %mm3   \0A\09movq          %mm0,  ($4, $0, 8)    \0A\09movq          %mm3, 8($4, $0, 8)    \0A\09punpckhbw       %mm2, %mm6   \0A\09movq     8($1, $0, 4), %mm0   \0A\09movq            %mm0, %mm3   \0A\09punpcklbw       %mm6, %mm0   \0A\09punpckhbw       %mm6, %mm3   \0A\09movq          %mm0, 16($4, $0, 8)   \0A\09movq          %mm3, 24($4, $0, 8)   \0A\09movq            %mm4, %mm6   \0A\09movq    16($1, $0, 4), %mm0   \0A\09movq            %mm0, %mm3   \0A\09punpcklbw       %mm5, %mm4   \0A\09punpcklbw       %mm4, %mm0   \0A\09punpckhbw       %mm4, %mm3   \0A\09movq          %mm0, 32($4, $0, 8)   \0A\09movq          %mm3, 40($4, $0, 8)   \0A\09punpckhbw       %mm5, %mm6   \0A\09movq    24($1, $0, 4), %mm0   \0A\09movq            %mm0, %mm3   \0A\09punpcklbw       %mm6, %mm0   \0A\09punpckhbw       %mm6, %mm3   \0A\09movq          %mm0, 48($4, $0, 8)   \0A\09movq          %mm3, 56($4, $0, 8)   \0A\09", "=r,r,r,r,r,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %19, i8* %20, i8* %21, i8* %22, i64 %18) #5, !dbg !2094, !srcloc !2100
  store i64 %23, i64* %x, align 8, !dbg !2094
  br label %for.inc, !dbg !2101

for.inc:                                          ; preds = %for.body14
  %24 = load i64, i64* %x, align 8, !dbg !2102
  %add = add nsw i64 %24, 8, !dbg !2102
  store i64 %add, i64* %x, align 8, !dbg !2102
  br label %for.cond11, !dbg !2104, !llvm.loop !2105

for.end:                                          ; preds = %for.cond11
  br label %for.cond15, !dbg !2106

for.cond15:                                       ; preds = %for.inc58, %for.end
  %25 = load i64, i64* %x, align 8, !dbg !2107
  %26 = load i32, i32* %w, align 4, !dbg !2111
  %conv16 = sext i32 %26 to i64, !dbg !2111
  %cmp17 = icmp slt i64 %25, %conv16, !dbg !2112
  br i1 %cmp17, label %for.body19, label %for.end59, !dbg !2113

for.body19:                                       ; preds = %for.cond15
  call void @llvm.dbg.declare(metadata i32* %x2, metadata !2114, metadata !73), !dbg !2116
  %27 = load i64, i64* %x, align 8, !dbg !2117
  %shl = shl i64 %27, 2, !dbg !2118
  %conv20 = trunc i64 %shl to i32, !dbg !2117
  store i32 %conv20, i32* %x2, align 4, !dbg !2116
  %28 = load i32, i32* %x2, align 4, !dbg !2119
  %idxprom = sext i32 %28 to i64, !dbg !2120
  %29 = load i8*, i8** %yp, align 8, !dbg !2120
  %arrayidx = getelementptr inbounds i8, i8* %29, i64 %idxprom, !dbg !2120
  %30 = load i8, i8* %arrayidx, align 1, !dbg !2120
  %31 = load i64, i64* %x, align 8, !dbg !2121
  %mul21 = mul nsw i64 8, %31, !dbg !2122
  %add22 = add nsw i64 %mul21, 0, !dbg !2123
  %32 = load i8*, i8** %d, align 8, !dbg !2124
  %arrayidx23 = getelementptr inbounds i8, i8* %32, i64 %add22, !dbg !2124
  store i8 %30, i8* %arrayidx23, align 1, !dbg !2125
  %33 = load i64, i64* %x, align 8, !dbg !2126
  %34 = load i8*, i8** %up, align 8, !dbg !2127
  %arrayidx24 = getelementptr inbounds i8, i8* %34, i64 %33, !dbg !2127
  %35 = load i8, i8* %arrayidx24, align 1, !dbg !2127
  %36 = load i64, i64* %x, align 8, !dbg !2128
  %mul25 = mul nsw i64 8, %36, !dbg !2129
  %add26 = add nsw i64 %mul25, 1, !dbg !2130
  %37 = load i8*, i8** %d, align 8, !dbg !2131
  %arrayidx27 = getelementptr inbounds i8, i8* %37, i64 %add26, !dbg !2131
  store i8 %35, i8* %arrayidx27, align 1, !dbg !2132
  %38 = load i32, i32* %x2, align 4, !dbg !2133
  %add28 = add nsw i32 %38, 1, !dbg !2134
  %idxprom29 = sext i32 %add28 to i64, !dbg !2135
  %39 = load i8*, i8** %yp, align 8, !dbg !2135
  %arrayidx30 = getelementptr inbounds i8, i8* %39, i64 %idxprom29, !dbg !2135
  %40 = load i8, i8* %arrayidx30, align 1, !dbg !2135
  %41 = load i64, i64* %x, align 8, !dbg !2136
  %mul31 = mul nsw i64 8, %41, !dbg !2137
  %add32 = add nsw i64 %mul31, 2, !dbg !2138
  %42 = load i8*, i8** %d, align 8, !dbg !2139
  %arrayidx33 = getelementptr inbounds i8, i8* %42, i64 %add32, !dbg !2139
  store i8 %40, i8* %arrayidx33, align 1, !dbg !2140
  %43 = load i64, i64* %x, align 8, !dbg !2141
  %44 = load i8*, i8** %vp, align 8, !dbg !2142
  %arrayidx34 = getelementptr inbounds i8, i8* %44, i64 %43, !dbg !2142
  %45 = load i8, i8* %arrayidx34, align 1, !dbg !2142
  %46 = load i64, i64* %x, align 8, !dbg !2143
  %mul35 = mul nsw i64 8, %46, !dbg !2144
  %add36 = add nsw i64 %mul35, 3, !dbg !2145
  %47 = load i8*, i8** %d, align 8, !dbg !2146
  %arrayidx37 = getelementptr inbounds i8, i8* %47, i64 %add36, !dbg !2146
  store i8 %45, i8* %arrayidx37, align 1, !dbg !2147
  %48 = load i32, i32* %x2, align 4, !dbg !2148
  %add38 = add nsw i32 %48, 2, !dbg !2149
  %idxprom39 = sext i32 %add38 to i64, !dbg !2150
  %49 = load i8*, i8** %yp, align 8, !dbg !2150
  %arrayidx40 = getelementptr inbounds i8, i8* %49, i64 %idxprom39, !dbg !2150
  %50 = load i8, i8* %arrayidx40, align 1, !dbg !2150
  %51 = load i64, i64* %x, align 8, !dbg !2151
  %mul41 = mul nsw i64 8, %51, !dbg !2152
  %add42 = add nsw i64 %mul41, 4, !dbg !2153
  %52 = load i8*, i8** %d, align 8, !dbg !2154
  %arrayidx43 = getelementptr inbounds i8, i8* %52, i64 %add42, !dbg !2154
  store i8 %50, i8* %arrayidx43, align 1, !dbg !2155
  %53 = load i64, i64* %x, align 8, !dbg !2156
  %54 = load i8*, i8** %up, align 8, !dbg !2157
  %arrayidx44 = getelementptr inbounds i8, i8* %54, i64 %53, !dbg !2157
  %55 = load i8, i8* %arrayidx44, align 1, !dbg !2157
  %56 = load i64, i64* %x, align 8, !dbg !2158
  %mul45 = mul nsw i64 8, %56, !dbg !2159
  %add46 = add nsw i64 %mul45, 5, !dbg !2160
  %57 = load i8*, i8** %d, align 8, !dbg !2161
  %arrayidx47 = getelementptr inbounds i8, i8* %57, i64 %add46, !dbg !2161
  store i8 %55, i8* %arrayidx47, align 1, !dbg !2162
  %58 = load i32, i32* %x2, align 4, !dbg !2163
  %add48 = add nsw i32 %58, 3, !dbg !2164
  %idxprom49 = sext i32 %add48 to i64, !dbg !2165
  %59 = load i8*, i8** %yp, align 8, !dbg !2165
  %arrayidx50 = getelementptr inbounds i8, i8* %59, i64 %idxprom49, !dbg !2165
  %60 = load i8, i8* %arrayidx50, align 1, !dbg !2165
  %61 = load i64, i64* %x, align 8, !dbg !2166
  %mul51 = mul nsw i64 8, %61, !dbg !2167
  %add52 = add nsw i64 %mul51, 6, !dbg !2168
  %62 = load i8*, i8** %d, align 8, !dbg !2169
  %arrayidx53 = getelementptr inbounds i8, i8* %62, i64 %add52, !dbg !2169
  store i8 %60, i8* %arrayidx53, align 1, !dbg !2170
  %63 = load i64, i64* %x, align 8, !dbg !2171
  %64 = load i8*, i8** %vp, align 8, !dbg !2172
  %arrayidx54 = getelementptr inbounds i8, i8* %64, i64 %63, !dbg !2172
  %65 = load i8, i8* %arrayidx54, align 1, !dbg !2172
  %66 = load i64, i64* %x, align 8, !dbg !2173
  %mul55 = mul nsw i64 8, %66, !dbg !2174
  %add56 = add nsw i64 %mul55, 7, !dbg !2175
  %67 = load i8*, i8** %d, align 8, !dbg !2176
  %arrayidx57 = getelementptr inbounds i8, i8* %67, i64 %add56, !dbg !2176
  store i8 %65, i8* %arrayidx57, align 1, !dbg !2177
  br label %for.inc58, !dbg !2178

for.inc58:                                        ; preds = %for.body19
  %68 = load i64, i64* %x, align 8, !dbg !2179
  %inc = add nsw i64 %68, 1, !dbg !2179
  store i64 %inc, i64* %x, align 8, !dbg !2179
  br label %for.cond15, !dbg !2181, !llvm.loop !2182

for.end59:                                        ; preds = %for.cond15
  br label %for.inc60, !dbg !2183

for.inc60:                                        ; preds = %for.end59
  %69 = load i32, i32* %y, align 4, !dbg !2184
  %inc61 = add nsw i32 %69, 1, !dbg !2184
  store i32 %inc61, i32* %y, align 4, !dbg !2184
  br label %for.cond, !dbg !2186, !llvm.loop !2187

for.end62:                                        ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !2189, !srcloc !2190
  ret void, !dbg !2191
}

; Function Attrs: nounwind uwtable
define internal void @uyvytoyuv422_mmx(i8* %ydst, i8* %udst, i8* %vdst, i8* %src, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride) #4 !dbg !2192 {
entry:
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i32, align 4
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !2195, metadata !73), !dbg !2196
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !2197, metadata !73), !dbg !2198
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !2199, metadata !73), !dbg !2200
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !2201, metadata !73), !dbg !2202
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !2203, metadata !73), !dbg !2204
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !2205, metadata !73), !dbg !2206
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !2207, metadata !73), !dbg !2208
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !2209, metadata !73), !dbg !2210
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !2211, metadata !73), !dbg !2212
  call void @llvm.dbg.declare(metadata i32* %y, metadata !2213, metadata !73), !dbg !2214
  call void @llvm.dbg.declare(metadata i32* %chromWidth, metadata !2215, metadata !73), !dbg !2216
  %0 = load i32, i32* %width.addr, align 4, !dbg !2217
  %add = add nsw i32 %0, 2, !dbg !2218
  %sub = sub nsw i32 %add, 1, !dbg !2219
  %shr = ashr i32 %sub, 1, !dbg !2220
  store i32 %shr, i32* %chromWidth, align 4, !dbg !2216
  store i32 0, i32* %y, align 4, !dbg !2221
  br label %for.cond, !dbg !2223

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !2224
  %2 = load i32, i32* %height.addr, align 4, !dbg !2227
  %cmp = icmp slt i32 %1, %2, !dbg !2228
  br i1 %cmp, label %for.body, label %for.end, !dbg !2229

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 8, !dbg !2230
  %4 = load i8*, i8** %ydst.addr, align 8, !dbg !2232
  %5 = load i32, i32* %width.addr, align 4, !dbg !2233
  %conv = sext i32 %5 to i64, !dbg !2233
  call void @extract_odd_mmx(i8* %3, i8* %4, i64 %conv), !dbg !2234
  %6 = load i8*, i8** %src.addr, align 8, !dbg !2235
  %7 = load i8*, i8** %udst.addr, align 8, !dbg !2236
  %8 = load i8*, i8** %vdst.addr, align 8, !dbg !2237
  %9 = load i32, i32* %chromWidth, align 4, !dbg !2238
  %conv1 = sext i32 %9 to i64, !dbg !2238
  call void @extract_even2_mmx(i8* %6, i8* %7, i8* %8, i64 %conv1), !dbg !2239
  %10 = load i32, i32* %srcStride.addr, align 4, !dbg !2240
  %11 = load i8*, i8** %src.addr, align 8, !dbg !2241
  %idx.ext = sext i32 %10 to i64, !dbg !2241
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext, !dbg !2241
  store i8* %add.ptr, i8** %src.addr, align 8, !dbg !2241
  %12 = load i32, i32* %lumStride.addr, align 4, !dbg !2242
  %13 = load i8*, i8** %ydst.addr, align 8, !dbg !2243
  %idx.ext2 = sext i32 %12 to i64, !dbg !2243
  %add.ptr3 = getelementptr inbounds i8, i8* %13, i64 %idx.ext2, !dbg !2243
  store i8* %add.ptr3, i8** %ydst.addr, align 8, !dbg !2243
  %14 = load i32, i32* %chromStride.addr, align 4, !dbg !2244
  %15 = load i8*, i8** %udst.addr, align 8, !dbg !2245
  %idx.ext4 = sext i32 %14 to i64, !dbg !2245
  %add.ptr5 = getelementptr inbounds i8, i8* %15, i64 %idx.ext4, !dbg !2245
  store i8* %add.ptr5, i8** %udst.addr, align 8, !dbg !2245
  %16 = load i32, i32* %chromStride.addr, align 4, !dbg !2246
  %17 = load i8*, i8** %vdst.addr, align 8, !dbg !2247
  %idx.ext6 = sext i32 %16 to i64, !dbg !2247
  %add.ptr7 = getelementptr inbounds i8, i8* %17, i64 %idx.ext6, !dbg !2247
  store i8* %add.ptr7, i8** %vdst.addr, align 8, !dbg !2247
  br label %for.inc, !dbg !2248

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %y, align 4, !dbg !2249
  %inc = add nsw i32 %18, 1, !dbg !2249
  store i32 %inc, i32* %y, align 4, !dbg !2249
  br label %for.cond, !dbg !2251, !llvm.loop !2252

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !2254, !srcloc !2255
  ret void, !dbg !2256
}

; Function Attrs: nounwind uwtable
define internal void @yuyvtoyuv422_mmx(i8* %ydst, i8* %udst, i8* %vdst, i8* %src, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride) #4 !dbg !2257 {
entry:
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i32, align 4
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !2258, metadata !73), !dbg !2259
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !2260, metadata !73), !dbg !2261
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !2262, metadata !73), !dbg !2263
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !2264, metadata !73), !dbg !2265
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !2266, metadata !73), !dbg !2267
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !2268, metadata !73), !dbg !2269
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !2270, metadata !73), !dbg !2271
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !2272, metadata !73), !dbg !2273
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !2274, metadata !73), !dbg !2275
  call void @llvm.dbg.declare(metadata i32* %y, metadata !2276, metadata !73), !dbg !2277
  call void @llvm.dbg.declare(metadata i32* %chromWidth, metadata !2278, metadata !73), !dbg !2279
  %0 = load i32, i32* %width.addr, align 4, !dbg !2280
  %add = add nsw i32 %0, 2, !dbg !2281
  %sub = sub nsw i32 %add, 1, !dbg !2282
  %shr = ashr i32 %sub, 1, !dbg !2283
  store i32 %shr, i32* %chromWidth, align 4, !dbg !2279
  store i32 0, i32* %y, align 4, !dbg !2284
  br label %for.cond, !dbg !2286

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !2287
  %2 = load i32, i32* %height.addr, align 4, !dbg !2290
  %cmp = icmp slt i32 %1, %2, !dbg !2291
  br i1 %cmp, label %for.body, label %for.end, !dbg !2292

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 8, !dbg !2293
  %4 = load i8*, i8** %ydst.addr, align 8, !dbg !2295
  %5 = load i32, i32* %width.addr, align 4, !dbg !2296
  %conv = sext i32 %5 to i64, !dbg !2296
  call void @extract_even_mmx(i8* %3, i8* %4, i64 %conv), !dbg !2297
  %6 = load i8*, i8** %src.addr, align 8, !dbg !2298
  %7 = load i8*, i8** %udst.addr, align 8, !dbg !2299
  %8 = load i8*, i8** %vdst.addr, align 8, !dbg !2300
  %9 = load i32, i32* %chromWidth, align 4, !dbg !2301
  %conv1 = sext i32 %9 to i64, !dbg !2301
  call void @extract_odd2_mmx(i8* %6, i8* %7, i8* %8, i64 %conv1), !dbg !2302
  %10 = load i32, i32* %srcStride.addr, align 4, !dbg !2303
  %11 = load i8*, i8** %src.addr, align 8, !dbg !2304
  %idx.ext = sext i32 %10 to i64, !dbg !2304
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext, !dbg !2304
  store i8* %add.ptr, i8** %src.addr, align 8, !dbg !2304
  %12 = load i32, i32* %lumStride.addr, align 4, !dbg !2305
  %13 = load i8*, i8** %ydst.addr, align 8, !dbg !2306
  %idx.ext2 = sext i32 %12 to i64, !dbg !2306
  %add.ptr3 = getelementptr inbounds i8, i8* %13, i64 %idx.ext2, !dbg !2306
  store i8* %add.ptr3, i8** %ydst.addr, align 8, !dbg !2306
  %14 = load i32, i32* %chromStride.addr, align 4, !dbg !2307
  %15 = load i8*, i8** %udst.addr, align 8, !dbg !2308
  %idx.ext4 = sext i32 %14 to i64, !dbg !2308
  %add.ptr5 = getelementptr inbounds i8, i8* %15, i64 %idx.ext4, !dbg !2308
  store i8* %add.ptr5, i8** %udst.addr, align 8, !dbg !2308
  %16 = load i32, i32* %chromStride.addr, align 4, !dbg !2309
  %17 = load i8*, i8** %vdst.addr, align 8, !dbg !2310
  %idx.ext6 = sext i32 %16 to i64, !dbg !2310
  %add.ptr7 = getelementptr inbounds i8, i8* %17, i64 %idx.ext6, !dbg !2310
  store i8* %add.ptr7, i8** %vdst.addr, align 8, !dbg !2310
  br label %for.inc, !dbg !2311

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %y, align 4, !dbg !2312
  %inc = add nsw i32 %18, 1, !dbg !2312
  store i32 %inc, i32* %y, align 4, !dbg !2312
  br label %for.cond, !dbg !2314, !llvm.loop !2315

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !2317, !srcloc !2318
  ret void, !dbg !2319
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24toyv12_mmx(i8* %src, i8* %ydst, i8* %udst, i8* %vdst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride, i32* %rgb2yuv) #3 !dbg !2320 {
entry:
  %src.addr = alloca i8*, align 8
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %rgb2yuv.addr = alloca i32*, align 8
  %y = alloca i32, align 4
  %chromWidth = alloca i64, align 8
  %i = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !2325, metadata !73), !dbg !2326
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !2327, metadata !73), !dbg !2328
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !2329, metadata !73), !dbg !2330
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !2331, metadata !73), !dbg !2332
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !2333, metadata !73), !dbg !2334
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !2335, metadata !73), !dbg !2336
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !2337, metadata !73), !dbg !2338
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !2339, metadata !73), !dbg !2340
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !2341, metadata !73), !dbg !2342
  store i32* %rgb2yuv, i32** %rgb2yuv.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %rgb2yuv.addr, metadata !2343, metadata !73), !dbg !2344
  call void @llvm.dbg.declare(metadata i32* %y, metadata !2345, metadata !73), !dbg !2346
  call void @llvm.dbg.declare(metadata i64* %chromWidth, metadata !2347, metadata !73), !dbg !2348
  %0 = load i32, i32* %width.addr, align 4, !dbg !2349
  %shr = ashr i32 %0, 1, !dbg !2350
  %conv = sext i32 %shr to i64, !dbg !2349
  store i64 %conv, i64* %chromWidth, align 8, !dbg !2348
  %1 = load i32, i32* %height.addr, align 4, !dbg !2351
  %cmp = icmp sgt i32 %1, 2, !dbg !2353
  br i1 %cmp, label %if.then, label %if.end, !dbg !2354

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %src.addr, align 8, !dbg !2355
  %3 = load i8*, i8** %ydst.addr, align 8, !dbg !2357
  %4 = load i8*, i8** %udst.addr, align 8, !dbg !2358
  %5 = load i8*, i8** %vdst.addr, align 8, !dbg !2359
  %6 = load i32, i32* %width.addr, align 4, !dbg !2360
  %7 = load i32, i32* %lumStride.addr, align 4, !dbg !2361
  %8 = load i32, i32* %chromStride.addr, align 4, !dbg !2362
  %9 = load i32, i32* %srcStride.addr, align 4, !dbg !2363
  %10 = load i32*, i32** %rgb2yuv.addr, align 8, !dbg !2364
  call void @ff_rgb24toyv12_c(i8* %2, i8* %3, i8* %4, i8* %5, i32 %6, i32 2, i32 %7, i32 %8, i32 %9, i32* %10), !dbg !2365
  %11 = load i32, i32* %srcStride.addr, align 4, !dbg !2366
  %mul = mul nsw i32 2, %11, !dbg !2367
  %12 = load i8*, i8** %src.addr, align 8, !dbg !2368
  %idx.ext = sext i32 %mul to i64, !dbg !2368
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %idx.ext, !dbg !2368
  store i8* %add.ptr, i8** %src.addr, align 8, !dbg !2368
  %13 = load i32, i32* %lumStride.addr, align 4, !dbg !2369
  %mul2 = mul nsw i32 2, %13, !dbg !2370
  %14 = load i8*, i8** %ydst.addr, align 8, !dbg !2371
  %idx.ext3 = sext i32 %mul2 to i64, !dbg !2371
  %add.ptr4 = getelementptr inbounds i8, i8* %14, i64 %idx.ext3, !dbg !2371
  store i8* %add.ptr4, i8** %ydst.addr, align 8, !dbg !2371
  %15 = load i32, i32* %chromStride.addr, align 4, !dbg !2372
  %16 = load i8*, i8** %udst.addr, align 8, !dbg !2373
  %idx.ext5 = sext i32 %15 to i64, !dbg !2373
  %add.ptr6 = getelementptr inbounds i8, i8* %16, i64 %idx.ext5, !dbg !2373
  store i8* %add.ptr6, i8** %udst.addr, align 8, !dbg !2373
  %17 = load i32, i32* %chromStride.addr, align 4, !dbg !2374
  %18 = load i8*, i8** %vdst.addr, align 8, !dbg !2375
  %idx.ext7 = sext i32 %17 to i64, !dbg !2375
  %add.ptr8 = getelementptr inbounds i8, i8* %18, i64 %idx.ext7, !dbg !2375
  store i8* %add.ptr8, i8** %vdst.addr, align 8, !dbg !2375
  %19 = load i32, i32* %height.addr, align 4, !dbg !2376
  %sub = sub nsw i32 %19, 2, !dbg !2376
  store i32 %sub, i32* %height.addr, align 4, !dbg !2376
  br label %if.end, !dbg !2377

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %y, align 4, !dbg !2378
  br label %for.cond, !dbg !2380

for.cond:                                         ; preds = %for.inc46, %if.end
  %20 = load i32, i32* %y, align 4, !dbg !2381
  %21 = load i32, i32* %height.addr, align 4, !dbg !2384
  %sub9 = sub nsw i32 %21, 2, !dbg !2385
  %cmp10 = icmp slt i32 %20, %sub9, !dbg !2386
  br i1 %cmp10, label %for.body, label %for.end47, !dbg !2387

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2388, metadata !73), !dbg !2390
  store i32 0, i32* %i, align 4, !dbg !2391
  br label %for.cond12, !dbg !2393

for.cond12:                                       ; preds = %for.inc, %for.body
  %22 = load i32, i32* %i, align 4, !dbg !2394
  %cmp13 = icmp slt i32 %22, 2, !dbg !2397
  br i1 %cmp13, label %for.body15, label %for.end, !dbg !2398

for.body15:                                       ; preds = %for.cond12
  %23 = load i8*, i8** %src.addr, align 8, !dbg !2399
  %24 = load i32, i32* %width.addr, align 4, !dbg !2401
  %mul16 = mul nsw i32 %24, 3, !dbg !2402
  %idx.ext17 = sext i32 %mul16 to i64, !dbg !2403
  %add.ptr18 = getelementptr inbounds i8, i8* %23, i64 %idx.ext17, !dbg !2403
  %25 = load i8*, i8** %ydst.addr, align 8, !dbg !2404
  %26 = load i32, i32* %width.addr, align 4, !dbg !2405
  %idx.ext19 = sext i32 %26 to i64, !dbg !2406
  %add.ptr20 = getelementptr inbounds i8, i8* %25, i64 %idx.ext19, !dbg !2406
  %27 = load i32, i32* %width.addr, align 4, !dbg !2407
  %sub21 = sub nsw i32 0, %27, !dbg !2408
  %conv22 = sext i32 %sub21 to i64, !dbg !2409
  %28 = load i32*, i32** %rgb2yuv.addr, align 8, !dbg !2410
  call void asm sideeffect "mov                        $2, %rax\0A\09movq          16*4+16*32($3), %mm6       \0A\09movq       ff_w1111, %mm5       \0A\09pxor                    %mm7, %mm7       \0A\09lea (%rax, %rax, 2), %rdx \0A\09.p2align                    4              \0A\091:                                         \0A\09 # nop 64($0, %rdx)              \0A\09movd       ($0, %rdx), %mm0       \0A\09movd      3($0, %rdx), %mm1       \0A\09punpcklbw               %mm7, %mm0       \0A\09punpcklbw               %mm7, %mm1       \0A\09movd      6($0, %rdx), %mm2       \0A\09movd      9($0, %rdx), %mm3       \0A\09punpcklbw               %mm7, %mm2       \0A\09punpcklbw               %mm7, %mm3       \0A\09pmaddwd                 %mm6, %mm0       \0A\09pmaddwd                 %mm6, %mm1       \0A\09pmaddwd                 %mm6, %mm2       \0A\09pmaddwd                 %mm6, %mm3       \0A\09psrad                      $$8, %mm0       \0A\09psrad                      $$8, %mm1       \0A\09psrad                      $$8, %mm2       \0A\09psrad                      $$8, %mm3       \0A\09packssdw                %mm1, %mm0       \0A\09packssdw                %mm3, %mm2       \0A\09pmaddwd                 %mm5, %mm0       \0A\09pmaddwd                 %mm5, %mm2       \0A\09packssdw                %mm2, %mm0       \0A\09psraw                      $$7, %mm0       \0A\09movd     12($0, %rdx), %mm4       \0A\09movd     15($0, %rdx), %mm1       \0A\09punpcklbw               %mm7, %mm4       \0A\09punpcklbw               %mm7, %mm1       \0A\09movd     18($0, %rdx), %mm2       \0A\09movd     21($0, %rdx), %mm3       \0A\09punpcklbw               %mm7, %mm2       \0A\09punpcklbw               %mm7, %mm3       \0A\09pmaddwd                 %mm6, %mm4       \0A\09pmaddwd                 %mm6, %mm1       \0A\09pmaddwd                 %mm6, %mm2       \0A\09pmaddwd                 %mm6, %mm3       \0A\09psrad                      $$8, %mm4       \0A\09psrad                      $$8, %mm1       \0A\09psrad                      $$8, %mm2       \0A\09psrad                      $$8, %mm3       \0A\09packssdw                %mm1, %mm4       \0A\09packssdw                %mm3, %mm2       \0A\09pmaddwd                 %mm5, %mm4       \0A\09pmaddwd                 %mm5, %mm2       \0A\09add                       $$24, %rdx\0A\09packssdw                %mm2, %mm4       \0A\09psraw                      $$7, %mm4       \0A\09packuswb                %mm4, %mm0       \0A\09paddusb ff_bgr2YOffset, %mm0    \0A\09movq                  %mm0, ($1, %rax) \0A\09add                        $$8,      %rax  \0A\09 js                        1b                     \0A\09", "r,r,imr,r,~{rax},~{rdx},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr18, i8* %add.ptr20, i64 %conv22, i32* %28) #5, !dbg !2411, !srcloc !2412
  %29 = load i32, i32* %lumStride.addr, align 4, !dbg !2413
  %30 = load i8*, i8** %ydst.addr, align 8, !dbg !2414
  %idx.ext23 = sext i32 %29 to i64, !dbg !2414
  %add.ptr24 = getelementptr inbounds i8, i8* %30, i64 %idx.ext23, !dbg !2414
  store i8* %add.ptr24, i8** %ydst.addr, align 8, !dbg !2414
  %31 = load i32, i32* %srcStride.addr, align 4, !dbg !2415
  %32 = load i8*, i8** %src.addr, align 8, !dbg !2416
  %idx.ext25 = sext i32 %31 to i64, !dbg !2416
  %add.ptr26 = getelementptr inbounds i8, i8* %32, i64 %idx.ext25, !dbg !2416
  store i8* %add.ptr26, i8** %src.addr, align 8, !dbg !2416
  br label %for.inc, !dbg !2417

for.inc:                                          ; preds = %for.body15
  %33 = load i32, i32* %i, align 4, !dbg !2418
  %inc = add nsw i32 %33, 1, !dbg !2418
  store i32 %inc, i32* %i, align 4, !dbg !2418
  br label %for.cond12, !dbg !2420, !llvm.loop !2421

for.end:                                          ; preds = %for.cond12
  %34 = load i32, i32* %srcStride.addr, align 4, !dbg !2423
  %mul27 = mul nsw i32 %34, 2, !dbg !2424
  %35 = load i8*, i8** %src.addr, align 8, !dbg !2425
  %idx.ext28 = sext i32 %mul27 to i64, !dbg !2425
  %idx.neg = sub i64 0, %idx.ext28, !dbg !2425
  %add.ptr29 = getelementptr inbounds i8, i8* %35, i64 %idx.neg, !dbg !2425
  store i8* %add.ptr29, i8** %src.addr, align 8, !dbg !2425
  %36 = load i8*, i8** %src.addr, align 8, !dbg !2426
  %37 = load i64, i64* %chromWidth, align 8, !dbg !2427
  %mul30 = mul nsw i64 %37, 6, !dbg !2428
  %add.ptr31 = getelementptr inbounds i8, i8* %36, i64 %mul30, !dbg !2429
  %38 = load i8*, i8** %src.addr, align 8, !dbg !2430
  %39 = load i32, i32* %srcStride.addr, align 4, !dbg !2431
  %idx.ext32 = sext i32 %39 to i64, !dbg !2432
  %add.ptr33 = getelementptr inbounds i8, i8* %38, i64 %idx.ext32, !dbg !2432
  %40 = load i64, i64* %chromWidth, align 8, !dbg !2433
  %mul34 = mul nsw i64 %40, 6, !dbg !2434
  %add.ptr35 = getelementptr inbounds i8, i8* %add.ptr33, i64 %mul34, !dbg !2435
  %41 = load i8*, i8** %udst.addr, align 8, !dbg !2436
  %42 = load i64, i64* %chromWidth, align 8, !dbg !2437
  %add.ptr36 = getelementptr inbounds i8, i8* %41, i64 %42, !dbg !2438
  %43 = load i8*, i8** %vdst.addr, align 8, !dbg !2439
  %44 = load i64, i64* %chromWidth, align 8, !dbg !2440
  %add.ptr37 = getelementptr inbounds i8, i8* %43, i64 %44, !dbg !2441
  %45 = load i64, i64* %chromWidth, align 8, !dbg !2442
  %sub38 = sub nsw i64 0, %45, !dbg !2443
  %46 = load i32*, i32** %rgb2yuv.addr, align 8, !dbg !2444
  call void asm sideeffect "mov                        $4, %rax\0A\09movq       ff_w1111, %mm5       \0A\09movq          16*4+16*33($5), %mm6       \0A\09pxor                    %mm7, %mm7       \0A\09lea (%rax, %rax, 2), %rdx \0A\09add              %rdx, %rdx\0A\09.p2align                    4              \0A\091:                                         \0A\09 # nop 64($0, %rdx)              \0A\09 # nop 64($1, %rdx)              \0A\09movd       ($0, %rdx), %mm0       \0A\09movd       ($1, %rdx), %mm1       \0A\09movd      3($0, %rdx), %mm2       \0A\09movd      3($1, %rdx), %mm3       \0A\09punpcklbw               %mm7, %mm0       \0A\09punpcklbw               %mm7, %mm1       \0A\09punpcklbw               %mm7, %mm2       \0A\09punpcklbw               %mm7, %mm3       \0A\09paddw                   %mm1, %mm0       \0A\09paddw                   %mm3, %mm2       \0A\09paddw                   %mm2, %mm0       \0A\09movd      6($0, %rdx), %mm4       \0A\09movd      6($1, %rdx), %mm1       \0A\09movd      9($0, %rdx), %mm2       \0A\09movd      9($1, %rdx), %mm3       \0A\09punpcklbw               %mm7, %mm4       \0A\09punpcklbw               %mm7, %mm1       \0A\09punpcklbw               %mm7, %mm2       \0A\09punpcklbw               %mm7, %mm3       \0A\09paddw                   %mm1, %mm4       \0A\09paddw                   %mm3, %mm2       \0A\09paddw                   %mm4, %mm2       \0A\09psrlw                      $$2, %mm0       \0A\09psrlw                      $$2, %mm2       \0A\09movq          16*4+16*34($5), %mm1       \0A\09movq          16*4+16*34($5), %mm3       \0A\09pmaddwd                 %mm0, %mm1       \0A\09pmaddwd                 %mm2, %mm3       \0A\09pmaddwd                 %mm6, %mm0       \0A\09pmaddwd                 %mm6, %mm2       \0A\09psrad                      $$8, %mm0       \0A\09psrad                      $$8, %mm1       \0A\09psrad                      $$8, %mm2       \0A\09psrad                      $$8, %mm3       \0A\09packssdw                %mm2, %mm0       \0A\09packssdw                %mm3, %mm1       \0A\09pmaddwd                 %mm5, %mm0       \0A\09pmaddwd                 %mm5, %mm1       \0A\09packssdw                %mm1, %mm0       \0A\09psraw                      $$7, %mm0       \0A\09movd     12($0, %rdx), %mm4       \0A\09movd     12($1, %rdx), %mm1       \0A\09movd     15($0, %rdx), %mm2       \0A\09movd     15($1, %rdx), %mm3       \0A\09punpcklbw               %mm7, %mm4       \0A\09punpcklbw               %mm7, %mm1       \0A\09punpcklbw               %mm7, %mm2       \0A\09punpcklbw               %mm7, %mm3       \0A\09paddw                   %mm1, %mm4       \0A\09paddw                   %mm3, %mm2       \0A\09paddw                   %mm2, %mm4       \0A\09movd     18($0, %rdx), %mm5       \0A\09movd     18($1, %rdx), %mm1       \0A\09movd     21($0, %rdx), %mm2       \0A\09movd     21($1, %rdx), %mm3       \0A\09punpcklbw               %mm7, %mm5       \0A\09punpcklbw               %mm7, %mm1       \0A\09punpcklbw               %mm7, %mm2       \0A\09punpcklbw               %mm7, %mm3       \0A\09paddw                   %mm1, %mm5       \0A\09paddw                   %mm3, %mm2       \0A\09paddw                   %mm5, %mm2       \0A\09movq       ff_w1111, %mm5       \0A\09psrlw                      $$2, %mm4       \0A\09psrlw                      $$2, %mm2       \0A\09movq          16*4+16*34($5), %mm1       \0A\09movq          16*4+16*34($5), %mm3       \0A\09pmaddwd                 %mm4, %mm1       \0A\09pmaddwd                 %mm2, %mm3       \0A\09pmaddwd                 %mm6, %mm4       \0A\09pmaddwd                 %mm6, %mm2       \0A\09psrad                      $$8, %mm4       \0A\09psrad                      $$8, %mm1       \0A\09psrad                      $$8, %mm2       \0A\09psrad                      $$8, %mm3       \0A\09packssdw                %mm2, %mm4       \0A\09packssdw                %mm3, %mm1       \0A\09pmaddwd                 %mm5, %mm4       \0A\09pmaddwd                 %mm5, %mm1       \0A\09add                       $$24, %rdx\0A\09packssdw                %mm1, %mm4       \0A\09psraw                      $$7, %mm4       \0A\09movq                    %mm0, %mm1           \0A\09punpckldq               %mm4, %mm0           \0A\09punpckhdq               %mm4, %mm1           \0A\09packsswb                %mm1, %mm0           \0A\09paddb ff_bgr2UVOffset, %mm0         \0A\09movd                    %mm0, ($2, %rax) \0A\09punpckhdq               %mm0, %mm0              \0A\09movd                    %mm0, ($3, %rax) \0A\09add                        $$4, %rax       \0A\09 js                        1b              \0A\09", "r,r,r,r,imr,r,~{rax},~{rdx},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr31, i8* %add.ptr35, i8* %add.ptr36, i8* %add.ptr37, i64 %sub38, i32* %46) #5, !dbg !2445, !srcloc !2446
  %47 = load i32, i32* %chromStride.addr, align 4, !dbg !2447
  %48 = load i8*, i8** %udst.addr, align 8, !dbg !2448
  %idx.ext39 = sext i32 %47 to i64, !dbg !2448
  %add.ptr40 = getelementptr inbounds i8, i8* %48, i64 %idx.ext39, !dbg !2448
  store i8* %add.ptr40, i8** %udst.addr, align 8, !dbg !2448
  %49 = load i32, i32* %chromStride.addr, align 4, !dbg !2449
  %50 = load i8*, i8** %vdst.addr, align 8, !dbg !2450
  %idx.ext41 = sext i32 %49 to i64, !dbg !2450
  %add.ptr42 = getelementptr inbounds i8, i8* %50, i64 %idx.ext41, !dbg !2450
  store i8* %add.ptr42, i8** %vdst.addr, align 8, !dbg !2450
  %51 = load i32, i32* %srcStride.addr, align 4, !dbg !2451
  %mul43 = mul nsw i32 %51, 2, !dbg !2452
  %52 = load i8*, i8** %src.addr, align 8, !dbg !2453
  %idx.ext44 = sext i32 %mul43 to i64, !dbg !2453
  %add.ptr45 = getelementptr inbounds i8, i8* %52, i64 %idx.ext44, !dbg !2453
  store i8* %add.ptr45, i8** %src.addr, align 8, !dbg !2453
  br label %for.inc46, !dbg !2454

for.inc46:                                        ; preds = %for.end
  %53 = load i32, i32* %y, align 4, !dbg !2455
  %add = add nsw i32 %53, 2, !dbg !2455
  store i32 %add, i32* %y, align 4, !dbg !2455
  br label %for.cond, !dbg !2457, !llvm.loop !2458

for.end47:                                        ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !2460, !srcloc !2461
  %54 = load i8*, i8** %src.addr, align 8, !dbg !2462
  %55 = load i8*, i8** %ydst.addr, align 8, !dbg !2463
  %56 = load i8*, i8** %udst.addr, align 8, !dbg !2464
  %57 = load i8*, i8** %vdst.addr, align 8, !dbg !2465
  %58 = load i32, i32* %width.addr, align 4, !dbg !2466
  %59 = load i32, i32* %height.addr, align 4, !dbg !2467
  %60 = load i32, i32* %y, align 4, !dbg !2468
  %sub48 = sub nsw i32 %59, %60, !dbg !2469
  %61 = load i32, i32* %lumStride.addr, align 4, !dbg !2470
  %62 = load i32, i32* %chromStride.addr, align 4, !dbg !2471
  %63 = load i32, i32* %srcStride.addr, align 4, !dbg !2472
  %64 = load i32*, i32** %rgb2yuv.addr, align 8, !dbg !2473
  call void @ff_rgb24toyv12_c(i8* %54, i8* %55, i8* %56, i8* %57, i32 %58, i32 %sub48, i32 %61, i32 %62, i32 %63, i32* %64), !dbg !2474
  ret void, !dbg !2475
}

; Function Attrs: nounwind uwtable
define internal void @yuyvtoyuv420_mmx(i8* %ydst, i8* %udst, i8* %vdst, i8* %src, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride) #4 !dbg !2476 {
entry:
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i32, align 4
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !2477, metadata !73), !dbg !2478
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !2479, metadata !73), !dbg !2480
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !2481, metadata !73), !dbg !2482
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !2483, metadata !73), !dbg !2484
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !2485, metadata !73), !dbg !2486
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !2487, metadata !73), !dbg !2488
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !2489, metadata !73), !dbg !2490
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !2491, metadata !73), !dbg !2492
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !2493, metadata !73), !dbg !2494
  call void @llvm.dbg.declare(metadata i32* %y, metadata !2495, metadata !73), !dbg !2496
  call void @llvm.dbg.declare(metadata i32* %chromWidth, metadata !2497, metadata !73), !dbg !2498
  %0 = load i32, i32* %width.addr, align 4, !dbg !2499
  %add = add nsw i32 %0, 2, !dbg !2500
  %sub = sub nsw i32 %add, 1, !dbg !2501
  %shr = ashr i32 %sub, 1, !dbg !2502
  store i32 %shr, i32* %chromWidth, align 4, !dbg !2498
  store i32 0, i32* %y, align 4, !dbg !2503
  br label %for.cond, !dbg !2505

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !2506
  %2 = load i32, i32* %height.addr, align 4, !dbg !2509
  %cmp = icmp slt i32 %1, %2, !dbg !2510
  br i1 %cmp, label %for.body, label %for.end, !dbg !2511

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 8, !dbg !2512
  %4 = load i8*, i8** %ydst.addr, align 8, !dbg !2514
  %5 = load i32, i32* %width.addr, align 4, !dbg !2515
  %conv = sext i32 %5 to i64, !dbg !2515
  call void @extract_even_mmx(i8* %3, i8* %4, i64 %conv), !dbg !2516
  %6 = load i32, i32* %y, align 4, !dbg !2517
  %and = and i32 %6, 1, !dbg !2519
  %tobool = icmp ne i32 %and, 0, !dbg !2519
  br i1 %tobool, label %if.then, label %if.end, !dbg !2520

if.then:                                          ; preds = %for.body
  %7 = load i8*, i8** %src.addr, align 8, !dbg !2521
  %8 = load i32, i32* %srcStride.addr, align 4, !dbg !2523
  %idx.ext = sext i32 %8 to i64, !dbg !2524
  %idx.neg = sub i64 0, %idx.ext, !dbg !2524
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.neg, !dbg !2524
  %9 = load i8*, i8** %src.addr, align 8, !dbg !2525
  %10 = load i8*, i8** %udst.addr, align 8, !dbg !2526
  %11 = load i8*, i8** %vdst.addr, align 8, !dbg !2527
  %12 = load i32, i32* %chromWidth, align 4, !dbg !2528
  %conv1 = sext i32 %12 to i64, !dbg !2528
  call void @extract_odd2avg_mmx(i8* %add.ptr, i8* %9, i8* %10, i8* %11, i64 %conv1), !dbg !2529
  %13 = load i32, i32* %chromStride.addr, align 4, !dbg !2530
  %14 = load i8*, i8** %udst.addr, align 8, !dbg !2531
  %idx.ext2 = sext i32 %13 to i64, !dbg !2531
  %add.ptr3 = getelementptr inbounds i8, i8* %14, i64 %idx.ext2, !dbg !2531
  store i8* %add.ptr3, i8** %udst.addr, align 8, !dbg !2531
  %15 = load i32, i32* %chromStride.addr, align 4, !dbg !2532
  %16 = load i8*, i8** %vdst.addr, align 8, !dbg !2533
  %idx.ext4 = sext i32 %15 to i64, !dbg !2533
  %add.ptr5 = getelementptr inbounds i8, i8* %16, i64 %idx.ext4, !dbg !2533
  store i8* %add.ptr5, i8** %vdst.addr, align 8, !dbg !2533
  br label %if.end, !dbg !2534

if.end:                                           ; preds = %if.then, %for.body
  %17 = load i32, i32* %srcStride.addr, align 4, !dbg !2535
  %18 = load i8*, i8** %src.addr, align 8, !dbg !2536
  %idx.ext6 = sext i32 %17 to i64, !dbg !2536
  %add.ptr7 = getelementptr inbounds i8, i8* %18, i64 %idx.ext6, !dbg !2536
  store i8* %add.ptr7, i8** %src.addr, align 8, !dbg !2536
  %19 = load i32, i32* %lumStride.addr, align 4, !dbg !2537
  %20 = load i8*, i8** %ydst.addr, align 8, !dbg !2538
  %idx.ext8 = sext i32 %19 to i64, !dbg !2538
  %add.ptr9 = getelementptr inbounds i8, i8* %20, i64 %idx.ext8, !dbg !2538
  store i8* %add.ptr9, i8** %ydst.addr, align 8, !dbg !2538
  br label %for.inc, !dbg !2539

for.inc:                                          ; preds = %if.end
  %21 = load i32, i32* %y, align 4, !dbg !2540
  %inc = add nsw i32 %21, 1, !dbg !2540
  store i32 %inc, i32* %y, align 4, !dbg !2540
  br label %for.cond, !dbg !2542, !llvm.loop !2543

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !2545, !srcloc !2546
  ret void, !dbg !2547
}

; Function Attrs: nounwind uwtable
define internal void @uyvytoyuv420_mmx(i8* %ydst, i8* %udst, i8* %vdst, i8* %src, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride) #4 !dbg !2548 {
entry:
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i32, align 4
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !2549, metadata !73), !dbg !2550
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !2551, metadata !73), !dbg !2552
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !2553, metadata !73), !dbg !2554
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !2555, metadata !73), !dbg !2556
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !2557, metadata !73), !dbg !2558
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !2559, metadata !73), !dbg !2560
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !2561, metadata !73), !dbg !2562
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !2563, metadata !73), !dbg !2564
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !2565, metadata !73), !dbg !2566
  call void @llvm.dbg.declare(metadata i32* %y, metadata !2567, metadata !73), !dbg !2568
  call void @llvm.dbg.declare(metadata i32* %chromWidth, metadata !2569, metadata !73), !dbg !2570
  %0 = load i32, i32* %width.addr, align 4, !dbg !2571
  %add = add nsw i32 %0, 2, !dbg !2572
  %sub = sub nsw i32 %add, 1, !dbg !2573
  %shr = ashr i32 %sub, 1, !dbg !2574
  store i32 %shr, i32* %chromWidth, align 4, !dbg !2570
  store i32 0, i32* %y, align 4, !dbg !2575
  br label %for.cond, !dbg !2577

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !2578
  %2 = load i32, i32* %height.addr, align 4, !dbg !2581
  %cmp = icmp slt i32 %1, %2, !dbg !2582
  br i1 %cmp, label %for.body, label %for.end, !dbg !2583

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 8, !dbg !2584
  %4 = load i8*, i8** %ydst.addr, align 8, !dbg !2586
  %5 = load i32, i32* %width.addr, align 4, !dbg !2587
  %conv = sext i32 %5 to i64, !dbg !2587
  call void @extract_odd_mmx(i8* %3, i8* %4, i64 %conv), !dbg !2588
  %6 = load i32, i32* %y, align 4, !dbg !2589
  %and = and i32 %6, 1, !dbg !2591
  %tobool = icmp ne i32 %and, 0, !dbg !2591
  br i1 %tobool, label %if.then, label %if.end, !dbg !2592

if.then:                                          ; preds = %for.body
  %7 = load i8*, i8** %src.addr, align 8, !dbg !2593
  %8 = load i32, i32* %srcStride.addr, align 4, !dbg !2595
  %idx.ext = sext i32 %8 to i64, !dbg !2596
  %idx.neg = sub i64 0, %idx.ext, !dbg !2596
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.neg, !dbg !2596
  %9 = load i8*, i8** %src.addr, align 8, !dbg !2597
  %10 = load i8*, i8** %udst.addr, align 8, !dbg !2598
  %11 = load i8*, i8** %vdst.addr, align 8, !dbg !2599
  %12 = load i32, i32* %chromWidth, align 4, !dbg !2600
  %conv1 = sext i32 %12 to i64, !dbg !2600
  call void @extract_even2avg_mmx(i8* %add.ptr, i8* %9, i8* %10, i8* %11, i64 %conv1), !dbg !2601
  %13 = load i32, i32* %chromStride.addr, align 4, !dbg !2602
  %14 = load i8*, i8** %udst.addr, align 8, !dbg !2603
  %idx.ext2 = sext i32 %13 to i64, !dbg !2603
  %add.ptr3 = getelementptr inbounds i8, i8* %14, i64 %idx.ext2, !dbg !2603
  store i8* %add.ptr3, i8** %udst.addr, align 8, !dbg !2603
  %15 = load i32, i32* %chromStride.addr, align 4, !dbg !2604
  %16 = load i8*, i8** %vdst.addr, align 8, !dbg !2605
  %idx.ext4 = sext i32 %15 to i64, !dbg !2605
  %add.ptr5 = getelementptr inbounds i8, i8* %16, i64 %idx.ext4, !dbg !2605
  store i8* %add.ptr5, i8** %vdst.addr, align 8, !dbg !2605
  br label %if.end, !dbg !2606

if.end:                                           ; preds = %if.then, %for.body
  %17 = load i32, i32* %srcStride.addr, align 4, !dbg !2607
  %18 = load i8*, i8** %src.addr, align 8, !dbg !2608
  %idx.ext6 = sext i32 %17 to i64, !dbg !2608
  %add.ptr7 = getelementptr inbounds i8, i8* %18, i64 %idx.ext6, !dbg !2608
  store i8* %add.ptr7, i8** %src.addr, align 8, !dbg !2608
  %19 = load i32, i32* %lumStride.addr, align 4, !dbg !2609
  %20 = load i8*, i8** %ydst.addr, align 8, !dbg !2610
  %idx.ext8 = sext i32 %19 to i64, !dbg !2610
  %add.ptr9 = getelementptr inbounds i8, i8* %20, i64 %idx.ext8, !dbg !2610
  store i8* %add.ptr9, i8** %ydst.addr, align 8, !dbg !2610
  br label %for.inc, !dbg !2611

for.inc:                                          ; preds = %if.end
  %21 = load i32, i32* %y, align 4, !dbg !2612
  %inc = add nsw i32 %21, 1, !dbg !2612
  store i32 %inc, i32* %y, align 4, !dbg !2612
  br label %for.cond, !dbg !2614, !llvm.loop !2615

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !2617, !srcloc !2618
  ret void, !dbg !2619
}

; Function Attrs: nounwind uwtable
define internal void @interleaveBytes_mmx(i8* %src1, i8* %src2, i8* %dest, i32 %width, i32 %height, i32 %src1Stride, i32 %src2Stride, i32 %dstStride) #4 !dbg !2620 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %src1Stride.addr = alloca i32, align 4
  %src2Stride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  %h = alloca i32, align 4
  %w = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src1.addr, metadata !2623, metadata !73), !dbg !2624
  store i8* %src2, i8** %src2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src2.addr, metadata !2625, metadata !73), !dbg !2626
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !2627, metadata !73), !dbg !2628
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !2629, metadata !73), !dbg !2630
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !2631, metadata !73), !dbg !2632
  store i32 %src1Stride, i32* %src1Stride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src1Stride.addr, metadata !2633, metadata !73), !dbg !2634
  store i32 %src2Stride, i32* %src2Stride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src2Stride.addr, metadata !2635, metadata !73), !dbg !2636
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !2637, metadata !73), !dbg !2638
  call void @llvm.dbg.declare(metadata i32* %h, metadata !2639, metadata !73), !dbg !2640
  store i32 0, i32* %h, align 4, !dbg !2641
  br label %for.cond, !dbg !2643

for.cond:                                         ; preds = %for.inc18, %entry
  %0 = load i32, i32* %h, align 4, !dbg !2644
  %1 = load i32, i32* %height.addr, align 4, !dbg !2647
  %cmp = icmp slt i32 %0, %1, !dbg !2648
  br i1 %cmp, label %for.body, label %for.end20, !dbg !2649

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %w, metadata !2650, metadata !73), !dbg !2652
  %2 = load i32, i32* %width.addr, align 4, !dbg !2653
  %cmp1 = icmp sge i32 %2, 16, !dbg !2655
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2656

if.then:                                          ; preds = %for.body
  %3 = load i8*, i8** %dest.addr, align 8, !dbg !2657
  %4 = load i8*, i8** %src1.addr, align 8, !dbg !2659
  %5 = load i8*, i8** %src2.addr, align 8, !dbg !2660
  %6 = load i32, i32* %width.addr, align 4, !dbg !2661
  %conv = sext i32 %6 to i64, !dbg !2662
  %sub = sub nsw i64 %conv, 15, !dbg !2663
  call void asm sideeffect "xor %rax, %rax         \0A\091:                                     \0A\09 # nop 64($1, %rax)          \0A\09 # nop 64($2, %rax)          \0A\09movq    ($1, %rax), %mm0      \0A\09movq   8($1, %rax), %mm2      \0A\09movq                 %mm0, %mm1      \0A\09movq                 %mm2, %mm3      \0A\09movq    ($2, %rax), %mm4      \0A\09movq   8($2, %rax), %mm5      \0A\09punpcklbw            %mm4, %mm0      \0A\09punpckhbw            %mm4, %mm1      \0A\09punpcklbw            %mm5, %mm2      \0A\09punpckhbw            %mm5, %mm3      \0A\09movq               %mm0,   ($0, %rax, 2) \0A\09movq               %mm1,  8($0, %rax, 2) \0A\09movq               %mm2, 16($0, %rax, 2) \0A\09movq               %mm3, 24($0, %rax, 2) \0A\09add                    $$16, %rax            \0A\09cmp                     $3, %rax            \0A\09 jb                     1b                          \0A\09", "r,r,r,r,~{memory},~{rax},~{dirflag},~{fpsr},~{flags}"(i8* %3, i8* %4, i8* %5, i64 %sub) #5, !dbg !2664, !srcloc !2665
  br label %if.end, !dbg !2666

if.end:                                           ; preds = %if.then, %for.body
  %7 = load i32, i32* %width.addr, align 4, !dbg !2667
  %and = and i32 %7, -16, !dbg !2669
  store i32 %and, i32* %w, align 4, !dbg !2670
  br label %for.cond2, !dbg !2671

for.cond2:                                        ; preds = %for.inc, %if.end
  %8 = load i32, i32* %w, align 4, !dbg !2672
  %9 = load i32, i32* %width.addr, align 4, !dbg !2675
  %cmp3 = icmp slt i32 %8, %9, !dbg !2676
  br i1 %cmp3, label %for.body5, label %for.end, !dbg !2677

for.body5:                                        ; preds = %for.cond2
  %10 = load i32, i32* %w, align 4, !dbg !2678
  %idxprom = sext i32 %10 to i64, !dbg !2680
  %11 = load i8*, i8** %src1.addr, align 8, !dbg !2680
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 %idxprom, !dbg !2680
  %12 = load i8, i8* %arrayidx, align 1, !dbg !2680
  %13 = load i32, i32* %w, align 4, !dbg !2681
  %mul = mul nsw i32 2, %13, !dbg !2682
  %add = add nsw i32 %mul, 0, !dbg !2683
  %idxprom6 = sext i32 %add to i64, !dbg !2684
  %14 = load i8*, i8** %dest.addr, align 8, !dbg !2684
  %arrayidx7 = getelementptr inbounds i8, i8* %14, i64 %idxprom6, !dbg !2684
  store i8 %12, i8* %arrayidx7, align 1, !dbg !2685
  %15 = load i32, i32* %w, align 4, !dbg !2686
  %idxprom8 = sext i32 %15 to i64, !dbg !2687
  %16 = load i8*, i8** %src2.addr, align 8, !dbg !2687
  %arrayidx9 = getelementptr inbounds i8, i8* %16, i64 %idxprom8, !dbg !2687
  %17 = load i8, i8* %arrayidx9, align 1, !dbg !2687
  %18 = load i32, i32* %w, align 4, !dbg !2688
  %mul10 = mul nsw i32 2, %18, !dbg !2689
  %add11 = add nsw i32 %mul10, 1, !dbg !2690
  %idxprom12 = sext i32 %add11 to i64, !dbg !2691
  %19 = load i8*, i8** %dest.addr, align 8, !dbg !2691
  %arrayidx13 = getelementptr inbounds i8, i8* %19, i64 %idxprom12, !dbg !2691
  store i8 %17, i8* %arrayidx13, align 1, !dbg !2692
  br label %for.inc, !dbg !2693

for.inc:                                          ; preds = %for.body5
  %20 = load i32, i32* %w, align 4, !dbg !2694
  %inc = add nsw i32 %20, 1, !dbg !2694
  store i32 %inc, i32* %w, align 4, !dbg !2694
  br label %for.cond2, !dbg !2696, !llvm.loop !2697

for.end:                                          ; preds = %for.cond2
  %21 = load i32, i32* %dstStride.addr, align 4, !dbg !2699
  %22 = load i8*, i8** %dest.addr, align 8, !dbg !2700
  %idx.ext = sext i32 %21 to i64, !dbg !2700
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 %idx.ext, !dbg !2700
  store i8* %add.ptr, i8** %dest.addr, align 8, !dbg !2700
  %23 = load i32, i32* %src1Stride.addr, align 4, !dbg !2701
  %24 = load i8*, i8** %src1.addr, align 8, !dbg !2702
  %idx.ext14 = sext i32 %23 to i64, !dbg !2702
  %add.ptr15 = getelementptr inbounds i8, i8* %24, i64 %idx.ext14, !dbg !2702
  store i8* %add.ptr15, i8** %src1.addr, align 8, !dbg !2702
  %25 = load i32, i32* %src2Stride.addr, align 4, !dbg !2703
  %26 = load i8*, i8** %src2.addr, align 8, !dbg !2704
  %idx.ext16 = sext i32 %25 to i64, !dbg !2704
  %add.ptr17 = getelementptr inbounds i8, i8* %26, i64 %idx.ext16, !dbg !2704
  store i8* %add.ptr17, i8** %src2.addr, align 8, !dbg !2704
  br label %for.inc18, !dbg !2705

for.inc18:                                        ; preds = %for.end
  %27 = load i32, i32* %h, align 4, !dbg !2706
  %inc19 = add nsw i32 %27, 1, !dbg !2706
  store i32 %inc19, i32* %h, align 4, !dbg !2706
  br label %for.cond, !dbg !2708, !llvm.loop !2709

for.end20:                                        ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !2711, !srcloc !2712
  ret void, !dbg !2713
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yuvPlanartoyuy2_mmx(i8* %ysrc, i8* %usrc, i8* %vsrc, i8* %dst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %dstStride, i32 %vertLumPerChroma) #3 !dbg !2714 {
entry:
  %ysrc.addr = alloca i8*, align 8
  %usrc.addr = alloca i8*, align 8
  %vsrc.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  %vertLumPerChroma.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i64, align 8
  store i8* %ysrc, i8** %ysrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ysrc.addr, metadata !2715, metadata !73), !dbg !2716
  store i8* %usrc, i8** %usrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %usrc.addr, metadata !2717, metadata !73), !dbg !2718
  store i8* %vsrc, i8** %vsrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vsrc.addr, metadata !2719, metadata !73), !dbg !2720
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !2721, metadata !73), !dbg !2722
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !2723, metadata !73), !dbg !2724
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !2725, metadata !73), !dbg !2726
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !2727, metadata !73), !dbg !2728
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !2729, metadata !73), !dbg !2730
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !2731, metadata !73), !dbg !2732
  store i32 %vertLumPerChroma, i32* %vertLumPerChroma.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vertLumPerChroma.addr, metadata !2733, metadata !73), !dbg !2734
  call void @llvm.dbg.declare(metadata i32* %y, metadata !2735, metadata !73), !dbg !2736
  call void @llvm.dbg.declare(metadata i64* %chromWidth, metadata !2737, metadata !73), !dbg !2738
  %0 = load i32, i32* %width.addr, align 4, !dbg !2739
  %shr = ashr i32 %0, 1, !dbg !2740
  %conv = sext i32 %shr to i64, !dbg !2739
  store i64 %conv, i64* %chromWidth, align 8, !dbg !2738
  store i32 0, i32* %y, align 4, !dbg !2741
  br label %for.cond, !dbg !2743

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !2744
  %2 = load i32, i32* %height.addr, align 4, !dbg !2747
  %cmp = icmp slt i32 %1, %2, !dbg !2748
  br i1 %cmp, label %for.body, label %for.end, !dbg !2749

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %dst.addr, align 8, !dbg !2750
  %4 = load i8*, i8** %ysrc.addr, align 8, !dbg !2752
  %5 = load i8*, i8** %usrc.addr, align 8, !dbg !2753
  %6 = load i8*, i8** %vsrc.addr, align 8, !dbg !2754
  %7 = load i64, i64* %chromWidth, align 8, !dbg !2755
  call void asm sideeffect "xor                 %rax, %rax \0A\09.p2align                    4              \0A\091:                                         \0A\09 # nop 32($1, %rax, 2)           \0A\09 # nop 32($2, %rax)              \0A\09 # nop 32($3, %rax)              \0A\09movq       ($2, %rax), %mm0       \0A\09movq                    %mm0, %mm2       \0A\09movq       ($3, %rax), %mm1       \0A\09punpcklbw               %mm1, %mm0       \0A\09punpckhbw               %mm1, %mm2       \0A\09movq     ($1, %rax,2), %mm3       \0A\09movq    8($1, %rax,2), %mm5       \0A\09movq                    %mm3, %mm4       \0A\09movq                    %mm5, %mm6       \0A\09punpcklbw               %mm0, %mm3       \0A\09punpckhbw               %mm0, %mm4       \0A\09punpcklbw               %mm2, %mm5       \0A\09punpckhbw               %mm2, %mm6       \0A\09movq                  %mm3,   ($0, %rax, 4)    \0A\09movq                  %mm4,  8($0, %rax, 4)    \0A\09movq                  %mm5, 16($0, %rax, 4)    \0A\09movq                  %mm6, 24($0, %rax, 4)    \0A\09add                        $$8, %rax \0A\09cmp                        $4, %rax \0A\09 jb                        1b               \0A\09", "r,r,r,r,imr,~{rax},~{dirflag},~{fpsr},~{flags}"(i8* %3, i8* %4, i8* %5, i8* %6, i64 %7) #5, !dbg !2756, !srcloc !2757
  %8 = load i32, i32* %y, align 4, !dbg !2758
  %9 = load i32, i32* %vertLumPerChroma.addr, align 4, !dbg !2760
  %sub = sub nsw i32 %9, 1, !dbg !2761
  %and = and i32 %8, %sub, !dbg !2762
  %10 = load i32, i32* %vertLumPerChroma.addr, align 4, !dbg !2763
  %sub2 = sub nsw i32 %10, 1, !dbg !2764
  %cmp3 = icmp eq i32 %and, %sub2, !dbg !2765
  br i1 %cmp3, label %if.then, label %if.end, !dbg !2766

if.then:                                          ; preds = %for.body
  %11 = load i32, i32* %chromStride.addr, align 4, !dbg !2767
  %12 = load i8*, i8** %usrc.addr, align 8, !dbg !2769
  %idx.ext = sext i32 %11 to i64, !dbg !2769
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %idx.ext, !dbg !2769
  store i8* %add.ptr, i8** %usrc.addr, align 8, !dbg !2769
  %13 = load i32, i32* %chromStride.addr, align 4, !dbg !2770
  %14 = load i8*, i8** %vsrc.addr, align 8, !dbg !2771
  %idx.ext5 = sext i32 %13 to i64, !dbg !2771
  %add.ptr6 = getelementptr inbounds i8, i8* %14, i64 %idx.ext5, !dbg !2771
  store i8* %add.ptr6, i8** %vsrc.addr, align 8, !dbg !2771
  br label %if.end, !dbg !2772

if.end:                                           ; preds = %if.then, %for.body
  %15 = load i32, i32* %lumStride.addr, align 4, !dbg !2773
  %16 = load i8*, i8** %ysrc.addr, align 8, !dbg !2774
  %idx.ext7 = sext i32 %15 to i64, !dbg !2774
  %add.ptr8 = getelementptr inbounds i8, i8* %16, i64 %idx.ext7, !dbg !2774
  store i8* %add.ptr8, i8** %ysrc.addr, align 8, !dbg !2774
  %17 = load i32, i32* %dstStride.addr, align 4, !dbg !2775
  %18 = load i8*, i8** %dst.addr, align 8, !dbg !2776
  %idx.ext9 = sext i32 %17 to i64, !dbg !2776
  %add.ptr10 = getelementptr inbounds i8, i8* %18, i64 %idx.ext9, !dbg !2776
  store i8* %add.ptr10, i8** %dst.addr, align 8, !dbg !2776
  br label %for.inc, !dbg !2777

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %y, align 4, !dbg !2778
  %inc = add nsw i32 %19, 1, !dbg !2778
  store i32 %inc, i32* %y, align 4, !dbg !2778
  br label %for.cond, !dbg !2780, !llvm.loop !2781

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !2783, !srcloc !2784
  ret void, !dbg !2785
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yuvPlanartouyvy_mmx(i8* %ysrc, i8* %usrc, i8* %vsrc, i8* %dst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %dstStride, i32 %vertLumPerChroma) #3 !dbg !2786 {
entry:
  %ysrc.addr = alloca i8*, align 8
  %usrc.addr = alloca i8*, align 8
  %vsrc.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  %vertLumPerChroma.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i64, align 8
  store i8* %ysrc, i8** %ysrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ysrc.addr, metadata !2787, metadata !73), !dbg !2788
  store i8* %usrc, i8** %usrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %usrc.addr, metadata !2789, metadata !73), !dbg !2790
  store i8* %vsrc, i8** %vsrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vsrc.addr, metadata !2791, metadata !73), !dbg !2792
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !2793, metadata !73), !dbg !2794
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !2795, metadata !73), !dbg !2796
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !2797, metadata !73), !dbg !2798
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !2799, metadata !73), !dbg !2800
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !2801, metadata !73), !dbg !2802
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !2803, metadata !73), !dbg !2804
  store i32 %vertLumPerChroma, i32* %vertLumPerChroma.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vertLumPerChroma.addr, metadata !2805, metadata !73), !dbg !2806
  call void @llvm.dbg.declare(metadata i32* %y, metadata !2807, metadata !73), !dbg !2808
  call void @llvm.dbg.declare(metadata i64* %chromWidth, metadata !2809, metadata !73), !dbg !2810
  %0 = load i32, i32* %width.addr, align 4, !dbg !2811
  %shr = ashr i32 %0, 1, !dbg !2812
  %conv = sext i32 %shr to i64, !dbg !2811
  store i64 %conv, i64* %chromWidth, align 8, !dbg !2810
  store i32 0, i32* %y, align 4, !dbg !2813
  br label %for.cond, !dbg !2815

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !2816
  %2 = load i32, i32* %height.addr, align 4, !dbg !2819
  %cmp = icmp slt i32 %1, %2, !dbg !2820
  br i1 %cmp, label %for.body, label %for.end, !dbg !2821

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %dst.addr, align 8, !dbg !2822
  %4 = load i8*, i8** %ysrc.addr, align 8, !dbg !2824
  %5 = load i8*, i8** %usrc.addr, align 8, !dbg !2825
  %6 = load i8*, i8** %vsrc.addr, align 8, !dbg !2826
  %7 = load i64, i64* %chromWidth, align 8, !dbg !2827
  call void asm sideeffect "xor             %rax, %rax \0A\09.p2align                   4               \0A\091:                                         \0A\09 # nop 32($1, %rax, 2)           \0A\09 # nop 32($2, %rax)              \0A\09 # nop 32($3, %rax)              \0A\09movq      ($2, %rax), %mm0        \0A\09movq                   %mm0, %mm2        \0A\09movq      ($3, %rax), %mm1        \0A\09punpcklbw              %mm1, %mm0        \0A\09punpckhbw              %mm1, %mm2        \0A\09movq    ($1, %rax,2), %mm3        \0A\09movq   8($1, %rax,2), %mm5        \0A\09movq                   %mm0, %mm4        \0A\09movq                   %mm2, %mm6        \0A\09punpcklbw              %mm3, %mm0        \0A\09punpckhbw              %mm3, %mm4        \0A\09punpcklbw              %mm5, %mm2        \0A\09punpckhbw              %mm5, %mm6        \0A\09movq                 %mm0,   ($0, %rax, 4)     \0A\09movq                 %mm4,  8($0, %rax, 4)     \0A\09movq                 %mm2, 16($0, %rax, 4)     \0A\09movq                 %mm6, 24($0, %rax, 4)     \0A\09add                       $$8, %rax \0A\09cmp                       $4, %rax \0A\09 jb                       1b               \0A\09", "r,r,r,r,imr,~{rax},~{dirflag},~{fpsr},~{flags}"(i8* %3, i8* %4, i8* %5, i8* %6, i64 %7) #5, !dbg !2828, !srcloc !2829
  %8 = load i32, i32* %y, align 4, !dbg !2830
  %9 = load i32, i32* %vertLumPerChroma.addr, align 4, !dbg !2832
  %sub = sub nsw i32 %9, 1, !dbg !2833
  %and = and i32 %8, %sub, !dbg !2834
  %10 = load i32, i32* %vertLumPerChroma.addr, align 4, !dbg !2835
  %sub2 = sub nsw i32 %10, 1, !dbg !2836
  %cmp3 = icmp eq i32 %and, %sub2, !dbg !2837
  br i1 %cmp3, label %if.then, label %if.end, !dbg !2838

if.then:                                          ; preds = %for.body
  %11 = load i32, i32* %chromStride.addr, align 4, !dbg !2839
  %12 = load i8*, i8** %usrc.addr, align 8, !dbg !2841
  %idx.ext = sext i32 %11 to i64, !dbg !2841
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %idx.ext, !dbg !2841
  store i8* %add.ptr, i8** %usrc.addr, align 8, !dbg !2841
  %13 = load i32, i32* %chromStride.addr, align 4, !dbg !2842
  %14 = load i8*, i8** %vsrc.addr, align 8, !dbg !2843
  %idx.ext5 = sext i32 %13 to i64, !dbg !2843
  %add.ptr6 = getelementptr inbounds i8, i8* %14, i64 %idx.ext5, !dbg !2843
  store i8* %add.ptr6, i8** %vsrc.addr, align 8, !dbg !2843
  br label %if.end, !dbg !2844

if.end:                                           ; preds = %if.then, %for.body
  %15 = load i32, i32* %lumStride.addr, align 4, !dbg !2845
  %16 = load i8*, i8** %ysrc.addr, align 8, !dbg !2846
  %idx.ext7 = sext i32 %15 to i64, !dbg !2846
  %add.ptr8 = getelementptr inbounds i8, i8* %16, i64 %idx.ext7, !dbg !2846
  store i8* %add.ptr8, i8** %ysrc.addr, align 8, !dbg !2846
  %17 = load i32, i32* %dstStride.addr, align 4, !dbg !2847
  %18 = load i8*, i8** %dst.addr, align 8, !dbg !2848
  %idx.ext9 = sext i32 %17 to i64, !dbg !2848
  %add.ptr10 = getelementptr inbounds i8, i8* %18, i64 %idx.ext9, !dbg !2848
  store i8* %add.ptr10, i8** %dst.addr, align 8, !dbg !2848
  br label %for.inc, !dbg !2849

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %y, align 4, !dbg !2850
  %inc = add nsw i32 %19, 1, !dbg !2850
  store i32 %inc, i32* %y, align 4, !dbg !2850
  br label %for.cond, !dbg !2852, !llvm.loop !2853

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !2855, !srcloc !2856
  ret void, !dbg !2857
}

; Function Attrs: nounwind uwtable
define internal void @extract_odd_mmx(i8* %src, i8* %dst, i64 %count) #4 !dbg !2858 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !2861, metadata !73), !dbg !2862
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !2863, metadata !73), !dbg !2864
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !2865, metadata !73), !dbg !2866
  %0 = load i8*, i8** %src.addr, align 8, !dbg !2867
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1, !dbg !2867
  store i8* %incdec.ptr, i8** %src.addr, align 8, !dbg !2867
  %1 = load i64, i64* %count.addr, align 8, !dbg !2868
  %2 = load i8*, i8** %dst.addr, align 8, !dbg !2869
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %1, !dbg !2869
  store i8* %add.ptr, i8** %dst.addr, align 8, !dbg !2869
  %3 = load i64, i64* %count.addr, align 8, !dbg !2870
  %mul = mul nsw i64 2, %3, !dbg !2871
  %4 = load i8*, i8** %src.addr, align 8, !dbg !2872
  %add.ptr1 = getelementptr inbounds i8, i8* %4, i64 %mul, !dbg !2872
  store i8* %add.ptr1, i8** %src.addr, align 8, !dbg !2872
  %5 = load i64, i64* %count.addr, align 8, !dbg !2873
  %sub = sub nsw i64 0, %5, !dbg !2874
  store i64 %sub, i64* %count.addr, align 8, !dbg !2875
  %6 = load i64, i64* %count.addr, align 8, !dbg !2876
  %cmp = icmp slt i64 %6, -16, !dbg !2878
  br i1 %cmp, label %if.then, label %if.end, !dbg !2879

if.then:                                          ; preds = %entry
  %7 = load i64, i64* %count.addr, align 8, !dbg !2880
  %add = add nsw i64 %7, 16, !dbg !2880
  store i64 %add, i64* %count.addr, align 8, !dbg !2880
  %8 = load i64, i64* %count.addr, align 8, !dbg !2882
  %9 = load i8*, i8** %src.addr, align 8, !dbg !2883
  %10 = load i8*, i8** %dst.addr, align 8, !dbg !2884
  %11 = call i64 asm sideeffect "pcmpeqw       %mm7, %mm7        \0A\09psrlw            $$8, %mm7        \0A\091:                                \0A\09movq -32($1, $0, 2), %mm0        \0A\09movq -24($1, $0, 2), %mm1        \0A\09movq -16($1, $0, 2), %mm2        \0A\09movq  -8($1, $0, 2), %mm3        \0A\09pand          %mm7, %mm0        \0A\09pand          %mm7, %mm1        \0A\09pand          %mm7, %mm2        \0A\09pand          %mm7, %mm3        \0A\09packuswb      %mm1, %mm0        \0A\09packuswb      %mm3, %mm2        \0A\09movq        %mm0,-16($2, $0)   \0A\09movq        %mm2,- 8($2, $0)   \0A\09add             $$16, $0           \0A\09 js 1b                            \0A\09", "=r,r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %9, i8* %10, i64 %8) #5, !dbg !2882, !srcloc !2885
  store i64 %11, i64* %count.addr, align 8, !dbg !2882
  %12 = load i64, i64* %count.addr, align 8, !dbg !2886
  %sub2 = sub nsw i64 %12, 16, !dbg !2886
  store i64 %sub2, i64* %count.addr, align 8, !dbg !2886
  br label %if.end, !dbg !2887

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !2888

while.cond:                                       ; preds = %while.body, %if.end
  %13 = load i64, i64* %count.addr, align 8, !dbg !2889
  %cmp3 = icmp slt i64 %13, 0, !dbg !2891
  br i1 %cmp3, label %while.body, label %while.end, !dbg !2892

while.body:                                       ; preds = %while.cond
  %14 = load i64, i64* %count.addr, align 8, !dbg !2893
  %mul4 = mul nsw i64 2, %14, !dbg !2895
  %15 = load i8*, i8** %src.addr, align 8, !dbg !2896
  %arrayidx = getelementptr inbounds i8, i8* %15, i64 %mul4, !dbg !2896
  %16 = load i8, i8* %arrayidx, align 1, !dbg !2896
  %17 = load i64, i64* %count.addr, align 8, !dbg !2897
  %18 = load i8*, i8** %dst.addr, align 8, !dbg !2898
  %arrayidx5 = getelementptr inbounds i8, i8* %18, i64 %17, !dbg !2898
  store i8 %16, i8* %arrayidx5, align 1, !dbg !2899
  %19 = load i64, i64* %count.addr, align 8, !dbg !2900
  %inc = add nsw i64 %19, 1, !dbg !2900
  store i64 %inc, i64* %count.addr, align 8, !dbg !2900
  br label %while.cond, !dbg !2901, !llvm.loop !2903

while.end:                                        ; preds = %while.cond
  ret void, !dbg !2904
}

; Function Attrs: nounwind uwtable
define internal void @extract_even2_mmx(i8* %src, i8* %dst0, i8* %dst1, i64 %count) #4 !dbg !2905 {
entry:
  %src.addr = alloca i8*, align 8
  %dst0.addr = alloca i8*, align 8
  %dst1.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !2908, metadata !73), !dbg !2909
  store i8* %dst0, i8** %dst0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst0.addr, metadata !2910, metadata !73), !dbg !2911
  store i8* %dst1, i8** %dst1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst1.addr, metadata !2912, metadata !73), !dbg !2913
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !2914, metadata !73), !dbg !2915
  %0 = load i64, i64* %count.addr, align 8, !dbg !2916
  %1 = load i8*, i8** %dst0.addr, align 8, !dbg !2917
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !2917
  store i8* %add.ptr, i8** %dst0.addr, align 8, !dbg !2917
  %2 = load i64, i64* %count.addr, align 8, !dbg !2918
  %3 = load i8*, i8** %dst1.addr, align 8, !dbg !2919
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 %2, !dbg !2919
  store i8* %add.ptr1, i8** %dst1.addr, align 8, !dbg !2919
  %4 = load i64, i64* %count.addr, align 8, !dbg !2920
  %mul = mul nsw i64 4, %4, !dbg !2921
  %5 = load i8*, i8** %src.addr, align 8, !dbg !2922
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %mul, !dbg !2922
  store i8* %add.ptr2, i8** %src.addr, align 8, !dbg !2922
  %6 = load i64, i64* %count.addr, align 8, !dbg !2923
  %sub = sub nsw i64 0, %6, !dbg !2924
  store i64 %sub, i64* %count.addr, align 8, !dbg !2925
  %7 = load i64, i64* %count.addr, align 8, !dbg !2926
  %cmp = icmp sle i64 %7, -8, !dbg !2928
  br i1 %cmp, label %if.then, label %if.end, !dbg !2929

if.then:                                          ; preds = %entry
  %8 = load i64, i64* %count.addr, align 8, !dbg !2930
  %add = add nsw i64 %8, 7, !dbg !2930
  store i64 %add, i64* %count.addr, align 8, !dbg !2930
  %9 = load i64, i64* %count.addr, align 8, !dbg !2932
  %10 = load i8*, i8** %src.addr, align 8, !dbg !2933
  %11 = load i8*, i8** %dst0.addr, align 8, !dbg !2934
  %12 = load i8*, i8** %dst1.addr, align 8, !dbg !2935
  %13 = call i64 asm sideeffect "pcmpeqw       %mm7, %mm7        \0A\09psrlw            $$8, %mm7        \0A\091:                                \0A\09movq -28($1, $0, 4), %mm0        \0A\09movq -20($1, $0, 4), %mm1        \0A\09movq -12($1, $0, 4), %mm2        \0A\09movq  -4($1, $0, 4), %mm3        \0A\09pand          %mm7, %mm0        \0A\09pand          %mm7, %mm1        \0A\09pand          %mm7, %mm2        \0A\09pand          %mm7, %mm3        \0A\09packuswb      %mm1, %mm0        \0A\09packuswb      %mm3, %mm2        \0A\09movq          %mm0, %mm1        \0A\09movq          %mm2, %mm3        \0A\09psrlw            $$8, %mm0        \0A\09psrlw            $$8, %mm2        \0A\09pand          %mm7, %mm1        \0A\09pand          %mm7, %mm3        \0A\09packuswb      %mm2, %mm0        \0A\09packuswb      %mm3, %mm1        \0A\09movq        %mm0,- 7($3, $0)   \0A\09movq        %mm1,- 7($2, $0)   \0A\09add              $$8, $0           \0A\09 js 1b                            \0A\09", "=r,r,r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %10, i8* %11, i8* %12, i64 %9) #5, !dbg !2932, !srcloc !2936
  store i64 %13, i64* %count.addr, align 8, !dbg !2932
  %14 = load i64, i64* %count.addr, align 8, !dbg !2937
  %sub3 = sub nsw i64 %14, 7, !dbg !2937
  store i64 %sub3, i64* %count.addr, align 8, !dbg !2937
  br label %if.end, !dbg !2938

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !2939

while.cond:                                       ; preds = %while.body, %if.end
  %15 = load i64, i64* %count.addr, align 8, !dbg !2940
  %cmp4 = icmp slt i64 %15, 0, !dbg !2942
  br i1 %cmp4, label %while.body, label %while.end, !dbg !2943

while.body:                                       ; preds = %while.cond
  %16 = load i64, i64* %count.addr, align 8, !dbg !2944
  %mul5 = mul nsw i64 4, %16, !dbg !2946
  %add6 = add nsw i64 %mul5, 0, !dbg !2947
  %17 = load i8*, i8** %src.addr, align 8, !dbg !2948
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 %add6, !dbg !2948
  %18 = load i8, i8* %arrayidx, align 1, !dbg !2948
  %19 = load i64, i64* %count.addr, align 8, !dbg !2949
  %20 = load i8*, i8** %dst0.addr, align 8, !dbg !2950
  %arrayidx7 = getelementptr inbounds i8, i8* %20, i64 %19, !dbg !2950
  store i8 %18, i8* %arrayidx7, align 1, !dbg !2951
  %21 = load i64, i64* %count.addr, align 8, !dbg !2952
  %mul8 = mul nsw i64 4, %21, !dbg !2953
  %add9 = add nsw i64 %mul8, 2, !dbg !2954
  %22 = load i8*, i8** %src.addr, align 8, !dbg !2955
  %arrayidx10 = getelementptr inbounds i8, i8* %22, i64 %add9, !dbg !2955
  %23 = load i8, i8* %arrayidx10, align 1, !dbg !2955
  %24 = load i64, i64* %count.addr, align 8, !dbg !2956
  %25 = load i8*, i8** %dst1.addr, align 8, !dbg !2957
  %arrayidx11 = getelementptr inbounds i8, i8* %25, i64 %24, !dbg !2957
  store i8 %23, i8* %arrayidx11, align 1, !dbg !2958
  %26 = load i64, i64* %count.addr, align 8, !dbg !2959
  %inc = add nsw i64 %26, 1, !dbg !2959
  store i64 %inc, i64* %count.addr, align 8, !dbg !2959
  br label %while.cond, !dbg !2960, !llvm.loop !2962

while.end:                                        ; preds = %while.cond
  ret void, !dbg !2963
}

; Function Attrs: nounwind uwtable
define internal void @extract_even_mmx(i8* %src, i8* %dst, i64 %count) #4 !dbg !2964 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !2965, metadata !73), !dbg !2966
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !2967, metadata !73), !dbg !2968
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !2969, metadata !73), !dbg !2970
  %0 = load i64, i64* %count.addr, align 8, !dbg !2971
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !2972
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !2972
  store i8* %add.ptr, i8** %dst.addr, align 8, !dbg !2972
  %2 = load i64, i64* %count.addr, align 8, !dbg !2973
  %mul = mul nsw i64 2, %2, !dbg !2974
  %3 = load i8*, i8** %src.addr, align 8, !dbg !2975
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 %mul, !dbg !2975
  store i8* %add.ptr1, i8** %src.addr, align 8, !dbg !2975
  %4 = load i64, i64* %count.addr, align 8, !dbg !2976
  %sub = sub nsw i64 0, %4, !dbg !2977
  store i64 %sub, i64* %count.addr, align 8, !dbg !2978
  %5 = load i64, i64* %count.addr, align 8, !dbg !2979
  %cmp = icmp sle i64 %5, -16, !dbg !2981
  br i1 %cmp, label %if.then, label %if.end, !dbg !2982

if.then:                                          ; preds = %entry
  %6 = load i64, i64* %count.addr, align 8, !dbg !2983
  %add = add nsw i64 %6, 15, !dbg !2983
  store i64 %add, i64* %count.addr, align 8, !dbg !2983
  %7 = load i64, i64* %count.addr, align 8, !dbg !2985
  %8 = load i8*, i8** %src.addr, align 8, !dbg !2986
  %9 = load i8*, i8** %dst.addr, align 8, !dbg !2987
  %10 = call i64 asm sideeffect "pcmpeqw       %mm7, %mm7        \0A\09psrlw            $$8, %mm7        \0A\091:                                \0A\09movq -30($1, $0, 2), %mm0        \0A\09movq -22($1, $0, 2), %mm1        \0A\09movq -14($1, $0, 2), %mm2        \0A\09movq  -6($1, $0, 2), %mm3        \0A\09pand          %mm7, %mm0        \0A\09pand          %mm7, %mm1        \0A\09pand          %mm7, %mm2        \0A\09pand          %mm7, %mm3        \0A\09packuswb      %mm1, %mm0        \0A\09packuswb      %mm3, %mm2        \0A\09movq        %mm0,-15($2, $0)   \0A\09movq        %mm2,- 7($2, $0)   \0A\09add             $$16, $0           \0A\09 js 1b                            \0A\09", "=r,r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %8, i8* %9, i64 %7) #5, !dbg !2985, !srcloc !2988
  store i64 %10, i64* %count.addr, align 8, !dbg !2985
  %11 = load i64, i64* %count.addr, align 8, !dbg !2989
  %sub2 = sub nsw i64 %11, 15, !dbg !2989
  store i64 %sub2, i64* %count.addr, align 8, !dbg !2989
  br label %if.end, !dbg !2990

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !2991

while.cond:                                       ; preds = %while.body, %if.end
  %12 = load i64, i64* %count.addr, align 8, !dbg !2992
  %cmp3 = icmp slt i64 %12, 0, !dbg !2994
  br i1 %cmp3, label %while.body, label %while.end, !dbg !2995

while.body:                                       ; preds = %while.cond
  %13 = load i64, i64* %count.addr, align 8, !dbg !2996
  %mul4 = mul nsw i64 2, %13, !dbg !2998
  %14 = load i8*, i8** %src.addr, align 8, !dbg !2999
  %arrayidx = getelementptr inbounds i8, i8* %14, i64 %mul4, !dbg !2999
  %15 = load i8, i8* %arrayidx, align 1, !dbg !2999
  %16 = load i64, i64* %count.addr, align 8, !dbg !3000
  %17 = load i8*, i8** %dst.addr, align 8, !dbg !3001
  %arrayidx5 = getelementptr inbounds i8, i8* %17, i64 %16, !dbg !3001
  store i8 %15, i8* %arrayidx5, align 1, !dbg !3002
  %18 = load i64, i64* %count.addr, align 8, !dbg !3003
  %inc = add nsw i64 %18, 1, !dbg !3003
  store i64 %inc, i64* %count.addr, align 8, !dbg !3003
  br label %while.cond, !dbg !3004, !llvm.loop !3006

while.end:                                        ; preds = %while.cond
  ret void, !dbg !3007
}

; Function Attrs: nounwind uwtable
define internal void @extract_odd2_mmx(i8* %src, i8* %dst0, i8* %dst1, i64 %count) #4 !dbg !3008 {
entry:
  %src.addr = alloca i8*, align 8
  %dst0.addr = alloca i8*, align 8
  %dst1.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !3009, metadata !73), !dbg !3010
  store i8* %dst0, i8** %dst0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst0.addr, metadata !3011, metadata !73), !dbg !3012
  store i8* %dst1, i8** %dst1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst1.addr, metadata !3013, metadata !73), !dbg !3014
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !3015, metadata !73), !dbg !3016
  %0 = load i64, i64* %count.addr, align 8, !dbg !3017
  %1 = load i8*, i8** %dst0.addr, align 8, !dbg !3018
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !3018
  store i8* %add.ptr, i8** %dst0.addr, align 8, !dbg !3018
  %2 = load i64, i64* %count.addr, align 8, !dbg !3019
  %3 = load i8*, i8** %dst1.addr, align 8, !dbg !3020
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 %2, !dbg !3020
  store i8* %add.ptr1, i8** %dst1.addr, align 8, !dbg !3020
  %4 = load i64, i64* %count.addr, align 8, !dbg !3021
  %mul = mul nsw i64 4, %4, !dbg !3022
  %5 = load i8*, i8** %src.addr, align 8, !dbg !3023
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %mul, !dbg !3023
  store i8* %add.ptr2, i8** %src.addr, align 8, !dbg !3023
  %6 = load i64, i64* %count.addr, align 8, !dbg !3024
  %sub = sub nsw i64 0, %6, !dbg !3025
  store i64 %sub, i64* %count.addr, align 8, !dbg !3026
  %7 = load i64, i64* %count.addr, align 8, !dbg !3027
  %cmp = icmp sle i64 %7, -8, !dbg !3029
  br i1 %cmp, label %if.then, label %if.end, !dbg !3030

if.then:                                          ; preds = %entry
  %8 = load i64, i64* %count.addr, align 8, !dbg !3031
  %add = add nsw i64 %8, 7, !dbg !3031
  store i64 %add, i64* %count.addr, align 8, !dbg !3031
  %9 = load i64, i64* %count.addr, align 8, !dbg !3033
  %10 = load i8*, i8** %src.addr, align 8, !dbg !3034
  %11 = load i8*, i8** %dst0.addr, align 8, !dbg !3035
  %12 = load i8*, i8** %dst1.addr, align 8, !dbg !3036
  %13 = call i64 asm sideeffect "pcmpeqw       %mm7, %mm7        \0A\09psrlw            $$8, %mm7        \0A\091:                                \0A\09movq -28($1, $0, 4), %mm0        \0A\09movq -20($1, $0, 4), %mm1        \0A\09movq -12($1, $0, 4), %mm2        \0A\09movq  -4($1, $0, 4), %mm3        \0A\09psrlw            $$8, %mm0        \0A\09psrlw            $$8, %mm1        \0A\09psrlw            $$8, %mm2        \0A\09psrlw            $$8, %mm3        \0A\09packuswb      %mm1, %mm0        \0A\09packuswb      %mm3, %mm2        \0A\09movq          %mm0, %mm1        \0A\09movq          %mm2, %mm3        \0A\09psrlw            $$8, %mm0        \0A\09psrlw            $$8, %mm2        \0A\09pand          %mm7, %mm1        \0A\09pand          %mm7, %mm3        \0A\09packuswb      %mm2, %mm0        \0A\09packuswb      %mm3, %mm1        \0A\09movq        %mm0,- 7($3, $0)   \0A\09movq        %mm1,- 7($2, $0)   \0A\09add              $$8, $0           \0A\09 js 1b                            \0A\09", "=r,r,r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %10, i8* %11, i8* %12, i64 %9) #5, !dbg !3033, !srcloc !3037
  store i64 %13, i64* %count.addr, align 8, !dbg !3033
  %14 = load i64, i64* %count.addr, align 8, !dbg !3038
  %sub3 = sub nsw i64 %14, 7, !dbg !3038
  store i64 %sub3, i64* %count.addr, align 8, !dbg !3038
  br label %if.end, !dbg !3039

if.end:                                           ; preds = %if.then, %entry
  %15 = load i8*, i8** %src.addr, align 8, !dbg !3040
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1, !dbg !3040
  store i8* %incdec.ptr, i8** %src.addr, align 8, !dbg !3040
  br label %while.cond, !dbg !3041

while.cond:                                       ; preds = %while.body, %if.end
  %16 = load i64, i64* %count.addr, align 8, !dbg !3042
  %cmp4 = icmp slt i64 %16, 0, !dbg !3044
  br i1 %cmp4, label %while.body, label %while.end, !dbg !3045

while.body:                                       ; preds = %while.cond
  %17 = load i64, i64* %count.addr, align 8, !dbg !3046
  %mul5 = mul nsw i64 4, %17, !dbg !3048
  %add6 = add nsw i64 %mul5, 0, !dbg !3049
  %18 = load i8*, i8** %src.addr, align 8, !dbg !3050
  %arrayidx = getelementptr inbounds i8, i8* %18, i64 %add6, !dbg !3050
  %19 = load i8, i8* %arrayidx, align 1, !dbg !3050
  %20 = load i64, i64* %count.addr, align 8, !dbg !3051
  %21 = load i8*, i8** %dst0.addr, align 8, !dbg !3052
  %arrayidx7 = getelementptr inbounds i8, i8* %21, i64 %20, !dbg !3052
  store i8 %19, i8* %arrayidx7, align 1, !dbg !3053
  %22 = load i64, i64* %count.addr, align 8, !dbg !3054
  %mul8 = mul nsw i64 4, %22, !dbg !3055
  %add9 = add nsw i64 %mul8, 2, !dbg !3056
  %23 = load i8*, i8** %src.addr, align 8, !dbg !3057
  %arrayidx10 = getelementptr inbounds i8, i8* %23, i64 %add9, !dbg !3057
  %24 = load i8, i8* %arrayidx10, align 1, !dbg !3057
  %25 = load i64, i64* %count.addr, align 8, !dbg !3058
  %26 = load i8*, i8** %dst1.addr, align 8, !dbg !3059
  %arrayidx11 = getelementptr inbounds i8, i8* %26, i64 %25, !dbg !3059
  store i8 %24, i8* %arrayidx11, align 1, !dbg !3060
  %27 = load i64, i64* %count.addr, align 8, !dbg !3061
  %inc = add nsw i64 %27, 1, !dbg !3061
  store i64 %inc, i64* %count.addr, align 8, !dbg !3061
  br label %while.cond, !dbg !3062, !llvm.loop !3064

while.end:                                        ; preds = %while.cond
  ret void, !dbg !3065
}

declare void @ff_rgb24toyv12_c(i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32*) #2

; Function Attrs: nounwind uwtable
define internal void @extract_odd2avg_mmx(i8* %src0, i8* %src1, i8* %dst0, i8* %dst1, i64 %count) #4 !dbg !3066 {
entry:
  %src0.addr = alloca i8*, align 8
  %src1.addr = alloca i8*, align 8
  %dst0.addr = alloca i8*, align 8
  %dst1.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src0, i8** %src0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src0.addr, metadata !3069, metadata !73), !dbg !3070
  store i8* %src1, i8** %src1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src1.addr, metadata !3071, metadata !73), !dbg !3072
  store i8* %dst0, i8** %dst0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst0.addr, metadata !3073, metadata !73), !dbg !3074
  store i8* %dst1, i8** %dst1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst1.addr, metadata !3075, metadata !73), !dbg !3076
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !3077, metadata !73), !dbg !3078
  %0 = load i64, i64* %count.addr, align 8, !dbg !3079
  %1 = load i8*, i8** %dst0.addr, align 8, !dbg !3080
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !3080
  store i8* %add.ptr, i8** %dst0.addr, align 8, !dbg !3080
  %2 = load i64, i64* %count.addr, align 8, !dbg !3081
  %3 = load i8*, i8** %dst1.addr, align 8, !dbg !3082
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 %2, !dbg !3082
  store i8* %add.ptr1, i8** %dst1.addr, align 8, !dbg !3082
  %4 = load i64, i64* %count.addr, align 8, !dbg !3083
  %mul = mul nsw i64 4, %4, !dbg !3084
  %5 = load i8*, i8** %src0.addr, align 8, !dbg !3085
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %mul, !dbg !3085
  store i8* %add.ptr2, i8** %src0.addr, align 8, !dbg !3085
  %6 = load i64, i64* %count.addr, align 8, !dbg !3086
  %mul3 = mul nsw i64 4, %6, !dbg !3087
  %7 = load i8*, i8** %src1.addr, align 8, !dbg !3088
  %add.ptr4 = getelementptr inbounds i8, i8* %7, i64 %mul3, !dbg !3088
  store i8* %add.ptr4, i8** %src1.addr, align 8, !dbg !3088
  %8 = load i64, i64* %count.addr, align 8, !dbg !3089
  %sub = sub nsw i64 0, %8, !dbg !3090
  store i64 %sub, i64* %count.addr, align 8, !dbg !3091
  %9 = load i8*, i8** %src0.addr, align 8, !dbg !3092
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1, !dbg !3092
  store i8* %incdec.ptr, i8** %src0.addr, align 8, !dbg !3092
  %10 = load i8*, i8** %src1.addr, align 8, !dbg !3093
  %incdec.ptr5 = getelementptr inbounds i8, i8* %10, i32 1, !dbg !3093
  store i8* %incdec.ptr5, i8** %src1.addr, align 8, !dbg !3093
  br label %while.cond, !dbg !3094

while.cond:                                       ; preds = %while.body, %entry
  %11 = load i64, i64* %count.addr, align 8, !dbg !3095
  %cmp = icmp slt i64 %11, 0, !dbg !3097
  br i1 %cmp, label %while.body, label %while.end, !dbg !3098

while.body:                                       ; preds = %while.cond
  %12 = load i64, i64* %count.addr, align 8, !dbg !3099
  %mul6 = mul nsw i64 4, %12, !dbg !3101
  %add = add nsw i64 %mul6, 0, !dbg !3102
  %13 = load i8*, i8** %src0.addr, align 8, !dbg !3103
  %arrayidx = getelementptr inbounds i8, i8* %13, i64 %add, !dbg !3103
  %14 = load i8, i8* %arrayidx, align 1, !dbg !3103
  %conv = zext i8 %14 to i32, !dbg !3103
  %15 = load i64, i64* %count.addr, align 8, !dbg !3104
  %mul7 = mul nsw i64 4, %15, !dbg !3105
  %add8 = add nsw i64 %mul7, 0, !dbg !3106
  %16 = load i8*, i8** %src1.addr, align 8, !dbg !3107
  %arrayidx9 = getelementptr inbounds i8, i8* %16, i64 %add8, !dbg !3107
  %17 = load i8, i8* %arrayidx9, align 1, !dbg !3107
  %conv10 = zext i8 %17 to i32, !dbg !3107
  %add11 = add nsw i32 %conv, %conv10, !dbg !3108
  %shr = ashr i32 %add11, 1, !dbg !3109
  %conv12 = trunc i32 %shr to i8, !dbg !3110
  %18 = load i64, i64* %count.addr, align 8, !dbg !3111
  %19 = load i8*, i8** %dst0.addr, align 8, !dbg !3112
  %arrayidx13 = getelementptr inbounds i8, i8* %19, i64 %18, !dbg !3112
  store i8 %conv12, i8* %arrayidx13, align 1, !dbg !3113
  %20 = load i64, i64* %count.addr, align 8, !dbg !3114
  %mul14 = mul nsw i64 4, %20, !dbg !3115
  %add15 = add nsw i64 %mul14, 2, !dbg !3116
  %21 = load i8*, i8** %src0.addr, align 8, !dbg !3117
  %arrayidx16 = getelementptr inbounds i8, i8* %21, i64 %add15, !dbg !3117
  %22 = load i8, i8* %arrayidx16, align 1, !dbg !3117
  %conv17 = zext i8 %22 to i32, !dbg !3117
  %23 = load i64, i64* %count.addr, align 8, !dbg !3118
  %mul18 = mul nsw i64 4, %23, !dbg !3119
  %add19 = add nsw i64 %mul18, 2, !dbg !3120
  %24 = load i8*, i8** %src1.addr, align 8, !dbg !3121
  %arrayidx20 = getelementptr inbounds i8, i8* %24, i64 %add19, !dbg !3121
  %25 = load i8, i8* %arrayidx20, align 1, !dbg !3121
  %conv21 = zext i8 %25 to i32, !dbg !3121
  %add22 = add nsw i32 %conv17, %conv21, !dbg !3122
  %shr23 = ashr i32 %add22, 1, !dbg !3123
  %conv24 = trunc i32 %shr23 to i8, !dbg !3124
  %26 = load i64, i64* %count.addr, align 8, !dbg !3125
  %27 = load i8*, i8** %dst1.addr, align 8, !dbg !3126
  %arrayidx25 = getelementptr inbounds i8, i8* %27, i64 %26, !dbg !3126
  store i8 %conv24, i8* %arrayidx25, align 1, !dbg !3127
  %28 = load i64, i64* %count.addr, align 8, !dbg !3128
  %inc = add nsw i64 %28, 1, !dbg !3128
  store i64 %inc, i64* %count.addr, align 8, !dbg !3128
  br label %while.cond, !dbg !3129, !llvm.loop !3131

while.end:                                        ; preds = %while.cond
  ret void, !dbg !3132
}

; Function Attrs: nounwind uwtable
define internal void @extract_even2avg_mmx(i8* %src0, i8* %src1, i8* %dst0, i8* %dst1, i64 %count) #4 !dbg !3133 {
entry:
  %src0.addr = alloca i8*, align 8
  %src1.addr = alloca i8*, align 8
  %dst0.addr = alloca i8*, align 8
  %dst1.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src0, i8** %src0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src0.addr, metadata !3134, metadata !73), !dbg !3135
  store i8* %src1, i8** %src1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src1.addr, metadata !3136, metadata !73), !dbg !3137
  store i8* %dst0, i8** %dst0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst0.addr, metadata !3138, metadata !73), !dbg !3139
  store i8* %dst1, i8** %dst1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst1.addr, metadata !3140, metadata !73), !dbg !3141
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !3142, metadata !73), !dbg !3143
  %0 = load i64, i64* %count.addr, align 8, !dbg !3144
  %1 = load i8*, i8** %dst0.addr, align 8, !dbg !3145
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !3145
  store i8* %add.ptr, i8** %dst0.addr, align 8, !dbg !3145
  %2 = load i64, i64* %count.addr, align 8, !dbg !3146
  %3 = load i8*, i8** %dst1.addr, align 8, !dbg !3147
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 %2, !dbg !3147
  store i8* %add.ptr1, i8** %dst1.addr, align 8, !dbg !3147
  %4 = load i64, i64* %count.addr, align 8, !dbg !3148
  %mul = mul nsw i64 4, %4, !dbg !3149
  %5 = load i8*, i8** %src0.addr, align 8, !dbg !3150
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %mul, !dbg !3150
  store i8* %add.ptr2, i8** %src0.addr, align 8, !dbg !3150
  %6 = load i64, i64* %count.addr, align 8, !dbg !3151
  %mul3 = mul nsw i64 4, %6, !dbg !3152
  %7 = load i8*, i8** %src1.addr, align 8, !dbg !3153
  %add.ptr4 = getelementptr inbounds i8, i8* %7, i64 %mul3, !dbg !3153
  store i8* %add.ptr4, i8** %src1.addr, align 8, !dbg !3153
  %8 = load i64, i64* %count.addr, align 8, !dbg !3154
  %sub = sub nsw i64 0, %8, !dbg !3155
  store i64 %sub, i64* %count.addr, align 8, !dbg !3156
  br label %while.cond, !dbg !3157

while.cond:                                       ; preds = %while.body, %entry
  %9 = load i64, i64* %count.addr, align 8, !dbg !3158
  %cmp = icmp slt i64 %9, 0, !dbg !3160
  br i1 %cmp, label %while.body, label %while.end, !dbg !3161

while.body:                                       ; preds = %while.cond
  %10 = load i64, i64* %count.addr, align 8, !dbg !3162
  %mul5 = mul nsw i64 4, %10, !dbg !3164
  %add = add nsw i64 %mul5, 0, !dbg !3165
  %11 = load i8*, i8** %src0.addr, align 8, !dbg !3166
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 %add, !dbg !3166
  %12 = load i8, i8* %arrayidx, align 1, !dbg !3166
  %conv = zext i8 %12 to i32, !dbg !3166
  %13 = load i64, i64* %count.addr, align 8, !dbg !3167
  %mul6 = mul nsw i64 4, %13, !dbg !3168
  %add7 = add nsw i64 %mul6, 0, !dbg !3169
  %14 = load i8*, i8** %src1.addr, align 8, !dbg !3170
  %arrayidx8 = getelementptr inbounds i8, i8* %14, i64 %add7, !dbg !3170
  %15 = load i8, i8* %arrayidx8, align 1, !dbg !3170
  %conv9 = zext i8 %15 to i32, !dbg !3170
  %add10 = add nsw i32 %conv, %conv9, !dbg !3171
  %shr = ashr i32 %add10, 1, !dbg !3172
  %conv11 = trunc i32 %shr to i8, !dbg !3173
  %16 = load i64, i64* %count.addr, align 8, !dbg !3174
  %17 = load i8*, i8** %dst0.addr, align 8, !dbg !3175
  %arrayidx12 = getelementptr inbounds i8, i8* %17, i64 %16, !dbg !3175
  store i8 %conv11, i8* %arrayidx12, align 1, !dbg !3176
  %18 = load i64, i64* %count.addr, align 8, !dbg !3177
  %mul13 = mul nsw i64 4, %18, !dbg !3178
  %add14 = add nsw i64 %mul13, 2, !dbg !3179
  %19 = load i8*, i8** %src0.addr, align 8, !dbg !3180
  %arrayidx15 = getelementptr inbounds i8, i8* %19, i64 %add14, !dbg !3180
  %20 = load i8, i8* %arrayidx15, align 1, !dbg !3180
  %conv16 = zext i8 %20 to i32, !dbg !3180
  %21 = load i64, i64* %count.addr, align 8, !dbg !3181
  %mul17 = mul nsw i64 4, %21, !dbg !3182
  %add18 = add nsw i64 %mul17, 2, !dbg !3183
  %22 = load i8*, i8** %src1.addr, align 8, !dbg !3184
  %arrayidx19 = getelementptr inbounds i8, i8* %22, i64 %add18, !dbg !3184
  %23 = load i8, i8* %arrayidx19, align 1, !dbg !3184
  %conv20 = zext i8 %23 to i32, !dbg !3184
  %add21 = add nsw i32 %conv16, %conv20, !dbg !3185
  %shr22 = ashr i32 %add21, 1, !dbg !3186
  %conv23 = trunc i32 %shr22 to i8, !dbg !3187
  %24 = load i64, i64* %count.addr, align 8, !dbg !3188
  %25 = load i8*, i8** %dst1.addr, align 8, !dbg !3189
  %arrayidx24 = getelementptr inbounds i8, i8* %25, i64 %24, !dbg !3189
  store i8 %conv23, i8* %arrayidx24, align 1, !dbg !3190
  %26 = load i64, i64* %count.addr, align 8, !dbg !3191
  %inc = add nsw i64 %26, 1, !dbg !3191
  store i64 %inc, i64* %count.addr, align 8, !dbg !3191
  br label %while.cond, !dbg !3192, !llvm.loop !3194

while.end:                                        ; preds = %while.cond
  ret void, !dbg !3195
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @planar2x_3dnow(i8* %src, i8* %dst, i32 %srcWidth, i32 %srcHeight, i32 %srcStride, i32 %dstStride) #3 !dbg !3196 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %srcWidth.addr = alloca i32, align 4
  %srcHeight.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %mmxSize = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !3199, metadata !73), !dbg !3200
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !3201, metadata !73), !dbg !3202
  store i32 %srcWidth, i32* %srcWidth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcWidth.addr, metadata !3203, metadata !73), !dbg !3204
  store i32 %srcHeight, i32* %srcHeight.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcHeight.addr, metadata !3205, metadata !73), !dbg !3206
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !3207, metadata !73), !dbg !3208
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !3209, metadata !73), !dbg !3210
  call void @llvm.dbg.declare(metadata i32* %x, metadata !3211, metadata !73), !dbg !3212
  call void @llvm.dbg.declare(metadata i32* %y, metadata !3213, metadata !73), !dbg !3214
  %0 = load i8*, i8** %src.addr, align 8, !dbg !3215
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0, !dbg !3215
  %1 = load i8, i8* %arrayidx, align 1, !dbg !3215
  %2 = load i8*, i8** %dst.addr, align 8, !dbg !3216
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 0, !dbg !3216
  store i8 %1, i8* %arrayidx1, align 1, !dbg !3217
  store i32 0, i32* %x, align 4, !dbg !3218
  br label %for.cond, !dbg !3220

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %x, align 4, !dbg !3221
  %4 = load i32, i32* %srcWidth.addr, align 4, !dbg !3224
  %sub = sub nsw i32 %4, 1, !dbg !3225
  %cmp = icmp slt i32 %3, %sub, !dbg !3226
  br i1 %cmp, label %for.body, label %for.end, !dbg !3227

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %x, align 4, !dbg !3228
  %idxprom = sext i32 %5 to i64, !dbg !3230
  %6 = load i8*, i8** %src.addr, align 8, !dbg !3230
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i64 %idxprom, !dbg !3230
  %7 = load i8, i8* %arrayidx2, align 1, !dbg !3230
  %conv = zext i8 %7 to i32, !dbg !3230
  %mul = mul nsw i32 3, %conv, !dbg !3231
  %8 = load i32, i32* %x, align 4, !dbg !3232
  %add = add nsw i32 %8, 1, !dbg !3233
  %idxprom3 = sext i32 %add to i64, !dbg !3234
  %9 = load i8*, i8** %src.addr, align 8, !dbg !3234
  %arrayidx4 = getelementptr inbounds i8, i8* %9, i64 %idxprom3, !dbg !3234
  %10 = load i8, i8* %arrayidx4, align 1, !dbg !3234
  %conv5 = zext i8 %10 to i32, !dbg !3234
  %add6 = add nsw i32 %mul, %conv5, !dbg !3235
  %shr = ashr i32 %add6, 2, !dbg !3236
  %conv7 = trunc i32 %shr to i8, !dbg !3237
  %11 = load i32, i32* %x, align 4, !dbg !3238
  %mul8 = mul nsw i32 2, %11, !dbg !3239
  %add9 = add nsw i32 %mul8, 1, !dbg !3240
  %idxprom10 = sext i32 %add9 to i64, !dbg !3241
  %12 = load i8*, i8** %dst.addr, align 8, !dbg !3241
  %arrayidx11 = getelementptr inbounds i8, i8* %12, i64 %idxprom10, !dbg !3241
  store i8 %conv7, i8* %arrayidx11, align 1, !dbg !3242
  %13 = load i32, i32* %x, align 4, !dbg !3243
  %idxprom12 = sext i32 %13 to i64, !dbg !3244
  %14 = load i8*, i8** %src.addr, align 8, !dbg !3244
  %arrayidx13 = getelementptr inbounds i8, i8* %14, i64 %idxprom12, !dbg !3244
  %15 = load i8, i8* %arrayidx13, align 1, !dbg !3244
  %conv14 = zext i8 %15 to i32, !dbg !3244
  %16 = load i32, i32* %x, align 4, !dbg !3245
  %add15 = add nsw i32 %16, 1, !dbg !3246
  %idxprom16 = sext i32 %add15 to i64, !dbg !3247
  %17 = load i8*, i8** %src.addr, align 8, !dbg !3247
  %arrayidx17 = getelementptr inbounds i8, i8* %17, i64 %idxprom16, !dbg !3247
  %18 = load i8, i8* %arrayidx17, align 1, !dbg !3247
  %conv18 = zext i8 %18 to i32, !dbg !3247
  %mul19 = mul nsw i32 3, %conv18, !dbg !3248
  %add20 = add nsw i32 %conv14, %mul19, !dbg !3249
  %shr21 = ashr i32 %add20, 2, !dbg !3250
  %conv22 = trunc i32 %shr21 to i8, !dbg !3251
  %19 = load i32, i32* %x, align 4, !dbg !3252
  %mul23 = mul nsw i32 2, %19, !dbg !3253
  %add24 = add nsw i32 %mul23, 2, !dbg !3254
  %idxprom25 = sext i32 %add24 to i64, !dbg !3255
  %20 = load i8*, i8** %dst.addr, align 8, !dbg !3255
  %arrayidx26 = getelementptr inbounds i8, i8* %20, i64 %idxprom25, !dbg !3255
  store i8 %conv22, i8* %arrayidx26, align 1, !dbg !3256
  br label %for.inc, !dbg !3257

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %x, align 4, !dbg !3258
  %inc = add nsw i32 %21, 1, !dbg !3258
  store i32 %inc, i32* %x, align 4, !dbg !3258
  br label %for.cond, !dbg !3260, !llvm.loop !3261

for.end:                                          ; preds = %for.cond
  %22 = load i32, i32* %srcWidth.addr, align 4, !dbg !3263
  %sub27 = sub nsw i32 %22, 1, !dbg !3264
  %idxprom28 = sext i32 %sub27 to i64, !dbg !3265
  %23 = load i8*, i8** %src.addr, align 8, !dbg !3265
  %arrayidx29 = getelementptr inbounds i8, i8* %23, i64 %idxprom28, !dbg !3265
  %24 = load i8, i8* %arrayidx29, align 1, !dbg !3265
  %25 = load i32, i32* %srcWidth.addr, align 4, !dbg !3266
  %mul30 = mul nsw i32 2, %25, !dbg !3267
  %sub31 = sub nsw i32 %mul30, 1, !dbg !3268
  %idxprom32 = sext i32 %sub31 to i64, !dbg !3269
  %26 = load i8*, i8** %dst.addr, align 8, !dbg !3269
  %arrayidx33 = getelementptr inbounds i8, i8* %26, i64 %idxprom32, !dbg !3269
  store i8 %24, i8* %arrayidx33, align 1, !dbg !3270
  %27 = load i32, i32* %dstStride.addr, align 4, !dbg !3271
  %28 = load i8*, i8** %dst.addr, align 8, !dbg !3272
  %idx.ext = sext i32 %27 to i64, !dbg !3272
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 %idx.ext, !dbg !3272
  store i8* %add.ptr, i8** %dst.addr, align 8, !dbg !3272
  store i32 1, i32* %y, align 4, !dbg !3273
  br label %for.cond34, !dbg !3275

for.cond34:                                       ; preds = %for.inc189, %for.end
  %29 = load i32, i32* %y, align 4, !dbg !3276
  %30 = load i32, i32* %srcHeight.addr, align 4, !dbg !3279
  %cmp35 = icmp slt i32 %29, %30, !dbg !3280
  br i1 %cmp35, label %for.body37, label %for.end191, !dbg !3281

for.body37:                                       ; preds = %for.cond34
  call void @llvm.dbg.declare(metadata i64* %mmxSize, metadata !3282, metadata !73), !dbg !3284
  %31 = load i32, i32* %srcWidth.addr, align 4, !dbg !3285
  %and = and i32 %31, -16, !dbg !3286
  %conv38 = sext i32 %and to i64, !dbg !3285
  store i64 %conv38, i64* %mmxSize, align 8, !dbg !3284
  %32 = load i64, i64* %mmxSize, align 8, !dbg !3287
  %tobool = icmp ne i64 %32, 0, !dbg !3287
  br i1 %tobool, label %if.then, label %if.else, !dbg !3289

if.then:                                          ; preds = %for.body37
  %33 = load i8*, i8** %src.addr, align 8, !dbg !3290
  %34 = load i64, i64* %mmxSize, align 8, !dbg !3292
  %add.ptr39 = getelementptr inbounds i8, i8* %33, i64 %34, !dbg !3293
  %35 = load i8*, i8** %src.addr, align 8, !dbg !3294
  %36 = load i32, i32* %srcStride.addr, align 4, !dbg !3295
  %idx.ext40 = sext i32 %36 to i64, !dbg !3296
  %add.ptr41 = getelementptr inbounds i8, i8* %35, i64 %idx.ext40, !dbg !3296
  %37 = load i64, i64* %mmxSize, align 8, !dbg !3297
  %add.ptr42 = getelementptr inbounds i8, i8* %add.ptr41, i64 %37, !dbg !3298
  %38 = load i8*, i8** %dst.addr, align 8, !dbg !3299
  %39 = load i64, i64* %mmxSize, align 8, !dbg !3300
  %mul43 = mul nsw i64 %39, 2, !dbg !3301
  %add.ptr44 = getelementptr inbounds i8, i8* %38, i64 %mul43, !dbg !3302
  %40 = load i8*, i8** %dst.addr, align 8, !dbg !3303
  %41 = load i32, i32* %dstStride.addr, align 4, !dbg !3304
  %idx.ext45 = sext i32 %41 to i64, !dbg !3305
  %add.ptr46 = getelementptr inbounds i8, i8* %40, i64 %idx.ext45, !dbg !3305
  %42 = load i64, i64* %mmxSize, align 8, !dbg !3306
  %mul47 = mul nsw i64 %42, 2, !dbg !3307
  %add.ptr48 = getelementptr inbounds i8, i8* %add.ptr46, i64 %mul47, !dbg !3308
  %43 = load i64, i64* %mmxSize, align 8, !dbg !3309
  %sub49 = sub nsw i64 0, %43, !dbg !3310
  call void asm sideeffect "mov                       $4, %rax \0A\09movq        mmx_ff, %mm0    \0A\09movq      ($0, %rax), %mm4    \0A\09movq                   %mm4, %mm2    \0A\09psllq                     $$8, %mm4    \0A\09pand                   %mm0, %mm2    \0A\09por                    %mm2, %mm4    \0A\09movq      ($1, %rax), %mm5    \0A\09movq                   %mm5, %mm3    \0A\09psllq                     $$8, %mm5    \0A\09pand                   %mm0, %mm3    \0A\09por                    %mm3, %mm5    \0A\091:                                     \0A\09movq      ($0, %rax), %mm0    \0A\09movq      ($1, %rax), %mm1    \0A\09movq     1($0, %rax), %mm2    \0A\09movq     1($1, %rax), %mm3    \0A\09pavgusb                  %mm0, %mm5    \0A\09pavgusb                  %mm0, %mm3    \0A\09pavgusb                  %mm0, %mm5    \0A\09pavgusb                  %mm0, %mm3    \0A\09pavgusb                  %mm1, %mm4    \0A\09pavgusb                  %mm1, %mm2    \0A\09pavgusb                  %mm1, %mm4    \0A\09pavgusb                  %mm1, %mm2    \0A\09movq                   %mm5, %mm7    \0A\09movq                   %mm4, %mm6    \0A\09punpcklbw              %mm3, %mm5    \0A\09punpckhbw              %mm3, %mm7    \0A\09punpcklbw              %mm2, %mm4    \0A\09punpckhbw              %mm2, %mm6    \0A\09movq                 %mm5,  ($2, %rax, 2)  \0A\09movq                 %mm7, 8($2, %rax, 2)  \0A\09movq                 %mm4,  ($3, %rax, 2)  \0A\09movq                 %mm6, 8($3, %rax, 2)  \0A\09add                       $$8, %rax            \0A\09movq    -1($0, %rax), %mm4    \0A\09movq    -1($1, %rax), %mm5    \0A\09 js                       1b           \0A\09", "r,r,r,r,imr,~{rax},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr39, i8* %add.ptr42, i8* %add.ptr44, i8* %add.ptr48, i64 %sub49) #5, !dbg !3311, !srcloc !3312
  br label %if.end, !dbg !3313

if.else:                                          ; preds = %for.body37
  store i64 1, i64* %mmxSize, align 8, !dbg !3314
  %44 = load i8*, i8** %src.addr, align 8, !dbg !3316
  %arrayidx50 = getelementptr inbounds i8, i8* %44, i64 0, !dbg !3316
  %45 = load i8, i8* %arrayidx50, align 1, !dbg !3316
  %conv51 = zext i8 %45 to i32, !dbg !3316
  %mul52 = mul nsw i32 %conv51, 3, !dbg !3317
  %46 = load i32, i32* %srcStride.addr, align 4, !dbg !3318
  %idxprom53 = sext i32 %46 to i64, !dbg !3319
  %47 = load i8*, i8** %src.addr, align 8, !dbg !3319
  %arrayidx54 = getelementptr inbounds i8, i8* %47, i64 %idxprom53, !dbg !3319
  %48 = load i8, i8* %arrayidx54, align 1, !dbg !3319
  %conv55 = zext i8 %48 to i32, !dbg !3319
  %add56 = add nsw i32 %mul52, %conv55, !dbg !3320
  %shr57 = ashr i32 %add56, 2, !dbg !3321
  %conv58 = trunc i32 %shr57 to i8, !dbg !3322
  %49 = load i8*, i8** %dst.addr, align 8, !dbg !3323
  %arrayidx59 = getelementptr inbounds i8, i8* %49, i64 0, !dbg !3323
  store i8 %conv58, i8* %arrayidx59, align 1, !dbg !3324
  %50 = load i8*, i8** %src.addr, align 8, !dbg !3325
  %arrayidx60 = getelementptr inbounds i8, i8* %50, i64 0, !dbg !3325
  %51 = load i8, i8* %arrayidx60, align 1, !dbg !3325
  %conv61 = zext i8 %51 to i32, !dbg !3325
  %52 = load i32, i32* %srcStride.addr, align 4, !dbg !3326
  %idxprom62 = sext i32 %52 to i64, !dbg !3327
  %53 = load i8*, i8** %src.addr, align 8, !dbg !3327
  %arrayidx63 = getelementptr inbounds i8, i8* %53, i64 %idxprom62, !dbg !3327
  %54 = load i8, i8* %arrayidx63, align 1, !dbg !3327
  %conv64 = zext i8 %54 to i32, !dbg !3327
  %mul65 = mul nsw i32 3, %conv64, !dbg !3328
  %add66 = add nsw i32 %conv61, %mul65, !dbg !3329
  %shr67 = ashr i32 %add66, 2, !dbg !3330
  %conv68 = trunc i32 %shr67 to i8, !dbg !3331
  %55 = load i32, i32* %dstStride.addr, align 4, !dbg !3332
  %idxprom69 = sext i32 %55 to i64, !dbg !3333
  %56 = load i8*, i8** %dst.addr, align 8, !dbg !3333
  %arrayidx70 = getelementptr inbounds i8, i8* %56, i64 %idxprom69, !dbg !3333
  store i8 %conv68, i8* %arrayidx70, align 1, !dbg !3334
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %57 = load i64, i64* %mmxSize, align 8, !dbg !3335
  %sub71 = sub nsw i64 %57, 1, !dbg !3337
  %conv72 = trunc i64 %sub71 to i32, !dbg !3335
  store i32 %conv72, i32* %x, align 4, !dbg !3338
  br label %for.cond73, !dbg !3339

for.cond73:                                       ; preds = %for.inc146, %if.end
  %58 = load i32, i32* %x, align 4, !dbg !3340
  %59 = load i32, i32* %srcWidth.addr, align 4, !dbg !3343
  %sub74 = sub nsw i32 %59, 1, !dbg !3344
  %cmp75 = icmp slt i32 %58, %sub74, !dbg !3345
  br i1 %cmp75, label %for.body77, label %for.end148, !dbg !3346

for.body77:                                       ; preds = %for.cond73
  %60 = load i32, i32* %x, align 4, !dbg !3347
  %add78 = add nsw i32 %60, 0, !dbg !3349
  %idxprom79 = sext i32 %add78 to i64, !dbg !3350
  %61 = load i8*, i8** %src.addr, align 8, !dbg !3350
  %arrayidx80 = getelementptr inbounds i8, i8* %61, i64 %idxprom79, !dbg !3350
  %62 = load i8, i8* %arrayidx80, align 1, !dbg !3350
  %conv81 = zext i8 %62 to i32, !dbg !3350
  %mul82 = mul nsw i32 3, %conv81, !dbg !3351
  %63 = load i32, i32* %x, align 4, !dbg !3352
  %64 = load i32, i32* %srcStride.addr, align 4, !dbg !3353
  %add83 = add nsw i32 %63, %64, !dbg !3354
  %add84 = add nsw i32 %add83, 1, !dbg !3355
  %idxprom85 = sext i32 %add84 to i64, !dbg !3356
  %65 = load i8*, i8** %src.addr, align 8, !dbg !3356
  %arrayidx86 = getelementptr inbounds i8, i8* %65, i64 %idxprom85, !dbg !3356
  %66 = load i8, i8* %arrayidx86, align 1, !dbg !3356
  %conv87 = zext i8 %66 to i32, !dbg !3356
  %add88 = add nsw i32 %mul82, %conv87, !dbg !3357
  %shr89 = ashr i32 %add88, 2, !dbg !3358
  %conv90 = trunc i32 %shr89 to i8, !dbg !3359
  %67 = load i32, i32* %x, align 4, !dbg !3360
  %mul91 = mul nsw i32 2, %67, !dbg !3361
  %add92 = add nsw i32 %mul91, 1, !dbg !3362
  %idxprom93 = sext i32 %add92 to i64, !dbg !3363
  %68 = load i8*, i8** %dst.addr, align 8, !dbg !3363
  %arrayidx94 = getelementptr inbounds i8, i8* %68, i64 %idxprom93, !dbg !3363
  store i8 %conv90, i8* %arrayidx94, align 1, !dbg !3364
  %69 = load i32, i32* %x, align 4, !dbg !3365
  %add95 = add nsw i32 %69, 0, !dbg !3366
  %idxprom96 = sext i32 %add95 to i64, !dbg !3367
  %70 = load i8*, i8** %src.addr, align 8, !dbg !3367
  %arrayidx97 = getelementptr inbounds i8, i8* %70, i64 %idxprom96, !dbg !3367
  %71 = load i8, i8* %arrayidx97, align 1, !dbg !3367
  %conv98 = zext i8 %71 to i32, !dbg !3367
  %72 = load i32, i32* %x, align 4, !dbg !3368
  %73 = load i32, i32* %srcStride.addr, align 4, !dbg !3369
  %add99 = add nsw i32 %72, %73, !dbg !3370
  %add100 = add nsw i32 %add99, 1, !dbg !3371
  %idxprom101 = sext i32 %add100 to i64, !dbg !3372
  %74 = load i8*, i8** %src.addr, align 8, !dbg !3372
  %arrayidx102 = getelementptr inbounds i8, i8* %74, i64 %idxprom101, !dbg !3372
  %75 = load i8, i8* %arrayidx102, align 1, !dbg !3372
  %conv103 = zext i8 %75 to i32, !dbg !3372
  %mul104 = mul nsw i32 3, %conv103, !dbg !3373
  %add105 = add nsw i32 %conv98, %mul104, !dbg !3374
  %shr106 = ashr i32 %add105, 2, !dbg !3375
  %conv107 = trunc i32 %shr106 to i8, !dbg !3376
  %76 = load i32, i32* %x, align 4, !dbg !3377
  %mul108 = mul nsw i32 2, %76, !dbg !3378
  %77 = load i32, i32* %dstStride.addr, align 4, !dbg !3379
  %add109 = add nsw i32 %mul108, %77, !dbg !3380
  %add110 = add nsw i32 %add109, 2, !dbg !3381
  %idxprom111 = sext i32 %add110 to i64, !dbg !3382
  %78 = load i8*, i8** %dst.addr, align 8, !dbg !3382
  %arrayidx112 = getelementptr inbounds i8, i8* %78, i64 %idxprom111, !dbg !3382
  store i8 %conv107, i8* %arrayidx112, align 1, !dbg !3383
  %79 = load i32, i32* %x, align 4, !dbg !3384
  %add113 = add nsw i32 %79, 1, !dbg !3385
  %idxprom114 = sext i32 %add113 to i64, !dbg !3386
  %80 = load i8*, i8** %src.addr, align 8, !dbg !3386
  %arrayidx115 = getelementptr inbounds i8, i8* %80, i64 %idxprom114, !dbg !3386
  %81 = load i8, i8* %arrayidx115, align 1, !dbg !3386
  %conv116 = zext i8 %81 to i32, !dbg !3386
  %82 = load i32, i32* %x, align 4, !dbg !3387
  %83 = load i32, i32* %srcStride.addr, align 4, !dbg !3388
  %add117 = add nsw i32 %82, %83, !dbg !3389
  %idxprom118 = sext i32 %add117 to i64, !dbg !3390
  %84 = load i8*, i8** %src.addr, align 8, !dbg !3390
  %arrayidx119 = getelementptr inbounds i8, i8* %84, i64 %idxprom118, !dbg !3390
  %85 = load i8, i8* %arrayidx119, align 1, !dbg !3390
  %conv120 = zext i8 %85 to i32, !dbg !3390
  %mul121 = mul nsw i32 3, %conv120, !dbg !3391
  %add122 = add nsw i32 %conv116, %mul121, !dbg !3392
  %shr123 = ashr i32 %add122, 2, !dbg !3393
  %conv124 = trunc i32 %shr123 to i8, !dbg !3394
  %86 = load i32, i32* %x, align 4, !dbg !3395
  %mul125 = mul nsw i32 2, %86, !dbg !3396
  %87 = load i32, i32* %dstStride.addr, align 4, !dbg !3397
  %add126 = add nsw i32 %mul125, %87, !dbg !3398
  %add127 = add nsw i32 %add126, 1, !dbg !3399
  %idxprom128 = sext i32 %add127 to i64, !dbg !3400
  %88 = load i8*, i8** %dst.addr, align 8, !dbg !3400
  %arrayidx129 = getelementptr inbounds i8, i8* %88, i64 %idxprom128, !dbg !3400
  store i8 %conv124, i8* %arrayidx129, align 1, !dbg !3401
  %89 = load i32, i32* %x, align 4, !dbg !3402
  %add130 = add nsw i32 %89, 1, !dbg !3403
  %idxprom131 = sext i32 %add130 to i64, !dbg !3404
  %90 = load i8*, i8** %src.addr, align 8, !dbg !3404
  %arrayidx132 = getelementptr inbounds i8, i8* %90, i64 %idxprom131, !dbg !3404
  %91 = load i8, i8* %arrayidx132, align 1, !dbg !3404
  %conv133 = zext i8 %91 to i32, !dbg !3404
  %mul134 = mul nsw i32 3, %conv133, !dbg !3405
  %92 = load i32, i32* %x, align 4, !dbg !3406
  %93 = load i32, i32* %srcStride.addr, align 4, !dbg !3407
  %add135 = add nsw i32 %92, %93, !dbg !3408
  %idxprom136 = sext i32 %add135 to i64, !dbg !3409
  %94 = load i8*, i8** %src.addr, align 8, !dbg !3409
  %arrayidx137 = getelementptr inbounds i8, i8* %94, i64 %idxprom136, !dbg !3409
  %95 = load i8, i8* %arrayidx137, align 1, !dbg !3409
  %conv138 = zext i8 %95 to i32, !dbg !3409
  %add139 = add nsw i32 %mul134, %conv138, !dbg !3410
  %shr140 = ashr i32 %add139, 2, !dbg !3411
  %conv141 = trunc i32 %shr140 to i8, !dbg !3412
  %96 = load i32, i32* %x, align 4, !dbg !3413
  %mul142 = mul nsw i32 2, %96, !dbg !3414
  %add143 = add nsw i32 %mul142, 2, !dbg !3415
  %idxprom144 = sext i32 %add143 to i64, !dbg !3416
  %97 = load i8*, i8** %dst.addr, align 8, !dbg !3416
  %arrayidx145 = getelementptr inbounds i8, i8* %97, i64 %idxprom144, !dbg !3416
  store i8 %conv141, i8* %arrayidx145, align 1, !dbg !3417
  br label %for.inc146, !dbg !3418

for.inc146:                                       ; preds = %for.body77
  %98 = load i32, i32* %x, align 4, !dbg !3419
  %inc147 = add nsw i32 %98, 1, !dbg !3419
  store i32 %inc147, i32* %x, align 4, !dbg !3419
  br label %for.cond73, !dbg !3421, !llvm.loop !3422

for.end148:                                       ; preds = %for.cond73
  %99 = load i32, i32* %srcWidth.addr, align 4, !dbg !3424
  %sub149 = sub nsw i32 %99, 1, !dbg !3425
  %idxprom150 = sext i32 %sub149 to i64, !dbg !3426
  %100 = load i8*, i8** %src.addr, align 8, !dbg !3426
  %arrayidx151 = getelementptr inbounds i8, i8* %100, i64 %idxprom150, !dbg !3426
  %101 = load i8, i8* %arrayidx151, align 1, !dbg !3426
  %conv152 = zext i8 %101 to i32, !dbg !3426
  %mul153 = mul nsw i32 3, %conv152, !dbg !3427
  %102 = load i32, i32* %srcWidth.addr, align 4, !dbg !3428
  %sub154 = sub nsw i32 %102, 1, !dbg !3429
  %103 = load i32, i32* %srcStride.addr, align 4, !dbg !3430
  %add155 = add nsw i32 %sub154, %103, !dbg !3431
  %idxprom156 = sext i32 %add155 to i64, !dbg !3432
  %104 = load i8*, i8** %src.addr, align 8, !dbg !3432
  %arrayidx157 = getelementptr inbounds i8, i8* %104, i64 %idxprom156, !dbg !3432
  %105 = load i8, i8* %arrayidx157, align 1, !dbg !3432
  %conv158 = zext i8 %105 to i32, !dbg !3432
  %add159 = add nsw i32 %mul153, %conv158, !dbg !3433
  %shr160 = ashr i32 %add159, 2, !dbg !3434
  %conv161 = trunc i32 %shr160 to i8, !dbg !3435
  %106 = load i32, i32* %srcWidth.addr, align 4, !dbg !3436
  %mul162 = mul nsw i32 %106, 2, !dbg !3437
  %sub163 = sub nsw i32 %mul162, 1, !dbg !3438
  %idxprom164 = sext i32 %sub163 to i64, !dbg !3439
  %107 = load i8*, i8** %dst.addr, align 8, !dbg !3439
  %arrayidx165 = getelementptr inbounds i8, i8* %107, i64 %idxprom164, !dbg !3439
  store i8 %conv161, i8* %arrayidx165, align 1, !dbg !3440
  %108 = load i32, i32* %srcWidth.addr, align 4, !dbg !3441
  %sub166 = sub nsw i32 %108, 1, !dbg !3442
  %idxprom167 = sext i32 %sub166 to i64, !dbg !3443
  %109 = load i8*, i8** %src.addr, align 8, !dbg !3443
  %arrayidx168 = getelementptr inbounds i8, i8* %109, i64 %idxprom167, !dbg !3443
  %110 = load i8, i8* %arrayidx168, align 1, !dbg !3443
  %conv169 = zext i8 %110 to i32, !dbg !3443
  %111 = load i32, i32* %srcWidth.addr, align 4, !dbg !3444
  %sub170 = sub nsw i32 %111, 1, !dbg !3445
  %112 = load i32, i32* %srcStride.addr, align 4, !dbg !3446
  %add171 = add nsw i32 %sub170, %112, !dbg !3447
  %idxprom172 = sext i32 %add171 to i64, !dbg !3448
  %113 = load i8*, i8** %src.addr, align 8, !dbg !3448
  %arrayidx173 = getelementptr inbounds i8, i8* %113, i64 %idxprom172, !dbg !3448
  %114 = load i8, i8* %arrayidx173, align 1, !dbg !3448
  %conv174 = zext i8 %114 to i32, !dbg !3448
  %mul175 = mul nsw i32 3, %conv174, !dbg !3449
  %add176 = add nsw i32 %conv169, %mul175, !dbg !3450
  %shr177 = ashr i32 %add176, 2, !dbg !3451
  %conv178 = trunc i32 %shr177 to i8, !dbg !3452
  %115 = load i32, i32* %srcWidth.addr, align 4, !dbg !3453
  %mul179 = mul nsw i32 %115, 2, !dbg !3454
  %sub180 = sub nsw i32 %mul179, 1, !dbg !3455
  %116 = load i32, i32* %dstStride.addr, align 4, !dbg !3456
  %add181 = add nsw i32 %sub180, %116, !dbg !3457
  %idxprom182 = sext i32 %add181 to i64, !dbg !3458
  %117 = load i8*, i8** %dst.addr, align 8, !dbg !3458
  %arrayidx183 = getelementptr inbounds i8, i8* %117, i64 %idxprom182, !dbg !3458
  store i8 %conv178, i8* %arrayidx183, align 1, !dbg !3459
  %118 = load i32, i32* %dstStride.addr, align 4, !dbg !3460
  %mul184 = mul nsw i32 %118, 2, !dbg !3461
  %119 = load i8*, i8** %dst.addr, align 8, !dbg !3462
  %idx.ext185 = sext i32 %mul184 to i64, !dbg !3462
  %add.ptr186 = getelementptr inbounds i8, i8* %119, i64 %idx.ext185, !dbg !3462
  store i8* %add.ptr186, i8** %dst.addr, align 8, !dbg !3462
  %120 = load i32, i32* %srcStride.addr, align 4, !dbg !3463
  %121 = load i8*, i8** %src.addr, align 8, !dbg !3464
  %idx.ext187 = sext i32 %120 to i64, !dbg !3464
  %add.ptr188 = getelementptr inbounds i8, i8* %121, i64 %idx.ext187, !dbg !3464
  store i8* %add.ptr188, i8** %src.addr, align 8, !dbg !3464
  br label %for.inc189, !dbg !3465

for.inc189:                                       ; preds = %for.end148
  %122 = load i32, i32* %y, align 4, !dbg !3466
  %inc190 = add nsw i32 %122, 1, !dbg !3466
  store i32 %inc190, i32* %y, align 4, !dbg !3466
  br label %for.cond34, !dbg !3468, !llvm.loop !3469

for.end191:                                       ; preds = %for.cond34
  %123 = load i8*, i8** %src.addr, align 8, !dbg !3471
  %arrayidx192 = getelementptr inbounds i8, i8* %123, i64 0, !dbg !3471
  %124 = load i8, i8* %arrayidx192, align 1, !dbg !3471
  %125 = load i8*, i8** %dst.addr, align 8, !dbg !3472
  %arrayidx193 = getelementptr inbounds i8, i8* %125, i64 0, !dbg !3472
  store i8 %124, i8* %arrayidx193, align 1, !dbg !3473
  store i32 0, i32* %x, align 4, !dbg !3474
  br label %for.cond194, !dbg !3476

for.cond194:                                      ; preds = %for.inc229, %for.end191
  %126 = load i32, i32* %x, align 4, !dbg !3477
  %127 = load i32, i32* %srcWidth.addr, align 4, !dbg !3480
  %sub195 = sub nsw i32 %127, 1, !dbg !3481
  %cmp196 = icmp slt i32 %126, %sub195, !dbg !3482
  br i1 %cmp196, label %for.body198, label %for.end231, !dbg !3483

for.body198:                                      ; preds = %for.cond194
  %128 = load i32, i32* %x, align 4, !dbg !3484
  %idxprom199 = sext i32 %128 to i64, !dbg !3486
  %129 = load i8*, i8** %src.addr, align 8, !dbg !3486
  %arrayidx200 = getelementptr inbounds i8, i8* %129, i64 %idxprom199, !dbg !3486
  %130 = load i8, i8* %arrayidx200, align 1, !dbg !3486
  %conv201 = zext i8 %130 to i32, !dbg !3486
  %mul202 = mul nsw i32 3, %conv201, !dbg !3487
  %131 = load i32, i32* %x, align 4, !dbg !3488
  %add203 = add nsw i32 %131, 1, !dbg !3489
  %idxprom204 = sext i32 %add203 to i64, !dbg !3490
  %132 = load i8*, i8** %src.addr, align 8, !dbg !3490
  %arrayidx205 = getelementptr inbounds i8, i8* %132, i64 %idxprom204, !dbg !3490
  %133 = load i8, i8* %arrayidx205, align 1, !dbg !3490
  %conv206 = zext i8 %133 to i32, !dbg !3490
  %add207 = add nsw i32 %mul202, %conv206, !dbg !3491
  %shr208 = ashr i32 %add207, 2, !dbg !3492
  %conv209 = trunc i32 %shr208 to i8, !dbg !3493
  %134 = load i32, i32* %x, align 4, !dbg !3494
  %mul210 = mul nsw i32 2, %134, !dbg !3495
  %add211 = add nsw i32 %mul210, 1, !dbg !3496
  %idxprom212 = sext i32 %add211 to i64, !dbg !3497
  %135 = load i8*, i8** %dst.addr, align 8, !dbg !3497
  %arrayidx213 = getelementptr inbounds i8, i8* %135, i64 %idxprom212, !dbg !3497
  store i8 %conv209, i8* %arrayidx213, align 1, !dbg !3498
  %136 = load i32, i32* %x, align 4, !dbg !3499
  %idxprom214 = sext i32 %136 to i64, !dbg !3500
  %137 = load i8*, i8** %src.addr, align 8, !dbg !3500
  %arrayidx215 = getelementptr inbounds i8, i8* %137, i64 %idxprom214, !dbg !3500
  %138 = load i8, i8* %arrayidx215, align 1, !dbg !3500
  %conv216 = zext i8 %138 to i32, !dbg !3500
  %139 = load i32, i32* %x, align 4, !dbg !3501
  %add217 = add nsw i32 %139, 1, !dbg !3502
  %idxprom218 = sext i32 %add217 to i64, !dbg !3503
  %140 = load i8*, i8** %src.addr, align 8, !dbg !3503
  %arrayidx219 = getelementptr inbounds i8, i8* %140, i64 %idxprom218, !dbg !3503
  %141 = load i8, i8* %arrayidx219, align 1, !dbg !3503
  %conv220 = zext i8 %141 to i32, !dbg !3503
  %mul221 = mul nsw i32 3, %conv220, !dbg !3504
  %add222 = add nsw i32 %conv216, %mul221, !dbg !3505
  %shr223 = ashr i32 %add222, 2, !dbg !3506
  %conv224 = trunc i32 %shr223 to i8, !dbg !3507
  %142 = load i32, i32* %x, align 4, !dbg !3508
  %mul225 = mul nsw i32 2, %142, !dbg !3509
  %add226 = add nsw i32 %mul225, 2, !dbg !3510
  %idxprom227 = sext i32 %add226 to i64, !dbg !3511
  %143 = load i8*, i8** %dst.addr, align 8, !dbg !3511
  %arrayidx228 = getelementptr inbounds i8, i8* %143, i64 %idxprom227, !dbg !3511
  store i8 %conv224, i8* %arrayidx228, align 1, !dbg !3512
  br label %for.inc229, !dbg !3513

for.inc229:                                       ; preds = %for.body198
  %144 = load i32, i32* %x, align 4, !dbg !3514
  %inc230 = add nsw i32 %144, 1, !dbg !3514
  store i32 %inc230, i32* %x, align 4, !dbg !3514
  br label %for.cond194, !dbg !3516, !llvm.loop !3517

for.end231:                                       ; preds = %for.cond194
  %145 = load i32, i32* %srcWidth.addr, align 4, !dbg !3519
  %sub232 = sub nsw i32 %145, 1, !dbg !3520
  %idxprom233 = sext i32 %sub232 to i64, !dbg !3521
  %146 = load i8*, i8** %src.addr, align 8, !dbg !3521
  %arrayidx234 = getelementptr inbounds i8, i8* %146, i64 %idxprom233, !dbg !3521
  %147 = load i8, i8* %arrayidx234, align 1, !dbg !3521
  %148 = load i32, i32* %srcWidth.addr, align 4, !dbg !3522
  %mul235 = mul nsw i32 2, %148, !dbg !3523
  %sub236 = sub nsw i32 %mul235, 1, !dbg !3524
  %idxprom237 = sext i32 %sub236 to i64, !dbg !3525
  %149 = load i8*, i8** %dst.addr, align 8, !dbg !3525
  %arrayidx238 = getelementptr inbounds i8, i8* %149, i64 %idxprom237, !dbg !3525
  store i8 %147, i8* %arrayidx238, align 1, !dbg !3526
  call void asm sideeffect "femms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !3527, !srcloc !3528
  ret void, !dbg !3529
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24toyv12_3dnow(i8* %src, i8* %ydst, i8* %udst, i8* %vdst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride, i32* %rgb2yuv) #3 !dbg !3530 {
entry:
  %src.addr = alloca i8*, align 8
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %rgb2yuv.addr = alloca i32*, align 8
  %y = alloca i32, align 4
  %chromWidth = alloca i64, align 8
  %i = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !3531, metadata !73), !dbg !3532
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !3533, metadata !73), !dbg !3534
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !3535, metadata !73), !dbg !3536
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !3537, metadata !73), !dbg !3538
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !3539, metadata !73), !dbg !3540
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !3541, metadata !73), !dbg !3542
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !3543, metadata !73), !dbg !3544
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !3545, metadata !73), !dbg !3546
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !3547, metadata !73), !dbg !3548
  store i32* %rgb2yuv, i32** %rgb2yuv.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %rgb2yuv.addr, metadata !3549, metadata !73), !dbg !3550
  call void @llvm.dbg.declare(metadata i32* %y, metadata !3551, metadata !73), !dbg !3552
  call void @llvm.dbg.declare(metadata i64* %chromWidth, metadata !3553, metadata !73), !dbg !3554
  %0 = load i32, i32* %width.addr, align 4, !dbg !3555
  %shr = ashr i32 %0, 1, !dbg !3556
  %conv = sext i32 %shr to i64, !dbg !3555
  store i64 %conv, i64* %chromWidth, align 8, !dbg !3554
  %1 = load i32, i32* %height.addr, align 4, !dbg !3557
  %cmp = icmp sgt i32 %1, 2, !dbg !3559
  br i1 %cmp, label %if.then, label %if.end, !dbg !3560

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %src.addr, align 8, !dbg !3561
  %3 = load i8*, i8** %ydst.addr, align 8, !dbg !3563
  %4 = load i8*, i8** %udst.addr, align 8, !dbg !3564
  %5 = load i8*, i8** %vdst.addr, align 8, !dbg !3565
  %6 = load i32, i32* %width.addr, align 4, !dbg !3566
  %7 = load i32, i32* %lumStride.addr, align 4, !dbg !3567
  %8 = load i32, i32* %chromStride.addr, align 4, !dbg !3568
  %9 = load i32, i32* %srcStride.addr, align 4, !dbg !3569
  %10 = load i32*, i32** %rgb2yuv.addr, align 8, !dbg !3570
  call void @ff_rgb24toyv12_c(i8* %2, i8* %3, i8* %4, i8* %5, i32 %6, i32 2, i32 %7, i32 %8, i32 %9, i32* %10), !dbg !3571
  %11 = load i32, i32* %srcStride.addr, align 4, !dbg !3572
  %mul = mul nsw i32 2, %11, !dbg !3573
  %12 = load i8*, i8** %src.addr, align 8, !dbg !3574
  %idx.ext = sext i32 %mul to i64, !dbg !3574
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %idx.ext, !dbg !3574
  store i8* %add.ptr, i8** %src.addr, align 8, !dbg !3574
  %13 = load i32, i32* %lumStride.addr, align 4, !dbg !3575
  %mul2 = mul nsw i32 2, %13, !dbg !3576
  %14 = load i8*, i8** %ydst.addr, align 8, !dbg !3577
  %idx.ext3 = sext i32 %mul2 to i64, !dbg !3577
  %add.ptr4 = getelementptr inbounds i8, i8* %14, i64 %idx.ext3, !dbg !3577
  store i8* %add.ptr4, i8** %ydst.addr, align 8, !dbg !3577
  %15 = load i32, i32* %chromStride.addr, align 4, !dbg !3578
  %16 = load i8*, i8** %udst.addr, align 8, !dbg !3579
  %idx.ext5 = sext i32 %15 to i64, !dbg !3579
  %add.ptr6 = getelementptr inbounds i8, i8* %16, i64 %idx.ext5, !dbg !3579
  store i8* %add.ptr6, i8** %udst.addr, align 8, !dbg !3579
  %17 = load i32, i32* %chromStride.addr, align 4, !dbg !3580
  %18 = load i8*, i8** %vdst.addr, align 8, !dbg !3581
  %idx.ext7 = sext i32 %17 to i64, !dbg !3581
  %add.ptr8 = getelementptr inbounds i8, i8* %18, i64 %idx.ext7, !dbg !3581
  store i8* %add.ptr8, i8** %vdst.addr, align 8, !dbg !3581
  %19 = load i32, i32* %height.addr, align 4, !dbg !3582
  %sub = sub nsw i32 %19, 2, !dbg !3582
  store i32 %sub, i32* %height.addr, align 4, !dbg !3582
  br label %if.end, !dbg !3583

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %y, align 4, !dbg !3584
  br label %for.cond, !dbg !3586

for.cond:                                         ; preds = %for.inc46, %if.end
  %20 = load i32, i32* %y, align 4, !dbg !3587
  %21 = load i32, i32* %height.addr, align 4, !dbg !3590
  %sub9 = sub nsw i32 %21, 2, !dbg !3591
  %cmp10 = icmp slt i32 %20, %sub9, !dbg !3592
  br i1 %cmp10, label %for.body, label %for.end47, !dbg !3593

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3594, metadata !73), !dbg !3596
  store i32 0, i32* %i, align 4, !dbg !3597
  br label %for.cond12, !dbg !3599

for.cond12:                                       ; preds = %for.inc, %for.body
  %22 = load i32, i32* %i, align 4, !dbg !3600
  %cmp13 = icmp slt i32 %22, 2, !dbg !3603
  br i1 %cmp13, label %for.body15, label %for.end, !dbg !3604

for.body15:                                       ; preds = %for.cond12
  %23 = load i8*, i8** %src.addr, align 8, !dbg !3605
  %24 = load i32, i32* %width.addr, align 4, !dbg !3607
  %mul16 = mul nsw i32 %24, 3, !dbg !3608
  %idx.ext17 = sext i32 %mul16 to i64, !dbg !3609
  %add.ptr18 = getelementptr inbounds i8, i8* %23, i64 %idx.ext17, !dbg !3609
  %25 = load i8*, i8** %ydst.addr, align 8, !dbg !3610
  %26 = load i32, i32* %width.addr, align 4, !dbg !3611
  %idx.ext19 = sext i32 %26 to i64, !dbg !3612
  %add.ptr20 = getelementptr inbounds i8, i8* %25, i64 %idx.ext19, !dbg !3612
  %27 = load i32, i32* %width.addr, align 4, !dbg !3613
  %sub21 = sub nsw i32 0, %27, !dbg !3614
  %conv22 = sext i32 %sub21 to i64, !dbg !3615
  %28 = load i32*, i32** %rgb2yuv.addr, align 8, !dbg !3616
  call void asm sideeffect "mov                        $2, %rax\0A\09movq          16*4+16*32($3), %mm6       \0A\09movq       ff_w1111, %mm5       \0A\09pxor                    %mm7, %mm7       \0A\09lea (%rax, %rax, 2), %rdx \0A\09.p2align                    4              \0A\091:                                         \0A\09prefetch 64($0, %rdx)              \0A\09movd       ($0, %rdx), %mm0       \0A\09movd      3($0, %rdx), %mm1       \0A\09punpcklbw               %mm7, %mm0       \0A\09punpcklbw               %mm7, %mm1       \0A\09movd      6($0, %rdx), %mm2       \0A\09movd      9($0, %rdx), %mm3       \0A\09punpcklbw               %mm7, %mm2       \0A\09punpcklbw               %mm7, %mm3       \0A\09pmaddwd                 %mm6, %mm0       \0A\09pmaddwd                 %mm6, %mm1       \0A\09pmaddwd                 %mm6, %mm2       \0A\09pmaddwd                 %mm6, %mm3       \0A\09psrad                      $$8, %mm0       \0A\09psrad                      $$8, %mm1       \0A\09psrad                      $$8, %mm2       \0A\09psrad                      $$8, %mm3       \0A\09packssdw                %mm1, %mm0       \0A\09packssdw                %mm3, %mm2       \0A\09pmaddwd                 %mm5, %mm0       \0A\09pmaddwd                 %mm5, %mm2       \0A\09packssdw                %mm2, %mm0       \0A\09psraw                      $$7, %mm0       \0A\09movd     12($0, %rdx), %mm4       \0A\09movd     15($0, %rdx), %mm1       \0A\09punpcklbw               %mm7, %mm4       \0A\09punpcklbw               %mm7, %mm1       \0A\09movd     18($0, %rdx), %mm2       \0A\09movd     21($0, %rdx), %mm3       \0A\09punpcklbw               %mm7, %mm2       \0A\09punpcklbw               %mm7, %mm3       \0A\09pmaddwd                 %mm6, %mm4       \0A\09pmaddwd                 %mm6, %mm1       \0A\09pmaddwd                 %mm6, %mm2       \0A\09pmaddwd                 %mm6, %mm3       \0A\09psrad                      $$8, %mm4       \0A\09psrad                      $$8, %mm1       \0A\09psrad                      $$8, %mm2       \0A\09psrad                      $$8, %mm3       \0A\09packssdw                %mm1, %mm4       \0A\09packssdw                %mm3, %mm2       \0A\09pmaddwd                 %mm5, %mm4       \0A\09pmaddwd                 %mm5, %mm2       \0A\09add                       $$24, %rdx\0A\09packssdw                %mm2, %mm4       \0A\09psraw                      $$7, %mm4       \0A\09packuswb                %mm4, %mm0       \0A\09paddusb ff_bgr2YOffset, %mm0    \0A\09movq                  %mm0, ($1, %rax) \0A\09add                        $$8,      %rax  \0A\09 js                        1b                     \0A\09", "r,r,imr,r,~{rax},~{rdx},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr18, i8* %add.ptr20, i64 %conv22, i32* %28) #5, !dbg !3617, !srcloc !3618
  %29 = load i32, i32* %lumStride.addr, align 4, !dbg !3619
  %30 = load i8*, i8** %ydst.addr, align 8, !dbg !3620
  %idx.ext23 = sext i32 %29 to i64, !dbg !3620
  %add.ptr24 = getelementptr inbounds i8, i8* %30, i64 %idx.ext23, !dbg !3620
  store i8* %add.ptr24, i8** %ydst.addr, align 8, !dbg !3620
  %31 = load i32, i32* %srcStride.addr, align 4, !dbg !3621
  %32 = load i8*, i8** %src.addr, align 8, !dbg !3622
  %idx.ext25 = sext i32 %31 to i64, !dbg !3622
  %add.ptr26 = getelementptr inbounds i8, i8* %32, i64 %idx.ext25, !dbg !3622
  store i8* %add.ptr26, i8** %src.addr, align 8, !dbg !3622
  br label %for.inc, !dbg !3623

for.inc:                                          ; preds = %for.body15
  %33 = load i32, i32* %i, align 4, !dbg !3624
  %inc = add nsw i32 %33, 1, !dbg !3624
  store i32 %inc, i32* %i, align 4, !dbg !3624
  br label %for.cond12, !dbg !3626, !llvm.loop !3627

for.end:                                          ; preds = %for.cond12
  %34 = load i32, i32* %srcStride.addr, align 4, !dbg !3629
  %mul27 = mul nsw i32 %34, 2, !dbg !3630
  %35 = load i8*, i8** %src.addr, align 8, !dbg !3631
  %idx.ext28 = sext i32 %mul27 to i64, !dbg !3631
  %idx.neg = sub i64 0, %idx.ext28, !dbg !3631
  %add.ptr29 = getelementptr inbounds i8, i8* %35, i64 %idx.neg, !dbg !3631
  store i8* %add.ptr29, i8** %src.addr, align 8, !dbg !3631
  %36 = load i8*, i8** %src.addr, align 8, !dbg !3632
  %37 = load i64, i64* %chromWidth, align 8, !dbg !3633
  %mul30 = mul nsw i64 %37, 6, !dbg !3634
  %add.ptr31 = getelementptr inbounds i8, i8* %36, i64 %mul30, !dbg !3635
  %38 = load i8*, i8** %src.addr, align 8, !dbg !3636
  %39 = load i32, i32* %srcStride.addr, align 4, !dbg !3637
  %idx.ext32 = sext i32 %39 to i64, !dbg !3638
  %add.ptr33 = getelementptr inbounds i8, i8* %38, i64 %idx.ext32, !dbg !3638
  %40 = load i64, i64* %chromWidth, align 8, !dbg !3639
  %mul34 = mul nsw i64 %40, 6, !dbg !3640
  %add.ptr35 = getelementptr inbounds i8, i8* %add.ptr33, i64 %mul34, !dbg !3641
  %41 = load i8*, i8** %udst.addr, align 8, !dbg !3642
  %42 = load i64, i64* %chromWidth, align 8, !dbg !3643
  %add.ptr36 = getelementptr inbounds i8, i8* %41, i64 %42, !dbg !3644
  %43 = load i8*, i8** %vdst.addr, align 8, !dbg !3645
  %44 = load i64, i64* %chromWidth, align 8, !dbg !3646
  %add.ptr37 = getelementptr inbounds i8, i8* %43, i64 %44, !dbg !3647
  %45 = load i64, i64* %chromWidth, align 8, !dbg !3648
  %sub38 = sub nsw i64 0, %45, !dbg !3649
  %46 = load i32*, i32** %rgb2yuv.addr, align 8, !dbg !3650
  call void asm sideeffect "mov                        $4, %rax\0A\09movq       ff_w1111, %mm5       \0A\09movq          16*4+16*33($5), %mm6       \0A\09pxor                    %mm7, %mm7       \0A\09lea (%rax, %rax, 2), %rdx \0A\09add              %rdx, %rdx\0A\09.p2align                    4              \0A\091:                                         \0A\09prefetch 64($0, %rdx)              \0A\09prefetch 64($1, %rdx)              \0A\09movq       ($0, %rdx), %mm0       \0A\09movq       ($1, %rdx), %mm1       \0A\09movq      6($0, %rdx), %mm2       \0A\09movq      6($1, %rdx), %mm3       \0A\09pavgusb                   %mm1, %mm0       \0A\09pavgusb                   %mm3, %mm2       \0A\09movq                    %mm0, %mm1       \0A\09movq                    %mm2, %mm3       \0A\09psrlq                     $$24, %mm0       \0A\09psrlq                     $$24, %mm2       \0A\09pavgusb                   %mm1, %mm0       \0A\09pavgusb                   %mm3, %mm2       \0A\09punpcklbw               %mm7, %mm0       \0A\09punpcklbw               %mm7, %mm2       \0A\09movq          16*4+16*34($5), %mm1       \0A\09movq          16*4+16*34($5), %mm3       \0A\09pmaddwd                 %mm0, %mm1       \0A\09pmaddwd                 %mm2, %mm3       \0A\09pmaddwd                 %mm6, %mm0       \0A\09pmaddwd                 %mm6, %mm2       \0A\09psrad                      $$8, %mm0       \0A\09psrad                      $$8, %mm1       \0A\09psrad                      $$8, %mm2       \0A\09psrad                      $$8, %mm3       \0A\09packssdw                %mm2, %mm0       \0A\09packssdw                %mm3, %mm1       \0A\09pmaddwd                 %mm5, %mm0       \0A\09pmaddwd                 %mm5, %mm1       \0A\09packssdw                %mm1, %mm0       \0A\09psraw                      $$7, %mm0       \0A\09movq     12($0, %rdx), %mm4       \0A\09movq     12($1, %rdx), %mm1       \0A\09movq     18($0, %rdx), %mm2       \0A\09movq     18($1, %rdx), %mm3       \0A\09pavgusb                   %mm1, %mm4       \0A\09pavgusb                   %mm3, %mm2       \0A\09movq                    %mm4, %mm1       \0A\09movq                    %mm2, %mm3       \0A\09psrlq                     $$24, %mm4       \0A\09psrlq                     $$24, %mm2       \0A\09pavgusb                   %mm1, %mm4       \0A\09pavgusb                   %mm3, %mm2       \0A\09punpcklbw               %mm7, %mm4       \0A\09punpcklbw               %mm7, %mm2       \0A\09movq          16*4+16*34($5), %mm1       \0A\09movq          16*4+16*34($5), %mm3       \0A\09pmaddwd                 %mm4, %mm1       \0A\09pmaddwd                 %mm2, %mm3       \0A\09pmaddwd                 %mm6, %mm4       \0A\09pmaddwd                 %mm6, %mm2       \0A\09psrad                      $$8, %mm4       \0A\09psrad                      $$8, %mm1       \0A\09psrad                      $$8, %mm2       \0A\09psrad                      $$8, %mm3       \0A\09packssdw                %mm2, %mm4       \0A\09packssdw                %mm3, %mm1       \0A\09pmaddwd                 %mm5, %mm4       \0A\09pmaddwd                 %mm5, %mm1       \0A\09add                       $$24, %rdx\0A\09packssdw                %mm1, %mm4       \0A\09psraw                      $$7, %mm4       \0A\09movq                    %mm0, %mm1           \0A\09punpckldq               %mm4, %mm0           \0A\09punpckhdq               %mm4, %mm1           \0A\09packsswb                %mm1, %mm0           \0A\09paddb ff_bgr2UVOffset, %mm0         \0A\09movd                    %mm0, ($2, %rax) \0A\09punpckhdq               %mm0, %mm0              \0A\09movd                    %mm0, ($3, %rax) \0A\09add                        $$4, %rax       \0A\09 js                        1b              \0A\09", "r,r,r,r,imr,r,~{rax},~{rdx},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr31, i8* %add.ptr35, i8* %add.ptr36, i8* %add.ptr37, i64 %sub38, i32* %46) #5, !dbg !3651, !srcloc !3652
  %47 = load i32, i32* %chromStride.addr, align 4, !dbg !3653
  %48 = load i8*, i8** %udst.addr, align 8, !dbg !3654
  %idx.ext39 = sext i32 %47 to i64, !dbg !3654
  %add.ptr40 = getelementptr inbounds i8, i8* %48, i64 %idx.ext39, !dbg !3654
  store i8* %add.ptr40, i8** %udst.addr, align 8, !dbg !3654
  %49 = load i32, i32* %chromStride.addr, align 4, !dbg !3655
  %50 = load i8*, i8** %vdst.addr, align 8, !dbg !3656
  %idx.ext41 = sext i32 %49 to i64, !dbg !3656
  %add.ptr42 = getelementptr inbounds i8, i8* %50, i64 %idx.ext41, !dbg !3656
  store i8* %add.ptr42, i8** %vdst.addr, align 8, !dbg !3656
  %51 = load i32, i32* %srcStride.addr, align 4, !dbg !3657
  %mul43 = mul nsw i32 %51, 2, !dbg !3658
  %52 = load i8*, i8** %src.addr, align 8, !dbg !3659
  %idx.ext44 = sext i32 %mul43 to i64, !dbg !3659
  %add.ptr45 = getelementptr inbounds i8, i8* %52, i64 %idx.ext44, !dbg !3659
  store i8* %add.ptr45, i8** %src.addr, align 8, !dbg !3659
  br label %for.inc46, !dbg !3660

for.inc46:                                        ; preds = %for.end
  %53 = load i32, i32* %y, align 4, !dbg !3661
  %add = add nsw i32 %53, 2, !dbg !3661
  store i32 %add, i32* %y, align 4, !dbg !3661
  br label %for.cond, !dbg !3663, !llvm.loop !3664

for.end47:                                        ; preds = %for.cond
  call void asm sideeffect "femms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !3666, !srcloc !3667
  %54 = load i8*, i8** %src.addr, align 8, !dbg !3668
  %55 = load i8*, i8** %ydst.addr, align 8, !dbg !3669
  %56 = load i8*, i8** %udst.addr, align 8, !dbg !3670
  %57 = load i8*, i8** %vdst.addr, align 8, !dbg !3671
  %58 = load i32, i32* %width.addr, align 4, !dbg !3672
  %59 = load i32, i32* %height.addr, align 4, !dbg !3673
  %60 = load i32, i32* %y, align 4, !dbg !3674
  %sub48 = sub nsw i32 %59, %60, !dbg !3675
  %61 = load i32, i32* %lumStride.addr, align 4, !dbg !3676
  %62 = load i32, i32* %chromStride.addr, align 4, !dbg !3677
  %63 = load i32, i32* %srcStride.addr, align 4, !dbg !3678
  %64 = load i32*, i32** %rgb2yuv.addr, align 8, !dbg !3679
  call void @ff_rgb24toyv12_c(i8* %54, i8* %55, i8* %56, i8* %57, i32 %58, i32 %sub48, i32 %61, i32 %62, i32 %63, i32* %64), !dbg !3680
  ret void, !dbg !3681
}

; Function Attrs: nounwind uwtable
define internal void @yuyvtoyuv420_3dnow(i8* %ydst, i8* %udst, i8* %vdst, i8* %src, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride) #4 !dbg !3682 {
entry:
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i32, align 4
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !3683, metadata !73), !dbg !3684
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !3685, metadata !73), !dbg !3686
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !3687, metadata !73), !dbg !3688
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !3689, metadata !73), !dbg !3690
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !3691, metadata !73), !dbg !3692
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !3693, metadata !73), !dbg !3694
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !3695, metadata !73), !dbg !3696
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !3697, metadata !73), !dbg !3698
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !3699, metadata !73), !dbg !3700
  call void @llvm.dbg.declare(metadata i32* %y, metadata !3701, metadata !73), !dbg !3702
  call void @llvm.dbg.declare(metadata i32* %chromWidth, metadata !3703, metadata !73), !dbg !3704
  %0 = load i32, i32* %width.addr, align 4, !dbg !3705
  %add = add nsw i32 %0, 2, !dbg !3706
  %sub = sub nsw i32 %add, 1, !dbg !3707
  %shr = ashr i32 %sub, 1, !dbg !3708
  store i32 %shr, i32* %chromWidth, align 4, !dbg !3704
  store i32 0, i32* %y, align 4, !dbg !3709
  br label %for.cond, !dbg !3711

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !3712
  %2 = load i32, i32* %height.addr, align 4, !dbg !3715
  %cmp = icmp slt i32 %1, %2, !dbg !3716
  br i1 %cmp, label %for.body, label %for.end, !dbg !3717

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 8, !dbg !3718
  %4 = load i8*, i8** %ydst.addr, align 8, !dbg !3720
  %5 = load i32, i32* %width.addr, align 4, !dbg !3721
  %conv = sext i32 %5 to i64, !dbg !3721
  call void @extract_even_3dnow(i8* %3, i8* %4, i64 %conv), !dbg !3722
  %6 = load i32, i32* %y, align 4, !dbg !3723
  %and = and i32 %6, 1, !dbg !3725
  %tobool = icmp ne i32 %and, 0, !dbg !3725
  br i1 %tobool, label %if.then, label %if.end, !dbg !3726

if.then:                                          ; preds = %for.body
  %7 = load i8*, i8** %src.addr, align 8, !dbg !3727
  %8 = load i32, i32* %srcStride.addr, align 4, !dbg !3729
  %idx.ext = sext i32 %8 to i64, !dbg !3730
  %idx.neg = sub i64 0, %idx.ext, !dbg !3730
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.neg, !dbg !3730
  %9 = load i8*, i8** %src.addr, align 8, !dbg !3731
  %10 = load i8*, i8** %udst.addr, align 8, !dbg !3732
  %11 = load i8*, i8** %vdst.addr, align 8, !dbg !3733
  %12 = load i32, i32* %chromWidth, align 4, !dbg !3734
  %conv1 = sext i32 %12 to i64, !dbg !3734
  call void @extract_odd2avg_3dnow(i8* %add.ptr, i8* %9, i8* %10, i8* %11, i64 %conv1), !dbg !3735
  %13 = load i32, i32* %chromStride.addr, align 4, !dbg !3736
  %14 = load i8*, i8** %udst.addr, align 8, !dbg !3737
  %idx.ext2 = sext i32 %13 to i64, !dbg !3737
  %add.ptr3 = getelementptr inbounds i8, i8* %14, i64 %idx.ext2, !dbg !3737
  store i8* %add.ptr3, i8** %udst.addr, align 8, !dbg !3737
  %15 = load i32, i32* %chromStride.addr, align 4, !dbg !3738
  %16 = load i8*, i8** %vdst.addr, align 8, !dbg !3739
  %idx.ext4 = sext i32 %15 to i64, !dbg !3739
  %add.ptr5 = getelementptr inbounds i8, i8* %16, i64 %idx.ext4, !dbg !3739
  store i8* %add.ptr5, i8** %vdst.addr, align 8, !dbg !3739
  br label %if.end, !dbg !3740

if.end:                                           ; preds = %if.then, %for.body
  %17 = load i32, i32* %srcStride.addr, align 4, !dbg !3741
  %18 = load i8*, i8** %src.addr, align 8, !dbg !3742
  %idx.ext6 = sext i32 %17 to i64, !dbg !3742
  %add.ptr7 = getelementptr inbounds i8, i8* %18, i64 %idx.ext6, !dbg !3742
  store i8* %add.ptr7, i8** %src.addr, align 8, !dbg !3742
  %19 = load i32, i32* %lumStride.addr, align 4, !dbg !3743
  %20 = load i8*, i8** %ydst.addr, align 8, !dbg !3744
  %idx.ext8 = sext i32 %19 to i64, !dbg !3744
  %add.ptr9 = getelementptr inbounds i8, i8* %20, i64 %idx.ext8, !dbg !3744
  store i8* %add.ptr9, i8** %ydst.addr, align 8, !dbg !3744
  br label %for.inc, !dbg !3745

for.inc:                                          ; preds = %if.end
  %21 = load i32, i32* %y, align 4, !dbg !3746
  %inc = add nsw i32 %21, 1, !dbg !3746
  store i32 %inc, i32* %y, align 4, !dbg !3746
  br label %for.cond, !dbg !3748, !llvm.loop !3749

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "femms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !3751, !srcloc !3752
  ret void, !dbg !3753
}

; Function Attrs: nounwind uwtable
define internal void @uyvytoyuv420_3dnow(i8* %ydst, i8* %udst, i8* %vdst, i8* %src, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride) #4 !dbg !3754 {
entry:
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i32, align 4
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !3755, metadata !73), !dbg !3756
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !3757, metadata !73), !dbg !3758
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !3759, metadata !73), !dbg !3760
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !3761, metadata !73), !dbg !3762
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !3763, metadata !73), !dbg !3764
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !3765, metadata !73), !dbg !3766
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !3767, metadata !73), !dbg !3768
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !3769, metadata !73), !dbg !3770
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !3771, metadata !73), !dbg !3772
  call void @llvm.dbg.declare(metadata i32* %y, metadata !3773, metadata !73), !dbg !3774
  call void @llvm.dbg.declare(metadata i32* %chromWidth, metadata !3775, metadata !73), !dbg !3776
  %0 = load i32, i32* %width.addr, align 4, !dbg !3777
  %add = add nsw i32 %0, 2, !dbg !3778
  %sub = sub nsw i32 %add, 1, !dbg !3779
  %shr = ashr i32 %sub, 1, !dbg !3780
  store i32 %shr, i32* %chromWidth, align 4, !dbg !3776
  store i32 0, i32* %y, align 4, !dbg !3781
  br label %for.cond, !dbg !3783

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !3784
  %2 = load i32, i32* %height.addr, align 4, !dbg !3787
  %cmp = icmp slt i32 %1, %2, !dbg !3788
  br i1 %cmp, label %for.body, label %for.end, !dbg !3789

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 8, !dbg !3790
  %4 = load i8*, i8** %ydst.addr, align 8, !dbg !3792
  %5 = load i32, i32* %width.addr, align 4, !dbg !3793
  %conv = sext i32 %5 to i64, !dbg !3793
  call void @extract_odd_3dnow(i8* %3, i8* %4, i64 %conv), !dbg !3794
  %6 = load i32, i32* %y, align 4, !dbg !3795
  %and = and i32 %6, 1, !dbg !3797
  %tobool = icmp ne i32 %and, 0, !dbg !3797
  br i1 %tobool, label %if.then, label %if.end, !dbg !3798

if.then:                                          ; preds = %for.body
  %7 = load i8*, i8** %src.addr, align 8, !dbg !3799
  %8 = load i32, i32* %srcStride.addr, align 4, !dbg !3801
  %idx.ext = sext i32 %8 to i64, !dbg !3802
  %idx.neg = sub i64 0, %idx.ext, !dbg !3802
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.neg, !dbg !3802
  %9 = load i8*, i8** %src.addr, align 8, !dbg !3803
  %10 = load i8*, i8** %udst.addr, align 8, !dbg !3804
  %11 = load i8*, i8** %vdst.addr, align 8, !dbg !3805
  %12 = load i32, i32* %chromWidth, align 4, !dbg !3806
  %conv1 = sext i32 %12 to i64, !dbg !3806
  call void @extract_even2avg_3dnow(i8* %add.ptr, i8* %9, i8* %10, i8* %11, i64 %conv1), !dbg !3807
  %13 = load i32, i32* %chromStride.addr, align 4, !dbg !3808
  %14 = load i8*, i8** %udst.addr, align 8, !dbg !3809
  %idx.ext2 = sext i32 %13 to i64, !dbg !3809
  %add.ptr3 = getelementptr inbounds i8, i8* %14, i64 %idx.ext2, !dbg !3809
  store i8* %add.ptr3, i8** %udst.addr, align 8, !dbg !3809
  %15 = load i32, i32* %chromStride.addr, align 4, !dbg !3810
  %16 = load i8*, i8** %vdst.addr, align 8, !dbg !3811
  %idx.ext4 = sext i32 %15 to i64, !dbg !3811
  %add.ptr5 = getelementptr inbounds i8, i8* %16, i64 %idx.ext4, !dbg !3811
  store i8* %add.ptr5, i8** %vdst.addr, align 8, !dbg !3811
  br label %if.end, !dbg !3812

if.end:                                           ; preds = %if.then, %for.body
  %17 = load i32, i32* %srcStride.addr, align 4, !dbg !3813
  %18 = load i8*, i8** %src.addr, align 8, !dbg !3814
  %idx.ext6 = sext i32 %17 to i64, !dbg !3814
  %add.ptr7 = getelementptr inbounds i8, i8* %18, i64 %idx.ext6, !dbg !3814
  store i8* %add.ptr7, i8** %src.addr, align 8, !dbg !3814
  %19 = load i32, i32* %lumStride.addr, align 4, !dbg !3815
  %20 = load i8*, i8** %ydst.addr, align 8, !dbg !3816
  %idx.ext8 = sext i32 %19 to i64, !dbg !3816
  %add.ptr9 = getelementptr inbounds i8, i8* %20, i64 %idx.ext8, !dbg !3816
  store i8* %add.ptr9, i8** %ydst.addr, align 8, !dbg !3816
  br label %for.inc, !dbg !3817

for.inc:                                          ; preds = %if.end
  %21 = load i32, i32* %y, align 4, !dbg !3818
  %inc = add nsw i32 %21, 1, !dbg !3818
  store i32 %inc, i32* %y, align 4, !dbg !3818
  br label %for.cond, !dbg !3820, !llvm.loop !3821

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "femms       \0A\09 # nop     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !3823, !srcloc !3824
  ret void, !dbg !3825
}

; Function Attrs: nounwind uwtable
define internal void @extract_even_3dnow(i8* %src, i8* %dst, i64 %count) #4 !dbg !3826 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !3827, metadata !73), !dbg !3828
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !3829, metadata !73), !dbg !3830
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !3831, metadata !73), !dbg !3832
  %0 = load i64, i64* %count.addr, align 8, !dbg !3833
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !3834
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !3834
  store i8* %add.ptr, i8** %dst.addr, align 8, !dbg !3834
  %2 = load i64, i64* %count.addr, align 8, !dbg !3835
  %mul = mul nsw i64 2, %2, !dbg !3836
  %3 = load i8*, i8** %src.addr, align 8, !dbg !3837
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 %mul, !dbg !3837
  store i8* %add.ptr1, i8** %src.addr, align 8, !dbg !3837
  %4 = load i64, i64* %count.addr, align 8, !dbg !3838
  %sub = sub nsw i64 0, %4, !dbg !3839
  store i64 %sub, i64* %count.addr, align 8, !dbg !3840
  %5 = load i64, i64* %count.addr, align 8, !dbg !3841
  %cmp = icmp sle i64 %5, -16, !dbg !3843
  br i1 %cmp, label %if.then, label %if.end, !dbg !3844

if.then:                                          ; preds = %entry
  %6 = load i64, i64* %count.addr, align 8, !dbg !3845
  %add = add nsw i64 %6, 15, !dbg !3845
  store i64 %add, i64* %count.addr, align 8, !dbg !3845
  %7 = load i64, i64* %count.addr, align 8, !dbg !3847
  %8 = load i8*, i8** %src.addr, align 8, !dbg !3848
  %9 = load i8*, i8** %dst.addr, align 8, !dbg !3849
  %10 = call i64 asm sideeffect "pcmpeqw       %mm7, %mm7        \0A\09psrlw            $$8, %mm7        \0A\091:                                \0A\09movq -30($1, $0, 2), %mm0        \0A\09movq -22($1, $0, 2), %mm1        \0A\09movq -14($1, $0, 2), %mm2        \0A\09movq  -6($1, $0, 2), %mm3        \0A\09pand          %mm7, %mm0        \0A\09pand          %mm7, %mm1        \0A\09pand          %mm7, %mm2        \0A\09pand          %mm7, %mm3        \0A\09packuswb      %mm1, %mm0        \0A\09packuswb      %mm3, %mm2        \0A\09movq        %mm0,-15($2, $0)   \0A\09movq        %mm2,- 7($2, $0)   \0A\09add             $$16, $0           \0A\09 js 1b                            \0A\09", "=r,r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %8, i8* %9, i64 %7) #5, !dbg !3847, !srcloc !3850
  store i64 %10, i64* %count.addr, align 8, !dbg !3847
  %11 = load i64, i64* %count.addr, align 8, !dbg !3851
  %sub2 = sub nsw i64 %11, 15, !dbg !3851
  store i64 %sub2, i64* %count.addr, align 8, !dbg !3851
  br label %if.end, !dbg !3852

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !3853

while.cond:                                       ; preds = %while.body, %if.end
  %12 = load i64, i64* %count.addr, align 8, !dbg !3854
  %cmp3 = icmp slt i64 %12, 0, !dbg !3856
  br i1 %cmp3, label %while.body, label %while.end, !dbg !3857

while.body:                                       ; preds = %while.cond
  %13 = load i64, i64* %count.addr, align 8, !dbg !3858
  %mul4 = mul nsw i64 2, %13, !dbg !3860
  %14 = load i8*, i8** %src.addr, align 8, !dbg !3861
  %arrayidx = getelementptr inbounds i8, i8* %14, i64 %mul4, !dbg !3861
  %15 = load i8, i8* %arrayidx, align 1, !dbg !3861
  %16 = load i64, i64* %count.addr, align 8, !dbg !3862
  %17 = load i8*, i8** %dst.addr, align 8, !dbg !3863
  %arrayidx5 = getelementptr inbounds i8, i8* %17, i64 %16, !dbg !3863
  store i8 %15, i8* %arrayidx5, align 1, !dbg !3864
  %18 = load i64, i64* %count.addr, align 8, !dbg !3865
  %inc = add nsw i64 %18, 1, !dbg !3865
  store i64 %inc, i64* %count.addr, align 8, !dbg !3865
  br label %while.cond, !dbg !3866, !llvm.loop !3868

while.end:                                        ; preds = %while.cond
  ret void, !dbg !3869
}

; Function Attrs: nounwind uwtable
define internal void @extract_odd2avg_3dnow(i8* %src0, i8* %src1, i8* %dst0, i8* %dst1, i64 %count) #4 !dbg !3870 {
entry:
  %src0.addr = alloca i8*, align 8
  %src1.addr = alloca i8*, align 8
  %dst0.addr = alloca i8*, align 8
  %dst1.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src0, i8** %src0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src0.addr, metadata !3871, metadata !73), !dbg !3872
  store i8* %src1, i8** %src1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src1.addr, metadata !3873, metadata !73), !dbg !3874
  store i8* %dst0, i8** %dst0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst0.addr, metadata !3875, metadata !73), !dbg !3876
  store i8* %dst1, i8** %dst1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst1.addr, metadata !3877, metadata !73), !dbg !3878
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !3879, metadata !73), !dbg !3880
  %0 = load i64, i64* %count.addr, align 8, !dbg !3881
  %1 = load i8*, i8** %dst0.addr, align 8, !dbg !3882
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !3882
  store i8* %add.ptr, i8** %dst0.addr, align 8, !dbg !3882
  %2 = load i64, i64* %count.addr, align 8, !dbg !3883
  %3 = load i8*, i8** %dst1.addr, align 8, !dbg !3884
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 %2, !dbg !3884
  store i8* %add.ptr1, i8** %dst1.addr, align 8, !dbg !3884
  %4 = load i64, i64* %count.addr, align 8, !dbg !3885
  %mul = mul nsw i64 4, %4, !dbg !3886
  %5 = load i8*, i8** %src0.addr, align 8, !dbg !3887
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %mul, !dbg !3887
  store i8* %add.ptr2, i8** %src0.addr, align 8, !dbg !3887
  %6 = load i64, i64* %count.addr, align 8, !dbg !3888
  %mul3 = mul nsw i64 4, %6, !dbg !3889
  %7 = load i8*, i8** %src1.addr, align 8, !dbg !3890
  %add.ptr4 = getelementptr inbounds i8, i8* %7, i64 %mul3, !dbg !3890
  store i8* %add.ptr4, i8** %src1.addr, align 8, !dbg !3890
  %8 = load i64, i64* %count.addr, align 8, !dbg !3891
  %sub = sub nsw i64 0, %8, !dbg !3892
  store i64 %sub, i64* %count.addr, align 8, !dbg !3893
  %9 = load i64, i64* %count.addr, align 8, !dbg !3894
  %cmp = icmp sle i64 %9, -8, !dbg !3896
  br i1 %cmp, label %if.then, label %if.end, !dbg !3897

if.then:                                          ; preds = %entry
  %10 = load i64, i64* %count.addr, align 8, !dbg !3898
  %add = add nsw i64 %10, 7, !dbg !3898
  store i64 %add, i64* %count.addr, align 8, !dbg !3898
  %11 = load i64, i64* %count.addr, align 8, !dbg !3900
  %12 = load i8*, i8** %src0.addr, align 8, !dbg !3901
  %13 = load i8*, i8** %src1.addr, align 8, !dbg !3902
  %14 = load i8*, i8** %dst0.addr, align 8, !dbg !3903
  %15 = load i8*, i8** %dst1.addr, align 8, !dbg !3904
  %16 = call i64 asm sideeffect "pcmpeqw        %mm7, %mm7        \0A\09psrlw             $$8, %mm7        \0A\091:                                \0A\09movq  -28($1, $0, 4), %mm0        \0A\09movq  -20($1, $0, 4), %mm1        \0A\09movq  -12($1, $0, 4), %mm2        \0A\09movq   -4($1, $0, 4), %mm3        \0A\09pavgusb -28($2, $0, 4), %mm0        \0A\09pavgusb -20($2, $0, 4), %mm1        \0A\09pavgusb -12($2, $0, 4), %mm2        \0A\09pavgusb - 4($2, $0, 4), %mm3        \0A\09psrlw             $$8, %mm0        \0A\09psrlw             $$8, %mm1        \0A\09psrlw             $$8, %mm2        \0A\09psrlw             $$8, %mm3        \0A\09packuswb       %mm1, %mm0        \0A\09packuswb       %mm3, %mm2        \0A\09movq           %mm0, %mm1        \0A\09movq           %mm2, %mm3        \0A\09psrlw             $$8, %mm0        \0A\09psrlw             $$8, %mm2        \0A\09pand           %mm7, %mm1        \0A\09pand           %mm7, %mm3        \0A\09packuswb       %mm2, %mm0        \0A\09packuswb       %mm3, %mm1        \0A\09movq         %mm0,- 7($4, $0)   \0A\09movq         %mm1,- 7($3, $0)   \0A\09add               $$8, $0           \0A\09 js 1b                            \0A\09", "=r,r,r,r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %12, i8* %13, i8* %14, i8* %15, i64 %11) #5, !dbg !3900, !srcloc !3905
  store i64 %16, i64* %count.addr, align 8, !dbg !3900
  %17 = load i64, i64* %count.addr, align 8, !dbg !3906
  %sub5 = sub nsw i64 %17, 7, !dbg !3906
  store i64 %sub5, i64* %count.addr, align 8, !dbg !3906
  br label %if.end, !dbg !3907

if.end:                                           ; preds = %if.then, %entry
  %18 = load i8*, i8** %src0.addr, align 8, !dbg !3908
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 1, !dbg !3908
  store i8* %incdec.ptr, i8** %src0.addr, align 8, !dbg !3908
  %19 = load i8*, i8** %src1.addr, align 8, !dbg !3909
  %incdec.ptr6 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !3909
  store i8* %incdec.ptr6, i8** %src1.addr, align 8, !dbg !3909
  br label %while.cond, !dbg !3910

while.cond:                                       ; preds = %while.body, %if.end
  %20 = load i64, i64* %count.addr, align 8, !dbg !3911
  %cmp7 = icmp slt i64 %20, 0, !dbg !3913
  br i1 %cmp7, label %while.body, label %while.end, !dbg !3914

while.body:                                       ; preds = %while.cond
  %21 = load i64, i64* %count.addr, align 8, !dbg !3915
  %mul8 = mul nsw i64 4, %21, !dbg !3917
  %add9 = add nsw i64 %mul8, 0, !dbg !3918
  %22 = load i8*, i8** %src0.addr, align 8, !dbg !3919
  %arrayidx = getelementptr inbounds i8, i8* %22, i64 %add9, !dbg !3919
  %23 = load i8, i8* %arrayidx, align 1, !dbg !3919
  %conv = zext i8 %23 to i32, !dbg !3919
  %24 = load i64, i64* %count.addr, align 8, !dbg !3920
  %mul10 = mul nsw i64 4, %24, !dbg !3921
  %add11 = add nsw i64 %mul10, 0, !dbg !3922
  %25 = load i8*, i8** %src1.addr, align 8, !dbg !3923
  %arrayidx12 = getelementptr inbounds i8, i8* %25, i64 %add11, !dbg !3923
  %26 = load i8, i8* %arrayidx12, align 1, !dbg !3923
  %conv13 = zext i8 %26 to i32, !dbg !3923
  %add14 = add nsw i32 %conv, %conv13, !dbg !3924
  %shr = ashr i32 %add14, 1, !dbg !3925
  %conv15 = trunc i32 %shr to i8, !dbg !3926
  %27 = load i64, i64* %count.addr, align 8, !dbg !3927
  %28 = load i8*, i8** %dst0.addr, align 8, !dbg !3928
  %arrayidx16 = getelementptr inbounds i8, i8* %28, i64 %27, !dbg !3928
  store i8 %conv15, i8* %arrayidx16, align 1, !dbg !3929
  %29 = load i64, i64* %count.addr, align 8, !dbg !3930
  %mul17 = mul nsw i64 4, %29, !dbg !3931
  %add18 = add nsw i64 %mul17, 2, !dbg !3932
  %30 = load i8*, i8** %src0.addr, align 8, !dbg !3933
  %arrayidx19 = getelementptr inbounds i8, i8* %30, i64 %add18, !dbg !3933
  %31 = load i8, i8* %arrayidx19, align 1, !dbg !3933
  %conv20 = zext i8 %31 to i32, !dbg !3933
  %32 = load i64, i64* %count.addr, align 8, !dbg !3934
  %mul21 = mul nsw i64 4, %32, !dbg !3935
  %add22 = add nsw i64 %mul21, 2, !dbg !3936
  %33 = load i8*, i8** %src1.addr, align 8, !dbg !3937
  %arrayidx23 = getelementptr inbounds i8, i8* %33, i64 %add22, !dbg !3937
  %34 = load i8, i8* %arrayidx23, align 1, !dbg !3937
  %conv24 = zext i8 %34 to i32, !dbg !3937
  %add25 = add nsw i32 %conv20, %conv24, !dbg !3938
  %shr26 = ashr i32 %add25, 1, !dbg !3939
  %conv27 = trunc i32 %shr26 to i8, !dbg !3940
  %35 = load i64, i64* %count.addr, align 8, !dbg !3941
  %36 = load i8*, i8** %dst1.addr, align 8, !dbg !3942
  %arrayidx28 = getelementptr inbounds i8, i8* %36, i64 %35, !dbg !3942
  store i8 %conv27, i8* %arrayidx28, align 1, !dbg !3943
  %37 = load i64, i64* %count.addr, align 8, !dbg !3944
  %inc = add nsw i64 %37, 1, !dbg !3944
  store i64 %inc, i64* %count.addr, align 8, !dbg !3944
  br label %while.cond, !dbg !3945, !llvm.loop !3947

while.end:                                        ; preds = %while.cond
  ret void, !dbg !3948
}

; Function Attrs: nounwind uwtable
define internal void @extract_odd_3dnow(i8* %src, i8* %dst, i64 %count) #4 !dbg !3949 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !3950, metadata !73), !dbg !3951
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !3952, metadata !73), !dbg !3953
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !3954, metadata !73), !dbg !3955
  %0 = load i8*, i8** %src.addr, align 8, !dbg !3956
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1, !dbg !3956
  store i8* %incdec.ptr, i8** %src.addr, align 8, !dbg !3956
  %1 = load i64, i64* %count.addr, align 8, !dbg !3957
  %2 = load i8*, i8** %dst.addr, align 8, !dbg !3958
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %1, !dbg !3958
  store i8* %add.ptr, i8** %dst.addr, align 8, !dbg !3958
  %3 = load i64, i64* %count.addr, align 8, !dbg !3959
  %mul = mul nsw i64 2, %3, !dbg !3960
  %4 = load i8*, i8** %src.addr, align 8, !dbg !3961
  %add.ptr1 = getelementptr inbounds i8, i8* %4, i64 %mul, !dbg !3961
  store i8* %add.ptr1, i8** %src.addr, align 8, !dbg !3961
  %5 = load i64, i64* %count.addr, align 8, !dbg !3962
  %sub = sub nsw i64 0, %5, !dbg !3963
  store i64 %sub, i64* %count.addr, align 8, !dbg !3964
  %6 = load i64, i64* %count.addr, align 8, !dbg !3965
  %cmp = icmp slt i64 %6, -16, !dbg !3967
  br i1 %cmp, label %if.then, label %if.end, !dbg !3968

if.then:                                          ; preds = %entry
  %7 = load i64, i64* %count.addr, align 8, !dbg !3969
  %add = add nsw i64 %7, 16, !dbg !3969
  store i64 %add, i64* %count.addr, align 8, !dbg !3969
  %8 = load i64, i64* %count.addr, align 8, !dbg !3971
  %9 = load i8*, i8** %src.addr, align 8, !dbg !3972
  %10 = load i8*, i8** %dst.addr, align 8, !dbg !3973
  %11 = call i64 asm sideeffect "pcmpeqw       %mm7, %mm7        \0A\09psrlw            $$8, %mm7        \0A\091:                                \0A\09movq -32($1, $0, 2), %mm0        \0A\09movq -24($1, $0, 2), %mm1        \0A\09movq -16($1, $0, 2), %mm2        \0A\09movq  -8($1, $0, 2), %mm3        \0A\09pand          %mm7, %mm0        \0A\09pand          %mm7, %mm1        \0A\09pand          %mm7, %mm2        \0A\09pand          %mm7, %mm3        \0A\09packuswb      %mm1, %mm0        \0A\09packuswb      %mm3, %mm2        \0A\09movq        %mm0,-16($2, $0)   \0A\09movq        %mm2,- 8($2, $0)   \0A\09add             $$16, $0           \0A\09 js 1b                            \0A\09", "=r,r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %9, i8* %10, i64 %8) #5, !dbg !3971, !srcloc !3974
  store i64 %11, i64* %count.addr, align 8, !dbg !3971
  %12 = load i64, i64* %count.addr, align 8, !dbg !3975
  %sub2 = sub nsw i64 %12, 16, !dbg !3975
  store i64 %sub2, i64* %count.addr, align 8, !dbg !3975
  br label %if.end, !dbg !3976

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !3977

while.cond:                                       ; preds = %while.body, %if.end
  %13 = load i64, i64* %count.addr, align 8, !dbg !3978
  %cmp3 = icmp slt i64 %13, 0, !dbg !3980
  br i1 %cmp3, label %while.body, label %while.end, !dbg !3981

while.body:                                       ; preds = %while.cond
  %14 = load i64, i64* %count.addr, align 8, !dbg !3982
  %mul4 = mul nsw i64 2, %14, !dbg !3984
  %15 = load i8*, i8** %src.addr, align 8, !dbg !3985
  %arrayidx = getelementptr inbounds i8, i8* %15, i64 %mul4, !dbg !3985
  %16 = load i8, i8* %arrayidx, align 1, !dbg !3985
  %17 = load i64, i64* %count.addr, align 8, !dbg !3986
  %18 = load i8*, i8** %dst.addr, align 8, !dbg !3987
  %arrayidx5 = getelementptr inbounds i8, i8* %18, i64 %17, !dbg !3987
  store i8 %16, i8* %arrayidx5, align 1, !dbg !3988
  %19 = load i64, i64* %count.addr, align 8, !dbg !3989
  %inc = add nsw i64 %19, 1, !dbg !3989
  store i64 %inc, i64* %count.addr, align 8, !dbg !3989
  br label %while.cond, !dbg !3990, !llvm.loop !3992

while.end:                                        ; preds = %while.cond
  ret void, !dbg !3993
}

; Function Attrs: nounwind uwtable
define internal void @extract_even2avg_3dnow(i8* %src0, i8* %src1, i8* %dst0, i8* %dst1, i64 %count) #4 !dbg !3994 {
entry:
  %src0.addr = alloca i8*, align 8
  %src1.addr = alloca i8*, align 8
  %dst0.addr = alloca i8*, align 8
  %dst1.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src0, i8** %src0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src0.addr, metadata !3995, metadata !73), !dbg !3996
  store i8* %src1, i8** %src1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src1.addr, metadata !3997, metadata !73), !dbg !3998
  store i8* %dst0, i8** %dst0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst0.addr, metadata !3999, metadata !73), !dbg !4000
  store i8* %dst1, i8** %dst1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst1.addr, metadata !4001, metadata !73), !dbg !4002
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !4003, metadata !73), !dbg !4004
  %0 = load i64, i64* %count.addr, align 8, !dbg !4005
  %1 = load i8*, i8** %dst0.addr, align 8, !dbg !4006
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !4006
  store i8* %add.ptr, i8** %dst0.addr, align 8, !dbg !4006
  %2 = load i64, i64* %count.addr, align 8, !dbg !4007
  %3 = load i8*, i8** %dst1.addr, align 8, !dbg !4008
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 %2, !dbg !4008
  store i8* %add.ptr1, i8** %dst1.addr, align 8, !dbg !4008
  %4 = load i64, i64* %count.addr, align 8, !dbg !4009
  %mul = mul nsw i64 4, %4, !dbg !4010
  %5 = load i8*, i8** %src0.addr, align 8, !dbg !4011
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %mul, !dbg !4011
  store i8* %add.ptr2, i8** %src0.addr, align 8, !dbg !4011
  %6 = load i64, i64* %count.addr, align 8, !dbg !4012
  %mul3 = mul nsw i64 4, %6, !dbg !4013
  %7 = load i8*, i8** %src1.addr, align 8, !dbg !4014
  %add.ptr4 = getelementptr inbounds i8, i8* %7, i64 %mul3, !dbg !4014
  store i8* %add.ptr4, i8** %src1.addr, align 8, !dbg !4014
  %8 = load i64, i64* %count.addr, align 8, !dbg !4015
  %sub = sub nsw i64 0, %8, !dbg !4016
  store i64 %sub, i64* %count.addr, align 8, !dbg !4017
  %9 = load i64, i64* %count.addr, align 8, !dbg !4018
  %cmp = icmp sle i64 %9, -8, !dbg !4020
  br i1 %cmp, label %if.then, label %if.end, !dbg !4021

if.then:                                          ; preds = %entry
  %10 = load i64, i64* %count.addr, align 8, !dbg !4022
  %add = add nsw i64 %10, 7, !dbg !4022
  store i64 %add, i64* %count.addr, align 8, !dbg !4022
  %11 = load i64, i64* %count.addr, align 8, !dbg !4024
  %12 = load i8*, i8** %src0.addr, align 8, !dbg !4025
  %13 = load i8*, i8** %src1.addr, align 8, !dbg !4026
  %14 = load i8*, i8** %dst0.addr, align 8, !dbg !4027
  %15 = load i8*, i8** %dst1.addr, align 8, !dbg !4028
  %16 = call i64 asm sideeffect "pcmpeqw        %mm7, %mm7        \0A\09psrlw             $$8, %mm7        \0A\091:                                \0A\09movq  -28($1, $0, 4), %mm0        \0A\09movq  -20($1, $0, 4), %mm1        \0A\09movq  -12($1, $0, 4), %mm2        \0A\09movq   -4($1, $0, 4), %mm3        \0A\09pavgusb -28($2, $0, 4), %mm0        \0A\09pavgusb -20($2, $0, 4), %mm1        \0A\09pavgusb -12($2, $0, 4), %mm2        \0A\09pavgusb - 4($2, $0, 4), %mm3        \0A\09pand           %mm7, %mm0        \0A\09pand           %mm7, %mm1        \0A\09pand           %mm7, %mm2        \0A\09pand           %mm7, %mm3        \0A\09packuswb       %mm1, %mm0        \0A\09packuswb       %mm3, %mm2        \0A\09movq           %mm0, %mm1        \0A\09movq           %mm2, %mm3        \0A\09psrlw             $$8, %mm0        \0A\09psrlw             $$8, %mm2        \0A\09pand           %mm7, %mm1        \0A\09pand           %mm7, %mm3        \0A\09packuswb       %mm2, %mm0        \0A\09packuswb       %mm3, %mm1        \0A\09movq         %mm0,- 7($4, $0)   \0A\09movq         %mm1,- 7($3, $0)   \0A\09add               $$8, $0           \0A\09 js 1b                            \0A\09", "=r,r,r,r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %12, i8* %13, i8* %14, i8* %15, i64 %11) #5, !dbg !4024, !srcloc !4029
  store i64 %16, i64* %count.addr, align 8, !dbg !4024
  %17 = load i64, i64* %count.addr, align 8, !dbg !4030
  %sub5 = sub nsw i64 %17, 7, !dbg !4030
  store i64 %sub5, i64* %count.addr, align 8, !dbg !4030
  br label %if.end, !dbg !4031

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !4032

while.cond:                                       ; preds = %while.body, %if.end
  %18 = load i64, i64* %count.addr, align 8, !dbg !4033
  %cmp6 = icmp slt i64 %18, 0, !dbg !4035
  br i1 %cmp6, label %while.body, label %while.end, !dbg !4036

while.body:                                       ; preds = %while.cond
  %19 = load i64, i64* %count.addr, align 8, !dbg !4037
  %mul7 = mul nsw i64 4, %19, !dbg !4039
  %add8 = add nsw i64 %mul7, 0, !dbg !4040
  %20 = load i8*, i8** %src0.addr, align 8, !dbg !4041
  %arrayidx = getelementptr inbounds i8, i8* %20, i64 %add8, !dbg !4041
  %21 = load i8, i8* %arrayidx, align 1, !dbg !4041
  %conv = zext i8 %21 to i32, !dbg !4041
  %22 = load i64, i64* %count.addr, align 8, !dbg !4042
  %mul9 = mul nsw i64 4, %22, !dbg !4043
  %add10 = add nsw i64 %mul9, 0, !dbg !4044
  %23 = load i8*, i8** %src1.addr, align 8, !dbg !4045
  %arrayidx11 = getelementptr inbounds i8, i8* %23, i64 %add10, !dbg !4045
  %24 = load i8, i8* %arrayidx11, align 1, !dbg !4045
  %conv12 = zext i8 %24 to i32, !dbg !4045
  %add13 = add nsw i32 %conv, %conv12, !dbg !4046
  %shr = ashr i32 %add13, 1, !dbg !4047
  %conv14 = trunc i32 %shr to i8, !dbg !4048
  %25 = load i64, i64* %count.addr, align 8, !dbg !4049
  %26 = load i8*, i8** %dst0.addr, align 8, !dbg !4050
  %arrayidx15 = getelementptr inbounds i8, i8* %26, i64 %25, !dbg !4050
  store i8 %conv14, i8* %arrayidx15, align 1, !dbg !4051
  %27 = load i64, i64* %count.addr, align 8, !dbg !4052
  %mul16 = mul nsw i64 4, %27, !dbg !4053
  %add17 = add nsw i64 %mul16, 2, !dbg !4054
  %28 = load i8*, i8** %src0.addr, align 8, !dbg !4055
  %arrayidx18 = getelementptr inbounds i8, i8* %28, i64 %add17, !dbg !4055
  %29 = load i8, i8* %arrayidx18, align 1, !dbg !4055
  %conv19 = zext i8 %29 to i32, !dbg !4055
  %30 = load i64, i64* %count.addr, align 8, !dbg !4056
  %mul20 = mul nsw i64 4, %30, !dbg !4057
  %add21 = add nsw i64 %mul20, 2, !dbg !4058
  %31 = load i8*, i8** %src1.addr, align 8, !dbg !4059
  %arrayidx22 = getelementptr inbounds i8, i8* %31, i64 %add21, !dbg !4059
  %32 = load i8, i8* %arrayidx22, align 1, !dbg !4059
  %conv23 = zext i8 %32 to i32, !dbg !4059
  %add24 = add nsw i32 %conv19, %conv23, !dbg !4060
  %shr25 = ashr i32 %add24, 1, !dbg !4061
  %conv26 = trunc i32 %shr25 to i8, !dbg !4062
  %33 = load i64, i64* %count.addr, align 8, !dbg !4063
  %34 = load i8*, i8** %dst1.addr, align 8, !dbg !4064
  %arrayidx27 = getelementptr inbounds i8, i8* %34, i64 %33, !dbg !4064
  store i8 %conv26, i8* %arrayidx27, align 1, !dbg !4065
  %35 = load i64, i64* %count.addr, align 8, !dbg !4066
  %inc = add nsw i64 %35, 1, !dbg !4066
  store i64 %inc, i64* %count.addr, align 8, !dbg !4066
  br label %while.cond, !dbg !4067, !llvm.loop !4069

while.end:                                        ; preds = %while.cond
  ret void, !dbg !4070
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb15to16_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !4071 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %x = alloca i32, align 4
  %x13 = alloca i16, align 2
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !4072, metadata !73), !dbg !4073
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !4074, metadata !73), !dbg !4075
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !4076, metadata !73), !dbg !4077
  call void @llvm.dbg.declare(metadata i8** %s, metadata !4078, metadata !73), !dbg !4079
  %0 = load i8*, i8** %src.addr, align 8, !dbg !4080
  store i8* %0, i8** %s, align 8, !dbg !4079
  call void @llvm.dbg.declare(metadata i8** %d, metadata !4081, metadata !73), !dbg !4082
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !4083
  store i8* %1, i8** %d, align 8, !dbg !4082
  call void @llvm.dbg.declare(metadata i8** %end, metadata !4084, metadata !73), !dbg !4085
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !4086, metadata !73), !dbg !4087
  %2 = load i8*, i8** %s, align 8, !dbg !4088
  %3 = load i32, i32* %src_size.addr, align 4, !dbg !4089
  %idx.ext = sext i32 %3 to i64, !dbg !4090
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext, !dbg !4090
  store i8* %add.ptr, i8** %end, align 8, !dbg !4091
  %4 = load i8*, i8** %s, align 8, !dbg !4092
  call void asm sideeffect "prefetchnta    $0", "*m,~{dirflag},~{fpsr},~{flags}"(i8* %4) #5, !dbg !4093, !srcloc !4094
  call void asm sideeffect "movq        $0, %mm4", "*m,~{dirflag},~{fpsr},~{flags}"(i64* @mask15s) #5, !dbg !4095, !srcloc !4096
  %5 = load i8*, i8** %end, align 8, !dbg !4097
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 -15, !dbg !4098
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !4099
  br label %while.cond, !dbg !4100

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i8*, i8** %s, align 8, !dbg !4101
  %7 = load i8*, i8** %mm_end, align 8, !dbg !4103
  %cmp = icmp ult i8* %6, %7, !dbg !4104
  br i1 %cmp, label %while.body, label %while.end, !dbg !4105

while.body:                                       ; preds = %while.cond
  %8 = load i8*, i8** %d, align 8, !dbg !4106
  %9 = load i8*, i8** %s, align 8, !dbg !4108
  call void asm sideeffect "prefetchnta 32($1)        \0A\09movq      ($1), %mm0  \0A\09movq     8($1), %mm2  \0A\09movq     %mm0, %mm1  \0A\09movq     %mm2, %mm3  \0A\09pand     %mm4, %mm0  \0A\09pand     %mm4, %mm2  \0A\09paddw    %mm1, %mm0  \0A\09paddw    %mm3, %mm2  \0A\09movntq   %mm0,  ($0)  \0A\09movntq   %mm2, 8($0)", "r,r,~{dirflag},~{fpsr},~{flags}"(i8* %8, i8* %9) #5, !dbg !4109, !srcloc !4110
  %10 = load i8*, i8** %d, align 8, !dbg !4111
  %add.ptr2 = getelementptr inbounds i8, i8* %10, i64 16, !dbg !4111
  store i8* %add.ptr2, i8** %d, align 8, !dbg !4111
  %11 = load i8*, i8** %s, align 8, !dbg !4112
  %add.ptr3 = getelementptr inbounds i8, i8* %11, i64 16, !dbg !4112
  store i8* %add.ptr3, i8** %s, align 8, !dbg !4112
  br label %while.cond, !dbg !4113, !llvm.loop !4115

while.end:                                        ; preds = %while.cond
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4116, !srcloc !4117
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4118, !srcloc !4119
  %12 = load i8*, i8** %end, align 8, !dbg !4120
  %add.ptr4 = getelementptr inbounds i8, i8* %12, i64 -3, !dbg !4121
  store i8* %add.ptr4, i8** %mm_end, align 8, !dbg !4122
  br label %while.cond5, !dbg !4123

while.cond5:                                      ; preds = %while.body7, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !4124
  %14 = load i8*, i8** %mm_end, align 8, !dbg !4125
  %cmp6 = icmp ult i8* %13, %14, !dbg !4126
  br i1 %cmp6, label %while.body7, label %while.end11, !dbg !4127

while.body7:                                      ; preds = %while.cond5
  call void @llvm.dbg.declare(metadata i32* %x, metadata !4128, metadata !73), !dbg !4130
  %15 = load i8*, i8** %s, align 8, !dbg !4131
  %16 = bitcast i8* %15 to i32*, !dbg !4132
  %17 = load i32, i32* %16, align 4, !dbg !4132
  store i32 %17, i32* %x, align 4, !dbg !4130
  %18 = load i32, i32* %x, align 4, !dbg !4133
  %and = and i32 %18, 2147450879, !dbg !4134
  %19 = load i32, i32* %x, align 4, !dbg !4135
  %and8 = and i32 %19, 2145419232, !dbg !4136
  %add = add i32 %and, %and8, !dbg !4137
  %20 = load i8*, i8** %d, align 8, !dbg !4138
  %21 = bitcast i8* %20 to i32*, !dbg !4139
  store i32 %add, i32* %21, align 4, !dbg !4140
  %22 = load i8*, i8** %d, align 8, !dbg !4141
  %add.ptr9 = getelementptr inbounds i8, i8* %22, i64 4, !dbg !4141
  store i8* %add.ptr9, i8** %d, align 8, !dbg !4141
  %23 = load i8*, i8** %s, align 8, !dbg !4142
  %add.ptr10 = getelementptr inbounds i8, i8* %23, i64 4, !dbg !4142
  store i8* %add.ptr10, i8** %s, align 8, !dbg !4142
  br label %while.cond5, !dbg !4143, !llvm.loop !4144

while.end11:                                      ; preds = %while.cond5
  %24 = load i8*, i8** %s, align 8, !dbg !4145
  %25 = load i8*, i8** %end, align 8, !dbg !4147
  %cmp12 = icmp ult i8* %24, %25, !dbg !4148
  br i1 %cmp12, label %if.then, label %if.end, !dbg !4149

if.then:                                          ; preds = %while.end11
  call void @llvm.dbg.declare(metadata i16* %x13, metadata !4150, metadata !73), !dbg !4152
  %26 = load i8*, i8** %s, align 8, !dbg !4153
  %27 = bitcast i8* %26 to i16*, !dbg !4154
  %28 = load i16, i16* %27, align 2, !dbg !4154
  store i16 %28, i16* %x13, align 2, !dbg !4152
  %29 = load i16, i16* %x13, align 2, !dbg !4155
  %conv = zext i16 %29 to i32, !dbg !4155
  %and14 = and i32 %conv, 32767, !dbg !4156
  %30 = load i16, i16* %x13, align 2, !dbg !4157
  %conv15 = zext i16 %30 to i32, !dbg !4157
  %and16 = and i32 %conv15, 32736, !dbg !4158
  %add17 = add nsw i32 %and14, %and16, !dbg !4159
  %conv18 = trunc i32 %add17 to i16, !dbg !4160
  %31 = load i8*, i8** %d, align 8, !dbg !4161
  %32 = bitcast i8* %31 to i16*, !dbg !4162
  store i16 %conv18, i16* %32, align 2, !dbg !4163
  br label %if.end, !dbg !4164

if.end:                                           ; preds = %if.then, %while.end11
  ret void, !dbg !4165
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb15tobgr24_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !4166 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %end = alloca i16*, align 8
  %mm_end = alloca i16*, align 8
  %d = alloca i8*, align 8
  %s = alloca i16*, align 8
  %bgr = alloca i16, align 2
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !4167, metadata !73), !dbg !4168
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !4169, metadata !73), !dbg !4170
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !4171, metadata !73), !dbg !4172
  call void @llvm.dbg.declare(metadata i16** %end, metadata !4173, metadata !73), !dbg !4174
  call void @llvm.dbg.declare(metadata i16** %mm_end, metadata !4175, metadata !73), !dbg !4176
  call void @llvm.dbg.declare(metadata i8** %d, metadata !4177, metadata !73), !dbg !4178
  %0 = load i8*, i8** %dst.addr, align 8, !dbg !4179
  store i8* %0, i8** %d, align 8, !dbg !4178
  call void @llvm.dbg.declare(metadata i16** %s, metadata !4180, metadata !73), !dbg !4181
  %1 = load i8*, i8** %src.addr, align 8, !dbg !4182
  %2 = bitcast i8* %1 to i16*, !dbg !4183
  store i16* %2, i16** %s, align 8, !dbg !4181
  %3 = load i16*, i16** %s, align 8, !dbg !4184
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !4185
  %div = sdiv i32 %4, 2, !dbg !4186
  %idx.ext = sext i32 %div to i64, !dbg !4187
  %add.ptr = getelementptr inbounds i16, i16* %3, i64 %idx.ext, !dbg !4187
  store i16* %add.ptr, i16** %end, align 8, !dbg !4188
  %5 = load i16*, i16** %s, align 8, !dbg !4189
  call void asm sideeffect "prefetchnta    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %5) #5, !dbg !4190, !srcloc !4191
  %6 = load i16*, i16** %end, align 8, !dbg !4192
  %add.ptr1 = getelementptr inbounds i16, i16* %6, i64 -7, !dbg !4193
  store i16* %add.ptr1, i16** %mm_end, align 8, !dbg !4194
  br label %while.cond, !dbg !4195

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i16*, i16** %s, align 8, !dbg !4196
  %8 = load i16*, i16** %mm_end, align 8, !dbg !4198
  %cmp = icmp ult i16* %7, %8, !dbg !4199
  br i1 %cmp, label %while.body, label %while.end, !dbg !4200

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %d, align 8, !dbg !4201
  %10 = load i16*, i16** %s, align 8, !dbg !4203
  call void asm sideeffect "prefetchnta  32($1)           \0A\09movq        ($1), %mm0    \0A\09movq        ($1), %mm1    \0A\09movq        ($1), %mm2    \0A\09pand          $2, %mm0    \0A\09pand          $3, %mm1    \0A\09pand          $4, %mm2    \0A\09psllq         $$5, %mm0    \0A\09pmulhw        mul15_mid, %mm0    \0A\09pmulhw        mul15_mid, %mm1    \0A\09pmulhw        mul15_hi, %mm2    \0A\09movq       %mm0, %mm3    \0A\09movq       %mm1, %mm4    \0A\09movq       %mm2, %mm5    \0A\09punpcklwd     $5, %mm0    \0A\09punpcklwd     $5, %mm1    \0A\09punpcklwd     $5, %mm2    \0A\09punpckhwd     $5, %mm3    \0A\09punpckhwd     $5, %mm4    \0A\09punpckhwd     $5, %mm5    \0A\09psllq         $$8, %mm1    \0A\09psllq        $$16, %mm2    \0A\09por        %mm1, %mm0    \0A\09por        %mm2, %mm0    \0A\09psllq         $$8, %mm4    \0A\09psllq        $$16, %mm5    \0A\09por        %mm4, %mm3    \0A\09por        %mm5, %mm3    \0A\09movq       %mm0, %mm6    \0A\09movq       %mm3, %mm7    \0A\09movq       8($1), %mm0    \0A\09movq       8($1), %mm1    \0A\09movq       8($1), %mm2    \0A\09pand          $2, %mm0    \0A\09pand          $3, %mm1    \0A\09pand          $4, %mm2    \0A\09psllq         $$5, %mm0    \0A\09pmulhw        mul15_mid, %mm0    \0A\09pmulhw        mul15_mid, %mm1    \0A\09pmulhw        mul15_hi, %mm2    \0A\09movq       %mm0, %mm3    \0A\09movq       %mm1, %mm4    \0A\09movq       %mm2, %mm5    \0A\09punpcklwd     $5, %mm0    \0A\09punpcklwd     $5, %mm1    \0A\09punpcklwd     $5, %mm2    \0A\09punpckhwd     $5, %mm3    \0A\09punpckhwd     $5, %mm4    \0A\09punpckhwd     $5, %mm5    \0A\09psllq         $$8, %mm1    \0A\09psllq        $$16, %mm2    \0A\09por        %mm1, %mm0    \0A\09por        %mm2, %mm0    \0A\09psllq         $$8, %mm4    \0A\09psllq        $$16, %mm5    \0A\09por        %mm4, %mm3    \0A\09por        %mm5, %mm3    \0A\09", "=*m,r,*m,*m,*m,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %9, i16* %10, i64* @mask15b, i64* @mask15g, i64* @mask15r, i64* @mmx_null) #5, !dbg !4204, !srcloc !4205
  %11 = load i8*, i8** %d, align 8, !dbg !4206
  %12 = load i16*, i16** %s, align 8, !dbg !4207
  call void asm sideeffect "movq       %mm0, %mm4    \0A\09movq       %mm3, %mm5    \0A\09movq       %mm6, %mm0    \0A\09movq       %mm7, %mm1    \0A\09movq       %mm4, %mm6    \0A\09movq       %mm5, %mm7    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm1, %mm3    \0A\09psrlq         $$8, %mm2    \0A\09psrlq         $$8, %mm3    \0A\09psrlq         $$8, %mm6    \0A\09psrlq         $$8, %mm7    \0A\09pand mask24l, %mm0\0A\09pand mask24l, %mm1\0A\09pand mask24l, %mm4\0A\09pand mask24l, %mm5\0A\09pand mask24h, %mm2\0A\09pand mask24h, %mm3\0A\09pand mask24h, %mm6\0A\09pand mask24h, %mm7\0A\09por        %mm2, %mm0    \0A\09por        %mm3, %mm1    \0A\09por        %mm6, %mm4    \0A\09por        %mm7, %mm5    \0A\09movq       %mm1, %mm2    \0A\09movq       %mm4, %mm3    \0A\09psllq        $$48, %mm2    \0A\09psllq        $$32, %mm3    \0A\09por        %mm2, %mm0    \0A\09psrlq        $$16, %mm1    \0A\09psrlq        $$32, %mm4    \0A\09psllq        $$16, %mm5    \0A\09por        %mm3, %mm1    \0A\09por        %mm5, %mm4    \0A\09movntq     %mm0,   ($0)    \0A\09movntq     %mm1,  8($0)    \0A\09movntq     %mm4, 16($0)", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %11, i16* %12) #5, !dbg !4208, !srcloc !4209
  %13 = load i8*, i8** %d, align 8, !dbg !4210
  %add.ptr2 = getelementptr inbounds i8, i8* %13, i64 24, !dbg !4210
  store i8* %add.ptr2, i8** %d, align 8, !dbg !4210
  %14 = load i16*, i16** %s, align 8, !dbg !4211
  %add.ptr3 = getelementptr inbounds i16, i16* %14, i64 8, !dbg !4211
  store i16* %add.ptr3, i16** %s, align 8, !dbg !4211
  br label %while.cond, !dbg !4212, !llvm.loop !4214

while.end:                                        ; preds = %while.cond
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4215, !srcloc !4216
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4217, !srcloc !4218
  br label %while.cond4, !dbg !4219

while.cond4:                                      ; preds = %while.body6, %while.end
  %15 = load i16*, i16** %s, align 8, !dbg !4220
  %16 = load i16*, i16** %end, align 8, !dbg !4221
  %cmp5 = icmp ult i16* %15, %16, !dbg !4222
  br i1 %cmp5, label %while.body6, label %while.end29, !dbg !4223

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i16* %bgr, metadata !4224, metadata !73), !dbg !4226
  %17 = load i16*, i16** %s, align 8, !dbg !4227
  %incdec.ptr = getelementptr inbounds i16, i16* %17, i32 1, !dbg !4227
  store i16* %incdec.ptr, i16** %s, align 8, !dbg !4227
  %18 = load i16, i16* %17, align 2, !dbg !4228
  store i16 %18, i16* %bgr, align 2, !dbg !4229
  %19 = load i16, i16* %bgr, align 2, !dbg !4230
  %conv = zext i16 %19 to i32, !dbg !4230
  %and = and i32 %conv, 31, !dbg !4231
  %shl = shl i32 %and, 3, !dbg !4232
  %20 = load i16, i16* %bgr, align 2, !dbg !4233
  %conv7 = zext i16 %20 to i32, !dbg !4233
  %and8 = and i32 %conv7, 31, !dbg !4234
  %shr = ashr i32 %and8, 2, !dbg !4235
  %or = or i32 %shl, %shr, !dbg !4236
  %conv9 = trunc i32 %or to i8, !dbg !4237
  %21 = load i8*, i8** %d, align 8, !dbg !4238
  %incdec.ptr10 = getelementptr inbounds i8, i8* %21, i32 1, !dbg !4238
  store i8* %incdec.ptr10, i8** %d, align 8, !dbg !4238
  store i8 %conv9, i8* %21, align 1, !dbg !4239
  %22 = load i16, i16* %bgr, align 2, !dbg !4240
  %conv11 = zext i16 %22 to i32, !dbg !4240
  %and12 = and i32 %conv11, 992, !dbg !4241
  %shr13 = ashr i32 %and12, 2, !dbg !4242
  %23 = load i16, i16* %bgr, align 2, !dbg !4243
  %conv14 = zext i16 %23 to i32, !dbg !4243
  %and15 = and i32 %conv14, 992, !dbg !4244
  %shr16 = ashr i32 %and15, 7, !dbg !4245
  %or17 = or i32 %shr13, %shr16, !dbg !4246
  %conv18 = trunc i32 %or17 to i8, !dbg !4247
  %24 = load i8*, i8** %d, align 8, !dbg !4248
  %incdec.ptr19 = getelementptr inbounds i8, i8* %24, i32 1, !dbg !4248
  store i8* %incdec.ptr19, i8** %d, align 8, !dbg !4248
  store i8 %conv18, i8* %24, align 1, !dbg !4249
  %25 = load i16, i16* %bgr, align 2, !dbg !4250
  %conv20 = zext i16 %25 to i32, !dbg !4250
  %and21 = and i32 %conv20, 31744, !dbg !4251
  %shr22 = ashr i32 %and21, 7, !dbg !4252
  %26 = load i16, i16* %bgr, align 2, !dbg !4253
  %conv23 = zext i16 %26 to i32, !dbg !4253
  %and24 = and i32 %conv23, 31744, !dbg !4254
  %shr25 = ashr i32 %and24, 12, !dbg !4255
  %or26 = or i32 %shr22, %shr25, !dbg !4256
  %conv27 = trunc i32 %or26 to i8, !dbg !4257
  %27 = load i8*, i8** %d, align 8, !dbg !4258
  %incdec.ptr28 = getelementptr inbounds i8, i8* %27, i32 1, !dbg !4258
  store i8* %incdec.ptr28, i8** %d, align 8, !dbg !4258
  store i8 %conv27, i8* %27, align 1, !dbg !4259
  br label %while.cond4, !dbg !4260, !llvm.loop !4261

while.end29:                                      ; preds = %while.cond4
  ret void, !dbg !4262
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb15to32_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !4263 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %end = alloca i16*, align 8
  %mm_end = alloca i16*, align 8
  %d = alloca i8*, align 8
  %s = alloca i16*, align 8
  %bgr = alloca i16, align 2
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !4264, metadata !73), !dbg !4265
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !4266, metadata !73), !dbg !4267
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !4268, metadata !73), !dbg !4269
  call void @llvm.dbg.declare(metadata i16** %end, metadata !4270, metadata !73), !dbg !4271
  call void @llvm.dbg.declare(metadata i16** %mm_end, metadata !4272, metadata !73), !dbg !4273
  call void @llvm.dbg.declare(metadata i8** %d, metadata !4274, metadata !73), !dbg !4275
  %0 = load i8*, i8** %dst.addr, align 8, !dbg !4276
  store i8* %0, i8** %d, align 8, !dbg !4275
  call void @llvm.dbg.declare(metadata i16** %s, metadata !4277, metadata !73), !dbg !4278
  %1 = load i8*, i8** %src.addr, align 8, !dbg !4279
  %2 = bitcast i8* %1 to i16*, !dbg !4280
  store i16* %2, i16** %s, align 8, !dbg !4278
  %3 = load i16*, i16** %s, align 8, !dbg !4281
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !4282
  %div = sdiv i32 %4, 2, !dbg !4283
  %idx.ext = sext i32 %div to i64, !dbg !4284
  %add.ptr = getelementptr inbounds i16, i16* %3, i64 %idx.ext, !dbg !4284
  store i16* %add.ptr, i16** %end, align 8, !dbg !4285
  %5 = load i16*, i16** %s, align 8, !dbg !4286
  call void asm sideeffect "prefetchnta    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %5) #5, !dbg !4287, !srcloc !4288
  call void asm sideeffect "pxor    %mm7,%mm7    \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4289, !srcloc !4290
  call void asm sideeffect "pcmpeqd %mm6,%mm6    \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4291, !srcloc !4292
  %6 = load i16*, i16** %end, align 8, !dbg !4293
  %add.ptr1 = getelementptr inbounds i16, i16* %6, i64 -3, !dbg !4294
  store i16* %add.ptr1, i16** %mm_end, align 8, !dbg !4295
  br label %while.cond, !dbg !4296

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i16*, i16** %s, align 8, !dbg !4297
  %8 = load i16*, i16** %mm_end, align 8, !dbg !4299
  %cmp = icmp ult i16* %7, %8, !dbg !4300
  br i1 %cmp, label %while.body, label %while.end, !dbg !4301

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %d, align 8, !dbg !4302
  %10 = load i16*, i16** %s, align 8, !dbg !4304
  call void asm sideeffect "prefetchnta  32($1)           \0A\09movq        ($1), %mm0    \0A\09movq        ($1), %mm1    \0A\09movq        ($1), %mm2    \0A\09pand          $2, %mm0    \0A\09pand          $3, %mm1    \0A\09pand          $4, %mm2    \0A\09psllq         $$5, %mm0    \0A\09pmulhw        $5, %mm0    \0A\09pmulhw        $5, %mm1    \0A\09pmulhw        mul15_hi, %mm2    \0A\09packuswb   %mm7, %mm0    \0A\09packuswb   %mm7, %mm1    \0A\09packuswb   %mm7, %mm2    \0A\09punpcklbw  %mm1, %mm0    \0A\09punpcklbw  %mm6, %mm2    \0A\09movq       %mm0, %mm3    \0A\09punpcklwd  %mm2, %mm0    \0A\09punpckhwd  %mm2, %mm3    \0A\09movntq     %mm0,  ($0)    \0A\09movntq     %mm3, 8($0)    \0A\09", "r,r,*m,*m,*m,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %9, i16* %10, i64* @mask15b, i64* @mask15g, i64* @mask15r, i64* @mul15_mid) #5, !dbg !4305, !srcloc !4306
  %11 = load i8*, i8** %d, align 8, !dbg !4307
  %add.ptr2 = getelementptr inbounds i8, i8* %11, i64 16, !dbg !4307
  store i8* %add.ptr2, i8** %d, align 8, !dbg !4307
  %12 = load i16*, i16** %s, align 8, !dbg !4308
  %add.ptr3 = getelementptr inbounds i16, i16* %12, i64 4, !dbg !4308
  store i16* %add.ptr3, i16** %s, align 8, !dbg !4308
  br label %while.cond, !dbg !4309, !llvm.loop !4311

while.end:                                        ; preds = %while.cond
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4312, !srcloc !4313
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4314, !srcloc !4315
  br label %while.cond4, !dbg !4316

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i16*, i16** %s, align 8, !dbg !4317
  %14 = load i16*, i16** %end, align 8, !dbg !4318
  %cmp5 = icmp ult i16* %13, %14, !dbg !4319
  br i1 %cmp5, label %while.body6, label %while.end30, !dbg !4320

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i16* %bgr, metadata !4321, metadata !73), !dbg !4323
  %15 = load i16*, i16** %s, align 8, !dbg !4324
  %incdec.ptr = getelementptr inbounds i16, i16* %15, i32 1, !dbg !4324
  store i16* %incdec.ptr, i16** %s, align 8, !dbg !4324
  %16 = load i16, i16* %15, align 2, !dbg !4325
  store i16 %16, i16* %bgr, align 2, !dbg !4326
  %17 = load i16, i16* %bgr, align 2, !dbg !4327
  %conv = zext i16 %17 to i32, !dbg !4327
  %and = and i32 %conv, 31, !dbg !4328
  %shl = shl i32 %and, 3, !dbg !4329
  %18 = load i16, i16* %bgr, align 2, !dbg !4330
  %conv7 = zext i16 %18 to i32, !dbg !4330
  %and8 = and i32 %conv7, 31, !dbg !4331
  %shr = ashr i32 %and8, 2, !dbg !4332
  %or = or i32 %shl, %shr, !dbg !4333
  %conv9 = trunc i32 %or to i8, !dbg !4334
  %19 = load i8*, i8** %d, align 8, !dbg !4335
  %incdec.ptr10 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !4335
  store i8* %incdec.ptr10, i8** %d, align 8, !dbg !4335
  store i8 %conv9, i8* %19, align 1, !dbg !4336
  %20 = load i16, i16* %bgr, align 2, !dbg !4337
  %conv11 = zext i16 %20 to i32, !dbg !4337
  %and12 = and i32 %conv11, 992, !dbg !4338
  %shr13 = ashr i32 %and12, 2, !dbg !4339
  %21 = load i16, i16* %bgr, align 2, !dbg !4340
  %conv14 = zext i16 %21 to i32, !dbg !4340
  %and15 = and i32 %conv14, 992, !dbg !4341
  %shr16 = ashr i32 %and15, 7, !dbg !4342
  %or17 = or i32 %shr13, %shr16, !dbg !4343
  %conv18 = trunc i32 %or17 to i8, !dbg !4344
  %22 = load i8*, i8** %d, align 8, !dbg !4345
  %incdec.ptr19 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !4345
  store i8* %incdec.ptr19, i8** %d, align 8, !dbg !4345
  store i8 %conv18, i8* %22, align 1, !dbg !4346
  %23 = load i16, i16* %bgr, align 2, !dbg !4347
  %conv20 = zext i16 %23 to i32, !dbg !4347
  %and21 = and i32 %conv20, 31744, !dbg !4348
  %shr22 = ashr i32 %and21, 7, !dbg !4349
  %24 = load i16, i16* %bgr, align 2, !dbg !4350
  %conv23 = zext i16 %24 to i32, !dbg !4350
  %and24 = and i32 %conv23, 31744, !dbg !4351
  %shr25 = ashr i32 %and24, 12, !dbg !4352
  %or26 = or i32 %shr22, %shr25, !dbg !4353
  %conv27 = trunc i32 %or26 to i8, !dbg !4354
  %25 = load i8*, i8** %d, align 8, !dbg !4355
  %incdec.ptr28 = getelementptr inbounds i8, i8* %25, i32 1, !dbg !4355
  store i8* %incdec.ptr28, i8** %d, align 8, !dbg !4355
  store i8 %conv27, i8* %25, align 1, !dbg !4356
  %26 = load i8*, i8** %d, align 8, !dbg !4357
  %incdec.ptr29 = getelementptr inbounds i8, i8* %26, i32 1, !dbg !4357
  store i8* %incdec.ptr29, i8** %d, align 8, !dbg !4357
  store i8 -1, i8* %26, align 1, !dbg !4358
  br label %while.cond4, !dbg !4359, !llvm.loop !4360

while.end30:                                      ; preds = %while.cond4
  ret void, !dbg !4361
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb16tobgr24_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !4362 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %end = alloca i16*, align 8
  %mm_end = alloca i16*, align 8
  %d = alloca i8*, align 8
  %s = alloca i16*, align 8
  %bgr = alloca i16, align 2
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !4363, metadata !73), !dbg !4364
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !4365, metadata !73), !dbg !4366
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !4367, metadata !73), !dbg !4368
  call void @llvm.dbg.declare(metadata i16** %end, metadata !4369, metadata !73), !dbg !4370
  call void @llvm.dbg.declare(metadata i16** %mm_end, metadata !4371, metadata !73), !dbg !4372
  call void @llvm.dbg.declare(metadata i8** %d, metadata !4373, metadata !73), !dbg !4374
  %0 = load i8*, i8** %dst.addr, align 8, !dbg !4375
  store i8* %0, i8** %d, align 8, !dbg !4374
  call void @llvm.dbg.declare(metadata i16** %s, metadata !4376, metadata !73), !dbg !4377
  %1 = load i8*, i8** %src.addr, align 8, !dbg !4378
  %2 = bitcast i8* %1 to i16*, !dbg !4379
  store i16* %2, i16** %s, align 8, !dbg !4377
  %3 = load i16*, i16** %s, align 8, !dbg !4380
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !4381
  %div = sdiv i32 %4, 2, !dbg !4382
  %idx.ext = sext i32 %div to i64, !dbg !4383
  %add.ptr = getelementptr inbounds i16, i16* %3, i64 %idx.ext, !dbg !4383
  store i16* %add.ptr, i16** %end, align 8, !dbg !4384
  %5 = load i16*, i16** %s, align 8, !dbg !4385
  call void asm sideeffect "prefetchnta    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %5) #5, !dbg !4386, !srcloc !4387
  %6 = load i16*, i16** %end, align 8, !dbg !4388
  %add.ptr1 = getelementptr inbounds i16, i16* %6, i64 -7, !dbg !4389
  store i16* %add.ptr1, i16** %mm_end, align 8, !dbg !4390
  br label %while.cond, !dbg !4391

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i16*, i16** %s, align 8, !dbg !4392
  %8 = load i16*, i16** %mm_end, align 8, !dbg !4394
  %cmp = icmp ult i16* %7, %8, !dbg !4395
  br i1 %cmp, label %while.body, label %while.end, !dbg !4396

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %d, align 8, !dbg !4397
  %10 = load i16*, i16** %s, align 8, !dbg !4399
  call void asm sideeffect "prefetchnta  32($1)           \0A\09movq        ($1), %mm0    \0A\09movq        ($1), %mm1    \0A\09movq        ($1), %mm2    \0A\09pand          $2, %mm0    \0A\09pand          $3, %mm1    \0A\09pand          $4, %mm2    \0A\09psllq         $$5, %mm0    \0A\09psrlq         $$1, %mm2    \0A\09pmulhw        mul15_mid, %mm0    \0A\09pmulhw        mul16_mid, %mm1    \0A\09pmulhw        mul15_hi, %mm2    \0A\09movq       %mm0, %mm3    \0A\09movq       %mm1, %mm4    \0A\09movq       %mm2, %mm5    \0A\09punpcklwd     $5, %mm0    \0A\09punpcklwd     $5, %mm1    \0A\09punpcklwd     $5, %mm2    \0A\09punpckhwd     $5, %mm3    \0A\09punpckhwd     $5, %mm4    \0A\09punpckhwd     $5, %mm5    \0A\09psllq         $$8, %mm1    \0A\09psllq        $$16, %mm2    \0A\09por        %mm1, %mm0    \0A\09por        %mm2, %mm0    \0A\09psllq         $$8, %mm4    \0A\09psllq        $$16, %mm5    \0A\09por        %mm4, %mm3    \0A\09por        %mm5, %mm3    \0A\09movq       %mm0, %mm6    \0A\09movq       %mm3, %mm7    \0A\09movq       8($1), %mm0    \0A\09movq       8($1), %mm1    \0A\09movq       8($1), %mm2    \0A\09pand          $2, %mm0    \0A\09pand          $3, %mm1    \0A\09pand          $4, %mm2    \0A\09psllq         $$5, %mm0    \0A\09psrlq         $$1, %mm2    \0A\09pmulhw        mul15_mid, %mm0    \0A\09pmulhw        mul16_mid, %mm1    \0A\09pmulhw        mul15_hi, %mm2    \0A\09movq       %mm0, %mm3    \0A\09movq       %mm1, %mm4    \0A\09movq       %mm2, %mm5    \0A\09punpcklwd     $5, %mm0    \0A\09punpcklwd     $5, %mm1    \0A\09punpcklwd     $5, %mm2    \0A\09punpckhwd     $5, %mm3    \0A\09punpckhwd     $5, %mm4    \0A\09punpckhwd     $5, %mm5    \0A\09psllq         $$8, %mm1    \0A\09psllq        $$16, %mm2    \0A\09por        %mm1, %mm0    \0A\09por        %mm2, %mm0    \0A\09psllq         $$8, %mm4    \0A\09psllq        $$16, %mm5    \0A\09por        %mm4, %mm3    \0A\09por        %mm5, %mm3    \0A\09", "=*m,r,*m,*m,*m,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %9, i16* %10, i64* @mask15b, i64* @mask16g, i64* @mask16r, i64* @mmx_null) #5, !dbg !4400, !srcloc !4401
  %11 = load i8*, i8** %d, align 8, !dbg !4402
  %12 = load i16*, i16** %s, align 8, !dbg !4403
  call void asm sideeffect "movq       %mm0, %mm4    \0A\09movq       %mm3, %mm5    \0A\09movq       %mm6, %mm0    \0A\09movq       %mm7, %mm1    \0A\09movq       %mm4, %mm6    \0A\09movq       %mm5, %mm7    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm1, %mm3    \0A\09psrlq         $$8, %mm2    \0A\09psrlq         $$8, %mm3    \0A\09psrlq         $$8, %mm6    \0A\09psrlq         $$8, %mm7    \0A\09pand mask24l, %mm0\0A\09pand mask24l, %mm1\0A\09pand mask24l, %mm4\0A\09pand mask24l, %mm5\0A\09pand mask24h, %mm2\0A\09pand mask24h, %mm3\0A\09pand mask24h, %mm6\0A\09pand mask24h, %mm7\0A\09por        %mm2, %mm0    \0A\09por        %mm3, %mm1    \0A\09por        %mm6, %mm4    \0A\09por        %mm7, %mm5    \0A\09movq       %mm1, %mm2    \0A\09movq       %mm4, %mm3    \0A\09psllq        $$48, %mm2    \0A\09psllq        $$32, %mm3    \0A\09por        %mm2, %mm0    \0A\09psrlq        $$16, %mm1    \0A\09psrlq        $$32, %mm4    \0A\09psllq        $$16, %mm5    \0A\09por        %mm3, %mm1    \0A\09por        %mm5, %mm4    \0A\09movntq     %mm0,   ($0)    \0A\09movntq     %mm1,  8($0)    \0A\09movntq     %mm4, 16($0)", "r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %11, i16* %12) #5, !dbg !4404, !srcloc !4405
  %13 = load i8*, i8** %d, align 8, !dbg !4406
  %add.ptr2 = getelementptr inbounds i8, i8* %13, i64 24, !dbg !4406
  store i8* %add.ptr2, i8** %d, align 8, !dbg !4406
  %14 = load i16*, i16** %s, align 8, !dbg !4407
  %add.ptr3 = getelementptr inbounds i16, i16* %14, i64 8, !dbg !4407
  store i16* %add.ptr3, i16** %s, align 8, !dbg !4407
  br label %while.cond, !dbg !4408, !llvm.loop !4410

while.end:                                        ; preds = %while.cond
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4411, !srcloc !4412
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4413, !srcloc !4414
  br label %while.cond4, !dbg !4415

while.cond4:                                      ; preds = %while.body6, %while.end
  %15 = load i16*, i16** %s, align 8, !dbg !4416
  %16 = load i16*, i16** %end, align 8, !dbg !4417
  %cmp5 = icmp ult i16* %15, %16, !dbg !4418
  br i1 %cmp5, label %while.body6, label %while.end29, !dbg !4419

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i16* %bgr, metadata !4420, metadata !73), !dbg !4422
  %17 = load i16*, i16** %s, align 8, !dbg !4423
  %incdec.ptr = getelementptr inbounds i16, i16* %17, i32 1, !dbg !4423
  store i16* %incdec.ptr, i16** %s, align 8, !dbg !4423
  %18 = load i16, i16* %17, align 2, !dbg !4424
  store i16 %18, i16* %bgr, align 2, !dbg !4425
  %19 = load i16, i16* %bgr, align 2, !dbg !4426
  %conv = zext i16 %19 to i32, !dbg !4426
  %and = and i32 %conv, 31, !dbg !4427
  %shl = shl i32 %and, 3, !dbg !4428
  %20 = load i16, i16* %bgr, align 2, !dbg !4429
  %conv7 = zext i16 %20 to i32, !dbg !4429
  %and8 = and i32 %conv7, 31, !dbg !4430
  %shr = ashr i32 %and8, 2, !dbg !4431
  %or = or i32 %shl, %shr, !dbg !4432
  %conv9 = trunc i32 %or to i8, !dbg !4433
  %21 = load i8*, i8** %d, align 8, !dbg !4434
  %incdec.ptr10 = getelementptr inbounds i8, i8* %21, i32 1, !dbg !4434
  store i8* %incdec.ptr10, i8** %d, align 8, !dbg !4434
  store i8 %conv9, i8* %21, align 1, !dbg !4435
  %22 = load i16, i16* %bgr, align 2, !dbg !4436
  %conv11 = zext i16 %22 to i32, !dbg !4436
  %and12 = and i32 %conv11, 2016, !dbg !4437
  %shr13 = ashr i32 %and12, 3, !dbg !4438
  %23 = load i16, i16* %bgr, align 2, !dbg !4439
  %conv14 = zext i16 %23 to i32, !dbg !4439
  %and15 = and i32 %conv14, 2016, !dbg !4440
  %shr16 = ashr i32 %and15, 9, !dbg !4441
  %or17 = or i32 %shr13, %shr16, !dbg !4442
  %conv18 = trunc i32 %or17 to i8, !dbg !4443
  %24 = load i8*, i8** %d, align 8, !dbg !4444
  %incdec.ptr19 = getelementptr inbounds i8, i8* %24, i32 1, !dbg !4444
  store i8* %incdec.ptr19, i8** %d, align 8, !dbg !4444
  store i8 %conv18, i8* %24, align 1, !dbg !4445
  %25 = load i16, i16* %bgr, align 2, !dbg !4446
  %conv20 = zext i16 %25 to i32, !dbg !4446
  %and21 = and i32 %conv20, 63488, !dbg !4447
  %shr22 = ashr i32 %and21, 8, !dbg !4448
  %26 = load i16, i16* %bgr, align 2, !dbg !4449
  %conv23 = zext i16 %26 to i32, !dbg !4449
  %and24 = and i32 %conv23, 63488, !dbg !4450
  %shr25 = ashr i32 %and24, 13, !dbg !4451
  %or26 = or i32 %shr22, %shr25, !dbg !4452
  %conv27 = trunc i32 %or26 to i8, !dbg !4453
  %27 = load i8*, i8** %d, align 8, !dbg !4454
  %incdec.ptr28 = getelementptr inbounds i8, i8* %27, i32 1, !dbg !4454
  store i8* %incdec.ptr28, i8** %d, align 8, !dbg !4454
  store i8 %conv27, i8* %27, align 1, !dbg !4455
  br label %while.cond4, !dbg !4456, !llvm.loop !4457

while.end29:                                      ; preds = %while.cond4
  ret void, !dbg !4458
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb16to32_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !4459 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %end = alloca i16*, align 8
  %mm_end = alloca i16*, align 8
  %d = alloca i8*, align 8
  %s = alloca i16*, align 8
  %bgr = alloca i16, align 2
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !4460, metadata !73), !dbg !4461
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !4462, metadata !73), !dbg !4463
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !4464, metadata !73), !dbg !4465
  call void @llvm.dbg.declare(metadata i16** %end, metadata !4466, metadata !73), !dbg !4467
  call void @llvm.dbg.declare(metadata i16** %mm_end, metadata !4468, metadata !73), !dbg !4469
  call void @llvm.dbg.declare(metadata i8** %d, metadata !4470, metadata !73), !dbg !4471
  %0 = load i8*, i8** %dst.addr, align 8, !dbg !4472
  store i8* %0, i8** %d, align 8, !dbg !4471
  call void @llvm.dbg.declare(metadata i16** %s, metadata !4473, metadata !73), !dbg !4474
  %1 = load i8*, i8** %src.addr, align 8, !dbg !4475
  %2 = bitcast i8* %1 to i16*, !dbg !4476
  store i16* %2, i16** %s, align 8, !dbg !4474
  %3 = load i16*, i16** %s, align 8, !dbg !4477
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !4478
  %div = sdiv i32 %4, 2, !dbg !4479
  %idx.ext = sext i32 %div to i64, !dbg !4480
  %add.ptr = getelementptr inbounds i16, i16* %3, i64 %idx.ext, !dbg !4480
  store i16* %add.ptr, i16** %end, align 8, !dbg !4481
  %5 = load i16*, i16** %s, align 8, !dbg !4482
  call void asm sideeffect "prefetchnta    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %5) #5, !dbg !4483, !srcloc !4484
  call void asm sideeffect "pxor    %mm7,%mm7    \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4485, !srcloc !4486
  call void asm sideeffect "pcmpeqd %mm6,%mm6    \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4487, !srcloc !4488
  %6 = load i16*, i16** %end, align 8, !dbg !4489
  %add.ptr1 = getelementptr inbounds i16, i16* %6, i64 -3, !dbg !4490
  store i16* %add.ptr1, i16** %mm_end, align 8, !dbg !4491
  br label %while.cond, !dbg !4492

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i16*, i16** %s, align 8, !dbg !4493
  %8 = load i16*, i16** %mm_end, align 8, !dbg !4495
  %cmp = icmp ult i16* %7, %8, !dbg !4496
  br i1 %cmp, label %while.body, label %while.end, !dbg !4497

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %d, align 8, !dbg !4498
  %10 = load i16*, i16** %s, align 8, !dbg !4500
  call void asm sideeffect "prefetchnta  32($1)           \0A\09movq        ($1), %mm0    \0A\09movq        ($1), %mm1    \0A\09movq        ($1), %mm2    \0A\09pand          $2, %mm0    \0A\09pand          $3, %mm1    \0A\09pand          $4, %mm2    \0A\09psllq         $$5, %mm0    \0A\09psrlq         $$1, %mm2    \0A\09pmulhw        $5, %mm0    \0A\09pmulhw        mul16_mid, %mm1    \0A\09pmulhw        mul15_hi, %mm2    \0A\09packuswb   %mm7, %mm0    \0A\09packuswb   %mm7, %mm1    \0A\09packuswb   %mm7, %mm2    \0A\09punpcklbw  %mm1, %mm0    \0A\09punpcklbw  %mm6, %mm2    \0A\09movq       %mm0, %mm3    \0A\09punpcklwd  %mm2, %mm0    \0A\09punpckhwd  %mm2, %mm3    \0A\09movntq     %mm0,  ($0)    \0A\09movntq     %mm3, 8($0)    \0A\09", "r,r,*m,*m,*m,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %9, i16* %10, i64* @mask15b, i64* @mask16g, i64* @mask16r, i64* @mul15_mid) #5, !dbg !4501, !srcloc !4502
  %11 = load i8*, i8** %d, align 8, !dbg !4503
  %add.ptr2 = getelementptr inbounds i8, i8* %11, i64 16, !dbg !4503
  store i8* %add.ptr2, i8** %d, align 8, !dbg !4503
  %12 = load i16*, i16** %s, align 8, !dbg !4504
  %add.ptr3 = getelementptr inbounds i16, i16* %12, i64 4, !dbg !4504
  store i16* %add.ptr3, i16** %s, align 8, !dbg !4504
  br label %while.cond, !dbg !4505, !llvm.loop !4507

while.end:                                        ; preds = %while.cond
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4508, !srcloc !4509
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4510, !srcloc !4511
  br label %while.cond4, !dbg !4512

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i16*, i16** %s, align 8, !dbg !4513
  %14 = load i16*, i16** %end, align 8, !dbg !4514
  %cmp5 = icmp ult i16* %13, %14, !dbg !4515
  br i1 %cmp5, label %while.body6, label %while.end30, !dbg !4516

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i16* %bgr, metadata !4517, metadata !73), !dbg !4519
  %15 = load i16*, i16** %s, align 8, !dbg !4520
  %incdec.ptr = getelementptr inbounds i16, i16* %15, i32 1, !dbg !4520
  store i16* %incdec.ptr, i16** %s, align 8, !dbg !4520
  %16 = load i16, i16* %15, align 2, !dbg !4521
  store i16 %16, i16* %bgr, align 2, !dbg !4522
  %17 = load i16, i16* %bgr, align 2, !dbg !4523
  %conv = zext i16 %17 to i32, !dbg !4523
  %and = and i32 %conv, 31, !dbg !4524
  %shl = shl i32 %and, 3, !dbg !4525
  %18 = load i16, i16* %bgr, align 2, !dbg !4526
  %conv7 = zext i16 %18 to i32, !dbg !4526
  %and8 = and i32 %conv7, 31, !dbg !4527
  %shr = ashr i32 %and8, 2, !dbg !4528
  %or = or i32 %shl, %shr, !dbg !4529
  %conv9 = trunc i32 %or to i8, !dbg !4530
  %19 = load i8*, i8** %d, align 8, !dbg !4531
  %incdec.ptr10 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !4531
  store i8* %incdec.ptr10, i8** %d, align 8, !dbg !4531
  store i8 %conv9, i8* %19, align 1, !dbg !4532
  %20 = load i16, i16* %bgr, align 2, !dbg !4533
  %conv11 = zext i16 %20 to i32, !dbg !4533
  %and12 = and i32 %conv11, 2016, !dbg !4534
  %shr13 = ashr i32 %and12, 3, !dbg !4535
  %21 = load i16, i16* %bgr, align 2, !dbg !4536
  %conv14 = zext i16 %21 to i32, !dbg !4536
  %and15 = and i32 %conv14, 2016, !dbg !4537
  %shr16 = ashr i32 %and15, 9, !dbg !4538
  %or17 = or i32 %shr13, %shr16, !dbg !4539
  %conv18 = trunc i32 %or17 to i8, !dbg !4540
  %22 = load i8*, i8** %d, align 8, !dbg !4541
  %incdec.ptr19 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !4541
  store i8* %incdec.ptr19, i8** %d, align 8, !dbg !4541
  store i8 %conv18, i8* %22, align 1, !dbg !4542
  %23 = load i16, i16* %bgr, align 2, !dbg !4543
  %conv20 = zext i16 %23 to i32, !dbg !4543
  %and21 = and i32 %conv20, 63488, !dbg !4544
  %shr22 = ashr i32 %and21, 8, !dbg !4545
  %24 = load i16, i16* %bgr, align 2, !dbg !4546
  %conv23 = zext i16 %24 to i32, !dbg !4546
  %and24 = and i32 %conv23, 63488, !dbg !4547
  %shr25 = ashr i32 %and24, 13, !dbg !4548
  %or26 = or i32 %shr22, %shr25, !dbg !4549
  %conv27 = trunc i32 %or26 to i8, !dbg !4550
  %25 = load i8*, i8** %d, align 8, !dbg !4551
  %incdec.ptr28 = getelementptr inbounds i8, i8* %25, i32 1, !dbg !4551
  store i8* %incdec.ptr28, i8** %d, align 8, !dbg !4551
  store i8 %conv27, i8* %25, align 1, !dbg !4552
  %26 = load i8*, i8** %d, align 8, !dbg !4553
  %incdec.ptr29 = getelementptr inbounds i8, i8* %26, i32 1, !dbg !4553
  store i8* %incdec.ptr29, i8** %d, align 8, !dbg !4553
  store i8 -1, i8* %26, align 1, !dbg !4554
  br label %while.cond4, !dbg !4555, !llvm.loop !4556

while.end30:                                      ; preds = %while.cond4
  ret void, !dbg !4557
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb16to15_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !4558 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %x = alloca i32, align 4
  %x13 = alloca i16, align 2
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !4559, metadata !73), !dbg !4560
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !4561, metadata !73), !dbg !4562
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !4563, metadata !73), !dbg !4564
  call void @llvm.dbg.declare(metadata i8** %s, metadata !4565, metadata !73), !dbg !4566
  %0 = load i8*, i8** %src.addr, align 8, !dbg !4567
  store i8* %0, i8** %s, align 8, !dbg !4566
  call void @llvm.dbg.declare(metadata i8** %d, metadata !4568, metadata !73), !dbg !4569
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !4570
  store i8* %1, i8** %d, align 8, !dbg !4569
  call void @llvm.dbg.declare(metadata i8** %end, metadata !4571, metadata !73), !dbg !4572
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !4573, metadata !73), !dbg !4574
  %2 = load i8*, i8** %s, align 8, !dbg !4575
  %3 = load i32, i32* %src_size.addr, align 4, !dbg !4576
  %idx.ext = sext i32 %3 to i64, !dbg !4577
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext, !dbg !4577
  store i8* %add.ptr, i8** %end, align 8, !dbg !4578
  %4 = load i8*, i8** %s, align 8, !dbg !4579
  call void asm sideeffect "prefetchnta    $0", "*m,~{dirflag},~{fpsr},~{flags}"(i8* %4) #5, !dbg !4580, !srcloc !4581
  call void asm sideeffect "movq        $0, %mm7", "*m,~{dirflag},~{fpsr},~{flags}"(i64* @mask15rg) #5, !dbg !4582, !srcloc !4583
  call void asm sideeffect "movq        $0, %mm6", "*m,~{dirflag},~{fpsr},~{flags}"(i64* @mask15b) #5, !dbg !4584, !srcloc !4585
  %5 = load i8*, i8** %end, align 8, !dbg !4586
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 -15, !dbg !4587
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !4588
  br label %while.cond, !dbg !4589

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i8*, i8** %s, align 8, !dbg !4590
  %7 = load i8*, i8** %mm_end, align 8, !dbg !4592
  %cmp = icmp ult i8* %6, %7, !dbg !4593
  br i1 %cmp, label %while.body, label %while.end, !dbg !4594

while.body:                                       ; preds = %while.cond
  %8 = load i8*, i8** %d, align 8, !dbg !4595
  %9 = load i8*, i8** %s, align 8, !dbg !4597
  call void asm sideeffect "prefetchnta 32($1)        \0A\09movq      ($1), %mm0  \0A\09movq     8($1), %mm2  \0A\09movq     %mm0, %mm1  \0A\09movq     %mm2, %mm3  \0A\09psrlq       $$1, %mm0  \0A\09psrlq       $$1, %mm2  \0A\09pand     %mm7, %mm0  \0A\09pand     %mm7, %mm2  \0A\09pand     %mm6, %mm1  \0A\09pand     %mm6, %mm3  \0A\09por      %mm1, %mm0  \0A\09por      %mm3, %mm2  \0A\09movntq   %mm0,  ($0)  \0A\09movntq   %mm2, 8($0)", "r,r,~{dirflag},~{fpsr},~{flags}"(i8* %8, i8* %9) #5, !dbg !4598, !srcloc !4599
  %10 = load i8*, i8** %d, align 8, !dbg !4600
  %add.ptr2 = getelementptr inbounds i8, i8* %10, i64 16, !dbg !4600
  store i8* %add.ptr2, i8** %d, align 8, !dbg !4600
  %11 = load i8*, i8** %s, align 8, !dbg !4601
  %add.ptr3 = getelementptr inbounds i8, i8* %11, i64 16, !dbg !4601
  store i8* %add.ptr3, i8** %s, align 8, !dbg !4601
  br label %while.cond, !dbg !4602, !llvm.loop !4604

while.end:                                        ; preds = %while.cond
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4605, !srcloc !4606
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4607, !srcloc !4608
  %12 = load i8*, i8** %end, align 8, !dbg !4609
  %add.ptr4 = getelementptr inbounds i8, i8* %12, i64 -3, !dbg !4610
  store i8* %add.ptr4, i8** %mm_end, align 8, !dbg !4611
  br label %while.cond5, !dbg !4612

while.cond5:                                      ; preds = %while.body7, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !4613
  %14 = load i8*, i8** %mm_end, align 8, !dbg !4614
  %cmp6 = icmp ult i8* %13, %14, !dbg !4615
  br i1 %cmp6, label %while.body7, label %while.end11, !dbg !4616

while.body7:                                      ; preds = %while.cond5
  call void @llvm.dbg.declare(metadata i32* %x, metadata !4617, metadata !73), !dbg !4619
  %15 = load i8*, i8** %s, align 8, !dbg !4620
  %16 = bitcast i8* %15 to i32*, !dbg !4621
  %17 = load i32, i32* %16, align 4, !dbg !4621
  store i32 %17, i32* %x, align 4, !dbg !4619
  %18 = load i32, i32* %x, align 4, !dbg !4622
  %shr = lshr i32 %18, 1, !dbg !4623
  %and = and i32 %shr, 2145419232, !dbg !4624
  %19 = load i32, i32* %x, align 4, !dbg !4625
  %and8 = and i32 %19, 2031647, !dbg !4626
  %or = or i32 %and, %and8, !dbg !4627
  %20 = load i8*, i8** %d, align 8, !dbg !4628
  %21 = bitcast i8* %20 to i32*, !dbg !4629
  store i32 %or, i32* %21, align 4, !dbg !4630
  %22 = load i8*, i8** %s, align 8, !dbg !4631
  %add.ptr9 = getelementptr inbounds i8, i8* %22, i64 4, !dbg !4631
  store i8* %add.ptr9, i8** %s, align 8, !dbg !4631
  %23 = load i8*, i8** %d, align 8, !dbg !4632
  %add.ptr10 = getelementptr inbounds i8, i8* %23, i64 4, !dbg !4632
  store i8* %add.ptr10, i8** %d, align 8, !dbg !4632
  br label %while.cond5, !dbg !4633, !llvm.loop !4634

while.end11:                                      ; preds = %while.cond5
  %24 = load i8*, i8** %s, align 8, !dbg !4635
  %25 = load i8*, i8** %end, align 8, !dbg !4637
  %cmp12 = icmp ult i8* %24, %25, !dbg !4638
  br i1 %cmp12, label %if.then, label %if.end, !dbg !4639

if.then:                                          ; preds = %while.end11
  call void @llvm.dbg.declare(metadata i16* %x13, metadata !4640, metadata !73), !dbg !4642
  %26 = load i8*, i8** %s, align 8, !dbg !4643
  %27 = bitcast i8* %26 to i16*, !dbg !4644
  %28 = load i16, i16* %27, align 2, !dbg !4644
  store i16 %28, i16* %x13, align 2, !dbg !4642
  %29 = load i16, i16* %x13, align 2, !dbg !4645
  %conv = zext i16 %29 to i32, !dbg !4645
  %shr14 = ashr i32 %conv, 1, !dbg !4646
  %and15 = and i32 %shr14, 32736, !dbg !4647
  %30 = load i16, i16* %x13, align 2, !dbg !4648
  %conv16 = zext i16 %30 to i32, !dbg !4648
  %and17 = and i32 %conv16, 31, !dbg !4649
  %or18 = or i32 %and15, %and17, !dbg !4650
  %conv19 = trunc i32 %or18 to i16, !dbg !4651
  %31 = load i8*, i8** %d, align 8, !dbg !4652
  %32 = bitcast i8* %31 to i16*, !dbg !4653
  store i16 %conv19, i16* %32, align 2, !dbg !4654
  br label %if.end, !dbg !4655

if.end:                                           ; preds = %if.then, %while.end11
  ret void, !dbg !4656
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24tobgr16_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !4657 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %b = alloca i32, align 4
  %g = alloca i32, align 4
  %r = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !4658, metadata !73), !dbg !4659
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !4660, metadata !73), !dbg !4661
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !4662, metadata !73), !dbg !4663
  call void @llvm.dbg.declare(metadata i8** %s, metadata !4664, metadata !73), !dbg !4665
  %0 = load i8*, i8** %src.addr, align 8, !dbg !4666
  store i8* %0, i8** %s, align 8, !dbg !4665
  call void @llvm.dbg.declare(metadata i8** %end, metadata !4667, metadata !73), !dbg !4668
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !4669, metadata !73), !dbg !4670
  call void @llvm.dbg.declare(metadata i16** %d, metadata !4671, metadata !73), !dbg !4672
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !4673
  %2 = bitcast i8* %1 to i16*, !dbg !4674
  store i16* %2, i16** %d, align 8, !dbg !4672
  %3 = load i8*, i8** %s, align 8, !dbg !4675
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !4676
  %idx.ext = sext i32 %4 to i64, !dbg !4677
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !4677
  store i8* %add.ptr, i8** %end, align 8, !dbg !4678
  %5 = load i8*, i8** %src.addr, align 8, !dbg !4679
  call void asm sideeffect "prefetchnta    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %5) #5, !dbg !4680, !srcloc !4681
  call void asm sideeffect "movq         $0, %mm7     \0A\09movq         $1, %mm6     \0A\09", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i64* @red_16mask, i64* @green_16mask) #5, !dbg !4682, !srcloc !4683
  %6 = load i8*, i8** %end, align 8, !dbg !4684
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 -11, !dbg !4685
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !4686
  br label %while.cond, !dbg !4687

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i8*, i8** %s, align 8, !dbg !4688
  %8 = load i8*, i8** %mm_end, align 8, !dbg !4690
  %cmp = icmp ult i8* %7, %8, !dbg !4691
  br i1 %cmp, label %while.body, label %while.end, !dbg !4692

while.body:                                       ; preds = %while.cond
  %9 = load i16*, i16** %d, align 8, !dbg !4693
  %10 = load i8*, i8** %s, align 8, !dbg !4695
  call void asm sideeffect "prefetchnta  32($1)           \0A\09movd        ($1), %mm0    \0A\09movd       3($1), %mm3    \0A\09punpckldq  6($1), %mm0    \0A\09punpckldq  9($1), %mm3    \0A\09movq       %mm0, %mm1    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm3, %mm4    \0A\09movq       %mm3, %mm5    \0A\09psrlq         $$3, %mm0    \0A\09psrlq         $$3, %mm3    \0A\09pand          $2, %mm0    \0A\09pand          $2, %mm3    \0A\09psrlq         $$5, %mm1    \0A\09psrlq         $$5, %mm4    \0A\09pand       %mm6, %mm1    \0A\09pand       %mm6, %mm4    \0A\09psrlq         $$8, %mm2    \0A\09psrlq         $$8, %mm5    \0A\09pand       %mm7, %mm2    \0A\09pand       %mm7, %mm5    \0A\09por        %mm1, %mm0    \0A\09por        %mm4, %mm3    \0A\09por        %mm2, %mm0    \0A\09por        %mm5, %mm3    \0A\09psllq        $$16, %mm3    \0A\09por        %mm3, %mm0    \0A\09movntq     %mm0, ($0)     \0A\09", "r,r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %9, i8* %10, i64* @blue_16mask) #5, !dbg !4696, !srcloc !4697
  %11 = load i16*, i16** %d, align 8, !dbg !4698
  %add.ptr2 = getelementptr inbounds i16, i16* %11, i64 4, !dbg !4698
  store i16* %add.ptr2, i16** %d, align 8, !dbg !4698
  %12 = load i8*, i8** %s, align 8, !dbg !4699
  %add.ptr3 = getelementptr inbounds i8, i8* %12, i64 12, !dbg !4699
  store i8* %add.ptr3, i8** %s, align 8, !dbg !4699
  br label %while.cond, !dbg !4700, !llvm.loop !4702

while.end:                                        ; preds = %while.cond
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4703, !srcloc !4704
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4705, !srcloc !4706
  br label %while.cond4, !dbg !4707

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !4708
  %14 = load i8*, i8** %end, align 8, !dbg !4709
  %cmp5 = icmp ult i8* %13, %14, !dbg !4710
  br i1 %cmp5, label %while.body6, label %while.end16, !dbg !4711

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i32* %b, metadata !4712, metadata !73), !dbg !4714
  %15 = load i8*, i8** %s, align 8, !dbg !4715
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1, !dbg !4715
  store i8* %incdec.ptr, i8** %s, align 8, !dbg !4715
  %16 = load i8, i8* %15, align 1, !dbg !4716
  %conv = zext i8 %16 to i32, !dbg !4716
  store i32 %conv, i32* %b, align 4, !dbg !4714
  call void @llvm.dbg.declare(metadata i32* %g, metadata !4717, metadata !73), !dbg !4718
  %17 = load i8*, i8** %s, align 8, !dbg !4719
  %incdec.ptr7 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !4719
  store i8* %incdec.ptr7, i8** %s, align 8, !dbg !4719
  %18 = load i8, i8* %17, align 1, !dbg !4720
  %conv8 = zext i8 %18 to i32, !dbg !4720
  store i32 %conv8, i32* %g, align 4, !dbg !4718
  call void @llvm.dbg.declare(metadata i32* %r, metadata !4721, metadata !73), !dbg !4722
  %19 = load i8*, i8** %s, align 8, !dbg !4723
  %incdec.ptr9 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !4723
  store i8* %incdec.ptr9, i8** %s, align 8, !dbg !4723
  %20 = load i8, i8* %19, align 1, !dbg !4724
  %conv10 = zext i8 %20 to i32, !dbg !4724
  store i32 %conv10, i32* %r, align 4, !dbg !4722
  %21 = load i32, i32* %b, align 4, !dbg !4725
  %shr = ashr i32 %21, 3, !dbg !4726
  %22 = load i32, i32* %g, align 4, !dbg !4727
  %and = and i32 %22, 252, !dbg !4728
  %shl = shl i32 %and, 3, !dbg !4729
  %or = or i32 %shr, %shl, !dbg !4730
  %23 = load i32, i32* %r, align 4, !dbg !4731
  %and11 = and i32 %23, 248, !dbg !4732
  %shl12 = shl i32 %and11, 8, !dbg !4733
  %or13 = or i32 %or, %shl12, !dbg !4734
  %conv14 = trunc i32 %or13 to i16, !dbg !4735
  %24 = load i16*, i16** %d, align 8, !dbg !4736
  %incdec.ptr15 = getelementptr inbounds i16, i16* %24, i32 1, !dbg !4736
  store i16* %incdec.ptr15, i16** %d, align 8, !dbg !4736
  store i16 %conv14, i16* %24, align 2, !dbg !4737
  br label %while.cond4, !dbg !4738, !llvm.loop !4739

while.end16:                                      ; preds = %while.cond4
  ret void, !dbg !4740
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24tobgr15_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !4741 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %b = alloca i32, align 4
  %g = alloca i32, align 4
  %r = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !4742, metadata !73), !dbg !4743
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !4744, metadata !73), !dbg !4745
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !4746, metadata !73), !dbg !4747
  call void @llvm.dbg.declare(metadata i8** %s, metadata !4748, metadata !73), !dbg !4749
  %0 = load i8*, i8** %src.addr, align 8, !dbg !4750
  store i8* %0, i8** %s, align 8, !dbg !4749
  call void @llvm.dbg.declare(metadata i8** %end, metadata !4751, metadata !73), !dbg !4752
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !4753, metadata !73), !dbg !4754
  call void @llvm.dbg.declare(metadata i16** %d, metadata !4755, metadata !73), !dbg !4756
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !4757
  %2 = bitcast i8* %1 to i16*, !dbg !4758
  store i16* %2, i16** %d, align 8, !dbg !4756
  %3 = load i8*, i8** %s, align 8, !dbg !4759
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !4760
  %idx.ext = sext i32 %4 to i64, !dbg !4761
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !4761
  store i8* %add.ptr, i8** %end, align 8, !dbg !4762
  %5 = load i8*, i8** %src.addr, align 8, !dbg !4763
  call void asm sideeffect "prefetchnta    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %5) #5, !dbg !4764, !srcloc !4765
  call void asm sideeffect "movq          $0, %mm7    \0A\09movq          $1, %mm6    \0A\09", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i64* @red_15mask, i64* @green_15mask) #5, !dbg !4766, !srcloc !4767
  %6 = load i8*, i8** %end, align 8, !dbg !4768
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 -11, !dbg !4769
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !4770
  br label %while.cond, !dbg !4771

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i8*, i8** %s, align 8, !dbg !4772
  %8 = load i8*, i8** %mm_end, align 8, !dbg !4774
  %cmp = icmp ult i8* %7, %8, !dbg !4775
  br i1 %cmp, label %while.body, label %while.end, !dbg !4776

while.body:                                       ; preds = %while.cond
  %9 = load i16*, i16** %d, align 8, !dbg !4777
  %10 = load i8*, i8** %s, align 8, !dbg !4779
  call void asm sideeffect "prefetchnta  32($1)           \0A\09movd        ($1), %mm0    \0A\09movd       3($1), %mm3    \0A\09punpckldq  6($1), %mm0    \0A\09punpckldq  9($1), %mm3    \0A\09movq       %mm0, %mm1    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm3, %mm4    \0A\09movq       %mm3, %mm5    \0A\09psrlq         $$3, %mm0    \0A\09psrlq         $$3, %mm3    \0A\09pand          $2, %mm0    \0A\09pand          $2, %mm3    \0A\09psrlq         $$6, %mm1    \0A\09psrlq         $$6, %mm4    \0A\09pand       %mm6, %mm1    \0A\09pand       %mm6, %mm4    \0A\09psrlq         $$9, %mm2    \0A\09psrlq         $$9, %mm5    \0A\09pand       %mm7, %mm2    \0A\09pand       %mm7, %mm5    \0A\09por        %mm1, %mm0    \0A\09por        %mm4, %mm3    \0A\09por        %mm2, %mm0    \0A\09por        %mm5, %mm3    \0A\09psllq        $$16, %mm3    \0A\09por        %mm3, %mm0    \0A\09movntq     %mm0, ($0)     \0A\09", "r,r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %9, i8* %10, i64* @blue_15mask) #5, !dbg !4780, !srcloc !4781
  %11 = load i16*, i16** %d, align 8, !dbg !4782
  %add.ptr2 = getelementptr inbounds i16, i16* %11, i64 4, !dbg !4782
  store i16* %add.ptr2, i16** %d, align 8, !dbg !4782
  %12 = load i8*, i8** %s, align 8, !dbg !4783
  %add.ptr3 = getelementptr inbounds i8, i8* %12, i64 12, !dbg !4783
  store i8* %add.ptr3, i8** %s, align 8, !dbg !4783
  br label %while.cond, !dbg !4784, !llvm.loop !4786

while.end:                                        ; preds = %while.cond
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4787, !srcloc !4788
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4789, !srcloc !4790
  br label %while.cond4, !dbg !4791

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !4792
  %14 = load i8*, i8** %end, align 8, !dbg !4793
  %cmp5 = icmp ult i8* %13, %14, !dbg !4794
  br i1 %cmp5, label %while.body6, label %while.end16, !dbg !4795

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i32* %b, metadata !4796, metadata !73), !dbg !4798
  %15 = load i8*, i8** %s, align 8, !dbg !4799
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1, !dbg !4799
  store i8* %incdec.ptr, i8** %s, align 8, !dbg !4799
  %16 = load i8, i8* %15, align 1, !dbg !4800
  %conv = zext i8 %16 to i32, !dbg !4800
  store i32 %conv, i32* %b, align 4, !dbg !4798
  call void @llvm.dbg.declare(metadata i32* %g, metadata !4801, metadata !73), !dbg !4802
  %17 = load i8*, i8** %s, align 8, !dbg !4803
  %incdec.ptr7 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !4803
  store i8* %incdec.ptr7, i8** %s, align 8, !dbg !4803
  %18 = load i8, i8* %17, align 1, !dbg !4804
  %conv8 = zext i8 %18 to i32, !dbg !4804
  store i32 %conv8, i32* %g, align 4, !dbg !4802
  call void @llvm.dbg.declare(metadata i32* %r, metadata !4805, metadata !73), !dbg !4806
  %19 = load i8*, i8** %s, align 8, !dbg !4807
  %incdec.ptr9 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !4807
  store i8* %incdec.ptr9, i8** %s, align 8, !dbg !4807
  %20 = load i8, i8* %19, align 1, !dbg !4808
  %conv10 = zext i8 %20 to i32, !dbg !4808
  store i32 %conv10, i32* %r, align 4, !dbg !4806
  %21 = load i32, i32* %b, align 4, !dbg !4809
  %shr = ashr i32 %21, 3, !dbg !4810
  %22 = load i32, i32* %g, align 4, !dbg !4811
  %and = and i32 %22, 248, !dbg !4812
  %shl = shl i32 %and, 2, !dbg !4813
  %or = or i32 %shr, %shl, !dbg !4814
  %23 = load i32, i32* %r, align 4, !dbg !4815
  %and11 = and i32 %23, 248, !dbg !4816
  %shl12 = shl i32 %and11, 7, !dbg !4817
  %or13 = or i32 %or, %shl12, !dbg !4818
  %conv14 = trunc i32 %or13 to i16, !dbg !4819
  %24 = load i16*, i16** %d, align 8, !dbg !4820
  %incdec.ptr15 = getelementptr inbounds i16, i16* %24, i32 1, !dbg !4820
  store i16* %incdec.ptr15, i16** %d, align 8, !dbg !4820
  store i16 %conv14, i16* %24, align 2, !dbg !4821
  br label %while.cond4, !dbg !4822, !llvm.loop !4823

while.end16:                                      ; preds = %while.cond4
  ret void, !dbg !4824
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24tobgr32_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !4825 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %dest = alloca i8*, align 8
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !4826, metadata !73), !dbg !4827
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !4828, metadata !73), !dbg !4829
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !4830, metadata !73), !dbg !4831
  call void @llvm.dbg.declare(metadata i8** %dest, metadata !4832, metadata !73), !dbg !4833
  %0 = load i8*, i8** %dst.addr, align 8, !dbg !4834
  store i8* %0, i8** %dest, align 8, !dbg !4833
  call void @llvm.dbg.declare(metadata i8** %s, metadata !4835, metadata !73), !dbg !4836
  %1 = load i8*, i8** %src.addr, align 8, !dbg !4837
  store i8* %1, i8** %s, align 8, !dbg !4836
  call void @llvm.dbg.declare(metadata i8** %end, metadata !4838, metadata !73), !dbg !4839
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !4840, metadata !73), !dbg !4841
  %2 = load i8*, i8** %s, align 8, !dbg !4842
  %3 = load i32, i32* %src_size.addr, align 4, !dbg !4843
  %idx.ext = sext i32 %3 to i64, !dbg !4844
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext, !dbg !4844
  store i8* %add.ptr, i8** %end, align 8, !dbg !4845
  %4 = load i8*, i8** %s, align 8, !dbg !4846
  call void asm sideeffect "prefetchnta    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %4) #5, !dbg !4847, !srcloc !4848
  %5 = load i8*, i8** %end, align 8, !dbg !4849
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 -23, !dbg !4850
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !4851
  call void asm sideeffect "movq        $0, %mm7", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* @mask32a) #5, !dbg !4852, !srcloc !4853
  br label %while.cond, !dbg !4854

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i8*, i8** %s, align 8, !dbg !4855
  %7 = load i8*, i8** %mm_end, align 8, !dbg !4857
  %cmp = icmp ult i8* %6, %7, !dbg !4858
  br i1 %cmp, label %while.body, label %while.end, !dbg !4859

while.body:                                       ; preds = %while.cond
  %8 = load i8*, i8** %dest, align 8, !dbg !4860
  %9 = load i8*, i8** %s, align 8, !dbg !4862
  call void asm sideeffect "prefetchnta  32($1)           \0A\09movd        ($1), %mm0    \0A\09punpckldq  3($1), %mm0    \0A\09movd       6($1), %mm1    \0A\09punpckldq  9($1), %mm1    \0A\09movd      12($1), %mm2    \0A\09punpckldq 15($1), %mm2    \0A\09movd      18($1), %mm3    \0A\09punpckldq 21($1), %mm3    \0A\09por        %mm7, %mm0    \0A\09por        %mm7, %mm1    \0A\09por        %mm7, %mm2    \0A\09por        %mm7, %mm3    \0A\09movntq     %mm0,   ($0)   \0A\09movntq     %mm1,  8($0)   \0A\09movntq     %mm2, 16($0)   \0A\09movntq     %mm3, 24($0)", "r,r,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %8, i8* %9) #5, !dbg !4863, !srcloc !4864
  %10 = load i8*, i8** %dest, align 8, !dbg !4865
  %add.ptr2 = getelementptr inbounds i8, i8* %10, i64 32, !dbg !4865
  store i8* %add.ptr2, i8** %dest, align 8, !dbg !4865
  %11 = load i8*, i8** %s, align 8, !dbg !4866
  %add.ptr3 = getelementptr inbounds i8, i8* %11, i64 24, !dbg !4866
  store i8* %add.ptr3, i8** %s, align 8, !dbg !4866
  br label %while.cond, !dbg !4867, !llvm.loop !4869

while.end:                                        ; preds = %while.cond
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4870, !srcloc !4871
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4872, !srcloc !4873
  br label %while.cond4, !dbg !4874

while.cond4:                                      ; preds = %while.body6, %while.end
  %12 = load i8*, i8** %s, align 8, !dbg !4875
  %13 = load i8*, i8** %end, align 8, !dbg !4876
  %cmp5 = icmp ult i8* %12, %13, !dbg !4877
  br i1 %cmp5, label %while.body6, label %while.end13, !dbg !4878

while.body6:                                      ; preds = %while.cond4
  %14 = load i8*, i8** %s, align 8, !dbg !4879
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1, !dbg !4879
  store i8* %incdec.ptr, i8** %s, align 8, !dbg !4879
  %15 = load i8, i8* %14, align 1, !dbg !4881
  %16 = load i8*, i8** %dest, align 8, !dbg !4882
  %incdec.ptr7 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !4882
  store i8* %incdec.ptr7, i8** %dest, align 8, !dbg !4882
  store i8 %15, i8* %16, align 1, !dbg !4883
  %17 = load i8*, i8** %s, align 8, !dbg !4884
  %incdec.ptr8 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !4884
  store i8* %incdec.ptr8, i8** %s, align 8, !dbg !4884
  %18 = load i8, i8* %17, align 1, !dbg !4885
  %19 = load i8*, i8** %dest, align 8, !dbg !4886
  %incdec.ptr9 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !4886
  store i8* %incdec.ptr9, i8** %dest, align 8, !dbg !4886
  store i8 %18, i8* %19, align 1, !dbg !4887
  %20 = load i8*, i8** %s, align 8, !dbg !4888
  %incdec.ptr10 = getelementptr inbounds i8, i8* %20, i32 1, !dbg !4888
  store i8* %incdec.ptr10, i8** %s, align 8, !dbg !4888
  %21 = load i8, i8* %20, align 1, !dbg !4889
  %22 = load i8*, i8** %dest, align 8, !dbg !4890
  %incdec.ptr11 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !4890
  store i8* %incdec.ptr11, i8** %dest, align 8, !dbg !4890
  store i8 %21, i8* %22, align 1, !dbg !4891
  %23 = load i8*, i8** %dest, align 8, !dbg !4892
  %incdec.ptr12 = getelementptr inbounds i8, i8* %23, i32 1, !dbg !4892
  store i8* %incdec.ptr12, i8** %dest, align 8, !dbg !4892
  store i8 -1, i8* %23, align 1, !dbg !4893
  br label %while.cond4, !dbg !4894, !llvm.loop !4895

while.end13:                                      ; preds = %while.cond4
  ret void, !dbg !4896
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb32to16_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !4897 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %rgb = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !4898, metadata !73), !dbg !4899
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !4900, metadata !73), !dbg !4901
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !4902, metadata !73), !dbg !4903
  call void @llvm.dbg.declare(metadata i8** %s, metadata !4904, metadata !73), !dbg !4905
  %0 = load i8*, i8** %src.addr, align 8, !dbg !4906
  store i8* %0, i8** %s, align 8, !dbg !4905
  call void @llvm.dbg.declare(metadata i8** %end, metadata !4907, metadata !73), !dbg !4908
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !4909, metadata !73), !dbg !4910
  call void @llvm.dbg.declare(metadata i16** %d, metadata !4911, metadata !73), !dbg !4912
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !4913
  %2 = bitcast i8* %1 to i16*, !dbg !4914
  store i16* %2, i16** %d, align 8, !dbg !4912
  %3 = load i8*, i8** %s, align 8, !dbg !4915
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !4916
  %idx.ext = sext i32 %4 to i64, !dbg !4917
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !4917
  store i8* %add.ptr, i8** %end, align 8, !dbg !4918
  %5 = load i8*, i8** %end, align 8, !dbg !4919
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 -15, !dbg !4920
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !4921
  %6 = load i16*, i16** %d, align 8, !dbg !4922
  %7 = load i8*, i8** %s, align 8, !dbg !4922
  %8 = load i8*, i8** %mm_end, align 8, !dbg !4923
  %9 = call { i16*, i8* } asm sideeffect "movq           $3, %mm5   \0A\09movq           $4, %mm6   \0A\09movq           $5, %mm7   \0A\09jmp 2f                     \0A\09.p2align        4          \0A\091:                         \0A\09prefetchnta   32($1)          \0A\09movd         ($1), %mm0   \0A\09movd        4($1), %mm3   \0A\09punpckldq   8($1), %mm0   \0A\09punpckldq  12($1), %mm3   \0A\09movq        %mm0, %mm1   \0A\09movq        %mm3, %mm4   \0A\09pand        %mm6, %mm0   \0A\09pand        %mm6, %mm3   \0A\09pmaddwd     %mm7, %mm0   \0A\09pmaddwd     %mm7, %mm3   \0A\09pand        %mm5, %mm1   \0A\09pand        %mm5, %mm4   \0A\09por         %mm1, %mm0   \0A\09por         %mm4, %mm3   \0A\09psrld          $$5, %mm0   \0A\09pslld         $$11, %mm3   \0A\09por         %mm3, %mm0   \0A\09movntq      %mm0, ($0)    \0A\09add           $$16,  $1     \0A\09add            $$8,  $0     \0A\092:                         \0A\09cmp            $2,  $1     \0A\09 jb            1b          \0A\09", "=r,=r,r,*m,*m,*m,0,1,~{dirflag},~{fpsr},~{flags}"(i8* %8, i64* @mask3216g, i64* @mask3216br, i64* @mul3216, i16* %6, i8* %7) #5, !dbg !4922, !srcloc !4924
  %asmresult = extractvalue { i16*, i8* } %9, 0, !dbg !4922
  %asmresult2 = extractvalue { i16*, i8* } %9, 1, !dbg !4922
  store i16* %asmresult, i16** %d, align 8, !dbg !4922
  store i8* %asmresult2, i8** %s, align 8, !dbg !4922
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4925, !srcloc !4926
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4927, !srcloc !4928
  br label %while.cond, !dbg !4929

while.cond:                                       ; preds = %while.body, %entry
  %10 = load i8*, i8** %s, align 8, !dbg !4930
  %11 = load i8*, i8** %end, align 8, !dbg !4932
  %cmp = icmp ult i8* %10, %11, !dbg !4933
  br i1 %cmp, label %while.body, label %while.end, !dbg !4934

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %rgb, metadata !4935, metadata !73), !dbg !4937
  %12 = load i8*, i8** %s, align 8, !dbg !4938
  %13 = bitcast i8* %12 to i32*, !dbg !4939
  %14 = load i32, i32* %13, align 4, !dbg !4939
  store i32 %14, i32* %rgb, align 4, !dbg !4937
  %15 = load i8*, i8** %s, align 8, !dbg !4940
  %add.ptr3 = getelementptr inbounds i8, i8* %15, i64 4, !dbg !4940
  store i8* %add.ptr3, i8** %s, align 8, !dbg !4940
  %16 = load i32, i32* %rgb, align 4, !dbg !4941
  %and = and i32 %16, 255, !dbg !4942
  %shr = ashr i32 %and, 3, !dbg !4943
  %17 = load i32, i32* %rgb, align 4, !dbg !4944
  %and4 = and i32 %17, 64512, !dbg !4945
  %shr5 = ashr i32 %and4, 5, !dbg !4946
  %add = add nsw i32 %shr, %shr5, !dbg !4947
  %18 = load i32, i32* %rgb, align 4, !dbg !4948
  %and6 = and i32 %18, 16252928, !dbg !4949
  %shr7 = ashr i32 %and6, 8, !dbg !4950
  %add8 = add nsw i32 %add, %shr7, !dbg !4951
  %conv = trunc i32 %add8 to i16, !dbg !4952
  %19 = load i16*, i16** %d, align 8, !dbg !4953
  %incdec.ptr = getelementptr inbounds i16, i16* %19, i32 1, !dbg !4953
  store i16* %incdec.ptr, i16** %d, align 8, !dbg !4953
  store i16 %conv, i16* %19, align 2, !dbg !4954
  br label %while.cond, !dbg !4955, !llvm.loop !4957

while.end:                                        ; preds = %while.cond
  ret void, !dbg !4958
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb32to15_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !4959 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %rgb = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !4960, metadata !73), !dbg !4961
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !4962, metadata !73), !dbg !4963
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !4964, metadata !73), !dbg !4965
  call void @llvm.dbg.declare(metadata i8** %s, metadata !4966, metadata !73), !dbg !4967
  %0 = load i8*, i8** %src.addr, align 8, !dbg !4968
  store i8* %0, i8** %s, align 8, !dbg !4967
  call void @llvm.dbg.declare(metadata i8** %end, metadata !4969, metadata !73), !dbg !4970
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !4971, metadata !73), !dbg !4972
  call void @llvm.dbg.declare(metadata i16** %d, metadata !4973, metadata !73), !dbg !4974
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !4975
  %2 = bitcast i8* %1 to i16*, !dbg !4976
  store i16* %2, i16** %d, align 8, !dbg !4974
  %3 = load i8*, i8** %s, align 8, !dbg !4977
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !4978
  %idx.ext = sext i32 %4 to i64, !dbg !4979
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !4979
  store i8* %add.ptr, i8** %end, align 8, !dbg !4980
  %5 = load i8*, i8** %end, align 8, !dbg !4981
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 -15, !dbg !4982
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !4983
  %6 = load i16*, i16** %d, align 8, !dbg !4984
  %7 = load i8*, i8** %s, align 8, !dbg !4984
  %8 = load i8*, i8** %mm_end, align 8, !dbg !4985
  %9 = call { i16*, i8* } asm sideeffect "movq           $3, %mm5   \0A\09movq           $4, %mm6   \0A\09movq           $5, %mm7   \0A\09jmp            2f          \0A\09.p2align        4          \0A\091:                         \0A\09prefetchnta   32($1)          \0A\09movd         ($1), %mm0   \0A\09movd        4($1), %mm3   \0A\09punpckldq   8($1), %mm0   \0A\09punpckldq  12($1), %mm3   \0A\09movq        %mm0, %mm1   \0A\09movq        %mm3, %mm4   \0A\09pand        %mm6, %mm0   \0A\09pand        %mm6, %mm3   \0A\09pmaddwd     %mm7, %mm0   \0A\09pmaddwd     %mm7, %mm3   \0A\09pand        %mm5, %mm1   \0A\09pand        %mm5, %mm4   \0A\09por         %mm1, %mm0   \0A\09por         %mm4, %mm3   \0A\09psrld          $$6, %mm0   \0A\09pslld         $$10, %mm3   \0A\09por         %mm3, %mm0   \0A\09movntq      %mm0, ($0)    \0A\09add           $$16,  $1     \0A\09add            $$8,  $0     \0A\092:                         \0A\09cmp            $2,  $1     \0A\09 jb            1b          \0A\09", "=r,=r,r,*m,*m,*m,0,1,~{dirflag},~{fpsr},~{flags}"(i8* %8, i64* @mask3215g, i64* @mask3216br, i64* @mul3215, i16* %6, i8* %7) #5, !dbg !4984, !srcloc !4986
  %asmresult = extractvalue { i16*, i8* } %9, 0, !dbg !4984
  %asmresult2 = extractvalue { i16*, i8* } %9, 1, !dbg !4984
  store i16* %asmresult, i16** %d, align 8, !dbg !4984
  store i8* %asmresult2, i8** %s, align 8, !dbg !4984
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4987, !srcloc !4988
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !4989, !srcloc !4990
  br label %while.cond, !dbg !4991

while.cond:                                       ; preds = %while.body, %entry
  %10 = load i8*, i8** %s, align 8, !dbg !4992
  %11 = load i8*, i8** %end, align 8, !dbg !4994
  %cmp = icmp ult i8* %10, %11, !dbg !4995
  br i1 %cmp, label %while.body, label %while.end, !dbg !4996

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %rgb, metadata !4997, metadata !73), !dbg !4999
  %12 = load i8*, i8** %s, align 8, !dbg !5000
  %13 = bitcast i8* %12 to i32*, !dbg !5001
  %14 = load i32, i32* %13, align 4, !dbg !5001
  store i32 %14, i32* %rgb, align 4, !dbg !4999
  %15 = load i8*, i8** %s, align 8, !dbg !5002
  %add.ptr3 = getelementptr inbounds i8, i8* %15, i64 4, !dbg !5002
  store i8* %add.ptr3, i8** %s, align 8, !dbg !5002
  %16 = load i32, i32* %rgb, align 4, !dbg !5003
  %and = and i32 %16, 255, !dbg !5004
  %shr = ashr i32 %and, 3, !dbg !5005
  %17 = load i32, i32* %rgb, align 4, !dbg !5006
  %and4 = and i32 %17, 63488, !dbg !5007
  %shr5 = ashr i32 %and4, 6, !dbg !5008
  %add = add nsw i32 %shr, %shr5, !dbg !5009
  %18 = load i32, i32* %rgb, align 4, !dbg !5010
  %and6 = and i32 %18, 16252928, !dbg !5011
  %shr7 = ashr i32 %and6, 9, !dbg !5012
  %add8 = add nsw i32 %add, %shr7, !dbg !5013
  %conv = trunc i32 %add8 to i16, !dbg !5014
  %19 = load i16*, i16** %d, align 8, !dbg !5015
  %incdec.ptr = getelementptr inbounds i16, i16* %19, i32 1, !dbg !5015
  store i16* %incdec.ptr, i16** %d, align 8, !dbg !5015
  store i16 %conv, i16* %19, align 2, !dbg !5016
  br label %while.cond, !dbg !5017, !llvm.loop !5019

while.end:                                        ; preds = %while.cond
  ret void, !dbg !5020
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb32tobgr24_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !5021 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %dest = alloca i8*, align 8
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !5022, metadata !73), !dbg !5023
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !5024, metadata !73), !dbg !5025
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !5026, metadata !73), !dbg !5027
  call void @llvm.dbg.declare(metadata i8** %dest, metadata !5028, metadata !73), !dbg !5029
  %0 = load i8*, i8** %dst.addr, align 8, !dbg !5030
  store i8* %0, i8** %dest, align 8, !dbg !5029
  call void @llvm.dbg.declare(metadata i8** %s, metadata !5031, metadata !73), !dbg !5032
  %1 = load i8*, i8** %src.addr, align 8, !dbg !5033
  store i8* %1, i8** %s, align 8, !dbg !5032
  call void @llvm.dbg.declare(metadata i8** %end, metadata !5034, metadata !73), !dbg !5035
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !5036, metadata !73), !dbg !5037
  %2 = load i8*, i8** %s, align 8, !dbg !5038
  %3 = load i32, i32* %src_size.addr, align 4, !dbg !5039
  %idx.ext = sext i32 %3 to i64, !dbg !5040
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext, !dbg !5040
  store i8* %add.ptr, i8** %end, align 8, !dbg !5041
  %4 = load i8*, i8** %s, align 8, !dbg !5042
  call void asm sideeffect "prefetchnta    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %4) #5, !dbg !5043, !srcloc !5044
  %5 = load i8*, i8** %end, align 8, !dbg !5045
  %add.ptr1 = getelementptr inbounds i8, i8* %5, i64 -31, !dbg !5046
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !5047
  br label %while.cond, !dbg !5048

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i8*, i8** %s, align 8, !dbg !5049
  %7 = load i8*, i8** %mm_end, align 8, !dbg !5051
  %cmp = icmp ult i8* %6, %7, !dbg !5052
  br i1 %cmp, label %while.body, label %while.end, !dbg !5053

while.body:                                       ; preds = %while.cond
  %8 = load i8*, i8** %dest, align 8, !dbg !5054
  %9 = load i8*, i8** %s, align 8, !dbg !5056
  call void asm sideeffect "prefetchnta  32($1)           \0A\09movq        ($1), %mm0    \0A\09movq       8($1), %mm1    \0A\09movq      16($1), %mm4    \0A\09movq      24($1), %mm5    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm1, %mm3    \0A\09movq       %mm4, %mm6    \0A\09movq       %mm5, %mm7    \0A\09psrlq         $$8, %mm2    \0A\09psrlq         $$8, %mm3    \0A\09psrlq         $$8, %mm6    \0A\09psrlq         $$8, %mm7    \0A\09pand mask24l, %mm0\0A\09pand mask24l, %mm1\0A\09pand mask24l, %mm4\0A\09pand mask24l, %mm5\0A\09pand mask24h, %mm2\0A\09pand mask24h, %mm3\0A\09pand mask24h, %mm6\0A\09pand mask24h, %mm7\0A\09por        %mm2, %mm0    \0A\09por        %mm3, %mm1    \0A\09por        %mm6, %mm4    \0A\09por        %mm7, %mm5    \0A\09movq       %mm1, %mm2    \0A\09movq       %mm4, %mm3    \0A\09psllq        $$48, %mm2    \0A\09psllq        $$32, %mm3    \0A\09por        %mm2, %mm0    \0A\09psrlq        $$16, %mm1    \0A\09psrlq        $$32, %mm4    \0A\09psllq        $$16, %mm5    \0A\09por        %mm3, %mm1    \0A\09por        %mm5, %mm4    \0A\09movntq     %mm0,   ($0)    \0A\09movntq     %mm1,  8($0)    \0A\09movntq     %mm4, 16($0)", "r,r,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %8, i8* %9) #5, !dbg !5057, !srcloc !5058
  %10 = load i8*, i8** %dest, align 8, !dbg !5059
  %add.ptr2 = getelementptr inbounds i8, i8* %10, i64 24, !dbg !5059
  store i8* %add.ptr2, i8** %dest, align 8, !dbg !5059
  %11 = load i8*, i8** %s, align 8, !dbg !5060
  %add.ptr3 = getelementptr inbounds i8, i8* %11, i64 32, !dbg !5060
  store i8* %add.ptr3, i8** %s, align 8, !dbg !5060
  br label %while.cond, !dbg !5061, !llvm.loop !5063

while.end:                                        ; preds = %while.cond
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !5064, !srcloc !5065
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !5066, !srcloc !5067
  br label %while.cond4, !dbg !5068

while.cond4:                                      ; preds = %while.body6, %while.end
  %12 = load i8*, i8** %s, align 8, !dbg !5069
  %13 = load i8*, i8** %end, align 8, !dbg !5070
  %cmp5 = icmp ult i8* %12, %13, !dbg !5071
  br i1 %cmp5, label %while.body6, label %while.end13, !dbg !5072

while.body6:                                      ; preds = %while.cond4
  %14 = load i8*, i8** %s, align 8, !dbg !5073
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1, !dbg !5073
  store i8* %incdec.ptr, i8** %s, align 8, !dbg !5073
  %15 = load i8, i8* %14, align 1, !dbg !5075
  %16 = load i8*, i8** %dest, align 8, !dbg !5076
  %incdec.ptr7 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !5076
  store i8* %incdec.ptr7, i8** %dest, align 8, !dbg !5076
  store i8 %15, i8* %16, align 1, !dbg !5077
  %17 = load i8*, i8** %s, align 8, !dbg !5078
  %incdec.ptr8 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !5078
  store i8* %incdec.ptr8, i8** %s, align 8, !dbg !5078
  %18 = load i8, i8* %17, align 1, !dbg !5079
  %19 = load i8*, i8** %dest, align 8, !dbg !5080
  %incdec.ptr9 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !5080
  store i8* %incdec.ptr9, i8** %dest, align 8, !dbg !5080
  store i8 %18, i8* %19, align 1, !dbg !5081
  %20 = load i8*, i8** %s, align 8, !dbg !5082
  %incdec.ptr10 = getelementptr inbounds i8, i8* %20, i32 1, !dbg !5082
  store i8* %incdec.ptr10, i8** %s, align 8, !dbg !5082
  %21 = load i8, i8* %20, align 1, !dbg !5083
  %22 = load i8*, i8** %dest, align 8, !dbg !5084
  %incdec.ptr11 = getelementptr inbounds i8, i8* %22, i32 1, !dbg !5084
  store i8* %incdec.ptr11, i8** %dest, align 8, !dbg !5084
  store i8 %21, i8* %22, align 1, !dbg !5085
  %23 = load i8*, i8** %s, align 8, !dbg !5086
  %incdec.ptr12 = getelementptr inbounds i8, i8* %23, i32 1, !dbg !5086
  store i8* %incdec.ptr12, i8** %s, align 8, !dbg !5086
  br label %while.cond4, !dbg !5087, !llvm.loop !5088

while.end13:                                      ; preds = %while.cond4
  ret void, !dbg !5089
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24to15_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !5090 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %r = alloca i32, align 4
  %g = alloca i32, align 4
  %b = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !5091, metadata !73), !dbg !5092
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !5093, metadata !73), !dbg !5094
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !5095, metadata !73), !dbg !5096
  call void @llvm.dbg.declare(metadata i8** %s, metadata !5097, metadata !73), !dbg !5098
  %0 = load i8*, i8** %src.addr, align 8, !dbg !5099
  store i8* %0, i8** %s, align 8, !dbg !5098
  call void @llvm.dbg.declare(metadata i8** %end, metadata !5100, metadata !73), !dbg !5101
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !5102, metadata !73), !dbg !5103
  call void @llvm.dbg.declare(metadata i16** %d, metadata !5104, metadata !73), !dbg !5105
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !5106
  %2 = bitcast i8* %1 to i16*, !dbg !5107
  store i16* %2, i16** %d, align 8, !dbg !5105
  %3 = load i8*, i8** %s, align 8, !dbg !5108
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !5109
  %idx.ext = sext i32 %4 to i64, !dbg !5110
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !5110
  store i8* %add.ptr, i8** %end, align 8, !dbg !5111
  %5 = load i8*, i8** %src.addr, align 8, !dbg !5112
  call void asm sideeffect "prefetchnta    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %5) #5, !dbg !5113, !srcloc !5114
  call void asm sideeffect "movq         $0, %mm7     \0A\09movq         $1, %mm6     \0A\09", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i64* @red_15mask, i64* @green_15mask) #5, !dbg !5115, !srcloc !5116
  %6 = load i8*, i8** %end, align 8, !dbg !5117
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 -15, !dbg !5118
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !5119
  br label %while.cond, !dbg !5120

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i8*, i8** %s, align 8, !dbg !5121
  %8 = load i8*, i8** %mm_end, align 8, !dbg !5123
  %cmp = icmp ult i8* %7, %8, !dbg !5124
  br i1 %cmp, label %while.body, label %while.end, !dbg !5125

while.body:                                       ; preds = %while.cond
  %9 = load i16*, i16** %d, align 8, !dbg !5126
  %10 = load i8*, i8** %s, align 8, !dbg !5128
  call void asm sideeffect "prefetchnta 32($1)            \0A\09movd       ($1), %mm0     \0A\09movd      3($1), %mm3     \0A\09punpckldq 6($1), %mm0     \0A\09punpckldq 9($1), %mm3     \0A\09movq      %mm0, %mm1     \0A\09movq      %mm0, %mm2     \0A\09movq      %mm3, %mm4     \0A\09movq      %mm3, %mm5     \0A\09psllq        $$7, %mm0     \0A\09psllq        $$7, %mm3     \0A\09pand      %mm7, %mm0     \0A\09pand      %mm7, %mm3     \0A\09psrlq        $$6, %mm1     \0A\09psrlq        $$6, %mm4     \0A\09pand      %mm6, %mm1     \0A\09pand      %mm6, %mm4     \0A\09psrlq       $$19, %mm2     \0A\09psrlq       $$19, %mm5     \0A\09pand         $2, %mm2     \0A\09pand         $2, %mm5     \0A\09por       %mm1, %mm0     \0A\09por       %mm4, %mm3     \0A\09por       %mm2, %mm0     \0A\09por       %mm5, %mm3     \0A\09psllq       $$16, %mm3     \0A\09por       %mm3, %mm0     \0A\09movntq    %mm0, ($0)      \0A\09", "r,r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %9, i8* %10, i64* @blue_15mask) #5, !dbg !5129, !srcloc !5130
  %11 = load i16*, i16** %d, align 8, !dbg !5131
  %add.ptr2 = getelementptr inbounds i16, i16* %11, i64 4, !dbg !5131
  store i16* %add.ptr2, i16** %d, align 8, !dbg !5131
  %12 = load i8*, i8** %s, align 8, !dbg !5132
  %add.ptr3 = getelementptr inbounds i8, i8* %12, i64 12, !dbg !5132
  store i8* %add.ptr3, i8** %s, align 8, !dbg !5132
  br label %while.cond, !dbg !5133, !llvm.loop !5135

while.end:                                        ; preds = %while.cond
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !5136, !srcloc !5137
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !5138, !srcloc !5139
  br label %while.cond4, !dbg !5140

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !5141
  %14 = load i8*, i8** %end, align 8, !dbg !5142
  %cmp5 = icmp ult i8* %13, %14, !dbg !5143
  br i1 %cmp5, label %while.body6, label %while.end16, !dbg !5144

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i32* %r, metadata !5145, metadata !73), !dbg !5147
  %15 = load i8*, i8** %s, align 8, !dbg !5148
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1, !dbg !5148
  store i8* %incdec.ptr, i8** %s, align 8, !dbg !5148
  %16 = load i8, i8* %15, align 1, !dbg !5149
  %conv = zext i8 %16 to i32, !dbg !5149
  store i32 %conv, i32* %r, align 4, !dbg !5147
  call void @llvm.dbg.declare(metadata i32* %g, metadata !5150, metadata !73), !dbg !5151
  %17 = load i8*, i8** %s, align 8, !dbg !5152
  %incdec.ptr7 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !5152
  store i8* %incdec.ptr7, i8** %s, align 8, !dbg !5152
  %18 = load i8, i8* %17, align 1, !dbg !5153
  %conv8 = zext i8 %18 to i32, !dbg !5153
  store i32 %conv8, i32* %g, align 4, !dbg !5151
  call void @llvm.dbg.declare(metadata i32* %b, metadata !5154, metadata !73), !dbg !5155
  %19 = load i8*, i8** %s, align 8, !dbg !5156
  %incdec.ptr9 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !5156
  store i8* %incdec.ptr9, i8** %s, align 8, !dbg !5156
  %20 = load i8, i8* %19, align 1, !dbg !5157
  %conv10 = zext i8 %20 to i32, !dbg !5157
  store i32 %conv10, i32* %b, align 4, !dbg !5155
  %21 = load i32, i32* %b, align 4, !dbg !5158
  %shr = ashr i32 %21, 3, !dbg !5159
  %22 = load i32, i32* %g, align 4, !dbg !5160
  %and = and i32 %22, 248, !dbg !5161
  %shl = shl i32 %and, 2, !dbg !5162
  %or = or i32 %shr, %shl, !dbg !5163
  %23 = load i32, i32* %r, align 4, !dbg !5164
  %and11 = and i32 %23, 248, !dbg !5165
  %shl12 = shl i32 %and11, 7, !dbg !5166
  %or13 = or i32 %or, %shl12, !dbg !5167
  %conv14 = trunc i32 %or13 to i16, !dbg !5168
  %24 = load i16*, i16** %d, align 8, !dbg !5169
  %incdec.ptr15 = getelementptr inbounds i16, i16* %24, i32 1, !dbg !5169
  store i16* %incdec.ptr15, i16** %d, align 8, !dbg !5169
  store i16 %conv14, i16* %24, align 2, !dbg !5170
  br label %while.cond4, !dbg !5171, !llvm.loop !5172

while.end16:                                      ; preds = %while.cond4
  ret void, !dbg !5173
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24to16_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !5174 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %r = alloca i32, align 4
  %g = alloca i32, align 4
  %b = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !5175, metadata !73), !dbg !5176
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !5177, metadata !73), !dbg !5178
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !5179, metadata !73), !dbg !5180
  call void @llvm.dbg.declare(metadata i8** %s, metadata !5181, metadata !73), !dbg !5182
  %0 = load i8*, i8** %src.addr, align 8, !dbg !5183
  store i8* %0, i8** %s, align 8, !dbg !5182
  call void @llvm.dbg.declare(metadata i8** %end, metadata !5184, metadata !73), !dbg !5185
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !5186, metadata !73), !dbg !5187
  call void @llvm.dbg.declare(metadata i16** %d, metadata !5188, metadata !73), !dbg !5189
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !5190
  %2 = bitcast i8* %1 to i16*, !dbg !5191
  store i16* %2, i16** %d, align 8, !dbg !5189
  %3 = load i8*, i8** %s, align 8, !dbg !5192
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !5193
  %idx.ext = sext i32 %4 to i64, !dbg !5194
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !5194
  store i8* %add.ptr, i8** %end, align 8, !dbg !5195
  %5 = load i8*, i8** %src.addr, align 8, !dbg !5196
  call void asm sideeffect "prefetchnta    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %5) #5, !dbg !5197, !srcloc !5198
  call void asm sideeffect "movq         $0, %mm7     \0A\09movq         $1, %mm6     \0A\09", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i64* @red_16mask, i64* @green_16mask) #5, !dbg !5199, !srcloc !5200
  %6 = load i8*, i8** %end, align 8, !dbg !5201
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 -15, !dbg !5202
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !5203
  br label %while.cond, !dbg !5204

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i8*, i8** %s, align 8, !dbg !5205
  %8 = load i8*, i8** %mm_end, align 8, !dbg !5207
  %cmp = icmp ult i8* %7, %8, !dbg !5208
  br i1 %cmp, label %while.body, label %while.end, !dbg !5209

while.body:                                       ; preds = %while.cond
  %9 = load i16*, i16** %d, align 8, !dbg !5210
  %10 = load i8*, i8** %s, align 8, !dbg !5212
  call void asm sideeffect "prefetchnta  32($1)           \0A\09movd        ($1), %mm0    \0A\09movd       3($1), %mm3    \0A\09punpckldq  6($1), %mm0    \0A\09punpckldq  9($1), %mm3    \0A\09movq       %mm0, %mm1    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm3, %mm4    \0A\09movq       %mm3, %mm5    \0A\09psllq         $$8, %mm0    \0A\09psllq         $$8, %mm3    \0A\09pand       %mm7, %mm0    \0A\09pand       %mm7, %mm3    \0A\09psrlq         $$5, %mm1    \0A\09psrlq         $$5, %mm4    \0A\09pand       %mm6, %mm1    \0A\09pand       %mm6, %mm4    \0A\09psrlq        $$19, %mm2    \0A\09psrlq        $$19, %mm5    \0A\09pand          $2, %mm2    \0A\09pand          $2, %mm5    \0A\09por        %mm1, %mm0    \0A\09por        %mm4, %mm3    \0A\09por        %mm2, %mm0    \0A\09por        %mm5, %mm3    \0A\09psllq        $$16, %mm3    \0A\09por        %mm3, %mm0    \0A\09movntq     %mm0, ($0)     \0A\09", "r,r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %9, i8* %10, i64* @blue_16mask) #5, !dbg !5213, !srcloc !5214
  %11 = load i16*, i16** %d, align 8, !dbg !5215
  %add.ptr2 = getelementptr inbounds i16, i16* %11, i64 4, !dbg !5215
  store i16* %add.ptr2, i16** %d, align 8, !dbg !5215
  %12 = load i8*, i8** %s, align 8, !dbg !5216
  %add.ptr3 = getelementptr inbounds i8, i8* %12, i64 12, !dbg !5216
  store i8* %add.ptr3, i8** %s, align 8, !dbg !5216
  br label %while.cond, !dbg !5217, !llvm.loop !5219

while.end:                                        ; preds = %while.cond
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !5220, !srcloc !5221
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !5222, !srcloc !5223
  br label %while.cond4, !dbg !5224

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !5225
  %14 = load i8*, i8** %end, align 8, !dbg !5226
  %cmp5 = icmp ult i8* %13, %14, !dbg !5227
  br i1 %cmp5, label %while.body6, label %while.end16, !dbg !5228

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i32* %r, metadata !5229, metadata !73), !dbg !5231
  %15 = load i8*, i8** %s, align 8, !dbg !5232
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1, !dbg !5232
  store i8* %incdec.ptr, i8** %s, align 8, !dbg !5232
  %16 = load i8, i8* %15, align 1, !dbg !5233
  %conv = zext i8 %16 to i32, !dbg !5233
  store i32 %conv, i32* %r, align 4, !dbg !5231
  call void @llvm.dbg.declare(metadata i32* %g, metadata !5234, metadata !73), !dbg !5235
  %17 = load i8*, i8** %s, align 8, !dbg !5236
  %incdec.ptr7 = getelementptr inbounds i8, i8* %17, i32 1, !dbg !5236
  store i8* %incdec.ptr7, i8** %s, align 8, !dbg !5236
  %18 = load i8, i8* %17, align 1, !dbg !5237
  %conv8 = zext i8 %18 to i32, !dbg !5237
  store i32 %conv8, i32* %g, align 4, !dbg !5235
  call void @llvm.dbg.declare(metadata i32* %b, metadata !5238, metadata !73), !dbg !5239
  %19 = load i8*, i8** %s, align 8, !dbg !5240
  %incdec.ptr9 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !5240
  store i8* %incdec.ptr9, i8** %s, align 8, !dbg !5240
  %20 = load i8, i8* %19, align 1, !dbg !5241
  %conv10 = zext i8 %20 to i32, !dbg !5241
  store i32 %conv10, i32* %b, align 4, !dbg !5239
  %21 = load i32, i32* %b, align 4, !dbg !5242
  %shr = ashr i32 %21, 3, !dbg !5243
  %22 = load i32, i32* %g, align 4, !dbg !5244
  %and = and i32 %22, 252, !dbg !5245
  %shl = shl i32 %and, 3, !dbg !5246
  %or = or i32 %shr, %shl, !dbg !5247
  %23 = load i32, i32* %r, align 4, !dbg !5248
  %and11 = and i32 %23, 248, !dbg !5249
  %shl12 = shl i32 %and11, 8, !dbg !5250
  %or13 = or i32 %or, %shl12, !dbg !5251
  %conv14 = trunc i32 %or13 to i16, !dbg !5252
  %24 = load i16*, i16** %d, align 8, !dbg !5253
  %incdec.ptr15 = getelementptr inbounds i16, i16* %24, i32 1, !dbg !5253
  store i16* %incdec.ptr15, i16** %d, align 8, !dbg !5253
  store i16 %conv14, i16* %24, align 2, !dbg !5254
  br label %while.cond4, !dbg !5255, !llvm.loop !5256

while.end16:                                      ; preds = %while.cond4
  ret void, !dbg !5257
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24tobgr24_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !5258 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %mmx_size = alloca i64, align 8
  %x = alloca i8, align 1
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !5259, metadata !73), !dbg !5260
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !5261, metadata !73), !dbg !5262
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !5263, metadata !73), !dbg !5264
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5265, metadata !73), !dbg !5266
  call void @llvm.dbg.declare(metadata i64* %mmx_size, metadata !5267, metadata !73), !dbg !5268
  %0 = load i32, i32* %src_size.addr, align 4, !dbg !5269
  %sub = sub nsw i32 23, %0, !dbg !5270
  %conv = sext i32 %sub to i64, !dbg !5271
  store i64 %conv, i64* %mmx_size, align 8, !dbg !5268
  %1 = load i64, i64* %mmx_size, align 8, !dbg !5272
  %2 = load i8*, i8** %src.addr, align 8, !dbg !5273
  %3 = load i64, i64* %mmx_size, align 8, !dbg !5274
  %idx.neg = sub i64 0, %3, !dbg !5275
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.neg, !dbg !5275
  %4 = load i8*, i8** %dst.addr, align 8, !dbg !5276
  %5 = load i64, i64* %mmx_size, align 8, !dbg !5277
  %idx.neg1 = sub i64 0, %5, !dbg !5278
  %add.ptr2 = getelementptr inbounds i8, i8* %4, i64 %idx.neg1, !dbg !5278
  %6 = call i64 asm sideeffect "test             %rax, %rax    \0A\09jns                     2f                     \0A\09movq     mask24r, %mm5              \0A\09movq     mask24g, %mm6              \0A\09movq     mask24b, %mm7              \0A\09.p2align                 4                     \0A\091:                                             \0A\09prefetchnta 32($1, %rax)                  \0A\09movq    ($1, %rax), %mm0              \0A\09movq    ($1, %rax), %mm1              \0A\09movq   2($1, %rax), %mm2              \0A\09psllq                  $$16, %mm0              \0A\09pand                 %mm5, %mm0              \0A\09pand                 %mm6, %mm1              \0A\09pand                 %mm7, %mm2              \0A\09por                  %mm0, %mm1              \0A\09por                  %mm2, %mm1              \0A\09movq   6($1, %rax), %mm0              \0A\09movntq               %mm1,($2, %rax)  \0A\09movq   8($1, %rax), %mm1              \0A\09movq  10($1, %rax), %mm2              \0A\09pand                 %mm7, %mm0              \0A\09pand                 %mm5, %mm1              \0A\09pand                 %mm6, %mm2              \0A\09por                  %mm0, %mm1              \0A\09por                  %mm2, %mm1              \0A\09movq  14($1, %rax), %mm0              \0A\09movntq               %mm1, 8($2, %rax)\0A\09movq  16($1, %rax), %mm1              \0A\09movq  18($1, %rax), %mm2              \0A\09pand                 %mm6, %mm0              \0A\09pand                 %mm7, %mm1              \0A\09pand                 %mm5, %mm2              \0A\09por                  %mm0, %mm1              \0A\09por                  %mm2, %mm1              \0A\09movntq               %mm1, 16($2, %rax) \0A\09add                    $$24, %rax       \0A\09 js                     1b                     \0A\092:                                             \0A\09", "={ax},r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr, i8* %add.ptr2, i64 %1) #5, !dbg !5272, !srcloc !5279
  store i64 %6, i64* %mmx_size, align 8, !dbg !5272
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !5280, !srcloc !5281
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !5282, !srcloc !5283
  %7 = load i64, i64* %mmx_size, align 8, !dbg !5284
  %cmp = icmp eq i64 %7, 23, !dbg !5286
  br i1 %cmp, label %if.then, label %if.end, !dbg !5287

if.then:                                          ; preds = %entry
  br label %for.end, !dbg !5288

if.end:                                           ; preds = %entry
  %8 = load i32, i32* %src_size.addr, align 4, !dbg !5290
  %9 = load i8*, i8** %src.addr, align 8, !dbg !5291
  %idx.ext = sext i32 %8 to i64, !dbg !5291
  %add.ptr4 = getelementptr inbounds i8, i8* %9, i64 %idx.ext, !dbg !5291
  store i8* %add.ptr4, i8** %src.addr, align 8, !dbg !5291
  %10 = load i32, i32* %src_size.addr, align 4, !dbg !5292
  %11 = load i8*, i8** %dst.addr, align 8, !dbg !5293
  %idx.ext5 = sext i32 %10 to i64, !dbg !5293
  %add.ptr6 = getelementptr inbounds i8, i8* %11, i64 %idx.ext5, !dbg !5293
  store i8* %add.ptr6, i8** %dst.addr, align 8, !dbg !5293
  %12 = load i64, i64* %mmx_size, align 8, !dbg !5294
  %sub7 = sub nsw i64 23, %12, !dbg !5295
  %conv8 = trunc i64 %sub7 to i32, !dbg !5296
  store i32 %conv8, i32* %src_size.addr, align 4, !dbg !5297
  %13 = load i32, i32* %src_size.addr, align 4, !dbg !5298
  %14 = load i8*, i8** %src.addr, align 8, !dbg !5299
  %idx.ext9 = sext i32 %13 to i64, !dbg !5299
  %idx.neg10 = sub i64 0, %idx.ext9, !dbg !5299
  %add.ptr11 = getelementptr inbounds i8, i8* %14, i64 %idx.neg10, !dbg !5299
  store i8* %add.ptr11, i8** %src.addr, align 8, !dbg !5299
  %15 = load i32, i32* %src_size.addr, align 4, !dbg !5300
  %16 = load i8*, i8** %dst.addr, align 8, !dbg !5301
  %idx.ext12 = sext i32 %15 to i64, !dbg !5301
  %idx.neg13 = sub i64 0, %idx.ext12, !dbg !5301
  %add.ptr14 = getelementptr inbounds i8, i8* %16, i64 %idx.neg13, !dbg !5301
  store i8* %add.ptr14, i8** %dst.addr, align 8, !dbg !5301
  store i32 0, i32* %i, align 4, !dbg !5302
  br label %for.cond, !dbg !5304

for.cond:                                         ; preds = %for.inc, %if.end
  %17 = load i32, i32* %i, align 4, !dbg !5305
  %18 = load i32, i32* %src_size.addr, align 4, !dbg !5308
  %cmp15 = icmp ult i32 %17, %18, !dbg !5309
  br i1 %cmp15, label %for.body, label %for.end, !dbg !5310

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8* %x, metadata !5311, metadata !73), !dbg !5313
  %19 = load i32, i32* %i, align 4, !dbg !5314
  %add = add i32 %19, 2, !dbg !5315
  %idxprom = zext i32 %add to i64, !dbg !5316
  %20 = load i8*, i8** %src.addr, align 8, !dbg !5316
  %arrayidx = getelementptr inbounds i8, i8* %20, i64 %idxprom, !dbg !5316
  %21 = load i8, i8* %arrayidx, align 1, !dbg !5316
  store i8 %21, i8* %x, align 1, !dbg !5317
  %22 = load i32, i32* %i, align 4, !dbg !5318
  %add17 = add i32 %22, 1, !dbg !5319
  %idxprom18 = zext i32 %add17 to i64, !dbg !5320
  %23 = load i8*, i8** %src.addr, align 8, !dbg !5320
  %arrayidx19 = getelementptr inbounds i8, i8* %23, i64 %idxprom18, !dbg !5320
  %24 = load i8, i8* %arrayidx19, align 1, !dbg !5320
  %25 = load i32, i32* %i, align 4, !dbg !5321
  %add20 = add i32 %25, 1, !dbg !5322
  %idxprom21 = zext i32 %add20 to i64, !dbg !5323
  %26 = load i8*, i8** %dst.addr, align 8, !dbg !5323
  %arrayidx22 = getelementptr inbounds i8, i8* %26, i64 %idxprom21, !dbg !5323
  store i8 %24, i8* %arrayidx22, align 1, !dbg !5324
  %27 = load i32, i32* %i, align 4, !dbg !5325
  %add23 = add i32 %27, 0, !dbg !5326
  %idxprom24 = zext i32 %add23 to i64, !dbg !5327
  %28 = load i8*, i8** %src.addr, align 8, !dbg !5327
  %arrayidx25 = getelementptr inbounds i8, i8* %28, i64 %idxprom24, !dbg !5327
  %29 = load i8, i8* %arrayidx25, align 1, !dbg !5327
  %30 = load i32, i32* %i, align 4, !dbg !5328
  %add26 = add i32 %30, 2, !dbg !5329
  %idxprom27 = zext i32 %add26 to i64, !dbg !5330
  %31 = load i8*, i8** %dst.addr, align 8, !dbg !5330
  %arrayidx28 = getelementptr inbounds i8, i8* %31, i64 %idxprom27, !dbg !5330
  store i8 %29, i8* %arrayidx28, align 1, !dbg !5331
  %32 = load i8, i8* %x, align 1, !dbg !5332
  %33 = load i32, i32* %i, align 4, !dbg !5333
  %add29 = add i32 %33, 0, !dbg !5334
  %idxprom30 = zext i32 %add29 to i64, !dbg !5335
  %34 = load i8*, i8** %dst.addr, align 8, !dbg !5335
  %arrayidx31 = getelementptr inbounds i8, i8* %34, i64 %idxprom30, !dbg !5335
  store i8 %32, i8* %arrayidx31, align 1, !dbg !5336
  br label %for.inc, !dbg !5337

for.inc:                                          ; preds = %for.body
  %35 = load i32, i32* %i, align 4, !dbg !5338
  %add32 = add i32 %35, 3, !dbg !5338
  store i32 %add32, i32* %i, align 4, !dbg !5338
  br label %for.cond, !dbg !5340, !llvm.loop !5341

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !5343
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb32tobgr16_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !5344 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %rgb = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !5345, metadata !73), !dbg !5346
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !5347, metadata !73), !dbg !5348
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !5349, metadata !73), !dbg !5350
  call void @llvm.dbg.declare(metadata i8** %s, metadata !5351, metadata !73), !dbg !5352
  %0 = load i8*, i8** %src.addr, align 8, !dbg !5353
  store i8* %0, i8** %s, align 8, !dbg !5352
  call void @llvm.dbg.declare(metadata i8** %end, metadata !5354, metadata !73), !dbg !5355
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !5356, metadata !73), !dbg !5357
  call void @llvm.dbg.declare(metadata i16** %d, metadata !5358, metadata !73), !dbg !5359
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !5360
  %2 = bitcast i8* %1 to i16*, !dbg !5361
  store i16* %2, i16** %d, align 8, !dbg !5359
  %3 = load i8*, i8** %s, align 8, !dbg !5362
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !5363
  %idx.ext = sext i32 %4 to i64, !dbg !5364
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !5364
  store i8* %add.ptr, i8** %end, align 8, !dbg !5365
  %5 = load i8*, i8** %src.addr, align 8, !dbg !5366
  call void asm sideeffect "prefetchnta    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %5) #5, !dbg !5367, !srcloc !5368
  call void asm sideeffect "movq          $0, %mm7    \0A\09movq          $1, %mm6    \0A\09", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i64* @red_16mask, i64* @green_16mask) #5, !dbg !5369, !srcloc !5370
  %6 = load i8*, i8** %end, align 8, !dbg !5371
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 -15, !dbg !5372
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !5373
  br label %while.cond, !dbg !5374

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i8*, i8** %s, align 8, !dbg !5375
  %8 = load i8*, i8** %mm_end, align 8, !dbg !5377
  %cmp = icmp ult i8* %7, %8, !dbg !5378
  br i1 %cmp, label %while.body, label %while.end, !dbg !5379

while.body:                                       ; preds = %while.cond
  %9 = load i16*, i16** %d, align 8, !dbg !5380
  %10 = load i8*, i8** %s, align 8, !dbg !5382
  call void asm sideeffect "prefetchnta  32($1)           \0A\09movd        ($1), %mm0    \0A\09movd       4($1), %mm3    \0A\09punpckldq  8($1), %mm0    \0A\09punpckldq 12($1), %mm3    \0A\09movq       %mm0, %mm1    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm3, %mm4    \0A\09movq       %mm3, %mm5    \0A\09psllq         $$8, %mm0    \0A\09psllq         $$8, %mm3    \0A\09pand       %mm7, %mm0    \0A\09pand       %mm7, %mm3    \0A\09psrlq         $$5, %mm1    \0A\09psrlq         $$5, %mm4    \0A\09pand       %mm6, %mm1    \0A\09pand       %mm6, %mm4    \0A\09psrlq        $$19, %mm2    \0A\09psrlq        $$19, %mm5    \0A\09pand          $2, %mm2    \0A\09pand          $2, %mm5    \0A\09por        %mm1, %mm0    \0A\09por        %mm4, %mm3    \0A\09por        %mm2, %mm0    \0A\09por        %mm5, %mm3    \0A\09psllq        $$16, %mm3    \0A\09por        %mm3, %mm0    \0A\09movntq     %mm0, ($0)     \0A\09", "r,r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %9, i8* %10, i64* @blue_16mask) #5, !dbg !5383, !srcloc !5384
  %11 = load i16*, i16** %d, align 8, !dbg !5385
  %add.ptr2 = getelementptr inbounds i16, i16* %11, i64 4, !dbg !5385
  store i16* %add.ptr2, i16** %d, align 8, !dbg !5385
  %12 = load i8*, i8** %s, align 8, !dbg !5386
  %add.ptr3 = getelementptr inbounds i8, i8* %12, i64 16, !dbg !5386
  store i8* %add.ptr3, i8** %s, align 8, !dbg !5386
  br label %while.cond, !dbg !5387, !llvm.loop !5389

while.end:                                        ; preds = %while.cond
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !5390, !srcloc !5391
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !5392, !srcloc !5393
  br label %while.cond4, !dbg !5394

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !5395
  %14 = load i8*, i8** %end, align 8, !dbg !5396
  %cmp5 = icmp ult i8* %13, %14, !dbg !5397
  br i1 %cmp5, label %while.body6, label %while.end12, !dbg !5398

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i32* %rgb, metadata !5399, metadata !73), !dbg !5401
  %15 = load i8*, i8** %s, align 8, !dbg !5402
  %16 = bitcast i8* %15 to i32*, !dbg !5403
  %17 = load i32, i32* %16, align 4, !dbg !5403
  store i32 %17, i32* %rgb, align 4, !dbg !5401
  %18 = load i8*, i8** %s, align 8, !dbg !5404
  %add.ptr7 = getelementptr inbounds i8, i8* %18, i64 4, !dbg !5404
  store i8* %add.ptr7, i8** %s, align 8, !dbg !5404
  %19 = load i32, i32* %rgb, align 4, !dbg !5405
  %and = and i32 %19, 248, !dbg !5406
  %shl = shl i32 %and, 8, !dbg !5407
  %20 = load i32, i32* %rgb, align 4, !dbg !5408
  %and8 = and i32 %20, 64512, !dbg !5409
  %shr = ashr i32 %and8, 5, !dbg !5410
  %add = add nsw i32 %shl, %shr, !dbg !5411
  %21 = load i32, i32* %rgb, align 4, !dbg !5412
  %and9 = and i32 %21, 16252928, !dbg !5413
  %shr10 = ashr i32 %and9, 19, !dbg !5414
  %add11 = add nsw i32 %add, %shr10, !dbg !5415
  %conv = trunc i32 %add11 to i16, !dbg !5416
  %22 = load i16*, i16** %d, align 8, !dbg !5417
  %incdec.ptr = getelementptr inbounds i16, i16* %22, i32 1, !dbg !5417
  store i16* %incdec.ptr, i16** %d, align 8, !dbg !5417
  store i16 %conv, i16* %22, align 2, !dbg !5418
  br label %while.cond4, !dbg !5419, !llvm.loop !5420

while.end12:                                      ; preds = %while.cond4
  ret void, !dbg !5421
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb32tobgr15_mmxext(i8* %src, i8* %dst, i32 %src_size) #3 !dbg !5422 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %src_size.addr = alloca i32, align 4
  %s = alloca i8*, align 8
  %end = alloca i8*, align 8
  %mm_end = alloca i8*, align 8
  %d = alloca i16*, align 8
  %rgb = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !5423, metadata !73), !dbg !5424
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !5425, metadata !73), !dbg !5426
  store i32 %src_size, i32* %src_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_size.addr, metadata !5427, metadata !73), !dbg !5428
  call void @llvm.dbg.declare(metadata i8** %s, metadata !5429, metadata !73), !dbg !5430
  %0 = load i8*, i8** %src.addr, align 8, !dbg !5431
  store i8* %0, i8** %s, align 8, !dbg !5430
  call void @llvm.dbg.declare(metadata i8** %end, metadata !5432, metadata !73), !dbg !5433
  call void @llvm.dbg.declare(metadata i8** %mm_end, metadata !5434, metadata !73), !dbg !5435
  call void @llvm.dbg.declare(metadata i16** %d, metadata !5436, metadata !73), !dbg !5437
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !5438
  %2 = bitcast i8* %1 to i16*, !dbg !5439
  store i16* %2, i16** %d, align 8, !dbg !5437
  %3 = load i8*, i8** %s, align 8, !dbg !5440
  %4 = load i32, i32* %src_size.addr, align 4, !dbg !5441
  %idx.ext = sext i32 %4 to i64, !dbg !5442
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %idx.ext, !dbg !5442
  store i8* %add.ptr, i8** %end, align 8, !dbg !5443
  %5 = load i8*, i8** %src.addr, align 8, !dbg !5444
  call void asm sideeffect "prefetchnta    $0", "*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %5) #5, !dbg !5445, !srcloc !5446
  call void asm sideeffect "movq          $0, %mm7    \0A\09movq          $1, %mm6    \0A\09", "*m,*m,~{dirflag},~{fpsr},~{flags}"(i64* @red_15mask, i64* @green_15mask) #5, !dbg !5447, !srcloc !5448
  %6 = load i8*, i8** %end, align 8, !dbg !5449
  %add.ptr1 = getelementptr inbounds i8, i8* %6, i64 -15, !dbg !5450
  store i8* %add.ptr1, i8** %mm_end, align 8, !dbg !5451
  br label %while.cond, !dbg !5452

while.cond:                                       ; preds = %while.body, %entry
  %7 = load i8*, i8** %s, align 8, !dbg !5453
  %8 = load i8*, i8** %mm_end, align 8, !dbg !5455
  %cmp = icmp ult i8* %7, %8, !dbg !5456
  br i1 %cmp, label %while.body, label %while.end, !dbg !5457

while.body:                                       ; preds = %while.cond
  %9 = load i16*, i16** %d, align 8, !dbg !5458
  %10 = load i8*, i8** %s, align 8, !dbg !5460
  call void asm sideeffect "prefetchnta  32($1)           \0A\09movd        ($1), %mm0    \0A\09movd       4($1), %mm3    \0A\09punpckldq  8($1), %mm0    \0A\09punpckldq 12($1), %mm3    \0A\09movq       %mm0, %mm1    \0A\09movq       %mm0, %mm2    \0A\09movq       %mm3, %mm4    \0A\09movq       %mm3, %mm5    \0A\09psllq         $$7, %mm0    \0A\09psllq         $$7, %mm3    \0A\09pand       %mm7, %mm0    \0A\09pand       %mm7, %mm3    \0A\09psrlq         $$6, %mm1    \0A\09psrlq         $$6, %mm4    \0A\09pand       %mm6, %mm1    \0A\09pand       %mm6, %mm4    \0A\09psrlq        $$19, %mm2    \0A\09psrlq        $$19, %mm5    \0A\09pand          $2, %mm2    \0A\09pand          $2, %mm5    \0A\09por        %mm1, %mm0    \0A\09por        %mm4, %mm3    \0A\09por        %mm2, %mm0    \0A\09por        %mm5, %mm3    \0A\09psllq        $$16, %mm3    \0A\09por        %mm3, %mm0    \0A\09movntq     %mm0, ($0)     \0A\09", "r,r,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i16* %9, i8* %10, i64* @blue_15mask) #5, !dbg !5461, !srcloc !5462
  %11 = load i16*, i16** %d, align 8, !dbg !5463
  %add.ptr2 = getelementptr inbounds i16, i16* %11, i64 4, !dbg !5463
  store i16* %add.ptr2, i16** %d, align 8, !dbg !5463
  %12 = load i8*, i8** %s, align 8, !dbg !5464
  %add.ptr3 = getelementptr inbounds i8, i8* %12, i64 16, !dbg !5464
  store i8* %add.ptr3, i8** %s, align 8, !dbg !5464
  br label %while.cond, !dbg !5465, !llvm.loop !5467

while.end:                                        ; preds = %while.cond
  call void asm sideeffect "sfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !5468, !srcloc !5469
  call void asm sideeffect "emms", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !5470, !srcloc !5471
  br label %while.cond4, !dbg !5472

while.cond4:                                      ; preds = %while.body6, %while.end
  %13 = load i8*, i8** %s, align 8, !dbg !5473
  %14 = load i8*, i8** %end, align 8, !dbg !5474
  %cmp5 = icmp ult i8* %13, %14, !dbg !5475
  br i1 %cmp5, label %while.body6, label %while.end12, !dbg !5476

while.body6:                                      ; preds = %while.cond4
  call void @llvm.dbg.declare(metadata i32* %rgb, metadata !5477, metadata !73), !dbg !5479
  %15 = load i8*, i8** %s, align 8, !dbg !5480
  %16 = bitcast i8* %15 to i32*, !dbg !5481
  %17 = load i32, i32* %16, align 4, !dbg !5481
  store i32 %17, i32* %rgb, align 4, !dbg !5479
  %18 = load i8*, i8** %s, align 8, !dbg !5482
  %add.ptr7 = getelementptr inbounds i8, i8* %18, i64 4, !dbg !5482
  store i8* %add.ptr7, i8** %s, align 8, !dbg !5482
  %19 = load i32, i32* %rgb, align 4, !dbg !5483
  %and = and i32 %19, 248, !dbg !5484
  %shl = shl i32 %and, 7, !dbg !5485
  %20 = load i32, i32* %rgb, align 4, !dbg !5486
  %and8 = and i32 %20, 63488, !dbg !5487
  %shr = ashr i32 %and8, 6, !dbg !5488
  %add = add nsw i32 %shl, %shr, !dbg !5489
  %21 = load i32, i32* %rgb, align 4, !dbg !5490
  %and9 = and i32 %21, 16252928, !dbg !5491
  %shr10 = ashr i32 %and9, 19, !dbg !5492
  %add11 = add nsw i32 %add, %shr10, !dbg !5493
  %conv = trunc i32 %add11 to i16, !dbg !5494
  %22 = load i16*, i16** %d, align 8, !dbg !5495
  %incdec.ptr = getelementptr inbounds i16, i16* %22, i32 1, !dbg !5495
  store i16* %incdec.ptr, i16** %d, align 8, !dbg !5495
  store i16 %conv, i16* %22, align 2, !dbg !5496
  br label %while.cond4, !dbg !5497, !llvm.loop !5498

while.end12:                                      ; preds = %while.cond4
  ret void, !dbg !5499
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yv12toyuy2_mmxext(i8* %ysrc, i8* %usrc, i8* %vsrc, i8* %dst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %dstStride) #3 !dbg !5500 {
entry:
  %ysrc.addr = alloca i8*, align 8
  %usrc.addr = alloca i8*, align 8
  %vsrc.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  store i8* %ysrc, i8** %ysrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ysrc.addr, metadata !5501, metadata !73), !dbg !5502
  store i8* %usrc, i8** %usrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %usrc.addr, metadata !5503, metadata !73), !dbg !5504
  store i8* %vsrc, i8** %vsrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vsrc.addr, metadata !5505, metadata !73), !dbg !5506
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !5507, metadata !73), !dbg !5508
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !5509, metadata !73), !dbg !5510
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !5511, metadata !73), !dbg !5512
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !5513, metadata !73), !dbg !5514
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !5515, metadata !73), !dbg !5516
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !5517, metadata !73), !dbg !5518
  %0 = load i8*, i8** %ysrc.addr, align 8, !dbg !5519
  %1 = load i8*, i8** %usrc.addr, align 8, !dbg !5520
  %2 = load i8*, i8** %vsrc.addr, align 8, !dbg !5521
  %3 = load i8*, i8** %dst.addr, align 8, !dbg !5522
  %4 = load i32, i32* %width.addr, align 4, !dbg !5523
  %5 = load i32, i32* %height.addr, align 4, !dbg !5524
  %6 = load i32, i32* %lumStride.addr, align 4, !dbg !5525
  %7 = load i32, i32* %chromStride.addr, align 4, !dbg !5526
  %8 = load i32, i32* %dstStride.addr, align 4, !dbg !5527
  call void @yuvPlanartoyuy2_mmxext(i8* %0, i8* %1, i8* %2, i8* %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 2), !dbg !5528
  ret void, !dbg !5529
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yv12touyvy_mmxext(i8* %ysrc, i8* %usrc, i8* %vsrc, i8* %dst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %dstStride) #3 !dbg !5530 {
entry:
  %ysrc.addr = alloca i8*, align 8
  %usrc.addr = alloca i8*, align 8
  %vsrc.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  store i8* %ysrc, i8** %ysrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ysrc.addr, metadata !5531, metadata !73), !dbg !5532
  store i8* %usrc, i8** %usrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %usrc.addr, metadata !5533, metadata !73), !dbg !5534
  store i8* %vsrc, i8** %vsrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vsrc.addr, metadata !5535, metadata !73), !dbg !5536
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !5537, metadata !73), !dbg !5538
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !5539, metadata !73), !dbg !5540
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !5541, metadata !73), !dbg !5542
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !5543, metadata !73), !dbg !5544
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !5545, metadata !73), !dbg !5546
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !5547, metadata !73), !dbg !5548
  %0 = load i8*, i8** %ysrc.addr, align 8, !dbg !5549
  %1 = load i8*, i8** %usrc.addr, align 8, !dbg !5550
  %2 = load i8*, i8** %vsrc.addr, align 8, !dbg !5551
  %3 = load i8*, i8** %dst.addr, align 8, !dbg !5552
  %4 = load i32, i32* %width.addr, align 4, !dbg !5553
  %5 = load i32, i32* %height.addr, align 4, !dbg !5554
  %6 = load i32, i32* %lumStride.addr, align 4, !dbg !5555
  %7 = load i32, i32* %chromStride.addr, align 4, !dbg !5556
  %8 = load i32, i32* %dstStride.addr, align 4, !dbg !5557
  call void @yuvPlanartouyvy_mmxext(i8* %0, i8* %1, i8* %2, i8* %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 2), !dbg !5558
  ret void, !dbg !5559
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yuv422ptoyuy2_mmxext(i8* %ysrc, i8* %usrc, i8* %vsrc, i8* %dst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %dstStride) #3 !dbg !5560 {
entry:
  %ysrc.addr = alloca i8*, align 8
  %usrc.addr = alloca i8*, align 8
  %vsrc.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  store i8* %ysrc, i8** %ysrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ysrc.addr, metadata !5561, metadata !73), !dbg !5562
  store i8* %usrc, i8** %usrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %usrc.addr, metadata !5563, metadata !73), !dbg !5564
  store i8* %vsrc, i8** %vsrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vsrc.addr, metadata !5565, metadata !73), !dbg !5566
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !5567, metadata !73), !dbg !5568
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !5569, metadata !73), !dbg !5570
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !5571, metadata !73), !dbg !5572
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !5573, metadata !73), !dbg !5574
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !5575, metadata !73), !dbg !5576
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !5577, metadata !73), !dbg !5578
  %0 = load i8*, i8** %ysrc.addr, align 8, !dbg !5579
  %1 = load i8*, i8** %usrc.addr, align 8, !dbg !5580
  %2 = load i8*, i8** %vsrc.addr, align 8, !dbg !5581
  %3 = load i8*, i8** %dst.addr, align 8, !dbg !5582
  %4 = load i32, i32* %width.addr, align 4, !dbg !5583
  %5 = load i32, i32* %height.addr, align 4, !dbg !5584
  %6 = load i32, i32* %lumStride.addr, align 4, !dbg !5585
  %7 = load i32, i32* %chromStride.addr, align 4, !dbg !5586
  %8 = load i32, i32* %dstStride.addr, align 4, !dbg !5587
  call void @yuvPlanartoyuy2_mmxext(i8* %0, i8* %1, i8* %2, i8* %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 1), !dbg !5588
  ret void, !dbg !5589
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yuv422ptouyvy_mmxext(i8* %ysrc, i8* %usrc, i8* %vsrc, i8* %dst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %dstStride) #3 !dbg !5590 {
entry:
  %ysrc.addr = alloca i8*, align 8
  %usrc.addr = alloca i8*, align 8
  %vsrc.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  store i8* %ysrc, i8** %ysrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ysrc.addr, metadata !5591, metadata !73), !dbg !5592
  store i8* %usrc, i8** %usrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %usrc.addr, metadata !5593, metadata !73), !dbg !5594
  store i8* %vsrc, i8** %vsrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vsrc.addr, metadata !5595, metadata !73), !dbg !5596
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !5597, metadata !73), !dbg !5598
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !5599, metadata !73), !dbg !5600
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !5601, metadata !73), !dbg !5602
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !5603, metadata !73), !dbg !5604
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !5605, metadata !73), !dbg !5606
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !5607, metadata !73), !dbg !5608
  %0 = load i8*, i8** %ysrc.addr, align 8, !dbg !5609
  %1 = load i8*, i8** %usrc.addr, align 8, !dbg !5610
  %2 = load i8*, i8** %vsrc.addr, align 8, !dbg !5611
  %3 = load i8*, i8** %dst.addr, align 8, !dbg !5612
  %4 = load i32, i32* %width.addr, align 4, !dbg !5613
  %5 = load i32, i32* %height.addr, align 4, !dbg !5614
  %6 = load i32, i32* %lumStride.addr, align 4, !dbg !5615
  %7 = load i32, i32* %chromStride.addr, align 4, !dbg !5616
  %8 = load i32, i32* %dstStride.addr, align 4, !dbg !5617
  call void @yuvPlanartouyvy_mmxext(i8* %0, i8* %1, i8* %2, i8* %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 1), !dbg !5618
  ret void, !dbg !5619
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yuy2toyv12_mmxext(i8* %src, i8* %ydst, i8* %udst, i8* %vdst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride) #3 !dbg !5620 {
entry:
  %src.addr = alloca i8*, align 8
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !5621, metadata !73), !dbg !5622
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !5623, metadata !73), !dbg !5624
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !5625, metadata !73), !dbg !5626
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !5627, metadata !73), !dbg !5628
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !5629, metadata !73), !dbg !5630
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !5631, metadata !73), !dbg !5632
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !5633, metadata !73), !dbg !5634
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !5635, metadata !73), !dbg !5636
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !5637, metadata !73), !dbg !5638
  call void @llvm.dbg.declare(metadata i32* %y, metadata !5639, metadata !73), !dbg !5640
  call void @llvm.dbg.declare(metadata i64* %chromWidth, metadata !5641, metadata !73), !dbg !5642
  %0 = load i32, i32* %width.addr, align 4, !dbg !5643
  %shr = ashr i32 %0, 1, !dbg !5644
  %conv = sext i32 %shr to i64, !dbg !5643
  store i64 %conv, i64* %chromWidth, align 8, !dbg !5642
  store i32 0, i32* %y, align 4, !dbg !5645
  br label %for.cond, !dbg !5647

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !5648
  %2 = load i32, i32* %height.addr, align 4, !dbg !5651
  %cmp = icmp slt i32 %1, %2, !dbg !5652
  br i1 %cmp, label %for.body, label %for.end, !dbg !5653

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 8, !dbg !5654
  %4 = load i8*, i8** %ydst.addr, align 8, !dbg !5656
  %5 = load i8*, i8** %udst.addr, align 8, !dbg !5657
  %6 = load i8*, i8** %vdst.addr, align 8, !dbg !5658
  %7 = load i64, i64* %chromWidth, align 8, !dbg !5659
  call void asm sideeffect "xor              %rax, %rax\0A\09pcmpeqw                 %mm7, %mm7       \0A\09psrlw                      $$8, %mm7       \0A\09.p2align                    4              \0A\091:                \0A\09prefetchnta 64($0, %rax, 4)           \0A\09movq    ($0, %rax, 4), %mm0       \0A\09movq   8($0, %rax, 4), %mm1       \0A\09movq                    %mm0, %mm2       \0A\09movq                    %mm1, %mm3       \0A\09psrlw                      $$8, %mm0       \0A\09psrlw                      $$8, %mm1       \0A\09pand                    %mm7, %mm2       \0A\09pand                    %mm7, %mm3       \0A\09packuswb                %mm1, %mm0       \0A\09packuswb                %mm3, %mm2       \0A\09movntq                  %mm2, ($1, %rax, 2) \0A\09movq  16($0, %rax, 4), %mm1       \0A\09movq  24($0, %rax, 4), %mm2       \0A\09movq                    %mm1, %mm3       \0A\09movq                    %mm2, %mm4       \0A\09psrlw                      $$8, %mm1       \0A\09psrlw                      $$8, %mm2       \0A\09pand                    %mm7, %mm3       \0A\09pand                    %mm7, %mm4       \0A\09packuswb                %mm2, %mm1       \0A\09packuswb                %mm4, %mm3       \0A\09movntq                  %mm3, 8($1, %rax, 2) \0A\09movq                    %mm0, %mm2       \0A\09movq                    %mm1, %mm3       \0A\09psrlw                      $$8, %mm0       \0A\09psrlw                      $$8, %mm1       \0A\09pand                    %mm7, %mm2       \0A\09pand                    %mm7, %mm3       \0A\09packuswb                %mm1, %mm0       \0A\09packuswb                %mm3, %mm2       \0A\09movntq                  %mm0, ($3, %rax)     \0A\09movntq                  %mm2, ($2, %rax)     \0A\09add                        $$8, %rax \0A\09cmp                        $4, %rax \0A\09 jb                        1b               \0A\09", "r,r,r,r,imr,~{memory},~{rax},~{dirflag},~{fpsr},~{flags}"(i8* %3, i8* %4, i8* %5, i8* %6, i64 %7) #5, !dbg !5660, !srcloc !5661
  %8 = load i32, i32* %lumStride.addr, align 4, !dbg !5662
  %9 = load i8*, i8** %ydst.addr, align 8, !dbg !5663
  %idx.ext = sext i32 %8 to i64, !dbg !5663
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %idx.ext, !dbg !5663
  store i8* %add.ptr, i8** %ydst.addr, align 8, !dbg !5663
  %10 = load i32, i32* %srcStride.addr, align 4, !dbg !5664
  %11 = load i8*, i8** %src.addr, align 8, !dbg !5665
  %idx.ext2 = sext i32 %10 to i64, !dbg !5665
  %add.ptr3 = getelementptr inbounds i8, i8* %11, i64 %idx.ext2, !dbg !5665
  store i8* %add.ptr3, i8** %src.addr, align 8, !dbg !5665
  %12 = load i8*, i8** %src.addr, align 8, !dbg !5666
  %13 = load i8*, i8** %ydst.addr, align 8, !dbg !5667
  %14 = load i8*, i8** %udst.addr, align 8, !dbg !5668
  %15 = load i8*, i8** %vdst.addr, align 8, !dbg !5669
  %16 = load i64, i64* %chromWidth, align 8, !dbg !5670
  call void asm sideeffect "xor              %rax, %rax\0A\09.p2align                    4              \0A\091:                                         \0A\09prefetchnta 64($0, %rax, 4)           \0A\09movq    ($0, %rax, 4), %mm0       \0A\09movq   8($0, %rax, 4), %mm1       \0A\09movq  16($0, %rax, 4), %mm2       \0A\09movq  24($0, %rax, 4), %mm3       \0A\09pand                    %mm7, %mm0       \0A\09pand                    %mm7, %mm1       \0A\09pand                    %mm7, %mm2       \0A\09pand                    %mm7, %mm3       \0A\09packuswb                %mm1, %mm0       \0A\09packuswb                %mm3, %mm2       \0A\09movntq                  %mm0,  ($1, %rax, 2) \0A\09movntq                  %mm2, 8($1, %rax, 2) \0A\09add                        $$8, %rax\0A\09cmp                        $4, %rax\0A\09 jb                        1b              \0A\09", "r,r,r,r,imr,~{memory},~{rax},~{dirflag},~{fpsr},~{flags}"(i8* %12, i8* %13, i8* %14, i8* %15, i64 %16) #5, !dbg !5671, !srcloc !5672
  %17 = load i32, i32* %chromStride.addr, align 4, !dbg !5673
  %18 = load i8*, i8** %udst.addr, align 8, !dbg !5674
  %idx.ext4 = sext i32 %17 to i64, !dbg !5674
  %add.ptr5 = getelementptr inbounds i8, i8* %18, i64 %idx.ext4, !dbg !5674
  store i8* %add.ptr5, i8** %udst.addr, align 8, !dbg !5674
  %19 = load i32, i32* %chromStride.addr, align 4, !dbg !5675
  %20 = load i8*, i8** %vdst.addr, align 8, !dbg !5676
  %idx.ext6 = sext i32 %19 to i64, !dbg !5676
  %add.ptr7 = getelementptr inbounds i8, i8* %20, i64 %idx.ext6, !dbg !5676
  store i8* %add.ptr7, i8** %vdst.addr, align 8, !dbg !5676
  %21 = load i32, i32* %lumStride.addr, align 4, !dbg !5677
  %22 = load i8*, i8** %ydst.addr, align 8, !dbg !5678
  %idx.ext8 = sext i32 %21 to i64, !dbg !5678
  %add.ptr9 = getelementptr inbounds i8, i8* %22, i64 %idx.ext8, !dbg !5678
  store i8* %add.ptr9, i8** %ydst.addr, align 8, !dbg !5678
  %23 = load i32, i32* %srcStride.addr, align 4, !dbg !5679
  %24 = load i8*, i8** %src.addr, align 8, !dbg !5680
  %idx.ext10 = sext i32 %23 to i64, !dbg !5680
  %add.ptr11 = getelementptr inbounds i8, i8* %24, i64 %idx.ext10, !dbg !5680
  store i8* %add.ptr11, i8** %src.addr, align 8, !dbg !5680
  br label %for.inc, !dbg !5681

for.inc:                                          ; preds = %for.body
  %25 = load i32, i32* %y, align 4, !dbg !5682
  %add = add nsw i32 %25, 2, !dbg !5682
  store i32 %add, i32* %y, align 4, !dbg !5682
  br label %for.cond, !dbg !5684, !llvm.loop !5685

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09sfence     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !5687, !srcloc !5688
  ret void, !dbg !5689
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @vu9_to_vu12_mmxext(i8* %src1, i8* %src2, i8* %dst1, i8* %dst2, i32 %width, i32 %height, i32 %srcStride1, i32 %srcStride2, i32 %dstStride1, i32 %dstStride2) #3 !dbg !5690 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dst1.addr = alloca i8*, align 8
  %dst2.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %srcStride1.addr = alloca i32, align 4
  %srcStride2.addr = alloca i32, align 4
  %dstStride1.addr = alloca i32, align 4
  %dstStride2.addr = alloca i32, align 4
  %x = alloca i64, align 8
  %y = alloca i64, align 8
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  %s1 = alloca i8*, align 8
  %d = alloca i8*, align 8
  %s2 = alloca i8*, align 8
  %d39 = alloca i8*, align 8
  store i8* %src1, i8** %src1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src1.addr, metadata !5691, metadata !73), !dbg !5692
  store i8* %src2, i8** %src2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src2.addr, metadata !5693, metadata !73), !dbg !5694
  store i8* %dst1, i8** %dst1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst1.addr, metadata !5695, metadata !73), !dbg !5696
  store i8* %dst2, i8** %dst2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst2.addr, metadata !5697, metadata !73), !dbg !5698
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !5699, metadata !73), !dbg !5700
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !5701, metadata !73), !dbg !5702
  store i32 %srcStride1, i32* %srcStride1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride1.addr, metadata !5703, metadata !73), !dbg !5704
  store i32 %srcStride2, i32* %srcStride2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride2.addr, metadata !5705, metadata !73), !dbg !5706
  store i32 %dstStride1, i32* %dstStride1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride1.addr, metadata !5707, metadata !73), !dbg !5708
  store i32 %dstStride2, i32* %dstStride2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride2.addr, metadata !5709, metadata !73), !dbg !5710
  call void @llvm.dbg.declare(metadata i64* %x, metadata !5711, metadata !73), !dbg !5712
  call void @llvm.dbg.declare(metadata i64* %y, metadata !5713, metadata !73), !dbg !5714
  call void @llvm.dbg.declare(metadata i32* %w, metadata !5715, metadata !73), !dbg !5716
  call void @llvm.dbg.declare(metadata i32* %h, metadata !5717, metadata !73), !dbg !5718
  %0 = load i32, i32* %width.addr, align 4, !dbg !5719
  %div = sdiv i32 %0, 2, !dbg !5720
  store i32 %div, i32* %w, align 4, !dbg !5721
  %1 = load i32, i32* %height.addr, align 4, !dbg !5722
  %div1 = sdiv i32 %1, 2, !dbg !5723
  store i32 %div1, i32* %h, align 4, !dbg !5724
  %2 = load i8*, i8** %src1.addr, align 8, !dbg !5725
  %3 = load i32, i32* %srcStride1.addr, align 4, !dbg !5726
  %idx.ext = sext i32 %3 to i64, !dbg !5727
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %idx.ext, !dbg !5727
  %4 = load i8*, i8** %src2.addr, align 8, !dbg !5728
  %5 = load i32, i32* %srcStride2.addr, align 4, !dbg !5729
  %idx.ext2 = sext i32 %5 to i64, !dbg !5730
  %add.ptr3 = getelementptr inbounds i8, i8* %4, i64 %idx.ext2, !dbg !5730
  call void asm sideeffect "prefetchnta $0    \0A\09prefetchnta $1    \0A\09", "*m,*m,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr, i8* %add.ptr3) #5, !dbg !5731, !srcloc !5732
  store i64 0, i64* %y, align 8, !dbg !5733
  br label %for.cond, !dbg !5735

for.cond:                                         ; preds = %for.inc27, %entry
  %6 = load i64, i64* %y, align 8, !dbg !5736
  %7 = load i32, i32* %h, align 4, !dbg !5739
  %conv = sext i32 %7 to i64, !dbg !5739
  %cmp = icmp slt i64 %6, %conv, !dbg !5740
  br i1 %cmp, label %for.body, label %for.end29, !dbg !5741

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8** %s1, metadata !5742, metadata !73), !dbg !5744
  %8 = load i8*, i8** %src1.addr, align 8, !dbg !5745
  %9 = load i32, i32* %srcStride1.addr, align 4, !dbg !5746
  %conv5 = sext i32 %9 to i64, !dbg !5746
  %10 = load i64, i64* %y, align 8, !dbg !5747
  %shr = ashr i64 %10, 1, !dbg !5748
  %mul = mul nsw i64 %conv5, %shr, !dbg !5749
  %add.ptr6 = getelementptr inbounds i8, i8* %8, i64 %mul, !dbg !5750
  store i8* %add.ptr6, i8** %s1, align 8, !dbg !5744
  call void @llvm.dbg.declare(metadata i8** %d, metadata !5751, metadata !73), !dbg !5752
  %11 = load i8*, i8** %dst1.addr, align 8, !dbg !5753
  %12 = load i32, i32* %dstStride1.addr, align 4, !dbg !5754
  %conv7 = sext i32 %12 to i64, !dbg !5754
  %13 = load i64, i64* %y, align 8, !dbg !5755
  %mul8 = mul nsw i64 %conv7, %13, !dbg !5756
  %add.ptr9 = getelementptr inbounds i8, i8* %11, i64 %mul8, !dbg !5757
  store i8* %add.ptr9, i8** %d, align 8, !dbg !5752
  store i64 0, i64* %x, align 8, !dbg !5758
  br label %for.cond10, !dbg !5759

for.cond10:                                       ; preds = %for.inc, %for.body
  %14 = load i64, i64* %x, align 8, !dbg !5760
  %15 = load i32, i32* %w, align 4, !dbg !5764
  %sub = sub nsw i32 %15, 31, !dbg !5765
  %conv11 = sext i32 %sub to i64, !dbg !5764
  %cmp12 = icmp slt i64 %14, %conv11, !dbg !5766
  br i1 %cmp12, label %for.body14, label %for.end, !dbg !5767

for.body14:                                       ; preds = %for.cond10
  %16 = load i8*, i8** %d, align 8, !dbg !5768
  %17 = load i8*, i8** %s1, align 8, !dbg !5770
  %18 = load i64, i64* %x, align 8, !dbg !5771
  call void asm sideeffect "prefetchnta   32($1,$2)        \0A\09movq         ($1,$2), %mm0 \0A\09movq        8($1,$2), %mm2 \0A\09movq       16($1,$2), %mm4 \0A\09movq       24($1,$2), %mm6 \0A\09movq      %mm0, %mm1 \0A\09movq      %mm2, %mm3 \0A\09movq      %mm4, %mm5 \0A\09movq      %mm6, %mm7 \0A\09punpcklbw %mm0, %mm0 \0A\09punpckhbw %mm1, %mm1 \0A\09punpcklbw %mm2, %mm2 \0A\09punpckhbw %mm3, %mm3 \0A\09punpcklbw %mm4, %mm4 \0A\09punpckhbw %mm5, %mm5 \0A\09punpcklbw %mm6, %mm6 \0A\09punpckhbw %mm7, %mm7 \0A\09movntq    %mm0,   ($0,$2,2)  \0A\09movntq    %mm1,  8($0,$2,2)  \0A\09movntq    %mm2, 16($0,$2,2)  \0A\09movntq    %mm3, 24($0,$2,2)  \0A\09movntq    %mm4, 32($0,$2,2)  \0A\09movntq    %mm5, 40($0,$2,2)  \0A\09movntq    %mm6, 48($0,$2,2)  \0A\09movntq    %mm7, 56($0,$2,2)", "r,r,r,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %16, i8* %17, i64 %18) #5, !dbg !5772, !srcloc !5773
  br label %for.inc, !dbg !5774

for.inc:                                          ; preds = %for.body14
  %19 = load i64, i64* %x, align 8, !dbg !5775
  %add = add nsw i64 %19, 32, !dbg !5775
  store i64 %add, i64* %x, align 8, !dbg !5775
  br label %for.cond10, !dbg !5777, !llvm.loop !5778

for.end:                                          ; preds = %for.cond10
  br label %for.cond15, !dbg !5779

for.cond15:                                       ; preds = %for.inc25, %for.end
  %20 = load i64, i64* %x, align 8, !dbg !5780
  %21 = load i32, i32* %w, align 4, !dbg !5784
  %conv16 = sext i32 %21 to i64, !dbg !5784
  %cmp17 = icmp slt i64 %20, %conv16, !dbg !5785
  br i1 %cmp17, label %for.body19, label %for.end26, !dbg !5786

for.body19:                                       ; preds = %for.cond15
  %22 = load i64, i64* %x, align 8, !dbg !5787
  %23 = load i8*, i8** %s1, align 8, !dbg !5789
  %arrayidx = getelementptr inbounds i8, i8* %23, i64 %22, !dbg !5789
  %24 = load i8, i8* %arrayidx, align 1, !dbg !5789
  %25 = load i64, i64* %x, align 8, !dbg !5790
  %mul20 = mul nsw i64 2, %25, !dbg !5791
  %add21 = add nsw i64 %mul20, 1, !dbg !5792
  %26 = load i8*, i8** %d, align 8, !dbg !5793
  %arrayidx22 = getelementptr inbounds i8, i8* %26, i64 %add21, !dbg !5793
  store i8 %24, i8* %arrayidx22, align 1, !dbg !5794
  %27 = load i64, i64* %x, align 8, !dbg !5795
  %mul23 = mul nsw i64 2, %27, !dbg !5796
  %28 = load i8*, i8** %d, align 8, !dbg !5797
  %arrayidx24 = getelementptr inbounds i8, i8* %28, i64 %mul23, !dbg !5797
  store i8 %24, i8* %arrayidx24, align 1, !dbg !5798
  br label %for.inc25, !dbg !5797

for.inc25:                                        ; preds = %for.body19
  %29 = load i64, i64* %x, align 8, !dbg !5799
  %inc = add nsw i64 %29, 1, !dbg !5799
  store i64 %inc, i64* %x, align 8, !dbg !5799
  br label %for.cond15, !dbg !5801, !llvm.loop !5802

for.end26:                                        ; preds = %for.cond15
  br label %for.inc27, !dbg !5803

for.inc27:                                        ; preds = %for.end26
  %30 = load i64, i64* %y, align 8, !dbg !5804
  %inc28 = add nsw i64 %30, 1, !dbg !5804
  store i64 %inc28, i64* %y, align 8, !dbg !5804
  br label %for.cond, !dbg !5806, !llvm.loop !5807

for.end29:                                        ; preds = %for.cond
  store i64 0, i64* %y, align 8, !dbg !5809
  br label %for.cond30, !dbg !5811

for.cond30:                                       ; preds = %for.inc66, %for.end29
  %31 = load i64, i64* %y, align 8, !dbg !5812
  %32 = load i32, i32* %h, align 4, !dbg !5815
  %conv31 = sext i32 %32 to i64, !dbg !5815
  %cmp32 = icmp slt i64 %31, %conv31, !dbg !5816
  br i1 %cmp32, label %for.body34, label %for.end68, !dbg !5817

for.body34:                                       ; preds = %for.cond30
  call void @llvm.dbg.declare(metadata i8** %s2, metadata !5818, metadata !73), !dbg !5820
  %33 = load i8*, i8** %src2.addr, align 8, !dbg !5821
  %34 = load i32, i32* %srcStride2.addr, align 4, !dbg !5822
  %conv35 = sext i32 %34 to i64, !dbg !5822
  %35 = load i64, i64* %y, align 8, !dbg !5823
  %shr36 = ashr i64 %35, 1, !dbg !5824
  %mul37 = mul nsw i64 %conv35, %shr36, !dbg !5825
  %add.ptr38 = getelementptr inbounds i8, i8* %33, i64 %mul37, !dbg !5826
  store i8* %add.ptr38, i8** %s2, align 8, !dbg !5820
  call void @llvm.dbg.declare(metadata i8** %d39, metadata !5827, metadata !73), !dbg !5828
  %36 = load i8*, i8** %dst2.addr, align 8, !dbg !5829
  %37 = load i32, i32* %dstStride2.addr, align 4, !dbg !5830
  %conv40 = sext i32 %37 to i64, !dbg !5830
  %38 = load i64, i64* %y, align 8, !dbg !5831
  %mul41 = mul nsw i64 %conv40, %38, !dbg !5832
  %add.ptr42 = getelementptr inbounds i8, i8* %36, i64 %mul41, !dbg !5833
  store i8* %add.ptr42, i8** %d39, align 8, !dbg !5828
  store i64 0, i64* %x, align 8, !dbg !5834
  br label %for.cond43, !dbg !5835

for.cond43:                                       ; preds = %for.inc49, %for.body34
  %39 = load i64, i64* %x, align 8, !dbg !5836
  %40 = load i32, i32* %w, align 4, !dbg !5840
  %sub44 = sub nsw i32 %40, 31, !dbg !5841
  %conv45 = sext i32 %sub44 to i64, !dbg !5840
  %cmp46 = icmp slt i64 %39, %conv45, !dbg !5842
  br i1 %cmp46, label %for.body48, label %for.end51, !dbg !5843

for.body48:                                       ; preds = %for.cond43
  %41 = load i8*, i8** %d39, align 8, !dbg !5844
  %42 = load i8*, i8** %s2, align 8, !dbg !5846
  %43 = load i64, i64* %x, align 8, !dbg !5847
  call void asm sideeffect "prefetchnta   32($1,$2)        \0A\09movq         ($1,$2), %mm0 \0A\09movq        8($1,$2), %mm2 \0A\09movq       16($1,$2), %mm4 \0A\09movq       24($1,$2), %mm6 \0A\09movq      %mm0, %mm1 \0A\09movq      %mm2, %mm3 \0A\09movq      %mm4, %mm5 \0A\09movq      %mm6, %mm7 \0A\09punpcklbw %mm0, %mm0 \0A\09punpckhbw %mm1, %mm1 \0A\09punpcklbw %mm2, %mm2 \0A\09punpckhbw %mm3, %mm3 \0A\09punpcklbw %mm4, %mm4 \0A\09punpckhbw %mm5, %mm5 \0A\09punpcklbw %mm6, %mm6 \0A\09punpckhbw %mm7, %mm7 \0A\09movntq    %mm0,   ($0,$2,2)  \0A\09movntq    %mm1,  8($0,$2,2)  \0A\09movntq    %mm2, 16($0,$2,2)  \0A\09movntq    %mm3, 24($0,$2,2)  \0A\09movntq    %mm4, 32($0,$2,2)  \0A\09movntq    %mm5, 40($0,$2,2)  \0A\09movntq    %mm6, 48($0,$2,2)  \0A\09movntq    %mm7, 56($0,$2,2)", "r,r,r,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %41, i8* %42, i64 %43) #5, !dbg !5848, !srcloc !5849
  br label %for.inc49, !dbg !5850

for.inc49:                                        ; preds = %for.body48
  %44 = load i64, i64* %x, align 8, !dbg !5851
  %add50 = add nsw i64 %44, 32, !dbg !5851
  store i64 %add50, i64* %x, align 8, !dbg !5851
  br label %for.cond43, !dbg !5853, !llvm.loop !5854

for.end51:                                        ; preds = %for.cond43
  br label %for.cond52, !dbg !5855

for.cond52:                                       ; preds = %for.inc63, %for.end51
  %45 = load i64, i64* %x, align 8, !dbg !5856
  %46 = load i32, i32* %w, align 4, !dbg !5860
  %conv53 = sext i32 %46 to i64, !dbg !5860
  %cmp54 = icmp slt i64 %45, %conv53, !dbg !5861
  br i1 %cmp54, label %for.body56, label %for.end65, !dbg !5862

for.body56:                                       ; preds = %for.cond52
  %47 = load i64, i64* %x, align 8, !dbg !5863
  %48 = load i8*, i8** %s2, align 8, !dbg !5865
  %arrayidx57 = getelementptr inbounds i8, i8* %48, i64 %47, !dbg !5865
  %49 = load i8, i8* %arrayidx57, align 1, !dbg !5865
  %50 = load i64, i64* %x, align 8, !dbg !5866
  %mul58 = mul nsw i64 2, %50, !dbg !5867
  %add59 = add nsw i64 %mul58, 1, !dbg !5868
  %51 = load i8*, i8** %d39, align 8, !dbg !5869
  %arrayidx60 = getelementptr inbounds i8, i8* %51, i64 %add59, !dbg !5869
  store i8 %49, i8* %arrayidx60, align 1, !dbg !5870
  %52 = load i64, i64* %x, align 8, !dbg !5871
  %mul61 = mul nsw i64 2, %52, !dbg !5872
  %53 = load i8*, i8** %d39, align 8, !dbg !5873
  %arrayidx62 = getelementptr inbounds i8, i8* %53, i64 %mul61, !dbg !5873
  store i8 %49, i8* %arrayidx62, align 1, !dbg !5874
  br label %for.inc63, !dbg !5873

for.inc63:                                        ; preds = %for.body56
  %54 = load i64, i64* %x, align 8, !dbg !5875
  %inc64 = add nsw i64 %54, 1, !dbg !5875
  store i64 %inc64, i64* %x, align 8, !dbg !5875
  br label %for.cond52, !dbg !5877, !llvm.loop !5878

for.end65:                                        ; preds = %for.cond52
  br label %for.inc66, !dbg !5879

for.inc66:                                        ; preds = %for.end65
  %55 = load i64, i64* %y, align 8, !dbg !5880
  %inc67 = add nsw i64 %55, 1, !dbg !5880
  store i64 %inc67, i64* %y, align 8, !dbg !5880
  br label %for.cond30, !dbg !5882, !llvm.loop !5883

for.end68:                                        ; preds = %for.cond30
  call void asm sideeffect "emms       \0A\09sfence     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !5885, !srcloc !5886
  ret void, !dbg !5887
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yvu9_to_yuy2_mmxext(i8* %src1, i8* %src2, i8* %src3, i8* %dst, i32 %width, i32 %height, i32 %srcStride1, i32 %srcStride2, i32 %srcStride3, i32 %dstStride) #3 !dbg !5888 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %src3.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %srcStride1.addr = alloca i32, align 4
  %srcStride2.addr = alloca i32, align 4
  %srcStride3.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  %x = alloca i64, align 8
  %y = alloca i32, align 4
  %w = alloca i32, align 4
  %h = alloca i32, align 4
  %yp = alloca i8*, align 8
  %up = alloca i8*, align 8
  %vp = alloca i8*, align 8
  %d = alloca i8*, align 8
  %x2 = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src1.addr, metadata !5889, metadata !73), !dbg !5890
  store i8* %src2, i8** %src2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src2.addr, metadata !5891, metadata !73), !dbg !5892
  store i8* %src3, i8** %src3.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src3.addr, metadata !5893, metadata !73), !dbg !5894
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !5895, metadata !73), !dbg !5896
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !5897, metadata !73), !dbg !5898
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !5899, metadata !73), !dbg !5900
  store i32 %srcStride1, i32* %srcStride1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride1.addr, metadata !5901, metadata !73), !dbg !5902
  store i32 %srcStride2, i32* %srcStride2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride2.addr, metadata !5903, metadata !73), !dbg !5904
  store i32 %srcStride3, i32* %srcStride3.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride3.addr, metadata !5905, metadata !73), !dbg !5906
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !5907, metadata !73), !dbg !5908
  call void @llvm.dbg.declare(metadata i64* %x, metadata !5909, metadata !73), !dbg !5910
  call void @llvm.dbg.declare(metadata i32* %y, metadata !5911, metadata !73), !dbg !5912
  call void @llvm.dbg.declare(metadata i32* %w, metadata !5913, metadata !73), !dbg !5914
  call void @llvm.dbg.declare(metadata i32* %h, metadata !5915, metadata !73), !dbg !5916
  %0 = load i32, i32* %width.addr, align 4, !dbg !5917
  %div = sdiv i32 %0, 2, !dbg !5918
  store i32 %div, i32* %w, align 4, !dbg !5919
  %1 = load i32, i32* %height.addr, align 4, !dbg !5920
  store i32 %1, i32* %h, align 4, !dbg !5921
  store i32 0, i32* %y, align 4, !dbg !5922
  br label %for.cond, !dbg !5924

for.cond:                                         ; preds = %for.inc60, %entry
  %2 = load i32, i32* %y, align 4, !dbg !5925
  %3 = load i32, i32* %h, align 4, !dbg !5928
  %cmp = icmp slt i32 %2, %3, !dbg !5929
  br i1 %cmp, label %for.body, label %for.end62, !dbg !5930

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8** %yp, metadata !5931, metadata !73), !dbg !5933
  %4 = load i8*, i8** %src1.addr, align 8, !dbg !5934
  %5 = load i32, i32* %srcStride1.addr, align 4, !dbg !5935
  %6 = load i32, i32* %y, align 4, !dbg !5936
  %mul = mul nsw i32 %5, %6, !dbg !5937
  %idx.ext = sext i32 %mul to i64, !dbg !5938
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %idx.ext, !dbg !5938
  store i8* %add.ptr, i8** %yp, align 8, !dbg !5933
  call void @llvm.dbg.declare(metadata i8** %up, metadata !5939, metadata !73), !dbg !5940
  %7 = load i8*, i8** %src2.addr, align 8, !dbg !5941
  %8 = load i32, i32* %srcStride2.addr, align 4, !dbg !5942
  %9 = load i32, i32* %y, align 4, !dbg !5943
  %shr = ashr i32 %9, 2, !dbg !5944
  %mul1 = mul nsw i32 %8, %shr, !dbg !5945
  %idx.ext2 = sext i32 %mul1 to i64, !dbg !5946
  %add.ptr3 = getelementptr inbounds i8, i8* %7, i64 %idx.ext2, !dbg !5946
  store i8* %add.ptr3, i8** %up, align 8, !dbg !5940
  call void @llvm.dbg.declare(metadata i8** %vp, metadata !5947, metadata !73), !dbg !5948
  %10 = load i8*, i8** %src3.addr, align 8, !dbg !5949
  %11 = load i32, i32* %srcStride3.addr, align 4, !dbg !5950
  %12 = load i32, i32* %y, align 4, !dbg !5951
  %shr4 = ashr i32 %12, 2, !dbg !5952
  %mul5 = mul nsw i32 %11, %shr4, !dbg !5953
  %idx.ext6 = sext i32 %mul5 to i64, !dbg !5954
  %add.ptr7 = getelementptr inbounds i8, i8* %10, i64 %idx.ext6, !dbg !5954
  store i8* %add.ptr7, i8** %vp, align 8, !dbg !5948
  call void @llvm.dbg.declare(metadata i8** %d, metadata !5955, metadata !73), !dbg !5956
  %13 = load i8*, i8** %dst.addr, align 8, !dbg !5957
  %14 = load i32, i32* %dstStride.addr, align 4, !dbg !5958
  %15 = load i32, i32* %y, align 4, !dbg !5959
  %mul8 = mul nsw i32 %14, %15, !dbg !5960
  %idx.ext9 = sext i32 %mul8 to i64, !dbg !5961
  %add.ptr10 = getelementptr inbounds i8, i8* %13, i64 %idx.ext9, !dbg !5961
  store i8* %add.ptr10, i8** %d, align 8, !dbg !5956
  store i64 0, i64* %x, align 8, !dbg !5962
  br label %for.cond11, !dbg !5963

for.cond11:                                       ; preds = %for.inc, %for.body
  %16 = load i64, i64* %x, align 8, !dbg !5964
  %17 = load i32, i32* %w, align 4, !dbg !5968
  %sub = sub nsw i32 %17, 7, !dbg !5969
  %conv = sext i32 %sub to i64, !dbg !5968
  %cmp12 = icmp slt i64 %16, %conv, !dbg !5970
  br i1 %cmp12, label %for.body14, label %for.end, !dbg !5971

for.body14:                                       ; preds = %for.cond11
  %18 = load i64, i64* %x, align 8, !dbg !5972
  %19 = load i8*, i8** %yp, align 8, !dbg !5974
  %20 = load i8*, i8** %up, align 8, !dbg !5975
  %21 = load i8*, i8** %vp, align 8, !dbg !5976
  %22 = load i8*, i8** %d, align 8, !dbg !5977
  %23 = call i64 asm sideeffect "prefetchnta   32($1, $0)          \0A\09prefetchnta   32($2, $0)          \0A\09prefetchnta   32($3, $0)          \0A\09movq      ($1, $0, 4), %mm0   \0A\09movq         ($2, $0), %mm1   \0A\09movq         ($3, $0), %mm2   \0A\09movq            %mm0, %mm3   \0A\09movq            %mm1, %mm4   \0A\09movq            %mm2, %mm5   \0A\09punpcklbw       %mm1, %mm1   \0A\09punpcklbw       %mm2, %mm2   \0A\09punpckhbw       %mm4, %mm4   \0A\09punpckhbw       %mm5, %mm5   \0A\09movq            %mm1, %mm6   \0A\09punpcklbw       %mm2, %mm1   \0A\09punpcklbw       %mm1, %mm0   \0A\09punpckhbw       %mm1, %mm3   \0A\09movntq          %mm0,  ($4, $0, 8)    \0A\09movntq          %mm3, 8($4, $0, 8)    \0A\09punpckhbw       %mm2, %mm6   \0A\09movq     8($1, $0, 4), %mm0   \0A\09movq            %mm0, %mm3   \0A\09punpcklbw       %mm6, %mm0   \0A\09punpckhbw       %mm6, %mm3   \0A\09movntq          %mm0, 16($4, $0, 8)   \0A\09movntq          %mm3, 24($4, $0, 8)   \0A\09movq            %mm4, %mm6   \0A\09movq    16($1, $0, 4), %mm0   \0A\09movq            %mm0, %mm3   \0A\09punpcklbw       %mm5, %mm4   \0A\09punpcklbw       %mm4, %mm0   \0A\09punpckhbw       %mm4, %mm3   \0A\09movntq          %mm0, 32($4, $0, 8)   \0A\09movntq          %mm3, 40($4, $0, 8)   \0A\09punpckhbw       %mm5, %mm6   \0A\09movq    24($1, $0, 4), %mm0   \0A\09movq            %mm0, %mm3   \0A\09punpcklbw       %mm6, %mm0   \0A\09punpckhbw       %mm6, %mm3   \0A\09movntq          %mm0, 48($4, $0, 8)   \0A\09movntq          %mm3, 56($4, $0, 8)   \0A\09", "=r,r,r,r,r,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i8* %19, i8* %20, i8* %21, i8* %22, i64 %18) #5, !dbg !5972, !srcloc !5978
  store i64 %23, i64* %x, align 8, !dbg !5972
  br label %for.inc, !dbg !5979

for.inc:                                          ; preds = %for.body14
  %24 = load i64, i64* %x, align 8, !dbg !5980
  %add = add nsw i64 %24, 8, !dbg !5980
  store i64 %add, i64* %x, align 8, !dbg !5980
  br label %for.cond11, !dbg !5982, !llvm.loop !5983

for.end:                                          ; preds = %for.cond11
  br label %for.cond15, !dbg !5984

for.cond15:                                       ; preds = %for.inc58, %for.end
  %25 = load i64, i64* %x, align 8, !dbg !5985
  %26 = load i32, i32* %w, align 4, !dbg !5989
  %conv16 = sext i32 %26 to i64, !dbg !5989
  %cmp17 = icmp slt i64 %25, %conv16, !dbg !5990
  br i1 %cmp17, label %for.body19, label %for.end59, !dbg !5991

for.body19:                                       ; preds = %for.cond15
  call void @llvm.dbg.declare(metadata i32* %x2, metadata !5992, metadata !73), !dbg !5994
  %27 = load i64, i64* %x, align 8, !dbg !5995
  %shl = shl i64 %27, 2, !dbg !5996
  %conv20 = trunc i64 %shl to i32, !dbg !5995
  store i32 %conv20, i32* %x2, align 4, !dbg !5994
  %28 = load i32, i32* %x2, align 4, !dbg !5997
  %idxprom = sext i32 %28 to i64, !dbg !5998
  %29 = load i8*, i8** %yp, align 8, !dbg !5998
  %arrayidx = getelementptr inbounds i8, i8* %29, i64 %idxprom, !dbg !5998
  %30 = load i8, i8* %arrayidx, align 1, !dbg !5998
  %31 = load i64, i64* %x, align 8, !dbg !5999
  %mul21 = mul nsw i64 8, %31, !dbg !6000
  %add22 = add nsw i64 %mul21, 0, !dbg !6001
  %32 = load i8*, i8** %d, align 8, !dbg !6002
  %arrayidx23 = getelementptr inbounds i8, i8* %32, i64 %add22, !dbg !6002
  store i8 %30, i8* %arrayidx23, align 1, !dbg !6003
  %33 = load i64, i64* %x, align 8, !dbg !6004
  %34 = load i8*, i8** %up, align 8, !dbg !6005
  %arrayidx24 = getelementptr inbounds i8, i8* %34, i64 %33, !dbg !6005
  %35 = load i8, i8* %arrayidx24, align 1, !dbg !6005
  %36 = load i64, i64* %x, align 8, !dbg !6006
  %mul25 = mul nsw i64 8, %36, !dbg !6007
  %add26 = add nsw i64 %mul25, 1, !dbg !6008
  %37 = load i8*, i8** %d, align 8, !dbg !6009
  %arrayidx27 = getelementptr inbounds i8, i8* %37, i64 %add26, !dbg !6009
  store i8 %35, i8* %arrayidx27, align 1, !dbg !6010
  %38 = load i32, i32* %x2, align 4, !dbg !6011
  %add28 = add nsw i32 %38, 1, !dbg !6012
  %idxprom29 = sext i32 %add28 to i64, !dbg !6013
  %39 = load i8*, i8** %yp, align 8, !dbg !6013
  %arrayidx30 = getelementptr inbounds i8, i8* %39, i64 %idxprom29, !dbg !6013
  %40 = load i8, i8* %arrayidx30, align 1, !dbg !6013
  %41 = load i64, i64* %x, align 8, !dbg !6014
  %mul31 = mul nsw i64 8, %41, !dbg !6015
  %add32 = add nsw i64 %mul31, 2, !dbg !6016
  %42 = load i8*, i8** %d, align 8, !dbg !6017
  %arrayidx33 = getelementptr inbounds i8, i8* %42, i64 %add32, !dbg !6017
  store i8 %40, i8* %arrayidx33, align 1, !dbg !6018
  %43 = load i64, i64* %x, align 8, !dbg !6019
  %44 = load i8*, i8** %vp, align 8, !dbg !6020
  %arrayidx34 = getelementptr inbounds i8, i8* %44, i64 %43, !dbg !6020
  %45 = load i8, i8* %arrayidx34, align 1, !dbg !6020
  %46 = load i64, i64* %x, align 8, !dbg !6021
  %mul35 = mul nsw i64 8, %46, !dbg !6022
  %add36 = add nsw i64 %mul35, 3, !dbg !6023
  %47 = load i8*, i8** %d, align 8, !dbg !6024
  %arrayidx37 = getelementptr inbounds i8, i8* %47, i64 %add36, !dbg !6024
  store i8 %45, i8* %arrayidx37, align 1, !dbg !6025
  %48 = load i32, i32* %x2, align 4, !dbg !6026
  %add38 = add nsw i32 %48, 2, !dbg !6027
  %idxprom39 = sext i32 %add38 to i64, !dbg !6028
  %49 = load i8*, i8** %yp, align 8, !dbg !6028
  %arrayidx40 = getelementptr inbounds i8, i8* %49, i64 %idxprom39, !dbg !6028
  %50 = load i8, i8* %arrayidx40, align 1, !dbg !6028
  %51 = load i64, i64* %x, align 8, !dbg !6029
  %mul41 = mul nsw i64 8, %51, !dbg !6030
  %add42 = add nsw i64 %mul41, 4, !dbg !6031
  %52 = load i8*, i8** %d, align 8, !dbg !6032
  %arrayidx43 = getelementptr inbounds i8, i8* %52, i64 %add42, !dbg !6032
  store i8 %50, i8* %arrayidx43, align 1, !dbg !6033
  %53 = load i64, i64* %x, align 8, !dbg !6034
  %54 = load i8*, i8** %up, align 8, !dbg !6035
  %arrayidx44 = getelementptr inbounds i8, i8* %54, i64 %53, !dbg !6035
  %55 = load i8, i8* %arrayidx44, align 1, !dbg !6035
  %56 = load i64, i64* %x, align 8, !dbg !6036
  %mul45 = mul nsw i64 8, %56, !dbg !6037
  %add46 = add nsw i64 %mul45, 5, !dbg !6038
  %57 = load i8*, i8** %d, align 8, !dbg !6039
  %arrayidx47 = getelementptr inbounds i8, i8* %57, i64 %add46, !dbg !6039
  store i8 %55, i8* %arrayidx47, align 1, !dbg !6040
  %58 = load i32, i32* %x2, align 4, !dbg !6041
  %add48 = add nsw i32 %58, 3, !dbg !6042
  %idxprom49 = sext i32 %add48 to i64, !dbg !6043
  %59 = load i8*, i8** %yp, align 8, !dbg !6043
  %arrayidx50 = getelementptr inbounds i8, i8* %59, i64 %idxprom49, !dbg !6043
  %60 = load i8, i8* %arrayidx50, align 1, !dbg !6043
  %61 = load i64, i64* %x, align 8, !dbg !6044
  %mul51 = mul nsw i64 8, %61, !dbg !6045
  %add52 = add nsw i64 %mul51, 6, !dbg !6046
  %62 = load i8*, i8** %d, align 8, !dbg !6047
  %arrayidx53 = getelementptr inbounds i8, i8* %62, i64 %add52, !dbg !6047
  store i8 %60, i8* %arrayidx53, align 1, !dbg !6048
  %63 = load i64, i64* %x, align 8, !dbg !6049
  %64 = load i8*, i8** %vp, align 8, !dbg !6050
  %arrayidx54 = getelementptr inbounds i8, i8* %64, i64 %63, !dbg !6050
  %65 = load i8, i8* %arrayidx54, align 1, !dbg !6050
  %66 = load i64, i64* %x, align 8, !dbg !6051
  %mul55 = mul nsw i64 8, %66, !dbg !6052
  %add56 = add nsw i64 %mul55, 7, !dbg !6053
  %67 = load i8*, i8** %d, align 8, !dbg !6054
  %arrayidx57 = getelementptr inbounds i8, i8* %67, i64 %add56, !dbg !6054
  store i8 %65, i8* %arrayidx57, align 1, !dbg !6055
  br label %for.inc58, !dbg !6056

for.inc58:                                        ; preds = %for.body19
  %68 = load i64, i64* %x, align 8, !dbg !6057
  %inc = add nsw i64 %68, 1, !dbg !6057
  store i64 %inc, i64* %x, align 8, !dbg !6057
  br label %for.cond15, !dbg !6059, !llvm.loop !6060

for.end59:                                        ; preds = %for.cond15
  br label %for.inc60, !dbg !6061

for.inc60:                                        ; preds = %for.end59
  %69 = load i32, i32* %y, align 4, !dbg !6062
  %inc61 = add nsw i32 %69, 1, !dbg !6062
  store i32 %inc61, i32* %y, align 4, !dbg !6062
  br label %for.cond, !dbg !6064, !llvm.loop !6065

for.end62:                                        ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09sfence     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !6067, !srcloc !6068
  ret void, !dbg !6069
}

; Function Attrs: nounwind uwtable
define internal void @uyvytoyuv422_mmxext(i8* %ydst, i8* %udst, i8* %vdst, i8* %src, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride) #4 !dbg !6070 {
entry:
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i32, align 4
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !6071, metadata !73), !dbg !6072
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !6073, metadata !73), !dbg !6074
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !6075, metadata !73), !dbg !6076
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !6077, metadata !73), !dbg !6078
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !6079, metadata !73), !dbg !6080
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !6081, metadata !73), !dbg !6082
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !6083, metadata !73), !dbg !6084
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !6085, metadata !73), !dbg !6086
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !6087, metadata !73), !dbg !6088
  call void @llvm.dbg.declare(metadata i32* %y, metadata !6089, metadata !73), !dbg !6090
  call void @llvm.dbg.declare(metadata i32* %chromWidth, metadata !6091, metadata !73), !dbg !6092
  %0 = load i32, i32* %width.addr, align 4, !dbg !6093
  %add = add nsw i32 %0, 2, !dbg !6094
  %sub = sub nsw i32 %add, 1, !dbg !6095
  %shr = ashr i32 %sub, 1, !dbg !6096
  store i32 %shr, i32* %chromWidth, align 4, !dbg !6092
  store i32 0, i32* %y, align 4, !dbg !6097
  br label %for.cond, !dbg !6099

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !6100
  %2 = load i32, i32* %height.addr, align 4, !dbg !6103
  %cmp = icmp slt i32 %1, %2, !dbg !6104
  br i1 %cmp, label %for.body, label %for.end, !dbg !6105

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 8, !dbg !6106
  %4 = load i8*, i8** %ydst.addr, align 8, !dbg !6108
  %5 = load i32, i32* %width.addr, align 4, !dbg !6109
  %conv = sext i32 %5 to i64, !dbg !6109
  call void @extract_odd_mmxext(i8* %3, i8* %4, i64 %conv), !dbg !6110
  %6 = load i8*, i8** %src.addr, align 8, !dbg !6111
  %7 = load i8*, i8** %udst.addr, align 8, !dbg !6112
  %8 = load i8*, i8** %vdst.addr, align 8, !dbg !6113
  %9 = load i32, i32* %chromWidth, align 4, !dbg !6114
  %conv1 = sext i32 %9 to i64, !dbg !6114
  call void @extract_even2_mmxext(i8* %6, i8* %7, i8* %8, i64 %conv1), !dbg !6115
  %10 = load i32, i32* %srcStride.addr, align 4, !dbg !6116
  %11 = load i8*, i8** %src.addr, align 8, !dbg !6117
  %idx.ext = sext i32 %10 to i64, !dbg !6117
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext, !dbg !6117
  store i8* %add.ptr, i8** %src.addr, align 8, !dbg !6117
  %12 = load i32, i32* %lumStride.addr, align 4, !dbg !6118
  %13 = load i8*, i8** %ydst.addr, align 8, !dbg !6119
  %idx.ext2 = sext i32 %12 to i64, !dbg !6119
  %add.ptr3 = getelementptr inbounds i8, i8* %13, i64 %idx.ext2, !dbg !6119
  store i8* %add.ptr3, i8** %ydst.addr, align 8, !dbg !6119
  %14 = load i32, i32* %chromStride.addr, align 4, !dbg !6120
  %15 = load i8*, i8** %udst.addr, align 8, !dbg !6121
  %idx.ext4 = sext i32 %14 to i64, !dbg !6121
  %add.ptr5 = getelementptr inbounds i8, i8* %15, i64 %idx.ext4, !dbg !6121
  store i8* %add.ptr5, i8** %udst.addr, align 8, !dbg !6121
  %16 = load i32, i32* %chromStride.addr, align 4, !dbg !6122
  %17 = load i8*, i8** %vdst.addr, align 8, !dbg !6123
  %idx.ext6 = sext i32 %16 to i64, !dbg !6123
  %add.ptr7 = getelementptr inbounds i8, i8* %17, i64 %idx.ext6, !dbg !6123
  store i8* %add.ptr7, i8** %vdst.addr, align 8, !dbg !6123
  br label %for.inc, !dbg !6124

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %y, align 4, !dbg !6125
  %inc = add nsw i32 %18, 1, !dbg !6125
  store i32 %inc, i32* %y, align 4, !dbg !6125
  br label %for.cond, !dbg !6127, !llvm.loop !6128

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09sfence     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !6130, !srcloc !6131
  ret void, !dbg !6132
}

; Function Attrs: nounwind uwtable
define internal void @yuyvtoyuv422_mmxext(i8* %ydst, i8* %udst, i8* %vdst, i8* %src, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride) #4 !dbg !6133 {
entry:
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i32, align 4
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !6134, metadata !73), !dbg !6135
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !6136, metadata !73), !dbg !6137
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !6138, metadata !73), !dbg !6139
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !6140, metadata !73), !dbg !6141
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !6142, metadata !73), !dbg !6143
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !6144, metadata !73), !dbg !6145
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !6146, metadata !73), !dbg !6147
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !6148, metadata !73), !dbg !6149
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !6150, metadata !73), !dbg !6151
  call void @llvm.dbg.declare(metadata i32* %y, metadata !6152, metadata !73), !dbg !6153
  call void @llvm.dbg.declare(metadata i32* %chromWidth, metadata !6154, metadata !73), !dbg !6155
  %0 = load i32, i32* %width.addr, align 4, !dbg !6156
  %add = add nsw i32 %0, 2, !dbg !6157
  %sub = sub nsw i32 %add, 1, !dbg !6158
  %shr = ashr i32 %sub, 1, !dbg !6159
  store i32 %shr, i32* %chromWidth, align 4, !dbg !6155
  store i32 0, i32* %y, align 4, !dbg !6160
  br label %for.cond, !dbg !6162

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !6163
  %2 = load i32, i32* %height.addr, align 4, !dbg !6166
  %cmp = icmp slt i32 %1, %2, !dbg !6167
  br i1 %cmp, label %for.body, label %for.end, !dbg !6168

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 8, !dbg !6169
  %4 = load i8*, i8** %ydst.addr, align 8, !dbg !6171
  %5 = load i32, i32* %width.addr, align 4, !dbg !6172
  %conv = sext i32 %5 to i64, !dbg !6172
  call void @extract_even_mmxext(i8* %3, i8* %4, i64 %conv), !dbg !6173
  %6 = load i8*, i8** %src.addr, align 8, !dbg !6174
  %7 = load i8*, i8** %udst.addr, align 8, !dbg !6175
  %8 = load i8*, i8** %vdst.addr, align 8, !dbg !6176
  %9 = load i32, i32* %chromWidth, align 4, !dbg !6177
  %conv1 = sext i32 %9 to i64, !dbg !6177
  call void @extract_odd2_mmxext(i8* %6, i8* %7, i8* %8, i64 %conv1), !dbg !6178
  %10 = load i32, i32* %srcStride.addr, align 4, !dbg !6179
  %11 = load i8*, i8** %src.addr, align 8, !dbg !6180
  %idx.ext = sext i32 %10 to i64, !dbg !6180
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext, !dbg !6180
  store i8* %add.ptr, i8** %src.addr, align 8, !dbg !6180
  %12 = load i32, i32* %lumStride.addr, align 4, !dbg !6181
  %13 = load i8*, i8** %ydst.addr, align 8, !dbg !6182
  %idx.ext2 = sext i32 %12 to i64, !dbg !6182
  %add.ptr3 = getelementptr inbounds i8, i8* %13, i64 %idx.ext2, !dbg !6182
  store i8* %add.ptr3, i8** %ydst.addr, align 8, !dbg !6182
  %14 = load i32, i32* %chromStride.addr, align 4, !dbg !6183
  %15 = load i8*, i8** %udst.addr, align 8, !dbg !6184
  %idx.ext4 = sext i32 %14 to i64, !dbg !6184
  %add.ptr5 = getelementptr inbounds i8, i8* %15, i64 %idx.ext4, !dbg !6184
  store i8* %add.ptr5, i8** %udst.addr, align 8, !dbg !6184
  %16 = load i32, i32* %chromStride.addr, align 4, !dbg !6185
  %17 = load i8*, i8** %vdst.addr, align 8, !dbg !6186
  %idx.ext6 = sext i32 %16 to i64, !dbg !6186
  %add.ptr7 = getelementptr inbounds i8, i8* %17, i64 %idx.ext6, !dbg !6186
  store i8* %add.ptr7, i8** %vdst.addr, align 8, !dbg !6186
  br label %for.inc, !dbg !6187

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %y, align 4, !dbg !6188
  %inc = add nsw i32 %18, 1, !dbg !6188
  store i32 %inc, i32* %y, align 4, !dbg !6188
  br label %for.cond, !dbg !6190, !llvm.loop !6191

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09sfence     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !6193, !srcloc !6194
  ret void, !dbg !6195
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @planar2x_mmxext(i8* %src, i8* %dst, i32 %srcWidth, i32 %srcHeight, i32 %srcStride, i32 %dstStride) #3 !dbg !6196 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %srcWidth.addr = alloca i32, align 4
  %srcHeight.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  %x = alloca i32, align 4
  %y = alloca i32, align 4
  %mmxSize = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !6197, metadata !73), !dbg !6198
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !6199, metadata !73), !dbg !6200
  store i32 %srcWidth, i32* %srcWidth.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcWidth.addr, metadata !6201, metadata !73), !dbg !6202
  store i32 %srcHeight, i32* %srcHeight.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcHeight.addr, metadata !6203, metadata !73), !dbg !6204
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !6205, metadata !73), !dbg !6206
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !6207, metadata !73), !dbg !6208
  call void @llvm.dbg.declare(metadata i32* %x, metadata !6209, metadata !73), !dbg !6210
  call void @llvm.dbg.declare(metadata i32* %y, metadata !6211, metadata !73), !dbg !6212
  %0 = load i8*, i8** %src.addr, align 8, !dbg !6213
  %arrayidx = getelementptr inbounds i8, i8* %0, i64 0, !dbg !6213
  %1 = load i8, i8* %arrayidx, align 1, !dbg !6213
  %2 = load i8*, i8** %dst.addr, align 8, !dbg !6214
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 0, !dbg !6214
  store i8 %1, i8* %arrayidx1, align 1, !dbg !6215
  store i32 0, i32* %x, align 4, !dbg !6216
  br label %for.cond, !dbg !6218

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %x, align 4, !dbg !6219
  %4 = load i32, i32* %srcWidth.addr, align 4, !dbg !6222
  %sub = sub nsw i32 %4, 1, !dbg !6223
  %cmp = icmp slt i32 %3, %sub, !dbg !6224
  br i1 %cmp, label %for.body, label %for.end, !dbg !6225

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %x, align 4, !dbg !6226
  %idxprom = sext i32 %5 to i64, !dbg !6228
  %6 = load i8*, i8** %src.addr, align 8, !dbg !6228
  %arrayidx2 = getelementptr inbounds i8, i8* %6, i64 %idxprom, !dbg !6228
  %7 = load i8, i8* %arrayidx2, align 1, !dbg !6228
  %conv = zext i8 %7 to i32, !dbg !6228
  %mul = mul nsw i32 3, %conv, !dbg !6229
  %8 = load i32, i32* %x, align 4, !dbg !6230
  %add = add nsw i32 %8, 1, !dbg !6231
  %idxprom3 = sext i32 %add to i64, !dbg !6232
  %9 = load i8*, i8** %src.addr, align 8, !dbg !6232
  %arrayidx4 = getelementptr inbounds i8, i8* %9, i64 %idxprom3, !dbg !6232
  %10 = load i8, i8* %arrayidx4, align 1, !dbg !6232
  %conv5 = zext i8 %10 to i32, !dbg !6232
  %add6 = add nsw i32 %mul, %conv5, !dbg !6233
  %shr = ashr i32 %add6, 2, !dbg !6234
  %conv7 = trunc i32 %shr to i8, !dbg !6235
  %11 = load i32, i32* %x, align 4, !dbg !6236
  %mul8 = mul nsw i32 2, %11, !dbg !6237
  %add9 = add nsw i32 %mul8, 1, !dbg !6238
  %idxprom10 = sext i32 %add9 to i64, !dbg !6239
  %12 = load i8*, i8** %dst.addr, align 8, !dbg !6239
  %arrayidx11 = getelementptr inbounds i8, i8* %12, i64 %idxprom10, !dbg !6239
  store i8 %conv7, i8* %arrayidx11, align 1, !dbg !6240
  %13 = load i32, i32* %x, align 4, !dbg !6241
  %idxprom12 = sext i32 %13 to i64, !dbg !6242
  %14 = load i8*, i8** %src.addr, align 8, !dbg !6242
  %arrayidx13 = getelementptr inbounds i8, i8* %14, i64 %idxprom12, !dbg !6242
  %15 = load i8, i8* %arrayidx13, align 1, !dbg !6242
  %conv14 = zext i8 %15 to i32, !dbg !6242
  %16 = load i32, i32* %x, align 4, !dbg !6243
  %add15 = add nsw i32 %16, 1, !dbg !6244
  %idxprom16 = sext i32 %add15 to i64, !dbg !6245
  %17 = load i8*, i8** %src.addr, align 8, !dbg !6245
  %arrayidx17 = getelementptr inbounds i8, i8* %17, i64 %idxprom16, !dbg !6245
  %18 = load i8, i8* %arrayidx17, align 1, !dbg !6245
  %conv18 = zext i8 %18 to i32, !dbg !6245
  %mul19 = mul nsw i32 3, %conv18, !dbg !6246
  %add20 = add nsw i32 %conv14, %mul19, !dbg !6247
  %shr21 = ashr i32 %add20, 2, !dbg !6248
  %conv22 = trunc i32 %shr21 to i8, !dbg !6249
  %19 = load i32, i32* %x, align 4, !dbg !6250
  %mul23 = mul nsw i32 2, %19, !dbg !6251
  %add24 = add nsw i32 %mul23, 2, !dbg !6252
  %idxprom25 = sext i32 %add24 to i64, !dbg !6253
  %20 = load i8*, i8** %dst.addr, align 8, !dbg !6253
  %arrayidx26 = getelementptr inbounds i8, i8* %20, i64 %idxprom25, !dbg !6253
  store i8 %conv22, i8* %arrayidx26, align 1, !dbg !6254
  br label %for.inc, !dbg !6255

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %x, align 4, !dbg !6256
  %inc = add nsw i32 %21, 1, !dbg !6256
  store i32 %inc, i32* %x, align 4, !dbg !6256
  br label %for.cond, !dbg !6258, !llvm.loop !6259

for.end:                                          ; preds = %for.cond
  %22 = load i32, i32* %srcWidth.addr, align 4, !dbg !6261
  %sub27 = sub nsw i32 %22, 1, !dbg !6262
  %idxprom28 = sext i32 %sub27 to i64, !dbg !6263
  %23 = load i8*, i8** %src.addr, align 8, !dbg !6263
  %arrayidx29 = getelementptr inbounds i8, i8* %23, i64 %idxprom28, !dbg !6263
  %24 = load i8, i8* %arrayidx29, align 1, !dbg !6263
  %25 = load i32, i32* %srcWidth.addr, align 4, !dbg !6264
  %mul30 = mul nsw i32 2, %25, !dbg !6265
  %sub31 = sub nsw i32 %mul30, 1, !dbg !6266
  %idxprom32 = sext i32 %sub31 to i64, !dbg !6267
  %26 = load i8*, i8** %dst.addr, align 8, !dbg !6267
  %arrayidx33 = getelementptr inbounds i8, i8* %26, i64 %idxprom32, !dbg !6267
  store i8 %24, i8* %arrayidx33, align 1, !dbg !6268
  %27 = load i32, i32* %dstStride.addr, align 4, !dbg !6269
  %28 = load i8*, i8** %dst.addr, align 8, !dbg !6270
  %idx.ext = sext i32 %27 to i64, !dbg !6270
  %add.ptr = getelementptr inbounds i8, i8* %28, i64 %idx.ext, !dbg !6270
  store i8* %add.ptr, i8** %dst.addr, align 8, !dbg !6270
  store i32 1, i32* %y, align 4, !dbg !6271
  br label %for.cond34, !dbg !6273

for.cond34:                                       ; preds = %for.inc189, %for.end
  %29 = load i32, i32* %y, align 4, !dbg !6274
  %30 = load i32, i32* %srcHeight.addr, align 4, !dbg !6277
  %cmp35 = icmp slt i32 %29, %30, !dbg !6278
  br i1 %cmp35, label %for.body37, label %for.end191, !dbg !6279

for.body37:                                       ; preds = %for.cond34
  call void @llvm.dbg.declare(metadata i64* %mmxSize, metadata !6280, metadata !73), !dbg !6282
  %31 = load i32, i32* %srcWidth.addr, align 4, !dbg !6283
  %and = and i32 %31, -16, !dbg !6284
  %conv38 = sext i32 %and to i64, !dbg !6283
  store i64 %conv38, i64* %mmxSize, align 8, !dbg !6282
  %32 = load i64, i64* %mmxSize, align 8, !dbg !6285
  %tobool = icmp ne i64 %32, 0, !dbg !6285
  br i1 %tobool, label %if.then, label %if.else, !dbg !6287

if.then:                                          ; preds = %for.body37
  %33 = load i8*, i8** %src.addr, align 8, !dbg !6288
  %34 = load i64, i64* %mmxSize, align 8, !dbg !6290
  %add.ptr39 = getelementptr inbounds i8, i8* %33, i64 %34, !dbg !6291
  %35 = load i8*, i8** %src.addr, align 8, !dbg !6292
  %36 = load i32, i32* %srcStride.addr, align 4, !dbg !6293
  %idx.ext40 = sext i32 %36 to i64, !dbg !6294
  %add.ptr41 = getelementptr inbounds i8, i8* %35, i64 %idx.ext40, !dbg !6294
  %37 = load i64, i64* %mmxSize, align 8, !dbg !6295
  %add.ptr42 = getelementptr inbounds i8, i8* %add.ptr41, i64 %37, !dbg !6296
  %38 = load i8*, i8** %dst.addr, align 8, !dbg !6297
  %39 = load i64, i64* %mmxSize, align 8, !dbg !6298
  %mul43 = mul nsw i64 %39, 2, !dbg !6299
  %add.ptr44 = getelementptr inbounds i8, i8* %38, i64 %mul43, !dbg !6300
  %40 = load i8*, i8** %dst.addr, align 8, !dbg !6301
  %41 = load i32, i32* %dstStride.addr, align 4, !dbg !6302
  %idx.ext45 = sext i32 %41 to i64, !dbg !6303
  %add.ptr46 = getelementptr inbounds i8, i8* %40, i64 %idx.ext45, !dbg !6303
  %42 = load i64, i64* %mmxSize, align 8, !dbg !6304
  %mul47 = mul nsw i64 %42, 2, !dbg !6305
  %add.ptr48 = getelementptr inbounds i8, i8* %add.ptr46, i64 %mul47, !dbg !6306
  %43 = load i64, i64* %mmxSize, align 8, !dbg !6307
  %sub49 = sub nsw i64 0, %43, !dbg !6308
  call void asm sideeffect "mov                       $4, %rax \0A\09movq        mmx_ff, %mm0    \0A\09movq      ($0, %rax), %mm4    \0A\09movq                   %mm4, %mm2    \0A\09psllq                     $$8, %mm4    \0A\09pand                   %mm0, %mm2    \0A\09por                    %mm2, %mm4    \0A\09movq      ($1, %rax), %mm5    \0A\09movq                   %mm5, %mm3    \0A\09psllq                     $$8, %mm5    \0A\09pand                   %mm0, %mm3    \0A\09por                    %mm3, %mm5    \0A\091:                                     \0A\09movq      ($0, %rax), %mm0    \0A\09movq      ($1, %rax), %mm1    \0A\09movq     1($0, %rax), %mm2    \0A\09movq     1($1, %rax), %mm3    \0A\09pavgb                  %mm0, %mm5    \0A\09pavgb                  %mm0, %mm3    \0A\09pavgb                  %mm0, %mm5    \0A\09pavgb                  %mm0, %mm3    \0A\09pavgb                  %mm1, %mm4    \0A\09pavgb                  %mm1, %mm2    \0A\09pavgb                  %mm1, %mm4    \0A\09pavgb                  %mm1, %mm2    \0A\09movq                   %mm5, %mm7    \0A\09movq                   %mm4, %mm6    \0A\09punpcklbw              %mm3, %mm5    \0A\09punpckhbw              %mm3, %mm7    \0A\09punpcklbw              %mm2, %mm4    \0A\09punpckhbw              %mm2, %mm6    \0A\09movntq                 %mm5,  ($2, %rax, 2)  \0A\09movntq                 %mm7, 8($2, %rax, 2)  \0A\09movntq                 %mm4,  ($3, %rax, 2)  \0A\09movntq                 %mm6, 8($3, %rax, 2)  \0A\09add                       $$8, %rax            \0A\09movq    -1($0, %rax), %mm4    \0A\09movq    -1($1, %rax), %mm5    \0A\09 js                       1b           \0A\09", "r,r,r,r,imr,~{rax},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr39, i8* %add.ptr42, i8* %add.ptr44, i8* %add.ptr48, i64 %sub49) #5, !dbg !6309, !srcloc !6310
  br label %if.end, !dbg !6311

if.else:                                          ; preds = %for.body37
  store i64 1, i64* %mmxSize, align 8, !dbg !6312
  %44 = load i8*, i8** %src.addr, align 8, !dbg !6314
  %arrayidx50 = getelementptr inbounds i8, i8* %44, i64 0, !dbg !6314
  %45 = load i8, i8* %arrayidx50, align 1, !dbg !6314
  %conv51 = zext i8 %45 to i32, !dbg !6314
  %mul52 = mul nsw i32 %conv51, 3, !dbg !6315
  %46 = load i32, i32* %srcStride.addr, align 4, !dbg !6316
  %idxprom53 = sext i32 %46 to i64, !dbg !6317
  %47 = load i8*, i8** %src.addr, align 8, !dbg !6317
  %arrayidx54 = getelementptr inbounds i8, i8* %47, i64 %idxprom53, !dbg !6317
  %48 = load i8, i8* %arrayidx54, align 1, !dbg !6317
  %conv55 = zext i8 %48 to i32, !dbg !6317
  %add56 = add nsw i32 %mul52, %conv55, !dbg !6318
  %shr57 = ashr i32 %add56, 2, !dbg !6319
  %conv58 = trunc i32 %shr57 to i8, !dbg !6320
  %49 = load i8*, i8** %dst.addr, align 8, !dbg !6321
  %arrayidx59 = getelementptr inbounds i8, i8* %49, i64 0, !dbg !6321
  store i8 %conv58, i8* %arrayidx59, align 1, !dbg !6322
  %50 = load i8*, i8** %src.addr, align 8, !dbg !6323
  %arrayidx60 = getelementptr inbounds i8, i8* %50, i64 0, !dbg !6323
  %51 = load i8, i8* %arrayidx60, align 1, !dbg !6323
  %conv61 = zext i8 %51 to i32, !dbg !6323
  %52 = load i32, i32* %srcStride.addr, align 4, !dbg !6324
  %idxprom62 = sext i32 %52 to i64, !dbg !6325
  %53 = load i8*, i8** %src.addr, align 8, !dbg !6325
  %arrayidx63 = getelementptr inbounds i8, i8* %53, i64 %idxprom62, !dbg !6325
  %54 = load i8, i8* %arrayidx63, align 1, !dbg !6325
  %conv64 = zext i8 %54 to i32, !dbg !6325
  %mul65 = mul nsw i32 3, %conv64, !dbg !6326
  %add66 = add nsw i32 %conv61, %mul65, !dbg !6327
  %shr67 = ashr i32 %add66, 2, !dbg !6328
  %conv68 = trunc i32 %shr67 to i8, !dbg !6329
  %55 = load i32, i32* %dstStride.addr, align 4, !dbg !6330
  %idxprom69 = sext i32 %55 to i64, !dbg !6331
  %56 = load i8*, i8** %dst.addr, align 8, !dbg !6331
  %arrayidx70 = getelementptr inbounds i8, i8* %56, i64 %idxprom69, !dbg !6331
  store i8 %conv68, i8* %arrayidx70, align 1, !dbg !6332
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %57 = load i64, i64* %mmxSize, align 8, !dbg !6333
  %sub71 = sub nsw i64 %57, 1, !dbg !6335
  %conv72 = trunc i64 %sub71 to i32, !dbg !6333
  store i32 %conv72, i32* %x, align 4, !dbg !6336
  br label %for.cond73, !dbg !6337

for.cond73:                                       ; preds = %for.inc146, %if.end
  %58 = load i32, i32* %x, align 4, !dbg !6338
  %59 = load i32, i32* %srcWidth.addr, align 4, !dbg !6341
  %sub74 = sub nsw i32 %59, 1, !dbg !6342
  %cmp75 = icmp slt i32 %58, %sub74, !dbg !6343
  br i1 %cmp75, label %for.body77, label %for.end148, !dbg !6344

for.body77:                                       ; preds = %for.cond73
  %60 = load i32, i32* %x, align 4, !dbg !6345
  %add78 = add nsw i32 %60, 0, !dbg !6347
  %idxprom79 = sext i32 %add78 to i64, !dbg !6348
  %61 = load i8*, i8** %src.addr, align 8, !dbg !6348
  %arrayidx80 = getelementptr inbounds i8, i8* %61, i64 %idxprom79, !dbg !6348
  %62 = load i8, i8* %arrayidx80, align 1, !dbg !6348
  %conv81 = zext i8 %62 to i32, !dbg !6348
  %mul82 = mul nsw i32 3, %conv81, !dbg !6349
  %63 = load i32, i32* %x, align 4, !dbg !6350
  %64 = load i32, i32* %srcStride.addr, align 4, !dbg !6351
  %add83 = add nsw i32 %63, %64, !dbg !6352
  %add84 = add nsw i32 %add83, 1, !dbg !6353
  %idxprom85 = sext i32 %add84 to i64, !dbg !6354
  %65 = load i8*, i8** %src.addr, align 8, !dbg !6354
  %arrayidx86 = getelementptr inbounds i8, i8* %65, i64 %idxprom85, !dbg !6354
  %66 = load i8, i8* %arrayidx86, align 1, !dbg !6354
  %conv87 = zext i8 %66 to i32, !dbg !6354
  %add88 = add nsw i32 %mul82, %conv87, !dbg !6355
  %shr89 = ashr i32 %add88, 2, !dbg !6356
  %conv90 = trunc i32 %shr89 to i8, !dbg !6357
  %67 = load i32, i32* %x, align 4, !dbg !6358
  %mul91 = mul nsw i32 2, %67, !dbg !6359
  %add92 = add nsw i32 %mul91, 1, !dbg !6360
  %idxprom93 = sext i32 %add92 to i64, !dbg !6361
  %68 = load i8*, i8** %dst.addr, align 8, !dbg !6361
  %arrayidx94 = getelementptr inbounds i8, i8* %68, i64 %idxprom93, !dbg !6361
  store i8 %conv90, i8* %arrayidx94, align 1, !dbg !6362
  %69 = load i32, i32* %x, align 4, !dbg !6363
  %add95 = add nsw i32 %69, 0, !dbg !6364
  %idxprom96 = sext i32 %add95 to i64, !dbg !6365
  %70 = load i8*, i8** %src.addr, align 8, !dbg !6365
  %arrayidx97 = getelementptr inbounds i8, i8* %70, i64 %idxprom96, !dbg !6365
  %71 = load i8, i8* %arrayidx97, align 1, !dbg !6365
  %conv98 = zext i8 %71 to i32, !dbg !6365
  %72 = load i32, i32* %x, align 4, !dbg !6366
  %73 = load i32, i32* %srcStride.addr, align 4, !dbg !6367
  %add99 = add nsw i32 %72, %73, !dbg !6368
  %add100 = add nsw i32 %add99, 1, !dbg !6369
  %idxprom101 = sext i32 %add100 to i64, !dbg !6370
  %74 = load i8*, i8** %src.addr, align 8, !dbg !6370
  %arrayidx102 = getelementptr inbounds i8, i8* %74, i64 %idxprom101, !dbg !6370
  %75 = load i8, i8* %arrayidx102, align 1, !dbg !6370
  %conv103 = zext i8 %75 to i32, !dbg !6370
  %mul104 = mul nsw i32 3, %conv103, !dbg !6371
  %add105 = add nsw i32 %conv98, %mul104, !dbg !6372
  %shr106 = ashr i32 %add105, 2, !dbg !6373
  %conv107 = trunc i32 %shr106 to i8, !dbg !6374
  %76 = load i32, i32* %x, align 4, !dbg !6375
  %mul108 = mul nsw i32 2, %76, !dbg !6376
  %77 = load i32, i32* %dstStride.addr, align 4, !dbg !6377
  %add109 = add nsw i32 %mul108, %77, !dbg !6378
  %add110 = add nsw i32 %add109, 2, !dbg !6379
  %idxprom111 = sext i32 %add110 to i64, !dbg !6380
  %78 = load i8*, i8** %dst.addr, align 8, !dbg !6380
  %arrayidx112 = getelementptr inbounds i8, i8* %78, i64 %idxprom111, !dbg !6380
  store i8 %conv107, i8* %arrayidx112, align 1, !dbg !6381
  %79 = load i32, i32* %x, align 4, !dbg !6382
  %add113 = add nsw i32 %79, 1, !dbg !6383
  %idxprom114 = sext i32 %add113 to i64, !dbg !6384
  %80 = load i8*, i8** %src.addr, align 8, !dbg !6384
  %arrayidx115 = getelementptr inbounds i8, i8* %80, i64 %idxprom114, !dbg !6384
  %81 = load i8, i8* %arrayidx115, align 1, !dbg !6384
  %conv116 = zext i8 %81 to i32, !dbg !6384
  %82 = load i32, i32* %x, align 4, !dbg !6385
  %83 = load i32, i32* %srcStride.addr, align 4, !dbg !6386
  %add117 = add nsw i32 %82, %83, !dbg !6387
  %idxprom118 = sext i32 %add117 to i64, !dbg !6388
  %84 = load i8*, i8** %src.addr, align 8, !dbg !6388
  %arrayidx119 = getelementptr inbounds i8, i8* %84, i64 %idxprom118, !dbg !6388
  %85 = load i8, i8* %arrayidx119, align 1, !dbg !6388
  %conv120 = zext i8 %85 to i32, !dbg !6388
  %mul121 = mul nsw i32 3, %conv120, !dbg !6389
  %add122 = add nsw i32 %conv116, %mul121, !dbg !6390
  %shr123 = ashr i32 %add122, 2, !dbg !6391
  %conv124 = trunc i32 %shr123 to i8, !dbg !6392
  %86 = load i32, i32* %x, align 4, !dbg !6393
  %mul125 = mul nsw i32 2, %86, !dbg !6394
  %87 = load i32, i32* %dstStride.addr, align 4, !dbg !6395
  %add126 = add nsw i32 %mul125, %87, !dbg !6396
  %add127 = add nsw i32 %add126, 1, !dbg !6397
  %idxprom128 = sext i32 %add127 to i64, !dbg !6398
  %88 = load i8*, i8** %dst.addr, align 8, !dbg !6398
  %arrayidx129 = getelementptr inbounds i8, i8* %88, i64 %idxprom128, !dbg !6398
  store i8 %conv124, i8* %arrayidx129, align 1, !dbg !6399
  %89 = load i32, i32* %x, align 4, !dbg !6400
  %add130 = add nsw i32 %89, 1, !dbg !6401
  %idxprom131 = sext i32 %add130 to i64, !dbg !6402
  %90 = load i8*, i8** %src.addr, align 8, !dbg !6402
  %arrayidx132 = getelementptr inbounds i8, i8* %90, i64 %idxprom131, !dbg !6402
  %91 = load i8, i8* %arrayidx132, align 1, !dbg !6402
  %conv133 = zext i8 %91 to i32, !dbg !6402
  %mul134 = mul nsw i32 3, %conv133, !dbg !6403
  %92 = load i32, i32* %x, align 4, !dbg !6404
  %93 = load i32, i32* %srcStride.addr, align 4, !dbg !6405
  %add135 = add nsw i32 %92, %93, !dbg !6406
  %idxprom136 = sext i32 %add135 to i64, !dbg !6407
  %94 = load i8*, i8** %src.addr, align 8, !dbg !6407
  %arrayidx137 = getelementptr inbounds i8, i8* %94, i64 %idxprom136, !dbg !6407
  %95 = load i8, i8* %arrayidx137, align 1, !dbg !6407
  %conv138 = zext i8 %95 to i32, !dbg !6407
  %add139 = add nsw i32 %mul134, %conv138, !dbg !6408
  %shr140 = ashr i32 %add139, 2, !dbg !6409
  %conv141 = trunc i32 %shr140 to i8, !dbg !6410
  %96 = load i32, i32* %x, align 4, !dbg !6411
  %mul142 = mul nsw i32 2, %96, !dbg !6412
  %add143 = add nsw i32 %mul142, 2, !dbg !6413
  %idxprom144 = sext i32 %add143 to i64, !dbg !6414
  %97 = load i8*, i8** %dst.addr, align 8, !dbg !6414
  %arrayidx145 = getelementptr inbounds i8, i8* %97, i64 %idxprom144, !dbg !6414
  store i8 %conv141, i8* %arrayidx145, align 1, !dbg !6415
  br label %for.inc146, !dbg !6416

for.inc146:                                       ; preds = %for.body77
  %98 = load i32, i32* %x, align 4, !dbg !6417
  %inc147 = add nsw i32 %98, 1, !dbg !6417
  store i32 %inc147, i32* %x, align 4, !dbg !6417
  br label %for.cond73, !dbg !6419, !llvm.loop !6420

for.end148:                                       ; preds = %for.cond73
  %99 = load i32, i32* %srcWidth.addr, align 4, !dbg !6422
  %sub149 = sub nsw i32 %99, 1, !dbg !6423
  %idxprom150 = sext i32 %sub149 to i64, !dbg !6424
  %100 = load i8*, i8** %src.addr, align 8, !dbg !6424
  %arrayidx151 = getelementptr inbounds i8, i8* %100, i64 %idxprom150, !dbg !6424
  %101 = load i8, i8* %arrayidx151, align 1, !dbg !6424
  %conv152 = zext i8 %101 to i32, !dbg !6424
  %mul153 = mul nsw i32 3, %conv152, !dbg !6425
  %102 = load i32, i32* %srcWidth.addr, align 4, !dbg !6426
  %sub154 = sub nsw i32 %102, 1, !dbg !6427
  %103 = load i32, i32* %srcStride.addr, align 4, !dbg !6428
  %add155 = add nsw i32 %sub154, %103, !dbg !6429
  %idxprom156 = sext i32 %add155 to i64, !dbg !6430
  %104 = load i8*, i8** %src.addr, align 8, !dbg !6430
  %arrayidx157 = getelementptr inbounds i8, i8* %104, i64 %idxprom156, !dbg !6430
  %105 = load i8, i8* %arrayidx157, align 1, !dbg !6430
  %conv158 = zext i8 %105 to i32, !dbg !6430
  %add159 = add nsw i32 %mul153, %conv158, !dbg !6431
  %shr160 = ashr i32 %add159, 2, !dbg !6432
  %conv161 = trunc i32 %shr160 to i8, !dbg !6433
  %106 = load i32, i32* %srcWidth.addr, align 4, !dbg !6434
  %mul162 = mul nsw i32 %106, 2, !dbg !6435
  %sub163 = sub nsw i32 %mul162, 1, !dbg !6436
  %idxprom164 = sext i32 %sub163 to i64, !dbg !6437
  %107 = load i8*, i8** %dst.addr, align 8, !dbg !6437
  %arrayidx165 = getelementptr inbounds i8, i8* %107, i64 %idxprom164, !dbg !6437
  store i8 %conv161, i8* %arrayidx165, align 1, !dbg !6438
  %108 = load i32, i32* %srcWidth.addr, align 4, !dbg !6439
  %sub166 = sub nsw i32 %108, 1, !dbg !6440
  %idxprom167 = sext i32 %sub166 to i64, !dbg !6441
  %109 = load i8*, i8** %src.addr, align 8, !dbg !6441
  %arrayidx168 = getelementptr inbounds i8, i8* %109, i64 %idxprom167, !dbg !6441
  %110 = load i8, i8* %arrayidx168, align 1, !dbg !6441
  %conv169 = zext i8 %110 to i32, !dbg !6441
  %111 = load i32, i32* %srcWidth.addr, align 4, !dbg !6442
  %sub170 = sub nsw i32 %111, 1, !dbg !6443
  %112 = load i32, i32* %srcStride.addr, align 4, !dbg !6444
  %add171 = add nsw i32 %sub170, %112, !dbg !6445
  %idxprom172 = sext i32 %add171 to i64, !dbg !6446
  %113 = load i8*, i8** %src.addr, align 8, !dbg !6446
  %arrayidx173 = getelementptr inbounds i8, i8* %113, i64 %idxprom172, !dbg !6446
  %114 = load i8, i8* %arrayidx173, align 1, !dbg !6446
  %conv174 = zext i8 %114 to i32, !dbg !6446
  %mul175 = mul nsw i32 3, %conv174, !dbg !6447
  %add176 = add nsw i32 %conv169, %mul175, !dbg !6448
  %shr177 = ashr i32 %add176, 2, !dbg !6449
  %conv178 = trunc i32 %shr177 to i8, !dbg !6450
  %115 = load i32, i32* %srcWidth.addr, align 4, !dbg !6451
  %mul179 = mul nsw i32 %115, 2, !dbg !6452
  %sub180 = sub nsw i32 %mul179, 1, !dbg !6453
  %116 = load i32, i32* %dstStride.addr, align 4, !dbg !6454
  %add181 = add nsw i32 %sub180, %116, !dbg !6455
  %idxprom182 = sext i32 %add181 to i64, !dbg !6456
  %117 = load i8*, i8** %dst.addr, align 8, !dbg !6456
  %arrayidx183 = getelementptr inbounds i8, i8* %117, i64 %idxprom182, !dbg !6456
  store i8 %conv178, i8* %arrayidx183, align 1, !dbg !6457
  %118 = load i32, i32* %dstStride.addr, align 4, !dbg !6458
  %mul184 = mul nsw i32 %118, 2, !dbg !6459
  %119 = load i8*, i8** %dst.addr, align 8, !dbg !6460
  %idx.ext185 = sext i32 %mul184 to i64, !dbg !6460
  %add.ptr186 = getelementptr inbounds i8, i8* %119, i64 %idx.ext185, !dbg !6460
  store i8* %add.ptr186, i8** %dst.addr, align 8, !dbg !6460
  %120 = load i32, i32* %srcStride.addr, align 4, !dbg !6461
  %121 = load i8*, i8** %src.addr, align 8, !dbg !6462
  %idx.ext187 = sext i32 %120 to i64, !dbg !6462
  %add.ptr188 = getelementptr inbounds i8, i8* %121, i64 %idx.ext187, !dbg !6462
  store i8* %add.ptr188, i8** %src.addr, align 8, !dbg !6462
  br label %for.inc189, !dbg !6463

for.inc189:                                       ; preds = %for.end148
  %122 = load i32, i32* %y, align 4, !dbg !6464
  %inc190 = add nsw i32 %122, 1, !dbg !6464
  store i32 %inc190, i32* %y, align 4, !dbg !6464
  br label %for.cond34, !dbg !6466, !llvm.loop !6467

for.end191:                                       ; preds = %for.cond34
  %123 = load i8*, i8** %src.addr, align 8, !dbg !6469
  %arrayidx192 = getelementptr inbounds i8, i8* %123, i64 0, !dbg !6469
  %124 = load i8, i8* %arrayidx192, align 1, !dbg !6469
  %125 = load i8*, i8** %dst.addr, align 8, !dbg !6470
  %arrayidx193 = getelementptr inbounds i8, i8* %125, i64 0, !dbg !6470
  store i8 %124, i8* %arrayidx193, align 1, !dbg !6471
  store i32 0, i32* %x, align 4, !dbg !6472
  br label %for.cond194, !dbg !6474

for.cond194:                                      ; preds = %for.inc229, %for.end191
  %126 = load i32, i32* %x, align 4, !dbg !6475
  %127 = load i32, i32* %srcWidth.addr, align 4, !dbg !6478
  %sub195 = sub nsw i32 %127, 1, !dbg !6479
  %cmp196 = icmp slt i32 %126, %sub195, !dbg !6480
  br i1 %cmp196, label %for.body198, label %for.end231, !dbg !6481

for.body198:                                      ; preds = %for.cond194
  %128 = load i32, i32* %x, align 4, !dbg !6482
  %idxprom199 = sext i32 %128 to i64, !dbg !6484
  %129 = load i8*, i8** %src.addr, align 8, !dbg !6484
  %arrayidx200 = getelementptr inbounds i8, i8* %129, i64 %idxprom199, !dbg !6484
  %130 = load i8, i8* %arrayidx200, align 1, !dbg !6484
  %conv201 = zext i8 %130 to i32, !dbg !6484
  %mul202 = mul nsw i32 3, %conv201, !dbg !6485
  %131 = load i32, i32* %x, align 4, !dbg !6486
  %add203 = add nsw i32 %131, 1, !dbg !6487
  %idxprom204 = sext i32 %add203 to i64, !dbg !6488
  %132 = load i8*, i8** %src.addr, align 8, !dbg !6488
  %arrayidx205 = getelementptr inbounds i8, i8* %132, i64 %idxprom204, !dbg !6488
  %133 = load i8, i8* %arrayidx205, align 1, !dbg !6488
  %conv206 = zext i8 %133 to i32, !dbg !6488
  %add207 = add nsw i32 %mul202, %conv206, !dbg !6489
  %shr208 = ashr i32 %add207, 2, !dbg !6490
  %conv209 = trunc i32 %shr208 to i8, !dbg !6491
  %134 = load i32, i32* %x, align 4, !dbg !6492
  %mul210 = mul nsw i32 2, %134, !dbg !6493
  %add211 = add nsw i32 %mul210, 1, !dbg !6494
  %idxprom212 = sext i32 %add211 to i64, !dbg !6495
  %135 = load i8*, i8** %dst.addr, align 8, !dbg !6495
  %arrayidx213 = getelementptr inbounds i8, i8* %135, i64 %idxprom212, !dbg !6495
  store i8 %conv209, i8* %arrayidx213, align 1, !dbg !6496
  %136 = load i32, i32* %x, align 4, !dbg !6497
  %idxprom214 = sext i32 %136 to i64, !dbg !6498
  %137 = load i8*, i8** %src.addr, align 8, !dbg !6498
  %arrayidx215 = getelementptr inbounds i8, i8* %137, i64 %idxprom214, !dbg !6498
  %138 = load i8, i8* %arrayidx215, align 1, !dbg !6498
  %conv216 = zext i8 %138 to i32, !dbg !6498
  %139 = load i32, i32* %x, align 4, !dbg !6499
  %add217 = add nsw i32 %139, 1, !dbg !6500
  %idxprom218 = sext i32 %add217 to i64, !dbg !6501
  %140 = load i8*, i8** %src.addr, align 8, !dbg !6501
  %arrayidx219 = getelementptr inbounds i8, i8* %140, i64 %idxprom218, !dbg !6501
  %141 = load i8, i8* %arrayidx219, align 1, !dbg !6501
  %conv220 = zext i8 %141 to i32, !dbg !6501
  %mul221 = mul nsw i32 3, %conv220, !dbg !6502
  %add222 = add nsw i32 %conv216, %mul221, !dbg !6503
  %shr223 = ashr i32 %add222, 2, !dbg !6504
  %conv224 = trunc i32 %shr223 to i8, !dbg !6505
  %142 = load i32, i32* %x, align 4, !dbg !6506
  %mul225 = mul nsw i32 2, %142, !dbg !6507
  %add226 = add nsw i32 %mul225, 2, !dbg !6508
  %idxprom227 = sext i32 %add226 to i64, !dbg !6509
  %143 = load i8*, i8** %dst.addr, align 8, !dbg !6509
  %arrayidx228 = getelementptr inbounds i8, i8* %143, i64 %idxprom227, !dbg !6509
  store i8 %conv224, i8* %arrayidx228, align 1, !dbg !6510
  br label %for.inc229, !dbg !6511

for.inc229:                                       ; preds = %for.body198
  %144 = load i32, i32* %x, align 4, !dbg !6512
  %inc230 = add nsw i32 %144, 1, !dbg !6512
  store i32 %inc230, i32* %x, align 4, !dbg !6512
  br label %for.cond194, !dbg !6514, !llvm.loop !6515

for.end231:                                       ; preds = %for.cond194
  %145 = load i32, i32* %srcWidth.addr, align 4, !dbg !6517
  %sub232 = sub nsw i32 %145, 1, !dbg !6518
  %idxprom233 = sext i32 %sub232 to i64, !dbg !6519
  %146 = load i8*, i8** %src.addr, align 8, !dbg !6519
  %arrayidx234 = getelementptr inbounds i8, i8* %146, i64 %idxprom233, !dbg !6519
  %147 = load i8, i8* %arrayidx234, align 1, !dbg !6519
  %148 = load i32, i32* %srcWidth.addr, align 4, !dbg !6520
  %mul235 = mul nsw i32 2, %148, !dbg !6521
  %sub236 = sub nsw i32 %mul235, 1, !dbg !6522
  %idxprom237 = sext i32 %sub236 to i64, !dbg !6523
  %149 = load i8*, i8** %dst.addr, align 8, !dbg !6523
  %arrayidx238 = getelementptr inbounds i8, i8* %149, i64 %idxprom237, !dbg !6523
  store i8 %147, i8* %arrayidx238, align 1, !dbg !6524
  call void asm sideeffect "emms       \0A\09sfence     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !6525, !srcloc !6526
  ret void, !dbg !6527
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @rgb24toyv12_mmxext(i8* %src, i8* %ydst, i8* %udst, i8* %vdst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride, i32* %rgb2yuv) #3 !dbg !6528 {
entry:
  %src.addr = alloca i8*, align 8
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %rgb2yuv.addr = alloca i32*, align 8
  %y = alloca i32, align 4
  %chromWidth = alloca i64, align 8
  %i = alloca i32, align 4
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !6529, metadata !73), !dbg !6530
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !6531, metadata !73), !dbg !6532
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !6533, metadata !73), !dbg !6534
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !6535, metadata !73), !dbg !6536
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !6537, metadata !73), !dbg !6538
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !6539, metadata !73), !dbg !6540
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !6541, metadata !73), !dbg !6542
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !6543, metadata !73), !dbg !6544
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !6545, metadata !73), !dbg !6546
  store i32* %rgb2yuv, i32** %rgb2yuv.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %rgb2yuv.addr, metadata !6547, metadata !73), !dbg !6548
  call void @llvm.dbg.declare(metadata i32* %y, metadata !6549, metadata !73), !dbg !6550
  call void @llvm.dbg.declare(metadata i64* %chromWidth, metadata !6551, metadata !73), !dbg !6552
  %0 = load i32, i32* %width.addr, align 4, !dbg !6553
  %shr = ashr i32 %0, 1, !dbg !6554
  %conv = sext i32 %shr to i64, !dbg !6553
  store i64 %conv, i64* %chromWidth, align 8, !dbg !6552
  %1 = load i32, i32* %height.addr, align 4, !dbg !6555
  %cmp = icmp sgt i32 %1, 2, !dbg !6557
  br i1 %cmp, label %if.then, label %if.end, !dbg !6558

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %src.addr, align 8, !dbg !6559
  %3 = load i8*, i8** %ydst.addr, align 8, !dbg !6561
  %4 = load i8*, i8** %udst.addr, align 8, !dbg !6562
  %5 = load i8*, i8** %vdst.addr, align 8, !dbg !6563
  %6 = load i32, i32* %width.addr, align 4, !dbg !6564
  %7 = load i32, i32* %lumStride.addr, align 4, !dbg !6565
  %8 = load i32, i32* %chromStride.addr, align 4, !dbg !6566
  %9 = load i32, i32* %srcStride.addr, align 4, !dbg !6567
  %10 = load i32*, i32** %rgb2yuv.addr, align 8, !dbg !6568
  call void @ff_rgb24toyv12_c(i8* %2, i8* %3, i8* %4, i8* %5, i32 %6, i32 2, i32 %7, i32 %8, i32 %9, i32* %10), !dbg !6569
  %11 = load i32, i32* %srcStride.addr, align 4, !dbg !6570
  %mul = mul nsw i32 2, %11, !dbg !6571
  %12 = load i8*, i8** %src.addr, align 8, !dbg !6572
  %idx.ext = sext i32 %mul to i64, !dbg !6572
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %idx.ext, !dbg !6572
  store i8* %add.ptr, i8** %src.addr, align 8, !dbg !6572
  %13 = load i32, i32* %lumStride.addr, align 4, !dbg !6573
  %mul2 = mul nsw i32 2, %13, !dbg !6574
  %14 = load i8*, i8** %ydst.addr, align 8, !dbg !6575
  %idx.ext3 = sext i32 %mul2 to i64, !dbg !6575
  %add.ptr4 = getelementptr inbounds i8, i8* %14, i64 %idx.ext3, !dbg !6575
  store i8* %add.ptr4, i8** %ydst.addr, align 8, !dbg !6575
  %15 = load i32, i32* %chromStride.addr, align 4, !dbg !6576
  %16 = load i8*, i8** %udst.addr, align 8, !dbg !6577
  %idx.ext5 = sext i32 %15 to i64, !dbg !6577
  %add.ptr6 = getelementptr inbounds i8, i8* %16, i64 %idx.ext5, !dbg !6577
  store i8* %add.ptr6, i8** %udst.addr, align 8, !dbg !6577
  %17 = load i32, i32* %chromStride.addr, align 4, !dbg !6578
  %18 = load i8*, i8** %vdst.addr, align 8, !dbg !6579
  %idx.ext7 = sext i32 %17 to i64, !dbg !6579
  %add.ptr8 = getelementptr inbounds i8, i8* %18, i64 %idx.ext7, !dbg !6579
  store i8* %add.ptr8, i8** %vdst.addr, align 8, !dbg !6579
  %19 = load i32, i32* %height.addr, align 4, !dbg !6580
  %sub = sub nsw i32 %19, 2, !dbg !6580
  store i32 %sub, i32* %height.addr, align 4, !dbg !6580
  br label %if.end, !dbg !6581

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %y, align 4, !dbg !6582
  br label %for.cond, !dbg !6584

for.cond:                                         ; preds = %for.inc46, %if.end
  %20 = load i32, i32* %y, align 4, !dbg !6585
  %21 = load i32, i32* %height.addr, align 4, !dbg !6588
  %sub9 = sub nsw i32 %21, 2, !dbg !6589
  %cmp10 = icmp slt i32 %20, %sub9, !dbg !6590
  br i1 %cmp10, label %for.body, label %for.end47, !dbg !6591

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6592, metadata !73), !dbg !6594
  store i32 0, i32* %i, align 4, !dbg !6595
  br label %for.cond12, !dbg !6597

for.cond12:                                       ; preds = %for.inc, %for.body
  %22 = load i32, i32* %i, align 4, !dbg !6598
  %cmp13 = icmp slt i32 %22, 2, !dbg !6601
  br i1 %cmp13, label %for.body15, label %for.end, !dbg !6602

for.body15:                                       ; preds = %for.cond12
  %23 = load i8*, i8** %src.addr, align 8, !dbg !6603
  %24 = load i32, i32* %width.addr, align 4, !dbg !6605
  %mul16 = mul nsw i32 %24, 3, !dbg !6606
  %idx.ext17 = sext i32 %mul16 to i64, !dbg !6607
  %add.ptr18 = getelementptr inbounds i8, i8* %23, i64 %idx.ext17, !dbg !6607
  %25 = load i8*, i8** %ydst.addr, align 8, !dbg !6608
  %26 = load i32, i32* %width.addr, align 4, !dbg !6609
  %idx.ext19 = sext i32 %26 to i64, !dbg !6610
  %add.ptr20 = getelementptr inbounds i8, i8* %25, i64 %idx.ext19, !dbg !6610
  %27 = load i32, i32* %width.addr, align 4, !dbg !6611
  %sub21 = sub nsw i32 0, %27, !dbg !6612
  %conv22 = sext i32 %sub21 to i64, !dbg !6613
  %28 = load i32*, i32** %rgb2yuv.addr, align 8, !dbg !6614
  call void asm sideeffect "mov                        $2, %rax\0A\09movq          16*4+16*32($3), %mm6       \0A\09movq       ff_w1111, %mm5       \0A\09pxor                    %mm7, %mm7       \0A\09lea (%rax, %rax, 2), %rdx \0A\09.p2align                    4              \0A\091:                                         \0A\09prefetchnta 64($0, %rdx)              \0A\09movd       ($0, %rdx), %mm0       \0A\09movd      3($0, %rdx), %mm1       \0A\09punpcklbw               %mm7, %mm0       \0A\09punpcklbw               %mm7, %mm1       \0A\09movd      6($0, %rdx), %mm2       \0A\09movd      9($0, %rdx), %mm3       \0A\09punpcklbw               %mm7, %mm2       \0A\09punpcklbw               %mm7, %mm3       \0A\09pmaddwd                 %mm6, %mm0       \0A\09pmaddwd                 %mm6, %mm1       \0A\09pmaddwd                 %mm6, %mm2       \0A\09pmaddwd                 %mm6, %mm3       \0A\09psrad                      $$8, %mm0       \0A\09psrad                      $$8, %mm1       \0A\09psrad                      $$8, %mm2       \0A\09psrad                      $$8, %mm3       \0A\09packssdw                %mm1, %mm0       \0A\09packssdw                %mm3, %mm2       \0A\09pmaddwd                 %mm5, %mm0       \0A\09pmaddwd                 %mm5, %mm2       \0A\09packssdw                %mm2, %mm0       \0A\09psraw                      $$7, %mm0       \0A\09movd     12($0, %rdx), %mm4       \0A\09movd     15($0, %rdx), %mm1       \0A\09punpcklbw               %mm7, %mm4       \0A\09punpcklbw               %mm7, %mm1       \0A\09movd     18($0, %rdx), %mm2       \0A\09movd     21($0, %rdx), %mm3       \0A\09punpcklbw               %mm7, %mm2       \0A\09punpcklbw               %mm7, %mm3       \0A\09pmaddwd                 %mm6, %mm4       \0A\09pmaddwd                 %mm6, %mm1       \0A\09pmaddwd                 %mm6, %mm2       \0A\09pmaddwd                 %mm6, %mm3       \0A\09psrad                      $$8, %mm4       \0A\09psrad                      $$8, %mm1       \0A\09psrad                      $$8, %mm2       \0A\09psrad                      $$8, %mm3       \0A\09packssdw                %mm1, %mm4       \0A\09packssdw                %mm3, %mm2       \0A\09pmaddwd                 %mm5, %mm4       \0A\09pmaddwd                 %mm5, %mm2       \0A\09add                       $$24, %rdx\0A\09packssdw                %mm2, %mm4       \0A\09psraw                      $$7, %mm4       \0A\09packuswb                %mm4, %mm0       \0A\09paddusb ff_bgr2YOffset, %mm0    \0A\09movntq                  %mm0, ($1, %rax) \0A\09add                        $$8,      %rax  \0A\09 js                        1b                     \0A\09", "r,r,imr,r,~{rax},~{rdx},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr18, i8* %add.ptr20, i64 %conv22, i32* %28) #5, !dbg !6615, !srcloc !6616
  %29 = load i32, i32* %lumStride.addr, align 4, !dbg !6617
  %30 = load i8*, i8** %ydst.addr, align 8, !dbg !6618
  %idx.ext23 = sext i32 %29 to i64, !dbg !6618
  %add.ptr24 = getelementptr inbounds i8, i8* %30, i64 %idx.ext23, !dbg !6618
  store i8* %add.ptr24, i8** %ydst.addr, align 8, !dbg !6618
  %31 = load i32, i32* %srcStride.addr, align 4, !dbg !6619
  %32 = load i8*, i8** %src.addr, align 8, !dbg !6620
  %idx.ext25 = sext i32 %31 to i64, !dbg !6620
  %add.ptr26 = getelementptr inbounds i8, i8* %32, i64 %idx.ext25, !dbg !6620
  store i8* %add.ptr26, i8** %src.addr, align 8, !dbg !6620
  br label %for.inc, !dbg !6621

for.inc:                                          ; preds = %for.body15
  %33 = load i32, i32* %i, align 4, !dbg !6622
  %inc = add nsw i32 %33, 1, !dbg !6622
  store i32 %inc, i32* %i, align 4, !dbg !6622
  br label %for.cond12, !dbg !6624, !llvm.loop !6625

for.end:                                          ; preds = %for.cond12
  %34 = load i32, i32* %srcStride.addr, align 4, !dbg !6627
  %mul27 = mul nsw i32 %34, 2, !dbg !6628
  %35 = load i8*, i8** %src.addr, align 8, !dbg !6629
  %idx.ext28 = sext i32 %mul27 to i64, !dbg !6629
  %idx.neg = sub i64 0, %idx.ext28, !dbg !6629
  %add.ptr29 = getelementptr inbounds i8, i8* %35, i64 %idx.neg, !dbg !6629
  store i8* %add.ptr29, i8** %src.addr, align 8, !dbg !6629
  %36 = load i8*, i8** %src.addr, align 8, !dbg !6630
  %37 = load i64, i64* %chromWidth, align 8, !dbg !6631
  %mul30 = mul nsw i64 %37, 6, !dbg !6632
  %add.ptr31 = getelementptr inbounds i8, i8* %36, i64 %mul30, !dbg !6633
  %38 = load i8*, i8** %src.addr, align 8, !dbg !6634
  %39 = load i32, i32* %srcStride.addr, align 4, !dbg !6635
  %idx.ext32 = sext i32 %39 to i64, !dbg !6636
  %add.ptr33 = getelementptr inbounds i8, i8* %38, i64 %idx.ext32, !dbg !6636
  %40 = load i64, i64* %chromWidth, align 8, !dbg !6637
  %mul34 = mul nsw i64 %40, 6, !dbg !6638
  %add.ptr35 = getelementptr inbounds i8, i8* %add.ptr33, i64 %mul34, !dbg !6639
  %41 = load i8*, i8** %udst.addr, align 8, !dbg !6640
  %42 = load i64, i64* %chromWidth, align 8, !dbg !6641
  %add.ptr36 = getelementptr inbounds i8, i8* %41, i64 %42, !dbg !6642
  %43 = load i8*, i8** %vdst.addr, align 8, !dbg !6643
  %44 = load i64, i64* %chromWidth, align 8, !dbg !6644
  %add.ptr37 = getelementptr inbounds i8, i8* %43, i64 %44, !dbg !6645
  %45 = load i64, i64* %chromWidth, align 8, !dbg !6646
  %sub38 = sub nsw i64 0, %45, !dbg !6647
  %46 = load i32*, i32** %rgb2yuv.addr, align 8, !dbg !6648
  call void asm sideeffect "mov                        $4, %rax\0A\09movq       ff_w1111, %mm5       \0A\09movq          16*4+16*33($5), %mm6       \0A\09pxor                    %mm7, %mm7       \0A\09lea (%rax, %rax, 2), %rdx \0A\09add              %rdx, %rdx\0A\09.p2align                    4              \0A\091:                                         \0A\09prefetchnta 64($0, %rdx)              \0A\09prefetchnta 64($1, %rdx)              \0A\09movq       ($0, %rdx), %mm0       \0A\09movq       ($1, %rdx), %mm1       \0A\09movq      6($0, %rdx), %mm2       \0A\09movq      6($1, %rdx), %mm3       \0A\09pavgb                   %mm1, %mm0       \0A\09pavgb                   %mm3, %mm2       \0A\09movq                    %mm0, %mm1       \0A\09movq                    %mm2, %mm3       \0A\09psrlq                     $$24, %mm0       \0A\09psrlq                     $$24, %mm2       \0A\09pavgb                   %mm1, %mm0       \0A\09pavgb                   %mm3, %mm2       \0A\09punpcklbw               %mm7, %mm0       \0A\09punpcklbw               %mm7, %mm2       \0A\09movq          16*4+16*34($5), %mm1       \0A\09movq          16*4+16*34($5), %mm3       \0A\09pmaddwd                 %mm0, %mm1       \0A\09pmaddwd                 %mm2, %mm3       \0A\09pmaddwd                 %mm6, %mm0       \0A\09pmaddwd                 %mm6, %mm2       \0A\09psrad                      $$8, %mm0       \0A\09psrad                      $$8, %mm1       \0A\09psrad                      $$8, %mm2       \0A\09psrad                      $$8, %mm3       \0A\09packssdw                %mm2, %mm0       \0A\09packssdw                %mm3, %mm1       \0A\09pmaddwd                 %mm5, %mm0       \0A\09pmaddwd                 %mm5, %mm1       \0A\09packssdw                %mm1, %mm0       \0A\09psraw                      $$7, %mm0       \0A\09movq     12($0, %rdx), %mm4       \0A\09movq     12($1, %rdx), %mm1       \0A\09movq     18($0, %rdx), %mm2       \0A\09movq     18($1, %rdx), %mm3       \0A\09pavgb                   %mm1, %mm4       \0A\09pavgb                   %mm3, %mm2       \0A\09movq                    %mm4, %mm1       \0A\09movq                    %mm2, %mm3       \0A\09psrlq                     $$24, %mm4       \0A\09psrlq                     $$24, %mm2       \0A\09pavgb                   %mm1, %mm4       \0A\09pavgb                   %mm3, %mm2       \0A\09punpcklbw               %mm7, %mm4       \0A\09punpcklbw               %mm7, %mm2       \0A\09movq          16*4+16*34($5), %mm1       \0A\09movq          16*4+16*34($5), %mm3       \0A\09pmaddwd                 %mm4, %mm1       \0A\09pmaddwd                 %mm2, %mm3       \0A\09pmaddwd                 %mm6, %mm4       \0A\09pmaddwd                 %mm6, %mm2       \0A\09psrad                      $$8, %mm4       \0A\09psrad                      $$8, %mm1       \0A\09psrad                      $$8, %mm2       \0A\09psrad                      $$8, %mm3       \0A\09packssdw                %mm2, %mm4       \0A\09packssdw                %mm3, %mm1       \0A\09pmaddwd                 %mm5, %mm4       \0A\09pmaddwd                 %mm5, %mm1       \0A\09add                       $$24, %rdx\0A\09packssdw                %mm1, %mm4       \0A\09psraw                      $$7, %mm4       \0A\09movq                    %mm0, %mm1           \0A\09punpckldq               %mm4, %mm0           \0A\09punpckhdq               %mm4, %mm1           \0A\09packsswb                %mm1, %mm0           \0A\09paddb ff_bgr2UVOffset, %mm0         \0A\09movd                    %mm0, ($2, %rax) \0A\09punpckhdq               %mm0, %mm0              \0A\09movd                    %mm0, ($3, %rax) \0A\09add                        $$4, %rax       \0A\09 js                        1b              \0A\09", "r,r,r,r,imr,r,~{rax},~{rdx},~{dirflag},~{fpsr},~{flags}"(i8* %add.ptr31, i8* %add.ptr35, i8* %add.ptr36, i8* %add.ptr37, i64 %sub38, i32* %46) #5, !dbg !6649, !srcloc !6650
  %47 = load i32, i32* %chromStride.addr, align 4, !dbg !6651
  %48 = load i8*, i8** %udst.addr, align 8, !dbg !6652
  %idx.ext39 = sext i32 %47 to i64, !dbg !6652
  %add.ptr40 = getelementptr inbounds i8, i8* %48, i64 %idx.ext39, !dbg !6652
  store i8* %add.ptr40, i8** %udst.addr, align 8, !dbg !6652
  %49 = load i32, i32* %chromStride.addr, align 4, !dbg !6653
  %50 = load i8*, i8** %vdst.addr, align 8, !dbg !6654
  %idx.ext41 = sext i32 %49 to i64, !dbg !6654
  %add.ptr42 = getelementptr inbounds i8, i8* %50, i64 %idx.ext41, !dbg !6654
  store i8* %add.ptr42, i8** %vdst.addr, align 8, !dbg !6654
  %51 = load i32, i32* %srcStride.addr, align 4, !dbg !6655
  %mul43 = mul nsw i32 %51, 2, !dbg !6656
  %52 = load i8*, i8** %src.addr, align 8, !dbg !6657
  %idx.ext44 = sext i32 %mul43 to i64, !dbg !6657
  %add.ptr45 = getelementptr inbounds i8, i8* %52, i64 %idx.ext44, !dbg !6657
  store i8* %add.ptr45, i8** %src.addr, align 8, !dbg !6657
  br label %for.inc46, !dbg !6658

for.inc46:                                        ; preds = %for.end
  %53 = load i32, i32* %y, align 4, !dbg !6659
  %add = add nsw i32 %53, 2, !dbg !6659
  store i32 %add, i32* %y, align 4, !dbg !6659
  br label %for.cond, !dbg !6661, !llvm.loop !6662

for.end47:                                        ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09sfence     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !6664, !srcloc !6665
  %54 = load i8*, i8** %src.addr, align 8, !dbg !6666
  %55 = load i8*, i8** %ydst.addr, align 8, !dbg !6667
  %56 = load i8*, i8** %udst.addr, align 8, !dbg !6668
  %57 = load i8*, i8** %vdst.addr, align 8, !dbg !6669
  %58 = load i32, i32* %width.addr, align 4, !dbg !6670
  %59 = load i32, i32* %height.addr, align 4, !dbg !6671
  %60 = load i32, i32* %y, align 4, !dbg !6672
  %sub48 = sub nsw i32 %59, %60, !dbg !6673
  %61 = load i32, i32* %lumStride.addr, align 4, !dbg !6674
  %62 = load i32, i32* %chromStride.addr, align 4, !dbg !6675
  %63 = load i32, i32* %srcStride.addr, align 4, !dbg !6676
  %64 = load i32*, i32** %rgb2yuv.addr, align 8, !dbg !6677
  call void @ff_rgb24toyv12_c(i8* %54, i8* %55, i8* %56, i8* %57, i32 %58, i32 %sub48, i32 %61, i32 %62, i32 %63, i32* %64), !dbg !6678
  ret void, !dbg !6679
}

; Function Attrs: nounwind uwtable
define internal void @yuyvtoyuv420_mmxext(i8* %ydst, i8* %udst, i8* %vdst, i8* %src, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride) #4 !dbg !6680 {
entry:
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i32, align 4
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !6681, metadata !73), !dbg !6682
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !6683, metadata !73), !dbg !6684
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !6685, metadata !73), !dbg !6686
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !6687, metadata !73), !dbg !6688
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !6689, metadata !73), !dbg !6690
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !6691, metadata !73), !dbg !6692
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !6693, metadata !73), !dbg !6694
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !6695, metadata !73), !dbg !6696
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !6697, metadata !73), !dbg !6698
  call void @llvm.dbg.declare(metadata i32* %y, metadata !6699, metadata !73), !dbg !6700
  call void @llvm.dbg.declare(metadata i32* %chromWidth, metadata !6701, metadata !73), !dbg !6702
  %0 = load i32, i32* %width.addr, align 4, !dbg !6703
  %add = add nsw i32 %0, 2, !dbg !6704
  %sub = sub nsw i32 %add, 1, !dbg !6705
  %shr = ashr i32 %sub, 1, !dbg !6706
  store i32 %shr, i32* %chromWidth, align 4, !dbg !6702
  store i32 0, i32* %y, align 4, !dbg !6707
  br label %for.cond, !dbg !6709

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !6710
  %2 = load i32, i32* %height.addr, align 4, !dbg !6713
  %cmp = icmp slt i32 %1, %2, !dbg !6714
  br i1 %cmp, label %for.body, label %for.end, !dbg !6715

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 8, !dbg !6716
  %4 = load i8*, i8** %ydst.addr, align 8, !dbg !6718
  %5 = load i32, i32* %width.addr, align 4, !dbg !6719
  %conv = sext i32 %5 to i64, !dbg !6719
  call void @extract_even_mmxext(i8* %3, i8* %4, i64 %conv), !dbg !6720
  %6 = load i32, i32* %y, align 4, !dbg !6721
  %and = and i32 %6, 1, !dbg !6723
  %tobool = icmp ne i32 %and, 0, !dbg !6723
  br i1 %tobool, label %if.then, label %if.end, !dbg !6724

if.then:                                          ; preds = %for.body
  %7 = load i8*, i8** %src.addr, align 8, !dbg !6725
  %8 = load i32, i32* %srcStride.addr, align 4, !dbg !6727
  %idx.ext = sext i32 %8 to i64, !dbg !6728
  %idx.neg = sub i64 0, %idx.ext, !dbg !6728
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.neg, !dbg !6728
  %9 = load i8*, i8** %src.addr, align 8, !dbg !6729
  %10 = load i8*, i8** %udst.addr, align 8, !dbg !6730
  %11 = load i8*, i8** %vdst.addr, align 8, !dbg !6731
  %12 = load i32, i32* %chromWidth, align 4, !dbg !6732
  %conv1 = sext i32 %12 to i64, !dbg !6732
  call void @extract_odd2avg_mmxext(i8* %add.ptr, i8* %9, i8* %10, i8* %11, i64 %conv1), !dbg !6733
  %13 = load i32, i32* %chromStride.addr, align 4, !dbg !6734
  %14 = load i8*, i8** %udst.addr, align 8, !dbg !6735
  %idx.ext2 = sext i32 %13 to i64, !dbg !6735
  %add.ptr3 = getelementptr inbounds i8, i8* %14, i64 %idx.ext2, !dbg !6735
  store i8* %add.ptr3, i8** %udst.addr, align 8, !dbg !6735
  %15 = load i32, i32* %chromStride.addr, align 4, !dbg !6736
  %16 = load i8*, i8** %vdst.addr, align 8, !dbg !6737
  %idx.ext4 = sext i32 %15 to i64, !dbg !6737
  %add.ptr5 = getelementptr inbounds i8, i8* %16, i64 %idx.ext4, !dbg !6737
  store i8* %add.ptr5, i8** %vdst.addr, align 8, !dbg !6737
  br label %if.end, !dbg !6738

if.end:                                           ; preds = %if.then, %for.body
  %17 = load i32, i32* %srcStride.addr, align 4, !dbg !6739
  %18 = load i8*, i8** %src.addr, align 8, !dbg !6740
  %idx.ext6 = sext i32 %17 to i64, !dbg !6740
  %add.ptr7 = getelementptr inbounds i8, i8* %18, i64 %idx.ext6, !dbg !6740
  store i8* %add.ptr7, i8** %src.addr, align 8, !dbg !6740
  %19 = load i32, i32* %lumStride.addr, align 4, !dbg !6741
  %20 = load i8*, i8** %ydst.addr, align 8, !dbg !6742
  %idx.ext8 = sext i32 %19 to i64, !dbg !6742
  %add.ptr9 = getelementptr inbounds i8, i8* %20, i64 %idx.ext8, !dbg !6742
  store i8* %add.ptr9, i8** %ydst.addr, align 8, !dbg !6742
  br label %for.inc, !dbg !6743

for.inc:                                          ; preds = %if.end
  %21 = load i32, i32* %y, align 4, !dbg !6744
  %inc = add nsw i32 %21, 1, !dbg !6744
  store i32 %inc, i32* %y, align 4, !dbg !6744
  br label %for.cond, !dbg !6746, !llvm.loop !6747

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09sfence     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !6749, !srcloc !6750
  ret void, !dbg !6751
}

; Function Attrs: nounwind uwtable
define internal void @uyvytoyuv420_mmxext(i8* %ydst, i8* %udst, i8* %vdst, i8* %src, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %srcStride) #4 !dbg !6752 {
entry:
  %ydst.addr = alloca i8*, align 8
  %udst.addr = alloca i8*, align 8
  %vdst.addr = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %srcStride.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i32, align 4
  store i8* %ydst, i8** %ydst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ydst.addr, metadata !6753, metadata !73), !dbg !6754
  store i8* %udst, i8** %udst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %udst.addr, metadata !6755, metadata !73), !dbg !6756
  store i8* %vdst, i8** %vdst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vdst.addr, metadata !6757, metadata !73), !dbg !6758
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !6759, metadata !73), !dbg !6760
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !6761, metadata !73), !dbg !6762
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !6763, metadata !73), !dbg !6764
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !6765, metadata !73), !dbg !6766
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !6767, metadata !73), !dbg !6768
  store i32 %srcStride, i32* %srcStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %srcStride.addr, metadata !6769, metadata !73), !dbg !6770
  call void @llvm.dbg.declare(metadata i32* %y, metadata !6771, metadata !73), !dbg !6772
  call void @llvm.dbg.declare(metadata i32* %chromWidth, metadata !6773, metadata !73), !dbg !6774
  %0 = load i32, i32* %width.addr, align 4, !dbg !6775
  %add = add nsw i32 %0, 2, !dbg !6776
  %sub = sub nsw i32 %add, 1, !dbg !6777
  %shr = ashr i32 %sub, 1, !dbg !6778
  store i32 %shr, i32* %chromWidth, align 4, !dbg !6774
  store i32 0, i32* %y, align 4, !dbg !6779
  br label %for.cond, !dbg !6781

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !6782
  %2 = load i32, i32* %height.addr, align 4, !dbg !6785
  %cmp = icmp slt i32 %1, %2, !dbg !6786
  br i1 %cmp, label %for.body, label %for.end, !dbg !6787

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %src.addr, align 8, !dbg !6788
  %4 = load i8*, i8** %ydst.addr, align 8, !dbg !6790
  %5 = load i32, i32* %width.addr, align 4, !dbg !6791
  %conv = sext i32 %5 to i64, !dbg !6791
  call void @extract_odd_mmxext(i8* %3, i8* %4, i64 %conv), !dbg !6792
  %6 = load i32, i32* %y, align 4, !dbg !6793
  %and = and i32 %6, 1, !dbg !6795
  %tobool = icmp ne i32 %and, 0, !dbg !6795
  br i1 %tobool, label %if.then, label %if.end, !dbg !6796

if.then:                                          ; preds = %for.body
  %7 = load i8*, i8** %src.addr, align 8, !dbg !6797
  %8 = load i32, i32* %srcStride.addr, align 4, !dbg !6799
  %idx.ext = sext i32 %8 to i64, !dbg !6800
  %idx.neg = sub i64 0, %idx.ext, !dbg !6800
  %add.ptr = getelementptr inbounds i8, i8* %7, i64 %idx.neg, !dbg !6800
  %9 = load i8*, i8** %src.addr, align 8, !dbg !6801
  %10 = load i8*, i8** %udst.addr, align 8, !dbg !6802
  %11 = load i8*, i8** %vdst.addr, align 8, !dbg !6803
  %12 = load i32, i32* %chromWidth, align 4, !dbg !6804
  %conv1 = sext i32 %12 to i64, !dbg !6804
  call void @extract_even2avg_mmxext(i8* %add.ptr, i8* %9, i8* %10, i8* %11, i64 %conv1), !dbg !6805
  %13 = load i32, i32* %chromStride.addr, align 4, !dbg !6806
  %14 = load i8*, i8** %udst.addr, align 8, !dbg !6807
  %idx.ext2 = sext i32 %13 to i64, !dbg !6807
  %add.ptr3 = getelementptr inbounds i8, i8* %14, i64 %idx.ext2, !dbg !6807
  store i8* %add.ptr3, i8** %udst.addr, align 8, !dbg !6807
  %15 = load i32, i32* %chromStride.addr, align 4, !dbg !6808
  %16 = load i8*, i8** %vdst.addr, align 8, !dbg !6809
  %idx.ext4 = sext i32 %15 to i64, !dbg !6809
  %add.ptr5 = getelementptr inbounds i8, i8* %16, i64 %idx.ext4, !dbg !6809
  store i8* %add.ptr5, i8** %vdst.addr, align 8, !dbg !6809
  br label %if.end, !dbg !6810

if.end:                                           ; preds = %if.then, %for.body
  %17 = load i32, i32* %srcStride.addr, align 4, !dbg !6811
  %18 = load i8*, i8** %src.addr, align 8, !dbg !6812
  %idx.ext6 = sext i32 %17 to i64, !dbg !6812
  %add.ptr7 = getelementptr inbounds i8, i8* %18, i64 %idx.ext6, !dbg !6812
  store i8* %add.ptr7, i8** %src.addr, align 8, !dbg !6812
  %19 = load i32, i32* %lumStride.addr, align 4, !dbg !6813
  %20 = load i8*, i8** %ydst.addr, align 8, !dbg !6814
  %idx.ext8 = sext i32 %19 to i64, !dbg !6814
  %add.ptr9 = getelementptr inbounds i8, i8* %20, i64 %idx.ext8, !dbg !6814
  store i8* %add.ptr9, i8** %ydst.addr, align 8, !dbg !6814
  br label %for.inc, !dbg !6815

for.inc:                                          ; preds = %if.end
  %21 = load i32, i32* %y, align 4, !dbg !6816
  %inc = add nsw i32 %21, 1, !dbg !6816
  store i32 %inc, i32* %y, align 4, !dbg !6816
  br label %for.cond, !dbg !6818, !llvm.loop !6819

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09sfence     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !6821, !srcloc !6822
  ret void, !dbg !6823
}

; Function Attrs: nounwind uwtable
define internal void @interleaveBytes_mmxext(i8* %src1, i8* %src2, i8* %dest, i32 %width, i32 %height, i32 %src1Stride, i32 %src2Stride, i32 %dstStride) #4 !dbg !6824 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %src1Stride.addr = alloca i32, align 4
  %src2Stride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  %h = alloca i32, align 4
  %w = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src1.addr, metadata !6825, metadata !73), !dbg !6826
  store i8* %src2, i8** %src2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src2.addr, metadata !6827, metadata !73), !dbg !6828
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !6829, metadata !73), !dbg !6830
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !6831, metadata !73), !dbg !6832
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !6833, metadata !73), !dbg !6834
  store i32 %src1Stride, i32* %src1Stride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src1Stride.addr, metadata !6835, metadata !73), !dbg !6836
  store i32 %src2Stride, i32* %src2Stride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src2Stride.addr, metadata !6837, metadata !73), !dbg !6838
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !6839, metadata !73), !dbg !6840
  call void @llvm.dbg.declare(metadata i32* %h, metadata !6841, metadata !73), !dbg !6842
  store i32 0, i32* %h, align 4, !dbg !6843
  br label %for.cond, !dbg !6845

for.cond:                                         ; preds = %for.inc18, %entry
  %0 = load i32, i32* %h, align 4, !dbg !6846
  %1 = load i32, i32* %height.addr, align 4, !dbg !6849
  %cmp = icmp slt i32 %0, %1, !dbg !6850
  br i1 %cmp, label %for.body, label %for.end20, !dbg !6851

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %w, metadata !6852, metadata !73), !dbg !6854
  %2 = load i32, i32* %width.addr, align 4, !dbg !6855
  %cmp1 = icmp sge i32 %2, 16, !dbg !6857
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6858

if.then:                                          ; preds = %for.body
  %3 = load i8*, i8** %dest.addr, align 8, !dbg !6859
  %4 = load i8*, i8** %src1.addr, align 8, !dbg !6861
  %5 = load i8*, i8** %src2.addr, align 8, !dbg !6862
  %6 = load i32, i32* %width.addr, align 4, !dbg !6863
  %conv = sext i32 %6 to i64, !dbg !6864
  %sub = sub nsw i64 %conv, 15, !dbg !6865
  call void asm sideeffect "xor %rax, %rax         \0A\091:                                     \0A\09prefetchnta 64($1, %rax)          \0A\09prefetchnta 64($2, %rax)          \0A\09movq    ($1, %rax), %mm0      \0A\09movq   8($1, %rax), %mm2      \0A\09movq                 %mm0, %mm1      \0A\09movq                 %mm2, %mm3      \0A\09movq    ($2, %rax), %mm4      \0A\09movq   8($2, %rax), %mm5      \0A\09punpcklbw            %mm4, %mm0      \0A\09punpckhbw            %mm4, %mm1      \0A\09punpcklbw            %mm5, %mm2      \0A\09punpckhbw            %mm5, %mm3      \0A\09movntq               %mm0,   ($0, %rax, 2) \0A\09movntq               %mm1,  8($0, %rax, 2) \0A\09movntq               %mm2, 16($0, %rax, 2) \0A\09movntq               %mm3, 24($0, %rax, 2) \0A\09add                    $$16, %rax            \0A\09cmp                     $3, %rax            \0A\09 jb                     1b                          \0A\09", "r,r,r,r,~{memory},~{rax},~{dirflag},~{fpsr},~{flags}"(i8* %3, i8* %4, i8* %5, i64 %sub) #5, !dbg !6866, !srcloc !6867
  br label %if.end, !dbg !6868

if.end:                                           ; preds = %if.then, %for.body
  %7 = load i32, i32* %width.addr, align 4, !dbg !6869
  %and = and i32 %7, -16, !dbg !6871
  store i32 %and, i32* %w, align 4, !dbg !6872
  br label %for.cond2, !dbg !6873

for.cond2:                                        ; preds = %for.inc, %if.end
  %8 = load i32, i32* %w, align 4, !dbg !6874
  %9 = load i32, i32* %width.addr, align 4, !dbg !6877
  %cmp3 = icmp slt i32 %8, %9, !dbg !6878
  br i1 %cmp3, label %for.body5, label %for.end, !dbg !6879

for.body5:                                        ; preds = %for.cond2
  %10 = load i32, i32* %w, align 4, !dbg !6880
  %idxprom = sext i32 %10 to i64, !dbg !6882
  %11 = load i8*, i8** %src1.addr, align 8, !dbg !6882
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 %idxprom, !dbg !6882
  %12 = load i8, i8* %arrayidx, align 1, !dbg !6882
  %13 = load i32, i32* %w, align 4, !dbg !6883
  %mul = mul nsw i32 2, %13, !dbg !6884
  %add = add nsw i32 %mul, 0, !dbg !6885
  %idxprom6 = sext i32 %add to i64, !dbg !6886
  %14 = load i8*, i8** %dest.addr, align 8, !dbg !6886
  %arrayidx7 = getelementptr inbounds i8, i8* %14, i64 %idxprom6, !dbg !6886
  store i8 %12, i8* %arrayidx7, align 1, !dbg !6887
  %15 = load i32, i32* %w, align 4, !dbg !6888
  %idxprom8 = sext i32 %15 to i64, !dbg !6889
  %16 = load i8*, i8** %src2.addr, align 8, !dbg !6889
  %arrayidx9 = getelementptr inbounds i8, i8* %16, i64 %idxprom8, !dbg !6889
  %17 = load i8, i8* %arrayidx9, align 1, !dbg !6889
  %18 = load i32, i32* %w, align 4, !dbg !6890
  %mul10 = mul nsw i32 2, %18, !dbg !6891
  %add11 = add nsw i32 %mul10, 1, !dbg !6892
  %idxprom12 = sext i32 %add11 to i64, !dbg !6893
  %19 = load i8*, i8** %dest.addr, align 8, !dbg !6893
  %arrayidx13 = getelementptr inbounds i8, i8* %19, i64 %idxprom12, !dbg !6893
  store i8 %17, i8* %arrayidx13, align 1, !dbg !6894
  br label %for.inc, !dbg !6895

for.inc:                                          ; preds = %for.body5
  %20 = load i32, i32* %w, align 4, !dbg !6896
  %inc = add nsw i32 %20, 1, !dbg !6896
  store i32 %inc, i32* %w, align 4, !dbg !6896
  br label %for.cond2, !dbg !6898, !llvm.loop !6899

for.end:                                          ; preds = %for.cond2
  %21 = load i32, i32* %dstStride.addr, align 4, !dbg !6901
  %22 = load i8*, i8** %dest.addr, align 8, !dbg !6902
  %idx.ext = sext i32 %21 to i64, !dbg !6902
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 %idx.ext, !dbg !6902
  store i8* %add.ptr, i8** %dest.addr, align 8, !dbg !6902
  %23 = load i32, i32* %src1Stride.addr, align 4, !dbg !6903
  %24 = load i8*, i8** %src1.addr, align 8, !dbg !6904
  %idx.ext14 = sext i32 %23 to i64, !dbg !6904
  %add.ptr15 = getelementptr inbounds i8, i8* %24, i64 %idx.ext14, !dbg !6904
  store i8* %add.ptr15, i8** %src1.addr, align 8, !dbg !6904
  %25 = load i32, i32* %src2Stride.addr, align 4, !dbg !6905
  %26 = load i8*, i8** %src2.addr, align 8, !dbg !6906
  %idx.ext16 = sext i32 %25 to i64, !dbg !6906
  %add.ptr17 = getelementptr inbounds i8, i8* %26, i64 %idx.ext16, !dbg !6906
  store i8* %add.ptr17, i8** %src2.addr, align 8, !dbg !6906
  br label %for.inc18, !dbg !6907

for.inc18:                                        ; preds = %for.end
  %27 = load i32, i32* %h, align 4, !dbg !6908
  %inc19 = add nsw i32 %27, 1, !dbg !6908
  store i32 %inc19, i32* %h, align 4, !dbg !6908
  br label %for.cond, !dbg !6910, !llvm.loop !6911

for.end20:                                        ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09sfence     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !6913, !srcloc !6914
  ret void, !dbg !6915
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yuvPlanartoyuy2_mmxext(i8* %ysrc, i8* %usrc, i8* %vsrc, i8* %dst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %dstStride, i32 %vertLumPerChroma) #3 !dbg !6916 {
entry:
  %ysrc.addr = alloca i8*, align 8
  %usrc.addr = alloca i8*, align 8
  %vsrc.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  %vertLumPerChroma.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i64, align 8
  store i8* %ysrc, i8** %ysrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ysrc.addr, metadata !6917, metadata !73), !dbg !6918
  store i8* %usrc, i8** %usrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %usrc.addr, metadata !6919, metadata !73), !dbg !6920
  store i8* %vsrc, i8** %vsrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vsrc.addr, metadata !6921, metadata !73), !dbg !6922
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !6923, metadata !73), !dbg !6924
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !6925, metadata !73), !dbg !6926
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !6927, metadata !73), !dbg !6928
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !6929, metadata !73), !dbg !6930
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !6931, metadata !73), !dbg !6932
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !6933, metadata !73), !dbg !6934
  store i32 %vertLumPerChroma, i32* %vertLumPerChroma.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vertLumPerChroma.addr, metadata !6935, metadata !73), !dbg !6936
  call void @llvm.dbg.declare(metadata i32* %y, metadata !6937, metadata !73), !dbg !6938
  call void @llvm.dbg.declare(metadata i64* %chromWidth, metadata !6939, metadata !73), !dbg !6940
  %0 = load i32, i32* %width.addr, align 4, !dbg !6941
  %shr = ashr i32 %0, 1, !dbg !6942
  %conv = sext i32 %shr to i64, !dbg !6941
  store i64 %conv, i64* %chromWidth, align 8, !dbg !6940
  store i32 0, i32* %y, align 4, !dbg !6943
  br label %for.cond, !dbg !6945

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !6946
  %2 = load i32, i32* %height.addr, align 4, !dbg !6949
  %cmp = icmp slt i32 %1, %2, !dbg !6950
  br i1 %cmp, label %for.body, label %for.end, !dbg !6951

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %dst.addr, align 8, !dbg !6952
  %4 = load i8*, i8** %ysrc.addr, align 8, !dbg !6954
  %5 = load i8*, i8** %usrc.addr, align 8, !dbg !6955
  %6 = load i8*, i8** %vsrc.addr, align 8, !dbg !6956
  %7 = load i64, i64* %chromWidth, align 8, !dbg !6957
  call void asm sideeffect "xor                 %rax, %rax \0A\09.p2align                    4              \0A\091:                                         \0A\09prefetchnta 32($1, %rax, 2)           \0A\09prefetchnta 32($2, %rax)              \0A\09prefetchnta 32($3, %rax)              \0A\09movq       ($2, %rax), %mm0       \0A\09movq                    %mm0, %mm2       \0A\09movq       ($3, %rax), %mm1       \0A\09punpcklbw               %mm1, %mm0       \0A\09punpckhbw               %mm1, %mm2       \0A\09movq     ($1, %rax,2), %mm3       \0A\09movq    8($1, %rax,2), %mm5       \0A\09movq                    %mm3, %mm4       \0A\09movq                    %mm5, %mm6       \0A\09punpcklbw               %mm0, %mm3       \0A\09punpckhbw               %mm0, %mm4       \0A\09punpcklbw               %mm2, %mm5       \0A\09punpckhbw               %mm2, %mm6       \0A\09movntq                  %mm3,   ($0, %rax, 4)    \0A\09movntq                  %mm4,  8($0, %rax, 4)    \0A\09movntq                  %mm5, 16($0, %rax, 4)    \0A\09movntq                  %mm6, 24($0, %rax, 4)    \0A\09add                        $$8, %rax \0A\09cmp                        $4, %rax \0A\09 jb                        1b               \0A\09", "r,r,r,r,imr,~{rax},~{dirflag},~{fpsr},~{flags}"(i8* %3, i8* %4, i8* %5, i8* %6, i64 %7) #5, !dbg !6958, !srcloc !6959
  %8 = load i32, i32* %y, align 4, !dbg !6960
  %9 = load i32, i32* %vertLumPerChroma.addr, align 4, !dbg !6962
  %sub = sub nsw i32 %9, 1, !dbg !6963
  %and = and i32 %8, %sub, !dbg !6964
  %10 = load i32, i32* %vertLumPerChroma.addr, align 4, !dbg !6965
  %sub2 = sub nsw i32 %10, 1, !dbg !6966
  %cmp3 = icmp eq i32 %and, %sub2, !dbg !6967
  br i1 %cmp3, label %if.then, label %if.end, !dbg !6968

if.then:                                          ; preds = %for.body
  %11 = load i32, i32* %chromStride.addr, align 4, !dbg !6969
  %12 = load i8*, i8** %usrc.addr, align 8, !dbg !6971
  %idx.ext = sext i32 %11 to i64, !dbg !6971
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %idx.ext, !dbg !6971
  store i8* %add.ptr, i8** %usrc.addr, align 8, !dbg !6971
  %13 = load i32, i32* %chromStride.addr, align 4, !dbg !6972
  %14 = load i8*, i8** %vsrc.addr, align 8, !dbg !6973
  %idx.ext5 = sext i32 %13 to i64, !dbg !6973
  %add.ptr6 = getelementptr inbounds i8, i8* %14, i64 %idx.ext5, !dbg !6973
  store i8* %add.ptr6, i8** %vsrc.addr, align 8, !dbg !6973
  br label %if.end, !dbg !6974

if.end:                                           ; preds = %if.then, %for.body
  %15 = load i32, i32* %lumStride.addr, align 4, !dbg !6975
  %16 = load i8*, i8** %ysrc.addr, align 8, !dbg !6976
  %idx.ext7 = sext i32 %15 to i64, !dbg !6976
  %add.ptr8 = getelementptr inbounds i8, i8* %16, i64 %idx.ext7, !dbg !6976
  store i8* %add.ptr8, i8** %ysrc.addr, align 8, !dbg !6976
  %17 = load i32, i32* %dstStride.addr, align 4, !dbg !6977
  %18 = load i8*, i8** %dst.addr, align 8, !dbg !6978
  %idx.ext9 = sext i32 %17 to i64, !dbg !6978
  %add.ptr10 = getelementptr inbounds i8, i8* %18, i64 %idx.ext9, !dbg !6978
  store i8* %add.ptr10, i8** %dst.addr, align 8, !dbg !6978
  br label %for.inc, !dbg !6979

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %y, align 4, !dbg !6980
  %inc = add nsw i32 %19, 1, !dbg !6980
  store i32 %inc, i32* %y, align 4, !dbg !6980
  br label %for.cond, !dbg !6982, !llvm.loop !6983

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09sfence     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !6985, !srcloc !6986
  ret void, !dbg !6987
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @yuvPlanartouyvy_mmxext(i8* %ysrc, i8* %usrc, i8* %vsrc, i8* %dst, i32 %width, i32 %height, i32 %lumStride, i32 %chromStride, i32 %dstStride, i32 %vertLumPerChroma) #3 !dbg !6988 {
entry:
  %ysrc.addr = alloca i8*, align 8
  %usrc.addr = alloca i8*, align 8
  %vsrc.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %lumStride.addr = alloca i32, align 4
  %chromStride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  %vertLumPerChroma.addr = alloca i32, align 4
  %y = alloca i32, align 4
  %chromWidth = alloca i64, align 8
  store i8* %ysrc, i8** %ysrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ysrc.addr, metadata !6989, metadata !73), !dbg !6990
  store i8* %usrc, i8** %usrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %usrc.addr, metadata !6991, metadata !73), !dbg !6992
  store i8* %vsrc, i8** %vsrc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vsrc.addr, metadata !6993, metadata !73), !dbg !6994
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !6995, metadata !73), !dbg !6996
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !6997, metadata !73), !dbg !6998
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !6999, metadata !73), !dbg !7000
  store i32 %lumStride, i32* %lumStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lumStride.addr, metadata !7001, metadata !73), !dbg !7002
  store i32 %chromStride, i32* %chromStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chromStride.addr, metadata !7003, metadata !73), !dbg !7004
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !7005, metadata !73), !dbg !7006
  store i32 %vertLumPerChroma, i32* %vertLumPerChroma.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vertLumPerChroma.addr, metadata !7007, metadata !73), !dbg !7008
  call void @llvm.dbg.declare(metadata i32* %y, metadata !7009, metadata !73), !dbg !7010
  call void @llvm.dbg.declare(metadata i64* %chromWidth, metadata !7011, metadata !73), !dbg !7012
  %0 = load i32, i32* %width.addr, align 4, !dbg !7013
  %shr = ashr i32 %0, 1, !dbg !7014
  %conv = sext i32 %shr to i64, !dbg !7013
  store i64 %conv, i64* %chromWidth, align 8, !dbg !7012
  store i32 0, i32* %y, align 4, !dbg !7015
  br label %for.cond, !dbg !7017

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %y, align 4, !dbg !7018
  %2 = load i32, i32* %height.addr, align 4, !dbg !7021
  %cmp = icmp slt i32 %1, %2, !dbg !7022
  br i1 %cmp, label %for.body, label %for.end, !dbg !7023

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %dst.addr, align 8, !dbg !7024
  %4 = load i8*, i8** %ysrc.addr, align 8, !dbg !7026
  %5 = load i8*, i8** %usrc.addr, align 8, !dbg !7027
  %6 = load i8*, i8** %vsrc.addr, align 8, !dbg !7028
  %7 = load i64, i64* %chromWidth, align 8, !dbg !7029
  call void asm sideeffect "xor             %rax, %rax \0A\09.p2align                   4               \0A\091:                                         \0A\09prefetchnta 32($1, %rax, 2)           \0A\09prefetchnta 32($2, %rax)              \0A\09prefetchnta 32($3, %rax)              \0A\09movq      ($2, %rax), %mm0        \0A\09movq                   %mm0, %mm2        \0A\09movq      ($3, %rax), %mm1        \0A\09punpcklbw              %mm1, %mm0        \0A\09punpckhbw              %mm1, %mm2        \0A\09movq    ($1, %rax,2), %mm3        \0A\09movq   8($1, %rax,2), %mm5        \0A\09movq                   %mm0, %mm4        \0A\09movq                   %mm2, %mm6        \0A\09punpcklbw              %mm3, %mm0        \0A\09punpckhbw              %mm3, %mm4        \0A\09punpcklbw              %mm5, %mm2        \0A\09punpckhbw              %mm5, %mm6        \0A\09movntq                 %mm0,   ($0, %rax, 4)     \0A\09movntq                 %mm4,  8($0, %rax, 4)     \0A\09movntq                 %mm2, 16($0, %rax, 4)     \0A\09movntq                 %mm6, 24($0, %rax, 4)     \0A\09add                       $$8, %rax \0A\09cmp                       $4, %rax \0A\09 jb                       1b               \0A\09", "r,r,r,r,imr,~{rax},~{dirflag},~{fpsr},~{flags}"(i8* %3, i8* %4, i8* %5, i8* %6, i64 %7) #5, !dbg !7030, !srcloc !7031
  %8 = load i32, i32* %y, align 4, !dbg !7032
  %9 = load i32, i32* %vertLumPerChroma.addr, align 4, !dbg !7034
  %sub = sub nsw i32 %9, 1, !dbg !7035
  %and = and i32 %8, %sub, !dbg !7036
  %10 = load i32, i32* %vertLumPerChroma.addr, align 4, !dbg !7037
  %sub2 = sub nsw i32 %10, 1, !dbg !7038
  %cmp3 = icmp eq i32 %and, %sub2, !dbg !7039
  br i1 %cmp3, label %if.then, label %if.end, !dbg !7040

if.then:                                          ; preds = %for.body
  %11 = load i32, i32* %chromStride.addr, align 4, !dbg !7041
  %12 = load i8*, i8** %usrc.addr, align 8, !dbg !7043
  %idx.ext = sext i32 %11 to i64, !dbg !7043
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %idx.ext, !dbg !7043
  store i8* %add.ptr, i8** %usrc.addr, align 8, !dbg !7043
  %13 = load i32, i32* %chromStride.addr, align 4, !dbg !7044
  %14 = load i8*, i8** %vsrc.addr, align 8, !dbg !7045
  %idx.ext5 = sext i32 %13 to i64, !dbg !7045
  %add.ptr6 = getelementptr inbounds i8, i8* %14, i64 %idx.ext5, !dbg !7045
  store i8* %add.ptr6, i8** %vsrc.addr, align 8, !dbg !7045
  br label %if.end, !dbg !7046

if.end:                                           ; preds = %if.then, %for.body
  %15 = load i32, i32* %lumStride.addr, align 4, !dbg !7047
  %16 = load i8*, i8** %ysrc.addr, align 8, !dbg !7048
  %idx.ext7 = sext i32 %15 to i64, !dbg !7048
  %add.ptr8 = getelementptr inbounds i8, i8* %16, i64 %idx.ext7, !dbg !7048
  store i8* %add.ptr8, i8** %ysrc.addr, align 8, !dbg !7048
  %17 = load i32, i32* %dstStride.addr, align 4, !dbg !7049
  %18 = load i8*, i8** %dst.addr, align 8, !dbg !7050
  %idx.ext9 = sext i32 %17 to i64, !dbg !7050
  %add.ptr10 = getelementptr inbounds i8, i8* %18, i64 %idx.ext9, !dbg !7050
  store i8* %add.ptr10, i8** %dst.addr, align 8, !dbg !7050
  br label %for.inc, !dbg !7051

for.inc:                                          ; preds = %if.end
  %19 = load i32, i32* %y, align 4, !dbg !7052
  %inc = add nsw i32 %19, 1, !dbg !7052
  store i32 %inc, i32* %y, align 4, !dbg !7052
  br label %for.cond, !dbg !7054, !llvm.loop !7055

for.end:                                          ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09sfence     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !7057, !srcloc !7058
  ret void, !dbg !7059
}

; Function Attrs: nounwind uwtable
define internal void @extract_odd_mmxext(i8* %src, i8* %dst, i64 %count) #4 !dbg !7060 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !7061, metadata !73), !dbg !7062
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !7063, metadata !73), !dbg !7064
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !7065, metadata !73), !dbg !7066
  %0 = load i8*, i8** %src.addr, align 8, !dbg !7067
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1, !dbg !7067
  store i8* %incdec.ptr, i8** %src.addr, align 8, !dbg !7067
  %1 = load i64, i64* %count.addr, align 8, !dbg !7068
  %2 = load i8*, i8** %dst.addr, align 8, !dbg !7069
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %1, !dbg !7069
  store i8* %add.ptr, i8** %dst.addr, align 8, !dbg !7069
  %3 = load i64, i64* %count.addr, align 8, !dbg !7070
  %mul = mul nsw i64 2, %3, !dbg !7071
  %4 = load i8*, i8** %src.addr, align 8, !dbg !7072
  %add.ptr1 = getelementptr inbounds i8, i8* %4, i64 %mul, !dbg !7072
  store i8* %add.ptr1, i8** %src.addr, align 8, !dbg !7072
  %5 = load i64, i64* %count.addr, align 8, !dbg !7073
  %sub = sub nsw i64 0, %5, !dbg !7074
  store i64 %sub, i64* %count.addr, align 8, !dbg !7075
  %6 = load i64, i64* %count.addr, align 8, !dbg !7076
  %cmp = icmp slt i64 %6, -16, !dbg !7078
  br i1 %cmp, label %if.then, label %if.end, !dbg !7079

if.then:                                          ; preds = %entry
  %7 = load i64, i64* %count.addr, align 8, !dbg !7080
  %add = add nsw i64 %7, 16, !dbg !7080
  store i64 %add, i64* %count.addr, align 8, !dbg !7080
  %8 = load i64, i64* %count.addr, align 8, !dbg !7082
  %9 = load i8*, i8** %src.addr, align 8, !dbg !7083
  %10 = load i8*, i8** %dst.addr, align 8, !dbg !7084
  %11 = call i64 asm sideeffect "pcmpeqw       %mm7, %mm7        \0A\09psrlw            $$8, %mm7        \0A\091:                                \0A\09movq -32($1, $0, 2), %mm0        \0A\09movq -24($1, $0, 2), %mm1        \0A\09movq -16($1, $0, 2), %mm2        \0A\09movq  -8($1, $0, 2), %mm3        \0A\09pand          %mm7, %mm0        \0A\09pand          %mm7, %mm1        \0A\09pand          %mm7, %mm2        \0A\09pand          %mm7, %mm3        \0A\09packuswb      %mm1, %mm0        \0A\09packuswb      %mm3, %mm2        \0A\09movntq        %mm0,-16($2, $0)   \0A\09movntq        %mm2,- 8($2, $0)   \0A\09add             $$16, $0           \0A\09 js 1b                            \0A\09", "=r,r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %9, i8* %10, i64 %8) #5, !dbg !7082, !srcloc !7085
  store i64 %11, i64* %count.addr, align 8, !dbg !7082
  %12 = load i64, i64* %count.addr, align 8, !dbg !7086
  %sub2 = sub nsw i64 %12, 16, !dbg !7086
  store i64 %sub2, i64* %count.addr, align 8, !dbg !7086
  br label %if.end, !dbg !7087

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !7088

while.cond:                                       ; preds = %while.body, %if.end
  %13 = load i64, i64* %count.addr, align 8, !dbg !7089
  %cmp3 = icmp slt i64 %13, 0, !dbg !7091
  br i1 %cmp3, label %while.body, label %while.end, !dbg !7092

while.body:                                       ; preds = %while.cond
  %14 = load i64, i64* %count.addr, align 8, !dbg !7093
  %mul4 = mul nsw i64 2, %14, !dbg !7095
  %15 = load i8*, i8** %src.addr, align 8, !dbg !7096
  %arrayidx = getelementptr inbounds i8, i8* %15, i64 %mul4, !dbg !7096
  %16 = load i8, i8* %arrayidx, align 1, !dbg !7096
  %17 = load i64, i64* %count.addr, align 8, !dbg !7097
  %18 = load i8*, i8** %dst.addr, align 8, !dbg !7098
  %arrayidx5 = getelementptr inbounds i8, i8* %18, i64 %17, !dbg !7098
  store i8 %16, i8* %arrayidx5, align 1, !dbg !7099
  %19 = load i64, i64* %count.addr, align 8, !dbg !7100
  %inc = add nsw i64 %19, 1, !dbg !7100
  store i64 %inc, i64* %count.addr, align 8, !dbg !7100
  br label %while.cond, !dbg !7101, !llvm.loop !7103

while.end:                                        ; preds = %while.cond
  ret void, !dbg !7104
}

; Function Attrs: nounwind uwtable
define internal void @extract_even2_mmxext(i8* %src, i8* %dst0, i8* %dst1, i64 %count) #4 !dbg !7105 {
entry:
  %src.addr = alloca i8*, align 8
  %dst0.addr = alloca i8*, align 8
  %dst1.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !7106, metadata !73), !dbg !7107
  store i8* %dst0, i8** %dst0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst0.addr, metadata !7108, metadata !73), !dbg !7109
  store i8* %dst1, i8** %dst1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst1.addr, metadata !7110, metadata !73), !dbg !7111
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !7112, metadata !73), !dbg !7113
  %0 = load i64, i64* %count.addr, align 8, !dbg !7114
  %1 = load i8*, i8** %dst0.addr, align 8, !dbg !7115
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !7115
  store i8* %add.ptr, i8** %dst0.addr, align 8, !dbg !7115
  %2 = load i64, i64* %count.addr, align 8, !dbg !7116
  %3 = load i8*, i8** %dst1.addr, align 8, !dbg !7117
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 %2, !dbg !7117
  store i8* %add.ptr1, i8** %dst1.addr, align 8, !dbg !7117
  %4 = load i64, i64* %count.addr, align 8, !dbg !7118
  %mul = mul nsw i64 4, %4, !dbg !7119
  %5 = load i8*, i8** %src.addr, align 8, !dbg !7120
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %mul, !dbg !7120
  store i8* %add.ptr2, i8** %src.addr, align 8, !dbg !7120
  %6 = load i64, i64* %count.addr, align 8, !dbg !7121
  %sub = sub nsw i64 0, %6, !dbg !7122
  store i64 %sub, i64* %count.addr, align 8, !dbg !7123
  %7 = load i64, i64* %count.addr, align 8, !dbg !7124
  %cmp = icmp sle i64 %7, -8, !dbg !7126
  br i1 %cmp, label %if.then, label %if.end, !dbg !7127

if.then:                                          ; preds = %entry
  %8 = load i64, i64* %count.addr, align 8, !dbg !7128
  %add = add nsw i64 %8, 7, !dbg !7128
  store i64 %add, i64* %count.addr, align 8, !dbg !7128
  %9 = load i64, i64* %count.addr, align 8, !dbg !7130
  %10 = load i8*, i8** %src.addr, align 8, !dbg !7131
  %11 = load i8*, i8** %dst0.addr, align 8, !dbg !7132
  %12 = load i8*, i8** %dst1.addr, align 8, !dbg !7133
  %13 = call i64 asm sideeffect "pcmpeqw       %mm7, %mm7        \0A\09psrlw            $$8, %mm7        \0A\091:                                \0A\09movq -28($1, $0, 4), %mm0        \0A\09movq -20($1, $0, 4), %mm1        \0A\09movq -12($1, $0, 4), %mm2        \0A\09movq  -4($1, $0, 4), %mm3        \0A\09pand          %mm7, %mm0        \0A\09pand          %mm7, %mm1        \0A\09pand          %mm7, %mm2        \0A\09pand          %mm7, %mm3        \0A\09packuswb      %mm1, %mm0        \0A\09packuswb      %mm3, %mm2        \0A\09movq          %mm0, %mm1        \0A\09movq          %mm2, %mm3        \0A\09psrlw            $$8, %mm0        \0A\09psrlw            $$8, %mm2        \0A\09pand          %mm7, %mm1        \0A\09pand          %mm7, %mm3        \0A\09packuswb      %mm2, %mm0        \0A\09packuswb      %mm3, %mm1        \0A\09movntq        %mm0,- 7($3, $0)   \0A\09movntq        %mm1,- 7($2, $0)   \0A\09add              $$8, $0           \0A\09 js 1b                            \0A\09", "=r,r,r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %10, i8* %11, i8* %12, i64 %9) #5, !dbg !7130, !srcloc !7134
  store i64 %13, i64* %count.addr, align 8, !dbg !7130
  %14 = load i64, i64* %count.addr, align 8, !dbg !7135
  %sub3 = sub nsw i64 %14, 7, !dbg !7135
  store i64 %sub3, i64* %count.addr, align 8, !dbg !7135
  br label %if.end, !dbg !7136

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !7137

while.cond:                                       ; preds = %while.body, %if.end
  %15 = load i64, i64* %count.addr, align 8, !dbg !7138
  %cmp4 = icmp slt i64 %15, 0, !dbg !7140
  br i1 %cmp4, label %while.body, label %while.end, !dbg !7141

while.body:                                       ; preds = %while.cond
  %16 = load i64, i64* %count.addr, align 8, !dbg !7142
  %mul5 = mul nsw i64 4, %16, !dbg !7144
  %add6 = add nsw i64 %mul5, 0, !dbg !7145
  %17 = load i8*, i8** %src.addr, align 8, !dbg !7146
  %arrayidx = getelementptr inbounds i8, i8* %17, i64 %add6, !dbg !7146
  %18 = load i8, i8* %arrayidx, align 1, !dbg !7146
  %19 = load i64, i64* %count.addr, align 8, !dbg !7147
  %20 = load i8*, i8** %dst0.addr, align 8, !dbg !7148
  %arrayidx7 = getelementptr inbounds i8, i8* %20, i64 %19, !dbg !7148
  store i8 %18, i8* %arrayidx7, align 1, !dbg !7149
  %21 = load i64, i64* %count.addr, align 8, !dbg !7150
  %mul8 = mul nsw i64 4, %21, !dbg !7151
  %add9 = add nsw i64 %mul8, 2, !dbg !7152
  %22 = load i8*, i8** %src.addr, align 8, !dbg !7153
  %arrayidx10 = getelementptr inbounds i8, i8* %22, i64 %add9, !dbg !7153
  %23 = load i8, i8* %arrayidx10, align 1, !dbg !7153
  %24 = load i64, i64* %count.addr, align 8, !dbg !7154
  %25 = load i8*, i8** %dst1.addr, align 8, !dbg !7155
  %arrayidx11 = getelementptr inbounds i8, i8* %25, i64 %24, !dbg !7155
  store i8 %23, i8* %arrayidx11, align 1, !dbg !7156
  %26 = load i64, i64* %count.addr, align 8, !dbg !7157
  %inc = add nsw i64 %26, 1, !dbg !7157
  store i64 %inc, i64* %count.addr, align 8, !dbg !7157
  br label %while.cond, !dbg !7158, !llvm.loop !7160

while.end:                                        ; preds = %while.cond
  ret void, !dbg !7161
}

; Function Attrs: nounwind uwtable
define internal void @extract_even_mmxext(i8* %src, i8* %dst, i64 %count) #4 !dbg !7162 {
entry:
  %src.addr = alloca i8*, align 8
  %dst.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !7163, metadata !73), !dbg !7164
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !7165, metadata !73), !dbg !7166
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !7167, metadata !73), !dbg !7168
  %0 = load i64, i64* %count.addr, align 8, !dbg !7169
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !7170
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !7170
  store i8* %add.ptr, i8** %dst.addr, align 8, !dbg !7170
  %2 = load i64, i64* %count.addr, align 8, !dbg !7171
  %mul = mul nsw i64 2, %2, !dbg !7172
  %3 = load i8*, i8** %src.addr, align 8, !dbg !7173
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 %mul, !dbg !7173
  store i8* %add.ptr1, i8** %src.addr, align 8, !dbg !7173
  %4 = load i64, i64* %count.addr, align 8, !dbg !7174
  %sub = sub nsw i64 0, %4, !dbg !7175
  store i64 %sub, i64* %count.addr, align 8, !dbg !7176
  %5 = load i64, i64* %count.addr, align 8, !dbg !7177
  %cmp = icmp sle i64 %5, -16, !dbg !7179
  br i1 %cmp, label %if.then, label %if.end, !dbg !7180

if.then:                                          ; preds = %entry
  %6 = load i64, i64* %count.addr, align 8, !dbg !7181
  %add = add nsw i64 %6, 15, !dbg !7181
  store i64 %add, i64* %count.addr, align 8, !dbg !7181
  %7 = load i64, i64* %count.addr, align 8, !dbg !7183
  %8 = load i8*, i8** %src.addr, align 8, !dbg !7184
  %9 = load i8*, i8** %dst.addr, align 8, !dbg !7185
  %10 = call i64 asm sideeffect "pcmpeqw       %mm7, %mm7        \0A\09psrlw            $$8, %mm7        \0A\091:                                \0A\09movq -30($1, $0, 2), %mm0        \0A\09movq -22($1, $0, 2), %mm1        \0A\09movq -14($1, $0, 2), %mm2        \0A\09movq  -6($1, $0, 2), %mm3        \0A\09pand          %mm7, %mm0        \0A\09pand          %mm7, %mm1        \0A\09pand          %mm7, %mm2        \0A\09pand          %mm7, %mm3        \0A\09packuswb      %mm1, %mm0        \0A\09packuswb      %mm3, %mm2        \0A\09movntq        %mm0,-15($2, $0)   \0A\09movntq        %mm2,- 7($2, $0)   \0A\09add             $$16, $0           \0A\09 js 1b                            \0A\09", "=r,r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %8, i8* %9, i64 %7) #5, !dbg !7183, !srcloc !7186
  store i64 %10, i64* %count.addr, align 8, !dbg !7183
  %11 = load i64, i64* %count.addr, align 8, !dbg !7187
  %sub2 = sub nsw i64 %11, 15, !dbg !7187
  store i64 %sub2, i64* %count.addr, align 8, !dbg !7187
  br label %if.end, !dbg !7188

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !7189

while.cond:                                       ; preds = %while.body, %if.end
  %12 = load i64, i64* %count.addr, align 8, !dbg !7190
  %cmp3 = icmp slt i64 %12, 0, !dbg !7192
  br i1 %cmp3, label %while.body, label %while.end, !dbg !7193

while.body:                                       ; preds = %while.cond
  %13 = load i64, i64* %count.addr, align 8, !dbg !7194
  %mul4 = mul nsw i64 2, %13, !dbg !7196
  %14 = load i8*, i8** %src.addr, align 8, !dbg !7197
  %arrayidx = getelementptr inbounds i8, i8* %14, i64 %mul4, !dbg !7197
  %15 = load i8, i8* %arrayidx, align 1, !dbg !7197
  %16 = load i64, i64* %count.addr, align 8, !dbg !7198
  %17 = load i8*, i8** %dst.addr, align 8, !dbg !7199
  %arrayidx5 = getelementptr inbounds i8, i8* %17, i64 %16, !dbg !7199
  store i8 %15, i8* %arrayidx5, align 1, !dbg !7200
  %18 = load i64, i64* %count.addr, align 8, !dbg !7201
  %inc = add nsw i64 %18, 1, !dbg !7201
  store i64 %inc, i64* %count.addr, align 8, !dbg !7201
  br label %while.cond, !dbg !7202, !llvm.loop !7204

while.end:                                        ; preds = %while.cond
  ret void, !dbg !7205
}

; Function Attrs: nounwind uwtable
define internal void @extract_odd2_mmxext(i8* %src, i8* %dst0, i8* %dst1, i64 %count) #4 !dbg !7206 {
entry:
  %src.addr = alloca i8*, align 8
  %dst0.addr = alloca i8*, align 8
  %dst1.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !7207, metadata !73), !dbg !7208
  store i8* %dst0, i8** %dst0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst0.addr, metadata !7209, metadata !73), !dbg !7210
  store i8* %dst1, i8** %dst1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst1.addr, metadata !7211, metadata !73), !dbg !7212
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !7213, metadata !73), !dbg !7214
  %0 = load i64, i64* %count.addr, align 8, !dbg !7215
  %1 = load i8*, i8** %dst0.addr, align 8, !dbg !7216
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !7216
  store i8* %add.ptr, i8** %dst0.addr, align 8, !dbg !7216
  %2 = load i64, i64* %count.addr, align 8, !dbg !7217
  %3 = load i8*, i8** %dst1.addr, align 8, !dbg !7218
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 %2, !dbg !7218
  store i8* %add.ptr1, i8** %dst1.addr, align 8, !dbg !7218
  %4 = load i64, i64* %count.addr, align 8, !dbg !7219
  %mul = mul nsw i64 4, %4, !dbg !7220
  %5 = load i8*, i8** %src.addr, align 8, !dbg !7221
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %mul, !dbg !7221
  store i8* %add.ptr2, i8** %src.addr, align 8, !dbg !7221
  %6 = load i64, i64* %count.addr, align 8, !dbg !7222
  %sub = sub nsw i64 0, %6, !dbg !7223
  store i64 %sub, i64* %count.addr, align 8, !dbg !7224
  %7 = load i64, i64* %count.addr, align 8, !dbg !7225
  %cmp = icmp sle i64 %7, -8, !dbg !7227
  br i1 %cmp, label %if.then, label %if.end, !dbg !7228

if.then:                                          ; preds = %entry
  %8 = load i64, i64* %count.addr, align 8, !dbg !7229
  %add = add nsw i64 %8, 7, !dbg !7229
  store i64 %add, i64* %count.addr, align 8, !dbg !7229
  %9 = load i64, i64* %count.addr, align 8, !dbg !7231
  %10 = load i8*, i8** %src.addr, align 8, !dbg !7232
  %11 = load i8*, i8** %dst0.addr, align 8, !dbg !7233
  %12 = load i8*, i8** %dst1.addr, align 8, !dbg !7234
  %13 = call i64 asm sideeffect "pcmpeqw       %mm7, %mm7        \0A\09psrlw            $$8, %mm7        \0A\091:                                \0A\09movq -28($1, $0, 4), %mm0        \0A\09movq -20($1, $0, 4), %mm1        \0A\09movq -12($1, $0, 4), %mm2        \0A\09movq  -4($1, $0, 4), %mm3        \0A\09psrlw            $$8, %mm0        \0A\09psrlw            $$8, %mm1        \0A\09psrlw            $$8, %mm2        \0A\09psrlw            $$8, %mm3        \0A\09packuswb      %mm1, %mm0        \0A\09packuswb      %mm3, %mm2        \0A\09movq          %mm0, %mm1        \0A\09movq          %mm2, %mm3        \0A\09psrlw            $$8, %mm0        \0A\09psrlw            $$8, %mm2        \0A\09pand          %mm7, %mm1        \0A\09pand          %mm7, %mm3        \0A\09packuswb      %mm2, %mm0        \0A\09packuswb      %mm3, %mm1        \0A\09movntq        %mm0,- 7($3, $0)   \0A\09movntq        %mm1,- 7($2, $0)   \0A\09add              $$8, $0           \0A\09 js 1b                            \0A\09", "=r,r,r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %10, i8* %11, i8* %12, i64 %9) #5, !dbg !7231, !srcloc !7235
  store i64 %13, i64* %count.addr, align 8, !dbg !7231
  %14 = load i64, i64* %count.addr, align 8, !dbg !7236
  %sub3 = sub nsw i64 %14, 7, !dbg !7236
  store i64 %sub3, i64* %count.addr, align 8, !dbg !7236
  br label %if.end, !dbg !7237

if.end:                                           ; preds = %if.then, %entry
  %15 = load i8*, i8** %src.addr, align 8, !dbg !7238
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1, !dbg !7238
  store i8* %incdec.ptr, i8** %src.addr, align 8, !dbg !7238
  br label %while.cond, !dbg !7239

while.cond:                                       ; preds = %while.body, %if.end
  %16 = load i64, i64* %count.addr, align 8, !dbg !7240
  %cmp4 = icmp slt i64 %16, 0, !dbg !7242
  br i1 %cmp4, label %while.body, label %while.end, !dbg !7243

while.body:                                       ; preds = %while.cond
  %17 = load i64, i64* %count.addr, align 8, !dbg !7244
  %mul5 = mul nsw i64 4, %17, !dbg !7246
  %add6 = add nsw i64 %mul5, 0, !dbg !7247
  %18 = load i8*, i8** %src.addr, align 8, !dbg !7248
  %arrayidx = getelementptr inbounds i8, i8* %18, i64 %add6, !dbg !7248
  %19 = load i8, i8* %arrayidx, align 1, !dbg !7248
  %20 = load i64, i64* %count.addr, align 8, !dbg !7249
  %21 = load i8*, i8** %dst0.addr, align 8, !dbg !7250
  %arrayidx7 = getelementptr inbounds i8, i8* %21, i64 %20, !dbg !7250
  store i8 %19, i8* %arrayidx7, align 1, !dbg !7251
  %22 = load i64, i64* %count.addr, align 8, !dbg !7252
  %mul8 = mul nsw i64 4, %22, !dbg !7253
  %add9 = add nsw i64 %mul8, 2, !dbg !7254
  %23 = load i8*, i8** %src.addr, align 8, !dbg !7255
  %arrayidx10 = getelementptr inbounds i8, i8* %23, i64 %add9, !dbg !7255
  %24 = load i8, i8* %arrayidx10, align 1, !dbg !7255
  %25 = load i64, i64* %count.addr, align 8, !dbg !7256
  %26 = load i8*, i8** %dst1.addr, align 8, !dbg !7257
  %arrayidx11 = getelementptr inbounds i8, i8* %26, i64 %25, !dbg !7257
  store i8 %24, i8* %arrayidx11, align 1, !dbg !7258
  %27 = load i64, i64* %count.addr, align 8, !dbg !7259
  %inc = add nsw i64 %27, 1, !dbg !7259
  store i64 %inc, i64* %count.addr, align 8, !dbg !7259
  br label %while.cond, !dbg !7260, !llvm.loop !7262

while.end:                                        ; preds = %while.cond
  ret void, !dbg !7263
}

; Function Attrs: nounwind uwtable
define internal void @extract_odd2avg_mmxext(i8* %src0, i8* %src1, i8* %dst0, i8* %dst1, i64 %count) #4 !dbg !7264 {
entry:
  %src0.addr = alloca i8*, align 8
  %src1.addr = alloca i8*, align 8
  %dst0.addr = alloca i8*, align 8
  %dst1.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src0, i8** %src0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src0.addr, metadata !7265, metadata !73), !dbg !7266
  store i8* %src1, i8** %src1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src1.addr, metadata !7267, metadata !73), !dbg !7268
  store i8* %dst0, i8** %dst0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst0.addr, metadata !7269, metadata !73), !dbg !7270
  store i8* %dst1, i8** %dst1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst1.addr, metadata !7271, metadata !73), !dbg !7272
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !7273, metadata !73), !dbg !7274
  %0 = load i64, i64* %count.addr, align 8, !dbg !7275
  %1 = load i8*, i8** %dst0.addr, align 8, !dbg !7276
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !7276
  store i8* %add.ptr, i8** %dst0.addr, align 8, !dbg !7276
  %2 = load i64, i64* %count.addr, align 8, !dbg !7277
  %3 = load i8*, i8** %dst1.addr, align 8, !dbg !7278
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 %2, !dbg !7278
  store i8* %add.ptr1, i8** %dst1.addr, align 8, !dbg !7278
  %4 = load i64, i64* %count.addr, align 8, !dbg !7279
  %mul = mul nsw i64 4, %4, !dbg !7280
  %5 = load i8*, i8** %src0.addr, align 8, !dbg !7281
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %mul, !dbg !7281
  store i8* %add.ptr2, i8** %src0.addr, align 8, !dbg !7281
  %6 = load i64, i64* %count.addr, align 8, !dbg !7282
  %mul3 = mul nsw i64 4, %6, !dbg !7283
  %7 = load i8*, i8** %src1.addr, align 8, !dbg !7284
  %add.ptr4 = getelementptr inbounds i8, i8* %7, i64 %mul3, !dbg !7284
  store i8* %add.ptr4, i8** %src1.addr, align 8, !dbg !7284
  %8 = load i64, i64* %count.addr, align 8, !dbg !7285
  %sub = sub nsw i64 0, %8, !dbg !7286
  store i64 %sub, i64* %count.addr, align 8, !dbg !7287
  %9 = load i64, i64* %count.addr, align 8, !dbg !7288
  %cmp = icmp sle i64 %9, -8, !dbg !7290
  br i1 %cmp, label %if.then, label %if.end, !dbg !7291

if.then:                                          ; preds = %entry
  %10 = load i64, i64* %count.addr, align 8, !dbg !7292
  %add = add nsw i64 %10, 7, !dbg !7292
  store i64 %add, i64* %count.addr, align 8, !dbg !7292
  %11 = load i64, i64* %count.addr, align 8, !dbg !7294
  %12 = load i8*, i8** %src0.addr, align 8, !dbg !7295
  %13 = load i8*, i8** %src1.addr, align 8, !dbg !7296
  %14 = load i8*, i8** %dst0.addr, align 8, !dbg !7297
  %15 = load i8*, i8** %dst1.addr, align 8, !dbg !7298
  %16 = call i64 asm sideeffect "pcmpeqw        %mm7, %mm7        \0A\09psrlw             $$8, %mm7        \0A\091:                                \0A\09movq  -28($1, $0, 4), %mm0        \0A\09movq  -20($1, $0, 4), %mm1        \0A\09movq  -12($1, $0, 4), %mm2        \0A\09movq   -4($1, $0, 4), %mm3        \0A\09pavgb -28($2, $0, 4), %mm0        \0A\09pavgb -20($2, $0, 4), %mm1        \0A\09pavgb -12($2, $0, 4), %mm2        \0A\09pavgb - 4($2, $0, 4), %mm3        \0A\09psrlw             $$8, %mm0        \0A\09psrlw             $$8, %mm1        \0A\09psrlw             $$8, %mm2        \0A\09psrlw             $$8, %mm3        \0A\09packuswb       %mm1, %mm0        \0A\09packuswb       %mm3, %mm2        \0A\09movq           %mm0, %mm1        \0A\09movq           %mm2, %mm3        \0A\09psrlw             $$8, %mm0        \0A\09psrlw             $$8, %mm2        \0A\09pand           %mm7, %mm1        \0A\09pand           %mm7, %mm3        \0A\09packuswb       %mm2, %mm0        \0A\09packuswb       %mm3, %mm1        \0A\09movntq         %mm0,- 7($4, $0)   \0A\09movntq         %mm1,- 7($3, $0)   \0A\09add               $$8, $0           \0A\09 js 1b                            \0A\09", "=r,r,r,r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %12, i8* %13, i8* %14, i8* %15, i64 %11) #5, !dbg !7294, !srcloc !7299
  store i64 %16, i64* %count.addr, align 8, !dbg !7294
  %17 = load i64, i64* %count.addr, align 8, !dbg !7300
  %sub5 = sub nsw i64 %17, 7, !dbg !7300
  store i64 %sub5, i64* %count.addr, align 8, !dbg !7300
  br label %if.end, !dbg !7301

if.end:                                           ; preds = %if.then, %entry
  %18 = load i8*, i8** %src0.addr, align 8, !dbg !7302
  %incdec.ptr = getelementptr inbounds i8, i8* %18, i32 1, !dbg !7302
  store i8* %incdec.ptr, i8** %src0.addr, align 8, !dbg !7302
  %19 = load i8*, i8** %src1.addr, align 8, !dbg !7303
  %incdec.ptr6 = getelementptr inbounds i8, i8* %19, i32 1, !dbg !7303
  store i8* %incdec.ptr6, i8** %src1.addr, align 8, !dbg !7303
  br label %while.cond, !dbg !7304

while.cond:                                       ; preds = %while.body, %if.end
  %20 = load i64, i64* %count.addr, align 8, !dbg !7305
  %cmp7 = icmp slt i64 %20, 0, !dbg !7307
  br i1 %cmp7, label %while.body, label %while.end, !dbg !7308

while.body:                                       ; preds = %while.cond
  %21 = load i64, i64* %count.addr, align 8, !dbg !7309
  %mul8 = mul nsw i64 4, %21, !dbg !7311
  %add9 = add nsw i64 %mul8, 0, !dbg !7312
  %22 = load i8*, i8** %src0.addr, align 8, !dbg !7313
  %arrayidx = getelementptr inbounds i8, i8* %22, i64 %add9, !dbg !7313
  %23 = load i8, i8* %arrayidx, align 1, !dbg !7313
  %conv = zext i8 %23 to i32, !dbg !7313
  %24 = load i64, i64* %count.addr, align 8, !dbg !7314
  %mul10 = mul nsw i64 4, %24, !dbg !7315
  %add11 = add nsw i64 %mul10, 0, !dbg !7316
  %25 = load i8*, i8** %src1.addr, align 8, !dbg !7317
  %arrayidx12 = getelementptr inbounds i8, i8* %25, i64 %add11, !dbg !7317
  %26 = load i8, i8* %arrayidx12, align 1, !dbg !7317
  %conv13 = zext i8 %26 to i32, !dbg !7317
  %add14 = add nsw i32 %conv, %conv13, !dbg !7318
  %shr = ashr i32 %add14, 1, !dbg !7319
  %conv15 = trunc i32 %shr to i8, !dbg !7320
  %27 = load i64, i64* %count.addr, align 8, !dbg !7321
  %28 = load i8*, i8** %dst0.addr, align 8, !dbg !7322
  %arrayidx16 = getelementptr inbounds i8, i8* %28, i64 %27, !dbg !7322
  store i8 %conv15, i8* %arrayidx16, align 1, !dbg !7323
  %29 = load i64, i64* %count.addr, align 8, !dbg !7324
  %mul17 = mul nsw i64 4, %29, !dbg !7325
  %add18 = add nsw i64 %mul17, 2, !dbg !7326
  %30 = load i8*, i8** %src0.addr, align 8, !dbg !7327
  %arrayidx19 = getelementptr inbounds i8, i8* %30, i64 %add18, !dbg !7327
  %31 = load i8, i8* %arrayidx19, align 1, !dbg !7327
  %conv20 = zext i8 %31 to i32, !dbg !7327
  %32 = load i64, i64* %count.addr, align 8, !dbg !7328
  %mul21 = mul nsw i64 4, %32, !dbg !7329
  %add22 = add nsw i64 %mul21, 2, !dbg !7330
  %33 = load i8*, i8** %src1.addr, align 8, !dbg !7331
  %arrayidx23 = getelementptr inbounds i8, i8* %33, i64 %add22, !dbg !7331
  %34 = load i8, i8* %arrayidx23, align 1, !dbg !7331
  %conv24 = zext i8 %34 to i32, !dbg !7331
  %add25 = add nsw i32 %conv20, %conv24, !dbg !7332
  %shr26 = ashr i32 %add25, 1, !dbg !7333
  %conv27 = trunc i32 %shr26 to i8, !dbg !7334
  %35 = load i64, i64* %count.addr, align 8, !dbg !7335
  %36 = load i8*, i8** %dst1.addr, align 8, !dbg !7336
  %arrayidx28 = getelementptr inbounds i8, i8* %36, i64 %35, !dbg !7336
  store i8 %conv27, i8* %arrayidx28, align 1, !dbg !7337
  %37 = load i64, i64* %count.addr, align 8, !dbg !7338
  %inc = add nsw i64 %37, 1, !dbg !7338
  store i64 %inc, i64* %count.addr, align 8, !dbg !7338
  br label %while.cond, !dbg !7339, !llvm.loop !7341

while.end:                                        ; preds = %while.cond
  ret void, !dbg !7342
}

; Function Attrs: nounwind uwtable
define internal void @extract_even2avg_mmxext(i8* %src0, i8* %src1, i8* %dst0, i8* %dst1, i64 %count) #4 !dbg !7343 {
entry:
  %src0.addr = alloca i8*, align 8
  %src1.addr = alloca i8*, align 8
  %dst0.addr = alloca i8*, align 8
  %dst1.addr = alloca i8*, align 8
  %count.addr = alloca i64, align 8
  store i8* %src0, i8** %src0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src0.addr, metadata !7344, metadata !73), !dbg !7345
  store i8* %src1, i8** %src1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src1.addr, metadata !7346, metadata !73), !dbg !7347
  store i8* %dst0, i8** %dst0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst0.addr, metadata !7348, metadata !73), !dbg !7349
  store i8* %dst1, i8** %dst1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst1.addr, metadata !7350, metadata !73), !dbg !7351
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !7352, metadata !73), !dbg !7353
  %0 = load i64, i64* %count.addr, align 8, !dbg !7354
  %1 = load i8*, i8** %dst0.addr, align 8, !dbg !7355
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !7355
  store i8* %add.ptr, i8** %dst0.addr, align 8, !dbg !7355
  %2 = load i64, i64* %count.addr, align 8, !dbg !7356
  %3 = load i8*, i8** %dst1.addr, align 8, !dbg !7357
  %add.ptr1 = getelementptr inbounds i8, i8* %3, i64 %2, !dbg !7357
  store i8* %add.ptr1, i8** %dst1.addr, align 8, !dbg !7357
  %4 = load i64, i64* %count.addr, align 8, !dbg !7358
  %mul = mul nsw i64 4, %4, !dbg !7359
  %5 = load i8*, i8** %src0.addr, align 8, !dbg !7360
  %add.ptr2 = getelementptr inbounds i8, i8* %5, i64 %mul, !dbg !7360
  store i8* %add.ptr2, i8** %src0.addr, align 8, !dbg !7360
  %6 = load i64, i64* %count.addr, align 8, !dbg !7361
  %mul3 = mul nsw i64 4, %6, !dbg !7362
  %7 = load i8*, i8** %src1.addr, align 8, !dbg !7363
  %add.ptr4 = getelementptr inbounds i8, i8* %7, i64 %mul3, !dbg !7363
  store i8* %add.ptr4, i8** %src1.addr, align 8, !dbg !7363
  %8 = load i64, i64* %count.addr, align 8, !dbg !7364
  %sub = sub nsw i64 0, %8, !dbg !7365
  store i64 %sub, i64* %count.addr, align 8, !dbg !7366
  %9 = load i64, i64* %count.addr, align 8, !dbg !7367
  %cmp = icmp sle i64 %9, -8, !dbg !7369
  br i1 %cmp, label %if.then, label %if.end, !dbg !7370

if.then:                                          ; preds = %entry
  %10 = load i64, i64* %count.addr, align 8, !dbg !7371
  %add = add nsw i64 %10, 7, !dbg !7371
  store i64 %add, i64* %count.addr, align 8, !dbg !7371
  %11 = load i64, i64* %count.addr, align 8, !dbg !7373
  %12 = load i8*, i8** %src0.addr, align 8, !dbg !7374
  %13 = load i8*, i8** %src1.addr, align 8, !dbg !7375
  %14 = load i8*, i8** %dst0.addr, align 8, !dbg !7376
  %15 = load i8*, i8** %dst1.addr, align 8, !dbg !7377
  %16 = call i64 asm sideeffect "pcmpeqw        %mm7, %mm7        \0A\09psrlw             $$8, %mm7        \0A\091:                                \0A\09movq  -28($1, $0, 4), %mm0        \0A\09movq  -20($1, $0, 4), %mm1        \0A\09movq  -12($1, $0, 4), %mm2        \0A\09movq   -4($1, $0, 4), %mm3        \0A\09pavgb -28($2, $0, 4), %mm0        \0A\09pavgb -20($2, $0, 4), %mm1        \0A\09pavgb -12($2, $0, 4), %mm2        \0A\09pavgb - 4($2, $0, 4), %mm3        \0A\09pand           %mm7, %mm0        \0A\09pand           %mm7, %mm1        \0A\09pand           %mm7, %mm2        \0A\09pand           %mm7, %mm3        \0A\09packuswb       %mm1, %mm0        \0A\09packuswb       %mm3, %mm2        \0A\09movq           %mm0, %mm1        \0A\09movq           %mm2, %mm3        \0A\09psrlw             $$8, %mm0        \0A\09psrlw             $$8, %mm2        \0A\09pand           %mm7, %mm1        \0A\09pand           %mm7, %mm3        \0A\09packuswb       %mm2, %mm0        \0A\09packuswb       %mm3, %mm1        \0A\09movntq         %mm0,- 7($4, $0)   \0A\09movntq         %mm1,- 7($3, $0)   \0A\09add               $$8, $0           \0A\09 js 1b                            \0A\09", "=r,r,r,r,r,0,~{dirflag},~{fpsr},~{flags}"(i8* %12, i8* %13, i8* %14, i8* %15, i64 %11) #5, !dbg !7373, !srcloc !7378
  store i64 %16, i64* %count.addr, align 8, !dbg !7373
  %17 = load i64, i64* %count.addr, align 8, !dbg !7379
  %sub5 = sub nsw i64 %17, 7, !dbg !7379
  store i64 %sub5, i64* %count.addr, align 8, !dbg !7379
  br label %if.end, !dbg !7380

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !7381

while.cond:                                       ; preds = %while.body, %if.end
  %18 = load i64, i64* %count.addr, align 8, !dbg !7382
  %cmp6 = icmp slt i64 %18, 0, !dbg !7384
  br i1 %cmp6, label %while.body, label %while.end, !dbg !7385

while.body:                                       ; preds = %while.cond
  %19 = load i64, i64* %count.addr, align 8, !dbg !7386
  %mul7 = mul nsw i64 4, %19, !dbg !7388
  %add8 = add nsw i64 %mul7, 0, !dbg !7389
  %20 = load i8*, i8** %src0.addr, align 8, !dbg !7390
  %arrayidx = getelementptr inbounds i8, i8* %20, i64 %add8, !dbg !7390
  %21 = load i8, i8* %arrayidx, align 1, !dbg !7390
  %conv = zext i8 %21 to i32, !dbg !7390
  %22 = load i64, i64* %count.addr, align 8, !dbg !7391
  %mul9 = mul nsw i64 4, %22, !dbg !7392
  %add10 = add nsw i64 %mul9, 0, !dbg !7393
  %23 = load i8*, i8** %src1.addr, align 8, !dbg !7394
  %arrayidx11 = getelementptr inbounds i8, i8* %23, i64 %add10, !dbg !7394
  %24 = load i8, i8* %arrayidx11, align 1, !dbg !7394
  %conv12 = zext i8 %24 to i32, !dbg !7394
  %add13 = add nsw i32 %conv, %conv12, !dbg !7395
  %shr = ashr i32 %add13, 1, !dbg !7396
  %conv14 = trunc i32 %shr to i8, !dbg !7397
  %25 = load i64, i64* %count.addr, align 8, !dbg !7398
  %26 = load i8*, i8** %dst0.addr, align 8, !dbg !7399
  %arrayidx15 = getelementptr inbounds i8, i8* %26, i64 %25, !dbg !7399
  store i8 %conv14, i8* %arrayidx15, align 1, !dbg !7400
  %27 = load i64, i64* %count.addr, align 8, !dbg !7401
  %mul16 = mul nsw i64 4, %27, !dbg !7402
  %add17 = add nsw i64 %mul16, 2, !dbg !7403
  %28 = load i8*, i8** %src0.addr, align 8, !dbg !7404
  %arrayidx18 = getelementptr inbounds i8, i8* %28, i64 %add17, !dbg !7404
  %29 = load i8, i8* %arrayidx18, align 1, !dbg !7404
  %conv19 = zext i8 %29 to i32, !dbg !7404
  %30 = load i64, i64* %count.addr, align 8, !dbg !7405
  %mul20 = mul nsw i64 4, %30, !dbg !7406
  %add21 = add nsw i64 %mul20, 2, !dbg !7407
  %31 = load i8*, i8** %src1.addr, align 8, !dbg !7408
  %arrayidx22 = getelementptr inbounds i8, i8* %31, i64 %add21, !dbg !7408
  %32 = load i8, i8* %arrayidx22, align 1, !dbg !7408
  %conv23 = zext i8 %32 to i32, !dbg !7408
  %add24 = add nsw i32 %conv19, %conv23, !dbg !7409
  %shr25 = ashr i32 %add24, 1, !dbg !7410
  %conv26 = trunc i32 %shr25 to i8, !dbg !7411
  %33 = load i64, i64* %count.addr, align 8, !dbg !7412
  %34 = load i8*, i8** %dst1.addr, align 8, !dbg !7413
  %arrayidx27 = getelementptr inbounds i8, i8* %34, i64 %33, !dbg !7413
  store i8 %conv26, i8* %arrayidx27, align 1, !dbg !7414
  %35 = load i64, i64* %count.addr, align 8, !dbg !7415
  %inc = add nsw i64 %35, 1, !dbg !7415
  store i64 %inc, i64* %count.addr, align 8, !dbg !7415
  br label %while.cond, !dbg !7416, !llvm.loop !7418

while.end:                                        ; preds = %while.cond
  ret void, !dbg !7419
}

; Function Attrs: nounwind uwtable
define internal void @interleaveBytes_sse2(i8* %src1, i8* %src2, i8* %dest, i32 %width, i32 %height, i32 %src1Stride, i32 %src2Stride, i32 %dstStride) #4 !dbg !7420 {
entry:
  %src1.addr = alloca i8*, align 8
  %src2.addr = alloca i8*, align 8
  %dest.addr = alloca i8*, align 8
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %src1Stride.addr = alloca i32, align 4
  %src2Stride.addr = alloca i32, align 4
  %dstStride.addr = alloca i32, align 4
  %h = alloca i32, align 4
  %w = alloca i32, align 4
  store i8* %src1, i8** %src1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src1.addr, metadata !7421, metadata !73), !dbg !7422
  store i8* %src2, i8** %src2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src2.addr, metadata !7423, metadata !73), !dbg !7424
  store i8* %dest, i8** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dest.addr, metadata !7425, metadata !73), !dbg !7426
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !7427, metadata !73), !dbg !7428
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !7429, metadata !73), !dbg !7430
  store i32 %src1Stride, i32* %src1Stride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src1Stride.addr, metadata !7431, metadata !73), !dbg !7432
  store i32 %src2Stride, i32* %src2Stride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src2Stride.addr, metadata !7433, metadata !73), !dbg !7434
  store i32 %dstStride, i32* %dstStride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dstStride.addr, metadata !7435, metadata !73), !dbg !7436
  call void @llvm.dbg.declare(metadata i32* %h, metadata !7437, metadata !73), !dbg !7438
  store i32 0, i32* %h, align 4, !dbg !7439
  br label %for.cond, !dbg !7441

for.cond:                                         ; preds = %for.inc24, %entry
  %0 = load i32, i32* %h, align 4, !dbg !7442
  %1 = load i32, i32* %height.addr, align 4, !dbg !7445
  %cmp = icmp slt i32 %0, %1, !dbg !7446
  br i1 %cmp, label %for.body, label %for.end26, !dbg !7447

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %w, metadata !7448, metadata !73), !dbg !7450
  %2 = load i32, i32* %width.addr, align 4, !dbg !7451
  %cmp1 = icmp sge i32 %2, 16, !dbg !7453
  br i1 %cmp1, label %if.then, label %if.end6, !dbg !7454

if.then:                                          ; preds = %for.body
  %3 = load i8*, i8** %src1.addr, align 8, !dbg !7455
  %4 = ptrtoint i8* %3 to i64, !dbg !7458
  %5 = load i8*, i8** %src2.addr, align 8, !dbg !7459
  %6 = ptrtoint i8* %5 to i64, !dbg !7460
  %or = or i64 %4, %6, !dbg !7461
  %7 = load i8*, i8** %dest.addr, align 8, !dbg !7462
  %8 = ptrtoint i8* %7 to i64, !dbg !7463
  %or2 = or i64 %or, %8, !dbg !7464
  %and = and i64 %or2, 15, !dbg !7465
  %tobool = icmp ne i64 %and, 0, !dbg !7465
  br i1 %tobool, label %if.else, label %if.then3, !dbg !7466

if.then3:                                         ; preds = %if.then
  %9 = load i8*, i8** %dest.addr, align 8, !dbg !7467
  %10 = load i8*, i8** %src1.addr, align 8, !dbg !7469
  %11 = load i8*, i8** %src2.addr, align 8, !dbg !7470
  %12 = load i32, i32* %width.addr, align 4, !dbg !7471
  %conv = sext i32 %12 to i64, !dbg !7472
  %sub = sub nsw i64 %conv, 15, !dbg !7473
  call void asm sideeffect "xor              %rax, %rax  \0A\091:                                     \0A\09prefetchnta 64($1, %rax)          \0A\09prefetchnta 64($2, %rax)          \0A\09movdqa  ($1, %rax), %xmm0     \0A\09movdqa  ($1, %rax), %xmm1     \0A\09movdqa  ($2, %rax), %xmm2     \0A\09punpcklbw           %xmm2, %xmm0     \0A\09punpckhbw           %xmm2, %xmm1     \0A\09movntdq             %xmm0,   ($0, %rax, 2) \0A\09movntdq             %xmm1, 16($0, %rax, 2) \0A\09add                    $$16, %rax            \0A\09cmp                     $3, %rax            \0A\09 jb                     1b             \0A\09", "r,r,r,r,~{memory},~{xmm0},~{xmm1},~{xmm2},~{rax},~{dirflag},~{fpsr},~{flags}"(i8* %9, i8* %10, i8* %11, i64 %sub) #5, !dbg !7474, !srcloc !7475
  br label %if.end, !dbg !7476

if.else:                                          ; preds = %if.then
  %13 = load i8*, i8** %dest.addr, align 8, !dbg !7477
  %14 = load i8*, i8** %src1.addr, align 8, !dbg !7478
  %15 = load i8*, i8** %src2.addr, align 8, !dbg !7479
  %16 = load i32, i32* %width.addr, align 4, !dbg !7480
  %conv4 = sext i32 %16 to i64, !dbg !7481
  %sub5 = sub nsw i64 %conv4, 15, !dbg !7482
  call void asm sideeffect "xor %rax, %rax         \0A\091:                                     \0A\09prefetchnta 64($1, %rax)          \0A\09prefetchnta 64($2, %rax)          \0A\09movq    ($1, %rax), %mm0      \0A\09movq   8($1, %rax), %mm2      \0A\09movq                 %mm0, %mm1      \0A\09movq                 %mm2, %mm3      \0A\09movq    ($2, %rax), %mm4      \0A\09movq   8($2, %rax), %mm5      \0A\09punpcklbw            %mm4, %mm0      \0A\09punpckhbw            %mm4, %mm1      \0A\09punpcklbw            %mm5, %mm2      \0A\09punpckhbw            %mm5, %mm3      \0A\09movntq               %mm0,   ($0, %rax, 2) \0A\09movntq               %mm1,  8($0, %rax, 2) \0A\09movntq               %mm2, 16($0, %rax, 2) \0A\09movntq               %mm3, 24($0, %rax, 2) \0A\09add                    $$16, %rax            \0A\09cmp                     $3, %rax            \0A\09 jb                     1b                          \0A\09", "r,r,r,r,~{memory},~{rax},~{dirflag},~{fpsr},~{flags}"(i8* %13, i8* %14, i8* %15, i64 %sub5) #5, !dbg !7483, !srcloc !7484
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end6, !dbg !7485

if.end6:                                          ; preds = %if.end, %for.body
  %17 = load i32, i32* %width.addr, align 4, !dbg !7486
  %and7 = and i32 %17, -16, !dbg !7488
  store i32 %and7, i32* %w, align 4, !dbg !7489
  br label %for.cond8, !dbg !7490

for.cond8:                                        ; preds = %for.inc, %if.end6
  %18 = load i32, i32* %w, align 4, !dbg !7491
  %19 = load i32, i32* %width.addr, align 4, !dbg !7494
  %cmp9 = icmp slt i32 %18, %19, !dbg !7495
  br i1 %cmp9, label %for.body11, label %for.end, !dbg !7496

for.body11:                                       ; preds = %for.cond8
  %20 = load i32, i32* %w, align 4, !dbg !7497
  %idxprom = sext i32 %20 to i64, !dbg !7499
  %21 = load i8*, i8** %src1.addr, align 8, !dbg !7499
  %arrayidx = getelementptr inbounds i8, i8* %21, i64 %idxprom, !dbg !7499
  %22 = load i8, i8* %arrayidx, align 1, !dbg !7499
  %23 = load i32, i32* %w, align 4, !dbg !7500
  %mul = mul nsw i32 2, %23, !dbg !7501
  %add = add nsw i32 %mul, 0, !dbg !7502
  %idxprom12 = sext i32 %add to i64, !dbg !7503
  %24 = load i8*, i8** %dest.addr, align 8, !dbg !7503
  %arrayidx13 = getelementptr inbounds i8, i8* %24, i64 %idxprom12, !dbg !7503
  store i8 %22, i8* %arrayidx13, align 1, !dbg !7504
  %25 = load i32, i32* %w, align 4, !dbg !7505
  %idxprom14 = sext i32 %25 to i64, !dbg !7506
  %26 = load i8*, i8** %src2.addr, align 8, !dbg !7506
  %arrayidx15 = getelementptr inbounds i8, i8* %26, i64 %idxprom14, !dbg !7506
  %27 = load i8, i8* %arrayidx15, align 1, !dbg !7506
  %28 = load i32, i32* %w, align 4, !dbg !7507
  %mul16 = mul nsw i32 2, %28, !dbg !7508
  %add17 = add nsw i32 %mul16, 1, !dbg !7509
  %idxprom18 = sext i32 %add17 to i64, !dbg !7510
  %29 = load i8*, i8** %dest.addr, align 8, !dbg !7510
  %arrayidx19 = getelementptr inbounds i8, i8* %29, i64 %idxprom18, !dbg !7510
  store i8 %27, i8* %arrayidx19, align 1, !dbg !7511
  br label %for.inc, !dbg !7512

for.inc:                                          ; preds = %for.body11
  %30 = load i32, i32* %w, align 4, !dbg !7513
  %inc = add nsw i32 %30, 1, !dbg !7513
  store i32 %inc, i32* %w, align 4, !dbg !7513
  br label %for.cond8, !dbg !7515, !llvm.loop !7516

for.end:                                          ; preds = %for.cond8
  %31 = load i32, i32* %dstStride.addr, align 4, !dbg !7518
  %32 = load i8*, i8** %dest.addr, align 8, !dbg !7519
  %idx.ext = sext i32 %31 to i64, !dbg !7519
  %add.ptr = getelementptr inbounds i8, i8* %32, i64 %idx.ext, !dbg !7519
  store i8* %add.ptr, i8** %dest.addr, align 8, !dbg !7519
  %33 = load i32, i32* %src1Stride.addr, align 4, !dbg !7520
  %34 = load i8*, i8** %src1.addr, align 8, !dbg !7521
  %idx.ext20 = sext i32 %33 to i64, !dbg !7521
  %add.ptr21 = getelementptr inbounds i8, i8* %34, i64 %idx.ext20, !dbg !7521
  store i8* %add.ptr21, i8** %src1.addr, align 8, !dbg !7521
  %35 = load i32, i32* %src2Stride.addr, align 4, !dbg !7522
  %36 = load i8*, i8** %src2.addr, align 8, !dbg !7523
  %idx.ext22 = sext i32 %35 to i64, !dbg !7523
  %add.ptr23 = getelementptr inbounds i8, i8* %36, i64 %idx.ext22, !dbg !7523
  store i8* %add.ptr23, i8** %src2.addr, align 8, !dbg !7523
  br label %for.inc24, !dbg !7524

for.inc24:                                        ; preds = %for.end
  %37 = load i32, i32* %h, align 4, !dbg !7525
  %inc25 = add nsw i32 %37, 1, !dbg !7525
  store i32 %inc25, i32* %h, align 4, !dbg !7525
  br label %for.cond, !dbg !7527, !llvm.loop !7528

for.end26:                                        ; preds = %for.cond
  call void asm sideeffect "emms       \0A\09sfence     \0A\09", "~{memory},~{dirflag},~{fpsr},~{flags}"() #5, !dbg !7530, !srcloc !7531
  ret void, !dbg !7532
}

attributes #0 = { cold nounwind optsize uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!65, !66}
!llvm.ident = !{!67}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.9.0 (tags/RELEASE_390/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, globals: !23)
!1 = !DIFile(filename: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libswscale--libswscale.a/[inter]libswscale--x86--rgb2rgb.o.i", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libswscale--libswscale.a")
!2 = !{}
!3 = !{!4, !9, !10, !14, !15, !18, !22}
!4 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64, align: 64)
!5 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6)
!6 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !7, line: 51, baseType: !8)
!7 = !DIFile(filename: "/usr/include/stdint.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libswscale--libswscale.a")
!8 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64, align: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!11 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)
!12 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !7, line: 49, baseType: !13)
!13 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!14 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64, align: 64)
!15 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64, align: 64)
!16 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !7, line: 48, baseType: !17)
!17 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!18 = !DIDerivedType(tag: DW_TAG_typedef, name: "x86_reg", file: !19, line: 39, baseType: !20)
!19 = !DIFile(filename: "./libavutil/x86/asm.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libswscale--libswscale.a")
!20 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !7, line: 40, baseType: !21)
!21 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!22 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !7, line: 119, baseType: !21)
!23 = !{!24, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64}
!24 = distinct !DIGlobalVariable(name: "mmx_ff", scope: !0, file: !25, line: 39, type: !26, isLocal: true, isDefinition: true, variable: i64* @mmx_ff)
!25 = !DIFile(filename: "libswscale/x86/rgb2rgb.c", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libswscale--libswscale.a")
!26 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !27)
!27 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !7, line: 55, baseType: !28)
!28 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!29 = distinct !DIGlobalVariable(name: "mmx_null", scope: !0, file: !25, line: 40, type: !26, isLocal: true, isDefinition: true, variable: i64* @mmx_null)
!30 = distinct !DIGlobalVariable(name: "mmx_one", scope: !0, file: !25, line: 41, type: !26, isLocal: true, isDefinition: true, variable: i64* @mmx_one)
!31 = distinct !DIGlobalVariable(name: "mask32b", scope: !0, file: !25, line: 42, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask32b)
!32 = distinct !DIGlobalVariable(name: "mask32g", scope: !0, file: !25, line: 43, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask32g)
!33 = distinct !DIGlobalVariable(name: "mask32r", scope: !0, file: !25, line: 44, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask32r)
!34 = distinct !DIGlobalVariable(name: "mask32a", scope: !0, file: !25, line: 45, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask32a)
!35 = distinct !DIGlobalVariable(name: "mask32", scope: !0, file: !25, line: 46, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask32)
!36 = distinct !DIGlobalVariable(name: "mask3216br", scope: !0, file: !25, line: 47, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask3216br)
!37 = distinct !DIGlobalVariable(name: "mask3216g", scope: !0, file: !25, line: 48, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask3216g)
!38 = distinct !DIGlobalVariable(name: "mask3215g", scope: !0, file: !25, line: 49, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask3215g)
!39 = distinct !DIGlobalVariable(name: "mul3216", scope: !0, file: !25, line: 50, type: !26, isLocal: true, isDefinition: true, variable: i64* @mul3216)
!40 = distinct !DIGlobalVariable(name: "mul3215", scope: !0, file: !25, line: 51, type: !26, isLocal: true, isDefinition: true, variable: i64* @mul3215)
!41 = distinct !DIGlobalVariable(name: "mask24b", scope: !0, file: !25, line: 52, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask24b)
!42 = distinct !DIGlobalVariable(name: "mask24g", scope: !0, file: !25, line: 53, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask24g)
!43 = distinct !DIGlobalVariable(name: "mask24r", scope: !0, file: !25, line: 54, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask24r)
!44 = distinct !DIGlobalVariable(name: "mask24l", scope: !0, file: !25, line: 55, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask24l)
!45 = distinct !DIGlobalVariable(name: "mask24h", scope: !0, file: !25, line: 56, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask24h)
!46 = distinct !DIGlobalVariable(name: "mask24hh", scope: !0, file: !25, line: 57, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask24hh)
!47 = distinct !DIGlobalVariable(name: "mask24hhh", scope: !0, file: !25, line: 58, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask24hhh)
!48 = distinct !DIGlobalVariable(name: "mask24hhhh", scope: !0, file: !25, line: 59, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask24hhhh)
!49 = distinct !DIGlobalVariable(name: "mask15b", scope: !0, file: !25, line: 60, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask15b)
!50 = distinct !DIGlobalVariable(name: "mask15rg", scope: !0, file: !25, line: 61, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask15rg)
!51 = distinct !DIGlobalVariable(name: "mask15s", scope: !0, file: !25, line: 62, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask15s)
!52 = distinct !DIGlobalVariable(name: "mask15g", scope: !0, file: !25, line: 63, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask15g)
!53 = distinct !DIGlobalVariable(name: "mask15r", scope: !0, file: !25, line: 64, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask15r)
!54 = distinct !DIGlobalVariable(name: "mask16g", scope: !0, file: !25, line: 66, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask16g)
!55 = distinct !DIGlobalVariable(name: "mask16r", scope: !0, file: !25, line: 67, type: !26, isLocal: true, isDefinition: true, variable: i64* @mask16r)
!56 = distinct !DIGlobalVariable(name: "red_16mask", scope: !0, file: !25, line: 68, type: !26, isLocal: true, isDefinition: true, variable: i64* @red_16mask)
!57 = distinct !DIGlobalVariable(name: "green_16mask", scope: !0, file: !25, line: 69, type: !26, isLocal: true, isDefinition: true, variable: i64* @green_16mask)
!58 = distinct !DIGlobalVariable(name: "blue_16mask", scope: !0, file: !25, line: 70, type: !26, isLocal: true, isDefinition: true, variable: i64* @blue_16mask)
!59 = distinct !DIGlobalVariable(name: "red_15mask", scope: !0, file: !25, line: 71, type: !26, isLocal: true, isDefinition: true, variable: i64* @red_15mask)
!60 = distinct !DIGlobalVariable(name: "green_15mask", scope: !0, file: !25, line: 72, type: !26, isLocal: true, isDefinition: true, variable: i64* @green_15mask)
!61 = distinct !DIGlobalVariable(name: "blue_15mask", scope: !0, file: !25, line: 73, type: !26, isLocal: true, isDefinition: true, variable: i64* @blue_15mask)
!62 = distinct !DIGlobalVariable(name: "mul15_mid", scope: !0, file: !25, line: 74, type: !26, isLocal: true, isDefinition: true, variable: i64* @mul15_mid)
!63 = distinct !DIGlobalVariable(name: "mul15_hi", scope: !0, file: !25, line: 75, type: !26, isLocal: true, isDefinition: true, variable: i64* @mul15_hi)
!64 = distinct !DIGlobalVariable(name: "mul16_mid", scope: !0, file: !25, line: 76, type: !26, isLocal: true, isDefinition: true, variable: i64* @mul16_mid)
!65 = !{i32 2, !"Dwarf Version", i32 4}
!66 = !{i32 2, !"Debug Info Version", i32 3}
!67 = !{!"clang version 3.9.0 (tags/RELEASE_390/final)"}
!68 = distinct !DISubprogram(name: "rgb2rgb_init_x86", scope: !25, file: !25, line: 163, type: !69, isLocal: false, isDefinition: true, scopeLine: 164, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!69 = !DISubroutineType(types: !70)
!70 = !{null}
!71 = !DILocalVariable(name: "cpu_flags", scope: !68, file: !25, line: 165, type: !72)
!72 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!73 = !DIExpression()
!74 = !DILocation(line: 165, column: 9, scope: !68)
!75 = !DILocation(line: 165, column: 21, scope: !68)
!76 = !DILocation(line: 168, column: 17, scope: !77)
!77 = distinct !DILexicalBlock(scope: !68, file: !25, line: 168, column: 9)
!78 = !DILocation(line: 168, column: 28, scope: !77)
!79 = !DILocation(line: 168, column: 9, scope: !68)
!80 = !DILocation(line: 169, column: 9, scope: !77)
!81 = !DILocation(line: 170, column: 17, scope: !82)
!82 = distinct !DILexicalBlock(scope: !68, file: !25, line: 170, column: 9)
!83 = !DILocation(line: 170, column: 28, scope: !82)
!84 = !DILocation(line: 170, column: 9, scope: !68)
!85 = !DILocation(line: 171, column: 9, scope: !82)
!86 = !DILocation(line: 172, column: 17, scope: !87)
!87 = distinct !DILexicalBlock(scope: !68, file: !25, line: 172, column: 9)
!88 = !DILocation(line: 172, column: 28, scope: !87)
!89 = !DILocation(line: 172, column: 9, scope: !68)
!90 = !DILocation(line: 173, column: 9, scope: !87)
!91 = !DILocation(line: 174, column: 17, scope: !92)
!92 = distinct !DILexicalBlock(scope: !68, file: !25, line: 174, column: 9)
!93 = !DILocation(line: 174, column: 28, scope: !92)
!94 = !DILocation(line: 174, column: 9, scope: !68)
!95 = !DILocation(line: 175, column: 9, scope: !92)
!96 = !DILocation(line: 176, column: 17, scope: !97)
!97 = distinct !DILexicalBlock(scope: !68, file: !25, line: 176, column: 9)
!98 = !DILocation(line: 176, column: 28, scope: !97)
!99 = !DILocation(line: 176, column: 9, scope: !68)
!100 = !DILocation(line: 177, column: 9, scope: !97)
!101 = !DILocation(line: 200, column: 1, scope: !68)
!102 = distinct !DISubprogram(name: "rgb2rgb_init_mmx", scope: !103, file: !103, line: 2494, type: !69, isLocal: true, isDefinition: true, scopeLine: 2495, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!103 = !DIFile(filename: "libswscale/x86/rgb2rgb_template.c", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libswscale--libswscale.a")
!104 = !DILocation(line: 2498, column: 15, scope: !102)
!105 = !DILocation(line: 2499, column: 18, scope: !102)
!106 = !DILocation(line: 2500, column: 15, scope: !102)
!107 = !DILocation(line: 2501, column: 18, scope: !102)
!108 = !DILocation(line: 2502, column: 15, scope: !102)
!109 = !DILocation(line: 2503, column: 15, scope: !102)
!110 = !DILocation(line: 2504, column: 18, scope: !102)
!111 = !DILocation(line: 2505, column: 18, scope: !102)
!112 = !DILocation(line: 2506, column: 18, scope: !102)
!113 = !DILocation(line: 2507, column: 15, scope: !102)
!114 = !DILocation(line: 2508, column: 15, scope: !102)
!115 = !DILocation(line: 2509, column: 18, scope: !102)
!116 = !DILocation(line: 2510, column: 15, scope: !102)
!117 = !DILocation(line: 2511, column: 15, scope: !102)
!118 = !DILocation(line: 2512, column: 18, scope: !102)
!119 = !DILocation(line: 2513, column: 18, scope: !102)
!120 = !DILocation(line: 2514, column: 18, scope: !102)
!121 = !DILocation(line: 2515, column: 16, scope: !102)
!122 = !DILocation(line: 2516, column: 16, scope: !102)
!123 = !DILocation(line: 2517, column: 19, scope: !102)
!124 = !DILocation(line: 2518, column: 19, scope: !102)
!125 = !DILocation(line: 2519, column: 16, scope: !102)
!126 = !DILocation(line: 2520, column: 17, scope: !102)
!127 = !DILocation(line: 2521, column: 18, scope: !102)
!128 = !DILocation(line: 2522, column: 18, scope: !102)
!129 = !DILocation(line: 2523, column: 18, scope: !102)
!130 = !DILocation(line: 2530, column: 20, scope: !102)
!131 = !DILocation(line: 2533, column: 18, scope: !102)
!132 = !DILocation(line: 2534, column: 18, scope: !102)
!133 = !DILocation(line: 2538, column: 21, scope: !102)
!134 = !DILocation(line: 2545, column: 1, scope: !102)
!135 = distinct !DISubprogram(name: "rgb2rgb_init_3dnow", scope: !103, file: !103, line: 2494, type: !69, isLocal: true, isDefinition: true, scopeLine: 2495, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!136 = !DILocation(line: 2527, column: 14, scope: !135)
!137 = !DILocation(line: 2530, column: 20, scope: !135)
!138 = !DILocation(line: 2533, column: 18, scope: !135)
!139 = !DILocation(line: 2534, column: 18, scope: !135)
!140 = !DILocation(line: 2545, column: 1, scope: !135)
!141 = distinct !DISubprogram(name: "rgb2rgb_init_mmxext", scope: !103, file: !103, line: 2494, type: !69, isLocal: true, isDefinition: true, scopeLine: 2495, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!142 = !DILocation(line: 2498, column: 15, scope: !141)
!143 = !DILocation(line: 2499, column: 18, scope: !141)
!144 = !DILocation(line: 2500, column: 15, scope: !141)
!145 = !DILocation(line: 2501, column: 18, scope: !141)
!146 = !DILocation(line: 2502, column: 15, scope: !141)
!147 = !DILocation(line: 2503, column: 15, scope: !141)
!148 = !DILocation(line: 2504, column: 18, scope: !141)
!149 = !DILocation(line: 2505, column: 18, scope: !141)
!150 = !DILocation(line: 2506, column: 18, scope: !141)
!151 = !DILocation(line: 2507, column: 15, scope: !141)
!152 = !DILocation(line: 2508, column: 15, scope: !141)
!153 = !DILocation(line: 2509, column: 18, scope: !141)
!154 = !DILocation(line: 2510, column: 15, scope: !141)
!155 = !DILocation(line: 2511, column: 15, scope: !141)
!156 = !DILocation(line: 2512, column: 18, scope: !141)
!157 = !DILocation(line: 2513, column: 18, scope: !141)
!158 = !DILocation(line: 2514, column: 18, scope: !141)
!159 = !DILocation(line: 2515, column: 16, scope: !141)
!160 = !DILocation(line: 2516, column: 16, scope: !141)
!161 = !DILocation(line: 2517, column: 19, scope: !141)
!162 = !DILocation(line: 2518, column: 19, scope: !141)
!163 = !DILocation(line: 2519, column: 16, scope: !141)
!164 = !DILocation(line: 2520, column: 17, scope: !141)
!165 = !DILocation(line: 2521, column: 18, scope: !141)
!166 = !DILocation(line: 2522, column: 18, scope: !141)
!167 = !DILocation(line: 2523, column: 18, scope: !141)
!168 = !DILocation(line: 2527, column: 14, scope: !141)
!169 = !DILocation(line: 2530, column: 20, scope: !141)
!170 = !DILocation(line: 2533, column: 18, scope: !141)
!171 = !DILocation(line: 2534, column: 18, scope: !141)
!172 = !DILocation(line: 2538, column: 21, scope: !141)
!173 = !DILocation(line: 2545, column: 1, scope: !141)
!174 = distinct !DISubprogram(name: "rgb2rgb_init_sse2", scope: !103, file: !103, line: 2494, type: !69, isLocal: true, isDefinition: true, scopeLine: 2495, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!175 = !DILocation(line: 2538, column: 21, scope: !174)
!176 = !DILocation(line: 2545, column: 1, scope: !174)
!177 = distinct !DISubprogram(name: "rgb2rgb_init_avx", scope: !103, file: !103, line: 2494, type: !69, isLocal: true, isDefinition: true, scopeLine: 2495, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!178 = !DILocation(line: 2545, column: 1, scope: !177)
!179 = distinct !DISubprogram(name: "rgb15to16_mmx", scope: !103, file: !103, line: 189, type: !180, isLocal: true, isDefinition: true, scopeLine: 190, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!180 = !DISubroutineType(types: !181)
!181 = !{null, !182, !15, !72}
!182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !183, size: 64, align: 64)
!183 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!184 = !DILocalVariable(name: "src", arg: 1, scope: !179, file: !103, line: 189, type: !182)
!185 = !DILocation(line: 189, column: 49, scope: !179)
!186 = !DILocalVariable(name: "dst", arg: 2, scope: !179, file: !103, line: 189, type: !15)
!187 = !DILocation(line: 189, column: 63, scope: !179)
!188 = !DILocalVariable(name: "src_size", arg: 3, scope: !179, file: !103, line: 189, type: !72)
!189 = !DILocation(line: 189, column: 72, scope: !179)
!190 = !DILocalVariable(name: "s", scope: !179, file: !103, line: 191, type: !182)
!191 = !DILocation(line: 191, column: 29, scope: !179)
!192 = !DILocation(line: 191, column: 31, scope: !179)
!193 = !DILocalVariable(name: "d", scope: !179, file: !103, line: 192, type: !15)
!194 = !DILocation(line: 192, column: 23, scope: !179)
!195 = !DILocation(line: 192, column: 25, scope: !179)
!196 = !DILocalVariable(name: "end", scope: !179, file: !103, line: 193, type: !182)
!197 = !DILocation(line: 193, column: 29, scope: !179)
!198 = !DILocalVariable(name: "mm_end", scope: !179, file: !103, line: 194, type: !182)
!199 = !DILocation(line: 194, column: 20, scope: !179)
!200 = !DILocation(line: 195, column: 11, scope: !179)
!201 = !DILocation(line: 195, column: 15, scope: !179)
!202 = !DILocation(line: 195, column: 13, scope: !179)
!203 = !DILocation(line: 195, column: 9, scope: !179)
!204 = !DILocation(line: 196, column: 45, scope: !179)
!205 = !DILocation(line: 196, column: 5, scope: !179)
!206 = !{i32 159305}
!207 = !DILocation(line: 197, column: 5, scope: !179)
!208 = !{i32 159354}
!209 = !DILocation(line: 198, column: 14, scope: !179)
!210 = !DILocation(line: 198, column: 18, scope: !179)
!211 = !DILocation(line: 198, column: 12, scope: !179)
!212 = !DILocation(line: 199, column: 5, scope: !179)
!213 = !DILocation(line: 199, column: 12, scope: !214)
!214 = !DILexicalBlockFile(scope: !179, file: !103, discriminator: 1)
!215 = !DILocation(line: 199, column: 14, scope: !214)
!216 = !DILocation(line: 199, column: 13, scope: !214)
!217 = !DILocation(line: 199, column: 5, scope: !214)
!218 = !DILocation(line: 212, column: 20, scope: !219)
!219 = distinct !DILexicalBlock(scope: !179, file: !103, line: 199, column: 22)
!220 = !DILocation(line: 212, column: 28, scope: !219)
!221 = !DILocation(line: 200, column: 9, scope: !219)
!222 = !{i32 159478, i32 159504, i32 159546, i32 159588, i32 159630, i32 159672, i32 159714, i32 159756, i32 159798, i32 159840, i32 159882}
!223 = !DILocation(line: 214, column: 10, scope: !219)
!224 = !DILocation(line: 215, column: 10, scope: !219)
!225 = !DILocation(line: 199, column: 5, scope: !226)
!226 = !DILexicalBlockFile(scope: !179, file: !103, discriminator: 2)
!227 = distinct !{!227, !212}
!228 = !DILocation(line: 217, column: 5, scope: !179)
!229 = !{i32 160020}
!230 = !DILocation(line: 218, column: 5, scope: !179)
!231 = !{i32 160063}
!232 = !DILocation(line: 219, column: 14, scope: !179)
!233 = !DILocation(line: 219, column: 18, scope: !179)
!234 = !DILocation(line: 219, column: 12, scope: !179)
!235 = !DILocation(line: 220, column: 5, scope: !179)
!236 = !DILocation(line: 220, column: 12, scope: !214)
!237 = !DILocation(line: 220, column: 16, scope: !214)
!238 = !DILocation(line: 220, column: 14, scope: !214)
!239 = !DILocation(line: 220, column: 5, scope: !214)
!240 = !DILocalVariable(name: "x", scope: !241, file: !103, line: 221, type: !8)
!241 = distinct !DILexicalBlock(scope: !179, file: !103, line: 220, column: 24)
!242 = !DILocation(line: 221, column: 27, scope: !241)
!243 = !DILocation(line: 221, column: 50, scope: !241)
!244 = !DILocation(line: 221, column: 30, scope: !241)
!245 = !DILocation(line: 222, column: 29, scope: !241)
!246 = !DILocation(line: 222, column: 30, scope: !241)
!247 = !DILocation(line: 222, column: 46, scope: !241)
!248 = !DILocation(line: 222, column: 47, scope: !241)
!249 = !DILocation(line: 222, column: 43, scope: !241)
!250 = !DILocation(line: 222, column: 23, scope: !241)
!251 = !DILocation(line: 222, column: 9, scope: !241)
!252 = !DILocation(line: 222, column: 26, scope: !241)
!253 = !DILocation(line: 223, column: 10, scope: !241)
!254 = !DILocation(line: 224, column: 10, scope: !241)
!255 = !DILocation(line: 220, column: 5, scope: !226)
!256 = distinct !{!256, !235}
!257 = !DILocation(line: 226, column: 9, scope: !258)
!258 = distinct !DILexicalBlock(scope: !179, file: !103, line: 226, column: 9)
!259 = !DILocation(line: 226, column: 13, scope: !258)
!260 = !DILocation(line: 226, column: 11, scope: !258)
!261 = !DILocation(line: 226, column: 9, scope: !179)
!262 = !DILocalVariable(name: "x", scope: !263, file: !103, line: 227, type: !13)
!263 = distinct !DILexicalBlock(scope: !258, file: !103, line: 226, column: 18)
!264 = !DILocation(line: 227, column: 33, scope: !263)
!265 = !DILocation(line: 227, column: 56, scope: !263)
!266 = !DILocation(line: 227, column: 36, scope: !263)
!267 = !DILocation(line: 228, column: 29, scope: !263)
!268 = !DILocation(line: 228, column: 30, scope: !263)
!269 = !DILocation(line: 228, column: 42, scope: !263)
!270 = !DILocation(line: 228, column: 43, scope: !263)
!271 = !DILocation(line: 228, column: 39, scope: !263)
!272 = !DILocation(line: 228, column: 28, scope: !263)
!273 = !DILocation(line: 228, column: 23, scope: !263)
!274 = !DILocation(line: 228, column: 9, scope: !263)
!275 = !DILocation(line: 228, column: 26, scope: !263)
!276 = !DILocation(line: 229, column: 5, scope: !263)
!277 = !DILocation(line: 230, column: 1, scope: !179)
!278 = distinct !DISubprogram(name: "rgb15tobgr24_mmx", scope: !103, file: !103, line: 718, type: !180, isLocal: true, isDefinition: true, scopeLine: 719, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!279 = !DILocalVariable(name: "src", arg: 1, scope: !278, file: !103, line: 718, type: !182)
!280 = !DILocation(line: 718, column: 52, scope: !278)
!281 = !DILocalVariable(name: "dst", arg: 2, scope: !278, file: !103, line: 718, type: !15)
!282 = !DILocation(line: 718, column: 66, scope: !278)
!283 = !DILocalVariable(name: "src_size", arg: 3, scope: !278, file: !103, line: 718, type: !72)
!284 = !DILocation(line: 718, column: 75, scope: !278)
!285 = !DILocalVariable(name: "end", scope: !278, file: !103, line: 720, type: !10)
!286 = !DILocation(line: 720, column: 21, scope: !278)
!287 = !DILocalVariable(name: "mm_end", scope: !278, file: !103, line: 721, type: !10)
!288 = !DILocation(line: 721, column: 21, scope: !278)
!289 = !DILocalVariable(name: "d", scope: !278, file: !103, line: 722, type: !15)
!290 = !DILocation(line: 722, column: 14, scope: !278)
!291 = !DILocation(line: 722, column: 18, scope: !278)
!292 = !DILocalVariable(name: "s", scope: !278, file: !103, line: 723, type: !10)
!293 = !DILocation(line: 723, column: 21, scope: !278)
!294 = !DILocation(line: 723, column: 42, scope: !278)
!295 = !DILocation(line: 723, column: 25, scope: !278)
!296 = !DILocation(line: 724, column: 11, scope: !278)
!297 = !DILocation(line: 724, column: 15, scope: !278)
!298 = !DILocation(line: 724, column: 23, scope: !278)
!299 = !DILocation(line: 724, column: 13, scope: !278)
!300 = !DILocation(line: 724, column: 9, scope: !278)
!301 = !DILocation(line: 725, column: 45, scope: !278)
!302 = !DILocation(line: 725, column: 5, scope: !278)
!303 = !{i32 178884}
!304 = !DILocation(line: 726, column: 14, scope: !278)
!305 = !DILocation(line: 726, column: 18, scope: !278)
!306 = !DILocation(line: 726, column: 12, scope: !278)
!307 = !DILocation(line: 727, column: 5, scope: !278)
!308 = !DILocation(line: 727, column: 12, scope: !309)
!309 = !DILexicalBlockFile(scope: !278, file: !103, discriminator: 1)
!310 = !DILocation(line: 727, column: 16, scope: !309)
!311 = !DILocation(line: 727, column: 14, scope: !309)
!312 = !DILocation(line: 727, column: 5, scope: !309)
!313 = !DILocation(line: 789, column: 20, scope: !314)
!314 = distinct !DILexicalBlock(scope: !278, file: !103, line: 727, column: 24)
!315 = !DILocation(line: 790, column: 18, scope: !314)
!316 = !DILocation(line: 728, column: 9, scope: !314)
!317 = !{i32 179006, i32 179036, i32 179082, i32 179128, i32 179174, i32 179220, i32 179266, i32 179312, i32 179358, i32 179418, i32 179478, i32 179537, i32 179583, i32 179629, i32 179675, i32 179721, i32 179767, i32 179813, i32 179859, i32 179905, i32 179951, i32 179997, i32 180043, i32 180089, i32 180135, i32 180181, i32 180227, i32 180273, i32 180319, i32 180366, i32 180412, i32 180459, i32 180505, i32 180551, i32 180597, i32 180643, i32 180689, i32 180735, i32 180795, i32 180855, i32 180914, i32 180960, i32 181006, i32 181052, i32 181098, i32 181144, i32 181190, i32 181236, i32 181282, i32 181328, i32 181374, i32 181420, i32 181466, i32 181512, i32 181558, i32 181604, i32 181650, i32 181696}
!318 = !DILocation(line: 807, column: 20, scope: !314)
!319 = !DILocation(line: 807, column: 29, scope: !314)
!320 = !DILocation(line: 794, column: 9, scope: !314)
!321 = !{i32 181873, i32 181903, i32 181949, i32 181995, i32 182041, i32 182088, i32 182134, i32 182180, i32 182226, i32 182273, i32 182307, i32 182341, i32 182375, i32 182408, i32 182441, i32 182474, i32 182507, i32 182540, i32 182573, i32 182606, i32 182639, i32 182673, i32 182707, i32 182741, i32 182775, i32 182809, i32 182843, i32 182877, i32 182911, i32 182945, i32 182979, i32 183013, i32 183047, i32 183081, i32 183115, i32 183150, i32 183185}
!322 = !DILocation(line: 810, column: 11, scope: !314)
!323 = !DILocation(line: 811, column: 11, scope: !314)
!324 = !DILocation(line: 727, column: 5, scope: !325)
!325 = !DILexicalBlockFile(scope: !278, file: !103, discriminator: 2)
!326 = distinct !{!326, !307}
!327 = !DILocation(line: 813, column: 5, scope: !278)
!328 = !{i32 183346}
!329 = !DILocation(line: 814, column: 5, scope: !278)
!330 = !{i32 183389}
!331 = !DILocation(line: 815, column: 5, scope: !278)
!332 = !DILocation(line: 815, column: 12, scope: !309)
!333 = !DILocation(line: 815, column: 16, scope: !309)
!334 = !DILocation(line: 815, column: 14, scope: !309)
!335 = !DILocation(line: 815, column: 5, scope: !309)
!336 = !DILocalVariable(name: "bgr", scope: !337, file: !103, line: 816, type: !12)
!337 = distinct !DILexicalBlock(scope: !278, file: !103, line: 815, column: 21)
!338 = !DILocation(line: 816, column: 27, scope: !337)
!339 = !DILocation(line: 817, column: 17, scope: !337)
!340 = !DILocation(line: 817, column: 15, scope: !337)
!341 = !DILocation(line: 817, column: 13, scope: !337)
!342 = !DILocation(line: 818, column: 18, scope: !337)
!343 = !DILocation(line: 818, column: 21, scope: !337)
!344 = !DILocation(line: 818, column: 27, scope: !337)
!345 = !DILocation(line: 818, column: 36, scope: !337)
!346 = !DILocation(line: 818, column: 39, scope: !337)
!347 = !DILocation(line: 818, column: 45, scope: !337)
!348 = !DILocation(line: 818, column: 32, scope: !337)
!349 = !DILocation(line: 818, column: 16, scope: !337)
!350 = !DILocation(line: 818, column: 11, scope: !337)
!351 = !DILocation(line: 818, column: 14, scope: !337)
!352 = !DILocation(line: 819, column: 18, scope: !337)
!353 = !DILocation(line: 819, column: 21, scope: !337)
!354 = !DILocation(line: 819, column: 28, scope: !337)
!355 = !DILocation(line: 819, column: 37, scope: !337)
!356 = !DILocation(line: 819, column: 40, scope: !337)
!357 = !DILocation(line: 819, column: 47, scope: !337)
!358 = !DILocation(line: 819, column: 33, scope: !337)
!359 = !DILocation(line: 819, column: 16, scope: !337)
!360 = !DILocation(line: 819, column: 11, scope: !337)
!361 = !DILocation(line: 819, column: 14, scope: !337)
!362 = !DILocation(line: 820, column: 18, scope: !337)
!363 = !DILocation(line: 820, column: 21, scope: !337)
!364 = !DILocation(line: 820, column: 29, scope: !337)
!365 = !DILocation(line: 820, column: 38, scope: !337)
!366 = !DILocation(line: 820, column: 41, scope: !337)
!367 = !DILocation(line: 820, column: 49, scope: !337)
!368 = !DILocation(line: 820, column: 34, scope: !337)
!369 = !DILocation(line: 820, column: 16, scope: !337)
!370 = !DILocation(line: 820, column: 11, scope: !337)
!371 = !DILocation(line: 820, column: 14, scope: !337)
!372 = !DILocation(line: 815, column: 5, scope: !325)
!373 = distinct !{!373, !331}
!374 = !DILocation(line: 822, column: 1, scope: !278)
!375 = distinct !DISubprogram(name: "rgb15to32_mmx", scope: !103, file: !103, line: 950, type: !180, isLocal: true, isDefinition: true, scopeLine: 951, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!376 = !DILocalVariable(name: "src", arg: 1, scope: !375, file: !103, line: 950, type: !182)
!377 = !DILocation(line: 950, column: 49, scope: !375)
!378 = !DILocalVariable(name: "dst", arg: 2, scope: !375, file: !103, line: 950, type: !15)
!379 = !DILocation(line: 950, column: 63, scope: !375)
!380 = !DILocalVariable(name: "src_size", arg: 3, scope: !375, file: !103, line: 950, type: !72)
!381 = !DILocation(line: 950, column: 72, scope: !375)
!382 = !DILocalVariable(name: "end", scope: !375, file: !103, line: 952, type: !10)
!383 = !DILocation(line: 952, column: 21, scope: !375)
!384 = !DILocalVariable(name: "mm_end", scope: !375, file: !103, line: 953, type: !10)
!385 = !DILocation(line: 953, column: 21, scope: !375)
!386 = !DILocalVariable(name: "d", scope: !375, file: !103, line: 954, type: !15)
!387 = !DILocation(line: 954, column: 14, scope: !375)
!388 = !DILocation(line: 954, column: 18, scope: !375)
!389 = !DILocalVariable(name: "s", scope: !375, file: !103, line: 955, type: !10)
!390 = !DILocation(line: 955, column: 21, scope: !375)
!391 = !DILocation(line: 955, column: 43, scope: !375)
!392 = !DILocation(line: 955, column: 25, scope: !375)
!393 = !DILocation(line: 956, column: 11, scope: !375)
!394 = !DILocation(line: 956, column: 15, scope: !375)
!395 = !DILocation(line: 956, column: 23, scope: !375)
!396 = !DILocation(line: 956, column: 13, scope: !375)
!397 = !DILocation(line: 956, column: 9, scope: !375)
!398 = !DILocation(line: 957, column: 45, scope: !375)
!399 = !DILocation(line: 957, column: 5, scope: !375)
!400 = !{i32 189061}
!401 = !DILocation(line: 958, column: 5, scope: !375)
!402 = !{i32 189119, i32 189145}
!403 = !DILocation(line: 959, column: 5, scope: !375)
!404 = !{i32 189183, i32 189209}
!405 = !DILocation(line: 960, column: 14, scope: !375)
!406 = !DILocation(line: 960, column: 18, scope: !375)
!407 = !DILocation(line: 960, column: 12, scope: !375)
!408 = !DILocation(line: 961, column: 5, scope: !375)
!409 = !DILocation(line: 961, column: 12, scope: !410)
!410 = !DILexicalBlockFile(scope: !375, file: !103, discriminator: 1)
!411 = !DILocation(line: 961, column: 16, scope: !410)
!412 = !DILocation(line: 961, column: 14, scope: !410)
!413 = !DILocation(line: 961, column: 5, scope: !410)
!414 = !DILocation(line: 975, column: 19, scope: !415)
!415 = distinct !DILexicalBlock(scope: !375, file: !103, line: 961, column: 24)
!416 = !DILocation(line: 975, column: 26, scope: !415)
!417 = !DILocation(line: 962, column: 9, scope: !415)
!418 = !{i32 189311, i32 189341, i32 189387, i32 189433, i32 189479, i32 189525, i32 189571, i32 189617, i32 189663, i32 189709, i32 189755, i32 189814, i32 189860, i32 189894, i32 189928, i32 189962, i32 189996, i32 190030, i32 190064, i32 190098, i32 190132, i32 190166}
!419 = !DILocation(line: 978, column: 11, scope: !415)
!420 = !DILocation(line: 979, column: 11, scope: !415)
!421 = !DILocation(line: 961, column: 5, scope: !422)
!422 = !DILexicalBlockFile(scope: !375, file: !103, discriminator: 2)
!423 = distinct !{!423, !408}
!424 = !DILocation(line: 981, column: 5, scope: !375)
!425 = !{i32 190351}
!426 = !DILocation(line: 982, column: 5, scope: !375)
!427 = !{i32 190394}
!428 = !DILocation(line: 983, column: 5, scope: !375)
!429 = !DILocation(line: 983, column: 12, scope: !410)
!430 = !DILocation(line: 983, column: 16, scope: !410)
!431 = !DILocation(line: 983, column: 14, scope: !410)
!432 = !DILocation(line: 983, column: 5, scope: !410)
!433 = !DILocalVariable(name: "bgr", scope: !434, file: !103, line: 984, type: !12)
!434 = distinct !DILexicalBlock(scope: !375, file: !103, line: 983, column: 21)
!435 = !DILocation(line: 984, column: 27, scope: !434)
!436 = !DILocation(line: 985, column: 17, scope: !434)
!437 = !DILocation(line: 985, column: 15, scope: !434)
!438 = !DILocation(line: 985, column: 13, scope: !434)
!439 = !DILocation(line: 986, column: 18, scope: !434)
!440 = !DILocation(line: 986, column: 21, scope: !434)
!441 = !DILocation(line: 986, column: 27, scope: !434)
!442 = !DILocation(line: 986, column: 36, scope: !434)
!443 = !DILocation(line: 986, column: 39, scope: !434)
!444 = !DILocation(line: 986, column: 45, scope: !434)
!445 = !DILocation(line: 986, column: 32, scope: !434)
!446 = !DILocation(line: 986, column: 16, scope: !434)
!447 = !DILocation(line: 986, column: 11, scope: !434)
!448 = !DILocation(line: 986, column: 14, scope: !434)
!449 = !DILocation(line: 987, column: 18, scope: !434)
!450 = !DILocation(line: 987, column: 21, scope: !434)
!451 = !DILocation(line: 987, column: 28, scope: !434)
!452 = !DILocation(line: 987, column: 37, scope: !434)
!453 = !DILocation(line: 987, column: 40, scope: !434)
!454 = !DILocation(line: 987, column: 47, scope: !434)
!455 = !DILocation(line: 987, column: 33, scope: !434)
!456 = !DILocation(line: 987, column: 16, scope: !434)
!457 = !DILocation(line: 987, column: 11, scope: !434)
!458 = !DILocation(line: 987, column: 14, scope: !434)
!459 = !DILocation(line: 988, column: 18, scope: !434)
!460 = !DILocation(line: 988, column: 21, scope: !434)
!461 = !DILocation(line: 988, column: 29, scope: !434)
!462 = !DILocation(line: 988, column: 38, scope: !434)
!463 = !DILocation(line: 988, column: 41, scope: !434)
!464 = !DILocation(line: 988, column: 49, scope: !434)
!465 = !DILocation(line: 988, column: 34, scope: !434)
!466 = !DILocation(line: 988, column: 16, scope: !434)
!467 = !DILocation(line: 988, column: 11, scope: !434)
!468 = !DILocation(line: 988, column: 14, scope: !434)
!469 = !DILocation(line: 989, column: 11, scope: !434)
!470 = !DILocation(line: 989, column: 14, scope: !434)
!471 = !DILocation(line: 983, column: 5, scope: !422)
!472 = distinct !{!472, !428}
!473 = !DILocation(line: 991, column: 1, scope: !375)
!474 = distinct !DISubprogram(name: "rgb16tobgr24_mmx", scope: !103, file: !103, line: 824, type: !180, isLocal: true, isDefinition: true, scopeLine: 825, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!475 = !DILocalVariable(name: "src", arg: 1, scope: !474, file: !103, line: 824, type: !182)
!476 = !DILocation(line: 824, column: 52, scope: !474)
!477 = !DILocalVariable(name: "dst", arg: 2, scope: !474, file: !103, line: 824, type: !15)
!478 = !DILocation(line: 824, column: 66, scope: !474)
!479 = !DILocalVariable(name: "src_size", arg: 3, scope: !474, file: !103, line: 824, type: !72)
!480 = !DILocation(line: 824, column: 75, scope: !474)
!481 = !DILocalVariable(name: "end", scope: !474, file: !103, line: 826, type: !10)
!482 = !DILocation(line: 826, column: 21, scope: !474)
!483 = !DILocalVariable(name: "mm_end", scope: !474, file: !103, line: 827, type: !10)
!484 = !DILocation(line: 827, column: 21, scope: !474)
!485 = !DILocalVariable(name: "d", scope: !474, file: !103, line: 828, type: !15)
!486 = !DILocation(line: 828, column: 14, scope: !474)
!487 = !DILocation(line: 828, column: 29, scope: !474)
!488 = !DILocalVariable(name: "s", scope: !474, file: !103, line: 829, type: !10)
!489 = !DILocation(line: 829, column: 21, scope: !474)
!490 = !DILocation(line: 829, column: 43, scope: !474)
!491 = !DILocation(line: 829, column: 25, scope: !474)
!492 = !DILocation(line: 830, column: 11, scope: !474)
!493 = !DILocation(line: 830, column: 15, scope: !474)
!494 = !DILocation(line: 830, column: 23, scope: !474)
!495 = !DILocation(line: 830, column: 13, scope: !474)
!496 = !DILocation(line: 830, column: 9, scope: !474)
!497 = !DILocation(line: 831, column: 45, scope: !474)
!498 = !DILocation(line: 831, column: 5, scope: !474)
!499 = !{i32 183914}
!500 = !DILocation(line: 832, column: 14, scope: !474)
!501 = !DILocation(line: 832, column: 18, scope: !474)
!502 = !DILocation(line: 832, column: 12, scope: !474)
!503 = !DILocation(line: 833, column: 5, scope: !474)
!504 = !DILocation(line: 833, column: 12, scope: !505)
!505 = !DILexicalBlockFile(scope: !474, file: !103, discriminator: 1)
!506 = !DILocation(line: 833, column: 16, scope: !505)
!507 = !DILocation(line: 833, column: 14, scope: !505)
!508 = !DILocation(line: 833, column: 5, scope: !505)
!509 = !DILocation(line: 896, column: 20, scope: !510)
!510 = distinct !DILexicalBlock(scope: !474, file: !103, line: 833, column: 24)
!511 = !DILocation(line: 897, column: 18, scope: !510)
!512 = !DILocation(line: 834, column: 9, scope: !510)
!513 = !{i32 184036, i32 184066, i32 184112, i32 184158, i32 184204, i32 184250, i32 184296, i32 184342, i32 184388, i32 184434, i32 184494, i32 184554, i32 184613, i32 184659, i32 184705, i32 184751, i32 184797, i32 184843, i32 184889, i32 184935, i32 184981, i32 185027, i32 185073, i32 185119, i32 185165, i32 185211, i32 185257, i32 185303, i32 185349, i32 185395, i32 185442, i32 185488, i32 185535, i32 185581, i32 185627, i32 185673, i32 185719, i32 185765, i32 185811, i32 185857, i32 185917, i32 185977, i32 186036, i32 186082, i32 186128, i32 186174, i32 186220, i32 186266, i32 186312, i32 186358, i32 186404, i32 186450, i32 186496, i32 186542, i32 186588, i32 186634, i32 186680, i32 186726, i32 186772, i32 186818}
!514 = !DILocation(line: 914, column: 20, scope: !510)
!515 = !DILocation(line: 914, column: 29, scope: !510)
!516 = !DILocation(line: 901, column: 9, scope: !510)
!517 = !{i32 186993, i32 187023, i32 187069, i32 187115, i32 187161, i32 187208, i32 187254, i32 187300, i32 187346, i32 187393, i32 187427, i32 187461, i32 187495, i32 187528, i32 187561, i32 187594, i32 187627, i32 187660, i32 187693, i32 187726, i32 187759, i32 187793, i32 187827, i32 187861, i32 187895, i32 187929, i32 187963, i32 187997, i32 188031, i32 188065, i32 188099, i32 188133, i32 188167, i32 188201, i32 188235, i32 188270, i32 188305}
!518 = !DILocation(line: 917, column: 11, scope: !510)
!519 = !DILocation(line: 918, column: 11, scope: !510)
!520 = !DILocation(line: 833, column: 5, scope: !521)
!521 = !DILexicalBlockFile(scope: !474, file: !103, discriminator: 2)
!522 = distinct !{!522, !503}
!523 = !DILocation(line: 920, column: 5, scope: !474)
!524 = !{i32 188466}
!525 = !DILocation(line: 921, column: 5, scope: !474)
!526 = !{i32 188509}
!527 = !DILocation(line: 922, column: 5, scope: !474)
!528 = !DILocation(line: 922, column: 12, scope: !505)
!529 = !DILocation(line: 922, column: 16, scope: !505)
!530 = !DILocation(line: 922, column: 14, scope: !505)
!531 = !DILocation(line: 922, column: 5, scope: !505)
!532 = !DILocalVariable(name: "bgr", scope: !533, file: !103, line: 923, type: !12)
!533 = distinct !DILexicalBlock(scope: !474, file: !103, line: 922, column: 21)
!534 = !DILocation(line: 923, column: 27, scope: !533)
!535 = !DILocation(line: 924, column: 17, scope: !533)
!536 = !DILocation(line: 924, column: 15, scope: !533)
!537 = !DILocation(line: 924, column: 13, scope: !533)
!538 = !DILocation(line: 925, column: 18, scope: !533)
!539 = !DILocation(line: 925, column: 21, scope: !533)
!540 = !DILocation(line: 925, column: 27, scope: !533)
!541 = !DILocation(line: 925, column: 36, scope: !533)
!542 = !DILocation(line: 925, column: 39, scope: !533)
!543 = !DILocation(line: 925, column: 45, scope: !533)
!544 = !DILocation(line: 925, column: 32, scope: !533)
!545 = !DILocation(line: 925, column: 16, scope: !533)
!546 = !DILocation(line: 925, column: 11, scope: !533)
!547 = !DILocation(line: 925, column: 14, scope: !533)
!548 = !DILocation(line: 926, column: 18, scope: !533)
!549 = !DILocation(line: 926, column: 21, scope: !533)
!550 = !DILocation(line: 926, column: 28, scope: !533)
!551 = !DILocation(line: 926, column: 37, scope: !533)
!552 = !DILocation(line: 926, column: 40, scope: !533)
!553 = !DILocation(line: 926, column: 47, scope: !533)
!554 = !DILocation(line: 926, column: 33, scope: !533)
!555 = !DILocation(line: 926, column: 16, scope: !533)
!556 = !DILocation(line: 926, column: 11, scope: !533)
!557 = !DILocation(line: 926, column: 14, scope: !533)
!558 = !DILocation(line: 927, column: 18, scope: !533)
!559 = !DILocation(line: 927, column: 21, scope: !533)
!560 = !DILocation(line: 927, column: 29, scope: !533)
!561 = !DILocation(line: 927, column: 38, scope: !533)
!562 = !DILocation(line: 927, column: 41, scope: !533)
!563 = !DILocation(line: 927, column: 49, scope: !533)
!564 = !DILocation(line: 927, column: 34, scope: !533)
!565 = !DILocation(line: 927, column: 16, scope: !533)
!566 = !DILocation(line: 927, column: 11, scope: !533)
!567 = !DILocation(line: 927, column: 14, scope: !533)
!568 = !DILocation(line: 922, column: 5, scope: !521)
!569 = distinct !{!569, !527}
!570 = !DILocation(line: 929, column: 1, scope: !474)
!571 = distinct !DISubprogram(name: "rgb16to32_mmx", scope: !103, file: !103, line: 993, type: !180, isLocal: true, isDefinition: true, scopeLine: 994, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!572 = !DILocalVariable(name: "src", arg: 1, scope: !571, file: !103, line: 993, type: !182)
!573 = !DILocation(line: 993, column: 49, scope: !571)
!574 = !DILocalVariable(name: "dst", arg: 2, scope: !571, file: !103, line: 993, type: !15)
!575 = !DILocation(line: 993, column: 63, scope: !571)
!576 = !DILocalVariable(name: "src_size", arg: 3, scope: !571, file: !103, line: 993, type: !72)
!577 = !DILocation(line: 993, column: 72, scope: !571)
!578 = !DILocalVariable(name: "end", scope: !571, file: !103, line: 995, type: !10)
!579 = !DILocation(line: 995, column: 21, scope: !571)
!580 = !DILocalVariable(name: "mm_end", scope: !571, file: !103, line: 996, type: !10)
!581 = !DILocation(line: 996, column: 21, scope: !571)
!582 = !DILocalVariable(name: "d", scope: !571, file: !103, line: 997, type: !15)
!583 = !DILocation(line: 997, column: 14, scope: !571)
!584 = !DILocation(line: 997, column: 18, scope: !571)
!585 = !DILocalVariable(name: "s", scope: !571, file: !103, line: 998, type: !10)
!586 = !DILocation(line: 998, column: 21, scope: !571)
!587 = !DILocation(line: 998, column: 42, scope: !571)
!588 = !DILocation(line: 998, column: 25, scope: !571)
!589 = !DILocation(line: 999, column: 11, scope: !571)
!590 = !DILocation(line: 999, column: 15, scope: !571)
!591 = !DILocation(line: 999, column: 23, scope: !571)
!592 = !DILocation(line: 999, column: 13, scope: !571)
!593 = !DILocation(line: 999, column: 9, scope: !571)
!594 = !DILocation(line: 1000, column: 45, scope: !571)
!595 = !DILocation(line: 1000, column: 5, scope: !571)
!596 = !{i32 190924}
!597 = !DILocation(line: 1001, column: 5, scope: !571)
!598 = !{i32 190982, i32 191008}
!599 = !DILocation(line: 1002, column: 5, scope: !571)
!600 = !{i32 191046, i32 191072}
!601 = !DILocation(line: 1003, column: 14, scope: !571)
!602 = !DILocation(line: 1003, column: 18, scope: !571)
!603 = !DILocation(line: 1003, column: 12, scope: !571)
!604 = !DILocation(line: 1004, column: 5, scope: !571)
!605 = !DILocation(line: 1004, column: 12, scope: !606)
!606 = !DILexicalBlockFile(scope: !571, file: !103, discriminator: 1)
!607 = !DILocation(line: 1004, column: 16, scope: !606)
!608 = !DILocation(line: 1004, column: 14, scope: !606)
!609 = !DILocation(line: 1004, column: 5, scope: !606)
!610 = !DILocation(line: 1019, column: 19, scope: !611)
!611 = distinct !DILexicalBlock(scope: !571, file: !103, line: 1004, column: 24)
!612 = !DILocation(line: 1019, column: 26, scope: !611)
!613 = !DILocation(line: 1005, column: 9, scope: !611)
!614 = !{i32 191174, i32 191204, i32 191250, i32 191296, i32 191342, i32 191388, i32 191434, i32 191480, i32 191526, i32 191572, i32 191618, i32 191678, i32 191737, i32 191783, i32 191817, i32 191851, i32 191885, i32 191919, i32 191953, i32 191987, i32 192021, i32 192055, i32 192089}
!615 = !DILocation(line: 1022, column: 11, scope: !611)
!616 = !DILocation(line: 1023, column: 11, scope: !611)
!617 = !DILocation(line: 1004, column: 5, scope: !618)
!618 = !DILexicalBlockFile(scope: !571, file: !103, discriminator: 2)
!619 = distinct !{!619, !604}
!620 = !DILocation(line: 1025, column: 5, scope: !571)
!621 = !{i32 192273}
!622 = !DILocation(line: 1026, column: 5, scope: !571)
!623 = !{i32 192316}
!624 = !DILocation(line: 1027, column: 5, scope: !571)
!625 = !DILocation(line: 1027, column: 12, scope: !606)
!626 = !DILocation(line: 1027, column: 16, scope: !606)
!627 = !DILocation(line: 1027, column: 14, scope: !606)
!628 = !DILocation(line: 1027, column: 5, scope: !606)
!629 = !DILocalVariable(name: "bgr", scope: !630, file: !103, line: 1028, type: !12)
!630 = distinct !DILexicalBlock(scope: !571, file: !103, line: 1027, column: 21)
!631 = !DILocation(line: 1028, column: 27, scope: !630)
!632 = !DILocation(line: 1029, column: 17, scope: !630)
!633 = !DILocation(line: 1029, column: 15, scope: !630)
!634 = !DILocation(line: 1029, column: 13, scope: !630)
!635 = !DILocation(line: 1030, column: 18, scope: !630)
!636 = !DILocation(line: 1030, column: 21, scope: !630)
!637 = !DILocation(line: 1030, column: 27, scope: !630)
!638 = !DILocation(line: 1030, column: 36, scope: !630)
!639 = !DILocation(line: 1030, column: 39, scope: !630)
!640 = !DILocation(line: 1030, column: 45, scope: !630)
!641 = !DILocation(line: 1030, column: 32, scope: !630)
!642 = !DILocation(line: 1030, column: 16, scope: !630)
!643 = !DILocation(line: 1030, column: 11, scope: !630)
!644 = !DILocation(line: 1030, column: 14, scope: !630)
!645 = !DILocation(line: 1031, column: 18, scope: !630)
!646 = !DILocation(line: 1031, column: 21, scope: !630)
!647 = !DILocation(line: 1031, column: 28, scope: !630)
!648 = !DILocation(line: 1031, column: 37, scope: !630)
!649 = !DILocation(line: 1031, column: 40, scope: !630)
!650 = !DILocation(line: 1031, column: 47, scope: !630)
!651 = !DILocation(line: 1031, column: 33, scope: !630)
!652 = !DILocation(line: 1031, column: 16, scope: !630)
!653 = !DILocation(line: 1031, column: 11, scope: !630)
!654 = !DILocation(line: 1031, column: 14, scope: !630)
!655 = !DILocation(line: 1032, column: 18, scope: !630)
!656 = !DILocation(line: 1032, column: 21, scope: !630)
!657 = !DILocation(line: 1032, column: 29, scope: !630)
!658 = !DILocation(line: 1032, column: 38, scope: !630)
!659 = !DILocation(line: 1032, column: 41, scope: !630)
!660 = !DILocation(line: 1032, column: 49, scope: !630)
!661 = !DILocation(line: 1032, column: 34, scope: !630)
!662 = !DILocation(line: 1032, column: 16, scope: !630)
!663 = !DILocation(line: 1032, column: 11, scope: !630)
!664 = !DILocation(line: 1032, column: 14, scope: !630)
!665 = !DILocation(line: 1033, column: 11, scope: !630)
!666 = !DILocation(line: 1033, column: 14, scope: !630)
!667 = !DILocation(line: 1027, column: 5, scope: !618)
!668 = distinct !{!668, !624}
!669 = !DILocation(line: 1035, column: 1, scope: !571)
!670 = distinct !DISubprogram(name: "rgb16to15_mmx", scope: !103, file: !103, line: 232, type: !180, isLocal: true, isDefinition: true, scopeLine: 233, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!671 = !DILocalVariable(name: "src", arg: 1, scope: !670, file: !103, line: 232, type: !182)
!672 = !DILocation(line: 232, column: 49, scope: !670)
!673 = !DILocalVariable(name: "dst", arg: 2, scope: !670, file: !103, line: 232, type: !15)
!674 = !DILocation(line: 232, column: 63, scope: !670)
!675 = !DILocalVariable(name: "src_size", arg: 3, scope: !670, file: !103, line: 232, type: !72)
!676 = !DILocation(line: 232, column: 72, scope: !670)
!677 = !DILocalVariable(name: "s", scope: !670, file: !103, line: 234, type: !182)
!678 = !DILocation(line: 234, column: 29, scope: !670)
!679 = !DILocation(line: 234, column: 31, scope: !670)
!680 = !DILocalVariable(name: "d", scope: !670, file: !103, line: 235, type: !15)
!681 = !DILocation(line: 235, column: 23, scope: !670)
!682 = !DILocation(line: 235, column: 25, scope: !670)
!683 = !DILocalVariable(name: "end", scope: !670, file: !103, line: 236, type: !182)
!684 = !DILocation(line: 236, column: 29, scope: !670)
!685 = !DILocalVariable(name: "mm_end", scope: !670, file: !103, line: 237, type: !182)
!686 = !DILocation(line: 237, column: 20, scope: !670)
!687 = !DILocation(line: 238, column: 11, scope: !670)
!688 = !DILocation(line: 238, column: 15, scope: !670)
!689 = !DILocation(line: 238, column: 13, scope: !670)
!690 = !DILocation(line: 238, column: 9, scope: !670)
!691 = !DILocation(line: 239, column: 45, scope: !670)
!692 = !DILocation(line: 239, column: 5, scope: !670)
!693 = !{i32 160668}
!694 = !DILocation(line: 240, column: 5, scope: !670)
!695 = !{i32 160717}
!696 = !DILocation(line: 241, column: 5, scope: !670)
!697 = !{i32 160779}
!698 = !DILocation(line: 242, column: 14, scope: !670)
!699 = !DILocation(line: 242, column: 18, scope: !670)
!700 = !DILocation(line: 242, column: 12, scope: !670)
!701 = !DILocation(line: 243, column: 5, scope: !670)
!702 = !DILocation(line: 243, column: 12, scope: !703)
!703 = !DILexicalBlockFile(scope: !670, file: !103, discriminator: 1)
!704 = !DILocation(line: 243, column: 14, scope: !703)
!705 = !DILocation(line: 243, column: 13, scope: !703)
!706 = !DILocation(line: 243, column: 5, scope: !703)
!707 = !DILocation(line: 260, column: 20, scope: !708)
!708 = distinct !DILexicalBlock(scope: !670, file: !103, line: 243, column: 22)
!709 = !DILocation(line: 260, column: 28, scope: !708)
!710 = !DILocation(line: 244, column: 9, scope: !708)
!711 = !{i32 160903, i32 160929, i32 160971, i32 161013, i32 161055, i32 161097, i32 161139, i32 161181, i32 161223, i32 161265, i32 161307, i32 161349, i32 161391, i32 161433, i32 161475}
!712 = !DILocation(line: 262, column: 10, scope: !708)
!713 = !DILocation(line: 263, column: 10, scope: !708)
!714 = !DILocation(line: 243, column: 5, scope: !715)
!715 = !DILexicalBlockFile(scope: !670, file: !103, discriminator: 2)
!716 = distinct !{!716, !701}
!717 = !DILocation(line: 265, column: 5, scope: !670)
!718 = !{i32 161613}
!719 = !DILocation(line: 266, column: 5, scope: !670)
!720 = !{i32 161656}
!721 = !DILocation(line: 267, column: 14, scope: !670)
!722 = !DILocation(line: 267, column: 18, scope: !670)
!723 = !DILocation(line: 267, column: 12, scope: !670)
!724 = !DILocation(line: 268, column: 5, scope: !670)
!725 = !DILocation(line: 268, column: 12, scope: !703)
!726 = !DILocation(line: 268, column: 16, scope: !703)
!727 = !DILocation(line: 268, column: 14, scope: !703)
!728 = !DILocation(line: 268, column: 5, scope: !703)
!729 = !DILocalVariable(name: "x", scope: !730, file: !103, line: 269, type: !6)
!730 = distinct !DILexicalBlock(scope: !670, file: !103, line: 268, column: 24)
!731 = !DILocation(line: 269, column: 27, scope: !730)
!732 = !DILocation(line: 269, column: 49, scope: !730)
!733 = !DILocation(line: 269, column: 30, scope: !730)
!734 = !DILocation(line: 270, column: 30, scope: !730)
!735 = !DILocation(line: 270, column: 31, scope: !730)
!736 = !DILocation(line: 270, column: 35, scope: !730)
!737 = !DILocation(line: 270, column: 51, scope: !730)
!738 = !DILocation(line: 270, column: 52, scope: !730)
!739 = !DILocation(line: 270, column: 48, scope: !730)
!740 = !DILocation(line: 270, column: 23, scope: !730)
!741 = !DILocation(line: 270, column: 9, scope: !730)
!742 = !DILocation(line: 270, column: 26, scope: !730)
!743 = !DILocation(line: 271, column: 10, scope: !730)
!744 = !DILocation(line: 272, column: 10, scope: !730)
!745 = !DILocation(line: 268, column: 5, scope: !715)
!746 = distinct !{!746, !724}
!747 = !DILocation(line: 274, column: 9, scope: !748)
!748 = distinct !DILexicalBlock(scope: !670, file: !103, line: 274, column: 9)
!749 = !DILocation(line: 274, column: 13, scope: !748)
!750 = !DILocation(line: 274, column: 11, scope: !748)
!751 = !DILocation(line: 274, column: 9, scope: !670)
!752 = !DILocalVariable(name: "x", scope: !753, file: !103, line: 275, type: !12)
!753 = distinct !DILexicalBlock(scope: !748, file: !103, line: 274, column: 18)
!754 = !DILocation(line: 275, column: 27, scope: !753)
!755 = !DILocation(line: 275, column: 49, scope: !753)
!756 = !DILocation(line: 275, column: 30, scope: !753)
!757 = !DILocation(line: 276, column: 30, scope: !753)
!758 = !DILocation(line: 276, column: 31, scope: !753)
!759 = !DILocation(line: 276, column: 35, scope: !753)
!760 = !DILocation(line: 276, column: 47, scope: !753)
!761 = !DILocation(line: 276, column: 48, scope: !753)
!762 = !DILocation(line: 276, column: 44, scope: !753)
!763 = !DILocation(line: 276, column: 28, scope: !753)
!764 = !DILocation(line: 276, column: 23, scope: !753)
!765 = !DILocation(line: 276, column: 9, scope: !753)
!766 = !DILocation(line: 276, column: 26, scope: !753)
!767 = !DILocation(line: 277, column: 5, scope: !753)
!768 = !DILocation(line: 278, column: 1, scope: !670)
!769 = distinct !DISubprogram(name: "rgb24tobgr16_mmx", scope: !103, file: !103, line: 490, type: !180, isLocal: true, isDefinition: true, scopeLine: 491, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!770 = !DILocalVariable(name: "src", arg: 1, scope: !769, file: !103, line: 490, type: !182)
!771 = !DILocation(line: 490, column: 52, scope: !769)
!772 = !DILocalVariable(name: "dst", arg: 2, scope: !769, file: !103, line: 490, type: !15)
!773 = !DILocation(line: 490, column: 66, scope: !769)
!774 = !DILocalVariable(name: "src_size", arg: 3, scope: !769, file: !103, line: 490, type: !72)
!775 = !DILocation(line: 490, column: 75, scope: !769)
!776 = !DILocalVariable(name: "s", scope: !769, file: !103, line: 492, type: !182)
!777 = !DILocation(line: 492, column: 20, scope: !769)
!778 = !DILocation(line: 492, column: 24, scope: !769)
!779 = !DILocalVariable(name: "end", scope: !769, file: !103, line: 493, type: !182)
!780 = !DILocation(line: 493, column: 20, scope: !769)
!781 = !DILocalVariable(name: "mm_end", scope: !769, file: !103, line: 494, type: !182)
!782 = !DILocation(line: 494, column: 20, scope: !769)
!783 = !DILocalVariable(name: "d", scope: !769, file: !103, line: 495, type: !14)
!784 = !DILocation(line: 495, column: 15, scope: !769)
!785 = !DILocation(line: 495, column: 31, scope: !769)
!786 = !DILocation(line: 495, column: 19, scope: !769)
!787 = !DILocation(line: 496, column: 11, scope: !769)
!788 = !DILocation(line: 496, column: 15, scope: !769)
!789 = !DILocation(line: 496, column: 13, scope: !769)
!790 = !DILocation(line: 496, column: 9, scope: !769)
!791 = !DILocation(line: 497, column: 45, scope: !769)
!792 = !DILocation(line: 497, column: 5, scope: !769)
!793 = !{i32 170293}
!794 = !DILocation(line: 498, column: 5, scope: !769)
!795 = !{i32 170362, i32 170392, i32 170434}
!796 = !DILocation(line: 502, column: 14, scope: !769)
!797 = !DILocation(line: 502, column: 18, scope: !769)
!798 = !DILocation(line: 502, column: 12, scope: !769)
!799 = !DILocation(line: 503, column: 5, scope: !769)
!800 = !DILocation(line: 503, column: 12, scope: !801)
!801 = !DILexicalBlockFile(scope: !769, file: !103, discriminator: 1)
!802 = !DILocation(line: 503, column: 16, scope: !801)
!803 = !DILocation(line: 503, column: 14, scope: !801)
!804 = !DILocation(line: 503, column: 5, scope: !801)
!805 = !DILocation(line: 533, column: 19, scope: !806)
!806 = distinct !DILexicalBlock(scope: !769, file: !103, line: 503, column: 24)
!807 = !DILocation(line: 533, column: 26, scope: !806)
!808 = !DILocation(line: 504, column: 9, scope: !806)
!809 = !{i32 170570, i32 170600, i32 170646, i32 170692, i32 170738, i32 170784, i32 170830, i32 170876, i32 170922, i32 170968, i32 171014, i32 171060, i32 171106, i32 171152, i32 171198, i32 171244, i32 171290, i32 171336, i32 171382, i32 171428, i32 171474, i32 171520, i32 171566, i32 171612, i32 171658, i32 171704, i32 171750, i32 171796, i32 171842}
!810 = !DILocation(line: 534, column: 11, scope: !806)
!811 = !DILocation(line: 535, column: 11, scope: !806)
!812 = !DILocation(line: 503, column: 5, scope: !813)
!813 = !DILexicalBlockFile(scope: !769, file: !103, discriminator: 2)
!814 = distinct !{!814, !799}
!815 = !DILocation(line: 537, column: 5, scope: !769)
!816 = !{i32 171962}
!817 = !DILocation(line: 538, column: 5, scope: !769)
!818 = !{i32 172005}
!819 = !DILocation(line: 539, column: 5, scope: !769)
!820 = !DILocation(line: 539, column: 12, scope: !801)
!821 = !DILocation(line: 539, column: 16, scope: !801)
!822 = !DILocation(line: 539, column: 14, scope: !801)
!823 = !DILocation(line: 539, column: 5, scope: !801)
!824 = !DILocalVariable(name: "b", scope: !825, file: !103, line: 540, type: !826)
!825 = distinct !DILexicalBlock(scope: !769, file: !103, line: 539, column: 21)
!826 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !72)
!827 = !DILocation(line: 540, column: 19, scope: !825)
!828 = !DILocation(line: 540, column: 25, scope: !825)
!829 = !DILocation(line: 540, column: 23, scope: !825)
!830 = !DILocalVariable(name: "g", scope: !825, file: !103, line: 541, type: !826)
!831 = !DILocation(line: 541, column: 19, scope: !825)
!832 = !DILocation(line: 541, column: 25, scope: !825)
!833 = !DILocation(line: 541, column: 23, scope: !825)
!834 = !DILocalVariable(name: "r", scope: !825, file: !103, line: 542, type: !826)
!835 = !DILocation(line: 542, column: 19, scope: !825)
!836 = !DILocation(line: 542, column: 25, scope: !825)
!837 = !DILocation(line: 542, column: 23, scope: !825)
!838 = !DILocation(line: 543, column: 17, scope: !825)
!839 = !DILocation(line: 543, column: 18, scope: !825)
!840 = !DILocation(line: 543, column: 27, scope: !825)
!841 = !DILocation(line: 543, column: 28, scope: !825)
!842 = !DILocation(line: 543, column: 34, scope: !825)
!843 = !DILocation(line: 543, column: 23, scope: !825)
!844 = !DILocation(line: 543, column: 43, scope: !825)
!845 = !DILocation(line: 543, column: 44, scope: !825)
!846 = !DILocation(line: 543, column: 50, scope: !825)
!847 = !DILocation(line: 543, column: 39, scope: !825)
!848 = !DILocation(line: 543, column: 16, scope: !825)
!849 = !DILocation(line: 543, column: 11, scope: !825)
!850 = !DILocation(line: 543, column: 14, scope: !825)
!851 = !DILocation(line: 539, column: 5, scope: !813)
!852 = distinct !{!852, !819}
!853 = !DILocation(line: 545, column: 1, scope: !769)
!854 = distinct !DISubprogram(name: "rgb24tobgr15_mmx", scope: !103, file: !103, line: 604, type: !180, isLocal: true, isDefinition: true, scopeLine: 605, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!855 = !DILocalVariable(name: "src", arg: 1, scope: !854, file: !103, line: 604, type: !182)
!856 = !DILocation(line: 604, column: 52, scope: !854)
!857 = !DILocalVariable(name: "dst", arg: 2, scope: !854, file: !103, line: 604, type: !15)
!858 = !DILocation(line: 604, column: 66, scope: !854)
!859 = !DILocalVariable(name: "src_size", arg: 3, scope: !854, file: !103, line: 604, type: !72)
!860 = !DILocation(line: 604, column: 75, scope: !854)
!861 = !DILocalVariable(name: "s", scope: !854, file: !103, line: 606, type: !182)
!862 = !DILocation(line: 606, column: 20, scope: !854)
!863 = !DILocation(line: 606, column: 24, scope: !854)
!864 = !DILocalVariable(name: "end", scope: !854, file: !103, line: 607, type: !182)
!865 = !DILocation(line: 607, column: 20, scope: !854)
!866 = !DILocalVariable(name: "mm_end", scope: !854, file: !103, line: 608, type: !182)
!867 = !DILocation(line: 608, column: 20, scope: !854)
!868 = !DILocalVariable(name: "d", scope: !854, file: !103, line: 609, type: !14)
!869 = !DILocation(line: 609, column: 15, scope: !854)
!870 = !DILocation(line: 609, column: 31, scope: !854)
!871 = !DILocation(line: 609, column: 19, scope: !854)
!872 = !DILocation(line: 610, column: 11, scope: !854)
!873 = !DILocation(line: 610, column: 15, scope: !854)
!874 = !DILocation(line: 610, column: 13, scope: !854)
!875 = !DILocation(line: 610, column: 9, scope: !854)
!876 = !DILocation(line: 611, column: 45, scope: !854)
!877 = !DILocation(line: 611, column: 5, scope: !854)
!878 = !{i32 174584}
!879 = !DILocation(line: 612, column: 5, scope: !854)
!880 = !{i32 174653, i32 174683, i32 174725}
!881 = !DILocation(line: 616, column: 14, scope: !854)
!882 = !DILocation(line: 616, column: 18, scope: !854)
!883 = !DILocation(line: 616, column: 12, scope: !854)
!884 = !DILocation(line: 617, column: 5, scope: !854)
!885 = !DILocation(line: 617, column: 12, scope: !886)
!886 = !DILexicalBlockFile(scope: !854, file: !103, discriminator: 1)
!887 = !DILocation(line: 617, column: 16, scope: !886)
!888 = !DILocation(line: 617, column: 14, scope: !886)
!889 = !DILocation(line: 617, column: 5, scope: !886)
!890 = !DILocation(line: 647, column: 19, scope: !891)
!891 = distinct !DILexicalBlock(scope: !854, file: !103, line: 617, column: 24)
!892 = !DILocation(line: 647, column: 26, scope: !891)
!893 = !DILocation(line: 618, column: 9, scope: !891)
!894 = !{i32 174861, i32 174891, i32 174937, i32 174983, i32 175029, i32 175075, i32 175121, i32 175167, i32 175213, i32 175259, i32 175305, i32 175351, i32 175397, i32 175443, i32 175489, i32 175535, i32 175581, i32 175627, i32 175673, i32 175719, i32 175765, i32 175811, i32 175857, i32 175903, i32 175949, i32 175995, i32 176041, i32 176087, i32 176133}
!895 = !DILocation(line: 648, column: 11, scope: !891)
!896 = !DILocation(line: 649, column: 11, scope: !891)
!897 = !DILocation(line: 617, column: 5, scope: !898)
!898 = !DILexicalBlockFile(scope: !854, file: !103, discriminator: 2)
!899 = distinct !{!899, !884}
!900 = !DILocation(line: 651, column: 5, scope: !854)
!901 = !{i32 176253}
!902 = !DILocation(line: 652, column: 5, scope: !854)
!903 = !{i32 176296}
!904 = !DILocation(line: 653, column: 5, scope: !854)
!905 = !DILocation(line: 653, column: 12, scope: !886)
!906 = !DILocation(line: 653, column: 16, scope: !886)
!907 = !DILocation(line: 653, column: 14, scope: !886)
!908 = !DILocation(line: 653, column: 5, scope: !886)
!909 = !DILocalVariable(name: "b", scope: !910, file: !103, line: 654, type: !826)
!910 = distinct !DILexicalBlock(scope: !854, file: !103, line: 653, column: 21)
!911 = !DILocation(line: 654, column: 19, scope: !910)
!912 = !DILocation(line: 654, column: 25, scope: !910)
!913 = !DILocation(line: 654, column: 23, scope: !910)
!914 = !DILocalVariable(name: "g", scope: !910, file: !103, line: 655, type: !826)
!915 = !DILocation(line: 655, column: 19, scope: !910)
!916 = !DILocation(line: 655, column: 25, scope: !910)
!917 = !DILocation(line: 655, column: 23, scope: !910)
!918 = !DILocalVariable(name: "r", scope: !910, file: !103, line: 656, type: !826)
!919 = !DILocation(line: 656, column: 19, scope: !910)
!920 = !DILocation(line: 656, column: 25, scope: !910)
!921 = !DILocation(line: 656, column: 23, scope: !910)
!922 = !DILocation(line: 657, column: 17, scope: !910)
!923 = !DILocation(line: 657, column: 18, scope: !910)
!924 = !DILocation(line: 657, column: 27, scope: !910)
!925 = !DILocation(line: 657, column: 28, scope: !910)
!926 = !DILocation(line: 657, column: 34, scope: !910)
!927 = !DILocation(line: 657, column: 23, scope: !910)
!928 = !DILocation(line: 657, column: 43, scope: !910)
!929 = !DILocation(line: 657, column: 44, scope: !910)
!930 = !DILocation(line: 657, column: 50, scope: !910)
!931 = !DILocation(line: 657, column: 39, scope: !910)
!932 = !DILocation(line: 657, column: 16, scope: !910)
!933 = !DILocation(line: 657, column: 11, scope: !910)
!934 = !DILocation(line: 657, column: 14, scope: !910)
!935 = !DILocation(line: 653, column: 5, scope: !898)
!936 = distinct !{!936, !904}
!937 = !DILocation(line: 659, column: 1, scope: !854)
!938 = distinct !DISubprogram(name: "rgb24tobgr32_mmx", scope: !103, file: !103, line: 68, type: !180, isLocal: true, isDefinition: true, scopeLine: 69, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!939 = !DILocalVariable(name: "src", arg: 1, scope: !938, file: !103, line: 68, type: !182)
!940 = !DILocation(line: 68, column: 52, scope: !938)
!941 = !DILocalVariable(name: "dst", arg: 2, scope: !938, file: !103, line: 68, type: !15)
!942 = !DILocation(line: 68, column: 66, scope: !938)
!943 = !DILocalVariable(name: "src_size", arg: 3, scope: !938, file: !103, line: 68, type: !72)
!944 = !DILocation(line: 68, column: 75, scope: !938)
!945 = !DILocalVariable(name: "dest", scope: !938, file: !103, line: 70, type: !15)
!946 = !DILocation(line: 70, column: 14, scope: !938)
!947 = !DILocation(line: 70, column: 21, scope: !938)
!948 = !DILocalVariable(name: "s", scope: !938, file: !103, line: 71, type: !182)
!949 = !DILocation(line: 71, column: 20, scope: !938)
!950 = !DILocation(line: 71, column: 24, scope: !938)
!951 = !DILocalVariable(name: "end", scope: !938, file: !103, line: 72, type: !182)
!952 = !DILocation(line: 72, column: 20, scope: !938)
!953 = !DILocalVariable(name: "mm_end", scope: !938, file: !103, line: 73, type: !182)
!954 = !DILocation(line: 73, column: 20, scope: !938)
!955 = !DILocation(line: 74, column: 11, scope: !938)
!956 = !DILocation(line: 74, column: 15, scope: !938)
!957 = !DILocation(line: 74, column: 13, scope: !938)
!958 = !DILocation(line: 74, column: 9, scope: !938)
!959 = !DILocation(line: 75, column: 45, scope: !938)
!960 = !DILocation(line: 75, column: 5, scope: !938)
!961 = !{i32 155681}
!962 = !DILocation(line: 76, column: 14, scope: !938)
!963 = !DILocation(line: 76, column: 18, scope: !938)
!964 = !DILocation(line: 76, column: 12, scope: !938)
!965 = !DILocation(line: 77, column: 5, scope: !938)
!966 = !{i32 155762}
!967 = !DILocation(line: 78, column: 5, scope: !938)
!968 = !DILocation(line: 78, column: 12, scope: !969)
!969 = !DILexicalBlockFile(scope: !938, file: !103, discriminator: 1)
!970 = !DILocation(line: 78, column: 16, scope: !969)
!971 = !DILocation(line: 78, column: 14, scope: !969)
!972 = !DILocation(line: 78, column: 5, scope: !969)
!973 = !DILocation(line: 97, column: 20, scope: !974)
!974 = distinct !DILexicalBlock(scope: !938, file: !103, line: 78, column: 24)
!975 = !DILocation(line: 97, column: 31, scope: !974)
!976 = !DILocation(line: 79, column: 9, scope: !974)
!977 = !{i32 155874, i32 155904, i32 155950, i32 155996, i32 156042, i32 156088, i32 156134, i32 156180, i32 156226, i32 156272, i32 156318, i32 156364, i32 156410, i32 156456, i32 156502, i32 156548, i32 156594}
!978 = !DILocation(line: 99, column: 14, scope: !974)
!979 = !DILocation(line: 100, column: 11, scope: !974)
!980 = !DILocation(line: 78, column: 5, scope: !981)
!981 = !DILexicalBlockFile(scope: !938, file: !103, discriminator: 2)
!982 = distinct !{!982, !967}
!983 = !DILocation(line: 102, column: 5, scope: !938)
!984 = !{i32 156758}
!985 = !DILocation(line: 103, column: 5, scope: !938)
!986 = !{i32 156801}
!987 = !DILocation(line: 104, column: 5, scope: !938)
!988 = !DILocation(line: 104, column: 12, scope: !969)
!989 = !DILocation(line: 104, column: 16, scope: !969)
!990 = !DILocation(line: 104, column: 14, scope: !969)
!991 = !DILocation(line: 104, column: 5, scope: !969)
!992 = !DILocation(line: 105, column: 21, scope: !993)
!993 = distinct !DILexicalBlock(scope: !938, file: !103, line: 104, column: 21)
!994 = !DILocation(line: 105, column: 19, scope: !993)
!995 = !DILocation(line: 105, column: 14, scope: !993)
!996 = !DILocation(line: 105, column: 17, scope: !993)
!997 = !DILocation(line: 106, column: 21, scope: !993)
!998 = !DILocation(line: 106, column: 19, scope: !993)
!999 = !DILocation(line: 106, column: 14, scope: !993)
!1000 = !DILocation(line: 106, column: 17, scope: !993)
!1001 = !DILocation(line: 107, column: 21, scope: !993)
!1002 = !DILocation(line: 107, column: 19, scope: !993)
!1003 = !DILocation(line: 107, column: 14, scope: !993)
!1004 = !DILocation(line: 107, column: 17, scope: !993)
!1005 = !DILocation(line: 108, column: 14, scope: !993)
!1006 = !DILocation(line: 108, column: 17, scope: !993)
!1007 = !DILocation(line: 104, column: 5, scope: !981)
!1008 = distinct !{!1008, !987}
!1009 = !DILocation(line: 110, column: 1, scope: !938)
!1010 = distinct !DISubprogram(name: "rgb32to16_mmx", scope: !103, file: !103, line: 280, type: !180, isLocal: true, isDefinition: true, scopeLine: 281, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1011 = !DILocalVariable(name: "src", arg: 1, scope: !1010, file: !103, line: 280, type: !182)
!1012 = !DILocation(line: 280, column: 49, scope: !1010)
!1013 = !DILocalVariable(name: "dst", arg: 2, scope: !1010, file: !103, line: 280, type: !15)
!1014 = !DILocation(line: 280, column: 63, scope: !1010)
!1015 = !DILocalVariable(name: "src_size", arg: 3, scope: !1010, file: !103, line: 280, type: !72)
!1016 = !DILocation(line: 280, column: 72, scope: !1010)
!1017 = !DILocalVariable(name: "s", scope: !1010, file: !103, line: 282, type: !182)
!1018 = !DILocation(line: 282, column: 20, scope: !1010)
!1019 = !DILocation(line: 282, column: 24, scope: !1010)
!1020 = !DILocalVariable(name: "end", scope: !1010, file: !103, line: 283, type: !182)
!1021 = !DILocation(line: 283, column: 20, scope: !1010)
!1022 = !DILocalVariable(name: "mm_end", scope: !1010, file: !103, line: 284, type: !182)
!1023 = !DILocation(line: 284, column: 20, scope: !1010)
!1024 = !DILocalVariable(name: "d", scope: !1010, file: !103, line: 285, type: !14)
!1025 = !DILocation(line: 285, column: 15, scope: !1010)
!1026 = !DILocation(line: 285, column: 31, scope: !1010)
!1027 = !DILocation(line: 285, column: 19, scope: !1010)
!1028 = !DILocation(line: 286, column: 11, scope: !1010)
!1029 = !DILocation(line: 286, column: 15, scope: !1010)
!1030 = !DILocation(line: 286, column: 13, scope: !1010)
!1031 = !DILocation(line: 286, column: 9, scope: !1010)
!1032 = !DILocation(line: 287, column: 14, scope: !1010)
!1033 = !DILocation(line: 287, column: 18, scope: !1010)
!1034 = !DILocation(line: 287, column: 12, scope: !1010)
!1035 = !DILocation(line: 288, column: 5, scope: !1010)
!1036 = !DILocation(line: 320, column: 16, scope: !1010)
!1037 = !{i32 162285, i32 162315, i32 162357, i32 162399, i32 162441, i32 162483, i32 162525, i32 162567, i32 162609, i32 162651, i32 162693, i32 162735, i32 162777, i32 162819, i32 162861, i32 162903, i32 162945, i32 162987, i32 163029, i32 163071, i32 163113, i32 163155, i32 163197, i32 163239, i32 163281, i32 163323, i32 163365, i32 163407, i32 163449, i32 163491, i32 163533}
!1038 = !DILocation(line: 322, column: 5, scope: !1010)
!1039 = !{i32 163666}
!1040 = !DILocation(line: 323, column: 5, scope: !1010)
!1041 = !{i32 163709}
!1042 = !DILocation(line: 324, column: 5, scope: !1010)
!1043 = !DILocation(line: 324, column: 12, scope: !1044)
!1044 = !DILexicalBlockFile(scope: !1010, file: !103, discriminator: 1)
!1045 = !DILocation(line: 324, column: 16, scope: !1044)
!1046 = !DILocation(line: 324, column: 14, scope: !1044)
!1047 = !DILocation(line: 324, column: 5, scope: !1044)
!1048 = !DILocalVariable(name: "rgb", scope: !1049, file: !103, line: 325, type: !72)
!1049 = distinct !DILexicalBlock(scope: !1010, file: !103, line: 324, column: 21)
!1050 = !DILocation(line: 325, column: 22, scope: !1049)
!1051 = !DILocation(line: 325, column: 46, scope: !1049)
!1052 = !DILocation(line: 325, column: 28, scope: !1049)
!1053 = !DILocation(line: 325, column: 51, scope: !1049)
!1054 = !DILocation(line: 326, column: 18, scope: !1049)
!1055 = !DILocation(line: 326, column: 21, scope: !1049)
!1056 = !DILocation(line: 326, column: 27, scope: !1049)
!1057 = !DILocation(line: 326, column: 36, scope: !1049)
!1058 = !DILocation(line: 326, column: 39, scope: !1049)
!1059 = !DILocation(line: 326, column: 47, scope: !1049)
!1060 = !DILocation(line: 326, column: 32, scope: !1049)
!1061 = !DILocation(line: 326, column: 56, scope: !1049)
!1062 = !DILocation(line: 326, column: 59, scope: !1049)
!1063 = !DILocation(line: 326, column: 69, scope: !1049)
!1064 = !DILocation(line: 326, column: 52, scope: !1049)
!1065 = !DILocation(line: 326, column: 16, scope: !1049)
!1066 = !DILocation(line: 326, column: 11, scope: !1049)
!1067 = !DILocation(line: 326, column: 14, scope: !1049)
!1068 = !DILocation(line: 324, column: 5, scope: !1069)
!1069 = !DILexicalBlockFile(scope: !1010, file: !103, discriminator: 2)
!1070 = distinct !{!1070, !1042}
!1071 = !DILocation(line: 328, column: 1, scope: !1010)
!1072 = distinct !DISubprogram(name: "rgb32to15_mmx", scope: !103, file: !103, line: 385, type: !180, isLocal: true, isDefinition: true, scopeLine: 386, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1073 = !DILocalVariable(name: "src", arg: 1, scope: !1072, file: !103, line: 385, type: !182)
!1074 = !DILocation(line: 385, column: 49, scope: !1072)
!1075 = !DILocalVariable(name: "dst", arg: 2, scope: !1072, file: !103, line: 385, type: !15)
!1076 = !DILocation(line: 385, column: 63, scope: !1072)
!1077 = !DILocalVariable(name: "src_size", arg: 3, scope: !1072, file: !103, line: 385, type: !72)
!1078 = !DILocation(line: 385, column: 72, scope: !1072)
!1079 = !DILocalVariable(name: "s", scope: !1072, file: !103, line: 387, type: !182)
!1080 = !DILocation(line: 387, column: 20, scope: !1072)
!1081 = !DILocation(line: 387, column: 24, scope: !1072)
!1082 = !DILocalVariable(name: "end", scope: !1072, file: !103, line: 388, type: !182)
!1083 = !DILocation(line: 388, column: 20, scope: !1072)
!1084 = !DILocalVariable(name: "mm_end", scope: !1072, file: !103, line: 389, type: !182)
!1085 = !DILocation(line: 389, column: 20, scope: !1072)
!1086 = !DILocalVariable(name: "d", scope: !1072, file: !103, line: 390, type: !14)
!1087 = !DILocation(line: 390, column: 15, scope: !1072)
!1088 = !DILocation(line: 390, column: 31, scope: !1072)
!1089 = !DILocation(line: 390, column: 19, scope: !1072)
!1090 = !DILocation(line: 391, column: 11, scope: !1072)
!1091 = !DILocation(line: 391, column: 15, scope: !1072)
!1092 = !DILocation(line: 391, column: 13, scope: !1072)
!1093 = !DILocation(line: 391, column: 9, scope: !1072)
!1094 = !DILocation(line: 392, column: 14, scope: !1072)
!1095 = !DILocation(line: 392, column: 18, scope: !1072)
!1096 = !DILocation(line: 392, column: 12, scope: !1072)
!1097 = !DILocation(line: 393, column: 5, scope: !1072)
!1098 = !DILocation(line: 425, column: 16, scope: !1072)
!1099 = !{i32 166304, i32 166334, i32 166376, i32 166418, i32 166460, i32 166502, i32 166544, i32 166586, i32 166628, i32 166670, i32 166712, i32 166754, i32 166796, i32 166838, i32 166880, i32 166922, i32 166964, i32 167006, i32 167048, i32 167090, i32 167132, i32 167174, i32 167216, i32 167258, i32 167300, i32 167342, i32 167384, i32 167426, i32 167468, i32 167510, i32 167552}
!1100 = !DILocation(line: 427, column: 5, scope: !1072)
!1101 = !{i32 167685}
!1102 = !DILocation(line: 428, column: 5, scope: !1072)
!1103 = !{i32 167728}
!1104 = !DILocation(line: 429, column: 5, scope: !1072)
!1105 = !DILocation(line: 429, column: 12, scope: !1106)
!1106 = !DILexicalBlockFile(scope: !1072, file: !103, discriminator: 1)
!1107 = !DILocation(line: 429, column: 16, scope: !1106)
!1108 = !DILocation(line: 429, column: 14, scope: !1106)
!1109 = !DILocation(line: 429, column: 5, scope: !1106)
!1110 = !DILocalVariable(name: "rgb", scope: !1111, file: !103, line: 430, type: !72)
!1111 = distinct !DILexicalBlock(scope: !1072, file: !103, line: 429, column: 21)
!1112 = !DILocation(line: 430, column: 22, scope: !1111)
!1113 = !DILocation(line: 430, column: 46, scope: !1111)
!1114 = !DILocation(line: 430, column: 28, scope: !1111)
!1115 = !DILocation(line: 430, column: 51, scope: !1111)
!1116 = !DILocation(line: 431, column: 18, scope: !1111)
!1117 = !DILocation(line: 431, column: 21, scope: !1111)
!1118 = !DILocation(line: 431, column: 27, scope: !1111)
!1119 = !DILocation(line: 431, column: 36, scope: !1111)
!1120 = !DILocation(line: 431, column: 39, scope: !1111)
!1121 = !DILocation(line: 431, column: 47, scope: !1111)
!1122 = !DILocation(line: 431, column: 32, scope: !1111)
!1123 = !DILocation(line: 431, column: 56, scope: !1111)
!1124 = !DILocation(line: 431, column: 59, scope: !1111)
!1125 = !DILocation(line: 431, column: 69, scope: !1111)
!1126 = !DILocation(line: 431, column: 52, scope: !1111)
!1127 = !DILocation(line: 431, column: 16, scope: !1111)
!1128 = !DILocation(line: 431, column: 11, scope: !1111)
!1129 = !DILocation(line: 431, column: 14, scope: !1111)
!1130 = !DILocation(line: 429, column: 5, scope: !1131)
!1131 = !DILexicalBlockFile(scope: !1072, file: !103, discriminator: 2)
!1132 = distinct !{!1132, !1104}
!1133 = !DILocation(line: 433, column: 1, scope: !1072)
!1134 = distinct !DISubprogram(name: "rgb32tobgr24_mmx", scope: !103, file: !103, line: 146, type: !180, isLocal: true, isDefinition: true, scopeLine: 147, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1135 = !DILocalVariable(name: "src", arg: 1, scope: !1134, file: !103, line: 146, type: !182)
!1136 = !DILocation(line: 146, column: 52, scope: !1134)
!1137 = !DILocalVariable(name: "dst", arg: 2, scope: !1134, file: !103, line: 146, type: !15)
!1138 = !DILocation(line: 146, column: 66, scope: !1134)
!1139 = !DILocalVariable(name: "src_size", arg: 3, scope: !1134, file: !103, line: 146, type: !72)
!1140 = !DILocation(line: 146, column: 75, scope: !1134)
!1141 = !DILocalVariable(name: "dest", scope: !1134, file: !103, line: 148, type: !15)
!1142 = !DILocation(line: 148, column: 14, scope: !1134)
!1143 = !DILocation(line: 148, column: 21, scope: !1134)
!1144 = !DILocalVariable(name: "s", scope: !1134, file: !103, line: 149, type: !182)
!1145 = !DILocation(line: 149, column: 20, scope: !1134)
!1146 = !DILocation(line: 149, column: 24, scope: !1134)
!1147 = !DILocalVariable(name: "end", scope: !1134, file: !103, line: 150, type: !182)
!1148 = !DILocation(line: 150, column: 20, scope: !1134)
!1149 = !DILocalVariable(name: "mm_end", scope: !1134, file: !103, line: 151, type: !182)
!1150 = !DILocation(line: 151, column: 20, scope: !1134)
!1151 = !DILocation(line: 152, column: 11, scope: !1134)
!1152 = !DILocation(line: 152, column: 15, scope: !1134)
!1153 = !DILocation(line: 152, column: 13, scope: !1134)
!1154 = !DILocation(line: 152, column: 9, scope: !1134)
!1155 = !DILocation(line: 153, column: 45, scope: !1134)
!1156 = !DILocation(line: 153, column: 5, scope: !1134)
!1157 = !{i32 157223}
!1158 = !DILocation(line: 154, column: 14, scope: !1134)
!1159 = !DILocation(line: 154, column: 18, scope: !1134)
!1160 = !DILocation(line: 154, column: 12, scope: !1134)
!1161 = !DILocation(line: 155, column: 5, scope: !1134)
!1162 = !DILocation(line: 155, column: 12, scope: !1163)
!1163 = !DILexicalBlockFile(scope: !1134, file: !103, discriminator: 1)
!1164 = !DILocation(line: 155, column: 16, scope: !1163)
!1165 = !DILocation(line: 155, column: 14, scope: !1163)
!1166 = !DILocation(line: 155, column: 5, scope: !1163)
!1167 = !DILocation(line: 167, column: 20, scope: !1168)
!1168 = distinct !DILexicalBlock(scope: !1134, file: !103, line: 155, column: 24)
!1169 = !DILocation(line: 167, column: 31, scope: !1168)
!1170 = !DILocation(line: 156, column: 9, scope: !1168)
!1171 = !{i32 157346, i32 157376, i32 157422, i32 157468, i32 157514, i32 157560, i32 157606, i32 157652, i32 157698, i32 157744, i32 157790, i32 157824, i32 157858, i32 157892, i32 157925, i32 157958, i32 157991, i32 158024, i32 158057, i32 158090, i32 158123, i32 158156, i32 158190, i32 158224, i32 158258, i32 158292, i32 158326, i32 158360, i32 158394, i32 158428, i32 158462, i32 158496, i32 158530, i32 158564, i32 158598, i32 158632, i32 158667, i32 158702}
!1172 = !DILocation(line: 170, column: 14, scope: !1168)
!1173 = !DILocation(line: 171, column: 11, scope: !1168)
!1174 = !DILocation(line: 155, column: 5, scope: !1175)
!1175 = !DILexicalBlockFile(scope: !1134, file: !103, discriminator: 2)
!1176 = distinct !{!1176, !1161}
!1177 = !DILocation(line: 173, column: 5, scope: !1134)
!1178 = !{i32 158868}
!1179 = !DILocation(line: 174, column: 5, scope: !1134)
!1180 = !{i32 158911}
!1181 = !DILocation(line: 175, column: 5, scope: !1134)
!1182 = !DILocation(line: 175, column: 12, scope: !1163)
!1183 = !DILocation(line: 175, column: 16, scope: !1163)
!1184 = !DILocation(line: 175, column: 14, scope: !1163)
!1185 = !DILocation(line: 175, column: 5, scope: !1163)
!1186 = !DILocation(line: 176, column: 21, scope: !1187)
!1187 = distinct !DILexicalBlock(scope: !1134, file: !103, line: 175, column: 21)
!1188 = !DILocation(line: 176, column: 19, scope: !1187)
!1189 = !DILocation(line: 176, column: 14, scope: !1187)
!1190 = !DILocation(line: 176, column: 17, scope: !1187)
!1191 = !DILocation(line: 177, column: 21, scope: !1187)
!1192 = !DILocation(line: 177, column: 19, scope: !1187)
!1193 = !DILocation(line: 177, column: 14, scope: !1187)
!1194 = !DILocation(line: 177, column: 17, scope: !1187)
!1195 = !DILocation(line: 178, column: 21, scope: !1187)
!1196 = !DILocation(line: 178, column: 19, scope: !1187)
!1197 = !DILocation(line: 178, column: 14, scope: !1187)
!1198 = !DILocation(line: 178, column: 17, scope: !1187)
!1199 = !DILocation(line: 179, column: 10, scope: !1187)
!1200 = !DILocation(line: 175, column: 5, scope: !1175)
!1201 = distinct !{!1201, !1181}
!1202 = !DILocation(line: 181, column: 1, scope: !1134)
!1203 = distinct !DISubprogram(name: "rgb24to15_mmx", scope: !103, file: !103, line: 661, type: !180, isLocal: true, isDefinition: true, scopeLine: 662, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1204 = !DILocalVariable(name: "src", arg: 1, scope: !1203, file: !103, line: 661, type: !182)
!1205 = !DILocation(line: 661, column: 49, scope: !1203)
!1206 = !DILocalVariable(name: "dst", arg: 2, scope: !1203, file: !103, line: 661, type: !15)
!1207 = !DILocation(line: 661, column: 63, scope: !1203)
!1208 = !DILocalVariable(name: "src_size", arg: 3, scope: !1203, file: !103, line: 661, type: !72)
!1209 = !DILocation(line: 661, column: 72, scope: !1203)
!1210 = !DILocalVariable(name: "s", scope: !1203, file: !103, line: 663, type: !182)
!1211 = !DILocation(line: 663, column: 20, scope: !1203)
!1212 = !DILocation(line: 663, column: 24, scope: !1203)
!1213 = !DILocalVariable(name: "end", scope: !1203, file: !103, line: 664, type: !182)
!1214 = !DILocation(line: 664, column: 20, scope: !1203)
!1215 = !DILocalVariable(name: "mm_end", scope: !1203, file: !103, line: 665, type: !182)
!1216 = !DILocation(line: 665, column: 20, scope: !1203)
!1217 = !DILocalVariable(name: "d", scope: !1203, file: !103, line: 666, type: !14)
!1218 = !DILocation(line: 666, column: 15, scope: !1203)
!1219 = !DILocation(line: 666, column: 31, scope: !1203)
!1220 = !DILocation(line: 666, column: 19, scope: !1203)
!1221 = !DILocation(line: 667, column: 11, scope: !1203)
!1222 = !DILocation(line: 667, column: 15, scope: !1203)
!1223 = !DILocation(line: 667, column: 13, scope: !1203)
!1224 = !DILocation(line: 667, column: 9, scope: !1203)
!1225 = !DILocation(line: 668, column: 45, scope: !1203)
!1226 = !DILocation(line: 668, column: 5, scope: !1203)
!1227 = !{i32 176728}
!1228 = !DILocation(line: 669, column: 5, scope: !1203)
!1229 = !{i32 176797, i32 176827, i32 176869}
!1230 = !DILocation(line: 673, column: 14, scope: !1203)
!1231 = !DILocation(line: 673, column: 18, scope: !1203)
!1232 = !DILocation(line: 673, column: 12, scope: !1203)
!1233 = !DILocation(line: 674, column: 5, scope: !1203)
!1234 = !DILocation(line: 674, column: 12, scope: !1235)
!1235 = !DILexicalBlockFile(scope: !1203, file: !103, discriminator: 1)
!1236 = !DILocation(line: 674, column: 16, scope: !1235)
!1237 = !DILocation(line: 674, column: 14, scope: !1235)
!1238 = !DILocation(line: 674, column: 5, scope: !1235)
!1239 = !DILocation(line: 704, column: 19, scope: !1240)
!1240 = distinct !DILexicalBlock(scope: !1203, file: !103, line: 674, column: 24)
!1241 = !DILocation(line: 704, column: 26, scope: !1240)
!1242 = !DILocation(line: 675, column: 9, scope: !1240)
!1243 = !{i32 177005, i32 177035, i32 177081, i32 177127, i32 177173, i32 177219, i32 177265, i32 177311, i32 177357, i32 177403, i32 177449, i32 177495, i32 177541, i32 177587, i32 177633, i32 177679, i32 177725, i32 177771, i32 177817, i32 177863, i32 177909, i32 177955, i32 178001, i32 178047, i32 178093, i32 178139, i32 178185, i32 178231, i32 178277}
!1244 = !DILocation(line: 705, column: 11, scope: !1240)
!1245 = !DILocation(line: 706, column: 11, scope: !1240)
!1246 = !DILocation(line: 674, column: 5, scope: !1247)
!1247 = !DILexicalBlockFile(scope: !1203, file: !103, discriminator: 2)
!1248 = distinct !{!1248, !1233}
!1249 = !DILocation(line: 708, column: 5, scope: !1203)
!1250 = !{i32 178397}
!1251 = !DILocation(line: 709, column: 5, scope: !1203)
!1252 = !{i32 178440}
!1253 = !DILocation(line: 710, column: 5, scope: !1203)
!1254 = !DILocation(line: 710, column: 12, scope: !1235)
!1255 = !DILocation(line: 710, column: 16, scope: !1235)
!1256 = !DILocation(line: 710, column: 14, scope: !1235)
!1257 = !DILocation(line: 710, column: 5, scope: !1235)
!1258 = !DILocalVariable(name: "r", scope: !1259, file: !103, line: 711, type: !826)
!1259 = distinct !DILexicalBlock(scope: !1203, file: !103, line: 710, column: 21)
!1260 = !DILocation(line: 711, column: 19, scope: !1259)
!1261 = !DILocation(line: 711, column: 25, scope: !1259)
!1262 = !DILocation(line: 711, column: 23, scope: !1259)
!1263 = !DILocalVariable(name: "g", scope: !1259, file: !103, line: 712, type: !826)
!1264 = !DILocation(line: 712, column: 19, scope: !1259)
!1265 = !DILocation(line: 712, column: 25, scope: !1259)
!1266 = !DILocation(line: 712, column: 23, scope: !1259)
!1267 = !DILocalVariable(name: "b", scope: !1259, file: !103, line: 713, type: !826)
!1268 = !DILocation(line: 713, column: 19, scope: !1259)
!1269 = !DILocation(line: 713, column: 25, scope: !1259)
!1270 = !DILocation(line: 713, column: 23, scope: !1259)
!1271 = !DILocation(line: 714, column: 17, scope: !1259)
!1272 = !DILocation(line: 714, column: 18, scope: !1259)
!1273 = !DILocation(line: 714, column: 27, scope: !1259)
!1274 = !DILocation(line: 714, column: 28, scope: !1259)
!1275 = !DILocation(line: 714, column: 34, scope: !1259)
!1276 = !DILocation(line: 714, column: 23, scope: !1259)
!1277 = !DILocation(line: 714, column: 43, scope: !1259)
!1278 = !DILocation(line: 714, column: 44, scope: !1259)
!1279 = !DILocation(line: 714, column: 50, scope: !1259)
!1280 = !DILocation(line: 714, column: 39, scope: !1259)
!1281 = !DILocation(line: 714, column: 16, scope: !1259)
!1282 = !DILocation(line: 714, column: 11, scope: !1259)
!1283 = !DILocation(line: 714, column: 14, scope: !1259)
!1284 = !DILocation(line: 710, column: 5, scope: !1247)
!1285 = distinct !{!1285, !1253}
!1286 = !DILocation(line: 716, column: 1, scope: !1203)
!1287 = distinct !DISubprogram(name: "rgb24to16_mmx", scope: !103, file: !103, line: 547, type: !180, isLocal: true, isDefinition: true, scopeLine: 548, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1288 = !DILocalVariable(name: "src", arg: 1, scope: !1287, file: !103, line: 547, type: !182)
!1289 = !DILocation(line: 547, column: 49, scope: !1287)
!1290 = !DILocalVariable(name: "dst", arg: 2, scope: !1287, file: !103, line: 547, type: !15)
!1291 = !DILocation(line: 547, column: 63, scope: !1287)
!1292 = !DILocalVariable(name: "src_size", arg: 3, scope: !1287, file: !103, line: 547, type: !72)
!1293 = !DILocation(line: 547, column: 72, scope: !1287)
!1294 = !DILocalVariable(name: "s", scope: !1287, file: !103, line: 549, type: !182)
!1295 = !DILocation(line: 549, column: 20, scope: !1287)
!1296 = !DILocation(line: 549, column: 24, scope: !1287)
!1297 = !DILocalVariable(name: "end", scope: !1287, file: !103, line: 550, type: !182)
!1298 = !DILocation(line: 550, column: 20, scope: !1287)
!1299 = !DILocalVariable(name: "mm_end", scope: !1287, file: !103, line: 551, type: !182)
!1300 = !DILocation(line: 551, column: 20, scope: !1287)
!1301 = !DILocalVariable(name: "d", scope: !1287, file: !103, line: 552, type: !14)
!1302 = !DILocation(line: 552, column: 15, scope: !1287)
!1303 = !DILocation(line: 552, column: 31, scope: !1287)
!1304 = !DILocation(line: 552, column: 19, scope: !1287)
!1305 = !DILocation(line: 553, column: 11, scope: !1287)
!1306 = !DILocation(line: 553, column: 15, scope: !1287)
!1307 = !DILocation(line: 553, column: 13, scope: !1287)
!1308 = !DILocation(line: 553, column: 9, scope: !1287)
!1309 = !DILocation(line: 554, column: 45, scope: !1287)
!1310 = !DILocation(line: 554, column: 5, scope: !1287)
!1311 = !{i32 172437}
!1312 = !DILocation(line: 555, column: 5, scope: !1287)
!1313 = !{i32 172506, i32 172536, i32 172578}
!1314 = !DILocation(line: 559, column: 14, scope: !1287)
!1315 = !DILocation(line: 559, column: 18, scope: !1287)
!1316 = !DILocation(line: 559, column: 12, scope: !1287)
!1317 = !DILocation(line: 560, column: 5, scope: !1287)
!1318 = !DILocation(line: 560, column: 12, scope: !1319)
!1319 = !DILexicalBlockFile(scope: !1287, file: !103, discriminator: 1)
!1320 = !DILocation(line: 560, column: 16, scope: !1319)
!1321 = !DILocation(line: 560, column: 14, scope: !1319)
!1322 = !DILocation(line: 560, column: 5, scope: !1319)
!1323 = !DILocation(line: 590, column: 19, scope: !1324)
!1324 = distinct !DILexicalBlock(scope: !1287, file: !103, line: 560, column: 24)
!1325 = !DILocation(line: 590, column: 26, scope: !1324)
!1326 = !DILocation(line: 561, column: 9, scope: !1324)
!1327 = !{i32 172714, i32 172744, i32 172790, i32 172836, i32 172882, i32 172928, i32 172974, i32 173020, i32 173066, i32 173112, i32 173158, i32 173204, i32 173250, i32 173296, i32 173342, i32 173388, i32 173434, i32 173480, i32 173526, i32 173572, i32 173618, i32 173664, i32 173710, i32 173756, i32 173802, i32 173848, i32 173894, i32 173940, i32 173986}
!1328 = !DILocation(line: 591, column: 11, scope: !1324)
!1329 = !DILocation(line: 592, column: 11, scope: !1324)
!1330 = !DILocation(line: 560, column: 5, scope: !1331)
!1331 = !DILexicalBlockFile(scope: !1287, file: !103, discriminator: 2)
!1332 = distinct !{!1332, !1317}
!1333 = !DILocation(line: 594, column: 5, scope: !1287)
!1334 = !{i32 174106}
!1335 = !DILocation(line: 595, column: 5, scope: !1287)
!1336 = !{i32 174149}
!1337 = !DILocation(line: 596, column: 5, scope: !1287)
!1338 = !DILocation(line: 596, column: 12, scope: !1319)
!1339 = !DILocation(line: 596, column: 16, scope: !1319)
!1340 = !DILocation(line: 596, column: 14, scope: !1319)
!1341 = !DILocation(line: 596, column: 5, scope: !1319)
!1342 = !DILocalVariable(name: "r", scope: !1343, file: !103, line: 597, type: !826)
!1343 = distinct !DILexicalBlock(scope: !1287, file: !103, line: 596, column: 21)
!1344 = !DILocation(line: 597, column: 19, scope: !1343)
!1345 = !DILocation(line: 597, column: 25, scope: !1343)
!1346 = !DILocation(line: 597, column: 23, scope: !1343)
!1347 = !DILocalVariable(name: "g", scope: !1343, file: !103, line: 598, type: !826)
!1348 = !DILocation(line: 598, column: 19, scope: !1343)
!1349 = !DILocation(line: 598, column: 25, scope: !1343)
!1350 = !DILocation(line: 598, column: 23, scope: !1343)
!1351 = !DILocalVariable(name: "b", scope: !1343, file: !103, line: 599, type: !826)
!1352 = !DILocation(line: 599, column: 19, scope: !1343)
!1353 = !DILocation(line: 599, column: 25, scope: !1343)
!1354 = !DILocation(line: 599, column: 23, scope: !1343)
!1355 = !DILocation(line: 600, column: 17, scope: !1343)
!1356 = !DILocation(line: 600, column: 18, scope: !1343)
!1357 = !DILocation(line: 600, column: 27, scope: !1343)
!1358 = !DILocation(line: 600, column: 28, scope: !1343)
!1359 = !DILocation(line: 600, column: 34, scope: !1343)
!1360 = !DILocation(line: 600, column: 23, scope: !1343)
!1361 = !DILocation(line: 600, column: 43, scope: !1343)
!1362 = !DILocation(line: 600, column: 44, scope: !1343)
!1363 = !DILocation(line: 600, column: 50, scope: !1343)
!1364 = !DILocation(line: 600, column: 39, scope: !1343)
!1365 = !DILocation(line: 600, column: 16, scope: !1343)
!1366 = !DILocation(line: 600, column: 11, scope: !1343)
!1367 = !DILocation(line: 600, column: 14, scope: !1343)
!1368 = !DILocation(line: 596, column: 5, scope: !1331)
!1369 = distinct !{!1369, !1337}
!1370 = !DILocation(line: 602, column: 1, scope: !1287)
!1371 = distinct !DISubprogram(name: "rgb24tobgr24_mmx", scope: !103, file: !103, line: 1037, type: !180, isLocal: true, isDefinition: true, scopeLine: 1038, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1372 = !DILocalVariable(name: "src", arg: 1, scope: !1371, file: !103, line: 1037, type: !182)
!1373 = !DILocation(line: 1037, column: 52, scope: !1371)
!1374 = !DILocalVariable(name: "dst", arg: 2, scope: !1371, file: !103, line: 1037, type: !15)
!1375 = !DILocation(line: 1037, column: 66, scope: !1371)
!1376 = !DILocalVariable(name: "src_size", arg: 3, scope: !1371, file: !103, line: 1037, type: !72)
!1377 = !DILocation(line: 1037, column: 75, scope: !1371)
!1378 = !DILocalVariable(name: "i", scope: !1371, file: !103, line: 1039, type: !8)
!1379 = !DILocation(line: 1039, column: 14, scope: !1371)
!1380 = !DILocalVariable(name: "mmx_size", scope: !1371, file: !103, line: 1040, type: !18)
!1381 = !DILocation(line: 1040, column: 13, scope: !1371)
!1382 = !DILocation(line: 1040, column: 28, scope: !1371)
!1383 = !DILocation(line: 1040, column: 26, scope: !1371)
!1384 = !DILocation(line: 1040, column: 23, scope: !1371)
!1385 = !DILocation(line: 1041, column: 5, scope: !1371)
!1386 = !DILocation(line: 1082, column: 16, scope: !1371)
!1387 = !DILocation(line: 1082, column: 20, scope: !1371)
!1388 = !DILocation(line: 1082, column: 19, scope: !1371)
!1389 = !DILocation(line: 1082, column: 35, scope: !1371)
!1390 = !DILocation(line: 1082, column: 39, scope: !1371)
!1391 = !DILocation(line: 1082, column: 38, scope: !1371)
!1392 = !{i32 192765, i32 192809, i32 192871, i32 192930, i32 192989, i32 193048, i32 193110, i32 193172, i32 193231, i32 193290, i32 193349, i32 193408, i32 193470, i32 193532, i32 193594, i32 193656, i32 193718, i32 193780, i32 193839, i32 193898, i32 193957, i32 194016, i32 194078, i32 194140, i32 194202, i32 194264, i32 194326, i32 194385, i32 194444, i32 194503, i32 194562, i32 194624, i32 194686, i32 194748, i32 194810, i32 194872, i32 194933, i32 194992, i32 195054, i32 195116}
!1393 = !DILocation(line: 1086, column: 5, scope: !1371)
!1394 = !{i32 195233}
!1395 = !DILocation(line: 1087, column: 5, scope: !1371)
!1396 = !{i32 195276}
!1397 = !DILocation(line: 1089, column: 9, scope: !1398)
!1398 = distinct !DILexicalBlock(scope: !1371, file: !103, line: 1089, column: 9)
!1399 = !DILocation(line: 1089, column: 17, scope: !1398)
!1400 = !DILocation(line: 1089, column: 9, scope: !1371)
!1401 = !DILocation(line: 1089, column: 23, scope: !1402)
!1402 = !DILexicalBlockFile(scope: !1398, file: !103, discriminator: 1)
!1403 = !DILocation(line: 1091, column: 11, scope: !1371)
!1404 = !DILocation(line: 1091, column: 8, scope: !1371)
!1405 = !DILocation(line: 1092, column: 11, scope: !1371)
!1406 = !DILocation(line: 1092, column: 8, scope: !1371)
!1407 = !DILocation(line: 1093, column: 18, scope: !1371)
!1408 = !DILocation(line: 1093, column: 17, scope: !1371)
!1409 = !DILocation(line: 1093, column: 15, scope: !1371)
!1410 = !DILocation(line: 1093, column: 13, scope: !1371)
!1411 = !DILocation(line: 1094, column: 11, scope: !1371)
!1412 = !DILocation(line: 1094, column: 8, scope: !1371)
!1413 = !DILocation(line: 1095, column: 11, scope: !1371)
!1414 = !DILocation(line: 1095, column: 8, scope: !1371)
!1415 = !DILocation(line: 1096, column: 11, scope: !1416)
!1416 = distinct !DILexicalBlock(scope: !1371, file: !103, line: 1096, column: 5)
!1417 = !DILocation(line: 1096, column: 10, scope: !1416)
!1418 = !DILocation(line: 1096, column: 15, scope: !1419)
!1419 = !DILexicalBlockFile(scope: !1420, file: !103, discriminator: 1)
!1420 = distinct !DILexicalBlock(scope: !1416, file: !103, line: 1096, column: 5)
!1421 = !DILocation(line: 1096, column: 17, scope: !1419)
!1422 = !DILocation(line: 1096, column: 16, scope: !1419)
!1423 = !DILocation(line: 1096, column: 5, scope: !1419)
!1424 = !DILocalVariable(name: "x", scope: !1425, file: !103, line: 1097, type: !16)
!1425 = distinct !DILexicalBlock(scope: !1420, file: !103, line: 1096, column: 33)
!1426 = !DILocation(line: 1097, column: 26, scope: !1425)
!1427 = !DILocation(line: 1098, column: 17, scope: !1425)
!1428 = !DILocation(line: 1098, column: 19, scope: !1425)
!1429 = !DILocation(line: 1098, column: 13, scope: !1425)
!1430 = !DILocation(line: 1098, column: 11, scope: !1425)
!1431 = !DILocation(line: 1099, column: 26, scope: !1425)
!1432 = !DILocation(line: 1099, column: 28, scope: !1425)
!1433 = !DILocation(line: 1099, column: 22, scope: !1425)
!1434 = !DILocation(line: 1099, column: 13, scope: !1425)
!1435 = !DILocation(line: 1099, column: 15, scope: !1425)
!1436 = !DILocation(line: 1099, column: 9, scope: !1425)
!1437 = !DILocation(line: 1099, column: 20, scope: !1425)
!1438 = !DILocation(line: 1100, column: 26, scope: !1425)
!1439 = !DILocation(line: 1100, column: 28, scope: !1425)
!1440 = !DILocation(line: 1100, column: 22, scope: !1425)
!1441 = !DILocation(line: 1100, column: 13, scope: !1425)
!1442 = !DILocation(line: 1100, column: 15, scope: !1425)
!1443 = !DILocation(line: 1100, column: 9, scope: !1425)
!1444 = !DILocation(line: 1100, column: 20, scope: !1425)
!1445 = !DILocation(line: 1101, column: 22, scope: !1425)
!1446 = !DILocation(line: 1101, column: 13, scope: !1425)
!1447 = !DILocation(line: 1101, column: 15, scope: !1425)
!1448 = !DILocation(line: 1101, column: 9, scope: !1425)
!1449 = !DILocation(line: 1101, column: 20, scope: !1425)
!1450 = !DILocation(line: 1102, column: 5, scope: !1425)
!1451 = !DILocation(line: 1096, column: 28, scope: !1452)
!1452 = !DILexicalBlockFile(scope: !1420, file: !103, discriminator: 2)
!1453 = !DILocation(line: 1096, column: 5, scope: !1452)
!1454 = distinct !{!1454, !1455}
!1455 = !DILocation(line: 1096, column: 5, scope: !1371)
!1456 = !DILocation(line: 1103, column: 1, scope: !1371)
!1457 = distinct !DISubprogram(name: "rgb32tobgr16_mmx", scope: !103, file: !103, line: 330, type: !180, isLocal: true, isDefinition: true, scopeLine: 331, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1458 = !DILocalVariable(name: "src", arg: 1, scope: !1457, file: !103, line: 330, type: !182)
!1459 = !DILocation(line: 330, column: 52, scope: !1457)
!1460 = !DILocalVariable(name: "dst", arg: 2, scope: !1457, file: !103, line: 330, type: !15)
!1461 = !DILocation(line: 330, column: 66, scope: !1457)
!1462 = !DILocalVariable(name: "src_size", arg: 3, scope: !1457, file: !103, line: 330, type: !72)
!1463 = !DILocation(line: 330, column: 75, scope: !1457)
!1464 = !DILocalVariable(name: "s", scope: !1457, file: !103, line: 332, type: !182)
!1465 = !DILocation(line: 332, column: 20, scope: !1457)
!1466 = !DILocation(line: 332, column: 24, scope: !1457)
!1467 = !DILocalVariable(name: "end", scope: !1457, file: !103, line: 333, type: !182)
!1468 = !DILocation(line: 333, column: 20, scope: !1457)
!1469 = !DILocalVariable(name: "mm_end", scope: !1457, file: !103, line: 334, type: !182)
!1470 = !DILocation(line: 334, column: 20, scope: !1457)
!1471 = !DILocalVariable(name: "d", scope: !1457, file: !103, line: 335, type: !14)
!1472 = !DILocation(line: 335, column: 15, scope: !1457)
!1473 = !DILocation(line: 335, column: 31, scope: !1457)
!1474 = !DILocation(line: 335, column: 19, scope: !1457)
!1475 = !DILocation(line: 336, column: 11, scope: !1457)
!1476 = !DILocation(line: 336, column: 15, scope: !1457)
!1477 = !DILocation(line: 336, column: 13, scope: !1457)
!1478 = !DILocation(line: 336, column: 9, scope: !1457)
!1479 = !DILocation(line: 337, column: 45, scope: !1457)
!1480 = !DILocation(line: 337, column: 5, scope: !1457)
!1481 = !{i32 164135}
!1482 = !DILocation(line: 338, column: 5, scope: !1457)
!1483 = !{i32 164204, i32 164234, i32 164276}
!1484 = !DILocation(line: 342, column: 14, scope: !1457)
!1485 = !DILocation(line: 342, column: 18, scope: !1457)
!1486 = !DILocation(line: 342, column: 12, scope: !1457)
!1487 = !DILocation(line: 343, column: 5, scope: !1457)
!1488 = !DILocation(line: 343, column: 12, scope: !1489)
!1489 = !DILexicalBlockFile(scope: !1457, file: !103, discriminator: 1)
!1490 = !DILocation(line: 343, column: 16, scope: !1489)
!1491 = !DILocation(line: 343, column: 14, scope: !1489)
!1492 = !DILocation(line: 343, column: 5, scope: !1489)
!1493 = !DILocation(line: 373, column: 20, scope: !1494)
!1494 = distinct !DILexicalBlock(scope: !1457, file: !103, line: 343, column: 24)
!1495 = !DILocation(line: 373, column: 27, scope: !1494)
!1496 = !DILocation(line: 344, column: 9, scope: !1494)
!1497 = !{i32 164412, i32 164442, i32 164488, i32 164534, i32 164580, i32 164626, i32 164672, i32 164718, i32 164764, i32 164810, i32 164856, i32 164902, i32 164948, i32 164994, i32 165040, i32 165086, i32 165132, i32 165178, i32 165224, i32 165270, i32 165316, i32 165362, i32 165408, i32 165454, i32 165500, i32 165546, i32 165592, i32 165638, i32 165684}
!1498 = !DILocation(line: 374, column: 11, scope: !1494)
!1499 = !DILocation(line: 375, column: 11, scope: !1494)
!1500 = !DILocation(line: 343, column: 5, scope: !1501)
!1501 = !DILexicalBlockFile(scope: !1457, file: !103, discriminator: 2)
!1502 = distinct !{!1502, !1487}
!1503 = !DILocation(line: 377, column: 5, scope: !1457)
!1504 = !{i32 165805}
!1505 = !DILocation(line: 378, column: 5, scope: !1457)
!1506 = !{i32 165848}
!1507 = !DILocation(line: 379, column: 5, scope: !1457)
!1508 = !DILocation(line: 379, column: 12, scope: !1489)
!1509 = !DILocation(line: 379, column: 16, scope: !1489)
!1510 = !DILocation(line: 379, column: 14, scope: !1489)
!1511 = !DILocation(line: 379, column: 5, scope: !1489)
!1512 = !DILocalVariable(name: "rgb", scope: !1513, file: !103, line: 380, type: !72)
!1513 = distinct !DILexicalBlock(scope: !1457, file: !103, line: 379, column: 21)
!1514 = !DILocation(line: 380, column: 22, scope: !1513)
!1515 = !DILocation(line: 380, column: 46, scope: !1513)
!1516 = !DILocation(line: 380, column: 28, scope: !1513)
!1517 = !DILocation(line: 380, column: 51, scope: !1513)
!1518 = !DILocation(line: 381, column: 18, scope: !1513)
!1519 = !DILocation(line: 381, column: 21, scope: !1513)
!1520 = !DILocation(line: 381, column: 27, scope: !1513)
!1521 = !DILocation(line: 381, column: 36, scope: !1513)
!1522 = !DILocation(line: 381, column: 39, scope: !1513)
!1523 = !DILocation(line: 381, column: 47, scope: !1513)
!1524 = !DILocation(line: 381, column: 32, scope: !1513)
!1525 = !DILocation(line: 381, column: 56, scope: !1513)
!1526 = !DILocation(line: 381, column: 59, scope: !1513)
!1527 = !DILocation(line: 381, column: 69, scope: !1513)
!1528 = !DILocation(line: 381, column: 52, scope: !1513)
!1529 = !DILocation(line: 381, column: 16, scope: !1513)
!1530 = !DILocation(line: 381, column: 11, scope: !1513)
!1531 = !DILocation(line: 381, column: 14, scope: !1513)
!1532 = !DILocation(line: 379, column: 5, scope: !1501)
!1533 = distinct !{!1533, !1507}
!1534 = !DILocation(line: 383, column: 1, scope: !1457)
!1535 = distinct !DISubprogram(name: "rgb32tobgr15_mmx", scope: !103, file: !103, line: 435, type: !180, isLocal: true, isDefinition: true, scopeLine: 436, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1536 = !DILocalVariable(name: "src", arg: 1, scope: !1535, file: !103, line: 435, type: !182)
!1537 = !DILocation(line: 435, column: 52, scope: !1535)
!1538 = !DILocalVariable(name: "dst", arg: 2, scope: !1535, file: !103, line: 435, type: !15)
!1539 = !DILocation(line: 435, column: 66, scope: !1535)
!1540 = !DILocalVariable(name: "src_size", arg: 3, scope: !1535, file: !103, line: 435, type: !72)
!1541 = !DILocation(line: 435, column: 75, scope: !1535)
!1542 = !DILocalVariable(name: "s", scope: !1535, file: !103, line: 437, type: !182)
!1543 = !DILocation(line: 437, column: 20, scope: !1535)
!1544 = !DILocation(line: 437, column: 24, scope: !1535)
!1545 = !DILocalVariable(name: "end", scope: !1535, file: !103, line: 438, type: !182)
!1546 = !DILocation(line: 438, column: 20, scope: !1535)
!1547 = !DILocalVariable(name: "mm_end", scope: !1535, file: !103, line: 439, type: !182)
!1548 = !DILocation(line: 439, column: 20, scope: !1535)
!1549 = !DILocalVariable(name: "d", scope: !1535, file: !103, line: 440, type: !14)
!1550 = !DILocation(line: 440, column: 15, scope: !1535)
!1551 = !DILocation(line: 440, column: 31, scope: !1535)
!1552 = !DILocation(line: 440, column: 19, scope: !1535)
!1553 = !DILocation(line: 441, column: 11, scope: !1535)
!1554 = !DILocation(line: 441, column: 15, scope: !1535)
!1555 = !DILocation(line: 441, column: 13, scope: !1535)
!1556 = !DILocation(line: 441, column: 9, scope: !1535)
!1557 = !DILocation(line: 442, column: 45, scope: !1535)
!1558 = !DILocation(line: 442, column: 5, scope: !1535)
!1559 = !{i32 168154}
!1560 = !DILocation(line: 443, column: 5, scope: !1535)
!1561 = !{i32 168223, i32 168253, i32 168295}
!1562 = !DILocation(line: 447, column: 14, scope: !1535)
!1563 = !DILocation(line: 447, column: 18, scope: !1535)
!1564 = !DILocation(line: 447, column: 12, scope: !1535)
!1565 = !DILocation(line: 448, column: 5, scope: !1535)
!1566 = !DILocation(line: 448, column: 12, scope: !1567)
!1567 = !DILexicalBlockFile(scope: !1535, file: !103, discriminator: 1)
!1568 = !DILocation(line: 448, column: 16, scope: !1567)
!1569 = !DILocation(line: 448, column: 14, scope: !1567)
!1570 = !DILocation(line: 448, column: 5, scope: !1567)
!1571 = !DILocation(line: 478, column: 19, scope: !1572)
!1572 = distinct !DILexicalBlock(scope: !1535, file: !103, line: 448, column: 24)
!1573 = !DILocation(line: 478, column: 26, scope: !1572)
!1574 = !DILocation(line: 449, column: 9, scope: !1572)
!1575 = !{i32 168431, i32 168461, i32 168507, i32 168553, i32 168599, i32 168645, i32 168691, i32 168737, i32 168783, i32 168829, i32 168875, i32 168921, i32 168967, i32 169013, i32 169059, i32 169105, i32 169151, i32 169197, i32 169243, i32 169289, i32 169335, i32 169381, i32 169427, i32 169473, i32 169519, i32 169565, i32 169611, i32 169657, i32 169703}
!1576 = !DILocation(line: 479, column: 11, scope: !1572)
!1577 = !DILocation(line: 480, column: 11, scope: !1572)
!1578 = !DILocation(line: 448, column: 5, scope: !1579)
!1579 = !DILexicalBlockFile(scope: !1535, file: !103, discriminator: 2)
!1580 = distinct !{!1580, !1565}
!1581 = !DILocation(line: 482, column: 5, scope: !1535)
!1582 = !{i32 169823}
!1583 = !DILocation(line: 483, column: 5, scope: !1535)
!1584 = !{i32 169866}
!1585 = !DILocation(line: 484, column: 5, scope: !1535)
!1586 = !DILocation(line: 484, column: 12, scope: !1567)
!1587 = !DILocation(line: 484, column: 16, scope: !1567)
!1588 = !DILocation(line: 484, column: 14, scope: !1567)
!1589 = !DILocation(line: 484, column: 5, scope: !1567)
!1590 = !DILocalVariable(name: "rgb", scope: !1591, file: !103, line: 485, type: !72)
!1591 = distinct !DILexicalBlock(scope: !1535, file: !103, line: 484, column: 21)
!1592 = !DILocation(line: 485, column: 22, scope: !1591)
!1593 = !DILocation(line: 485, column: 46, scope: !1591)
!1594 = !DILocation(line: 485, column: 28, scope: !1591)
!1595 = !DILocation(line: 485, column: 51, scope: !1591)
!1596 = !DILocation(line: 486, column: 18, scope: !1591)
!1597 = !DILocation(line: 486, column: 21, scope: !1591)
!1598 = !DILocation(line: 486, column: 27, scope: !1591)
!1599 = !DILocation(line: 486, column: 36, scope: !1591)
!1600 = !DILocation(line: 486, column: 39, scope: !1591)
!1601 = !DILocation(line: 486, column: 47, scope: !1591)
!1602 = !DILocation(line: 486, column: 32, scope: !1591)
!1603 = !DILocation(line: 486, column: 56, scope: !1591)
!1604 = !DILocation(line: 486, column: 59, scope: !1591)
!1605 = !DILocation(line: 486, column: 69, scope: !1591)
!1606 = !DILocation(line: 486, column: 52, scope: !1591)
!1607 = !DILocation(line: 486, column: 16, scope: !1591)
!1608 = !DILocation(line: 486, column: 11, scope: !1591)
!1609 = !DILocation(line: 486, column: 14, scope: !1591)
!1610 = !DILocation(line: 484, column: 5, scope: !1579)
!1611 = distinct !{!1611, !1585}
!1612 = !DILocation(line: 488, column: 1, scope: !1535)
!1613 = distinct !DISubprogram(name: "yv12toyuy2_mmx", scope: !103, file: !103, line: 1162, type: !1614, isLocal: true, isDefinition: true, scopeLine: 1165, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1614 = !DISubroutineType(types: !1615)
!1615 = !{null, !182, !182, !182, !15, !72, !72, !72, !72, !72}
!1616 = !DILocalVariable(name: "ysrc", arg: 1, scope: !1613, file: !103, line: 1162, type: !182)
!1617 = !DILocation(line: 1162, column: 50, scope: !1613)
!1618 = !DILocalVariable(name: "usrc", arg: 2, scope: !1613, file: !103, line: 1162, type: !182)
!1619 = !DILocation(line: 1162, column: 71, scope: !1613)
!1620 = !DILocalVariable(name: "vsrc", arg: 3, scope: !1613, file: !103, line: 1162, type: !182)
!1621 = !DILocation(line: 1162, column: 92, scope: !1613)
!1622 = !DILocalVariable(name: "dst", arg: 4, scope: !1613, file: !103, line: 1162, type: !15)
!1623 = !DILocation(line: 1162, column: 107, scope: !1613)
!1624 = !DILocalVariable(name: "width", arg: 5, scope: !1613, file: !103, line: 1163, type: !72)
!1625 = !DILocation(line: 1163, column: 43, scope: !1613)
!1626 = !DILocalVariable(name: "height", arg: 6, scope: !1613, file: !103, line: 1163, type: !72)
!1627 = !DILocation(line: 1163, column: 54, scope: !1613)
!1628 = !DILocalVariable(name: "lumStride", arg: 7, scope: !1613, file: !103, line: 1164, type: !72)
!1629 = !DILocation(line: 1164, column: 43, scope: !1613)
!1630 = !DILocalVariable(name: "chromStride", arg: 8, scope: !1613, file: !103, line: 1164, type: !72)
!1631 = !DILocation(line: 1164, column: 58, scope: !1613)
!1632 = !DILocalVariable(name: "dstStride", arg: 9, scope: !1613, file: !103, line: 1164, type: !72)
!1633 = !DILocation(line: 1164, column: 75, scope: !1613)
!1634 = !DILocation(line: 1167, column: 25, scope: !1613)
!1635 = !DILocation(line: 1167, column: 31, scope: !1613)
!1636 = !DILocation(line: 1167, column: 37, scope: !1613)
!1637 = !DILocation(line: 1167, column: 43, scope: !1613)
!1638 = !DILocation(line: 1167, column: 48, scope: !1613)
!1639 = !DILocation(line: 1167, column: 55, scope: !1613)
!1640 = !DILocation(line: 1167, column: 63, scope: !1613)
!1641 = !DILocation(line: 1167, column: 74, scope: !1613)
!1642 = !DILocation(line: 1167, column: 87, scope: !1613)
!1643 = !DILocation(line: 1167, column: 5, scope: !1613)
!1644 = !DILocation(line: 1168, column: 1, scope: !1613)
!1645 = distinct !DISubprogram(name: "yv12touyvy_mmx", scope: !103, file: !103, line: 1227, type: !1614, isLocal: true, isDefinition: true, scopeLine: 1230, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1646 = !DILocalVariable(name: "ysrc", arg: 1, scope: !1645, file: !103, line: 1227, type: !182)
!1647 = !DILocation(line: 1227, column: 50, scope: !1645)
!1648 = !DILocalVariable(name: "usrc", arg: 2, scope: !1645, file: !103, line: 1227, type: !182)
!1649 = !DILocation(line: 1227, column: 71, scope: !1645)
!1650 = !DILocalVariable(name: "vsrc", arg: 3, scope: !1645, file: !103, line: 1227, type: !182)
!1651 = !DILocation(line: 1227, column: 92, scope: !1645)
!1652 = !DILocalVariable(name: "dst", arg: 4, scope: !1645, file: !103, line: 1227, type: !15)
!1653 = !DILocation(line: 1227, column: 107, scope: !1645)
!1654 = !DILocalVariable(name: "width", arg: 5, scope: !1645, file: !103, line: 1228, type: !72)
!1655 = !DILocation(line: 1228, column: 43, scope: !1645)
!1656 = !DILocalVariable(name: "height", arg: 6, scope: !1645, file: !103, line: 1228, type: !72)
!1657 = !DILocation(line: 1228, column: 54, scope: !1645)
!1658 = !DILocalVariable(name: "lumStride", arg: 7, scope: !1645, file: !103, line: 1229, type: !72)
!1659 = !DILocation(line: 1229, column: 43, scope: !1645)
!1660 = !DILocalVariable(name: "chromStride", arg: 8, scope: !1645, file: !103, line: 1229, type: !72)
!1661 = !DILocation(line: 1229, column: 58, scope: !1645)
!1662 = !DILocalVariable(name: "dstStride", arg: 9, scope: !1645, file: !103, line: 1229, type: !72)
!1663 = !DILocation(line: 1229, column: 75, scope: !1645)
!1664 = !DILocation(line: 1232, column: 25, scope: !1645)
!1665 = !DILocation(line: 1232, column: 31, scope: !1645)
!1666 = !DILocation(line: 1232, column: 37, scope: !1645)
!1667 = !DILocation(line: 1232, column: 43, scope: !1645)
!1668 = !DILocation(line: 1232, column: 48, scope: !1645)
!1669 = !DILocation(line: 1232, column: 55, scope: !1645)
!1670 = !DILocation(line: 1232, column: 63, scope: !1645)
!1671 = !DILocation(line: 1232, column: 74, scope: !1645)
!1672 = !DILocation(line: 1232, column: 87, scope: !1645)
!1673 = !DILocation(line: 1232, column: 5, scope: !1645)
!1674 = !DILocation(line: 1233, column: 1, scope: !1645)
!1675 = distinct !DISubprogram(name: "yuv422ptoyuy2_mmx", scope: !103, file: !103, line: 1248, type: !1614, isLocal: true, isDefinition: true, scopeLine: 1251, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1676 = !DILocalVariable(name: "ysrc", arg: 1, scope: !1675, file: !103, line: 1248, type: !182)
!1677 = !DILocation(line: 1248, column: 53, scope: !1675)
!1678 = !DILocalVariable(name: "usrc", arg: 2, scope: !1675, file: !103, line: 1248, type: !182)
!1679 = !DILocation(line: 1248, column: 74, scope: !1675)
!1680 = !DILocalVariable(name: "vsrc", arg: 3, scope: !1675, file: !103, line: 1248, type: !182)
!1681 = !DILocation(line: 1248, column: 95, scope: !1675)
!1682 = !DILocalVariable(name: "dst", arg: 4, scope: !1675, file: !103, line: 1248, type: !15)
!1683 = !DILocation(line: 1248, column: 110, scope: !1675)
!1684 = !DILocalVariable(name: "width", arg: 5, scope: !1675, file: !103, line: 1249, type: !72)
!1685 = !DILocation(line: 1249, column: 46, scope: !1675)
!1686 = !DILocalVariable(name: "height", arg: 6, scope: !1675, file: !103, line: 1249, type: !72)
!1687 = !DILocation(line: 1249, column: 57, scope: !1675)
!1688 = !DILocalVariable(name: "lumStride", arg: 7, scope: !1675, file: !103, line: 1250, type: !72)
!1689 = !DILocation(line: 1250, column: 46, scope: !1675)
!1690 = !DILocalVariable(name: "chromStride", arg: 8, scope: !1675, file: !103, line: 1250, type: !72)
!1691 = !DILocation(line: 1250, column: 61, scope: !1675)
!1692 = !DILocalVariable(name: "dstStride", arg: 9, scope: !1675, file: !103, line: 1250, type: !72)
!1693 = !DILocation(line: 1250, column: 78, scope: !1675)
!1694 = !DILocation(line: 1252, column: 25, scope: !1675)
!1695 = !DILocation(line: 1252, column: 31, scope: !1675)
!1696 = !DILocation(line: 1252, column: 37, scope: !1675)
!1697 = !DILocation(line: 1252, column: 43, scope: !1675)
!1698 = !DILocation(line: 1252, column: 48, scope: !1675)
!1699 = !DILocation(line: 1252, column: 55, scope: !1675)
!1700 = !DILocation(line: 1252, column: 63, scope: !1675)
!1701 = !DILocation(line: 1252, column: 74, scope: !1675)
!1702 = !DILocation(line: 1252, column: 87, scope: !1675)
!1703 = !DILocation(line: 1252, column: 5, scope: !1675)
!1704 = !DILocation(line: 1253, column: 1, scope: !1675)
!1705 = distinct !DISubprogram(name: "yuv422ptouyvy_mmx", scope: !103, file: !103, line: 1238, type: !1614, isLocal: true, isDefinition: true, scopeLine: 1241, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1706 = !DILocalVariable(name: "ysrc", arg: 1, scope: !1705, file: !103, line: 1238, type: !182)
!1707 = !DILocation(line: 1238, column: 53, scope: !1705)
!1708 = !DILocalVariable(name: "usrc", arg: 2, scope: !1705, file: !103, line: 1238, type: !182)
!1709 = !DILocation(line: 1238, column: 74, scope: !1705)
!1710 = !DILocalVariable(name: "vsrc", arg: 3, scope: !1705, file: !103, line: 1238, type: !182)
!1711 = !DILocation(line: 1238, column: 95, scope: !1705)
!1712 = !DILocalVariable(name: "dst", arg: 4, scope: !1705, file: !103, line: 1238, type: !15)
!1713 = !DILocation(line: 1238, column: 110, scope: !1705)
!1714 = !DILocalVariable(name: "width", arg: 5, scope: !1705, file: !103, line: 1239, type: !72)
!1715 = !DILocation(line: 1239, column: 46, scope: !1705)
!1716 = !DILocalVariable(name: "height", arg: 6, scope: !1705, file: !103, line: 1239, type: !72)
!1717 = !DILocation(line: 1239, column: 57, scope: !1705)
!1718 = !DILocalVariable(name: "lumStride", arg: 7, scope: !1705, file: !103, line: 1240, type: !72)
!1719 = !DILocation(line: 1240, column: 46, scope: !1705)
!1720 = !DILocalVariable(name: "chromStride", arg: 8, scope: !1705, file: !103, line: 1240, type: !72)
!1721 = !DILocation(line: 1240, column: 61, scope: !1705)
!1722 = !DILocalVariable(name: "dstStride", arg: 9, scope: !1705, file: !103, line: 1240, type: !72)
!1723 = !DILocation(line: 1240, column: 78, scope: !1705)
!1724 = !DILocation(line: 1242, column: 25, scope: !1705)
!1725 = !DILocation(line: 1242, column: 31, scope: !1705)
!1726 = !DILocation(line: 1242, column: 37, scope: !1705)
!1727 = !DILocation(line: 1242, column: 43, scope: !1705)
!1728 = !DILocation(line: 1242, column: 48, scope: !1705)
!1729 = !DILocation(line: 1242, column: 55, scope: !1705)
!1730 = !DILocation(line: 1242, column: 63, scope: !1705)
!1731 = !DILocation(line: 1242, column: 74, scope: !1705)
!1732 = !DILocation(line: 1242, column: 87, scope: !1705)
!1733 = !DILocation(line: 1242, column: 5, scope: !1705)
!1734 = !DILocation(line: 1243, column: 1, scope: !1705)
!1735 = distinct !DISubprogram(name: "yuy2toyv12_mmx", scope: !103, file: !103, line: 1259, type: !1736, isLocal: true, isDefinition: true, scopeLine: 1262, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1736 = !DISubroutineType(types: !1737)
!1737 = !{null, !182, !15, !15, !15, !72, !72, !72, !72, !72}
!1738 = !DILocalVariable(name: "src", arg: 1, scope: !1735, file: !103, line: 1259, type: !182)
!1739 = !DILocation(line: 1259, column: 50, scope: !1735)
!1740 = !DILocalVariable(name: "ydst", arg: 2, scope: !1735, file: !103, line: 1259, type: !15)
!1741 = !DILocation(line: 1259, column: 64, scope: !1735)
!1742 = !DILocalVariable(name: "udst", arg: 3, scope: !1735, file: !103, line: 1259, type: !15)
!1743 = !DILocation(line: 1259, column: 79, scope: !1735)
!1744 = !DILocalVariable(name: "vdst", arg: 4, scope: !1735, file: !103, line: 1259, type: !15)
!1745 = !DILocation(line: 1259, column: 94, scope: !1735)
!1746 = !DILocalVariable(name: "width", arg: 5, scope: !1735, file: !103, line: 1260, type: !72)
!1747 = !DILocation(line: 1260, column: 43, scope: !1735)
!1748 = !DILocalVariable(name: "height", arg: 6, scope: !1735, file: !103, line: 1260, type: !72)
!1749 = !DILocation(line: 1260, column: 54, scope: !1735)
!1750 = !DILocalVariable(name: "lumStride", arg: 7, scope: !1735, file: !103, line: 1261, type: !72)
!1751 = !DILocation(line: 1261, column: 43, scope: !1735)
!1752 = !DILocalVariable(name: "chromStride", arg: 8, scope: !1735, file: !103, line: 1261, type: !72)
!1753 = !DILocation(line: 1261, column: 58, scope: !1735)
!1754 = !DILocalVariable(name: "srcStride", arg: 9, scope: !1735, file: !103, line: 1261, type: !72)
!1755 = !DILocation(line: 1261, column: 75, scope: !1735)
!1756 = !DILocalVariable(name: "y", scope: !1735, file: !103, line: 1263, type: !72)
!1757 = !DILocation(line: 1263, column: 9, scope: !1735)
!1758 = !DILocalVariable(name: "chromWidth", scope: !1735, file: !103, line: 1264, type: !1759)
!1759 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !18)
!1760 = !DILocation(line: 1264, column: 19, scope: !1735)
!1761 = !DILocation(line: 1264, column: 31, scope: !1735)
!1762 = !DILocation(line: 1264, column: 36, scope: !1735)
!1763 = !DILocation(line: 1265, column: 11, scope: !1764)
!1764 = distinct !DILexicalBlock(scope: !1735, file: !103, line: 1265, column: 5)
!1765 = !DILocation(line: 1265, column: 10, scope: !1764)
!1766 = !DILocation(line: 1265, column: 15, scope: !1767)
!1767 = !DILexicalBlockFile(scope: !1768, file: !103, discriminator: 1)
!1768 = distinct !DILexicalBlock(scope: !1764, file: !103, line: 1265, column: 5)
!1769 = !DILocation(line: 1265, column: 17, scope: !1767)
!1770 = !DILocation(line: 1265, column: 16, scope: !1767)
!1771 = !DILocation(line: 1265, column: 5, scope: !1767)
!1772 = !DILocation(line: 1314, column: 19, scope: !1773)
!1773 = distinct !DILexicalBlock(scope: !1768, file: !103, line: 1265, column: 31)
!1774 = !DILocation(line: 1314, column: 29, scope: !1773)
!1775 = !DILocation(line: 1314, column: 40, scope: !1773)
!1776 = !DILocation(line: 1314, column: 51, scope: !1773)
!1777 = !DILocation(line: 1314, column: 63, scope: !1773)
!1778 = !DILocation(line: 1266, column: 9, scope: !1773)
!1779 = !{i32 202351, i32 202391, i32 202453, i32 202515, i32 202577, i32 202614, i32 202673, i32 202732, i32 202791, i32 202853, i32 202915, i32 202977, i32 203039, i32 203101, i32 203163, i32 203225, i32 203287, i32 203357, i32 203417, i32 203476, i32 203538, i32 203600, i32 203662, i32 203724, i32 203786, i32 203848, i32 203910, i32 203972, i32 204043, i32 204106, i32 204168, i32 204230, i32 204292, i32 204354, i32 204416, i32 204478, i32 204540, i32 204611, i32 204681, i32 204742, i32 204802, i32 204865}
!1780 = !DILocation(line: 1318, column: 17, scope: !1773)
!1781 = !DILocation(line: 1318, column: 14, scope: !1773)
!1782 = !DILocation(line: 1319, column: 16, scope: !1773)
!1783 = !DILocation(line: 1319, column: 13, scope: !1773)
!1784 = !DILocation(line: 1344, column: 19, scope: !1773)
!1785 = !DILocation(line: 1344, column: 29, scope: !1773)
!1786 = !DILocation(line: 1344, column: 40, scope: !1773)
!1787 = !DILocation(line: 1344, column: 51, scope: !1773)
!1788 = !DILocation(line: 1344, column: 63, scope: !1773)
!1789 = !DILocation(line: 1321, column: 9, scope: !1773)
!1790 = !{i32 205080, i32 205120, i32 205182, i32 205244, i32 205303, i32 205362, i32 205421, i32 205480, i32 205539, i32 205601, i32 205663, i32 205725, i32 205787, i32 205849, i32 205911, i32 205982, i32 206052, i32 206112, i32 206171, i32 206233}
!1791 = !DILocation(line: 1347, column: 17, scope: !1773)
!1792 = !DILocation(line: 1347, column: 14, scope: !1773)
!1793 = !DILocation(line: 1348, column: 17, scope: !1773)
!1794 = !DILocation(line: 1348, column: 14, scope: !1773)
!1795 = !DILocation(line: 1349, column: 17, scope: !1773)
!1796 = !DILocation(line: 1349, column: 14, scope: !1773)
!1797 = !DILocation(line: 1350, column: 16, scope: !1773)
!1798 = !DILocation(line: 1350, column: 13, scope: !1773)
!1799 = !DILocation(line: 1351, column: 5, scope: !1773)
!1800 = !DILocation(line: 1265, column: 26, scope: !1801)
!1801 = !DILexicalBlockFile(scope: !1768, file: !103, discriminator: 2)
!1802 = !DILocation(line: 1265, column: 5, scope: !1801)
!1803 = distinct !{!1803, !1804}
!1804 = !DILocation(line: 1265, column: 5, scope: !1735)
!1805 = !DILocation(line: 1352, column: 5, scope: !1735)
!1806 = !{i32 206494, i32 206510, i32 206551}
!1807 = !DILocation(line: 1355, column: 1, scope: !1735)
!1808 = distinct !DISubprogram(name: "vu9_to_vu12_mmx", scope: !103, file: !103, line: 1934, type: !1809, isLocal: true, isDefinition: true, scopeLine: 1939, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1809 = !DISubroutineType(types: !1810)
!1810 = !{null, !182, !182, !15, !15, !72, !72, !72, !72, !72, !72}
!1811 = !DILocalVariable(name: "src1", arg: 1, scope: !1808, file: !103, line: 1934, type: !182)
!1812 = !DILocation(line: 1934, column: 51, scope: !1808)
!1813 = !DILocalVariable(name: "src2", arg: 2, scope: !1808, file: !103, line: 1934, type: !182)
!1814 = !DILocation(line: 1934, column: 72, scope: !1808)
!1815 = !DILocalVariable(name: "dst1", arg: 3, scope: !1808, file: !103, line: 1935, type: !15)
!1816 = !DILocation(line: 1935, column: 49, scope: !1808)
!1817 = !DILocalVariable(name: "dst2", arg: 4, scope: !1808, file: !103, line: 1935, type: !15)
!1818 = !DILocation(line: 1935, column: 64, scope: !1808)
!1819 = !DILocalVariable(name: "width", arg: 5, scope: !1808, file: !103, line: 1936, type: !72)
!1820 = !DILocation(line: 1936, column: 44, scope: !1808)
!1821 = !DILocalVariable(name: "height", arg: 6, scope: !1808, file: !103, line: 1936, type: !72)
!1822 = !DILocation(line: 1936, column: 55, scope: !1808)
!1823 = !DILocalVariable(name: "srcStride1", arg: 7, scope: !1808, file: !103, line: 1937, type: !72)
!1824 = !DILocation(line: 1937, column: 44, scope: !1808)
!1825 = !DILocalVariable(name: "srcStride2", arg: 8, scope: !1808, file: !103, line: 1937, type: !72)
!1826 = !DILocation(line: 1937, column: 60, scope: !1808)
!1827 = !DILocalVariable(name: "dstStride1", arg: 9, scope: !1808, file: !103, line: 1938, type: !72)
!1828 = !DILocation(line: 1938, column: 44, scope: !1808)
!1829 = !DILocalVariable(name: "dstStride2", arg: 10, scope: !1808, file: !103, line: 1938, type: !72)
!1830 = !DILocation(line: 1938, column: 60, scope: !1808)
!1831 = !DILocalVariable(name: "x", scope: !1808, file: !103, line: 1940, type: !18)
!1832 = !DILocation(line: 1940, column: 13, scope: !1808)
!1833 = !DILocalVariable(name: "y", scope: !1808, file: !103, line: 1940, type: !18)
!1834 = !DILocation(line: 1940, column: 16, scope: !1808)
!1835 = !DILocalVariable(name: "w", scope: !1808, file: !103, line: 1941, type: !72)
!1836 = !DILocation(line: 1941, column: 9, scope: !1808)
!1837 = !DILocalVariable(name: "h", scope: !1808, file: !103, line: 1941, type: !72)
!1838 = !DILocation(line: 1941, column: 11, scope: !1808)
!1839 = !DILocation(line: 1942, column: 7, scope: !1808)
!1840 = !DILocation(line: 1942, column: 12, scope: !1808)
!1841 = !DILocation(line: 1942, column: 6, scope: !1808)
!1842 = !DILocation(line: 1942, column: 18, scope: !1808)
!1843 = !DILocation(line: 1942, column: 24, scope: !1808)
!1844 = !DILocation(line: 1942, column: 17, scope: !1808)
!1845 = !DILocation(line: 1946, column: 17, scope: !1808)
!1846 = !DILocation(line: 1946, column: 22, scope: !1808)
!1847 = !DILocation(line: 1946, column: 21, scope: !1808)
!1848 = !DILocation(line: 1946, column: 41, scope: !1808)
!1849 = !DILocation(line: 1946, column: 46, scope: !1808)
!1850 = !DILocation(line: 1946, column: 45, scope: !1808)
!1851 = !DILocation(line: 1943, column: 5, scope: !1808)
!1852 = !{i32 225320, i32 225338, i32 225368}
!1853 = !DILocation(line: 1947, column: 11, scope: !1854)
!1854 = distinct !DILexicalBlock(scope: !1808, file: !103, line: 1947, column: 5)
!1855 = !DILocation(line: 1947, column: 10, scope: !1854)
!1856 = !DILocation(line: 1947, column: 14, scope: !1857)
!1857 = !DILexicalBlockFile(scope: !1858, file: !103, discriminator: 1)
!1858 = distinct !DILexicalBlock(scope: !1854, file: !103, line: 1947, column: 5)
!1859 = !DILocation(line: 1947, column: 16, scope: !1857)
!1860 = !DILocation(line: 1947, column: 15, scope: !1857)
!1861 = !DILocation(line: 1947, column: 5, scope: !1857)
!1862 = !DILocalVariable(name: "s1", scope: !1863, file: !103, line: 1948, type: !182)
!1863 = distinct !DILexicalBlock(scope: !1858, file: !103, line: 1947, column: 23)
!1864 = !DILocation(line: 1948, column: 24, scope: !1863)
!1865 = !DILocation(line: 1948, column: 27, scope: !1863)
!1866 = !DILocation(line: 1948, column: 32, scope: !1863)
!1867 = !DILocation(line: 1948, column: 44, scope: !1863)
!1868 = !DILocation(line: 1948, column: 45, scope: !1863)
!1869 = !DILocation(line: 1948, column: 42, scope: !1863)
!1870 = !DILocation(line: 1948, column: 31, scope: !1863)
!1871 = !DILocalVariable(name: "d", scope: !1863, file: !103, line: 1949, type: !15)
!1872 = !DILocation(line: 1949, column: 18, scope: !1863)
!1873 = !DILocation(line: 1949, column: 20, scope: !1863)
!1874 = !DILocation(line: 1949, column: 25, scope: !1863)
!1875 = !DILocation(line: 1949, column: 36, scope: !1863)
!1876 = !DILocation(line: 1949, column: 35, scope: !1863)
!1877 = !DILocation(line: 1949, column: 24, scope: !1863)
!1878 = !DILocation(line: 1950, column: 10, scope: !1863)
!1879 = !DILocation(line: 1951, column: 9, scope: !1863)
!1880 = !DILocation(line: 1951, column: 15, scope: !1881)
!1881 = !DILexicalBlockFile(scope: !1882, file: !103, discriminator: 1)
!1882 = distinct !DILexicalBlock(scope: !1883, file: !103, line: 1951, column: 9)
!1883 = distinct !DILexicalBlock(scope: !1863, file: !103, line: 1951, column: 9)
!1884 = !DILocation(line: 1951, column: 17, scope: !1881)
!1885 = !DILocation(line: 1951, column: 18, scope: !1881)
!1886 = !DILocation(line: 1951, column: 16, scope: !1881)
!1887 = !DILocation(line: 1951, column: 9, scope: !1881)
!1888 = !DILocation(line: 1978, column: 24, scope: !1889)
!1889 = distinct !DILexicalBlock(scope: !1882, file: !103, line: 1951, column: 29)
!1890 = !DILocation(line: 1978, column: 32, scope: !1889)
!1891 = !DILocation(line: 1978, column: 41, scope: !1889)
!1892 = !DILocation(line: 1952, column: 13, scope: !1889)
!1893 = !{i32 225642, i32 225673, i32 225724, i32 225775, i32 225826, i32 225877, i32 225923, i32 225969, i32 226015, i32 226061, i32 226107, i32 226153, i32 226199, i32 226245, i32 226291, i32 226337, i32 226383, i32 226429, i32 226482, i32 226535, i32 226588, i32 226641, i32 226694, i32 226747, i32 226800}
!1894 = !DILocation(line: 1980, column: 9, scope: !1889)
!1895 = !DILocation(line: 1951, column: 23, scope: !1896)
!1896 = !DILexicalBlockFile(scope: !1882, file: !103, discriminator: 2)
!1897 = !DILocation(line: 1951, column: 9, scope: !1896)
!1898 = distinct !{!1898, !1879}
!1899 = !DILocation(line: 1981, column: 9, scope: !1863)
!1900 = !DILocation(line: 1981, column: 15, scope: !1901)
!1901 = !DILexicalBlockFile(scope: !1902, file: !103, discriminator: 1)
!1902 = distinct !DILexicalBlock(scope: !1903, file: !103, line: 1981, column: 9)
!1903 = distinct !DILexicalBlock(scope: !1863, file: !103, line: 1981, column: 9)
!1904 = !DILocation(line: 1981, column: 17, scope: !1901)
!1905 = !DILocation(line: 1981, column: 16, scope: !1901)
!1906 = !DILocation(line: 1981, column: 9, scope: !1901)
!1907 = !DILocation(line: 1981, column: 43, scope: !1908)
!1908 = !DILexicalBlockFile(scope: !1902, file: !103, discriminator: 2)
!1909 = !DILocation(line: 1981, column: 40, scope: !1908)
!1910 = !DILocation(line: 1981, column: 35, scope: !1908)
!1911 = !DILocation(line: 1981, column: 34, scope: !1908)
!1912 = !DILocation(line: 1981, column: 36, scope: !1908)
!1913 = !DILocation(line: 1981, column: 31, scope: !1908)
!1914 = !DILocation(line: 1981, column: 39, scope: !1908)
!1915 = !DILocation(line: 1981, column: 28, scope: !1908)
!1916 = !DILocation(line: 1981, column: 27, scope: !1908)
!1917 = !DILocation(line: 1981, column: 24, scope: !1908)
!1918 = !DILocation(line: 1981, column: 30, scope: !1908)
!1919 = !DILocation(line: 1981, column: 20, scope: !1920)
!1920 = !DILexicalBlockFile(scope: !1902, file: !103, discriminator: 3)
!1921 = !DILocation(line: 1981, column: 9, scope: !1920)
!1922 = distinct !{!1922, !1899}
!1923 = !DILocation(line: 1982, column: 5, scope: !1863)
!1924 = !DILocation(line: 1947, column: 19, scope: !1925)
!1925 = !DILexicalBlockFile(scope: !1858, file: !103, discriminator: 2)
!1926 = !DILocation(line: 1947, column: 5, scope: !1925)
!1927 = distinct !{!1927, !1928}
!1928 = !DILocation(line: 1947, column: 5, scope: !1808)
!1929 = !DILocation(line: 1983, column: 11, scope: !1930)
!1930 = distinct !DILexicalBlock(scope: !1808, file: !103, line: 1983, column: 5)
!1931 = !DILocation(line: 1983, column: 10, scope: !1930)
!1932 = !DILocation(line: 1983, column: 14, scope: !1933)
!1933 = !DILexicalBlockFile(scope: !1934, file: !103, discriminator: 1)
!1934 = distinct !DILexicalBlock(scope: !1930, file: !103, line: 1983, column: 5)
!1935 = !DILocation(line: 1983, column: 16, scope: !1933)
!1936 = !DILocation(line: 1983, column: 15, scope: !1933)
!1937 = !DILocation(line: 1983, column: 5, scope: !1933)
!1938 = !DILocalVariable(name: "s2", scope: !1939, file: !103, line: 1984, type: !182)
!1939 = distinct !DILexicalBlock(scope: !1934, file: !103, line: 1983, column: 23)
!1940 = !DILocation(line: 1984, column: 24, scope: !1939)
!1941 = !DILocation(line: 1984, column: 27, scope: !1939)
!1942 = !DILocation(line: 1984, column: 32, scope: !1939)
!1943 = !DILocation(line: 1984, column: 44, scope: !1939)
!1944 = !DILocation(line: 1984, column: 45, scope: !1939)
!1945 = !DILocation(line: 1984, column: 42, scope: !1939)
!1946 = !DILocation(line: 1984, column: 31, scope: !1939)
!1947 = !DILocalVariable(name: "d", scope: !1939, file: !103, line: 1985, type: !15)
!1948 = !DILocation(line: 1985, column: 18, scope: !1939)
!1949 = !DILocation(line: 1985, column: 20, scope: !1939)
!1950 = !DILocation(line: 1985, column: 25, scope: !1939)
!1951 = !DILocation(line: 1985, column: 36, scope: !1939)
!1952 = !DILocation(line: 1985, column: 35, scope: !1939)
!1953 = !DILocation(line: 1985, column: 24, scope: !1939)
!1954 = !DILocation(line: 1986, column: 10, scope: !1939)
!1955 = !DILocation(line: 1987, column: 9, scope: !1939)
!1956 = !DILocation(line: 1987, column: 15, scope: !1957)
!1957 = !DILexicalBlockFile(scope: !1958, file: !103, discriminator: 1)
!1958 = distinct !DILexicalBlock(scope: !1959, file: !103, line: 1987, column: 9)
!1959 = distinct !DILexicalBlock(scope: !1939, file: !103, line: 1987, column: 9)
!1960 = !DILocation(line: 1987, column: 17, scope: !1957)
!1961 = !DILocation(line: 1987, column: 18, scope: !1957)
!1962 = !DILocation(line: 1987, column: 16, scope: !1957)
!1963 = !DILocation(line: 1987, column: 9, scope: !1957)
!1964 = !DILocation(line: 2014, column: 24, scope: !1965)
!1965 = distinct !DILexicalBlock(scope: !1958, file: !103, line: 1987, column: 29)
!1966 = !DILocation(line: 2014, column: 32, scope: !1965)
!1967 = !DILocation(line: 2014, column: 41, scope: !1965)
!1968 = !DILocation(line: 1988, column: 13, scope: !1965)
!1969 = !{i32 227185, i32 227216, i32 227267, i32 227318, i32 227369, i32 227420, i32 227466, i32 227512, i32 227558, i32 227604, i32 227650, i32 227696, i32 227742, i32 227788, i32 227834, i32 227880, i32 227926, i32 227972, i32 228025, i32 228078, i32 228131, i32 228184, i32 228237, i32 228290, i32 228343}
!1970 = !DILocation(line: 2016, column: 9, scope: !1965)
!1971 = !DILocation(line: 1987, column: 23, scope: !1972)
!1972 = !DILexicalBlockFile(scope: !1958, file: !103, discriminator: 2)
!1973 = !DILocation(line: 1987, column: 9, scope: !1972)
!1974 = distinct !{!1974, !1955}
!1975 = !DILocation(line: 2017, column: 9, scope: !1939)
!1976 = !DILocation(line: 2017, column: 15, scope: !1977)
!1977 = !DILexicalBlockFile(scope: !1978, file: !103, discriminator: 1)
!1978 = distinct !DILexicalBlock(scope: !1979, file: !103, line: 2017, column: 9)
!1979 = distinct !DILexicalBlock(scope: !1939, file: !103, line: 2017, column: 9)
!1980 = !DILocation(line: 2017, column: 17, scope: !1977)
!1981 = !DILocation(line: 2017, column: 16, scope: !1977)
!1982 = !DILocation(line: 2017, column: 9, scope: !1977)
!1983 = !DILocation(line: 2017, column: 43, scope: !1984)
!1984 = !DILexicalBlockFile(scope: !1978, file: !103, discriminator: 2)
!1985 = !DILocation(line: 2017, column: 40, scope: !1984)
!1986 = !DILocation(line: 2017, column: 35, scope: !1984)
!1987 = !DILocation(line: 2017, column: 34, scope: !1984)
!1988 = !DILocation(line: 2017, column: 36, scope: !1984)
!1989 = !DILocation(line: 2017, column: 31, scope: !1984)
!1990 = !DILocation(line: 2017, column: 39, scope: !1984)
!1991 = !DILocation(line: 2017, column: 28, scope: !1984)
!1992 = !DILocation(line: 2017, column: 27, scope: !1984)
!1993 = !DILocation(line: 2017, column: 24, scope: !1984)
!1994 = !DILocation(line: 2017, column: 30, scope: !1984)
!1995 = !DILocation(line: 2017, column: 20, scope: !1996)
!1996 = !DILexicalBlockFile(scope: !1978, file: !103, discriminator: 3)
!1997 = !DILocation(line: 2017, column: 9, scope: !1996)
!1998 = distinct !{!1998, !1975}
!1999 = !DILocation(line: 2018, column: 5, scope: !1939)
!2000 = !DILocation(line: 1983, column: 19, scope: !2001)
!2001 = !DILexicalBlockFile(scope: !1934, file: !103, discriminator: 2)
!2002 = !DILocation(line: 1983, column: 5, scope: !2001)
!2003 = distinct !{!2003, !2004}
!2004 = !DILocation(line: 1983, column: 5, scope: !1808)
!2005 = !DILocation(line: 2019, column: 5, scope: !1808)
!2006 = !{i32 228552, i32 228568, i32 228600}
!2007 = !DILocation(line: 2024, column: 1, scope: !1808)
!2008 = distinct !DISubprogram(name: "yvu9_to_yuy2_mmx", scope: !103, file: !103, line: 2026, type: !2009, isLocal: true, isDefinition: true, scopeLine: 2031, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2009 = !DISubroutineType(types: !2010)
!2010 = !{null, !182, !182, !182, !15, !72, !72, !72, !72, !72, !72}
!2011 = !DILocalVariable(name: "src1", arg: 1, scope: !2008, file: !103, line: 2026, type: !182)
!2012 = !DILocation(line: 2026, column: 52, scope: !2008)
!2013 = !DILocalVariable(name: "src2", arg: 2, scope: !2008, file: !103, line: 2026, type: !182)
!2014 = !DILocation(line: 2026, column: 73, scope: !2008)
!2015 = !DILocalVariable(name: "src3", arg: 3, scope: !2008, file: !103, line: 2026, type: !182)
!2016 = !DILocation(line: 2026, column: 94, scope: !2008)
!2017 = !DILocalVariable(name: "dst", arg: 4, scope: !2008, file: !103, line: 2027, type: !15)
!2018 = !DILocation(line: 2027, column: 50, scope: !2008)
!2019 = !DILocalVariable(name: "width", arg: 5, scope: !2008, file: !103, line: 2028, type: !72)
!2020 = !DILocation(line: 2028, column: 45, scope: !2008)
!2021 = !DILocalVariable(name: "height", arg: 6, scope: !2008, file: !103, line: 2028, type: !72)
!2022 = !DILocation(line: 2028, column: 56, scope: !2008)
!2023 = !DILocalVariable(name: "srcStride1", arg: 7, scope: !2008, file: !103, line: 2029, type: !72)
!2024 = !DILocation(line: 2029, column: 45, scope: !2008)
!2025 = !DILocalVariable(name: "srcStride2", arg: 8, scope: !2008, file: !103, line: 2029, type: !72)
!2026 = !DILocation(line: 2029, column: 61, scope: !2008)
!2027 = !DILocalVariable(name: "srcStride3", arg: 9, scope: !2008, file: !103, line: 2030, type: !72)
!2028 = !DILocation(line: 2030, column: 45, scope: !2008)
!2029 = !DILocalVariable(name: "dstStride", arg: 10, scope: !2008, file: !103, line: 2030, type: !72)
!2030 = !DILocation(line: 2030, column: 61, scope: !2008)
!2031 = !DILocalVariable(name: "x", scope: !2008, file: !103, line: 2032, type: !18)
!2032 = !DILocation(line: 2032, column: 13, scope: !2008)
!2033 = !DILocalVariable(name: "y", scope: !2008, file: !103, line: 2033, type: !72)
!2034 = !DILocation(line: 2033, column: 9, scope: !2008)
!2035 = !DILocalVariable(name: "w", scope: !2008, file: !103, line: 2033, type: !72)
!2036 = !DILocation(line: 2033, column: 11, scope: !2008)
!2037 = !DILocalVariable(name: "h", scope: !2008, file: !103, line: 2033, type: !72)
!2038 = !DILocation(line: 2033, column: 13, scope: !2008)
!2039 = !DILocation(line: 2034, column: 7, scope: !2008)
!2040 = !DILocation(line: 2034, column: 12, scope: !2008)
!2041 = !DILocation(line: 2034, column: 6, scope: !2008)
!2042 = !DILocation(line: 2034, column: 18, scope: !2008)
!2043 = !DILocation(line: 2034, column: 17, scope: !2008)
!2044 = !DILocation(line: 2035, column: 11, scope: !2045)
!2045 = distinct !DILexicalBlock(scope: !2008, file: !103, line: 2035, column: 5)
!2046 = !DILocation(line: 2035, column: 10, scope: !2045)
!2047 = !DILocation(line: 2035, column: 14, scope: !2048)
!2048 = !DILexicalBlockFile(scope: !2049, file: !103, discriminator: 1)
!2049 = distinct !DILexicalBlock(scope: !2045, file: !103, line: 2035, column: 5)
!2050 = !DILocation(line: 2035, column: 16, scope: !2048)
!2051 = !DILocation(line: 2035, column: 15, scope: !2048)
!2052 = !DILocation(line: 2035, column: 5, scope: !2048)
!2053 = !DILocalVariable(name: "yp", scope: !2054, file: !103, line: 2036, type: !182)
!2054 = distinct !DILexicalBlock(scope: !2049, file: !103, line: 2035, column: 23)
!2055 = !DILocation(line: 2036, column: 24, scope: !2054)
!2056 = !DILocation(line: 2036, column: 27, scope: !2054)
!2057 = !DILocation(line: 2036, column: 32, scope: !2054)
!2058 = !DILocation(line: 2036, column: 43, scope: !2054)
!2059 = !DILocation(line: 2036, column: 42, scope: !2054)
!2060 = !DILocation(line: 2036, column: 31, scope: !2054)
!2061 = !DILocalVariable(name: "up", scope: !2054, file: !103, line: 2037, type: !182)
!2062 = !DILocation(line: 2037, column: 24, scope: !2054)
!2063 = !DILocation(line: 2037, column: 27, scope: !2054)
!2064 = !DILocation(line: 2037, column: 32, scope: !2054)
!2065 = !DILocation(line: 2037, column: 44, scope: !2054)
!2066 = !DILocation(line: 2037, column: 45, scope: !2054)
!2067 = !DILocation(line: 2037, column: 42, scope: !2054)
!2068 = !DILocation(line: 2037, column: 31, scope: !2054)
!2069 = !DILocalVariable(name: "vp", scope: !2054, file: !103, line: 2038, type: !182)
!2070 = !DILocation(line: 2038, column: 24, scope: !2054)
!2071 = !DILocation(line: 2038, column: 27, scope: !2054)
!2072 = !DILocation(line: 2038, column: 32, scope: !2054)
!2073 = !DILocation(line: 2038, column: 44, scope: !2054)
!2074 = !DILocation(line: 2038, column: 45, scope: !2054)
!2075 = !DILocation(line: 2038, column: 42, scope: !2054)
!2076 = !DILocation(line: 2038, column: 31, scope: !2054)
!2077 = !DILocalVariable(name: "d", scope: !2054, file: !103, line: 2039, type: !15)
!2078 = !DILocation(line: 2039, column: 18, scope: !2054)
!2079 = !DILocation(line: 2039, column: 20, scope: !2054)
!2080 = !DILocation(line: 2039, column: 24, scope: !2054)
!2081 = !DILocation(line: 2039, column: 34, scope: !2054)
!2082 = !DILocation(line: 2039, column: 33, scope: !2054)
!2083 = !DILocation(line: 2039, column: 23, scope: !2054)
!2084 = !DILocation(line: 2040, column: 10, scope: !2054)
!2085 = !DILocation(line: 2041, column: 9, scope: !2054)
!2086 = !DILocation(line: 2041, column: 15, scope: !2087)
!2087 = !DILexicalBlockFile(scope: !2088, file: !103, discriminator: 1)
!2088 = distinct !DILexicalBlock(scope: !2089, file: !103, line: 2041, column: 9)
!2089 = distinct !DILexicalBlock(scope: !2054, file: !103, line: 2041, column: 9)
!2090 = !DILocation(line: 2041, column: 17, scope: !2087)
!2091 = !DILocation(line: 2041, column: 18, scope: !2087)
!2092 = !DILocation(line: 2041, column: 16, scope: !2087)
!2093 = !DILocation(line: 2041, column: 9, scope: !2087)
!2094 = !DILocation(line: 2042, column: 13, scope: !2095)
!2095 = distinct !DILexicalBlock(scope: !2088, file: !103, line: 2041, column: 27)
!2096 = !DILocation(line: 2090, column: 23, scope: !2095)
!2097 = !DILocation(line: 2090, column: 33, scope: !2095)
!2098 = !DILocation(line: 2090, column: 42, scope: !2095)
!2099 = !DILocation(line: 2090, column: 51, scope: !2095)
!2100 = !{i32 229351, i32 229385, i32 229439, i32 229493, i32 229547, i32 229601, i32 229655, i32 229709, i32 229763, i32 229817, i32 229871, i32 229925, i32 229979, i32 230033, i32 230088, i32 230142, i32 230196, i32 230250, i32 230312, i32 230374, i32 230429, i32 230483, i32 230537, i32 230591, i32 230645, i32 230707, i32 230769, i32 230824, i32 230878, i32 230932, i32 230986, i32 231040, i32 231094, i32 231156, i32 231218, i32 231273, i32 231327, i32 231381, i32 231435, i32 231489, i32 231551, i32 231613}
!2101 = !DILocation(line: 2092, column: 9, scope: !2095)
!2102 = !DILocation(line: 2041, column: 22, scope: !2103)
!2103 = !DILexicalBlockFile(scope: !2088, file: !103, discriminator: 2)
!2104 = !DILocation(line: 2041, column: 9, scope: !2103)
!2105 = distinct !{!2105, !2085}
!2106 = !DILocation(line: 2093, column: 9, scope: !2054)
!2107 = !DILocation(line: 2093, column: 16, scope: !2108)
!2108 = !DILexicalBlockFile(scope: !2109, file: !103, discriminator: 1)
!2109 = distinct !DILexicalBlock(scope: !2110, file: !103, line: 2093, column: 9)
!2110 = distinct !DILexicalBlock(scope: !2054, file: !103, line: 2093, column: 9)
!2111 = !DILocation(line: 2093, column: 18, scope: !2108)
!2112 = !DILocation(line: 2093, column: 17, scope: !2108)
!2113 = !DILocation(line: 2093, column: 9, scope: !2108)
!2114 = !DILocalVariable(name: "x2", scope: !2115, file: !103, line: 2094, type: !826)
!2115 = distinct !DILexicalBlock(scope: !2109, file: !103, line: 2093, column: 26)
!2116 = !DILocation(line: 2094, column: 23, scope: !2115)
!2117 = !DILocation(line: 2094, column: 28, scope: !2115)
!2118 = !DILocation(line: 2094, column: 29, scope: !2115)
!2119 = !DILocation(line: 2095, column: 27, scope: !2115)
!2120 = !DILocation(line: 2095, column: 24, scope: !2115)
!2121 = !DILocation(line: 2095, column: 17, scope: !2115)
!2122 = !DILocation(line: 2095, column: 16, scope: !2115)
!2123 = !DILocation(line: 2095, column: 18, scope: !2115)
!2124 = !DILocation(line: 2095, column: 13, scope: !2115)
!2125 = !DILocation(line: 2095, column: 22, scope: !2115)
!2126 = !DILocation(line: 2096, column: 27, scope: !2115)
!2127 = !DILocation(line: 2096, column: 24, scope: !2115)
!2128 = !DILocation(line: 2096, column: 17, scope: !2115)
!2129 = !DILocation(line: 2096, column: 16, scope: !2115)
!2130 = !DILocation(line: 2096, column: 18, scope: !2115)
!2131 = !DILocation(line: 2096, column: 13, scope: !2115)
!2132 = !DILocation(line: 2096, column: 22, scope: !2115)
!2133 = !DILocation(line: 2097, column: 27, scope: !2115)
!2134 = !DILocation(line: 2097, column: 29, scope: !2115)
!2135 = !DILocation(line: 2097, column: 24, scope: !2115)
!2136 = !DILocation(line: 2097, column: 17, scope: !2115)
!2137 = !DILocation(line: 2097, column: 16, scope: !2115)
!2138 = !DILocation(line: 2097, column: 18, scope: !2115)
!2139 = !DILocation(line: 2097, column: 13, scope: !2115)
!2140 = !DILocation(line: 2097, column: 22, scope: !2115)
!2141 = !DILocation(line: 2098, column: 27, scope: !2115)
!2142 = !DILocation(line: 2098, column: 24, scope: !2115)
!2143 = !DILocation(line: 2098, column: 17, scope: !2115)
!2144 = !DILocation(line: 2098, column: 16, scope: !2115)
!2145 = !DILocation(line: 2098, column: 18, scope: !2115)
!2146 = !DILocation(line: 2098, column: 13, scope: !2115)
!2147 = !DILocation(line: 2098, column: 22, scope: !2115)
!2148 = !DILocation(line: 2099, column: 27, scope: !2115)
!2149 = !DILocation(line: 2099, column: 29, scope: !2115)
!2150 = !DILocation(line: 2099, column: 24, scope: !2115)
!2151 = !DILocation(line: 2099, column: 17, scope: !2115)
!2152 = !DILocation(line: 2099, column: 16, scope: !2115)
!2153 = !DILocation(line: 2099, column: 18, scope: !2115)
!2154 = !DILocation(line: 2099, column: 13, scope: !2115)
!2155 = !DILocation(line: 2099, column: 22, scope: !2115)
!2156 = !DILocation(line: 2100, column: 27, scope: !2115)
!2157 = !DILocation(line: 2100, column: 24, scope: !2115)
!2158 = !DILocation(line: 2100, column: 17, scope: !2115)
!2159 = !DILocation(line: 2100, column: 16, scope: !2115)
!2160 = !DILocation(line: 2100, column: 18, scope: !2115)
!2161 = !DILocation(line: 2100, column: 13, scope: !2115)
!2162 = !DILocation(line: 2100, column: 22, scope: !2115)
!2163 = !DILocation(line: 2101, column: 27, scope: !2115)
!2164 = !DILocation(line: 2101, column: 29, scope: !2115)
!2165 = !DILocation(line: 2101, column: 24, scope: !2115)
!2166 = !DILocation(line: 2101, column: 17, scope: !2115)
!2167 = !DILocation(line: 2101, column: 16, scope: !2115)
!2168 = !DILocation(line: 2101, column: 18, scope: !2115)
!2169 = !DILocation(line: 2101, column: 13, scope: !2115)
!2170 = !DILocation(line: 2101, column: 22, scope: !2115)
!2171 = !DILocation(line: 2102, column: 27, scope: !2115)
!2172 = !DILocation(line: 2102, column: 24, scope: !2115)
!2173 = !DILocation(line: 2102, column: 17, scope: !2115)
!2174 = !DILocation(line: 2102, column: 16, scope: !2115)
!2175 = !DILocation(line: 2102, column: 18, scope: !2115)
!2176 = !DILocation(line: 2102, column: 13, scope: !2115)
!2177 = !DILocation(line: 2102, column: 22, scope: !2115)
!2178 = !DILocation(line: 2103, column: 9, scope: !2115)
!2179 = !DILocation(line: 2093, column: 22, scope: !2180)
!2180 = !DILexicalBlockFile(scope: !2109, file: !103, discriminator: 2)
!2181 = !DILocation(line: 2093, column: 9, scope: !2180)
!2182 = distinct !{!2182, !2106}
!2183 = !DILocation(line: 2104, column: 5, scope: !2054)
!2184 = !DILocation(line: 2035, column: 19, scope: !2185)
!2185 = !DILexicalBlockFile(scope: !2049, file: !103, discriminator: 2)
!2186 = !DILocation(line: 2035, column: 5, scope: !2185)
!2187 = distinct !{!2187, !2188}
!2188 = !DILocation(line: 2035, column: 5, scope: !2008)
!2189 = !DILocation(line: 2105, column: 5, scope: !2008)
!2190 = !{i32 232087, i32 232103, i32 232135}
!2191 = !DILocation(line: 2110, column: 1, scope: !2008)
!2192 = distinct !DISubprogram(name: "uyvytoyuv422_mmx", scope: !103, file: !103, line: 2469, type: !2193, isLocal: true, isDefinition: true, scopeLine: 2472, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2193 = !DISubroutineType(types: !2194)
!2194 = !{null, !15, !15, !15, !182, !72, !72, !72, !72, !72}
!2195 = !DILocalVariable(name: "ydst", arg: 1, scope: !2192, file: !103, line: 2469, type: !15)
!2196 = !DILocation(line: 2469, column: 39, scope: !2192)
!2197 = !DILocalVariable(name: "udst", arg: 2, scope: !2192, file: !103, line: 2469, type: !15)
!2198 = !DILocation(line: 2469, column: 54, scope: !2192)
!2199 = !DILocalVariable(name: "vdst", arg: 3, scope: !2192, file: !103, line: 2469, type: !15)
!2200 = !DILocation(line: 2469, column: 69, scope: !2192)
!2201 = !DILocalVariable(name: "src", arg: 4, scope: !2192, file: !103, line: 2469, type: !182)
!2202 = !DILocation(line: 2469, column: 90, scope: !2192)
!2203 = !DILocalVariable(name: "width", arg: 5, scope: !2192, file: !103, line: 2470, type: !72)
!2204 = !DILocation(line: 2470, column: 38, scope: !2192)
!2205 = !DILocalVariable(name: "height", arg: 6, scope: !2192, file: !103, line: 2470, type: !72)
!2206 = !DILocation(line: 2470, column: 49, scope: !2192)
!2207 = !DILocalVariable(name: "lumStride", arg: 7, scope: !2192, file: !103, line: 2471, type: !72)
!2208 = !DILocation(line: 2471, column: 38, scope: !2192)
!2209 = !DILocalVariable(name: "chromStride", arg: 8, scope: !2192, file: !103, line: 2471, type: !72)
!2210 = !DILocation(line: 2471, column: 53, scope: !2192)
!2211 = !DILocalVariable(name: "srcStride", arg: 9, scope: !2192, file: !103, line: 2471, type: !72)
!2212 = !DILocation(line: 2471, column: 70, scope: !2192)
!2213 = !DILocalVariable(name: "y", scope: !2192, file: !103, line: 2473, type: !72)
!2214 = !DILocation(line: 2473, column: 9, scope: !2192)
!2215 = !DILocalVariable(name: "chromWidth", scope: !2192, file: !103, line: 2474, type: !826)
!2216 = !DILocation(line: 2474, column: 15, scope: !2192)
!2217 = !DILocation(line: 2474, column: 81, scope: !2192)
!2218 = !DILocation(line: 2474, column: 88, scope: !2192)
!2219 = !DILocation(line: 2474, column: 99, scope: !2192)
!2220 = !DILocation(line: 2474, column: 104, scope: !2192)
!2221 = !DILocation(line: 2476, column: 11, scope: !2222)
!2222 = distinct !DILexicalBlock(scope: !2192, file: !103, line: 2476, column: 5)
!2223 = !DILocation(line: 2476, column: 10, scope: !2222)
!2224 = !DILocation(line: 2476, column: 15, scope: !2225)
!2225 = !DILexicalBlockFile(scope: !2226, file: !103, discriminator: 1)
!2226 = distinct !DILexicalBlock(scope: !2222, file: !103, line: 2476, column: 5)
!2227 = !DILocation(line: 2476, column: 17, scope: !2225)
!2228 = !DILocation(line: 2476, column: 16, scope: !2225)
!2229 = !DILocation(line: 2476, column: 5, scope: !2225)
!2230 = !DILocation(line: 2477, column: 25, scope: !2231)
!2231 = distinct !DILexicalBlock(scope: !2226, file: !103, line: 2476, column: 30)
!2232 = !DILocation(line: 2477, column: 30, scope: !2231)
!2233 = !DILocation(line: 2477, column: 36, scope: !2231)
!2234 = !DILocation(line: 2477, column: 9, scope: !2231)
!2235 = !DILocation(line: 2478, column: 27, scope: !2231)
!2236 = !DILocation(line: 2478, column: 32, scope: !2231)
!2237 = !DILocation(line: 2478, column: 38, scope: !2231)
!2238 = !DILocation(line: 2478, column: 44, scope: !2231)
!2239 = !DILocation(line: 2478, column: 9, scope: !2231)
!2240 = !DILocation(line: 2480, column: 16, scope: !2231)
!2241 = !DILocation(line: 2480, column: 13, scope: !2231)
!2242 = !DILocation(line: 2481, column: 16, scope: !2231)
!2243 = !DILocation(line: 2481, column: 13, scope: !2231)
!2244 = !DILocation(line: 2482, column: 16, scope: !2231)
!2245 = !DILocation(line: 2482, column: 13, scope: !2231)
!2246 = !DILocation(line: 2483, column: 16, scope: !2231)
!2247 = !DILocation(line: 2483, column: 13, scope: !2231)
!2248 = !DILocation(line: 2484, column: 5, scope: !2231)
!2249 = !DILocation(line: 2476, column: 26, scope: !2250)
!2250 = !DILexicalBlockFile(scope: !2226, file: !103, discriminator: 2)
!2251 = !DILocation(line: 2476, column: 5, scope: !2250)
!2252 = distinct !{!2252, !2253}
!2253 = !DILocation(line: 2476, column: 5, scope: !2192)
!2254 = !DILocation(line: 2485, column: 5, scope: !2192)
!2255 = !{i32 242148, i32 242164, i32 242196}
!2256 = !DILocation(line: 2490, column: 1, scope: !2192)
!2257 = distinct !DISubprogram(name: "yuyvtoyuv422_mmx", scope: !103, file: !103, line: 2419, type: !2193, isLocal: true, isDefinition: true, scopeLine: 2422, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2258 = !DILocalVariable(name: "ydst", arg: 1, scope: !2257, file: !103, line: 2419, type: !15)
!2259 = !DILocation(line: 2419, column: 39, scope: !2257)
!2260 = !DILocalVariable(name: "udst", arg: 2, scope: !2257, file: !103, line: 2419, type: !15)
!2261 = !DILocation(line: 2419, column: 54, scope: !2257)
!2262 = !DILocalVariable(name: "vdst", arg: 3, scope: !2257, file: !103, line: 2419, type: !15)
!2263 = !DILocation(line: 2419, column: 69, scope: !2257)
!2264 = !DILocalVariable(name: "src", arg: 4, scope: !2257, file: !103, line: 2419, type: !182)
!2265 = !DILocation(line: 2419, column: 90, scope: !2257)
!2266 = !DILocalVariable(name: "width", arg: 5, scope: !2257, file: !103, line: 2420, type: !72)
!2267 = !DILocation(line: 2420, column: 38, scope: !2257)
!2268 = !DILocalVariable(name: "height", arg: 6, scope: !2257, file: !103, line: 2420, type: !72)
!2269 = !DILocation(line: 2420, column: 49, scope: !2257)
!2270 = !DILocalVariable(name: "lumStride", arg: 7, scope: !2257, file: !103, line: 2421, type: !72)
!2271 = !DILocation(line: 2421, column: 38, scope: !2257)
!2272 = !DILocalVariable(name: "chromStride", arg: 8, scope: !2257, file: !103, line: 2421, type: !72)
!2273 = !DILocation(line: 2421, column: 53, scope: !2257)
!2274 = !DILocalVariable(name: "srcStride", arg: 9, scope: !2257, file: !103, line: 2421, type: !72)
!2275 = !DILocation(line: 2421, column: 70, scope: !2257)
!2276 = !DILocalVariable(name: "y", scope: !2257, file: !103, line: 2423, type: !72)
!2277 = !DILocation(line: 2423, column: 9, scope: !2257)
!2278 = !DILocalVariable(name: "chromWidth", scope: !2257, file: !103, line: 2424, type: !826)
!2279 = !DILocation(line: 2424, column: 15, scope: !2257)
!2280 = !DILocation(line: 2424, column: 81, scope: !2257)
!2281 = !DILocation(line: 2424, column: 88, scope: !2257)
!2282 = !DILocation(line: 2424, column: 99, scope: !2257)
!2283 = !DILocation(line: 2424, column: 104, scope: !2257)
!2284 = !DILocation(line: 2426, column: 11, scope: !2285)
!2285 = distinct !DILexicalBlock(scope: !2257, file: !103, line: 2426, column: 5)
!2286 = !DILocation(line: 2426, column: 10, scope: !2285)
!2287 = !DILocation(line: 2426, column: 15, scope: !2288)
!2288 = !DILexicalBlockFile(scope: !2289, file: !103, discriminator: 1)
!2289 = distinct !DILexicalBlock(scope: !2285, file: !103, line: 2426, column: 5)
!2290 = !DILocation(line: 2426, column: 17, scope: !2288)
!2291 = !DILocation(line: 2426, column: 16, scope: !2288)
!2292 = !DILocation(line: 2426, column: 5, scope: !2288)
!2293 = !DILocation(line: 2427, column: 26, scope: !2294)
!2294 = distinct !DILexicalBlock(scope: !2289, file: !103, line: 2426, column: 30)
!2295 = !DILocation(line: 2427, column: 31, scope: !2294)
!2296 = !DILocation(line: 2427, column: 37, scope: !2294)
!2297 = !DILocation(line: 2427, column: 9, scope: !2294)
!2298 = !DILocation(line: 2428, column: 26, scope: !2294)
!2299 = !DILocation(line: 2428, column: 31, scope: !2294)
!2300 = !DILocation(line: 2428, column: 37, scope: !2294)
!2301 = !DILocation(line: 2428, column: 43, scope: !2294)
!2302 = !DILocation(line: 2428, column: 9, scope: !2294)
!2303 = !DILocation(line: 2430, column: 16, scope: !2294)
!2304 = !DILocation(line: 2430, column: 13, scope: !2294)
!2305 = !DILocation(line: 2431, column: 16, scope: !2294)
!2306 = !DILocation(line: 2431, column: 13, scope: !2294)
!2307 = !DILocation(line: 2432, column: 16, scope: !2294)
!2308 = !DILocation(line: 2432, column: 13, scope: !2294)
!2309 = !DILocation(line: 2433, column: 16, scope: !2294)
!2310 = !DILocation(line: 2433, column: 13, scope: !2294)
!2311 = !DILocation(line: 2434, column: 5, scope: !2294)
!2312 = !DILocation(line: 2426, column: 26, scope: !2313)
!2313 = !DILexicalBlockFile(scope: !2289, file: !103, discriminator: 2)
!2314 = !DILocation(line: 2426, column: 5, scope: !2313)
!2315 = distinct !{!2315, !2316}
!2316 = !DILocation(line: 2426, column: 5, scope: !2257)
!2317 = !DILocation(line: 2435, column: 5, scope: !2257)
!2318 = !{i32 240654, i32 240670, i32 240702}
!2319 = !DILocation(line: 2440, column: 1, scope: !2257)
!2320 = distinct !DISubprogram(name: "rgb24toyv12_mmx", scope: !103, file: !103, line: 1572, type: !2321, isLocal: true, isDefinition: true, scopeLine: 1576, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2321 = !DISubroutineType(types: !2322)
!2322 = !{null, !182, !15, !15, !15, !72, !72, !72, !72, !72, !2323}
!2323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2324, size: 64, align: 64)
!2324 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !7, line: 38, baseType: !72)
!2325 = !DILocalVariable(name: "src", arg: 1, scope: !2320, file: !103, line: 1572, type: !182)
!2326 = !DILocation(line: 1572, column: 51, scope: !2320)
!2327 = !DILocalVariable(name: "ydst", arg: 2, scope: !2320, file: !103, line: 1572, type: !15)
!2328 = !DILocation(line: 1572, column: 65, scope: !2320)
!2329 = !DILocalVariable(name: "udst", arg: 3, scope: !2320, file: !103, line: 1572, type: !15)
!2330 = !DILocation(line: 1572, column: 80, scope: !2320)
!2331 = !DILocalVariable(name: "vdst", arg: 4, scope: !2320, file: !103, line: 1572, type: !15)
!2332 = !DILocation(line: 1572, column: 95, scope: !2320)
!2333 = !DILocalVariable(name: "width", arg: 5, scope: !2320, file: !103, line: 1573, type: !72)
!2334 = !DILocation(line: 1573, column: 44, scope: !2320)
!2335 = !DILocalVariable(name: "height", arg: 6, scope: !2320, file: !103, line: 1573, type: !72)
!2336 = !DILocation(line: 1573, column: 55, scope: !2320)
!2337 = !DILocalVariable(name: "lumStride", arg: 7, scope: !2320, file: !103, line: 1574, type: !72)
!2338 = !DILocation(line: 1574, column: 44, scope: !2320)
!2339 = !DILocalVariable(name: "chromStride", arg: 8, scope: !2320, file: !103, line: 1574, type: !72)
!2340 = !DILocation(line: 1574, column: 59, scope: !2320)
!2341 = !DILocalVariable(name: "srcStride", arg: 9, scope: !2320, file: !103, line: 1574, type: !72)
!2342 = !DILocation(line: 1574, column: 76, scope: !2320)
!2343 = !DILocalVariable(name: "rgb2yuv", arg: 10, scope: !2320, file: !103, line: 1575, type: !2323)
!2344 = !DILocation(line: 1575, column: 49, scope: !2320)
!2345 = !DILocalVariable(name: "y", scope: !2320, file: !103, line: 1580, type: !72)
!2346 = !DILocation(line: 1580, column: 9, scope: !2320)
!2347 = !DILocalVariable(name: "chromWidth", scope: !2320, file: !103, line: 1581, type: !1759)
!2348 = !DILocation(line: 1581, column: 19, scope: !2320)
!2349 = !DILocation(line: 1581, column: 31, scope: !2320)
!2350 = !DILocation(line: 1581, column: 36, scope: !2320)
!2351 = !DILocation(line: 1583, column: 9, scope: !2352)
!2352 = distinct !DILexicalBlock(scope: !2320, file: !103, line: 1583, column: 9)
!2353 = !DILocation(line: 1583, column: 16, scope: !2352)
!2354 = !DILocation(line: 1583, column: 9, scope: !2320)
!2355 = !DILocation(line: 1584, column: 26, scope: !2356)
!2356 = distinct !DILexicalBlock(scope: !2352, file: !103, line: 1583, column: 21)
!2357 = !DILocation(line: 1584, column: 31, scope: !2356)
!2358 = !DILocation(line: 1584, column: 37, scope: !2356)
!2359 = !DILocation(line: 1584, column: 43, scope: !2356)
!2360 = !DILocation(line: 1584, column: 49, scope: !2356)
!2361 = !DILocation(line: 1584, column: 59, scope: !2356)
!2362 = !DILocation(line: 1584, column: 70, scope: !2356)
!2363 = !DILocation(line: 1584, column: 83, scope: !2356)
!2364 = !DILocation(line: 1584, column: 94, scope: !2356)
!2365 = !DILocation(line: 1584, column: 9, scope: !2356)
!2366 = !DILocation(line: 1585, column: 18, scope: !2356)
!2367 = !DILocation(line: 1585, column: 17, scope: !2356)
!2368 = !DILocation(line: 1585, column: 13, scope: !2356)
!2369 = !DILocation(line: 1586, column: 19, scope: !2356)
!2370 = !DILocation(line: 1586, column: 18, scope: !2356)
!2371 = !DILocation(line: 1586, column: 14, scope: !2356)
!2372 = !DILocation(line: 1587, column: 17, scope: !2356)
!2373 = !DILocation(line: 1587, column: 14, scope: !2356)
!2374 = !DILocation(line: 1588, column: 17, scope: !2356)
!2375 = !DILocation(line: 1588, column: 14, scope: !2356)
!2376 = !DILocation(line: 1589, column: 16, scope: !2356)
!2377 = !DILocation(line: 1590, column: 5, scope: !2356)
!2378 = !DILocation(line: 1592, column: 11, scope: !2379)
!2379 = distinct !DILexicalBlock(scope: !2320, file: !103, line: 1592, column: 5)
!2380 = !DILocation(line: 1592, column: 10, scope: !2379)
!2381 = !DILocation(line: 1592, column: 15, scope: !2382)
!2382 = !DILexicalBlockFile(scope: !2383, file: !103, discriminator: 1)
!2383 = distinct !DILexicalBlock(scope: !2379, file: !103, line: 1592, column: 5)
!2384 = !DILocation(line: 1592, column: 17, scope: !2382)
!2385 = !DILocation(line: 1592, column: 23, scope: !2382)
!2386 = !DILocation(line: 1592, column: 16, scope: !2382)
!2387 = !DILocation(line: 1592, column: 5, scope: !2382)
!2388 = !DILocalVariable(name: "i", scope: !2389, file: !103, line: 1593, type: !72)
!2389 = distinct !DILexicalBlock(scope: !2383, file: !103, line: 1592, column: 33)
!2390 = !DILocation(line: 1593, column: 13, scope: !2389)
!2391 = !DILocation(line: 1594, column: 15, scope: !2392)
!2392 = distinct !DILexicalBlock(scope: !2389, file: !103, line: 1594, column: 9)
!2393 = !DILocation(line: 1594, column: 14, scope: !2392)
!2394 = !DILocation(line: 1594, column: 19, scope: !2395)
!2395 = !DILexicalBlockFile(scope: !2396, file: !103, discriminator: 1)
!2396 = distinct !DILexicalBlock(scope: !2392, file: !103, line: 1594, column: 9)
!2397 = !DILocation(line: 1594, column: 20, scope: !2395)
!2398 = !DILocation(line: 1594, column: 9, scope: !2395)
!2399 = !DILocation(line: 1657, column: 26, scope: !2400)
!2400 = distinct !DILexicalBlock(scope: !2396, file: !103, line: 1594, column: 29)
!2401 = !DILocation(line: 1657, column: 30, scope: !2400)
!2402 = !DILocation(line: 1657, column: 35, scope: !2400)
!2403 = !DILocation(line: 1657, column: 29, scope: !2400)
!2404 = !DILocation(line: 1657, column: 45, scope: !2400)
!2405 = !DILocation(line: 1657, column: 50, scope: !2400)
!2406 = !DILocation(line: 1657, column: 49, scope: !2400)
!2407 = !DILocation(line: 1657, column: 73, scope: !2400)
!2408 = !DILocation(line: 1657, column: 72, scope: !2400)
!2409 = !DILocation(line: 1657, column: 63, scope: !2400)
!2410 = !DILocation(line: 1657, column: 85, scope: !2400)
!2411 = !DILocation(line: 1595, column: 13, scope: !2400)
!2412 = !{i32 211719, i32 211762, i32 211831, i32 211894, i32 211960, i32 212024, i32 212090, i32 212156, i32 212219, i32 212282, i32 212345, i32 212411, i32 212477, i32 212540, i32 212603, i32 212669, i32 212735, i32 212801, i32 212867, i32 212933, i32 212999, i32 213065, i32 213131, i32 213197, i32 213263, i32 213329, i32 213395, i32 213461, i32 213527, i32 213593, i32 213659, i32 213723, i32 213786, i32 213852, i32 213918, i32 213981, i32 214044, i32 214110, i32 214176, i32 214242, i32 214308, i32 214374, i32 214440, i32 214506, i32 214572, i32 214638, i32 214704, i32 214770, i32 214836, i32 214902, i32 214968, i32 215031, i32 215097, i32 215163, i32 215230, i32 215293, i32 215364, i32 215434, i32 215507}
!2413 = !DILocation(line: 1661, column: 21, scope: !2400)
!2414 = !DILocation(line: 1661, column: 18, scope: !2400)
!2415 = !DILocation(line: 1662, column: 20, scope: !2400)
!2416 = !DILocation(line: 1662, column: 17, scope: !2400)
!2417 = !DILocation(line: 1663, column: 9, scope: !2400)
!2418 = !DILocation(line: 1594, column: 25, scope: !2419)
!2419 = !DILexicalBlockFile(scope: !2396, file: !103, discriminator: 2)
!2420 = !DILocation(line: 1594, column: 9, scope: !2419)
!2421 = distinct !{!2421, !2422}
!2422 = !DILocation(line: 1594, column: 9, scope: !2389)
!2423 = !DILocation(line: 1664, column: 16, scope: !2389)
!2424 = !DILocation(line: 1664, column: 25, scope: !2389)
!2425 = !DILocation(line: 1664, column: 13, scope: !2389)
!2426 = !DILocation(line: 1806, column: 22, scope: !2389)
!2427 = !DILocation(line: 1806, column: 26, scope: !2389)
!2428 = !DILocation(line: 1806, column: 36, scope: !2389)
!2429 = !DILocation(line: 1806, column: 25, scope: !2389)
!2430 = !DILocation(line: 1806, column: 46, scope: !2389)
!2431 = !DILocation(line: 1806, column: 50, scope: !2389)
!2432 = !DILocation(line: 1806, column: 49, scope: !2389)
!2433 = !DILocation(line: 1806, column: 60, scope: !2389)
!2434 = !DILocation(line: 1806, column: 70, scope: !2389)
!2435 = !DILocation(line: 1806, column: 59, scope: !2389)
!2436 = !DILocation(line: 1806, column: 80, scope: !2389)
!2437 = !DILocation(line: 1806, column: 85, scope: !2389)
!2438 = !DILocation(line: 1806, column: 84, scope: !2389)
!2439 = !DILocation(line: 1806, column: 103, scope: !2389)
!2440 = !DILocation(line: 1806, column: 108, scope: !2389)
!2441 = !DILocation(line: 1806, column: 107, scope: !2389)
!2442 = !DILocation(line: 1806, column: 127, scope: !2389)
!2443 = !DILocation(line: 1806, column: 126, scope: !2389)
!2444 = !DILocation(line: 1806, column: 144, scope: !2389)
!2445 = !DILocation(line: 1665, column: 9, scope: !2389)
!2446 = !{i32 215811, i32 215854, i32 215913, i32 215978, i32 216040, i32 216100, i32 216156, i32 216218, i32 216280, i32 216339, i32 216398, i32 216500, i32 216559, i32 216618, i32 216677, i32 216739, i32 216801, i32 216863, i32 216925, i32 216987, i32 217049, i32 217111, i32 217170, i32 217229, i32 217288, i32 217347, i32 217409, i32 217471, i32 217533, i32 217595, i32 217657, i32 217719, i32 217781, i32 217843, i32 217905, i32 217971, i32 218036, i32 218099, i32 218161, i32 218223, i32 218285, i32 218347, i32 218409, i32 218471, i32 218533, i32 218595, i32 218657, i32 218719, i32 218781, i32 218843, i32 218905, i32 219007, i32 219066, i32 219125, i32 219184, i32 219246, i32 219308, i32 219370, i32 219432, i32 219494, i32 219556, i32 219618, i32 219677, i32 219736, i32 219795, i32 219854, i32 219916, i32 219978, i32 220040, i32 220102, i32 220164, i32 220226, i32 220288, i32 220347, i32 220409, i32 220471, i32 220537, i32 220602, i32 220665, i32 220727, i32 220789, i32 220851, i32 220913, i32 220975, i32 221037, i32 221099, i32 221161, i32 221223, i32 221285, i32 221347, i32 221406, i32 221468, i32 221530, i32 221597, i32 221663, i32 221729, i32 221795, i32 221858, i32 221924, i32 221993, i32 222059, i32 222125, i32 222187}
!2447 = !DILocation(line: 1811, column: 17, scope: !2389)
!2448 = !DILocation(line: 1811, column: 14, scope: !2389)
!2449 = !DILocation(line: 1812, column: 17, scope: !2389)
!2450 = !DILocation(line: 1812, column: 14, scope: !2389)
!2451 = !DILocation(line: 1813, column: 16, scope: !2389)
!2452 = !DILocation(line: 1813, column: 25, scope: !2389)
!2453 = !DILocation(line: 1813, column: 13, scope: !2389)
!2454 = !DILocation(line: 1814, column: 5, scope: !2389)
!2455 = !DILocation(line: 1592, column: 28, scope: !2456)
!2456 = !DILexicalBlockFile(scope: !2383, file: !103, discriminator: 2)
!2457 = !DILocation(line: 1592, column: 5, scope: !2456)
!2458 = distinct !{!2458, !2459}
!2459 = !DILocation(line: 1592, column: 5, scope: !2320)
!2460 = !DILocation(line: 1816, column: 5, scope: !2320)
!2461 = !{i32 222516, i32 222532, i32 222573}
!2462 = !DILocation(line: 1820, column: 23, scope: !2320)
!2463 = !DILocation(line: 1820, column: 28, scope: !2320)
!2464 = !DILocation(line: 1820, column: 34, scope: !2320)
!2465 = !DILocation(line: 1820, column: 40, scope: !2320)
!2466 = !DILocation(line: 1820, column: 46, scope: !2320)
!2467 = !DILocation(line: 1820, column: 53, scope: !2320)
!2468 = !DILocation(line: 1820, column: 60, scope: !2320)
!2469 = !DILocation(line: 1820, column: 59, scope: !2320)
!2470 = !DILocation(line: 1820, column: 63, scope: !2320)
!2471 = !DILocation(line: 1820, column: 74, scope: !2320)
!2472 = !DILocation(line: 1820, column: 87, scope: !2320)
!2473 = !DILocation(line: 1820, column: 98, scope: !2320)
!2474 = !DILocation(line: 1820, column: 6, scope: !2320)
!2475 = !DILocation(line: 1821, column: 1, scope: !2320)
!2476 = distinct !DISubprogram(name: "yuyvtoyuv420_mmx", scope: !103, file: !103, line: 2393, type: !2193, isLocal: true, isDefinition: true, scopeLine: 2396, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2477 = !DILocalVariable(name: "ydst", arg: 1, scope: !2476, file: !103, line: 2393, type: !15)
!2478 = !DILocation(line: 2393, column: 39, scope: !2476)
!2479 = !DILocalVariable(name: "udst", arg: 2, scope: !2476, file: !103, line: 2393, type: !15)
!2480 = !DILocation(line: 2393, column: 54, scope: !2476)
!2481 = !DILocalVariable(name: "vdst", arg: 3, scope: !2476, file: !103, line: 2393, type: !15)
!2482 = !DILocation(line: 2393, column: 69, scope: !2476)
!2483 = !DILocalVariable(name: "src", arg: 4, scope: !2476, file: !103, line: 2393, type: !182)
!2484 = !DILocation(line: 2393, column: 90, scope: !2476)
!2485 = !DILocalVariable(name: "width", arg: 5, scope: !2476, file: !103, line: 2394, type: !72)
!2486 = !DILocation(line: 2394, column: 38, scope: !2476)
!2487 = !DILocalVariable(name: "height", arg: 6, scope: !2476, file: !103, line: 2394, type: !72)
!2488 = !DILocation(line: 2394, column: 49, scope: !2476)
!2489 = !DILocalVariable(name: "lumStride", arg: 7, scope: !2476, file: !103, line: 2395, type: !72)
!2490 = !DILocation(line: 2395, column: 38, scope: !2476)
!2491 = !DILocalVariable(name: "chromStride", arg: 8, scope: !2476, file: !103, line: 2395, type: !72)
!2492 = !DILocation(line: 2395, column: 53, scope: !2476)
!2493 = !DILocalVariable(name: "srcStride", arg: 9, scope: !2476, file: !103, line: 2395, type: !72)
!2494 = !DILocation(line: 2395, column: 70, scope: !2476)
!2495 = !DILocalVariable(name: "y", scope: !2476, file: !103, line: 2397, type: !72)
!2496 = !DILocation(line: 2397, column: 9, scope: !2476)
!2497 = !DILocalVariable(name: "chromWidth", scope: !2476, file: !103, line: 2398, type: !826)
!2498 = !DILocation(line: 2398, column: 15, scope: !2476)
!2499 = !DILocation(line: 2398, column: 81, scope: !2476)
!2500 = !DILocation(line: 2398, column: 88, scope: !2476)
!2501 = !DILocation(line: 2398, column: 99, scope: !2476)
!2502 = !DILocation(line: 2398, column: 104, scope: !2476)
!2503 = !DILocation(line: 2400, column: 11, scope: !2504)
!2504 = distinct !DILexicalBlock(scope: !2476, file: !103, line: 2400, column: 5)
!2505 = !DILocation(line: 2400, column: 10, scope: !2504)
!2506 = !DILocation(line: 2400, column: 15, scope: !2507)
!2507 = !DILexicalBlockFile(scope: !2508, file: !103, discriminator: 1)
!2508 = distinct !DILexicalBlock(scope: !2504, file: !103, line: 2400, column: 5)
!2509 = !DILocation(line: 2400, column: 17, scope: !2507)
!2510 = !DILocation(line: 2400, column: 16, scope: !2507)
!2511 = !DILocation(line: 2400, column: 5, scope: !2507)
!2512 = !DILocation(line: 2401, column: 26, scope: !2513)
!2513 = distinct !DILexicalBlock(scope: !2508, file: !103, line: 2400, column: 30)
!2514 = !DILocation(line: 2401, column: 31, scope: !2513)
!2515 = !DILocation(line: 2401, column: 37, scope: !2513)
!2516 = !DILocation(line: 2401, column: 9, scope: !2513)
!2517 = !DILocation(line: 2402, column: 12, scope: !2518)
!2518 = distinct !DILexicalBlock(scope: !2513, file: !103, line: 2402, column: 12)
!2519 = !DILocation(line: 2402, column: 13, scope: !2518)
!2520 = !DILocation(line: 2402, column: 12, scope: !2513)
!2521 = !DILocation(line: 2403, column: 33, scope: !2522)
!2522 = distinct !DILexicalBlock(scope: !2518, file: !103, line: 2402, column: 17)
!2523 = !DILocation(line: 2403, column: 37, scope: !2522)
!2524 = !DILocation(line: 2403, column: 36, scope: !2522)
!2525 = !DILocation(line: 2403, column: 48, scope: !2522)
!2526 = !DILocation(line: 2403, column: 53, scope: !2522)
!2527 = !DILocation(line: 2403, column: 59, scope: !2522)
!2528 = !DILocation(line: 2403, column: 65, scope: !2522)
!2529 = !DILocation(line: 2403, column: 13, scope: !2522)
!2530 = !DILocation(line: 2404, column: 20, scope: !2522)
!2531 = !DILocation(line: 2404, column: 17, scope: !2522)
!2532 = !DILocation(line: 2405, column: 20, scope: !2522)
!2533 = !DILocation(line: 2405, column: 17, scope: !2522)
!2534 = !DILocation(line: 2406, column: 9, scope: !2522)
!2535 = !DILocation(line: 2408, column: 16, scope: !2513)
!2536 = !DILocation(line: 2408, column: 13, scope: !2513)
!2537 = !DILocation(line: 2409, column: 16, scope: !2513)
!2538 = !DILocation(line: 2409, column: 13, scope: !2513)
!2539 = !DILocation(line: 2410, column: 5, scope: !2513)
!2540 = !DILocation(line: 2400, column: 26, scope: !2541)
!2541 = !DILexicalBlockFile(scope: !2508, file: !103, discriminator: 2)
!2542 = !DILocation(line: 2400, column: 5, scope: !2541)
!2543 = distinct !{!2543, !2544}
!2544 = !DILocation(line: 2400, column: 5, scope: !2476)
!2545 = !DILocation(line: 2411, column: 5, scope: !2476)
!2546 = !{i32 239936, i32 239952, i32 239984}
!2547 = !DILocation(line: 2416, column: 1, scope: !2476)
!2548 = distinct !DISubprogram(name: "uyvytoyuv420_mmx", scope: !103, file: !103, line: 2443, type: !2193, isLocal: true, isDefinition: true, scopeLine: 2446, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2549 = !DILocalVariable(name: "ydst", arg: 1, scope: !2548, file: !103, line: 2443, type: !15)
!2550 = !DILocation(line: 2443, column: 39, scope: !2548)
!2551 = !DILocalVariable(name: "udst", arg: 2, scope: !2548, file: !103, line: 2443, type: !15)
!2552 = !DILocation(line: 2443, column: 54, scope: !2548)
!2553 = !DILocalVariable(name: "vdst", arg: 3, scope: !2548, file: !103, line: 2443, type: !15)
!2554 = !DILocation(line: 2443, column: 69, scope: !2548)
!2555 = !DILocalVariable(name: "src", arg: 4, scope: !2548, file: !103, line: 2443, type: !182)
!2556 = !DILocation(line: 2443, column: 90, scope: !2548)
!2557 = !DILocalVariable(name: "width", arg: 5, scope: !2548, file: !103, line: 2444, type: !72)
!2558 = !DILocation(line: 2444, column: 38, scope: !2548)
!2559 = !DILocalVariable(name: "height", arg: 6, scope: !2548, file: !103, line: 2444, type: !72)
!2560 = !DILocation(line: 2444, column: 49, scope: !2548)
!2561 = !DILocalVariable(name: "lumStride", arg: 7, scope: !2548, file: !103, line: 2445, type: !72)
!2562 = !DILocation(line: 2445, column: 38, scope: !2548)
!2563 = !DILocalVariable(name: "chromStride", arg: 8, scope: !2548, file: !103, line: 2445, type: !72)
!2564 = !DILocation(line: 2445, column: 53, scope: !2548)
!2565 = !DILocalVariable(name: "srcStride", arg: 9, scope: !2548, file: !103, line: 2445, type: !72)
!2566 = !DILocation(line: 2445, column: 70, scope: !2548)
!2567 = !DILocalVariable(name: "y", scope: !2548, file: !103, line: 2447, type: !72)
!2568 = !DILocation(line: 2447, column: 9, scope: !2548)
!2569 = !DILocalVariable(name: "chromWidth", scope: !2548, file: !103, line: 2448, type: !826)
!2570 = !DILocation(line: 2448, column: 15, scope: !2548)
!2571 = !DILocation(line: 2448, column: 81, scope: !2548)
!2572 = !DILocation(line: 2448, column: 88, scope: !2548)
!2573 = !DILocation(line: 2448, column: 99, scope: !2548)
!2574 = !DILocation(line: 2448, column: 104, scope: !2548)
!2575 = !DILocation(line: 2450, column: 11, scope: !2576)
!2576 = distinct !DILexicalBlock(scope: !2548, file: !103, line: 2450, column: 5)
!2577 = !DILocation(line: 2450, column: 10, scope: !2576)
!2578 = !DILocation(line: 2450, column: 15, scope: !2579)
!2579 = !DILexicalBlockFile(scope: !2580, file: !103, discriminator: 1)
!2580 = distinct !DILexicalBlock(scope: !2576, file: !103, line: 2450, column: 5)
!2581 = !DILocation(line: 2450, column: 17, scope: !2579)
!2582 = !DILocation(line: 2450, column: 16, scope: !2579)
!2583 = !DILocation(line: 2450, column: 5, scope: !2579)
!2584 = !DILocation(line: 2451, column: 25, scope: !2585)
!2585 = distinct !DILexicalBlock(scope: !2580, file: !103, line: 2450, column: 30)
!2586 = !DILocation(line: 2451, column: 30, scope: !2585)
!2587 = !DILocation(line: 2451, column: 36, scope: !2585)
!2588 = !DILocation(line: 2451, column: 9, scope: !2585)
!2589 = !DILocation(line: 2452, column: 12, scope: !2590)
!2590 = distinct !DILexicalBlock(scope: !2585, file: !103, line: 2452, column: 12)
!2591 = !DILocation(line: 2452, column: 13, scope: !2590)
!2592 = !DILocation(line: 2452, column: 12, scope: !2585)
!2593 = !DILocation(line: 2453, column: 34, scope: !2594)
!2594 = distinct !DILexicalBlock(scope: !2590, file: !103, line: 2452, column: 17)
!2595 = !DILocation(line: 2453, column: 38, scope: !2594)
!2596 = !DILocation(line: 2453, column: 37, scope: !2594)
!2597 = !DILocation(line: 2453, column: 49, scope: !2594)
!2598 = !DILocation(line: 2453, column: 54, scope: !2594)
!2599 = !DILocation(line: 2453, column: 60, scope: !2594)
!2600 = !DILocation(line: 2453, column: 66, scope: !2594)
!2601 = !DILocation(line: 2453, column: 13, scope: !2594)
!2602 = !DILocation(line: 2454, column: 20, scope: !2594)
!2603 = !DILocation(line: 2454, column: 17, scope: !2594)
!2604 = !DILocation(line: 2455, column: 20, scope: !2594)
!2605 = !DILocation(line: 2455, column: 17, scope: !2594)
!2606 = !DILocation(line: 2456, column: 9, scope: !2594)
!2607 = !DILocation(line: 2458, column: 16, scope: !2585)
!2608 = !DILocation(line: 2458, column: 13, scope: !2585)
!2609 = !DILocation(line: 2459, column: 16, scope: !2585)
!2610 = !DILocation(line: 2459, column: 13, scope: !2585)
!2611 = !DILocation(line: 2460, column: 5, scope: !2585)
!2612 = !DILocation(line: 2450, column: 26, scope: !2613)
!2613 = !DILexicalBlockFile(scope: !2580, file: !103, discriminator: 2)
!2614 = !DILocation(line: 2450, column: 5, scope: !2613)
!2615 = distinct !{!2615, !2616}
!2616 = !DILocation(line: 2450, column: 5, scope: !2548)
!2617 = !DILocation(line: 2461, column: 5, scope: !2548)
!2618 = !{i32 241430, i32 241446, i32 241478}
!2619 = !DILocation(line: 2466, column: 1, scope: !2548)
!2620 = distinct !DISubprogram(name: "interleaveBytes_mmx", scope: !103, file: !103, line: 1826, type: !2621, isLocal: true, isDefinition: true, scopeLine: 1829, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2621 = !DISubroutineType(types: !2622)
!2622 = !{null, !182, !182, !15, !72, !72, !72, !72, !72}
!2623 = !DILocalVariable(name: "src1", arg: 1, scope: !2620, file: !103, line: 1826, type: !182)
!2624 = !DILocation(line: 1826, column: 48, scope: !2620)
!2625 = !DILocalVariable(name: "src2", arg: 2, scope: !2620, file: !103, line: 1826, type: !182)
!2626 = !DILocation(line: 1826, column: 69, scope: !2620)
!2627 = !DILocalVariable(name: "dest", arg: 3, scope: !2620, file: !103, line: 1826, type: !15)
!2628 = !DILocation(line: 1826, column: 84, scope: !2620)
!2629 = !DILocalVariable(name: "width", arg: 4, scope: !2620, file: !103, line: 1827, type: !72)
!2630 = !DILocation(line: 1827, column: 41, scope: !2620)
!2631 = !DILocalVariable(name: "height", arg: 5, scope: !2620, file: !103, line: 1827, type: !72)
!2632 = !DILocation(line: 1827, column: 52, scope: !2620)
!2633 = !DILocalVariable(name: "src1Stride", arg: 6, scope: !2620, file: !103, line: 1827, type: !72)
!2634 = !DILocation(line: 1827, column: 64, scope: !2620)
!2635 = !DILocalVariable(name: "src2Stride", arg: 7, scope: !2620, file: !103, line: 1828, type: !72)
!2636 = !DILocation(line: 1828, column: 41, scope: !2620)
!2637 = !DILocalVariable(name: "dstStride", arg: 8, scope: !2620, file: !103, line: 1828, type: !72)
!2638 = !DILocation(line: 1828, column: 57, scope: !2620)
!2639 = !DILocalVariable(name: "h", scope: !2620, file: !103, line: 1830, type: !72)
!2640 = !DILocation(line: 1830, column: 9, scope: !2620)
!2641 = !DILocation(line: 1832, column: 11, scope: !2642)
!2642 = distinct !DILexicalBlock(scope: !2620, file: !103, line: 1832, column: 5)
!2643 = !DILocation(line: 1832, column: 10, scope: !2642)
!2644 = !DILocation(line: 1832, column: 15, scope: !2645)
!2645 = !DILexicalBlockFile(scope: !2646, file: !103, discriminator: 1)
!2646 = distinct !DILexicalBlock(scope: !2642, file: !103, line: 1832, column: 5)
!2647 = !DILocation(line: 1832, column: 19, scope: !2645)
!2648 = !DILocation(line: 1832, column: 17, scope: !2645)
!2649 = !DILocation(line: 1832, column: 5, scope: !2645)
!2650 = !DILocalVariable(name: "w", scope: !2651, file: !103, line: 1833, type: !72)
!2651 = distinct !DILexicalBlock(scope: !2646, file: !103, line: 1832, column: 32)
!2652 = !DILocation(line: 1833, column: 13, scope: !2651)
!2653 = !DILocation(line: 1835, column: 13, scope: !2654)
!2654 = distinct !DILexicalBlock(scope: !2651, file: !103, line: 1835, column: 13)
!2655 = !DILocation(line: 1835, column: 19, scope: !2654)
!2656 = !DILocation(line: 1835, column: 13, scope: !2651)
!2657 = !DILocation(line: 1880, column: 19, scope: !2658)
!2658 = distinct !DILexicalBlock(scope: !2654, file: !103, line: 1835, column: 26)
!2659 = !DILocation(line: 1880, column: 30, scope: !2658)
!2660 = !DILocation(line: 1880, column: 41, scope: !2658)
!2661 = !DILocation(line: 1880, column: 62, scope: !2658)
!2662 = !DILocation(line: 1880, column: 53, scope: !2658)
!2663 = !DILocation(line: 1880, column: 67, scope: !2658)
!2664 = !DILocation(line: 1858, column: 9, scope: !2658)
!2665 = !{i32 223119, i32 223155, i32 223213, i32 223268, i32 223323, i32 223378, i32 223433, i32 223491, i32 223549, i32 223604, i32 223659, i32 223717, i32 223775, i32 223833, i32 223891, i32 223959, i32 224027, i32 224095, i32 224163, i32 224231, i32 224299, i32 224370}
!2666 = !DILocation(line: 1884, column: 9, scope: !2658)
!2667 = !DILocation(line: 1885, column: 18, scope: !2668)
!2668 = distinct !DILexicalBlock(scope: !2651, file: !103, line: 1885, column: 9)
!2669 = !DILocation(line: 1885, column: 23, scope: !2668)
!2670 = !DILocation(line: 1885, column: 15, scope: !2668)
!2671 = !DILocation(line: 1885, column: 14, scope: !2668)
!2672 = !DILocation(line: 1885, column: 32, scope: !2673)
!2673 = !DILexicalBlockFile(scope: !2674, file: !103, discriminator: 1)
!2674 = distinct !DILexicalBlock(scope: !2668, file: !103, line: 1885, column: 9)
!2675 = !DILocation(line: 1885, column: 36, scope: !2673)
!2676 = !DILocation(line: 1885, column: 34, scope: !2673)
!2677 = !DILocation(line: 1885, column: 9, scope: !2673)
!2678 = !DILocation(line: 1886, column: 32, scope: !2679)
!2679 = distinct !DILexicalBlock(scope: !2674, file: !103, line: 1885, column: 48)
!2680 = !DILocation(line: 1886, column: 27, scope: !2679)
!2681 = !DILocation(line: 1886, column: 20, scope: !2679)
!2682 = !DILocation(line: 1886, column: 19, scope: !2679)
!2683 = !DILocation(line: 1886, column: 21, scope: !2679)
!2684 = !DILocation(line: 1886, column: 13, scope: !2679)
!2685 = !DILocation(line: 1886, column: 25, scope: !2679)
!2686 = !DILocation(line: 1887, column: 32, scope: !2679)
!2687 = !DILocation(line: 1887, column: 27, scope: !2679)
!2688 = !DILocation(line: 1887, column: 20, scope: !2679)
!2689 = !DILocation(line: 1887, column: 19, scope: !2679)
!2690 = !DILocation(line: 1887, column: 21, scope: !2679)
!2691 = !DILocation(line: 1887, column: 13, scope: !2679)
!2692 = !DILocation(line: 1887, column: 25, scope: !2679)
!2693 = !DILocation(line: 1888, column: 9, scope: !2679)
!2694 = !DILocation(line: 1885, column: 44, scope: !2695)
!2695 = !DILexicalBlockFile(scope: !2674, file: !103, discriminator: 2)
!2696 = !DILocation(line: 1885, column: 9, scope: !2695)
!2697 = distinct !{!2697, !2698}
!2698 = !DILocation(line: 1885, column: 9, scope: !2651)
!2699 = !DILocation(line: 1889, column: 17, scope: !2651)
!2700 = !DILocation(line: 1889, column: 14, scope: !2651)
!2701 = !DILocation(line: 1890, column: 17, scope: !2651)
!2702 = !DILocation(line: 1890, column: 14, scope: !2651)
!2703 = !DILocation(line: 1891, column: 17, scope: !2651)
!2704 = !DILocation(line: 1891, column: 14, scope: !2651)
!2705 = !DILocation(line: 1892, column: 5, scope: !2651)
!2706 = !DILocation(line: 1832, column: 28, scope: !2707)
!2707 = !DILexicalBlockFile(scope: !2646, file: !103, discriminator: 2)
!2708 = !DILocation(line: 1832, column: 5, scope: !2707)
!2709 = distinct !{!2709, !2710}
!2710 = !DILocation(line: 1832, column: 5, scope: !2620)
!2711 = !DILocation(line: 1893, column: 5, scope: !2620)
!2712 = !{i32 224743, i32 224759, i32 224791}
!2713 = !DILocation(line: 1898, column: 1, scope: !2620)
!2714 = distinct !DISubprogram(name: "yuvPlanartoyuy2_mmx", scope: !103, file: !103, line: 1105, type: !2009, isLocal: true, isDefinition: true, scopeLine: 1108, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2715 = !DILocalVariable(name: "ysrc", arg: 1, scope: !2714, file: !103, line: 1105, type: !182)
!2716 = !DILocation(line: 1105, column: 55, scope: !2714)
!2717 = !DILocalVariable(name: "usrc", arg: 2, scope: !2714, file: !103, line: 1105, type: !182)
!2718 = !DILocation(line: 1105, column: 76, scope: !2714)
!2719 = !DILocalVariable(name: "vsrc", arg: 3, scope: !2714, file: !103, line: 1105, type: !182)
!2720 = !DILocation(line: 1105, column: 97, scope: !2714)
!2721 = !DILocalVariable(name: "dst", arg: 4, scope: !2714, file: !103, line: 1105, type: !15)
!2722 = !DILocation(line: 1105, column: 112, scope: !2714)
!2723 = !DILocalVariable(name: "width", arg: 5, scope: !2714, file: !103, line: 1106, type: !72)
!2724 = !DILocation(line: 1106, column: 48, scope: !2714)
!2725 = !DILocalVariable(name: "height", arg: 6, scope: !2714, file: !103, line: 1106, type: !72)
!2726 = !DILocation(line: 1106, column: 59, scope: !2714)
!2727 = !DILocalVariable(name: "lumStride", arg: 7, scope: !2714, file: !103, line: 1107, type: !72)
!2728 = !DILocation(line: 1107, column: 48, scope: !2714)
!2729 = !DILocalVariable(name: "chromStride", arg: 8, scope: !2714, file: !103, line: 1107, type: !72)
!2730 = !DILocation(line: 1107, column: 63, scope: !2714)
!2731 = !DILocalVariable(name: "dstStride", arg: 9, scope: !2714, file: !103, line: 1107, type: !72)
!2732 = !DILocation(line: 1107, column: 80, scope: !2714)
!2733 = !DILocalVariable(name: "vertLumPerChroma", arg: 10, scope: !2714, file: !103, line: 1107, type: !72)
!2734 = !DILocation(line: 1107, column: 95, scope: !2714)
!2735 = !DILocalVariable(name: "y", scope: !2714, file: !103, line: 1109, type: !72)
!2736 = !DILocation(line: 1109, column: 9, scope: !2714)
!2737 = !DILocalVariable(name: "chromWidth", scope: !2714, file: !103, line: 1110, type: !1759)
!2738 = !DILocation(line: 1110, column: 19, scope: !2714)
!2739 = !DILocation(line: 1110, column: 31, scope: !2714)
!2740 = !DILocation(line: 1110, column: 36, scope: !2714)
!2741 = !DILocation(line: 1111, column: 11, scope: !2742)
!2742 = distinct !DILexicalBlock(scope: !2714, file: !103, line: 1111, column: 5)
!2743 = !DILocation(line: 1111, column: 10, scope: !2742)
!2744 = !DILocation(line: 1111, column: 15, scope: !2745)
!2745 = !DILexicalBlockFile(scope: !2746, file: !103, discriminator: 1)
!2746 = distinct !DILexicalBlock(scope: !2742, file: !103, line: 1111, column: 5)
!2747 = !DILocation(line: 1111, column: 17, scope: !2745)
!2748 = !DILocation(line: 1111, column: 16, scope: !2745)
!2749 = !DILocation(line: 1111, column: 5, scope: !2745)
!2750 = !DILocation(line: 1143, column: 19, scope: !2751)
!2751 = distinct !DILexicalBlock(scope: !2746, file: !103, line: 1111, column: 30)
!2752 = !DILocation(line: 1143, column: 29, scope: !2751)
!2753 = !DILocation(line: 1143, column: 40, scope: !2751)
!2754 = !DILocation(line: 1143, column: 51, scope: !2751)
!2755 = !DILocation(line: 1143, column: 63, scope: !2751)
!2756 = !DILocation(line: 1113, column: 9, scope: !2751)
!2757 = !{i32 196037, i32 196081, i32 196143, i32 196205, i32 196264, i32 196323, i32 196382, i32 196441, i32 196503, i32 196562, i32 196624, i32 196686, i32 196746, i32 196805, i32 196867, i32 196929, i32 196991, i32 197053, i32 197115, i32 197177, i32 197252, i32 197326, i32 197400, i32 197474, i32 197535, i32 197595, i32 197658}
!2758 = !DILocation(line: 1146, column: 14, scope: !2759)
!2759 = distinct !DILexicalBlock(scope: !2751, file: !103, line: 1146, column: 13)
!2760 = !DILocation(line: 1146, column: 17, scope: !2759)
!2761 = !DILocation(line: 1146, column: 33, scope: !2759)
!2762 = !DILocation(line: 1146, column: 15, scope: !2759)
!2763 = !DILocation(line: 1146, column: 41, scope: !2759)
!2764 = !DILocation(line: 1146, column: 57, scope: !2759)
!2765 = !DILocation(line: 1146, column: 38, scope: !2759)
!2766 = !DILocation(line: 1146, column: 13, scope: !2751)
!2767 = !DILocation(line: 1147, column: 21, scope: !2768)
!2768 = distinct !DILexicalBlock(scope: !2759, file: !103, line: 1146, column: 61)
!2769 = !DILocation(line: 1147, column: 18, scope: !2768)
!2770 = !DILocation(line: 1148, column: 21, scope: !2768)
!2771 = !DILocation(line: 1148, column: 18, scope: !2768)
!2772 = !DILocation(line: 1149, column: 9, scope: !2768)
!2773 = !DILocation(line: 1150, column: 17, scope: !2751)
!2774 = !DILocation(line: 1150, column: 14, scope: !2751)
!2775 = !DILocation(line: 1151, column: 16, scope: !2751)
!2776 = !DILocation(line: 1151, column: 13, scope: !2751)
!2777 = !DILocation(line: 1152, column: 5, scope: !2751)
!2778 = !DILocation(line: 1111, column: 26, scope: !2779)
!2779 = !DILexicalBlockFile(scope: !2746, file: !103, discriminator: 2)
!2780 = !DILocation(line: 1111, column: 5, scope: !2779)
!2781 = distinct !{!2781, !2782}
!2782 = !DILocation(line: 1111, column: 5, scope: !2714)
!2783 = !DILocation(line: 1153, column: 5, scope: !2714)
!2784 = !{i32 197979, i32 197995, i32 198027}
!2785 = !DILocation(line: 1156, column: 1, scope: !2714)
!2786 = distinct !DISubprogram(name: "yuvPlanartouyvy_mmx", scope: !103, file: !103, line: 1170, type: !2009, isLocal: true, isDefinition: true, scopeLine: 1173, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2787 = !DILocalVariable(name: "ysrc", arg: 1, scope: !2786, file: !103, line: 1170, type: !182)
!2788 = !DILocation(line: 1170, column: 55, scope: !2786)
!2789 = !DILocalVariable(name: "usrc", arg: 2, scope: !2786, file: !103, line: 1170, type: !182)
!2790 = !DILocation(line: 1170, column: 76, scope: !2786)
!2791 = !DILocalVariable(name: "vsrc", arg: 3, scope: !2786, file: !103, line: 1170, type: !182)
!2792 = !DILocation(line: 1170, column: 97, scope: !2786)
!2793 = !DILocalVariable(name: "dst", arg: 4, scope: !2786, file: !103, line: 1170, type: !15)
!2794 = !DILocation(line: 1170, column: 112, scope: !2786)
!2795 = !DILocalVariable(name: "width", arg: 5, scope: !2786, file: !103, line: 1171, type: !72)
!2796 = !DILocation(line: 1171, column: 48, scope: !2786)
!2797 = !DILocalVariable(name: "height", arg: 6, scope: !2786, file: !103, line: 1171, type: !72)
!2798 = !DILocation(line: 1171, column: 59, scope: !2786)
!2799 = !DILocalVariable(name: "lumStride", arg: 7, scope: !2786, file: !103, line: 1172, type: !72)
!2800 = !DILocation(line: 1172, column: 48, scope: !2786)
!2801 = !DILocalVariable(name: "chromStride", arg: 8, scope: !2786, file: !103, line: 1172, type: !72)
!2802 = !DILocation(line: 1172, column: 63, scope: !2786)
!2803 = !DILocalVariable(name: "dstStride", arg: 9, scope: !2786, file: !103, line: 1172, type: !72)
!2804 = !DILocation(line: 1172, column: 80, scope: !2786)
!2805 = !DILocalVariable(name: "vertLumPerChroma", arg: 10, scope: !2786, file: !103, line: 1172, type: !72)
!2806 = !DILocation(line: 1172, column: 95, scope: !2786)
!2807 = !DILocalVariable(name: "y", scope: !2786, file: !103, line: 1174, type: !72)
!2808 = !DILocation(line: 1174, column: 9, scope: !2786)
!2809 = !DILocalVariable(name: "chromWidth", scope: !2786, file: !103, line: 1175, type: !1759)
!2810 = !DILocation(line: 1175, column: 19, scope: !2786)
!2811 = !DILocation(line: 1175, column: 31, scope: !2786)
!2812 = !DILocation(line: 1175, column: 36, scope: !2786)
!2813 = !DILocation(line: 1176, column: 11, scope: !2814)
!2814 = distinct !DILexicalBlock(scope: !2786, file: !103, line: 1176, column: 5)
!2815 = !DILocation(line: 1176, column: 10, scope: !2814)
!2816 = !DILocation(line: 1176, column: 15, scope: !2817)
!2817 = !DILexicalBlockFile(scope: !2818, file: !103, discriminator: 1)
!2818 = distinct !DILexicalBlock(scope: !2814, file: !103, line: 1176, column: 5)
!2819 = !DILocation(line: 1176, column: 17, scope: !2817)
!2820 = !DILocation(line: 1176, column: 16, scope: !2817)
!2821 = !DILocation(line: 1176, column: 5, scope: !2817)
!2822 = !DILocation(line: 1208, column: 19, scope: !2823)
!2823 = distinct !DILexicalBlock(scope: !2818, file: !103, line: 1176, column: 30)
!2824 = !DILocation(line: 1208, column: 29, scope: !2823)
!2825 = !DILocation(line: 1208, column: 40, scope: !2823)
!2826 = !DILocation(line: 1208, column: 51, scope: !2823)
!2827 = !DILocation(line: 1208, column: 63, scope: !2823)
!2828 = !DILocation(line: 1178, column: 9, scope: !2823)
!2829 = !{i32 198845, i32 198885, i32 198947, i32 199009, i32 199068, i32 199127, i32 199186, i32 199245, i32 199307, i32 199366, i32 199428, i32 199490, i32 199550, i32 199609, i32 199671, i32 199733, i32 199795, i32 199857, i32 199919, i32 199981, i32 200056, i32 200130, i32 200204, i32 200278, i32 200338, i32 200397, i32 200459}
!2830 = !DILocation(line: 1211, column: 14, scope: !2831)
!2831 = distinct !DILexicalBlock(scope: !2823, file: !103, line: 1211, column: 13)
!2832 = !DILocation(line: 1211, column: 17, scope: !2831)
!2833 = !DILocation(line: 1211, column: 33, scope: !2831)
!2834 = !DILocation(line: 1211, column: 15, scope: !2831)
!2835 = !DILocation(line: 1211, column: 41, scope: !2831)
!2836 = !DILocation(line: 1211, column: 57, scope: !2831)
!2837 = !DILocation(line: 1211, column: 38, scope: !2831)
!2838 = !DILocation(line: 1211, column: 13, scope: !2823)
!2839 = !DILocation(line: 1212, column: 21, scope: !2840)
!2840 = distinct !DILexicalBlock(scope: !2831, file: !103, line: 1211, column: 61)
!2841 = !DILocation(line: 1212, column: 18, scope: !2840)
!2842 = !DILocation(line: 1213, column: 21, scope: !2840)
!2843 = !DILocation(line: 1213, column: 18, scope: !2840)
!2844 = !DILocation(line: 1214, column: 9, scope: !2840)
!2845 = !DILocation(line: 1215, column: 17, scope: !2823)
!2846 = !DILocation(line: 1215, column: 14, scope: !2823)
!2847 = !DILocation(line: 1216, column: 16, scope: !2823)
!2848 = !DILocation(line: 1216, column: 13, scope: !2823)
!2849 = !DILocation(line: 1217, column: 5, scope: !2823)
!2850 = !DILocation(line: 1176, column: 26, scope: !2851)
!2851 = !DILexicalBlockFile(scope: !2818, file: !103, discriminator: 2)
!2852 = !DILocation(line: 1176, column: 5, scope: !2851)
!2853 = distinct !{!2853, !2854}
!2854 = !DILocation(line: 1176, column: 5, scope: !2786)
!2855 = !DILocation(line: 1218, column: 5, scope: !2786)
!2856 = !{i32 200780, i32 200796, i32 200828}
!2857 = !DILocation(line: 1221, column: 1, scope: !2786)
!2858 = distinct !DISubprogram(name: "extract_odd_mmx", scope: !103, file: !103, line: 2150, type: !2859, isLocal: true, isDefinition: true, scopeLine: 2151, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2859 = !DISubroutineType(types: !2860)
!2860 = !{null, !182, !15, !18}
!2861 = !DILocalVariable(name: "src", arg: 1, scope: !2858, file: !103, line: 2150, type: !182)
!2862 = !DILocation(line: 2150, column: 44, scope: !2858)
!2863 = !DILocalVariable(name: "dst", arg: 2, scope: !2858, file: !103, line: 2150, type: !15)
!2864 = !DILocation(line: 2150, column: 58, scope: !2858)
!2865 = !DILocalVariable(name: "count", arg: 3, scope: !2858, file: !103, line: 2150, type: !18)
!2866 = !DILocation(line: 2150, column: 71, scope: !2858)
!2867 = !DILocation(line: 2152, column: 9, scope: !2858)
!2868 = !DILocation(line: 2153, column: 12, scope: !2858)
!2869 = !DILocation(line: 2153, column: 9, scope: !2858)
!2870 = !DILocation(line: 2154, column: 14, scope: !2858)
!2871 = !DILocation(line: 2154, column: 13, scope: !2858)
!2872 = !DILocation(line: 2154, column: 9, scope: !2858)
!2873 = !DILocation(line: 2155, column: 14, scope: !2858)
!2874 = !DILocation(line: 2155, column: 12, scope: !2858)
!2875 = !DILocation(line: 2155, column: 10, scope: !2858)
!2876 = !DILocation(line: 2157, column: 8, scope: !2877)
!2877 = distinct !DILexicalBlock(scope: !2858, file: !103, line: 2157, column: 8)
!2878 = !DILocation(line: 2157, column: 14, scope: !2877)
!2879 = !DILocation(line: 2157, column: 8, scope: !2858)
!2880 = !DILocation(line: 2158, column: 15, scope: !2881)
!2881 = distinct !DILexicalBlock(scope: !2877, file: !103, line: 2157, column: 21)
!2882 = !DILocation(line: 2159, column: 9, scope: !2881)
!2883 = !DILocation(line: 2178, column: 19, scope: !2881)
!2884 = !DILocation(line: 2178, column: 29, scope: !2881)
!2885 = !{i32 233698, i32 233735, i32 233788, i32 233841, i32 233894, i32 233947, i32 234000, i32 234053, i32 234106, i32 234159, i32 234212, i32 234265, i32 234318, i32 234371, i32 234424, i32 234477, i32 234530, i32 234583}
!2886 = !DILocation(line: 2180, column: 15, scope: !2881)
!2887 = !DILocation(line: 2181, column: 5, scope: !2881)
!2888 = !DILocation(line: 2182, column: 5, scope: !2858)
!2889 = !DILocation(line: 2182, column: 11, scope: !2890)
!2890 = !DILexicalBlockFile(scope: !2858, file: !103, discriminator: 1)
!2891 = !DILocation(line: 2182, column: 16, scope: !2890)
!2892 = !DILocation(line: 2182, column: 5, scope: !2890)
!2893 = !DILocation(line: 2183, column: 27, scope: !2894)
!2894 = distinct !DILexicalBlock(scope: !2858, file: !103, line: 2182, column: 20)
!2895 = !DILocation(line: 2183, column: 26, scope: !2894)
!2896 = !DILocation(line: 2183, column: 21, scope: !2894)
!2897 = !DILocation(line: 2183, column: 13, scope: !2894)
!2898 = !DILocation(line: 2183, column: 9, scope: !2894)
!2899 = !DILocation(line: 2183, column: 19, scope: !2894)
!2900 = !DILocation(line: 2184, column: 14, scope: !2894)
!2901 = !DILocation(line: 2182, column: 5, scope: !2902)
!2902 = !DILexicalBlockFile(scope: !2858, file: !103, discriminator: 2)
!2903 = distinct !{!2903, !2888}
!2904 = !DILocation(line: 2186, column: 1, scope: !2858)
!2905 = distinct !DISubprogram(name: "extract_even2_mmx", scope: !103, file: !103, line: 2189, type: !2906, isLocal: true, isDefinition: true, scopeLine: 2190, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2906 = !DISubroutineType(types: !2907)
!2907 = !{null, !182, !15, !15, !18}
!2908 = !DILocalVariable(name: "src", arg: 1, scope: !2905, file: !103, line: 2189, type: !182)
!2909 = !DILocation(line: 2189, column: 46, scope: !2905)
!2910 = !DILocalVariable(name: "dst0", arg: 2, scope: !2905, file: !103, line: 2189, type: !15)
!2911 = !DILocation(line: 2189, column: 60, scope: !2905)
!2912 = !DILocalVariable(name: "dst1", arg: 3, scope: !2905, file: !103, line: 2189, type: !15)
!2913 = !DILocation(line: 2189, column: 75, scope: !2905)
!2914 = !DILocalVariable(name: "count", arg: 4, scope: !2905, file: !103, line: 2189, type: !18)
!2915 = !DILocation(line: 2189, column: 89, scope: !2905)
!2916 = !DILocation(line: 2191, column: 12, scope: !2905)
!2917 = !DILocation(line: 2191, column: 9, scope: !2905)
!2918 = !DILocation(line: 2192, column: 12, scope: !2905)
!2919 = !DILocation(line: 2192, column: 9, scope: !2905)
!2920 = !DILocation(line: 2193, column: 14, scope: !2905)
!2921 = !DILocation(line: 2193, column: 13, scope: !2905)
!2922 = !DILocation(line: 2193, column: 9, scope: !2905)
!2923 = !DILocation(line: 2194, column: 14, scope: !2905)
!2924 = !DILocation(line: 2194, column: 12, scope: !2905)
!2925 = !DILocation(line: 2194, column: 10, scope: !2905)
!2926 = !DILocation(line: 2195, column: 8, scope: !2927)
!2927 = distinct !DILexicalBlock(scope: !2905, file: !103, line: 2195, column: 8)
!2928 = !DILocation(line: 2195, column: 14, scope: !2927)
!2929 = !DILocation(line: 2195, column: 8, scope: !2905)
!2930 = !DILocation(line: 2196, column: 15, scope: !2931)
!2931 = distinct !DILexicalBlock(scope: !2927, file: !103, line: 2195, column: 21)
!2932 = !DILocation(line: 2197, column: 9, scope: !2931)
!2933 = !DILocation(line: 2224, column: 19, scope: !2931)
!2934 = !DILocation(line: 2224, column: 29, scope: !2931)
!2935 = !DILocation(line: 2224, column: 40, scope: !2931)
!2936 = !{i32 235019, i32 235056, i32 235109, i32 235162, i32 235215, i32 235268, i32 235321, i32 235374, i32 235427, i32 235480, i32 235533, i32 235586, i32 235639, i32 235692, i32 235745, i32 235798, i32 235851, i32 235904, i32 235957, i32 236010, i32 236063, i32 236116, i32 236169, i32 236222, i32 236275, i32 236328}
!2937 = !DILocation(line: 2226, column: 15, scope: !2931)
!2938 = !DILocation(line: 2227, column: 5, scope: !2931)
!2939 = !DILocation(line: 2228, column: 5, scope: !2905)
!2940 = !DILocation(line: 2228, column: 11, scope: !2941)
!2941 = !DILexicalBlockFile(scope: !2905, file: !103, discriminator: 1)
!2942 = !DILocation(line: 2228, column: 16, scope: !2941)
!2943 = !DILocation(line: 2228, column: 5, scope: !2941)
!2944 = !DILocation(line: 2229, column: 28, scope: !2945)
!2945 = distinct !DILexicalBlock(scope: !2905, file: !103, line: 2228, column: 20)
!2946 = !DILocation(line: 2229, column: 27, scope: !2945)
!2947 = !DILocation(line: 2229, column: 33, scope: !2945)
!2948 = !DILocation(line: 2229, column: 22, scope: !2945)
!2949 = !DILocation(line: 2229, column: 14, scope: !2945)
!2950 = !DILocation(line: 2229, column: 9, scope: !2945)
!2951 = !DILocation(line: 2229, column: 20, scope: !2945)
!2952 = !DILocation(line: 2230, column: 28, scope: !2945)
!2953 = !DILocation(line: 2230, column: 27, scope: !2945)
!2954 = !DILocation(line: 2230, column: 33, scope: !2945)
!2955 = !DILocation(line: 2230, column: 22, scope: !2945)
!2956 = !DILocation(line: 2230, column: 14, scope: !2945)
!2957 = !DILocation(line: 2230, column: 9, scope: !2945)
!2958 = !DILocation(line: 2230, column: 20, scope: !2945)
!2959 = !DILocation(line: 2231, column: 14, scope: !2945)
!2960 = !DILocation(line: 2228, column: 5, scope: !2961)
!2961 = !DILexicalBlockFile(scope: !2905, file: !103, discriminator: 2)
!2962 = distinct !{!2962, !2939}
!2963 = !DILocation(line: 2233, column: 1, scope: !2905)
!2964 = distinct !DISubprogram(name: "extract_even_mmx", scope: !103, file: !103, line: 2113, type: !2859, isLocal: true, isDefinition: true, scopeLine: 2114, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2965 = !DILocalVariable(name: "src", arg: 1, scope: !2964, file: !103, line: 2113, type: !182)
!2966 = !DILocation(line: 2113, column: 45, scope: !2964)
!2967 = !DILocalVariable(name: "dst", arg: 2, scope: !2964, file: !103, line: 2113, type: !15)
!2968 = !DILocation(line: 2113, column: 59, scope: !2964)
!2969 = !DILocalVariable(name: "count", arg: 3, scope: !2964, file: !103, line: 2113, type: !18)
!2970 = !DILocation(line: 2113, column: 72, scope: !2964)
!2971 = !DILocation(line: 2115, column: 12, scope: !2964)
!2972 = !DILocation(line: 2115, column: 9, scope: !2964)
!2973 = !DILocation(line: 2116, column: 14, scope: !2964)
!2974 = !DILocation(line: 2116, column: 13, scope: !2964)
!2975 = !DILocation(line: 2116, column: 9, scope: !2964)
!2976 = !DILocation(line: 2117, column: 14, scope: !2964)
!2977 = !DILocation(line: 2117, column: 12, scope: !2964)
!2978 = !DILocation(line: 2117, column: 10, scope: !2964)
!2979 = !DILocation(line: 2119, column: 8, scope: !2980)
!2980 = distinct !DILexicalBlock(scope: !2964, file: !103, line: 2119, column: 8)
!2981 = !DILocation(line: 2119, column: 14, scope: !2980)
!2982 = !DILocation(line: 2119, column: 8, scope: !2964)
!2983 = !DILocation(line: 2120, column: 15, scope: !2984)
!2984 = distinct !DILexicalBlock(scope: !2980, file: !103, line: 2119, column: 22)
!2985 = !DILocation(line: 2121, column: 9, scope: !2984)
!2986 = !DILocation(line: 2140, column: 19, scope: !2984)
!2987 = !DILocation(line: 2140, column: 29, scope: !2984)
!2988 = !{i32 232400, i32 232437, i32 232490, i32 232543, i32 232596, i32 232649, i32 232702, i32 232755, i32 232808, i32 232861, i32 232914, i32 232967, i32 233020, i32 233073, i32 233126, i32 233179, i32 233232, i32 233285}
!2989 = !DILocation(line: 2142, column: 15, scope: !2984)
!2990 = !DILocation(line: 2143, column: 5, scope: !2984)
!2991 = !DILocation(line: 2144, column: 5, scope: !2964)
!2992 = !DILocation(line: 2144, column: 11, scope: !2993)
!2993 = !DILexicalBlockFile(scope: !2964, file: !103, discriminator: 1)
!2994 = !DILocation(line: 2144, column: 16, scope: !2993)
!2995 = !DILocation(line: 2144, column: 5, scope: !2993)
!2996 = !DILocation(line: 2145, column: 27, scope: !2997)
!2997 = distinct !DILexicalBlock(scope: !2964, file: !103, line: 2144, column: 20)
!2998 = !DILocation(line: 2145, column: 26, scope: !2997)
!2999 = !DILocation(line: 2145, column: 21, scope: !2997)
!3000 = !DILocation(line: 2145, column: 13, scope: !2997)
!3001 = !DILocation(line: 2145, column: 9, scope: !2997)
!3002 = !DILocation(line: 2145, column: 19, scope: !2997)
!3003 = !DILocation(line: 2146, column: 14, scope: !2997)
!3004 = !DILocation(line: 2144, column: 5, scope: !3005)
!3005 = !DILexicalBlockFile(scope: !2964, file: !103, discriminator: 2)
!3006 = distinct !{!3006, !2991}
!3007 = !DILocation(line: 2148, column: 1, scope: !2964)
!3008 = distinct !DISubprogram(name: "extract_odd2_mmx", scope: !103, file: !103, line: 2290, type: !2906, isLocal: true, isDefinition: true, scopeLine: 2291, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3009 = !DILocalVariable(name: "src", arg: 1, scope: !3008, file: !103, line: 2290, type: !182)
!3010 = !DILocation(line: 2290, column: 45, scope: !3008)
!3011 = !DILocalVariable(name: "dst0", arg: 2, scope: !3008, file: !103, line: 2290, type: !15)
!3012 = !DILocation(line: 2290, column: 59, scope: !3008)
!3013 = !DILocalVariable(name: "dst1", arg: 3, scope: !3008, file: !103, line: 2290, type: !15)
!3014 = !DILocation(line: 2290, column: 74, scope: !3008)
!3015 = !DILocalVariable(name: "count", arg: 4, scope: !3008, file: !103, line: 2290, type: !18)
!3016 = !DILocation(line: 2290, column: 88, scope: !3008)
!3017 = !DILocation(line: 2292, column: 12, scope: !3008)
!3018 = !DILocation(line: 2292, column: 9, scope: !3008)
!3019 = !DILocation(line: 2293, column: 12, scope: !3008)
!3020 = !DILocation(line: 2293, column: 9, scope: !3008)
!3021 = !DILocation(line: 2294, column: 14, scope: !3008)
!3022 = !DILocation(line: 2294, column: 13, scope: !3008)
!3023 = !DILocation(line: 2294, column: 9, scope: !3008)
!3024 = !DILocation(line: 2295, column: 14, scope: !3008)
!3025 = !DILocation(line: 2295, column: 12, scope: !3008)
!3026 = !DILocation(line: 2295, column: 10, scope: !3008)
!3027 = !DILocation(line: 2296, column: 8, scope: !3028)
!3028 = distinct !DILexicalBlock(scope: !3008, file: !103, line: 2296, column: 8)
!3029 = !DILocation(line: 2296, column: 14, scope: !3028)
!3030 = !DILocation(line: 2296, column: 8, scope: !3008)
!3031 = !DILocation(line: 2297, column: 15, scope: !3032)
!3032 = distinct !DILexicalBlock(scope: !3028, file: !103, line: 2296, column: 21)
!3033 = !DILocation(line: 2298, column: 9, scope: !3032)
!3034 = !DILocation(line: 2325, column: 19, scope: !3032)
!3035 = !DILocation(line: 2325, column: 29, scope: !3032)
!3036 = !DILocation(line: 2325, column: 40, scope: !3032)
!3037 = !{i32 237245, i32 237282, i32 237335, i32 237388, i32 237441, i32 237494, i32 237547, i32 237600, i32 237653, i32 237706, i32 237759, i32 237812, i32 237865, i32 237918, i32 237971, i32 238024, i32 238077, i32 238130, i32 238183, i32 238236, i32 238289, i32 238342, i32 238395, i32 238448, i32 238501, i32 238554}
!3038 = !DILocation(line: 2327, column: 15, scope: !3032)
!3039 = !DILocation(line: 2328, column: 5, scope: !3032)
!3040 = !DILocation(line: 2329, column: 8, scope: !3008)
!3041 = !DILocation(line: 2330, column: 5, scope: !3008)
!3042 = !DILocation(line: 2330, column: 11, scope: !3043)
!3043 = !DILexicalBlockFile(scope: !3008, file: !103, discriminator: 1)
!3044 = !DILocation(line: 2330, column: 16, scope: !3043)
!3045 = !DILocation(line: 2330, column: 5, scope: !3043)
!3046 = !DILocation(line: 2331, column: 28, scope: !3047)
!3047 = distinct !DILexicalBlock(scope: !3008, file: !103, line: 2330, column: 20)
!3048 = !DILocation(line: 2331, column: 27, scope: !3047)
!3049 = !DILocation(line: 2331, column: 33, scope: !3047)
!3050 = !DILocation(line: 2331, column: 22, scope: !3047)
!3051 = !DILocation(line: 2331, column: 14, scope: !3047)
!3052 = !DILocation(line: 2331, column: 9, scope: !3047)
!3053 = !DILocation(line: 2331, column: 20, scope: !3047)
!3054 = !DILocation(line: 2332, column: 28, scope: !3047)
!3055 = !DILocation(line: 2332, column: 27, scope: !3047)
!3056 = !DILocation(line: 2332, column: 33, scope: !3047)
!3057 = !DILocation(line: 2332, column: 22, scope: !3047)
!3058 = !DILocation(line: 2332, column: 14, scope: !3047)
!3059 = !DILocation(line: 2332, column: 9, scope: !3047)
!3060 = !DILocation(line: 2332, column: 20, scope: !3047)
!3061 = !DILocation(line: 2333, column: 14, scope: !3047)
!3062 = !DILocation(line: 2330, column: 5, scope: !3063)
!3063 = !DILexicalBlockFile(scope: !3008, file: !103, discriminator: 2)
!3064 = distinct !{!3064, !3041}
!3065 = !DILocation(line: 2335, column: 1, scope: !3008)
!3066 = distinct !DISubprogram(name: "extract_odd2avg_mmx", scope: !103, file: !103, line: 2338, type: !3067, isLocal: true, isDefinition: true, scopeLine: 2339, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3067 = !DISubroutineType(types: !3068)
!3068 = !{null, !182, !182, !15, !15, !18}
!3069 = !DILocalVariable(name: "src0", arg: 1, scope: !3066, file: !103, line: 2338, type: !182)
!3070 = !DILocation(line: 2338, column: 48, scope: !3066)
!3071 = !DILocalVariable(name: "src1", arg: 2, scope: !3066, file: !103, line: 2338, type: !182)
!3072 = !DILocation(line: 2338, column: 69, scope: !3066)
!3073 = !DILocalVariable(name: "dst0", arg: 3, scope: !3066, file: !103, line: 2338, type: !15)
!3074 = !DILocation(line: 2338, column: 84, scope: !3066)
!3075 = !DILocalVariable(name: "dst1", arg: 4, scope: !3066, file: !103, line: 2338, type: !15)
!3076 = !DILocation(line: 2338, column: 99, scope: !3066)
!3077 = !DILocalVariable(name: "count", arg: 5, scope: !3066, file: !103, line: 2338, type: !18)
!3078 = !DILocation(line: 2338, column: 113, scope: !3066)
!3079 = !DILocation(line: 2340, column: 13, scope: !3066)
!3080 = !DILocation(line: 2340, column: 10, scope: !3066)
!3081 = !DILocation(line: 2341, column: 13, scope: !3066)
!3082 = !DILocation(line: 2341, column: 10, scope: !3066)
!3083 = !DILocation(line: 2342, column: 15, scope: !3066)
!3084 = !DILocation(line: 2342, column: 14, scope: !3066)
!3085 = !DILocation(line: 2342, column: 10, scope: !3066)
!3086 = !DILocation(line: 2343, column: 15, scope: !3066)
!3087 = !DILocation(line: 2343, column: 14, scope: !3066)
!3088 = !DILocation(line: 2343, column: 10, scope: !3066)
!3089 = !DILocation(line: 2344, column: 14, scope: !3066)
!3090 = !DILocation(line: 2344, column: 12, scope: !3066)
!3091 = !DILocation(line: 2344, column: 10, scope: !3066)
!3092 = !DILocation(line: 2384, column: 9, scope: !3066)
!3093 = !DILocation(line: 2385, column: 9, scope: !3066)
!3094 = !DILocation(line: 2386, column: 5, scope: !3066)
!3095 = !DILocation(line: 2386, column: 11, scope: !3096)
!3096 = !DILexicalBlockFile(scope: !3066, file: !103, discriminator: 1)
!3097 = !DILocation(line: 2386, column: 16, scope: !3096)
!3098 = !DILocation(line: 2386, column: 5, scope: !3096)
!3099 = !DILocation(line: 2387, column: 30, scope: !3100)
!3100 = distinct !DILexicalBlock(scope: !3066, file: !103, line: 2386, column: 20)
!3101 = !DILocation(line: 2387, column: 29, scope: !3100)
!3102 = !DILocation(line: 2387, column: 35, scope: !3100)
!3103 = !DILocation(line: 2387, column: 23, scope: !3100)
!3104 = !DILocation(line: 2387, column: 46, scope: !3100)
!3105 = !DILocation(line: 2387, column: 45, scope: !3100)
!3106 = !DILocation(line: 2387, column: 51, scope: !3100)
!3107 = !DILocation(line: 2387, column: 39, scope: !3100)
!3108 = !DILocation(line: 2387, column: 38, scope: !3100)
!3109 = !DILocation(line: 2387, column: 55, scope: !3100)
!3110 = !DILocation(line: 2387, column: 22, scope: !3100)
!3111 = !DILocation(line: 2387, column: 14, scope: !3100)
!3112 = !DILocation(line: 2387, column: 9, scope: !3100)
!3113 = !DILocation(line: 2387, column: 20, scope: !3100)
!3114 = !DILocation(line: 2388, column: 30, scope: !3100)
!3115 = !DILocation(line: 2388, column: 29, scope: !3100)
!3116 = !DILocation(line: 2388, column: 35, scope: !3100)
!3117 = !DILocation(line: 2388, column: 23, scope: !3100)
!3118 = !DILocation(line: 2388, column: 46, scope: !3100)
!3119 = !DILocation(line: 2388, column: 45, scope: !3100)
!3120 = !DILocation(line: 2388, column: 51, scope: !3100)
!3121 = !DILocation(line: 2388, column: 39, scope: !3100)
!3122 = !DILocation(line: 2388, column: 38, scope: !3100)
!3123 = !DILocation(line: 2388, column: 55, scope: !3100)
!3124 = !DILocation(line: 2388, column: 22, scope: !3100)
!3125 = !DILocation(line: 2388, column: 14, scope: !3100)
!3126 = !DILocation(line: 2388, column: 9, scope: !3100)
!3127 = !DILocation(line: 2388, column: 20, scope: !3100)
!3128 = !DILocation(line: 2389, column: 14, scope: !3100)
!3129 = !DILocation(line: 2386, column: 5, scope: !3130)
!3130 = !DILexicalBlockFile(scope: !3066, file: !103, discriminator: 2)
!3131 = distinct !{!3131, !3094}
!3132 = !DILocation(line: 2391, column: 1, scope: !3066)
!3133 = distinct !DISubprogram(name: "extract_even2avg_mmx", scope: !103, file: !103, line: 2236, type: !3067, isLocal: true, isDefinition: true, scopeLine: 2237, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3134 = !DILocalVariable(name: "src0", arg: 1, scope: !3133, file: !103, line: 2236, type: !182)
!3135 = !DILocation(line: 2236, column: 49, scope: !3133)
!3136 = !DILocalVariable(name: "src1", arg: 2, scope: !3133, file: !103, line: 2236, type: !182)
!3137 = !DILocation(line: 2236, column: 70, scope: !3133)
!3138 = !DILocalVariable(name: "dst0", arg: 3, scope: !3133, file: !103, line: 2236, type: !15)
!3139 = !DILocation(line: 2236, column: 85, scope: !3133)
!3140 = !DILocalVariable(name: "dst1", arg: 4, scope: !3133, file: !103, line: 2236, type: !15)
!3141 = !DILocation(line: 2236, column: 100, scope: !3133)
!3142 = !DILocalVariable(name: "count", arg: 5, scope: !3133, file: !103, line: 2236, type: !18)
!3143 = !DILocation(line: 2236, column: 114, scope: !3133)
!3144 = !DILocation(line: 2238, column: 13, scope: !3133)
!3145 = !DILocation(line: 2238, column: 10, scope: !3133)
!3146 = !DILocation(line: 2239, column: 13, scope: !3133)
!3147 = !DILocation(line: 2239, column: 10, scope: !3133)
!3148 = !DILocation(line: 2240, column: 15, scope: !3133)
!3149 = !DILocation(line: 2240, column: 14, scope: !3133)
!3150 = !DILocation(line: 2240, column: 10, scope: !3133)
!3151 = !DILocation(line: 2241, column: 15, scope: !3133)
!3152 = !DILocation(line: 2241, column: 14, scope: !3133)
!3153 = !DILocation(line: 2241, column: 10, scope: !3133)
!3154 = !DILocation(line: 2242, column: 14, scope: !3133)
!3155 = !DILocation(line: 2242, column: 12, scope: !3133)
!3156 = !DILocation(line: 2242, column: 10, scope: !3133)
!3157 = !DILocation(line: 2282, column: 5, scope: !3133)
!3158 = !DILocation(line: 2282, column: 11, scope: !3159)
!3159 = !DILexicalBlockFile(scope: !3133, file: !103, discriminator: 1)
!3160 = !DILocation(line: 2282, column: 16, scope: !3159)
!3161 = !DILocation(line: 2282, column: 5, scope: !3159)
!3162 = !DILocation(line: 2283, column: 30, scope: !3163)
!3163 = distinct !DILexicalBlock(scope: !3133, file: !103, line: 2282, column: 20)
!3164 = !DILocation(line: 2283, column: 29, scope: !3163)
!3165 = !DILocation(line: 2283, column: 35, scope: !3163)
!3166 = !DILocation(line: 2283, column: 23, scope: !3163)
!3167 = !DILocation(line: 2283, column: 46, scope: !3163)
!3168 = !DILocation(line: 2283, column: 45, scope: !3163)
!3169 = !DILocation(line: 2283, column: 51, scope: !3163)
!3170 = !DILocation(line: 2283, column: 39, scope: !3163)
!3171 = !DILocation(line: 2283, column: 38, scope: !3163)
!3172 = !DILocation(line: 2283, column: 55, scope: !3163)
!3173 = !DILocation(line: 2283, column: 22, scope: !3163)
!3174 = !DILocation(line: 2283, column: 14, scope: !3163)
!3175 = !DILocation(line: 2283, column: 9, scope: !3163)
!3176 = !DILocation(line: 2283, column: 20, scope: !3163)
!3177 = !DILocation(line: 2284, column: 30, scope: !3163)
!3178 = !DILocation(line: 2284, column: 29, scope: !3163)
!3179 = !DILocation(line: 2284, column: 35, scope: !3163)
!3180 = !DILocation(line: 2284, column: 23, scope: !3163)
!3181 = !DILocation(line: 2284, column: 46, scope: !3163)
!3182 = !DILocation(line: 2284, column: 45, scope: !3163)
!3183 = !DILocation(line: 2284, column: 51, scope: !3163)
!3184 = !DILocation(line: 2284, column: 39, scope: !3163)
!3185 = !DILocation(line: 2284, column: 38, scope: !3163)
!3186 = !DILocation(line: 2284, column: 55, scope: !3163)
!3187 = !DILocation(line: 2284, column: 22, scope: !3163)
!3188 = !DILocation(line: 2284, column: 14, scope: !3163)
!3189 = !DILocation(line: 2284, column: 9, scope: !3163)
!3190 = !DILocation(line: 2284, column: 20, scope: !3163)
!3191 = !DILocation(line: 2285, column: 14, scope: !3163)
!3192 = !DILocation(line: 2282, column: 5, scope: !3193)
!3193 = !DILexicalBlockFile(scope: !3133, file: !103, discriminator: 2)
!3194 = distinct !{!3194, !3157}
!3195 = !DILocation(line: 2287, column: 1, scope: !3133)
!3196 = distinct !DISubprogram(name: "planar2x_3dnow", scope: !103, file: !103, line: 1359, type: !3197, isLocal: true, isDefinition: true, scopeLine: 1360, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3197 = !DISubroutineType(types: !3198)
!3198 = !{null, !182, !15, !72, !72, !72, !72}
!3199 = !DILocalVariable(name: "src", arg: 1, scope: !3196, file: !103, line: 1359, type: !182)
!3200 = !DILocation(line: 1359, column: 50, scope: !3196)
!3201 = !DILocalVariable(name: "dst", arg: 2, scope: !3196, file: !103, line: 1359, type: !15)
!3202 = !DILocation(line: 1359, column: 64, scope: !3196)
!3203 = !DILocalVariable(name: "srcWidth", arg: 3, scope: !3196, file: !103, line: 1359, type: !72)
!3204 = !DILocation(line: 1359, column: 73, scope: !3196)
!3205 = !DILocalVariable(name: "srcHeight", arg: 4, scope: !3196, file: !103, line: 1359, type: !72)
!3206 = !DILocation(line: 1359, column: 87, scope: !3196)
!3207 = !DILocalVariable(name: "srcStride", arg: 5, scope: !3196, file: !103, line: 1359, type: !72)
!3208 = !DILocation(line: 1359, column: 102, scope: !3196)
!3209 = !DILocalVariable(name: "dstStride", arg: 6, scope: !3196, file: !103, line: 1359, type: !72)
!3210 = !DILocation(line: 1359, column: 117, scope: !3196)
!3211 = !DILocalVariable(name: "x", scope: !3196, file: !103, line: 1361, type: !72)
!3212 = !DILocation(line: 1361, column: 9, scope: !3196)
!3213 = !DILocalVariable(name: "y", scope: !3196, file: !103, line: 1361, type: !72)
!3214 = !DILocation(line: 1361, column: 11, scope: !3196)
!3215 = !DILocation(line: 1363, column: 13, scope: !3196)
!3216 = !DILocation(line: 1363, column: 5, scope: !3196)
!3217 = !DILocation(line: 1363, column: 11, scope: !3196)
!3218 = !DILocation(line: 1366, column: 11, scope: !3219)
!3219 = distinct !DILexicalBlock(scope: !3196, file: !103, line: 1366, column: 5)
!3220 = !DILocation(line: 1366, column: 10, scope: !3219)
!3221 = !DILocation(line: 1366, column: 15, scope: !3222)
!3222 = !DILexicalBlockFile(scope: !3223, file: !103, discriminator: 1)
!3223 = distinct !DILexicalBlock(scope: !3219, file: !103, line: 1366, column: 5)
!3224 = !DILocation(line: 1366, column: 17, scope: !3222)
!3225 = !DILocation(line: 1366, column: 25, scope: !3222)
!3226 = !DILocation(line: 1366, column: 16, scope: !3222)
!3227 = !DILocation(line: 1366, column: 5, scope: !3222)
!3228 = !DILocation(line: 1367, column: 28, scope: !3229)
!3229 = distinct !DILexicalBlock(scope: !3223, file: !103, line: 1366, column: 34)
!3230 = !DILocation(line: 1367, column: 24, scope: !3229)
!3231 = !DILocation(line: 1367, column: 23, scope: !3229)
!3232 = !DILocation(line: 1367, column: 37, scope: !3229)
!3233 = !DILocation(line: 1367, column: 38, scope: !3229)
!3234 = !DILocation(line: 1367, column: 33, scope: !3229)
!3235 = !DILocation(line: 1367, column: 31, scope: !3229)
!3236 = !DILocation(line: 1367, column: 42, scope: !3229)
!3237 = !DILocation(line: 1367, column: 21, scope: !3229)
!3238 = !DILocation(line: 1367, column: 15, scope: !3229)
!3239 = !DILocation(line: 1367, column: 14, scope: !3229)
!3240 = !DILocation(line: 1367, column: 16, scope: !3229)
!3241 = !DILocation(line: 1367, column: 9, scope: !3229)
!3242 = !DILocation(line: 1367, column: 19, scope: !3229)
!3243 = !DILocation(line: 1368, column: 27, scope: !3229)
!3244 = !DILocation(line: 1368, column: 23, scope: !3229)
!3245 = !DILocation(line: 1368, column: 38, scope: !3229)
!3246 = !DILocation(line: 1368, column: 39, scope: !3229)
!3247 = !DILocation(line: 1368, column: 34, scope: !3229)
!3248 = !DILocation(line: 1368, column: 33, scope: !3229)
!3249 = !DILocation(line: 1368, column: 30, scope: !3229)
!3250 = !DILocation(line: 1368, column: 43, scope: !3229)
!3251 = !DILocation(line: 1368, column: 21, scope: !3229)
!3252 = !DILocation(line: 1368, column: 15, scope: !3229)
!3253 = !DILocation(line: 1368, column: 14, scope: !3229)
!3254 = !DILocation(line: 1368, column: 16, scope: !3229)
!3255 = !DILocation(line: 1368, column: 9, scope: !3229)
!3256 = !DILocation(line: 1368, column: 19, scope: !3229)
!3257 = !DILocation(line: 1369, column: 5, scope: !3229)
!3258 = !DILocation(line: 1366, column: 30, scope: !3259)
!3259 = !DILexicalBlockFile(scope: !3223, file: !103, discriminator: 2)
!3260 = !DILocation(line: 1366, column: 5, scope: !3259)
!3261 = distinct !{!3261, !3262}
!3262 = !DILocation(line: 1366, column: 5, scope: !3196)
!3263 = !DILocation(line: 1370, column: 28, scope: !3196)
!3264 = !DILocation(line: 1370, column: 36, scope: !3196)
!3265 = !DILocation(line: 1370, column: 24, scope: !3196)
!3266 = !DILocation(line: 1370, column: 11, scope: !3196)
!3267 = !DILocation(line: 1370, column: 10, scope: !3196)
!3268 = !DILocation(line: 1370, column: 19, scope: !3196)
!3269 = !DILocation(line: 1370, column: 5, scope: !3196)
!3270 = !DILocation(line: 1370, column: 22, scope: !3196)
!3271 = !DILocation(line: 1372, column: 11, scope: !3196)
!3272 = !DILocation(line: 1372, column: 8, scope: !3196)
!3273 = !DILocation(line: 1374, column: 11, scope: !3274)
!3274 = distinct !DILexicalBlock(scope: !3196, file: !103, line: 1374, column: 5)
!3275 = !DILocation(line: 1374, column: 10, scope: !3274)
!3276 = !DILocation(line: 1374, column: 15, scope: !3277)
!3277 = !DILexicalBlockFile(scope: !3278, file: !103, discriminator: 1)
!3278 = distinct !DILexicalBlock(scope: !3274, file: !103, line: 1374, column: 5)
!3279 = !DILocation(line: 1374, column: 17, scope: !3277)
!3280 = !DILocation(line: 1374, column: 16, scope: !3277)
!3281 = !DILocation(line: 1374, column: 5, scope: !3277)
!3282 = !DILocalVariable(name: "mmxSize", scope: !3283, file: !103, line: 1375, type: !18)
!3283 = distinct !DILexicalBlock(scope: !3278, file: !103, line: 1374, column: 33)
!3284 = !DILocation(line: 1375, column: 17, scope: !3283)
!3285 = !DILocation(line: 1375, column: 26, scope: !3283)
!3286 = !DILocation(line: 1375, column: 34, scope: !3283)
!3287 = !DILocation(line: 1377, column: 13, scope: !3288)
!3288 = distinct !DILexicalBlock(scope: !3283, file: !103, line: 1377, column: 13)
!3289 = !DILocation(line: 1377, column: 13, scope: !3283)
!3290 = !DILocation(line: 1418, column: 21, scope: !3291)
!3291 = distinct !DILexicalBlock(scope: !3288, file: !103, line: 1377, column: 22)
!3292 = !DILocation(line: 1418, column: 27, scope: !3291)
!3293 = !DILocation(line: 1418, column: 25, scope: !3291)
!3294 = !DILocation(line: 1418, column: 43, scope: !3291)
!3295 = !DILocation(line: 1418, column: 49, scope: !3291)
!3296 = !DILocation(line: 1418, column: 47, scope: !3291)
!3297 = !DILocation(line: 1418, column: 61, scope: !3291)
!3298 = !DILocation(line: 1418, column: 59, scope: !3291)
!3299 = !DILocation(line: 1419, column: 21, scope: !3291)
!3300 = !DILocation(line: 1419, column: 27, scope: !3291)
!3301 = !DILocation(line: 1419, column: 34, scope: !3291)
!3302 = !DILocation(line: 1419, column: 25, scope: !3291)
!3303 = !DILocation(line: 1419, column: 44, scope: !3291)
!3304 = !DILocation(line: 1419, column: 50, scope: !3291)
!3305 = !DILocation(line: 1419, column: 48, scope: !3291)
!3306 = !DILocation(line: 1419, column: 62, scope: !3291)
!3307 = !DILocation(line: 1419, column: 69, scope: !3291)
!3308 = !DILocation(line: 1419, column: 60, scope: !3291)
!3309 = !DILocation(line: 1420, column: 22, scope: !3291)
!3310 = !DILocation(line: 1420, column: 21, scope: !3291)
!3311 = !DILocation(line: 1378, column: 9, scope: !3291)
!3312 = !{i32 343409, i32 343452, i32 343507, i32 343562, i32 343620, i32 343678, i32 343736, i32 343794, i32 343849, i32 343907, i32 343965, i32 344023, i32 344081, i32 344139, i32 344194, i32 344249, i32 344304, i32 344359, i32 344421, i32 344483, i32 344545, i32 344607, i32 344669, i32 344731, i32 344793, i32 344855, i32 344913, i32 344971, i32 345029, i32 345087, i32 345145, i32 345203, i32 345273, i32 345343, i32 345413, i32 345483, i32 345553, i32 345608, i32 345663, i32 345721}
!3313 = !DILocation(line: 1424, column: 9, scope: !3291)
!3314 = !DILocation(line: 1425, column: 21, scope: !3315)
!3315 = distinct !DILexicalBlock(scope: !3288, file: !103, line: 1424, column: 16)
!3316 = !DILocation(line: 1426, column: 23, scope: !3315)
!3317 = !DILocation(line: 1426, column: 30, scope: !3315)
!3318 = !DILocation(line: 1426, column: 40, scope: !3315)
!3319 = !DILocation(line: 1426, column: 36, scope: !3315)
!3320 = !DILocation(line: 1426, column: 34, scope: !3315)
!3321 = !DILocation(line: 1426, column: 52, scope: !3315)
!3322 = !DILocation(line: 1426, column: 22, scope: !3315)
!3323 = !DILocation(line: 1426, column: 13, scope: !3315)
!3324 = !DILocation(line: 1426, column: 20, scope: !3315)
!3325 = !DILocation(line: 1427, column: 31, scope: !3315)
!3326 = !DILocation(line: 1427, column: 48, scope: !3315)
!3327 = !DILocation(line: 1427, column: 44, scope: !3315)
!3328 = !DILocation(line: 1427, column: 42, scope: !3315)
!3329 = !DILocation(line: 1427, column: 38, scope: !3315)
!3330 = !DILocation(line: 1427, column: 60, scope: !3315)
!3331 = !DILocation(line: 1427, column: 30, scope: !3315)
!3332 = !DILocation(line: 1427, column: 17, scope: !3315)
!3333 = !DILocation(line: 1427, column: 13, scope: !3315)
!3334 = !DILocation(line: 1427, column: 28, scope: !3315)
!3335 = !DILocation(line: 1430, column: 16, scope: !3336)
!3336 = distinct !DILexicalBlock(scope: !3283, file: !103, line: 1430, column: 9)
!3337 = !DILocation(line: 1430, column: 23, scope: !3336)
!3338 = !DILocation(line: 1430, column: 15, scope: !3336)
!3339 = !DILocation(line: 1430, column: 14, scope: !3336)
!3340 = !DILocation(line: 1430, column: 27, scope: !3341)
!3341 = !DILexicalBlockFile(scope: !3342, file: !103, discriminator: 1)
!3342 = distinct !DILexicalBlock(scope: !3336, file: !103, line: 1430, column: 9)
!3343 = !DILocation(line: 1430, column: 29, scope: !3341)
!3344 = !DILocation(line: 1430, column: 37, scope: !3341)
!3345 = !DILocation(line: 1430, column: 28, scope: !3341)
!3346 = !DILocation(line: 1430, column: 9, scope: !3341)
!3347 = !DILocation(line: 1431, column: 33, scope: !3348)
!3348 = distinct !DILexicalBlock(scope: !3342, file: !103, line: 1430, column: 46)
!3349 = !DILocation(line: 1431, column: 34, scope: !3348)
!3350 = !DILocation(line: 1431, column: 29, scope: !3348)
!3351 = !DILocation(line: 1431, column: 28, scope: !3348)
!3352 = !DILocation(line: 1431, column: 44, scope: !3348)
!3353 = !DILocation(line: 1431, column: 46, scope: !3348)
!3354 = !DILocation(line: 1431, column: 45, scope: !3348)
!3355 = !DILocation(line: 1431, column: 55, scope: !3348)
!3356 = !DILocation(line: 1431, column: 40, scope: !3348)
!3357 = !DILocation(line: 1431, column: 38, scope: !3348)
!3358 = !DILocation(line: 1431, column: 59, scope: !3348)
!3359 = !DILocation(line: 1431, column: 26, scope: !3348)
!3360 = !DILocation(line: 1431, column: 19, scope: !3348)
!3361 = !DILocation(line: 1431, column: 18, scope: !3348)
!3362 = !DILocation(line: 1431, column: 21, scope: !3348)
!3363 = !DILocation(line: 1431, column: 13, scope: !3348)
!3364 = !DILocation(line: 1431, column: 24, scope: !3348)
!3365 = !DILocation(line: 1432, column: 41, scope: !3348)
!3366 = !DILocation(line: 1432, column: 42, scope: !3348)
!3367 = !DILocation(line: 1432, column: 37, scope: !3348)
!3368 = !DILocation(line: 1432, column: 54, scope: !3348)
!3369 = !DILocation(line: 1432, column: 56, scope: !3348)
!3370 = !DILocation(line: 1432, column: 55, scope: !3348)
!3371 = !DILocation(line: 1432, column: 65, scope: !3348)
!3372 = !DILocation(line: 1432, column: 50, scope: !3348)
!3373 = !DILocation(line: 1432, column: 49, scope: !3348)
!3374 = !DILocation(line: 1432, column: 46, scope: !3348)
!3375 = !DILocation(line: 1432, column: 69, scope: !3348)
!3376 = !DILocation(line: 1432, column: 35, scope: !3348)
!3377 = !DILocation(line: 1432, column: 19, scope: !3348)
!3378 = !DILocation(line: 1432, column: 18, scope: !3348)
!3379 = !DILocation(line: 1432, column: 21, scope: !3348)
!3380 = !DILocation(line: 1432, column: 20, scope: !3348)
!3381 = !DILocation(line: 1432, column: 30, scope: !3348)
!3382 = !DILocation(line: 1432, column: 13, scope: !3348)
!3383 = !DILocation(line: 1432, column: 33, scope: !3348)
!3384 = !DILocation(line: 1433, column: 41, scope: !3348)
!3385 = !DILocation(line: 1433, column: 42, scope: !3348)
!3386 = !DILocation(line: 1433, column: 37, scope: !3348)
!3387 = !DILocation(line: 1433, column: 54, scope: !3348)
!3388 = !DILocation(line: 1433, column: 56, scope: !3348)
!3389 = !DILocation(line: 1433, column: 55, scope: !3348)
!3390 = !DILocation(line: 1433, column: 50, scope: !3348)
!3391 = !DILocation(line: 1433, column: 49, scope: !3348)
!3392 = !DILocation(line: 1433, column: 46, scope: !3348)
!3393 = !DILocation(line: 1433, column: 68, scope: !3348)
!3394 = !DILocation(line: 1433, column: 35, scope: !3348)
!3395 = !DILocation(line: 1433, column: 19, scope: !3348)
!3396 = !DILocation(line: 1433, column: 18, scope: !3348)
!3397 = !DILocation(line: 1433, column: 21, scope: !3348)
!3398 = !DILocation(line: 1433, column: 20, scope: !3348)
!3399 = !DILocation(line: 1433, column: 30, scope: !3348)
!3400 = !DILocation(line: 1433, column: 13, scope: !3348)
!3401 = !DILocation(line: 1433, column: 33, scope: !3348)
!3402 = !DILocation(line: 1434, column: 33, scope: !3348)
!3403 = !DILocation(line: 1434, column: 34, scope: !3348)
!3404 = !DILocation(line: 1434, column: 29, scope: !3348)
!3405 = !DILocation(line: 1434, column: 28, scope: !3348)
!3406 = !DILocation(line: 1434, column: 44, scope: !3348)
!3407 = !DILocation(line: 1434, column: 46, scope: !3348)
!3408 = !DILocation(line: 1434, column: 45, scope: !3348)
!3409 = !DILocation(line: 1434, column: 40, scope: !3348)
!3410 = !DILocation(line: 1434, column: 38, scope: !3348)
!3411 = !DILocation(line: 1434, column: 58, scope: !3348)
!3412 = !DILocation(line: 1434, column: 26, scope: !3348)
!3413 = !DILocation(line: 1434, column: 19, scope: !3348)
!3414 = !DILocation(line: 1434, column: 18, scope: !3348)
!3415 = !DILocation(line: 1434, column: 21, scope: !3348)
!3416 = !DILocation(line: 1434, column: 13, scope: !3348)
!3417 = !DILocation(line: 1434, column: 24, scope: !3348)
!3418 = !DILocation(line: 1435, column: 9, scope: !3348)
!3419 = !DILocation(line: 1430, column: 42, scope: !3420)
!3420 = !DILexicalBlockFile(scope: !3342, file: !103, discriminator: 2)
!3421 = !DILocation(line: 1430, column: 9, scope: !3420)
!3422 = distinct !{!3422, !3423}
!3423 = !DILocation(line: 1430, column: 9, scope: !3283)
!3424 = !DILocation(line: 1436, column: 37, scope: !3283)
!3425 = !DILocation(line: 1436, column: 45, scope: !3283)
!3426 = !DILocation(line: 1436, column: 33, scope: !3283)
!3427 = !DILocation(line: 1436, column: 32, scope: !3283)
!3428 = !DILocation(line: 1436, column: 55, scope: !3283)
!3429 = !DILocation(line: 1436, column: 63, scope: !3283)
!3430 = !DILocation(line: 1436, column: 68, scope: !3283)
!3431 = !DILocation(line: 1436, column: 66, scope: !3283)
!3432 = !DILocation(line: 1436, column: 51, scope: !3283)
!3433 = !DILocation(line: 1436, column: 49, scope: !3283)
!3434 = !DILocation(line: 1436, column: 79, scope: !3283)
!3435 = !DILocation(line: 1436, column: 30, scope: !3283)
!3436 = !DILocation(line: 1436, column: 13, scope: !3283)
!3437 = !DILocation(line: 1436, column: 21, scope: !3283)
!3438 = !DILocation(line: 1436, column: 24, scope: !3283)
!3439 = !DILocation(line: 1436, column: 9, scope: !3283)
!3440 = !DILocation(line: 1436, column: 28, scope: !3283)
!3441 = !DILocation(line: 1437, column: 47, scope: !3283)
!3442 = !DILocation(line: 1437, column: 55, scope: !3283)
!3443 = !DILocation(line: 1437, column: 43, scope: !3283)
!3444 = !DILocation(line: 1437, column: 67, scope: !3283)
!3445 = !DILocation(line: 1437, column: 75, scope: !3283)
!3446 = !DILocation(line: 1437, column: 80, scope: !3283)
!3447 = !DILocation(line: 1437, column: 78, scope: !3283)
!3448 = !DILocation(line: 1437, column: 63, scope: !3283)
!3449 = !DILocation(line: 1437, column: 62, scope: !3283)
!3450 = !DILocation(line: 1437, column: 59, scope: !3283)
!3451 = !DILocation(line: 1437, column: 91, scope: !3283)
!3452 = !DILocation(line: 1437, column: 41, scope: !3283)
!3453 = !DILocation(line: 1437, column: 13, scope: !3283)
!3454 = !DILocation(line: 1437, column: 21, scope: !3283)
!3455 = !DILocation(line: 1437, column: 24, scope: !3283)
!3456 = !DILocation(line: 1437, column: 29, scope: !3283)
!3457 = !DILocation(line: 1437, column: 27, scope: !3283)
!3458 = !DILocation(line: 1437, column: 9, scope: !3283)
!3459 = !DILocation(line: 1437, column: 39, scope: !3283)
!3460 = !DILocation(line: 1439, column: 14, scope: !3283)
!3461 = !DILocation(line: 1439, column: 23, scope: !3283)
!3462 = !DILocation(line: 1439, column: 12, scope: !3283)
!3463 = !DILocation(line: 1440, column: 14, scope: !3283)
!3464 = !DILocation(line: 1440, column: 12, scope: !3283)
!3465 = !DILocation(line: 1441, column: 5, scope: !3283)
!3466 = !DILocation(line: 1374, column: 29, scope: !3467)
!3467 = !DILexicalBlockFile(scope: !3278, file: !103, discriminator: 2)
!3468 = !DILocation(line: 1374, column: 5, scope: !3467)
!3469 = distinct !{!3469, !3470}
!3470 = !DILocation(line: 1374, column: 5, scope: !3196)
!3471 = !DILocation(line: 1444, column: 13, scope: !3196)
!3472 = !DILocation(line: 1444, column: 5, scope: !3196)
!3473 = !DILocation(line: 1444, column: 11, scope: !3196)
!3474 = !DILocation(line: 1446, column: 11, scope: !3475)
!3475 = distinct !DILexicalBlock(scope: !3196, file: !103, line: 1446, column: 5)
!3476 = !DILocation(line: 1446, column: 10, scope: !3475)
!3477 = !DILocation(line: 1446, column: 15, scope: !3478)
!3478 = !DILexicalBlockFile(scope: !3479, file: !103, discriminator: 1)
!3479 = distinct !DILexicalBlock(scope: !3475, file: !103, line: 1446, column: 5)
!3480 = !DILocation(line: 1446, column: 17, scope: !3478)
!3481 = !DILocation(line: 1446, column: 25, scope: !3478)
!3482 = !DILocation(line: 1446, column: 16, scope: !3478)
!3483 = !DILocation(line: 1446, column: 5, scope: !3478)
!3484 = !DILocation(line: 1447, column: 28, scope: !3485)
!3485 = distinct !DILexicalBlock(scope: !3479, file: !103, line: 1446, column: 34)
!3486 = !DILocation(line: 1447, column: 24, scope: !3485)
!3487 = !DILocation(line: 1447, column: 23, scope: !3485)
!3488 = !DILocation(line: 1447, column: 37, scope: !3485)
!3489 = !DILocation(line: 1447, column: 38, scope: !3485)
!3490 = !DILocation(line: 1447, column: 33, scope: !3485)
!3491 = !DILocation(line: 1447, column: 31, scope: !3485)
!3492 = !DILocation(line: 1447, column: 42, scope: !3485)
!3493 = !DILocation(line: 1447, column: 21, scope: !3485)
!3494 = !DILocation(line: 1447, column: 15, scope: !3485)
!3495 = !DILocation(line: 1447, column: 14, scope: !3485)
!3496 = !DILocation(line: 1447, column: 16, scope: !3485)
!3497 = !DILocation(line: 1447, column: 9, scope: !3485)
!3498 = !DILocation(line: 1447, column: 19, scope: !3485)
!3499 = !DILocation(line: 1448, column: 27, scope: !3485)
!3500 = !DILocation(line: 1448, column: 23, scope: !3485)
!3501 = !DILocation(line: 1448, column: 38, scope: !3485)
!3502 = !DILocation(line: 1448, column: 39, scope: !3485)
!3503 = !DILocation(line: 1448, column: 34, scope: !3485)
!3504 = !DILocation(line: 1448, column: 33, scope: !3485)
!3505 = !DILocation(line: 1448, column: 30, scope: !3485)
!3506 = !DILocation(line: 1448, column: 43, scope: !3485)
!3507 = !DILocation(line: 1448, column: 21, scope: !3485)
!3508 = !DILocation(line: 1448, column: 15, scope: !3485)
!3509 = !DILocation(line: 1448, column: 14, scope: !3485)
!3510 = !DILocation(line: 1448, column: 16, scope: !3485)
!3511 = !DILocation(line: 1448, column: 9, scope: !3485)
!3512 = !DILocation(line: 1448, column: 19, scope: !3485)
!3513 = !DILocation(line: 1449, column: 5, scope: !3485)
!3514 = !DILocation(line: 1446, column: 30, scope: !3515)
!3515 = !DILexicalBlockFile(scope: !3479, file: !103, discriminator: 2)
!3516 = !DILocation(line: 1446, column: 5, scope: !3515)
!3517 = distinct !{!3517, !3518}
!3518 = !DILocation(line: 1446, column: 5, scope: !3196)
!3519 = !DILocation(line: 1450, column: 28, scope: !3196)
!3520 = !DILocation(line: 1450, column: 36, scope: !3196)
!3521 = !DILocation(line: 1450, column: 24, scope: !3196)
!3522 = !DILocation(line: 1450, column: 11, scope: !3196)
!3523 = !DILocation(line: 1450, column: 10, scope: !3196)
!3524 = !DILocation(line: 1450, column: 19, scope: !3196)
!3525 = !DILocation(line: 1450, column: 5, scope: !3196)
!3526 = !DILocation(line: 1450, column: 22, scope: !3196)
!3527 = !DILocation(line: 1452, column: 5, scope: !3196)
!3528 = !{i32 346904, i32 346921, i32 346962}
!3529 = !DILocation(line: 1455, column: 1, scope: !3196)
!3530 = distinct !DISubprogram(name: "rgb24toyv12_3dnow", scope: !103, file: !103, line: 1572, type: !2321, isLocal: true, isDefinition: true, scopeLine: 1576, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3531 = !DILocalVariable(name: "src", arg: 1, scope: !3530, file: !103, line: 1572, type: !182)
!3532 = !DILocation(line: 1572, column: 53, scope: !3530)
!3533 = !DILocalVariable(name: "ydst", arg: 2, scope: !3530, file: !103, line: 1572, type: !15)
!3534 = !DILocation(line: 1572, column: 67, scope: !3530)
!3535 = !DILocalVariable(name: "udst", arg: 3, scope: !3530, file: !103, line: 1572, type: !15)
!3536 = !DILocation(line: 1572, column: 82, scope: !3530)
!3537 = !DILocalVariable(name: "vdst", arg: 4, scope: !3530, file: !103, line: 1572, type: !15)
!3538 = !DILocation(line: 1572, column: 97, scope: !3530)
!3539 = !DILocalVariable(name: "width", arg: 5, scope: !3530, file: !103, line: 1573, type: !72)
!3540 = !DILocation(line: 1573, column: 44, scope: !3530)
!3541 = !DILocalVariable(name: "height", arg: 6, scope: !3530, file: !103, line: 1573, type: !72)
!3542 = !DILocation(line: 1573, column: 55, scope: !3530)
!3543 = !DILocalVariable(name: "lumStride", arg: 7, scope: !3530, file: !103, line: 1574, type: !72)
!3544 = !DILocation(line: 1574, column: 44, scope: !3530)
!3545 = !DILocalVariable(name: "chromStride", arg: 8, scope: !3530, file: !103, line: 1574, type: !72)
!3546 = !DILocation(line: 1574, column: 59, scope: !3530)
!3547 = !DILocalVariable(name: "srcStride", arg: 9, scope: !3530, file: !103, line: 1574, type: !72)
!3548 = !DILocation(line: 1574, column: 76, scope: !3530)
!3549 = !DILocalVariable(name: "rgb2yuv", arg: 10, scope: !3530, file: !103, line: 1575, type: !2323)
!3550 = !DILocation(line: 1575, column: 49, scope: !3530)
!3551 = !DILocalVariable(name: "y", scope: !3530, file: !103, line: 1580, type: !72)
!3552 = !DILocation(line: 1580, column: 9, scope: !3530)
!3553 = !DILocalVariable(name: "chromWidth", scope: !3530, file: !103, line: 1581, type: !1759)
!3554 = !DILocation(line: 1581, column: 19, scope: !3530)
!3555 = !DILocation(line: 1581, column: 31, scope: !3530)
!3556 = !DILocation(line: 1581, column: 36, scope: !3530)
!3557 = !DILocation(line: 1583, column: 9, scope: !3558)
!3558 = distinct !DILexicalBlock(scope: !3530, file: !103, line: 1583, column: 9)
!3559 = !DILocation(line: 1583, column: 16, scope: !3558)
!3560 = !DILocation(line: 1583, column: 9, scope: !3530)
!3561 = !DILocation(line: 1584, column: 26, scope: !3562)
!3562 = distinct !DILexicalBlock(scope: !3558, file: !103, line: 1583, column: 21)
!3563 = !DILocation(line: 1584, column: 31, scope: !3562)
!3564 = !DILocation(line: 1584, column: 37, scope: !3562)
!3565 = !DILocation(line: 1584, column: 43, scope: !3562)
!3566 = !DILocation(line: 1584, column: 49, scope: !3562)
!3567 = !DILocation(line: 1584, column: 59, scope: !3562)
!3568 = !DILocation(line: 1584, column: 70, scope: !3562)
!3569 = !DILocation(line: 1584, column: 83, scope: !3562)
!3570 = !DILocation(line: 1584, column: 94, scope: !3562)
!3571 = !DILocation(line: 1584, column: 9, scope: !3562)
!3572 = !DILocation(line: 1585, column: 18, scope: !3562)
!3573 = !DILocation(line: 1585, column: 17, scope: !3562)
!3574 = !DILocation(line: 1585, column: 13, scope: !3562)
!3575 = !DILocation(line: 1586, column: 19, scope: !3562)
!3576 = !DILocation(line: 1586, column: 18, scope: !3562)
!3577 = !DILocation(line: 1586, column: 14, scope: !3562)
!3578 = !DILocation(line: 1587, column: 17, scope: !3562)
!3579 = !DILocation(line: 1587, column: 14, scope: !3562)
!3580 = !DILocation(line: 1588, column: 17, scope: !3562)
!3581 = !DILocation(line: 1588, column: 14, scope: !3562)
!3582 = !DILocation(line: 1589, column: 16, scope: !3562)
!3583 = !DILocation(line: 1590, column: 5, scope: !3562)
!3584 = !DILocation(line: 1592, column: 11, scope: !3585)
!3585 = distinct !DILexicalBlock(scope: !3530, file: !103, line: 1592, column: 5)
!3586 = !DILocation(line: 1592, column: 10, scope: !3585)
!3587 = !DILocation(line: 1592, column: 15, scope: !3588)
!3588 = !DILexicalBlockFile(scope: !3589, file: !103, discriminator: 1)
!3589 = distinct !DILexicalBlock(scope: !3585, file: !103, line: 1592, column: 5)
!3590 = !DILocation(line: 1592, column: 17, scope: !3588)
!3591 = !DILocation(line: 1592, column: 23, scope: !3588)
!3592 = !DILocation(line: 1592, column: 16, scope: !3588)
!3593 = !DILocation(line: 1592, column: 5, scope: !3588)
!3594 = !DILocalVariable(name: "i", scope: !3595, file: !103, line: 1593, type: !72)
!3595 = distinct !DILexicalBlock(scope: !3589, file: !103, line: 1592, column: 33)
!3596 = !DILocation(line: 1593, column: 13, scope: !3595)
!3597 = !DILocation(line: 1594, column: 15, scope: !3598)
!3598 = distinct !DILexicalBlock(scope: !3595, file: !103, line: 1594, column: 9)
!3599 = !DILocation(line: 1594, column: 14, scope: !3598)
!3600 = !DILocation(line: 1594, column: 19, scope: !3601)
!3601 = !DILexicalBlockFile(scope: !3602, file: !103, discriminator: 1)
!3602 = distinct !DILexicalBlock(scope: !3598, file: !103, line: 1594, column: 9)
!3603 = !DILocation(line: 1594, column: 20, scope: !3601)
!3604 = !DILocation(line: 1594, column: 9, scope: !3601)
!3605 = !DILocation(line: 1657, column: 26, scope: !3606)
!3606 = distinct !DILexicalBlock(scope: !3602, file: !103, line: 1594, column: 29)
!3607 = !DILocation(line: 1657, column: 30, scope: !3606)
!3608 = !DILocation(line: 1657, column: 35, scope: !3606)
!3609 = !DILocation(line: 1657, column: 29, scope: !3606)
!3610 = !DILocation(line: 1657, column: 45, scope: !3606)
!3611 = !DILocation(line: 1657, column: 50, scope: !3606)
!3612 = !DILocation(line: 1657, column: 49, scope: !3606)
!3613 = !DILocation(line: 1657, column: 73, scope: !3606)
!3614 = !DILocation(line: 1657, column: 72, scope: !3606)
!3615 = !DILocation(line: 1657, column: 63, scope: !3606)
!3616 = !DILocation(line: 1657, column: 85, scope: !3606)
!3617 = !DILocation(line: 1595, column: 13, scope: !3606)
!3618 = !{i32 347803, i32 347846, i32 347915, i32 347978, i32 348044, i32 348108, i32 348174, i32 348240, i32 348305, i32 348368, i32 348431, i32 348497, i32 348563, i32 348626, i32 348689, i32 348755, i32 348821, i32 348887, i32 348953, i32 349019, i32 349085, i32 349151, i32 349217, i32 349283, i32 349349, i32 349415, i32 349481, i32 349547, i32 349613, i32 349679, i32 349745, i32 349809, i32 349872, i32 349938, i32 350004, i32 350067, i32 350130, i32 350196, i32 350262, i32 350328, i32 350394, i32 350460, i32 350526, i32 350592, i32 350658, i32 350724, i32 350790, i32 350856, i32 350922, i32 350988, i32 351054, i32 351117, i32 351183, i32 351249, i32 351316, i32 351379, i32 351450, i32 351520, i32 351593}
!3619 = !DILocation(line: 1661, column: 21, scope: !3606)
!3620 = !DILocation(line: 1661, column: 18, scope: !3606)
!3621 = !DILocation(line: 1662, column: 20, scope: !3606)
!3622 = !DILocation(line: 1662, column: 17, scope: !3606)
!3623 = !DILocation(line: 1663, column: 9, scope: !3606)
!3624 = !DILocation(line: 1594, column: 25, scope: !3625)
!3625 = !DILexicalBlockFile(scope: !3602, file: !103, discriminator: 2)
!3626 = !DILocation(line: 1594, column: 9, scope: !3625)
!3627 = distinct !{!3627, !3628}
!3628 = !DILocation(line: 1594, column: 9, scope: !3595)
!3629 = !DILocation(line: 1664, column: 16, scope: !3595)
!3630 = !DILocation(line: 1664, column: 25, scope: !3595)
!3631 = !DILocation(line: 1664, column: 13, scope: !3595)
!3632 = !DILocation(line: 1806, column: 22, scope: !3595)
!3633 = !DILocation(line: 1806, column: 26, scope: !3595)
!3634 = !DILocation(line: 1806, column: 36, scope: !3595)
!3635 = !DILocation(line: 1806, column: 25, scope: !3595)
!3636 = !DILocation(line: 1806, column: 46, scope: !3595)
!3637 = !DILocation(line: 1806, column: 50, scope: !3595)
!3638 = !DILocation(line: 1806, column: 49, scope: !3595)
!3639 = !DILocation(line: 1806, column: 60, scope: !3595)
!3640 = !DILocation(line: 1806, column: 70, scope: !3595)
!3641 = !DILocation(line: 1806, column: 59, scope: !3595)
!3642 = !DILocation(line: 1806, column: 80, scope: !3595)
!3643 = !DILocation(line: 1806, column: 85, scope: !3595)
!3644 = !DILocation(line: 1806, column: 84, scope: !3595)
!3645 = !DILocation(line: 1806, column: 103, scope: !3595)
!3646 = !DILocation(line: 1806, column: 108, scope: !3595)
!3647 = !DILocation(line: 1806, column: 107, scope: !3595)
!3648 = !DILocation(line: 1806, column: 127, scope: !3595)
!3649 = !DILocation(line: 1806, column: 126, scope: !3595)
!3650 = !DILocation(line: 1806, column: 144, scope: !3595)
!3651 = !DILocation(line: 1665, column: 9, scope: !3595)
!3652 = !{i32 351897, i32 351940, i32 351999, i32 352064, i32 352126, i32 352186, i32 352242, i32 352304, i32 352366, i32 352427, i32 352488, i32 352548, i32 352607, i32 352666, i32 352725, i32 352791, i32 352857, i32 352919, i32 352981, i32 353043, i32 353105, i32 353171, i32 353237, i32 353299, i32 353361, i32 353469, i32 353534, i32 353597, i32 353659, i32 353721, i32 353783, i32 353845, i32 353907, i32 353969, i32 354031, i32 354093, i32 354155, i32 354217, i32 354279, i32 354341, i32 354403, i32 354464, i32 354523, i32 354582, i32 354641, i32 354707, i32 354773, i32 354835, i32 354897, i32 354959, i32 355021, i32 355087, i32 355153, i32 355215, i32 355277, i32 355385, i32 355450, i32 355513, i32 355575, i32 355637, i32 355699, i32 355761, i32 355823, i32 355885, i32 355947, i32 356009, i32 356071, i32 356133, i32 356195, i32 356254, i32 356316, i32 356378, i32 356445, i32 356511, i32 356577, i32 356643, i32 356706, i32 356772, i32 356841, i32 356907, i32 356973, i32 357035}
!3653 = !DILocation(line: 1811, column: 17, scope: !3595)
!3654 = !DILocation(line: 1811, column: 14, scope: !3595)
!3655 = !DILocation(line: 1812, column: 17, scope: !3595)
!3656 = !DILocation(line: 1812, column: 14, scope: !3595)
!3657 = !DILocation(line: 1813, column: 16, scope: !3595)
!3658 = !DILocation(line: 1813, column: 25, scope: !3595)
!3659 = !DILocation(line: 1813, column: 13, scope: !3595)
!3660 = !DILocation(line: 1814, column: 5, scope: !3595)
!3661 = !DILocation(line: 1592, column: 28, scope: !3662)
!3662 = !DILexicalBlockFile(scope: !3589, file: !103, discriminator: 2)
!3663 = !DILocation(line: 1592, column: 5, scope: !3662)
!3664 = distinct !{!3664, !3665}
!3665 = !DILocation(line: 1592, column: 5, scope: !3530)
!3666 = !DILocation(line: 1816, column: 5, scope: !3530)
!3667 = !{i32 357364, i32 357381, i32 357422}
!3668 = !DILocation(line: 1820, column: 23, scope: !3530)
!3669 = !DILocation(line: 1820, column: 28, scope: !3530)
!3670 = !DILocation(line: 1820, column: 34, scope: !3530)
!3671 = !DILocation(line: 1820, column: 40, scope: !3530)
!3672 = !DILocation(line: 1820, column: 46, scope: !3530)
!3673 = !DILocation(line: 1820, column: 53, scope: !3530)
!3674 = !DILocation(line: 1820, column: 60, scope: !3530)
!3675 = !DILocation(line: 1820, column: 59, scope: !3530)
!3676 = !DILocation(line: 1820, column: 63, scope: !3530)
!3677 = !DILocation(line: 1820, column: 74, scope: !3530)
!3678 = !DILocation(line: 1820, column: 87, scope: !3530)
!3679 = !DILocation(line: 1820, column: 98, scope: !3530)
!3680 = !DILocation(line: 1820, column: 6, scope: !3530)
!3681 = !DILocation(line: 1821, column: 1, scope: !3530)
!3682 = distinct !DISubprogram(name: "yuyvtoyuv420_3dnow", scope: !103, file: !103, line: 2393, type: !2193, isLocal: true, isDefinition: true, scopeLine: 2396, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3683 = !DILocalVariable(name: "ydst", arg: 1, scope: !3682, file: !103, line: 2393, type: !15)
!3684 = !DILocation(line: 2393, column: 41, scope: !3682)
!3685 = !DILocalVariable(name: "udst", arg: 2, scope: !3682, file: !103, line: 2393, type: !15)
!3686 = !DILocation(line: 2393, column: 56, scope: !3682)
!3687 = !DILocalVariable(name: "vdst", arg: 3, scope: !3682, file: !103, line: 2393, type: !15)
!3688 = !DILocation(line: 2393, column: 71, scope: !3682)
!3689 = !DILocalVariable(name: "src", arg: 4, scope: !3682, file: !103, line: 2393, type: !182)
!3690 = !DILocation(line: 2393, column: 92, scope: !3682)
!3691 = !DILocalVariable(name: "width", arg: 5, scope: !3682, file: !103, line: 2394, type: !72)
!3692 = !DILocation(line: 2394, column: 38, scope: !3682)
!3693 = !DILocalVariable(name: "height", arg: 6, scope: !3682, file: !103, line: 2394, type: !72)
!3694 = !DILocation(line: 2394, column: 49, scope: !3682)
!3695 = !DILocalVariable(name: "lumStride", arg: 7, scope: !3682, file: !103, line: 2395, type: !72)
!3696 = !DILocation(line: 2395, column: 38, scope: !3682)
!3697 = !DILocalVariable(name: "chromStride", arg: 8, scope: !3682, file: !103, line: 2395, type: !72)
!3698 = !DILocation(line: 2395, column: 53, scope: !3682)
!3699 = !DILocalVariable(name: "srcStride", arg: 9, scope: !3682, file: !103, line: 2395, type: !72)
!3700 = !DILocation(line: 2395, column: 70, scope: !3682)
!3701 = !DILocalVariable(name: "y", scope: !3682, file: !103, line: 2397, type: !72)
!3702 = !DILocation(line: 2397, column: 9, scope: !3682)
!3703 = !DILocalVariable(name: "chromWidth", scope: !3682, file: !103, line: 2398, type: !826)
!3704 = !DILocation(line: 2398, column: 15, scope: !3682)
!3705 = !DILocation(line: 2398, column: 81, scope: !3682)
!3706 = !DILocation(line: 2398, column: 88, scope: !3682)
!3707 = !DILocation(line: 2398, column: 99, scope: !3682)
!3708 = !DILocation(line: 2398, column: 104, scope: !3682)
!3709 = !DILocation(line: 2400, column: 11, scope: !3710)
!3710 = distinct !DILexicalBlock(scope: !3682, file: !103, line: 2400, column: 5)
!3711 = !DILocation(line: 2400, column: 10, scope: !3710)
!3712 = !DILocation(line: 2400, column: 15, scope: !3713)
!3713 = !DILexicalBlockFile(scope: !3714, file: !103, discriminator: 1)
!3714 = distinct !DILexicalBlock(scope: !3710, file: !103, line: 2400, column: 5)
!3715 = !DILocation(line: 2400, column: 17, scope: !3713)
!3716 = !DILocation(line: 2400, column: 16, scope: !3713)
!3717 = !DILocation(line: 2400, column: 5, scope: !3713)
!3718 = !DILocation(line: 2401, column: 28, scope: !3719)
!3719 = distinct !DILexicalBlock(scope: !3714, file: !103, line: 2400, column: 30)
!3720 = !DILocation(line: 2401, column: 33, scope: !3719)
!3721 = !DILocation(line: 2401, column: 39, scope: !3719)
!3722 = !DILocation(line: 2401, column: 9, scope: !3719)
!3723 = !DILocation(line: 2402, column: 12, scope: !3724)
!3724 = distinct !DILexicalBlock(scope: !3719, file: !103, line: 2402, column: 12)
!3725 = !DILocation(line: 2402, column: 13, scope: !3724)
!3726 = !DILocation(line: 2402, column: 12, scope: !3719)
!3727 = !DILocation(line: 2403, column: 35, scope: !3728)
!3728 = distinct !DILexicalBlock(scope: !3724, file: !103, line: 2402, column: 17)
!3729 = !DILocation(line: 2403, column: 39, scope: !3728)
!3730 = !DILocation(line: 2403, column: 38, scope: !3728)
!3731 = !DILocation(line: 2403, column: 50, scope: !3728)
!3732 = !DILocation(line: 2403, column: 55, scope: !3728)
!3733 = !DILocation(line: 2403, column: 61, scope: !3728)
!3734 = !DILocation(line: 2403, column: 67, scope: !3728)
!3735 = !DILocation(line: 2403, column: 13, scope: !3728)
!3736 = !DILocation(line: 2404, column: 20, scope: !3728)
!3737 = !DILocation(line: 2404, column: 17, scope: !3728)
!3738 = !DILocation(line: 2405, column: 20, scope: !3728)
!3739 = !DILocation(line: 2405, column: 17, scope: !3728)
!3740 = !DILocation(line: 2406, column: 9, scope: !3728)
!3741 = !DILocation(line: 2408, column: 16, scope: !3719)
!3742 = !DILocation(line: 2408, column: 13, scope: !3719)
!3743 = !DILocation(line: 2409, column: 16, scope: !3719)
!3744 = !DILocation(line: 2409, column: 13, scope: !3719)
!3745 = !DILocation(line: 2410, column: 5, scope: !3719)
!3746 = !DILocation(line: 2400, column: 26, scope: !3747)
!3747 = !DILexicalBlockFile(scope: !3714, file: !103, discriminator: 2)
!3748 = !DILocation(line: 2400, column: 5, scope: !3747)
!3749 = distinct !{!3749, !3750}
!3750 = !DILocation(line: 2400, column: 5, scope: !3682)
!3751 = !DILocation(line: 2411, column: 5, scope: !3682)
!3752 = !{i32 365319, i32 365336, i32 365368}
!3753 = !DILocation(line: 2416, column: 1, scope: !3682)
!3754 = distinct !DISubprogram(name: "uyvytoyuv420_3dnow", scope: !103, file: !103, line: 2443, type: !2193, isLocal: true, isDefinition: true, scopeLine: 2446, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3755 = !DILocalVariable(name: "ydst", arg: 1, scope: !3754, file: !103, line: 2443, type: !15)
!3756 = !DILocation(line: 2443, column: 41, scope: !3754)
!3757 = !DILocalVariable(name: "udst", arg: 2, scope: !3754, file: !103, line: 2443, type: !15)
!3758 = !DILocation(line: 2443, column: 56, scope: !3754)
!3759 = !DILocalVariable(name: "vdst", arg: 3, scope: !3754, file: !103, line: 2443, type: !15)
!3760 = !DILocation(line: 2443, column: 71, scope: !3754)
!3761 = !DILocalVariable(name: "src", arg: 4, scope: !3754, file: !103, line: 2443, type: !182)
!3762 = !DILocation(line: 2443, column: 92, scope: !3754)
!3763 = !DILocalVariable(name: "width", arg: 5, scope: !3754, file: !103, line: 2444, type: !72)
!3764 = !DILocation(line: 2444, column: 38, scope: !3754)
!3765 = !DILocalVariable(name: "height", arg: 6, scope: !3754, file: !103, line: 2444, type: !72)
!3766 = !DILocation(line: 2444, column: 49, scope: !3754)
!3767 = !DILocalVariable(name: "lumStride", arg: 7, scope: !3754, file: !103, line: 2445, type: !72)
!3768 = !DILocation(line: 2445, column: 38, scope: !3754)
!3769 = !DILocalVariable(name: "chromStride", arg: 8, scope: !3754, file: !103, line: 2445, type: !72)
!3770 = !DILocation(line: 2445, column: 53, scope: !3754)
!3771 = !DILocalVariable(name: "srcStride", arg: 9, scope: !3754, file: !103, line: 2445, type: !72)
!3772 = !DILocation(line: 2445, column: 70, scope: !3754)
!3773 = !DILocalVariable(name: "y", scope: !3754, file: !103, line: 2447, type: !72)
!3774 = !DILocation(line: 2447, column: 9, scope: !3754)
!3775 = !DILocalVariable(name: "chromWidth", scope: !3754, file: !103, line: 2448, type: !826)
!3776 = !DILocation(line: 2448, column: 15, scope: !3754)
!3777 = !DILocation(line: 2448, column: 81, scope: !3754)
!3778 = !DILocation(line: 2448, column: 88, scope: !3754)
!3779 = !DILocation(line: 2448, column: 99, scope: !3754)
!3780 = !DILocation(line: 2448, column: 104, scope: !3754)
!3781 = !DILocation(line: 2450, column: 11, scope: !3782)
!3782 = distinct !DILexicalBlock(scope: !3754, file: !103, line: 2450, column: 5)
!3783 = !DILocation(line: 2450, column: 10, scope: !3782)
!3784 = !DILocation(line: 2450, column: 15, scope: !3785)
!3785 = !DILexicalBlockFile(scope: !3786, file: !103, discriminator: 1)
!3786 = distinct !DILexicalBlock(scope: !3782, file: !103, line: 2450, column: 5)
!3787 = !DILocation(line: 2450, column: 17, scope: !3785)
!3788 = !DILocation(line: 2450, column: 16, scope: !3785)
!3789 = !DILocation(line: 2450, column: 5, scope: !3785)
!3790 = !DILocation(line: 2451, column: 27, scope: !3791)
!3791 = distinct !DILexicalBlock(scope: !3786, file: !103, line: 2450, column: 30)
!3792 = !DILocation(line: 2451, column: 32, scope: !3791)
!3793 = !DILocation(line: 2451, column: 38, scope: !3791)
!3794 = !DILocation(line: 2451, column: 9, scope: !3791)
!3795 = !DILocation(line: 2452, column: 12, scope: !3796)
!3796 = distinct !DILexicalBlock(scope: !3791, file: !103, line: 2452, column: 12)
!3797 = !DILocation(line: 2452, column: 13, scope: !3796)
!3798 = !DILocation(line: 2452, column: 12, scope: !3791)
!3799 = !DILocation(line: 2453, column: 36, scope: !3800)
!3800 = distinct !DILexicalBlock(scope: !3796, file: !103, line: 2452, column: 17)
!3801 = !DILocation(line: 2453, column: 40, scope: !3800)
!3802 = !DILocation(line: 2453, column: 39, scope: !3800)
!3803 = !DILocation(line: 2453, column: 51, scope: !3800)
!3804 = !DILocation(line: 2453, column: 56, scope: !3800)
!3805 = !DILocation(line: 2453, column: 62, scope: !3800)
!3806 = !DILocation(line: 2453, column: 68, scope: !3800)
!3807 = !DILocation(line: 2453, column: 13, scope: !3800)
!3808 = !DILocation(line: 2454, column: 20, scope: !3800)
!3809 = !DILocation(line: 2454, column: 17, scope: !3800)
!3810 = !DILocation(line: 2455, column: 20, scope: !3800)
!3811 = !DILocation(line: 2455, column: 17, scope: !3800)
!3812 = !DILocation(line: 2456, column: 9, scope: !3800)
!3813 = !DILocation(line: 2458, column: 16, scope: !3791)
!3814 = !DILocation(line: 2458, column: 13, scope: !3791)
!3815 = !DILocation(line: 2459, column: 16, scope: !3791)
!3816 = !DILocation(line: 2459, column: 13, scope: !3791)
!3817 = !DILocation(line: 2460, column: 5, scope: !3791)
!3818 = !DILocation(line: 2450, column: 26, scope: !3819)
!3819 = !DILexicalBlockFile(scope: !3786, file: !103, discriminator: 2)
!3820 = !DILocation(line: 2450, column: 5, scope: !3819)
!3821 = distinct !{!3821, !3822}
!3822 = !DILocation(line: 2450, column: 5, scope: !3754)
!3823 = !DILocation(line: 2461, column: 5, scope: !3754)
!3824 = !{i32 366143, i32 366160, i32 366192}
!3825 = !DILocation(line: 2466, column: 1, scope: !3754)
!3826 = distinct !DISubprogram(name: "extract_even_3dnow", scope: !103, file: !103, line: 2113, type: !2859, isLocal: true, isDefinition: true, scopeLine: 2114, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3827 = !DILocalVariable(name: "src", arg: 1, scope: !3826, file: !103, line: 2113, type: !182)
!3828 = !DILocation(line: 2113, column: 47, scope: !3826)
!3829 = !DILocalVariable(name: "dst", arg: 2, scope: !3826, file: !103, line: 2113, type: !15)
!3830 = !DILocation(line: 2113, column: 61, scope: !3826)
!3831 = !DILocalVariable(name: "count", arg: 3, scope: !3826, file: !103, line: 2113, type: !18)
!3832 = !DILocation(line: 2113, column: 74, scope: !3826)
!3833 = !DILocation(line: 2115, column: 12, scope: !3826)
!3834 = !DILocation(line: 2115, column: 9, scope: !3826)
!3835 = !DILocation(line: 2116, column: 14, scope: !3826)
!3836 = !DILocation(line: 2116, column: 13, scope: !3826)
!3837 = !DILocation(line: 2116, column: 9, scope: !3826)
!3838 = !DILocation(line: 2117, column: 14, scope: !3826)
!3839 = !DILocation(line: 2117, column: 12, scope: !3826)
!3840 = !DILocation(line: 2117, column: 10, scope: !3826)
!3841 = !DILocation(line: 2119, column: 8, scope: !3842)
!3842 = distinct !DILexicalBlock(scope: !3826, file: !103, line: 2119, column: 8)
!3843 = !DILocation(line: 2119, column: 14, scope: !3842)
!3844 = !DILocation(line: 2119, column: 8, scope: !3826)
!3845 = !DILocation(line: 2120, column: 15, scope: !3846)
!3846 = distinct !DILexicalBlock(scope: !3842, file: !103, line: 2119, column: 22)
!3847 = !DILocation(line: 2121, column: 9, scope: !3846)
!3848 = !DILocation(line: 2140, column: 19, scope: !3846)
!3849 = !DILocation(line: 2140, column: 29, scope: !3846)
!3850 = !{i32 357837, i32 357874, i32 357927, i32 357980, i32 358033, i32 358086, i32 358139, i32 358192, i32 358245, i32 358298, i32 358351, i32 358404, i32 358457, i32 358510, i32 358563, i32 358616, i32 358669, i32 358722}
!3851 = !DILocation(line: 2142, column: 15, scope: !3846)
!3852 = !DILocation(line: 2143, column: 5, scope: !3846)
!3853 = !DILocation(line: 2144, column: 5, scope: !3826)
!3854 = !DILocation(line: 2144, column: 11, scope: !3855)
!3855 = !DILexicalBlockFile(scope: !3826, file: !103, discriminator: 1)
!3856 = !DILocation(line: 2144, column: 16, scope: !3855)
!3857 = !DILocation(line: 2144, column: 5, scope: !3855)
!3858 = !DILocation(line: 2145, column: 27, scope: !3859)
!3859 = distinct !DILexicalBlock(scope: !3826, file: !103, line: 2144, column: 20)
!3860 = !DILocation(line: 2145, column: 26, scope: !3859)
!3861 = !DILocation(line: 2145, column: 21, scope: !3859)
!3862 = !DILocation(line: 2145, column: 13, scope: !3859)
!3863 = !DILocation(line: 2145, column: 9, scope: !3859)
!3864 = !DILocation(line: 2145, column: 19, scope: !3859)
!3865 = !DILocation(line: 2146, column: 14, scope: !3859)
!3866 = !DILocation(line: 2144, column: 5, scope: !3867)
!3867 = !DILexicalBlockFile(scope: !3826, file: !103, discriminator: 2)
!3868 = distinct !{!3868, !3853}
!3869 = !DILocation(line: 2148, column: 1, scope: !3826)
!3870 = distinct !DISubprogram(name: "extract_odd2avg_3dnow", scope: !103, file: !103, line: 2338, type: !3067, isLocal: true, isDefinition: true, scopeLine: 2339, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3871 = !DILocalVariable(name: "src0", arg: 1, scope: !3870, file: !103, line: 2338, type: !182)
!3872 = !DILocation(line: 2338, column: 50, scope: !3870)
!3873 = !DILocalVariable(name: "src1", arg: 2, scope: !3870, file: !103, line: 2338, type: !182)
!3874 = !DILocation(line: 2338, column: 71, scope: !3870)
!3875 = !DILocalVariable(name: "dst0", arg: 3, scope: !3870, file: !103, line: 2338, type: !15)
!3876 = !DILocation(line: 2338, column: 86, scope: !3870)
!3877 = !DILocalVariable(name: "dst1", arg: 4, scope: !3870, file: !103, line: 2338, type: !15)
!3878 = !DILocation(line: 2338, column: 101, scope: !3870)
!3879 = !DILocalVariable(name: "count", arg: 5, scope: !3870, file: !103, line: 2338, type: !18)
!3880 = !DILocation(line: 2338, column: 115, scope: !3870)
!3881 = !DILocation(line: 2340, column: 13, scope: !3870)
!3882 = !DILocation(line: 2340, column: 10, scope: !3870)
!3883 = !DILocation(line: 2341, column: 13, scope: !3870)
!3884 = !DILocation(line: 2341, column: 10, scope: !3870)
!3885 = !DILocation(line: 2342, column: 15, scope: !3870)
!3886 = !DILocation(line: 2342, column: 14, scope: !3870)
!3887 = !DILocation(line: 2342, column: 10, scope: !3870)
!3888 = !DILocation(line: 2343, column: 15, scope: !3870)
!3889 = !DILocation(line: 2343, column: 14, scope: !3870)
!3890 = !DILocation(line: 2343, column: 10, scope: !3870)
!3891 = !DILocation(line: 2344, column: 14, scope: !3870)
!3892 = !DILocation(line: 2344, column: 12, scope: !3870)
!3893 = !DILocation(line: 2344, column: 10, scope: !3870)
!3894 = !DILocation(line: 2346, column: 8, scope: !3895)
!3895 = distinct !DILexicalBlock(scope: !3870, file: !103, line: 2346, column: 8)
!3896 = !DILocation(line: 2346, column: 14, scope: !3895)
!3897 = !DILocation(line: 2346, column: 8, scope: !3870)
!3898 = !DILocation(line: 2347, column: 15, scope: !3899)
!3899 = distinct !DILexicalBlock(scope: !3895, file: !103, line: 2346, column: 21)
!3900 = !DILocation(line: 2348, column: 9, scope: !3899)
!3901 = !DILocation(line: 2379, column: 19, scope: !3899)
!3902 = !DILocation(line: 2379, column: 30, scope: !3899)
!3903 = !DILocation(line: 2379, column: 41, scope: !3899)
!3904 = !DILocation(line: 2379, column: 52, scope: !3899)
!3905 = !{i32 362751, i32 362789, i32 362843, i32 362896, i32 362950, i32 363004, i32 363058, i32 363112, i32 363170, i32 363228, i32 363286, i32 363344, i32 363398, i32 363452, i32 363506, i32 363560, i32 363614, i32 363668, i32 363722, i32 363776, i32 363830, i32 363884, i32 363938, i32 363992, i32 364046, i32 364100, i32 364154, i32 364208, i32 364262, i32 364315}
!3906 = !DILocation(line: 2381, column: 15, scope: !3899)
!3907 = !DILocation(line: 2382, column: 5, scope: !3899)
!3908 = !DILocation(line: 2384, column: 9, scope: !3870)
!3909 = !DILocation(line: 2385, column: 9, scope: !3870)
!3910 = !DILocation(line: 2386, column: 5, scope: !3870)
!3911 = !DILocation(line: 2386, column: 11, scope: !3912)
!3912 = !DILexicalBlockFile(scope: !3870, file: !103, discriminator: 1)
!3913 = !DILocation(line: 2386, column: 16, scope: !3912)
!3914 = !DILocation(line: 2386, column: 5, scope: !3912)
!3915 = !DILocation(line: 2387, column: 30, scope: !3916)
!3916 = distinct !DILexicalBlock(scope: !3870, file: !103, line: 2386, column: 20)
!3917 = !DILocation(line: 2387, column: 29, scope: !3916)
!3918 = !DILocation(line: 2387, column: 35, scope: !3916)
!3919 = !DILocation(line: 2387, column: 23, scope: !3916)
!3920 = !DILocation(line: 2387, column: 46, scope: !3916)
!3921 = !DILocation(line: 2387, column: 45, scope: !3916)
!3922 = !DILocation(line: 2387, column: 51, scope: !3916)
!3923 = !DILocation(line: 2387, column: 39, scope: !3916)
!3924 = !DILocation(line: 2387, column: 38, scope: !3916)
!3925 = !DILocation(line: 2387, column: 55, scope: !3916)
!3926 = !DILocation(line: 2387, column: 22, scope: !3916)
!3927 = !DILocation(line: 2387, column: 14, scope: !3916)
!3928 = !DILocation(line: 2387, column: 9, scope: !3916)
!3929 = !DILocation(line: 2387, column: 20, scope: !3916)
!3930 = !DILocation(line: 2388, column: 30, scope: !3916)
!3931 = !DILocation(line: 2388, column: 29, scope: !3916)
!3932 = !DILocation(line: 2388, column: 35, scope: !3916)
!3933 = !DILocation(line: 2388, column: 23, scope: !3916)
!3934 = !DILocation(line: 2388, column: 46, scope: !3916)
!3935 = !DILocation(line: 2388, column: 45, scope: !3916)
!3936 = !DILocation(line: 2388, column: 51, scope: !3916)
!3937 = !DILocation(line: 2388, column: 39, scope: !3916)
!3938 = !DILocation(line: 2388, column: 38, scope: !3916)
!3939 = !DILocation(line: 2388, column: 55, scope: !3916)
!3940 = !DILocation(line: 2388, column: 22, scope: !3916)
!3941 = !DILocation(line: 2388, column: 14, scope: !3916)
!3942 = !DILocation(line: 2388, column: 9, scope: !3916)
!3943 = !DILocation(line: 2388, column: 20, scope: !3916)
!3944 = !DILocation(line: 2389, column: 14, scope: !3916)
!3945 = !DILocation(line: 2386, column: 5, scope: !3946)
!3946 = !DILexicalBlockFile(scope: !3870, file: !103, discriminator: 2)
!3947 = distinct !{!3947, !3910}
!3948 = !DILocation(line: 2391, column: 1, scope: !3870)
!3949 = distinct !DISubprogram(name: "extract_odd_3dnow", scope: !103, file: !103, line: 2150, type: !2859, isLocal: true, isDefinition: true, scopeLine: 2151, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3950 = !DILocalVariable(name: "src", arg: 1, scope: !3949, file: !103, line: 2150, type: !182)
!3951 = !DILocation(line: 2150, column: 46, scope: !3949)
!3952 = !DILocalVariable(name: "dst", arg: 2, scope: !3949, file: !103, line: 2150, type: !15)
!3953 = !DILocation(line: 2150, column: 60, scope: !3949)
!3954 = !DILocalVariable(name: "count", arg: 3, scope: !3949, file: !103, line: 2150, type: !18)
!3955 = !DILocation(line: 2150, column: 73, scope: !3949)
!3956 = !DILocation(line: 2152, column: 9, scope: !3949)
!3957 = !DILocation(line: 2153, column: 12, scope: !3949)
!3958 = !DILocation(line: 2153, column: 9, scope: !3949)
!3959 = !DILocation(line: 2154, column: 14, scope: !3949)
!3960 = !DILocation(line: 2154, column: 13, scope: !3949)
!3961 = !DILocation(line: 2154, column: 9, scope: !3949)
!3962 = !DILocation(line: 2155, column: 14, scope: !3949)
!3963 = !DILocation(line: 2155, column: 12, scope: !3949)
!3964 = !DILocation(line: 2155, column: 10, scope: !3949)
!3965 = !DILocation(line: 2157, column: 8, scope: !3966)
!3966 = distinct !DILexicalBlock(scope: !3949, file: !103, line: 2157, column: 8)
!3967 = !DILocation(line: 2157, column: 14, scope: !3966)
!3968 = !DILocation(line: 2157, column: 8, scope: !3949)
!3969 = !DILocation(line: 2158, column: 15, scope: !3970)
!3970 = distinct !DILexicalBlock(scope: !3966, file: !103, line: 2157, column: 21)
!3971 = !DILocation(line: 2159, column: 9, scope: !3970)
!3972 = !DILocation(line: 2178, column: 19, scope: !3970)
!3973 = !DILocation(line: 2178, column: 29, scope: !3970)
!3974 = !{i32 359137, i32 359174, i32 359227, i32 359280, i32 359333, i32 359386, i32 359439, i32 359492, i32 359545, i32 359598, i32 359651, i32 359704, i32 359757, i32 359810, i32 359863, i32 359916, i32 359969, i32 360022}
!3975 = !DILocation(line: 2180, column: 15, scope: !3970)
!3976 = !DILocation(line: 2181, column: 5, scope: !3970)
!3977 = !DILocation(line: 2182, column: 5, scope: !3949)
!3978 = !DILocation(line: 2182, column: 11, scope: !3979)
!3979 = !DILexicalBlockFile(scope: !3949, file: !103, discriminator: 1)
!3980 = !DILocation(line: 2182, column: 16, scope: !3979)
!3981 = !DILocation(line: 2182, column: 5, scope: !3979)
!3982 = !DILocation(line: 2183, column: 27, scope: !3983)
!3983 = distinct !DILexicalBlock(scope: !3949, file: !103, line: 2182, column: 20)
!3984 = !DILocation(line: 2183, column: 26, scope: !3983)
!3985 = !DILocation(line: 2183, column: 21, scope: !3983)
!3986 = !DILocation(line: 2183, column: 13, scope: !3983)
!3987 = !DILocation(line: 2183, column: 9, scope: !3983)
!3988 = !DILocation(line: 2183, column: 19, scope: !3983)
!3989 = !DILocation(line: 2184, column: 14, scope: !3983)
!3990 = !DILocation(line: 2182, column: 5, scope: !3991)
!3991 = !DILexicalBlockFile(scope: !3949, file: !103, discriminator: 2)
!3992 = distinct !{!3992, !3977}
!3993 = !DILocation(line: 2186, column: 1, scope: !3949)
!3994 = distinct !DISubprogram(name: "extract_even2avg_3dnow", scope: !103, file: !103, line: 2236, type: !3067, isLocal: true, isDefinition: true, scopeLine: 2237, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3995 = !DILocalVariable(name: "src0", arg: 1, scope: !3994, file: !103, line: 2236, type: !182)
!3996 = !DILocation(line: 2236, column: 51, scope: !3994)
!3997 = !DILocalVariable(name: "src1", arg: 2, scope: !3994, file: !103, line: 2236, type: !182)
!3998 = !DILocation(line: 2236, column: 72, scope: !3994)
!3999 = !DILocalVariable(name: "dst0", arg: 3, scope: !3994, file: !103, line: 2236, type: !15)
!4000 = !DILocation(line: 2236, column: 87, scope: !3994)
!4001 = !DILocalVariable(name: "dst1", arg: 4, scope: !3994, file: !103, line: 2236, type: !15)
!4002 = !DILocation(line: 2236, column: 102, scope: !3994)
!4003 = !DILocalVariable(name: "count", arg: 5, scope: !3994, file: !103, line: 2236, type: !18)
!4004 = !DILocation(line: 2236, column: 116, scope: !3994)
!4005 = !DILocation(line: 2238, column: 13, scope: !3994)
!4006 = !DILocation(line: 2238, column: 10, scope: !3994)
!4007 = !DILocation(line: 2239, column: 13, scope: !3994)
!4008 = !DILocation(line: 2239, column: 10, scope: !3994)
!4009 = !DILocation(line: 2240, column: 15, scope: !3994)
!4010 = !DILocation(line: 2240, column: 14, scope: !3994)
!4011 = !DILocation(line: 2240, column: 10, scope: !3994)
!4012 = !DILocation(line: 2241, column: 15, scope: !3994)
!4013 = !DILocation(line: 2241, column: 14, scope: !3994)
!4014 = !DILocation(line: 2241, column: 10, scope: !3994)
!4015 = !DILocation(line: 2242, column: 14, scope: !3994)
!4016 = !DILocation(line: 2242, column: 12, scope: !3994)
!4017 = !DILocation(line: 2242, column: 10, scope: !3994)
!4018 = !DILocation(line: 2244, column: 8, scope: !4019)
!4019 = distinct !DILexicalBlock(scope: !3994, file: !103, line: 2244, column: 8)
!4020 = !DILocation(line: 2244, column: 14, scope: !4019)
!4021 = !DILocation(line: 2244, column: 8, scope: !3994)
!4022 = !DILocation(line: 2245, column: 15, scope: !4023)
!4023 = distinct !DILexicalBlock(scope: !4019, file: !103, line: 2244, column: 21)
!4024 = !DILocation(line: 2246, column: 9, scope: !4023)
!4025 = !DILocation(line: 2277, column: 19, scope: !4023)
!4026 = !DILocation(line: 2277, column: 30, scope: !4023)
!4027 = !DILocation(line: 2277, column: 41, scope: !4023)
!4028 = !DILocation(line: 2277, column: 52, scope: !4023)
!4029 = !{i32 360551, i32 360589, i32 360643, i32 360696, i32 360750, i32 360804, i32 360858, i32 360912, i32 360970, i32 361028, i32 361086, i32 361144, i32 361198, i32 361252, i32 361306, i32 361360, i32 361414, i32 361468, i32 361522, i32 361576, i32 361630, i32 361684, i32 361738, i32 361792, i32 361846, i32 361900, i32 361954, i32 362008, i32 362062, i32 362115}
!4030 = !DILocation(line: 2279, column: 15, scope: !4023)
!4031 = !DILocation(line: 2280, column: 5, scope: !4023)
!4032 = !DILocation(line: 2282, column: 5, scope: !3994)
!4033 = !DILocation(line: 2282, column: 11, scope: !4034)
!4034 = !DILexicalBlockFile(scope: !3994, file: !103, discriminator: 1)
!4035 = !DILocation(line: 2282, column: 16, scope: !4034)
!4036 = !DILocation(line: 2282, column: 5, scope: !4034)
!4037 = !DILocation(line: 2283, column: 30, scope: !4038)
!4038 = distinct !DILexicalBlock(scope: !3994, file: !103, line: 2282, column: 20)
!4039 = !DILocation(line: 2283, column: 29, scope: !4038)
!4040 = !DILocation(line: 2283, column: 35, scope: !4038)
!4041 = !DILocation(line: 2283, column: 23, scope: !4038)
!4042 = !DILocation(line: 2283, column: 46, scope: !4038)
!4043 = !DILocation(line: 2283, column: 45, scope: !4038)
!4044 = !DILocation(line: 2283, column: 51, scope: !4038)
!4045 = !DILocation(line: 2283, column: 39, scope: !4038)
!4046 = !DILocation(line: 2283, column: 38, scope: !4038)
!4047 = !DILocation(line: 2283, column: 55, scope: !4038)
!4048 = !DILocation(line: 2283, column: 22, scope: !4038)
!4049 = !DILocation(line: 2283, column: 14, scope: !4038)
!4050 = !DILocation(line: 2283, column: 9, scope: !4038)
!4051 = !DILocation(line: 2283, column: 20, scope: !4038)
!4052 = !DILocation(line: 2284, column: 30, scope: !4038)
!4053 = !DILocation(line: 2284, column: 29, scope: !4038)
!4054 = !DILocation(line: 2284, column: 35, scope: !4038)
!4055 = !DILocation(line: 2284, column: 23, scope: !4038)
!4056 = !DILocation(line: 2284, column: 46, scope: !4038)
!4057 = !DILocation(line: 2284, column: 45, scope: !4038)
!4058 = !DILocation(line: 2284, column: 51, scope: !4038)
!4059 = !DILocation(line: 2284, column: 39, scope: !4038)
!4060 = !DILocation(line: 2284, column: 38, scope: !4038)
!4061 = !DILocation(line: 2284, column: 55, scope: !4038)
!4062 = !DILocation(line: 2284, column: 22, scope: !4038)
!4063 = !DILocation(line: 2284, column: 14, scope: !4038)
!4064 = !DILocation(line: 2284, column: 9, scope: !4038)
!4065 = !DILocation(line: 2284, column: 20, scope: !4038)
!4066 = !DILocation(line: 2285, column: 14, scope: !4038)
!4067 = !DILocation(line: 2282, column: 5, scope: !4068)
!4068 = !DILexicalBlockFile(scope: !3994, file: !103, discriminator: 2)
!4069 = distinct !{!4069, !4032}
!4070 = !DILocation(line: 2287, column: 1, scope: !3994)
!4071 = distinct !DISubprogram(name: "rgb15to16_mmxext", scope: !103, file: !103, line: 189, type: !180, isLocal: true, isDefinition: true, scopeLine: 190, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4072 = !DILocalVariable(name: "src", arg: 1, scope: !4071, file: !103, line: 189, type: !182)
!4073 = !DILocation(line: 189, column: 52, scope: !4071)
!4074 = !DILocalVariable(name: "dst", arg: 2, scope: !4071, file: !103, line: 189, type: !15)
!4075 = !DILocation(line: 189, column: 66, scope: !4071)
!4076 = !DILocalVariable(name: "src_size", arg: 3, scope: !4071, file: !103, line: 189, type: !72)
!4077 = !DILocation(line: 189, column: 75, scope: !4071)
!4078 = !DILocalVariable(name: "s", scope: !4071, file: !103, line: 191, type: !182)
!4079 = !DILocation(line: 191, column: 29, scope: !4071)
!4080 = !DILocation(line: 191, column: 31, scope: !4071)
!4081 = !DILocalVariable(name: "d", scope: !4071, file: !103, line: 192, type: !15)
!4082 = !DILocation(line: 192, column: 23, scope: !4071)
!4083 = !DILocation(line: 192, column: 25, scope: !4071)
!4084 = !DILocalVariable(name: "end", scope: !4071, file: !103, line: 193, type: !182)
!4085 = !DILocation(line: 193, column: 29, scope: !4071)
!4086 = !DILocalVariable(name: "mm_end", scope: !4071, file: !103, line: 194, type: !182)
!4087 = !DILocation(line: 194, column: 20, scope: !4071)
!4088 = !DILocation(line: 195, column: 11, scope: !4071)
!4089 = !DILocation(line: 195, column: 15, scope: !4071)
!4090 = !DILocation(line: 195, column: 13, scope: !4071)
!4091 = !DILocation(line: 195, column: 9, scope: !4071)
!4092 = !DILocation(line: 196, column: 50, scope: !4071)
!4093 = !DILocation(line: 196, column: 5, scope: !4071)
!4094 = !{i32 247551}
!4095 = !DILocation(line: 197, column: 5, scope: !4071)
!4096 = !{i32 247605}
!4097 = !DILocation(line: 198, column: 14, scope: !4071)
!4098 = !DILocation(line: 198, column: 18, scope: !4071)
!4099 = !DILocation(line: 198, column: 12, scope: !4071)
!4100 = !DILocation(line: 199, column: 5, scope: !4071)
!4101 = !DILocation(line: 199, column: 12, scope: !4102)
!4102 = !DILexicalBlockFile(scope: !4071, file: !103, discriminator: 1)
!4103 = !DILocation(line: 199, column: 14, scope: !4102)
!4104 = !DILocation(line: 199, column: 13, scope: !4102)
!4105 = !DILocation(line: 199, column: 5, scope: !4102)
!4106 = !DILocation(line: 212, column: 20, scope: !4107)
!4107 = distinct !DILexicalBlock(scope: !4071, file: !103, line: 199, column: 22)
!4108 = !DILocation(line: 212, column: 28, scope: !4107)
!4109 = !DILocation(line: 200, column: 9, scope: !4107)
!4110 = !{i32 247729, i32 247760, i32 247802, i32 247844, i32 247886, i32 247928, i32 247970, i32 248012, i32 248054, i32 248096, i32 248140}
!4111 = !DILocation(line: 214, column: 10, scope: !4107)
!4112 = !DILocation(line: 215, column: 10, scope: !4107)
!4113 = !DILocation(line: 199, column: 5, scope: !4114)
!4114 = !DILexicalBlockFile(scope: !4071, file: !103, discriminator: 2)
!4115 = distinct !{!4115, !4100}
!4116 = !DILocation(line: 217, column: 5, scope: !4071)
!4117 = !{i32 248280}
!4118 = !DILocation(line: 218, column: 5, scope: !4071)
!4119 = !{i32 248323}
!4120 = !DILocation(line: 219, column: 14, scope: !4071)
!4121 = !DILocation(line: 219, column: 18, scope: !4071)
!4122 = !DILocation(line: 219, column: 12, scope: !4071)
!4123 = !DILocation(line: 220, column: 5, scope: !4071)
!4124 = !DILocation(line: 220, column: 12, scope: !4102)
!4125 = !DILocation(line: 220, column: 16, scope: !4102)
!4126 = !DILocation(line: 220, column: 14, scope: !4102)
!4127 = !DILocation(line: 220, column: 5, scope: !4102)
!4128 = !DILocalVariable(name: "x", scope: !4129, file: !103, line: 221, type: !8)
!4129 = distinct !DILexicalBlock(scope: !4071, file: !103, line: 220, column: 24)
!4130 = !DILocation(line: 221, column: 27, scope: !4129)
!4131 = !DILocation(line: 221, column: 50, scope: !4129)
!4132 = !DILocation(line: 221, column: 30, scope: !4129)
!4133 = !DILocation(line: 222, column: 29, scope: !4129)
!4134 = !DILocation(line: 222, column: 30, scope: !4129)
!4135 = !DILocation(line: 222, column: 46, scope: !4129)
!4136 = !DILocation(line: 222, column: 47, scope: !4129)
!4137 = !DILocation(line: 222, column: 43, scope: !4129)
!4138 = !DILocation(line: 222, column: 23, scope: !4129)
!4139 = !DILocation(line: 222, column: 9, scope: !4129)
!4140 = !DILocation(line: 222, column: 26, scope: !4129)
!4141 = !DILocation(line: 223, column: 10, scope: !4129)
!4142 = !DILocation(line: 224, column: 10, scope: !4129)
!4143 = !DILocation(line: 220, column: 5, scope: !4114)
!4144 = distinct !{!4144, !4123}
!4145 = !DILocation(line: 226, column: 9, scope: !4146)
!4146 = distinct !DILexicalBlock(scope: !4071, file: !103, line: 226, column: 9)
!4147 = !DILocation(line: 226, column: 13, scope: !4146)
!4148 = !DILocation(line: 226, column: 11, scope: !4146)
!4149 = !DILocation(line: 226, column: 9, scope: !4071)
!4150 = !DILocalVariable(name: "x", scope: !4151, file: !103, line: 227, type: !13)
!4151 = distinct !DILexicalBlock(scope: !4146, file: !103, line: 226, column: 18)
!4152 = !DILocation(line: 227, column: 33, scope: !4151)
!4153 = !DILocation(line: 227, column: 56, scope: !4151)
!4154 = !DILocation(line: 227, column: 36, scope: !4151)
!4155 = !DILocation(line: 228, column: 29, scope: !4151)
!4156 = !DILocation(line: 228, column: 30, scope: !4151)
!4157 = !DILocation(line: 228, column: 42, scope: !4151)
!4158 = !DILocation(line: 228, column: 43, scope: !4151)
!4159 = !DILocation(line: 228, column: 39, scope: !4151)
!4160 = !DILocation(line: 228, column: 28, scope: !4151)
!4161 = !DILocation(line: 228, column: 23, scope: !4151)
!4162 = !DILocation(line: 228, column: 9, scope: !4151)
!4163 = !DILocation(line: 228, column: 26, scope: !4151)
!4164 = !DILocation(line: 229, column: 5, scope: !4151)
!4165 = !DILocation(line: 230, column: 1, scope: !4071)
!4166 = distinct !DISubprogram(name: "rgb15tobgr24_mmxext", scope: !103, file: !103, line: 718, type: !180, isLocal: true, isDefinition: true, scopeLine: 719, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4167 = !DILocalVariable(name: "src", arg: 1, scope: !4166, file: !103, line: 718, type: !182)
!4168 = !DILocation(line: 718, column: 55, scope: !4166)
!4169 = !DILocalVariable(name: "dst", arg: 2, scope: !4166, file: !103, line: 718, type: !15)
!4170 = !DILocation(line: 718, column: 69, scope: !4166)
!4171 = !DILocalVariable(name: "src_size", arg: 3, scope: !4166, file: !103, line: 718, type: !72)
!4172 = !DILocation(line: 718, column: 78, scope: !4166)
!4173 = !DILocalVariable(name: "end", scope: !4166, file: !103, line: 720, type: !10)
!4174 = !DILocation(line: 720, column: 21, scope: !4166)
!4175 = !DILocalVariable(name: "mm_end", scope: !4166, file: !103, line: 721, type: !10)
!4176 = !DILocation(line: 721, column: 21, scope: !4166)
!4177 = !DILocalVariable(name: "d", scope: !4166, file: !103, line: 722, type: !15)
!4178 = !DILocation(line: 722, column: 14, scope: !4166)
!4179 = !DILocation(line: 722, column: 18, scope: !4166)
!4180 = !DILocalVariable(name: "s", scope: !4166, file: !103, line: 723, type: !10)
!4181 = !DILocation(line: 723, column: 21, scope: !4166)
!4182 = !DILocation(line: 723, column: 42, scope: !4166)
!4183 = !DILocation(line: 723, column: 25, scope: !4166)
!4184 = !DILocation(line: 724, column: 11, scope: !4166)
!4185 = !DILocation(line: 724, column: 15, scope: !4166)
!4186 = !DILocation(line: 724, column: 23, scope: !4166)
!4187 = !DILocation(line: 724, column: 13, scope: !4166)
!4188 = !DILocation(line: 724, column: 9, scope: !4166)
!4189 = !DILocation(line: 725, column: 50, scope: !4166)
!4190 = !DILocation(line: 725, column: 5, scope: !4166)
!4191 = !{i32 267274}
!4192 = !DILocation(line: 726, column: 14, scope: !4166)
!4193 = !DILocation(line: 726, column: 18, scope: !4166)
!4194 = !DILocation(line: 726, column: 12, scope: !4166)
!4195 = !DILocation(line: 727, column: 5, scope: !4166)
!4196 = !DILocation(line: 727, column: 12, scope: !4197)
!4197 = !DILexicalBlockFile(scope: !4166, file: !103, discriminator: 1)
!4198 = !DILocation(line: 727, column: 16, scope: !4197)
!4199 = !DILocation(line: 727, column: 14, scope: !4197)
!4200 = !DILocation(line: 727, column: 5, scope: !4197)
!4201 = !DILocation(line: 789, column: 20, scope: !4202)
!4202 = distinct !DILexicalBlock(scope: !4166, file: !103, line: 727, column: 24)
!4203 = !DILocation(line: 790, column: 18, scope: !4202)
!4204 = !DILocation(line: 728, column: 9, scope: !4202)
!4205 = !{i32 267401, i32 267436, i32 267482, i32 267528, i32 267574, i32 267620, i32 267666, i32 267712, i32 267758, i32 267818, i32 267878, i32 267937, i32 267983, i32 268029, i32 268075, i32 268121, i32 268167, i32 268213, i32 268259, i32 268305, i32 268351, i32 268397, i32 268443, i32 268489, i32 268535, i32 268581, i32 268627, i32 268673, i32 268719, i32 268766, i32 268812, i32 268859, i32 268905, i32 268951, i32 268997, i32 269043, i32 269089, i32 269135, i32 269195, i32 269255, i32 269314, i32 269360, i32 269406, i32 269452, i32 269498, i32 269544, i32 269590, i32 269636, i32 269682, i32 269728, i32 269774, i32 269820, i32 269866, i32 269912, i32 269958, i32 270004, i32 270050, i32 270096}
!4206 = !DILocation(line: 807, column: 20, scope: !4202)
!4207 = !DILocation(line: 807, column: 29, scope: !4202)
!4208 = !DILocation(line: 794, column: 9, scope: !4202)
!4209 = !{i32 270273, i32 270303, i32 270349, i32 270395, i32 270441, i32 270488, i32 270534, i32 270580, i32 270626, i32 270673, i32 270707, i32 270741, i32 270775, i32 270808, i32 270841, i32 270874, i32 270907, i32 270940, i32 270973, i32 271006, i32 271039, i32 271073, i32 271107, i32 271141, i32 271175, i32 271209, i32 271243, i32 271277, i32 271311, i32 271345, i32 271379, i32 271413, i32 271447, i32 271481, i32 271515, i32 271552, i32 271589}
!4210 = !DILocation(line: 810, column: 11, scope: !4202)
!4211 = !DILocation(line: 811, column: 11, scope: !4202)
!4212 = !DILocation(line: 727, column: 5, scope: !4213)
!4213 = !DILexicalBlockFile(scope: !4166, file: !103, discriminator: 2)
!4214 = distinct !{!4214, !4195}
!4215 = !DILocation(line: 813, column: 5, scope: !4166)
!4216 = !{i32 271752}
!4217 = !DILocation(line: 814, column: 5, scope: !4166)
!4218 = !{i32 271795}
!4219 = !DILocation(line: 815, column: 5, scope: !4166)
!4220 = !DILocation(line: 815, column: 12, scope: !4197)
!4221 = !DILocation(line: 815, column: 16, scope: !4197)
!4222 = !DILocation(line: 815, column: 14, scope: !4197)
!4223 = !DILocation(line: 815, column: 5, scope: !4197)
!4224 = !DILocalVariable(name: "bgr", scope: !4225, file: !103, line: 816, type: !12)
!4225 = distinct !DILexicalBlock(scope: !4166, file: !103, line: 815, column: 21)
!4226 = !DILocation(line: 816, column: 27, scope: !4225)
!4227 = !DILocation(line: 817, column: 17, scope: !4225)
!4228 = !DILocation(line: 817, column: 15, scope: !4225)
!4229 = !DILocation(line: 817, column: 13, scope: !4225)
!4230 = !DILocation(line: 818, column: 18, scope: !4225)
!4231 = !DILocation(line: 818, column: 21, scope: !4225)
!4232 = !DILocation(line: 818, column: 27, scope: !4225)
!4233 = !DILocation(line: 818, column: 36, scope: !4225)
!4234 = !DILocation(line: 818, column: 39, scope: !4225)
!4235 = !DILocation(line: 818, column: 45, scope: !4225)
!4236 = !DILocation(line: 818, column: 32, scope: !4225)
!4237 = !DILocation(line: 818, column: 16, scope: !4225)
!4238 = !DILocation(line: 818, column: 11, scope: !4225)
!4239 = !DILocation(line: 818, column: 14, scope: !4225)
!4240 = !DILocation(line: 819, column: 18, scope: !4225)
!4241 = !DILocation(line: 819, column: 21, scope: !4225)
!4242 = !DILocation(line: 819, column: 28, scope: !4225)
!4243 = !DILocation(line: 819, column: 37, scope: !4225)
!4244 = !DILocation(line: 819, column: 40, scope: !4225)
!4245 = !DILocation(line: 819, column: 47, scope: !4225)
!4246 = !DILocation(line: 819, column: 33, scope: !4225)
!4247 = !DILocation(line: 819, column: 16, scope: !4225)
!4248 = !DILocation(line: 819, column: 11, scope: !4225)
!4249 = !DILocation(line: 819, column: 14, scope: !4225)
!4250 = !DILocation(line: 820, column: 18, scope: !4225)
!4251 = !DILocation(line: 820, column: 21, scope: !4225)
!4252 = !DILocation(line: 820, column: 29, scope: !4225)
!4253 = !DILocation(line: 820, column: 38, scope: !4225)
!4254 = !DILocation(line: 820, column: 41, scope: !4225)
!4255 = !DILocation(line: 820, column: 49, scope: !4225)
!4256 = !DILocation(line: 820, column: 34, scope: !4225)
!4257 = !DILocation(line: 820, column: 16, scope: !4225)
!4258 = !DILocation(line: 820, column: 11, scope: !4225)
!4259 = !DILocation(line: 820, column: 14, scope: !4225)
!4260 = !DILocation(line: 815, column: 5, scope: !4213)
!4261 = distinct !{!4261, !4219}
!4262 = !DILocation(line: 822, column: 1, scope: !4166)
!4263 = distinct !DISubprogram(name: "rgb15to32_mmxext", scope: !103, file: !103, line: 950, type: !180, isLocal: true, isDefinition: true, scopeLine: 951, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4264 = !DILocalVariable(name: "src", arg: 1, scope: !4263, file: !103, line: 950, type: !182)
!4265 = !DILocation(line: 950, column: 52, scope: !4263)
!4266 = !DILocalVariable(name: "dst", arg: 2, scope: !4263, file: !103, line: 950, type: !15)
!4267 = !DILocation(line: 950, column: 66, scope: !4263)
!4268 = !DILocalVariable(name: "src_size", arg: 3, scope: !4263, file: !103, line: 950, type: !72)
!4269 = !DILocation(line: 950, column: 75, scope: !4263)
!4270 = !DILocalVariable(name: "end", scope: !4263, file: !103, line: 952, type: !10)
!4271 = !DILocation(line: 952, column: 21, scope: !4263)
!4272 = !DILocalVariable(name: "mm_end", scope: !4263, file: !103, line: 953, type: !10)
!4273 = !DILocation(line: 953, column: 21, scope: !4263)
!4274 = !DILocalVariable(name: "d", scope: !4263, file: !103, line: 954, type: !15)
!4275 = !DILocation(line: 954, column: 14, scope: !4263)
!4276 = !DILocation(line: 954, column: 18, scope: !4263)
!4277 = !DILocalVariable(name: "s", scope: !4263, file: !103, line: 955, type: !10)
!4278 = !DILocation(line: 955, column: 21, scope: !4263)
!4279 = !DILocation(line: 955, column: 43, scope: !4263)
!4280 = !DILocation(line: 955, column: 25, scope: !4263)
!4281 = !DILocation(line: 956, column: 11, scope: !4263)
!4282 = !DILocation(line: 956, column: 15, scope: !4263)
!4283 = !DILocation(line: 956, column: 23, scope: !4263)
!4284 = !DILocation(line: 956, column: 13, scope: !4263)
!4285 = !DILocation(line: 956, column: 9, scope: !4263)
!4286 = !DILocation(line: 957, column: 50, scope: !4263)
!4287 = !DILocation(line: 957, column: 5, scope: !4263)
!4288 = !{i32 277489}
!4289 = !DILocation(line: 958, column: 5, scope: !4263)
!4290 = !{i32 277552, i32 277578}
!4291 = !DILocation(line: 959, column: 5, scope: !4263)
!4292 = !{i32 277616, i32 277642}
!4293 = !DILocation(line: 960, column: 14, scope: !4263)
!4294 = !DILocation(line: 960, column: 18, scope: !4263)
!4295 = !DILocation(line: 960, column: 12, scope: !4263)
!4296 = !DILocation(line: 961, column: 5, scope: !4263)
!4297 = !DILocation(line: 961, column: 12, scope: !4298)
!4298 = !DILexicalBlockFile(scope: !4263, file: !103, discriminator: 1)
!4299 = !DILocation(line: 961, column: 16, scope: !4298)
!4300 = !DILocation(line: 961, column: 14, scope: !4298)
!4301 = !DILocation(line: 961, column: 5, scope: !4298)
!4302 = !DILocation(line: 975, column: 19, scope: !4303)
!4303 = distinct !DILexicalBlock(scope: !4263, file: !103, line: 961, column: 24)
!4304 = !DILocation(line: 975, column: 26, scope: !4303)
!4305 = !DILocation(line: 962, column: 9, scope: !4303)
!4306 = !{i32 277744, i32 277779, i32 277825, i32 277871, i32 277917, i32 277963, i32 278009, i32 278055, i32 278101, i32 278147, i32 278193, i32 278252, i32 278298, i32 278332, i32 278366, i32 278400, i32 278434, i32 278468, i32 278502, i32 278536, i32 278572, i32 278608}
!4307 = !DILocation(line: 978, column: 11, scope: !4303)
!4308 = !DILocation(line: 979, column: 11, scope: !4303)
!4309 = !DILocation(line: 961, column: 5, scope: !4310)
!4310 = !DILexicalBlockFile(scope: !4263, file: !103, discriminator: 2)
!4311 = distinct !{!4311, !4296}
!4312 = !DILocation(line: 981, column: 5, scope: !4263)
!4313 = !{i32 278793}
!4314 = !DILocation(line: 982, column: 5, scope: !4263)
!4315 = !{i32 278836}
!4316 = !DILocation(line: 983, column: 5, scope: !4263)
!4317 = !DILocation(line: 983, column: 12, scope: !4298)
!4318 = !DILocation(line: 983, column: 16, scope: !4298)
!4319 = !DILocation(line: 983, column: 14, scope: !4298)
!4320 = !DILocation(line: 983, column: 5, scope: !4298)
!4321 = !DILocalVariable(name: "bgr", scope: !4322, file: !103, line: 984, type: !12)
!4322 = distinct !DILexicalBlock(scope: !4263, file: !103, line: 983, column: 21)
!4323 = !DILocation(line: 984, column: 27, scope: !4322)
!4324 = !DILocation(line: 985, column: 17, scope: !4322)
!4325 = !DILocation(line: 985, column: 15, scope: !4322)
!4326 = !DILocation(line: 985, column: 13, scope: !4322)
!4327 = !DILocation(line: 986, column: 18, scope: !4322)
!4328 = !DILocation(line: 986, column: 21, scope: !4322)
!4329 = !DILocation(line: 986, column: 27, scope: !4322)
!4330 = !DILocation(line: 986, column: 36, scope: !4322)
!4331 = !DILocation(line: 986, column: 39, scope: !4322)
!4332 = !DILocation(line: 986, column: 45, scope: !4322)
!4333 = !DILocation(line: 986, column: 32, scope: !4322)
!4334 = !DILocation(line: 986, column: 16, scope: !4322)
!4335 = !DILocation(line: 986, column: 11, scope: !4322)
!4336 = !DILocation(line: 986, column: 14, scope: !4322)
!4337 = !DILocation(line: 987, column: 18, scope: !4322)
!4338 = !DILocation(line: 987, column: 21, scope: !4322)
!4339 = !DILocation(line: 987, column: 28, scope: !4322)
!4340 = !DILocation(line: 987, column: 37, scope: !4322)
!4341 = !DILocation(line: 987, column: 40, scope: !4322)
!4342 = !DILocation(line: 987, column: 47, scope: !4322)
!4343 = !DILocation(line: 987, column: 33, scope: !4322)
!4344 = !DILocation(line: 987, column: 16, scope: !4322)
!4345 = !DILocation(line: 987, column: 11, scope: !4322)
!4346 = !DILocation(line: 987, column: 14, scope: !4322)
!4347 = !DILocation(line: 988, column: 18, scope: !4322)
!4348 = !DILocation(line: 988, column: 21, scope: !4322)
!4349 = !DILocation(line: 988, column: 29, scope: !4322)
!4350 = !DILocation(line: 988, column: 38, scope: !4322)
!4351 = !DILocation(line: 988, column: 41, scope: !4322)
!4352 = !DILocation(line: 988, column: 49, scope: !4322)
!4353 = !DILocation(line: 988, column: 34, scope: !4322)
!4354 = !DILocation(line: 988, column: 16, scope: !4322)
!4355 = !DILocation(line: 988, column: 11, scope: !4322)
!4356 = !DILocation(line: 988, column: 14, scope: !4322)
!4357 = !DILocation(line: 989, column: 11, scope: !4322)
!4358 = !DILocation(line: 989, column: 14, scope: !4322)
!4359 = !DILocation(line: 983, column: 5, scope: !4310)
!4360 = distinct !{!4360, !4316}
!4361 = !DILocation(line: 991, column: 1, scope: !4263)
!4362 = distinct !DISubprogram(name: "rgb16tobgr24_mmxext", scope: !103, file: !103, line: 824, type: !180, isLocal: true, isDefinition: true, scopeLine: 825, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4363 = !DILocalVariable(name: "src", arg: 1, scope: !4362, file: !103, line: 824, type: !182)
!4364 = !DILocation(line: 824, column: 55, scope: !4362)
!4365 = !DILocalVariable(name: "dst", arg: 2, scope: !4362, file: !103, line: 824, type: !15)
!4366 = !DILocation(line: 824, column: 69, scope: !4362)
!4367 = !DILocalVariable(name: "src_size", arg: 3, scope: !4362, file: !103, line: 824, type: !72)
!4368 = !DILocation(line: 824, column: 78, scope: !4362)
!4369 = !DILocalVariable(name: "end", scope: !4362, file: !103, line: 826, type: !10)
!4370 = !DILocation(line: 826, column: 21, scope: !4362)
!4371 = !DILocalVariable(name: "mm_end", scope: !4362, file: !103, line: 827, type: !10)
!4372 = !DILocation(line: 827, column: 21, scope: !4362)
!4373 = !DILocalVariable(name: "d", scope: !4362, file: !103, line: 828, type: !15)
!4374 = !DILocation(line: 828, column: 14, scope: !4362)
!4375 = !DILocation(line: 828, column: 29, scope: !4362)
!4376 = !DILocalVariable(name: "s", scope: !4362, file: !103, line: 829, type: !10)
!4377 = !DILocation(line: 829, column: 21, scope: !4362)
!4378 = !DILocation(line: 829, column: 43, scope: !4362)
!4379 = !DILocation(line: 829, column: 25, scope: !4362)
!4380 = !DILocation(line: 830, column: 11, scope: !4362)
!4381 = !DILocation(line: 830, column: 15, scope: !4362)
!4382 = !DILocation(line: 830, column: 23, scope: !4362)
!4383 = !DILocation(line: 830, column: 13, scope: !4362)
!4384 = !DILocation(line: 830, column: 9, scope: !4362)
!4385 = !DILocation(line: 831, column: 50, scope: !4362)
!4386 = !DILocation(line: 831, column: 5, scope: !4362)
!4387 = !{i32 272323}
!4388 = !DILocation(line: 832, column: 14, scope: !4362)
!4389 = !DILocation(line: 832, column: 18, scope: !4362)
!4390 = !DILocation(line: 832, column: 12, scope: !4362)
!4391 = !DILocation(line: 833, column: 5, scope: !4362)
!4392 = !DILocation(line: 833, column: 12, scope: !4393)
!4393 = !DILexicalBlockFile(scope: !4362, file: !103, discriminator: 1)
!4394 = !DILocation(line: 833, column: 16, scope: !4393)
!4395 = !DILocation(line: 833, column: 14, scope: !4393)
!4396 = !DILocation(line: 833, column: 5, scope: !4393)
!4397 = !DILocation(line: 896, column: 20, scope: !4398)
!4398 = distinct !DILexicalBlock(scope: !4362, file: !103, line: 833, column: 24)
!4399 = !DILocation(line: 897, column: 18, scope: !4398)
!4400 = !DILocation(line: 834, column: 9, scope: !4398)
!4401 = !{i32 272450, i32 272485, i32 272531, i32 272577, i32 272623, i32 272669, i32 272715, i32 272761, i32 272807, i32 272853, i32 272913, i32 272973, i32 273032, i32 273078, i32 273124, i32 273170, i32 273216, i32 273262, i32 273308, i32 273354, i32 273400, i32 273446, i32 273492, i32 273538, i32 273584, i32 273630, i32 273676, i32 273722, i32 273768, i32 273814, i32 273861, i32 273907, i32 273954, i32 274000, i32 274046, i32 274092, i32 274138, i32 274184, i32 274230, i32 274276, i32 274336, i32 274396, i32 274455, i32 274501, i32 274547, i32 274593, i32 274639, i32 274685, i32 274731, i32 274777, i32 274823, i32 274869, i32 274915, i32 274961, i32 275007, i32 275053, i32 275099, i32 275145, i32 275191, i32 275237}
!4402 = !DILocation(line: 914, column: 20, scope: !4398)
!4403 = !DILocation(line: 914, column: 29, scope: !4398)
!4404 = !DILocation(line: 901, column: 9, scope: !4398)
!4405 = !{i32 275412, i32 275442, i32 275488, i32 275534, i32 275580, i32 275627, i32 275673, i32 275719, i32 275765, i32 275812, i32 275846, i32 275880, i32 275914, i32 275947, i32 275980, i32 276013, i32 276046, i32 276079, i32 276112, i32 276145, i32 276178, i32 276212, i32 276246, i32 276280, i32 276314, i32 276348, i32 276382, i32 276416, i32 276450, i32 276484, i32 276518, i32 276552, i32 276586, i32 276620, i32 276654, i32 276691, i32 276728}
!4406 = !DILocation(line: 917, column: 11, scope: !4398)
!4407 = !DILocation(line: 918, column: 11, scope: !4398)
!4408 = !DILocation(line: 833, column: 5, scope: !4409)
!4409 = !DILexicalBlockFile(scope: !4362, file: !103, discriminator: 2)
!4410 = distinct !{!4410, !4391}
!4411 = !DILocation(line: 920, column: 5, scope: !4362)
!4412 = !{i32 276891}
!4413 = !DILocation(line: 921, column: 5, scope: !4362)
!4414 = !{i32 276934}
!4415 = !DILocation(line: 922, column: 5, scope: !4362)
!4416 = !DILocation(line: 922, column: 12, scope: !4393)
!4417 = !DILocation(line: 922, column: 16, scope: !4393)
!4418 = !DILocation(line: 922, column: 14, scope: !4393)
!4419 = !DILocation(line: 922, column: 5, scope: !4393)
!4420 = !DILocalVariable(name: "bgr", scope: !4421, file: !103, line: 923, type: !12)
!4421 = distinct !DILexicalBlock(scope: !4362, file: !103, line: 922, column: 21)
!4422 = !DILocation(line: 923, column: 27, scope: !4421)
!4423 = !DILocation(line: 924, column: 17, scope: !4421)
!4424 = !DILocation(line: 924, column: 15, scope: !4421)
!4425 = !DILocation(line: 924, column: 13, scope: !4421)
!4426 = !DILocation(line: 925, column: 18, scope: !4421)
!4427 = !DILocation(line: 925, column: 21, scope: !4421)
!4428 = !DILocation(line: 925, column: 27, scope: !4421)
!4429 = !DILocation(line: 925, column: 36, scope: !4421)
!4430 = !DILocation(line: 925, column: 39, scope: !4421)
!4431 = !DILocation(line: 925, column: 45, scope: !4421)
!4432 = !DILocation(line: 925, column: 32, scope: !4421)
!4433 = !DILocation(line: 925, column: 16, scope: !4421)
!4434 = !DILocation(line: 925, column: 11, scope: !4421)
!4435 = !DILocation(line: 925, column: 14, scope: !4421)
!4436 = !DILocation(line: 926, column: 18, scope: !4421)
!4437 = !DILocation(line: 926, column: 21, scope: !4421)
!4438 = !DILocation(line: 926, column: 28, scope: !4421)
!4439 = !DILocation(line: 926, column: 37, scope: !4421)
!4440 = !DILocation(line: 926, column: 40, scope: !4421)
!4441 = !DILocation(line: 926, column: 47, scope: !4421)
!4442 = !DILocation(line: 926, column: 33, scope: !4421)
!4443 = !DILocation(line: 926, column: 16, scope: !4421)
!4444 = !DILocation(line: 926, column: 11, scope: !4421)
!4445 = !DILocation(line: 926, column: 14, scope: !4421)
!4446 = !DILocation(line: 927, column: 18, scope: !4421)
!4447 = !DILocation(line: 927, column: 21, scope: !4421)
!4448 = !DILocation(line: 927, column: 29, scope: !4421)
!4449 = !DILocation(line: 927, column: 38, scope: !4421)
!4450 = !DILocation(line: 927, column: 41, scope: !4421)
!4451 = !DILocation(line: 927, column: 49, scope: !4421)
!4452 = !DILocation(line: 927, column: 34, scope: !4421)
!4453 = !DILocation(line: 927, column: 16, scope: !4421)
!4454 = !DILocation(line: 927, column: 11, scope: !4421)
!4455 = !DILocation(line: 927, column: 14, scope: !4421)
!4456 = !DILocation(line: 922, column: 5, scope: !4409)
!4457 = distinct !{!4457, !4415}
!4458 = !DILocation(line: 929, column: 1, scope: !4362)
!4459 = distinct !DISubprogram(name: "rgb16to32_mmxext", scope: !103, file: !103, line: 993, type: !180, isLocal: true, isDefinition: true, scopeLine: 994, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4460 = !DILocalVariable(name: "src", arg: 1, scope: !4459, file: !103, line: 993, type: !182)
!4461 = !DILocation(line: 993, column: 52, scope: !4459)
!4462 = !DILocalVariable(name: "dst", arg: 2, scope: !4459, file: !103, line: 993, type: !15)
!4463 = !DILocation(line: 993, column: 66, scope: !4459)
!4464 = !DILocalVariable(name: "src_size", arg: 3, scope: !4459, file: !103, line: 993, type: !72)
!4465 = !DILocation(line: 993, column: 75, scope: !4459)
!4466 = !DILocalVariable(name: "end", scope: !4459, file: !103, line: 995, type: !10)
!4467 = !DILocation(line: 995, column: 21, scope: !4459)
!4468 = !DILocalVariable(name: "mm_end", scope: !4459, file: !103, line: 996, type: !10)
!4469 = !DILocation(line: 996, column: 21, scope: !4459)
!4470 = !DILocalVariable(name: "d", scope: !4459, file: !103, line: 997, type: !15)
!4471 = !DILocation(line: 997, column: 14, scope: !4459)
!4472 = !DILocation(line: 997, column: 18, scope: !4459)
!4473 = !DILocalVariable(name: "s", scope: !4459, file: !103, line: 998, type: !10)
!4474 = !DILocation(line: 998, column: 21, scope: !4459)
!4475 = !DILocation(line: 998, column: 42, scope: !4459)
!4476 = !DILocation(line: 998, column: 25, scope: !4459)
!4477 = !DILocation(line: 999, column: 11, scope: !4459)
!4478 = !DILocation(line: 999, column: 15, scope: !4459)
!4479 = !DILocation(line: 999, column: 23, scope: !4459)
!4480 = !DILocation(line: 999, column: 13, scope: !4459)
!4481 = !DILocation(line: 999, column: 9, scope: !4459)
!4482 = !DILocation(line: 1000, column: 50, scope: !4459)
!4483 = !DILocation(line: 1000, column: 5, scope: !4459)
!4484 = !{i32 279369}
!4485 = !DILocation(line: 1001, column: 5, scope: !4459)
!4486 = !{i32 279432, i32 279458}
!4487 = !DILocation(line: 1002, column: 5, scope: !4459)
!4488 = !{i32 279496, i32 279522}
!4489 = !DILocation(line: 1003, column: 14, scope: !4459)
!4490 = !DILocation(line: 1003, column: 18, scope: !4459)
!4491 = !DILocation(line: 1003, column: 12, scope: !4459)
!4492 = !DILocation(line: 1004, column: 5, scope: !4459)
!4493 = !DILocation(line: 1004, column: 12, scope: !4494)
!4494 = !DILexicalBlockFile(scope: !4459, file: !103, discriminator: 1)
!4495 = !DILocation(line: 1004, column: 16, scope: !4494)
!4496 = !DILocation(line: 1004, column: 14, scope: !4494)
!4497 = !DILocation(line: 1004, column: 5, scope: !4494)
!4498 = !DILocation(line: 1019, column: 19, scope: !4499)
!4499 = distinct !DILexicalBlock(scope: !4459, file: !103, line: 1004, column: 24)
!4500 = !DILocation(line: 1019, column: 26, scope: !4499)
!4501 = !DILocation(line: 1005, column: 9, scope: !4499)
!4502 = !{i32 279624, i32 279659, i32 279705, i32 279751, i32 279797, i32 279843, i32 279889, i32 279935, i32 279981, i32 280027, i32 280073, i32 280133, i32 280192, i32 280238, i32 280272, i32 280306, i32 280340, i32 280374, i32 280408, i32 280442, i32 280476, i32 280512, i32 280548}
!4503 = !DILocation(line: 1022, column: 11, scope: !4499)
!4504 = !DILocation(line: 1023, column: 11, scope: !4499)
!4505 = !DILocation(line: 1004, column: 5, scope: !4506)
!4506 = !DILexicalBlockFile(scope: !4459, file: !103, discriminator: 2)
!4507 = distinct !{!4507, !4492}
!4508 = !DILocation(line: 1025, column: 5, scope: !4459)
!4509 = !{i32 280732}
!4510 = !DILocation(line: 1026, column: 5, scope: !4459)
!4511 = !{i32 280775}
!4512 = !DILocation(line: 1027, column: 5, scope: !4459)
!4513 = !DILocation(line: 1027, column: 12, scope: !4494)
!4514 = !DILocation(line: 1027, column: 16, scope: !4494)
!4515 = !DILocation(line: 1027, column: 14, scope: !4494)
!4516 = !DILocation(line: 1027, column: 5, scope: !4494)
!4517 = !DILocalVariable(name: "bgr", scope: !4518, file: !103, line: 1028, type: !12)
!4518 = distinct !DILexicalBlock(scope: !4459, file: !103, line: 1027, column: 21)
!4519 = !DILocation(line: 1028, column: 27, scope: !4518)
!4520 = !DILocation(line: 1029, column: 17, scope: !4518)
!4521 = !DILocation(line: 1029, column: 15, scope: !4518)
!4522 = !DILocation(line: 1029, column: 13, scope: !4518)
!4523 = !DILocation(line: 1030, column: 18, scope: !4518)
!4524 = !DILocation(line: 1030, column: 21, scope: !4518)
!4525 = !DILocation(line: 1030, column: 27, scope: !4518)
!4526 = !DILocation(line: 1030, column: 36, scope: !4518)
!4527 = !DILocation(line: 1030, column: 39, scope: !4518)
!4528 = !DILocation(line: 1030, column: 45, scope: !4518)
!4529 = !DILocation(line: 1030, column: 32, scope: !4518)
!4530 = !DILocation(line: 1030, column: 16, scope: !4518)
!4531 = !DILocation(line: 1030, column: 11, scope: !4518)
!4532 = !DILocation(line: 1030, column: 14, scope: !4518)
!4533 = !DILocation(line: 1031, column: 18, scope: !4518)
!4534 = !DILocation(line: 1031, column: 21, scope: !4518)
!4535 = !DILocation(line: 1031, column: 28, scope: !4518)
!4536 = !DILocation(line: 1031, column: 37, scope: !4518)
!4537 = !DILocation(line: 1031, column: 40, scope: !4518)
!4538 = !DILocation(line: 1031, column: 47, scope: !4518)
!4539 = !DILocation(line: 1031, column: 33, scope: !4518)
!4540 = !DILocation(line: 1031, column: 16, scope: !4518)
!4541 = !DILocation(line: 1031, column: 11, scope: !4518)
!4542 = !DILocation(line: 1031, column: 14, scope: !4518)
!4543 = !DILocation(line: 1032, column: 18, scope: !4518)
!4544 = !DILocation(line: 1032, column: 21, scope: !4518)
!4545 = !DILocation(line: 1032, column: 29, scope: !4518)
!4546 = !DILocation(line: 1032, column: 38, scope: !4518)
!4547 = !DILocation(line: 1032, column: 41, scope: !4518)
!4548 = !DILocation(line: 1032, column: 49, scope: !4518)
!4549 = !DILocation(line: 1032, column: 34, scope: !4518)
!4550 = !DILocation(line: 1032, column: 16, scope: !4518)
!4551 = !DILocation(line: 1032, column: 11, scope: !4518)
!4552 = !DILocation(line: 1032, column: 14, scope: !4518)
!4553 = !DILocation(line: 1033, column: 11, scope: !4518)
!4554 = !DILocation(line: 1033, column: 14, scope: !4518)
!4555 = !DILocation(line: 1027, column: 5, scope: !4506)
!4556 = distinct !{!4556, !4512}
!4557 = !DILocation(line: 1035, column: 1, scope: !4459)
!4558 = distinct !DISubprogram(name: "rgb16to15_mmxext", scope: !103, file: !103, line: 232, type: !180, isLocal: true, isDefinition: true, scopeLine: 233, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4559 = !DILocalVariable(name: "src", arg: 1, scope: !4558, file: !103, line: 232, type: !182)
!4560 = !DILocation(line: 232, column: 52, scope: !4558)
!4561 = !DILocalVariable(name: "dst", arg: 2, scope: !4558, file: !103, line: 232, type: !15)
!4562 = !DILocation(line: 232, column: 66, scope: !4558)
!4563 = !DILocalVariable(name: "src_size", arg: 3, scope: !4558, file: !103, line: 232, type: !72)
!4564 = !DILocation(line: 232, column: 75, scope: !4558)
!4565 = !DILocalVariable(name: "s", scope: !4558, file: !103, line: 234, type: !182)
!4566 = !DILocation(line: 234, column: 29, scope: !4558)
!4567 = !DILocation(line: 234, column: 31, scope: !4558)
!4568 = !DILocalVariable(name: "d", scope: !4558, file: !103, line: 235, type: !15)
!4569 = !DILocation(line: 235, column: 23, scope: !4558)
!4570 = !DILocation(line: 235, column: 25, scope: !4558)
!4571 = !DILocalVariable(name: "end", scope: !4558, file: !103, line: 236, type: !182)
!4572 = !DILocation(line: 236, column: 29, scope: !4558)
!4573 = !DILocalVariable(name: "mm_end", scope: !4558, file: !103, line: 237, type: !182)
!4574 = !DILocation(line: 237, column: 20, scope: !4558)
!4575 = !DILocation(line: 238, column: 11, scope: !4558)
!4576 = !DILocation(line: 238, column: 15, scope: !4558)
!4577 = !DILocation(line: 238, column: 13, scope: !4558)
!4578 = !DILocation(line: 238, column: 9, scope: !4558)
!4579 = !DILocation(line: 239, column: 50, scope: !4558)
!4580 = !DILocation(line: 239, column: 5, scope: !4558)
!4581 = !{i32 248931}
!4582 = !DILocation(line: 240, column: 5, scope: !4558)
!4583 = !{i32 248985}
!4584 = !DILocation(line: 241, column: 5, scope: !4558)
!4585 = !{i32 249047}
!4586 = !DILocation(line: 242, column: 14, scope: !4558)
!4587 = !DILocation(line: 242, column: 18, scope: !4558)
!4588 = !DILocation(line: 242, column: 12, scope: !4558)
!4589 = !DILocation(line: 243, column: 5, scope: !4558)
!4590 = !DILocation(line: 243, column: 12, scope: !4591)
!4591 = !DILexicalBlockFile(scope: !4558, file: !103, discriminator: 1)
!4592 = !DILocation(line: 243, column: 14, scope: !4591)
!4593 = !DILocation(line: 243, column: 13, scope: !4591)
!4594 = !DILocation(line: 243, column: 5, scope: !4591)
!4595 = !DILocation(line: 260, column: 20, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4558, file: !103, line: 243, column: 22)
!4597 = !DILocation(line: 260, column: 28, scope: !4596)
!4598 = !DILocation(line: 244, column: 9, scope: !4596)
!4599 = !{i32 249171, i32 249202, i32 249244, i32 249286, i32 249328, i32 249370, i32 249412, i32 249454, i32 249496, i32 249538, i32 249580, i32 249622, i32 249664, i32 249706, i32 249750}
!4600 = !DILocation(line: 262, column: 10, scope: !4596)
!4601 = !DILocation(line: 263, column: 10, scope: !4596)
!4602 = !DILocation(line: 243, column: 5, scope: !4603)
!4603 = !DILexicalBlockFile(scope: !4558, file: !103, discriminator: 2)
!4604 = distinct !{!4604, !4589}
!4605 = !DILocation(line: 265, column: 5, scope: !4558)
!4606 = !{i32 249890}
!4607 = !DILocation(line: 266, column: 5, scope: !4558)
!4608 = !{i32 249933}
!4609 = !DILocation(line: 267, column: 14, scope: !4558)
!4610 = !DILocation(line: 267, column: 18, scope: !4558)
!4611 = !DILocation(line: 267, column: 12, scope: !4558)
!4612 = !DILocation(line: 268, column: 5, scope: !4558)
!4613 = !DILocation(line: 268, column: 12, scope: !4591)
!4614 = !DILocation(line: 268, column: 16, scope: !4591)
!4615 = !DILocation(line: 268, column: 14, scope: !4591)
!4616 = !DILocation(line: 268, column: 5, scope: !4591)
!4617 = !DILocalVariable(name: "x", scope: !4618, file: !103, line: 269, type: !6)
!4618 = distinct !DILexicalBlock(scope: !4558, file: !103, line: 268, column: 24)
!4619 = !DILocation(line: 269, column: 27, scope: !4618)
!4620 = !DILocation(line: 269, column: 49, scope: !4618)
!4621 = !DILocation(line: 269, column: 30, scope: !4618)
!4622 = !DILocation(line: 270, column: 30, scope: !4618)
!4623 = !DILocation(line: 270, column: 31, scope: !4618)
!4624 = !DILocation(line: 270, column: 35, scope: !4618)
!4625 = !DILocation(line: 270, column: 51, scope: !4618)
!4626 = !DILocation(line: 270, column: 52, scope: !4618)
!4627 = !DILocation(line: 270, column: 48, scope: !4618)
!4628 = !DILocation(line: 270, column: 23, scope: !4618)
!4629 = !DILocation(line: 270, column: 9, scope: !4618)
!4630 = !DILocation(line: 270, column: 26, scope: !4618)
!4631 = !DILocation(line: 271, column: 10, scope: !4618)
!4632 = !DILocation(line: 272, column: 10, scope: !4618)
!4633 = !DILocation(line: 268, column: 5, scope: !4603)
!4634 = distinct !{!4634, !4612}
!4635 = !DILocation(line: 274, column: 9, scope: !4636)
!4636 = distinct !DILexicalBlock(scope: !4558, file: !103, line: 274, column: 9)
!4637 = !DILocation(line: 274, column: 13, scope: !4636)
!4638 = !DILocation(line: 274, column: 11, scope: !4636)
!4639 = !DILocation(line: 274, column: 9, scope: !4558)
!4640 = !DILocalVariable(name: "x", scope: !4641, file: !103, line: 275, type: !12)
!4641 = distinct !DILexicalBlock(scope: !4636, file: !103, line: 274, column: 18)
!4642 = !DILocation(line: 275, column: 27, scope: !4641)
!4643 = !DILocation(line: 275, column: 49, scope: !4641)
!4644 = !DILocation(line: 275, column: 30, scope: !4641)
!4645 = !DILocation(line: 276, column: 30, scope: !4641)
!4646 = !DILocation(line: 276, column: 31, scope: !4641)
!4647 = !DILocation(line: 276, column: 35, scope: !4641)
!4648 = !DILocation(line: 276, column: 47, scope: !4641)
!4649 = !DILocation(line: 276, column: 48, scope: !4641)
!4650 = !DILocation(line: 276, column: 44, scope: !4641)
!4651 = !DILocation(line: 276, column: 28, scope: !4641)
!4652 = !DILocation(line: 276, column: 23, scope: !4641)
!4653 = !DILocation(line: 276, column: 9, scope: !4641)
!4654 = !DILocation(line: 276, column: 26, scope: !4641)
!4655 = !DILocation(line: 277, column: 5, scope: !4641)
!4656 = !DILocation(line: 278, column: 1, scope: !4558)
!4657 = distinct !DISubprogram(name: "rgb24tobgr16_mmxext", scope: !103, file: !103, line: 490, type: !180, isLocal: true, isDefinition: true, scopeLine: 491, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4658 = !DILocalVariable(name: "src", arg: 1, scope: !4657, file: !103, line: 490, type: !182)
!4659 = !DILocation(line: 490, column: 55, scope: !4657)
!4660 = !DILocalVariable(name: "dst", arg: 2, scope: !4657, file: !103, line: 490, type: !15)
!4661 = !DILocation(line: 490, column: 69, scope: !4657)
!4662 = !DILocalVariable(name: "src_size", arg: 3, scope: !4657, file: !103, line: 490, type: !72)
!4663 = !DILocation(line: 490, column: 78, scope: !4657)
!4664 = !DILocalVariable(name: "s", scope: !4657, file: !103, line: 492, type: !182)
!4665 = !DILocation(line: 492, column: 20, scope: !4657)
!4666 = !DILocation(line: 492, column: 24, scope: !4657)
!4667 = !DILocalVariable(name: "end", scope: !4657, file: !103, line: 493, type: !182)
!4668 = !DILocation(line: 493, column: 20, scope: !4657)
!4669 = !DILocalVariable(name: "mm_end", scope: !4657, file: !103, line: 494, type: !182)
!4670 = !DILocation(line: 494, column: 20, scope: !4657)
!4671 = !DILocalVariable(name: "d", scope: !4657, file: !103, line: 495, type: !14)
!4672 = !DILocation(line: 495, column: 15, scope: !4657)
!4673 = !DILocation(line: 495, column: 31, scope: !4657)
!4674 = !DILocation(line: 495, column: 19, scope: !4657)
!4675 = !DILocation(line: 496, column: 11, scope: !4657)
!4676 = !DILocation(line: 496, column: 15, scope: !4657)
!4677 = !DILocation(line: 496, column: 13, scope: !4657)
!4678 = !DILocation(line: 496, column: 9, scope: !4657)
!4679 = !DILocation(line: 497, column: 50, scope: !4657)
!4680 = !DILocation(line: 497, column: 5, scope: !4657)
!4681 = !{i32 258623}
!4682 = !DILocation(line: 498, column: 5, scope: !4657)
!4683 = !{i32 258697, i32 258727, i32 258769}
!4684 = !DILocation(line: 502, column: 14, scope: !4657)
!4685 = !DILocation(line: 502, column: 18, scope: !4657)
!4686 = !DILocation(line: 502, column: 12, scope: !4657)
!4687 = !DILocation(line: 503, column: 5, scope: !4657)
!4688 = !DILocation(line: 503, column: 12, scope: !4689)
!4689 = !DILexicalBlockFile(scope: !4657, file: !103, discriminator: 1)
!4690 = !DILocation(line: 503, column: 16, scope: !4689)
!4691 = !DILocation(line: 503, column: 14, scope: !4689)
!4692 = !DILocation(line: 503, column: 5, scope: !4689)
!4693 = !DILocation(line: 533, column: 19, scope: !4694)
!4694 = distinct !DILexicalBlock(scope: !4657, file: !103, line: 503, column: 24)
!4695 = !DILocation(line: 533, column: 26, scope: !4694)
!4696 = !DILocation(line: 504, column: 9, scope: !4694)
!4697 = !{i32 258905, i32 258940, i32 258986, i32 259032, i32 259078, i32 259124, i32 259170, i32 259216, i32 259262, i32 259308, i32 259354, i32 259400, i32 259446, i32 259492, i32 259538, i32 259584, i32 259630, i32 259676, i32 259722, i32 259768, i32 259814, i32 259860, i32 259906, i32 259952, i32 259998, i32 260044, i32 260090, i32 260136, i32 260184}
!4698 = !DILocation(line: 534, column: 11, scope: !4694)
!4699 = !DILocation(line: 535, column: 11, scope: !4694)
!4700 = !DILocation(line: 503, column: 5, scope: !4701)
!4701 = !DILexicalBlockFile(scope: !4657, file: !103, discriminator: 2)
!4702 = distinct !{!4702, !4687}
!4703 = !DILocation(line: 537, column: 5, scope: !4657)
!4704 = !{i32 260304}
!4705 = !DILocation(line: 538, column: 5, scope: !4657)
!4706 = !{i32 260347}
!4707 = !DILocation(line: 539, column: 5, scope: !4657)
!4708 = !DILocation(line: 539, column: 12, scope: !4689)
!4709 = !DILocation(line: 539, column: 16, scope: !4689)
!4710 = !DILocation(line: 539, column: 14, scope: !4689)
!4711 = !DILocation(line: 539, column: 5, scope: !4689)
!4712 = !DILocalVariable(name: "b", scope: !4713, file: !103, line: 540, type: !826)
!4713 = distinct !DILexicalBlock(scope: !4657, file: !103, line: 539, column: 21)
!4714 = !DILocation(line: 540, column: 19, scope: !4713)
!4715 = !DILocation(line: 540, column: 25, scope: !4713)
!4716 = !DILocation(line: 540, column: 23, scope: !4713)
!4717 = !DILocalVariable(name: "g", scope: !4713, file: !103, line: 541, type: !826)
!4718 = !DILocation(line: 541, column: 19, scope: !4713)
!4719 = !DILocation(line: 541, column: 25, scope: !4713)
!4720 = !DILocation(line: 541, column: 23, scope: !4713)
!4721 = !DILocalVariable(name: "r", scope: !4713, file: !103, line: 542, type: !826)
!4722 = !DILocation(line: 542, column: 19, scope: !4713)
!4723 = !DILocation(line: 542, column: 25, scope: !4713)
!4724 = !DILocation(line: 542, column: 23, scope: !4713)
!4725 = !DILocation(line: 543, column: 17, scope: !4713)
!4726 = !DILocation(line: 543, column: 18, scope: !4713)
!4727 = !DILocation(line: 543, column: 27, scope: !4713)
!4728 = !DILocation(line: 543, column: 28, scope: !4713)
!4729 = !DILocation(line: 543, column: 34, scope: !4713)
!4730 = !DILocation(line: 543, column: 23, scope: !4713)
!4731 = !DILocation(line: 543, column: 43, scope: !4713)
!4732 = !DILocation(line: 543, column: 44, scope: !4713)
!4733 = !DILocation(line: 543, column: 50, scope: !4713)
!4734 = !DILocation(line: 543, column: 39, scope: !4713)
!4735 = !DILocation(line: 543, column: 16, scope: !4713)
!4736 = !DILocation(line: 543, column: 11, scope: !4713)
!4737 = !DILocation(line: 543, column: 14, scope: !4713)
!4738 = !DILocation(line: 539, column: 5, scope: !4701)
!4739 = distinct !{!4739, !4707}
!4740 = !DILocation(line: 545, column: 1, scope: !4657)
!4741 = distinct !DISubprogram(name: "rgb24tobgr15_mmxext", scope: !103, file: !103, line: 604, type: !180, isLocal: true, isDefinition: true, scopeLine: 605, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4742 = !DILocalVariable(name: "src", arg: 1, scope: !4741, file: !103, line: 604, type: !182)
!4743 = !DILocation(line: 604, column: 55, scope: !4741)
!4744 = !DILocalVariable(name: "dst", arg: 2, scope: !4741, file: !103, line: 604, type: !15)
!4745 = !DILocation(line: 604, column: 69, scope: !4741)
!4746 = !DILocalVariable(name: "src_size", arg: 3, scope: !4741, file: !103, line: 604, type: !72)
!4747 = !DILocation(line: 604, column: 78, scope: !4741)
!4748 = !DILocalVariable(name: "s", scope: !4741, file: !103, line: 606, type: !182)
!4749 = !DILocation(line: 606, column: 20, scope: !4741)
!4750 = !DILocation(line: 606, column: 24, scope: !4741)
!4751 = !DILocalVariable(name: "end", scope: !4741, file: !103, line: 607, type: !182)
!4752 = !DILocation(line: 607, column: 20, scope: !4741)
!4753 = !DILocalVariable(name: "mm_end", scope: !4741, file: !103, line: 608, type: !182)
!4754 = !DILocation(line: 608, column: 20, scope: !4741)
!4755 = !DILocalVariable(name: "d", scope: !4741, file: !103, line: 609, type: !14)
!4756 = !DILocation(line: 609, column: 15, scope: !4741)
!4757 = !DILocation(line: 609, column: 31, scope: !4741)
!4758 = !DILocation(line: 609, column: 19, scope: !4741)
!4759 = !DILocation(line: 610, column: 11, scope: !4741)
!4760 = !DILocation(line: 610, column: 15, scope: !4741)
!4761 = !DILocation(line: 610, column: 13, scope: !4741)
!4762 = !DILocation(line: 610, column: 9, scope: !4741)
!4763 = !DILocation(line: 611, column: 50, scope: !4741)
!4764 = !DILocation(line: 611, column: 5, scope: !4741)
!4765 = !{i32 262944}
!4766 = !DILocation(line: 612, column: 5, scope: !4741)
!4767 = !{i32 263018, i32 263048, i32 263090}
!4768 = !DILocation(line: 616, column: 14, scope: !4741)
!4769 = !DILocation(line: 616, column: 18, scope: !4741)
!4770 = !DILocation(line: 616, column: 12, scope: !4741)
!4771 = !DILocation(line: 617, column: 5, scope: !4741)
!4772 = !DILocation(line: 617, column: 12, scope: !4773)
!4773 = !DILexicalBlockFile(scope: !4741, file: !103, discriminator: 1)
!4774 = !DILocation(line: 617, column: 16, scope: !4773)
!4775 = !DILocation(line: 617, column: 14, scope: !4773)
!4776 = !DILocation(line: 617, column: 5, scope: !4773)
!4777 = !DILocation(line: 647, column: 19, scope: !4778)
!4778 = distinct !DILexicalBlock(scope: !4741, file: !103, line: 617, column: 24)
!4779 = !DILocation(line: 647, column: 26, scope: !4778)
!4780 = !DILocation(line: 618, column: 9, scope: !4778)
!4781 = !{i32 263226, i32 263261, i32 263307, i32 263353, i32 263399, i32 263445, i32 263491, i32 263537, i32 263583, i32 263629, i32 263675, i32 263721, i32 263767, i32 263813, i32 263859, i32 263905, i32 263951, i32 263997, i32 264043, i32 264089, i32 264135, i32 264181, i32 264227, i32 264273, i32 264319, i32 264365, i32 264411, i32 264457, i32 264505}
!4782 = !DILocation(line: 648, column: 11, scope: !4778)
!4783 = !DILocation(line: 649, column: 11, scope: !4778)
!4784 = !DILocation(line: 617, column: 5, scope: !4785)
!4785 = !DILexicalBlockFile(scope: !4741, file: !103, discriminator: 2)
!4786 = distinct !{!4786, !4771}
!4787 = !DILocation(line: 651, column: 5, scope: !4741)
!4788 = !{i32 264625}
!4789 = !DILocation(line: 652, column: 5, scope: !4741)
!4790 = !{i32 264668}
!4791 = !DILocation(line: 653, column: 5, scope: !4741)
!4792 = !DILocation(line: 653, column: 12, scope: !4773)
!4793 = !DILocation(line: 653, column: 16, scope: !4773)
!4794 = !DILocation(line: 653, column: 14, scope: !4773)
!4795 = !DILocation(line: 653, column: 5, scope: !4773)
!4796 = !DILocalVariable(name: "b", scope: !4797, file: !103, line: 654, type: !826)
!4797 = distinct !DILexicalBlock(scope: !4741, file: !103, line: 653, column: 21)
!4798 = !DILocation(line: 654, column: 19, scope: !4797)
!4799 = !DILocation(line: 654, column: 25, scope: !4797)
!4800 = !DILocation(line: 654, column: 23, scope: !4797)
!4801 = !DILocalVariable(name: "g", scope: !4797, file: !103, line: 655, type: !826)
!4802 = !DILocation(line: 655, column: 19, scope: !4797)
!4803 = !DILocation(line: 655, column: 25, scope: !4797)
!4804 = !DILocation(line: 655, column: 23, scope: !4797)
!4805 = !DILocalVariable(name: "r", scope: !4797, file: !103, line: 656, type: !826)
!4806 = !DILocation(line: 656, column: 19, scope: !4797)
!4807 = !DILocation(line: 656, column: 25, scope: !4797)
!4808 = !DILocation(line: 656, column: 23, scope: !4797)
!4809 = !DILocation(line: 657, column: 17, scope: !4797)
!4810 = !DILocation(line: 657, column: 18, scope: !4797)
!4811 = !DILocation(line: 657, column: 27, scope: !4797)
!4812 = !DILocation(line: 657, column: 28, scope: !4797)
!4813 = !DILocation(line: 657, column: 34, scope: !4797)
!4814 = !DILocation(line: 657, column: 23, scope: !4797)
!4815 = !DILocation(line: 657, column: 43, scope: !4797)
!4816 = !DILocation(line: 657, column: 44, scope: !4797)
!4817 = !DILocation(line: 657, column: 50, scope: !4797)
!4818 = !DILocation(line: 657, column: 39, scope: !4797)
!4819 = !DILocation(line: 657, column: 16, scope: !4797)
!4820 = !DILocation(line: 657, column: 11, scope: !4797)
!4821 = !DILocation(line: 657, column: 14, scope: !4797)
!4822 = !DILocation(line: 653, column: 5, scope: !4785)
!4823 = distinct !{!4823, !4791}
!4824 = !DILocation(line: 659, column: 1, scope: !4741)
!4825 = distinct !DISubprogram(name: "rgb24tobgr32_mmxext", scope: !103, file: !103, line: 68, type: !180, isLocal: true, isDefinition: true, scopeLine: 69, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4826 = !DILocalVariable(name: "src", arg: 1, scope: !4825, file: !103, line: 68, type: !182)
!4827 = !DILocation(line: 68, column: 55, scope: !4825)
!4828 = !DILocalVariable(name: "dst", arg: 2, scope: !4825, file: !103, line: 68, type: !15)
!4829 = !DILocation(line: 68, column: 69, scope: !4825)
!4830 = !DILocalVariable(name: "src_size", arg: 3, scope: !4825, file: !103, line: 68, type: !72)
!4831 = !DILocation(line: 68, column: 78, scope: !4825)
!4832 = !DILocalVariable(name: "dest", scope: !4825, file: !103, line: 70, type: !15)
!4833 = !DILocation(line: 70, column: 14, scope: !4825)
!4834 = !DILocation(line: 70, column: 21, scope: !4825)
!4835 = !DILocalVariable(name: "s", scope: !4825, file: !103, line: 71, type: !182)
!4836 = !DILocation(line: 71, column: 20, scope: !4825)
!4837 = !DILocation(line: 71, column: 24, scope: !4825)
!4838 = !DILocalVariable(name: "end", scope: !4825, file: !103, line: 72, type: !182)
!4839 = !DILocation(line: 72, column: 20, scope: !4825)
!4840 = !DILocalVariable(name: "mm_end", scope: !4825, file: !103, line: 73, type: !182)
!4841 = !DILocation(line: 73, column: 20, scope: !4825)
!4842 = !DILocation(line: 74, column: 11, scope: !4825)
!4843 = !DILocation(line: 74, column: 15, scope: !4825)
!4844 = !DILocation(line: 74, column: 13, scope: !4825)
!4845 = !DILocation(line: 74, column: 9, scope: !4825)
!4846 = !DILocation(line: 75, column: 50, scope: !4825)
!4847 = !DILocation(line: 75, column: 5, scope: !4825)
!4848 = !{i32 243887}
!4849 = !DILocation(line: 76, column: 14, scope: !4825)
!4850 = !DILocation(line: 76, column: 18, scope: !4825)
!4851 = !DILocation(line: 76, column: 12, scope: !4825)
!4852 = !DILocation(line: 77, column: 5, scope: !4825)
!4853 = !{i32 243973}
!4854 = !DILocation(line: 78, column: 5, scope: !4825)
!4855 = !DILocation(line: 78, column: 12, scope: !4856)
!4856 = !DILexicalBlockFile(scope: !4825, file: !103, discriminator: 1)
!4857 = !DILocation(line: 78, column: 16, scope: !4856)
!4858 = !DILocation(line: 78, column: 14, scope: !4856)
!4859 = !DILocation(line: 78, column: 5, scope: !4856)
!4860 = !DILocation(line: 97, column: 20, scope: !4861)
!4861 = distinct !DILexicalBlock(scope: !4825, file: !103, line: 78, column: 24)
!4862 = !DILocation(line: 97, column: 31, scope: !4861)
!4863 = !DILocation(line: 79, column: 9, scope: !4861)
!4864 = !{i32 244085, i32 244120, i32 244166, i32 244212, i32 244258, i32 244304, i32 244350, i32 244396, i32 244442, i32 244488, i32 244534, i32 244580, i32 244626, i32 244672, i32 244720, i32 244768, i32 244816}
!4865 = !DILocation(line: 99, column: 14, scope: !4861)
!4866 = !DILocation(line: 100, column: 11, scope: !4861)
!4867 = !DILocation(line: 78, column: 5, scope: !4868)
!4868 = !DILexicalBlockFile(scope: !4825, file: !103, discriminator: 2)
!4869 = distinct !{!4869, !4854}
!4870 = !DILocation(line: 102, column: 5, scope: !4825)
!4871 = !{i32 244982}
!4872 = !DILocation(line: 103, column: 5, scope: !4825)
!4873 = !{i32 245025}
!4874 = !DILocation(line: 104, column: 5, scope: !4825)
!4875 = !DILocation(line: 104, column: 12, scope: !4856)
!4876 = !DILocation(line: 104, column: 16, scope: !4856)
!4877 = !DILocation(line: 104, column: 14, scope: !4856)
!4878 = !DILocation(line: 104, column: 5, scope: !4856)
!4879 = !DILocation(line: 105, column: 21, scope: !4880)
!4880 = distinct !DILexicalBlock(scope: !4825, file: !103, line: 104, column: 21)
!4881 = !DILocation(line: 105, column: 19, scope: !4880)
!4882 = !DILocation(line: 105, column: 14, scope: !4880)
!4883 = !DILocation(line: 105, column: 17, scope: !4880)
!4884 = !DILocation(line: 106, column: 21, scope: !4880)
!4885 = !DILocation(line: 106, column: 19, scope: !4880)
!4886 = !DILocation(line: 106, column: 14, scope: !4880)
!4887 = !DILocation(line: 106, column: 17, scope: !4880)
!4888 = !DILocation(line: 107, column: 21, scope: !4880)
!4889 = !DILocation(line: 107, column: 19, scope: !4880)
!4890 = !DILocation(line: 107, column: 14, scope: !4880)
!4891 = !DILocation(line: 107, column: 17, scope: !4880)
!4892 = !DILocation(line: 108, column: 14, scope: !4880)
!4893 = !DILocation(line: 108, column: 17, scope: !4880)
!4894 = !DILocation(line: 104, column: 5, scope: !4868)
!4895 = distinct !{!4895, !4874}
!4896 = !DILocation(line: 110, column: 1, scope: !4825)
!4897 = distinct !DISubprogram(name: "rgb32to16_mmxext", scope: !103, file: !103, line: 280, type: !180, isLocal: true, isDefinition: true, scopeLine: 281, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4898 = !DILocalVariable(name: "src", arg: 1, scope: !4897, file: !103, line: 280, type: !182)
!4899 = !DILocation(line: 280, column: 52, scope: !4897)
!4900 = !DILocalVariable(name: "dst", arg: 2, scope: !4897, file: !103, line: 280, type: !15)
!4901 = !DILocation(line: 280, column: 66, scope: !4897)
!4902 = !DILocalVariable(name: "src_size", arg: 3, scope: !4897, file: !103, line: 280, type: !72)
!4903 = !DILocation(line: 280, column: 75, scope: !4897)
!4904 = !DILocalVariable(name: "s", scope: !4897, file: !103, line: 282, type: !182)
!4905 = !DILocation(line: 282, column: 20, scope: !4897)
!4906 = !DILocation(line: 282, column: 24, scope: !4897)
!4907 = !DILocalVariable(name: "end", scope: !4897, file: !103, line: 283, type: !182)
!4908 = !DILocation(line: 283, column: 20, scope: !4897)
!4909 = !DILocalVariable(name: "mm_end", scope: !4897, file: !103, line: 284, type: !182)
!4910 = !DILocation(line: 284, column: 20, scope: !4897)
!4911 = !DILocalVariable(name: "d", scope: !4897, file: !103, line: 285, type: !14)
!4912 = !DILocation(line: 285, column: 15, scope: !4897)
!4913 = !DILocation(line: 285, column: 31, scope: !4897)
!4914 = !DILocation(line: 285, column: 19, scope: !4897)
!4915 = !DILocation(line: 286, column: 11, scope: !4897)
!4916 = !DILocation(line: 286, column: 15, scope: !4897)
!4917 = !DILocation(line: 286, column: 13, scope: !4897)
!4918 = !DILocation(line: 286, column: 9, scope: !4897)
!4919 = !DILocation(line: 287, column: 14, scope: !4897)
!4920 = !DILocation(line: 287, column: 18, scope: !4897)
!4921 = !DILocation(line: 287, column: 12, scope: !4897)
!4922 = !DILocation(line: 288, column: 5, scope: !4897)
!4923 = !DILocation(line: 320, column: 16, scope: !4897)
!4924 = !{i32 250565, i32 250595, i32 250637, i32 250679, i32 250721, i32 250763, i32 250805, i32 250852, i32 250894, i32 250936, i32 250978, i32 251020, i32 251062, i32 251104, i32 251146, i32 251188, i32 251230, i32 251272, i32 251314, i32 251356, i32 251398, i32 251440, i32 251482, i32 251524, i32 251566, i32 251610, i32 251652, i32 251694, i32 251736, i32 251778, i32 251820}
!4925 = !DILocation(line: 322, column: 5, scope: !4897)
!4926 = !{i32 251953}
!4927 = !DILocation(line: 323, column: 5, scope: !4897)
!4928 = !{i32 251996}
!4929 = !DILocation(line: 324, column: 5, scope: !4897)
!4930 = !DILocation(line: 324, column: 12, scope: !4931)
!4931 = !DILexicalBlockFile(scope: !4897, file: !103, discriminator: 1)
!4932 = !DILocation(line: 324, column: 16, scope: !4931)
!4933 = !DILocation(line: 324, column: 14, scope: !4931)
!4934 = !DILocation(line: 324, column: 5, scope: !4931)
!4935 = !DILocalVariable(name: "rgb", scope: !4936, file: !103, line: 325, type: !72)
!4936 = distinct !DILexicalBlock(scope: !4897, file: !103, line: 324, column: 21)
!4937 = !DILocation(line: 325, column: 22, scope: !4936)
!4938 = !DILocation(line: 325, column: 46, scope: !4936)
!4939 = !DILocation(line: 325, column: 28, scope: !4936)
!4940 = !DILocation(line: 325, column: 51, scope: !4936)
!4941 = !DILocation(line: 326, column: 18, scope: !4936)
!4942 = !DILocation(line: 326, column: 21, scope: !4936)
!4943 = !DILocation(line: 326, column: 27, scope: !4936)
!4944 = !DILocation(line: 326, column: 36, scope: !4936)
!4945 = !DILocation(line: 326, column: 39, scope: !4936)
!4946 = !DILocation(line: 326, column: 47, scope: !4936)
!4947 = !DILocation(line: 326, column: 32, scope: !4936)
!4948 = !DILocation(line: 326, column: 56, scope: !4936)
!4949 = !DILocation(line: 326, column: 59, scope: !4936)
!4950 = !DILocation(line: 326, column: 69, scope: !4936)
!4951 = !DILocation(line: 326, column: 52, scope: !4936)
!4952 = !DILocation(line: 326, column: 16, scope: !4936)
!4953 = !DILocation(line: 326, column: 11, scope: !4936)
!4954 = !DILocation(line: 326, column: 14, scope: !4936)
!4955 = !DILocation(line: 324, column: 5, scope: !4956)
!4956 = !DILexicalBlockFile(scope: !4897, file: !103, discriminator: 2)
!4957 = distinct !{!4957, !4929}
!4958 = !DILocation(line: 328, column: 1, scope: !4897)
!4959 = distinct !DISubprogram(name: "rgb32to15_mmxext", scope: !103, file: !103, line: 385, type: !180, isLocal: true, isDefinition: true, scopeLine: 386, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4960 = !DILocalVariable(name: "src", arg: 1, scope: !4959, file: !103, line: 385, type: !182)
!4961 = !DILocation(line: 385, column: 52, scope: !4959)
!4962 = !DILocalVariable(name: "dst", arg: 2, scope: !4959, file: !103, line: 385, type: !15)
!4963 = !DILocation(line: 385, column: 66, scope: !4959)
!4964 = !DILocalVariable(name: "src_size", arg: 3, scope: !4959, file: !103, line: 385, type: !72)
!4965 = !DILocation(line: 385, column: 75, scope: !4959)
!4966 = !DILocalVariable(name: "s", scope: !4959, file: !103, line: 387, type: !182)
!4967 = !DILocation(line: 387, column: 20, scope: !4959)
!4968 = !DILocation(line: 387, column: 24, scope: !4959)
!4969 = !DILocalVariable(name: "end", scope: !4959, file: !103, line: 388, type: !182)
!4970 = !DILocation(line: 388, column: 20, scope: !4959)
!4971 = !DILocalVariable(name: "mm_end", scope: !4959, file: !103, line: 389, type: !182)
!4972 = !DILocation(line: 389, column: 20, scope: !4959)
!4973 = !DILocalVariable(name: "d", scope: !4959, file: !103, line: 390, type: !14)
!4974 = !DILocation(line: 390, column: 15, scope: !4959)
!4975 = !DILocation(line: 390, column: 31, scope: !4959)
!4976 = !DILocation(line: 390, column: 19, scope: !4959)
!4977 = !DILocation(line: 391, column: 11, scope: !4959)
!4978 = !DILocation(line: 391, column: 15, scope: !4959)
!4979 = !DILocation(line: 391, column: 13, scope: !4959)
!4980 = !DILocation(line: 391, column: 9, scope: !4959)
!4981 = !DILocation(line: 392, column: 14, scope: !4959)
!4982 = !DILocation(line: 392, column: 18, scope: !4959)
!4983 = !DILocation(line: 392, column: 12, scope: !4959)
!4984 = !DILocation(line: 393, column: 5, scope: !4959)
!4985 = !DILocation(line: 425, column: 16, scope: !4959)
!4986 = !{i32 254609, i32 254639, i32 254681, i32 254723, i32 254765, i32 254807, i32 254849, i32 254896, i32 254938, i32 254980, i32 255022, i32 255064, i32 255106, i32 255148, i32 255190, i32 255232, i32 255274, i32 255316, i32 255358, i32 255400, i32 255442, i32 255484, i32 255526, i32 255568, i32 255610, i32 255654, i32 255696, i32 255738, i32 255780, i32 255822, i32 255864}
!4987 = !DILocation(line: 427, column: 5, scope: !4959)
!4988 = !{i32 255997}
!4989 = !DILocation(line: 428, column: 5, scope: !4959)
!4990 = !{i32 256040}
!4991 = !DILocation(line: 429, column: 5, scope: !4959)
!4992 = !DILocation(line: 429, column: 12, scope: !4993)
!4993 = !DILexicalBlockFile(scope: !4959, file: !103, discriminator: 1)
!4994 = !DILocation(line: 429, column: 16, scope: !4993)
!4995 = !DILocation(line: 429, column: 14, scope: !4993)
!4996 = !DILocation(line: 429, column: 5, scope: !4993)
!4997 = !DILocalVariable(name: "rgb", scope: !4998, file: !103, line: 430, type: !72)
!4998 = distinct !DILexicalBlock(scope: !4959, file: !103, line: 429, column: 21)
!4999 = !DILocation(line: 430, column: 22, scope: !4998)
!5000 = !DILocation(line: 430, column: 46, scope: !4998)
!5001 = !DILocation(line: 430, column: 28, scope: !4998)
!5002 = !DILocation(line: 430, column: 51, scope: !4998)
!5003 = !DILocation(line: 431, column: 18, scope: !4998)
!5004 = !DILocation(line: 431, column: 21, scope: !4998)
!5005 = !DILocation(line: 431, column: 27, scope: !4998)
!5006 = !DILocation(line: 431, column: 36, scope: !4998)
!5007 = !DILocation(line: 431, column: 39, scope: !4998)
!5008 = !DILocation(line: 431, column: 47, scope: !4998)
!5009 = !DILocation(line: 431, column: 32, scope: !4998)
!5010 = !DILocation(line: 431, column: 56, scope: !4998)
!5011 = !DILocation(line: 431, column: 59, scope: !4998)
!5012 = !DILocation(line: 431, column: 69, scope: !4998)
!5013 = !DILocation(line: 431, column: 52, scope: !4998)
!5014 = !DILocation(line: 431, column: 16, scope: !4998)
!5015 = !DILocation(line: 431, column: 11, scope: !4998)
!5016 = !DILocation(line: 431, column: 14, scope: !4998)
!5017 = !DILocation(line: 429, column: 5, scope: !5018)
!5018 = !DILexicalBlockFile(scope: !4959, file: !103, discriminator: 2)
!5019 = distinct !{!5019, !4991}
!5020 = !DILocation(line: 433, column: 1, scope: !4959)
!5021 = distinct !DISubprogram(name: "rgb32tobgr24_mmxext", scope: !103, file: !103, line: 146, type: !180, isLocal: true, isDefinition: true, scopeLine: 147, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5022 = !DILocalVariable(name: "src", arg: 1, scope: !5021, file: !103, line: 146, type: !182)
!5023 = !DILocation(line: 146, column: 55, scope: !5021)
!5024 = !DILocalVariable(name: "dst", arg: 2, scope: !5021, file: !103, line: 146, type: !15)
!5025 = !DILocation(line: 146, column: 69, scope: !5021)
!5026 = !DILocalVariable(name: "src_size", arg: 3, scope: !5021, file: !103, line: 146, type: !72)
!5027 = !DILocation(line: 146, column: 78, scope: !5021)
!5028 = !DILocalVariable(name: "dest", scope: !5021, file: !103, line: 148, type: !15)
!5029 = !DILocation(line: 148, column: 14, scope: !5021)
!5030 = !DILocation(line: 148, column: 21, scope: !5021)
!5031 = !DILocalVariable(name: "s", scope: !5021, file: !103, line: 149, type: !182)
!5032 = !DILocation(line: 149, column: 20, scope: !5021)
!5033 = !DILocation(line: 149, column: 24, scope: !5021)
!5034 = !DILocalVariable(name: "end", scope: !5021, file: !103, line: 150, type: !182)
!5035 = !DILocation(line: 150, column: 20, scope: !5021)
!5036 = !DILocalVariable(name: "mm_end", scope: !5021, file: !103, line: 151, type: !182)
!5037 = !DILocation(line: 151, column: 20, scope: !5021)
!5038 = !DILocation(line: 152, column: 11, scope: !5021)
!5039 = !DILocation(line: 152, column: 15, scope: !5021)
!5040 = !DILocation(line: 152, column: 13, scope: !5021)
!5041 = !DILocation(line: 152, column: 9, scope: !5021)
!5042 = !DILocation(line: 153, column: 50, scope: !5021)
!5043 = !DILocation(line: 153, column: 5, scope: !5021)
!5044 = !{i32 245450}
!5045 = !DILocation(line: 154, column: 14, scope: !5021)
!5046 = !DILocation(line: 154, column: 18, scope: !5021)
!5047 = !DILocation(line: 154, column: 12, scope: !5021)
!5048 = !DILocation(line: 155, column: 5, scope: !5021)
!5049 = !DILocation(line: 155, column: 12, scope: !5050)
!5050 = !DILexicalBlockFile(scope: !5021, file: !103, discriminator: 1)
!5051 = !DILocation(line: 155, column: 16, scope: !5050)
!5052 = !DILocation(line: 155, column: 14, scope: !5050)
!5053 = !DILocation(line: 155, column: 5, scope: !5050)
!5054 = !DILocation(line: 167, column: 20, scope: !5055)
!5055 = distinct !DILexicalBlock(scope: !5021, file: !103, line: 155, column: 24)
!5056 = !DILocation(line: 167, column: 31, scope: !5055)
!5057 = !DILocation(line: 156, column: 9, scope: !5055)
!5058 = !{i32 245578, i32 245613, i32 245659, i32 245705, i32 245751, i32 245797, i32 245843, i32 245889, i32 245935, i32 245981, i32 246027, i32 246061, i32 246095, i32 246129, i32 246162, i32 246195, i32 246228, i32 246261, i32 246294, i32 246327, i32 246360, i32 246393, i32 246427, i32 246461, i32 246495, i32 246529, i32 246563, i32 246597, i32 246631, i32 246665, i32 246699, i32 246733, i32 246767, i32 246801, i32 246835, i32 246869, i32 246906, i32 246943}
!5059 = !DILocation(line: 170, column: 14, scope: !5055)
!5060 = !DILocation(line: 171, column: 11, scope: !5055)
!5061 = !DILocation(line: 155, column: 5, scope: !5062)
!5062 = !DILexicalBlockFile(scope: !5021, file: !103, discriminator: 2)
!5063 = distinct !{!5063, !5048}
!5064 = !DILocation(line: 173, column: 5, scope: !5021)
!5065 = !{i32 247111}
!5066 = !DILocation(line: 174, column: 5, scope: !5021)
!5067 = !{i32 247154}
!5068 = !DILocation(line: 175, column: 5, scope: !5021)
!5069 = !DILocation(line: 175, column: 12, scope: !5050)
!5070 = !DILocation(line: 175, column: 16, scope: !5050)
!5071 = !DILocation(line: 175, column: 14, scope: !5050)
!5072 = !DILocation(line: 175, column: 5, scope: !5050)
!5073 = !DILocation(line: 176, column: 21, scope: !5074)
!5074 = distinct !DILexicalBlock(scope: !5021, file: !103, line: 175, column: 21)
!5075 = !DILocation(line: 176, column: 19, scope: !5074)
!5076 = !DILocation(line: 176, column: 14, scope: !5074)
!5077 = !DILocation(line: 176, column: 17, scope: !5074)
!5078 = !DILocation(line: 177, column: 21, scope: !5074)
!5079 = !DILocation(line: 177, column: 19, scope: !5074)
!5080 = !DILocation(line: 177, column: 14, scope: !5074)
!5081 = !DILocation(line: 177, column: 17, scope: !5074)
!5082 = !DILocation(line: 178, column: 21, scope: !5074)
!5083 = !DILocation(line: 178, column: 19, scope: !5074)
!5084 = !DILocation(line: 178, column: 14, scope: !5074)
!5085 = !DILocation(line: 178, column: 17, scope: !5074)
!5086 = !DILocation(line: 179, column: 10, scope: !5074)
!5087 = !DILocation(line: 175, column: 5, scope: !5062)
!5088 = distinct !{!5088, !5068}
!5089 = !DILocation(line: 181, column: 1, scope: !5021)
!5090 = distinct !DISubprogram(name: "rgb24to15_mmxext", scope: !103, file: !103, line: 661, type: !180, isLocal: true, isDefinition: true, scopeLine: 662, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5091 = !DILocalVariable(name: "src", arg: 1, scope: !5090, file: !103, line: 661, type: !182)
!5092 = !DILocation(line: 661, column: 52, scope: !5090)
!5093 = !DILocalVariable(name: "dst", arg: 2, scope: !5090, file: !103, line: 661, type: !15)
!5094 = !DILocation(line: 661, column: 66, scope: !5090)
!5095 = !DILocalVariable(name: "src_size", arg: 3, scope: !5090, file: !103, line: 661, type: !72)
!5096 = !DILocation(line: 661, column: 75, scope: !5090)
!5097 = !DILocalVariable(name: "s", scope: !5090, file: !103, line: 663, type: !182)
!5098 = !DILocation(line: 663, column: 20, scope: !5090)
!5099 = !DILocation(line: 663, column: 24, scope: !5090)
!5100 = !DILocalVariable(name: "end", scope: !5090, file: !103, line: 664, type: !182)
!5101 = !DILocation(line: 664, column: 20, scope: !5090)
!5102 = !DILocalVariable(name: "mm_end", scope: !5090, file: !103, line: 665, type: !182)
!5103 = !DILocation(line: 665, column: 20, scope: !5090)
!5104 = !DILocalVariable(name: "d", scope: !5090, file: !103, line: 666, type: !14)
!5105 = !DILocation(line: 666, column: 15, scope: !5090)
!5106 = !DILocation(line: 666, column: 31, scope: !5090)
!5107 = !DILocation(line: 666, column: 19, scope: !5090)
!5108 = !DILocation(line: 667, column: 11, scope: !5090)
!5109 = !DILocation(line: 667, column: 15, scope: !5090)
!5110 = !DILocation(line: 667, column: 13, scope: !5090)
!5111 = !DILocation(line: 667, column: 9, scope: !5090)
!5112 = !DILocation(line: 668, column: 50, scope: !5090)
!5113 = !DILocation(line: 668, column: 5, scope: !5090)
!5114 = !{i32 265103}
!5115 = !DILocation(line: 669, column: 5, scope: !5090)
!5116 = !{i32 265177, i32 265207, i32 265249}
!5117 = !DILocation(line: 673, column: 14, scope: !5090)
!5118 = !DILocation(line: 673, column: 18, scope: !5090)
!5119 = !DILocation(line: 673, column: 12, scope: !5090)
!5120 = !DILocation(line: 674, column: 5, scope: !5090)
!5121 = !DILocation(line: 674, column: 12, scope: !5122)
!5122 = !DILexicalBlockFile(scope: !5090, file: !103, discriminator: 1)
!5123 = !DILocation(line: 674, column: 16, scope: !5122)
!5124 = !DILocation(line: 674, column: 14, scope: !5122)
!5125 = !DILocation(line: 674, column: 5, scope: !5122)
!5126 = !DILocation(line: 704, column: 19, scope: !5127)
!5127 = distinct !DILexicalBlock(scope: !5090, file: !103, line: 674, column: 24)
!5128 = !DILocation(line: 704, column: 26, scope: !5127)
!5129 = !DILocation(line: 675, column: 9, scope: !5127)
!5130 = !{i32 265385, i32 265420, i32 265466, i32 265512, i32 265558, i32 265604, i32 265650, i32 265696, i32 265742, i32 265788, i32 265834, i32 265880, i32 265926, i32 265972, i32 266018, i32 266064, i32 266110, i32 266156, i32 266202, i32 266248, i32 266294, i32 266340, i32 266386, i32 266432, i32 266478, i32 266524, i32 266570, i32 266616, i32 266664}
!5131 = !DILocation(line: 705, column: 11, scope: !5127)
!5132 = !DILocation(line: 706, column: 11, scope: !5127)
!5133 = !DILocation(line: 674, column: 5, scope: !5134)
!5134 = !DILexicalBlockFile(scope: !5090, file: !103, discriminator: 2)
!5135 = distinct !{!5135, !5120}
!5136 = !DILocation(line: 708, column: 5, scope: !5090)
!5137 = !{i32 266784}
!5138 = !DILocation(line: 709, column: 5, scope: !5090)
!5139 = !{i32 266827}
!5140 = !DILocation(line: 710, column: 5, scope: !5090)
!5141 = !DILocation(line: 710, column: 12, scope: !5122)
!5142 = !DILocation(line: 710, column: 16, scope: !5122)
!5143 = !DILocation(line: 710, column: 14, scope: !5122)
!5144 = !DILocation(line: 710, column: 5, scope: !5122)
!5145 = !DILocalVariable(name: "r", scope: !5146, file: !103, line: 711, type: !826)
!5146 = distinct !DILexicalBlock(scope: !5090, file: !103, line: 710, column: 21)
!5147 = !DILocation(line: 711, column: 19, scope: !5146)
!5148 = !DILocation(line: 711, column: 25, scope: !5146)
!5149 = !DILocation(line: 711, column: 23, scope: !5146)
!5150 = !DILocalVariable(name: "g", scope: !5146, file: !103, line: 712, type: !826)
!5151 = !DILocation(line: 712, column: 19, scope: !5146)
!5152 = !DILocation(line: 712, column: 25, scope: !5146)
!5153 = !DILocation(line: 712, column: 23, scope: !5146)
!5154 = !DILocalVariable(name: "b", scope: !5146, file: !103, line: 713, type: !826)
!5155 = !DILocation(line: 713, column: 19, scope: !5146)
!5156 = !DILocation(line: 713, column: 25, scope: !5146)
!5157 = !DILocation(line: 713, column: 23, scope: !5146)
!5158 = !DILocation(line: 714, column: 17, scope: !5146)
!5159 = !DILocation(line: 714, column: 18, scope: !5146)
!5160 = !DILocation(line: 714, column: 27, scope: !5146)
!5161 = !DILocation(line: 714, column: 28, scope: !5146)
!5162 = !DILocation(line: 714, column: 34, scope: !5146)
!5163 = !DILocation(line: 714, column: 23, scope: !5146)
!5164 = !DILocation(line: 714, column: 43, scope: !5146)
!5165 = !DILocation(line: 714, column: 44, scope: !5146)
!5166 = !DILocation(line: 714, column: 50, scope: !5146)
!5167 = !DILocation(line: 714, column: 39, scope: !5146)
!5168 = !DILocation(line: 714, column: 16, scope: !5146)
!5169 = !DILocation(line: 714, column: 11, scope: !5146)
!5170 = !DILocation(line: 714, column: 14, scope: !5146)
!5171 = !DILocation(line: 710, column: 5, scope: !5134)
!5172 = distinct !{!5172, !5140}
!5173 = !DILocation(line: 716, column: 1, scope: !5090)
!5174 = distinct !DISubprogram(name: "rgb24to16_mmxext", scope: !103, file: !103, line: 547, type: !180, isLocal: true, isDefinition: true, scopeLine: 548, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5175 = !DILocalVariable(name: "src", arg: 1, scope: !5174, file: !103, line: 547, type: !182)
!5176 = !DILocation(line: 547, column: 52, scope: !5174)
!5177 = !DILocalVariable(name: "dst", arg: 2, scope: !5174, file: !103, line: 547, type: !15)
!5178 = !DILocation(line: 547, column: 66, scope: !5174)
!5179 = !DILocalVariable(name: "src_size", arg: 3, scope: !5174, file: !103, line: 547, type: !72)
!5180 = !DILocation(line: 547, column: 75, scope: !5174)
!5181 = !DILocalVariable(name: "s", scope: !5174, file: !103, line: 549, type: !182)
!5182 = !DILocation(line: 549, column: 20, scope: !5174)
!5183 = !DILocation(line: 549, column: 24, scope: !5174)
!5184 = !DILocalVariable(name: "end", scope: !5174, file: !103, line: 550, type: !182)
!5185 = !DILocation(line: 550, column: 20, scope: !5174)
!5186 = !DILocalVariable(name: "mm_end", scope: !5174, file: !103, line: 551, type: !182)
!5187 = !DILocation(line: 551, column: 20, scope: !5174)
!5188 = !DILocalVariable(name: "d", scope: !5174, file: !103, line: 552, type: !14)
!5189 = !DILocation(line: 552, column: 15, scope: !5174)
!5190 = !DILocation(line: 552, column: 31, scope: !5174)
!5191 = !DILocation(line: 552, column: 19, scope: !5174)
!5192 = !DILocation(line: 553, column: 11, scope: !5174)
!5193 = !DILocation(line: 553, column: 15, scope: !5174)
!5194 = !DILocation(line: 553, column: 13, scope: !5174)
!5195 = !DILocation(line: 553, column: 9, scope: !5174)
!5196 = !DILocation(line: 554, column: 50, scope: !5174)
!5197 = !DILocation(line: 554, column: 5, scope: !5174)
!5198 = !{i32 260782}
!5199 = !DILocation(line: 555, column: 5, scope: !5174)
!5200 = !{i32 260856, i32 260886, i32 260928}
!5201 = !DILocation(line: 559, column: 14, scope: !5174)
!5202 = !DILocation(line: 559, column: 18, scope: !5174)
!5203 = !DILocation(line: 559, column: 12, scope: !5174)
!5204 = !DILocation(line: 560, column: 5, scope: !5174)
!5205 = !DILocation(line: 560, column: 12, scope: !5206)
!5206 = !DILexicalBlockFile(scope: !5174, file: !103, discriminator: 1)
!5207 = !DILocation(line: 560, column: 16, scope: !5206)
!5208 = !DILocation(line: 560, column: 14, scope: !5206)
!5209 = !DILocation(line: 560, column: 5, scope: !5206)
!5210 = !DILocation(line: 590, column: 19, scope: !5211)
!5211 = distinct !DILexicalBlock(scope: !5174, file: !103, line: 560, column: 24)
!5212 = !DILocation(line: 590, column: 26, scope: !5211)
!5213 = !DILocation(line: 561, column: 9, scope: !5211)
!5214 = !{i32 261064, i32 261099, i32 261145, i32 261191, i32 261237, i32 261283, i32 261329, i32 261375, i32 261421, i32 261467, i32 261513, i32 261559, i32 261605, i32 261651, i32 261697, i32 261743, i32 261789, i32 261835, i32 261881, i32 261927, i32 261973, i32 262019, i32 262065, i32 262111, i32 262157, i32 262203, i32 262249, i32 262295, i32 262343}
!5215 = !DILocation(line: 591, column: 11, scope: !5211)
!5216 = !DILocation(line: 592, column: 11, scope: !5211)
!5217 = !DILocation(line: 560, column: 5, scope: !5218)
!5218 = !DILexicalBlockFile(scope: !5174, file: !103, discriminator: 2)
!5219 = distinct !{!5219, !5204}
!5220 = !DILocation(line: 594, column: 5, scope: !5174)
!5221 = !{i32 262463}
!5222 = !DILocation(line: 595, column: 5, scope: !5174)
!5223 = !{i32 262506}
!5224 = !DILocation(line: 596, column: 5, scope: !5174)
!5225 = !DILocation(line: 596, column: 12, scope: !5206)
!5226 = !DILocation(line: 596, column: 16, scope: !5206)
!5227 = !DILocation(line: 596, column: 14, scope: !5206)
!5228 = !DILocation(line: 596, column: 5, scope: !5206)
!5229 = !DILocalVariable(name: "r", scope: !5230, file: !103, line: 597, type: !826)
!5230 = distinct !DILexicalBlock(scope: !5174, file: !103, line: 596, column: 21)
!5231 = !DILocation(line: 597, column: 19, scope: !5230)
!5232 = !DILocation(line: 597, column: 25, scope: !5230)
!5233 = !DILocation(line: 597, column: 23, scope: !5230)
!5234 = !DILocalVariable(name: "g", scope: !5230, file: !103, line: 598, type: !826)
!5235 = !DILocation(line: 598, column: 19, scope: !5230)
!5236 = !DILocation(line: 598, column: 25, scope: !5230)
!5237 = !DILocation(line: 598, column: 23, scope: !5230)
!5238 = !DILocalVariable(name: "b", scope: !5230, file: !103, line: 599, type: !826)
!5239 = !DILocation(line: 599, column: 19, scope: !5230)
!5240 = !DILocation(line: 599, column: 25, scope: !5230)
!5241 = !DILocation(line: 599, column: 23, scope: !5230)
!5242 = !DILocation(line: 600, column: 17, scope: !5230)
!5243 = !DILocation(line: 600, column: 18, scope: !5230)
!5244 = !DILocation(line: 600, column: 27, scope: !5230)
!5245 = !DILocation(line: 600, column: 28, scope: !5230)
!5246 = !DILocation(line: 600, column: 34, scope: !5230)
!5247 = !DILocation(line: 600, column: 23, scope: !5230)
!5248 = !DILocation(line: 600, column: 43, scope: !5230)
!5249 = !DILocation(line: 600, column: 44, scope: !5230)
!5250 = !DILocation(line: 600, column: 50, scope: !5230)
!5251 = !DILocation(line: 600, column: 39, scope: !5230)
!5252 = !DILocation(line: 600, column: 16, scope: !5230)
!5253 = !DILocation(line: 600, column: 11, scope: !5230)
!5254 = !DILocation(line: 600, column: 14, scope: !5230)
!5255 = !DILocation(line: 596, column: 5, scope: !5218)
!5256 = distinct !{!5256, !5224}
!5257 = !DILocation(line: 602, column: 1, scope: !5174)
!5258 = distinct !DISubprogram(name: "rgb24tobgr24_mmxext", scope: !103, file: !103, line: 1037, type: !180, isLocal: true, isDefinition: true, scopeLine: 1038, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5259 = !DILocalVariable(name: "src", arg: 1, scope: !5258, file: !103, line: 1037, type: !182)
!5260 = !DILocation(line: 1037, column: 55, scope: !5258)
!5261 = !DILocalVariable(name: "dst", arg: 2, scope: !5258, file: !103, line: 1037, type: !15)
!5262 = !DILocation(line: 1037, column: 69, scope: !5258)
!5263 = !DILocalVariable(name: "src_size", arg: 3, scope: !5258, file: !103, line: 1037, type: !72)
!5264 = !DILocation(line: 1037, column: 78, scope: !5258)
!5265 = !DILocalVariable(name: "i", scope: !5258, file: !103, line: 1039, type: !8)
!5266 = !DILocation(line: 1039, column: 14, scope: !5258)
!5267 = !DILocalVariable(name: "mmx_size", scope: !5258, file: !103, line: 1040, type: !18)
!5268 = !DILocation(line: 1040, column: 13, scope: !5258)
!5269 = !DILocation(line: 1040, column: 28, scope: !5258)
!5270 = !DILocation(line: 1040, column: 26, scope: !5258)
!5271 = !DILocation(line: 1040, column: 23, scope: !5258)
!5272 = !DILocation(line: 1041, column: 5, scope: !5258)
!5273 = !DILocation(line: 1082, column: 16, scope: !5258)
!5274 = !DILocation(line: 1082, column: 20, scope: !5258)
!5275 = !DILocation(line: 1082, column: 19, scope: !5258)
!5276 = !DILocation(line: 1082, column: 35, scope: !5258)
!5277 = !DILocation(line: 1082, column: 39, scope: !5258)
!5278 = !DILocation(line: 1082, column: 38, scope: !5258)
!5279 = !{i32 281227, i32 281271, i32 281333, i32 281392, i32 281451, i32 281510, i32 281572, i32 281634, i32 281698, i32 281757, i32 281816, i32 281875, i32 281937, i32 281999, i32 282061, i32 282123, i32 282185, i32 282247, i32 282306, i32 282367, i32 282426, i32 282485, i32 282547, i32 282609, i32 282671, i32 282733, i32 282795, i32 282854, i32 282915, i32 282974, i32 283033, i32 283095, i32 283157, i32 283219, i32 283281, i32 283343, i32 283406, i32 283465, i32 283527, i32 283589}
!5280 = !DILocation(line: 1086, column: 5, scope: !5258)
!5281 = !{i32 283706}
!5282 = !DILocation(line: 1087, column: 5, scope: !5258)
!5283 = !{i32 283749}
!5284 = !DILocation(line: 1089, column: 9, scope: !5285)
!5285 = distinct !DILexicalBlock(scope: !5258, file: !103, line: 1089, column: 9)
!5286 = !DILocation(line: 1089, column: 17, scope: !5285)
!5287 = !DILocation(line: 1089, column: 9, scope: !5258)
!5288 = !DILocation(line: 1089, column: 23, scope: !5289)
!5289 = !DILexicalBlockFile(scope: !5285, file: !103, discriminator: 1)
!5290 = !DILocation(line: 1091, column: 11, scope: !5258)
!5291 = !DILocation(line: 1091, column: 8, scope: !5258)
!5292 = !DILocation(line: 1092, column: 11, scope: !5258)
!5293 = !DILocation(line: 1092, column: 8, scope: !5258)
!5294 = !DILocation(line: 1093, column: 18, scope: !5258)
!5295 = !DILocation(line: 1093, column: 17, scope: !5258)
!5296 = !DILocation(line: 1093, column: 15, scope: !5258)
!5297 = !DILocation(line: 1093, column: 13, scope: !5258)
!5298 = !DILocation(line: 1094, column: 11, scope: !5258)
!5299 = !DILocation(line: 1094, column: 8, scope: !5258)
!5300 = !DILocation(line: 1095, column: 11, scope: !5258)
!5301 = !DILocation(line: 1095, column: 8, scope: !5258)
!5302 = !DILocation(line: 1096, column: 11, scope: !5303)
!5303 = distinct !DILexicalBlock(scope: !5258, file: !103, line: 1096, column: 5)
!5304 = !DILocation(line: 1096, column: 10, scope: !5303)
!5305 = !DILocation(line: 1096, column: 15, scope: !5306)
!5306 = !DILexicalBlockFile(scope: !5307, file: !103, discriminator: 1)
!5307 = distinct !DILexicalBlock(scope: !5303, file: !103, line: 1096, column: 5)
!5308 = !DILocation(line: 1096, column: 17, scope: !5306)
!5309 = !DILocation(line: 1096, column: 16, scope: !5306)
!5310 = !DILocation(line: 1096, column: 5, scope: !5306)
!5311 = !DILocalVariable(name: "x", scope: !5312, file: !103, line: 1097, type: !16)
!5312 = distinct !DILexicalBlock(scope: !5307, file: !103, line: 1096, column: 33)
!5313 = !DILocation(line: 1097, column: 26, scope: !5312)
!5314 = !DILocation(line: 1098, column: 17, scope: !5312)
!5315 = !DILocation(line: 1098, column: 19, scope: !5312)
!5316 = !DILocation(line: 1098, column: 13, scope: !5312)
!5317 = !DILocation(line: 1098, column: 11, scope: !5312)
!5318 = !DILocation(line: 1099, column: 26, scope: !5312)
!5319 = !DILocation(line: 1099, column: 28, scope: !5312)
!5320 = !DILocation(line: 1099, column: 22, scope: !5312)
!5321 = !DILocation(line: 1099, column: 13, scope: !5312)
!5322 = !DILocation(line: 1099, column: 15, scope: !5312)
!5323 = !DILocation(line: 1099, column: 9, scope: !5312)
!5324 = !DILocation(line: 1099, column: 20, scope: !5312)
!5325 = !DILocation(line: 1100, column: 26, scope: !5312)
!5326 = !DILocation(line: 1100, column: 28, scope: !5312)
!5327 = !DILocation(line: 1100, column: 22, scope: !5312)
!5328 = !DILocation(line: 1100, column: 13, scope: !5312)
!5329 = !DILocation(line: 1100, column: 15, scope: !5312)
!5330 = !DILocation(line: 1100, column: 9, scope: !5312)
!5331 = !DILocation(line: 1100, column: 20, scope: !5312)
!5332 = !DILocation(line: 1101, column: 22, scope: !5312)
!5333 = !DILocation(line: 1101, column: 13, scope: !5312)
!5334 = !DILocation(line: 1101, column: 15, scope: !5312)
!5335 = !DILocation(line: 1101, column: 9, scope: !5312)
!5336 = !DILocation(line: 1101, column: 20, scope: !5312)
!5337 = !DILocation(line: 1102, column: 5, scope: !5312)
!5338 = !DILocation(line: 1096, column: 28, scope: !5339)
!5339 = !DILexicalBlockFile(scope: !5307, file: !103, discriminator: 2)
!5340 = !DILocation(line: 1096, column: 5, scope: !5339)
!5341 = distinct !{!5341, !5342}
!5342 = !DILocation(line: 1096, column: 5, scope: !5258)
!5343 = !DILocation(line: 1103, column: 1, scope: !5258)
!5344 = distinct !DISubprogram(name: "rgb32tobgr16_mmxext", scope: !103, file: !103, line: 330, type: !180, isLocal: true, isDefinition: true, scopeLine: 331, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5345 = !DILocalVariable(name: "src", arg: 1, scope: !5344, file: !103, line: 330, type: !182)
!5346 = !DILocation(line: 330, column: 55, scope: !5344)
!5347 = !DILocalVariable(name: "dst", arg: 2, scope: !5344, file: !103, line: 330, type: !15)
!5348 = !DILocation(line: 330, column: 69, scope: !5344)
!5349 = !DILocalVariable(name: "src_size", arg: 3, scope: !5344, file: !103, line: 330, type: !72)
!5350 = !DILocation(line: 330, column: 78, scope: !5344)
!5351 = !DILocalVariable(name: "s", scope: !5344, file: !103, line: 332, type: !182)
!5352 = !DILocation(line: 332, column: 20, scope: !5344)
!5353 = !DILocation(line: 332, column: 24, scope: !5344)
!5354 = !DILocalVariable(name: "end", scope: !5344, file: !103, line: 333, type: !182)
!5355 = !DILocation(line: 333, column: 20, scope: !5344)
!5356 = !DILocalVariable(name: "mm_end", scope: !5344, file: !103, line: 334, type: !182)
!5357 = !DILocation(line: 334, column: 20, scope: !5344)
!5358 = !DILocalVariable(name: "d", scope: !5344, file: !103, line: 335, type: !14)
!5359 = !DILocation(line: 335, column: 15, scope: !5344)
!5360 = !DILocation(line: 335, column: 31, scope: !5344)
!5361 = !DILocation(line: 335, column: 19, scope: !5344)
!5362 = !DILocation(line: 336, column: 11, scope: !5344)
!5363 = !DILocation(line: 336, column: 15, scope: !5344)
!5364 = !DILocation(line: 336, column: 13, scope: !5344)
!5365 = !DILocation(line: 336, column: 9, scope: !5344)
!5366 = !DILocation(line: 337, column: 50, scope: !5344)
!5367 = !DILocation(line: 337, column: 5, scope: !5344)
!5368 = !{i32 252425}
!5369 = !DILocation(line: 338, column: 5, scope: !5344)
!5370 = !{i32 252499, i32 252529, i32 252571}
!5371 = !DILocation(line: 342, column: 14, scope: !5344)
!5372 = !DILocation(line: 342, column: 18, scope: !5344)
!5373 = !DILocation(line: 342, column: 12, scope: !5344)
!5374 = !DILocation(line: 343, column: 5, scope: !5344)
!5375 = !DILocation(line: 343, column: 12, scope: !5376)
!5376 = !DILexicalBlockFile(scope: !5344, file: !103, discriminator: 1)
!5377 = !DILocation(line: 343, column: 16, scope: !5376)
!5378 = !DILocation(line: 343, column: 14, scope: !5376)
!5379 = !DILocation(line: 343, column: 5, scope: !5376)
!5380 = !DILocation(line: 373, column: 20, scope: !5381)
!5381 = distinct !DILexicalBlock(scope: !5344, file: !103, line: 343, column: 24)
!5382 = !DILocation(line: 373, column: 27, scope: !5381)
!5383 = !DILocation(line: 344, column: 9, scope: !5381)
!5384 = !{i32 252707, i32 252742, i32 252788, i32 252834, i32 252880, i32 252926, i32 252972, i32 253018, i32 253064, i32 253110, i32 253156, i32 253202, i32 253248, i32 253294, i32 253340, i32 253386, i32 253432, i32 253478, i32 253524, i32 253570, i32 253616, i32 253662, i32 253708, i32 253754, i32 253800, i32 253846, i32 253892, i32 253938, i32 253986}
!5385 = !DILocation(line: 374, column: 11, scope: !5381)
!5386 = !DILocation(line: 375, column: 11, scope: !5381)
!5387 = !DILocation(line: 343, column: 5, scope: !5388)
!5388 = !DILexicalBlockFile(scope: !5344, file: !103, discriminator: 2)
!5389 = distinct !{!5389, !5374}
!5390 = !DILocation(line: 377, column: 5, scope: !5344)
!5391 = !{i32 254107}
!5392 = !DILocation(line: 378, column: 5, scope: !5344)
!5393 = !{i32 254150}
!5394 = !DILocation(line: 379, column: 5, scope: !5344)
!5395 = !DILocation(line: 379, column: 12, scope: !5376)
!5396 = !DILocation(line: 379, column: 16, scope: !5376)
!5397 = !DILocation(line: 379, column: 14, scope: !5376)
!5398 = !DILocation(line: 379, column: 5, scope: !5376)
!5399 = !DILocalVariable(name: "rgb", scope: !5400, file: !103, line: 380, type: !72)
!5400 = distinct !DILexicalBlock(scope: !5344, file: !103, line: 379, column: 21)
!5401 = !DILocation(line: 380, column: 22, scope: !5400)
!5402 = !DILocation(line: 380, column: 46, scope: !5400)
!5403 = !DILocation(line: 380, column: 28, scope: !5400)
!5404 = !DILocation(line: 380, column: 51, scope: !5400)
!5405 = !DILocation(line: 381, column: 18, scope: !5400)
!5406 = !DILocation(line: 381, column: 21, scope: !5400)
!5407 = !DILocation(line: 381, column: 27, scope: !5400)
!5408 = !DILocation(line: 381, column: 36, scope: !5400)
!5409 = !DILocation(line: 381, column: 39, scope: !5400)
!5410 = !DILocation(line: 381, column: 47, scope: !5400)
!5411 = !DILocation(line: 381, column: 32, scope: !5400)
!5412 = !DILocation(line: 381, column: 56, scope: !5400)
!5413 = !DILocation(line: 381, column: 59, scope: !5400)
!5414 = !DILocation(line: 381, column: 69, scope: !5400)
!5415 = !DILocation(line: 381, column: 52, scope: !5400)
!5416 = !DILocation(line: 381, column: 16, scope: !5400)
!5417 = !DILocation(line: 381, column: 11, scope: !5400)
!5418 = !DILocation(line: 381, column: 14, scope: !5400)
!5419 = !DILocation(line: 379, column: 5, scope: !5388)
!5420 = distinct !{!5420, !5394}
!5421 = !DILocation(line: 383, column: 1, scope: !5344)
!5422 = distinct !DISubprogram(name: "rgb32tobgr15_mmxext", scope: !103, file: !103, line: 435, type: !180, isLocal: true, isDefinition: true, scopeLine: 436, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5423 = !DILocalVariable(name: "src", arg: 1, scope: !5422, file: !103, line: 435, type: !182)
!5424 = !DILocation(line: 435, column: 55, scope: !5422)
!5425 = !DILocalVariable(name: "dst", arg: 2, scope: !5422, file: !103, line: 435, type: !15)
!5426 = !DILocation(line: 435, column: 69, scope: !5422)
!5427 = !DILocalVariable(name: "src_size", arg: 3, scope: !5422, file: !103, line: 435, type: !72)
!5428 = !DILocation(line: 435, column: 78, scope: !5422)
!5429 = !DILocalVariable(name: "s", scope: !5422, file: !103, line: 437, type: !182)
!5430 = !DILocation(line: 437, column: 20, scope: !5422)
!5431 = !DILocation(line: 437, column: 24, scope: !5422)
!5432 = !DILocalVariable(name: "end", scope: !5422, file: !103, line: 438, type: !182)
!5433 = !DILocation(line: 438, column: 20, scope: !5422)
!5434 = !DILocalVariable(name: "mm_end", scope: !5422, file: !103, line: 439, type: !182)
!5435 = !DILocation(line: 439, column: 20, scope: !5422)
!5436 = !DILocalVariable(name: "d", scope: !5422, file: !103, line: 440, type: !14)
!5437 = !DILocation(line: 440, column: 15, scope: !5422)
!5438 = !DILocation(line: 440, column: 31, scope: !5422)
!5439 = !DILocation(line: 440, column: 19, scope: !5422)
!5440 = !DILocation(line: 441, column: 11, scope: !5422)
!5441 = !DILocation(line: 441, column: 15, scope: !5422)
!5442 = !DILocation(line: 441, column: 13, scope: !5422)
!5443 = !DILocation(line: 441, column: 9, scope: !5422)
!5444 = !DILocation(line: 442, column: 50, scope: !5422)
!5445 = !DILocation(line: 442, column: 5, scope: !5422)
!5446 = !{i32 256469}
!5447 = !DILocation(line: 443, column: 5, scope: !5422)
!5448 = !{i32 256543, i32 256573, i32 256615}
!5449 = !DILocation(line: 447, column: 14, scope: !5422)
!5450 = !DILocation(line: 447, column: 18, scope: !5422)
!5451 = !DILocation(line: 447, column: 12, scope: !5422)
!5452 = !DILocation(line: 448, column: 5, scope: !5422)
!5453 = !DILocation(line: 448, column: 12, scope: !5454)
!5454 = !DILexicalBlockFile(scope: !5422, file: !103, discriminator: 1)
!5455 = !DILocation(line: 448, column: 16, scope: !5454)
!5456 = !DILocation(line: 448, column: 14, scope: !5454)
!5457 = !DILocation(line: 448, column: 5, scope: !5454)
!5458 = !DILocation(line: 478, column: 19, scope: !5459)
!5459 = distinct !DILexicalBlock(scope: !5422, file: !103, line: 448, column: 24)
!5460 = !DILocation(line: 478, column: 26, scope: !5459)
!5461 = !DILocation(line: 449, column: 9, scope: !5459)
!5462 = !{i32 256751, i32 256786, i32 256832, i32 256878, i32 256924, i32 256970, i32 257016, i32 257062, i32 257108, i32 257154, i32 257200, i32 257246, i32 257292, i32 257338, i32 257384, i32 257430, i32 257476, i32 257522, i32 257568, i32 257614, i32 257660, i32 257706, i32 257752, i32 257798, i32 257844, i32 257890, i32 257936, i32 257982, i32 258030}
!5463 = !DILocation(line: 479, column: 11, scope: !5459)
!5464 = !DILocation(line: 480, column: 11, scope: !5459)
!5465 = !DILocation(line: 448, column: 5, scope: !5466)
!5466 = !DILexicalBlockFile(scope: !5422, file: !103, discriminator: 2)
!5467 = distinct !{!5467, !5452}
!5468 = !DILocation(line: 482, column: 5, scope: !5422)
!5469 = !{i32 258150}
!5470 = !DILocation(line: 483, column: 5, scope: !5422)
!5471 = !{i32 258193}
!5472 = !DILocation(line: 484, column: 5, scope: !5422)
!5473 = !DILocation(line: 484, column: 12, scope: !5454)
!5474 = !DILocation(line: 484, column: 16, scope: !5454)
!5475 = !DILocation(line: 484, column: 14, scope: !5454)
!5476 = !DILocation(line: 484, column: 5, scope: !5454)
!5477 = !DILocalVariable(name: "rgb", scope: !5478, file: !103, line: 485, type: !72)
!5478 = distinct !DILexicalBlock(scope: !5422, file: !103, line: 484, column: 21)
!5479 = !DILocation(line: 485, column: 22, scope: !5478)
!5480 = !DILocation(line: 485, column: 46, scope: !5478)
!5481 = !DILocation(line: 485, column: 28, scope: !5478)
!5482 = !DILocation(line: 485, column: 51, scope: !5478)
!5483 = !DILocation(line: 486, column: 18, scope: !5478)
!5484 = !DILocation(line: 486, column: 21, scope: !5478)
!5485 = !DILocation(line: 486, column: 27, scope: !5478)
!5486 = !DILocation(line: 486, column: 36, scope: !5478)
!5487 = !DILocation(line: 486, column: 39, scope: !5478)
!5488 = !DILocation(line: 486, column: 47, scope: !5478)
!5489 = !DILocation(line: 486, column: 32, scope: !5478)
!5490 = !DILocation(line: 486, column: 56, scope: !5478)
!5491 = !DILocation(line: 486, column: 59, scope: !5478)
!5492 = !DILocation(line: 486, column: 69, scope: !5478)
!5493 = !DILocation(line: 486, column: 52, scope: !5478)
!5494 = !DILocation(line: 486, column: 16, scope: !5478)
!5495 = !DILocation(line: 486, column: 11, scope: !5478)
!5496 = !DILocation(line: 486, column: 14, scope: !5478)
!5497 = !DILocation(line: 484, column: 5, scope: !5466)
!5498 = distinct !{!5498, !5472}
!5499 = !DILocation(line: 488, column: 1, scope: !5422)
!5500 = distinct !DISubprogram(name: "yv12toyuy2_mmxext", scope: !103, file: !103, line: 1162, type: !1614, isLocal: true, isDefinition: true, scopeLine: 1165, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5501 = !DILocalVariable(name: "ysrc", arg: 1, scope: !5500, file: !103, line: 1162, type: !182)
!5502 = !DILocation(line: 1162, column: 53, scope: !5500)
!5503 = !DILocalVariable(name: "usrc", arg: 2, scope: !5500, file: !103, line: 1162, type: !182)
!5504 = !DILocation(line: 1162, column: 74, scope: !5500)
!5505 = !DILocalVariable(name: "vsrc", arg: 3, scope: !5500, file: !103, line: 1162, type: !182)
!5506 = !DILocation(line: 1162, column: 95, scope: !5500)
!5507 = !DILocalVariable(name: "dst", arg: 4, scope: !5500, file: !103, line: 1162, type: !15)
!5508 = !DILocation(line: 1162, column: 110, scope: !5500)
!5509 = !DILocalVariable(name: "width", arg: 5, scope: !5500, file: !103, line: 1163, type: !72)
!5510 = !DILocation(line: 1163, column: 43, scope: !5500)
!5511 = !DILocalVariable(name: "height", arg: 6, scope: !5500, file: !103, line: 1163, type: !72)
!5512 = !DILocation(line: 1163, column: 54, scope: !5500)
!5513 = !DILocalVariable(name: "lumStride", arg: 7, scope: !5500, file: !103, line: 1164, type: !72)
!5514 = !DILocation(line: 1164, column: 43, scope: !5500)
!5515 = !DILocalVariable(name: "chromStride", arg: 8, scope: !5500, file: !103, line: 1164, type: !72)
!5516 = !DILocation(line: 1164, column: 58, scope: !5500)
!5517 = !DILocalVariable(name: "dstStride", arg: 9, scope: !5500, file: !103, line: 1164, type: !72)
!5518 = !DILocation(line: 1164, column: 75, scope: !5500)
!5519 = !DILocation(line: 1167, column: 28, scope: !5500)
!5520 = !DILocation(line: 1167, column: 34, scope: !5500)
!5521 = !DILocation(line: 1167, column: 40, scope: !5500)
!5522 = !DILocation(line: 1167, column: 46, scope: !5500)
!5523 = !DILocation(line: 1167, column: 51, scope: !5500)
!5524 = !DILocation(line: 1167, column: 58, scope: !5500)
!5525 = !DILocation(line: 1167, column: 66, scope: !5500)
!5526 = !DILocation(line: 1167, column: 77, scope: !5500)
!5527 = !DILocation(line: 1167, column: 90, scope: !5500)
!5528 = !DILocation(line: 1167, column: 5, scope: !5500)
!5529 = !DILocation(line: 1168, column: 1, scope: !5500)
!5530 = distinct !DISubprogram(name: "yv12touyvy_mmxext", scope: !103, file: !103, line: 1227, type: !1614, isLocal: true, isDefinition: true, scopeLine: 1230, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5531 = !DILocalVariable(name: "ysrc", arg: 1, scope: !5530, file: !103, line: 1227, type: !182)
!5532 = !DILocation(line: 1227, column: 53, scope: !5530)
!5533 = !DILocalVariable(name: "usrc", arg: 2, scope: !5530, file: !103, line: 1227, type: !182)
!5534 = !DILocation(line: 1227, column: 74, scope: !5530)
!5535 = !DILocalVariable(name: "vsrc", arg: 3, scope: !5530, file: !103, line: 1227, type: !182)
!5536 = !DILocation(line: 1227, column: 95, scope: !5530)
!5537 = !DILocalVariable(name: "dst", arg: 4, scope: !5530, file: !103, line: 1227, type: !15)
!5538 = !DILocation(line: 1227, column: 110, scope: !5530)
!5539 = !DILocalVariable(name: "width", arg: 5, scope: !5530, file: !103, line: 1228, type: !72)
!5540 = !DILocation(line: 1228, column: 43, scope: !5530)
!5541 = !DILocalVariable(name: "height", arg: 6, scope: !5530, file: !103, line: 1228, type: !72)
!5542 = !DILocation(line: 1228, column: 54, scope: !5530)
!5543 = !DILocalVariable(name: "lumStride", arg: 7, scope: !5530, file: !103, line: 1229, type: !72)
!5544 = !DILocation(line: 1229, column: 43, scope: !5530)
!5545 = !DILocalVariable(name: "chromStride", arg: 8, scope: !5530, file: !103, line: 1229, type: !72)
!5546 = !DILocation(line: 1229, column: 58, scope: !5530)
!5547 = !DILocalVariable(name: "dstStride", arg: 9, scope: !5530, file: !103, line: 1229, type: !72)
!5548 = !DILocation(line: 1229, column: 75, scope: !5530)
!5549 = !DILocation(line: 1232, column: 28, scope: !5530)
!5550 = !DILocation(line: 1232, column: 34, scope: !5530)
!5551 = !DILocation(line: 1232, column: 40, scope: !5530)
!5552 = !DILocation(line: 1232, column: 46, scope: !5530)
!5553 = !DILocation(line: 1232, column: 51, scope: !5530)
!5554 = !DILocation(line: 1232, column: 58, scope: !5530)
!5555 = !DILocation(line: 1232, column: 66, scope: !5530)
!5556 = !DILocation(line: 1232, column: 77, scope: !5530)
!5557 = !DILocation(line: 1232, column: 90, scope: !5530)
!5558 = !DILocation(line: 1232, column: 5, scope: !5530)
!5559 = !DILocation(line: 1233, column: 1, scope: !5530)
!5560 = distinct !DISubprogram(name: "yuv422ptoyuy2_mmxext", scope: !103, file: !103, line: 1248, type: !1614, isLocal: true, isDefinition: true, scopeLine: 1251, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5561 = !DILocalVariable(name: "ysrc", arg: 1, scope: !5560, file: !103, line: 1248, type: !182)
!5562 = !DILocation(line: 1248, column: 56, scope: !5560)
!5563 = !DILocalVariable(name: "usrc", arg: 2, scope: !5560, file: !103, line: 1248, type: !182)
!5564 = !DILocation(line: 1248, column: 77, scope: !5560)
!5565 = !DILocalVariable(name: "vsrc", arg: 3, scope: !5560, file: !103, line: 1248, type: !182)
!5566 = !DILocation(line: 1248, column: 98, scope: !5560)
!5567 = !DILocalVariable(name: "dst", arg: 4, scope: !5560, file: !103, line: 1248, type: !15)
!5568 = !DILocation(line: 1248, column: 113, scope: !5560)
!5569 = !DILocalVariable(name: "width", arg: 5, scope: !5560, file: !103, line: 1249, type: !72)
!5570 = !DILocation(line: 1249, column: 46, scope: !5560)
!5571 = !DILocalVariable(name: "height", arg: 6, scope: !5560, file: !103, line: 1249, type: !72)
!5572 = !DILocation(line: 1249, column: 57, scope: !5560)
!5573 = !DILocalVariable(name: "lumStride", arg: 7, scope: !5560, file: !103, line: 1250, type: !72)
!5574 = !DILocation(line: 1250, column: 46, scope: !5560)
!5575 = !DILocalVariable(name: "chromStride", arg: 8, scope: !5560, file: !103, line: 1250, type: !72)
!5576 = !DILocation(line: 1250, column: 61, scope: !5560)
!5577 = !DILocalVariable(name: "dstStride", arg: 9, scope: !5560, file: !103, line: 1250, type: !72)
!5578 = !DILocation(line: 1250, column: 78, scope: !5560)
!5579 = !DILocation(line: 1252, column: 28, scope: !5560)
!5580 = !DILocation(line: 1252, column: 34, scope: !5560)
!5581 = !DILocation(line: 1252, column: 40, scope: !5560)
!5582 = !DILocation(line: 1252, column: 46, scope: !5560)
!5583 = !DILocation(line: 1252, column: 51, scope: !5560)
!5584 = !DILocation(line: 1252, column: 58, scope: !5560)
!5585 = !DILocation(line: 1252, column: 66, scope: !5560)
!5586 = !DILocation(line: 1252, column: 77, scope: !5560)
!5587 = !DILocation(line: 1252, column: 90, scope: !5560)
!5588 = !DILocation(line: 1252, column: 5, scope: !5560)
!5589 = !DILocation(line: 1253, column: 1, scope: !5560)
!5590 = distinct !DISubprogram(name: "yuv422ptouyvy_mmxext", scope: !103, file: !103, line: 1238, type: !1614, isLocal: true, isDefinition: true, scopeLine: 1241, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5591 = !DILocalVariable(name: "ysrc", arg: 1, scope: !5590, file: !103, line: 1238, type: !182)
!5592 = !DILocation(line: 1238, column: 56, scope: !5590)
!5593 = !DILocalVariable(name: "usrc", arg: 2, scope: !5590, file: !103, line: 1238, type: !182)
!5594 = !DILocation(line: 1238, column: 77, scope: !5590)
!5595 = !DILocalVariable(name: "vsrc", arg: 3, scope: !5590, file: !103, line: 1238, type: !182)
!5596 = !DILocation(line: 1238, column: 98, scope: !5590)
!5597 = !DILocalVariable(name: "dst", arg: 4, scope: !5590, file: !103, line: 1238, type: !15)
!5598 = !DILocation(line: 1238, column: 113, scope: !5590)
!5599 = !DILocalVariable(name: "width", arg: 5, scope: !5590, file: !103, line: 1239, type: !72)
!5600 = !DILocation(line: 1239, column: 46, scope: !5590)
!5601 = !DILocalVariable(name: "height", arg: 6, scope: !5590, file: !103, line: 1239, type: !72)
!5602 = !DILocation(line: 1239, column: 57, scope: !5590)
!5603 = !DILocalVariable(name: "lumStride", arg: 7, scope: !5590, file: !103, line: 1240, type: !72)
!5604 = !DILocation(line: 1240, column: 46, scope: !5590)
!5605 = !DILocalVariable(name: "chromStride", arg: 8, scope: !5590, file: !103, line: 1240, type: !72)
!5606 = !DILocation(line: 1240, column: 61, scope: !5590)
!5607 = !DILocalVariable(name: "dstStride", arg: 9, scope: !5590, file: !103, line: 1240, type: !72)
!5608 = !DILocation(line: 1240, column: 78, scope: !5590)
!5609 = !DILocation(line: 1242, column: 28, scope: !5590)
!5610 = !DILocation(line: 1242, column: 34, scope: !5590)
!5611 = !DILocation(line: 1242, column: 40, scope: !5590)
!5612 = !DILocation(line: 1242, column: 46, scope: !5590)
!5613 = !DILocation(line: 1242, column: 51, scope: !5590)
!5614 = !DILocation(line: 1242, column: 58, scope: !5590)
!5615 = !DILocation(line: 1242, column: 66, scope: !5590)
!5616 = !DILocation(line: 1242, column: 77, scope: !5590)
!5617 = !DILocation(line: 1242, column: 90, scope: !5590)
!5618 = !DILocation(line: 1242, column: 5, scope: !5590)
!5619 = !DILocation(line: 1243, column: 1, scope: !5590)
!5620 = distinct !DISubprogram(name: "yuy2toyv12_mmxext", scope: !103, file: !103, line: 1259, type: !1736, isLocal: true, isDefinition: true, scopeLine: 1262, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5621 = !DILocalVariable(name: "src", arg: 1, scope: !5620, file: !103, line: 1259, type: !182)
!5622 = !DILocation(line: 1259, column: 53, scope: !5620)
!5623 = !DILocalVariable(name: "ydst", arg: 2, scope: !5620, file: !103, line: 1259, type: !15)
!5624 = !DILocation(line: 1259, column: 67, scope: !5620)
!5625 = !DILocalVariable(name: "udst", arg: 3, scope: !5620, file: !103, line: 1259, type: !15)
!5626 = !DILocation(line: 1259, column: 82, scope: !5620)
!5627 = !DILocalVariable(name: "vdst", arg: 4, scope: !5620, file: !103, line: 1259, type: !15)
!5628 = !DILocation(line: 1259, column: 97, scope: !5620)
!5629 = !DILocalVariable(name: "width", arg: 5, scope: !5620, file: !103, line: 1260, type: !72)
!5630 = !DILocation(line: 1260, column: 43, scope: !5620)
!5631 = !DILocalVariable(name: "height", arg: 6, scope: !5620, file: !103, line: 1260, type: !72)
!5632 = !DILocation(line: 1260, column: 54, scope: !5620)
!5633 = !DILocalVariable(name: "lumStride", arg: 7, scope: !5620, file: !103, line: 1261, type: !72)
!5634 = !DILocation(line: 1261, column: 43, scope: !5620)
!5635 = !DILocalVariable(name: "chromStride", arg: 8, scope: !5620, file: !103, line: 1261, type: !72)
!5636 = !DILocation(line: 1261, column: 58, scope: !5620)
!5637 = !DILocalVariable(name: "srcStride", arg: 9, scope: !5620, file: !103, line: 1261, type: !72)
!5638 = !DILocation(line: 1261, column: 75, scope: !5620)
!5639 = !DILocalVariable(name: "y", scope: !5620, file: !103, line: 1263, type: !72)
!5640 = !DILocation(line: 1263, column: 9, scope: !5620)
!5641 = !DILocalVariable(name: "chromWidth", scope: !5620, file: !103, line: 1264, type: !1759)
!5642 = !DILocation(line: 1264, column: 19, scope: !5620)
!5643 = !DILocation(line: 1264, column: 31, scope: !5620)
!5644 = !DILocation(line: 1264, column: 36, scope: !5620)
!5645 = !DILocation(line: 1265, column: 11, scope: !5646)
!5646 = distinct !DILexicalBlock(scope: !5620, file: !103, line: 1265, column: 5)
!5647 = !DILocation(line: 1265, column: 10, scope: !5646)
!5648 = !DILocation(line: 1265, column: 15, scope: !5649)
!5649 = !DILexicalBlockFile(scope: !5650, file: !103, discriminator: 1)
!5650 = distinct !DILexicalBlock(scope: !5646, file: !103, line: 1265, column: 5)
!5651 = !DILocation(line: 1265, column: 17, scope: !5649)
!5652 = !DILocation(line: 1265, column: 16, scope: !5649)
!5653 = !DILocation(line: 1265, column: 5, scope: !5649)
!5654 = !DILocation(line: 1314, column: 19, scope: !5655)
!5655 = distinct !DILexicalBlock(scope: !5650, file: !103, line: 1265, column: 31)
!5656 = !DILocation(line: 1314, column: 29, scope: !5655)
!5657 = !DILocation(line: 1314, column: 40, scope: !5655)
!5658 = !DILocation(line: 1314, column: 51, scope: !5655)
!5659 = !DILocation(line: 1314, column: 63, scope: !5655)
!5660 = !DILocation(line: 1266, column: 9, scope: !5655)
!5661 = !{i32 290903, i32 290943, i32 291005, i32 291067, i32 291129, i32 291166, i32 291230, i32 291289, i32 291348, i32 291410, i32 291472, i32 291534, i32 291596, i32 291658, i32 291720, i32 291782, i32 291844, i32 291916, i32 291976, i32 292035, i32 292097, i32 292159, i32 292221, i32 292283, i32 292345, i32 292407, i32 292469, i32 292531, i32 292604, i32 292667, i32 292729, i32 292791, i32 292853, i32 292915, i32 292977, i32 293039, i32 293101, i32 293174, i32 293246, i32 293307, i32 293367, i32 293430}
!5662 = !DILocation(line: 1318, column: 17, scope: !5655)
!5663 = !DILocation(line: 1318, column: 14, scope: !5655)
!5664 = !DILocation(line: 1319, column: 16, scope: !5655)
!5665 = !DILocation(line: 1319, column: 13, scope: !5655)
!5666 = !DILocation(line: 1344, column: 19, scope: !5655)
!5667 = !DILocation(line: 1344, column: 29, scope: !5655)
!5668 = !DILocation(line: 1344, column: 40, scope: !5655)
!5669 = !DILocation(line: 1344, column: 51, scope: !5655)
!5670 = !DILocation(line: 1344, column: 63, scope: !5655)
!5671 = !DILocation(line: 1321, column: 9, scope: !5655)
!5672 = !{i32 293645, i32 293685, i32 293747, i32 293809, i32 293873, i32 293932, i32 293991, i32 294050, i32 294109, i32 294171, i32 294233, i32 294295, i32 294357, i32 294419, i32 294481, i32 294554, i32 294626, i32 294686, i32 294745, i32 294807}
!5673 = !DILocation(line: 1347, column: 17, scope: !5655)
!5674 = !DILocation(line: 1347, column: 14, scope: !5655)
!5675 = !DILocation(line: 1348, column: 17, scope: !5655)
!5676 = !DILocation(line: 1348, column: 14, scope: !5655)
!5677 = !DILocation(line: 1349, column: 17, scope: !5655)
!5678 = !DILocation(line: 1349, column: 14, scope: !5655)
!5679 = !DILocation(line: 1350, column: 16, scope: !5655)
!5680 = !DILocation(line: 1350, column: 13, scope: !5655)
!5681 = !DILocation(line: 1351, column: 5, scope: !5655)
!5682 = !DILocation(line: 1265, column: 26, scope: !5683)
!5683 = !DILexicalBlockFile(scope: !5650, file: !103, discriminator: 2)
!5684 = !DILocation(line: 1265, column: 5, scope: !5683)
!5685 = distinct !{!5685, !5686}
!5686 = !DILocation(line: 1265, column: 5, scope: !5620)
!5687 = !DILocation(line: 1352, column: 5, scope: !5620)
!5688 = !{i32 295068, i32 295084, i32 295125}
!5689 = !DILocation(line: 1355, column: 1, scope: !5620)
!5690 = distinct !DISubprogram(name: "vu9_to_vu12_mmxext", scope: !103, file: !103, line: 1934, type: !1809, isLocal: true, isDefinition: true, scopeLine: 1939, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5691 = !DILocalVariable(name: "src1", arg: 1, scope: !5690, file: !103, line: 1934, type: !182)
!5692 = !DILocation(line: 1934, column: 54, scope: !5690)
!5693 = !DILocalVariable(name: "src2", arg: 2, scope: !5690, file: !103, line: 1934, type: !182)
!5694 = !DILocation(line: 1934, column: 75, scope: !5690)
!5695 = !DILocalVariable(name: "dst1", arg: 3, scope: !5690, file: !103, line: 1935, type: !15)
!5696 = !DILocation(line: 1935, column: 49, scope: !5690)
!5697 = !DILocalVariable(name: "dst2", arg: 4, scope: !5690, file: !103, line: 1935, type: !15)
!5698 = !DILocation(line: 1935, column: 64, scope: !5690)
!5699 = !DILocalVariable(name: "width", arg: 5, scope: !5690, file: !103, line: 1936, type: !72)
!5700 = !DILocation(line: 1936, column: 44, scope: !5690)
!5701 = !DILocalVariable(name: "height", arg: 6, scope: !5690, file: !103, line: 1936, type: !72)
!5702 = !DILocation(line: 1936, column: 55, scope: !5690)
!5703 = !DILocalVariable(name: "srcStride1", arg: 7, scope: !5690, file: !103, line: 1937, type: !72)
!5704 = !DILocation(line: 1937, column: 44, scope: !5690)
!5705 = !DILocalVariable(name: "srcStride2", arg: 8, scope: !5690, file: !103, line: 1937, type: !72)
!5706 = !DILocation(line: 1937, column: 60, scope: !5690)
!5707 = !DILocalVariable(name: "dstStride1", arg: 9, scope: !5690, file: !103, line: 1938, type: !72)
!5708 = !DILocation(line: 1938, column: 44, scope: !5690)
!5709 = !DILocalVariable(name: "dstStride2", arg: 10, scope: !5690, file: !103, line: 1938, type: !72)
!5710 = !DILocation(line: 1938, column: 60, scope: !5690)
!5711 = !DILocalVariable(name: "x", scope: !5690, file: !103, line: 1940, type: !18)
!5712 = !DILocation(line: 1940, column: 13, scope: !5690)
!5713 = !DILocalVariable(name: "y", scope: !5690, file: !103, line: 1940, type: !18)
!5714 = !DILocation(line: 1940, column: 16, scope: !5690)
!5715 = !DILocalVariable(name: "w", scope: !5690, file: !103, line: 1941, type: !72)
!5716 = !DILocation(line: 1941, column: 9, scope: !5690)
!5717 = !DILocalVariable(name: "h", scope: !5690, file: !103, line: 1941, type: !72)
!5718 = !DILocation(line: 1941, column: 11, scope: !5690)
!5719 = !DILocation(line: 1942, column: 7, scope: !5690)
!5720 = !DILocation(line: 1942, column: 12, scope: !5690)
!5721 = !DILocation(line: 1942, column: 6, scope: !5690)
!5722 = !DILocation(line: 1942, column: 18, scope: !5690)
!5723 = !DILocation(line: 1942, column: 24, scope: !5690)
!5724 = !DILocation(line: 1942, column: 17, scope: !5690)
!5725 = !DILocation(line: 1946, column: 17, scope: !5690)
!5726 = !DILocation(line: 1946, column: 22, scope: !5690)
!5727 = !DILocation(line: 1946, column: 21, scope: !5690)
!5728 = !DILocation(line: 1946, column: 41, scope: !5690)
!5729 = !DILocation(line: 1946, column: 46, scope: !5690)
!5730 = !DILocation(line: 1946, column: 45, scope: !5690)
!5731 = !DILocation(line: 1943, column: 5, scope: !5690)
!5732 = !{i32 316791, i32 316814, i32 316849}
!5733 = !DILocation(line: 1947, column: 11, scope: !5734)
!5734 = distinct !DILexicalBlock(scope: !5690, file: !103, line: 1947, column: 5)
!5735 = !DILocation(line: 1947, column: 10, scope: !5734)
!5736 = !DILocation(line: 1947, column: 14, scope: !5737)
!5737 = !DILexicalBlockFile(scope: !5738, file: !103, discriminator: 1)
!5738 = distinct !DILexicalBlock(scope: !5734, file: !103, line: 1947, column: 5)
!5739 = !DILocation(line: 1947, column: 16, scope: !5737)
!5740 = !DILocation(line: 1947, column: 15, scope: !5737)
!5741 = !DILocation(line: 1947, column: 5, scope: !5737)
!5742 = !DILocalVariable(name: "s1", scope: !5743, file: !103, line: 1948, type: !182)
!5743 = distinct !DILexicalBlock(scope: !5738, file: !103, line: 1947, column: 23)
!5744 = !DILocation(line: 1948, column: 24, scope: !5743)
!5745 = !DILocation(line: 1948, column: 27, scope: !5743)
!5746 = !DILocation(line: 1948, column: 32, scope: !5743)
!5747 = !DILocation(line: 1948, column: 44, scope: !5743)
!5748 = !DILocation(line: 1948, column: 45, scope: !5743)
!5749 = !DILocation(line: 1948, column: 42, scope: !5743)
!5750 = !DILocation(line: 1948, column: 31, scope: !5743)
!5751 = !DILocalVariable(name: "d", scope: !5743, file: !103, line: 1949, type: !15)
!5752 = !DILocation(line: 1949, column: 18, scope: !5743)
!5753 = !DILocation(line: 1949, column: 20, scope: !5743)
!5754 = !DILocation(line: 1949, column: 25, scope: !5743)
!5755 = !DILocation(line: 1949, column: 36, scope: !5743)
!5756 = !DILocation(line: 1949, column: 35, scope: !5743)
!5757 = !DILocation(line: 1949, column: 24, scope: !5743)
!5758 = !DILocation(line: 1950, column: 10, scope: !5743)
!5759 = !DILocation(line: 1951, column: 9, scope: !5743)
!5760 = !DILocation(line: 1951, column: 15, scope: !5761)
!5761 = !DILexicalBlockFile(scope: !5762, file: !103, discriminator: 1)
!5762 = distinct !DILexicalBlock(scope: !5763, file: !103, line: 1951, column: 9)
!5763 = distinct !DILexicalBlock(scope: !5743, file: !103, line: 1951, column: 9)
!5764 = !DILocation(line: 1951, column: 17, scope: !5761)
!5765 = !DILocation(line: 1951, column: 18, scope: !5761)
!5766 = !DILocation(line: 1951, column: 16, scope: !5761)
!5767 = !DILocation(line: 1951, column: 9, scope: !5761)
!5768 = !DILocation(line: 1978, column: 24, scope: !5769)
!5769 = distinct !DILexicalBlock(scope: !5762, file: !103, line: 1951, column: 29)
!5770 = !DILocation(line: 1978, column: 32, scope: !5769)
!5771 = !DILocation(line: 1978, column: 41, scope: !5769)
!5772 = !DILocation(line: 1952, column: 13, scope: !5769)
!5773 = !{i32 317123, i32 317159, i32 317210, i32 317261, i32 317312, i32 317363, i32 317409, i32 317455, i32 317501, i32 317547, i32 317593, i32 317639, i32 317685, i32 317731, i32 317777, i32 317823, i32 317869, i32 317915, i32 317970, i32 318025, i32 318080, i32 318135, i32 318190, i32 318245, i32 318300}
!5774 = !DILocation(line: 1980, column: 9, scope: !5769)
!5775 = !DILocation(line: 1951, column: 23, scope: !5776)
!5776 = !DILexicalBlockFile(scope: !5762, file: !103, discriminator: 2)
!5777 = !DILocation(line: 1951, column: 9, scope: !5776)
!5778 = distinct !{!5778, !5759}
!5779 = !DILocation(line: 1981, column: 9, scope: !5743)
!5780 = !DILocation(line: 1981, column: 15, scope: !5781)
!5781 = !DILexicalBlockFile(scope: !5782, file: !103, discriminator: 1)
!5782 = distinct !DILexicalBlock(scope: !5783, file: !103, line: 1981, column: 9)
!5783 = distinct !DILexicalBlock(scope: !5743, file: !103, line: 1981, column: 9)
!5784 = !DILocation(line: 1981, column: 17, scope: !5781)
!5785 = !DILocation(line: 1981, column: 16, scope: !5781)
!5786 = !DILocation(line: 1981, column: 9, scope: !5781)
!5787 = !DILocation(line: 1981, column: 43, scope: !5788)
!5788 = !DILexicalBlockFile(scope: !5782, file: !103, discriminator: 2)
!5789 = !DILocation(line: 1981, column: 40, scope: !5788)
!5790 = !DILocation(line: 1981, column: 35, scope: !5788)
!5791 = !DILocation(line: 1981, column: 34, scope: !5788)
!5792 = !DILocation(line: 1981, column: 36, scope: !5788)
!5793 = !DILocation(line: 1981, column: 31, scope: !5788)
!5794 = !DILocation(line: 1981, column: 39, scope: !5788)
!5795 = !DILocation(line: 1981, column: 28, scope: !5788)
!5796 = !DILocation(line: 1981, column: 27, scope: !5788)
!5797 = !DILocation(line: 1981, column: 24, scope: !5788)
!5798 = !DILocation(line: 1981, column: 30, scope: !5788)
!5799 = !DILocation(line: 1981, column: 20, scope: !5800)
!5800 = !DILexicalBlockFile(scope: !5782, file: !103, discriminator: 3)
!5801 = !DILocation(line: 1981, column: 9, scope: !5800)
!5802 = distinct !{!5802, !5779}
!5803 = !DILocation(line: 1982, column: 5, scope: !5743)
!5804 = !DILocation(line: 1947, column: 19, scope: !5805)
!5805 = !DILexicalBlockFile(scope: !5738, file: !103, discriminator: 2)
!5806 = !DILocation(line: 1947, column: 5, scope: !5805)
!5807 = distinct !{!5807, !5808}
!5808 = !DILocation(line: 1947, column: 5, scope: !5690)
!5809 = !DILocation(line: 1983, column: 11, scope: !5810)
!5810 = distinct !DILexicalBlock(scope: !5690, file: !103, line: 1983, column: 5)
!5811 = !DILocation(line: 1983, column: 10, scope: !5810)
!5812 = !DILocation(line: 1983, column: 14, scope: !5813)
!5813 = !DILexicalBlockFile(scope: !5814, file: !103, discriminator: 1)
!5814 = distinct !DILexicalBlock(scope: !5810, file: !103, line: 1983, column: 5)
!5815 = !DILocation(line: 1983, column: 16, scope: !5813)
!5816 = !DILocation(line: 1983, column: 15, scope: !5813)
!5817 = !DILocation(line: 1983, column: 5, scope: !5813)
!5818 = !DILocalVariable(name: "s2", scope: !5819, file: !103, line: 1984, type: !182)
!5819 = distinct !DILexicalBlock(scope: !5814, file: !103, line: 1983, column: 23)
!5820 = !DILocation(line: 1984, column: 24, scope: !5819)
!5821 = !DILocation(line: 1984, column: 27, scope: !5819)
!5822 = !DILocation(line: 1984, column: 32, scope: !5819)
!5823 = !DILocation(line: 1984, column: 44, scope: !5819)
!5824 = !DILocation(line: 1984, column: 45, scope: !5819)
!5825 = !DILocation(line: 1984, column: 42, scope: !5819)
!5826 = !DILocation(line: 1984, column: 31, scope: !5819)
!5827 = !DILocalVariable(name: "d", scope: !5819, file: !103, line: 1985, type: !15)
!5828 = !DILocation(line: 1985, column: 18, scope: !5819)
!5829 = !DILocation(line: 1985, column: 20, scope: !5819)
!5830 = !DILocation(line: 1985, column: 25, scope: !5819)
!5831 = !DILocation(line: 1985, column: 36, scope: !5819)
!5832 = !DILocation(line: 1985, column: 35, scope: !5819)
!5833 = !DILocation(line: 1985, column: 24, scope: !5819)
!5834 = !DILocation(line: 1986, column: 10, scope: !5819)
!5835 = !DILocation(line: 1987, column: 9, scope: !5819)
!5836 = !DILocation(line: 1987, column: 15, scope: !5837)
!5837 = !DILexicalBlockFile(scope: !5838, file: !103, discriminator: 1)
!5838 = distinct !DILexicalBlock(scope: !5839, file: !103, line: 1987, column: 9)
!5839 = distinct !DILexicalBlock(scope: !5819, file: !103, line: 1987, column: 9)
!5840 = !DILocation(line: 1987, column: 17, scope: !5837)
!5841 = !DILocation(line: 1987, column: 18, scope: !5837)
!5842 = !DILocation(line: 1987, column: 16, scope: !5837)
!5843 = !DILocation(line: 1987, column: 9, scope: !5837)
!5844 = !DILocation(line: 2014, column: 24, scope: !5845)
!5845 = distinct !DILexicalBlock(scope: !5838, file: !103, line: 1987, column: 29)
!5846 = !DILocation(line: 2014, column: 32, scope: !5845)
!5847 = !DILocation(line: 2014, column: 41, scope: !5845)
!5848 = !DILocation(line: 1988, column: 13, scope: !5845)
!5849 = !{i32 318687, i32 318723, i32 318774, i32 318825, i32 318876, i32 318927, i32 318973, i32 319019, i32 319065, i32 319111, i32 319157, i32 319203, i32 319249, i32 319295, i32 319341, i32 319387, i32 319433, i32 319479, i32 319534, i32 319589, i32 319644, i32 319699, i32 319754, i32 319809, i32 319864}
!5850 = !DILocation(line: 2016, column: 9, scope: !5845)
!5851 = !DILocation(line: 1987, column: 23, scope: !5852)
!5852 = !DILexicalBlockFile(scope: !5838, file: !103, discriminator: 2)
!5853 = !DILocation(line: 1987, column: 9, scope: !5852)
!5854 = distinct !{!5854, !5835}
!5855 = !DILocation(line: 2017, column: 9, scope: !5819)
!5856 = !DILocation(line: 2017, column: 15, scope: !5857)
!5857 = !DILexicalBlockFile(scope: !5858, file: !103, discriminator: 1)
!5858 = distinct !DILexicalBlock(scope: !5859, file: !103, line: 2017, column: 9)
!5859 = distinct !DILexicalBlock(scope: !5819, file: !103, line: 2017, column: 9)
!5860 = !DILocation(line: 2017, column: 17, scope: !5857)
!5861 = !DILocation(line: 2017, column: 16, scope: !5857)
!5862 = !DILocation(line: 2017, column: 9, scope: !5857)
!5863 = !DILocation(line: 2017, column: 43, scope: !5864)
!5864 = !DILexicalBlockFile(scope: !5858, file: !103, discriminator: 2)
!5865 = !DILocation(line: 2017, column: 40, scope: !5864)
!5866 = !DILocation(line: 2017, column: 35, scope: !5864)
!5867 = !DILocation(line: 2017, column: 34, scope: !5864)
!5868 = !DILocation(line: 2017, column: 36, scope: !5864)
!5869 = !DILocation(line: 2017, column: 31, scope: !5864)
!5870 = !DILocation(line: 2017, column: 39, scope: !5864)
!5871 = !DILocation(line: 2017, column: 28, scope: !5864)
!5872 = !DILocation(line: 2017, column: 27, scope: !5864)
!5873 = !DILocation(line: 2017, column: 24, scope: !5864)
!5874 = !DILocation(line: 2017, column: 30, scope: !5864)
!5875 = !DILocation(line: 2017, column: 20, scope: !5876)
!5876 = !DILexicalBlockFile(scope: !5858, file: !103, discriminator: 3)
!5877 = !DILocation(line: 2017, column: 9, scope: !5876)
!5878 = distinct !{!5878, !5855}
!5879 = !DILocation(line: 2018, column: 5, scope: !5819)
!5880 = !DILocation(line: 1983, column: 19, scope: !5881)
!5881 = !DILexicalBlockFile(scope: !5814, file: !103, discriminator: 2)
!5882 = !DILocation(line: 1983, column: 5, scope: !5881)
!5883 = distinct !{!5883, !5884}
!5884 = !DILocation(line: 1983, column: 5, scope: !5690)
!5885 = !DILocation(line: 2019, column: 5, scope: !5690)
!5886 = !{i32 320075, i32 320091, i32 320123}
!5887 = !DILocation(line: 2024, column: 1, scope: !5690)
!5888 = distinct !DISubprogram(name: "yvu9_to_yuy2_mmxext", scope: !103, file: !103, line: 2026, type: !2009, isLocal: true, isDefinition: true, scopeLine: 2031, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5889 = !DILocalVariable(name: "src1", arg: 1, scope: !5888, file: !103, line: 2026, type: !182)
!5890 = !DILocation(line: 2026, column: 55, scope: !5888)
!5891 = !DILocalVariable(name: "src2", arg: 2, scope: !5888, file: !103, line: 2026, type: !182)
!5892 = !DILocation(line: 2026, column: 76, scope: !5888)
!5893 = !DILocalVariable(name: "src3", arg: 3, scope: !5888, file: !103, line: 2026, type: !182)
!5894 = !DILocation(line: 2026, column: 97, scope: !5888)
!5895 = !DILocalVariable(name: "dst", arg: 4, scope: !5888, file: !103, line: 2027, type: !15)
!5896 = !DILocation(line: 2027, column: 50, scope: !5888)
!5897 = !DILocalVariable(name: "width", arg: 5, scope: !5888, file: !103, line: 2028, type: !72)
!5898 = !DILocation(line: 2028, column: 45, scope: !5888)
!5899 = !DILocalVariable(name: "height", arg: 6, scope: !5888, file: !103, line: 2028, type: !72)
!5900 = !DILocation(line: 2028, column: 56, scope: !5888)
!5901 = !DILocalVariable(name: "srcStride1", arg: 7, scope: !5888, file: !103, line: 2029, type: !72)
!5902 = !DILocation(line: 2029, column: 45, scope: !5888)
!5903 = !DILocalVariable(name: "srcStride2", arg: 8, scope: !5888, file: !103, line: 2029, type: !72)
!5904 = !DILocation(line: 2029, column: 61, scope: !5888)
!5905 = !DILocalVariable(name: "srcStride3", arg: 9, scope: !5888, file: !103, line: 2030, type: !72)
!5906 = !DILocation(line: 2030, column: 45, scope: !5888)
!5907 = !DILocalVariable(name: "dstStride", arg: 10, scope: !5888, file: !103, line: 2030, type: !72)
!5908 = !DILocation(line: 2030, column: 61, scope: !5888)
!5909 = !DILocalVariable(name: "x", scope: !5888, file: !103, line: 2032, type: !18)
!5910 = !DILocation(line: 2032, column: 13, scope: !5888)
!5911 = !DILocalVariable(name: "y", scope: !5888, file: !103, line: 2033, type: !72)
!5912 = !DILocation(line: 2033, column: 9, scope: !5888)
!5913 = !DILocalVariable(name: "w", scope: !5888, file: !103, line: 2033, type: !72)
!5914 = !DILocation(line: 2033, column: 11, scope: !5888)
!5915 = !DILocalVariable(name: "h", scope: !5888, file: !103, line: 2033, type: !72)
!5916 = !DILocation(line: 2033, column: 13, scope: !5888)
!5917 = !DILocation(line: 2034, column: 7, scope: !5888)
!5918 = !DILocation(line: 2034, column: 12, scope: !5888)
!5919 = !DILocation(line: 2034, column: 6, scope: !5888)
!5920 = !DILocation(line: 2034, column: 18, scope: !5888)
!5921 = !DILocation(line: 2034, column: 17, scope: !5888)
!5922 = !DILocation(line: 2035, column: 11, scope: !5923)
!5923 = distinct !DILexicalBlock(scope: !5888, file: !103, line: 2035, column: 5)
!5924 = !DILocation(line: 2035, column: 10, scope: !5923)
!5925 = !DILocation(line: 2035, column: 14, scope: !5926)
!5926 = !DILexicalBlockFile(scope: !5927, file: !103, discriminator: 1)
!5927 = distinct !DILexicalBlock(scope: !5923, file: !103, line: 2035, column: 5)
!5928 = !DILocation(line: 2035, column: 16, scope: !5926)
!5929 = !DILocation(line: 2035, column: 15, scope: !5926)
!5930 = !DILocation(line: 2035, column: 5, scope: !5926)
!5931 = !DILocalVariable(name: "yp", scope: !5932, file: !103, line: 2036, type: !182)
!5932 = distinct !DILexicalBlock(scope: !5927, file: !103, line: 2035, column: 23)
!5933 = !DILocation(line: 2036, column: 24, scope: !5932)
!5934 = !DILocation(line: 2036, column: 27, scope: !5932)
!5935 = !DILocation(line: 2036, column: 32, scope: !5932)
!5936 = !DILocation(line: 2036, column: 43, scope: !5932)
!5937 = !DILocation(line: 2036, column: 42, scope: !5932)
!5938 = !DILocation(line: 2036, column: 31, scope: !5932)
!5939 = !DILocalVariable(name: "up", scope: !5932, file: !103, line: 2037, type: !182)
!5940 = !DILocation(line: 2037, column: 24, scope: !5932)
!5941 = !DILocation(line: 2037, column: 27, scope: !5932)
!5942 = !DILocation(line: 2037, column: 32, scope: !5932)
!5943 = !DILocation(line: 2037, column: 44, scope: !5932)
!5944 = !DILocation(line: 2037, column: 45, scope: !5932)
!5945 = !DILocation(line: 2037, column: 42, scope: !5932)
!5946 = !DILocation(line: 2037, column: 31, scope: !5932)
!5947 = !DILocalVariable(name: "vp", scope: !5932, file: !103, line: 2038, type: !182)
!5948 = !DILocation(line: 2038, column: 24, scope: !5932)
!5949 = !DILocation(line: 2038, column: 27, scope: !5932)
!5950 = !DILocation(line: 2038, column: 32, scope: !5932)
!5951 = !DILocation(line: 2038, column: 44, scope: !5932)
!5952 = !DILocation(line: 2038, column: 45, scope: !5932)
!5953 = !DILocation(line: 2038, column: 42, scope: !5932)
!5954 = !DILocation(line: 2038, column: 31, scope: !5932)
!5955 = !DILocalVariable(name: "d", scope: !5932, file: !103, line: 2039, type: !15)
!5956 = !DILocation(line: 2039, column: 18, scope: !5932)
!5957 = !DILocation(line: 2039, column: 20, scope: !5932)
!5958 = !DILocation(line: 2039, column: 24, scope: !5932)
!5959 = !DILocation(line: 2039, column: 34, scope: !5932)
!5960 = !DILocation(line: 2039, column: 33, scope: !5932)
!5961 = !DILocation(line: 2039, column: 23, scope: !5932)
!5962 = !DILocation(line: 2040, column: 10, scope: !5932)
!5963 = !DILocation(line: 2041, column: 9, scope: !5932)
!5964 = !DILocation(line: 2041, column: 15, scope: !5965)
!5965 = !DILexicalBlockFile(scope: !5966, file: !103, discriminator: 1)
!5966 = distinct !DILexicalBlock(scope: !5967, file: !103, line: 2041, column: 9)
!5967 = distinct !DILexicalBlock(scope: !5932, file: !103, line: 2041, column: 9)
!5968 = !DILocation(line: 2041, column: 17, scope: !5965)
!5969 = !DILocation(line: 2041, column: 18, scope: !5965)
!5970 = !DILocation(line: 2041, column: 16, scope: !5965)
!5971 = !DILocation(line: 2041, column: 9, scope: !5965)
!5972 = !DILocation(line: 2042, column: 13, scope: !5973)
!5973 = distinct !DILexicalBlock(scope: !5966, file: !103, line: 2041, column: 27)
!5974 = !DILocation(line: 2090, column: 23, scope: !5973)
!5975 = !DILocation(line: 2090, column: 33, scope: !5973)
!5976 = !DILocation(line: 2090, column: 42, scope: !5973)
!5977 = !DILocation(line: 2090, column: 51, scope: !5973)
!5978 = !{i32 320877, i32 320916, i32 320975, i32 321034, i32 321088, i32 321142, i32 321196, i32 321250, i32 321304, i32 321358, i32 321412, i32 321466, i32 321520, i32 321574, i32 321629, i32 321683, i32 321737, i32 321791, i32 321855, i32 321919, i32 321974, i32 322028, i32 322082, i32 322136, i32 322190, i32 322254, i32 322318, i32 322373, i32 322427, i32 322481, i32 322535, i32 322589, i32 322643, i32 322707, i32 322771, i32 322826, i32 322880, i32 322934, i32 322988, i32 323042, i32 323106, i32 323170}
!5979 = !DILocation(line: 2092, column: 9, scope: !5973)
!5980 = !DILocation(line: 2041, column: 22, scope: !5981)
!5981 = !DILexicalBlockFile(scope: !5966, file: !103, discriminator: 2)
!5982 = !DILocation(line: 2041, column: 9, scope: !5981)
!5983 = distinct !{!5983, !5963}
!5984 = !DILocation(line: 2093, column: 9, scope: !5932)
!5985 = !DILocation(line: 2093, column: 16, scope: !5986)
!5986 = !DILexicalBlockFile(scope: !5987, file: !103, discriminator: 1)
!5987 = distinct !DILexicalBlock(scope: !5988, file: !103, line: 2093, column: 9)
!5988 = distinct !DILexicalBlock(scope: !5932, file: !103, line: 2093, column: 9)
!5989 = !DILocation(line: 2093, column: 18, scope: !5986)
!5990 = !DILocation(line: 2093, column: 17, scope: !5986)
!5991 = !DILocation(line: 2093, column: 9, scope: !5986)
!5992 = !DILocalVariable(name: "x2", scope: !5993, file: !103, line: 2094, type: !826)
!5993 = distinct !DILexicalBlock(scope: !5987, file: !103, line: 2093, column: 26)
!5994 = !DILocation(line: 2094, column: 23, scope: !5993)
!5995 = !DILocation(line: 2094, column: 28, scope: !5993)
!5996 = !DILocation(line: 2094, column: 29, scope: !5993)
!5997 = !DILocation(line: 2095, column: 27, scope: !5993)
!5998 = !DILocation(line: 2095, column: 24, scope: !5993)
!5999 = !DILocation(line: 2095, column: 17, scope: !5993)
!6000 = !DILocation(line: 2095, column: 16, scope: !5993)
!6001 = !DILocation(line: 2095, column: 18, scope: !5993)
!6002 = !DILocation(line: 2095, column: 13, scope: !5993)
!6003 = !DILocation(line: 2095, column: 22, scope: !5993)
!6004 = !DILocation(line: 2096, column: 27, scope: !5993)
!6005 = !DILocation(line: 2096, column: 24, scope: !5993)
!6006 = !DILocation(line: 2096, column: 17, scope: !5993)
!6007 = !DILocation(line: 2096, column: 16, scope: !5993)
!6008 = !DILocation(line: 2096, column: 18, scope: !5993)
!6009 = !DILocation(line: 2096, column: 13, scope: !5993)
!6010 = !DILocation(line: 2096, column: 22, scope: !5993)
!6011 = !DILocation(line: 2097, column: 27, scope: !5993)
!6012 = !DILocation(line: 2097, column: 29, scope: !5993)
!6013 = !DILocation(line: 2097, column: 24, scope: !5993)
!6014 = !DILocation(line: 2097, column: 17, scope: !5993)
!6015 = !DILocation(line: 2097, column: 16, scope: !5993)
!6016 = !DILocation(line: 2097, column: 18, scope: !5993)
!6017 = !DILocation(line: 2097, column: 13, scope: !5993)
!6018 = !DILocation(line: 2097, column: 22, scope: !5993)
!6019 = !DILocation(line: 2098, column: 27, scope: !5993)
!6020 = !DILocation(line: 2098, column: 24, scope: !5993)
!6021 = !DILocation(line: 2098, column: 17, scope: !5993)
!6022 = !DILocation(line: 2098, column: 16, scope: !5993)
!6023 = !DILocation(line: 2098, column: 18, scope: !5993)
!6024 = !DILocation(line: 2098, column: 13, scope: !5993)
!6025 = !DILocation(line: 2098, column: 22, scope: !5993)
!6026 = !DILocation(line: 2099, column: 27, scope: !5993)
!6027 = !DILocation(line: 2099, column: 29, scope: !5993)
!6028 = !DILocation(line: 2099, column: 24, scope: !5993)
!6029 = !DILocation(line: 2099, column: 17, scope: !5993)
!6030 = !DILocation(line: 2099, column: 16, scope: !5993)
!6031 = !DILocation(line: 2099, column: 18, scope: !5993)
!6032 = !DILocation(line: 2099, column: 13, scope: !5993)
!6033 = !DILocation(line: 2099, column: 22, scope: !5993)
!6034 = !DILocation(line: 2100, column: 27, scope: !5993)
!6035 = !DILocation(line: 2100, column: 24, scope: !5993)
!6036 = !DILocation(line: 2100, column: 17, scope: !5993)
!6037 = !DILocation(line: 2100, column: 16, scope: !5993)
!6038 = !DILocation(line: 2100, column: 18, scope: !5993)
!6039 = !DILocation(line: 2100, column: 13, scope: !5993)
!6040 = !DILocation(line: 2100, column: 22, scope: !5993)
!6041 = !DILocation(line: 2101, column: 27, scope: !5993)
!6042 = !DILocation(line: 2101, column: 29, scope: !5993)
!6043 = !DILocation(line: 2101, column: 24, scope: !5993)
!6044 = !DILocation(line: 2101, column: 17, scope: !5993)
!6045 = !DILocation(line: 2101, column: 16, scope: !5993)
!6046 = !DILocation(line: 2101, column: 18, scope: !5993)
!6047 = !DILocation(line: 2101, column: 13, scope: !5993)
!6048 = !DILocation(line: 2101, column: 22, scope: !5993)
!6049 = !DILocation(line: 2102, column: 27, scope: !5993)
!6050 = !DILocation(line: 2102, column: 24, scope: !5993)
!6051 = !DILocation(line: 2102, column: 17, scope: !5993)
!6052 = !DILocation(line: 2102, column: 16, scope: !5993)
!6053 = !DILocation(line: 2102, column: 18, scope: !5993)
!6054 = !DILocation(line: 2102, column: 13, scope: !5993)
!6055 = !DILocation(line: 2102, column: 22, scope: !5993)
!6056 = !DILocation(line: 2103, column: 9, scope: !5993)
!6057 = !DILocation(line: 2093, column: 22, scope: !6058)
!6058 = !DILexicalBlockFile(scope: !5987, file: !103, discriminator: 2)
!6059 = !DILocation(line: 2093, column: 9, scope: !6058)
!6060 = distinct !{!6060, !5984}
!6061 = !DILocation(line: 2104, column: 5, scope: !5932)
!6062 = !DILocation(line: 2035, column: 19, scope: !6063)
!6063 = !DILexicalBlockFile(scope: !5927, file: !103, discriminator: 2)
!6064 = !DILocation(line: 2035, column: 5, scope: !6063)
!6065 = distinct !{!6065, !6066}
!6066 = !DILocation(line: 2035, column: 5, scope: !5888)
!6067 = !DILocation(line: 2105, column: 5, scope: !5888)
!6068 = !{i32 323644, i32 323660, i32 323692}
!6069 = !DILocation(line: 2110, column: 1, scope: !5888)
!6070 = distinct !DISubprogram(name: "uyvytoyuv422_mmxext", scope: !103, file: !103, line: 2469, type: !2193, isLocal: true, isDefinition: true, scopeLine: 2472, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!6071 = !DILocalVariable(name: "ydst", arg: 1, scope: !6070, file: !103, line: 2469, type: !15)
!6072 = !DILocation(line: 2469, column: 42, scope: !6070)
!6073 = !DILocalVariable(name: "udst", arg: 2, scope: !6070, file: !103, line: 2469, type: !15)
!6074 = !DILocation(line: 2469, column: 57, scope: !6070)
!6075 = !DILocalVariable(name: "vdst", arg: 3, scope: !6070, file: !103, line: 2469, type: !15)
!6076 = !DILocation(line: 2469, column: 72, scope: !6070)
!6077 = !DILocalVariable(name: "src", arg: 4, scope: !6070, file: !103, line: 2469, type: !182)
!6078 = !DILocation(line: 2469, column: 93, scope: !6070)
!6079 = !DILocalVariable(name: "width", arg: 5, scope: !6070, file: !103, line: 2470, type: !72)
!6080 = !DILocation(line: 2470, column: 38, scope: !6070)
!6081 = !DILocalVariable(name: "height", arg: 6, scope: !6070, file: !103, line: 2470, type: !72)
!6082 = !DILocation(line: 2470, column: 49, scope: !6070)
!6083 = !DILocalVariable(name: "lumStride", arg: 7, scope: !6070, file: !103, line: 2471, type: !72)
!6084 = !DILocation(line: 2471, column: 38, scope: !6070)
!6085 = !DILocalVariable(name: "chromStride", arg: 8, scope: !6070, file: !103, line: 2471, type: !72)
!6086 = !DILocation(line: 2471, column: 53, scope: !6070)
!6087 = !DILocalVariable(name: "srcStride", arg: 9, scope: !6070, file: !103, line: 2471, type: !72)
!6088 = !DILocation(line: 2471, column: 70, scope: !6070)
!6089 = !DILocalVariable(name: "y", scope: !6070, file: !103, line: 2473, type: !72)
!6090 = !DILocation(line: 2473, column: 9, scope: !6070)
!6091 = !DILocalVariable(name: "chromWidth", scope: !6070, file: !103, line: 2474, type: !826)
!6092 = !DILocation(line: 2474, column: 15, scope: !6070)
!6093 = !DILocation(line: 2474, column: 81, scope: !6070)
!6094 = !DILocation(line: 2474, column: 88, scope: !6070)
!6095 = !DILocation(line: 2474, column: 99, scope: !6070)
!6096 = !DILocation(line: 2474, column: 104, scope: !6070)
!6097 = !DILocation(line: 2476, column: 11, scope: !6098)
!6098 = distinct !DILexicalBlock(scope: !6070, file: !103, line: 2476, column: 5)
!6099 = !DILocation(line: 2476, column: 10, scope: !6098)
!6100 = !DILocation(line: 2476, column: 15, scope: !6101)
!6101 = !DILexicalBlockFile(scope: !6102, file: !103, discriminator: 1)
!6102 = distinct !DILexicalBlock(scope: !6098, file: !103, line: 2476, column: 5)
!6103 = !DILocation(line: 2476, column: 17, scope: !6101)
!6104 = !DILocation(line: 2476, column: 16, scope: !6101)
!6105 = !DILocation(line: 2476, column: 5, scope: !6101)
!6106 = !DILocation(line: 2477, column: 28, scope: !6107)
!6107 = distinct !DILexicalBlock(scope: !6102, file: !103, line: 2476, column: 30)
!6108 = !DILocation(line: 2477, column: 33, scope: !6107)
!6109 = !DILocation(line: 2477, column: 39, scope: !6107)
!6110 = !DILocation(line: 2477, column: 9, scope: !6107)
!6111 = !DILocation(line: 2478, column: 30, scope: !6107)
!6112 = !DILocation(line: 2478, column: 35, scope: !6107)
!6113 = !DILocation(line: 2478, column: 41, scope: !6107)
!6114 = !DILocation(line: 2478, column: 47, scope: !6107)
!6115 = !DILocation(line: 2478, column: 9, scope: !6107)
!6116 = !DILocation(line: 2480, column: 16, scope: !6107)
!6117 = !DILocation(line: 2480, column: 13, scope: !6107)
!6118 = !DILocation(line: 2481, column: 16, scope: !6107)
!6119 = !DILocation(line: 2481, column: 13, scope: !6107)
!6120 = !DILocation(line: 2482, column: 16, scope: !6107)
!6121 = !DILocation(line: 2482, column: 13, scope: !6107)
!6122 = !DILocation(line: 2483, column: 16, scope: !6107)
!6123 = !DILocation(line: 2483, column: 13, scope: !6107)
!6124 = !DILocation(line: 2484, column: 5, scope: !6107)
!6125 = !DILocation(line: 2476, column: 26, scope: !6126)
!6126 = !DILexicalBlockFile(scope: !6102, file: !103, discriminator: 2)
!6127 = !DILocation(line: 2476, column: 5, scope: !6126)
!6128 = distinct !{!6128, !6129}
!6129 = !DILocation(line: 2476, column: 5, scope: !6070)
!6130 = !DILocation(line: 2485, column: 5, scope: !6070)
!6131 = !{i32 337221, i32 337237, i32 337269}
!6132 = !DILocation(line: 2490, column: 1, scope: !6070)
!6133 = distinct !DISubprogram(name: "yuyvtoyuv422_mmxext", scope: !103, file: !103, line: 2419, type: !2193, isLocal: true, isDefinition: true, scopeLine: 2422, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!6134 = !DILocalVariable(name: "ydst", arg: 1, scope: !6133, file: !103, line: 2419, type: !15)
!6135 = !DILocation(line: 2419, column: 42, scope: !6133)
!6136 = !DILocalVariable(name: "udst", arg: 2, scope: !6133, file: !103, line: 2419, type: !15)
!6137 = !DILocation(line: 2419, column: 57, scope: !6133)
!6138 = !DILocalVariable(name: "vdst", arg: 3, scope: !6133, file: !103, line: 2419, type: !15)
!6139 = !DILocation(line: 2419, column: 72, scope: !6133)
!6140 = !DILocalVariable(name: "src", arg: 4, scope: !6133, file: !103, line: 2419, type: !182)
!6141 = !DILocation(line: 2419, column: 93, scope: !6133)
!6142 = !DILocalVariable(name: "width", arg: 5, scope: !6133, file: !103, line: 2420, type: !72)
!6143 = !DILocation(line: 2420, column: 38, scope: !6133)
!6144 = !DILocalVariable(name: "height", arg: 6, scope: !6133, file: !103, line: 2420, type: !72)
!6145 = !DILocation(line: 2420, column: 49, scope: !6133)
!6146 = !DILocalVariable(name: "lumStride", arg: 7, scope: !6133, file: !103, line: 2421, type: !72)
!6147 = !DILocation(line: 2421, column: 38, scope: !6133)
!6148 = !DILocalVariable(name: "chromStride", arg: 8, scope: !6133, file: !103, line: 2421, type: !72)
!6149 = !DILocation(line: 2421, column: 53, scope: !6133)
!6150 = !DILocalVariable(name: "srcStride", arg: 9, scope: !6133, file: !103, line: 2421, type: !72)
!6151 = !DILocation(line: 2421, column: 70, scope: !6133)
!6152 = !DILocalVariable(name: "y", scope: !6133, file: !103, line: 2423, type: !72)
!6153 = !DILocation(line: 2423, column: 9, scope: !6133)
!6154 = !DILocalVariable(name: "chromWidth", scope: !6133, file: !103, line: 2424, type: !826)
!6155 = !DILocation(line: 2424, column: 15, scope: !6133)
!6156 = !DILocation(line: 2424, column: 81, scope: !6133)
!6157 = !DILocation(line: 2424, column: 88, scope: !6133)
!6158 = !DILocation(line: 2424, column: 99, scope: !6133)
!6159 = !DILocation(line: 2424, column: 104, scope: !6133)
!6160 = !DILocation(line: 2426, column: 11, scope: !6161)
!6161 = distinct !DILexicalBlock(scope: !6133, file: !103, line: 2426, column: 5)
!6162 = !DILocation(line: 2426, column: 10, scope: !6161)
!6163 = !DILocation(line: 2426, column: 15, scope: !6164)
!6164 = !DILexicalBlockFile(scope: !6165, file: !103, discriminator: 1)
!6165 = distinct !DILexicalBlock(scope: !6161, file: !103, line: 2426, column: 5)
!6166 = !DILocation(line: 2426, column: 17, scope: !6164)
!6167 = !DILocation(line: 2426, column: 16, scope: !6164)
!6168 = !DILocation(line: 2426, column: 5, scope: !6164)
!6169 = !DILocation(line: 2427, column: 29, scope: !6170)
!6170 = distinct !DILexicalBlock(scope: !6165, file: !103, line: 2426, column: 30)
!6171 = !DILocation(line: 2427, column: 34, scope: !6170)
!6172 = !DILocation(line: 2427, column: 40, scope: !6170)
!6173 = !DILocation(line: 2427, column: 9, scope: !6170)
!6174 = !DILocation(line: 2428, column: 29, scope: !6170)
!6175 = !DILocation(line: 2428, column: 34, scope: !6170)
!6176 = !DILocation(line: 2428, column: 40, scope: !6170)
!6177 = !DILocation(line: 2428, column: 46, scope: !6170)
!6178 = !DILocation(line: 2428, column: 9, scope: !6170)
!6179 = !DILocation(line: 2430, column: 16, scope: !6170)
!6180 = !DILocation(line: 2430, column: 13, scope: !6170)
!6181 = !DILocation(line: 2431, column: 16, scope: !6170)
!6182 = !DILocation(line: 2431, column: 13, scope: !6170)
!6183 = !DILocation(line: 2432, column: 16, scope: !6170)
!6184 = !DILocation(line: 2432, column: 13, scope: !6170)
!6185 = !DILocation(line: 2433, column: 16, scope: !6170)
!6186 = !DILocation(line: 2433, column: 13, scope: !6170)
!6187 = !DILocation(line: 2434, column: 5, scope: !6170)
!6188 = !DILocation(line: 2426, column: 26, scope: !6189)
!6189 = !DILexicalBlockFile(scope: !6165, file: !103, discriminator: 2)
!6190 = !DILocation(line: 2426, column: 5, scope: !6189)
!6191 = distinct !{!6191, !6192}
!6192 = !DILocation(line: 2426, column: 5, scope: !6133)
!6193 = !DILocation(line: 2435, column: 5, scope: !6133)
!6194 = !{i32 335709, i32 335725, i32 335757}
!6195 = !DILocation(line: 2440, column: 1, scope: !6133)
!6196 = distinct !DISubprogram(name: "planar2x_mmxext", scope: !103, file: !103, line: 1359, type: !3197, isLocal: true, isDefinition: true, scopeLine: 1360, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!6197 = !DILocalVariable(name: "src", arg: 1, scope: !6196, file: !103, line: 1359, type: !182)
!6198 = !DILocation(line: 1359, column: 51, scope: !6196)
!6199 = !DILocalVariable(name: "dst", arg: 2, scope: !6196, file: !103, line: 1359, type: !15)
!6200 = !DILocation(line: 1359, column: 65, scope: !6196)
!6201 = !DILocalVariable(name: "srcWidth", arg: 3, scope: !6196, file: !103, line: 1359, type: !72)
!6202 = !DILocation(line: 1359, column: 74, scope: !6196)
!6203 = !DILocalVariable(name: "srcHeight", arg: 4, scope: !6196, file: !103, line: 1359, type: !72)
!6204 = !DILocation(line: 1359, column: 88, scope: !6196)
!6205 = !DILocalVariable(name: "srcStride", arg: 5, scope: !6196, file: !103, line: 1359, type: !72)
!6206 = !DILocation(line: 1359, column: 103, scope: !6196)
!6207 = !DILocalVariable(name: "dstStride", arg: 6, scope: !6196, file: !103, line: 1359, type: !72)
!6208 = !DILocation(line: 1359, column: 118, scope: !6196)
!6209 = !DILocalVariable(name: "x", scope: !6196, file: !103, line: 1361, type: !72)
!6210 = !DILocation(line: 1361, column: 9, scope: !6196)
!6211 = !DILocalVariable(name: "y", scope: !6196, file: !103, line: 1361, type: !72)
!6212 = !DILocation(line: 1361, column: 11, scope: !6196)
!6213 = !DILocation(line: 1363, column: 13, scope: !6196)
!6214 = !DILocation(line: 1363, column: 5, scope: !6196)
!6215 = !DILocation(line: 1363, column: 11, scope: !6196)
!6216 = !DILocation(line: 1366, column: 11, scope: !6217)
!6217 = distinct !DILexicalBlock(scope: !6196, file: !103, line: 1366, column: 5)
!6218 = !DILocation(line: 1366, column: 10, scope: !6217)
!6219 = !DILocation(line: 1366, column: 15, scope: !6220)
!6220 = !DILexicalBlockFile(scope: !6221, file: !103, discriminator: 1)
!6221 = distinct !DILexicalBlock(scope: !6217, file: !103, line: 1366, column: 5)
!6222 = !DILocation(line: 1366, column: 17, scope: !6220)
!6223 = !DILocation(line: 1366, column: 25, scope: !6220)
!6224 = !DILocation(line: 1366, column: 16, scope: !6220)
!6225 = !DILocation(line: 1366, column: 5, scope: !6220)
!6226 = !DILocation(line: 1367, column: 28, scope: !6227)
!6227 = distinct !DILexicalBlock(scope: !6221, file: !103, line: 1366, column: 34)
!6228 = !DILocation(line: 1367, column: 24, scope: !6227)
!6229 = !DILocation(line: 1367, column: 23, scope: !6227)
!6230 = !DILocation(line: 1367, column: 37, scope: !6227)
!6231 = !DILocation(line: 1367, column: 38, scope: !6227)
!6232 = !DILocation(line: 1367, column: 33, scope: !6227)
!6233 = !DILocation(line: 1367, column: 31, scope: !6227)
!6234 = !DILocation(line: 1367, column: 42, scope: !6227)
!6235 = !DILocation(line: 1367, column: 21, scope: !6227)
!6236 = !DILocation(line: 1367, column: 15, scope: !6227)
!6237 = !DILocation(line: 1367, column: 14, scope: !6227)
!6238 = !DILocation(line: 1367, column: 16, scope: !6227)
!6239 = !DILocation(line: 1367, column: 9, scope: !6227)
!6240 = !DILocation(line: 1367, column: 19, scope: !6227)
!6241 = !DILocation(line: 1368, column: 27, scope: !6227)
!6242 = !DILocation(line: 1368, column: 23, scope: !6227)
!6243 = !DILocation(line: 1368, column: 38, scope: !6227)
!6244 = !DILocation(line: 1368, column: 39, scope: !6227)
!6245 = !DILocation(line: 1368, column: 34, scope: !6227)
!6246 = !DILocation(line: 1368, column: 33, scope: !6227)
!6247 = !DILocation(line: 1368, column: 30, scope: !6227)
!6248 = !DILocation(line: 1368, column: 43, scope: !6227)
!6249 = !DILocation(line: 1368, column: 21, scope: !6227)
!6250 = !DILocation(line: 1368, column: 15, scope: !6227)
!6251 = !DILocation(line: 1368, column: 14, scope: !6227)
!6252 = !DILocation(line: 1368, column: 16, scope: !6227)
!6253 = !DILocation(line: 1368, column: 9, scope: !6227)
!6254 = !DILocation(line: 1368, column: 19, scope: !6227)
!6255 = !DILocation(line: 1369, column: 5, scope: !6227)
!6256 = !DILocation(line: 1366, column: 30, scope: !6257)
!6257 = !DILexicalBlockFile(scope: !6221, file: !103, discriminator: 2)
!6258 = !DILocation(line: 1366, column: 5, scope: !6257)
!6259 = distinct !{!6259, !6260}
!6260 = !DILocation(line: 1366, column: 5, scope: !6196)
!6261 = !DILocation(line: 1370, column: 28, scope: !6196)
!6262 = !DILocation(line: 1370, column: 36, scope: !6196)
!6263 = !DILocation(line: 1370, column: 24, scope: !6196)
!6264 = !DILocation(line: 1370, column: 11, scope: !6196)
!6265 = !DILocation(line: 1370, column: 10, scope: !6196)
!6266 = !DILocation(line: 1370, column: 19, scope: !6196)
!6267 = !DILocation(line: 1370, column: 5, scope: !6196)
!6268 = !DILocation(line: 1370, column: 22, scope: !6196)
!6269 = !DILocation(line: 1372, column: 11, scope: !6196)
!6270 = !DILocation(line: 1372, column: 8, scope: !6196)
!6271 = !DILocation(line: 1374, column: 11, scope: !6272)
!6272 = distinct !DILexicalBlock(scope: !6196, file: !103, line: 1374, column: 5)
!6273 = !DILocation(line: 1374, column: 10, scope: !6272)
!6274 = !DILocation(line: 1374, column: 15, scope: !6275)
!6275 = !DILexicalBlockFile(scope: !6276, file: !103, discriminator: 1)
!6276 = distinct !DILexicalBlock(scope: !6272, file: !103, line: 1374, column: 5)
!6277 = !DILocation(line: 1374, column: 17, scope: !6275)
!6278 = !DILocation(line: 1374, column: 16, scope: !6275)
!6279 = !DILocation(line: 1374, column: 5, scope: !6275)
!6280 = !DILocalVariable(name: "mmxSize", scope: !6281, file: !103, line: 1375, type: !18)
!6281 = distinct !DILexicalBlock(scope: !6276, file: !103, line: 1374, column: 33)
!6282 = !DILocation(line: 1375, column: 17, scope: !6281)
!6283 = !DILocation(line: 1375, column: 26, scope: !6281)
!6284 = !DILocation(line: 1375, column: 34, scope: !6281)
!6285 = !DILocation(line: 1377, column: 13, scope: !6286)
!6286 = distinct !DILexicalBlock(scope: !6281, file: !103, line: 1377, column: 13)
!6287 = !DILocation(line: 1377, column: 13, scope: !6281)
!6288 = !DILocation(line: 1418, column: 21, scope: !6289)
!6289 = distinct !DILexicalBlock(scope: !6286, file: !103, line: 1377, column: 22)
!6290 = !DILocation(line: 1418, column: 27, scope: !6289)
!6291 = !DILocation(line: 1418, column: 25, scope: !6289)
!6292 = !DILocation(line: 1418, column: 43, scope: !6289)
!6293 = !DILocation(line: 1418, column: 49, scope: !6289)
!6294 = !DILocation(line: 1418, column: 47, scope: !6289)
!6295 = !DILocation(line: 1418, column: 61, scope: !6289)
!6296 = !DILocation(line: 1418, column: 59, scope: !6289)
!6297 = !DILocation(line: 1419, column: 21, scope: !6289)
!6298 = !DILocation(line: 1419, column: 27, scope: !6289)
!6299 = !DILocation(line: 1419, column: 34, scope: !6289)
!6300 = !DILocation(line: 1419, column: 25, scope: !6289)
!6301 = !DILocation(line: 1419, column: 44, scope: !6289)
!6302 = !DILocation(line: 1419, column: 50, scope: !6289)
!6303 = !DILocation(line: 1419, column: 48, scope: !6289)
!6304 = !DILocation(line: 1419, column: 62, scope: !6289)
!6305 = !DILocation(line: 1419, column: 69, scope: !6289)
!6306 = !DILocation(line: 1419, column: 60, scope: !6289)
!6307 = !DILocation(line: 1420, column: 22, scope: !6289)
!6308 = !DILocation(line: 1420, column: 21, scope: !6289)
!6309 = !DILocation(line: 1378, column: 9, scope: !6289)
!6310 = !{i32 295667, i32 295710, i32 295765, i32 295820, i32 295878, i32 295936, i32 295994, i32 296052, i32 296107, i32 296165, i32 296223, i32 296281, i32 296339, i32 296397, i32 296452, i32 296507, i32 296562, i32 296617, i32 296677, i32 296737, i32 296797, i32 296857, i32 296917, i32 296977, i32 297037, i32 297097, i32 297155, i32 297213, i32 297271, i32 297329, i32 297387, i32 297445, i32 297517, i32 297589, i32 297661, i32 297733, i32 297803, i32 297858, i32 297913, i32 297971}
!6311 = !DILocation(line: 1424, column: 9, scope: !6289)
!6312 = !DILocation(line: 1425, column: 21, scope: !6313)
!6313 = distinct !DILexicalBlock(scope: !6286, file: !103, line: 1424, column: 16)
!6314 = !DILocation(line: 1426, column: 23, scope: !6313)
!6315 = !DILocation(line: 1426, column: 30, scope: !6313)
!6316 = !DILocation(line: 1426, column: 40, scope: !6313)
!6317 = !DILocation(line: 1426, column: 36, scope: !6313)
!6318 = !DILocation(line: 1426, column: 34, scope: !6313)
!6319 = !DILocation(line: 1426, column: 52, scope: !6313)
!6320 = !DILocation(line: 1426, column: 22, scope: !6313)
!6321 = !DILocation(line: 1426, column: 13, scope: !6313)
!6322 = !DILocation(line: 1426, column: 20, scope: !6313)
!6323 = !DILocation(line: 1427, column: 31, scope: !6313)
!6324 = !DILocation(line: 1427, column: 48, scope: !6313)
!6325 = !DILocation(line: 1427, column: 44, scope: !6313)
!6326 = !DILocation(line: 1427, column: 42, scope: !6313)
!6327 = !DILocation(line: 1427, column: 38, scope: !6313)
!6328 = !DILocation(line: 1427, column: 60, scope: !6313)
!6329 = !DILocation(line: 1427, column: 30, scope: !6313)
!6330 = !DILocation(line: 1427, column: 17, scope: !6313)
!6331 = !DILocation(line: 1427, column: 13, scope: !6313)
!6332 = !DILocation(line: 1427, column: 28, scope: !6313)
!6333 = !DILocation(line: 1430, column: 16, scope: !6334)
!6334 = distinct !DILexicalBlock(scope: !6281, file: !103, line: 1430, column: 9)
!6335 = !DILocation(line: 1430, column: 23, scope: !6334)
!6336 = !DILocation(line: 1430, column: 15, scope: !6334)
!6337 = !DILocation(line: 1430, column: 14, scope: !6334)
!6338 = !DILocation(line: 1430, column: 27, scope: !6339)
!6339 = !DILexicalBlockFile(scope: !6340, file: !103, discriminator: 1)
!6340 = distinct !DILexicalBlock(scope: !6334, file: !103, line: 1430, column: 9)
!6341 = !DILocation(line: 1430, column: 29, scope: !6339)
!6342 = !DILocation(line: 1430, column: 37, scope: !6339)
!6343 = !DILocation(line: 1430, column: 28, scope: !6339)
!6344 = !DILocation(line: 1430, column: 9, scope: !6339)
!6345 = !DILocation(line: 1431, column: 33, scope: !6346)
!6346 = distinct !DILexicalBlock(scope: !6340, file: !103, line: 1430, column: 46)
!6347 = !DILocation(line: 1431, column: 34, scope: !6346)
!6348 = !DILocation(line: 1431, column: 29, scope: !6346)
!6349 = !DILocation(line: 1431, column: 28, scope: !6346)
!6350 = !DILocation(line: 1431, column: 44, scope: !6346)
!6351 = !DILocation(line: 1431, column: 46, scope: !6346)
!6352 = !DILocation(line: 1431, column: 45, scope: !6346)
!6353 = !DILocation(line: 1431, column: 55, scope: !6346)
!6354 = !DILocation(line: 1431, column: 40, scope: !6346)
!6355 = !DILocation(line: 1431, column: 38, scope: !6346)
!6356 = !DILocation(line: 1431, column: 59, scope: !6346)
!6357 = !DILocation(line: 1431, column: 26, scope: !6346)
!6358 = !DILocation(line: 1431, column: 19, scope: !6346)
!6359 = !DILocation(line: 1431, column: 18, scope: !6346)
!6360 = !DILocation(line: 1431, column: 21, scope: !6346)
!6361 = !DILocation(line: 1431, column: 13, scope: !6346)
!6362 = !DILocation(line: 1431, column: 24, scope: !6346)
!6363 = !DILocation(line: 1432, column: 41, scope: !6346)
!6364 = !DILocation(line: 1432, column: 42, scope: !6346)
!6365 = !DILocation(line: 1432, column: 37, scope: !6346)
!6366 = !DILocation(line: 1432, column: 54, scope: !6346)
!6367 = !DILocation(line: 1432, column: 56, scope: !6346)
!6368 = !DILocation(line: 1432, column: 55, scope: !6346)
!6369 = !DILocation(line: 1432, column: 65, scope: !6346)
!6370 = !DILocation(line: 1432, column: 50, scope: !6346)
!6371 = !DILocation(line: 1432, column: 49, scope: !6346)
!6372 = !DILocation(line: 1432, column: 46, scope: !6346)
!6373 = !DILocation(line: 1432, column: 69, scope: !6346)
!6374 = !DILocation(line: 1432, column: 35, scope: !6346)
!6375 = !DILocation(line: 1432, column: 19, scope: !6346)
!6376 = !DILocation(line: 1432, column: 18, scope: !6346)
!6377 = !DILocation(line: 1432, column: 21, scope: !6346)
!6378 = !DILocation(line: 1432, column: 20, scope: !6346)
!6379 = !DILocation(line: 1432, column: 30, scope: !6346)
!6380 = !DILocation(line: 1432, column: 13, scope: !6346)
!6381 = !DILocation(line: 1432, column: 33, scope: !6346)
!6382 = !DILocation(line: 1433, column: 41, scope: !6346)
!6383 = !DILocation(line: 1433, column: 42, scope: !6346)
!6384 = !DILocation(line: 1433, column: 37, scope: !6346)
!6385 = !DILocation(line: 1433, column: 54, scope: !6346)
!6386 = !DILocation(line: 1433, column: 56, scope: !6346)
!6387 = !DILocation(line: 1433, column: 55, scope: !6346)
!6388 = !DILocation(line: 1433, column: 50, scope: !6346)
!6389 = !DILocation(line: 1433, column: 49, scope: !6346)
!6390 = !DILocation(line: 1433, column: 46, scope: !6346)
!6391 = !DILocation(line: 1433, column: 68, scope: !6346)
!6392 = !DILocation(line: 1433, column: 35, scope: !6346)
!6393 = !DILocation(line: 1433, column: 19, scope: !6346)
!6394 = !DILocation(line: 1433, column: 18, scope: !6346)
!6395 = !DILocation(line: 1433, column: 21, scope: !6346)
!6396 = !DILocation(line: 1433, column: 20, scope: !6346)
!6397 = !DILocation(line: 1433, column: 30, scope: !6346)
!6398 = !DILocation(line: 1433, column: 13, scope: !6346)
!6399 = !DILocation(line: 1433, column: 33, scope: !6346)
!6400 = !DILocation(line: 1434, column: 33, scope: !6346)
!6401 = !DILocation(line: 1434, column: 34, scope: !6346)
!6402 = !DILocation(line: 1434, column: 29, scope: !6346)
!6403 = !DILocation(line: 1434, column: 28, scope: !6346)
!6404 = !DILocation(line: 1434, column: 44, scope: !6346)
!6405 = !DILocation(line: 1434, column: 46, scope: !6346)
!6406 = !DILocation(line: 1434, column: 45, scope: !6346)
!6407 = !DILocation(line: 1434, column: 40, scope: !6346)
!6408 = !DILocation(line: 1434, column: 38, scope: !6346)
!6409 = !DILocation(line: 1434, column: 58, scope: !6346)
!6410 = !DILocation(line: 1434, column: 26, scope: !6346)
!6411 = !DILocation(line: 1434, column: 19, scope: !6346)
!6412 = !DILocation(line: 1434, column: 18, scope: !6346)
!6413 = !DILocation(line: 1434, column: 21, scope: !6346)
!6414 = !DILocation(line: 1434, column: 13, scope: !6346)
!6415 = !DILocation(line: 1434, column: 24, scope: !6346)
!6416 = !DILocation(line: 1435, column: 9, scope: !6346)
!6417 = !DILocation(line: 1430, column: 42, scope: !6418)
!6418 = !DILexicalBlockFile(scope: !6340, file: !103, discriminator: 2)
!6419 = !DILocation(line: 1430, column: 9, scope: !6418)
!6420 = distinct !{!6420, !6421}
!6421 = !DILocation(line: 1430, column: 9, scope: !6281)
!6422 = !DILocation(line: 1436, column: 37, scope: !6281)
!6423 = !DILocation(line: 1436, column: 45, scope: !6281)
!6424 = !DILocation(line: 1436, column: 33, scope: !6281)
!6425 = !DILocation(line: 1436, column: 32, scope: !6281)
!6426 = !DILocation(line: 1436, column: 55, scope: !6281)
!6427 = !DILocation(line: 1436, column: 63, scope: !6281)
!6428 = !DILocation(line: 1436, column: 68, scope: !6281)
!6429 = !DILocation(line: 1436, column: 66, scope: !6281)
!6430 = !DILocation(line: 1436, column: 51, scope: !6281)
!6431 = !DILocation(line: 1436, column: 49, scope: !6281)
!6432 = !DILocation(line: 1436, column: 79, scope: !6281)
!6433 = !DILocation(line: 1436, column: 30, scope: !6281)
!6434 = !DILocation(line: 1436, column: 13, scope: !6281)
!6435 = !DILocation(line: 1436, column: 21, scope: !6281)
!6436 = !DILocation(line: 1436, column: 24, scope: !6281)
!6437 = !DILocation(line: 1436, column: 9, scope: !6281)
!6438 = !DILocation(line: 1436, column: 28, scope: !6281)
!6439 = !DILocation(line: 1437, column: 47, scope: !6281)
!6440 = !DILocation(line: 1437, column: 55, scope: !6281)
!6441 = !DILocation(line: 1437, column: 43, scope: !6281)
!6442 = !DILocation(line: 1437, column: 67, scope: !6281)
!6443 = !DILocation(line: 1437, column: 75, scope: !6281)
!6444 = !DILocation(line: 1437, column: 80, scope: !6281)
!6445 = !DILocation(line: 1437, column: 78, scope: !6281)
!6446 = !DILocation(line: 1437, column: 63, scope: !6281)
!6447 = !DILocation(line: 1437, column: 62, scope: !6281)
!6448 = !DILocation(line: 1437, column: 59, scope: !6281)
!6449 = !DILocation(line: 1437, column: 91, scope: !6281)
!6450 = !DILocation(line: 1437, column: 41, scope: !6281)
!6451 = !DILocation(line: 1437, column: 13, scope: !6281)
!6452 = !DILocation(line: 1437, column: 21, scope: !6281)
!6453 = !DILocation(line: 1437, column: 24, scope: !6281)
!6454 = !DILocation(line: 1437, column: 29, scope: !6281)
!6455 = !DILocation(line: 1437, column: 27, scope: !6281)
!6456 = !DILocation(line: 1437, column: 9, scope: !6281)
!6457 = !DILocation(line: 1437, column: 39, scope: !6281)
!6458 = !DILocation(line: 1439, column: 14, scope: !6281)
!6459 = !DILocation(line: 1439, column: 23, scope: !6281)
!6460 = !DILocation(line: 1439, column: 12, scope: !6281)
!6461 = !DILocation(line: 1440, column: 14, scope: !6281)
!6462 = !DILocation(line: 1440, column: 12, scope: !6281)
!6463 = !DILocation(line: 1441, column: 5, scope: !6281)
!6464 = !DILocation(line: 1374, column: 29, scope: !6465)
!6465 = !DILexicalBlockFile(scope: !6276, file: !103, discriminator: 2)
!6466 = !DILocation(line: 1374, column: 5, scope: !6465)
!6467 = distinct !{!6467, !6468}
!6468 = !DILocation(line: 1374, column: 5, scope: !6196)
!6469 = !DILocation(line: 1444, column: 13, scope: !6196)
!6470 = !DILocation(line: 1444, column: 5, scope: !6196)
!6471 = !DILocation(line: 1444, column: 11, scope: !6196)
!6472 = !DILocation(line: 1446, column: 11, scope: !6473)
!6473 = distinct !DILexicalBlock(scope: !6196, file: !103, line: 1446, column: 5)
!6474 = !DILocation(line: 1446, column: 10, scope: !6473)
!6475 = !DILocation(line: 1446, column: 15, scope: !6476)
!6476 = !DILexicalBlockFile(scope: !6477, file: !103, discriminator: 1)
!6477 = distinct !DILexicalBlock(scope: !6473, file: !103, line: 1446, column: 5)
!6478 = !DILocation(line: 1446, column: 17, scope: !6476)
!6479 = !DILocation(line: 1446, column: 25, scope: !6476)
!6480 = !DILocation(line: 1446, column: 16, scope: !6476)
!6481 = !DILocation(line: 1446, column: 5, scope: !6476)
!6482 = !DILocation(line: 1447, column: 28, scope: !6483)
!6483 = distinct !DILexicalBlock(scope: !6477, file: !103, line: 1446, column: 34)
!6484 = !DILocation(line: 1447, column: 24, scope: !6483)
!6485 = !DILocation(line: 1447, column: 23, scope: !6483)
!6486 = !DILocation(line: 1447, column: 37, scope: !6483)
!6487 = !DILocation(line: 1447, column: 38, scope: !6483)
!6488 = !DILocation(line: 1447, column: 33, scope: !6483)
!6489 = !DILocation(line: 1447, column: 31, scope: !6483)
!6490 = !DILocation(line: 1447, column: 42, scope: !6483)
!6491 = !DILocation(line: 1447, column: 21, scope: !6483)
!6492 = !DILocation(line: 1447, column: 15, scope: !6483)
!6493 = !DILocation(line: 1447, column: 14, scope: !6483)
!6494 = !DILocation(line: 1447, column: 16, scope: !6483)
!6495 = !DILocation(line: 1447, column: 9, scope: !6483)
!6496 = !DILocation(line: 1447, column: 19, scope: !6483)
!6497 = !DILocation(line: 1448, column: 27, scope: !6483)
!6498 = !DILocation(line: 1448, column: 23, scope: !6483)
!6499 = !DILocation(line: 1448, column: 38, scope: !6483)
!6500 = !DILocation(line: 1448, column: 39, scope: !6483)
!6501 = !DILocation(line: 1448, column: 34, scope: !6483)
!6502 = !DILocation(line: 1448, column: 33, scope: !6483)
!6503 = !DILocation(line: 1448, column: 30, scope: !6483)
!6504 = !DILocation(line: 1448, column: 43, scope: !6483)
!6505 = !DILocation(line: 1448, column: 21, scope: !6483)
!6506 = !DILocation(line: 1448, column: 15, scope: !6483)
!6507 = !DILocation(line: 1448, column: 14, scope: !6483)
!6508 = !DILocation(line: 1448, column: 16, scope: !6483)
!6509 = !DILocation(line: 1448, column: 9, scope: !6483)
!6510 = !DILocation(line: 1448, column: 19, scope: !6483)
!6511 = !DILocation(line: 1449, column: 5, scope: !6483)
!6512 = !DILocation(line: 1446, column: 30, scope: !6513)
!6513 = !DILexicalBlockFile(scope: !6477, file: !103, discriminator: 2)
!6514 = !DILocation(line: 1446, column: 5, scope: !6513)
!6515 = distinct !{!6515, !6516}
!6516 = !DILocation(line: 1446, column: 5, scope: !6196)
!6517 = !DILocation(line: 1450, column: 28, scope: !6196)
!6518 = !DILocation(line: 1450, column: 36, scope: !6196)
!6519 = !DILocation(line: 1450, column: 24, scope: !6196)
!6520 = !DILocation(line: 1450, column: 11, scope: !6196)
!6521 = !DILocation(line: 1450, column: 10, scope: !6196)
!6522 = !DILocation(line: 1450, column: 19, scope: !6196)
!6523 = !DILocation(line: 1450, column: 5, scope: !6196)
!6524 = !DILocation(line: 1450, column: 22, scope: !6196)
!6525 = !DILocation(line: 1452, column: 5, scope: !6196)
!6526 = !{i32 299154, i32 299170, i32 299211}
!6527 = !DILocation(line: 1455, column: 1, scope: !6196)
!6528 = distinct !DISubprogram(name: "rgb24toyv12_mmxext", scope: !103, file: !103, line: 1572, type: !2321, isLocal: true, isDefinition: true, scopeLine: 1576, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!6529 = !DILocalVariable(name: "src", arg: 1, scope: !6528, file: !103, line: 1572, type: !182)
!6530 = !DILocation(line: 1572, column: 54, scope: !6528)
!6531 = !DILocalVariable(name: "ydst", arg: 2, scope: !6528, file: !103, line: 1572, type: !15)
!6532 = !DILocation(line: 1572, column: 68, scope: !6528)
!6533 = !DILocalVariable(name: "udst", arg: 3, scope: !6528, file: !103, line: 1572, type: !15)
!6534 = !DILocation(line: 1572, column: 83, scope: !6528)
!6535 = !DILocalVariable(name: "vdst", arg: 4, scope: !6528, file: !103, line: 1572, type: !15)
!6536 = !DILocation(line: 1572, column: 98, scope: !6528)
!6537 = !DILocalVariable(name: "width", arg: 5, scope: !6528, file: !103, line: 1573, type: !72)
!6538 = !DILocation(line: 1573, column: 44, scope: !6528)
!6539 = !DILocalVariable(name: "height", arg: 6, scope: !6528, file: !103, line: 1573, type: !72)
!6540 = !DILocation(line: 1573, column: 55, scope: !6528)
!6541 = !DILocalVariable(name: "lumStride", arg: 7, scope: !6528, file: !103, line: 1574, type: !72)
!6542 = !DILocation(line: 1574, column: 44, scope: !6528)
!6543 = !DILocalVariable(name: "chromStride", arg: 8, scope: !6528, file: !103, line: 1574, type: !72)
!6544 = !DILocation(line: 1574, column: 59, scope: !6528)
!6545 = !DILocalVariable(name: "srcStride", arg: 9, scope: !6528, file: !103, line: 1574, type: !72)
!6546 = !DILocation(line: 1574, column: 76, scope: !6528)
!6547 = !DILocalVariable(name: "rgb2yuv", arg: 10, scope: !6528, file: !103, line: 1575, type: !2323)
!6548 = !DILocation(line: 1575, column: 49, scope: !6528)
!6549 = !DILocalVariable(name: "y", scope: !6528, file: !103, line: 1580, type: !72)
!6550 = !DILocation(line: 1580, column: 9, scope: !6528)
!6551 = !DILocalVariable(name: "chromWidth", scope: !6528, file: !103, line: 1581, type: !1759)
!6552 = !DILocation(line: 1581, column: 19, scope: !6528)
!6553 = !DILocation(line: 1581, column: 31, scope: !6528)
!6554 = !DILocation(line: 1581, column: 36, scope: !6528)
!6555 = !DILocation(line: 1583, column: 9, scope: !6556)
!6556 = distinct !DILexicalBlock(scope: !6528, file: !103, line: 1583, column: 9)
!6557 = !DILocation(line: 1583, column: 16, scope: !6556)
!6558 = !DILocation(line: 1583, column: 9, scope: !6528)
!6559 = !DILocation(line: 1584, column: 26, scope: !6560)
!6560 = distinct !DILexicalBlock(scope: !6556, file: !103, line: 1583, column: 21)
!6561 = !DILocation(line: 1584, column: 31, scope: !6560)
!6562 = !DILocation(line: 1584, column: 37, scope: !6560)
!6563 = !DILocation(line: 1584, column: 43, scope: !6560)
!6564 = !DILocation(line: 1584, column: 49, scope: !6560)
!6565 = !DILocation(line: 1584, column: 59, scope: !6560)
!6566 = !DILocation(line: 1584, column: 70, scope: !6560)
!6567 = !DILocation(line: 1584, column: 83, scope: !6560)
!6568 = !DILocation(line: 1584, column: 94, scope: !6560)
!6569 = !DILocation(line: 1584, column: 9, scope: !6560)
!6570 = !DILocation(line: 1585, column: 18, scope: !6560)
!6571 = !DILocation(line: 1585, column: 17, scope: !6560)
!6572 = !DILocation(line: 1585, column: 13, scope: !6560)
!6573 = !DILocation(line: 1586, column: 19, scope: !6560)
!6574 = !DILocation(line: 1586, column: 18, scope: !6560)
!6575 = !DILocation(line: 1586, column: 14, scope: !6560)
!6576 = !DILocation(line: 1587, column: 17, scope: !6560)
!6577 = !DILocation(line: 1587, column: 14, scope: !6560)
!6578 = !DILocation(line: 1588, column: 17, scope: !6560)
!6579 = !DILocation(line: 1588, column: 14, scope: !6560)
!6580 = !DILocation(line: 1589, column: 16, scope: !6560)
!6581 = !DILocation(line: 1590, column: 5, scope: !6560)
!6582 = !DILocation(line: 1592, column: 11, scope: !6583)
!6583 = distinct !DILexicalBlock(scope: !6528, file: !103, line: 1592, column: 5)
!6584 = !DILocation(line: 1592, column: 10, scope: !6583)
!6585 = !DILocation(line: 1592, column: 15, scope: !6586)
!6586 = !DILexicalBlockFile(scope: !6587, file: !103, discriminator: 1)
!6587 = distinct !DILexicalBlock(scope: !6583, file: !103, line: 1592, column: 5)
!6588 = !DILocation(line: 1592, column: 17, scope: !6586)
!6589 = !DILocation(line: 1592, column: 23, scope: !6586)
!6590 = !DILocation(line: 1592, column: 16, scope: !6586)
!6591 = !DILocation(line: 1592, column: 5, scope: !6586)
!6592 = !DILocalVariable(name: "i", scope: !6593, file: !103, line: 1593, type: !72)
!6593 = distinct !DILexicalBlock(scope: !6587, file: !103, line: 1592, column: 33)
!6594 = !DILocation(line: 1593, column: 13, scope: !6593)
!6595 = !DILocation(line: 1594, column: 15, scope: !6596)
!6596 = distinct !DILexicalBlock(scope: !6593, file: !103, line: 1594, column: 9)
!6597 = !DILocation(line: 1594, column: 14, scope: !6596)
!6598 = !DILocation(line: 1594, column: 19, scope: !6599)
!6599 = !DILexicalBlockFile(scope: !6600, file: !103, discriminator: 1)
!6600 = distinct !DILexicalBlock(scope: !6596, file: !103, line: 1594, column: 9)
!6601 = !DILocation(line: 1594, column: 20, scope: !6599)
!6602 = !DILocation(line: 1594, column: 9, scope: !6599)
!6603 = !DILocation(line: 1657, column: 26, scope: !6604)
!6604 = distinct !DILexicalBlock(scope: !6600, file: !103, line: 1594, column: 29)
!6605 = !DILocation(line: 1657, column: 30, scope: !6604)
!6606 = !DILocation(line: 1657, column: 35, scope: !6604)
!6607 = !DILocation(line: 1657, column: 29, scope: !6604)
!6608 = !DILocation(line: 1657, column: 45, scope: !6604)
!6609 = !DILocation(line: 1657, column: 50, scope: !6604)
!6610 = !DILocation(line: 1657, column: 49, scope: !6604)
!6611 = !DILocation(line: 1657, column: 73, scope: !6604)
!6612 = !DILocation(line: 1657, column: 72, scope: !6604)
!6613 = !DILocation(line: 1657, column: 63, scope: !6604)
!6614 = !DILocation(line: 1657, column: 85, scope: !6604)
!6615 = !DILocation(line: 1595, column: 13, scope: !6604)
!6616 = !{i32 304407, i32 304450, i32 304519, i32 304582, i32 304648, i32 304712, i32 304778, i32 304844, i32 304912, i32 304975, i32 305038, i32 305104, i32 305170, i32 305233, i32 305296, i32 305362, i32 305428, i32 305494, i32 305560, i32 305626, i32 305692, i32 305758, i32 305824, i32 305890, i32 305956, i32 306022, i32 306088, i32 306154, i32 306220, i32 306286, i32 306352, i32 306416, i32 306479, i32 306545, i32 306611, i32 306674, i32 306737, i32 306803, i32 306869, i32 306935, i32 307001, i32 307067, i32 307133, i32 307199, i32 307265, i32 307331, i32 307397, i32 307463, i32 307529, i32 307595, i32 307661, i32 307724, i32 307790, i32 307856, i32 307923, i32 307986, i32 308059, i32 308129, i32 308202}
!6617 = !DILocation(line: 1661, column: 21, scope: !6604)
!6618 = !DILocation(line: 1661, column: 18, scope: !6604)
!6619 = !DILocation(line: 1662, column: 20, scope: !6604)
!6620 = !DILocation(line: 1662, column: 17, scope: !6604)
!6621 = !DILocation(line: 1663, column: 9, scope: !6604)
!6622 = !DILocation(line: 1594, column: 25, scope: !6623)
!6623 = !DILexicalBlockFile(scope: !6600, file: !103, discriminator: 2)
!6624 = !DILocation(line: 1594, column: 9, scope: !6623)
!6625 = distinct !{!6625, !6626}
!6626 = !DILocation(line: 1594, column: 9, scope: !6593)
!6627 = !DILocation(line: 1664, column: 16, scope: !6593)
!6628 = !DILocation(line: 1664, column: 25, scope: !6593)
!6629 = !DILocation(line: 1664, column: 13, scope: !6593)
!6630 = !DILocation(line: 1806, column: 22, scope: !6593)
!6631 = !DILocation(line: 1806, column: 26, scope: !6593)
!6632 = !DILocation(line: 1806, column: 36, scope: !6593)
!6633 = !DILocation(line: 1806, column: 25, scope: !6593)
!6634 = !DILocation(line: 1806, column: 46, scope: !6593)
!6635 = !DILocation(line: 1806, column: 50, scope: !6593)
!6636 = !DILocation(line: 1806, column: 49, scope: !6593)
!6637 = !DILocation(line: 1806, column: 60, scope: !6593)
!6638 = !DILocation(line: 1806, column: 70, scope: !6593)
!6639 = !DILocation(line: 1806, column: 59, scope: !6593)
!6640 = !DILocation(line: 1806, column: 80, scope: !6593)
!6641 = !DILocation(line: 1806, column: 85, scope: !6593)
!6642 = !DILocation(line: 1806, column: 84, scope: !6593)
!6643 = !DILocation(line: 1806, column: 103, scope: !6593)
!6644 = !DILocation(line: 1806, column: 108, scope: !6593)
!6645 = !DILocation(line: 1806, column: 107, scope: !6593)
!6646 = !DILocation(line: 1806, column: 127, scope: !6593)
!6647 = !DILocation(line: 1806, column: 126, scope: !6593)
!6648 = !DILocation(line: 1806, column: 144, scope: !6593)
!6649 = !DILocation(line: 1665, column: 9, scope: !6593)
!6650 = !{i32 308506, i32 308549, i32 308608, i32 308673, i32 308735, i32 308795, i32 308851, i32 308913, i32 308975, i32 309039, i32 309103, i32 309163, i32 309222, i32 309281, i32 309340, i32 309404, i32 309468, i32 309530, i32 309592, i32 309654, i32 309716, i32 309780, i32 309844, i32 309906, i32 309968, i32 310076, i32 310141, i32 310204, i32 310266, i32 310328, i32 310390, i32 310452, i32 310514, i32 310576, i32 310638, i32 310700, i32 310762, i32 310824, i32 310886, i32 310948, i32 311010, i32 311071, i32 311130, i32 311189, i32 311248, i32 311312, i32 311376, i32 311438, i32 311500, i32 311562, i32 311624, i32 311688, i32 311752, i32 311814, i32 311876, i32 311984, i32 312049, i32 312112, i32 312174, i32 312236, i32 312298, i32 312360, i32 312422, i32 312484, i32 312546, i32 312608, i32 312670, i32 312732, i32 312794, i32 312853, i32 312915, i32 312977, i32 313044, i32 313110, i32 313176, i32 313242, i32 313305, i32 313371, i32 313440, i32 313506, i32 313572, i32 313634}
!6651 = !DILocation(line: 1811, column: 17, scope: !6593)
!6652 = !DILocation(line: 1811, column: 14, scope: !6593)
!6653 = !DILocation(line: 1812, column: 17, scope: !6593)
!6654 = !DILocation(line: 1812, column: 14, scope: !6593)
!6655 = !DILocation(line: 1813, column: 16, scope: !6593)
!6656 = !DILocation(line: 1813, column: 25, scope: !6593)
!6657 = !DILocation(line: 1813, column: 13, scope: !6593)
!6658 = !DILocation(line: 1814, column: 5, scope: !6593)
!6659 = !DILocation(line: 1592, column: 28, scope: !6660)
!6660 = !DILexicalBlockFile(scope: !6587, file: !103, discriminator: 2)
!6661 = !DILocation(line: 1592, column: 5, scope: !6660)
!6662 = distinct !{!6662, !6663}
!6663 = !DILocation(line: 1592, column: 5, scope: !6528)
!6664 = !DILocation(line: 1816, column: 5, scope: !6528)
!6665 = !{i32 313963, i32 313979, i32 314020}
!6666 = !DILocation(line: 1820, column: 23, scope: !6528)
!6667 = !DILocation(line: 1820, column: 28, scope: !6528)
!6668 = !DILocation(line: 1820, column: 34, scope: !6528)
!6669 = !DILocation(line: 1820, column: 40, scope: !6528)
!6670 = !DILocation(line: 1820, column: 46, scope: !6528)
!6671 = !DILocation(line: 1820, column: 53, scope: !6528)
!6672 = !DILocation(line: 1820, column: 60, scope: !6528)
!6673 = !DILocation(line: 1820, column: 59, scope: !6528)
!6674 = !DILocation(line: 1820, column: 63, scope: !6528)
!6675 = !DILocation(line: 1820, column: 74, scope: !6528)
!6676 = !DILocation(line: 1820, column: 87, scope: !6528)
!6677 = !DILocation(line: 1820, column: 98, scope: !6528)
!6678 = !DILocation(line: 1820, column: 6, scope: !6528)
!6679 = !DILocation(line: 1821, column: 1, scope: !6528)
!6680 = distinct !DISubprogram(name: "yuyvtoyuv420_mmxext", scope: !103, file: !103, line: 2393, type: !2193, isLocal: true, isDefinition: true, scopeLine: 2396, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!6681 = !DILocalVariable(name: "ydst", arg: 1, scope: !6680, file: !103, line: 2393, type: !15)
!6682 = !DILocation(line: 2393, column: 42, scope: !6680)
!6683 = !DILocalVariable(name: "udst", arg: 2, scope: !6680, file: !103, line: 2393, type: !15)
!6684 = !DILocation(line: 2393, column: 57, scope: !6680)
!6685 = !DILocalVariable(name: "vdst", arg: 3, scope: !6680, file: !103, line: 2393, type: !15)
!6686 = !DILocation(line: 2393, column: 72, scope: !6680)
!6687 = !DILocalVariable(name: "src", arg: 4, scope: !6680, file: !103, line: 2393, type: !182)
!6688 = !DILocation(line: 2393, column: 93, scope: !6680)
!6689 = !DILocalVariable(name: "width", arg: 5, scope: !6680, file: !103, line: 2394, type: !72)
!6690 = !DILocation(line: 2394, column: 38, scope: !6680)
!6691 = !DILocalVariable(name: "height", arg: 6, scope: !6680, file: !103, line: 2394, type: !72)
!6692 = !DILocation(line: 2394, column: 49, scope: !6680)
!6693 = !DILocalVariable(name: "lumStride", arg: 7, scope: !6680, file: !103, line: 2395, type: !72)
!6694 = !DILocation(line: 2395, column: 38, scope: !6680)
!6695 = !DILocalVariable(name: "chromStride", arg: 8, scope: !6680, file: !103, line: 2395, type: !72)
!6696 = !DILocation(line: 2395, column: 53, scope: !6680)
!6697 = !DILocalVariable(name: "srcStride", arg: 9, scope: !6680, file: !103, line: 2395, type: !72)
!6698 = !DILocation(line: 2395, column: 70, scope: !6680)
!6699 = !DILocalVariable(name: "y", scope: !6680, file: !103, line: 2397, type: !72)
!6700 = !DILocation(line: 2397, column: 9, scope: !6680)
!6701 = !DILocalVariable(name: "chromWidth", scope: !6680, file: !103, line: 2398, type: !826)
!6702 = !DILocation(line: 2398, column: 15, scope: !6680)
!6703 = !DILocation(line: 2398, column: 81, scope: !6680)
!6704 = !DILocation(line: 2398, column: 88, scope: !6680)
!6705 = !DILocation(line: 2398, column: 99, scope: !6680)
!6706 = !DILocation(line: 2398, column: 104, scope: !6680)
!6707 = !DILocation(line: 2400, column: 11, scope: !6708)
!6708 = distinct !DILexicalBlock(scope: !6680, file: !103, line: 2400, column: 5)
!6709 = !DILocation(line: 2400, column: 10, scope: !6708)
!6710 = !DILocation(line: 2400, column: 15, scope: !6711)
!6711 = !DILexicalBlockFile(scope: !6712, file: !103, discriminator: 1)
!6712 = distinct !DILexicalBlock(scope: !6708, file: !103, line: 2400, column: 5)
!6713 = !DILocation(line: 2400, column: 17, scope: !6711)
!6714 = !DILocation(line: 2400, column: 16, scope: !6711)
!6715 = !DILocation(line: 2400, column: 5, scope: !6711)
!6716 = !DILocation(line: 2401, column: 29, scope: !6717)
!6717 = distinct !DILexicalBlock(scope: !6712, file: !103, line: 2400, column: 30)
!6718 = !DILocation(line: 2401, column: 34, scope: !6717)
!6719 = !DILocation(line: 2401, column: 40, scope: !6717)
!6720 = !DILocation(line: 2401, column: 9, scope: !6717)
!6721 = !DILocation(line: 2402, column: 12, scope: !6722)
!6722 = distinct !DILexicalBlock(scope: !6717, file: !103, line: 2402, column: 12)
!6723 = !DILocation(line: 2402, column: 13, scope: !6722)
!6724 = !DILocation(line: 2402, column: 12, scope: !6717)
!6725 = !DILocation(line: 2403, column: 36, scope: !6726)
!6726 = distinct !DILexicalBlock(scope: !6722, file: !103, line: 2402, column: 17)
!6727 = !DILocation(line: 2403, column: 40, scope: !6726)
!6728 = !DILocation(line: 2403, column: 39, scope: !6726)
!6729 = !DILocation(line: 2403, column: 51, scope: !6726)
!6730 = !DILocation(line: 2403, column: 56, scope: !6726)
!6731 = !DILocation(line: 2403, column: 62, scope: !6726)
!6732 = !DILocation(line: 2403, column: 68, scope: !6726)
!6733 = !DILocation(line: 2403, column: 13, scope: !6726)
!6734 = !DILocation(line: 2404, column: 20, scope: !6726)
!6735 = !DILocation(line: 2404, column: 17, scope: !6726)
!6736 = !DILocation(line: 2405, column: 20, scope: !6726)
!6737 = !DILocation(line: 2405, column: 17, scope: !6726)
!6738 = !DILocation(line: 2406, column: 9, scope: !6726)
!6739 = !DILocation(line: 2408, column: 16, scope: !6717)
!6740 = !DILocation(line: 2408, column: 13, scope: !6717)
!6741 = !DILocation(line: 2409, column: 16, scope: !6717)
!6742 = !DILocation(line: 2409, column: 13, scope: !6717)
!6743 = !DILocation(line: 2410, column: 5, scope: !6717)
!6744 = !DILocation(line: 2400, column: 26, scope: !6745)
!6745 = !DILexicalBlockFile(scope: !6712, file: !103, discriminator: 2)
!6746 = !DILocation(line: 2400, column: 5, scope: !6745)
!6747 = distinct !{!6747, !6748}
!6748 = !DILocation(line: 2400, column: 5, scope: !6680)
!6749 = !DILocation(line: 2411, column: 5, scope: !6680)
!6750 = !{i32 334982, i32 334998, i32 335030}
!6751 = !DILocation(line: 2416, column: 1, scope: !6680)
!6752 = distinct !DISubprogram(name: "uyvytoyuv420_mmxext", scope: !103, file: !103, line: 2443, type: !2193, isLocal: true, isDefinition: true, scopeLine: 2446, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!6753 = !DILocalVariable(name: "ydst", arg: 1, scope: !6752, file: !103, line: 2443, type: !15)
!6754 = !DILocation(line: 2443, column: 42, scope: !6752)
!6755 = !DILocalVariable(name: "udst", arg: 2, scope: !6752, file: !103, line: 2443, type: !15)
!6756 = !DILocation(line: 2443, column: 57, scope: !6752)
!6757 = !DILocalVariable(name: "vdst", arg: 3, scope: !6752, file: !103, line: 2443, type: !15)
!6758 = !DILocation(line: 2443, column: 72, scope: !6752)
!6759 = !DILocalVariable(name: "src", arg: 4, scope: !6752, file: !103, line: 2443, type: !182)
!6760 = !DILocation(line: 2443, column: 93, scope: !6752)
!6761 = !DILocalVariable(name: "width", arg: 5, scope: !6752, file: !103, line: 2444, type: !72)
!6762 = !DILocation(line: 2444, column: 38, scope: !6752)
!6763 = !DILocalVariable(name: "height", arg: 6, scope: !6752, file: !103, line: 2444, type: !72)
!6764 = !DILocation(line: 2444, column: 49, scope: !6752)
!6765 = !DILocalVariable(name: "lumStride", arg: 7, scope: !6752, file: !103, line: 2445, type: !72)
!6766 = !DILocation(line: 2445, column: 38, scope: !6752)
!6767 = !DILocalVariable(name: "chromStride", arg: 8, scope: !6752, file: !103, line: 2445, type: !72)
!6768 = !DILocation(line: 2445, column: 53, scope: !6752)
!6769 = !DILocalVariable(name: "srcStride", arg: 9, scope: !6752, file: !103, line: 2445, type: !72)
!6770 = !DILocation(line: 2445, column: 70, scope: !6752)
!6771 = !DILocalVariable(name: "y", scope: !6752, file: !103, line: 2447, type: !72)
!6772 = !DILocation(line: 2447, column: 9, scope: !6752)
!6773 = !DILocalVariable(name: "chromWidth", scope: !6752, file: !103, line: 2448, type: !826)
!6774 = !DILocation(line: 2448, column: 15, scope: !6752)
!6775 = !DILocation(line: 2448, column: 81, scope: !6752)
!6776 = !DILocation(line: 2448, column: 88, scope: !6752)
!6777 = !DILocation(line: 2448, column: 99, scope: !6752)
!6778 = !DILocation(line: 2448, column: 104, scope: !6752)
!6779 = !DILocation(line: 2450, column: 11, scope: !6780)
!6780 = distinct !DILexicalBlock(scope: !6752, file: !103, line: 2450, column: 5)
!6781 = !DILocation(line: 2450, column: 10, scope: !6780)
!6782 = !DILocation(line: 2450, column: 15, scope: !6783)
!6783 = !DILexicalBlockFile(scope: !6784, file: !103, discriminator: 1)
!6784 = distinct !DILexicalBlock(scope: !6780, file: !103, line: 2450, column: 5)
!6785 = !DILocation(line: 2450, column: 17, scope: !6783)
!6786 = !DILocation(line: 2450, column: 16, scope: !6783)
!6787 = !DILocation(line: 2450, column: 5, scope: !6783)
!6788 = !DILocation(line: 2451, column: 28, scope: !6789)
!6789 = distinct !DILexicalBlock(scope: !6784, file: !103, line: 2450, column: 30)
!6790 = !DILocation(line: 2451, column: 33, scope: !6789)
!6791 = !DILocation(line: 2451, column: 39, scope: !6789)
!6792 = !DILocation(line: 2451, column: 9, scope: !6789)
!6793 = !DILocation(line: 2452, column: 12, scope: !6794)
!6794 = distinct !DILexicalBlock(scope: !6789, file: !103, line: 2452, column: 12)
!6795 = !DILocation(line: 2452, column: 13, scope: !6794)
!6796 = !DILocation(line: 2452, column: 12, scope: !6789)
!6797 = !DILocation(line: 2453, column: 37, scope: !6798)
!6798 = distinct !DILexicalBlock(scope: !6794, file: !103, line: 2452, column: 17)
!6799 = !DILocation(line: 2453, column: 41, scope: !6798)
!6800 = !DILocation(line: 2453, column: 40, scope: !6798)
!6801 = !DILocation(line: 2453, column: 52, scope: !6798)
!6802 = !DILocation(line: 2453, column: 57, scope: !6798)
!6803 = !DILocation(line: 2453, column: 63, scope: !6798)
!6804 = !DILocation(line: 2453, column: 69, scope: !6798)
!6805 = !DILocation(line: 2453, column: 13, scope: !6798)
!6806 = !DILocation(line: 2454, column: 20, scope: !6798)
!6807 = !DILocation(line: 2454, column: 17, scope: !6798)
!6808 = !DILocation(line: 2455, column: 20, scope: !6798)
!6809 = !DILocation(line: 2455, column: 17, scope: !6798)
!6810 = !DILocation(line: 2456, column: 9, scope: !6798)
!6811 = !DILocation(line: 2458, column: 16, scope: !6789)
!6812 = !DILocation(line: 2458, column: 13, scope: !6789)
!6813 = !DILocation(line: 2459, column: 16, scope: !6789)
!6814 = !DILocation(line: 2459, column: 13, scope: !6789)
!6815 = !DILocation(line: 2460, column: 5, scope: !6789)
!6816 = !DILocation(line: 2450, column: 26, scope: !6817)
!6817 = !DILexicalBlockFile(scope: !6784, file: !103, discriminator: 2)
!6818 = !DILocation(line: 2450, column: 5, scope: !6817)
!6819 = distinct !{!6819, !6820}
!6820 = !DILocation(line: 2450, column: 5, scope: !6752)
!6821 = !DILocation(line: 2461, column: 5, scope: !6752)
!6822 = !{i32 336494, i32 336510, i32 336542}
!6823 = !DILocation(line: 2466, column: 1, scope: !6752)
!6824 = distinct !DISubprogram(name: "interleaveBytes_mmxext", scope: !103, file: !103, line: 1826, type: !2621, isLocal: true, isDefinition: true, scopeLine: 1829, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!6825 = !DILocalVariable(name: "src1", arg: 1, scope: !6824, file: !103, line: 1826, type: !182)
!6826 = !DILocation(line: 1826, column: 51, scope: !6824)
!6827 = !DILocalVariable(name: "src2", arg: 2, scope: !6824, file: !103, line: 1826, type: !182)
!6828 = !DILocation(line: 1826, column: 72, scope: !6824)
!6829 = !DILocalVariable(name: "dest", arg: 3, scope: !6824, file: !103, line: 1826, type: !15)
!6830 = !DILocation(line: 1826, column: 87, scope: !6824)
!6831 = !DILocalVariable(name: "width", arg: 4, scope: !6824, file: !103, line: 1827, type: !72)
!6832 = !DILocation(line: 1827, column: 41, scope: !6824)
!6833 = !DILocalVariable(name: "height", arg: 5, scope: !6824, file: !103, line: 1827, type: !72)
!6834 = !DILocation(line: 1827, column: 52, scope: !6824)
!6835 = !DILocalVariable(name: "src1Stride", arg: 6, scope: !6824, file: !103, line: 1827, type: !72)
!6836 = !DILocation(line: 1827, column: 64, scope: !6824)
!6837 = !DILocalVariable(name: "src2Stride", arg: 7, scope: !6824, file: !103, line: 1828, type: !72)
!6838 = !DILocation(line: 1828, column: 41, scope: !6824)
!6839 = !DILocalVariable(name: "dstStride", arg: 8, scope: !6824, file: !103, line: 1828, type: !72)
!6840 = !DILocation(line: 1828, column: 57, scope: !6824)
!6841 = !DILocalVariable(name: "h", scope: !6824, file: !103, line: 1830, type: !72)
!6842 = !DILocation(line: 1830, column: 9, scope: !6824)
!6843 = !DILocation(line: 1832, column: 11, scope: !6844)
!6844 = distinct !DILexicalBlock(scope: !6824, file: !103, line: 1832, column: 5)
!6845 = !DILocation(line: 1832, column: 10, scope: !6844)
!6846 = !DILocation(line: 1832, column: 15, scope: !6847)
!6847 = !DILexicalBlockFile(scope: !6848, file: !103, discriminator: 1)
!6848 = distinct !DILexicalBlock(scope: !6844, file: !103, line: 1832, column: 5)
!6849 = !DILocation(line: 1832, column: 19, scope: !6847)
!6850 = !DILocation(line: 1832, column: 17, scope: !6847)
!6851 = !DILocation(line: 1832, column: 5, scope: !6847)
!6852 = !DILocalVariable(name: "w", scope: !6853, file: !103, line: 1833, type: !72)
!6853 = distinct !DILexicalBlock(scope: !6848, file: !103, line: 1832, column: 32)
!6854 = !DILocation(line: 1833, column: 13, scope: !6853)
!6855 = !DILocation(line: 1835, column: 13, scope: !6856)
!6856 = distinct !DILexicalBlock(scope: !6853, file: !103, line: 1835, column: 13)
!6857 = !DILocation(line: 1835, column: 19, scope: !6856)
!6858 = !DILocation(line: 1835, column: 13, scope: !6853)
!6859 = !DILocation(line: 1880, column: 19, scope: !6860)
!6860 = distinct !DILexicalBlock(scope: !6856, file: !103, line: 1835, column: 26)
!6861 = !DILocation(line: 1880, column: 30, scope: !6860)
!6862 = !DILocation(line: 1880, column: 41, scope: !6860)
!6863 = !DILocation(line: 1880, column: 62, scope: !6860)
!6864 = !DILocation(line: 1880, column: 53, scope: !6860)
!6865 = !DILocation(line: 1880, column: 67, scope: !6860)
!6866 = !DILocation(line: 1858, column: 9, scope: !6860)
!6867 = !{i32 314569, i32 314605, i32 314663, i32 314723, i32 314783, i32 314838, i32 314893, i32 314951, i32 315009, i32 315064, i32 315119, i32 315177, i32 315235, i32 315293, i32 315351, i32 315421, i32 315491, i32 315561, i32 315631, i32 315699, i32 315767, i32 315838}
!6868 = !DILocation(line: 1884, column: 9, scope: !6860)
!6869 = !DILocation(line: 1885, column: 18, scope: !6870)
!6870 = distinct !DILexicalBlock(scope: !6853, file: !103, line: 1885, column: 9)
!6871 = !DILocation(line: 1885, column: 23, scope: !6870)
!6872 = !DILocation(line: 1885, column: 15, scope: !6870)
!6873 = !DILocation(line: 1885, column: 14, scope: !6870)
!6874 = !DILocation(line: 1885, column: 32, scope: !6875)
!6875 = !DILexicalBlockFile(scope: !6876, file: !103, discriminator: 1)
!6876 = distinct !DILexicalBlock(scope: !6870, file: !103, line: 1885, column: 9)
!6877 = !DILocation(line: 1885, column: 36, scope: !6875)
!6878 = !DILocation(line: 1885, column: 34, scope: !6875)
!6879 = !DILocation(line: 1885, column: 9, scope: !6875)
!6880 = !DILocation(line: 1886, column: 32, scope: !6881)
!6881 = distinct !DILexicalBlock(scope: !6876, file: !103, line: 1885, column: 48)
!6882 = !DILocation(line: 1886, column: 27, scope: !6881)
!6883 = !DILocation(line: 1886, column: 20, scope: !6881)
!6884 = !DILocation(line: 1886, column: 19, scope: !6881)
!6885 = !DILocation(line: 1886, column: 21, scope: !6881)
!6886 = !DILocation(line: 1886, column: 13, scope: !6881)
!6887 = !DILocation(line: 1886, column: 25, scope: !6881)
!6888 = !DILocation(line: 1887, column: 32, scope: !6881)
!6889 = !DILocation(line: 1887, column: 27, scope: !6881)
!6890 = !DILocation(line: 1887, column: 20, scope: !6881)
!6891 = !DILocation(line: 1887, column: 19, scope: !6881)
!6892 = !DILocation(line: 1887, column: 21, scope: !6881)
!6893 = !DILocation(line: 1887, column: 13, scope: !6881)
!6894 = !DILocation(line: 1887, column: 25, scope: !6881)
!6895 = !DILocation(line: 1888, column: 9, scope: !6881)
!6896 = !DILocation(line: 1885, column: 44, scope: !6897)
!6897 = !DILexicalBlockFile(scope: !6876, file: !103, discriminator: 2)
!6898 = !DILocation(line: 1885, column: 9, scope: !6897)
!6899 = distinct !{!6899, !6900}
!6900 = !DILocation(line: 1885, column: 9, scope: !6853)
!6901 = !DILocation(line: 1889, column: 17, scope: !6853)
!6902 = !DILocation(line: 1889, column: 14, scope: !6853)
!6903 = !DILocation(line: 1890, column: 17, scope: !6853)
!6904 = !DILocation(line: 1890, column: 14, scope: !6853)
!6905 = !DILocation(line: 1891, column: 17, scope: !6853)
!6906 = !DILocation(line: 1891, column: 14, scope: !6853)
!6907 = !DILocation(line: 1892, column: 5, scope: !6853)
!6908 = !DILocation(line: 1832, column: 28, scope: !6909)
!6909 = !DILexicalBlockFile(scope: !6848, file: !103, discriminator: 2)
!6910 = !DILocation(line: 1832, column: 5, scope: !6909)
!6911 = distinct !{!6911, !6912}
!6912 = !DILocation(line: 1832, column: 5, scope: !6824)
!6913 = !DILocation(line: 1893, column: 5, scope: !6824)
!6914 = !{i32 316211, i32 316227, i32 316259}
!6915 = !DILocation(line: 1898, column: 1, scope: !6824)
!6916 = distinct !DISubprogram(name: "yuvPlanartoyuy2_mmxext", scope: !103, file: !103, line: 1105, type: !2009, isLocal: true, isDefinition: true, scopeLine: 1108, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!6917 = !DILocalVariable(name: "ysrc", arg: 1, scope: !6916, file: !103, line: 1105, type: !182)
!6918 = !DILocation(line: 1105, column: 58, scope: !6916)
!6919 = !DILocalVariable(name: "usrc", arg: 2, scope: !6916, file: !103, line: 1105, type: !182)
!6920 = !DILocation(line: 1105, column: 79, scope: !6916)
!6921 = !DILocalVariable(name: "vsrc", arg: 3, scope: !6916, file: !103, line: 1105, type: !182)
!6922 = !DILocation(line: 1105, column: 100, scope: !6916)
!6923 = !DILocalVariable(name: "dst", arg: 4, scope: !6916, file: !103, line: 1105, type: !15)
!6924 = !DILocation(line: 1105, column: 115, scope: !6916)
!6925 = !DILocalVariable(name: "width", arg: 5, scope: !6916, file: !103, line: 1106, type: !72)
!6926 = !DILocation(line: 1106, column: 48, scope: !6916)
!6927 = !DILocalVariable(name: "height", arg: 6, scope: !6916, file: !103, line: 1106, type: !72)
!6928 = !DILocation(line: 1106, column: 59, scope: !6916)
!6929 = !DILocalVariable(name: "lumStride", arg: 7, scope: !6916, file: !103, line: 1107, type: !72)
!6930 = !DILocation(line: 1107, column: 48, scope: !6916)
!6931 = !DILocalVariable(name: "chromStride", arg: 8, scope: !6916, file: !103, line: 1107, type: !72)
!6932 = !DILocation(line: 1107, column: 63, scope: !6916)
!6933 = !DILocalVariable(name: "dstStride", arg: 9, scope: !6916, file: !103, line: 1107, type: !72)
!6934 = !DILocation(line: 1107, column: 80, scope: !6916)
!6935 = !DILocalVariable(name: "vertLumPerChroma", arg: 10, scope: !6916, file: !103, line: 1107, type: !72)
!6936 = !DILocation(line: 1107, column: 95, scope: !6916)
!6937 = !DILocalVariable(name: "y", scope: !6916, file: !103, line: 1109, type: !72)
!6938 = !DILocation(line: 1109, column: 9, scope: !6916)
!6939 = !DILocalVariable(name: "chromWidth", scope: !6916, file: !103, line: 1110, type: !1759)
!6940 = !DILocation(line: 1110, column: 19, scope: !6916)
!6941 = !DILocation(line: 1110, column: 31, scope: !6916)
!6942 = !DILocation(line: 1110, column: 36, scope: !6916)
!6943 = !DILocation(line: 1111, column: 11, scope: !6944)
!6944 = distinct !DILexicalBlock(scope: !6916, file: !103, line: 1111, column: 5)
!6945 = !DILocation(line: 1111, column: 10, scope: !6944)
!6946 = !DILocation(line: 1111, column: 15, scope: !6947)
!6947 = !DILexicalBlockFile(scope: !6948, file: !103, discriminator: 1)
!6948 = distinct !DILexicalBlock(scope: !6944, file: !103, line: 1111, column: 5)
!6949 = !DILocation(line: 1111, column: 17, scope: !6947)
!6950 = !DILocation(line: 1111, column: 16, scope: !6947)
!6951 = !DILocation(line: 1111, column: 5, scope: !6947)
!6952 = !DILocation(line: 1143, column: 19, scope: !6953)
!6953 = distinct !DILexicalBlock(scope: !6948, file: !103, line: 1111, column: 30)
!6954 = !DILocation(line: 1143, column: 29, scope: !6953)
!6955 = !DILocation(line: 1143, column: 40, scope: !6953)
!6956 = !DILocation(line: 1143, column: 51, scope: !6953)
!6957 = !DILocation(line: 1143, column: 63, scope: !6953)
!6958 = !DILocation(line: 1113, column: 9, scope: !6953)
!6959 = !{i32 284513, i32 284557, i32 284619, i32 284681, i32 284745, i32 284809, i32 284873, i32 284932, i32 284994, i32 285053, i32 285115, i32 285177, i32 285237, i32 285296, i32 285358, i32 285420, i32 285482, i32 285544, i32 285606, i32 285668, i32 285745, i32 285821, i32 285897, i32 285973, i32 286034, i32 286094, i32 286157}
!6960 = !DILocation(line: 1146, column: 14, scope: !6961)
!6961 = distinct !DILexicalBlock(scope: !6953, file: !103, line: 1146, column: 13)
!6962 = !DILocation(line: 1146, column: 17, scope: !6961)
!6963 = !DILocation(line: 1146, column: 33, scope: !6961)
!6964 = !DILocation(line: 1146, column: 15, scope: !6961)
!6965 = !DILocation(line: 1146, column: 41, scope: !6961)
!6966 = !DILocation(line: 1146, column: 57, scope: !6961)
!6967 = !DILocation(line: 1146, column: 38, scope: !6961)
!6968 = !DILocation(line: 1146, column: 13, scope: !6953)
!6969 = !DILocation(line: 1147, column: 21, scope: !6970)
!6970 = distinct !DILexicalBlock(scope: !6961, file: !103, line: 1146, column: 61)
!6971 = !DILocation(line: 1147, column: 18, scope: !6970)
!6972 = !DILocation(line: 1148, column: 21, scope: !6970)
!6973 = !DILocation(line: 1148, column: 18, scope: !6970)
!6974 = !DILocation(line: 1149, column: 9, scope: !6970)
!6975 = !DILocation(line: 1150, column: 17, scope: !6953)
!6976 = !DILocation(line: 1150, column: 14, scope: !6953)
!6977 = !DILocation(line: 1151, column: 16, scope: !6953)
!6978 = !DILocation(line: 1151, column: 13, scope: !6953)
!6979 = !DILocation(line: 1152, column: 5, scope: !6953)
!6980 = !DILocation(line: 1111, column: 26, scope: !6981)
!6981 = !DILexicalBlockFile(scope: !6948, file: !103, discriminator: 2)
!6982 = !DILocation(line: 1111, column: 5, scope: !6981)
!6983 = distinct !{!6983, !6984}
!6984 = !DILocation(line: 1111, column: 5, scope: !6916)
!6985 = !DILocation(line: 1153, column: 5, scope: !6916)
!6986 = !{i32 286478, i32 286494, i32 286526}
!6987 = !DILocation(line: 1156, column: 1, scope: !6916)
!6988 = distinct !DISubprogram(name: "yuvPlanartouyvy_mmxext", scope: !103, file: !103, line: 1170, type: !2009, isLocal: true, isDefinition: true, scopeLine: 1173, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!6989 = !DILocalVariable(name: "ysrc", arg: 1, scope: !6988, file: !103, line: 1170, type: !182)
!6990 = !DILocation(line: 1170, column: 58, scope: !6988)
!6991 = !DILocalVariable(name: "usrc", arg: 2, scope: !6988, file: !103, line: 1170, type: !182)
!6992 = !DILocation(line: 1170, column: 79, scope: !6988)
!6993 = !DILocalVariable(name: "vsrc", arg: 3, scope: !6988, file: !103, line: 1170, type: !182)
!6994 = !DILocation(line: 1170, column: 100, scope: !6988)
!6995 = !DILocalVariable(name: "dst", arg: 4, scope: !6988, file: !103, line: 1170, type: !15)
!6996 = !DILocation(line: 1170, column: 115, scope: !6988)
!6997 = !DILocalVariable(name: "width", arg: 5, scope: !6988, file: !103, line: 1171, type: !72)
!6998 = !DILocation(line: 1171, column: 48, scope: !6988)
!6999 = !DILocalVariable(name: "height", arg: 6, scope: !6988, file: !103, line: 1171, type: !72)
!7000 = !DILocation(line: 1171, column: 59, scope: !6988)
!7001 = !DILocalVariable(name: "lumStride", arg: 7, scope: !6988, file: !103, line: 1172, type: !72)
!7002 = !DILocation(line: 1172, column: 48, scope: !6988)
!7003 = !DILocalVariable(name: "chromStride", arg: 8, scope: !6988, file: !103, line: 1172, type: !72)
!7004 = !DILocation(line: 1172, column: 63, scope: !6988)
!7005 = !DILocalVariable(name: "dstStride", arg: 9, scope: !6988, file: !103, line: 1172, type: !72)
!7006 = !DILocation(line: 1172, column: 80, scope: !6988)
!7007 = !DILocalVariable(name: "vertLumPerChroma", arg: 10, scope: !6988, file: !103, line: 1172, type: !72)
!7008 = !DILocation(line: 1172, column: 95, scope: !6988)
!7009 = !DILocalVariable(name: "y", scope: !6988, file: !103, line: 1174, type: !72)
!7010 = !DILocation(line: 1174, column: 9, scope: !6988)
!7011 = !DILocalVariable(name: "chromWidth", scope: !6988, file: !103, line: 1175, type: !1759)
!7012 = !DILocation(line: 1175, column: 19, scope: !6988)
!7013 = !DILocation(line: 1175, column: 31, scope: !6988)
!7014 = !DILocation(line: 1175, column: 36, scope: !6988)
!7015 = !DILocation(line: 1176, column: 11, scope: !7016)
!7016 = distinct !DILexicalBlock(scope: !6988, file: !103, line: 1176, column: 5)
!7017 = !DILocation(line: 1176, column: 10, scope: !7016)
!7018 = !DILocation(line: 1176, column: 15, scope: !7019)
!7019 = !DILexicalBlockFile(scope: !7020, file: !103, discriminator: 1)
!7020 = distinct !DILexicalBlock(scope: !7016, file: !103, line: 1176, column: 5)
!7021 = !DILocation(line: 1176, column: 17, scope: !7019)
!7022 = !DILocation(line: 1176, column: 16, scope: !7019)
!7023 = !DILocation(line: 1176, column: 5, scope: !7019)
!7024 = !DILocation(line: 1208, column: 19, scope: !7025)
!7025 = distinct !DILexicalBlock(scope: !7020, file: !103, line: 1176, column: 30)
!7026 = !DILocation(line: 1208, column: 29, scope: !7025)
!7027 = !DILocation(line: 1208, column: 40, scope: !7025)
!7028 = !DILocation(line: 1208, column: 51, scope: !7025)
!7029 = !DILocation(line: 1208, column: 63, scope: !7025)
!7030 = !DILocation(line: 1178, column: 9, scope: !7025)
!7031 = !{i32 287353, i32 287393, i32 287455, i32 287517, i32 287581, i32 287645, i32 287709, i32 287768, i32 287830, i32 287889, i32 287951, i32 288013, i32 288073, i32 288132, i32 288194, i32 288256, i32 288318, i32 288380, i32 288442, i32 288504, i32 288581, i32 288657, i32 288733, i32 288809, i32 288869, i32 288928, i32 288990}
!7032 = !DILocation(line: 1211, column: 14, scope: !7033)
!7033 = distinct !DILexicalBlock(scope: !7025, file: !103, line: 1211, column: 13)
!7034 = !DILocation(line: 1211, column: 17, scope: !7033)
!7035 = !DILocation(line: 1211, column: 33, scope: !7033)
!7036 = !DILocation(line: 1211, column: 15, scope: !7033)
!7037 = !DILocation(line: 1211, column: 41, scope: !7033)
!7038 = !DILocation(line: 1211, column: 57, scope: !7033)
!7039 = !DILocation(line: 1211, column: 38, scope: !7033)
!7040 = !DILocation(line: 1211, column: 13, scope: !7025)
!7041 = !DILocation(line: 1212, column: 21, scope: !7042)
!7042 = distinct !DILexicalBlock(scope: !7033, file: !103, line: 1211, column: 61)
!7043 = !DILocation(line: 1212, column: 18, scope: !7042)
!7044 = !DILocation(line: 1213, column: 21, scope: !7042)
!7045 = !DILocation(line: 1213, column: 18, scope: !7042)
!7046 = !DILocation(line: 1214, column: 9, scope: !7042)
!7047 = !DILocation(line: 1215, column: 17, scope: !7025)
!7048 = !DILocation(line: 1215, column: 14, scope: !7025)
!7049 = !DILocation(line: 1216, column: 16, scope: !7025)
!7050 = !DILocation(line: 1216, column: 13, scope: !7025)
!7051 = !DILocation(line: 1217, column: 5, scope: !7025)
!7052 = !DILocation(line: 1176, column: 26, scope: !7053)
!7053 = !DILexicalBlockFile(scope: !7020, file: !103, discriminator: 2)
!7054 = !DILocation(line: 1176, column: 5, scope: !7053)
!7055 = distinct !{!7055, !7056}
!7056 = !DILocation(line: 1176, column: 5, scope: !6988)
!7057 = !DILocation(line: 1218, column: 5, scope: !6988)
!7058 = !{i32 289311, i32 289327, i32 289359}
!7059 = !DILocation(line: 1221, column: 1, scope: !6988)
!7060 = distinct !DISubprogram(name: "extract_odd_mmxext", scope: !103, file: !103, line: 2150, type: !2859, isLocal: true, isDefinition: true, scopeLine: 2151, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!7061 = !DILocalVariable(name: "src", arg: 1, scope: !7060, file: !103, line: 2150, type: !182)
!7062 = !DILocation(line: 2150, column: 47, scope: !7060)
!7063 = !DILocalVariable(name: "dst", arg: 2, scope: !7060, file: !103, line: 2150, type: !15)
!7064 = !DILocation(line: 2150, column: 61, scope: !7060)
!7065 = !DILocalVariable(name: "count", arg: 3, scope: !7060, file: !103, line: 2150, type: !18)
!7066 = !DILocation(line: 2150, column: 74, scope: !7060)
!7067 = !DILocation(line: 2152, column: 9, scope: !7060)
!7068 = !DILocation(line: 2153, column: 12, scope: !7060)
!7069 = !DILocation(line: 2153, column: 9, scope: !7060)
!7070 = !DILocation(line: 2154, column: 14, scope: !7060)
!7071 = !DILocation(line: 2154, column: 13, scope: !7060)
!7072 = !DILocation(line: 2154, column: 9, scope: !7060)
!7073 = !DILocation(line: 2155, column: 14, scope: !7060)
!7074 = !DILocation(line: 2155, column: 12, scope: !7060)
!7075 = !DILocation(line: 2155, column: 10, scope: !7060)
!7076 = !DILocation(line: 2157, column: 8, scope: !7077)
!7077 = distinct !DILexicalBlock(scope: !7060, file: !103, line: 2157, column: 8)
!7078 = !DILocation(line: 2157, column: 14, scope: !7077)
!7079 = !DILocation(line: 2157, column: 8, scope: !7060)
!7080 = !DILocation(line: 2158, column: 15, scope: !7081)
!7081 = distinct !DILexicalBlock(scope: !7077, file: !103, line: 2157, column: 21)
!7082 = !DILocation(line: 2159, column: 9, scope: !7081)
!7083 = !DILocation(line: 2178, column: 19, scope: !7081)
!7084 = !DILocation(line: 2178, column: 29, scope: !7081)
!7085 = !{i32 325265, i32 325302, i32 325355, i32 325408, i32 325461, i32 325514, i32 325567, i32 325620, i32 325673, i32 325726, i32 325779, i32 325832, i32 325885, i32 325938, i32 325993, i32 326048, i32 326101, i32 326154}
!7086 = !DILocation(line: 2180, column: 15, scope: !7081)
!7087 = !DILocation(line: 2181, column: 5, scope: !7081)
!7088 = !DILocation(line: 2182, column: 5, scope: !7060)
!7089 = !DILocation(line: 2182, column: 11, scope: !7090)
!7090 = !DILexicalBlockFile(scope: !7060, file: !103, discriminator: 1)
!7091 = !DILocation(line: 2182, column: 16, scope: !7090)
!7092 = !DILocation(line: 2182, column: 5, scope: !7090)
!7093 = !DILocation(line: 2183, column: 27, scope: !7094)
!7094 = distinct !DILexicalBlock(scope: !7060, file: !103, line: 2182, column: 20)
!7095 = !DILocation(line: 2183, column: 26, scope: !7094)
!7096 = !DILocation(line: 2183, column: 21, scope: !7094)
!7097 = !DILocation(line: 2183, column: 13, scope: !7094)
!7098 = !DILocation(line: 2183, column: 9, scope: !7094)
!7099 = !DILocation(line: 2183, column: 19, scope: !7094)
!7100 = !DILocation(line: 2184, column: 14, scope: !7094)
!7101 = !DILocation(line: 2182, column: 5, scope: !7102)
!7102 = !DILexicalBlockFile(scope: !7060, file: !103, discriminator: 2)
!7103 = distinct !{!7103, !7088}
!7104 = !DILocation(line: 2186, column: 1, scope: !7060)
!7105 = distinct !DISubprogram(name: "extract_even2_mmxext", scope: !103, file: !103, line: 2189, type: !2906, isLocal: true, isDefinition: true, scopeLine: 2190, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!7106 = !DILocalVariable(name: "src", arg: 1, scope: !7105, file: !103, line: 2189, type: !182)
!7107 = !DILocation(line: 2189, column: 49, scope: !7105)
!7108 = !DILocalVariable(name: "dst0", arg: 2, scope: !7105, file: !103, line: 2189, type: !15)
!7109 = !DILocation(line: 2189, column: 63, scope: !7105)
!7110 = !DILocalVariable(name: "dst1", arg: 3, scope: !7105, file: !103, line: 2189, type: !15)
!7111 = !DILocation(line: 2189, column: 78, scope: !7105)
!7112 = !DILocalVariable(name: "count", arg: 4, scope: !7105, file: !103, line: 2189, type: !18)
!7113 = !DILocation(line: 2189, column: 92, scope: !7105)
!7114 = !DILocation(line: 2191, column: 12, scope: !7105)
!7115 = !DILocation(line: 2191, column: 9, scope: !7105)
!7116 = !DILocation(line: 2192, column: 12, scope: !7105)
!7117 = !DILocation(line: 2192, column: 9, scope: !7105)
!7118 = !DILocation(line: 2193, column: 14, scope: !7105)
!7119 = !DILocation(line: 2193, column: 13, scope: !7105)
!7120 = !DILocation(line: 2193, column: 9, scope: !7105)
!7121 = !DILocation(line: 2194, column: 14, scope: !7105)
!7122 = !DILocation(line: 2194, column: 12, scope: !7105)
!7123 = !DILocation(line: 2194, column: 10, scope: !7105)
!7124 = !DILocation(line: 2195, column: 8, scope: !7125)
!7125 = distinct !DILexicalBlock(scope: !7105, file: !103, line: 2195, column: 8)
!7126 = !DILocation(line: 2195, column: 14, scope: !7125)
!7127 = !DILocation(line: 2195, column: 8, scope: !7105)
!7128 = !DILocation(line: 2196, column: 15, scope: !7129)
!7129 = distinct !DILexicalBlock(scope: !7125, file: !103, line: 2195, column: 21)
!7130 = !DILocation(line: 2197, column: 9, scope: !7129)
!7131 = !DILocation(line: 2224, column: 19, scope: !7129)
!7132 = !DILocation(line: 2224, column: 29, scope: !7129)
!7133 = !DILocation(line: 2224, column: 40, scope: !7129)
!7134 = !{i32 326593, i32 326630, i32 326683, i32 326736, i32 326789, i32 326842, i32 326895, i32 326948, i32 327001, i32 327054, i32 327107, i32 327160, i32 327213, i32 327266, i32 327319, i32 327372, i32 327425, i32 327478, i32 327531, i32 327584, i32 327637, i32 327690, i32 327745, i32 327800, i32 327853, i32 327906}
!7135 = !DILocation(line: 2226, column: 15, scope: !7129)
!7136 = !DILocation(line: 2227, column: 5, scope: !7129)
!7137 = !DILocation(line: 2228, column: 5, scope: !7105)
!7138 = !DILocation(line: 2228, column: 11, scope: !7139)
!7139 = !DILexicalBlockFile(scope: !7105, file: !103, discriminator: 1)
!7140 = !DILocation(line: 2228, column: 16, scope: !7139)
!7141 = !DILocation(line: 2228, column: 5, scope: !7139)
!7142 = !DILocation(line: 2229, column: 28, scope: !7143)
!7143 = distinct !DILexicalBlock(scope: !7105, file: !103, line: 2228, column: 20)
!7144 = !DILocation(line: 2229, column: 27, scope: !7143)
!7145 = !DILocation(line: 2229, column: 33, scope: !7143)
!7146 = !DILocation(line: 2229, column: 22, scope: !7143)
!7147 = !DILocation(line: 2229, column: 14, scope: !7143)
!7148 = !DILocation(line: 2229, column: 9, scope: !7143)
!7149 = !DILocation(line: 2229, column: 20, scope: !7143)
!7150 = !DILocation(line: 2230, column: 28, scope: !7143)
!7151 = !DILocation(line: 2230, column: 27, scope: !7143)
!7152 = !DILocation(line: 2230, column: 33, scope: !7143)
!7153 = !DILocation(line: 2230, column: 22, scope: !7143)
!7154 = !DILocation(line: 2230, column: 14, scope: !7143)
!7155 = !DILocation(line: 2230, column: 9, scope: !7143)
!7156 = !DILocation(line: 2230, column: 20, scope: !7143)
!7157 = !DILocation(line: 2231, column: 14, scope: !7143)
!7158 = !DILocation(line: 2228, column: 5, scope: !7159)
!7159 = !DILexicalBlockFile(scope: !7105, file: !103, discriminator: 2)
!7160 = distinct !{!7160, !7137}
!7161 = !DILocation(line: 2233, column: 1, scope: !7105)
!7162 = distinct !DISubprogram(name: "extract_even_mmxext", scope: !103, file: !103, line: 2113, type: !2859, isLocal: true, isDefinition: true, scopeLine: 2114, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!7163 = !DILocalVariable(name: "src", arg: 1, scope: !7162, file: !103, line: 2113, type: !182)
!7164 = !DILocation(line: 2113, column: 48, scope: !7162)
!7165 = !DILocalVariable(name: "dst", arg: 2, scope: !7162, file: !103, line: 2113, type: !15)
!7166 = !DILocation(line: 2113, column: 62, scope: !7162)
!7167 = !DILocalVariable(name: "count", arg: 3, scope: !7162, file: !103, line: 2113, type: !18)
!7168 = !DILocation(line: 2113, column: 75, scope: !7162)
!7169 = !DILocation(line: 2115, column: 12, scope: !7162)
!7170 = !DILocation(line: 2115, column: 9, scope: !7162)
!7171 = !DILocation(line: 2116, column: 14, scope: !7162)
!7172 = !DILocation(line: 2116, column: 13, scope: !7162)
!7173 = !DILocation(line: 2116, column: 9, scope: !7162)
!7174 = !DILocation(line: 2117, column: 14, scope: !7162)
!7175 = !DILocation(line: 2117, column: 12, scope: !7162)
!7176 = !DILocation(line: 2117, column: 10, scope: !7162)
!7177 = !DILocation(line: 2119, column: 8, scope: !7178)
!7178 = distinct !DILexicalBlock(scope: !7162, file: !103, line: 2119, column: 8)
!7179 = !DILocation(line: 2119, column: 14, scope: !7178)
!7180 = !DILocation(line: 2119, column: 8, scope: !7162)
!7181 = !DILocation(line: 2120, column: 15, scope: !7182)
!7182 = distinct !DILexicalBlock(scope: !7178, file: !103, line: 2119, column: 22)
!7183 = !DILocation(line: 2121, column: 9, scope: !7182)
!7184 = !DILocation(line: 2140, column: 19, scope: !7182)
!7185 = !DILocation(line: 2140, column: 29, scope: !7182)
!7186 = !{i32 323960, i32 323997, i32 324050, i32 324103, i32 324156, i32 324209, i32 324262, i32 324315, i32 324368, i32 324421, i32 324474, i32 324527, i32 324580, i32 324633, i32 324688, i32 324743, i32 324796, i32 324849}
!7187 = !DILocation(line: 2142, column: 15, scope: !7182)
!7188 = !DILocation(line: 2143, column: 5, scope: !7182)
!7189 = !DILocation(line: 2144, column: 5, scope: !7162)
!7190 = !DILocation(line: 2144, column: 11, scope: !7191)
!7191 = !DILexicalBlockFile(scope: !7162, file: !103, discriminator: 1)
!7192 = !DILocation(line: 2144, column: 16, scope: !7191)
!7193 = !DILocation(line: 2144, column: 5, scope: !7191)
!7194 = !DILocation(line: 2145, column: 27, scope: !7195)
!7195 = distinct !DILexicalBlock(scope: !7162, file: !103, line: 2144, column: 20)
!7196 = !DILocation(line: 2145, column: 26, scope: !7195)
!7197 = !DILocation(line: 2145, column: 21, scope: !7195)
!7198 = !DILocation(line: 2145, column: 13, scope: !7195)
!7199 = !DILocation(line: 2145, column: 9, scope: !7195)
!7200 = !DILocation(line: 2145, column: 19, scope: !7195)
!7201 = !DILocation(line: 2146, column: 14, scope: !7195)
!7202 = !DILocation(line: 2144, column: 5, scope: !7203)
!7203 = !DILexicalBlockFile(scope: !7162, file: !103, discriminator: 2)
!7204 = distinct !{!7204, !7189}
!7205 = !DILocation(line: 2148, column: 1, scope: !7162)
!7206 = distinct !DISubprogram(name: "extract_odd2_mmxext", scope: !103, file: !103, line: 2290, type: !2906, isLocal: true, isDefinition: true, scopeLine: 2291, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!7207 = !DILocalVariable(name: "src", arg: 1, scope: !7206, file: !103, line: 2290, type: !182)
!7208 = !DILocation(line: 2290, column: 48, scope: !7206)
!7209 = !DILocalVariable(name: "dst0", arg: 2, scope: !7206, file: !103, line: 2290, type: !15)
!7210 = !DILocation(line: 2290, column: 62, scope: !7206)
!7211 = !DILocalVariable(name: "dst1", arg: 3, scope: !7206, file: !103, line: 2290, type: !15)
!7212 = !DILocation(line: 2290, column: 77, scope: !7206)
!7213 = !DILocalVariable(name: "count", arg: 4, scope: !7206, file: !103, line: 2290, type: !18)
!7214 = !DILocation(line: 2290, column: 91, scope: !7206)
!7215 = !DILocation(line: 2292, column: 12, scope: !7206)
!7216 = !DILocation(line: 2292, column: 9, scope: !7206)
!7217 = !DILocation(line: 2293, column: 12, scope: !7206)
!7218 = !DILocation(line: 2293, column: 9, scope: !7206)
!7219 = !DILocation(line: 2294, column: 14, scope: !7206)
!7220 = !DILocation(line: 2294, column: 13, scope: !7206)
!7221 = !DILocation(line: 2294, column: 9, scope: !7206)
!7222 = !DILocation(line: 2295, column: 14, scope: !7206)
!7223 = !DILocation(line: 2295, column: 12, scope: !7206)
!7224 = !DILocation(line: 2295, column: 10, scope: !7206)
!7225 = !DILocation(line: 2296, column: 8, scope: !7226)
!7226 = distinct !DILexicalBlock(scope: !7206, file: !103, line: 2296, column: 8)
!7227 = !DILocation(line: 2296, column: 14, scope: !7226)
!7228 = !DILocation(line: 2296, column: 8, scope: !7206)
!7229 = !DILocation(line: 2297, column: 15, scope: !7230)
!7230 = distinct !DILexicalBlock(scope: !7226, file: !103, line: 2296, column: 21)
!7231 = !DILocation(line: 2298, column: 9, scope: !7230)
!7232 = !DILocation(line: 2325, column: 19, scope: !7230)
!7233 = !DILocation(line: 2325, column: 29, scope: !7230)
!7234 = !DILocation(line: 2325, column: 40, scope: !7230)
!7235 = !{i32 330552, i32 330589, i32 330642, i32 330695, i32 330748, i32 330801, i32 330854, i32 330907, i32 330960, i32 331013, i32 331066, i32 331119, i32 331172, i32 331225, i32 331278, i32 331331, i32 331384, i32 331437, i32 331490, i32 331543, i32 331596, i32 331649, i32 331704, i32 331759, i32 331812, i32 331865}
!7236 = !DILocation(line: 2327, column: 15, scope: !7230)
!7237 = !DILocation(line: 2328, column: 5, scope: !7230)
!7238 = !DILocation(line: 2329, column: 8, scope: !7206)
!7239 = !DILocation(line: 2330, column: 5, scope: !7206)
!7240 = !DILocation(line: 2330, column: 11, scope: !7241)
!7241 = !DILexicalBlockFile(scope: !7206, file: !103, discriminator: 1)
!7242 = !DILocation(line: 2330, column: 16, scope: !7241)
!7243 = !DILocation(line: 2330, column: 5, scope: !7241)
!7244 = !DILocation(line: 2331, column: 28, scope: !7245)
!7245 = distinct !DILexicalBlock(scope: !7206, file: !103, line: 2330, column: 20)
!7246 = !DILocation(line: 2331, column: 27, scope: !7245)
!7247 = !DILocation(line: 2331, column: 33, scope: !7245)
!7248 = !DILocation(line: 2331, column: 22, scope: !7245)
!7249 = !DILocation(line: 2331, column: 14, scope: !7245)
!7250 = !DILocation(line: 2331, column: 9, scope: !7245)
!7251 = !DILocation(line: 2331, column: 20, scope: !7245)
!7252 = !DILocation(line: 2332, column: 28, scope: !7245)
!7253 = !DILocation(line: 2332, column: 27, scope: !7245)
!7254 = !DILocation(line: 2332, column: 33, scope: !7245)
!7255 = !DILocation(line: 2332, column: 22, scope: !7245)
!7256 = !DILocation(line: 2332, column: 14, scope: !7245)
!7257 = !DILocation(line: 2332, column: 9, scope: !7245)
!7258 = !DILocation(line: 2332, column: 20, scope: !7245)
!7259 = !DILocation(line: 2333, column: 14, scope: !7245)
!7260 = !DILocation(line: 2330, column: 5, scope: !7261)
!7261 = !DILexicalBlockFile(scope: !7206, file: !103, discriminator: 2)
!7262 = distinct !{!7262, !7239}
!7263 = !DILocation(line: 2335, column: 1, scope: !7206)
!7264 = distinct !DISubprogram(name: "extract_odd2avg_mmxext", scope: !103, file: !103, line: 2338, type: !3067, isLocal: true, isDefinition: true, scopeLine: 2339, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!7265 = !DILocalVariable(name: "src0", arg: 1, scope: !7264, file: !103, line: 2338, type: !182)
!7266 = !DILocation(line: 2338, column: 51, scope: !7264)
!7267 = !DILocalVariable(name: "src1", arg: 2, scope: !7264, file: !103, line: 2338, type: !182)
!7268 = !DILocation(line: 2338, column: 72, scope: !7264)
!7269 = !DILocalVariable(name: "dst0", arg: 3, scope: !7264, file: !103, line: 2338, type: !15)
!7270 = !DILocation(line: 2338, column: 87, scope: !7264)
!7271 = !DILocalVariable(name: "dst1", arg: 4, scope: !7264, file: !103, line: 2338, type: !15)
!7272 = !DILocation(line: 2338, column: 102, scope: !7264)
!7273 = !DILocalVariable(name: "count", arg: 5, scope: !7264, file: !103, line: 2338, type: !18)
!7274 = !DILocation(line: 2338, column: 116, scope: !7264)
!7275 = !DILocation(line: 2340, column: 13, scope: !7264)
!7276 = !DILocation(line: 2340, column: 10, scope: !7264)
!7277 = !DILocation(line: 2341, column: 13, scope: !7264)
!7278 = !DILocation(line: 2341, column: 10, scope: !7264)
!7279 = !DILocation(line: 2342, column: 15, scope: !7264)
!7280 = !DILocation(line: 2342, column: 14, scope: !7264)
!7281 = !DILocation(line: 2342, column: 10, scope: !7264)
!7282 = !DILocation(line: 2343, column: 15, scope: !7264)
!7283 = !DILocation(line: 2343, column: 14, scope: !7264)
!7284 = !DILocation(line: 2343, column: 10, scope: !7264)
!7285 = !DILocation(line: 2344, column: 14, scope: !7264)
!7286 = !DILocation(line: 2344, column: 12, scope: !7264)
!7287 = !DILocation(line: 2344, column: 10, scope: !7264)
!7288 = !DILocation(line: 2346, column: 8, scope: !7289)
!7289 = distinct !DILexicalBlock(scope: !7264, file: !103, line: 2346, column: 8)
!7290 = !DILocation(line: 2346, column: 14, scope: !7289)
!7291 = !DILocation(line: 2346, column: 8, scope: !7264)
!7292 = !DILocation(line: 2347, column: 15, scope: !7293)
!7293 = distinct !DILexicalBlock(scope: !7289, file: !103, line: 2346, column: 21)
!7294 = !DILocation(line: 2348, column: 9, scope: !7293)
!7295 = !DILocation(line: 2379, column: 19, scope: !7293)
!7296 = !DILocation(line: 2379, column: 30, scope: !7293)
!7297 = !DILocation(line: 2379, column: 41, scope: !7293)
!7298 = !DILocation(line: 2379, column: 52, scope: !7293)
!7299 = !{i32 332415, i32 332453, i32 332507, i32 332560, i32 332614, i32 332668, i32 332722, i32 332776, i32 332832, i32 332888, i32 332944, i32 333000, i32 333054, i32 333108, i32 333162, i32 333216, i32 333270, i32 333324, i32 333378, i32 333432, i32 333486, i32 333540, i32 333594, i32 333648, i32 333702, i32 333756, i32 333812, i32 333868, i32 333922, i32 333975}
!7300 = !DILocation(line: 2381, column: 15, scope: !7293)
!7301 = !DILocation(line: 2382, column: 5, scope: !7293)
!7302 = !DILocation(line: 2384, column: 9, scope: !7264)
!7303 = !DILocation(line: 2385, column: 9, scope: !7264)
!7304 = !DILocation(line: 2386, column: 5, scope: !7264)
!7305 = !DILocation(line: 2386, column: 11, scope: !7306)
!7306 = !DILexicalBlockFile(scope: !7264, file: !103, discriminator: 1)
!7307 = !DILocation(line: 2386, column: 16, scope: !7306)
!7308 = !DILocation(line: 2386, column: 5, scope: !7306)
!7309 = !DILocation(line: 2387, column: 30, scope: !7310)
!7310 = distinct !DILexicalBlock(scope: !7264, file: !103, line: 2386, column: 20)
!7311 = !DILocation(line: 2387, column: 29, scope: !7310)
!7312 = !DILocation(line: 2387, column: 35, scope: !7310)
!7313 = !DILocation(line: 2387, column: 23, scope: !7310)
!7314 = !DILocation(line: 2387, column: 46, scope: !7310)
!7315 = !DILocation(line: 2387, column: 45, scope: !7310)
!7316 = !DILocation(line: 2387, column: 51, scope: !7310)
!7317 = !DILocation(line: 2387, column: 39, scope: !7310)
!7318 = !DILocation(line: 2387, column: 38, scope: !7310)
!7319 = !DILocation(line: 2387, column: 55, scope: !7310)
!7320 = !DILocation(line: 2387, column: 22, scope: !7310)
!7321 = !DILocation(line: 2387, column: 14, scope: !7310)
!7322 = !DILocation(line: 2387, column: 9, scope: !7310)
!7323 = !DILocation(line: 2387, column: 20, scope: !7310)
!7324 = !DILocation(line: 2388, column: 30, scope: !7310)
!7325 = !DILocation(line: 2388, column: 29, scope: !7310)
!7326 = !DILocation(line: 2388, column: 35, scope: !7310)
!7327 = !DILocation(line: 2388, column: 23, scope: !7310)
!7328 = !DILocation(line: 2388, column: 46, scope: !7310)
!7329 = !DILocation(line: 2388, column: 45, scope: !7310)
!7330 = !DILocation(line: 2388, column: 51, scope: !7310)
!7331 = !DILocation(line: 2388, column: 39, scope: !7310)
!7332 = !DILocation(line: 2388, column: 38, scope: !7310)
!7333 = !DILocation(line: 2388, column: 55, scope: !7310)
!7334 = !DILocation(line: 2388, column: 22, scope: !7310)
!7335 = !DILocation(line: 2388, column: 14, scope: !7310)
!7336 = !DILocation(line: 2388, column: 9, scope: !7310)
!7337 = !DILocation(line: 2388, column: 20, scope: !7310)
!7338 = !DILocation(line: 2389, column: 14, scope: !7310)
!7339 = !DILocation(line: 2386, column: 5, scope: !7340)
!7340 = !DILexicalBlockFile(scope: !7264, file: !103, discriminator: 2)
!7341 = distinct !{!7341, !7304}
!7342 = !DILocation(line: 2391, column: 1, scope: !7264)
!7343 = distinct !DISubprogram(name: "extract_even2avg_mmxext", scope: !103, file: !103, line: 2236, type: !3067, isLocal: true, isDefinition: true, scopeLine: 2237, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!7344 = !DILocalVariable(name: "src0", arg: 1, scope: !7343, file: !103, line: 2236, type: !182)
!7345 = !DILocation(line: 2236, column: 52, scope: !7343)
!7346 = !DILocalVariable(name: "src1", arg: 2, scope: !7343, file: !103, line: 2236, type: !182)
!7347 = !DILocation(line: 2236, column: 73, scope: !7343)
!7348 = !DILocalVariable(name: "dst0", arg: 3, scope: !7343, file: !103, line: 2236, type: !15)
!7349 = !DILocation(line: 2236, column: 88, scope: !7343)
!7350 = !DILocalVariable(name: "dst1", arg: 4, scope: !7343, file: !103, line: 2236, type: !15)
!7351 = !DILocation(line: 2236, column: 103, scope: !7343)
!7352 = !DILocalVariable(name: "count", arg: 5, scope: !7343, file: !103, line: 2236, type: !18)
!7353 = !DILocation(line: 2236, column: 117, scope: !7343)
!7354 = !DILocation(line: 2238, column: 13, scope: !7343)
!7355 = !DILocation(line: 2238, column: 10, scope: !7343)
!7356 = !DILocation(line: 2239, column: 13, scope: !7343)
!7357 = !DILocation(line: 2239, column: 10, scope: !7343)
!7358 = !DILocation(line: 2240, column: 15, scope: !7343)
!7359 = !DILocation(line: 2240, column: 14, scope: !7343)
!7360 = !DILocation(line: 2240, column: 10, scope: !7343)
!7361 = !DILocation(line: 2241, column: 15, scope: !7343)
!7362 = !DILocation(line: 2241, column: 14, scope: !7343)
!7363 = !DILocation(line: 2241, column: 10, scope: !7343)
!7364 = !DILocation(line: 2242, column: 14, scope: !7343)
!7365 = !DILocation(line: 2242, column: 12, scope: !7343)
!7366 = !DILocation(line: 2242, column: 10, scope: !7343)
!7367 = !DILocation(line: 2244, column: 8, scope: !7368)
!7368 = distinct !DILexicalBlock(scope: !7343, file: !103, line: 2244, column: 8)
!7369 = !DILocation(line: 2244, column: 14, scope: !7368)
!7370 = !DILocation(line: 2244, column: 8, scope: !7343)
!7371 = !DILocation(line: 2245, column: 15, scope: !7372)
!7372 = distinct !DILexicalBlock(scope: !7368, file: !103, line: 2244, column: 21)
!7373 = !DILocation(line: 2246, column: 9, scope: !7372)
!7374 = !DILocation(line: 2277, column: 19, scope: !7372)
!7375 = !DILocation(line: 2277, column: 30, scope: !7372)
!7376 = !DILocation(line: 2277, column: 41, scope: !7372)
!7377 = !DILocation(line: 2277, column: 52, scope: !7372)
!7378 = !{i32 328446, i32 328484, i32 328538, i32 328591, i32 328645, i32 328699, i32 328753, i32 328807, i32 328863, i32 328919, i32 328975, i32 329031, i32 329085, i32 329139, i32 329193, i32 329247, i32 329301, i32 329355, i32 329409, i32 329463, i32 329517, i32 329571, i32 329625, i32 329679, i32 329733, i32 329787, i32 329843, i32 329899, i32 329953, i32 330006}
!7379 = !DILocation(line: 2279, column: 15, scope: !7372)
!7380 = !DILocation(line: 2280, column: 5, scope: !7372)
!7381 = !DILocation(line: 2282, column: 5, scope: !7343)
!7382 = !DILocation(line: 2282, column: 11, scope: !7383)
!7383 = !DILexicalBlockFile(scope: !7343, file: !103, discriminator: 1)
!7384 = !DILocation(line: 2282, column: 16, scope: !7383)
!7385 = !DILocation(line: 2282, column: 5, scope: !7383)
!7386 = !DILocation(line: 2283, column: 30, scope: !7387)
!7387 = distinct !DILexicalBlock(scope: !7343, file: !103, line: 2282, column: 20)
!7388 = !DILocation(line: 2283, column: 29, scope: !7387)
!7389 = !DILocation(line: 2283, column: 35, scope: !7387)
!7390 = !DILocation(line: 2283, column: 23, scope: !7387)
!7391 = !DILocation(line: 2283, column: 46, scope: !7387)
!7392 = !DILocation(line: 2283, column: 45, scope: !7387)
!7393 = !DILocation(line: 2283, column: 51, scope: !7387)
!7394 = !DILocation(line: 2283, column: 39, scope: !7387)
!7395 = !DILocation(line: 2283, column: 38, scope: !7387)
!7396 = !DILocation(line: 2283, column: 55, scope: !7387)
!7397 = !DILocation(line: 2283, column: 22, scope: !7387)
!7398 = !DILocation(line: 2283, column: 14, scope: !7387)
!7399 = !DILocation(line: 2283, column: 9, scope: !7387)
!7400 = !DILocation(line: 2283, column: 20, scope: !7387)
!7401 = !DILocation(line: 2284, column: 30, scope: !7387)
!7402 = !DILocation(line: 2284, column: 29, scope: !7387)
!7403 = !DILocation(line: 2284, column: 35, scope: !7387)
!7404 = !DILocation(line: 2284, column: 23, scope: !7387)
!7405 = !DILocation(line: 2284, column: 46, scope: !7387)
!7406 = !DILocation(line: 2284, column: 45, scope: !7387)
!7407 = !DILocation(line: 2284, column: 51, scope: !7387)
!7408 = !DILocation(line: 2284, column: 39, scope: !7387)
!7409 = !DILocation(line: 2284, column: 38, scope: !7387)
!7410 = !DILocation(line: 2284, column: 55, scope: !7387)
!7411 = !DILocation(line: 2284, column: 22, scope: !7387)
!7412 = !DILocation(line: 2284, column: 14, scope: !7387)
!7413 = !DILocation(line: 2284, column: 9, scope: !7387)
!7414 = !DILocation(line: 2284, column: 20, scope: !7387)
!7415 = !DILocation(line: 2285, column: 14, scope: !7387)
!7416 = !DILocation(line: 2282, column: 5, scope: !7417)
!7417 = !DILexicalBlockFile(scope: !7343, file: !103, discriminator: 2)
!7418 = distinct !{!7418, !7381}
!7419 = !DILocation(line: 2287, column: 1, scope: !7343)
!7420 = distinct !DISubprogram(name: "interleaveBytes_sse2", scope: !103, file: !103, line: 1826, type: !2621, isLocal: true, isDefinition: true, scopeLine: 1829, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!7421 = !DILocalVariable(name: "src1", arg: 1, scope: !7420, file: !103, line: 1826, type: !182)
!7422 = !DILocation(line: 1826, column: 49, scope: !7420)
!7423 = !DILocalVariable(name: "src2", arg: 2, scope: !7420, file: !103, line: 1826, type: !182)
!7424 = !DILocation(line: 1826, column: 70, scope: !7420)
!7425 = !DILocalVariable(name: "dest", arg: 3, scope: !7420, file: !103, line: 1826, type: !15)
!7426 = !DILocation(line: 1826, column: 85, scope: !7420)
!7427 = !DILocalVariable(name: "width", arg: 4, scope: !7420, file: !103, line: 1827, type: !72)
!7428 = !DILocation(line: 1827, column: 41, scope: !7420)
!7429 = !DILocalVariable(name: "height", arg: 5, scope: !7420, file: !103, line: 1827, type: !72)
!7430 = !DILocation(line: 1827, column: 52, scope: !7420)
!7431 = !DILocalVariable(name: "src1Stride", arg: 6, scope: !7420, file: !103, line: 1827, type: !72)
!7432 = !DILocation(line: 1827, column: 64, scope: !7420)
!7433 = !DILocalVariable(name: "src2Stride", arg: 7, scope: !7420, file: !103, line: 1828, type: !72)
!7434 = !DILocation(line: 1828, column: 41, scope: !7420)
!7435 = !DILocalVariable(name: "dstStride", arg: 8, scope: !7420, file: !103, line: 1828, type: !72)
!7436 = !DILocation(line: 1828, column: 57, scope: !7420)
!7437 = !DILocalVariable(name: "h", scope: !7420, file: !103, line: 1830, type: !72)
!7438 = !DILocation(line: 1830, column: 9, scope: !7420)
!7439 = !DILocation(line: 1832, column: 11, scope: !7440)
!7440 = distinct !DILexicalBlock(scope: !7420, file: !103, line: 1832, column: 5)
!7441 = !DILocation(line: 1832, column: 10, scope: !7440)
!7442 = !DILocation(line: 1832, column: 15, scope: !7443)
!7443 = !DILexicalBlockFile(scope: !7444, file: !103, discriminator: 1)
!7444 = distinct !DILexicalBlock(scope: !7440, file: !103, line: 1832, column: 5)
!7445 = !DILocation(line: 1832, column: 19, scope: !7443)
!7446 = !DILocation(line: 1832, column: 17, scope: !7443)
!7447 = !DILocation(line: 1832, column: 5, scope: !7443)
!7448 = !DILocalVariable(name: "w", scope: !7449, file: !103, line: 1833, type: !72)
!7449 = distinct !DILexicalBlock(scope: !7444, file: !103, line: 1832, column: 32)
!7450 = !DILocation(line: 1833, column: 13, scope: !7449)
!7451 = !DILocation(line: 1835, column: 13, scope: !7452)
!7452 = distinct !DILexicalBlock(scope: !7449, file: !103, line: 1835, column: 13)
!7453 = !DILocation(line: 1835, column: 19, scope: !7452)
!7454 = !DILocation(line: 1835, column: 13, scope: !7449)
!7455 = !DILocation(line: 1837, column: 31, scope: !7456)
!7456 = distinct !DILexicalBlock(scope: !7457, file: !103, line: 1837, column: 17)
!7457 = distinct !DILexicalBlock(scope: !7452, file: !103, line: 1835, column: 26)
!7458 = !DILocation(line: 1837, column: 21, scope: !7456)
!7459 = !DILocation(line: 1837, column: 50, scope: !7456)
!7460 = !DILocation(line: 1837, column: 40, scope: !7456)
!7461 = !DILocation(line: 1837, column: 37, scope: !7456)
!7462 = !DILocation(line: 1837, column: 69, scope: !7456)
!7463 = !DILocation(line: 1837, column: 59, scope: !7456)
!7464 = !DILocation(line: 1837, column: 56, scope: !7456)
!7465 = !DILocation(line: 1837, column: 75, scope: !7456)
!7466 = !DILocation(line: 1837, column: 17, scope: !7457)
!7467 = !DILocation(line: 1853, column: 19, scope: !7468)
!7468 = distinct !DILexicalBlock(scope: !7456, file: !103, line: 1837, column: 81)
!7469 = !DILocation(line: 1853, column: 30, scope: !7468)
!7470 = !DILocation(line: 1853, column: 41, scope: !7468)
!7471 = !DILocation(line: 1853, column: 62, scope: !7468)
!7472 = !DILocation(line: 1853, column: 53, scope: !7468)
!7473 = !DILocation(line: 1853, column: 67, scope: !7468)
!7474 = !DILocation(line: 1838, column: 9, scope: !7468)
!7475 = !{i32 339282, i32 339324, i32 339382, i32 339442, i32 339502, i32 339557, i32 339612, i32 339667, i32 339725, i32 339783, i32 339851, i32 339919, i32 339987, i32 340055, i32 340113}
!7476 = !DILocation(line: 1856, column: 13, scope: !7468)
!7477 = !DILocation(line: 1880, column: 19, scope: !7456)
!7478 = !DILocation(line: 1880, column: 30, scope: !7456)
!7479 = !DILocation(line: 1880, column: 41, scope: !7456)
!7480 = !DILocation(line: 1880, column: 62, scope: !7456)
!7481 = !DILocation(line: 1880, column: 53, scope: !7456)
!7482 = !DILocation(line: 1880, column: 67, scope: !7456)
!7483 = !DILocation(line: 1858, column: 9, scope: !7456)
!7484 = !{i32 340305, i32 340341, i32 340399, i32 340459, i32 340519, i32 340574, i32 340629, i32 340687, i32 340745, i32 340800, i32 340855, i32 340913, i32 340971, i32 341029, i32 341087, i32 341157, i32 341227, i32 341297, i32 341367, i32 341435, i32 341503, i32 341574}
!7485 = !DILocation(line: 1884, column: 9, scope: !7457)
!7486 = !DILocation(line: 1885, column: 18, scope: !7487)
!7487 = distinct !DILexicalBlock(scope: !7449, file: !103, line: 1885, column: 9)
!7488 = !DILocation(line: 1885, column: 23, scope: !7487)
!7489 = !DILocation(line: 1885, column: 15, scope: !7487)
!7490 = !DILocation(line: 1885, column: 14, scope: !7487)
!7491 = !DILocation(line: 1885, column: 32, scope: !7492)
!7492 = !DILexicalBlockFile(scope: !7493, file: !103, discriminator: 1)
!7493 = distinct !DILexicalBlock(scope: !7487, file: !103, line: 1885, column: 9)
!7494 = !DILocation(line: 1885, column: 36, scope: !7492)
!7495 = !DILocation(line: 1885, column: 34, scope: !7492)
!7496 = !DILocation(line: 1885, column: 9, scope: !7492)
!7497 = !DILocation(line: 1886, column: 32, scope: !7498)
!7498 = distinct !DILexicalBlock(scope: !7493, file: !103, line: 1885, column: 48)
!7499 = !DILocation(line: 1886, column: 27, scope: !7498)
!7500 = !DILocation(line: 1886, column: 20, scope: !7498)
!7501 = !DILocation(line: 1886, column: 19, scope: !7498)
!7502 = !DILocation(line: 1886, column: 21, scope: !7498)
!7503 = !DILocation(line: 1886, column: 13, scope: !7498)
!7504 = !DILocation(line: 1886, column: 25, scope: !7498)
!7505 = !DILocation(line: 1887, column: 32, scope: !7498)
!7506 = !DILocation(line: 1887, column: 27, scope: !7498)
!7507 = !DILocation(line: 1887, column: 20, scope: !7498)
!7508 = !DILocation(line: 1887, column: 19, scope: !7498)
!7509 = !DILocation(line: 1887, column: 21, scope: !7498)
!7510 = !DILocation(line: 1887, column: 13, scope: !7498)
!7511 = !DILocation(line: 1887, column: 25, scope: !7498)
!7512 = !DILocation(line: 1888, column: 9, scope: !7498)
!7513 = !DILocation(line: 1885, column: 44, scope: !7514)
!7514 = !DILexicalBlockFile(scope: !7493, file: !103, discriminator: 2)
!7515 = !DILocation(line: 1885, column: 9, scope: !7514)
!7516 = distinct !{!7516, !7517}
!7517 = !DILocation(line: 1885, column: 9, scope: !7449)
!7518 = !DILocation(line: 1889, column: 17, scope: !7449)
!7519 = !DILocation(line: 1889, column: 14, scope: !7449)
!7520 = !DILocation(line: 1890, column: 17, scope: !7449)
!7521 = !DILocation(line: 1890, column: 14, scope: !7449)
!7522 = !DILocation(line: 1891, column: 17, scope: !7449)
!7523 = !DILocation(line: 1891, column: 14, scope: !7449)
!7524 = !DILocation(line: 1892, column: 5, scope: !7449)
!7525 = !DILocation(line: 1832, column: 28, scope: !7526)
!7526 = !DILexicalBlockFile(scope: !7444, file: !103, discriminator: 2)
!7527 = !DILocation(line: 1832, column: 5, scope: !7526)
!7528 = distinct !{!7528, !7529}
!7529 = !DILocation(line: 1832, column: 5, scope: !7420)
!7530 = !DILocation(line: 1893, column: 5, scope: !7420)
!7531 = !{i32 341947, i32 341963, i32 341995}
!7532 = !DILocation(line: 1898, column: 1, scope: !7420)
