; ModuleID = '/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a/[inter]libavcodec--dca_xll.o.i'
source_filename = "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a/[inter]libavcodec--dca_xll.o.i"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.DCAXllDecoder = type { %struct.AVCodecContext*, %struct.GetBitContext, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x i8], [3 x %struct.DCAXllChSet], i32*, i32, i32, i32, i32, i32, i32, i8*, i32, i32, %struct.DCADSPContext*, i32, [32 x i32*] }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal** }
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecDefault = type { i8*, i8* }
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVCodecHWConfigInternal = type opaque
%struct.AVCodecInternal = type { i32, i32, i32, %struct.AVFrame*, %struct.FramePool*, i8*, %struct.DecodeSimpleContext, %struct.DecodeFilterContext, %struct.AVPacket*, i8*, i32, i8*, i32, i8*, i32, %struct.AVPacket*, i32, %struct.AVFrame*, i32, i32, i32, i64, i64, %struct.AVFrame*, i32, i32, i32 }
%struct.FramePool = type { [4 x %struct.AVBufferPool*], i32, i32, i32, [8 x i32], [4 x i32], i32, i32, i32 }
%struct.AVBufferPool = type opaque
%struct.DecodeSimpleContext = type { %struct.AVPacket*, %struct.AVFrame* }
%struct.DecodeFilterContext = type { %struct.AVBSFContext**, i32 }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*)*, i32, void (%struct.MpegEncContext*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*)*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVRational = type { i32, i32 }
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.GetBitContext = type { i8*, i8*, i32, i32, i32 }
%struct.DCAXllChSet = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [128 x i32], [16 x i32], [16 x i32], i32, [8 x i32], i32, i32, [2 x %struct.DCAXllBand], i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i8], [8 x [8 x i32]], [3 x i32], [3 x i32*], [24 x i8] }
%struct.DCAXllBand = type { i32, [8 x i32], [4 x i32], [8 x i32], i32, [8 x i32], [8 x [16 x i32]], i32, i32, [8 x i32], [8 x i32], [8 x i32*], [8 x i32*] }
%struct.DCADSPContext = type { void (i32**, i32*, [32 x i8]*, [2 x i32]*, i64, i64, i64, i64)*, void (i32**, i32**, i32*, i64, i64, i64, i64)*, [2 x void (float*, i32*, float*, i64)*], void (float*, float*, float*, i64)*, [2 x void (%struct.SynthFilterContext*, %struct.FFTContext*, float*, i32**, i32**, float*, i32*, float*, float*, i64, float)*], void (i32*, i32*, i32*, i64)*, void (i32*, i32*, i32*, i64)*, [2 x void (%struct.SynthFilterContext*, %struct.DCADCTContext*, i32*, i32**, i32**, i32*, i32*, i32*, i32*, i64)*], void (i32*, i32*, i32, i64)*, void (i32*, i32*, i32*, i64)*, void (i32*, i32*, i32, i64)*, void (i32*, i32*, i32, i64)*, void (i32*, i32, i64)*, void (i32*, i32, i64)*, void (i32*, i32*, i32*, i32*, i64)*, void ([4 x float]*, float**, float*, i64, i64)*, void (float*, float*, [4 x float]*, [2 x float]*, i64)* }
%struct.SynthFilterContext = type { void (%struct.FFTContext*, float*, i32*, float*, float*, float*, float*, float)*, void (%struct.FFTContext*, float*, i32*, float*, float*, float*, float*, float)*, void (%struct.DCADCTContext*, i32*, i32*, i32*, i32*, i32*, i32*)*, void (%struct.DCADCTContext*, i32*, i32*, i32*, i32*, i32*, i32*)* }
%struct.DCADCTContext = type { [2 x void (i32*, i32*)*] }
%struct.FFTContext = type { i32, i32, i16*, %struct.FFTComplex*, i32, i32, float*, float*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, i32, i32, i32* }
%struct.FFTComplex = type { float, float }
%struct.DCAExssAsset = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.DCAContext = type { %struct.AVClass*, %struct.AVCodecContext*, [16 x i8], %struct.DCACoreDecoder, %struct.DCAExssParser, [16 x i8], %struct.DCAXllDecoder, %struct.DCALbrDecoder, %struct.DCADSPContext, i32*, i8*, i32, i32, i32, i32 }
%struct.DCACoreDecoder = type { %struct.AVCodecContext*, %struct.GetBitContext, %struct.GetBitContext, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [7 x i8], [7 x i8], [7 x i8], [7 x i8], [7 x i8], [7 x i8], [7 x [10 x i8]], [7 x [10 x i32]], [16 x i8], [7 x [64 x i8]], [7 x [64 x i16]], [7 x [64 x i8]], [16 x [7 x [32 x i8]]], [7 x [32 x [2 x i32]]], [7 x i8], [7 x [64 x i32]], i32, i32, [24 x i32], i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [12 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, [7 x [64 x i32*]], i32, i32*, [7 x [32 x i32*]], i32*, [24 x i8], [7 x %struct.DCADSPData], %struct.DCADSPContext*, %struct.DCADCTContext, [2 x %struct.FFTContext], %struct.SynthFilterContext, %struct.AVFloatDSPContext*, %struct.AVFixedDSPContext*, i32, i8*, [32 x i32*], i32, float, [32 x i32], i32, i32, i32, i32, [16 x i8] }
%struct.DCADSPData = type { %union.anon, i32, [28 x i8] }
%union.anon = type { %struct.anon }
%struct.anon = type { [1024 x float], [64 x float] }
%struct.AVFloatDSPContext = type { void (float*, float*, float*, i32)*, void (float*, float*, float, i32)*, void (double*, double*, double, i32)*, void (float*, float*, float, i32)*, void (double*, double*, double, i32)*, void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, float*, i32)*, void (float*, float*, float*, i32)*, void (float*, float*, i32)*, float (float*, float*, i32)*, void (double*, double*, double*, i32)* }
%struct.AVFixedDSPContext = type { void (i16*, i32*, i32*, i32*, i32, i8)*, void (i32*, i32*, i32*, i32*, i32)*, void (i32*, i32*, i32*, i32)*, void (i32*, i32*, i32*, i32)*, void (i32*, i32*, i32*, i32*, i32)*, i32 (i32*, i32*, i32)*, void (i32*, i32*, i32)* }
%struct.DCAExssParser = type { %struct.AVCodecContext*, %struct.GetBitContext, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [1 x %struct.DCAExssAsset] }
%struct.DCALbrDecoder = type { %struct.AVCodecContext*, %struct.GetBitContext, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x [32 x i8]], [32 x i8], [3 x [32 x i8]], [3 x [32 x i8]], [6 x i32], [6 x [12 x [8 x i8]]], [6 x [3 x [64 x i8]]], [6 x [28 x i8]], [6 x [28 x [8 x i8]]], [6 x i32], [6 x [32 x [8 x i8]]], [6 x [8 x [5 x i8]]], i8, [2 x [6 x [3 x [2 x [8 x float]]]]], [32 x float], [6 x [32 x float*]], float*, i32, [20 x i8], [6 x [128 x float]], [128 x float], [64 x float], [5 x [2 x float]], float, [6 x i8], [5 x [32 x [2 x i16]]], [512 x %struct.DCALbrTone], i32, %struct.FFTContext, %struct.AVFloatDSPContext*, %struct.DCADSPContext*, [8 x i8] }
%struct.DCALbrTone = type { i8, i8, i8, i8, [6 x i8], [6 x i8] }
%union.unaligned_32 = type { i32 }
%union.anon.1 = type { i32 }

@.str = private unnamed_addr constant [28 x i8] c"Read past end of XLL frame\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Invalid XLL sync word\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"XLL stream version %d\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"Invalid XLL common header checksum\0A\00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"Invalid XLL frame size (%d bytes)\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"%d XLL channel sets\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"Too many segments per XLL frame\0A\00", align 1
@.str.7 = private unnamed_addr constant [33 x i8] c"Too few samples per XLL segment\0A\00", align 1
@.str.8 = private unnamed_addr constant [34 x i8] c"Too many samples per XLL segment\0A\00", align 1
@.str.9 = private unnamed_addr constant [32 x i8] c"Too many samples per XLL frame\0A\00", align 1
@.str.10 = private unnamed_addr constant [36 x i8] c"Read past end of XLL common header\0A\00", align 1
@.str.11 = private unnamed_addr constant [33 x i8] c"Invalid XLL sub-header checksum\0A\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"%d XLL channels\00", align 1
@.str.13 = private unnamed_addr constant [30 x i8] c"%d-bit XLL storage resolution\00", align 1
@.str.14 = private unnamed_addr constant [58 x i8] c"Invalid PCM bit resolution for XLL channel set (%d > %d)\0A\00", align 1
@ff_dca_sampling_freqs = external constant [16 x i32], align 16
@.str.15 = private unnamed_addr constant [29 x i8] c"%d Hz XLL sampling frequency\00", align 1
@.str.16 = private unnamed_addr constant [32 x i8] c"XLL sampling frequency modifier\00", align 1
@.str.17 = private unnamed_addr constant [20 x i8] c"XLL replacement set\00", align 1
@.str.18 = private unnamed_addr constant [54 x i8] c"The first (and only) XLL channel set must be primary\0A\00", align 1
@.str.19 = private unnamed_addr constant [46 x i8] c"Invalid XLL primary channel set downmix type\0A\00", align 1
@.str.20 = private unnamed_addr constant [37 x i8] c"XLL channel set outside of hierarchy\00", align 1
@.str.21 = private unnamed_addr constant [26 x i8] c"Disabled XLL channel mask\00", align 1
@.str.22 = private unnamed_addr constant [26 x i8] c"Invalid XLL channel mask\0A\00", align 1
@.str.23 = private unnamed_addr constant [38 x i8] c"Custom XLL channel to speaker mapping\00", align 1
@.str.24 = private unnamed_addr constant [26 x i8] c"Extra XLL frequency bands\00", align 1
@.str.25 = private unnamed_addr constant [36 x i8] c"Different XLL audio characteristics\00", align 1
@.str.26 = private unnamed_addr constant [36 x i8] c"Invalid XLL original channel order\0A\00", align 1
@.str.27 = private unnamed_addr constant [40 x i8] c"Invalid XLL adaptive predicition order\0A\00", align 1
@.str.28 = private unnamed_addr constant [42 x i8] c"Invalid XLL reflection coefficient index\0A\00", align 1
@ff_dca_xll_refl_coeff = external constant [128 x i16], align 16
@.str.29 = private unnamed_addr constant [26 x i8] c"Invalid LSB section size\0A\00", align 1
@.str.30 = private unnamed_addr constant [45 x i8] c"LSB section missing with non-zero LSB width\0A\00", align 1
@.str.31 = private unnamed_addr constant [33 x i8] c"Read past end of XLL sub-header\0A\00", align 1
@ff_dca_dmix_primary_nch = external constant [8 x i8], align 1
@.str.32 = private unnamed_addr constant [33 x i8] c"Invalid XLL downmix scale index\0A\00", align 1
@ff_dca_dmixtable = external constant [242 x i16], align 16
@ff_dca_inv_dmixtable = external constant [201 x i32], align 16
@.str.33 = private unnamed_addr constant [39 x i8] c"Invalid XLL downmix coefficient index\0A\00", align 1
@.str.34 = private unnamed_addr constant [28 x i8] c"Too many NAVI entries (%d)\0A\00", align 1
@.str.35 = private unnamed_addr constant [38 x i8] c"Invalid NAVI segment size (%d bytes)\0A\00", align 1
@.str.36 = private unnamed_addr constant [23 x i8] c"Invalid NAVI checksum\0A\00", align 1
@.str.37 = private unnamed_addr constant [23 x i8] c"Invalid NAVI position\0A\00", align 1
@.str.38 = private unnamed_addr constant [34 x i8] c"Invalid isolated sample location\0A\00", align 1
@.str.39 = private unnamed_addr constant [32 x i8] c"Read past end of XLL band data\0A\00", align 1
@.str.40 = private unnamed_addr constant [52 x i8] c"Residual encoded channels are present without core\0A\00", align 1
@.str.41 = private unnamed_addr constant [59 x i8] c"Sample rate mismatch between core (%d Hz) and XLL (%d Hz)\0A\00", align 1
@.str.42 = private unnamed_addr constant [69 x i8] c"Number of samples per frame mismatch between core (%d) and XLL (%d)\0A\00", align 1
@.str.43 = private unnamed_addr constant [67 x i8] c"Residual encoded channel (%d) references unavailable core channel\0A\00", align 1
@.str.44 = private unnamed_addr constant [30 x i8] c"Invalid core shift (%d bits)\0A\00", align 1
@ff_dca_xll_band_coeff = external constant [20 x i32], align 16

; Function Attrs: nounwind uwtable
define i32 @ff_dca_xll_parse(%struct.DCAXllDecoder* %s, i8* %data, %struct.DCAExssAsset* %asset) #0 !dbg !1011 {
entry:
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %data.addr = alloca i8*, align 8
  %asset.addr = alloca %struct.DCAExssAsset*, align 8
  %ret = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !2039, metadata !2040), !dbg !2041
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !2042, metadata !2040), !dbg !2043
  store %struct.DCAExssAsset* %asset, %struct.DCAExssAsset** %asset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAExssAsset** %asset.addr, metadata !2044, metadata !2040), !dbg !2045
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !2046, metadata !2040), !dbg !2047
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2048
  %hd_stream_id = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %0, i32 0, i32 22, !dbg !2050
  %1 = load i32, i32* %hd_stream_id, align 4, !dbg !2050
  %2 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2051
  %hd_stream_id1 = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %2, i32 0, i32 29, !dbg !2052
  %3 = load i32, i32* %hd_stream_id1, align 4, !dbg !2052
  %cmp = icmp ne i32 %1, %3, !dbg !2053
  br i1 %cmp, label %if.then, label %if.end, !dbg !2054

if.then:                                          ; preds = %entry
  %4 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2055
  call void @clear_pbr(%struct.DCAXllDecoder* %4), !dbg !2057
  %5 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2058
  %hd_stream_id2 = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %5, i32 0, i32 29, !dbg !2059
  %6 = load i32, i32* %hd_stream_id2, align 4, !dbg !2059
  %7 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2060
  %hd_stream_id3 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %7, i32 0, i32 22, !dbg !2061
  store i32 %6, i32* %hd_stream_id3, align 4, !dbg !2062
  br label %if.end, !dbg !2063

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2064
  %pbr_length = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %8, i32 0, i32 24, !dbg !2066
  %9 = load i32, i32* %pbr_length, align 8, !dbg !2066
  %tobool = icmp ne i32 %9, 0, !dbg !2064
  br i1 %tobool, label %if.then4, label %if.else, !dbg !2067

if.then4:                                         ; preds = %if.end
  %10 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2068
  %11 = load i8*, i8** %data.addr, align 8, !dbg !2069
  %12 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2070
  %xll_offset = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %12, i32 0, i32 24, !dbg !2071
  %13 = load i32, i32* %xll_offset, align 4, !dbg !2071
  %idx.ext = sext i32 %13 to i64, !dbg !2072
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %idx.ext, !dbg !2072
  %14 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2073
  %xll_size = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %14, i32 0, i32 25, !dbg !2074
  %15 = load i32, i32* %xll_size, align 4, !dbg !2074
  %16 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2075
  %call = call i32 @parse_frame_pbr(%struct.DCAXllDecoder* %10, i8* %add.ptr, i32 %15, %struct.DCAExssAsset* %16), !dbg !2076
  store i32 %call, i32* %ret, align 4, !dbg !2077
  br label %if.end10, !dbg !2078

if.else:                                          ; preds = %if.end
  %17 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2079
  %18 = load i8*, i8** %data.addr, align 8, !dbg !2080
  %19 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2081
  %xll_offset5 = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %19, i32 0, i32 24, !dbg !2082
  %20 = load i32, i32* %xll_offset5, align 4, !dbg !2082
  %idx.ext6 = sext i32 %20 to i64, !dbg !2083
  %add.ptr7 = getelementptr inbounds i8, i8* %18, i64 %idx.ext6, !dbg !2083
  %21 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2084
  %xll_size8 = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %21, i32 0, i32 25, !dbg !2085
  %22 = load i32, i32* %xll_size8, align 4, !dbg !2085
  %23 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2086
  %call9 = call i32 @parse_frame_no_pbr(%struct.DCAXllDecoder* %17, i8* %add.ptr7, i32 %22, %struct.DCAExssAsset* %23), !dbg !2087
  store i32 %call9, i32* %ret, align 4, !dbg !2088
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then4
  %24 = load i32, i32* %ret, align 4, !dbg !2089
  ret i32 %24, !dbg !2090
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind uwtable
define internal void @clear_pbr(%struct.DCAXllDecoder* %s) #0 !dbg !2091 {
entry:
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !2094, metadata !2040), !dbg !2095
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2096
  %pbr_length = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %0, i32 0, i32 24, !dbg !2097
  store i32 0, i32* %pbr_length, align 8, !dbg !2098
  %1 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2099
  %pbr_delay = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %1, i32 0, i32 25, !dbg !2100
  store i32 0, i32* %pbr_delay, align 4, !dbg !2101
  ret void, !dbg !2102
}

; Function Attrs: nounwind uwtable
define internal i32 @parse_frame_pbr(%struct.DCAXllDecoder* %s, i8* %data, i32 %size, %struct.DCAExssAsset* %asset) #0 !dbg !2103 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %asset.addr = alloca %struct.DCAExssAsset*, align 8
  %ret = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !2106, metadata !2040), !dbg !2107
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !2108, metadata !2040), !dbg !2109
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !2110, metadata !2040), !dbg !2111
  store %struct.DCAExssAsset* %asset, %struct.DCAExssAsset** %asset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAExssAsset** %asset.addr, metadata !2112, metadata !2040), !dbg !2113
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !2114, metadata !2040), !dbg !2115
  %0 = load i32, i32* %size.addr, align 4, !dbg !2116
  %1 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2118
  %pbr_length = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %1, i32 0, i32 24, !dbg !2119
  %2 = load i32, i32* %pbr_length, align 8, !dbg !2119
  %sub = sub nsw i32 245760, %2, !dbg !2120
  %cmp = icmp sgt i32 %0, %sub, !dbg !2121
  br i1 %cmp, label %if.then, label %if.end, !dbg !2122

if.then:                                          ; preds = %entry
  store i32 -28, i32* %ret, align 4, !dbg !2123
  br label %fail, !dbg !2125

if.end:                                           ; preds = %entry
  %3 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2126
  %pbr_buffer = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %3, i32 0, i32 23, !dbg !2127
  %4 = load i8*, i8** %pbr_buffer, align 32, !dbg !2127
  %5 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2128
  %pbr_length1 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %5, i32 0, i32 24, !dbg !2129
  %6 = load i32, i32* %pbr_length1, align 8, !dbg !2129
  %idx.ext = sext i32 %6 to i64, !dbg !2130
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %idx.ext, !dbg !2130
  %7 = load i8*, i8** %data.addr, align 8, !dbg !2131
  %8 = load i32, i32* %size.addr, align 4, !dbg !2132
  %conv = sext i32 %8 to i64, !dbg !2132
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %7, i64 %conv, i32 1, i1 false), !dbg !2133
  %9 = load i32, i32* %size.addr, align 4, !dbg !2134
  %10 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2135
  %pbr_length2 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %10, i32 0, i32 24, !dbg !2136
  %11 = load i32, i32* %pbr_length2, align 8, !dbg !2137
  %add = add nsw i32 %11, %9, !dbg !2137
  store i32 %add, i32* %pbr_length2, align 8, !dbg !2137
  %12 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2138
  %pbr_delay = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %12, i32 0, i32 25, !dbg !2140
  %13 = load i32, i32* %pbr_delay, align 4, !dbg !2140
  %cmp3 = icmp sgt i32 %13, 0, !dbg !2141
  br i1 %cmp3, label %land.lhs.true, label %if.end7, !dbg !2142

land.lhs.true:                                    ; preds = %if.end
  %14 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2143
  %pbr_delay5 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %14, i32 0, i32 25, !dbg !2145
  %15 = load i32, i32* %pbr_delay5, align 4, !dbg !2146
  %dec = add nsw i32 %15, -1, !dbg !2146
  store i32 %dec, i32* %pbr_delay5, align 4, !dbg !2146
  %tobool = icmp ne i32 %dec, 0, !dbg !2146
  br i1 %tobool, label %if.then6, label %if.end7, !dbg !2147

if.then6:                                         ; preds = %land.lhs.true
  store i32 -11, i32* %retval, align 4, !dbg !2148
  br label %return, !dbg !2148

if.end7:                                          ; preds = %land.lhs.true, %if.end
  %16 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2149
  %17 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2151
  %pbr_buffer8 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %17, i32 0, i32 23, !dbg !2152
  %18 = load i8*, i8** %pbr_buffer8, align 32, !dbg !2152
  %19 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2153
  %pbr_length9 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %19, i32 0, i32 24, !dbg !2154
  %20 = load i32, i32* %pbr_length9, align 8, !dbg !2154
  %21 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2155
  %call = call i32 @parse_frame(%struct.DCAXllDecoder* %16, i8* %18, i32 %20, %struct.DCAExssAsset* %21), !dbg !2156
  store i32 %call, i32* %ret, align 4, !dbg !2157
  %cmp10 = icmp slt i32 %call, 0, !dbg !2158
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !2159

if.then12:                                        ; preds = %if.end7
  br label %fail, !dbg !2160

if.end13:                                         ; preds = %if.end7
  %22 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2161
  %frame_size = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %22, i32 0, i32 2, !dbg !2163
  %23 = load i32, i32* %frame_size, align 8, !dbg !2163
  %24 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2164
  %pbr_length14 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %24, i32 0, i32 24, !dbg !2165
  %25 = load i32, i32* %pbr_length14, align 8, !dbg !2165
  %cmp15 = icmp sgt i32 %23, %25, !dbg !2166
  br i1 %cmp15, label %if.then17, label %if.end18, !dbg !2167

if.then17:                                        ; preds = %if.end13
  store i32 -22, i32* %ret, align 4, !dbg !2168
  br label %fail, !dbg !2170

if.end18:                                         ; preds = %if.end13
  %26 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2171
  %frame_size19 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %26, i32 0, i32 2, !dbg !2173
  %27 = load i32, i32* %frame_size19, align 8, !dbg !2173
  %28 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2174
  %pbr_length20 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %28, i32 0, i32 24, !dbg !2175
  %29 = load i32, i32* %pbr_length20, align 8, !dbg !2175
  %cmp21 = icmp eq i32 %27, %29, !dbg !2176
  br i1 %cmp21, label %if.then23, label %if.else, !dbg !2177

if.then23:                                        ; preds = %if.end18
  %30 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2178
  call void @clear_pbr(%struct.DCAXllDecoder* %30), !dbg !2180
  br label %if.end34, !dbg !2181

if.else:                                          ; preds = %if.end18
  %31 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2182
  %frame_size24 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %31, i32 0, i32 2, !dbg !2184
  %32 = load i32, i32* %frame_size24, align 8, !dbg !2184
  %33 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2185
  %pbr_length25 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %33, i32 0, i32 24, !dbg !2186
  %34 = load i32, i32* %pbr_length25, align 8, !dbg !2187
  %sub26 = sub nsw i32 %34, %32, !dbg !2187
  store i32 %sub26, i32* %pbr_length25, align 8, !dbg !2187
  %35 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2188
  %pbr_buffer27 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %35, i32 0, i32 23, !dbg !2189
  %36 = load i8*, i8** %pbr_buffer27, align 32, !dbg !2189
  %37 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2190
  %pbr_buffer28 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %37, i32 0, i32 23, !dbg !2191
  %38 = load i8*, i8** %pbr_buffer28, align 32, !dbg !2191
  %39 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2192
  %frame_size29 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %39, i32 0, i32 2, !dbg !2193
  %40 = load i32, i32* %frame_size29, align 8, !dbg !2193
  %idx.ext30 = sext i32 %40 to i64, !dbg !2194
  %add.ptr31 = getelementptr inbounds i8, i8* %38, i64 %idx.ext30, !dbg !2194
  %41 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2195
  %pbr_length32 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %41, i32 0, i32 24, !dbg !2196
  %42 = load i32, i32* %pbr_length32, align 8, !dbg !2196
  %conv33 = sext i32 %42 to i64, !dbg !2195
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %36, i8* %add.ptr31, i64 %conv33, i32 1, i1 false), !dbg !2197
  br label %if.end34

if.end34:                                         ; preds = %if.else, %if.then23
  store i32 0, i32* %retval, align 4, !dbg !2198
  br label %return, !dbg !2198

fail:                                             ; preds = %if.then17, %if.then12, %if.then
  %43 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2199
  call void @clear_pbr(%struct.DCAXllDecoder* %43), !dbg !2200
  %44 = load i32, i32* %ret, align 4, !dbg !2201
  store i32 %44, i32* %retval, align 4, !dbg !2202
  br label %return, !dbg !2202

return:                                           ; preds = %fail, %if.end34, %if.then6
  %45 = load i32, i32* %retval, align 4, !dbg !2203
  ret i32 %45, !dbg !2203
}

; Function Attrs: nounwind uwtable
define internal i32 @parse_frame_no_pbr(%struct.DCAXllDecoder* %s, i8* %data, i32 %size, %struct.DCAExssAsset* %asset) #0 !dbg !2204 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %asset.addr = alloca %struct.DCAExssAsset*, align 8
  %ret = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !2205, metadata !2040), !dbg !2206
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !2207, metadata !2040), !dbg !2208
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !2209, metadata !2040), !dbg !2210
  store %struct.DCAExssAsset* %asset, %struct.DCAExssAsset** %asset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAExssAsset** %asset.addr, metadata !2211, metadata !2040), !dbg !2212
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !2213, metadata !2040), !dbg !2214
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2215
  %1 = load i8*, i8** %data.addr, align 8, !dbg !2216
  %2 = load i32, i32* %size.addr, align 4, !dbg !2217
  %3 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2218
  %call = call i32 @parse_frame(%struct.DCAXllDecoder* %0, i8* %1, i32 %2, %struct.DCAExssAsset* %3), !dbg !2219
  store i32 %call, i32* %ret, align 4, !dbg !2214
  %4 = load i32, i32* %ret, align 4, !dbg !2220
  %cmp = icmp eq i32 %4, -11, !dbg !2222
  br i1 %cmp, label %land.lhs.true, label %if.end13, !dbg !2223

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2224
  %xll_sync_present = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %5, i32 0, i32 26, !dbg !2226
  %6 = load i32, i32* %xll_sync_present, align 4, !dbg !2226
  %tobool = icmp ne i32 %6, 0, !dbg !2224
  br i1 %tobool, label %land.lhs.true1, label %if.end13, !dbg !2227

land.lhs.true1:                                   ; preds = %land.lhs.true
  %7 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2228
  %xll_sync_offset = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %7, i32 0, i32 28, !dbg !2230
  %8 = load i32, i32* %xll_sync_offset, align 4, !dbg !2230
  %9 = load i32, i32* %size.addr, align 4, !dbg !2231
  %cmp2 = icmp slt i32 %8, %9, !dbg !2232
  br i1 %cmp2, label %if.then, label %if.end13, !dbg !2233

if.then:                                          ; preds = %land.lhs.true1
  %10 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2234
  %xll_sync_offset3 = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %10, i32 0, i32 28, !dbg !2236
  %11 = load i32, i32* %xll_sync_offset3, align 4, !dbg !2236
  %12 = load i8*, i8** %data.addr, align 8, !dbg !2237
  %idx.ext = sext i32 %11 to i64, !dbg !2237
  %add.ptr = getelementptr inbounds i8, i8* %12, i64 %idx.ext, !dbg !2237
  store i8* %add.ptr, i8** %data.addr, align 8, !dbg !2237
  %13 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2238
  %xll_sync_offset4 = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %13, i32 0, i32 28, !dbg !2239
  %14 = load i32, i32* %xll_sync_offset4, align 4, !dbg !2239
  %15 = load i32, i32* %size.addr, align 4, !dbg !2240
  %sub = sub nsw i32 %15, %14, !dbg !2240
  store i32 %sub, i32* %size.addr, align 4, !dbg !2240
  %16 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2241
  %xll_delay_nframes = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %16, i32 0, i32 27, !dbg !2243
  %17 = load i32, i32* %xll_delay_nframes, align 4, !dbg !2243
  %cmp5 = icmp sgt i32 %17, 0, !dbg !2244
  br i1 %cmp5, label %if.then6, label %if.end11, !dbg !2245

if.then6:                                         ; preds = %if.then
  %18 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2246
  %19 = load i8*, i8** %data.addr, align 8, !dbg !2249
  %20 = load i32, i32* %size.addr, align 4, !dbg !2250
  %21 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2251
  %xll_delay_nframes7 = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %21, i32 0, i32 27, !dbg !2252
  %22 = load i32, i32* %xll_delay_nframes7, align 4, !dbg !2252
  %call8 = call i32 @copy_to_pbr(%struct.DCAXllDecoder* %18, i8* %19, i32 %20, i32 %22), !dbg !2253
  store i32 %call8, i32* %ret, align 4, !dbg !2254
  %cmp9 = icmp slt i32 %call8, 0, !dbg !2255
  br i1 %cmp9, label %if.then10, label %if.end, !dbg !2256

if.then10:                                        ; preds = %if.then6
  %23 = load i32, i32* %ret, align 4, !dbg !2257
  store i32 %23, i32* %retval, align 4, !dbg !2258
  br label %return, !dbg !2258

if.end:                                           ; preds = %if.then6
  store i32 -11, i32* %retval, align 4, !dbg !2259
  br label %return, !dbg !2259

if.end11:                                         ; preds = %if.then
  %24 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2260
  %25 = load i8*, i8** %data.addr, align 8, !dbg !2261
  %26 = load i32, i32* %size.addr, align 4, !dbg !2262
  %27 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !2263
  %call12 = call i32 @parse_frame(%struct.DCAXllDecoder* %24, i8* %25, i32 %26, %struct.DCAExssAsset* %27), !dbg !2264
  store i32 %call12, i32* %ret, align 4, !dbg !2265
  br label %if.end13, !dbg !2266

if.end13:                                         ; preds = %if.end11, %land.lhs.true1, %land.lhs.true, %entry
  %28 = load i32, i32* %ret, align 4, !dbg !2267
  %cmp14 = icmp slt i32 %28, 0, !dbg !2269
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !2270

if.then15:                                        ; preds = %if.end13
  %29 = load i32, i32* %ret, align 4, !dbg !2271
  store i32 %29, i32* %retval, align 4, !dbg !2272
  br label %return, !dbg !2272

if.end16:                                         ; preds = %if.end13
  %30 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2273
  %frame_size = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %30, i32 0, i32 2, !dbg !2275
  %31 = load i32, i32* %frame_size, align 8, !dbg !2275
  %32 = load i32, i32* %size.addr, align 4, !dbg !2276
  %cmp17 = icmp sgt i32 %31, %32, !dbg !2277
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !2278

if.then18:                                        ; preds = %if.end16
  store i32 -22, i32* %retval, align 4, !dbg !2279
  br label %return, !dbg !2279

if.end19:                                         ; preds = %if.end16
  %33 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2280
  %frame_size20 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %33, i32 0, i32 2, !dbg !2282
  %34 = load i32, i32* %frame_size20, align 8, !dbg !2282
  %35 = load i32, i32* %size.addr, align 4, !dbg !2283
  %cmp21 = icmp slt i32 %34, %35, !dbg !2284
  br i1 %cmp21, label %if.then22, label %if.end32, !dbg !2285

if.then22:                                        ; preds = %if.end19
  %36 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2286
  %37 = load i8*, i8** %data.addr, align 8, !dbg !2288
  %38 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2289
  %frame_size23 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %38, i32 0, i32 2, !dbg !2290
  %39 = load i32, i32* %frame_size23, align 8, !dbg !2290
  %idx.ext24 = sext i32 %39 to i64, !dbg !2291
  %add.ptr25 = getelementptr inbounds i8, i8* %37, i64 %idx.ext24, !dbg !2291
  %40 = load i32, i32* %size.addr, align 4, !dbg !2292
  %41 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2293
  %frame_size26 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %41, i32 0, i32 2, !dbg !2294
  %42 = load i32, i32* %frame_size26, align 8, !dbg !2294
  %sub27 = sub nsw i32 %40, %42, !dbg !2295
  %call28 = call i32 @copy_to_pbr(%struct.DCAXllDecoder* %36, i8* %add.ptr25, i32 %sub27, i32 0), !dbg !2296
  store i32 %call28, i32* %ret, align 4, !dbg !2297
  %cmp29 = icmp slt i32 %call28, 0, !dbg !2298
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !2299

if.then30:                                        ; preds = %if.then22
  %43 = load i32, i32* %ret, align 4, !dbg !2300
  store i32 %43, i32* %retval, align 4, !dbg !2301
  br label %return, !dbg !2301

if.end31:                                         ; preds = %if.then22
  br label %if.end32, !dbg !2302

if.end32:                                         ; preds = %if.end31, %if.end19
  store i32 0, i32* %retval, align 4, !dbg !2304
  br label %return, !dbg !2304

return:                                           ; preds = %if.end32, %if.then30, %if.then18, %if.then15, %if.end, %if.then10
  %44 = load i32, i32* %retval, align 4, !dbg !2305
  ret i32 %44, !dbg !2305
}

; Function Attrs: nounwind uwtable
define i32 @ff_dca_xll_filter_frame(%struct.DCAXllDecoder* %s, %struct.AVFrame* %frame) #0 !dbg !2306 {
entry:
  %retval.i = alloca i16, align 2
  %a.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i, metadata !2309, metadata !2040), !dbg !2314
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %frame.addr = alloca %struct.AVFrame*, align 8
  %avctx = alloca %struct.AVCodecContext*, align 8
  %dca = alloca %struct.DCAContext*, align 8
  %asset = alloca %struct.DCAExssAsset*, align 8
  %p = alloca %struct.DCAXllChSet*, align 8
  %c = alloca %struct.DCAXllChSet*, align 8
  %matrix_encoding = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %ret = alloca i32, align 4
  %shift = alloca i32, align 4
  %nsamples = alloca i32, align 4
  %request_mask = alloca i32, align 4
  %ch_remap = alloca [32 x i32], align 16
  %samples = alloca i32*, align 8
  %plane = alloca i16*, align 8
  %plane192 = alloca i32*, align 8
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !2323, metadata !2040), !dbg !2324
  store %struct.AVFrame* %frame, %struct.AVFrame** %frame.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVFrame** %frame.addr, metadata !2325, metadata !2040), !dbg !2326
  call void @llvm.dbg.declare(metadata %struct.AVCodecContext** %avctx, metadata !2327, metadata !2040), !dbg !2328
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2329
  %avctx1 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %0, i32 0, i32 0, !dbg !2330
  %1 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx1, align 32, !dbg !2330
  store %struct.AVCodecContext* %1, %struct.AVCodecContext** %avctx, align 8, !dbg !2328
  call void @llvm.dbg.declare(metadata %struct.DCAContext** %dca, metadata !2331, metadata !2040), !dbg !2689
  %2 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 8, !dbg !2690
  %priv_data = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %2, i32 0, i32 6, !dbg !2691
  %3 = load i8*, i8** %priv_data, align 8, !dbg !2691
  %4 = bitcast i8* %3 to %struct.DCAContext*, !dbg !2690
  store %struct.DCAContext* %4, %struct.DCAContext** %dca, align 8, !dbg !2689
  call void @llvm.dbg.declare(metadata %struct.DCAExssAsset** %asset, metadata !2692, metadata !2040), !dbg !2693
  %5 = load %struct.DCAContext*, %struct.DCAContext** %dca, align 8, !dbg !2694
  %exss = getelementptr inbounds %struct.DCAContext, %struct.DCAContext* %5, i32 0, i32 4, !dbg !2695
  %assets = getelementptr inbounds %struct.DCAExssParser, %struct.DCAExssParser* %exss, i32 0, i32 11, !dbg !2696
  %arrayidx = getelementptr inbounds [1 x %struct.DCAExssAsset], [1 x %struct.DCAExssAsset]* %assets, i64 0, i64 0, !dbg !2694
  store %struct.DCAExssAsset* %arrayidx, %struct.DCAExssAsset** %asset, align 8, !dbg !2693
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %p, metadata !2697, metadata !2040), !dbg !2699
  %6 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2700
  %chset = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %6, i32 0, i32 15, !dbg !2701
  %arrayidx2 = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset, i64 0, i64 0, !dbg !2700
  store %struct.DCAXllChSet* %arrayidx2, %struct.DCAXllChSet** %p, align 8, !dbg !2699
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c, metadata !2702, metadata !2040), !dbg !2703
  call void @llvm.dbg.declare(metadata i32* %matrix_encoding, metadata !2704, metadata !2040), !dbg !2705
  store i32 0, i32* %matrix_encoding, align 4, !dbg !2705
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2706, metadata !2040), !dbg !2707
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2708, metadata !2040), !dbg !2709
  call void @llvm.dbg.declare(metadata i32* %k, metadata !2710, metadata !2040), !dbg !2711
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !2712, metadata !2040), !dbg !2713
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !2714, metadata !2040), !dbg !2715
  call void @llvm.dbg.declare(metadata i32* %nsamples, metadata !2716, metadata !2040), !dbg !2717
  call void @llvm.dbg.declare(metadata i32* %request_mask, metadata !2718, metadata !2040), !dbg !2719
  call void @llvm.dbg.declare(metadata [32 x i32]* %ch_remap, metadata !2720, metadata !2040), !dbg !2721
  %7 = load %struct.DCAContext*, %struct.DCAContext** %dca, align 8, !dbg !2722
  %packet = getelementptr inbounds %struct.DCAContext, %struct.DCAContext* %7, i32 0, i32 12, !dbg !2724
  %8 = load i32, i32* %packet, align 4, !dbg !2724
  %and = and i32 %8, 16, !dbg !2725
  %tobool = icmp ne i32 %and, 0, !dbg !2725
  br i1 %tobool, label %if.then, label %if.end9, !dbg !2726

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !2727
  %9 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2730
  %chset3 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %9, i32 0, i32 15, !dbg !2731
  %arraydecay = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset3, i32 0, i32 0, !dbg !2730
  store %struct.DCAXllChSet* %arraydecay, %struct.DCAXllChSet** %c, align 8, !dbg !2732
  br label %for.cond, !dbg !2733

for.cond:                                         ; preds = %for.inc, %if.then
  %10 = load i32, i32* %i, align 4, !dbg !2734
  %11 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2737
  %nchsets = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %11, i32 0, i32 3, !dbg !2738
  %12 = load i32, i32* %nchsets, align 4, !dbg !2738
  %cmp = icmp slt i32 %10, %12, !dbg !2739
  br i1 %cmp, label %for.body, label %for.end, !dbg !2740

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %i, align 4, !dbg !2741
  %14 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2744
  %nactivechsets = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %14, i32 0, i32 21, !dbg !2745
  %15 = load i32, i32* %nactivechsets, align 8, !dbg !2745
  %cmp4 = icmp slt i32 %13, %15, !dbg !2746
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !2747

if.then5:                                         ; preds = %for.body
  %16 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2748
  %17 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2749
  call void @force_lossy_output(%struct.DCAXllDecoder* %16, %struct.DCAXllChSet* %17), !dbg !2750
  br label %if.end, !dbg !2750

if.end:                                           ; preds = %if.then5, %for.body
  %18 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2751
  %primary_chset = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %18, i32 0, i32 5, !dbg !2753
  %19 = load i32, i32* %primary_chset, align 4, !dbg !2753
  %tobool6 = icmp ne i32 %19, 0, !dbg !2751
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !2754

if.then7:                                         ; preds = %if.end
  %20 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2755
  %dmix_embedded = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %20, i32 0, i32 7, !dbg !2756
  store i32 0, i32* %dmix_embedded, align 4, !dbg !2757
  br label %if.end8, !dbg !2755

if.end8:                                          ; preds = %if.then7, %if.end
  br label %for.inc, !dbg !2758

for.inc:                                          ; preds = %if.end8
  %21 = load i32, i32* %i, align 4, !dbg !2759
  %inc = add nsw i32 %21, 1, !dbg !2759
  store i32 %inc, i32* %i, align 4, !dbg !2759
  %22 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2761
  %incdec.ptr = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %22, i32 1, !dbg !2761
  store %struct.DCAXllChSet* %incdec.ptr, %struct.DCAXllChSet** %c, align 8, !dbg !2761
  br label %for.cond, !dbg !2762, !llvm.loop !2763

for.end:                                          ; preds = %for.cond
  %23 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2765
  %scalable_lsbs = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %23, i32 0, i32 11, !dbg !2766
  store i32 0, i32* %scalable_lsbs, align 4, !dbg !2767
  %24 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2768
  %fixed_lsb_width = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %24, i32 0, i32 13, !dbg !2769
  store i32 0, i32* %fixed_lsb_width, align 4, !dbg !2770
  br label %if.end9, !dbg !2771

if.end9:                                          ; preds = %for.end, %entry
  %25 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2772
  %output_mask = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %25, i32 0, i32 27, !dbg !2773
  store i32 0, i32* %output_mask, align 8, !dbg !2774
  store i32 0, i32* %i, align 4, !dbg !2775
  %26 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2777
  %chset10 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %26, i32 0, i32 15, !dbg !2778
  %arraydecay11 = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset10, i32 0, i32 0, !dbg !2777
  store %struct.DCAXllChSet* %arraydecay11, %struct.DCAXllChSet** %c, align 8, !dbg !2779
  br label %for.cond12, !dbg !2780

for.cond12:                                       ; preds = %for.inc28, %if.end9
  %27 = load i32, i32* %i, align 4, !dbg !2781
  %28 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2784
  %nactivechsets13 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %28, i32 0, i32 21, !dbg !2785
  %29 = load i32, i32* %nactivechsets13, align 8, !dbg !2785
  %cmp14 = icmp slt i32 %27, %29, !dbg !2786
  br i1 %cmp14, label %for.body15, label %for.end31, !dbg !2787

for.body15:                                       ; preds = %for.cond12
  %30 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2788
  %31 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2790
  call void @chs_filter_band_data(%struct.DCAXllDecoder* %30, %struct.DCAXllChSet* %31, i32 0), !dbg !2791
  %32 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2792
  %residual_encode = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %32, i32 0, i32 1, !dbg !2794
  %33 = load i32, i32* %residual_encode, align 4, !dbg !2794
  %34 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2795
  %nchannels = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %34, i32 0, i32 0, !dbg !2796
  %35 = load i32, i32* %nchannels, align 32, !dbg !2796
  %shl = shl i32 1, %35, !dbg !2797
  %sub = sub nsw i32 %shl, 1, !dbg !2798
  %cmp16 = icmp ne i32 %33, %sub, !dbg !2799
  br i1 %cmp16, label %land.lhs.true, label %if.end19, !dbg !2800

land.lhs.true:                                    ; preds = %for.body15
  %36 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2801
  %37 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2803
  %call = call i32 @combine_residual_frame(%struct.DCAXllDecoder* %36, %struct.DCAXllChSet* %37), !dbg !2804
  store i32 %call, i32* %ret, align 4, !dbg !2805
  %cmp17 = icmp slt i32 %call, 0, !dbg !2806
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !2807

if.then18:                                        ; preds = %land.lhs.true
  %38 = load i32, i32* %ret, align 4, !dbg !2809
  store i32 %38, i32* %retval, align 4, !dbg !2810
  br label %return, !dbg !2810

if.end19:                                         ; preds = %land.lhs.true, %for.body15
  %39 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2811
  %scalable_lsbs20 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %39, i32 0, i32 11, !dbg !2813
  %40 = load i32, i32* %scalable_lsbs20, align 4, !dbg !2813
  %tobool21 = icmp ne i32 %40, 0, !dbg !2811
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !2814

if.then22:                                        ; preds = %if.end19
  %41 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2815
  %42 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2816
  call void @chs_assemble_msbs_lsbs(%struct.DCAXllDecoder* %41, %struct.DCAXllChSet* %42, i32 0), !dbg !2817
  br label %if.end23, !dbg !2817

if.end23:                                         ; preds = %if.then22, %if.end19
  %43 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2818
  %nfreqbands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %43, i32 0, i32 16, !dbg !2820
  %44 = load i32, i32* %nfreqbands, align 16, !dbg !2820
  %cmp24 = icmp sgt i32 %44, 1, !dbg !2821
  br i1 %cmp24, label %if.then25, label %if.end26, !dbg !2822

if.then25:                                        ; preds = %if.end23
  %45 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2823
  %46 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2825
  call void @chs_filter_band_data(%struct.DCAXllDecoder* %45, %struct.DCAXllChSet* %46, i32 1), !dbg !2826
  %47 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2827
  %48 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2828
  call void @chs_assemble_msbs_lsbs(%struct.DCAXllDecoder* %47, %struct.DCAXllChSet* %48, i32 1), !dbg !2829
  br label %if.end26, !dbg !2830

if.end26:                                         ; preds = %if.then25, %if.end23
  %49 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2831
  %ch_mask = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %49, i32 0, i32 14, !dbg !2832
  %50 = load i32, i32* %ch_mask, align 4, !dbg !2832
  %51 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2833
  %output_mask27 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %51, i32 0, i32 27, !dbg !2834
  %52 = load i32, i32* %output_mask27, align 8, !dbg !2835
  %or = or i32 %52, %50, !dbg !2835
  store i32 %or, i32* %output_mask27, align 8, !dbg !2835
  br label %for.inc28, !dbg !2836

for.inc28:                                        ; preds = %if.end26
  %53 = load i32, i32* %i, align 4, !dbg !2837
  %inc29 = add nsw i32 %53, 1, !dbg !2837
  store i32 %inc29, i32* %i, align 4, !dbg !2837
  %54 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2839
  %incdec.ptr30 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %54, i32 1, !dbg !2839
  store %struct.DCAXllChSet* %incdec.ptr30, %struct.DCAXllChSet** %c, align 8, !dbg !2839
  br label %for.cond12, !dbg !2840, !llvm.loop !2841

for.end31:                                        ; preds = %for.cond12
  store i32 1, i32* %i, align 4, !dbg !2843
  %55 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2845
  %chset32 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %55, i32 0, i32 15, !dbg !2846
  %arrayidx33 = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset32, i64 0, i64 1, !dbg !2845
  store %struct.DCAXllChSet* %arrayidx33, %struct.DCAXllChSet** %c, align 8, !dbg !2847
  br label %for.cond34, !dbg !2848

for.cond34:                                       ; preds = %for.inc72, %for.end31
  %56 = load i32, i32* %i, align 4, !dbg !2849
  %57 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2852
  %nchsets35 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %57, i32 0, i32 3, !dbg !2853
  %58 = load i32, i32* %nchsets35, align 4, !dbg !2853
  %cmp36 = icmp slt i32 %56, %58, !dbg !2854
  br i1 %cmp36, label %for.body37, label %for.end75, !dbg !2855

for.body37:                                       ; preds = %for.cond34
  %59 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2856
  %call38 = call i32 @is_hier_dmix_chset(%struct.DCAXllChSet* %59), !dbg !2859
  %tobool39 = icmp ne i32 %call38, 0, !dbg !2859
  br i1 %tobool39, label %if.end41, label %if.then40, !dbg !2860

if.then40:                                        ; preds = %for.body37
  br label %for.inc72, !dbg !2861

if.end41:                                         ; preds = %for.body37
  %60 = load i32, i32* %i, align 4, !dbg !2862
  %61 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2864
  %nactivechsets42 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %61, i32 0, i32 21, !dbg !2865
  %62 = load i32, i32* %nactivechsets42, align 8, !dbg !2865
  %cmp43 = icmp sge i32 %60, %62, !dbg !2866
  br i1 %cmp43, label %if.then44, label %if.end57, !dbg !2867

if.then44:                                        ; preds = %if.end41
  store i32 0, i32* %j, align 4, !dbg !2868
  br label %for.cond45, !dbg !2871

for.cond45:                                       ; preds = %for.inc54, %if.then44
  %63 = load i32, i32* %j, align 4, !dbg !2872
  %64 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2875
  %nfreqbands46 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %64, i32 0, i32 16, !dbg !2876
  %65 = load i32, i32* %nfreqbands46, align 16, !dbg !2876
  %cmp47 = icmp slt i32 %63, %65, !dbg !2877
  br i1 %cmp47, label %for.body48, label %for.end56, !dbg !2878

for.body48:                                       ; preds = %for.cond45
  %66 = load i32, i32* %j, align 4, !dbg !2879
  %idxprom = sext i32 %66 to i64, !dbg !2881
  %67 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2881
  %bands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %67, i32 0, i32 18, !dbg !2882
  %arrayidx49 = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands, i64 0, i64 %idxprom, !dbg !2881
  %dmix_embedded50 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx49, i32 0, i32 7, !dbg !2883
  %68 = load i32, i32* %dmix_embedded50, align 8, !dbg !2883
  %tobool51 = icmp ne i32 %68, 0, !dbg !2881
  br i1 %tobool51, label %if.then52, label %if.end53, !dbg !2884

if.then52:                                        ; preds = %for.body48
  %69 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2885
  %70 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2886
  %71 = load i32, i32* %j, align 4, !dbg !2887
  call void @scale_down_mix(%struct.DCAXllDecoder* %69, %struct.DCAXllChSet* %70, i32 %71), !dbg !2888
  br label %if.end53, !dbg !2888

if.end53:                                         ; preds = %if.then52, %for.body48
  br label %for.inc54, !dbg !2889

for.inc54:                                        ; preds = %if.end53
  %72 = load i32, i32* %j, align 4, !dbg !2891
  %inc55 = add nsw i32 %72, 1, !dbg !2891
  store i32 %inc55, i32* %j, align 4, !dbg !2891
  br label %for.cond45, !dbg !2893, !llvm.loop !2894

for.end56:                                        ; preds = %for.cond45
  br label %for.end75, !dbg !2896

if.end57:                                         ; preds = %if.end41
  store i32 0, i32* %j, align 4, !dbg !2897
  br label %for.cond58, !dbg !2899

for.cond58:                                       ; preds = %for.inc69, %if.end57
  %73 = load i32, i32* %j, align 4, !dbg !2900
  %74 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2903
  %nfreqbands59 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %74, i32 0, i32 16, !dbg !2904
  %75 = load i32, i32* %nfreqbands59, align 16, !dbg !2904
  %cmp60 = icmp slt i32 %73, %75, !dbg !2905
  br i1 %cmp60, label %for.body61, label %for.end71, !dbg !2906

for.body61:                                       ; preds = %for.cond58
  %76 = load i32, i32* %j, align 4, !dbg !2907
  %idxprom62 = sext i32 %76 to i64, !dbg !2909
  %77 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2909
  %bands63 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %77, i32 0, i32 18, !dbg !2910
  %arrayidx64 = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands63, i64 0, i64 %idxprom62, !dbg !2909
  %dmix_embedded65 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx64, i32 0, i32 7, !dbg !2911
  %78 = load i32, i32* %dmix_embedded65, align 8, !dbg !2911
  %tobool66 = icmp ne i32 %78, 0, !dbg !2909
  br i1 %tobool66, label %if.then67, label %if.end68, !dbg !2912

if.then67:                                        ; preds = %for.body61
  %79 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2913
  %80 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2914
  %81 = load i32, i32* %j, align 4, !dbg !2915
  call void @undo_down_mix(%struct.DCAXllDecoder* %79, %struct.DCAXllChSet* %80, i32 %81), !dbg !2916
  br label %if.end68, !dbg !2916

if.end68:                                         ; preds = %if.then67, %for.body61
  br label %for.inc69, !dbg !2917

for.inc69:                                        ; preds = %if.end68
  %82 = load i32, i32* %j, align 4, !dbg !2919
  %inc70 = add nsw i32 %82, 1, !dbg !2919
  store i32 %inc70, i32* %j, align 4, !dbg !2919
  br label %for.cond58, !dbg !2921, !llvm.loop !2922

for.end71:                                        ; preds = %for.cond58
  br label %for.inc72, !dbg !2924

for.inc72:                                        ; preds = %for.end71, %if.then40
  %83 = load i32, i32* %i, align 4, !dbg !2925
  %inc73 = add nsw i32 %83, 1, !dbg !2925
  store i32 %inc73, i32* %i, align 4, !dbg !2925
  %84 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !2927
  %incdec.ptr74 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %84, i32 1, !dbg !2927
  store %struct.DCAXllChSet* %incdec.ptr74, %struct.DCAXllChSet** %c, align 8, !dbg !2927
  br label %for.cond34, !dbg !2928, !llvm.loop !2929

for.end75:                                        ; preds = %for.end56, %for.cond34
  %85 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2931
  %nfreqbands76 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %85, i32 0, i32 18, !dbg !2933
  %86 = load i32, i32* %nfreqbands76, align 4, !dbg !2933
  %cmp77 = icmp sgt i32 %86, 1, !dbg !2934
  br i1 %cmp77, label %if.then78, label %if.end93, !dbg !2935

if.then78:                                        ; preds = %for.end75
  store i32 0, i32* %i, align 4, !dbg !2936
  br label %for.cond79, !dbg !2939

for.cond79:                                       ; preds = %for.inc90, %if.then78
  %87 = load i32, i32* %i, align 4, !dbg !2940
  %88 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2943
  %nactivechsets80 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %88, i32 0, i32 21, !dbg !2944
  %89 = load i32, i32* %nactivechsets80, align 8, !dbg !2944
  %cmp81 = icmp slt i32 %87, %89, !dbg !2945
  br i1 %cmp81, label %for.body82, label %for.end92, !dbg !2946

for.body82:                                       ; preds = %for.cond79
  %90 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2947
  %91 = load i32, i32* %i, align 4, !dbg !2949
  %idxprom83 = sext i32 %91 to i64, !dbg !2950
  %92 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2950
  %chset84 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %92, i32 0, i32 15, !dbg !2951
  %arrayidx85 = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset84, i64 0, i64 %idxprom83, !dbg !2950
  %call86 = call i32 @chs_assemble_freq_bands(%struct.DCAXllDecoder* %90, %struct.DCAXllChSet* %arrayidx85), !dbg !2952
  store i32 %call86, i32* %ret, align 4, !dbg !2953
  %cmp87 = icmp slt i32 %call86, 0, !dbg !2954
  br i1 %cmp87, label %if.then88, label %if.end89, !dbg !2955

if.then88:                                        ; preds = %for.body82
  %93 = load i32, i32* %ret, align 4, !dbg !2956
  store i32 %93, i32* %retval, align 4, !dbg !2957
  br label %return, !dbg !2957

if.end89:                                         ; preds = %for.body82
  br label %for.inc90, !dbg !2958

for.inc90:                                        ; preds = %if.end89
  %94 = load i32, i32* %i, align 4, !dbg !2960
  %inc91 = add nsw i32 %94, 1, !dbg !2960
  store i32 %inc91, i32* %i, align 4, !dbg !2960
  br label %for.cond79, !dbg !2962, !llvm.loop !2963

for.end92:                                        ; preds = %for.cond79
  br label %if.end93, !dbg !2965

if.end93:                                         ; preds = %for.end92, %for.end75
  %95 = load %struct.DCAContext*, %struct.DCAContext** %dca, align 8, !dbg !2966
  %request_channel_layout = getelementptr inbounds %struct.DCAContext, %struct.DCAContext* %95, i32 0, i32 13, !dbg !2968
  %96 = load i32, i32* %request_channel_layout, align 8, !dbg !2968
  %tobool94 = icmp ne i32 %96, 0, !dbg !2966
  br i1 %tobool94, label %if.then95, label %if.end121, !dbg !2969

if.then95:                                        ; preds = %if.end93
  %97 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2970
  %output_mask96 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %97, i32 0, i32 27, !dbg !2973
  %98 = load i32, i32* %output_mask96, align 8, !dbg !2973
  %and97 = and i32 %98, 512, !dbg !2974
  %tobool98 = icmp ne i32 %and97, 0, !dbg !2974
  br i1 %tobool98, label %if.then99, label %if.end107, !dbg !2975

if.then99:                                        ; preds = %if.then95
  %99 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2976
  %output_samples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %99, i32 0, i32 28, !dbg !2978
  %arrayidx100 = getelementptr inbounds [32 x i32*], [32 x i32*]* %output_samples, i64 0, i64 9, !dbg !2976
  %100 = load i32*, i32** %arrayidx100, align 8, !dbg !2976
  %101 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2979
  %output_samples101 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %101, i32 0, i32 28, !dbg !2980
  %arrayidx102 = getelementptr inbounds [32 x i32*], [32 x i32*]* %output_samples101, i64 0, i64 3, !dbg !2979
  store i32* %100, i32** %arrayidx102, align 8, !dbg !2981
  %102 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2982
  %output_mask103 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %102, i32 0, i32 27, !dbg !2983
  %103 = load i32, i32* %output_mask103, align 8, !dbg !2983
  %and104 = and i32 %103, -513, !dbg !2984
  %or105 = or i32 %and104, 8, !dbg !2985
  %104 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2986
  %output_mask106 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %104, i32 0, i32 27, !dbg !2987
  store i32 %or105, i32* %output_mask106, align 8, !dbg !2988
  br label %if.end107, !dbg !2989

if.end107:                                        ; preds = %if.then99, %if.then95
  %105 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2990
  %output_mask108 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %105, i32 0, i32 27, !dbg !2992
  %106 = load i32, i32* %output_mask108, align 8, !dbg !2992
  %and109 = and i32 %106, 1024, !dbg !2993
  %tobool110 = icmp ne i32 %and109, 0, !dbg !2993
  br i1 %tobool110, label %if.then111, label %if.end120, !dbg !2994

if.then111:                                       ; preds = %if.end107
  %107 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2995
  %output_samples112 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %107, i32 0, i32 28, !dbg !2997
  %arrayidx113 = getelementptr inbounds [32 x i32*], [32 x i32*]* %output_samples112, i64 0, i64 10, !dbg !2995
  %108 = load i32*, i32** %arrayidx113, align 16, !dbg !2995
  %109 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !2998
  %output_samples114 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %109, i32 0, i32 28, !dbg !2999
  %arrayidx115 = getelementptr inbounds [32 x i32*], [32 x i32*]* %output_samples114, i64 0, i64 4, !dbg !2998
  store i32* %108, i32** %arrayidx115, align 32, !dbg !3000
  %110 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3001
  %output_mask116 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %110, i32 0, i32 27, !dbg !3002
  %111 = load i32, i32* %output_mask116, align 8, !dbg !3002
  %and117 = and i32 %111, -1025, !dbg !3003
  %or118 = or i32 %and117, 16, !dbg !3004
  %112 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3005
  %output_mask119 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %112, i32 0, i32 27, !dbg !3006
  store i32 %or118, i32* %output_mask119, align 8, !dbg !3007
  br label %if.end120, !dbg !3008

if.end120:                                        ; preds = %if.then111, %if.end107
  br label %if.end121, !dbg !3009

if.end121:                                        ; preds = %if.end120, %if.end93
  %113 = load %struct.DCAContext*, %struct.DCAContext** %dca, align 8, !dbg !3010
  %request_channel_layout122 = getelementptr inbounds %struct.DCAContext, %struct.DCAContext* %113, i32 0, i32 13, !dbg !3012
  %114 = load i32, i32* %request_channel_layout122, align 8, !dbg !3012
  %cmp123 = icmp eq i32 %114, 6, !dbg !3013
  br i1 %cmp123, label %land.lhs.true124, label %if.else, !dbg !3014

land.lhs.true124:                                 ; preds = %if.end121
  %115 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3015
  %output_mask125 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %115, i32 0, i32 27, !dbg !3017
  %116 = load i32, i32* %output_mask125, align 8, !dbg !3017
  %and126 = and i32 %116, 6, !dbg !3018
  %cmp127 = icmp eq i32 %and126, 6, !dbg !3019
  br i1 %cmp127, label %land.lhs.true128, label %if.else, !dbg !3020

land.lhs.true128:                                 ; preds = %land.lhs.true124
  %117 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !3021
  %dmix_embedded129 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %117, i32 0, i32 7, !dbg !3023
  %118 = load i32, i32* %dmix_embedded129, align 4, !dbg !3023
  %tobool130 = icmp ne i32 %118, 0, !dbg !3021
  br i1 %tobool130, label %land.lhs.true131, label %if.else, !dbg !3024

land.lhs.true131:                                 ; preds = %land.lhs.true128
  %119 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !3025
  %dmix_type = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %119, i32 0, i32 8, !dbg !3026
  %120 = load i32, i32* %dmix_type, align 32, !dbg !3026
  %cmp132 = icmp eq i32 %120, 1, !dbg !3027
  br i1 %cmp132, label %if.then135, label %lor.lhs.false, !dbg !3028

lor.lhs.false:                                    ; preds = %land.lhs.true131
  %121 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !3029
  %dmix_type133 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %121, i32 0, i32 8, !dbg !3030
  %122 = load i32, i32* %dmix_type133, align 32, !dbg !3030
  %cmp134 = icmp eq i32 %122, 2, !dbg !3031
  br i1 %cmp134, label %if.then135, label %if.else, !dbg !3032

if.then135:                                       ; preds = %lor.lhs.false, %land.lhs.true131
  store i32 6, i32* %request_mask, align 4, !dbg !3034
  br label %if.end137, !dbg !3035

if.else:                                          ; preds = %lor.lhs.false, %land.lhs.true128, %land.lhs.true124, %if.end121
  %123 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3036
  %output_mask136 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %123, i32 0, i32 27, !dbg !3037
  %124 = load i32, i32* %output_mask136, align 8, !dbg !3037
  store i32 %124, i32* %request_mask, align 4, !dbg !3038
  br label %if.end137

if.end137:                                        ; preds = %if.else, %if.then135
  %125 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 8, !dbg !3039
  %arraydecay138 = getelementptr inbounds [32 x i32], [32 x i32]* %ch_remap, i32 0, i32 0, !dbg !3041
  %126 = load i32, i32* %request_mask, align 4, !dbg !3042
  %call139 = call i32 @ff_dca_set_channel_layout(%struct.AVCodecContext* %125, i32* %arraydecay138, i32 %126), !dbg !3043
  %tobool140 = icmp ne i32 %call139, 0, !dbg !3043
  br i1 %tobool140, label %if.end142, label %if.then141, !dbg !3044

if.then141:                                       ; preds = %if.end137
  store i32 -22, i32* %retval, align 4, !dbg !3045
  br label %return, !dbg !3045

if.end142:                                        ; preds = %if.end137
  %127 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !3046
  %freq = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %127, i32 0, i32 4, !dbg !3047
  %128 = load i32, i32* %freq, align 16, !dbg !3047
  %129 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3048
  %nfreqbands143 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %129, i32 0, i32 18, !dbg !3049
  %130 = load i32, i32* %nfreqbands143, align 4, !dbg !3049
  %sub144 = sub nsw i32 %130, 1, !dbg !3050
  %shl145 = shl i32 %128, %sub144, !dbg !3051
  %131 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 8, !dbg !3052
  %sample_rate = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %131, i32 0, i32 82, !dbg !3053
  store i32 %shl145, i32* %sample_rate, align 8, !dbg !3054
  %132 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !3055
  %storage_bit_res = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %132, i32 0, i32 3, !dbg !3056
  %133 = load i32, i32* %storage_bit_res, align 4, !dbg !3056
  switch i32 %133, label %sw.default [
    i32 16, label %sw.bb
    i32 20, label %sw.bb147
    i32 24, label %sw.bb147
  ], !dbg !3057

sw.bb:                                            ; preds = %if.end142
  %134 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 8, !dbg !3058
  %sample_fmt = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %134, i32 0, i32 84, !dbg !3060
  store i32 6, i32* %sample_fmt, align 8, !dbg !3061
  %135 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !3062
  %pcm_bit_res = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %135, i32 0, i32 2, !dbg !3063
  %136 = load i32, i32* %pcm_bit_res, align 8, !dbg !3063
  %sub146 = sub nsw i32 16, %136, !dbg !3064
  store i32 %sub146, i32* %shift, align 4, !dbg !3065
  br label %sw.epilog, !dbg !3066

sw.bb147:                                         ; preds = %if.end142, %if.end142
  %137 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 8, !dbg !3067
  %sample_fmt148 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %137, i32 0, i32 84, !dbg !3068
  store i32 7, i32* %sample_fmt148, align 8, !dbg !3069
  %138 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !3070
  %pcm_bit_res149 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %138, i32 0, i32 2, !dbg !3071
  %139 = load i32, i32* %pcm_bit_res149, align 8, !dbg !3071
  %sub150 = sub nsw i32 24, %139, !dbg !3072
  store i32 %sub150, i32* %shift, align 4, !dbg !3073
  br label %sw.epilog, !dbg !3074

sw.default:                                       ; preds = %if.end142
  store i32 -22, i32* %retval, align 4, !dbg !3075
  br label %return, !dbg !3075

sw.epilog:                                        ; preds = %sw.bb147, %sw.bb
  %140 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !3076
  %storage_bit_res151 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %140, i32 0, i32 3, !dbg !3077
  %141 = load i32, i32* %storage_bit_res151, align 4, !dbg !3077
  %142 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 8, !dbg !3078
  %bits_per_raw_sample = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %142, i32 0, i32 143, !dbg !3079
  store i32 %141, i32* %bits_per_raw_sample, align 4, !dbg !3080
  %143 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 8, !dbg !3081
  %profile = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %143, i32 0, i32 153, !dbg !3082
  store i32 60, i32* %profile, align 4, !dbg !3083
  %144 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 8, !dbg !3084
  %bit_rate = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %144, i32 0, i32 9, !dbg !3085
  store i64 0, i64* %bit_rate, align 8, !dbg !3086
  %145 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3087
  %nframesamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %145, i32 0, i32 8, !dbg !3088
  %146 = load i32, i32* %nframesamples, align 32, !dbg !3088
  %147 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3089
  %nfreqbands152 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %147, i32 0, i32 18, !dbg !3090
  %148 = load i32, i32* %nfreqbands152, align 4, !dbg !3090
  %sub153 = sub nsw i32 %148, 1, !dbg !3091
  %shl154 = shl i32 %146, %sub153, !dbg !3092
  store i32 %shl154, i32* %nsamples, align 4, !dbg !3093
  %149 = load %struct.AVFrame*, %struct.AVFrame** %frame.addr, align 8, !dbg !3094
  %nb_samples = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %149, i32 0, i32 5, !dbg !3095
  store i32 %shl154, i32* %nb_samples, align 8, !dbg !3096
  %150 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 8, !dbg !3097
  %151 = load %struct.AVFrame*, %struct.AVFrame** %frame.addr, align 8, !dbg !3099
  %call155 = call i32 @ff_get_buffer(%struct.AVCodecContext* %150, %struct.AVFrame* %151, i32 0), !dbg !3100
  store i32 %call155, i32* %ret, align 4, !dbg !3101
  %cmp156 = icmp slt i32 %call155, 0, !dbg !3102
  br i1 %cmp156, label %if.then157, label %if.end158, !dbg !3103

if.then157:                                       ; preds = %sw.epilog
  %152 = load i32, i32* %ret, align 4, !dbg !3104
  store i32 %152, i32* %retval, align 4, !dbg !3105
  br label %return, !dbg !3105

if.end158:                                        ; preds = %sw.epilog
  %153 = load i32, i32* %request_mask, align 4, !dbg !3106
  %154 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3108
  %output_mask159 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %154, i32 0, i32 27, !dbg !3109
  %155 = load i32, i32* %output_mask159, align 8, !dbg !3109
  %cmp160 = icmp ne i32 %153, %155, !dbg !3110
  br i1 %cmp160, label %if.then161, label %if.end166, !dbg !3111

if.then161:                                       ; preds = %if.end158
  %156 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3112
  %dcadsp = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %156, i32 0, i32 26, !dbg !3114
  %157 = load %struct.DCADSPContext*, %struct.DCADSPContext** %dcadsp, align 16, !dbg !3114
  %158 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3115
  %output_samples162 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %158, i32 0, i32 28, !dbg !3116
  %arraydecay163 = getelementptr inbounds [32 x i32*], [32 x i32*]* %output_samples162, i32 0, i32 0, !dbg !3115
  %159 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !3117
  %dmix_coeff = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %159, i32 0, i32 11, !dbg !3118
  %arraydecay164 = getelementptr inbounds [128 x i32], [128 x i32]* %dmix_coeff, i32 0, i32 0, !dbg !3117
  %160 = load i32, i32* %nsamples, align 4, !dbg !3119
  %161 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3120
  %output_mask165 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %161, i32 0, i32 27, !dbg !3121
  %162 = load i32, i32* %output_mask165, align 8, !dbg !3121
  call void @ff_dca_downmix_to_stereo_fixed(%struct.DCADSPContext* %157, i32** %arraydecay163, i32* %arraydecay164, i32 %160, i32 %162), !dbg !3122
  br label %if.end166, !dbg !3123

if.end166:                                        ; preds = %if.then161, %if.end158
  store i32 0, i32* %i, align 4, !dbg !3124
  br label %for.cond167, !dbg !3125

for.cond167:                                      ; preds = %for.inc211, %if.end166
  %163 = load i32, i32* %i, align 4, !dbg !3126
  %164 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 8, !dbg !3128
  %channels = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %164, i32 0, i32 83, !dbg !3129
  %165 = load i32, i32* %channels, align 4, !dbg !3129
  %cmp168 = icmp slt i32 %163, %165, !dbg !3130
  br i1 %cmp168, label %for.body169, label %for.end213, !dbg !3131

for.body169:                                      ; preds = %for.cond167
  call void @llvm.dbg.declare(metadata i32** %samples, metadata !3132, metadata !2040), !dbg !3133
  %166 = load i32, i32* %i, align 4, !dbg !3134
  %idxprom170 = sext i32 %166 to i64, !dbg !3135
  %arrayidx171 = getelementptr inbounds [32 x i32], [32 x i32]* %ch_remap, i64 0, i64 %idxprom170, !dbg !3135
  %167 = load i32, i32* %arrayidx171, align 4, !dbg !3135
  %idxprom172 = sext i32 %167 to i64, !dbg !3136
  %168 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3136
  %output_samples173 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %168, i32 0, i32 28, !dbg !3137
  %arrayidx174 = getelementptr inbounds [32 x i32*], [32 x i32*]* %output_samples173, i64 0, i64 %idxprom172, !dbg !3136
  %169 = load i32*, i32** %arrayidx174, align 8, !dbg !3136
  store i32* %169, i32** %samples, align 8, !dbg !3133
  %170 = load %struct.AVFrame*, %struct.AVFrame** %frame.addr, align 8, !dbg !3138
  %format = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %170, i32 0, i32 6, !dbg !3139
  %171 = load i32, i32* %format, align 4, !dbg !3139
  %cmp175 = icmp eq i32 %171, 6, !dbg !3140
  br i1 %cmp175, label %if.then176, label %if.else191, !dbg !3141

if.then176:                                       ; preds = %for.body169
  call void @llvm.dbg.declare(metadata i16** %plane, metadata !3142, metadata !2040), !dbg !3143
  %172 = load i32, i32* %i, align 4, !dbg !3144
  %idxprom177 = sext i32 %172 to i64, !dbg !3145
  %173 = load %struct.AVFrame*, %struct.AVFrame** %frame.addr, align 8, !dbg !3145
  %extended_data = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %173, i32 0, i32 2, !dbg !3146
  %174 = load i8**, i8*** %extended_data, align 8, !dbg !3146
  %arrayidx178 = getelementptr inbounds i8*, i8** %174, i64 %idxprom177, !dbg !3145
  %175 = load i8*, i8** %arrayidx178, align 8, !dbg !3145
  %176 = bitcast i8* %175 to i16*, !dbg !3147
  store i16* %176, i16** %plane, align 8, !dbg !3143
  store i32 0, i32* %k, align 4, !dbg !3148
  br label %for.cond179, !dbg !3149

for.cond179:                                      ; preds = %for.inc188, %if.then176
  %177 = load i32, i32* %k, align 4, !dbg !3150
  %178 = load i32, i32* %nsamples, align 4, !dbg !3152
  %cmp180 = icmp slt i32 %177, %178, !dbg !3153
  br i1 %cmp180, label %for.body181, label %for.end190, !dbg !3154

for.body181:                                      ; preds = %for.cond179
  %179 = load i32, i32* %k, align 4, !dbg !3155
  %idxprom182 = sext i32 %179 to i64, !dbg !3156
  %180 = load i32*, i32** %samples, align 8, !dbg !3156
  %arrayidx183 = getelementptr inbounds i32, i32* %180, i64 %idxprom182, !dbg !3156
  %181 = load i32, i32* %arrayidx183, align 4, !dbg !3156
  %182 = load i32, i32* %shift, align 4, !dbg !3157
  %shl184 = shl i32 1, %182, !dbg !3158
  %mul = mul i32 %181, %shl184, !dbg !3159
  store i32 %mul, i32* %a.addr.i, align 4, !dbg !3160
  %183 = load i32, i32* %a.addr.i, align 4, !dbg !3161
  %add.i = add i32 %183, 32768, !dbg !3163
  %and.i = and i32 %add.i, -65536, !dbg !3164
  %tobool.i = icmp ne i32 %and.i, 0, !dbg !3164
  br i1 %tobool.i, label %if.then.i, label %if.else.i, !dbg !3165

if.then.i:                                        ; preds = %for.body181
  %184 = load i32, i32* %a.addr.i, align 4, !dbg !3166
  %shr.i = ashr i32 %184, 31, !dbg !3168
  %xor.i = xor i32 %shr.i, 32767, !dbg !3169
  %conv.i = trunc i32 %xor.i to i16, !dbg !3170
  store i16 %conv.i, i16* %retval.i, align 2, !dbg !3171
  br label %av_clip_int16_c.exit, !dbg !3171

if.else.i:                                        ; preds = %for.body181
  %185 = load i32, i32* %a.addr.i, align 4, !dbg !3172
  %conv1.i = trunc i32 %185 to i16, !dbg !3172
  store i16 %conv1.i, i16* %retval.i, align 2, !dbg !3173
  br label %av_clip_int16_c.exit, !dbg !3173

av_clip_int16_c.exit:                             ; preds = %if.then.i, %if.else.i
  %186 = load i16, i16* %retval.i, align 2, !dbg !3174
  %187 = load i32, i32* %k, align 4, !dbg !3175
  %idxprom186 = sext i32 %187 to i64, !dbg !3176
  %188 = load i16*, i16** %plane, align 8, !dbg !3176
  %arrayidx187 = getelementptr inbounds i16, i16* %188, i64 %idxprom186, !dbg !3176
  store i16 %186, i16* %arrayidx187, align 2, !dbg !3177
  br label %for.inc188, !dbg !3176

for.inc188:                                       ; preds = %av_clip_int16_c.exit
  %189 = load i32, i32* %k, align 4, !dbg !3178
  %inc189 = add nsw i32 %189, 1, !dbg !3178
  store i32 %inc189, i32* %k, align 4, !dbg !3178
  br label %for.cond179, !dbg !3180, !llvm.loop !3181

for.end190:                                       ; preds = %for.cond179
  br label %if.end210, !dbg !3183

if.else191:                                       ; preds = %for.body169
  call void @llvm.dbg.declare(metadata i32** %plane192, metadata !3184, metadata !2040), !dbg !3186
  %190 = load i32, i32* %i, align 4, !dbg !3187
  %idxprom193 = sext i32 %190 to i64, !dbg !3188
  %191 = load %struct.AVFrame*, %struct.AVFrame** %frame.addr, align 8, !dbg !3188
  %extended_data194 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %191, i32 0, i32 2, !dbg !3189
  %192 = load i8**, i8*** %extended_data194, align 8, !dbg !3189
  %arrayidx195 = getelementptr inbounds i8*, i8** %192, i64 %idxprom193, !dbg !3188
  %193 = load i8*, i8** %arrayidx195, align 8, !dbg !3188
  %194 = bitcast i8* %193 to i32*, !dbg !3190
  store i32* %194, i32** %plane192, align 8, !dbg !3186
  store i32 0, i32* %k, align 4, !dbg !3191
  br label %for.cond196, !dbg !3193

for.cond196:                                      ; preds = %for.inc207, %if.else191
  %195 = load i32, i32* %k, align 4, !dbg !3194
  %196 = load i32, i32* %nsamples, align 4, !dbg !3197
  %cmp197 = icmp slt i32 %195, %196, !dbg !3198
  br i1 %cmp197, label %for.body198, label %for.end209, !dbg !3199

for.body198:                                      ; preds = %for.cond196
  %197 = load i32, i32* %k, align 4, !dbg !3200
  %idxprom199 = sext i32 %197 to i64, !dbg !3201
  %198 = load i32*, i32** %samples, align 8, !dbg !3201
  %arrayidx200 = getelementptr inbounds i32, i32* %198, i64 %idxprom199, !dbg !3201
  %199 = load i32, i32* %arrayidx200, align 4, !dbg !3201
  %200 = load i32, i32* %shift, align 4, !dbg !3202
  %shl201 = shl i32 1, %200, !dbg !3203
  %mul202 = mul i32 %199, %shl201, !dbg !3204
  %call203 = call i32 @clip23(i32 %mul202), !dbg !3205
  %mul204 = mul nsw i32 %call203, 256, !dbg !3206
  %201 = load i32, i32* %k, align 4, !dbg !3207
  %idxprom205 = sext i32 %201 to i64, !dbg !3208
  %202 = load i32*, i32** %plane192, align 8, !dbg !3208
  %arrayidx206 = getelementptr inbounds i32, i32* %202, i64 %idxprom205, !dbg !3208
  store i32 %mul204, i32* %arrayidx206, align 4, !dbg !3209
  br label %for.inc207, !dbg !3208

for.inc207:                                       ; preds = %for.body198
  %203 = load i32, i32* %k, align 4, !dbg !3210
  %inc208 = add nsw i32 %203, 1, !dbg !3210
  store i32 %inc208, i32* %k, align 4, !dbg !3210
  br label %for.cond196, !dbg !3212, !llvm.loop !3213

for.end209:                                       ; preds = %for.cond196
  br label %if.end210

if.end210:                                        ; preds = %for.end209, %for.end190
  br label %for.inc211, !dbg !3215

for.inc211:                                       ; preds = %if.end210
  %204 = load i32, i32* %i, align 4, !dbg !3216
  %inc212 = add nsw i32 %204, 1, !dbg !3216
  store i32 %inc212, i32* %i, align 4, !dbg !3216
  br label %for.cond167, !dbg !3218, !llvm.loop !3219

for.end213:                                       ; preds = %for.cond167
  %205 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset, align 8, !dbg !3221
  %one_to_one_map_ch_to_spkr = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %205, i32 0, i32 6, !dbg !3223
  %206 = load i32, i32* %one_to_one_map_ch_to_spkr, align 4, !dbg !3223
  %tobool214 = icmp ne i32 %206, 0, !dbg !3221
  br i1 %tobool214, label %if.else224, label %if.then215, !dbg !3224

if.then215:                                       ; preds = %for.end213
  %207 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset, align 8, !dbg !3225
  %representation_type = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %207, i32 0, i32 11, !dbg !3228
  %208 = load i32, i32* %representation_type, align 4, !dbg !3228
  %cmp216 = icmp eq i32 %208, 2, !dbg !3229
  br i1 %cmp216, label %if.then217, label %if.else218, !dbg !3230

if.then217:                                       ; preds = %if.then215
  store i32 1, i32* %matrix_encoding, align 4, !dbg !3231
  br label %if.end223, !dbg !3232

if.else218:                                       ; preds = %if.then215
  %209 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset, align 8, !dbg !3233
  %representation_type219 = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %209, i32 0, i32 11, !dbg !3235
  %210 = load i32, i32* %representation_type219, align 4, !dbg !3235
  %cmp220 = icmp eq i32 %210, 3, !dbg !3236
  br i1 %cmp220, label %if.then221, label %if.end222, !dbg !3237

if.then221:                                       ; preds = %if.else218
  store i32 6, i32* %matrix_encoding, align 4, !dbg !3238
  br label %if.end222, !dbg !3239

if.end222:                                        ; preds = %if.then221, %if.else218
  br label %if.end223

if.end223:                                        ; preds = %if.end222, %if.then217
  br label %if.end232, !dbg !3240

if.else224:                                       ; preds = %for.end213
  %211 = load i32, i32* %request_mask, align 4, !dbg !3241
  %212 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3244
  %output_mask225 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %212, i32 0, i32 27, !dbg !3245
  %213 = load i32, i32* %output_mask225, align 8, !dbg !3245
  %cmp226 = icmp ne i32 %211, %213, !dbg !3246
  br i1 %cmp226, label %land.lhs.true227, label %if.end231, !dbg !3247

land.lhs.true227:                                 ; preds = %if.else224
  %214 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !3248
  %dmix_type228 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %214, i32 0, i32 8, !dbg !3250
  %215 = load i32, i32* %dmix_type228, align 32, !dbg !3250
  %cmp229 = icmp eq i32 %215, 2, !dbg !3251
  br i1 %cmp229, label %if.then230, label %if.end231, !dbg !3252

if.then230:                                       ; preds = %land.lhs.true227
  store i32 1, i32* %matrix_encoding, align 4, !dbg !3253
  br label %if.end231, !dbg !3255

if.end231:                                        ; preds = %if.then230, %land.lhs.true227, %if.else224
  br label %if.end232

if.end232:                                        ; preds = %if.end231, %if.end223
  %216 = load %struct.AVFrame*, %struct.AVFrame** %frame.addr, align 8, !dbg !3256
  %217 = load i32, i32* %matrix_encoding, align 4, !dbg !3258
  %call233 = call i32 @ff_side_data_update_matrix_encoding(%struct.AVFrame* %216, i32 %217), !dbg !3259
  store i32 %call233, i32* %ret, align 4, !dbg !3260
  %cmp234 = icmp slt i32 %call233, 0, !dbg !3261
  br i1 %cmp234, label %if.then235, label %if.end236, !dbg !3262

if.then235:                                       ; preds = %if.end232
  %218 = load i32, i32* %ret, align 4, !dbg !3263
  store i32 %218, i32* %retval, align 4, !dbg !3264
  br label %return, !dbg !3264

if.end236:                                        ; preds = %if.end232
  store i32 0, i32* %retval, align 4, !dbg !3265
  br label %return, !dbg !3265

return:                                           ; preds = %if.end236, %if.then235, %if.then157, %sw.default, %if.then141, %if.then88, %if.then18
  %219 = load i32, i32* %retval, align 4, !dbg !3266
  ret i32 %219, !dbg !3266
}

; Function Attrs: cold nounwind optsize uwtable
define internal void @force_lossy_output(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %c) #2 !dbg !3267 {
entry:
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  %dca = alloca %struct.DCAContext*, align 8
  %band = alloca i32, align 4
  %ch = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !3270, metadata !2040), !dbg !3271
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !3272, metadata !2040), !dbg !3273
  call void @llvm.dbg.declare(metadata %struct.DCAContext** %dca, metadata !3274, metadata !2040), !dbg !3275
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3276
  %avctx = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %0, i32 0, i32 0, !dbg !3277
  %1 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 32, !dbg !3277
  %priv_data = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i32 0, i32 6, !dbg !3278
  %2 = load i8*, i8** %priv_data, align 8, !dbg !3278
  %3 = bitcast i8* %2 to %struct.DCAContext*, !dbg !3276
  store %struct.DCAContext* %3, %struct.DCAContext** %dca, align 8, !dbg !3275
  call void @llvm.dbg.declare(metadata i32* %band, metadata !3279, metadata !2040), !dbg !3280
  call void @llvm.dbg.declare(metadata i32* %ch, metadata !3281, metadata !2040), !dbg !3282
  store i32 0, i32* %band, align 4, !dbg !3283
  br label %for.cond, !dbg !3285

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i32, i32* %band, align 4, !dbg !3286
  %5 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3289
  %nfreqbands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %5, i32 0, i32 16, !dbg !3290
  %6 = load i32, i32* %nfreqbands, align 16, !dbg !3290
  %cmp = icmp slt i32 %4, %6, !dbg !3291
  br i1 %cmp, label %for.body, label %for.end, !dbg !3292

for.body:                                         ; preds = %for.cond
  %7 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3293
  %8 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3294
  %9 = load i32, i32* %band, align 4, !dbg !3295
  call void @chs_clear_band_data(%struct.DCAXllDecoder* %7, %struct.DCAXllChSet* %8, i32 %9, i32 -1), !dbg !3296
  br label %for.inc, !dbg !3296

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %band, align 4, !dbg !3297
  %inc = add nsw i32 %10, 1, !dbg !3297
  store i32 %inc, i32* %band, align 4, !dbg !3297
  br label %for.cond, !dbg !3299, !llvm.loop !3300

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %ch, align 4, !dbg !3302
  br label %for.cond1, !dbg !3304

for.cond1:                                        ; preds = %for.inc10, %for.end
  %11 = load i32, i32* %ch, align 4, !dbg !3305
  %12 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3308
  %nchannels = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %12, i32 0, i32 0, !dbg !3309
  %13 = load i32, i32* %nchannels, align 32, !dbg !3309
  %cmp2 = icmp slt i32 %11, %13, !dbg !3310
  br i1 %cmp2, label %for.body3, label %for.end12, !dbg !3311

for.body3:                                        ; preds = %for.cond1
  %14 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3312
  %residual_encode = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %14, i32 0, i32 1, !dbg !3315
  %15 = load i32, i32* %residual_encode, align 4, !dbg !3315
  %16 = load i32, i32* %ch, align 4, !dbg !3316
  %shl = shl i32 1, %16, !dbg !3317
  %and = and i32 %15, %shl, !dbg !3318
  %tobool = icmp ne i32 %and, 0, !dbg !3318
  br i1 %tobool, label %if.end, label %if.then, !dbg !3319

if.then:                                          ; preds = %for.body3
  br label %for.inc10, !dbg !3320

if.end:                                           ; preds = %for.body3
  %17 = load %struct.DCAContext*, %struct.DCAContext** %dca, align 8, !dbg !3321
  %core = getelementptr inbounds %struct.DCAContext, %struct.DCAContext* %17, i32 0, i32 3, !dbg !3323
  %18 = load i32, i32* %ch, align 4, !dbg !3324
  %idxprom = sext i32 %18 to i64, !dbg !3325
  %19 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3325
  %ch_remap = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %19, i32 0, i32 15, !dbg !3326
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* %ch_remap, i64 0, i64 %idxprom, !dbg !3325
  %20 = load i32, i32* %arrayidx, align 4, !dbg !3325
  %call = call i32 @ff_dca_core_map_spkr(%struct.DCACoreDecoder* %core, i32 %20), !dbg !3327
  %cmp4 = icmp slt i32 %call, 0, !dbg !3328
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !3329

if.then5:                                         ; preds = %if.end
  br label %for.inc10, !dbg !3330

if.end6:                                          ; preds = %if.end
  %21 = load i32, i32* %ch, align 4, !dbg !3331
  %shl7 = shl i32 1, %21, !dbg !3332
  %neg = xor i32 %shl7, -1, !dbg !3333
  %22 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3334
  %residual_encode8 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %22, i32 0, i32 1, !dbg !3335
  %23 = load i32, i32* %residual_encode8, align 4, !dbg !3336
  %and9 = and i32 %23, %neg, !dbg !3336
  store i32 %and9, i32* %residual_encode8, align 4, !dbg !3336
  br label %for.inc10, !dbg !3337

for.inc10:                                        ; preds = %if.end6, %if.then5, %if.then
  %24 = load i32, i32* %ch, align 4, !dbg !3338
  %inc11 = add nsw i32 %24, 1, !dbg !3338
  store i32 %inc11, i32* %ch, align 4, !dbg !3338
  br label %for.cond1, !dbg !3340, !llvm.loop !3341

for.end12:                                        ; preds = %for.cond1
  ret void, !dbg !3343
}

; Function Attrs: nounwind uwtable
define internal void @chs_filter_band_data(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %c, i32 %band) #0 !dbg !3344 {
entry:
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  %band.addr = alloca i32, align 4
  %b = alloca %struct.DCAXllBand*, align 8
  %nsamples = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %buf = alloca i32*, align 8
  %order = alloca i32, align 4
  %coeff = alloca [16 x i32], align 16
  %rc = alloca i32, align 4
  %tmp1 = alloca i32, align 4
  %tmp2 = alloca i32, align 4
  %err = alloca i64, align 8
  %tmp = alloca [8 x i32*], align 16
  %coeff96 = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !3347, metadata !2040), !dbg !3348
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !3349, metadata !2040), !dbg !3350
  store i32 %band, i32* %band.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %band.addr, metadata !3351, metadata !2040), !dbg !3352
  call void @llvm.dbg.declare(metadata %struct.DCAXllBand** %b, metadata !3353, metadata !2040), !dbg !3355
  %0 = load i32, i32* %band.addr, align 4, !dbg !3356
  %idxprom = sext i32 %0 to i64, !dbg !3357
  %1 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3357
  %bands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %1, i32 0, i32 18, !dbg !3358
  %arrayidx = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands, i64 0, i64 %idxprom, !dbg !3357
  store %struct.DCAXllBand* %arrayidx, %struct.DCAXllBand** %b, align 8, !dbg !3355
  call void @llvm.dbg.declare(metadata i32* %nsamples, metadata !3359, metadata !2040), !dbg !3360
  %2 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3361
  %nframesamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %2, i32 0, i32 8, !dbg !3362
  %3 = load i32, i32* %nframesamples, align 32, !dbg !3362
  store i32 %3, i32* %nsamples, align 4, !dbg !3360
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3363, metadata !2040), !dbg !3364
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3365, metadata !2040), !dbg !3366
  call void @llvm.dbg.declare(metadata i32* %k, metadata !3367, metadata !2040), !dbg !3368
  store i32 0, i32* %i, align 4, !dbg !3369
  br label %for.cond, !dbg !3371

for.cond:                                         ; preds = %for.inc85, %entry
  %4 = load i32, i32* %i, align 4, !dbg !3372
  %5 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3375
  %nchannels = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %5, i32 0, i32 0, !dbg !3376
  %6 = load i32, i32* %nchannels, align 32, !dbg !3376
  %cmp = icmp slt i32 %4, %6, !dbg !3377
  br i1 %cmp, label %for.body, label %for.end87, !dbg !3378

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32** %buf, metadata !3379, metadata !2040), !dbg !3381
  %7 = load i32, i32* %i, align 4, !dbg !3382
  %idxprom1 = sext i32 %7 to i64, !dbg !3383
  %8 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3383
  %msb_sample_buffer = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %8, i32 0, i32 11, !dbg !3384
  %arrayidx2 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer, i64 0, i64 %idxprom1, !dbg !3383
  %9 = load i32*, i32** %arrayidx2, align 8, !dbg !3383
  store i32* %9, i32** %buf, align 8, !dbg !3381
  call void @llvm.dbg.declare(metadata i32* %order, metadata !3385, metadata !2040), !dbg !3386
  %10 = load i32, i32* %i, align 4, !dbg !3387
  %idxprom3 = sext i32 %10 to i64, !dbg !3388
  %11 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3388
  %adapt_pred_order = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %11, i32 0, i32 3, !dbg !3389
  %arrayidx4 = getelementptr inbounds [8 x i32], [8 x i32]* %adapt_pred_order, i64 0, i64 %idxprom3, !dbg !3388
  %12 = load i32, i32* %arrayidx4, align 4, !dbg !3388
  store i32 %12, i32* %order, align 4, !dbg !3386
  %13 = load i32, i32* %order, align 4, !dbg !3390
  %cmp5 = icmp sgt i32 %13, 0, !dbg !3392
  br i1 %cmp5, label %if.then, label %if.else, !dbg !3393

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata [16 x i32]* %coeff, metadata !3394, metadata !2040), !dbg !3396
  store i32 0, i32* %j, align 4, !dbg !3397
  br label %for.cond6, !dbg !3399

for.cond6:                                        ; preds = %for.inc32, %if.then
  %14 = load i32, i32* %j, align 4, !dbg !3400
  %15 = load i32, i32* %order, align 4, !dbg !3403
  %cmp7 = icmp slt i32 %14, %15, !dbg !3404
  br i1 %cmp7, label %for.body8, label %for.end34, !dbg !3405

for.body8:                                        ; preds = %for.cond6
  call void @llvm.dbg.declare(metadata i32* %rc, metadata !3406, metadata !2040), !dbg !3408
  %16 = load i32, i32* %j, align 4, !dbg !3409
  %idxprom9 = sext i32 %16 to i64, !dbg !3410
  %17 = load i32, i32* %i, align 4, !dbg !3411
  %idxprom10 = sext i32 %17 to i64, !dbg !3410
  %18 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3410
  %adapt_refl_coeff = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %18, i32 0, i32 6, !dbg !3412
  %arrayidx11 = getelementptr inbounds [8 x [16 x i32]], [8 x [16 x i32]]* %adapt_refl_coeff, i64 0, i64 %idxprom10, !dbg !3410
  %arrayidx12 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx11, i64 0, i64 %idxprom9, !dbg !3410
  %19 = load i32, i32* %arrayidx12, align 4, !dbg !3410
  store i32 %19, i32* %rc, align 4, !dbg !3408
  store i32 0, i32* %k, align 4, !dbg !3413
  br label %for.cond13, !dbg !3415

for.cond13:                                       ; preds = %for.inc, %for.body8
  %20 = load i32, i32* %k, align 4, !dbg !3416
  %21 = load i32, i32* %j, align 4, !dbg !3419
  %add = add nsw i32 %21, 1, !dbg !3420
  %div = sdiv i32 %add, 2, !dbg !3421
  %cmp14 = icmp slt i32 %20, %div, !dbg !3422
  br i1 %cmp14, label %for.body15, label %for.end, !dbg !3423

for.body15:                                       ; preds = %for.cond13
  call void @llvm.dbg.declare(metadata i32* %tmp1, metadata !3424, metadata !2040), !dbg !3426
  %22 = load i32, i32* %k, align 4, !dbg !3427
  %idxprom16 = sext i32 %22 to i64, !dbg !3428
  %arrayidx17 = getelementptr inbounds [16 x i32], [16 x i32]* %coeff, i64 0, i64 %idxprom16, !dbg !3428
  %23 = load i32, i32* %arrayidx17, align 4, !dbg !3428
  store i32 %23, i32* %tmp1, align 4, !dbg !3426
  call void @llvm.dbg.declare(metadata i32* %tmp2, metadata !3429, metadata !2040), !dbg !3430
  %24 = load i32, i32* %j, align 4, !dbg !3431
  %25 = load i32, i32* %k, align 4, !dbg !3432
  %sub = sub nsw i32 %24, %25, !dbg !3433
  %sub18 = sub nsw i32 %sub, 1, !dbg !3434
  %idxprom19 = sext i32 %sub18 to i64, !dbg !3435
  %arrayidx20 = getelementptr inbounds [16 x i32], [16 x i32]* %coeff, i64 0, i64 %idxprom19, !dbg !3435
  %26 = load i32, i32* %arrayidx20, align 4, !dbg !3435
  store i32 %26, i32* %tmp2, align 4, !dbg !3430
  %27 = load i32, i32* %tmp1, align 4, !dbg !3436
  %28 = load i32, i32* %rc, align 4, !dbg !3437
  %29 = load i32, i32* %tmp2, align 4, !dbg !3438
  %call = call i32 @mul16(i32 %28, i32 %29), !dbg !3439
  %add21 = add nsw i32 %27, %call, !dbg !3440
  %30 = load i32, i32* %k, align 4, !dbg !3441
  %idxprom22 = sext i32 %30 to i64, !dbg !3442
  %arrayidx23 = getelementptr inbounds [16 x i32], [16 x i32]* %coeff, i64 0, i64 %idxprom22, !dbg !3442
  store i32 %add21, i32* %arrayidx23, align 4, !dbg !3443
  %31 = load i32, i32* %tmp2, align 4, !dbg !3444
  %32 = load i32, i32* %rc, align 4, !dbg !3445
  %33 = load i32, i32* %tmp1, align 4, !dbg !3446
  %call24 = call i32 @mul16(i32 %32, i32 %33), !dbg !3447
  %add25 = add nsw i32 %31, %call24, !dbg !3448
  %34 = load i32, i32* %j, align 4, !dbg !3449
  %35 = load i32, i32* %k, align 4, !dbg !3450
  %sub26 = sub nsw i32 %34, %35, !dbg !3451
  %sub27 = sub nsw i32 %sub26, 1, !dbg !3452
  %idxprom28 = sext i32 %sub27 to i64, !dbg !3453
  %arrayidx29 = getelementptr inbounds [16 x i32], [16 x i32]* %coeff, i64 0, i64 %idxprom28, !dbg !3453
  store i32 %add25, i32* %arrayidx29, align 4, !dbg !3454
  br label %for.inc, !dbg !3455

for.inc:                                          ; preds = %for.body15
  %36 = load i32, i32* %k, align 4, !dbg !3456
  %inc = add nsw i32 %36, 1, !dbg !3456
  store i32 %inc, i32* %k, align 4, !dbg !3456
  br label %for.cond13, !dbg !3458, !llvm.loop !3459

for.end:                                          ; preds = %for.cond13
  %37 = load i32, i32* %rc, align 4, !dbg !3461
  %38 = load i32, i32* %j, align 4, !dbg !3462
  %idxprom30 = sext i32 %38 to i64, !dbg !3463
  %arrayidx31 = getelementptr inbounds [16 x i32], [16 x i32]* %coeff, i64 0, i64 %idxprom30, !dbg !3463
  store i32 %37, i32* %arrayidx31, align 4, !dbg !3464
  br label %for.inc32, !dbg !3465

for.inc32:                                        ; preds = %for.end
  %39 = load i32, i32* %j, align 4, !dbg !3466
  %inc33 = add nsw i32 %39, 1, !dbg !3466
  store i32 %inc33, i32* %j, align 4, !dbg !3466
  br label %for.cond6, !dbg !3468, !llvm.loop !3469

for.end34:                                        ; preds = %for.cond6
  store i32 0, i32* %j, align 4, !dbg !3471
  br label %for.cond35, !dbg !3473

for.cond35:                                       ; preds = %for.inc60, %for.end34
  %40 = load i32, i32* %j, align 4, !dbg !3474
  %41 = load i32, i32* %nsamples, align 4, !dbg !3477
  %42 = load i32, i32* %order, align 4, !dbg !3478
  %sub36 = sub nsw i32 %41, %42, !dbg !3479
  %cmp37 = icmp slt i32 %40, %sub36, !dbg !3480
  br i1 %cmp37, label %for.body38, label %for.end62, !dbg !3481

for.body38:                                       ; preds = %for.cond35
  call void @llvm.dbg.declare(metadata i64* %err, metadata !3482, metadata !2040), !dbg !3484
  store i64 0, i64* %err, align 8, !dbg !3484
  store i32 0, i32* %k, align 4, !dbg !3485
  br label %for.cond39, !dbg !3487

for.cond39:                                       ; preds = %for.inc51, %for.body38
  %43 = load i32, i32* %k, align 4, !dbg !3488
  %44 = load i32, i32* %order, align 4, !dbg !3491
  %cmp40 = icmp slt i32 %43, %44, !dbg !3492
  br i1 %cmp40, label %for.body41, label %for.end53, !dbg !3493

for.body41:                                       ; preds = %for.cond39
  %45 = load i32, i32* %j, align 4, !dbg !3494
  %46 = load i32, i32* %k, align 4, !dbg !3495
  %add42 = add nsw i32 %45, %46, !dbg !3496
  %idxprom43 = sext i32 %add42 to i64, !dbg !3497
  %47 = load i32*, i32** %buf, align 8, !dbg !3497
  %arrayidx44 = getelementptr inbounds i32, i32* %47, i64 %idxprom43, !dbg !3497
  %48 = load i32, i32* %arrayidx44, align 4, !dbg !3497
  %conv = sext i32 %48 to i64, !dbg !3498
  %49 = load i32, i32* %order, align 4, !dbg !3499
  %50 = load i32, i32* %k, align 4, !dbg !3500
  %sub45 = sub nsw i32 %49, %50, !dbg !3501
  %sub46 = sub nsw i32 %sub45, 1, !dbg !3502
  %idxprom47 = sext i32 %sub46 to i64, !dbg !3503
  %arrayidx48 = getelementptr inbounds [16 x i32], [16 x i32]* %coeff, i64 0, i64 %idxprom47, !dbg !3503
  %51 = load i32, i32* %arrayidx48, align 4, !dbg !3503
  %conv49 = sext i32 %51 to i64, !dbg !3503
  %mul = mul nsw i64 %conv, %conv49, !dbg !3504
  %52 = load i64, i64* %err, align 8, !dbg !3505
  %add50 = add nsw i64 %52, %mul, !dbg !3505
  store i64 %add50, i64* %err, align 8, !dbg !3505
  br label %for.inc51, !dbg !3506

for.inc51:                                        ; preds = %for.body41
  %53 = load i32, i32* %k, align 4, !dbg !3507
  %inc52 = add nsw i32 %53, 1, !dbg !3507
  store i32 %inc52, i32* %k, align 4, !dbg !3507
  br label %for.cond39, !dbg !3509, !llvm.loop !3510

for.end53:                                        ; preds = %for.cond39
  %54 = load i64, i64* %err, align 8, !dbg !3512
  %call54 = call i32 @norm16(i64 %54), !dbg !3513
  %call55 = call i32 @clip23(i32 %call54), !dbg !3514
  %55 = load i32, i32* %j, align 4, !dbg !3516
  %56 = load i32, i32* %k, align 4, !dbg !3517
  %add56 = add nsw i32 %55, %56, !dbg !3518
  %idxprom57 = sext i32 %add56 to i64, !dbg !3519
  %57 = load i32*, i32** %buf, align 8, !dbg !3519
  %arrayidx58 = getelementptr inbounds i32, i32* %57, i64 %idxprom57, !dbg !3519
  %58 = load i32, i32* %arrayidx58, align 4, !dbg !3520
  %sub59 = sub i32 %58, %call55, !dbg !3520
  store i32 %sub59, i32* %arrayidx58, align 4, !dbg !3520
  br label %for.inc60, !dbg !3521

for.inc60:                                        ; preds = %for.end53
  %59 = load i32, i32* %j, align 4, !dbg !3522
  %inc61 = add nsw i32 %59, 1, !dbg !3522
  store i32 %inc61, i32* %j, align 4, !dbg !3522
  br label %for.cond35, !dbg !3524, !llvm.loop !3525

for.end62:                                        ; preds = %for.cond35
  br label %if.end, !dbg !3527

if.else:                                          ; preds = %for.body
  store i32 0, i32* %j, align 4, !dbg !3528
  br label %for.cond63, !dbg !3531

for.cond63:                                       ; preds = %for.inc82, %if.else
  %60 = load i32, i32* %j, align 4, !dbg !3532
  %61 = load i32, i32* %i, align 4, !dbg !3535
  %idxprom64 = sext i32 %61 to i64, !dbg !3536
  %62 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3536
  %fixed_pred_order = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %62, i32 0, i32 5, !dbg !3537
  %arrayidx65 = getelementptr inbounds [8 x i32], [8 x i32]* %fixed_pred_order, i64 0, i64 %idxprom64, !dbg !3536
  %63 = load i32, i32* %arrayidx65, align 4, !dbg !3536
  %cmp66 = icmp slt i32 %60, %63, !dbg !3538
  br i1 %cmp66, label %for.body68, label %for.end84, !dbg !3539

for.body68:                                       ; preds = %for.cond63
  store i32 1, i32* %k, align 4, !dbg !3540
  br label %for.cond69, !dbg !3542

for.cond69:                                       ; preds = %for.inc79, %for.body68
  %64 = load i32, i32* %k, align 4, !dbg !3543
  %65 = load i32, i32* %nsamples, align 4, !dbg !3546
  %cmp70 = icmp slt i32 %64, %65, !dbg !3547
  br i1 %cmp70, label %for.body72, label %for.end81, !dbg !3548

for.body72:                                       ; preds = %for.cond69
  %66 = load i32, i32* %k, align 4, !dbg !3549
  %sub73 = sub nsw i32 %66, 1, !dbg !3550
  %idxprom74 = sext i32 %sub73 to i64, !dbg !3551
  %67 = load i32*, i32** %buf, align 8, !dbg !3551
  %arrayidx75 = getelementptr inbounds i32, i32* %67, i64 %idxprom74, !dbg !3551
  %68 = load i32, i32* %arrayidx75, align 4, !dbg !3551
  %69 = load i32, i32* %k, align 4, !dbg !3552
  %idxprom76 = sext i32 %69 to i64, !dbg !3553
  %70 = load i32*, i32** %buf, align 8, !dbg !3553
  %arrayidx77 = getelementptr inbounds i32, i32* %70, i64 %idxprom76, !dbg !3553
  %71 = load i32, i32* %arrayidx77, align 4, !dbg !3554
  %add78 = add i32 %71, %68, !dbg !3554
  store i32 %add78, i32* %arrayidx77, align 4, !dbg !3554
  br label %for.inc79, !dbg !3553

for.inc79:                                        ; preds = %for.body72
  %72 = load i32, i32* %k, align 4, !dbg !3555
  %inc80 = add nsw i32 %72, 1, !dbg !3555
  store i32 %inc80, i32* %k, align 4, !dbg !3555
  br label %for.cond69, !dbg !3557, !llvm.loop !3558

for.end81:                                        ; preds = %for.cond69
  br label %for.inc82, !dbg !3560

for.inc82:                                        ; preds = %for.end81
  %73 = load i32, i32* %j, align 4, !dbg !3562
  %inc83 = add nsw i32 %73, 1, !dbg !3562
  store i32 %inc83, i32* %j, align 4, !dbg !3562
  br label %for.cond63, !dbg !3564, !llvm.loop !3565

for.end84:                                        ; preds = %for.cond63
  br label %if.end

if.end:                                           ; preds = %for.end84, %for.end62
  br label %for.inc85, !dbg !3567

for.inc85:                                        ; preds = %if.end
  %74 = load i32, i32* %i, align 4, !dbg !3568
  %inc86 = add nsw i32 %74, 1, !dbg !3568
  store i32 %inc86, i32* %i, align 4, !dbg !3568
  br label %for.cond, !dbg !3570, !llvm.loop !3571

for.end87:                                        ; preds = %for.cond
  %75 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3573
  %decor_enabled = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %75, i32 0, i32 0, !dbg !3575
  %76 = load i32, i32* %decor_enabled, align 8, !dbg !3575
  %tobool = icmp ne i32 %76, 0, !dbg !3573
  br i1 %tobool, label %if.then88, label %if.end143, !dbg !3576

if.then88:                                        ; preds = %for.end87
  call void @llvm.dbg.declare(metadata [8 x i32*]* %tmp, metadata !3577, metadata !2040), !dbg !3579
  store i32 0, i32* %i, align 4, !dbg !3580
  br label %for.cond89, !dbg !3582

for.cond89:                                       ; preds = %for.inc112, %if.then88
  %77 = load i32, i32* %i, align 4, !dbg !3583
  %78 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3586
  %nchannels90 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %78, i32 0, i32 0, !dbg !3587
  %79 = load i32, i32* %nchannels90, align 32, !dbg !3587
  %div91 = sdiv i32 %79, 2, !dbg !3588
  %cmp92 = icmp slt i32 %77, %div91, !dbg !3589
  br i1 %cmp92, label %for.body94, label %for.end114, !dbg !3590

for.body94:                                       ; preds = %for.cond89
  call void @llvm.dbg.declare(metadata i32* %coeff96, metadata !3591, metadata !2040), !dbg !3593
  %80 = load i32, i32* %i, align 4, !dbg !3594
  %idxprom97 = sext i32 %80 to i64, !dbg !3595
  %81 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3595
  %decor_coeff = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %81, i32 0, i32 2, !dbg !3596
  %arrayidx98 = getelementptr inbounds [4 x i32], [4 x i32]* %decor_coeff, i64 0, i64 %idxprom97, !dbg !3595
  %82 = load i32, i32* %arrayidx98, align 4, !dbg !3595
  store i32 %82, i32* %coeff96, align 4, !dbg !3593
  %83 = load i32, i32* %coeff96, align 4, !dbg !3597
  %tobool99 = icmp ne i32 %83, 0, !dbg !3597
  br i1 %tobool99, label %if.then100, label %if.end111, !dbg !3599

if.then100:                                       ; preds = %for.body94
  %84 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3600
  %dcadsp = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %84, i32 0, i32 26, !dbg !3602
  %85 = load %struct.DCADSPContext*, %struct.DCADSPContext** %dcadsp, align 16, !dbg !3602
  %decor = getelementptr inbounds %struct.DCADSPContext, %struct.DCADSPContext* %85, i32 0, i32 8, !dbg !3603
  %86 = load void (i32*, i32*, i32, i64)*, void (i32*, i32*, i32, i64)** %decor, align 8, !dbg !3603
  %87 = load i32, i32* %i, align 4, !dbg !3604
  %mul101 = mul nsw i32 %87, 2, !dbg !3605
  %add102 = add nsw i32 %mul101, 1, !dbg !3606
  %idxprom103 = sext i32 %add102 to i64, !dbg !3607
  %88 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3607
  %msb_sample_buffer104 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %88, i32 0, i32 11, !dbg !3608
  %arrayidx105 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer104, i64 0, i64 %idxprom103, !dbg !3607
  %89 = load i32*, i32** %arrayidx105, align 8, !dbg !3607
  %90 = load i32, i32* %i, align 4, !dbg !3609
  %mul106 = mul nsw i32 %90, 2, !dbg !3610
  %idxprom107 = sext i32 %mul106 to i64, !dbg !3611
  %91 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3611
  %msb_sample_buffer108 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %91, i32 0, i32 11, !dbg !3612
  %arrayidx109 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer108, i64 0, i64 %idxprom107, !dbg !3611
  %92 = load i32*, i32** %arrayidx109, align 8, !dbg !3611
  %93 = load i32, i32* %coeff96, align 4, !dbg !3613
  %94 = load i32, i32* %nsamples, align 4, !dbg !3614
  %conv110 = sext i32 %94 to i64, !dbg !3614
  call void %86(i32* %89, i32* %92, i32 %93, i64 %conv110), !dbg !3600
  br label %if.end111, !dbg !3615

if.end111:                                        ; preds = %if.then100, %for.body94
  br label %for.inc112, !dbg !3616

for.inc112:                                       ; preds = %if.end111
  %95 = load i32, i32* %i, align 4, !dbg !3617
  %inc113 = add nsw i32 %95, 1, !dbg !3617
  store i32 %inc113, i32* %i, align 4, !dbg !3617
  br label %for.cond89, !dbg !3619, !llvm.loop !3620

for.end114:                                       ; preds = %for.cond89
  store i32 0, i32* %i, align 4, !dbg !3622
  br label %for.cond115, !dbg !3624

for.cond115:                                      ; preds = %for.inc125, %for.end114
  %96 = load i32, i32* %i, align 4, !dbg !3625
  %97 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3628
  %nchannels116 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %97, i32 0, i32 0, !dbg !3629
  %98 = load i32, i32* %nchannels116, align 32, !dbg !3629
  %cmp117 = icmp slt i32 %96, %98, !dbg !3630
  br i1 %cmp117, label %for.body119, label %for.end127, !dbg !3631

for.body119:                                      ; preds = %for.cond115
  %99 = load i32, i32* %i, align 4, !dbg !3632
  %idxprom120 = sext i32 %99 to i64, !dbg !3633
  %100 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3633
  %msb_sample_buffer121 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %100, i32 0, i32 11, !dbg !3634
  %arrayidx122 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer121, i64 0, i64 %idxprom120, !dbg !3633
  %101 = load i32*, i32** %arrayidx122, align 8, !dbg !3633
  %102 = load i32, i32* %i, align 4, !dbg !3635
  %idxprom123 = sext i32 %102 to i64, !dbg !3636
  %arrayidx124 = getelementptr inbounds [8 x i32*], [8 x i32*]* %tmp, i64 0, i64 %idxprom123, !dbg !3636
  store i32* %101, i32** %arrayidx124, align 8, !dbg !3637
  br label %for.inc125, !dbg !3636

for.inc125:                                       ; preds = %for.body119
  %103 = load i32, i32* %i, align 4, !dbg !3638
  %inc126 = add nsw i32 %103, 1, !dbg !3638
  store i32 %inc126, i32* %i, align 4, !dbg !3638
  br label %for.cond115, !dbg !3640, !llvm.loop !3641

for.end127:                                       ; preds = %for.cond115
  store i32 0, i32* %i, align 4, !dbg !3643
  br label %for.cond128, !dbg !3645

for.cond128:                                      ; preds = %for.inc140, %for.end127
  %104 = load i32, i32* %i, align 4, !dbg !3646
  %105 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3649
  %nchannels129 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %105, i32 0, i32 0, !dbg !3650
  %106 = load i32, i32* %nchannels129, align 32, !dbg !3650
  %cmp130 = icmp slt i32 %104, %106, !dbg !3651
  br i1 %cmp130, label %for.body132, label %for.end142, !dbg !3652

for.body132:                                      ; preds = %for.cond128
  %107 = load i32, i32* %i, align 4, !dbg !3653
  %idxprom133 = sext i32 %107 to i64, !dbg !3654
  %arrayidx134 = getelementptr inbounds [8 x i32*], [8 x i32*]* %tmp, i64 0, i64 %idxprom133, !dbg !3654
  %108 = load i32*, i32** %arrayidx134, align 8, !dbg !3654
  %109 = load i32, i32* %i, align 4, !dbg !3655
  %idxprom135 = sext i32 %109 to i64, !dbg !3656
  %110 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3656
  %orig_order = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %110, i32 0, i32 1, !dbg !3657
  %arrayidx136 = getelementptr inbounds [8 x i32], [8 x i32]* %orig_order, i64 0, i64 %idxprom135, !dbg !3656
  %111 = load i32, i32* %arrayidx136, align 4, !dbg !3656
  %idxprom137 = sext i32 %111 to i64, !dbg !3658
  %112 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3658
  %msb_sample_buffer138 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %112, i32 0, i32 11, !dbg !3659
  %arrayidx139 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer138, i64 0, i64 %idxprom137, !dbg !3658
  store i32* %108, i32** %arrayidx139, align 8, !dbg !3660
  br label %for.inc140, !dbg !3658

for.inc140:                                       ; preds = %for.body132
  %113 = load i32, i32* %i, align 4, !dbg !3661
  %inc141 = add nsw i32 %113, 1, !dbg !3661
  store i32 %inc141, i32* %i, align 4, !dbg !3661
  br label %for.cond128, !dbg !3663, !llvm.loop !3664

for.end142:                                       ; preds = %for.cond128
  br label %if.end143, !dbg !3666

if.end143:                                        ; preds = %for.end142, %for.end87
  %114 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3667
  %nfreqbands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %114, i32 0, i32 16, !dbg !3669
  %115 = load i32, i32* %nfreqbands, align 16, !dbg !3669
  %cmp144 = icmp eq i32 %115, 1, !dbg !3670
  br i1 %cmp144, label %if.then146, label %if.end162, !dbg !3671

if.then146:                                       ; preds = %if.end143
  store i32 0, i32* %i, align 4, !dbg !3672
  br label %for.cond147, !dbg !3674

for.cond147:                                      ; preds = %for.inc159, %if.then146
  %116 = load i32, i32* %i, align 4, !dbg !3675
  %117 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3678
  %nchannels148 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %117, i32 0, i32 0, !dbg !3679
  %118 = load i32, i32* %nchannels148, align 32, !dbg !3679
  %cmp149 = icmp slt i32 %116, %118, !dbg !3680
  br i1 %cmp149, label %for.body151, label %for.end161, !dbg !3681

for.body151:                                      ; preds = %for.cond147
  %119 = load i32, i32* %i, align 4, !dbg !3682
  %idxprom152 = sext i32 %119 to i64, !dbg !3683
  %120 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3683
  %msb_sample_buffer153 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %120, i32 0, i32 11, !dbg !3684
  %arrayidx154 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer153, i64 0, i64 %idxprom152, !dbg !3683
  %121 = load i32*, i32** %arrayidx154, align 8, !dbg !3683
  %122 = load i32, i32* %i, align 4, !dbg !3685
  %idxprom155 = sext i32 %122 to i64, !dbg !3686
  %123 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3686
  %ch_remap = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %123, i32 0, i32 15, !dbg !3687
  %arrayidx156 = getelementptr inbounds [8 x i32], [8 x i32]* %ch_remap, i64 0, i64 %idxprom155, !dbg !3686
  %124 = load i32, i32* %arrayidx156, align 4, !dbg !3686
  %idxprom157 = sext i32 %124 to i64, !dbg !3688
  %125 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3688
  %output_samples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %125, i32 0, i32 28, !dbg !3689
  %arrayidx158 = getelementptr inbounds [32 x i32*], [32 x i32*]* %output_samples, i64 0, i64 %idxprom157, !dbg !3688
  store i32* %121, i32** %arrayidx158, align 8, !dbg !3690
  br label %for.inc159, !dbg !3688

for.inc159:                                       ; preds = %for.body151
  %126 = load i32, i32* %i, align 4, !dbg !3691
  %inc160 = add nsw i32 %126, 1, !dbg !3691
  store i32 %inc160, i32* %i, align 4, !dbg !3691
  br label %for.cond147, !dbg !3693, !llvm.loop !3694

for.end161:                                       ; preds = %for.cond147
  br label %if.end162, !dbg !3696

if.end162:                                        ; preds = %for.end161, %if.end143
  ret void, !dbg !3698
}

; Function Attrs: nounwind uwtable
define internal i32 @combine_residual_frame(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %c) #0 !dbg !3699 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  %dca = alloca %struct.DCAContext*, align 8
  %ch = alloca i32, align 4
  %nsamples = alloca i32, align 4
  %o = alloca %struct.DCAXllChSet*, align 8
  %n = alloca i32, align 4
  %spkr = alloca i32, align 4
  %shift = alloca i32, align 4
  %round = alloca i32, align 4
  %src = alloca i32*, align 8
  %dst = alloca i32*, align 8
  %scale_inv = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !3702, metadata !2040), !dbg !3703
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !3704, metadata !2040), !dbg !3705
  call void @llvm.dbg.declare(metadata %struct.DCAContext** %dca, metadata !3706, metadata !2040), !dbg !3707
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3708
  %avctx = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %0, i32 0, i32 0, !dbg !3709
  %1 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 32, !dbg !3709
  %priv_data = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i32 0, i32 6, !dbg !3710
  %2 = load i8*, i8** %priv_data, align 8, !dbg !3710
  %3 = bitcast i8* %2 to %struct.DCAContext*, !dbg !3708
  store %struct.DCAContext* %3, %struct.DCAContext** %dca, align 8, !dbg !3707
  call void @llvm.dbg.declare(metadata i32* %ch, metadata !3711, metadata !2040), !dbg !3712
  call void @llvm.dbg.declare(metadata i32* %nsamples, metadata !3713, metadata !2040), !dbg !3714
  %4 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3715
  %nframesamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %4, i32 0, i32 8, !dbg !3716
  %5 = load i32, i32* %nframesamples, align 32, !dbg !3716
  store i32 %5, i32* %nsamples, align 4, !dbg !3714
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %o, metadata !3717, metadata !2040), !dbg !3718
  %6 = load %struct.DCAContext*, %struct.DCAContext** %dca, align 8, !dbg !3719
  %packet = getelementptr inbounds %struct.DCAContext, %struct.DCAContext* %6, i32 0, i32 12, !dbg !3721
  %7 = load i32, i32* %packet, align 4, !dbg !3721
  %and = and i32 %7, 1, !dbg !3722
  %tobool = icmp ne i32 %and, 0, !dbg !3722
  br i1 %tobool, label %if.end, label %if.then, !dbg !3723

if.then:                                          ; preds = %entry
  %8 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3724
  %avctx1 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %8, i32 0, i32 0, !dbg !3726
  %9 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx1, align 32, !dbg !3726
  %10 = bitcast %struct.AVCodecContext* %9 to i8*, !dbg !3724
  call void (i8*, i32, i8*, ...) @av_log(i8* %10, i32 16, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.40, i32 0, i32 0)), !dbg !3727
  store i32 -22, i32* %retval, align 4, !dbg !3728
  br label %return, !dbg !3728

if.end:                                           ; preds = %entry
  %11 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3729
  %freq = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %11, i32 0, i32 4, !dbg !3731
  %12 = load i32, i32* %freq, align 16, !dbg !3731
  %13 = load %struct.DCAContext*, %struct.DCAContext** %dca, align 8, !dbg !3732
  %core = getelementptr inbounds %struct.DCAContext, %struct.DCAContext* %13, i32 0, i32 3, !dbg !3733
  %output_rate = getelementptr inbounds %struct.DCACoreDecoder, %struct.DCACoreDecoder* %core, i32 0, i32 85, !dbg !3734
  %14 = load i32, i32* %output_rate, align 8, !dbg !3734
  %cmp = icmp ne i32 %12, %14, !dbg !3735
  br i1 %cmp, label %if.then2, label %if.end7, !dbg !3736

if.then2:                                         ; preds = %if.end
  %15 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3737
  %avctx3 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %15, i32 0, i32 0, !dbg !3739
  %16 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx3, align 32, !dbg !3739
  %17 = bitcast %struct.AVCodecContext* %16 to i8*, !dbg !3737
  %18 = load %struct.DCAContext*, %struct.DCAContext** %dca, align 8, !dbg !3740
  %core4 = getelementptr inbounds %struct.DCAContext, %struct.DCAContext* %18, i32 0, i32 3, !dbg !3741
  %output_rate5 = getelementptr inbounds %struct.DCACoreDecoder, %struct.DCACoreDecoder* %core4, i32 0, i32 85, !dbg !3742
  %19 = load i32, i32* %output_rate5, align 8, !dbg !3742
  %20 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3743
  %freq6 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %20, i32 0, i32 4, !dbg !3744
  %21 = load i32, i32* %freq6, align 16, !dbg !3744
  call void (i8*, i32, i8*, ...) @av_log(i8* %17, i32 24, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.41, i32 0, i32 0), i32 %19, i32 %21), !dbg !3745
  store i32 -1094995529, i32* %retval, align 4, !dbg !3746
  br label %return, !dbg !3746

if.end7:                                          ; preds = %if.end
  %22 = load i32, i32* %nsamples, align 4, !dbg !3747
  %23 = load %struct.DCAContext*, %struct.DCAContext** %dca, align 8, !dbg !3749
  %core8 = getelementptr inbounds %struct.DCAContext, %struct.DCAContext* %23, i32 0, i32 3, !dbg !3750
  %npcmsamples = getelementptr inbounds %struct.DCACoreDecoder, %struct.DCACoreDecoder* %core8, i32 0, i32 84, !dbg !3751
  %24 = load i32, i32* %npcmsamples, align 4, !dbg !3751
  %cmp9 = icmp ne i32 %22, %24, !dbg !3752
  br i1 %cmp9, label %if.then10, label %if.end14, !dbg !3753

if.then10:                                        ; preds = %if.end7
  %25 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3754
  %avctx11 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %25, i32 0, i32 0, !dbg !3756
  %26 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx11, align 32, !dbg !3756
  %27 = bitcast %struct.AVCodecContext* %26 to i8*, !dbg !3754
  %28 = load %struct.DCAContext*, %struct.DCAContext** %dca, align 8, !dbg !3757
  %core12 = getelementptr inbounds %struct.DCAContext, %struct.DCAContext* %28, i32 0, i32 3, !dbg !3758
  %npcmsamples13 = getelementptr inbounds %struct.DCACoreDecoder, %struct.DCACoreDecoder* %core12, i32 0, i32 84, !dbg !3759
  %29 = load i32, i32* %npcmsamples13, align 4, !dbg !3759
  %30 = load i32, i32* %nsamples, align 4, !dbg !3760
  call void (i8*, i32, i8*, ...) @av_log(i8* %27, i32 24, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.42, i32 0, i32 0), i32 %29, i32 %30), !dbg !3761
  store i32 -1094995529, i32* %retval, align 4, !dbg !3762
  br label %return, !dbg !3762

if.end14:                                         ; preds = %if.end7
  %31 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3763
  %32 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3764
  %call = call %struct.DCAXllChSet* @find_next_hier_dmix_chset(%struct.DCAXllDecoder* %31, %struct.DCAXllChSet* %32), !dbg !3765
  store %struct.DCAXllChSet* %call, %struct.DCAXllChSet** %o, align 8, !dbg !3766
  store i32 0, i32* %ch, align 4, !dbg !3767
  br label %for.cond, !dbg !3769

for.cond:                                         ; preds = %for.inc73, %if.end14
  %33 = load i32, i32* %ch, align 4, !dbg !3770
  %34 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3773
  %nchannels = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %34, i32 0, i32 0, !dbg !3774
  %35 = load i32, i32* %nchannels, align 32, !dbg !3774
  %cmp15 = icmp slt i32 %33, %35, !dbg !3775
  br i1 %cmp15, label %for.body, label %for.end75, !dbg !3776

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3777, metadata !2040), !dbg !3779
  call void @llvm.dbg.declare(metadata i32* %spkr, metadata !3780, metadata !2040), !dbg !3781
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !3782, metadata !2040), !dbg !3783
  call void @llvm.dbg.declare(metadata i32* %round, metadata !3784, metadata !2040), !dbg !3785
  call void @llvm.dbg.declare(metadata i32** %src, metadata !3786, metadata !2040), !dbg !3787
  call void @llvm.dbg.declare(metadata i32** %dst, metadata !3788, metadata !2040), !dbg !3789
  %36 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3790
  %residual_encode = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %36, i32 0, i32 1, !dbg !3792
  %37 = load i32, i32* %residual_encode, align 4, !dbg !3792
  %38 = load i32, i32* %ch, align 4, !dbg !3793
  %shl = shl i32 1, %38, !dbg !3794
  %and16 = and i32 %37, %shl, !dbg !3795
  %tobool17 = icmp ne i32 %and16, 0, !dbg !3795
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !3796

if.then18:                                        ; preds = %for.body
  br label %for.inc73, !dbg !3797

if.end19:                                         ; preds = %for.body
  %39 = load %struct.DCAContext*, %struct.DCAContext** %dca, align 8, !dbg !3798
  %core20 = getelementptr inbounds %struct.DCAContext, %struct.DCAContext* %39, i32 0, i32 3, !dbg !3799
  %40 = load i32, i32* %ch, align 4, !dbg !3800
  %idxprom = sext i32 %40 to i64, !dbg !3801
  %41 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3801
  %ch_remap = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %41, i32 0, i32 15, !dbg !3802
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* %ch_remap, i64 0, i64 %idxprom, !dbg !3801
  %42 = load i32, i32* %arrayidx, align 4, !dbg !3801
  %call21 = call i32 @ff_dca_core_map_spkr(%struct.DCACoreDecoder* %core20, i32 %42), !dbg !3803
  store i32 %call21, i32* %spkr, align 4, !dbg !3804
  %43 = load i32, i32* %spkr, align 4, !dbg !3805
  %cmp22 = icmp slt i32 %43, 0, !dbg !3807
  br i1 %cmp22, label %if.then23, label %if.end28, !dbg !3808

if.then23:                                        ; preds = %if.end19
  %44 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3809
  %avctx24 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %44, i32 0, i32 0, !dbg !3811
  %45 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx24, align 32, !dbg !3811
  %46 = bitcast %struct.AVCodecContext* %45 to i8*, !dbg !3809
  %47 = load i32, i32* %ch, align 4, !dbg !3812
  %idxprom25 = sext i32 %47 to i64, !dbg !3813
  %48 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3813
  %ch_remap26 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %48, i32 0, i32 15, !dbg !3814
  %arrayidx27 = getelementptr inbounds [8 x i32], [8 x i32]* %ch_remap26, i64 0, i64 %idxprom25, !dbg !3813
  %49 = load i32, i32* %arrayidx27, align 4, !dbg !3813
  call void (i8*, i32, i8*, ...) @av_log(i8* %46, i32 24, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.43, i32 0, i32 0), i32 %49), !dbg !3815
  store i32 -1094995529, i32* %retval, align 4, !dbg !3816
  br label %return, !dbg !3816

if.end28:                                         ; preds = %if.end19
  %50 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3817
  %pcm_bit_res = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %50, i32 0, i32 2, !dbg !3818
  %51 = load i32, i32* %pcm_bit_res, align 8, !dbg !3818
  %sub = sub nsw i32 24, %51, !dbg !3819
  %52 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3820
  %53 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3821
  %54 = load i32, i32* %ch, align 4, !dbg !3822
  %call29 = call i32 @chs_get_lsb_width(%struct.DCAXllDecoder* %52, %struct.DCAXllChSet* %53, i32 0, i32 %54), !dbg !3823
  %add = add nsw i32 %sub, %call29, !dbg !3824
  store i32 %add, i32* %shift, align 4, !dbg !3825
  %55 = load i32, i32* %shift, align 4, !dbg !3826
  %cmp30 = icmp sgt i32 %55, 24, !dbg !3828
  br i1 %cmp30, label %if.then31, label %if.end33, !dbg !3829

if.then31:                                        ; preds = %if.end28
  %56 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3830
  %avctx32 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %56, i32 0, i32 0, !dbg !3832
  %57 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx32, align 32, !dbg !3832
  %58 = bitcast %struct.AVCodecContext* %57 to i8*, !dbg !3830
  %59 = load i32, i32* %shift, align 4, !dbg !3833
  call void (i8*, i32, i8*, ...) @av_log(i8* %58, i32 24, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.44, i32 0, i32 0), i32 %59), !dbg !3834
  store i32 -1094995529, i32* %retval, align 4, !dbg !3835
  br label %return, !dbg !3835

if.end33:                                         ; preds = %if.end28
  %60 = load i32, i32* %shift, align 4, !dbg !3836
  %cmp34 = icmp sgt i32 %60, 0, !dbg !3837
  br i1 %cmp34, label %cond.true, label %cond.false, !dbg !3836

cond.true:                                        ; preds = %if.end33
  %61 = load i32, i32* %shift, align 4, !dbg !3838
  %sub35 = sub nsw i32 %61, 1, !dbg !3840
  %shl36 = shl i32 1, %sub35, !dbg !3841
  br label %cond.end, !dbg !3842

cond.false:                                       ; preds = %if.end33
  br label %cond.end, !dbg !3843

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %shl36, %cond.true ], [ 0, %cond.false ], !dbg !3845
  store i32 %cond, i32* %round, align 4, !dbg !3847
  %62 = load i32, i32* %spkr, align 4, !dbg !3848
  %idxprom37 = sext i32 %62 to i64, !dbg !3849
  %63 = load %struct.DCAContext*, %struct.DCAContext** %dca, align 8, !dbg !3849
  %core38 = getelementptr inbounds %struct.DCAContext, %struct.DCAContext* %63, i32 0, i32 3, !dbg !3850
  %output_samples = getelementptr inbounds %struct.DCACoreDecoder, %struct.DCACoreDecoder* %core38, i32 0, i32 79, !dbg !3851
  %arrayidx39 = getelementptr inbounds [32 x i32*], [32 x i32*]* %output_samples, i64 0, i64 %idxprom37, !dbg !3849
  %64 = load i32*, i32** %arrayidx39, align 8, !dbg !3849
  store i32* %64, i32** %src, align 8, !dbg !3852
  %65 = load i32, i32* %ch, align 4, !dbg !3853
  %idxprom40 = sext i32 %65 to i64, !dbg !3854
  %66 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3854
  %bands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %66, i32 0, i32 18, !dbg !3855
  %arrayidx41 = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands, i64 0, i64 0, !dbg !3854
  %msb_sample_buffer = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx41, i32 0, i32 11, !dbg !3856
  %arrayidx42 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer, i64 0, i64 %idxprom40, !dbg !3854
  %67 = load i32*, i32** %arrayidx42, align 8, !dbg !3854
  store i32* %67, i32** %dst, align 8, !dbg !3857
  %68 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %o, align 8, !dbg !3858
  %tobool43 = icmp ne %struct.DCAXllChSet* %68, null, !dbg !3858
  br i1 %tobool43, label %if.then44, label %if.else, !dbg !3860

if.then44:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %scale_inv, metadata !3861, metadata !2040), !dbg !3863
  %69 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3864
  %hier_ofs = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %69, i32 0, i32 10, !dbg !3865
  %70 = load i32, i32* %hier_ofs, align 8, !dbg !3865
  %71 = load i32, i32* %ch, align 4, !dbg !3866
  %add45 = add nsw i32 %70, %71, !dbg !3867
  %idxprom46 = sext i32 %add45 to i64, !dbg !3868
  %72 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %o, align 8, !dbg !3868
  %dmix_scale_inv = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %72, i32 0, i32 13, !dbg !3869
  %arrayidx47 = getelementptr inbounds [16 x i32], [16 x i32]* %dmix_scale_inv, i64 0, i64 %idxprom46, !dbg !3868
  %73 = load i32, i32* %arrayidx47, align 4, !dbg !3868
  store i32 %73, i32* %scale_inv, align 4, !dbg !3863
  store i32 0, i32* %n, align 4, !dbg !3870
  br label %for.cond48, !dbg !3872

for.cond48:                                       ; preds = %for.inc, %if.then44
  %74 = load i32, i32* %n, align 4, !dbg !3873
  %75 = load i32, i32* %nsamples, align 4, !dbg !3876
  %cmp49 = icmp slt i32 %74, %75, !dbg !3877
  br i1 %cmp49, label %for.body50, label %for.end, !dbg !3878

for.body50:                                       ; preds = %for.cond48
  %76 = load i32, i32* %n, align 4, !dbg !3879
  %idxprom51 = sext i32 %76 to i64, !dbg !3880
  %77 = load i32*, i32** %src, align 8, !dbg !3880
  %arrayidx52 = getelementptr inbounds i32, i32* %77, i64 %idxprom51, !dbg !3880
  %78 = load i32, i32* %arrayidx52, align 4, !dbg !3880
  %79 = load i32, i32* %scale_inv, align 4, !dbg !3881
  %call53 = call i32 @mul16(i32 %78, i32 %79), !dbg !3882
  %80 = load i32, i32* %round, align 4, !dbg !3883
  %add54 = add nsw i32 %call53, %80, !dbg !3884
  %81 = load i32, i32* %shift, align 4, !dbg !3885
  %shr = ashr i32 %add54, %81, !dbg !3886
  %call55 = call i32 @clip23(i32 %shr), !dbg !3887
  %82 = load i32, i32* %n, align 4, !dbg !3888
  %idxprom56 = sext i32 %82 to i64, !dbg !3889
  %83 = load i32*, i32** %dst, align 8, !dbg !3889
  %arrayidx57 = getelementptr inbounds i32, i32* %83, i64 %idxprom56, !dbg !3889
  %84 = load i32, i32* %arrayidx57, align 4, !dbg !3890
  %add58 = add i32 %84, %call55, !dbg !3890
  store i32 %add58, i32* %arrayidx57, align 4, !dbg !3890
  br label %for.inc, !dbg !3889

for.inc:                                          ; preds = %for.body50
  %85 = load i32, i32* %n, align 4, !dbg !3891
  %inc = add nsw i32 %85, 1, !dbg !3891
  store i32 %inc, i32* %n, align 4, !dbg !3891
  br label %for.cond48, !dbg !3893, !llvm.loop !3894

for.end:                                          ; preds = %for.cond48
  br label %if.end72, !dbg !3896

if.else:                                          ; preds = %cond.end
  store i32 0, i32* %n, align 4, !dbg !3897
  br label %for.cond59, !dbg !3900

for.cond59:                                       ; preds = %for.inc69, %if.else
  %86 = load i32, i32* %n, align 4, !dbg !3901
  %87 = load i32, i32* %nsamples, align 4, !dbg !3904
  %cmp60 = icmp slt i32 %86, %87, !dbg !3905
  br i1 %cmp60, label %for.body61, label %for.end71, !dbg !3906

for.body61:                                       ; preds = %for.cond59
  %88 = load i32, i32* %n, align 4, !dbg !3907
  %idxprom62 = sext i32 %88 to i64, !dbg !3908
  %89 = load i32*, i32** %src, align 8, !dbg !3908
  %arrayidx63 = getelementptr inbounds i32, i32* %89, i64 %idxprom62, !dbg !3908
  %90 = load i32, i32* %arrayidx63, align 4, !dbg !3908
  %91 = load i32, i32* %round, align 4, !dbg !3909
  %add64 = add nsw i32 %90, %91, !dbg !3910
  %92 = load i32, i32* %shift, align 4, !dbg !3911
  %shr65 = ashr i32 %add64, %92, !dbg !3912
  %93 = load i32, i32* %n, align 4, !dbg !3913
  %idxprom66 = sext i32 %93 to i64, !dbg !3914
  %94 = load i32*, i32** %dst, align 8, !dbg !3914
  %arrayidx67 = getelementptr inbounds i32, i32* %94, i64 %idxprom66, !dbg !3914
  %95 = load i32, i32* %arrayidx67, align 4, !dbg !3915
  %add68 = add i32 %95, %shr65, !dbg !3915
  store i32 %add68, i32* %arrayidx67, align 4, !dbg !3915
  br label %for.inc69, !dbg !3914

for.inc69:                                        ; preds = %for.body61
  %96 = load i32, i32* %n, align 4, !dbg !3916
  %inc70 = add nsw i32 %96, 1, !dbg !3916
  store i32 %inc70, i32* %n, align 4, !dbg !3916
  br label %for.cond59, !dbg !3918, !llvm.loop !3919

for.end71:                                        ; preds = %for.cond59
  br label %if.end72

if.end72:                                         ; preds = %for.end71, %for.end
  br label %for.inc73, !dbg !3921

for.inc73:                                        ; preds = %if.end72, %if.then18
  %97 = load i32, i32* %ch, align 4, !dbg !3922
  %inc74 = add nsw i32 %97, 1, !dbg !3922
  store i32 %inc74, i32* %ch, align 4, !dbg !3922
  br label %for.cond, !dbg !3924, !llvm.loop !3925

for.end75:                                        ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !3927
  br label %return, !dbg !3927

return:                                           ; preds = %for.end75, %if.then31, %if.then23, %if.then10, %if.then2, %if.then
  %98 = load i32, i32* %retval, align 4, !dbg !3928
  ret i32 %98, !dbg !3928
}

; Function Attrs: nounwind uwtable
define internal void @chs_assemble_msbs_lsbs(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %c, i32 %band) #0 !dbg !3929 {
entry:
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  %band.addr = alloca i32, align 4
  %b = alloca %struct.DCAXllBand*, align 8
  %n = alloca i32, align 4
  %ch = alloca i32, align 4
  %nsamples = alloca i32, align 4
  %shift = alloca i32, align 4
  %msb = alloca i32*, align 8
  %lsb = alloca i32*, align 8
  %adj = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !3930, metadata !2040), !dbg !3931
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !3932, metadata !2040), !dbg !3933
  store i32 %band, i32* %band.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %band.addr, metadata !3934, metadata !2040), !dbg !3935
  call void @llvm.dbg.declare(metadata %struct.DCAXllBand** %b, metadata !3936, metadata !2040), !dbg !3937
  %0 = load i32, i32* %band.addr, align 4, !dbg !3938
  %idxprom = sext i32 %0 to i64, !dbg !3939
  %1 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3939
  %bands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %1, i32 0, i32 18, !dbg !3940
  %arrayidx = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands, i64 0, i64 %idxprom, !dbg !3939
  store %struct.DCAXllBand* %arrayidx, %struct.DCAXllBand** %b, align 8, !dbg !3937
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3941, metadata !2040), !dbg !3942
  call void @llvm.dbg.declare(metadata i32* %ch, metadata !3943, metadata !2040), !dbg !3944
  call void @llvm.dbg.declare(metadata i32* %nsamples, metadata !3945, metadata !2040), !dbg !3946
  %2 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3947
  %nframesamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %2, i32 0, i32 8, !dbg !3948
  %3 = load i32, i32* %nframesamples, align 32, !dbg !3948
  store i32 %3, i32* %nsamples, align 4, !dbg !3946
  store i32 0, i32* %ch, align 4, !dbg !3949
  br label %for.cond, !dbg !3951

for.cond:                                         ; preds = %for.inc34, %entry
  %4 = load i32, i32* %ch, align 4, !dbg !3952
  %5 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3955
  %nchannels = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %5, i32 0, i32 0, !dbg !3956
  %6 = load i32, i32* %nchannels, align 32, !dbg !3956
  %cmp = icmp slt i32 %4, %6, !dbg !3957
  br i1 %cmp, label %for.body, label %for.end36, !dbg !3958

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !3959, metadata !2040), !dbg !3961
  %7 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !3962
  %8 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !3963
  %9 = load i32, i32* %band.addr, align 4, !dbg !3964
  %10 = load i32, i32* %ch, align 4, !dbg !3965
  %call = call i32 @chs_get_lsb_width(%struct.DCAXllDecoder* %7, %struct.DCAXllChSet* %8, i32 %9, i32 %10), !dbg !3966
  store i32 %call, i32* %shift, align 4, !dbg !3961
  %11 = load i32, i32* %shift, align 4, !dbg !3967
  %tobool = icmp ne i32 %11, 0, !dbg !3967
  br i1 %tobool, label %if.then, label %if.end33, !dbg !3969

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32** %msb, metadata !3970, metadata !2040), !dbg !3972
  %12 = load i32, i32* %ch, align 4, !dbg !3973
  %idxprom1 = sext i32 %12 to i64, !dbg !3974
  %13 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3974
  %msb_sample_buffer = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %13, i32 0, i32 11, !dbg !3975
  %arrayidx2 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer, i64 0, i64 %idxprom1, !dbg !3974
  %14 = load i32*, i32** %arrayidx2, align 8, !dbg !3974
  store i32* %14, i32** %msb, align 8, !dbg !3972
  %15 = load i32, i32* %ch, align 4, !dbg !3976
  %idxprom3 = sext i32 %15 to i64, !dbg !3978
  %16 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3978
  %nscalablelsbs = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %16, i32 0, i32 9, !dbg !3979
  %arrayidx4 = getelementptr inbounds [8 x i32], [8 x i32]* %nscalablelsbs, i64 0, i64 %idxprom3, !dbg !3978
  %17 = load i32, i32* %arrayidx4, align 4, !dbg !3978
  %tobool5 = icmp ne i32 %17, 0, !dbg !3978
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !3980

if.then6:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32** %lsb, metadata !3981, metadata !2040), !dbg !3983
  %18 = load i32, i32* %ch, align 4, !dbg !3984
  %idxprom7 = sext i32 %18 to i64, !dbg !3985
  %19 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3985
  %lsb_sample_buffer = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %19, i32 0, i32 12, !dbg !3986
  %arrayidx8 = getelementptr inbounds [8 x i32*], [8 x i32*]* %lsb_sample_buffer, i64 0, i64 %idxprom7, !dbg !3985
  %20 = load i32*, i32** %arrayidx8, align 8, !dbg !3985
  store i32* %20, i32** %lsb, align 8, !dbg !3983
  call void @llvm.dbg.declare(metadata i32* %adj, metadata !3987, metadata !2040), !dbg !3988
  %21 = load i32, i32* %ch, align 4, !dbg !3989
  %idxprom9 = sext i32 %21 to i64, !dbg !3990
  %22 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !3990
  %bit_width_adjust = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %22, i32 0, i32 10, !dbg !3991
  %arrayidx10 = getelementptr inbounds [8 x i32], [8 x i32]* %bit_width_adjust, i64 0, i64 %idxprom9, !dbg !3990
  %23 = load i32, i32* %arrayidx10, align 4, !dbg !3990
  store i32 %23, i32* %adj, align 4, !dbg !3988
  store i32 0, i32* %n, align 4, !dbg !3992
  br label %for.cond11, !dbg !3994

for.cond11:                                       ; preds = %for.inc, %if.then6
  %24 = load i32, i32* %n, align 4, !dbg !3995
  %25 = load i32, i32* %nsamples, align 4, !dbg !3998
  %cmp12 = icmp slt i32 %24, %25, !dbg !3999
  br i1 %cmp12, label %for.body13, label %for.end, !dbg !4000

for.body13:                                       ; preds = %for.cond11
  %26 = load i32, i32* %n, align 4, !dbg !4001
  %idxprom14 = sext i32 %26 to i64, !dbg !4002
  %27 = load i32*, i32** %msb, align 8, !dbg !4002
  %arrayidx15 = getelementptr inbounds i32, i32* %27, i64 %idxprom14, !dbg !4002
  %28 = load i32, i32* %arrayidx15, align 4, !dbg !4002
  %29 = load i32, i32* %shift, align 4, !dbg !4003
  %shl = shl i32 1, %29, !dbg !4004
  %mul = mul i32 %28, %shl, !dbg !4005
  %30 = load i32, i32* %n, align 4, !dbg !4006
  %idxprom16 = sext i32 %30 to i64, !dbg !4007
  %31 = load i32*, i32** %lsb, align 8, !dbg !4007
  %arrayidx17 = getelementptr inbounds i32, i32* %31, i64 %idxprom16, !dbg !4007
  %32 = load i32, i32* %arrayidx17, align 4, !dbg !4007
  %33 = load i32, i32* %adj, align 4, !dbg !4008
  %shl18 = shl i32 %32, %33, !dbg !4009
  %add = add i32 %mul, %shl18, !dbg !4010
  %34 = load i32, i32* %n, align 4, !dbg !4011
  %idxprom19 = sext i32 %34 to i64, !dbg !4012
  %35 = load i32*, i32** %msb, align 8, !dbg !4012
  %arrayidx20 = getelementptr inbounds i32, i32* %35, i64 %idxprom19, !dbg !4012
  store i32 %add, i32* %arrayidx20, align 4, !dbg !4013
  br label %for.inc, !dbg !4012

for.inc:                                          ; preds = %for.body13
  %36 = load i32, i32* %n, align 4, !dbg !4014
  %inc = add nsw i32 %36, 1, !dbg !4014
  store i32 %inc, i32* %n, align 4, !dbg !4014
  br label %for.cond11, !dbg !4016, !llvm.loop !4017

for.end:                                          ; preds = %for.cond11
  br label %if.end, !dbg !4019

if.else:                                          ; preds = %if.then
  store i32 0, i32* %n, align 4, !dbg !4020
  br label %for.cond21, !dbg !4023

for.cond21:                                       ; preds = %for.inc30, %if.else
  %37 = load i32, i32* %n, align 4, !dbg !4024
  %38 = load i32, i32* %nsamples, align 4, !dbg !4027
  %cmp22 = icmp slt i32 %37, %38, !dbg !4028
  br i1 %cmp22, label %for.body23, label %for.end32, !dbg !4029

for.body23:                                       ; preds = %for.cond21
  %39 = load i32, i32* %n, align 4, !dbg !4030
  %idxprom24 = sext i32 %39 to i64, !dbg !4031
  %40 = load i32*, i32** %msb, align 8, !dbg !4031
  %arrayidx25 = getelementptr inbounds i32, i32* %40, i64 %idxprom24, !dbg !4031
  %41 = load i32, i32* %arrayidx25, align 4, !dbg !4031
  %42 = load i32, i32* %shift, align 4, !dbg !4032
  %shl26 = shl i32 1, %42, !dbg !4033
  %mul27 = mul i32 %41, %shl26, !dbg !4034
  %43 = load i32, i32* %n, align 4, !dbg !4035
  %idxprom28 = sext i32 %43 to i64, !dbg !4036
  %44 = load i32*, i32** %msb, align 8, !dbg !4036
  %arrayidx29 = getelementptr inbounds i32, i32* %44, i64 %idxprom28, !dbg !4036
  store i32 %mul27, i32* %arrayidx29, align 4, !dbg !4037
  br label %for.inc30, !dbg !4036

for.inc30:                                        ; preds = %for.body23
  %45 = load i32, i32* %n, align 4, !dbg !4038
  %inc31 = add nsw i32 %45, 1, !dbg !4038
  store i32 %inc31, i32* %n, align 4, !dbg !4038
  br label %for.cond21, !dbg !4040, !llvm.loop !4041

for.end32:                                        ; preds = %for.cond21
  br label %if.end

if.end:                                           ; preds = %for.end32, %for.end
  br label %if.end33, !dbg !4043

if.end33:                                         ; preds = %if.end, %for.body
  br label %for.inc34, !dbg !4044

for.inc34:                                        ; preds = %if.end33
  %46 = load i32, i32* %ch, align 4, !dbg !4045
  %inc35 = add nsw i32 %46, 1, !dbg !4045
  store i32 %inc35, i32* %ch, align 4, !dbg !4045
  br label %for.cond, !dbg !4047, !llvm.loop !4048

for.end36:                                        ; preds = %for.cond
  ret void, !dbg !4050
}

; Function Attrs: nounwind uwtable
define internal i32 @is_hier_dmix_chset(%struct.DCAXllChSet* %c) #0 !dbg !4051 {
entry:
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !4054, metadata !2040), !dbg !4055
  %0 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !4056
  %primary_chset = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %0, i32 0, i32 5, !dbg !4057
  %1 = load i32, i32* %primary_chset, align 4, !dbg !4057
  %tobool = icmp ne i32 %1, 0, !dbg !4056
  br i1 %tobool, label %land.end, label %land.lhs.true, !dbg !4058

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !4059
  %dmix_embedded = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %2, i32 0, i32 7, !dbg !4061
  %3 = load i32, i32* %dmix_embedded, align 4, !dbg !4061
  %tobool1 = icmp ne i32 %3, 0, !dbg !4059
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !4062

land.rhs:                                         ; preds = %land.lhs.true
  %4 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !4063
  %hier_chset = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %4, i32 0, i32 9, !dbg !4065
  %5 = load i32, i32* %hier_chset, align 4, !dbg !4065
  %tobool2 = icmp ne i32 %5, 0, !dbg !4066
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %6 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool2, %land.rhs ]
  %land.ext = zext i1 %6 to i32, !dbg !4067
  ret i32 %land.ext, !dbg !4069
}

; Function Attrs: nounwind uwtable
define internal void @scale_down_mix(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %o, i32 %band) #0 !dbg !4070 {
entry:
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %o.addr = alloca %struct.DCAXllChSet*, align 8
  %band.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %nchannels = alloca i32, align 4
  %c = alloca %struct.DCAXllChSet*, align 8
  %scale = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !4071, metadata !2040), !dbg !4072
  store %struct.DCAXllChSet* %o, %struct.DCAXllChSet** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %o.addr, metadata !4073, metadata !2040), !dbg !4074
  store i32 %band, i32* %band.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %band.addr, metadata !4075, metadata !2040), !dbg !4076
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4077, metadata !2040), !dbg !4078
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4079, metadata !2040), !dbg !4080
  call void @llvm.dbg.declare(metadata i32* %nchannels, metadata !4081, metadata !2040), !dbg !4082
  store i32 0, i32* %nchannels, align 4, !dbg !4082
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c, metadata !4083, metadata !2040), !dbg !4084
  store i32 0, i32* %i, align 4, !dbg !4085
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4087
  %chset = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %0, i32 0, i32 15, !dbg !4088
  %arraydecay = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset, i32 0, i32 0, !dbg !4087
  store %struct.DCAXllChSet* %arraydecay, %struct.DCAXllChSet** %c, align 8, !dbg !4089
  br label %for.cond, !dbg !4090

for.cond:                                         ; preds = %for.inc26, %entry
  %1 = load i32, i32* %i, align 4, !dbg !4091
  %2 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4094
  %nactivechsets = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %2, i32 0, i32 21, !dbg !4095
  %3 = load i32, i32* %nactivechsets, align 8, !dbg !4095
  %cmp = icmp slt i32 %1, %3, !dbg !4096
  br i1 %cmp, label %for.body, label %for.end28, !dbg !4097

for.body:                                         ; preds = %for.cond
  %4 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4098
  %hier_chset = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %4, i32 0, i32 9, !dbg !4101
  %5 = load i32, i32* %hier_chset, align 4, !dbg !4101
  %tobool = icmp ne i32 %5, 0, !dbg !4098
  br i1 %tobool, label %if.end, label %if.then, !dbg !4102

if.then:                                          ; preds = %for.body
  br label %for.inc26, !dbg !4103

if.end:                                           ; preds = %for.body
  store i32 0, i32* %j, align 4, !dbg !4104
  br label %for.cond1, !dbg !4106

for.cond1:                                        ; preds = %for.inc, %if.end
  %6 = load i32, i32* %j, align 4, !dbg !4107
  %7 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4110
  %nchannels2 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %7, i32 0, i32 0, !dbg !4111
  %8 = load i32, i32* %nchannels2, align 32, !dbg !4111
  %cmp3 = icmp slt i32 %6, %8, !dbg !4112
  br i1 %cmp3, label %for.body4, label %for.end, !dbg !4113

for.body4:                                        ; preds = %for.cond1
  call void @llvm.dbg.declare(metadata i32* %scale, metadata !4114, metadata !2040), !dbg !4116
  %9 = load i32, i32* %nchannels, align 4, !dbg !4117
  %inc = add nsw i32 %9, 1, !dbg !4117
  store i32 %inc, i32* %nchannels, align 4, !dbg !4117
  %idxprom = sext i32 %9 to i64, !dbg !4118
  %10 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %o.addr, align 8, !dbg !4118
  %dmix_scale = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %10, i32 0, i32 12, !dbg !4119
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* %dmix_scale, i64 0, i64 %idxprom, !dbg !4118
  %11 = load i32, i32* %arrayidx, align 4, !dbg !4118
  store i32 %11, i32* %scale, align 4, !dbg !4116
  %12 = load i32, i32* %scale, align 4, !dbg !4120
  %cmp5 = icmp ne i32 %12, 32768, !dbg !4122
  br i1 %cmp5, label %if.then6, label %if.end20, !dbg !4123

if.then6:                                         ; preds = %for.body4
  %13 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4124
  %dcadsp = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %13, i32 0, i32 26, !dbg !4126
  %14 = load %struct.DCADSPContext*, %struct.DCADSPContext** %dcadsp, align 16, !dbg !4126
  %dmix_scale7 = getelementptr inbounds %struct.DCADSPContext, %struct.DCADSPContext* %14, i32 0, i32 12, !dbg !4127
  %15 = load void (i32*, i32, i64)*, void (i32*, i32, i64)** %dmix_scale7, align 8, !dbg !4127
  %16 = load i32, i32* %j, align 4, !dbg !4128
  %idxprom8 = sext i32 %16 to i64, !dbg !4129
  %17 = load i32, i32* %band.addr, align 4, !dbg !4130
  %idxprom9 = sext i32 %17 to i64, !dbg !4129
  %18 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4129
  %bands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %18, i32 0, i32 18, !dbg !4131
  %arrayidx10 = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands, i64 0, i64 %idxprom9, !dbg !4129
  %msb_sample_buffer = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx10, i32 0, i32 11, !dbg !4132
  %arrayidx11 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer, i64 0, i64 %idxprom8, !dbg !4129
  %19 = load i32*, i32** %arrayidx11, align 8, !dbg !4129
  %20 = load i32, i32* %scale, align 4, !dbg !4133
  %21 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4134
  %nframesamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %21, i32 0, i32 8, !dbg !4135
  %22 = load i32, i32* %nframesamples, align 32, !dbg !4135
  %conv = sext i32 %22 to i64, !dbg !4134
  call void %15(i32* %19, i32 %20, i64 %conv), !dbg !4124
  %23 = load i32, i32* %band.addr, align 4, !dbg !4136
  %tobool12 = icmp ne i32 %23, 0, !dbg !4136
  br i1 %tobool12, label %if.then13, label %if.end19, !dbg !4138

if.then13:                                        ; preds = %if.then6
  %24 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4139
  %dcadsp14 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %24, i32 0, i32 26, !dbg !4140
  %25 = load %struct.DCADSPContext*, %struct.DCADSPContext** %dcadsp14, align 16, !dbg !4140
  %dmix_scale15 = getelementptr inbounds %struct.DCADSPContext, %struct.DCADSPContext* %25, i32 0, i32 12, !dbg !4141
  %26 = load void (i32*, i32, i64)*, void (i32*, i32, i64)** %dmix_scale15, align 8, !dbg !4141
  %27 = load i32, i32* %j, align 4, !dbg !4142
  %idxprom16 = sext i32 %27 to i64, !dbg !4143
  %28 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4143
  %deci_history = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %28, i32 0, i32 26, !dbg !4144
  %arrayidx17 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %deci_history, i64 0, i64 %idxprom16, !dbg !4143
  %arraydecay18 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx17, i32 0, i32 0, !dbg !4143
  %29 = load i32, i32* %scale, align 4, !dbg !4145
  call void %26(i32* %arraydecay18, i32 %29, i64 8), !dbg !4139
  br label %if.end19, !dbg !4139

if.end19:                                         ; preds = %if.then13, %if.then6
  br label %if.end20, !dbg !4146

if.end20:                                         ; preds = %if.end19, %for.body4
  br label %for.inc, !dbg !4147

for.inc:                                          ; preds = %if.end20
  %30 = load i32, i32* %j, align 4, !dbg !4148
  %inc21 = add nsw i32 %30, 1, !dbg !4148
  store i32 %inc21, i32* %j, align 4, !dbg !4148
  br label %for.cond1, !dbg !4150, !llvm.loop !4151

for.end:                                          ; preds = %for.cond1
  %31 = load i32, i32* %nchannels, align 4, !dbg !4153
  %32 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %o.addr, align 8, !dbg !4155
  %hier_ofs = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %32, i32 0, i32 10, !dbg !4156
  %33 = load i32, i32* %hier_ofs, align 8, !dbg !4156
  %cmp22 = icmp sge i32 %31, %33, !dbg !4157
  br i1 %cmp22, label %if.then24, label %if.end25, !dbg !4158

if.then24:                                        ; preds = %for.end
  br label %for.end28, !dbg !4159

if.end25:                                         ; preds = %for.end
  br label %for.inc26, !dbg !4160

for.inc26:                                        ; preds = %if.end25, %if.then
  %34 = load i32, i32* %i, align 4, !dbg !4161
  %inc27 = add nsw i32 %34, 1, !dbg !4161
  store i32 %inc27, i32* %i, align 4, !dbg !4161
  %35 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4163
  %incdec.ptr = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %35, i32 1, !dbg !4163
  store %struct.DCAXllChSet* %incdec.ptr, %struct.DCAXllChSet** %c, align 8, !dbg !4163
  br label %for.cond, !dbg !4164, !llvm.loop !4165

for.end28:                                        ; preds = %if.then24, %for.cond
  ret void, !dbg !4167
}

; Function Attrs: nounwind uwtable
define internal void @undo_down_mix(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %o, i32 %band) #0 !dbg !4168 {
entry:
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %o.addr = alloca %struct.DCAXllChSet*, align 8
  %band.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %nchannels = alloca i32, align 4
  %coeff_ptr = alloca i32*, align 8
  %c = alloca %struct.DCAXllChSet*, align 8
  %coeff = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !4169, metadata !2040), !dbg !4170
  store %struct.DCAXllChSet* %o, %struct.DCAXllChSet** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %o.addr, metadata !4171, metadata !2040), !dbg !4172
  store i32 %band, i32* %band.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %band.addr, metadata !4173, metadata !2040), !dbg !4174
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4175, metadata !2040), !dbg !4176
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4177, metadata !2040), !dbg !4178
  call void @llvm.dbg.declare(metadata i32* %k, metadata !4179, metadata !2040), !dbg !4180
  call void @llvm.dbg.declare(metadata i32* %nchannels, metadata !4181, metadata !2040), !dbg !4182
  store i32 0, i32* %nchannels, align 4, !dbg !4182
  call void @llvm.dbg.declare(metadata i32** %coeff_ptr, metadata !4183, metadata !2040), !dbg !4184
  %0 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %o.addr, align 8, !dbg !4185
  %dmix_coeff = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %0, i32 0, i32 11, !dbg !4186
  %arraydecay = getelementptr inbounds [128 x i32], [128 x i32]* %dmix_coeff, i32 0, i32 0, !dbg !4185
  store i32* %arraydecay, i32** %coeff_ptr, align 8, !dbg !4184
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c, metadata !4187, metadata !2040), !dbg !4188
  store i32 0, i32* %i, align 4, !dbg !4189
  %1 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4191
  %chset = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %1, i32 0, i32 15, !dbg !4192
  %arraydecay1 = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset, i32 0, i32 0, !dbg !4191
  store %struct.DCAXllChSet* %arraydecay1, %struct.DCAXllChSet** %c, align 8, !dbg !4193
  br label %for.cond, !dbg !4194

for.cond:                                         ; preds = %for.inc41, %entry
  %2 = load i32, i32* %i, align 4, !dbg !4195
  %3 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4198
  %nactivechsets = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %3, i32 0, i32 21, !dbg !4199
  %4 = load i32, i32* %nactivechsets, align 8, !dbg !4199
  %cmp = icmp slt i32 %2, %4, !dbg !4200
  br i1 %cmp, label %for.body, label %for.end44, !dbg !4201

for.body:                                         ; preds = %for.cond
  %5 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4202
  %hier_chset = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %5, i32 0, i32 9, !dbg !4205
  %6 = load i32, i32* %hier_chset, align 4, !dbg !4205
  %tobool = icmp ne i32 %6, 0, !dbg !4202
  br i1 %tobool, label %if.end, label %if.then, !dbg !4206

if.then:                                          ; preds = %for.body
  br label %for.inc41, !dbg !4207

if.end:                                           ; preds = %for.body
  store i32 0, i32* %j, align 4, !dbg !4208
  br label %for.cond2, !dbg !4210

for.cond2:                                        ; preds = %for.inc33, %if.end
  %7 = load i32, i32* %j, align 4, !dbg !4211
  %8 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4214
  %nchannels3 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %8, i32 0, i32 0, !dbg !4215
  %9 = load i32, i32* %nchannels3, align 32, !dbg !4215
  %cmp4 = icmp slt i32 %7, %9, !dbg !4216
  br i1 %cmp4, label %for.body5, label %for.end35, !dbg !4217

for.body5:                                        ; preds = %for.cond2
  store i32 0, i32* %k, align 4, !dbg !4218
  br label %for.cond6, !dbg !4221

for.cond6:                                        ; preds = %for.inc, %for.body5
  %10 = load i32, i32* %k, align 4, !dbg !4222
  %11 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %o.addr, align 8, !dbg !4225
  %nchannels7 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %11, i32 0, i32 0, !dbg !4226
  %12 = load i32, i32* %nchannels7, align 32, !dbg !4226
  %cmp8 = icmp slt i32 %10, %12, !dbg !4227
  br i1 %cmp8, label %for.body9, label %for.end, !dbg !4228

for.body9:                                        ; preds = %for.cond6
  call void @llvm.dbg.declare(metadata i32* %coeff, metadata !4229, metadata !2040), !dbg !4231
  %13 = load i32*, i32** %coeff_ptr, align 8, !dbg !4232
  %incdec.ptr = getelementptr inbounds i32, i32* %13, i32 1, !dbg !4232
  store i32* %incdec.ptr, i32** %coeff_ptr, align 8, !dbg !4232
  %14 = load i32, i32* %13, align 4, !dbg !4233
  store i32 %14, i32* %coeff, align 4, !dbg !4231
  %15 = load i32, i32* %coeff, align 4, !dbg !4234
  %tobool10 = icmp ne i32 %15, 0, !dbg !4234
  br i1 %tobool10, label %if.then11, label %if.end32, !dbg !4236

if.then11:                                        ; preds = %for.body9
  %16 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4237
  %dcadsp = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %16, i32 0, i32 26, !dbg !4239
  %17 = load %struct.DCADSPContext*, %struct.DCADSPContext** %dcadsp, align 16, !dbg !4239
  %dmix_sub = getelementptr inbounds %struct.DCADSPContext, %struct.DCADSPContext* %17, i32 0, i32 10, !dbg !4240
  %18 = load void (i32*, i32*, i32, i64)*, void (i32*, i32*, i32, i64)** %dmix_sub, align 8, !dbg !4240
  %19 = load i32, i32* %j, align 4, !dbg !4241
  %idxprom = sext i32 %19 to i64, !dbg !4242
  %20 = load i32, i32* %band.addr, align 4, !dbg !4243
  %idxprom12 = sext i32 %20 to i64, !dbg !4242
  %21 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4242
  %bands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %21, i32 0, i32 18, !dbg !4244
  %arrayidx = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands, i64 0, i64 %idxprom12, !dbg !4242
  %msb_sample_buffer = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx, i32 0, i32 11, !dbg !4245
  %arrayidx13 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer, i64 0, i64 %idxprom, !dbg !4242
  %22 = load i32*, i32** %arrayidx13, align 8, !dbg !4242
  %23 = load i32, i32* %k, align 4, !dbg !4246
  %idxprom14 = sext i32 %23 to i64, !dbg !4247
  %24 = load i32, i32* %band.addr, align 4, !dbg !4248
  %idxprom15 = sext i32 %24 to i64, !dbg !4247
  %25 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %o.addr, align 8, !dbg !4247
  %bands16 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %25, i32 0, i32 18, !dbg !4249
  %arrayidx17 = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands16, i64 0, i64 %idxprom15, !dbg !4247
  %msb_sample_buffer18 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx17, i32 0, i32 11, !dbg !4250
  %arrayidx19 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer18, i64 0, i64 %idxprom14, !dbg !4247
  %26 = load i32*, i32** %arrayidx19, align 8, !dbg !4247
  %27 = load i32, i32* %coeff, align 4, !dbg !4251
  %28 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4252
  %nframesamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %28, i32 0, i32 8, !dbg !4253
  %29 = load i32, i32* %nframesamples, align 32, !dbg !4253
  %conv = sext i32 %29 to i64, !dbg !4252
  call void %18(i32* %22, i32* %26, i32 %27, i64 %conv), !dbg !4237
  %30 = load i32, i32* %band.addr, align 4, !dbg !4254
  %tobool20 = icmp ne i32 %30, 0, !dbg !4254
  br i1 %tobool20, label %if.then21, label %if.end31, !dbg !4256

if.then21:                                        ; preds = %if.then11
  %31 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4257
  %dcadsp22 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %31, i32 0, i32 26, !dbg !4258
  %32 = load %struct.DCADSPContext*, %struct.DCADSPContext** %dcadsp22, align 16, !dbg !4258
  %dmix_sub23 = getelementptr inbounds %struct.DCADSPContext, %struct.DCADSPContext* %32, i32 0, i32 10, !dbg !4259
  %33 = load void (i32*, i32*, i32, i64)*, void (i32*, i32*, i32, i64)** %dmix_sub23, align 8, !dbg !4259
  %34 = load i32, i32* %j, align 4, !dbg !4260
  %idxprom24 = sext i32 %34 to i64, !dbg !4261
  %35 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4261
  %deci_history = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %35, i32 0, i32 26, !dbg !4262
  %arrayidx25 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %deci_history, i64 0, i64 %idxprom24, !dbg !4261
  %arraydecay26 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx25, i32 0, i32 0, !dbg !4261
  %36 = load i32, i32* %k, align 4, !dbg !4263
  %idxprom27 = sext i32 %36 to i64, !dbg !4264
  %37 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %o.addr, align 8, !dbg !4264
  %deci_history28 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %37, i32 0, i32 26, !dbg !4265
  %arrayidx29 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %deci_history28, i64 0, i64 %idxprom27, !dbg !4264
  %arraydecay30 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx29, i32 0, i32 0, !dbg !4264
  %38 = load i32, i32* %coeff, align 4, !dbg !4266
  call void %33(i32* %arraydecay26, i32* %arraydecay30, i32 %38, i64 8), !dbg !4257
  br label %if.end31, !dbg !4257

if.end31:                                         ; preds = %if.then21, %if.then11
  br label %if.end32, !dbg !4267

if.end32:                                         ; preds = %if.end31, %for.body9
  br label %for.inc, !dbg !4268

for.inc:                                          ; preds = %if.end32
  %39 = load i32, i32* %k, align 4, !dbg !4269
  %inc = add nsw i32 %39, 1, !dbg !4269
  store i32 %inc, i32* %k, align 4, !dbg !4269
  br label %for.cond6, !dbg !4271, !llvm.loop !4272

for.end:                                          ; preds = %for.cond6
  br label %for.inc33, !dbg !4274

for.inc33:                                        ; preds = %for.end
  %40 = load i32, i32* %j, align 4, !dbg !4275
  %inc34 = add nsw i32 %40, 1, !dbg !4275
  store i32 %inc34, i32* %j, align 4, !dbg !4275
  br label %for.cond2, !dbg !4277, !llvm.loop !4278

for.end35:                                        ; preds = %for.cond2
  %41 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4280
  %nchannels36 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %41, i32 0, i32 0, !dbg !4281
  %42 = load i32, i32* %nchannels36, align 32, !dbg !4281
  %43 = load i32, i32* %nchannels, align 4, !dbg !4282
  %add = add nsw i32 %43, %42, !dbg !4282
  store i32 %add, i32* %nchannels, align 4, !dbg !4282
  %44 = load i32, i32* %nchannels, align 4, !dbg !4283
  %45 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %o.addr, align 8, !dbg !4285
  %hier_ofs = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %45, i32 0, i32 10, !dbg !4286
  %46 = load i32, i32* %hier_ofs, align 8, !dbg !4286
  %cmp37 = icmp sge i32 %44, %46, !dbg !4287
  br i1 %cmp37, label %if.then39, label %if.end40, !dbg !4288

if.then39:                                        ; preds = %for.end35
  br label %for.end44, !dbg !4289

if.end40:                                         ; preds = %for.end35
  br label %for.inc41, !dbg !4290

for.inc41:                                        ; preds = %if.end40, %if.then
  %47 = load i32, i32* %i, align 4, !dbg !4291
  %inc42 = add nsw i32 %47, 1, !dbg !4291
  store i32 %inc42, i32* %i, align 4, !dbg !4291
  %48 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4293
  %incdec.ptr43 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %48, i32 1, !dbg !4293
  store %struct.DCAXllChSet* %incdec.ptr43, %struct.DCAXllChSet** %c, align 8, !dbg !4293
  br label %for.cond, !dbg !4294, !llvm.loop !4295

for.end44:                                        ; preds = %if.then39, %for.cond
  ret void, !dbg !4297
}

; Function Attrs: nounwind uwtable
define internal i32 @chs_assemble_freq_bands(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %c) #0 !dbg !4298 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  %ch = alloca i32, align 4
  %nsamples = alloca i32, align 4
  %ptr = alloca i32*, align 8
  %band0 = alloca i32*, align 8
  %band1 = alloca i32*, align 8
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !4299, metadata !2040), !dbg !4300
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !4301, metadata !2040), !dbg !4302
  call void @llvm.dbg.declare(metadata i32* %ch, metadata !4303, metadata !2040), !dbg !4304
  call void @llvm.dbg.declare(metadata i32* %nsamples, metadata !4305, metadata !2040), !dbg !4306
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4307
  %nframesamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %0, i32 0, i32 8, !dbg !4308
  %1 = load i32, i32* %nframesamples, align 32, !dbg !4308
  store i32 %1, i32* %nsamples, align 4, !dbg !4306
  call void @llvm.dbg.declare(metadata i32** %ptr, metadata !4309, metadata !2040), !dbg !4310
  %2 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !4311
  %sample_buffer = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %2, i32 0, i32 28, !dbg !4312
  %arrayidx = getelementptr inbounds [3 x i32*], [3 x i32*]* %sample_buffer, i64 0, i64 2, !dbg !4311
  %3 = bitcast i32** %arrayidx to i8*, !dbg !4313
  %4 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !4314
  %sample_size = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %4, i32 0, i32 27, !dbg !4315
  %arrayidx1 = getelementptr inbounds [3 x i32], [3 x i32]* %sample_size, i64 0, i64 2, !dbg !4314
  %5 = load i32, i32* %nsamples, align 4, !dbg !4316
  %mul = mul nsw i32 2, %5, !dbg !4317
  %6 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !4318
  %nchannels = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %6, i32 0, i32 0, !dbg !4319
  %7 = load i32, i32* %nchannels, align 32, !dbg !4319
  %mul2 = mul nsw i32 %mul, %7, !dbg !4320
  %conv = sext i32 %mul2 to i64, !dbg !4321
  %mul3 = mul i64 %conv, 4, !dbg !4322
  call void @av_fast_malloc(i8* %3, i32* %arrayidx1, i64 %mul3), !dbg !4323
  %8 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !4324
  %sample_buffer4 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %8, i32 0, i32 28, !dbg !4326
  %arrayidx5 = getelementptr inbounds [3 x i32*], [3 x i32*]* %sample_buffer4, i64 0, i64 2, !dbg !4324
  %9 = load i32*, i32** %arrayidx5, align 16, !dbg !4324
  %tobool = icmp ne i32* %9, null, !dbg !4324
  br i1 %tobool, label %if.end, label %if.then, !dbg !4327

if.then:                                          ; preds = %entry
  store i32 -12, i32* %retval, align 4, !dbg !4328
  br label %return, !dbg !4328

if.end:                                           ; preds = %entry
  %10 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !4329
  %sample_buffer6 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %10, i32 0, i32 28, !dbg !4330
  %arrayidx7 = getelementptr inbounds [3 x i32*], [3 x i32*]* %sample_buffer6, i64 0, i64 2, !dbg !4329
  %11 = load i32*, i32** %arrayidx7, align 16, !dbg !4329
  store i32* %11, i32** %ptr, align 8, !dbg !4331
  store i32 0, i32* %ch, align 4, !dbg !4332
  br label %for.cond, !dbg !4334

for.cond:                                         ; preds = %for.inc, %if.end
  %12 = load i32, i32* %ch, align 4, !dbg !4335
  %13 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !4338
  %nchannels8 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %13, i32 0, i32 0, !dbg !4339
  %14 = load i32, i32* %nchannels8, align 32, !dbg !4339
  %cmp = icmp slt i32 %12, %14, !dbg !4340
  br i1 %cmp, label %for.body, label %for.end, !dbg !4341

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32** %band0, metadata !4342, metadata !2040), !dbg !4344
  %15 = load i32, i32* %ch, align 4, !dbg !4345
  %idxprom = sext i32 %15 to i64, !dbg !4346
  %16 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !4346
  %bands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %16, i32 0, i32 18, !dbg !4347
  %arrayidx10 = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands, i64 0, i64 0, !dbg !4346
  %msb_sample_buffer = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx10, i32 0, i32 11, !dbg !4348
  %arrayidx11 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer, i64 0, i64 %idxprom, !dbg !4346
  %17 = load i32*, i32** %arrayidx11, align 8, !dbg !4346
  store i32* %17, i32** %band0, align 8, !dbg !4344
  call void @llvm.dbg.declare(metadata i32** %band1, metadata !4349, metadata !2040), !dbg !4350
  %18 = load i32, i32* %ch, align 4, !dbg !4351
  %idxprom12 = sext i32 %18 to i64, !dbg !4352
  %19 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !4352
  %bands13 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %19, i32 0, i32 18, !dbg !4353
  %arrayidx14 = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands13, i64 0, i64 1, !dbg !4352
  %msb_sample_buffer15 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx14, i32 0, i32 11, !dbg !4354
  %arrayidx16 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer15, i64 0, i64 %idxprom12, !dbg !4352
  %20 = load i32*, i32** %arrayidx16, align 8, !dbg !4352
  store i32* %20, i32** %band1, align 8, !dbg !4350
  %21 = load i32*, i32** %band0, align 8, !dbg !4355
  %add.ptr = getelementptr inbounds i32, i32* %21, i64 -8, !dbg !4356
  %22 = bitcast i32* %add.ptr to i8*, !dbg !4357
  %23 = load i32, i32* %ch, align 4, !dbg !4358
  %idxprom17 = sext i32 %23 to i64, !dbg !4359
  %24 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !4359
  %deci_history = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %24, i32 0, i32 26, !dbg !4360
  %arrayidx18 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %deci_history, i64 0, i64 %idxprom17, !dbg !4359
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx18, i32 0, i32 0, !dbg !4357
  %25 = bitcast i32* %arraydecay to i8*, !dbg !4357
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %25, i64 32, i32 4, i1 false), !dbg !4357
  %26 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4361
  %dcadsp = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %26, i32 0, i32 26, !dbg !4362
  %27 = load %struct.DCADSPContext*, %struct.DCADSPContext** %dcadsp, align 16, !dbg !4362
  %assemble_freq_bands = getelementptr inbounds %struct.DCADSPContext, %struct.DCADSPContext* %27, i32 0, i32 14, !dbg !4363
  %28 = load void (i32*, i32*, i32*, i32*, i64)*, void (i32*, i32*, i32*, i32*, i64)** %assemble_freq_bands, align 8, !dbg !4363
  %29 = load i32*, i32** %ptr, align 8, !dbg !4364
  %30 = load i32*, i32** %band0, align 8, !dbg !4365
  %31 = load i32*, i32** %band1, align 8, !dbg !4366
  %32 = load i32, i32* %nsamples, align 4, !dbg !4367
  %conv19 = sext i32 %32 to i64, !dbg !4367
  call void %28(i32* %29, i32* %30, i32* %31, i32* getelementptr inbounds ([20 x i32], [20 x i32]* @ff_dca_xll_band_coeff, i32 0, i32 0), i64 %conv19), !dbg !4361
  %33 = load i32*, i32** %ptr, align 8, !dbg !4368
  %34 = load i32, i32* %ch, align 4, !dbg !4369
  %idxprom20 = sext i32 %34 to i64, !dbg !4370
  %35 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !4370
  %ch_remap = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %35, i32 0, i32 15, !dbg !4371
  %arrayidx21 = getelementptr inbounds [8 x i32], [8 x i32]* %ch_remap, i64 0, i64 %idxprom20, !dbg !4370
  %36 = load i32, i32* %arrayidx21, align 4, !dbg !4370
  %idxprom22 = sext i32 %36 to i64, !dbg !4372
  %37 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4372
  %output_samples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %37, i32 0, i32 28, !dbg !4373
  %arrayidx23 = getelementptr inbounds [32 x i32*], [32 x i32*]* %output_samples, i64 0, i64 %idxprom22, !dbg !4372
  store i32* %33, i32** %arrayidx23, align 8, !dbg !4374
  %38 = load i32, i32* %nsamples, align 4, !dbg !4375
  %mul24 = mul nsw i32 %38, 2, !dbg !4376
  %39 = load i32*, i32** %ptr, align 8, !dbg !4377
  %idx.ext = sext i32 %mul24 to i64, !dbg !4377
  %add.ptr25 = getelementptr inbounds i32, i32* %39, i64 %idx.ext, !dbg !4377
  store i32* %add.ptr25, i32** %ptr, align 8, !dbg !4377
  br label %for.inc, !dbg !4378

for.inc:                                          ; preds = %for.body
  %40 = load i32, i32* %ch, align 4, !dbg !4379
  %inc = add nsw i32 %40, 1, !dbg !4379
  store i32 %inc, i32* %ch, align 4, !dbg !4379
  br label %for.cond, !dbg !4381, !llvm.loop !4382

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !4384
  br label %return, !dbg !4384

return:                                           ; preds = %for.end, %if.then
  %41 = load i32, i32* %retval, align 4, !dbg !4385
  ret i32 %41, !dbg !4385
}

declare i32 @ff_dca_set_channel_layout(%struct.AVCodecContext*, i32*, i32) #3

declare i32 @ff_get_buffer(%struct.AVCodecContext*, %struct.AVFrame*, i32) #3

declare void @ff_dca_downmix_to_stereo_fixed(%struct.DCADSPContext*, i32**, i32*, i32, i32) #3

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @clip23(i32 %a) #4 !dbg !4386 {
entry:
  %retval.i = alloca i32, align 4
  %a.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i, metadata !4390, metadata !2040), !dbg !4394
  %p.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %p.addr.i, metadata !4396, metadata !2040), !dbg !4397
  %a.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !4398, metadata !2040), !dbg !4399
  %0 = load i32, i32* %a.addr, align 4, !dbg !4400
  store i32 %0, i32* %a.addr.i, align 4, !dbg !4401
  store i32 23, i32* %p.addr.i, align 4, !dbg !4401
  %1 = load i32, i32* %a.addr.i, align 4, !dbg !4402
  %2 = load i32, i32* %p.addr.i, align 4, !dbg !4404
  %shl.i = shl i32 1, %2, !dbg !4405
  %add.i = add i32 %1, %shl.i, !dbg !4406
  %3 = load i32, i32* %p.addr.i, align 4, !dbg !4407
  %shl1.i = shl i32 2, %3, !dbg !4408
  %sub.i = sub nsw i32 %shl1.i, 1, !dbg !4409
  %neg.i = xor i32 %sub.i, -1, !dbg !4410
  %and.i = and i32 %add.i, %neg.i, !dbg !4411
  %tobool.i = icmp ne i32 %and.i, 0, !dbg !4411
  br i1 %tobool.i, label %if.then.i, label %if.else.i, !dbg !4412

if.then.i:                                        ; preds = %entry
  %4 = load i32, i32* %a.addr.i, align 4, !dbg !4413
  %shr.i = ashr i32 %4, 31, !dbg !4414
  %5 = load i32, i32* %p.addr.i, align 4, !dbg !4415
  %shl2.i = shl i32 1, %5, !dbg !4416
  %sub3.i = sub nsw i32 %shl2.i, 1, !dbg !4417
  %xor.i = xor i32 %shr.i, %sub3.i, !dbg !4418
  store i32 %xor.i, i32* %retval.i, align 4, !dbg !4419
  br label %av_clip_intp2_c.exit, !dbg !4419

if.else.i:                                        ; preds = %entry
  %6 = load i32, i32* %a.addr.i, align 4, !dbg !4420
  store i32 %6, i32* %retval.i, align 4, !dbg !4421
  br label %av_clip_intp2_c.exit, !dbg !4421

av_clip_intp2_c.exit:                             ; preds = %if.then.i, %if.else.i
  %7 = load i32, i32* %retval.i, align 4, !dbg !4422
  ret i32 %7, !dbg !4423
}

declare i32 @ff_side_data_update_matrix_encoding(%struct.AVFrame*, i32) #3

; Function Attrs: cold nounwind optsize uwtable
define void @ff_dca_xll_flush(%struct.DCAXllDecoder* %s) #2 !dbg !4424 {
entry:
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !4425, metadata !2040), !dbg !4426
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4427
  call void @clear_pbr(%struct.DCAXllDecoder* %0), !dbg !4428
  ret void, !dbg !4429
}

; Function Attrs: cold nounwind optsize uwtable
define void @ff_dca_xll_close(%struct.DCAXllDecoder* %s) #2 !dbg !4430 {
entry:
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %c = alloca %struct.DCAXllChSet*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !4431, metadata !2040), !dbg !4432
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c, metadata !4433, metadata !2040), !dbg !4434
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4435, metadata !2040), !dbg !4436
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4437, metadata !2040), !dbg !4438
  store i32 0, i32* %i, align 4, !dbg !4439
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4441
  %chset = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %0, i32 0, i32 15, !dbg !4442
  %arraydecay = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset, i32 0, i32 0, !dbg !4441
  store %struct.DCAXllChSet* %arraydecay, %struct.DCAXllChSet** %c, align 8, !dbg !4443
  br label %for.cond, !dbg !4444

for.cond:                                         ; preds = %for.inc6, %entry
  %1 = load i32, i32* %i, align 4, !dbg !4445
  %cmp = icmp slt i32 %1, 3, !dbg !4448
  br i1 %cmp, label %for.body, label %for.end8, !dbg !4449

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !4450
  br label %for.cond1, !dbg !4453

for.cond1:                                        ; preds = %for.inc, %for.body
  %2 = load i32, i32* %j, align 4, !dbg !4454
  %cmp2 = icmp slt i32 %2, 3, !dbg !4457
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !4458

for.body3:                                        ; preds = %for.cond1
  %3 = load i32, i32* %j, align 4, !dbg !4459
  %idxprom = sext i32 %3 to i64, !dbg !4461
  %4 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4461
  %sample_buffer = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %4, i32 0, i32 28, !dbg !4462
  %arrayidx = getelementptr inbounds [3 x i32*], [3 x i32*]* %sample_buffer, i64 0, i64 %idxprom, !dbg !4461
  %5 = bitcast i32** %arrayidx to i8*, !dbg !4463
  call void @av_freep(i8* %5), !dbg !4464
  %6 = load i32, i32* %j, align 4, !dbg !4465
  %idxprom4 = sext i32 %6 to i64, !dbg !4466
  %7 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4466
  %sample_size = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %7, i32 0, i32 27, !dbg !4467
  %arrayidx5 = getelementptr inbounds [3 x i32], [3 x i32]* %sample_size, i64 0, i64 %idxprom4, !dbg !4466
  store i32 0, i32* %arrayidx5, align 4, !dbg !4468
  br label %for.inc, !dbg !4469

for.inc:                                          ; preds = %for.body3
  %8 = load i32, i32* %j, align 4, !dbg !4470
  %inc = add nsw i32 %8, 1, !dbg !4470
  store i32 %inc, i32* %j, align 4, !dbg !4470
  br label %for.cond1, !dbg !4472, !llvm.loop !4473

for.end:                                          ; preds = %for.cond1
  br label %for.inc6, !dbg !4475

for.inc6:                                         ; preds = %for.end
  %9 = load i32, i32* %i, align 4, !dbg !4476
  %inc7 = add nsw i32 %9, 1, !dbg !4476
  store i32 %inc7, i32* %i, align 4, !dbg !4476
  %10 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4478
  %incdec.ptr = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %10, i32 1, !dbg !4478
  store %struct.DCAXllChSet* %incdec.ptr, %struct.DCAXllChSet** %c, align 8, !dbg !4478
  br label %for.cond, !dbg !4479, !llvm.loop !4480

for.end8:                                         ; preds = %for.cond
  %11 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4482
  %navi = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %11, i32 0, i32 16, !dbg !4483
  %12 = bitcast i32** %navi to i8*, !dbg !4484
  call void @av_freep(i8* %12), !dbg !4485
  %13 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4486
  %navi_size = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %13, i32 0, i32 17, !dbg !4487
  store i32 0, i32* %navi_size, align 8, !dbg !4488
  %14 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4489
  %pbr_buffer = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %14, i32 0, i32 23, !dbg !4490
  %15 = bitcast i8** %pbr_buffer to i8*, !dbg !4491
  call void @av_freep(i8* %15), !dbg !4492
  %16 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4493
  call void @clear_pbr(%struct.DCAXllDecoder* %16), !dbg !4494
  ret void, !dbg !4495
}

declare void @av_freep(i8*) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #5

; Function Attrs: nounwind uwtable
define internal i32 @parse_frame(%struct.DCAXllDecoder* %s, i8* %data, i32 %size, %struct.DCAExssAsset* %asset) #0 !dbg !4496 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %asset.addr = alloca %struct.DCAExssAsset*, align 8
  %ret = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !4497, metadata !2040), !dbg !4498
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !4499, metadata !2040), !dbg !4500
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !4501, metadata !2040), !dbg !4502
  store %struct.DCAExssAsset* %asset, %struct.DCAExssAsset** %asset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAExssAsset** %asset.addr, metadata !4503, metadata !2040), !dbg !4504
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !4505, metadata !2040), !dbg !4506
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4507
  %gb = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %0, i32 0, i32 1, !dbg !4509
  %1 = load i8*, i8** %data.addr, align 8, !dbg !4510
  %2 = load i32, i32* %size.addr, align 4, !dbg !4511
  %call = call i32 @init_get_bits8(%struct.GetBitContext* %gb, i8* %1, i32 %2), !dbg !4512
  store i32 %call, i32* %ret, align 4, !dbg !4513
  %cmp = icmp slt i32 %call, 0, !dbg !4514
  br i1 %cmp, label %if.then, label %if.end, !dbg !4515

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %ret, align 4, !dbg !4516
  store i32 %3, i32* %retval, align 4, !dbg !4517
  br label %return, !dbg !4517

if.end:                                           ; preds = %entry
  %4 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4518
  %call1 = call i32 @parse_common_header(%struct.DCAXllDecoder* %4), !dbg !4520
  store i32 %call1, i32* %ret, align 4, !dbg !4521
  %cmp2 = icmp slt i32 %call1, 0, !dbg !4522
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !4523

if.then3:                                         ; preds = %if.end
  %5 = load i32, i32* %ret, align 4, !dbg !4524
  store i32 %5, i32* %retval, align 4, !dbg !4525
  br label %return, !dbg !4525

if.end4:                                          ; preds = %if.end
  %6 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4526
  %7 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !4528
  %call5 = call i32 @parse_sub_headers(%struct.DCAXllDecoder* %6, %struct.DCAExssAsset* %7), !dbg !4529
  store i32 %call5, i32* %ret, align 4, !dbg !4530
  %cmp6 = icmp slt i32 %call5, 0, !dbg !4531
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !4532

if.then7:                                         ; preds = %if.end4
  %8 = load i32, i32* %ret, align 4, !dbg !4533
  store i32 %8, i32* %retval, align 4, !dbg !4534
  br label %return, !dbg !4534

if.end8:                                          ; preds = %if.end4
  %9 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4535
  %call9 = call i32 @parse_navi_table(%struct.DCAXllDecoder* %9), !dbg !4537
  store i32 %call9, i32* %ret, align 4, !dbg !4538
  %cmp10 = icmp slt i32 %call9, 0, !dbg !4539
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !4540

if.then11:                                        ; preds = %if.end8
  %10 = load i32, i32* %ret, align 4, !dbg !4541
  store i32 %10, i32* %retval, align 4, !dbg !4542
  br label %return, !dbg !4542

if.end12:                                         ; preds = %if.end8
  %11 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4543
  %call13 = call i32 @parse_band_data(%struct.DCAXllDecoder* %11), !dbg !4545
  store i32 %call13, i32* %ret, align 4, !dbg !4546
  %cmp14 = icmp slt i32 %call13, 0, !dbg !4547
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !4548

if.then15:                                        ; preds = %if.end12
  %12 = load i32, i32* %ret, align 4, !dbg !4549
  store i32 %12, i32* %retval, align 4, !dbg !4550
  br label %return, !dbg !4550

if.end16:                                         ; preds = %if.end12
  %13 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4551
  %gb17 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %13, i32 0, i32 1, !dbg !4553
  %14 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4554
  %frame_size = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %14, i32 0, i32 2, !dbg !4555
  %15 = load i32, i32* %frame_size, align 8, !dbg !4555
  %mul = mul nsw i32 %15, 8, !dbg !4556
  %call18 = call i32 @ff_dca_seek_bits(%struct.GetBitContext* %gb17, i32 %mul), !dbg !4557
  %tobool = icmp ne i32 %call18, 0, !dbg !4557
  br i1 %tobool, label %if.then19, label %if.end20, !dbg !4558

if.then19:                                        ; preds = %if.end16
  %16 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4559
  %avctx = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %16, i32 0, i32 0, !dbg !4561
  %17 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 32, !dbg !4561
  %18 = bitcast %struct.AVCodecContext* %17 to i8*, !dbg !4559
  call void (i8*, i32, i8*, ...) @av_log(i8* %18, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i32 0, i32 0)), !dbg !4562
  store i32 -1094995529, i32* %retval, align 4, !dbg !4563
  br label %return, !dbg !4563

if.end20:                                         ; preds = %if.end16
  %19 = load i32, i32* %ret, align 4, !dbg !4564
  store i32 %19, i32* %retval, align 4, !dbg !4565
  br label %return, !dbg !4565

return:                                           ; preds = %if.end20, %if.then19, %if.then15, %if.then11, %if.then7, %if.then3, %if.then
  %20 = load i32, i32* %retval, align 4, !dbg !4566
  ret i32 %20, !dbg !4566
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #5

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @init_get_bits8(%struct.GetBitContext* %s, i8* %buffer, i32 %byte_size) #4 !dbg !4567 {
entry:
  %s.addr = alloca %struct.GetBitContext*, align 8
  %buffer.addr = alloca i8*, align 8
  %byte_size.addr = alloca i32, align 4
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !4571, metadata !2040), !dbg !4572
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !4573, metadata !2040), !dbg !4574
  store i32 %byte_size, i32* %byte_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %byte_size.addr, metadata !4575, metadata !2040), !dbg !4576
  %0 = load i32, i32* %byte_size.addr, align 4, !dbg !4577
  %cmp = icmp sgt i32 %0, 268435455, !dbg !4579
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4580

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %byte_size.addr, align 4, !dbg !4581
  %cmp1 = icmp slt i32 %1, 0, !dbg !4583
  br i1 %cmp1, label %if.then, label %if.end, !dbg !4584

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -1, i32* %byte_size.addr, align 4, !dbg !4585
  br label %if.end, !dbg !4586

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !4587
  %3 = load i8*, i8** %buffer.addr, align 8, !dbg !4588
  %4 = load i32, i32* %byte_size.addr, align 4, !dbg !4589
  %mul = mul nsw i32 %4, 8, !dbg !4590
  %call = call i32 @init_get_bits(%struct.GetBitContext* %2, i8* %3, i32 %mul), !dbg !4591
  ret i32 %call, !dbg !4592
}

; Function Attrs: nounwind uwtable
define internal i32 @parse_common_header(%struct.DCAXllDecoder* %s) #0 !dbg !4593 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %stream_ver = alloca i32, align 4
  %header_size = alloca i32, align 4
  %frame_size_nbits = alloca i32, align 4
  %nframesegs_log2 = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !4596, metadata !2040), !dbg !4597
  call void @llvm.dbg.declare(metadata i32* %stream_ver, metadata !4598, metadata !2040), !dbg !4599
  call void @llvm.dbg.declare(metadata i32* %header_size, metadata !4600, metadata !2040), !dbg !4601
  call void @llvm.dbg.declare(metadata i32* %frame_size_nbits, metadata !4602, metadata !2040), !dbg !4603
  call void @llvm.dbg.declare(metadata i32* %nframesegs_log2, metadata !4604, metadata !2040), !dbg !4605
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4606
  %gb = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %0, i32 0, i32 1, !dbg !4608
  %call = call i32 @get_bits_long(%struct.GetBitContext* %gb, i32 32), !dbg !4609
  %cmp = icmp ne i32 %call, 1101174087, !dbg !4610
  br i1 %cmp, label %if.then, label %if.end, !dbg !4611

if.then:                                          ; preds = %entry
  %1 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4612
  %avctx = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %1, i32 0, i32 0, !dbg !4614
  %2 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 32, !dbg !4614
  %3 = bitcast %struct.AVCodecContext* %2 to i8*, !dbg !4612
  call void (i8*, i32, i8*, ...) @av_log(i8* %3, i32 40, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0)), !dbg !4615
  store i32 -11, i32* %retval, align 4, !dbg !4616
  br label %return, !dbg !4616

if.end:                                           ; preds = %entry
  %4 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4617
  %gb1 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %4, i32 0, i32 1, !dbg !4618
  %call2 = call i32 @get_bits(%struct.GetBitContext* %gb1, i32 4), !dbg !4619
  %add = add i32 %call2, 1, !dbg !4620
  store i32 %add, i32* %stream_ver, align 4, !dbg !4621
  %5 = load i32, i32* %stream_ver, align 4, !dbg !4622
  %cmp3 = icmp sgt i32 %5, 1, !dbg !4624
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !4625

if.then4:                                         ; preds = %if.end
  %6 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4626
  %avctx5 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %6, i32 0, i32 0, !dbg !4628
  %7 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx5, align 32, !dbg !4628
  %8 = bitcast %struct.AVCodecContext* %7 to i8*, !dbg !4626
  %9 = load i32, i32* %stream_ver, align 4, !dbg !4629
  call void (i8*, i8*, ...) @avpriv_request_sample(i8* %8, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i32 0, i32 0), i32 %9), !dbg !4630
  store i32 -1163346256, i32* %retval, align 4, !dbg !4631
  br label %return, !dbg !4631

if.end6:                                          ; preds = %if.end
  %10 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4632
  %gb7 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %10, i32 0, i32 1, !dbg !4633
  %call8 = call i32 @get_bits(%struct.GetBitContext* %gb7, i32 8), !dbg !4634
  %add9 = add i32 %call8, 1, !dbg !4635
  store i32 %add9, i32* %header_size, align 4, !dbg !4636
  %11 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4637
  %avctx10 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %11, i32 0, i32 0, !dbg !4639
  %12 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx10, align 32, !dbg !4639
  %13 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4640
  %gb11 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %13, i32 0, i32 1, !dbg !4641
  %14 = load i32, i32* %header_size, align 4, !dbg !4642
  %mul = mul nsw i32 %14, 8, !dbg !4643
  %call12 = call i32 @ff_dca_check_crc(%struct.AVCodecContext* %12, %struct.GetBitContext* %gb11, i32 32, i32 %mul), !dbg !4644
  %tobool = icmp ne i32 %call12, 0, !dbg !4644
  br i1 %tobool, label %if.then13, label %if.end15, !dbg !4645

if.then13:                                        ; preds = %if.end6
  %15 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4646
  %avctx14 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %15, i32 0, i32 0, !dbg !4648
  %16 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx14, align 32, !dbg !4648
  %17 = bitcast %struct.AVCodecContext* %16 to i8*, !dbg !4646
  call void (i8*, i32, i8*, ...) @av_log(i8* %17, i32 16, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i32 0, i32 0)), !dbg !4649
  store i32 -1094995529, i32* %retval, align 4, !dbg !4650
  br label %return, !dbg !4650

if.end15:                                         ; preds = %if.end6
  %18 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4651
  %gb16 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %18, i32 0, i32 1, !dbg !4652
  %call17 = call i32 @get_bits(%struct.GetBitContext* %gb16, i32 5), !dbg !4653
  %add18 = add i32 %call17, 1, !dbg !4654
  store i32 %add18, i32* %frame_size_nbits, align 4, !dbg !4655
  %19 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4656
  %gb19 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %19, i32 0, i32 1, !dbg !4657
  %20 = load i32, i32* %frame_size_nbits, align 4, !dbg !4658
  %call20 = call i32 @get_bits_long(%struct.GetBitContext* %gb19, i32 %20), !dbg !4659
  %21 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4660
  %frame_size = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %21, i32 0, i32 2, !dbg !4661
  store i32 %call20, i32* %frame_size, align 8, !dbg !4662
  %22 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4663
  %frame_size21 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %22, i32 0, i32 2, !dbg !4665
  %23 = load i32, i32* %frame_size21, align 8, !dbg !4665
  %cmp22 = icmp slt i32 %23, 0, !dbg !4666
  br i1 %cmp22, label %if.then25, label %lor.lhs.false, !dbg !4667

lor.lhs.false:                                    ; preds = %if.end15
  %24 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4668
  %frame_size23 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %24, i32 0, i32 2, !dbg !4670
  %25 = load i32, i32* %frame_size23, align 8, !dbg !4670
  %cmp24 = icmp sge i32 %25, 245760, !dbg !4671
  br i1 %cmp24, label %if.then25, label %if.end28, !dbg !4672

if.then25:                                        ; preds = %lor.lhs.false, %if.end15
  %26 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4673
  %avctx26 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %26, i32 0, i32 0, !dbg !4675
  %27 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx26, align 32, !dbg !4675
  %28 = bitcast %struct.AVCodecContext* %27 to i8*, !dbg !4673
  %29 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4676
  %frame_size27 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %29, i32 0, i32 2, !dbg !4677
  %30 = load i32, i32* %frame_size27, align 8, !dbg !4677
  call void (i8*, i32, i8*, ...) @av_log(i8* %28, i32 16, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i32 0, i32 0), i32 %30), !dbg !4678
  store i32 -1094995529, i32* %retval, align 4, !dbg !4679
  br label %return, !dbg !4679

if.end28:                                         ; preds = %lor.lhs.false
  %31 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4680
  %frame_size29 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %31, i32 0, i32 2, !dbg !4681
  %32 = load i32, i32* %frame_size29, align 8, !dbg !4682
  %inc = add nsw i32 %32, 1, !dbg !4682
  store i32 %inc, i32* %frame_size29, align 8, !dbg !4682
  %33 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4683
  %gb30 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %33, i32 0, i32 1, !dbg !4684
  %call31 = call i32 @get_bits(%struct.GetBitContext* %gb30, i32 4), !dbg !4685
  %add32 = add i32 %call31, 1, !dbg !4686
  %34 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4687
  %nchsets = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %34, i32 0, i32 3, !dbg !4688
  store i32 %add32, i32* %nchsets, align 4, !dbg !4689
  %35 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4690
  %nchsets33 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %35, i32 0, i32 3, !dbg !4692
  %36 = load i32, i32* %nchsets33, align 4, !dbg !4692
  %cmp34 = icmp sgt i32 %36, 3, !dbg !4693
  br i1 %cmp34, label %if.then35, label %if.end38, !dbg !4694

if.then35:                                        ; preds = %if.end28
  %37 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4695
  %avctx36 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %37, i32 0, i32 0, !dbg !4697
  %38 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx36, align 32, !dbg !4697
  %39 = bitcast %struct.AVCodecContext* %38 to i8*, !dbg !4695
  %40 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4698
  %nchsets37 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %40, i32 0, i32 3, !dbg !4699
  %41 = load i32, i32* %nchsets37, align 4, !dbg !4699
  call void (i8*, i8*, ...) @avpriv_request_sample(i8* %39, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i32 0, i32 0), i32 %41), !dbg !4700
  store i32 -1163346256, i32* %retval, align 4, !dbg !4701
  br label %return, !dbg !4701

if.end38:                                         ; preds = %if.end28
  %42 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4702
  %gb39 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %42, i32 0, i32 1, !dbg !4703
  %call40 = call i32 @get_bits(%struct.GetBitContext* %gb39, i32 4), !dbg !4704
  store i32 %call40, i32* %nframesegs_log2, align 4, !dbg !4705
  %43 = load i32, i32* %nframesegs_log2, align 4, !dbg !4706
  %shl = shl i32 1, %43, !dbg !4707
  %44 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4708
  %nframesegs = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %44, i32 0, i32 4, !dbg !4709
  store i32 %shl, i32* %nframesegs, align 16, !dbg !4710
  %45 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4711
  %nframesegs41 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %45, i32 0, i32 4, !dbg !4713
  %46 = load i32, i32* %nframesegs41, align 16, !dbg !4713
  %cmp42 = icmp sgt i32 %46, 1024, !dbg !4714
  br i1 %cmp42, label %if.then43, label %if.end45, !dbg !4715

if.then43:                                        ; preds = %if.end38
  %47 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4716
  %avctx44 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %47, i32 0, i32 0, !dbg !4718
  %48 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx44, align 32, !dbg !4718
  %49 = bitcast %struct.AVCodecContext* %48 to i8*, !dbg !4716
  call void (i8*, i32, i8*, ...) @av_log(i8* %49, i32 16, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i32 0, i32 0)), !dbg !4719
  store i32 -1094995529, i32* %retval, align 4, !dbg !4720
  br label %return, !dbg !4720

if.end45:                                         ; preds = %if.end38
  %50 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4721
  %gb46 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %50, i32 0, i32 1, !dbg !4722
  %call47 = call i32 @get_bits(%struct.GetBitContext* %gb46, i32 4), !dbg !4723
  %51 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4724
  %nsegsamples_log2 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %51, i32 0, i32 5, !dbg !4725
  store i32 %call47, i32* %nsegsamples_log2, align 4, !dbg !4726
  %52 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4727
  %nsegsamples_log248 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %52, i32 0, i32 5, !dbg !4729
  %53 = load i32, i32* %nsegsamples_log248, align 4, !dbg !4729
  %tobool49 = icmp ne i32 %53, 0, !dbg !4727
  br i1 %tobool49, label %if.end52, label %if.then50, !dbg !4730

if.then50:                                        ; preds = %if.end45
  %54 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4731
  %avctx51 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %54, i32 0, i32 0, !dbg !4733
  %55 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx51, align 32, !dbg !4733
  %56 = bitcast %struct.AVCodecContext* %55 to i8*, !dbg !4731
  call void (i8*, i32, i8*, ...) @av_log(i8* %56, i32 16, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7, i32 0, i32 0)), !dbg !4734
  store i32 -1094995529, i32* %retval, align 4, !dbg !4735
  br label %return, !dbg !4735

if.end52:                                         ; preds = %if.end45
  %57 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4736
  %nsegsamples_log253 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %57, i32 0, i32 5, !dbg !4737
  %58 = load i32, i32* %nsegsamples_log253, align 4, !dbg !4737
  %shl54 = shl i32 1, %58, !dbg !4738
  %59 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4739
  %nsegsamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %59, i32 0, i32 6, !dbg !4740
  store i32 %shl54, i32* %nsegsamples, align 8, !dbg !4741
  %60 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4742
  %nsegsamples55 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %60, i32 0, i32 6, !dbg !4744
  %61 = load i32, i32* %nsegsamples55, align 8, !dbg !4744
  %cmp56 = icmp sgt i32 %61, 512, !dbg !4745
  br i1 %cmp56, label %if.then57, label %if.end59, !dbg !4746

if.then57:                                        ; preds = %if.end52
  %62 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4747
  %avctx58 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %62, i32 0, i32 0, !dbg !4749
  %63 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx58, align 32, !dbg !4749
  %64 = bitcast %struct.AVCodecContext* %63 to i8*, !dbg !4747
  call void (i8*, i32, i8*, ...) @av_log(i8* %64, i32 16, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8, i32 0, i32 0)), !dbg !4750
  store i32 -1094995529, i32* %retval, align 4, !dbg !4751
  br label %return, !dbg !4751

if.end59:                                         ; preds = %if.end52
  %65 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4752
  %nsegsamples_log260 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %65, i32 0, i32 5, !dbg !4753
  %66 = load i32, i32* %nsegsamples_log260, align 4, !dbg !4753
  %67 = load i32, i32* %nframesegs_log2, align 4, !dbg !4754
  %add61 = add nsw i32 %66, %67, !dbg !4755
  %68 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4756
  %nframesamples_log2 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %68, i32 0, i32 7, !dbg !4757
  store i32 %add61, i32* %nframesamples_log2, align 4, !dbg !4758
  %69 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4759
  %nframesamples_log262 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %69, i32 0, i32 7, !dbg !4760
  %70 = load i32, i32* %nframesamples_log262, align 4, !dbg !4760
  %shl63 = shl i32 1, %70, !dbg !4761
  %71 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4762
  %nframesamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %71, i32 0, i32 8, !dbg !4763
  store i32 %shl63, i32* %nframesamples, align 32, !dbg !4764
  %72 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4765
  %nframesamples64 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %72, i32 0, i32 8, !dbg !4767
  %73 = load i32, i32* %nframesamples64, align 32, !dbg !4767
  %cmp65 = icmp sgt i32 %73, 65536, !dbg !4768
  br i1 %cmp65, label %if.then66, label %if.end68, !dbg !4769

if.then66:                                        ; preds = %if.end59
  %74 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4770
  %avctx67 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %74, i32 0, i32 0, !dbg !4772
  %75 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx67, align 32, !dbg !4772
  %76 = bitcast %struct.AVCodecContext* %75 to i8*, !dbg !4770
  call void (i8*, i32, i8*, ...) @av_log(i8* %76, i32 16, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9, i32 0, i32 0)), !dbg !4773
  store i32 -1094995529, i32* %retval, align 4, !dbg !4774
  br label %return, !dbg !4774

if.end68:                                         ; preds = %if.end59
  %77 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4775
  %gb69 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %77, i32 0, i32 1, !dbg !4776
  %call70 = call i32 @get_bits(%struct.GetBitContext* %gb69, i32 5), !dbg !4777
  %add71 = add i32 %call70, 1, !dbg !4778
  %78 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4779
  %seg_size_nbits = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %78, i32 0, i32 9, !dbg !4780
  store i32 %add71, i32* %seg_size_nbits, align 4, !dbg !4781
  %79 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4782
  %gb72 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %79, i32 0, i32 1, !dbg !4783
  %call73 = call i32 @get_bits(%struct.GetBitContext* %gb72, i32 2), !dbg !4784
  %80 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4785
  %band_crc_present = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %80, i32 0, i32 10, !dbg !4786
  store i32 %call73, i32* %band_crc_present, align 8, !dbg !4787
  %81 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4788
  %gb74 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %81, i32 0, i32 1, !dbg !4789
  %call75 = call i32 @get_bits1(%struct.GetBitContext* %gb74), !dbg !4790
  %82 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4791
  %scalable_lsbs = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %82, i32 0, i32 11, !dbg !4792
  store i32 %call75, i32* %scalable_lsbs, align 4, !dbg !4793
  %83 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4794
  %gb76 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %83, i32 0, i32 1, !dbg !4795
  %call77 = call i32 @get_bits(%struct.GetBitContext* %gb76, i32 5), !dbg !4796
  %add78 = add i32 %call77, 1, !dbg !4797
  %84 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4798
  %ch_mask_nbits = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %84, i32 0, i32 12, !dbg !4799
  store i32 %add78, i32* %ch_mask_nbits, align 16, !dbg !4800
  %85 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4801
  %scalable_lsbs79 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %85, i32 0, i32 11, !dbg !4803
  %86 = load i32, i32* %scalable_lsbs79, align 4, !dbg !4803
  %tobool80 = icmp ne i32 %86, 0, !dbg !4801
  br i1 %tobool80, label %if.then81, label %if.else, !dbg !4804

if.then81:                                        ; preds = %if.end68
  %87 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4805
  %gb82 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %87, i32 0, i32 1, !dbg !4806
  %call83 = call i32 @get_bits(%struct.GetBitContext* %gb82, i32 4), !dbg !4807
  %88 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4808
  %fixed_lsb_width = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %88, i32 0, i32 13, !dbg !4809
  store i32 %call83, i32* %fixed_lsb_width, align 4, !dbg !4810
  br label %if.end85, !dbg !4808

if.else:                                          ; preds = %if.end68
  %89 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4811
  %fixed_lsb_width84 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %89, i32 0, i32 13, !dbg !4812
  store i32 0, i32* %fixed_lsb_width84, align 4, !dbg !4813
  br label %if.end85

if.end85:                                         ; preds = %if.else, %if.then81
  %90 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4814
  %gb86 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %90, i32 0, i32 1, !dbg !4816
  %91 = load i32, i32* %header_size, align 4, !dbg !4817
  %mul87 = mul nsw i32 %91, 8, !dbg !4818
  %call88 = call i32 @ff_dca_seek_bits(%struct.GetBitContext* %gb86, i32 %mul87), !dbg !4819
  %tobool89 = icmp ne i32 %call88, 0, !dbg !4819
  br i1 %tobool89, label %if.then90, label %if.end92, !dbg !4820

if.then90:                                        ; preds = %if.end85
  %92 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4821
  %avctx91 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %92, i32 0, i32 0, !dbg !4823
  %93 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx91, align 32, !dbg !4823
  %94 = bitcast %struct.AVCodecContext* %93 to i8*, !dbg !4821
  call void (i8*, i32, i8*, ...) @av_log(i8* %94, i32 16, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10, i32 0, i32 0)), !dbg !4824
  store i32 -1094995529, i32* %retval, align 4, !dbg !4825
  br label %return, !dbg !4825

if.end92:                                         ; preds = %if.end85
  store i32 0, i32* %retval, align 4, !dbg !4826
  br label %return, !dbg !4826

return:                                           ; preds = %if.end92, %if.then90, %if.then66, %if.then57, %if.then50, %if.then43, %if.then35, %if.then25, %if.then13, %if.then4, %if.then
  %95 = load i32, i32* %retval, align 4, !dbg !4827
  ret i32 %95, !dbg !4827
}

; Function Attrs: nounwind uwtable
define internal i32 @parse_sub_headers(%struct.DCAXllDecoder* %s, %struct.DCAExssAsset* %asset) #0 !dbg !4828 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %asset.addr = alloca %struct.DCAExssAsset*, align 8
  %dca = alloca %struct.DCAContext*, align 8
  %c = alloca %struct.DCAXllChSet*, align 8
  %i = alloca i32, align 4
  %ret = alloca i32, align 4
  %o = alloca %struct.DCAXllChSet*, align 8
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !4831, metadata !2040), !dbg !4832
  store %struct.DCAExssAsset* %asset, %struct.DCAExssAsset** %asset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAExssAsset** %asset.addr, metadata !4833, metadata !2040), !dbg !4834
  call void @llvm.dbg.declare(metadata %struct.DCAContext** %dca, metadata !4835, metadata !2040), !dbg !4836
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4837
  %avctx = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %0, i32 0, i32 0, !dbg !4838
  %1 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 32, !dbg !4838
  %priv_data = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %1, i32 0, i32 6, !dbg !4839
  %2 = load i8*, i8** %priv_data, align 8, !dbg !4839
  %3 = bitcast i8* %2 to %struct.DCAContext*, !dbg !4837
  store %struct.DCAContext* %3, %struct.DCAContext** %dca, align 8, !dbg !4836
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c, metadata !4840, metadata !2040), !dbg !4841
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4842, metadata !2040), !dbg !4843
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !4844, metadata !2040), !dbg !4845
  %4 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4846
  %nfreqbands = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %4, i32 0, i32 18, !dbg !4847
  store i32 0, i32* %nfreqbands, align 4, !dbg !4848
  %5 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4849
  %nchannels = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %5, i32 0, i32 19, !dbg !4850
  store i32 0, i32* %nchannels, align 16, !dbg !4851
  %6 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4852
  %nreschsets = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %6, i32 0, i32 20, !dbg !4853
  store i32 0, i32* %nreschsets, align 4, !dbg !4854
  store i32 0, i32* %i, align 4, !dbg !4855
  %7 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4857
  %chset = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %7, i32 0, i32 15, !dbg !4858
  %arraydecay = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset, i32 0, i32 0, !dbg !4857
  store %struct.DCAXllChSet* %arraydecay, %struct.DCAXllChSet** %c, align 8, !dbg !4859
  br label %for.cond, !dbg !4860

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4, !dbg !4861
  %9 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4864
  %nchsets = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %9, i32 0, i32 3, !dbg !4865
  %10 = load i32, i32* %nchsets, align 4, !dbg !4865
  %cmp = icmp slt i32 %8, %10, !dbg !4866
  br i1 %cmp, label %for.body, label %for.end, !dbg !4867

for.body:                                         ; preds = %for.cond
  %11 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4868
  %nchannels1 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %11, i32 0, i32 19, !dbg !4870
  %12 = load i32, i32* %nchannels1, align 16, !dbg !4870
  %13 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4871
  %hier_ofs = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %13, i32 0, i32 10, !dbg !4872
  store i32 %12, i32* %hier_ofs, align 8, !dbg !4873
  %14 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4874
  %15 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4876
  %16 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !4877
  %call = call i32 @chs_parse_header(%struct.DCAXllDecoder* %14, %struct.DCAXllChSet* %15, %struct.DCAExssAsset* %16), !dbg !4878
  store i32 %call, i32* %ret, align 4, !dbg !4879
  %cmp2 = icmp slt i32 %call, 0, !dbg !4880
  br i1 %cmp2, label %if.then, label %if.end, !dbg !4881

if.then:                                          ; preds = %for.body
  %17 = load i32, i32* %ret, align 4, !dbg !4882
  store i32 %17, i32* %retval, align 4, !dbg !4883
  br label %return, !dbg !4883

if.end:                                           ; preds = %for.body
  %18 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4884
  %nfreqbands3 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %18, i32 0, i32 16, !dbg !4886
  %19 = load i32, i32* %nfreqbands3, align 16, !dbg !4886
  %20 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4887
  %nfreqbands4 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %20, i32 0, i32 18, !dbg !4888
  %21 = load i32, i32* %nfreqbands4, align 4, !dbg !4888
  %cmp5 = icmp sgt i32 %19, %21, !dbg !4889
  br i1 %cmp5, label %if.then6, label %if.end9, !dbg !4890

if.then6:                                         ; preds = %if.end
  %22 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4891
  %nfreqbands7 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %22, i32 0, i32 16, !dbg !4892
  %23 = load i32, i32* %nfreqbands7, align 16, !dbg !4892
  %24 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4893
  %nfreqbands8 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %24, i32 0, i32 18, !dbg !4894
  store i32 %23, i32* %nfreqbands8, align 4, !dbg !4895
  br label %if.end9, !dbg !4893

if.end9:                                          ; preds = %if.then6, %if.end
  %25 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4896
  %hier_chset = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %25, i32 0, i32 9, !dbg !4898
  %26 = load i32, i32* %hier_chset, align 4, !dbg !4898
  %tobool = icmp ne i32 %26, 0, !dbg !4896
  br i1 %tobool, label %if.then10, label %if.end13, !dbg !4899

if.then10:                                        ; preds = %if.end9
  %27 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4900
  %nchannels11 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %27, i32 0, i32 0, !dbg !4901
  %28 = load i32, i32* %nchannels11, align 32, !dbg !4901
  %29 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4902
  %nchannels12 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %29, i32 0, i32 19, !dbg !4903
  %30 = load i32, i32* %nchannels12, align 16, !dbg !4904
  %add = add nsw i32 %30, %28, !dbg !4904
  store i32 %add, i32* %nchannels12, align 16, !dbg !4904
  br label %if.end13, !dbg !4902

if.end13:                                         ; preds = %if.then10, %if.end9
  %31 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4905
  %residual_encode = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %31, i32 0, i32 1, !dbg !4907
  %32 = load i32, i32* %residual_encode, align 4, !dbg !4907
  %33 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4908
  %nchannels14 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %33, i32 0, i32 0, !dbg !4909
  %34 = load i32, i32* %nchannels14, align 32, !dbg !4909
  %shl = shl i32 1, %34, !dbg !4910
  %sub = sub nsw i32 %shl, 1, !dbg !4911
  %cmp15 = icmp ne i32 %32, %sub, !dbg !4912
  br i1 %cmp15, label %if.then16, label %if.end18, !dbg !4913

if.then16:                                        ; preds = %if.end13
  %35 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4914
  %nreschsets17 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %35, i32 0, i32 20, !dbg !4915
  %36 = load i32, i32* %nreschsets17, align 4, !dbg !4916
  %inc = add nsw i32 %36, 1, !dbg !4916
  store i32 %inc, i32* %nreschsets17, align 4, !dbg !4916
  br label %if.end18, !dbg !4914

if.end18:                                         ; preds = %if.then16, %if.end13
  br label %for.inc, !dbg !4917

for.inc:                                          ; preds = %if.end18
  %37 = load i32, i32* %i, align 4, !dbg !4918
  %inc19 = add nsw i32 %37, 1, !dbg !4918
  store i32 %inc19, i32* %i, align 4, !dbg !4918
  %38 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4920
  %incdec.ptr = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %38, i32 1, !dbg !4920
  store %struct.DCAXllChSet* %incdec.ptr, %struct.DCAXllChSet** %c, align 8, !dbg !4920
  br label %for.cond, !dbg !4921, !llvm.loop !4922

for.end:                                          ; preds = %for.cond
  %39 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4924
  %nchsets20 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %39, i32 0, i32 3, !dbg !4926
  %40 = load i32, i32* %nchsets20, align 4, !dbg !4926
  %sub21 = sub nsw i32 %40, 1, !dbg !4927
  store i32 %sub21, i32* %i, align 4, !dbg !4928
  %41 = load i32, i32* %i, align 4, !dbg !4929
  %idxprom = sext i32 %41 to i64, !dbg !4930
  %42 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4930
  %chset22 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %42, i32 0, i32 15, !dbg !4931
  %arrayidx = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset22, i64 0, i64 %idxprom, !dbg !4930
  store %struct.DCAXllChSet* %arrayidx, %struct.DCAXllChSet** %c, align 8, !dbg !4932
  br label %for.cond23, !dbg !4933

for.cond23:                                       ; preds = %for.inc34, %for.end
  %43 = load i32, i32* %i, align 4, !dbg !4934
  %cmp24 = icmp sgt i32 %43, 0, !dbg !4937
  br i1 %cmp24, label %for.body25, label %for.end36, !dbg !4938

for.body25:                                       ; preds = %for.cond23
  %44 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4939
  %call26 = call i32 @is_hier_dmix_chset(%struct.DCAXllChSet* %44), !dbg !4942
  %tobool27 = icmp ne i32 %call26, 0, !dbg !4942
  br i1 %tobool27, label %if.then28, label %if.end33, !dbg !4943

if.then28:                                        ; preds = %for.body25
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %o, metadata !4944, metadata !2040), !dbg !4946
  %45 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4947
  %46 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4948
  %call29 = call %struct.DCAXllChSet* @find_next_hier_dmix_chset(%struct.DCAXllDecoder* %45, %struct.DCAXllChSet* %46), !dbg !4949
  store %struct.DCAXllChSet* %call29, %struct.DCAXllChSet** %o, align 8, !dbg !4946
  %47 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %o, align 8, !dbg !4950
  %tobool30 = icmp ne %struct.DCAXllChSet* %47, null, !dbg !4950
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !4952

if.then31:                                        ; preds = %if.then28
  %48 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4953
  %49 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %o, align 8, !dbg !4954
  call void @prescale_down_mix(%struct.DCAXllChSet* %48, %struct.DCAXllChSet* %49), !dbg !4955
  br label %if.end32, !dbg !4955

if.end32:                                         ; preds = %if.then31, %if.then28
  br label %if.end33, !dbg !4956

if.end33:                                         ; preds = %if.end32, %for.body25
  br label %for.inc34, !dbg !4957

for.inc34:                                        ; preds = %if.end33
  %50 = load i32, i32* %i, align 4, !dbg !4958
  %dec = add nsw i32 %50, -1, !dbg !4958
  store i32 %dec, i32* %i, align 4, !dbg !4958
  %51 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !4960
  %incdec.ptr35 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %51, i32 -1, !dbg !4960
  store %struct.DCAXllChSet* %incdec.ptr35, %struct.DCAXllChSet** %c, align 8, !dbg !4960
  br label %for.cond23, !dbg !4961, !llvm.loop !4962

for.end36:                                        ; preds = %for.cond23
  %52 = load %struct.DCAContext*, %struct.DCAContext** %dca, align 8, !dbg !4964
  %request_channel_layout = getelementptr inbounds %struct.DCAContext, %struct.DCAContext* %52, i32 0, i32 13, !dbg !4965
  %53 = load i32, i32* %request_channel_layout, align 8, !dbg !4965
  switch i32 %53, label %sw.default [
    i32 6, label %sw.bb
    i32 31, label %sw.bb37
    i32 63, label %sw.bb37
  ], !dbg !4966

sw.bb:                                            ; preds = %for.end36
  %54 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4967
  %nactivechsets = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %54, i32 0, i32 21, !dbg !4969
  store i32 1, i32* %nactivechsets, align 8, !dbg !4970
  br label %sw.epilog, !dbg !4971

sw.bb37:                                          ; preds = %for.end36, %for.end36
  %55 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4972
  %chset38 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %55, i32 0, i32 15, !dbg !4973
  %arrayidx39 = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset38, i64 0, i64 0, !dbg !4972
  %nchannels40 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %arrayidx39, i32 0, i32 0, !dbg !4974
  %56 = load i32, i32* %nchannels40, align 32, !dbg !4974
  %cmp41 = icmp slt i32 %56, 5, !dbg !4975
  br i1 %cmp41, label %land.rhs, label %land.end, !dbg !4976

land.rhs:                                         ; preds = %sw.bb37
  %57 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4977
  %nchsets42 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %57, i32 0, i32 3, !dbg !4979
  %58 = load i32, i32* %nchsets42, align 4, !dbg !4979
  %cmp43 = icmp sgt i32 %58, 1, !dbg !4980
  br label %land.end

land.end:                                         ; preds = %land.rhs, %sw.bb37
  %59 = phi i1 [ false, %sw.bb37 ], [ %cmp43, %land.rhs ]
  %cond = select i1 %59, i32 2, i32 1, !dbg !4981
  %60 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4983
  %nactivechsets44 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %60, i32 0, i32 21, !dbg !4984
  store i32 %cond, i32* %nactivechsets44, align 8, !dbg !4985
  br label %sw.epilog, !dbg !4986

sw.default:                                       ; preds = %for.end36
  %61 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4987
  %nchsets45 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %61, i32 0, i32 3, !dbg !4988
  %62 = load i32, i32* %nchsets45, align 4, !dbg !4988
  %63 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !4989
  %nactivechsets46 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %63, i32 0, i32 21, !dbg !4990
  store i32 %62, i32* %nactivechsets46, align 8, !dbg !4991
  br label %sw.epilog, !dbg !4992

sw.epilog:                                        ; preds = %sw.default, %land.end, %sw.bb
  store i32 0, i32* %retval, align 4, !dbg !4993
  br label %return, !dbg !4993

return:                                           ; preds = %sw.epilog, %if.then
  %64 = load i32, i32* %retval, align 4, !dbg !4994
  ret i32 %64, !dbg !4994
}

; Function Attrs: nounwind uwtable
define internal i32 @parse_navi_table(%struct.DCAXllDecoder* %s) #0 !dbg !4995 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %chs = alloca i32, align 4
  %seg = alloca i32, align 4
  %band = alloca i32, align 4
  %navi_nb = alloca i32, align 4
  %navi_pos = alloca i32, align 4
  %navi_ptr = alloca i32*, align 8
  %c = alloca %struct.DCAXllChSet*, align 8
  %size = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !4996, metadata !2040), !dbg !4997
  call void @llvm.dbg.declare(metadata i32* %chs, metadata !4998, metadata !2040), !dbg !4999
  call void @llvm.dbg.declare(metadata i32* %seg, metadata !5000, metadata !2040), !dbg !5001
  call void @llvm.dbg.declare(metadata i32* %band, metadata !5002, metadata !2040), !dbg !5003
  call void @llvm.dbg.declare(metadata i32* %navi_nb, metadata !5004, metadata !2040), !dbg !5005
  call void @llvm.dbg.declare(metadata i32* %navi_pos, metadata !5006, metadata !2040), !dbg !5007
  call void @llvm.dbg.declare(metadata i32** %navi_ptr, metadata !5008, metadata !2040), !dbg !5009
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c, metadata !5010, metadata !2040), !dbg !5011
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5012
  %nfreqbands = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %0, i32 0, i32 18, !dbg !5013
  %1 = load i32, i32* %nfreqbands, align 4, !dbg !5013
  %2 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5014
  %nframesegs = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %2, i32 0, i32 4, !dbg !5015
  %3 = load i32, i32* %nframesegs, align 16, !dbg !5015
  %mul = mul nsw i32 %1, %3, !dbg !5016
  %4 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5017
  %nchsets = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %4, i32 0, i32 3, !dbg !5018
  %5 = load i32, i32* %nchsets, align 4, !dbg !5018
  %mul1 = mul nsw i32 %mul, %5, !dbg !5019
  store i32 %mul1, i32* %navi_nb, align 4, !dbg !5020
  %6 = load i32, i32* %navi_nb, align 4, !dbg !5021
  %cmp = icmp sgt i32 %6, 1024, !dbg !5023
  br i1 %cmp, label %if.then, label %if.end, !dbg !5024

if.then:                                          ; preds = %entry
  %7 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5025
  %avctx = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %7, i32 0, i32 0, !dbg !5027
  %8 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 32, !dbg !5027
  %9 = bitcast %struct.AVCodecContext* %8 to i8*, !dbg !5025
  %10 = load i32, i32* %navi_nb, align 4, !dbg !5028
  call void (i8*, i32, i8*, ...) @av_log(i8* %9, i32 16, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.34, i32 0, i32 0), i32 %10), !dbg !5029
  store i32 -1094995529, i32* %retval, align 4, !dbg !5030
  br label %return, !dbg !5030

if.end:                                           ; preds = %entry
  %11 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5031
  %navi = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %11, i32 0, i32 16, !dbg !5032
  %12 = bitcast i32** %navi to i8*, !dbg !5033
  %13 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5034
  %navi_size = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %13, i32 0, i32 17, !dbg !5035
  %14 = load i32, i32* %navi_nb, align 4, !dbg !5036
  %conv = sext i32 %14 to i64, !dbg !5036
  %mul2 = mul i64 %conv, 4, !dbg !5037
  call void @av_fast_malloc(i8* %12, i32* %navi_size, i64 %mul2), !dbg !5038
  %15 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5039
  %navi3 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %15, i32 0, i32 16, !dbg !5041
  %16 = load i32*, i32** %navi3, align 32, !dbg !5041
  %tobool = icmp ne i32* %16, null, !dbg !5039
  br i1 %tobool, label %if.end5, label %if.then4, !dbg !5042

if.then4:                                         ; preds = %if.end
  store i32 -12, i32* %retval, align 4, !dbg !5043
  br label %return, !dbg !5043

if.end5:                                          ; preds = %if.end
  %17 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5044
  %gb = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %17, i32 0, i32 1, !dbg !5045
  %call = call i32 @get_bits_count(%struct.GetBitContext* %gb), !dbg !5046
  store i32 %call, i32* %navi_pos, align 4, !dbg !5047
  %18 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5048
  %navi6 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %18, i32 0, i32 16, !dbg !5049
  %19 = load i32*, i32** %navi6, align 32, !dbg !5049
  store i32* %19, i32** %navi_ptr, align 8, !dbg !5050
  store i32 0, i32* %band, align 4, !dbg !5051
  br label %for.cond, !dbg !5053

for.cond:                                         ; preds = %for.inc39, %if.end5
  %20 = load i32, i32* %band, align 4, !dbg !5054
  %21 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5057
  %nfreqbands7 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %21, i32 0, i32 18, !dbg !5058
  %22 = load i32, i32* %nfreqbands7, align 4, !dbg !5058
  %cmp8 = icmp slt i32 %20, %22, !dbg !5059
  br i1 %cmp8, label %for.body, label %for.end41, !dbg !5060

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %seg, align 4, !dbg !5061
  br label %for.cond10, !dbg !5064

for.cond10:                                       ; preds = %for.inc36, %for.body
  %23 = load i32, i32* %seg, align 4, !dbg !5065
  %24 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5068
  %nframesegs11 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %24, i32 0, i32 4, !dbg !5069
  %25 = load i32, i32* %nframesegs11, align 16, !dbg !5069
  %cmp12 = icmp slt i32 %23, %25, !dbg !5070
  br i1 %cmp12, label %for.body14, label %for.end38, !dbg !5071

for.body14:                                       ; preds = %for.cond10
  store i32 0, i32* %chs, align 4, !dbg !5072
  %26 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5075
  %chset = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %26, i32 0, i32 15, !dbg !5076
  %arraydecay = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset, i32 0, i32 0, !dbg !5075
  store %struct.DCAXllChSet* %arraydecay, %struct.DCAXllChSet** %c, align 8, !dbg !5077
  br label %for.cond15, !dbg !5078

for.cond15:                                       ; preds = %for.inc, %for.body14
  %27 = load i32, i32* %chs, align 4, !dbg !5079
  %28 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5082
  %nchsets16 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %28, i32 0, i32 3, !dbg !5083
  %29 = load i32, i32* %nchsets16, align 4, !dbg !5083
  %cmp17 = icmp slt i32 %27, %29, !dbg !5084
  br i1 %cmp17, label %for.body19, label %for.end, !dbg !5085

for.body19:                                       ; preds = %for.cond15
  call void @llvm.dbg.declare(metadata i32* %size, metadata !5086, metadata !2040), !dbg !5088
  store i32 0, i32* %size, align 4, !dbg !5088
  %30 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !5089
  %nfreqbands20 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %30, i32 0, i32 16, !dbg !5091
  %31 = load i32, i32* %nfreqbands20, align 16, !dbg !5091
  %32 = load i32, i32* %band, align 4, !dbg !5092
  %cmp21 = icmp sgt i32 %31, %32, !dbg !5093
  br i1 %cmp21, label %if.then23, label %if.end33, !dbg !5094

if.then23:                                        ; preds = %for.body19
  %33 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5095
  %gb24 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %33, i32 0, i32 1, !dbg !5097
  %34 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5098
  %seg_size_nbits = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %34, i32 0, i32 9, !dbg !5099
  %35 = load i32, i32* %seg_size_nbits, align 4, !dbg !5099
  %call25 = call i32 @get_bits_long(%struct.GetBitContext* %gb24, i32 %35), !dbg !5100
  store i32 %call25, i32* %size, align 4, !dbg !5101
  %36 = load i32, i32* %size, align 4, !dbg !5102
  %cmp26 = icmp slt i32 %36, 0, !dbg !5104
  br i1 %cmp26, label %if.then30, label %lor.lhs.false, !dbg !5105

lor.lhs.false:                                    ; preds = %if.then23
  %37 = load i32, i32* %size, align 4, !dbg !5106
  %38 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5108
  %frame_size = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %38, i32 0, i32 2, !dbg !5109
  %39 = load i32, i32* %frame_size, align 8, !dbg !5109
  %cmp28 = icmp sge i32 %37, %39, !dbg !5110
  br i1 %cmp28, label %if.then30, label %if.end32, !dbg !5111

if.then30:                                        ; preds = %lor.lhs.false, %if.then23
  %40 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5112
  %avctx31 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %40, i32 0, i32 0, !dbg !5114
  %41 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx31, align 32, !dbg !5114
  %42 = bitcast %struct.AVCodecContext* %41 to i8*, !dbg !5112
  %43 = load i32, i32* %size, align 4, !dbg !5115
  call void (i8*, i32, i8*, ...) @av_log(i8* %42, i32 16, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.35, i32 0, i32 0), i32 %43), !dbg !5116
  store i32 -1094995529, i32* %retval, align 4, !dbg !5117
  br label %return, !dbg !5117

if.end32:                                         ; preds = %lor.lhs.false
  %44 = load i32, i32* %size, align 4, !dbg !5118
  %inc = add nsw i32 %44, 1, !dbg !5118
  store i32 %inc, i32* %size, align 4, !dbg !5118
  br label %if.end33, !dbg !5119

if.end33:                                         ; preds = %if.end32, %for.body19
  %45 = load i32, i32* %size, align 4, !dbg !5120
  %46 = load i32*, i32** %navi_ptr, align 8, !dbg !5121
  %incdec.ptr = getelementptr inbounds i32, i32* %46, i32 1, !dbg !5121
  store i32* %incdec.ptr, i32** %navi_ptr, align 8, !dbg !5121
  store i32 %45, i32* %46, align 4, !dbg !5122
  br label %for.inc, !dbg !5123

for.inc:                                          ; preds = %if.end33
  %47 = load i32, i32* %chs, align 4, !dbg !5124
  %inc34 = add nsw i32 %47, 1, !dbg !5124
  store i32 %inc34, i32* %chs, align 4, !dbg !5124
  %48 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !5126
  %incdec.ptr35 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %48, i32 1, !dbg !5126
  store %struct.DCAXllChSet* %incdec.ptr35, %struct.DCAXllChSet** %c, align 8, !dbg !5126
  br label %for.cond15, !dbg !5127, !llvm.loop !5128

for.end:                                          ; preds = %for.cond15
  br label %for.inc36, !dbg !5130

for.inc36:                                        ; preds = %for.end
  %49 = load i32, i32* %seg, align 4, !dbg !5131
  %inc37 = add nsw i32 %49, 1, !dbg !5131
  store i32 %inc37, i32* %seg, align 4, !dbg !5131
  br label %for.cond10, !dbg !5133, !llvm.loop !5134

for.end38:                                        ; preds = %for.cond10
  br label %for.inc39, !dbg !5136

for.inc39:                                        ; preds = %for.end38
  %50 = load i32, i32* %band, align 4, !dbg !5137
  %inc40 = add nsw i32 %50, 1, !dbg !5137
  store i32 %inc40, i32* %band, align 4, !dbg !5137
  br label %for.cond, !dbg !5139, !llvm.loop !5140

for.end41:                                        ; preds = %for.cond
  %51 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5142
  %gb42 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %51, i32 0, i32 1, !dbg !5143
  %52 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5144
  %gb43 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %52, i32 0, i32 1, !dbg !5145
  %call44 = call i32 @get_bits_count(%struct.GetBitContext* %gb43), !dbg !5146
  %sub = sub nsw i32 0, %call44, !dbg !5147
  %and = and i32 %sub, 7, !dbg !5148
  call void @skip_bits(%struct.GetBitContext* %gb42, i32 %and), !dbg !5149
  %53 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5151
  %gb45 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %53, i32 0, i32 1, !dbg !5152
  call void @skip_bits(%struct.GetBitContext* %gb45, i32 16), !dbg !5153
  %54 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5154
  %avctx46 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %54, i32 0, i32 0, !dbg !5156
  %55 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx46, align 32, !dbg !5156
  %56 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5157
  %gb47 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %56, i32 0, i32 1, !dbg !5158
  %57 = load i32, i32* %navi_pos, align 4, !dbg !5159
  %58 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5160
  %gb48 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %58, i32 0, i32 1, !dbg !5161
  %call49 = call i32 @get_bits_count(%struct.GetBitContext* %gb48), !dbg !5162
  %call50 = call i32 @ff_dca_check_crc(%struct.AVCodecContext* %55, %struct.GetBitContext* %gb47, i32 %57, i32 %call49), !dbg !5163
  %tobool51 = icmp ne i32 %call50, 0, !dbg !5165
  br i1 %tobool51, label %if.then52, label %if.end54, !dbg !5166

if.then52:                                        ; preds = %for.end41
  %59 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5167
  %avctx53 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %59, i32 0, i32 0, !dbg !5169
  %60 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx53, align 32, !dbg !5169
  %61 = bitcast %struct.AVCodecContext* %60 to i8*, !dbg !5167
  call void (i8*, i32, i8*, ...) @av_log(i8* %61, i32 16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i32 0, i32 0)), !dbg !5170
  store i32 -1094995529, i32* %retval, align 4, !dbg !5171
  br label %return, !dbg !5171

if.end54:                                         ; preds = %for.end41
  store i32 0, i32* %retval, align 4, !dbg !5172
  br label %return, !dbg !5172

return:                                           ; preds = %if.end54, %if.then52, %if.then30, %if.then4, %if.then
  %62 = load i32, i32* %retval, align 4, !dbg !5173
  ret i32 %62, !dbg !5173
}

; Function Attrs: nounwind uwtable
define internal i32 @parse_band_data(%struct.DCAXllDecoder* %s) #0 !dbg !5174 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %ret = alloca i32, align 4
  %chs = alloca i32, align 4
  %seg = alloca i32, align 4
  %band = alloca i32, align 4
  %navi_pos = alloca i32, align 4
  %navi_ptr = alloca i32*, align 8
  %c = alloca %struct.DCAXllChSet*, align 8
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !5175, metadata !2040), !dbg !5176
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !5177, metadata !2040), !dbg !5178
  call void @llvm.dbg.declare(metadata i32* %chs, metadata !5179, metadata !2040), !dbg !5180
  call void @llvm.dbg.declare(metadata i32* %seg, metadata !5181, metadata !2040), !dbg !5182
  call void @llvm.dbg.declare(metadata i32* %band, metadata !5183, metadata !2040), !dbg !5184
  call void @llvm.dbg.declare(metadata i32* %navi_pos, metadata !5185, metadata !2040), !dbg !5186
  call void @llvm.dbg.declare(metadata i32** %navi_ptr, metadata !5187, metadata !2040), !dbg !5188
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c, metadata !5189, metadata !2040), !dbg !5190
  store i32 0, i32* %chs, align 4, !dbg !5191
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5193
  %chset = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %0, i32 0, i32 15, !dbg !5194
  %arraydecay = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset, i32 0, i32 0, !dbg !5193
  store %struct.DCAXllChSet* %arraydecay, %struct.DCAXllChSet** %c, align 8, !dbg !5195
  br label %for.cond, !dbg !5196

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %chs, align 4, !dbg !5197
  %2 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5200
  %nactivechsets = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %2, i32 0, i32 21, !dbg !5201
  %3 = load i32, i32* %nactivechsets, align 8, !dbg !5201
  %cmp = icmp slt i32 %1, %3, !dbg !5202
  br i1 %cmp, label %for.body, label %for.end, !dbg !5203

for.body:                                         ; preds = %for.cond
  %4 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5204
  %5 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !5207
  %call = call i32 @chs_alloc_msb_band_data(%struct.DCAXllDecoder* %4, %struct.DCAXllChSet* %5), !dbg !5208
  store i32 %call, i32* %ret, align 4, !dbg !5209
  %cmp1 = icmp slt i32 %call, 0, !dbg !5210
  br i1 %cmp1, label %if.then, label %if.end, !dbg !5211

if.then:                                          ; preds = %for.body
  %6 = load i32, i32* %ret, align 4, !dbg !5212
  store i32 %6, i32* %retval, align 4, !dbg !5213
  br label %return, !dbg !5213

if.end:                                           ; preds = %for.body
  %7 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5214
  %8 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !5216
  %call2 = call i32 @chs_alloc_lsb_band_data(%struct.DCAXllDecoder* %7, %struct.DCAXllChSet* %8), !dbg !5217
  store i32 %call2, i32* %ret, align 4, !dbg !5218
  %cmp3 = icmp slt i32 %call2, 0, !dbg !5219
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !5220

if.then4:                                         ; preds = %if.end
  %9 = load i32, i32* %ret, align 4, !dbg !5221
  store i32 %9, i32* %retval, align 4, !dbg !5222
  br label %return, !dbg !5222

if.end5:                                          ; preds = %if.end
  br label %for.inc, !dbg !5223

for.inc:                                          ; preds = %if.end5
  %10 = load i32, i32* %chs, align 4, !dbg !5224
  %inc = add nsw i32 %10, 1, !dbg !5224
  store i32 %inc, i32* %chs, align 4, !dbg !5224
  %11 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !5226
  %incdec.ptr = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %11, i32 1, !dbg !5226
  store %struct.DCAXllChSet* %incdec.ptr, %struct.DCAXllChSet** %c, align 8, !dbg !5226
  br label %for.cond, !dbg !5227, !llvm.loop !5228

for.end:                                          ; preds = %for.cond
  %12 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5230
  %gb = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %12, i32 0, i32 1, !dbg !5231
  %call6 = call i32 @get_bits_count(%struct.GetBitContext* %gb), !dbg !5232
  store i32 %call6, i32* %navi_pos, align 4, !dbg !5233
  %13 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5234
  %navi = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %13, i32 0, i32 16, !dbg !5235
  %14 = load i32*, i32** %navi, align 32, !dbg !5235
  store i32* %14, i32** %navi_ptr, align 8, !dbg !5236
  store i32 0, i32* %band, align 4, !dbg !5237
  br label %for.cond7, !dbg !5239

for.cond7:                                        ; preds = %for.inc46, %for.end
  %15 = load i32, i32* %band, align 4, !dbg !5240
  %16 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5243
  %nfreqbands = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %16, i32 0, i32 18, !dbg !5244
  %17 = load i32, i32* %nfreqbands, align 4, !dbg !5244
  %cmp8 = icmp slt i32 %15, %17, !dbg !5245
  br i1 %cmp8, label %for.body9, label %for.end48, !dbg !5246

for.body9:                                        ; preds = %for.cond7
  store i32 0, i32* %seg, align 4, !dbg !5247
  br label %for.cond10, !dbg !5250

for.cond10:                                       ; preds = %for.inc43, %for.body9
  %18 = load i32, i32* %seg, align 4, !dbg !5251
  %19 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5254
  %nframesegs = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %19, i32 0, i32 4, !dbg !5255
  %20 = load i32, i32* %nframesegs, align 16, !dbg !5255
  %cmp11 = icmp slt i32 %18, %20, !dbg !5256
  br i1 %cmp11, label %for.body12, label %for.end45, !dbg !5257

for.body12:                                       ; preds = %for.cond10
  store i32 0, i32* %chs, align 4, !dbg !5258
  %21 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5261
  %chset13 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %21, i32 0, i32 15, !dbg !5262
  %arraydecay14 = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset13, i32 0, i32 0, !dbg !5261
  store %struct.DCAXllChSet* %arraydecay14, %struct.DCAXllChSet** %c, align 8, !dbg !5263
  br label %for.cond15, !dbg !5264

for.cond15:                                       ; preds = %for.inc39, %for.body12
  %22 = load i32, i32* %chs, align 4, !dbg !5265
  %23 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5268
  %nchsets = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %23, i32 0, i32 3, !dbg !5269
  %24 = load i32, i32* %nchsets, align 4, !dbg !5269
  %cmp16 = icmp slt i32 %22, %24, !dbg !5270
  br i1 %cmp16, label %for.body17, label %for.end42, !dbg !5271

for.body17:                                       ; preds = %for.cond15
  %25 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !5272
  %nfreqbands18 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %25, i32 0, i32 16, !dbg !5275
  %26 = load i32, i32* %nfreqbands18, align 16, !dbg !5275
  %27 = load i32, i32* %band, align 4, !dbg !5276
  %cmp19 = icmp sgt i32 %26, %27, !dbg !5277
  br i1 %cmp19, label %if.then20, label %if.end37, !dbg !5278

if.then20:                                        ; preds = %for.body17
  %28 = load i32*, i32** %navi_ptr, align 8, !dbg !5279
  %29 = load i32, i32* %28, align 4, !dbg !5281
  %mul = mul nsw i32 %29, 8, !dbg !5282
  %30 = load i32, i32* %navi_pos, align 4, !dbg !5283
  %add = add nsw i32 %30, %mul, !dbg !5283
  store i32 %add, i32* %navi_pos, align 4, !dbg !5283
  %31 = load i32, i32* %navi_pos, align 4, !dbg !5284
  %32 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5286
  %gb21 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %32, i32 0, i32 1, !dbg !5287
  %size_in_bits = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %gb21, i32 0, i32 3, !dbg !5288
  %33 = load i32, i32* %size_in_bits, align 4, !dbg !5288
  %cmp22 = icmp sgt i32 %31, %33, !dbg !5289
  br i1 %cmp22, label %if.then23, label %if.end24, !dbg !5290

if.then23:                                        ; preds = %if.then20
  %34 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5291
  %avctx = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %34, i32 0, i32 0, !dbg !5293
  %35 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 32, !dbg !5293
  %36 = bitcast %struct.AVCodecContext* %35 to i8*, !dbg !5291
  call void (i8*, i32, i8*, ...) @av_log(i8* %36, i32 16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.37, i32 0, i32 0)), !dbg !5294
  store i32 -1094995529, i32* %retval, align 4, !dbg !5295
  br label %return, !dbg !5295

if.end24:                                         ; preds = %if.then20
  %37 = load i32, i32* %chs, align 4, !dbg !5296
  %38 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5298
  %nactivechsets25 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %38, i32 0, i32 21, !dbg !5299
  %39 = load i32, i32* %nactivechsets25, align 8, !dbg !5299
  %cmp26 = icmp slt i32 %37, %39, !dbg !5300
  br i1 %cmp26, label %land.lhs.true, label %if.end33, !dbg !5301

land.lhs.true:                                    ; preds = %if.end24
  %40 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5302
  %41 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !5303
  %42 = load i32, i32* %band, align 4, !dbg !5304
  %43 = load i32, i32* %seg, align 4, !dbg !5305
  %44 = load i32, i32* %navi_pos, align 4, !dbg !5306
  %call27 = call i32 @chs_parse_band_data(%struct.DCAXllDecoder* %40, %struct.DCAXllChSet* %41, i32 %42, i32 %43, i32 %44), !dbg !5307
  store i32 %call27, i32* %ret, align 4, !dbg !5308
  %cmp28 = icmp slt i32 %call27, 0, !dbg !5309
  br i1 %cmp28, label %if.then29, label %if.end33, !dbg !5310

if.then29:                                        ; preds = %land.lhs.true
  %45 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5312
  %avctx30 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %45, i32 0, i32 0, !dbg !5315
  %46 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx30, align 32, !dbg !5315
  %err_recognition = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %46, i32 0, i32 135, !dbg !5316
  %47 = load i32, i32* %err_recognition, align 8, !dbg !5316
  %and = and i32 %47, 8, !dbg !5317
  %tobool = icmp ne i32 %and, 0, !dbg !5317
  br i1 %tobool, label %if.then31, label %if.end32, !dbg !5318

if.then31:                                        ; preds = %if.then29
  %48 = load i32, i32* %ret, align 4, !dbg !5319
  store i32 %48, i32* %retval, align 4, !dbg !5320
  br label %return, !dbg !5320

if.end32:                                         ; preds = %if.then29
  %49 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5321
  %50 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !5322
  %51 = load i32, i32* %band, align 4, !dbg !5323
  %52 = load i32, i32* %seg, align 4, !dbg !5324
  call void @chs_clear_band_data(%struct.DCAXllDecoder* %49, %struct.DCAXllChSet* %50, i32 %51, i32 %52), !dbg !5325
  br label %if.end33, !dbg !5326

if.end33:                                         ; preds = %if.end32, %land.lhs.true, %if.end24
  %53 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5327
  %gb34 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %53, i32 0, i32 1, !dbg !5328
  %54 = load i32, i32* %navi_pos, align 4, !dbg !5329
  %55 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5330
  %gb35 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %55, i32 0, i32 1, !dbg !5331
  %call36 = call i32 @get_bits_count(%struct.GetBitContext* %gb35), !dbg !5332
  %sub = sub nsw i32 %54, %call36, !dbg !5333
  call void @skip_bits_long(%struct.GetBitContext* %gb34, i32 %sub), !dbg !5334
  br label %if.end37, !dbg !5335

if.end37:                                         ; preds = %if.end33, %for.body17
  %56 = load i32*, i32** %navi_ptr, align 8, !dbg !5336
  %incdec.ptr38 = getelementptr inbounds i32, i32* %56, i32 1, !dbg !5336
  store i32* %incdec.ptr38, i32** %navi_ptr, align 8, !dbg !5336
  br label %for.inc39, !dbg !5337

for.inc39:                                        ; preds = %if.end37
  %57 = load i32, i32* %chs, align 4, !dbg !5338
  %inc40 = add nsw i32 %57, 1, !dbg !5338
  store i32 %inc40, i32* %chs, align 4, !dbg !5338
  %58 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c, align 8, !dbg !5340
  %incdec.ptr41 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %58, i32 1, !dbg !5340
  store %struct.DCAXllChSet* %incdec.ptr41, %struct.DCAXllChSet** %c, align 8, !dbg !5340
  br label %for.cond15, !dbg !5341, !llvm.loop !5342

for.end42:                                        ; preds = %for.cond15
  br label %for.inc43, !dbg !5344

for.inc43:                                        ; preds = %for.end42
  %59 = load i32, i32* %seg, align 4, !dbg !5345
  %inc44 = add nsw i32 %59, 1, !dbg !5345
  store i32 %inc44, i32* %seg, align 4, !dbg !5345
  br label %for.cond10, !dbg !5347, !llvm.loop !5348

for.end45:                                        ; preds = %for.cond10
  br label %for.inc46, !dbg !5350

for.inc46:                                        ; preds = %for.end45
  %60 = load i32, i32* %band, align 4, !dbg !5351
  %inc47 = add nsw i32 %60, 1, !dbg !5351
  store i32 %inc47, i32* %band, align 4, !dbg !5351
  br label %for.cond7, !dbg !5353, !llvm.loop !5354

for.end48:                                        ; preds = %for.cond7
  store i32 0, i32* %retval, align 4, !dbg !5356
  br label %return, !dbg !5356

return:                                           ; preds = %for.end48, %if.then31, %if.then23, %if.then4, %if.then
  %61 = load i32, i32* %retval, align 4, !dbg !5357
  ret i32 %61, !dbg !5357
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @ff_dca_seek_bits(%struct.GetBitContext* %s, i32 %p) #4 !dbg !5358 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.GetBitContext*, align 8
  %p.addr = alloca i32, align 4
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !5361, metadata !2040), !dbg !5362
  store i32 %p, i32* %p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %p.addr, metadata !5363, metadata !2040), !dbg !5364
  %0 = load i32, i32* %p.addr, align 4, !dbg !5365
  %1 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5367
  %call = call i32 @get_bits_count(%struct.GetBitContext* %1), !dbg !5368
  %cmp = icmp slt i32 %0, %call, !dbg !5369
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5370

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %p.addr, align 4, !dbg !5371
  %3 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5373
  %size_in_bits = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %3, i32 0, i32 3, !dbg !5374
  %4 = load i32, i32* %size_in_bits, align 4, !dbg !5374
  %cmp1 = icmp sgt i32 %2, %4, !dbg !5375
  br i1 %cmp1, label %if.then, label %if.end, !dbg !5376

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4, !dbg !5377
  br label %return, !dbg !5377

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5378
  %6 = load i32, i32* %p.addr, align 4, !dbg !5379
  %7 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5380
  %call2 = call i32 @get_bits_count(%struct.GetBitContext* %7), !dbg !5381
  %sub = sub nsw i32 %6, %call2, !dbg !5382
  call void @skip_bits_long(%struct.GetBitContext* %5, i32 %sub), !dbg !5383
  store i32 0, i32* %retval, align 4, !dbg !5385
  br label %return, !dbg !5385

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !5386
  ret i32 %8, !dbg !5386
}

declare void @av_log(i8*, i32, i8*, ...) #3

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @init_get_bits(%struct.GetBitContext* %s, i8* %buffer, i32 %bit_size) #4 !dbg !5387 {
entry:
  %s.addr = alloca %struct.GetBitContext*, align 8
  %buffer.addr = alloca i8*, align 8
  %bit_size.addr = alloca i32, align 4
  %buffer_size = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !5388, metadata !2040), !dbg !5389
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !5390, metadata !2040), !dbg !5391
  store i32 %bit_size, i32* %bit_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bit_size.addr, metadata !5392, metadata !2040), !dbg !5393
  call void @llvm.dbg.declare(metadata i32* %buffer_size, metadata !5394, metadata !2040), !dbg !5395
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !5396, metadata !2040), !dbg !5397
  store i32 0, i32* %ret, align 4, !dbg !5397
  %0 = load i32, i32* %bit_size.addr, align 4, !dbg !5398
  %cmp = icmp sge i32 %0, 2147483135, !dbg !5400
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5401

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %bit_size.addr, align 4, !dbg !5402
  %cmp1 = icmp slt i32 %1, 0, !dbg !5404
  br i1 %cmp1, label %if.then, label %lor.lhs.false2, !dbg !5405

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i8*, i8** %buffer.addr, align 8, !dbg !5406
  %tobool = icmp ne i8* %2, null, !dbg !5406
  br i1 %tobool, label %if.end, label %if.then, !dbg !5408

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %bit_size.addr, align 4, !dbg !5409
  store i8* null, i8** %buffer.addr, align 8, !dbg !5411
  store i32 -1094995529, i32* %ret, align 4, !dbg !5412
  br label %if.end, !dbg !5413

if.end:                                           ; preds = %if.then, %lor.lhs.false2
  %3 = load i32, i32* %bit_size.addr, align 4, !dbg !5414
  %add = add nsw i32 %3, 7, !dbg !5415
  %shr = ashr i32 %add, 3, !dbg !5416
  store i32 %shr, i32* %buffer_size, align 4, !dbg !5417
  %4 = load i8*, i8** %buffer.addr, align 8, !dbg !5418
  %5 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5419
  %buffer3 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %5, i32 0, i32 0, !dbg !5420
  store i8* %4, i8** %buffer3, align 8, !dbg !5421
  %6 = load i32, i32* %bit_size.addr, align 4, !dbg !5422
  %7 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5423
  %size_in_bits = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %7, i32 0, i32 3, !dbg !5424
  store i32 %6, i32* %size_in_bits, align 4, !dbg !5425
  %8 = load i32, i32* %bit_size.addr, align 4, !dbg !5426
  %add4 = add nsw i32 %8, 8, !dbg !5427
  %9 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5428
  %size_in_bits_plus8 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %9, i32 0, i32 4, !dbg !5429
  store i32 %add4, i32* %size_in_bits_plus8, align 8, !dbg !5430
  %10 = load i8*, i8** %buffer.addr, align 8, !dbg !5431
  %11 = load i32, i32* %buffer_size, align 4, !dbg !5432
  %idx.ext = sext i32 %11 to i64, !dbg !5433
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %idx.ext, !dbg !5433
  %12 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5434
  %buffer_end = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %12, i32 0, i32 1, !dbg !5435
  store i8* %add.ptr, i8** %buffer_end, align 8, !dbg !5436
  %13 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5437
  %index = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %13, i32 0, i32 2, !dbg !5438
  store i32 0, i32* %index, align 8, !dbg !5439
  %14 = load i32, i32* %ret, align 4, !dbg !5440
  ret i32 %14, !dbg !5441
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @get_bits_long(%struct.GetBitContext* %s, i32 %n) #4 !dbg !5442 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.GetBitContext*, align 8
  %n.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !5445, metadata !2040), !dbg !5446
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !5447, metadata !2040), !dbg !5448
  %0 = load i32, i32* %n.addr, align 4, !dbg !5449
  %tobool = icmp ne i32 %0, 0, !dbg !5449
  br i1 %tobool, label %if.else, label %if.then, !dbg !5451

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !5452
  br label %return, !dbg !5452

if.else:                                          ; preds = %entry
  %1 = load i32, i32* %n.addr, align 4, !dbg !5454
  %cmp = icmp sle i32 %1, 25, !dbg !5456
  br i1 %cmp, label %if.then1, label %if.else2, !dbg !5457

if.then1:                                         ; preds = %if.else
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5458
  %3 = load i32, i32* %n.addr, align 4, !dbg !5460
  %call = call i32 @get_bits(%struct.GetBitContext* %2, i32 %3), !dbg !5461
  store i32 %call, i32* %retval, align 4, !dbg !5462
  br label %return, !dbg !5462

if.else2:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !5463, metadata !2040), !dbg !5465
  %4 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5466
  %call3 = call i32 @get_bits(%struct.GetBitContext* %4, i32 16), !dbg !5467
  %5 = load i32, i32* %n.addr, align 4, !dbg !5468
  %sub = sub nsw i32 %5, 16, !dbg !5469
  %shl = shl i32 %call3, %sub, !dbg !5470
  store i32 %shl, i32* %ret, align 4, !dbg !5465
  %6 = load i32, i32* %ret, align 4, !dbg !5471
  %7 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5472
  %8 = load i32, i32* %n.addr, align 4, !dbg !5473
  %sub4 = sub nsw i32 %8, 16, !dbg !5474
  %call5 = call i32 @get_bits(%struct.GetBitContext* %7, i32 %sub4), !dbg !5475
  %or = or i32 %6, %call5, !dbg !5476
  store i32 %or, i32* %retval, align 4, !dbg !5477
  br label %return, !dbg !5477

return:                                           ; preds = %if.else2, %if.then1, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !5478
  ret i32 %9, !dbg !5478
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @get_bits(%struct.GetBitContext* %s, i32 %n) #4 !dbg !5479 {
entry:
  %x.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i, metadata !5480, metadata !2040), !dbg !5485
  %s.addr = alloca %struct.GetBitContext*, align 8
  %n.addr = alloca i32, align 4
  %tmp = alloca i32, align 4
  %re_index = alloca i32, align 4
  %re_cache = alloca i32, align 4
  %re_size_plus8 = alloca i32, align 4
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !5487, metadata !2040), !dbg !5488
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !5489, metadata !2040), !dbg !5490
  call void @llvm.dbg.declare(metadata i32* %tmp, metadata !5491, metadata !2040), !dbg !5492
  call void @llvm.dbg.declare(metadata i32* %re_index, metadata !5493, metadata !2040), !dbg !5494
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5495
  %index = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %0, i32 0, i32 2, !dbg !5496
  %1 = load i32, i32* %index, align 8, !dbg !5496
  store i32 %1, i32* %re_index, align 4, !dbg !5494
  call void @llvm.dbg.declare(metadata i32* %re_cache, metadata !5497, metadata !2040), !dbg !5498
  call void @llvm.dbg.declare(metadata i32* %re_size_plus8, metadata !5499, metadata !2040), !dbg !5500
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5501
  %size_in_bits_plus8 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %2, i32 0, i32 4, !dbg !5502
  %3 = load i32, i32* %size_in_bits_plus8, align 8, !dbg !5502
  store i32 %3, i32* %re_size_plus8, align 4, !dbg !5500
  %4 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5503
  %buffer = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %4, i32 0, i32 0, !dbg !5504
  %5 = load i8*, i8** %buffer, align 8, !dbg !5504
  %6 = load i32, i32* %re_index, align 4, !dbg !5505
  %shr = lshr i32 %6, 3, !dbg !5506
  %idx.ext = zext i32 %shr to i64, !dbg !5507
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %idx.ext, !dbg !5507
  %7 = bitcast i8* %add.ptr to %union.unaligned_32*, !dbg !5508
  %l = bitcast %union.unaligned_32* %7 to i32*, !dbg !5508
  %8 = load i32, i32* %l, align 1, !dbg !5508
  store i32 %8, i32* %x.addr.i, align 4, !dbg !5509
  %9 = load i32, i32* %x.addr.i, align 4, !dbg !5510
  %shl.i = shl i32 %9, 8, !dbg !5511
  %and.i = and i32 %shl.i, 65280, !dbg !5512
  %10 = load i32, i32* %x.addr.i, align 4, !dbg !5513
  %shr.i = lshr i32 %10, 8, !dbg !5514
  %and1.i = and i32 %shr.i, 255, !dbg !5515
  %or.i = or i32 %and.i, %and1.i, !dbg !5516
  %shl2.i = shl i32 %or.i, 16, !dbg !5517
  %11 = load i32, i32* %x.addr.i, align 4, !dbg !5518
  %shr3.i = lshr i32 %11, 16, !dbg !5519
  %shl4.i = shl i32 %shr3.i, 8, !dbg !5520
  %and5.i = and i32 %shl4.i, 65280, !dbg !5521
  %12 = load i32, i32* %x.addr.i, align 4, !dbg !5522
  %shr6.i = lshr i32 %12, 16, !dbg !5523
  %shr7.i = lshr i32 %shr6.i, 8, !dbg !5524
  %and8.i = and i32 %shr7.i, 255, !dbg !5525
  %or9.i = or i32 %and5.i, %and8.i, !dbg !5526
  %or10.i = or i32 %shl2.i, %or9.i, !dbg !5527
  %13 = load i32, i32* %re_index, align 4, !dbg !5528
  %and = and i32 %13, 7, !dbg !5529
  %shl = shl i32 %or10.i, %and, !dbg !5530
  store i32 %shl, i32* %re_cache, align 4, !dbg !5531
  %14 = load i32, i32* %re_cache, align 4, !dbg !5532
  %15 = load i32, i32* %n.addr, align 4, !dbg !5533
  %conv = trunc i32 %15 to i8, !dbg !5533
  %call4 = call i32 @NEG_USR32(i32 %14, i8 signext %conv), !dbg !5534
  store i32 %call4, i32* %tmp, align 4, !dbg !5535
  %16 = load i32, i32* %re_size_plus8, align 4, !dbg !5536
  %17 = load i32, i32* %re_index, align 4, !dbg !5537
  %18 = load i32, i32* %n.addr, align 4, !dbg !5538
  %add = add i32 %17, %18, !dbg !5539
  %cmp = icmp ugt i32 %16, %add, !dbg !5540
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5541

cond.true:                                        ; preds = %entry
  %19 = load i32, i32* %re_index, align 4, !dbg !5542
  %20 = load i32, i32* %n.addr, align 4, !dbg !5544
  %add6 = add i32 %19, %20, !dbg !5545
  br label %cond.end, !dbg !5546

cond.false:                                       ; preds = %entry
  %21 = load i32, i32* %re_size_plus8, align 4, !dbg !5547
  br label %cond.end, !dbg !5549

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add6, %cond.true ], [ %21, %cond.false ], !dbg !5550
  store i32 %cond, i32* %re_index, align 4, !dbg !5552
  %22 = load i32, i32* %re_index, align 4, !dbg !5553
  %23 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5554
  %index7 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %23, i32 0, i32 2, !dbg !5555
  store i32 %22, i32* %index7, align 8, !dbg !5556
  %24 = load i32, i32* %tmp, align 4, !dbg !5557
  ret i32 %24, !dbg !5558
}

declare void @avpriv_request_sample(i8*, i8*, ...) #3

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @ff_dca_check_crc(%struct.AVCodecContext* %avctx, %struct.GetBitContext* %s, i32 %p1, i32 %p2) #4 !dbg !5559 {
entry:
  %retval = alloca i32, align 4
  %avctx.addr = alloca %struct.AVCodecContext*, align 8
  %s.addr = alloca %struct.GetBitContext*, align 8
  %p1.addr = alloca i32, align 4
  %p2.addr = alloca i32, align 4
  %dca = alloca %struct.DCAContext*, align 8
  store %struct.AVCodecContext* %avctx, %struct.AVCodecContext** %avctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVCodecContext** %avctx.addr, metadata !5562, metadata !2040), !dbg !5563
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !5564, metadata !2040), !dbg !5565
  store i32 %p1, i32* %p1.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %p1.addr, metadata !5566, metadata !2040), !dbg !5567
  store i32 %p2, i32* %p2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %p2.addr, metadata !5568, metadata !2040), !dbg !5569
  call void @llvm.dbg.declare(metadata %struct.DCAContext** %dca, metadata !5570, metadata !2040), !dbg !5571
  %0 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx.addr, align 8, !dbg !5572
  %priv_data = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i32 0, i32 6, !dbg !5573
  %1 = load i8*, i8** %priv_data, align 8, !dbg !5573
  %2 = bitcast i8* %1 to %struct.DCAContext*, !dbg !5572
  store %struct.DCAContext* %2, %struct.DCAContext** %dca, align 8, !dbg !5571
  %3 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx.addr, align 8, !dbg !5574
  %err_recognition = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %3, i32 0, i32 135, !dbg !5576
  %4 = load i32, i32* %err_recognition, align 8, !dbg !5576
  %and = and i32 %4, 65537, !dbg !5577
  %tobool = icmp ne i32 %and, 0, !dbg !5577
  br i1 %tobool, label %if.end, label %if.then, !dbg !5578

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !5579
  br label %return, !dbg !5579

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %p1.addr, align 4, !dbg !5580
  %6 = load i32, i32* %p2.addr, align 4, !dbg !5582
  %or = or i32 %5, %6, !dbg !5583
  %and1 = and i32 %or, 7, !dbg !5584
  %tobool2 = icmp ne i32 %and1, 0, !dbg !5584
  br i1 %tobool2, label %if.then7, label %lor.lhs.false, !dbg !5585

lor.lhs.false:                                    ; preds = %if.end
  %7 = load i32, i32* %p1.addr, align 4, !dbg !5586
  %cmp = icmp slt i32 %7, 0, !dbg !5588
  br i1 %cmp, label %if.then7, label %lor.lhs.false3, !dbg !5589

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %8 = load i32, i32* %p2.addr, align 4, !dbg !5590
  %9 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5592
  %size_in_bits = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %9, i32 0, i32 3, !dbg !5593
  %10 = load i32, i32* %size_in_bits, align 4, !dbg !5593
  %cmp4 = icmp sgt i32 %8, %10, !dbg !5594
  br i1 %cmp4, label %if.then7, label %lor.lhs.false5, !dbg !5595

lor.lhs.false5:                                   ; preds = %lor.lhs.false3
  %11 = load i32, i32* %p2.addr, align 4, !dbg !5596
  %12 = load i32, i32* %p1.addr, align 4, !dbg !5598
  %sub = sub nsw i32 %11, %12, !dbg !5599
  %cmp6 = icmp slt i32 %sub, 16, !dbg !5600
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !5601

if.then7:                                         ; preds = %lor.lhs.false5, %lor.lhs.false3, %lor.lhs.false, %if.end
  store i32 -1, i32* %retval, align 4, !dbg !5602
  br label %return, !dbg !5602

if.end8:                                          ; preds = %lor.lhs.false5
  %13 = load %struct.DCAContext*, %struct.DCAContext** %dca, align 8, !dbg !5603
  %crctab = getelementptr inbounds %struct.DCAContext, %struct.DCAContext* %13, i32 0, i32 9, !dbg !5605
  %14 = load i32*, i32** %crctab, align 32, !dbg !5605
  %15 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5606
  %buffer = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %15, i32 0, i32 0, !dbg !5607
  %16 = load i8*, i8** %buffer, align 8, !dbg !5607
  %17 = load i32, i32* %p1.addr, align 4, !dbg !5608
  %div = sdiv i32 %17, 8, !dbg !5609
  %idx.ext = sext i32 %div to i64, !dbg !5610
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 %idx.ext, !dbg !5610
  %18 = load i32, i32* %p2.addr, align 4, !dbg !5611
  %19 = load i32, i32* %p1.addr, align 4, !dbg !5612
  %sub9 = sub nsw i32 %18, %19, !dbg !5613
  %div10 = sdiv i32 %sub9, 8, !dbg !5614
  %conv = sext i32 %div10 to i64, !dbg !5615
  %call = call i32 @av_crc(i32* %14, i32 65535, i8* %add.ptr, i64 %conv) #8, !dbg !5616
  %tobool11 = icmp ne i32 %call, 0, !dbg !5616
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !5617

if.then12:                                        ; preds = %if.end8
  store i32 -1, i32* %retval, align 4, !dbg !5618
  br label %return, !dbg !5618

if.end13:                                         ; preds = %if.end8
  store i32 0, i32* %retval, align 4, !dbg !5619
  br label %return, !dbg !5619

return:                                           ; preds = %if.end13, %if.then12, %if.then7, %if.then
  %20 = load i32, i32* %retval, align 4, !dbg !5620
  ret i32 %20, !dbg !5620
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @get_bits1(%struct.GetBitContext* %s) #4 !dbg !5621 {
entry:
  %s.addr = alloca %struct.GetBitContext*, align 8
  %index = alloca i32, align 4
  %result = alloca i8, align 1
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !5624, metadata !2040), !dbg !5625
  call void @llvm.dbg.declare(metadata i32* %index, metadata !5626, metadata !2040), !dbg !5627
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5628
  %index1 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %0, i32 0, i32 2, !dbg !5629
  %1 = load i32, i32* %index1, align 8, !dbg !5629
  store i32 %1, i32* %index, align 4, !dbg !5627
  call void @llvm.dbg.declare(metadata i8* %result, metadata !5630, metadata !2040), !dbg !5631
  %2 = load i32, i32* %index, align 4, !dbg !5632
  %shr = lshr i32 %2, 3, !dbg !5633
  %idxprom = zext i32 %shr to i64, !dbg !5634
  %3 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5634
  %buffer = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %3, i32 0, i32 0, !dbg !5635
  %4 = load i8*, i8** %buffer, align 8, !dbg !5635
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !5634
  %5 = load i8, i8* %arrayidx, align 1, !dbg !5634
  store i8 %5, i8* %result, align 1, !dbg !5631
  %6 = load i32, i32* %index, align 4, !dbg !5636
  %and = and i32 %6, 7, !dbg !5637
  %7 = load i8, i8* %result, align 1, !dbg !5638
  %conv = zext i8 %7 to i32, !dbg !5638
  %shl = shl i32 %conv, %and, !dbg !5638
  %conv2 = trunc i32 %shl to i8, !dbg !5638
  store i8 %conv2, i8* %result, align 1, !dbg !5638
  %8 = load i8, i8* %result, align 1, !dbg !5639
  %conv3 = zext i8 %8 to i32, !dbg !5639
  %shr4 = ashr i32 %conv3, 7, !dbg !5639
  %conv5 = trunc i32 %shr4 to i8, !dbg !5639
  store i8 %conv5, i8* %result, align 1, !dbg !5639
  %9 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5640
  %index6 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %9, i32 0, i32 2, !dbg !5642
  %10 = load i32, i32* %index6, align 8, !dbg !5642
  %11 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5643
  %size_in_bits_plus8 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %11, i32 0, i32 4, !dbg !5644
  %12 = load i32, i32* %size_in_bits_plus8, align 8, !dbg !5644
  %cmp = icmp slt i32 %10, %12, !dbg !5645
  br i1 %cmp, label %if.then, label %if.end, !dbg !5646

if.then:                                          ; preds = %entry
  %13 = load i32, i32* %index, align 4, !dbg !5647
  %inc = add i32 %13, 1, !dbg !5647
  store i32 %inc, i32* %index, align 4, !dbg !5647
  br label %if.end, !dbg !5648

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %index, align 4, !dbg !5649
  %15 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !5650
  %index8 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %15, i32 0, i32 2, !dbg !5651
  store i32 %14, i32* %index8, align 8, !dbg !5652
  %16 = load i8, i8* %result, align 1, !dbg !5653
  %conv9 = zext i8 %16 to i32, !dbg !5653
  ret i32 %conv9, !dbg !5654
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @NEG_USR32(i32 %a, i8 signext %s) #4 !dbg !5655 {
entry:
  %a.addr = alloca i32, align 4
  %s.addr = alloca i8, align 1
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !5659, metadata !2040), !dbg !5660
  store i8 %s, i8* %s.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %s.addr, metadata !5661, metadata !2040), !dbg !5662
  %0 = load i32, i32* %a.addr, align 4, !dbg !5663
  %1 = load i8, i8* %s.addr, align 1, !dbg !5664
  %conv = sext i8 %1 to i32, !dbg !5664
  %sub = sub nsw i32 0, %conv, !dbg !5665
  %conv1 = trunc i32 %sub to i8, !dbg !5666
  %2 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %conv1, i32 %0) #1, !dbg !5663, !srcloc !5667
  store i32 %2, i32* %a.addr, align 4, !dbg !5663
  %3 = load i32, i32* %a.addr, align 4, !dbg !5668
  ret i32 %3, !dbg !5669
}

; Function Attrs: nounwind readonly
declare i32 @av_crc(i32*, i32, i8*, i64) #6

; Function Attrs: nounwind uwtable
define internal i32 @chs_parse_header(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %c, %struct.DCAExssAsset* %asset) #0 !dbg !5670 {
entry:
  %x.addr.i542 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i542, metadata !5673, metadata !2040), !dbg !5677
  %x.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i, metadata !5684, metadata !2040), !dbg !5688
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  %asset.addr = alloca %struct.DCAExssAsset*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %ret = alloca i32, align 4
  %band = alloca i32, align 4
  %header_size = alloca i32, align 4
  %header_pos = alloca i32, align 4
  %p = alloca %struct.DCAXllChSet*, align 8
  %b = alloca %struct.DCAXllBand*, align 8
  %ch_nbits = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !5693, metadata !2040), !dbg !5694
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !5695, metadata !2040), !dbg !5696
  store %struct.DCAExssAsset* %asset, %struct.DCAExssAsset** %asset.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAExssAsset** %asset.addr, metadata !5697, metadata !2040), !dbg !5698
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5699, metadata !2040), !dbg !5700
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5701, metadata !2040), !dbg !5702
  call void @llvm.dbg.declare(metadata i32* %k, metadata !5703, metadata !2040), !dbg !5704
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !5705, metadata !2040), !dbg !5706
  call void @llvm.dbg.declare(metadata i32* %band, metadata !5707, metadata !2040), !dbg !5708
  call void @llvm.dbg.declare(metadata i32* %header_size, metadata !5709, metadata !2040), !dbg !5710
  call void @llvm.dbg.declare(metadata i32* %header_pos, metadata !5711, metadata !2040), !dbg !5712
  %0 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5713
  %gb = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %0, i32 0, i32 1, !dbg !5714
  %call = call i32 @get_bits_count(%struct.GetBitContext* %gb), !dbg !5715
  store i32 %call, i32* %header_pos, align 4, !dbg !5712
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %p, metadata !5716, metadata !2040), !dbg !5717
  %1 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5718
  %chset = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %1, i32 0, i32 15, !dbg !5719
  %arrayidx = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset, i64 0, i64 0, !dbg !5718
  store %struct.DCAXllChSet* %arrayidx, %struct.DCAXllChSet** %p, align 8, !dbg !5717
  call void @llvm.dbg.declare(metadata %struct.DCAXllBand** %b, metadata !5720, metadata !2040), !dbg !5721
  %2 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5722
  %gb1 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %2, i32 0, i32 1, !dbg !5723
  %call2 = call i32 @get_bits(%struct.GetBitContext* %gb1, i32 10), !dbg !5724
  %add = add i32 %call2, 1, !dbg !5725
  store i32 %add, i32* %header_size, align 4, !dbg !5726
  %3 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5727
  %avctx = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %3, i32 0, i32 0, !dbg !5729
  %4 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 32, !dbg !5729
  %5 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5730
  %gb3 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %5, i32 0, i32 1, !dbg !5731
  %6 = load i32, i32* %header_pos, align 4, !dbg !5732
  %7 = load i32, i32* %header_pos, align 4, !dbg !5733
  %8 = load i32, i32* %header_size, align 4, !dbg !5734
  %mul = mul nsw i32 %8, 8, !dbg !5735
  %add4 = add nsw i32 %7, %mul, !dbg !5736
  %call5 = call i32 @ff_dca_check_crc(%struct.AVCodecContext* %4, %struct.GetBitContext* %gb3, i32 %6, i32 %add4), !dbg !5737
  %tobool = icmp ne i32 %call5, 0, !dbg !5737
  br i1 %tobool, label %if.then, label %if.end, !dbg !5738

if.then:                                          ; preds = %entry
  %9 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5739
  %avctx6 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %9, i32 0, i32 0, !dbg !5741
  %10 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx6, align 32, !dbg !5741
  %11 = bitcast %struct.AVCodecContext* %10 to i8*, !dbg !5739
  call void (i8*, i32, i8*, ...) @av_log(i8* %11, i32 16, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.11, i32 0, i32 0)), !dbg !5742
  store i32 -1094995529, i32* %retval, align 4, !dbg !5743
  br label %return, !dbg !5743

if.end:                                           ; preds = %entry
  %12 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5744
  %gb7 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %12, i32 0, i32 1, !dbg !5745
  %call8 = call i32 @get_bits(%struct.GetBitContext* %gb7, i32 4), !dbg !5746
  %add9 = add i32 %call8, 1, !dbg !5747
  %13 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5748
  %nchannels = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %13, i32 0, i32 0, !dbg !5749
  store i32 %add9, i32* %nchannels, align 32, !dbg !5750
  %14 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5751
  %nchannels10 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %14, i32 0, i32 0, !dbg !5753
  %15 = load i32, i32* %nchannels10, align 32, !dbg !5753
  %cmp = icmp sgt i32 %15, 8, !dbg !5754
  br i1 %cmp, label %if.then11, label %if.end14, !dbg !5755

if.then11:                                        ; preds = %if.end
  %16 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5756
  %avctx12 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %16, i32 0, i32 0, !dbg !5758
  %17 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx12, align 32, !dbg !5758
  %18 = bitcast %struct.AVCodecContext* %17 to i8*, !dbg !5756
  %19 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5759
  %nchannels13 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %19, i32 0, i32 0, !dbg !5760
  %20 = load i32, i32* %nchannels13, align 32, !dbg !5760
  call void (i8*, i8*, ...) @avpriv_request_sample(i8* %18, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i32 0, i32 0), i32 %20), !dbg !5761
  store i32 -1163346256, i32* %retval, align 4, !dbg !5762
  br label %return, !dbg !5762

if.end14:                                         ; preds = %if.end
  %21 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5763
  %gb15 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %21, i32 0, i32 1, !dbg !5764
  %22 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5765
  %nchannels16 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %22, i32 0, i32 0, !dbg !5766
  %23 = load i32, i32* %nchannels16, align 32, !dbg !5766
  %call17 = call i32 @get_bits(%struct.GetBitContext* %gb15, i32 %23), !dbg !5767
  %24 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5768
  %residual_encode = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %24, i32 0, i32 1, !dbg !5769
  store i32 %call17, i32* %residual_encode, align 4, !dbg !5770
  %25 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5771
  %gb18 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %25, i32 0, i32 1, !dbg !5772
  %call19 = call i32 @get_bits(%struct.GetBitContext* %gb18, i32 5), !dbg !5773
  %add20 = add i32 %call19, 1, !dbg !5774
  %26 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5775
  %pcm_bit_res = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %26, i32 0, i32 2, !dbg !5776
  store i32 %add20, i32* %pcm_bit_res, align 8, !dbg !5777
  %27 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5778
  %gb21 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %27, i32 0, i32 1, !dbg !5779
  %call22 = call i32 @get_bits(%struct.GetBitContext* %gb21, i32 5), !dbg !5780
  %add23 = add i32 %call22, 1, !dbg !5781
  %28 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5782
  %storage_bit_res = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %28, i32 0, i32 3, !dbg !5783
  store i32 %add23, i32* %storage_bit_res, align 4, !dbg !5784
  %29 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5785
  %storage_bit_res24 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %29, i32 0, i32 3, !dbg !5787
  %30 = load i32, i32* %storage_bit_res24, align 4, !dbg !5787
  %cmp25 = icmp ne i32 %30, 16, !dbg !5788
  br i1 %cmp25, label %land.lhs.true, label %if.end34, !dbg !5789

land.lhs.true:                                    ; preds = %if.end14
  %31 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5790
  %storage_bit_res26 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %31, i32 0, i32 3, !dbg !5792
  %32 = load i32, i32* %storage_bit_res26, align 4, !dbg !5792
  %cmp27 = icmp ne i32 %32, 20, !dbg !5793
  br i1 %cmp27, label %land.lhs.true28, label %if.end34, !dbg !5794

land.lhs.true28:                                  ; preds = %land.lhs.true
  %33 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5795
  %storage_bit_res29 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %33, i32 0, i32 3, !dbg !5797
  %34 = load i32, i32* %storage_bit_res29, align 4, !dbg !5797
  %cmp30 = icmp ne i32 %34, 24, !dbg !5798
  br i1 %cmp30, label %if.then31, label %if.end34, !dbg !5799

if.then31:                                        ; preds = %land.lhs.true28
  %35 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5800
  %avctx32 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %35, i32 0, i32 0, !dbg !5802
  %36 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx32, align 32, !dbg !5802
  %37 = bitcast %struct.AVCodecContext* %36 to i8*, !dbg !5800
  %38 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5803
  %storage_bit_res33 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %38, i32 0, i32 3, !dbg !5804
  %39 = load i32, i32* %storage_bit_res33, align 4, !dbg !5804
  call void (i8*, i8*, ...) @avpriv_request_sample(i8* %37, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i32 0, i32 0), i32 %39), !dbg !5805
  store i32 -1163346256, i32* %retval, align 4, !dbg !5806
  br label %return, !dbg !5806

if.end34:                                         ; preds = %land.lhs.true28, %land.lhs.true, %if.end14
  %40 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5807
  %pcm_bit_res35 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %40, i32 0, i32 2, !dbg !5809
  %41 = load i32, i32* %pcm_bit_res35, align 8, !dbg !5809
  %42 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5810
  %storage_bit_res36 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %42, i32 0, i32 3, !dbg !5811
  %43 = load i32, i32* %storage_bit_res36, align 4, !dbg !5811
  %cmp37 = icmp sgt i32 %41, %43, !dbg !5812
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !5813

if.then38:                                        ; preds = %if.end34
  %44 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5814
  %avctx39 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %44, i32 0, i32 0, !dbg !5816
  %45 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx39, align 32, !dbg !5816
  %46 = bitcast %struct.AVCodecContext* %45 to i8*, !dbg !5814
  %47 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5817
  %pcm_bit_res40 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %47, i32 0, i32 2, !dbg !5818
  %48 = load i32, i32* %pcm_bit_res40, align 8, !dbg !5818
  %49 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5819
  %storage_bit_res41 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %49, i32 0, i32 3, !dbg !5820
  %50 = load i32, i32* %storage_bit_res41, align 4, !dbg !5820
  call void (i8*, i32, i8*, ...) @av_log(i8* %46, i32 16, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.14, i32 0, i32 0), i32 %48, i32 %50), !dbg !5821
  store i32 -1094995529, i32* %retval, align 4, !dbg !5822
  br label %return, !dbg !5822

if.end42:                                         ; preds = %if.end34
  %51 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5823
  %gb43 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %51, i32 0, i32 1, !dbg !5824
  %call44 = call i32 @get_bits(%struct.GetBitContext* %gb43, i32 4), !dbg !5825
  %idxprom = zext i32 %call44 to i64, !dbg !5826
  %arrayidx45 = getelementptr inbounds [16 x i32], [16 x i32]* @ff_dca_sampling_freqs, i64 0, i64 %idxprom, !dbg !5826
  %52 = load i32, i32* %arrayidx45, align 4, !dbg !5826
  %53 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5827
  %freq = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %53, i32 0, i32 4, !dbg !5828
  store i32 %52, i32* %freq, align 16, !dbg !5829
  %54 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5830
  %freq46 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %54, i32 0, i32 4, !dbg !5832
  %55 = load i32, i32* %freq46, align 16, !dbg !5832
  %cmp47 = icmp sgt i32 %55, 192000, !dbg !5833
  br i1 %cmp47, label %if.then48, label %if.end51, !dbg !5834

if.then48:                                        ; preds = %if.end42
  %56 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5835
  %avctx49 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %56, i32 0, i32 0, !dbg !5837
  %57 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx49, align 32, !dbg !5837
  %58 = bitcast %struct.AVCodecContext* %57 to i8*, !dbg !5835
  %59 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5838
  %freq50 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %59, i32 0, i32 4, !dbg !5839
  %60 = load i32, i32* %freq50, align 16, !dbg !5839
  call void (i8*, i8*, ...) @avpriv_request_sample(i8* %58, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i32 0, i32 0), i32 %60), !dbg !5840
  store i32 -1163346256, i32* %retval, align 4, !dbg !5841
  br label %return, !dbg !5841

if.end51:                                         ; preds = %if.end42
  %61 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5842
  %gb52 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %61, i32 0, i32 1, !dbg !5844
  %call53 = call i32 @get_bits(%struct.GetBitContext* %gb52, i32 2), !dbg !5845
  %tobool54 = icmp ne i32 %call53, 0, !dbg !5845
  br i1 %tobool54, label %if.then55, label %if.end57, !dbg !5846

if.then55:                                        ; preds = %if.end51
  %62 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5847
  %avctx56 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %62, i32 0, i32 0, !dbg !5849
  %63 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx56, align 32, !dbg !5849
  %64 = bitcast %struct.AVCodecContext* %63 to i8*, !dbg !5847
  call void (i8*, i8*, ...) @avpriv_request_sample(i8* %64, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.16, i32 0, i32 0)), !dbg !5850
  store i32 -1163346256, i32* %retval, align 4, !dbg !5851
  br label %return, !dbg !5851

if.end57:                                         ; preds = %if.end51
  %65 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5852
  %gb58 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %65, i32 0, i32 1, !dbg !5854
  %call59 = call i32 @get_bits(%struct.GetBitContext* %gb58, i32 2), !dbg !5855
  %tobool60 = icmp ne i32 %call59, 0, !dbg !5855
  br i1 %tobool60, label %if.then61, label %if.end63, !dbg !5856

if.then61:                                        ; preds = %if.end57
  %66 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5857
  %avctx62 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %66, i32 0, i32 0, !dbg !5859
  %67 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx62, align 32, !dbg !5859
  %68 = bitcast %struct.AVCodecContext* %67 to i8*, !dbg !5857
  call void (i8*, i8*, ...) @avpriv_request_sample(i8* %68, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.17, i32 0, i32 0)), !dbg !5860
  store i32 -1163346256, i32* %retval, align 4, !dbg !5861
  br label %return, !dbg !5861

if.end63:                                         ; preds = %if.end57
  %69 = load %struct.DCAExssAsset*, %struct.DCAExssAsset** %asset.addr, align 8, !dbg !5862
  %one_to_one_map_ch_to_spkr = getelementptr inbounds %struct.DCAExssAsset, %struct.DCAExssAsset* %69, i32 0, i32 6, !dbg !5863
  %70 = load i32, i32* %one_to_one_map_ch_to_spkr, align 4, !dbg !5863
  %tobool64 = icmp ne i32 %70, 0, !dbg !5862
  br i1 %tobool64, label %if.then65, label %if.else, !dbg !5864

if.then65:                                        ; preds = %if.end63
  %71 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5865
  %gb66 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %71, i32 0, i32 1, !dbg !5866
  %call67 = call i32 @get_bits1(%struct.GetBitContext* %gb66), !dbg !5867
  %72 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5868
  %primary_chset = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %72, i32 0, i32 5, !dbg !5869
  store i32 %call67, i32* %primary_chset, align 4, !dbg !5870
  %73 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5871
  %primary_chset68 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %73, i32 0, i32 5, !dbg !5873
  %74 = load i32, i32* %primary_chset68, align 4, !dbg !5873
  %75 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5874
  %76 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !5875
  %cmp69 = icmp eq %struct.DCAXllChSet* %75, %76, !dbg !5876
  %conv = zext i1 %cmp69 to i32, !dbg !5876
  %cmp70 = icmp ne i32 %74, %conv, !dbg !5877
  br i1 %cmp70, label %if.then72, label %if.end74, !dbg !5878

if.then72:                                        ; preds = %if.then65
  %77 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5879
  %avctx73 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %77, i32 0, i32 0, !dbg !5881
  %78 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx73, align 32, !dbg !5881
  %79 = bitcast %struct.AVCodecContext* %78 to i8*, !dbg !5879
  call void (i8*, i32, i8*, ...) @av_log(i8* %79, i32 16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.18, i32 0, i32 0)), !dbg !5882
  store i32 -1094995529, i32* %retval, align 4, !dbg !5883
  br label %return, !dbg !5883

if.end74:                                         ; preds = %if.then65
  %80 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5884
  %gb75 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %80, i32 0, i32 1, !dbg !5885
  %call76 = call i32 @get_bits1(%struct.GetBitContext* %gb75), !dbg !5886
  %81 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5887
  %dmix_coeffs_present = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %81, i32 0, i32 6, !dbg !5888
  store i32 %call76, i32* %dmix_coeffs_present, align 8, !dbg !5889
  %82 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5890
  %dmix_coeffs_present77 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %82, i32 0, i32 6, !dbg !5891
  %83 = load i32, i32* %dmix_coeffs_present77, align 8, !dbg !5891
  %tobool78 = icmp ne i32 %83, 0, !dbg !5890
  br i1 %tobool78, label %land.rhs, label %land.end, !dbg !5892

land.rhs:                                         ; preds = %if.end74
  %84 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5893
  %gb79 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %84, i32 0, i32 1, !dbg !5895
  %call80 = call i32 @get_bits1(%struct.GetBitContext* %gb79), !dbg !5896
  %tobool81 = icmp ne i32 %call80, 0, !dbg !5897
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end74
  %85 = phi i1 [ false, %if.end74 ], [ %tobool81, %land.rhs ]
  %land.ext = zext i1 %85 to i32, !dbg !5898
  %86 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5900
  %dmix_embedded = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %86, i32 0, i32 7, !dbg !5901
  store i32 %land.ext, i32* %dmix_embedded, align 4, !dbg !5902
  %87 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5903
  %dmix_coeffs_present82 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %87, i32 0, i32 6, !dbg !5905
  %88 = load i32, i32* %dmix_coeffs_present82, align 8, !dbg !5905
  %tobool83 = icmp ne i32 %88, 0, !dbg !5903
  br i1 %tobool83, label %land.lhs.true84, label %if.end96, !dbg !5906

land.lhs.true84:                                  ; preds = %land.end
  %89 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5907
  %primary_chset85 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %89, i32 0, i32 5, !dbg !5909
  %90 = load i32, i32* %primary_chset85, align 4, !dbg !5909
  %tobool86 = icmp ne i32 %90, 0, !dbg !5907
  br i1 %tobool86, label %if.then87, label %if.end96, !dbg !5910

if.then87:                                        ; preds = %land.lhs.true84
  %91 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5911
  %gb88 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %91, i32 0, i32 1, !dbg !5913
  %call89 = call i32 @get_bits(%struct.GetBitContext* %gb88, i32 3), !dbg !5914
  %92 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5915
  %dmix_type = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %92, i32 0, i32 8, !dbg !5916
  store i32 %call89, i32* %dmix_type, align 32, !dbg !5917
  %93 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5918
  %dmix_type90 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %93, i32 0, i32 8, !dbg !5920
  %94 = load i32, i32* %dmix_type90, align 32, !dbg !5920
  %cmp91 = icmp sge i32 %94, 7, !dbg !5921
  br i1 %cmp91, label %if.then93, label %if.end95, !dbg !5922

if.then93:                                        ; preds = %if.then87
  %95 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5923
  %avctx94 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %95, i32 0, i32 0, !dbg !5925
  %96 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx94, align 32, !dbg !5925
  %97 = bitcast %struct.AVCodecContext* %96 to i8*, !dbg !5923
  call void (i8*, i32, i8*, ...) @av_log(i8* %97, i32 16, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.19, i32 0, i32 0)), !dbg !5926
  store i32 -1094995529, i32* %retval, align 4, !dbg !5927
  br label %return, !dbg !5927

if.end95:                                         ; preds = %if.then87
  br label %if.end96, !dbg !5928

if.end96:                                         ; preds = %if.end95, %land.lhs.true84, %land.end
  %98 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5929
  %gb97 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %98, i32 0, i32 1, !dbg !5930
  %call98 = call i32 @get_bits1(%struct.GetBitContext* %gb97), !dbg !5931
  %99 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5932
  %hier_chset = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %99, i32 0, i32 9, !dbg !5933
  store i32 %call98, i32* %hier_chset, align 4, !dbg !5934
  %100 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5935
  %hier_chset99 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %100, i32 0, i32 9, !dbg !5937
  %101 = load i32, i32* %hier_chset99, align 4, !dbg !5937
  %tobool100 = icmp ne i32 %101, 0, !dbg !5935
  br i1 %tobool100, label %if.end106, label %land.lhs.true101, !dbg !5938

land.lhs.true101:                                 ; preds = %if.end96
  %102 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5939
  %nchsets = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %102, i32 0, i32 3, !dbg !5941
  %103 = load i32, i32* %nchsets, align 4, !dbg !5941
  %cmp102 = icmp ne i32 %103, 1, !dbg !5942
  br i1 %cmp102, label %if.then104, label %if.end106, !dbg !5943

if.then104:                                       ; preds = %land.lhs.true101
  %104 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5944
  %avctx105 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %104, i32 0, i32 0, !dbg !5946
  %105 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx105, align 32, !dbg !5946
  %106 = bitcast %struct.AVCodecContext* %105 to i8*, !dbg !5944
  call void (i8*, i8*, ...) @avpriv_request_sample(i8* %106, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.20, i32 0, i32 0)), !dbg !5947
  store i32 -1163346256, i32* %retval, align 4, !dbg !5948
  br label %return, !dbg !5948

if.end106:                                        ; preds = %land.lhs.true101, %if.end96
  %107 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5949
  %dmix_coeffs_present107 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %107, i32 0, i32 6, !dbg !5951
  %108 = load i32, i32* %dmix_coeffs_present107, align 8, !dbg !5951
  %tobool108 = icmp ne i32 %108, 0, !dbg !5949
  br i1 %tobool108, label %land.lhs.true109, label %if.end114, !dbg !5952

land.lhs.true109:                                 ; preds = %if.end106
  %109 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5953
  %110 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5955
  %call110 = call i32 @parse_dmix_coeffs(%struct.DCAXllDecoder* %109, %struct.DCAXllChSet* %110), !dbg !5956
  store i32 %call110, i32* %ret, align 4, !dbg !5957
  %cmp111 = icmp slt i32 %call110, 0, !dbg !5958
  br i1 %cmp111, label %if.then113, label %if.end114, !dbg !5959

if.then113:                                       ; preds = %land.lhs.true109
  %111 = load i32, i32* %ret, align 4, !dbg !5960
  store i32 %111, i32* %retval, align 4, !dbg !5961
  br label %return, !dbg !5961

if.end114:                                        ; preds = %land.lhs.true109, %if.end106
  %112 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5962
  %gb115 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %112, i32 0, i32 1, !dbg !5964
  %call116 = call i32 @get_bits1(%struct.GetBitContext* %gb115), !dbg !5965
  %tobool117 = icmp ne i32 %call116, 0, !dbg !5965
  br i1 %tobool117, label %if.end120, label %if.then118, !dbg !5966

if.then118:                                       ; preds = %if.end114
  %113 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5967
  %avctx119 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %113, i32 0, i32 0, !dbg !5969
  %114 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx119, align 32, !dbg !5969
  %115 = bitcast %struct.AVCodecContext* %114 to i8*, !dbg !5967
  call void (i8*, i8*, ...) @avpriv_request_sample(i8* %115, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i32 0, i32 0)), !dbg !5970
  store i32 -1163346256, i32* %retval, align 4, !dbg !5971
  br label %return, !dbg !5971

if.end120:                                        ; preds = %if.end114
  %116 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5972
  %gb121 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %116, i32 0, i32 1, !dbg !5973
  %117 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !5974
  %ch_mask_nbits = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %117, i32 0, i32 12, !dbg !5975
  %118 = load i32, i32* %ch_mask_nbits, align 16, !dbg !5975
  %call122 = call i32 @get_bits_long(%struct.GetBitContext* %gb121, i32 %118), !dbg !5976
  %119 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5977
  %ch_mask = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %119, i32 0, i32 14, !dbg !5978
  store i32 %call122, i32* %ch_mask, align 4, !dbg !5979
  %120 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !5980
  %ch_mask123 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %120, i32 0, i32 14, !dbg !5981
  %121 = load i32, i32* %ch_mask123, align 4, !dbg !5981
  store i32 %121, i32* %x.addr.i, align 4, !dbg !5982
  %122 = load i32, i32* %x.addr.i, align 4, !dbg !5983
  %shr.i = lshr i32 %122, 1, !dbg !5984
  %and.i = and i32 %shr.i, 1431655765, !dbg !5985
  %123 = load i32, i32* %x.addr.i, align 4, !dbg !5986
  %sub.i = sub i32 %123, %and.i, !dbg !5986
  store i32 %sub.i, i32* %x.addr.i, align 4, !dbg !5986
  %124 = load i32, i32* %x.addr.i, align 4, !dbg !5987
  %and1.i = and i32 %124, 858993459, !dbg !5988
  %125 = load i32, i32* %x.addr.i, align 4, !dbg !5989
  %shr2.i = lshr i32 %125, 2, !dbg !5990
  %and3.i = and i32 %shr2.i, 858993459, !dbg !5991
  %add.i = add i32 %and1.i, %and3.i, !dbg !5992
  store i32 %add.i, i32* %x.addr.i, align 4, !dbg !5993
  %126 = load i32, i32* %x.addr.i, align 4, !dbg !5994
  %127 = load i32, i32* %x.addr.i, align 4, !dbg !5995
  %shr4.i = lshr i32 %127, 4, !dbg !5996
  %add5.i = add i32 %126, %shr4.i, !dbg !5997
  %and6.i = and i32 %add5.i, 252645135, !dbg !5998
  store i32 %and6.i, i32* %x.addr.i, align 4, !dbg !5999
  %128 = load i32, i32* %x.addr.i, align 4, !dbg !6000
  %shr7.i = lshr i32 %128, 8, !dbg !6001
  %129 = load i32, i32* %x.addr.i, align 4, !dbg !6002
  %add8.i = add i32 %129, %shr7.i, !dbg !6002
  store i32 %add8.i, i32* %x.addr.i, align 4, !dbg !6002
  %130 = load i32, i32* %x.addr.i, align 4, !dbg !6003
  %131 = load i32, i32* %x.addr.i, align 4, !dbg !6004
  %shr9.i = lshr i32 %131, 16, !dbg !6005
  %add10.i = add i32 %130, %shr9.i, !dbg !6006
  %and11.i = and i32 %add10.i, 63, !dbg !6007
  %132 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6008
  %nchannels125 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %132, i32 0, i32 0, !dbg !6009
  %133 = load i32, i32* %nchannels125, align 32, !dbg !6009
  %cmp126 = icmp ne i32 %and11.i, %133, !dbg !6010
  br i1 %cmp126, label %if.then128, label %if.end130, !dbg !6011

if.then128:                                       ; preds = %if.end120
  %134 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6012
  %avctx129 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %134, i32 0, i32 0, !dbg !6014
  %135 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx129, align 32, !dbg !6014
  %136 = bitcast %struct.AVCodecContext* %135 to i8*, !dbg !6012
  call void (i8*, i32, i8*, ...) @av_log(i8* %136, i32 16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.22, i32 0, i32 0)), !dbg !6015
  store i32 -1094995529, i32* %retval, align 4, !dbg !6016
  br label %return, !dbg !6016

if.end130:                                        ; preds = %if.end120
  store i32 0, i32* %i, align 4, !dbg !6017
  store i32 0, i32* %j, align 4, !dbg !6019
  br label %for.cond, !dbg !6020

for.cond:                                         ; preds = %for.inc, %if.end130
  %137 = load i32, i32* %i, align 4, !dbg !6021
  %138 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6024
  %ch_mask_nbits131 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %138, i32 0, i32 12, !dbg !6025
  %139 = load i32, i32* %ch_mask_nbits131, align 16, !dbg !6025
  %cmp132 = icmp slt i32 %137, %139, !dbg !6026
  br i1 %cmp132, label %for.body, label %for.end, !dbg !6027

for.body:                                         ; preds = %for.cond
  %140 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6028
  %ch_mask134 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %140, i32 0, i32 14, !dbg !6030
  %141 = load i32, i32* %ch_mask134, align 4, !dbg !6030
  %142 = load i32, i32* %i, align 4, !dbg !6031
  %shl = shl i32 1, %142, !dbg !6032
  %and = and i32 %141, %shl, !dbg !6033
  %tobool135 = icmp ne i32 %and, 0, !dbg !6033
  br i1 %tobool135, label %if.then136, label %if.end139, !dbg !6034

if.then136:                                       ; preds = %for.body
  %143 = load i32, i32* %i, align 4, !dbg !6035
  %144 = load i32, i32* %j, align 4, !dbg !6036
  %inc = add nsw i32 %144, 1, !dbg !6036
  store i32 %inc, i32* %j, align 4, !dbg !6036
  %idxprom137 = sext i32 %144 to i64, !dbg !6037
  %145 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6037
  %ch_remap = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %145, i32 0, i32 15, !dbg !6038
  %arrayidx138 = getelementptr inbounds [8 x i32], [8 x i32]* %ch_remap, i64 0, i64 %idxprom137, !dbg !6037
  store i32 %143, i32* %arrayidx138, align 4, !dbg !6039
  br label %if.end139, !dbg !6037

if.end139:                                        ; preds = %if.then136, %for.body
  br label %for.inc, !dbg !6040

for.inc:                                          ; preds = %if.end139
  %146 = load i32, i32* %i, align 4, !dbg !6042
  %inc140 = add nsw i32 %146, 1, !dbg !6042
  store i32 %inc140, i32* %i, align 4, !dbg !6042
  br label %for.cond, !dbg !6044, !llvm.loop !6045

for.end:                                          ; preds = %for.cond
  br label %if.end163, !dbg !6047

if.else:                                          ; preds = %if.end63
  %147 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6048
  %nchannels141 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %147, i32 0, i32 0, !dbg !6051
  %148 = load i32, i32* %nchannels141, align 32, !dbg !6051
  %cmp142 = icmp ne i32 %148, 2, !dbg !6052
  br i1 %cmp142, label %if.then151, label %lor.lhs.false, !dbg !6053

lor.lhs.false:                                    ; preds = %if.else
  %149 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6054
  %nchsets144 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %149, i32 0, i32 3, !dbg !6056
  %150 = load i32, i32* %nchsets144, align 4, !dbg !6056
  %cmp145 = icmp ne i32 %150, 1, !dbg !6057
  br i1 %cmp145, label %if.then151, label %lor.lhs.false147, !dbg !6058

lor.lhs.false147:                                 ; preds = %lor.lhs.false
  %151 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6059
  %gb148 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %151, i32 0, i32 1, !dbg !6061
  %call149 = call i32 @get_bits1(%struct.GetBitContext* %gb148), !dbg !6062
  %tobool150 = icmp ne i32 %call149, 0, !dbg !6062
  br i1 %tobool150, label %if.then151, label %if.end153, !dbg !6063

if.then151:                                       ; preds = %lor.lhs.false147, %lor.lhs.false, %if.else
  %152 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6064
  %avctx152 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %152, i32 0, i32 0, !dbg !6066
  %153 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx152, align 32, !dbg !6066
  %154 = bitcast %struct.AVCodecContext* %153 to i8*, !dbg !6064
  call void (i8*, i8*, ...) @avpriv_request_sample(i8* %154, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.23, i32 0, i32 0)), !dbg !6067
  store i32 -1163346256, i32* %retval, align 4, !dbg !6068
  br label %return, !dbg !6068

if.end153:                                        ; preds = %lor.lhs.false147
  %155 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6069
  %primary_chset154 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %155, i32 0, i32 5, !dbg !6070
  store i32 1, i32* %primary_chset154, align 4, !dbg !6071
  %156 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6072
  %dmix_coeffs_present155 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %156, i32 0, i32 6, !dbg !6073
  store i32 0, i32* %dmix_coeffs_present155, align 8, !dbg !6074
  %157 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6075
  %dmix_embedded156 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %157, i32 0, i32 7, !dbg !6076
  store i32 0, i32* %dmix_embedded156, align 4, !dbg !6077
  %158 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6078
  %hier_chset157 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %158, i32 0, i32 9, !dbg !6079
  store i32 0, i32* %hier_chset157, align 4, !dbg !6080
  %159 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6081
  %ch_mask158 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %159, i32 0, i32 14, !dbg !6082
  store i32 6, i32* %ch_mask158, align 4, !dbg !6083
  %160 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6084
  %ch_remap159 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %160, i32 0, i32 15, !dbg !6085
  %arrayidx160 = getelementptr inbounds [8 x i32], [8 x i32]* %ch_remap159, i64 0, i64 0, !dbg !6084
  store i32 1, i32* %arrayidx160, align 16, !dbg !6086
  %161 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6087
  %ch_remap161 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %161, i32 0, i32 15, !dbg !6088
  %arrayidx162 = getelementptr inbounds [8 x i32], [8 x i32]* %ch_remap161, i64 0, i64 1, !dbg !6087
  store i32 2, i32* %arrayidx162, align 4, !dbg !6089
  br label %if.end163

if.end163:                                        ; preds = %if.end153, %for.end
  %162 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6090
  %freq164 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %162, i32 0, i32 4, !dbg !6092
  %163 = load i32, i32* %freq164, align 16, !dbg !6092
  %cmp165 = icmp sgt i32 %163, 96000, !dbg !6093
  br i1 %cmp165, label %if.then167, label %if.else174, !dbg !6094

if.then167:                                       ; preds = %if.end163
  %164 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6095
  %gb168 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %164, i32 0, i32 1, !dbg !6098
  %call169 = call i32 @get_bits1(%struct.GetBitContext* %gb168), !dbg !6099
  %tobool170 = icmp ne i32 %call169, 0, !dbg !6099
  br i1 %tobool170, label %if.then171, label %if.end173, !dbg !6100

if.then171:                                       ; preds = %if.then167
  %165 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6101
  %avctx172 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %165, i32 0, i32 0, !dbg !6103
  %166 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx172, align 32, !dbg !6103
  %167 = bitcast %struct.AVCodecContext* %166 to i8*, !dbg !6101
  call void (i8*, i8*, ...) @avpriv_request_sample(i8* %167, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.24, i32 0, i32 0)), !dbg !6104
  store i32 -1163346256, i32* %retval, align 4, !dbg !6105
  br label %return, !dbg !6105

if.end173:                                        ; preds = %if.then167
  %168 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6106
  %nfreqbands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %168, i32 0, i32 16, !dbg !6107
  store i32 2, i32* %nfreqbands, align 16, !dbg !6108
  br label %if.end176, !dbg !6109

if.else174:                                       ; preds = %if.end163
  %169 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6110
  %nfreqbands175 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %169, i32 0, i32 16, !dbg !6112
  store i32 1, i32* %nfreqbands175, align 16, !dbg !6113
  br label %if.end176

if.end176:                                        ; preds = %if.else174, %if.end173
  %170 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6114
  %nfreqbands177 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %170, i32 0, i32 16, !dbg !6115
  %171 = load i32, i32* %nfreqbands177, align 16, !dbg !6115
  %sub = sub nsw i32 %171, 1, !dbg !6116
  %172 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6117
  %freq178 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %172, i32 0, i32 4, !dbg !6118
  %173 = load i32, i32* %freq178, align 16, !dbg !6119
  %shr = ashr i32 %173, %sub, !dbg !6119
  store i32 %shr, i32* %freq178, align 16, !dbg !6119
  %174 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6120
  %175 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !6122
  %cmp179 = icmp ne %struct.DCAXllChSet* %174, %175, !dbg !6123
  br i1 %cmp179, label %land.lhs.true181, label %if.end203, !dbg !6124

land.lhs.true181:                                 ; preds = %if.end176
  %176 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6125
  %nfreqbands182 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %176, i32 0, i32 16, !dbg !6127
  %177 = load i32, i32* %nfreqbands182, align 16, !dbg !6127
  %178 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !6128
  %nfreqbands183 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %178, i32 0, i32 16, !dbg !6129
  %179 = load i32, i32* %nfreqbands183, align 16, !dbg !6129
  %cmp184 = icmp ne i32 %177, %179, !dbg !6130
  br i1 %cmp184, label %if.then201, label %lor.lhs.false186, !dbg !6131

lor.lhs.false186:                                 ; preds = %land.lhs.true181
  %180 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6132
  %freq187 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %180, i32 0, i32 4, !dbg !6134
  %181 = load i32, i32* %freq187, align 16, !dbg !6134
  %182 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !6135
  %freq188 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %182, i32 0, i32 4, !dbg !6136
  %183 = load i32, i32* %freq188, align 16, !dbg !6136
  %cmp189 = icmp ne i32 %181, %183, !dbg !6137
  br i1 %cmp189, label %if.then201, label %lor.lhs.false191, !dbg !6138

lor.lhs.false191:                                 ; preds = %lor.lhs.false186
  %184 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6139
  %pcm_bit_res192 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %184, i32 0, i32 2, !dbg !6140
  %185 = load i32, i32* %pcm_bit_res192, align 8, !dbg !6140
  %186 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !6141
  %pcm_bit_res193 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %186, i32 0, i32 2, !dbg !6142
  %187 = load i32, i32* %pcm_bit_res193, align 8, !dbg !6142
  %cmp194 = icmp ne i32 %185, %187, !dbg !6143
  br i1 %cmp194, label %if.then201, label %lor.lhs.false196, !dbg !6144

lor.lhs.false196:                                 ; preds = %lor.lhs.false191
  %188 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6145
  %storage_bit_res197 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %188, i32 0, i32 3, !dbg !6146
  %189 = load i32, i32* %storage_bit_res197, align 4, !dbg !6146
  %190 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %p, align 8, !dbg !6147
  %storage_bit_res198 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %190, i32 0, i32 3, !dbg !6148
  %191 = load i32, i32* %storage_bit_res198, align 4, !dbg !6148
  %cmp199 = icmp ne i32 %189, %191, !dbg !6149
  br i1 %cmp199, label %if.then201, label %if.end203, !dbg !6150

if.then201:                                       ; preds = %lor.lhs.false196, %lor.lhs.false191, %lor.lhs.false186, %land.lhs.true181
  %192 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6152
  %avctx202 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %192, i32 0, i32 0, !dbg !6154
  %193 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx202, align 32, !dbg !6154
  %194 = bitcast %struct.AVCodecContext* %193 to i8*, !dbg !6152
  call void (i8*, i8*, ...) @avpriv_request_sample(i8* %194, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.25, i32 0, i32 0)), !dbg !6155
  store i32 -1163346256, i32* %retval, align 4, !dbg !6156
  br label %return, !dbg !6156

if.end203:                                        ; preds = %lor.lhs.false196, %if.end176
  %195 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6157
  %storage_bit_res204 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %195, i32 0, i32 3, !dbg !6159
  %196 = load i32, i32* %storage_bit_res204, align 4, !dbg !6159
  %cmp205 = icmp sgt i32 %196, 16, !dbg !6160
  br i1 %cmp205, label %if.then207, label %if.else208, !dbg !6161

if.then207:                                       ; preds = %if.end203
  %197 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6162
  %nabits = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %197, i32 0, i32 17, !dbg !6163
  store i32 5, i32* %nabits, align 4, !dbg !6164
  br label %if.end217, !dbg !6162

if.else208:                                       ; preds = %if.end203
  %198 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6165
  %storage_bit_res209 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %198, i32 0, i32 3, !dbg !6167
  %199 = load i32, i32* %storage_bit_res209, align 4, !dbg !6167
  %cmp210 = icmp sgt i32 %199, 8, !dbg !6168
  br i1 %cmp210, label %if.then212, label %if.else214, !dbg !6169

if.then212:                                       ; preds = %if.else208
  %200 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6170
  %nabits213 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %200, i32 0, i32 17, !dbg !6171
  store i32 4, i32* %nabits213, align 4, !dbg !6172
  br label %if.end216, !dbg !6170

if.else214:                                       ; preds = %if.else208
  %201 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6173
  %nabits215 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %201, i32 0, i32 17, !dbg !6174
  store i32 3, i32* %nabits215, align 4, !dbg !6175
  br label %if.end216

if.end216:                                        ; preds = %if.else214, %if.then212
  br label %if.end217

if.end217:                                        ; preds = %if.end216, %if.then207
  %202 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6176
  %nchsets218 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %202, i32 0, i32 3, !dbg !6178
  %203 = load i32, i32* %nchsets218, align 4, !dbg !6178
  %cmp219 = icmp sgt i32 %203, 1, !dbg !6179
  br i1 %cmp219, label %land.lhs.true225, label %lor.lhs.false221, !dbg !6180

lor.lhs.false221:                                 ; preds = %if.end217
  %204 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6181
  %nfreqbands222 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %204, i32 0, i32 16, !dbg !6183
  %205 = load i32, i32* %nfreqbands222, align 16, !dbg !6183
  %cmp223 = icmp sgt i32 %205, 1, !dbg !6184
  br i1 %cmp223, label %land.lhs.true225, label %if.end232, !dbg !6185

land.lhs.true225:                                 ; preds = %lor.lhs.false221, %if.end217
  %206 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6186
  %nabits226 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %206, i32 0, i32 17, !dbg !6188
  %207 = load i32, i32* %nabits226, align 4, !dbg !6188
  %cmp227 = icmp slt i32 %207, 5, !dbg !6189
  br i1 %cmp227, label %if.then229, label %if.end232, !dbg !6190

if.then229:                                       ; preds = %land.lhs.true225
  %208 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6191
  %nabits230 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %208, i32 0, i32 17, !dbg !6192
  %209 = load i32, i32* %nabits230, align 4, !dbg !6193
  %inc231 = add nsw i32 %209, 1, !dbg !6193
  store i32 %inc231, i32* %nabits230, align 4, !dbg !6193
  br label %if.end232, !dbg !6191

if.end232:                                        ; preds = %if.then229, %land.lhs.true225, %lor.lhs.false221
  store i32 0, i32* %band, align 4, !dbg !6194
  %210 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6195
  %bands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %210, i32 0, i32 18, !dbg !6196
  %arraydecay = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands, i32 0, i32 0, !dbg !6195
  store %struct.DCAXllBand* %arraydecay, %struct.DCAXllBand** %b, align 8, !dbg !6197
  br label %for.cond233, !dbg !6198

for.cond233:                                      ; preds = %for.inc531, %if.end232
  %211 = load i32, i32* %band, align 4, !dbg !6199
  %212 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6201
  %nfreqbands234 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %212, i32 0, i32 16, !dbg !6202
  %213 = load i32, i32* %nfreqbands234, align 16, !dbg !6202
  %cmp235 = icmp slt i32 %211, %213, !dbg !6203
  br i1 %cmp235, label %for.body237, label %for.end533, !dbg !6204

for.body237:                                      ; preds = %for.cond233
  %214 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6205
  %gb238 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %214, i32 0, i32 1, !dbg !6206
  %call239 = call i32 @get_bits1(%struct.GetBitContext* %gb238), !dbg !6207
  %215 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6208
  %decor_enabled = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %215, i32 0, i32 0, !dbg !6209
  store i32 %call239, i32* %decor_enabled, align 8, !dbg !6210
  %tobool240 = icmp ne i32 %call239, 0, !dbg !6210
  br i1 %tobool240, label %land.lhs.true241, label %if.else284, !dbg !6211

land.lhs.true241:                                 ; preds = %for.body237
  %216 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6212
  %nchannels242 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %216, i32 0, i32 0, !dbg !6214
  %217 = load i32, i32* %nchannels242, align 32, !dbg !6214
  %cmp243 = icmp sgt i32 %217, 1, !dbg !6215
  br i1 %cmp243, label %if.then245, label %if.else284, !dbg !6216

if.then245:                                       ; preds = %land.lhs.true241
  call void @llvm.dbg.declare(metadata i32* %ch_nbits, metadata !6217, metadata !2040), !dbg !6218
  %218 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6219
  %nchannels246 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %218, i32 0, i32 0, !dbg !6220
  %219 = load i32, i32* %nchannels246, align 32, !dbg !6220
  store i32 %219, i32* %x.addr.i542, align 4, !dbg !6221
  %220 = load i32, i32* %x.addr.i542, align 4, !dbg !6222
  %sub.i543 = sub nsw i32 %220, 1, !dbg !6223
  %shl.i = shl i32 %sub.i543, 1, !dbg !6224
  %or.i = or i32 %shl.i, 1, !dbg !6225
  %221 = call i32 @llvm.ctlz.i32(i32 %or.i, i1 true) #9, !dbg !6226
  %sub1.i = sub nsw i32 31, %221, !dbg !6227
  store i32 %sub1.i, i32* %ch_nbits, align 4, !dbg !6218
  store i32 0, i32* %i, align 4, !dbg !6228
  br label %for.cond248, !dbg !6230

for.cond248:                                      ; preds = %for.inc266, %if.then245
  %222 = load i32, i32* %i, align 4, !dbg !6231
  %223 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6234
  %nchannels249 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %223, i32 0, i32 0, !dbg !6235
  %224 = load i32, i32* %nchannels249, align 32, !dbg !6235
  %cmp250 = icmp slt i32 %222, %224, !dbg !6236
  br i1 %cmp250, label %for.body252, label %for.end268, !dbg !6237

for.body252:                                      ; preds = %for.cond248
  %225 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6238
  %gb253 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %225, i32 0, i32 1, !dbg !6240
  %226 = load i32, i32* %ch_nbits, align 4, !dbg !6241
  %call254 = call i32 @get_bits(%struct.GetBitContext* %gb253, i32 %226), !dbg !6242
  %227 = load i32, i32* %i, align 4, !dbg !6243
  %idxprom255 = sext i32 %227 to i64, !dbg !6244
  %228 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6244
  %orig_order = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %228, i32 0, i32 1, !dbg !6245
  %arrayidx256 = getelementptr inbounds [8 x i32], [8 x i32]* %orig_order, i64 0, i64 %idxprom255, !dbg !6244
  store i32 %call254, i32* %arrayidx256, align 4, !dbg !6246
  %229 = load i32, i32* %i, align 4, !dbg !6247
  %idxprom257 = sext i32 %229 to i64, !dbg !6249
  %230 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6249
  %orig_order258 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %230, i32 0, i32 1, !dbg !6250
  %arrayidx259 = getelementptr inbounds [8 x i32], [8 x i32]* %orig_order258, i64 0, i64 %idxprom257, !dbg !6249
  %231 = load i32, i32* %arrayidx259, align 4, !dbg !6249
  %232 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6251
  %nchannels260 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %232, i32 0, i32 0, !dbg !6252
  %233 = load i32, i32* %nchannels260, align 32, !dbg !6252
  %cmp261 = icmp sge i32 %231, %233, !dbg !6253
  br i1 %cmp261, label %if.then263, label %if.end265, !dbg !6254

if.then263:                                       ; preds = %for.body252
  %234 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6255
  %avctx264 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %234, i32 0, i32 0, !dbg !6257
  %235 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx264, align 32, !dbg !6257
  %236 = bitcast %struct.AVCodecContext* %235 to i8*, !dbg !6255
  call void (i8*, i32, i8*, ...) @av_log(i8* %236, i32 16, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.26, i32 0, i32 0)), !dbg !6258
  store i32 -1094995529, i32* %retval, align 4, !dbg !6259
  br label %return, !dbg !6259

if.end265:                                        ; preds = %for.body252
  br label %for.inc266, !dbg !6260

for.inc266:                                       ; preds = %if.end265
  %237 = load i32, i32* %i, align 4, !dbg !6261
  %inc267 = add nsw i32 %237, 1, !dbg !6261
  store i32 %inc267, i32* %i, align 4, !dbg !6261
  br label %for.cond248, !dbg !6263, !llvm.loop !6264

for.end268:                                       ; preds = %for.cond248
  store i32 0, i32* %i, align 4, !dbg !6266
  br label %for.cond269, !dbg !6268

for.cond269:                                      ; preds = %for.inc281, %for.end268
  %238 = load i32, i32* %i, align 4, !dbg !6269
  %239 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6272
  %nchannels270 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %239, i32 0, i32 0, !dbg !6273
  %240 = load i32, i32* %nchannels270, align 32, !dbg !6273
  %div = sdiv i32 %240, 2, !dbg !6274
  %cmp271 = icmp slt i32 %238, %div, !dbg !6275
  br i1 %cmp271, label %for.body273, label %for.end283, !dbg !6276

for.body273:                                      ; preds = %for.cond269
  %241 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6277
  %gb274 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %241, i32 0, i32 1, !dbg !6278
  %call275 = call i32 @get_bits1(%struct.GetBitContext* %gb274), !dbg !6279
  %tobool276 = icmp ne i32 %call275, 0, !dbg !6279
  br i1 %tobool276, label %cond.true, label %cond.false, !dbg !6279

cond.true:                                        ; preds = %for.body273
  %242 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6280
  %gb277 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %242, i32 0, i32 1, !dbg !6281
  %call278 = call i32 @get_linear(%struct.GetBitContext* %gb277, i32 7), !dbg !6282
  br label %cond.end, !dbg !6283

cond.false:                                       ; preds = %for.body273
  br label %cond.end, !dbg !6284

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call278, %cond.true ], [ 0, %cond.false ], !dbg !6286
  %243 = load i32, i32* %i, align 4, !dbg !6288
  %idxprom279 = sext i32 %243 to i64, !dbg !6289
  %244 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6289
  %decor_coeff = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %244, i32 0, i32 2, !dbg !6290
  %arrayidx280 = getelementptr inbounds [4 x i32], [4 x i32]* %decor_coeff, i64 0, i64 %idxprom279, !dbg !6289
  store i32 %cond, i32* %arrayidx280, align 4, !dbg !6291
  br label %for.inc281, !dbg !6289

for.inc281:                                       ; preds = %cond.end
  %245 = load i32, i32* %i, align 4, !dbg !6292
  %inc282 = add nsw i32 %245, 1, !dbg !6292
  store i32 %inc282, i32* %i, align 4, !dbg !6292
  br label %for.cond269, !dbg !6293, !llvm.loop !6294

for.end283:                                       ; preds = %for.cond269
  br label %if.end308, !dbg !6296

if.else284:                                       ; preds = %land.lhs.true241, %for.body237
  store i32 0, i32* %i, align 4, !dbg !6297
  br label %for.cond285, !dbg !6300

for.cond285:                                      ; preds = %for.inc293, %if.else284
  %246 = load i32, i32* %i, align 4, !dbg !6301
  %247 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6304
  %nchannels286 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %247, i32 0, i32 0, !dbg !6305
  %248 = load i32, i32* %nchannels286, align 32, !dbg !6305
  %cmp287 = icmp slt i32 %246, %248, !dbg !6306
  br i1 %cmp287, label %for.body289, label %for.end295, !dbg !6307

for.body289:                                      ; preds = %for.cond285
  %249 = load i32, i32* %i, align 4, !dbg !6308
  %250 = load i32, i32* %i, align 4, !dbg !6309
  %idxprom290 = sext i32 %250 to i64, !dbg !6310
  %251 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6310
  %orig_order291 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %251, i32 0, i32 1, !dbg !6311
  %arrayidx292 = getelementptr inbounds [8 x i32], [8 x i32]* %orig_order291, i64 0, i64 %idxprom290, !dbg !6310
  store i32 %249, i32* %arrayidx292, align 4, !dbg !6312
  br label %for.inc293, !dbg !6310

for.inc293:                                       ; preds = %for.body289
  %252 = load i32, i32* %i, align 4, !dbg !6313
  %inc294 = add nsw i32 %252, 1, !dbg !6313
  store i32 %inc294, i32* %i, align 4, !dbg !6313
  br label %for.cond285, !dbg !6315, !llvm.loop !6316

for.end295:                                       ; preds = %for.cond285
  store i32 0, i32* %i, align 4, !dbg !6318
  br label %for.cond296, !dbg !6320

for.cond296:                                      ; preds = %for.inc305, %for.end295
  %253 = load i32, i32* %i, align 4, !dbg !6321
  %254 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6324
  %nchannels297 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %254, i32 0, i32 0, !dbg !6325
  %255 = load i32, i32* %nchannels297, align 32, !dbg !6325
  %div298 = sdiv i32 %255, 2, !dbg !6326
  %cmp299 = icmp slt i32 %253, %div298, !dbg !6327
  br i1 %cmp299, label %for.body301, label %for.end307, !dbg !6328

for.body301:                                      ; preds = %for.cond296
  %256 = load i32, i32* %i, align 4, !dbg !6329
  %idxprom302 = sext i32 %256 to i64, !dbg !6330
  %257 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6330
  %decor_coeff303 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %257, i32 0, i32 2, !dbg !6331
  %arrayidx304 = getelementptr inbounds [4 x i32], [4 x i32]* %decor_coeff303, i64 0, i64 %idxprom302, !dbg !6330
  store i32 0, i32* %arrayidx304, align 4, !dbg !6332
  br label %for.inc305, !dbg !6330

for.inc305:                                       ; preds = %for.body301
  %258 = load i32, i32* %i, align 4, !dbg !6333
  %inc306 = add nsw i32 %258, 1, !dbg !6333
  store i32 %inc306, i32* %i, align 4, !dbg !6333
  br label %for.cond296, !dbg !6335, !llvm.loop !6336

for.end307:                                       ; preds = %for.cond296
  br label %if.end308

if.end308:                                        ; preds = %for.end307, %for.end283
  %259 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6338
  %highest_pred_order = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %259, i32 0, i32 4, !dbg !6339
  store i32 0, i32* %highest_pred_order, align 4, !dbg !6340
  store i32 0, i32* %i, align 4, !dbg !6341
  br label %for.cond309, !dbg !6343

for.cond309:                                      ; preds = %for.inc330, %if.end308
  %260 = load i32, i32* %i, align 4, !dbg !6344
  %261 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6347
  %nchannels310 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %261, i32 0, i32 0, !dbg !6348
  %262 = load i32, i32* %nchannels310, align 32, !dbg !6348
  %cmp311 = icmp slt i32 %260, %262, !dbg !6349
  br i1 %cmp311, label %for.body313, label %for.end332, !dbg !6350

for.body313:                                      ; preds = %for.cond309
  %263 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6351
  %gb314 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %263, i32 0, i32 1, !dbg !6353
  %call315 = call i32 @get_bits(%struct.GetBitContext* %gb314, i32 4), !dbg !6354
  %264 = load i32, i32* %i, align 4, !dbg !6355
  %idxprom316 = sext i32 %264 to i64, !dbg !6356
  %265 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6356
  %adapt_pred_order = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %265, i32 0, i32 3, !dbg !6357
  %arrayidx317 = getelementptr inbounds [8 x i32], [8 x i32]* %adapt_pred_order, i64 0, i64 %idxprom316, !dbg !6356
  store i32 %call315, i32* %arrayidx317, align 4, !dbg !6358
  %266 = load i32, i32* %i, align 4, !dbg !6359
  %idxprom318 = sext i32 %266 to i64, !dbg !6361
  %267 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6361
  %adapt_pred_order319 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %267, i32 0, i32 3, !dbg !6362
  %arrayidx320 = getelementptr inbounds [8 x i32], [8 x i32]* %adapt_pred_order319, i64 0, i64 %idxprom318, !dbg !6361
  %268 = load i32, i32* %arrayidx320, align 4, !dbg !6361
  %269 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6363
  %highest_pred_order321 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %269, i32 0, i32 4, !dbg !6364
  %270 = load i32, i32* %highest_pred_order321, align 4, !dbg !6364
  %cmp322 = icmp sgt i32 %268, %270, !dbg !6365
  br i1 %cmp322, label %if.then324, label %if.end329, !dbg !6366

if.then324:                                       ; preds = %for.body313
  %271 = load i32, i32* %i, align 4, !dbg !6367
  %idxprom325 = sext i32 %271 to i64, !dbg !6368
  %272 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6368
  %adapt_pred_order326 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %272, i32 0, i32 3, !dbg !6369
  %arrayidx327 = getelementptr inbounds [8 x i32], [8 x i32]* %adapt_pred_order326, i64 0, i64 %idxprom325, !dbg !6368
  %273 = load i32, i32* %arrayidx327, align 4, !dbg !6368
  %274 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6370
  %highest_pred_order328 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %274, i32 0, i32 4, !dbg !6371
  store i32 %273, i32* %highest_pred_order328, align 4, !dbg !6372
  br label %if.end329, !dbg !6370

if.end329:                                        ; preds = %if.then324, %for.body313
  br label %for.inc330, !dbg !6373

for.inc330:                                       ; preds = %if.end329
  %275 = load i32, i32* %i, align 4, !dbg !6374
  %inc331 = add nsw i32 %275, 1, !dbg !6374
  store i32 %inc331, i32* %i, align 4, !dbg !6374
  br label %for.cond309, !dbg !6376, !llvm.loop !6377

for.end332:                                       ; preds = %for.cond309
  %276 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6379
  %highest_pred_order333 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %276, i32 0, i32 4, !dbg !6381
  %277 = load i32, i32* %highest_pred_order333, align 4, !dbg !6381
  %278 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6382
  %nsegsamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %278, i32 0, i32 6, !dbg !6383
  %279 = load i32, i32* %nsegsamples, align 8, !dbg !6383
  %cmp334 = icmp sgt i32 %277, %279, !dbg !6384
  br i1 %cmp334, label %if.then336, label %if.end338, !dbg !6385

if.then336:                                       ; preds = %for.end332
  %280 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6386
  %avctx337 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %280, i32 0, i32 0, !dbg !6388
  %281 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx337, align 32, !dbg !6388
  %282 = bitcast %struct.AVCodecContext* %281 to i8*, !dbg !6386
  call void (i8*, i32, i8*, ...) @av_log(i8* %282, i32 16, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.27, i32 0, i32 0)), !dbg !6389
  store i32 -1094995529, i32* %retval, align 4, !dbg !6390
  br label %return, !dbg !6390

if.end338:                                        ; preds = %for.end332
  store i32 0, i32* %i, align 4, !dbg !6391
  br label %for.cond339, !dbg !6393

for.cond339:                                      ; preds = %for.inc356, %if.end338
  %283 = load i32, i32* %i, align 4, !dbg !6394
  %284 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6397
  %nchannels340 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %284, i32 0, i32 0, !dbg !6398
  %285 = load i32, i32* %nchannels340, align 32, !dbg !6398
  %cmp341 = icmp slt i32 %283, %285, !dbg !6399
  br i1 %cmp341, label %for.body343, label %for.end358, !dbg !6400

for.body343:                                      ; preds = %for.cond339
  %286 = load i32, i32* %i, align 4, !dbg !6401
  %idxprom344 = sext i32 %286 to i64, !dbg !6402
  %287 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6402
  %adapt_pred_order345 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %287, i32 0, i32 3, !dbg !6403
  %arrayidx346 = getelementptr inbounds [8 x i32], [8 x i32]* %adapt_pred_order345, i64 0, i64 %idxprom344, !dbg !6402
  %288 = load i32, i32* %arrayidx346, align 4, !dbg !6402
  %tobool347 = icmp ne i32 %288, 0, !dbg !6402
  br i1 %tobool347, label %cond.true348, label %cond.false349, !dbg !6402

cond.true348:                                     ; preds = %for.body343
  br label %cond.end352, !dbg !6404

cond.false349:                                    ; preds = %for.body343
  %289 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6405
  %gb350 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %289, i32 0, i32 1, !dbg !6407
  %call351 = call i32 @get_bits(%struct.GetBitContext* %gb350, i32 2), !dbg !6408
  br label %cond.end352, !dbg !6409

cond.end352:                                      ; preds = %cond.false349, %cond.true348
  %cond353 = phi i32 [ 0, %cond.true348 ], [ %call351, %cond.false349 ], !dbg !6410
  %290 = load i32, i32* %i, align 4, !dbg !6412
  %idxprom354 = sext i32 %290 to i64, !dbg !6413
  %291 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6413
  %fixed_pred_order = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %291, i32 0, i32 5, !dbg !6414
  %arrayidx355 = getelementptr inbounds [8 x i32], [8 x i32]* %fixed_pred_order, i64 0, i64 %idxprom354, !dbg !6413
  store i32 %cond353, i32* %arrayidx355, align 4, !dbg !6415
  br label %for.inc356, !dbg !6413

for.inc356:                                       ; preds = %cond.end352
  %292 = load i32, i32* %i, align 4, !dbg !6416
  %inc357 = add nsw i32 %292, 1, !dbg !6416
  store i32 %inc357, i32* %i, align 4, !dbg !6416
  br label %for.cond339, !dbg !6417, !llvm.loop !6418

for.end358:                                       ; preds = %for.cond339
  store i32 0, i32* %i, align 4, !dbg !6420
  br label %for.cond359, !dbg !6422

for.cond359:                                      ; preds = %for.inc403, %for.end358
  %293 = load i32, i32* %i, align 4, !dbg !6423
  %294 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6426
  %nchannels360 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %294, i32 0, i32 0, !dbg !6427
  %295 = load i32, i32* %nchannels360, align 32, !dbg !6427
  %cmp361 = icmp slt i32 %293, %295, !dbg !6428
  br i1 %cmp361, label %for.body363, label %for.end405, !dbg !6429

for.body363:                                      ; preds = %for.cond359
  store i32 0, i32* %j, align 4, !dbg !6430
  br label %for.cond364, !dbg !6433

for.cond364:                                      ; preds = %for.inc400, %for.body363
  %296 = load i32, i32* %j, align 4, !dbg !6434
  %297 = load i32, i32* %i, align 4, !dbg !6437
  %idxprom365 = sext i32 %297 to i64, !dbg !6438
  %298 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6438
  %adapt_pred_order366 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %298, i32 0, i32 3, !dbg !6439
  %arrayidx367 = getelementptr inbounds [8 x i32], [8 x i32]* %adapt_pred_order366, i64 0, i64 %idxprom365, !dbg !6438
  %299 = load i32, i32* %arrayidx367, align 4, !dbg !6438
  %cmp368 = icmp slt i32 %296, %299, !dbg !6440
  br i1 %cmp368, label %for.body370, label %for.end402, !dbg !6441

for.body370:                                      ; preds = %for.cond364
  %300 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6442
  %gb371 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %300, i32 0, i32 1, !dbg !6444
  %call372 = call i32 @get_linear(%struct.GetBitContext* %gb371, i32 8), !dbg !6445
  store i32 %call372, i32* %k, align 4, !dbg !6446
  %301 = load i32, i32* %k, align 4, !dbg !6447
  %cmp373 = icmp eq i32 %301, -128, !dbg !6449
  br i1 %cmp373, label %if.then375, label %if.end377, !dbg !6450

if.then375:                                       ; preds = %for.body370
  %302 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6451
  %avctx376 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %302, i32 0, i32 0, !dbg !6453
  %303 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx376, align 32, !dbg !6453
  %304 = bitcast %struct.AVCodecContext* %303 to i8*, !dbg !6451
  call void (i8*, i32, i8*, ...) @av_log(i8* %304, i32 16, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.28, i32 0, i32 0)), !dbg !6454
  store i32 -1094995529, i32* %retval, align 4, !dbg !6455
  br label %return, !dbg !6455

if.end377:                                        ; preds = %for.body370
  %305 = load i32, i32* %k, align 4, !dbg !6456
  %cmp378 = icmp slt i32 %305, 0, !dbg !6458
  br i1 %cmp378, label %if.then380, label %if.else390, !dbg !6459

if.then380:                                       ; preds = %if.end377
  %306 = load i32, i32* %k, align 4, !dbg !6460
  %sub381 = sub nsw i32 0, %306, !dbg !6461
  %idxprom382 = sext i32 %sub381 to i64, !dbg !6462
  %arrayidx383 = getelementptr inbounds [128 x i16], [128 x i16]* @ff_dca_xll_refl_coeff, i64 0, i64 %idxprom382, !dbg !6462
  %307 = load i16, i16* %arrayidx383, align 2, !dbg !6462
  %conv384 = zext i16 %307 to i32, !dbg !6463
  %sub385 = sub nsw i32 0, %conv384, !dbg !6464
  %308 = load i32, i32* %j, align 4, !dbg !6465
  %idxprom386 = sext i32 %308 to i64, !dbg !6466
  %309 = load i32, i32* %i, align 4, !dbg !6467
  %idxprom387 = sext i32 %309 to i64, !dbg !6466
  %310 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6466
  %adapt_refl_coeff = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %310, i32 0, i32 6, !dbg !6468
  %arrayidx388 = getelementptr inbounds [8 x [16 x i32]], [8 x [16 x i32]]* %adapt_refl_coeff, i64 0, i64 %idxprom387, !dbg !6466
  %arrayidx389 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx388, i64 0, i64 %idxprom386, !dbg !6466
  store i32 %sub385, i32* %arrayidx389, align 4, !dbg !6469
  br label %if.end399, !dbg !6466

if.else390:                                       ; preds = %if.end377
  %311 = load i32, i32* %k, align 4, !dbg !6470
  %idxprom391 = sext i32 %311 to i64, !dbg !6471
  %arrayidx392 = getelementptr inbounds [128 x i16], [128 x i16]* @ff_dca_xll_refl_coeff, i64 0, i64 %idxprom391, !dbg !6471
  %312 = load i16, i16* %arrayidx392, align 2, !dbg !6471
  %conv393 = zext i16 %312 to i32, !dbg !6472
  %313 = load i32, i32* %j, align 4, !dbg !6473
  %idxprom394 = sext i32 %313 to i64, !dbg !6474
  %314 = load i32, i32* %i, align 4, !dbg !6475
  %idxprom395 = sext i32 %314 to i64, !dbg !6474
  %315 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6474
  %adapt_refl_coeff396 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %315, i32 0, i32 6, !dbg !6476
  %arrayidx397 = getelementptr inbounds [8 x [16 x i32]], [8 x [16 x i32]]* %adapt_refl_coeff396, i64 0, i64 %idxprom395, !dbg !6474
  %arrayidx398 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx397, i64 0, i64 %idxprom394, !dbg !6474
  store i32 %conv393, i32* %arrayidx398, align 4, !dbg !6477
  br label %if.end399

if.end399:                                        ; preds = %if.else390, %if.then380
  br label %for.inc400, !dbg !6478

for.inc400:                                       ; preds = %if.end399
  %316 = load i32, i32* %j, align 4, !dbg !6479
  %inc401 = add nsw i32 %316, 1, !dbg !6479
  store i32 %inc401, i32* %j, align 4, !dbg !6479
  br label %for.cond364, !dbg !6481, !llvm.loop !6482

for.end402:                                       ; preds = %for.cond364
  br label %for.inc403, !dbg !6484

for.inc403:                                       ; preds = %for.end402
  %317 = load i32, i32* %i, align 4, !dbg !6485
  %inc404 = add nsw i32 %317, 1, !dbg !6485
  store i32 %inc404, i32* %i, align 4, !dbg !6485
  br label %for.cond359, !dbg !6487, !llvm.loop !6488

for.end405:                                       ; preds = %for.cond359
  %318 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6490
  %dmix_embedded406 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %318, i32 0, i32 7, !dbg !6491
  %319 = load i32, i32* %dmix_embedded406, align 4, !dbg !6491
  %tobool407 = icmp ne i32 %319, 0, !dbg !6490
  br i1 %tobool407, label %land.rhs408, label %land.end414, !dbg !6492

land.rhs408:                                      ; preds = %for.end405
  %320 = load i32, i32* %band, align 4, !dbg !6493
  %cmp409 = icmp eq i32 %320, 0, !dbg !6495
  br i1 %cmp409, label %lor.end, label %lor.rhs, !dbg !6496

lor.rhs:                                          ; preds = %land.rhs408
  %321 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6497
  %gb411 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %321, i32 0, i32 1, !dbg !6499
  %call412 = call i32 @get_bits1(%struct.GetBitContext* %gb411), !dbg !6500
  %tobool413 = icmp ne i32 %call412, 0, !dbg !6501
  br label %lor.end, !dbg !6501

lor.end:                                          ; preds = %lor.rhs, %land.rhs408
  %322 = phi i1 [ true, %land.rhs408 ], [ %tobool413, %lor.rhs ]
  br label %land.end414

land.end414:                                      ; preds = %lor.end, %for.end405
  %323 = phi i1 [ false, %for.end405 ], [ %322, %lor.end ]
  %land.ext415 = zext i1 %323 to i32, !dbg !6502
  %324 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6504
  %dmix_embedded416 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %324, i32 0, i32 7, !dbg !6505
  store i32 %land.ext415, i32* %dmix_embedded416, align 8, !dbg !6506
  %325 = load i32, i32* %band, align 4, !dbg !6507
  %cmp417 = icmp eq i32 %325, 0, !dbg !6509
  br i1 %cmp417, label %land.lhs.true419, label %lor.lhs.false421, !dbg !6510

land.lhs.true419:                                 ; preds = %land.end414
  %326 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6511
  %scalable_lsbs = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %326, i32 0, i32 11, !dbg !6513
  %327 = load i32, i32* %scalable_lsbs, align 4, !dbg !6513
  %tobool420 = icmp ne i32 %327, 0, !dbg !6511
  br i1 %tobool420, label %if.then428, label %lor.lhs.false421, !dbg !6514

lor.lhs.false421:                                 ; preds = %land.lhs.true419, %land.end414
  %328 = load i32, i32* %band, align 4, !dbg !6515
  %cmp422 = icmp ne i32 %328, 0, !dbg !6517
  br i1 %cmp422, label %land.lhs.true424, label %if.else479, !dbg !6518

land.lhs.true424:                                 ; preds = %lor.lhs.false421
  %329 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6519
  %gb425 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %329, i32 0, i32 1, !dbg !6521
  %call426 = call i32 @get_bits1(%struct.GetBitContext* %gb425), !dbg !6522
  %tobool427 = icmp ne i32 %call426, 0, !dbg !6522
  br i1 %tobool427, label %if.then428, label %if.else479, !dbg !6523

if.then428:                                       ; preds = %land.lhs.true424, %land.lhs.true419
  %330 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6524
  %gb429 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %330, i32 0, i32 1, !dbg !6526
  %331 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6527
  %seg_size_nbits = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %331, i32 0, i32 9, !dbg !6528
  %332 = load i32, i32* %seg_size_nbits, align 4, !dbg !6528
  %call430 = call i32 @get_bits_long(%struct.GetBitContext* %gb429, i32 %332), !dbg !6529
  %333 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6530
  %lsb_section_size = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %333, i32 0, i32 8, !dbg !6531
  store i32 %call430, i32* %lsb_section_size, align 4, !dbg !6532
  %334 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6533
  %lsb_section_size431 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %334, i32 0, i32 8, !dbg !6535
  %335 = load i32, i32* %lsb_section_size431, align 4, !dbg !6535
  %cmp432 = icmp slt i32 %335, 0, !dbg !6536
  br i1 %cmp432, label %if.then438, label %lor.lhs.false434, !dbg !6537

lor.lhs.false434:                                 ; preds = %if.then428
  %336 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6538
  %lsb_section_size435 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %336, i32 0, i32 8, !dbg !6540
  %337 = load i32, i32* %lsb_section_size435, align 4, !dbg !6540
  %338 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6541
  %frame_size = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %338, i32 0, i32 2, !dbg !6542
  %339 = load i32, i32* %frame_size, align 8, !dbg !6542
  %cmp436 = icmp sgt i32 %337, %339, !dbg !6543
  br i1 %cmp436, label %if.then438, label %if.end440, !dbg !6544

if.then438:                                       ; preds = %lor.lhs.false434, %if.then428
  %340 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6545
  %avctx439 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %340, i32 0, i32 0, !dbg !6547
  %341 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx439, align 32, !dbg !6547
  %342 = bitcast %struct.AVCodecContext* %341 to i8*, !dbg !6545
  call void (i8*, i32, i8*, ...) @av_log(i8* %342, i32 16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.29, i32 0, i32 0)), !dbg !6548
  store i32 -1094995529, i32* %retval, align 4, !dbg !6549
  br label %return, !dbg !6549

if.end440:                                        ; preds = %lor.lhs.false434
  %343 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6550
  %lsb_section_size441 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %343, i32 0, i32 8, !dbg !6552
  %344 = load i32, i32* %lsb_section_size441, align 4, !dbg !6552
  %tobool442 = icmp ne i32 %344, 0, !dbg !6550
  br i1 %tobool442, label %land.lhs.true443, label %if.end456, !dbg !6553

land.lhs.true443:                                 ; preds = %if.end440
  %345 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6554
  %band_crc_present = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %345, i32 0, i32 10, !dbg !6556
  %346 = load i32, i32* %band_crc_present, align 8, !dbg !6556
  %cmp444 = icmp sgt i32 %346, 2, !dbg !6557
  br i1 %cmp444, label %if.then453, label %lor.lhs.false446, !dbg !6558

lor.lhs.false446:                                 ; preds = %land.lhs.true443
  %347 = load i32, i32* %band, align 4, !dbg !6559
  %cmp447 = icmp eq i32 %347, 0, !dbg !6560
  br i1 %cmp447, label %land.lhs.true449, label %if.end456, !dbg !6561

land.lhs.true449:                                 ; preds = %lor.lhs.false446
  %348 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6562
  %band_crc_present450 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %348, i32 0, i32 10, !dbg !6563
  %349 = load i32, i32* %band_crc_present450, align 8, !dbg !6563
  %cmp451 = icmp sgt i32 %349, 1, !dbg !6564
  br i1 %cmp451, label %if.then453, label %if.end456, !dbg !6565

if.then453:                                       ; preds = %land.lhs.true449, %land.lhs.true443
  %350 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6567
  %lsb_section_size454 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %350, i32 0, i32 8, !dbg !6568
  %351 = load i32, i32* %lsb_section_size454, align 4, !dbg !6569
  %add455 = add nsw i32 %351, 2, !dbg !6569
  store i32 %add455, i32* %lsb_section_size454, align 4, !dbg !6569
  br label %if.end456, !dbg !6567

if.end456:                                        ; preds = %if.then453, %land.lhs.true449, %lor.lhs.false446, %if.end440
  store i32 0, i32* %i, align 4, !dbg !6570
  br label %for.cond457, !dbg !6572

for.cond457:                                      ; preds = %for.inc476, %if.end456
  %352 = load i32, i32* %i, align 4, !dbg !6573
  %353 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6576
  %nchannels458 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %353, i32 0, i32 0, !dbg !6577
  %354 = load i32, i32* %nchannels458, align 32, !dbg !6577
  %cmp459 = icmp slt i32 %352, %354, !dbg !6578
  br i1 %cmp459, label %for.body461, label %for.end478, !dbg !6579

for.body461:                                      ; preds = %for.cond457
  %355 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6580
  %gb462 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %355, i32 0, i32 1, !dbg !6582
  %call463 = call i32 @get_bits(%struct.GetBitContext* %gb462, i32 4), !dbg !6583
  %356 = load i32, i32* %i, align 4, !dbg !6584
  %idxprom464 = sext i32 %356 to i64, !dbg !6585
  %357 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6585
  %nscalablelsbs = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %357, i32 0, i32 9, !dbg !6586
  %arrayidx465 = getelementptr inbounds [8 x i32], [8 x i32]* %nscalablelsbs, i64 0, i64 %idxprom464, !dbg !6585
  store i32 %call463, i32* %arrayidx465, align 4, !dbg !6587
  %358 = load i32, i32* %i, align 4, !dbg !6588
  %idxprom466 = sext i32 %358 to i64, !dbg !6590
  %359 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6590
  %nscalablelsbs467 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %359, i32 0, i32 9, !dbg !6591
  %arrayidx468 = getelementptr inbounds [8 x i32], [8 x i32]* %nscalablelsbs467, i64 0, i64 %idxprom466, !dbg !6590
  %360 = load i32, i32* %arrayidx468, align 4, !dbg !6590
  %tobool469 = icmp ne i32 %360, 0, !dbg !6590
  br i1 %tobool469, label %land.lhs.true470, label %if.end475, !dbg !6592

land.lhs.true470:                                 ; preds = %for.body461
  %361 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6593
  %lsb_section_size471 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %361, i32 0, i32 8, !dbg !6595
  %362 = load i32, i32* %lsb_section_size471, align 4, !dbg !6595
  %tobool472 = icmp ne i32 %362, 0, !dbg !6593
  br i1 %tobool472, label %if.end475, label %if.then473, !dbg !6596

if.then473:                                       ; preds = %land.lhs.true470
  %363 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6597
  %avctx474 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %363, i32 0, i32 0, !dbg !6599
  %364 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx474, align 32, !dbg !6599
  %365 = bitcast %struct.AVCodecContext* %364 to i8*, !dbg !6597
  call void (i8*, i32, i8*, ...) @av_log(i8* %365, i32 16, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.30, i32 0, i32 0)), !dbg !6600
  store i32 -1094995529, i32* %retval, align 4, !dbg !6601
  br label %return, !dbg !6601

if.end475:                                        ; preds = %land.lhs.true470, %for.body461
  br label %for.inc476, !dbg !6602

for.inc476:                                       ; preds = %if.end475
  %366 = load i32, i32* %i, align 4, !dbg !6603
  %inc477 = add nsw i32 %366, 1, !dbg !6603
  store i32 %inc477, i32* %i, align 4, !dbg !6603
  br label %for.cond457, !dbg !6605, !llvm.loop !6606

for.end478:                                       ; preds = %for.cond457
  br label %if.end492, !dbg !6608

if.else479:                                       ; preds = %land.lhs.true424, %lor.lhs.false421
  %367 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6609
  %lsb_section_size480 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %367, i32 0, i32 8, !dbg !6611
  store i32 0, i32* %lsb_section_size480, align 4, !dbg !6612
  store i32 0, i32* %i, align 4, !dbg !6613
  br label %for.cond481, !dbg !6615

for.cond481:                                      ; preds = %for.inc489, %if.else479
  %368 = load i32, i32* %i, align 4, !dbg !6616
  %369 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6619
  %nchannels482 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %369, i32 0, i32 0, !dbg !6620
  %370 = load i32, i32* %nchannels482, align 32, !dbg !6620
  %cmp483 = icmp slt i32 %368, %370, !dbg !6621
  br i1 %cmp483, label %for.body485, label %for.end491, !dbg !6622

for.body485:                                      ; preds = %for.cond481
  %371 = load i32, i32* %i, align 4, !dbg !6623
  %idxprom486 = sext i32 %371 to i64, !dbg !6624
  %372 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6624
  %nscalablelsbs487 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %372, i32 0, i32 9, !dbg !6625
  %arrayidx488 = getelementptr inbounds [8 x i32], [8 x i32]* %nscalablelsbs487, i64 0, i64 %idxprom486, !dbg !6624
  store i32 0, i32* %arrayidx488, align 4, !dbg !6626
  br label %for.inc489, !dbg !6624

for.inc489:                                       ; preds = %for.body485
  %373 = load i32, i32* %i, align 4, !dbg !6627
  %inc490 = add nsw i32 %373, 1, !dbg !6627
  store i32 %inc490, i32* %i, align 4, !dbg !6627
  br label %for.cond481, !dbg !6629, !llvm.loop !6630

for.end491:                                       ; preds = %for.cond481
  br label %if.end492

if.end492:                                        ; preds = %for.end491, %for.end478
  %374 = load i32, i32* %band, align 4, !dbg !6632
  %cmp493 = icmp eq i32 %374, 0, !dbg !6634
  br i1 %cmp493, label %land.lhs.true495, label %lor.lhs.false498, !dbg !6635

land.lhs.true495:                                 ; preds = %if.end492
  %375 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6636
  %scalable_lsbs496 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %375, i32 0, i32 11, !dbg !6638
  %376 = load i32, i32* %scalable_lsbs496, align 4, !dbg !6638
  %tobool497 = icmp ne i32 %376, 0, !dbg !6636
  br i1 %tobool497, label %if.then505, label %lor.lhs.false498, !dbg !6639

lor.lhs.false498:                                 ; preds = %land.lhs.true495, %if.end492
  %377 = load i32, i32* %band, align 4, !dbg !6640
  %cmp499 = icmp ne i32 %377, 0, !dbg !6642
  br i1 %cmp499, label %land.lhs.true501, label %if.else518, !dbg !6643

land.lhs.true501:                                 ; preds = %lor.lhs.false498
  %378 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6644
  %gb502 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %378, i32 0, i32 1, !dbg !6646
  %call503 = call i32 @get_bits1(%struct.GetBitContext* %gb502), !dbg !6647
  %tobool504 = icmp ne i32 %call503, 0, !dbg !6647
  br i1 %tobool504, label %if.then505, label %if.else518, !dbg !6648

if.then505:                                       ; preds = %land.lhs.true501, %land.lhs.true495
  store i32 0, i32* %i, align 4, !dbg !6649
  br label %for.cond506, !dbg !6652

for.cond506:                                      ; preds = %for.inc515, %if.then505
  %379 = load i32, i32* %i, align 4, !dbg !6653
  %380 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6656
  %nchannels507 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %380, i32 0, i32 0, !dbg !6657
  %381 = load i32, i32* %nchannels507, align 32, !dbg !6657
  %cmp508 = icmp slt i32 %379, %381, !dbg !6658
  br i1 %cmp508, label %for.body510, label %for.end517, !dbg !6659

for.body510:                                      ; preds = %for.cond506
  %382 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6660
  %gb511 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %382, i32 0, i32 1, !dbg !6661
  %call512 = call i32 @get_bits(%struct.GetBitContext* %gb511, i32 4), !dbg !6662
  %383 = load i32, i32* %i, align 4, !dbg !6663
  %idxprom513 = sext i32 %383 to i64, !dbg !6664
  %384 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6664
  %bit_width_adjust = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %384, i32 0, i32 10, !dbg !6665
  %arrayidx514 = getelementptr inbounds [8 x i32], [8 x i32]* %bit_width_adjust, i64 0, i64 %idxprom513, !dbg !6664
  store i32 %call512, i32* %arrayidx514, align 4, !dbg !6666
  br label %for.inc515, !dbg !6664

for.inc515:                                       ; preds = %for.body510
  %385 = load i32, i32* %i, align 4, !dbg !6667
  %inc516 = add nsw i32 %385, 1, !dbg !6667
  store i32 %inc516, i32* %i, align 4, !dbg !6667
  br label %for.cond506, !dbg !6669, !llvm.loop !6670

for.end517:                                       ; preds = %for.cond506
  br label %if.end530, !dbg !6672

if.else518:                                       ; preds = %land.lhs.true501, %lor.lhs.false498
  store i32 0, i32* %i, align 4, !dbg !6673
  br label %for.cond519, !dbg !6676

for.cond519:                                      ; preds = %for.inc527, %if.else518
  %386 = load i32, i32* %i, align 4, !dbg !6677
  %387 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6680
  %nchannels520 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %387, i32 0, i32 0, !dbg !6681
  %388 = load i32, i32* %nchannels520, align 32, !dbg !6681
  %cmp521 = icmp slt i32 %386, %388, !dbg !6682
  br i1 %cmp521, label %for.body523, label %for.end529, !dbg !6683

for.body523:                                      ; preds = %for.cond519
  %389 = load i32, i32* %i, align 4, !dbg !6684
  %idxprom524 = sext i32 %389 to i64, !dbg !6685
  %390 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6685
  %bit_width_adjust525 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %390, i32 0, i32 10, !dbg !6686
  %arrayidx526 = getelementptr inbounds [8 x i32], [8 x i32]* %bit_width_adjust525, i64 0, i64 %idxprom524, !dbg !6685
  store i32 0, i32* %arrayidx526, align 4, !dbg !6687
  br label %for.inc527, !dbg !6685

for.inc527:                                       ; preds = %for.body523
  %391 = load i32, i32* %i, align 4, !dbg !6688
  %inc528 = add nsw i32 %391, 1, !dbg !6688
  store i32 %inc528, i32* %i, align 4, !dbg !6688
  br label %for.cond519, !dbg !6690, !llvm.loop !6691

for.end529:                                       ; preds = %for.cond519
  br label %if.end530

if.end530:                                        ; preds = %for.end529, %for.end517
  br label %for.inc531, !dbg !6693

for.inc531:                                       ; preds = %if.end530
  %392 = load i32, i32* %band, align 4, !dbg !6694
  %inc532 = add nsw i32 %392, 1, !dbg !6694
  store i32 %inc532, i32* %band, align 4, !dbg !6694
  %393 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !6696
  %incdec.ptr = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %393, i32 1, !dbg !6696
  store %struct.DCAXllBand* %incdec.ptr, %struct.DCAXllBand** %b, align 8, !dbg !6696
  br label %for.cond233, !dbg !6697, !llvm.loop !6698

for.end533:                                       ; preds = %for.cond233
  %394 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6700
  %gb534 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %394, i32 0, i32 1, !dbg !6702
  %395 = load i32, i32* %header_pos, align 4, !dbg !6703
  %396 = load i32, i32* %header_size, align 4, !dbg !6704
  %mul535 = mul nsw i32 %396, 8, !dbg !6705
  %add536 = add nsw i32 %395, %mul535, !dbg !6706
  %call537 = call i32 @ff_dca_seek_bits(%struct.GetBitContext* %gb534, i32 %add536), !dbg !6707
  %tobool538 = icmp ne i32 %call537, 0, !dbg !6707
  br i1 %tobool538, label %if.then539, label %if.end541, !dbg !6708

if.then539:                                       ; preds = %for.end533
  %397 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6709
  %avctx540 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %397, i32 0, i32 0, !dbg !6711
  %398 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx540, align 32, !dbg !6711
  %399 = bitcast %struct.AVCodecContext* %398 to i8*, !dbg !6709
  call void (i8*, i32, i8*, ...) @av_log(i8* %399, i32 16, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.31, i32 0, i32 0)), !dbg !6712
  store i32 -1094995529, i32* %retval, align 4, !dbg !6713
  br label %return, !dbg !6713

if.end541:                                        ; preds = %for.end533
  store i32 0, i32* %retval, align 4, !dbg !6714
  br label %return, !dbg !6714

return:                                           ; preds = %if.end541, %if.then539, %if.then473, %if.then438, %if.then375, %if.then336, %if.then263, %if.then201, %if.then171, %if.then151, %if.then128, %if.then118, %if.then113, %if.then104, %if.then93, %if.then72, %if.then61, %if.then55, %if.then48, %if.then38, %if.then31, %if.then11, %if.then
  %400 = load i32, i32* %retval, align 4, !dbg !6715
  ret i32 %400, !dbg !6715
}

; Function Attrs: nounwind uwtable
define internal %struct.DCAXllChSet* @find_next_hier_dmix_chset(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %c) #0 !dbg !6716 {
entry:
  %retval = alloca %struct.DCAXllChSet*, align 8
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !6719, metadata !2040), !dbg !6720
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !6721, metadata !2040), !dbg !6722
  %0 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6723
  %hier_chset = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %0, i32 0, i32 9, !dbg !6725
  %1 = load i32, i32* %hier_chset, align 4, !dbg !6725
  %tobool = icmp ne i32 %1, 0, !dbg !6723
  br i1 %tobool, label %if.then, label %if.end3, !dbg !6726

if.then:                                          ; preds = %entry
  br label %while.cond, !dbg !6727

while.cond:                                       ; preds = %if.end, %if.then
  %2 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6728
  %incdec.ptr = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %2, i32 1, !dbg !6728
  store %struct.DCAXllChSet* %incdec.ptr, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6728
  %3 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6730
  %nchsets = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %3, i32 0, i32 3, !dbg !6731
  %4 = load i32, i32* %nchsets, align 4, !dbg !6731
  %idxprom = sext i32 %4 to i64, !dbg !6732
  %5 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6732
  %chset = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %5, i32 0, i32 15, !dbg !6733
  %arrayidx = getelementptr inbounds [3 x %struct.DCAXllChSet], [3 x %struct.DCAXllChSet]* %chset, i64 0, i64 %idxprom, !dbg !6732
  %cmp = icmp ult %struct.DCAXllChSet* %incdec.ptr, %arrayidx, !dbg !6734
  br i1 %cmp, label %while.body, label %while.end, !dbg !6735

while.body:                                       ; preds = %while.cond
  %6 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6736
  %call = call i32 @is_hier_dmix_chset(%struct.DCAXllChSet* %6), !dbg !6738
  %tobool1 = icmp ne i32 %call, 0, !dbg !6738
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !6739

if.then2:                                         ; preds = %while.body
  %7 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6740
  store %struct.DCAXllChSet* %7, %struct.DCAXllChSet** %retval, align 8, !dbg !6741
  br label %return, !dbg !6741

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !6742, !llvm.loop !6744

while.end:                                        ; preds = %while.cond
  br label %if.end3, !dbg !6745

if.end3:                                          ; preds = %while.end, %entry
  store %struct.DCAXllChSet* null, %struct.DCAXllChSet** %retval, align 8, !dbg !6747
  br label %return, !dbg !6747

return:                                           ; preds = %if.end3, %if.then2
  %8 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %retval, align 8, !dbg !6748
  ret %struct.DCAXllChSet* %8, !dbg !6748
}

; Function Attrs: nounwind uwtable
define internal void @prescale_down_mix(%struct.DCAXllChSet* %c, %struct.DCAXllChSet* %o) #0 !dbg !6749 {
entry:
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  %o.addr = alloca %struct.DCAXllChSet*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %coeff_ptr = alloca i32*, align 8
  %scale = alloca i32, align 4
  %scale_inv = alloca i32, align 4
  %coeff = alloca i32, align 4
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !6752, metadata !2040), !dbg !6753
  store %struct.DCAXllChSet* %o, %struct.DCAXllChSet** %o.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %o.addr, metadata !6754, metadata !2040), !dbg !6755
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6756, metadata !2040), !dbg !6757
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6758, metadata !2040), !dbg !6759
  call void @llvm.dbg.declare(metadata i32** %coeff_ptr, metadata !6760, metadata !2040), !dbg !6761
  %0 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6762
  %dmix_coeff = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %0, i32 0, i32 11, !dbg !6763
  %arraydecay = getelementptr inbounds [128 x i32], [128 x i32]* %dmix_coeff, i32 0, i32 0, !dbg !6762
  store i32* %arraydecay, i32** %coeff_ptr, align 8, !dbg !6761
  store i32 0, i32* %i, align 4, !dbg !6764
  br label %for.cond, !dbg !6766

for.cond:                                         ; preds = %for.inc25, %entry
  %1 = load i32, i32* %i, align 4, !dbg !6767
  %2 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6770
  %hier_ofs = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %2, i32 0, i32 10, !dbg !6771
  %3 = load i32, i32* %hier_ofs, align 8, !dbg !6771
  %cmp = icmp slt i32 %1, %3, !dbg !6772
  br i1 %cmp, label %for.body, label %for.end27, !dbg !6773

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %scale, metadata !6774, metadata !2040), !dbg !6776
  %4 = load i32, i32* %i, align 4, !dbg !6777
  %idxprom = sext i32 %4 to i64, !dbg !6778
  %5 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %o.addr, align 8, !dbg !6778
  %dmix_scale = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %5, i32 0, i32 12, !dbg !6779
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* %dmix_scale, i64 0, i64 %idxprom, !dbg !6778
  %6 = load i32, i32* %arrayidx, align 4, !dbg !6778
  store i32 %6, i32* %scale, align 4, !dbg !6776
  call void @llvm.dbg.declare(metadata i32* %scale_inv, metadata !6780, metadata !2040), !dbg !6781
  %7 = load i32, i32* %i, align 4, !dbg !6782
  %idxprom1 = sext i32 %7 to i64, !dbg !6783
  %8 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %o.addr, align 8, !dbg !6783
  %dmix_scale_inv = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %8, i32 0, i32 13, !dbg !6784
  %arrayidx2 = getelementptr inbounds [16 x i32], [16 x i32]* %dmix_scale_inv, i64 0, i64 %idxprom1, !dbg !6783
  %9 = load i32, i32* %arrayidx2, align 4, !dbg !6783
  store i32 %9, i32* %scale_inv, align 4, !dbg !6781
  %10 = load i32, i32* %i, align 4, !dbg !6785
  %idxprom3 = sext i32 %10 to i64, !dbg !6786
  %11 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6786
  %dmix_scale4 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %11, i32 0, i32 12, !dbg !6787
  %arrayidx5 = getelementptr inbounds [16 x i32], [16 x i32]* %dmix_scale4, i64 0, i64 %idxprom3, !dbg !6786
  %12 = load i32, i32* %arrayidx5, align 4, !dbg !6786
  %13 = load i32, i32* %scale, align 4, !dbg !6788
  %call = call i32 @mul15(i32 %12, i32 %13), !dbg !6789
  %14 = load i32, i32* %i, align 4, !dbg !6790
  %idxprom6 = sext i32 %14 to i64, !dbg !6791
  %15 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6791
  %dmix_scale7 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %15, i32 0, i32 12, !dbg !6792
  %arrayidx8 = getelementptr inbounds [16 x i32], [16 x i32]* %dmix_scale7, i64 0, i64 %idxprom6, !dbg !6791
  store i32 %call, i32* %arrayidx8, align 4, !dbg !6793
  %16 = load i32, i32* %i, align 4, !dbg !6794
  %idxprom9 = sext i32 %16 to i64, !dbg !6795
  %17 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6795
  %dmix_scale_inv10 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %17, i32 0, i32 13, !dbg !6796
  %arrayidx11 = getelementptr inbounds [16 x i32], [16 x i32]* %dmix_scale_inv10, i64 0, i64 %idxprom9, !dbg !6795
  %18 = load i32, i32* %arrayidx11, align 4, !dbg !6795
  %19 = load i32, i32* %scale_inv, align 4, !dbg !6797
  %call12 = call i32 @mul16(i32 %18, i32 %19), !dbg !6798
  %20 = load i32, i32* %i, align 4, !dbg !6799
  %idxprom13 = sext i32 %20 to i64, !dbg !6800
  %21 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6800
  %dmix_scale_inv14 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %21, i32 0, i32 13, !dbg !6801
  %arrayidx15 = getelementptr inbounds [16 x i32], [16 x i32]* %dmix_scale_inv14, i64 0, i64 %idxprom13, !dbg !6800
  store i32 %call12, i32* %arrayidx15, align 4, !dbg !6802
  store i32 0, i32* %j, align 4, !dbg !6803
  br label %for.cond16, !dbg !6805

for.cond16:                                       ; preds = %for.inc, %for.body
  %22 = load i32, i32* %j, align 4, !dbg !6806
  %23 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6809
  %nchannels = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %23, i32 0, i32 0, !dbg !6810
  %24 = load i32, i32* %nchannels, align 32, !dbg !6810
  %cmp17 = icmp slt i32 %22, %24, !dbg !6811
  br i1 %cmp17, label %for.body18, label %for.end, !dbg !6812

for.body18:                                       ; preds = %for.cond16
  call void @llvm.dbg.declare(metadata i32* %coeff, metadata !6813, metadata !2040), !dbg !6815
  %25 = load i32*, i32** %coeff_ptr, align 8, !dbg !6816
  %26 = load i32, i32* %25, align 4, !dbg !6817
  %27 = load i32, i32* %scale_inv, align 4, !dbg !6818
  %call19 = call i32 @mul16(i32 %26, i32 %27), !dbg !6819
  store i32 %call19, i32* %coeff, align 4, !dbg !6815
  %28 = load i32, i32* %coeff, align 4, !dbg !6820
  %29 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6821
  %hier_ofs20 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %29, i32 0, i32 10, !dbg !6822
  %30 = load i32, i32* %hier_ofs20, align 8, !dbg !6822
  %31 = load i32, i32* %j, align 4, !dbg !6823
  %add = add nsw i32 %30, %31, !dbg !6824
  %idxprom21 = sext i32 %add to i64, !dbg !6825
  %32 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %o.addr, align 8, !dbg !6825
  %dmix_scale22 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %32, i32 0, i32 12, !dbg !6826
  %arrayidx23 = getelementptr inbounds [16 x i32], [16 x i32]* %dmix_scale22, i64 0, i64 %idxprom21, !dbg !6825
  %33 = load i32, i32* %arrayidx23, align 4, !dbg !6825
  %call24 = call i32 @mul15(i32 %28, i32 %33), !dbg !6827
  %34 = load i32*, i32** %coeff_ptr, align 8, !dbg !6828
  %incdec.ptr = getelementptr inbounds i32, i32* %34, i32 1, !dbg !6828
  store i32* %incdec.ptr, i32** %coeff_ptr, align 8, !dbg !6828
  store i32 %call24, i32* %34, align 4, !dbg !6829
  br label %for.inc, !dbg !6830

for.inc:                                          ; preds = %for.body18
  %35 = load i32, i32* %j, align 4, !dbg !6831
  %inc = add nsw i32 %35, 1, !dbg !6831
  store i32 %inc, i32* %j, align 4, !dbg !6831
  br label %for.cond16, !dbg !6833, !llvm.loop !6834

for.end:                                          ; preds = %for.cond16
  br label %for.inc25, !dbg !6836

for.inc25:                                        ; preds = %for.end
  %36 = load i32, i32* %i, align 4, !dbg !6837
  %inc26 = add nsw i32 %36, 1, !dbg !6837
  store i32 %inc26, i32* %i, align 4, !dbg !6837
  br label %for.cond, !dbg !6839, !llvm.loop !6840

for.end27:                                        ; preds = %for.cond
  ret void, !dbg !6842
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @get_bits_count(%struct.GetBitContext* %s) #4 !dbg !6843 {
entry:
  %s.addr = alloca %struct.GetBitContext*, align 8
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !6848, metadata !2040), !dbg !6849
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !6850
  %index = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %0, i32 0, i32 2, !dbg !6851
  %1 = load i32, i32* %index, align 8, !dbg !6851
  ret i32 %1, !dbg !6852
}

; Function Attrs: nounwind uwtable
define internal i32 @parse_dmix_coeffs(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %c) #0 !dbg !6853 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  %m = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %coeff_ptr = alloca i32*, align 8
  %code = alloca i32, align 4
  %sign = alloca i32, align 4
  %coeff = alloca i32, align 4
  %scale = alloca i32, align 4
  %scale_inv = alloca i32, align 4
  %index = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !6854, metadata !2040), !dbg !6855
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !6856, metadata !2040), !dbg !6857
  call void @llvm.dbg.declare(metadata i32* %m, metadata !6858, metadata !2040), !dbg !6859
  %0 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6860
  %primary_chset = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %0, i32 0, i32 5, !dbg !6861
  %1 = load i32, i32* %primary_chset, align 4, !dbg !6861
  %tobool = icmp ne i32 %1, 0, !dbg !6860
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6860

cond.true:                                        ; preds = %entry
  %2 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6862
  %dmix_type = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %2, i32 0, i32 8, !dbg !6864
  %3 = load i32, i32* %dmix_type, align 32, !dbg !6864
  %idxprom = sext i32 %3 to i64, !dbg !6865
  %arrayidx = getelementptr inbounds [8 x i8], [8 x i8]* @ff_dca_dmix_primary_nch, i64 0, i64 %idxprom, !dbg !6865
  %4 = load i8, i8* %arrayidx, align 1, !dbg !6865
  %conv = zext i8 %4 to i32, !dbg !6865
  br label %cond.end, !dbg !6866

cond.false:                                       ; preds = %entry
  %5 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6867
  %hier_ofs = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %5, i32 0, i32 10, !dbg !6869
  %6 = load i32, i32* %hier_ofs, align 8, !dbg !6869
  br label %cond.end, !dbg !6870

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %6, %cond.false ], !dbg !6871
  store i32 %cond, i32* %m, align 4, !dbg !6873
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6874, metadata !2040), !dbg !6875
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6876, metadata !2040), !dbg !6877
  call void @llvm.dbg.declare(metadata i32** %coeff_ptr, metadata !6878, metadata !2040), !dbg !6879
  %7 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6880
  %dmix_coeff = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %7, i32 0, i32 11, !dbg !6881
  %arraydecay = getelementptr inbounds [128 x i32], [128 x i32]* %dmix_coeff, i32 0, i32 0, !dbg !6880
  store i32* %arraydecay, i32** %coeff_ptr, align 8, !dbg !6879
  store i32 0, i32* %i, align 4, !dbg !6882
  br label %for.cond, !dbg !6884

for.cond:                                         ; preds = %for.inc45, %cond.end
  %8 = load i32, i32* %i, align 4, !dbg !6885
  %9 = load i32, i32* %m, align 4, !dbg !6888
  %cmp = icmp slt i32 %8, %9, !dbg !6889
  br i1 %cmp, label %for.body, label %for.end47, !dbg !6890

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6891, metadata !2040), !dbg !6893
  call void @llvm.dbg.declare(metadata i32* %sign, metadata !6894, metadata !2040), !dbg !6895
  call void @llvm.dbg.declare(metadata i32* %coeff, metadata !6896, metadata !2040), !dbg !6897
  call void @llvm.dbg.declare(metadata i32* %scale, metadata !6898, metadata !2040), !dbg !6899
  call void @llvm.dbg.declare(metadata i32* %scale_inv, metadata !6900, metadata !2040), !dbg !6901
  store i32 0, i32* %scale_inv, align 4, !dbg !6901
  call void @llvm.dbg.declare(metadata i32* %index, metadata !6902, metadata !2040), !dbg !6903
  %10 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6904
  %primary_chset2 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %10, i32 0, i32 5, !dbg !6906
  %11 = load i32, i32* %primary_chset2, align 4, !dbg !6906
  %tobool3 = icmp ne i32 %11, 0, !dbg !6904
  br i1 %tobool3, label %if.end20, label %if.then, !dbg !6907

if.then:                                          ; preds = %for.body
  %12 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6908
  %gb = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %12, i32 0, i32 1, !dbg !6910
  %call = call i32 @get_bits(%struct.GetBitContext* %gb, i32 9), !dbg !6911
  store i32 %call, i32* %code, align 4, !dbg !6912
  %13 = load i32, i32* %code, align 4, !dbg !6913
  %shr = ashr i32 %13, 8, !dbg !6914
  %sub = sub nsw i32 %shr, 1, !dbg !6915
  store i32 %sub, i32* %sign, align 4, !dbg !6916
  %14 = load i32, i32* %code, align 4, !dbg !6917
  %and = and i32 %14, 255, !dbg !6918
  %sub4 = sub i32 %and, 41, !dbg !6919
  store i32 %sub4, i32* %index, align 4, !dbg !6920
  %15 = load i32, i32* %index, align 4, !dbg !6921
  %cmp5 = icmp uge i32 %15, 201, !dbg !6923
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !6924

if.then7:                                         ; preds = %if.then
  %16 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6925
  %avctx = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %16, i32 0, i32 0, !dbg !6927
  %17 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 32, !dbg !6927
  %18 = bitcast %struct.AVCodecContext* %17 to i8*, !dbg !6925
  call void (i8*, i32, i8*, ...) @av_log(i8* %18, i32 16, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.32, i32 0, i32 0)), !dbg !6928
  store i32 -1094995529, i32* %retval, align 4, !dbg !6929
  br label %return, !dbg !6929

if.end:                                           ; preds = %if.then
  %19 = load i32, i32* %index, align 4, !dbg !6930
  %add = add i32 %19, 41, !dbg !6931
  %idxprom8 = zext i32 %add to i64, !dbg !6932
  %arrayidx9 = getelementptr inbounds [242 x i16], [242 x i16]* @ff_dca_dmixtable, i64 0, i64 %idxprom8, !dbg !6932
  %20 = load i16, i16* %arrayidx9, align 2, !dbg !6932
  %conv10 = zext i16 %20 to i32, !dbg !6932
  store i32 %conv10, i32* %scale, align 4, !dbg !6933
  %21 = load i32, i32* %index, align 4, !dbg !6934
  %idxprom11 = zext i32 %21 to i64, !dbg !6935
  %arrayidx12 = getelementptr inbounds [201 x i32], [201 x i32]* @ff_dca_inv_dmixtable, i64 0, i64 %idxprom11, !dbg !6935
  %22 = load i32, i32* %arrayidx12, align 4, !dbg !6935
  store i32 %22, i32* %scale_inv, align 4, !dbg !6936
  %23 = load i32, i32* %scale, align 4, !dbg !6937
  %24 = load i32, i32* %sign, align 4, !dbg !6938
  %xor = xor i32 %23, %24, !dbg !6939
  %25 = load i32, i32* %sign, align 4, !dbg !6940
  %sub13 = sub nsw i32 %xor, %25, !dbg !6941
  %26 = load i32, i32* %i, align 4, !dbg !6942
  %idxprom14 = sext i32 %26 to i64, !dbg !6943
  %27 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6943
  %dmix_scale = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %27, i32 0, i32 12, !dbg !6944
  %arrayidx15 = getelementptr inbounds [16 x i32], [16 x i32]* %dmix_scale, i64 0, i64 %idxprom14, !dbg !6943
  store i32 %sub13, i32* %arrayidx15, align 4, !dbg !6945
  %28 = load i32, i32* %scale_inv, align 4, !dbg !6946
  %29 = load i32, i32* %sign, align 4, !dbg !6947
  %xor16 = xor i32 %28, %29, !dbg !6948
  %30 = load i32, i32* %sign, align 4, !dbg !6949
  %sub17 = sub nsw i32 %xor16, %30, !dbg !6950
  %31 = load i32, i32* %i, align 4, !dbg !6951
  %idxprom18 = sext i32 %31 to i64, !dbg !6952
  %32 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6952
  %dmix_scale_inv = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %32, i32 0, i32 13, !dbg !6953
  %arrayidx19 = getelementptr inbounds [16 x i32], [16 x i32]* %dmix_scale_inv, i64 0, i64 %idxprom18, !dbg !6952
  store i32 %sub17, i32* %arrayidx19, align 4, !dbg !6954
  br label %if.end20, !dbg !6955

if.end20:                                         ; preds = %if.end, %for.body
  store i32 0, i32* %j, align 4, !dbg !6956
  br label %for.cond21, !dbg !6958

for.cond21:                                       ; preds = %for.inc, %if.end20
  %33 = load i32, i32* %j, align 4, !dbg !6959
  %34 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6962
  %nchannels = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %34, i32 0, i32 0, !dbg !6963
  %35 = load i32, i32* %nchannels, align 32, !dbg !6963
  %cmp22 = icmp slt i32 %33, %35, !dbg !6964
  br i1 %cmp22, label %for.body24, label %for.end, !dbg !6965

for.body24:                                       ; preds = %for.cond21
  %36 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6966
  %gb25 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %36, i32 0, i32 1, !dbg !6968
  %call26 = call i32 @get_bits(%struct.GetBitContext* %gb25, i32 9), !dbg !6969
  store i32 %call26, i32* %code, align 4, !dbg !6970
  %37 = load i32, i32* %code, align 4, !dbg !6971
  %shr27 = ashr i32 %37, 8, !dbg !6972
  %sub28 = sub nsw i32 %shr27, 1, !dbg !6973
  store i32 %sub28, i32* %sign, align 4, !dbg !6974
  %38 = load i32, i32* %code, align 4, !dbg !6975
  %and29 = and i32 %38, 255, !dbg !6976
  store i32 %and29, i32* %index, align 4, !dbg !6977
  %39 = load i32, i32* %index, align 4, !dbg !6978
  %cmp30 = icmp uge i32 %39, 242, !dbg !6980
  br i1 %cmp30, label %if.then32, label %if.end34, !dbg !6981

if.then32:                                        ; preds = %for.body24
  %40 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !6982
  %avctx33 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %40, i32 0, i32 0, !dbg !6984
  %41 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx33, align 32, !dbg !6984
  %42 = bitcast %struct.AVCodecContext* %41 to i8*, !dbg !6982
  call void (i8*, i32, i8*, ...) @av_log(i8* %42, i32 16, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.33, i32 0, i32 0)), !dbg !6985
  store i32 -1094995529, i32* %retval, align 4, !dbg !6986
  br label %return, !dbg !6986

if.end34:                                         ; preds = %for.body24
  %43 = load i32, i32* %index, align 4, !dbg !6987
  %idxprom35 = zext i32 %43 to i64, !dbg !6988
  %arrayidx36 = getelementptr inbounds [242 x i16], [242 x i16]* @ff_dca_dmixtable, i64 0, i64 %idxprom35, !dbg !6988
  %44 = load i16, i16* %arrayidx36, align 2, !dbg !6988
  %conv37 = zext i16 %44 to i32, !dbg !6988
  store i32 %conv37, i32* %coeff, align 4, !dbg !6989
  %45 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !6990
  %primary_chset38 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %45, i32 0, i32 5, !dbg !6992
  %46 = load i32, i32* %primary_chset38, align 4, !dbg !6992
  %tobool39 = icmp ne i32 %46, 0, !dbg !6990
  br i1 %tobool39, label %if.end42, label %if.then40, !dbg !6993

if.then40:                                        ; preds = %if.end34
  %47 = load i32, i32* %scale_inv, align 4, !dbg !6994
  %48 = load i32, i32* %coeff, align 4, !dbg !6995
  %call41 = call i32 @mul16(i32 %47, i32 %48), !dbg !6996
  store i32 %call41, i32* %coeff, align 4, !dbg !6997
  br label %if.end42, !dbg !6998

if.end42:                                         ; preds = %if.then40, %if.end34
  %49 = load i32, i32* %coeff, align 4, !dbg !6999
  %50 = load i32, i32* %sign, align 4, !dbg !7000
  %xor43 = xor i32 %49, %50, !dbg !7001
  %51 = load i32, i32* %sign, align 4, !dbg !7002
  %sub44 = sub nsw i32 %xor43, %51, !dbg !7003
  %52 = load i32*, i32** %coeff_ptr, align 8, !dbg !7004
  %incdec.ptr = getelementptr inbounds i32, i32* %52, i32 1, !dbg !7004
  store i32* %incdec.ptr, i32** %coeff_ptr, align 8, !dbg !7004
  store i32 %sub44, i32* %52, align 4, !dbg !7005
  br label %for.inc, !dbg !7006

for.inc:                                          ; preds = %if.end42
  %53 = load i32, i32* %j, align 4, !dbg !7007
  %inc = add nsw i32 %53, 1, !dbg !7007
  store i32 %inc, i32* %j, align 4, !dbg !7007
  br label %for.cond21, !dbg !7009, !llvm.loop !7010

for.end:                                          ; preds = %for.cond21
  br label %for.inc45, !dbg !7012

for.inc45:                                        ; preds = %for.end
  %54 = load i32, i32* %i, align 4, !dbg !7013
  %inc46 = add nsw i32 %54, 1, !dbg !7013
  store i32 %inc46, i32* %i, align 4, !dbg !7013
  br label %for.cond, !dbg !7015, !llvm.loop !7016

for.end47:                                        ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !7018
  br label %return, !dbg !7018

return:                                           ; preds = %for.end47, %if.then32, %if.then7
  %55 = load i32, i32* %retval, align 4, !dbg !7019
  ret i32 %55, !dbg !7019
}

; Function Attrs: nounwind uwtable
define internal i32 @get_linear(%struct.GetBitContext* %gb, i32 %n) #0 !dbg !7020 {
entry:
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %n.addr = alloca i32, align 4
  %v = alloca i32, align 4
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !7021, metadata !2040), !dbg !7022
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !7023, metadata !2040), !dbg !7024
  call void @llvm.dbg.declare(metadata i32* %v, metadata !7025, metadata !2040), !dbg !7026
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !7027
  %1 = load i32, i32* %n.addr, align 4, !dbg !7028
  %call = call i32 @get_bits_long(%struct.GetBitContext* %0, i32 %1), !dbg !7029
  store i32 %call, i32* %v, align 4, !dbg !7026
  %2 = load i32, i32* %v, align 4, !dbg !7030
  %shr = lshr i32 %2, 1, !dbg !7031
  %3 = load i32, i32* %v, align 4, !dbg !7032
  %and = and i32 %3, 1, !dbg !7033
  %sub = sub i32 0, %and, !dbg !7034
  %xor = xor i32 %shr, %sub, !dbg !7035
  ret i32 %xor, !dbg !7036
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @mul16(i32 %a, i32 %b) #4 !dbg !7037 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !7040, metadata !2040), !dbg !7041
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !7042, metadata !2040), !dbg !7043
  %0 = load i32, i32* %a.addr, align 4, !dbg !7044
  %1 = load i32, i32* %b.addr, align 4, !dbg !7045
  %call = call i32 @mul__(i32 %0, i32 %1, i32 16), !dbg !7046
  ret i32 %call, !dbg !7047
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @mul__(i32 %a, i32 %b, i32 %bits) #4 !dbg !7048 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %bits.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !7051, metadata !2040), !dbg !7052
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !7053, metadata !2040), !dbg !7054
  store i32 %bits, i32* %bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bits.addr, metadata !7055, metadata !2040), !dbg !7056
  %0 = load i32, i32* %a.addr, align 4, !dbg !7057
  %conv = sext i32 %0 to i64, !dbg !7058
  %1 = load i32, i32* %b.addr, align 4, !dbg !7059
  %conv1 = sext i32 %1 to i64, !dbg !7059
  %mul = mul nsw i64 %conv, %conv1, !dbg !7060
  %2 = load i32, i32* %bits.addr, align 4, !dbg !7061
  %call = call i32 @norm__(i64 %mul, i32 %2), !dbg !7062
  ret i32 %call, !dbg !7063
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @norm__(i64 %a, i32 %bits) #4 !dbg !7064 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca i64, align 8
  %bits.addr = alloca i32, align 4
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !7067, metadata !2040), !dbg !7068
  store i32 %bits, i32* %bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bits.addr, metadata !7069, metadata !2040), !dbg !7070
  %0 = load i32, i32* %bits.addr, align 4, !dbg !7071
  %cmp = icmp sgt i32 %0, 0, !dbg !7073
  br i1 %cmp, label %if.then, label %if.else, !dbg !7074

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %a.addr, align 8, !dbg !7075
  %2 = load i32, i32* %bits.addr, align 4, !dbg !7076
  %sub = sub nsw i32 %2, 1, !dbg !7077
  %sh_prom = zext i32 %sub to i64, !dbg !7078
  %shl = shl i64 1, %sh_prom, !dbg !7078
  %add = add nsw i64 %1, %shl, !dbg !7079
  %3 = load i32, i32* %bits.addr, align 4, !dbg !7080
  %sh_prom1 = zext i32 %3 to i64, !dbg !7081
  %shr = ashr i64 %add, %sh_prom1, !dbg !7081
  %conv = trunc i64 %shr to i32, !dbg !7082
  store i32 %conv, i32* %retval, align 4, !dbg !7083
  br label %return, !dbg !7083

if.else:                                          ; preds = %entry
  %4 = load i64, i64* %a.addr, align 8, !dbg !7084
  %conv2 = trunc i64 %4 to i32, !dbg !7085
  store i32 %conv2, i32* %retval, align 4, !dbg !7086
  br label %return, !dbg !7086

return:                                           ; preds = %if.else, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !7087
  ret i32 %5, !dbg !7087
}

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @mul15(i32 %a, i32 %b) #4 !dbg !7088 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !7089, metadata !2040), !dbg !7090
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !7091, metadata !2040), !dbg !7092
  %0 = load i32, i32* %a.addr, align 4, !dbg !7093
  %1 = load i32, i32* %b.addr, align 4, !dbg !7094
  %call = call i32 @mul__(i32 %0, i32 %1, i32 15), !dbg !7095
  ret i32 %call, !dbg !7096
}

declare void @av_fast_malloc(i8*, i32*, i64) #3

; Function Attrs: inlinehint nounwind uwtable
define internal void @skip_bits(%struct.GetBitContext* %s, i32 %n) #4 !dbg !7097 {
entry:
  %s.addr = alloca %struct.GetBitContext*, align 8
  %n.addr = alloca i32, align 4
  %re_index = alloca i32, align 4
  %re_cache = alloca i32, align 4
  %re_size_plus8 = alloca i32, align 4
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !7100, metadata !2040), !dbg !7101
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !7102, metadata !2040), !dbg !7103
  call void @llvm.dbg.declare(metadata i32* %re_index, metadata !7104, metadata !2040), !dbg !7105
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !7106
  %index = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %0, i32 0, i32 2, !dbg !7107
  %1 = load i32, i32* %index, align 8, !dbg !7107
  store i32 %1, i32* %re_index, align 4, !dbg !7105
  call void @llvm.dbg.declare(metadata i32* %re_cache, metadata !7108, metadata !2040), !dbg !7109
  call void @llvm.dbg.declare(metadata i32* %re_size_plus8, metadata !7110, metadata !2040), !dbg !7111
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !7112
  %size_in_bits_plus8 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %2, i32 0, i32 4, !dbg !7113
  %3 = load i32, i32* %size_in_bits_plus8, align 8, !dbg !7113
  store i32 %3, i32* %re_size_plus8, align 4, !dbg !7111
  %4 = load i32, i32* %re_size_plus8, align 4, !dbg !7114
  %5 = load i32, i32* %re_index, align 4, !dbg !7115
  %6 = load i32, i32* %n.addr, align 4, !dbg !7116
  %add = add i32 %5, %6, !dbg !7117
  %cmp = icmp ugt i32 %4, %add, !dbg !7118
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7119

cond.true:                                        ; preds = %entry
  %7 = load i32, i32* %re_index, align 4, !dbg !7120
  %8 = load i32, i32* %n.addr, align 4, !dbg !7122
  %add1 = add i32 %7, %8, !dbg !7123
  br label %cond.end, !dbg !7124

cond.false:                                       ; preds = %entry
  %9 = load i32, i32* %re_size_plus8, align 4, !dbg !7125
  br label %cond.end, !dbg !7127

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add1, %cond.true ], [ %9, %cond.false ], !dbg !7128
  store i32 %cond, i32* %re_index, align 4, !dbg !7130
  %10 = load i32, i32* %re_index, align 4, !dbg !7131
  %11 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !7132
  %index2 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %11, i32 0, i32 2, !dbg !7133
  store i32 %10, i32* %index2, align 8, !dbg !7134
  ret void, !dbg !7135
}

; Function Attrs: nounwind uwtable
define internal i32 @chs_alloc_msb_band_data(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %c) #0 !dbg !7136 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  %ndecisamples = alloca i32, align 4
  %nchsamples = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %nsamples = alloca i32, align 4
  %ptr = alloca i32*, align 8
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !7137, metadata !2040), !dbg !7138
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !7139, metadata !2040), !dbg !7140
  call void @llvm.dbg.declare(metadata i32* %ndecisamples, metadata !7141, metadata !2040), !dbg !7142
  %0 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7143
  %nfreqbands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %0, i32 0, i32 16, !dbg !7144
  %1 = load i32, i32* %nfreqbands, align 16, !dbg !7144
  %cmp = icmp sgt i32 %1, 1, !dbg !7145
  %cond = select i1 %cmp, i32 8, i32 0, !dbg !7143
  store i32 %cond, i32* %ndecisamples, align 4, !dbg !7142
  call void @llvm.dbg.declare(metadata i32* %nchsamples, metadata !7146, metadata !2040), !dbg !7147
  %2 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7148
  %nframesamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %2, i32 0, i32 8, !dbg !7149
  %3 = load i32, i32* %nframesamples, align 32, !dbg !7149
  %4 = load i32, i32* %ndecisamples, align 4, !dbg !7150
  %add = add nsw i32 %3, %4, !dbg !7151
  store i32 %add, i32* %nchsamples, align 4, !dbg !7147
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7152, metadata !2040), !dbg !7153
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7154, metadata !2040), !dbg !7155
  call void @llvm.dbg.declare(metadata i32* %nsamples, metadata !7156, metadata !2040), !dbg !7157
  %5 = load i32, i32* %nchsamples, align 4, !dbg !7158
  %6 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7159
  %nchannels = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %6, i32 0, i32 0, !dbg !7160
  %7 = load i32, i32* %nchannels, align 32, !dbg !7160
  %mul = mul nsw i32 %5, %7, !dbg !7161
  %8 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7162
  %nfreqbands1 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %8, i32 0, i32 16, !dbg !7163
  %9 = load i32, i32* %nfreqbands1, align 16, !dbg !7163
  %mul2 = mul nsw i32 %mul, %9, !dbg !7164
  store i32 %mul2, i32* %nsamples, align 4, !dbg !7157
  call void @llvm.dbg.declare(metadata i32** %ptr, metadata !7165, metadata !2040), !dbg !7166
  %10 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7167
  %sample_buffer = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %10, i32 0, i32 28, !dbg !7168
  %arrayidx = getelementptr inbounds [3 x i32*], [3 x i32*]* %sample_buffer, i64 0, i64 0, !dbg !7167
  %11 = bitcast i32** %arrayidx to i8*, !dbg !7169
  %12 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7170
  %sample_size = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %12, i32 0, i32 27, !dbg !7171
  %arrayidx3 = getelementptr inbounds [3 x i32], [3 x i32]* %sample_size, i64 0, i64 0, !dbg !7170
  %13 = load i32, i32* %nsamples, align 4, !dbg !7172
  %conv = sext i32 %13 to i64, !dbg !7172
  %mul4 = mul i64 %conv, 4, !dbg !7173
  call void @av_fast_malloc(i8* %11, i32* %arrayidx3, i64 %mul4), !dbg !7174
  %14 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7175
  %sample_buffer5 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %14, i32 0, i32 28, !dbg !7177
  %arrayidx6 = getelementptr inbounds [3 x i32*], [3 x i32*]* %sample_buffer5, i64 0, i64 0, !dbg !7175
  %15 = load i32*, i32** %arrayidx6, align 16, !dbg !7175
  %tobool = icmp ne i32* %15, null, !dbg !7175
  br i1 %tobool, label %if.end, label %if.then, !dbg !7178

if.then:                                          ; preds = %entry
  store i32 -12, i32* %retval, align 4, !dbg !7179
  br label %return, !dbg !7179

if.end:                                           ; preds = %entry
  %16 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7180
  %sample_buffer7 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %16, i32 0, i32 28, !dbg !7181
  %arrayidx8 = getelementptr inbounds [3 x i32*], [3 x i32*]* %sample_buffer7, i64 0, i64 0, !dbg !7180
  %17 = load i32*, i32** %arrayidx8, align 16, !dbg !7180
  %18 = load i32, i32* %ndecisamples, align 4, !dbg !7182
  %idx.ext = sext i32 %18 to i64, !dbg !7183
  %add.ptr = getelementptr inbounds i32, i32* %17, i64 %idx.ext, !dbg !7183
  store i32* %add.ptr, i32** %ptr, align 8, !dbg !7184
  store i32 0, i32* %i, align 4, !dbg !7185
  br label %for.cond, !dbg !7187

for.cond:                                         ; preds = %for.inc22, %if.end
  %19 = load i32, i32* %i, align 4, !dbg !7188
  %20 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7191
  %nfreqbands9 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %20, i32 0, i32 16, !dbg !7192
  %21 = load i32, i32* %nfreqbands9, align 16, !dbg !7192
  %cmp10 = icmp slt i32 %19, %21, !dbg !7193
  br i1 %cmp10, label %for.body, label %for.end24, !dbg !7194

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !7195
  br label %for.cond12, !dbg !7198

for.cond12:                                       ; preds = %for.inc, %for.body
  %22 = load i32, i32* %j, align 4, !dbg !7199
  %23 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7202
  %nchannels13 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %23, i32 0, i32 0, !dbg !7203
  %24 = load i32, i32* %nchannels13, align 32, !dbg !7203
  %cmp14 = icmp slt i32 %22, %24, !dbg !7204
  br i1 %cmp14, label %for.body16, label %for.end, !dbg !7205

for.body16:                                       ; preds = %for.cond12
  %25 = load i32*, i32** %ptr, align 8, !dbg !7206
  %26 = load i32, i32* %j, align 4, !dbg !7208
  %idxprom = sext i32 %26 to i64, !dbg !7209
  %27 = load i32, i32* %i, align 4, !dbg !7210
  %idxprom17 = sext i32 %27 to i64, !dbg !7209
  %28 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7209
  %bands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %28, i32 0, i32 18, !dbg !7211
  %arrayidx18 = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands, i64 0, i64 %idxprom17, !dbg !7209
  %msb_sample_buffer = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx18, i32 0, i32 11, !dbg !7212
  %arrayidx19 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer, i64 0, i64 %idxprom, !dbg !7209
  store i32* %25, i32** %arrayidx19, align 8, !dbg !7213
  %29 = load i32, i32* %nchsamples, align 4, !dbg !7214
  %30 = load i32*, i32** %ptr, align 8, !dbg !7215
  %idx.ext20 = sext i32 %29 to i64, !dbg !7215
  %add.ptr21 = getelementptr inbounds i32, i32* %30, i64 %idx.ext20, !dbg !7215
  store i32* %add.ptr21, i32** %ptr, align 8, !dbg !7215
  br label %for.inc, !dbg !7216

for.inc:                                          ; preds = %for.body16
  %31 = load i32, i32* %j, align 4, !dbg !7217
  %inc = add nsw i32 %31, 1, !dbg !7217
  store i32 %inc, i32* %j, align 4, !dbg !7217
  br label %for.cond12, !dbg !7219, !llvm.loop !7220

for.end:                                          ; preds = %for.cond12
  br label %for.inc22, !dbg !7222

for.inc22:                                        ; preds = %for.end
  %32 = load i32, i32* %i, align 4, !dbg !7223
  %inc23 = add nsw i32 %32, 1, !dbg !7223
  store i32 %inc23, i32* %i, align 4, !dbg !7223
  br label %for.cond, !dbg !7225, !llvm.loop !7226

for.end24:                                        ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !7228
  br label %return, !dbg !7228

return:                                           ; preds = %for.end24, %if.then
  %33 = load i32, i32* %retval, align 4, !dbg !7229
  ret i32 %33, !dbg !7229
}

; Function Attrs: nounwind uwtable
define internal i32 @chs_alloc_lsb_band_data(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %c) #0 !dbg !7230 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %nsamples = alloca i32, align 4
  %ptr = alloca i32*, align 8
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !7231, metadata !2040), !dbg !7232
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !7233, metadata !2040), !dbg !7234
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7235, metadata !2040), !dbg !7236
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7237, metadata !2040), !dbg !7238
  call void @llvm.dbg.declare(metadata i32* %nsamples, metadata !7239, metadata !2040), !dbg !7240
  store i32 0, i32* %nsamples, align 4, !dbg !7240
  call void @llvm.dbg.declare(metadata i32** %ptr, metadata !7241, metadata !2040), !dbg !7242
  store i32 0, i32* %i, align 4, !dbg !7243
  br label %for.cond, !dbg !7245

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7246
  %1 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7249
  %nfreqbands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %1, i32 0, i32 16, !dbg !7250
  %2 = load i32, i32* %nfreqbands, align 16, !dbg !7250
  %cmp = icmp slt i32 %0, %2, !dbg !7251
  br i1 %cmp, label %for.body, label %for.end, !dbg !7252

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4, !dbg !7253
  %idxprom = sext i32 %3 to i64, !dbg !7255
  %4 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7255
  %bands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %4, i32 0, i32 18, !dbg !7256
  %arrayidx = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands, i64 0, i64 %idxprom, !dbg !7255
  %lsb_section_size = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx, i32 0, i32 8, !dbg !7257
  %5 = load i32, i32* %lsb_section_size, align 4, !dbg !7257
  %tobool = icmp ne i32 %5, 0, !dbg !7255
  br i1 %tobool, label %if.then, label %if.end, !dbg !7258

if.then:                                          ; preds = %for.body
  %6 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7259
  %nframesamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %6, i32 0, i32 8, !dbg !7260
  %7 = load i32, i32* %nframesamples, align 32, !dbg !7260
  %8 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7261
  %nchannels = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %8, i32 0, i32 0, !dbg !7262
  %9 = load i32, i32* %nchannels, align 32, !dbg !7262
  %mul = mul nsw i32 %7, %9, !dbg !7263
  %10 = load i32, i32* %nsamples, align 4, !dbg !7264
  %add = add nsw i32 %10, %mul, !dbg !7264
  store i32 %add, i32* %nsamples, align 4, !dbg !7264
  br label %if.end, !dbg !7265

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !7266

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4, !dbg !7268
  %inc = add nsw i32 %11, 1, !dbg !7268
  store i32 %inc, i32* %i, align 4, !dbg !7268
  br label %for.cond, !dbg !7270, !llvm.loop !7271

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %nsamples, align 4, !dbg !7273
  %tobool1 = icmp ne i32 %12, 0, !dbg !7273
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !7275

if.then2:                                         ; preds = %for.end
  store i32 0, i32* %retval, align 4, !dbg !7276
  br label %return, !dbg !7276

if.end3:                                          ; preds = %for.end
  %13 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7277
  %sample_buffer = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %13, i32 0, i32 28, !dbg !7278
  %arrayidx4 = getelementptr inbounds [3 x i32*], [3 x i32*]* %sample_buffer, i64 0, i64 1, !dbg !7277
  %14 = bitcast i32** %arrayidx4 to i8*, !dbg !7279
  %15 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7280
  %sample_size = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %15, i32 0, i32 27, !dbg !7281
  %arrayidx5 = getelementptr inbounds [3 x i32], [3 x i32]* %sample_size, i64 0, i64 1, !dbg !7280
  %16 = load i32, i32* %nsamples, align 4, !dbg !7282
  %conv = sext i32 %16 to i64, !dbg !7282
  %mul6 = mul i64 %conv, 4, !dbg !7283
  call void @av_fast_malloc(i8* %14, i32* %arrayidx5, i64 %mul6), !dbg !7284
  %17 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7285
  %sample_buffer7 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %17, i32 0, i32 28, !dbg !7287
  %arrayidx8 = getelementptr inbounds [3 x i32*], [3 x i32*]* %sample_buffer7, i64 0, i64 1, !dbg !7285
  %18 = load i32*, i32** %arrayidx8, align 8, !dbg !7285
  %tobool9 = icmp ne i32* %18, null, !dbg !7285
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !7288

if.then10:                                        ; preds = %if.end3
  store i32 -12, i32* %retval, align 4, !dbg !7289
  br label %return, !dbg !7289

if.end11:                                         ; preds = %if.end3
  %19 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7290
  %sample_buffer12 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %19, i32 0, i32 28, !dbg !7291
  %arrayidx13 = getelementptr inbounds [3 x i32*], [3 x i32*]* %sample_buffer12, i64 0, i64 1, !dbg !7290
  %20 = load i32*, i32** %arrayidx13, align 8, !dbg !7290
  store i32* %20, i32** %ptr, align 8, !dbg !7292
  store i32 0, i32* %i, align 4, !dbg !7293
  br label %for.cond14, !dbg !7295

for.cond14:                                       ; preds = %for.inc54, %if.end11
  %21 = load i32, i32* %i, align 4, !dbg !7296
  %22 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7299
  %nfreqbands15 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %22, i32 0, i32 16, !dbg !7300
  %23 = load i32, i32* %nfreqbands15, align 16, !dbg !7300
  %cmp16 = icmp slt i32 %21, %23, !dbg !7301
  br i1 %cmp16, label %for.body18, label %for.end56, !dbg !7302

for.body18:                                       ; preds = %for.cond14
  %24 = load i32, i32* %i, align 4, !dbg !7303
  %idxprom19 = sext i32 %24 to i64, !dbg !7306
  %25 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7306
  %bands20 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %25, i32 0, i32 18, !dbg !7307
  %arrayidx21 = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands20, i64 0, i64 %idxprom19, !dbg !7306
  %lsb_section_size22 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx21, i32 0, i32 8, !dbg !7308
  %26 = load i32, i32* %lsb_section_size22, align 4, !dbg !7308
  %tobool23 = icmp ne i32 %26, 0, !dbg !7306
  br i1 %tobool23, label %if.then24, label %if.else, !dbg !7309

if.then24:                                        ; preds = %for.body18
  store i32 0, i32* %j, align 4, !dbg !7310
  br label %for.cond25, !dbg !7313

for.cond25:                                       ; preds = %for.inc36, %if.then24
  %27 = load i32, i32* %j, align 4, !dbg !7314
  %28 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7317
  %nchannels26 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %28, i32 0, i32 0, !dbg !7318
  %29 = load i32, i32* %nchannels26, align 32, !dbg !7318
  %cmp27 = icmp slt i32 %27, %29, !dbg !7319
  br i1 %cmp27, label %for.body29, label %for.end38, !dbg !7320

for.body29:                                       ; preds = %for.cond25
  %30 = load i32*, i32** %ptr, align 8, !dbg !7321
  %31 = load i32, i32* %j, align 4, !dbg !7323
  %idxprom30 = sext i32 %31 to i64, !dbg !7324
  %32 = load i32, i32* %i, align 4, !dbg !7325
  %idxprom31 = sext i32 %32 to i64, !dbg !7324
  %33 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7324
  %bands32 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %33, i32 0, i32 18, !dbg !7326
  %arrayidx33 = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands32, i64 0, i64 %idxprom31, !dbg !7324
  %lsb_sample_buffer = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx33, i32 0, i32 12, !dbg !7327
  %arrayidx34 = getelementptr inbounds [8 x i32*], [8 x i32*]* %lsb_sample_buffer, i64 0, i64 %idxprom30, !dbg !7324
  store i32* %30, i32** %arrayidx34, align 8, !dbg !7328
  %34 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7329
  %nframesamples35 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %34, i32 0, i32 8, !dbg !7330
  %35 = load i32, i32* %nframesamples35, align 32, !dbg !7330
  %36 = load i32*, i32** %ptr, align 8, !dbg !7331
  %idx.ext = sext i32 %35 to i64, !dbg !7331
  %add.ptr = getelementptr inbounds i32, i32* %36, i64 %idx.ext, !dbg !7331
  store i32* %add.ptr, i32** %ptr, align 8, !dbg !7331
  br label %for.inc36, !dbg !7332

for.inc36:                                        ; preds = %for.body29
  %37 = load i32, i32* %j, align 4, !dbg !7333
  %inc37 = add nsw i32 %37, 1, !dbg !7333
  store i32 %inc37, i32* %j, align 4, !dbg !7333
  br label %for.cond25, !dbg !7335, !llvm.loop !7336

for.end38:                                        ; preds = %for.cond25
  br label %if.end53, !dbg !7338

if.else:                                          ; preds = %for.body18
  store i32 0, i32* %j, align 4, !dbg !7339
  br label %for.cond39, !dbg !7342

for.cond39:                                       ; preds = %for.inc50, %if.else
  %38 = load i32, i32* %j, align 4, !dbg !7343
  %39 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7346
  %nchannels40 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %39, i32 0, i32 0, !dbg !7347
  %40 = load i32, i32* %nchannels40, align 32, !dbg !7347
  %cmp41 = icmp slt i32 %38, %40, !dbg !7348
  br i1 %cmp41, label %for.body43, label %for.end52, !dbg !7349

for.body43:                                       ; preds = %for.cond39
  %41 = load i32, i32* %j, align 4, !dbg !7350
  %idxprom44 = sext i32 %41 to i64, !dbg !7351
  %42 = load i32, i32* %i, align 4, !dbg !7352
  %idxprom45 = sext i32 %42 to i64, !dbg !7351
  %43 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7351
  %bands46 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %43, i32 0, i32 18, !dbg !7353
  %arrayidx47 = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands46, i64 0, i64 %idxprom45, !dbg !7351
  %lsb_sample_buffer48 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx47, i32 0, i32 12, !dbg !7354
  %arrayidx49 = getelementptr inbounds [8 x i32*], [8 x i32*]* %lsb_sample_buffer48, i64 0, i64 %idxprom44, !dbg !7351
  store i32* null, i32** %arrayidx49, align 8, !dbg !7355
  br label %for.inc50, !dbg !7351

for.inc50:                                        ; preds = %for.body43
  %44 = load i32, i32* %j, align 4, !dbg !7356
  %inc51 = add nsw i32 %44, 1, !dbg !7356
  store i32 %inc51, i32* %j, align 4, !dbg !7356
  br label %for.cond39, !dbg !7358, !llvm.loop !7359

for.end52:                                        ; preds = %for.cond39
  br label %if.end53

if.end53:                                         ; preds = %for.end52, %for.end38
  br label %for.inc54, !dbg !7361

for.inc54:                                        ; preds = %if.end53
  %45 = load i32, i32* %i, align 4, !dbg !7362
  %inc55 = add nsw i32 %45, 1, !dbg !7362
  store i32 %inc55, i32* %i, align 4, !dbg !7362
  br label %for.cond14, !dbg !7364, !llvm.loop !7365

for.end56:                                        ; preds = %for.cond14
  store i32 0, i32* %retval, align 4, !dbg !7367
  br label %return, !dbg !7367

return:                                           ; preds = %for.end56, %if.then10, %if.then2
  %46 = load i32, i32* %retval, align 4, !dbg !7368
  ret i32 %46, !dbg !7368
}

; Function Attrs: nounwind uwtable
define internal i32 @chs_parse_band_data(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %c, i32 %band, i32 %seg, i32 %band_data_end) #0 !dbg !7369 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  %band.addr = alloca i32, align 4
  %seg.addr = alloca i32, align 4
  %band_data_end.addr = alloca i32, align 4
  %b = alloca %struct.DCAXllBand*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %part_a = alloca i32*, align 8
  %part_b = alloca i32*, align 8
  %nsamples_part_b = alloca i32, align 4
  %nisosamples = alloca i32, align 4
  %loc = alloca i32, align 4
  %nbits = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !7372, metadata !2040), !dbg !7373
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !7374, metadata !2040), !dbg !7375
  store i32 %band, i32* %band.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %band.addr, metadata !7376, metadata !2040), !dbg !7377
  store i32 %seg, i32* %seg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %seg.addr, metadata !7378, metadata !2040), !dbg !7379
  store i32 %band_data_end, i32* %band_data_end.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %band_data_end.addr, metadata !7380, metadata !2040), !dbg !7381
  call void @llvm.dbg.declare(metadata %struct.DCAXllBand** %b, metadata !7382, metadata !2040), !dbg !7383
  %0 = load i32, i32* %band.addr, align 4, !dbg !7384
  %idxprom = sext i32 %0 to i64, !dbg !7385
  %1 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7385
  %bands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %1, i32 0, i32 18, !dbg !7386
  %arrayidx = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands, i64 0, i64 %idxprom, !dbg !7385
  store %struct.DCAXllBand* %arrayidx, %struct.DCAXllBand** %b, align 8, !dbg !7383
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7387, metadata !2040), !dbg !7388
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7389, metadata !2040), !dbg !7390
  call void @llvm.dbg.declare(metadata i32* %k, metadata !7391, metadata !2040), !dbg !7392
  %2 = load i32, i32* %seg.addr, align 4, !dbg !7393
  %tobool = icmp ne i32 %2, 0, !dbg !7393
  br i1 %tobool, label %land.lhs.true, label %if.then, !dbg !7395

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7396
  %gb = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %3, i32 0, i32 1, !dbg !7398
  %call = call i32 @get_bits1(%struct.GetBitContext* %gb), !dbg !7399
  %tobool1 = icmp ne i32 %call, 0, !dbg !7399
  br i1 %tobool1, label %if.end97, label %if.then, !dbg !7400

if.then:                                          ; preds = %land.lhs.true, %entry
  %4 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7401
  %gb2 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %4, i32 0, i32 1, !dbg !7403
  %call3 = call i32 @get_bits1(%struct.GetBitContext* %gb2), !dbg !7404
  %5 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7405
  %seg_common = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %5, i32 0, i32 19, !dbg !7406
  store i32 %call3, i32* %seg_common, align 8, !dbg !7407
  %6 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7408
  %seg_common4 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %6, i32 0, i32 19, !dbg !7409
  %7 = load i32, i32* %seg_common4, align 8, !dbg !7409
  %tobool5 = icmp ne i32 %7, 0, !dbg !7408
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !7408

cond.true:                                        ; preds = %if.then
  br label %cond.end, !dbg !7410

cond.false:                                       ; preds = %if.then
  %8 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7412
  %nchannels = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %8, i32 0, i32 0, !dbg !7414
  %9 = load i32, i32* %nchannels, align 32, !dbg !7414
  br label %cond.end, !dbg !7415

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1, %cond.true ], [ %9, %cond.false ], !dbg !7416
  store i32 %cond, i32* %k, align 4, !dbg !7418
  store i32 0, i32* %i, align 4, !dbg !7419
  br label %for.cond, !dbg !7421

for.cond:                                         ; preds = %for.inc, %cond.end
  %10 = load i32, i32* %i, align 4, !dbg !7422
  %11 = load i32, i32* %k, align 4, !dbg !7425
  %cmp = icmp slt i32 %10, %11, !dbg !7426
  br i1 %cmp, label %for.body, label %for.end, !dbg !7427

for.body:                                         ; preds = %for.cond
  %12 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7428
  %gb6 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %12, i32 0, i32 1, !dbg !7430
  %call7 = call i32 @get_bits1(%struct.GetBitContext* %gb6), !dbg !7431
  %13 = load i32, i32* %i, align 4, !dbg !7432
  %idxprom8 = sext i32 %13 to i64, !dbg !7433
  %14 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7433
  %rice_code_flag = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %14, i32 0, i32 20, !dbg !7434
  %arrayidx9 = getelementptr inbounds [8 x i32], [8 x i32]* %rice_code_flag, i64 0, i64 %idxprom8, !dbg !7433
  store i32 %call7, i32* %arrayidx9, align 4, !dbg !7435
  %15 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7436
  %seg_common10 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %15, i32 0, i32 19, !dbg !7438
  %16 = load i32, i32* %seg_common10, align 8, !dbg !7438
  %tobool11 = icmp ne i32 %16, 0, !dbg !7436
  br i1 %tobool11, label %if.else, label %land.lhs.true12, !dbg !7439

land.lhs.true12:                                  ; preds = %for.body
  %17 = load i32, i32* %i, align 4, !dbg !7440
  %idxprom13 = sext i32 %17 to i64, !dbg !7442
  %18 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7442
  %rice_code_flag14 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %18, i32 0, i32 20, !dbg !7443
  %arrayidx15 = getelementptr inbounds [8 x i32], [8 x i32]* %rice_code_flag14, i64 0, i64 %idxprom13, !dbg !7442
  %19 = load i32, i32* %arrayidx15, align 4, !dbg !7442
  %tobool16 = icmp ne i32 %19, 0, !dbg !7442
  br i1 %tobool16, label %land.lhs.true17, label %if.else, !dbg !7444

land.lhs.true17:                                  ; preds = %land.lhs.true12
  %20 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7445
  %gb18 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %20, i32 0, i32 1, !dbg !7447
  %call19 = call i32 @get_bits1(%struct.GetBitContext* %gb18), !dbg !7448
  %tobool20 = icmp ne i32 %call19, 0, !dbg !7448
  br i1 %tobool20, label %if.then21, label %if.else, !dbg !7449

if.then21:                                        ; preds = %land.lhs.true17
  %21 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7450
  %gb22 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %21, i32 0, i32 1, !dbg !7451
  %22 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7452
  %nabits = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %22, i32 0, i32 17, !dbg !7453
  %23 = load i32, i32* %nabits, align 4, !dbg !7453
  %call23 = call i32 @get_bits(%struct.GetBitContext* %gb22, i32 %23), !dbg !7454
  %add = add i32 %call23, 1, !dbg !7455
  %24 = load i32, i32* %i, align 4, !dbg !7456
  %idxprom24 = sext i32 %24 to i64, !dbg !7457
  %25 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7457
  %bitalloc_hybrid_linear = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %25, i32 0, i32 21, !dbg !7458
  %arrayidx25 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_hybrid_linear, i64 0, i64 %idxprom24, !dbg !7457
  store i32 %add, i32* %arrayidx25, align 4, !dbg !7459
  br label %if.end, !dbg !7457

if.else:                                          ; preds = %land.lhs.true17, %land.lhs.true12, %for.body
  %26 = load i32, i32* %i, align 4, !dbg !7460
  %idxprom26 = sext i32 %26 to i64, !dbg !7461
  %27 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7461
  %bitalloc_hybrid_linear27 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %27, i32 0, i32 21, !dbg !7462
  %arrayidx28 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_hybrid_linear27, i64 0, i64 %idxprom26, !dbg !7461
  store i32 0, i32* %arrayidx28, align 4, !dbg !7463
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then21
  br label %for.inc, !dbg !7464

for.inc:                                          ; preds = %if.end
  %28 = load i32, i32* %i, align 4, !dbg !7465
  %inc = add nsw i32 %28, 1, !dbg !7465
  store i32 %inc, i32* %i, align 4, !dbg !7465
  br label %for.cond, !dbg !7467, !llvm.loop !7468

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !7470
  br label %for.cond29, !dbg !7472

for.cond29:                                       ; preds = %for.inc94, %for.end
  %29 = load i32, i32* %i, align 4, !dbg !7473
  %30 = load i32, i32* %k, align 4, !dbg !7476
  %cmp30 = icmp slt i32 %29, %30, !dbg !7477
  br i1 %cmp30, label %for.body31, label %for.end96, !dbg !7478

for.body31:                                       ; preds = %for.cond29
  %31 = load i32, i32* %seg.addr, align 4, !dbg !7479
  %cmp32 = icmp eq i32 %31, 0, !dbg !7482
  br i1 %cmp32, label %if.then33, label %if.else66, !dbg !7483

if.then33:                                        ; preds = %for.body31
  %32 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7484
  %gb34 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %32, i32 0, i32 1, !dbg !7486
  %33 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7487
  %nabits35 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %33, i32 0, i32 17, !dbg !7488
  %34 = load i32, i32* %nabits35, align 4, !dbg !7488
  %call36 = call i32 @get_bits(%struct.GetBitContext* %gb34, i32 %34), !dbg !7489
  %35 = load i32, i32* %i, align 4, !dbg !7490
  %idxprom37 = sext i32 %35 to i64, !dbg !7491
  %36 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7491
  %bitalloc_part_a = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %36, i32 0, i32 22, !dbg !7492
  %arrayidx38 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_part_a, i64 0, i64 %idxprom37, !dbg !7491
  store i32 %call36, i32* %arrayidx38, align 4, !dbg !7493
  %37 = load i32, i32* %i, align 4, !dbg !7494
  %idxprom39 = sext i32 %37 to i64, !dbg !7496
  %38 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7496
  %rice_code_flag40 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %38, i32 0, i32 20, !dbg !7497
  %arrayidx41 = getelementptr inbounds [8 x i32], [8 x i32]* %rice_code_flag40, i64 0, i64 %idxprom39, !dbg !7496
  %39 = load i32, i32* %arrayidx41, align 4, !dbg !7496
  %tobool42 = icmp ne i32 %39, 0, !dbg !7496
  br i1 %tobool42, label %if.end53, label %land.lhs.true43, !dbg !7498

land.lhs.true43:                                  ; preds = %if.then33
  %40 = load i32, i32* %i, align 4, !dbg !7499
  %idxprom44 = sext i32 %40 to i64, !dbg !7501
  %41 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7501
  %bitalloc_part_a45 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %41, i32 0, i32 22, !dbg !7502
  %arrayidx46 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_part_a45, i64 0, i64 %idxprom44, !dbg !7501
  %42 = load i32, i32* %arrayidx46, align 4, !dbg !7501
  %tobool47 = icmp ne i32 %42, 0, !dbg !7501
  br i1 %tobool47, label %if.then48, label %if.end53, !dbg !7503

if.then48:                                        ; preds = %land.lhs.true43
  %43 = load i32, i32* %i, align 4, !dbg !7504
  %idxprom49 = sext i32 %43 to i64, !dbg !7505
  %44 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7505
  %bitalloc_part_a50 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %44, i32 0, i32 22, !dbg !7506
  %arrayidx51 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_part_a50, i64 0, i64 %idxprom49, !dbg !7505
  %45 = load i32, i32* %arrayidx51, align 4, !dbg !7507
  %inc52 = add nsw i32 %45, 1, !dbg !7507
  store i32 %inc52, i32* %arrayidx51, align 4, !dbg !7507
  br label %if.end53, !dbg !7505

if.end53:                                         ; preds = %if.then48, %land.lhs.true43, %if.then33
  %46 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7508
  %seg_common54 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %46, i32 0, i32 19, !dbg !7510
  %47 = load i32, i32* %seg_common54, align 8, !dbg !7510
  %tobool55 = icmp ne i32 %47, 0, !dbg !7508
  br i1 %tobool55, label %if.else61, label %if.then56, !dbg !7511

if.then56:                                        ; preds = %if.end53
  %48 = load i32, i32* %i, align 4, !dbg !7512
  %idxprom57 = sext i32 %48 to i64, !dbg !7513
  %49 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !7513
  %adapt_pred_order = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %49, i32 0, i32 3, !dbg !7514
  %arrayidx58 = getelementptr inbounds [8 x i32], [8 x i32]* %adapt_pred_order, i64 0, i64 %idxprom57, !dbg !7513
  %50 = load i32, i32* %arrayidx58, align 4, !dbg !7513
  %51 = load i32, i32* %i, align 4, !dbg !7515
  %idxprom59 = sext i32 %51 to i64, !dbg !7516
  %52 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7516
  %nsamples_part_a = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %52, i32 0, i32 24, !dbg !7517
  %arrayidx60 = getelementptr inbounds [8 x i32], [8 x i32]* %nsamples_part_a, i64 0, i64 %idxprom59, !dbg !7516
  store i32 %50, i32* %arrayidx60, align 4, !dbg !7518
  br label %if.end65, !dbg !7516

if.else61:                                        ; preds = %if.end53
  %53 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !7519
  %highest_pred_order = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %53, i32 0, i32 4, !dbg !7520
  %54 = load i32, i32* %highest_pred_order, align 4, !dbg !7520
  %55 = load i32, i32* %i, align 4, !dbg !7521
  %idxprom62 = sext i32 %55 to i64, !dbg !7522
  %56 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7522
  %nsamples_part_a63 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %56, i32 0, i32 24, !dbg !7523
  %arrayidx64 = getelementptr inbounds [8 x i32], [8 x i32]* %nsamples_part_a63, i64 0, i64 %idxprom62, !dbg !7522
  store i32 %54, i32* %arrayidx64, align 4, !dbg !7524
  br label %if.end65

if.end65:                                         ; preds = %if.else61, %if.then56
  br label %if.end73, !dbg !7525

if.else66:                                        ; preds = %for.body31
  %57 = load i32, i32* %i, align 4, !dbg !7526
  %idxprom67 = sext i32 %57 to i64, !dbg !7528
  %58 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7528
  %bitalloc_part_a68 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %58, i32 0, i32 22, !dbg !7529
  %arrayidx69 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_part_a68, i64 0, i64 %idxprom67, !dbg !7528
  store i32 0, i32* %arrayidx69, align 4, !dbg !7530
  %59 = load i32, i32* %i, align 4, !dbg !7531
  %idxprom70 = sext i32 %59 to i64, !dbg !7532
  %60 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7532
  %nsamples_part_a71 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %60, i32 0, i32 24, !dbg !7533
  %arrayidx72 = getelementptr inbounds [8 x i32], [8 x i32]* %nsamples_part_a71, i64 0, i64 %idxprom70, !dbg !7532
  store i32 0, i32* %arrayidx72, align 4, !dbg !7534
  br label %if.end73

if.end73:                                         ; preds = %if.else66, %if.end65
  %61 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7535
  %gb74 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %61, i32 0, i32 1, !dbg !7536
  %62 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7537
  %nabits75 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %62, i32 0, i32 17, !dbg !7538
  %63 = load i32, i32* %nabits75, align 4, !dbg !7538
  %call76 = call i32 @get_bits(%struct.GetBitContext* %gb74, i32 %63), !dbg !7539
  %64 = load i32, i32* %i, align 4, !dbg !7540
  %idxprom77 = sext i32 %64 to i64, !dbg !7541
  %65 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7541
  %bitalloc_part_b = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %65, i32 0, i32 23, !dbg !7542
  %arrayidx78 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_part_b, i64 0, i64 %idxprom77, !dbg !7541
  store i32 %call76, i32* %arrayidx78, align 4, !dbg !7543
  %66 = load i32, i32* %i, align 4, !dbg !7544
  %idxprom79 = sext i32 %66 to i64, !dbg !7546
  %67 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7546
  %rice_code_flag80 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %67, i32 0, i32 20, !dbg !7547
  %arrayidx81 = getelementptr inbounds [8 x i32], [8 x i32]* %rice_code_flag80, i64 0, i64 %idxprom79, !dbg !7546
  %68 = load i32, i32* %arrayidx81, align 4, !dbg !7546
  %tobool82 = icmp ne i32 %68, 0, !dbg !7546
  br i1 %tobool82, label %if.end93, label %land.lhs.true83, !dbg !7548

land.lhs.true83:                                  ; preds = %if.end73
  %69 = load i32, i32* %i, align 4, !dbg !7549
  %idxprom84 = sext i32 %69 to i64, !dbg !7551
  %70 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7551
  %bitalloc_part_b85 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %70, i32 0, i32 23, !dbg !7552
  %arrayidx86 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_part_b85, i64 0, i64 %idxprom84, !dbg !7551
  %71 = load i32, i32* %arrayidx86, align 4, !dbg !7551
  %tobool87 = icmp ne i32 %71, 0, !dbg !7551
  br i1 %tobool87, label %if.then88, label %if.end93, !dbg !7553

if.then88:                                        ; preds = %land.lhs.true83
  %72 = load i32, i32* %i, align 4, !dbg !7554
  %idxprom89 = sext i32 %72 to i64, !dbg !7555
  %73 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7555
  %bitalloc_part_b90 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %73, i32 0, i32 23, !dbg !7556
  %arrayidx91 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_part_b90, i64 0, i64 %idxprom89, !dbg !7555
  %74 = load i32, i32* %arrayidx91, align 4, !dbg !7557
  %inc92 = add nsw i32 %74, 1, !dbg !7557
  store i32 %inc92, i32* %arrayidx91, align 4, !dbg !7557
  br label %if.end93, !dbg !7555

if.end93:                                         ; preds = %if.then88, %land.lhs.true83, %if.end73
  br label %for.inc94, !dbg !7558

for.inc94:                                        ; preds = %if.end93
  %75 = load i32, i32* %i, align 4, !dbg !7559
  %inc95 = add nsw i32 %75, 1, !dbg !7559
  store i32 %inc95, i32* %i, align 4, !dbg !7559
  br label %for.cond29, !dbg !7561, !llvm.loop !7562

for.end96:                                        ; preds = %for.cond29
  br label %if.end97, !dbg !7564

if.end97:                                         ; preds = %for.end96, %land.lhs.true
  store i32 0, i32* %i, align 4, !dbg !7565
  br label %for.cond98, !dbg !7567

for.cond98:                                       ; preds = %for.inc206, %if.end97
  %76 = load i32, i32* %i, align 4, !dbg !7568
  %77 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7571
  %nchannels99 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %77, i32 0, i32 0, !dbg !7572
  %78 = load i32, i32* %nchannels99, align 32, !dbg !7572
  %cmp100 = icmp slt i32 %76, %78, !dbg !7573
  br i1 %cmp100, label %for.body101, label %for.end208, !dbg !7574

for.body101:                                      ; preds = %for.cond98
  call void @llvm.dbg.declare(metadata i32** %part_a, metadata !7575, metadata !2040), !dbg !7577
  call void @llvm.dbg.declare(metadata i32** %part_b, metadata !7578, metadata !2040), !dbg !7579
  call void @llvm.dbg.declare(metadata i32* %nsamples_part_b, metadata !7580, metadata !2040), !dbg !7581
  %79 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7582
  %seg_common102 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %79, i32 0, i32 19, !dbg !7583
  %80 = load i32, i32* %seg_common102, align 8, !dbg !7583
  %tobool103 = icmp ne i32 %80, 0, !dbg !7582
  br i1 %tobool103, label %cond.true104, label %cond.false105, !dbg !7582

cond.true104:                                     ; preds = %for.body101
  br label %cond.end106, !dbg !7584

cond.false105:                                    ; preds = %for.body101
  %81 = load i32, i32* %i, align 4, !dbg !7586
  br label %cond.end106, !dbg !7588

cond.end106:                                      ; preds = %cond.false105, %cond.true104
  %cond107 = phi i32 [ 0, %cond.true104 ], [ %81, %cond.false105 ], !dbg !7589
  store i32 %cond107, i32* %k, align 4, !dbg !7591
  %82 = load i32, i32* %i, align 4, !dbg !7592
  %idxprom108 = sext i32 %82 to i64, !dbg !7593
  %83 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !7593
  %msb_sample_buffer = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %83, i32 0, i32 11, !dbg !7594
  %arrayidx109 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer, i64 0, i64 %idxprom108, !dbg !7593
  %84 = load i32*, i32** %arrayidx109, align 8, !dbg !7593
  %85 = load i32, i32* %seg.addr, align 4, !dbg !7595
  %86 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7596
  %nsegsamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %86, i32 0, i32 6, !dbg !7597
  %87 = load i32, i32* %nsegsamples, align 8, !dbg !7597
  %mul = mul nsw i32 %85, %87, !dbg !7598
  %idx.ext = sext i32 %mul to i64, !dbg !7599
  %add.ptr = getelementptr inbounds i32, i32* %84, i64 %idx.ext, !dbg !7599
  store i32* %add.ptr, i32** %part_a, align 8, !dbg !7600
  %88 = load i32*, i32** %part_a, align 8, !dbg !7601
  %89 = load i32, i32* %k, align 4, !dbg !7602
  %idxprom110 = sext i32 %89 to i64, !dbg !7603
  %90 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7603
  %nsamples_part_a111 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %90, i32 0, i32 24, !dbg !7604
  %arrayidx112 = getelementptr inbounds [8 x i32], [8 x i32]* %nsamples_part_a111, i64 0, i64 %idxprom110, !dbg !7603
  %91 = load i32, i32* %arrayidx112, align 4, !dbg !7603
  %idx.ext113 = sext i32 %91 to i64, !dbg !7605
  %add.ptr114 = getelementptr inbounds i32, i32* %88, i64 %idx.ext113, !dbg !7605
  store i32* %add.ptr114, i32** %part_b, align 8, !dbg !7606
  %92 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7607
  %nsegsamples115 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %92, i32 0, i32 6, !dbg !7608
  %93 = load i32, i32* %nsegsamples115, align 8, !dbg !7608
  %94 = load i32, i32* %k, align 4, !dbg !7609
  %idxprom116 = sext i32 %94 to i64, !dbg !7610
  %95 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7610
  %nsamples_part_a117 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %95, i32 0, i32 24, !dbg !7611
  %arrayidx118 = getelementptr inbounds [8 x i32], [8 x i32]* %nsamples_part_a117, i64 0, i64 %idxprom116, !dbg !7610
  %96 = load i32, i32* %arrayidx118, align 4, !dbg !7610
  %sub = sub nsw i32 %93, %96, !dbg !7612
  store i32 %sub, i32* %nsamples_part_b, align 4, !dbg !7613
  %97 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7614
  %gb119 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %97, i32 0, i32 1, !dbg !7616
  %call120 = call i32 @get_bits_left(%struct.GetBitContext* %gb119), !dbg !7617
  %cmp121 = icmp slt i32 %call120, 0, !dbg !7618
  br i1 %cmp121, label %if.then122, label %if.end123, !dbg !7619

if.then122:                                       ; preds = %cond.end106
  store i32 -1094995529, i32* %retval, align 4, !dbg !7620
  br label %return, !dbg !7620

if.end123:                                        ; preds = %cond.end106
  %98 = load i32, i32* %k, align 4, !dbg !7621
  %idxprom124 = sext i32 %98 to i64, !dbg !7623
  %99 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7623
  %rice_code_flag125 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %99, i32 0, i32 20, !dbg !7624
  %arrayidx126 = getelementptr inbounds [8 x i32], [8 x i32]* %rice_code_flag125, i64 0, i64 %idxprom124, !dbg !7623
  %100 = load i32, i32* %arrayidx126, align 4, !dbg !7623
  %tobool127 = icmp ne i32 %100, 0, !dbg !7623
  br i1 %tobool127, label %if.else140, label %if.then128, !dbg !7625

if.then128:                                       ; preds = %if.end123
  %101 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7626
  %gb129 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %101, i32 0, i32 1, !dbg !7628
  %102 = load i32*, i32** %part_a, align 8, !dbg !7629
  %103 = load i32, i32* %k, align 4, !dbg !7630
  %idxprom130 = sext i32 %103 to i64, !dbg !7631
  %104 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7631
  %nsamples_part_a131 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %104, i32 0, i32 24, !dbg !7632
  %arrayidx132 = getelementptr inbounds [8 x i32], [8 x i32]* %nsamples_part_a131, i64 0, i64 %idxprom130, !dbg !7631
  %105 = load i32, i32* %arrayidx132, align 4, !dbg !7631
  %106 = load i32, i32* %k, align 4, !dbg !7633
  %idxprom133 = sext i32 %106 to i64, !dbg !7634
  %107 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7634
  %bitalloc_part_a134 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %107, i32 0, i32 22, !dbg !7635
  %arrayidx135 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_part_a134, i64 0, i64 %idxprom133, !dbg !7634
  %108 = load i32, i32* %arrayidx135, align 4, !dbg !7634
  call void @get_linear_array(%struct.GetBitContext* %gb129, i32* %102, i32 %105, i32 %108), !dbg !7636
  %109 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7637
  %gb136 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %109, i32 0, i32 1, !dbg !7638
  %110 = load i32*, i32** %part_b, align 8, !dbg !7639
  %111 = load i32, i32* %nsamples_part_b, align 4, !dbg !7640
  %112 = load i32, i32* %k, align 4, !dbg !7641
  %idxprom137 = sext i32 %112 to i64, !dbg !7642
  %113 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7642
  %bitalloc_part_b138 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %113, i32 0, i32 23, !dbg !7643
  %arrayidx139 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_part_b138, i64 0, i64 %idxprom137, !dbg !7642
  %114 = load i32, i32* %arrayidx139, align 4, !dbg !7642
  call void @get_linear_array(%struct.GetBitContext* %gb136, i32* %110, i32 %111, i32 %114), !dbg !7644
  br label %if.end205, !dbg !7645

if.else140:                                       ; preds = %if.end123
  %115 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7646
  %gb141 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %115, i32 0, i32 1, !dbg !7648
  %116 = load i32*, i32** %part_a, align 8, !dbg !7649
  %117 = load i32, i32* %k, align 4, !dbg !7650
  %idxprom142 = sext i32 %117 to i64, !dbg !7651
  %118 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7651
  %nsamples_part_a143 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %118, i32 0, i32 24, !dbg !7652
  %arrayidx144 = getelementptr inbounds [8 x i32], [8 x i32]* %nsamples_part_a143, i64 0, i64 %idxprom142, !dbg !7651
  %119 = load i32, i32* %arrayidx144, align 4, !dbg !7651
  %120 = load i32, i32* %k, align 4, !dbg !7653
  %idxprom145 = sext i32 %120 to i64, !dbg !7654
  %121 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7654
  %bitalloc_part_a146 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %121, i32 0, i32 22, !dbg !7655
  %arrayidx147 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_part_a146, i64 0, i64 %idxprom145, !dbg !7654
  %122 = load i32, i32* %arrayidx147, align 4, !dbg !7654
  call void @get_rice_array(%struct.GetBitContext* %gb141, i32* %116, i32 %119, i32 %122), !dbg !7656
  %123 = load i32, i32* %k, align 4, !dbg !7657
  %idxprom148 = sext i32 %123 to i64, !dbg !7659
  %124 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7659
  %bitalloc_hybrid_linear149 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %124, i32 0, i32 21, !dbg !7660
  %arrayidx150 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_hybrid_linear149, i64 0, i64 %idxprom148, !dbg !7659
  %125 = load i32, i32* %arrayidx150, align 4, !dbg !7659
  %tobool151 = icmp ne i32 %125, 0, !dbg !7659
  br i1 %tobool151, label %if.then152, label %if.else199, !dbg !7661

if.then152:                                       ; preds = %if.else140
  call void @llvm.dbg.declare(metadata i32* %nisosamples, metadata !7662, metadata !2040), !dbg !7664
  %126 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7665
  %gb153 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %126, i32 0, i32 1, !dbg !7666
  %127 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7667
  %nsegsamples_log2 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %127, i32 0, i32 5, !dbg !7668
  %128 = load i32, i32* %nsegsamples_log2, align 4, !dbg !7668
  %call154 = call i32 @get_bits(%struct.GetBitContext* %gb153, i32 %128), !dbg !7669
  store i32 %call154, i32* %nisosamples, align 4, !dbg !7664
  %129 = load i32*, i32** %part_b, align 8, !dbg !7670
  %130 = bitcast i32* %129 to i8*, !dbg !7671
  %131 = load i32, i32* %nsamples_part_b, align 4, !dbg !7672
  %conv = sext i32 %131 to i64, !dbg !7672
  %mul155 = mul i64 4, %conv, !dbg !7673
  call void @llvm.memset.p0i8.i64(i8* %130, i8 0, i64 %mul155, i32 4, i1 false), !dbg !7671
  store i32 0, i32* %j, align 4, !dbg !7674
  br label %for.cond156, !dbg !7676

for.cond156:                                      ; preds = %for.inc169, %if.then152
  %132 = load i32, i32* %j, align 4, !dbg !7677
  %133 = load i32, i32* %nisosamples, align 4, !dbg !7680
  %cmp157 = icmp slt i32 %132, %133, !dbg !7681
  br i1 %cmp157, label %for.body159, label %for.end171, !dbg !7682

for.body159:                                      ; preds = %for.cond156
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !7683, metadata !2040), !dbg !7685
  %134 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7686
  %gb160 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %134, i32 0, i32 1, !dbg !7687
  %135 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7688
  %nsegsamples_log2161 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %135, i32 0, i32 5, !dbg !7689
  %136 = load i32, i32* %nsegsamples_log2161, align 4, !dbg !7689
  %call162 = call i32 @get_bits(%struct.GetBitContext* %gb160, i32 %136), !dbg !7690
  store i32 %call162, i32* %loc, align 4, !dbg !7685
  %137 = load i32, i32* %loc, align 4, !dbg !7691
  %138 = load i32, i32* %nsamples_part_b, align 4, !dbg !7693
  %cmp163 = icmp sge i32 %137, %138, !dbg !7694
  br i1 %cmp163, label %if.then165, label %if.end166, !dbg !7695

if.then165:                                       ; preds = %for.body159
  %139 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7696
  %avctx = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %139, i32 0, i32 0, !dbg !7698
  %140 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx, align 32, !dbg !7698
  %141 = bitcast %struct.AVCodecContext* %140 to i8*, !dbg !7696
  call void (i8*, i32, i8*, ...) @av_log(i8* %141, i32 16, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.38, i32 0, i32 0)), !dbg !7699
  store i32 -1094995529, i32* %retval, align 4, !dbg !7700
  br label %return, !dbg !7700

if.end166:                                        ; preds = %for.body159
  %142 = load i32, i32* %loc, align 4, !dbg !7701
  %idxprom167 = sext i32 %142 to i64, !dbg !7702
  %143 = load i32*, i32** %part_b, align 8, !dbg !7702
  %arrayidx168 = getelementptr inbounds i32, i32* %143, i64 %idxprom167, !dbg !7702
  store i32 -1, i32* %arrayidx168, align 4, !dbg !7703
  br label %for.inc169, !dbg !7704

for.inc169:                                       ; preds = %if.end166
  %144 = load i32, i32* %j, align 4, !dbg !7705
  %inc170 = add nsw i32 %144, 1, !dbg !7705
  store i32 %inc170, i32* %j, align 4, !dbg !7705
  br label %for.cond156, !dbg !7707, !llvm.loop !7708

for.end171:                                       ; preds = %for.cond156
  store i32 0, i32* %j, align 4, !dbg !7710
  br label %for.cond172, !dbg !7712

for.cond172:                                      ; preds = %for.inc196, %for.end171
  %145 = load i32, i32* %j, align 4, !dbg !7713
  %146 = load i32, i32* %nsamples_part_b, align 4, !dbg !7716
  %cmp173 = icmp slt i32 %145, %146, !dbg !7717
  br i1 %cmp173, label %for.body175, label %for.end198, !dbg !7718

for.body175:                                      ; preds = %for.cond172
  %147 = load i32, i32* %j, align 4, !dbg !7719
  %idxprom176 = sext i32 %147 to i64, !dbg !7722
  %148 = load i32*, i32** %part_b, align 8, !dbg !7722
  %arrayidx177 = getelementptr inbounds i32, i32* %148, i64 %idxprom176, !dbg !7722
  %149 = load i32, i32* %arrayidx177, align 4, !dbg !7722
  %tobool178 = icmp ne i32 %149, 0, !dbg !7722
  br i1 %tobool178, label %if.then179, label %if.else187, !dbg !7723

if.then179:                                       ; preds = %for.body175
  %150 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7724
  %gb180 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %150, i32 0, i32 1, !dbg !7725
  %151 = load i32, i32* %k, align 4, !dbg !7726
  %idxprom181 = sext i32 %151 to i64, !dbg !7727
  %152 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7727
  %bitalloc_hybrid_linear182 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %152, i32 0, i32 21, !dbg !7728
  %arrayidx183 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_hybrid_linear182, i64 0, i64 %idxprom181, !dbg !7727
  %153 = load i32, i32* %arrayidx183, align 4, !dbg !7727
  %call184 = call i32 @get_linear(%struct.GetBitContext* %gb180, i32 %153), !dbg !7729
  %154 = load i32, i32* %j, align 4, !dbg !7730
  %idxprom185 = sext i32 %154 to i64, !dbg !7731
  %155 = load i32*, i32** %part_b, align 8, !dbg !7731
  %arrayidx186 = getelementptr inbounds i32, i32* %155, i64 %idxprom185, !dbg !7731
  store i32 %call184, i32* %arrayidx186, align 4, !dbg !7732
  br label %if.end195, !dbg !7731

if.else187:                                       ; preds = %for.body175
  %156 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7733
  %gb188 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %156, i32 0, i32 1, !dbg !7734
  %157 = load i32, i32* %k, align 4, !dbg !7735
  %idxprom189 = sext i32 %157 to i64, !dbg !7736
  %158 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7736
  %bitalloc_part_b190 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %158, i32 0, i32 23, !dbg !7737
  %arrayidx191 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_part_b190, i64 0, i64 %idxprom189, !dbg !7736
  %159 = load i32, i32* %arrayidx191, align 4, !dbg !7736
  %call192 = call i32 @get_rice(%struct.GetBitContext* %gb188, i32 %159), !dbg !7738
  %160 = load i32, i32* %j, align 4, !dbg !7739
  %idxprom193 = sext i32 %160 to i64, !dbg !7740
  %161 = load i32*, i32** %part_b, align 8, !dbg !7740
  %arrayidx194 = getelementptr inbounds i32, i32* %161, i64 %idxprom193, !dbg !7740
  store i32 %call192, i32* %arrayidx194, align 4, !dbg !7741
  br label %if.end195

if.end195:                                        ; preds = %if.else187, %if.then179
  br label %for.inc196, !dbg !7742

for.inc196:                                       ; preds = %if.end195
  %162 = load i32, i32* %j, align 4, !dbg !7743
  %inc197 = add nsw i32 %162, 1, !dbg !7743
  store i32 %inc197, i32* %j, align 4, !dbg !7743
  br label %for.cond172, !dbg !7745, !llvm.loop !7746

for.end198:                                       ; preds = %for.cond172
  br label %if.end204, !dbg !7748

if.else199:                                       ; preds = %if.else140
  %163 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7749
  %gb200 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %163, i32 0, i32 1, !dbg !7751
  %164 = load i32*, i32** %part_b, align 8, !dbg !7752
  %165 = load i32, i32* %nsamples_part_b, align 4, !dbg !7753
  %166 = load i32, i32* %k, align 4, !dbg !7754
  %idxprom201 = sext i32 %166 to i64, !dbg !7755
  %167 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7755
  %bitalloc_part_b202 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %167, i32 0, i32 23, !dbg !7756
  %arrayidx203 = getelementptr inbounds [8 x i32], [8 x i32]* %bitalloc_part_b202, i64 0, i64 %idxprom201, !dbg !7755
  %168 = load i32, i32* %arrayidx203, align 4, !dbg !7755
  call void @get_rice_array(%struct.GetBitContext* %gb200, i32* %164, i32 %165, i32 %168), !dbg !7757
  br label %if.end204

if.end204:                                        ; preds = %if.else199, %for.end198
  br label %if.end205

if.end205:                                        ; preds = %if.end204, %if.then128
  br label %for.inc206, !dbg !7758

for.inc206:                                       ; preds = %if.end205
  %169 = load i32, i32* %i, align 4, !dbg !7759
  %inc207 = add nsw i32 %169, 1, !dbg !7759
  store i32 %inc207, i32* %i, align 4, !dbg !7759
  br label %for.cond98, !dbg !7761, !llvm.loop !7762

for.end208:                                       ; preds = %for.cond98
  %170 = load i32, i32* %seg.addr, align 4, !dbg !7764
  %cmp209 = icmp eq i32 %170, 0, !dbg !7766
  br i1 %cmp209, label %land.lhs.true211, label %if.end239, !dbg !7767

land.lhs.true211:                                 ; preds = %for.end208
  %171 = load i32, i32* %band.addr, align 4, !dbg !7768
  %cmp212 = icmp eq i32 %171, 1, !dbg !7770
  br i1 %cmp212, label %if.then214, label %if.end239, !dbg !7771

if.then214:                                       ; preds = %land.lhs.true211
  call void @llvm.dbg.declare(metadata i32* %nbits, metadata !7772, metadata !2040), !dbg !7774
  %172 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7775
  %gb215 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %172, i32 0, i32 1, !dbg !7776
  %call216 = call i32 @get_bits(%struct.GetBitContext* %gb215, i32 5), !dbg !7777
  %add217 = add i32 %call216, 1, !dbg !7778
  store i32 %add217, i32* %nbits, align 4, !dbg !7774
  store i32 0, i32* %i, align 4, !dbg !7779
  br label %for.cond218, !dbg !7781

for.cond218:                                      ; preds = %for.inc236, %if.then214
  %173 = load i32, i32* %i, align 4, !dbg !7782
  %174 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7785
  %nchannels219 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %174, i32 0, i32 0, !dbg !7786
  %175 = load i32, i32* %nchannels219, align 32, !dbg !7786
  %cmp220 = icmp slt i32 %173, %175, !dbg !7787
  br i1 %cmp220, label %for.body222, label %for.end238, !dbg !7788

for.body222:                                      ; preds = %for.cond218
  store i32 1, i32* %j, align 4, !dbg !7789
  br label %for.cond223, !dbg !7791

for.cond223:                                      ; preds = %for.inc233, %for.body222
  %176 = load i32, i32* %j, align 4, !dbg !7792
  %cmp224 = icmp slt i32 %176, 8, !dbg !7795
  br i1 %cmp224, label %for.body226, label %for.end235, !dbg !7796

for.body226:                                      ; preds = %for.cond223
  %177 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7797
  %gb227 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %177, i32 0, i32 1, !dbg !7798
  %178 = load i32, i32* %nbits, align 4, !dbg !7799
  %call228 = call i32 @get_sbits_long(%struct.GetBitContext* %gb227, i32 %178), !dbg !7800
  %179 = load i32, i32* %j, align 4, !dbg !7801
  %idxprom229 = sext i32 %179 to i64, !dbg !7802
  %180 = load i32, i32* %i, align 4, !dbg !7803
  %idxprom230 = sext i32 %180 to i64, !dbg !7802
  %181 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7802
  %deci_history = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %181, i32 0, i32 26, !dbg !7804
  %arrayidx231 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %deci_history, i64 0, i64 %idxprom230, !dbg !7802
  %arrayidx232 = getelementptr inbounds [8 x i32], [8 x i32]* %arrayidx231, i64 0, i64 %idxprom229, !dbg !7802
  store i32 %call228, i32* %arrayidx232, align 4, !dbg !7805
  br label %for.inc233, !dbg !7802

for.inc233:                                       ; preds = %for.body226
  %182 = load i32, i32* %j, align 4, !dbg !7806
  %inc234 = add nsw i32 %182, 1, !dbg !7806
  store i32 %inc234, i32* %j, align 4, !dbg !7806
  br label %for.cond223, !dbg !7808, !llvm.loop !7809

for.end235:                                       ; preds = %for.cond223
  br label %for.inc236, !dbg !7811

for.inc236:                                       ; preds = %for.end235
  %183 = load i32, i32* %i, align 4, !dbg !7813
  %inc237 = add nsw i32 %183, 1, !dbg !7813
  store i32 %inc237, i32* %i, align 4, !dbg !7813
  br label %for.cond218, !dbg !7815, !llvm.loop !7816

for.end238:                                       ; preds = %for.cond218
  br label %if.end239, !dbg !7818

if.end239:                                        ; preds = %for.end238, %land.lhs.true211, %for.end208
  %184 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !7819
  %lsb_section_size = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %184, i32 0, i32 8, !dbg !7821
  %185 = load i32, i32* %lsb_section_size, align 4, !dbg !7821
  %tobool240 = icmp ne i32 %185, 0, !dbg !7819
  br i1 %tobool240, label %if.then241, label %if.end275, !dbg !7822

if.then241:                                       ; preds = %if.end239
  %186 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7823
  %gb242 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %186, i32 0, i32 1, !dbg !7826
  %187 = load i32, i32* %band_data_end.addr, align 4, !dbg !7827
  %188 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !7828
  %lsb_section_size243 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %188, i32 0, i32 8, !dbg !7829
  %189 = load i32, i32* %lsb_section_size243, align 4, !dbg !7829
  %mul244 = mul nsw i32 %189, 8, !dbg !7830
  %sub245 = sub nsw i32 %187, %mul244, !dbg !7831
  %call246 = call i32 @ff_dca_seek_bits(%struct.GetBitContext* %gb242, i32 %sub245), !dbg !7832
  %tobool247 = icmp ne i32 %call246, 0, !dbg !7832
  br i1 %tobool247, label %if.then248, label %if.end250, !dbg !7833

if.then248:                                       ; preds = %if.then241
  %190 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7834
  %avctx249 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %190, i32 0, i32 0, !dbg !7836
  %191 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx249, align 32, !dbg !7836
  %192 = bitcast %struct.AVCodecContext* %191 to i8*, !dbg !7834
  call void (i8*, i32, i8*, ...) @av_log(i8* %192, i32 16, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.39, i32 0, i32 0)), !dbg !7837
  store i32 -1094995529, i32* %retval, align 4, !dbg !7838
  br label %return, !dbg !7838

if.end250:                                        ; preds = %if.then241
  store i32 0, i32* %i, align 4, !dbg !7839
  br label %for.cond251, !dbg !7841

for.cond251:                                      ; preds = %for.inc272, %if.end250
  %193 = load i32, i32* %i, align 4, !dbg !7842
  %194 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7845
  %nchannels252 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %194, i32 0, i32 0, !dbg !7846
  %195 = load i32, i32* %nchannels252, align 32, !dbg !7846
  %cmp253 = icmp slt i32 %193, %195, !dbg !7847
  br i1 %cmp253, label %for.body255, label %for.end274, !dbg !7848

for.body255:                                      ; preds = %for.cond251
  %196 = load i32, i32* %i, align 4, !dbg !7849
  %idxprom256 = sext i32 %196 to i64, !dbg !7852
  %197 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !7852
  %nscalablelsbs = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %197, i32 0, i32 9, !dbg !7853
  %arrayidx257 = getelementptr inbounds [8 x i32], [8 x i32]* %nscalablelsbs, i64 0, i64 %idxprom256, !dbg !7852
  %198 = load i32, i32* %arrayidx257, align 4, !dbg !7852
  %tobool258 = icmp ne i32 %198, 0, !dbg !7852
  br i1 %tobool258, label %if.then259, label %if.end271, !dbg !7854

if.then259:                                       ; preds = %for.body255
  %199 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7855
  %gb260 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %199, i32 0, i32 1, !dbg !7857
  %200 = load i32, i32* %i, align 4, !dbg !7858
  %idxprom261 = sext i32 %200 to i64, !dbg !7859
  %201 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !7859
  %lsb_sample_buffer = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %201, i32 0, i32 12, !dbg !7860
  %arrayidx262 = getelementptr inbounds [8 x i32*], [8 x i32*]* %lsb_sample_buffer, i64 0, i64 %idxprom261, !dbg !7859
  %202 = load i32*, i32** %arrayidx262, align 8, !dbg !7859
  %203 = load i32, i32* %seg.addr, align 4, !dbg !7861
  %204 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7862
  %nsegsamples263 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %204, i32 0, i32 6, !dbg !7863
  %205 = load i32, i32* %nsegsamples263, align 8, !dbg !7863
  %mul264 = mul nsw i32 %203, %205, !dbg !7864
  %idx.ext265 = sext i32 %mul264 to i64, !dbg !7865
  %add.ptr266 = getelementptr inbounds i32, i32* %202, i64 %idx.ext265, !dbg !7865
  %206 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7866
  %nsegsamples267 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %206, i32 0, i32 6, !dbg !7867
  %207 = load i32, i32* %nsegsamples267, align 8, !dbg !7867
  %208 = load i32, i32* %i, align 4, !dbg !7868
  %idxprom268 = sext i32 %208 to i64, !dbg !7869
  %209 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !7869
  %nscalablelsbs269 = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %209, i32 0, i32 9, !dbg !7870
  %arrayidx270 = getelementptr inbounds [8 x i32], [8 x i32]* %nscalablelsbs269, i64 0, i64 %idxprom268, !dbg !7869
  %210 = load i32, i32* %arrayidx270, align 4, !dbg !7869
  call void @get_array(%struct.GetBitContext* %gb260, i32* %add.ptr266, i32 %207, i32 %210), !dbg !7871
  br label %if.end271, !dbg !7872

if.end271:                                        ; preds = %if.then259, %for.body255
  br label %for.inc272, !dbg !7873

for.inc272:                                       ; preds = %if.end271
  %211 = load i32, i32* %i, align 4, !dbg !7874
  %inc273 = add nsw i32 %211, 1, !dbg !7874
  store i32 %inc273, i32* %i, align 4, !dbg !7874
  br label %for.cond251, !dbg !7876, !llvm.loop !7877

for.end274:                                       ; preds = %for.cond251
  br label %if.end275, !dbg !7879

if.end275:                                        ; preds = %for.end274, %if.end239
  %212 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7880
  %gb276 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %212, i32 0, i32 1, !dbg !7882
  %213 = load i32, i32* %band_data_end.addr, align 4, !dbg !7883
  %call277 = call i32 @ff_dca_seek_bits(%struct.GetBitContext* %gb276, i32 %213), !dbg !7884
  %tobool278 = icmp ne i32 %call277, 0, !dbg !7884
  br i1 %tobool278, label %if.then279, label %if.end281, !dbg !7885

if.then279:                                       ; preds = %if.end275
  %214 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7886
  %avctx280 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %214, i32 0, i32 0, !dbg !7888
  %215 = load %struct.AVCodecContext*, %struct.AVCodecContext** %avctx280, align 32, !dbg !7888
  %216 = bitcast %struct.AVCodecContext* %215 to i8*, !dbg !7886
  call void (i8*, i32, i8*, ...) @av_log(i8* %216, i32 16, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.39, i32 0, i32 0)), !dbg !7889
  store i32 -1094995529, i32* %retval, align 4, !dbg !7890
  br label %return, !dbg !7890

if.end281:                                        ; preds = %if.end275
  store i32 0, i32* %retval, align 4, !dbg !7891
  br label %return, !dbg !7891

return:                                           ; preds = %if.end281, %if.then279, %if.then248, %if.then165, %if.then122
  %217 = load i32, i32* %retval, align 4, !dbg !7892
  ret i32 %217, !dbg !7892
}

; Function Attrs: cold nounwind optsize uwtable
define internal void @chs_clear_band_data(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %c, i32 %band, i32 %seg) #2 !dbg !7893 {
entry:
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  %band.addr = alloca i32, align 4
  %seg.addr = alloca i32, align 4
  %b = alloca %struct.DCAXllBand*, align 8
  %i = alloca i32, align 4
  %offset = alloca i32, align 4
  %nsamples = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !7896, metadata !2040), !dbg !7897
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !7898, metadata !2040), !dbg !7899
  store i32 %band, i32* %band.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %band.addr, metadata !7900, metadata !2040), !dbg !7901
  store i32 %seg, i32* %seg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %seg.addr, metadata !7902, metadata !2040), !dbg !7903
  call void @llvm.dbg.declare(metadata %struct.DCAXllBand** %b, metadata !7904, metadata !2040), !dbg !7905
  %0 = load i32, i32* %band.addr, align 4, !dbg !7906
  %idxprom = sext i32 %0 to i64, !dbg !7907
  %1 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7907
  %bands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %1, i32 0, i32 18, !dbg !7908
  %arrayidx = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands, i64 0, i64 %idxprom, !dbg !7907
  store %struct.DCAXllBand* %arrayidx, %struct.DCAXllBand** %b, align 8, !dbg !7905
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7909, metadata !2040), !dbg !7910
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !7911, metadata !2040), !dbg !7912
  call void @llvm.dbg.declare(metadata i32* %nsamples, metadata !7913, metadata !2040), !dbg !7914
  %2 = load i32, i32* %seg.addr, align 4, !dbg !7915
  %cmp = icmp slt i32 %2, 0, !dbg !7917
  br i1 %cmp, label %if.then, label %if.else, !dbg !7918

if.then:                                          ; preds = %entry
  store i32 0, i32* %offset, align 4, !dbg !7919
  %3 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7921
  %nframesamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %3, i32 0, i32 8, !dbg !7922
  %4 = load i32, i32* %nframesamples, align 32, !dbg !7922
  store i32 %4, i32* %nsamples, align 4, !dbg !7923
  br label %if.end, !dbg !7924

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %seg.addr, align 4, !dbg !7925
  %6 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7927
  %nsegsamples = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %6, i32 0, i32 6, !dbg !7928
  %7 = load i32, i32* %nsegsamples, align 8, !dbg !7928
  %mul = mul nsw i32 %5, %7, !dbg !7929
  store i32 %mul, i32* %offset, align 4, !dbg !7930
  %8 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !7931
  %nsegsamples1 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %8, i32 0, i32 6, !dbg !7932
  %9 = load i32, i32* %nsegsamples1, align 8, !dbg !7932
  store i32 %9, i32* %nsamples, align 4, !dbg !7933
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  store i32 0, i32* %i, align 4, !dbg !7934
  br label %for.cond, !dbg !7936

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %i, align 4, !dbg !7937
  %11 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7940
  %nchannels = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %11, i32 0, i32 0, !dbg !7941
  %12 = load i32, i32* %nchannels, align 32, !dbg !7941
  %cmp2 = icmp slt i32 %10, %12, !dbg !7942
  br i1 %cmp2, label %for.body, label %for.end, !dbg !7943

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %i, align 4, !dbg !7944
  %idxprom3 = sext i32 %13 to i64, !dbg !7946
  %14 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !7946
  %msb_sample_buffer = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %14, i32 0, i32 11, !dbg !7947
  %arrayidx4 = getelementptr inbounds [8 x i32*], [8 x i32*]* %msb_sample_buffer, i64 0, i64 %idxprom3, !dbg !7946
  %15 = load i32*, i32** %arrayidx4, align 8, !dbg !7946
  %16 = load i32, i32* %offset, align 4, !dbg !7948
  %idx.ext = sext i32 %16 to i64, !dbg !7949
  %add.ptr = getelementptr inbounds i32, i32* %15, i64 %idx.ext, !dbg !7949
  %17 = bitcast i32* %add.ptr to i8*, !dbg !7950
  %18 = load i32, i32* %nsamples, align 4, !dbg !7951
  %conv = sext i32 %18 to i64, !dbg !7951
  %mul5 = mul i64 %conv, 4, !dbg !7952
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 %mul5, i32 4, i1 false), !dbg !7950
  %19 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !7953
  %lsb_section_size = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %19, i32 0, i32 8, !dbg !7955
  %20 = load i32, i32* %lsb_section_size, align 4, !dbg !7955
  %tobool = icmp ne i32 %20, 0, !dbg !7953
  br i1 %tobool, label %if.then6, label %if.end13, !dbg !7956

if.then6:                                         ; preds = %for.body
  %21 = load i32, i32* %i, align 4, !dbg !7957
  %idxprom7 = sext i32 %21 to i64, !dbg !7958
  %22 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !7958
  %lsb_sample_buffer = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %22, i32 0, i32 12, !dbg !7959
  %arrayidx8 = getelementptr inbounds [8 x i32*], [8 x i32*]* %lsb_sample_buffer, i64 0, i64 %idxprom7, !dbg !7958
  %23 = load i32*, i32** %arrayidx8, align 8, !dbg !7958
  %24 = load i32, i32* %offset, align 4, !dbg !7960
  %idx.ext9 = sext i32 %24 to i64, !dbg !7961
  %add.ptr10 = getelementptr inbounds i32, i32* %23, i64 %idx.ext9, !dbg !7961
  %25 = bitcast i32* %add.ptr10 to i8*, !dbg !7962
  %26 = load i32, i32* %nsamples, align 4, !dbg !7963
  %conv11 = sext i32 %26 to i64, !dbg !7963
  %mul12 = mul i64 %conv11, 4, !dbg !7964
  call void @llvm.memset.p0i8.i64(i8* %25, i8 0, i64 %mul12, i32 4, i1 false), !dbg !7962
  br label %if.end13, !dbg !7962

if.end13:                                         ; preds = %if.then6, %for.body
  br label %for.inc, !dbg !7965

for.inc:                                          ; preds = %if.end13
  %27 = load i32, i32* %i, align 4, !dbg !7966
  %inc = add nsw i32 %27, 1, !dbg !7966
  store i32 %inc, i32* %i, align 4, !dbg !7966
  br label %for.cond, !dbg !7968, !llvm.loop !7969

for.end:                                          ; preds = %for.cond
  %28 = load i32, i32* %seg.addr, align 4, !dbg !7971
  %cmp14 = icmp sle i32 %28, 0, !dbg !7973
  br i1 %cmp14, label %land.lhs.true, label %if.end18, !dbg !7974

land.lhs.true:                                    ; preds = %for.end
  %29 = load i32, i32* %band.addr, align 4, !dbg !7975
  %tobool16 = icmp ne i32 %29, 0, !dbg !7975
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !7977

if.then17:                                        ; preds = %land.lhs.true
  %30 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !7978
  %deci_history = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %30, i32 0, i32 26, !dbg !7979
  %arraydecay = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %deci_history, i32 0, i32 0, !dbg !7980
  %31 = bitcast [8 x i32]* %arraydecay to i8*, !dbg !7980
  call void @llvm.memset.p0i8.i64(i8* %31, i8 0, i64 256, i32 32, i1 false), !dbg !7980
  br label %if.end18, !dbg !7980

if.end18:                                         ; preds = %if.then17, %land.lhs.true, %for.end
  %32 = load i32, i32* %seg.addr, align 4, !dbg !7981
  %cmp19 = icmp slt i32 %32, 0, !dbg !7983
  br i1 %cmp19, label %if.then21, label %if.end24, !dbg !7984

if.then21:                                        ; preds = %if.end18
  %33 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !7985
  %nscalablelsbs = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %33, i32 0, i32 9, !dbg !7987
  %arraydecay22 = getelementptr inbounds [8 x i32], [8 x i32]* %nscalablelsbs, i32 0, i32 0, !dbg !7988
  %34 = bitcast i32* %arraydecay22 to i8*, !dbg !7988
  call void @llvm.memset.p0i8.i64(i8* %34, i8 0, i64 32, i32 8, i1 false), !dbg !7988
  %35 = load %struct.DCAXllBand*, %struct.DCAXllBand** %b, align 8, !dbg !7989
  %bit_width_adjust = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %35, i32 0, i32 10, !dbg !7990
  %arraydecay23 = getelementptr inbounds [8 x i32], [8 x i32]* %bit_width_adjust, i32 0, i32 0, !dbg !7991
  %36 = bitcast i32* %arraydecay23 to i8*, !dbg !7991
  call void @llvm.memset.p0i8.i64(i8* %36, i8 0, i64 32, i32 8, i1 false), !dbg !7991
  br label %if.end24, !dbg !7992

if.end24:                                         ; preds = %if.then21, %if.end18
  ret void, !dbg !7993
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @skip_bits_long(%struct.GetBitContext* %s, i32 %n) #4 !dbg !7994 {
entry:
  %retval.i = alloca i32, align 4
  %a.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i, metadata !7995, metadata !2040), !dbg !7999
  %amin.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amin.addr.i, metadata !8001, metadata !2040), !dbg !8002
  %amax.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amax.addr.i, metadata !8003, metadata !2040), !dbg !8004
  %s.addr = alloca %struct.GetBitContext*, align 8
  %n.addr = alloca i32, align 4
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !8005, metadata !2040), !dbg !8006
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !8007, metadata !2040), !dbg !8008
  %0 = load i32, i32* %n.addr, align 4, !dbg !8009
  %1 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !8010
  %index = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i32 0, i32 2, !dbg !8011
  %2 = load i32, i32* %index, align 8, !dbg !8011
  %sub = sub nsw i32 0, %2, !dbg !8012
  %3 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !8013
  %size_in_bits_plus8 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %3, i32 0, i32 4, !dbg !8014
  %4 = load i32, i32* %size_in_bits_plus8, align 8, !dbg !8014
  %5 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !8015
  %index1 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %5, i32 0, i32 2, !dbg !8016
  %6 = load i32, i32* %index1, align 8, !dbg !8016
  %sub2 = sub nsw i32 %4, %6, !dbg !8017
  store i32 %0, i32* %a.addr.i, align 4, !dbg !8018
  store i32 %sub, i32* %amin.addr.i, align 4, !dbg !8018
  store i32 %sub2, i32* %amax.addr.i, align 4, !dbg !8018
  %7 = load i32, i32* %a.addr.i, align 4, !dbg !8019
  %8 = load i32, i32* %amin.addr.i, align 4, !dbg !8021
  %cmp.i = icmp slt i32 %7, %8, !dbg !8022
  br i1 %cmp.i, label %if.then.i, label %if.else.i, !dbg !8023

if.then.i:                                        ; preds = %entry
  %9 = load i32, i32* %amin.addr.i, align 4, !dbg !8024
  store i32 %9, i32* %retval.i, align 4, !dbg !8026
  br label %av_clip_c.exit, !dbg !8026

if.else.i:                                        ; preds = %entry
  %10 = load i32, i32* %a.addr.i, align 4, !dbg !8027
  %11 = load i32, i32* %amax.addr.i, align 4, !dbg !8029
  %cmp1.i = icmp sgt i32 %10, %11, !dbg !8030
  br i1 %cmp1.i, label %if.then2.i, label %if.else3.i, !dbg !8031

if.then2.i:                                       ; preds = %if.else.i
  %12 = load i32, i32* %amax.addr.i, align 4, !dbg !8032
  store i32 %12, i32* %retval.i, align 4, !dbg !8034
  br label %av_clip_c.exit, !dbg !8034

if.else3.i:                                       ; preds = %if.else.i
  %13 = load i32, i32* %a.addr.i, align 4, !dbg !8035
  store i32 %13, i32* %retval.i, align 4, !dbg !8036
  br label %av_clip_c.exit, !dbg !8036

av_clip_c.exit:                                   ; preds = %if.then.i, %if.then2.i, %if.else3.i
  %14 = load i32, i32* %retval.i, align 4, !dbg !8037
  %15 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !8038
  %index3 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %15, i32 0, i32 2, !dbg !8039
  %16 = load i32, i32* %index3, align 8, !dbg !8040
  %add = add nsw i32 %16, %14, !dbg !8040
  store i32 %add, i32* %index3, align 8, !dbg !8040
  ret void, !dbg !8041
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @get_bits_left(%struct.GetBitContext* %gb) #4 !dbg !8042 {
entry:
  %gb.addr = alloca %struct.GetBitContext*, align 8
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !8045, metadata !2040), !dbg !8046
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !8047
  %size_in_bits = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %0, i32 0, i32 3, !dbg !8048
  %1 = load i32, i32* %size_in_bits, align 4, !dbg !8048
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !8049
  %call = call i32 @get_bits_count(%struct.GetBitContext* %2), !dbg !8050
  %sub = sub nsw i32 %1, %call, !dbg !8051
  ret i32 %sub, !dbg !8052
}

; Function Attrs: nounwind uwtable
define internal void @get_linear_array(%struct.GetBitContext* %gb, i32* %array, i32 %size, i32 %n) #0 !dbg !8053 {
entry:
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %array.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !8056, metadata !2040), !dbg !8057
  store i32* %array, i32** %array.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %array.addr, metadata !8058, metadata !2040), !dbg !8059
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !8060, metadata !2040), !dbg !8061
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !8062, metadata !2040), !dbg !8063
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8064, metadata !2040), !dbg !8065
  %0 = load i32, i32* %n.addr, align 4, !dbg !8066
  %cmp = icmp eq i32 %0, 0, !dbg !8068
  br i1 %cmp, label %if.then, label %if.else, !dbg !8069

if.then:                                          ; preds = %entry
  %1 = load i32*, i32** %array.addr, align 8, !dbg !8070
  %2 = bitcast i32* %1 to i8*, !dbg !8071
  %3 = load i32, i32* %size.addr, align 4, !dbg !8072
  %conv = sext i32 %3 to i64, !dbg !8072
  %mul = mul i64 4, %conv, !dbg !8073
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 %mul, i32 4, i1 false), !dbg !8071
  br label %if.end, !dbg !8071

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !8074
  br label %for.cond, !dbg !8076

for.cond:                                         ; preds = %for.inc, %if.else
  %4 = load i32, i32* %i, align 4, !dbg !8077
  %5 = load i32, i32* %size.addr, align 4, !dbg !8080
  %cmp1 = icmp slt i32 %4, %5, !dbg !8081
  br i1 %cmp1, label %for.body, label %for.end, !dbg !8082

for.body:                                         ; preds = %for.cond
  %6 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !8083
  %7 = load i32, i32* %n.addr, align 4, !dbg !8084
  %call = call i32 @get_linear(%struct.GetBitContext* %6, i32 %7), !dbg !8085
  %8 = load i32, i32* %i, align 4, !dbg !8086
  %idxprom = sext i32 %8 to i64, !dbg !8087
  %9 = load i32*, i32** %array.addr, align 8, !dbg !8087
  %arrayidx = getelementptr inbounds i32, i32* %9, i64 %idxprom, !dbg !8087
  store i32 %call, i32* %arrayidx, align 4, !dbg !8088
  br label %for.inc, !dbg !8087

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4, !dbg !8089
  %inc = add nsw i32 %10, 1, !dbg !8089
  store i32 %inc, i32* %i, align 4, !dbg !8089
  br label %for.cond, !dbg !8091, !llvm.loop !8092

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %if.then
  ret void, !dbg !8094
}

; Function Attrs: nounwind uwtable
define internal void @get_rice_array(%struct.GetBitContext* %gb, i32* %array, i32 %size, i32 %k) #0 !dbg !8095 {
entry:
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %array.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  %k.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !8096, metadata !2040), !dbg !8097
  store i32* %array, i32** %array.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %array.addr, metadata !8098, metadata !2040), !dbg !8099
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !8100, metadata !2040), !dbg !8101
  store i32 %k, i32* %k.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %k.addr, metadata !8102, metadata !2040), !dbg !8103
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8104, metadata !2040), !dbg !8105
  store i32 0, i32* %i, align 4, !dbg !8106
  br label %for.cond, !dbg !8108

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !8109
  %1 = load i32, i32* %size.addr, align 4, !dbg !8112
  %cmp = icmp slt i32 %0, %1, !dbg !8113
  br i1 %cmp, label %for.body, label %for.end, !dbg !8114

for.body:                                         ; preds = %for.cond
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !8115
  %3 = load i32, i32* %k.addr, align 4, !dbg !8116
  %call = call i32 @get_rice(%struct.GetBitContext* %2, i32 %3), !dbg !8117
  %4 = load i32, i32* %i, align 4, !dbg !8118
  %idxprom = sext i32 %4 to i64, !dbg !8119
  %5 = load i32*, i32** %array.addr, align 8, !dbg !8119
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom, !dbg !8119
  store i32 %call, i32* %arrayidx, align 4, !dbg !8120
  br label %for.inc, !dbg !8119

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !8121
  %inc = add nsw i32 %6, 1, !dbg !8121
  store i32 %inc, i32* %i, align 4, !dbg !8121
  br label %for.cond, !dbg !8123, !llvm.loop !8124

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8126
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #5

; Function Attrs: nounwind uwtable
define internal i32 @get_rice(%struct.GetBitContext* %gb, i32 %k) #0 !dbg !8127 {
entry:
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %k.addr = alloca i32, align 4
  %v = alloca i32, align 4
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !8128, metadata !2040), !dbg !8129
  store i32 %k, i32* %k.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %k.addr, metadata !8130, metadata !2040), !dbg !8131
  call void @llvm.dbg.declare(metadata i32* %v, metadata !8132, metadata !2040), !dbg !8133
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !8134
  %1 = load i32, i32* %k.addr, align 4, !dbg !8135
  %call = call i32 @get_rice_un(%struct.GetBitContext* %0, i32 %1), !dbg !8136
  store i32 %call, i32* %v, align 4, !dbg !8133
  %2 = load i32, i32* %v, align 4, !dbg !8137
  %shr = lshr i32 %2, 1, !dbg !8138
  %3 = load i32, i32* %v, align 4, !dbg !8139
  %and = and i32 %3, 1, !dbg !8140
  %sub = sub i32 0, %and, !dbg !8141
  %xor = xor i32 %shr, %sub, !dbg !8142
  ret i32 %xor, !dbg !8143
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @get_sbits_long(%struct.GetBitContext* %s, i32 %n) #4 !dbg !8144 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.GetBitContext*, align 8
  %n.addr = alloca i32, align 4
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !8145, metadata !2040), !dbg !8146
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !8147, metadata !2040), !dbg !8148
  %0 = load i32, i32* %n.addr, align 4, !dbg !8149
  %tobool = icmp ne i32 %0, 0, !dbg !8149
  br i1 %tobool, label %if.end, label %if.then, !dbg !8151

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !8152
  br label %return, !dbg !8152

if.end:                                           ; preds = %entry
  %1 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !8153
  %2 = load i32, i32* %n.addr, align 4, !dbg !8154
  %call = call i32 @get_bits_long(%struct.GetBitContext* %1, i32 %2), !dbg !8155
  %3 = load i32, i32* %n.addr, align 4, !dbg !8156
  %call1 = call i32 @sign_extend(i32 %call, i32 %3) #1, !dbg !8157
  store i32 %call1, i32* %retval, align 4, !dbg !8159
  br label %return, !dbg !8159

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4, !dbg !8160
  ret i32 %4, !dbg !8160
}

; Function Attrs: nounwind uwtable
define internal void @get_array(%struct.GetBitContext* %gb, i32* %array, i32 %size, i32 %n) #0 !dbg !8161 {
entry:
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %array.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !8162, metadata !2040), !dbg !8163
  store i32* %array, i32** %array.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %array.addr, metadata !8164, metadata !2040), !dbg !8165
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !8166, metadata !2040), !dbg !8167
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !8168, metadata !2040), !dbg !8169
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8170, metadata !2040), !dbg !8171
  store i32 0, i32* %i, align 4, !dbg !8172
  br label %for.cond, !dbg !8174

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !8175
  %1 = load i32, i32* %size.addr, align 4, !dbg !8178
  %cmp = icmp slt i32 %0, %1, !dbg !8179
  br i1 %cmp, label %for.body, label %for.end, !dbg !8180

for.body:                                         ; preds = %for.cond
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !8181
  %3 = load i32, i32* %n.addr, align 4, !dbg !8182
  %call = call i32 @get_bits(%struct.GetBitContext* %2, i32 %3), !dbg !8183
  %4 = load i32, i32* %i, align 4, !dbg !8184
  %idxprom = sext i32 %4 to i64, !dbg !8185
  %5 = load i32*, i32** %array.addr, align 8, !dbg !8185
  %arrayidx = getelementptr inbounds i32, i32* %5, i64 %idxprom, !dbg !8185
  store i32 %call, i32* %arrayidx, align 4, !dbg !8186
  br label %for.inc, !dbg !8185

for.inc:                                          ; preds = %for.body
  %6 = load i32, i32* %i, align 4, !dbg !8187
  %inc = add nsw i32 %6, 1, !dbg !8187
  store i32 %inc, i32* %i, align 4, !dbg !8187
  br label %for.cond, !dbg !8189, !llvm.loop !8190

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8192
}

; Function Attrs: nounwind uwtable
define internal i32 @get_rice_un(%struct.GetBitContext* %gb, i32 %k) #0 !dbg !8193 {
entry:
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %k.addr = alloca i32, align 4
  %v = alloca i32, align 4
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !8194, metadata !2040), !dbg !8195
  store i32 %k, i32* %k.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %k.addr, metadata !8196, metadata !2040), !dbg !8197
  call void @llvm.dbg.declare(metadata i32* %v, metadata !8198, metadata !2040), !dbg !8199
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !8200
  %1 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !8201
  %call = call i32 @get_bits_left(%struct.GetBitContext* %1), !dbg !8202
  %call1 = call i32 @get_unary(%struct.GetBitContext* %0, i32 1, i32 %call), !dbg !8203
  store i32 %call1, i32* %v, align 4, !dbg !8199
  %2 = load i32, i32* %v, align 4, !dbg !8205
  %3 = load i32, i32* %k.addr, align 4, !dbg !8206
  %shl = shl i32 %2, %3, !dbg !8207
  %4 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !8208
  %5 = load i32, i32* %k.addr, align 4, !dbg !8209
  %call2 = call i32 @get_bits_long(%struct.GetBitContext* %4, i32 %5), !dbg !8210
  %or = or i32 %shl, %call2, !dbg !8211
  ret i32 %or, !dbg !8212
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @get_unary(%struct.GetBitContext* %gb, i32 %stop, i32 %len) #4 !dbg !8213 {
entry:
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %stop.addr = alloca i32, align 4
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !8217, metadata !2040), !dbg !8218
  store i32 %stop, i32* %stop.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stop.addr, metadata !8219, metadata !2040), !dbg !8220
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !8221, metadata !2040), !dbg !8222
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8223, metadata !2040), !dbg !8224
  store i32 0, i32* %i, align 4, !dbg !8225
  br label %for.cond, !dbg !8227

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !8228
  %1 = load i32, i32* %len.addr, align 4, !dbg !8231
  %cmp = icmp slt i32 %0, %1, !dbg !8232
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !8233

land.rhs:                                         ; preds = %for.cond
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !8234
  %call = call i32 @get_bits1(%struct.GetBitContext* %2), !dbg !8236
  %3 = load i32, i32* %stop.addr, align 4, !dbg !8237
  %cmp1 = icmp ne i32 %call, %3, !dbg !8238
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %4 = phi i1 [ false, %for.cond ], [ %cmp1, %land.rhs ]
  br i1 %4, label %for.body, label %for.end, !dbg !8239

for.body:                                         ; preds = %land.end
  br label %for.inc, !dbg !8241

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !8243
  %inc = add nsw i32 %5, 1, !dbg !8243
  store i32 %inc, i32* %i, align 4, !dbg !8243
  br label %for.cond, !dbg !8245, !llvm.loop !8246

for.end:                                          ; preds = %land.end
  %6 = load i32, i32* %i, align 4, !dbg !8248
  ret i32 %6, !dbg !8249
}

; Function Attrs: inlinehint nounwind readnone uwtable
define internal i32 @sign_extend(i32 %val, i32 %bits) #7 !dbg !8250 {
entry:
  %val.addr = alloca i32, align 4
  %bits.addr = alloca i32, align 4
  %shift = alloca i32, align 4
  %v = alloca %union.anon.1, align 4
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !8254, metadata !2040), !dbg !8255
  store i32 %bits, i32* %bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bits.addr, metadata !8256, metadata !2040), !dbg !8257
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !8258, metadata !2040), !dbg !8259
  %0 = load i32, i32* %bits.addr, align 4, !dbg !8260
  %conv = zext i32 %0 to i64, !dbg !8260
  %sub = sub i64 32, %conv, !dbg !8261
  %conv1 = trunc i64 %sub to i32, !dbg !8262
  store i32 %conv1, i32* %shift, align 4, !dbg !8259
  call void @llvm.dbg.declare(metadata %union.anon.1* %v, metadata !8263, metadata !2040), !dbg !8268
  %u = bitcast %union.anon.1* %v to i32*, !dbg !8269
  %1 = load i32, i32* %val.addr, align 4, !dbg !8270
  %2 = load i32, i32* %shift, align 4, !dbg !8271
  %shl = shl i32 %1, %2, !dbg !8272
  store i32 %shl, i32* %u, align 4, !dbg !8269
  %s = bitcast %union.anon.1* %v to i32*, !dbg !8273
  %3 = load i32, i32* %s, align 4, !dbg !8273
  %4 = load i32, i32* %shift, align 4, !dbg !8274
  %shr = ashr i32 %3, %4, !dbg !8275
  ret i32 %shr, !dbg !8276
}

; Function Attrs: nounwind uwtable
define internal i32 @copy_to_pbr(%struct.DCAXllDecoder* %s, i8* %data, i32 %size, i32 %delay) #0 !dbg !8277 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %delay.addr = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !8280, metadata !2040), !dbg !8281
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8282, metadata !2040), !dbg !8283
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !8284, metadata !2040), !dbg !8285
  store i32 %delay, i32* %delay.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %delay.addr, metadata !8286, metadata !2040), !dbg !8287
  %0 = load i32, i32* %size.addr, align 4, !dbg !8288
  %cmp = icmp sgt i32 %0, 245760, !dbg !8290
  br i1 %cmp, label %if.then, label %if.end, !dbg !8291

if.then:                                          ; preds = %entry
  store i32 -28, i32* %retval, align 4, !dbg !8292
  br label %return, !dbg !8292

if.end:                                           ; preds = %entry
  %1 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !8293
  %pbr_buffer = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %1, i32 0, i32 23, !dbg !8295
  %2 = load i8*, i8** %pbr_buffer, align 32, !dbg !8295
  %tobool = icmp ne i8* %2, null, !dbg !8293
  br i1 %tobool, label %if.end4, label %land.lhs.true, !dbg !8296

land.lhs.true:                                    ; preds = %if.end
  %call = call noalias i8* @av_malloc(i64 245824), !dbg !8297
  %3 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !8299
  %pbr_buffer1 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %3, i32 0, i32 23, !dbg !8300
  store i8* %call, i8** %pbr_buffer1, align 32, !dbg !8301
  %tobool2 = icmp ne i8* %call, null, !dbg !8301
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !8302

if.then3:                                         ; preds = %land.lhs.true
  store i32 -12, i32* %retval, align 4, !dbg !8303
  br label %return, !dbg !8303

if.end4:                                          ; preds = %land.lhs.true, %if.end
  %4 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !8304
  %pbr_buffer5 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %4, i32 0, i32 23, !dbg !8305
  %5 = load i8*, i8** %pbr_buffer5, align 32, !dbg !8305
  %6 = load i8*, i8** %data.addr, align 8, !dbg !8306
  %7 = load i32, i32* %size.addr, align 4, !dbg !8307
  %conv = sext i32 %7 to i64, !dbg !8307
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 %conv, i32 1, i1 false), !dbg !8308
  %8 = load i32, i32* %size.addr, align 4, !dbg !8309
  %9 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !8310
  %pbr_length = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %9, i32 0, i32 24, !dbg !8311
  store i32 %8, i32* %pbr_length, align 8, !dbg !8312
  %10 = load i32, i32* %delay.addr, align 4, !dbg !8313
  %11 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !8314
  %pbr_delay = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %11, i32 0, i32 25, !dbg !8315
  store i32 %10, i32* %pbr_delay, align 4, !dbg !8316
  store i32 0, i32* %retval, align 4, !dbg !8317
  br label %return, !dbg !8317

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !8318
  ret i32 %12, !dbg !8318
}

declare noalias i8* @av_malloc(i64) #3

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @ff_dca_core_map_spkr(%struct.DCACoreDecoder* %core, i32 %spkr) #4 !dbg !8319 {
entry:
  %retval = alloca i32, align 4
  %core.addr = alloca %struct.DCACoreDecoder*, align 8
  %spkr.addr = alloca i32, align 4
  store %struct.DCACoreDecoder* %core, %struct.DCACoreDecoder** %core.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCACoreDecoder** %core.addr, metadata !8323, metadata !2040), !dbg !8324
  store i32 %spkr, i32* %spkr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %spkr.addr, metadata !8325, metadata !2040), !dbg !8326
  %0 = load %struct.DCACoreDecoder*, %struct.DCACoreDecoder** %core.addr, align 8, !dbg !8327
  %ch_mask = getelementptr inbounds %struct.DCACoreDecoder, %struct.DCACoreDecoder* %0, i32 0, i32 24, !dbg !8329
  %1 = load i32, i32* %ch_mask, align 4, !dbg !8329
  %2 = load i32, i32* %spkr.addr, align 4, !dbg !8330
  %shl = shl i32 1, %2, !dbg !8331
  %and = and i32 %1, %shl, !dbg !8332
  %tobool = icmp ne i32 %and, 0, !dbg !8332
  br i1 %tobool, label %if.then, label %if.end, !dbg !8333

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %spkr.addr, align 4, !dbg !8334
  store i32 %3, i32* %retval, align 4, !dbg !8335
  br label %return, !dbg !8335

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %spkr.addr, align 4, !dbg !8336
  %cmp = icmp eq i32 %4, 9, !dbg !8338
  br i1 %cmp, label %land.lhs.true, label %if.end5, !dbg !8339

land.lhs.true:                                    ; preds = %if.end
  %5 = load %struct.DCACoreDecoder*, %struct.DCACoreDecoder** %core.addr, align 8, !dbg !8340
  %ch_mask1 = getelementptr inbounds %struct.DCACoreDecoder, %struct.DCACoreDecoder* %5, i32 0, i32 24, !dbg !8342
  %6 = load i32, i32* %ch_mask1, align 4, !dbg !8342
  %and2 = and i32 %6, 8, !dbg !8343
  %tobool3 = icmp ne i32 %and2, 0, !dbg !8343
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !8344

if.then4:                                         ; preds = %land.lhs.true
  store i32 3, i32* %retval, align 4, !dbg !8345
  br label %return, !dbg !8345

if.end5:                                          ; preds = %land.lhs.true, %if.end
  %7 = load i32, i32* %spkr.addr, align 4, !dbg !8346
  %cmp6 = icmp eq i32 %7, 10, !dbg !8348
  br i1 %cmp6, label %land.lhs.true7, label %if.end12, !dbg !8349

land.lhs.true7:                                   ; preds = %if.end5
  %8 = load %struct.DCACoreDecoder*, %struct.DCACoreDecoder** %core.addr, align 8, !dbg !8350
  %ch_mask8 = getelementptr inbounds %struct.DCACoreDecoder, %struct.DCACoreDecoder* %8, i32 0, i32 24, !dbg !8352
  %9 = load i32, i32* %ch_mask8, align 4, !dbg !8352
  %and9 = and i32 %9, 16, !dbg !8353
  %tobool10 = icmp ne i32 %and9, 0, !dbg !8353
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !8354

if.then11:                                        ; preds = %land.lhs.true7
  store i32 4, i32* %retval, align 4, !dbg !8355
  br label %return, !dbg !8355

if.end12:                                         ; preds = %land.lhs.true7, %if.end5
  store i32 -1, i32* %retval, align 4, !dbg !8356
  br label %return, !dbg !8356

return:                                           ; preds = %if.end12, %if.then11, %if.then4, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !8357
  ret i32 %10, !dbg !8357
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @norm16(i64 %a) #4 !dbg !8358 {
entry:
  %a.addr = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr, metadata !8361, metadata !2040), !dbg !8362
  %0 = load i64, i64* %a.addr, align 8, !dbg !8363
  %call = call i32 @norm__(i64 %0, i32 16), !dbg !8364
  ret i32 %call, !dbg !8365
}

; Function Attrs: nounwind uwtable
define internal i32 @chs_get_lsb_width(%struct.DCAXllDecoder* %s, %struct.DCAXllChSet* %c, i32 %band, i32 %ch) #0 !dbg !8366 {
entry:
  %s.addr = alloca %struct.DCAXllDecoder*, align 8
  %c.addr = alloca %struct.DCAXllChSet*, align 8
  %band.addr = alloca i32, align 4
  %ch.addr = alloca i32, align 4
  %adj = alloca i32, align 4
  %shift = alloca i32, align 4
  store %struct.DCAXllDecoder* %s, %struct.DCAXllDecoder** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllDecoder** %s.addr, metadata !8369, metadata !2040), !dbg !8370
  store %struct.DCAXllChSet* %c, %struct.DCAXllChSet** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.DCAXllChSet** %c.addr, metadata !8371, metadata !2040), !dbg !8372
  store i32 %band, i32* %band.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %band.addr, metadata !8373, metadata !2040), !dbg !8374
  store i32 %ch, i32* %ch.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ch.addr, metadata !8375, metadata !2040), !dbg !8376
  call void @llvm.dbg.declare(metadata i32* %adj, metadata !8377, metadata !2040), !dbg !8378
  %0 = load i32, i32* %ch.addr, align 4, !dbg !8379
  %idxprom = sext i32 %0 to i64, !dbg !8380
  %1 = load i32, i32* %band.addr, align 4, !dbg !8381
  %idxprom1 = sext i32 %1 to i64, !dbg !8380
  %2 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !8380
  %bands = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %2, i32 0, i32 18, !dbg !8382
  %arrayidx = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands, i64 0, i64 %idxprom1, !dbg !8380
  %bit_width_adjust = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx, i32 0, i32 10, !dbg !8383
  %arrayidx2 = getelementptr inbounds [8 x i32], [8 x i32]* %bit_width_adjust, i64 0, i64 %idxprom, !dbg !8380
  %3 = load i32, i32* %arrayidx2, align 4, !dbg !8380
  store i32 %3, i32* %adj, align 4, !dbg !8378
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !8384, metadata !2040), !dbg !8385
  %4 = load i32, i32* %ch.addr, align 4, !dbg !8386
  %idxprom3 = sext i32 %4 to i64, !dbg !8387
  %5 = load i32, i32* %band.addr, align 4, !dbg !8388
  %idxprom4 = sext i32 %5 to i64, !dbg !8387
  %6 = load %struct.DCAXllChSet*, %struct.DCAXllChSet** %c.addr, align 8, !dbg !8387
  %bands5 = getelementptr inbounds %struct.DCAXllChSet, %struct.DCAXllChSet* %6, i32 0, i32 18, !dbg !8389
  %arrayidx6 = getelementptr inbounds [2 x %struct.DCAXllBand], [2 x %struct.DCAXllBand]* %bands5, i64 0, i64 %idxprom4, !dbg !8387
  %nscalablelsbs = getelementptr inbounds %struct.DCAXllBand, %struct.DCAXllBand* %arrayidx6, i32 0, i32 9, !dbg !8390
  %arrayidx7 = getelementptr inbounds [8 x i32], [8 x i32]* %nscalablelsbs, i64 0, i64 %idxprom3, !dbg !8387
  %7 = load i32, i32* %arrayidx7, align 4, !dbg !8387
  store i32 %7, i32* %shift, align 4, !dbg !8385
  %8 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !8391
  %fixed_lsb_width = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %8, i32 0, i32 13, !dbg !8393
  %9 = load i32, i32* %fixed_lsb_width, align 4, !dbg !8393
  %tobool = icmp ne i32 %9, 0, !dbg !8391
  br i1 %tobool, label %if.then, label %if.else, !dbg !8394

if.then:                                          ; preds = %entry
  %10 = load %struct.DCAXllDecoder*, %struct.DCAXllDecoder** %s.addr, align 8, !dbg !8395
  %fixed_lsb_width8 = getelementptr inbounds %struct.DCAXllDecoder, %struct.DCAXllDecoder* %10, i32 0, i32 13, !dbg !8396
  %11 = load i32, i32* %fixed_lsb_width8, align 4, !dbg !8396
  store i32 %11, i32* %shift, align 4, !dbg !8397
  br label %if.end14, !dbg !8398

if.else:                                          ; preds = %entry
  %12 = load i32, i32* %shift, align 4, !dbg !8399
  %tobool9 = icmp ne i32 %12, 0, !dbg !8399
  br i1 %tobool9, label %land.lhs.true, label %if.else12, !dbg !8401

land.lhs.true:                                    ; preds = %if.else
  %13 = load i32, i32* %adj, align 4, !dbg !8402
  %tobool10 = icmp ne i32 %13, 0, !dbg !8402
  br i1 %tobool10, label %if.then11, label %if.else12, !dbg !8404

if.then11:                                        ; preds = %land.lhs.true
  %14 = load i32, i32* %adj, align 4, !dbg !8405
  %sub = sub nsw i32 %14, 1, !dbg !8406
  %15 = load i32, i32* %shift, align 4, !dbg !8407
  %add = add nsw i32 %15, %sub, !dbg !8407
  store i32 %add, i32* %shift, align 4, !dbg !8407
  br label %if.end, !dbg !8408

if.else12:                                        ; preds = %land.lhs.true, %if.else
  %16 = load i32, i32* %adj, align 4, !dbg !8409
  %17 = load i32, i32* %shift, align 4, !dbg !8410
  %add13 = add nsw i32 %17, %16, !dbg !8410
  store i32 %add13, i32* %shift, align 4, !dbg !8410
  br label %if.end

if.end:                                           ; preds = %if.else12, %if.then11
  br label %if.end14

if.end14:                                         ; preds = %if.end, %if.then
  %18 = load i32, i32* %shift, align 4, !dbg !8411
  ret i32 %18, !dbg !8412
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { cold nounwind optsize uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readonly }
attributes #9 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!1008, !1009}
!llvm.ident = !{!1010}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.9.0 (tags/RELEASE_390/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !988)
!1 = !DIFile(filename: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a/[inter]libavcodec--dca_xll.o.i", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!2 = !{!3, !24, !34, !494, !694, !711, !717, !747, !757, !781, !787, !805, !829, !848, !858, !866, !878, !887, !893, !897, !908, !939, !974, !984}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 29, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "./libavutil/log.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!5 = !{!6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23}
!6 = !DIEnumerator(name: "AV_CLASS_CATEGORY_NA", value: 0)
!7 = !DIEnumerator(name: "AV_CLASS_CATEGORY_INPUT", value: 1)
!8 = !DIEnumerator(name: "AV_CLASS_CATEGORY_OUTPUT", value: 2)
!9 = !DIEnumerator(name: "AV_CLASS_CATEGORY_MUXER", value: 3)
!10 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEMUXER", value: 4)
!11 = !DIEnumerator(name: "AV_CLASS_CATEGORY_ENCODER", value: 5)
!12 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DECODER", value: 6)
!13 = !DIEnumerator(name: "AV_CLASS_CATEGORY_FILTER", value: 7)
!14 = !DIEnumerator(name: "AV_CLASS_CATEGORY_BITSTREAM_FILTER", value: 8)
!15 = !DIEnumerator(name: "AV_CLASS_CATEGORY_SWSCALER", value: 9)
!16 = !DIEnumerator(name: "AV_CLASS_CATEGORY_SWRESAMPLER", value: 10)
!17 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT", value: 40)
!18 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT", value: 41)
!19 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT", value: 42)
!20 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT", value: 43)
!21 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_OUTPUT", value: 44)
!22 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_INPUT", value: 45)
!23 = !DIEnumerator(name: "AV_CLASS_CATEGORY_NB", value: 46)
!24 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVMediaType", file: !25, line: 199, size: 32, align: 32, elements: !26)
!25 = !DIFile(filename: "./libavutil/avutil.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!26 = !{!27, !28, !29, !30, !31, !32, !33}
!27 = !DIEnumerator(name: "AVMEDIA_TYPE_UNKNOWN", value: -1)
!28 = !DIEnumerator(name: "AVMEDIA_TYPE_VIDEO", value: 0)
!29 = !DIEnumerator(name: "AVMEDIA_TYPE_AUDIO", value: 1)
!30 = !DIEnumerator(name: "AVMEDIA_TYPE_DATA", value: 2)
!31 = !DIEnumerator(name: "AVMEDIA_TYPE_SUBTITLE", value: 3)
!32 = !DIEnumerator(name: "AVMEDIA_TYPE_ATTACHMENT", value: 4)
!33 = !DIEnumerator(name: "AVMEDIA_TYPE_NB", value: 5)
!34 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVCodecID", file: !35, line: 215, size: 32, align: 32, elements: !36)
!35 = !DIFile(filename: "libavcodec/avcodec.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!36 = !{!37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493}
!37 = !DIEnumerator(name: "AV_CODEC_ID_NONE", value: 0)
!38 = !DIEnumerator(name: "AV_CODEC_ID_MPEG1VIDEO", value: 1)
!39 = !DIEnumerator(name: "AV_CODEC_ID_MPEG2VIDEO", value: 2)
!40 = !DIEnumerator(name: "AV_CODEC_ID_H261", value: 3)
!41 = !DIEnumerator(name: "AV_CODEC_ID_H263", value: 4)
!42 = !DIEnumerator(name: "AV_CODEC_ID_RV10", value: 5)
!43 = !DIEnumerator(name: "AV_CODEC_ID_RV20", value: 6)
!44 = !DIEnumerator(name: "AV_CODEC_ID_MJPEG", value: 7)
!45 = !DIEnumerator(name: "AV_CODEC_ID_MJPEGB", value: 8)
!46 = !DIEnumerator(name: "AV_CODEC_ID_LJPEG", value: 9)
!47 = !DIEnumerator(name: "AV_CODEC_ID_SP5X", value: 10)
!48 = !DIEnumerator(name: "AV_CODEC_ID_JPEGLS", value: 11)
!49 = !DIEnumerator(name: "AV_CODEC_ID_MPEG4", value: 12)
!50 = !DIEnumerator(name: "AV_CODEC_ID_RAWVIDEO", value: 13)
!51 = !DIEnumerator(name: "AV_CODEC_ID_MSMPEG4V1", value: 14)
!52 = !DIEnumerator(name: "AV_CODEC_ID_MSMPEG4V2", value: 15)
!53 = !DIEnumerator(name: "AV_CODEC_ID_MSMPEG4V3", value: 16)
!54 = !DIEnumerator(name: "AV_CODEC_ID_WMV1", value: 17)
!55 = !DIEnumerator(name: "AV_CODEC_ID_WMV2", value: 18)
!56 = !DIEnumerator(name: "AV_CODEC_ID_H263P", value: 19)
!57 = !DIEnumerator(name: "AV_CODEC_ID_H263I", value: 20)
!58 = !DIEnumerator(name: "AV_CODEC_ID_FLV1", value: 21)
!59 = !DIEnumerator(name: "AV_CODEC_ID_SVQ1", value: 22)
!60 = !DIEnumerator(name: "AV_CODEC_ID_SVQ3", value: 23)
!61 = !DIEnumerator(name: "AV_CODEC_ID_DVVIDEO", value: 24)
!62 = !DIEnumerator(name: "AV_CODEC_ID_HUFFYUV", value: 25)
!63 = !DIEnumerator(name: "AV_CODEC_ID_CYUV", value: 26)
!64 = !DIEnumerator(name: "AV_CODEC_ID_H264", value: 27)
!65 = !DIEnumerator(name: "AV_CODEC_ID_INDEO3", value: 28)
!66 = !DIEnumerator(name: "AV_CODEC_ID_VP3", value: 29)
!67 = !DIEnumerator(name: "AV_CODEC_ID_THEORA", value: 30)
!68 = !DIEnumerator(name: "AV_CODEC_ID_ASV1", value: 31)
!69 = !DIEnumerator(name: "AV_CODEC_ID_ASV2", value: 32)
!70 = !DIEnumerator(name: "AV_CODEC_ID_FFV1", value: 33)
!71 = !DIEnumerator(name: "AV_CODEC_ID_4XM", value: 34)
!72 = !DIEnumerator(name: "AV_CODEC_ID_VCR1", value: 35)
!73 = !DIEnumerator(name: "AV_CODEC_ID_CLJR", value: 36)
!74 = !DIEnumerator(name: "AV_CODEC_ID_MDEC", value: 37)
!75 = !DIEnumerator(name: "AV_CODEC_ID_ROQ", value: 38)
!76 = !DIEnumerator(name: "AV_CODEC_ID_INTERPLAY_VIDEO", value: 39)
!77 = !DIEnumerator(name: "AV_CODEC_ID_XAN_WC3", value: 40)
!78 = !DIEnumerator(name: "AV_CODEC_ID_XAN_WC4", value: 41)
!79 = !DIEnumerator(name: "AV_CODEC_ID_RPZA", value: 42)
!80 = !DIEnumerator(name: "AV_CODEC_ID_CINEPAK", value: 43)
!81 = !DIEnumerator(name: "AV_CODEC_ID_WS_VQA", value: 44)
!82 = !DIEnumerator(name: "AV_CODEC_ID_MSRLE", value: 45)
!83 = !DIEnumerator(name: "AV_CODEC_ID_MSVIDEO1", value: 46)
!84 = !DIEnumerator(name: "AV_CODEC_ID_IDCIN", value: 47)
!85 = !DIEnumerator(name: "AV_CODEC_ID_8BPS", value: 48)
!86 = !DIEnumerator(name: "AV_CODEC_ID_SMC", value: 49)
!87 = !DIEnumerator(name: "AV_CODEC_ID_FLIC", value: 50)
!88 = !DIEnumerator(name: "AV_CODEC_ID_TRUEMOTION1", value: 51)
!89 = !DIEnumerator(name: "AV_CODEC_ID_VMDVIDEO", value: 52)
!90 = !DIEnumerator(name: "AV_CODEC_ID_MSZH", value: 53)
!91 = !DIEnumerator(name: "AV_CODEC_ID_ZLIB", value: 54)
!92 = !DIEnumerator(name: "AV_CODEC_ID_QTRLE", value: 55)
!93 = !DIEnumerator(name: "AV_CODEC_ID_TSCC", value: 56)
!94 = !DIEnumerator(name: "AV_CODEC_ID_ULTI", value: 57)
!95 = !DIEnumerator(name: "AV_CODEC_ID_QDRAW", value: 58)
!96 = !DIEnumerator(name: "AV_CODEC_ID_VIXL", value: 59)
!97 = !DIEnumerator(name: "AV_CODEC_ID_QPEG", value: 60)
!98 = !DIEnumerator(name: "AV_CODEC_ID_PNG", value: 61)
!99 = !DIEnumerator(name: "AV_CODEC_ID_PPM", value: 62)
!100 = !DIEnumerator(name: "AV_CODEC_ID_PBM", value: 63)
!101 = !DIEnumerator(name: "AV_CODEC_ID_PGM", value: 64)
!102 = !DIEnumerator(name: "AV_CODEC_ID_PGMYUV", value: 65)
!103 = !DIEnumerator(name: "AV_CODEC_ID_PAM", value: 66)
!104 = !DIEnumerator(name: "AV_CODEC_ID_FFVHUFF", value: 67)
!105 = !DIEnumerator(name: "AV_CODEC_ID_RV30", value: 68)
!106 = !DIEnumerator(name: "AV_CODEC_ID_RV40", value: 69)
!107 = !DIEnumerator(name: "AV_CODEC_ID_VC1", value: 70)
!108 = !DIEnumerator(name: "AV_CODEC_ID_WMV3", value: 71)
!109 = !DIEnumerator(name: "AV_CODEC_ID_LOCO", value: 72)
!110 = !DIEnumerator(name: "AV_CODEC_ID_WNV1", value: 73)
!111 = !DIEnumerator(name: "AV_CODEC_ID_AASC", value: 74)
!112 = !DIEnumerator(name: "AV_CODEC_ID_INDEO2", value: 75)
!113 = !DIEnumerator(name: "AV_CODEC_ID_FRAPS", value: 76)
!114 = !DIEnumerator(name: "AV_CODEC_ID_TRUEMOTION2", value: 77)
!115 = !DIEnumerator(name: "AV_CODEC_ID_BMP", value: 78)
!116 = !DIEnumerator(name: "AV_CODEC_ID_CSCD", value: 79)
!117 = !DIEnumerator(name: "AV_CODEC_ID_MMVIDEO", value: 80)
!118 = !DIEnumerator(name: "AV_CODEC_ID_ZMBV", value: 81)
!119 = !DIEnumerator(name: "AV_CODEC_ID_AVS", value: 82)
!120 = !DIEnumerator(name: "AV_CODEC_ID_SMACKVIDEO", value: 83)
!121 = !DIEnumerator(name: "AV_CODEC_ID_NUV", value: 84)
!122 = !DIEnumerator(name: "AV_CODEC_ID_KMVC", value: 85)
!123 = !DIEnumerator(name: "AV_CODEC_ID_FLASHSV", value: 86)
!124 = !DIEnumerator(name: "AV_CODEC_ID_CAVS", value: 87)
!125 = !DIEnumerator(name: "AV_CODEC_ID_JPEG2000", value: 88)
!126 = !DIEnumerator(name: "AV_CODEC_ID_VMNC", value: 89)
!127 = !DIEnumerator(name: "AV_CODEC_ID_VP5", value: 90)
!128 = !DIEnumerator(name: "AV_CODEC_ID_VP6", value: 91)
!129 = !DIEnumerator(name: "AV_CODEC_ID_VP6F", value: 92)
!130 = !DIEnumerator(name: "AV_CODEC_ID_TARGA", value: 93)
!131 = !DIEnumerator(name: "AV_CODEC_ID_DSICINVIDEO", value: 94)
!132 = !DIEnumerator(name: "AV_CODEC_ID_TIERTEXSEQVIDEO", value: 95)
!133 = !DIEnumerator(name: "AV_CODEC_ID_TIFF", value: 96)
!134 = !DIEnumerator(name: "AV_CODEC_ID_GIF", value: 97)
!135 = !DIEnumerator(name: "AV_CODEC_ID_DXA", value: 98)
!136 = !DIEnumerator(name: "AV_CODEC_ID_DNXHD", value: 99)
!137 = !DIEnumerator(name: "AV_CODEC_ID_THP", value: 100)
!138 = !DIEnumerator(name: "AV_CODEC_ID_SGI", value: 101)
!139 = !DIEnumerator(name: "AV_CODEC_ID_C93", value: 102)
!140 = !DIEnumerator(name: "AV_CODEC_ID_BETHSOFTVID", value: 103)
!141 = !DIEnumerator(name: "AV_CODEC_ID_PTX", value: 104)
!142 = !DIEnumerator(name: "AV_CODEC_ID_TXD", value: 105)
!143 = !DIEnumerator(name: "AV_CODEC_ID_VP6A", value: 106)
!144 = !DIEnumerator(name: "AV_CODEC_ID_AMV", value: 107)
!145 = !DIEnumerator(name: "AV_CODEC_ID_VB", value: 108)
!146 = !DIEnumerator(name: "AV_CODEC_ID_PCX", value: 109)
!147 = !DIEnumerator(name: "AV_CODEC_ID_SUNRAST", value: 110)
!148 = !DIEnumerator(name: "AV_CODEC_ID_INDEO4", value: 111)
!149 = !DIEnumerator(name: "AV_CODEC_ID_INDEO5", value: 112)
!150 = !DIEnumerator(name: "AV_CODEC_ID_MIMIC", value: 113)
!151 = !DIEnumerator(name: "AV_CODEC_ID_RL2", value: 114)
!152 = !DIEnumerator(name: "AV_CODEC_ID_ESCAPE124", value: 115)
!153 = !DIEnumerator(name: "AV_CODEC_ID_DIRAC", value: 116)
!154 = !DIEnumerator(name: "AV_CODEC_ID_BFI", value: 117)
!155 = !DIEnumerator(name: "AV_CODEC_ID_CMV", value: 118)
!156 = !DIEnumerator(name: "AV_CODEC_ID_MOTIONPIXELS", value: 119)
!157 = !DIEnumerator(name: "AV_CODEC_ID_TGV", value: 120)
!158 = !DIEnumerator(name: "AV_CODEC_ID_TGQ", value: 121)
!159 = !DIEnumerator(name: "AV_CODEC_ID_TQI", value: 122)
!160 = !DIEnumerator(name: "AV_CODEC_ID_AURA", value: 123)
!161 = !DIEnumerator(name: "AV_CODEC_ID_AURA2", value: 124)
!162 = !DIEnumerator(name: "AV_CODEC_ID_V210X", value: 125)
!163 = !DIEnumerator(name: "AV_CODEC_ID_TMV", value: 126)
!164 = !DIEnumerator(name: "AV_CODEC_ID_V210", value: 127)
!165 = !DIEnumerator(name: "AV_CODEC_ID_DPX", value: 128)
!166 = !DIEnumerator(name: "AV_CODEC_ID_MAD", value: 129)
!167 = !DIEnumerator(name: "AV_CODEC_ID_FRWU", value: 130)
!168 = !DIEnumerator(name: "AV_CODEC_ID_FLASHSV2", value: 131)
!169 = !DIEnumerator(name: "AV_CODEC_ID_CDGRAPHICS", value: 132)
!170 = !DIEnumerator(name: "AV_CODEC_ID_R210", value: 133)
!171 = !DIEnumerator(name: "AV_CODEC_ID_ANM", value: 134)
!172 = !DIEnumerator(name: "AV_CODEC_ID_BINKVIDEO", value: 135)
!173 = !DIEnumerator(name: "AV_CODEC_ID_IFF_ILBM", value: 136)
!174 = !DIEnumerator(name: "AV_CODEC_ID_KGV1", value: 137)
!175 = !DIEnumerator(name: "AV_CODEC_ID_YOP", value: 138)
!176 = !DIEnumerator(name: "AV_CODEC_ID_VP8", value: 139)
!177 = !DIEnumerator(name: "AV_CODEC_ID_PICTOR", value: 140)
!178 = !DIEnumerator(name: "AV_CODEC_ID_ANSI", value: 141)
!179 = !DIEnumerator(name: "AV_CODEC_ID_A64_MULTI", value: 142)
!180 = !DIEnumerator(name: "AV_CODEC_ID_A64_MULTI5", value: 143)
!181 = !DIEnumerator(name: "AV_CODEC_ID_R10K", value: 144)
!182 = !DIEnumerator(name: "AV_CODEC_ID_MXPEG", value: 145)
!183 = !DIEnumerator(name: "AV_CODEC_ID_LAGARITH", value: 146)
!184 = !DIEnumerator(name: "AV_CODEC_ID_PRORES", value: 147)
!185 = !DIEnumerator(name: "AV_CODEC_ID_JV", value: 148)
!186 = !DIEnumerator(name: "AV_CODEC_ID_DFA", value: 149)
!187 = !DIEnumerator(name: "AV_CODEC_ID_WMV3IMAGE", value: 150)
!188 = !DIEnumerator(name: "AV_CODEC_ID_VC1IMAGE", value: 151)
!189 = !DIEnumerator(name: "AV_CODEC_ID_UTVIDEO", value: 152)
!190 = !DIEnumerator(name: "AV_CODEC_ID_BMV_VIDEO", value: 153)
!191 = !DIEnumerator(name: "AV_CODEC_ID_VBLE", value: 154)
!192 = !DIEnumerator(name: "AV_CODEC_ID_DXTORY", value: 155)
!193 = !DIEnumerator(name: "AV_CODEC_ID_V410", value: 156)
!194 = !DIEnumerator(name: "AV_CODEC_ID_XWD", value: 157)
!195 = !DIEnumerator(name: "AV_CODEC_ID_CDXL", value: 158)
!196 = !DIEnumerator(name: "AV_CODEC_ID_XBM", value: 159)
!197 = !DIEnumerator(name: "AV_CODEC_ID_ZEROCODEC", value: 160)
!198 = !DIEnumerator(name: "AV_CODEC_ID_MSS1", value: 161)
!199 = !DIEnumerator(name: "AV_CODEC_ID_MSA1", value: 162)
!200 = !DIEnumerator(name: "AV_CODEC_ID_TSCC2", value: 163)
!201 = !DIEnumerator(name: "AV_CODEC_ID_MTS2", value: 164)
!202 = !DIEnumerator(name: "AV_CODEC_ID_CLLC", value: 165)
!203 = !DIEnumerator(name: "AV_CODEC_ID_MSS2", value: 166)
!204 = !DIEnumerator(name: "AV_CODEC_ID_VP9", value: 167)
!205 = !DIEnumerator(name: "AV_CODEC_ID_AIC", value: 168)
!206 = !DIEnumerator(name: "AV_CODEC_ID_ESCAPE130", value: 169)
!207 = !DIEnumerator(name: "AV_CODEC_ID_G2M", value: 170)
!208 = !DIEnumerator(name: "AV_CODEC_ID_WEBP", value: 171)
!209 = !DIEnumerator(name: "AV_CODEC_ID_HNM4_VIDEO", value: 172)
!210 = !DIEnumerator(name: "AV_CODEC_ID_HEVC", value: 173)
!211 = !DIEnumerator(name: "AV_CODEC_ID_FIC", value: 174)
!212 = !DIEnumerator(name: "AV_CODEC_ID_ALIAS_PIX", value: 175)
!213 = !DIEnumerator(name: "AV_CODEC_ID_BRENDER_PIX", value: 176)
!214 = !DIEnumerator(name: "AV_CODEC_ID_PAF_VIDEO", value: 177)
!215 = !DIEnumerator(name: "AV_CODEC_ID_EXR", value: 178)
!216 = !DIEnumerator(name: "AV_CODEC_ID_VP7", value: 179)
!217 = !DIEnumerator(name: "AV_CODEC_ID_SANM", value: 180)
!218 = !DIEnumerator(name: "AV_CODEC_ID_SGIRLE", value: 181)
!219 = !DIEnumerator(name: "AV_CODEC_ID_MVC1", value: 182)
!220 = !DIEnumerator(name: "AV_CODEC_ID_MVC2", value: 183)
!221 = !DIEnumerator(name: "AV_CODEC_ID_HQX", value: 184)
!222 = !DIEnumerator(name: "AV_CODEC_ID_TDSC", value: 185)
!223 = !DIEnumerator(name: "AV_CODEC_ID_HQ_HQA", value: 186)
!224 = !DIEnumerator(name: "AV_CODEC_ID_HAP", value: 187)
!225 = !DIEnumerator(name: "AV_CODEC_ID_DDS", value: 188)
!226 = !DIEnumerator(name: "AV_CODEC_ID_DXV", value: 189)
!227 = !DIEnumerator(name: "AV_CODEC_ID_SCREENPRESSO", value: 190)
!228 = !DIEnumerator(name: "AV_CODEC_ID_RSCC", value: 191)
!229 = !DIEnumerator(name: "AV_CODEC_ID_AVS2", value: 192)
!230 = !DIEnumerator(name: "AV_CODEC_ID_Y41P", value: 32768)
!231 = !DIEnumerator(name: "AV_CODEC_ID_AVRP", value: 32769)
!232 = !DIEnumerator(name: "AV_CODEC_ID_012V", value: 32770)
!233 = !DIEnumerator(name: "AV_CODEC_ID_AVUI", value: 32771)
!234 = !DIEnumerator(name: "AV_CODEC_ID_AYUV", value: 32772)
!235 = !DIEnumerator(name: "AV_CODEC_ID_TARGA_Y216", value: 32773)
!236 = !DIEnumerator(name: "AV_CODEC_ID_V308", value: 32774)
!237 = !DIEnumerator(name: "AV_CODEC_ID_V408", value: 32775)
!238 = !DIEnumerator(name: "AV_CODEC_ID_YUV4", value: 32776)
!239 = !DIEnumerator(name: "AV_CODEC_ID_AVRN", value: 32777)
!240 = !DIEnumerator(name: "AV_CODEC_ID_CPIA", value: 32778)
!241 = !DIEnumerator(name: "AV_CODEC_ID_XFACE", value: 32779)
!242 = !DIEnumerator(name: "AV_CODEC_ID_SNOW", value: 32780)
!243 = !DIEnumerator(name: "AV_CODEC_ID_SMVJPEG", value: 32781)
!244 = !DIEnumerator(name: "AV_CODEC_ID_APNG", value: 32782)
!245 = !DIEnumerator(name: "AV_CODEC_ID_DAALA", value: 32783)
!246 = !DIEnumerator(name: "AV_CODEC_ID_CFHD", value: 32784)
!247 = !DIEnumerator(name: "AV_CODEC_ID_TRUEMOTION2RT", value: 32785)
!248 = !DIEnumerator(name: "AV_CODEC_ID_M101", value: 32786)
!249 = !DIEnumerator(name: "AV_CODEC_ID_MAGICYUV", value: 32787)
!250 = !DIEnumerator(name: "AV_CODEC_ID_SHEERVIDEO", value: 32788)
!251 = !DIEnumerator(name: "AV_CODEC_ID_YLC", value: 32789)
!252 = !DIEnumerator(name: "AV_CODEC_ID_PSD", value: 32790)
!253 = !DIEnumerator(name: "AV_CODEC_ID_PIXLET", value: 32791)
!254 = !DIEnumerator(name: "AV_CODEC_ID_SPEEDHQ", value: 32792)
!255 = !DIEnumerator(name: "AV_CODEC_ID_FMVC", value: 32793)
!256 = !DIEnumerator(name: "AV_CODEC_ID_SCPR", value: 32794)
!257 = !DIEnumerator(name: "AV_CODEC_ID_CLEARVIDEO", value: 32795)
!258 = !DIEnumerator(name: "AV_CODEC_ID_XPM", value: 32796)
!259 = !DIEnumerator(name: "AV_CODEC_ID_AV1", value: 32797)
!260 = !DIEnumerator(name: "AV_CODEC_ID_BITPACKED", value: 32798)
!261 = !DIEnumerator(name: "AV_CODEC_ID_MSCC", value: 32799)
!262 = !DIEnumerator(name: "AV_CODEC_ID_SRGC", value: 32800)
!263 = !DIEnumerator(name: "AV_CODEC_ID_SVG", value: 32801)
!264 = !DIEnumerator(name: "AV_CODEC_ID_GDV", value: 32802)
!265 = !DIEnumerator(name: "AV_CODEC_ID_FITS", value: 32803)
!266 = !DIEnumerator(name: "AV_CODEC_ID_IMM4", value: 32804)
!267 = !DIEnumerator(name: "AV_CODEC_ID_PROSUMER", value: 32805)
!268 = !DIEnumerator(name: "AV_CODEC_ID_MWSC", value: 32806)
!269 = !DIEnumerator(name: "AV_CODEC_ID_WCMV", value: 32807)
!270 = !DIEnumerator(name: "AV_CODEC_ID_RASC", value: 32808)
!271 = !DIEnumerator(name: "AV_CODEC_ID_HYMT", value: 32809)
!272 = !DIEnumerator(name: "AV_CODEC_ID_ARBC", value: 32810)
!273 = !DIEnumerator(name: "AV_CODEC_ID_FIRST_AUDIO", value: 65536)
!274 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S16LE", value: 65536)
!275 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S16BE", value: 65537)
!276 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U16LE", value: 65538)
!277 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U16BE", value: 65539)
!278 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S8", value: 65540)
!279 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U8", value: 65541)
!280 = !DIEnumerator(name: "AV_CODEC_ID_PCM_MULAW", value: 65542)
!281 = !DIEnumerator(name: "AV_CODEC_ID_PCM_ALAW", value: 65543)
!282 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S32LE", value: 65544)
!283 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S32BE", value: 65545)
!284 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U32LE", value: 65546)
!285 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U32BE", value: 65547)
!286 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S24LE", value: 65548)
!287 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S24BE", value: 65549)
!288 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U24LE", value: 65550)
!289 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U24BE", value: 65551)
!290 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S24DAUD", value: 65552)
!291 = !DIEnumerator(name: "AV_CODEC_ID_PCM_ZORK", value: 65553)
!292 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S16LE_PLANAR", value: 65554)
!293 = !DIEnumerator(name: "AV_CODEC_ID_PCM_DVD", value: 65555)
!294 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F32BE", value: 65556)
!295 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F32LE", value: 65557)
!296 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F64BE", value: 65558)
!297 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F64LE", value: 65559)
!298 = !DIEnumerator(name: "AV_CODEC_ID_PCM_BLURAY", value: 65560)
!299 = !DIEnumerator(name: "AV_CODEC_ID_PCM_LXF", value: 65561)
!300 = !DIEnumerator(name: "AV_CODEC_ID_S302M", value: 65562)
!301 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S8_PLANAR", value: 65563)
!302 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S24LE_PLANAR", value: 65564)
!303 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S32LE_PLANAR", value: 65565)
!304 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S16BE_PLANAR", value: 65566)
!305 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S64LE", value: 67584)
!306 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S64BE", value: 67585)
!307 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F16LE", value: 67586)
!308 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F24LE", value: 67587)
!309 = !DIEnumerator(name: "AV_CODEC_ID_PCM_VIDC", value: 67588)
!310 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_QT", value: 69632)
!311 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_WAV", value: 69633)
!312 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_DK3", value: 69634)
!313 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_DK4", value: 69635)
!314 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_WS", value: 69636)
!315 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_SMJPEG", value: 69637)
!316 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_MS", value: 69638)
!317 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_4XM", value: 69639)
!318 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_XA", value: 69640)
!319 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_ADX", value: 69641)
!320 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA", value: 69642)
!321 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_G726", value: 69643)
!322 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_CT", value: 69644)
!323 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_SWF", value: 69645)
!324 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_YAMAHA", value: 69646)
!325 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_SBPRO_4", value: 69647)
!326 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_SBPRO_3", value: 69648)
!327 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_SBPRO_2", value: 69649)
!328 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_THP", value: 69650)
!329 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_AMV", value: 69651)
!330 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_R1", value: 69652)
!331 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_R3", value: 69653)
!332 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_R2", value: 69654)
!333 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_EA_SEAD", value: 69655)
!334 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_EA_EACS", value: 69656)
!335 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_XAS", value: 69657)
!336 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_MAXIS_XA", value: 69658)
!337 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_ISS", value: 69659)
!338 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_G722", value: 69660)
!339 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_APC", value: 69661)
!340 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_VIMA", value: 69662)
!341 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_AFC", value: 71680)
!342 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_OKI", value: 71681)
!343 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_DTK", value: 71682)
!344 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_RAD", value: 71683)
!345 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_G726LE", value: 71684)
!346 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_THP_LE", value: 71685)
!347 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_PSX", value: 71686)
!348 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_AICA", value: 71687)
!349 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_DAT4", value: 71688)
!350 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_MTAF", value: 71689)
!351 = !DIEnumerator(name: "AV_CODEC_ID_AMR_NB", value: 73728)
!352 = !DIEnumerator(name: "AV_CODEC_ID_AMR_WB", value: 73729)
!353 = !DIEnumerator(name: "AV_CODEC_ID_RA_144", value: 77824)
!354 = !DIEnumerator(name: "AV_CODEC_ID_RA_288", value: 77825)
!355 = !DIEnumerator(name: "AV_CODEC_ID_ROQ_DPCM", value: 81920)
!356 = !DIEnumerator(name: "AV_CODEC_ID_INTERPLAY_DPCM", value: 81921)
!357 = !DIEnumerator(name: "AV_CODEC_ID_XAN_DPCM", value: 81922)
!358 = !DIEnumerator(name: "AV_CODEC_ID_SOL_DPCM", value: 81923)
!359 = !DIEnumerator(name: "AV_CODEC_ID_SDX2_DPCM", value: 83968)
!360 = !DIEnumerator(name: "AV_CODEC_ID_GREMLIN_DPCM", value: 83969)
!361 = !DIEnumerator(name: "AV_CODEC_ID_MP2", value: 86016)
!362 = !DIEnumerator(name: "AV_CODEC_ID_MP3", value: 86017)
!363 = !DIEnumerator(name: "AV_CODEC_ID_AAC", value: 86018)
!364 = !DIEnumerator(name: "AV_CODEC_ID_AC3", value: 86019)
!365 = !DIEnumerator(name: "AV_CODEC_ID_DTS", value: 86020)
!366 = !DIEnumerator(name: "AV_CODEC_ID_VORBIS", value: 86021)
!367 = !DIEnumerator(name: "AV_CODEC_ID_DVAUDIO", value: 86022)
!368 = !DIEnumerator(name: "AV_CODEC_ID_WMAV1", value: 86023)
!369 = !DIEnumerator(name: "AV_CODEC_ID_WMAV2", value: 86024)
!370 = !DIEnumerator(name: "AV_CODEC_ID_MACE3", value: 86025)
!371 = !DIEnumerator(name: "AV_CODEC_ID_MACE6", value: 86026)
!372 = !DIEnumerator(name: "AV_CODEC_ID_VMDAUDIO", value: 86027)
!373 = !DIEnumerator(name: "AV_CODEC_ID_FLAC", value: 86028)
!374 = !DIEnumerator(name: "AV_CODEC_ID_MP3ADU", value: 86029)
!375 = !DIEnumerator(name: "AV_CODEC_ID_MP3ON4", value: 86030)
!376 = !DIEnumerator(name: "AV_CODEC_ID_SHORTEN", value: 86031)
!377 = !DIEnumerator(name: "AV_CODEC_ID_ALAC", value: 86032)
!378 = !DIEnumerator(name: "AV_CODEC_ID_WESTWOOD_SND1", value: 86033)
!379 = !DIEnumerator(name: "AV_CODEC_ID_GSM", value: 86034)
!380 = !DIEnumerator(name: "AV_CODEC_ID_QDM2", value: 86035)
!381 = !DIEnumerator(name: "AV_CODEC_ID_COOK", value: 86036)
!382 = !DIEnumerator(name: "AV_CODEC_ID_TRUESPEECH", value: 86037)
!383 = !DIEnumerator(name: "AV_CODEC_ID_TTA", value: 86038)
!384 = !DIEnumerator(name: "AV_CODEC_ID_SMACKAUDIO", value: 86039)
!385 = !DIEnumerator(name: "AV_CODEC_ID_QCELP", value: 86040)
!386 = !DIEnumerator(name: "AV_CODEC_ID_WAVPACK", value: 86041)
!387 = !DIEnumerator(name: "AV_CODEC_ID_DSICINAUDIO", value: 86042)
!388 = !DIEnumerator(name: "AV_CODEC_ID_IMC", value: 86043)
!389 = !DIEnumerator(name: "AV_CODEC_ID_MUSEPACK7", value: 86044)
!390 = !DIEnumerator(name: "AV_CODEC_ID_MLP", value: 86045)
!391 = !DIEnumerator(name: "AV_CODEC_ID_GSM_MS", value: 86046)
!392 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC3", value: 86047)
!393 = !DIEnumerator(name: "AV_CODEC_ID_APE", value: 86048)
!394 = !DIEnumerator(name: "AV_CODEC_ID_NELLYMOSER", value: 86049)
!395 = !DIEnumerator(name: "AV_CODEC_ID_MUSEPACK8", value: 86050)
!396 = !DIEnumerator(name: "AV_CODEC_ID_SPEEX", value: 86051)
!397 = !DIEnumerator(name: "AV_CODEC_ID_WMAVOICE", value: 86052)
!398 = !DIEnumerator(name: "AV_CODEC_ID_WMAPRO", value: 86053)
!399 = !DIEnumerator(name: "AV_CODEC_ID_WMALOSSLESS", value: 86054)
!400 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC3P", value: 86055)
!401 = !DIEnumerator(name: "AV_CODEC_ID_EAC3", value: 86056)
!402 = !DIEnumerator(name: "AV_CODEC_ID_SIPR", value: 86057)
!403 = !DIEnumerator(name: "AV_CODEC_ID_MP1", value: 86058)
!404 = !DIEnumerator(name: "AV_CODEC_ID_TWINVQ", value: 86059)
!405 = !DIEnumerator(name: "AV_CODEC_ID_TRUEHD", value: 86060)
!406 = !DIEnumerator(name: "AV_CODEC_ID_MP4ALS", value: 86061)
!407 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC1", value: 86062)
!408 = !DIEnumerator(name: "AV_CODEC_ID_BINKAUDIO_RDFT", value: 86063)
!409 = !DIEnumerator(name: "AV_CODEC_ID_BINKAUDIO_DCT", value: 86064)
!410 = !DIEnumerator(name: "AV_CODEC_ID_AAC_LATM", value: 86065)
!411 = !DIEnumerator(name: "AV_CODEC_ID_QDMC", value: 86066)
!412 = !DIEnumerator(name: "AV_CODEC_ID_CELT", value: 86067)
!413 = !DIEnumerator(name: "AV_CODEC_ID_G723_1", value: 86068)
!414 = !DIEnumerator(name: "AV_CODEC_ID_G729", value: 86069)
!415 = !DIEnumerator(name: "AV_CODEC_ID_8SVX_EXP", value: 86070)
!416 = !DIEnumerator(name: "AV_CODEC_ID_8SVX_FIB", value: 86071)
!417 = !DIEnumerator(name: "AV_CODEC_ID_BMV_AUDIO", value: 86072)
!418 = !DIEnumerator(name: "AV_CODEC_ID_RALF", value: 86073)
!419 = !DIEnumerator(name: "AV_CODEC_ID_IAC", value: 86074)
!420 = !DIEnumerator(name: "AV_CODEC_ID_ILBC", value: 86075)
!421 = !DIEnumerator(name: "AV_CODEC_ID_OPUS", value: 86076)
!422 = !DIEnumerator(name: "AV_CODEC_ID_COMFORT_NOISE", value: 86077)
!423 = !DIEnumerator(name: "AV_CODEC_ID_TAK", value: 86078)
!424 = !DIEnumerator(name: "AV_CODEC_ID_METASOUND", value: 86079)
!425 = !DIEnumerator(name: "AV_CODEC_ID_PAF_AUDIO", value: 86080)
!426 = !DIEnumerator(name: "AV_CODEC_ID_ON2AVC", value: 86081)
!427 = !DIEnumerator(name: "AV_CODEC_ID_DSS_SP", value: 86082)
!428 = !DIEnumerator(name: "AV_CODEC_ID_CODEC2", value: 86083)
!429 = !DIEnumerator(name: "AV_CODEC_ID_FFWAVESYNTH", value: 88064)
!430 = !DIEnumerator(name: "AV_CODEC_ID_SONIC", value: 88065)
!431 = !DIEnumerator(name: "AV_CODEC_ID_SONIC_LS", value: 88066)
!432 = !DIEnumerator(name: "AV_CODEC_ID_EVRC", value: 88067)
!433 = !DIEnumerator(name: "AV_CODEC_ID_SMV", value: 88068)
!434 = !DIEnumerator(name: "AV_CODEC_ID_DSD_LSBF", value: 88069)
!435 = !DIEnumerator(name: "AV_CODEC_ID_DSD_MSBF", value: 88070)
!436 = !DIEnumerator(name: "AV_CODEC_ID_DSD_LSBF_PLANAR", value: 88071)
!437 = !DIEnumerator(name: "AV_CODEC_ID_DSD_MSBF_PLANAR", value: 88072)
!438 = !DIEnumerator(name: "AV_CODEC_ID_4GV", value: 88073)
!439 = !DIEnumerator(name: "AV_CODEC_ID_INTERPLAY_ACM", value: 88074)
!440 = !DIEnumerator(name: "AV_CODEC_ID_XMA1", value: 88075)
!441 = !DIEnumerator(name: "AV_CODEC_ID_XMA2", value: 88076)
!442 = !DIEnumerator(name: "AV_CODEC_ID_DST", value: 88077)
!443 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC3AL", value: 88078)
!444 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC3PAL", value: 88079)
!445 = !DIEnumerator(name: "AV_CODEC_ID_DOLBY_E", value: 88080)
!446 = !DIEnumerator(name: "AV_CODEC_ID_APTX", value: 88081)
!447 = !DIEnumerator(name: "AV_CODEC_ID_APTX_HD", value: 88082)
!448 = !DIEnumerator(name: "AV_CODEC_ID_SBC", value: 88083)
!449 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC9", value: 88084)
!450 = !DIEnumerator(name: "AV_CODEC_ID_HCOM", value: 88085)
!451 = !DIEnumerator(name: "AV_CODEC_ID_FIRST_SUBTITLE", value: 94208)
!452 = !DIEnumerator(name: "AV_CODEC_ID_DVD_SUBTITLE", value: 94208)
!453 = !DIEnumerator(name: "AV_CODEC_ID_DVB_SUBTITLE", value: 94209)
!454 = !DIEnumerator(name: "AV_CODEC_ID_TEXT", value: 94210)
!455 = !DIEnumerator(name: "AV_CODEC_ID_XSUB", value: 94211)
!456 = !DIEnumerator(name: "AV_CODEC_ID_SSA", value: 94212)
!457 = !DIEnumerator(name: "AV_CODEC_ID_MOV_TEXT", value: 94213)
!458 = !DIEnumerator(name: "AV_CODEC_ID_HDMV_PGS_SUBTITLE", value: 94214)
!459 = !DIEnumerator(name: "AV_CODEC_ID_DVB_TELETEXT", value: 94215)
!460 = !DIEnumerator(name: "AV_CODEC_ID_SRT", value: 94216)
!461 = !DIEnumerator(name: "AV_CODEC_ID_MICRODVD", value: 96256)
!462 = !DIEnumerator(name: "AV_CODEC_ID_EIA_608", value: 96257)
!463 = !DIEnumerator(name: "AV_CODEC_ID_JACOSUB", value: 96258)
!464 = !DIEnumerator(name: "AV_CODEC_ID_SAMI", value: 96259)
!465 = !DIEnumerator(name: "AV_CODEC_ID_REALTEXT", value: 96260)
!466 = !DIEnumerator(name: "AV_CODEC_ID_STL", value: 96261)
!467 = !DIEnumerator(name: "AV_CODEC_ID_SUBVIEWER1", value: 96262)
!468 = !DIEnumerator(name: "AV_CODEC_ID_SUBVIEWER", value: 96263)
!469 = !DIEnumerator(name: "AV_CODEC_ID_SUBRIP", value: 96264)
!470 = !DIEnumerator(name: "AV_CODEC_ID_WEBVTT", value: 96265)
!471 = !DIEnumerator(name: "AV_CODEC_ID_MPL2", value: 96266)
!472 = !DIEnumerator(name: "AV_CODEC_ID_VPLAYER", value: 96267)
!473 = !DIEnumerator(name: "AV_CODEC_ID_PJS", value: 96268)
!474 = !DIEnumerator(name: "AV_CODEC_ID_ASS", value: 96269)
!475 = !DIEnumerator(name: "AV_CODEC_ID_HDMV_TEXT_SUBTITLE", value: 96270)
!476 = !DIEnumerator(name: "AV_CODEC_ID_TTML", value: 96271)
!477 = !DIEnumerator(name: "AV_CODEC_ID_ARIB_CAPTION", value: 96272)
!478 = !DIEnumerator(name: "AV_CODEC_ID_FIRST_UNKNOWN", value: 98304)
!479 = !DIEnumerator(name: "AV_CODEC_ID_TTF", value: 98304)
!480 = !DIEnumerator(name: "AV_CODEC_ID_SCTE_35", value: 98305)
!481 = !DIEnumerator(name: "AV_CODEC_ID_BINTEXT", value: 100352)
!482 = !DIEnumerator(name: "AV_CODEC_ID_XBIN", value: 100353)
!483 = !DIEnumerator(name: "AV_CODEC_ID_IDF", value: 100354)
!484 = !DIEnumerator(name: "AV_CODEC_ID_OTF", value: 100355)
!485 = !DIEnumerator(name: "AV_CODEC_ID_SMPTE_KLV", value: 100356)
!486 = !DIEnumerator(name: "AV_CODEC_ID_DVD_NAV", value: 100357)
!487 = !DIEnumerator(name: "AV_CODEC_ID_TIMED_ID3", value: 100358)
!488 = !DIEnumerator(name: "AV_CODEC_ID_BIN_DATA", value: 100359)
!489 = !DIEnumerator(name: "AV_CODEC_ID_PROBE", value: 102400)
!490 = !DIEnumerator(name: "AV_CODEC_ID_MPEG2TS", value: 131072)
!491 = !DIEnumerator(name: "AV_CODEC_ID_MPEG4SYSTEMS", value: 131073)
!492 = !DIEnumerator(name: "AV_CODEC_ID_FFMETADATA", value: 135168)
!493 = !DIEnumerator(name: "AV_CODEC_ID_WRAPPED_AVFRAME", value: 135169)
!494 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVPixelFormat", file: !495, line: 64, size: 32, align: 32, elements: !496)
!495 = !DIFile(filename: "./libavutil/pixfmt.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!496 = !{!497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693}
!497 = !DIEnumerator(name: "AV_PIX_FMT_NONE", value: -1)
!498 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P", value: 0)
!499 = !DIEnumerator(name: "AV_PIX_FMT_YUYV422", value: 1)
!500 = !DIEnumerator(name: "AV_PIX_FMT_RGB24", value: 2)
!501 = !DIEnumerator(name: "AV_PIX_FMT_BGR24", value: 3)
!502 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P", value: 4)
!503 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P", value: 5)
!504 = !DIEnumerator(name: "AV_PIX_FMT_YUV410P", value: 6)
!505 = !DIEnumerator(name: "AV_PIX_FMT_YUV411P", value: 7)
!506 = !DIEnumerator(name: "AV_PIX_FMT_GRAY8", value: 8)
!507 = !DIEnumerator(name: "AV_PIX_FMT_MONOWHITE", value: 9)
!508 = !DIEnumerator(name: "AV_PIX_FMT_MONOBLACK", value: 10)
!509 = !DIEnumerator(name: "AV_PIX_FMT_PAL8", value: 11)
!510 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ420P", value: 12)
!511 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ422P", value: 13)
!512 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ444P", value: 14)
!513 = !DIEnumerator(name: "AV_PIX_FMT_UYVY422", value: 15)
!514 = !DIEnumerator(name: "AV_PIX_FMT_UYYVYY411", value: 16)
!515 = !DIEnumerator(name: "AV_PIX_FMT_BGR8", value: 17)
!516 = !DIEnumerator(name: "AV_PIX_FMT_BGR4", value: 18)
!517 = !DIEnumerator(name: "AV_PIX_FMT_BGR4_BYTE", value: 19)
!518 = !DIEnumerator(name: "AV_PIX_FMT_RGB8", value: 20)
!519 = !DIEnumerator(name: "AV_PIX_FMT_RGB4", value: 21)
!520 = !DIEnumerator(name: "AV_PIX_FMT_RGB4_BYTE", value: 22)
!521 = !DIEnumerator(name: "AV_PIX_FMT_NV12", value: 23)
!522 = !DIEnumerator(name: "AV_PIX_FMT_NV21", value: 24)
!523 = !DIEnumerator(name: "AV_PIX_FMT_ARGB", value: 25)
!524 = !DIEnumerator(name: "AV_PIX_FMT_RGBA", value: 26)
!525 = !DIEnumerator(name: "AV_PIX_FMT_ABGR", value: 27)
!526 = !DIEnumerator(name: "AV_PIX_FMT_BGRA", value: 28)
!527 = !DIEnumerator(name: "AV_PIX_FMT_GRAY16BE", value: 29)
!528 = !DIEnumerator(name: "AV_PIX_FMT_GRAY16LE", value: 30)
!529 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P", value: 31)
!530 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ440P", value: 32)
!531 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P", value: 33)
!532 = !DIEnumerator(name: "AV_PIX_FMT_RGB48BE", value: 34)
!533 = !DIEnumerator(name: "AV_PIX_FMT_RGB48LE", value: 35)
!534 = !DIEnumerator(name: "AV_PIX_FMT_RGB565BE", value: 36)
!535 = !DIEnumerator(name: "AV_PIX_FMT_RGB565LE", value: 37)
!536 = !DIEnumerator(name: "AV_PIX_FMT_RGB555BE", value: 38)
!537 = !DIEnumerator(name: "AV_PIX_FMT_RGB555LE", value: 39)
!538 = !DIEnumerator(name: "AV_PIX_FMT_BGR565BE", value: 40)
!539 = !DIEnumerator(name: "AV_PIX_FMT_BGR565LE", value: 41)
!540 = !DIEnumerator(name: "AV_PIX_FMT_BGR555BE", value: 42)
!541 = !DIEnumerator(name: "AV_PIX_FMT_BGR555LE", value: 43)
!542 = !DIEnumerator(name: "AV_PIX_FMT_VAAPI_MOCO", value: 44)
!543 = !DIEnumerator(name: "AV_PIX_FMT_VAAPI_IDCT", value: 45)
!544 = !DIEnumerator(name: "AV_PIX_FMT_VAAPI_VLD", value: 46)
!545 = !DIEnumerator(name: "AV_PIX_FMT_VAAPI", value: 46)
!546 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P16LE", value: 47)
!547 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P16BE", value: 48)
!548 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P16LE", value: 49)
!549 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P16BE", value: 50)
!550 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P16LE", value: 51)
!551 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P16BE", value: 52)
!552 = !DIEnumerator(name: "AV_PIX_FMT_DXVA2_VLD", value: 53)
!553 = !DIEnumerator(name: "AV_PIX_FMT_RGB444LE", value: 54)
!554 = !DIEnumerator(name: "AV_PIX_FMT_RGB444BE", value: 55)
!555 = !DIEnumerator(name: "AV_PIX_FMT_BGR444LE", value: 56)
!556 = !DIEnumerator(name: "AV_PIX_FMT_BGR444BE", value: 57)
!557 = !DIEnumerator(name: "AV_PIX_FMT_YA8", value: 58)
!558 = !DIEnumerator(name: "AV_PIX_FMT_Y400A", value: 58)
!559 = !DIEnumerator(name: "AV_PIX_FMT_GRAY8A", value: 58)
!560 = !DIEnumerator(name: "AV_PIX_FMT_BGR48BE", value: 59)
!561 = !DIEnumerator(name: "AV_PIX_FMT_BGR48LE", value: 60)
!562 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P9BE", value: 61)
!563 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P9LE", value: 62)
!564 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P10BE", value: 63)
!565 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P10LE", value: 64)
!566 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P10BE", value: 65)
!567 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P10LE", value: 66)
!568 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P9BE", value: 67)
!569 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P9LE", value: 68)
!570 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P10BE", value: 69)
!571 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P10LE", value: 70)
!572 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P9BE", value: 71)
!573 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P9LE", value: 72)
!574 = !DIEnumerator(name: "AV_PIX_FMT_GBRP", value: 73)
!575 = !DIEnumerator(name: "AV_PIX_FMT_GBR24P", value: 73)
!576 = !DIEnumerator(name: "AV_PIX_FMT_GBRP9BE", value: 74)
!577 = !DIEnumerator(name: "AV_PIX_FMT_GBRP9LE", value: 75)
!578 = !DIEnumerator(name: "AV_PIX_FMT_GBRP10BE", value: 76)
!579 = !DIEnumerator(name: "AV_PIX_FMT_GBRP10LE", value: 77)
!580 = !DIEnumerator(name: "AV_PIX_FMT_GBRP16BE", value: 78)
!581 = !DIEnumerator(name: "AV_PIX_FMT_GBRP16LE", value: 79)
!582 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P", value: 80)
!583 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P", value: 81)
!584 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P9BE", value: 82)
!585 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P9LE", value: 83)
!586 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P9BE", value: 84)
!587 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P9LE", value: 85)
!588 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P9BE", value: 86)
!589 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P9LE", value: 87)
!590 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P10BE", value: 88)
!591 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P10LE", value: 89)
!592 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P10BE", value: 90)
!593 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P10LE", value: 91)
!594 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P10BE", value: 92)
!595 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P10LE", value: 93)
!596 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P16BE", value: 94)
!597 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P16LE", value: 95)
!598 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P16BE", value: 96)
!599 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P16LE", value: 97)
!600 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P16BE", value: 98)
!601 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P16LE", value: 99)
!602 = !DIEnumerator(name: "AV_PIX_FMT_VDPAU", value: 100)
!603 = !DIEnumerator(name: "AV_PIX_FMT_XYZ12LE", value: 101)
!604 = !DIEnumerator(name: "AV_PIX_FMT_XYZ12BE", value: 102)
!605 = !DIEnumerator(name: "AV_PIX_FMT_NV16", value: 103)
!606 = !DIEnumerator(name: "AV_PIX_FMT_NV20LE", value: 104)
!607 = !DIEnumerator(name: "AV_PIX_FMT_NV20BE", value: 105)
!608 = !DIEnumerator(name: "AV_PIX_FMT_RGBA64BE", value: 106)
!609 = !DIEnumerator(name: "AV_PIX_FMT_RGBA64LE", value: 107)
!610 = !DIEnumerator(name: "AV_PIX_FMT_BGRA64BE", value: 108)
!611 = !DIEnumerator(name: "AV_PIX_FMT_BGRA64LE", value: 109)
!612 = !DIEnumerator(name: "AV_PIX_FMT_YVYU422", value: 110)
!613 = !DIEnumerator(name: "AV_PIX_FMT_YA16BE", value: 111)
!614 = !DIEnumerator(name: "AV_PIX_FMT_YA16LE", value: 112)
!615 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP", value: 113)
!616 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP16BE", value: 114)
!617 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP16LE", value: 115)
!618 = !DIEnumerator(name: "AV_PIX_FMT_QSV", value: 116)
!619 = !DIEnumerator(name: "AV_PIX_FMT_MMAL", value: 117)
!620 = !DIEnumerator(name: "AV_PIX_FMT_D3D11VA_VLD", value: 118)
!621 = !DIEnumerator(name: "AV_PIX_FMT_CUDA", value: 119)
!622 = !DIEnumerator(name: "AV_PIX_FMT_0RGB", value: 120)
!623 = !DIEnumerator(name: "AV_PIX_FMT_RGB0", value: 121)
!624 = !DIEnumerator(name: "AV_PIX_FMT_0BGR", value: 122)
!625 = !DIEnumerator(name: "AV_PIX_FMT_BGR0", value: 123)
!626 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P12BE", value: 124)
!627 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P12LE", value: 125)
!628 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P14BE", value: 126)
!629 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P14LE", value: 127)
!630 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P12BE", value: 128)
!631 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P12LE", value: 129)
!632 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P14BE", value: 130)
!633 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P14LE", value: 131)
!634 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P12BE", value: 132)
!635 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P12LE", value: 133)
!636 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P14BE", value: 134)
!637 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P14LE", value: 135)
!638 = !DIEnumerator(name: "AV_PIX_FMT_GBRP12BE", value: 136)
!639 = !DIEnumerator(name: "AV_PIX_FMT_GBRP12LE", value: 137)
!640 = !DIEnumerator(name: "AV_PIX_FMT_GBRP14BE", value: 138)
!641 = !DIEnumerator(name: "AV_PIX_FMT_GBRP14LE", value: 139)
!642 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ411P", value: 140)
!643 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_BGGR8", value: 141)
!644 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_RGGB8", value: 142)
!645 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GBRG8", value: 143)
!646 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GRBG8", value: 144)
!647 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_BGGR16LE", value: 145)
!648 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_BGGR16BE", value: 146)
!649 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_RGGB16LE", value: 147)
!650 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_RGGB16BE", value: 148)
!651 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GBRG16LE", value: 149)
!652 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GBRG16BE", value: 150)
!653 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GRBG16LE", value: 151)
!654 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GRBG16BE", value: 152)
!655 = !DIEnumerator(name: "AV_PIX_FMT_XVMC", value: 153)
!656 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P10LE", value: 154)
!657 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P10BE", value: 155)
!658 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P12LE", value: 156)
!659 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P12BE", value: 157)
!660 = !DIEnumerator(name: "AV_PIX_FMT_AYUV64LE", value: 158)
!661 = !DIEnumerator(name: "AV_PIX_FMT_AYUV64BE", value: 159)
!662 = !DIEnumerator(name: "AV_PIX_FMT_VIDEOTOOLBOX", value: 160)
!663 = !DIEnumerator(name: "AV_PIX_FMT_P010LE", value: 161)
!664 = !DIEnumerator(name: "AV_PIX_FMT_P010BE", value: 162)
!665 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP12BE", value: 163)
!666 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP12LE", value: 164)
!667 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP10BE", value: 165)
!668 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP10LE", value: 166)
!669 = !DIEnumerator(name: "AV_PIX_FMT_MEDIACODEC", value: 167)
!670 = !DIEnumerator(name: "AV_PIX_FMT_GRAY12BE", value: 168)
!671 = !DIEnumerator(name: "AV_PIX_FMT_GRAY12LE", value: 169)
!672 = !DIEnumerator(name: "AV_PIX_FMT_GRAY10BE", value: 170)
!673 = !DIEnumerator(name: "AV_PIX_FMT_GRAY10LE", value: 171)
!674 = !DIEnumerator(name: "AV_PIX_FMT_P016LE", value: 172)
!675 = !DIEnumerator(name: "AV_PIX_FMT_P016BE", value: 173)
!676 = !DIEnumerator(name: "AV_PIX_FMT_D3D11", value: 174)
!677 = !DIEnumerator(name: "AV_PIX_FMT_GRAY9BE", value: 175)
!678 = !DIEnumerator(name: "AV_PIX_FMT_GRAY9LE", value: 176)
!679 = !DIEnumerator(name: "AV_PIX_FMT_GBRPF32BE", value: 177)
!680 = !DIEnumerator(name: "AV_PIX_FMT_GBRPF32LE", value: 178)
!681 = !DIEnumerator(name: "AV_PIX_FMT_GBRAPF32BE", value: 179)
!682 = !DIEnumerator(name: "AV_PIX_FMT_GBRAPF32LE", value: 180)
!683 = !DIEnumerator(name: "AV_PIX_FMT_DRM_PRIME", value: 181)
!684 = !DIEnumerator(name: "AV_PIX_FMT_OPENCL", value: 182)
!685 = !DIEnumerator(name: "AV_PIX_FMT_GRAY14BE", value: 183)
!686 = !DIEnumerator(name: "AV_PIX_FMT_GRAY14LE", value: 184)
!687 = !DIEnumerator(name: "AV_PIX_FMT_GRAYF32BE", value: 185)
!688 = !DIEnumerator(name: "AV_PIX_FMT_GRAYF32LE", value: 186)
!689 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P12BE", value: 187)
!690 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P12LE", value: 188)
!691 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P12BE", value: 189)
!692 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P12LE", value: 190)
!693 = !DIEnumerator(name: "AV_PIX_FMT_NB", value: 191)
!694 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVSampleFormat", file: !695, line: 58, size: 32, align: 32, elements: !696)
!695 = !DIFile(filename: "./libavutil/samplefmt.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!696 = !{!697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710}
!697 = !DIEnumerator(name: "AV_SAMPLE_FMT_NONE", value: -1)
!698 = !DIEnumerator(name: "AV_SAMPLE_FMT_U8", value: 0)
!699 = !DIEnumerator(name: "AV_SAMPLE_FMT_S16", value: 1)
!700 = !DIEnumerator(name: "AV_SAMPLE_FMT_S32", value: 2)
!701 = !DIEnumerator(name: "AV_SAMPLE_FMT_FLT", value: 3)
!702 = !DIEnumerator(name: "AV_SAMPLE_FMT_DBL", value: 4)
!703 = !DIEnumerator(name: "AV_SAMPLE_FMT_U8P", value: 5)
!704 = !DIEnumerator(name: "AV_SAMPLE_FMT_S16P", value: 6)
!705 = !DIEnumerator(name: "AV_SAMPLE_FMT_S32P", value: 7)
!706 = !DIEnumerator(name: "AV_SAMPLE_FMT_FLTP", value: 8)
!707 = !DIEnumerator(name: "AV_SAMPLE_FMT_DBLP", value: 9)
!708 = !DIEnumerator(name: "AV_SAMPLE_FMT_S64", value: 10)
!709 = !DIEnumerator(name: "AV_SAMPLE_FMT_S64P", value: 11)
!710 = !DIEnumerator(name: "AV_SAMPLE_FMT_NB", value: 12)
!711 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVSubtitleType", file: !35, line: 3865, size: 32, align: 32, elements: !712)
!712 = !{!713, !714, !715, !716}
!713 = !DIEnumerator(name: "SUBTITLE_NONE", value: 0)
!714 = !DIEnumerator(name: "SUBTITLE_BITMAP", value: 1)
!715 = !DIEnumerator(name: "SUBTITLE_TEXT", value: 2)
!716 = !DIEnumerator(name: "SUBTITLE_ASS", value: 3)
!717 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVPacketSideDataType", file: !35, line: 1175, size: 32, align: 32, elements: !718)
!718 = !{!719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746}
!719 = !DIEnumerator(name: "AV_PKT_DATA_PALETTE", value: 0)
!720 = !DIEnumerator(name: "AV_PKT_DATA_NEW_EXTRADATA", value: 1)
!721 = !DIEnumerator(name: "AV_PKT_DATA_PARAM_CHANGE", value: 2)
!722 = !DIEnumerator(name: "AV_PKT_DATA_H263_MB_INFO", value: 3)
!723 = !DIEnumerator(name: "AV_PKT_DATA_REPLAYGAIN", value: 4)
!724 = !DIEnumerator(name: "AV_PKT_DATA_DISPLAYMATRIX", value: 5)
!725 = !DIEnumerator(name: "AV_PKT_DATA_STEREO3D", value: 6)
!726 = !DIEnumerator(name: "AV_PKT_DATA_AUDIO_SERVICE_TYPE", value: 7)
!727 = !DIEnumerator(name: "AV_PKT_DATA_QUALITY_STATS", value: 8)
!728 = !DIEnumerator(name: "AV_PKT_DATA_FALLBACK_TRACK", value: 9)
!729 = !DIEnumerator(name: "AV_PKT_DATA_CPB_PROPERTIES", value: 10)
!730 = !DIEnumerator(name: "AV_PKT_DATA_SKIP_SAMPLES", value: 11)
!731 = !DIEnumerator(name: "AV_PKT_DATA_JP_DUALMONO", value: 12)
!732 = !DIEnumerator(name: "AV_PKT_DATA_STRINGS_METADATA", value: 13)
!733 = !DIEnumerator(name: "AV_PKT_DATA_SUBTITLE_POSITION", value: 14)
!734 = !DIEnumerator(name: "AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL", value: 15)
!735 = !DIEnumerator(name: "AV_PKT_DATA_WEBVTT_IDENTIFIER", value: 16)
!736 = !DIEnumerator(name: "AV_PKT_DATA_WEBVTT_SETTINGS", value: 17)
!737 = !DIEnumerator(name: "AV_PKT_DATA_METADATA_UPDATE", value: 18)
!738 = !DIEnumerator(name: "AV_PKT_DATA_MPEGTS_STREAM_ID", value: 19)
!739 = !DIEnumerator(name: "AV_PKT_DATA_MASTERING_DISPLAY_METADATA", value: 20)
!740 = !DIEnumerator(name: "AV_PKT_DATA_SPHERICAL", value: 21)
!741 = !DIEnumerator(name: "AV_PKT_DATA_CONTENT_LIGHT_LEVEL", value: 22)
!742 = !DIEnumerator(name: "AV_PKT_DATA_A53_CC", value: 23)
!743 = !DIEnumerator(name: "AV_PKT_DATA_ENCRYPTION_INIT_INFO", value: 24)
!744 = !DIEnumerator(name: "AV_PKT_DATA_ENCRYPTION_INFO", value: 25)
!745 = !DIEnumerator(name: "AV_PKT_DATA_AFD", value: 26)
!746 = !DIEnumerator(name: "AV_PKT_DATA_NB", value: 27)
!747 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVPictureType", file: !25, line: 272, size: 32, align: 32, elements: !748)
!748 = !{!749, !750, !751, !752, !753, !754, !755, !756}
!749 = !DIEnumerator(name: "AV_PICTURE_TYPE_NONE", value: 0)
!750 = !DIEnumerator(name: "AV_PICTURE_TYPE_I", value: 1)
!751 = !DIEnumerator(name: "AV_PICTURE_TYPE_P", value: 2)
!752 = !DIEnumerator(name: "AV_PICTURE_TYPE_B", value: 3)
!753 = !DIEnumerator(name: "AV_PICTURE_TYPE_S", value: 4)
!754 = !DIEnumerator(name: "AV_PICTURE_TYPE_SI", value: 5)
!755 = !DIEnumerator(name: "AV_PICTURE_TYPE_SP", value: 6)
!756 = !DIEnumerator(name: "AV_PICTURE_TYPE_BI", value: 7)
!757 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVFrameSideDataType", file: !758, line: 48, size: 32, align: 32, elements: !759)
!758 = !DIFile(filename: "./libavutil/frame.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!759 = !{!760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780}
!760 = !DIEnumerator(name: "AV_FRAME_DATA_PANSCAN", value: 0)
!761 = !DIEnumerator(name: "AV_FRAME_DATA_A53_CC", value: 1)
!762 = !DIEnumerator(name: "AV_FRAME_DATA_STEREO3D", value: 2)
!763 = !DIEnumerator(name: "AV_FRAME_DATA_MATRIXENCODING", value: 3)
!764 = !DIEnumerator(name: "AV_FRAME_DATA_DOWNMIX_INFO", value: 4)
!765 = !DIEnumerator(name: "AV_FRAME_DATA_REPLAYGAIN", value: 5)
!766 = !DIEnumerator(name: "AV_FRAME_DATA_DISPLAYMATRIX", value: 6)
!767 = !DIEnumerator(name: "AV_FRAME_DATA_AFD", value: 7)
!768 = !DIEnumerator(name: "AV_FRAME_DATA_MOTION_VECTORS", value: 8)
!769 = !DIEnumerator(name: "AV_FRAME_DATA_SKIP_SAMPLES", value: 9)
!770 = !DIEnumerator(name: "AV_FRAME_DATA_AUDIO_SERVICE_TYPE", value: 10)
!771 = !DIEnumerator(name: "AV_FRAME_DATA_MASTERING_DISPLAY_METADATA", value: 11)
!772 = !DIEnumerator(name: "AV_FRAME_DATA_GOP_TIMECODE", value: 12)
!773 = !DIEnumerator(name: "AV_FRAME_DATA_SPHERICAL", value: 13)
!774 = !DIEnumerator(name: "AV_FRAME_DATA_CONTENT_LIGHT_LEVEL", value: 14)
!775 = !DIEnumerator(name: "AV_FRAME_DATA_ICC_PROFILE", value: 15)
!776 = !DIEnumerator(name: "AV_FRAME_DATA_QP_TABLE_PROPERTIES", value: 16)
!777 = !DIEnumerator(name: "AV_FRAME_DATA_QP_TABLE_DATA", value: 17)
!778 = !DIEnumerator(name: "AV_FRAME_DATA_S12M_TIMECODE", value: 18)
!779 = !DIEnumerator(name: "AV_FRAME_DATA_DYNAMIC_HDR_PLUS", value: 19)
!780 = !DIEnumerator(name: "AV_FRAME_DATA_REGIONS_OF_INTEREST", value: 20)
!781 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorRange", file: !495, line: 516, size: 32, align: 32, elements: !782)
!782 = !{!783, !784, !785, !786}
!783 = !DIEnumerator(name: "AVCOL_RANGE_UNSPECIFIED", value: 0)
!784 = !DIEnumerator(name: "AVCOL_RANGE_MPEG", value: 1)
!785 = !DIEnumerator(name: "AVCOL_RANGE_JPEG", value: 2)
!786 = !DIEnumerator(name: "AVCOL_RANGE_NB", value: 3)
!787 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorPrimaries", file: !495, line: 440, size: 32, align: 32, elements: !788)
!788 = !{!789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804}
!789 = !DIEnumerator(name: "AVCOL_PRI_RESERVED0", value: 0)
!790 = !DIEnumerator(name: "AVCOL_PRI_BT709", value: 1)
!791 = !DIEnumerator(name: "AVCOL_PRI_UNSPECIFIED", value: 2)
!792 = !DIEnumerator(name: "AVCOL_PRI_RESERVED", value: 3)
!793 = !DIEnumerator(name: "AVCOL_PRI_BT470M", value: 4)
!794 = !DIEnumerator(name: "AVCOL_PRI_BT470BG", value: 5)
!795 = !DIEnumerator(name: "AVCOL_PRI_SMPTE170M", value: 6)
!796 = !DIEnumerator(name: "AVCOL_PRI_SMPTE240M", value: 7)
!797 = !DIEnumerator(name: "AVCOL_PRI_FILM", value: 8)
!798 = !DIEnumerator(name: "AVCOL_PRI_BT2020", value: 9)
!799 = !DIEnumerator(name: "AVCOL_PRI_SMPTE428", value: 10)
!800 = !DIEnumerator(name: "AVCOL_PRI_SMPTEST428_1", value: 10)
!801 = !DIEnumerator(name: "AVCOL_PRI_SMPTE431", value: 11)
!802 = !DIEnumerator(name: "AVCOL_PRI_SMPTE432", value: 12)
!803 = !DIEnumerator(name: "AVCOL_PRI_JEDEC_P22", value: 22)
!804 = !DIEnumerator(name: "AVCOL_PRI_NB", value: 23)
!805 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorTransferCharacteristic", file: !495, line: 464, size: 32, align: 32, elements: !806)
!806 = !{!807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828}
!807 = !DIEnumerator(name: "AVCOL_TRC_RESERVED0", value: 0)
!808 = !DIEnumerator(name: "AVCOL_TRC_BT709", value: 1)
!809 = !DIEnumerator(name: "AVCOL_TRC_UNSPECIFIED", value: 2)
!810 = !DIEnumerator(name: "AVCOL_TRC_RESERVED", value: 3)
!811 = !DIEnumerator(name: "AVCOL_TRC_GAMMA22", value: 4)
!812 = !DIEnumerator(name: "AVCOL_TRC_GAMMA28", value: 5)
!813 = !DIEnumerator(name: "AVCOL_TRC_SMPTE170M", value: 6)
!814 = !DIEnumerator(name: "AVCOL_TRC_SMPTE240M", value: 7)
!815 = !DIEnumerator(name: "AVCOL_TRC_LINEAR", value: 8)
!816 = !DIEnumerator(name: "AVCOL_TRC_LOG", value: 9)
!817 = !DIEnumerator(name: "AVCOL_TRC_LOG_SQRT", value: 10)
!818 = !DIEnumerator(name: "AVCOL_TRC_IEC61966_2_4", value: 11)
!819 = !DIEnumerator(name: "AVCOL_TRC_BT1361_ECG", value: 12)
!820 = !DIEnumerator(name: "AVCOL_TRC_IEC61966_2_1", value: 13)
!821 = !DIEnumerator(name: "AVCOL_TRC_BT2020_10", value: 14)
!822 = !DIEnumerator(name: "AVCOL_TRC_BT2020_12", value: 15)
!823 = !DIEnumerator(name: "AVCOL_TRC_SMPTE2084", value: 16)
!824 = !DIEnumerator(name: "AVCOL_TRC_SMPTEST2084", value: 16)
!825 = !DIEnumerator(name: "AVCOL_TRC_SMPTE428", value: 17)
!826 = !DIEnumerator(name: "AVCOL_TRC_SMPTEST428_1", value: 17)
!827 = !DIEnumerator(name: "AVCOL_TRC_ARIB_STD_B67", value: 18)
!828 = !DIEnumerator(name: "AVCOL_TRC_NB", value: 19)
!829 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorSpace", file: !495, line: 493, size: 32, align: 32, elements: !830)
!830 = !{!831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847}
!831 = !DIEnumerator(name: "AVCOL_SPC_RGB", value: 0)
!832 = !DIEnumerator(name: "AVCOL_SPC_BT709", value: 1)
!833 = !DIEnumerator(name: "AVCOL_SPC_UNSPECIFIED", value: 2)
!834 = !DIEnumerator(name: "AVCOL_SPC_RESERVED", value: 3)
!835 = !DIEnumerator(name: "AVCOL_SPC_FCC", value: 4)
!836 = !DIEnumerator(name: "AVCOL_SPC_BT470BG", value: 5)
!837 = !DIEnumerator(name: "AVCOL_SPC_SMPTE170M", value: 6)
!838 = !DIEnumerator(name: "AVCOL_SPC_SMPTE240M", value: 7)
!839 = !DIEnumerator(name: "AVCOL_SPC_YCGCO", value: 8)
!840 = !DIEnumerator(name: "AVCOL_SPC_YCOCG", value: 8)
!841 = !DIEnumerator(name: "AVCOL_SPC_BT2020_NCL", value: 9)
!842 = !DIEnumerator(name: "AVCOL_SPC_BT2020_CL", value: 10)
!843 = !DIEnumerator(name: "AVCOL_SPC_SMPTE2085", value: 11)
!844 = !DIEnumerator(name: "AVCOL_SPC_CHROMA_DERIVED_NCL", value: 12)
!845 = !DIEnumerator(name: "AVCOL_SPC_CHROMA_DERIVED_CL", value: 13)
!846 = !DIEnumerator(name: "AVCOL_SPC_ICTCP", value: 14)
!847 = !DIEnumerator(name: "AVCOL_SPC_NB", value: 15)
!848 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVChromaLocation", file: !495, line: 538, size: 32, align: 32, elements: !849)
!849 = !{!850, !851, !852, !853, !854, !855, !856, !857}
!850 = !DIEnumerator(name: "AVCHROMA_LOC_UNSPECIFIED", value: 0)
!851 = !DIEnumerator(name: "AVCHROMA_LOC_LEFT", value: 1)
!852 = !DIEnumerator(name: "AVCHROMA_LOC_CENTER", value: 2)
!853 = !DIEnumerator(name: "AVCHROMA_LOC_TOPLEFT", value: 3)
!854 = !DIEnumerator(name: "AVCHROMA_LOC_TOP", value: 4)
!855 = !DIEnumerator(name: "AVCHROMA_LOC_BOTTOMLEFT", value: 5)
!856 = !DIEnumerator(name: "AVCHROMA_LOC_BOTTOM", value: 6)
!857 = !DIEnumerator(name: "AVCHROMA_LOC_NB", value: 7)
!858 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVFieldOrder", file: !35, line: 1534, size: 32, align: 32, elements: !859)
!859 = !{!860, !861, !862, !863, !864, !865}
!860 = !DIEnumerator(name: "AV_FIELD_UNKNOWN", value: 0)
!861 = !DIEnumerator(name: "AV_FIELD_PROGRESSIVE", value: 1)
!862 = !DIEnumerator(name: "AV_FIELD_TT", value: 2)
!863 = !DIEnumerator(name: "AV_FIELD_BB", value: 3)
!864 = !DIEnumerator(name: "AV_FIELD_TB", value: 4)
!865 = !DIEnumerator(name: "AV_FIELD_BT", value: 5)
!866 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVAudioServiceType", file: !35, line: 810, size: 32, align: 32, elements: !867)
!867 = !{!868, !869, !870, !871, !872, !873, !874, !875, !876, !877}
!868 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_MAIN", value: 0)
!869 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_EFFECTS", value: 1)
!870 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED", value: 2)
!871 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED", value: 3)
!872 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_DIALOGUE", value: 4)
!873 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_COMMENTARY", value: 5)
!874 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_EMERGENCY", value: 6)
!875 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_VOICE_OVER", value: 7)
!876 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_KARAOKE", value: 8)
!877 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_NB", value: 9)
!878 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVDiscard", file: !35, line: 798, size: 32, align: 32, elements: !879)
!879 = !{!880, !881, !882, !883, !884, !885, !886}
!880 = !DIEnumerator(name: "AVDISCARD_NONE", value: -16)
!881 = !DIEnumerator(name: "AVDISCARD_DEFAULT", value: 0)
!882 = !DIEnumerator(name: "AVDISCARD_NONREF", value: 8)
!883 = !DIEnumerator(name: "AVDISCARD_BIDIR", value: 16)
!884 = !DIEnumerator(name: "AVDISCARD_NONINTRA", value: 24)
!885 = !DIEnumerator(name: "AVDISCARD_NONKEY", value: 32)
!886 = !DIEnumerator(name: "AVDISCARD_ALL", value: 48)
!887 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "fft_permutation_type", file: !888, line: 77, size: 32, align: 32, elements: !889)
!888 = !DIFile(filename: "libavcodec/fft.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!889 = !{!890, !891, !892}
!890 = !DIEnumerator(name: "FF_FFT_PERM_DEFAULT", value: 0)
!891 = !DIEnumerator(name: "FF_FFT_PERM_SWAP_LSBS", value: 1)
!892 = !DIEnumerator(name: "FF_FFT_PERM_AVX", value: 2)
!893 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mdct_permutation_type", file: !888, line: 83, size: 32, align: 32, elements: !894)
!894 = !{!895, !896}
!895 = !DIEnumerator(name: "FF_MDCT_PERM_NONE", value: 0)
!896 = !DIEnumerator(name: "FF_MDCT_PERM_INTERLEAVE", value: 1)
!897 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVMatrixEncoding", file: !898, line: 114, size: 32, align: 32, elements: !899)
!898 = !DIFile(filename: "./libavutil/channel_layout.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!899 = !{!900, !901, !902, !903, !904, !905, !906, !907}
!900 = !DIEnumerator(name: "AV_MATRIX_ENCODING_NONE", value: 0)
!901 = !DIEnumerator(name: "AV_MATRIX_ENCODING_DOLBY", value: 1)
!902 = !DIEnumerator(name: "AV_MATRIX_ENCODING_DPLII", value: 2)
!903 = !DIEnumerator(name: "AV_MATRIX_ENCODING_DPLIIX", value: 3)
!904 = !DIEnumerator(name: "AV_MATRIX_ENCODING_DPLIIZ", value: 4)
!905 = !DIEnumerator(name: "AV_MATRIX_ENCODING_DOLBYEX", value: 5)
!906 = !DIEnumerator(name: "AV_MATRIX_ENCODING_DOLBYHEADPHONE", value: 6)
!907 = !DIEnumerator(name: "AV_MATRIX_ENCODING_NB", value: 7)
!908 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "DCASpeakerMask", file: !909, line: 91, size: 32, align: 32, elements: !910)
!909 = !DIFile(filename: "libavcodec/dca.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!910 = !{!911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938}
!911 = !DIEnumerator(name: "DCA_SPEAKER_MASK_C", value: 1)
!912 = !DIEnumerator(name: "DCA_SPEAKER_MASK_L", value: 2)
!913 = !DIEnumerator(name: "DCA_SPEAKER_MASK_R", value: 4)
!914 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Ls", value: 8)
!915 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Rs", value: 16)
!916 = !DIEnumerator(name: "DCA_SPEAKER_MASK_LFE1", value: 32)
!917 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Cs", value: 64)
!918 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Lsr", value: 128)
!919 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Rsr", value: 256)
!920 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Lss", value: 512)
!921 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Rss", value: 1024)
!922 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Lc", value: 2048)
!923 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Rc", value: 4096)
!924 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Lh", value: 8192)
!925 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Ch", value: 16384)
!926 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Rh", value: 32768)
!927 = !DIEnumerator(name: "DCA_SPEAKER_MASK_LFE2", value: 65536)
!928 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Lw", value: 131072)
!929 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Rw", value: 262144)
!930 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Oh", value: 524288)
!931 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Lhs", value: 1048576)
!932 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Rhs", value: 2097152)
!933 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Chr", value: 4194304)
!934 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Lhr", value: 8388608)
!935 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Rhr", value: 16777216)
!936 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Cl", value: 33554432)
!937 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Ll", value: 67108864)
!938 = !DIEnumerator(name: "DCA_SPEAKER_MASK_Rl", value: 134217728)
!939 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "DCASpeaker", file: !909, line: 78, size: 32, align: 32, elements: !940)
!940 = !{!941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973}
!941 = !DIEnumerator(name: "DCA_SPEAKER_C", value: 0)
!942 = !DIEnumerator(name: "DCA_SPEAKER_L", value: 1)
!943 = !DIEnumerator(name: "DCA_SPEAKER_R", value: 2)
!944 = !DIEnumerator(name: "DCA_SPEAKER_Ls", value: 3)
!945 = !DIEnumerator(name: "DCA_SPEAKER_Rs", value: 4)
!946 = !DIEnumerator(name: "DCA_SPEAKER_LFE1", value: 5)
!947 = !DIEnumerator(name: "DCA_SPEAKER_Cs", value: 6)
!948 = !DIEnumerator(name: "DCA_SPEAKER_Lsr", value: 7)
!949 = !DIEnumerator(name: "DCA_SPEAKER_Rsr", value: 8)
!950 = !DIEnumerator(name: "DCA_SPEAKER_Lss", value: 9)
!951 = !DIEnumerator(name: "DCA_SPEAKER_Rss", value: 10)
!952 = !DIEnumerator(name: "DCA_SPEAKER_Lc", value: 11)
!953 = !DIEnumerator(name: "DCA_SPEAKER_Rc", value: 12)
!954 = !DIEnumerator(name: "DCA_SPEAKER_Lh", value: 13)
!955 = !DIEnumerator(name: "DCA_SPEAKER_Ch", value: 14)
!956 = !DIEnumerator(name: "DCA_SPEAKER_Rh", value: 15)
!957 = !DIEnumerator(name: "DCA_SPEAKER_LFE2", value: 16)
!958 = !DIEnumerator(name: "DCA_SPEAKER_Lw", value: 17)
!959 = !DIEnumerator(name: "DCA_SPEAKER_Rw", value: 18)
!960 = !DIEnumerator(name: "DCA_SPEAKER_Oh", value: 19)
!961 = !DIEnumerator(name: "DCA_SPEAKER_Lhs", value: 20)
!962 = !DIEnumerator(name: "DCA_SPEAKER_Rhs", value: 21)
!963 = !DIEnumerator(name: "DCA_SPEAKER_Chr", value: 22)
!964 = !DIEnumerator(name: "DCA_SPEAKER_Lhr", value: 23)
!965 = !DIEnumerator(name: "DCA_SPEAKER_Rhr", value: 24)
!966 = !DIEnumerator(name: "DCA_SPEAKER_Cl", value: 25)
!967 = !DIEnumerator(name: "DCA_SPEAKER_Ll", value: 26)
!968 = !DIEnumerator(name: "DCA_SPEAKER_Rl", value: 27)
!969 = !DIEnumerator(name: "DCA_SPEAKER_RSV1", value: 28)
!970 = !DIEnumerator(name: "DCA_SPEAKER_RSV2", value: 29)
!971 = !DIEnumerator(name: "DCA_SPEAKER_RSV3", value: 30)
!972 = !DIEnumerator(name: "DCA_SPEAKER_RSV4", value: 31)
!973 = !DIEnumerator(name: "DCA_SPEAKER_COUNT", value: 32)
!974 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "DCADownMixType", file: !909, line: 186, size: 32, align: 32, elements: !975)
!975 = !{!976, !977, !978, !979, !980, !981, !982, !983}
!976 = !DIEnumerator(name: "DCA_DMIX_TYPE_1_0", value: 0)
!977 = !DIEnumerator(name: "DCA_DMIX_TYPE_LoRo", value: 1)
!978 = !DIEnumerator(name: "DCA_DMIX_TYPE_LtRt", value: 2)
!979 = !DIEnumerator(name: "DCA_DMIX_TYPE_3_0", value: 3)
!980 = !DIEnumerator(name: "DCA_DMIX_TYPE_2_1", value: 4)
!981 = !DIEnumerator(name: "DCA_DMIX_TYPE_2_2", value: 5)
!982 = !DIEnumerator(name: "DCA_DMIX_TYPE_3_1", value: 6)
!983 = !DIEnumerator(name: "DCA_DMIX_TYPE_COUNT", value: 7)
!984 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "DCARepresentationType", file: !909, line: 164, size: 32, align: 32, elements: !985)
!985 = !{!986, !987}
!986 = !DIEnumerator(name: "DCA_REPR_TYPE_LtRt", value: 2)
!987 = !DIEnumerator(name: "DCA_REPR_TYPE_LhRh", value: 3)
!988 = !{!989, !993, !994, !996, !997, !1004, !1006, !995}
!989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !990, size: 64, align: 64)
!990 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !991, line: 37, baseType: !992)
!991 = !DIFile(filename: "/usr/include/stdint.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!992 = !DIBasicType(name: "short", size: 16, align: 16, encoding: DW_ATE_signed)
!993 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !995, size: 64, align: 64)
!995 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !991, line: 38, baseType: !996)
!996 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!997 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !998, size: 64, align: 64)
!998 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !999)
!999 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "unaligned_32", file: !1000, line: 221, size: 32, align: 8, elements: !1001)
!1000 = !DIFile(filename: "./libavutil/intreadwrite.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!1001 = !{!1002}
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "l", scope: !999, file: !1000, line: 221, baseType: !1003, size: 32, align: 32)
!1003 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !991, line: 51, baseType: !993)
!1004 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !991, line: 48, baseType: !1005)
!1005 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!1006 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !991, line: 40, baseType: !1007)
!1007 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!1008 = !{i32 2, !"Dwarf Version", i32 4}
!1009 = !{i32 2, !"Debug Info Version", i32 3}
!1010 = !{!"clang version 3.9.0 (tags/RELEASE_390/final)"}
!1011 = distinct !DISubprogram(name: "ff_dca_xll_parse", scope: !1012, file: !1012, line: 1161, type: !1013, isLocal: false, isDefinition: true, scopeLine: 1162, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!1012 = !DIFile(filename: "libavcodec/dca_xll.c", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!1013 = !DISubroutineType(types: !1014)
!1014 = !{!996, !1015, !1149, !2003}
!1015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1016, size: 64, align: 64)
!1016 = !DIDerivedType(tag: DW_TAG_typedef, name: "DCAXllDecoder", file: !1017, line: 142, baseType: !1018)
!1017 = !DIFile(filename: "libavcodec/dca_xll.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!1018 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DCAXllDecoder", file: !1017, line: 105, size: 72448, align: 256, elements: !1019)
!1019 = !{!1020, !1745, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !2000, !2001}
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "avctx", scope: !1018, file: !1017, line: 106, baseType: !1021, size: 64, align: 64)
!1021 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1022, size: 64, align: 64)
!1022 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodecContext", file: !35, line: 3360, baseType: !1023)
!1023 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecContext", file: !35, line: 1556, size: 8448, align: 64, elements: !1024)
!1024 = !{!1025, !1070, !1071, !1072, !1343, !1344, !1345, !1346, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1499, !1503, !1504, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1683, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744}
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "av_class", scope: !1023, file: !35, line: 1561, baseType: !1026, size: 64, align: 64)
!1026 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1027, size: 64, align: 64)
!1027 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1028)
!1028 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVClass", file: !4, line: 143, baseType: !1029)
!1029 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVClass", file: !4, line: 67, size: 640, align: 64, elements: !1030)
!1030 = !{!1031, !1035, !1040, !1044, !1045, !1046, !1047, !1051, !1057, !1059, !1063}
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "class_name", scope: !1029, file: !4, line: 72, baseType: !1032, size: 64, align: 64)
!1032 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1033, size: 64, align: 64)
!1033 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1034)
!1034 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "item_name", scope: !1029, file: !4, line: 78, baseType: !1036, size: 64, align: 64, offset: 64)
!1036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1037, size: 64, align: 64)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{!1032, !1039}
!1039 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "option", scope: !1029, file: !4, line: 85, baseType: !1041, size: 64, align: 64, offset: 128)
!1041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1042, size: 64, align: 64)
!1042 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1043)
!1043 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVOption", file: !4, line: 85, flags: DIFlagFwdDecl)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1029, file: !4, line: 93, baseType: !996, size: 32, align: 32, offset: 192)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "log_level_offset_offset", scope: !1029, file: !4, line: 99, baseType: !996, size: 32, align: 32, offset: 224)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "parent_log_context_offset", scope: !1029, file: !4, line: 108, baseType: !996, size: 32, align: 32, offset: 256)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "child_next", scope: !1029, file: !4, line: 113, baseType: !1048, size: 64, align: 64, offset: 320)
!1048 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1049, size: 64, align: 64)
!1049 = !DISubroutineType(types: !1050)
!1050 = !{!1039, !1039, !1039}
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "child_class_next", scope: !1029, file: !4, line: 123, baseType: !1052, size: 64, align: 64, offset: 384)
!1052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1053, size: 64, align: 64)
!1053 = !DISubroutineType(types: !1054)
!1054 = !{!1055, !1055}
!1055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1056, size: 64, align: 64)
!1056 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1029)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "category", scope: !1029, file: !4, line: 130, baseType: !1058, size: 32, align: 32, offset: 448)
!1058 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVClassCategory", file: !4, line: 48, baseType: !3)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "get_category", scope: !1029, file: !4, line: 136, baseType: !1060, size: 64, align: 64, offset: 512)
!1060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1061, size: 64, align: 64)
!1061 = !DISubroutineType(types: !1062)
!1062 = !{!1058, !1039}
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "query_ranges", scope: !1029, file: !4, line: 142, baseType: !1064, size: 64, align: 64, offset: 576)
!1064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1065, size: 64, align: 64)
!1065 = !DISubroutineType(types: !1066)
!1066 = !{!996, !1067, !1039, !1032, !996}
!1067 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1068, size: 64, align: 64)
!1068 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1069, size: 64, align: 64)
!1069 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVOptionRanges", file: !4, line: 60, flags: DIFlagFwdDecl)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "log_level_offset", scope: !1023, file: !35, line: 1562, baseType: !996, size: 32, align: 32, offset: 64)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "codec_type", scope: !1023, file: !35, line: 1564, baseType: !24, size: 32, align: 32, offset: 96)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "codec", scope: !1023, file: !35, line: 1565, baseType: !1073, size: 64, align: 64, offset: 128)
!1073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1074, size: 64, align: 64)
!1074 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1075)
!1075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodec", file: !35, line: 3468, size: 1984, align: 64, elements: !1076)
!1076 = !{!1077, !1078, !1079, !1080, !1081, !1082, !1091, !1094, !1097, !1100, !1105, !1106, !1107, !1115, !1116, !1117, !1119, !1123, !1129, !1140, !1144, !1145, !1193, !1314, !1318, !1319, !1323, !1327, !1332, !1336, !1337, !1338}
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1075, file: !35, line: 3475, baseType: !1032, size: 64, align: 64)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "long_name", scope: !1075, file: !35, line: 3480, baseType: !1032, size: 64, align: 64, offset: 64)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1075, file: !35, line: 3481, baseType: !24, size: 32, align: 32, offset: 128)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1075, file: !35, line: 3482, baseType: !34, size: 32, align: 32, offset: 160)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "capabilities", scope: !1075, file: !35, line: 3487, baseType: !996, size: 32, align: 32, offset: 192)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "supported_framerates", scope: !1075, file: !35, line: 3488, baseType: !1083, size: 64, align: 64, offset: 256)
!1083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1084, size: 64, align: 64)
!1084 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1085)
!1085 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVRational", file: !1086, line: 61, baseType: !1087)
!1086 = !DIFile(filename: "./libavutil/rational.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!1087 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVRational", file: !1086, line: 58, size: 64, align: 32, elements: !1088)
!1088 = !{!1089, !1090}
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1087, file: !1086, line: 59, baseType: !996, size: 32, align: 32)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "den", scope: !1087, file: !1086, line: 60, baseType: !996, size: 32, align: 32, offset: 32)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "pix_fmts", scope: !1075, file: !35, line: 3489, baseType: !1092, size: 64, align: 64, offset: 320)
!1092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1093, size: 64, align: 64)
!1093 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !494)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "supported_samplerates", scope: !1075, file: !35, line: 3490, baseType: !1095, size: 64, align: 64, offset: 384)
!1095 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1096, size: 64, align: 64)
!1096 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !996)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "sample_fmts", scope: !1075, file: !35, line: 3491, baseType: !1098, size: 64, align: 64, offset: 448)
!1098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1099, size: 64, align: 64)
!1099 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !694)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layouts", scope: !1075, file: !35, line: 3492, baseType: !1101, size: 64, align: 64, offset: 512)
!1101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1102, size: 64, align: 64)
!1102 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1103)
!1103 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !991, line: 55, baseType: !1104)
!1104 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "max_lowres", scope: !1075, file: !35, line: 3493, baseType: !1004, size: 8, align: 8, offset: 576)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "priv_class", scope: !1075, file: !35, line: 3494, baseType: !1026, size: 64, align: 64, offset: 640)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "profiles", scope: !1075, file: !35, line: 3495, baseType: !1108, size: 64, align: 64, offset: 704)
!1108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1109, size: 64, align: 64)
!1109 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1110)
!1110 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVProfile", file: !35, line: 3404, baseType: !1111)
!1111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVProfile", file: !35, line: 3401, size: 128, align: 64, elements: !1112)
!1112 = !{!1113, !1114}
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "profile", scope: !1111, file: !35, line: 3402, baseType: !996, size: 32, align: 32)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1111, file: !35, line: 3403, baseType: !1032, size: 64, align: 64, offset: 64)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "wrapper_name", scope: !1075, file: !35, line: 3507, baseType: !1032, size: 64, align: 64, offset: 768)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data_size", scope: !1075, file: !35, line: 3516, baseType: !996, size: 32, align: 32, offset: 832)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1075, file: !35, line: 3517, baseType: !1118, size: 64, align: 64, offset: 896)
!1118 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1075, size: 64, align: 64)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "init_thread_copy", scope: !1075, file: !35, line: 3527, baseType: !1120, size: 64, align: 64, offset: 960)
!1120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1121, size: 64, align: 64)
!1121 = !DISubroutineType(types: !1122)
!1122 = !{!996, !1021}
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "update_thread_context", scope: !1075, file: !35, line: 3535, baseType: !1124, size: 64, align: 64, offset: 1024)
!1124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1125, size: 64, align: 64)
!1125 = !DISubroutineType(types: !1126)
!1126 = !{!996, !1021, !1127}
!1127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1128, size: 64, align: 64)
!1128 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1022)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "defaults", scope: !1075, file: !35, line: 3541, baseType: !1130, size: 64, align: 64, offset: 1088)
!1130 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1131, size: 64, align: 64)
!1131 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1132)
!1132 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodecDefault", file: !35, line: 3461, baseType: !1133)
!1133 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecDefault", file: !1134, line: 223, size: 128, align: 64, elements: !1135)
!1134 = !DIFile(filename: "libavcodec/internal.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!1135 = !{!1136, !1139}
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !1133, file: !1134, line: 224, baseType: !1137, size: 64, align: 64)
!1137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1138, size: 64, align: 64)
!1138 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1004)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1133, file: !1134, line: 225, baseType: !1137, size: 64, align: 64, offset: 64)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "init_static_data", scope: !1075, file: !35, line: 3549, baseType: !1141, size: 64, align: 64, offset: 1152)
!1141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1142, size: 64, align: 64)
!1142 = !DISubroutineType(types: !1143)
!1143 = !{null, !1118}
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !1075, file: !35, line: 3551, baseType: !1120, size: 64, align: 64, offset: 1216)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "encode_sub", scope: !1075, file: !35, line: 3552, baseType: !1146, size: 64, align: 64, offset: 1280)
!1146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1147, size: 64, align: 64)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!996, !1021, !1149, !996, !1150}
!1149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1004, size: 64, align: 64)
!1150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1151, size: 64, align: 64)
!1151 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1152)
!1152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVSubtitle", file: !35, line: 3920, size: 256, align: 64, elements: !1153)
!1153 = !{!1154, !1157, !1158, !1159, !1160, !1192}
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !1152, file: !35, line: 3921, baseType: !1155, size: 16, align: 16)
!1155 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !991, line: 49, baseType: !1156)
!1156 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "start_display_time", scope: !1152, file: !35, line: 3922, baseType: !1003, size: 32, align: 32, offset: 32)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "end_display_time", scope: !1152, file: !35, line: 3923, baseType: !1003, size: 32, align: 32, offset: 64)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "num_rects", scope: !1152, file: !35, line: 3924, baseType: !993, size: 32, align: 32, offset: 96)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "rects", scope: !1152, file: !35, line: 3925, baseType: !1161, size: 64, align: 64, offset: 128)
!1161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1162, size: 64, align: 64)
!1162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1163, size: 64, align: 64)
!1163 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVSubtitleRect", file: !35, line: 3918, baseType: !1164)
!1164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVSubtitleRect", file: !35, line: 3885, size: 1600, align: 64, elements: !1165)
!1165 = !{!1166, !1167, !1168, !1169, !1170, !1171, !1181, !1185, !1187, !1188, !1190, !1191}
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1164, file: !35, line: 3886, baseType: !996, size: 32, align: 32)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !1164, file: !35, line: 3887, baseType: !996, size: 32, align: 32, offset: 32)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !1164, file: !35, line: 3888, baseType: !996, size: 32, align: 32, offset: 64)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "h", scope: !1164, file: !35, line: 3889, baseType: !996, size: 32, align: 32, offset: 96)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "nb_colors", scope: !1164, file: !35, line: 3890, baseType: !996, size: 32, align: 32, offset: 128)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "pict", scope: !1164, file: !35, line: 3897, baseType: !1172, size: 768, align: 64, offset: 192)
!1172 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVPicture", file: !35, line: 3858, baseType: !1173)
!1173 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVPicture", file: !35, line: 3853, size: 768, align: 64, elements: !1174)
!1174 = !{!1175, !1179}
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1173, file: !35, line: 3855, baseType: !1176, size: 512, align: 64)
!1176 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1149, size: 512, align: 64, elements: !1177)
!1177 = !{!1178}
!1178 = !DISubrange(count: 8)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "linesize", scope: !1173, file: !35, line: 3857, baseType: !1180, size: 256, align: 32, offset: 512)
!1180 = !DICompositeType(tag: DW_TAG_array_type, baseType: !996, size: 256, align: 32, elements: !1177)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1164, file: !35, line: 3903, baseType: !1182, size: 256, align: 64, offset: 960)
!1182 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1149, size: 256, align: 64, elements: !1183)
!1183 = !{!1184}
!1184 = !DISubrange(count: 4)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "linesize", scope: !1164, file: !35, line: 3904, baseType: !1186, size: 128, align: 32, offset: 1216)
!1186 = !DICompositeType(tag: DW_TAG_array_type, baseType: !996, size: 128, align: 32, elements: !1183)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1164, file: !35, line: 3906, baseType: !711, size: 32, align: 32, offset: 1344)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "text", scope: !1164, file: !35, line: 3908, baseType: !1189, size: 64, align: 64, offset: 1408)
!1189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1034, size: 64, align: 64)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "ass", scope: !1164, file: !35, line: 3915, baseType: !1189, size: 64, align: 64, offset: 1472)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1164, file: !35, line: 3917, baseType: !996, size: 32, align: 32, offset: 1536)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "pts", scope: !1152, file: !35, line: 3926, baseType: !1006, size: 64, align: 64, offset: 192)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "encode2", scope: !1075, file: !35, line: 3564, baseType: !1194, size: 64, align: 64, offset: 1344)
!1194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1195, size: 64, align: 64)
!1195 = !DISubroutineType(types: !1196)
!1196 = !{!996, !1021, !1197, !1231, !1313}
!1197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1198, size: 64, align: 64)
!1198 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVPacket", file: !35, line: 1499, baseType: !1199)
!1199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVPacket", file: !35, line: 1445, size: 704, align: 64, elements: !1200)
!1200 = !{!1201, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1227, !1228, !1229, !1230}
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1199, file: !35, line: 1451, baseType: !1202, size: 64, align: 64)
!1202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1203, size: 64, align: 64)
!1203 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBufferRef", file: !1204, line: 94, baseType: !1205)
!1204 = !DIFile(filename: "./libavutil/buffer.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!1205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVBufferRef", file: !1204, line: 81, size: 192, align: 64, elements: !1206)
!1206 = !{!1207, !1211, !1212}
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !1205, file: !1204, line: 82, baseType: !1208, size: 64, align: 64)
!1208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1209, size: 64, align: 64)
!1209 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBuffer", file: !1204, line: 73, baseType: !1210)
!1210 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVBuffer", file: !1204, line: 73, flags: DIFlagFwdDecl)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1205, file: !1204, line: 89, baseType: !1149, size: 64, align: 64, offset: 64)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1205, file: !1204, line: 93, baseType: !996, size: 32, align: 32, offset: 128)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "pts", scope: !1199, file: !35, line: 1461, baseType: !1006, size: 64, align: 64, offset: 64)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "dts", scope: !1199, file: !35, line: 1467, baseType: !1006, size: 64, align: 64, offset: 128)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1199, file: !35, line: 1468, baseType: !1149, size: 64, align: 64, offset: 192)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1199, file: !35, line: 1469, baseType: !996, size: 32, align: 32, offset: 256)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "stream_index", scope: !1199, file: !35, line: 1470, baseType: !996, size: 32, align: 32, offset: 288)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1199, file: !35, line: 1474, baseType: !996, size: 32, align: 32, offset: 320)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "side_data", scope: !1199, file: !35, line: 1479, baseType: !1220, size: 64, align: 64, offset: 384)
!1220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1221, size: 64, align: 64)
!1221 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVPacketSideData", file: !35, line: 1415, baseType: !1222)
!1222 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVPacketSideData", file: !35, line: 1411, size: 128, align: 64, elements: !1223)
!1223 = !{!1224, !1225, !1226}
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1222, file: !35, line: 1412, baseType: !1149, size: 64, align: 64)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1222, file: !35, line: 1413, baseType: !996, size: 32, align: 32, offset: 64)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1222, file: !35, line: 1414, baseType: !717, size: 32, align: 32, offset: 96)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "side_data_elems", scope: !1199, file: !35, line: 1480, baseType: !996, size: 32, align: 32, offset: 448)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "duration", scope: !1199, file: !35, line: 1486, baseType: !1006, size: 64, align: 64, offset: 512)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !1199, file: !35, line: 1488, baseType: !1006, size: 64, align: 64, offset: 576)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "convergence_duration", scope: !1199, file: !35, line: 1497, baseType: !1006, size: 64, align: 64, offset: 640)
!1231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1232, size: 64, align: 64)
!1232 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1233)
!1233 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFrame", file: !758, line: 646, baseType: !1234)
!1234 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFrame", file: !758, line: 268, size: 4288, align: 64, elements: !1235)
!1235 = !{!1236, !1237, !1238, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1265, !1267, !1268, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1301, !1302, !1303, !1304, !1305, !1306, !1309, !1310, !1311, !1312}
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1234, file: !758, line: 282, baseType: !1176, size: 512, align: 64)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "linesize", scope: !1234, file: !758, line: 299, baseType: !1180, size: 256, align: 32, offset: 512)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "extended_data", scope: !1234, file: !758, line: 315, baseType: !1239, size: 64, align: 64, offset: 768)
!1239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1149, size: 64, align: 64)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1234, file: !758, line: 326, baseType: !996, size: 32, align: 32, offset: 832)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !1234, file: !758, line: 326, baseType: !996, size: 32, align: 32, offset: 864)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "nb_samples", scope: !1234, file: !758, line: 334, baseType: !996, size: 32, align: 32, offset: 896)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !1234, file: !758, line: 341, baseType: !996, size: 32, align: 32, offset: 928)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "key_frame", scope: !1234, file: !758, line: 346, baseType: !996, size: 32, align: 32, offset: 960)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "pict_type", scope: !1234, file: !758, line: 351, baseType: !747, size: 32, align: 32, offset: 992)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "sample_aspect_ratio", scope: !1234, file: !758, line: 356, baseType: !1085, size: 64, align: 32, offset: 1024)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "pts", scope: !1234, file: !758, line: 361, baseType: !1006, size: 64, align: 64, offset: 1088)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_pts", scope: !1234, file: !758, line: 369, baseType: !1006, size: 64, align: 64, offset: 1152)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_dts", scope: !1234, file: !758, line: 377, baseType: !1006, size: 64, align: 64, offset: 1216)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "coded_picture_number", scope: !1234, file: !758, line: 382, baseType: !996, size: 32, align: 32, offset: 1280)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "display_picture_number", scope: !1234, file: !758, line: 386, baseType: !996, size: 32, align: 32, offset: 1312)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "quality", scope: !1234, file: !758, line: 391, baseType: !996, size: 32, align: 32, offset: 1344)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "opaque", scope: !1234, file: !758, line: 396, baseType: !1039, size: 64, align: 64, offset: 1408)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !1234, file: !758, line: 403, baseType: !1255, size: 512, align: 64, offset: 1472)
!1255 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1103, size: 512, align: 64, elements: !1177)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "repeat_pict", scope: !1234, file: !758, line: 410, baseType: !996, size: 32, align: 32, offset: 1984)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "interlaced_frame", scope: !1234, file: !758, line: 415, baseType: !996, size: 32, align: 32, offset: 2016)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "top_field_first", scope: !1234, file: !758, line: 420, baseType: !996, size: 32, align: 32, offset: 2048)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "palette_has_changed", scope: !1234, file: !758, line: 425, baseType: !996, size: 32, align: 32, offset: 2080)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "reordered_opaque", scope: !1234, file: !758, line: 435, baseType: !1006, size: 64, align: 64, offset: 2112)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !1234, file: !758, line: 440, baseType: !996, size: 32, align: 32, offset: 2176)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layout", scope: !1234, file: !758, line: 445, baseType: !1103, size: 64, align: 64, offset: 2240)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1234, file: !758, line: 459, baseType: !1264, size: 512, align: 64, offset: 2304)
!1264 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1202, size: 512, align: 64, elements: !1177)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "extended_buf", scope: !1234, file: !758, line: 473, baseType: !1266, size: 64, align: 64, offset: 2816)
!1266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1202, size: 64, align: 64)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "nb_extended_buf", scope: !1234, file: !758, line: 477, baseType: !996, size: 32, align: 32, offset: 2880)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "side_data", scope: !1234, file: !758, line: 479, baseType: !1269, size: 64, align: 64, offset: 2944)
!1269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1270, size: 64, align: 64)
!1270 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1271, size: 64, align: 64)
!1271 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFrameSideData", file: !758, line: 207, baseType: !1272)
!1272 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFrameSideData", file: !758, line: 201, size: 320, align: 64, elements: !1273)
!1273 = !{!1274, !1275, !1276, !1277, !1282}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1272, file: !758, line: 202, baseType: !757, size: 32, align: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1272, file: !758, line: 203, baseType: !1149, size: 64, align: 64, offset: 64)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1272, file: !758, line: 204, baseType: !996, size: 32, align: 32, offset: 128)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "metadata", scope: !1272, file: !758, line: 205, baseType: !1278, size: 64, align: 64, offset: 192)
!1278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1279, size: 64, align: 64)
!1279 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVDictionary", file: !1280, line: 86, baseType: !1281)
!1280 = !DIFile(filename: "./libavutil/dict.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!1281 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVDictionary", file: !1280, line: 86, flags: DIFlagFwdDecl)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1272, file: !758, line: 206, baseType: !1202, size: 64, align: 64, offset: 256)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "nb_side_data", scope: !1234, file: !758, line: 480, baseType: !996, size: 32, align: 32, offset: 3008)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1234, file: !758, line: 505, baseType: !996, size: 32, align: 32, offset: 3040)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "color_range", scope: !1234, file: !758, line: 512, baseType: !781, size: 32, align: 32, offset: 3072)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "color_primaries", scope: !1234, file: !758, line: 514, baseType: !787, size: 32, align: 32, offset: 3104)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "color_trc", scope: !1234, file: !758, line: 516, baseType: !805, size: 32, align: 32, offset: 3136)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace", scope: !1234, file: !758, line: 523, baseType: !829, size: 32, align: 32, offset: 3168)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_location", scope: !1234, file: !758, line: 525, baseType: !848, size: 32, align: 32, offset: 3200)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "best_effort_timestamp", scope: !1234, file: !758, line: 532, baseType: !1006, size: 64, align: 64, offset: 3264)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_pos", scope: !1234, file: !758, line: 539, baseType: !1006, size: 64, align: 64, offset: 3328)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_duration", scope: !1234, file: !758, line: 547, baseType: !1006, size: 64, align: 64, offset: 3392)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "metadata", scope: !1234, file: !758, line: 554, baseType: !1278, size: 64, align: 64, offset: 3456)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "decode_error_flags", scope: !1234, file: !758, line: 563, baseType: !996, size: 32, align: 32, offset: 3520)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !1234, file: !758, line: 572, baseType: !996, size: 32, align: 32, offset: 3552)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_size", scope: !1234, file: !758, line: 581, baseType: !996, size: 32, align: 32, offset: 3584)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "qscale_table", scope: !1234, file: !758, line: 588, baseType: !1298, size: 64, align: 64, offset: 3648)
!1298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1299, size: 64, align: 64)
!1299 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !991, line: 36, baseType: !1300)
!1300 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "qstride", scope: !1234, file: !758, line: 593, baseType: !996, size: 32, align: 32, offset: 3712)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "qscale_type", scope: !1234, file: !758, line: 596, baseType: !996, size: 32, align: 32, offset: 3744)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "qp_table_buf", scope: !1234, file: !758, line: 599, baseType: !1202, size: 64, align: 64, offset: 3776)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "hw_frames_ctx", scope: !1234, file: !758, line: 605, baseType: !1202, size: 64, align: 64, offset: 3840)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "opaque_ref", scope: !1234, file: !758, line: 616, baseType: !1202, size: 64, align: 64, offset: 3904)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "crop_top", scope: !1234, file: !758, line: 626, baseType: !1307, size: 64, align: 64, offset: 3968)
!1307 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1308, line: 216, baseType: !1104)
!1308 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "crop_bottom", scope: !1234, file: !758, line: 627, baseType: !1307, size: 64, align: 64, offset: 4032)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "crop_left", scope: !1234, file: !758, line: 628, baseType: !1307, size: 64, align: 64, offset: 4096)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "crop_right", scope: !1234, file: !758, line: 629, baseType: !1307, size: 64, align: 64, offset: 4160)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "private_ref", scope: !1234, file: !758, line: 645, baseType: !1202, size: 64, align: 64, offset: 4224)
!1313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !996, size: 64, align: 64)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "decode", scope: !1075, file: !35, line: 3566, baseType: !1315, size: 64, align: 64, offset: 1408)
!1315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1316, size: 64, align: 64)
!1316 = !DISubroutineType(types: !1317)
!1317 = !{!996, !1021, !1039, !1313, !1197}
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "close", scope: !1075, file: !35, line: 3567, baseType: !1120, size: 64, align: 64, offset: 1472)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "send_frame", scope: !1075, file: !35, line: 3576, baseType: !1320, size: 64, align: 64, offset: 1536)
!1320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1321, size: 64, align: 64)
!1321 = !DISubroutineType(types: !1322)
!1322 = !{!996, !1021, !1231}
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "receive_packet", scope: !1075, file: !35, line: 3577, baseType: !1324, size: 64, align: 64, offset: 1600)
!1324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1325, size: 64, align: 64)
!1325 = !DISubroutineType(types: !1326)
!1326 = !{!996, !1021, !1197}
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "receive_frame", scope: !1075, file: !35, line: 3584, baseType: !1328, size: 64, align: 64, offset: 1664)
!1328 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1329, size: 64, align: 64)
!1329 = !DISubroutineType(types: !1330)
!1330 = !{!996, !1021, !1331}
!1331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1233, size: 64, align: 64)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "flush", scope: !1075, file: !35, line: 3589, baseType: !1333, size: 64, align: 64, offset: 1728)
!1333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1334, size: 64, align: 64)
!1334 = !DISubroutineType(types: !1335)
!1335 = !{null, !1021}
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "caps_internal", scope: !1075, file: !35, line: 3594, baseType: !996, size: 32, align: 32, offset: 1792)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "bsfs", scope: !1075, file: !35, line: 3600, baseType: !1032, size: 64, align: 64, offset: 1856)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "hw_configs", scope: !1075, file: !35, line: 3609, baseType: !1339, size: 64, align: 64, offset: 1920)
!1339 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1340, size: 64, align: 64)
!1340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1341, size: 64, align: 64)
!1341 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1342)
!1342 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecHWConfigInternal", file: !35, line: 3609, flags: DIFlagFwdDecl)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "codec_id", scope: !1023, file: !35, line: 1566, baseType: !34, size: 32, align: 32, offset: 192)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "codec_tag", scope: !1023, file: !35, line: 1581, baseType: !993, size: 32, align: 32, offset: 224)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data", scope: !1023, file: !35, line: 1583, baseType: !1039, size: 64, align: 64, offset: 256)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !1023, file: !35, line: 1591, baseType: !1347, size: 64, align: 64, offset: 320)
!1347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1348, size: 64, align: 64)
!1348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecInternal", file: !1134, line: 129, size: 1664, align: 64, elements: !1349)
!1349 = !{!1350, !1351, !1352, !1353, !1354, !1372, !1373, !1379, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475}
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "is_copy", scope: !1348, file: !1134, line: 136, baseType: !996, size: 32, align: 32)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "allocate_progress", scope: !1348, file: !1134, line: 151, baseType: !996, size: 32, align: 32, offset: 32)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "last_audio_frame", scope: !1348, file: !1134, line: 157, baseType: !996, size: 32, align: 32, offset: 64)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "to_free", scope: !1348, file: !1134, line: 159, baseType: !1331, size: 64, align: 64, offset: 128)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !1348, file: !1134, line: 161, baseType: !1355, size: 64, align: 64, offset: 192)
!1355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1356, size: 64, align: 64)
!1356 = !DIDerivedType(tag: DW_TAG_typedef, name: "FramePool", file: !1134, line: 117, baseType: !1357)
!1357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FramePool", file: !1134, line: 100, size: 832, align: 64, elements: !1358)
!1358 = !{!1359, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371}
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "pools", scope: !1357, file: !1134, line: 105, baseType: !1360, size: 256, align: 64)
!1360 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1361, size: 256, align: 64, elements: !1183)
!1361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1362, size: 64, align: 64)
!1362 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBufferPool", file: !1204, line: 238, baseType: !1363)
!1363 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVBufferPool", file: !1204, line: 238, flags: DIFlagFwdDecl)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !1357, file: !1134, line: 110, baseType: !996, size: 32, align: 32, offset: 256)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1357, file: !1134, line: 111, baseType: !996, size: 32, align: 32, offset: 288)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !1357, file: !1134, line: 111, baseType: !996, size: 32, align: 32, offset: 320)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "stride_align", scope: !1357, file: !1134, line: 112, baseType: !1180, size: 256, align: 32, offset: 352)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "linesize", scope: !1357, file: !1134, line: 113, baseType: !1186, size: 128, align: 32, offset: 608)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "planes", scope: !1357, file: !1134, line: 114, baseType: !996, size: 32, align: 32, offset: 736)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !1357, file: !1134, line: 115, baseType: !996, size: 32, align: 32, offset: 768)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "samples", scope: !1357, file: !1134, line: 116, baseType: !996, size: 32, align: 32, offset: 800)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "thread_ctx", scope: !1348, file: !1134, line: 163, baseType: !1039, size: 64, align: 64, offset: 256)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1348, file: !1134, line: 165, baseType: !1374, size: 128, align: 64, offset: 320)
!1374 = !DIDerivedType(tag: DW_TAG_typedef, name: "DecodeSimpleContext", file: !1134, line: 122, baseType: !1375)
!1375 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DecodeSimpleContext", file: !1134, line: 119, size: 128, align: 64, elements: !1376)
!1376 = !{!1377, !1378}
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "in_pkt", scope: !1375, file: !1134, line: 120, baseType: !1197, size: 64, align: 64)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "out_frame", scope: !1375, file: !1134, line: 121, baseType: !1331, size: 64, align: 64, offset: 64)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1348, file: !1134, line: 166, baseType: !1380, size: 128, align: 64, offset: 448)
!1380 = !DIDerivedType(tag: DW_TAG_typedef, name: "DecodeFilterContext", file: !1134, line: 127, baseType: !1381)
!1381 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DecodeFilterContext", file: !1134, line: 124, size: 128, align: 64, elements: !1382)
!1382 = !{!1383, !1456}
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "bsfs", scope: !1381, file: !1134, line: 125, baseType: !1384, size: 64, align: 64)
!1384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1385, size: 64, align: 64)
!1385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1386, size: 64, align: 64)
!1386 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBSFContext", file: !35, line: 5794, baseType: !1387)
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVBSFContext", file: !35, line: 5747, size: 512, align: 64, elements: !1388)
!1388 = !{!1389, !1390, !1414, !1418, !1419, !1453, !1454, !1455}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "av_class", scope: !1387, file: !35, line: 5751, baseType: !1026, size: 64, align: 64)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1387, file: !35, line: 5756, baseType: !1391, size: 64, align: 64, offset: 64)
!1391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1392, size: 64, align: 64)
!1392 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1393)
!1393 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVBitStreamFilter", file: !35, line: 5796, size: 512, align: 64, elements: !1394)
!1394 = !{!1395, !1396, !1399, !1400, !1401, !1405, !1409, !1413}
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1393, file: !35, line: 5797, baseType: !1032, size: 64, align: 64)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "codec_ids", scope: !1393, file: !35, line: 5804, baseType: !1397, size: 64, align: 64, offset: 64)
!1397 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1398, size: 64, align: 64)
!1398 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !34)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "priv_class", scope: !1393, file: !35, line: 5815, baseType: !1026, size: 64, align: 64, offset: 128)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data_size", scope: !1393, file: !35, line: 5825, baseType: !996, size: 32, align: 32, offset: 192)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !1393, file: !35, line: 5826, baseType: !1402, size: 64, align: 64, offset: 256)
!1402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1403, size: 64, align: 64)
!1403 = !DISubroutineType(types: !1404)
!1404 = !{!996, !1385}
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1393, file: !35, line: 5827, baseType: !1406, size: 64, align: 64, offset: 320)
!1406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1407, size: 64, align: 64)
!1407 = !DISubroutineType(types: !1408)
!1408 = !{!996, !1385, !1197}
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "close", scope: !1393, file: !35, line: 5828, baseType: !1410, size: 64, align: 64, offset: 384)
!1410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1411, size: 64, align: 64)
!1411 = !DISubroutineType(types: !1412)
!1412 = !{null, !1385}
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "flush", scope: !1393, file: !35, line: 5829, baseType: !1410, size: 64, align: 64, offset: 448)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !1387, file: !35, line: 5762, baseType: !1415, size: 64, align: 64, offset: 128)
!1415 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1416, size: 64, align: 64)
!1416 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBSFInternal", file: !35, line: 5735, baseType: !1417)
!1417 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVBSFInternal", file: !35, line: 5735, flags: DIFlagFwdDecl)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data", scope: !1387, file: !35, line: 5768, baseType: !1039, size: 64, align: 64, offset: 192)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "par_in", scope: !1387, file: !35, line: 5775, baseType: !1420, size: 64, align: 64, offset: 256)
!1420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1421, size: 64, align: 64)
!1421 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodecParameters", file: !35, line: 4085, baseType: !1422)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecParameters", file: !35, line: 3936, size: 1152, align: 64, elements: !1423)
!1423 = !{!1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "codec_type", scope: !1422, file: !35, line: 3940, baseType: !24, size: 32, align: 32)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "codec_id", scope: !1422, file: !35, line: 3944, baseType: !34, size: 32, align: 32, offset: 32)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "codec_tag", scope: !1422, file: !35, line: 3948, baseType: !1003, size: 32, align: 32, offset: 64)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "extradata", scope: !1422, file: !35, line: 3958, baseType: !1149, size: 64, align: 64, offset: 128)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "extradata_size", scope: !1422, file: !35, line: 3962, baseType: !996, size: 32, align: 32, offset: 192)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !1422, file: !35, line: 3968, baseType: !996, size: 32, align: 32, offset: 224)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "bit_rate", scope: !1422, file: !35, line: 3973, baseType: !1006, size: 64, align: 64, offset: 256)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_coded_sample", scope: !1422, file: !35, line: 3986, baseType: !996, size: 32, align: 32, offset: 320)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_raw_sample", scope: !1422, file: !35, line: 3999, baseType: !996, size: 32, align: 32, offset: 352)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "profile", scope: !1422, file: !35, line: 4004, baseType: !996, size: 32, align: 32, offset: 384)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !1422, file: !35, line: 4005, baseType: !996, size: 32, align: 32, offset: 416)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1422, file: !35, line: 4010, baseType: !996, size: 32, align: 32, offset: 448)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !1422, file: !35, line: 4011, baseType: !996, size: 32, align: 32, offset: 480)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "sample_aspect_ratio", scope: !1422, file: !35, line: 4020, baseType: !1085, size: 64, align: 32, offset: 512)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "field_order", scope: !1422, file: !35, line: 4025, baseType: !858, size: 32, align: 32, offset: 576)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "color_range", scope: !1422, file: !35, line: 4030, baseType: !781, size: 32, align: 32, offset: 608)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "color_primaries", scope: !1422, file: !35, line: 4031, baseType: !787, size: 32, align: 32, offset: 640)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "color_trc", scope: !1422, file: !35, line: 4032, baseType: !805, size: 32, align: 32, offset: 672)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "color_space", scope: !1422, file: !35, line: 4033, baseType: !829, size: 32, align: 32, offset: 704)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_location", scope: !1422, file: !35, line: 4034, baseType: !848, size: 32, align: 32, offset: 736)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "video_delay", scope: !1422, file: !35, line: 4039, baseType: !996, size: 32, align: 32, offset: 768)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layout", scope: !1422, file: !35, line: 4046, baseType: !1103, size: 64, align: 64, offset: 832)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !1422, file: !35, line: 4050, baseType: !996, size: 32, align: 32, offset: 896)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !1422, file: !35, line: 4054, baseType: !996, size: 32, align: 32, offset: 928)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "block_align", scope: !1422, file: !35, line: 4061, baseType: !996, size: 32, align: 32, offset: 960)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "frame_size", scope: !1422, file: !35, line: 4065, baseType: !996, size: 32, align: 32, offset: 992)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "initial_padding", scope: !1422, file: !35, line: 4073, baseType: !996, size: 32, align: 32, offset: 1024)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "trailing_padding", scope: !1422, file: !35, line: 4080, baseType: !996, size: 32, align: 32, offset: 1056)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "seek_preroll", scope: !1422, file: !35, line: 4084, baseType: !996, size: 32, align: 32, offset: 1088)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "par_out", scope: !1387, file: !35, line: 5781, baseType: !1420, size: 64, align: 64, offset: 320)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "time_base_in", scope: !1387, file: !35, line: 5787, baseType: !1085, size: 64, align: 32, offset: 384)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "time_base_out", scope: !1387, file: !35, line: 5793, baseType: !1085, size: 64, align: 32, offset: 448)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "nb_bsfs", scope: !1381, file: !1134, line: 126, baseType: !996, size: 32, align: 32, offset: 64)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "last_pkt_props", scope: !1348, file: !1134, line: 172, baseType: !1197, size: 64, align: 64, offset: 576)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "byte_buffer", scope: !1348, file: !1134, line: 177, baseType: !1149, size: 64, align: 64, offset: 640)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "byte_buffer_size", scope: !1348, file: !1134, line: 178, baseType: !993, size: 32, align: 32, offset: 704)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "frame_thread_encoder", scope: !1348, file: !1134, line: 180, baseType: !1039, size: 64, align: 64, offset: 768)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "skip_samples", scope: !1348, file: !1134, line: 185, baseType: !996, size: 32, align: 32, offset: 832)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "hwaccel_priv_data", scope: !1348, file: !1134, line: 190, baseType: !1039, size: 64, align: 64, offset: 896)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "draining", scope: !1348, file: !1134, line: 195, baseType: !996, size: 32, align: 32, offset: 960)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "buffer_pkt", scope: !1348, file: !1134, line: 200, baseType: !1197, size: 64, align: 64, offset: 1024)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "buffer_pkt_valid", scope: !1348, file: !1134, line: 201, baseType: !996, size: 32, align: 32, offset: 1088)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "buffer_frame", scope: !1348, file: !1134, line: 202, baseType: !1331, size: 64, align: 64, offset: 1152)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "draining_done", scope: !1348, file: !1134, line: 203, baseType: !996, size: 32, align: 32, offset: 1216)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "compat_decode", scope: !1348, file: !1134, line: 205, baseType: !996, size: 32, align: 32, offset: 1248)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "compat_decode_warned", scope: !1348, file: !1134, line: 206, baseType: !996, size: 32, align: 32, offset: 1280)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "compat_decode_consumed", scope: !1348, file: !1134, line: 209, baseType: !1307, size: 64, align: 64, offset: 1344)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "compat_decode_partial_size", scope: !1348, file: !1134, line: 212, baseType: !1307, size: 64, align: 64, offset: 1408)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "compat_decode_frame", scope: !1348, file: !1134, line: 213, baseType: !1331, size: 64, align: 64, offset: 1472)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "showed_multi_packet_warning", scope: !1348, file: !1134, line: 215, baseType: !996, size: 32, align: 32, offset: 1536)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "skip_samples_multiplier", scope: !1348, file: !1134, line: 217, baseType: !996, size: 32, align: 32, offset: 1568)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "nb_draining_errors", scope: !1348, file: !1134, line: 220, baseType: !996, size: 32, align: 32, offset: 1600)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "opaque", scope: !1023, file: !35, line: 1598, baseType: !1039, size: 64, align: 64, offset: 384)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "bit_rate", scope: !1023, file: !35, line: 1606, baseType: !1006, size: 64, align: 64, offset: 448)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "bit_rate_tolerance", scope: !1023, file: !35, line: 1614, baseType: !996, size: 32, align: 32, offset: 512)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "global_quality", scope: !1023, file: !35, line: 1622, baseType: !996, size: 32, align: 32, offset: 544)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "compression_level", scope: !1023, file: !35, line: 1628, baseType: !996, size: 32, align: 32, offset: 576)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1023, file: !35, line: 1636, baseType: !996, size: 32, align: 32, offset: 608)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "flags2", scope: !1023, file: !35, line: 1643, baseType: !996, size: 32, align: 32, offset: 640)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "extradata", scope: !1023, file: !35, line: 1657, baseType: !1149, size: 64, align: 64, offset: 704)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "extradata_size", scope: !1023, file: !35, line: 1658, baseType: !996, size: 32, align: 32, offset: 768)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "time_base", scope: !1023, file: !35, line: 1679, baseType: !1085, size: 64, align: 32, offset: 800)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "ticks_per_frame", scope: !1023, file: !35, line: 1688, baseType: !996, size: 32, align: 32, offset: 864)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "delay", scope: !1023, file: !35, line: 1712, baseType: !996, size: 32, align: 32, offset: 896)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1023, file: !35, line: 1729, baseType: !996, size: 32, align: 32, offset: 928)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !1023, file: !35, line: 1729, baseType: !996, size: 32, align: 32, offset: 960)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "coded_width", scope: !1023, file: !35, line: 1744, baseType: !996, size: 32, align: 32, offset: 992)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "coded_height", scope: !1023, file: !35, line: 1744, baseType: !996, size: 32, align: 32, offset: 1024)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "gop_size", scope: !1023, file: !35, line: 1751, baseType: !996, size: 32, align: 32, offset: 1056)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "pix_fmt", scope: !1023, file: !35, line: 1766, baseType: !494, size: 32, align: 32, offset: 1088)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "draw_horiz_band", scope: !1023, file: !35, line: 1791, baseType: !1495, size: 64, align: 64, offset: 1152)
!1495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1496, size: 64, align: 64)
!1496 = !DISubroutineType(types: !1497)
!1497 = !{null, !1498, !1231, !1313, !996, !996, !996}
!1498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1023, size: 64, align: 64)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "get_format", scope: !1023, file: !35, line: 1808, baseType: !1500, size: 64, align: 64, offset: 1216)
!1500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1501, size: 64, align: 64)
!1501 = !DISubroutineType(types: !1502)
!1502 = !{!494, !1498, !1092}
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "max_b_frames", scope: !1023, file: !35, line: 1816, baseType: !996, size: 32, align: 32, offset: 1280)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "b_quant_factor", scope: !1023, file: !35, line: 1825, baseType: !1505, size: 32, align: 32, offset: 1312)
!1505 = !DIBasicType(name: "float", size: 32, align: 32, encoding: DW_ATE_float)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "b_frame_strategy", scope: !1023, file: !35, line: 1830, baseType: !996, size: 32, align: 32, offset: 1344)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "b_quant_offset", scope: !1023, file: !35, line: 1838, baseType: !1505, size: 32, align: 32, offset: 1376)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "has_b_frames", scope: !1023, file: !35, line: 1846, baseType: !996, size: 32, align: 32, offset: 1408)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "mpeg_quant", scope: !1023, file: !35, line: 1851, baseType: !996, size: 32, align: 32, offset: 1440)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "i_quant_factor", scope: !1023, file: !35, line: 1861, baseType: !1505, size: 32, align: 32, offset: 1472)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "i_quant_offset", scope: !1023, file: !35, line: 1868, baseType: !1505, size: 32, align: 32, offset: 1504)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "lumi_masking", scope: !1023, file: !35, line: 1875, baseType: !1505, size: 32, align: 32, offset: 1536)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "temporal_cplx_masking", scope: !1023, file: !35, line: 1882, baseType: !1505, size: 32, align: 32, offset: 1568)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "spatial_cplx_masking", scope: !1023, file: !35, line: 1889, baseType: !1505, size: 32, align: 32, offset: 1600)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "p_masking", scope: !1023, file: !35, line: 1896, baseType: !1505, size: 32, align: 32, offset: 1632)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "dark_masking", scope: !1023, file: !35, line: 1903, baseType: !1505, size: 32, align: 32, offset: 1664)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "slice_count", scope: !1023, file: !35, line: 1910, baseType: !996, size: 32, align: 32, offset: 1696)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "prediction_method", scope: !1023, file: !35, line: 1915, baseType: !996, size: 32, align: 32, offset: 1728)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "slice_offset", scope: !1023, file: !35, line: 1926, baseType: !1313, size: 64, align: 64, offset: 1792)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "sample_aspect_ratio", scope: !1023, file: !35, line: 1935, baseType: !1085, size: 64, align: 32, offset: 1856)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "me_cmp", scope: !1023, file: !35, line: 1942, baseType: !996, size: 32, align: 32, offset: 1920)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "me_sub_cmp", scope: !1023, file: !35, line: 1948, baseType: !996, size: 32, align: 32, offset: 1952)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "mb_cmp", scope: !1023, file: !35, line: 1954, baseType: !996, size: 32, align: 32, offset: 1984)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "ildct_cmp", scope: !1023, file: !35, line: 1960, baseType: !996, size: 32, align: 32, offset: 2016)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "dia_size", scope: !1023, file: !35, line: 1984, baseType: !996, size: 32, align: 32, offset: 2048)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "last_predictor_count", scope: !1023, file: !35, line: 1991, baseType: !996, size: 32, align: 32, offset: 2080)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "pre_me", scope: !1023, file: !35, line: 1996, baseType: !996, size: 32, align: 32, offset: 2112)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "me_pre_cmp", scope: !1023, file: !35, line: 2004, baseType: !996, size: 32, align: 32, offset: 2144)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "pre_dia_size", scope: !1023, file: !35, line: 2011, baseType: !996, size: 32, align: 32, offset: 2176)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "me_subpel_quality", scope: !1023, file: !35, line: 2018, baseType: !996, size: 32, align: 32, offset: 2208)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "me_range", scope: !1023, file: !35, line: 2027, baseType: !996, size: 32, align: 32, offset: 2240)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "slice_flags", scope: !1023, file: !35, line: 2034, baseType: !996, size: 32, align: 32, offset: 2272)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "mb_decision", scope: !1023, file: !35, line: 2044, baseType: !996, size: 32, align: 32, offset: 2304)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "intra_matrix", scope: !1023, file: !35, line: 2054, baseType: !1535, size: 64, align: 64, offset: 2368)
!1535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1155, size: 64, align: 64)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "inter_matrix", scope: !1023, file: !35, line: 2061, baseType: !1535, size: 64, align: 64, offset: 2432)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "scenechange_threshold", scope: !1023, file: !35, line: 2066, baseType: !996, size: 32, align: 32, offset: 2496)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "noise_reduction", scope: !1023, file: !35, line: 2070, baseType: !996, size: 32, align: 32, offset: 2528)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "intra_dc_precision", scope: !1023, file: !35, line: 2078, baseType: !996, size: 32, align: 32, offset: 2560)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "skip_top", scope: !1023, file: !35, line: 2085, baseType: !996, size: 32, align: 32, offset: 2592)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "skip_bottom", scope: !1023, file: !35, line: 2092, baseType: !996, size: 32, align: 32, offset: 2624)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "mb_lmin", scope: !1023, file: !35, line: 2099, baseType: !996, size: 32, align: 32, offset: 2656)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "mb_lmax", scope: !1023, file: !35, line: 2106, baseType: !996, size: 32, align: 32, offset: 2688)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "me_penalty_compensation", scope: !1023, file: !35, line: 2113, baseType: !996, size: 32, align: 32, offset: 2720)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "bidir_refine", scope: !1023, file: !35, line: 2120, baseType: !996, size: 32, align: 32, offset: 2752)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "brd_scale", scope: !1023, file: !35, line: 2125, baseType: !996, size: 32, align: 32, offset: 2784)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "keyint_min", scope: !1023, file: !35, line: 2133, baseType: !996, size: 32, align: 32, offset: 2816)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "refs", scope: !1023, file: !35, line: 2140, baseType: !996, size: 32, align: 32, offset: 2848)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "chromaoffset", scope: !1023, file: !35, line: 2145, baseType: !996, size: 32, align: 32, offset: 2880)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "mv0_threshold", scope: !1023, file: !35, line: 2153, baseType: !996, size: 32, align: 32, offset: 2912)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "b_sensitivity", scope: !1023, file: !35, line: 2158, baseType: !996, size: 32, align: 32, offset: 2944)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "color_primaries", scope: !1023, file: !35, line: 2166, baseType: !787, size: 32, align: 32, offset: 2976)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "color_trc", scope: !1023, file: !35, line: 2173, baseType: !805, size: 32, align: 32, offset: 3008)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace", scope: !1023, file: !35, line: 2180, baseType: !829, size: 32, align: 32, offset: 3040)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "color_range", scope: !1023, file: !35, line: 2187, baseType: !781, size: 32, align: 32, offset: 3072)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_sample_location", scope: !1023, file: !35, line: 2194, baseType: !848, size: 32, align: 32, offset: 3104)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "slices", scope: !1023, file: !35, line: 2203, baseType: !996, size: 32, align: 32, offset: 3136)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "field_order", scope: !1023, file: !35, line: 2209, baseType: !858, size: 32, align: 32, offset: 3168)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !1023, file: !35, line: 2212, baseType: !996, size: 32, align: 32, offset: 3200)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !1023, file: !35, line: 2213, baseType: !996, size: 32, align: 32, offset: 3232)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "sample_fmt", scope: !1023, file: !35, line: 2220, baseType: !694, size: 32, align: 32, offset: 3264)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "frame_size", scope: !1023, file: !35, line: 2232, baseType: !996, size: 32, align: 32, offset: 3296)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "frame_number", scope: !1023, file: !35, line: 2243, baseType: !996, size: 32, align: 32, offset: 3328)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "block_align", scope: !1023, file: !35, line: 2249, baseType: !996, size: 32, align: 32, offset: 3360)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "cutoff", scope: !1023, file: !35, line: 2256, baseType: !996, size: 32, align: 32, offset: 3392)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layout", scope: !1023, file: !35, line: 2263, baseType: !1103, size: 64, align: 64, offset: 3456)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "request_channel_layout", scope: !1023, file: !35, line: 2270, baseType: !1103, size: 64, align: 64, offset: 3520)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "audio_service_type", scope: !1023, file: !35, line: 2277, baseType: !866, size: 32, align: 32, offset: 3584)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "request_sample_fmt", scope: !1023, file: !35, line: 2285, baseType: !694, size: 32, align: 32, offset: 3616)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "get_buffer2", scope: !1023, file: !35, line: 2367, baseType: !1571, size: 64, align: 64, offset: 3648)
!1571 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1572, size: 64, align: 64)
!1572 = !DISubroutineType(types: !1573)
!1573 = !{!996, !1498, !1331, !996}
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "refcounted_frames", scope: !1023, file: !35, line: 2383, baseType: !996, size: 32, align: 32, offset: 3712)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "qcompress", scope: !1023, file: !35, line: 2386, baseType: !1505, size: 32, align: 32, offset: 3744)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "qblur", scope: !1023, file: !35, line: 2387, baseType: !1505, size: 32, align: 32, offset: 3776)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "qmin", scope: !1023, file: !35, line: 2394, baseType: !996, size: 32, align: 32, offset: 3808)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "qmax", scope: !1023, file: !35, line: 2401, baseType: !996, size: 32, align: 32, offset: 3840)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "max_qdiff", scope: !1023, file: !35, line: 2408, baseType: !996, size: 32, align: 32, offset: 3872)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "rc_buffer_size", scope: !1023, file: !35, line: 2415, baseType: !996, size: 32, align: 32, offset: 3904)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "rc_override_count", scope: !1023, file: !35, line: 2422, baseType: !996, size: 32, align: 32, offset: 3936)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "rc_override", scope: !1023, file: !35, line: 2423, baseType: !1583, size: 64, align: 64, offset: 3968)
!1583 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1584, size: 64, align: 64)
!1584 = !DIDerivedType(tag: DW_TAG_typedef, name: "RcOverride", file: !35, line: 831, baseType: !1585)
!1585 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "RcOverride", file: !35, line: 826, size: 128, align: 32, elements: !1586)
!1586 = !{!1587, !1588, !1589, !1590}
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "start_frame", scope: !1585, file: !35, line: 827, baseType: !996, size: 32, align: 32)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "end_frame", scope: !1585, file: !35, line: 828, baseType: !996, size: 32, align: 32, offset: 32)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "qscale", scope: !1585, file: !35, line: 829, baseType: !996, size: 32, align: 32, offset: 64)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "quality_factor", scope: !1585, file: !35, line: 830, baseType: !1505, size: 32, align: 32, offset: 96)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "rc_max_rate", scope: !1023, file: !35, line: 2430, baseType: !1006, size: 64, align: 64, offset: 4032)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "rc_min_rate", scope: !1023, file: !35, line: 2437, baseType: !1006, size: 64, align: 64, offset: 4096)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "rc_max_available_vbv_use", scope: !1023, file: !35, line: 2444, baseType: !1505, size: 32, align: 32, offset: 4160)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "rc_min_vbv_overflow_use", scope: !1023, file: !35, line: 2451, baseType: !1505, size: 32, align: 32, offset: 4192)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "rc_initial_buffer_occupancy", scope: !1023, file: !35, line: 2458, baseType: !996, size: 32, align: 32, offset: 4224)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "coder_type", scope: !1023, file: !35, line: 2469, baseType: !996, size: 32, align: 32, offset: 4256)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "context_model", scope: !1023, file: !35, line: 2475, baseType: !996, size: 32, align: 32, offset: 4288)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "frame_skip_threshold", scope: !1023, file: !35, line: 2481, baseType: !996, size: 32, align: 32, offset: 4320)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "frame_skip_factor", scope: !1023, file: !35, line: 2485, baseType: !996, size: 32, align: 32, offset: 4352)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "frame_skip_exp", scope: !1023, file: !35, line: 2489, baseType: !996, size: 32, align: 32, offset: 4384)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "frame_skip_cmp", scope: !1023, file: !35, line: 2493, baseType: !996, size: 32, align: 32, offset: 4416)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "trellis", scope: !1023, file: !35, line: 2501, baseType: !996, size: 32, align: 32, offset: 4448)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "min_prediction_order", scope: !1023, file: !35, line: 2506, baseType: !996, size: 32, align: 32, offset: 4480)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "max_prediction_order", scope: !1023, file: !35, line: 2510, baseType: !996, size: 32, align: 32, offset: 4512)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "timecode_frame_start", scope: !1023, file: !35, line: 2514, baseType: !1006, size: 64, align: 64, offset: 4544)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "rtp_callback", scope: !1023, file: !35, line: 2528, baseType: !1607, size: 64, align: 64, offset: 4608)
!1607 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1608, size: 64, align: 64)
!1608 = !DISubroutineType(types: !1609)
!1609 = !{null, !1498, !1039, !996, !996}
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "rtp_payload_size", scope: !1023, file: !35, line: 2534, baseType: !996, size: 32, align: 32, offset: 4672)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "mv_bits", scope: !1023, file: !35, line: 2545, baseType: !996, size: 32, align: 32, offset: 4704)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "header_bits", scope: !1023, file: !35, line: 2547, baseType: !996, size: 32, align: 32, offset: 4736)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "i_tex_bits", scope: !1023, file: !35, line: 2549, baseType: !996, size: 32, align: 32, offset: 4768)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "p_tex_bits", scope: !1023, file: !35, line: 2551, baseType: !996, size: 32, align: 32, offset: 4800)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "i_count", scope: !1023, file: !35, line: 2553, baseType: !996, size: 32, align: 32, offset: 4832)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "p_count", scope: !1023, file: !35, line: 2555, baseType: !996, size: 32, align: 32, offset: 4864)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "skip_count", scope: !1023, file: !35, line: 2557, baseType: !996, size: 32, align: 32, offset: 4896)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "misc_bits", scope: !1023, file: !35, line: 2559, baseType: !996, size: 32, align: 32, offset: 4928)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "frame_bits", scope: !1023, file: !35, line: 2563, baseType: !996, size: 32, align: 32, offset: 4960)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "stats_out", scope: !1023, file: !35, line: 2571, baseType: !1189, size: 64, align: 64, offset: 4992)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "stats_in", scope: !1023, file: !35, line: 2579, baseType: !1189, size: 64, align: 64, offset: 5056)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "workaround_bugs", scope: !1023, file: !35, line: 2586, baseType: !996, size: 32, align: 32, offset: 5120)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "strict_std_compliance", scope: !1023, file: !35, line: 2615, baseType: !996, size: 32, align: 32, offset: 5152)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "error_concealment", scope: !1023, file: !35, line: 2627, baseType: !996, size: 32, align: 32, offset: 5184)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "debug", scope: !1023, file: !35, line: 2637, baseType: !996, size: 32, align: 32, offset: 5216)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "err_recognition", scope: !1023, file: !35, line: 2681, baseType: !996, size: 32, align: 32, offset: 5248)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "reordered_opaque", scope: !1023, file: !35, line: 2709, baseType: !1006, size: 64, align: 64, offset: 5312)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "hwaccel", scope: !1023, file: !35, line: 2716, baseType: !1629, size: 64, align: 64, offset: 5376)
!1629 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1630, size: 64, align: 64)
!1630 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1631)
!1631 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVHWAccel", file: !35, line: 3636, size: 896, align: 64, elements: !1632)
!1632 = !{!1633, !1634, !1635, !1636, !1637, !1638, !1639, !1643, !1647, !1648, !1649, !1650, !1656, !1657, !1658, !1659, !1660}
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1631, file: !35, line: 3642, baseType: !1032, size: 64, align: 64)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1631, file: !35, line: 3649, baseType: !24, size: 32, align: 32, offset: 64)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1631, file: !35, line: 3656, baseType: !34, size: 32, align: 32, offset: 96)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "pix_fmt", scope: !1631, file: !35, line: 3663, baseType: !494, size: 32, align: 32, offset: 128)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "capabilities", scope: !1631, file: !35, line: 3669, baseType: !996, size: 32, align: 32, offset: 160)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_frame", scope: !1631, file: !35, line: 3682, baseType: !1328, size: 64, align: 64, offset: 192)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "start_frame", scope: !1631, file: !35, line: 3698, baseType: !1640, size: 64, align: 64, offset: 256)
!1640 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1641, size: 64, align: 64)
!1641 = !DISubroutineType(types: !1642)
!1642 = !{!996, !1021, !1137, !1003}
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "decode_params", scope: !1631, file: !35, line: 3712, baseType: !1644, size: 64, align: 64, offset: 320)
!1644 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1645, size: 64, align: 64)
!1645 = !DISubroutineType(types: !1646)
!1646 = !{!996, !1021, !996, !1137, !1003}
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "decode_slice", scope: !1631, file: !35, line: 3726, baseType: !1640, size: 64, align: 64, offset: 384)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "end_frame", scope: !1631, file: !35, line: 3737, baseType: !1120, size: 64, align: 64, offset: 448)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "frame_priv_data_size", scope: !1631, file: !35, line: 3746, baseType: !996, size: 32, align: 32, offset: 512)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "decode_mb", scope: !1631, file: !35, line: 3757, baseType: !1651, size: 64, align: 64, offset: 576)
!1651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1652, size: 64, align: 64)
!1652 = !DISubroutineType(types: !1653)
!1653 = !{null, !1654}
!1654 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1655, size: 64, align: 64)
!1655 = !DICompositeType(tag: DW_TAG_structure_type, name: "MpegEncContext", file: !35, line: 3617, flags: DIFlagFwdDecl)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !1631, file: !35, line: 3766, baseType: !1120, size: 64, align: 64, offset: 640)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "uninit", scope: !1631, file: !35, line: 3774, baseType: !1120, size: 64, align: 64, offset: 704)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data_size", scope: !1631, file: !35, line: 3780, baseType: !996, size: 32, align: 32, offset: 768)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "caps_internal", scope: !1631, file: !35, line: 3785, baseType: !996, size: 32, align: 32, offset: 800)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "frame_params", scope: !1631, file: !35, line: 3795, baseType: !1661, size: 64, align: 64, offset: 832)
!1661 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1662, size: 64, align: 64)
!1662 = !DISubroutineType(types: !1663)
!1663 = !{!996, !1021, !1202}
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "hwaccel_context", scope: !1023, file: !35, line: 2728, baseType: !1039, size: 64, align: 64, offset: 5440)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !1023, file: !35, line: 2735, baseType: !1255, size: 512, align: 64, offset: 5504)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "dct_algo", scope: !1023, file: !35, line: 2742, baseType: !996, size: 32, align: 32, offset: 6016)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "idct_algo", scope: !1023, file: !35, line: 2755, baseType: !996, size: 32, align: 32, offset: 6048)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_coded_sample", scope: !1023, file: !35, line: 2776, baseType: !996, size: 32, align: 32, offset: 6080)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_raw_sample", scope: !1023, file: !35, line: 2783, baseType: !996, size: 32, align: 32, offset: 6112)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "lowres", scope: !1023, file: !35, line: 2791, baseType: !996, size: 32, align: 32, offset: 6144)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "coded_frame", scope: !1023, file: !35, line: 2802, baseType: !1331, size: 64, align: 64, offset: 6208)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "thread_count", scope: !1023, file: !35, line: 2811, baseType: !996, size: 32, align: 32, offset: 6272)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "thread_type", scope: !1023, file: !35, line: 2821, baseType: !996, size: 32, align: 32, offset: 6304)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "active_thread_type", scope: !1023, file: !35, line: 2830, baseType: !996, size: 32, align: 32, offset: 6336)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "thread_safe_callbacks", scope: !1023, file: !35, line: 2840, baseType: !996, size: 32, align: 32, offset: 6368)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !1023, file: !35, line: 2851, baseType: !1677, size: 64, align: 64, offset: 6400)
!1677 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1678, size: 64, align: 64)
!1678 = !DISubroutineType(types: !1679)
!1679 = !{!996, !1498, !1680, !1039, !1313, !996, !996}
!1680 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1681, size: 64, align: 64)
!1681 = !DISubroutineType(types: !1682)
!1682 = !{!996, !1498, !1039}
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "execute2", scope: !1023, file: !35, line: 2871, baseType: !1684, size: 64, align: 64, offset: 6464)
!1684 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1685, size: 64, align: 64)
!1685 = !DISubroutineType(types: !1686)
!1686 = !{!996, !1498, !1687, !1039, !1313, !996}
!1687 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1688, size: 64, align: 64)
!1688 = !DISubroutineType(types: !1689)
!1689 = !{!996, !1498, !1039, !996, !996}
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "nsse_weight", scope: !1023, file: !35, line: 2878, baseType: !996, size: 32, align: 32, offset: 6528)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "profile", scope: !1023, file: !35, line: 2885, baseType: !996, size: 32, align: 32, offset: 6560)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !1023, file: !35, line: 3005, baseType: !996, size: 32, align: 32, offset: 6592)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "skip_loop_filter", scope: !1023, file: !35, line: 3013, baseType: !878, size: 32, align: 32, offset: 6624)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "skip_idct", scope: !1023, file: !35, line: 3020, baseType: !878, size: 32, align: 32, offset: 6656)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "skip_frame", scope: !1023, file: !35, line: 3027, baseType: !878, size: 32, align: 32, offset: 6688)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "subtitle_header", scope: !1023, file: !35, line: 3037, baseType: !1149, size: 64, align: 64, offset: 6720)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "subtitle_header_size", scope: !1023, file: !35, line: 3038, baseType: !996, size: 32, align: 32, offset: 6784)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "vbv_delay", scope: !1023, file: !35, line: 3050, baseType: !1103, size: 64, align: 64, offset: 6848)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "side_data_only_packets", scope: !1023, file: !35, line: 3065, baseType: !996, size: 32, align: 32, offset: 6912)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "initial_padding", scope: !1023, file: !35, line: 3083, baseType: !996, size: 32, align: 32, offset: 6944)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "framerate", scope: !1023, file: !35, line: 3092, baseType: !1085, size: 64, align: 32, offset: 6976)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "sw_pix_fmt", scope: !1023, file: !35, line: 3099, baseType: !494, size: 32, align: 32, offset: 7040)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_timebase", scope: !1023, file: !35, line: 3106, baseType: !1085, size: 64, align: 32, offset: 7072)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "codec_descriptor", scope: !1023, file: !35, line: 3113, baseType: !1705, size: 64, align: 64, offset: 7168)
!1705 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1706, size: 64, align: 64)
!1706 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1707)
!1707 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodecDescriptor", file: !35, line: 740, baseType: !1708)
!1708 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecDescriptor", file: !35, line: 712, size: 384, align: 64, elements: !1709)
!1709 = !{!1710, !1711, !1712, !1713, !1714, !1715, !1718}
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1708, file: !35, line: 713, baseType: !34, size: 32, align: 32)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1708, file: !35, line: 714, baseType: !24, size: 32, align: 32, offset: 32)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1708, file: !35, line: 720, baseType: !1032, size: 64, align: 64, offset: 64)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "long_name", scope: !1708, file: !35, line: 724, baseType: !1032, size: 64, align: 64, offset: 128)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "props", scope: !1708, file: !35, line: 728, baseType: !996, size: 32, align: 32, offset: 192)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "mime_types", scope: !1708, file: !35, line: 734, baseType: !1716, size: 64, align: 64, offset: 256)
!1716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1717, size: 64, align: 64)
!1717 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1032)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "profiles", scope: !1708, file: !35, line: 739, baseType: !1719, size: 64, align: 64, offset: 320)
!1719 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1720, size: 64, align: 64)
!1720 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1111)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "pts_correction_num_faulty_pts", scope: !1023, file: !35, line: 3129, baseType: !1006, size: 64, align: 64, offset: 7232)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "pts_correction_num_faulty_dts", scope: !1023, file: !35, line: 3130, baseType: !1006, size: 64, align: 64, offset: 7296)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "pts_correction_last_pts", scope: !1023, file: !35, line: 3131, baseType: !1006, size: 64, align: 64, offset: 7360)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "pts_correction_last_dts", scope: !1023, file: !35, line: 3132, baseType: !1006, size: 64, align: 64, offset: 7424)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "sub_charenc", scope: !1023, file: !35, line: 3139, baseType: !1189, size: 64, align: 64, offset: 7488)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "sub_charenc_mode", scope: !1023, file: !35, line: 3147, baseType: !996, size: 32, align: 32, offset: 7552)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "skip_alpha", scope: !1023, file: !35, line: 3165, baseType: !996, size: 32, align: 32, offset: 7584)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "seek_preroll", scope: !1023, file: !35, line: 3172, baseType: !996, size: 32, align: 32, offset: 7616)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "debug_mv", scope: !1023, file: !35, line: 3180, baseType: !996, size: 32, align: 32, offset: 7648)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_intra_matrix", scope: !1023, file: !35, line: 3191, baseType: !1535, size: 64, align: 64, offset: 7680)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "dump_separator", scope: !1023, file: !35, line: 3199, baseType: !1149, size: 64, align: 64, offset: 7744)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "codec_whitelist", scope: !1023, file: !35, line: 3207, baseType: !1189, size: 64, align: 64, offset: 7808)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "properties", scope: !1023, file: !35, line: 3214, baseType: !993, size: 32, align: 32, offset: 7872)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "coded_side_data", scope: !1023, file: !35, line: 3224, baseType: !1220, size: 64, align: 64, offset: 7936)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "nb_coded_side_data", scope: !1023, file: !35, line: 3225, baseType: !996, size: 32, align: 32, offset: 8000)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "hw_frames_ctx", scope: !1023, file: !35, line: 3249, baseType: !1202, size: 64, align: 64, offset: 8064)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "sub_text_format", scope: !1023, file: !35, line: 3256, baseType: !996, size: 32, align: 32, offset: 8128)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "trailing_padding", scope: !1023, file: !35, line: 3271, baseType: !996, size: 32, align: 32, offset: 8160)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "max_pixels", scope: !1023, file: !35, line: 3279, baseType: !1006, size: 64, align: 64, offset: 8192)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "hw_device_ctx", scope: !1023, file: !35, line: 3301, baseType: !1202, size: 64, align: 64, offset: 8256)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "hwaccel_flags", scope: !1023, file: !35, line: 3310, baseType: !996, size: 32, align: 32, offset: 8320)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "apply_cropping", scope: !1023, file: !35, line: 3337, baseType: !996, size: 32, align: 32, offset: 8352)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "extra_hw_frames", scope: !1023, file: !35, line: 3351, baseType: !996, size: 32, align: 32, offset: 8384)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "discard_damaged_percentage", scope: !1023, file: !35, line: 3359, baseType: !996, size: 32, align: 32, offset: 8416)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "gb", scope: !1018, file: !1017, line: 107, baseType: !1746, size: 256, align: 64, offset: 64)
!1746 = !DIDerivedType(tag: DW_TAG_typedef, name: "GetBitContext", file: !1747, line: 70, baseType: !1748)
!1747 = !DIFile(filename: "libavcodec/get_bits.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!1748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GetBitContext", file: !1747, line: 61, size: 256, align: 64, elements: !1749)
!1749 = !{!1750, !1751, !1752, !1753, !1754}
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !1748, file: !1747, line: 62, baseType: !1137, size: 64, align: 64)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "buffer_end", scope: !1748, file: !1747, line: 62, baseType: !1137, size: 64, align: 64, offset: 64)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1748, file: !1747, line: 67, baseType: !996, size: 32, align: 32, offset: 128)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "size_in_bits", scope: !1748, file: !1747, line: 68, baseType: !996, size: 32, align: 32, offset: 160)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "size_in_bits_plus8", scope: !1748, file: !1747, line: 69, baseType: !996, size: 32, align: 32, offset: 192)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "frame_size", scope: !1018, file: !1017, line: 109, baseType: !996, size: 32, align: 32, offset: 320)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "nchsets", scope: !1018, file: !1017, line: 110, baseType: !996, size: 32, align: 32, offset: 352)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "nframesegs", scope: !1018, file: !1017, line: 111, baseType: !996, size: 32, align: 32, offset: 384)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "nsegsamples_log2", scope: !1018, file: !1017, line: 112, baseType: !996, size: 32, align: 32, offset: 416)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "nsegsamples", scope: !1018, file: !1017, line: 113, baseType: !996, size: 32, align: 32, offset: 448)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "nframesamples_log2", scope: !1018, file: !1017, line: 114, baseType: !996, size: 32, align: 32, offset: 480)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "nframesamples", scope: !1018, file: !1017, line: 115, baseType: !996, size: 32, align: 32, offset: 512)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "seg_size_nbits", scope: !1018, file: !1017, line: 116, baseType: !996, size: 32, align: 32, offset: 544)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "band_crc_present", scope: !1018, file: !1017, line: 117, baseType: !996, size: 32, align: 32, offset: 576)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "scalable_lsbs", scope: !1018, file: !1017, line: 118, baseType: !996, size: 32, align: 32, offset: 608)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "ch_mask_nbits", scope: !1018, file: !1017, line: 119, baseType: !996, size: 32, align: 32, offset: 640)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_lsb_width", scope: !1018, file: !1017, line: 120, baseType: !996, size: 32, align: 32, offset: 672)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "chset", scope: !1018, file: !1017, line: 122, baseType: !1768, size: 69120, align: 256, offset: 768)
!1768 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1769, size: 69120, align: 256, elements: !1830)
!1769 = !DIDerivedType(tag: DW_TAG_typedef, name: "DCAXllChSet", file: !1017, line: 103, baseType: !1770)
!1770 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DCAXllChSet", file: !1017, line: 64, size: 23040, align: 256, elements: !1771)
!1771 = !{!1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1787, !1791, !1792, !1793, !1794, !1795, !1796, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1828, !1832}
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "nchannels", scope: !1770, file: !1017, line: 66, baseType: !996, size: 32, align: 32)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "residual_encode", scope: !1770, file: !1017, line: 67, baseType: !996, size: 32, align: 32, offset: 32)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "pcm_bit_res", scope: !1770, file: !1017, line: 68, baseType: !996, size: 32, align: 32, offset: 64)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "storage_bit_res", scope: !1770, file: !1017, line: 69, baseType: !996, size: 32, align: 32, offset: 96)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "freq", scope: !1770, file: !1017, line: 70, baseType: !996, size: 32, align: 32, offset: 128)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "primary_chset", scope: !1770, file: !1017, line: 72, baseType: !996, size: 32, align: 32, offset: 160)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "dmix_coeffs_present", scope: !1770, file: !1017, line: 73, baseType: !996, size: 32, align: 32, offset: 192)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "dmix_embedded", scope: !1770, file: !1017, line: 74, baseType: !996, size: 32, align: 32, offset: 224)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "dmix_type", scope: !1770, file: !1017, line: 75, baseType: !996, size: 32, align: 32, offset: 256)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "hier_chset", scope: !1770, file: !1017, line: 76, baseType: !996, size: 32, align: 32, offset: 288)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "hier_ofs", scope: !1770, file: !1017, line: 77, baseType: !996, size: 32, align: 32, offset: 320)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "dmix_coeff", scope: !1770, file: !1017, line: 78, baseType: !1784, size: 4096, align: 32, offset: 352)
!1784 = !DICompositeType(tag: DW_TAG_array_type, baseType: !996, size: 4096, align: 32, elements: !1785)
!1785 = !{!1786}
!1786 = !DISubrange(count: 128)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "dmix_scale", scope: !1770, file: !1017, line: 79, baseType: !1788, size: 512, align: 32, offset: 4448)
!1788 = !DICompositeType(tag: DW_TAG_array_type, baseType: !996, size: 512, align: 32, elements: !1789)
!1789 = !{!1790}
!1790 = !DISubrange(count: 16)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "dmix_scale_inv", scope: !1770, file: !1017, line: 80, baseType: !1788, size: 512, align: 32, offset: 4960)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "ch_mask", scope: !1770, file: !1017, line: 81, baseType: !996, size: 32, align: 32, offset: 5472)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "ch_remap", scope: !1770, file: !1017, line: 82, baseType: !1180, size: 256, align: 32, offset: 5504)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "nfreqbands", scope: !1770, file: !1017, line: 84, baseType: !996, size: 32, align: 32, offset: 5760)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "nabits", scope: !1770, file: !1017, line: 85, baseType: !996, size: 32, align: 32, offset: 5792)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "bands", scope: !1770, file: !1017, line: 87, baseType: !1797, size: 13312, align: 64, offset: 5824)
!1797 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1798, size: 13312, align: 64, elements: !1817)
!1798 = !DIDerivedType(tag: DW_TAG_typedef, name: "DCAXllBand", file: !1017, line: 62, baseType: !1799)
!1799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DCAXllBand", file: !1017, line: 44, size: 6656, align: 64, elements: !1800)
!1800 = !{!1801, !1802, !1803, !1804, !1805, !1806, !1807, !1810, !1811, !1812, !1813, !1814, !1816}
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "decor_enabled", scope: !1799, file: !1017, line: 45, baseType: !996, size: 32, align: 32)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "orig_order", scope: !1799, file: !1017, line: 46, baseType: !1180, size: 256, align: 32, offset: 32)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "decor_coeff", scope: !1799, file: !1017, line: 47, baseType: !1186, size: 128, align: 32, offset: 288)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "adapt_pred_order", scope: !1799, file: !1017, line: 49, baseType: !1180, size: 256, align: 32, offset: 416)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "highest_pred_order", scope: !1799, file: !1017, line: 50, baseType: !996, size: 32, align: 32, offset: 672)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_pred_order", scope: !1799, file: !1017, line: 51, baseType: !1180, size: 256, align: 32, offset: 704)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "adapt_refl_coeff", scope: !1799, file: !1017, line: 52, baseType: !1808, size: 4096, align: 32, offset: 960)
!1808 = !DICompositeType(tag: DW_TAG_array_type, baseType: !996, size: 4096, align: 32, elements: !1809)
!1809 = !{!1178, !1790}
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "dmix_embedded", scope: !1799, file: !1017, line: 54, baseType: !996, size: 32, align: 32, offset: 5056)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "lsb_section_size", scope: !1799, file: !1017, line: 56, baseType: !996, size: 32, align: 32, offset: 5088)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "nscalablelsbs", scope: !1799, file: !1017, line: 57, baseType: !1180, size: 256, align: 32, offset: 5120)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "bit_width_adjust", scope: !1799, file: !1017, line: 58, baseType: !1180, size: 256, align: 32, offset: 5376)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "msb_sample_buffer", scope: !1799, file: !1017, line: 60, baseType: !1815, size: 512, align: 64, offset: 5632)
!1815 = !DICompositeType(tag: DW_TAG_array_type, baseType: !994, size: 512, align: 64, elements: !1177)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "lsb_sample_buffer", scope: !1799, file: !1017, line: 61, baseType: !1815, size: 512, align: 64, offset: 6144)
!1817 = !{!1818}
!1818 = !DISubrange(count: 2)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "seg_common", scope: !1770, file: !1017, line: 90, baseType: !996, size: 32, align: 32, offset: 19136)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "rice_code_flag", scope: !1770, file: !1017, line: 91, baseType: !1180, size: 256, align: 32, offset: 19168)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "bitalloc_hybrid_linear", scope: !1770, file: !1017, line: 92, baseType: !1180, size: 256, align: 32, offset: 19424)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "bitalloc_part_a", scope: !1770, file: !1017, line: 93, baseType: !1180, size: 256, align: 32, offset: 19680)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "bitalloc_part_b", scope: !1770, file: !1017, line: 94, baseType: !1180, size: 256, align: 32, offset: 19936)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "nsamples_part_a", scope: !1770, file: !1017, line: 95, baseType: !1180, size: 256, align: 32, offset: 20192)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "deci_history", scope: !1770, file: !1017, line: 98, baseType: !1826, size: 2048, align: 32, offset: 20480)
!1826 = !DICompositeType(tag: DW_TAG_array_type, baseType: !995, size: 2048, align: 32, elements: !1827)
!1827 = !{!1178, !1178}
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "sample_size", scope: !1770, file: !1017, line: 101, baseType: !1829, size: 96, align: 32, offset: 22528)
!1829 = !DICompositeType(tag: DW_TAG_array_type, baseType: !993, size: 96, align: 32, elements: !1830)
!1830 = !{!1831}
!1831 = !DISubrange(count: 3)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "sample_buffer", scope: !1770, file: !1017, line: 102, baseType: !1833, size: 192, align: 64, offset: 22656)
!1833 = !DICompositeType(tag: DW_TAG_array_type, baseType: !994, size: 192, align: 64, elements: !1830)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "navi", scope: !1018, file: !1017, line: 124, baseType: !1313, size: 64, align: 64, offset: 69888)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "navi_size", scope: !1018, file: !1017, line: 125, baseType: !993, size: 32, align: 32, offset: 69952)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "nfreqbands", scope: !1018, file: !1017, line: 127, baseType: !996, size: 32, align: 32, offset: 69984)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "nchannels", scope: !1018, file: !1017, line: 128, baseType: !996, size: 32, align: 32, offset: 70016)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "nreschsets", scope: !1018, file: !1017, line: 129, baseType: !996, size: 32, align: 32, offset: 70048)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "nactivechsets", scope: !1018, file: !1017, line: 130, baseType: !996, size: 32, align: 32, offset: 70080)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "hd_stream_id", scope: !1018, file: !1017, line: 132, baseType: !996, size: 32, align: 32, offset: 70112)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "pbr_buffer", scope: !1018, file: !1017, line: 134, baseType: !1149, size: 64, align: 64, offset: 70144)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "pbr_length", scope: !1018, file: !1017, line: 135, baseType: !996, size: 32, align: 32, offset: 70208)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "pbr_delay", scope: !1018, file: !1017, line: 136, baseType: !996, size: 32, align: 32, offset: 70240)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "dcadsp", scope: !1018, file: !1017, line: 138, baseType: !1845, size: 64, align: 64, offset: 70272)
!1845 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1846, size: 64, align: 64)
!1846 = !DIDerivedType(tag: DW_TAG_typedef, name: "DCADSPContext", file: !1847, line: 94, baseType: !1848)
!1847 = !DIFile(filename: "libavcodec/dcadsp.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!1848 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DCADSPContext", file: !1847, line: 30, size: 1280, align: 64, elements: !1849)
!1849 = !{!1850, !1865, !1869, !1877, !1881, !1956, !1960, !1964, !1969, !1973, !1974, !1975, !1976, !1980, !1981, !1985, !1992}
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "decode_hf", scope: !1848, file: !1847, line: 31, baseType: !1851, size: 64, align: 64)
!1851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1852, size: 64, align: 64)
!1852 = !DISubroutineType(types: !1853)
!1853 = !{null, !1854, !1855, !1857, !1862, !1864, !1864, !1864, !1864}
!1854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !994, size: 64, align: 64)
!1855 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1856, size: 64, align: 64)
!1856 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !995)
!1857 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1858, size: 64, align: 64)
!1858 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1859, size: 256, align: 8, elements: !1860)
!1859 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1299)
!1860 = !{!1861}
!1861 = !DISubrange(count: 32)
!1862 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1863, size: 64, align: 64)
!1863 = !DICompositeType(tag: DW_TAG_array_type, baseType: !995, size: 64, align: 32, elements: !1817)
!1864 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", file: !1308, line: 149, baseType: !1007)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "decode_joint", scope: !1848, file: !1847, line: 38, baseType: !1866, size: 64, align: 64, offset: 64)
!1866 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1867, size: 64, align: 64)
!1867 = !DISubroutineType(types: !1868)
!1868 = !{null, !1854, !1854, !1855, !1864, !1864, !1864, !1864}
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "lfe_fir_float", scope: !1848, file: !1847, line: 43, baseType: !1870, size: 128, align: 64, offset: 128)
!1870 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1871, size: 128, align: 64, elements: !1817)
!1871 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1872, size: 64, align: 64)
!1872 = !DISubroutineType(types: !1873)
!1873 = !{null, !1874, !994, !1875, !1864}
!1874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1505, size: 64, align: 64)
!1875 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1876, size: 64, align: 64)
!1876 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1505)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "lfe_x96_float", scope: !1848, file: !1847, line: 46, baseType: !1878, size: 64, align: 64, offset: 256)
!1878 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1879, size: 64, align: 64)
!1879 = !DISubroutineType(types: !1880)
!1880 = !{null, !1874, !1875, !1874, !1864}
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "sub_qmf_float", scope: !1848, file: !1847, line: 49, baseType: !1882, size: 128, align: 64, offset: 320)
!1882 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1883, size: 128, align: 64, elements: !1817)
!1883 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1884, size: 64, align: 64)
!1884 = !DISubroutineType(types: !1885)
!1885 = !{null, !1886, !1895, !1874, !1854, !1854, !1874, !1313, !1874, !1875, !1864, !1505}
!1886 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1887, size: 64, align: 64)
!1887 = !DIDerivedType(tag: DW_TAG_typedef, name: "SynthFilterContext", file: !1888, line: 45, baseType: !1889)
!1888 = !DIFile(filename: "libavcodec/synth_filter.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!1889 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SynthFilterContext", file: !1888, line: 27, size: 256, align: 64, elements: !1890)
!1890 = !{!1891, !1940, !1941, !1955}
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "synth_filter_float", scope: !1889, file: !1888, line: 28, baseType: !1892, size: 64, align: 64)
!1892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1893, size: 64, align: 64)
!1893 = !DISubroutineType(types: !1894)
!1894 = !{null, !1895, !1874, !1313, !1874, !1875, !1874, !1875, !1505}
!1895 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1896, size: 64, align: 64)
!1896 = !DIDerivedType(tag: DW_TAG_typedef, name: "FFTContext", file: !1897, line: 41, baseType: !1898)
!1897 = !DIFile(filename: "libavcodec/avfft.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!1898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FFTContext", file: !888, line: 88, size: 896, align: 64, elements: !1899)
!1899 = !{!1900, !1901, !1902, !1903, !1911, !1912, !1913, !1915, !1916, !1921, !1922, !1928, !1929, !1930, !1936, !1937, !1938}
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "nbits", scope: !1898, file: !888, line: 89, baseType: !996, size: 32, align: 32)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "inverse", scope: !1898, file: !888, line: 90, baseType: !996, size: 32, align: 32, offset: 32)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "revtab", scope: !1898, file: !888, line: 91, baseType: !1535, size: 64, align: 64, offset: 64)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "tmp_buf", scope: !1898, file: !888, line: 92, baseType: !1904, size: 64, align: 64, offset: 128)
!1904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1905, size: 64, align: 64)
!1905 = !DIDerivedType(tag: DW_TAG_typedef, name: "FFTComplex", file: !1897, line: 39, baseType: !1906)
!1906 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FFTComplex", file: !1897, line: 37, size: 64, align: 32, elements: !1907)
!1907 = !{!1908, !1910}
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "re", scope: !1906, file: !1897, line: 38, baseType: !1909, size: 32, align: 32)
!1909 = !DIDerivedType(tag: DW_TAG_typedef, name: "FFTSample", file: !1897, line: 35, baseType: !1505)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1906, file: !1897, line: 38, baseType: !1909, size: 32, align: 32, offset: 32)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "mdct_size", scope: !1898, file: !888, line: 93, baseType: !996, size: 32, align: 32, offset: 192)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "mdct_bits", scope: !1898, file: !888, line: 94, baseType: !996, size: 32, align: 32, offset: 224)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "tcos", scope: !1898, file: !888, line: 96, baseType: !1914, size: 64, align: 64, offset: 256)
!1914 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1909, size: 64, align: 64)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "tsin", scope: !1898, file: !888, line: 97, baseType: !1914, size: 64, align: 64, offset: 320)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "fft_permute", scope: !1898, file: !888, line: 101, baseType: !1917, size: 64, align: 64, offset: 384)
!1917 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1918, size: 64, align: 64)
!1918 = !DISubroutineType(types: !1919)
!1919 = !{null, !1920, !1904}
!1920 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1898, size: 64, align: 64)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "fft_calc", scope: !1898, file: !888, line: 106, baseType: !1917, size: 64, align: 64, offset: 448)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "imdct_calc", scope: !1898, file: !888, line: 107, baseType: !1923, size: 64, align: 64, offset: 512)
!1923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1924, size: 64, align: 64)
!1924 = !DISubroutineType(types: !1925)
!1925 = !{null, !1920, !1914, !1926}
!1926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1927, size: 64, align: 64)
!1927 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1909)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "imdct_half", scope: !1898, file: !888, line: 108, baseType: !1923, size: 64, align: 64, offset: 576)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "mdct_calc", scope: !1898, file: !888, line: 109, baseType: !1923, size: 64, align: 64, offset: 640)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "mdct_calcw", scope: !1898, file: !888, line: 110, baseType: !1931, size: 64, align: 64, offset: 704)
!1931 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1932, size: 64, align: 64)
!1932 = !DISubroutineType(types: !1933)
!1933 = !{null, !1920, !1934, !1926}
!1934 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1935, size: 64, align: 64)
!1935 = !DIDerivedType(tag: DW_TAG_typedef, name: "FFTDouble", file: !888, line: 43, baseType: !1505)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "fft_permutation", scope: !1898, file: !888, line: 111, baseType: !887, size: 32, align: 32, offset: 768)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "mdct_permutation", scope: !1898, file: !888, line: 112, baseType: !893, size: 32, align: 32, offset: 800)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "revtab32", scope: !1898, file: !888, line: 113, baseType: !1939, size: 64, align: 64, offset: 832)
!1939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1003, size: 64, align: 64)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "synth_filter_float_64", scope: !1889, file: !1888, line: 33, baseType: !1892, size: 64, align: 64, offset: 64)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "synth_filter_fixed", scope: !1889, file: !1888, line: 37, baseType: !1942, size: 64, align: 64, offset: 128)
!1942 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1943, size: 64, align: 64)
!1943 = !DISubroutineType(types: !1944)
!1944 = !{null, !1945, !994, !1313, !994, !1855, !994, !1855}
!1945 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1946, size: 64, align: 64)
!1946 = !DIDerivedType(tag: DW_TAG_typedef, name: "DCADCTContext", file: !1947, line: 28, baseType: !1948)
!1947 = !DIFile(filename: "libavcodec/dcadct.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!1948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DCADCTContext", file: !1947, line: 26, size: 128, align: 64, elements: !1949)
!1949 = !{!1950}
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "imdct_half", scope: !1948, file: !1947, line: 27, baseType: !1951, size: 128, align: 64)
!1951 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1952, size: 128, align: 64, elements: !1817)
!1952 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1953, size: 64, align: 64)
!1953 = !DISubroutineType(types: !1954)
!1954 = !{null, !994, !1855}
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "synth_filter_fixed_64", scope: !1889, file: !1888, line: 41, baseType: !1942, size: 64, align: 64, offset: 192)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "lfe_fir_fixed", scope: !1848, file: !1847, line: 58, baseType: !1957, size: 64, align: 64, offset: 448)
!1957 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1958, size: 64, align: 64)
!1958 = !DISubroutineType(types: !1959)
!1959 = !{null, !994, !994, !1855, !1864}
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "lfe_x96_fixed", scope: !1848, file: !1847, line: 61, baseType: !1961, size: 64, align: 64, offset: 512)
!1961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1962, size: 64, align: 64)
!1962 = !DISubroutineType(types: !1963)
!1963 = !{null, !994, !1855, !994, !1864}
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "sub_qmf_fixed", scope: !1848, file: !1847, line: 64, baseType: !1965, size: 128, align: 64, offset: 576)
!1965 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1966, size: 128, align: 64, elements: !1817)
!1966 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1967, size: 64, align: 64)
!1967 = !DISubroutineType(types: !1968)
!1968 = !{null, !1886, !1945, !994, !1854, !1854, !994, !1313, !994, !1855, !1864}
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "decor", scope: !1848, file: !1847, line: 72, baseType: !1970, size: 64, align: 64, offset: 704)
!1970 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1971, size: 64, align: 64)
!1971 = !DISubroutineType(types: !1972)
!1972 = !{null, !994, !1855, !996, !1864}
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "dmix_sub_xch", scope: !1848, file: !1847, line: 74, baseType: !1957, size: 64, align: 64, offset: 768)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "dmix_sub", scope: !1848, file: !1847, line: 77, baseType: !1970, size: 64, align: 64, offset: 832)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "dmix_add", scope: !1848, file: !1847, line: 79, baseType: !1970, size: 64, align: 64, offset: 896)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "dmix_scale", scope: !1848, file: !1847, line: 81, baseType: !1977, size: 64, align: 64, offset: 960)
!1977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1978, size: 64, align: 64)
!1978 = !DISubroutineType(types: !1979)
!1979 = !{null, !994, !996, !1864}
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "dmix_scale_inv", scope: !1848, file: !1847, line: 83, baseType: !1977, size: 64, align: 64, offset: 1024)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "assemble_freq_bands", scope: !1848, file: !1847, line: 85, baseType: !1982, size: 64, align: 64, offset: 1088)
!1982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1983, size: 64, align: 64)
!1983 = !DISubroutineType(types: !1984)
!1984 = !{null, !994, !994, !994, !1855, !1864}
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "lbr_bank", scope: !1848, file: !1847, line: 88, baseType: !1986, size: 64, align: 64, offset: 1152)
!1986 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1987, size: 64, align: 64)
!1987 = !DISubroutineType(types: !1988)
!1988 = !{null, !1989, !1991, !1875, !1864, !1864}
!1989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1990, size: 64, align: 64)
!1990 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1505, size: 128, align: 32, elements: !1183)
!1991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1874, size: 64, align: 64)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "lfe_iir", scope: !1848, file: !1847, line: 91, baseType: !1993, size: 64, align: 64, offset: 1216)
!1993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1994, size: 64, align: 64)
!1994 = !DISubroutineType(types: !1995)
!1995 = !{null, !1874, !1875, !1996, !1998, !1864}
!1996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1997, size: 64, align: 64)
!1997 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1876, size: 128, align: 32, elements: !1183)
!1998 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1999, size: 64, align: 64)
!1999 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1505, size: 64, align: 32, elements: !1817)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "output_mask", scope: !1018, file: !1017, line: 140, baseType: !996, size: 32, align: 32, offset: 70336)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "output_samples", scope: !1018, file: !1017, line: 141, baseType: !2002, size: 2048, align: 64, offset: 70400)
!2002 = !DICompositeType(tag: DW_TAG_array_type, baseType: !994, size: 2048, align: 64, elements: !1860)
!2003 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2004, size: 64, align: 64)
!2004 = !DIDerivedType(tag: DW_TAG_typedef, name: "DCAExssAsset", file: !2005, line: 69, baseType: !2006)
!2005 = !DIFile(filename: "libavcodec/dca_exss.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!2006 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DCAExssAsset", file: !2005, line: 29, size: 960, align: 32, elements: !2007)
!2007 = !{!2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037}
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "asset_offset", scope: !2006, file: !2005, line: 30, baseType: !996, size: 32, align: 32)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "asset_size", scope: !2006, file: !2005, line: 31, baseType: !996, size: 32, align: 32, offset: 32)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "asset_index", scope: !2006, file: !2005, line: 32, baseType: !996, size: 32, align: 32, offset: 64)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "pcm_bit_res", scope: !2006, file: !2005, line: 34, baseType: !996, size: 32, align: 32, offset: 96)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "max_sample_rate", scope: !2006, file: !2005, line: 35, baseType: !996, size: 32, align: 32, offset: 128)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "nchannels_total", scope: !2006, file: !2005, line: 36, baseType: !996, size: 32, align: 32, offset: 160)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "one_to_one_map_ch_to_spkr", scope: !2006, file: !2005, line: 37, baseType: !996, size: 32, align: 32, offset: 192)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "embedded_stereo", scope: !2006, file: !2005, line: 38, baseType: !996, size: 32, align: 32, offset: 224)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "embedded_6ch", scope: !2006, file: !2005, line: 39, baseType: !996, size: 32, align: 32, offset: 256)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "spkr_mask_enabled", scope: !2006, file: !2005, line: 40, baseType: !996, size: 32, align: 32, offset: 288)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "spkr_mask", scope: !2006, file: !2005, line: 41, baseType: !996, size: 32, align: 32, offset: 320)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "representation_type", scope: !2006, file: !2005, line: 42, baseType: !996, size: 32, align: 32, offset: 352)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "coding_mode", scope: !2006, file: !2005, line: 44, baseType: !996, size: 32, align: 32, offset: 384)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "extension_mask", scope: !2006, file: !2005, line: 45, baseType: !996, size: 32, align: 32, offset: 416)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "core_offset", scope: !2006, file: !2005, line: 47, baseType: !996, size: 32, align: 32, offset: 448)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "core_size", scope: !2006, file: !2005, line: 48, baseType: !996, size: 32, align: 32, offset: 480)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "xbr_offset", scope: !2006, file: !2005, line: 50, baseType: !996, size: 32, align: 32, offset: 512)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "xbr_size", scope: !2006, file: !2005, line: 51, baseType: !996, size: 32, align: 32, offset: 544)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "xxch_offset", scope: !2006, file: !2005, line: 53, baseType: !996, size: 32, align: 32, offset: 576)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "xxch_size", scope: !2006, file: !2005, line: 54, baseType: !996, size: 32, align: 32, offset: 608)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "x96_offset", scope: !2006, file: !2005, line: 56, baseType: !996, size: 32, align: 32, offset: 640)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "x96_size", scope: !2006, file: !2005, line: 57, baseType: !996, size: 32, align: 32, offset: 672)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "lbr_offset", scope: !2006, file: !2005, line: 59, baseType: !996, size: 32, align: 32, offset: 704)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "lbr_size", scope: !2006, file: !2005, line: 60, baseType: !996, size: 32, align: 32, offset: 736)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "xll_offset", scope: !2006, file: !2005, line: 62, baseType: !996, size: 32, align: 32, offset: 768)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "xll_size", scope: !2006, file: !2005, line: 63, baseType: !996, size: 32, align: 32, offset: 800)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "xll_sync_present", scope: !2006, file: !2005, line: 64, baseType: !996, size: 32, align: 32, offset: 832)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "xll_delay_nframes", scope: !2006, file: !2005, line: 65, baseType: !996, size: 32, align: 32, offset: 864)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "xll_sync_offset", scope: !2006, file: !2005, line: 66, baseType: !996, size: 32, align: 32, offset: 896)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "hd_stream_id", scope: !2006, file: !2005, line: 68, baseType: !996, size: 32, align: 32, offset: 928)
!2038 = !{}
!2039 = !DILocalVariable(name: "s", arg: 1, scope: !1011, file: !1012, line: 1161, type: !1015)
!2040 = !DIExpression()
!2041 = !DILocation(line: 1161, column: 37, scope: !1011)
!2042 = !DILocalVariable(name: "data", arg: 2, scope: !1011, file: !1012, line: 1161, type: !1149)
!2043 = !DILocation(line: 1161, column: 49, scope: !1011)
!2044 = !DILocalVariable(name: "asset", arg: 3, scope: !1011, file: !1012, line: 1161, type: !2003)
!2045 = !DILocation(line: 1161, column: 69, scope: !1011)
!2046 = !DILocalVariable(name: "ret", scope: !1011, file: !1012, line: 1163, type: !996)
!2047 = !DILocation(line: 1163, column: 9, scope: !1011)
!2048 = !DILocation(line: 1165, column: 9, scope: !2049)
!2049 = distinct !DILexicalBlock(scope: !1011, file: !1012, line: 1165, column: 9)
!2050 = !DILocation(line: 1165, column: 12, scope: !2049)
!2051 = !DILocation(line: 1165, column: 28, scope: !2049)
!2052 = !DILocation(line: 1165, column: 35, scope: !2049)
!2053 = !DILocation(line: 1165, column: 25, scope: !2049)
!2054 = !DILocation(line: 1165, column: 9, scope: !1011)
!2055 = !DILocation(line: 1166, column: 19, scope: !2056)
!2056 = distinct !DILexicalBlock(scope: !2049, file: !1012, line: 1165, column: 49)
!2057 = !DILocation(line: 1166, column: 9, scope: !2056)
!2058 = !DILocation(line: 1167, column: 27, scope: !2056)
!2059 = !DILocation(line: 1167, column: 34, scope: !2056)
!2060 = !DILocation(line: 1167, column: 9, scope: !2056)
!2061 = !DILocation(line: 1167, column: 12, scope: !2056)
!2062 = !DILocation(line: 1167, column: 25, scope: !2056)
!2063 = !DILocation(line: 1168, column: 5, scope: !2056)
!2064 = !DILocation(line: 1170, column: 9, scope: !2065)
!2065 = distinct !DILexicalBlock(scope: !1011, file: !1012, line: 1170, column: 9)
!2066 = !DILocation(line: 1170, column: 12, scope: !2065)
!2067 = !DILocation(line: 1170, column: 9, scope: !1011)
!2068 = !DILocation(line: 1171, column: 31, scope: !2065)
!2069 = !DILocation(line: 1171, column: 34, scope: !2065)
!2070 = !DILocation(line: 1171, column: 41, scope: !2065)
!2071 = !DILocation(line: 1171, column: 48, scope: !2065)
!2072 = !DILocation(line: 1171, column: 39, scope: !2065)
!2073 = !DILocation(line: 1171, column: 60, scope: !2065)
!2074 = !DILocation(line: 1171, column: 67, scope: !2065)
!2075 = !DILocation(line: 1171, column: 77, scope: !2065)
!2076 = !DILocation(line: 1171, column: 15, scope: !2065)
!2077 = !DILocation(line: 1171, column: 13, scope: !2065)
!2078 = !DILocation(line: 1171, column: 9, scope: !2065)
!2079 = !DILocation(line: 1173, column: 34, scope: !2065)
!2080 = !DILocation(line: 1173, column: 37, scope: !2065)
!2081 = !DILocation(line: 1173, column: 44, scope: !2065)
!2082 = !DILocation(line: 1173, column: 51, scope: !2065)
!2083 = !DILocation(line: 1173, column: 42, scope: !2065)
!2084 = !DILocation(line: 1173, column: 63, scope: !2065)
!2085 = !DILocation(line: 1173, column: 70, scope: !2065)
!2086 = !DILocation(line: 1173, column: 80, scope: !2065)
!2087 = !DILocation(line: 1173, column: 15, scope: !2065)
!2088 = !DILocation(line: 1173, column: 13, scope: !2065)
!2089 = !DILocation(line: 1175, column: 12, scope: !1011)
!2090 = !DILocation(line: 1175, column: 5, scope: !1011)
!2091 = distinct !DISubprogram(name: "clear_pbr", scope: !1012, file: !1012, line: 1062, type: !2092, isLocal: true, isDefinition: true, scopeLine: 1063, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!2092 = !DISubroutineType(types: !2093)
!2093 = !{null, !1015}
!2094 = !DILocalVariable(name: "s", arg: 1, scope: !2091, file: !1012, line: 1062, type: !1015)
!2095 = !DILocation(line: 1062, column: 38, scope: !2091)
!2096 = !DILocation(line: 1064, column: 5, scope: !2091)
!2097 = !DILocation(line: 1064, column: 8, scope: !2091)
!2098 = !DILocation(line: 1064, column: 19, scope: !2091)
!2099 = !DILocation(line: 1065, column: 5, scope: !2091)
!2100 = !DILocation(line: 1065, column: 8, scope: !2091)
!2101 = !DILocation(line: 1065, column: 18, scope: !2091)
!2102 = !DILocation(line: 1066, column: 1, scope: !2091)
!2103 = distinct !DISubprogram(name: "parse_frame_pbr", scope: !1012, file: !1012, line: 1120, type: !2104, isLocal: true, isDefinition: true, scopeLine: 1121, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!2104 = !DISubroutineType(types: !2105)
!2105 = !{!996, !1015, !1149, !996, !2003}
!2106 = !DILocalVariable(name: "s", arg: 1, scope: !2103, file: !1012, line: 1120, type: !1015)
!2107 = !DILocation(line: 1120, column: 43, scope: !2103)
!2108 = !DILocalVariable(name: "data", arg: 2, scope: !2103, file: !1012, line: 1120, type: !1149)
!2109 = !DILocation(line: 1120, column: 55, scope: !2103)
!2110 = !DILocalVariable(name: "size", arg: 3, scope: !2103, file: !1012, line: 1120, type: !996)
!2111 = !DILocation(line: 1120, column: 65, scope: !2103)
!2112 = !DILocalVariable(name: "asset", arg: 4, scope: !2103, file: !1012, line: 1120, type: !2003)
!2113 = !DILocation(line: 1120, column: 85, scope: !2103)
!2114 = !DILocalVariable(name: "ret", scope: !2103, file: !1012, line: 1122, type: !996)
!2115 = !DILocation(line: 1122, column: 9, scope: !2103)
!2116 = !DILocation(line: 1124, column: 9, scope: !2117)
!2117 = distinct !DILexicalBlock(scope: !2103, file: !1012, line: 1124, column: 9)
!2118 = !DILocation(line: 1124, column: 30, scope: !2117)
!2119 = !DILocation(line: 1124, column: 33, scope: !2117)
!2120 = !DILocation(line: 1124, column: 28, scope: !2117)
!2121 = !DILocation(line: 1124, column: 14, scope: !2117)
!2122 = !DILocation(line: 1124, column: 9, scope: !2103)
!2123 = !DILocation(line: 1125, column: 13, scope: !2124)
!2124 = distinct !DILexicalBlock(scope: !2117, file: !1012, line: 1124, column: 45)
!2125 = !DILocation(line: 1126, column: 9, scope: !2124)
!2126 = !DILocation(line: 1129, column: 12, scope: !2103)
!2127 = !DILocation(line: 1129, column: 15, scope: !2103)
!2128 = !DILocation(line: 1129, column: 28, scope: !2103)
!2129 = !DILocation(line: 1129, column: 31, scope: !2103)
!2130 = !DILocation(line: 1129, column: 26, scope: !2103)
!2131 = !DILocation(line: 1129, column: 43, scope: !2103)
!2132 = !DILocation(line: 1129, column: 49, scope: !2103)
!2133 = !DILocation(line: 1129, column: 5, scope: !2103)
!2134 = !DILocation(line: 1130, column: 22, scope: !2103)
!2135 = !DILocation(line: 1130, column: 5, scope: !2103)
!2136 = !DILocation(line: 1130, column: 8, scope: !2103)
!2137 = !DILocation(line: 1130, column: 19, scope: !2103)
!2138 = !DILocation(line: 1133, column: 9, scope: !2139)
!2139 = distinct !DILexicalBlock(scope: !2103, file: !1012, line: 1133, column: 9)
!2140 = !DILocation(line: 1133, column: 12, scope: !2139)
!2141 = !DILocation(line: 1133, column: 22, scope: !2139)
!2142 = !DILocation(line: 1133, column: 26, scope: !2139)
!2143 = !DILocation(line: 1133, column: 31, scope: !2144)
!2144 = !DILexicalBlockFile(scope: !2139, file: !1012, discriminator: 1)
!2145 = !DILocation(line: 1133, column: 34, scope: !2144)
!2146 = !DILocation(line: 1133, column: 29, scope: !2144)
!2147 = !DILocation(line: 1133, column: 9, scope: !2144)
!2148 = !DILocation(line: 1134, column: 9, scope: !2139)
!2149 = !DILocation(line: 1136, column: 28, scope: !2150)
!2150 = distinct !DILexicalBlock(scope: !2103, file: !1012, line: 1136, column: 9)
!2151 = !DILocation(line: 1136, column: 31, scope: !2150)
!2152 = !DILocation(line: 1136, column: 34, scope: !2150)
!2153 = !DILocation(line: 1136, column: 46, scope: !2150)
!2154 = !DILocation(line: 1136, column: 49, scope: !2150)
!2155 = !DILocation(line: 1136, column: 61, scope: !2150)
!2156 = !DILocation(line: 1136, column: 16, scope: !2150)
!2157 = !DILocation(line: 1136, column: 14, scope: !2150)
!2158 = !DILocation(line: 1136, column: 69, scope: !2150)
!2159 = !DILocation(line: 1136, column: 9, scope: !2103)
!2160 = !DILocation(line: 1137, column: 9, scope: !2150)
!2161 = !DILocation(line: 1139, column: 9, scope: !2162)
!2162 = distinct !DILexicalBlock(scope: !2103, file: !1012, line: 1139, column: 9)
!2163 = !DILocation(line: 1139, column: 12, scope: !2162)
!2164 = !DILocation(line: 1139, column: 25, scope: !2162)
!2165 = !DILocation(line: 1139, column: 28, scope: !2162)
!2166 = !DILocation(line: 1139, column: 23, scope: !2162)
!2167 = !DILocation(line: 1139, column: 9, scope: !2103)
!2168 = !DILocation(line: 1140, column: 13, scope: !2169)
!2169 = distinct !DILexicalBlock(scope: !2162, file: !1012, line: 1139, column: 40)
!2170 = !DILocation(line: 1141, column: 9, scope: !2169)
!2171 = !DILocation(line: 1144, column: 9, scope: !2172)
!2172 = distinct !DILexicalBlock(scope: !2103, file: !1012, line: 1144, column: 9)
!2173 = !DILocation(line: 1144, column: 12, scope: !2172)
!2174 = !DILocation(line: 1144, column: 26, scope: !2172)
!2175 = !DILocation(line: 1144, column: 29, scope: !2172)
!2176 = !DILocation(line: 1144, column: 23, scope: !2172)
!2177 = !DILocation(line: 1144, column: 9, scope: !2103)
!2178 = !DILocation(line: 1146, column: 19, scope: !2179)
!2179 = distinct !DILexicalBlock(scope: !2172, file: !1012, line: 1144, column: 41)
!2180 = !DILocation(line: 1146, column: 9, scope: !2179)
!2181 = !DILocation(line: 1147, column: 5, scope: !2179)
!2182 = !DILocation(line: 1148, column: 26, scope: !2183)
!2183 = distinct !DILexicalBlock(scope: !2172, file: !1012, line: 1147, column: 12)
!2184 = !DILocation(line: 1148, column: 29, scope: !2183)
!2185 = !DILocation(line: 1148, column: 9, scope: !2183)
!2186 = !DILocation(line: 1148, column: 12, scope: !2183)
!2187 = !DILocation(line: 1148, column: 23, scope: !2183)
!2188 = !DILocation(line: 1149, column: 17, scope: !2183)
!2189 = !DILocation(line: 1149, column: 20, scope: !2183)
!2190 = !DILocation(line: 1149, column: 32, scope: !2183)
!2191 = !DILocation(line: 1149, column: 35, scope: !2183)
!2192 = !DILocation(line: 1149, column: 48, scope: !2183)
!2193 = !DILocation(line: 1149, column: 51, scope: !2183)
!2194 = !DILocation(line: 1149, column: 46, scope: !2183)
!2195 = !DILocation(line: 1149, column: 63, scope: !2183)
!2196 = !DILocation(line: 1149, column: 66, scope: !2183)
!2197 = !DILocation(line: 1149, column: 9, scope: !2183)
!2198 = !DILocation(line: 1152, column: 5, scope: !2103)
!2199 = !DILocation(line: 1157, column: 15, scope: !2103)
!2200 = !DILocation(line: 1157, column: 5, scope: !2103)
!2201 = !DILocation(line: 1158, column: 12, scope: !2103)
!2202 = !DILocation(line: 1158, column: 5, scope: !2103)
!2203 = !DILocation(line: 1159, column: 1, scope: !2103)
!2204 = distinct !DISubprogram(name: "parse_frame_no_pbr", scope: !1012, file: !1012, line: 1082, type: !2104, isLocal: true, isDefinition: true, scopeLine: 1083, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!2205 = !DILocalVariable(name: "s", arg: 1, scope: !2204, file: !1012, line: 1082, type: !1015)
!2206 = !DILocation(line: 1082, column: 46, scope: !2204)
!2207 = !DILocalVariable(name: "data", arg: 2, scope: !2204, file: !1012, line: 1082, type: !1149)
!2208 = !DILocation(line: 1082, column: 58, scope: !2204)
!2209 = !DILocalVariable(name: "size", arg: 3, scope: !2204, file: !1012, line: 1082, type: !996)
!2210 = !DILocation(line: 1082, column: 68, scope: !2204)
!2211 = !DILocalVariable(name: "asset", arg: 4, scope: !2204, file: !1012, line: 1082, type: !2003)
!2212 = !DILocation(line: 1082, column: 88, scope: !2204)
!2213 = !DILocalVariable(name: "ret", scope: !2204, file: !1012, line: 1084, type: !996)
!2214 = !DILocation(line: 1084, column: 9, scope: !2204)
!2215 = !DILocation(line: 1084, column: 27, scope: !2204)
!2216 = !DILocation(line: 1084, column: 30, scope: !2204)
!2217 = !DILocation(line: 1084, column: 36, scope: !2204)
!2218 = !DILocation(line: 1084, column: 42, scope: !2204)
!2219 = !DILocation(line: 1084, column: 15, scope: !2204)
!2220 = !DILocation(line: 1088, column: 9, scope: !2221)
!2221 = distinct !DILexicalBlock(scope: !2204, file: !1012, line: 1088, column: 9)
!2222 = !DILocation(line: 1088, column: 13, scope: !2221)
!2223 = !DILocation(line: 1088, column: 18, scope: !2221)
!2224 = !DILocation(line: 1088, column: 21, scope: !2225)
!2225 = !DILexicalBlockFile(scope: !2221, file: !1012, discriminator: 1)
!2226 = !DILocation(line: 1088, column: 28, scope: !2225)
!2227 = !DILocation(line: 1088, column: 45, scope: !2225)
!2228 = !DILocation(line: 1088, column: 48, scope: !2229)
!2229 = !DILexicalBlockFile(scope: !2221, file: !1012, discriminator: 2)
!2230 = !DILocation(line: 1088, column: 55, scope: !2229)
!2231 = !DILocation(line: 1088, column: 73, scope: !2229)
!2232 = !DILocation(line: 1088, column: 71, scope: !2229)
!2233 = !DILocation(line: 1088, column: 9, scope: !2229)
!2234 = !DILocation(line: 1090, column: 17, scope: !2235)
!2235 = distinct !DILexicalBlock(scope: !2221, file: !1012, line: 1088, column: 79)
!2236 = !DILocation(line: 1090, column: 24, scope: !2235)
!2237 = !DILocation(line: 1090, column: 14, scope: !2235)
!2238 = !DILocation(line: 1091, column: 17, scope: !2235)
!2239 = !DILocation(line: 1091, column: 24, scope: !2235)
!2240 = !DILocation(line: 1091, column: 14, scope: !2235)
!2241 = !DILocation(line: 1096, column: 13, scope: !2242)
!2242 = distinct !DILexicalBlock(scope: !2235, file: !1012, line: 1096, column: 13)
!2243 = !DILocation(line: 1096, column: 20, scope: !2242)
!2244 = !DILocation(line: 1096, column: 38, scope: !2242)
!2245 = !DILocation(line: 1096, column: 13, scope: !2235)
!2246 = !DILocation(line: 1097, column: 36, scope: !2247)
!2247 = distinct !DILexicalBlock(scope: !2248, file: !1012, line: 1097, column: 17)
!2248 = distinct !DILexicalBlock(scope: !2242, file: !1012, line: 1096, column: 43)
!2249 = !DILocation(line: 1097, column: 39, scope: !2247)
!2250 = !DILocation(line: 1097, column: 45, scope: !2247)
!2251 = !DILocation(line: 1097, column: 51, scope: !2247)
!2252 = !DILocation(line: 1097, column: 58, scope: !2247)
!2253 = !DILocation(line: 1097, column: 24, scope: !2247)
!2254 = !DILocation(line: 1097, column: 22, scope: !2247)
!2255 = !DILocation(line: 1097, column: 78, scope: !2247)
!2256 = !DILocation(line: 1097, column: 17, scope: !2248)
!2257 = !DILocation(line: 1098, column: 24, scope: !2247)
!2258 = !DILocation(line: 1098, column: 17, scope: !2247)
!2259 = !DILocation(line: 1099, column: 13, scope: !2248)
!2260 = !DILocation(line: 1103, column: 27, scope: !2235)
!2261 = !DILocation(line: 1103, column: 30, scope: !2235)
!2262 = !DILocation(line: 1103, column: 36, scope: !2235)
!2263 = !DILocation(line: 1103, column: 42, scope: !2235)
!2264 = !DILocation(line: 1103, column: 15, scope: !2235)
!2265 = !DILocation(line: 1103, column: 13, scope: !2235)
!2266 = !DILocation(line: 1104, column: 5, scope: !2235)
!2267 = !DILocation(line: 1106, column: 9, scope: !2268)
!2268 = distinct !DILexicalBlock(scope: !2204, file: !1012, line: 1106, column: 9)
!2269 = !DILocation(line: 1106, column: 13, scope: !2268)
!2270 = !DILocation(line: 1106, column: 9, scope: !2204)
!2271 = !DILocation(line: 1107, column: 16, scope: !2268)
!2272 = !DILocation(line: 1107, column: 9, scope: !2268)
!2273 = !DILocation(line: 1109, column: 9, scope: !2274)
!2274 = distinct !DILexicalBlock(scope: !2204, file: !1012, line: 1109, column: 9)
!2275 = !DILocation(line: 1109, column: 12, scope: !2274)
!2276 = !DILocation(line: 1109, column: 25, scope: !2274)
!2277 = !DILocation(line: 1109, column: 23, scope: !2274)
!2278 = !DILocation(line: 1109, column: 9, scope: !2204)
!2279 = !DILocation(line: 1110, column: 9, scope: !2274)
!2280 = !DILocation(line: 1113, column: 9, scope: !2281)
!2281 = distinct !DILexicalBlock(scope: !2204, file: !1012, line: 1113, column: 9)
!2282 = !DILocation(line: 1113, column: 12, scope: !2281)
!2283 = !DILocation(line: 1113, column: 25, scope: !2281)
!2284 = !DILocation(line: 1113, column: 23, scope: !2281)
!2285 = !DILocation(line: 1113, column: 9, scope: !2204)
!2286 = !DILocation(line: 1114, column: 32, scope: !2287)
!2287 = distinct !DILexicalBlock(scope: !2281, file: !1012, line: 1114, column: 13)
!2288 = !DILocation(line: 1114, column: 35, scope: !2287)
!2289 = !DILocation(line: 1114, column: 42, scope: !2287)
!2290 = !DILocation(line: 1114, column: 45, scope: !2287)
!2291 = !DILocation(line: 1114, column: 40, scope: !2287)
!2292 = !DILocation(line: 1114, column: 57, scope: !2287)
!2293 = !DILocation(line: 1114, column: 64, scope: !2287)
!2294 = !DILocation(line: 1114, column: 67, scope: !2287)
!2295 = !DILocation(line: 1114, column: 62, scope: !2287)
!2296 = !DILocation(line: 1114, column: 20, scope: !2287)
!2297 = !DILocation(line: 1114, column: 18, scope: !2287)
!2298 = !DILocation(line: 1114, column: 83, scope: !2287)
!2299 = !DILocation(line: 1114, column: 13, scope: !2281)
!2300 = !DILocation(line: 1115, column: 20, scope: !2287)
!2301 = !DILocation(line: 1115, column: 13, scope: !2287)
!2302 = !DILocation(line: 1114, column: 85, scope: !2303)
!2303 = !DILexicalBlockFile(scope: !2287, file: !1012, discriminator: 1)
!2304 = !DILocation(line: 1117, column: 5, scope: !2204)
!2305 = !DILocation(line: 1118, column: 1, scope: !2204)
!2306 = distinct !DISubprogram(name: "ff_dca_xll_filter_frame", scope: !1012, file: !1012, line: 1322, type: !2307, isLocal: false, isDefinition: true, scopeLine: 1323, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!2307 = !DISubroutineType(types: !2308)
!2308 = !{!996, !1015, !1331}
!2309 = !DILocalVariable(name: "a", arg: 1, scope: !2310, file: !2311, line: 192, type: !996)
!2310 = distinct !DISubprogram(name: "av_clip_int16_c", scope: !2311, file: !2311, line: 192, type: !2312, isLocal: true, isDefinition: true, scopeLine: 193, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!2311 = !DIFile(filename: "./libavutil/common.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!2312 = !DISubroutineType(types: !2313)
!2313 = !{!990, !996}
!2314 = !DILocation(line: 192, column: 97, scope: !2310, inlinedAt: !2315)
!2315 = distinct !DILocation(line: 1449, column: 28, scope: !2316)
!2316 = distinct !DILexicalBlock(scope: !2317, file: !1012, line: 1448, column: 13)
!2317 = distinct !DILexicalBlock(scope: !2318, file: !1012, line: 1448, column: 13)
!2318 = distinct !DILexicalBlock(scope: !2319, file: !1012, line: 1446, column: 50)
!2319 = distinct !DILexicalBlock(scope: !2320, file: !1012, line: 1446, column: 13)
!2320 = distinct !DILexicalBlock(scope: !2321, file: !1012, line: 1444, column: 43)
!2321 = distinct !DILexicalBlock(scope: !2322, file: !1012, line: 1444, column: 5)
!2322 = distinct !DILexicalBlock(scope: !2306, file: !1012, line: 1444, column: 5)
!2323 = !DILocalVariable(name: "s", arg: 1, scope: !2306, file: !1012, line: 1322, type: !1015)
!2324 = !DILocation(line: 1322, column: 44, scope: !2306)
!2325 = !DILocalVariable(name: "frame", arg: 2, scope: !2306, file: !1012, line: 1322, type: !1331)
!2326 = !DILocation(line: 1322, column: 56, scope: !2306)
!2327 = !DILocalVariable(name: "avctx", scope: !2306, file: !1012, line: 1324, type: !1021)
!2328 = !DILocation(line: 1324, column: 21, scope: !2306)
!2329 = !DILocation(line: 1324, column: 29, scope: !2306)
!2330 = !DILocation(line: 1324, column: 32, scope: !2306)
!2331 = !DILocalVariable(name: "dca", scope: !2306, file: !1012, line: 1325, type: !2332)
!2332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2333, size: 64, align: 64)
!2333 = !DIDerivedType(tag: DW_TAG_typedef, name: "DCAContext", file: !2334, line: 66, baseType: !2335)
!2334 = !DIFile(filename: "libavcodec/dcadec.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!2335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DCAContext", file: !2334, line: 46, size: 627968, align: 256, elements: !2336)
!2336 = !{!2337, !2338, !2339, !2557, !2576, !2577, !2678, !2679, !2684, !2685, !2686, !2687, !2688}
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "class", scope: !2335, file: !2334, line: 47, baseType: !1026, size: 64, align: 64)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "avctx", scope: !2335, file: !2334, line: 48, baseType: !1021, size: 64, align: 64, offset: 64)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "core", scope: !2335, file: !2334, line: 50, baseType: !2340, size: 372992, align: 256, offset: 256)
!2340 = !DIDerivedType(tag: DW_TAG_typedef, name: "DCACoreDecoder", file: !2341, line: 214, baseType: !2342)
!2341 = !DIFile(filename: "libavcodec/dca_core.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!2342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DCACoreDecoder", file: !2341, line: 101, size: 372992, align: 256, elements: !2343)
!2343 = !{!2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2373, !2374, !2375, !2376, !2377, !2378, !2382, !2384, !2386, !2390, !2392, !2393, !2396, !2399, !2400, !2402, !2403, !2404, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2418, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2434, !2435, !2436, !2439, !2440, !2466, !2467, !2468, !2470, !2471, !2514, !2546, !2547, !2548, !2549, !2550, !2551, !2553, !2554, !2555, !2556}
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "avctx", scope: !2342, file: !2341, line: 102, baseType: !1021, size: 64, align: 64)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "gb", scope: !2342, file: !2341, line: 103, baseType: !1746, size: 256, align: 64, offset: 64)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "gb_in", scope: !2342, file: !2341, line: 104, baseType: !1746, size: 256, align: 64, offset: 320)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "crc_present", scope: !2342, file: !2341, line: 107, baseType: !996, size: 32, align: 32, offset: 576)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "npcmblocks", scope: !2342, file: !2341, line: 108, baseType: !996, size: 32, align: 32, offset: 608)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "frame_size", scope: !2342, file: !2341, line: 109, baseType: !996, size: 32, align: 32, offset: 640)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "audio_mode", scope: !2342, file: !2341, line: 110, baseType: !996, size: 32, align: 32, offset: 672)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !2342, file: !2341, line: 111, baseType: !996, size: 32, align: 32, offset: 704)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "bit_rate", scope: !2342, file: !2341, line: 112, baseType: !996, size: 32, align: 32, offset: 736)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "drc_present", scope: !2342, file: !2341, line: 113, baseType: !996, size: 32, align: 32, offset: 768)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "ts_present", scope: !2342, file: !2341, line: 114, baseType: !996, size: 32, align: 32, offset: 800)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "aux_present", scope: !2342, file: !2341, line: 115, baseType: !996, size: 32, align: 32, offset: 832)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "ext_audio_type", scope: !2342, file: !2341, line: 116, baseType: !996, size: 32, align: 32, offset: 864)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "ext_audio_present", scope: !2342, file: !2341, line: 117, baseType: !996, size: 32, align: 32, offset: 896)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "sync_ssf", scope: !2342, file: !2341, line: 118, baseType: !996, size: 32, align: 32, offset: 928)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "lfe_present", scope: !2342, file: !2341, line: 119, baseType: !996, size: 32, align: 32, offset: 960)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "predictor_history", scope: !2342, file: !2341, line: 120, baseType: !996, size: 32, align: 32, offset: 992)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "filter_perfect", scope: !2342, file: !2341, line: 121, baseType: !996, size: 32, align: 32, offset: 1024)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "source_pcm_res", scope: !2342, file: !2341, line: 122, baseType: !996, size: 32, align: 32, offset: 1056)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "es_format", scope: !2342, file: !2341, line: 123, baseType: !996, size: 32, align: 32, offset: 1088)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "sumdiff_front", scope: !2342, file: !2341, line: 124, baseType: !996, size: 32, align: 32, offset: 1120)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "sumdiff_surround", scope: !2342, file: !2341, line: 125, baseType: !996, size: 32, align: 32, offset: 1152)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "nsubframes", scope: !2342, file: !2341, line: 128, baseType: !996, size: 32, align: 32, offset: 1184)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "nchannels", scope: !2342, file: !2341, line: 129, baseType: !996, size: 32, align: 32, offset: 1216)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "ch_mask", scope: !2342, file: !2341, line: 130, baseType: !996, size: 32, align: 32, offset: 1248)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "nsubbands", scope: !2342, file: !2341, line: 131, baseType: !2370, size: 56, align: 8, offset: 1280)
!2370 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1299, size: 56, align: 8, elements: !2371)
!2371 = !{!2372}
!2372 = !DISubrange(count: 7)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "subband_vq_start", scope: !2342, file: !2341, line: 132, baseType: !2370, size: 56, align: 8, offset: 1336)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "joint_intensity_index", scope: !2342, file: !2341, line: 133, baseType: !2370, size: 56, align: 8, offset: 1392)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "transition_mode_sel", scope: !2342, file: !2341, line: 134, baseType: !2370, size: 56, align: 8, offset: 1448)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "scale_factor_sel", scope: !2342, file: !2341, line: 135, baseType: !2370, size: 56, align: 8, offset: 1504)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "bit_allocation_sel", scope: !2342, file: !2341, line: 136, baseType: !2370, size: 56, align: 8, offset: 1560)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "quant_index_sel", scope: !2342, file: !2341, line: 137, baseType: !2379, size: 560, align: 8, offset: 1616)
!2379 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1299, size: 560, align: 8, elements: !2380)
!2380 = !{!2372, !2381}
!2381 = !DISubrange(count: 10)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "scale_factor_adj", scope: !2342, file: !2341, line: 138, baseType: !2383, size: 2240, align: 32, offset: 2176)
!2383 = !DICompositeType(tag: DW_TAG_array_type, baseType: !995, size: 2240, align: 32, elements: !2380)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "nsubsubframes", scope: !2342, file: !2341, line: 141, baseType: !2385, size: 128, align: 8, offset: 4416)
!2385 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1299, size: 128, align: 8, elements: !1789)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "prediction_mode", scope: !2342, file: !2341, line: 142, baseType: !2387, size: 3584, align: 8, offset: 4544)
!2387 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1299, size: 3584, align: 8, elements: !2388)
!2388 = !{!2372, !2389}
!2389 = !DISubrange(count: 64)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "prediction_vq_index", scope: !2342, file: !2341, line: 143, baseType: !2391, size: 7168, align: 16, offset: 8128)
!2391 = !DICompositeType(tag: DW_TAG_array_type, baseType: !990, size: 7168, align: 16, elements: !2388)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "bit_allocation", scope: !2342, file: !2341, line: 144, baseType: !2387, size: 3584, align: 8, offset: 15296)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "transition_mode", scope: !2342, file: !2341, line: 145, baseType: !2394, size: 28672, align: 8, offset: 18880)
!2394 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1299, size: 28672, align: 8, elements: !2395)
!2395 = !{!1790, !2372, !1861}
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "scale_factors", scope: !2342, file: !2341, line: 146, baseType: !2397, size: 14336, align: 32, offset: 47552)
!2397 = !DICompositeType(tag: DW_TAG_array_type, baseType: !995, size: 14336, align: 32, elements: !2398)
!2398 = !{!2372, !1861, !1818}
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "joint_scale_sel", scope: !2342, file: !2341, line: 147, baseType: !2370, size: 56, align: 8, offset: 61888)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "joint_scale_factors", scope: !2342, file: !2341, line: 148, baseType: !2401, size: 14336, align: 32, offset: 61952)
!2401 = !DICompositeType(tag: DW_TAG_array_type, baseType: !995, size: 14336, align: 32, elements: !2388)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "prim_dmix_embedded", scope: !2342, file: !2341, line: 151, baseType: !996, size: 32, align: 32, offset: 76288)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "prim_dmix_type", scope: !2342, file: !2341, line: 152, baseType: !996, size: 32, align: 32, offset: 76320)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "prim_dmix_coeff", scope: !2342, file: !2341, line: 153, baseType: !2405, size: 768, align: 32, offset: 76352)
!2405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !996, size: 768, align: 32, elements: !2406)
!2406 = !{!2407}
!2407 = !DISubrange(count: 24)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "ext_audio_mask", scope: !2342, file: !2341, line: 156, baseType: !996, size: 32, align: 32, offset: 77120)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "xch_pos", scope: !2342, file: !2341, line: 159, baseType: !996, size: 32, align: 32, offset: 77152)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "xxch_crc_present", scope: !2342, file: !2341, line: 162, baseType: !996, size: 32, align: 32, offset: 77184)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "xxch_mask_nbits", scope: !2342, file: !2341, line: 163, baseType: !996, size: 32, align: 32, offset: 77216)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "xxch_core_mask", scope: !2342, file: !2341, line: 164, baseType: !996, size: 32, align: 32, offset: 77248)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "xxch_spkr_mask", scope: !2342, file: !2341, line: 165, baseType: !996, size: 32, align: 32, offset: 77280)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "xxch_dmix_embedded", scope: !2342, file: !2341, line: 166, baseType: !996, size: 32, align: 32, offset: 77312)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "xxch_dmix_scale_inv", scope: !2342, file: !2341, line: 167, baseType: !996, size: 32, align: 32, offset: 77344)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "xxch_dmix_mask", scope: !2342, file: !2341, line: 168, baseType: !2417, size: 64, align: 32, offset: 77376)
!2417 = !DICompositeType(tag: DW_TAG_array_type, baseType: !996, size: 64, align: 32, elements: !1817)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "xxch_dmix_coeff", scope: !2342, file: !2341, line: 169, baseType: !2419, size: 384, align: 32, offset: 77440)
!2419 = !DICompositeType(tag: DW_TAG_array_type, baseType: !996, size: 384, align: 32, elements: !2420)
!2420 = !{!2421}
!2421 = !DISubrange(count: 12)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "xxch_pos", scope: !2342, file: !2341, line: 170, baseType: !996, size: 32, align: 32, offset: 77824)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "x96_rev_no", scope: !2342, file: !2341, line: 173, baseType: !996, size: 32, align: 32, offset: 77856)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "x96_crc_present", scope: !2342, file: !2341, line: 174, baseType: !996, size: 32, align: 32, offset: 77888)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "x96_nchannels", scope: !2342, file: !2341, line: 175, baseType: !996, size: 32, align: 32, offset: 77920)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "x96_high_res", scope: !2342, file: !2341, line: 176, baseType: !996, size: 32, align: 32, offset: 77952)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "x96_subband_start", scope: !2342, file: !2341, line: 177, baseType: !996, size: 32, align: 32, offset: 77984)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "x96_rand", scope: !2342, file: !2341, line: 178, baseType: !996, size: 32, align: 32, offset: 78016)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "x96_pos", scope: !2342, file: !2341, line: 179, baseType: !996, size: 32, align: 32, offset: 78048)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "x96_subband_size", scope: !2342, file: !2341, line: 182, baseType: !993, size: 32, align: 32, offset: 78080)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "x96_subband_buffer", scope: !2342, file: !2341, line: 183, baseType: !994, size: 64, align: 64, offset: 78144)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "x96_subband_samples", scope: !2342, file: !2341, line: 184, baseType: !2433, size: 28672, align: 64, offset: 78208)
!2433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !994, size: 28672, align: 64, elements: !2388)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "subband_size", scope: !2342, file: !2341, line: 186, baseType: !993, size: 32, align: 32, offset: 106880)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "subband_buffer", scope: !2342, file: !2341, line: 187, baseType: !994, size: 64, align: 64, offset: 106944)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "subband_samples", scope: !2342, file: !2341, line: 188, baseType: !2437, size: 14336, align: 64, offset: 107008)
!2437 = !DICompositeType(tag: DW_TAG_array_type, baseType: !994, size: 14336, align: 64, elements: !2438)
!2438 = !{!2372, !1861}
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "lfe_samples", scope: !2342, file: !2341, line: 189, baseType: !994, size: 64, align: 64, offset: 121344)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "dcadsp_data", scope: !2342, file: !2341, line: 192, baseType: !2441, size: 245504, align: 256, offset: 121600)
!2441 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2442, size: 245504, align: 256, elements: !2371)
!2442 = !DIDerivedType(tag: DW_TAG_typedef, name: "DCADSPData", file: !2341, line: 99, baseType: !2443)
!2443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DCADSPData", file: !2341, line: 87, size: 35072, align: 256, elements: !2444)
!2444 = !{!2445, !2465}
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2443, file: !2341, line: 97, baseType: !2446, size: 34816, align: 256)
!2446 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2443, file: !2341, line: 88, size: 34816, align: 256, elements: !2447)
!2447 = !{!2448, !2458}
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "flt", scope: !2446, file: !2341, line: 92, baseType: !2449, size: 34816, align: 256)
!2449 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2446, file: !2341, line: 89, size: 34816, align: 256, elements: !2450)
!2450 = !{!2451, !2455}
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "hist1", scope: !2449, file: !2341, line: 90, baseType: !2452, size: 32768, align: 32)
!2452 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1505, size: 32768, align: 32, elements: !2453)
!2453 = !{!2454}
!2454 = !DISubrange(count: 1024)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "hist2", scope: !2449, file: !2341, line: 91, baseType: !2456, size: 2048, align: 32, offset: 32768)
!2456 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1505, size: 2048, align: 32, elements: !2457)
!2457 = !{!2389}
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "fix", scope: !2446, file: !2341, line: 96, baseType: !2459, size: 34816, align: 256)
!2459 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2446, file: !2341, line: 93, size: 34816, align: 256, elements: !2460)
!2460 = !{!2461, !2463}
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "hist1", scope: !2459, file: !2341, line: 94, baseType: !2462, size: 32768, align: 32)
!2462 = !DICompositeType(tag: DW_TAG_array_type, baseType: !995, size: 32768, align: 32, elements: !2453)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "hist2", scope: !2459, file: !2341, line: 95, baseType: !2464, size: 2048, align: 32, offset: 32768)
!2464 = !DICompositeType(tag: DW_TAG_array_type, baseType: !995, size: 2048, align: 32, elements: !2457)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2443, file: !2341, line: 98, baseType: !996, size: 32, align: 32, offset: 34816)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "dcadsp", scope: !2342, file: !2341, line: 193, baseType: !1845, size: 64, align: 64, offset: 367104)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "dcadct", scope: !2342, file: !2341, line: 194, baseType: !1946, size: 128, align: 64, offset: 367168)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "imdct", scope: !2342, file: !2341, line: 195, baseType: !2469, size: 1792, align: 64, offset: 367296)
!2469 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1896, size: 1792, align: 64, elements: !1817)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "synth", scope: !2342, file: !2341, line: 196, baseType: !1887, size: 256, align: 64, offset: 369088)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "float_dsp", scope: !2342, file: !2341, line: 197, baseType: !2472, size: 64, align: 64, offset: 369344)
!2472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2473, size: 64, align: 64)
!2473 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFloatDSPContext", file: !2474, line: 192, baseType: !2475)
!2474 = !DIFile(filename: "./libavutil/float_dsp.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!2475 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFloatDSPContext", file: !2474, line: 24, size: 704, align: 64, elements: !2476)
!2476 = !{!2477, !2481, !2485, !2493, !2494, !2495, !2499, !2500, !2501, !2506, !2510}
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "vector_fmul", scope: !2475, file: !2474, line: 38, baseType: !2478, size: 64, align: 64)
!2478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2479, size: 64, align: 64)
!2479 = !DISubroutineType(types: !2480)
!2480 = !{null, !1874, !1875, !1875, !996}
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "vector_fmac_scalar", scope: !2475, file: !2474, line: 54, baseType: !2482, size: 64, align: 64, offset: 64)
!2482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2483, size: 64, align: 64)
!2483 = !DISubroutineType(types: !2484)
!2484 = !{null, !1874, !1875, !1505, !996}
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "vector_dmac_scalar", scope: !2475, file: !2474, line: 70, baseType: !2486, size: 64, align: 64, offset: 128)
!2486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2487, size: 64, align: 64)
!2487 = !DISubroutineType(types: !2488)
!2488 = !{null, !2489, !2491, !2490, !996}
!2489 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2490, size: 64, align: 64)
!2490 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!2491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2492, size: 64, align: 64)
!2492 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2490)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "vector_fmul_scalar", scope: !2475, file: !2474, line: 85, baseType: !2482, size: 64, align: 64, offset: 192)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "vector_dmul_scalar", scope: !2475, file: !2474, line: 100, baseType: !2486, size: 64, align: 64, offset: 256)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "vector_fmul_window", scope: !2475, file: !2474, line: 119, baseType: !2496, size: 64, align: 64, offset: 320)
!2496 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2497, size: 64, align: 64)
!2497 = !DISubroutineType(types: !2498)
!2498 = !{null, !1874, !1875, !1875, !1875, !996}
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "vector_fmul_add", scope: !2475, file: !2474, line: 137, baseType: !2496, size: 64, align: 64, offset: 384)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "vector_fmul_reverse", scope: !2475, file: !2474, line: 154, baseType: !2478, size: 64, align: 64, offset: 448)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "butterflies_float", scope: !2475, file: !2474, line: 164, baseType: !2502, size: 64, align: 64, offset: 512)
!2502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2503, size: 64, align: 64)
!2503 = !DISubroutineType(types: !2504)
!2504 = !{null, !2505, !2505, !996}
!2505 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !1874)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "scalarproduct_float", scope: !2475, file: !2474, line: 175, baseType: !2507, size: 64, align: 64, offset: 576)
!2507 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2508, size: 64, align: 64)
!2508 = !DISubroutineType(types: !2509)
!2509 = !{!1505, !1875, !1875, !996}
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "vector_dmul", scope: !2475, file: !2474, line: 190, baseType: !2511, size: 64, align: 64, offset: 640)
!2511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2512, size: 64, align: 64)
!2512 = !DISubroutineType(types: !2513)
!2513 = !{null, !2489, !2491, !2491, !996}
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_dsp", scope: !2342, file: !2341, line: 198, baseType: !2515, size: 64, align: 64, offset: 369408)
!2515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2516, size: 64, align: 64)
!2516 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFixedDSPContext", file: !2517, line: 154, baseType: !2518)
!2517 = !DIFile(filename: "./libavutil/fixed_dsp.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!2518 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFixedDSPContext", file: !2517, line: 56, size: 448, align: 64, elements: !2519)
!2519 = !{!2520, !2524, !2528, !2532, !2533, !2537, !2541}
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "vector_fmul_window_scaled", scope: !2518, file: !2517, line: 80, baseType: !2521, size: 64, align: 64)
!2521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2522, size: 64, align: 64)
!2522 = !DISubroutineType(types: !2523)
!2523 = !{null, !989, !1855, !1855, !1855, !996, !1004}
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "vector_fmul_window", scope: !2518, file: !2517, line: 98, baseType: !2525, size: 64, align: 64, offset: 64)
!2525 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2526, size: 64, align: 64)
!2526 = !DISubroutineType(types: !2527)
!2527 = !{null, !994, !1855, !1855, !1855, !996}
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "vector_fmul", scope: !2518, file: !2517, line: 113, baseType: !2529, size: 64, align: 64, offset: 128)
!2529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2530, size: 64, align: 64)
!2530 = !DISubroutineType(types: !2531)
!2531 = !{null, !1313, !1095, !1095, !996}
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "vector_fmul_reverse", scope: !2518, file: !2517, line: 116, baseType: !2529, size: 64, align: 64, offset: 192)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "vector_fmul_add", scope: !2518, file: !2517, line: 132, baseType: !2534, size: 64, align: 64, offset: 256)
!2534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2535, size: 64, align: 64)
!2535 = !DISubroutineType(types: !2536)
!2536 = !{null, !1313, !1095, !1095, !1095, !996}
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "scalarproduct_fixed", scope: !2518, file: !2517, line: 144, baseType: !2538, size: 64, align: 64, offset: 320)
!2538 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2539, size: 64, align: 64)
!2539 = !DISubroutineType(types: !2540)
!2540 = !{!996, !1095, !1095, !996}
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "butterflies_fixed", scope: !2518, file: !2517, line: 153, baseType: !2542, size: 64, align: 64, offset: 384)
!2542 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2543, size: 64, align: 64)
!2543 = !DISubroutineType(types: !2544)
!2544 = !{null, !2545, !2545, !996}
!2545 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !1313)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "output_size", scope: !2342, file: !2341, line: 201, baseType: !993, size: 32, align: 32, offset: 369472)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "output_buffer", scope: !2342, file: !2341, line: 202, baseType: !1039, size: 64, align: 64, offset: 369536)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "output_samples", scope: !2342, file: !2341, line: 203, baseType: !2002, size: 2048, align: 64, offset: 369600)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "output_history_lfe_fixed", scope: !2342, file: !2341, line: 204, baseType: !995, size: 32, align: 32, offset: 371648)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "output_history_lfe_float", scope: !2342, file: !2341, line: 205, baseType: !1505, size: 32, align: 32, offset: 371680)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "ch_remap", scope: !2342, file: !2341, line: 207, baseType: !2552, size: 1024, align: 32, offset: 371712)
!2552 = !DICompositeType(tag: DW_TAG_array_type, baseType: !996, size: 1024, align: 32, elements: !1860)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "request_mask", scope: !2342, file: !2341, line: 208, baseType: !996, size: 32, align: 32, offset: 372736)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "npcmsamples", scope: !2342, file: !2341, line: 210, baseType: !996, size: 32, align: 32, offset: 372768)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "output_rate", scope: !2342, file: !2341, line: 211, baseType: !996, size: 32, align: 32, offset: 372800)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "filter_mode", scope: !2342, file: !2341, line: 213, baseType: !996, size: 32, align: 32, offset: 372832)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "exss", scope: !2335, file: !2334, line: 51, baseType: !2558, size: 1664, align: 64, offset: 373248)
!2558 = !DIDerivedType(tag: DW_TAG_typedef, name: "DCAExssParser", file: !2005, line: 88, baseType: !2559)
!2559 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DCAExssParser", file: !2005, line: 71, size: 1664, align: 64, elements: !2560)
!2560 = !{!2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572}
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "avctx", scope: !2559, file: !2005, line: 72, baseType: !1021, size: 64, align: 64)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "gb", scope: !2559, file: !2005, line: 73, baseType: !1746, size: 256, align: 64, offset: 64)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "exss_index", scope: !2559, file: !2005, line: 75, baseType: !996, size: 32, align: 32, offset: 320)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "exss_size_nbits", scope: !2559, file: !2005, line: 76, baseType: !996, size: 32, align: 32, offset: 352)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "exss_size", scope: !2559, file: !2005, line: 77, baseType: !996, size: 32, align: 32, offset: 384)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "static_fields_present", scope: !2559, file: !2005, line: 79, baseType: !996, size: 32, align: 32, offset: 416)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "npresents", scope: !2559, file: !2005, line: 80, baseType: !996, size: 32, align: 32, offset: 448)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "nassets", scope: !2559, file: !2005, line: 81, baseType: !996, size: 32, align: 32, offset: 480)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "mix_metadata_enabled", scope: !2559, file: !2005, line: 83, baseType: !996, size: 32, align: 32, offset: 512)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "nmixoutconfigs", scope: !2559, file: !2005, line: 84, baseType: !996, size: 32, align: 32, offset: 544)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "nmixoutchs", scope: !2559, file: !2005, line: 85, baseType: !1186, size: 128, align: 32, offset: 576)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "assets", scope: !2559, file: !2005, line: 87, baseType: !2573, size: 960, align: 32, offset: 704)
!2573 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2004, size: 960, align: 32, elements: !2574)
!2574 = !{!2575}
!2575 = !DISubrange(count: 1)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "xll", scope: !2335, file: !2334, line: 52, baseType: !1016, size: 72448, align: 256, offset: 375040)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "lbr", scope: !2335, file: !2334, line: 53, baseType: !2578, size: 178944, align: 256, offset: 447488)
!2578 = !DIDerivedType(tag: DW_TAG_typedef, name: "DCALbrDecoder", file: !2579, line: 127, baseType: !2580)
!2579 = !DIFile(filename: "libavcodec/dca_lbr.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!2580 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DCALbrDecoder", file: !2579, line: 58, size: 178944, align: 256, elements: !2581)
!2581 = !{!2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2606, !2608, !2609, !2610, !2614, !2617, !2620, !2624, !2627, !2628, !2631, !2635, !2636, !2639, !2641, !2644, !2645, !2646, !2649, !2651, !2652, !2655, !2656, !2658, !2661, !2674, !2675, !2676, !2677}
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "avctx", scope: !2580, file: !2579, line: 59, baseType: !1021, size: 64, align: 64)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "gb", scope: !2580, file: !2579, line: 60, baseType: !1746, size: 256, align: 64, offset: 64)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !2580, file: !2579, line: 62, baseType: !996, size: 32, align: 32, offset: 320)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "ch_mask", scope: !2580, file: !2579, line: 63, baseType: !996, size: 32, align: 32, offset: 352)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2580, file: !2579, line: 64, baseType: !996, size: 32, align: 32, offset: 384)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "bit_rate_orig", scope: !2580, file: !2579, line: 65, baseType: !996, size: 32, align: 32, offset: 416)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "bit_rate_scaled", scope: !2580, file: !2579, line: 66, baseType: !996, size: 32, align: 32, offset: 448)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "nchannels", scope: !2580, file: !2579, line: 68, baseType: !996, size: 32, align: 32, offset: 480)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "nchannels_total", scope: !2580, file: !2579, line: 69, baseType: !996, size: 32, align: 32, offset: 512)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "freq_range", scope: !2580, file: !2579, line: 70, baseType: !996, size: 32, align: 32, offset: 544)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "band_limit", scope: !2580, file: !2579, line: 71, baseType: !996, size: 32, align: 32, offset: 576)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "limited_rate", scope: !2580, file: !2579, line: 72, baseType: !996, size: 32, align: 32, offset: 608)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "limited_range", scope: !2580, file: !2579, line: 73, baseType: !996, size: 32, align: 32, offset: 640)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "res_profile", scope: !2580, file: !2579, line: 74, baseType: !996, size: 32, align: 32, offset: 672)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "nsubbands", scope: !2580, file: !2579, line: 75, baseType: !996, size: 32, align: 32, offset: 704)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "g3_avg_only_start_sb", scope: !2580, file: !2579, line: 76, baseType: !996, size: 32, align: 32, offset: 736)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "min_mono_subband", scope: !2580, file: !2579, line: 77, baseType: !996, size: 32, align: 32, offset: 768)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "max_mono_subband", scope: !2580, file: !2579, line: 78, baseType: !996, size: 32, align: 32, offset: 800)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "framenum", scope: !2580, file: !2579, line: 80, baseType: !996, size: 32, align: 32, offset: 832)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "lbr_rand", scope: !2580, file: !2579, line: 81, baseType: !996, size: 32, align: 32, offset: 864)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "warned", scope: !2580, file: !2579, line: 82, baseType: !996, size: 32, align: 32, offset: 896)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "quant_levels", scope: !2580, file: !2579, line: 84, baseType: !2604, size: 768, align: 8, offset: 928)
!2604 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1004, size: 768, align: 8, elements: !2605)
!2605 = !{!1831, !1861}
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "sb_indices", scope: !2580, file: !2579, line: 85, baseType: !2607, size: 256, align: 8, offset: 1696)
!2607 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1004, size: 256, align: 8, elements: !1860)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "sec_ch_sbms", scope: !2580, file: !2579, line: 87, baseType: !2604, size: 768, align: 8, offset: 1952)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "sec_ch_lrms", scope: !2580, file: !2579, line: 88, baseType: !2604, size: 768, align: 8, offset: 2720)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "ch_pres", scope: !2580, file: !2579, line: 89, baseType: !2611, size: 192, align: 32, offset: 3488)
!2611 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1003, size: 192, align: 32, elements: !2612)
!2612 = !{!2613}
!2613 = !DISubrange(count: 6)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "grid_1_scf", scope: !2580, file: !2579, line: 91, baseType: !2615, size: 4608, align: 8, offset: 3680)
!2615 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1004, size: 4608, align: 8, elements: !2616)
!2616 = !{!2613, !2421, !1178}
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "grid_2_scf", scope: !2580, file: !2579, line: 92, baseType: !2618, size: 9216, align: 8, offset: 8288)
!2618 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1004, size: 9216, align: 8, elements: !2619)
!2619 = !{!2613, !1831, !2389}
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "grid_3_avg", scope: !2580, file: !2579, line: 94, baseType: !2621, size: 1344, align: 8, offset: 17504)
!2621 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1299, size: 1344, align: 8, elements: !2622)
!2622 = !{!2613, !2623}
!2623 = !DISubrange(count: 28)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "grid_3_scf", scope: !2580, file: !2579, line: 95, baseType: !2625, size: 10752, align: 8, offset: 18848)
!2625 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1299, size: 10752, align: 8, elements: !2626)
!2626 = !{!2613, !2623, !1178}
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "grid_3_pres", scope: !2580, file: !2579, line: 96, baseType: !2611, size: 192, align: 32, offset: 29600)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "high_res_scf", scope: !2580, file: !2579, line: 98, baseType: !2629, size: 12288, align: 8, offset: 29792)
!2629 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1004, size: 12288, align: 8, elements: !2630)
!2630 = !{!2613, !1861, !1178}
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "part_stereo", scope: !2580, file: !2579, line: 100, baseType: !2632, size: 1920, align: 8, offset: 42080)
!2632 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1004, size: 1920, align: 8, elements: !2633)
!2633 = !{!2613, !1178, !2634}
!2634 = !DISubrange(count: 5)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "part_stereo_pres", scope: !2580, file: !2579, line: 101, baseType: !1004, size: 8, align: 8, offset: 44000)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "lpc_coeff", scope: !2580, file: !2579, line: 103, baseType: !2637, size: 18432, align: 32, offset: 44032)
!2637 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1505, size: 18432, align: 32, elements: !2638)
!2638 = !{!1818, !2613, !1831, !1818, !1178}
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "sb_scf", scope: !2580, file: !2579, line: 105, baseType: !2640, size: 1024, align: 32, offset: 62464)
!2640 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1505, size: 1024, align: 32, elements: !1860)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "time_samples", scope: !2580, file: !2579, line: 107, baseType: !2642, size: 12288, align: 64, offset: 63488)
!2642 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1874, size: 12288, align: 64, elements: !2643)
!2643 = !{!2613, !1861}
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "ts_buffer", scope: !2580, file: !2579, line: 109, baseType: !1874, size: 64, align: 64, offset: 75776)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "ts_size", scope: !2580, file: !2579, line: 110, baseType: !993, size: 32, align: 32, offset: 75840)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "history", scope: !2580, file: !2579, line: 112, baseType: !2647, size: 24576, align: 32, offset: 76032)
!2647 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1505, size: 24576, align: 32, elements: !2648)
!2648 = !{!2613, !1786}
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "window", scope: !2580, file: !2579, line: 113, baseType: !2650, size: 4096, align: 32, offset: 100608)
!2650 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1505, size: 4096, align: 32, elements: !1785)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "lfe_data", scope: !2580, file: !2579, line: 115, baseType: !2456, size: 2048, align: 32, offset: 104704)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "lfe_history", scope: !2580, file: !2579, line: 116, baseType: !2653, size: 320, align: 32, offset: 106752)
!2653 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1505, size: 320, align: 32, elements: !2654)
!2654 = !{!2634, !1818}
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "lfe_scale", scope: !2580, file: !2579, line: 117, baseType: !1505, size: 32, align: 32, offset: 107072)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "tonal_scf", scope: !2580, file: !2579, line: 119, baseType: !2657, size: 48, align: 8, offset: 107104)
!2657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1004, size: 48, align: 8, elements: !2612)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "tonal_bounds", scope: !2580, file: !2579, line: 120, baseType: !2659, size: 5120, align: 16, offset: 107152)
!2659 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1155, size: 5120, align: 16, elements: !2660)
!2660 = !{!2634, !1861, !1818}
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "tones", scope: !2580, file: !2579, line: 121, baseType: !2662, size: 65536, align: 8, offset: 112272)
!2662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2663, size: 65536, align: 8, elements: !2672)
!2663 = !DIDerivedType(tag: DW_TAG_typedef, name: "DCALbrTone", file: !2579, line: 56, baseType: !2664)
!2664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DCALbrTone", file: !2579, line: 49, size: 128, align: 8, elements: !2665)
!2665 = !{!2666, !2667, !2668, !2669, !2670, !2671}
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "x_freq", scope: !2664, file: !2579, line: 50, baseType: !1004, size: 8, align: 8)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "f_delt", scope: !2664, file: !2579, line: 51, baseType: !1004, size: 8, align: 8, offset: 8)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "ph_rot", scope: !2664, file: !2579, line: 52, baseType: !1004, size: 8, align: 8, offset: 16)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !2664, file: !2579, line: 53, baseType: !1004, size: 8, align: 8, offset: 24)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "amp", scope: !2664, file: !2579, line: 54, baseType: !2657, size: 48, align: 8, offset: 32)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "phs", scope: !2664, file: !2579, line: 55, baseType: !2657, size: 48, align: 8, offset: 80)
!2672 = !{!2673}
!2673 = !DISubrange(count: 512)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "ntones", scope: !2580, file: !2579, line: 122, baseType: !996, size: 32, align: 32, offset: 177824)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "imdct", scope: !2580, file: !2579, line: 124, baseType: !1896, size: 896, align: 64, offset: 177856)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "fdsp", scope: !2580, file: !2579, line: 125, baseType: !2472, size: 64, align: 64, offset: 178752)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "dcadsp", scope: !2580, file: !2579, line: 126, baseType: !1845, size: 64, align: 64, offset: 178816)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "dcadsp", scope: !2335, file: !2334, line: 55, baseType: !1846, size: 1280, align: 64, offset: 626432)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "crctab", scope: !2335, file: !2334, line: 57, baseType: !2680, size: 64, align: 64, offset: 627712)
!2680 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2681, size: 64, align: 64)
!2681 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2682)
!2682 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCRC", file: !2683, line: 47, baseType: !1003)
!2683 = !DIFile(filename: "./libavutil/crc.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !2335, file: !2334, line: 59, baseType: !1149, size: 64, align: 64, offset: 627776)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "buffer_size", scope: !2335, file: !2334, line: 60, baseType: !993, size: 32, align: 32, offset: 627840)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "packet", scope: !2335, file: !2334, line: 62, baseType: !996, size: 32, align: 32, offset: 627872)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "request_channel_layout", scope: !2335, file: !2334, line: 64, baseType: !996, size: 32, align: 32, offset: 627904)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "core_only", scope: !2335, file: !2334, line: 65, baseType: !996, size: 32, align: 32, offset: 627936)
!2689 = !DILocation(line: 1325, column: 17, scope: !2306)
!2690 = !DILocation(line: 1325, column: 23, scope: !2306)
!2691 = !DILocation(line: 1325, column: 30, scope: !2306)
!2692 = !DILocalVariable(name: "asset", scope: !2306, file: !1012, line: 1326, type: !2003)
!2693 = !DILocation(line: 1326, column: 19, scope: !2306)
!2694 = !DILocation(line: 1326, column: 28, scope: !2306)
!2695 = !DILocation(line: 1326, column: 33, scope: !2306)
!2696 = !DILocation(line: 1326, column: 38, scope: !2306)
!2697 = !DILocalVariable(name: "p", scope: !2306, file: !1012, line: 1327, type: !2698)
!2698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1769, size: 64, align: 64)
!2699 = !DILocation(line: 1327, column: 18, scope: !2306)
!2700 = !DILocation(line: 1327, column: 23, scope: !2306)
!2701 = !DILocation(line: 1327, column: 26, scope: !2306)
!2702 = !DILocalVariable(name: "c", scope: !2306, file: !1012, line: 1327, type: !2698)
!2703 = !DILocation(line: 1327, column: 37, scope: !2306)
!2704 = !DILocalVariable(name: "matrix_encoding", scope: !2306, file: !1012, line: 1328, type: !897)
!2705 = !DILocation(line: 1328, column: 27, scope: !2306)
!2706 = !DILocalVariable(name: "i", scope: !2306, file: !1012, line: 1329, type: !996)
!2707 = !DILocation(line: 1329, column: 9, scope: !2306)
!2708 = !DILocalVariable(name: "j", scope: !2306, file: !1012, line: 1329, type: !996)
!2709 = !DILocation(line: 1329, column: 12, scope: !2306)
!2710 = !DILocalVariable(name: "k", scope: !2306, file: !1012, line: 1329, type: !996)
!2711 = !DILocation(line: 1329, column: 15, scope: !2306)
!2712 = !DILocalVariable(name: "ret", scope: !2306, file: !1012, line: 1329, type: !996)
!2713 = !DILocation(line: 1329, column: 18, scope: !2306)
!2714 = !DILocalVariable(name: "shift", scope: !2306, file: !1012, line: 1329, type: !996)
!2715 = !DILocation(line: 1329, column: 23, scope: !2306)
!2716 = !DILocalVariable(name: "nsamples", scope: !2306, file: !1012, line: 1329, type: !996)
!2717 = !DILocation(line: 1329, column: 30, scope: !2306)
!2718 = !DILocalVariable(name: "request_mask", scope: !2306, file: !1012, line: 1329, type: !996)
!2719 = !DILocation(line: 1329, column: 40, scope: !2306)
!2720 = !DILocalVariable(name: "ch_remap", scope: !2306, file: !1012, line: 1330, type: !2552)
!2721 = !DILocation(line: 1330, column: 9, scope: !2306)
!2722 = !DILocation(line: 1333, column: 9, scope: !2723)
!2723 = distinct !DILexicalBlock(scope: !2306, file: !1012, line: 1333, column: 9)
!2724 = !DILocation(line: 1333, column: 14, scope: !2723)
!2725 = !DILocation(line: 1333, column: 21, scope: !2723)
!2726 = !DILocation(line: 1333, column: 9, scope: !2306)
!2727 = !DILocation(line: 1334, column: 16, scope: !2728)
!2728 = distinct !DILexicalBlock(scope: !2729, file: !1012, line: 1334, column: 9)
!2729 = distinct !DILexicalBlock(scope: !2723, file: !1012, line: 1333, column: 29)
!2730 = !DILocation(line: 1334, column: 25, scope: !2728)
!2731 = !DILocation(line: 1334, column: 28, scope: !2728)
!2732 = !DILocation(line: 1334, column: 23, scope: !2728)
!2733 = !DILocation(line: 1334, column: 14, scope: !2728)
!2734 = !DILocation(line: 1334, column: 35, scope: !2735)
!2735 = !DILexicalBlockFile(scope: !2736, file: !1012, discriminator: 1)
!2736 = distinct !DILexicalBlock(scope: !2728, file: !1012, line: 1334, column: 9)
!2737 = !DILocation(line: 1334, column: 39, scope: !2735)
!2738 = !DILocation(line: 1334, column: 42, scope: !2735)
!2739 = !DILocation(line: 1334, column: 37, scope: !2735)
!2740 = !DILocation(line: 1334, column: 9, scope: !2735)
!2741 = !DILocation(line: 1335, column: 17, scope: !2742)
!2742 = distinct !DILexicalBlock(scope: !2743, file: !1012, line: 1335, column: 17)
!2743 = distinct !DILexicalBlock(scope: !2736, file: !1012, line: 1334, column: 61)
!2744 = !DILocation(line: 1335, column: 21, scope: !2742)
!2745 = !DILocation(line: 1335, column: 24, scope: !2742)
!2746 = !DILocation(line: 1335, column: 19, scope: !2742)
!2747 = !DILocation(line: 1335, column: 17, scope: !2743)
!2748 = !DILocation(line: 1336, column: 36, scope: !2742)
!2749 = !DILocation(line: 1336, column: 39, scope: !2742)
!2750 = !DILocation(line: 1336, column: 17, scope: !2742)
!2751 = !DILocation(line: 1338, column: 18, scope: !2752)
!2752 = distinct !DILexicalBlock(scope: !2743, file: !1012, line: 1338, column: 17)
!2753 = !DILocation(line: 1338, column: 21, scope: !2752)
!2754 = !DILocation(line: 1338, column: 17, scope: !2743)
!2755 = !DILocation(line: 1339, column: 17, scope: !2752)
!2756 = !DILocation(line: 1339, column: 20, scope: !2752)
!2757 = !DILocation(line: 1339, column: 34, scope: !2752)
!2758 = !DILocation(line: 1340, column: 9, scope: !2743)
!2759 = !DILocation(line: 1334, column: 52, scope: !2760)
!2760 = !DILexicalBlockFile(scope: !2736, file: !1012, discriminator: 2)
!2761 = !DILocation(line: 1334, column: 57, scope: !2760)
!2762 = !DILocation(line: 1334, column: 9, scope: !2760)
!2763 = distinct !{!2763, !2764}
!2764 = !DILocation(line: 1334, column: 9, scope: !2729)
!2765 = !DILocation(line: 1342, column: 9, scope: !2729)
!2766 = !DILocation(line: 1342, column: 12, scope: !2729)
!2767 = !DILocation(line: 1342, column: 26, scope: !2729)
!2768 = !DILocation(line: 1343, column: 9, scope: !2729)
!2769 = !DILocation(line: 1343, column: 12, scope: !2729)
!2770 = !DILocation(line: 1343, column: 28, scope: !2729)
!2771 = !DILocation(line: 1344, column: 5, scope: !2729)
!2772 = !DILocation(line: 1347, column: 5, scope: !2306)
!2773 = !DILocation(line: 1347, column: 8, scope: !2306)
!2774 = !DILocation(line: 1347, column: 20, scope: !2306)
!2775 = !DILocation(line: 1348, column: 12, scope: !2776)
!2776 = distinct !DILexicalBlock(scope: !2306, file: !1012, line: 1348, column: 5)
!2777 = !DILocation(line: 1348, column: 21, scope: !2776)
!2778 = !DILocation(line: 1348, column: 24, scope: !2776)
!2779 = !DILocation(line: 1348, column: 19, scope: !2776)
!2780 = !DILocation(line: 1348, column: 10, scope: !2776)
!2781 = !DILocation(line: 1348, column: 31, scope: !2782)
!2782 = !DILexicalBlockFile(scope: !2783, file: !1012, discriminator: 1)
!2783 = distinct !DILexicalBlock(scope: !2776, file: !1012, line: 1348, column: 5)
!2784 = !DILocation(line: 1348, column: 35, scope: !2782)
!2785 = !DILocation(line: 1348, column: 38, scope: !2782)
!2786 = !DILocation(line: 1348, column: 33, scope: !2782)
!2787 = !DILocation(line: 1348, column: 5, scope: !2782)
!2788 = !DILocation(line: 1349, column: 30, scope: !2789)
!2789 = distinct !DILexicalBlock(scope: !2783, file: !1012, line: 1348, column: 63)
!2790 = !DILocation(line: 1349, column: 33, scope: !2789)
!2791 = !DILocation(line: 1349, column: 9, scope: !2789)
!2792 = !DILocation(line: 1351, column: 13, scope: !2793)
!2793 = distinct !DILexicalBlock(scope: !2789, file: !1012, line: 1351, column: 13)
!2794 = !DILocation(line: 1351, column: 16, scope: !2793)
!2795 = !DILocation(line: 1351, column: 41, scope: !2793)
!2796 = !DILocation(line: 1351, column: 44, scope: !2793)
!2797 = !DILocation(line: 1351, column: 38, scope: !2793)
!2798 = !DILocation(line: 1351, column: 55, scope: !2793)
!2799 = !DILocation(line: 1351, column: 32, scope: !2793)
!2800 = !DILocation(line: 1352, column: 13, scope: !2793)
!2801 = !DILocation(line: 1352, column: 46, scope: !2802)
!2802 = !DILexicalBlockFile(scope: !2793, file: !1012, discriminator: 1)
!2803 = !DILocation(line: 1352, column: 49, scope: !2802)
!2804 = !DILocation(line: 1352, column: 23, scope: !2802)
!2805 = !DILocation(line: 1352, column: 21, scope: !2802)
!2806 = !DILocation(line: 1352, column: 53, scope: !2802)
!2807 = !DILocation(line: 1351, column: 13, scope: !2808)
!2808 = !DILexicalBlockFile(scope: !2789, file: !1012, discriminator: 1)
!2809 = !DILocation(line: 1353, column: 20, scope: !2793)
!2810 = !DILocation(line: 1353, column: 13, scope: !2793)
!2811 = !DILocation(line: 1355, column: 13, scope: !2812)
!2812 = distinct !DILexicalBlock(scope: !2789, file: !1012, line: 1355, column: 13)
!2813 = !DILocation(line: 1355, column: 16, scope: !2812)
!2814 = !DILocation(line: 1355, column: 13, scope: !2789)
!2815 = !DILocation(line: 1356, column: 36, scope: !2812)
!2816 = !DILocation(line: 1356, column: 39, scope: !2812)
!2817 = !DILocation(line: 1356, column: 13, scope: !2812)
!2818 = !DILocation(line: 1358, column: 13, scope: !2819)
!2819 = distinct !DILexicalBlock(scope: !2789, file: !1012, line: 1358, column: 13)
!2820 = !DILocation(line: 1358, column: 16, scope: !2819)
!2821 = !DILocation(line: 1358, column: 27, scope: !2819)
!2822 = !DILocation(line: 1358, column: 13, scope: !2789)
!2823 = !DILocation(line: 1359, column: 34, scope: !2824)
!2824 = distinct !DILexicalBlock(scope: !2819, file: !1012, line: 1358, column: 32)
!2825 = !DILocation(line: 1359, column: 37, scope: !2824)
!2826 = !DILocation(line: 1359, column: 13, scope: !2824)
!2827 = !DILocation(line: 1360, column: 36, scope: !2824)
!2828 = !DILocation(line: 1360, column: 39, scope: !2824)
!2829 = !DILocation(line: 1360, column: 13, scope: !2824)
!2830 = !DILocation(line: 1361, column: 9, scope: !2824)
!2831 = !DILocation(line: 1363, column: 27, scope: !2789)
!2832 = !DILocation(line: 1363, column: 30, scope: !2789)
!2833 = !DILocation(line: 1363, column: 9, scope: !2789)
!2834 = !DILocation(line: 1363, column: 12, scope: !2789)
!2835 = !DILocation(line: 1363, column: 24, scope: !2789)
!2836 = !DILocation(line: 1364, column: 5, scope: !2789)
!2837 = !DILocation(line: 1348, column: 54, scope: !2838)
!2838 = !DILexicalBlockFile(scope: !2783, file: !1012, discriminator: 2)
!2839 = !DILocation(line: 1348, column: 59, scope: !2838)
!2840 = !DILocation(line: 1348, column: 5, scope: !2838)
!2841 = distinct !{!2841, !2842}
!2842 = !DILocation(line: 1348, column: 5, scope: !2306)
!2843 = !DILocation(line: 1367, column: 12, scope: !2844)
!2844 = distinct !DILexicalBlock(scope: !2306, file: !1012, line: 1367, column: 5)
!2845 = !DILocation(line: 1367, column: 22, scope: !2844)
!2846 = !DILocation(line: 1367, column: 25, scope: !2844)
!2847 = !DILocation(line: 1367, column: 19, scope: !2844)
!2848 = !DILocation(line: 1367, column: 10, scope: !2844)
!2849 = !DILocation(line: 1367, column: 35, scope: !2850)
!2850 = !DILexicalBlockFile(scope: !2851, file: !1012, discriminator: 1)
!2851 = distinct !DILexicalBlock(scope: !2844, file: !1012, line: 1367, column: 5)
!2852 = !DILocation(line: 1367, column: 39, scope: !2850)
!2853 = !DILocation(line: 1367, column: 42, scope: !2850)
!2854 = !DILocation(line: 1367, column: 37, scope: !2850)
!2855 = !DILocation(line: 1367, column: 5, scope: !2850)
!2856 = !DILocation(line: 1368, column: 33, scope: !2857)
!2857 = distinct !DILexicalBlock(scope: !2858, file: !1012, line: 1368, column: 13)
!2858 = distinct !DILexicalBlock(scope: !2851, file: !1012, line: 1367, column: 61)
!2859 = !DILocation(line: 1368, column: 14, scope: !2857)
!2860 = !DILocation(line: 1368, column: 13, scope: !2858)
!2861 = !DILocation(line: 1369, column: 13, scope: !2857)
!2862 = !DILocation(line: 1371, column: 13, scope: !2863)
!2863 = distinct !DILexicalBlock(scope: !2858, file: !1012, line: 1371, column: 13)
!2864 = !DILocation(line: 1371, column: 18, scope: !2863)
!2865 = !DILocation(line: 1371, column: 21, scope: !2863)
!2866 = !DILocation(line: 1371, column: 15, scope: !2863)
!2867 = !DILocation(line: 1371, column: 13, scope: !2858)
!2868 = !DILocation(line: 1372, column: 20, scope: !2869)
!2869 = distinct !DILexicalBlock(scope: !2870, file: !1012, line: 1372, column: 13)
!2870 = distinct !DILexicalBlock(scope: !2863, file: !1012, line: 1371, column: 36)
!2871 = !DILocation(line: 1372, column: 18, scope: !2869)
!2872 = !DILocation(line: 1372, column: 25, scope: !2873)
!2873 = !DILexicalBlockFile(scope: !2874, file: !1012, discriminator: 1)
!2874 = distinct !DILexicalBlock(scope: !2869, file: !1012, line: 1372, column: 13)
!2875 = !DILocation(line: 1372, column: 29, scope: !2873)
!2876 = !DILocation(line: 1372, column: 32, scope: !2873)
!2877 = !DILocation(line: 1372, column: 27, scope: !2873)
!2878 = !DILocation(line: 1372, column: 13, scope: !2873)
!2879 = !DILocation(line: 1373, column: 30, scope: !2880)
!2880 = distinct !DILexicalBlock(scope: !2874, file: !1012, line: 1373, column: 21)
!2881 = !DILocation(line: 1373, column: 21, scope: !2880)
!2882 = !DILocation(line: 1373, column: 24, scope: !2880)
!2883 = !DILocation(line: 1373, column: 33, scope: !2880)
!2884 = !DILocation(line: 1373, column: 21, scope: !2874)
!2885 = !DILocation(line: 1374, column: 36, scope: !2880)
!2886 = !DILocation(line: 1374, column: 39, scope: !2880)
!2887 = !DILocation(line: 1374, column: 42, scope: !2880)
!2888 = !DILocation(line: 1374, column: 21, scope: !2880)
!2889 = !DILocation(line: 1373, column: 33, scope: !2890)
!2890 = !DILexicalBlockFile(scope: !2880, file: !1012, discriminator: 1)
!2891 = !DILocation(line: 1372, column: 45, scope: !2892)
!2892 = !DILexicalBlockFile(scope: !2874, file: !1012, discriminator: 2)
!2893 = !DILocation(line: 1372, column: 13, scope: !2892)
!2894 = distinct !{!2894, !2895}
!2895 = !DILocation(line: 1372, column: 13, scope: !2870)
!2896 = !DILocation(line: 1375, column: 13, scope: !2870)
!2897 = !DILocation(line: 1378, column: 16, scope: !2898)
!2898 = distinct !DILexicalBlock(scope: !2858, file: !1012, line: 1378, column: 9)
!2899 = !DILocation(line: 1378, column: 14, scope: !2898)
!2900 = !DILocation(line: 1378, column: 21, scope: !2901)
!2901 = !DILexicalBlockFile(scope: !2902, file: !1012, discriminator: 1)
!2902 = distinct !DILexicalBlock(scope: !2898, file: !1012, line: 1378, column: 9)
!2903 = !DILocation(line: 1378, column: 25, scope: !2901)
!2904 = !DILocation(line: 1378, column: 28, scope: !2901)
!2905 = !DILocation(line: 1378, column: 23, scope: !2901)
!2906 = !DILocation(line: 1378, column: 9, scope: !2901)
!2907 = !DILocation(line: 1379, column: 26, scope: !2908)
!2908 = distinct !DILexicalBlock(scope: !2902, file: !1012, line: 1379, column: 17)
!2909 = !DILocation(line: 1379, column: 17, scope: !2908)
!2910 = !DILocation(line: 1379, column: 20, scope: !2908)
!2911 = !DILocation(line: 1379, column: 29, scope: !2908)
!2912 = !DILocation(line: 1379, column: 17, scope: !2902)
!2913 = !DILocation(line: 1380, column: 31, scope: !2908)
!2914 = !DILocation(line: 1380, column: 34, scope: !2908)
!2915 = !DILocation(line: 1380, column: 37, scope: !2908)
!2916 = !DILocation(line: 1380, column: 17, scope: !2908)
!2917 = !DILocation(line: 1379, column: 29, scope: !2918)
!2918 = !DILexicalBlockFile(scope: !2908, file: !1012, discriminator: 1)
!2919 = !DILocation(line: 1378, column: 41, scope: !2920)
!2920 = !DILexicalBlockFile(scope: !2902, file: !1012, discriminator: 2)
!2921 = !DILocation(line: 1378, column: 9, scope: !2920)
!2922 = distinct !{!2922, !2923}
!2923 = !DILocation(line: 1378, column: 9, scope: !2858)
!2924 = !DILocation(line: 1381, column: 5, scope: !2858)
!2925 = !DILocation(line: 1367, column: 52, scope: !2926)
!2926 = !DILexicalBlockFile(scope: !2851, file: !1012, discriminator: 2)
!2927 = !DILocation(line: 1367, column: 57, scope: !2926)
!2928 = !DILocation(line: 1367, column: 5, scope: !2926)
!2929 = distinct !{!2929, !2930}
!2930 = !DILocation(line: 1367, column: 5, scope: !2306)
!2931 = !DILocation(line: 1384, column: 9, scope: !2932)
!2932 = distinct !DILexicalBlock(scope: !2306, file: !1012, line: 1384, column: 9)
!2933 = !DILocation(line: 1384, column: 12, scope: !2932)
!2934 = !DILocation(line: 1384, column: 23, scope: !2932)
!2935 = !DILocation(line: 1384, column: 9, scope: !2306)
!2936 = !DILocation(line: 1385, column: 16, scope: !2937)
!2937 = distinct !DILexicalBlock(scope: !2938, file: !1012, line: 1385, column: 9)
!2938 = distinct !DILexicalBlock(scope: !2932, file: !1012, line: 1384, column: 28)
!2939 = !DILocation(line: 1385, column: 14, scope: !2937)
!2940 = !DILocation(line: 1385, column: 21, scope: !2941)
!2941 = !DILexicalBlockFile(scope: !2942, file: !1012, discriminator: 1)
!2942 = distinct !DILexicalBlock(scope: !2937, file: !1012, line: 1385, column: 9)
!2943 = !DILocation(line: 1385, column: 25, scope: !2941)
!2944 = !DILocation(line: 1385, column: 28, scope: !2941)
!2945 = !DILocation(line: 1385, column: 23, scope: !2941)
!2946 = !DILocation(line: 1385, column: 9, scope: !2941)
!2947 = !DILocation(line: 1386, column: 48, scope: !2948)
!2948 = distinct !DILexicalBlock(scope: !2942, file: !1012, line: 1386, column: 17)
!2949 = !DILocation(line: 1386, column: 61, scope: !2948)
!2950 = !DILocation(line: 1386, column: 52, scope: !2948)
!2951 = !DILocation(line: 1386, column: 55, scope: !2948)
!2952 = !DILocation(line: 1386, column: 24, scope: !2948)
!2953 = !DILocation(line: 1386, column: 22, scope: !2948)
!2954 = !DILocation(line: 1386, column: 66, scope: !2948)
!2955 = !DILocation(line: 1386, column: 17, scope: !2942)
!2956 = !DILocation(line: 1387, column: 24, scope: !2948)
!2957 = !DILocation(line: 1387, column: 17, scope: !2948)
!2958 = !DILocation(line: 1386, column: 68, scope: !2959)
!2959 = !DILexicalBlockFile(scope: !2948, file: !1012, discriminator: 1)
!2960 = !DILocation(line: 1385, column: 44, scope: !2961)
!2961 = !DILexicalBlockFile(scope: !2942, file: !1012, discriminator: 2)
!2962 = !DILocation(line: 1385, column: 9, scope: !2961)
!2963 = distinct !{!2963, !2964}
!2964 = !DILocation(line: 1385, column: 9, scope: !2938)
!2965 = !DILocation(line: 1388, column: 5, scope: !2938)
!2966 = !DILocation(line: 1391, column: 9, scope: !2967)
!2967 = distinct !DILexicalBlock(scope: !2306, file: !1012, line: 1391, column: 9)
!2968 = !DILocation(line: 1391, column: 14, scope: !2967)
!2969 = !DILocation(line: 1391, column: 9, scope: !2306)
!2970 = !DILocation(line: 1392, column: 13, scope: !2971)
!2971 = distinct !DILexicalBlock(scope: !2972, file: !1012, line: 1392, column: 13)
!2972 = distinct !DILexicalBlock(scope: !2967, file: !1012, line: 1391, column: 38)
!2973 = !DILocation(line: 1392, column: 16, scope: !2971)
!2974 = !DILocation(line: 1392, column: 28, scope: !2971)
!2975 = !DILocation(line: 1392, column: 13, scope: !2972)
!2976 = !DILocation(line: 1393, column: 49, scope: !2977)
!2977 = distinct !DILexicalBlock(scope: !2971, file: !1012, line: 1392, column: 52)
!2978 = !DILocation(line: 1393, column: 52, scope: !2977)
!2979 = !DILocation(line: 1393, column: 13, scope: !2977)
!2980 = !DILocation(line: 1393, column: 16, scope: !2977)
!2981 = !DILocation(line: 1393, column: 47, scope: !2977)
!2982 = !DILocation(line: 1394, column: 31, scope: !2977)
!2983 = !DILocation(line: 1394, column: 34, scope: !2977)
!2984 = !DILocation(line: 1394, column: 46, scope: !2977)
!2985 = !DILocation(line: 1394, column: 71, scope: !2977)
!2986 = !DILocation(line: 1394, column: 13, scope: !2977)
!2987 = !DILocation(line: 1394, column: 16, scope: !2977)
!2988 = !DILocation(line: 1394, column: 28, scope: !2977)
!2989 = !DILocation(line: 1395, column: 9, scope: !2977)
!2990 = !DILocation(line: 1396, column: 13, scope: !2991)
!2991 = distinct !DILexicalBlock(scope: !2972, file: !1012, line: 1396, column: 13)
!2992 = !DILocation(line: 1396, column: 16, scope: !2991)
!2993 = !DILocation(line: 1396, column: 28, scope: !2991)
!2994 = !DILocation(line: 1396, column: 13, scope: !2972)
!2995 = !DILocation(line: 1397, column: 49, scope: !2996)
!2996 = distinct !DILexicalBlock(scope: !2991, file: !1012, line: 1396, column: 52)
!2997 = !DILocation(line: 1397, column: 52, scope: !2996)
!2998 = !DILocation(line: 1397, column: 13, scope: !2996)
!2999 = !DILocation(line: 1397, column: 16, scope: !2996)
!3000 = !DILocation(line: 1397, column: 47, scope: !2996)
!3001 = !DILocation(line: 1398, column: 31, scope: !2996)
!3002 = !DILocation(line: 1398, column: 34, scope: !2996)
!3003 = !DILocation(line: 1398, column: 46, scope: !2996)
!3004 = !DILocation(line: 1398, column: 71, scope: !2996)
!3005 = !DILocation(line: 1398, column: 13, scope: !2996)
!3006 = !DILocation(line: 1398, column: 16, scope: !2996)
!3007 = !DILocation(line: 1398, column: 28, scope: !2996)
!3008 = !DILocation(line: 1399, column: 9, scope: !2996)
!3009 = !DILocation(line: 1400, column: 5, scope: !2972)
!3010 = !DILocation(line: 1403, column: 9, scope: !3011)
!3011 = distinct !DILexicalBlock(scope: !2306, file: !1012, line: 1403, column: 9)
!3012 = !DILocation(line: 1403, column: 14, scope: !3011)
!3013 = !DILocation(line: 1403, column: 37, scope: !3011)
!3014 = !DILocation(line: 1404, column: 9, scope: !3011)
!3015 = !DILocation(line: 1404, column: 14, scope: !3016)
!3016 = !DILexicalBlockFile(scope: !3011, file: !1012, discriminator: 1)
!3017 = !DILocation(line: 1404, column: 17, scope: !3016)
!3018 = !DILocation(line: 1404, column: 29, scope: !3016)
!3019 = !DILocation(line: 1404, column: 74, scope: !3016)
!3020 = !DILocation(line: 1404, column: 120, scope: !3016)
!3021 = !DILocation(line: 1404, column: 123, scope: !3022)
!3022 = !DILexicalBlockFile(scope: !3011, file: !1012, discriminator: 2)
!3023 = !DILocation(line: 1404, column: 126, scope: !3022)
!3024 = !DILocation(line: 1405, column: 9, scope: !3011)
!3025 = !DILocation(line: 1405, column: 13, scope: !3016)
!3026 = !DILocation(line: 1405, column: 16, scope: !3016)
!3027 = !DILocation(line: 1405, column: 26, scope: !3016)
!3028 = !DILocation(line: 1405, column: 48, scope: !3016)
!3029 = !DILocation(line: 1406, column: 13, scope: !3011)
!3030 = !DILocation(line: 1406, column: 16, scope: !3011)
!3031 = !DILocation(line: 1406, column: 26, scope: !3011)
!3032 = !DILocation(line: 1403, column: 9, scope: !3033)
!3033 = !DILexicalBlockFile(scope: !2306, file: !1012, discriminator: 1)
!3034 = !DILocation(line: 1407, column: 22, scope: !3011)
!3035 = !DILocation(line: 1407, column: 9, scope: !3011)
!3036 = !DILocation(line: 1409, column: 24, scope: !3011)
!3037 = !DILocation(line: 1409, column: 27, scope: !3011)
!3038 = !DILocation(line: 1409, column: 22, scope: !3011)
!3039 = !DILocation(line: 1410, column: 36, scope: !3040)
!3040 = distinct !DILexicalBlock(scope: !2306, file: !1012, line: 1410, column: 9)
!3041 = !DILocation(line: 1410, column: 43, scope: !3040)
!3042 = !DILocation(line: 1410, column: 53, scope: !3040)
!3043 = !DILocation(line: 1410, column: 10, scope: !3040)
!3044 = !DILocation(line: 1410, column: 9, scope: !2306)
!3045 = !DILocation(line: 1411, column: 9, scope: !3040)
!3046 = !DILocation(line: 1413, column: 26, scope: !2306)
!3047 = !DILocation(line: 1413, column: 29, scope: !2306)
!3048 = !DILocation(line: 1413, column: 38, scope: !2306)
!3049 = !DILocation(line: 1413, column: 41, scope: !2306)
!3050 = !DILocation(line: 1413, column: 52, scope: !2306)
!3051 = !DILocation(line: 1413, column: 34, scope: !2306)
!3052 = !DILocation(line: 1413, column: 5, scope: !2306)
!3053 = !DILocation(line: 1413, column: 12, scope: !2306)
!3054 = !DILocation(line: 1413, column: 24, scope: !2306)
!3055 = !DILocation(line: 1415, column: 13, scope: !2306)
!3056 = !DILocation(line: 1415, column: 16, scope: !2306)
!3057 = !DILocation(line: 1415, column: 5, scope: !2306)
!3058 = !DILocation(line: 1417, column: 9, scope: !3059)
!3059 = distinct !DILexicalBlock(scope: !2306, file: !1012, line: 1415, column: 33)
!3060 = !DILocation(line: 1417, column: 16, scope: !3059)
!3061 = !DILocation(line: 1417, column: 27, scope: !3059)
!3062 = !DILocation(line: 1418, column: 22, scope: !3059)
!3063 = !DILocation(line: 1418, column: 25, scope: !3059)
!3064 = !DILocation(line: 1418, column: 20, scope: !3059)
!3065 = !DILocation(line: 1418, column: 15, scope: !3059)
!3066 = !DILocation(line: 1419, column: 9, scope: !3059)
!3067 = !DILocation(line: 1422, column: 9, scope: !3059)
!3068 = !DILocation(line: 1422, column: 16, scope: !3059)
!3069 = !DILocation(line: 1422, column: 27, scope: !3059)
!3070 = !DILocation(line: 1423, column: 22, scope: !3059)
!3071 = !DILocation(line: 1423, column: 25, scope: !3059)
!3072 = !DILocation(line: 1423, column: 20, scope: !3059)
!3073 = !DILocation(line: 1423, column: 15, scope: !3059)
!3074 = !DILocation(line: 1424, column: 9, scope: !3059)
!3075 = !DILocation(line: 1426, column: 9, scope: !3059)
!3076 = !DILocation(line: 1429, column: 34, scope: !2306)
!3077 = !DILocation(line: 1429, column: 37, scope: !2306)
!3078 = !DILocation(line: 1429, column: 5, scope: !2306)
!3079 = !DILocation(line: 1429, column: 12, scope: !2306)
!3080 = !DILocation(line: 1429, column: 32, scope: !2306)
!3081 = !DILocation(line: 1430, column: 5, scope: !2306)
!3082 = !DILocation(line: 1430, column: 12, scope: !2306)
!3083 = !DILocation(line: 1430, column: 20, scope: !2306)
!3084 = !DILocation(line: 1431, column: 5, scope: !2306)
!3085 = !DILocation(line: 1431, column: 12, scope: !2306)
!3086 = !DILocation(line: 1431, column: 21, scope: !2306)
!3087 = !DILocation(line: 1433, column: 36, scope: !2306)
!3088 = !DILocation(line: 1433, column: 39, scope: !2306)
!3089 = !DILocation(line: 1433, column: 57, scope: !2306)
!3090 = !DILocation(line: 1433, column: 60, scope: !2306)
!3091 = !DILocation(line: 1433, column: 71, scope: !2306)
!3092 = !DILocation(line: 1433, column: 53, scope: !2306)
!3093 = !DILocation(line: 1433, column: 34, scope: !2306)
!3094 = !DILocation(line: 1433, column: 5, scope: !2306)
!3095 = !DILocation(line: 1433, column: 12, scope: !2306)
!3096 = !DILocation(line: 1433, column: 23, scope: !2306)
!3097 = !DILocation(line: 1434, column: 30, scope: !3098)
!3098 = distinct !DILexicalBlock(scope: !2306, file: !1012, line: 1434, column: 9)
!3099 = !DILocation(line: 1434, column: 37, scope: !3098)
!3100 = !DILocation(line: 1434, column: 16, scope: !3098)
!3101 = !DILocation(line: 1434, column: 14, scope: !3098)
!3102 = !DILocation(line: 1434, column: 48, scope: !3098)
!3103 = !DILocation(line: 1434, column: 9, scope: !2306)
!3104 = !DILocation(line: 1435, column: 16, scope: !3098)
!3105 = !DILocation(line: 1435, column: 9, scope: !3098)
!3106 = !DILocation(line: 1438, column: 9, scope: !3107)
!3107 = distinct !DILexicalBlock(scope: !2306, file: !1012, line: 1438, column: 9)
!3108 = !DILocation(line: 1438, column: 25, scope: !3107)
!3109 = !DILocation(line: 1438, column: 28, scope: !3107)
!3110 = !DILocation(line: 1438, column: 22, scope: !3107)
!3111 = !DILocation(line: 1438, column: 9, scope: !2306)
!3112 = !DILocation(line: 1439, column: 40, scope: !3113)
!3113 = distinct !DILexicalBlock(scope: !3107, file: !1012, line: 1438, column: 41)
!3114 = !DILocation(line: 1439, column: 43, scope: !3113)
!3115 = !DILocation(line: 1439, column: 51, scope: !3113)
!3116 = !DILocation(line: 1439, column: 54, scope: !3113)
!3117 = !DILocation(line: 1440, column: 40, scope: !3113)
!3118 = !DILocation(line: 1440, column: 43, scope: !3113)
!3119 = !DILocation(line: 1440, column: 55, scope: !3113)
!3120 = !DILocation(line: 1441, column: 40, scope: !3113)
!3121 = !DILocation(line: 1441, column: 43, scope: !3113)
!3122 = !DILocation(line: 1439, column: 9, scope: !3113)
!3123 = !DILocation(line: 1442, column: 5, scope: !3113)
!3124 = !DILocation(line: 1444, column: 12, scope: !2322)
!3125 = !DILocation(line: 1444, column: 10, scope: !2322)
!3126 = !DILocation(line: 1444, column: 17, scope: !3127)
!3127 = !DILexicalBlockFile(scope: !2321, file: !1012, discriminator: 1)
!3128 = !DILocation(line: 1444, column: 21, scope: !3127)
!3129 = !DILocation(line: 1444, column: 28, scope: !3127)
!3130 = !DILocation(line: 1444, column: 19, scope: !3127)
!3131 = !DILocation(line: 1444, column: 5, scope: !3127)
!3132 = !DILocalVariable(name: "samples", scope: !2320, file: !1012, line: 1445, type: !994)
!3133 = !DILocation(line: 1445, column: 18, scope: !2320)
!3134 = !DILocation(line: 1445, column: 55, scope: !2320)
!3135 = !DILocation(line: 1445, column: 46, scope: !2320)
!3136 = !DILocation(line: 1445, column: 28, scope: !2320)
!3137 = !DILocation(line: 1445, column: 31, scope: !2320)
!3138 = !DILocation(line: 1446, column: 13, scope: !2319)
!3139 = !DILocation(line: 1446, column: 20, scope: !2319)
!3140 = !DILocation(line: 1446, column: 27, scope: !2319)
!3141 = !DILocation(line: 1446, column: 13, scope: !2320)
!3142 = !DILocalVariable(name: "plane", scope: !2318, file: !1012, line: 1447, type: !989)
!3143 = !DILocation(line: 1447, column: 22, scope: !2318)
!3144 = !DILocation(line: 1447, column: 62, scope: !2318)
!3145 = !DILocation(line: 1447, column: 41, scope: !2318)
!3146 = !DILocation(line: 1447, column: 48, scope: !2318)
!3147 = !DILocation(line: 1447, column: 30, scope: !2318)
!3148 = !DILocation(line: 1448, column: 20, scope: !2317)
!3149 = !DILocation(line: 1448, column: 18, scope: !2317)
!3150 = !DILocation(line: 1448, column: 25, scope: !3151)
!3151 = !DILexicalBlockFile(scope: !2316, file: !1012, discriminator: 1)
!3152 = !DILocation(line: 1448, column: 29, scope: !3151)
!3153 = !DILocation(line: 1448, column: 27, scope: !3151)
!3154 = !DILocation(line: 1448, column: 13, scope: !3151)
!3155 = !DILocation(line: 1449, column: 52, scope: !2316)
!3156 = !DILocation(line: 1449, column: 44, scope: !2316)
!3157 = !DILocation(line: 1449, column: 73, scope: !2316)
!3158 = !DILocation(line: 1449, column: 70, scope: !2316)
!3159 = !DILocation(line: 1449, column: 55, scope: !2316)
!3160 = !DILocation(line: 1449, column: 28, scope: !2316)
!3161 = !DILocation(line: 194, column: 10, scope: !3162, inlinedAt: !2315)
!3162 = distinct !DILexicalBlock(scope: !2310, file: !2311, line: 194, column: 9)
!3163 = !DILocation(line: 194, column: 11, scope: !3162, inlinedAt: !2315)
!3164 = !DILocation(line: 194, column: 21, scope: !3162, inlinedAt: !2315)
!3165 = !DILocation(line: 194, column: 9, scope: !2310, inlinedAt: !2315)
!3166 = !DILocation(line: 194, column: 40, scope: !3167, inlinedAt: !2315)
!3167 = !DILexicalBlockFile(scope: !3162, file: !2311, discriminator: 1)
!3168 = !DILocation(line: 194, column: 41, scope: !3167, inlinedAt: !2315)
!3169 = !DILocation(line: 194, column: 47, scope: !3167, inlinedAt: !2315)
!3170 = !DILocation(line: 194, column: 39, scope: !3167, inlinedAt: !2315)
!3171 = !DILocation(line: 194, column: 32, scope: !3167, inlinedAt: !2315)
!3172 = !DILocation(line: 195, column: 17, scope: !3162, inlinedAt: !2315)
!3173 = !DILocation(line: 195, column: 10, scope: !3162, inlinedAt: !2315)
!3174 = !DILocation(line: 196, column: 1, scope: !2310, inlinedAt: !2315)
!3175 = !DILocation(line: 1449, column: 23, scope: !2316)
!3176 = !DILocation(line: 1449, column: 17, scope: !2316)
!3177 = !DILocation(line: 1449, column: 26, scope: !2316)
!3178 = !DILocation(line: 1448, column: 40, scope: !3179)
!3179 = !DILexicalBlockFile(scope: !2316, file: !1012, discriminator: 2)
!3180 = !DILocation(line: 1448, column: 13, scope: !3179)
!3181 = distinct !{!3181, !3182}
!3182 = !DILocation(line: 1448, column: 13, scope: !2318)
!3183 = !DILocation(line: 1450, column: 9, scope: !2318)
!3184 = !DILocalVariable(name: "plane", scope: !3185, file: !1012, line: 1451, type: !994)
!3185 = distinct !DILexicalBlock(scope: !2319, file: !1012, line: 1450, column: 16)
!3186 = !DILocation(line: 1451, column: 22, scope: !3185)
!3187 = !DILocation(line: 1451, column: 62, scope: !3185)
!3188 = !DILocation(line: 1451, column: 41, scope: !3185)
!3189 = !DILocation(line: 1451, column: 48, scope: !3185)
!3190 = !DILocation(line: 1451, column: 30, scope: !3185)
!3191 = !DILocation(line: 1452, column: 20, scope: !3192)
!3192 = distinct !DILexicalBlock(scope: !3185, file: !1012, line: 1452, column: 13)
!3193 = !DILocation(line: 1452, column: 18, scope: !3192)
!3194 = !DILocation(line: 1452, column: 25, scope: !3195)
!3195 = !DILexicalBlockFile(scope: !3196, file: !1012, discriminator: 1)
!3196 = distinct !DILexicalBlock(scope: !3192, file: !1012, line: 1452, column: 13)
!3197 = !DILocation(line: 1452, column: 29, scope: !3195)
!3198 = !DILocation(line: 1452, column: 27, scope: !3195)
!3199 = !DILocation(line: 1452, column: 13, scope: !3195)
!3200 = !DILocation(line: 1453, column: 43, scope: !3196)
!3201 = !DILocation(line: 1453, column: 35, scope: !3196)
!3202 = !DILocation(line: 1453, column: 64, scope: !3196)
!3203 = !DILocation(line: 1453, column: 61, scope: !3196)
!3204 = !DILocation(line: 1453, column: 46, scope: !3196)
!3205 = !DILocation(line: 1453, column: 28, scope: !3196)
!3206 = !DILocation(line: 1453, column: 72, scope: !3196)
!3207 = !DILocation(line: 1453, column: 23, scope: !3196)
!3208 = !DILocation(line: 1453, column: 17, scope: !3196)
!3209 = !DILocation(line: 1453, column: 26, scope: !3196)
!3210 = !DILocation(line: 1452, column: 40, scope: !3211)
!3211 = !DILexicalBlockFile(scope: !3196, file: !1012, discriminator: 2)
!3212 = !DILocation(line: 1452, column: 13, scope: !3211)
!3213 = distinct !{!3213, !3214}
!3214 = !DILocation(line: 1452, column: 13, scope: !3185)
!3215 = !DILocation(line: 1455, column: 5, scope: !2320)
!3216 = !DILocation(line: 1444, column: 39, scope: !3217)
!3217 = !DILexicalBlockFile(scope: !2321, file: !1012, discriminator: 2)
!3218 = !DILocation(line: 1444, column: 5, scope: !3217)
!3219 = distinct !{!3219, !3220}
!3220 = !DILocation(line: 1444, column: 5, scope: !2306)
!3221 = !DILocation(line: 1457, column: 10, scope: !3222)
!3222 = distinct !DILexicalBlock(scope: !2306, file: !1012, line: 1457, column: 9)
!3223 = !DILocation(line: 1457, column: 17, scope: !3222)
!3224 = !DILocation(line: 1457, column: 9, scope: !2306)
!3225 = !DILocation(line: 1458, column: 13, scope: !3226)
!3226 = distinct !DILexicalBlock(scope: !3227, file: !1012, line: 1458, column: 13)
!3227 = distinct !DILexicalBlock(scope: !3222, file: !1012, line: 1457, column: 44)
!3228 = !DILocation(line: 1458, column: 20, scope: !3226)
!3229 = !DILocation(line: 1458, column: 40, scope: !3226)
!3230 = !DILocation(line: 1458, column: 13, scope: !3227)
!3231 = !DILocation(line: 1459, column: 29, scope: !3226)
!3232 = !DILocation(line: 1459, column: 13, scope: !3226)
!3233 = !DILocation(line: 1460, column: 18, scope: !3234)
!3234 = distinct !DILexicalBlock(scope: !3226, file: !1012, line: 1460, column: 18)
!3235 = !DILocation(line: 1460, column: 25, scope: !3234)
!3236 = !DILocation(line: 1460, column: 45, scope: !3234)
!3237 = !DILocation(line: 1460, column: 18, scope: !3226)
!3238 = !DILocation(line: 1461, column: 29, scope: !3234)
!3239 = !DILocation(line: 1461, column: 13, scope: !3234)
!3240 = !DILocation(line: 1462, column: 5, scope: !3227)
!3241 = !DILocation(line: 1462, column: 16, scope: !3242)
!3242 = !DILexicalBlockFile(scope: !3243, file: !1012, discriminator: 1)
!3243 = distinct !DILexicalBlock(scope: !3222, file: !1012, line: 1462, column: 16)
!3244 = !DILocation(line: 1462, column: 32, scope: !3242)
!3245 = !DILocation(line: 1462, column: 35, scope: !3242)
!3246 = !DILocation(line: 1462, column: 29, scope: !3242)
!3247 = !DILocation(line: 1462, column: 47, scope: !3242)
!3248 = !DILocation(line: 1462, column: 50, scope: !3249)
!3249 = !DILexicalBlockFile(scope: !3243, file: !1012, discriminator: 2)
!3250 = !DILocation(line: 1462, column: 53, scope: !3249)
!3251 = !DILocation(line: 1462, column: 63, scope: !3249)
!3252 = !DILocation(line: 1462, column: 16, scope: !3249)
!3253 = !DILocation(line: 1463, column: 25, scope: !3254)
!3254 = distinct !DILexicalBlock(scope: !3243, file: !1012, line: 1462, column: 86)
!3255 = !DILocation(line: 1464, column: 5, scope: !3254)
!3256 = !DILocation(line: 1465, column: 52, scope: !3257)
!3257 = distinct !DILexicalBlock(scope: !2306, file: !1012, line: 1465, column: 9)
!3258 = !DILocation(line: 1465, column: 59, scope: !3257)
!3259 = !DILocation(line: 1465, column: 16, scope: !3257)
!3260 = !DILocation(line: 1465, column: 14, scope: !3257)
!3261 = !DILocation(line: 1465, column: 77, scope: !3257)
!3262 = !DILocation(line: 1465, column: 9, scope: !2306)
!3263 = !DILocation(line: 1466, column: 16, scope: !3257)
!3264 = !DILocation(line: 1466, column: 9, scope: !3257)
!3265 = !DILocation(line: 1468, column: 5, scope: !2306)
!3266 = !DILocation(line: 1469, column: 1, scope: !2306)
!3267 = distinct !DISubprogram(name: "force_lossy_output", scope: !1012, file: !1012, line: 1237, type: !3268, isLocal: true, isDefinition: true, scopeLine: 1238, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!3268 = !DISubroutineType(types: !3269)
!3269 = !{null, !1015, !2698}
!3270 = !DILocalVariable(name: "s", arg: 1, scope: !3267, file: !1012, line: 1237, type: !1015)
!3271 = !DILocation(line: 1237, column: 69, scope: !3267)
!3272 = !DILocalVariable(name: "c", arg: 2, scope: !3267, file: !1012, line: 1237, type: !2698)
!3273 = !DILocation(line: 1237, column: 85, scope: !3267)
!3274 = !DILocalVariable(name: "dca", scope: !3267, file: !1012, line: 1239, type: !2332)
!3275 = !DILocation(line: 1239, column: 17, scope: !3267)
!3276 = !DILocation(line: 1239, column: 23, scope: !3267)
!3277 = !DILocation(line: 1239, column: 26, scope: !3267)
!3278 = !DILocation(line: 1239, column: 33, scope: !3267)
!3279 = !DILocalVariable(name: "band", scope: !3267, file: !1012, line: 1240, type: !996)
!3280 = !DILocation(line: 1240, column: 9, scope: !3267)
!3281 = !DILocalVariable(name: "ch", scope: !3267, file: !1012, line: 1240, type: !996)
!3282 = !DILocation(line: 1240, column: 15, scope: !3267)
!3283 = !DILocation(line: 1242, column: 15, scope: !3284)
!3284 = distinct !DILexicalBlock(scope: !3267, file: !1012, line: 1242, column: 5)
!3285 = !DILocation(line: 1242, column: 10, scope: !3284)
!3286 = !DILocation(line: 1242, column: 20, scope: !3287)
!3287 = !DILexicalBlockFile(scope: !3288, file: !1012, discriminator: 1)
!3288 = distinct !DILexicalBlock(scope: !3284, file: !1012, line: 1242, column: 5)
!3289 = !DILocation(line: 1242, column: 27, scope: !3287)
!3290 = !DILocation(line: 1242, column: 30, scope: !3287)
!3291 = !DILocation(line: 1242, column: 25, scope: !3287)
!3292 = !DILocation(line: 1242, column: 5, scope: !3287)
!3293 = !DILocation(line: 1243, column: 29, scope: !3288)
!3294 = !DILocation(line: 1243, column: 32, scope: !3288)
!3295 = !DILocation(line: 1243, column: 35, scope: !3288)
!3296 = !DILocation(line: 1243, column: 9, scope: !3288)
!3297 = !DILocation(line: 1242, column: 46, scope: !3298)
!3298 = !DILexicalBlockFile(scope: !3288, file: !1012, discriminator: 2)
!3299 = !DILocation(line: 1242, column: 5, scope: !3298)
!3300 = distinct !{!3300, !3301}
!3301 = !DILocation(line: 1242, column: 5, scope: !3267)
!3302 = !DILocation(line: 1245, column: 13, scope: !3303)
!3303 = distinct !DILexicalBlock(scope: !3267, file: !1012, line: 1245, column: 5)
!3304 = !DILocation(line: 1245, column: 10, scope: !3303)
!3305 = !DILocation(line: 1245, column: 18, scope: !3306)
!3306 = !DILexicalBlockFile(scope: !3307, file: !1012, discriminator: 1)
!3307 = distinct !DILexicalBlock(scope: !3303, file: !1012, line: 1245, column: 5)
!3308 = !DILocation(line: 1245, column: 23, scope: !3306)
!3309 = !DILocation(line: 1245, column: 26, scope: !3306)
!3310 = !DILocation(line: 1245, column: 21, scope: !3306)
!3311 = !DILocation(line: 1245, column: 5, scope: !3306)
!3312 = !DILocation(line: 1246, column: 15, scope: !3313)
!3313 = distinct !DILexicalBlock(scope: !3314, file: !1012, line: 1246, column: 13)
!3314 = distinct !DILexicalBlock(scope: !3307, file: !1012, line: 1245, column: 43)
!3315 = !DILocation(line: 1246, column: 18, scope: !3313)
!3316 = !DILocation(line: 1246, column: 42, scope: !3313)
!3317 = !DILocation(line: 1246, column: 39, scope: !3313)
!3318 = !DILocation(line: 1246, column: 34, scope: !3313)
!3319 = !DILocation(line: 1246, column: 13, scope: !3314)
!3320 = !DILocation(line: 1247, column: 13, scope: !3313)
!3321 = !DILocation(line: 1248, column: 35, scope: !3322)
!3322 = distinct !DILexicalBlock(scope: !3314, file: !1012, line: 1248, column: 13)
!3323 = !DILocation(line: 1248, column: 40, scope: !3322)
!3324 = !DILocation(line: 1248, column: 58, scope: !3322)
!3325 = !DILocation(line: 1248, column: 46, scope: !3322)
!3326 = !DILocation(line: 1248, column: 49, scope: !3322)
!3327 = !DILocation(line: 1248, column: 13, scope: !3322)
!3328 = !DILocation(line: 1248, column: 63, scope: !3322)
!3329 = !DILocation(line: 1248, column: 13, scope: !3314)
!3330 = !DILocation(line: 1249, column: 13, scope: !3322)
!3331 = !DILocation(line: 1250, column: 38, scope: !3314)
!3332 = !DILocation(line: 1250, column: 35, scope: !3314)
!3333 = !DILocation(line: 1250, column: 31, scope: !3314)
!3334 = !DILocation(line: 1250, column: 9, scope: !3314)
!3335 = !DILocation(line: 1250, column: 12, scope: !3314)
!3336 = !DILocation(line: 1250, column: 28, scope: !3314)
!3337 = !DILocation(line: 1251, column: 5, scope: !3314)
!3338 = !DILocation(line: 1245, column: 39, scope: !3339)
!3339 = !DILexicalBlockFile(scope: !3307, file: !1012, discriminator: 2)
!3340 = !DILocation(line: 1245, column: 5, scope: !3339)
!3341 = distinct !{!3341, !3342}
!3342 = !DILocation(line: 1245, column: 5, scope: !3267)
!3343 = !DILocation(line: 1252, column: 1, scope: !3267)
!3344 = distinct !DISubprogram(name: "chs_filter_band_data", scope: !1012, file: !1012, line: 627, type: !3345, isLocal: true, isDefinition: true, scopeLine: 628, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!3345 = !DISubroutineType(types: !3346)
!3346 = !{null, !1015, !2698, !996}
!3347 = !DILocalVariable(name: "s", arg: 1, scope: !3344, file: !1012, line: 627, type: !1015)
!3348 = !DILocation(line: 627, column: 49, scope: !3344)
!3349 = !DILocalVariable(name: "c", arg: 2, scope: !3344, file: !1012, line: 627, type: !2698)
!3350 = !DILocation(line: 627, column: 65, scope: !3344)
!3351 = !DILocalVariable(name: "band", arg: 3, scope: !3344, file: !1012, line: 627, type: !996)
!3352 = !DILocation(line: 627, column: 72, scope: !3344)
!3353 = !DILocalVariable(name: "b", scope: !3344, file: !1012, line: 629, type: !3354)
!3354 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1798, size: 64, align: 64)
!3355 = !DILocation(line: 629, column: 17, scope: !3344)
!3356 = !DILocation(line: 629, column: 31, scope: !3344)
!3357 = !DILocation(line: 629, column: 22, scope: !3344)
!3358 = !DILocation(line: 629, column: 25, scope: !3344)
!3359 = !DILocalVariable(name: "nsamples", scope: !3344, file: !1012, line: 630, type: !996)
!3360 = !DILocation(line: 630, column: 9, scope: !3344)
!3361 = !DILocation(line: 630, column: 20, scope: !3344)
!3362 = !DILocation(line: 630, column: 23, scope: !3344)
!3363 = !DILocalVariable(name: "i", scope: !3344, file: !1012, line: 631, type: !996)
!3364 = !DILocation(line: 631, column: 9, scope: !3344)
!3365 = !DILocalVariable(name: "j", scope: !3344, file: !1012, line: 631, type: !996)
!3366 = !DILocation(line: 631, column: 12, scope: !3344)
!3367 = !DILocalVariable(name: "k", scope: !3344, file: !1012, line: 631, type: !996)
!3368 = !DILocation(line: 631, column: 15, scope: !3344)
!3369 = !DILocation(line: 634, column: 12, scope: !3370)
!3370 = distinct !DILexicalBlock(scope: !3344, file: !1012, line: 634, column: 5)
!3371 = !DILocation(line: 634, column: 10, scope: !3370)
!3372 = !DILocation(line: 634, column: 17, scope: !3373)
!3373 = !DILexicalBlockFile(scope: !3374, file: !1012, discriminator: 1)
!3374 = distinct !DILexicalBlock(scope: !3370, file: !1012, line: 634, column: 5)
!3375 = !DILocation(line: 634, column: 21, scope: !3373)
!3376 = !DILocation(line: 634, column: 24, scope: !3373)
!3377 = !DILocation(line: 634, column: 19, scope: !3373)
!3378 = !DILocation(line: 634, column: 5, scope: !3373)
!3379 = !DILocalVariable(name: "buf", scope: !3380, file: !1012, line: 635, type: !994)
!3380 = distinct !DILexicalBlock(scope: !3374, file: !1012, line: 634, column: 40)
!3381 = !DILocation(line: 635, column: 18, scope: !3380)
!3382 = !DILocation(line: 635, column: 45, scope: !3380)
!3383 = !DILocation(line: 635, column: 24, scope: !3380)
!3384 = !DILocation(line: 635, column: 27, scope: !3380)
!3385 = !DILocalVariable(name: "order", scope: !3380, file: !1012, line: 636, type: !996)
!3386 = !DILocation(line: 636, column: 13, scope: !3380)
!3387 = !DILocation(line: 636, column: 41, scope: !3380)
!3388 = !DILocation(line: 636, column: 21, scope: !3380)
!3389 = !DILocation(line: 636, column: 24, scope: !3380)
!3390 = !DILocation(line: 637, column: 13, scope: !3391)
!3391 = distinct !DILexicalBlock(scope: !3380, file: !1012, line: 637, column: 13)
!3392 = !DILocation(line: 637, column: 19, scope: !3391)
!3393 = !DILocation(line: 637, column: 13, scope: !3380)
!3394 = !DILocalVariable(name: "coeff", scope: !3395, file: !1012, line: 638, type: !1788)
!3395 = distinct !DILexicalBlock(scope: !3391, file: !1012, line: 637, column: 24)
!3396 = !DILocation(line: 638, column: 17, scope: !3395)
!3397 = !DILocation(line: 640, column: 20, scope: !3398)
!3398 = distinct !DILexicalBlock(scope: !3395, file: !1012, line: 640, column: 13)
!3399 = !DILocation(line: 640, column: 18, scope: !3398)
!3400 = !DILocation(line: 640, column: 25, scope: !3401)
!3401 = !DILexicalBlockFile(scope: !3402, file: !1012, discriminator: 1)
!3402 = distinct !DILexicalBlock(scope: !3398, file: !1012, line: 640, column: 13)
!3403 = !DILocation(line: 640, column: 29, scope: !3401)
!3404 = !DILocation(line: 640, column: 27, scope: !3401)
!3405 = !DILocation(line: 640, column: 13, scope: !3401)
!3406 = !DILocalVariable(name: "rc", scope: !3407, file: !1012, line: 641, type: !996)
!3407 = distinct !DILexicalBlock(scope: !3402, file: !1012, line: 640, column: 41)
!3408 = !DILocation(line: 641, column: 21, scope: !3407)
!3409 = !DILocation(line: 641, column: 49, scope: !3407)
!3410 = !DILocation(line: 641, column: 26, scope: !3407)
!3411 = !DILocation(line: 641, column: 46, scope: !3407)
!3412 = !DILocation(line: 641, column: 29, scope: !3407)
!3413 = !DILocation(line: 642, column: 24, scope: !3414)
!3414 = distinct !DILexicalBlock(scope: !3407, file: !1012, line: 642, column: 17)
!3415 = !DILocation(line: 642, column: 22, scope: !3414)
!3416 = !DILocation(line: 642, column: 29, scope: !3417)
!3417 = !DILexicalBlockFile(scope: !3418, file: !1012, discriminator: 1)
!3418 = distinct !DILexicalBlock(scope: !3414, file: !1012, line: 642, column: 17)
!3419 = !DILocation(line: 642, column: 34, scope: !3417)
!3420 = !DILocation(line: 642, column: 36, scope: !3417)
!3421 = !DILocation(line: 642, column: 41, scope: !3417)
!3422 = !DILocation(line: 642, column: 31, scope: !3417)
!3423 = !DILocation(line: 642, column: 17, scope: !3417)
!3424 = !DILocalVariable(name: "tmp1", scope: !3425, file: !1012, line: 643, type: !996)
!3425 = distinct !DILexicalBlock(scope: !3418, file: !1012, line: 642, column: 51)
!3426 = !DILocation(line: 643, column: 25, scope: !3425)
!3427 = !DILocation(line: 643, column: 39, scope: !3425)
!3428 = !DILocation(line: 643, column: 32, scope: !3425)
!3429 = !DILocalVariable(name: "tmp2", scope: !3425, file: !1012, line: 644, type: !996)
!3430 = !DILocation(line: 644, column: 25, scope: !3425)
!3431 = !DILocation(line: 644, column: 38, scope: !3425)
!3432 = !DILocation(line: 644, column: 42, scope: !3425)
!3433 = !DILocation(line: 644, column: 40, scope: !3425)
!3434 = !DILocation(line: 644, column: 44, scope: !3425)
!3435 = !DILocation(line: 644, column: 32, scope: !3425)
!3436 = !DILocation(line: 645, column: 34, scope: !3425)
!3437 = !DILocation(line: 645, column: 47, scope: !3425)
!3438 = !DILocation(line: 645, column: 51, scope: !3425)
!3439 = !DILocation(line: 645, column: 41, scope: !3425)
!3440 = !DILocation(line: 645, column: 39, scope: !3425)
!3441 = !DILocation(line: 645, column: 28, scope: !3425)
!3442 = !DILocation(line: 645, column: 21, scope: !3425)
!3443 = !DILocation(line: 645, column: 32, scope: !3425)
!3444 = !DILocation(line: 646, column: 40, scope: !3425)
!3445 = !DILocation(line: 646, column: 53, scope: !3425)
!3446 = !DILocation(line: 646, column: 57, scope: !3425)
!3447 = !DILocation(line: 646, column: 47, scope: !3425)
!3448 = !DILocation(line: 646, column: 45, scope: !3425)
!3449 = !DILocation(line: 646, column: 27, scope: !3425)
!3450 = !DILocation(line: 646, column: 31, scope: !3425)
!3451 = !DILocation(line: 646, column: 29, scope: !3425)
!3452 = !DILocation(line: 646, column: 33, scope: !3425)
!3453 = !DILocation(line: 646, column: 21, scope: !3425)
!3454 = !DILocation(line: 646, column: 38, scope: !3425)
!3455 = !DILocation(line: 647, column: 17, scope: !3425)
!3456 = !DILocation(line: 642, column: 47, scope: !3457)
!3457 = !DILexicalBlockFile(scope: !3418, file: !1012, discriminator: 2)
!3458 = !DILocation(line: 642, column: 17, scope: !3457)
!3459 = distinct !{!3459, !3460}
!3460 = !DILocation(line: 642, column: 17, scope: !3407)
!3461 = !DILocation(line: 648, column: 28, scope: !3407)
!3462 = !DILocation(line: 648, column: 23, scope: !3407)
!3463 = !DILocation(line: 648, column: 17, scope: !3407)
!3464 = !DILocation(line: 648, column: 26, scope: !3407)
!3465 = !DILocation(line: 649, column: 13, scope: !3407)
!3466 = !DILocation(line: 640, column: 37, scope: !3467)
!3467 = !DILexicalBlockFile(scope: !3402, file: !1012, discriminator: 2)
!3468 = !DILocation(line: 640, column: 13, scope: !3467)
!3469 = distinct !{!3469, !3470}
!3470 = !DILocation(line: 640, column: 13, scope: !3395)
!3471 = !DILocation(line: 651, column: 20, scope: !3472)
!3472 = distinct !DILexicalBlock(scope: !3395, file: !1012, line: 651, column: 13)
!3473 = !DILocation(line: 651, column: 18, scope: !3472)
!3474 = !DILocation(line: 651, column: 25, scope: !3475)
!3475 = !DILexicalBlockFile(scope: !3476, file: !1012, discriminator: 1)
!3476 = distinct !DILexicalBlock(scope: !3472, file: !1012, line: 651, column: 13)
!3477 = !DILocation(line: 651, column: 29, scope: !3475)
!3478 = !DILocation(line: 651, column: 40, scope: !3475)
!3479 = !DILocation(line: 651, column: 38, scope: !3475)
!3480 = !DILocation(line: 651, column: 27, scope: !3475)
!3481 = !DILocation(line: 651, column: 13, scope: !3475)
!3482 = !DILocalVariable(name: "err", scope: !3483, file: !1012, line: 652, type: !1006)
!3483 = distinct !DILexicalBlock(scope: !3476, file: !1012, line: 651, column: 52)
!3484 = !DILocation(line: 652, column: 25, scope: !3483)
!3485 = !DILocation(line: 653, column: 24, scope: !3486)
!3486 = distinct !DILexicalBlock(scope: !3483, file: !1012, line: 653, column: 17)
!3487 = !DILocation(line: 653, column: 22, scope: !3486)
!3488 = !DILocation(line: 653, column: 29, scope: !3489)
!3489 = !DILexicalBlockFile(scope: !3490, file: !1012, discriminator: 1)
!3490 = distinct !DILexicalBlock(scope: !3486, file: !1012, line: 653, column: 17)
!3491 = !DILocation(line: 653, column: 33, scope: !3489)
!3492 = !DILocation(line: 653, column: 31, scope: !3489)
!3493 = !DILocation(line: 653, column: 17, scope: !3489)
!3494 = !DILocation(line: 654, column: 41, scope: !3490)
!3495 = !DILocation(line: 654, column: 45, scope: !3490)
!3496 = !DILocation(line: 654, column: 43, scope: !3490)
!3497 = !DILocation(line: 654, column: 37, scope: !3490)
!3498 = !DILocation(line: 654, column: 28, scope: !3490)
!3499 = !DILocation(line: 654, column: 56, scope: !3490)
!3500 = !DILocation(line: 654, column: 64, scope: !3490)
!3501 = !DILocation(line: 654, column: 62, scope: !3490)
!3502 = !DILocation(line: 654, column: 66, scope: !3490)
!3503 = !DILocation(line: 654, column: 50, scope: !3490)
!3504 = !DILocation(line: 654, column: 48, scope: !3490)
!3505 = !DILocation(line: 654, column: 25, scope: !3490)
!3506 = !DILocation(line: 654, column: 21, scope: !3490)
!3507 = !DILocation(line: 653, column: 41, scope: !3508)
!3508 = !DILexicalBlockFile(scope: !3490, file: !1012, discriminator: 2)
!3509 = !DILocation(line: 653, column: 17, scope: !3508)
!3510 = distinct !{!3510, !3511}
!3511 = !DILocation(line: 653, column: 17, scope: !3483)
!3512 = !DILocation(line: 655, column: 55, scope: !3483)
!3513 = !DILocation(line: 655, column: 48, scope: !3483)
!3514 = !DILocation(line: 655, column: 41, scope: !3515)
!3515 = !DILexicalBlockFile(scope: !3483, file: !1012, discriminator: 1)
!3516 = !DILocation(line: 655, column: 21, scope: !3483)
!3517 = !DILocation(line: 655, column: 25, scope: !3483)
!3518 = !DILocation(line: 655, column: 23, scope: !3483)
!3519 = !DILocation(line: 655, column: 17, scope: !3483)
!3520 = !DILocation(line: 655, column: 28, scope: !3483)
!3521 = !DILocation(line: 656, column: 13, scope: !3483)
!3522 = !DILocation(line: 651, column: 48, scope: !3523)
!3523 = !DILexicalBlockFile(scope: !3476, file: !1012, discriminator: 2)
!3524 = !DILocation(line: 651, column: 13, scope: !3523)
!3525 = distinct !{!3525, !3526}
!3526 = !DILocation(line: 651, column: 13, scope: !3395)
!3527 = !DILocation(line: 657, column: 9, scope: !3395)
!3528 = !DILocation(line: 659, column: 20, scope: !3529)
!3529 = distinct !DILexicalBlock(scope: !3530, file: !1012, line: 659, column: 13)
!3530 = distinct !DILexicalBlock(scope: !3391, file: !1012, line: 657, column: 16)
!3531 = !DILocation(line: 659, column: 18, scope: !3529)
!3532 = !DILocation(line: 659, column: 25, scope: !3533)
!3533 = !DILexicalBlockFile(scope: !3534, file: !1012, discriminator: 1)
!3534 = distinct !DILexicalBlock(scope: !3529, file: !1012, line: 659, column: 13)
!3535 = !DILocation(line: 659, column: 49, scope: !3533)
!3536 = !DILocation(line: 659, column: 29, scope: !3533)
!3537 = !DILocation(line: 659, column: 32, scope: !3533)
!3538 = !DILocation(line: 659, column: 27, scope: !3533)
!3539 = !DILocation(line: 659, column: 13, scope: !3533)
!3540 = !DILocation(line: 660, column: 24, scope: !3541)
!3541 = distinct !DILexicalBlock(scope: !3534, file: !1012, line: 660, column: 17)
!3542 = !DILocation(line: 660, column: 22, scope: !3541)
!3543 = !DILocation(line: 660, column: 29, scope: !3544)
!3544 = !DILexicalBlockFile(scope: !3545, file: !1012, discriminator: 1)
!3545 = distinct !DILexicalBlock(scope: !3541, file: !1012, line: 660, column: 17)
!3546 = !DILocation(line: 660, column: 33, scope: !3544)
!3547 = !DILocation(line: 660, column: 31, scope: !3544)
!3548 = !DILocation(line: 660, column: 17, scope: !3544)
!3549 = !DILocation(line: 661, column: 45, scope: !3545)
!3550 = !DILocation(line: 661, column: 47, scope: !3545)
!3551 = !DILocation(line: 661, column: 41, scope: !3545)
!3552 = !DILocation(line: 661, column: 25, scope: !3545)
!3553 = !DILocation(line: 661, column: 21, scope: !3545)
!3554 = !DILocation(line: 661, column: 28, scope: !3545)
!3555 = !DILocation(line: 660, column: 44, scope: !3556)
!3556 = !DILexicalBlockFile(scope: !3545, file: !1012, discriminator: 2)
!3557 = !DILocation(line: 660, column: 17, scope: !3556)
!3558 = distinct !{!3558, !3559}
!3559 = !DILocation(line: 660, column: 17, scope: !3534)
!3560 = !DILocation(line: 661, column: 50, scope: !3561)
!3561 = !DILexicalBlockFile(scope: !3541, file: !1012, discriminator: 1)
!3562 = !DILocation(line: 659, column: 54, scope: !3563)
!3563 = !DILexicalBlockFile(scope: !3534, file: !1012, discriminator: 2)
!3564 = !DILocation(line: 659, column: 13, scope: !3563)
!3565 = distinct !{!3565, !3566}
!3566 = !DILocation(line: 659, column: 13, scope: !3530)
!3567 = !DILocation(line: 663, column: 5, scope: !3380)
!3568 = !DILocation(line: 634, column: 36, scope: !3569)
!3569 = !DILexicalBlockFile(scope: !3374, file: !1012, discriminator: 2)
!3570 = !DILocation(line: 634, column: 5, scope: !3569)
!3571 = distinct !{!3571, !3572}
!3572 = !DILocation(line: 634, column: 5, scope: !3344)
!3573 = !DILocation(line: 666, column: 9, scope: !3574)
!3574 = distinct !DILexicalBlock(scope: !3344, file: !1012, line: 666, column: 9)
!3575 = !DILocation(line: 666, column: 12, scope: !3574)
!3576 = !DILocation(line: 666, column: 9, scope: !3344)
!3577 = !DILocalVariable(name: "tmp", scope: !3578, file: !1012, line: 667, type: !1815)
!3578 = distinct !DILexicalBlock(scope: !3574, file: !1012, line: 666, column: 27)
!3579 = !DILocation(line: 667, column: 18, scope: !3578)
!3580 = !DILocation(line: 669, column: 16, scope: !3581)
!3581 = distinct !DILexicalBlock(scope: !3578, file: !1012, line: 669, column: 9)
!3582 = !DILocation(line: 669, column: 14, scope: !3581)
!3583 = !DILocation(line: 669, column: 21, scope: !3584)
!3584 = !DILexicalBlockFile(scope: !3585, file: !1012, discriminator: 1)
!3585 = distinct !DILexicalBlock(scope: !3581, file: !1012, line: 669, column: 9)
!3586 = !DILocation(line: 669, column: 25, scope: !3584)
!3587 = !DILocation(line: 669, column: 28, scope: !3584)
!3588 = !DILocation(line: 669, column: 38, scope: !3584)
!3589 = !DILocation(line: 669, column: 23, scope: !3584)
!3590 = !DILocation(line: 669, column: 9, scope: !3584)
!3591 = !DILocalVariable(name: "coeff", scope: !3592, file: !1012, line: 670, type: !996)
!3592 = distinct !DILexicalBlock(scope: !3585, file: !1012, line: 669, column: 48)
!3593 = !DILocation(line: 670, column: 17, scope: !3592)
!3594 = !DILocation(line: 670, column: 40, scope: !3592)
!3595 = !DILocation(line: 670, column: 25, scope: !3592)
!3596 = !DILocation(line: 670, column: 28, scope: !3592)
!3597 = !DILocation(line: 671, column: 17, scope: !3598)
!3598 = distinct !DILexicalBlock(scope: !3592, file: !1012, line: 671, column: 17)
!3599 = !DILocation(line: 671, column: 17, scope: !3592)
!3600 = !DILocation(line: 672, column: 17, scope: !3601)
!3601 = distinct !DILexicalBlock(scope: !3598, file: !1012, line: 671, column: 24)
!3602 = !DILocation(line: 672, column: 20, scope: !3601)
!3603 = !DILocation(line: 672, column: 28, scope: !3601)
!3604 = !DILocation(line: 672, column: 55, scope: !3601)
!3605 = !DILocation(line: 672, column: 57, scope: !3601)
!3606 = !DILocation(line: 672, column: 61, scope: !3601)
!3607 = !DILocation(line: 672, column: 34, scope: !3601)
!3608 = !DILocation(line: 672, column: 37, scope: !3601)
!3609 = !DILocation(line: 673, column: 55, scope: !3601)
!3610 = !DILocation(line: 673, column: 57, scope: !3601)
!3611 = !DILocation(line: 673, column: 34, scope: !3601)
!3612 = !DILocation(line: 673, column: 37, scope: !3601)
!3613 = !DILocation(line: 674, column: 34, scope: !3601)
!3614 = !DILocation(line: 674, column: 41, scope: !3601)
!3615 = !DILocation(line: 675, column: 13, scope: !3601)
!3616 = !DILocation(line: 676, column: 9, scope: !3592)
!3617 = !DILocation(line: 669, column: 44, scope: !3618)
!3618 = !DILexicalBlockFile(scope: !3585, file: !1012, discriminator: 2)
!3619 = !DILocation(line: 669, column: 9, scope: !3618)
!3620 = distinct !{!3620, !3621}
!3621 = !DILocation(line: 669, column: 9, scope: !3578)
!3622 = !DILocation(line: 679, column: 16, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !3578, file: !1012, line: 679, column: 9)
!3624 = !DILocation(line: 679, column: 14, scope: !3623)
!3625 = !DILocation(line: 679, column: 21, scope: !3626)
!3626 = !DILexicalBlockFile(scope: !3627, file: !1012, discriminator: 1)
!3627 = distinct !DILexicalBlock(scope: !3623, file: !1012, line: 679, column: 9)
!3628 = !DILocation(line: 679, column: 25, scope: !3626)
!3629 = !DILocation(line: 679, column: 28, scope: !3626)
!3630 = !DILocation(line: 679, column: 23, scope: !3626)
!3631 = !DILocation(line: 679, column: 9, scope: !3626)
!3632 = !DILocation(line: 680, column: 43, scope: !3627)
!3633 = !DILocation(line: 680, column: 22, scope: !3627)
!3634 = !DILocation(line: 680, column: 25, scope: !3627)
!3635 = !DILocation(line: 680, column: 17, scope: !3627)
!3636 = !DILocation(line: 680, column: 13, scope: !3627)
!3637 = !DILocation(line: 680, column: 20, scope: !3627)
!3638 = !DILocation(line: 679, column: 40, scope: !3639)
!3639 = !DILexicalBlockFile(scope: !3627, file: !1012, discriminator: 2)
!3640 = !DILocation(line: 679, column: 9, scope: !3639)
!3641 = distinct !{!3641, !3642}
!3642 = !DILocation(line: 679, column: 9, scope: !3578)
!3643 = !DILocation(line: 682, column: 16, scope: !3644)
!3644 = distinct !DILexicalBlock(scope: !3578, file: !1012, line: 682, column: 9)
!3645 = !DILocation(line: 682, column: 14, scope: !3644)
!3646 = !DILocation(line: 682, column: 21, scope: !3647)
!3647 = !DILexicalBlockFile(scope: !3648, file: !1012, discriminator: 1)
!3648 = distinct !DILexicalBlock(scope: !3644, file: !1012, line: 682, column: 9)
!3649 = !DILocation(line: 682, column: 25, scope: !3647)
!3650 = !DILocation(line: 682, column: 28, scope: !3647)
!3651 = !DILocation(line: 682, column: 23, scope: !3647)
!3652 = !DILocation(line: 682, column: 9, scope: !3647)
!3653 = !DILocation(line: 683, column: 58, scope: !3648)
!3654 = !DILocation(line: 683, column: 54, scope: !3648)
!3655 = !DILocation(line: 683, column: 48, scope: !3648)
!3656 = !DILocation(line: 683, column: 34, scope: !3648)
!3657 = !DILocation(line: 683, column: 37, scope: !3648)
!3658 = !DILocation(line: 683, column: 13, scope: !3648)
!3659 = !DILocation(line: 683, column: 16, scope: !3648)
!3660 = !DILocation(line: 683, column: 52, scope: !3648)
!3661 = !DILocation(line: 682, column: 40, scope: !3662)
!3662 = !DILexicalBlockFile(scope: !3648, file: !1012, discriminator: 2)
!3663 = !DILocation(line: 682, column: 9, scope: !3662)
!3664 = distinct !{!3664, !3665}
!3665 = !DILocation(line: 682, column: 9, scope: !3578)
!3666 = !DILocation(line: 684, column: 5, scope: !3578)
!3667 = !DILocation(line: 687, column: 9, scope: !3668)
!3668 = distinct !DILexicalBlock(scope: !3344, file: !1012, line: 687, column: 9)
!3669 = !DILocation(line: 687, column: 12, scope: !3668)
!3670 = !DILocation(line: 687, column: 23, scope: !3668)
!3671 = !DILocation(line: 687, column: 9, scope: !3344)
!3672 = !DILocation(line: 688, column: 16, scope: !3673)
!3673 = distinct !DILexicalBlock(scope: !3668, file: !1012, line: 688, column: 9)
!3674 = !DILocation(line: 688, column: 14, scope: !3673)
!3675 = !DILocation(line: 688, column: 21, scope: !3676)
!3676 = !DILexicalBlockFile(scope: !3677, file: !1012, discriminator: 1)
!3677 = distinct !DILexicalBlock(scope: !3673, file: !1012, line: 688, column: 9)
!3678 = !DILocation(line: 688, column: 25, scope: !3676)
!3679 = !DILocation(line: 688, column: 28, scope: !3676)
!3680 = !DILocation(line: 688, column: 23, scope: !3676)
!3681 = !DILocation(line: 688, column: 9, scope: !3676)
!3682 = !DILocation(line: 689, column: 70, scope: !3677)
!3683 = !DILocation(line: 689, column: 49, scope: !3677)
!3684 = !DILocation(line: 689, column: 52, scope: !3677)
!3685 = !DILocation(line: 689, column: 43, scope: !3677)
!3686 = !DILocation(line: 689, column: 31, scope: !3677)
!3687 = !DILocation(line: 689, column: 34, scope: !3677)
!3688 = !DILocation(line: 689, column: 13, scope: !3677)
!3689 = !DILocation(line: 689, column: 16, scope: !3677)
!3690 = !DILocation(line: 689, column: 47, scope: !3677)
!3691 = !DILocation(line: 688, column: 40, scope: !3692)
!3692 = !DILexicalBlockFile(scope: !3677, file: !1012, discriminator: 2)
!3693 = !DILocation(line: 688, column: 9, scope: !3692)
!3694 = distinct !{!3694, !3695}
!3695 = !DILocation(line: 688, column: 9, scope: !3668)
!3696 = !DILocation(line: 689, column: 71, scope: !3697)
!3697 = !DILexicalBlockFile(scope: !3673, file: !1012, discriminator: 1)
!3698 = !DILocation(line: 690, column: 1, scope: !3344)
!3699 = distinct !DISubprogram(name: "combine_residual_frame", scope: !1012, file: !1012, line: 1254, type: !3700, isLocal: true, isDefinition: true, scopeLine: 1255, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!3700 = !DISubroutineType(types: !3701)
!3701 = !{!996, !1015, !2698}
!3702 = !DILocalVariable(name: "s", arg: 1, scope: !3699, file: !1012, line: 1254, type: !1015)
!3703 = !DILocation(line: 1254, column: 50, scope: !3699)
!3704 = !DILocalVariable(name: "c", arg: 2, scope: !3699, file: !1012, line: 1254, type: !2698)
!3705 = !DILocation(line: 1254, column: 66, scope: !3699)
!3706 = !DILocalVariable(name: "dca", scope: !3699, file: !1012, line: 1256, type: !2332)
!3707 = !DILocation(line: 1256, column: 17, scope: !3699)
!3708 = !DILocation(line: 1256, column: 23, scope: !3699)
!3709 = !DILocation(line: 1256, column: 26, scope: !3699)
!3710 = !DILocation(line: 1256, column: 33, scope: !3699)
!3711 = !DILocalVariable(name: "ch", scope: !3699, file: !1012, line: 1257, type: !996)
!3712 = !DILocation(line: 1257, column: 9, scope: !3699)
!3713 = !DILocalVariable(name: "nsamples", scope: !3699, file: !1012, line: 1257, type: !996)
!3714 = !DILocation(line: 1257, column: 13, scope: !3699)
!3715 = !DILocation(line: 1257, column: 24, scope: !3699)
!3716 = !DILocation(line: 1257, column: 27, scope: !3699)
!3717 = !DILocalVariable(name: "o", scope: !3699, file: !1012, line: 1258, type: !2698)
!3718 = !DILocation(line: 1258, column: 18, scope: !3699)
!3719 = !DILocation(line: 1261, column: 11, scope: !3720)
!3720 = distinct !DILexicalBlock(scope: !3699, file: !1012, line: 1261, column: 9)
!3721 = !DILocation(line: 1261, column: 16, scope: !3720)
!3722 = !DILocation(line: 1261, column: 23, scope: !3720)
!3723 = !DILocation(line: 1261, column: 9, scope: !3699)
!3724 = !DILocation(line: 1262, column: 16, scope: !3725)
!3725 = distinct !DILexicalBlock(scope: !3720, file: !1012, line: 1261, column: 32)
!3726 = !DILocation(line: 1262, column: 19, scope: !3725)
!3727 = !DILocation(line: 1262, column: 9, scope: !3725)
!3728 = !DILocation(line: 1263, column: 9, scope: !3725)
!3729 = !DILocation(line: 1266, column: 9, scope: !3730)
!3730 = distinct !DILexicalBlock(scope: !3699, file: !1012, line: 1266, column: 9)
!3731 = !DILocation(line: 1266, column: 12, scope: !3730)
!3732 = !DILocation(line: 1266, column: 20, scope: !3730)
!3733 = !DILocation(line: 1266, column: 25, scope: !3730)
!3734 = !DILocation(line: 1266, column: 30, scope: !3730)
!3735 = !DILocation(line: 1266, column: 17, scope: !3730)
!3736 = !DILocation(line: 1266, column: 9, scope: !3699)
!3737 = !DILocation(line: 1267, column: 16, scope: !3738)
!3738 = distinct !DILexicalBlock(scope: !3730, file: !1012, line: 1266, column: 43)
!3739 = !DILocation(line: 1267, column: 19, scope: !3738)
!3740 = !DILocation(line: 1267, column: 93, scope: !3738)
!3741 = !DILocation(line: 1267, column: 98, scope: !3738)
!3742 = !DILocation(line: 1267, column: 103, scope: !3738)
!3743 = !DILocation(line: 1267, column: 116, scope: !3738)
!3744 = !DILocation(line: 1267, column: 119, scope: !3738)
!3745 = !DILocation(line: 1267, column: 9, scope: !3738)
!3746 = !DILocation(line: 1268, column: 9, scope: !3738)
!3747 = !DILocation(line: 1271, column: 9, scope: !3748)
!3748 = distinct !DILexicalBlock(scope: !3699, file: !1012, line: 1271, column: 9)
!3749 = !DILocation(line: 1271, column: 21, scope: !3748)
!3750 = !DILocation(line: 1271, column: 26, scope: !3748)
!3751 = !DILocation(line: 1271, column: 31, scope: !3748)
!3752 = !DILocation(line: 1271, column: 18, scope: !3748)
!3753 = !DILocation(line: 1271, column: 9, scope: !3699)
!3754 = !DILocation(line: 1272, column: 16, scope: !3755)
!3755 = distinct !DILexicalBlock(scope: !3748, file: !1012, line: 1271, column: 44)
!3756 = !DILocation(line: 1272, column: 19, scope: !3755)
!3757 = !DILocation(line: 1272, column: 103, scope: !3755)
!3758 = !DILocation(line: 1272, column: 108, scope: !3755)
!3759 = !DILocation(line: 1272, column: 113, scope: !3755)
!3760 = !DILocation(line: 1272, column: 126, scope: !3755)
!3761 = !DILocation(line: 1272, column: 9, scope: !3755)
!3762 = !DILocation(line: 1273, column: 9, scope: !3755)
!3763 = !DILocation(line: 1279, column: 35, scope: !3699)
!3764 = !DILocation(line: 1279, column: 38, scope: !3699)
!3765 = !DILocation(line: 1279, column: 9, scope: !3699)
!3766 = !DILocation(line: 1279, column: 7, scope: !3699)
!3767 = !DILocation(line: 1282, column: 13, scope: !3768)
!3768 = distinct !DILexicalBlock(scope: !3699, file: !1012, line: 1282, column: 5)
!3769 = !DILocation(line: 1282, column: 10, scope: !3768)
!3770 = !DILocation(line: 1282, column: 18, scope: !3771)
!3771 = !DILexicalBlockFile(scope: !3772, file: !1012, discriminator: 1)
!3772 = distinct !DILexicalBlock(scope: !3768, file: !1012, line: 1282, column: 5)
!3773 = !DILocation(line: 1282, column: 23, scope: !3771)
!3774 = !DILocation(line: 1282, column: 26, scope: !3771)
!3775 = !DILocation(line: 1282, column: 21, scope: !3771)
!3776 = !DILocation(line: 1282, column: 5, scope: !3771)
!3777 = !DILocalVariable(name: "n", scope: !3778, file: !1012, line: 1283, type: !996)
!3778 = distinct !DILexicalBlock(scope: !3772, file: !1012, line: 1282, column: 43)
!3779 = !DILocation(line: 1283, column: 13, scope: !3778)
!3780 = !DILocalVariable(name: "spkr", scope: !3778, file: !1012, line: 1283, type: !996)
!3781 = !DILocation(line: 1283, column: 16, scope: !3778)
!3782 = !DILocalVariable(name: "shift", scope: !3778, file: !1012, line: 1283, type: !996)
!3783 = !DILocation(line: 1283, column: 22, scope: !3778)
!3784 = !DILocalVariable(name: "round", scope: !3778, file: !1012, line: 1283, type: !996)
!3785 = !DILocation(line: 1283, column: 29, scope: !3778)
!3786 = !DILocalVariable(name: "src", scope: !3778, file: !1012, line: 1284, type: !994)
!3787 = !DILocation(line: 1284, column: 18, scope: !3778)
!3788 = !DILocalVariable(name: "dst", scope: !3778, file: !1012, line: 1284, type: !994)
!3789 = !DILocation(line: 1284, column: 24, scope: !3778)
!3790 = !DILocation(line: 1286, column: 13, scope: !3791)
!3791 = distinct !DILexicalBlock(scope: !3778, file: !1012, line: 1286, column: 13)
!3792 = !DILocation(line: 1286, column: 16, scope: !3791)
!3793 = !DILocation(line: 1286, column: 40, scope: !3791)
!3794 = !DILocation(line: 1286, column: 37, scope: !3791)
!3795 = !DILocation(line: 1286, column: 32, scope: !3791)
!3796 = !DILocation(line: 1286, column: 13, scope: !3778)
!3797 = !DILocation(line: 1287, column: 13, scope: !3791)
!3798 = !DILocation(line: 1290, column: 38, scope: !3778)
!3799 = !DILocation(line: 1290, column: 43, scope: !3778)
!3800 = !DILocation(line: 1290, column: 61, scope: !3778)
!3801 = !DILocation(line: 1290, column: 49, scope: !3778)
!3802 = !DILocation(line: 1290, column: 52, scope: !3778)
!3803 = !DILocation(line: 1290, column: 16, scope: !3778)
!3804 = !DILocation(line: 1290, column: 14, scope: !3778)
!3805 = !DILocation(line: 1291, column: 13, scope: !3806)
!3806 = distinct !DILexicalBlock(scope: !3778, file: !1012, line: 1291, column: 13)
!3807 = !DILocation(line: 1291, column: 18, scope: !3806)
!3808 = !DILocation(line: 1291, column: 13, scope: !3778)
!3809 = !DILocation(line: 1292, column: 20, scope: !3810)
!3810 = distinct !DILexicalBlock(scope: !3806, file: !1012, line: 1291, column: 23)
!3811 = !DILocation(line: 1292, column: 23, scope: !3810)
!3812 = !DILocation(line: 1292, column: 117, scope: !3810)
!3813 = !DILocation(line: 1292, column: 105, scope: !3810)
!3814 = !DILocation(line: 1292, column: 108, scope: !3810)
!3815 = !DILocation(line: 1292, column: 13, scope: !3810)
!3816 = !DILocation(line: 1293, column: 13, scope: !3810)
!3817 = !DILocation(line: 1297, column: 22, scope: !3778)
!3818 = !DILocation(line: 1297, column: 25, scope: !3778)
!3819 = !DILocation(line: 1297, column: 20, scope: !3778)
!3820 = !DILocation(line: 1297, column: 57, scope: !3778)
!3821 = !DILocation(line: 1297, column: 60, scope: !3778)
!3822 = !DILocation(line: 1297, column: 66, scope: !3778)
!3823 = !DILocation(line: 1297, column: 39, scope: !3778)
!3824 = !DILocation(line: 1297, column: 37, scope: !3778)
!3825 = !DILocation(line: 1297, column: 15, scope: !3778)
!3826 = !DILocation(line: 1298, column: 13, scope: !3827)
!3827 = distinct !DILexicalBlock(scope: !3778, file: !1012, line: 1298, column: 13)
!3828 = !DILocation(line: 1298, column: 19, scope: !3827)
!3829 = !DILocation(line: 1298, column: 13, scope: !3778)
!3830 = !DILocation(line: 1299, column: 20, scope: !3831)
!3831 = distinct !DILexicalBlock(scope: !3827, file: !1012, line: 1298, column: 25)
!3832 = !DILocation(line: 1299, column: 23, scope: !3831)
!3833 = !DILocation(line: 1299, column: 68, scope: !3831)
!3834 = !DILocation(line: 1299, column: 13, scope: !3831)
!3835 = !DILocation(line: 1300, column: 13, scope: !3831)
!3836 = !DILocation(line: 1303, column: 17, scope: !3778)
!3837 = !DILocation(line: 1303, column: 23, scope: !3778)
!3838 = !DILocation(line: 1303, column: 35, scope: !3839)
!3839 = !DILexicalBlockFile(scope: !3778, file: !1012, discriminator: 1)
!3840 = !DILocation(line: 1303, column: 41, scope: !3839)
!3841 = !DILocation(line: 1303, column: 31, scope: !3839)
!3842 = !DILocation(line: 1303, column: 17, scope: !3839)
!3843 = !DILocation(line: 1303, column: 17, scope: !3844)
!3844 = !DILexicalBlockFile(scope: !3778, file: !1012, discriminator: 2)
!3845 = !DILocation(line: 1303, column: 17, scope: !3846)
!3846 = !DILexicalBlockFile(scope: !3778, file: !1012, discriminator: 3)
!3847 = !DILocation(line: 1303, column: 15, scope: !3846)
!3848 = !DILocation(line: 1305, column: 40, scope: !3778)
!3849 = !DILocation(line: 1305, column: 15, scope: !3778)
!3850 = !DILocation(line: 1305, column: 20, scope: !3778)
!3851 = !DILocation(line: 1305, column: 25, scope: !3778)
!3852 = !DILocation(line: 1305, column: 13, scope: !3778)
!3853 = !DILocation(line: 1306, column: 45, scope: !3778)
!3854 = !DILocation(line: 1306, column: 15, scope: !3778)
!3855 = !DILocation(line: 1306, column: 18, scope: !3778)
!3856 = !DILocation(line: 1306, column: 27, scope: !3778)
!3857 = !DILocation(line: 1306, column: 13, scope: !3778)
!3858 = !DILocation(line: 1307, column: 13, scope: !3859)
!3859 = distinct !DILexicalBlock(scope: !3778, file: !1012, line: 1307, column: 13)
!3860 = !DILocation(line: 1307, column: 13, scope: !3778)
!3861 = !DILocalVariable(name: "scale_inv", scope: !3862, file: !1012, line: 1309, type: !996)
!3862 = distinct !DILexicalBlock(scope: !3859, file: !1012, line: 1307, column: 16)
!3863 = !DILocation(line: 1309, column: 17, scope: !3862)
!3864 = !DILocation(line: 1309, column: 47, scope: !3862)
!3865 = !DILocation(line: 1309, column: 50, scope: !3862)
!3866 = !DILocation(line: 1309, column: 61, scope: !3862)
!3867 = !DILocation(line: 1309, column: 59, scope: !3862)
!3868 = !DILocation(line: 1309, column: 29, scope: !3862)
!3869 = !DILocation(line: 1309, column: 32, scope: !3862)
!3870 = !DILocation(line: 1310, column: 20, scope: !3871)
!3871 = distinct !DILexicalBlock(scope: !3862, file: !1012, line: 1310, column: 13)
!3872 = !DILocation(line: 1310, column: 18, scope: !3871)
!3873 = !DILocation(line: 1310, column: 25, scope: !3874)
!3874 = !DILexicalBlockFile(scope: !3875, file: !1012, discriminator: 1)
!3875 = distinct !DILexicalBlock(scope: !3871, file: !1012, line: 1310, column: 13)
!3876 = !DILocation(line: 1310, column: 29, scope: !3874)
!3877 = !DILocation(line: 1310, column: 27, scope: !3874)
!3878 = !DILocation(line: 1310, column: 13, scope: !3874)
!3879 = !DILocation(line: 1311, column: 55, scope: !3875)
!3880 = !DILocation(line: 1311, column: 51, scope: !3875)
!3881 = !DILocation(line: 1311, column: 59, scope: !3875)
!3882 = !DILocation(line: 1311, column: 45, scope: !3875)
!3883 = !DILocation(line: 1311, column: 72, scope: !3875)
!3884 = !DILocation(line: 1311, column: 70, scope: !3875)
!3885 = !DILocation(line: 1311, column: 82, scope: !3875)
!3886 = !DILocation(line: 1311, column: 79, scope: !3875)
!3887 = !DILocation(line: 1311, column: 37, scope: !3874)
!3888 = !DILocation(line: 1311, column: 21, scope: !3875)
!3889 = !DILocation(line: 1311, column: 17, scope: !3875)
!3890 = !DILocation(line: 1311, column: 24, scope: !3875)
!3891 = !DILocation(line: 1310, column: 40, scope: !3892)
!3892 = !DILexicalBlockFile(scope: !3875, file: !1012, discriminator: 2)
!3893 = !DILocation(line: 1310, column: 13, scope: !3892)
!3894 = distinct !{!3894, !3895}
!3895 = !DILocation(line: 1310, column: 13, scope: !3862)
!3896 = !DILocation(line: 1312, column: 9, scope: !3862)
!3897 = !DILocation(line: 1314, column: 20, scope: !3898)
!3898 = distinct !DILexicalBlock(scope: !3899, file: !1012, line: 1314, column: 13)
!3899 = distinct !DILexicalBlock(scope: !3859, file: !1012, line: 1312, column: 16)
!3900 = !DILocation(line: 1314, column: 18, scope: !3898)
!3901 = !DILocation(line: 1314, column: 25, scope: !3902)
!3902 = !DILexicalBlockFile(scope: !3903, file: !1012, discriminator: 1)
!3903 = distinct !DILexicalBlock(scope: !3898, file: !1012, line: 1314, column: 13)
!3904 = !DILocation(line: 1314, column: 29, scope: !3902)
!3905 = !DILocation(line: 1314, column: 27, scope: !3902)
!3906 = !DILocation(line: 1314, column: 13, scope: !3902)
!3907 = !DILocation(line: 1315, column: 43, scope: !3903)
!3908 = !DILocation(line: 1315, column: 39, scope: !3903)
!3909 = !DILocation(line: 1315, column: 48, scope: !3903)
!3910 = !DILocation(line: 1315, column: 46, scope: !3903)
!3911 = !DILocation(line: 1315, column: 58, scope: !3903)
!3912 = !DILocation(line: 1315, column: 55, scope: !3903)
!3913 = !DILocation(line: 1315, column: 21, scope: !3903)
!3914 = !DILocation(line: 1315, column: 17, scope: !3903)
!3915 = !DILocation(line: 1315, column: 24, scope: !3903)
!3916 = !DILocation(line: 1314, column: 40, scope: !3917)
!3917 = !DILexicalBlockFile(scope: !3903, file: !1012, discriminator: 2)
!3918 = !DILocation(line: 1314, column: 13, scope: !3917)
!3919 = distinct !{!3919, !3920}
!3920 = !DILocation(line: 1314, column: 13, scope: !3899)
!3921 = !DILocation(line: 1317, column: 5, scope: !3778)
!3922 = !DILocation(line: 1282, column: 39, scope: !3923)
!3923 = !DILexicalBlockFile(scope: !3772, file: !1012, discriminator: 2)
!3924 = !DILocation(line: 1282, column: 5, scope: !3923)
!3925 = distinct !{!3925, !3926}
!3926 = !DILocation(line: 1282, column: 5, scope: !3699)
!3927 = !DILocation(line: 1319, column: 5, scope: !3699)
!3928 = !DILocation(line: 1320, column: 1, scope: !3699)
!3929 = distinct !DISubprogram(name: "chs_assemble_msbs_lsbs", scope: !1012, file: !1012, line: 707, type: !3345, isLocal: true, isDefinition: true, scopeLine: 708, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!3930 = !DILocalVariable(name: "s", arg: 1, scope: !3929, file: !1012, line: 707, type: !1015)
!3931 = !DILocation(line: 707, column: 51, scope: !3929)
!3932 = !DILocalVariable(name: "c", arg: 2, scope: !3929, file: !1012, line: 707, type: !2698)
!3933 = !DILocation(line: 707, column: 67, scope: !3929)
!3934 = !DILocalVariable(name: "band", arg: 3, scope: !3929, file: !1012, line: 707, type: !996)
!3935 = !DILocation(line: 707, column: 74, scope: !3929)
!3936 = !DILocalVariable(name: "b", scope: !3929, file: !1012, line: 709, type: !3354)
!3937 = !DILocation(line: 709, column: 17, scope: !3929)
!3938 = !DILocation(line: 709, column: 31, scope: !3929)
!3939 = !DILocation(line: 709, column: 22, scope: !3929)
!3940 = !DILocation(line: 709, column: 25, scope: !3929)
!3941 = !DILocalVariable(name: "n", scope: !3929, file: !1012, line: 710, type: !996)
!3942 = !DILocation(line: 710, column: 9, scope: !3929)
!3943 = !DILocalVariable(name: "ch", scope: !3929, file: !1012, line: 710, type: !996)
!3944 = !DILocation(line: 710, column: 12, scope: !3929)
!3945 = !DILocalVariable(name: "nsamples", scope: !3929, file: !1012, line: 710, type: !996)
!3946 = !DILocation(line: 710, column: 16, scope: !3929)
!3947 = !DILocation(line: 710, column: 27, scope: !3929)
!3948 = !DILocation(line: 710, column: 30, scope: !3929)
!3949 = !DILocation(line: 712, column: 13, scope: !3950)
!3950 = distinct !DILexicalBlock(scope: !3929, file: !1012, line: 712, column: 5)
!3951 = !DILocation(line: 712, column: 10, scope: !3950)
!3952 = !DILocation(line: 712, column: 18, scope: !3953)
!3953 = !DILexicalBlockFile(scope: !3954, file: !1012, discriminator: 1)
!3954 = distinct !DILexicalBlock(scope: !3950, file: !1012, line: 712, column: 5)
!3955 = !DILocation(line: 712, column: 23, scope: !3953)
!3956 = !DILocation(line: 712, column: 26, scope: !3953)
!3957 = !DILocation(line: 712, column: 21, scope: !3953)
!3958 = !DILocation(line: 712, column: 5, scope: !3953)
!3959 = !DILocalVariable(name: "shift", scope: !3960, file: !1012, line: 713, type: !996)
!3960 = distinct !DILexicalBlock(scope: !3954, file: !1012, line: 712, column: 43)
!3961 = !DILocation(line: 713, column: 13, scope: !3960)
!3962 = !DILocation(line: 713, column: 39, scope: !3960)
!3963 = !DILocation(line: 713, column: 42, scope: !3960)
!3964 = !DILocation(line: 713, column: 45, scope: !3960)
!3965 = !DILocation(line: 713, column: 51, scope: !3960)
!3966 = !DILocation(line: 713, column: 21, scope: !3960)
!3967 = !DILocation(line: 714, column: 13, scope: !3968)
!3968 = distinct !DILexicalBlock(scope: !3960, file: !1012, line: 714, column: 13)
!3969 = !DILocation(line: 714, column: 13, scope: !3960)
!3970 = !DILocalVariable(name: "msb", scope: !3971, file: !1012, line: 715, type: !994)
!3971 = distinct !DILexicalBlock(scope: !3968, file: !1012, line: 714, column: 20)
!3972 = !DILocation(line: 715, column: 22, scope: !3971)
!3973 = !DILocation(line: 715, column: 49, scope: !3971)
!3974 = !DILocation(line: 715, column: 28, scope: !3971)
!3975 = !DILocation(line: 715, column: 31, scope: !3971)
!3976 = !DILocation(line: 716, column: 34, scope: !3977)
!3977 = distinct !DILexicalBlock(scope: !3971, file: !1012, line: 716, column: 17)
!3978 = !DILocation(line: 716, column: 17, scope: !3977)
!3979 = !DILocation(line: 716, column: 20, scope: !3977)
!3980 = !DILocation(line: 716, column: 17, scope: !3971)
!3981 = !DILocalVariable(name: "lsb", scope: !3982, file: !1012, line: 717, type: !994)
!3982 = distinct !DILexicalBlock(scope: !3977, file: !1012, line: 716, column: 39)
!3983 = !DILocation(line: 717, column: 26, scope: !3982)
!3984 = !DILocation(line: 717, column: 53, scope: !3982)
!3985 = !DILocation(line: 717, column: 32, scope: !3982)
!3986 = !DILocation(line: 717, column: 35, scope: !3982)
!3987 = !DILocalVariable(name: "adj", scope: !3982, file: !1012, line: 718, type: !996)
!3988 = !DILocation(line: 718, column: 21, scope: !3982)
!3989 = !DILocation(line: 718, column: 47, scope: !3982)
!3990 = !DILocation(line: 718, column: 27, scope: !3982)
!3991 = !DILocation(line: 718, column: 30, scope: !3982)
!3992 = !DILocation(line: 719, column: 24, scope: !3993)
!3993 = distinct !DILexicalBlock(scope: !3982, file: !1012, line: 719, column: 17)
!3994 = !DILocation(line: 719, column: 22, scope: !3993)
!3995 = !DILocation(line: 719, column: 29, scope: !3996)
!3996 = !DILexicalBlockFile(scope: !3997, file: !1012, discriminator: 1)
!3997 = distinct !DILexicalBlock(scope: !3993, file: !1012, line: 719, column: 17)
!3998 = !DILocation(line: 719, column: 33, scope: !3996)
!3999 = !DILocation(line: 719, column: 31, scope: !3996)
!4000 = !DILocation(line: 719, column: 17, scope: !3996)
!4001 = !DILocation(line: 720, column: 34, scope: !3997)
!4002 = !DILocation(line: 720, column: 30, scope: !3997)
!4003 = !DILocation(line: 720, column: 55, scope: !3997)
!4004 = !DILocation(line: 720, column: 52, scope: !3997)
!4005 = !DILocation(line: 720, column: 37, scope: !3997)
!4006 = !DILocation(line: 720, column: 69, scope: !3997)
!4007 = !DILocation(line: 720, column: 65, scope: !3997)
!4008 = !DILocation(line: 720, column: 75, scope: !3997)
!4009 = !DILocation(line: 720, column: 72, scope: !3997)
!4010 = !DILocation(line: 720, column: 62, scope: !3997)
!4011 = !DILocation(line: 720, column: 25, scope: !3997)
!4012 = !DILocation(line: 720, column: 21, scope: !3997)
!4013 = !DILocation(line: 720, column: 28, scope: !3997)
!4014 = !DILocation(line: 719, column: 44, scope: !4015)
!4015 = !DILexicalBlockFile(scope: !3997, file: !1012, discriminator: 2)
!4016 = !DILocation(line: 719, column: 17, scope: !4015)
!4017 = distinct !{!4017, !4018}
!4018 = !DILocation(line: 719, column: 17, scope: !3982)
!4019 = !DILocation(line: 721, column: 13, scope: !3982)
!4020 = !DILocation(line: 722, column: 24, scope: !4021)
!4021 = distinct !DILexicalBlock(scope: !4022, file: !1012, line: 722, column: 17)
!4022 = distinct !DILexicalBlock(scope: !3977, file: !1012, line: 721, column: 20)
!4023 = !DILocation(line: 722, column: 22, scope: !4021)
!4024 = !DILocation(line: 722, column: 29, scope: !4025)
!4025 = !DILexicalBlockFile(scope: !4026, file: !1012, discriminator: 1)
!4026 = distinct !DILexicalBlock(scope: !4021, file: !1012, line: 722, column: 17)
!4027 = !DILocation(line: 722, column: 33, scope: !4025)
!4028 = !DILocation(line: 722, column: 31, scope: !4025)
!4029 = !DILocation(line: 722, column: 17, scope: !4025)
!4030 = !DILocation(line: 723, column: 34, scope: !4026)
!4031 = !DILocation(line: 723, column: 30, scope: !4026)
!4032 = !DILocation(line: 723, column: 55, scope: !4026)
!4033 = !DILocation(line: 723, column: 52, scope: !4026)
!4034 = !DILocation(line: 723, column: 37, scope: !4026)
!4035 = !DILocation(line: 723, column: 25, scope: !4026)
!4036 = !DILocation(line: 723, column: 21, scope: !4026)
!4037 = !DILocation(line: 723, column: 28, scope: !4026)
!4038 = !DILocation(line: 722, column: 44, scope: !4039)
!4039 = !DILexicalBlockFile(scope: !4026, file: !1012, discriminator: 2)
!4040 = !DILocation(line: 722, column: 17, scope: !4039)
!4041 = distinct !{!4041, !4042}
!4042 = !DILocation(line: 722, column: 17, scope: !4022)
!4043 = !DILocation(line: 725, column: 9, scope: !3971)
!4044 = !DILocation(line: 726, column: 5, scope: !3960)
!4045 = !DILocation(line: 712, column: 39, scope: !4046)
!4046 = !DILexicalBlockFile(scope: !3954, file: !1012, discriminator: 2)
!4047 = !DILocation(line: 712, column: 5, scope: !4046)
!4048 = distinct !{!4048, !4049}
!4049 = !DILocation(line: 712, column: 5, scope: !3929)
!4050 = !DILocation(line: 727, column: 1, scope: !3929)
!4051 = distinct !DISubprogram(name: "is_hier_dmix_chset", scope: !1012, file: !1012, line: 872, type: !4052, isLocal: true, isDefinition: true, scopeLine: 873, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!4052 = !DISubroutineType(types: !4053)
!4053 = !{!996, !2698}
!4054 = !DILocalVariable(name: "c", arg: 1, scope: !4051, file: !1012, line: 872, type: !2698)
!4055 = !DILocation(line: 872, column: 44, scope: !4051)
!4056 = !DILocation(line: 874, column: 13, scope: !4051)
!4057 = !DILocation(line: 874, column: 16, scope: !4051)
!4058 = !DILocation(line: 874, column: 30, scope: !4051)
!4059 = !DILocation(line: 874, column: 33, scope: !4060)
!4060 = !DILexicalBlockFile(scope: !4051, file: !1012, discriminator: 1)
!4061 = !DILocation(line: 874, column: 36, scope: !4060)
!4062 = !DILocation(line: 874, column: 50, scope: !4060)
!4063 = !DILocation(line: 874, column: 53, scope: !4064)
!4064 = !DILexicalBlockFile(scope: !4051, file: !1012, discriminator: 2)
!4065 = !DILocation(line: 874, column: 56, scope: !4064)
!4066 = !DILocation(line: 874, column: 50, scope: !4064)
!4067 = !DILocation(line: 874, column: 50, scope: !4068)
!4068 = !DILexicalBlockFile(scope: !4051, file: !1012, discriminator: 3)
!4069 = !DILocation(line: 874, column: 5, scope: !4068)
!4070 = distinct !DISubprogram(name: "scale_down_mix", scope: !1012, file: !1012, line: 1209, type: !3345, isLocal: true, isDefinition: true, scopeLine: 1210, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!4071 = !DILocalVariable(name: "s", arg: 1, scope: !4070, file: !1012, line: 1209, type: !1015)
!4072 = !DILocation(line: 1209, column: 43, scope: !4070)
!4073 = !DILocalVariable(name: "o", arg: 2, scope: !4070, file: !1012, line: 1209, type: !2698)
!4074 = !DILocation(line: 1209, column: 59, scope: !4070)
!4075 = !DILocalVariable(name: "band", arg: 3, scope: !4070, file: !1012, line: 1209, type: !996)
!4076 = !DILocation(line: 1209, column: 66, scope: !4070)
!4077 = !DILocalVariable(name: "i", scope: !4070, file: !1012, line: 1211, type: !996)
!4078 = !DILocation(line: 1211, column: 9, scope: !4070)
!4079 = !DILocalVariable(name: "j", scope: !4070, file: !1012, line: 1211, type: !996)
!4080 = !DILocation(line: 1211, column: 12, scope: !4070)
!4081 = !DILocalVariable(name: "nchannels", scope: !4070, file: !1012, line: 1211, type: !996)
!4082 = !DILocation(line: 1211, column: 15, scope: !4070)
!4083 = !DILocalVariable(name: "c", scope: !4070, file: !1012, line: 1212, type: !2698)
!4084 = !DILocation(line: 1212, column: 18, scope: !4070)
!4085 = !DILocation(line: 1214, column: 12, scope: !4086)
!4086 = distinct !DILexicalBlock(scope: !4070, file: !1012, line: 1214, column: 5)
!4087 = !DILocation(line: 1214, column: 21, scope: !4086)
!4088 = !DILocation(line: 1214, column: 24, scope: !4086)
!4089 = !DILocation(line: 1214, column: 19, scope: !4086)
!4090 = !DILocation(line: 1214, column: 10, scope: !4086)
!4091 = !DILocation(line: 1214, column: 31, scope: !4092)
!4092 = !DILexicalBlockFile(scope: !4093, file: !1012, discriminator: 1)
!4093 = distinct !DILexicalBlock(scope: !4086, file: !1012, line: 1214, column: 5)
!4094 = !DILocation(line: 1214, column: 35, scope: !4092)
!4095 = !DILocation(line: 1214, column: 38, scope: !4092)
!4096 = !DILocation(line: 1214, column: 33, scope: !4092)
!4097 = !DILocation(line: 1214, column: 5, scope: !4092)
!4098 = !DILocation(line: 1215, column: 14, scope: !4099)
!4099 = distinct !DILexicalBlock(scope: !4100, file: !1012, line: 1215, column: 13)
!4100 = distinct !DILexicalBlock(scope: !4093, file: !1012, line: 1214, column: 63)
!4101 = !DILocation(line: 1215, column: 17, scope: !4099)
!4102 = !DILocation(line: 1215, column: 13, scope: !4100)
!4103 = !DILocation(line: 1216, column: 13, scope: !4099)
!4104 = !DILocation(line: 1219, column: 16, scope: !4105)
!4105 = distinct !DILexicalBlock(scope: !4100, file: !1012, line: 1219, column: 9)
!4106 = !DILocation(line: 1219, column: 14, scope: !4105)
!4107 = !DILocation(line: 1219, column: 21, scope: !4108)
!4108 = !DILexicalBlockFile(scope: !4109, file: !1012, discriminator: 1)
!4109 = distinct !DILexicalBlock(scope: !4105, file: !1012, line: 1219, column: 9)
!4110 = !DILocation(line: 1219, column: 25, scope: !4108)
!4111 = !DILocation(line: 1219, column: 28, scope: !4108)
!4112 = !DILocation(line: 1219, column: 23, scope: !4108)
!4113 = !DILocation(line: 1219, column: 9, scope: !4108)
!4114 = !DILocalVariable(name: "scale", scope: !4115, file: !1012, line: 1220, type: !996)
!4115 = distinct !DILexicalBlock(scope: !4109, file: !1012, line: 1219, column: 44)
!4116 = !DILocation(line: 1220, column: 17, scope: !4115)
!4117 = !DILocation(line: 1220, column: 48, scope: !4115)
!4118 = !DILocation(line: 1220, column: 25, scope: !4115)
!4119 = !DILocation(line: 1220, column: 28, scope: !4115)
!4120 = !DILocation(line: 1221, column: 17, scope: !4121)
!4121 = distinct !DILexicalBlock(scope: !4115, file: !1012, line: 1221, column: 17)
!4122 = !DILocation(line: 1221, column: 23, scope: !4121)
!4123 = !DILocation(line: 1221, column: 17, scope: !4115)
!4124 = !DILocation(line: 1222, column: 17, scope: !4125)
!4125 = distinct !DILexicalBlock(scope: !4121, file: !1012, line: 1221, column: 37)
!4126 = !DILocation(line: 1222, column: 20, scope: !4125)
!4127 = !DILocation(line: 1222, column: 28, scope: !4125)
!4128 = !DILocation(line: 1222, column: 72, scope: !4125)
!4129 = !DILocation(line: 1222, column: 39, scope: !4125)
!4130 = !DILocation(line: 1222, column: 48, scope: !4125)
!4131 = !DILocation(line: 1222, column: 42, scope: !4125)
!4132 = !DILocation(line: 1222, column: 54, scope: !4125)
!4133 = !DILocation(line: 1223, column: 39, scope: !4125)
!4134 = !DILocation(line: 1223, column: 46, scope: !4125)
!4135 = !DILocation(line: 1223, column: 49, scope: !4125)
!4136 = !DILocation(line: 1224, column: 21, scope: !4137)
!4137 = distinct !DILexicalBlock(scope: !4125, file: !1012, line: 1224, column: 21)
!4138 = !DILocation(line: 1224, column: 21, scope: !4125)
!4139 = !DILocation(line: 1225, column: 21, scope: !4137)
!4140 = !DILocation(line: 1225, column: 24, scope: !4137)
!4141 = !DILocation(line: 1225, column: 32, scope: !4137)
!4142 = !DILocation(line: 1225, column: 59, scope: !4137)
!4143 = !DILocation(line: 1225, column: 43, scope: !4137)
!4144 = !DILocation(line: 1225, column: 46, scope: !4137)
!4145 = !DILocation(line: 1226, column: 43, scope: !4137)
!4146 = !DILocation(line: 1227, column: 13, scope: !4125)
!4147 = !DILocation(line: 1228, column: 9, scope: !4115)
!4148 = !DILocation(line: 1219, column: 40, scope: !4149)
!4149 = !DILexicalBlockFile(scope: !4109, file: !1012, discriminator: 2)
!4150 = !DILocation(line: 1219, column: 9, scope: !4149)
!4151 = distinct !{!4151, !4152}
!4152 = !DILocation(line: 1219, column: 9, scope: !4100)
!4153 = !DILocation(line: 1230, column: 13, scope: !4154)
!4154 = distinct !DILexicalBlock(scope: !4100, file: !1012, line: 1230, column: 13)
!4155 = !DILocation(line: 1230, column: 26, scope: !4154)
!4156 = !DILocation(line: 1230, column: 29, scope: !4154)
!4157 = !DILocation(line: 1230, column: 23, scope: !4154)
!4158 = !DILocation(line: 1230, column: 13, scope: !4100)
!4159 = !DILocation(line: 1231, column: 13, scope: !4154)
!4160 = !DILocation(line: 1232, column: 5, scope: !4100)
!4161 = !DILocation(line: 1214, column: 54, scope: !4162)
!4162 = !DILexicalBlockFile(scope: !4093, file: !1012, discriminator: 2)
!4163 = !DILocation(line: 1214, column: 59, scope: !4162)
!4164 = !DILocation(line: 1214, column: 5, scope: !4162)
!4165 = distinct !{!4165, !4166}
!4166 = !DILocation(line: 1214, column: 5, scope: !4070)
!4167 = !DILocation(line: 1233, column: 1, scope: !4070)
!4168 = distinct !DISubprogram(name: "undo_down_mix", scope: !1012, file: !1012, line: 1178, type: !3345, isLocal: true, isDefinition: true, scopeLine: 1179, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!4169 = !DILocalVariable(name: "s", arg: 1, scope: !4168, file: !1012, line: 1178, type: !1015)
!4170 = !DILocation(line: 1178, column: 42, scope: !4168)
!4171 = !DILocalVariable(name: "o", arg: 2, scope: !4168, file: !1012, line: 1178, type: !2698)
!4172 = !DILocation(line: 1178, column: 58, scope: !4168)
!4173 = !DILocalVariable(name: "band", arg: 3, scope: !4168, file: !1012, line: 1178, type: !996)
!4174 = !DILocation(line: 1178, column: 65, scope: !4168)
!4175 = !DILocalVariable(name: "i", scope: !4168, file: !1012, line: 1180, type: !996)
!4176 = !DILocation(line: 1180, column: 9, scope: !4168)
!4177 = !DILocalVariable(name: "j", scope: !4168, file: !1012, line: 1180, type: !996)
!4178 = !DILocation(line: 1180, column: 12, scope: !4168)
!4179 = !DILocalVariable(name: "k", scope: !4168, file: !1012, line: 1180, type: !996)
!4180 = !DILocation(line: 1180, column: 15, scope: !4168)
!4181 = !DILocalVariable(name: "nchannels", scope: !4168, file: !1012, line: 1180, type: !996)
!4182 = !DILocation(line: 1180, column: 18, scope: !4168)
!4183 = !DILocalVariable(name: "coeff_ptr", scope: !4168, file: !1012, line: 1180, type: !1313)
!4184 = !DILocation(line: 1180, column: 34, scope: !4168)
!4185 = !DILocation(line: 1180, column: 46, scope: !4168)
!4186 = !DILocation(line: 1180, column: 49, scope: !4168)
!4187 = !DILocalVariable(name: "c", scope: !4168, file: !1012, line: 1181, type: !2698)
!4188 = !DILocation(line: 1181, column: 18, scope: !4168)
!4189 = !DILocation(line: 1183, column: 12, scope: !4190)
!4190 = distinct !DILexicalBlock(scope: !4168, file: !1012, line: 1183, column: 5)
!4191 = !DILocation(line: 1183, column: 21, scope: !4190)
!4192 = !DILocation(line: 1183, column: 24, scope: !4190)
!4193 = !DILocation(line: 1183, column: 19, scope: !4190)
!4194 = !DILocation(line: 1183, column: 10, scope: !4190)
!4195 = !DILocation(line: 1183, column: 31, scope: !4196)
!4196 = !DILexicalBlockFile(scope: !4197, file: !1012, discriminator: 1)
!4197 = distinct !DILexicalBlock(scope: !4190, file: !1012, line: 1183, column: 5)
!4198 = !DILocation(line: 1183, column: 35, scope: !4196)
!4199 = !DILocation(line: 1183, column: 38, scope: !4196)
!4200 = !DILocation(line: 1183, column: 33, scope: !4196)
!4201 = !DILocation(line: 1183, column: 5, scope: !4196)
!4202 = !DILocation(line: 1184, column: 14, scope: !4203)
!4203 = distinct !DILexicalBlock(scope: !4204, file: !1012, line: 1184, column: 13)
!4204 = distinct !DILexicalBlock(scope: !4197, file: !1012, line: 1183, column: 63)
!4205 = !DILocation(line: 1184, column: 17, scope: !4203)
!4206 = !DILocation(line: 1184, column: 13, scope: !4204)
!4207 = !DILocation(line: 1185, column: 13, scope: !4203)
!4208 = !DILocation(line: 1188, column: 16, scope: !4209)
!4209 = distinct !DILexicalBlock(scope: !4204, file: !1012, line: 1188, column: 9)
!4210 = !DILocation(line: 1188, column: 14, scope: !4209)
!4211 = !DILocation(line: 1188, column: 21, scope: !4212)
!4212 = !DILexicalBlockFile(scope: !4213, file: !1012, discriminator: 1)
!4213 = distinct !DILexicalBlock(scope: !4209, file: !1012, line: 1188, column: 9)
!4214 = !DILocation(line: 1188, column: 25, scope: !4212)
!4215 = !DILocation(line: 1188, column: 28, scope: !4212)
!4216 = !DILocation(line: 1188, column: 23, scope: !4212)
!4217 = !DILocation(line: 1188, column: 9, scope: !4212)
!4218 = !DILocation(line: 1189, column: 20, scope: !4219)
!4219 = distinct !DILexicalBlock(scope: !4220, file: !1012, line: 1189, column: 13)
!4220 = distinct !DILexicalBlock(scope: !4213, file: !1012, line: 1188, column: 44)
!4221 = !DILocation(line: 1189, column: 18, scope: !4219)
!4222 = !DILocation(line: 1189, column: 25, scope: !4223)
!4223 = !DILexicalBlockFile(scope: !4224, file: !1012, discriminator: 1)
!4224 = distinct !DILexicalBlock(scope: !4219, file: !1012, line: 1189, column: 13)
!4225 = !DILocation(line: 1189, column: 29, scope: !4223)
!4226 = !DILocation(line: 1189, column: 32, scope: !4223)
!4227 = !DILocation(line: 1189, column: 27, scope: !4223)
!4228 = !DILocation(line: 1189, column: 13, scope: !4223)
!4229 = !DILocalVariable(name: "coeff", scope: !4230, file: !1012, line: 1190, type: !996)
!4230 = distinct !DILexicalBlock(scope: !4224, file: !1012, line: 1189, column: 48)
!4231 = !DILocation(line: 1190, column: 21, scope: !4230)
!4232 = !DILocation(line: 1190, column: 39, scope: !4230)
!4233 = !DILocation(line: 1190, column: 29, scope: !4230)
!4234 = !DILocation(line: 1191, column: 21, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4230, file: !1012, line: 1191, column: 21)
!4236 = !DILocation(line: 1191, column: 21, scope: !4230)
!4237 = !DILocation(line: 1192, column: 21, scope: !4238)
!4238 = distinct !DILexicalBlock(scope: !4235, file: !1012, line: 1191, column: 28)
!4239 = !DILocation(line: 1192, column: 24, scope: !4238)
!4240 = !DILocation(line: 1192, column: 32, scope: !4238)
!4241 = !DILocation(line: 1192, column: 74, scope: !4238)
!4242 = !DILocation(line: 1192, column: 41, scope: !4238)
!4243 = !DILocation(line: 1192, column: 50, scope: !4238)
!4244 = !DILocation(line: 1192, column: 44, scope: !4238)
!4245 = !DILocation(line: 1192, column: 56, scope: !4238)
!4246 = !DILocation(line: 1193, column: 74, scope: !4238)
!4247 = !DILocation(line: 1193, column: 41, scope: !4238)
!4248 = !DILocation(line: 1193, column: 50, scope: !4238)
!4249 = !DILocation(line: 1193, column: 44, scope: !4238)
!4250 = !DILocation(line: 1193, column: 56, scope: !4238)
!4251 = !DILocation(line: 1194, column: 41, scope: !4238)
!4252 = !DILocation(line: 1194, column: 48, scope: !4238)
!4253 = !DILocation(line: 1194, column: 51, scope: !4238)
!4254 = !DILocation(line: 1195, column: 25, scope: !4255)
!4255 = distinct !DILexicalBlock(scope: !4238, file: !1012, line: 1195, column: 25)
!4256 = !DILocation(line: 1195, column: 25, scope: !4238)
!4257 = !DILocation(line: 1196, column: 25, scope: !4255)
!4258 = !DILocation(line: 1196, column: 28, scope: !4255)
!4259 = !DILocation(line: 1196, column: 36, scope: !4255)
!4260 = !DILocation(line: 1196, column: 61, scope: !4255)
!4261 = !DILocation(line: 1196, column: 45, scope: !4255)
!4262 = !DILocation(line: 1196, column: 48, scope: !4255)
!4263 = !DILocation(line: 1197, column: 61, scope: !4255)
!4264 = !DILocation(line: 1197, column: 45, scope: !4255)
!4265 = !DILocation(line: 1197, column: 48, scope: !4255)
!4266 = !DILocation(line: 1198, column: 45, scope: !4255)
!4267 = !DILocation(line: 1199, column: 17, scope: !4238)
!4268 = !DILocation(line: 1200, column: 13, scope: !4230)
!4269 = !DILocation(line: 1189, column: 44, scope: !4270)
!4270 = !DILexicalBlockFile(scope: !4224, file: !1012, discriminator: 2)
!4271 = !DILocation(line: 1189, column: 13, scope: !4270)
!4272 = distinct !{!4272, !4273}
!4273 = !DILocation(line: 1189, column: 13, scope: !4220)
!4274 = !DILocation(line: 1201, column: 9, scope: !4220)
!4275 = !DILocation(line: 1188, column: 40, scope: !4276)
!4276 = !DILexicalBlockFile(scope: !4213, file: !1012, discriminator: 2)
!4277 = !DILocation(line: 1188, column: 9, scope: !4276)
!4278 = distinct !{!4278, !4279}
!4279 = !DILocation(line: 1188, column: 9, scope: !4204)
!4280 = !DILocation(line: 1203, column: 22, scope: !4204)
!4281 = !DILocation(line: 1203, column: 25, scope: !4204)
!4282 = !DILocation(line: 1203, column: 19, scope: !4204)
!4283 = !DILocation(line: 1204, column: 13, scope: !4284)
!4284 = distinct !DILexicalBlock(scope: !4204, file: !1012, line: 1204, column: 13)
!4285 = !DILocation(line: 1204, column: 26, scope: !4284)
!4286 = !DILocation(line: 1204, column: 29, scope: !4284)
!4287 = !DILocation(line: 1204, column: 23, scope: !4284)
!4288 = !DILocation(line: 1204, column: 13, scope: !4204)
!4289 = !DILocation(line: 1205, column: 13, scope: !4284)
!4290 = !DILocation(line: 1206, column: 5, scope: !4204)
!4291 = !DILocation(line: 1183, column: 54, scope: !4292)
!4292 = !DILexicalBlockFile(scope: !4197, file: !1012, discriminator: 2)
!4293 = !DILocation(line: 1183, column: 59, scope: !4292)
!4294 = !DILocation(line: 1183, column: 5, scope: !4292)
!4295 = distinct !{!4295, !4296}
!4296 = !DILocation(line: 1183, column: 5, scope: !4168)
!4297 = !DILocation(line: 1207, column: 1, scope: !4168)
!4298 = distinct !DISubprogram(name: "chs_assemble_freq_bands", scope: !1012, file: !1012, line: 729, type: !3700, isLocal: true, isDefinition: true, scopeLine: 730, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!4299 = !DILocalVariable(name: "s", arg: 1, scope: !4298, file: !1012, line: 729, type: !1015)
!4300 = !DILocation(line: 729, column: 51, scope: !4298)
!4301 = !DILocalVariable(name: "c", arg: 2, scope: !4298, file: !1012, line: 729, type: !2698)
!4302 = !DILocation(line: 729, column: 67, scope: !4298)
!4303 = !DILocalVariable(name: "ch", scope: !4298, file: !1012, line: 731, type: !996)
!4304 = !DILocation(line: 731, column: 9, scope: !4298)
!4305 = !DILocalVariable(name: "nsamples", scope: !4298, file: !1012, line: 731, type: !996)
!4306 = !DILocation(line: 731, column: 13, scope: !4298)
!4307 = !DILocation(line: 731, column: 24, scope: !4298)
!4308 = !DILocation(line: 731, column: 27, scope: !4298)
!4309 = !DILocalVariable(name: "ptr", scope: !4298, file: !1012, line: 732, type: !994)
!4310 = !DILocation(line: 732, column: 14, scope: !4298)
!4311 = !DILocation(line: 737, column: 21, scope: !4298)
!4312 = !DILocation(line: 737, column: 24, scope: !4298)
!4313 = !DILocation(line: 737, column: 20, scope: !4298)
!4314 = !DILocation(line: 737, column: 43, scope: !4298)
!4315 = !DILocation(line: 737, column: 46, scope: !4298)
!4316 = !DILocation(line: 738, column: 24, scope: !4298)
!4317 = !DILocation(line: 738, column: 22, scope: !4298)
!4318 = !DILocation(line: 738, column: 35, scope: !4298)
!4319 = !DILocation(line: 738, column: 38, scope: !4298)
!4320 = !DILocation(line: 738, column: 33, scope: !4298)
!4321 = !DILocation(line: 738, column: 20, scope: !4298)
!4322 = !DILocation(line: 738, column: 48, scope: !4298)
!4323 = !DILocation(line: 737, column: 5, scope: !4298)
!4324 = !DILocation(line: 739, column: 10, scope: !4325)
!4325 = distinct !DILexicalBlock(scope: !4298, file: !1012, line: 739, column: 9)
!4326 = !DILocation(line: 739, column: 13, scope: !4325)
!4327 = !DILocation(line: 739, column: 9, scope: !4298)
!4328 = !DILocation(line: 740, column: 9, scope: !4325)
!4329 = !DILocation(line: 743, column: 11, scope: !4298)
!4330 = !DILocation(line: 743, column: 14, scope: !4298)
!4331 = !DILocation(line: 743, column: 9, scope: !4298)
!4332 = !DILocation(line: 744, column: 13, scope: !4333)
!4333 = distinct !DILexicalBlock(scope: !4298, file: !1012, line: 744, column: 5)
!4334 = !DILocation(line: 744, column: 10, scope: !4333)
!4335 = !DILocation(line: 744, column: 18, scope: !4336)
!4336 = !DILexicalBlockFile(scope: !4337, file: !1012, discriminator: 1)
!4337 = distinct !DILexicalBlock(scope: !4333, file: !1012, line: 744, column: 5)
!4338 = !DILocation(line: 744, column: 23, scope: !4336)
!4339 = !DILocation(line: 744, column: 26, scope: !4336)
!4340 = !DILocation(line: 744, column: 21, scope: !4336)
!4341 = !DILocation(line: 744, column: 5, scope: !4336)
!4342 = !DILocalVariable(name: "band0", scope: !4343, file: !1012, line: 745, type: !994)
!4343 = distinct !DILexicalBlock(scope: !4337, file: !1012, line: 744, column: 43)
!4344 = !DILocation(line: 745, column: 18, scope: !4343)
!4345 = !DILocation(line: 745, column: 56, scope: !4343)
!4346 = !DILocation(line: 745, column: 26, scope: !4343)
!4347 = !DILocation(line: 745, column: 29, scope: !4343)
!4348 = !DILocation(line: 745, column: 38, scope: !4343)
!4349 = !DILocalVariable(name: "band1", scope: !4343, file: !1012, line: 746, type: !994)
!4350 = !DILocation(line: 746, column: 18, scope: !4343)
!4351 = !DILocation(line: 746, column: 56, scope: !4343)
!4352 = !DILocation(line: 746, column: 26, scope: !4343)
!4353 = !DILocation(line: 746, column: 29, scope: !4343)
!4354 = !DILocation(line: 746, column: 38, scope: !4343)
!4355 = !DILocation(line: 749, column: 16, scope: !4343)
!4356 = !DILocation(line: 749, column: 22, scope: !4343)
!4357 = !DILocation(line: 749, column: 9, scope: !4343)
!4358 = !DILocation(line: 750, column: 32, scope: !4343)
!4359 = !DILocation(line: 750, column: 16, scope: !4343)
!4360 = !DILocation(line: 750, column: 19, scope: !4343)
!4361 = !DILocation(line: 753, column: 9, scope: !4343)
!4362 = !DILocation(line: 753, column: 12, scope: !4343)
!4363 = !DILocation(line: 753, column: 20, scope: !4343)
!4364 = !DILocation(line: 753, column: 40, scope: !4343)
!4365 = !DILocation(line: 753, column: 45, scope: !4343)
!4366 = !DILocation(line: 753, column: 52, scope: !4343)
!4367 = !DILocation(line: 755, column: 40, scope: !4343)
!4368 = !DILocation(line: 758, column: 46, scope: !4343)
!4369 = !DILocation(line: 758, column: 39, scope: !4343)
!4370 = !DILocation(line: 758, column: 27, scope: !4343)
!4371 = !DILocation(line: 758, column: 30, scope: !4343)
!4372 = !DILocation(line: 758, column: 9, scope: !4343)
!4373 = !DILocation(line: 758, column: 12, scope: !4343)
!4374 = !DILocation(line: 758, column: 44, scope: !4343)
!4375 = !DILocation(line: 759, column: 16, scope: !4343)
!4376 = !DILocation(line: 759, column: 25, scope: !4343)
!4377 = !DILocation(line: 759, column: 13, scope: !4343)
!4378 = !DILocation(line: 760, column: 5, scope: !4343)
!4379 = !DILocation(line: 744, column: 39, scope: !4380)
!4380 = !DILexicalBlockFile(scope: !4337, file: !1012, discriminator: 2)
!4381 = !DILocation(line: 744, column: 5, scope: !4380)
!4382 = distinct !{!4382, !4383}
!4383 = !DILocation(line: 744, column: 5, scope: !4298)
!4384 = !DILocation(line: 762, column: 5, scope: !4298)
!4385 = !DILocation(line: 763, column: 1, scope: !4298)
!4386 = distinct !DISubprogram(name: "clip23", scope: !4387, file: !4387, line: 54, type: !4388, isLocal: true, isDefinition: true, scopeLine: 54, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!4387 = !DIFile(filename: "libavcodec/dcamath.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!4388 = !DISubroutineType(types: !4389)
!4389 = !{!995, !995}
!4390 = !DILocalVariable(name: "a", arg: 1, scope: !4391, file: !2311, line: 215, type: !996)
!4391 = distinct !DISubprogram(name: "av_clip_intp2_c", scope: !2311, file: !2311, line: 215, type: !4392, isLocal: true, isDefinition: true, scopeLine: 216, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!4392 = !DISubroutineType(types: !4393)
!4393 = !{!996, !996, !996}
!4394 = !DILocation(line: 215, column: 93, scope: !4391, inlinedAt: !4395)
!4395 = distinct !DILocation(line: 54, column: 50, scope: !4386)
!4396 = !DILocalVariable(name: "p", arg: 2, scope: !4391, file: !2311, line: 215, type: !996)
!4397 = !DILocation(line: 215, column: 100, scope: !4391, inlinedAt: !4395)
!4398 = !DILocalVariable(name: "a", arg: 1, scope: !4386, file: !4387, line: 54, type: !995)
!4399 = !DILocation(line: 54, column: 38, scope: !4386)
!4400 = !DILocation(line: 54, column: 66, scope: !4386)
!4401 = !DILocation(line: 54, column: 50, scope: !4386)
!4402 = !DILocation(line: 217, column: 20, scope: !4403, inlinedAt: !4395)
!4403 = distinct !DILexicalBlock(scope: !4391, file: !2311, line: 217, column: 9)
!4404 = !DILocation(line: 217, column: 30, scope: !4403, inlinedAt: !4395)
!4405 = !DILocation(line: 217, column: 27, scope: !4403, inlinedAt: !4395)
!4406 = !DILocation(line: 217, column: 22, scope: !4403, inlinedAt: !4395)
!4407 = !DILocation(line: 217, column: 44, scope: !4403, inlinedAt: !4395)
!4408 = !DILocation(line: 217, column: 41, scope: !4403, inlinedAt: !4395)
!4409 = !DILocation(line: 217, column: 47, scope: !4403, inlinedAt: !4395)
!4410 = !DILocation(line: 217, column: 36, scope: !4403, inlinedAt: !4395)
!4411 = !DILocation(line: 217, column: 34, scope: !4403, inlinedAt: !4395)
!4412 = !DILocation(line: 217, column: 9, scope: !4391, inlinedAt: !4395)
!4413 = !DILocation(line: 218, column: 17, scope: !4403, inlinedAt: !4395)
!4414 = !DILocation(line: 218, column: 19, scope: !4403, inlinedAt: !4395)
!4415 = !DILocation(line: 218, column: 35, scope: !4403, inlinedAt: !4395)
!4416 = !DILocation(line: 218, column: 32, scope: !4403, inlinedAt: !4395)
!4417 = !DILocation(line: 218, column: 38, scope: !4403, inlinedAt: !4395)
!4418 = !DILocation(line: 218, column: 26, scope: !4403, inlinedAt: !4395)
!4419 = !DILocation(line: 218, column: 9, scope: !4403, inlinedAt: !4395)
!4420 = !DILocation(line: 220, column: 16, scope: !4403, inlinedAt: !4395)
!4421 = !DILocation(line: 220, column: 9, scope: !4403, inlinedAt: !4395)
!4422 = !DILocation(line: 221, column: 1, scope: !4391, inlinedAt: !4395)
!4423 = !DILocation(line: 54, column: 43, scope: !4386)
!4424 = distinct !DISubprogram(name: "ff_dca_xll_flush", scope: !1012, file: !1012, line: 1471, type: !2092, isLocal: false, isDefinition: true, scopeLine: 1472, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!4425 = !DILocalVariable(name: "s", arg: 1, scope: !4424, file: !1012, line: 1471, type: !1015)
!4426 = !DILocation(line: 1471, column: 60, scope: !4424)
!4427 = !DILocation(line: 1473, column: 15, scope: !4424)
!4428 = !DILocation(line: 1473, column: 5, scope: !4424)
!4429 = !DILocation(line: 1474, column: 1, scope: !4424)
!4430 = distinct !DISubprogram(name: "ff_dca_xll_close", scope: !1012, file: !1012, line: 1476, type: !2092, isLocal: false, isDefinition: true, scopeLine: 1477, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!4431 = !DILocalVariable(name: "s", arg: 1, scope: !4430, file: !1012, line: 1476, type: !1015)
!4432 = !DILocation(line: 1476, column: 60, scope: !4430)
!4433 = !DILocalVariable(name: "c", scope: !4430, file: !1012, line: 1478, type: !2698)
!4434 = !DILocation(line: 1478, column: 18, scope: !4430)
!4435 = !DILocalVariable(name: "i", scope: !4430, file: !1012, line: 1479, type: !996)
!4436 = !DILocation(line: 1479, column: 9, scope: !4430)
!4437 = !DILocalVariable(name: "j", scope: !4430, file: !1012, line: 1479, type: !996)
!4438 = !DILocation(line: 1479, column: 12, scope: !4430)
!4439 = !DILocation(line: 1481, column: 12, scope: !4440)
!4440 = distinct !DILexicalBlock(scope: !4430, file: !1012, line: 1481, column: 5)
!4441 = !DILocation(line: 1481, column: 21, scope: !4440)
!4442 = !DILocation(line: 1481, column: 24, scope: !4440)
!4443 = !DILocation(line: 1481, column: 19, scope: !4440)
!4444 = !DILocation(line: 1481, column: 10, scope: !4440)
!4445 = !DILocation(line: 1481, column: 31, scope: !4446)
!4446 = !DILexicalBlockFile(scope: !4447, file: !1012, discriminator: 1)
!4447 = distinct !DILexicalBlock(scope: !4440, file: !1012, line: 1481, column: 5)
!4448 = !DILocation(line: 1481, column: 33, scope: !4446)
!4449 = !DILocation(line: 1481, column: 5, scope: !4446)
!4450 = !DILocation(line: 1482, column: 16, scope: !4451)
!4451 = distinct !DILexicalBlock(scope: !4452, file: !1012, line: 1482, column: 9)
!4452 = distinct !DILexicalBlock(scope: !4447, file: !1012, line: 1481, column: 48)
!4453 = !DILocation(line: 1482, column: 14, scope: !4451)
!4454 = !DILocation(line: 1482, column: 21, scope: !4455)
!4455 = !DILexicalBlockFile(scope: !4456, file: !1012, discriminator: 1)
!4456 = distinct !DILexicalBlock(scope: !4451, file: !1012, line: 1482, column: 9)
!4457 = !DILocation(line: 1482, column: 23, scope: !4455)
!4458 = !DILocation(line: 1482, column: 9, scope: !4455)
!4459 = !DILocation(line: 1483, column: 40, scope: !4460)
!4460 = distinct !DILexicalBlock(scope: !4456, file: !1012, line: 1482, column: 33)
!4461 = !DILocation(line: 1483, column: 23, scope: !4460)
!4462 = !DILocation(line: 1483, column: 26, scope: !4460)
!4463 = !DILocation(line: 1483, column: 22, scope: !4460)
!4464 = !DILocation(line: 1483, column: 13, scope: !4460)
!4465 = !DILocation(line: 1484, column: 28, scope: !4460)
!4466 = !DILocation(line: 1484, column: 13, scope: !4460)
!4467 = !DILocation(line: 1484, column: 16, scope: !4460)
!4468 = !DILocation(line: 1484, column: 31, scope: !4460)
!4469 = !DILocation(line: 1485, column: 9, scope: !4460)
!4470 = !DILocation(line: 1482, column: 29, scope: !4471)
!4471 = !DILexicalBlockFile(scope: !4456, file: !1012, discriminator: 2)
!4472 = !DILocation(line: 1482, column: 9, scope: !4471)
!4473 = distinct !{!4473, !4474}
!4474 = !DILocation(line: 1482, column: 9, scope: !4452)
!4475 = !DILocation(line: 1486, column: 5, scope: !4452)
!4476 = !DILocation(line: 1481, column: 39, scope: !4477)
!4477 = !DILexicalBlockFile(scope: !4447, file: !1012, discriminator: 2)
!4478 = !DILocation(line: 1481, column: 44, scope: !4477)
!4479 = !DILocation(line: 1481, column: 5, scope: !4477)
!4480 = distinct !{!4480, !4481}
!4481 = !DILocation(line: 1481, column: 5, scope: !4430)
!4482 = !DILocation(line: 1488, column: 15, scope: !4430)
!4483 = !DILocation(line: 1488, column: 18, scope: !4430)
!4484 = !DILocation(line: 1488, column: 14, scope: !4430)
!4485 = !DILocation(line: 1488, column: 5, scope: !4430)
!4486 = !DILocation(line: 1489, column: 5, scope: !4430)
!4487 = !DILocation(line: 1489, column: 8, scope: !4430)
!4488 = !DILocation(line: 1489, column: 18, scope: !4430)
!4489 = !DILocation(line: 1491, column: 15, scope: !4430)
!4490 = !DILocation(line: 1491, column: 18, scope: !4430)
!4491 = !DILocation(line: 1491, column: 14, scope: !4430)
!4492 = !DILocation(line: 1491, column: 5, scope: !4430)
!4493 = !DILocation(line: 1492, column: 15, scope: !4430)
!4494 = !DILocation(line: 1492, column: 5, scope: !4430)
!4495 = !DILocation(line: 1493, column: 1, scope: !4430)
!4496 = distinct !DISubprogram(name: "parse_frame", scope: !1012, file: !1012, line: 1041, type: !2104, isLocal: true, isDefinition: true, scopeLine: 1042, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!4497 = !DILocalVariable(name: "s", arg: 1, scope: !4496, file: !1012, line: 1041, type: !1015)
!4498 = !DILocation(line: 1041, column: 39, scope: !4496)
!4499 = !DILocalVariable(name: "data", arg: 2, scope: !4496, file: !1012, line: 1041, type: !1149)
!4500 = !DILocation(line: 1041, column: 51, scope: !4496)
!4501 = !DILocalVariable(name: "size", arg: 3, scope: !4496, file: !1012, line: 1041, type: !996)
!4502 = !DILocation(line: 1041, column: 61, scope: !4496)
!4503 = !DILocalVariable(name: "asset", arg: 4, scope: !4496, file: !1012, line: 1041, type: !2003)
!4504 = !DILocation(line: 1041, column: 81, scope: !4496)
!4505 = !DILocalVariable(name: "ret", scope: !4496, file: !1012, line: 1043, type: !996)
!4506 = !DILocation(line: 1043, column: 9, scope: !4496)
!4507 = !DILocation(line: 1045, column: 32, scope: !4508)
!4508 = distinct !DILexicalBlock(scope: !4496, file: !1012, line: 1045, column: 9)
!4509 = !DILocation(line: 1045, column: 35, scope: !4508)
!4510 = !DILocation(line: 1045, column: 39, scope: !4508)
!4511 = !DILocation(line: 1045, column: 45, scope: !4508)
!4512 = !DILocation(line: 1045, column: 16, scope: !4508)
!4513 = !DILocation(line: 1045, column: 14, scope: !4508)
!4514 = !DILocation(line: 1045, column: 52, scope: !4508)
!4515 = !DILocation(line: 1045, column: 9, scope: !4496)
!4516 = !DILocation(line: 1046, column: 16, scope: !4508)
!4517 = !DILocation(line: 1046, column: 9, scope: !4508)
!4518 = !DILocation(line: 1047, column: 36, scope: !4519)
!4519 = distinct !DILexicalBlock(scope: !4496, file: !1012, line: 1047, column: 9)
!4520 = !DILocation(line: 1047, column: 16, scope: !4519)
!4521 = !DILocation(line: 1047, column: 14, scope: !4519)
!4522 = !DILocation(line: 1047, column: 40, scope: !4519)
!4523 = !DILocation(line: 1047, column: 9, scope: !4496)
!4524 = !DILocation(line: 1048, column: 16, scope: !4519)
!4525 = !DILocation(line: 1048, column: 9, scope: !4519)
!4526 = !DILocation(line: 1049, column: 34, scope: !4527)
!4527 = distinct !DILexicalBlock(scope: !4496, file: !1012, line: 1049, column: 9)
!4528 = !DILocation(line: 1049, column: 37, scope: !4527)
!4529 = !DILocation(line: 1049, column: 16, scope: !4527)
!4530 = !DILocation(line: 1049, column: 14, scope: !4527)
!4531 = !DILocation(line: 1049, column: 45, scope: !4527)
!4532 = !DILocation(line: 1049, column: 9, scope: !4496)
!4533 = !DILocation(line: 1050, column: 16, scope: !4527)
!4534 = !DILocation(line: 1050, column: 9, scope: !4527)
!4535 = !DILocation(line: 1051, column: 33, scope: !4536)
!4536 = distinct !DILexicalBlock(scope: !4496, file: !1012, line: 1051, column: 9)
!4537 = !DILocation(line: 1051, column: 16, scope: !4536)
!4538 = !DILocation(line: 1051, column: 14, scope: !4536)
!4539 = !DILocation(line: 1051, column: 37, scope: !4536)
!4540 = !DILocation(line: 1051, column: 9, scope: !4496)
!4541 = !DILocation(line: 1052, column: 16, scope: !4536)
!4542 = !DILocation(line: 1052, column: 9, scope: !4536)
!4543 = !DILocation(line: 1053, column: 32, scope: !4544)
!4544 = distinct !DILexicalBlock(scope: !4496, file: !1012, line: 1053, column: 9)
!4545 = !DILocation(line: 1053, column: 16, scope: !4544)
!4546 = !DILocation(line: 1053, column: 14, scope: !4544)
!4547 = !DILocation(line: 1053, column: 36, scope: !4544)
!4548 = !DILocation(line: 1053, column: 9, scope: !4496)
!4549 = !DILocation(line: 1054, column: 16, scope: !4544)
!4550 = !DILocation(line: 1054, column: 9, scope: !4544)
!4551 = !DILocation(line: 1055, column: 27, scope: !4552)
!4552 = distinct !DILexicalBlock(scope: !4496, file: !1012, line: 1055, column: 9)
!4553 = !DILocation(line: 1055, column: 30, scope: !4552)
!4554 = !DILocation(line: 1055, column: 34, scope: !4552)
!4555 = !DILocation(line: 1055, column: 37, scope: !4552)
!4556 = !DILocation(line: 1055, column: 48, scope: !4552)
!4557 = !DILocation(line: 1055, column: 9, scope: !4552)
!4558 = !DILocation(line: 1055, column: 9, scope: !4496)
!4559 = !DILocation(line: 1056, column: 16, scope: !4560)
!4560 = distinct !DILexicalBlock(scope: !4552, file: !1012, line: 1055, column: 54)
!4561 = !DILocation(line: 1056, column: 19, scope: !4560)
!4562 = !DILocation(line: 1056, column: 9, scope: !4560)
!4563 = !DILocation(line: 1057, column: 9, scope: !4560)
!4564 = !DILocation(line: 1059, column: 12, scope: !4496)
!4565 = !DILocation(line: 1059, column: 5, scope: !4496)
!4566 = !DILocation(line: 1060, column: 1, scope: !4496)
!4567 = distinct !DISubprogram(name: "init_get_bits8", scope: !1747, file: !1747, line: 650, type: !4568, isLocal: true, isDefinition: true, scopeLine: 652, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!4568 = !DISubroutineType(types: !4569)
!4569 = !{!996, !4570, !1137, !996}
!4570 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1746, size: 64, align: 64)
!4571 = !DILocalVariable(name: "s", arg: 1, scope: !4567, file: !1747, line: 650, type: !4570)
!4572 = !DILocation(line: 650, column: 49, scope: !4567)
!4573 = !DILocalVariable(name: "buffer", arg: 2, scope: !4567, file: !1747, line: 650, type: !1137)
!4574 = !DILocation(line: 650, column: 67, scope: !4567)
!4575 = !DILocalVariable(name: "byte_size", arg: 3, scope: !4567, file: !1747, line: 651, type: !996)
!4576 = !DILocation(line: 651, column: 38, scope: !4567)
!4577 = !DILocation(line: 653, column: 9, scope: !4578)
!4578 = distinct !DILexicalBlock(scope: !4567, file: !1747, line: 653, column: 9)
!4579 = !DILocation(line: 653, column: 19, scope: !4578)
!4580 = !DILocation(line: 653, column: 36, scope: !4578)
!4581 = !DILocation(line: 653, column: 39, scope: !4582)
!4582 = !DILexicalBlockFile(scope: !4578, file: !1747, discriminator: 1)
!4583 = !DILocation(line: 653, column: 49, scope: !4582)
!4584 = !DILocation(line: 653, column: 9, scope: !4582)
!4585 = !DILocation(line: 654, column: 19, scope: !4578)
!4586 = !DILocation(line: 654, column: 9, scope: !4578)
!4587 = !DILocation(line: 655, column: 26, scope: !4567)
!4588 = !DILocation(line: 655, column: 29, scope: !4567)
!4589 = !DILocation(line: 655, column: 37, scope: !4567)
!4590 = !DILocation(line: 655, column: 47, scope: !4567)
!4591 = !DILocation(line: 655, column: 12, scope: !4567)
!4592 = !DILocation(line: 655, column: 5, scope: !4567)
!4593 = distinct !DISubprogram(name: "parse_common_header", scope: !1012, file: !1012, line: 765, type: !4594, isLocal: true, isDefinition: true, scopeLine: 766, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!4594 = !DISubroutineType(types: !4595)
!4595 = !{!996, !1015}
!4596 = !DILocalVariable(name: "s", arg: 1, scope: !4593, file: !1012, line: 765, type: !1015)
!4597 = !DILocation(line: 765, column: 47, scope: !4593)
!4598 = !DILocalVariable(name: "stream_ver", scope: !4593, file: !1012, line: 767, type: !996)
!4599 = !DILocation(line: 767, column: 9, scope: !4593)
!4600 = !DILocalVariable(name: "header_size", scope: !4593, file: !1012, line: 767, type: !996)
!4601 = !DILocation(line: 767, column: 21, scope: !4593)
!4602 = !DILocalVariable(name: "frame_size_nbits", scope: !4593, file: !1012, line: 767, type: !996)
!4603 = !DILocation(line: 767, column: 34, scope: !4593)
!4604 = !DILocalVariable(name: "nframesegs_log2", scope: !4593, file: !1012, line: 767, type: !996)
!4605 = !DILocation(line: 767, column: 52, scope: !4593)
!4606 = !DILocation(line: 770, column: 24, scope: !4607)
!4607 = distinct !DILexicalBlock(scope: !4593, file: !1012, line: 770, column: 9)
!4608 = !DILocation(line: 770, column: 27, scope: !4607)
!4609 = !DILocation(line: 770, column: 9, scope: !4607)
!4610 = !DILocation(line: 770, column: 35, scope: !4607)
!4611 = !DILocation(line: 770, column: 9, scope: !4593)
!4612 = !DILocation(line: 771, column: 16, scope: !4613)
!4613 = distinct !DILexicalBlock(scope: !4607, file: !1012, line: 770, column: 51)
!4614 = !DILocation(line: 771, column: 19, scope: !4613)
!4615 = !DILocation(line: 771, column: 9, scope: !4613)
!4616 = !DILocation(line: 772, column: 9, scope: !4613)
!4617 = !DILocation(line: 776, column: 28, scope: !4593)
!4618 = !DILocation(line: 776, column: 31, scope: !4593)
!4619 = !DILocation(line: 776, column: 18, scope: !4593)
!4620 = !DILocation(line: 776, column: 38, scope: !4593)
!4621 = !DILocation(line: 776, column: 16, scope: !4593)
!4622 = !DILocation(line: 777, column: 9, scope: !4623)
!4623 = distinct !DILexicalBlock(scope: !4593, file: !1012, line: 777, column: 9)
!4624 = !DILocation(line: 777, column: 20, scope: !4623)
!4625 = !DILocation(line: 777, column: 9, scope: !4593)
!4626 = !DILocation(line: 778, column: 31, scope: !4627)
!4627 = distinct !DILexicalBlock(scope: !4623, file: !1012, line: 777, column: 25)
!4628 = !DILocation(line: 778, column: 34, scope: !4627)
!4629 = !DILocation(line: 778, column: 66, scope: !4627)
!4630 = !DILocation(line: 778, column: 9, scope: !4627)
!4631 = !DILocation(line: 779, column: 9, scope: !4627)
!4632 = !DILocation(line: 783, column: 29, scope: !4593)
!4633 = !DILocation(line: 783, column: 32, scope: !4593)
!4634 = !DILocation(line: 783, column: 19, scope: !4593)
!4635 = !DILocation(line: 783, column: 39, scope: !4593)
!4636 = !DILocation(line: 783, column: 17, scope: !4593)
!4637 = !DILocation(line: 786, column: 26, scope: !4638)
!4638 = distinct !DILexicalBlock(scope: !4593, file: !1012, line: 786, column: 9)
!4639 = !DILocation(line: 786, column: 29, scope: !4638)
!4640 = !DILocation(line: 786, column: 37, scope: !4638)
!4641 = !DILocation(line: 786, column: 40, scope: !4638)
!4642 = !DILocation(line: 786, column: 48, scope: !4638)
!4643 = !DILocation(line: 786, column: 60, scope: !4638)
!4644 = !DILocation(line: 786, column: 9, scope: !4638)
!4645 = !DILocation(line: 786, column: 9, scope: !4593)
!4646 = !DILocation(line: 787, column: 16, scope: !4647)
!4647 = distinct !DILexicalBlock(scope: !4638, file: !1012, line: 786, column: 66)
!4648 = !DILocation(line: 787, column: 19, scope: !4647)
!4649 = !DILocation(line: 787, column: 9, scope: !4647)
!4650 = !DILocation(line: 788, column: 9, scope: !4647)
!4651 = !DILocation(line: 792, column: 34, scope: !4593)
!4652 = !DILocation(line: 792, column: 37, scope: !4593)
!4653 = !DILocation(line: 792, column: 24, scope: !4593)
!4654 = !DILocation(line: 792, column: 44, scope: !4593)
!4655 = !DILocation(line: 792, column: 22, scope: !4593)
!4656 = !DILocation(line: 795, column: 36, scope: !4593)
!4657 = !DILocation(line: 795, column: 39, scope: !4593)
!4658 = !DILocation(line: 795, column: 43, scope: !4593)
!4659 = !DILocation(line: 795, column: 21, scope: !4593)
!4660 = !DILocation(line: 795, column: 5, scope: !4593)
!4661 = !DILocation(line: 795, column: 8, scope: !4593)
!4662 = !DILocation(line: 795, column: 19, scope: !4593)
!4663 = !DILocation(line: 796, column: 9, scope: !4664)
!4664 = distinct !DILexicalBlock(scope: !4593, file: !1012, line: 796, column: 9)
!4665 = !DILocation(line: 796, column: 12, scope: !4664)
!4666 = !DILocation(line: 796, column: 23, scope: !4664)
!4667 = !DILocation(line: 796, column: 27, scope: !4664)
!4668 = !DILocation(line: 796, column: 30, scope: !4669)
!4669 = !DILexicalBlockFile(scope: !4664, file: !1012, discriminator: 1)
!4670 = !DILocation(line: 796, column: 33, scope: !4669)
!4671 = !DILocation(line: 796, column: 44, scope: !4669)
!4672 = !DILocation(line: 796, column: 9, scope: !4669)
!4673 = !DILocation(line: 797, column: 16, scope: !4674)
!4674 = distinct !DILexicalBlock(scope: !4664, file: !1012, line: 796, column: 60)
!4675 = !DILocation(line: 797, column: 19, scope: !4674)
!4676 = !DILocation(line: 797, column: 69, scope: !4674)
!4677 = !DILocation(line: 797, column: 72, scope: !4674)
!4678 = !DILocation(line: 797, column: 9, scope: !4674)
!4679 = !DILocation(line: 798, column: 9, scope: !4674)
!4680 = !DILocation(line: 800, column: 5, scope: !4593)
!4681 = !DILocation(line: 800, column: 8, scope: !4593)
!4682 = !DILocation(line: 800, column: 18, scope: !4593)
!4683 = !DILocation(line: 803, column: 28, scope: !4593)
!4684 = !DILocation(line: 803, column: 31, scope: !4593)
!4685 = !DILocation(line: 803, column: 18, scope: !4593)
!4686 = !DILocation(line: 803, column: 38, scope: !4593)
!4687 = !DILocation(line: 803, column: 5, scope: !4593)
!4688 = !DILocation(line: 803, column: 8, scope: !4593)
!4689 = !DILocation(line: 803, column: 16, scope: !4593)
!4690 = !DILocation(line: 804, column: 9, scope: !4691)
!4691 = distinct !DILexicalBlock(scope: !4593, file: !1012, line: 804, column: 9)
!4692 = !DILocation(line: 804, column: 12, scope: !4691)
!4693 = !DILocation(line: 804, column: 20, scope: !4691)
!4694 = !DILocation(line: 804, column: 9, scope: !4593)
!4695 = !DILocation(line: 805, column: 31, scope: !4696)
!4696 = distinct !DILexicalBlock(scope: !4691, file: !1012, line: 804, column: 25)
!4697 = !DILocation(line: 805, column: 34, scope: !4696)
!4698 = !DILocation(line: 805, column: 64, scope: !4696)
!4699 = !DILocation(line: 805, column: 67, scope: !4696)
!4700 = !DILocation(line: 805, column: 9, scope: !4696)
!4701 = !DILocation(line: 806, column: 9, scope: !4696)
!4702 = !DILocation(line: 810, column: 33, scope: !4593)
!4703 = !DILocation(line: 810, column: 36, scope: !4593)
!4704 = !DILocation(line: 810, column: 23, scope: !4593)
!4705 = !DILocation(line: 810, column: 21, scope: !4593)
!4706 = !DILocation(line: 811, column: 26, scope: !4593)
!4707 = !DILocation(line: 811, column: 23, scope: !4593)
!4708 = !DILocation(line: 811, column: 5, scope: !4593)
!4709 = !DILocation(line: 811, column: 8, scope: !4593)
!4710 = !DILocation(line: 811, column: 19, scope: !4593)
!4711 = !DILocation(line: 812, column: 9, scope: !4712)
!4712 = distinct !DILexicalBlock(scope: !4593, file: !1012, line: 812, column: 9)
!4713 = !DILocation(line: 812, column: 12, scope: !4712)
!4714 = !DILocation(line: 812, column: 23, scope: !4712)
!4715 = !DILocation(line: 812, column: 9, scope: !4593)
!4716 = !DILocation(line: 813, column: 16, scope: !4717)
!4717 = distinct !DILexicalBlock(scope: !4712, file: !1012, line: 812, column: 31)
!4718 = !DILocation(line: 813, column: 19, scope: !4717)
!4719 = !DILocation(line: 813, column: 9, scope: !4717)
!4720 = !DILocation(line: 814, column: 9, scope: !4717)
!4721 = !DILocation(line: 820, column: 37, scope: !4593)
!4722 = !DILocation(line: 820, column: 40, scope: !4593)
!4723 = !DILocation(line: 820, column: 27, scope: !4593)
!4724 = !DILocation(line: 820, column: 5, scope: !4593)
!4725 = !DILocation(line: 820, column: 8, scope: !4593)
!4726 = !DILocation(line: 820, column: 25, scope: !4593)
!4727 = !DILocation(line: 821, column: 10, scope: !4728)
!4728 = distinct !DILexicalBlock(scope: !4593, file: !1012, line: 821, column: 9)
!4729 = !DILocation(line: 821, column: 13, scope: !4728)
!4730 = !DILocation(line: 821, column: 9, scope: !4593)
!4731 = !DILocation(line: 822, column: 16, scope: !4732)
!4732 = distinct !DILexicalBlock(scope: !4728, file: !1012, line: 821, column: 31)
!4733 = !DILocation(line: 822, column: 19, scope: !4732)
!4734 = !DILocation(line: 822, column: 9, scope: !4732)
!4735 = !DILocation(line: 823, column: 9, scope: !4732)
!4736 = !DILocation(line: 825, column: 27, scope: !4593)
!4737 = !DILocation(line: 825, column: 30, scope: !4593)
!4738 = !DILocation(line: 825, column: 24, scope: !4593)
!4739 = !DILocation(line: 825, column: 5, scope: !4593)
!4740 = !DILocation(line: 825, column: 8, scope: !4593)
!4741 = !DILocation(line: 825, column: 20, scope: !4593)
!4742 = !DILocation(line: 826, column: 9, scope: !4743)
!4743 = distinct !DILexicalBlock(scope: !4593, file: !1012, line: 826, column: 9)
!4744 = !DILocation(line: 826, column: 12, scope: !4743)
!4745 = !DILocation(line: 826, column: 24, scope: !4743)
!4746 = !DILocation(line: 826, column: 9, scope: !4593)
!4747 = !DILocation(line: 827, column: 16, scope: !4748)
!4748 = distinct !DILexicalBlock(scope: !4743, file: !1012, line: 826, column: 31)
!4749 = !DILocation(line: 827, column: 19, scope: !4748)
!4750 = !DILocation(line: 827, column: 9, scope: !4748)
!4751 = !DILocation(line: 828, column: 9, scope: !4748)
!4752 = !DILocation(line: 832, column: 29, scope: !4593)
!4753 = !DILocation(line: 832, column: 32, scope: !4593)
!4754 = !DILocation(line: 832, column: 51, scope: !4593)
!4755 = !DILocation(line: 832, column: 49, scope: !4593)
!4756 = !DILocation(line: 832, column: 5, scope: !4593)
!4757 = !DILocation(line: 832, column: 8, scope: !4593)
!4758 = !DILocation(line: 832, column: 27, scope: !4593)
!4759 = !DILocation(line: 833, column: 29, scope: !4593)
!4760 = !DILocation(line: 833, column: 32, scope: !4593)
!4761 = !DILocation(line: 833, column: 26, scope: !4593)
!4762 = !DILocation(line: 833, column: 5, scope: !4593)
!4763 = !DILocation(line: 833, column: 8, scope: !4593)
!4764 = !DILocation(line: 833, column: 22, scope: !4593)
!4765 = !DILocation(line: 834, column: 9, scope: !4766)
!4766 = distinct !DILexicalBlock(scope: !4593, file: !1012, line: 834, column: 9)
!4767 = !DILocation(line: 834, column: 12, scope: !4766)
!4768 = !DILocation(line: 834, column: 26, scope: !4766)
!4769 = !DILocation(line: 834, column: 9, scope: !4593)
!4770 = !DILocation(line: 835, column: 16, scope: !4771)
!4771 = distinct !DILexicalBlock(scope: !4766, file: !1012, line: 834, column: 35)
!4772 = !DILocation(line: 835, column: 19, scope: !4771)
!4773 = !DILocation(line: 835, column: 9, scope: !4771)
!4774 = !DILocation(line: 836, column: 9, scope: !4771)
!4775 = !DILocation(line: 840, column: 35, scope: !4593)
!4776 = !DILocation(line: 840, column: 38, scope: !4593)
!4777 = !DILocation(line: 840, column: 25, scope: !4593)
!4778 = !DILocation(line: 840, column: 45, scope: !4593)
!4779 = !DILocation(line: 840, column: 5, scope: !4593)
!4780 = !DILocation(line: 840, column: 8, scope: !4593)
!4781 = !DILocation(line: 840, column: 23, scope: !4593)
!4782 = !DILocation(line: 847, column: 37, scope: !4593)
!4783 = !DILocation(line: 847, column: 40, scope: !4593)
!4784 = !DILocation(line: 847, column: 27, scope: !4593)
!4785 = !DILocation(line: 847, column: 5, scope: !4593)
!4786 = !DILocation(line: 847, column: 8, scope: !4593)
!4787 = !DILocation(line: 847, column: 25, scope: !4593)
!4788 = !DILocation(line: 850, column: 35, scope: !4593)
!4789 = !DILocation(line: 850, column: 38, scope: !4593)
!4790 = !DILocation(line: 850, column: 24, scope: !4593)
!4791 = !DILocation(line: 850, column: 5, scope: !4593)
!4792 = !DILocation(line: 850, column: 8, scope: !4593)
!4793 = !DILocation(line: 850, column: 22, scope: !4593)
!4794 = !DILocation(line: 853, column: 34, scope: !4593)
!4795 = !DILocation(line: 853, column: 37, scope: !4593)
!4796 = !DILocation(line: 853, column: 24, scope: !4593)
!4797 = !DILocation(line: 853, column: 44, scope: !4593)
!4798 = !DILocation(line: 853, column: 5, scope: !4593)
!4799 = !DILocation(line: 853, column: 8, scope: !4593)
!4800 = !DILocation(line: 853, column: 22, scope: !4593)
!4801 = !DILocation(line: 856, column: 9, scope: !4802)
!4802 = distinct !DILexicalBlock(scope: !4593, file: !1012, line: 856, column: 9)
!4803 = !DILocation(line: 856, column: 12, scope: !4802)
!4804 = !DILocation(line: 856, column: 9, scope: !4593)
!4805 = !DILocation(line: 857, column: 40, scope: !4802)
!4806 = !DILocation(line: 857, column: 43, scope: !4802)
!4807 = !DILocation(line: 857, column: 30, scope: !4802)
!4808 = !DILocation(line: 857, column: 9, scope: !4802)
!4809 = !DILocation(line: 857, column: 12, scope: !4802)
!4810 = !DILocation(line: 857, column: 28, scope: !4802)
!4811 = !DILocation(line: 859, column: 9, scope: !4802)
!4812 = !DILocation(line: 859, column: 12, scope: !4802)
!4813 = !DILocation(line: 859, column: 28, scope: !4802)
!4814 = !DILocation(line: 864, column: 27, scope: !4815)
!4815 = distinct !DILexicalBlock(scope: !4593, file: !1012, line: 864, column: 9)
!4816 = !DILocation(line: 864, column: 30, scope: !4815)
!4817 = !DILocation(line: 864, column: 34, scope: !4815)
!4818 = !DILocation(line: 864, column: 46, scope: !4815)
!4819 = !DILocation(line: 864, column: 9, scope: !4815)
!4820 = !DILocation(line: 864, column: 9, scope: !4593)
!4821 = !DILocation(line: 865, column: 16, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !4815, file: !1012, line: 864, column: 52)
!4823 = !DILocation(line: 865, column: 19, scope: !4822)
!4824 = !DILocation(line: 865, column: 9, scope: !4822)
!4825 = !DILocation(line: 866, column: 9, scope: !4822)
!4826 = !DILocation(line: 869, column: 5, scope: !4593)
!4827 = !DILocation(line: 870, column: 1, scope: !4593)
!4828 = distinct !DISubprogram(name: "parse_sub_headers", scope: !1012, file: !1012, line: 903, type: !4829, isLocal: true, isDefinition: true, scopeLine: 904, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!4829 = !DISubroutineType(types: !4830)
!4830 = !{!996, !1015, !2003}
!4831 = !DILocalVariable(name: "s", arg: 1, scope: !4828, file: !1012, line: 903, type: !1015)
!4832 = !DILocation(line: 903, column: 45, scope: !4828)
!4833 = !DILocalVariable(name: "asset", arg: 2, scope: !4828, file: !1012, line: 903, type: !2003)
!4834 = !DILocation(line: 903, column: 62, scope: !4828)
!4835 = !DILocalVariable(name: "dca", scope: !4828, file: !1012, line: 905, type: !2332)
!4836 = !DILocation(line: 905, column: 17, scope: !4828)
!4837 = !DILocation(line: 905, column: 23, scope: !4828)
!4838 = !DILocation(line: 905, column: 26, scope: !4828)
!4839 = !DILocation(line: 905, column: 33, scope: !4828)
!4840 = !DILocalVariable(name: "c", scope: !4828, file: !1012, line: 906, type: !2698)
!4841 = !DILocation(line: 906, column: 18, scope: !4828)
!4842 = !DILocalVariable(name: "i", scope: !4828, file: !1012, line: 907, type: !996)
!4843 = !DILocation(line: 907, column: 9, scope: !4828)
!4844 = !DILocalVariable(name: "ret", scope: !4828, file: !1012, line: 907, type: !996)
!4845 = !DILocation(line: 907, column: 12, scope: !4828)
!4846 = !DILocation(line: 910, column: 5, scope: !4828)
!4847 = !DILocation(line: 910, column: 8, scope: !4828)
!4848 = !DILocation(line: 910, column: 19, scope: !4828)
!4849 = !DILocation(line: 911, column: 5, scope: !4828)
!4850 = !DILocation(line: 911, column: 8, scope: !4828)
!4851 = !DILocation(line: 911, column: 18, scope: !4828)
!4852 = !DILocation(line: 912, column: 5, scope: !4828)
!4853 = !DILocation(line: 912, column: 8, scope: !4828)
!4854 = !DILocation(line: 912, column: 19, scope: !4828)
!4855 = !DILocation(line: 913, column: 12, scope: !4856)
!4856 = distinct !DILexicalBlock(scope: !4828, file: !1012, line: 913, column: 5)
!4857 = !DILocation(line: 913, column: 21, scope: !4856)
!4858 = !DILocation(line: 913, column: 24, scope: !4856)
!4859 = !DILocation(line: 913, column: 19, scope: !4856)
!4860 = !DILocation(line: 913, column: 10, scope: !4856)
!4861 = !DILocation(line: 913, column: 31, scope: !4862)
!4862 = !DILexicalBlockFile(scope: !4863, file: !1012, discriminator: 1)
!4863 = distinct !DILexicalBlock(scope: !4856, file: !1012, line: 913, column: 5)
!4864 = !DILocation(line: 913, column: 35, scope: !4862)
!4865 = !DILocation(line: 913, column: 38, scope: !4862)
!4866 = !DILocation(line: 913, column: 33, scope: !4862)
!4867 = !DILocation(line: 913, column: 5, scope: !4862)
!4868 = !DILocation(line: 914, column: 23, scope: !4869)
!4869 = distinct !DILexicalBlock(scope: !4863, file: !1012, line: 913, column: 57)
!4870 = !DILocation(line: 914, column: 26, scope: !4869)
!4871 = !DILocation(line: 914, column: 9, scope: !4869)
!4872 = !DILocation(line: 914, column: 12, scope: !4869)
!4873 = !DILocation(line: 914, column: 21, scope: !4869)
!4874 = !DILocation(line: 915, column: 37, scope: !4875)
!4875 = distinct !DILexicalBlock(scope: !4869, file: !1012, line: 915, column: 13)
!4876 = !DILocation(line: 915, column: 40, scope: !4875)
!4877 = !DILocation(line: 915, column: 43, scope: !4875)
!4878 = !DILocation(line: 915, column: 20, scope: !4875)
!4879 = !DILocation(line: 915, column: 18, scope: !4875)
!4880 = !DILocation(line: 915, column: 51, scope: !4875)
!4881 = !DILocation(line: 915, column: 13, scope: !4869)
!4882 = !DILocation(line: 916, column: 20, scope: !4875)
!4883 = !DILocation(line: 916, column: 13, scope: !4875)
!4884 = !DILocation(line: 917, column: 13, scope: !4885)
!4885 = distinct !DILexicalBlock(scope: !4869, file: !1012, line: 917, column: 13)
!4886 = !DILocation(line: 917, column: 16, scope: !4885)
!4887 = !DILocation(line: 917, column: 29, scope: !4885)
!4888 = !DILocation(line: 917, column: 32, scope: !4885)
!4889 = !DILocation(line: 917, column: 27, scope: !4885)
!4890 = !DILocation(line: 917, column: 13, scope: !4869)
!4891 = !DILocation(line: 918, column: 29, scope: !4885)
!4892 = !DILocation(line: 918, column: 32, scope: !4885)
!4893 = !DILocation(line: 918, column: 13, scope: !4885)
!4894 = !DILocation(line: 918, column: 16, scope: !4885)
!4895 = !DILocation(line: 918, column: 27, scope: !4885)
!4896 = !DILocation(line: 919, column: 13, scope: !4897)
!4897 = distinct !DILexicalBlock(scope: !4869, file: !1012, line: 919, column: 13)
!4898 = !DILocation(line: 919, column: 16, scope: !4897)
!4899 = !DILocation(line: 919, column: 13, scope: !4869)
!4900 = !DILocation(line: 920, column: 29, scope: !4897)
!4901 = !DILocation(line: 920, column: 32, scope: !4897)
!4902 = !DILocation(line: 920, column: 13, scope: !4897)
!4903 = !DILocation(line: 920, column: 16, scope: !4897)
!4904 = !DILocation(line: 920, column: 26, scope: !4897)
!4905 = !DILocation(line: 921, column: 13, scope: !4906)
!4906 = distinct !DILexicalBlock(scope: !4869, file: !1012, line: 921, column: 13)
!4907 = !DILocation(line: 921, column: 16, scope: !4906)
!4908 = !DILocation(line: 921, column: 41, scope: !4906)
!4909 = !DILocation(line: 921, column: 44, scope: !4906)
!4910 = !DILocation(line: 921, column: 38, scope: !4906)
!4911 = !DILocation(line: 921, column: 55, scope: !4906)
!4912 = !DILocation(line: 921, column: 32, scope: !4906)
!4913 = !DILocation(line: 921, column: 13, scope: !4869)
!4914 = !DILocation(line: 922, column: 13, scope: !4906)
!4915 = !DILocation(line: 922, column: 16, scope: !4906)
!4916 = !DILocation(line: 922, column: 26, scope: !4906)
!4917 = !DILocation(line: 923, column: 5, scope: !4869)
!4918 = !DILocation(line: 913, column: 48, scope: !4919)
!4919 = !DILexicalBlockFile(scope: !4863, file: !1012, discriminator: 2)
!4920 = !DILocation(line: 913, column: 53, scope: !4919)
!4921 = !DILocation(line: 913, column: 5, scope: !4919)
!4922 = distinct !{!4922, !4923}
!4923 = !DILocation(line: 913, column: 5, scope: !4828)
!4924 = !DILocation(line: 926, column: 14, scope: !4925)
!4925 = distinct !DILexicalBlock(scope: !4828, file: !1012, line: 926, column: 5)
!4926 = !DILocation(line: 926, column: 17, scope: !4925)
!4927 = !DILocation(line: 926, column: 25, scope: !4925)
!4928 = !DILocation(line: 926, column: 12, scope: !4925)
!4929 = !DILocation(line: 926, column: 44, scope: !4925)
!4930 = !DILocation(line: 926, column: 35, scope: !4925)
!4931 = !DILocation(line: 926, column: 38, scope: !4925)
!4932 = !DILocation(line: 926, column: 32, scope: !4925)
!4933 = !DILocation(line: 926, column: 10, scope: !4925)
!4934 = !DILocation(line: 926, column: 48, scope: !4935)
!4935 = !DILexicalBlockFile(scope: !4936, file: !1012, discriminator: 1)
!4936 = distinct !DILexicalBlock(scope: !4925, file: !1012, line: 926, column: 5)
!4937 = !DILocation(line: 926, column: 50, scope: !4935)
!4938 = !DILocation(line: 926, column: 5, scope: !4935)
!4939 = !DILocation(line: 927, column: 32, scope: !4940)
!4940 = distinct !DILexicalBlock(scope: !4941, file: !1012, line: 927, column: 13)
!4941 = distinct !DILexicalBlock(scope: !4936, file: !1012, line: 926, column: 65)
!4942 = !DILocation(line: 927, column: 13, scope: !4940)
!4943 = !DILocation(line: 927, column: 13, scope: !4941)
!4944 = !DILocalVariable(name: "o", scope: !4945, file: !1012, line: 928, type: !2698)
!4945 = distinct !DILexicalBlock(scope: !4940, file: !1012, line: 927, column: 36)
!4946 = !DILocation(line: 928, column: 26, scope: !4945)
!4947 = !DILocation(line: 928, column: 56, scope: !4945)
!4948 = !DILocation(line: 928, column: 59, scope: !4945)
!4949 = !DILocation(line: 928, column: 30, scope: !4945)
!4950 = !DILocation(line: 929, column: 17, scope: !4951)
!4951 = distinct !DILexicalBlock(scope: !4945, file: !1012, line: 929, column: 17)
!4952 = !DILocation(line: 929, column: 17, scope: !4945)
!4953 = !DILocation(line: 930, column: 35, scope: !4951)
!4954 = !DILocation(line: 930, column: 38, scope: !4951)
!4955 = !DILocation(line: 930, column: 17, scope: !4951)
!4956 = !DILocation(line: 931, column: 9, scope: !4945)
!4957 = !DILocation(line: 932, column: 5, scope: !4941)
!4958 = !DILocation(line: 926, column: 56, scope: !4959)
!4959 = !DILexicalBlockFile(scope: !4936, file: !1012, discriminator: 2)
!4960 = !DILocation(line: 926, column: 61, scope: !4959)
!4961 = !DILocation(line: 926, column: 5, scope: !4959)
!4962 = distinct !{!4962, !4963}
!4963 = !DILocation(line: 926, column: 5, scope: !4828)
!4964 = !DILocation(line: 935, column: 13, scope: !4828)
!4965 = !DILocation(line: 935, column: 18, scope: !4828)
!4966 = !DILocation(line: 935, column: 5, scope: !4828)
!4967 = !DILocation(line: 937, column: 9, scope: !4968)
!4968 = distinct !DILexicalBlock(scope: !4828, file: !1012, line: 935, column: 42)
!4969 = !DILocation(line: 937, column: 12, scope: !4968)
!4970 = !DILocation(line: 937, column: 26, scope: !4968)
!4971 = !DILocation(line: 938, column: 9, scope: !4968)
!4972 = !DILocation(line: 941, column: 29, scope: !4968)
!4973 = !DILocation(line: 941, column: 32, scope: !4968)
!4974 = !DILocation(line: 941, column: 41, scope: !4968)
!4975 = !DILocation(line: 941, column: 51, scope: !4968)
!4976 = !DILocation(line: 941, column: 55, scope: !4968)
!4977 = !DILocation(line: 941, column: 58, scope: !4978)
!4978 = !DILexicalBlockFile(scope: !4968, file: !1012, discriminator: 1)
!4979 = !DILocation(line: 941, column: 61, scope: !4978)
!4980 = !DILocation(line: 941, column: 69, scope: !4978)
!4981 = !DILocation(line: 941, column: 28, scope: !4982)
!4982 = !DILexicalBlockFile(scope: !4968, file: !1012, discriminator: 2)
!4983 = !DILocation(line: 941, column: 9, scope: !4982)
!4984 = !DILocation(line: 941, column: 12, scope: !4982)
!4985 = !DILocation(line: 941, column: 26, scope: !4982)
!4986 = !DILocation(line: 942, column: 9, scope: !4968)
!4987 = !DILocation(line: 944, column: 28, scope: !4968)
!4988 = !DILocation(line: 944, column: 31, scope: !4968)
!4989 = !DILocation(line: 944, column: 9, scope: !4968)
!4990 = !DILocation(line: 944, column: 12, scope: !4968)
!4991 = !DILocation(line: 944, column: 26, scope: !4968)
!4992 = !DILocation(line: 945, column: 9, scope: !4968)
!4993 = !DILocation(line: 948, column: 5, scope: !4828)
!4994 = !DILocation(line: 949, column: 1, scope: !4828)
!4995 = distinct !DISubprogram(name: "parse_navi_table", scope: !1012, file: !1012, line: 951, type: !4594, isLocal: true, isDefinition: true, scopeLine: 952, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!4996 = !DILocalVariable(name: "s", arg: 1, scope: !4995, file: !1012, line: 951, type: !1015)
!4997 = !DILocation(line: 951, column: 44, scope: !4995)
!4998 = !DILocalVariable(name: "chs", scope: !4995, file: !1012, line: 953, type: !996)
!4999 = !DILocation(line: 953, column: 9, scope: !4995)
!5000 = !DILocalVariable(name: "seg", scope: !4995, file: !1012, line: 953, type: !996)
!5001 = !DILocation(line: 953, column: 14, scope: !4995)
!5002 = !DILocalVariable(name: "band", scope: !4995, file: !1012, line: 953, type: !996)
!5003 = !DILocation(line: 953, column: 19, scope: !4995)
!5004 = !DILocalVariable(name: "navi_nb", scope: !4995, file: !1012, line: 953, type: !996)
!5005 = !DILocation(line: 953, column: 25, scope: !4995)
!5006 = !DILocalVariable(name: "navi_pos", scope: !4995, file: !1012, line: 953, type: !996)
!5007 = !DILocation(line: 953, column: 34, scope: !4995)
!5008 = !DILocalVariable(name: "navi_ptr", scope: !4995, file: !1012, line: 953, type: !1313)
!5009 = !DILocation(line: 953, column: 45, scope: !4995)
!5010 = !DILocalVariable(name: "c", scope: !4995, file: !1012, line: 954, type: !2698)
!5011 = !DILocation(line: 954, column: 18, scope: !4995)
!5012 = !DILocation(line: 957, column: 15, scope: !4995)
!5013 = !DILocation(line: 957, column: 18, scope: !4995)
!5014 = !DILocation(line: 957, column: 31, scope: !4995)
!5015 = !DILocation(line: 957, column: 34, scope: !4995)
!5016 = !DILocation(line: 957, column: 29, scope: !4995)
!5017 = !DILocation(line: 957, column: 47, scope: !4995)
!5018 = !DILocation(line: 957, column: 50, scope: !4995)
!5019 = !DILocation(line: 957, column: 45, scope: !4995)
!5020 = !DILocation(line: 957, column: 13, scope: !4995)
!5021 = !DILocation(line: 958, column: 9, scope: !5022)
!5022 = distinct !DILexicalBlock(scope: !4995, file: !1012, line: 958, column: 9)
!5023 = !DILocation(line: 958, column: 17, scope: !5022)
!5024 = !DILocation(line: 958, column: 9, scope: !4995)
!5025 = !DILocation(line: 959, column: 16, scope: !5026)
!5026 = distinct !DILexicalBlock(scope: !5022, file: !1012, line: 958, column: 25)
!5027 = !DILocation(line: 959, column: 19, scope: !5026)
!5028 = !DILocation(line: 959, column: 62, scope: !5026)
!5029 = !DILocation(line: 959, column: 9, scope: !5026)
!5030 = !DILocation(line: 960, column: 9, scope: !5026)
!5031 = !DILocation(line: 964, column: 21, scope: !4995)
!5032 = !DILocation(line: 964, column: 24, scope: !4995)
!5033 = !DILocation(line: 964, column: 20, scope: !4995)
!5034 = !DILocation(line: 964, column: 31, scope: !4995)
!5035 = !DILocation(line: 964, column: 34, scope: !4995)
!5036 = !DILocation(line: 964, column: 45, scope: !4995)
!5037 = !DILocation(line: 964, column: 53, scope: !4995)
!5038 = !DILocation(line: 964, column: 5, scope: !4995)
!5039 = !DILocation(line: 965, column: 10, scope: !5040)
!5040 = distinct !DILexicalBlock(scope: !4995, file: !1012, line: 965, column: 9)
!5041 = !DILocation(line: 965, column: 13, scope: !5040)
!5042 = !DILocation(line: 965, column: 9, scope: !4995)
!5043 = !DILocation(line: 966, column: 9, scope: !5040)
!5044 = !DILocation(line: 969, column: 32, scope: !4995)
!5045 = !DILocation(line: 969, column: 35, scope: !4995)
!5046 = !DILocation(line: 969, column: 16, scope: !4995)
!5047 = !DILocation(line: 969, column: 14, scope: !4995)
!5048 = !DILocation(line: 970, column: 16, scope: !4995)
!5049 = !DILocation(line: 970, column: 19, scope: !4995)
!5050 = !DILocation(line: 970, column: 14, scope: !4995)
!5051 = !DILocation(line: 971, column: 15, scope: !5052)
!5052 = distinct !DILexicalBlock(scope: !4995, file: !1012, line: 971, column: 5)
!5053 = !DILocation(line: 971, column: 10, scope: !5052)
!5054 = !DILocation(line: 971, column: 20, scope: !5055)
!5055 = !DILexicalBlockFile(scope: !5056, file: !1012, discriminator: 1)
!5056 = distinct !DILexicalBlock(scope: !5052, file: !1012, line: 971, column: 5)
!5057 = !DILocation(line: 971, column: 27, scope: !5055)
!5058 = !DILocation(line: 971, column: 30, scope: !5055)
!5059 = !DILocation(line: 971, column: 25, scope: !5055)
!5060 = !DILocation(line: 971, column: 5, scope: !5055)
!5061 = !DILocation(line: 972, column: 18, scope: !5062)
!5062 = distinct !DILexicalBlock(scope: !5063, file: !1012, line: 972, column: 9)
!5063 = distinct !DILexicalBlock(scope: !5056, file: !1012, line: 971, column: 50)
!5064 = !DILocation(line: 972, column: 14, scope: !5062)
!5065 = !DILocation(line: 972, column: 23, scope: !5066)
!5066 = !DILexicalBlockFile(scope: !5067, file: !1012, discriminator: 1)
!5067 = distinct !DILexicalBlock(scope: !5062, file: !1012, line: 972, column: 9)
!5068 = !DILocation(line: 972, column: 29, scope: !5066)
!5069 = !DILocation(line: 972, column: 32, scope: !5066)
!5070 = !DILocation(line: 972, column: 27, scope: !5066)
!5071 = !DILocation(line: 972, column: 9, scope: !5066)
!5072 = !DILocation(line: 973, column: 22, scope: !5073)
!5073 = distinct !DILexicalBlock(scope: !5074, file: !1012, line: 973, column: 13)
!5074 = distinct !DILexicalBlock(scope: !5067, file: !1012, line: 972, column: 51)
!5075 = !DILocation(line: 973, column: 31, scope: !5073)
!5076 = !DILocation(line: 973, column: 34, scope: !5073)
!5077 = !DILocation(line: 973, column: 29, scope: !5073)
!5078 = !DILocation(line: 973, column: 18, scope: !5073)
!5079 = !DILocation(line: 973, column: 41, scope: !5080)
!5080 = !DILexicalBlockFile(scope: !5081, file: !1012, discriminator: 1)
!5081 = distinct !DILexicalBlock(scope: !5073, file: !1012, line: 973, column: 13)
!5082 = !DILocation(line: 973, column: 47, scope: !5080)
!5083 = !DILocation(line: 973, column: 50, scope: !5080)
!5084 = !DILocation(line: 973, column: 45, scope: !5080)
!5085 = !DILocation(line: 973, column: 13, scope: !5080)
!5086 = !DILocalVariable(name: "size", scope: !5087, file: !1012, line: 974, type: !996)
!5087 = distinct !DILexicalBlock(scope: !5081, file: !1012, line: 973, column: 71)
!5088 = !DILocation(line: 974, column: 21, scope: !5087)
!5089 = !DILocation(line: 975, column: 21, scope: !5090)
!5090 = distinct !DILexicalBlock(scope: !5087, file: !1012, line: 975, column: 21)
!5091 = !DILocation(line: 975, column: 24, scope: !5090)
!5092 = !DILocation(line: 975, column: 37, scope: !5090)
!5093 = !DILocation(line: 975, column: 35, scope: !5090)
!5094 = !DILocation(line: 975, column: 21, scope: !5087)
!5095 = !DILocation(line: 976, column: 43, scope: !5096)
!5096 = distinct !DILexicalBlock(scope: !5090, file: !1012, line: 975, column: 43)
!5097 = !DILocation(line: 976, column: 46, scope: !5096)
!5098 = !DILocation(line: 976, column: 50, scope: !5096)
!5099 = !DILocation(line: 976, column: 53, scope: !5096)
!5100 = !DILocation(line: 976, column: 28, scope: !5096)
!5101 = !DILocation(line: 976, column: 26, scope: !5096)
!5102 = !DILocation(line: 977, column: 25, scope: !5103)
!5103 = distinct !DILexicalBlock(scope: !5096, file: !1012, line: 977, column: 25)
!5104 = !DILocation(line: 977, column: 30, scope: !5103)
!5105 = !DILocation(line: 977, column: 34, scope: !5103)
!5106 = !DILocation(line: 977, column: 37, scope: !5107)
!5107 = !DILexicalBlockFile(scope: !5103, file: !1012, discriminator: 1)
!5108 = !DILocation(line: 977, column: 45, scope: !5107)
!5109 = !DILocation(line: 977, column: 48, scope: !5107)
!5110 = !DILocation(line: 977, column: 42, scope: !5107)
!5111 = !DILocation(line: 977, column: 25, scope: !5107)
!5112 = !DILocation(line: 978, column: 32, scope: !5113)
!5113 = distinct !DILexicalBlock(scope: !5103, file: !1012, line: 977, column: 60)
!5114 = !DILocation(line: 978, column: 35, scope: !5113)
!5115 = !DILocation(line: 978, column: 88, scope: !5113)
!5116 = !DILocation(line: 978, column: 25, scope: !5113)
!5117 = !DILocation(line: 979, column: 25, scope: !5113)
!5118 = !DILocation(line: 981, column: 25, scope: !5096)
!5119 = !DILocation(line: 982, column: 17, scope: !5096)
!5120 = !DILocation(line: 983, column: 31, scope: !5087)
!5121 = !DILocation(line: 983, column: 26, scope: !5087)
!5122 = !DILocation(line: 983, column: 29, scope: !5087)
!5123 = !DILocation(line: 984, column: 13, scope: !5087)
!5124 = !DILocation(line: 973, column: 62, scope: !5125)
!5125 = !DILexicalBlockFile(scope: !5081, file: !1012, discriminator: 2)
!5126 = !DILocation(line: 973, column: 67, scope: !5125)
!5127 = !DILocation(line: 973, column: 13, scope: !5125)
!5128 = distinct !{!5128, !5129}
!5129 = !DILocation(line: 973, column: 13, scope: !5074)
!5130 = !DILocation(line: 985, column: 9, scope: !5074)
!5131 = !DILocation(line: 972, column: 47, scope: !5132)
!5132 = !DILexicalBlockFile(scope: !5067, file: !1012, discriminator: 2)
!5133 = !DILocation(line: 972, column: 9, scope: !5132)
!5134 = distinct !{!5134, !5135}
!5135 = !DILocation(line: 972, column: 9, scope: !5063)
!5136 = !DILocation(line: 986, column: 5, scope: !5063)
!5137 = !DILocation(line: 971, column: 46, scope: !5138)
!5138 = !DILexicalBlockFile(scope: !5056, file: !1012, discriminator: 2)
!5139 = !DILocation(line: 971, column: 5, scope: !5138)
!5140 = distinct !{!5140, !5141}
!5141 = !DILocation(line: 971, column: 5, scope: !4995)
!5142 = !DILocation(line: 990, column: 16, scope: !4995)
!5143 = !DILocation(line: 990, column: 19, scope: !4995)
!5144 = !DILocation(line: 990, column: 40, scope: !4995)
!5145 = !DILocation(line: 990, column: 43, scope: !4995)
!5146 = !DILocation(line: 990, column: 24, scope: !4995)
!5147 = !DILocation(line: 990, column: 23, scope: !4995)
!5148 = !DILocation(line: 990, column: 47, scope: !4995)
!5149 = !DILocation(line: 990, column: 5, scope: !5150)
!5150 = !DILexicalBlockFile(scope: !4995, file: !1012, discriminator: 1)
!5151 = !DILocation(line: 991, column: 16, scope: !4995)
!5152 = !DILocation(line: 991, column: 19, scope: !4995)
!5153 = !DILocation(line: 991, column: 5, scope: !4995)
!5154 = !DILocation(line: 994, column: 26, scope: !5155)
!5155 = distinct !DILexicalBlock(scope: !4995, file: !1012, line: 994, column: 9)
!5156 = !DILocation(line: 994, column: 29, scope: !5155)
!5157 = !DILocation(line: 994, column: 37, scope: !5155)
!5158 = !DILocation(line: 994, column: 40, scope: !5155)
!5159 = !DILocation(line: 994, column: 44, scope: !5155)
!5160 = !DILocation(line: 994, column: 70, scope: !5155)
!5161 = !DILocation(line: 994, column: 73, scope: !5155)
!5162 = !DILocation(line: 994, column: 54, scope: !5155)
!5163 = !DILocation(line: 994, column: 9, scope: !5164)
!5164 = !DILexicalBlockFile(scope: !5155, file: !1012, discriminator: 1)
!5165 = !DILocation(line: 994, column: 9, scope: !5155)
!5166 = !DILocation(line: 994, column: 9, scope: !4995)
!5167 = !DILocation(line: 995, column: 16, scope: !5168)
!5168 = distinct !DILexicalBlock(scope: !5155, file: !1012, line: 994, column: 79)
!5169 = !DILocation(line: 995, column: 19, scope: !5168)
!5170 = !DILocation(line: 995, column: 9, scope: !5168)
!5171 = !DILocation(line: 996, column: 9, scope: !5168)
!5172 = !DILocation(line: 999, column: 5, scope: !4995)
!5173 = !DILocation(line: 1000, column: 1, scope: !4995)
!5174 = distinct !DISubprogram(name: "parse_band_data", scope: !1012, file: !1012, line: 1002, type: !4594, isLocal: true, isDefinition: true, scopeLine: 1003, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!5175 = !DILocalVariable(name: "s", arg: 1, scope: !5174, file: !1012, line: 1002, type: !1015)
!5176 = !DILocation(line: 1002, column: 43, scope: !5174)
!5177 = !DILocalVariable(name: "ret", scope: !5174, file: !1012, line: 1004, type: !996)
!5178 = !DILocation(line: 1004, column: 9, scope: !5174)
!5179 = !DILocalVariable(name: "chs", scope: !5174, file: !1012, line: 1004, type: !996)
!5180 = !DILocation(line: 1004, column: 14, scope: !5174)
!5181 = !DILocalVariable(name: "seg", scope: !5174, file: !1012, line: 1004, type: !996)
!5182 = !DILocation(line: 1004, column: 19, scope: !5174)
!5183 = !DILocalVariable(name: "band", scope: !5174, file: !1012, line: 1004, type: !996)
!5184 = !DILocation(line: 1004, column: 24, scope: !5174)
!5185 = !DILocalVariable(name: "navi_pos", scope: !5174, file: !1012, line: 1004, type: !996)
!5186 = !DILocation(line: 1004, column: 30, scope: !5174)
!5187 = !DILocalVariable(name: "navi_ptr", scope: !5174, file: !1012, line: 1004, type: !1313)
!5188 = !DILocation(line: 1004, column: 41, scope: !5174)
!5189 = !DILocalVariable(name: "c", scope: !5174, file: !1012, line: 1005, type: !2698)
!5190 = !DILocation(line: 1005, column: 18, scope: !5174)
!5191 = !DILocation(line: 1007, column: 14, scope: !5192)
!5192 = distinct !DILexicalBlock(scope: !5174, file: !1012, line: 1007, column: 5)
!5193 = !DILocation(line: 1007, column: 23, scope: !5192)
!5194 = !DILocation(line: 1007, column: 26, scope: !5192)
!5195 = !DILocation(line: 1007, column: 21, scope: !5192)
!5196 = !DILocation(line: 1007, column: 10, scope: !5192)
!5197 = !DILocation(line: 1007, column: 33, scope: !5198)
!5198 = !DILexicalBlockFile(scope: !5199, file: !1012, discriminator: 1)
!5199 = distinct !DILexicalBlock(scope: !5192, file: !1012, line: 1007, column: 5)
!5200 = !DILocation(line: 1007, column: 39, scope: !5198)
!5201 = !DILocation(line: 1007, column: 42, scope: !5198)
!5202 = !DILocation(line: 1007, column: 37, scope: !5198)
!5203 = !DILocation(line: 1007, column: 5, scope: !5198)
!5204 = !DILocation(line: 1008, column: 44, scope: !5205)
!5205 = distinct !DILexicalBlock(scope: !5206, file: !1012, line: 1008, column: 13)
!5206 = distinct !DILexicalBlock(scope: !5199, file: !1012, line: 1007, column: 69)
!5207 = !DILocation(line: 1008, column: 47, scope: !5205)
!5208 = !DILocation(line: 1008, column: 20, scope: !5205)
!5209 = !DILocation(line: 1008, column: 18, scope: !5205)
!5210 = !DILocation(line: 1008, column: 51, scope: !5205)
!5211 = !DILocation(line: 1008, column: 13, scope: !5206)
!5212 = !DILocation(line: 1009, column: 20, scope: !5205)
!5213 = !DILocation(line: 1009, column: 13, scope: !5205)
!5214 = !DILocation(line: 1010, column: 44, scope: !5215)
!5215 = distinct !DILexicalBlock(scope: !5206, file: !1012, line: 1010, column: 13)
!5216 = !DILocation(line: 1010, column: 47, scope: !5215)
!5217 = !DILocation(line: 1010, column: 20, scope: !5215)
!5218 = !DILocation(line: 1010, column: 18, scope: !5215)
!5219 = !DILocation(line: 1010, column: 51, scope: !5215)
!5220 = !DILocation(line: 1010, column: 13, scope: !5206)
!5221 = !DILocation(line: 1011, column: 20, scope: !5215)
!5222 = !DILocation(line: 1011, column: 13, scope: !5215)
!5223 = !DILocation(line: 1012, column: 5, scope: !5206)
!5224 = !DILocation(line: 1007, column: 60, scope: !5225)
!5225 = !DILexicalBlockFile(scope: !5199, file: !1012, discriminator: 2)
!5226 = !DILocation(line: 1007, column: 65, scope: !5225)
!5227 = !DILocation(line: 1007, column: 5, scope: !5225)
!5228 = distinct !{!5228, !5229}
!5229 = !DILocation(line: 1007, column: 5, scope: !5174)
!5230 = !DILocation(line: 1014, column: 32, scope: !5174)
!5231 = !DILocation(line: 1014, column: 35, scope: !5174)
!5232 = !DILocation(line: 1014, column: 16, scope: !5174)
!5233 = !DILocation(line: 1014, column: 14, scope: !5174)
!5234 = !DILocation(line: 1015, column: 16, scope: !5174)
!5235 = !DILocation(line: 1015, column: 19, scope: !5174)
!5236 = !DILocation(line: 1015, column: 14, scope: !5174)
!5237 = !DILocation(line: 1016, column: 15, scope: !5238)
!5238 = distinct !DILexicalBlock(scope: !5174, file: !1012, line: 1016, column: 5)
!5239 = !DILocation(line: 1016, column: 10, scope: !5238)
!5240 = !DILocation(line: 1016, column: 20, scope: !5241)
!5241 = !DILexicalBlockFile(scope: !5242, file: !1012, discriminator: 1)
!5242 = distinct !DILexicalBlock(scope: !5238, file: !1012, line: 1016, column: 5)
!5243 = !DILocation(line: 1016, column: 27, scope: !5241)
!5244 = !DILocation(line: 1016, column: 30, scope: !5241)
!5245 = !DILocation(line: 1016, column: 25, scope: !5241)
!5246 = !DILocation(line: 1016, column: 5, scope: !5241)
!5247 = !DILocation(line: 1017, column: 18, scope: !5248)
!5248 = distinct !DILexicalBlock(scope: !5249, file: !1012, line: 1017, column: 9)
!5249 = distinct !DILexicalBlock(scope: !5242, file: !1012, line: 1016, column: 50)
!5250 = !DILocation(line: 1017, column: 14, scope: !5248)
!5251 = !DILocation(line: 1017, column: 23, scope: !5252)
!5252 = !DILexicalBlockFile(scope: !5253, file: !1012, discriminator: 1)
!5253 = distinct !DILexicalBlock(scope: !5248, file: !1012, line: 1017, column: 9)
!5254 = !DILocation(line: 1017, column: 29, scope: !5252)
!5255 = !DILocation(line: 1017, column: 32, scope: !5252)
!5256 = !DILocation(line: 1017, column: 27, scope: !5252)
!5257 = !DILocation(line: 1017, column: 9, scope: !5252)
!5258 = !DILocation(line: 1018, column: 22, scope: !5259)
!5259 = distinct !DILexicalBlock(scope: !5260, file: !1012, line: 1018, column: 13)
!5260 = distinct !DILexicalBlock(scope: !5253, file: !1012, line: 1017, column: 51)
!5261 = !DILocation(line: 1018, column: 31, scope: !5259)
!5262 = !DILocation(line: 1018, column: 34, scope: !5259)
!5263 = !DILocation(line: 1018, column: 29, scope: !5259)
!5264 = !DILocation(line: 1018, column: 18, scope: !5259)
!5265 = !DILocation(line: 1018, column: 41, scope: !5266)
!5266 = !DILexicalBlockFile(scope: !5267, file: !1012, discriminator: 1)
!5267 = distinct !DILexicalBlock(scope: !5259, file: !1012, line: 1018, column: 13)
!5268 = !DILocation(line: 1018, column: 47, scope: !5266)
!5269 = !DILocation(line: 1018, column: 50, scope: !5266)
!5270 = !DILocation(line: 1018, column: 45, scope: !5266)
!5271 = !DILocation(line: 1018, column: 13, scope: !5266)
!5272 = !DILocation(line: 1019, column: 21, scope: !5273)
!5273 = distinct !DILexicalBlock(scope: !5274, file: !1012, line: 1019, column: 21)
!5274 = distinct !DILexicalBlock(scope: !5267, file: !1012, line: 1018, column: 71)
!5275 = !DILocation(line: 1019, column: 24, scope: !5273)
!5276 = !DILocation(line: 1019, column: 37, scope: !5273)
!5277 = !DILocation(line: 1019, column: 35, scope: !5273)
!5278 = !DILocation(line: 1019, column: 21, scope: !5274)
!5279 = !DILocation(line: 1020, column: 34, scope: !5280)
!5280 = distinct !DILexicalBlock(scope: !5273, file: !1012, line: 1019, column: 43)
!5281 = !DILocation(line: 1020, column: 33, scope: !5280)
!5282 = !DILocation(line: 1020, column: 43, scope: !5280)
!5283 = !DILocation(line: 1020, column: 30, scope: !5280)
!5284 = !DILocation(line: 1021, column: 25, scope: !5285)
!5285 = distinct !DILexicalBlock(scope: !5280, file: !1012, line: 1021, column: 25)
!5286 = !DILocation(line: 1021, column: 36, scope: !5285)
!5287 = !DILocation(line: 1021, column: 39, scope: !5285)
!5288 = !DILocation(line: 1021, column: 42, scope: !5285)
!5289 = !DILocation(line: 1021, column: 34, scope: !5285)
!5290 = !DILocation(line: 1021, column: 25, scope: !5280)
!5291 = !DILocation(line: 1022, column: 32, scope: !5292)
!5292 = distinct !DILexicalBlock(scope: !5285, file: !1012, line: 1021, column: 56)
!5293 = !DILocation(line: 1022, column: 35, scope: !5292)
!5294 = !DILocation(line: 1022, column: 25, scope: !5292)
!5295 = !DILocation(line: 1023, column: 25, scope: !5292)
!5296 = !DILocation(line: 1025, column: 25, scope: !5297)
!5297 = distinct !DILexicalBlock(scope: !5280, file: !1012, line: 1025, column: 25)
!5298 = !DILocation(line: 1025, column: 31, scope: !5297)
!5299 = !DILocation(line: 1025, column: 34, scope: !5297)
!5300 = !DILocation(line: 1025, column: 29, scope: !5297)
!5301 = !DILocation(line: 1025, column: 48, scope: !5297)
!5302 = !DILocation(line: 1026, column: 52, scope: !5297)
!5303 = !DILocation(line: 1026, column: 55, scope: !5297)
!5304 = !DILocation(line: 1026, column: 58, scope: !5297)
!5305 = !DILocation(line: 1026, column: 64, scope: !5297)
!5306 = !DILocation(line: 1026, column: 69, scope: !5297)
!5307 = !DILocation(line: 1026, column: 32, scope: !5297)
!5308 = !DILocation(line: 1026, column: 30, scope: !5297)
!5309 = !DILocation(line: 1026, column: 80, scope: !5297)
!5310 = !DILocation(line: 1025, column: 25, scope: !5311)
!5311 = !DILexicalBlockFile(scope: !5280, file: !1012, discriminator: 1)
!5312 = !DILocation(line: 1027, column: 29, scope: !5313)
!5313 = distinct !DILexicalBlock(scope: !5314, file: !1012, line: 1027, column: 29)
!5314 = distinct !DILexicalBlock(scope: !5297, file: !1012, line: 1026, column: 85)
!5315 = !DILocation(line: 1027, column: 32, scope: !5313)
!5316 = !DILocation(line: 1027, column: 39, scope: !5313)
!5317 = !DILocation(line: 1027, column: 55, scope: !5313)
!5318 = !DILocation(line: 1027, column: 29, scope: !5314)
!5319 = !DILocation(line: 1028, column: 36, scope: !5313)
!5320 = !DILocation(line: 1028, column: 29, scope: !5313)
!5321 = !DILocation(line: 1029, column: 45, scope: !5314)
!5322 = !DILocation(line: 1029, column: 48, scope: !5314)
!5323 = !DILocation(line: 1029, column: 51, scope: !5314)
!5324 = !DILocation(line: 1029, column: 57, scope: !5314)
!5325 = !DILocation(line: 1029, column: 25, scope: !5314)
!5326 = !DILocation(line: 1030, column: 21, scope: !5314)
!5327 = !DILocation(line: 1031, column: 37, scope: !5280)
!5328 = !DILocation(line: 1031, column: 40, scope: !5280)
!5329 = !DILocation(line: 1031, column: 44, scope: !5280)
!5330 = !DILocation(line: 1031, column: 71, scope: !5280)
!5331 = !DILocation(line: 1031, column: 74, scope: !5280)
!5332 = !DILocation(line: 1031, column: 55, scope: !5280)
!5333 = !DILocation(line: 1031, column: 53, scope: !5280)
!5334 = !DILocation(line: 1031, column: 21, scope: !5311)
!5335 = !DILocation(line: 1032, column: 17, scope: !5280)
!5336 = !DILocation(line: 1033, column: 25, scope: !5274)
!5337 = !DILocation(line: 1034, column: 13, scope: !5274)
!5338 = !DILocation(line: 1018, column: 62, scope: !5339)
!5339 = !DILexicalBlockFile(scope: !5267, file: !1012, discriminator: 2)
!5340 = !DILocation(line: 1018, column: 67, scope: !5339)
!5341 = !DILocation(line: 1018, column: 13, scope: !5339)
!5342 = distinct !{!5342, !5343}
!5343 = !DILocation(line: 1018, column: 13, scope: !5260)
!5344 = !DILocation(line: 1035, column: 9, scope: !5260)
!5345 = !DILocation(line: 1017, column: 47, scope: !5346)
!5346 = !DILexicalBlockFile(scope: !5253, file: !1012, discriminator: 2)
!5347 = !DILocation(line: 1017, column: 9, scope: !5346)
!5348 = distinct !{!5348, !5349}
!5349 = !DILocation(line: 1017, column: 9, scope: !5249)
!5350 = !DILocation(line: 1036, column: 5, scope: !5249)
!5351 = !DILocation(line: 1016, column: 46, scope: !5352)
!5352 = !DILexicalBlockFile(scope: !5242, file: !1012, discriminator: 2)
!5353 = !DILocation(line: 1016, column: 5, scope: !5352)
!5354 = distinct !{!5354, !5355}
!5355 = !DILocation(line: 1016, column: 5, scope: !5174)
!5356 = !DILocation(line: 1038, column: 5, scope: !5174)
!5357 = !DILocation(line: 1039, column: 1, scope: !5174)
!5358 = distinct !DISubprogram(name: "ff_dca_seek_bits", scope: !2334, file: !2334, line: 89, type: !5359, isLocal: true, isDefinition: true, scopeLine: 90, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!5359 = !DISubroutineType(types: !5360)
!5360 = !{!996, !4570, !996}
!5361 = !DILocalVariable(name: "s", arg: 1, scope: !5358, file: !2334, line: 89, type: !4570)
!5362 = !DILocation(line: 89, column: 51, scope: !5358)
!5363 = !DILocalVariable(name: "p", arg: 2, scope: !5358, file: !2334, line: 89, type: !996)
!5364 = !DILocation(line: 89, column: 58, scope: !5358)
!5365 = !DILocation(line: 91, column: 9, scope: !5366)
!5366 = distinct !DILexicalBlock(scope: !5358, file: !2334, line: 91, column: 9)
!5367 = !DILocation(line: 91, column: 28, scope: !5366)
!5368 = !DILocation(line: 91, column: 13, scope: !5366)
!5369 = !DILocation(line: 91, column: 11, scope: !5366)
!5370 = !DILocation(line: 91, column: 31, scope: !5366)
!5371 = !DILocation(line: 91, column: 34, scope: !5372)
!5372 = !DILexicalBlockFile(scope: !5366, file: !2334, discriminator: 1)
!5373 = !DILocation(line: 91, column: 38, scope: !5372)
!5374 = !DILocation(line: 91, column: 41, scope: !5372)
!5375 = !DILocation(line: 91, column: 36, scope: !5372)
!5376 = !DILocation(line: 91, column: 9, scope: !5372)
!5377 = !DILocation(line: 92, column: 9, scope: !5366)
!5378 = !DILocation(line: 93, column: 20, scope: !5358)
!5379 = !DILocation(line: 93, column: 23, scope: !5358)
!5380 = !DILocation(line: 93, column: 42, scope: !5358)
!5381 = !DILocation(line: 93, column: 27, scope: !5358)
!5382 = !DILocation(line: 93, column: 25, scope: !5358)
!5383 = !DILocation(line: 93, column: 5, scope: !5384)
!5384 = !DILexicalBlockFile(scope: !5358, file: !2334, discriminator: 1)
!5385 = !DILocation(line: 94, column: 5, scope: !5358)
!5386 = !DILocation(line: 95, column: 1, scope: !5358)
!5387 = distinct !DISubprogram(name: "init_get_bits", scope: !1747, file: !1747, line: 615, type: !4568, isLocal: true, isDefinition: true, scopeLine: 617, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!5388 = !DILocalVariable(name: "s", arg: 1, scope: !5387, file: !1747, line: 615, type: !4570)
!5389 = !DILocation(line: 615, column: 48, scope: !5387)
!5390 = !DILocalVariable(name: "buffer", arg: 2, scope: !5387, file: !1747, line: 615, type: !1137)
!5391 = !DILocation(line: 615, column: 66, scope: !5387)
!5392 = !DILocalVariable(name: "bit_size", arg: 3, scope: !5387, file: !1747, line: 616, type: !996)
!5393 = !DILocation(line: 616, column: 37, scope: !5387)
!5394 = !DILocalVariable(name: "buffer_size", scope: !5387, file: !1747, line: 618, type: !996)
!5395 = !DILocation(line: 618, column: 9, scope: !5387)
!5396 = !DILocalVariable(name: "ret", scope: !5387, file: !1747, line: 619, type: !996)
!5397 = !DILocation(line: 619, column: 9, scope: !5387)
!5398 = !DILocation(line: 621, column: 9, scope: !5399)
!5399 = distinct !DILexicalBlock(scope: !5387, file: !1747, line: 621, column: 9)
!5400 = !DILocation(line: 621, column: 18, scope: !5399)
!5401 = !DILocation(line: 621, column: 64, scope: !5399)
!5402 = !DILocation(line: 621, column: 67, scope: !5403)
!5403 = !DILexicalBlockFile(scope: !5399, file: !1747, discriminator: 1)
!5404 = !DILocation(line: 621, column: 76, scope: !5403)
!5405 = !DILocation(line: 621, column: 80, scope: !5403)
!5406 = !DILocation(line: 621, column: 84, scope: !5407)
!5407 = !DILexicalBlockFile(scope: !5399, file: !1747, discriminator: 2)
!5408 = !DILocation(line: 621, column: 9, scope: !5407)
!5409 = !DILocation(line: 622, column: 18, scope: !5410)
!5410 = distinct !DILexicalBlock(scope: !5399, file: !1747, line: 621, column: 92)
!5411 = !DILocation(line: 623, column: 16, scope: !5410)
!5412 = !DILocation(line: 624, column: 13, scope: !5410)
!5413 = !DILocation(line: 625, column: 5, scope: !5410)
!5414 = !DILocation(line: 627, column: 20, scope: !5387)
!5415 = !DILocation(line: 627, column: 29, scope: !5387)
!5416 = !DILocation(line: 627, column: 34, scope: !5387)
!5417 = !DILocation(line: 627, column: 17, scope: !5387)
!5418 = !DILocation(line: 629, column: 17, scope: !5387)
!5419 = !DILocation(line: 629, column: 5, scope: !5387)
!5420 = !DILocation(line: 629, column: 8, scope: !5387)
!5421 = !DILocation(line: 629, column: 15, scope: !5387)
!5422 = !DILocation(line: 630, column: 23, scope: !5387)
!5423 = !DILocation(line: 630, column: 5, scope: !5387)
!5424 = !DILocation(line: 630, column: 8, scope: !5387)
!5425 = !DILocation(line: 630, column: 21, scope: !5387)
!5426 = !DILocation(line: 631, column: 29, scope: !5387)
!5427 = !DILocation(line: 631, column: 38, scope: !5387)
!5428 = !DILocation(line: 631, column: 5, scope: !5387)
!5429 = !DILocation(line: 631, column: 8, scope: !5387)
!5430 = !DILocation(line: 631, column: 27, scope: !5387)
!5431 = !DILocation(line: 632, column: 21, scope: !5387)
!5432 = !DILocation(line: 632, column: 30, scope: !5387)
!5433 = !DILocation(line: 632, column: 28, scope: !5387)
!5434 = !DILocation(line: 632, column: 5, scope: !5387)
!5435 = !DILocation(line: 632, column: 8, scope: !5387)
!5436 = !DILocation(line: 632, column: 19, scope: !5387)
!5437 = !DILocation(line: 633, column: 5, scope: !5387)
!5438 = !DILocation(line: 633, column: 8, scope: !5387)
!5439 = !DILocation(line: 633, column: 14, scope: !5387)
!5440 = !DILocation(line: 639, column: 12, scope: !5387)
!5441 = !DILocation(line: 639, column: 5, scope: !5387)
!5442 = distinct !DISubprogram(name: "get_bits_long", scope: !1747, file: !1747, line: 531, type: !5443, isLocal: true, isDefinition: true, scopeLine: 532, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!5443 = !DISubroutineType(types: !5444)
!5444 = !{!993, !4570, !996}
!5445 = !DILocalVariable(name: "s", arg: 1, scope: !5442, file: !1747, line: 531, type: !4570)
!5446 = !DILocation(line: 531, column: 57, scope: !5442)
!5447 = !DILocalVariable(name: "n", arg: 2, scope: !5442, file: !1747, line: 531, type: !996)
!5448 = !DILocation(line: 531, column: 64, scope: !5442)
!5449 = !DILocation(line: 534, column: 10, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5442, file: !1747, line: 534, column: 9)
!5451 = !DILocation(line: 534, column: 9, scope: !5442)
!5452 = !DILocation(line: 535, column: 9, scope: !5453)
!5453 = distinct !DILexicalBlock(scope: !5450, file: !1747, line: 534, column: 13)
!5454 = !DILocation(line: 540, column: 16, scope: !5455)
!5455 = distinct !DILexicalBlock(scope: !5450, file: !1747, line: 540, column: 16)
!5456 = !DILocation(line: 540, column: 18, scope: !5455)
!5457 = !DILocation(line: 540, column: 16, scope: !5450)
!5458 = !DILocation(line: 541, column: 25, scope: !5459)
!5459 = distinct !DILexicalBlock(scope: !5455, file: !1747, line: 540, column: 25)
!5460 = !DILocation(line: 541, column: 28, scope: !5459)
!5461 = !DILocation(line: 541, column: 16, scope: !5459)
!5462 = !DILocation(line: 541, column: 9, scope: !5459)
!5463 = !DILocalVariable(name: "ret", scope: !5464, file: !1747, line: 547, type: !993)
!5464 = distinct !DILexicalBlock(scope: !5455, file: !1747, line: 542, column: 12)
!5465 = !DILocation(line: 547, column: 18, scope: !5464)
!5466 = !DILocation(line: 547, column: 33, scope: !5464)
!5467 = !DILocation(line: 547, column: 24, scope: !5464)
!5468 = !DILocation(line: 547, column: 44, scope: !5464)
!5469 = !DILocation(line: 547, column: 46, scope: !5464)
!5470 = !DILocation(line: 547, column: 40, scope: !5464)
!5471 = !DILocation(line: 548, column: 16, scope: !5464)
!5472 = !DILocation(line: 548, column: 31, scope: !5464)
!5473 = !DILocation(line: 548, column: 34, scope: !5464)
!5474 = !DILocation(line: 548, column: 36, scope: !5464)
!5475 = !DILocation(line: 548, column: 22, scope: !5464)
!5476 = !DILocation(line: 548, column: 20, scope: !5464)
!5477 = !DILocation(line: 548, column: 9, scope: !5464)
!5478 = !DILocation(line: 552, column: 1, scope: !5442)
!5479 = distinct !DISubprogram(name: "get_bits", scope: !1747, file: !1747, line: 381, type: !5443, isLocal: true, isDefinition: true, scopeLine: 382, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!5480 = !DILocalVariable(name: "x", arg: 1, scope: !5481, file: !5482, line: 66, type: !1003)
!5481 = distinct !DISubprogram(name: "av_bswap32", scope: !5482, file: !5482, line: 66, type: !5483, isLocal: true, isDefinition: true, scopeLine: 67, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!5482 = !DIFile(filename: "./libavutil/bswap.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!5483 = !DISubroutineType(types: !5484)
!5484 = !{!1003, !1003}
!5485 = !DILocation(line: 66, column: 98, scope: !5481, inlinedAt: !5486)
!5486 = distinct !DILocation(line: 401, column: 16, scope: !5479)
!5487 = !DILocalVariable(name: "s", arg: 1, scope: !5479, file: !1747, line: 381, type: !4570)
!5488 = !DILocation(line: 381, column: 52, scope: !5479)
!5489 = !DILocalVariable(name: "n", arg: 2, scope: !5479, file: !1747, line: 381, type: !996)
!5490 = !DILocation(line: 381, column: 59, scope: !5479)
!5491 = !DILocalVariable(name: "tmp", scope: !5479, file: !1747, line: 383, type: !996)
!5492 = !DILocation(line: 383, column: 18, scope: !5479)
!5493 = !DILocalVariable(name: "re_index", scope: !5479, file: !1747, line: 399, type: !993)
!5494 = !DILocation(line: 399, column: 18, scope: !5479)
!5495 = !DILocation(line: 399, column: 30, scope: !5479)
!5496 = !DILocation(line: 399, column: 34, scope: !5479)
!5497 = !DILocalVariable(name: "re_cache", scope: !5479, file: !1747, line: 399, type: !993)
!5498 = !DILocation(line: 399, column: 78, scope: !5479)
!5499 = !DILocalVariable(name: "re_size_plus8", scope: !5479, file: !1747, line: 399, type: !993)
!5500 = !DILocation(line: 399, column: 101, scope: !5479)
!5501 = !DILocation(line: 399, column: 118, scope: !5479)
!5502 = !DILocation(line: 399, column: 122, scope: !5479)
!5503 = !DILocation(line: 401, column: 60, scope: !5479)
!5504 = !DILocation(line: 401, column: 64, scope: !5479)
!5505 = !DILocation(line: 401, column: 74, scope: !5479)
!5506 = !DILocation(line: 401, column: 83, scope: !5479)
!5507 = !DILocation(line: 401, column: 71, scope: !5479)
!5508 = !DILocation(line: 401, column: 92, scope: !5479)
!5509 = !DILocation(line: 401, column: 16, scope: !5479)
!5510 = !DILocation(line: 68, column: 16, scope: !5481, inlinedAt: !5486)
!5511 = !DILocation(line: 68, column: 19, scope: !5481, inlinedAt: !5486)
!5512 = !DILocation(line: 68, column: 24, scope: !5481, inlinedAt: !5486)
!5513 = !DILocation(line: 68, column: 38, scope: !5481, inlinedAt: !5486)
!5514 = !DILocation(line: 68, column: 41, scope: !5481, inlinedAt: !5486)
!5515 = !DILocation(line: 68, column: 46, scope: !5481, inlinedAt: !5486)
!5516 = !DILocation(line: 68, column: 34, scope: !5481, inlinedAt: !5486)
!5517 = !DILocation(line: 68, column: 57, scope: !5481, inlinedAt: !5486)
!5518 = !DILocation(line: 68, column: 69, scope: !5481, inlinedAt: !5486)
!5519 = !DILocation(line: 68, column: 72, scope: !5481, inlinedAt: !5486)
!5520 = !DILocation(line: 68, column: 79, scope: !5481, inlinedAt: !5486)
!5521 = !DILocation(line: 68, column: 84, scope: !5481, inlinedAt: !5486)
!5522 = !DILocation(line: 68, column: 99, scope: !5481, inlinedAt: !5486)
!5523 = !DILocation(line: 68, column: 102, scope: !5481, inlinedAt: !5486)
!5524 = !DILocation(line: 68, column: 109, scope: !5481, inlinedAt: !5486)
!5525 = !DILocation(line: 68, column: 114, scope: !5481, inlinedAt: !5486)
!5526 = !DILocation(line: 68, column: 94, scope: !5481, inlinedAt: !5486)
!5527 = !DILocation(line: 68, column: 63, scope: !5481, inlinedAt: !5486)
!5528 = !DILocation(line: 401, column: 100, scope: !5479)
!5529 = !DILocation(line: 401, column: 109, scope: !5479)
!5530 = !DILocation(line: 401, column: 96, scope: !5479)
!5531 = !DILocation(line: 401, column: 14, scope: !5479)
!5532 = !DILocation(line: 402, column: 21, scope: !5479)
!5533 = !DILocation(line: 402, column: 31, scope: !5479)
!5534 = !DILocation(line: 402, column: 11, scope: !5479)
!5535 = !DILocation(line: 402, column: 9, scope: !5479)
!5536 = !DILocation(line: 403, column: 18, scope: !5479)
!5537 = !DILocation(line: 403, column: 36, scope: !5479)
!5538 = !DILocation(line: 403, column: 48, scope: !5479)
!5539 = !DILocation(line: 403, column: 45, scope: !5479)
!5540 = !DILocation(line: 403, column: 33, scope: !5479)
!5541 = !DILocation(line: 403, column: 17, scope: !5479)
!5542 = !DILocation(line: 403, column: 55, scope: !5543)
!5543 = !DILexicalBlockFile(scope: !5479, file: !1747, discriminator: 1)
!5544 = !DILocation(line: 403, column: 67, scope: !5543)
!5545 = !DILocation(line: 403, column: 64, scope: !5543)
!5546 = !DILocation(line: 403, column: 17, scope: !5543)
!5547 = !DILocation(line: 403, column: 74, scope: !5548)
!5548 = !DILexicalBlockFile(scope: !5479, file: !1747, discriminator: 2)
!5549 = !DILocation(line: 403, column: 17, scope: !5548)
!5550 = !DILocation(line: 403, column: 17, scope: !5551)
!5551 = !DILexicalBlockFile(scope: !5479, file: !1747, discriminator: 3)
!5552 = !DILocation(line: 403, column: 14, scope: !5551)
!5553 = !DILocation(line: 404, column: 18, scope: !5479)
!5554 = !DILocation(line: 404, column: 6, scope: !5479)
!5555 = !DILocation(line: 404, column: 10, scope: !5479)
!5556 = !DILocation(line: 404, column: 16, scope: !5479)
!5557 = !DILocation(line: 406, column: 12, scope: !5479)
!5558 = !DILocation(line: 406, column: 5, scope: !5479)
!5559 = distinct !DISubprogram(name: "ff_dca_check_crc", scope: !2334, file: !2334, line: 75, type: !5560, isLocal: true, isDefinition: true, scopeLine: 77, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!5560 = !DISubroutineType(types: !5561)
!5561 = !{!996, !1021, !4570, !996, !996}
!5562 = !DILocalVariable(name: "avctx", arg: 1, scope: !5559, file: !2334, line: 75, type: !1021)
!5563 = !DILocation(line: 75, column: 52, scope: !5559)
!5564 = !DILocalVariable(name: "s", arg: 2, scope: !5559, file: !2334, line: 75, type: !4570)
!5565 = !DILocation(line: 75, column: 74, scope: !5559)
!5566 = !DILocalVariable(name: "p1", arg: 3, scope: !5559, file: !2334, line: 76, type: !996)
!5567 = !DILocation(line: 76, column: 40, scope: !5559)
!5568 = !DILocalVariable(name: "p2", arg: 4, scope: !5559, file: !2334, line: 76, type: !996)
!5569 = !DILocation(line: 76, column: 48, scope: !5559)
!5570 = !DILocalVariable(name: "dca", scope: !5559, file: !2334, line: 78, type: !2332)
!5571 = !DILocation(line: 78, column: 17, scope: !5559)
!5572 = !DILocation(line: 78, column: 23, scope: !5559)
!5573 = !DILocation(line: 78, column: 30, scope: !5559)
!5574 = !DILocation(line: 80, column: 11, scope: !5575)
!5575 = distinct !DILexicalBlock(scope: !5559, file: !2334, line: 80, column: 9)
!5576 = !DILocation(line: 80, column: 18, scope: !5575)
!5577 = !DILocation(line: 80, column: 34, scope: !5575)
!5578 = !DILocation(line: 80, column: 9, scope: !5559)
!5579 = !DILocation(line: 81, column: 9, scope: !5575)
!5580 = !DILocation(line: 82, column: 11, scope: !5581)
!5581 = distinct !DILexicalBlock(scope: !5559, file: !2334, line: 82, column: 9)
!5582 = !DILocation(line: 82, column: 16, scope: !5581)
!5583 = !DILocation(line: 82, column: 14, scope: !5581)
!5584 = !DILocation(line: 82, column: 20, scope: !5581)
!5585 = !DILocation(line: 82, column: 25, scope: !5581)
!5586 = !DILocation(line: 82, column: 28, scope: !5587)
!5587 = !DILexicalBlockFile(scope: !5581, file: !2334, discriminator: 1)
!5588 = !DILocation(line: 82, column: 31, scope: !5587)
!5589 = !DILocation(line: 82, column: 35, scope: !5587)
!5590 = !DILocation(line: 82, column: 38, scope: !5591)
!5591 = !DILexicalBlockFile(scope: !5581, file: !2334, discriminator: 2)
!5592 = !DILocation(line: 82, column: 43, scope: !5591)
!5593 = !DILocation(line: 82, column: 46, scope: !5591)
!5594 = !DILocation(line: 82, column: 41, scope: !5591)
!5595 = !DILocation(line: 82, column: 59, scope: !5591)
!5596 = !DILocation(line: 82, column: 62, scope: !5597)
!5597 = !DILexicalBlockFile(scope: !5581, file: !2334, discriminator: 3)
!5598 = !DILocation(line: 82, column: 67, scope: !5597)
!5599 = !DILocation(line: 82, column: 65, scope: !5597)
!5600 = !DILocation(line: 82, column: 70, scope: !5597)
!5601 = !DILocation(line: 82, column: 9, scope: !5597)
!5602 = !DILocation(line: 83, column: 9, scope: !5581)
!5603 = !DILocation(line: 84, column: 16, scope: !5604)
!5604 = distinct !DILexicalBlock(scope: !5559, file: !2334, line: 84, column: 9)
!5605 = !DILocation(line: 84, column: 21, scope: !5604)
!5606 = !DILocation(line: 84, column: 37, scope: !5604)
!5607 = !DILocation(line: 84, column: 40, scope: !5604)
!5608 = !DILocation(line: 84, column: 49, scope: !5604)
!5609 = !DILocation(line: 84, column: 52, scope: !5604)
!5610 = !DILocation(line: 84, column: 47, scope: !5604)
!5611 = !DILocation(line: 84, column: 58, scope: !5604)
!5612 = !DILocation(line: 84, column: 63, scope: !5604)
!5613 = !DILocation(line: 84, column: 61, scope: !5604)
!5614 = !DILocation(line: 84, column: 67, scope: !5604)
!5615 = !DILocation(line: 84, column: 57, scope: !5604)
!5616 = !DILocation(line: 84, column: 9, scope: !5604)
!5617 = !DILocation(line: 84, column: 9, scope: !5559)
!5618 = !DILocation(line: 85, column: 9, scope: !5604)
!5619 = !DILocation(line: 86, column: 5, scope: !5559)
!5620 = !DILocation(line: 87, column: 1, scope: !5559)
!5621 = distinct !DISubprogram(name: "get_bits1", scope: !1747, file: !1747, line: 487, type: !5622, isLocal: true, isDefinition: true, scopeLine: 488, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!5622 = !DISubroutineType(types: !5623)
!5623 = !{!993, !4570}
!5624 = !DILocalVariable(name: "s", arg: 1, scope: !5621, file: !1747, line: 487, type: !4570)
!5625 = !DILocation(line: 487, column: 53, scope: !5621)
!5626 = !DILocalVariable(name: "index", scope: !5621, file: !1747, line: 499, type: !993)
!5627 = !DILocation(line: 499, column: 18, scope: !5621)
!5628 = !DILocation(line: 499, column: 26, scope: !5621)
!5629 = !DILocation(line: 499, column: 29, scope: !5621)
!5630 = !DILocalVariable(name: "result", scope: !5621, file: !1747, line: 500, type: !1004)
!5631 = !DILocation(line: 500, column: 13, scope: !5621)
!5632 = !DILocation(line: 500, column: 32, scope: !5621)
!5633 = !DILocation(line: 500, column: 38, scope: !5621)
!5634 = !DILocation(line: 500, column: 22, scope: !5621)
!5635 = !DILocation(line: 500, column: 25, scope: !5621)
!5636 = !DILocation(line: 505, column: 16, scope: !5621)
!5637 = !DILocation(line: 505, column: 22, scope: !5621)
!5638 = !DILocation(line: 505, column: 12, scope: !5621)
!5639 = !DILocation(line: 506, column: 12, scope: !5621)
!5640 = !DILocation(line: 509, column: 9, scope: !5641)
!5641 = distinct !DILexicalBlock(scope: !5621, file: !1747, line: 509, column: 9)
!5642 = !DILocation(line: 509, column: 12, scope: !5641)
!5643 = !DILocation(line: 509, column: 20, scope: !5641)
!5644 = !DILocation(line: 509, column: 23, scope: !5641)
!5645 = !DILocation(line: 509, column: 18, scope: !5641)
!5646 = !DILocation(line: 509, column: 9, scope: !5621)
!5647 = !DILocation(line: 511, column: 14, scope: !5641)
!5648 = !DILocation(line: 511, column: 9, scope: !5641)
!5649 = !DILocation(line: 512, column: 16, scope: !5621)
!5650 = !DILocation(line: 512, column: 5, scope: !5621)
!5651 = !DILocation(line: 512, column: 8, scope: !5621)
!5652 = !DILocation(line: 512, column: 14, scope: !5621)
!5653 = !DILocation(line: 514, column: 12, scope: !5621)
!5654 = !DILocation(line: 514, column: 5, scope: !5621)
!5655 = distinct !DISubprogram(name: "NEG_USR32", scope: !5656, file: !5656, line: 124, type: !5657, isLocal: true, isDefinition: true, scopeLine: 124, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!5656 = !DIFile(filename: "libavcodec/x86/mathops.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!5657 = !DISubroutineType(types: !5658)
!5658 = !{!1003, !1003, !1299}
!5659 = !DILocalVariable(name: "a", arg: 1, scope: !5655, file: !5656, line: 124, type: !1003)
!5660 = !DILocation(line: 124, column: 43, scope: !5655)
!5661 = !DILocalVariable(name: "s", arg: 2, scope: !5655, file: !5656, line: 124, type: !1299)
!5662 = !DILocation(line: 124, column: 53, scope: !5655)
!5663 = !DILocation(line: 125, column: 5, scope: !5655)
!5664 = !DILocation(line: 127, column: 29, scope: !5655)
!5665 = !DILocation(line: 127, column: 28, scope: !5655)
!5666 = !DILocation(line: 127, column: 18, scope: !5655)
!5667 = !{i32 181488, i32 181502}
!5668 = !DILocation(line: 129, column: 12, scope: !5655)
!5669 = !DILocation(line: 129, column: 5, scope: !5655)
!5670 = distinct !DISubprogram(name: "chs_parse_header", scope: !1012, file: !1012, line: 116, type: !5671, isLocal: true, isDefinition: true, scopeLine: 117, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!5671 = !DISubroutineType(types: !5672)
!5672 = !{!996, !1015, !2698, !2003}
!5673 = !DILocalVariable(name: "x", arg: 1, scope: !5674, file: !2311, line: 332, type: !996)
!5674 = distinct !DISubprogram(name: "av_ceil_log2_c", scope: !2311, file: !2311, line: 332, type: !5675, isLocal: true, isDefinition: true, scopeLine: 333, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!5675 = !DISubroutineType(types: !5676)
!5676 = !{!996, !996}
!5677 = !DILocation(line: 332, column: 92, scope: !5674, inlinedAt: !5678)
!5678 = distinct !DILocation(line: 281, column: 28, scope: !5679)
!5679 = distinct !DILexicalBlock(scope: !5680, file: !1012, line: 280, column: 73)
!5680 = distinct !DILexicalBlock(scope: !5681, file: !1012, line: 280, column: 13)
!5681 = distinct !DILexicalBlock(scope: !5682, file: !1012, line: 278, column: 69)
!5682 = distinct !DILexicalBlock(scope: !5683, file: !1012, line: 278, column: 5)
!5683 = distinct !DILexicalBlock(scope: !5670, file: !1012, line: 278, column: 5)
!5684 = !DILocalVariable(name: "x", arg: 1, scope: !5685, file: !2311, line: 342, type: !1003)
!5685 = distinct !DISubprogram(name: "av_popcount_c", scope: !2311, file: !2311, line: 342, type: !5686, isLocal: true, isDefinition: true, scopeLine: 343, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!5686 = !DISubroutineType(types: !5687)
!5687 = !{!996, !1003}
!5688 = !DILocation(line: 342, column: 96, scope: !5685, inlinedAt: !5689)
!5689 = distinct !DILocation(line: 217, column: 13, scope: !5690)
!5690 = distinct !DILexicalBlock(scope: !5691, file: !1012, line: 217, column: 13)
!5691 = distinct !DILexicalBlock(scope: !5692, file: !1012, line: 175, column: 43)
!5692 = distinct !DILexicalBlock(scope: !5670, file: !1012, line: 175, column: 9)
!5693 = !DILocalVariable(name: "s", arg: 1, scope: !5670, file: !1012, line: 116, type: !1015)
!5694 = !DILocation(line: 116, column: 44, scope: !5670)
!5695 = !DILocalVariable(name: "c", arg: 2, scope: !5670, file: !1012, line: 116, type: !2698)
!5696 = !DILocation(line: 116, column: 60, scope: !5670)
!5697 = !DILocalVariable(name: "asset", arg: 3, scope: !5670, file: !1012, line: 116, type: !2003)
!5698 = !DILocation(line: 116, column: 77, scope: !5670)
!5699 = !DILocalVariable(name: "i", scope: !5670, file: !1012, line: 118, type: !996)
!5700 = !DILocation(line: 118, column: 9, scope: !5670)
!5701 = !DILocalVariable(name: "j", scope: !5670, file: !1012, line: 118, type: !996)
!5702 = !DILocation(line: 118, column: 12, scope: !5670)
!5703 = !DILocalVariable(name: "k", scope: !5670, file: !1012, line: 118, type: !996)
!5704 = !DILocation(line: 118, column: 15, scope: !5670)
!5705 = !DILocalVariable(name: "ret", scope: !5670, file: !1012, line: 118, type: !996)
!5706 = !DILocation(line: 118, column: 18, scope: !5670)
!5707 = !DILocalVariable(name: "band", scope: !5670, file: !1012, line: 118, type: !996)
!5708 = !DILocation(line: 118, column: 23, scope: !5670)
!5709 = !DILocalVariable(name: "header_size", scope: !5670, file: !1012, line: 118, type: !996)
!5710 = !DILocation(line: 118, column: 29, scope: !5670)
!5711 = !DILocalVariable(name: "header_pos", scope: !5670, file: !1012, line: 118, type: !996)
!5712 = !DILocation(line: 118, column: 42, scope: !5670)
!5713 = !DILocation(line: 118, column: 71, scope: !5670)
!5714 = !DILocation(line: 118, column: 74, scope: !5670)
!5715 = !DILocation(line: 118, column: 55, scope: !5670)
!5716 = !DILocalVariable(name: "p", scope: !5670, file: !1012, line: 119, type: !2698)
!5717 = !DILocation(line: 119, column: 18, scope: !5670)
!5718 = !DILocation(line: 119, column: 23, scope: !5670)
!5719 = !DILocation(line: 119, column: 26, scope: !5670)
!5720 = !DILocalVariable(name: "b", scope: !5670, file: !1012, line: 120, type: !3354)
!5721 = !DILocation(line: 120, column: 17, scope: !5670)
!5722 = !DILocation(line: 123, column: 29, scope: !5670)
!5723 = !DILocation(line: 123, column: 32, scope: !5670)
!5724 = !DILocation(line: 123, column: 19, scope: !5670)
!5725 = !DILocation(line: 123, column: 40, scope: !5670)
!5726 = !DILocation(line: 123, column: 17, scope: !5670)
!5727 = !DILocation(line: 126, column: 26, scope: !5728)
!5728 = distinct !DILexicalBlock(scope: !5670, file: !1012, line: 126, column: 9)
!5729 = !DILocation(line: 126, column: 29, scope: !5728)
!5730 = !DILocation(line: 126, column: 37, scope: !5728)
!5731 = !DILocation(line: 126, column: 40, scope: !5728)
!5732 = !DILocation(line: 126, column: 44, scope: !5728)
!5733 = !DILocation(line: 126, column: 56, scope: !5728)
!5734 = !DILocation(line: 126, column: 69, scope: !5728)
!5735 = !DILocation(line: 126, column: 81, scope: !5728)
!5736 = !DILocation(line: 126, column: 67, scope: !5728)
!5737 = !DILocation(line: 126, column: 9, scope: !5728)
!5738 = !DILocation(line: 126, column: 9, scope: !5670)
!5739 = !DILocation(line: 127, column: 16, scope: !5740)
!5740 = distinct !DILexicalBlock(scope: !5728, file: !1012, line: 126, column: 87)
!5741 = !DILocation(line: 127, column: 19, scope: !5740)
!5742 = !DILocation(line: 127, column: 9, scope: !5740)
!5743 = !DILocation(line: 128, column: 9, scope: !5740)
!5744 = !DILocation(line: 132, column: 30, scope: !5670)
!5745 = !DILocation(line: 132, column: 33, scope: !5670)
!5746 = !DILocation(line: 132, column: 20, scope: !5670)
!5747 = !DILocation(line: 132, column: 40, scope: !5670)
!5748 = !DILocation(line: 132, column: 5, scope: !5670)
!5749 = !DILocation(line: 132, column: 8, scope: !5670)
!5750 = !DILocation(line: 132, column: 18, scope: !5670)
!5751 = !DILocation(line: 133, column: 9, scope: !5752)
!5752 = distinct !DILexicalBlock(scope: !5670, file: !1012, line: 133, column: 9)
!5753 = !DILocation(line: 133, column: 12, scope: !5752)
!5754 = !DILocation(line: 133, column: 22, scope: !5752)
!5755 = !DILocation(line: 133, column: 9, scope: !5670)
!5756 = !DILocation(line: 134, column: 31, scope: !5757)
!5757 = distinct !DILexicalBlock(scope: !5752, file: !1012, line: 133, column: 27)
!5758 = !DILocation(line: 134, column: 34, scope: !5757)
!5759 = !DILocation(line: 134, column: 60, scope: !5757)
!5760 = !DILocation(line: 134, column: 63, scope: !5757)
!5761 = !DILocation(line: 134, column: 9, scope: !5757)
!5762 = !DILocation(line: 135, column: 9, scope: !5757)
!5763 = !DILocation(line: 139, column: 36, scope: !5670)
!5764 = !DILocation(line: 139, column: 39, scope: !5670)
!5765 = !DILocation(line: 139, column: 43, scope: !5670)
!5766 = !DILocation(line: 139, column: 46, scope: !5670)
!5767 = !DILocation(line: 139, column: 26, scope: !5670)
!5768 = !DILocation(line: 139, column: 5, scope: !5670)
!5769 = !DILocation(line: 139, column: 8, scope: !5670)
!5770 = !DILocation(line: 139, column: 24, scope: !5670)
!5771 = !DILocation(line: 142, column: 32, scope: !5670)
!5772 = !DILocation(line: 142, column: 35, scope: !5670)
!5773 = !DILocation(line: 142, column: 22, scope: !5670)
!5774 = !DILocation(line: 142, column: 42, scope: !5670)
!5775 = !DILocation(line: 142, column: 5, scope: !5670)
!5776 = !DILocation(line: 142, column: 8, scope: !5670)
!5777 = !DILocation(line: 142, column: 20, scope: !5670)
!5778 = !DILocation(line: 145, column: 36, scope: !5670)
!5779 = !DILocation(line: 145, column: 39, scope: !5670)
!5780 = !DILocation(line: 145, column: 26, scope: !5670)
!5781 = !DILocation(line: 145, column: 46, scope: !5670)
!5782 = !DILocation(line: 145, column: 5, scope: !5670)
!5783 = !DILocation(line: 145, column: 8, scope: !5670)
!5784 = !DILocation(line: 145, column: 24, scope: !5670)
!5785 = !DILocation(line: 146, column: 9, scope: !5786)
!5786 = distinct !DILexicalBlock(scope: !5670, file: !1012, line: 146, column: 9)
!5787 = !DILocation(line: 146, column: 12, scope: !5786)
!5788 = !DILocation(line: 146, column: 28, scope: !5786)
!5789 = !DILocation(line: 146, column: 34, scope: !5786)
!5790 = !DILocation(line: 146, column: 37, scope: !5791)
!5791 = !DILexicalBlockFile(scope: !5786, file: !1012, discriminator: 1)
!5792 = !DILocation(line: 146, column: 40, scope: !5791)
!5793 = !DILocation(line: 146, column: 56, scope: !5791)
!5794 = !DILocation(line: 146, column: 62, scope: !5791)
!5795 = !DILocation(line: 146, column: 65, scope: !5796)
!5796 = !DILexicalBlockFile(scope: !5786, file: !1012, discriminator: 2)
!5797 = !DILocation(line: 146, column: 68, scope: !5796)
!5798 = !DILocation(line: 146, column: 84, scope: !5796)
!5799 = !DILocation(line: 146, column: 9, scope: !5796)
!5800 = !DILocation(line: 147, column: 31, scope: !5801)
!5801 = distinct !DILexicalBlock(scope: !5786, file: !1012, line: 146, column: 91)
!5802 = !DILocation(line: 147, column: 34, scope: !5801)
!5803 = !DILocation(line: 147, column: 74, scope: !5801)
!5804 = !DILocation(line: 147, column: 77, scope: !5801)
!5805 = !DILocation(line: 147, column: 9, scope: !5801)
!5806 = !DILocation(line: 148, column: 9, scope: !5801)
!5807 = !DILocation(line: 151, column: 9, scope: !5808)
!5808 = distinct !DILexicalBlock(scope: !5670, file: !1012, line: 151, column: 9)
!5809 = !DILocation(line: 151, column: 12, scope: !5808)
!5810 = !DILocation(line: 151, column: 26, scope: !5808)
!5811 = !DILocation(line: 151, column: 29, scope: !5808)
!5812 = !DILocation(line: 151, column: 24, scope: !5808)
!5813 = !DILocation(line: 151, column: 9, scope: !5670)
!5814 = !DILocation(line: 152, column: 16, scope: !5815)
!5815 = distinct !DILexicalBlock(scope: !5808, file: !1012, line: 151, column: 46)
!5816 = !DILocation(line: 152, column: 19, scope: !5815)
!5817 = !DILocation(line: 152, column: 92, scope: !5815)
!5818 = !DILocation(line: 152, column: 95, scope: !5815)
!5819 = !DILocation(line: 152, column: 108, scope: !5815)
!5820 = !DILocation(line: 152, column: 111, scope: !5815)
!5821 = !DILocation(line: 152, column: 9, scope: !5815)
!5822 = !DILocation(line: 153, column: 9, scope: !5815)
!5823 = !DILocation(line: 157, column: 47, scope: !5670)
!5824 = !DILocation(line: 157, column: 50, scope: !5670)
!5825 = !DILocation(line: 157, column: 37, scope: !5670)
!5826 = !DILocation(line: 157, column: 15, scope: !5670)
!5827 = !DILocation(line: 157, column: 5, scope: !5670)
!5828 = !DILocation(line: 157, column: 8, scope: !5670)
!5829 = !DILocation(line: 157, column: 13, scope: !5670)
!5830 = !DILocation(line: 158, column: 9, scope: !5831)
!5831 = distinct !DILexicalBlock(scope: !5670, file: !1012, line: 158, column: 9)
!5832 = !DILocation(line: 158, column: 12, scope: !5831)
!5833 = !DILocation(line: 158, column: 17, scope: !5831)
!5834 = !DILocation(line: 158, column: 9, scope: !5670)
!5835 = !DILocation(line: 159, column: 31, scope: !5836)
!5836 = distinct !DILexicalBlock(scope: !5831, file: !1012, line: 158, column: 27)
!5837 = !DILocation(line: 159, column: 34, scope: !5836)
!5838 = !DILocation(line: 159, column: 73, scope: !5836)
!5839 = !DILocation(line: 159, column: 76, scope: !5836)
!5840 = !DILocation(line: 159, column: 9, scope: !5836)
!5841 = !DILocation(line: 160, column: 9, scope: !5836)
!5842 = !DILocation(line: 164, column: 19, scope: !5843)
!5843 = distinct !DILexicalBlock(scope: !5670, file: !1012, line: 164, column: 9)
!5844 = !DILocation(line: 164, column: 22, scope: !5843)
!5845 = !DILocation(line: 164, column: 9, scope: !5843)
!5846 = !DILocation(line: 164, column: 9, scope: !5670)
!5847 = !DILocation(line: 165, column: 31, scope: !5848)
!5848 = distinct !DILexicalBlock(scope: !5843, file: !1012, line: 164, column: 30)
!5849 = !DILocation(line: 165, column: 34, scope: !5848)
!5850 = !DILocation(line: 165, column: 9, scope: !5848)
!5851 = !DILocation(line: 166, column: 9, scope: !5848)
!5852 = !DILocation(line: 170, column: 19, scope: !5853)
!5853 = distinct !DILexicalBlock(scope: !5670, file: !1012, line: 170, column: 9)
!5854 = !DILocation(line: 170, column: 22, scope: !5853)
!5855 = !DILocation(line: 170, column: 9, scope: !5853)
!5856 = !DILocation(line: 170, column: 9, scope: !5670)
!5857 = !DILocation(line: 171, column: 31, scope: !5858)
!5858 = distinct !DILexicalBlock(scope: !5853, file: !1012, line: 170, column: 30)
!5859 = !DILocation(line: 171, column: 34, scope: !5858)
!5860 = !DILocation(line: 171, column: 9, scope: !5858)
!5861 = !DILocation(line: 172, column: 9, scope: !5858)
!5862 = !DILocation(line: 175, column: 9, scope: !5692)
!5863 = !DILocation(line: 175, column: 16, scope: !5692)
!5864 = !DILocation(line: 175, column: 9, scope: !5670)
!5865 = !DILocation(line: 177, column: 39, scope: !5691)
!5866 = !DILocation(line: 177, column: 42, scope: !5691)
!5867 = !DILocation(line: 177, column: 28, scope: !5691)
!5868 = !DILocation(line: 177, column: 9, scope: !5691)
!5869 = !DILocation(line: 177, column: 12, scope: !5691)
!5870 = !DILocation(line: 177, column: 26, scope: !5691)
!5871 = !DILocation(line: 178, column: 13, scope: !5872)
!5872 = distinct !DILexicalBlock(scope: !5691, file: !1012, line: 178, column: 13)
!5873 = !DILocation(line: 178, column: 16, scope: !5872)
!5874 = !DILocation(line: 178, column: 34, scope: !5872)
!5875 = !DILocation(line: 178, column: 39, scope: !5872)
!5876 = !DILocation(line: 178, column: 36, scope: !5872)
!5877 = !DILocation(line: 178, column: 30, scope: !5872)
!5878 = !DILocation(line: 178, column: 13, scope: !5691)
!5879 = !DILocation(line: 179, column: 20, scope: !5880)
!5880 = distinct !DILexicalBlock(scope: !5872, file: !1012, line: 178, column: 43)
!5881 = !DILocation(line: 179, column: 23, scope: !5880)
!5882 = !DILocation(line: 179, column: 13, scope: !5880)
!5883 = !DILocation(line: 180, column: 13, scope: !5880)
!5884 = !DILocation(line: 184, column: 45, scope: !5691)
!5885 = !DILocation(line: 184, column: 48, scope: !5691)
!5886 = !DILocation(line: 184, column: 34, scope: !5691)
!5887 = !DILocation(line: 184, column: 9, scope: !5691)
!5888 = !DILocation(line: 184, column: 12, scope: !5691)
!5889 = !DILocation(line: 184, column: 32, scope: !5691)
!5890 = !DILocation(line: 187, column: 28, scope: !5691)
!5891 = !DILocation(line: 187, column: 31, scope: !5691)
!5892 = !DILocation(line: 187, column: 51, scope: !5691)
!5893 = !DILocation(line: 187, column: 65, scope: !5894)
!5894 = !DILexicalBlockFile(scope: !5691, file: !1012, discriminator: 1)
!5895 = !DILocation(line: 187, column: 68, scope: !5894)
!5896 = !DILocation(line: 187, column: 54, scope: !5894)
!5897 = !DILocation(line: 187, column: 51, scope: !5894)
!5898 = !DILocation(line: 187, column: 51, scope: !5899)
!5899 = !DILexicalBlockFile(scope: !5691, file: !1012, discriminator: 2)
!5900 = !DILocation(line: 187, column: 9, scope: !5899)
!5901 = !DILocation(line: 187, column: 12, scope: !5899)
!5902 = !DILocation(line: 187, column: 26, scope: !5899)
!5903 = !DILocation(line: 190, column: 13, scope: !5904)
!5904 = distinct !DILexicalBlock(scope: !5691, file: !1012, line: 190, column: 13)
!5905 = !DILocation(line: 190, column: 16, scope: !5904)
!5906 = !DILocation(line: 190, column: 36, scope: !5904)
!5907 = !DILocation(line: 190, column: 39, scope: !5908)
!5908 = !DILexicalBlockFile(scope: !5904, file: !1012, discriminator: 1)
!5909 = !DILocation(line: 190, column: 42, scope: !5908)
!5910 = !DILocation(line: 190, column: 13, scope: !5908)
!5911 = !DILocation(line: 191, column: 38, scope: !5912)
!5912 = distinct !DILexicalBlock(scope: !5904, file: !1012, line: 190, column: 57)
!5913 = !DILocation(line: 191, column: 41, scope: !5912)
!5914 = !DILocation(line: 191, column: 28, scope: !5912)
!5915 = !DILocation(line: 191, column: 13, scope: !5912)
!5916 = !DILocation(line: 191, column: 16, scope: !5912)
!5917 = !DILocation(line: 191, column: 26, scope: !5912)
!5918 = !DILocation(line: 192, column: 17, scope: !5919)
!5919 = distinct !DILexicalBlock(scope: !5912, file: !1012, line: 192, column: 17)
!5920 = !DILocation(line: 192, column: 20, scope: !5919)
!5921 = !DILocation(line: 192, column: 30, scope: !5919)
!5922 = !DILocation(line: 192, column: 17, scope: !5912)
!5923 = !DILocation(line: 193, column: 24, scope: !5924)
!5924 = distinct !DILexicalBlock(scope: !5919, file: !1012, line: 192, column: 54)
!5925 = !DILocation(line: 193, column: 27, scope: !5924)
!5926 = !DILocation(line: 193, column: 17, scope: !5924)
!5927 = !DILocation(line: 194, column: 17, scope: !5924)
!5928 = !DILocation(line: 196, column: 9, scope: !5912)
!5929 = !DILocation(line: 199, column: 36, scope: !5691)
!5930 = !DILocation(line: 199, column: 39, scope: !5691)
!5931 = !DILocation(line: 199, column: 25, scope: !5691)
!5932 = !DILocation(line: 199, column: 9, scope: !5691)
!5933 = !DILocation(line: 199, column: 12, scope: !5691)
!5934 = !DILocation(line: 199, column: 23, scope: !5691)
!5935 = !DILocation(line: 200, column: 14, scope: !5936)
!5936 = distinct !DILexicalBlock(scope: !5691, file: !1012, line: 200, column: 13)
!5937 = !DILocation(line: 200, column: 17, scope: !5936)
!5938 = !DILocation(line: 200, column: 28, scope: !5936)
!5939 = !DILocation(line: 200, column: 31, scope: !5940)
!5940 = !DILexicalBlockFile(scope: !5936, file: !1012, discriminator: 1)
!5941 = !DILocation(line: 200, column: 34, scope: !5940)
!5942 = !DILocation(line: 200, column: 42, scope: !5940)
!5943 = !DILocation(line: 200, column: 13, scope: !5940)
!5944 = !DILocation(line: 201, column: 35, scope: !5945)
!5945 = distinct !DILexicalBlock(scope: !5936, file: !1012, line: 200, column: 48)
!5946 = !DILocation(line: 201, column: 38, scope: !5945)
!5947 = !DILocation(line: 201, column: 13, scope: !5945)
!5948 = !DILocation(line: 202, column: 13, scope: !5945)
!5949 = !DILocation(line: 206, column: 13, scope: !5950)
!5950 = distinct !DILexicalBlock(scope: !5691, file: !1012, line: 206, column: 13)
!5951 = !DILocation(line: 206, column: 16, scope: !5950)
!5952 = !DILocation(line: 206, column: 36, scope: !5950)
!5953 = !DILocation(line: 206, column: 64, scope: !5954)
!5954 = !DILexicalBlockFile(scope: !5950, file: !1012, discriminator: 1)
!5955 = !DILocation(line: 206, column: 67, scope: !5954)
!5956 = !DILocation(line: 206, column: 46, scope: !5954)
!5957 = !DILocation(line: 206, column: 44, scope: !5954)
!5958 = !DILocation(line: 206, column: 71, scope: !5954)
!5959 = !DILocation(line: 206, column: 13, scope: !5954)
!5960 = !DILocation(line: 207, column: 20, scope: !5950)
!5961 = !DILocation(line: 207, column: 13, scope: !5950)
!5962 = !DILocation(line: 210, column: 25, scope: !5963)
!5963 = distinct !DILexicalBlock(scope: !5691, file: !1012, line: 210, column: 13)
!5964 = !DILocation(line: 210, column: 28, scope: !5963)
!5965 = !DILocation(line: 210, column: 14, scope: !5963)
!5966 = !DILocation(line: 210, column: 13, scope: !5691)
!5967 = !DILocation(line: 211, column: 35, scope: !5968)
!5968 = distinct !DILexicalBlock(scope: !5963, file: !1012, line: 210, column: 33)
!5969 = !DILocation(line: 211, column: 38, scope: !5968)
!5970 = !DILocation(line: 211, column: 13, scope: !5968)
!5971 = !DILocation(line: 212, column: 13, scope: !5968)
!5972 = !DILocation(line: 216, column: 37, scope: !5691)
!5973 = !DILocation(line: 216, column: 40, scope: !5691)
!5974 = !DILocation(line: 216, column: 44, scope: !5691)
!5975 = !DILocation(line: 216, column: 47, scope: !5691)
!5976 = !DILocation(line: 216, column: 22, scope: !5691)
!5977 = !DILocation(line: 216, column: 9, scope: !5691)
!5978 = !DILocation(line: 216, column: 12, scope: !5691)
!5979 = !DILocation(line: 216, column: 20, scope: !5691)
!5980 = !DILocation(line: 217, column: 27, scope: !5690)
!5981 = !DILocation(line: 217, column: 30, scope: !5690)
!5982 = !DILocation(line: 217, column: 13, scope: !5690)
!5983 = !DILocation(line: 344, column: 11, scope: !5685, inlinedAt: !5689)
!5984 = !DILocation(line: 344, column: 13, scope: !5685, inlinedAt: !5689)
!5985 = !DILocation(line: 344, column: 19, scope: !5685, inlinedAt: !5689)
!5986 = !DILocation(line: 344, column: 7, scope: !5685, inlinedAt: !5689)
!5987 = !DILocation(line: 345, column: 10, scope: !5685, inlinedAt: !5689)
!5988 = !DILocation(line: 345, column: 12, scope: !5685, inlinedAt: !5689)
!5989 = !DILocation(line: 345, column: 30, scope: !5685, inlinedAt: !5689)
!5990 = !DILocation(line: 345, column: 32, scope: !5685, inlinedAt: !5689)
!5991 = !DILocation(line: 345, column: 38, scope: !5685, inlinedAt: !5689)
!5992 = !DILocation(line: 345, column: 26, scope: !5685, inlinedAt: !5689)
!5993 = !DILocation(line: 345, column: 7, scope: !5685, inlinedAt: !5689)
!5994 = !DILocation(line: 346, column: 10, scope: !5685, inlinedAt: !5689)
!5995 = !DILocation(line: 346, column: 15, scope: !5685, inlinedAt: !5689)
!5996 = !DILocation(line: 346, column: 17, scope: !5685, inlinedAt: !5689)
!5997 = !DILocation(line: 346, column: 12, scope: !5685, inlinedAt: !5689)
!5998 = !DILocation(line: 346, column: 24, scope: !5685, inlinedAt: !5689)
!5999 = !DILocation(line: 346, column: 7, scope: !5685, inlinedAt: !5689)
!6000 = !DILocation(line: 347, column: 10, scope: !5685, inlinedAt: !5689)
!6001 = !DILocation(line: 347, column: 12, scope: !5685, inlinedAt: !5689)
!6002 = !DILocation(line: 347, column: 7, scope: !5685, inlinedAt: !5689)
!6003 = !DILocation(line: 348, column: 13, scope: !5685, inlinedAt: !5689)
!6004 = !DILocation(line: 348, column: 18, scope: !5685, inlinedAt: !5689)
!6005 = !DILocation(line: 348, column: 20, scope: !5685, inlinedAt: !5689)
!6006 = !DILocation(line: 348, column: 15, scope: !5685, inlinedAt: !5689)
!6007 = !DILocation(line: 348, column: 28, scope: !5685, inlinedAt: !5689)
!6008 = !DILocation(line: 217, column: 42, scope: !5690)
!6009 = !DILocation(line: 217, column: 45, scope: !5690)
!6010 = !DILocation(line: 217, column: 39, scope: !5690)
!6011 = !DILocation(line: 217, column: 13, scope: !5691)
!6012 = !DILocation(line: 218, column: 20, scope: !6013)
!6013 = distinct !DILexicalBlock(scope: !5690, file: !1012, line: 217, column: 56)
!6014 = !DILocation(line: 218, column: 23, scope: !6013)
!6015 = !DILocation(line: 218, column: 13, scope: !6013)
!6016 = !DILocation(line: 219, column: 13, scope: !6013)
!6017 = !DILocation(line: 223, column: 16, scope: !6018)
!6018 = distinct !DILexicalBlock(scope: !5691, file: !1012, line: 223, column: 9)
!6019 = !DILocation(line: 223, column: 23, scope: !6018)
!6020 = !DILocation(line: 223, column: 14, scope: !6018)
!6021 = !DILocation(line: 223, column: 28, scope: !6022)
!6022 = !DILexicalBlockFile(scope: !6023, file: !1012, discriminator: 1)
!6023 = distinct !DILexicalBlock(scope: !6018, file: !1012, line: 223, column: 9)
!6024 = !DILocation(line: 223, column: 32, scope: !6022)
!6025 = !DILocation(line: 223, column: 35, scope: !6022)
!6026 = !DILocation(line: 223, column: 30, scope: !6022)
!6027 = !DILocation(line: 223, column: 9, scope: !6022)
!6028 = !DILocation(line: 224, column: 17, scope: !6029)
!6029 = distinct !DILexicalBlock(scope: !6023, file: !1012, line: 224, column: 17)
!6030 = !DILocation(line: 224, column: 20, scope: !6029)
!6031 = !DILocation(line: 224, column: 37, scope: !6029)
!6032 = !DILocation(line: 224, column: 34, scope: !6029)
!6033 = !DILocation(line: 224, column: 28, scope: !6029)
!6034 = !DILocation(line: 224, column: 17, scope: !6023)
!6035 = !DILocation(line: 225, column: 36, scope: !6029)
!6036 = !DILocation(line: 225, column: 30, scope: !6029)
!6037 = !DILocation(line: 225, column: 17, scope: !6029)
!6038 = !DILocation(line: 225, column: 20, scope: !6029)
!6039 = !DILocation(line: 225, column: 34, scope: !6029)
!6040 = !DILocation(line: 224, column: 38, scope: !6041)
!6041 = !DILexicalBlockFile(scope: !6029, file: !1012, discriminator: 1)
!6042 = !DILocation(line: 223, column: 51, scope: !6043)
!6043 = !DILexicalBlockFile(scope: !6023, file: !1012, discriminator: 2)
!6044 = !DILocation(line: 223, column: 9, scope: !6043)
!6045 = distinct !{!6045, !6046}
!6046 = !DILocation(line: 223, column: 9, scope: !5691)
!6047 = !DILocation(line: 226, column: 5, scope: !5691)
!6048 = !DILocation(line: 228, column: 13, scope: !6049)
!6049 = distinct !DILexicalBlock(scope: !6050, file: !1012, line: 228, column: 13)
!6050 = distinct !DILexicalBlock(scope: !5692, file: !1012, line: 226, column: 12)
!6051 = !DILocation(line: 228, column: 16, scope: !6049)
!6052 = !DILocation(line: 228, column: 26, scope: !6049)
!6053 = !DILocation(line: 228, column: 31, scope: !6049)
!6054 = !DILocation(line: 228, column: 34, scope: !6055)
!6055 = !DILexicalBlockFile(scope: !6049, file: !1012, discriminator: 1)
!6056 = !DILocation(line: 228, column: 37, scope: !6055)
!6057 = !DILocation(line: 228, column: 45, scope: !6055)
!6058 = !DILocation(line: 228, column: 50, scope: !6055)
!6059 = !DILocation(line: 228, column: 64, scope: !6060)
!6060 = !DILexicalBlockFile(scope: !6049, file: !1012, discriminator: 2)
!6061 = !DILocation(line: 228, column: 67, scope: !6060)
!6062 = !DILocation(line: 228, column: 53, scope: !6060)
!6063 = !DILocation(line: 228, column: 13, scope: !6060)
!6064 = !DILocation(line: 229, column: 35, scope: !6065)
!6065 = distinct !DILexicalBlock(scope: !6049, file: !1012, line: 228, column: 72)
!6066 = !DILocation(line: 229, column: 38, scope: !6065)
!6067 = !DILocation(line: 229, column: 13, scope: !6065)
!6068 = !DILocation(line: 230, column: 13, scope: !6065)
!6069 = !DILocation(line: 234, column: 9, scope: !6050)
!6070 = !DILocation(line: 234, column: 12, scope: !6050)
!6071 = !DILocation(line: 234, column: 26, scope: !6050)
!6072 = !DILocation(line: 235, column: 9, scope: !6050)
!6073 = !DILocation(line: 235, column: 12, scope: !6050)
!6074 = !DILocation(line: 235, column: 32, scope: !6050)
!6075 = !DILocation(line: 236, column: 9, scope: !6050)
!6076 = !DILocation(line: 236, column: 12, scope: !6050)
!6077 = !DILocation(line: 236, column: 26, scope: !6050)
!6078 = !DILocation(line: 237, column: 9, scope: !6050)
!6079 = !DILocation(line: 237, column: 12, scope: !6050)
!6080 = !DILocation(line: 237, column: 23, scope: !6050)
!6081 = !DILocation(line: 238, column: 9, scope: !6050)
!6082 = !DILocation(line: 238, column: 12, scope: !6050)
!6083 = !DILocation(line: 238, column: 20, scope: !6050)
!6084 = !DILocation(line: 239, column: 9, scope: !6050)
!6085 = !DILocation(line: 239, column: 12, scope: !6050)
!6086 = !DILocation(line: 239, column: 24, scope: !6050)
!6087 = !DILocation(line: 240, column: 9, scope: !6050)
!6088 = !DILocation(line: 240, column: 12, scope: !6050)
!6089 = !DILocation(line: 240, column: 24, scope: !6050)
!6090 = !DILocation(line: 243, column: 9, scope: !6091)
!6091 = distinct !DILexicalBlock(scope: !5670, file: !1012, line: 243, column: 9)
!6092 = !DILocation(line: 243, column: 12, scope: !6091)
!6093 = !DILocation(line: 243, column: 17, scope: !6091)
!6094 = !DILocation(line: 243, column: 9, scope: !5670)
!6095 = !DILocation(line: 245, column: 24, scope: !6096)
!6096 = distinct !DILexicalBlock(scope: !6097, file: !1012, line: 245, column: 13)
!6097 = distinct !DILexicalBlock(scope: !6091, file: !1012, line: 243, column: 26)
!6098 = !DILocation(line: 245, column: 27, scope: !6096)
!6099 = !DILocation(line: 245, column: 13, scope: !6096)
!6100 = !DILocation(line: 245, column: 13, scope: !6097)
!6101 = !DILocation(line: 246, column: 35, scope: !6102)
!6102 = distinct !DILexicalBlock(scope: !6096, file: !1012, line: 245, column: 32)
!6103 = !DILocation(line: 246, column: 38, scope: !6102)
!6104 = !DILocation(line: 246, column: 13, scope: !6102)
!6105 = !DILocation(line: 247, column: 13, scope: !6102)
!6106 = !DILocation(line: 249, column: 9, scope: !6097)
!6107 = !DILocation(line: 249, column: 12, scope: !6097)
!6108 = !DILocation(line: 249, column: 23, scope: !6097)
!6109 = !DILocation(line: 250, column: 5, scope: !6097)
!6110 = !DILocation(line: 251, column: 9, scope: !6111)
!6111 = distinct !DILexicalBlock(scope: !6091, file: !1012, line: 250, column: 12)
!6112 = !DILocation(line: 251, column: 12, scope: !6111)
!6113 = !DILocation(line: 251, column: 23, scope: !6111)
!6114 = !DILocation(line: 256, column: 17, scope: !5670)
!6115 = !DILocation(line: 256, column: 20, scope: !5670)
!6116 = !DILocation(line: 256, column: 31, scope: !5670)
!6117 = !DILocation(line: 256, column: 5, scope: !5670)
!6118 = !DILocation(line: 256, column: 8, scope: !5670)
!6119 = !DILocation(line: 256, column: 13, scope: !5670)
!6120 = !DILocation(line: 259, column: 9, scope: !6121)
!6121 = distinct !DILexicalBlock(scope: !5670, file: !1012, line: 259, column: 9)
!6122 = !DILocation(line: 259, column: 14, scope: !6121)
!6123 = !DILocation(line: 259, column: 11, scope: !6121)
!6124 = !DILocation(line: 259, column: 16, scope: !6121)
!6125 = !DILocation(line: 259, column: 20, scope: !6126)
!6126 = !DILexicalBlockFile(scope: !6121, file: !1012, discriminator: 1)
!6127 = !DILocation(line: 259, column: 23, scope: !6126)
!6128 = !DILocation(line: 259, column: 37, scope: !6126)
!6129 = !DILocation(line: 259, column: 40, scope: !6126)
!6130 = !DILocation(line: 259, column: 34, scope: !6126)
!6131 = !DILocation(line: 259, column: 51, scope: !6126)
!6132 = !DILocation(line: 259, column: 54, scope: !6133)
!6133 = !DILexicalBlockFile(scope: !6121, file: !1012, discriminator: 2)
!6134 = !DILocation(line: 259, column: 57, scope: !6133)
!6135 = !DILocation(line: 259, column: 65, scope: !6133)
!6136 = !DILocation(line: 259, column: 68, scope: !6133)
!6137 = !DILocation(line: 259, column: 62, scope: !6133)
!6138 = !DILocation(line: 260, column: 20, scope: !6121)
!6139 = !DILocation(line: 260, column: 23, scope: !6126)
!6140 = !DILocation(line: 260, column: 26, scope: !6126)
!6141 = !DILocation(line: 260, column: 41, scope: !6126)
!6142 = !DILocation(line: 260, column: 44, scope: !6126)
!6143 = !DILocation(line: 260, column: 38, scope: !6126)
!6144 = !DILocation(line: 261, column: 20, scope: !6121)
!6145 = !DILocation(line: 261, column: 23, scope: !6126)
!6146 = !DILocation(line: 261, column: 26, scope: !6126)
!6147 = !DILocation(line: 261, column: 45, scope: !6126)
!6148 = !DILocation(line: 261, column: 48, scope: !6126)
!6149 = !DILocation(line: 261, column: 42, scope: !6126)
!6150 = !DILocation(line: 259, column: 9, scope: !6151)
!6151 = !DILexicalBlockFile(scope: !5670, file: !1012, discriminator: 3)
!6152 = !DILocation(line: 262, column: 31, scope: !6153)
!6153 = distinct !DILexicalBlock(scope: !6121, file: !1012, line: 261, column: 66)
!6154 = !DILocation(line: 262, column: 34, scope: !6153)
!6155 = !DILocation(line: 262, column: 9, scope: !6153)
!6156 = !DILocation(line: 263, column: 9, scope: !6153)
!6157 = !DILocation(line: 267, column: 9, scope: !6158)
!6158 = distinct !DILexicalBlock(scope: !5670, file: !1012, line: 267, column: 9)
!6159 = !DILocation(line: 267, column: 12, scope: !6158)
!6160 = !DILocation(line: 267, column: 28, scope: !6158)
!6161 = !DILocation(line: 267, column: 9, scope: !5670)
!6162 = !DILocation(line: 268, column: 9, scope: !6158)
!6163 = !DILocation(line: 268, column: 12, scope: !6158)
!6164 = !DILocation(line: 268, column: 19, scope: !6158)
!6165 = !DILocation(line: 269, column: 14, scope: !6166)
!6166 = distinct !DILexicalBlock(scope: !6158, file: !1012, line: 269, column: 14)
!6167 = !DILocation(line: 269, column: 17, scope: !6166)
!6168 = !DILocation(line: 269, column: 33, scope: !6166)
!6169 = !DILocation(line: 269, column: 14, scope: !6158)
!6170 = !DILocation(line: 270, column: 9, scope: !6166)
!6171 = !DILocation(line: 270, column: 12, scope: !6166)
!6172 = !DILocation(line: 270, column: 19, scope: !6166)
!6173 = !DILocation(line: 272, column: 9, scope: !6166)
!6174 = !DILocation(line: 272, column: 12, scope: !6166)
!6175 = !DILocation(line: 272, column: 19, scope: !6166)
!6176 = !DILocation(line: 275, column: 10, scope: !6177)
!6177 = distinct !DILexicalBlock(scope: !5670, file: !1012, line: 275, column: 9)
!6178 = !DILocation(line: 275, column: 13, scope: !6177)
!6179 = !DILocation(line: 275, column: 21, scope: !6177)
!6180 = !DILocation(line: 275, column: 25, scope: !6177)
!6181 = !DILocation(line: 275, column: 28, scope: !6182)
!6182 = !DILexicalBlockFile(scope: !6177, file: !1012, discriminator: 1)
!6183 = !DILocation(line: 275, column: 31, scope: !6182)
!6184 = !DILocation(line: 275, column: 42, scope: !6182)
!6185 = !DILocation(line: 275, column: 47, scope: !6182)
!6186 = !DILocation(line: 275, column: 50, scope: !6187)
!6187 = !DILexicalBlockFile(scope: !6177, file: !1012, discriminator: 2)
!6188 = !DILocation(line: 275, column: 53, scope: !6187)
!6189 = !DILocation(line: 275, column: 60, scope: !6187)
!6190 = !DILocation(line: 275, column: 9, scope: !6187)
!6191 = !DILocation(line: 276, column: 9, scope: !6177)
!6192 = !DILocation(line: 276, column: 12, scope: !6177)
!6193 = !DILocation(line: 276, column: 18, scope: !6177)
!6194 = !DILocation(line: 278, column: 15, scope: !5683)
!6195 = !DILocation(line: 278, column: 24, scope: !5683)
!6196 = !DILocation(line: 278, column: 27, scope: !5683)
!6197 = !DILocation(line: 278, column: 22, scope: !5683)
!6198 = !DILocation(line: 278, column: 10, scope: !5683)
!6199 = !DILocation(line: 278, column: 34, scope: !6200)
!6200 = !DILexicalBlockFile(scope: !5682, file: !1012, discriminator: 1)
!6201 = !DILocation(line: 278, column: 41, scope: !6200)
!6202 = !DILocation(line: 278, column: 44, scope: !6200)
!6203 = !DILocation(line: 278, column: 39, scope: !6200)
!6204 = !DILocation(line: 278, column: 5, scope: !6200)
!6205 = !DILocation(line: 280, column: 44, scope: !5680)
!6206 = !DILocation(line: 280, column: 47, scope: !5680)
!6207 = !DILocation(line: 280, column: 33, scope: !5680)
!6208 = !DILocation(line: 280, column: 14, scope: !5680)
!6209 = !DILocation(line: 280, column: 17, scope: !5680)
!6210 = !DILocation(line: 280, column: 31, scope: !5680)
!6211 = !DILocation(line: 280, column: 52, scope: !5680)
!6212 = !DILocation(line: 280, column: 55, scope: !6213)
!6213 = !DILexicalBlockFile(scope: !5680, file: !1012, discriminator: 1)
!6214 = !DILocation(line: 280, column: 58, scope: !6213)
!6215 = !DILocation(line: 280, column: 68, scope: !6213)
!6216 = !DILocation(line: 280, column: 13, scope: !6213)
!6217 = !DILocalVariable(name: "ch_nbits", scope: !5679, file: !1012, line: 281, type: !996)
!6218 = !DILocation(line: 281, column: 17, scope: !5679)
!6219 = !DILocation(line: 281, column: 43, scope: !5679)
!6220 = !DILocation(line: 281, column: 46, scope: !5679)
!6221 = !DILocation(line: 281, column: 28, scope: !5679)
!6222 = !DILocation(line: 334, column: 34, scope: !5674, inlinedAt: !5678)
!6223 = !DILocation(line: 334, column: 36, scope: !5674, inlinedAt: !5678)
!6224 = !DILocation(line: 334, column: 41, scope: !5674, inlinedAt: !5678)
!6225 = !DILocation(line: 334, column: 46, scope: !5674, inlinedAt: !5678)
!6226 = !DILocation(line: 334, column: 18, scope: !5674, inlinedAt: !5678)
!6227 = !DILocation(line: 334, column: 16, scope: !5674, inlinedAt: !5678)
!6228 = !DILocation(line: 284, column: 20, scope: !6229)
!6229 = distinct !DILexicalBlock(scope: !5679, file: !1012, line: 284, column: 13)
!6230 = !DILocation(line: 284, column: 18, scope: !6229)
!6231 = !DILocation(line: 284, column: 25, scope: !6232)
!6232 = !DILexicalBlockFile(scope: !6233, file: !1012, discriminator: 1)
!6233 = distinct !DILexicalBlock(scope: !6229, file: !1012, line: 284, column: 13)
!6234 = !DILocation(line: 284, column: 29, scope: !6232)
!6235 = !DILocation(line: 284, column: 32, scope: !6232)
!6236 = !DILocation(line: 284, column: 27, scope: !6232)
!6237 = !DILocation(line: 284, column: 13, scope: !6232)
!6238 = !DILocation(line: 285, column: 46, scope: !6239)
!6239 = distinct !DILexicalBlock(scope: !6233, file: !1012, line: 284, column: 48)
!6240 = !DILocation(line: 285, column: 49, scope: !6239)
!6241 = !DILocation(line: 285, column: 53, scope: !6239)
!6242 = !DILocation(line: 285, column: 36, scope: !6239)
!6243 = !DILocation(line: 285, column: 31, scope: !6239)
!6244 = !DILocation(line: 285, column: 17, scope: !6239)
!6245 = !DILocation(line: 285, column: 20, scope: !6239)
!6246 = !DILocation(line: 285, column: 34, scope: !6239)
!6247 = !DILocation(line: 286, column: 35, scope: !6248)
!6248 = distinct !DILexicalBlock(scope: !6239, file: !1012, line: 286, column: 21)
!6249 = !DILocation(line: 286, column: 21, scope: !6248)
!6250 = !DILocation(line: 286, column: 24, scope: !6248)
!6251 = !DILocation(line: 286, column: 41, scope: !6248)
!6252 = !DILocation(line: 286, column: 44, scope: !6248)
!6253 = !DILocation(line: 286, column: 38, scope: !6248)
!6254 = !DILocation(line: 286, column: 21, scope: !6239)
!6255 = !DILocation(line: 287, column: 28, scope: !6256)
!6256 = distinct !DILexicalBlock(scope: !6248, file: !1012, line: 286, column: 55)
!6257 = !DILocation(line: 287, column: 31, scope: !6256)
!6258 = !DILocation(line: 287, column: 21, scope: !6256)
!6259 = !DILocation(line: 288, column: 21, scope: !6256)
!6260 = !DILocation(line: 290, column: 13, scope: !6239)
!6261 = !DILocation(line: 284, column: 44, scope: !6262)
!6262 = !DILexicalBlockFile(scope: !6233, file: !1012, discriminator: 2)
!6263 = !DILocation(line: 284, column: 13, scope: !6262)
!6264 = distinct !{!6264, !6265}
!6265 = !DILocation(line: 284, column: 13, scope: !5679)
!6266 = !DILocation(line: 293, column: 20, scope: !6267)
!6267 = distinct !DILexicalBlock(scope: !5679, file: !1012, line: 293, column: 13)
!6268 = !DILocation(line: 293, column: 18, scope: !6267)
!6269 = !DILocation(line: 293, column: 25, scope: !6270)
!6270 = !DILexicalBlockFile(scope: !6271, file: !1012, discriminator: 1)
!6271 = distinct !DILexicalBlock(scope: !6267, file: !1012, line: 293, column: 13)
!6272 = !DILocation(line: 293, column: 29, scope: !6270)
!6273 = !DILocation(line: 293, column: 32, scope: !6270)
!6274 = !DILocation(line: 293, column: 42, scope: !6270)
!6275 = !DILocation(line: 293, column: 27, scope: !6270)
!6276 = !DILocation(line: 293, column: 13, scope: !6270)
!6277 = !DILocation(line: 294, column: 48, scope: !6271)
!6278 = !DILocation(line: 294, column: 51, scope: !6271)
!6279 = !DILocation(line: 294, column: 37, scope: !6271)
!6280 = !DILocation(line: 294, column: 69, scope: !6270)
!6281 = !DILocation(line: 294, column: 72, scope: !6270)
!6282 = !DILocation(line: 294, column: 57, scope: !6270)
!6283 = !DILocation(line: 294, column: 37, scope: !6270)
!6284 = !DILocation(line: 294, column: 37, scope: !6285)
!6285 = !DILexicalBlockFile(scope: !6271, file: !1012, discriminator: 2)
!6286 = !DILocation(line: 294, column: 37, scope: !6287)
!6287 = !DILexicalBlockFile(scope: !6271, file: !1012, discriminator: 3)
!6288 = !DILocation(line: 294, column: 32, scope: !6287)
!6289 = !DILocation(line: 294, column: 17, scope: !6287)
!6290 = !DILocation(line: 294, column: 20, scope: !6287)
!6291 = !DILocation(line: 294, column: 35, scope: !6287)
!6292 = !DILocation(line: 293, column: 48, scope: !6285)
!6293 = !DILocation(line: 293, column: 13, scope: !6285)
!6294 = distinct !{!6294, !6295}
!6295 = !DILocation(line: 293, column: 13, scope: !5679)
!6296 = !DILocation(line: 295, column: 9, scope: !5679)
!6297 = !DILocation(line: 296, column: 20, scope: !6298)
!6298 = distinct !DILexicalBlock(scope: !6299, file: !1012, line: 296, column: 13)
!6299 = distinct !DILexicalBlock(scope: !5680, file: !1012, line: 295, column: 16)
!6300 = !DILocation(line: 296, column: 18, scope: !6298)
!6301 = !DILocation(line: 296, column: 25, scope: !6302)
!6302 = !DILexicalBlockFile(scope: !6303, file: !1012, discriminator: 1)
!6303 = distinct !DILexicalBlock(scope: !6298, file: !1012, line: 296, column: 13)
!6304 = !DILocation(line: 296, column: 29, scope: !6302)
!6305 = !DILocation(line: 296, column: 32, scope: !6302)
!6306 = !DILocation(line: 296, column: 27, scope: !6302)
!6307 = !DILocation(line: 296, column: 13, scope: !6302)
!6308 = !DILocation(line: 297, column: 36, scope: !6303)
!6309 = !DILocation(line: 297, column: 31, scope: !6303)
!6310 = !DILocation(line: 297, column: 17, scope: !6303)
!6311 = !DILocation(line: 297, column: 20, scope: !6303)
!6312 = !DILocation(line: 297, column: 34, scope: !6303)
!6313 = !DILocation(line: 296, column: 44, scope: !6314)
!6314 = !DILexicalBlockFile(scope: !6303, file: !1012, discriminator: 2)
!6315 = !DILocation(line: 296, column: 13, scope: !6314)
!6316 = distinct !{!6316, !6317}
!6317 = !DILocation(line: 296, column: 13, scope: !6299)
!6318 = !DILocation(line: 298, column: 20, scope: !6319)
!6319 = distinct !DILexicalBlock(scope: !6299, file: !1012, line: 298, column: 13)
!6320 = !DILocation(line: 298, column: 18, scope: !6319)
!6321 = !DILocation(line: 298, column: 25, scope: !6322)
!6322 = !DILexicalBlockFile(scope: !6323, file: !1012, discriminator: 1)
!6323 = distinct !DILexicalBlock(scope: !6319, file: !1012, line: 298, column: 13)
!6324 = !DILocation(line: 298, column: 29, scope: !6322)
!6325 = !DILocation(line: 298, column: 32, scope: !6322)
!6326 = !DILocation(line: 298, column: 42, scope: !6322)
!6327 = !DILocation(line: 298, column: 27, scope: !6322)
!6328 = !DILocation(line: 298, column: 13, scope: !6322)
!6329 = !DILocation(line: 299, column: 32, scope: !6323)
!6330 = !DILocation(line: 299, column: 17, scope: !6323)
!6331 = !DILocation(line: 299, column: 20, scope: !6323)
!6332 = !DILocation(line: 299, column: 35, scope: !6323)
!6333 = !DILocation(line: 298, column: 48, scope: !6334)
!6334 = !DILexicalBlockFile(scope: !6323, file: !1012, discriminator: 2)
!6335 = !DILocation(line: 298, column: 13, scope: !6334)
!6336 = distinct !{!6336, !6337}
!6337 = !DILocation(line: 298, column: 13, scope: !6299)
!6338 = !DILocation(line: 303, column: 9, scope: !5681)
!6339 = !DILocation(line: 303, column: 12, scope: !5681)
!6340 = !DILocation(line: 303, column: 31, scope: !5681)
!6341 = !DILocation(line: 304, column: 16, scope: !6342)
!6342 = distinct !DILexicalBlock(scope: !5681, file: !1012, line: 304, column: 9)
!6343 = !DILocation(line: 304, column: 14, scope: !6342)
!6344 = !DILocation(line: 304, column: 21, scope: !6345)
!6345 = !DILexicalBlockFile(scope: !6346, file: !1012, discriminator: 1)
!6346 = distinct !DILexicalBlock(scope: !6342, file: !1012, line: 304, column: 9)
!6347 = !DILocation(line: 304, column: 25, scope: !6345)
!6348 = !DILocation(line: 304, column: 28, scope: !6345)
!6349 = !DILocation(line: 304, column: 23, scope: !6345)
!6350 = !DILocation(line: 304, column: 9, scope: !6345)
!6351 = !DILocation(line: 305, column: 48, scope: !6352)
!6352 = distinct !DILexicalBlock(scope: !6346, file: !1012, line: 304, column: 44)
!6353 = !DILocation(line: 305, column: 51, scope: !6352)
!6354 = !DILocation(line: 305, column: 38, scope: !6352)
!6355 = !DILocation(line: 305, column: 33, scope: !6352)
!6356 = !DILocation(line: 305, column: 13, scope: !6352)
!6357 = !DILocation(line: 305, column: 16, scope: !6352)
!6358 = !DILocation(line: 305, column: 36, scope: !6352)
!6359 = !DILocation(line: 306, column: 37, scope: !6360)
!6360 = distinct !DILexicalBlock(scope: !6352, file: !1012, line: 306, column: 17)
!6361 = !DILocation(line: 306, column: 17, scope: !6360)
!6362 = !DILocation(line: 306, column: 20, scope: !6360)
!6363 = !DILocation(line: 306, column: 42, scope: !6360)
!6364 = !DILocation(line: 306, column: 45, scope: !6360)
!6365 = !DILocation(line: 306, column: 40, scope: !6360)
!6366 = !DILocation(line: 306, column: 17, scope: !6352)
!6367 = !DILocation(line: 307, column: 61, scope: !6360)
!6368 = !DILocation(line: 307, column: 41, scope: !6360)
!6369 = !DILocation(line: 307, column: 44, scope: !6360)
!6370 = !DILocation(line: 307, column: 17, scope: !6360)
!6371 = !DILocation(line: 307, column: 20, scope: !6360)
!6372 = !DILocation(line: 307, column: 39, scope: !6360)
!6373 = !DILocation(line: 308, column: 9, scope: !6352)
!6374 = !DILocation(line: 304, column: 40, scope: !6375)
!6375 = !DILexicalBlockFile(scope: !6346, file: !1012, discriminator: 2)
!6376 = !DILocation(line: 304, column: 9, scope: !6375)
!6377 = distinct !{!6377, !6378}
!6378 = !DILocation(line: 304, column: 9, scope: !5681)
!6379 = !DILocation(line: 309, column: 13, scope: !6380)
!6380 = distinct !DILexicalBlock(scope: !5681, file: !1012, line: 309, column: 13)
!6381 = !DILocation(line: 309, column: 16, scope: !6380)
!6382 = !DILocation(line: 309, column: 37, scope: !6380)
!6383 = !DILocation(line: 309, column: 40, scope: !6380)
!6384 = !DILocation(line: 309, column: 35, scope: !6380)
!6385 = !DILocation(line: 309, column: 13, scope: !5681)
!6386 = !DILocation(line: 310, column: 20, scope: !6387)
!6387 = distinct !DILexicalBlock(scope: !6380, file: !1012, line: 309, column: 53)
!6388 = !DILocation(line: 310, column: 23, scope: !6387)
!6389 = !DILocation(line: 310, column: 13, scope: !6387)
!6390 = !DILocation(line: 311, column: 13, scope: !6387)
!6391 = !DILocation(line: 315, column: 16, scope: !6392)
!6392 = distinct !DILexicalBlock(scope: !5681, file: !1012, line: 315, column: 9)
!6393 = !DILocation(line: 315, column: 14, scope: !6392)
!6394 = !DILocation(line: 315, column: 21, scope: !6395)
!6395 = !DILexicalBlockFile(scope: !6396, file: !1012, discriminator: 1)
!6396 = distinct !DILexicalBlock(scope: !6392, file: !1012, line: 315, column: 9)
!6397 = !DILocation(line: 315, column: 25, scope: !6395)
!6398 = !DILocation(line: 315, column: 28, scope: !6395)
!6399 = !DILocation(line: 315, column: 23, scope: !6395)
!6400 = !DILocation(line: 315, column: 9, scope: !6395)
!6401 = !DILocation(line: 316, column: 58, scope: !6396)
!6402 = !DILocation(line: 316, column: 38, scope: !6396)
!6403 = !DILocation(line: 316, column: 41, scope: !6396)
!6404 = !DILocation(line: 316, column: 38, scope: !6395)
!6405 = !DILocation(line: 316, column: 77, scope: !6406)
!6406 = !DILexicalBlockFile(scope: !6396, file: !1012, discriminator: 2)
!6407 = !DILocation(line: 316, column: 80, scope: !6406)
!6408 = !DILocation(line: 316, column: 67, scope: !6406)
!6409 = !DILocation(line: 316, column: 38, scope: !6406)
!6410 = !DILocation(line: 316, column: 38, scope: !6411)
!6411 = !DILexicalBlockFile(scope: !6396, file: !1012, discriminator: 3)
!6412 = !DILocation(line: 316, column: 33, scope: !6411)
!6413 = !DILocation(line: 316, column: 13, scope: !6411)
!6414 = !DILocation(line: 316, column: 16, scope: !6411)
!6415 = !DILocation(line: 316, column: 36, scope: !6411)
!6416 = !DILocation(line: 315, column: 40, scope: !6406)
!6417 = !DILocation(line: 315, column: 9, scope: !6406)
!6418 = distinct !{!6418, !6419}
!6419 = !DILocation(line: 315, column: 9, scope: !5681)
!6420 = !DILocation(line: 319, column: 16, scope: !6421)
!6421 = distinct !DILexicalBlock(scope: !5681, file: !1012, line: 319, column: 9)
!6422 = !DILocation(line: 319, column: 14, scope: !6421)
!6423 = !DILocation(line: 319, column: 21, scope: !6424)
!6424 = !DILexicalBlockFile(scope: !6425, file: !1012, discriminator: 1)
!6425 = distinct !DILexicalBlock(scope: !6421, file: !1012, line: 319, column: 9)
!6426 = !DILocation(line: 319, column: 25, scope: !6424)
!6427 = !DILocation(line: 319, column: 28, scope: !6424)
!6428 = !DILocation(line: 319, column: 23, scope: !6424)
!6429 = !DILocation(line: 319, column: 9, scope: !6424)
!6430 = !DILocation(line: 320, column: 20, scope: !6431)
!6431 = distinct !DILexicalBlock(scope: !6432, file: !1012, line: 320, column: 13)
!6432 = distinct !DILexicalBlock(scope: !6425, file: !1012, line: 319, column: 44)
!6433 = !DILocation(line: 320, column: 18, scope: !6431)
!6434 = !DILocation(line: 320, column: 25, scope: !6435)
!6435 = !DILexicalBlockFile(scope: !6436, file: !1012, discriminator: 1)
!6436 = distinct !DILexicalBlock(scope: !6431, file: !1012, line: 320, column: 13)
!6437 = !DILocation(line: 320, column: 49, scope: !6435)
!6438 = !DILocation(line: 320, column: 29, scope: !6435)
!6439 = !DILocation(line: 320, column: 32, scope: !6435)
!6440 = !DILocation(line: 320, column: 27, scope: !6435)
!6441 = !DILocation(line: 320, column: 13, scope: !6435)
!6442 = !DILocation(line: 321, column: 33, scope: !6443)
!6443 = distinct !DILexicalBlock(scope: !6436, file: !1012, line: 320, column: 58)
!6444 = !DILocation(line: 321, column: 36, scope: !6443)
!6445 = !DILocation(line: 321, column: 21, scope: !6443)
!6446 = !DILocation(line: 321, column: 19, scope: !6443)
!6447 = !DILocation(line: 322, column: 21, scope: !6448)
!6448 = distinct !DILexicalBlock(scope: !6443, file: !1012, line: 322, column: 21)
!6449 = !DILocation(line: 322, column: 23, scope: !6448)
!6450 = !DILocation(line: 322, column: 21, scope: !6443)
!6451 = !DILocation(line: 323, column: 28, scope: !6452)
!6452 = distinct !DILexicalBlock(scope: !6448, file: !1012, line: 322, column: 32)
!6453 = !DILocation(line: 323, column: 31, scope: !6452)
!6454 = !DILocation(line: 323, column: 21, scope: !6452)
!6455 = !DILocation(line: 324, column: 21, scope: !6452)
!6456 = !DILocation(line: 326, column: 21, scope: !6457)
!6457 = distinct !DILexicalBlock(scope: !6443, file: !1012, line: 326, column: 21)
!6458 = !DILocation(line: 326, column: 23, scope: !6457)
!6459 = !DILocation(line: 326, column: 21, scope: !6443)
!6460 = !DILocation(line: 327, column: 78, scope: !6457)
!6461 = !DILocation(line: 327, column: 77, scope: !6457)
!6462 = !DILocation(line: 327, column: 55, scope: !6457)
!6463 = !DILocation(line: 327, column: 50, scope: !6457)
!6464 = !DILocation(line: 327, column: 49, scope: !6457)
!6465 = !DILocation(line: 327, column: 44, scope: !6457)
!6466 = !DILocation(line: 327, column: 21, scope: !6457)
!6467 = !DILocation(line: 327, column: 41, scope: !6457)
!6468 = !DILocation(line: 327, column: 24, scope: !6457)
!6469 = !DILocation(line: 327, column: 47, scope: !6457)
!6470 = !DILocation(line: 329, column: 77, scope: !6457)
!6471 = !DILocation(line: 329, column: 54, scope: !6457)
!6472 = !DILocation(line: 329, column: 49, scope: !6457)
!6473 = !DILocation(line: 329, column: 44, scope: !6457)
!6474 = !DILocation(line: 329, column: 21, scope: !6457)
!6475 = !DILocation(line: 329, column: 41, scope: !6457)
!6476 = !DILocation(line: 329, column: 24, scope: !6457)
!6477 = !DILocation(line: 329, column: 47, scope: !6457)
!6478 = !DILocation(line: 330, column: 13, scope: !6443)
!6479 = !DILocation(line: 320, column: 54, scope: !6480)
!6480 = !DILexicalBlockFile(scope: !6436, file: !1012, discriminator: 2)
!6481 = !DILocation(line: 320, column: 13, scope: !6480)
!6482 = distinct !{!6482, !6483}
!6483 = !DILocation(line: 320, column: 13, scope: !6432)
!6484 = !DILocation(line: 331, column: 9, scope: !6432)
!6485 = !DILocation(line: 319, column: 40, scope: !6486)
!6486 = !DILexicalBlockFile(scope: !6425, file: !1012, discriminator: 2)
!6487 = !DILocation(line: 319, column: 9, scope: !6486)
!6488 = distinct !{!6488, !6489}
!6489 = !DILocation(line: 319, column: 9, scope: !5681)
!6490 = !DILocation(line: 334, column: 28, scope: !5681)
!6491 = !DILocation(line: 334, column: 31, scope: !5681)
!6492 = !DILocation(line: 334, column: 45, scope: !5681)
!6493 = !DILocation(line: 334, column: 49, scope: !6494)
!6494 = !DILexicalBlockFile(scope: !5681, file: !1012, discriminator: 1)
!6495 = !DILocation(line: 334, column: 54, scope: !6494)
!6496 = !DILocation(line: 334, column: 59, scope: !6494)
!6497 = !DILocation(line: 334, column: 73, scope: !6498)
!6498 = !DILexicalBlockFile(scope: !5681, file: !1012, discriminator: 2)
!6499 = !DILocation(line: 334, column: 76, scope: !6498)
!6500 = !DILocation(line: 334, column: 62, scope: !6498)
!6501 = !DILocation(line: 334, column: 59, scope: !6498)
!6502 = !DILocation(line: 334, column: 45, scope: !6503)
!6503 = !DILexicalBlockFile(scope: !5681, file: !1012, discriminator: 3)
!6504 = !DILocation(line: 334, column: 9, scope: !6503)
!6505 = !DILocation(line: 334, column: 12, scope: !6503)
!6506 = !DILocation(line: 334, column: 26, scope: !6503)
!6507 = !DILocation(line: 337, column: 14, scope: !6508)
!6508 = distinct !DILexicalBlock(scope: !5681, file: !1012, line: 337, column: 13)
!6509 = !DILocation(line: 337, column: 19, scope: !6508)
!6510 = !DILocation(line: 337, column: 24, scope: !6508)
!6511 = !DILocation(line: 337, column: 27, scope: !6512)
!6512 = !DILexicalBlockFile(scope: !6508, file: !1012, discriminator: 1)
!6513 = !DILocation(line: 337, column: 30, scope: !6512)
!6514 = !DILocation(line: 337, column: 45, scope: !6512)
!6515 = !DILocation(line: 337, column: 49, scope: !6516)
!6516 = !DILexicalBlockFile(scope: !6508, file: !1012, discriminator: 2)
!6517 = !DILocation(line: 337, column: 54, scope: !6516)
!6518 = !DILocation(line: 337, column: 59, scope: !6516)
!6519 = !DILocation(line: 337, column: 73, scope: !6520)
!6520 = !DILexicalBlockFile(scope: !6508, file: !1012, discriminator: 3)
!6521 = !DILocation(line: 337, column: 76, scope: !6520)
!6522 = !DILocation(line: 337, column: 62, scope: !6520)
!6523 = !DILocation(line: 337, column: 13, scope: !6520)
!6524 = !DILocation(line: 339, column: 50, scope: !6525)
!6525 = distinct !DILexicalBlock(scope: !6508, file: !1012, line: 337, column: 82)
!6526 = !DILocation(line: 339, column: 53, scope: !6525)
!6527 = !DILocation(line: 339, column: 57, scope: !6525)
!6528 = !DILocation(line: 339, column: 60, scope: !6525)
!6529 = !DILocation(line: 339, column: 35, scope: !6525)
!6530 = !DILocation(line: 339, column: 13, scope: !6525)
!6531 = !DILocation(line: 339, column: 16, scope: !6525)
!6532 = !DILocation(line: 339, column: 33, scope: !6525)
!6533 = !DILocation(line: 340, column: 17, scope: !6534)
!6534 = distinct !DILexicalBlock(scope: !6525, file: !1012, line: 340, column: 17)
!6535 = !DILocation(line: 340, column: 20, scope: !6534)
!6536 = !DILocation(line: 340, column: 37, scope: !6534)
!6537 = !DILocation(line: 340, column: 41, scope: !6534)
!6538 = !DILocation(line: 340, column: 44, scope: !6539)
!6539 = !DILexicalBlockFile(scope: !6534, file: !1012, discriminator: 1)
!6540 = !DILocation(line: 340, column: 47, scope: !6539)
!6541 = !DILocation(line: 340, column: 66, scope: !6539)
!6542 = !DILocation(line: 340, column: 69, scope: !6539)
!6543 = !DILocation(line: 340, column: 64, scope: !6539)
!6544 = !DILocation(line: 340, column: 17, scope: !6539)
!6545 = !DILocation(line: 341, column: 24, scope: !6546)
!6546 = distinct !DILexicalBlock(scope: !6534, file: !1012, line: 340, column: 81)
!6547 = !DILocation(line: 341, column: 27, scope: !6546)
!6548 = !DILocation(line: 341, column: 17, scope: !6546)
!6549 = !DILocation(line: 342, column: 17, scope: !6546)
!6550 = !DILocation(line: 346, column: 17, scope: !6551)
!6551 = distinct !DILexicalBlock(scope: !6525, file: !1012, line: 346, column: 17)
!6552 = !DILocation(line: 346, column: 20, scope: !6551)
!6553 = !DILocation(line: 346, column: 37, scope: !6551)
!6554 = !DILocation(line: 346, column: 41, scope: !6555)
!6555 = !DILexicalBlockFile(scope: !6551, file: !1012, discriminator: 1)
!6556 = !DILocation(line: 346, column: 44, scope: !6555)
!6557 = !DILocation(line: 346, column: 61, scope: !6555)
!6558 = !DILocation(line: 346, column: 65, scope: !6555)
!6559 = !DILocation(line: 347, column: 42, scope: !6551)
!6560 = !DILocation(line: 347, column: 47, scope: !6551)
!6561 = !DILocation(line: 347, column: 52, scope: !6551)
!6562 = !DILocation(line: 347, column: 55, scope: !6555)
!6563 = !DILocation(line: 347, column: 58, scope: !6555)
!6564 = !DILocation(line: 347, column: 75, scope: !6555)
!6565 = !DILocation(line: 346, column: 17, scope: !6566)
!6566 = !DILexicalBlockFile(scope: !6525, file: !1012, discriminator: 2)
!6567 = !DILocation(line: 348, column: 17, scope: !6551)
!6568 = !DILocation(line: 348, column: 20, scope: !6551)
!6569 = !DILocation(line: 348, column: 37, scope: !6551)
!6570 = !DILocation(line: 351, column: 20, scope: !6571)
!6571 = distinct !DILexicalBlock(scope: !6525, file: !1012, line: 351, column: 13)
!6572 = !DILocation(line: 351, column: 18, scope: !6571)
!6573 = !DILocation(line: 351, column: 25, scope: !6574)
!6574 = !DILexicalBlockFile(scope: !6575, file: !1012, discriminator: 1)
!6575 = distinct !DILexicalBlock(scope: !6571, file: !1012, line: 351, column: 13)
!6576 = !DILocation(line: 351, column: 29, scope: !6574)
!6577 = !DILocation(line: 351, column: 32, scope: !6574)
!6578 = !DILocation(line: 351, column: 27, scope: !6574)
!6579 = !DILocation(line: 351, column: 13, scope: !6574)
!6580 = !DILocation(line: 352, column: 49, scope: !6581)
!6581 = distinct !DILexicalBlock(scope: !6575, file: !1012, line: 351, column: 48)
!6582 = !DILocation(line: 352, column: 52, scope: !6581)
!6583 = !DILocation(line: 352, column: 39, scope: !6581)
!6584 = !DILocation(line: 352, column: 34, scope: !6581)
!6585 = !DILocation(line: 352, column: 17, scope: !6581)
!6586 = !DILocation(line: 352, column: 20, scope: !6581)
!6587 = !DILocation(line: 352, column: 37, scope: !6581)
!6588 = !DILocation(line: 353, column: 38, scope: !6589)
!6589 = distinct !DILexicalBlock(scope: !6581, file: !1012, line: 353, column: 21)
!6590 = !DILocation(line: 353, column: 21, scope: !6589)
!6591 = !DILocation(line: 353, column: 24, scope: !6589)
!6592 = !DILocation(line: 353, column: 41, scope: !6589)
!6593 = !DILocation(line: 353, column: 45, scope: !6594)
!6594 = !DILexicalBlockFile(scope: !6589, file: !1012, discriminator: 1)
!6595 = !DILocation(line: 353, column: 48, scope: !6594)
!6596 = !DILocation(line: 353, column: 21, scope: !6594)
!6597 = !DILocation(line: 354, column: 28, scope: !6598)
!6598 = distinct !DILexicalBlock(scope: !6589, file: !1012, line: 353, column: 66)
!6599 = !DILocation(line: 354, column: 31, scope: !6598)
!6600 = !DILocation(line: 354, column: 21, scope: !6598)
!6601 = !DILocation(line: 355, column: 21, scope: !6598)
!6602 = !DILocation(line: 357, column: 13, scope: !6581)
!6603 = !DILocation(line: 351, column: 44, scope: !6604)
!6604 = !DILexicalBlockFile(scope: !6575, file: !1012, discriminator: 2)
!6605 = !DILocation(line: 351, column: 13, scope: !6604)
!6606 = distinct !{!6606, !6607}
!6607 = !DILocation(line: 351, column: 13, scope: !6525)
!6608 = !DILocation(line: 358, column: 9, scope: !6525)
!6609 = !DILocation(line: 359, column: 13, scope: !6610)
!6610 = distinct !DILexicalBlock(scope: !6508, file: !1012, line: 358, column: 16)
!6611 = !DILocation(line: 359, column: 16, scope: !6610)
!6612 = !DILocation(line: 359, column: 33, scope: !6610)
!6613 = !DILocation(line: 360, column: 20, scope: !6614)
!6614 = distinct !DILexicalBlock(scope: !6610, file: !1012, line: 360, column: 13)
!6615 = !DILocation(line: 360, column: 18, scope: !6614)
!6616 = !DILocation(line: 360, column: 25, scope: !6617)
!6617 = !DILexicalBlockFile(scope: !6618, file: !1012, discriminator: 1)
!6618 = distinct !DILexicalBlock(scope: !6614, file: !1012, line: 360, column: 13)
!6619 = !DILocation(line: 360, column: 29, scope: !6617)
!6620 = !DILocation(line: 360, column: 32, scope: !6617)
!6621 = !DILocation(line: 360, column: 27, scope: !6617)
!6622 = !DILocation(line: 360, column: 13, scope: !6617)
!6623 = !DILocation(line: 361, column: 34, scope: !6618)
!6624 = !DILocation(line: 361, column: 17, scope: !6618)
!6625 = !DILocation(line: 361, column: 20, scope: !6618)
!6626 = !DILocation(line: 361, column: 37, scope: !6618)
!6627 = !DILocation(line: 360, column: 44, scope: !6628)
!6628 = !DILexicalBlockFile(scope: !6618, file: !1012, discriminator: 2)
!6629 = !DILocation(line: 360, column: 13, scope: !6628)
!6630 = distinct !{!6630, !6631}
!6631 = !DILocation(line: 360, column: 13, scope: !6610)
!6632 = !DILocation(line: 365, column: 14, scope: !6633)
!6633 = distinct !DILexicalBlock(scope: !5681, file: !1012, line: 365, column: 13)
!6634 = !DILocation(line: 365, column: 19, scope: !6633)
!6635 = !DILocation(line: 365, column: 24, scope: !6633)
!6636 = !DILocation(line: 365, column: 27, scope: !6637)
!6637 = !DILexicalBlockFile(scope: !6633, file: !1012, discriminator: 1)
!6638 = !DILocation(line: 365, column: 30, scope: !6637)
!6639 = !DILocation(line: 365, column: 45, scope: !6637)
!6640 = !DILocation(line: 365, column: 49, scope: !6641)
!6641 = !DILexicalBlockFile(scope: !6633, file: !1012, discriminator: 2)
!6642 = !DILocation(line: 365, column: 54, scope: !6641)
!6643 = !DILocation(line: 365, column: 59, scope: !6641)
!6644 = !DILocation(line: 365, column: 73, scope: !6645)
!6645 = !DILexicalBlockFile(scope: !6633, file: !1012, discriminator: 3)
!6646 = !DILocation(line: 365, column: 76, scope: !6645)
!6647 = !DILocation(line: 365, column: 62, scope: !6645)
!6648 = !DILocation(line: 365, column: 13, scope: !6645)
!6649 = !DILocation(line: 367, column: 20, scope: !6650)
!6650 = distinct !DILexicalBlock(scope: !6651, file: !1012, line: 367, column: 13)
!6651 = distinct !DILexicalBlock(scope: !6633, file: !1012, line: 365, column: 82)
!6652 = !DILocation(line: 367, column: 18, scope: !6650)
!6653 = !DILocation(line: 367, column: 25, scope: !6654)
!6654 = !DILexicalBlockFile(scope: !6655, file: !1012, discriminator: 1)
!6655 = distinct !DILexicalBlock(scope: !6650, file: !1012, line: 367, column: 13)
!6656 = !DILocation(line: 367, column: 29, scope: !6654)
!6657 = !DILocation(line: 367, column: 32, scope: !6654)
!6658 = !DILocation(line: 367, column: 27, scope: !6654)
!6659 = !DILocation(line: 367, column: 13, scope: !6654)
!6660 = !DILocation(line: 368, column: 52, scope: !6655)
!6661 = !DILocation(line: 368, column: 55, scope: !6655)
!6662 = !DILocation(line: 368, column: 42, scope: !6655)
!6663 = !DILocation(line: 368, column: 37, scope: !6655)
!6664 = !DILocation(line: 368, column: 17, scope: !6655)
!6665 = !DILocation(line: 368, column: 20, scope: !6655)
!6666 = !DILocation(line: 368, column: 40, scope: !6655)
!6667 = !DILocation(line: 367, column: 44, scope: !6668)
!6668 = !DILexicalBlockFile(scope: !6655, file: !1012, discriminator: 2)
!6669 = !DILocation(line: 367, column: 13, scope: !6668)
!6670 = distinct !{!6670, !6671}
!6671 = !DILocation(line: 367, column: 13, scope: !6651)
!6672 = !DILocation(line: 369, column: 9, scope: !6651)
!6673 = !DILocation(line: 370, column: 20, scope: !6674)
!6674 = distinct !DILexicalBlock(scope: !6675, file: !1012, line: 370, column: 13)
!6675 = distinct !DILexicalBlock(scope: !6633, file: !1012, line: 369, column: 16)
!6676 = !DILocation(line: 370, column: 18, scope: !6674)
!6677 = !DILocation(line: 370, column: 25, scope: !6678)
!6678 = !DILexicalBlockFile(scope: !6679, file: !1012, discriminator: 1)
!6679 = distinct !DILexicalBlock(scope: !6674, file: !1012, line: 370, column: 13)
!6680 = !DILocation(line: 370, column: 29, scope: !6678)
!6681 = !DILocation(line: 370, column: 32, scope: !6678)
!6682 = !DILocation(line: 370, column: 27, scope: !6678)
!6683 = !DILocation(line: 370, column: 13, scope: !6678)
!6684 = !DILocation(line: 371, column: 37, scope: !6679)
!6685 = !DILocation(line: 371, column: 17, scope: !6679)
!6686 = !DILocation(line: 371, column: 20, scope: !6679)
!6687 = !DILocation(line: 371, column: 40, scope: !6679)
!6688 = !DILocation(line: 370, column: 44, scope: !6689)
!6689 = !DILexicalBlockFile(scope: !6679, file: !1012, discriminator: 2)
!6690 = !DILocation(line: 370, column: 13, scope: !6689)
!6691 = distinct !{!6691, !6692}
!6692 = !DILocation(line: 370, column: 13, scope: !6675)
!6693 = !DILocation(line: 373, column: 5, scope: !5681)
!6694 = !DILocation(line: 278, column: 60, scope: !6695)
!6695 = !DILexicalBlockFile(scope: !5682, file: !1012, discriminator: 2)
!6696 = !DILocation(line: 278, column: 65, scope: !6695)
!6697 = !DILocation(line: 278, column: 5, scope: !6695)
!6698 = distinct !{!6698, !6699}
!6699 = !DILocation(line: 278, column: 5, scope: !5670)
!6700 = !DILocation(line: 378, column: 27, scope: !6701)
!6701 = distinct !DILexicalBlock(scope: !5670, file: !1012, line: 378, column: 9)
!6702 = !DILocation(line: 378, column: 30, scope: !6701)
!6703 = !DILocation(line: 378, column: 34, scope: !6701)
!6704 = !DILocation(line: 378, column: 47, scope: !6701)
!6705 = !DILocation(line: 378, column: 59, scope: !6701)
!6706 = !DILocation(line: 378, column: 45, scope: !6701)
!6707 = !DILocation(line: 378, column: 9, scope: !6701)
!6708 = !DILocation(line: 378, column: 9, scope: !5670)
!6709 = !DILocation(line: 379, column: 16, scope: !6710)
!6710 = distinct !DILexicalBlock(scope: !6701, file: !1012, line: 378, column: 65)
!6711 = !DILocation(line: 379, column: 19, scope: !6710)
!6712 = !DILocation(line: 379, column: 9, scope: !6710)
!6713 = !DILocation(line: 380, column: 9, scope: !6710)
!6714 = !DILocation(line: 383, column: 5, scope: !5670)
!6715 = !DILocation(line: 384, column: 1, scope: !5670)
!6716 = distinct !DISubprogram(name: "find_next_hier_dmix_chset", scope: !1012, file: !1012, line: 877, type: !6717, isLocal: true, isDefinition: true, scopeLine: 878, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!6717 = !DISubroutineType(types: !6718)
!6718 = !{!2698, !1015, !2698}
!6719 = !DILocalVariable(name: "s", arg: 1, scope: !6716, file: !1012, line: 877, type: !1015)
!6720 = !DILocation(line: 877, column: 62, scope: !6716)
!6721 = !DILocalVariable(name: "c", arg: 2, scope: !6716, file: !1012, line: 877, type: !2698)
!6722 = !DILocation(line: 877, column: 78, scope: !6716)
!6723 = !DILocation(line: 879, column: 9, scope: !6724)
!6724 = distinct !DILexicalBlock(scope: !6716, file: !1012, line: 879, column: 9)
!6725 = !DILocation(line: 879, column: 12, scope: !6724)
!6726 = !DILocation(line: 879, column: 9, scope: !6716)
!6727 = !DILocation(line: 880, column: 9, scope: !6724)
!6728 = !DILocation(line: 880, column: 16, scope: !6729)
!6729 = !DILexicalBlockFile(scope: !6724, file: !1012, discriminator: 1)
!6730 = !DILocation(line: 880, column: 32, scope: !6729)
!6731 = !DILocation(line: 880, column: 35, scope: !6729)
!6732 = !DILocation(line: 880, column: 23, scope: !6729)
!6733 = !DILocation(line: 880, column: 26, scope: !6729)
!6734 = !DILocation(line: 880, column: 20, scope: !6729)
!6735 = !DILocation(line: 880, column: 9, scope: !6729)
!6736 = !DILocation(line: 881, column: 36, scope: !6737)
!6737 = distinct !DILexicalBlock(scope: !6724, file: !1012, line: 881, column: 17)
!6738 = !DILocation(line: 881, column: 17, scope: !6737)
!6739 = !DILocation(line: 881, column: 17, scope: !6724)
!6740 = !DILocation(line: 882, column: 24, scope: !6737)
!6741 = !DILocation(line: 882, column: 17, scope: !6737)
!6742 = !DILocation(line: 880, column: 9, scope: !6743)
!6743 = !DILexicalBlockFile(scope: !6724, file: !1012, discriminator: 2)
!6744 = distinct !{!6744, !6727}
!6745 = !DILocation(line: 880, column: 9, scope: !6746)
!6746 = !DILexicalBlockFile(scope: !6724, file: !1012, discriminator: 3)
!6747 = !DILocation(line: 884, column: 5, scope: !6716)
!6748 = !DILocation(line: 885, column: 1, scope: !6716)
!6749 = distinct !DISubprogram(name: "prescale_down_mix", scope: !1012, file: !1012, line: 887, type: !6750, isLocal: true, isDefinition: true, scopeLine: 888, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!6750 = !DISubroutineType(types: !6751)
!6751 = !{null, !2698, !2698}
!6752 = !DILocalVariable(name: "c", arg: 1, scope: !6749, file: !1012, line: 887, type: !2698)
!6753 = !DILocation(line: 887, column: 44, scope: !6749)
!6754 = !DILocalVariable(name: "o", arg: 2, scope: !6749, file: !1012, line: 887, type: !2698)
!6755 = !DILocation(line: 887, column: 60, scope: !6749)
!6756 = !DILocalVariable(name: "i", scope: !6749, file: !1012, line: 889, type: !996)
!6757 = !DILocation(line: 889, column: 9, scope: !6749)
!6758 = !DILocalVariable(name: "j", scope: !6749, file: !1012, line: 889, type: !996)
!6759 = !DILocation(line: 889, column: 12, scope: !6749)
!6760 = !DILocalVariable(name: "coeff_ptr", scope: !6749, file: !1012, line: 889, type: !1313)
!6761 = !DILocation(line: 889, column: 16, scope: !6749)
!6762 = !DILocation(line: 889, column: 28, scope: !6749)
!6763 = !DILocation(line: 889, column: 31, scope: !6749)
!6764 = !DILocation(line: 891, column: 12, scope: !6765)
!6765 = distinct !DILexicalBlock(scope: !6749, file: !1012, line: 891, column: 5)
!6766 = !DILocation(line: 891, column: 10, scope: !6765)
!6767 = !DILocation(line: 891, column: 17, scope: !6768)
!6768 = !DILexicalBlockFile(scope: !6769, file: !1012, discriminator: 1)
!6769 = distinct !DILexicalBlock(scope: !6765, file: !1012, line: 891, column: 5)
!6770 = !DILocation(line: 891, column: 21, scope: !6768)
!6771 = !DILocation(line: 891, column: 24, scope: !6768)
!6772 = !DILocation(line: 891, column: 19, scope: !6768)
!6773 = !DILocation(line: 891, column: 5, scope: !6768)
!6774 = !DILocalVariable(name: "scale", scope: !6775, file: !1012, line: 892, type: !996)
!6775 = distinct !DILexicalBlock(scope: !6769, file: !1012, line: 891, column: 39)
!6776 = !DILocation(line: 892, column: 13, scope: !6775)
!6777 = !DILocation(line: 892, column: 35, scope: !6775)
!6778 = !DILocation(line: 892, column: 21, scope: !6775)
!6779 = !DILocation(line: 892, column: 24, scope: !6775)
!6780 = !DILocalVariable(name: "scale_inv", scope: !6775, file: !1012, line: 893, type: !996)
!6781 = !DILocation(line: 893, column: 13, scope: !6775)
!6782 = !DILocation(line: 893, column: 43, scope: !6775)
!6783 = !DILocation(line: 893, column: 25, scope: !6775)
!6784 = !DILocation(line: 893, column: 28, scope: !6775)
!6785 = !DILocation(line: 894, column: 48, scope: !6775)
!6786 = !DILocation(line: 894, column: 34, scope: !6775)
!6787 = !DILocation(line: 894, column: 37, scope: !6775)
!6788 = !DILocation(line: 894, column: 52, scope: !6775)
!6789 = !DILocation(line: 894, column: 28, scope: !6775)
!6790 = !DILocation(line: 894, column: 23, scope: !6775)
!6791 = !DILocation(line: 894, column: 9, scope: !6775)
!6792 = !DILocation(line: 894, column: 12, scope: !6775)
!6793 = !DILocation(line: 894, column: 26, scope: !6775)
!6794 = !DILocation(line: 895, column: 56, scope: !6775)
!6795 = !DILocation(line: 895, column: 38, scope: !6775)
!6796 = !DILocation(line: 895, column: 41, scope: !6775)
!6797 = !DILocation(line: 895, column: 60, scope: !6775)
!6798 = !DILocation(line: 895, column: 32, scope: !6775)
!6799 = !DILocation(line: 895, column: 27, scope: !6775)
!6800 = !DILocation(line: 895, column: 9, scope: !6775)
!6801 = !DILocation(line: 895, column: 12, scope: !6775)
!6802 = !DILocation(line: 895, column: 30, scope: !6775)
!6803 = !DILocation(line: 896, column: 16, scope: !6804)
!6804 = distinct !DILexicalBlock(scope: !6775, file: !1012, line: 896, column: 9)
!6805 = !DILocation(line: 896, column: 14, scope: !6804)
!6806 = !DILocation(line: 896, column: 21, scope: !6807)
!6807 = !DILexicalBlockFile(scope: !6808, file: !1012, discriminator: 1)
!6808 = distinct !DILexicalBlock(scope: !6804, file: !1012, line: 896, column: 9)
!6809 = !DILocation(line: 896, column: 25, scope: !6807)
!6810 = !DILocation(line: 896, column: 28, scope: !6807)
!6811 = !DILocation(line: 896, column: 23, scope: !6807)
!6812 = !DILocation(line: 896, column: 9, scope: !6807)
!6813 = !DILocalVariable(name: "coeff", scope: !6814, file: !1012, line: 897, type: !996)
!6814 = distinct !DILexicalBlock(scope: !6808, file: !1012, line: 896, column: 44)
!6815 = !DILocation(line: 897, column: 17, scope: !6814)
!6816 = !DILocation(line: 897, column: 32, scope: !6814)
!6817 = !DILocation(line: 897, column: 31, scope: !6814)
!6818 = !DILocation(line: 897, column: 43, scope: !6814)
!6819 = !DILocation(line: 897, column: 25, scope: !6814)
!6820 = !DILocation(line: 898, column: 34, scope: !6814)
!6821 = !DILocation(line: 898, column: 55, scope: !6814)
!6822 = !DILocation(line: 898, column: 58, scope: !6814)
!6823 = !DILocation(line: 898, column: 69, scope: !6814)
!6824 = !DILocation(line: 898, column: 67, scope: !6814)
!6825 = !DILocation(line: 898, column: 41, scope: !6814)
!6826 = !DILocation(line: 898, column: 44, scope: !6814)
!6827 = !DILocation(line: 898, column: 28, scope: !6814)
!6828 = !DILocation(line: 898, column: 23, scope: !6814)
!6829 = !DILocation(line: 898, column: 26, scope: !6814)
!6830 = !DILocation(line: 899, column: 9, scope: !6814)
!6831 = !DILocation(line: 896, column: 40, scope: !6832)
!6832 = !DILexicalBlockFile(scope: !6808, file: !1012, discriminator: 2)
!6833 = !DILocation(line: 896, column: 9, scope: !6832)
!6834 = distinct !{!6834, !6835}
!6835 = !DILocation(line: 896, column: 9, scope: !6775)
!6836 = !DILocation(line: 900, column: 5, scope: !6775)
!6837 = !DILocation(line: 891, column: 35, scope: !6838)
!6838 = !DILexicalBlockFile(scope: !6769, file: !1012, discriminator: 2)
!6839 = !DILocation(line: 891, column: 5, scope: !6838)
!6840 = distinct !{!6840, !6841}
!6841 = !DILocation(line: 891, column: 5, scope: !6749)
!6842 = !DILocation(line: 901, column: 1, scope: !6749)
!6843 = distinct !DISubprogram(name: "get_bits_count", scope: !1747, file: !1747, line: 219, type: !6844, isLocal: true, isDefinition: true, scopeLine: 220, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!6844 = !DISubroutineType(types: !6845)
!6845 = !{!996, !6846}
!6846 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6847, size: 64, align: 64)
!6847 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1746)
!6848 = !DILocalVariable(name: "s", arg: 1, scope: !6843, file: !1747, line: 219, type: !6846)
!6849 = !DILocation(line: 219, column: 55, scope: !6843)
!6850 = !DILocation(line: 224, column: 12, scope: !6843)
!6851 = !DILocation(line: 224, column: 15, scope: !6843)
!6852 = !DILocation(line: 224, column: 5, scope: !6843)
!6853 = distinct !DISubprogram(name: "parse_dmix_coeffs", scope: !1012, file: !1012, line: 71, type: !3700, isLocal: true, isDefinition: true, scopeLine: 72, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!6854 = !DILocalVariable(name: "s", arg: 1, scope: !6853, file: !1012, line: 71, type: !1015)
!6855 = !DILocation(line: 71, column: 45, scope: !6853)
!6856 = !DILocalVariable(name: "c", arg: 2, scope: !6853, file: !1012, line: 71, type: !2698)
!6857 = !DILocation(line: 71, column: 61, scope: !6853)
!6858 = !DILocalVariable(name: "m", scope: !6853, file: !1012, line: 74, type: !996)
!6859 = !DILocation(line: 74, column: 9, scope: !6853)
!6860 = !DILocation(line: 74, column: 13, scope: !6853)
!6861 = !DILocation(line: 74, column: 16, scope: !6853)
!6862 = !DILocation(line: 74, column: 56, scope: !6863)
!6863 = !DILexicalBlockFile(scope: !6853, file: !1012, discriminator: 1)
!6864 = !DILocation(line: 74, column: 59, scope: !6863)
!6865 = !DILocation(line: 74, column: 32, scope: !6863)
!6866 = !DILocation(line: 74, column: 13, scope: !6863)
!6867 = !DILocation(line: 74, column: 72, scope: !6868)
!6868 = !DILexicalBlockFile(scope: !6853, file: !1012, discriminator: 2)
!6869 = !DILocation(line: 74, column: 75, scope: !6868)
!6870 = !DILocation(line: 74, column: 13, scope: !6868)
!6871 = !DILocation(line: 74, column: 13, scope: !6872)
!6872 = !DILexicalBlockFile(scope: !6853, file: !1012, discriminator: 3)
!6873 = !DILocation(line: 74, column: 9, scope: !6872)
!6874 = !DILocalVariable(name: "i", scope: !6853, file: !1012, line: 75, type: !996)
!6875 = !DILocation(line: 75, column: 9, scope: !6853)
!6876 = !DILocalVariable(name: "j", scope: !6853, file: !1012, line: 75, type: !996)
!6877 = !DILocation(line: 75, column: 12, scope: !6853)
!6878 = !DILocalVariable(name: "coeff_ptr", scope: !6853, file: !1012, line: 75, type: !1313)
!6879 = !DILocation(line: 75, column: 16, scope: !6853)
!6880 = !DILocation(line: 75, column: 28, scope: !6853)
!6881 = !DILocation(line: 75, column: 31, scope: !6853)
!6882 = !DILocation(line: 77, column: 12, scope: !6883)
!6883 = distinct !DILexicalBlock(scope: !6853, file: !1012, line: 77, column: 5)
!6884 = !DILocation(line: 77, column: 10, scope: !6883)
!6885 = !DILocation(line: 77, column: 17, scope: !6886)
!6886 = !DILexicalBlockFile(scope: !6887, file: !1012, discriminator: 1)
!6887 = distinct !DILexicalBlock(scope: !6883, file: !1012, line: 77, column: 5)
!6888 = !DILocation(line: 77, column: 21, scope: !6886)
!6889 = !DILocation(line: 77, column: 19, scope: !6886)
!6890 = !DILocation(line: 77, column: 5, scope: !6886)
!6891 = !DILocalVariable(name: "code", scope: !6892, file: !1012, line: 78, type: !996)
!6892 = distinct !DILexicalBlock(scope: !6887, file: !1012, line: 77, column: 29)
!6893 = !DILocation(line: 78, column: 13, scope: !6892)
!6894 = !DILocalVariable(name: "sign", scope: !6892, file: !1012, line: 78, type: !996)
!6895 = !DILocation(line: 78, column: 19, scope: !6892)
!6896 = !DILocalVariable(name: "coeff", scope: !6892, file: !1012, line: 78, type: !996)
!6897 = !DILocation(line: 78, column: 25, scope: !6892)
!6898 = !DILocalVariable(name: "scale", scope: !6892, file: !1012, line: 78, type: !996)
!6899 = !DILocation(line: 78, column: 32, scope: !6892)
!6900 = !DILocalVariable(name: "scale_inv", scope: !6892, file: !1012, line: 78, type: !996)
!6901 = !DILocation(line: 78, column: 39, scope: !6892)
!6902 = !DILocalVariable(name: "index", scope: !6892, file: !1012, line: 79, type: !993)
!6903 = !DILocation(line: 79, column: 22, scope: !6892)
!6904 = !DILocation(line: 82, column: 14, scope: !6905)
!6905 = distinct !DILexicalBlock(scope: !6892, file: !1012, line: 82, column: 13)
!6906 = !DILocation(line: 82, column: 17, scope: !6905)
!6907 = !DILocation(line: 82, column: 13, scope: !6892)
!6908 = !DILocation(line: 83, column: 30, scope: !6909)
!6909 = distinct !DILexicalBlock(scope: !6905, file: !1012, line: 82, column: 32)
!6910 = !DILocation(line: 83, column: 33, scope: !6909)
!6911 = !DILocation(line: 83, column: 20, scope: !6909)
!6912 = !DILocation(line: 83, column: 18, scope: !6909)
!6913 = !DILocation(line: 84, column: 21, scope: !6909)
!6914 = !DILocation(line: 84, column: 26, scope: !6909)
!6915 = !DILocation(line: 84, column: 32, scope: !6909)
!6916 = !DILocation(line: 84, column: 18, scope: !6909)
!6917 = !DILocation(line: 85, column: 22, scope: !6909)
!6918 = !DILocation(line: 85, column: 27, scope: !6909)
!6919 = !DILocation(line: 85, column: 35, scope: !6909)
!6920 = !DILocation(line: 85, column: 19, scope: !6909)
!6921 = !DILocation(line: 86, column: 17, scope: !6922)
!6922 = distinct !DILexicalBlock(scope: !6909, file: !1012, line: 86, column: 17)
!6923 = !DILocation(line: 86, column: 23, scope: !6922)
!6924 = !DILocation(line: 86, column: 17, scope: !6909)
!6925 = !DILocation(line: 87, column: 24, scope: !6926)
!6926 = distinct !DILexicalBlock(scope: !6922, file: !1012, line: 86, column: 32)
!6927 = !DILocation(line: 87, column: 27, scope: !6926)
!6928 = !DILocation(line: 87, column: 17, scope: !6926)
!6929 = !DILocation(line: 88, column: 17, scope: !6926)
!6930 = !DILocation(line: 90, column: 38, scope: !6909)
!6931 = !DILocation(line: 90, column: 44, scope: !6909)
!6932 = !DILocation(line: 90, column: 21, scope: !6909)
!6933 = !DILocation(line: 90, column: 19, scope: !6909)
!6934 = !DILocation(line: 91, column: 46, scope: !6909)
!6935 = !DILocation(line: 91, column: 25, scope: !6909)
!6936 = !DILocation(line: 91, column: 23, scope: !6909)
!6937 = !DILocation(line: 92, column: 33, scope: !6909)
!6938 = !DILocation(line: 92, column: 41, scope: !6909)
!6939 = !DILocation(line: 92, column: 39, scope: !6909)
!6940 = !DILocation(line: 92, column: 49, scope: !6909)
!6941 = !DILocation(line: 92, column: 47, scope: !6909)
!6942 = !DILocation(line: 92, column: 27, scope: !6909)
!6943 = !DILocation(line: 92, column: 13, scope: !6909)
!6944 = !DILocation(line: 92, column: 16, scope: !6909)
!6945 = !DILocation(line: 92, column: 30, scope: !6909)
!6946 = !DILocation(line: 93, column: 37, scope: !6909)
!6947 = !DILocation(line: 93, column: 49, scope: !6909)
!6948 = !DILocation(line: 93, column: 47, scope: !6909)
!6949 = !DILocation(line: 93, column: 57, scope: !6909)
!6950 = !DILocation(line: 93, column: 55, scope: !6909)
!6951 = !DILocation(line: 93, column: 31, scope: !6909)
!6952 = !DILocation(line: 93, column: 13, scope: !6909)
!6953 = !DILocation(line: 93, column: 16, scope: !6909)
!6954 = !DILocation(line: 93, column: 34, scope: !6909)
!6955 = !DILocation(line: 94, column: 9, scope: !6909)
!6956 = !DILocation(line: 97, column: 16, scope: !6957)
!6957 = distinct !DILexicalBlock(scope: !6892, file: !1012, line: 97, column: 9)
!6958 = !DILocation(line: 97, column: 14, scope: !6957)
!6959 = !DILocation(line: 97, column: 21, scope: !6960)
!6960 = !DILexicalBlockFile(scope: !6961, file: !1012, discriminator: 1)
!6961 = distinct !DILexicalBlock(scope: !6957, file: !1012, line: 97, column: 9)
!6962 = !DILocation(line: 97, column: 25, scope: !6960)
!6963 = !DILocation(line: 97, column: 28, scope: !6960)
!6964 = !DILocation(line: 97, column: 23, scope: !6960)
!6965 = !DILocation(line: 97, column: 9, scope: !6960)
!6966 = !DILocation(line: 98, column: 30, scope: !6967)
!6967 = distinct !DILexicalBlock(scope: !6961, file: !1012, line: 97, column: 44)
!6968 = !DILocation(line: 98, column: 33, scope: !6967)
!6969 = !DILocation(line: 98, column: 20, scope: !6967)
!6970 = !DILocation(line: 98, column: 18, scope: !6967)
!6971 = !DILocation(line: 99, column: 21, scope: !6967)
!6972 = !DILocation(line: 99, column: 26, scope: !6967)
!6973 = !DILocation(line: 99, column: 32, scope: !6967)
!6974 = !DILocation(line: 99, column: 18, scope: !6967)
!6975 = !DILocation(line: 100, column: 21, scope: !6967)
!6976 = !DILocation(line: 100, column: 26, scope: !6967)
!6977 = !DILocation(line: 100, column: 19, scope: !6967)
!6978 = !DILocation(line: 101, column: 17, scope: !6979)
!6979 = distinct !DILexicalBlock(scope: !6967, file: !1012, line: 101, column: 17)
!6980 = !DILocation(line: 101, column: 23, scope: !6979)
!6981 = !DILocation(line: 101, column: 17, scope: !6967)
!6982 = !DILocation(line: 102, column: 24, scope: !6983)
!6983 = distinct !DILexicalBlock(scope: !6979, file: !1012, line: 101, column: 32)
!6984 = !DILocation(line: 102, column: 27, scope: !6983)
!6985 = !DILocation(line: 102, column: 17, scope: !6983)
!6986 = !DILocation(line: 103, column: 17, scope: !6983)
!6987 = !DILocation(line: 105, column: 38, scope: !6967)
!6988 = !DILocation(line: 105, column: 21, scope: !6967)
!6989 = !DILocation(line: 105, column: 19, scope: !6967)
!6990 = !DILocation(line: 106, column: 18, scope: !6991)
!6991 = distinct !DILexicalBlock(scope: !6967, file: !1012, line: 106, column: 17)
!6992 = !DILocation(line: 106, column: 21, scope: !6991)
!6993 = !DILocation(line: 106, column: 17, scope: !6967)
!6994 = !DILocation(line: 108, column: 31, scope: !6991)
!6995 = !DILocation(line: 108, column: 42, scope: !6991)
!6996 = !DILocation(line: 108, column: 25, scope: !6991)
!6997 = !DILocation(line: 108, column: 23, scope: !6991)
!6998 = !DILocation(line: 108, column: 17, scope: !6991)
!6999 = !DILocation(line: 109, column: 29, scope: !6967)
!7000 = !DILocation(line: 109, column: 37, scope: !6967)
!7001 = !DILocation(line: 109, column: 35, scope: !6967)
!7002 = !DILocation(line: 109, column: 45, scope: !6967)
!7003 = !DILocation(line: 109, column: 43, scope: !6967)
!7004 = !DILocation(line: 109, column: 23, scope: !6967)
!7005 = !DILocation(line: 109, column: 26, scope: !6967)
!7006 = !DILocation(line: 110, column: 9, scope: !6967)
!7007 = !DILocation(line: 97, column: 40, scope: !7008)
!7008 = !DILexicalBlockFile(scope: !6961, file: !1012, discriminator: 2)
!7009 = !DILocation(line: 97, column: 9, scope: !7008)
!7010 = distinct !{!7010, !7011}
!7011 = !DILocation(line: 97, column: 9, scope: !6892)
!7012 = !DILocation(line: 111, column: 5, scope: !6892)
!7013 = !DILocation(line: 77, column: 25, scope: !7014)
!7014 = !DILexicalBlockFile(scope: !6887, file: !1012, discriminator: 2)
!7015 = !DILocation(line: 77, column: 5, scope: !7014)
!7016 = distinct !{!7016, !7017}
!7017 = !DILocation(line: 77, column: 5, scope: !6853)
!7018 = !DILocation(line: 113, column: 5, scope: !6853)
!7019 = !DILocation(line: 114, column: 1, scope: !6853)
!7020 = distinct !DISubprogram(name: "get_linear", scope: !1012, file: !1012, line: 27, type: !5359, isLocal: true, isDefinition: true, scopeLine: 28, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!7021 = !DILocalVariable(name: "gb", arg: 1, scope: !7020, file: !1012, line: 27, type: !4570)
!7022 = !DILocation(line: 27, column: 38, scope: !7020)
!7023 = !DILocalVariable(name: "n", arg: 2, scope: !7020, file: !1012, line: 27, type: !996)
!7024 = !DILocation(line: 27, column: 46, scope: !7020)
!7025 = !DILocalVariable(name: "v", scope: !7020, file: !1012, line: 29, type: !993)
!7026 = !DILocation(line: 29, column: 18, scope: !7020)
!7027 = !DILocation(line: 29, column: 36, scope: !7020)
!7028 = !DILocation(line: 29, column: 40, scope: !7020)
!7029 = !DILocation(line: 29, column: 22, scope: !7020)
!7030 = !DILocation(line: 30, column: 13, scope: !7020)
!7031 = !DILocation(line: 30, column: 15, scope: !7020)
!7032 = !DILocation(line: 30, column: 25, scope: !7020)
!7033 = !DILocation(line: 30, column: 27, scope: !7020)
!7034 = !DILocation(line: 30, column: 23, scope: !7020)
!7035 = !DILocation(line: 30, column: 21, scope: !7020)
!7036 = !DILocation(line: 30, column: 5, scope: !7020)
!7037 = distinct !DISubprogram(name: "mul16", scope: !4387, file: !4387, line: 47, type: !7038, isLocal: true, isDefinition: true, scopeLine: 47, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!7038 = !DISubroutineType(types: !7039)
!7039 = !{!995, !995, !995}
!7040 = !DILocalVariable(name: "a", arg: 1, scope: !7037, file: !4387, line: 47, type: !995)
!7041 = !DILocation(line: 47, column: 37, scope: !7037)
!7042 = !DILocalVariable(name: "b", arg: 2, scope: !7037, file: !4387, line: 47, type: !995)
!7043 = !DILocation(line: 47, column: 48, scope: !7037)
!7044 = !DILocation(line: 47, column: 66, scope: !7037)
!7045 = !DILocation(line: 47, column: 69, scope: !7037)
!7046 = !DILocation(line: 47, column: 60, scope: !7037)
!7047 = !DILocation(line: 47, column: 53, scope: !7037)
!7048 = distinct !DISubprogram(name: "mul__", scope: !4387, file: !4387, line: 35, type: !7049, isLocal: true, isDefinition: true, scopeLine: 36, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!7049 = !DISubroutineType(types: !7050)
!7050 = !{!995, !995, !995, !996}
!7051 = !DILocalVariable(name: "a", arg: 1, scope: !7048, file: !4387, line: 35, type: !995)
!7052 = !DILocation(line: 35, column: 37, scope: !7048)
!7053 = !DILocalVariable(name: "b", arg: 2, scope: !7048, file: !4387, line: 35, type: !995)
!7054 = !DILocation(line: 35, column: 48, scope: !7048)
!7055 = !DILocalVariable(name: "bits", arg: 3, scope: !7048, file: !4387, line: 35, type: !996)
!7056 = !DILocation(line: 35, column: 55, scope: !7048)
!7057 = !DILocation(line: 37, column: 28, scope: !7048)
!7058 = !DILocation(line: 37, column: 19, scope: !7048)
!7059 = !DILocation(line: 37, column: 32, scope: !7048)
!7060 = !DILocation(line: 37, column: 30, scope: !7048)
!7061 = !DILocation(line: 37, column: 35, scope: !7048)
!7062 = !DILocation(line: 37, column: 12, scope: !7048)
!7063 = !DILocation(line: 37, column: 5, scope: !7048)
!7064 = distinct !DISubprogram(name: "norm__", scope: !4387, file: !4387, line: 27, type: !7065, isLocal: true, isDefinition: true, scopeLine: 28, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!7065 = !DISubroutineType(types: !7066)
!7066 = !{!995, !1006, !996}
!7067 = !DILocalVariable(name: "a", arg: 1, scope: !7064, file: !4387, line: 27, type: !1006)
!7068 = !DILocation(line: 27, column: 38, scope: !7064)
!7069 = !DILocalVariable(name: "bits", arg: 2, scope: !7064, file: !4387, line: 27, type: !996)
!7070 = !DILocation(line: 27, column: 45, scope: !7064)
!7071 = !DILocation(line: 29, column: 9, scope: !7072)
!7072 = distinct !DILexicalBlock(scope: !7064, file: !4387, line: 29, column: 9)
!7073 = !DILocation(line: 29, column: 14, scope: !7072)
!7074 = !DILocation(line: 29, column: 9, scope: !7064)
!7075 = !DILocation(line: 30, column: 27, scope: !7072)
!7076 = !DILocation(line: 30, column: 39, scope: !7072)
!7077 = !DILocation(line: 30, column: 44, scope: !7072)
!7078 = !DILocation(line: 30, column: 35, scope: !7072)
!7079 = !DILocation(line: 30, column: 29, scope: !7072)
!7080 = !DILocation(line: 30, column: 54, scope: !7072)
!7081 = !DILocation(line: 30, column: 51, scope: !7072)
!7082 = !DILocation(line: 30, column: 16, scope: !7072)
!7083 = !DILocation(line: 30, column: 9, scope: !7072)
!7084 = !DILocation(line: 32, column: 25, scope: !7072)
!7085 = !DILocation(line: 32, column: 16, scope: !7072)
!7086 = !DILocation(line: 32, column: 9, scope: !7072)
!7087 = !DILocation(line: 33, column: 1, scope: !7064)
!7088 = distinct !DISubprogram(name: "mul15", scope: !4387, file: !4387, line: 46, type: !7038, isLocal: true, isDefinition: true, scopeLine: 46, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!7089 = !DILocalVariable(name: "a", arg: 1, scope: !7088, file: !4387, line: 46, type: !995)
!7090 = !DILocation(line: 46, column: 37, scope: !7088)
!7091 = !DILocalVariable(name: "b", arg: 2, scope: !7088, file: !4387, line: 46, type: !995)
!7092 = !DILocation(line: 46, column: 48, scope: !7088)
!7093 = !DILocation(line: 46, column: 66, scope: !7088)
!7094 = !DILocation(line: 46, column: 69, scope: !7088)
!7095 = !DILocation(line: 46, column: 60, scope: !7088)
!7096 = !DILocation(line: 46, column: 53, scope: !7088)
!7097 = distinct !DISubprogram(name: "skip_bits", scope: !1747, file: !1747, line: 460, type: !7098, isLocal: true, isDefinition: true, scopeLine: 461, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!7098 = !DISubroutineType(types: !7099)
!7099 = !{null, !4570, !996}
!7100 = !DILocalVariable(name: "s", arg: 1, scope: !7097, file: !1747, line: 460, type: !4570)
!7101 = !DILocation(line: 460, column: 45, scope: !7097)
!7102 = !DILocalVariable(name: "n", arg: 2, scope: !7097, file: !1747, line: 460, type: !996)
!7103 = !DILocation(line: 460, column: 52, scope: !7097)
!7104 = !DILocalVariable(name: "re_index", scope: !7097, file: !1747, line: 481, type: !993)
!7105 = !DILocation(line: 481, column: 18, scope: !7097)
!7106 = !DILocation(line: 481, column: 30, scope: !7097)
!7107 = !DILocation(line: 481, column: 34, scope: !7097)
!7108 = !DILocalVariable(name: "re_cache", scope: !7097, file: !1747, line: 481, type: !993)
!7109 = !DILocation(line: 481, column: 78, scope: !7097)
!7110 = !DILocalVariable(name: "re_size_plus8", scope: !7097, file: !1747, line: 481, type: !993)
!7111 = !DILocation(line: 481, column: 101, scope: !7097)
!7112 = !DILocation(line: 481, column: 118, scope: !7097)
!7113 = !DILocation(line: 481, column: 122, scope: !7097)
!7114 = !DILocation(line: 482, column: 18, scope: !7097)
!7115 = !DILocation(line: 482, column: 36, scope: !7097)
!7116 = !DILocation(line: 482, column: 48, scope: !7097)
!7117 = !DILocation(line: 482, column: 45, scope: !7097)
!7118 = !DILocation(line: 482, column: 33, scope: !7097)
!7119 = !DILocation(line: 482, column: 17, scope: !7097)
!7120 = !DILocation(line: 482, column: 55, scope: !7121)
!7121 = !DILexicalBlockFile(scope: !7097, file: !1747, discriminator: 1)
!7122 = !DILocation(line: 482, column: 67, scope: !7121)
!7123 = !DILocation(line: 482, column: 64, scope: !7121)
!7124 = !DILocation(line: 482, column: 17, scope: !7121)
!7125 = !DILocation(line: 482, column: 74, scope: !7126)
!7126 = !DILexicalBlockFile(scope: !7097, file: !1747, discriminator: 2)
!7127 = !DILocation(line: 482, column: 17, scope: !7126)
!7128 = !DILocation(line: 482, column: 17, scope: !7129)
!7129 = !DILexicalBlockFile(scope: !7097, file: !1747, discriminator: 3)
!7130 = !DILocation(line: 482, column: 14, scope: !7129)
!7131 = !DILocation(line: 483, column: 18, scope: !7097)
!7132 = !DILocation(line: 483, column: 6, scope: !7097)
!7133 = !DILocation(line: 483, column: 10, scope: !7097)
!7134 = !DILocation(line: 483, column: 16, scope: !7097)
!7135 = !DILocation(line: 485, column: 1, scope: !7097)
!7136 = distinct !DISubprogram(name: "chs_alloc_msb_band_data", scope: !1012, file: !1012, line: 386, type: !3700, isLocal: true, isDefinition: true, scopeLine: 387, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!7137 = !DILocalVariable(name: "s", arg: 1, scope: !7136, file: !1012, line: 386, type: !1015)
!7138 = !DILocation(line: 386, column: 51, scope: !7136)
!7139 = !DILocalVariable(name: "c", arg: 2, scope: !7136, file: !1012, line: 386, type: !2698)
!7140 = !DILocation(line: 386, column: 67, scope: !7136)
!7141 = !DILocalVariable(name: "ndecisamples", scope: !7136, file: !1012, line: 388, type: !996)
!7142 = !DILocation(line: 388, column: 9, scope: !7136)
!7143 = !DILocation(line: 388, column: 24, scope: !7136)
!7144 = !DILocation(line: 388, column: 27, scope: !7136)
!7145 = !DILocation(line: 388, column: 38, scope: !7136)
!7146 = !DILocalVariable(name: "nchsamples", scope: !7136, file: !1012, line: 389, type: !996)
!7147 = !DILocation(line: 389, column: 9, scope: !7136)
!7148 = !DILocation(line: 389, column: 22, scope: !7136)
!7149 = !DILocation(line: 389, column: 25, scope: !7136)
!7150 = !DILocation(line: 389, column: 41, scope: !7136)
!7151 = !DILocation(line: 389, column: 39, scope: !7136)
!7152 = !DILocalVariable(name: "i", scope: !7136, file: !1012, line: 390, type: !996)
!7153 = !DILocation(line: 390, column: 9, scope: !7136)
!7154 = !DILocalVariable(name: "j", scope: !7136, file: !1012, line: 390, type: !996)
!7155 = !DILocation(line: 390, column: 12, scope: !7136)
!7156 = !DILocalVariable(name: "nsamples", scope: !7136, file: !1012, line: 390, type: !996)
!7157 = !DILocation(line: 390, column: 15, scope: !7136)
!7158 = !DILocation(line: 390, column: 26, scope: !7136)
!7159 = !DILocation(line: 390, column: 39, scope: !7136)
!7160 = !DILocation(line: 390, column: 42, scope: !7136)
!7161 = !DILocation(line: 390, column: 37, scope: !7136)
!7162 = !DILocation(line: 390, column: 54, scope: !7136)
!7163 = !DILocation(line: 390, column: 57, scope: !7136)
!7164 = !DILocation(line: 390, column: 52, scope: !7136)
!7165 = !DILocalVariable(name: "ptr", scope: !7136, file: !1012, line: 391, type: !994)
!7166 = !DILocation(line: 391, column: 14, scope: !7136)
!7167 = !DILocation(line: 394, column: 21, scope: !7136)
!7168 = !DILocation(line: 394, column: 24, scope: !7136)
!7169 = !DILocation(line: 394, column: 20, scope: !7136)
!7170 = !DILocation(line: 394, column: 43, scope: !7136)
!7171 = !DILocation(line: 394, column: 46, scope: !7136)
!7172 = !DILocation(line: 394, column: 62, scope: !7136)
!7173 = !DILocation(line: 394, column: 71, scope: !7136)
!7174 = !DILocation(line: 394, column: 5, scope: !7136)
!7175 = !DILocation(line: 395, column: 10, scope: !7176)
!7176 = distinct !DILexicalBlock(scope: !7136, file: !1012, line: 395, column: 9)
!7177 = !DILocation(line: 395, column: 13, scope: !7176)
!7178 = !DILocation(line: 395, column: 9, scope: !7136)
!7179 = !DILocation(line: 396, column: 9, scope: !7176)
!7180 = !DILocation(line: 398, column: 11, scope: !7136)
!7181 = !DILocation(line: 398, column: 14, scope: !7136)
!7182 = !DILocation(line: 398, column: 33, scope: !7136)
!7183 = !DILocation(line: 398, column: 31, scope: !7136)
!7184 = !DILocation(line: 398, column: 9, scope: !7136)
!7185 = !DILocation(line: 399, column: 12, scope: !7186)
!7186 = distinct !DILexicalBlock(scope: !7136, file: !1012, line: 399, column: 5)
!7187 = !DILocation(line: 399, column: 10, scope: !7186)
!7188 = !DILocation(line: 399, column: 17, scope: !7189)
!7189 = !DILexicalBlockFile(scope: !7190, file: !1012, discriminator: 1)
!7190 = distinct !DILexicalBlock(scope: !7186, file: !1012, line: 399, column: 5)
!7191 = !DILocation(line: 399, column: 21, scope: !7189)
!7192 = !DILocation(line: 399, column: 24, scope: !7189)
!7193 = !DILocation(line: 399, column: 19, scope: !7189)
!7194 = !DILocation(line: 399, column: 5, scope: !7189)
!7195 = !DILocation(line: 400, column: 16, scope: !7196)
!7196 = distinct !DILexicalBlock(scope: !7197, file: !1012, line: 400, column: 9)
!7197 = distinct !DILexicalBlock(scope: !7190, file: !1012, line: 399, column: 41)
!7198 = !DILocation(line: 400, column: 14, scope: !7196)
!7199 = !DILocation(line: 400, column: 21, scope: !7200)
!7200 = !DILexicalBlockFile(scope: !7201, file: !1012, discriminator: 1)
!7201 = distinct !DILexicalBlock(scope: !7196, file: !1012, line: 400, column: 9)
!7202 = !DILocation(line: 400, column: 25, scope: !7200)
!7203 = !DILocation(line: 400, column: 28, scope: !7200)
!7204 = !DILocation(line: 400, column: 23, scope: !7200)
!7205 = !DILocation(line: 400, column: 9, scope: !7200)
!7206 = !DILocation(line: 401, column: 48, scope: !7207)
!7207 = distinct !DILexicalBlock(scope: !7201, file: !1012, line: 400, column: 44)
!7208 = !DILocation(line: 401, column: 43, scope: !7207)
!7209 = !DILocation(line: 401, column: 13, scope: !7207)
!7210 = !DILocation(line: 401, column: 22, scope: !7207)
!7211 = !DILocation(line: 401, column: 16, scope: !7207)
!7212 = !DILocation(line: 401, column: 25, scope: !7207)
!7213 = !DILocation(line: 401, column: 46, scope: !7207)
!7214 = !DILocation(line: 402, column: 20, scope: !7207)
!7215 = !DILocation(line: 402, column: 17, scope: !7207)
!7216 = !DILocation(line: 403, column: 9, scope: !7207)
!7217 = !DILocation(line: 400, column: 40, scope: !7218)
!7218 = !DILexicalBlockFile(scope: !7201, file: !1012, discriminator: 2)
!7219 = !DILocation(line: 400, column: 9, scope: !7218)
!7220 = distinct !{!7220, !7221}
!7221 = !DILocation(line: 400, column: 9, scope: !7197)
!7222 = !DILocation(line: 404, column: 5, scope: !7197)
!7223 = !DILocation(line: 399, column: 37, scope: !7224)
!7224 = !DILexicalBlockFile(scope: !7190, file: !1012, discriminator: 2)
!7225 = !DILocation(line: 399, column: 5, scope: !7224)
!7226 = distinct !{!7226, !7227}
!7227 = !DILocation(line: 399, column: 5, scope: !7136)
!7228 = !DILocation(line: 406, column: 5, scope: !7136)
!7229 = !DILocation(line: 407, column: 1, scope: !7136)
!7230 = distinct !DISubprogram(name: "chs_alloc_lsb_band_data", scope: !1012, file: !1012, line: 409, type: !3700, isLocal: true, isDefinition: true, scopeLine: 410, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!7231 = !DILocalVariable(name: "s", arg: 1, scope: !7230, file: !1012, line: 409, type: !1015)
!7232 = !DILocation(line: 409, column: 51, scope: !7230)
!7233 = !DILocalVariable(name: "c", arg: 2, scope: !7230, file: !1012, line: 409, type: !2698)
!7234 = !DILocation(line: 409, column: 67, scope: !7230)
!7235 = !DILocalVariable(name: "i", scope: !7230, file: !1012, line: 411, type: !996)
!7236 = !DILocation(line: 411, column: 9, scope: !7230)
!7237 = !DILocalVariable(name: "j", scope: !7230, file: !1012, line: 411, type: !996)
!7238 = !DILocation(line: 411, column: 12, scope: !7230)
!7239 = !DILocalVariable(name: "nsamples", scope: !7230, file: !1012, line: 411, type: !996)
!7240 = !DILocation(line: 411, column: 15, scope: !7230)
!7241 = !DILocalVariable(name: "ptr", scope: !7230, file: !1012, line: 412, type: !994)
!7242 = !DILocation(line: 412, column: 14, scope: !7230)
!7243 = !DILocation(line: 415, column: 12, scope: !7244)
!7244 = distinct !DILexicalBlock(scope: !7230, file: !1012, line: 415, column: 5)
!7245 = !DILocation(line: 415, column: 10, scope: !7244)
!7246 = !DILocation(line: 415, column: 17, scope: !7247)
!7247 = !DILexicalBlockFile(scope: !7248, file: !1012, discriminator: 1)
!7248 = distinct !DILexicalBlock(scope: !7244, file: !1012, line: 415, column: 5)
!7249 = !DILocation(line: 415, column: 21, scope: !7247)
!7250 = !DILocation(line: 415, column: 24, scope: !7247)
!7251 = !DILocation(line: 415, column: 19, scope: !7247)
!7252 = !DILocation(line: 415, column: 5, scope: !7247)
!7253 = !DILocation(line: 416, column: 22, scope: !7254)
!7254 = distinct !DILexicalBlock(scope: !7248, file: !1012, line: 416, column: 13)
!7255 = !DILocation(line: 416, column: 13, scope: !7254)
!7256 = !DILocation(line: 416, column: 16, scope: !7254)
!7257 = !DILocation(line: 416, column: 25, scope: !7254)
!7258 = !DILocation(line: 416, column: 13, scope: !7248)
!7259 = !DILocation(line: 417, column: 25, scope: !7254)
!7260 = !DILocation(line: 417, column: 28, scope: !7254)
!7261 = !DILocation(line: 417, column: 44, scope: !7254)
!7262 = !DILocation(line: 417, column: 47, scope: !7254)
!7263 = !DILocation(line: 417, column: 42, scope: !7254)
!7264 = !DILocation(line: 417, column: 22, scope: !7254)
!7265 = !DILocation(line: 417, column: 13, scope: !7254)
!7266 = !DILocation(line: 416, column: 25, scope: !7267)
!7267 = !DILexicalBlockFile(scope: !7254, file: !1012, discriminator: 1)
!7268 = !DILocation(line: 415, column: 37, scope: !7269)
!7269 = !DILexicalBlockFile(scope: !7248, file: !1012, discriminator: 2)
!7270 = !DILocation(line: 415, column: 5, scope: !7269)
!7271 = distinct !{!7271, !7272}
!7272 = !DILocation(line: 415, column: 5, scope: !7230)
!7273 = !DILocation(line: 418, column: 10, scope: !7274)
!7274 = distinct !DILexicalBlock(scope: !7230, file: !1012, line: 418, column: 9)
!7275 = !DILocation(line: 418, column: 9, scope: !7230)
!7276 = !DILocation(line: 419, column: 9, scope: !7274)
!7277 = !DILocation(line: 422, column: 21, scope: !7230)
!7278 = !DILocation(line: 422, column: 24, scope: !7230)
!7279 = !DILocation(line: 422, column: 20, scope: !7230)
!7280 = !DILocation(line: 422, column: 43, scope: !7230)
!7281 = !DILocation(line: 422, column: 46, scope: !7230)
!7282 = !DILocation(line: 422, column: 62, scope: !7230)
!7283 = !DILocation(line: 422, column: 71, scope: !7230)
!7284 = !DILocation(line: 422, column: 5, scope: !7230)
!7285 = !DILocation(line: 423, column: 10, scope: !7286)
!7286 = distinct !DILexicalBlock(scope: !7230, file: !1012, line: 423, column: 9)
!7287 = !DILocation(line: 423, column: 13, scope: !7286)
!7288 = !DILocation(line: 423, column: 9, scope: !7230)
!7289 = !DILocation(line: 424, column: 9, scope: !7286)
!7290 = !DILocation(line: 426, column: 11, scope: !7230)
!7291 = !DILocation(line: 426, column: 14, scope: !7230)
!7292 = !DILocation(line: 426, column: 9, scope: !7230)
!7293 = !DILocation(line: 427, column: 12, scope: !7294)
!7294 = distinct !DILexicalBlock(scope: !7230, file: !1012, line: 427, column: 5)
!7295 = !DILocation(line: 427, column: 10, scope: !7294)
!7296 = !DILocation(line: 427, column: 17, scope: !7297)
!7297 = !DILexicalBlockFile(scope: !7298, file: !1012, discriminator: 1)
!7298 = distinct !DILexicalBlock(scope: !7294, file: !1012, line: 427, column: 5)
!7299 = !DILocation(line: 427, column: 21, scope: !7297)
!7300 = !DILocation(line: 427, column: 24, scope: !7297)
!7301 = !DILocation(line: 427, column: 19, scope: !7297)
!7302 = !DILocation(line: 427, column: 5, scope: !7297)
!7303 = !DILocation(line: 428, column: 22, scope: !7304)
!7304 = distinct !DILexicalBlock(scope: !7305, file: !1012, line: 428, column: 13)
!7305 = distinct !DILexicalBlock(scope: !7298, file: !1012, line: 427, column: 41)
!7306 = !DILocation(line: 428, column: 13, scope: !7304)
!7307 = !DILocation(line: 428, column: 16, scope: !7304)
!7308 = !DILocation(line: 428, column: 25, scope: !7304)
!7309 = !DILocation(line: 428, column: 13, scope: !7305)
!7310 = !DILocation(line: 429, column: 20, scope: !7311)
!7311 = distinct !DILexicalBlock(scope: !7312, file: !1012, line: 429, column: 13)
!7312 = distinct !DILexicalBlock(scope: !7304, file: !1012, line: 428, column: 43)
!7313 = !DILocation(line: 429, column: 18, scope: !7311)
!7314 = !DILocation(line: 429, column: 25, scope: !7315)
!7315 = !DILexicalBlockFile(scope: !7316, file: !1012, discriminator: 1)
!7316 = distinct !DILexicalBlock(scope: !7311, file: !1012, line: 429, column: 13)
!7317 = !DILocation(line: 429, column: 29, scope: !7315)
!7318 = !DILocation(line: 429, column: 32, scope: !7315)
!7319 = !DILocation(line: 429, column: 27, scope: !7315)
!7320 = !DILocation(line: 429, column: 13, scope: !7315)
!7321 = !DILocation(line: 430, column: 52, scope: !7322)
!7322 = distinct !DILexicalBlock(scope: !7316, file: !1012, line: 429, column: 48)
!7323 = !DILocation(line: 430, column: 47, scope: !7322)
!7324 = !DILocation(line: 430, column: 17, scope: !7322)
!7325 = !DILocation(line: 430, column: 26, scope: !7322)
!7326 = !DILocation(line: 430, column: 20, scope: !7322)
!7327 = !DILocation(line: 430, column: 29, scope: !7322)
!7328 = !DILocation(line: 430, column: 50, scope: !7322)
!7329 = !DILocation(line: 431, column: 24, scope: !7322)
!7330 = !DILocation(line: 431, column: 27, scope: !7322)
!7331 = !DILocation(line: 431, column: 21, scope: !7322)
!7332 = !DILocation(line: 432, column: 13, scope: !7322)
!7333 = !DILocation(line: 429, column: 44, scope: !7334)
!7334 = !DILexicalBlockFile(scope: !7316, file: !1012, discriminator: 2)
!7335 = !DILocation(line: 429, column: 13, scope: !7334)
!7336 = distinct !{!7336, !7337}
!7337 = !DILocation(line: 429, column: 13, scope: !7312)
!7338 = !DILocation(line: 433, column: 9, scope: !7312)
!7339 = !DILocation(line: 434, column: 20, scope: !7340)
!7340 = distinct !DILexicalBlock(scope: !7341, file: !1012, line: 434, column: 13)
!7341 = distinct !DILexicalBlock(scope: !7304, file: !1012, line: 433, column: 16)
!7342 = !DILocation(line: 434, column: 18, scope: !7340)
!7343 = !DILocation(line: 434, column: 25, scope: !7344)
!7344 = !DILexicalBlockFile(scope: !7345, file: !1012, discriminator: 1)
!7345 = distinct !DILexicalBlock(scope: !7340, file: !1012, line: 434, column: 13)
!7346 = !DILocation(line: 434, column: 29, scope: !7344)
!7347 = !DILocation(line: 434, column: 32, scope: !7344)
!7348 = !DILocation(line: 434, column: 27, scope: !7344)
!7349 = !DILocation(line: 434, column: 13, scope: !7344)
!7350 = !DILocation(line: 435, column: 47, scope: !7345)
!7351 = !DILocation(line: 435, column: 17, scope: !7345)
!7352 = !DILocation(line: 435, column: 26, scope: !7345)
!7353 = !DILocation(line: 435, column: 20, scope: !7345)
!7354 = !DILocation(line: 435, column: 29, scope: !7345)
!7355 = !DILocation(line: 435, column: 50, scope: !7345)
!7356 = !DILocation(line: 434, column: 44, scope: !7357)
!7357 = !DILexicalBlockFile(scope: !7345, file: !1012, discriminator: 2)
!7358 = !DILocation(line: 434, column: 13, scope: !7357)
!7359 = distinct !{!7359, !7360}
!7360 = !DILocation(line: 434, column: 13, scope: !7341)
!7361 = !DILocation(line: 437, column: 5, scope: !7305)
!7362 = !DILocation(line: 427, column: 37, scope: !7363)
!7363 = !DILexicalBlockFile(scope: !7298, file: !1012, discriminator: 2)
!7364 = !DILocation(line: 427, column: 5, scope: !7363)
!7365 = distinct !{!7365, !7366}
!7366 = !DILocation(line: 427, column: 5, scope: !7230)
!7367 = !DILocation(line: 439, column: 5, scope: !7230)
!7368 = !DILocation(line: 440, column: 1, scope: !7230)
!7369 = distinct !DISubprogram(name: "chs_parse_band_data", scope: !1012, file: !1012, line: 442, type: !7370, isLocal: true, isDefinition: true, scopeLine: 443, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!7370 = !DISubroutineType(types: !7371)
!7371 = !{!996, !1015, !2698, !996, !996, !996}
!7372 = !DILocalVariable(name: "s", arg: 1, scope: !7369, file: !1012, line: 442, type: !1015)
!7373 = !DILocation(line: 442, column: 47, scope: !7369)
!7374 = !DILocalVariable(name: "c", arg: 2, scope: !7369, file: !1012, line: 442, type: !2698)
!7375 = !DILocation(line: 442, column: 63, scope: !7369)
!7376 = !DILocalVariable(name: "band", arg: 3, scope: !7369, file: !1012, line: 442, type: !996)
!7377 = !DILocation(line: 442, column: 70, scope: !7369)
!7378 = !DILocalVariable(name: "seg", arg: 4, scope: !7369, file: !1012, line: 442, type: !996)
!7379 = !DILocation(line: 442, column: 80, scope: !7369)
!7380 = !DILocalVariable(name: "band_data_end", arg: 5, scope: !7369, file: !1012, line: 442, type: !996)
!7381 = !DILocation(line: 442, column: 89, scope: !7369)
!7382 = !DILocalVariable(name: "b", scope: !7369, file: !1012, line: 444, type: !3354)
!7383 = !DILocation(line: 444, column: 17, scope: !7369)
!7384 = !DILocation(line: 444, column: 31, scope: !7369)
!7385 = !DILocation(line: 444, column: 22, scope: !7369)
!7386 = !DILocation(line: 444, column: 25, scope: !7369)
!7387 = !DILocalVariable(name: "i", scope: !7369, file: !1012, line: 445, type: !996)
!7388 = !DILocation(line: 445, column: 9, scope: !7369)
!7389 = !DILocalVariable(name: "j", scope: !7369, file: !1012, line: 445, type: !996)
!7390 = !DILocation(line: 445, column: 12, scope: !7369)
!7391 = !DILocalVariable(name: "k", scope: !7369, file: !1012, line: 445, type: !996)
!7392 = !DILocation(line: 445, column: 15, scope: !7369)
!7393 = !DILocation(line: 448, column: 11, scope: !7394)
!7394 = distinct !DILexicalBlock(scope: !7369, file: !1012, line: 448, column: 9)
!7395 = !DILocation(line: 448, column: 15, scope: !7394)
!7396 = !DILocation(line: 448, column: 29, scope: !7397)
!7397 = !DILexicalBlockFile(scope: !7394, file: !1012, discriminator: 1)
!7398 = !DILocation(line: 448, column: 32, scope: !7397)
!7399 = !DILocation(line: 448, column: 18, scope: !7397)
!7400 = !DILocation(line: 448, column: 9, scope: !7397)
!7401 = !DILocation(line: 452, column: 36, scope: !7402)
!7402 = distinct !DILexicalBlock(scope: !7394, file: !1012, line: 448, column: 38)
!7403 = !DILocation(line: 452, column: 39, scope: !7402)
!7404 = !DILocation(line: 452, column: 25, scope: !7402)
!7405 = !DILocation(line: 452, column: 9, scope: !7402)
!7406 = !DILocation(line: 452, column: 12, scope: !7402)
!7407 = !DILocation(line: 452, column: 23, scope: !7402)
!7408 = !DILocation(line: 455, column: 13, scope: !7402)
!7409 = !DILocation(line: 455, column: 16, scope: !7402)
!7410 = !DILocation(line: 455, column: 13, scope: !7411)
!7411 = !DILexicalBlockFile(scope: !7402, file: !1012, discriminator: 1)
!7412 = !DILocation(line: 455, column: 33, scope: !7413)
!7413 = !DILexicalBlockFile(scope: !7402, file: !1012, discriminator: 2)
!7414 = !DILocation(line: 455, column: 36, scope: !7413)
!7415 = !DILocation(line: 455, column: 13, scope: !7413)
!7416 = !DILocation(line: 455, column: 13, scope: !7417)
!7417 = !DILexicalBlockFile(scope: !7402, file: !1012, discriminator: 3)
!7418 = !DILocation(line: 455, column: 11, scope: !7417)
!7419 = !DILocation(line: 458, column: 16, scope: !7420)
!7420 = distinct !DILexicalBlock(scope: !7402, file: !1012, line: 458, column: 9)
!7421 = !DILocation(line: 458, column: 14, scope: !7420)
!7422 = !DILocation(line: 458, column: 21, scope: !7423)
!7423 = !DILexicalBlockFile(scope: !7424, file: !1012, discriminator: 1)
!7424 = distinct !DILexicalBlock(scope: !7420, file: !1012, line: 458, column: 9)
!7425 = !DILocation(line: 458, column: 25, scope: !7423)
!7426 = !DILocation(line: 458, column: 23, scope: !7423)
!7427 = !DILocation(line: 458, column: 9, scope: !7423)
!7428 = !DILocation(line: 461, column: 47, scope: !7429)
!7429 = distinct !DILexicalBlock(scope: !7424, file: !1012, line: 458, column: 33)
!7430 = !DILocation(line: 461, column: 50, scope: !7429)
!7431 = !DILocation(line: 461, column: 36, scope: !7429)
!7432 = !DILocation(line: 461, column: 31, scope: !7429)
!7433 = !DILocation(line: 461, column: 13, scope: !7429)
!7434 = !DILocation(line: 461, column: 16, scope: !7429)
!7435 = !DILocation(line: 461, column: 34, scope: !7429)
!7436 = !DILocation(line: 464, column: 18, scope: !7437)
!7437 = distinct !DILexicalBlock(scope: !7429, file: !1012, line: 464, column: 17)
!7438 = !DILocation(line: 464, column: 21, scope: !7437)
!7439 = !DILocation(line: 464, column: 32, scope: !7437)
!7440 = !DILocation(line: 464, column: 53, scope: !7441)
!7441 = !DILexicalBlockFile(scope: !7437, file: !1012, discriminator: 1)
!7442 = !DILocation(line: 464, column: 35, scope: !7441)
!7443 = !DILocation(line: 464, column: 38, scope: !7441)
!7444 = !DILocation(line: 464, column: 56, scope: !7441)
!7445 = !DILocation(line: 464, column: 70, scope: !7446)
!7446 = !DILexicalBlockFile(scope: !7437, file: !1012, discriminator: 2)
!7447 = !DILocation(line: 464, column: 73, scope: !7446)
!7448 = !DILocation(line: 464, column: 59, scope: !7446)
!7449 = !DILocation(line: 464, column: 17, scope: !7446)
!7450 = !DILocation(line: 466, column: 58, scope: !7437)
!7451 = !DILocation(line: 466, column: 61, scope: !7437)
!7452 = !DILocation(line: 466, column: 65, scope: !7437)
!7453 = !DILocation(line: 466, column: 68, scope: !7437)
!7454 = !DILocation(line: 466, column: 48, scope: !7437)
!7455 = !DILocation(line: 466, column: 76, scope: !7437)
!7456 = !DILocation(line: 466, column: 43, scope: !7437)
!7457 = !DILocation(line: 466, column: 17, scope: !7437)
!7458 = !DILocation(line: 466, column: 20, scope: !7437)
!7459 = !DILocation(line: 466, column: 46, scope: !7437)
!7460 = !DILocation(line: 469, column: 43, scope: !7437)
!7461 = !DILocation(line: 469, column: 17, scope: !7437)
!7462 = !DILocation(line: 469, column: 20, scope: !7437)
!7463 = !DILocation(line: 469, column: 46, scope: !7437)
!7464 = !DILocation(line: 470, column: 9, scope: !7429)
!7465 = !DILocation(line: 458, column: 29, scope: !7466)
!7466 = !DILexicalBlockFile(scope: !7424, file: !1012, discriminator: 2)
!7467 = !DILocation(line: 458, column: 9, scope: !7466)
!7468 = distinct !{!7468, !7469}
!7469 = !DILocation(line: 458, column: 9, scope: !7402)
!7470 = !DILocation(line: 473, column: 16, scope: !7471)
!7471 = distinct !DILexicalBlock(scope: !7402, file: !1012, line: 473, column: 9)
!7472 = !DILocation(line: 473, column: 14, scope: !7471)
!7473 = !DILocation(line: 473, column: 21, scope: !7474)
!7474 = !DILexicalBlockFile(scope: !7475, file: !1012, discriminator: 1)
!7475 = distinct !DILexicalBlock(scope: !7471, file: !1012, line: 473, column: 9)
!7476 = !DILocation(line: 473, column: 25, scope: !7474)
!7477 = !DILocation(line: 473, column: 23, scope: !7474)
!7478 = !DILocation(line: 473, column: 9, scope: !7474)
!7479 = !DILocation(line: 474, column: 17, scope: !7480)
!7480 = distinct !DILexicalBlock(scope: !7481, file: !1012, line: 474, column: 17)
!7481 = distinct !DILexicalBlock(scope: !7475, file: !1012, line: 473, column: 33)
!7482 = !DILocation(line: 474, column: 21, scope: !7480)
!7483 = !DILocation(line: 474, column: 17, scope: !7481)
!7484 = !DILocation(line: 476, column: 51, scope: !7485)
!7485 = distinct !DILexicalBlock(scope: !7480, file: !1012, line: 474, column: 27)
!7486 = !DILocation(line: 476, column: 54, scope: !7485)
!7487 = !DILocation(line: 476, column: 58, scope: !7485)
!7488 = !DILocation(line: 476, column: 61, scope: !7485)
!7489 = !DILocation(line: 476, column: 41, scope: !7485)
!7490 = !DILocation(line: 476, column: 36, scope: !7485)
!7491 = !DILocation(line: 476, column: 17, scope: !7485)
!7492 = !DILocation(line: 476, column: 20, scope: !7485)
!7493 = !DILocation(line: 476, column: 39, scope: !7485)
!7494 = !DILocation(line: 479, column: 40, scope: !7495)
!7495 = distinct !DILexicalBlock(scope: !7485, file: !1012, line: 479, column: 21)
!7496 = !DILocation(line: 479, column: 22, scope: !7495)
!7497 = !DILocation(line: 479, column: 25, scope: !7495)
!7498 = !DILocation(line: 479, column: 43, scope: !7495)
!7499 = !DILocation(line: 479, column: 65, scope: !7500)
!7500 = !DILexicalBlockFile(scope: !7495, file: !1012, discriminator: 1)
!7501 = !DILocation(line: 479, column: 46, scope: !7500)
!7502 = !DILocation(line: 479, column: 49, scope: !7500)
!7503 = !DILocation(line: 479, column: 21, scope: !7500)
!7504 = !DILocation(line: 480, column: 40, scope: !7495)
!7505 = !DILocation(line: 480, column: 21, scope: !7495)
!7506 = !DILocation(line: 480, column: 24, scope: !7495)
!7507 = !DILocation(line: 480, column: 42, scope: !7495)
!7508 = !DILocation(line: 482, column: 22, scope: !7509)
!7509 = distinct !DILexicalBlock(scope: !7485, file: !1012, line: 482, column: 21)
!7510 = !DILocation(line: 482, column: 25, scope: !7509)
!7511 = !DILocation(line: 482, column: 21, scope: !7485)
!7512 = !DILocation(line: 483, column: 65, scope: !7509)
!7513 = !DILocation(line: 483, column: 45, scope: !7509)
!7514 = !DILocation(line: 483, column: 48, scope: !7509)
!7515 = !DILocation(line: 483, column: 40, scope: !7509)
!7516 = !DILocation(line: 483, column: 21, scope: !7509)
!7517 = !DILocation(line: 483, column: 24, scope: !7509)
!7518 = !DILocation(line: 483, column: 43, scope: !7509)
!7519 = !DILocation(line: 485, column: 45, scope: !7509)
!7520 = !DILocation(line: 485, column: 48, scope: !7509)
!7521 = !DILocation(line: 485, column: 40, scope: !7509)
!7522 = !DILocation(line: 485, column: 21, scope: !7509)
!7523 = !DILocation(line: 485, column: 24, scope: !7509)
!7524 = !DILocation(line: 485, column: 43, scope: !7509)
!7525 = !DILocation(line: 486, column: 13, scope: !7485)
!7526 = !DILocation(line: 487, column: 36, scope: !7527)
!7527 = distinct !DILexicalBlock(scope: !7480, file: !1012, line: 486, column: 20)
!7528 = !DILocation(line: 487, column: 17, scope: !7527)
!7529 = !DILocation(line: 487, column: 20, scope: !7527)
!7530 = !DILocation(line: 487, column: 39, scope: !7527)
!7531 = !DILocation(line: 488, column: 36, scope: !7527)
!7532 = !DILocation(line: 488, column: 17, scope: !7527)
!7533 = !DILocation(line: 488, column: 20, scope: !7527)
!7534 = !DILocation(line: 488, column: 39, scope: !7527)
!7535 = !DILocation(line: 492, column: 47, scope: !7481)
!7536 = !DILocation(line: 492, column: 50, scope: !7481)
!7537 = !DILocation(line: 492, column: 54, scope: !7481)
!7538 = !DILocation(line: 492, column: 57, scope: !7481)
!7539 = !DILocation(line: 492, column: 37, scope: !7481)
!7540 = !DILocation(line: 492, column: 32, scope: !7481)
!7541 = !DILocation(line: 492, column: 13, scope: !7481)
!7542 = !DILocation(line: 492, column: 16, scope: !7481)
!7543 = !DILocation(line: 492, column: 35, scope: !7481)
!7544 = !DILocation(line: 495, column: 36, scope: !7545)
!7545 = distinct !DILexicalBlock(scope: !7481, file: !1012, line: 495, column: 17)
!7546 = !DILocation(line: 495, column: 18, scope: !7545)
!7547 = !DILocation(line: 495, column: 21, scope: !7545)
!7548 = !DILocation(line: 495, column: 39, scope: !7545)
!7549 = !DILocation(line: 495, column: 61, scope: !7550)
!7550 = !DILexicalBlockFile(scope: !7545, file: !1012, discriminator: 1)
!7551 = !DILocation(line: 495, column: 42, scope: !7550)
!7552 = !DILocation(line: 495, column: 45, scope: !7550)
!7553 = !DILocation(line: 495, column: 17, scope: !7550)
!7554 = !DILocation(line: 496, column: 36, scope: !7545)
!7555 = !DILocation(line: 496, column: 17, scope: !7545)
!7556 = !DILocation(line: 496, column: 20, scope: !7545)
!7557 = !DILocation(line: 496, column: 38, scope: !7545)
!7558 = !DILocation(line: 497, column: 9, scope: !7481)
!7559 = !DILocation(line: 473, column: 29, scope: !7560)
!7560 = !DILexicalBlockFile(scope: !7475, file: !1012, discriminator: 2)
!7561 = !DILocation(line: 473, column: 9, scope: !7560)
!7562 = distinct !{!7562, !7563}
!7563 = !DILocation(line: 473, column: 9, scope: !7402)
!7564 = !DILocation(line: 498, column: 5, scope: !7402)
!7565 = !DILocation(line: 501, column: 12, scope: !7566)
!7566 = distinct !DILexicalBlock(scope: !7369, file: !1012, line: 501, column: 5)
!7567 = !DILocation(line: 501, column: 10, scope: !7566)
!7568 = !DILocation(line: 501, column: 17, scope: !7569)
!7569 = !DILexicalBlockFile(scope: !7570, file: !1012, discriminator: 1)
!7570 = distinct !DILexicalBlock(scope: !7566, file: !1012, line: 501, column: 5)
!7571 = !DILocation(line: 501, column: 21, scope: !7569)
!7572 = !DILocation(line: 501, column: 24, scope: !7569)
!7573 = !DILocation(line: 501, column: 19, scope: !7569)
!7574 = !DILocation(line: 501, column: 5, scope: !7569)
!7575 = !DILocalVariable(name: "part_a", scope: !7576, file: !1012, line: 502, type: !994)
!7576 = distinct !DILexicalBlock(scope: !7570, file: !1012, line: 501, column: 40)
!7577 = !DILocation(line: 502, column: 18, scope: !7576)
!7578 = !DILocalVariable(name: "part_b", scope: !7576, file: !1012, line: 502, type: !994)
!7579 = !DILocation(line: 502, column: 27, scope: !7576)
!7580 = !DILocalVariable(name: "nsamples_part_b", scope: !7576, file: !1012, line: 503, type: !996)
!7581 = !DILocation(line: 503, column: 13, scope: !7576)
!7582 = !DILocation(line: 506, column: 13, scope: !7576)
!7583 = !DILocation(line: 506, column: 16, scope: !7576)
!7584 = !DILocation(line: 506, column: 13, scope: !7585)
!7585 = !DILexicalBlockFile(scope: !7576, file: !1012, discriminator: 1)
!7586 = !DILocation(line: 506, column: 33, scope: !7587)
!7587 = !DILexicalBlockFile(scope: !7576, file: !1012, discriminator: 2)
!7588 = !DILocation(line: 506, column: 13, scope: !7587)
!7589 = !DILocation(line: 506, column: 13, scope: !7590)
!7590 = !DILexicalBlockFile(scope: !7576, file: !1012, discriminator: 3)
!7591 = !DILocation(line: 506, column: 11, scope: !7590)
!7592 = !DILocation(line: 509, column: 39, scope: !7576)
!7593 = !DILocation(line: 509, column: 18, scope: !7576)
!7594 = !DILocation(line: 509, column: 21, scope: !7576)
!7595 = !DILocation(line: 509, column: 44, scope: !7576)
!7596 = !DILocation(line: 509, column: 50, scope: !7576)
!7597 = !DILocation(line: 509, column: 53, scope: !7576)
!7598 = !DILocation(line: 509, column: 48, scope: !7576)
!7599 = !DILocation(line: 509, column: 42, scope: !7576)
!7600 = !DILocation(line: 509, column: 16, scope: !7576)
!7601 = !DILocation(line: 510, column: 18, scope: !7576)
!7602 = !DILocation(line: 510, column: 46, scope: !7576)
!7603 = !DILocation(line: 510, column: 27, scope: !7576)
!7604 = !DILocation(line: 510, column: 30, scope: !7576)
!7605 = !DILocation(line: 510, column: 25, scope: !7576)
!7606 = !DILocation(line: 510, column: 16, scope: !7576)
!7607 = !DILocation(line: 511, column: 27, scope: !7576)
!7608 = !DILocation(line: 511, column: 30, scope: !7576)
!7609 = !DILocation(line: 511, column: 63, scope: !7576)
!7610 = !DILocation(line: 511, column: 44, scope: !7576)
!7611 = !DILocation(line: 511, column: 47, scope: !7576)
!7612 = !DILocation(line: 511, column: 42, scope: !7576)
!7613 = !DILocation(line: 511, column: 25, scope: !7576)
!7614 = !DILocation(line: 513, column: 28, scope: !7615)
!7615 = distinct !DILexicalBlock(scope: !7576, file: !1012, line: 513, column: 13)
!7616 = !DILocation(line: 513, column: 31, scope: !7615)
!7617 = !DILocation(line: 513, column: 13, scope: !7615)
!7618 = !DILocation(line: 513, column: 35, scope: !7615)
!7619 = !DILocation(line: 513, column: 13, scope: !7576)
!7620 = !DILocation(line: 514, column: 13, scope: !7615)
!7621 = !DILocation(line: 516, column: 32, scope: !7622)
!7622 = distinct !DILexicalBlock(scope: !7576, file: !1012, line: 516, column: 13)
!7623 = !DILocation(line: 516, column: 14, scope: !7622)
!7624 = !DILocation(line: 516, column: 17, scope: !7622)
!7625 = !DILocation(line: 516, column: 13, scope: !7576)
!7626 = !DILocation(line: 519, column: 31, scope: !7627)
!7627 = distinct !DILexicalBlock(scope: !7622, file: !1012, line: 516, column: 36)
!7628 = !DILocation(line: 519, column: 34, scope: !7627)
!7629 = !DILocation(line: 519, column: 38, scope: !7627)
!7630 = !DILocation(line: 519, column: 65, scope: !7627)
!7631 = !DILocation(line: 519, column: 46, scope: !7627)
!7632 = !DILocation(line: 519, column: 49, scope: !7627)
!7633 = !DILocation(line: 520, column: 49, scope: !7627)
!7634 = !DILocation(line: 520, column: 30, scope: !7627)
!7635 = !DILocation(line: 520, column: 33, scope: !7627)
!7636 = !DILocation(line: 519, column: 13, scope: !7627)
!7637 = !DILocation(line: 523, column: 31, scope: !7627)
!7638 = !DILocation(line: 523, column: 34, scope: !7627)
!7639 = !DILocation(line: 523, column: 38, scope: !7627)
!7640 = !DILocation(line: 523, column: 46, scope: !7627)
!7641 = !DILocation(line: 524, column: 49, scope: !7627)
!7642 = !DILocation(line: 524, column: 30, scope: !7627)
!7643 = !DILocation(line: 524, column: 33, scope: !7627)
!7644 = !DILocation(line: 523, column: 13, scope: !7627)
!7645 = !DILocation(line: 525, column: 9, scope: !7627)
!7646 = !DILocation(line: 528, column: 29, scope: !7647)
!7647 = distinct !DILexicalBlock(scope: !7622, file: !1012, line: 525, column: 16)
!7648 = !DILocation(line: 528, column: 32, scope: !7647)
!7649 = !DILocation(line: 528, column: 36, scope: !7647)
!7650 = !DILocation(line: 528, column: 63, scope: !7647)
!7651 = !DILocation(line: 528, column: 44, scope: !7647)
!7652 = !DILocation(line: 528, column: 47, scope: !7647)
!7653 = !DILocation(line: 529, column: 47, scope: !7647)
!7654 = !DILocation(line: 529, column: 28, scope: !7647)
!7655 = !DILocation(line: 529, column: 31, scope: !7647)
!7656 = !DILocation(line: 528, column: 13, scope: !7647)
!7657 = !DILocation(line: 531, column: 43, scope: !7658)
!7658 = distinct !DILexicalBlock(scope: !7647, file: !1012, line: 531, column: 17)
!7659 = !DILocation(line: 531, column: 17, scope: !7658)
!7660 = !DILocation(line: 531, column: 20, scope: !7658)
!7661 = !DILocation(line: 531, column: 17, scope: !7647)
!7662 = !DILocalVariable(name: "nisosamples", scope: !7663, file: !1012, line: 534, type: !996)
!7663 = distinct !DILexicalBlock(scope: !7658, file: !1012, line: 531, column: 47)
!7664 = !DILocation(line: 534, column: 21, scope: !7663)
!7665 = !DILocation(line: 534, column: 45, scope: !7663)
!7666 = !DILocation(line: 534, column: 48, scope: !7663)
!7667 = !DILocation(line: 534, column: 52, scope: !7663)
!7668 = !DILocation(line: 534, column: 55, scope: !7663)
!7669 = !DILocation(line: 534, column: 35, scope: !7663)
!7670 = !DILocation(line: 537, column: 24, scope: !7663)
!7671 = !DILocation(line: 537, column: 17, scope: !7663)
!7672 = !DILocation(line: 537, column: 53, scope: !7663)
!7673 = !DILocation(line: 537, column: 51, scope: !7663)
!7674 = !DILocation(line: 540, column: 24, scope: !7675)
!7675 = distinct !DILexicalBlock(scope: !7663, file: !1012, line: 540, column: 17)
!7676 = !DILocation(line: 540, column: 22, scope: !7675)
!7677 = !DILocation(line: 540, column: 29, scope: !7678)
!7678 = !DILexicalBlockFile(scope: !7679, file: !1012, discriminator: 1)
!7679 = distinct !DILexicalBlock(scope: !7675, file: !1012, line: 540, column: 17)
!7680 = !DILocation(line: 540, column: 33, scope: !7678)
!7681 = !DILocation(line: 540, column: 31, scope: !7678)
!7682 = !DILocation(line: 540, column: 17, scope: !7678)
!7683 = !DILocalVariable(name: "loc", scope: !7684, file: !1012, line: 541, type: !996)
!7684 = distinct !DILexicalBlock(scope: !7679, file: !1012, line: 540, column: 51)
!7685 = !DILocation(line: 541, column: 25, scope: !7684)
!7686 = !DILocation(line: 541, column: 41, scope: !7684)
!7687 = !DILocation(line: 541, column: 44, scope: !7684)
!7688 = !DILocation(line: 541, column: 48, scope: !7684)
!7689 = !DILocation(line: 541, column: 51, scope: !7684)
!7690 = !DILocation(line: 541, column: 31, scope: !7684)
!7691 = !DILocation(line: 542, column: 25, scope: !7692)
!7692 = distinct !DILexicalBlock(scope: !7684, file: !1012, line: 542, column: 25)
!7693 = !DILocation(line: 542, column: 32, scope: !7692)
!7694 = !DILocation(line: 542, column: 29, scope: !7692)
!7695 = !DILocation(line: 542, column: 25, scope: !7684)
!7696 = !DILocation(line: 543, column: 32, scope: !7697)
!7697 = distinct !DILexicalBlock(scope: !7692, file: !1012, line: 542, column: 49)
!7698 = !DILocation(line: 543, column: 35, scope: !7697)
!7699 = !DILocation(line: 543, column: 25, scope: !7697)
!7700 = !DILocation(line: 544, column: 25, scope: !7697)
!7701 = !DILocation(line: 546, column: 28, scope: !7684)
!7702 = !DILocation(line: 546, column: 21, scope: !7684)
!7703 = !DILocation(line: 546, column: 33, scope: !7684)
!7704 = !DILocation(line: 547, column: 17, scope: !7684)
!7705 = !DILocation(line: 540, column: 47, scope: !7706)
!7706 = !DILexicalBlockFile(scope: !7679, file: !1012, discriminator: 2)
!7707 = !DILocation(line: 540, column: 17, scope: !7706)
!7708 = distinct !{!7708, !7709}
!7709 = !DILocation(line: 540, column: 17, scope: !7663)
!7710 = !DILocation(line: 550, column: 24, scope: !7711)
!7711 = distinct !DILexicalBlock(scope: !7663, file: !1012, line: 550, column: 17)
!7712 = !DILocation(line: 550, column: 22, scope: !7711)
!7713 = !DILocation(line: 550, column: 29, scope: !7714)
!7714 = !DILexicalBlockFile(scope: !7715, file: !1012, discriminator: 1)
!7715 = distinct !DILexicalBlock(scope: !7711, file: !1012, line: 550, column: 17)
!7716 = !DILocation(line: 550, column: 33, scope: !7714)
!7717 = !DILocation(line: 550, column: 31, scope: !7714)
!7718 = !DILocation(line: 550, column: 17, scope: !7714)
!7719 = !DILocation(line: 551, column: 32, scope: !7720)
!7720 = distinct !DILexicalBlock(scope: !7721, file: !1012, line: 551, column: 25)
!7721 = distinct !DILexicalBlock(scope: !7715, file: !1012, line: 550, column: 55)
!7722 = !DILocation(line: 551, column: 25, scope: !7720)
!7723 = !DILocation(line: 551, column: 25, scope: !7721)
!7724 = !DILocation(line: 552, column: 49, scope: !7720)
!7725 = !DILocation(line: 552, column: 52, scope: !7720)
!7726 = !DILocation(line: 552, column: 82, scope: !7720)
!7727 = !DILocation(line: 552, column: 56, scope: !7720)
!7728 = !DILocation(line: 552, column: 59, scope: !7720)
!7729 = !DILocation(line: 552, column: 37, scope: !7720)
!7730 = !DILocation(line: 552, column: 32, scope: !7720)
!7731 = !DILocation(line: 552, column: 25, scope: !7720)
!7732 = !DILocation(line: 552, column: 35, scope: !7720)
!7733 = !DILocation(line: 554, column: 47, scope: !7720)
!7734 = !DILocation(line: 554, column: 50, scope: !7720)
!7735 = !DILocation(line: 554, column: 73, scope: !7720)
!7736 = !DILocation(line: 554, column: 54, scope: !7720)
!7737 = !DILocation(line: 554, column: 57, scope: !7720)
!7738 = !DILocation(line: 554, column: 37, scope: !7720)
!7739 = !DILocation(line: 554, column: 32, scope: !7720)
!7740 = !DILocation(line: 554, column: 25, scope: !7720)
!7741 = !DILocation(line: 554, column: 35, scope: !7720)
!7742 = !DILocation(line: 555, column: 17, scope: !7721)
!7743 = !DILocation(line: 550, column: 51, scope: !7744)
!7744 = !DILexicalBlockFile(scope: !7715, file: !1012, discriminator: 2)
!7745 = !DILocation(line: 550, column: 17, scope: !7744)
!7746 = distinct !{!7746, !7747}
!7747 = !DILocation(line: 550, column: 17, scope: !7663)
!7748 = !DILocation(line: 556, column: 13, scope: !7663)
!7749 = !DILocation(line: 559, column: 33, scope: !7750)
!7750 = distinct !DILexicalBlock(scope: !7658, file: !1012, line: 556, column: 20)
!7751 = !DILocation(line: 559, column: 36, scope: !7750)
!7752 = !DILocation(line: 559, column: 40, scope: !7750)
!7753 = !DILocation(line: 559, column: 48, scope: !7750)
!7754 = !DILocation(line: 559, column: 84, scope: !7750)
!7755 = !DILocation(line: 559, column: 65, scope: !7750)
!7756 = !DILocation(line: 559, column: 68, scope: !7750)
!7757 = !DILocation(line: 559, column: 17, scope: !7750)
!7758 = !DILocation(line: 562, column: 5, scope: !7576)
!7759 = !DILocation(line: 501, column: 36, scope: !7760)
!7760 = !DILexicalBlockFile(scope: !7570, file: !1012, discriminator: 2)
!7761 = !DILocation(line: 501, column: 5, scope: !7760)
!7762 = distinct !{!7762, !7763}
!7763 = !DILocation(line: 501, column: 5, scope: !7369)
!7764 = !DILocation(line: 565, column: 9, scope: !7765)
!7765 = distinct !DILexicalBlock(scope: !7369, file: !1012, line: 565, column: 9)
!7766 = !DILocation(line: 565, column: 13, scope: !7765)
!7767 = !DILocation(line: 565, column: 18, scope: !7765)
!7768 = !DILocation(line: 565, column: 21, scope: !7769)
!7769 = !DILexicalBlockFile(scope: !7765, file: !1012, discriminator: 1)
!7770 = !DILocation(line: 565, column: 26, scope: !7769)
!7771 = !DILocation(line: 565, column: 9, scope: !7769)
!7772 = !DILocalVariable(name: "nbits", scope: !7773, file: !1012, line: 566, type: !996)
!7773 = distinct !DILexicalBlock(scope: !7765, file: !1012, line: 565, column: 32)
!7774 = !DILocation(line: 566, column: 13, scope: !7773)
!7775 = !DILocation(line: 566, column: 31, scope: !7773)
!7776 = !DILocation(line: 566, column: 34, scope: !7773)
!7777 = !DILocation(line: 566, column: 21, scope: !7773)
!7778 = !DILocation(line: 566, column: 41, scope: !7773)
!7779 = !DILocation(line: 567, column: 16, scope: !7780)
!7780 = distinct !DILexicalBlock(scope: !7773, file: !1012, line: 567, column: 9)
!7781 = !DILocation(line: 567, column: 14, scope: !7780)
!7782 = !DILocation(line: 567, column: 21, scope: !7783)
!7783 = !DILexicalBlockFile(scope: !7784, file: !1012, discriminator: 1)
!7784 = distinct !DILexicalBlock(scope: !7780, file: !1012, line: 567, column: 9)
!7785 = !DILocation(line: 567, column: 25, scope: !7783)
!7786 = !DILocation(line: 567, column: 28, scope: !7783)
!7787 = !DILocation(line: 567, column: 23, scope: !7783)
!7788 = !DILocation(line: 567, column: 9, scope: !7783)
!7789 = !DILocation(line: 568, column: 20, scope: !7790)
!7790 = distinct !DILexicalBlock(scope: !7784, file: !1012, line: 568, column: 13)
!7791 = !DILocation(line: 568, column: 18, scope: !7790)
!7792 = !DILocation(line: 568, column: 25, scope: !7793)
!7793 = !DILexicalBlockFile(scope: !7794, file: !1012, discriminator: 1)
!7794 = distinct !DILexicalBlock(scope: !7790, file: !1012, line: 568, column: 13)
!7795 = !DILocation(line: 568, column: 27, scope: !7793)
!7796 = !DILocation(line: 568, column: 13, scope: !7793)
!7797 = !DILocation(line: 569, column: 57, scope: !7794)
!7798 = !DILocation(line: 569, column: 60, scope: !7794)
!7799 = !DILocation(line: 569, column: 64, scope: !7794)
!7800 = !DILocation(line: 569, column: 41, scope: !7794)
!7801 = !DILocation(line: 569, column: 36, scope: !7794)
!7802 = !DILocation(line: 569, column: 17, scope: !7794)
!7803 = !DILocation(line: 569, column: 33, scope: !7794)
!7804 = !DILocation(line: 569, column: 20, scope: !7794)
!7805 = !DILocation(line: 569, column: 39, scope: !7794)
!7806 = !DILocation(line: 568, column: 33, scope: !7807)
!7807 = !DILexicalBlockFile(scope: !7794, file: !1012, discriminator: 2)
!7808 = !DILocation(line: 568, column: 13, scope: !7807)
!7809 = distinct !{!7809, !7810}
!7810 = !DILocation(line: 568, column: 13, scope: !7784)
!7811 = !DILocation(line: 569, column: 69, scope: !7812)
!7812 = !DILexicalBlockFile(scope: !7790, file: !1012, discriminator: 1)
!7813 = !DILocation(line: 567, column: 40, scope: !7814)
!7814 = !DILexicalBlockFile(scope: !7784, file: !1012, discriminator: 2)
!7815 = !DILocation(line: 567, column: 9, scope: !7814)
!7816 = distinct !{!7816, !7817}
!7817 = !DILocation(line: 567, column: 9, scope: !7773)
!7818 = !DILocation(line: 570, column: 5, scope: !7773)
!7819 = !DILocation(line: 573, column: 9, scope: !7820)
!7820 = distinct !DILexicalBlock(scope: !7369, file: !1012, line: 573, column: 9)
!7821 = !DILocation(line: 573, column: 12, scope: !7820)
!7822 = !DILocation(line: 573, column: 9, scope: !7369)
!7823 = !DILocation(line: 575, column: 31, scope: !7824)
!7824 = distinct !DILexicalBlock(scope: !7825, file: !1012, line: 575, column: 13)
!7825 = distinct !DILexicalBlock(scope: !7820, file: !1012, line: 573, column: 30)
!7826 = !DILocation(line: 575, column: 34, scope: !7824)
!7827 = !DILocation(line: 575, column: 38, scope: !7824)
!7828 = !DILocation(line: 575, column: 54, scope: !7824)
!7829 = !DILocation(line: 575, column: 57, scope: !7824)
!7830 = !DILocation(line: 575, column: 74, scope: !7824)
!7831 = !DILocation(line: 575, column: 52, scope: !7824)
!7832 = !DILocation(line: 575, column: 13, scope: !7824)
!7833 = !DILocation(line: 575, column: 13, scope: !7825)
!7834 = !DILocation(line: 576, column: 20, scope: !7835)
!7835 = distinct !DILexicalBlock(scope: !7824, file: !1012, line: 575, column: 80)
!7836 = !DILocation(line: 576, column: 23, scope: !7835)
!7837 = !DILocation(line: 576, column: 13, scope: !7835)
!7838 = !DILocation(line: 577, column: 13, scope: !7835)
!7839 = !DILocation(line: 581, column: 16, scope: !7840)
!7840 = distinct !DILexicalBlock(scope: !7825, file: !1012, line: 581, column: 9)
!7841 = !DILocation(line: 581, column: 14, scope: !7840)
!7842 = !DILocation(line: 581, column: 21, scope: !7843)
!7843 = !DILexicalBlockFile(scope: !7844, file: !1012, discriminator: 1)
!7844 = distinct !DILexicalBlock(scope: !7840, file: !1012, line: 581, column: 9)
!7845 = !DILocation(line: 581, column: 25, scope: !7843)
!7846 = !DILocation(line: 581, column: 28, scope: !7843)
!7847 = !DILocation(line: 581, column: 23, scope: !7843)
!7848 = !DILocation(line: 581, column: 9, scope: !7843)
!7849 = !DILocation(line: 582, column: 34, scope: !7850)
!7850 = distinct !DILexicalBlock(scope: !7851, file: !1012, line: 582, column: 17)
!7851 = distinct !DILexicalBlock(scope: !7844, file: !1012, line: 581, column: 44)
!7852 = !DILocation(line: 582, column: 17, scope: !7850)
!7853 = !DILocation(line: 582, column: 20, scope: !7850)
!7854 = !DILocation(line: 582, column: 17, scope: !7851)
!7855 = !DILocation(line: 583, column: 28, scope: !7856)
!7856 = distinct !DILexicalBlock(scope: !7850, file: !1012, line: 582, column: 38)
!7857 = !DILocation(line: 583, column: 31, scope: !7856)
!7858 = !DILocation(line: 584, column: 48, scope: !7856)
!7859 = !DILocation(line: 584, column: 27, scope: !7856)
!7860 = !DILocation(line: 584, column: 30, scope: !7856)
!7861 = !DILocation(line: 584, column: 53, scope: !7856)
!7862 = !DILocation(line: 584, column: 59, scope: !7856)
!7863 = !DILocation(line: 584, column: 62, scope: !7856)
!7864 = !DILocation(line: 584, column: 57, scope: !7856)
!7865 = !DILocation(line: 584, column: 51, scope: !7856)
!7866 = !DILocation(line: 585, column: 27, scope: !7856)
!7867 = !DILocation(line: 585, column: 30, scope: !7856)
!7868 = !DILocation(line: 585, column: 60, scope: !7856)
!7869 = !DILocation(line: 585, column: 43, scope: !7856)
!7870 = !DILocation(line: 585, column: 46, scope: !7856)
!7871 = !DILocation(line: 583, column: 17, scope: !7856)
!7872 = !DILocation(line: 586, column: 13, scope: !7856)
!7873 = !DILocation(line: 587, column: 9, scope: !7851)
!7874 = !DILocation(line: 581, column: 40, scope: !7875)
!7875 = !DILexicalBlockFile(scope: !7844, file: !1012, discriminator: 2)
!7876 = !DILocation(line: 581, column: 9, scope: !7875)
!7877 = distinct !{!7877, !7878}
!7878 = !DILocation(line: 581, column: 9, scope: !7825)
!7879 = !DILocation(line: 588, column: 5, scope: !7825)
!7880 = !DILocation(line: 591, column: 27, scope: !7881)
!7881 = distinct !DILexicalBlock(scope: !7369, file: !1012, line: 591, column: 9)
!7882 = !DILocation(line: 591, column: 30, scope: !7881)
!7883 = !DILocation(line: 591, column: 34, scope: !7881)
!7884 = !DILocation(line: 591, column: 9, scope: !7881)
!7885 = !DILocation(line: 591, column: 9, scope: !7369)
!7886 = !DILocation(line: 592, column: 16, scope: !7887)
!7887 = distinct !DILexicalBlock(scope: !7881, file: !1012, line: 591, column: 50)
!7888 = !DILocation(line: 592, column: 19, scope: !7887)
!7889 = !DILocation(line: 592, column: 9, scope: !7887)
!7890 = !DILocation(line: 593, column: 9, scope: !7887)
!7891 = !DILocation(line: 596, column: 5, scope: !7369)
!7892 = !DILocation(line: 597, column: 1, scope: !7369)
!7893 = distinct !DISubprogram(name: "chs_clear_band_data", scope: !1012, file: !1012, line: 599, type: !7894, isLocal: true, isDefinition: true, scopeLine: 600, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!7894 = !DISubroutineType(types: !7895)
!7895 = !{null, !1015, !2698, !996, !996}
!7896 = !DILocalVariable(name: "s", arg: 1, scope: !7893, file: !1012, line: 599, type: !1015)
!7897 = !DILocation(line: 599, column: 70, scope: !7893)
!7898 = !DILocalVariable(name: "c", arg: 2, scope: !7893, file: !1012, line: 599, type: !2698)
!7899 = !DILocation(line: 599, column: 86, scope: !7893)
!7900 = !DILocalVariable(name: "band", arg: 3, scope: !7893, file: !1012, line: 599, type: !996)
!7901 = !DILocation(line: 599, column: 93, scope: !7893)
!7902 = !DILocalVariable(name: "seg", arg: 4, scope: !7893, file: !1012, line: 599, type: !996)
!7903 = !DILocation(line: 599, column: 103, scope: !7893)
!7904 = !DILocalVariable(name: "b", scope: !7893, file: !1012, line: 601, type: !3354)
!7905 = !DILocation(line: 601, column: 17, scope: !7893)
!7906 = !DILocation(line: 601, column: 31, scope: !7893)
!7907 = !DILocation(line: 601, column: 22, scope: !7893)
!7908 = !DILocation(line: 601, column: 25, scope: !7893)
!7909 = !DILocalVariable(name: "i", scope: !7893, file: !1012, line: 602, type: !996)
!7910 = !DILocation(line: 602, column: 9, scope: !7893)
!7911 = !DILocalVariable(name: "offset", scope: !7893, file: !1012, line: 602, type: !996)
!7912 = !DILocation(line: 602, column: 12, scope: !7893)
!7913 = !DILocalVariable(name: "nsamples", scope: !7893, file: !1012, line: 602, type: !996)
!7914 = !DILocation(line: 602, column: 20, scope: !7893)
!7915 = !DILocation(line: 604, column: 9, scope: !7916)
!7916 = distinct !DILexicalBlock(scope: !7893, file: !1012, line: 604, column: 9)
!7917 = !DILocation(line: 604, column: 13, scope: !7916)
!7918 = !DILocation(line: 604, column: 9, scope: !7893)
!7919 = !DILocation(line: 605, column: 16, scope: !7920)
!7920 = distinct !DILexicalBlock(scope: !7916, file: !1012, line: 604, column: 18)
!7921 = !DILocation(line: 606, column: 20, scope: !7920)
!7922 = !DILocation(line: 606, column: 23, scope: !7920)
!7923 = !DILocation(line: 606, column: 18, scope: !7920)
!7924 = !DILocation(line: 607, column: 5, scope: !7920)
!7925 = !DILocation(line: 608, column: 18, scope: !7926)
!7926 = distinct !DILexicalBlock(scope: !7916, file: !1012, line: 607, column: 12)
!7927 = !DILocation(line: 608, column: 24, scope: !7926)
!7928 = !DILocation(line: 608, column: 27, scope: !7926)
!7929 = !DILocation(line: 608, column: 22, scope: !7926)
!7930 = !DILocation(line: 608, column: 16, scope: !7926)
!7931 = !DILocation(line: 609, column: 20, scope: !7926)
!7932 = !DILocation(line: 609, column: 23, scope: !7926)
!7933 = !DILocation(line: 609, column: 18, scope: !7926)
!7934 = !DILocation(line: 612, column: 12, scope: !7935)
!7935 = distinct !DILexicalBlock(scope: !7893, file: !1012, line: 612, column: 5)
!7936 = !DILocation(line: 612, column: 10, scope: !7935)
!7937 = !DILocation(line: 612, column: 17, scope: !7938)
!7938 = !DILexicalBlockFile(scope: !7939, file: !1012, discriminator: 1)
!7939 = distinct !DILexicalBlock(scope: !7935, file: !1012, line: 612, column: 5)
!7940 = !DILocation(line: 612, column: 21, scope: !7938)
!7941 = !DILocation(line: 612, column: 24, scope: !7938)
!7942 = !DILocation(line: 612, column: 19, scope: !7938)
!7943 = !DILocation(line: 612, column: 5, scope: !7938)
!7944 = !DILocation(line: 613, column: 37, scope: !7945)
!7945 = distinct !DILexicalBlock(scope: !7939, file: !1012, line: 612, column: 40)
!7946 = !DILocation(line: 613, column: 16, scope: !7945)
!7947 = !DILocation(line: 613, column: 19, scope: !7945)
!7948 = !DILocation(line: 613, column: 42, scope: !7945)
!7949 = !DILocation(line: 613, column: 40, scope: !7945)
!7950 = !DILocation(line: 613, column: 9, scope: !7945)
!7951 = !DILocation(line: 613, column: 53, scope: !7945)
!7952 = !DILocation(line: 613, column: 62, scope: !7945)
!7953 = !DILocation(line: 614, column: 13, scope: !7954)
!7954 = distinct !DILexicalBlock(scope: !7945, file: !1012, line: 614, column: 13)
!7955 = !DILocation(line: 614, column: 16, scope: !7954)
!7956 = !DILocation(line: 614, column: 13, scope: !7945)
!7957 = !DILocation(line: 615, column: 41, scope: !7954)
!7958 = !DILocation(line: 615, column: 20, scope: !7954)
!7959 = !DILocation(line: 615, column: 23, scope: !7954)
!7960 = !DILocation(line: 615, column: 46, scope: !7954)
!7961 = !DILocation(line: 615, column: 44, scope: !7954)
!7962 = !DILocation(line: 615, column: 13, scope: !7954)
!7963 = !DILocation(line: 615, column: 57, scope: !7954)
!7964 = !DILocation(line: 615, column: 66, scope: !7954)
!7965 = !DILocation(line: 616, column: 5, scope: !7945)
!7966 = !DILocation(line: 612, column: 36, scope: !7967)
!7967 = !DILexicalBlockFile(scope: !7939, file: !1012, discriminator: 2)
!7968 = !DILocation(line: 612, column: 5, scope: !7967)
!7969 = distinct !{!7969, !7970}
!7970 = !DILocation(line: 612, column: 5, scope: !7893)
!7971 = !DILocation(line: 618, column: 9, scope: !7972)
!7972 = distinct !DILexicalBlock(scope: !7893, file: !1012, line: 618, column: 9)
!7973 = !DILocation(line: 618, column: 13, scope: !7972)
!7974 = !DILocation(line: 618, column: 18, scope: !7972)
!7975 = !DILocation(line: 618, column: 21, scope: !7976)
!7976 = !DILexicalBlockFile(scope: !7972, file: !1012, discriminator: 1)
!7977 = !DILocation(line: 618, column: 9, scope: !7976)
!7978 = !DILocation(line: 619, column: 16, scope: !7972)
!7979 = !DILocation(line: 619, column: 19, scope: !7972)
!7980 = !DILocation(line: 619, column: 9, scope: !7972)
!7981 = !DILocation(line: 621, column: 9, scope: !7982)
!7982 = distinct !DILexicalBlock(scope: !7893, file: !1012, line: 621, column: 9)
!7983 = !DILocation(line: 621, column: 13, scope: !7982)
!7984 = !DILocation(line: 621, column: 9, scope: !7893)
!7985 = !DILocation(line: 622, column: 16, scope: !7986)
!7986 = distinct !DILexicalBlock(scope: !7982, file: !1012, line: 621, column: 18)
!7987 = !DILocation(line: 622, column: 19, scope: !7986)
!7988 = !DILocation(line: 622, column: 9, scope: !7986)
!7989 = !DILocation(line: 623, column: 16, scope: !7986)
!7990 = !DILocation(line: 623, column: 19, scope: !7986)
!7991 = !DILocation(line: 623, column: 9, scope: !7986)
!7992 = !DILocation(line: 624, column: 5, scope: !7986)
!7993 = !DILocation(line: 625, column: 1, scope: !7893)
!7994 = distinct !DISubprogram(name: "skip_bits_long", scope: !1747, file: !1747, line: 293, type: !7098, isLocal: true, isDefinition: true, scopeLine: 294, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!7995 = !DILocalVariable(name: "a", arg: 1, scope: !7996, file: !2311, line: 127, type: !996)
!7996 = distinct !DISubprogram(name: "av_clip_c", scope: !2311, file: !2311, line: 127, type: !7997, isLocal: true, isDefinition: true, scopeLine: 128, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!7997 = !DISubroutineType(types: !7998)
!7998 = !{!996, !996, !996, !996}
!7999 = !DILocation(line: 127, column: 87, scope: !7996, inlinedAt: !8000)
!8000 = distinct !DILocation(line: 301, column: 17, scope: !7994)
!8001 = !DILocalVariable(name: "amin", arg: 2, scope: !7996, file: !2311, line: 127, type: !996)
!8002 = !DILocation(line: 127, column: 94, scope: !7996, inlinedAt: !8000)
!8003 = !DILocalVariable(name: "amax", arg: 3, scope: !7996, file: !2311, line: 127, type: !996)
!8004 = !DILocation(line: 127, column: 104, scope: !7996, inlinedAt: !8000)
!8005 = !DILocalVariable(name: "s", arg: 1, scope: !7994, file: !1747, line: 293, type: !4570)
!8006 = !DILocation(line: 293, column: 50, scope: !7994)
!8007 = !DILocalVariable(name: "n", arg: 2, scope: !7994, file: !1747, line: 293, type: !996)
!8008 = !DILocation(line: 293, column: 57, scope: !7994)
!8009 = !DILocation(line: 301, column: 27, scope: !7994)
!8010 = !DILocation(line: 301, column: 31, scope: !7994)
!8011 = !DILocation(line: 301, column: 34, scope: !7994)
!8012 = !DILocation(line: 301, column: 30, scope: !7994)
!8013 = !DILocation(line: 301, column: 41, scope: !7994)
!8014 = !DILocation(line: 301, column: 44, scope: !7994)
!8015 = !DILocation(line: 301, column: 65, scope: !7994)
!8016 = !DILocation(line: 301, column: 68, scope: !7994)
!8017 = !DILocation(line: 301, column: 63, scope: !7994)
!8018 = !DILocation(line: 301, column: 17, scope: !7994)
!8019 = !DILocation(line: 132, column: 9, scope: !8020, inlinedAt: !8000)
!8020 = distinct !DILexicalBlock(scope: !7996, file: !2311, line: 132, column: 9)
!8021 = !DILocation(line: 132, column: 13, scope: !8020, inlinedAt: !8000)
!8022 = !DILocation(line: 132, column: 11, scope: !8020, inlinedAt: !8000)
!8023 = !DILocation(line: 132, column: 9, scope: !7996, inlinedAt: !8000)
!8024 = !DILocation(line: 132, column: 26, scope: !8025, inlinedAt: !8000)
!8025 = !DILexicalBlockFile(scope: !8020, file: !2311, discriminator: 1)
!8026 = !DILocation(line: 132, column: 19, scope: !8025, inlinedAt: !8000)
!8027 = !DILocation(line: 133, column: 14, scope: !8028, inlinedAt: !8000)
!8028 = distinct !DILexicalBlock(scope: !8020, file: !2311, line: 133, column: 14)
!8029 = !DILocation(line: 133, column: 18, scope: !8028, inlinedAt: !8000)
!8030 = !DILocation(line: 133, column: 16, scope: !8028, inlinedAt: !8000)
!8031 = !DILocation(line: 133, column: 14, scope: !8020, inlinedAt: !8000)
!8032 = !DILocation(line: 133, column: 31, scope: !8033, inlinedAt: !8000)
!8033 = !DILexicalBlockFile(scope: !8028, file: !2311, discriminator: 1)
!8034 = !DILocation(line: 133, column: 24, scope: !8033, inlinedAt: !8000)
!8035 = !DILocation(line: 134, column: 17, scope: !8028, inlinedAt: !8000)
!8036 = !DILocation(line: 134, column: 10, scope: !8028, inlinedAt: !8000)
!8037 = !DILocation(line: 135, column: 1, scope: !7996, inlinedAt: !8000)
!8038 = !DILocation(line: 301, column: 5, scope: !7994)
!8039 = !DILocation(line: 301, column: 8, scope: !7994)
!8040 = !DILocation(line: 301, column: 14, scope: !7994)
!8041 = !DILocation(line: 304, column: 1, scope: !7994)
!8042 = distinct !DISubprogram(name: "get_bits_left", scope: !1747, file: !1747, line: 814, type: !8043, isLocal: true, isDefinition: true, scopeLine: 815, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!8043 = !DISubroutineType(types: !8044)
!8044 = !{!996, !4570}
!8045 = !DILocalVariable(name: "gb", arg: 1, scope: !8042, file: !1747, line: 814, type: !4570)
!8046 = !DILocation(line: 814, column: 48, scope: !8042)
!8047 = !DILocation(line: 816, column: 12, scope: !8042)
!8048 = !DILocation(line: 816, column: 16, scope: !8042)
!8049 = !DILocation(line: 816, column: 46, scope: !8042)
!8050 = !DILocation(line: 816, column: 31, scope: !8042)
!8051 = !DILocation(line: 816, column: 29, scope: !8042)
!8052 = !DILocation(line: 816, column: 5, scope: !8042)
!8053 = distinct !DISubprogram(name: "get_linear_array", scope: !1012, file: !1012, line: 53, type: !8054, isLocal: true, isDefinition: true, scopeLine: 54, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!8054 = !DISubroutineType(types: !8055)
!8055 = !{null, !4570, !994, !996, !996}
!8056 = !DILocalVariable(name: "gb", arg: 1, scope: !8053, file: !1012, line: 53, type: !4570)
!8057 = !DILocation(line: 53, column: 45, scope: !8053)
!8058 = !DILocalVariable(name: "array", arg: 2, scope: !8053, file: !1012, line: 53, type: !994)
!8059 = !DILocation(line: 53, column: 58, scope: !8053)
!8060 = !DILocalVariable(name: "size", arg: 3, scope: !8053, file: !1012, line: 53, type: !996)
!8061 = !DILocation(line: 53, column: 69, scope: !8053)
!8062 = !DILocalVariable(name: "n", arg: 4, scope: !8053, file: !1012, line: 53, type: !996)
!8063 = !DILocation(line: 53, column: 79, scope: !8053)
!8064 = !DILocalVariable(name: "i", scope: !8053, file: !1012, line: 55, type: !996)
!8065 = !DILocation(line: 55, column: 9, scope: !8053)
!8066 = !DILocation(line: 57, column: 9, scope: !8067)
!8067 = distinct !DILexicalBlock(scope: !8053, file: !1012, line: 57, column: 9)
!8068 = !DILocation(line: 57, column: 11, scope: !8067)
!8069 = !DILocation(line: 57, column: 9, scope: !8053)
!8070 = !DILocation(line: 58, column: 16, scope: !8067)
!8071 = !DILocation(line: 58, column: 9, scope: !8067)
!8072 = !DILocation(line: 58, column: 43, scope: !8067)
!8073 = !DILocation(line: 58, column: 41, scope: !8067)
!8074 = !DILocation(line: 59, column: 17, scope: !8075)
!8075 = distinct !DILexicalBlock(scope: !8067, file: !1012, line: 59, column: 10)
!8076 = !DILocation(line: 59, column: 15, scope: !8075)
!8077 = !DILocation(line: 59, column: 22, scope: !8078)
!8078 = !DILexicalBlockFile(scope: !8079, file: !1012, discriminator: 1)
!8079 = distinct !DILexicalBlock(scope: !8075, file: !1012, line: 59, column: 10)
!8080 = !DILocation(line: 59, column: 26, scope: !8078)
!8081 = !DILocation(line: 59, column: 24, scope: !8078)
!8082 = !DILocation(line: 59, column: 10, scope: !8078)
!8083 = !DILocation(line: 60, column: 31, scope: !8079)
!8084 = !DILocation(line: 60, column: 35, scope: !8079)
!8085 = !DILocation(line: 60, column: 20, scope: !8079)
!8086 = !DILocation(line: 60, column: 15, scope: !8079)
!8087 = !DILocation(line: 60, column: 9, scope: !8079)
!8088 = !DILocation(line: 60, column: 18, scope: !8079)
!8089 = !DILocation(line: 59, column: 33, scope: !8090)
!8090 = !DILexicalBlockFile(scope: !8079, file: !1012, discriminator: 2)
!8091 = !DILocation(line: 59, column: 10, scope: !8090)
!8092 = distinct !{!8092, !8093}
!8093 = !DILocation(line: 59, column: 10, scope: !8067)
!8094 = !DILocation(line: 61, column: 1, scope: !8053)
!8095 = distinct !DISubprogram(name: "get_rice_array", scope: !1012, file: !1012, line: 63, type: !8054, isLocal: true, isDefinition: true, scopeLine: 64, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!8096 = !DILocalVariable(name: "gb", arg: 1, scope: !8095, file: !1012, line: 63, type: !4570)
!8097 = !DILocation(line: 63, column: 43, scope: !8095)
!8098 = !DILocalVariable(name: "array", arg: 2, scope: !8095, file: !1012, line: 63, type: !994)
!8099 = !DILocation(line: 63, column: 56, scope: !8095)
!8100 = !DILocalVariable(name: "size", arg: 3, scope: !8095, file: !1012, line: 63, type: !996)
!8101 = !DILocation(line: 63, column: 67, scope: !8095)
!8102 = !DILocalVariable(name: "k", arg: 4, scope: !8095, file: !1012, line: 63, type: !996)
!8103 = !DILocation(line: 63, column: 77, scope: !8095)
!8104 = !DILocalVariable(name: "i", scope: !8095, file: !1012, line: 65, type: !996)
!8105 = !DILocation(line: 65, column: 9, scope: !8095)
!8106 = !DILocation(line: 67, column: 12, scope: !8107)
!8107 = distinct !DILexicalBlock(scope: !8095, file: !1012, line: 67, column: 5)
!8108 = !DILocation(line: 67, column: 10, scope: !8107)
!8109 = !DILocation(line: 67, column: 17, scope: !8110)
!8110 = !DILexicalBlockFile(scope: !8111, file: !1012, discriminator: 1)
!8111 = distinct !DILexicalBlock(scope: !8107, file: !1012, line: 67, column: 5)
!8112 = !DILocation(line: 67, column: 21, scope: !8110)
!8113 = !DILocation(line: 67, column: 19, scope: !8110)
!8114 = !DILocation(line: 67, column: 5, scope: !8110)
!8115 = !DILocation(line: 68, column: 29, scope: !8111)
!8116 = !DILocation(line: 68, column: 33, scope: !8111)
!8117 = !DILocation(line: 68, column: 20, scope: !8111)
!8118 = !DILocation(line: 68, column: 15, scope: !8111)
!8119 = !DILocation(line: 68, column: 9, scope: !8111)
!8120 = !DILocation(line: 68, column: 18, scope: !8111)
!8121 = !DILocation(line: 67, column: 28, scope: !8122)
!8122 = !DILexicalBlockFile(scope: !8111, file: !1012, discriminator: 2)
!8123 = !DILocation(line: 67, column: 5, scope: !8122)
!8124 = distinct !{!8124, !8125}
!8125 = !DILocation(line: 67, column: 5, scope: !8095)
!8126 = !DILocation(line: 69, column: 1, scope: !8095)
!8127 = distinct !DISubprogram(name: "get_rice", scope: !1012, file: !1012, line: 39, type: !5359, isLocal: true, isDefinition: true, scopeLine: 40, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!8128 = !DILocalVariable(name: "gb", arg: 1, scope: !8127, file: !1012, line: 39, type: !4570)
!8129 = !DILocation(line: 39, column: 36, scope: !8127)
!8130 = !DILocalVariable(name: "k", arg: 2, scope: !8127, file: !1012, line: 39, type: !996)
!8131 = !DILocation(line: 39, column: 44, scope: !8127)
!8132 = !DILocalVariable(name: "v", scope: !8127, file: !1012, line: 41, type: !993)
!8133 = !DILocation(line: 41, column: 18, scope: !8127)
!8134 = !DILocation(line: 41, column: 34, scope: !8127)
!8135 = !DILocation(line: 41, column: 38, scope: !8127)
!8136 = !DILocation(line: 41, column: 22, scope: !8127)
!8137 = !DILocation(line: 42, column: 13, scope: !8127)
!8138 = !DILocation(line: 42, column: 15, scope: !8127)
!8139 = !DILocation(line: 42, column: 25, scope: !8127)
!8140 = !DILocation(line: 42, column: 27, scope: !8127)
!8141 = !DILocation(line: 42, column: 23, scope: !8127)
!8142 = !DILocation(line: 42, column: 21, scope: !8127)
!8143 = !DILocation(line: 42, column: 5, scope: !8127)
!8144 = distinct !DISubprogram(name: "get_sbits_long", scope: !1747, file: !1747, line: 575, type: !5359, isLocal: true, isDefinition: true, scopeLine: 576, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!8145 = !DILocalVariable(name: "s", arg: 1, scope: !8144, file: !1747, line: 575, type: !4570)
!8146 = !DILocation(line: 575, column: 49, scope: !8144)
!8147 = !DILocalVariable(name: "n", arg: 2, scope: !8144, file: !1747, line: 575, type: !996)
!8148 = !DILocation(line: 575, column: 56, scope: !8144)
!8149 = !DILocation(line: 578, column: 10, scope: !8150)
!8150 = distinct !DILexicalBlock(scope: !8144, file: !1747, line: 578, column: 9)
!8151 = !DILocation(line: 578, column: 9, scope: !8144)
!8152 = !DILocation(line: 579, column: 9, scope: !8150)
!8153 = !DILocation(line: 581, column: 38, scope: !8144)
!8154 = !DILocation(line: 581, column: 41, scope: !8144)
!8155 = !DILocation(line: 581, column: 24, scope: !8144)
!8156 = !DILocation(line: 581, column: 45, scope: !8144)
!8157 = !DILocation(line: 581, column: 12, scope: !8158)
!8158 = !DILexicalBlockFile(scope: !8144, file: !1747, discriminator: 1)
!8159 = !DILocation(line: 581, column: 5, scope: !8144)
!8160 = !DILocation(line: 582, column: 1, scope: !8144)
!8161 = distinct !DISubprogram(name: "get_array", scope: !1012, file: !1012, line: 45, type: !8054, isLocal: true, isDefinition: true, scopeLine: 46, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!8162 = !DILocalVariable(name: "gb", arg: 1, scope: !8161, file: !1012, line: 45, type: !4570)
!8163 = !DILocation(line: 45, column: 38, scope: !8161)
!8164 = !DILocalVariable(name: "array", arg: 2, scope: !8161, file: !1012, line: 45, type: !994)
!8165 = !DILocation(line: 45, column: 51, scope: !8161)
!8166 = !DILocalVariable(name: "size", arg: 3, scope: !8161, file: !1012, line: 45, type: !996)
!8167 = !DILocation(line: 45, column: 62, scope: !8161)
!8168 = !DILocalVariable(name: "n", arg: 4, scope: !8161, file: !1012, line: 45, type: !996)
!8169 = !DILocation(line: 45, column: 72, scope: !8161)
!8170 = !DILocalVariable(name: "i", scope: !8161, file: !1012, line: 47, type: !996)
!8171 = !DILocation(line: 47, column: 9, scope: !8161)
!8172 = !DILocation(line: 49, column: 12, scope: !8173)
!8173 = distinct !DILexicalBlock(scope: !8161, file: !1012, line: 49, column: 5)
!8174 = !DILocation(line: 49, column: 10, scope: !8173)
!8175 = !DILocation(line: 49, column: 17, scope: !8176)
!8176 = !DILexicalBlockFile(scope: !8177, file: !1012, discriminator: 1)
!8177 = distinct !DILexicalBlock(scope: !8173, file: !1012, line: 49, column: 5)
!8178 = !DILocation(line: 49, column: 21, scope: !8176)
!8179 = !DILocation(line: 49, column: 19, scope: !8176)
!8180 = !DILocation(line: 49, column: 5, scope: !8176)
!8181 = !DILocation(line: 50, column: 29, scope: !8177)
!8182 = !DILocation(line: 50, column: 33, scope: !8177)
!8183 = !DILocation(line: 50, column: 20, scope: !8177)
!8184 = !DILocation(line: 50, column: 15, scope: !8177)
!8185 = !DILocation(line: 50, column: 9, scope: !8177)
!8186 = !DILocation(line: 50, column: 18, scope: !8177)
!8187 = !DILocation(line: 49, column: 28, scope: !8188)
!8188 = !DILexicalBlockFile(scope: !8177, file: !1012, discriminator: 2)
!8189 = !DILocation(line: 49, column: 5, scope: !8188)
!8190 = distinct !{!8190, !8191}
!8191 = !DILocation(line: 49, column: 5, scope: !8161)
!8192 = !DILocation(line: 51, column: 1, scope: !8161)
!8193 = distinct !DISubprogram(name: "get_rice_un", scope: !1012, file: !1012, line: 33, type: !5359, isLocal: true, isDefinition: true, scopeLine: 34, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!8194 = !DILocalVariable(name: "gb", arg: 1, scope: !8193, file: !1012, line: 33, type: !4570)
!8195 = !DILocation(line: 33, column: 39, scope: !8193)
!8196 = !DILocalVariable(name: "k", arg: 2, scope: !8193, file: !1012, line: 33, type: !996)
!8197 = !DILocation(line: 33, column: 47, scope: !8193)
!8198 = !DILocalVariable(name: "v", scope: !8193, file: !1012, line: 35, type: !993)
!8199 = !DILocation(line: 35, column: 18, scope: !8193)
!8200 = !DILocation(line: 35, column: 32, scope: !8193)
!8201 = !DILocation(line: 35, column: 53, scope: !8193)
!8202 = !DILocation(line: 35, column: 39, scope: !8193)
!8203 = !DILocation(line: 35, column: 22, scope: !8204)
!8204 = !DILexicalBlockFile(scope: !8193, file: !1012, discriminator: 1)
!8205 = !DILocation(line: 36, column: 13, scope: !8193)
!8206 = !DILocation(line: 36, column: 18, scope: !8193)
!8207 = !DILocation(line: 36, column: 15, scope: !8193)
!8208 = !DILocation(line: 36, column: 37, scope: !8193)
!8209 = !DILocation(line: 36, column: 41, scope: !8193)
!8210 = !DILocation(line: 36, column: 23, scope: !8193)
!8211 = !DILocation(line: 36, column: 21, scope: !8193)
!8212 = !DILocation(line: 36, column: 5, scope: !8193)
!8213 = distinct !DISubprogram(name: "get_unary", scope: !8214, file: !8214, line: 46, type: !8215, isLocal: true, isDefinition: true, scopeLine: 47, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!8214 = !DIFile(filename: "libavcodec/unary.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!8215 = !DISubroutineType(types: !8216)
!8216 = !{!996, !4570, !996, !996}
!8217 = !DILocalVariable(name: "gb", arg: 1, scope: !8213, file: !8214, line: 46, type: !4570)
!8218 = !DILocation(line: 46, column: 44, scope: !8213)
!8219 = !DILocalVariable(name: "stop", arg: 2, scope: !8213, file: !8214, line: 46, type: !996)
!8220 = !DILocation(line: 46, column: 52, scope: !8213)
!8221 = !DILocalVariable(name: "len", arg: 3, scope: !8213, file: !8214, line: 46, type: !996)
!8222 = !DILocation(line: 46, column: 62, scope: !8213)
!8223 = !DILocalVariable(name: "i", scope: !8213, file: !8214, line: 48, type: !996)
!8224 = !DILocation(line: 48, column: 9, scope: !8213)
!8225 = !DILocation(line: 50, column: 11, scope: !8226)
!8226 = distinct !DILexicalBlock(scope: !8213, file: !8214, line: 50, column: 5)
!8227 = !DILocation(line: 50, column: 9, scope: !8226)
!8228 = !DILocation(line: 50, column: 16, scope: !8229)
!8229 = !DILexicalBlockFile(scope: !8230, file: !8214, discriminator: 1)
!8230 = distinct !DILexicalBlock(scope: !8226, file: !8214, line: 50, column: 5)
!8231 = !DILocation(line: 50, column: 20, scope: !8229)
!8232 = !DILocation(line: 50, column: 18, scope: !8229)
!8233 = !DILocation(line: 50, column: 24, scope: !8229)
!8234 = !DILocation(line: 50, column: 37, scope: !8235)
!8235 = !DILexicalBlockFile(scope: !8230, file: !8214, discriminator: 2)
!8236 = !DILocation(line: 50, column: 27, scope: !8235)
!8237 = !DILocation(line: 50, column: 44, scope: !8235)
!8238 = !DILocation(line: 50, column: 41, scope: !8235)
!8239 = !DILocation(line: 50, column: 5, scope: !8240)
!8240 = !DILexicalBlockFile(scope: !8226, file: !8214, discriminator: 3)
!8241 = !DILocation(line: 50, column: 5, scope: !8242)
!8242 = !DILexicalBlockFile(scope: !8226, file: !8214, discriminator: 4)
!8243 = !DILocation(line: 50, column: 51, scope: !8244)
!8244 = !DILexicalBlockFile(scope: !8230, file: !8214, discriminator: 5)
!8245 = !DILocation(line: 50, column: 5, scope: !8244)
!8246 = distinct !{!8246, !8247}
!8247 = !DILocation(line: 50, column: 5, scope: !8213)
!8248 = !DILocation(line: 51, column: 12, scope: !8213)
!8249 = !DILocation(line: 51, column: 5, scope: !8213)
!8250 = distinct !DISubprogram(name: "sign_extend", scope: !8251, file: !8251, line: 130, type: !8252, isLocal: true, isDefinition: true, scopeLine: 131, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!8251 = !DIFile(filename: "libavcodec/mathops.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[lib]libavcodec--libavcodec.a")
!8252 = !DISubroutineType(types: !8253)
!8253 = !{!996, !996, !993}
!8254 = !DILocalVariable(name: "val", arg: 1, scope: !8250, file: !8251, line: 130, type: !996)
!8255 = !DILocation(line: 130, column: 58, scope: !8250)
!8256 = !DILocalVariable(name: "bits", arg: 2, scope: !8250, file: !8251, line: 130, type: !993)
!8257 = !DILocation(line: 130, column: 72, scope: !8250)
!8258 = !DILocalVariable(name: "shift", scope: !8250, file: !8251, line: 132, type: !993)
!8259 = !DILocation(line: 132, column: 14, scope: !8250)
!8260 = !DILocation(line: 132, column: 40, scope: !8250)
!8261 = !DILocation(line: 132, column: 38, scope: !8250)
!8262 = !DILocation(line: 132, column: 22, scope: !8250)
!8263 = !DILocalVariable(name: "v", scope: !8250, file: !8251, line: 133, type: !8264)
!8264 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !8250, file: !8251, line: 133, size: 32, align: 32, elements: !8265)
!8265 = !{!8266, !8267}
!8266 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !8264, file: !8251, line: 133, baseType: !993, size: 32, align: 32)
!8267 = !DIDerivedType(tag: DW_TAG_member, name: "s", scope: !8264, file: !8251, line: 133, baseType: !996, size: 32, align: 32)
!8268 = !DILocation(line: 133, column: 34, scope: !8250)
!8269 = !DILocation(line: 133, column: 38, scope: !8250)
!8270 = !DILocation(line: 133, column: 51, scope: !8250)
!8271 = !DILocation(line: 133, column: 58, scope: !8250)
!8272 = !DILocation(line: 133, column: 55, scope: !8250)
!8273 = !DILocation(line: 134, column: 14, scope: !8250)
!8274 = !DILocation(line: 134, column: 19, scope: !8250)
!8275 = !DILocation(line: 134, column: 16, scope: !8250)
!8276 = !DILocation(line: 134, column: 5, scope: !8250)
!8277 = distinct !DISubprogram(name: "copy_to_pbr", scope: !1012, file: !1012, line: 1068, type: !8278, isLocal: true, isDefinition: true, scopeLine: 1069, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!8278 = !DISubroutineType(types: !8279)
!8279 = !{!996, !1015, !1149, !996, !996}
!8280 = !DILocalVariable(name: "s", arg: 1, scope: !8277, file: !1012, line: 1068, type: !1015)
!8281 = !DILocation(line: 1068, column: 39, scope: !8277)
!8282 = !DILocalVariable(name: "data", arg: 2, scope: !8277, file: !1012, line: 1068, type: !1149)
!8283 = !DILocation(line: 1068, column: 51, scope: !8277)
!8284 = !DILocalVariable(name: "size", arg: 3, scope: !8277, file: !1012, line: 1068, type: !996)
!8285 = !DILocation(line: 1068, column: 61, scope: !8277)
!8286 = !DILocalVariable(name: "delay", arg: 4, scope: !8277, file: !1012, line: 1068, type: !996)
!8287 = !DILocation(line: 1068, column: 71, scope: !8277)
!8288 = !DILocation(line: 1070, column: 9, scope: !8289)
!8289 = distinct !DILexicalBlock(scope: !8277, file: !1012, line: 1070, column: 9)
!8290 = !DILocation(line: 1070, column: 14, scope: !8289)
!8291 = !DILocation(line: 1070, column: 9, scope: !8277)
!8292 = !DILocation(line: 1071, column: 9, scope: !8289)
!8293 = !DILocation(line: 1073, column: 10, scope: !8294)
!8294 = distinct !DILexicalBlock(scope: !8277, file: !1012, line: 1073, column: 9)
!8295 = !DILocation(line: 1073, column: 13, scope: !8294)
!8296 = !DILocation(line: 1073, column: 24, scope: !8294)
!8297 = !DILocation(line: 1073, column: 45, scope: !8298)
!8298 = !DILexicalBlockFile(scope: !8294, file: !1012, discriminator: 1)
!8299 = !DILocation(line: 1073, column: 29, scope: !8298)
!8300 = !DILocation(line: 1073, column: 32, scope: !8298)
!8301 = !DILocation(line: 1073, column: 43, scope: !8298)
!8302 = !DILocation(line: 1073, column: 9, scope: !8298)
!8303 = !DILocation(line: 1074, column: 9, scope: !8294)
!8304 = !DILocation(line: 1076, column: 12, scope: !8277)
!8305 = !DILocation(line: 1076, column: 15, scope: !8277)
!8306 = !DILocation(line: 1076, column: 27, scope: !8277)
!8307 = !DILocation(line: 1076, column: 33, scope: !8277)
!8308 = !DILocation(line: 1076, column: 5, scope: !8277)
!8309 = !DILocation(line: 1077, column: 21, scope: !8277)
!8310 = !DILocation(line: 1077, column: 5, scope: !8277)
!8311 = !DILocation(line: 1077, column: 8, scope: !8277)
!8312 = !DILocation(line: 1077, column: 19, scope: !8277)
!8313 = !DILocation(line: 1078, column: 20, scope: !8277)
!8314 = !DILocation(line: 1078, column: 5, scope: !8277)
!8315 = !DILocation(line: 1078, column: 8, scope: !8277)
!8316 = !DILocation(line: 1078, column: 18, scope: !8277)
!8317 = !DILocation(line: 1079, column: 5, scope: !8277)
!8318 = !DILocation(line: 1080, column: 1, scope: !8277)
!8319 = distinct !DISubprogram(name: "ff_dca_core_map_spkr", scope: !2341, file: !2341, line: 216, type: !8320, isLocal: true, isDefinition: true, scopeLine: 217, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!8320 = !DISubroutineType(types: !8321)
!8321 = !{!996, !8322, !996}
!8322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2340, size: 64, align: 64)
!8323 = !DILocalVariable(name: "core", arg: 1, scope: !8319, file: !2341, line: 216, type: !8322)
!8324 = !DILocation(line: 216, column: 56, scope: !8319)
!8325 = !DILocalVariable(name: "spkr", arg: 2, scope: !8319, file: !2341, line: 216, type: !996)
!8326 = !DILocation(line: 216, column: 66, scope: !8319)
!8327 = !DILocation(line: 218, column: 9, scope: !8328)
!8328 = distinct !DILexicalBlock(scope: !8319, file: !2341, line: 218, column: 9)
!8329 = !DILocation(line: 218, column: 15, scope: !8328)
!8330 = !DILocation(line: 218, column: 32, scope: !8328)
!8331 = !DILocation(line: 218, column: 29, scope: !8328)
!8332 = !DILocation(line: 218, column: 23, scope: !8328)
!8333 = !DILocation(line: 218, column: 9, scope: !8319)
!8334 = !DILocation(line: 219, column: 16, scope: !8328)
!8335 = !DILocation(line: 219, column: 9, scope: !8328)
!8336 = !DILocation(line: 220, column: 9, scope: !8337)
!8337 = distinct !DILexicalBlock(scope: !8319, file: !2341, line: 220, column: 9)
!8338 = !DILocation(line: 220, column: 14, scope: !8337)
!8339 = !DILocation(line: 220, column: 33, scope: !8337)
!8340 = !DILocation(line: 220, column: 37, scope: !8341)
!8341 = !DILexicalBlockFile(scope: !8337, file: !2341, discriminator: 1)
!8342 = !DILocation(line: 220, column: 43, scope: !8341)
!8343 = !DILocation(line: 220, column: 51, scope: !8341)
!8344 = !DILocation(line: 220, column: 9, scope: !8341)
!8345 = !DILocation(line: 221, column: 9, scope: !8337)
!8346 = !DILocation(line: 222, column: 9, scope: !8347)
!8347 = distinct !DILexicalBlock(scope: !8319, file: !2341, line: 222, column: 9)
!8348 = !DILocation(line: 222, column: 14, scope: !8347)
!8349 = !DILocation(line: 222, column: 33, scope: !8347)
!8350 = !DILocation(line: 222, column: 37, scope: !8351)
!8351 = !DILexicalBlockFile(scope: !8347, file: !2341, discriminator: 1)
!8352 = !DILocation(line: 222, column: 43, scope: !8351)
!8353 = !DILocation(line: 222, column: 51, scope: !8351)
!8354 = !DILocation(line: 222, column: 9, scope: !8351)
!8355 = !DILocation(line: 223, column: 9, scope: !8347)
!8356 = !DILocation(line: 224, column: 5, scope: !8319)
!8357 = !DILocation(line: 225, column: 1, scope: !8319)
!8358 = distinct !DISubprogram(name: "norm16", scope: !4387, file: !4387, line: 41, type: !8359, isLocal: true, isDefinition: true, scopeLine: 41, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!8359 = !DISubroutineType(types: !8360)
!8360 = !{!995, !1006}
!8361 = !DILocalVariable(name: "a", arg: 1, scope: !8358, file: !4387, line: 41, type: !1006)
!8362 = !DILocation(line: 41, column: 38, scope: !8358)
!8363 = !DILocation(line: 41, column: 57, scope: !8358)
!8364 = !DILocation(line: 41, column: 50, scope: !8358)
!8365 = !DILocation(line: 41, column: 43, scope: !8358)
!8366 = distinct !DISubprogram(name: "chs_get_lsb_width", scope: !1012, file: !1012, line: 692, type: !8367, isLocal: true, isDefinition: true, scopeLine: 693, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2038)
!8367 = !DISubroutineType(types: !8368)
!8368 = !{!996, !1015, !2698, !996, !996}
!8369 = !DILocalVariable(name: "s", arg: 1, scope: !8366, file: !1012, line: 692, type: !1015)
!8370 = !DILocation(line: 692, column: 45, scope: !8366)
!8371 = !DILocalVariable(name: "c", arg: 2, scope: !8366, file: !1012, line: 692, type: !2698)
!8372 = !DILocation(line: 692, column: 61, scope: !8366)
!8373 = !DILocalVariable(name: "band", arg: 3, scope: !8366, file: !1012, line: 692, type: !996)
!8374 = !DILocation(line: 692, column: 68, scope: !8366)
!8375 = !DILocalVariable(name: "ch", arg: 4, scope: !8366, file: !1012, line: 692, type: !996)
!8376 = !DILocation(line: 692, column: 78, scope: !8366)
!8377 = !DILocalVariable(name: "adj", scope: !8366, file: !1012, line: 694, type: !996)
!8378 = !DILocation(line: 694, column: 9, scope: !8366)
!8379 = !DILocation(line: 694, column: 47, scope: !8366)
!8380 = !DILocation(line: 694, column: 15, scope: !8366)
!8381 = !DILocation(line: 694, column: 24, scope: !8366)
!8382 = !DILocation(line: 694, column: 18, scope: !8366)
!8383 = !DILocation(line: 694, column: 30, scope: !8366)
!8384 = !DILocalVariable(name: "shift", scope: !8366, file: !1012, line: 695, type: !996)
!8385 = !DILocation(line: 695, column: 9, scope: !8366)
!8386 = !DILocation(line: 695, column: 46, scope: !8366)
!8387 = !DILocation(line: 695, column: 17, scope: !8366)
!8388 = !DILocation(line: 695, column: 26, scope: !8366)
!8389 = !DILocation(line: 695, column: 20, scope: !8366)
!8390 = !DILocation(line: 695, column: 32, scope: !8366)
!8391 = !DILocation(line: 697, column: 9, scope: !8392)
!8392 = distinct !DILexicalBlock(scope: !8366, file: !1012, line: 697, column: 9)
!8393 = !DILocation(line: 697, column: 12, scope: !8392)
!8394 = !DILocation(line: 697, column: 9, scope: !8366)
!8395 = !DILocation(line: 698, column: 17, scope: !8392)
!8396 = !DILocation(line: 698, column: 20, scope: !8392)
!8397 = !DILocation(line: 698, column: 15, scope: !8392)
!8398 = !DILocation(line: 698, column: 9, scope: !8392)
!8399 = !DILocation(line: 699, column: 14, scope: !8400)
!8400 = distinct !DILexicalBlock(scope: !8392, file: !1012, line: 699, column: 14)
!8401 = !DILocation(line: 699, column: 20, scope: !8400)
!8402 = !DILocation(line: 699, column: 23, scope: !8403)
!8403 = !DILexicalBlockFile(scope: !8400, file: !1012, discriminator: 1)
!8404 = !DILocation(line: 699, column: 14, scope: !8403)
!8405 = !DILocation(line: 700, column: 18, scope: !8400)
!8406 = !DILocation(line: 700, column: 22, scope: !8400)
!8407 = !DILocation(line: 700, column: 15, scope: !8400)
!8408 = !DILocation(line: 700, column: 9, scope: !8400)
!8409 = !DILocation(line: 702, column: 18, scope: !8400)
!8410 = !DILocation(line: 702, column: 15, scope: !8400)
!8411 = !DILocation(line: 704, column: 12, scope: !8366)
!8412 = !DILocation(line: 704, column: 5, scope: !8366)
