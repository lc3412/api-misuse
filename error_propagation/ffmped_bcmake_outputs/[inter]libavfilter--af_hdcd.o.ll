; ModuleID = '/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[inter]libavfilter--af_hdcd.o.i'
source_filename = "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[inter]libavfilter--af_hdcd.o.i"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.AVFilterPad = type { i8*, i32, %struct.AVFrame* (%struct.AVFilterLink*, i32, i32)*, %struct.AVFrame* (%struct.AVFilterLink*, i32)*, i32 (%struct.AVFilterLink*, %struct.AVFrame*)*, i32 (%struct.AVFilterLink*)*, i32 (%struct.AVFilterLink*)*, i32 (%struct.AVFilterLink*)*, i32, i32 }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVRational = type { i32, i32 }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVFilterLink = type { %struct.AVFilterContext*, %struct.AVFilterPad*, %struct.AVFilterContext*, %struct.AVFilterPad*, i32, i32, i32, %struct.AVRational, i64, i32, i32, %struct.AVRational, %struct.AVFilterFormats*, %struct.AVFilterFormats*, %struct.AVFilterFormats*, %struct.AVFilterFormats*, %struct.AVFilterChannelLayouts*, %struct.AVFilterChannelLayouts*, i32, i32, %struct.AVFilterGraph*, i64, i64, i32, %struct.AVRational, %struct.AVFrame*, i32, i32, i32, i32, i32, i64, i64, i8*, i32, %struct.AVBufferRef*, [61440 x i8] }
%struct.AVFilterContext = type { %struct.AVClass*, %struct.AVFilter*, i8*, %struct.AVFilterPad*, %struct.AVFilterLink**, i32, %struct.AVFilterPad*, %struct.AVFilterLink**, i32, i8*, %struct.AVFilterGraph*, i32, %struct.AVFilterInternal*, %struct.AVFilterCommand*, i8*, i8*, double*, i32, %struct.AVBufferRef*, i32, i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* }
%struct.AVOption = type { i8*, i8*, i32, i32, %union.anon, double, double, i32, i8* }
%union.anon = type { i64 }
%struct.AVOptionRanges = type { %struct.AVOptionRange**, i32, i32 }
%struct.AVOptionRange = type { i8*, double, double, double, double, i32 }
%struct.AVFilter = type { i8*, i8*, %struct.AVFilterPad*, %struct.AVFilterPad*, %struct.AVClass*, i32, i32 (%struct.AVFilterContext*)*, i32 (%struct.AVFilterContext*)*, i32 (%struct.AVFilterContext*, %struct.AVDictionary**)*, void (%struct.AVFilterContext*)*, i32 (%struct.AVFilterContext*)*, i32, i32, %struct.AVFilter*, i32 (%struct.AVFilterContext*, i8*, i8*, i8*, i32, i32)*, i32 (%struct.AVFilterContext*, i8*)*, i32 (%struct.AVFilterContext*)* }
%struct.AVFilterInternal = type { i32 (%struct.AVFilterContext*, i32 (%struct.AVFilterContext*, i8*, i32, i32)*, i8*, i32*, i32)* }
%struct.AVFilterCommand = type { double, i8*, i8*, i32, %struct.AVFilterCommand* }
%struct.AVFilterFormats = type { i32, i32*, i32, %struct.AVFilterFormats*** }
%struct.AVFilterChannelLayouts = type { i64*, i32, i8, i8, i32, %struct.AVFilterChannelLayouts*** }
%struct.AVFilterGraph = type { %struct.AVClass*, %struct.AVFilterContext**, i32, i8*, i8*, i32, i32, %struct.AVFilterGraphInternal*, i8*, i32 (%struct.AVFilterContext*, i32 (%struct.AVFilterContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i8*, %struct.AVFilterLink**, i32, i32 }
%struct.AVFilterGraphInternal = type { i8*, i32 (%struct.AVFilterContext*, i32 (%struct.AVFilterContext*, i8*, i32, i32)*, i8*, i32*, i32)*, %struct.FFFrameQueueGlobal }
%struct.FFFrameQueueGlobal = type { i8 }
%struct.HDCDContext = type { %struct.AVClass*, [2 x %struct.hdcd_state], i32, i32, i32, i32, i32, i32, i32, %struct.AVFilterContext*, i32, i32, %struct.hdcd_detection_data }
%struct.hdcd_state = type { i64, i8, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [16 x i32], i32, i32, i32, i32 }
%struct.hdcd_detection_data = type { i32, i32, i32, i32, i32, i32, float, i32, i32 }

@.str = private unnamed_addr constant [5 x i8] c"hdcd\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"Apply High Definition Compatible Digital (HDCD) decoding.\00", align 1
@avfilter_af_hdcd_inputs = internal constant [2 x %struct.AVFilterPad] [%struct.AVFilterPad { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i32 1, %struct.AVFrame* (%struct.AVFilterLink*, i32, i32)* null, %struct.AVFrame* (%struct.AVFilterLink*, i32)* null, i32 (%struct.AVFilterLink*, %struct.AVFrame*)* @filter_frame, i32 (%struct.AVFilterLink*)* null, i32 (%struct.AVFilterLink*)* null, i32 (%struct.AVFilterLink*)* @config_input, i32 0, i32 0 }, %struct.AVFilterPad zeroinitializer], align 16
@avfilter_af_hdcd_outputs = internal constant [2 x %struct.AVFilterPad] [%struct.AVFilterPad { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i32 1, %struct.AVFrame* (%struct.AVFilterLink*, i32, i32)* null, %struct.AVFrame* (%struct.AVFilterLink*, i32)* null, i32 (%struct.AVFilterLink*, %struct.AVFrame*)* null, i32 (%struct.AVFilterLink*)* null, i32 (%struct.AVFilterLink*)* null, i32 (%struct.AVFilterLink*)* null, i32 0, i32 0 }, %struct.AVFilterPad zeroinitializer], align 16
@hdcd_class = internal constant %struct.AVClass { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* (i8*)* @av_default_item_name, %struct.AVOption* getelementptr inbounds ([15 x %struct.AVOption], [15 x %struct.AVOption]* @hdcd_options, i32 0, i32 0), i32 3676772, i32 0, i32 0, i8* (i8*, i8*)* null, %struct.AVClass* (%struct.AVClass*)* null, i32 7, i32 (i8*)* null, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* null }, align 8
@ff_af_hdcd = global %struct.AVFilter { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i32 0, i32 0), %struct.AVFilterPad* getelementptr inbounds ([2 x %struct.AVFilterPad], [2 x %struct.AVFilterPad]* @avfilter_af_hdcd_inputs, i32 0, i32 0), %struct.AVFilterPad* getelementptr inbounds ([2 x %struct.AVFilterPad], [2 x %struct.AVFilterPad]* @avfilter_af_hdcd_outputs, i32 0, i32 0), %struct.AVClass* @hdcd_class, i32 0, i32 (%struct.AVFilterContext*)* null, i32 (%struct.AVFilterContext*)* @init, i32 (%struct.AVFilterContext*, %struct.AVDictionary**)* null, void (%struct.AVFilterContext*)* @uninit, i32 (%struct.AVFilterContext*)* @query_formats, i32 368, i32 0, %struct.AVFilter* null, i32 (%struct.AVFilterContext*, i8*, i8*, i8*, i32, i32)* null, i32 (%struct.AVFilterContext*, i8*)* null, i32 (%struct.AVFilterContext*)* null }, align 8
@.str.2 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.4 = private unnamed_addr constant [65 x i8] c"samples + lead * stride + stride * (count - lead) <= samples_end\00", align 1
@.str.5 = private unnamed_addr constant [22 x i8] c"libavfilter/af_hdcd.c\00", align 1
@.str.6 = private unnamed_addr constant [47 x i8] c"samples + envelope_run * stride <= samples_end\00", align 1
@.str.7 = private unnamed_addr constant [39 x i8] c"samples + lead * stride <= samples_end\00", align 1
@.str.8 = private unnamed_addr constant [79 x i8] c"hdcd error: Unmatched target_gain near %d: tg0: %0.1f, tg1: %0.1f, lvg: %0.1f\0A\00", align 1
@.str.9 = private unnamed_addr constant [46 x i8] c"hdcd error: Control A almost: 0x%02x near %d\0A\00", align 1
@.str.10 = private unnamed_addr constant [71 x i8] c"hdcd error: Control B check failed: 0x%04x (0x%02x vs 0x%02x) near %d\0A\00", align 1
@readaheadtab = internal constant [256 x i8] c"\03\02\01\01\1F\1E\1F\11\1F\1E\1F\1D\1F\1E\1F\10\1F\1E\1F\1D\1F\1E\1F\1C\1F\1E\1F\1D\1F\1E\1F\0F\1F\1E\1F\1D\1F\1E\1F\1C\1F\1E\1F\1D\1F\1E\1F\1B\1F\1E\1F\1D\1F\1E\1F\1C\1F\1E\1F\1D\1F\1E\0E\19\07\1E\1F\1D\1F\1E\1F\1C\1F\1E\1F\1D\1F\1E\1F\1B\1F\1E\1F\1D\1F\1E\1F\1C\1F\1E\1F\1D\1F\1E\1F\1A\1F\1E\1F\1D\1F\1E\1F\1C\1F\1E\1F\1D\1F\1E\1F\1B\1F\1E\1F\1D\1F\1E\1F\1C\1F\1E\1F\1D\1F\0D\18 \06\1E\1F\12\1F\1E\1F\1C\1F\1E\1F\1D\1F\1E\1F\1B\1F\1E\1F\1D\1F\1E\1F\1C\1F\1E\1F\1D\1F\1E\1F\1A\08\1E\1F\1D\1F\1E\1F\1C\1F\1E\1F\1D\1F\1E\1F\1B\1F\1E\1F\1D\1F\1E\1F\1C\1F\1E\1F\1D\1F\1E\1F\19\1F\13\1F\1D\1F\1E\1F\1C\1F\1E\1F\1D\1F\1E\1F\1B\09\1E\1F\1D\1F\1E\1F\1C\1F\1E\1F\1D\1F\1E\1F\1A\14\1E\1F\1D\1F\1E\1F\1C\0A\1E\1F\1D\1F\1E\1F\1B\15\1E\1F\1D\0B\1E\1F\1C\16\1E\0C\1D\17\1E\1F ", align 16
@hdcd_analyze.maxg = internal constant i32 1920, align 4
@.str.11 = private unnamed_addr constant [23 x i8] c"samples == samples_end\00", align 1
@hdcd_analyze_gen.r = internal constant i32 18, align 4
@hdcd_analyze_gen.m = internal constant i32 1024, align 4
@hdcd_envelope.max_asample = internal constant i32 9855, align 4
@.str.12 = private unnamed_addr constant [23 x i8] c"asample <= max_asample\00", align 1
@peaktab = internal constant [9856 x i32] [i32 750813952, i32 750847488, i32 750881024, i32 750914560, i32 750948096, i32 750981632, i32 751015168, i32 751048704, i32 751082240, i32 751115776, i32 751149312, i32 751182848, i32 751216384, i32 751249920, i32 751283456, i32 751316992, i32 751350528, i32 751384064, i32 751417600, i32 751451136, i32 751484672, i32 751518208, i32 751551744, i32 751585280, i32 751618816, i32 751652352, i32 751685888, i32 751719424, i32 751752960, i32 751786496, i32 751820032, i32 751853568, i32 751887104, i32 751920640, i32 751954176, i32 751987712, i32 752021248, i32 752054784, i32 752088320, i32 752121856, i32 752155392, i32 752188928, i32 752222464, i32 752256000, i32 752289536, i32 752323072, i32 752356608, i32 752390144, i32 752423680, i32 752457216, i32 752490752, i32 752524288, i32 752557824, i32 752591360, i32 752624896, i32 752658432, i32 752691968, i32 752725504, i32 752759040, i32 752792576, i32 752826112, i32 752859648, i32 752893184, i32 752926720, i32 752960256, i32 752993792, i32 753027328, i32 753060864, i32 753094400, i32 753127936, i32 753161472, i32 753195008, i32 753228544, i32 753262080, i32 753295616, i32 753329152, i32 753362688, i32 753396224, i32 753429760, i32 753463296, i32 753496832, i32 753530368, i32 753563904, i32 753597440, i32 753630976, i32 753664512, i32 753698048, i32 753731584, i32 753765120, i32 753798656, i32 753832192, i32 753865728, i32 753899264, i32 753932800, i32 753966336, i32 753999872, i32 754033408, i32 754066944, i32 754100480, i32 754134016, i32 754167552, i32 754201088, i32 754234624, i32 754268160, i32 754301696, i32 754335232, i32 754368768, i32 754402304, i32 754435840, i32 754469376, i32 754502912, i32 754536448, i32 754569984, i32 754603520, i32 754637056, i32 754670592, i32 754704128, i32 754737664, i32 754771200, i32 754804736, i32 754838272, i32 754871808, i32 754905344, i32 754938880, i32 754972416, i32 755005952, i32 755039488, i32 755073024, i32 755106560, i32 755140096, i32 755173632, i32 755207168, i32 755240704, i32 755274240, i32 755307776, i32 755341312, i32 755374848, i32 755408384, i32 755441920, i32 755475456, i32 755508992, i32 755542528, i32 755576064, i32 755609600, i32 755643136, i32 755676672, i32 755710208, i32 755743744, i32 755777280, i32 755810816, i32 755844352, i32 755877888, i32 755911424, i32 755944960, i32 755978496, i32 756012032, i32 756045568, i32 756079104, i32 756112640, i32 756146176, i32 756179712, i32 756213248, i32 756246784, i32 756280320, i32 756313856, i32 756347392, i32 756380928, i32 756414464, i32 756448000, i32 756481536, i32 756515072, i32 756548608, i32 756582144, i32 756615680, i32 756649216, i32 756682752, i32 756716288, i32 756749824, i32 756783360, i32 756816896, i32 756850432, i32 756883968, i32 756917504, i32 756951040, i32 756984576, i32 757018112, i32 757051648, i32 757085184, i32 757118720, i32 757152256, i32 757185792, i32 757219328, i32 757252864, i32 757286400, i32 757319936, i32 757353472, i32 757387008, i32 757420544, i32 757454080, i32 757487616, i32 757521152, i32 757554688, i32 757588224, i32 757621760, i32 757655296, i32 757688832, i32 757722368, i32 757755904, i32 757789440, i32 757822976, i32 757856512, i32 757890048, i32 757923584, i32 757957120, i32 757990656, i32 758024192, i32 758057728, i32 758091264, i32 758124800, i32 758158336, i32 758191872, i32 758225408, i32 758258944, i32 758292480, i32 758326016, i32 758359552, i32 758393088, i32 758426624, i32 758460160, i32 758493696, i32 758527232, i32 758560768, i32 758594304, i32 758627840, i32 758661376, i32 758694912, i32 758728448, i32 758761984, i32 758795520, i32 758829056, i32 758862592, i32 758896128, i32 758929664, i32 758963200, i32 758996736, i32 759030272, i32 759063808, i32 759097344, i32 759130880, i32 759164416, i32 759197952, i32 759231488, i32 759265024, i32 759298560, i32 759332096, i32 759365632, i32 759399168, i32 759432704, i32 759466240, i32 759499776, i32 759533312, i32 759566848, i32 759600384, i32 759633920, i32 759667456, i32 759700992, i32 759734528, i32 759768064, i32 759801600, i32 759835136, i32 759868672, i32 759902208, i32 759935744, i32 759969280, i32 760002816, i32 760036352, i32 760069888, i32 760103424, i32 760136960, i32 760170496, i32 760204032, i32 760237568, i32 760271104, i32 760304640, i32 760338176, i32 760371712, i32 760405248, i32 760438784, i32 760472320, i32 760505856, i32 760539392, i32 760572928, i32 760606464, i32 760640000, i32 760673536, i32 760707072, i32 760740608, i32 760774144, i32 760807680, i32 760841216, i32 760874752, i32 760908288, i32 760941824, i32 760975360, i32 761008896, i32 761042432, i32 761075968, i32 761109504, i32 761143040, i32 761176576, i32 761210112, i32 761243648, i32 761277184, i32 761310720, i32 761344256, i32 761377792, i32 761411328, i32 761444864, i32 761478400, i32 761511936, i32 761545472, i32 761579008, i32 761612544, i32 761646080, i32 761679616, i32 761713152, i32 761746688, i32 761780224, i32 761813760, i32 761847296, i32 761880832, i32 761914368, i32 761947904, i32 761981440, i32 762014976, i32 762048512, i32 762082048, i32 762115584, i32 762149120, i32 762182656, i32 762216192, i32 762249728, i32 762283264, i32 762316800, i32 762350336, i32 762383872, i32 762417408, i32 762450944, i32 762484480, i32 762518016, i32 762551552, i32 762585088, i32 762618624, i32 762652160, i32 762685696, i32 762719232, i32 762752768, i32 762786304, i32 762819840, i32 762853376, i32 762886912, i32 762920448, i32 762953984, i32 762987520, i32 763021056, i32 763054592, i32 763088128, i32 763121664, i32 763155200, i32 763188736, i32 763222272, i32 763255808, i32 763289344, i32 763322880, i32 763356416, i32 763389952, i32 763423488, i32 763457024, i32 763490560, i32 763524096, i32 763557632, i32 763591168, i32 763624704, i32 763658240, i32 763691776, i32 763725312, i32 763758848, i32 763792384, i32 763825920, i32 763859456, i32 763892992, i32 763926528, i32 763960064, i32 763993600, i32 764027136, i32 764060672, i32 764094208, i32 764127744, i32 764161280, i32 764194816, i32 764228352, i32 764261888, i32 764295424, i32 764328960, i32 764362496, i32 764396032, i32 764429568, i32 764463104, i32 764496640, i32 764530176, i32 764563712, i32 764597248, i32 764630784, i32 764664320, i32 764697856, i32 764731392, i32 764764928, i32 764798464, i32 764832000, i32 764865536, i32 764899072, i32 764932608, i32 764966144, i32 764999680, i32 765033216, i32 765066752, i32 765100288, i32 765133824, i32 765167360, i32 765200896, i32 765234432, i32 765267968, i32 765301504, i32 765335040, i32 765368576, i32 765402112, i32 765435648, i32 765469184, i32 765502720, i32 765536256, i32 765569792, i32 765603328, i32 765636864, i32 765670400, i32 765703936, i32 765737472, i32 765771008, i32 765804544, i32 765838080, i32 765871616, i32 765905152, i32 765938688, i32 765972224, i32 766005760, i32 766039296, i32 766072832, i32 766106368, i32 766139904, i32 766173440, i32 766206976, i32 766240512, i32 766274048, i32 766307584, i32 766341120, i32 766374656, i32 766408192, i32 766441728, i32 766475264, i32 766508800, i32 766542336, i32 766575872, i32 766609408, i32 766642944, i32 766676480, i32 766710016, i32 766743552, i32 766777088, i32 766810624, i32 766844160, i32 766877696, i32 766911232, i32 766944768, i32 766978304, i32 767011840, i32 767045376, i32 767078912, i32 767112448, i32 767145984, i32 767179520, i32 767213056, i32 767246592, i32 767280128, i32 767313664, i32 767347200, i32 767380736, i32 767414272, i32 767447808, i32 767481344, i32 767514880, i32 767548416, i32 767581952, i32 767615488, i32 767649024, i32 767682560, i32 767716096, i32 767749632, i32 767783168, i32 767816704, i32 767850240, i32 767883776, i32 767917312, i32 767950848, i32 767985408, i32 768019968, i32 768054528, i32 768089088, i32 768123648, i32 768158208, i32 768192768, i32 768227328, i32 768261888, i32 768296448, i32 768331008, i32 768365568, i32 768400128, i32 768434688, i32 768469248, i32 768503808, i32 768538368, i32 768572928, i32 768607488, i32 768642048, i32 768676608, i32 768711168, i32 768745728, i32 768780288, i32 768814848, i32 768849408, i32 768883968, i32 768918528, i32 768953088, i32 768987648, i32 769022208, i32 769056768, i32 769091328, i32 769125888, i32 769160448, i32 769195008, i32 769229568, i32 769264128, i32 769298688, i32 769333248, i32 769367808, i32 769402368, i32 769436928, i32 769471488, i32 769506048, i32 769540608, i32 769575168, i32 769609728, i32 769644288, i32 769678848, i32 769713408, i32 769747968, i32 769782528, i32 769817088, i32 769851648, i32 769886208, i32 769920768, i32 769955328, i32 769989888, i32 770024448, i32 770059008, i32 770093568, i32 770128128, i32 770162688, i32 770197248, i32 770231808, i32 770266368, i32 770300928, i32 770335488, i32 770370048, i32 770404608, i32 770439168, i32 770473728, i32 770508288, i32 770542848, i32 770577408, i32 770611968, i32 770646528, i32 770681088, i32 770715648, i32 770750208, i32 770784768, i32 770819328, i32 770853888, i32 770888448, i32 770923008, i32 770957568, i32 770992128, i32 771026688, i32 771061248, i32 771095808, i32 771130368, i32 771164928, i32 771199488, i32 771234048, i32 771268608, i32 771303168, i32 771337728, i32 771372288, i32 771406848, i32 771441408, i32 771475968, i32 771510528, i32 771545088, i32 771579648, i32 771614208, i32 771648768, i32 771683328, i32 771717888, i32 771752448, i32 771787008, i32 771821568, i32 771856128, i32 771890688, i32 771925248, i32 771959808, i32 771994368, i32 772028928, i32 772063488, i32 772098048, i32 772132608, i32 772167168, i32 772201728, i32 772236288, i32 772270848, i32 772305408, i32 772339968, i32 772374528, i32 772409088, i32 772443648, i32 772478208, i32 772512768, i32 772547328, i32 772581888, i32 772616448, i32 772651008, i32 772685568, i32 772720128, i32 772754688, i32 772789248, i32 772823808, i32 772858368, i32 772892928, i32 772927488, i32 772962048, i32 772996608, i32 773031168, i32 773065728, i32 773100288, i32 773134848, i32 773169408, i32 773203968, i32 773238528, i32 773273088, i32 773307648, i32 773342208, i32 773376768, i32 773411328, i32 773445888, i32 773480448, i32 773515008, i32 773549568, i32 773584128, i32 773618688, i32 773653248, i32 773687808, i32 773722368, i32 773756928, i32 773791488, i32 773826048, i32 773860608, i32 773895168, i32 773929728, i32 773964288, i32 773998848, i32 774033408, i32 774067968, i32 774102528, i32 774137088, i32 774171648, i32 774206208, i32 774240768, i32 774275328, i32 774309888, i32 774344448, i32 774379008, i32 774413568, i32 774448128, i32 774482688, i32 774517248, i32 774551808, i32 774586368, i32 774620928, i32 774655488, i32 774690048, i32 774724608, i32 774759168, i32 774793728, i32 774828288, i32 774862848, i32 774897408, i32 774931968, i32 774966528, i32 775001088, i32 775035648, i32 775070208, i32 775104768, i32 775139328, i32 775173888, i32 775208448, i32 775243008, i32 775277568, i32 775312128, i32 775346688, i32 775381248, i32 775415808, i32 775450368, i32 775484928, i32 775519488, i32 775554048, i32 775588608, i32 775623168, i32 775657728, i32 775692288, i32 775726848, i32 775761408, i32 775795968, i32 775830528, i32 775865088, i32 775899648, i32 775934208, i32 775968768, i32 776003328, i32 776037888, i32 776072448, i32 776107008, i32 776141568, i32 776176128, i32 776210688, i32 776245248, i32 776279808, i32 776314368, i32 776348928, i32 776383488, i32 776418048, i32 776452608, i32 776487168, i32 776521728, i32 776556288, i32 776590848, i32 776625408, i32 776659968, i32 776694528, i32 776729088, i32 776763648, i32 776798208, i32 776832768, i32 776867328, i32 776901888, i32 776936448, i32 776971008, i32 777005568, i32 777040128, i32 777074688, i32 777109248, i32 777143808, i32 777178368, i32 777212928, i32 777247488, i32 777282048, i32 777316608, i32 777351168, i32 777385728, i32 777420288, i32 777454848, i32 777489408, i32 777523968, i32 777558528, i32 777593088, i32 777627648, i32 777662208, i32 777696768, i32 777731328, i32 777765888, i32 777800448, i32 777835008, i32 777869568, i32 777904128, i32 777938688, i32 777973248, i32 778007808, i32 778042368, i32 778076928, i32 778111488, i32 778146048, i32 778180608, i32 778215168, i32 778249728, i32 778284288, i32 778318848, i32 778353408, i32 778387968, i32 778422528, i32 778457088, i32 778491648, i32 778526208, i32 778560768, i32 778595328, i32 778629888, i32 778664448, i32 778699008, i32 778733568, i32 778768128, i32 778802688, i32 778837248, i32 778871808, i32 778906368, i32 778940928, i32 778975488, i32 779010048, i32 779044608, i32 779079168, i32 779113728, i32 779148288, i32 779182848, i32 779217408, i32 779251968, i32 779286528, i32 779321088, i32 779355648, i32 779390208, i32 779424768, i32 779459328, i32 779493888, i32 779528448, i32 779563008, i32 779597568, i32 779632128, i32 779666688, i32 779701248, i32 779735808, i32 779770368, i32 779804928, i32 779839488, i32 779874048, i32 779908608, i32 779943168, i32 779977728, i32 780012288, i32 780046848, i32 780081408, i32 780115968, i32 780150528, i32 780185088, i32 780219648, i32 780254208, i32 780288768, i32 780323328, i32 780357888, i32 780392448, i32 780427008, i32 780461568, i32 780496128, i32 780530688, i32 780565248, i32 780599808, i32 780634368, i32 780668928, i32 780703488, i32 780738048, i32 780772608, i32 780807168, i32 780841728, i32 780876288, i32 780910848, i32 780945408, i32 780979968, i32 781014528, i32 781049088, i32 781083648, i32 781118208, i32 781152768, i32 781187328, i32 781221888, i32 781256448, i32 781291008, i32 781325568, i32 781360128, i32 781394688, i32 781429248, i32 781463808, i32 781498368, i32 781532928, i32 781567488, i32 781602048, i32 781636608, i32 781671168, i32 781705728, i32 781740288, i32 781774848, i32 781809408, i32 781843968, i32 781878528, i32 781913088, i32 781947648, i32 781982208, i32 782016768, i32 782051328, i32 782085888, i32 782120448, i32 782155008, i32 782189568, i32 782224128, i32 782258688, i32 782293248, i32 782327808, i32 782362368, i32 782396928, i32 782431488, i32 782466048, i32 782500608, i32 782535168, i32 782569728, i32 782604288, i32 782638848, i32 782673408, i32 782707968, i32 782742528, i32 782777088, i32 782811648, i32 782846208, i32 782880768, i32 782915328, i32 782949888, i32 782984448, i32 783019008, i32 783053568, i32 783088128, i32 783122688, i32 783157248, i32 783191808, i32 783226368, i32 783260928, i32 783295488, i32 783330048, i32 783364608, i32 783399168, i32 783433728, i32 783468288, i32 783502848, i32 783537408, i32 783571968, i32 783606528, i32 783641088, i32 783675648, i32 783710208, i32 783744768, i32 783779328, i32 783813888, i32 783848448, i32 783883008, i32 783917568, i32 783952128, i32 783986688, i32 784021248, i32 784055808, i32 784090368, i32 784124928, i32 784159488, i32 784194048, i32 784228608, i32 784263168, i32 784297728, i32 784332288, i32 784366848, i32 784401408, i32 784435968, i32 784470528, i32 784505088, i32 784539648, i32 784574208, i32 784608768, i32 784643328, i32 784677888, i32 784712448, i32 784747008, i32 784781568, i32 784816128, i32 784850688, i32 784885248, i32 784919808, i32 784954368, i32 784988928, i32 785023488, i32 785058048, i32 785092608, i32 785127168, i32 785161728, i32 785196288, i32 785230848, i32 785265408, i32 785299968, i32 785334528, i32 785369088, i32 785403648, i32 785438208, i32 785472768, i32 785507328, i32 785541888, i32 785576448, i32 785611008, i32 785645568, i32 785680128, i32 785714688, i32 785749248, i32 785783808, i32 785818368, i32 785852928, i32 785887488, i32 785922048, i32 785956608, i32 785991168, i32 786025728, i32 786060288, i32 786094848, i32 786129408, i32 786163968, i32 786198528, i32 786233088, i32 786267648, i32 786302208, i32 786336768, i32 786371328, i32 786405888, i32 786440448, i32 786475008, i32 786509568, i32 786544128, i32 786578688, i32 786613248, i32 786647808, i32 786682368, i32 786716928, i32 786751488, i32 786786048, i32 786820608, i32 786855168, i32 786889728, i32 786924288, i32 786958848, i32 786993408, i32 787027968, i32 787062528, i32 787097088, i32 787131648, i32 787166208, i32 787200768, i32 787235328, i32 787269888, i32 787304448, i32 787339008, i32 787373568, i32 787408128, i32 787442688, i32 787477248, i32 787511808, i32 787546368, i32 787580928, i32 787615488, i32 787650048, i32 787684608, i32 787719168, i32 787753728, i32 787788288, i32 787822848, i32 787857408, i32 787891968, i32 787926528, i32 787961088, i32 787995648, i32 788030208, i32 788064768, i32 788099328, i32 788133888, i32 788168448, i32 788203008, i32 788237568, i32 788272128, i32 788306688, i32 788341248, i32 788375808, i32 788410368, i32 788444928, i32 788479488, i32 788514048, i32 788548608, i32 788583168, i32 788617728, i32 788652288, i32 788686848, i32 788721408, i32 788755968, i32 788790528, i32 788825088, i32 788859648, i32 788894208, i32 788928768, i32 788963328, i32 788997888, i32 789032448, i32 789067008, i32 789101568, i32 789136128, i32 789170688, i32 789205248, i32 789239808, i32 789274368, i32 789308928, i32 789343488, i32 789378048, i32 789412608, i32 789447168, i32 789481728, i32 789516288, i32 789550848, i32 789585408, i32 789619968, i32 789654528, i32 789689088, i32 789723648, i32 789758208, i32 789792768, i32 789827328, i32 789861888, i32 789896448, i32 789931008, i32 789965568, i32 790000128, i32 790034688, i32 790069248, i32 790103808, i32 790138368, i32 790172928, i32 790207488, i32 790242048, i32 790276608, i32 790311168, i32 790345728, i32 790380288, i32 790414848, i32 790449408, i32 790483968, i32 790518528, i32 790553088, i32 790587648, i32 790622208, i32 790656768, i32 790691328, i32 790725888, i32 790760448, i32 790795008, i32 790829568, i32 790864128, i32 790898688, i32 790933248, i32 790967808, i32 791002368, i32 791036928, i32 791071488, i32 791106048, i32 791140608, i32 791175168, i32 791209728, i32 791244288, i32 791278848, i32 791313408, i32 791347968, i32 791382528, i32 791417088, i32 791451648, i32 791486208, i32 791520768, i32 791555328, i32 791589888, i32 791624448, i32 791659008, i32 791693568, i32 791728128, i32 791762688, i32 791797248, i32 791831808, i32 791866368, i32 791900928, i32 791935488, i32 791970048, i32 792004608, i32 792039168, i32 792073728, i32 792108288, i32 792142848, i32 792177408, i32 792211968, i32 792246528, i32 792281088, i32 792315648, i32 792350208, i32 792384768, i32 792419328, i32 792453888, i32 792488448, i32 792523008, i32 792557568, i32 792592128, i32 792626688, i32 792661248, i32 792695808, i32 792730368, i32 792764928, i32 792799488, i32 792834048, i32 792868608, i32 792903168, i32 792937728, i32 792972288, i32 793006848, i32 793041408, i32 793075968, i32 793110528, i32 793145088, i32 793179648, i32 793214208, i32 793248768, i32 793283328, i32 793317888, i32 793352448, i32 793387008, i32 793421568, i32 793456128, i32 793490688, i32 793525248, i32 793559808, i32 793594368, i32 793628928, i32 793663488, i32 793698048, i32 793732608, i32 793767168, i32 793801728, i32 793836288, i32 793870848, i32 793905408, i32 793939968, i32 793974528, i32 794009088, i32 794043648, i32 794078208, i32 794112768, i32 794147328, i32 794181888, i32 794216448, i32 794251008, i32 794285568, i32 794320128, i32 794354688, i32 794389248, i32 794423808, i32 794458368, i32 794492928, i32 794527488, i32 794562048, i32 794596608, i32 794631168, i32 794665728, i32 794700288, i32 794734848, i32 794769408, i32 794803968, i32 794838528, i32 794873088, i32 794907648, i32 794942208, i32 794976768, i32 795011328, i32 795045888, i32 795080448, i32 795115008, i32 795149568, i32 795184128, i32 795218688, i32 795253248, i32 795287808, i32 795322368, i32 795356928, i32 795391488, i32 795426048, i32 795460608, i32 795495168, i32 795529728, i32 795564288, i32 795598848, i32 795633408, i32 795667968, i32 795702528, i32 795737088, i32 795771648, i32 795806208, i32 795840768, i32 795875328, i32 795909888, i32 795944448, i32 795979008, i32 796013568, i32 796048128, i32 796082688, i32 796117248, i32 796151808, i32 796186368, i32 796220928, i32 796255488, i32 796290048, i32 796324608, i32 796359168, i32 796393728, i32 796428288, i32 796462848, i32 796497408, i32 796531968, i32 796566528, i32 796601088, i32 796635648, i32 796670208, i32 796704768, i32 796739328, i32 796773888, i32 796808448, i32 796843008, i32 796877568, i32 796912128, i32 796946688, i32 796981248, i32 797015808, i32 797050368, i32 797084928, i32 797119488, i32 797154048, i32 797188608, i32 797223168, i32 797257728, i32 797292288, i32 797326848, i32 797361408, i32 797395968, i32 797430528, i32 797465088, i32 797499648, i32 797534208, i32 797568768, i32 797603328, i32 797637888, i32 797672448, i32 797707008, i32 797741568, i32 797776128, i32 797810688, i32 797845248, i32 797879808, i32 797914368, i32 797948928, i32 797983488, i32 798018048, i32 798052608, i32 798087168, i32 798121728, i32 798156288, i32 798190848, i32 798225408, i32 798259968, i32 798294528, i32 798329088, i32 798363648, i32 798398208, i32 798432768, i32 798467328, i32 798501888, i32 798536448, i32 798571008, i32 798605568, i32 798640128, i32 798674688, i32 798709248, i32 798743808, i32 798778368, i32 798812928, i32 798847488, i32 798882048, i32 798916608, i32 798951168, i32 798985728, i32 799020288, i32 799054848, i32 799089408, i32 799123968, i32 799158528, i32 799193088, i32 799227648, i32 799262208, i32 799296768, i32 799331328, i32 799365888, i32 799400448, i32 799435008, i32 799469568, i32 799504128, i32 799538688, i32 799573248, i32 799607808, i32 799642368, i32 799676928, i32 799711488, i32 799746048, i32 799780608, i32 799815168, i32 799849728, i32 799884288, i32 799918848, i32 799953408, i32 799987968, i32 800022528, i32 800057088, i32 800091648, i32 800126208, i32 800160768, i32 800195328, i32 800229888, i32 800264448, i32 800299008, i32 800333568, i32 800368128, i32 800402688, i32 800437248, i32 800471808, i32 800506368, i32 800540928, i32 800575488, i32 800610048, i32 800644608, i32 800679168, i32 800713728, i32 800748288, i32 800782848, i32 800817408, i32 800851968, i32 800886528, i32 800921088, i32 800955648, i32 800990208, i32 801024768, i32 801059328, i32 801093888, i32 801128448, i32 801163008, i32 801197568, i32 801232128, i32 801266688, i32 801301248, i32 801335808, i32 801370368, i32 801404928, i32 801439488, i32 801474048, i32 801508608, i32 801543168, i32 801577728, i32 801612288, i32 801646848, i32 801681408, i32 801715968, i32 801750528, i32 801785088, i32 801819648, i32 801854208, i32 801888768, i32 801923328, i32 801957888, i32 801992448, i32 802027008, i32 802061568, i32 802096128, i32 802130688, i32 802165248, i32 802199808, i32 802234368, i32 802268928, i32 802303488, i32 802338048, i32 802372608, i32 802407168, i32 802441728, i32 802476288, i32 802510848, i32 802545408, i32 802579968, i32 802614528, i32 802649088, i32 802683648, i32 802718208, i32 802752768, i32 802787328, i32 802821888, i32 802856448, i32 802891008, i32 802925568, i32 802960128, i32 802994688, i32 803029248, i32 803063808, i32 803098368, i32 803132928, i32 803167488, i32 803202048, i32 803236608, i32 803271168, i32 803305728, i32 803340288, i32 803378688, i32 803417088, i32 803455488, i32 803493888, i32 803532288, i32 803570688, i32 803609088, i32 803647488, i32 803685888, i32 803724288, i32 803762688, i32 803801088, i32 803839488, i32 803877888, i32 803916288, i32 803954688, i32 803993088, i32 804031488, i32 804069888, i32 804108288, i32 804146688, i32 804185088, i32 804223488, i32 804261888, i32 804300288, i32 804338688, i32 804377088, i32 804415488, i32 804453888, i32 804492288, i32 804530688, i32 804569088, i32 804607488, i32 804645888, i32 804684288, i32 804722688, i32 804761088, i32 804799488, i32 804837888, i32 804876288, i32 804914688, i32 804953088, i32 804991488, i32 805029888, i32 805068288, i32 805106688, i32 805145088, i32 805183488, i32 805221888, i32 805260288, i32 805298688, i32 805337088, i32 805375488, i32 805413888, i32 805452288, i32 805490688, i32 805529088, i32 805567488, i32 805605888, i32 805644288, i32 805682688, i32 805721088, i32 805759488, i32 805797888, i32 805836288, i32 805874688, i32 805913088, i32 805951488, i32 805989888, i32 806028288, i32 806066688, i32 806105088, i32 806143488, i32 806181888, i32 806220288, i32 806258688, i32 806297088, i32 806335488, i32 806373888, i32 806412288, i32 806450688, i32 806489088, i32 806527488, i32 806565888, i32 806604288, i32 806642688, i32 806681088, i32 806719488, i32 806757888, i32 806796288, i32 806834688, i32 806873088, i32 806911488, i32 806949888, i32 806988288, i32 807026688, i32 807065088, i32 807103488, i32 807141888, i32 807180288, i32 807218688, i32 807257088, i32 807295488, i32 807333888, i32 807372288, i32 807410688, i32 807449088, i32 807487488, i32 807525888, i32 807564288, i32 807602688, i32 807641088, i32 807679488, i32 807717888, i32 807756288, i32 807794688, i32 807833088, i32 807871488, i32 807909888, i32 807948288, i32 807986688, i32 808025088, i32 808063488, i32 808101888, i32 808140288, i32 808178688, i32 808217088, i32 808255488, i32 808293888, i32 808332288, i32 808370688, i32 808409088, i32 808447488, i32 808485888, i32 808524288, i32 808562688, i32 808601088, i32 808639488, i32 808677888, i32 808716288, i32 808754688, i32 808793088, i32 808831488, i32 808869888, i32 808908288, i32 808946688, i32 808985088, i32 809023488, i32 809061888, i32 809100288, i32 809138688, i32 809177088, i32 809215488, i32 809253888, i32 809292288, i32 809330688, i32 809369088, i32 809407488, i32 809445888, i32 809484288, i32 809522688, i32 809561088, i32 809599488, i32 809637888, i32 809676288, i32 809714688, i32 809753088, i32 809791488, i32 809829888, i32 809868288, i32 809906688, i32 809945088, i32 809983488, i32 810021888, i32 810060288, i32 810098688, i32 810137088, i32 810175488, i32 810213888, i32 810252288, i32 810290688, i32 810329088, i32 810367488, i32 810405888, i32 810444288, i32 810482688, i32 810521088, i32 810559488, i32 810597888, i32 810636288, i32 810674688, i32 810713088, i32 810751488, i32 810789888, i32 810828288, i32 810866688, i32 810905088, i32 810943488, i32 810981888, i32 811020288, i32 811058688, i32 811097088, i32 811135488, i32 811173888, i32 811212288, i32 811250688, i32 811289088, i32 811327488, i32 811365888, i32 811404288, i32 811442688, i32 811481088, i32 811519488, i32 811557888, i32 811596288, i32 811634688, i32 811673088, i32 811711488, i32 811749888, i32 811788288, i32 811826688, i32 811865088, i32 811903488, i32 811941888, i32 811980288, i32 812018688, i32 812057088, i32 812095488, i32 812133888, i32 812172288, i32 812210688, i32 812249088, i32 812287488, i32 812325888, i32 812364288, i32 812402688, i32 812441088, i32 812479488, i32 812517888, i32 812556288, i32 812594688, i32 812633088, i32 812671488, i32 812709888, i32 812748288, i32 812786688, i32 812825088, i32 812863488, i32 812901888, i32 812940288, i32 812978688, i32 813017088, i32 813055488, i32 813093888, i32 813132288, i32 813170688, i32 813209088, i32 813247488, i32 813285888, i32 813324288, i32 813362688, i32 813401088, i32 813439488, i32 813477888, i32 813516288, i32 813554688, i32 813593088, i32 813631488, i32 813669888, i32 813708288, i32 813746688, i32 813785088, i32 813823488, i32 813861888, i32 813900288, i32 813938688, i32 813977088, i32 814015488, i32 814053888, i32 814092288, i32 814130688, i32 814169088, i32 814207488, i32 814245888, i32 814284288, i32 814322688, i32 814361088, i32 814399488, i32 814437888, i32 814476288, i32 814514688, i32 814553088, i32 814591488, i32 814629888, i32 814668288, i32 814706688, i32 814745088, i32 814783488, i32 814821888, i32 814860288, i32 814898688, i32 814937088, i32 814975488, i32 815013888, i32 815052288, i32 815090688, i32 815129088, i32 815167488, i32 815205888, i32 815244288, i32 815282688, i32 815321088, i32 815359488, i32 815397888, i32 815436288, i32 815474688, i32 815513088, i32 815551488, i32 815589888, i32 815628288, i32 815666688, i32 815705088, i32 815743488, i32 815781888, i32 815820288, i32 815858688, i32 815897088, i32 815935488, i32 815973888, i32 816012288, i32 816050688, i32 816089088, i32 816127488, i32 816165888, i32 816204288, i32 816242688, i32 816281088, i32 816319488, i32 816357888, i32 816396288, i32 816434688, i32 816473088, i32 816511488, i32 816549888, i32 816588288, i32 816626688, i32 816665088, i32 816703488, i32 816741888, i32 816780288, i32 816818688, i32 816857088, i32 816895488, i32 816933888, i32 816972288, i32 817010688, i32 817049088, i32 817087488, i32 817125888, i32 817164288, i32 817202688, i32 817241088, i32 817279488, i32 817317888, i32 817356288, i32 817394688, i32 817433088, i32 817471488, i32 817509888, i32 817548288, i32 817586688, i32 817625088, i32 817663488, i32 817701888, i32 817740288, i32 817778688, i32 817817088, i32 817855488, i32 817893888, i32 817932288, i32 817970688, i32 818009088, i32 818047488, i32 818085888, i32 818124288, i32 818162688, i32 818201088, i32 818239488, i32 818277888, i32 818316288, i32 818354688, i32 818393088, i32 818431488, i32 818469888, i32 818508288, i32 818546688, i32 818585088, i32 818623488, i32 818661888, i32 818700288, i32 818738688, i32 818777088, i32 818815488, i32 818853888, i32 818892288, i32 818930688, i32 818969088, i32 819007488, i32 819045888, i32 819084288, i32 819122688, i32 819161088, i32 819199488, i32 819237888, i32 819276288, i32 819314688, i32 819353088, i32 819391488, i32 819429888, i32 819468288, i32 819506688, i32 819545088, i32 819583488, i32 819621888, i32 819660288, i32 819698688, i32 819737088, i32 819775488, i32 819813888, i32 819852288, i32 819890688, i32 819929088, i32 819967488, i32 820005888, i32 820044288, i32 820082688, i32 820121088, i32 820159488, i32 820197888, i32 820236288, i32 820274688, i32 820313088, i32 820351488, i32 820389888, i32 820428288, i32 820466688, i32 820505088, i32 820543488, i32 820581888, i32 820620288, i32 820658688, i32 820697088, i32 820735488, i32 820773888, i32 820812288, i32 820850688, i32 820889088, i32 820927488, i32 820965888, i32 821004288, i32 821042688, i32 821081088, i32 821119488, i32 821157888, i32 821196288, i32 821234688, i32 821273088, i32 821311488, i32 821349888, i32 821388288, i32 821426688, i32 821465088, i32 821503488, i32 821541888, i32 821580288, i32 821618688, i32 821657088, i32 821695488, i32 821733888, i32 821772288, i32 821810688, i32 821849088, i32 821887488, i32 821925888, i32 821964288, i32 822002688, i32 822041088, i32 822079488, i32 822117888, i32 822156288, i32 822194688, i32 822233088, i32 822271488, i32 822309888, i32 822348288, i32 822386688, i32 822425088, i32 822463488, i32 822501888, i32 822540288, i32 822578688, i32 822617088, i32 822655488, i32 822693888, i32 822732288, i32 822770688, i32 822809088, i32 822847488, i32 822885888, i32 822924288, i32 822962688, i32 823001088, i32 823039488, i32 823077888, i32 823116288, i32 823154688, i32 823193088, i32 823231488, i32 823269888, i32 823308288, i32 823346688, i32 823385088, i32 823423488, i32 823461888, i32 823500288, i32 823538688, i32 823577088, i32 823615488, i32 823653888, i32 823692288, i32 823730688, i32 823769088, i32 823807488, i32 823845888, i32 823884288, i32 823922688, i32 823961088, i32 823999488, i32 824037888, i32 824076288, i32 824114688, i32 824153088, i32 824191488, i32 824229888, i32 824268288, i32 824306688, i32 824345088, i32 824383488, i32 824421888, i32 824460288, i32 824498688, i32 824537088, i32 824575488, i32 824613888, i32 824652288, i32 824690688, i32 824729088, i32 824767488, i32 824805888, i32 824844288, i32 824882688, i32 824921088, i32 824959488, i32 824997888, i32 825036288, i32 825074688, i32 825113088, i32 825151488, i32 825189888, i32 825228288, i32 825266688, i32 825305088, i32 825343488, i32 825381888, i32 825420288, i32 825458688, i32 825497088, i32 825535488, i32 825573888, i32 825612288, i32 825650688, i32 825689088, i32 825727488, i32 825765888, i32 825804288, i32 825842688, i32 825881088, i32 825919488, i32 825957888, i32 825996288, i32 826034688, i32 826073088, i32 826111488, i32 826149888, i32 826188288, i32 826226688, i32 826265088, i32 826303232, i32 826341632, i32 826380032, i32 826418432, i32 826456832, i32 826495232, i32 826533632, i32 826572032, i32 826610432, i32 826648832, i32 826687232, i32 826725632, i32 826764032, i32 826802432, i32 826840832, i32 826879232, i32 826917632, i32 826956032, i32 826994432, i32 827032832, i32 827071232, i32 827109632, i32 827148032, i32 827186432, i32 827224832, i32 827263232, i32 827301632, i32 827340032, i32 827378432, i32 827416832, i32 827455232, i32 827493632, i32 827532032, i32 827570432, i32 827608832, i32 827647232, i32 827685632, i32 827724032, i32 827762432, i32 827800832, i32 827839232, i32 827877632, i32 827916032, i32 827954432, i32 827992832, i32 828031232, i32 828069632, i32 828108032, i32 828146432, i32 828184832, i32 828223232, i32 828261632, i32 828300032, i32 828338432, i32 828376832, i32 828415232, i32 828453632, i32 828492032, i32 828530432, i32 828568832, i32 828607232, i32 828645632, i32 828684032, i32 828722432, i32 828760832, i32 828799232, i32 828837632, i32 828876032, i32 828914432, i32 828952832, i32 828991232, i32 829029632, i32 829068032, i32 829106432, i32 829144832, i32 829183232, i32 829221632, i32 829260032, i32 829298432, i32 829336832, i32 829375232, i32 829413632, i32 829452032, i32 829490432, i32 829528832, i32 829567232, i32 829605632, i32 829644032, i32 829682432, i32 829720832, i32 829759232, i32 829797632, i32 829836032, i32 829874432, i32 829912832, i32 829951232, i32 829989632, i32 830028032, i32 830066432, i32 830104832, i32 830143232, i32 830181632, i32 830220032, i32 830258432, i32 830296832, i32 830335232, i32 830373632, i32 830412032, i32 830450432, i32 830488832, i32 830527232, i32 830565632, i32 830604032, i32 830642432, i32 830680832, i32 830719232, i32 830757632, i32 830796032, i32 830834432, i32 830872832, i32 830911232, i32 830949632, i32 830988032, i32 831026432, i32 831064832, i32 831103232, i32 831141632, i32 831180032, i32 831218432, i32 831256832, i32 831295232, i32 831333632, i32 831372032, i32 831410432, i32 831448832, i32 831487232, i32 831525632, i32 831564032, i32 831602432, i32 831640832, i32 831679232, i32 831717632, i32 831756032, i32 831794432, i32 831832832, i32 831871232, i32 831909632, i32 831948032, i32 831986432, i32 832024832, i32 832063232, i32 832101632, i32 832140032, i32 832178432, i32 832216832, i32 832255232, i32 832293632, i32 832332032, i32 832370432, i32 832408832, i32 832447232, i32 832485632, i32 832524032, i32 832562432, i32 832600832, i32 832639232, i32 832677632, i32 832716032, i32 832754432, i32 832792832, i32 832831232, i32 832869632, i32 832908032, i32 832946432, i32 832984832, i32 833023232, i32 833061632, i32 833100032, i32 833138432, i32 833176832, i32 833215232, i32 833253632, i32 833292032, i32 833330432, i32 833368832, i32 833407232, i32 833445632, i32 833484032, i32 833522432, i32 833560832, i32 833599232, i32 833637632, i32 833676032, i32 833714432, i32 833752832, i32 833791232, i32 833829632, i32 833868032, i32 833906432, i32 833944832, i32 833983232, i32 834021632, i32 834060032, i32 834098432, i32 834136832, i32 834175232, i32 834213632, i32 834252032, i32 834290432, i32 834328832, i32 834367232, i32 834405632, i32 834444032, i32 834482432, i32 834520832, i32 834559232, i32 834597632, i32 834636032, i32 834674432, i32 834712832, i32 834751232, i32 834789632, i32 834828032, i32 834866432, i32 834904832, i32 834943232, i32 834981632, i32 835020032, i32 835058432, i32 835096832, i32 835135232, i32 835173632, i32 835212032, i32 835250432, i32 835288832, i32 835327232, i32 835365632, i32 835404032, i32 835442432, i32 835480832, i32 835519232, i32 835557632, i32 835596032, i32 835634432, i32 835672832, i32 835711232, i32 835749632, i32 835788032, i32 835826432, i32 835864832, i32 835903232, i32 835941632, i32 835980032, i32 836018432, i32 836056832, i32 836095232, i32 836133632, i32 836172032, i32 836210432, i32 836248832, i32 836287232, i32 836325632, i32 836364032, i32 836402432, i32 836440832, i32 836479232, i32 836517632, i32 836556032, i32 836594432, i32 836632832, i32 836671232, i32 836709632, i32 836748032, i32 836786432, i32 836824832, i32 836863232, i32 836901632, i32 836940032, i32 836978432, i32 837016832, i32 837055232, i32 837093632, i32 837132032, i32 837170432, i32 837208832, i32 837247232, i32 837285632, i32 837324032, i32 837362432, i32 837400832, i32 837439232, i32 837477632, i32 837516032, i32 837554432, i32 837592832, i32 837631232, i32 837669632, i32 837708032, i32 837746432, i32 837784832, i32 837823232, i32 837861632, i32 837900032, i32 837938432, i32 837976832, i32 838015232, i32 838053632, i32 838092032, i32 838130432, i32 838168832, i32 838207232, i32 838245632, i32 838284032, i32 838322432, i32 838360832, i32 838399232, i32 838437632, i32 838476032, i32 838514432, i32 838552832, i32 838591232, i32 838629632, i32 838668032, i32 838706432, i32 838744832, i32 838783232, i32 838821632, i32 838860032, i32 838898432, i32 838936832, i32 838975232, i32 839013632, i32 839052032, i32 839090432, i32 839128832, i32 839167232, i32 839205632, i32 839244032, i32 839282432, i32 839320832, i32 839359232, i32 839397632, i32 839436032, i32 839474432, i32 839512832, i32 839551232, i32 839589632, i32 839628032, i32 839666432, i32 839704832, i32 839743232, i32 839781632, i32 839820032, i32 839858432, i32 839896832, i32 839935232, i32 839973632, i32 840012032, i32 840050432, i32 840088832, i32 840127232, i32 840165632, i32 840204032, i32 840242432, i32 840280832, i32 840319232, i32 840357632, i32 840396032, i32 840434432, i32 840472832, i32 840511232, i32 840549632, i32 840588032, i32 840626432, i32 840664832, i32 840703232, i32 840741632, i32 840780032, i32 840818432, i32 840856832, i32 840895232, i32 840933632, i32 840972032, i32 841010432, i32 841048832, i32 841087232, i32 841125632, i32 841164032, i32 841202432, i32 841240832, i32 841279232, i32 841317632, i32 841356032, i32 841394432, i32 841432832, i32 841471232, i32 841509632, i32 841548032, i32 841586432, i32 841624832, i32 841663232, i32 841701632, i32 841740032, i32 841778432, i32 841816832, i32 841855232, i32 841893632, i32 841932032, i32 841970432, i32 842008832, i32 842047232, i32 842085632, i32 842124032, i32 842162432, i32 842200832, i32 842239232, i32 842277632, i32 842316032, i32 842354432, i32 842392832, i32 842431232, i32 842469632, i32 842508032, i32 842546432, i32 842584832, i32 842623232, i32 842661632, i32 842703872, i32 842746112, i32 842788352, i32 842830592, i32 842872832, i32 842915072, i32 842957312, i32 842999552, i32 843041792, i32 843084032, i32 843126272, i32 843168512, i32 843210752, i32 843252992, i32 843295232, i32 843337472, i32 843379712, i32 843421952, i32 843464192, i32 843506432, i32 843548672, i32 843590912, i32 843633152, i32 843675392, i32 843717632, i32 843759872, i32 843802112, i32 843844352, i32 843886592, i32 843928832, i32 843971072, i32 844013312, i32 844055552, i32 844097792, i32 844140032, i32 844182272, i32 844224512, i32 844266752, i32 844308992, i32 844351232, i32 844393472, i32 844435712, i32 844477952, i32 844520192, i32 844562432, i32 844604672, i32 844646912, i32 844689152, i32 844731392, i32 844773632, i32 844815872, i32 844858112, i32 844900352, i32 844942592, i32 844984832, i32 845027072, i32 845069312, i32 845111552, i32 845153792, i32 845196032, i32 845238272, i32 845280512, i32 845322752, i32 845364992, i32 845407232, i32 845449472, i32 845491712, i32 845533952, i32 845576192, i32 845618432, i32 845660672, i32 845702912, i32 845745152, i32 845787392, i32 845829632, i32 845871872, i32 845914112, i32 845956352, i32 845998592, i32 846040832, i32 846083072, i32 846125312, i32 846167552, i32 846209792, i32 846252032, i32 846294272, i32 846336512, i32 846378752, i32 846420992, i32 846463232, i32 846505472, i32 846547712, i32 846589952, i32 846632192, i32 846674432, i32 846716672, i32 846758912, i32 846801152, i32 846843392, i32 846885632, i32 846927872, i32 846970112, i32 847012352, i32 847054592, i32 847096832, i32 847139072, i32 847181312, i32 847223552, i32 847265792, i32 847308032, i32 847350272, i32 847392512, i32 847434752, i32 847476992, i32 847519232, i32 847561472, i32 847603712, i32 847645952, i32 847688192, i32 847730432, i32 847772672, i32 847814912, i32 847857152, i32 847899392, i32 847941632, i32 847983872, i32 848026112, i32 848068352, i32 848110592, i32 848152832, i32 848195072, i32 848237312, i32 848279552, i32 848321792, i32 848364032, i32 848406272, i32 848448512, i32 848490752, i32 848532992, i32 848575232, i32 848617472, i32 848659712, i32 848701952, i32 848744192, i32 848786432, i32 848828672, i32 848870912, i32 848913152, i32 848955392, i32 848997632, i32 849039872, i32 849082112, i32 849124352, i32 849166592, i32 849208832, i32 849251072, i32 849293312, i32 849335552, i32 849377792, i32 849420032, i32 849462272, i32 849504512, i32 849546752, i32 849588992, i32 849631232, i32 849673472, i32 849715712, i32 849757952, i32 849800192, i32 849842432, i32 849884672, i32 849926912, i32 849969152, i32 850011392, i32 850053632, i32 850095872, i32 850138112, i32 850180352, i32 850222592, i32 850264832, i32 850307072, i32 850349312, i32 850391552, i32 850433792, i32 850476032, i32 850518272, i32 850560512, i32 850602752, i32 850644992, i32 850687232, i32 850729472, i32 850771712, i32 850813952, i32 850856192, i32 850898432, i32 850940672, i32 850982912, i32 851025152, i32 851067392, i32 851109632, i32 851151872, i32 851194112, i32 851236352, i32 851278592, i32 851320832, i32 851363072, i32 851405312, i32 851447552, i32 851489792, i32 851532032, i32 851574272, i32 851616512, i32 851658752, i32 851700992, i32 851743232, i32 851785472, i32 851827712, i32 851869952, i32 851912192, i32 851954432, i32 851996672, i32 852038912, i32 852081152, i32 852123392, i32 852165632, i32 852207872, i32 852250112, i32 852292352, i32 852334592, i32 852376832, i32 852419072, i32 852461312, i32 852503552, i32 852545792, i32 852588032, i32 852630272, i32 852672512, i32 852714752, i32 852756992, i32 852799232, i32 852841472, i32 852883712, i32 852925952, i32 852968192, i32 853010432, i32 853052672, i32 853094912, i32 853137152, i32 853179392, i32 853221632, i32 853263872, i32 853306112, i32 853348352, i32 853390592, i32 853432832, i32 853475072, i32 853517312, i32 853559552, i32 853601792, i32 853644032, i32 853686272, i32 853728512, i32 853770752, i32 853812992, i32 853855232, i32 853897472, i32 853939712, i32 853981952, i32 854024192, i32 854066432, i32 854108672, i32 854150912, i32 854193152, i32 854235392, i32 854277632, i32 854319872, i32 854362112, i32 854404352, i32 854446592, i32 854488832, i32 854531072, i32 854573312, i32 854615552, i32 854657792, i32 854700032, i32 854742272, i32 854784512, i32 854826752, i32 854868992, i32 854911232, i32 854953472, i32 854995712, i32 855037952, i32 855080192, i32 855122432, i32 855164672, i32 855206912, i32 855249152, i32 855291392, i32 855333632, i32 855375872, i32 855418112, i32 855460352, i32 855502592, i32 855544832, i32 855587072, i32 855629312, i32 855671552, i32 855713792, i32 855756032, i32 855798272, i32 855840512, i32 855882752, i32 855924992, i32 855967232, i32 856009472, i32 856051712, i32 856093952, i32 856136192, i32 856178432, i32 856220672, i32 856262912, i32 856305152, i32 856347392, i32 856389632, i32 856431872, i32 856474112, i32 856516352, i32 856558592, i32 856600832, i32 856643072, i32 856685312, i32 856727552, i32 856769792, i32 856812032, i32 856854272, i32 856896512, i32 856938752, i32 856980992, i32 857023232, i32 857065472, i32 857107712, i32 857149952, i32 857192192, i32 857234432, i32 857276672, i32 857318912, i32 857361152, i32 857403392, i32 857445632, i32 857487872, i32 857530112, i32 857572352, i32 857614592, i32 857656832, i32 857699072, i32 857741312, i32 857783552, i32 857825792, i32 857868032, i32 857910272, i32 857952512, i32 857994752, i32 858036992, i32 858079232, i32 858121472, i32 858163712, i32 858205952, i32 858248192, i32 858290432, i32 858332672, i32 858374912, i32 858417152, i32 858459392, i32 858501632, i32 858543872, i32 858586112, i32 858628352, i32 858670592, i32 858712832, i32 858755072, i32 858797312, i32 858839552, i32 858881792, i32 858924032, i32 858966272, i32 859008512, i32 859050752, i32 859092992, i32 859135232, i32 859177472, i32 859219712, i32 859261952, i32 859304192, i32 859346432, i32 859388672, i32 859430912, i32 859473152, i32 859515392, i32 859557632, i32 859599872, i32 859642112, i32 859684352, i32 859726592, i32 859768832, i32 859811072, i32 859853312, i32 859895552, i32 859937792, i32 859980032, i32 860022272, i32 860064512, i32 860106752, i32 860148992, i32 860191232, i32 860233472, i32 860275712, i32 860317952, i32 860360192, i32 860402432, i32 860444672, i32 860486912, i32 860529152, i32 860571392, i32 860613632, i32 860655872, i32 860698112, i32 860740352, i32 860782592, i32 860824832, i32 860867072, i32 860909312, i32 860951552, i32 860993792, i32 861036032, i32 861078272, i32 861120512, i32 861162752, i32 861204992, i32 861247232, i32 861289472, i32 861331712, i32 861373952, i32 861416192, i32 861458432, i32 861500672, i32 861542912, i32 861585152, i32 861627392, i32 861669632, i32 861711872, i32 861754112, i32 861796352, i32 861838592, i32 861880832, i32 861923072, i32 861965312, i32 862007552, i32 862049792, i32 862092032, i32 862134272, i32 862176512, i32 862218752, i32 862260992, i32 862303232, i32 862345472, i32 862387712, i32 862429952, i32 862472192, i32 862514432, i32 862556672, i32 862598912, i32 862641152, i32 862683392, i32 862725632, i32 862767872, i32 862810112, i32 862852352, i32 862894592, i32 862936832, i32 862979072, i32 863021312, i32 863063552, i32 863105792, i32 863148032, i32 863190272, i32 863232512, i32 863274752, i32 863316992, i32 863359232, i32 863401472, i32 863443712, i32 863485952, i32 863528192, i32 863570432, i32 863612672, i32 863654912, i32 863697152, i32 863739392, i32 863781632, i32 863823872, i32 863866112, i32 863908352, i32 863950592, i32 863992832, i32 864035072, i32 864077312, i32 864119552, i32 864161792, i32 864204032, i32 864246272, i32 864288512, i32 864331520, i32 864374528, i32 864417536, i32 864460544, i32 864503552, i32 864546560, i32 864589568, i32 864632576, i32 864675584, i32 864718592, i32 864761600, i32 864804608, i32 864847616, i32 864890624, i32 864933632, i32 864976640, i32 865019648, i32 865062656, i32 865105664, i32 865148672, i32 865191680, i32 865234688, i32 865277696, i32 865320704, i32 865363712, i32 865406720, i32 865449728, i32 865492736, i32 865535744, i32 865578752, i32 865621760, i32 865664768, i32 865707776, i32 865750784, i32 865793792, i32 865836800, i32 865879808, i32 865922816, i32 865965824, i32 866008832, i32 866051840, i32 866094848, i32 866137856, i32 866180864, i32 866223872, i32 866266880, i32 866309888, i32 866352896, i32 866395904, i32 866438912, i32 866481920, i32 866524928, i32 866567936, i32 866610944, i32 866653952, i32 866696960, i32 866739968, i32 866782976, i32 866825984, i32 866868992, i32 866912000, i32 866955008, i32 866998016, i32 867041024, i32 867084032, i32 867127040, i32 867170048, i32 867213056, i32 867256064, i32 867299072, i32 867342080, i32 867385088, i32 867428096, i32 867471104, i32 867514112, i32 867557120, i32 867600128, i32 867643136, i32 867686144, i32 867729152, i32 867772160, i32 867815168, i32 867858176, i32 867901184, i32 867944192, i32 867987200, i32 868030208, i32 868073216, i32 868116224, i32 868159232, i32 868202240, i32 868245248, i32 868288256, i32 868331264, i32 868374272, i32 868417280, i32 868460288, i32 868503296, i32 868546304, i32 868589312, i32 868632320, i32 868675328, i32 868718336, i32 868761344, i32 868804352, i32 868847360, i32 868890368, i32 868933376, i32 868976384, i32 869019392, i32 869062400, i32 869105408, i32 869148416, i32 869191424, i32 869234432, i32 869277440, i32 869320448, i32 869363456, i32 869406464, i32 869449472, i32 869492480, i32 869535488, i32 869578496, i32 869621504, i32 869664512, i32 869707520, i32 869750528, i32 869793792, i32 869836800, i32 869879808, i32 869922816, i32 869965824, i32 870008832, i32 870051840, i32 870094848, i32 870137856, i32 870180864, i32 870223872, i32 870266880, i32 870309888, i32 870352896, i32 870395904, i32 870438912, i32 870481920, i32 870524928, i32 870567936, i32 870610944, i32 870653952, i32 870696960, i32 870739968, i32 870782976, i32 870825984, i32 870868992, i32 870912000, i32 870955008, i32 870998016, i32 871041024, i32 871084032, i32 871127040, i32 871170048, i32 871213056, i32 871256064, i32 871299072, i32 871342080, i32 871385088, i32 871428096, i32 871471104, i32 871514112, i32 871557120, i32 871600128, i32 871643136, i32 871686144, i32 871729152, i32 871772160, i32 871815168, i32 871858176, i32 871901184, i32 871944192, i32 871987200, i32 872030208, i32 872073216, i32 872116224, i32 872159232, i32 872202240, i32 872245248, i32 872288256, i32 872331264, i32 872374272, i32 872417280, i32 872460288, i32 872503296, i32 872546304, i32 872589312, i32 872632320, i32 872675328, i32 872718336, i32 872761344, i32 872804352, i32 872847360, i32 872890368, i32 872933376, i32 872976384, i32 873019392, i32 873062400, i32 873105408, i32 873148416, i32 873191424, i32 873234432, i32 873277440, i32 873320448, i32 873363456, i32 873406464, i32 873449472, i32 873492480, i32 873535488, i32 873578496, i32 873621504, i32 873664512, i32 873707520, i32 873750528, i32 873793536, i32 873836544, i32 873879552, i32 873922560, i32 873965568, i32 874008576, i32 874051584, i32 874094592, i32 874137600, i32 874180608, i32 874223616, i32 874266624, i32 874309632, i32 874352640, i32 874395648, i32 874438656, i32 874481664, i32 874524672, i32 874567680, i32 874610688, i32 874653696, i32 874696704, i32 874739712, i32 874782720, i32 874825728, i32 874868736, i32 874911744, i32 874954752, i32 874997760, i32 875040768, i32 875083776, i32 875126784, i32 875169792, i32 875212800, i32 875255808, i32 875298816, i32 875341824, i32 875384832, i32 875427840, i32 875470848, i32 875513856, i32 875556864, i32 875599872, i32 875642880, i32 875685888, i32 875728896, i32 875771904, i32 875814912, i32 875857920, i32 875900928, i32 875943936, i32 875986944, i32 876029952, i32 876072960, i32 876115968, i32 876158976, i32 876201984, i32 876244992, i32 876288000, i32 876331008, i32 876374016, i32 876417024, i32 876460032, i32 876503040, i32 876546048, i32 876589056, i32 876632064, i32 876675072, i32 876718080, i32 876761088, i32 876804096, i32 876847104, i32 876890112, i32 876933120, i32 876976128, i32 877019136, i32 877062144, i32 877105152, i32 877148160, i32 877191168, i32 877234176, i32 877277184, i32 877320192, i32 877363200, i32 877406208, i32 877449216, i32 877492224, i32 877535232, i32 877578240, i32 877621248, i32 877664256, i32 877707264, i32 877750272, i32 877793280, i32 877836288, i32 877879296, i32 877922304, i32 877965312, i32 878008320, i32 878051328, i32 878094336, i32 878137344, i32 878180352, i32 878223360, i32 878266368, i32 878309376, i32 878352384, i32 878395392, i32 878438400, i32 878481408, i32 878524416, i32 878567424, i32 878610432, i32 878653440, i32 878696448, i32 878739456, i32 878782464, i32 878825472, i32 878868480, i32 878911488, i32 878954496, i32 878997504, i32 879040512, i32 879083520, i32 879126528, i32 879169536, i32 879212544, i32 879255552, i32 879298560, i32 879341568, i32 879384576, i32 879427584, i32 879470592, i32 879513600, i32 879556608, i32 879599616, i32 879642624, i32 879685632, i32 879728640, i32 879771648, i32 879814656, i32 879857664, i32 879900672, i32 879943680, i32 879986688, i32 880029696, i32 880072704, i32 880115712, i32 880158720, i32 880201728, i32 880244736, i32 880287744, i32 880330752, i32 880373760, i32 880416768, i32 880459776, i32 880502784, i32 880545792, i32 880588800, i32 880631808, i32 880674816, i32 880717824, i32 880760832, i32 880803840, i32 880846848, i32 880889856, i32 880932864, i32 880975872, i32 881018880, i32 881061888, i32 881104896, i32 881147904, i32 881190912, i32 881233920, i32 881276928, i32 881319936, i32 881362944, i32 881405952, i32 881448960, i32 881491968, i32 881534976, i32 881577984, i32 881620992, i32 881664000, i32 881707008, i32 881750016, i32 881793024, i32 881836032, i32 881879040, i32 881922048, i32 881965056, i32 882008064, i32 882051072, i32 882094080, i32 882137088, i32 882180096, i32 882223104, i32 882266112, i32 882309120, i32 882352128, i32 882395136, i32 882438144, i32 882481152, i32 882524160, i32 882567168, i32 882610176, i32 882653184, i32 882696192, i32 882739200, i32 882782208, i32 882825216, i32 882868224, i32 882911232, i32 882954240, i32 882997248, i32 883040256, i32 883083264, i32 883126272, i32 883169280, i32 883212288, i32 883255296, i32 883298304, i32 883341312, i32 883384320, i32 883427328, i32 883470336, i32 883513344, i32 883556352, i32 883599360, i32 883642368, i32 883685376, i32 883728384, i32 883771392, i32 883814400, i32 883857408, i32 883900416, i32 883943424, i32 883986432, i32 884029440, i32 884072448, i32 884115456, i32 884158464, i32 884201472, i32 884244480, i32 884287488, i32 884330496, i32 884373504, i32 884416512, i32 884459520, i32 884502528, i32 884545536, i32 884588544, i32 884631552, i32 884674560, i32 884717568, i32 884760576, i32 884803584, i32 884846592, i32 884889600, i32 884932608, i32 884975616, i32 885018624, i32 885061632, i32 885104640, i32 885147648, i32 885190656, i32 885233664, i32 885276672, i32 885319680, i32 885362688, i32 885405696, i32 885448704, i32 885491712, i32 885534720, i32 885577728, i32 885620736, i32 885663744, i32 885706752, i32 885749760, i32 885792768, i32 885835776, i32 885878784, i32 885921792, i32 885964800, i32 886007808, i32 886050816, i32 886093824, i32 886136832, i32 886179840, i32 886222848, i32 886265856, i32 886308864, i32 886356736, i32 886404608, i32 886452480, i32 886500352, i32 886548224, i32 886596096, i32 886643968, i32 886691840, i32 886739712, i32 886787584, i32 886835456, i32 886883328, i32 886931200, i32 886979072, i32 887026944, i32 887074816, i32 887122688, i32 887170560, i32 887218432, i32 887266304, i32 887314176, i32 887362048, i32 887409920, i32 887457792, i32 887505664, i32 887553536, i32 887601408, i32 887649280, i32 887697152, i32 887745024, i32 887792896, i32 887840768, i32 887888640, i32 887936512, i32 887984384, i32 888032256, i32 888080128, i32 888128000, i32 888175872, i32 888223744, i32 888271616, i32 888319488, i32 888367360, i32 888415232, i32 888463104, i32 888510976, i32 888558848, i32 888606720, i32 888654592, i32 888702464, i32 888750336, i32 888798208, i32 888846080, i32 888893952, i32 888941824, i32 888989696, i32 889037568, i32 889085440, i32 889133312, i32 889181184, i32 889229056, i32 889276928, i32 889324800, i32 889372672, i32 889420544, i32 889468416, i32 889516288, i32 889564160, i32 889612032, i32 889659904, i32 889707776, i32 889755648, i32 889803520, i32 889851392, i32 889899264, i32 889947136, i32 889995008, i32 890042880, i32 890090752, i32 890138624, i32 890186496, i32 890234368, i32 890282240, i32 890330112, i32 890377984, i32 890425856, i32 890473728, i32 890521600, i32 890569472, i32 890617344, i32 890665216, i32 890713088, i32 890760960, i32 890808832, i32 890856704, i32 890904576, i32 890952448, i32 891000320, i32 891048192, i32 891096064, i32 891143936, i32 891191808, i32 891239680, i32 891287552, i32 891335424, i32 891383296, i32 891431168, i32 891479040, i32 891526912, i32 891574784, i32 891622656, i32 891670528, i32 891718400, i32 891766272, i32 891814144, i32 891862016, i32 891909888, i32 891957760, i32 892005632, i32 892053504, i32 892101376, i32 892149248, i32 892197120, i32 892244992, i32 892292864, i32 892340736, i32 892388608, i32 892436480, i32 892484352, i32 892532224, i32 892580096, i32 892627968, i32 892675840, i32 892723712, i32 892771584, i32 892819456, i32 892867328, i32 892915200, i32 892963072, i32 893010944, i32 893058816, i32 893106688, i32 893154560, i32 893202432, i32 893250304, i32 893298176, i32 893346048, i32 893393920, i32 893441792, i32 893489664, i32 893537536, i32 893585408, i32 893633280, i32 893681152, i32 893729024, i32 893776896, i32 893824768, i32 893872640, i32 893920512, i32 893968384, i32 894016256, i32 894064128, i32 894112000, i32 894159872, i32 894207744, i32 894255616, i32 894303488, i32 894351360, i32 894399232, i32 894447104, i32 894494976, i32 894542848, i32 894590720, i32 894638592, i32 894686464, i32 894734336, i32 894782208, i32 894830080, i32 894877952, i32 894925824, i32 894973696, i32 895021568, i32 895069440, i32 895117312, i32 895165184, i32 895213056, i32 895260928, i32 895308800, i32 895356672, i32 895404544, i32 895452416, i32 895500288, i32 895548160, i32 895596032, i32 895643904, i32 895691776, i32 895739648, i32 895787520, i32 895835392, i32 895883264, i32 895931136, i32 895979008, i32 896026880, i32 896074752, i32 896122624, i32 896170496, i32 896218368, i32 896266240, i32 896314112, i32 896361984, i32 896409856, i32 896457728, i32 896505600, i32 896553472, i32 896601344, i32 896649216, i32 896697088, i32 896744960, i32 896792832, i32 896840704, i32 896888576, i32 896936448, i32 896984320, i32 897032192, i32 897080064, i32 897127936, i32 897175808, i32 897223680, i32 897271552, i32 897319424, i32 897367296, i32 897415168, i32 897463040, i32 897510912, i32 897558784, i32 897606656, i32 897654528, i32 897702400, i32 897750272, i32 897798144, i32 897846016, i32 897893888, i32 897941760, i32 897989632, i32 898037504, i32 898085376, i32 898133248, i32 898181120, i32 898228992, i32 898276864, i32 898324736, i32 898372608, i32 898420480, i32 898468352, i32 898516224, i32 898564096, i32 898611968, i32 898659840, i32 898707712, i32 898755584, i32 898803456, i32 898851328, i32 898899200, i32 898947072, i32 898994944, i32 899042816, i32 899090688, i32 899138560, i32 899186432, i32 899234304, i32 899282176, i32 899330048, i32 899377920, i32 899425792, i32 899473664, i32 899521536, i32 899569408, i32 899617280, i32 899665152, i32 899713024, i32 899760896, i32 899808768, i32 899856640, i32 899904512, i32 899952384, i32 900000256, i32 900048128, i32 900096000, i32 900143872, i32 900191744, i32 900239616, i32 900287488, i32 900335360, i32 900383232, i32 900431104, i32 900478976, i32 900526848, i32 900574720, i32 900622592, i32 900670464, i32 900718336, i32 900766208, i32 900814080, i32 900861952, i32 900909824, i32 900957696, i32 901005568, i32 901053440, i32 901101312, i32 901149184, i32 901197056, i32 901244928, i32 901292800, i32 901340672, i32 901388544, i32 901436416, i32 901484288, i32 901532160, i32 901580032, i32 901627904, i32 901675776, i32 901723648, i32 901771520, i32 901819392, i32 901867264, i32 901915136, i32 901963008, i32 902010880, i32 902058752, i32 902106624, i32 902154496, i32 902202368, i32 902250240, i32 902298112, i32 902345984, i32 902393856, i32 902441728, i32 902489600, i32 902537472, i32 902585344, i32 902633216, i32 902681088, i32 902728960, i32 902776832, i32 902824704, i32 902872576, i32 902920448, i32 902968320, i32 903016192, i32 903064064, i32 903111936, i32 903159808, i32 903207680, i32 903255552, i32 903303424, i32 903351296, i32 903399168, i32 903447040, i32 903494912, i32 903542784, i32 903590656, i32 903638528, i32 903686400, i32 903734272, i32 903782144, i32 903830016, i32 903877888, i32 903925760, i32 903973632, i32 904021504, i32 904069376, i32 904117248, i32 904165120, i32 904212992, i32 904260864, i32 904308736, i32 904356608, i32 904404480, i32 904452352, i32 904500224, i32 904548096, i32 904595968, i32 904643840, i32 904691712, i32 904739584, i32 904787456, i32 904835328, i32 904883200, i32 904931072, i32 904978944, i32 905026816, i32 905074688, i32 905122560, i32 905170432, i32 905218304, i32 905266176, i32 905314048, i32 905361920, i32 905409792, i32 905457664, i32 905505536, i32 905553408, i32 905601280, i32 905649152, i32 905697024, i32 905744896, i32 905792768, i32 905840640, i32 905888512, i32 905936384, i32 905984256, i32 906032128, i32 906080000, i32 906127872, i32 906175744, i32 906223616, i32 906271488, i32 906319360, i32 906367232, i32 906415104, i32 906462976, i32 906510848, i32 906558720, i32 906606592, i32 906654464, i32 906702336, i32 906750208, i32 906798080, i32 906845952, i32 906893824, i32 906941696, i32 906989568, i32 907037440, i32 907085312, i32 907133184, i32 907181056, i32 907228928, i32 907276800, i32 907324672, i32 907372544, i32 907420416, i32 907468288, i32 907516160, i32 907564032, i32 907611904, i32 907659776, i32 907707648, i32 907755520, i32 907803392, i32 907851264, i32 907899136, i32 907947008, i32 907994880, i32 908042752, i32 908090624, i32 908138496, i32 908186368, i32 908234240, i32 908282112, i32 908329984, i32 908377856, i32 908425728, i32 908473600, i32 908521472, i32 908569344, i32 908617216, i32 908665088, i32 908712960, i32 908760832, i32 908808704, i32 908856576, i32 908904448, i32 908952320, i32 909000192, i32 909048064, i32 909095936, i32 909143808, i32 909191680, i32 909239552, i32 909287424, i32 909335296, i32 909383168, i32 909431040, i32 909478912, i32 909526784, i32 909574656, i32 909622528, i32 909670400, i32 909718272, i32 909766144, i32 909814016, i32 909861888, i32 909909760, i32 909957632, i32 910005504, i32 910053376, i32 910101248, i32 910149120, i32 910196992, i32 910244864, i32 910292736, i32 910340608, i32 910388480, i32 910436352, i32 910484224, i32 910532096, i32 910579968, i32 910627840, i32 910675712, i32 910723584, i32 910771456, i32 910819328, i32 910868480, i32 910917632, i32 910966784, i32 911015936, i32 911065088, i32 911114240, i32 911163392, i32 911212544, i32 911261696, i32 911310848, i32 911360000, i32 911409152, i32 911458304, i32 911507456, i32 911556608, i32 911605760, i32 911654912, i32 911704064, i32 911753216, i32 911802368, i32 911851520, i32 911900672, i32 911949824, i32 911998976, i32 912048128, i32 912097280, i32 912146432, i32 912195584, i32 912244736, i32 912293888, i32 912343040, i32 912392192, i32 912441344, i32 912490496, i32 912539648, i32 912588800, i32 912637952, i32 912687104, i32 912736256, i32 912785408, i32 912834560, i32 912883712, i32 912932864, i32 912982016, i32 913031168, i32 913080320, i32 913129472, i32 913178624, i32 913227776, i32 913276928, i32 913326080, i32 913375232, i32 913424384, i32 913473536, i32 913522688, i32 913571840, i32 913620992, i32 913670144, i32 913719296, i32 913768448, i32 913817600, i32 913866752, i32 913915904, i32 913965056, i32 914014208, i32 914063360, i32 914112512, i32 914161664, i32 914210816, i32 914259968, i32 914309120, i32 914358272, i32 914407424, i32 914456576, i32 914505728, i32 914554880, i32 914604032, i32 914653184, i32 914702336, i32 914751488, i32 914800640, i32 914849792, i32 914898944, i32 914948096, i32 914997248, i32 915046400, i32 915095552, i32 915144704, i32 915193856, i32 915243008, i32 915292160, i32 915341312, i32 915390464, i32 915439616, i32 915488768, i32 915537920, i32 915587072, i32 915636224, i32 915685376, i32 915734528, i32 915783680, i32 915832832, i32 915881984, i32 915931136, i32 915980288, i32 916029440, i32 916078592, i32 916127744, i32 916176896, i32 916226048, i32 916275200, i32 916324352, i32 916373504, i32 916422656, i32 916471808, i32 916520960, i32 916570112, i32 916619264, i32 916668416, i32 916717568, i32 916766720, i32 916815872, i32 916865024, i32 916914176, i32 916963328, i32 917012480, i32 917061632, i32 917110784, i32 917159936, i32 917209088, i32 917258240, i32 917307392, i32 917356544, i32 917405696, i32 917454848, i32 917504000, i32 917553152, i32 917602304, i32 917651456, i32 917700608, i32 917749760, i32 917798912, i32 917848064, i32 917897216, i32 917946368, i32 917995520, i32 918044672, i32 918093824, i32 918142976, i32 918192128, i32 918241280, i32 918290432, i32 918339584, i32 918388736, i32 918437888, i32 918487040, i32 918536192, i32 918585344, i32 918634496, i32 918683648, i32 918732800, i32 918781952, i32 918831104, i32 918880256, i32 918929408, i32 918978560, i32 919027712, i32 919076864, i32 919126016, i32 919175168, i32 919224320, i32 919273472, i32 919322624, i32 919371776, i32 919420928, i32 919470080, i32 919519232, i32 919568384, i32 919617536, i32 919666688, i32 919715840, i32 919764992, i32 919814144, i32 919863296, i32 919912448, i32 919961600, i32 920010752, i32 920059904, i32 920109056, i32 920158208, i32 920207360, i32 920256512, i32 920305664, i32 920354816, i32 920403968, i32 920453120, i32 920502272, i32 920551424, i32 920600576, i32 920649728, i32 920698880, i32 920748032, i32 920797184, i32 920846336, i32 920895488, i32 920944640, i32 920993792, i32 921042944, i32 921092096, i32 921141248, i32 921190400, i32 921239552, i32 921288704, i32 921337856, i32 921387008, i32 921436160, i32 921485312, i32 921534464, i32 921583616, i32 921632768, i32 921681920, i32 921731072, i32 921780224, i32 921829376, i32 921878528, i32 921927680, i32 921976832, i32 922025984, i32 922075136, i32 922124288, i32 922173440, i32 922222592, i32 922271744, i32 922320896, i32 922370048, i32 922419200, i32 922468352, i32 922517504, i32 922566656, i32 922615808, i32 922664960, i32 922714112, i32 922763264, i32 922812416, i32 922861568, i32 922910720, i32 922959872, i32 923009024, i32 923058176, i32 923107328, i32 923156480, i32 923205632, i32 923254784, i32 923303936, i32 923353088, i32 923402240, i32 923451392, i32 923500544, i32 923549696, i32 923598848, i32 923648000, i32 923697152, i32 923746304, i32 923795456, i32 923844608, i32 923893760, i32 923942912, i32 923992064, i32 924041216, i32 924090368, i32 924139520, i32 924188672, i32 924237824, i32 924286976, i32 924336128, i32 924385280, i32 924434432, i32 924483584, i32 924532736, i32 924581888, i32 924631040, i32 924680192, i32 924729344, i32 924778496, i32 924827648, i32 924876800, i32 924925952, i32 924975104, i32 925024256, i32 925073408, i32 925122560, i32 925171712, i32 925220864, i32 925270016, i32 925319168, i32 925368320, i32 925417472, i32 925466624, i32 925515776, i32 925564928, i32 925614080, i32 925663232, i32 925712384, i32 925761536, i32 925810688, i32 925859840, i32 925908992, i32 925958144, i32 926007296, i32 926056448, i32 926105600, i32 926154752, i32 926203904, i32 926253056, i32 926302208, i32 926351360, i32 926400512, i32 926449664, i32 926498816, i32 926547968, i32 926597120, i32 926646272, i32 926695424, i32 926744576, i32 926793728, i32 926842880, i32 926892032, i32 926941184, i32 926990336, i32 927039488, i32 927088640, i32 927137792, i32 927186944, i32 927236096, i32 927285248, i32 927334400, i32 927383552, i32 927432704, i32 927481856, i32 927531008, i32 927580160, i32 927629312, i32 927678464, i32 927727616, i32 927776768, i32 927825920, i32 927875072, i32 927924224, i32 927973376, i32 928022528, i32 928071680, i32 928120832, i32 928169984, i32 928219136, i32 928268288, i32 928317440, i32 928366592, i32 928415744, i32 928464896, i32 928514048, i32 928563200, i32 928612352, i32 928661504, i32 928710656, i32 928759808, i32 928808960, i32 928858112, i32 928907264, i32 928956416, i32 929005568, i32 929054720, i32 929103872, i32 929153024, i32 929202176, i32 929251328, i32 929300480, i32 929349632, i32 929398784, i32 929447936, i32 929497088, i32 929546240, i32 929595392, i32 929644544, i32 929693696, i32 929742848, i32 929792000, i32 929841152, i32 929890304, i32 929939456, i32 929988608, i32 930037760, i32 930086912, i32 930136064, i32 930185216, i32 930234368, i32 930283520, i32 930332672, i32 930381824, i32 930430976, i32 930480128, i32 930529280, i32 930578432, i32 930627584, i32 930676736, i32 930725888, i32 930775040, i32 930824192, i32 930873344, i32 930922496, i32 930971648, i32 931020800, i32 931069952, i32 931119104, i32 931168256, i32 931217408, i32 931266560, i32 931315712, i32 931364864, i32 931414016, i32 931463168, i32 931512320, i32 931561472, i32 931610624, i32 931659776, i32 931708928, i32 931758080, i32 931807232, i32 931856384, i32 931905536, i32 931954688, i32 932003840, i32 932052992, i32 932102144, i32 932151296, i32 932200448, i32 932249600, i32 932298752, i32 932347904, i32 932397056, i32 932446208, i32 932495360, i32 932544512, i32 932593664, i32 932642816, i32 932691968, i32 932741120, i32 932790272, i32 932839424, i32 932888576, i32 932937728, i32 932986880, i32 933036032, i32 933085184, i32 933134336, i32 933183488, i32 933232640, i32 933281792, i32 933330944, i32 933380096, i32 933429248, i32 933478400, i32 933527552, i32 933576704, i32 933625856, i32 933675008, i32 933724160, i32 933773312, i32 933822464, i32 933871616, i32 933920768, i32 933969920, i32 934019072, i32 934068224, i32 934117376, i32 934166528, i32 934215680, i32 934264832, i32 934313984, i32 934363136, i32 934412288, i32 934461440, i32 934510592, i32 934559744, i32 934608896, i32 934658048, i32 934707200, i32 934756352, i32 934805504, i32 934854656, i32 934903808, i32 934952960, i32 935002112, i32 935051264, i32 935100416, i32 935149568, i32 935198720, i32 935247872, i32 935297024, i32 935346176, i32 935395328, i32 935444480, i32 935493632, i32 935542784, i32 935591936, i32 935641088, i32 935690240, i32 935739392, i32 935788544, i32 935837696, i32 935886848, i32 935936000, i32 935985152, i32 936040448, i32 936095744, i32 936151040, i32 936206336, i32 936261632, i32 936316928, i32 936372224, i32 936427520, i32 936482816, i32 936538112, i32 936593408, i32 936648704, i32 936704000, i32 936759296, i32 936814592, i32 936869888, i32 936925184, i32 936980480, i32 937035776, i32 937091072, i32 937146368, i32 937201664, i32 937256960, i32 937312256, i32 937367552, i32 937422848, i32 937478144, i32 937533440, i32 937588736, i32 937644032, i32 937699328, i32 937754624, i32 937809920, i32 937865216, i32 937920512, i32 937975808, i32 938031104, i32 938086400, i32 938141696, i32 938196992, i32 938252288, i32 938307584, i32 938362880, i32 938418176, i32 938473472, i32 938528768, i32 938584064, i32 938639360, i32 938694656, i32 938749952, i32 938805248, i32 938860544, i32 938915840, i32 938971136, i32 939026432, i32 939081728, i32 939137024, i32 939192320, i32 939247616, i32 939302912, i32 939358208, i32 939413504, i32 939468800, i32 939524096, i32 939579392, i32 939634688, i32 939689984, i32 939745280, i32 939800576, i32 939855872, i32 939911168, i32 939966464, i32 940021760, i32 940077056, i32 940132352, i32 940187648, i32 940242944, i32 940298240, i32 940353536, i32 940408832, i32 940464128, i32 940519424, i32 940574720, i32 940630016, i32 940685312, i32 940740608, i32 940795904, i32 940851200, i32 940906496, i32 940961792, i32 941017088, i32 941072384, i32 941127680, i32 941182976, i32 941238272, i32 941293568, i32 941348864, i32 941404160, i32 941459456, i32 941514752, i32 941570048, i32 941625344, i32 941680640, i32 941735936, i32 941791232, i32 941846528, i32 941901824, i32 941957120, i32 942012416, i32 942067712, i32 942123008, i32 942178304, i32 942233600, i32 942288896, i32 942344192, i32 942399488, i32 942454784, i32 942510080, i32 942565376, i32 942620672, i32 942675968, i32 942731264, i32 942786560, i32 942841856, i32 942897152, i32 942952448, i32 943007744, i32 943063040, i32 943118336, i32 943173632, i32 943228928, i32 943284224, i32 943339520, i32 943394816, i32 943450112, i32 943505408, i32 943560704, i32 943616000, i32 943671296, i32 943726592, i32 943781888, i32 943837184, i32 943892480, i32 943947776, i32 944003072, i32 944058368, i32 944113664, i32 944168960, i32 944224256, i32 944279552, i32 944334848, i32 944390144, i32 944445440, i32 944500736, i32 944556032, i32 944611328, i32 944666624, i32 944721920, i32 944777216, i32 944832512, i32 944887808, i32 944943104, i32 944998400, i32 945053696, i32 945108992, i32 945164288, i32 945219584, i32 945274880, i32 945330176, i32 945385472, i32 945440768, i32 945496064, i32 945551360, i32 945606656, i32 945661952, i32 945717248, i32 945772544, i32 945827840, i32 945883136, i32 945938432, i32 945993728, i32 946049024, i32 946104320, i32 946159616, i32 946214912, i32 946270208, i32 946325504, i32 946380800, i32 946436096, i32 946491392, i32 946546688, i32 946601984, i32 946657024, i32 946712320, i32 946767616, i32 946822912, i32 946878208, i32 946933504, i32 946988800, i32 947044096, i32 947099392, i32 947154688, i32 947209984, i32 947265280, i32 947320576, i32 947375872, i32 947431168, i32 947486464, i32 947541760, i32 947597056, i32 947652352, i32 947707648, i32 947762944, i32 947818240, i32 947873536, i32 947928832, i32 947984128, i32 948039424, i32 948094720, i32 948150016, i32 948205312, i32 948260608, i32 948315904, i32 948371200, i32 948426496, i32 948481792, i32 948537088, i32 948592384, i32 948647680, i32 948702976, i32 948758272, i32 948813568, i32 948868864, i32 948924160, i32 948979456, i32 949034752, i32 949090048, i32 949145344, i32 949200640, i32 949255936, i32 949311232, i32 949366528, i32 949421824, i32 949477120, i32 949532416, i32 949587712, i32 949643008, i32 949698304, i32 949753600, i32 949808896, i32 949864192, i32 949919488, i32 949974784, i32 950030080, i32 950085376, i32 950140672, i32 950195968, i32 950251264, i32 950306560, i32 950361856, i32 950417152, i32 950472448, i32 950527744, i32 950583040, i32 950638336, i32 950693632, i32 950748928, i32 950804224, i32 950859520, i32 950914816, i32 950970112, i32 951025408, i32 951080704, i32 951136000, i32 951191296, i32 951246592, i32 951301888, i32 951357184, i32 951412480, i32 951467776, i32 951523072, i32 951578368, i32 951633664, i32 951688960, i32 951744256, i32 951799552, i32 951854848, i32 951910144, i32 951965440, i32 952020736, i32 952076032, i32 952131328, i32 952186624, i32 952241920, i32 952297216, i32 952352512, i32 952407808, i32 952463104, i32 952518400, i32 952573696, i32 952628992, i32 952684288, i32 952739584, i32 952794880, i32 952850176, i32 952905472, i32 952960768, i32 953016064, i32 953071360, i32 953126656, i32 953181952, i32 953237248, i32 953292544, i32 953347840, i32 953403136, i32 953458432, i32 953513728, i32 953569024, i32 953624320, i32 953679616, i32 953734912, i32 953790208, i32 953845504, i32 953900800, i32 953956096, i32 954011392, i32 954066688, i32 954121984, i32 954177280, i32 954232576, i32 954287872, i32 954343168, i32 954398464, i32 954453760, i32 954509056, i32 954564352, i32 954619648, i32 954674944, i32 954730240, i32 954785536, i32 954840832, i32 954896128, i32 954951424, i32 955006720, i32 955062016, i32 955117312, i32 955172608, i32 955227904, i32 955283200, i32 955338496, i32 955393792, i32 955449088, i32 955504384, i32 955559680, i32 955614976, i32 955670272, i32 955725568, i32 955780864, i32 955836160, i32 955891456, i32 955946752, i32 956002048, i32 956057344, i32 956112640, i32 956167936, i32 956223232, i32 956278528, i32 956333824, i32 956389120, i32 956444416, i32 956499712, i32 956555008, i32 956610304, i32 956665600, i32 956720896, i32 956776192, i32 956831488, i32 956886784, i32 956942080, i32 956997376, i32 957052672, i32 957107968, i32 957163264, i32 957218560, i32 957273856, i32 957329152, i32 957384448, i32 957439744, i32 957495040, i32 957550336, i32 957605632, i32 957660928, i32 957716224, i32 957771520, i32 957826816, i32 957882112, i32 957937408, i32 957992704, i32 958048000, i32 958103296, i32 958158592, i32 958213888, i32 958269184, i32 958324480, i32 958379776, i32 958435072, i32 958490368, i32 958545664, i32 958600960, i32 958656256, i32 958711552, i32 958766848, i32 958822144, i32 958877440, i32 958932736, i32 958988032, i32 959043328, i32 959098624, i32 959153920, i32 959209216, i32 959264512, i32 959319808, i32 959375104, i32 959430400, i32 959485696, i32 959540992, i32 959596288, i32 959651584, i32 959706880, i32 959762176, i32 959817472, i32 959872768, i32 959928064, i32 959983360, i32 960038656, i32 960093952, i32 960149248, i32 960204544, i32 960259840, i32 960315136, i32 960370432, i32 960425728, i32 960481024, i32 960536320, i32 960591616, i32 960646912, i32 960702208, i32 960757504, i32 960812800, i32 960868096, i32 960923392, i32 960978688, i32 961033984, i32 961089280, i32 961144576, i32 961199872, i32 961255168, i32 961310464, i32 961365760, i32 961421056, i32 961476352, i32 961531648, i32 961586944, i32 961642240, i32 961697536, i32 961752832, i32 961808128, i32 961863424, i32 961918720, i32 961974016, i32 962029312, i32 962084608, i32 962139904, i32 962195200, i32 962250496, i32 962305792, i32 962361088, i32 962416384, i32 962471680, i32 962526976, i32 962582272, i32 962637568, i32 962692864, i32 962748160, i32 962803456, i32 962858752, i32 962914048, i32 962969344, i32 963024640, i32 963079936, i32 963135232, i32 963190528, i32 963245824, i32 963301120, i32 963356416, i32 963411712, i32 963467008, i32 963522304, i32 963577600, i32 963632896, i32 963688192, i32 963743488, i32 963798784, i32 963854080, i32 963909376, i32 963964672, i32 964019968, i32 964075264, i32 964130560, i32 964185856, i32 964241152, i32 964296448, i32 964356352, i32 964416256, i32 964476160, i32 964536064, i32 964595968, i32 964655872, i32 964715776, i32 964775680, i32 964835584, i32 964895488, i32 964955392, i32 965015296, i32 965075200, i32 965135104, i32 965195008, i32 965254912, i32 965314816, i32 965374720, i32 965434624, i32 965494528, i32 965554432, i32 965614336, i32 965674240, i32 965734144, i32 965794048, i32 965853952, i32 965913856, i32 965973760, i32 966033664, i32 966093568, i32 966153472, i32 966213376, i32 966273280, i32 966333184, i32 966393088, i32 966452992, i32 966512896, i32 966572800, i32 966632704, i32 966692608, i32 966752512, i32 966812416, i32 966872320, i32 966932224, i32 966992128, i32 967052032, i32 967111936, i32 967171840, i32 967231744, i32 967291648, i32 967351552, i32 967411456, i32 967471360, i32 967531264, i32 967591168, i32 967651072, i32 967710976, i32 967770880, i32 967830784, i32 967890688, i32 967950592, i32 968010496, i32 968070400, i32 968130304, i32 968190208, i32 968250112, i32 968310016, i32 968369920, i32 968429824, i32 968489728, i32 968549632, i32 968609536, i32 968669440, i32 968729344, i32 968789248, i32 968849152, i32 968909056, i32 968968960, i32 969028864, i32 969088768, i32 969148672, i32 969208576, i32 969268480, i32 969328384, i32 969388288, i32 969448192, i32 969508096, i32 969568000, i32 969627904, i32 969687808, i32 969747712, i32 969807616, i32 969867520, i32 969927424, i32 969987328, i32 970047232, i32 970107136, i32 970167040, i32 970226944, i32 970286848, i32 970346752, i32 970406656, i32 970466560, i32 970526464, i32 970586368, i32 970646272, i32 970706176, i32 970766080, i32 970825984, i32 970885888, i32 970945792, i32 971005696, i32 971065600, i32 971125504, i32 971185408, i32 971245312, i32 971305216, i32 971365120, i32 971425024, i32 971484928, i32 971544832, i32 971604736, i32 971664640, i32 971724544, i32 971784448, i32 971844352, i32 971904256, i32 971964160, i32 972024064, i32 972083968, i32 972143872, i32 972203776, i32 972263680, i32 972323584, i32 972383488, i32 972443392, i32 972503296, i32 972563200, i32 972623104, i32 972683008, i32 972742912, i32 972802816, i32 972862720, i32 972922624, i32 972982528, i32 973042432, i32 973102336, i32 973162240, i32 973222144, i32 973282048, i32 973341952, i32 973401856, i32 973461760, i32 973521664, i32 973581568, i32 973641472, i32 973701376, i32 973761280, i32 973821184, i32 973881088, i32 973940992, i32 974000896, i32 974060800, i32 974120704, i32 974180608, i32 974240512, i32 974300416, i32 974360320, i32 974420224, i32 974480128, i32 974540032, i32 974599936, i32 974659840, i32 974719744, i32 974779648, i32 974839552, i32 974899456, i32 974959360, i32 975019264, i32 975079168, i32 975139072, i32 975198976, i32 975258880, i32 975318784, i32 975378688, i32 975438592, i32 975498496, i32 975558400, i32 975618304, i32 975678208, i32 975738112, i32 975798016, i32 975857920, i32 975917824, i32 975977728, i32 976037632, i32 976097536, i32 976157440, i32 976217344, i32 976277248, i32 976337152, i32 976397056, i32 976456960, i32 976516864, i32 976576768, i32 976636672, i32 976696576, i32 976756480, i32 976816384, i32 976876288, i32 976936192, i32 976996096, i32 977056000, i32 977115904, i32 977175808, i32 977235712, i32 977295616, i32 977355520, i32 977415424, i32 977475328, i32 977535232, i32 977595136, i32 977655040, i32 977714944, i32 977774848, i32 977834752, i32 977894656, i32 977954560, i32 978014464, i32 978074368, i32 978134272, i32 978194176, i32 978254080, i32 978313984, i32 978373888, i32 978433792, i32 978493696, i32 978553600, i32 978613504, i32 978673408, i32 978733312, i32 978793216, i32 978853120, i32 978913024, i32 978972928, i32 979032832, i32 979092736, i32 979152640, i32 979212544, i32 979272448, i32 979332352, i32 979392256, i32 979452160, i32 979512064, i32 979571968, i32 979631872, i32 979691776, i32 979751680, i32 979811584, i32 979871488, i32 979931392, i32 979991296, i32 980051200, i32 980111104, i32 980171008, i32 980230912, i32 980290816, i32 980350720, i32 980410624, i32 980470528, i32 980530432, i32 980590336, i32 980650240, i32 980710144, i32 980770048, i32 980829952, i32 980889856, i32 980949760, i32 981009664, i32 981069568, i32 981129472, i32 981189376, i32 981249280, i32 981309184, i32 981369088, i32 981428992, i32 981488896, i32 981548800, i32 981608704, i32 981668608, i32 981728512, i32 981788416, i32 981848320, i32 981908224, i32 981968128, i32 982028032, i32 982087936, i32 982147840, i32 982207744, i32 982267648, i32 982327552, i32 982387456, i32 982447360, i32 982507264, i32 982567168, i32 982627072, i32 982686976, i32 982746880, i32 982806784, i32 982866688, i32 982926592, i32 982986496, i32 983046400, i32 983106304, i32 983166208, i32 983226112, i32 983286016, i32 983345920, i32 983405824, i32 983465728, i32 983525632, i32 983585536, i32 983645440, i32 983705344, i32 983765248, i32 983825152, i32 983885056, i32 983944960, i32 984004864, i32 984064768, i32 984124672, i32 984184576, i32 984244480, i32 984304384, i32 984364288, i32 984424192, i32 984484096, i32 984544000, i32 984603904, i32 984663808, i32 984723712, i32 984783616, i32 984843520, i32 984903424, i32 984963328, i32 985023232, i32 985083136, i32 985143040, i32 985202944, i32 985262848, i32 985322752, i32 985382656, i32 985442560, i32 985502464, i32 985562368, i32 985622272, i32 985682176, i32 985742080, i32 985801984, i32 985861888, i32 985921792, i32 985981696, i32 986041600, i32 986101504, i32 986161408, i32 986221312, i32 986281216, i32 986341120, i32 986401024, i32 986460928, i32 986520832, i32 986580736, i32 986640640, i32 986700544, i32 986760448, i32 986820352, i32 986880256, i32 986940160, i32 987000064, i32 987059968, i32 987119872, i32 987179776, i32 987239680, i32 987299584, i32 987359488, i32 987419392, i32 987479296, i32 987539200, i32 987599104, i32 987659008, i32 987718912, i32 987778816, i32 987838720, i32 987898624, i32 987958528, i32 988018432, i32 988078336, i32 988138240, i32 988198144, i32 988258048, i32 988317952, i32 988377856, i32 988437760, i32 988497664, i32 988557568, i32 988617472, i32 988677376, i32 988737280, i32 988797184, i32 988857088, i32 988916992, i32 988976896, i32 989036800, i32 989096704, i32 989156608, i32 989216512, i32 989276416, i32 989336320, i32 989396224, i32 989456128, i32 989516032, i32 989575936, i32 989635840, i32 989695744, i32 989755648, i32 989815552, i32 989875712, i32 989935616, i32 989995520, i32 990055424, i32 990115328, i32 990175232, i32 990235136, i32 990295040, i32 990354944, i32 990414848, i32 990474752, i32 990534656, i32 990594560, i32 990654464, i32 990714368, i32 990774272, i32 990834176, i32 990894080, i32 990953984, i32 991013888, i32 991073792, i32 991133696, i32 991193600, i32 991253504, i32 991313408, i32 991373312, i32 991433216, i32 991493120, i32 991553024, i32 991612928, i32 991672832, i32 991732736, i32 991792640, i32 991852544, i32 991912448, i32 991972352, i32 992032256, i32 992092160, i32 992152064, i32 992211968, i32 992271872, i32 992331776, i32 992391680, i32 992451584, i32 992511488, i32 992571392, i32 992631296, i32 992691200, i32 992751104, i32 992811008, i32 992870912, i32 992930816, i32 992990720, i32 993050624, i32 993110528, i32 993170432, i32 993230336, i32 993290240, i32 993350144, i32 993410048, i32 993469952, i32 993529856, i32 993589760, i32 993649664, i32 993709568, i32 993769472, i32 993829376, i32 993889280, i32 993949184, i32 994009088, i32 994068992, i32 994128896, i32 994188800, i32 994248704, i32 994308608, i32 994368512, i32 994428416, i32 994488320, i32 994548224, i32 994608128, i32 994668032, i32 994727936, i32 994787840, i32 994847744, i32 994907648, i32 994967552, i32 995033088, i32 995098624, i32 995164160, i32 995229696, i32 995295232, i32 995360768, i32 995426304, i32 995491840, i32 995557376, i32 995622912, i32 995688448, i32 995753984, i32 995819520, i32 995885056, i32 995950592, i32 996016128, i32 996081664, i32 996147200, i32 996212736, i32 996278272, i32 996343808, i32 996409344, i32 996474880, i32 996540416, i32 996605952, i32 996671488, i32 996737024, i32 996802560, i32 996868096, i32 996933632, i32 996999168, i32 997064704, i32 997130240, i32 997195776, i32 997261312, i32 997326848, i32 997392384, i32 997457920, i32 997523456, i32 997588992, i32 997654528, i32 997720064, i32 997785600, i32 997851136, i32 997916672, i32 997982208, i32 998047744, i32 998113280, i32 998178816, i32 998244352, i32 998309888, i32 998375424, i32 998440960, i32 998506496, i32 998572032, i32 998637568, i32 998703104, i32 998768640, i32 998834176, i32 998899712, i32 998965248, i32 999030784, i32 999096320, i32 999161856, i32 999227392, i32 999292928, i32 999358464, i32 999424000, i32 999489536, i32 999555072, i32 999620608, i32 999686144, i32 999751680, i32 999817216, i32 999882752, i32 999948288, i32 1000013824, i32 1000079360, i32 1000144896, i32 1000210432, i32 1000275968, i32 1000341504, i32 1000407040, i32 1000472576, i32 1000538112, i32 1000603648, i32 1000669184, i32 1000734720, i32 1000800256, i32 1000865792, i32 1000931328, i32 1000996864, i32 1001062400, i32 1001127936, i32 1001193472, i32 1001259008, i32 1001324544, i32 1001390080, i32 1001455616, i32 1001521152, i32 1001586688, i32 1001652224, i32 1001717760, i32 1001783296, i32 1001848832, i32 1001914368, i32 1001979904, i32 1002045440, i32 1002110976, i32 1002176512, i32 1002242048, i32 1002307584, i32 1002373120, i32 1002438656, i32 1002504192, i32 1002569728, i32 1002635264, i32 1002700800, i32 1002766336, i32 1002831872, i32 1002897408, i32 1002962944, i32 1003028480, i32 1003094016, i32 1003159552, i32 1003225088, i32 1003290624, i32 1003356160, i32 1003421696, i32 1003487232, i32 1003552768, i32 1003618304, i32 1003683840, i32 1003749376, i32 1003814912, i32 1003880448, i32 1003945984, i32 1004011520, i32 1004077056, i32 1004142592, i32 1004208128, i32 1004273664, i32 1004339200, i32 1004404736, i32 1004470272, i32 1004535808, i32 1004601344, i32 1004666880, i32 1004732416, i32 1004797952, i32 1004863488, i32 1004929024, i32 1004994560, i32 1005060096, i32 1005125632, i32 1005191168, i32 1005256704, i32 1005322240, i32 1005387776, i32 1005453312, i32 1005518848, i32 1005584384, i32 1005649920, i32 1005715456, i32 1005780992, i32 1005846528, i32 1005912064, i32 1005977600, i32 1006043136, i32 1006108672, i32 1006174208, i32 1006239744, i32 1006305280, i32 1006370816, i32 1006436352, i32 1006501888, i32 1006567424, i32 1006632960, i32 1006698496, i32 1006764032, i32 1006829568, i32 1006895104, i32 1006960640, i32 1007026176, i32 1007091712, i32 1007157248, i32 1007222784, i32 1007288320, i32 1007353856, i32 1007419392, i32 1007484928, i32 1007550464, i32 1007616000, i32 1007681536, i32 1007747072, i32 1007812608, i32 1007878144, i32 1007943680, i32 1008009216, i32 1008074752, i32 1008140288, i32 1008205824, i32 1008271360, i32 1008336896, i32 1008402432, i32 1008467968, i32 1008533504, i32 1008599040, i32 1008664576, i32 1008730112, i32 1008795648, i32 1008861184, i32 1008926720, i32 1008992256, i32 1009057792, i32 1009123328, i32 1009188864, i32 1009254400, i32 1009319936, i32 1009385472, i32 1009451008, i32 1009516544, i32 1009582080, i32 1009647616, i32 1009713152, i32 1009778688, i32 1009844224, i32 1009909760, i32 1009975296, i32 1010040832, i32 1010106368, i32 1010171904, i32 1010237440, i32 1010302976, i32 1010368512, i32 1010434048, i32 1010499584, i32 1010565120, i32 1010630656, i32 1010696192, i32 1010761728, i32 1010827264, i32 1010892800, i32 1010958336, i32 1011023872, i32 1011089408, i32 1011154944, i32 1011220480, i32 1011286016, i32 1011351552, i32 1011417088, i32 1011482624, i32 1011548160, i32 1011613696, i32 1011679232, i32 1011744768, i32 1011810304, i32 1011875840, i32 1011941376, i32 1012006912, i32 1012072448, i32 1012137984, i32 1012203520, i32 1012269056, i32 1012334592, i32 1012400128, i32 1012465664, i32 1012531200, i32 1012596736, i32 1012662272, i32 1012727808, i32 1012793344, i32 1012858880, i32 1012924416, i32 1012989952, i32 1013055488, i32 1013121024, i32 1013186560, i32 1013252096, i32 1013317632, i32 1013383168, i32 1013448704, i32 1013514240, i32 1013579776, i32 1013645312, i32 1013710848, i32 1013776384, i32 1013841920, i32 1013907456, i32 1013972992, i32 1014038528, i32 1014104064, i32 1014169600, i32 1014235136, i32 1014300672, i32 1014366208, i32 1014431744, i32 1014497280, i32 1014562816, i32 1014628352, i32 1014693888, i32 1014759424, i32 1014824960, i32 1014890496, i32 1014956032, i32 1015021568, i32 1015087104, i32 1015152640, i32 1015218176, i32 1015283712, i32 1015349248, i32 1015414784, i32 1015480320, i32 1015545856, i32 1015611392, i32 1015676928, i32 1015742464, i32 1015808000, i32 1015873536, i32 1015939072, i32 1016004608, i32 1016070144, i32 1016135680, i32 1016201216, i32 1016266752, i32 1016332288, i32 1016397824, i32 1016463360, i32 1016528896, i32 1016594432, i32 1016659968, i32 1016725504, i32 1016791040, i32 1016856576, i32 1016922112, i32 1016987648, i32 1017053184, i32 1017118720, i32 1017184256, i32 1017249792, i32 1017315328, i32 1017380864, i32 1017446400, i32 1017511936, i32 1017577472, i32 1017643008, i32 1017708544, i32 1017774080, i32 1017839616, i32 1017905152, i32 1017970688, i32 1018036224, i32 1018101760, i32 1018167296, i32 1018232832, i32 1018298368, i32 1018363904, i32 1018429440, i32 1018494976, i32 1018560512, i32 1018626048, i32 1018691584, i32 1018757120, i32 1018822656, i32 1018888192, i32 1018953728, i32 1019019264, i32 1019084800, i32 1019150336, i32 1019215872, i32 1019281408, i32 1019346944, i32 1019412480, i32 1019478016, i32 1019543552, i32 1019609088, i32 1019674624, i32 1019740160, i32 1019805696, i32 1019871232, i32 1019936768, i32 1020002304, i32 1020067840, i32 1020133376, i32 1020198912, i32 1020264448, i32 1020329984, i32 1020395520, i32 1020461056, i32 1020526592, i32 1020592128, i32 1020657664, i32 1020723200, i32 1020788736, i32 1020854272, i32 1020919808, i32 1020985344, i32 1021050880, i32 1021116416, i32 1021181952, i32 1021247488, i32 1021313024, i32 1021378560, i32 1021444096, i32 1021509632, i32 1021575168, i32 1021640704, i32 1021706240, i32 1021771776, i32 1021837312, i32 1021902848, i32 1021968384, i32 1022033920, i32 1022099456, i32 1022164992, i32 1022230528, i32 1022296064, i32 1022361600, i32 1022427136, i32 1022492672, i32 1022558208, i32 1022623744, i32 1022689280, i32 1022754816, i32 1022820352, i32 1022885888, i32 1022951424, i32 1023016960, i32 1023082496, i32 1023148032, i32 1023213568, i32 1023279104, i32 1023344640, i32 1023410176, i32 1023475712, i32 1023541248, i32 1023606784, i32 1023672320, i32 1023737856, i32 1023803392, i32 1023868928, i32 1023934464, i32 1024000000, i32 1024065536, i32 1024131072, i32 1024196608, i32 1024262144, i32 1024327680, i32 1024393216, i32 1024458752, i32 1024524288, i32 1024589824, i32 1024655360, i32 1024720896, i32 1024786432, i32 1024851968, i32 1024917504, i32 1024983040, i32 1025048576, i32 1025114112, i32 1025179648, i32 1025245184, i32 1025310720, i32 1025376256, i32 1025441792, i32 1025507328, i32 1025572864, i32 1025638400, i32 1025703936, i32 1025769472, i32 1025835008, i32 1025900544, i32 1025966080, i32 1026031616, i32 1026097152, i32 1026162688, i32 1026228224, i32 1026293760, i32 1026359296, i32 1026424832, i32 1026490368, i32 1026555904, i32 1026621440, i32 1026686976, i32 1026752512, i32 1026818048, i32 1026883584, i32 1026949120, i32 1027014656, i32 1027080192, i32 1027145728, i32 1027211264, i32 1027276800, i32 1027342336, i32 1027407872, i32 1027473408, i32 1027538944, i32 1027604480, i32 1027670016, i32 1027735552, i32 1027801088, i32 1027866624, i32 1027932160, i32 1027997696, i32 1028063232, i32 1028128768, i32 1028194304, i32 1028259840, i32 1028325376, i32 1028390912, i32 1028456448, i32 1028521984, i32 1028596224, i32 1028670464, i32 1028744704, i32 1028818944, i32 1028893184, i32 1028967424, i32 1029041664, i32 1029115904, i32 1029190144, i32 1029264384, i32 1029338624, i32 1029412864, i32 1029487104, i32 1029561344, i32 1029635584, i32 1029709824, i32 1029784064, i32 1029858304, i32 1029932544, i32 1030006784, i32 1030081024, i32 1030155264, i32 1030229504, i32 1030303744, i32 1030377984, i32 1030452224, i32 1030526464, i32 1030600704, i32 1030674944, i32 1030749184, i32 1030823424, i32 1030897664, i32 1030971904, i32 1031046144, i32 1031120384, i32 1031194624, i32 1031268864, i32 1031343104, i32 1031417344, i32 1031491584, i32 1031565824, i32 1031640064, i32 1031714304, i32 1031788544, i32 1031862784, i32 1031937024, i32 1032011264, i32 1032085504, i32 1032159744, i32 1032233984, i32 1032308224, i32 1032382464, i32 1032456704, i32 1032530944, i32 1032605184, i32 1032679424, i32 1032753664, i32 1032827904, i32 1032902144, i32 1032976384, i32 1033050624, i32 1033124864, i32 1033199104, i32 1033273344, i32 1033347584, i32 1033421824, i32 1033496064, i32 1033570304, i32 1033644544, i32 1033718784, i32 1033793024, i32 1033867264, i32 1033941504, i32 1034015744, i32 1034089984, i32 1034164224, i32 1034238464, i32 1034312704, i32 1034386944, i32 1034461184, i32 1034535424, i32 1034609664, i32 1034683904, i32 1034758144, i32 1034832384, i32 1034906624, i32 1034980864, i32 1035055104, i32 1035129344, i32 1035203584, i32 1035277824, i32 1035352064, i32 1035426304, i32 1035500544, i32 1035574784, i32 1035649024, i32 1035723264, i32 1035797504, i32 1035871744, i32 1035945984, i32 1036020224, i32 1036094464, i32 1036168704, i32 1036242944, i32 1036317184, i32 1036391424, i32 1036465664, i32 1036539904, i32 1036614144, i32 1036688384, i32 1036762624, i32 1036836864, i32 1036911104, i32 1036985344, i32 1037059584, i32 1037133824, i32 1037208064, i32 1037282304, i32 1037356544, i32 1037430784, i32 1037505024, i32 1037579264, i32 1037653504, i32 1037727744, i32 1037801984, i32 1037876224, i32 1037950464, i32 1038024704, i32 1038098944, i32 1038173184, i32 1038247424, i32 1038321664, i32 1038395904, i32 1038470144, i32 1038544384, i32 1038618624, i32 1038692864, i32 1038767104, i32 1038841344, i32 1038915584, i32 1038989824, i32 1039064064, i32 1039138304, i32 1039212544, i32 1039286784, i32 1039361024, i32 1039435264, i32 1039509504, i32 1039583744, i32 1039657984, i32 1039732224, i32 1039806464, i32 1039880704, i32 1039954944, i32 1040029184, i32 1040103424, i32 1040177664, i32 1040251904, i32 1040326144, i32 1040400384, i32 1040474624, i32 1040548864, i32 1040623104, i32 1040697344, i32 1040771584, i32 1040845824, i32 1040920064, i32 1040994304, i32 1041068544, i32 1041142784, i32 1041217024, i32 1041291264, i32 1041365504, i32 1041439744, i32 1041513984, i32 1041588224, i32 1041662464, i32 1041736704, i32 1041810944, i32 1041885184, i32 1041959424, i32 1042033664, i32 1042107904, i32 1042182144, i32 1042256384, i32 1042330624, i32 1042404864, i32 1042479104, i32 1042553344, i32 1042627584, i32 1042701824, i32 1042776064, i32 1042850304, i32 1042924544, i32 1042998784, i32 1043073024, i32 1043147264, i32 1043221504, i32 1043295744, i32 1043369984, i32 1043444224, i32 1043518464, i32 1043592704, i32 1043666944, i32 1043741184, i32 1043815424, i32 1043889664, i32 1043963904, i32 1044038144, i32 1044112384, i32 1044186624, i32 1044260864, i32 1044335104, i32 1044409344, i32 1044483584, i32 1044557824, i32 1044632064, i32 1044706304, i32 1044780544, i32 1044854784, i32 1044929024, i32 1045003264, i32 1045077504, i32 1045151744, i32 1045225984, i32 1045300224, i32 1045374464, i32 1045448704, i32 1045522944, i32 1045597184, i32 1045671424, i32 1045745664, i32 1045819904, i32 1045894144, i32 1045968384, i32 1046042624, i32 1046116864, i32 1046191104, i32 1046265344, i32 1046339584, i32 1046413824, i32 1046488064, i32 1046562304, i32 1046636544, i32 1046710784, i32 1046785024, i32 1046859264, i32 1046933504, i32 1047007744, i32 1047081984, i32 1047156224, i32 1047230464, i32 1047304704, i32 1047378944, i32 1047453184, i32 1047527424, i32 1047601408, i32 1047675648, i32 1047749888, i32 1047824128, i32 1047898368, i32 1047972608, i32 1048046848, i32 1048121088, i32 1048195328, i32 1048269568, i32 1048343808, i32 1048418048, i32 1048492288, i32 1048566528, i32 1048640768, i32 1048715008, i32 1048789248, i32 1048863488, i32 1048937728, i32 1049011968, i32 1049086208, i32 1049160448, i32 1049234688, i32 1049308928, i32 1049383168, i32 1049457408, i32 1049531648, i32 1049605888, i32 1049680128, i32 1049754368, i32 1049828608, i32 1049902848, i32 1049977088, i32 1050051328, i32 1050125568, i32 1050199808, i32 1050274048, i32 1050348288, i32 1050422528, i32 1050496768, i32 1050571008, i32 1050645248, i32 1050719488, i32 1050793728, i32 1050867968, i32 1050942208, i32 1051016448, i32 1051090688, i32 1051164928, i32 1051239168, i32 1051313408, i32 1051387648, i32 1051461888, i32 1051536128, i32 1051610368, i32 1051684608, i32 1051758848, i32 1051833088, i32 1051907328, i32 1051981568, i32 1052055808, i32 1052130048, i32 1052204288, i32 1052278528, i32 1052352768, i32 1052427008, i32 1052501248, i32 1052575488, i32 1052649728, i32 1052723968, i32 1052798208, i32 1052872448, i32 1052946688, i32 1053020928, i32 1053095168, i32 1053169408, i32 1053243648, i32 1053317888, i32 1053392128, i32 1053466368, i32 1053540608, i32 1053614848, i32 1053689088, i32 1053763328, i32 1053837568, i32 1053911808, i32 1053986048, i32 1054060288, i32 1054134528, i32 1054208768, i32 1054283008, i32 1054357248, i32 1054431488, i32 1054505728, i32 1054579968, i32 1054654208, i32 1054728448, i32 1054802688, i32 1054876928, i32 1054951168, i32 1055025408, i32 1055099648, i32 1055173888, i32 1055248128, i32 1055322368, i32 1055396608, i32 1055470848, i32 1055545088, i32 1055619328, i32 1055693568, i32 1055767808, i32 1055842048, i32 1055916288, i32 1055990528, i32 1056064768, i32 1056139008, i32 1056213248, i32 1056287488, i32 1056361728, i32 1056435968, i32 1056510208, i32 1056584448, i32 1056658688, i32 1056732928, i32 1056807168, i32 1056881408, i32 1056955648, i32 1057029888, i32 1057104128, i32 1057178368, i32 1057252608, i32 1057326848, i32 1057401088, i32 1057475328, i32 1057549568, i32 1057623808, i32 1057698048, i32 1057772288, i32 1057846528, i32 1057920768, i32 1057995008, i32 1058069248, i32 1058143488, i32 1058217728, i32 1058291968, i32 1058366208, i32 1058440448, i32 1058514688, i32 1058588928, i32 1058663168, i32 1058737408, i32 1058811648, i32 1058885888, i32 1058960128, i32 1059034368, i32 1059108608, i32 1059182848, i32 1059257088, i32 1059331328, i32 1059405568, i32 1059479808, i32 1059554048, i32 1059628288, i32 1059702528, i32 1059776768, i32 1059851008, i32 1059925248, i32 1059999488, i32 1060073728, i32 1060147968, i32 1060222208, i32 1060296448, i32 1060370688, i32 1060444928, i32 1060519168, i32 1060593408, i32 1060667648, i32 1060741888, i32 1060816128, i32 1060890368, i32 1060964608, i32 1061038848, i32 1061113088, i32 1061187328, i32 1061261568, i32 1061335808, i32 1061410048, i32 1061484288, i32 1061558528, i32 1061632768, i32 1061707008, i32 1061781248, i32 1061855488, i32 1061929728, i32 1062003968, i32 1062078208, i32 1062152448, i32 1062226688, i32 1062300928, i32 1062375168, i32 1062449408, i32 1062523648, i32 1062597888, i32 1062672128, i32 1062746368, i32 1062820608, i32 1062894848, i32 1062969088, i32 1063043328, i32 1063117568, i32 1063191808, i32 1063266048, i32 1063340288, i32 1063414528, i32 1063488768, i32 1063563008, i32 1063637248, i32 1063711488, i32 1063785728, i32 1063859968, i32 1063934208, i32 1064008448, i32 1064082688, i32 1064156928, i32 1064231168, i32 1064305408, i32 1064379648, i32 1064453888, i32 1064528128, i32 1064602368, i32 1064676608, i32 1064750848, i32 1064825088, i32 1064899328, i32 1064973568, i32 1065047808, i32 1065122048, i32 1065196288, i32 1065270528, i32 1065344768, i32 1065419008, i32 1065493248, i32 1065567488, i32 1065641728, i32 1065715968, i32 1065790208, i32 1065864448, i32 1065938688, i32 1066012928, i32 1066087168, i32 1066161408, i32 1066235648, i32 1066309888, i32 1066384128, i32 1066458368, i32 1066532608, i32 1066619648, i32 1066706688, i32 1066793728, i32 1066880768, i32 1066967808, i32 1067054848, i32 1067141888, i32 1067228928, i32 1067315968, i32 1067403008, i32 1067490048, i32 1067577088, i32 1067664128, i32 1067751168, i32 1067838208, i32 1067925248, i32 1068012288, i32 1068099328, i32 1068186368, i32 1068273408, i32 1068360448, i32 1068447488, i32 1068534528, i32 1068621568, i32 1068708608, i32 1068795648, i32 1068882688, i32 1068969728, i32 1069056768, i32 1069143808, i32 1069230848, i32 1069317888, i32 1069404928, i32 1069491968, i32 1069579008, i32 1069666048, i32 1069753088, i32 1069840128, i32 1069927168, i32 1070014208, i32 1070101248, i32 1070188288, i32 1070275328, i32 1070362368, i32 1070449408, i32 1070536448, i32 1070623488, i32 1070710528, i32 1070797568, i32 1070884608, i32 1070971648, i32 1071058688, i32 1071145728, i32 1071232768, i32 1071319808, i32 1071406848, i32 1071493888, i32 1071580928, i32 1071667968, i32 1071755008, i32 1071842048, i32 1071929088, i32 1072016128, i32 1072103168, i32 1072190208, i32 1072277248, i32 1072364288, i32 1072451328, i32 1072538368, i32 1072625408, i32 1072712448, i32 1072799488, i32 1072886528, i32 1072973568, i32 1073060608, i32 1073147648, i32 1073234688, i32 1073321728, i32 1073408768, i32 1073495808, i32 1073582848, i32 1073669888, i32 1073756928, i32 1073843968, i32 1073931008, i32 1074018048, i32 1074105088, i32 1074192128, i32 1074279168, i32 1074366208, i32 1074453248, i32 1074540288, i32 1074627328, i32 1074714368, i32 1074801408, i32 1074888448, i32 1074975488, i32 1075062528, i32 1075149568, i32 1075236608, i32 1075323648, i32 1075410688, i32 1075497728, i32 1075584768, i32 1075671808, i32 1075758848, i32 1075845888, i32 1075932928, i32 1076019968, i32 1076107008, i32 1076194048, i32 1076281088, i32 1076368128, i32 1076455168, i32 1076542208, i32 1076629248, i32 1076716288, i32 1076803328, i32 1076890368, i32 1076977408, i32 1077064448, i32 1077151488, i32 1077238528, i32 1077325568, i32 1077412608, i32 1077499648, i32 1077586688, i32 1077673728, i32 1077760768, i32 1077847808, i32 1077934848, i32 1078021888, i32 1078108928, i32 1078195968, i32 1078283008, i32 1078370048, i32 1078457088, i32 1078544128, i32 1078631168, i32 1078718208, i32 1078805248, i32 1078892288, i32 1078979328, i32 1079066368, i32 1079153408, i32 1079240448, i32 1079327488, i32 1079414528, i32 1079501568, i32 1079588608, i32 1079675648, i32 1079762688, i32 1079849728, i32 1079936768, i32 1080023808, i32 1080110848, i32 1080197888, i32 1080284928, i32 1080371968, i32 1080459008, i32 1080546048, i32 1080633088, i32 1080720128, i32 1080807168, i32 1080894208, i32 1080981248, i32 1081068288, i32 1081155328, i32 1081242368, i32 1081329408, i32 1081416448, i32 1081503488, i32 1081590528, i32 1081677568, i32 1081764608, i32 1081851648, i32 1081938688, i32 1082025728, i32 1082112768, i32 1082199808, i32 1082286848, i32 1082373888, i32 1082460928, i32 1082547968, i32 1082635008, i32 1082722048, i32 1082809088, i32 1082896128, i32 1082983168, i32 1083070208, i32 1083157248, i32 1083244288, i32 1083331328, i32 1083418368, i32 1083505408, i32 1083592448, i32 1083679488, i32 1083766528, i32 1083853568, i32 1083940608, i32 1084027648, i32 1084114688, i32 1084201728, i32 1084288768, i32 1084375808, i32 1084462848, i32 1084549888, i32 1084636928, i32 1084723968, i32 1084811008, i32 1084898048, i32 1084985088, i32 1085072128, i32 1085159168, i32 1085246208, i32 1085333248, i32 1085420288, i32 1085507328, i32 1085594368, i32 1085681408, i32 1085768448, i32 1085855488, i32 1085942528, i32 1086029568, i32 1086116608, i32 1086203648, i32 1086290688, i32 1086377728, i32 1086464768, i32 1086551808, i32 1086638848, i32 1086725888, i32 1086812928, i32 1086899968, i32 1086987008, i32 1087074048, i32 1087161088, i32 1087248128, i32 1087335168, i32 1087422208, i32 1087509248, i32 1087596288, i32 1087683328, i32 1087770368, i32 1087857408, i32 1087944448, i32 1088031488, i32 1088118528, i32 1088205568, i32 1088292608, i32 1088379648, i32 1088466688, i32 1088553728, i32 1088640768, i32 1088727808, i32 1088814848, i32 1088901888, i32 1088988928, i32 1089075968, i32 1089163008, i32 1089250048, i32 1089337088, i32 1089424128, i32 1089511168, i32 1089598208, i32 1089685248, i32 1089772288, i32 1089859328, i32 1089946368, i32 1090033408, i32 1090120448, i32 1090207488, i32 1090294528, i32 1090381568, i32 1090468608, i32 1090555648, i32 1090642688, i32 1090729728, i32 1090816768, i32 1090903808, i32 1090990848, i32 1091077888, i32 1091164928, i32 1091251968, i32 1091339008, i32 1091426048, i32 1091513088, i32 1091600128, i32 1091687168, i32 1091774208, i32 1091861248, i32 1091948288, i32 1092035328, i32 1092122368, i32 1092209408, i32 1092296448, i32 1092383488, i32 1092470528, i32 1092557568, i32 1092644608, i32 1092731648, i32 1092818688, i32 1092905728, i32 1092992768, i32 1093079808, i32 1093166848, i32 1093253888, i32 1093340928, i32 1093427968, i32 1093515008, i32 1093602048, i32 1093689088, i32 1093776128, i32 1093863168, i32 1093950208, i32 1094037248, i32 1094124288, i32 1094211328, i32 1094298368, i32 1094385408, i32 1094472448, i32 1094559488, i32 1094646528, i32 1094733568, i32 1094820608, i32 1094907648, i32 1094994688, i32 1095081728, i32 1095168768, i32 1095255808, i32 1095342848, i32 1095429888, i32 1095516928, i32 1095603968, i32 1095691008, i32 1095778048, i32 1095865088, i32 1095952128, i32 1096039168, i32 1096126208, i32 1096213248, i32 1096300288, i32 1096387328, i32 1096474368, i32 1096561408, i32 1096648448, i32 1096735488, i32 1096822528, i32 1096909568, i32 1096996608, i32 1097083648, i32 1097170688, i32 1097257728, i32 1097344768, i32 1097431808, i32 1097518848, i32 1097605888, i32 1097692928, i32 1097779968, i32 1097867008, i32 1097954048, i32 1098041088, i32 1098128128, i32 1098215168, i32 1098302208, i32 1098389248, i32 1098476288, i32 1098563328, i32 1098650368, i32 1098737408, i32 1098824448, i32 1098911488, i32 1098998528, i32 1099085568, i32 1099172608, i32 1099259648, i32 1099346688, i32 1099433728, i32 1099520768, i32 1099607808, i32 1099694848, i32 1099781888, i32 1099868928, i32 1099955968, i32 1100043008, i32 1100130048, i32 1100217088, i32 1100304128, i32 1100391168, i32 1100478208, i32 1100565248, i32 1100652288, i32 1100739328, i32 1100826368, i32 1100913408, i32 1101000448, i32 1101087488, i32 1101174528, i32 1101261568, i32 1101348608, i32 1101435648, i32 1101522688, i32 1101609728, i32 1101696768, i32 1101783808, i32 1101870848, i32 1101957888, i32 1102044928, i32 1102131968, i32 1102219008, i32 1102306048, i32 1102393088, i32 1102480128, i32 1102567168, i32 1102654208, i32 1102741248, i32 1102828288, i32 1102915328, i32 1103002368, i32 1103089408, i32 1103176448, i32 1103263488, i32 1103350528, i32 1103437568, i32 1103524608, i32 1103611648, i32 1103698688, i32 1103785728, i32 1103872768, i32 1103959808, i32 1104046848, i32 1104133888, i32 1104220928, i32 1104307968, i32 1104395008, i32 1104482048, i32 1104569088, i32 1104656128, i32 1104743168, i32 1104830208, i32 1104917248, i32 1105004288, i32 1105091328, i32 1105178368, i32 1105265408, i32 1105352448, i32 1105439488, i32 1105526528, i32 1105613568, i32 1105700608, i32 1105787648, i32 1105874688, i32 1105961728, i32 1106048768, i32 1106135808, i32 1106222848, i32 1106309888, i32 1106396928, i32 1106483968, i32 1106571008, i32 1106658048, i32 1106745088, i32 1106832128, i32 1106919168, i32 1107006208, i32 1107093248, i32 1107180288, i32 1107267328, i32 1107354368, i32 1107441408, i32 1107528448, i32 1107615488, i32 1107702528, i32 1107789568, i32 1107876608, i32 1107963648, i32 1108050688, i32 1108137728, i32 1108224768, i32 1108311808, i32 1108398848, i32 1108485888, i32 1108572928, i32 1108659968, i32 1108747008, i32 1108834048, i32 1108921088, i32 1109008128, i32 1109095168, i32 1109182208, i32 1109269248, i32 1109356288, i32 1109443328, i32 1109530368, i32 1109617408, i32 1109704448, i32 1109791488, i32 1109878528, i32 1109965568, i32 1110052608, i32 1110139648, i32 1110226688, i32 1110313728, i32 1110400768, i32 1110487808, i32 1110574848, i32 1110661888, i32 1110748928, i32 1110835968, i32 1110923008, i32 1111010048, i32 1111097088, i32 1111203072, i32 1111309056, i32 1111415040, i32 1111521024, i32 1111627008, i32 1111732992, i32 1111838976, i32 1111944960, i32 1112050944, i32 1112156928, i32 1112262912, i32 1112368896, i32 1112474880, i32 1112580864, i32 1112686848, i32 1112792832, i32 1112898816, i32 1113004800, i32 1113110784, i32 1113216768, i32 1113322752, i32 1113428736, i32 1113534720, i32 1113640704, i32 1113746688, i32 1113852672, i32 1113958656, i32 1114064640, i32 1114170624, i32 1114276608, i32 1114382592, i32 1114488576, i32 1114594560, i32 1114700544, i32 1114806528, i32 1114912512, i32 1115018496, i32 1115124480, i32 1115230464, i32 1115336448, i32 1115442432, i32 1115548416, i32 1115654400, i32 1115760384, i32 1115866368, i32 1115972352, i32 1116078336, i32 1116184320, i32 1116290304, i32 1116396288, i32 1116502272, i32 1116608256, i32 1116714240, i32 1116820224, i32 1116926208, i32 1117032192, i32 1117138176, i32 1117244160, i32 1117350144, i32 1117456128, i32 1117562112, i32 1117668096, i32 1117774080, i32 1117880064, i32 1117986048, i32 1118092032, i32 1118198016, i32 1118304000, i32 1118409984, i32 1118515968, i32 1118621952, i32 1118727936, i32 1118833920, i32 1118939904, i32 1119045888, i32 1119151872, i32 1119257856, i32 1119363840, i32 1119469824, i32 1119575808, i32 1119681792, i32 1119787776, i32 1119893760, i32 1119999744, i32 1120105728, i32 1120211712, i32 1120317696, i32 1120423680, i32 1120529664, i32 1120635648, i32 1120741632, i32 1120847616, i32 1120953600, i32 1121059584, i32 1121165568, i32 1121271552, i32 1121377536, i32 1121483520, i32 1121589504, i32 1121695488, i32 1121801472, i32 1121907456, i32 1122013440, i32 1122119424, i32 1122225408, i32 1122331392, i32 1122437376, i32 1122543360, i32 1122649344, i32 1122755328, i32 1122861312, i32 1122967296, i32 1123073280, i32 1123179264, i32 1123285248, i32 1123391232, i32 1123497216, i32 1123603200, i32 1123709184, i32 1123815168, i32 1123921152, i32 1124027136, i32 1124133120, i32 1124239104, i32 1124345088, i32 1124451072, i32 1124557056, i32 1124663040, i32 1124769024, i32 1124875008, i32 1124980992, i32 1125086976, i32 1125192960, i32 1125298944, i32 1125404928, i32 1125510912, i32 1125616896, i32 1125722880, i32 1125828864, i32 1125934848, i32 1126040832, i32 1126146816, i32 1126252800, i32 1126358784, i32 1126464768, i32 1126570752, i32 1126676736, i32 1126782720, i32 1126888704, i32 1126994688, i32 1127100672, i32 1127206656, i32 1127312640, i32 1127418624, i32 1127524608, i32 1127630592, i32 1127736576, i32 1127842560, i32 1127948544, i32 1128054528, i32 1128160512, i32 1128266496, i32 1128372480, i32 1128478464, i32 1128584448, i32 1128690432, i32 1128796416, i32 1128902400, i32 1129008384, i32 1129114368, i32 1129220352, i32 1129326336, i32 1129432320, i32 1129538304, i32 1129644288, i32 1129750272, i32 1129856256, i32 1129962240, i32 1130068224, i32 1130174208, i32 1130280192, i32 1130386176, i32 1130492160, i32 1130598144, i32 1130704128, i32 1130810112, i32 1130916096, i32 1131022080, i32 1131128064, i32 1131234048, i32 1131340032, i32 1131446016, i32 1131552000, i32 1131657984, i32 1131763968, i32 1131869952, i32 1131975936, i32 1132081920, i32 1132187904, i32 1132293888, i32 1132399872, i32 1132505856, i32 1132611840, i32 1132717824, i32 1132823808, i32 1132929792, i32 1133035776, i32 1133141760, i32 1133247744, i32 1133353728, i32 1133459712, i32 1133565696, i32 1133671680, i32 1133777664, i32 1133883648, i32 1133989632, i32 1134095616, i32 1134201600, i32 1134307584, i32 1134413568, i32 1134519552, i32 1134625536, i32 1134731520, i32 1134837504, i32 1134943488, i32 1135049472, i32 1135155456, i32 1135261440, i32 1135367424, i32 1135473408, i32 1135579392, i32 1135685376, i32 1135791360, i32 1135897344, i32 1136003328, i32 1136109312, i32 1136215296, i32 1136321280, i32 1136427264, i32 1136533248, i32 1136639232, i32 1136745216, i32 1136851200, i32 1136957184, i32 1137063168, i32 1137169152, i32 1137275136, i32 1137381120, i32 1137487104, i32 1137593088, i32 1137699072, i32 1137805056, i32 1137911040, i32 1138017024, i32 1138123008, i32 1138228992, i32 1138334976, i32 1138440960, i32 1138546944, i32 1138652928, i32 1138758912, i32 1138864896, i32 1138970880, i32 1139076864, i32 1139182848, i32 1139288832, i32 1139394816, i32 1139500800, i32 1139606784, i32 1139712768, i32 1139818752, i32 1139924736, i32 1140030720, i32 1140136704, i32 1140242688, i32 1140348672, i32 1140454656, i32 1140560640, i32 1140666624, i32 1140772608, i32 1140878592, i32 1140984576, i32 1141090560, i32 1141196544, i32 1141302528, i32 1141408512, i32 1141514496, i32 1141620480, i32 1141726464, i32 1141832448, i32 1141938432, i32 1142044416, i32 1142150400, i32 1142256384, i32 1142362368, i32 1142468352, i32 1142574336, i32 1142680320, i32 1142786304, i32 1142892288, i32 1142998272, i32 1143104256, i32 1143210240, i32 1143316224, i32 1143422208, i32 1143528192, i32 1143634176, i32 1143740160, i32 1143846144, i32 1143952128, i32 1144058112, i32 1144164096, i32 1144270080, i32 1144376064, i32 1144482048, i32 1144588032, i32 1144694016, i32 1144800000, i32 1144905984, i32 1145011968, i32 1145117952, i32 1145223936, i32 1145329920, i32 1145435904, i32 1145541888, i32 1145647872, i32 1145753856, i32 1145859840, i32 1145965824, i32 1146071808, i32 1146177792, i32 1146283776, i32 1146389760, i32 1146495744, i32 1146601728, i32 1146707712, i32 1146813696, i32 1146919680, i32 1147025664, i32 1147131648, i32 1147237632, i32 1147343616, i32 1147449600, i32 1147555584, i32 1147661568, i32 1147767552, i32 1147873536, i32 1147979520, i32 1148085504, i32 1148191488, i32 1148297472, i32 1148403456, i32 1148509440, i32 1148615424, i32 1148721408, i32 1148827392, i32 1148933376, i32 1149039360, i32 1149145344, i32 1149251328, i32 1149357312, i32 1149463296, i32 1149569280, i32 1149675264, i32 1149781248, i32 1149887232, i32 1149993216, i32 1150099200, i32 1150205184, i32 1150311168, i32 1150417152, i32 1150523136, i32 1150629120, i32 1150735104, i32 1150841088, i32 1150947072, i32 1151053056, i32 1151159040, i32 1151265024, i32 1151371008, i32 1151476992, i32 1151582976, i32 1151688960, i32 1151794944, i32 1151900928, i32 1152006912, i32 1152112896, i32 1152218880, i32 1152324864, i32 1152430848, i32 1152536832, i32 1152642816, i32 1152748800, i32 1152854784, i32 1152960768, i32 1153066752, i32 1153172736, i32 1153278720, i32 1153384704, i32 1153490688, i32 1153596672, i32 1153702656, i32 1153808640, i32 1153914624, i32 1154020608, i32 1154126592, i32 1154232576, i32 1154338560, i32 1154444544, i32 1154550528, i32 1154656512, i32 1154762496, i32 1154868480, i32 1154974464, i32 1155080448, i32 1155186432, i32 1155292416, i32 1155398400, i32 1155504384, i32 1155610368, i32 1155716352, i32 1155822336, i32 1155928320, i32 1156034304, i32 1156140288, i32 1156246272, i32 1156352256, i32 1156458240, i32 1156564224, i32 1156670208, i32 1156776192, i32 1156882176, i32 1156988160, i32 1157094144, i32 1157200128, i32 1157306112, i32 1157412096, i32 1157518080, i32 1157624064, i32 1157730048, i32 1157836032, i32 1157942016, i32 1158048000, i32 1158153984, i32 1158259968, i32 1158365952, i32 1158471936, i32 1158577920, i32 1158683904, i32 1158789888, i32 1158895872, i32 1159001856, i32 1159107840, i32 1159213824, i32 1159319808, i32 1159425792, i32 1159531776, i32 1159637760, i32 1159743744, i32 1159849728, i32 1159955712, i32 1160061696, i32 1160167680, i32 1160273664, i32 1160379648, i32 1160485632, i32 1160591616, i32 1160697600, i32 1160803584, i32 1160909568, i32 1161015552, i32 1161121536, i32 1161227520, i32 1161333504, i32 1161439488, i32 1161545472, i32 1161651456, i32 1161757440, i32 1161863424, i32 1161969408, i32 1162075392, i32 1162181376, i32 1162287360, i32 1162393344, i32 1162499328, i32 1162605312, i32 1162711296, i32 1162817280, i32 1162923264, i32 1163029248, i32 1163135232, i32 1163241216, i32 1163347200, i32 1163453184, i32 1163559168, i32 1163665152, i32 1163771136, i32 1163877120, i32 1163983104, i32 1164089088, i32 1164195072, i32 1164301056, i32 1164407040, i32 1164513024, i32 1164619008, i32 1164724992, i32 1164830976, i32 1164936960, i32 1165042944, i32 1165148928, i32 1165254912, i32 1165360896, i32 1165484800, i32 1165608704, i32 1165732608, i32 1165856512, i32 1165980416, i32 1166104320, i32 1166228224, i32 1166352128, i32 1166476032, i32 1166599936, i32 1166723840, i32 1166847744, i32 1166971648, i32 1167095552, i32 1167219456, i32 1167343360, i32 1167467264, i32 1167591168, i32 1167715072, i32 1167838976, i32 1167962880, i32 1168086784, i32 1168210688, i32 1168334592, i32 1168458496, i32 1168582400, i32 1168706304, i32 1168830208, i32 1168954112, i32 1169078016, i32 1169201920, i32 1169325824, i32 1169449728, i32 1169573632, i32 1169697536, i32 1169821440, i32 1169945344, i32 1170069248, i32 1170193152, i32 1170317056, i32 1170440960, i32 1170564864, i32 1170688768, i32 1170812672, i32 1170936576, i32 1171060480, i32 1171184384, i32 1171308288, i32 1171432192, i32 1171556096, i32 1171680000, i32 1171803904, i32 1171927808, i32 1172051712, i32 1172175616, i32 1172299520, i32 1172423424, i32 1172547328, i32 1172671232, i32 1172795136, i32 1172919040, i32 1173042944, i32 1173166848, i32 1173290752, i32 1173414656, i32 1173538560, i32 1173662464, i32 1173786368, i32 1173910272, i32 1174034176, i32 1174158080, i32 1174281984, i32 1174405888, i32 1174529792, i32 1174653696, i32 1174777600, i32 1174901504, i32 1175025408, i32 1175149312, i32 1175273216, i32 1175397120, i32 1175521024, i32 1175644928, i32 1175768832, i32 1175892736, i32 1176016640, i32 1176140544, i32 1176264448, i32 1176388352, i32 1176512256, i32 1176636160, i32 1176760064, i32 1176883968, i32 1177007872, i32 1177131776, i32 1177255680, i32 1177379584, i32 1177503488, i32 1177627392, i32 1177751296, i32 1177875200, i32 1177999104, i32 1178123008, i32 1178246912, i32 1178370816, i32 1178494720, i32 1178618624, i32 1178742528, i32 1178866432, i32 1178990336, i32 1179114240, i32 1179238144, i32 1179362048, i32 1179485952, i32 1179609856, i32 1179733760, i32 1179857664, i32 1179981568, i32 1180105472, i32 1180229376, i32 1180353280, i32 1180477184, i32 1180601088, i32 1180724992, i32 1180848896, i32 1180972800, i32 1181096704, i32 1181220608, i32 1181344512, i32 1181468416, i32 1181592320, i32 1181716224, i32 1181840128, i32 1181964032, i32 1182087936, i32 1182211840, i32 1182335744, i32 1182459648, i32 1182583552, i32 1182707456, i32 1182831360, i32 1182955264, i32 1183079168, i32 1183203072, i32 1183326976, i32 1183450880, i32 1183574784, i32 1183698688, i32 1183822592, i32 1183946496, i32 1184070400, i32 1184194304, i32 1184318208, i32 1184442112, i32 1184566016, i32 1184689920, i32 1184813824, i32 1184937728, i32 1185061632, i32 1185185536, i32 1185309440, i32 1185433344, i32 1185557248, i32 1185681152, i32 1185805056, i32 1185928960, i32 1186052864, i32 1186176768, i32 1186300672, i32 1186424576, i32 1186548480, i32 1186672384, i32 1186796288, i32 1186920192, i32 1187044096, i32 1187168000, i32 1187291904, i32 1187415808, i32 1187539712, i32 1187663616, i32 1187787520, i32 1187911424, i32 1188035328, i32 1188159232, i32 1188283136, i32 1188407040, i32 1188530944, i32 1188654848, i32 1188778752, i32 1188902656, i32 1189026560, i32 1189150464, i32 1189274368, i32 1189398272, i32 1189522176, i32 1189646080, i32 1189769984, i32 1189893888, i32 1190017792, i32 1190141696, i32 1190265600, i32 1190389504, i32 1190513408, i32 1190637312, i32 1190761216, i32 1190885120, i32 1191009024, i32 1191132928, i32 1191256832, i32 1191380736, i32 1191504640, i32 1191628544, i32 1191752448, i32 1191876352, i32 1192000256, i32 1192124160, i32 1192248064, i32 1192371968, i32 1192495872, i32 1192619776, i32 1192743680, i32 1192867584, i32 1192991488, i32 1193115392, i32 1193239296, i32 1193363200, i32 1193487104, i32 1193611008, i32 1193734912, i32 1193858816, i32 1193982720, i32 1194106624, i32 1194230528, i32 1194354432, i32 1194478336, i32 1194602240, i32 1194726144, i32 1194850048, i32 1194973952, i32 1195097856, i32 1195221760, i32 1195345664, i32 1195469568, i32 1195593472, i32 1195717376, i32 1195841280, i32 1195965184, i32 1196089088, i32 1196212992, i32 1196336896, i32 1196460800, i32 1196584704, i32 1196708608, i32 1196832512, i32 1196956416, i32 1197080320, i32 1197227776, i32 1197375232, i32 1197522688, i32 1197670144, i32 1197817600, i32 1197965056, i32 1198112512, i32 1198259968, i32 1198407424, i32 1198554880, i32 1198702336, i32 1198849792, i32 1198997248, i32 1199144704, i32 1199292160, i32 1199439616, i32 1199587072, i32 1199734528, i32 1199881984, i32 1200029440, i32 1200176896, i32 1200324352, i32 1200471808, i32 1200619264, i32 1200766720, i32 1200914176, i32 1201061632, i32 1201209088, i32 1201356544, i32 1201504000, i32 1201651456, i32 1201798912, i32 1201946368, i32 1202093824, i32 1202241280, i32 1202388736, i32 1202536192, i32 1202683648, i32 1202831104, i32 1202978560, i32 1203126016, i32 1203273472, i32 1203420928, i32 1203568384, i32 1203715840, i32 1203863296, i32 1204010752, i32 1204158208, i32 1204305664, i32 1204453120, i32 1204600576, i32 1204748032, i32 1204895488, i32 1205042944, i32 1205190400, i32 1205337856, i32 1205485312, i32 1205632768, i32 1205780224, i32 1205927680, i32 1206075136, i32 1206222592, i32 1206370048, i32 1206517504, i32 1206664960, i32 1206812416, i32 1206959872, i32 1207107328, i32 1207254784, i32 1207402240, i32 1207549696, i32 1207697152, i32 1207844608, i32 1207992064, i32 1208139520, i32 1208286976, i32 1208434432, i32 1208581888, i32 1208729344, i32 1208876800, i32 1209024256, i32 1209171712, i32 1209319168, i32 1209466624, i32 1209614080, i32 1209761536, i32 1209908992, i32 1210056448, i32 1210203904, i32 1210351360, i32 1210498816, i32 1210646272, i32 1210793728, i32 1210941184, i32 1211088640, i32 1211236096, i32 1211383552, i32 1211531008, i32 1211678464, i32 1211825920, i32 1211973376, i32 1212120832, i32 1212268288, i32 1212415744, i32 1212563200, i32 1212710656, i32 1212858112, i32 1213005568, i32 1213153024, i32 1213300480, i32 1213447936, i32 1213595392, i32 1213742848, i32 1213890304, i32 1214037760, i32 1214185216, i32 1214332672, i32 1214480128, i32 1214627584, i32 1214775040, i32 1214922496, i32 1215069952, i32 1215217408, i32 1215364864, i32 1215512320, i32 1215659776, i32 1215807232, i32 1215954688, i32 1216102144, i32 1216249600, i32 1216397056, i32 1216544512, i32 1216691968, i32 1216839424, i32 1216986880, i32 1217134336, i32 1217281792, i32 1217429248, i32 1217576704, i32 1217724160, i32 1217871616, i32 1218019072, i32 1218166528, i32 1218313984, i32 1218461440, i32 1218608896, i32 1218756352, i32 1218903808, i32 1219051264, i32 1219198720, i32 1219346176, i32 1219493632, i32 1219641088, i32 1219788544, i32 1219936000, i32 1220083456, i32 1220230912, i32 1220378368, i32 1220525824, i32 1220673280, i32 1220820736, i32 1220968192, i32 1221115648, i32 1221263104, i32 1221410560, i32 1221558016, i32 1221705472, i32 1221852928, i32 1222000384, i32 1222147840, i32 1222295296, i32 1222442752, i32 1222590208, i32 1222737664, i32 1222885120, i32 1223032576, i32 1223180032, i32 1223327488, i32 1223474944, i32 1223622400, i32 1223769856, i32 1223917312, i32 1224064768, i32 1224212224, i32 1224359680, i32 1224507136, i32 1224654592, i32 1224802048, i32 1224949504, i32 1225096960, i32 1225244416, i32 1225391872, i32 1225539328, i32 1225686784, i32 1225834240, i32 1225981696, i32 1226129152, i32 1226276608, i32 1226424064, i32 1226571520, i32 1226718976, i32 1226866432, i32 1227013888, i32 1227161344, i32 1227308800, i32 1227456256, i32 1227603712, i32 1227751168, i32 1227898624, i32 1228046080, i32 1228193536, i32 1228340992, i32 1228488448, i32 1228635904, i32 1228783360, i32 1228930816, i32 1229078272, i32 1229225728, i32 1229373184, i32 1229520640, i32 1229668096, i32 1229815552, i32 1229963008, i32 1230110464, i32 1230257920, i32 1230405376, i32 1230552832, i32 1230700288, i32 1230847744, i32 1230995200, i32 1231142656, i32 1231290112, i32 1231437568, i32 1231585024, i32 1231732480, i32 1231879936, i32 1232027392, i32 1232174848, i32 1232322304, i32 1232469760, i32 1232617216, i32 1232764672, i32 1232912128, i32 1233059584, i32 1233207040, i32 1233354496, i32 1233501952, i32 1233649408, i32 1233796864, i32 1233944320, i32 1234091776, i32 1234239232, i32 1234386688, i32 1234534144, i32 1234681600, i32 1234829056, i32 1235006208, i32 1235183360, i32 1235360512, i32 1235537664, i32 1235714816, i32 1235891968, i32 1236069120, i32 1236246272, i32 1236423424, i32 1236600576, i32 1236777728, i32 1236954880, i32 1237132032, i32 1237309184, i32 1237486336, i32 1237663488, i32 1237840640, i32 1238017792, i32 1238194944, i32 1238372096, i32 1238549248, i32 1238726400, i32 1238903552, i32 1239080704, i32 1239257856, i32 1239435008, i32 1239612160, i32 1239789312, i32 1239966464, i32 1240143616, i32 1240320768, i32 1240497920, i32 1240675072, i32 1240852224, i32 1241029376, i32 1241206528, i32 1241383680, i32 1241560832, i32 1241737984, i32 1241915136, i32 1242092288, i32 1242269440, i32 1242446592, i32 1242623744, i32 1242800896, i32 1242978048, i32 1243155200, i32 1243332352, i32 1243509504, i32 1243686656, i32 1243863808, i32 1244040960, i32 1244218112, i32 1244395264, i32 1244572416, i32 1244749568, i32 1244926720, i32 1245103872, i32 1245281280, i32 1245458432, i32 1245635584, i32 1245812736, i32 1245989888, i32 1246167040, i32 1246344192, i32 1246521344, i32 1246698496, i32 1246875648, i32 1247052800, i32 1247229952, i32 1247407104, i32 1247584256, i32 1247761408, i32 1247938560, i32 1248115712, i32 1248292864, i32 1248470016, i32 1248647168, i32 1248824320, i32 1249001472, i32 1249178624, i32 1249355776, i32 1249532928, i32 1249710080, i32 1249887232, i32 1250064384, i32 1250241536, i32 1250418688, i32 1250595840, i32 1250772992, i32 1250950144, i32 1251127296, i32 1251304448, i32 1251481600, i32 1251658752, i32 1251835904, i32 1252013056, i32 1252190208, i32 1252367360, i32 1252544512, i32 1252721664, i32 1252898816, i32 1253075968, i32 1253253120, i32 1253430272, i32 1253607424, i32 1253784576, i32 1253961728, i32 1254138880, i32 1254316032, i32 1254493184, i32 1254670336, i32 1254847488, i32 1255024640, i32 1255201792, i32 1255378944, i32 1255556096, i32 1255733248, i32 1255910400, i32 1256087552, i32 1256264704, i32 1256441856, i32 1256619008, i32 1256796160, i32 1256973312, i32 1257150464, i32 1257327616, i32 1257504768, i32 1257688064, i32 1257871360, i32 1258054656, i32 1258237952, i32 1258421248, i32 1258604544, i32 1258787840, i32 1258971136, i32 1259154432, i32 1259337728, i32 1259521024, i32 1259704320, i32 1259887616, i32 1260070912, i32 1260254208, i32 1260437504, i32 1260620800, i32 1260804096, i32 1260987392, i32 1261170688, i32 1261353984, i32 1261537280, i32 1261720576, i32 1261903872, i32 1262087168, i32 1262270464, i32 1262453760, i32 1262637056, i32 1262820352, i32 1263003648, i32 1263186944, i32 1263370240, i32 1263553536, i32 1263736832, i32 1263920128, i32 1264103424, i32 1264286720, i32 1264470016, i32 1264653312, i32 1264836608, i32 1265019904, i32 1265203200, i32 1265386496, i32 1265569792, i32 1265753088, i32 1265936384, i32 1266119680, i32 1266302976, i32 1266486272, i32 1266669568, i32 1266852864, i32 1267036160, i32 1267219456, i32 1267402752, i32 1267586048, i32 1267769344, i32 1267952640, i32 1268135936, i32 1268319232, i32 1268502528, i32 1268685824, i32 1268869120, i32 1269052416, i32 1269235712, i32 1269419008, i32 1269602304, i32 1269785600, i32 1269968896, i32 1270152192, i32 1270335232, i32 1270518528, i32 1270701824, i32 1270885120, i32 1271068416, i32 1271251712, i32 1271435008, i32 1271618304, i32 1271801600, i32 1271984896, i32 1272168192, i32 1272351488, i32 1272534784, i32 1272718080, i32 1272901376, i32 1273084672, i32 1273267968, i32 1273451264, i32 1273634560, i32 1273817856, i32 1274001152, i32 1274184448, i32 1274367744, i32 1274551040, i32 1274734336, i32 1274917632, i32 1275100928, i32 1275284224, i32 1275467520, i32 1275650816, i32 1275834112, i32 1276017408, i32 1276200704, i32 1276384000, i32 1276567296, i32 1276750592, i32 1276933888, i32 1277117184, i32 1277300480, i32 1277483776, i32 1277667072, i32 1277850368, i32 1278033664, i32 1278216960, i32 1278400256, i32 1278583552, i32 1278766848, i32 1278950144, i32 1279133440, i32 1279316736, i32 1279500032, i32 1279683328, i32 1279866624, i32 1280049920, i32 1280233216, i32 1280416512, i32 1280599808, i32 1280783104, i32 1280966400, i32 1281193728, i32 1281421056, i32 1281648384, i32 1281875712, i32 1282103040, i32 1282330368, i32 1282557696, i32 1282785024, i32 1283012352, i32 1283239680, i32 1283467008, i32 1283694336, i32 1283921664, i32 1284148992, i32 1284376320, i32 1284603648, i32 1284830976, i32 1285058304, i32 1285285632, i32 1285512960, i32 1285740288, i32 1285967616, i32 1286194944, i32 1286422272, i32 1286649600, i32 1286876928, i32 1287104256, i32 1287331584, i32 1287558912, i32 1287786240, i32 1288013568, i32 1288240896, i32 1288468224, i32 1288695552, i32 1288922880, i32 1289150208, i32 1289377536, i32 1289604864, i32 1289832192, i32 1290059520, i32 1290286848, i32 1290514176, i32 1290741504, i32 1290968832, i32 1291196160, i32 1291423488, i32 1291650816, i32 1291878144, i32 1292105472, i32 1292332800, i32 1292560128, i32 1292787456, i32 1293014784, i32 1293242112, i32 1293469440, i32 1293696768, i32 1293924096, i32 1294151424, i32 1294378752, i32 1294606080, i32 1294833408, i32 1295060736, i32 1295288064, i32 1295515392, i32 1295742720, i32 1295970048, i32 1296197376, i32 1296424704, i32 1296652032, i32 1296879360, i32 1297106688, i32 1297334016, i32 1297561344, i32 1297788672, i32 1298016000, i32 1298243328, i32 1298470656, i32 1298697984, i32 1298925312, i32 1299152640, i32 1299379968, i32 1299607296, i32 1299834624, i32 1300061952, i32 1300289280, i32 1300516608, i32 1300743936, i32 1300971264, i32 1301198592, i32 1301425920, i32 1301653248, i32 1301880576, i32 1302107904, i32 1302335232, i32 1302562560, i32 1302789888, i32 1303017216, i32 1303244544, i32 1303471872, i32 1303699200, i32 1303926528, i32 1304153856, i32 1304381184, i32 1304608512, i32 1304835840, i32 1305063168, i32 1305290496, i32 1305517824, i32 1305745152, i32 1305972480, i32 1306199808, i32 1306427136, i32 1306654464, i32 1306881792, i32 1307109120, i32 1307336448, i32 1307563776, i32 1307791104, i32 1308018432, i32 1308245760, i32 1308473088, i32 1308700416, i32 1308927744, i32 1309155072, i32 1309382400, i32 1309609728, i32 1309837056, i32 1310064384, i32 1310326528, i32 1310588672, i32 1310850816, i32 1311112960, i32 1311375104, i32 1311637248, i32 1311899392, i32 1312161536, i32 1312423680, i32 1312685824, i32 1312947968, i32 1313210112, i32 1313472256, i32 1313734400, i32 1313996544, i32 1314258688, i32 1314520832, i32 1314782976, i32 1315045120, i32 1315307264, i32 1315569408, i32 1315831552, i32 1316093696, i32 1316355840, i32 1316617984, i32 1316880128, i32 1317142272, i32 1317404416, i32 1317666560, i32 1317928704, i32 1318190848, i32 1318452992, i32 1318715136, i32 1318977280, i32 1319239424, i32 1319501568, i32 1319763712, i32 1320025856, i32 1320288000, i32 1320550144, i32 1320812288, i32 1321074432, i32 1321336576, i32 1321598720, i32 1321860864, i32 1322123008, i32 1322385152, i32 1322647296, i32 1322909440, i32 1323171584, i32 1323433728, i32 1323695872, i32 1323958016, i32 1324220160, i32 1324482304, i32 1324744448, i32 1325006592, i32 1325268736, i32 1325530880, i32 1325793024, i32 1326055168, i32 1326317312, i32 1326579456, i32 1326841600, i32 1327103744, i32 1327365888, i32 1327628032, i32 1327890176, i32 1328152320, i32 1328414464, i32 1328676608, i32 1328938752, i32 1329200896, i32 1329463040, i32 1329725184, i32 1329987328, i32 1330249472, i32 1330511616, i32 1330773760, i32 1331035904, i32 1331298048, i32 1331560192, i32 1331822336, i32 1332084480, i32 1332346624, i32 1332608768, i32 1332870912, i32 1333133056, i32 1333395200, i32 1333657344, i32 1333919488, i32 1334181632, i32 1334443776, i32 1334705920, i32 1334968064, i32 1335230208, i32 1335492352, i32 1335754496, i32 1336016640, i32 1336278784, i32 1336540928, i32 1336803072, i32 1337065216, i32 1337327360, i32 1337589504, i32 1337851648, i32 1338113792, i32 1338375936, i32 1338638080, i32 1338900224, i32 1339162368, i32 1339424512, i32 1339686656, i32 1339948800, i32 1340210944, i32 1340473088, i32 1340735232, i32 1340997376, i32 1341259520, i32 1341521664, i32 1341783808, i32 1342045952, i32 1342308096, i32 1342570240, i32 1342832384, i32 1343094528, i32 1343356672, i32 1343618816, i32 1343911680, i32 1344204544, i32 1344497408, i32 1344790272, i32 1345083136, i32 1345376000, i32 1345668864, i32 1345961728, i32 1346254592, i32 1346547456, i32 1346840320, i32 1347133184, i32 1347426048, i32 1347718912, i32 1348011776, i32 1348304640, i32 1348597504, i32 1348890368, i32 1349183232, i32 1349476096, i32 1349768960, i32 1350062080, i32 1350354944, i32 1350647808, i32 1350940672, i32 1351233536, i32 1351526400, i32 1351819264, i32 1352112128, i32 1352404992, i32 1352697856, i32 1352990720, i32 1353283584, i32 1353576448, i32 1353869312, i32 1354162176, i32 1354455040, i32 1354747904, i32 1355040768, i32 1355333632, i32 1355626496, i32 1355919360, i32 1356212224, i32 1356505088, i32 1356797952, i32 1357090816, i32 1357383680, i32 1357676544, i32 1357969408, i32 1358262272, i32 1358555136, i32 1358848000, i32 1359140864, i32 1359433728, i32 1359726592, i32 1360019456, i32 1360312320, i32 1360605184, i32 1360898048, i32 1361190912, i32 1361483776, i32 1361776640, i32 1362069504, i32 1362362368, i32 1362716672, i32 1363070976, i32 1363425280, i32 1363779584, i32 1364133888, i32 1364488192, i32 1364842496, i32 1365196800, i32 1365551104, i32 1365905408, i32 1366259712, i32 1366614016, i32 1366968320, i32 1367322624, i32 1367676928, i32 1368031232, i32 1368385536, i32 1368739840, i32 1369094144, i32 1369448448, i32 1369802752, i32 1370157056, i32 1370511360, i32 1370865664, i32 1371219968, i32 1371574272, i32 1371928576, i32 1372282880, i32 1372637184, i32 1372991488, i32 1373345792, i32 1373700096, i32 1374054400, i32 1374408704, i32 1374763008, i32 1375117312, i32 1375471616, i32 1375825920, i32 1376180224, i32 1376534528, i32 1376888832, i32 1377243136, i32 1377597440, i32 1377951744, i32 1378306048, i32 1378660352, i32 1379014656, i32 1379368960, i32 1379723264, i32 1380077568, i32 1380431872, i32 1380786176, i32 1381140480, i32 1381494784, i32 1381849088, i32 1382203392, i32 1382557696, i32 1382912000, i32 1383266304, i32 1383620608, i32 1383974912, i32 1384329216, i32 1384683520, i32 1385037824, i32 1385414656, i32 1385791488, i32 1386168320, i32 1386545152, i32 1386921984, i32 1387298816, i32 1387675648, i32 1388052480, i32 1388429056, i32 1388805888, i32 1389182720, i32 1389559552, i32 1389936384, i32 1390313216, i32 1390690048, i32 1391066880, i32 1391443712, i32 1391820544, i32 1392197376, i32 1392574208, i32 1392951040, i32 1393327872, i32 1393704704, i32 1394081536, i32 1394458368, i32 1394835200, i32 1395212032, i32 1395588864, i32 1395965696, i32 1396342528, i32 1396719360, i32 1397096192, i32 1397473024, i32 1397849856, i32 1398226688, i32 1398603520, i32 1398980352, i32 1399357184, i32 1399734016, i32 1400110848, i32 1400487680, i32 1400864512, i32 1401241344, i32 1401618176, i32 1401995008, i32 1402371840, i32 1402748672, i32 1403125504, i32 1403502336, i32 1403879168, i32 1404256000, i32 1404632832, i32 1405009664, i32 1405386496, i32 1405763328, i32 1406140160, i32 1406516992, i32 1406893824, i32 1407270656, i32 1407647488, i32 1408024320, i32 1408401152, i32 1408777984, i32 1409154816, i32 1409638144, i32 1410121472, i32 1410604800, i32 1411088128, i32 1411571456, i32 1412054784, i32 1412538112, i32 1413021440, i32 1413504768, i32 1413988096, i32 1414471424, i32 1414954752, i32 1415438080, i32 1415921408, i32 1416404736, i32 1416888064, i32 1417371392, i32 1417854720, i32 1418338048, i32 1418821376, i32 1419304704, i32 1419788032, i32 1420271360, i32 1420754688, i32 1421238016, i32 1421721344, i32 1422204672, i32 1422688000, i32 1423171328, i32 1423654656, i32 1424137984, i32 1424621312, i32 1425104640, i32 1425587968, i32 1426071296, i32 1426554624, i32 1427037952, i32 1427521280, i32 1428004608, i32 1428487936, i32 1428971264, i32 1429454592, i32 1429937920, i32 1430421248, i32 1430904576, i32 1431387904, i32 1431871232, i32 1432354560, i32 1432837888, i32 1433321216, i32 1433804544, i32 1434287872, i32 1434771200, i32 1435254528, i32 1435737856, i32 1436221184, i32 1436704512, i32 1437187840, i32 1437671168, i32 1438154496, i32 1438637824, i32 1439121152, i32 1439604480, i32 1440087808, i32 1440653056, i32 1441218304, i32 1441783552, i32 1442348800, i32 1442914048, i32 1443479296, i32 1444044544, i32 1444609792, i32 1445175040, i32 1445740288, i32 1446305536, i32 1446870784, i32 1447436032, i32 1448001280, i32 1448566528, i32 1449131776, i32 1449697024, i32 1450262272, i32 1450827520, i32 1451392768, i32 1451958016, i32 1452523264, i32 1453088512, i32 1453653760, i32 1454219008, i32 1454784256, i32 1455349504, i32 1455914752, i32 1456480000, i32 1457045248, i32 1457610496, i32 1458175744, i32 1458740992, i32 1459306240, i32 1459871488, i32 1460436736, i32 1461001984, i32 1461567232, i32 1462132480, i32 1462697728, i32 1463262976, i32 1463828224, i32 1464393472, i32 1464958720, i32 1465523968, i32 1466089216, i32 1466654464, i32 1467219712, i32 1467784960, i32 1468350208, i32 1468915456, i32 1469480704, i32 1470045952, i32 1470611200, i32 1471176448, i32 1471741696, i32 1472306944, i32 1472872192, i32 1473437440, i32 1474002688, i32 1474567936, i32 1475133184, i32 1475698432, i32 1476263680, i32 1476951808, i32 1477639936, i32 1478328064, i32 1479016192, i32 1479704320, i32 1480392448, i32 1481080576, i32 1481768704, i32 1482456832, i32 1483144960, i32 1483833088, i32 1484521216, i32 1485209344, i32 1485897472, i32 1486585600, i32 1487273728, i32 1487961856, i32 1488649984, i32 1489338112, i32 1490026240, i32 1490714368, i32 1491402496, i32 1492090624, i32 1492778752, i32 1493466880, i32 1494155008, i32 1494843136, i32 1495531264, i32 1496219392, i32 1496907520, i32 1497595648, i32 1498283776, i32 1498971904, i32 1499660032, i32 1500348160, i32 1501036288, i32 1501724416, i32 1502412544, i32 1503100672, i32 1503788800, i32 1504476928, i32 1505165056, i32 1505853184, i32 1506541312, i32 1507229440, i32 1507917568, i32 1508605696, i32 1509293824, i32 1509981952, i32 1510670080, i32 1511358208, i32 1512046336, i32 1512734464, i32 1513422592, i32 1514110720, i32 1514798848, i32 1515486976, i32 1516175104, i32 1516863232, i32 1517551360, i32 1518239488, i32 1518927616, i32 1519615744, i32 1520303872, i32 1521092352, i32 1521880832, i32 1522669312, i32 1523457792, i32 1524246272, i32 1525034752, i32 1525823232, i32 1526611712, i32 1527400192, i32 1528188672, i32 1528977152, i32 1529765632, i32 1530554112, i32 1531342592, i32 1532131072, i32 1532919552, i32 1533708032, i32 1534496512, i32 1535284992, i32 1536073472, i32 1536861952, i32 1537650432, i32 1538438912, i32 1539227392, i32 1540015872, i32 1540804352, i32 1541592832, i32 1542381312, i32 1543169792, i32 1543958272, i32 1544746752, i32 1545535232, i32 1546323712, i32 1547112192, i32 1547900672, i32 1548689152, i32 1549477632, i32 1550266112, i32 1551054592, i32 1551843072, i32 1552631552, i32 1553420032, i32 1554208512, i32 1554996992, i32 1555785472, i32 1556573952, i32 1557362432, i32 1558150912, i32 1558939392, i32 1559727872, i32 1560516352, i32 1561304832, i32 1562093312, i32 1562881792, i32 1563670272, i32 1564458752, i32 1565247232, i32 1566035712, i32 1566824192, i32 1567612672, i32 1568401152, i32 1569189632, i32 1569978112, i32 1570766848, i32 1571586048, i32 1572405248, i32 1573224448, i32 1574043648, i32 1574862848, i32 1575682048, i32 1576501248, i32 1577320448, i32 1578139648, i32 1578958848, i32 1579778048, i32 1580597248, i32 1581416448, i32 1582235648, i32 1583054848, i32 1583874048, i32 1584693248, i32 1585512448, i32 1586331648, i32 1587150848, i32 1587970048, i32 1588789248, i32 1589608448, i32 1590427648, i32 1591246848, i32 1592066048, i32 1592885248, i32 1593704448, i32 1594523648, i32 1595342848, i32 1596162048, i32 1596981248, i32 1597800448, i32 1598619648, i32 1599438848, i32 1600258048, i32 1601077248, i32 1601896448, i32 1602715648, i32 1603534848, i32 1604354048, i32 1605173248, i32 1605992448, i32 1606811648, i32 1607630848, i32 1608450048, i32 1609269248, i32 1610088448, i32 1610907648, i32 1611726848, i32 1612546048, i32 1613365248, i32 1614184448, i32 1615003648, i32 1615822848, i32 1616642048, i32 1617461248, i32 1618280448, i32 1619099648, i32 1619918848, i32 1620738048, i32 1621557248, i32 1622376448, i32 1623195648, i32 1624014848, i32 1624834048, i32 1625653248, i32 1626472448, i32 1627291648, i32 1628110848, i32 1628930048, i32 1629749248, i32 1630568448, i32 1631387648, i32 1632206848, i32 1633026048, i32 1633845248, i32 1634664448, i32 1635483648, i32 1636302848, i32 1637122048, i32 1637941248, i32 1638760448, i32 1639579648, i32 1640398848, i32 1641218048, i32 1642037248, i32 1642856448, i32 1643675648, i32 1644494848, i32 1645314048, i32 1646133248, i32 1646952448, i32 1647771648, i32 1648590848, i32 1649410048, i32 1650229248, i32 1651048448, i32 1651867648, i32 1652686848, i32 1653506048, i32 1654325248, i32 1655144448, i32 1655963648, i32 1656782848, i32 1657602048, i32 1658421248, i32 1659240448, i32 1660059648, i32 1660878848, i32 1661698048, i32 1662517248, i32 1663336448, i32 1664155648, i32 1664974848, i32 1665794048, i32 1666613248, i32 1667432448, i32 1668251648, i32 1669070848, i32 1669890048, i32 1670709248, i32 1671528448, i32 1672347648, i32 1673166848, i32 1673986048, i32 1674805248, i32 1675624448, i32 1676443648, i32 1677262848, i32 1678082048, i32 1678901248, i32 1679720448, i32 1680539648, i32 1681358848, i32 1682178048, i32 1682997248, i32 1683816448, i32 1684635648, i32 1685454848, i32 1686274048, i32 1687093248, i32 1687912448, i32 1688731648, i32 1689550848, i32 1690370048, i32 1691189248, i32 1692008448, i32 1692827648, i32 1693646848, i32 1694466048, i32 1695285248, i32 1696104448, i32 1696923648, i32 1697742848, i32 1698562048, i32 1699381248, i32 1700200448, i32 1701019648, i32 1701838848, i32 1702658048, i32 1703477248, i32 1704296448, i32 1705115648, i32 1705934848, i32 1706754048, i32 1707573248, i32 1708392448, i32 1709211648, i32 1710030848, i32 1710850048, i32 1711669248, i32 1712488448, i32 1713307648, i32 1714126848, i32 1714946048, i32 1715765248, i32 1716584448, i32 1717403648, i32 1718222848, i32 1719042048, i32 1719861248, i32 1720680448, i32 1721499648, i32 1722318848, i32 1723138048, i32 1723957248, i32 1724776448, i32 1725595648, i32 1726414848, i32 1727234048, i32 1728053248, i32 1728872448, i32 1729691648, i32 1730510848, i32 1731330048, i32 1732149248, i32 1732968448, i32 1733787648, i32 1734606848, i32 1735426048, i32 1736245248, i32 1737064448, i32 1737883648, i32 1738702848, i32 1739522048, i32 1740341248, i32 1741160448, i32 1741979648, i32 1742798848, i32 1743618048, i32 1744437248, i32 1745256448, i32 1746075648, i32 1746894848, i32 1747714048, i32 1748533248, i32 1749352448, i32 1750171648, i32 1750990848, i32 1751810048, i32 1752629248, i32 1753448448, i32 1754267648, i32 1755086848, i32 1755906048, i32 1756725248, i32 1757544448, i32 1758363648, i32 1759182848, i32 1760002048, i32 1760821248, i32 1761640448, i32 1762459648, i32 1763278848, i32 1764098048, i32 1764917248, i32 1765736448, i32 1766555648, i32 1767374848, i32 1768194048, i32 1769013248, i32 1769832448, i32 1770651648, i32 1771470848, i32 1772290048, i32 1773109248, i32 1773928448, i32 1774747648, i32 1775566848, i32 1776386048, i32 1777205248, i32 1778024448, i32 1778843648, i32 1779662848, i32 1780482048, i32 1781301248, i32 1782120448, i32 1782939648, i32 1783758848, i32 1784578048, i32 1785397248, i32 1786216448, i32 1787035648, i32 1787854848, i32 1788674048, i32 1789493248, i32 1790312448, i32 1791131648, i32 1791950848, i32 1792770048, i32 1793589248, i32 1794408448, i32 1795227648, i32 1796046848, i32 1796866048, i32 1797685248, i32 1798504448, i32 1799323648, i32 1800142848, i32 1800962048, i32 1801781248, i32 1802600448, i32 1803419648, i32 1804238848, i32 1805058048, i32 1805877248, i32 1806696448, i32 1807515648, i32 1808334848, i32 1809154048, i32 1809973248, i32 1810792448, i32 1811611648, i32 1812430848, i32 1813250048, i32 1814069248, i32 1814888448, i32 1815707648, i32 1816526848, i32 1817346048, i32 1818165248, i32 1818984448, i32 1819803648, i32 1820622848, i32 1821442048, i32 1822261248, i32 1823080448, i32 1823899648, i32 1824718848, i32 1825538048, i32 1826357248, i32 1827176448, i32 1827995648, i32 1828814848, i32 1829634048, i32 1830453248, i32 1831272448, i32 1832091648, i32 1832910848, i32 1833730048, i32 1834549248, i32 1835368448, i32 1836187648, i32 1837006848, i32 1837826048, i32 1838645248, i32 1839464448, i32 1840283648, i32 1841102848, i32 1841922048, i32 1842741248, i32 1843560448, i32 1844379648, i32 1845198848, i32 1846018048, i32 1846837248, i32 1847656448, i32 1848475648, i32 1849294848, i32 1850114048, i32 1850933248, i32 1851752448, i32 1852571648, i32 1853390848, i32 1854210048, i32 1855029248, i32 1855848448, i32 1856667648, i32 1857486848, i32 1858306048, i32 1859125248, i32 1859944448, i32 1860763648, i32 1861582848, i32 1862402048, i32 1863221248, i32 1864040448, i32 1864859648, i32 1865678848, i32 1866498048, i32 1867317248, i32 1868136448, i32 1868955648, i32 1869774848, i32 1870594048, i32 1871413248, i32 1872232448, i32 1873051648, i32 1873870848, i32 1874690048, i32 1875509248, i32 1876328448, i32 1877147648, i32 1877966848, i32 1878786048, i32 1879605248, i32 1880424448, i32 1881243648, i32 1882062848, i32 1882882048, i32 1883701248, i32 1884520448, i32 1885339648, i32 1886158848, i32 1886978048, i32 1887797248, i32 1888616448, i32 1889435648, i32 1890254848, i32 1891074048, i32 1891893248, i32 1892712448, i32 1893531648, i32 1894350848, i32 1895170048, i32 1895989248, i32 1896808448, i32 1897627648, i32 1898446848, i32 1899266048, i32 1900085248, i32 1900904448, i32 1901723648, i32 1902542848, i32 1903362048, i32 1904181248, i32 1905000448, i32 1905819648, i32 1906638848, i32 1907458048, i32 1908277248, i32 1909096448, i32 1909915648, i32 1910734848, i32 1911554048, i32 1912373248, i32 1913192448, i32 1914011648, i32 1914830848, i32 1915650048, i32 1916469248, i32 1917288448, i32 1918107648, i32 1918926848, i32 1919746048, i32 1920565248, i32 1921384448, i32 1922203648, i32 1923022848, i32 1923842048, i32 1924661248, i32 1925480448, i32 1926299648, i32 1927118848, i32 1927938048, i32 1928757248, i32 1929576448, i32 1930395648, i32 1931214848, i32 1932034048, i32 1932853248, i32 1933672448, i32 1934491648, i32 1935310848, i32 1936130048, i32 1936949248, i32 1937768448, i32 1938587648, i32 1939406848, i32 1940226048, i32 1941045248, i32 1941864448, i32 1942683648, i32 1943502848, i32 1944322048, i32 1945141248, i32 1945960448, i32 1946779648, i32 1947598848, i32 1948418048, i32 1949237248, i32 1950056448, i32 1950875648, i32 1951694848, i32 1952514048, i32 1953333248, i32 1954152448, i32 1954971648, i32 1955790848, i32 1956610048, i32 1957429248, i32 1958248448, i32 1959067648, i32 1959886848, i32 1960706048, i32 1961525248, i32 1962344448, i32 1963163648, i32 1963982848, i32 1964802048, i32 1965621248, i32 1966440448, i32 1967259648, i32 1968078848, i32 1968898048, i32 1969717248, i32 1970536448, i32 1971355648, i32 1972174848, i32 1972994048, i32 1973813248, i32 1974632448, i32 1975451648, i32 1976270848, i32 1977090048, i32 1977909248, i32 1978728448, i32 1979547648, i32 1980366848, i32 1981186048, i32 1982005248, i32 1982824448, i32 1983643648, i32 1984462848, i32 1985282048, i32 1986101248, i32 1986920448, i32 1987739648, i32 1988558848, i32 1989378048, i32 1990197248, i32 1991016448, i32 1991835648, i32 1992654848, i32 1993474048, i32 1994293248, i32 1995112448, i32 1995931648, i32 1996750848, i32 1997570048, i32 1998389248, i32 1999208448, i32 2000027648, i32 2000846848, i32 2001666048, i32 2002485248, i32 2003304448, i32 2004123648, i32 2004942848, i32 2005762048, i32 2006581248, i32 2007400448, i32 2008219648, i32 2009038848, i32 2009858048, i32 2010677248, i32 2011496448, i32 2012315648, i32 2013134848, i32 2013954048, i32 2014773248, i32 2015592448, i32 2016411648, i32 2017230848, i32 2018050048, i32 2018869248, i32 2019688448, i32 2020507648, i32 2021326848, i32 2022146048, i32 2022965248, i32 2023784448, i32 2024603648, i32 2025422848, i32 2026242048, i32 2027061248, i32 2027880448, i32 2028699648, i32 2029518848, i32 2030338048, i32 2031157248, i32 2031976448, i32 2032795648, i32 2033614848, i32 2034434048, i32 2035253248, i32 2036072448, i32 2036891648, i32 2037710848, i32 2038530048, i32 2039349248, i32 2040168448, i32 2040987648, i32 2041806848, i32 2042626048, i32 2043445248, i32 2044264448, i32 2045083648, i32 2045902848, i32 2046722048, i32 2047541248, i32 2048360448, i32 2049179648, i32 2049998848, i32 2050818048, i32 2051637248, i32 2052456448, i32 2053275648, i32 2054094848, i32 2054914048, i32 2055733248, i32 2056552448, i32 2057371648, i32 2058190848, i32 2059010048, i32 2059829248, i32 2060648448, i32 2061467648, i32 2062286848, i32 2063106048, i32 2063925248, i32 2064744448, i32 2065563648, i32 2066382848, i32 2067202048, i32 2068021248, i32 2068840448, i32 2069659648, i32 2070478848, i32 2071298048, i32 2072117248, i32 2072936448, i32 2073755648, i32 2074574848, i32 2075394048, i32 2076213248, i32 2077032448, i32 2077851648, i32 2078670848, i32 2079490048, i32 2080309248, i32 2081128448, i32 2081947648, i32 2082766848, i32 2083586048, i32 2084405248, i32 2085224448, i32 2086043648, i32 2086862848, i32 2087682048, i32 2088501248, i32 2089320448, i32 2090139648, i32 2090958848, i32 2091778048, i32 2092597248, i32 2093416448, i32 2094235648, i32 2095054848, i32 2095874048, i32 2096693248, i32 2097512448, i32 2098331648, i32 2099150848, i32 2099970048, i32 2100789248, i32 2101608448, i32 2102427648, i32 2103246848, i32 2104066048, i32 2104885248, i32 2105704448, i32 2106523648, i32 2107342848, i32 2108162048, i32 2108981248, i32 2109800448, i32 2110619648, i32 2111438848, i32 2112258048, i32 2113077248, i32 2113896448, i32 2114715648, i32 2115534848, i32 2116354048, i32 2117173248, i32 2117992448, i32 2118811648, i32 2119630848, i32 2120450048, i32 2121269248, i32 2122088448, i32 2122907648, i32 2123726848, i32 2124546048, i32 2125365248, i32 2126184448, i32 2127003648, i32 2127822848, i32 2128642048, i32 2129461248, i32 2130280448, i32 2131099648, i32 2131918848, i32 2132738048, i32 2133557248, i32 2134376448, i32 2135195648, i32 2136014848, i32 2136834048, i32 2137653248, i32 2138472448, i32 2139291648, i32 2140110848, i32 2140930048, i32 2141749248, i32 2142568448, i32 2143387648, i32 2144206848, i32 2145026048, i32 2145845248, i32 2146664448, i32 -2147483648], align 16
@gaintab = internal constant [1921 x i32] [i32 8388608, i32 8384836, i32 8381066, i32 8377298, i32 8373531, i32 8369766, i32 8366003, i32 8362241, i32 8358482, i32 8354723, i32 8350967, i32 8347212, i32 8343459, i32 8339708, i32 8335958, i32 8332210, i32 8328464, i32 8324719, i32 8320976, i32 8317235, i32 8313495, i32 8309757, i32 8306021, i32 8302286, i32 8298553, i32 8294822, i32 8291093, i32 8287365, i32 8283638, i32 8279914, i32 8276191, i32 8272470, i32 8268750, i32 8265033, i32 8261317, i32 8257602, i32 8253889, i32 8250178, i32 8246469, i32 8242761, i32 8239055, i32 8235350, i32 8231647, i32 8227946, i32 8224247, i32 8220549, i32 8216853, i32 8213158, i32 8209466, i32 8205774, i32 8202085, i32 8198397, i32 8194711, i32 8191026, i32 8187344, i32 8183662, i32 8179983, i32 8176305, i32 8172629, i32 8168954, i32 8165281, i32 8161610, i32 8157940, i32 8154272, i32 8150606, i32 8146941, i32 8143278, i32 8139617, i32 8135957, i32 8132299, i32 8128642, i32 8124987, i32 8121334, i32 8117683, i32 8114033, i32 8110385, i32 8106738, i32 8103093, i32 8099450, i32 8095808, i32 8092168, i32 8088530, i32 8084893, i32 8081258, i32 8077624, i32 8073992, i32 8070362, i32 8066733, i32 8063106, i32 8059481, i32 8055857, i32 8052235, i32 8048615, i32 8044996, i32 8041379, i32 8037763, i32 8034149, i32 8030537, i32 8026926, i32 8023317, i32 8019709, i32 8016104, i32 8012499, i32 8008897, i32 8005296, i32 8001696, i32 7998099, i32 7994503, i32 7990908, i32 7987315, i32 7983724, i32 7980134, i32 7976546, i32 7972960, i32 7969375, i32 7965792, i32 7962210, i32 7958630, i32 7955052, i32 7951475, i32 7947900, i32 7944326, i32 7940754, i32 7937184, i32 7933615, i32 7930048, i32 7926483, i32 7922919, i32 7919356, i32 7915796, i32 7912237, i32 7908679, i32 7905123, i32 7901569, i32 7898016, i32 7894465, i32 7890915, i32 7887367, i32 7883821, i32 7880276, i32 7876733, i32 7873192, i32 7869652, i32 7866113, i32 7862577, i32 7859041, i32 7855508, i32 7851976, i32 7848445, i32 7844916, i32 7841389, i32 7837864, i32 7834339, i32 7830817, i32 7827296, i32 7823777, i32 7820259, i32 7816743, i32 7813228, i32 7809715, i32 7806204, i32 7802694, i32 7799186, i32 7795679, i32 7792174, i32 7788670, i32 7785168, i32 7781668, i32 7778169, i32 7774672, i32 7771176, i32 7767682, i32 7764190, i32 7760699, i32 7757209, i32 7753722, i32 7750235, i32 7746751, i32 7743267, i32 7739786, i32 7736306, i32 7732828, i32 7729351, i32 7725875, i32 7722402, i32 7718929, i32 7715459, i32 7711990, i32 7708522, i32 7705056, i32 7701592, i32 7698129, i32 7694668, i32 7691208, i32 7687750, i32 7684294, i32 7680839, i32 7677385, i32 7673933, i32 7670483, i32 7667034, i32 7663587, i32 7660141, i32 7656697, i32 7653254, i32 7649813, i32 7646374, i32 7642936, i32 7639499, i32 7636064, i32 7632631, i32 7629199, i32 7625769, i32 7622340, i32 7618913, i32 7615487, i32 7612063, i32 7608641, i32 7605220, i32 7601800, i32 7598382, i32 7594966, i32 7591551, i32 7588138, i32 7584726, i32 7581316, i32 7577907, i32 7574500, i32 7571094, i32 7567690, i32 7564287, i32 7560886, i32 7557487, i32 7554089, i32 7550692, i32 7547297, i32 7543904, i32 7540512, i32 7537121, i32 7533733, i32 7530345, i32 7526959, i32 7523575, i32 7520192, i32 7516811, i32 7513431, i32 7510053, i32 7506676, i32 7503301, i32 7499928, i32 7496556, i32 7493185, i32 7489816, i32 7486448, i32 7483082, i32 7479718, i32 7476354, i32 7472993, i32 7469633, i32 7466274, i32 7462917, i32 7459562, i32 7456208, i32 7452855, i32 7449504, i32 7446155, i32 7442807, i32 7439461, i32 7436116, i32 7432772, i32 7429430, i32 7426090, i32 7422751, i32 7419413, i32 7416078, i32 7412743, i32 7409410, i32 7406079, i32 7402749, i32 7399420, i32 7396093, i32 7392768, i32 7389444, i32 7386122, i32 7382801, i32 7379481, i32 7376163, i32 7372847, i32 7369532, i32 7366218, i32 7362906, i32 7359596, i32 7356287, i32 7352979, i32 7349673, i32 7346368, i32 7343065, i32 7339764, i32 7336463, i32 7333165, i32 7329868, i32 7326572, i32 7323278, i32 7319985, i32 7316694, i32 7313404, i32 7310116, i32 7306829, i32 7303544, i32 7300260, i32 7296978, i32 7293697, i32 7290417, i32 7287139, i32 7283863, i32 7280588, i32 7277314, i32 7274042, i32 7270772, i32 7267503, i32 7264235, i32 7260969, i32 7257704, i32 7254441, i32 7251179, i32 7247919, i32 7244660, i32 7241403, i32 7238147, i32 7234892, i32 7231639, i32 7228388, i32 7225138, i32 7221889, i32 7218642, i32 7215396, i32 7212152, i32 7208909, i32 7205668, i32 7202428, i32 7199190, i32 7195953, i32 7192718, i32 7189484, i32 7186251, i32 7183020, i32 7179790, i32 7176562, i32 7173335, i32 7170110, i32 7166886, i32 7163664, i32 7160443, i32 7157223, i32 7154005, i32 7150789, i32 7147574, i32 7144360, i32 7141148, i32 7137937, i32 7134727, i32 7131519, i32 7128313, i32 7125108, i32 7121904, i32 7118702, i32 7115501, i32 7112302, i32 7109104, i32 7105908, i32 7102713, i32 7099519, i32 7096327, i32 7093137, i32 7089947, i32 7086760, i32 7083573, i32 7080388, i32 7077205, i32 7074023, i32 7070842, i32 7067663, i32 7064485, i32 7061309, i32 7058134, i32 7054960, i32 7051788, i32 7048618, i32 7045448, i32 7042281, i32 7039114, i32 7035949, i32 7032786, i32 7029624, i32 7026463, i32 7023304, i32 7020146, i32 7016989, i32 7013834, i32 7010681, i32 7007529, i32 7004378, i32 7001229, i32 6998081, i32 6994934, i32 6991789, i32 6988645, i32 6985503, i32 6982362, i32 6979223, i32 6976085, i32 6972948, i32 6969813, i32 6966679, i32 6963547, i32 6960416, i32 6957286, i32 6954158, i32 6951032, i32 6947906, i32 6944782, i32 6941660, i32 6938539, i32 6935419, i32 6932301, i32 6929184, i32 6926068, i32 6922954, i32 6919841, i32 6916730, i32 6913620, i32 6910512, i32 6907404, i32 6904299, i32 6901194, i32 6898091, i32 6894990, i32 6891890, i32 6888791, i32 6885694, i32 6882598, i32 6879503, i32 6876410, i32 6873318, i32 6870228, i32 6867139, i32 6864051, i32 6860965, i32 6857880, i32 6854797, i32 6851715, i32 6848634, i32 6845555, i32 6842477, i32 6839400, i32 6836325, i32 6833251, i32 6830179, i32 6827108, i32 6824038, i32 6820970, i32 6817903, i32 6814838, i32 6811773, i32 6808711, i32 6805649, i32 6802589, i32 6799531, i32 6796474, i32 6793418, i32 6790363, i32 6787310, i32 6784258, i32 6781208, i32 6778159, i32 6775111, i32 6772065, i32 6769020, i32 6765977, i32 6762935, i32 6759894, i32 6756855, i32 6753817, i32 6750780, i32 6747745, i32 6744711, i32 6741678, i32 6738647, i32 6735617, i32 6732589, i32 6729561, i32 6726536, i32 6723511, i32 6720488, i32 6717466, i32 6714446, i32 6711427, i32 6708410, i32 6705393, i32 6702378, i32 6699365, i32 6696353, i32 6693342, i32 6690332, i32 6687324, i32 6684318, i32 6681312, i32 6678308, i32 6675305, i32 6672304, i32 6669304, i32 6666305, i32 6663308, i32 6660312, i32 6657317, i32 6654324, i32 6651332, i32 6648342, i32 6645352, i32 6642364, i32 6639378, i32 6636393, i32 6633409, i32 6630426, i32 6627445, i32 6624465, i32 6621487, i32 6618509, i32 6615534, i32 6612559, i32 6609586, i32 6606614, i32 6603644, i32 6600675, i32 6597707, i32 6594740, i32 6591775, i32 6588811, i32 6585849, i32 6582888, i32 6579928, i32 6576969, i32 6574012, i32 6571056, i32 6568102, i32 6565149, i32 6562197, i32 6559246, i32 6556297, i32 6553349, i32 6550403, i32 6547458, i32 6544514, i32 6541571, i32 6538630, i32 6535690, i32 6532751, i32 6529814, i32 6526878, i32 6523944, i32 6521010, i32 6518078, i32 6515148, i32 6512218, i32 6509290, i32 6506363, i32 6503438, i32 6500514, i32 6497591, i32 6494670, i32 6491750, i32 6488831, i32 6485913, i32 6482997, i32 6480082, i32 6477169, i32 6474256, i32 6471345, i32 6468436, i32 6465527, i32 6462620, i32 6459714, i32 6456810, i32 6453907, i32 6451005, i32 6448105, i32 6445205, i32 6442307, i32 6439411, i32 6436516, i32 6433622, i32 6430729, i32 6427837, i32 6424947, i32 6422059, i32 6419171, i32 6416285, i32 6413400, i32 6410516, i32 6407634, i32 6404753, i32 6401873, i32 6398995, i32 6396118, i32 6393242, i32 6390367, i32 6387494, i32 6384622, i32 6381751, i32 6378882, i32 6376014, i32 6373147, i32 6370282, i32 6367417, i32 6364554, i32 6361693, i32 6358832, i32 6355973, i32 6353116, i32 6350259, i32 6347404, i32 6344550, i32 6341697, i32 6338846, i32 6335996, i32 6333147, i32 6330300, i32 6327453, i32 6324608, i32 6321765, i32 6318922, i32 6316081, i32 6313241, i32 6310403, i32 6307565, i32 6304729, i32 6301895, i32 6299061, i32 6296229, i32 6293398, i32 6290568, i32 6287740, i32 6284913, i32 6282087, i32 6279262, i32 6276439, i32 6273617, i32 6270796, i32 6267977, i32 6265159, i32 6262342, i32 6259526, i32 6256712, i32 6253898, i32 6251086, i32 6248276, i32 6245466, i32 6242658, i32 6239852, i32 6237046, i32 6234242, i32 6231439, i32 6228637, i32 6225836, i32 6223037, i32 6220239, i32 6217442, i32 6214647, i32 6211852, i32 6209059, i32 6206268, i32 6203477, i32 6200688, i32 6197900, i32 6195113, i32 6192328, i32 6189544, i32 6186761, i32 6183979, i32 6181199, i32 6178419, i32 6175641, i32 6172865, i32 6170089, i32 6167315, i32 6164542, i32 6161770, i32 6159000, i32 6156231, i32 6153463, i32 6150696, i32 6147930, i32 6145166, i32 6142403, i32 6139641, i32 6136881, i32 6134122, i32 6131364, i32 6128607, i32 6125851, i32 6123097, i32 6120344, i32 6117592, i32 6114841, i32 6112092, i32 6109344, i32 6106597, i32 6103851, i32 6101107, i32 6098364, i32 6095622, i32 6092881, i32 6090141, i32 6087403, i32 6084666, i32 6081930, i32 6079196, i32 6076462, i32 6073730, i32 6070999, i32 6068270, i32 6065541, i32 6062814, i32 6060088, i32 6057363, i32 6054640, i32 6051918, i32 6049197, i32 6046477, i32 6043758, i32 6041041, i32 6038324, i32 6035609, i32 6032896, i32 6030183, i32 6027472, i32 6024762, i32 6022053, i32 6019345, i32 6016639, i32 6013934, i32 6011230, i32 6008527, i32 6005825, i32 6003125, i32 6000426, i32 5997728, i32 5995031, i32 5992336, i32 5989641, i32 5986948, i32 5984256, i32 5981566, i32 5978876, i32 5976188, i32 5973501, i32 5970815, i32 5968131, i32 5965447, i32 5962765, i32 5960084, i32 5957404, i32 5954726, i32 5952048, i32 5949372, i32 5946697, i32 5944023, i32 5941351, i32 5938679, i32 5936009, i32 5933340, i32 5930673, i32 5928006, i32 5925341, i32 5922676, i32 5920013, i32 5917352, i32 5914691, i32 5912032, i32 5909374, i32 5906717, i32 5904061, i32 5901406, i32 5898753, i32 5896101, i32 5893450, i32 5890800, i32 5888151, i32 5885504, i32 5882857, i32 5880212, i32 5877568, i32 5874926, i32 5872284, i32 5869644, i32 5867005, i32 5864367, i32 5861730, i32 5859095, i32 5856460, i32 5853827, i32 5851195, i32 5848564, i32 5845934, i32 5843306, i32 5840679, i32 5838053, i32 5835428, i32 5832804, i32 5830181, i32 5827560, i32 5824940, i32 5822321, i32 5819703, i32 5817086, i32 5814471, i32 5811856, i32 5809243, i32 5806631, i32 5804021, i32 5801411, i32 5798803, i32 5796195, i32 5793589, i32 5790984, i32 5788380, i32 5785778, i32 5783176, i32 5780576, i32 5777977, i32 5775379, i32 5772782, i32 5770187, i32 5767593, i32 5764999, i32 5762407, i32 5759816, i32 5757227, i32 5754638, i32 5752051, i32 5749464, i32 5746879, i32 5744295, i32 5741713, i32 5739131, i32 5736550, i32 5733971, i32 5731393, i32 5728816, i32 5726240, i32 5723666, i32 5721092, i32 5718520, i32 5715949, i32 5713379, i32 5710810, i32 5708242, i32 5705676, i32 5703110, i32 5700546, i32 5697983, i32 5695421, i32 5692860, i32 5690300, i32 5687742, i32 5685185, i32 5682628, i32 5680073, i32 5677519, i32 5674967, i32 5672415, i32 5669865, i32 5667315, i32 5664767, i32 5662220, i32 5659674, i32 5657130, i32 5654586, i32 5652044, i32 5649502, i32 5646962, i32 5644423, i32 5641885, i32 5639349, i32 5636813, i32 5634279, i32 5631745, i32 5629213, i32 5626682, i32 5624152, i32 5621623, i32 5619096, i32 5616569, i32 5614044, i32 5611520, i32 5608997, i32 5606475, i32 5603954, i32 5601434, i32 5598916, i32 5596398, i32 5593882, i32 5591367, i32 5588853, i32 5586340, i32 5583828, i32 5581318, i32 5578808, i32 5576300, i32 5573793, i32 5571287, i32 5568782, i32 5566278, i32 5563775, i32 5561274, i32 5558773, i32 5556274, i32 5553775, i32 5551278, i32 5548782, i32 5546288, i32 5543794, i32 5541301, i32 5538810, i32 5536319, i32 5533830, i32 5531342, i32 5528855, i32 5526369, i32 5523884, i32 5521401, i32 5518918, i32 5516437, i32 5513956, i32 5511477, i32 5508999, i32 5506522, i32 5504046, i32 5501571, i32 5499098, i32 5496625, i32 5494154, i32 5491684, i32 5489214, i32 5486746, i32 5484279, i32 5481813, i32 5479349, i32 5476885, i32 5474423, i32 5471961, i32 5469501, i32 5467042, i32 5464584, i32 5462127, i32 5459671, i32 5457216, i32 5454762, i32 5452310, i32 5449858, i32 5447408, i32 5444958, i32 5442510, i32 5440063, i32 5437617, i32 5435172, i32 5432729, i32 5430286, i32 5427844, i32 5425404, i32 5422964, i32 5420526, i32 5418089, i32 5415653, i32 5413218, i32 5410784, i32 5408351, i32 5405919, i32 5403489, i32 5401059, i32 5398631, i32 5396203, i32 5393777, i32 5391352, i32 5388928, i32 5386505, i32 5384083, i32 5381662, i32 5379243, i32 5376824, i32 5374406, i32 5371990, i32 5369575, i32 5367160, i32 5364747, i32 5362335, i32 5359924, i32 5357514, i32 5355105, i32 5352697, i32 5350291, i32 5347885, i32 5345481, i32 5343077, i32 5340675, i32 5338273, i32 5335873, i32 5333474, i32 5331076, i32 5328679, i32 5326283, i32 5323888, i32 5321495, i32 5319102, i32 5316710, i32 5314320, i32 5311930, i32 5309542, i32 5307155, i32 5304769, i32 5302383, i32 5299999, i32 5297616, i32 5295234, i32 5292854, i32 5290474, i32 5288095, i32 5285717, i32 5283341, i32 5280965, i32 5278591, i32 5276218, i32 5273845, i32 5271474, i32 5269104, i32 5266735, i32 5264367, i32 5262000, i32 5259634, i32 5257269, i32 5254905, i32 5252542, i32 5250181, i32 5247820, i32 5245461, i32 5243102, i32 5240745, i32 5238388, i32 5236033, i32 5233679, i32 5231326, i32 5228974, i32 5226622, i32 5224272, i32 5221923, i32 5219576, i32 5217229, i32 5214883, i32 5212538, i32 5210195, i32 5207852, i32 5205510, i32 5203170, i32 5200830, i32 5198492, i32 5196155, i32 5193818, i32 5191483, i32 5189149, i32 5186816, i32 5184484, i32 5182153, i32 5179823, i32 5177494, i32 5175166, i32 5172839, i32 5170513, i32 5168188, i32 5165864, i32 5163542, i32 5161220, i32 5158899, i32 5156580, i32 5154261, i32 5151944, i32 5149628, i32 5147312, i32 5144998, i32 5142684, i32 5140372, i32 5138061, i32 5135751, i32 5133442, i32 5131134, i32 5128826, i32 5126520, i32 5124215, i32 5121911, i32 5119609, i32 5117307, i32 5115006, i32 5112706, i32 5110407, i32 5108109, i32 5105813, i32 5103517, i32 5101222, i32 5098929, i32 5096636, i32 5094345, i32 5092054, i32 5089765, i32 5087476, i32 5085189, i32 5082902, i32 5080617, i32 5078332, i32 5076049, i32 5073767, i32 5071486, i32 5069205, i32 5066926, i32 5064648, i32 5062371, i32 5060095, i32 5057819, i32 5055545, i32 5053272, i32 5051000, i32 5048729, i32 5046459, i32 5044190, i32 5041922, i32 5039655, i32 5037389, i32 5035124, i32 5032860, i32 5030597, i32 5028336, i32 5026075, i32 5023815, i32 5021556, i32 5019298, i32 5017041, i32 5014786, i32 5012531, i32 5010277, i32 5008024, i32 5005773, i32 5003522, i32 5001272, i32 4999024, i32 4996776, i32 4994529, i32 4992284, i32 4990039, i32 4987795, i32 4985553, i32 4983311, i32 4981071, i32 4978831, i32 4976592, i32 4974355, i32 4972118, i32 4969883, i32 4967648, i32 4965414, i32 4963182, i32 4960950, i32 4958720, i32 4956490, i32 4954262, i32 4952034, i32 4949808, i32 4947582, i32 4945357, i32 4943134, i32 4940911, i32 4938690, i32 4936469, i32 4934250, i32 4932031, i32 4929814, i32 4927597, i32 4925382, i32 4923167, i32 4920953, i32 4918741, i32 4916529, i32 4914319, i32 4912109, i32 4909900, i32 4907693, i32 4905486, i32 4903281, i32 4901076, i32 4898872, i32 4896670, i32 4894468, i32 4892267, i32 4890068, i32 4887869, i32 4885671, i32 4883475, i32 4881279, i32 4879084, i32 4876890, i32 4874698, i32 4872506, i32 4870315, i32 4868125, i32 4865937, i32 4863749, i32 4861562, i32 4859376, i32 4857191, i32 4855007, i32 4852824, i32 4850642, i32 4848461, i32 4846281, i32 4844102, i32 4841924, i32 4839747, i32 4837571, i32 4835396, i32 4833222, i32 4831049, i32 4828877, i32 4826706, i32 4824535, i32 4822366, i32 4820198, i32 4818031, i32 4815864, i32 4813699, i32 4811535, i32 4809371, i32 4807209, i32 4805048, i32 4802887, i32 4800728, i32 4798569, i32 4796412, i32 4794255, i32 4792099, i32 4789945, i32 4787791, i32 4785638, i32 4783487, i32 4781336, i32 4779186, i32 4777037, i32 4774889, i32 4772742, i32 4770597, i32 4768452, i32 4766308, i32 4764165, i32 4762022, i32 4759881, i32 4757741, i32 4755602, i32 4753464, i32 4751327, i32 4749190, i32 4747055, i32 4744920, i32 4742787, i32 4740655, i32 4738523, i32 4736393, i32 4734263, i32 4732134, i32 4730007, i32 4727880, i32 4725754, i32 4723629, i32 4721506, i32 4719383, i32 4717261, i32 4715140, i32 4713020, i32 4710901, i32 4708782, i32 4706665, i32 4704549, i32 4702434, i32 4700319, i32 4698206, i32 4696094, i32 4693982, i32 4691872, i32 4689762, i32 4687653, i32 4685546, i32 4683439, i32 4681333, i32 4679228, i32 4677125, i32 4675022, i32 4672920, i32 4670819, i32 4668719, i32 4666619, i32 4664521, i32 4662424, i32 4660328, i32 4658232, i32 4656138, i32 4654044, i32 4651952, i32 4649860, i32 4647769, i32 4645680, i32 4643591, i32 4641503, i32 4639416, i32 4637330, i32 4635245, i32 4633161, i32 4631078, i32 4628995, i32 4626914, i32 4624834, i32 4622754, i32 4620676, i32 4618598, i32 4616522, i32 4614446, i32 4612371, i32 4610297, i32 4608224, i32 4606153, i32 4604081, i32 4602011, i32 4599942, i32 4597874, i32 4595807, i32 4593740, i32 4591675, i32 4589610, i32 4587547, i32 4585484, i32 4583422, i32 4581362, i32 4579302, i32 4577243, i32 4575185, i32 4573128, i32 4571071, i32 4569016, i32 4566962, i32 4564908, i32 4562856, i32 4560804, i32 4558754, i32 4556704, i32 4554655, i32 4552607, i32 4550560, i32 4548514, i32 4546469, i32 4544425, i32 4542382, i32 4540339, i32 4538298, i32 4536257, i32 4534218, i32 4532179, i32 4530141, i32 4528104, i32 4526069, i32 4524034, i32 4521999, i32 4519966, i32 4517934, i32 4515903, i32 4513872, i32 4511843, i32 4509814, i32 4507786, i32 4505759, i32 4503734, i32 4501709, i32 4499684, i32 4497661, i32 4495639, i32 4493618, i32 4491597, i32 4489578, i32 4487559, i32 4485541, i32 4483525, i32 4481509, i32 4479494, i32 4477480, i32 4475467, i32 4473454, i32 4471443, i32 4469432, i32 4467423, i32 4465414, i32 4463406, i32 4461400, i32 4459394, i32 4457389, i32 4455384, i32 4453381, i32 4451379, i32 4449377, i32 4447377, i32 4445377, i32 4443379, i32 4441381, i32 4439384, i32 4437388, i32 4435393, i32 4433398, i32 4431405, i32 4429412, i32 4427421, i32 4425430, i32 4423440, i32 4421452, i32 4419464, i32 4417477, i32 4415490, i32 4413505, i32 4411521, i32 4409537, i32 4407554, i32 4405573, i32 4403592, i32 4401612, i32 4399633, i32 4397655, i32 4395677, i32 4393701, i32 4391726, i32 4389751, i32 4387777, i32 4385804, i32 4383832, i32 4381861, i32 4379891, i32 4377922, i32 4375953, i32 4373986, i32 4372019, i32 4370053, i32 4368089, i32 4366125, i32 4364161, i32 4362199, i32 4360238, i32 4358277, i32 4356318, i32 4354359, i32 4352401, i32 4350444, i32 4348488, i32 4346533, i32 4344579, i32 4342625, i32 4340673, i32 4338721, i32 4336770, i32 4334821, i32 4332872, i32 4330923, i32 4328976, i32 4327030, i32 4325084, i32 4323140, i32 4321196, i32 4319253, i32 4317311, i32 4315370, i32 4313429, i32 4311490, i32 4309551, i32 4307614, i32 4305677, i32 4303741, i32 4301806, i32 4299872, i32 4297938, i32 4296006, i32 4294074, i32 4292144, i32 4290214, i32 4288285, i32 4286357, i32 4284429, i32 4282503, i32 4280578, i32 4278653, i32 4276729, i32 4274806, i32 4272884, i32 4270963, i32 4269043, i32 4267123, i32 4265205, i32 4263287, i32 4261370, i32 4259454, i32 4257539, i32 4255625, i32 4253711, i32 4251799, i32 4249887, i32 4247976, i32 4246066, i32 4244157, i32 4242249, i32 4240341, i32 4238435, i32 4236529, i32 4234624, i32 4232720, i32 4230817, i32 4228915, i32 4227013, i32 4225113, i32 4223213, i32 4221314, i32 4219416, i32 4217519, i32 4215623, i32 4213727, i32 4211833, i32 4209939, i32 4208046, i32 4206154, i32 4204263, i32 4202373, i32 4200483, i32 4198595, i32 4196707, i32 4194820, i32 4192934, i32 4191048, i32 4189164, i32 4187280, i32 4185398, i32 4183516, i32 4181635, i32 4179755, i32 4177875, i32 4175997, i32 4174119, i32 4172243, i32 4170367, i32 4168492, i32 4166617, i32 4164744, i32 4162871, i32 4161000, i32 4159129, i32 4157259, i32 4155389, i32 4153521, i32 4151654, i32 4149787, i32 4147921, i32 4146056, i32 4144192, i32 4142329, i32 4140466, i32 4138604, i32 4136744, i32 4134884, i32 4133025, i32 4131166, i32 4129309, i32 4127452, i32 4125596, i32 4123741, i32 4121887, i32 4120034, i32 4118182, i32 4116330, i32 4114479, i32 4112629, i32 4110780, i32 4108932, i32 4107084, i32 4105238, i32 4103392, i32 4101547, i32 4099703, i32 4097859, i32 4096017, i32 4094175, i32 4092334, i32 4090494, i32 4088655, i32 4086817, i32 4084979, i32 4083143, i32 4081307, i32 4079472, i32 4077637, i32 4075804, i32 4073971, i32 4072140, i32 4070309, i32 4068479, i32 4066649, i32 4064821, i32 4062993, i32 4061167, i32 4059341, i32 4057515, i32 4055691, i32 4053867, i32 4052045, i32 4050223, i32 4048402, i32 4046582, i32 4044762, i32 4042944, i32 4041126, i32 4039309, i32 4037493, i32 4035677, i32 4033863, i32 4032049, i32 4030236, i32 4028424, i32 4026613, i32 4024802, i32 4022993, i32 4021184, i32 4019376, i32 4017569, i32 4015762, i32 4013957, i32 4012152, i32 4010348, i32 4008545, i32 4006742, i32 4004941, i32 4003140, i32 4001340, i32 3999541, i32 3997743, i32 3995945, i32 3994149, i32 3992353, i32 3990558, i32 3988764, i32 3986970, i32 3985178, i32 3983386, i32 3981595, i32 3979804, i32 3978015, i32 3976226, i32 3974439, i32 3972652, i32 3970865, i32 3969080, i32 3967295, i32 3965512, i32 3963729, i32 3961947, i32 3960165, i32 3958385, i32 3956605, i32 3954826, i32 3953048, i32 3951270, i32 3949494, i32 3947718, i32 3945943, i32 3944169, i32 3942395, i32 3940623, i32 3938851, i32 3937080, i32 3935310, i32 3933540, i32 3931772, i32 3930004, i32 3928237, i32 3926471, i32 3924705, i32 3922941, i32 3921177, i32 3919414, i32 3917651, i32 3915890, i32 3914129, i32 3912369, i32 3910610, i32 3908852, i32 3907095, i32 3905338, i32 3903582, i32 3901827, i32 3900072, i32 3898319, i32 3896566, i32 3894814, i32 3893063, i32 3891312, i32 3889563, i32 3887814, i32 3886066, i32 3884319, i32 3882572, i32 3880827, i32 3879082, i32 3877338, i32 3875594, i32 3873852, i32 3872110, i32 3870369, i32 3868629, i32 3866889, i32 3865151, i32 3863413, i32 3861676, i32 3859939, i32 3858204, i32 3856469, i32 3854735, i32 3853002, i32 3851270, i32 3849538, i32 3847807, i32 3846077, i32 3844348, i32 3842619, i32 3840892, i32 3839165, i32 3837438, i32 3835713, i32 3833988, i32 3832265, i32 3830541, i32 3828819, i32 3827098, i32 3825377, i32 3823657, i32 3821938, i32 3820219, i32 3818502, i32 3816785, i32 3815069, i32 3813353, i32 3811639, i32 3809925, i32 3808212, i32 3806500, i32 3804788, i32 3803077, i32 3801368, i32 3799658, i32 3797950, i32 3796242, i32 3794535, i32 3792829, i32 3791124, i32 3789419, i32 3787716, i32 3786013, i32 3784310, i32 3782609, i32 3780908, i32 3779208, i32 3777509, i32 3775810, i32 3774113, i32 3772416, i32 3770720, i32 3769024, i32 3767330, i32 3765636, i32 3763943, i32 3762250, i32 3760559, i32 3758868, i32 3757178, i32 3755488, i32 3753800, i32 3752112, i32 3750425, i32 3748739, i32 3747053, i32 3745368, i32 3743684, i32 3742001, i32 3740319, i32 3738637, i32 3736956, i32 3735276, i32 3733596, i32 3731918, i32 3730240, i32 3728562, i32 3726886, i32 3725210, i32 3723535, i32 3721861, i32 3720188, i32 3718515, i32 3716843, i32 3715172, i32 3713502, i32 3711832, i32 3710163, i32 3708495, i32 3706827, i32 3705161, i32 3703495, i32 3701830, i32 3700165, i32 3698501, i32 3696839, i32 3695176, i32 3693515, i32 3691854, i32 3690194, i32 3688535, i32 3686877, i32 3685219, i32 3683562, i32 3681906, i32 3680250, i32 3678596, i32 3676942, i32 3675288, i32 3673636, i32 3671984, i32 3670333, i32 3668683, i32 3667033, i32 3665385, i32 3663736, i32 3662089, i32 3660443, i32 3658797, i32 3657152, i32 3655507, i32 3653864, i32 3652221, i32 3650579, i32 3648937, i32 3647297, i32 3645657, i32 3644018, i32 3642379, i32 3640742, i32 3639105, i32 3637468, i32 3635833, i32 3634198, i32 3632564, i32 3630931, i32 3629298, i32 3627667, i32 3626035, i32 3624405, i32 3622775, i32 3621147, i32 3619518, i32 3617891, i32 3616264, i32 3614638, i32 3613013, i32 3611389, i32 3609765, i32 3608142, i32 3606520, i32 3604898, i32 3603277, i32 3601657, i32 3600038, i32 3598419, i32 3596801, i32 3595184, i32 3593567, i32 3591952, i32 3590337, i32 3588722, i32 3587109, i32 3585496, i32 3583884, i32 3582272, i32 3580662, i32 3579052, i32 3577443, i32 3575834, i32 3574226, i32 3572619, i32 3571013, i32 3569407, i32 3567802, i32 3566198, i32 3564595, i32 3562992, i32 3561390, i32 3559789, i32 3558188, i32 3556588, i32 3554989, i32 3553391, i32 3551793, i32 3550196, i32 3548600, i32 3547004, i32 3545410, i32 3543816, i32 3542222, i32 3540629, i32 3539038, i32 3537446], align 16
@.str.13 = private unnamed_addr constant [18 x i8] c"Auto-convert: %s\0A\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"disabled\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"enabled\00", align 1
@.str.16 = private unnamed_addr constant [75 x i8] c"bits_per_sample %d does not fit into sample format %s, falling back to 16\0A\00", align 1
@.str.17 = private unnamed_addr constant [45 x i8] c"Looking for %d-bit HDCD in sample format %s\0A\00", align 1
@.str.18 = private unnamed_addr constant [45 x i8] c"20 and 24-bit HDCD decoding is experimental\0A\00", align 1
@.str.19 = private unnamed_addr constant [65 x i8] c"HDCD decoding for sample rates other than 44100 is experimental\0A\00", align 1
@.str.20 = private unnamed_addr constant [40 x i8] c"CDT period: %dms (%u samples @44100Hz)\0A\00", align 1
@.str.21 = private unnamed_addr constant [41 x i8] c"process_stereo disabled (channels = %d)\0A\00", align 1
@.str.22 = private unnamed_addr constant [18 x i8] c"Process mode: %s\0A\00", align 1
@.str.23 = private unnamed_addr constant [33 x i8] c"process stereo channels together\00", align 1
@.str.24 = private unnamed_addr constant [32 x i8] c"process each channel separately\00", align 1
@.str.25 = private unnamed_addr constant [14 x i8] c"Force PE: %s\0A\00", align 1
@.str.26 = private unnamed_addr constant [3 x i8] c"on\00", align 1
@.str.27 = private unnamed_addr constant [4 x i8] c"off\00", align 1
@.str.28 = private unnamed_addr constant [23 x i8] c"Analyze mode: [%d] %s\0A\00", align 1
@ana_mode_str = internal constant [5 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.32, i32 0, i32 0)], align 16
@.str.29 = private unnamed_addr constant [37 x i8] c"gain adjustment level at each sample\00", align 1
@.str.30 = private unnamed_addr constant [33 x i8] c"samples where peak extend occurs\00", align 1
@.str.31 = private unnamed_addr constant [46 x i8] c"samples where the code detect timer is active\00", align 1
@.str.32 = private unnamed_addr constant [62 x i8] c"samples where the target gain does not match between channels\00", align 1
@hdcd_options = internal constant [15 x %struct.AVOption] [%struct.AVOption { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.34, i32 0, i32 0), i32 296, i32 18, %union.anon { i64 1 }, double 0.000000e+00, double 1.000000e+00, i32 65544, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.36, i32 0, i32 0), i32 280, i32 18, %union.anon { i64 1 }, double 0.000000e+00, double 1.000000e+00, i32 65544, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.38, i32 0, i32 0), i32 292, i32 1, %union.anon { i64 2000 }, double 1.000000e+02, double 6.000000e+04, i32 65544, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i32 0, i32 0), i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.40, i32 0, i32 0), i32 284, i32 18, %union.anon zeroinitializer, double 0.000000e+00, double 1.000000e+00, i32 65544, i8* null }, %struct.AVOption { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.42, i32 0, i32 0), i32 288, i32 1, %union.anon zeroinitializer, double 0.000000e+00, double 4.000000e+00, i32 65544, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i32 0, i32 10, %union.anon zeroinitializer, double 0.000000e+00, double 0.000000e+00, i32 65544, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.29, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 1 }, double 0.000000e+00, double 0.000000e+00, i32 65544, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.30, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 2 }, double 0.000000e+00, double 0.000000e+00, i32 65544, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.31, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 3 }, double 0.000000e+00, double 0.000000e+00, i32 65544, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.32, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 4 }, double 0.000000e+00, double 0.000000e+00, i32 65544, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.48, i32 0, i32 0), i32 300, i32 1, %union.anon { i64 16 }, double 1.600000e+01, double 2.400000e+01, i32 65544, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.47, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.50, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 16 }, double 0.000000e+00, double 0.000000e+00, i32 65544, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.47, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.52, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 20 }, double 0.000000e+00, double 0.000000e+00, i32 65544, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.47, i32 0, i32 0) }, %struct.AVOption { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.54, i32 0, i32 0), i32 0, i32 10, %union.anon { i64 24 }, double 0.000000e+00, double 0.000000e+00, i32 65544, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.47, i32 0, i32 0) }, %struct.AVOption zeroinitializer], align 16
@.str.33 = private unnamed_addr constant [20 x i8] c"disable_autoconvert\00", align 1
@.str.34 = private unnamed_addr constant [65 x i8] c"Disable any format conversion or resampling in the filter graph.\00", align 1
@.str.35 = private unnamed_addr constant [15 x i8] c"process_stereo\00", align 1
@.str.36 = private unnamed_addr constant [83 x i8] c"Process stereo channels together. Only apply target_gain when both channels match.\00", align 1
@.str.37 = private unnamed_addr constant [7 x i8] c"cdt_ms\00", align 1
@.str.38 = private unnamed_addr constant [32 x i8] c"Code detect timer period in ms.\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"force_pe\00", align 1
@.str.40 = private unnamed_addr constant [63 x i8] c"Always extend peaks above -3dBFS even when PE is not signaled.\00", align 1
@.str.41 = private unnamed_addr constant [13 x i8] c"analyze_mode\00", align 1
@.str.42 = private unnamed_addr constant [82 x i8] c"Replace audio with solid tone and signal some processing aspect in the amplitude.\00", align 1
@.str.43 = private unnamed_addr constant [4 x i8] c"lle\00", align 1
@.str.44 = private unnamed_addr constant [3 x i8] c"pe\00", align 1
@.str.45 = private unnamed_addr constant [4 x i8] c"cdt\00", align 1
@.str.46 = private unnamed_addr constant [4 x i8] c"tgm\00", align 1
@.str.47 = private unnamed_addr constant [16 x i8] c"bits_per_sample\00", align 1
@.str.48 = private unnamed_addr constant [50 x i8] c"Valid bits per sample (location of the true LSB).\00", align 1
@.str.49 = private unnamed_addr constant [3 x i8] c"16\00", align 1
@.str.50 = private unnamed_addr constant [23 x i8] c"16-bit (in s32 or s16)\00", align 1
@.str.51 = private unnamed_addr constant [3 x i8] c"20\00", align 1
@.str.52 = private unnamed_addr constant [16 x i8] c"20-bit (in s32)\00", align 1
@.str.53 = private unnamed_addr constant [3 x i8] c"24\00", align 1
@.str.54 = private unnamed_addr constant [16 x i8] c"24-bit (in s32)\00", align 1
@.str.55 = private unnamed_addr constant [40 x i8] c"Disabling automatic format conversion.\0A\00", align 1
@.str.56 = private unnamed_addr constant [41 x i8] c"Channel %d: counter A: %d, B: %d, C: %d\0A\00", align 1
@.str.57 = private unnamed_addr constant [93 x i8] c"Channel %d: pe: %d, tf: %d, almost_A: %d, checkfail_B: %d, unmatched_C: %d, cdt_expired: %d\0A\00", align 1
@.str.58 = private unnamed_addr constant [26 x i8] c"Channel %d: tg %0.1f: %d\0A\00", align 1
@.str.59 = private unnamed_addr constant [30 x i8] c"Packets: type: %s, total: %d\0A\00", align 1
@pf_str = internal constant [4 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.70, i32 0, i32 0)], align 16
@.str.60 = private unnamed_addr constant [110 x i8] c"HDCD detected: yes, peak_extend: %s, max_gain_adj: %0.1f dB, transient_filter: %s, detectable errors: %d%s%s\0A\00", align 1
@pe_str = internal constant [3 x i8*] [i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.73, i32 0, i32 0)], align 16
@.str.61 = private unnamed_addr constant [9 x i8] c"detected\00", align 1
@.str.62 = private unnamed_addr constant [13 x i8] c"not detected\00", align 1
@.str.63 = private unnamed_addr constant [18 x i8] c" (try -v verbose)\00", align 1
@.str.64 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.65 = private unnamed_addr constant [14 x i8] c" (bad_config)\00", align 1
@.str.66 = private unnamed_addr constant [21 x i8] c"HDCD detected: no%s\0A\00", align 1
@.str.67 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.68 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.69 = private unnamed_addr constant [2 x i8] c"B\00", align 1
@.str.70 = private unnamed_addr constant [4 x i8] c"A+B\00", align 1
@.str.71 = private unnamed_addr constant [14 x i8] c"never enabled\00", align 1
@.str.72 = private unnamed_addr constant [23 x i8] c"enabled intermittently\00", align 1
@.str.73 = private unnamed_addr constant [20 x i8] c"enabled permanently\00", align 1
@query_formats.sample_rates = internal constant [7 x i32] [i32 44100, i32 48000, i32 88200, i32 96000, i32 176400, i32 192000, i32 -1], align 16
@query_formats.sample_fmts_in = internal constant [5 x i32] [i32 1, i32 6, i32 2, i32 7, i32 -1], align 16
@query_formats.sample_fmts_out = internal constant [2 x i32] [i32 2, i32 -1], align 4

; Function Attrs: cold nounwind optsize uwtable
define internal i32 @init(%struct.AVFilterContext* %ctx) #0 !dbg !707 {
entry:
  %ctx.addr = alloca %struct.AVFilterContext*, align 8
  %s = alloca %struct.HDCDContext*, align 8
  store %struct.AVFilterContext* %ctx, %struct.AVFilterContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVFilterContext** %ctx.addr, metadata !708, metadata !709), !dbg !710
  call void @llvm.dbg.declare(metadata %struct.HDCDContext** %s, metadata !711, metadata !709), !dbg !771
  %0 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !772
  %priv = getelementptr inbounds %struct.AVFilterContext, %struct.AVFilterContext* %0, i32 0, i32 9, !dbg !773
  %1 = load i8*, i8** %priv, align 8, !dbg !773
  %2 = bitcast i8* %1 to %struct.HDCDContext*, !dbg !772
  store %struct.HDCDContext* %2, %struct.HDCDContext** %s, align 8, !dbg !771
  %3 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !774
  %sample_count = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %3, i32 0, i32 10, !dbg !775
  store i32 0, i32* %sample_count, align 8, !dbg !776
  %4 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !777
  %5 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !778
  %fctx = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %5, i32 0, i32 9, !dbg !779
  store %struct.AVFilterContext* %4, %struct.AVFilterContext** %fctx, align 8, !dbg !780
  %6 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !781
  %bad_config = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %6, i32 0, i32 8, !dbg !782
  store i32 0, i32* %bad_config, align 8, !dbg !783
  %7 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !784
  %disable_autoconvert = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %7, i32 0, i32 6, !dbg !786
  %8 = load i32, i32* %disable_autoconvert, align 8, !dbg !786
  %tobool = icmp ne i32 %8, 0, !dbg !784
  br i1 %tobool, label %if.then, label %if.end, !dbg !787

if.then:                                          ; preds = %entry
  %9 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !788
  %10 = bitcast %struct.AVFilterContext* %9 to i8*, !dbg !788
  call void (i8*, i32, i8*, ...) @av_log(i8* %10, i32 40, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.55, i32 0, i32 0)), !dbg !790
  %11 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !791
  %graph = getelementptr inbounds %struct.AVFilterContext, %struct.AVFilterContext* %11, i32 0, i32 10, !dbg !792
  %12 = load %struct.AVFilterGraph*, %struct.AVFilterGraph** %graph, align 8, !dbg !792
  call void @avfilter_graph_set_auto_convert(%struct.AVFilterGraph* %12, i32 -1), !dbg !793
  br label %if.end, !dbg !794

if.end:                                           ; preds = %if.then, %entry
  ret i32 0, !dbg !795
}

; Function Attrs: cold nounwind optsize uwtable
define internal void @uninit(%struct.AVFilterContext* %ctx) #0 !dbg !796 {
entry:
  %ctx.addr = alloca %struct.AVFilterContext*, align 8
  %s = alloca %struct.HDCDContext*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %state = alloca %struct.hdcd_state*, align 8
  store %struct.AVFilterContext* %ctx, %struct.AVFilterContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVFilterContext** %ctx.addr, metadata !797, metadata !709), !dbg !798
  call void @llvm.dbg.declare(metadata %struct.HDCDContext** %s, metadata !799, metadata !709), !dbg !800
  %0 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !801
  %priv = getelementptr inbounds %struct.AVFilterContext, %struct.AVFilterContext* %0, i32 0, i32 9, !dbg !802
  %1 = load i8*, i8** %priv, align 8, !dbg !802
  %2 = bitcast i8* %1 to %struct.HDCDContext*, !dbg !801
  store %struct.HDCDContext* %2, %struct.HDCDContext** %s, align 8, !dbg !800
  call void @llvm.dbg.declare(metadata i32* %i, metadata !803, metadata !709), !dbg !804
  call void @llvm.dbg.declare(metadata i32* %j, metadata !805, metadata !709), !dbg !806
  store i32 0, i32* %i, align 4, !dbg !807
  br label %for.cond, !dbg !809

for.cond:                                         ; preds = %for.inc11, %entry
  %3 = load i32, i32* %i, align 4, !dbg !810
  %cmp = icmp slt i32 %3, 2, !dbg !813
  br i1 %cmp, label %for.body, label %for.end13, !dbg !814

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.hdcd_state** %state, metadata !815, metadata !709), !dbg !818
  %4 = load i32, i32* %i, align 4, !dbg !819
  %idxprom = sext i32 %4 to i64, !dbg !820
  %5 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !820
  %state1 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %5, i32 0, i32 1, !dbg !821
  %arrayidx = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state1, i64 0, i64 %idxprom, !dbg !820
  store %struct.hdcd_state* %arrayidx, %struct.hdcd_state** %state, align 8, !dbg !818
  %6 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !822
  %7 = bitcast %struct.AVFilterContext* %6 to i8*, !dbg !822
  %8 = load i32, i32* %i, align 4, !dbg !823
  %9 = load %struct.hdcd_state*, %struct.hdcd_state** %state, align 8, !dbg !824
  %code_counterA = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %9, i32 0, i32 7, !dbg !825
  %10 = load i32, i32* %code_counterA, align 8, !dbg !825
  %11 = load %struct.hdcd_state*, %struct.hdcd_state** %state, align 8, !dbg !826
  %code_counterB = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %11, i32 0, i32 9, !dbg !827
  %12 = load i32, i32* %code_counterB, align 8, !dbg !827
  %13 = load %struct.hdcd_state*, %struct.hdcd_state** %state, align 8, !dbg !828
  %code_counterC = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %13, i32 0, i32 11, !dbg !829
  %14 = load i32, i32* %code_counterC, align 8, !dbg !829
  call void (i8*, i32, i8*, ...) @av_log(i8* %7, i32 40, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.56, i32 0, i32 0), i32 %8, i32 %10, i32 %12, i32 %14), !dbg !830
  %15 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !831
  %16 = bitcast %struct.AVFilterContext* %15 to i8*, !dbg !831
  %17 = load i32, i32* %i, align 4, !dbg !832
  %18 = load %struct.hdcd_state*, %struct.hdcd_state** %state, align 8, !dbg !833
  %count_peak_extend = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %18, i32 0, i32 13, !dbg !834
  %19 = load i32, i32* %count_peak_extend, align 8, !dbg !834
  %20 = load %struct.hdcd_state*, %struct.hdcd_state** %state, align 8, !dbg !835
  %count_transient_filter = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %20, i32 0, i32 14, !dbg !836
  %21 = load i32, i32* %count_transient_filter, align 4, !dbg !836
  %22 = load %struct.hdcd_state*, %struct.hdcd_state** %state, align 8, !dbg !837
  %code_counterA_almost = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %22, i32 0, i32 8, !dbg !838
  %23 = load i32, i32* %code_counterA_almost, align 4, !dbg !838
  %24 = load %struct.hdcd_state*, %struct.hdcd_state** %state, align 8, !dbg !839
  %code_counterB_checkfails = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %24, i32 0, i32 10, !dbg !840
  %25 = load i32, i32* %code_counterB_checkfails, align 4, !dbg !840
  %26 = load %struct.hdcd_state*, %struct.hdcd_state** %state, align 8, !dbg !841
  %code_counterC_unmatched = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %26, i32 0, i32 12, !dbg !842
  %27 = load i32, i32* %code_counterC_unmatched, align 4, !dbg !842
  %28 = load %struct.hdcd_state*, %struct.hdcd_state** %state, align 8, !dbg !843
  %count_sustain_expired = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %28, i32 0, i32 17, !dbg !844
  %29 = load i32, i32* %count_sustain_expired, align 4, !dbg !844
  call void (i8*, i32, i8*, ...) @av_log(i8* %16, i32 40, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.57, i32 0, i32 0), i32 %17, i32 %19, i32 %21, i32 %23, i32 %25, i32 %27, i32 %29), !dbg !845
  store i32 0, i32* %j, align 4, !dbg !846
  br label %for.cond2, !dbg !848

for.cond2:                                        ; preds = %for.inc, %for.body
  %30 = load i32, i32* %j, align 4, !dbg !849
  %31 = load %struct.hdcd_state*, %struct.hdcd_state** %state, align 8, !dbg !852
  %max_gain = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %31, i32 0, i32 16, !dbg !853
  %32 = load i32, i32* %max_gain, align 8, !dbg !853
  %cmp3 = icmp sle i32 %30, %32, !dbg !854
  br i1 %cmp3, label %for.body4, label %for.end, !dbg !855

for.body4:                                        ; preds = %for.cond2
  %33 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !856
  %34 = bitcast %struct.AVFilterContext* %33 to i8*, !dbg !856
  %35 = load i32, i32* %i, align 4, !dbg !858
  %36 = load i32, i32* %j, align 4, !dbg !859
  %tobool = icmp ne i32 %36, 0, !dbg !860
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !860

cond.true:                                        ; preds = %for.body4
  %37 = load i32, i32* %j, align 4, !dbg !861
  %shr = ashr i32 %37, 1, !dbg !863
  %conv = sitofp i32 %shr to float, !dbg !864
  %sub = fsub float -0.000000e+00, %conv, !dbg !865
  %conv5 = fpext float %sub to double, !dbg !865
  %38 = load i32, i32* %j, align 4, !dbg !866
  %and = and i32 %38, 1, !dbg !867
  %tobool6 = icmp ne i32 %and, 0, !dbg !868
  %cond = select i1 %tobool6, double 5.000000e-01, double 0.000000e+00, !dbg !868
  %sub7 = fsub double %conv5, %cond, !dbg !869
  br label %cond.end, !dbg !870

cond.false:                                       ; preds = %for.body4
  br label %cond.end, !dbg !871

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond8 = phi double [ %sub7, %cond.true ], [ 0.000000e+00, %cond.false ], !dbg !873
  %39 = load i32, i32* %j, align 4, !dbg !875
  %idxprom9 = sext i32 %39 to i64, !dbg !876
  %40 = load %struct.hdcd_state*, %struct.hdcd_state** %state, align 8, !dbg !876
  %gain_counts = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %40, i32 0, i32 15, !dbg !877
  %arrayidx10 = getelementptr inbounds [16 x i32], [16 x i32]* %gain_counts, i64 0, i64 %idxprom9, !dbg !876
  %41 = load i32, i32* %arrayidx10, align 4, !dbg !876
  call void (i8*, i32, i8*, ...) @av_log(i8* %34, i32 40, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.58, i32 0, i32 0), i32 %35, double %cond8, i32 %41), !dbg !878
  br label %for.inc, !dbg !879

for.inc:                                          ; preds = %cond.end
  %42 = load i32, i32* %j, align 4, !dbg !880
  %inc = add nsw i32 %42, 1, !dbg !880
  store i32 %inc, i32* %j, align 4, !dbg !880
  br label %for.cond2, !dbg !882, !llvm.loop !883

for.end:                                          ; preds = %for.cond2
  br label %for.inc11, !dbg !885

for.inc11:                                        ; preds = %for.end
  %43 = load i32, i32* %i, align 4, !dbg !886
  %inc12 = add nsw i32 %43, 1, !dbg !886
  store i32 %inc12, i32* %i, align 4, !dbg !886
  br label %for.cond, !dbg !888, !llvm.loop !889

for.end13:                                        ; preds = %for.cond
  %44 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !891
  %45 = bitcast %struct.AVFilterContext* %44 to i8*, !dbg !891
  %46 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !892
  %detect = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %46, i32 0, i32 12, !dbg !893
  %packet_type = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %detect, i32 0, i32 1, !dbg !894
  %47 = load i32, i32* %packet_type, align 4, !dbg !894
  %idxprom14 = zext i32 %47 to i64, !dbg !895
  %arrayidx15 = getelementptr inbounds [4 x i8*], [4 x i8*]* @pf_str, i64 0, i64 %idxprom14, !dbg !895
  %48 = load i8*, i8** %arrayidx15, align 8, !dbg !895
  %49 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !896
  %detect16 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %49, i32 0, i32 12, !dbg !897
  %total_packets = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %detect16, i32 0, i32 2, !dbg !898
  %50 = load i32, i32* %total_packets, align 8, !dbg !898
  call void (i8*, i32, i8*, ...) @av_log(i8* %45, i32 40, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.59, i32 0, i32 0), i8* %48, i32 %50), !dbg !899
  %51 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !900
  %detect17 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %51, i32 0, i32 12, !dbg !902
  %hdcd_detected = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %detect17, i32 0, i32 0, !dbg !903
  %52 = load i32, i32* %hdcd_detected, align 8, !dbg !903
  %tobool18 = icmp ne i32 %52, 0, !dbg !900
  br i1 %tobool18, label %if.then, label %if.else, !dbg !904

if.then:                                          ; preds = %for.end13
  %53 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !905
  %54 = bitcast %struct.AVFilterContext* %53 to i8*, !dbg !905
  %55 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !906
  %detect19 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %55, i32 0, i32 12, !dbg !907
  %peak_extend = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %detect19, i32 0, i32 4, !dbg !908
  %56 = load i32, i32* %peak_extend, align 8, !dbg !908
  %idxprom20 = zext i32 %56 to i64, !dbg !909
  %arrayidx21 = getelementptr inbounds [3 x i8*], [3 x i8*]* @pe_str, i64 0, i64 %idxprom20, !dbg !909
  %57 = load i8*, i8** %arrayidx21, align 8, !dbg !909
  %58 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !910
  %detect22 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %58, i32 0, i32 12, !dbg !911
  %max_gain_adjustment = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %detect22, i32 0, i32 6, !dbg !912
  %59 = load float, float* %max_gain_adjustment, align 8, !dbg !912
  %conv23 = fpext float %59 to double, !dbg !910
  %60 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !913
  %detect24 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %60, i32 0, i32 12, !dbg !914
  %uses_transient_filter = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %detect24, i32 0, i32 5, !dbg !915
  %61 = load i32, i32* %uses_transient_filter, align 4, !dbg !915
  %tobool25 = icmp ne i32 %61, 0, !dbg !916
  %cond26 = select i1 %tobool25, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.62, i32 0, i32 0), !dbg !916
  %62 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !917
  %detect27 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %62, i32 0, i32 12, !dbg !918
  %errors = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %detect27, i32 0, i32 3, !dbg !919
  %63 = load i32, i32* %errors, align 4, !dbg !919
  %64 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !920
  %detect28 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %64, i32 0, i32 12, !dbg !921
  %errors29 = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %detect28, i32 0, i32 3, !dbg !922
  %65 = load i32, i32* %errors29, align 4, !dbg !922
  %tobool30 = icmp ne i32 %65, 0, !dbg !923
  %cond31 = select i1 %tobool30, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.64, i32 0, i32 0), !dbg !923
  %66 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !924
  %bad_config = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %66, i32 0, i32 8, !dbg !925
  %67 = load i32, i32* %bad_config, align 8, !dbg !925
  %tobool32 = icmp ne i32 %67, 0, !dbg !926
  %cond33 = select i1 %tobool32, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.64, i32 0, i32 0), !dbg !926
  call void (i8*, i32, i8*, ...) @av_log(i8* %54, i32 32, i8* getelementptr inbounds ([110 x i8], [110 x i8]* @.str.60, i32 0, i32 0), i8* %57, double %conv23, i8* %cond26, i32 %63, i8* %cond31, i8* %cond33), !dbg !927
  br label %if.end, !dbg !927

if.else:                                          ; preds = %for.end13
  %68 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !928
  %69 = bitcast %struct.AVFilterContext* %68 to i8*, !dbg !928
  %70 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !929
  %bad_config34 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %70, i32 0, i32 8, !dbg !930
  %71 = load i32, i32* %bad_config34, align 8, !dbg !930
  %tobool35 = icmp ne i32 %71, 0, !dbg !931
  %cond36 = select i1 %tobool35, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.64, i32 0, i32 0), !dbg !931
  call void (i8*, i32, i8*, ...) @av_log(i8* %69, i32 32, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.66, i32 0, i32 0), i8* %cond36), !dbg !932
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !933
}

; Function Attrs: nounwind uwtable
define internal i32 @query_formats(%struct.AVFilterContext* %ctx) #1 !dbg !695 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.AVFilterContext*, align 8
  %in_formats = alloca %struct.AVFilterFormats*, align 8
  %out_formats = alloca %struct.AVFilterFormats*, align 8
  %layouts = alloca %struct.AVFilterChannelLayouts*, align 8
  %inlink = alloca %struct.AVFilterLink*, align 8
  %outlink = alloca %struct.AVFilterLink*, align 8
  %ret = alloca i32, align 4
  store %struct.AVFilterContext* %ctx, %struct.AVFilterContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVFilterContext** %ctx.addr, metadata !934, metadata !709), !dbg !935
  call void @llvm.dbg.declare(metadata %struct.AVFilterFormats** %in_formats, metadata !936, metadata !709), !dbg !937
  call void @llvm.dbg.declare(metadata %struct.AVFilterFormats** %out_formats, metadata !938, metadata !709), !dbg !939
  call void @llvm.dbg.declare(metadata %struct.AVFilterChannelLayouts** %layouts, metadata !940, metadata !709), !dbg !943
  store %struct.AVFilterChannelLayouts* null, %struct.AVFilterChannelLayouts** %layouts, align 8, !dbg !943
  call void @llvm.dbg.declare(metadata %struct.AVFilterLink** %inlink, metadata !944, metadata !709), !dbg !945
  %0 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !946
  %inputs = getelementptr inbounds %struct.AVFilterContext, %struct.AVFilterContext* %0, i32 0, i32 4, !dbg !947
  %1 = load %struct.AVFilterLink**, %struct.AVFilterLink*** %inputs, align 8, !dbg !947
  %arrayidx = getelementptr inbounds %struct.AVFilterLink*, %struct.AVFilterLink** %1, i64 0, !dbg !946
  %2 = load %struct.AVFilterLink*, %struct.AVFilterLink** %arrayidx, align 8, !dbg !946
  store %struct.AVFilterLink* %2, %struct.AVFilterLink** %inlink, align 8, !dbg !945
  call void @llvm.dbg.declare(metadata %struct.AVFilterLink** %outlink, metadata !948, metadata !709), !dbg !949
  %3 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !950
  %outputs = getelementptr inbounds %struct.AVFilterContext, %struct.AVFilterContext* %3, i32 0, i32 7, !dbg !951
  %4 = load %struct.AVFilterLink**, %struct.AVFilterLink*** %outputs, align 8, !dbg !951
  %arrayidx1 = getelementptr inbounds %struct.AVFilterLink*, %struct.AVFilterLink** %4, i64 0, !dbg !950
  %5 = load %struct.AVFilterLink*, %struct.AVFilterLink** %arrayidx1, align 8, !dbg !950
  store %struct.AVFilterLink* %5, %struct.AVFilterLink** %outlink, align 8, !dbg !949
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !952, metadata !709), !dbg !953
  %call = call i32 @ff_add_channel_layout(%struct.AVFilterChannelLayouts** %layouts, i64 4), !dbg !954
  store i32 %call, i32* %ret, align 4, !dbg !955
  %6 = load i32, i32* %ret, align 4, !dbg !956
  %cmp = icmp slt i32 %6, 0, !dbg !958
  br i1 %cmp, label %if.then, label %if.end, !dbg !959

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %ret, align 4, !dbg !960
  store i32 %7, i32* %retval, align 4, !dbg !961
  br label %return, !dbg !961

if.end:                                           ; preds = %entry
  %call2 = call i32 @ff_add_channel_layout(%struct.AVFilterChannelLayouts** %layouts, i64 3), !dbg !962
  store i32 %call2, i32* %ret, align 4, !dbg !963
  %8 = load i32, i32* %ret, align 4, !dbg !964
  %cmp3 = icmp slt i32 %8, 0, !dbg !966
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !967

if.then4:                                         ; preds = %if.end
  %9 = load i32, i32* %ret, align 4, !dbg !968
  store i32 %9, i32* %retval, align 4, !dbg !969
  br label %return, !dbg !969

if.end5:                                          ; preds = %if.end
  %10 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !970
  %11 = load %struct.AVFilterChannelLayouts*, %struct.AVFilterChannelLayouts** %layouts, align 8, !dbg !971
  %call6 = call i32 @ff_set_common_channel_layouts(%struct.AVFilterContext* %10, %struct.AVFilterChannelLayouts* %11), !dbg !972
  store i32 %call6, i32* %ret, align 4, !dbg !973
  %12 = load i32, i32* %ret, align 4, !dbg !974
  %cmp7 = icmp slt i32 %12, 0, !dbg !976
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !977

if.then8:                                         ; preds = %if.end5
  %13 = load i32, i32* %ret, align 4, !dbg !978
  store i32 %13, i32* %retval, align 4, !dbg !979
  br label %return, !dbg !979

if.end9:                                          ; preds = %if.end5
  %call10 = call %struct.AVFilterFormats* @ff_make_format_list(i32* getelementptr inbounds ([5 x i32], [5 x i32]* @query_formats.sample_fmts_in, i32 0, i32 0)), !dbg !980
  store %struct.AVFilterFormats* %call10, %struct.AVFilterFormats** %in_formats, align 8, !dbg !981
  %14 = load %struct.AVFilterFormats*, %struct.AVFilterFormats** %in_formats, align 8, !dbg !982
  %15 = load %struct.AVFilterLink*, %struct.AVFilterLink** %inlink, align 8, !dbg !983
  %out_formats11 = getelementptr inbounds %struct.AVFilterLink, %struct.AVFilterLink* %15, i32 0, i32 13, !dbg !984
  %call12 = call i32 @ff_formats_ref(%struct.AVFilterFormats* %14, %struct.AVFilterFormats** %out_formats11), !dbg !985
  store i32 %call12, i32* %ret, align 4, !dbg !986
  %16 = load i32, i32* %ret, align 4, !dbg !987
  %cmp13 = icmp slt i32 %16, 0, !dbg !989
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !990

if.then14:                                        ; preds = %if.end9
  %17 = load i32, i32* %ret, align 4, !dbg !991
  store i32 %17, i32* %retval, align 4, !dbg !992
  br label %return, !dbg !992

if.end15:                                         ; preds = %if.end9
  %call16 = call %struct.AVFilterFormats* @ff_make_format_list(i32* getelementptr inbounds ([2 x i32], [2 x i32]* @query_formats.sample_fmts_out, i32 0, i32 0)), !dbg !993
  store %struct.AVFilterFormats* %call16, %struct.AVFilterFormats** %out_formats, align 8, !dbg !994
  %18 = load %struct.AVFilterFormats*, %struct.AVFilterFormats** %out_formats, align 8, !dbg !995
  %19 = load %struct.AVFilterLink*, %struct.AVFilterLink** %outlink, align 8, !dbg !996
  %in_formats17 = getelementptr inbounds %struct.AVFilterLink, %struct.AVFilterLink* %19, i32 0, i32 12, !dbg !997
  %call18 = call i32 @ff_formats_ref(%struct.AVFilterFormats* %18, %struct.AVFilterFormats** %in_formats17), !dbg !998
  store i32 %call18, i32* %ret, align 4, !dbg !999
  %20 = load i32, i32* %ret, align 4, !dbg !1000
  %cmp19 = icmp slt i32 %20, 0, !dbg !1002
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !1003

if.then20:                                        ; preds = %if.end15
  %21 = load i32, i32* %ret, align 4, !dbg !1004
  store i32 %21, i32* %retval, align 4, !dbg !1005
  br label %return, !dbg !1005

if.end21:                                         ; preds = %if.end15
  %22 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx.addr, align 8, !dbg !1006
  %call22 = call %struct.AVFilterFormats* @ff_make_format_list(i32* getelementptr inbounds ([7 x i32], [7 x i32]* @query_formats.sample_rates, i32 0, i32 0)), !dbg !1007
  %call23 = call i32 @ff_set_common_samplerates(%struct.AVFilterContext* %22, %struct.AVFilterFormats* %call22), !dbg !1008
  store i32 %call23, i32* %retval, align 4, !dbg !1010
  br label %return, !dbg !1010

return:                                           ; preds = %if.end21, %if.then20, %if.then14, %if.then8, %if.then4, %if.then
  %23 = load i32, i32* %retval, align 4, !dbg !1011
  ret i32 %23, !dbg !1011
}

; Function Attrs: nounwind uwtable
define internal i32 @filter_frame(%struct.AVFilterLink* %inlink, %struct.AVFrame* %in) #1 !dbg !1012 {
entry:
  %retval = alloca i32, align 4
  %inlink.addr = alloca %struct.AVFilterLink*, align 8
  %in.addr = alloca %struct.AVFrame*, align 8
  %ctx = alloca %struct.AVFilterContext*, align 8
  %s = alloca %struct.HDCDContext*, align 8
  %outlink = alloca %struct.AVFilterLink*, align 8
  %out = alloca %struct.AVFrame*, align 8
  %in_data = alloca i16*, align 8
  %in_data32 = alloca i32*, align 8
  %out_data = alloca i32*, align 8
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  %result = alloca i32, align 4
  %a = alloca i32, align 4
  store %struct.AVFilterLink* %inlink, %struct.AVFilterLink** %inlink.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVFilterLink** %inlink.addr, metadata !1013, metadata !709), !dbg !1014
  store %struct.AVFrame* %in, %struct.AVFrame** %in.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVFrame** %in.addr, metadata !1015, metadata !709), !dbg !1016
  call void @llvm.dbg.declare(metadata %struct.AVFilterContext** %ctx, metadata !1017, metadata !709), !dbg !1018
  %0 = load %struct.AVFilterLink*, %struct.AVFilterLink** %inlink.addr, align 8, !dbg !1019
  %dst = getelementptr inbounds %struct.AVFilterLink, %struct.AVFilterLink* %0, i32 0, i32 2, !dbg !1020
  %1 = load %struct.AVFilterContext*, %struct.AVFilterContext** %dst, align 8, !dbg !1020
  store %struct.AVFilterContext* %1, %struct.AVFilterContext** %ctx, align 8, !dbg !1018
  call void @llvm.dbg.declare(metadata %struct.HDCDContext** %s, metadata !1021, metadata !709), !dbg !1022
  %2 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx, align 8, !dbg !1023
  %priv = getelementptr inbounds %struct.AVFilterContext, %struct.AVFilterContext* %2, i32 0, i32 9, !dbg !1024
  %3 = load i8*, i8** %priv, align 8, !dbg !1024
  %4 = bitcast i8* %3 to %struct.HDCDContext*, !dbg !1023
  store %struct.HDCDContext* %4, %struct.HDCDContext** %s, align 8, !dbg !1022
  call void @llvm.dbg.declare(metadata %struct.AVFilterLink** %outlink, metadata !1025, metadata !709), !dbg !1026
  %5 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx, align 8, !dbg !1027
  %outputs = getelementptr inbounds %struct.AVFilterContext, %struct.AVFilterContext* %5, i32 0, i32 7, !dbg !1028
  %6 = load %struct.AVFilterLink**, %struct.AVFilterLink*** %outputs, align 8, !dbg !1028
  %arrayidx = getelementptr inbounds %struct.AVFilterLink*, %struct.AVFilterLink** %6, i64 0, !dbg !1027
  %7 = load %struct.AVFilterLink*, %struct.AVFilterLink** %arrayidx, align 8, !dbg !1027
  store %struct.AVFilterLink* %7, %struct.AVFilterLink** %outlink, align 8, !dbg !1026
  call void @llvm.dbg.declare(metadata %struct.AVFrame** %out, metadata !1029, metadata !709), !dbg !1030
  call void @llvm.dbg.declare(metadata i16** %in_data, metadata !1031, metadata !709), !dbg !1034
  call void @llvm.dbg.declare(metadata i32** %in_data32, metadata !1035, metadata !709), !dbg !1037
  call void @llvm.dbg.declare(metadata i32** %out_data, metadata !1038, metadata !709), !dbg !1039
  call void @llvm.dbg.declare(metadata i32* %n, metadata !1040, metadata !709), !dbg !1041
  call void @llvm.dbg.declare(metadata i32* %c, metadata !1042, metadata !709), !dbg !1043
  call void @llvm.dbg.declare(metadata i32* %result, metadata !1044, metadata !709), !dbg !1045
  call void @llvm.dbg.declare(metadata i32* %a, metadata !1046, metadata !709), !dbg !1047
  %8 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1048
  %bits_per_sample = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %8, i32 0, i32 7, !dbg !1049
  %9 = load i32, i32* %bits_per_sample, align 4, !dbg !1049
  %sub = sub nsw i32 32, %9, !dbg !1050
  store i32 %sub, i32* %a, align 4, !dbg !1047
  %10 = load %struct.AVFilterLink*, %struct.AVFilterLink** %outlink, align 8, !dbg !1051
  %11 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1052
  %nb_samples = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %11, i32 0, i32 5, !dbg !1053
  %12 = load i32, i32* %nb_samples, align 8, !dbg !1053
  %call = call %struct.AVFrame* @ff_get_audio_buffer(%struct.AVFilterLink* %10, i32 %12), !dbg !1054
  store %struct.AVFrame* %call, %struct.AVFrame** %out, align 8, !dbg !1055
  %13 = load %struct.AVFrame*, %struct.AVFrame** %out, align 8, !dbg !1056
  %tobool = icmp ne %struct.AVFrame* %13, null, !dbg !1056
  br i1 %tobool, label %if.end, label %if.then, !dbg !1058

if.then:                                          ; preds = %entry
  call void @av_frame_free(%struct.AVFrame** %in.addr), !dbg !1059
  store i32 -12, i32* %retval, align 4, !dbg !1061
  br label %return, !dbg !1061

if.end:                                           ; preds = %entry
  %14 = load %struct.AVFrame*, %struct.AVFrame** %out, align 8, !dbg !1062
  %15 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1063
  %call1 = call i32 @av_frame_copy_props(%struct.AVFrame* %14, %struct.AVFrame* %15), !dbg !1064
  store i32 %call1, i32* %result, align 4, !dbg !1065
  %16 = load i32, i32* %result, align 4, !dbg !1066
  %tobool2 = icmp ne i32 %16, 0, !dbg !1066
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !1068

if.then3:                                         ; preds = %if.end
  call void @av_frame_free(%struct.AVFrame** %out), !dbg !1069
  call void @av_frame_free(%struct.AVFrame** %in.addr), !dbg !1071
  %17 = load i32, i32* %result, align 4, !dbg !1072
  store i32 %17, i32* %retval, align 4, !dbg !1073
  br label %return, !dbg !1073

if.end4:                                          ; preds = %if.end
  %18 = load %struct.AVFilterLink*, %struct.AVFilterLink** %outlink, align 8, !dbg !1074
  %format = getelementptr inbounds %struct.AVFilterLink, %struct.AVFilterLink* %18, i32 0, i32 10, !dbg !1075
  %19 = load i32, i32* %format, align 4, !dbg !1075
  %20 = load %struct.AVFrame*, %struct.AVFrame** %out, align 8, !dbg !1076
  %format5 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %20, i32 0, i32 6, !dbg !1077
  store i32 %19, i32* %format5, align 4, !dbg !1078
  %21 = load %struct.AVFrame*, %struct.AVFrame** %out, align 8, !dbg !1079
  %data = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %21, i32 0, i32 0, !dbg !1080
  %arrayidx6 = getelementptr inbounds [8 x i8*], [8 x i8*]* %data, i64 0, i64 0, !dbg !1079
  %22 = load i8*, i8** %arrayidx6, align 8, !dbg !1079
  %23 = bitcast i8* %22 to i32*, !dbg !1081
  store i32* %23, i32** %out_data, align 8, !dbg !1082
  %24 = load %struct.AVFilterLink*, %struct.AVFilterLink** %inlink.addr, align 8, !dbg !1083
  %format7 = getelementptr inbounds %struct.AVFilterLink, %struct.AVFilterLink* %24, i32 0, i32 10, !dbg !1084
  %25 = load i32, i32* %format7, align 4, !dbg !1084
  switch i32 %25, label %sw.epilog [
    i32 6, label %sw.bb
    i32 1, label %sw.bb21
    i32 7, label %sw.bb39
    i32 2, label %sw.bb66
  ], !dbg !1085

sw.bb:                                            ; preds = %if.end4
  store i32 0, i32* %n, align 4, !dbg !1086
  br label %for.cond, !dbg !1089

for.cond:                                         ; preds = %for.inc18, %sw.bb
  %26 = load i32, i32* %n, align 4, !dbg !1090
  %27 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1093
  %nb_samples8 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %27, i32 0, i32 5, !dbg !1094
  %28 = load i32, i32* %nb_samples8, align 8, !dbg !1094
  %cmp = icmp slt i32 %26, %28, !dbg !1095
  br i1 %cmp, label %for.body, label %for.end20, !dbg !1096

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %c, align 4, !dbg !1097
  br label %for.cond9, !dbg !1099

for.cond9:                                        ; preds = %for.inc, %for.body
  %29 = load i32, i32* %c, align 4, !dbg !1100
  %30 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1103
  %channels = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %30, i32 0, i32 41, !dbg !1104
  %31 = load i32, i32* %channels, align 4, !dbg !1104
  %cmp10 = icmp slt i32 %29, %31, !dbg !1105
  br i1 %cmp10, label %for.body11, label %for.end, !dbg !1106

for.body11:                                       ; preds = %for.cond9
  %32 = load i32, i32* %c, align 4, !dbg !1107
  %idxprom = sext i32 %32 to i64, !dbg !1109
  %33 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1109
  %extended_data = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %33, i32 0, i32 2, !dbg !1110
  %34 = load i8**, i8*** %extended_data, align 8, !dbg !1110
  %arrayidx12 = getelementptr inbounds i8*, i8** %34, i64 %idxprom, !dbg !1109
  %35 = load i8*, i8** %arrayidx12, align 8, !dbg !1109
  %36 = bitcast i8* %35 to i16*, !dbg !1111
  store i16* %36, i16** %in_data, align 8, !dbg !1112
  %37 = load i32, i32* %n, align 4, !dbg !1113
  %idxprom13 = sext i32 %37 to i64, !dbg !1114
  %38 = load i16*, i16** %in_data, align 8, !dbg !1114
  %arrayidx14 = getelementptr inbounds i16, i16* %38, i64 %idxprom13, !dbg !1114
  %39 = load i16, i16* %arrayidx14, align 2, !dbg !1114
  %conv = sext i16 %39 to i32, !dbg !1114
  %40 = load i32, i32* %n, align 4, !dbg !1115
  %41 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1116
  %channels15 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %41, i32 0, i32 41, !dbg !1117
  %42 = load i32, i32* %channels15, align 4, !dbg !1117
  %mul = mul nsw i32 %40, %42, !dbg !1118
  %43 = load i32, i32* %c, align 4, !dbg !1119
  %add = add nsw i32 %mul, %43, !dbg !1120
  %idxprom16 = sext i32 %add to i64, !dbg !1121
  %44 = load i32*, i32** %out_data, align 8, !dbg !1121
  %arrayidx17 = getelementptr inbounds i32, i32* %44, i64 %idxprom16, !dbg !1121
  store i32 %conv, i32* %arrayidx17, align 4, !dbg !1122
  br label %for.inc, !dbg !1123

for.inc:                                          ; preds = %for.body11
  %45 = load i32, i32* %c, align 4, !dbg !1124
  %inc = add nsw i32 %45, 1, !dbg !1124
  store i32 %inc, i32* %c, align 4, !dbg !1124
  br label %for.cond9, !dbg !1126, !llvm.loop !1127

for.end:                                          ; preds = %for.cond9
  br label %for.inc18, !dbg !1129

for.inc18:                                        ; preds = %for.end
  %46 = load i32, i32* %n, align 4, !dbg !1131
  %inc19 = add nsw i32 %46, 1, !dbg !1131
  store i32 %inc19, i32* %n, align 4, !dbg !1131
  br label %for.cond, !dbg !1133, !llvm.loop !1134

for.end20:                                        ; preds = %for.cond
  br label %sw.epilog, !dbg !1136

sw.bb21:                                          ; preds = %if.end4
  %47 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1137
  %data22 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %47, i32 0, i32 0, !dbg !1138
  %arrayidx23 = getelementptr inbounds [8 x i8*], [8 x i8*]* %data22, i64 0, i64 0, !dbg !1137
  %48 = load i8*, i8** %arrayidx23, align 8, !dbg !1137
  %49 = bitcast i8* %48 to i16*, !dbg !1139
  store i16* %49, i16** %in_data, align 8, !dbg !1140
  store i32 0, i32* %n, align 4, !dbg !1141
  br label %for.cond24, !dbg !1143

for.cond24:                                       ; preds = %for.inc36, %sw.bb21
  %50 = load i32, i32* %n, align 4, !dbg !1144
  %51 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1147
  %nb_samples25 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %51, i32 0, i32 5, !dbg !1148
  %52 = load i32, i32* %nb_samples25, align 8, !dbg !1148
  %53 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1149
  %channels26 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %53, i32 0, i32 41, !dbg !1150
  %54 = load i32, i32* %channels26, align 4, !dbg !1150
  %mul27 = mul nsw i32 %52, %54, !dbg !1151
  %cmp28 = icmp slt i32 %50, %mul27, !dbg !1152
  br i1 %cmp28, label %for.body30, label %for.end38, !dbg !1153

for.body30:                                       ; preds = %for.cond24
  %55 = load i32, i32* %n, align 4, !dbg !1154
  %idxprom31 = sext i32 %55 to i64, !dbg !1155
  %56 = load i16*, i16** %in_data, align 8, !dbg !1155
  %arrayidx32 = getelementptr inbounds i16, i16* %56, i64 %idxprom31, !dbg !1155
  %57 = load i16, i16* %arrayidx32, align 2, !dbg !1155
  %conv33 = sext i16 %57 to i32, !dbg !1155
  %58 = load i32, i32* %n, align 4, !dbg !1156
  %idxprom34 = sext i32 %58 to i64, !dbg !1157
  %59 = load i32*, i32** %out_data, align 8, !dbg !1157
  %arrayidx35 = getelementptr inbounds i32, i32* %59, i64 %idxprom34, !dbg !1157
  store i32 %conv33, i32* %arrayidx35, align 4, !dbg !1158
  br label %for.inc36, !dbg !1157

for.inc36:                                        ; preds = %for.body30
  %60 = load i32, i32* %n, align 4, !dbg !1159
  %inc37 = add nsw i32 %60, 1, !dbg !1159
  store i32 %inc37, i32* %n, align 4, !dbg !1159
  br label %for.cond24, !dbg !1161, !llvm.loop !1162

for.end38:                                        ; preds = %for.cond24
  br label %sw.epilog, !dbg !1164

sw.bb39:                                          ; preds = %if.end4
  store i32 0, i32* %n, align 4, !dbg !1165
  br label %for.cond40, !dbg !1167

for.cond40:                                       ; preds = %for.inc63, %sw.bb39
  %61 = load i32, i32* %n, align 4, !dbg !1168
  %62 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1171
  %nb_samples41 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %62, i32 0, i32 5, !dbg !1172
  %63 = load i32, i32* %nb_samples41, align 8, !dbg !1172
  %cmp42 = icmp slt i32 %61, %63, !dbg !1173
  br i1 %cmp42, label %for.body44, label %for.end65, !dbg !1174

for.body44:                                       ; preds = %for.cond40
  store i32 0, i32* %c, align 4, !dbg !1175
  br label %for.cond45, !dbg !1177

for.cond45:                                       ; preds = %for.inc60, %for.body44
  %64 = load i32, i32* %c, align 4, !dbg !1178
  %65 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1181
  %channels46 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %65, i32 0, i32 41, !dbg !1182
  %66 = load i32, i32* %channels46, align 4, !dbg !1182
  %cmp47 = icmp slt i32 %64, %66, !dbg !1183
  br i1 %cmp47, label %for.body49, label %for.end62, !dbg !1184

for.body49:                                       ; preds = %for.cond45
  %67 = load i32, i32* %c, align 4, !dbg !1185
  %idxprom50 = sext i32 %67 to i64, !dbg !1187
  %68 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1187
  %extended_data51 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %68, i32 0, i32 2, !dbg !1188
  %69 = load i8**, i8*** %extended_data51, align 8, !dbg !1188
  %arrayidx52 = getelementptr inbounds i8*, i8** %69, i64 %idxprom50, !dbg !1187
  %70 = load i8*, i8** %arrayidx52, align 8, !dbg !1187
  %71 = bitcast i8* %70 to i32*, !dbg !1189
  store i32* %71, i32** %in_data32, align 8, !dbg !1190
  %72 = load i32, i32* %n, align 4, !dbg !1191
  %idxprom53 = sext i32 %72 to i64, !dbg !1192
  %73 = load i32*, i32** %in_data32, align 8, !dbg !1192
  %arrayidx54 = getelementptr inbounds i32, i32* %73, i64 %idxprom53, !dbg !1192
  %74 = load i32, i32* %arrayidx54, align 4, !dbg !1192
  %75 = load i32, i32* %a, align 4, !dbg !1193
  %shr = ashr i32 %74, %75, !dbg !1194
  %76 = load i32, i32* %n, align 4, !dbg !1195
  %77 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1196
  %channels55 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %77, i32 0, i32 41, !dbg !1197
  %78 = load i32, i32* %channels55, align 4, !dbg !1197
  %mul56 = mul nsw i32 %76, %78, !dbg !1198
  %79 = load i32, i32* %c, align 4, !dbg !1199
  %add57 = add nsw i32 %mul56, %79, !dbg !1200
  %idxprom58 = sext i32 %add57 to i64, !dbg !1201
  %80 = load i32*, i32** %out_data, align 8, !dbg !1201
  %arrayidx59 = getelementptr inbounds i32, i32* %80, i64 %idxprom58, !dbg !1201
  store i32 %shr, i32* %arrayidx59, align 4, !dbg !1202
  br label %for.inc60, !dbg !1203

for.inc60:                                        ; preds = %for.body49
  %81 = load i32, i32* %c, align 4, !dbg !1204
  %inc61 = add nsw i32 %81, 1, !dbg !1204
  store i32 %inc61, i32* %c, align 4, !dbg !1204
  br label %for.cond45, !dbg !1206, !llvm.loop !1207

for.end62:                                        ; preds = %for.cond45
  br label %for.inc63, !dbg !1209

for.inc63:                                        ; preds = %for.end62
  %82 = load i32, i32* %n, align 4, !dbg !1211
  %inc64 = add nsw i32 %82, 1, !dbg !1211
  store i32 %inc64, i32* %n, align 4, !dbg !1211
  br label %for.cond40, !dbg !1213, !llvm.loop !1214

for.end65:                                        ; preds = %for.cond40
  br label %sw.epilog, !dbg !1216

sw.bb66:                                          ; preds = %if.end4
  %83 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1217
  %data67 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %83, i32 0, i32 0, !dbg !1218
  %arrayidx68 = getelementptr inbounds [8 x i8*], [8 x i8*]* %data67, i64 0, i64 0, !dbg !1217
  %84 = load i8*, i8** %arrayidx68, align 8, !dbg !1217
  %85 = bitcast i8* %84 to i32*, !dbg !1219
  store i32* %85, i32** %in_data32, align 8, !dbg !1220
  store i32 0, i32* %n, align 4, !dbg !1221
  br label %for.cond69, !dbg !1223

for.cond69:                                       ; preds = %for.inc81, %sw.bb66
  %86 = load i32, i32* %n, align 4, !dbg !1224
  %87 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1227
  %nb_samples70 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %87, i32 0, i32 5, !dbg !1228
  %88 = load i32, i32* %nb_samples70, align 8, !dbg !1228
  %89 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1229
  %channels71 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %89, i32 0, i32 41, !dbg !1230
  %90 = load i32, i32* %channels71, align 4, !dbg !1230
  %mul72 = mul nsw i32 %88, %90, !dbg !1231
  %cmp73 = icmp slt i32 %86, %mul72, !dbg !1232
  br i1 %cmp73, label %for.body75, label %for.end83, !dbg !1233

for.body75:                                       ; preds = %for.cond69
  %91 = load i32, i32* %n, align 4, !dbg !1234
  %idxprom76 = sext i32 %91 to i64, !dbg !1235
  %92 = load i32*, i32** %in_data32, align 8, !dbg !1235
  %arrayidx77 = getelementptr inbounds i32, i32* %92, i64 %idxprom76, !dbg !1235
  %93 = load i32, i32* %arrayidx77, align 4, !dbg !1235
  %94 = load i32, i32* %a, align 4, !dbg !1236
  %shr78 = ashr i32 %93, %94, !dbg !1237
  %95 = load i32, i32* %n, align 4, !dbg !1238
  %idxprom79 = sext i32 %95 to i64, !dbg !1239
  %96 = load i32*, i32** %out_data, align 8, !dbg !1239
  %arrayidx80 = getelementptr inbounds i32, i32* %96, i64 %idxprom79, !dbg !1239
  store i32 %shr78, i32* %arrayidx80, align 4, !dbg !1240
  br label %for.inc81, !dbg !1239

for.inc81:                                        ; preds = %for.body75
  %97 = load i32, i32* %n, align 4, !dbg !1241
  %inc82 = add nsw i32 %97, 1, !dbg !1241
  store i32 %inc82, i32* %n, align 4, !dbg !1241
  br label %for.cond69, !dbg !1243, !llvm.loop !1244

for.end83:                                        ; preds = %for.cond69
  br label %sw.epilog, !dbg !1246

sw.epilog:                                        ; preds = %if.end4, %for.end83, %for.end65, %for.end38, %for.end20
  %98 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1247
  %process_stereo = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %98, i32 0, i32 2, !dbg !1249
  %99 = load i32, i32* %process_stereo, align 8, !dbg !1249
  %tobool84 = icmp ne i32 %99, 0, !dbg !1247
  br i1 %tobool84, label %if.then85, label %if.else, !dbg !1250

if.then85:                                        ; preds = %sw.epilog
  %100 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1251
  %detect = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %100, i32 0, i32 12, !dbg !1253
  call void @hdcd_detect_start(%struct.hdcd_detection_data* %detect), !dbg !1254
  %101 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1255
  %102 = load i32*, i32** %out_data, align 8, !dbg !1256
  %103 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1257
  %nb_samples86 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %103, i32 0, i32 5, !dbg !1258
  %104 = load i32, i32* %nb_samples86, align 8, !dbg !1258
  call void @hdcd_process_stereo(%struct.HDCDContext* %101, i32* %102, i32 %104), !dbg !1259
  %105 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1260
  %state = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %105, i32 0, i32 1, !dbg !1261
  %arrayidx87 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state, i64 0, i64 0, !dbg !1260
  %106 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1262
  %detect88 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %106, i32 0, i32 12, !dbg !1263
  call void @hdcd_detect_onech(%struct.hdcd_state* %arrayidx87, %struct.hdcd_detection_data* %detect88), !dbg !1264
  %107 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1265
  %state89 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %107, i32 0, i32 1, !dbg !1266
  %arrayidx90 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state89, i64 0, i64 1, !dbg !1265
  %108 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1267
  %detect91 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %108, i32 0, i32 12, !dbg !1268
  call void @hdcd_detect_onech(%struct.hdcd_state* %arrayidx90, %struct.hdcd_detection_data* %detect91), !dbg !1269
  %109 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1270
  %detect92 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %109, i32 0, i32 12, !dbg !1271
  call void @hdcd_detect_end(%struct.hdcd_detection_data* %detect92, i32 2), !dbg !1272
  br label %if.end113, !dbg !1273

if.else:                                          ; preds = %sw.epilog
  %110 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1274
  %detect93 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %110, i32 0, i32 12, !dbg !1276
  call void @hdcd_detect_start(%struct.hdcd_detection_data* %detect93), !dbg !1277
  store i32 0, i32* %c, align 4, !dbg !1278
  br label %for.cond94, !dbg !1280

for.cond94:                                       ; preds = %for.inc108, %if.else
  %111 = load i32, i32* %c, align 4, !dbg !1281
  %112 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1284
  %channels95 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %112, i32 0, i32 41, !dbg !1285
  %113 = load i32, i32* %channels95, align 4, !dbg !1285
  %cmp96 = icmp slt i32 %111, %113, !dbg !1286
  br i1 %cmp96, label %for.body98, label %for.end110, !dbg !1287

for.body98:                                       ; preds = %for.cond94
  %114 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1288
  %115 = load i32, i32* %c, align 4, !dbg !1290
  %idxprom99 = sext i32 %115 to i64, !dbg !1291
  %116 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1291
  %state100 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %116, i32 0, i32 1, !dbg !1292
  %arrayidx101 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state100, i64 0, i64 %idxprom99, !dbg !1291
  %117 = load i32*, i32** %out_data, align 8, !dbg !1293
  %118 = load i32, i32* %c, align 4, !dbg !1294
  %idx.ext = sext i32 %118 to i64, !dbg !1295
  %add.ptr = getelementptr inbounds i32, i32* %117, i64 %idx.ext, !dbg !1295
  %119 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1296
  %nb_samples102 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %119, i32 0, i32 5, !dbg !1297
  %120 = load i32, i32* %nb_samples102, align 8, !dbg !1297
  %121 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1298
  %channels103 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %121, i32 0, i32 41, !dbg !1299
  %122 = load i32, i32* %channels103, align 4, !dbg !1299
  call void @hdcd_process(%struct.HDCDContext* %114, %struct.hdcd_state* %arrayidx101, i32* %add.ptr, i32 %120, i32 %122), !dbg !1300
  %123 = load i32, i32* %c, align 4, !dbg !1301
  %idxprom104 = sext i32 %123 to i64, !dbg !1302
  %124 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1302
  %state105 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %124, i32 0, i32 1, !dbg !1303
  %arrayidx106 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state105, i64 0, i64 %idxprom104, !dbg !1302
  %125 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1304
  %detect107 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %125, i32 0, i32 12, !dbg !1305
  call void @hdcd_detect_onech(%struct.hdcd_state* %arrayidx106, %struct.hdcd_detection_data* %detect107), !dbg !1306
  br label %for.inc108, !dbg !1307

for.inc108:                                       ; preds = %for.body98
  %126 = load i32, i32* %c, align 4, !dbg !1308
  %inc109 = add nsw i32 %126, 1, !dbg !1308
  store i32 %inc109, i32* %c, align 4, !dbg !1308
  br label %for.cond94, !dbg !1310, !llvm.loop !1311

for.end110:                                       ; preds = %for.cond94
  %127 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1313
  %detect111 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %127, i32 0, i32 12, !dbg !1314
  %128 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1315
  %channels112 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %128, i32 0, i32 41, !dbg !1316
  %129 = load i32, i32* %channels112, align 4, !dbg !1316
  call void @hdcd_detect_end(%struct.hdcd_detection_data* %detect111, i32 %129), !dbg !1317
  br label %if.end113

if.end113:                                        ; preds = %for.end110, %if.then85
  %130 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1318
  %nb_samples114 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %130, i32 0, i32 5, !dbg !1319
  %131 = load i32, i32* %nb_samples114, align 8, !dbg !1319
  %132 = load %struct.AVFrame*, %struct.AVFrame** %in.addr, align 8, !dbg !1320
  %channels115 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %132, i32 0, i32 41, !dbg !1321
  %133 = load i32, i32* %channels115, align 4, !dbg !1321
  %mul116 = mul nsw i32 %131, %133, !dbg !1322
  %134 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1323
  %sample_count = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %134, i32 0, i32 10, !dbg !1324
  %135 = load i32, i32* %sample_count, align 8, !dbg !1325
  %add117 = add nsw i32 %135, %mul116, !dbg !1325
  store i32 %add117, i32* %sample_count, align 8, !dbg !1325
  call void @av_frame_free(%struct.AVFrame** %in.addr), !dbg !1326
  %136 = load %struct.AVFilterLink*, %struct.AVFilterLink** %outlink, align 8, !dbg !1327
  %137 = load %struct.AVFrame*, %struct.AVFrame** %out, align 8, !dbg !1328
  %call118 = call i32 @ff_filter_frame(%struct.AVFilterLink* %136, %struct.AVFrame* %137), !dbg !1329
  store i32 %call118, i32* %retval, align 4, !dbg !1330
  br label %return, !dbg !1330

return:                                           ; preds = %if.end113, %if.then3, %if.then
  %138 = load i32, i32* %retval, align 4, !dbg !1331
  ret i32 %138, !dbg !1331
}

; Function Attrs: nounwind uwtable
define internal i32 @config_input(%struct.AVFilterLink* %inlink) #1 !dbg !1332 {
entry:
  %inlink.addr = alloca %struct.AVFilterLink*, align 8
  %ctx = alloca %struct.AVFilterContext*, align 8
  %s = alloca %struct.HDCDContext*, align 8
  %c = alloca i32, align 4
  store %struct.AVFilterLink* %inlink, %struct.AVFilterLink** %inlink.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVFilterLink** %inlink.addr, metadata !1333, metadata !709), !dbg !1334
  call void @llvm.dbg.declare(metadata %struct.AVFilterContext** %ctx, metadata !1335, metadata !709), !dbg !1336
  %0 = load %struct.AVFilterLink*, %struct.AVFilterLink** %inlink.addr, align 8, !dbg !1337
  %dst = getelementptr inbounds %struct.AVFilterLink, %struct.AVFilterLink* %0, i32 0, i32 2, !dbg !1338
  %1 = load %struct.AVFilterContext*, %struct.AVFilterContext** %dst, align 8, !dbg !1338
  store %struct.AVFilterContext* %1, %struct.AVFilterContext** %ctx, align 8, !dbg !1336
  call void @llvm.dbg.declare(metadata %struct.HDCDContext** %s, metadata !1339, metadata !709), !dbg !1340
  %2 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx, align 8, !dbg !1341
  %priv = getelementptr inbounds %struct.AVFilterContext, %struct.AVFilterContext* %2, i32 0, i32 9, !dbg !1342
  %3 = load i8*, i8** %priv, align 8, !dbg !1342
  %4 = bitcast i8* %3 to %struct.HDCDContext*, !dbg !1341
  store %struct.HDCDContext* %4, %struct.HDCDContext** %s, align 8, !dbg !1340
  call void @llvm.dbg.declare(metadata i32* %c, metadata !1343, metadata !709), !dbg !1344
  %5 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx, align 8, !dbg !1345
  %6 = bitcast %struct.AVFilterContext* %5 to i8*, !dbg !1345
  %7 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx, align 8, !dbg !1346
  %graph = getelementptr inbounds %struct.AVFilterContext, %struct.AVFilterContext* %7, i32 0, i32 10, !dbg !1347
  %8 = load %struct.AVFilterGraph*, %struct.AVFilterGraph** %graph, align 8, !dbg !1347
  %disable_auto_convert = getelementptr inbounds %struct.AVFilterGraph, %struct.AVFilterGraph* %8, i32 0, i32 13, !dbg !1348
  %9 = load i32, i32* %disable_auto_convert, align 4, !dbg !1348
  %tobool = icmp ne i32 %9, 0, !dbg !1349
  %cond = select i1 %tobool, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), !dbg !1349
  call void (i8*, i32, i8*, ...) @av_log(i8* %6, i32 40, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i32 0, i32 0), i8* %cond), !dbg !1350
  %10 = load %struct.AVFilterLink*, %struct.AVFilterLink** %inlink.addr, align 8, !dbg !1351
  %format = getelementptr inbounds %struct.AVFilterLink, %struct.AVFilterLink* %10, i32 0, i32 10, !dbg !1353
  %11 = load i32, i32* %format, align 4, !dbg !1353
  %cmp = icmp eq i32 %11, 1, !dbg !1354
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !1355

lor.lhs.false:                                    ; preds = %entry
  %12 = load %struct.AVFilterLink*, %struct.AVFilterLink** %inlink.addr, align 8, !dbg !1356
  %format1 = getelementptr inbounds %struct.AVFilterLink, %struct.AVFilterLink* %12, i32 0, i32 10, !dbg !1357
  %13 = load i32, i32* %format1, align 4, !dbg !1357
  %cmp2 = icmp eq i32 %13, 6, !dbg !1358
  br i1 %cmp2, label %land.lhs.true, label %if.else, !dbg !1359

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %14 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1360
  %bits_per_sample = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %14, i32 0, i32 7, !dbg !1361
  %15 = load i32, i32* %bits_per_sample, align 4, !dbg !1361
  %cmp3 = icmp ne i32 %15, 16, !dbg !1362
  br i1 %cmp3, label %if.then, label %if.else, !dbg !1363

if.then:                                          ; preds = %land.lhs.true
  %16 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx, align 8, !dbg !1365
  %17 = bitcast %struct.AVFilterContext* %16 to i8*, !dbg !1365
  %18 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1367
  %bits_per_sample4 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %18, i32 0, i32 7, !dbg !1368
  %19 = load i32, i32* %bits_per_sample4, align 4, !dbg !1368
  %20 = load %struct.AVFilterLink*, %struct.AVFilterLink** %inlink.addr, align 8, !dbg !1369
  %format5 = getelementptr inbounds %struct.AVFilterLink, %struct.AVFilterLink* %20, i32 0, i32 10, !dbg !1370
  %21 = load i32, i32* %format5, align 4, !dbg !1370
  %call = call i8* @av_get_sample_fmt_name(i32 %21), !dbg !1371
  call void (i8*, i32, i8*, ...) @av_log(i8* %17, i32 24, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.16, i32 0, i32 0), i32 %19, i8* %call), !dbg !1372
  %22 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1373
  %bits_per_sample6 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %22, i32 0, i32 7, !dbg !1374
  store i32 16, i32* %bits_per_sample6, align 4, !dbg !1375
  br label %if.end, !dbg !1376

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %23 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx, align 8, !dbg !1377
  %24 = bitcast %struct.AVFilterContext* %23 to i8*, !dbg !1377
  %25 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1379
  %bits_per_sample7 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %25, i32 0, i32 7, !dbg !1380
  %26 = load i32, i32* %bits_per_sample7, align 4, !dbg !1380
  %27 = load %struct.AVFilterLink*, %struct.AVFilterLink** %inlink.addr, align 8, !dbg !1381
  %format8 = getelementptr inbounds %struct.AVFilterLink, %struct.AVFilterLink* %27, i32 0, i32 10, !dbg !1382
  %28 = load i32, i32* %format8, align 4, !dbg !1382
  %call9 = call i8* @av_get_sample_fmt_name(i32 %28), !dbg !1383
  call void (i8*, i32, i8*, ...) @av_log(i8* %24, i32 40, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.17, i32 0, i32 0), i32 %26, i8* %call9), !dbg !1384
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %29 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1385
  %bits_per_sample10 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %29, i32 0, i32 7, !dbg !1387
  %30 = load i32, i32* %bits_per_sample10, align 4, !dbg !1387
  %cmp11 = icmp ne i32 %30, 16, !dbg !1388
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !1389

if.then12:                                        ; preds = %if.end
  %31 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx, align 8, !dbg !1390
  %32 = bitcast %struct.AVFilterContext* %31 to i8*, !dbg !1390
  call void (i8*, i32, i8*, ...) @av_log(i8* %32, i32 24, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.18, i32 0, i32 0)), !dbg !1391
  br label %if.end13, !dbg !1391

if.end13:                                         ; preds = %if.then12, %if.end
  %33 = load %struct.AVFilterLink*, %struct.AVFilterLink** %inlink.addr, align 8, !dbg !1392
  %sample_rate = getelementptr inbounds %struct.AVFilterLink, %struct.AVFilterLink* %33, i32 0, i32 9, !dbg !1394
  %34 = load i32, i32* %sample_rate, align 8, !dbg !1394
  %cmp14 = icmp ne i32 %34, 44100, !dbg !1395
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !1396

if.then15:                                        ; preds = %if.end13
  %35 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx, align 8, !dbg !1397
  %36 = bitcast %struct.AVFilterContext* %35 to i8*, !dbg !1397
  call void (i8*, i32, i8*, ...) @av_log(i8* %36, i32 24, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.19, i32 0, i32 0)), !dbg !1398
  br label %if.end16, !dbg !1398

if.end16:                                         ; preds = %if.then15, %if.end13
  %37 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1399
  %detect = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %37, i32 0, i32 12, !dbg !1400
  call void @hdcd_detect_reset(%struct.hdcd_detection_data* %detect), !dbg !1401
  store i32 0, i32* %c, align 4, !dbg !1402
  br label %for.cond, !dbg !1404

for.cond:                                         ; preds = %for.inc, %if.end16
  %38 = load i32, i32* %c, align 4, !dbg !1405
  %cmp17 = icmp slt i32 %38, 2, !dbg !1408
  br i1 %cmp17, label %for.body, label %for.end, !dbg !1409

for.body:                                         ; preds = %for.cond
  %39 = load i32, i32* %c, align 4, !dbg !1410
  %idxprom = sext i32 %39 to i64, !dbg !1412
  %40 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1412
  %state = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %40, i32 0, i32 1, !dbg !1413
  %arrayidx = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state, i64 0, i64 %idxprom, !dbg !1412
  %41 = load %struct.AVFilterLink*, %struct.AVFilterLink** %inlink.addr, align 8, !dbg !1414
  %sample_rate18 = getelementptr inbounds %struct.AVFilterLink, %struct.AVFilterLink* %41, i32 0, i32 9, !dbg !1415
  %42 = load i32, i32* %sample_rate18, align 8, !dbg !1415
  %43 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1416
  %cdt_ms = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %43, i32 0, i32 5, !dbg !1417
  %44 = load i32, i32* %cdt_ms, align 4, !dbg !1417
  call void @hdcd_reset(%struct.hdcd_state* %arrayidx, i32 %42, i32 %44), !dbg !1418
  br label %for.inc, !dbg !1419

for.inc:                                          ; preds = %for.body
  %45 = load i32, i32* %c, align 4, !dbg !1420
  %inc = add nsw i32 %45, 1, !dbg !1420
  store i32 %inc, i32* %c, align 4, !dbg !1420
  br label %for.cond, !dbg !1422, !llvm.loop !1423

for.end:                                          ; preds = %for.cond
  %46 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx, align 8, !dbg !1425
  %47 = bitcast %struct.AVFilterContext* %46 to i8*, !dbg !1425
  %48 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1426
  %cdt_ms19 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %48, i32 0, i32 5, !dbg !1427
  %49 = load i32, i32* %cdt_ms19, align 4, !dbg !1427
  %50 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1428
  %state20 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %50, i32 0, i32 1, !dbg !1429
  %arrayidx21 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state20, i64 0, i64 0, !dbg !1428
  %sustain_reset = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx21, i32 0, i32 5, !dbg !1430
  %51 = load i32, i32* %sustain_reset, align 8, !dbg !1430
  call void (i8*, i32, i8*, ...) @av_log(i8* %47, i32 40, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.20, i32 0, i32 0), i32 %49, i32 %51), !dbg !1431
  %52 = load %struct.AVFilterLink*, %struct.AVFilterLink** %inlink.addr, align 8, !dbg !1432
  %channels = getelementptr inbounds %struct.AVFilterLink, %struct.AVFilterLink* %52, i32 0, i32 29, !dbg !1434
  %53 = load i32, i32* %channels, align 4, !dbg !1434
  %cmp22 = icmp ne i32 %53, 2, !dbg !1435
  br i1 %cmp22, label %land.lhs.true23, label %if.end28, !dbg !1436

land.lhs.true23:                                  ; preds = %for.end
  %54 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1437
  %process_stereo = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %54, i32 0, i32 2, !dbg !1439
  %55 = load i32, i32* %process_stereo, align 8, !dbg !1439
  %tobool24 = icmp ne i32 %55, 0, !dbg !1437
  br i1 %tobool24, label %if.then25, label %if.end28, !dbg !1440

if.then25:                                        ; preds = %land.lhs.true23
  %56 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx, align 8, !dbg !1441
  %57 = bitcast %struct.AVFilterContext* %56 to i8*, !dbg !1441
  %58 = load %struct.AVFilterLink*, %struct.AVFilterLink** %inlink.addr, align 8, !dbg !1443
  %channels26 = getelementptr inbounds %struct.AVFilterLink, %struct.AVFilterLink* %58, i32 0, i32 29, !dbg !1444
  %59 = load i32, i32* %channels26, align 4, !dbg !1444
  call void (i8*, i32, i8*, ...) @av_log(i8* %57, i32 24, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.21, i32 0, i32 0), i32 %59), !dbg !1445
  %60 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1446
  %process_stereo27 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %60, i32 0, i32 2, !dbg !1447
  store i32 0, i32* %process_stereo27, align 8, !dbg !1448
  br label %if.end28, !dbg !1449

if.end28:                                         ; preds = %if.then25, %land.lhs.true23, %for.end
  %61 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx, align 8, !dbg !1450
  %62 = bitcast %struct.AVFilterContext* %61 to i8*, !dbg !1450
  %63 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1451
  %process_stereo29 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %63, i32 0, i32 2, !dbg !1452
  %64 = load i32, i32* %process_stereo29, align 8, !dbg !1452
  %tobool30 = icmp ne i32 %64, 0, !dbg !1453
  %cond31 = select i1 %tobool30, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.24, i32 0, i32 0), !dbg !1453
  call void (i8*, i32, i8*, ...) @av_log(i8* %62, i32 40, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.22, i32 0, i32 0), i8* %cond31), !dbg !1454
  %65 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx, align 8, !dbg !1455
  %66 = bitcast %struct.AVFilterContext* %65 to i8*, !dbg !1455
  %67 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1456
  %force_pe = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %67, i32 0, i32 3, !dbg !1457
  %68 = load i32, i32* %force_pe, align 4, !dbg !1457
  %tobool32 = icmp ne i32 %68, 0, !dbg !1458
  %cond33 = select i1 %tobool32, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i32 0, i32 0), !dbg !1458
  call void (i8*, i32, i8*, ...) @av_log(i8* %66, i32 40, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.25, i32 0, i32 0), i8* %cond33), !dbg !1459
  %69 = load %struct.AVFilterContext*, %struct.AVFilterContext** %ctx, align 8, !dbg !1460
  %70 = bitcast %struct.AVFilterContext* %69 to i8*, !dbg !1460
  %71 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1461
  %analyze_mode = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %71, i32 0, i32 4, !dbg !1462
  %72 = load i32, i32* %analyze_mode, align 8, !dbg !1462
  %73 = load %struct.HDCDContext*, %struct.HDCDContext** %s, align 8, !dbg !1463
  %analyze_mode34 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %73, i32 0, i32 4, !dbg !1464
  %74 = load i32, i32* %analyze_mode34, align 8, !dbg !1464
  %idxprom35 = sext i32 %74 to i64, !dbg !1465
  %arrayidx36 = getelementptr inbounds [5 x i8*], [5 x i8*]* @ana_mode_str, i64 0, i64 %idxprom35, !dbg !1465
  %75 = load i8*, i8** %arrayidx36, align 8, !dbg !1465
  call void (i8*, i32, i8*, ...) @av_log(i8* %70, i32 40, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.28, i32 0, i32 0), i32 %72, i8* %75), !dbg !1466
  ret i32 0, !dbg !1467
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

declare %struct.AVFrame* @ff_get_audio_buffer(%struct.AVFilterLink*, i32) #3

declare void @av_frame_free(%struct.AVFrame**) #3

declare i32 @av_frame_copy_props(%struct.AVFrame*, %struct.AVFrame*) #3

; Function Attrs: nounwind uwtable
define internal void @hdcd_detect_start(%struct.hdcd_detection_data* %detect) #1 !dbg !1468 {
entry:
  %detect.addr = alloca %struct.hdcd_detection_data*, align 8
  store %struct.hdcd_detection_data* %detect, %struct.hdcd_detection_data** %detect.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hdcd_detection_data** %detect.addr, metadata !1472, metadata !709), !dbg !1473
  %0 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1474
  %errors = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %0, i32 0, i32 3, !dbg !1475
  store i32 0, i32* %errors, align 4, !dbg !1476
  %1 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1477
  %total_packets = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %1, i32 0, i32 2, !dbg !1478
  store i32 0, i32* %total_packets, align 4, !dbg !1479
  %2 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1480
  %_active_count = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %2, i32 0, i32 8, !dbg !1481
  store i32 0, i32* %_active_count, align 4, !dbg !1482
  %3 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1483
  %cdt_expirations = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %3, i32 0, i32 7, !dbg !1484
  store i32 -1, i32* %cdt_expirations, align 4, !dbg !1485
  ret void, !dbg !1486
}

; Function Attrs: nounwind uwtable
define internal void @hdcd_process_stereo(%struct.HDCDContext* %ctx, i32* %samples, i32 %count) #1 !dbg !1487 {
entry:
  %ctx.addr = alloca %struct.HDCDContext*, align 8
  %samples.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %stride = alloca i32, align 4
  %samples_end = alloca i32*, align 8
  %gain = alloca [2 x i32], align 4
  %peak_extend = alloca [2 x i32], align 4
  %lead = alloca i32, align 4
  %ctlret = alloca i32, align 4
  %envelope_run = alloca i32, align 4
  %run = alloca i32, align 4
  store %struct.HDCDContext* %ctx, %struct.HDCDContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.HDCDContext** %ctx.addr, metadata !1490, metadata !709), !dbg !1491
  store i32* %samples, i32** %samples.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %samples.addr, metadata !1492, metadata !709), !dbg !1493
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !1494, metadata !709), !dbg !1495
  call void @llvm.dbg.declare(metadata i32* %stride, metadata !1496, metadata !709), !dbg !1497
  store i32 2, i32* %stride, align 4, !dbg !1497
  call void @llvm.dbg.declare(metadata i32** %samples_end, metadata !1498, metadata !709), !dbg !1499
  %0 = load i32*, i32** %samples.addr, align 8, !dbg !1500
  %1 = load i32, i32* %count.addr, align 4, !dbg !1501
  %mul = mul nsw i32 %1, 2, !dbg !1502
  %idx.ext = sext i32 %mul to i64, !dbg !1503
  %add.ptr = getelementptr inbounds i32, i32* %0, i64 %idx.ext, !dbg !1503
  store i32* %add.ptr, i32** %samples_end, align 8, !dbg !1499
  call void @llvm.dbg.declare(metadata [2 x i32]* %gain, metadata !1504, metadata !709), !dbg !1506
  %arrayinit.begin = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 0, !dbg !1507
  %2 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1508
  %state = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %2, i32 0, i32 1, !dbg !1509
  %arrayidx = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state, i64 0, i64 0, !dbg !1508
  %running_gain = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx, i32 0, i32 6, !dbg !1510
  %3 = load i32, i32* %running_gain, align 4, !dbg !1510
  store i32 %3, i32* %arrayinit.begin, align 4, !dbg !1507
  %arrayinit.element = getelementptr inbounds i32, i32* %arrayinit.begin, i64 1, !dbg !1507
  %4 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1511
  %state1 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %4, i32 0, i32 1, !dbg !1512
  %arrayidx2 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state1, i64 0, i64 1, !dbg !1511
  %running_gain3 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx2, i32 0, i32 6, !dbg !1513
  %5 = load i32, i32* %running_gain3, align 4, !dbg !1513
  store i32 %5, i32* %arrayinit.element, align 4, !dbg !1507
  call void @llvm.dbg.declare(metadata [2 x i32]* %peak_extend, metadata !1514, metadata !709), !dbg !1515
  call void @llvm.dbg.declare(metadata i32* %lead, metadata !1516, metadata !709), !dbg !1517
  store i32 0, i32* %lead, align 4, !dbg !1517
  call void @llvm.dbg.declare(metadata i32* %ctlret, metadata !1518, metadata !709), !dbg !1519
  %6 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1520
  %analyze_mode = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %6, i32 0, i32 4, !dbg !1522
  %7 = load i32, i32* %analyze_mode, align 8, !dbg !1522
  %tobool = icmp ne i32 %7, 0, !dbg !1520
  br i1 %tobool, label %if.then, label %if.end, !dbg !1523

if.then:                                          ; preds = %entry
  %8 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1524
  %state4 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %8, i32 0, i32 1, !dbg !1526
  %arrayidx5 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state4, i64 0, i64 0, !dbg !1524
  %9 = load i32*, i32** %samples.addr, align 8, !dbg !1527
  %10 = load i32, i32* %count.addr, align 4, !dbg !1528
  call void @hdcd_analyze_prepare(%struct.hdcd_state* %arrayidx5, i32* %9, i32 %10, i32 2), !dbg !1529
  %11 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1530
  %state6 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %11, i32 0, i32 1, !dbg !1531
  %arrayidx7 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state6, i64 0, i64 1, !dbg !1530
  %12 = load i32*, i32** %samples.addr, align 8, !dbg !1532
  %add.ptr8 = getelementptr inbounds i32, i32* %12, i64 1, !dbg !1533
  %13 = load i32, i32* %count.addr, align 4, !dbg !1534
  call void @hdcd_analyze_prepare(%struct.hdcd_state* %arrayidx7, i32* %add.ptr8, i32 %13, i32 2), !dbg !1535
  br label %if.end, !dbg !1536

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1537
  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %peak_extend, i64 0, i64 0, !dbg !1538
  %arrayidx10 = getelementptr inbounds [2 x i32], [2 x i32]* %peak_extend, i64 0, i64 1, !dbg !1539
  %call = call i32 @hdcd_control_stereo(%struct.HDCDContext* %14, i32* %arrayidx9, i32* %arrayidx10), !dbg !1540
  store i32 %call, i32* %ctlret, align 4, !dbg !1541
  br label %while.cond, !dbg !1542

while.cond:                                       ; preds = %if.end70, %if.end
  %15 = load i32, i32* %count.addr, align 4, !dbg !1543
  %16 = load i32, i32* %lead, align 4, !dbg !1545
  %cmp = icmp sgt i32 %15, %16, !dbg !1546
  br i1 %cmp, label %while.body, label %while.end, !dbg !1547

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %envelope_run, metadata !1548, metadata !709), !dbg !1550
  call void @llvm.dbg.declare(metadata i32* %run, metadata !1551, metadata !709), !dbg !1552
  br label %do.body, !dbg !1553, !llvm.loop !1554

do.body:                                          ; preds = %while.body
  %17 = load i32*, i32** %samples.addr, align 8, !dbg !1555
  %18 = load i32, i32* %lead, align 4, !dbg !1559
  %mul11 = mul nsw i32 %18, 2, !dbg !1560
  %idx.ext12 = sext i32 %mul11 to i64, !dbg !1561
  %add.ptr13 = getelementptr inbounds i32, i32* %17, i64 %idx.ext12, !dbg !1561
  %19 = load i32, i32* %count.addr, align 4, !dbg !1562
  %20 = load i32, i32* %lead, align 4, !dbg !1563
  %sub = sub nsw i32 %19, %20, !dbg !1564
  %mul14 = mul nsw i32 2, %sub, !dbg !1565
  %idx.ext15 = sext i32 %mul14 to i64, !dbg !1566
  %add.ptr16 = getelementptr inbounds i32, i32* %add.ptr13, i64 %idx.ext15, !dbg !1566
  %21 = load i32*, i32** %samples_end, align 8, !dbg !1567
  %cmp17 = icmp ule i32* %add.ptr16, %21, !dbg !1568
  br i1 %cmp17, label %if.end19, label %if.then18, !dbg !1569

if.then18:                                        ; preds = %do.body
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i32 0, i32 0), i32 1424), !dbg !1570
  call void @abort() #8, !dbg !1573
  unreachable, !dbg !1575

if.end19:                                         ; preds = %do.body
  br label %do.end, !dbg !1576

do.end:                                           ; preds = %if.end19
  %22 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1578
  %23 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1579
  %state20 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %23, i32 0, i32 1, !dbg !1580
  %arraydecay = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state20, i32 0, i32 0, !dbg !1579
  %24 = load i32*, i32** %samples.addr, align 8, !dbg !1581
  %25 = load i32, i32* %lead, align 4, !dbg !1582
  %mul21 = mul nsw i32 %25, 2, !dbg !1583
  %idx.ext22 = sext i32 %mul21 to i64, !dbg !1584
  %add.ptr23 = getelementptr inbounds i32, i32* %24, i64 %idx.ext22, !dbg !1584
  %26 = load i32, i32* %count.addr, align 4, !dbg !1585
  %27 = load i32, i32* %lead, align 4, !dbg !1586
  %sub24 = sub nsw i32 %26, %27, !dbg !1587
  %call25 = call i32 @hdcd_scan(%struct.HDCDContext* %22, %struct.hdcd_state* %arraydecay, i32 2, i32* %add.ptr23, i32 %sub24, i32 0), !dbg !1588
  %28 = load i32, i32* %lead, align 4, !dbg !1589
  %add = add nsw i32 %call25, %28, !dbg !1590
  store i32 %add, i32* %run, align 4, !dbg !1591
  %29 = load i32, i32* %run, align 4, !dbg !1592
  %sub26 = sub nsw i32 %29, 1, !dbg !1593
  store i32 %sub26, i32* %envelope_run, align 4, !dbg !1594
  br label %do.body27, !dbg !1595, !llvm.loop !1596

do.body27:                                        ; preds = %do.end
  %30 = load i32*, i32** %samples.addr, align 8, !dbg !1597
  %31 = load i32, i32* %envelope_run, align 4, !dbg !1601
  %mul28 = mul nsw i32 %31, 2, !dbg !1602
  %idx.ext29 = sext i32 %mul28 to i64, !dbg !1603
  %add.ptr30 = getelementptr inbounds i32, i32* %30, i64 %idx.ext29, !dbg !1603
  %32 = load i32*, i32** %samples_end, align 8, !dbg !1604
  %cmp31 = icmp ule i32* %add.ptr30, %32, !dbg !1605
  br i1 %cmp31, label %if.end33, label %if.then32, !dbg !1606

if.then32:                                        ; preds = %do.body27
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i32 0, i32 0), i32 1428), !dbg !1607
  call void @abort() #8, !dbg !1610
  unreachable, !dbg !1612

if.end33:                                         ; preds = %do.body27
  br label %do.end34, !dbg !1613

do.end34:                                         ; preds = %if.end33
  %33 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1615
  %analyze_mode35 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %33, i32 0, i32 4, !dbg !1617
  %34 = load i32, i32* %analyze_mode35, align 8, !dbg !1617
  %tobool36 = icmp ne i32 %34, 0, !dbg !1615
  br i1 %tobool36, label %if.then37, label %if.else, !dbg !1618

if.then37:                                        ; preds = %do.end34
  %35 = load i32*, i32** %samples.addr, align 8, !dbg !1619
  %36 = load i32, i32* %envelope_run, align 4, !dbg !1621
  %arrayidx38 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 0, !dbg !1622
  %37 = load i32, i32* %arrayidx38, align 4, !dbg !1622
  %38 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1623
  %val_target_gain = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %38, i32 0, i32 11, !dbg !1624
  %39 = load i32, i32* %val_target_gain, align 4, !dbg !1624
  %arrayidx39 = getelementptr inbounds [2 x i32], [2 x i32]* %peak_extend, i64 0, i64 0, !dbg !1625
  %40 = load i32, i32* %arrayidx39, align 4, !dbg !1625
  %41 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1626
  %analyze_mode40 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %41, i32 0, i32 4, !dbg !1627
  %42 = load i32, i32* %analyze_mode40, align 8, !dbg !1627
  %43 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1628
  %state41 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %43, i32 0, i32 1, !dbg !1629
  %arrayidx42 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state41, i64 0, i64 0, !dbg !1628
  %sustain = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx42, i32 0, i32 4, !dbg !1630
  %44 = load i32, i32* %sustain, align 4, !dbg !1630
  %45 = load i32, i32* %ctlret, align 4, !dbg !1631
  %cmp43 = icmp eq i32 %45, 1, !dbg !1632
  %conv = zext i1 %cmp43 to i32, !dbg !1632
  %call44 = call i32 @hdcd_analyze(i32* %35, i32 %36, i32 2, i32 %37, i32 %39, i32 %40, i32 %42, i32 %44, i32 %conv), !dbg !1633
  %arrayidx45 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 0, !dbg !1634
  store i32 %call44, i32* %arrayidx45, align 4, !dbg !1635
  %46 = load i32*, i32** %samples.addr, align 8, !dbg !1636
  %add.ptr46 = getelementptr inbounds i32, i32* %46, i64 1, !dbg !1637
  %47 = load i32, i32* %envelope_run, align 4, !dbg !1638
  %arrayidx47 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 1, !dbg !1639
  %48 = load i32, i32* %arrayidx47, align 4, !dbg !1639
  %49 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1640
  %val_target_gain48 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %49, i32 0, i32 11, !dbg !1641
  %50 = load i32, i32* %val_target_gain48, align 4, !dbg !1641
  %arrayidx49 = getelementptr inbounds [2 x i32], [2 x i32]* %peak_extend, i64 0, i64 1, !dbg !1642
  %51 = load i32, i32* %arrayidx49, align 4, !dbg !1642
  %52 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1643
  %analyze_mode50 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %52, i32 0, i32 4, !dbg !1644
  %53 = load i32, i32* %analyze_mode50, align 8, !dbg !1644
  %54 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1645
  %state51 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %54, i32 0, i32 1, !dbg !1646
  %arrayidx52 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state51, i64 0, i64 1, !dbg !1645
  %sustain53 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx52, i32 0, i32 4, !dbg !1647
  %55 = load i32, i32* %sustain53, align 4, !dbg !1647
  %56 = load i32, i32* %ctlret, align 4, !dbg !1648
  %cmp54 = icmp eq i32 %56, 1, !dbg !1649
  %conv55 = zext i1 %cmp54 to i32, !dbg !1649
  %call56 = call i32 @hdcd_analyze(i32* %add.ptr46, i32 %47, i32 2, i32 %48, i32 %50, i32 %51, i32 %53, i32 %55, i32 %conv55), !dbg !1650
  %arrayidx57 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 1, !dbg !1651
  store i32 %call56, i32* %arrayidx57, align 4, !dbg !1652
  br label %if.end70, !dbg !1653

if.else:                                          ; preds = %do.end34
  %57 = load i32*, i32** %samples.addr, align 8, !dbg !1654
  %58 = load i32, i32* %envelope_run, align 4, !dbg !1656
  %59 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1657
  %bits_per_sample = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %59, i32 0, i32 7, !dbg !1658
  %60 = load i32, i32* %bits_per_sample, align 4, !dbg !1658
  %arrayidx58 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 0, !dbg !1659
  %61 = load i32, i32* %arrayidx58, align 4, !dbg !1659
  %62 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1660
  %val_target_gain59 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %62, i32 0, i32 11, !dbg !1661
  %63 = load i32, i32* %val_target_gain59, align 4, !dbg !1661
  %arrayidx60 = getelementptr inbounds [2 x i32], [2 x i32]* %peak_extend, i64 0, i64 0, !dbg !1662
  %64 = load i32, i32* %arrayidx60, align 4, !dbg !1662
  %call61 = call i32 @hdcd_envelope(i32* %57, i32 %58, i32 2, i32 %60, i32 %61, i32 %63, i32 %64), !dbg !1663
  %arrayidx62 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 0, !dbg !1664
  store i32 %call61, i32* %arrayidx62, align 4, !dbg !1665
  %65 = load i32*, i32** %samples.addr, align 8, !dbg !1666
  %add.ptr63 = getelementptr inbounds i32, i32* %65, i64 1, !dbg !1667
  %66 = load i32, i32* %envelope_run, align 4, !dbg !1668
  %67 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1669
  %bits_per_sample64 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %67, i32 0, i32 7, !dbg !1670
  %68 = load i32, i32* %bits_per_sample64, align 4, !dbg !1670
  %arrayidx65 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 1, !dbg !1671
  %69 = load i32, i32* %arrayidx65, align 4, !dbg !1671
  %70 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1672
  %val_target_gain66 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %70, i32 0, i32 11, !dbg !1673
  %71 = load i32, i32* %val_target_gain66, align 4, !dbg !1673
  %arrayidx67 = getelementptr inbounds [2 x i32], [2 x i32]* %peak_extend, i64 0, i64 1, !dbg !1674
  %72 = load i32, i32* %arrayidx67, align 4, !dbg !1674
  %call68 = call i32 @hdcd_envelope(i32* %add.ptr63, i32 %66, i32 2, i32 %68, i32 %69, i32 %71, i32 %72), !dbg !1675
  %arrayidx69 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 1, !dbg !1676
  store i32 %call68, i32* %arrayidx69, align 4, !dbg !1677
  br label %if.end70

if.end70:                                         ; preds = %if.else, %if.then37
  %73 = load i32, i32* %envelope_run, align 4, !dbg !1678
  %mul71 = mul nsw i32 %73, 2, !dbg !1679
  %74 = load i32*, i32** %samples.addr, align 8, !dbg !1680
  %idx.ext72 = sext i32 %mul71 to i64, !dbg !1680
  %add.ptr73 = getelementptr inbounds i32, i32* %74, i64 %idx.ext72, !dbg !1680
  store i32* %add.ptr73, i32** %samples.addr, align 8, !dbg !1680
  %75 = load i32, i32* %envelope_run, align 4, !dbg !1681
  %76 = load i32, i32* %count.addr, align 4, !dbg !1682
  %sub74 = sub nsw i32 %76, %75, !dbg !1682
  store i32 %sub74, i32* %count.addr, align 4, !dbg !1682
  %77 = load i32, i32* %run, align 4, !dbg !1683
  %78 = load i32, i32* %envelope_run, align 4, !dbg !1684
  %sub75 = sub nsw i32 %77, %78, !dbg !1685
  store i32 %sub75, i32* %lead, align 4, !dbg !1686
  %79 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1687
  %arrayidx76 = getelementptr inbounds [2 x i32], [2 x i32]* %peak_extend, i64 0, i64 0, !dbg !1688
  %arrayidx77 = getelementptr inbounds [2 x i32], [2 x i32]* %peak_extend, i64 0, i64 1, !dbg !1689
  %call78 = call i32 @hdcd_control_stereo(%struct.HDCDContext* %79, i32* %arrayidx76, i32* %arrayidx77), !dbg !1690
  store i32 %call78, i32* %ctlret, align 4, !dbg !1691
  br label %while.cond, !dbg !1692, !llvm.loop !1694

while.end:                                        ; preds = %while.cond
  %80 = load i32, i32* %lead, align 4, !dbg !1695
  %cmp79 = icmp sgt i32 %80, 0, !dbg !1697
  br i1 %cmp79, label %if.then81, label %if.end132, !dbg !1698

if.then81:                                        ; preds = %while.end
  br label %do.body82, !dbg !1699, !llvm.loop !1701

do.body82:                                        ; preds = %if.then81
  %81 = load i32*, i32** %samples.addr, align 8, !dbg !1702
  %82 = load i32, i32* %lead, align 4, !dbg !1706
  %mul83 = mul nsw i32 %82, 2, !dbg !1707
  %idx.ext84 = sext i32 %mul83 to i64, !dbg !1708
  %add.ptr85 = getelementptr inbounds i32, i32* %81, i64 %idx.ext84, !dbg !1708
  %83 = load i32*, i32** %samples_end, align 8, !dbg !1709
  %cmp86 = icmp ule i32* %add.ptr85, %83, !dbg !1710
  br i1 %cmp86, label %if.end89, label %if.then88, !dbg !1711

if.then88:                                        ; preds = %do.body82
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i32 0, i32 0), i32 1451), !dbg !1712
  call void @abort() #8, !dbg !1715
  unreachable, !dbg !1717

if.end89:                                         ; preds = %do.body82
  br label %do.end90, !dbg !1718

do.end90:                                         ; preds = %if.end89
  %84 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1720
  %analyze_mode91 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %84, i32 0, i32 4, !dbg !1722
  %85 = load i32, i32* %analyze_mode91, align 8, !dbg !1722
  %tobool92 = icmp ne i32 %85, 0, !dbg !1720
  br i1 %tobool92, label %if.then93, label %if.else117, !dbg !1723

if.then93:                                        ; preds = %do.end90
  %86 = load i32*, i32** %samples.addr, align 8, !dbg !1724
  %87 = load i32, i32* %lead, align 4, !dbg !1726
  %arrayidx94 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 0, !dbg !1727
  %88 = load i32, i32* %arrayidx94, align 4, !dbg !1727
  %89 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1728
  %val_target_gain95 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %89, i32 0, i32 11, !dbg !1729
  %90 = load i32, i32* %val_target_gain95, align 4, !dbg !1729
  %arrayidx96 = getelementptr inbounds [2 x i32], [2 x i32]* %peak_extend, i64 0, i64 0, !dbg !1730
  %91 = load i32, i32* %arrayidx96, align 4, !dbg !1730
  %92 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1731
  %analyze_mode97 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %92, i32 0, i32 4, !dbg !1732
  %93 = load i32, i32* %analyze_mode97, align 8, !dbg !1732
  %94 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1733
  %state98 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %94, i32 0, i32 1, !dbg !1734
  %arrayidx99 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state98, i64 0, i64 0, !dbg !1733
  %sustain100 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx99, i32 0, i32 4, !dbg !1735
  %95 = load i32, i32* %sustain100, align 4, !dbg !1735
  %96 = load i32, i32* %ctlret, align 4, !dbg !1736
  %cmp101 = icmp eq i32 %96, 1, !dbg !1737
  %conv102 = zext i1 %cmp101 to i32, !dbg !1737
  %call103 = call i32 @hdcd_analyze(i32* %86, i32 %87, i32 2, i32 %88, i32 %90, i32 %91, i32 %93, i32 %95, i32 %conv102), !dbg !1738
  %arrayidx104 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 0, !dbg !1739
  store i32 %call103, i32* %arrayidx104, align 4, !dbg !1740
  %97 = load i32*, i32** %samples.addr, align 8, !dbg !1741
  %add.ptr105 = getelementptr inbounds i32, i32* %97, i64 1, !dbg !1742
  %98 = load i32, i32* %lead, align 4, !dbg !1743
  %arrayidx106 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 1, !dbg !1744
  %99 = load i32, i32* %arrayidx106, align 4, !dbg !1744
  %100 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1745
  %val_target_gain107 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %100, i32 0, i32 11, !dbg !1746
  %101 = load i32, i32* %val_target_gain107, align 4, !dbg !1746
  %arrayidx108 = getelementptr inbounds [2 x i32], [2 x i32]* %peak_extend, i64 0, i64 1, !dbg !1747
  %102 = load i32, i32* %arrayidx108, align 4, !dbg !1747
  %103 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1748
  %analyze_mode109 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %103, i32 0, i32 4, !dbg !1749
  %104 = load i32, i32* %analyze_mode109, align 8, !dbg !1749
  %105 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1750
  %state110 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %105, i32 0, i32 1, !dbg !1751
  %arrayidx111 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state110, i64 0, i64 1, !dbg !1750
  %sustain112 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx111, i32 0, i32 4, !dbg !1752
  %106 = load i32, i32* %sustain112, align 4, !dbg !1752
  %107 = load i32, i32* %ctlret, align 4, !dbg !1753
  %cmp113 = icmp eq i32 %107, 1, !dbg !1754
  %conv114 = zext i1 %cmp113 to i32, !dbg !1754
  %call115 = call i32 @hdcd_analyze(i32* %add.ptr105, i32 %98, i32 2, i32 %99, i32 %101, i32 %102, i32 %104, i32 %106, i32 %conv114), !dbg !1755
  %arrayidx116 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 1, !dbg !1756
  store i32 %call115, i32* %arrayidx116, align 4, !dbg !1757
  br label %if.end131, !dbg !1758

if.else117:                                       ; preds = %do.end90
  %108 = load i32*, i32** %samples.addr, align 8, !dbg !1759
  %109 = load i32, i32* %lead, align 4, !dbg !1761
  %110 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1762
  %bits_per_sample118 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %110, i32 0, i32 7, !dbg !1763
  %111 = load i32, i32* %bits_per_sample118, align 4, !dbg !1763
  %arrayidx119 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 0, !dbg !1764
  %112 = load i32, i32* %arrayidx119, align 4, !dbg !1764
  %113 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1765
  %val_target_gain120 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %113, i32 0, i32 11, !dbg !1766
  %114 = load i32, i32* %val_target_gain120, align 4, !dbg !1766
  %arrayidx121 = getelementptr inbounds [2 x i32], [2 x i32]* %peak_extend, i64 0, i64 0, !dbg !1767
  %115 = load i32, i32* %arrayidx121, align 4, !dbg !1767
  %call122 = call i32 @hdcd_envelope(i32* %108, i32 %109, i32 2, i32 %111, i32 %112, i32 %114, i32 %115), !dbg !1768
  %arrayidx123 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 0, !dbg !1769
  store i32 %call122, i32* %arrayidx123, align 4, !dbg !1770
  %116 = load i32*, i32** %samples.addr, align 8, !dbg !1771
  %add.ptr124 = getelementptr inbounds i32, i32* %116, i64 1, !dbg !1772
  %117 = load i32, i32* %lead, align 4, !dbg !1773
  %118 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1774
  %bits_per_sample125 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %118, i32 0, i32 7, !dbg !1775
  %119 = load i32, i32* %bits_per_sample125, align 4, !dbg !1775
  %arrayidx126 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 1, !dbg !1776
  %120 = load i32, i32* %arrayidx126, align 4, !dbg !1776
  %121 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1777
  %val_target_gain127 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %121, i32 0, i32 11, !dbg !1778
  %122 = load i32, i32* %val_target_gain127, align 4, !dbg !1778
  %arrayidx128 = getelementptr inbounds [2 x i32], [2 x i32]* %peak_extend, i64 0, i64 1, !dbg !1779
  %123 = load i32, i32* %arrayidx128, align 4, !dbg !1779
  %call129 = call i32 @hdcd_envelope(i32* %add.ptr124, i32 %117, i32 2, i32 %119, i32 %120, i32 %122, i32 %123), !dbg !1780
  %arrayidx130 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 1, !dbg !1781
  store i32 %call129, i32* %arrayidx130, align 4, !dbg !1782
  br label %if.end131

if.end131:                                        ; preds = %if.else117, %if.then93
  br label %if.end132, !dbg !1783

if.end132:                                        ; preds = %if.end131, %while.end
  %arrayidx133 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 0, !dbg !1784
  %124 = load i32, i32* %arrayidx133, align 4, !dbg !1784
  %125 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1785
  %state134 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %125, i32 0, i32 1, !dbg !1786
  %arrayidx135 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state134, i64 0, i64 0, !dbg !1785
  %running_gain136 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx135, i32 0, i32 6, !dbg !1787
  store i32 %124, i32* %running_gain136, align 4, !dbg !1788
  %arrayidx137 = getelementptr inbounds [2 x i32], [2 x i32]* %gain, i64 0, i64 1, !dbg !1789
  %126 = load i32, i32* %arrayidx137, align 4, !dbg !1789
  %127 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !1790
  %state138 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %127, i32 0, i32 1, !dbg !1791
  %arrayidx139 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state138, i64 0, i64 1, !dbg !1790
  %running_gain140 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx139, i32 0, i32 6, !dbg !1792
  store i32 %126, i32* %running_gain140, align 4, !dbg !1793
  ret void, !dbg !1794
}

; Function Attrs: nounwind uwtable
define internal void @hdcd_detect_onech(%struct.hdcd_state* %state, %struct.hdcd_detection_data* %detect) #1 !dbg !1795 {
entry:
  %state.addr = alloca %struct.hdcd_state*, align 8
  %detect.addr = alloca %struct.hdcd_detection_data*, align 8
  %pe = alloca i32, align 4
  store %struct.hdcd_state* %state, %struct.hdcd_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hdcd_state** %state.addr, metadata !1798, metadata !709), !dbg !1799
  store %struct.hdcd_detection_data* %detect, %struct.hdcd_detection_data** %detect.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hdcd_detection_data** %detect.addr, metadata !1800, metadata !709), !dbg !1801
  call void @llvm.dbg.declare(metadata i32* %pe, metadata !1802, metadata !709), !dbg !1803
  store i32 0, i32* %pe, align 4, !dbg !1803
  %0 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1804
  %count_transient_filter = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %0, i32 0, i32 14, !dbg !1805
  %1 = load i32, i32* %count_transient_filter, align 4, !dbg !1805
  %tobool = icmp ne i32 %1, 0, !dbg !1806
  %lnot = xor i1 %tobool, true, !dbg !1806
  %lnot1 = xor i1 %lnot, true, !dbg !1807
  %lnot.ext = zext i1 %lnot1 to i32, !dbg !1807
  %2 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1808
  %uses_transient_filter = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %2, i32 0, i32 5, !dbg !1809
  %3 = load i32, i32* %uses_transient_filter, align 4, !dbg !1810
  %or = or i32 %3, %lnot.ext, !dbg !1810
  store i32 %or, i32* %uses_transient_filter, align 4, !dbg !1810
  %4 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1811
  %code_counterA = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %4, i32 0, i32 7, !dbg !1812
  %5 = load i32, i32* %code_counterA, align 8, !dbg !1812
  %6 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1813
  %code_counterB = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %6, i32 0, i32 9, !dbg !1814
  %7 = load i32, i32* %code_counterB, align 8, !dbg !1814
  %add = add nsw i32 %5, %7, !dbg !1815
  %8 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1816
  %total_packets = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %8, i32 0, i32 2, !dbg !1817
  %9 = load i32, i32* %total_packets, align 4, !dbg !1818
  %add2 = add nsw i32 %9, %add, !dbg !1818
  store i32 %add2, i32* %total_packets, align 4, !dbg !1818
  %10 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1819
  %code_counterA3 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %10, i32 0, i32 7, !dbg !1821
  %11 = load i32, i32* %code_counterA3, align 8, !dbg !1821
  %tobool4 = icmp ne i32 %11, 0, !dbg !1819
  br i1 %tobool4, label %if.then, label %if.end, !dbg !1822

if.then:                                          ; preds = %entry
  %12 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1823
  %packet_type = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %12, i32 0, i32 1, !dbg !1825
  %13 = load i32, i32* %packet_type, align 4, !dbg !1826
  %or5 = or i32 %13, 1, !dbg !1826
  store i32 %or5, i32* %packet_type, align 4, !dbg !1826
  br label %if.end, !dbg !1823

if.end:                                           ; preds = %if.then, %entry
  %14 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1827
  %code_counterB6 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %14, i32 0, i32 9, !dbg !1829
  %15 = load i32, i32* %code_counterB6, align 8, !dbg !1829
  %tobool7 = icmp ne i32 %15, 0, !dbg !1827
  br i1 %tobool7, label %if.then8, label %if.end11, !dbg !1830

if.then8:                                         ; preds = %if.end
  %16 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1831
  %packet_type9 = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %16, i32 0, i32 1, !dbg !1833
  %17 = load i32, i32* %packet_type9, align 4, !dbg !1834
  %or10 = or i32 %17, 2, !dbg !1834
  store i32 %or10, i32* %packet_type9, align 4, !dbg !1834
  br label %if.end11, !dbg !1831

if.end11:                                         ; preds = %if.then8, %if.end
  %18 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1835
  %count_peak_extend = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %18, i32 0, i32 13, !dbg !1837
  %19 = load i32, i32* %count_peak_extend, align 8, !dbg !1837
  %tobool12 = icmp ne i32 %19, 0, !dbg !1835
  br i1 %tobool12, label %if.then13, label %if.end24, !dbg !1838

if.then13:                                        ; preds = %if.end11
  %20 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1839
  %count_peak_extend14 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %20, i32 0, i32 13, !dbg !1842
  %21 = load i32, i32* %count_peak_extend14, align 8, !dbg !1842
  %22 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1843
  %code_counterA15 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %22, i32 0, i32 7, !dbg !1844
  %23 = load i32, i32* %code_counterA15, align 8, !dbg !1844
  %24 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1845
  %code_counterB16 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %24, i32 0, i32 9, !dbg !1846
  %25 = load i32, i32* %code_counterB16, align 8, !dbg !1846
  %add17 = add nsw i32 %23, %25, !dbg !1847
  %cmp = icmp eq i32 %21, %add17, !dbg !1848
  br i1 %cmp, label %if.then18, label %if.else, !dbg !1849

if.then18:                                        ; preds = %if.then13
  store i32 2, i32* %pe, align 4, !dbg !1850
  br label %if.end19, !dbg !1851

if.else:                                          ; preds = %if.then13
  store i32 1, i32* %pe, align 4, !dbg !1852
  br label %if.end19

if.end19:                                         ; preds = %if.else, %if.then18
  %26 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1853
  %peak_extend = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %26, i32 0, i32 4, !dbg !1855
  %27 = load i32, i32* %peak_extend, align 4, !dbg !1855
  %cmp20 = icmp ne i32 %27, 1, !dbg !1856
  br i1 %cmp20, label %if.then21, label %if.end23, !dbg !1857

if.then21:                                        ; preds = %if.end19
  %28 = load i32, i32* %pe, align 4, !dbg !1858
  %29 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1859
  %peak_extend22 = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %29, i32 0, i32 4, !dbg !1860
  store i32 %28, i32* %peak_extend22, align 4, !dbg !1861
  br label %if.end23, !dbg !1859

if.end23:                                         ; preds = %if.then21, %if.end19
  br label %if.end24, !dbg !1862

if.end24:                                         ; preds = %if.end23, %if.end11
  %30 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1863
  %max_gain_adjustment = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %30, i32 0, i32 6, !dbg !1864
  %31 = load float, float* %max_gain_adjustment, align 4, !dbg !1864
  %conv = fpext float %31 to double, !dbg !1865
  %32 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1866
  %max_gain = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %32, i32 0, i32 16, !dbg !1867
  %33 = load i32, i32* %max_gain, align 8, !dbg !1867
  %tobool25 = icmp ne i32 %33, 0, !dbg !1868
  br i1 %tobool25, label %cond.true, label %cond.false, !dbg !1868

cond.true:                                        ; preds = %if.end24
  %34 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1869
  %max_gain26 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %34, i32 0, i32 16, !dbg !1871
  %35 = load i32, i32* %max_gain26, align 8, !dbg !1871
  %shr = ashr i32 %35, 1, !dbg !1872
  %conv27 = sitofp i32 %shr to float, !dbg !1873
  %sub = fsub float -0.000000e+00, %conv27, !dbg !1874
  %conv28 = fpext float %sub to double, !dbg !1874
  %36 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1875
  %max_gain29 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %36, i32 0, i32 16, !dbg !1876
  %37 = load i32, i32* %max_gain29, align 8, !dbg !1876
  %and = and i32 %37, 1, !dbg !1877
  %tobool30 = icmp ne i32 %and, 0, !dbg !1878
  %cond = select i1 %tobool30, double 5.000000e-01, double 0.000000e+00, !dbg !1878
  %sub31 = fsub double %conv28, %cond, !dbg !1879
  br label %cond.end, !dbg !1880

cond.false:                                       ; preds = %if.end24
  br label %cond.end, !dbg !1881

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond32 = phi double [ %sub31, %cond.true ], [ 0.000000e+00, %cond.false ], !dbg !1883
  %cmp33 = fcmp ogt double %conv, %cond32, !dbg !1885
  br i1 %cmp33, label %cond.true35, label %cond.false52, !dbg !1886

cond.true35:                                      ; preds = %cond.end
  %38 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1887
  %max_gain36 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %38, i32 0, i32 16, !dbg !1889
  %39 = load i32, i32* %max_gain36, align 8, !dbg !1889
  %tobool37 = icmp ne i32 %39, 0, !dbg !1890
  br i1 %tobool37, label %cond.true38, label %cond.false49, !dbg !1890

cond.true38:                                      ; preds = %cond.true35
  %40 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1891
  %max_gain39 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %40, i32 0, i32 16, !dbg !1893
  %41 = load i32, i32* %max_gain39, align 8, !dbg !1893
  %shr40 = ashr i32 %41, 1, !dbg !1894
  %conv41 = sitofp i32 %shr40 to float, !dbg !1895
  %sub42 = fsub float -0.000000e+00, %conv41, !dbg !1896
  %conv43 = fpext float %sub42 to double, !dbg !1896
  %42 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1897
  %max_gain44 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %42, i32 0, i32 16, !dbg !1898
  %43 = load i32, i32* %max_gain44, align 8, !dbg !1898
  %and45 = and i32 %43, 1, !dbg !1899
  %tobool46 = icmp ne i32 %and45, 0, !dbg !1900
  %cond47 = select i1 %tobool46, double 5.000000e-01, double 0.000000e+00, !dbg !1900
  %sub48 = fsub double %conv43, %cond47, !dbg !1901
  br label %cond.end50, !dbg !1902

cond.false49:                                     ; preds = %cond.true35
  br label %cond.end50, !dbg !1903

cond.end50:                                       ; preds = %cond.false49, %cond.true38
  %cond51 = phi double [ %sub48, %cond.true38 ], [ 0.000000e+00, %cond.false49 ], !dbg !1905
  br label %cond.end55, !dbg !1907

cond.false52:                                     ; preds = %cond.end
  %44 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1908
  %max_gain_adjustment53 = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %44, i32 0, i32 6, !dbg !1910
  %45 = load float, float* %max_gain_adjustment53, align 4, !dbg !1910
  %conv54 = fpext float %45 to double, !dbg !1911
  br label %cond.end55, !dbg !1912

cond.end55:                                       ; preds = %cond.false52, %cond.end50
  %cond56 = phi double [ %cond51, %cond.end50 ], [ %conv54, %cond.false52 ], !dbg !1913
  %conv57 = fptrunc double %cond56 to float, !dbg !1915
  %46 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1916
  %max_gain_adjustment58 = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %46, i32 0, i32 6, !dbg !1917
  store float %conv57, float* %max_gain_adjustment58, align 4, !dbg !1918
  %47 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1919
  %code_counterA_almost = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %47, i32 0, i32 8, !dbg !1920
  %48 = load i32, i32* %code_counterA_almost, align 4, !dbg !1920
  %49 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1921
  %code_counterB_checkfails = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %49, i32 0, i32 10, !dbg !1922
  %50 = load i32, i32* %code_counterB_checkfails, align 4, !dbg !1922
  %add59 = add nsw i32 %48, %50, !dbg !1923
  %51 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1924
  %code_counterC_unmatched = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %51, i32 0, i32 12, !dbg !1925
  %52 = load i32, i32* %code_counterC_unmatched, align 4, !dbg !1925
  %add60 = add nsw i32 %add59, %52, !dbg !1926
  %53 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1927
  %errors = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %53, i32 0, i32 3, !dbg !1928
  %54 = load i32, i32* %errors, align 4, !dbg !1929
  %add61 = add nsw i32 %54, %add60, !dbg !1929
  store i32 %add61, i32* %errors, align 4, !dbg !1929
  %55 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1930
  %sustain = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %55, i32 0, i32 4, !dbg !1932
  %56 = load i32, i32* %sustain, align 4, !dbg !1932
  %tobool62 = icmp ne i32 %56, 0, !dbg !1930
  br i1 %tobool62, label %if.then63, label %if.end64, !dbg !1933

if.then63:                                        ; preds = %cond.end55
  %57 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1934
  %_active_count = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %57, i32 0, i32 8, !dbg !1936
  %58 = load i32, i32* %_active_count, align 4, !dbg !1937
  %inc = add nsw i32 %58, 1, !dbg !1937
  store i32 %inc, i32* %_active_count, align 4, !dbg !1937
  br label %if.end64, !dbg !1934

if.end64:                                         ; preds = %if.then63, %cond.end55
  %59 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1938
  %count_sustain_expired = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %59, i32 0, i32 17, !dbg !1940
  %60 = load i32, i32* %count_sustain_expired, align 4, !dbg !1940
  %cmp65 = icmp sge i32 %60, 0, !dbg !1941
  br i1 %cmp65, label %if.then67, label %if.end76, !dbg !1942

if.then67:                                        ; preds = %if.end64
  %61 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1943
  %cdt_expirations = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %61, i32 0, i32 7, !dbg !1946
  %62 = load i32, i32* %cdt_expirations, align 4, !dbg !1946
  %cmp68 = icmp eq i32 %62, -1, !dbg !1947
  br i1 %cmp68, label %if.then70, label %if.end72, !dbg !1948

if.then70:                                        ; preds = %if.then67
  %63 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1949
  %cdt_expirations71 = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %63, i32 0, i32 7, !dbg !1951
  store i32 0, i32* %cdt_expirations71, align 4, !dbg !1952
  br label %if.end72, !dbg !1949

if.end72:                                         ; preds = %if.then70, %if.then67
  %64 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !1953
  %count_sustain_expired73 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %64, i32 0, i32 17, !dbg !1954
  %65 = load i32, i32* %count_sustain_expired73, align 4, !dbg !1954
  %66 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1955
  %cdt_expirations74 = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %66, i32 0, i32 7, !dbg !1956
  %67 = load i32, i32* %cdt_expirations74, align 4, !dbg !1957
  %add75 = add nsw i32 %67, %65, !dbg !1957
  store i32 %add75, i32* %cdt_expirations74, align 4, !dbg !1957
  br label %if.end76, !dbg !1958

if.end76:                                         ; preds = %if.end72, %if.end64
  ret void, !dbg !1959
}

; Function Attrs: nounwind uwtable
define internal void @hdcd_detect_end(%struct.hdcd_detection_data* %detect, i32 %channels) #1 !dbg !1960 {
entry:
  %detect.addr = alloca %struct.hdcd_detection_data*, align 8
  %channels.addr = alloca i32, align 4
  store %struct.hdcd_detection_data* %detect, %struct.hdcd_detection_data** %detect.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hdcd_detection_data** %detect.addr, metadata !1963, metadata !709), !dbg !1964
  store i32 %channels, i32* %channels.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %channels.addr, metadata !1965, metadata !709), !dbg !1966
  %0 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1967
  %_active_count = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %0, i32 0, i32 8, !dbg !1969
  %1 = load i32, i32* %_active_count, align 4, !dbg !1969
  %2 = load i32, i32* %channels.addr, align 4, !dbg !1970
  %cmp = icmp eq i32 %1, %2, !dbg !1971
  br i1 %cmp, label %if.then, label %if.end4, !dbg !1972

if.then:                                          ; preds = %entry
  %3 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1973
  %max_gain_adjustment = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %3, i32 0, i32 6, !dbg !1976
  %4 = load float, float* %max_gain_adjustment, align 4, !dbg !1976
  %tobool = fcmp une float %4, 0.000000e+00, !dbg !1973
  br i1 %tobool, label %if.then2, label %lor.lhs.false, !dbg !1977

lor.lhs.false:                                    ; preds = %if.then
  %5 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1978
  %peak_extend = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %5, i32 0, i32 4, !dbg !1980
  %6 = load i32, i32* %peak_extend, align 4, !dbg !1980
  %tobool1 = icmp ne i32 %6, 0, !dbg !1978
  br i1 %tobool1, label %if.then2, label %if.else, !dbg !1981

if.then2:                                         ; preds = %lor.lhs.false, %if.then
  %7 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1982
  %hdcd_detected = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %7, i32 0, i32 0, !dbg !1983
  store i32 2, i32* %hdcd_detected, align 4, !dbg !1984
  br label %if.end, !dbg !1982

if.else:                                          ; preds = %lor.lhs.false
  %8 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !1985
  %hdcd_detected3 = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %8, i32 0, i32 0, !dbg !1986
  store i32 1, i32* %hdcd_detected3, align 4, !dbg !1987
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end4, !dbg !1988

if.end4:                                          ; preds = %if.end, %entry
  ret void, !dbg !1989
}

; Function Attrs: nounwind uwtable
define internal void @hdcd_process(%struct.HDCDContext* %ctx, %struct.hdcd_state* %state, i32* %samples, i32 %count, i32 %stride) #1 !dbg !1990 {
entry:
  %ctx.addr = alloca %struct.HDCDContext*, align 8
  %state.addr = alloca %struct.hdcd_state*, align 8
  %samples.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %stride.addr = alloca i32, align 4
  %samples_end = alloca i32*, align 8
  %gain = alloca i32, align 4
  %peak_extend = alloca i32, align 4
  %target_gain = alloca i32, align 4
  %lead = alloca i32, align 4
  %envelope_run = alloca i32, align 4
  %run = alloca i32, align 4
  store %struct.HDCDContext* %ctx, %struct.HDCDContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.HDCDContext** %ctx.addr, metadata !1993, metadata !709), !dbg !1994
  store %struct.hdcd_state* %state, %struct.hdcd_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hdcd_state** %state.addr, metadata !1995, metadata !709), !dbg !1996
  store i32* %samples, i32** %samples.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %samples.addr, metadata !1997, metadata !709), !dbg !1998
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !1999, metadata !709), !dbg !2000
  store i32 %stride, i32* %stride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stride.addr, metadata !2001, metadata !709), !dbg !2002
  call void @llvm.dbg.declare(metadata i32** %samples_end, metadata !2003, metadata !709), !dbg !2004
  %0 = load i32*, i32** %samples.addr, align 8, !dbg !2005
  %1 = load i32, i32* %count.addr, align 4, !dbg !2006
  %2 = load i32, i32* %stride.addr, align 4, !dbg !2007
  %mul = mul nsw i32 %1, %2, !dbg !2008
  %idx.ext = sext i32 %mul to i64, !dbg !2009
  %add.ptr = getelementptr inbounds i32, i32* %0, i64 %idx.ext, !dbg !2009
  store i32* %add.ptr, i32** %samples_end, align 8, !dbg !2004
  call void @llvm.dbg.declare(metadata i32* %gain, metadata !2010, metadata !709), !dbg !2011
  %3 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !2012
  %running_gain = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %3, i32 0, i32 6, !dbg !2013
  %4 = load i32, i32* %running_gain, align 4, !dbg !2013
  store i32 %4, i32* %gain, align 4, !dbg !2011
  call void @llvm.dbg.declare(metadata i32* %peak_extend, metadata !2014, metadata !709), !dbg !2015
  call void @llvm.dbg.declare(metadata i32* %target_gain, metadata !2016, metadata !709), !dbg !2017
  call void @llvm.dbg.declare(metadata i32* %lead, metadata !2018, metadata !709), !dbg !2019
  store i32 0, i32* %lead, align 4, !dbg !2019
  %5 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2020
  %analyze_mode = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %5, i32 0, i32 4, !dbg !2022
  %6 = load i32, i32* %analyze_mode, align 8, !dbg !2022
  %tobool = icmp ne i32 %6, 0, !dbg !2020
  br i1 %tobool, label %if.then, label %if.end, !dbg !2023

if.then:                                          ; preds = %entry
  %7 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !2024
  %8 = load i32*, i32** %samples.addr, align 8, !dbg !2025
  %9 = load i32, i32* %count.addr, align 4, !dbg !2026
  %10 = load i32, i32* %stride.addr, align 4, !dbg !2027
  call void @hdcd_analyze_prepare(%struct.hdcd_state* %7, i32* %8, i32 %9, i32 %10), !dbg !2028
  br label %if.end, !dbg !2028

if.end:                                           ; preds = %if.then, %entry
  %11 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2029
  %12 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !2030
  call void @hdcd_control(%struct.HDCDContext* %11, %struct.hdcd_state* %12, i32* %peak_extend, i32* %target_gain), !dbg !2031
  br label %while.cond, !dbg !2032

while.cond:                                       ; preds = %if.end29, %if.end
  %13 = load i32, i32* %count.addr, align 4, !dbg !2033
  %14 = load i32, i32* %lead, align 4, !dbg !2035
  %cmp = icmp sgt i32 %13, %14, !dbg !2036
  br i1 %cmp, label %while.body, label %while.end, !dbg !2037

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %envelope_run, metadata !2038, metadata !709), !dbg !2040
  call void @llvm.dbg.declare(metadata i32* %run, metadata !2041, metadata !709), !dbg !2042
  br label %do.body, !dbg !2043, !llvm.loop !2044

do.body:                                          ; preds = %while.body
  %15 = load i32*, i32** %samples.addr, align 8, !dbg !2045
  %16 = load i32, i32* %lead, align 4, !dbg !2049
  %17 = load i32, i32* %stride.addr, align 4, !dbg !2050
  %mul1 = mul nsw i32 %16, %17, !dbg !2051
  %idx.ext2 = sext i32 %mul1 to i64, !dbg !2052
  %add.ptr3 = getelementptr inbounds i32, i32* %15, i64 %idx.ext2, !dbg !2052
  %18 = load i32, i32* %stride.addr, align 4, !dbg !2053
  %19 = load i32, i32* %count.addr, align 4, !dbg !2054
  %20 = load i32, i32* %lead, align 4, !dbg !2055
  %sub = sub nsw i32 %19, %20, !dbg !2056
  %mul4 = mul nsw i32 %18, %sub, !dbg !2057
  %idx.ext5 = sext i32 %mul4 to i64, !dbg !2058
  %add.ptr6 = getelementptr inbounds i32, i32* %add.ptr3, i64 %idx.ext5, !dbg !2058
  %21 = load i32*, i32** %samples_end, align 8, !dbg !2059
  %cmp7 = icmp ule i32* %add.ptr6, %21, !dbg !2060
  br i1 %cmp7, label %if.end9, label %if.then8, !dbg !2061

if.then8:                                         ; preds = %do.body
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i32 0, i32 0), i32 1380), !dbg !2062
  call void @abort() #8, !dbg !2065
  unreachable, !dbg !2067

if.end9:                                          ; preds = %do.body
  br label %do.end, !dbg !2068

do.end:                                           ; preds = %if.end9
  %22 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2070
  %23 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !2071
  %24 = load i32*, i32** %samples.addr, align 8, !dbg !2072
  %25 = load i32, i32* %lead, align 4, !dbg !2073
  %26 = load i32, i32* %stride.addr, align 4, !dbg !2074
  %mul10 = mul nsw i32 %25, %26, !dbg !2075
  %idx.ext11 = sext i32 %mul10 to i64, !dbg !2076
  %add.ptr12 = getelementptr inbounds i32, i32* %24, i64 %idx.ext11, !dbg !2076
  %27 = load i32, i32* %count.addr, align 4, !dbg !2077
  %28 = load i32, i32* %lead, align 4, !dbg !2078
  %sub13 = sub nsw i32 %27, %28, !dbg !2079
  %call = call i32 @hdcd_scan(%struct.HDCDContext* %22, %struct.hdcd_state* %23, i32 1, i32* %add.ptr12, i32 %sub13, i32 0), !dbg !2080
  %29 = load i32, i32* %lead, align 4, !dbg !2081
  %add = add nsw i32 %call, %29, !dbg !2082
  store i32 %add, i32* %run, align 4, !dbg !2083
  %30 = load i32, i32* %run, align 4, !dbg !2084
  %sub14 = sub nsw i32 %30, 1, !dbg !2085
  store i32 %sub14, i32* %envelope_run, align 4, !dbg !2086
  br label %do.body15, !dbg !2087, !llvm.loop !2088

do.body15:                                        ; preds = %do.end
  %31 = load i32*, i32** %samples.addr, align 8, !dbg !2089
  %32 = load i32, i32* %envelope_run, align 4, !dbg !2093
  %33 = load i32, i32* %stride.addr, align 4, !dbg !2094
  %mul16 = mul nsw i32 %32, %33, !dbg !2095
  %idx.ext17 = sext i32 %mul16 to i64, !dbg !2096
  %add.ptr18 = getelementptr inbounds i32, i32* %31, i64 %idx.ext17, !dbg !2096
  %34 = load i32*, i32** %samples_end, align 8, !dbg !2097
  %cmp19 = icmp ule i32* %add.ptr18, %34, !dbg !2098
  br i1 %cmp19, label %if.end21, label %if.then20, !dbg !2099

if.then20:                                        ; preds = %do.body15
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i32 0, i32 0), i32 1384), !dbg !2100
  call void @abort() #8, !dbg !2103
  unreachable, !dbg !2105

if.end21:                                         ; preds = %do.body15
  br label %do.end22, !dbg !2106

do.end22:                                         ; preds = %if.end21
  %35 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2108
  %analyze_mode23 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %35, i32 0, i32 4, !dbg !2110
  %36 = load i32, i32* %analyze_mode23, align 8, !dbg !2110
  %tobool24 = icmp ne i32 %36, 0, !dbg !2108
  br i1 %tobool24, label %if.then25, label %if.else, !dbg !2111

if.then25:                                        ; preds = %do.end22
  %37 = load i32*, i32** %samples.addr, align 8, !dbg !2112
  %38 = load i32, i32* %envelope_run, align 4, !dbg !2113
  %39 = load i32, i32* %stride.addr, align 4, !dbg !2114
  %40 = load i32, i32* %gain, align 4, !dbg !2115
  %41 = load i32, i32* %target_gain, align 4, !dbg !2116
  %42 = load i32, i32* %peak_extend, align 4, !dbg !2117
  %43 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2118
  %analyze_mode26 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %43, i32 0, i32 4, !dbg !2119
  %44 = load i32, i32* %analyze_mode26, align 8, !dbg !2119
  %45 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !2120
  %sustain = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %45, i32 0, i32 4, !dbg !2121
  %46 = load i32, i32* %sustain, align 4, !dbg !2121
  %call27 = call i32 @hdcd_analyze(i32* %37, i32 %38, i32 %39, i32 %40, i32 %41, i32 %42, i32 %44, i32 %46, i32 -1), !dbg !2122
  store i32 %call27, i32* %gain, align 4, !dbg !2123
  br label %if.end29, !dbg !2124

if.else:                                          ; preds = %do.end22
  %47 = load i32*, i32** %samples.addr, align 8, !dbg !2125
  %48 = load i32, i32* %envelope_run, align 4, !dbg !2126
  %49 = load i32, i32* %stride.addr, align 4, !dbg !2127
  %50 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2128
  %bits_per_sample = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %50, i32 0, i32 7, !dbg !2129
  %51 = load i32, i32* %bits_per_sample, align 4, !dbg !2129
  %52 = load i32, i32* %gain, align 4, !dbg !2130
  %53 = load i32, i32* %target_gain, align 4, !dbg !2131
  %54 = load i32, i32* %peak_extend, align 4, !dbg !2132
  %call28 = call i32 @hdcd_envelope(i32* %47, i32 %48, i32 %49, i32 %51, i32 %52, i32 %53, i32 %54), !dbg !2133
  store i32 %call28, i32* %gain, align 4, !dbg !2134
  br label %if.end29

if.end29:                                         ; preds = %if.else, %if.then25
  %55 = load i32, i32* %envelope_run, align 4, !dbg !2135
  %56 = load i32, i32* %stride.addr, align 4, !dbg !2136
  %mul30 = mul nsw i32 %55, %56, !dbg !2137
  %57 = load i32*, i32** %samples.addr, align 8, !dbg !2138
  %idx.ext31 = sext i32 %mul30 to i64, !dbg !2138
  %add.ptr32 = getelementptr inbounds i32, i32* %57, i64 %idx.ext31, !dbg !2138
  store i32* %add.ptr32, i32** %samples.addr, align 8, !dbg !2138
  %58 = load i32, i32* %envelope_run, align 4, !dbg !2139
  %59 = load i32, i32* %count.addr, align 4, !dbg !2140
  %sub33 = sub nsw i32 %59, %58, !dbg !2140
  store i32 %sub33, i32* %count.addr, align 4, !dbg !2140
  %60 = load i32, i32* %run, align 4, !dbg !2141
  %61 = load i32, i32* %envelope_run, align 4, !dbg !2142
  %sub34 = sub nsw i32 %60, %61, !dbg !2143
  store i32 %sub34, i32* %lead, align 4, !dbg !2144
  %62 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2145
  %63 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !2146
  call void @hdcd_control(%struct.HDCDContext* %62, %struct.hdcd_state* %63, i32* %peak_extend, i32* %target_gain), !dbg !2147
  br label %while.cond, !dbg !2148, !llvm.loop !2150

while.end:                                        ; preds = %while.cond
  %64 = load i32, i32* %lead, align 4, !dbg !2151
  %cmp35 = icmp sgt i32 %64, 0, !dbg !2153
  br i1 %cmp35, label %if.then36, label %if.end55, !dbg !2154

if.then36:                                        ; preds = %while.end
  br label %do.body37, !dbg !2155, !llvm.loop !2157

do.body37:                                        ; preds = %if.then36
  %65 = load i32*, i32** %samples.addr, align 8, !dbg !2158
  %66 = load i32, i32* %lead, align 4, !dbg !2162
  %67 = load i32, i32* %stride.addr, align 4, !dbg !2163
  %mul38 = mul nsw i32 %66, %67, !dbg !2164
  %idx.ext39 = sext i32 %mul38 to i64, !dbg !2165
  %add.ptr40 = getelementptr inbounds i32, i32* %65, i64 %idx.ext39, !dbg !2165
  %68 = load i32*, i32** %samples_end, align 8, !dbg !2166
  %cmp41 = icmp ule i32* %add.ptr40, %68, !dbg !2167
  br i1 %cmp41, label %if.end43, label %if.then42, !dbg !2168

if.then42:                                        ; preds = %do.body37
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i32 0, i32 0), i32 1396), !dbg !2169
  call void @abort() #8, !dbg !2172
  unreachable, !dbg !2174

if.end43:                                         ; preds = %do.body37
  br label %do.end44, !dbg !2175

do.end44:                                         ; preds = %if.end43
  %69 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2177
  %analyze_mode45 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %69, i32 0, i32 4, !dbg !2179
  %70 = load i32, i32* %analyze_mode45, align 8, !dbg !2179
  %tobool46 = icmp ne i32 %70, 0, !dbg !2177
  br i1 %tobool46, label %if.then47, label %if.else51, !dbg !2180

if.then47:                                        ; preds = %do.end44
  %71 = load i32*, i32** %samples.addr, align 8, !dbg !2181
  %72 = load i32, i32* %lead, align 4, !dbg !2182
  %73 = load i32, i32* %stride.addr, align 4, !dbg !2183
  %74 = load i32, i32* %gain, align 4, !dbg !2184
  %75 = load i32, i32* %target_gain, align 4, !dbg !2185
  %76 = load i32, i32* %peak_extend, align 4, !dbg !2186
  %77 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2187
  %analyze_mode48 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %77, i32 0, i32 4, !dbg !2188
  %78 = load i32, i32* %analyze_mode48, align 8, !dbg !2188
  %79 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !2189
  %sustain49 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %79, i32 0, i32 4, !dbg !2190
  %80 = load i32, i32* %sustain49, align 4, !dbg !2190
  %call50 = call i32 @hdcd_analyze(i32* %71, i32 %72, i32 %73, i32 %74, i32 %75, i32 %76, i32 %78, i32 %80, i32 -1), !dbg !2191
  store i32 %call50, i32* %gain, align 4, !dbg !2192
  br label %if.end54, !dbg !2193

if.else51:                                        ; preds = %do.end44
  %81 = load i32*, i32** %samples.addr, align 8, !dbg !2194
  %82 = load i32, i32* %lead, align 4, !dbg !2195
  %83 = load i32, i32* %stride.addr, align 4, !dbg !2196
  %84 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2197
  %bits_per_sample52 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %84, i32 0, i32 7, !dbg !2198
  %85 = load i32, i32* %bits_per_sample52, align 4, !dbg !2198
  %86 = load i32, i32* %gain, align 4, !dbg !2199
  %87 = load i32, i32* %target_gain, align 4, !dbg !2200
  %88 = load i32, i32* %peak_extend, align 4, !dbg !2201
  %call53 = call i32 @hdcd_envelope(i32* %81, i32 %82, i32 %83, i32 %85, i32 %86, i32 %87, i32 %88), !dbg !2202
  store i32 %call53, i32* %gain, align 4, !dbg !2203
  br label %if.end54

if.end54:                                         ; preds = %if.else51, %if.then47
  br label %if.end55, !dbg !2204

if.end55:                                         ; preds = %if.end54, %while.end
  %89 = load i32, i32* %gain, align 4, !dbg !2205
  %90 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !2206
  %running_gain56 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %90, i32 0, i32 6, !dbg !2207
  store i32 %89, i32* %running_gain56, align 4, !dbg !2208
  ret void, !dbg !2209
}

declare i32 @ff_filter_frame(%struct.AVFilterLink*, %struct.AVFrame*) #3

; Function Attrs: nounwind uwtable
define internal void @hdcd_analyze_prepare(%struct.hdcd_state* %state, i32* %samples, i32 %count, i32 %stride) #1 !dbg !2210 {
entry:
  %state.addr = alloca %struct.hdcd_state*, align 8
  %samples.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %stride.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %f = alloca i32, align 4
  %so = alloca i32, align 4
  %save = alloca i32, align 4
  store %struct.hdcd_state* %state, %struct.hdcd_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hdcd_state** %state.addr, metadata !2213, metadata !709), !dbg !2214
  store i32* %samples, i32** %samples.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %samples.addr, metadata !2215, metadata !709), !dbg !2216
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !2217, metadata !709), !dbg !2218
  store i32 %stride, i32* %stride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stride.addr, metadata !2219, metadata !709), !dbg !2220
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2221, metadata !709), !dbg !2222
  call void @llvm.dbg.declare(metadata i32* %f, metadata !2223, metadata !709), !dbg !2224
  store i32 300, i32* %f, align 4, !dbg !2224
  call void @llvm.dbg.declare(metadata i32* %so, metadata !2225, metadata !709), !dbg !2226
  %0 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !2227
  %rate = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %0, i32 0, i32 18, !dbg !2228
  %1 = load i32, i32* %rate, align 8, !dbg !2228
  %2 = load i32, i32* %f, align 4, !dbg !2229
  %div = sdiv i32 %1, %2, !dbg !2230
  store i32 %div, i32* %so, align 4, !dbg !2226
  store i32 0, i32* %n, align 4, !dbg !2231
  br label %for.cond, !dbg !2233

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %n, align 4, !dbg !2234
  %4 = load i32, i32* %count.addr, align 4, !dbg !2237
  %5 = load i32, i32* %stride.addr, align 4, !dbg !2238
  %mul = mul nsw i32 %4, %5, !dbg !2239
  %cmp = icmp slt i32 %3, %mul, !dbg !2240
  br i1 %cmp, label %for.body, label %for.end, !dbg !2241

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %save, metadata !2242, metadata !709), !dbg !2244
  %6 = load i32, i32* %n, align 4, !dbg !2245
  %idxprom = sext i32 %6 to i64, !dbg !2246
  %7 = load i32*, i32** %samples.addr, align 8, !dbg !2246
  %arrayidx = getelementptr inbounds i32, i32* %7, i64 %idxprom, !dbg !2246
  %8 = load i32, i32* %arrayidx, align 4, !dbg !2246
  %call = call i32 @abs(i32 %8) #2, !dbg !2247
  %sub = sub nsw i32 %call, 22913, !dbg !2248
  %cmp1 = icmp sge i32 %sub, 0, !dbg !2249
  %cond = select i1 %cmp1, i32 2, i32 0, !dbg !2250
  store i32 %cond, i32* %save, align 4, !dbg !2244
  %9 = load i32, i32* %n, align 4, !dbg !2251
  %idxprom2 = sext i32 %9 to i64, !dbg !2252
  %10 = load i32*, i32** %samples.addr, align 8, !dbg !2252
  %arrayidx3 = getelementptr inbounds i32, i32* %10, i64 %idxprom2, !dbg !2252
  %11 = load i32, i32* %arrayidx3, align 4, !dbg !2252
  %and = and i32 %11, 1, !dbg !2253
  %12 = load i32, i32* %save, align 4, !dbg !2254
  %or = or i32 %12, %and, !dbg !2254
  store i32 %or, i32* %save, align 4, !dbg !2254
  %13 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !2255
  %_ana_snb = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %13, i32 0, i32 19, !dbg !2256
  %14 = load i32, i32* %_ana_snb, align 4, !dbg !2256
  %conv = sitofp i32 %14 to double, !dbg !2257
  %mul4 = fmul double 0x401921FB54442EEA, %conv, !dbg !2258
  %15 = load i32, i32* %f, align 4, !dbg !2259
  %conv5 = sitofp i32 %15 to double, !dbg !2260
  %mul6 = fmul double %mul4, %conv5, !dbg !2261
  %16 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !2262
  %rate7 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %16, i32 0, i32 18, !dbg !2263
  %17 = load i32, i32* %rate7, align 8, !dbg !2263
  %conv8 = sitofp i32 %17 to double, !dbg !2264
  %div9 = fdiv double %mul6, %conv8, !dbg !2265
  %call10 = call double @sin(double %div9) #9, !dbg !2266
  %mul11 = fmul double %call10, 1.000000e-01, !dbg !2267
  %mul12 = fmul double %mul11, 3.276700e+04, !dbg !2268
  %conv13 = fptosi double %mul12 to i16, !dbg !2269
  %conv14 = sext i16 %conv13 to i32, !dbg !2269
  %18 = load i32, i32* %n, align 4, !dbg !2270
  %idxprom15 = sext i32 %18 to i64, !dbg !2271
  %19 = load i32*, i32** %samples.addr, align 8, !dbg !2271
  %arrayidx16 = getelementptr inbounds i32, i32* %19, i64 %idxprom15, !dbg !2271
  store i32 %conv14, i32* %arrayidx16, align 4, !dbg !2272
  %20 = load i32, i32* %n, align 4, !dbg !2273
  %idxprom17 = sext i32 %20 to i64, !dbg !2274
  %21 = load i32*, i32** %samples.addr, align 8, !dbg !2274
  %arrayidx18 = getelementptr inbounds i32, i32* %21, i64 %idxprom17, !dbg !2274
  %22 = load i32, i32* %arrayidx18, align 4, !dbg !2274
  %or19 = or i32 %22, 3, !dbg !2275
  %23 = load i32, i32* %save, align 4, !dbg !2276
  %neg = xor i32 %23, -1, !dbg !2277
  %and20 = and i32 %neg, 3, !dbg !2278
  %xor = xor i32 %or19, %and20, !dbg !2279
  %24 = load i32, i32* %n, align 4, !dbg !2280
  %idxprom21 = sext i32 %24 to i64, !dbg !2281
  %25 = load i32*, i32** %samples.addr, align 8, !dbg !2281
  %arrayidx22 = getelementptr inbounds i32, i32* %25, i64 %idxprom21, !dbg !2281
  store i32 %xor, i32* %arrayidx22, align 4, !dbg !2282
  %26 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !2283
  %_ana_snb23 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %26, i32 0, i32 19, !dbg !2285
  %27 = load i32, i32* %_ana_snb23, align 4, !dbg !2286
  %inc = add nsw i32 %27, 1, !dbg !2286
  store i32 %inc, i32* %_ana_snb23, align 4, !dbg !2286
  %28 = load i32, i32* %so, align 4, !dbg !2287
  %cmp24 = icmp sgt i32 %inc, %28, !dbg !2288
  br i1 %cmp24, label %if.then, label %if.end, !dbg !2289

if.then:                                          ; preds = %for.body
  %29 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !2290
  %_ana_snb26 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %29, i32 0, i32 19, !dbg !2292
  store i32 0, i32* %_ana_snb26, align 4, !dbg !2293
  br label %if.end, !dbg !2290

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !2294

for.inc:                                          ; preds = %if.end
  %30 = load i32, i32* %stride.addr, align 4, !dbg !2295
  %31 = load i32, i32* %n, align 4, !dbg !2297
  %add = add nsw i32 %31, %30, !dbg !2297
  store i32 %add, i32* %n, align 4, !dbg !2297
  br label %for.cond, !dbg !2298, !llvm.loop !2299

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2301
}

; Function Attrs: nounwind uwtable
define internal i32 @hdcd_control_stereo(%struct.HDCDContext* %ctx, i32* %peak_extend0, i32* %peak_extend1) #1 !dbg !2302 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.HDCDContext*, align 8
  %peak_extend0.addr = alloca i32*, align 8
  %peak_extend1.addr = alloca i32*, align 8
  %target_gain = alloca [2 x i32], align 4
  store %struct.HDCDContext* %ctx, %struct.HDCDContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.HDCDContext** %ctx.addr, metadata !2306, metadata !709), !dbg !2307
  store i32* %peak_extend0, i32** %peak_extend0.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %peak_extend0.addr, metadata !2308, metadata !709), !dbg !2309
  store i32* %peak_extend1, i32** %peak_extend1.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %peak_extend1.addr, metadata !2310, metadata !709), !dbg !2311
  call void @llvm.dbg.declare(metadata [2 x i32]* %target_gain, metadata !2312, metadata !709), !dbg !2313
  %0 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2314
  %1 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2315
  %state = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %1, i32 0, i32 1, !dbg !2316
  %arrayidx = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state, i64 0, i64 0, !dbg !2315
  %2 = load i32*, i32** %peak_extend0.addr, align 8, !dbg !2317
  %arrayidx1 = getelementptr inbounds [2 x i32], [2 x i32]* %target_gain, i64 0, i64 0, !dbg !2318
  call void @hdcd_control(%struct.HDCDContext* %0, %struct.hdcd_state* %arrayidx, i32* %2, i32* %arrayidx1), !dbg !2319
  %3 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2320
  %4 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2321
  %state2 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %4, i32 0, i32 1, !dbg !2322
  %arrayidx3 = getelementptr inbounds [2 x %struct.hdcd_state], [2 x %struct.hdcd_state]* %state2, i64 0, i64 1, !dbg !2321
  %5 = load i32*, i32** %peak_extend1.addr, align 8, !dbg !2323
  %arrayidx4 = getelementptr inbounds [2 x i32], [2 x i32]* %target_gain, i64 0, i64 1, !dbg !2324
  call void @hdcd_control(%struct.HDCDContext* %3, %struct.hdcd_state* %arrayidx3, i32* %5, i32* %arrayidx4), !dbg !2325
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %target_gain, i64 0, i64 0, !dbg !2326
  %6 = load i32, i32* %arrayidx5, align 4, !dbg !2326
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* %target_gain, i64 0, i64 1, !dbg !2328
  %7 = load i32, i32* %arrayidx6, align 4, !dbg !2328
  %cmp = icmp eq i32 %6, %7, !dbg !2329
  br i1 %cmp, label %if.then, label %if.else, !dbg !2330

if.then:                                          ; preds = %entry
  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %target_gain, i64 0, i64 0, !dbg !2331
  %8 = load i32, i32* %arrayidx7, align 4, !dbg !2331
  %9 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2332
  %val_target_gain = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %9, i32 0, i32 11, !dbg !2333
  store i32 %8, i32* %val_target_gain, align 4, !dbg !2334
  br label %if.end, !dbg !2332

if.else:                                          ; preds = %entry
  %10 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2335
  %fctx = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %10, i32 0, i32 9, !dbg !2337
  %11 = load %struct.AVFilterContext*, %struct.AVFilterContext** %fctx, align 8, !dbg !2337
  %12 = bitcast %struct.AVFilterContext* %11 to i8*, !dbg !2335
  %13 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2338
  %sample_count = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %13, i32 0, i32 10, !dbg !2339
  %14 = load i32, i32* %sample_count, align 8, !dbg !2339
  %arrayidx8 = getelementptr inbounds [2 x i32], [2 x i32]* %target_gain, i64 0, i64 0, !dbg !2340
  %15 = load i32, i32* %arrayidx8, align 4, !dbg !2340
  %shr = ashr i32 %15, 7, !dbg !2341
  %tobool = icmp ne i32 %shr, 0, !dbg !2341
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2342

cond.true:                                        ; preds = %if.else
  %arrayidx9 = getelementptr inbounds [2 x i32], [2 x i32]* %target_gain, i64 0, i64 0, !dbg !2343
  %16 = load i32, i32* %arrayidx9, align 4, !dbg !2343
  %shr10 = ashr i32 %16, 7, !dbg !2345
  %shr11 = ashr i32 %shr10, 1, !dbg !2346
  %conv = sitofp i32 %shr11 to float, !dbg !2347
  %sub = fsub float -0.000000e+00, %conv, !dbg !2348
  %conv12 = fpext float %sub to double, !dbg !2348
  %arrayidx13 = getelementptr inbounds [2 x i32], [2 x i32]* %target_gain, i64 0, i64 0, !dbg !2349
  %17 = load i32, i32* %arrayidx13, align 4, !dbg !2349
  %shr14 = ashr i32 %17, 7, !dbg !2350
  %and = and i32 %shr14, 1, !dbg !2351
  %tobool15 = icmp ne i32 %and, 0, !dbg !2352
  %cond = select i1 %tobool15, double 5.000000e-01, double 0.000000e+00, !dbg !2352
  %sub16 = fsub double %conv12, %cond, !dbg !2353
  br label %cond.end, !dbg !2354

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !2355

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond17 = phi double [ %sub16, %cond.true ], [ 0.000000e+00, %cond.false ], !dbg !2357
  %arrayidx18 = getelementptr inbounds [2 x i32], [2 x i32]* %target_gain, i64 0, i64 1, !dbg !2359
  %18 = load i32, i32* %arrayidx18, align 4, !dbg !2359
  %shr19 = ashr i32 %18, 7, !dbg !2360
  %tobool20 = icmp ne i32 %shr19, 0, !dbg !2360
  br i1 %tobool20, label %cond.true21, label %cond.false34, !dbg !2361

cond.true21:                                      ; preds = %cond.end
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %target_gain, i64 0, i64 1, !dbg !2362
  %19 = load i32, i32* %arrayidx22, align 4, !dbg !2362
  %shr23 = ashr i32 %19, 7, !dbg !2363
  %shr24 = ashr i32 %shr23, 1, !dbg !2364
  %conv25 = sitofp i32 %shr24 to float, !dbg !2365
  %sub26 = fsub float -0.000000e+00, %conv25, !dbg !2366
  %conv27 = fpext float %sub26 to double, !dbg !2366
  %arrayidx28 = getelementptr inbounds [2 x i32], [2 x i32]* %target_gain, i64 0, i64 1, !dbg !2367
  %20 = load i32, i32* %arrayidx28, align 4, !dbg !2367
  %shr29 = ashr i32 %20, 7, !dbg !2368
  %and30 = and i32 %shr29, 1, !dbg !2369
  %tobool31 = icmp ne i32 %and30, 0, !dbg !2370
  %cond32 = select i1 %tobool31, double 5.000000e-01, double 0.000000e+00, !dbg !2370
  %sub33 = fsub double %conv27, %cond32, !dbg !2371
  br label %cond.end35, !dbg !2372

cond.false34:                                     ; preds = %cond.end
  br label %cond.end35, !dbg !2373

cond.end35:                                       ; preds = %cond.false34, %cond.true21
  %cond36 = phi double [ %sub33, %cond.true21 ], [ 0.000000e+00, %cond.false34 ], !dbg !2374
  %21 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2375
  %val_target_gain37 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %21, i32 0, i32 11, !dbg !2376
  %22 = load i32, i32* %val_target_gain37, align 4, !dbg !2376
  %shr38 = ashr i32 %22, 7, !dbg !2377
  %tobool39 = icmp ne i32 %shr38, 0, !dbg !2377
  br i1 %tobool39, label %cond.true40, label %cond.false53, !dbg !2378

cond.true40:                                      ; preds = %cond.end35
  %23 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2379
  %val_target_gain41 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %23, i32 0, i32 11, !dbg !2380
  %24 = load i32, i32* %val_target_gain41, align 4, !dbg !2380
  %shr42 = ashr i32 %24, 7, !dbg !2381
  %shr43 = ashr i32 %shr42, 1, !dbg !2382
  %conv44 = sitofp i32 %shr43 to float, !dbg !2383
  %sub45 = fsub float -0.000000e+00, %conv44, !dbg !2384
  %conv46 = fpext float %sub45 to double, !dbg !2384
  %25 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2385
  %val_target_gain47 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %25, i32 0, i32 11, !dbg !2386
  %26 = load i32, i32* %val_target_gain47, align 4, !dbg !2386
  %shr48 = ashr i32 %26, 7, !dbg !2387
  %and49 = and i32 %shr48, 1, !dbg !2388
  %tobool50 = icmp ne i32 %and49, 0, !dbg !2389
  %cond51 = select i1 %tobool50, double 5.000000e-01, double 0.000000e+00, !dbg !2389
  %sub52 = fsub double %conv46, %cond51, !dbg !2390
  br label %cond.end54, !dbg !2391

cond.false53:                                     ; preds = %cond.end35
  br label %cond.end54, !dbg !2392

cond.end54:                                       ; preds = %cond.false53, %cond.true40
  %cond55 = phi double [ %sub52, %cond.true40 ], [ 0.000000e+00, %cond.false53 ], !dbg !2393
  call void (i8*, i32, i8*, ...) @av_log(i8* %12, i32 40, i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.8, i32 0, i32 0), i32 %14, double %cond17, double %cond36, double %cond55), !dbg !2394
  store i32 1, i32* %retval, align 4, !dbg !2395
  br label %return, !dbg !2395

if.end:                                           ; preds = %if.then
  store i32 0, i32* %retval, align 4, !dbg !2396
  br label %return, !dbg !2396

return:                                           ; preds = %if.end, %cond.end54
  %27 = load i32, i32* %retval, align 4, !dbg !2397
  ret i32 %27, !dbg !2397
}

declare void @av_log(i8*, i32, i8*, ...) #3

; Function Attrs: noreturn nounwind
declare void @abort() #4

; Function Attrs: nounwind uwtable
define internal i32 @hdcd_scan(%struct.HDCDContext* %ctx, %struct.hdcd_state* %states, i32 %channels, i32* %samples, i32 %max, i32 %stride) #1 !dbg !2398 {
entry:
  %ctx.addr = alloca %struct.HDCDContext*, align 8
  %states.addr = alloca %struct.hdcd_state*, align 8
  %channels.addr = alloca i32, align 4
  %samples.addr = alloca i32*, align 8
  %max.addr = alloca i32, align 4
  %stride.addr = alloca i32, align 4
  %result = alloca i32, align 4
  %i = alloca i32, align 4
  %cdt_active = alloca [2 x i32], align 4
  %flag = alloca i32, align 4
  %consumed = alloca i32, align 4
  store %struct.HDCDContext* %ctx, %struct.HDCDContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.HDCDContext** %ctx.addr, metadata !2401, metadata !709), !dbg !2402
  store %struct.hdcd_state* %states, %struct.hdcd_state** %states.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hdcd_state** %states.addr, metadata !2403, metadata !709), !dbg !2404
  store i32 %channels, i32* %channels.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %channels.addr, metadata !2405, metadata !709), !dbg !2406
  store i32* %samples, i32** %samples.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %samples.addr, metadata !2407, metadata !709), !dbg !2408
  store i32 %max, i32* %max.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max.addr, metadata !2409, metadata !709), !dbg !2410
  store i32 %stride, i32* %stride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stride.addr, metadata !2411, metadata !709), !dbg !2412
  call void @llvm.dbg.declare(metadata i32* %result, metadata !2413, metadata !709), !dbg !2414
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2415, metadata !709), !dbg !2416
  call void @llvm.dbg.declare(metadata [2 x i32]* %cdt_active, metadata !2417, metadata !709), !dbg !2418
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %cdt_active, i32 0, i32 0, !dbg !2419
  %0 = bitcast i32* %arraydecay to i8*, !dbg !2419
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 8, i32 4, i1 false), !dbg !2419
  %1 = load i32, i32* %stride.addr, align 4, !dbg !2420
  %2 = load i32, i32* %channels.addr, align 4, !dbg !2422
  %cmp = icmp slt i32 %1, %2, !dbg !2423
  br i1 %cmp, label %if.then, label %if.end, !dbg !2424

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %channels.addr, align 4, !dbg !2425
  store i32 %3, i32* %stride.addr, align 4, !dbg !2427
  br label %if.end, !dbg !2428

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !2429
  br label %for.cond, !dbg !2431

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4, !dbg !2432
  %5 = load i32, i32* %channels.addr, align 4, !dbg !2435
  %cmp1 = icmp slt i32 %4, %5, !dbg !2436
  br i1 %cmp1, label %for.body, label %for.end, !dbg !2437

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4, !dbg !2438
  %idxprom = sext i32 %6 to i64, !dbg !2441
  %7 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !2441
  %arrayidx = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %7, i64 %idxprom, !dbg !2441
  %sustain = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx, i32 0, i32 4, !dbg !2442
  %8 = load i32, i32* %sustain, align 4, !dbg !2442
  %cmp2 = icmp ugt i32 %8, 0, !dbg !2443
  br i1 %cmp2, label %if.then3, label %if.end20, !dbg !2444

if.then3:                                         ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !2445
  %idxprom4 = sext i32 %9 to i64, !dbg !2447
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* %cdt_active, i64 0, i64 %idxprom4, !dbg !2447
  store i32 1, i32* %arrayidx5, align 4, !dbg !2448
  %10 = load i32, i32* %i, align 4, !dbg !2449
  %idxprom6 = sext i32 %10 to i64, !dbg !2451
  %11 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !2451
  %arrayidx7 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %11, i64 %idxprom6, !dbg !2451
  %sustain8 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx7, i32 0, i32 4, !dbg !2452
  %12 = load i32, i32* %sustain8, align 4, !dbg !2452
  %13 = load i32, i32* %max.addr, align 4, !dbg !2453
  %cmp9 = icmp ule i32 %12, %13, !dbg !2454
  br i1 %cmp9, label %if.then10, label %if.end16, !dbg !2455

if.then10:                                        ; preds = %if.then3
  %14 = load i32, i32* %i, align 4, !dbg !2456
  %idxprom11 = sext i32 %14 to i64, !dbg !2458
  %15 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !2458
  %arrayidx12 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %15, i64 %idxprom11, !dbg !2458
  %control = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx12, i32 0, i32 3, !dbg !2459
  store i8 0, i8* %control, align 2, !dbg !2460
  %16 = load i32, i32* %i, align 4, !dbg !2461
  %idxprom13 = sext i32 %16 to i64, !dbg !2462
  %17 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !2462
  %arrayidx14 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %17, i64 %idxprom13, !dbg !2462
  %sustain15 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx14, i32 0, i32 4, !dbg !2463
  %18 = load i32, i32* %sustain15, align 4, !dbg !2463
  store i32 %18, i32* %max.addr, align 4, !dbg !2464
  br label %if.end16, !dbg !2465

if.end16:                                         ; preds = %if.then10, %if.then3
  %19 = load i32, i32* %max.addr, align 4, !dbg !2466
  %20 = load i32, i32* %i, align 4, !dbg !2467
  %idxprom17 = sext i32 %20 to i64, !dbg !2468
  %21 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !2468
  %arrayidx18 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %21, i64 %idxprom17, !dbg !2468
  %sustain19 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx18, i32 0, i32 4, !dbg !2469
  %22 = load i32, i32* %sustain19, align 4, !dbg !2470
  %sub = sub i32 %22, %19, !dbg !2470
  store i32 %sub, i32* %sustain19, align 4, !dbg !2470
  br label %if.end20, !dbg !2471

if.end20:                                         ; preds = %if.end16, %for.body
  br label %for.inc, !dbg !2472

for.inc:                                          ; preds = %if.end20
  %23 = load i32, i32* %i, align 4, !dbg !2473
  %inc = add nsw i32 %23, 1, !dbg !2473
  store i32 %inc, i32* %i, align 4, !dbg !2473
  br label %for.cond, !dbg !2475, !llvm.loop !2476

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %result, align 4, !dbg !2478
  br label %while.cond, !dbg !2479

while.cond:                                       ; preds = %if.end46, %for.end
  %24 = load i32, i32* %result, align 4, !dbg !2480
  %25 = load i32, i32* %max.addr, align 4, !dbg !2482
  %cmp21 = icmp slt i32 %24, %25, !dbg !2483
  br i1 %cmp21, label %while.body, label %while.end, !dbg !2484

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !2485, metadata !709), !dbg !2487
  call void @llvm.dbg.declare(metadata i32* %consumed, metadata !2488, metadata !709), !dbg !2489
  %26 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !2490
  %27 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !2491
  %28 = load i32, i32* %channels.addr, align 4, !dbg !2492
  %29 = load i32*, i32** %samples.addr, align 8, !dbg !2493
  %30 = load i32, i32* %max.addr, align 4, !dbg !2494
  %31 = load i32, i32* %result, align 4, !dbg !2495
  %sub22 = sub nsw i32 %30, %31, !dbg !2496
  %32 = load i32, i32* %stride.addr, align 4, !dbg !2497
  %call = call i32 @hdcd_integrate(%struct.HDCDContext* %26, %struct.hdcd_state* %27, i32 %28, i32* %flag, i32* %29, i32 %sub22, i32 %32), !dbg !2498
  store i32 %call, i32* %consumed, align 4, !dbg !2489
  %33 = load i32, i32* %consumed, align 4, !dbg !2499
  %34 = load i32, i32* %result, align 4, !dbg !2500
  %add = add nsw i32 %34, %33, !dbg !2500
  store i32 %add, i32* %result, align 4, !dbg !2500
  %35 = load i32, i32* %flag, align 4, !dbg !2501
  %tobool = icmp ne i32 %35, 0, !dbg !2501
  br i1 %tobool, label %if.then23, label %if.end46, !dbg !2503

if.then23:                                        ; preds = %while.body
  store i32 0, i32* %i, align 4, !dbg !2504
  br label %for.cond24, !dbg !2507

for.cond24:                                       ; preds = %for.inc43, %if.then23
  %36 = load i32, i32* %i, align 4, !dbg !2508
  %37 = load i32, i32* %channels.addr, align 4, !dbg !2511
  %cmp25 = icmp slt i32 %36, %37, !dbg !2512
  br i1 %cmp25, label %for.body26, label %for.end45, !dbg !2513

for.body26:                                       ; preds = %for.cond24
  %38 = load i32, i32* %flag, align 4, !dbg !2514
  %39 = load i32, i32* %i, align 4, !dbg !2517
  %shl = shl i32 1, %39, !dbg !2518
  %and = and i32 %38, %shl, !dbg !2519
  %tobool27 = icmp ne i32 %and, 0, !dbg !2519
  br i1 %tobool27, label %if.then28, label %if.end42, !dbg !2520

if.then28:                                        ; preds = %for.body26
  %40 = load i32, i32* %i, align 4, !dbg !2521
  %idxprom29 = sext i32 %40 to i64, !dbg !2523
  %41 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !2523
  %arrayidx30 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %41, i64 %idxprom29, !dbg !2523
  %sustain_reset = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx30, i32 0, i32 5, !dbg !2524
  %42 = load i32, i32* %sustain_reset, align 8, !dbg !2524
  %43 = load i32, i32* %i, align 4, !dbg !2525
  %idxprom31 = sext i32 %43 to i64, !dbg !2526
  %44 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !2526
  %arrayidx32 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %44, i64 %idxprom31, !dbg !2526
  %sustain33 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx32, i32 0, i32 4, !dbg !2527
  store i32 %42, i32* %sustain33, align 4, !dbg !2528
  %45 = load i32, i32* %i, align 4, !dbg !2529
  %idxprom34 = sext i32 %45 to i64, !dbg !2531
  %46 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !2531
  %arrayidx35 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %46, i64 %idxprom34, !dbg !2531
  %count_sustain_expired = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx35, i32 0, i32 17, !dbg !2532
  %47 = load i32, i32* %count_sustain_expired, align 4, !dbg !2532
  %cmp36 = icmp eq i32 %47, -1, !dbg !2533
  br i1 %cmp36, label %if.then37, label %if.end41, !dbg !2534

if.then37:                                        ; preds = %if.then28
  %48 = load i32, i32* %i, align 4, !dbg !2535
  %idxprom38 = sext i32 %48 to i64, !dbg !2536
  %49 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !2536
  %arrayidx39 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %49, i64 %idxprom38, !dbg !2536
  %count_sustain_expired40 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx39, i32 0, i32 17, !dbg !2537
  store i32 0, i32* %count_sustain_expired40, align 4, !dbg !2538
  br label %if.end41, !dbg !2536

if.end41:                                         ; preds = %if.then37, %if.then28
  br label %if.end42, !dbg !2539

if.end42:                                         ; preds = %if.end41, %for.body26
  br label %for.inc43, !dbg !2540

for.inc43:                                        ; preds = %if.end42
  %50 = load i32, i32* %i, align 4, !dbg !2541
  %inc44 = add nsw i32 %50, 1, !dbg !2541
  store i32 %inc44, i32* %i, align 4, !dbg !2541
  br label %for.cond24, !dbg !2543, !llvm.loop !2544

for.end45:                                        ; preds = %for.cond24
  br label %while.end, !dbg !2546

if.end46:                                         ; preds = %while.body
  %51 = load i32, i32* %consumed, align 4, !dbg !2547
  %52 = load i32, i32* %stride.addr, align 4, !dbg !2548
  %mul = mul nsw i32 %51, %52, !dbg !2549
  %53 = load i32*, i32** %samples.addr, align 8, !dbg !2550
  %idx.ext = sext i32 %mul to i64, !dbg !2550
  %add.ptr = getelementptr inbounds i32, i32* %53, i64 %idx.ext, !dbg !2550
  store i32* %add.ptr, i32** %samples.addr, align 8, !dbg !2550
  br label %while.cond, !dbg !2551, !llvm.loop !2553

while.end:                                        ; preds = %for.end45, %while.cond
  store i32 0, i32* %i, align 4, !dbg !2554
  br label %for.cond47, !dbg !2556

for.cond47:                                       ; preds = %for.inc63, %while.end
  %54 = load i32, i32* %i, align 4, !dbg !2557
  %55 = load i32, i32* %channels.addr, align 4, !dbg !2560
  %cmp48 = icmp slt i32 %54, %55, !dbg !2561
  br i1 %cmp48, label %for.body49, label %for.end65, !dbg !2562

for.body49:                                       ; preds = %for.cond47
  %56 = load i32, i32* %i, align 4, !dbg !2563
  %idxprom50 = sext i32 %56 to i64, !dbg !2566
  %arrayidx51 = getelementptr inbounds [2 x i32], [2 x i32]* %cdt_active, i64 0, i64 %idxprom50, !dbg !2566
  %57 = load i32, i32* %arrayidx51, align 4, !dbg !2566
  %tobool52 = icmp ne i32 %57, 0, !dbg !2566
  br i1 %tobool52, label %land.lhs.true, label %if.end62, !dbg !2567

land.lhs.true:                                    ; preds = %for.body49
  %58 = load i32, i32* %i, align 4, !dbg !2568
  %idxprom53 = sext i32 %58 to i64, !dbg !2570
  %59 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !2570
  %arrayidx54 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %59, i64 %idxprom53, !dbg !2570
  %sustain55 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx54, i32 0, i32 4, !dbg !2571
  %60 = load i32, i32* %sustain55, align 4, !dbg !2571
  %cmp56 = icmp eq i32 %60, 0, !dbg !2572
  br i1 %cmp56, label %if.then57, label %if.end62, !dbg !2573

if.then57:                                        ; preds = %land.lhs.true
  %61 = load i32, i32* %i, align 4, !dbg !2574
  %idxprom58 = sext i32 %61 to i64, !dbg !2575
  %62 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !2575
  %arrayidx59 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %62, i64 %idxprom58, !dbg !2575
  %count_sustain_expired60 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx59, i32 0, i32 17, !dbg !2576
  %63 = load i32, i32* %count_sustain_expired60, align 4, !dbg !2577
  %inc61 = add nsw i32 %63, 1, !dbg !2577
  store i32 %inc61, i32* %count_sustain_expired60, align 4, !dbg !2577
  br label %if.end62, !dbg !2575

if.end62:                                         ; preds = %if.then57, %land.lhs.true, %for.body49
  br label %for.inc63, !dbg !2578

for.inc63:                                        ; preds = %if.end62
  %64 = load i32, i32* %i, align 4, !dbg !2579
  %inc64 = add nsw i32 %64, 1, !dbg !2579
  store i32 %inc64, i32* %i, align 4, !dbg !2579
  br label %for.cond47, !dbg !2581, !llvm.loop !2582

for.end65:                                        ; preds = %for.cond47
  %65 = load i32, i32* %result, align 4, !dbg !2584
  ret i32 %65, !dbg !2585
}

; Function Attrs: nounwind uwtable
define internal i32 @hdcd_analyze(i32* %samples, i32 %count, i32 %stride, i32 %gain, i32 %target_gain, i32 %extend, i32 %mode, i32 %cdt_active, i32 %tg_mismatch) #1 !dbg !649 {
entry:
  %samples.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %stride.addr = alloca i32, align 4
  %gain.addr = alloca i32, align 4
  %target_gain.addr = alloca i32, align 4
  %extend.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %cdt_active.addr = alloca i32, align 4
  %tg_mismatch.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %samples_end = alloca i32*, align 8
  %pel = alloca i32, align 4
  %sample = alloca i32, align 4
  %len = alloca i32, align 4
  %len57 = alloca i32, align 4
  store i32* %samples, i32** %samples.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %samples.addr, metadata !2586, metadata !709), !dbg !2587
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !2588, metadata !709), !dbg !2589
  store i32 %stride, i32* %stride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stride.addr, metadata !2590, metadata !709), !dbg !2591
  store i32 %gain, i32* %gain.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %gain.addr, metadata !2592, metadata !709), !dbg !2593
  store i32 %target_gain, i32* %target_gain.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %target_gain.addr, metadata !2594, metadata !709), !dbg !2595
  store i32 %extend, i32* %extend.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %extend.addr, metadata !2596, metadata !709), !dbg !2597
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !2598, metadata !709), !dbg !2599
  store i32 %cdt_active, i32* %cdt_active.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cdt_active.addr, metadata !2600, metadata !709), !dbg !2601
  store i32 %tg_mismatch, i32* %tg_mismatch.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %tg_mismatch.addr, metadata !2602, metadata !709), !dbg !2603
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2604, metadata !709), !dbg !2605
  call void @llvm.dbg.declare(metadata i32** %samples_end, metadata !2606, metadata !709), !dbg !2607
  %0 = load i32*, i32** %samples.addr, align 8, !dbg !2608
  %1 = load i32, i32* %stride.addr, align 4, !dbg !2609
  %2 = load i32, i32* %count.addr, align 4, !dbg !2610
  %mul = mul nsw i32 %1, %2, !dbg !2611
  %idx.ext = sext i32 %mul to i64, !dbg !2612
  %add.ptr = getelementptr inbounds i32, i32* %0, i64 %idx.ext, !dbg !2612
  store i32* %add.ptr, i32** %samples_end, align 8, !dbg !2607
  store i32 0, i32* %i, align 4, !dbg !2613
  br label %for.cond, !dbg !2615

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !2616
  %4 = load i32, i32* %count.addr, align 4, !dbg !2619
  %cmp = icmp slt i32 %3, %4, !dbg !2620
  br i1 %cmp, label %for.body, label %for.end, !dbg !2621

for.body:                                         ; preds = %for.cond
  %5 = load i32, i32* %i, align 4, !dbg !2622
  %6 = load i32, i32* %stride.addr, align 4, !dbg !2624
  %mul1 = mul nsw i32 %5, %6, !dbg !2625
  %idxprom = sext i32 %mul1 to i64, !dbg !2626
  %7 = load i32*, i32** %samples.addr, align 8, !dbg !2626
  %arrayidx = getelementptr inbounds i32, i32* %7, i64 %idxprom, !dbg !2626
  %8 = load i32, i32* %arrayidx, align 4, !dbg !2627
  %shl = shl i32 %8, 15, !dbg !2627
  store i32 %shl, i32* %arrayidx, align 4, !dbg !2627
  %9 = load i32, i32* %mode.addr, align 4, !dbg !2628
  %cmp2 = icmp eq i32 %9, 2, !dbg !2630
  br i1 %cmp2, label %if.then, label %if.else, !dbg !2631

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %pel, metadata !2632, metadata !709), !dbg !2634
  %10 = load i32, i32* %i, align 4, !dbg !2635
  %11 = load i32, i32* %stride.addr, align 4, !dbg !2636
  %mul3 = mul nsw i32 %10, %11, !dbg !2637
  %idxprom4 = sext i32 %mul3 to i64, !dbg !2638
  %12 = load i32*, i32** %samples.addr, align 8, !dbg !2638
  %arrayidx5 = getelementptr inbounds i32, i32* %12, i64 %idxprom4, !dbg !2638
  %13 = load i32, i32* %arrayidx5, align 4, !dbg !2638
  %shr = ashr i32 %13, 16, !dbg !2639
  %and = and i32 %shr, 1, !dbg !2640
  store i32 %and, i32* %pel, align 4, !dbg !2634
  call void @llvm.dbg.declare(metadata i32* %sample, metadata !2641, metadata !709), !dbg !2642
  %14 = load i32, i32* %i, align 4, !dbg !2643
  %15 = load i32, i32* %stride.addr, align 4, !dbg !2644
  %mul6 = mul nsw i32 %14, %15, !dbg !2645
  %idxprom7 = sext i32 %mul6 to i64, !dbg !2646
  %16 = load i32*, i32** %samples.addr, align 8, !dbg !2646
  %arrayidx8 = getelementptr inbounds i32, i32* %16, i64 %idxprom7, !dbg !2646
  %17 = load i32, i32* %arrayidx8, align 4, !dbg !2646
  store i32 %17, i32* %sample, align 4, !dbg !2642
  %18 = load i32, i32* %sample, align 4, !dbg !2647
  %19 = load i32, i32* %pel, align 4, !dbg !2648
  %tobool = icmp ne i32 %19, 0, !dbg !2648
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !2649

land.rhs:                                         ; preds = %if.then
  %20 = load i32, i32* %extend.addr, align 4, !dbg !2650
  %tobool9 = icmp ne i32 %20, 0, !dbg !2652
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then
  %21 = phi i1 [ false, %if.then ], [ %tobool9, %land.rhs ]
  %lnot = xor i1 %21, true, !dbg !2653
  %lnot10 = xor i1 %lnot, true, !dbg !2655
  %lnot.ext = zext i1 %lnot10 to i32, !dbg !2655
  %call = call i32 @hdcd_analyze_gen(i32 %18, i32 %lnot.ext, i32 1), !dbg !2656
  %22 = load i32, i32* %i, align 4, !dbg !2657
  %23 = load i32, i32* %stride.addr, align 4, !dbg !2658
  %mul11 = mul nsw i32 %22, %23, !dbg !2659
  %idxprom12 = sext i32 %mul11 to i64, !dbg !2660
  %24 = load i32*, i32** %samples.addr, align 8, !dbg !2660
  %arrayidx13 = getelementptr inbounds i32, i32* %24, i64 %idxprom12, !dbg !2660
  store i32 %call, i32* %arrayidx13, align 4, !dbg !2661
  br label %if.end37, !dbg !2662

if.else:                                          ; preds = %for.body
  %25 = load i32, i32* %mode.addr, align 4, !dbg !2663
  %cmp14 = icmp eq i32 %25, 4, !dbg !2666
  br i1 %cmp14, label %land.lhs.true, label %if.else24, !dbg !2667

land.lhs.true:                                    ; preds = %if.else
  %26 = load i32, i32* %tg_mismatch.addr, align 4, !dbg !2668
  %cmp15 = icmp sgt i32 %26, 0, !dbg !2670
  br i1 %cmp15, label %if.then16, label %if.else24, !dbg !2671

if.then16:                                        ; preds = %land.lhs.true
  %27 = load i32, i32* %i, align 4, !dbg !2672
  %28 = load i32, i32* %stride.addr, align 4, !dbg !2673
  %mul17 = mul nsw i32 %27, %28, !dbg !2674
  %idxprom18 = sext i32 %mul17 to i64, !dbg !2675
  %29 = load i32*, i32** %samples.addr, align 8, !dbg !2675
  %arrayidx19 = getelementptr inbounds i32, i32* %29, i64 %idxprom18, !dbg !2675
  %30 = load i32, i32* %arrayidx19, align 4, !dbg !2675
  %call20 = call i32 @hdcd_analyze_gen(i32 %30, i32 1, i32 1), !dbg !2676
  %31 = load i32, i32* %i, align 4, !dbg !2677
  %32 = load i32, i32* %stride.addr, align 4, !dbg !2678
  %mul21 = mul nsw i32 %31, %32, !dbg !2679
  %idxprom22 = sext i32 %mul21 to i64, !dbg !2680
  %33 = load i32*, i32** %samples.addr, align 8, !dbg !2680
  %arrayidx23 = getelementptr inbounds i32, i32* %33, i64 %idxprom22, !dbg !2680
  store i32 %call20, i32* %arrayidx23, align 4, !dbg !2681
  br label %if.end36, !dbg !2680

if.else24:                                        ; preds = %land.lhs.true, %if.else
  %34 = load i32, i32* %mode.addr, align 4, !dbg !2682
  %cmp25 = icmp eq i32 %34, 3, !dbg !2684
  br i1 %cmp25, label %land.lhs.true26, label %if.end, !dbg !2685

land.lhs.true26:                                  ; preds = %if.else24
  %35 = load i32, i32* %cdt_active.addr, align 4, !dbg !2686
  %tobool27 = icmp ne i32 %35, 0, !dbg !2686
  br i1 %tobool27, label %if.then28, label %if.end, !dbg !2688

if.then28:                                        ; preds = %land.lhs.true26
  %36 = load i32, i32* %i, align 4, !dbg !2689
  %37 = load i32, i32* %stride.addr, align 4, !dbg !2690
  %mul29 = mul nsw i32 %36, %37, !dbg !2691
  %idxprom30 = sext i32 %mul29 to i64, !dbg !2692
  %38 = load i32*, i32** %samples.addr, align 8, !dbg !2692
  %arrayidx31 = getelementptr inbounds i32, i32* %38, i64 %idxprom30, !dbg !2692
  %39 = load i32, i32* %arrayidx31, align 4, !dbg !2692
  %call32 = call i32 @hdcd_analyze_gen(i32 %39, i32 1, i32 1), !dbg !2693
  %40 = load i32, i32* %i, align 4, !dbg !2694
  %41 = load i32, i32* %stride.addr, align 4, !dbg !2695
  %mul33 = mul nsw i32 %40, %41, !dbg !2696
  %idxprom34 = sext i32 %mul33 to i64, !dbg !2697
  %42 = load i32*, i32** %samples.addr, align 8, !dbg !2697
  %arrayidx35 = getelementptr inbounds i32, i32* %42, i64 %idxprom34, !dbg !2697
  store i32 %call32, i32* %arrayidx35, align 4, !dbg !2698
  br label %if.end, !dbg !2697

if.end:                                           ; preds = %if.then28, %land.lhs.true26, %if.else24
  br label %if.end36

if.end36:                                         ; preds = %if.end, %if.then16
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %land.end
  br label %for.inc, !dbg !2699

for.inc:                                          ; preds = %if.end37
  %43 = load i32, i32* %i, align 4, !dbg !2700
  %inc = add nsw i32 %43, 1, !dbg !2700
  store i32 %inc, i32* %i, align 4, !dbg !2700
  br label %for.cond, !dbg !2702, !llvm.loop !2703

for.end:                                          ; preds = %for.cond
  %44 = load i32, i32* %gain.addr, align 4, !dbg !2705
  %45 = load i32, i32* %target_gain.addr, align 4, !dbg !2707
  %cmp38 = icmp sle i32 %44, %45, !dbg !2708
  br i1 %cmp38, label %if.then39, label %if.else56, !dbg !2709

if.then39:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata i32* %len, metadata !2710, metadata !709), !dbg !2712
  %46 = load i32, i32* %count.addr, align 4, !dbg !2713
  %47 = load i32, i32* %target_gain.addr, align 4, !dbg !2714
  %48 = load i32, i32* %gain.addr, align 4, !dbg !2715
  %sub = sub nsw i32 %47, %48, !dbg !2716
  %cmp40 = icmp sgt i32 %46, %sub, !dbg !2717
  br i1 %cmp40, label %cond.true, label %cond.false, !dbg !2718

cond.true:                                        ; preds = %if.then39
  %49 = load i32, i32* %target_gain.addr, align 4, !dbg !2719
  %50 = load i32, i32* %gain.addr, align 4, !dbg !2721
  %sub41 = sub nsw i32 %49, %50, !dbg !2722
  br label %cond.end, !dbg !2723

cond.false:                                       ; preds = %if.then39
  %51 = load i32, i32* %count.addr, align 4, !dbg !2724
  br label %cond.end, !dbg !2726

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub41, %cond.true ], [ %51, %cond.false ], !dbg !2727
  store i32 %cond, i32* %len, align 4, !dbg !2729
  store i32 0, i32* %i, align 4, !dbg !2730
  br label %for.cond42, !dbg !2732

for.cond42:                                       ; preds = %for.inc52, %cond.end
  %52 = load i32, i32* %i, align 4, !dbg !2733
  %53 = load i32, i32* %len, align 4, !dbg !2736
  %cmp43 = icmp slt i32 %52, %53, !dbg !2737
  br i1 %cmp43, label %for.body44, label %for.end54, !dbg !2738

for.body44:                                       ; preds = %for.cond42
  %54 = load i32, i32* %gain.addr, align 4, !dbg !2739
  %inc45 = add nsw i32 %54, 1, !dbg !2739
  store i32 %inc45, i32* %gain.addr, align 4, !dbg !2739
  %55 = load i32, i32* %mode.addr, align 4, !dbg !2741
  %cmp46 = icmp eq i32 %55, 1, !dbg !2743
  br i1 %cmp46, label %if.then47, label %if.end49, !dbg !2744

if.then47:                                        ; preds = %for.body44
  %56 = load i32*, i32** %samples.addr, align 8, !dbg !2745
  %57 = load i32, i32* %56, align 4, !dbg !2746
  %58 = load i32, i32* %gain.addr, align 4, !dbg !2747
  %call48 = call i32 @hdcd_analyze_gen(i32 %57, i32 %58, i32 1920), !dbg !2748
  %59 = load i32*, i32** %samples.addr, align 8, !dbg !2749
  store i32 %call48, i32* %59, align 4, !dbg !2750
  br label %if.end49, !dbg !2751

if.end49:                                         ; preds = %if.then47, %for.body44
  %60 = load i32, i32* %stride.addr, align 4, !dbg !2752
  %61 = load i32*, i32** %samples.addr, align 8, !dbg !2753
  %idx.ext50 = sext i32 %60 to i64, !dbg !2753
  %add.ptr51 = getelementptr inbounds i32, i32* %61, i64 %idx.ext50, !dbg !2753
  store i32* %add.ptr51, i32** %samples.addr, align 8, !dbg !2753
  br label %for.inc52, !dbg !2754

for.inc52:                                        ; preds = %if.end49
  %62 = load i32, i32* %i, align 4, !dbg !2755
  %inc53 = add nsw i32 %62, 1, !dbg !2755
  store i32 %inc53, i32* %i, align 4, !dbg !2755
  br label %for.cond42, !dbg !2757, !llvm.loop !2758

for.end54:                                        ; preds = %for.cond42
  %63 = load i32, i32* %len, align 4, !dbg !2760
  %64 = load i32, i32* %count.addr, align 4, !dbg !2761
  %sub55 = sub nsw i32 %64, %63, !dbg !2761
  store i32 %sub55, i32* %count.addr, align 4, !dbg !2761
  br label %if.end85, !dbg !2762

if.else56:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata i32* %len57, metadata !2763, metadata !709), !dbg !2765
  %65 = load i32, i32* %count.addr, align 4, !dbg !2766
  %66 = load i32, i32* %gain.addr, align 4, !dbg !2767
  %67 = load i32, i32* %target_gain.addr, align 4, !dbg !2768
  %sub58 = sub nsw i32 %66, %67, !dbg !2769
  %shr59 = ashr i32 %sub58, 3, !dbg !2770
  %cmp60 = icmp sgt i32 %65, %shr59, !dbg !2771
  br i1 %cmp60, label %cond.true61, label %cond.false64, !dbg !2772

cond.true61:                                      ; preds = %if.else56
  %68 = load i32, i32* %gain.addr, align 4, !dbg !2773
  %69 = load i32, i32* %target_gain.addr, align 4, !dbg !2775
  %sub62 = sub nsw i32 %68, %69, !dbg !2776
  %shr63 = ashr i32 %sub62, 3, !dbg !2777
  br label %cond.end65, !dbg !2778

cond.false64:                                     ; preds = %if.else56
  %70 = load i32, i32* %count.addr, align 4, !dbg !2779
  br label %cond.end65, !dbg !2781

cond.end65:                                       ; preds = %cond.false64, %cond.true61
  %cond66 = phi i32 [ %shr63, %cond.true61 ], [ %70, %cond.false64 ], !dbg !2782
  store i32 %cond66, i32* %len57, align 4, !dbg !2784
  store i32 0, i32* %i, align 4, !dbg !2785
  br label %for.cond67, !dbg !2787

for.cond67:                                       ; preds = %for.inc77, %cond.end65
  %71 = load i32, i32* %i, align 4, !dbg !2788
  %72 = load i32, i32* %len57, align 4, !dbg !2791
  %cmp68 = icmp slt i32 %71, %72, !dbg !2792
  br i1 %cmp68, label %for.body69, label %for.end79, !dbg !2793

for.body69:                                       ; preds = %for.cond67
  %73 = load i32, i32* %gain.addr, align 4, !dbg !2794
  %sub70 = sub nsw i32 %73, 8, !dbg !2794
  store i32 %sub70, i32* %gain.addr, align 4, !dbg !2794
  %74 = load i32, i32* %mode.addr, align 4, !dbg !2796
  %cmp71 = icmp eq i32 %74, 1, !dbg !2798
  br i1 %cmp71, label %if.then72, label %if.end74, !dbg !2799

if.then72:                                        ; preds = %for.body69
  %75 = load i32*, i32** %samples.addr, align 8, !dbg !2800
  %76 = load i32, i32* %75, align 4, !dbg !2801
  %77 = load i32, i32* %gain.addr, align 4, !dbg !2802
  %call73 = call i32 @hdcd_analyze_gen(i32 %76, i32 %77, i32 1920), !dbg !2803
  %78 = load i32*, i32** %samples.addr, align 8, !dbg !2804
  store i32 %call73, i32* %78, align 4, !dbg !2805
  br label %if.end74, !dbg !2806

if.end74:                                         ; preds = %if.then72, %for.body69
  %79 = load i32, i32* %stride.addr, align 4, !dbg !2807
  %80 = load i32*, i32** %samples.addr, align 8, !dbg !2808
  %idx.ext75 = sext i32 %79 to i64, !dbg !2808
  %add.ptr76 = getelementptr inbounds i32, i32* %80, i64 %idx.ext75, !dbg !2808
  store i32* %add.ptr76, i32** %samples.addr, align 8, !dbg !2808
  br label %for.inc77, !dbg !2809

for.inc77:                                        ; preds = %if.end74
  %81 = load i32, i32* %i, align 4, !dbg !2810
  %inc78 = add nsw i32 %81, 1, !dbg !2810
  store i32 %inc78, i32* %i, align 4, !dbg !2810
  br label %for.cond67, !dbg !2812, !llvm.loop !2813

for.end79:                                        ; preds = %for.cond67
  %82 = load i32, i32* %gain.addr, align 4, !dbg !2815
  %sub80 = sub nsw i32 %82, 8, !dbg !2817
  %83 = load i32, i32* %target_gain.addr, align 4, !dbg !2818
  %cmp81 = icmp slt i32 %sub80, %83, !dbg !2819
  br i1 %cmp81, label %if.then82, label %if.end83, !dbg !2820

if.then82:                                        ; preds = %for.end79
  %84 = load i32, i32* %target_gain.addr, align 4, !dbg !2821
  store i32 %84, i32* %gain.addr, align 4, !dbg !2822
  br label %if.end83, !dbg !2823

if.end83:                                         ; preds = %if.then82, %for.end79
  %85 = load i32, i32* %len57, align 4, !dbg !2824
  %86 = load i32, i32* %count.addr, align 4, !dbg !2825
  %sub84 = sub nsw i32 %86, %85, !dbg !2825
  store i32 %sub84, i32* %count.addr, align 4, !dbg !2825
  br label %if.end85

if.end85:                                         ; preds = %if.end83, %for.end54
  %87 = load i32, i32* %gain.addr, align 4, !dbg !2826
  %cmp86 = icmp eq i32 %87, 0, !dbg !2828
  br i1 %cmp86, label %if.then87, label %if.else94, !dbg !2829

if.then87:                                        ; preds = %if.end85
  %88 = load i32, i32* %count.addr, align 4, !dbg !2830
  %cmp88 = icmp sgt i32 %88, 0, !dbg !2833
  br i1 %cmp88, label %if.then89, label %if.end93, !dbg !2834

if.then89:                                        ; preds = %if.then87
  %89 = load i32, i32* %count.addr, align 4, !dbg !2835
  %90 = load i32, i32* %stride.addr, align 4, !dbg !2836
  %mul90 = mul nsw i32 %89, %90, !dbg !2837
  %91 = load i32*, i32** %samples.addr, align 8, !dbg !2838
  %idx.ext91 = sext i32 %mul90 to i64, !dbg !2838
  %add.ptr92 = getelementptr inbounds i32, i32* %91, i64 %idx.ext91, !dbg !2838
  store i32* %add.ptr92, i32** %samples.addr, align 8, !dbg !2838
  br label %if.end93, !dbg !2839

if.end93:                                         ; preds = %if.then89, %if.then87
  br label %if.end102, !dbg !2840

if.else94:                                        ; preds = %if.end85
  br label %while.cond, !dbg !2841

while.cond:                                       ; preds = %if.end99, %if.else94
  %92 = load i32, i32* %count.addr, align 4, !dbg !2843
  %dec = add nsw i32 %92, -1, !dbg !2843
  store i32 %dec, i32* %count.addr, align 4, !dbg !2843
  %cmp95 = icmp sge i32 %dec, 0, !dbg !2845
  br i1 %cmp95, label %while.body, label %while.end, !dbg !2846

while.body:                                       ; preds = %while.cond
  %93 = load i32, i32* %mode.addr, align 4, !dbg !2847
  %cmp96 = icmp eq i32 %93, 1, !dbg !2850
  br i1 %cmp96, label %if.then97, label %if.end99, !dbg !2851

if.then97:                                        ; preds = %while.body
  %94 = load i32*, i32** %samples.addr, align 8, !dbg !2852
  %95 = load i32, i32* %94, align 4, !dbg !2853
  %96 = load i32, i32* %gain.addr, align 4, !dbg !2854
  %call98 = call i32 @hdcd_analyze_gen(i32 %95, i32 %96, i32 1920), !dbg !2855
  %97 = load i32*, i32** %samples.addr, align 8, !dbg !2856
  store i32 %call98, i32* %97, align 4, !dbg !2857
  br label %if.end99, !dbg !2858

if.end99:                                         ; preds = %if.then97, %while.body
  %98 = load i32, i32* %stride.addr, align 4, !dbg !2859
  %99 = load i32*, i32** %samples.addr, align 8, !dbg !2860
  %idx.ext100 = sext i32 %98 to i64, !dbg !2860
  %add.ptr101 = getelementptr inbounds i32, i32* %99, i64 %idx.ext100, !dbg !2860
  store i32* %add.ptr101, i32** %samples.addr, align 8, !dbg !2860
  br label %while.cond, !dbg !2861, !llvm.loop !2863

while.end:                                        ; preds = %while.cond
  br label %if.end102

if.end102:                                        ; preds = %while.end, %if.end93
  br label %do.body, !dbg !2864, !llvm.loop !2865

do.body:                                          ; preds = %if.end102
  %100 = load i32*, i32** %samples.addr, align 8, !dbg !2866
  %101 = load i32*, i32** %samples_end, align 8, !dbg !2870
  %cmp103 = icmp eq i32* %100, %101, !dbg !2871
  br i1 %cmp103, label %if.end105, label %if.then104, !dbg !2872

if.then104:                                       ; preds = %do.body
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i32 0, i32 0), i32 1260), !dbg !2873
  call void @abort() #8, !dbg !2876
  unreachable, !dbg !2878

if.end105:                                        ; preds = %do.body
  br label %do.end, !dbg !2879

do.end:                                           ; preds = %if.end105
  %102 = load i32, i32* %gain.addr, align 4, !dbg !2881
  ret i32 %102, !dbg !2882
}

; Function Attrs: nounwind uwtable
define internal i32 @hdcd_envelope(i32* %samples, i32 %count, i32 %stride, i32 %vbits, i32 %gain, i32 %target_gain, i32 %extend) #1 !dbg !660 {
entry:
  %samples.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %stride.addr = alloca i32, align 4
  %vbits.addr = alloca i32, align 4
  %gain.addr = alloca i32, align 4
  %target_gain.addr = alloca i32, align 4
  %extend.addr = alloca i32, align 4
  %samples_end = alloca i32*, align 8
  %i = alloca i32, align 4
  %pe_level = alloca i32, align 4
  %shft = alloca i32, align 4
  %sample = alloca i32, align 4
  %asample = alloca i32, align 4
  %len = alloca i32, align 4
  %s64 = alloca i64, align 8
  %len65 = alloca i32, align 4
  %s6482 = alloca i64, align 8
  %s64117 = alloca i64, align 8
  store i32* %samples, i32** %samples.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %samples.addr, metadata !2883, metadata !709), !dbg !2884
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !2885, metadata !709), !dbg !2886
  store i32 %stride, i32* %stride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stride.addr, metadata !2887, metadata !709), !dbg !2888
  store i32 %vbits, i32* %vbits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %vbits.addr, metadata !2889, metadata !709), !dbg !2890
  store i32 %gain, i32* %gain.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %gain.addr, metadata !2891, metadata !709), !dbg !2892
  store i32 %target_gain, i32* %target_gain.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %target_gain.addr, metadata !2893, metadata !709), !dbg !2894
  store i32 %extend, i32* %extend.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %extend.addr, metadata !2895, metadata !709), !dbg !2896
  call void @llvm.dbg.declare(metadata i32** %samples_end, metadata !2897, metadata !709), !dbg !2898
  %0 = load i32*, i32** %samples.addr, align 8, !dbg !2899
  %1 = load i32, i32* %stride.addr, align 4, !dbg !2900
  %2 = load i32, i32* %count.addr, align 4, !dbg !2901
  %mul = mul nsw i32 %1, %2, !dbg !2902
  %idx.ext = sext i32 %mul to i64, !dbg !2903
  %add.ptr = getelementptr inbounds i32, i32* %0, i64 %idx.ext, !dbg !2903
  store i32* %add.ptr, i32** %samples_end, align 8, !dbg !2898
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2904, metadata !709), !dbg !2905
  call void @llvm.dbg.declare(metadata i32* %pe_level, metadata !2906, metadata !709), !dbg !2907
  store i32 22913, i32* %pe_level, align 4, !dbg !2907
  call void @llvm.dbg.declare(metadata i32* %shft, metadata !2908, metadata !709), !dbg !2909
  store i32 15, i32* %shft, align 4, !dbg !2909
  %3 = load i32, i32* %vbits.addr, align 4, !dbg !2910
  %cmp = icmp ne i32 %3, 16, !dbg !2912
  br i1 %cmp, label %if.then, label %if.end, !dbg !2913

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %vbits.addr, align 4, !dbg !2914
  %sub = sub nsw i32 %4, 1, !dbg !2916
  %shl = shl i32 1, %sub, !dbg !2917
  %sub1 = sub nsw i32 %shl, 9855, !dbg !2918
  store i32 %sub1, i32* %pe_level, align 4, !dbg !2919
  %5 = load i32, i32* %vbits.addr, align 4, !dbg !2920
  %sub2 = sub nsw i32 32, %5, !dbg !2921
  %sub3 = sub nsw i32 %sub2, 1, !dbg !2922
  store i32 %sub3, i32* %shft, align 4, !dbg !2923
  br label %if.end, !dbg !2924

if.end:                                           ; preds = %if.then, %entry
  br label %do.body, !dbg !2925, !llvm.loop !2926

do.body:                                          ; preds = %if.end
  br label %do.end, !dbg !2927

do.end:                                           ; preds = %do.body
  %6 = load i32, i32* %extend.addr, align 4, !dbg !2930
  %tobool = icmp ne i32 %6, 0, !dbg !2930
  br i1 %tobool, label %if.then4, label %if.else26, !dbg !2932

if.then4:                                         ; preds = %do.end
  store i32 0, i32* %i, align 4, !dbg !2933
  br label %for.cond, !dbg !2936

for.cond:                                         ; preds = %for.inc, %if.then4
  %7 = load i32, i32* %i, align 4, !dbg !2937
  %8 = load i32, i32* %count.addr, align 4, !dbg !2940
  %cmp5 = icmp slt i32 %7, %8, !dbg !2941
  br i1 %cmp5, label %for.body, label %for.end, !dbg !2942

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %sample, metadata !2943, metadata !709), !dbg !2945
  %9 = load i32, i32* %i, align 4, !dbg !2946
  %10 = load i32, i32* %stride.addr, align 4, !dbg !2947
  %mul6 = mul nsw i32 %9, %10, !dbg !2948
  %idxprom = sext i32 %mul6 to i64, !dbg !2949
  %11 = load i32*, i32** %samples.addr, align 8, !dbg !2949
  %arrayidx = getelementptr inbounds i32, i32* %11, i64 %idxprom, !dbg !2949
  %12 = load i32, i32* %arrayidx, align 4, !dbg !2949
  store i32 %12, i32* %sample, align 4, !dbg !2945
  call void @llvm.dbg.declare(metadata i32* %asample, metadata !2950, metadata !709), !dbg !2951
  %13 = load i32, i32* %sample, align 4, !dbg !2952
  %call = call i32 @abs(i32 %13) #2, !dbg !2953
  %14 = load i32, i32* %pe_level, align 4, !dbg !2954
  %sub7 = sub nsw i32 %call, %14, !dbg !2955
  store i32 %sub7, i32* %asample, align 4, !dbg !2951
  %15 = load i32, i32* %asample, align 4, !dbg !2956
  %cmp8 = icmp sge i32 %15, 0, !dbg !2958
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !2959

if.then9:                                         ; preds = %for.body
  br label %do.body10, !dbg !2960, !llvm.loop !2962

do.body10:                                        ; preds = %if.then9
  %16 = load i32, i32* %asample, align 4, !dbg !2963
  %cmp11 = icmp sle i32 %16, 9855, !dbg !2967
  br i1 %cmp11, label %if.end13, label %if.then12, !dbg !2968

if.then12:                                        ; preds = %do.body10
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i32 0, i32 0), i32 1284), !dbg !2969
  call void @abort() #8, !dbg !2972
  unreachable, !dbg !2974

if.end13:                                         ; preds = %do.body10
  br label %do.end14, !dbg !2975

do.end14:                                         ; preds = %if.end13
  %17 = load i32, i32* %sample, align 4, !dbg !2977
  %cmp15 = icmp sge i32 %17, 0, !dbg !2978
  br i1 %cmp15, label %cond.true, label %cond.false, !dbg !2977

cond.true:                                        ; preds = %do.end14
  %18 = load i32, i32* %asample, align 4, !dbg !2979
  %idxprom16 = sext i32 %18 to i64, !dbg !2981
  %arrayidx17 = getelementptr inbounds [9856 x i32], [9856 x i32]* @peaktab, i64 0, i64 %idxprom16, !dbg !2981
  %19 = load i32, i32* %arrayidx17, align 4, !dbg !2981
  br label %cond.end, !dbg !2982

cond.false:                                       ; preds = %do.end14
  %20 = load i32, i32* %asample, align 4, !dbg !2983
  %idxprom18 = sext i32 %20 to i64, !dbg !2985
  %arrayidx19 = getelementptr inbounds [9856 x i32], [9856 x i32]* @peaktab, i64 0, i64 %idxprom18, !dbg !2985
  %21 = load i32, i32* %arrayidx19, align 4, !dbg !2985
  %sub20 = sub i32 0, %21, !dbg !2986
  br label %cond.end, !dbg !2987

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %19, %cond.true ], [ %sub20, %cond.false ], !dbg !2988
  store i32 %cond, i32* %sample, align 4, !dbg !2990
  br label %if.end22, !dbg !2991

if.else:                                          ; preds = %for.body
  %22 = load i32, i32* %shft, align 4, !dbg !2992
  %23 = load i32, i32* %sample, align 4, !dbg !2993
  %shl21 = shl i32 %23, %22, !dbg !2993
  store i32 %shl21, i32* %sample, align 4, !dbg !2993
  br label %if.end22

if.end22:                                         ; preds = %if.else, %cond.end
  %24 = load i32, i32* %sample, align 4, !dbg !2994
  %25 = load i32, i32* %i, align 4, !dbg !2995
  %26 = load i32, i32* %stride.addr, align 4, !dbg !2996
  %mul23 = mul nsw i32 %25, %26, !dbg !2997
  %idxprom24 = sext i32 %mul23 to i64, !dbg !2998
  %27 = load i32*, i32** %samples.addr, align 8, !dbg !2998
  %arrayidx25 = getelementptr inbounds i32, i32* %27, i64 %idxprom24, !dbg !2998
  store i32 %24, i32* %arrayidx25, align 4, !dbg !2999
  br label %for.inc, !dbg !3000

for.inc:                                          ; preds = %if.end22
  %28 = load i32, i32* %i, align 4, !dbg !3001
  %inc = add nsw i32 %28, 1, !dbg !3001
  store i32 %inc, i32* %i, align 4, !dbg !3001
  br label %for.cond, !dbg !3003, !llvm.loop !3004

for.end:                                          ; preds = %for.cond
  br label %if.end37, !dbg !3006

if.else26:                                        ; preds = %do.end
  store i32 0, i32* %i, align 4, !dbg !3007
  br label %for.cond27, !dbg !3010

for.cond27:                                       ; preds = %for.inc34, %if.else26
  %29 = load i32, i32* %i, align 4, !dbg !3011
  %30 = load i32, i32* %count.addr, align 4, !dbg !3014
  %cmp28 = icmp slt i32 %29, %30, !dbg !3015
  br i1 %cmp28, label %for.body29, label %for.end36, !dbg !3016

for.body29:                                       ; preds = %for.cond27
  %31 = load i32, i32* %shft, align 4, !dbg !3017
  %32 = load i32, i32* %i, align 4, !dbg !3018
  %33 = load i32, i32* %stride.addr, align 4, !dbg !3019
  %mul30 = mul nsw i32 %32, %33, !dbg !3020
  %idxprom31 = sext i32 %mul30 to i64, !dbg !3021
  %34 = load i32*, i32** %samples.addr, align 8, !dbg !3021
  %arrayidx32 = getelementptr inbounds i32, i32* %34, i64 %idxprom31, !dbg !3021
  %35 = load i32, i32* %arrayidx32, align 4, !dbg !3022
  %shl33 = shl i32 %35, %31, !dbg !3022
  store i32 %shl33, i32* %arrayidx32, align 4, !dbg !3022
  br label %for.inc34, !dbg !3021

for.inc34:                                        ; preds = %for.body29
  %36 = load i32, i32* %i, align 4, !dbg !3023
  %inc35 = add nsw i32 %36, 1, !dbg !3023
  store i32 %inc35, i32* %i, align 4, !dbg !3023
  br label %for.cond27, !dbg !3025, !llvm.loop !3026

for.end36:                                        ; preds = %for.cond27
  br label %if.end37

if.end37:                                         ; preds = %for.end36, %for.end
  %37 = load i32, i32* %gain.addr, align 4, !dbg !3028
  %38 = load i32, i32* %target_gain.addr, align 4, !dbg !3030
  %cmp38 = icmp sle i32 %37, %38, !dbg !3031
  br i1 %cmp38, label %if.then39, label %if.else64, !dbg !3032

if.then39:                                        ; preds = %if.end37
  call void @llvm.dbg.declare(metadata i32* %len, metadata !3033, metadata !709), !dbg !3035
  %39 = load i32, i32* %count.addr, align 4, !dbg !3036
  %40 = load i32, i32* %target_gain.addr, align 4, !dbg !3037
  %41 = load i32, i32* %gain.addr, align 4, !dbg !3038
  %sub40 = sub nsw i32 %40, %41, !dbg !3039
  %cmp41 = icmp sgt i32 %39, %sub40, !dbg !3040
  br i1 %cmp41, label %cond.true42, label %cond.false44, !dbg !3041

cond.true42:                                      ; preds = %if.then39
  %42 = load i32, i32* %target_gain.addr, align 4, !dbg !3042
  %43 = load i32, i32* %gain.addr, align 4, !dbg !3044
  %sub43 = sub nsw i32 %42, %43, !dbg !3045
  br label %cond.end45, !dbg !3046

cond.false44:                                     ; preds = %if.then39
  %44 = load i32, i32* %count.addr, align 4, !dbg !3047
  br label %cond.end45, !dbg !3049

cond.end45:                                       ; preds = %cond.false44, %cond.true42
  %cond46 = phi i32 [ %sub43, %cond.true42 ], [ %44, %cond.false44 ], !dbg !3050
  store i32 %cond46, i32* %len, align 4, !dbg !3052
  store i32 0, i32* %i, align 4, !dbg !3053
  br label %for.cond47, !dbg !3055

for.cond47:                                       ; preds = %for.inc60, %cond.end45
  %45 = load i32, i32* %i, align 4, !dbg !3056
  %46 = load i32, i32* %len, align 4, !dbg !3059
  %cmp48 = icmp slt i32 %45, %46, !dbg !3060
  br i1 %cmp48, label %for.body49, label %for.end62, !dbg !3061

for.body49:                                       ; preds = %for.cond47
  %47 = load i32, i32* %gain.addr, align 4, !dbg !3062
  %inc50 = add nsw i32 %47, 1, !dbg !3062
  store i32 %inc50, i32* %gain.addr, align 4, !dbg !3062
  br label %do.body51, !dbg !3064, !llvm.loop !3065

do.body51:                                        ; preds = %for.body49
  call void @llvm.dbg.declare(metadata i64* %s64, metadata !3066, metadata !709), !dbg !3068
  %48 = load i32*, i32** %samples.addr, align 8, !dbg !3069
  %49 = load i32, i32* %48, align 4, !dbg !3071
  %conv = sext i32 %49 to i64, !dbg !3071
  store i64 %conv, i64* %s64, align 8, !dbg !3072
  %50 = load i32, i32* %gain.addr, align 4, !dbg !3073
  %idxprom52 = sext i32 %50 to i64, !dbg !3074
  %arrayidx53 = getelementptr inbounds [1921 x i32], [1921 x i32]* @gaintab, i64 0, i64 %idxprom52, !dbg !3074
  %51 = load i32, i32* %arrayidx53, align 4, !dbg !3074
  %conv54 = sext i32 %51 to i64, !dbg !3074
  %52 = load i64, i64* %s64, align 8, !dbg !3075
  %mul55 = mul nsw i64 %52, %conv54, !dbg !3075
  store i64 %mul55, i64* %s64, align 8, !dbg !3075
  %53 = load i64, i64* %s64, align 8, !dbg !3076
  %shr = ashr i64 %53, 23, !dbg !3077
  %conv56 = trunc i64 %shr to i32, !dbg !3078
  %54 = load i32*, i32** %samples.addr, align 8, !dbg !3079
  store i32 %conv56, i32* %54, align 4, !dbg !3080
  br label %do.end57, !dbg !3081

do.end57:                                         ; preds = %do.body51
  %55 = load i32, i32* %stride.addr, align 4, !dbg !3082
  %56 = load i32*, i32** %samples.addr, align 8, !dbg !3083
  %idx.ext58 = sext i32 %55 to i64, !dbg !3083
  %add.ptr59 = getelementptr inbounds i32, i32* %56, i64 %idx.ext58, !dbg !3083
  store i32* %add.ptr59, i32** %samples.addr, align 8, !dbg !3083
  br label %for.inc60, !dbg !3084

for.inc60:                                        ; preds = %do.end57
  %57 = load i32, i32* %i, align 4, !dbg !3085
  %inc61 = add nsw i32 %57, 1, !dbg !3085
  store i32 %inc61, i32* %i, align 4, !dbg !3085
  br label %for.cond47, !dbg !3087, !llvm.loop !3088

for.end62:                                        ; preds = %for.cond47
  %58 = load i32, i32* %len, align 4, !dbg !3090
  %59 = load i32, i32* %count.addr, align 4, !dbg !3091
  %sub63 = sub nsw i32 %59, %58, !dbg !3091
  store i32 %sub63, i32* %count.addr, align 4, !dbg !3091
  br label %if.end102, !dbg !3092

if.else64:                                        ; preds = %if.end37
  call void @llvm.dbg.declare(metadata i32* %len65, metadata !3093, metadata !709), !dbg !3095
  %60 = load i32, i32* %count.addr, align 4, !dbg !3096
  %61 = load i32, i32* %gain.addr, align 4, !dbg !3097
  %62 = load i32, i32* %target_gain.addr, align 4, !dbg !3098
  %sub66 = sub nsw i32 %61, %62, !dbg !3099
  %shr67 = ashr i32 %sub66, 3, !dbg !3100
  %cmp68 = icmp sgt i32 %60, %shr67, !dbg !3101
  br i1 %cmp68, label %cond.true70, label %cond.false73, !dbg !3102

cond.true70:                                      ; preds = %if.else64
  %63 = load i32, i32* %gain.addr, align 4, !dbg !3103
  %64 = load i32, i32* %target_gain.addr, align 4, !dbg !3105
  %sub71 = sub nsw i32 %63, %64, !dbg !3106
  %shr72 = ashr i32 %sub71, 3, !dbg !3107
  br label %cond.end74, !dbg !3108

cond.false73:                                     ; preds = %if.else64
  %65 = load i32, i32* %count.addr, align 4, !dbg !3109
  br label %cond.end74, !dbg !3111

cond.end74:                                       ; preds = %cond.false73, %cond.true70
  %cond75 = phi i32 [ %shr72, %cond.true70 ], [ %65, %cond.false73 ], !dbg !3112
  store i32 %cond75, i32* %len65, align 4, !dbg !3114
  store i32 0, i32* %i, align 4, !dbg !3115
  br label %for.cond76, !dbg !3117

for.cond76:                                       ; preds = %for.inc93, %cond.end74
  %66 = load i32, i32* %i, align 4, !dbg !3118
  %67 = load i32, i32* %len65, align 4, !dbg !3121
  %cmp77 = icmp slt i32 %66, %67, !dbg !3122
  br i1 %cmp77, label %for.body79, label %for.end95, !dbg !3123

for.body79:                                       ; preds = %for.cond76
  %68 = load i32, i32* %gain.addr, align 4, !dbg !3124
  %sub80 = sub nsw i32 %68, 8, !dbg !3124
  store i32 %sub80, i32* %gain.addr, align 4, !dbg !3124
  br label %do.body81, !dbg !3126, !llvm.loop !3127

do.body81:                                        ; preds = %for.body79
  call void @llvm.dbg.declare(metadata i64* %s6482, metadata !3128, metadata !709), !dbg !3130
  %69 = load i32*, i32** %samples.addr, align 8, !dbg !3131
  %70 = load i32, i32* %69, align 4, !dbg !3133
  %conv83 = sext i32 %70 to i64, !dbg !3133
  store i64 %conv83, i64* %s6482, align 8, !dbg !3134
  %71 = load i32, i32* %gain.addr, align 4, !dbg !3135
  %idxprom84 = sext i32 %71 to i64, !dbg !3136
  %arrayidx85 = getelementptr inbounds [1921 x i32], [1921 x i32]* @gaintab, i64 0, i64 %idxprom84, !dbg !3136
  %72 = load i32, i32* %arrayidx85, align 4, !dbg !3136
  %conv86 = sext i32 %72 to i64, !dbg !3136
  %73 = load i64, i64* %s6482, align 8, !dbg !3137
  %mul87 = mul nsw i64 %73, %conv86, !dbg !3137
  store i64 %mul87, i64* %s6482, align 8, !dbg !3137
  %74 = load i64, i64* %s6482, align 8, !dbg !3138
  %shr88 = ashr i64 %74, 23, !dbg !3139
  %conv89 = trunc i64 %shr88 to i32, !dbg !3140
  %75 = load i32*, i32** %samples.addr, align 8, !dbg !3141
  store i32 %conv89, i32* %75, align 4, !dbg !3142
  br label %do.end90, !dbg !3143

do.end90:                                         ; preds = %do.body81
  %76 = load i32, i32* %stride.addr, align 4, !dbg !3144
  %77 = load i32*, i32** %samples.addr, align 8, !dbg !3145
  %idx.ext91 = sext i32 %76 to i64, !dbg !3145
  %add.ptr92 = getelementptr inbounds i32, i32* %77, i64 %idx.ext91, !dbg !3145
  store i32* %add.ptr92, i32** %samples.addr, align 8, !dbg !3145
  br label %for.inc93, !dbg !3146

for.inc93:                                        ; preds = %do.end90
  %78 = load i32, i32* %i, align 4, !dbg !3147
  %inc94 = add nsw i32 %78, 1, !dbg !3147
  store i32 %inc94, i32* %i, align 4, !dbg !3147
  br label %for.cond76, !dbg !3149, !llvm.loop !3150

for.end95:                                        ; preds = %for.cond76
  %79 = load i32, i32* %gain.addr, align 4, !dbg !3152
  %sub96 = sub nsw i32 %79, 8, !dbg !3154
  %80 = load i32, i32* %target_gain.addr, align 4, !dbg !3155
  %cmp97 = icmp slt i32 %sub96, %80, !dbg !3156
  br i1 %cmp97, label %if.then99, label %if.end100, !dbg !3157

if.then99:                                        ; preds = %for.end95
  %81 = load i32, i32* %target_gain.addr, align 4, !dbg !3158
  store i32 %81, i32* %gain.addr, align 4, !dbg !3159
  br label %if.end100, !dbg !3160

if.end100:                                        ; preds = %if.then99, %for.end95
  %82 = load i32, i32* %len65, align 4, !dbg !3161
  %83 = load i32, i32* %count.addr, align 4, !dbg !3162
  %sub101 = sub nsw i32 %83, %82, !dbg !3162
  store i32 %sub101, i32* %count.addr, align 4, !dbg !3162
  br label %if.end102

if.end102:                                        ; preds = %if.end100, %for.end62
  %84 = load i32, i32* %gain.addr, align 4, !dbg !3163
  %cmp103 = icmp eq i32 %84, 0, !dbg !3165
  br i1 %cmp103, label %if.then105, label %if.else113, !dbg !3166

if.then105:                                       ; preds = %if.end102
  %85 = load i32, i32* %count.addr, align 4, !dbg !3167
  %cmp106 = icmp sgt i32 %85, 0, !dbg !3170
  br i1 %cmp106, label %if.then108, label %if.end112, !dbg !3171

if.then108:                                       ; preds = %if.then105
  %86 = load i32, i32* %count.addr, align 4, !dbg !3172
  %87 = load i32, i32* %stride.addr, align 4, !dbg !3173
  %mul109 = mul nsw i32 %86, %87, !dbg !3174
  %88 = load i32*, i32** %samples.addr, align 8, !dbg !3175
  %idx.ext110 = sext i32 %mul109 to i64, !dbg !3175
  %add.ptr111 = getelementptr inbounds i32, i32* %88, i64 %idx.ext110, !dbg !3175
  store i32* %add.ptr111, i32** %samples.addr, align 8, !dbg !3175
  br label %if.end112, !dbg !3176

if.end112:                                        ; preds = %if.then108, %if.then105
  br label %if.end128, !dbg !3177

if.else113:                                       ; preds = %if.end102
  br label %while.cond, !dbg !3178

while.cond:                                       ; preds = %do.end125, %if.else113
  %89 = load i32, i32* %count.addr, align 4, !dbg !3180
  %dec = add nsw i32 %89, -1, !dbg !3180
  store i32 %dec, i32* %count.addr, align 4, !dbg !3180
  %cmp114 = icmp sge i32 %dec, 0, !dbg !3182
  br i1 %cmp114, label %while.body, label %while.end, !dbg !3183

while.body:                                       ; preds = %while.cond
  br label %do.body116, !dbg !3184, !llvm.loop !3186

do.body116:                                       ; preds = %while.body
  call void @llvm.dbg.declare(metadata i64* %s64117, metadata !3187, metadata !709), !dbg !3189
  %90 = load i32*, i32** %samples.addr, align 8, !dbg !3190
  %91 = load i32, i32* %90, align 4, !dbg !3192
  %conv118 = sext i32 %91 to i64, !dbg !3192
  store i64 %conv118, i64* %s64117, align 8, !dbg !3193
  %92 = load i32, i32* %gain.addr, align 4, !dbg !3194
  %idxprom119 = sext i32 %92 to i64, !dbg !3195
  %arrayidx120 = getelementptr inbounds [1921 x i32], [1921 x i32]* @gaintab, i64 0, i64 %idxprom119, !dbg !3195
  %93 = load i32, i32* %arrayidx120, align 4, !dbg !3195
  %conv121 = sext i32 %93 to i64, !dbg !3195
  %94 = load i64, i64* %s64117, align 8, !dbg !3196
  %mul122 = mul nsw i64 %94, %conv121, !dbg !3196
  store i64 %mul122, i64* %s64117, align 8, !dbg !3196
  %95 = load i64, i64* %s64117, align 8, !dbg !3197
  %shr123 = ashr i64 %95, 23, !dbg !3198
  %conv124 = trunc i64 %shr123 to i32, !dbg !3199
  %96 = load i32*, i32** %samples.addr, align 8, !dbg !3200
  store i32 %conv124, i32* %96, align 4, !dbg !3201
  br label %do.end125, !dbg !3202

do.end125:                                        ; preds = %do.body116
  %97 = load i32, i32* %stride.addr, align 4, !dbg !3203
  %98 = load i32*, i32** %samples.addr, align 8, !dbg !3204
  %idx.ext126 = sext i32 %97 to i64, !dbg !3204
  %add.ptr127 = getelementptr inbounds i32, i32* %98, i64 %idx.ext126, !dbg !3204
  store i32* %add.ptr127, i32** %samples.addr, align 8, !dbg !3204
  br label %while.cond, !dbg !3205, !llvm.loop !3207

while.end:                                        ; preds = %while.cond
  br label %if.end128

if.end128:                                        ; preds = %while.end, %if.end112
  br label %do.body129, !dbg !3208, !llvm.loop !3209

do.body129:                                       ; preds = %if.end128
  %99 = load i32*, i32** %samples.addr, align 8, !dbg !3210
  %100 = load i32*, i32** %samples_end, align 8, !dbg !3214
  %cmp130 = icmp eq i32* %99, %100, !dbg !3215
  br i1 %cmp130, label %if.end133, label %if.then132, !dbg !3216

if.then132:                                       ; preds = %do.body129
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i32 0, i32 0), i32 1329), !dbg !3217
  call void @abort() #8, !dbg !3220
  unreachable, !dbg !3222

if.end133:                                        ; preds = %do.body129
  br label %do.end134, !dbg !3223

do.end134:                                        ; preds = %if.end133
  %101 = load i32, i32* %gain.addr, align 4, !dbg !3225
  ret i32 %101, !dbg !3226
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32) #5

; Function Attrs: nounwind
declare double @sin(double) #6

; Function Attrs: nounwind uwtable
define internal void @hdcd_control(%struct.HDCDContext* %ctx, %struct.hdcd_state* %state, i32* %peak_extend, i32* %target_gain) #1 !dbg !3227 {
entry:
  %ctx.addr = alloca %struct.HDCDContext*, align 8
  %state.addr = alloca %struct.hdcd_state*, align 8
  %peak_extend.addr = alloca i32*, align 8
  %target_gain.addr = alloca i32*, align 8
  store %struct.HDCDContext* %ctx, %struct.HDCDContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.HDCDContext** %ctx.addr, metadata !3230, metadata !709), !dbg !3231
  store %struct.hdcd_state* %state, %struct.hdcd_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hdcd_state** %state.addr, metadata !3232, metadata !709), !dbg !3233
  store i32* %peak_extend, i32** %peak_extend.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %peak_extend.addr, metadata !3234, metadata !709), !dbg !3235
  store i32* %target_gain, i32** %target_gain.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %target_gain.addr, metadata !3236, metadata !709), !dbg !3237
  %0 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !3238
  %force_pe = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %0, i32 0, i32 3, !dbg !3239
  %1 = load i32, i32* %force_pe, align 4, !dbg !3239
  %tobool = icmp ne i32 %1, 0, !dbg !3238
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !3240

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3241
  %control = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %2, i32 0, i32 3, !dbg !3243
  %3 = load i8, i8* %control, align 2, !dbg !3243
  %conv = zext i8 %3 to i32, !dbg !3241
  %and = and i32 %conv, 16, !dbg !3244
  %tobool1 = icmp ne i32 %and, 0, !dbg !3245
  br label %lor.end, !dbg !3245

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %tobool1, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !3246
  %5 = load i32*, i32** %peak_extend.addr, align 8, !dbg !3248
  store i32 %lor.ext, i32* %5, align 4, !dbg !3249
  %6 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3250
  %control2 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %6, i32 0, i32 3, !dbg !3251
  %7 = load i8, i8* %control2, align 2, !dbg !3251
  %conv3 = zext i8 %7 to i32, !dbg !3250
  %and4 = and i32 %conv3, 15, !dbg !3252
  %shl = shl i32 %and4, 7, !dbg !3253
  %8 = load i32*, i32** %target_gain.addr, align 8, !dbg !3254
  store i32 %shl, i32* %8, align 4, !dbg !3255
  ret void, !dbg !3256
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #7

; Function Attrs: nounwind uwtable
define internal i32 @hdcd_integrate(%struct.HDCDContext* %ctx, %struct.hdcd_state* %states, i32 %channels, i32* %flag, i32* %samples, i32 %count, i32 %stride) #1 !dbg !3257 {
entry:
  %ctx.addr = alloca %struct.HDCDContext*, align 8
  %states.addr = alloca %struct.hdcd_state*, align 8
  %channels.addr = alloca i32, align 4
  %flag.addr = alloca i32*, align 8
  %samples.addr = alloca i32*, align 8
  %count.addr = alloca i32, align 4
  %stride.addr = alloca i32, align 4
  %bits = alloca [2 x i32], align 4
  %result = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %f = alloca i32, align 4
  %wbits = alloca i32, align 4
  store %struct.HDCDContext* %ctx, %struct.HDCDContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.HDCDContext** %ctx.addr, metadata !3260, metadata !709), !dbg !3261
  store %struct.hdcd_state* %states, %struct.hdcd_state** %states.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hdcd_state** %states.addr, metadata !3262, metadata !709), !dbg !3263
  store i32 %channels, i32* %channels.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %channels.addr, metadata !3264, metadata !709), !dbg !3265
  store i32* %flag, i32** %flag.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %flag.addr, metadata !3266, metadata !709), !dbg !3267
  store i32* %samples, i32** %samples.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %samples.addr, metadata !3268, metadata !709), !dbg !3269
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !3270, metadata !709), !dbg !3271
  store i32 %stride, i32* %stride.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %stride.addr, metadata !3272, metadata !709), !dbg !3273
  call void @llvm.dbg.declare(metadata [2 x i32]* %bits, metadata !3274, metadata !709), !dbg !3276
  call void @llvm.dbg.declare(metadata i32* %result, metadata !3277, metadata !709), !dbg !3278
  %0 = load i32, i32* %count.addr, align 4, !dbg !3279
  store i32 %0, i32* %result, align 4, !dbg !3278
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3280, metadata !709), !dbg !3281
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3282, metadata !709), !dbg !3283
  call void @llvm.dbg.declare(metadata i32* %f, metadata !3284, metadata !709), !dbg !3285
  %1 = load i32*, i32** %flag.addr, align 8, !dbg !3286
  store i32 0, i32* %1, align 4, !dbg !3287
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %bits, i32 0, i32 0, !dbg !3288
  %2 = bitcast i32* %arraydecay to i8*, !dbg !3288
  call void @llvm.memset.p0i8.i64(i8* %2, i8 0, i64 8, i32 4, i1 false), !dbg !3288
  %3 = load i32, i32* %stride.addr, align 4, !dbg !3289
  %4 = load i32, i32* %channels.addr, align 4, !dbg !3291
  %cmp = icmp slt i32 %3, %4, !dbg !3292
  br i1 %cmp, label %if.then, label %if.end, !dbg !3293

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %channels.addr, align 4, !dbg !3294
  store i32 %5, i32* %stride.addr, align 4, !dbg !3296
  br label %if.end, !dbg !3297

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !3298
  br label %for.cond, !dbg !3300

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %i, align 4, !dbg !3301
  %7 = load i32, i32* %channels.addr, align 4, !dbg !3304
  %cmp1 = icmp slt i32 %6, %7, !dbg !3305
  br i1 %cmp1, label %for.body, label %for.end, !dbg !3306

for.body:                                         ; preds = %for.cond
  %8 = load i32, i32* %i, align 4, !dbg !3307
  %idxprom = sext i32 %8 to i64, !dbg !3308
  %9 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3308
  %arrayidx = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %9, i64 %idxprom, !dbg !3308
  %readahead = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx, i32 0, i32 1, !dbg !3309
  %10 = load i8, i8* %readahead, align 8, !dbg !3309
  %conv = zext i8 %10 to i32, !dbg !3310
  %11 = load i32, i32* %result, align 4, !dbg !3311
  %cmp2 = icmp sgt i32 %conv, %11, !dbg !3312
  br i1 %cmp2, label %cond.true, label %cond.false, !dbg !3310

cond.true:                                        ; preds = %for.body
  %12 = load i32, i32* %result, align 4, !dbg !3313
  br label %cond.end, !dbg !3314

cond.false:                                       ; preds = %for.body
  %13 = load i32, i32* %i, align 4, !dbg !3315
  %idxprom4 = sext i32 %13 to i64, !dbg !3317
  %14 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3317
  %arrayidx5 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %14, i64 %idxprom4, !dbg !3317
  %readahead6 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx5, i32 0, i32 1, !dbg !3318
  %15 = load i8, i8* %readahead6, align 8, !dbg !3318
  %conv7 = zext i8 %15 to i32, !dbg !3319
  br label %cond.end, !dbg !3320

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %12, %cond.true ], [ %conv7, %cond.false ], !dbg !3321
  store i32 %cond, i32* %result, align 4, !dbg !3323
  br label %for.inc, !dbg !3324

for.inc:                                          ; preds = %cond.end
  %16 = load i32, i32* %i, align 4, !dbg !3325
  %inc = add nsw i32 %16, 1, !dbg !3325
  store i32 %inc, i32* %i, align 4, !dbg !3325
  br label %for.cond, !dbg !3326, !llvm.loop !3327

for.end:                                          ; preds = %for.cond
  %17 = load i32, i32* %result, align 4, !dbg !3329
  %sub = sub nsw i32 %17, 1, !dbg !3331
  store i32 %sub, i32* %j, align 4, !dbg !3332
  br label %for.cond8, !dbg !3333

for.cond8:                                        ; preds = %for.inc22, %for.end
  %18 = load i32, i32* %j, align 4, !dbg !3334
  %cmp9 = icmp sge i32 %18, 0, !dbg !3337
  br i1 %cmp9, label %for.body11, label %for.end23, !dbg !3338

for.body11:                                       ; preds = %for.cond8
  store i32 0, i32* %i, align 4, !dbg !3339
  br label %for.cond12, !dbg !3342

for.cond12:                                       ; preds = %for.inc18, %for.body11
  %19 = load i32, i32* %i, align 4, !dbg !3343
  %20 = load i32, i32* %channels.addr, align 4, !dbg !3346
  %cmp13 = icmp slt i32 %19, %20, !dbg !3347
  br i1 %cmp13, label %for.body15, label %for.end20, !dbg !3348

for.body15:                                       ; preds = %for.cond12
  %21 = load i32*, i32** %samples.addr, align 8, !dbg !3349
  %incdec.ptr = getelementptr inbounds i32, i32* %21, i32 1, !dbg !3349
  store i32* %incdec.ptr, i32** %samples.addr, align 8, !dbg !3349
  %22 = load i32, i32* %21, align 4, !dbg !3350
  %and = and i32 %22, 1, !dbg !3351
  %23 = load i32, i32* %j, align 4, !dbg !3352
  %shl = shl i32 %and, %23, !dbg !3353
  %24 = load i32, i32* %i, align 4, !dbg !3354
  %idxprom16 = sext i32 %24 to i64, !dbg !3355
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* %bits, i64 0, i64 %idxprom16, !dbg !3355
  %25 = load i32, i32* %arrayidx17, align 4, !dbg !3356
  %or = or i32 %25, %shl, !dbg !3356
  store i32 %or, i32* %arrayidx17, align 4, !dbg !3356
  br label %for.inc18, !dbg !3355

for.inc18:                                        ; preds = %for.body15
  %26 = load i32, i32* %i, align 4, !dbg !3357
  %inc19 = add nsw i32 %26, 1, !dbg !3357
  store i32 %inc19, i32* %i, align 4, !dbg !3357
  br label %for.cond12, !dbg !3359, !llvm.loop !3360

for.end20:                                        ; preds = %for.cond12
  %27 = load i32, i32* %stride.addr, align 4, !dbg !3362
  %28 = load i32, i32* %channels.addr, align 4, !dbg !3363
  %sub21 = sub nsw i32 %27, %28, !dbg !3364
  %29 = load i32*, i32** %samples.addr, align 8, !dbg !3365
  %idx.ext = sext i32 %sub21 to i64, !dbg !3365
  %add.ptr = getelementptr inbounds i32, i32* %29, i64 %idx.ext, !dbg !3365
  store i32* %add.ptr, i32** %samples.addr, align 8, !dbg !3365
  br label %for.inc22, !dbg !3366

for.inc22:                                        ; preds = %for.end20
  %30 = load i32, i32* %j, align 4, !dbg !3367
  %dec = add nsw i32 %30, -1, !dbg !3367
  store i32 %dec, i32* %j, align 4, !dbg !3367
  br label %for.cond8, !dbg !3369, !llvm.loop !3370

for.end23:                                        ; preds = %for.cond8
  store i32 0, i32* %i, align 4, !dbg !3372
  br label %for.cond24, !dbg !3374

for.cond24:                                       ; preds = %for.inc219, %for.end23
  %31 = load i32, i32* %i, align 4, !dbg !3375
  %32 = load i32, i32* %channels.addr, align 4, !dbg !3378
  %cmp25 = icmp slt i32 %31, %32, !dbg !3379
  br i1 %cmp25, label %for.body27, label %for.end221, !dbg !3380

for.body27:                                       ; preds = %for.cond24
  %33 = load i32, i32* %i, align 4, !dbg !3381
  %idxprom28 = sext i32 %33 to i64, !dbg !3383
  %34 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3383
  %arrayidx29 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %34, i64 %idxprom28, !dbg !3383
  %window = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx29, i32 0, i32 0, !dbg !3384
  %35 = load i64, i64* %window, align 8, !dbg !3384
  %36 = load i32, i32* %result, align 4, !dbg !3385
  %sh_prom = zext i32 %36 to i64, !dbg !3386
  %shl30 = shl i64 %35, %sh_prom, !dbg !3386
  %37 = load i32, i32* %i, align 4, !dbg !3387
  %idxprom31 = sext i32 %37 to i64, !dbg !3388
  %arrayidx32 = getelementptr inbounds [2 x i32], [2 x i32]* %bits, i64 0, i64 %idxprom31, !dbg !3388
  %38 = load i32, i32* %arrayidx32, align 4, !dbg !3388
  %conv33 = zext i32 %38 to i64, !dbg !3388
  %or34 = or i64 %shl30, %conv33, !dbg !3389
  %39 = load i32, i32* %i, align 4, !dbg !3390
  %idxprom35 = sext i32 %39 to i64, !dbg !3391
  %40 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3391
  %arrayidx36 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %40, i64 %idxprom35, !dbg !3391
  %window37 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx36, i32 0, i32 0, !dbg !3392
  store i64 %or34, i64* %window37, align 8, !dbg !3393
  %41 = load i32, i32* %result, align 4, !dbg !3394
  %42 = load i32, i32* %i, align 4, !dbg !3395
  %idxprom38 = sext i32 %42 to i64, !dbg !3396
  %43 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3396
  %arrayidx39 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %43, i64 %idxprom38, !dbg !3396
  %readahead40 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx39, i32 0, i32 1, !dbg !3397
  %44 = load i8, i8* %readahead40, align 8, !dbg !3398
  %conv41 = zext i8 %44 to i32, !dbg !3398
  %sub42 = sub nsw i32 %conv41, %41, !dbg !3398
  %conv43 = trunc i32 %sub42 to i8, !dbg !3398
  store i8 %conv43, i8* %readahead40, align 8, !dbg !3398
  %45 = load i32, i32* %i, align 4, !dbg !3399
  %idxprom44 = sext i32 %45 to i64, !dbg !3401
  %46 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3401
  %arrayidx45 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %46, i64 %idxprom44, !dbg !3401
  %readahead46 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx45, i32 0, i32 1, !dbg !3402
  %47 = load i8, i8* %readahead46, align 8, !dbg !3402
  %conv47 = zext i8 %47 to i32, !dbg !3401
  %cmp48 = icmp eq i32 %conv47, 0, !dbg !3403
  br i1 %cmp48, label %if.then50, label %if.end218, !dbg !3404

if.then50:                                        ; preds = %for.body27
  call void @llvm.dbg.declare(metadata i32* %wbits, metadata !3405, metadata !709), !dbg !3407
  %48 = load i32, i32* %i, align 4, !dbg !3408
  %idxprom51 = sext i32 %48 to i64, !dbg !3409
  %49 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3409
  %arrayidx52 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %49, i64 %idxprom51, !dbg !3409
  %window53 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx52, i32 0, i32 0, !dbg !3410
  %50 = load i64, i64* %window53, align 8, !dbg !3410
  %51 = load i32, i32* %i, align 4, !dbg !3411
  %idxprom54 = sext i32 %51 to i64, !dbg !3412
  %52 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3412
  %arrayidx55 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %52, i64 %idxprom54, !dbg !3412
  %window56 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx55, i32 0, i32 0, !dbg !3413
  %53 = load i64, i64* %window56, align 8, !dbg !3413
  %shr = lshr i64 %53, 5, !dbg !3414
  %xor = xor i64 %50, %shr, !dbg !3415
  %54 = load i32, i32* %i, align 4, !dbg !3416
  %idxprom57 = sext i32 %54 to i64, !dbg !3417
  %55 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3417
  %arrayidx58 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %55, i64 %idxprom57, !dbg !3417
  %window59 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx58, i32 0, i32 0, !dbg !3418
  %56 = load i64, i64* %window59, align 8, !dbg !3418
  %shr60 = lshr i64 %56, 23, !dbg !3419
  %xor61 = xor i64 %xor, %shr60, !dbg !3420
  %conv62 = trunc i64 %xor61 to i32, !dbg !3421
  store i32 %conv62, i32* %wbits, align 4, !dbg !3407
  %57 = load i32, i32* %i, align 4, !dbg !3422
  %idxprom63 = sext i32 %57 to i64, !dbg !3424
  %58 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3424
  %arrayidx64 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %58, i64 %idxprom63, !dbg !3424
  %arg = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx64, i32 0, i32 2, !dbg !3425
  %59 = load i8, i8* %arg, align 1, !dbg !3425
  %tobool = icmp ne i8 %59, 0, !dbg !3424
  br i1 %tobool, label %if.then65, label %if.end186, !dbg !3426

if.then65:                                        ; preds = %if.then50
  store i32 0, i32* %f, align 4, !dbg !3427
  %60 = load i32, i32* %wbits, align 4, !dbg !3429
  %and66 = and i32 %60, 262145280, !dbg !3431
  %cmp67 = icmp eq i32 %and66, 262145280, !dbg !3432
  br i1 %cmp67, label %if.then69, label %if.else87, !dbg !3433

if.then69:                                        ; preds = %if.then65
  %61 = load i32, i32* %wbits, align 4, !dbg !3434
  %and70 = and i32 %61, 200, !dbg !3437
  %cmp71 = icmp eq i32 %and70, 0, !dbg !3438
  br i1 %cmp71, label %if.then73, label %if.else, !dbg !3439

if.then73:                                        ; preds = %if.then69
  %62 = load i32, i32* %wbits, align 4, !dbg !3440
  %and74 = and i32 %62, 255, !dbg !3442
  %63 = load i32, i32* %wbits, align 4, !dbg !3443
  %and75 = and i32 %63, 7, !dbg !3444
  %add = add i32 %and74, %and75, !dbg !3445
  %conv76 = trunc i32 %add to i8, !dbg !3446
  %64 = load i32, i32* %i, align 4, !dbg !3447
  %idxprom77 = sext i32 %64 to i64, !dbg !3448
  %65 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3448
  %arrayidx78 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %65, i64 %idxprom77, !dbg !3448
  %control = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx78, i32 0, i32 3, !dbg !3449
  store i8 %conv76, i8* %control, align 2, !dbg !3450
  store i32 1, i32* %f, align 4, !dbg !3451
  %66 = load i32, i32* %i, align 4, !dbg !3452
  %idxprom79 = sext i32 %66 to i64, !dbg !3453
  %67 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3453
  %arrayidx80 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %67, i64 %idxprom79, !dbg !3453
  %code_counterA = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx80, i32 0, i32 7, !dbg !3454
  %68 = load i32, i32* %code_counterA, align 8, !dbg !3455
  %inc81 = add nsw i32 %68, 1, !dbg !3455
  store i32 %inc81, i32* %code_counterA, align 8, !dbg !3455
  br label %if.end86, !dbg !3456

if.else:                                          ; preds = %if.then69
  %69 = load i32, i32* %i, align 4, !dbg !3457
  %idxprom82 = sext i32 %69 to i64, !dbg !3459
  %70 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3459
  %arrayidx83 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %70, i64 %idxprom82, !dbg !3459
  %code_counterA_almost = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx83, i32 0, i32 8, !dbg !3460
  %71 = load i32, i32* %code_counterA_almost, align 4, !dbg !3461
  %inc84 = add nsw i32 %71, 1, !dbg !3461
  store i32 %inc84, i32* %code_counterA_almost, align 4, !dbg !3461
  %72 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !3462
  %fctx = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %72, i32 0, i32 9, !dbg !3463
  %73 = load %struct.AVFilterContext*, %struct.AVFilterContext** %fctx, align 8, !dbg !3463
  %74 = bitcast %struct.AVFilterContext* %73 to i8*, !dbg !3462
  %75 = load i32, i32* %wbits, align 4, !dbg !3464
  %and85 = and i32 %75, 255, !dbg !3465
  %76 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !3466
  %sample_count = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %76, i32 0, i32 10, !dbg !3467
  %77 = load i32, i32* %sample_count, align 8, !dbg !3467
  call void (i8*, i32, i8*, ...) @av_log(i8* %74, i32 40, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.9, i32 0, i32 0), i32 %and85, i32 %77), !dbg !3468
  br label %if.end86

if.end86:                                         ; preds = %if.else, %if.then73
  br label %if.end121, !dbg !3469

if.else87:                                        ; preds = %if.then65
  %78 = load i32, i32* %wbits, align 4, !dbg !3470
  %and88 = and i32 %78, -1610219520, !dbg !3473
  %cmp89 = icmp eq i32 %and88, -1610219520, !dbg !3474
  br i1 %cmp89, label %if.then91, label %if.end120, !dbg !3475

if.then91:                                        ; preds = %if.else87
  %79 = load i32, i32* %wbits, align 4, !dbg !3476
  %80 = load i32, i32* %wbits, align 4, !dbg !3479
  %neg = xor i32 %80, -1, !dbg !3480
  %shr92 = lshr i32 %neg, 8, !dbg !3481
  %and93 = and i32 %shr92, 255, !dbg !3482
  %xor94 = xor i32 %79, %and93, !dbg !3483
  %and95 = and i32 %xor94, -65281, !dbg !3484
  %cmp96 = icmp eq i32 %and95, -1610219520, !dbg !3485
  br i1 %cmp96, label %if.then98, label %if.else108, !dbg !3486

if.then98:                                        ; preds = %if.then91
  %81 = load i32, i32* %wbits, align 4, !dbg !3487
  %shr99 = lshr i32 %81, 8, !dbg !3489
  %and100 = and i32 %shr99, 255, !dbg !3490
  %conv101 = trunc i32 %and100 to i8, !dbg !3487
  %82 = load i32, i32* %i, align 4, !dbg !3491
  %idxprom102 = sext i32 %82 to i64, !dbg !3492
  %83 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3492
  %arrayidx103 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %83, i64 %idxprom102, !dbg !3492
  %control104 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx103, i32 0, i32 3, !dbg !3493
  store i8 %conv101, i8* %control104, align 2, !dbg !3494
  store i32 1, i32* %f, align 4, !dbg !3495
  %84 = load i32, i32* %i, align 4, !dbg !3496
  %idxprom105 = sext i32 %84 to i64, !dbg !3497
  %85 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3497
  %arrayidx106 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %85, i64 %idxprom105, !dbg !3497
  %code_counterB = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx106, i32 0, i32 9, !dbg !3498
  %86 = load i32, i32* %code_counterB, align 8, !dbg !3499
  %inc107 = add nsw i32 %86, 1, !dbg !3499
  store i32 %inc107, i32* %code_counterB, align 8, !dbg !3499
  br label %if.end119, !dbg !3500

if.else108:                                       ; preds = %if.then91
  %87 = load i32, i32* %i, align 4, !dbg !3501
  %idxprom109 = sext i32 %87 to i64, !dbg !3503
  %88 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3503
  %arrayidx110 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %88, i64 %idxprom109, !dbg !3503
  %code_counterB_checkfails = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx110, i32 0, i32 10, !dbg !3504
  %89 = load i32, i32* %code_counterB_checkfails, align 4, !dbg !3505
  %inc111 = add nsw i32 %89, 1, !dbg !3505
  store i32 %inc111, i32* %code_counterB_checkfails, align 4, !dbg !3505
  %90 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !3506
  %fctx112 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %90, i32 0, i32 9, !dbg !3507
  %91 = load %struct.AVFilterContext*, %struct.AVFilterContext** %fctx112, align 8, !dbg !3507
  %92 = bitcast %struct.AVFilterContext* %91 to i8*, !dbg !3506
  %93 = load i32, i32* %wbits, align 4, !dbg !3508
  %and113 = and i32 %93, 65535, !dbg !3509
  %94 = load i32, i32* %wbits, align 4, !dbg !3510
  %and114 = and i32 %94, 65280, !dbg !3511
  %shr115 = lshr i32 %and114, 8, !dbg !3512
  %95 = load i32, i32* %wbits, align 4, !dbg !3513
  %neg116 = xor i32 %95, -1, !dbg !3514
  %and117 = and i32 %neg116, 255, !dbg !3515
  %96 = load %struct.HDCDContext*, %struct.HDCDContext** %ctx.addr, align 8, !dbg !3516
  %sample_count118 = getelementptr inbounds %struct.HDCDContext, %struct.HDCDContext* %96, i32 0, i32 10, !dbg !3517
  %97 = load i32, i32* %sample_count118, align 8, !dbg !3517
  call void (i8*, i32, i8*, ...) @av_log(i8* %92, i32 40, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.10, i32 0, i32 0), i32 %and113, i32 %shr115, i32 %and117, i32 %97), !dbg !3518
  br label %if.end119

if.end119:                                        ; preds = %if.else108, %if.then98
  br label %if.end120, !dbg !3519

if.end120:                                        ; preds = %if.end119, %if.else87
  br label %if.end121

if.end121:                                        ; preds = %if.end120, %if.end86
  %98 = load i32, i32* %f, align 4, !dbg !3520
  %tobool122 = icmp ne i32 %98, 0, !dbg !3520
  br i1 %tobool122, label %if.then123, label %if.end182, !dbg !3522

if.then123:                                       ; preds = %if.end121
  %99 = load i32, i32* %i, align 4, !dbg !3523
  %shl124 = shl i32 1, %99, !dbg !3525
  %100 = load i32*, i32** %flag.addr, align 8, !dbg !3526
  %101 = load i32, i32* %100, align 4, !dbg !3527
  %or125 = or i32 %101, %shl124, !dbg !3527
  store i32 %or125, i32* %100, align 4, !dbg !3527
  %102 = load i32, i32* %i, align 4, !dbg !3528
  %idxprom126 = sext i32 %102 to i64, !dbg !3530
  %103 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3530
  %arrayidx127 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %103, i64 %idxprom126, !dbg !3530
  %control128 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx127, i32 0, i32 3, !dbg !3531
  %104 = load i8, i8* %control128, align 2, !dbg !3531
  %conv129 = zext i8 %104 to i32, !dbg !3530
  %and130 = and i32 %conv129, 16, !dbg !3532
  %tobool131 = icmp ne i32 %and130, 0, !dbg !3532
  br i1 %tobool131, label %if.then132, label %if.end136, !dbg !3533

if.then132:                                       ; preds = %if.then123
  %105 = load i32, i32* %i, align 4, !dbg !3534
  %idxprom133 = sext i32 %105 to i64, !dbg !3536
  %106 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3536
  %arrayidx134 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %106, i64 %idxprom133, !dbg !3536
  %count_peak_extend = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx134, i32 0, i32 13, !dbg !3537
  %107 = load i32, i32* %count_peak_extend, align 8, !dbg !3538
  %inc135 = add nsw i32 %107, 1, !dbg !3538
  store i32 %inc135, i32* %count_peak_extend, align 8, !dbg !3538
  br label %if.end136, !dbg !3536

if.end136:                                        ; preds = %if.then132, %if.then123
  %108 = load i32, i32* %i, align 4, !dbg !3539
  %idxprom137 = sext i32 %108 to i64, !dbg !3541
  %109 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3541
  %arrayidx138 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %109, i64 %idxprom137, !dbg !3541
  %control139 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx138, i32 0, i32 3, !dbg !3542
  %110 = load i8, i8* %control139, align 2, !dbg !3542
  %conv140 = zext i8 %110 to i32, !dbg !3541
  %and141 = and i32 %conv140, 32, !dbg !3543
  %tobool142 = icmp ne i32 %and141, 0, !dbg !3543
  br i1 %tobool142, label %if.then143, label %if.end147, !dbg !3544

if.then143:                                       ; preds = %if.end136
  %111 = load i32, i32* %i, align 4, !dbg !3545
  %idxprom144 = sext i32 %111 to i64, !dbg !3547
  %112 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3547
  %arrayidx145 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %112, i64 %idxprom144, !dbg !3547
  %count_transient_filter = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx145, i32 0, i32 14, !dbg !3548
  %113 = load i32, i32* %count_transient_filter, align 4, !dbg !3549
  %inc146 = add nsw i32 %113, 1, !dbg !3549
  store i32 %inc146, i32* %count_transient_filter, align 4, !dbg !3549
  br label %if.end147, !dbg !3547

if.end147:                                        ; preds = %if.then143, %if.end136
  %114 = load i32, i32* %i, align 4, !dbg !3550
  %idxprom148 = sext i32 %114 to i64, !dbg !3551
  %115 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3551
  %arrayidx149 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %115, i64 %idxprom148, !dbg !3551
  %control150 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx149, i32 0, i32 3, !dbg !3552
  %116 = load i8, i8* %control150, align 2, !dbg !3552
  %conv151 = zext i8 %116 to i32, !dbg !3551
  %and152 = and i32 %conv151, 15, !dbg !3553
  %idxprom153 = sext i32 %and152 to i64, !dbg !3554
  %117 = load i32, i32* %i, align 4, !dbg !3555
  %idxprom154 = sext i32 %117 to i64, !dbg !3554
  %118 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3554
  %arrayidx155 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %118, i64 %idxprom154, !dbg !3554
  %gain_counts = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx155, i32 0, i32 15, !dbg !3556
  %arrayidx156 = getelementptr inbounds [16 x i32], [16 x i32]* %gain_counts, i64 0, i64 %idxprom153, !dbg !3554
  %119 = load i32, i32* %arrayidx156, align 4, !dbg !3557
  %inc157 = add nsw i32 %119, 1, !dbg !3557
  store i32 %inc157, i32* %arrayidx156, align 4, !dbg !3557
  %120 = load i32, i32* %i, align 4, !dbg !3558
  %idxprom158 = sext i32 %120 to i64, !dbg !3559
  %121 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3559
  %arrayidx159 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %121, i64 %idxprom158, !dbg !3559
  %max_gain = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx159, i32 0, i32 16, !dbg !3560
  %122 = load i32, i32* %max_gain, align 8, !dbg !3560
  %123 = load i32, i32* %i, align 4, !dbg !3561
  %idxprom160 = sext i32 %123 to i64, !dbg !3562
  %124 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3562
  %arrayidx161 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %124, i64 %idxprom160, !dbg !3562
  %control162 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx161, i32 0, i32 3, !dbg !3563
  %125 = load i8, i8* %control162, align 2, !dbg !3563
  %conv163 = zext i8 %125 to i32, !dbg !3562
  %and164 = and i32 %conv163, 15, !dbg !3564
  %cmp165 = icmp sgt i32 %122, %and164, !dbg !3565
  br i1 %cmp165, label %cond.true167, label %cond.false171, !dbg !3566

cond.true167:                                     ; preds = %if.end147
  %126 = load i32, i32* %i, align 4, !dbg !3567
  %idxprom168 = sext i32 %126 to i64, !dbg !3569
  %127 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3569
  %arrayidx169 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %127, i64 %idxprom168, !dbg !3569
  %max_gain170 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx169, i32 0, i32 16, !dbg !3570
  %128 = load i32, i32* %max_gain170, align 8, !dbg !3570
  br label %cond.end177, !dbg !3571

cond.false171:                                    ; preds = %if.end147
  %129 = load i32, i32* %i, align 4, !dbg !3572
  %idxprom172 = sext i32 %129 to i64, !dbg !3574
  %130 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3574
  %arrayidx173 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %130, i64 %idxprom172, !dbg !3574
  %control174 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx173, i32 0, i32 3, !dbg !3575
  %131 = load i8, i8* %control174, align 2, !dbg !3575
  %conv175 = zext i8 %131 to i32, !dbg !3574
  %and176 = and i32 %conv175, 15, !dbg !3576
  br label %cond.end177, !dbg !3577

cond.end177:                                      ; preds = %cond.false171, %cond.true167
  %cond178 = phi i32 [ %128, %cond.true167 ], [ %and176, %cond.false171 ], !dbg !3578
  %132 = load i32, i32* %i, align 4, !dbg !3580
  %idxprom179 = sext i32 %132 to i64, !dbg !3581
  %133 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3581
  %arrayidx180 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %133, i64 %idxprom179, !dbg !3581
  %max_gain181 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx180, i32 0, i32 16, !dbg !3582
  store i32 %cond178, i32* %max_gain181, align 8, !dbg !3583
  br label %if.end182, !dbg !3584

if.end182:                                        ; preds = %cond.end177, %if.end121
  %134 = load i32, i32* %i, align 4, !dbg !3585
  %idxprom183 = sext i32 %134 to i64, !dbg !3586
  %135 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3586
  %arrayidx184 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %135, i64 %idxprom183, !dbg !3586
  %arg185 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx184, i32 0, i32 2, !dbg !3587
  store i8 0, i8* %arg185, align 1, !dbg !3588
  br label %if.end186, !dbg !3589

if.end186:                                        ; preds = %if.end182, %if.then50
  %136 = load i32, i32* %wbits, align 4, !dbg !3590
  %cmp187 = icmp eq i32 %136, 2114953221, !dbg !3592
  br i1 %cmp187, label %if.then191, label %lor.lhs.false, !dbg !3593

lor.lhs.false:                                    ; preds = %if.end186
  %137 = load i32, i32* %wbits, align 4, !dbg !3594
  %cmp189 = icmp eq i32 %137, 2114953222, !dbg !3596
  br i1 %cmp189, label %if.then191, label %if.else203, !dbg !3597

if.then191:                                       ; preds = %lor.lhs.false, %if.end186
  %138 = load i32, i32* %wbits, align 4, !dbg !3598
  %and192 = and i32 %138, 3, !dbg !3600
  %mul = mul i32 %and192, 8, !dbg !3601
  %conv193 = trunc i32 %mul to i8, !dbg !3602
  %139 = load i32, i32* %i, align 4, !dbg !3603
  %idxprom194 = sext i32 %139 to i64, !dbg !3604
  %140 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3604
  %arrayidx195 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %140, i64 %idxprom194, !dbg !3604
  %readahead196 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx195, i32 0, i32 1, !dbg !3605
  store i8 %conv193, i8* %readahead196, align 8, !dbg !3606
  %141 = load i32, i32* %i, align 4, !dbg !3607
  %idxprom197 = sext i32 %141 to i64, !dbg !3608
  %142 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3608
  %arrayidx198 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %142, i64 %idxprom197, !dbg !3608
  %arg199 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx198, i32 0, i32 2, !dbg !3609
  store i8 1, i8* %arg199, align 1, !dbg !3610
  %143 = load i32, i32* %i, align 4, !dbg !3611
  %idxprom200 = sext i32 %143 to i64, !dbg !3612
  %144 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3612
  %arrayidx201 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %144, i64 %idxprom200, !dbg !3612
  %code_counterC = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx201, i32 0, i32 11, !dbg !3613
  %145 = load i32, i32* %code_counterC, align 8, !dbg !3614
  %inc202 = add nsw i32 %145, 1, !dbg !3614
  store i32 %inc202, i32* %code_counterC, align 8, !dbg !3614
  br label %if.end217, !dbg !3615

if.else203:                                       ; preds = %lor.lhs.false
  %146 = load i32, i32* %wbits, align 4, !dbg !3616
  %tobool204 = icmp ne i32 %146, 0, !dbg !3616
  br i1 %tobool204, label %if.then205, label %if.else212, !dbg !3619

if.then205:                                       ; preds = %if.else203
  %147 = load i32, i32* %wbits, align 4, !dbg !3620
  %and206 = and i32 %147, 255, !dbg !3621
  %idxprom207 = zext i32 %and206 to i64, !dbg !3622
  %arrayidx208 = getelementptr inbounds [256 x i8], [256 x i8]* @readaheadtab, i64 0, i64 %idxprom207, !dbg !3622
  %148 = load i8, i8* %arrayidx208, align 1, !dbg !3622
  %149 = load i32, i32* %i, align 4, !dbg !3623
  %idxprom209 = sext i32 %149 to i64, !dbg !3624
  %150 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3624
  %arrayidx210 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %150, i64 %idxprom209, !dbg !3624
  %readahead211 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx210, i32 0, i32 1, !dbg !3625
  store i8 %148, i8* %readahead211, align 8, !dbg !3626
  br label %if.end216, !dbg !3624

if.else212:                                       ; preds = %if.else203
  %151 = load i32, i32* %i, align 4, !dbg !3627
  %idxprom213 = sext i32 %151 to i64, !dbg !3628
  %152 = load %struct.hdcd_state*, %struct.hdcd_state** %states.addr, align 8, !dbg !3628
  %arrayidx214 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %152, i64 %idxprom213, !dbg !3628
  %readahead215 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %arrayidx214, i32 0, i32 1, !dbg !3629
  store i8 31, i8* %readahead215, align 8, !dbg !3630
  br label %if.end216

if.end216:                                        ; preds = %if.else212, %if.then205
  br label %if.end217

if.end217:                                        ; preds = %if.end216, %if.then191
  br label %if.end218, !dbg !3631

if.end218:                                        ; preds = %if.end217, %for.body27
  br label %for.inc219, !dbg !3632

for.inc219:                                       ; preds = %if.end218
  %153 = load i32, i32* %i, align 4, !dbg !3633
  %inc220 = add nsw i32 %153, 1, !dbg !3633
  store i32 %inc220, i32* %i, align 4, !dbg !3633
  br label %for.cond24, !dbg !3635, !llvm.loop !3636

for.end221:                                       ; preds = %for.cond24
  %154 = load i32, i32* %result, align 4, !dbg !3638
  ret i32 %154, !dbg !3639
}

; Function Attrs: nounwind uwtable
define internal i32 @hdcd_analyze_gen(i32 %sample, i32 %v, i32 %maxv) #1 !dbg !655 {
entry:
  %sample.addr = alloca i32, align 4
  %v.addr = alloca i32, align 4
  %maxv.addr = alloca i32, align 4
  %s64 = alloca i64, align 8
  store i32 %sample, i32* %sample.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sample.addr, metadata !3640, metadata !709), !dbg !3641
  store i32 %v, i32* %v.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !3642, metadata !709), !dbg !3643
  store i32 %maxv, i32* %maxv.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %maxv.addr, metadata !3644, metadata !709), !dbg !3645
  call void @llvm.dbg.declare(metadata i64* %s64, metadata !3646, metadata !709), !dbg !3647
  %0 = load i32, i32* %sample.addr, align 4, !dbg !3648
  %conv = sext i32 %0 to i64, !dbg !3648
  store i64 %conv, i64* %s64, align 8, !dbg !3647
  %1 = load i32, i32* %v.addr, align 4, !dbg !3649
  %mul = mul i32 %1, 18, !dbg !3650
  %mul1 = mul i32 %mul, 1024, !dbg !3651
  %2 = load i32, i32* %maxv.addr, align 4, !dbg !3652
  %div = udiv i32 %mul1, %2, !dbg !3653
  %add = add i32 1024, %div, !dbg !3654
  store i32 %add, i32* %v.addr, align 4, !dbg !3655
  %3 = load i64, i64* %s64, align 8, !dbg !3656
  %4 = load i32, i32* %v.addr, align 4, !dbg !3657
  %conv2 = zext i32 %4 to i64, !dbg !3657
  %mul3 = mul nsw i64 %3, %conv2, !dbg !3658
  %div4 = sdiv i64 %mul3, 1024, !dbg !3659
  %conv5 = trunc i64 %div4 to i32, !dbg !3660
  ret i32 %conv5, !dbg !3661
}

declare i8* @av_get_sample_fmt_name(i32) #3

; Function Attrs: nounwind uwtable
define internal void @hdcd_detect_reset(%struct.hdcd_detection_data* %detect) #1 !dbg !3662 {
entry:
  %detect.addr = alloca %struct.hdcd_detection_data*, align 8
  store %struct.hdcd_detection_data* %detect, %struct.hdcd_detection_data** %detect.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hdcd_detection_data** %detect.addr, metadata !3663, metadata !709), !dbg !3664
  %0 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !3665
  %hdcd_detected = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %0, i32 0, i32 0, !dbg !3666
  store i32 0, i32* %hdcd_detected, align 4, !dbg !3667
  %1 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !3668
  %packet_type = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %1, i32 0, i32 1, !dbg !3669
  store i32 0, i32* %packet_type, align 4, !dbg !3670
  %2 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !3671
  %total_packets = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %2, i32 0, i32 2, !dbg !3672
  store i32 0, i32* %total_packets, align 4, !dbg !3673
  %3 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !3674
  %errors = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %3, i32 0, i32 3, !dbg !3675
  store i32 0, i32* %errors, align 4, !dbg !3676
  %4 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !3677
  %peak_extend = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %4, i32 0, i32 4, !dbg !3678
  store i32 0, i32* %peak_extend, align 4, !dbg !3679
  %5 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !3680
  %uses_transient_filter = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %5, i32 0, i32 5, !dbg !3681
  store i32 0, i32* %uses_transient_filter, align 4, !dbg !3682
  %6 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !3683
  %max_gain_adjustment = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %6, i32 0, i32 6, !dbg !3684
  store float 0.000000e+00, float* %max_gain_adjustment, align 4, !dbg !3685
  %7 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !3686
  %cdt_expirations = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %7, i32 0, i32 7, !dbg !3687
  store i32 -1, i32* %cdt_expirations, align 4, !dbg !3688
  %8 = load %struct.hdcd_detection_data*, %struct.hdcd_detection_data** %detect.addr, align 8, !dbg !3689
  %_active_count = getelementptr inbounds %struct.hdcd_detection_data, %struct.hdcd_detection_data* %8, i32 0, i32 8, !dbg !3690
  store i32 0, i32* %_active_count, align 4, !dbg !3691
  ret void, !dbg !3692
}

; Function Attrs: nounwind uwtable
define internal void @hdcd_reset(%struct.hdcd_state* %state, i32 %rate, i32 %cdt_ms) #1 !dbg !3693 {
entry:
  %state.addr = alloca %struct.hdcd_state*, align 8
  %rate.addr = alloca i32, align 4
  %cdt_ms.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %sustain_reset = alloca i64, align 8
  store %struct.hdcd_state* %state, %struct.hdcd_state** %state.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hdcd_state** %state.addr, metadata !3696, metadata !709), !dbg !3697
  store i32 %rate, i32* %rate.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rate.addr, metadata !3698, metadata !709), !dbg !3699
  store i32 %cdt_ms, i32* %cdt_ms.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cdt_ms.addr, metadata !3700, metadata !709), !dbg !3701
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3702, metadata !709), !dbg !3703
  call void @llvm.dbg.declare(metadata i64* %sustain_reset, metadata !3704, metadata !709), !dbg !3705
  %0 = load i32, i32* %cdt_ms.addr, align 4, !dbg !3706
  %conv = zext i32 %0 to i64, !dbg !3707
  %1 = load i32, i32* %rate.addr, align 4, !dbg !3708
  %conv1 = zext i32 %1 to i64, !dbg !3708
  %mul = mul i64 %conv, %conv1, !dbg !3709
  %div = udiv i64 %mul, 1000, !dbg !3710
  store i64 %div, i64* %sustain_reset, align 8, !dbg !3705
  %2 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3711
  %window = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %2, i32 0, i32 0, !dbg !3712
  store i64 0, i64* %window, align 8, !dbg !3713
  %3 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3714
  %readahead = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %3, i32 0, i32 1, !dbg !3715
  store i8 32, i8* %readahead, align 8, !dbg !3716
  %4 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3717
  %arg = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %4, i32 0, i32 2, !dbg !3718
  store i8 0, i8* %arg, align 1, !dbg !3719
  %5 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3720
  %control = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %5, i32 0, i32 3, !dbg !3721
  store i8 0, i8* %control, align 2, !dbg !3722
  %6 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3723
  %running_gain = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %6, i32 0, i32 6, !dbg !3724
  store i32 0, i32* %running_gain, align 4, !dbg !3725
  %7 = load i64, i64* %sustain_reset, align 8, !dbg !3726
  %conv2 = trunc i64 %7 to i32, !dbg !3726
  %8 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3727
  %sustain_reset3 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %8, i32 0, i32 5, !dbg !3728
  store i32 %conv2, i32* %sustain_reset3, align 8, !dbg !3729
  %9 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3730
  %sustain = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %9, i32 0, i32 4, !dbg !3731
  store i32 0, i32* %sustain, align 4, !dbg !3732
  %10 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3733
  %code_counterA = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %10, i32 0, i32 7, !dbg !3734
  store i32 0, i32* %code_counterA, align 8, !dbg !3735
  %11 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3736
  %code_counterA_almost = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %11, i32 0, i32 8, !dbg !3737
  store i32 0, i32* %code_counterA_almost, align 4, !dbg !3738
  %12 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3739
  %code_counterB = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %12, i32 0, i32 9, !dbg !3740
  store i32 0, i32* %code_counterB, align 8, !dbg !3741
  %13 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3742
  %code_counterB_checkfails = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %13, i32 0, i32 10, !dbg !3743
  store i32 0, i32* %code_counterB_checkfails, align 4, !dbg !3744
  %14 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3745
  %code_counterC = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %14, i32 0, i32 11, !dbg !3746
  store i32 0, i32* %code_counterC, align 8, !dbg !3747
  %15 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3748
  %code_counterC_unmatched = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %15, i32 0, i32 12, !dbg !3749
  store i32 0, i32* %code_counterC_unmatched, align 4, !dbg !3750
  %16 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3751
  %count_peak_extend = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %16, i32 0, i32 13, !dbg !3752
  store i32 0, i32* %count_peak_extend, align 8, !dbg !3753
  %17 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3754
  %count_transient_filter = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %17, i32 0, i32 14, !dbg !3755
  store i32 0, i32* %count_transient_filter, align 4, !dbg !3756
  store i32 0, i32* %i, align 4, !dbg !3757
  br label %for.cond, !dbg !3759

for.cond:                                         ; preds = %for.inc, %entry
  %18 = load i32, i32* %i, align 4, !dbg !3760
  %cmp = icmp slt i32 %18, 16, !dbg !3763
  br i1 %cmp, label %for.body, label %for.end, !dbg !3764

for.body:                                         ; preds = %for.cond
  %19 = load i32, i32* %i, align 4, !dbg !3765
  %idxprom = sext i32 %19 to i64, !dbg !3767
  %20 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3767
  %gain_counts = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %20, i32 0, i32 15, !dbg !3768
  %arrayidx = getelementptr inbounds [16 x i32], [16 x i32]* %gain_counts, i64 0, i64 %idxprom, !dbg !3767
  store i32 0, i32* %arrayidx, align 4, !dbg !3769
  br label %for.inc, !dbg !3767

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4, !dbg !3770
  %inc = add nsw i32 %21, 1, !dbg !3770
  store i32 %inc, i32* %i, align 4, !dbg !3770
  br label %for.cond, !dbg !3772, !llvm.loop !3773

for.end:                                          ; preds = %for.cond
  %22 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3775
  %max_gain = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %22, i32 0, i32 16, !dbg !3776
  store i32 0, i32* %max_gain, align 8, !dbg !3777
  %23 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3778
  %count_sustain_expired = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %23, i32 0, i32 17, !dbg !3779
  store i32 -1, i32* %count_sustain_expired, align 4, !dbg !3780
  %24 = load i32, i32* %rate.addr, align 4, !dbg !3781
  %25 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3782
  %rate5 = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %25, i32 0, i32 18, !dbg !3783
  store i32 %24, i32* %rate5, align 8, !dbg !3784
  %26 = load %struct.hdcd_state*, %struct.hdcd_state** %state.addr, align 8, !dbg !3785
  %_ana_snb = getelementptr inbounds %struct.hdcd_state, %struct.hdcd_state* %26, i32 0, i32 19, !dbg !3786
  store i32 0, i32* %_ana_snb, align 4, !dbg !3787
  ret void, !dbg !3788
}

declare i8* @av_default_item_name(i8*) #3

declare void @avfilter_graph_set_auto_convert(%struct.AVFilterGraph*, i32) #3

declare i32 @ff_add_channel_layout(%struct.AVFilterChannelLayouts**, i64) #3

declare i32 @ff_set_common_channel_layouts(%struct.AVFilterContext*, %struct.AVFilterChannelLayouts*) #3

declare %struct.AVFilterFormats* @ff_make_format_list(i32*) #3

declare i32 @ff_formats_ref(%struct.AVFilterFormats*, %struct.AVFilterFormats**) #3

declare i32 @ff_set_common_samplerates(%struct.AVFilterContext*, %struct.AVFilterFormats*) #3

attributes #0 = { cold nounwind optsize uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!704, !705}
!llvm.ident = !{!706}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.9.0 (tags/RELEASE_390/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !629, globals: !637)
!1 = !DIFile(filename: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[inter]libavfilter--af_hdcd.o.i", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!2 = !{!3, !13, !23, !47, !54, !72, !96, !115, !125, !147, !168, !579, !585, !591, !596, !600, !608, !625}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVMediaType", file: !4, line: 199, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "./libavutil/avutil.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!5 = !{!6, !7, !8, !9, !10, !11, !12}
!6 = !DIEnumerator(name: "AVMEDIA_TYPE_UNKNOWN", value: -1)
!7 = !DIEnumerator(name: "AVMEDIA_TYPE_VIDEO", value: 0)
!8 = !DIEnumerator(name: "AVMEDIA_TYPE_AUDIO", value: 1)
!9 = !DIEnumerator(name: "AVMEDIA_TYPE_DATA", value: 2)
!10 = !DIEnumerator(name: "AVMEDIA_TYPE_SUBTITLE", value: 3)
!11 = !DIEnumerator(name: "AVMEDIA_TYPE_ATTACHMENT", value: 4)
!12 = !DIEnumerator(name: "AVMEDIA_TYPE_NB", value: 5)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVPictureType", file: !4, line: 272, size: 32, align: 32, elements: !14)
!14 = !{!15, !16, !17, !18, !19, !20, !21, !22}
!15 = !DIEnumerator(name: "AV_PICTURE_TYPE_NONE", value: 0)
!16 = !DIEnumerator(name: "AV_PICTURE_TYPE_I", value: 1)
!17 = !DIEnumerator(name: "AV_PICTURE_TYPE_P", value: 2)
!18 = !DIEnumerator(name: "AV_PICTURE_TYPE_B", value: 3)
!19 = !DIEnumerator(name: "AV_PICTURE_TYPE_S", value: 4)
!20 = !DIEnumerator(name: "AV_PICTURE_TYPE_SI", value: 5)
!21 = !DIEnumerator(name: "AV_PICTURE_TYPE_SP", value: 6)
!22 = !DIEnumerator(name: "AV_PICTURE_TYPE_BI", value: 7)
!23 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVFrameSideDataType", file: !24, line: 48, size: 32, align: 32, elements: !25)
!24 = !DIFile(filename: "./libavutil/frame.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!25 = !{!26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46}
!26 = !DIEnumerator(name: "AV_FRAME_DATA_PANSCAN", value: 0)
!27 = !DIEnumerator(name: "AV_FRAME_DATA_A53_CC", value: 1)
!28 = !DIEnumerator(name: "AV_FRAME_DATA_STEREO3D", value: 2)
!29 = !DIEnumerator(name: "AV_FRAME_DATA_MATRIXENCODING", value: 3)
!30 = !DIEnumerator(name: "AV_FRAME_DATA_DOWNMIX_INFO", value: 4)
!31 = !DIEnumerator(name: "AV_FRAME_DATA_REPLAYGAIN", value: 5)
!32 = !DIEnumerator(name: "AV_FRAME_DATA_DISPLAYMATRIX", value: 6)
!33 = !DIEnumerator(name: "AV_FRAME_DATA_AFD", value: 7)
!34 = !DIEnumerator(name: "AV_FRAME_DATA_MOTION_VECTORS", value: 8)
!35 = !DIEnumerator(name: "AV_FRAME_DATA_SKIP_SAMPLES", value: 9)
!36 = !DIEnumerator(name: "AV_FRAME_DATA_AUDIO_SERVICE_TYPE", value: 10)
!37 = !DIEnumerator(name: "AV_FRAME_DATA_MASTERING_DISPLAY_METADATA", value: 11)
!38 = !DIEnumerator(name: "AV_FRAME_DATA_GOP_TIMECODE", value: 12)
!39 = !DIEnumerator(name: "AV_FRAME_DATA_SPHERICAL", value: 13)
!40 = !DIEnumerator(name: "AV_FRAME_DATA_CONTENT_LIGHT_LEVEL", value: 14)
!41 = !DIEnumerator(name: "AV_FRAME_DATA_ICC_PROFILE", value: 15)
!42 = !DIEnumerator(name: "AV_FRAME_DATA_QP_TABLE_PROPERTIES", value: 16)
!43 = !DIEnumerator(name: "AV_FRAME_DATA_QP_TABLE_DATA", value: 17)
!44 = !DIEnumerator(name: "AV_FRAME_DATA_S12M_TIMECODE", value: 18)
!45 = !DIEnumerator(name: "AV_FRAME_DATA_DYNAMIC_HDR_PLUS", value: 19)
!46 = !DIEnumerator(name: "AV_FRAME_DATA_REGIONS_OF_INTEREST", value: 20)
!47 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorRange", file: !48, line: 516, size: 32, align: 32, elements: !49)
!48 = !DIFile(filename: "./libavutil/pixfmt.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!49 = !{!50, !51, !52, !53}
!50 = !DIEnumerator(name: "AVCOL_RANGE_UNSPECIFIED", value: 0)
!51 = !DIEnumerator(name: "AVCOL_RANGE_MPEG", value: 1)
!52 = !DIEnumerator(name: "AVCOL_RANGE_JPEG", value: 2)
!53 = !DIEnumerator(name: "AVCOL_RANGE_NB", value: 3)
!54 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorPrimaries", file: !48, line: 440, size: 32, align: 32, elements: !55)
!55 = !{!56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71}
!56 = !DIEnumerator(name: "AVCOL_PRI_RESERVED0", value: 0)
!57 = !DIEnumerator(name: "AVCOL_PRI_BT709", value: 1)
!58 = !DIEnumerator(name: "AVCOL_PRI_UNSPECIFIED", value: 2)
!59 = !DIEnumerator(name: "AVCOL_PRI_RESERVED", value: 3)
!60 = !DIEnumerator(name: "AVCOL_PRI_BT470M", value: 4)
!61 = !DIEnumerator(name: "AVCOL_PRI_BT470BG", value: 5)
!62 = !DIEnumerator(name: "AVCOL_PRI_SMPTE170M", value: 6)
!63 = !DIEnumerator(name: "AVCOL_PRI_SMPTE240M", value: 7)
!64 = !DIEnumerator(name: "AVCOL_PRI_FILM", value: 8)
!65 = !DIEnumerator(name: "AVCOL_PRI_BT2020", value: 9)
!66 = !DIEnumerator(name: "AVCOL_PRI_SMPTE428", value: 10)
!67 = !DIEnumerator(name: "AVCOL_PRI_SMPTEST428_1", value: 10)
!68 = !DIEnumerator(name: "AVCOL_PRI_SMPTE431", value: 11)
!69 = !DIEnumerator(name: "AVCOL_PRI_SMPTE432", value: 12)
!70 = !DIEnumerator(name: "AVCOL_PRI_JEDEC_P22", value: 22)
!71 = !DIEnumerator(name: "AVCOL_PRI_NB", value: 23)
!72 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorTransferCharacteristic", file: !48, line: 464, size: 32, align: 32, elements: !73)
!73 = !{!74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95}
!74 = !DIEnumerator(name: "AVCOL_TRC_RESERVED0", value: 0)
!75 = !DIEnumerator(name: "AVCOL_TRC_BT709", value: 1)
!76 = !DIEnumerator(name: "AVCOL_TRC_UNSPECIFIED", value: 2)
!77 = !DIEnumerator(name: "AVCOL_TRC_RESERVED", value: 3)
!78 = !DIEnumerator(name: "AVCOL_TRC_GAMMA22", value: 4)
!79 = !DIEnumerator(name: "AVCOL_TRC_GAMMA28", value: 5)
!80 = !DIEnumerator(name: "AVCOL_TRC_SMPTE170M", value: 6)
!81 = !DIEnumerator(name: "AVCOL_TRC_SMPTE240M", value: 7)
!82 = !DIEnumerator(name: "AVCOL_TRC_LINEAR", value: 8)
!83 = !DIEnumerator(name: "AVCOL_TRC_LOG", value: 9)
!84 = !DIEnumerator(name: "AVCOL_TRC_LOG_SQRT", value: 10)
!85 = !DIEnumerator(name: "AVCOL_TRC_IEC61966_2_4", value: 11)
!86 = !DIEnumerator(name: "AVCOL_TRC_BT1361_ECG", value: 12)
!87 = !DIEnumerator(name: "AVCOL_TRC_IEC61966_2_1", value: 13)
!88 = !DIEnumerator(name: "AVCOL_TRC_BT2020_10", value: 14)
!89 = !DIEnumerator(name: "AVCOL_TRC_BT2020_12", value: 15)
!90 = !DIEnumerator(name: "AVCOL_TRC_SMPTE2084", value: 16)
!91 = !DIEnumerator(name: "AVCOL_TRC_SMPTEST2084", value: 16)
!92 = !DIEnumerator(name: "AVCOL_TRC_SMPTE428", value: 17)
!93 = !DIEnumerator(name: "AVCOL_TRC_SMPTEST428_1", value: 17)
!94 = !DIEnumerator(name: "AVCOL_TRC_ARIB_STD_B67", value: 18)
!95 = !DIEnumerator(name: "AVCOL_TRC_NB", value: 19)
!96 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorSpace", file: !48, line: 493, size: 32, align: 32, elements: !97)
!97 = !{!98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114}
!98 = !DIEnumerator(name: "AVCOL_SPC_RGB", value: 0)
!99 = !DIEnumerator(name: "AVCOL_SPC_BT709", value: 1)
!100 = !DIEnumerator(name: "AVCOL_SPC_UNSPECIFIED", value: 2)
!101 = !DIEnumerator(name: "AVCOL_SPC_RESERVED", value: 3)
!102 = !DIEnumerator(name: "AVCOL_SPC_FCC", value: 4)
!103 = !DIEnumerator(name: "AVCOL_SPC_BT470BG", value: 5)
!104 = !DIEnumerator(name: "AVCOL_SPC_SMPTE170M", value: 6)
!105 = !DIEnumerator(name: "AVCOL_SPC_SMPTE240M", value: 7)
!106 = !DIEnumerator(name: "AVCOL_SPC_YCGCO", value: 8)
!107 = !DIEnumerator(name: "AVCOL_SPC_YCOCG", value: 8)
!108 = !DIEnumerator(name: "AVCOL_SPC_BT2020_NCL", value: 9)
!109 = !DIEnumerator(name: "AVCOL_SPC_BT2020_CL", value: 10)
!110 = !DIEnumerator(name: "AVCOL_SPC_SMPTE2085", value: 11)
!111 = !DIEnumerator(name: "AVCOL_SPC_CHROMA_DERIVED_NCL", value: 12)
!112 = !DIEnumerator(name: "AVCOL_SPC_CHROMA_DERIVED_CL", value: 13)
!113 = !DIEnumerator(name: "AVCOL_SPC_ICTCP", value: 14)
!114 = !DIEnumerator(name: "AVCOL_SPC_NB", value: 15)
!115 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVChromaLocation", file: !48, line: 538, size: 32, align: 32, elements: !116)
!116 = !{!117, !118, !119, !120, !121, !122, !123, !124}
!117 = !DIEnumerator(name: "AVCHROMA_LOC_UNSPECIFIED", value: 0)
!118 = !DIEnumerator(name: "AVCHROMA_LOC_LEFT", value: 1)
!119 = !DIEnumerator(name: "AVCHROMA_LOC_CENTER", value: 2)
!120 = !DIEnumerator(name: "AVCHROMA_LOC_TOPLEFT", value: 3)
!121 = !DIEnumerator(name: "AVCHROMA_LOC_TOP", value: 4)
!122 = !DIEnumerator(name: "AVCHROMA_LOC_BOTTOMLEFT", value: 5)
!123 = !DIEnumerator(name: "AVCHROMA_LOC_BOTTOM", value: 6)
!124 = !DIEnumerator(name: "AVCHROMA_LOC_NB", value: 7)
!125 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVOptionType", file: !126, line: 221, size: 32, align: 32, elements: !127)
!126 = !DIFile(filename: "./libavutil/opt.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!127 = !{!128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146}
!128 = !DIEnumerator(name: "AV_OPT_TYPE_FLAGS", value: 0)
!129 = !DIEnumerator(name: "AV_OPT_TYPE_INT", value: 1)
!130 = !DIEnumerator(name: "AV_OPT_TYPE_INT64", value: 2)
!131 = !DIEnumerator(name: "AV_OPT_TYPE_DOUBLE", value: 3)
!132 = !DIEnumerator(name: "AV_OPT_TYPE_FLOAT", value: 4)
!133 = !DIEnumerator(name: "AV_OPT_TYPE_STRING", value: 5)
!134 = !DIEnumerator(name: "AV_OPT_TYPE_RATIONAL", value: 6)
!135 = !DIEnumerator(name: "AV_OPT_TYPE_BINARY", value: 7)
!136 = !DIEnumerator(name: "AV_OPT_TYPE_DICT", value: 8)
!137 = !DIEnumerator(name: "AV_OPT_TYPE_UINT64", value: 9)
!138 = !DIEnumerator(name: "AV_OPT_TYPE_CONST", value: 10)
!139 = !DIEnumerator(name: "AV_OPT_TYPE_IMAGE_SIZE", value: 11)
!140 = !DIEnumerator(name: "AV_OPT_TYPE_PIXEL_FMT", value: 12)
!141 = !DIEnumerator(name: "AV_OPT_TYPE_SAMPLE_FMT", value: 13)
!142 = !DIEnumerator(name: "AV_OPT_TYPE_VIDEO_RATE", value: 14)
!143 = !DIEnumerator(name: "AV_OPT_TYPE_DURATION", value: 15)
!144 = !DIEnumerator(name: "AV_OPT_TYPE_COLOR", value: 16)
!145 = !DIEnumerator(name: "AV_OPT_TYPE_CHANNEL_LAYOUT", value: 17)
!146 = !DIEnumerator(name: "AV_OPT_TYPE_BOOL", value: 18)
!147 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !148, line: 29, size: 32, align: 32, elements: !149)
!148 = !DIFile(filename: "./libavutil/log.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!149 = !{!150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167}
!150 = !DIEnumerator(name: "AV_CLASS_CATEGORY_NA", value: 0)
!151 = !DIEnumerator(name: "AV_CLASS_CATEGORY_INPUT", value: 1)
!152 = !DIEnumerator(name: "AV_CLASS_CATEGORY_OUTPUT", value: 2)
!153 = !DIEnumerator(name: "AV_CLASS_CATEGORY_MUXER", value: 3)
!154 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEMUXER", value: 4)
!155 = !DIEnumerator(name: "AV_CLASS_CATEGORY_ENCODER", value: 5)
!156 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DECODER", value: 6)
!157 = !DIEnumerator(name: "AV_CLASS_CATEGORY_FILTER", value: 7)
!158 = !DIEnumerator(name: "AV_CLASS_CATEGORY_BITSTREAM_FILTER", value: 8)
!159 = !DIEnumerator(name: "AV_CLASS_CATEGORY_SWSCALER", value: 9)
!160 = !DIEnumerator(name: "AV_CLASS_CATEGORY_SWRESAMPLER", value: 10)
!161 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT", value: 40)
!162 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT", value: 41)
!163 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT", value: 42)
!164 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT", value: 43)
!165 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_OUTPUT", value: 44)
!166 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_INPUT", value: 45)
!167 = !DIEnumerator(name: "AV_CLASS_CATEGORY_NB", value: 46)
!168 = !DICompositeType(tag: DW_TAG_enumeration_type, scope: !170, file: !169, line: 503, size: 32, align: 32, elements: !575)
!169 = !DIFile(filename: "libavfilter/avfilter.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!170 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterLink", file: !169, line: 439, size: 493504, align: 64, elements: !171)
!171 = !{!172, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !536, !537, !538, !539, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571}
!172 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !170, file: !169, line: 440, baseType: !173, size: 64, align: 64)
!173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64, align: 64)
!174 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilterContext", file: !169, line: 67, baseType: !175)
!175 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterContext", file: !169, line: 338, size: 1344, align: 64, elements: !176)
!176 = !{!177, !264, !436, !437, !439, !441, !443, !444, !445, !446, !447, !487, !488, !494, !503, !504, !505, !507, !508, !509, !510, !511}
!177 = !DIDerivedType(tag: DW_TAG_member, name: "av_class", scope: !175, file: !169, line: 339, baseType: !178, size: 64, align: 64)
!178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !179, size: 64, align: 64)
!179 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !180)
!180 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVClass", file: !148, line: 143, baseType: !181)
!181 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVClass", file: !148, line: 67, size: 640, align: 64, elements: !182)
!182 = !{!183, !187, !192, !223, !224, !225, !226, !230, !236, !238, !242}
!183 = !DIDerivedType(tag: DW_TAG_member, name: "class_name", scope: !181, file: !148, line: 72, baseType: !184, size: 64, align: 64)
!184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !185, size: 64, align: 64)
!185 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !186)
!186 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!187 = !DIDerivedType(tag: DW_TAG_member, name: "item_name", scope: !181, file: !148, line: 78, baseType: !188, size: 64, align: 64, offset: 64)
!188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !189, size: 64, align: 64)
!189 = !DISubroutineType(types: !190)
!190 = !{!184, !191}
!191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!192 = !DIDerivedType(tag: DW_TAG_member, name: "option", scope: !181, file: !148, line: 85, baseType: !193, size: 64, align: 64, offset: 128)
!193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !194, size: 64, align: 64)
!194 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !195)
!195 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVOption", file: !126, line: 246, size: 512, align: 64, elements: !196)
!196 = !{!197, !198, !199, !201, !202, !219, !220, !221, !222}
!197 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !195, file: !126, line: 247, baseType: !184, size: 64, align: 64)
!198 = !DIDerivedType(tag: DW_TAG_member, name: "help", scope: !195, file: !126, line: 253, baseType: !184, size: 64, align: 64, offset: 64)
!199 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !195, file: !126, line: 259, baseType: !200, size: 32, align: 32, offset: 128)
!200 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!201 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !195, file: !126, line: 260, baseType: !125, size: 32, align: 32, offset: 160)
!202 = !DIDerivedType(tag: DW_TAG_member, name: "default_val", scope: !195, file: !126, line: 271, baseType: !203, size: 64, align: 64, offset: 192)
!203 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !195, file: !126, line: 265, size: 64, align: 64, elements: !204)
!204 = !{!205, !209, !211, !212}
!205 = !DIDerivedType(tag: DW_TAG_member, name: "i64", scope: !203, file: !126, line: 266, baseType: !206, size: 64, align: 64)
!206 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !207, line: 40, baseType: !208)
!207 = !DIFile(filename: "/usr/include/stdint.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!208 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!209 = !DIDerivedType(tag: DW_TAG_member, name: "dbl", scope: !203, file: !126, line: 267, baseType: !210, size: 64, align: 64)
!210 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!211 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !203, file: !126, line: 268, baseType: !184, size: 64, align: 64)
!212 = !DIDerivedType(tag: DW_TAG_member, name: "q", scope: !203, file: !126, line: 270, baseType: !213, size: 64, align: 32)
!213 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVRational", file: !214, line: 61, baseType: !215)
!214 = !DIFile(filename: "./libavutil/rational.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!215 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVRational", file: !214, line: 58, size: 64, align: 32, elements: !216)
!216 = !{!217, !218}
!217 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !215, file: !214, line: 59, baseType: !200, size: 32, align: 32)
!218 = !DIDerivedType(tag: DW_TAG_member, name: "den", scope: !215, file: !214, line: 60, baseType: !200, size: 32, align: 32, offset: 32)
!219 = !DIDerivedType(tag: DW_TAG_member, name: "min", scope: !195, file: !126, line: 272, baseType: !210, size: 64, align: 64, offset: 256)
!220 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !195, file: !126, line: 273, baseType: !210, size: 64, align: 64, offset: 320)
!221 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !195, file: !126, line: 275, baseType: !200, size: 32, align: 32, offset: 384)
!222 = !DIDerivedType(tag: DW_TAG_member, name: "unit", scope: !195, file: !126, line: 300, baseType: !184, size: 64, align: 64, offset: 448)
!223 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !181, file: !148, line: 93, baseType: !200, size: 32, align: 32, offset: 192)
!224 = !DIDerivedType(tag: DW_TAG_member, name: "log_level_offset_offset", scope: !181, file: !148, line: 99, baseType: !200, size: 32, align: 32, offset: 224)
!225 = !DIDerivedType(tag: DW_TAG_member, name: "parent_log_context_offset", scope: !181, file: !148, line: 108, baseType: !200, size: 32, align: 32, offset: 256)
!226 = !DIDerivedType(tag: DW_TAG_member, name: "child_next", scope: !181, file: !148, line: 113, baseType: !227, size: 64, align: 64, offset: 320)
!227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !228, size: 64, align: 64)
!228 = !DISubroutineType(types: !229)
!229 = !{!191, !191, !191}
!230 = !DIDerivedType(tag: DW_TAG_member, name: "child_class_next", scope: !181, file: !148, line: 123, baseType: !231, size: 64, align: 64, offset: 384)
!231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !232, size: 64, align: 64)
!232 = !DISubroutineType(types: !233)
!233 = !{!234, !234}
!234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !235, size: 64, align: 64)
!235 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !181)
!236 = !DIDerivedType(tag: DW_TAG_member, name: "category", scope: !181, file: !148, line: 130, baseType: !237, size: 32, align: 32, offset: 448)
!237 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVClassCategory", file: !148, line: 48, baseType: !147)
!238 = !DIDerivedType(tag: DW_TAG_member, name: "get_category", scope: !181, file: !148, line: 136, baseType: !239, size: 64, align: 64, offset: 512)
!239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !240, size: 64, align: 64)
!240 = !DISubroutineType(types: !241)
!241 = !{!237, !191}
!242 = !DIDerivedType(tag: DW_TAG_member, name: "query_ranges", scope: !181, file: !148, line: 142, baseType: !243, size: 64, align: 64, offset: 576)
!243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !244, size: 64, align: 64)
!244 = !DISubroutineType(types: !245)
!245 = !{!200, !246, !191, !184, !200}
!246 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !247, size: 64, align: 64)
!247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !248, size: 64, align: 64)
!248 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVOptionRanges", file: !126, line: 329, size: 128, align: 64, elements: !249)
!249 = !{!250, !262, !263}
!250 = !DIDerivedType(tag: DW_TAG_member, name: "range", scope: !248, file: !126, line: 360, baseType: !251, size: 64, align: 64)
!251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !252, size: 64, align: 64)
!252 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !253, size: 64, align: 64)
!253 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVOptionRange", file: !126, line: 324, baseType: !254)
!254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVOptionRange", file: !126, line: 306, size: 384, align: 64, elements: !255)
!255 = !{!256, !257, !258, !259, !260, !261}
!256 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !254, file: !126, line: 307, baseType: !184, size: 64, align: 64)
!257 = !DIDerivedType(tag: DW_TAG_member, name: "value_min", scope: !254, file: !126, line: 313, baseType: !210, size: 64, align: 64, offset: 64)
!258 = !DIDerivedType(tag: DW_TAG_member, name: "value_max", scope: !254, file: !126, line: 313, baseType: !210, size: 64, align: 64, offset: 128)
!259 = !DIDerivedType(tag: DW_TAG_member, name: "component_min", scope: !254, file: !126, line: 318, baseType: !210, size: 64, align: 64, offset: 192)
!260 = !DIDerivedType(tag: DW_TAG_member, name: "component_max", scope: !254, file: !126, line: 318, baseType: !210, size: 64, align: 64, offset: 256)
!261 = !DIDerivedType(tag: DW_TAG_member, name: "is_range", scope: !254, file: !126, line: 323, baseType: !200, size: 32, align: 32, offset: 320)
!262 = !DIDerivedType(tag: DW_TAG_member, name: "nb_ranges", scope: !248, file: !126, line: 364, baseType: !200, size: 32, align: 32, offset: 64)
!263 = !DIDerivedType(tag: DW_TAG_member, name: "nb_components", scope: !248, file: !126, line: 368, baseType: !200, size: 32, align: 32, offset: 96)
!264 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !175, file: !169, line: 341, baseType: !265, size: 64, align: 64, offset: 64)
!265 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !266, size: 64, align: 64)
!266 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !267)
!267 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilter", file: !169, line: 328, baseType: !268)
!268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilter", file: !169, line: 144, size: 1024, align: 64, elements: !269)
!269 = !{!270, !271, !272, !404, !405, !406, !407, !411, !412, !417, !421, !422, !423, !424, !426, !431, !435}
!270 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !268, file: !169, line: 148, baseType: !184, size: 64, align: 64)
!271 = !DIDerivedType(tag: DW_TAG_member, name: "description", scope: !268, file: !169, line: 155, baseType: !184, size: 64, align: 64, offset: 64)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "inputs", scope: !268, file: !169, line: 164, baseType: !273, size: 64, align: 64, offset: 128)
!273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !274, size: 64, align: 64)
!274 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !275)
!275 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilterPad", file: !169, line: 69, baseType: !276)
!276 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterPad", file: !277, line: 54, size: 576, align: 64, elements: !278)
!277 = !DIFile(filename: "libavfilter/internal.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!278 = !{!279, !280, !281, !388, !392, !396, !400, !401, !402, !403}
!279 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !276, file: !277, line: 60, baseType: !184, size: 64, align: 64)
!280 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !276, file: !277, line: 65, baseType: !3, size: 32, align: 32, offset: 64)
!281 = !DIDerivedType(tag: DW_TAG_member, name: "get_video_buffer", scope: !276, file: !277, line: 73, baseType: !282, size: 64, align: 64, offset: 128)
!282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !283, size: 64, align: 64)
!283 = !DISubroutineType(types: !284)
!284 = !{!285, !386, !200, !200}
!285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !286, size: 64, align: 64)
!286 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFrame", file: !24, line: 646, baseType: !287)
!287 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFrame", file: !24, line: 268, size: 4288, align: 64, elements: !288)
!288 = !{!289, !296, !298, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !318, !319, !320, !321, !322, !323, !324, !325, !338, !340, !341, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !374, !375, !376, !377, !378, !379, !382, !383, !384, !385}
!289 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !287, file: !24, line: 282, baseType: !290, size: 512, align: 64)
!290 = !DICompositeType(tag: DW_TAG_array_type, baseType: !291, size: 512, align: 64, elements: !294)
!291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !292, size: 64, align: 64)
!292 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !207, line: 48, baseType: !293)
!293 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!294 = !{!295}
!295 = !DISubrange(count: 8)
!296 = !DIDerivedType(tag: DW_TAG_member, name: "linesize", scope: !287, file: !24, line: 299, baseType: !297, size: 256, align: 32, offset: 512)
!297 = !DICompositeType(tag: DW_TAG_array_type, baseType: !200, size: 256, align: 32, elements: !294)
!298 = !DIDerivedType(tag: DW_TAG_member, name: "extended_data", scope: !287, file: !24, line: 315, baseType: !299, size: 64, align: 64, offset: 768)
!299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !291, size: 64, align: 64)
!300 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !287, file: !24, line: 326, baseType: !200, size: 32, align: 32, offset: 832)
!301 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !287, file: !24, line: 326, baseType: !200, size: 32, align: 32, offset: 864)
!302 = !DIDerivedType(tag: DW_TAG_member, name: "nb_samples", scope: !287, file: !24, line: 334, baseType: !200, size: 32, align: 32, offset: 896)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !287, file: !24, line: 341, baseType: !200, size: 32, align: 32, offset: 928)
!304 = !DIDerivedType(tag: DW_TAG_member, name: "key_frame", scope: !287, file: !24, line: 346, baseType: !200, size: 32, align: 32, offset: 960)
!305 = !DIDerivedType(tag: DW_TAG_member, name: "pict_type", scope: !287, file: !24, line: 351, baseType: !13, size: 32, align: 32, offset: 992)
!306 = !DIDerivedType(tag: DW_TAG_member, name: "sample_aspect_ratio", scope: !287, file: !24, line: 356, baseType: !213, size: 64, align: 32, offset: 1024)
!307 = !DIDerivedType(tag: DW_TAG_member, name: "pts", scope: !287, file: !24, line: 361, baseType: !206, size: 64, align: 64, offset: 1088)
!308 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_pts", scope: !287, file: !24, line: 369, baseType: !206, size: 64, align: 64, offset: 1152)
!309 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_dts", scope: !287, file: !24, line: 377, baseType: !206, size: 64, align: 64, offset: 1216)
!310 = !DIDerivedType(tag: DW_TAG_member, name: "coded_picture_number", scope: !287, file: !24, line: 382, baseType: !200, size: 32, align: 32, offset: 1280)
!311 = !DIDerivedType(tag: DW_TAG_member, name: "display_picture_number", scope: !287, file: !24, line: 386, baseType: !200, size: 32, align: 32, offset: 1312)
!312 = !DIDerivedType(tag: DW_TAG_member, name: "quality", scope: !287, file: !24, line: 391, baseType: !200, size: 32, align: 32, offset: 1344)
!313 = !DIDerivedType(tag: DW_TAG_member, name: "opaque", scope: !287, file: !24, line: 396, baseType: !191, size: 64, align: 64, offset: 1408)
!314 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !287, file: !24, line: 403, baseType: !315, size: 512, align: 64, offset: 1472)
!315 = !DICompositeType(tag: DW_TAG_array_type, baseType: !316, size: 512, align: 64, elements: !294)
!316 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !207, line: 55, baseType: !317)
!317 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!318 = !DIDerivedType(tag: DW_TAG_member, name: "repeat_pict", scope: !287, file: !24, line: 410, baseType: !200, size: 32, align: 32, offset: 1984)
!319 = !DIDerivedType(tag: DW_TAG_member, name: "interlaced_frame", scope: !287, file: !24, line: 415, baseType: !200, size: 32, align: 32, offset: 2016)
!320 = !DIDerivedType(tag: DW_TAG_member, name: "top_field_first", scope: !287, file: !24, line: 420, baseType: !200, size: 32, align: 32, offset: 2048)
!321 = !DIDerivedType(tag: DW_TAG_member, name: "palette_has_changed", scope: !287, file: !24, line: 425, baseType: !200, size: 32, align: 32, offset: 2080)
!322 = !DIDerivedType(tag: DW_TAG_member, name: "reordered_opaque", scope: !287, file: !24, line: 435, baseType: !206, size: 64, align: 64, offset: 2112)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !287, file: !24, line: 440, baseType: !200, size: 32, align: 32, offset: 2176)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layout", scope: !287, file: !24, line: 445, baseType: !316, size: 64, align: 64, offset: 2240)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !287, file: !24, line: 459, baseType: !326, size: 512, align: 64, offset: 2304)
!326 = !DICompositeType(tag: DW_TAG_array_type, baseType: !327, size: 512, align: 64, elements: !294)
!327 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !328, size: 64, align: 64)
!328 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBufferRef", file: !329, line: 94, baseType: !330)
!329 = !DIFile(filename: "./libavutil/buffer.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVBufferRef", file: !329, line: 81, size: 192, align: 64, elements: !331)
!331 = !{!332, !336, !337}
!332 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !330, file: !329, line: 82, baseType: !333, size: 64, align: 64)
!333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !334, size: 64, align: 64)
!334 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBuffer", file: !329, line: 73, baseType: !335)
!335 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVBuffer", file: !329, line: 73, flags: DIFlagFwdDecl)
!336 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !330, file: !329, line: 89, baseType: !291, size: 64, align: 64, offset: 64)
!337 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !330, file: !329, line: 93, baseType: !200, size: 32, align: 32, offset: 128)
!338 = !DIDerivedType(tag: DW_TAG_member, name: "extended_buf", scope: !287, file: !24, line: 473, baseType: !339, size: 64, align: 64, offset: 2816)
!339 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !327, size: 64, align: 64)
!340 = !DIDerivedType(tag: DW_TAG_member, name: "nb_extended_buf", scope: !287, file: !24, line: 477, baseType: !200, size: 32, align: 32, offset: 2880)
!341 = !DIDerivedType(tag: DW_TAG_member, name: "side_data", scope: !287, file: !24, line: 479, baseType: !342, size: 64, align: 64, offset: 2944)
!342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !343, size: 64, align: 64)
!343 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !344, size: 64, align: 64)
!344 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFrameSideData", file: !24, line: 207, baseType: !345)
!345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFrameSideData", file: !24, line: 201, size: 320, align: 64, elements: !346)
!346 = !{!347, !348, !349, !350, !355}
!347 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !345, file: !24, line: 202, baseType: !23, size: 32, align: 32)
!348 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !345, file: !24, line: 203, baseType: !291, size: 64, align: 64, offset: 64)
!349 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !345, file: !24, line: 204, baseType: !200, size: 32, align: 32, offset: 128)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "metadata", scope: !345, file: !24, line: 205, baseType: !351, size: 64, align: 64, offset: 192)
!351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !352, size: 64, align: 64)
!352 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVDictionary", file: !353, line: 86, baseType: !354)
!353 = !DIFile(filename: "./libavutil/dict.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!354 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVDictionary", file: !353, line: 86, flags: DIFlagFwdDecl)
!355 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !345, file: !24, line: 206, baseType: !327, size: 64, align: 64, offset: 256)
!356 = !DIDerivedType(tag: DW_TAG_member, name: "nb_side_data", scope: !287, file: !24, line: 480, baseType: !200, size: 32, align: 32, offset: 3008)
!357 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !287, file: !24, line: 505, baseType: !200, size: 32, align: 32, offset: 3040)
!358 = !DIDerivedType(tag: DW_TAG_member, name: "color_range", scope: !287, file: !24, line: 512, baseType: !47, size: 32, align: 32, offset: 3072)
!359 = !DIDerivedType(tag: DW_TAG_member, name: "color_primaries", scope: !287, file: !24, line: 514, baseType: !54, size: 32, align: 32, offset: 3104)
!360 = !DIDerivedType(tag: DW_TAG_member, name: "color_trc", scope: !287, file: !24, line: 516, baseType: !72, size: 32, align: 32, offset: 3136)
!361 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace", scope: !287, file: !24, line: 523, baseType: !96, size: 32, align: 32, offset: 3168)
!362 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_location", scope: !287, file: !24, line: 525, baseType: !115, size: 32, align: 32, offset: 3200)
!363 = !DIDerivedType(tag: DW_TAG_member, name: "best_effort_timestamp", scope: !287, file: !24, line: 532, baseType: !206, size: 64, align: 64, offset: 3264)
!364 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_pos", scope: !287, file: !24, line: 539, baseType: !206, size: 64, align: 64, offset: 3328)
!365 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_duration", scope: !287, file: !24, line: 547, baseType: !206, size: 64, align: 64, offset: 3392)
!366 = !DIDerivedType(tag: DW_TAG_member, name: "metadata", scope: !287, file: !24, line: 554, baseType: !351, size: 64, align: 64, offset: 3456)
!367 = !DIDerivedType(tag: DW_TAG_member, name: "decode_error_flags", scope: !287, file: !24, line: 563, baseType: !200, size: 32, align: 32, offset: 3520)
!368 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !287, file: !24, line: 572, baseType: !200, size: 32, align: 32, offset: 3552)
!369 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_size", scope: !287, file: !24, line: 581, baseType: !200, size: 32, align: 32, offset: 3584)
!370 = !DIDerivedType(tag: DW_TAG_member, name: "qscale_table", scope: !287, file: !24, line: 588, baseType: !371, size: 64, align: 64, offset: 3648)
!371 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !372, size: 64, align: 64)
!372 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !207, line: 36, baseType: !373)
!373 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!374 = !DIDerivedType(tag: DW_TAG_member, name: "qstride", scope: !287, file: !24, line: 593, baseType: !200, size: 32, align: 32, offset: 3712)
!375 = !DIDerivedType(tag: DW_TAG_member, name: "qscale_type", scope: !287, file: !24, line: 596, baseType: !200, size: 32, align: 32, offset: 3744)
!376 = !DIDerivedType(tag: DW_TAG_member, name: "qp_table_buf", scope: !287, file: !24, line: 599, baseType: !327, size: 64, align: 64, offset: 3776)
!377 = !DIDerivedType(tag: DW_TAG_member, name: "hw_frames_ctx", scope: !287, file: !24, line: 605, baseType: !327, size: 64, align: 64, offset: 3840)
!378 = !DIDerivedType(tag: DW_TAG_member, name: "opaque_ref", scope: !287, file: !24, line: 616, baseType: !327, size: 64, align: 64, offset: 3904)
!379 = !DIDerivedType(tag: DW_TAG_member, name: "crop_top", scope: !287, file: !24, line: 626, baseType: !380, size: 64, align: 64, offset: 3968)
!380 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !381, line: 216, baseType: !317)
!381 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!382 = !DIDerivedType(tag: DW_TAG_member, name: "crop_bottom", scope: !287, file: !24, line: 627, baseType: !380, size: 64, align: 64, offset: 4032)
!383 = !DIDerivedType(tag: DW_TAG_member, name: "crop_left", scope: !287, file: !24, line: 628, baseType: !380, size: 64, align: 64, offset: 4096)
!384 = !DIDerivedType(tag: DW_TAG_member, name: "crop_right", scope: !287, file: !24, line: 629, baseType: !380, size: 64, align: 64, offset: 4160)
!385 = !DIDerivedType(tag: DW_TAG_member, name: "private_ref", scope: !287, file: !24, line: 645, baseType: !327, size: 64, align: 64, offset: 4224)
!386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !387, size: 64, align: 64)
!387 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilterLink", file: !169, line: 68, baseType: !170)
!388 = !DIDerivedType(tag: DW_TAG_member, name: "get_audio_buffer", scope: !276, file: !277, line: 81, baseType: !389, size: 64, align: 64, offset: 192)
!389 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !390, size: 64, align: 64)
!390 = !DISubroutineType(types: !391)
!391 = !{!285, !386, !200}
!392 = !DIDerivedType(tag: DW_TAG_member, name: "filter_frame", scope: !276, file: !277, line: 93, baseType: !393, size: 64, align: 64, offset: 256)
!393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !394, size: 64, align: 64)
!394 = !DISubroutineType(types: !395)
!395 = !{!200, !386, !285}
!396 = !DIDerivedType(tag: DW_TAG_member, name: "poll_frame", scope: !276, file: !277, line: 104, baseType: !397, size: 64, align: 64, offset: 320)
!397 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !398, size: 64, align: 64)
!398 = !DISubroutineType(types: !399)
!399 = !{!200, !386}
!400 = !DIDerivedType(tag: DW_TAG_member, name: "request_frame", scope: !276, file: !277, line: 113, baseType: !397, size: 64, align: 64, offset: 384)
!401 = !DIDerivedType(tag: DW_TAG_member, name: "config_props", scope: !276, file: !277, line: 129, baseType: !397, size: 64, align: 64, offset: 448)
!402 = !DIDerivedType(tag: DW_TAG_member, name: "needs_fifo", scope: !276, file: !277, line: 137, baseType: !200, size: 32, align: 32, offset: 512)
!403 = !DIDerivedType(tag: DW_TAG_member, name: "needs_writable", scope: !276, file: !277, line: 145, baseType: !200, size: 32, align: 32, offset: 544)
!404 = !DIDerivedType(tag: DW_TAG_member, name: "outputs", scope: !268, file: !169, line: 172, baseType: !273, size: 64, align: 64, offset: 192)
!405 = !DIDerivedType(tag: DW_TAG_member, name: "priv_class", scope: !268, file: !169, line: 182, baseType: !178, size: 64, align: 64, offset: 256)
!406 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !268, file: !169, line: 187, baseType: !200, size: 32, align: 32, offset: 320)
!407 = !DIDerivedType(tag: DW_TAG_member, name: "preinit", scope: !268, file: !169, line: 210, baseType: !408, size: 64, align: 64, offset: 384)
!408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !409, size: 64, align: 64)
!409 = !DISubroutineType(types: !410)
!410 = !{!200, !173}
!411 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !268, file: !169, line: 233, baseType: !408, size: 64, align: 64, offset: 448)
!412 = !DIDerivedType(tag: DW_TAG_member, name: "init_dict", scope: !268, file: !169, line: 246, baseType: !413, size: 64, align: 64, offset: 512)
!413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !414, size: 64, align: 64)
!414 = !DISubroutineType(types: !415)
!415 = !{!200, !173, !416}
!416 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !351, size: 64, align: 64)
!417 = !DIDerivedType(tag: DW_TAG_member, name: "uninit", scope: !268, file: !169, line: 258, baseType: !418, size: 64, align: 64, offset: 576)
!418 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !419, size: 64, align: 64)
!419 = !DISubroutineType(types: !420)
!420 = !{null, !173}
!421 = !DIDerivedType(tag: DW_TAG_member, name: "query_formats", scope: !268, file: !169, line: 282, baseType: !408, size: 64, align: 64, offset: 640)
!422 = !DIDerivedType(tag: DW_TAG_member, name: "priv_size", scope: !268, file: !169, line: 284, baseType: !200, size: 32, align: 32, offset: 704)
!423 = !DIDerivedType(tag: DW_TAG_member, name: "flags_internal", scope: !268, file: !169, line: 286, baseType: !200, size: 32, align: 32, offset: 736)
!424 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !268, file: !169, line: 292, baseType: !425, size: 64, align: 64, offset: 768)
!425 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !268, size: 64, align: 64)
!426 = !DIDerivedType(tag: DW_TAG_member, name: "process_command", scope: !268, file: !169, line: 306, baseType: !427, size: 64, align: 64, offset: 832)
!427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !428, size: 64, align: 64)
!428 = !DISubroutineType(types: !429)
!429 = !{!200, !173, !184, !184, !430, !200, !200}
!430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !186, size: 64, align: 64)
!431 = !DIDerivedType(tag: DW_TAG_member, name: "init_opaque", scope: !268, file: !169, line: 313, baseType: !432, size: 64, align: 64, offset: 896)
!432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !433, size: 64, align: 64)
!433 = !DISubroutineType(types: !434)
!434 = !{!200, !173, !191}
!435 = !DIDerivedType(tag: DW_TAG_member, name: "activate", scope: !268, file: !169, line: 327, baseType: !408, size: 64, align: 64, offset: 960)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !175, file: !169, line: 343, baseType: !430, size: 64, align: 64, offset: 128)
!437 = !DIDerivedType(tag: DW_TAG_member, name: "input_pads", scope: !175, file: !169, line: 345, baseType: !438, size: 64, align: 64, offset: 192)
!438 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !275, size: 64, align: 64)
!439 = !DIDerivedType(tag: DW_TAG_member, name: "inputs", scope: !175, file: !169, line: 346, baseType: !440, size: 64, align: 64, offset: 256)
!440 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !386, size: 64, align: 64)
!441 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inputs", scope: !175, file: !169, line: 347, baseType: !442, size: 32, align: 32, offset: 320)
!442 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!443 = !DIDerivedType(tag: DW_TAG_member, name: "output_pads", scope: !175, file: !169, line: 349, baseType: !438, size: 64, align: 64, offset: 384)
!444 = !DIDerivedType(tag: DW_TAG_member, name: "outputs", scope: !175, file: !169, line: 350, baseType: !440, size: 64, align: 64, offset: 448)
!445 = !DIDerivedType(tag: DW_TAG_member, name: "nb_outputs", scope: !175, file: !169, line: 351, baseType: !442, size: 32, align: 32, offset: 512)
!446 = !DIDerivedType(tag: DW_TAG_member, name: "priv", scope: !175, file: !169, line: 353, baseType: !191, size: 64, align: 64, offset: 576)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "graph", scope: !175, file: !169, line: 355, baseType: !448, size: 64, align: 64, offset: 640)
!448 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !449, size: 64, align: 64)
!449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterGraph", file: !169, line: 840, size: 768, align: 64, elements: !450)
!450 = !{!451, !452, !454, !455, !456, !457, !458, !459, !481, !482, !483, !484, !485, !486}
!451 = !DIDerivedType(tag: DW_TAG_member, name: "av_class", scope: !449, file: !169, line: 841, baseType: !178, size: 64, align: 64)
!452 = !DIDerivedType(tag: DW_TAG_member, name: "filters", scope: !449, file: !169, line: 842, baseType: !453, size: 64, align: 64, offset: 64)
!453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !173, size: 64, align: 64)
!454 = !DIDerivedType(tag: DW_TAG_member, name: "nb_filters", scope: !449, file: !169, line: 843, baseType: !442, size: 32, align: 32, offset: 128)
!455 = !DIDerivedType(tag: DW_TAG_member, name: "scale_sws_opts", scope: !449, file: !169, line: 845, baseType: !430, size: 64, align: 64, offset: 192)
!456 = !DIDerivedType(tag: DW_TAG_member, name: "resample_lavr_opts", scope: !449, file: !169, line: 847, baseType: !430, size: 64, align: 64, offset: 256)
!457 = !DIDerivedType(tag: DW_TAG_member, name: "thread_type", scope: !449, file: !169, line: 862, baseType: !200, size: 32, align: 32, offset: 320)
!458 = !DIDerivedType(tag: DW_TAG_member, name: "nb_threads", scope: !449, file: !169, line: 869, baseType: !200, size: 32, align: 32, offset: 352)
!459 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !449, file: !169, line: 874, baseType: !460, size: 64, align: 64, offset: 384)
!460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !461, size: 64, align: 64)
!461 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilterGraphInternal", file: !169, line: 809, baseType: !462)
!462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterGraphInternal", file: !277, line: 148, size: 192, align: 64, elements: !463)
!463 = !{!464, !465, !475}
!464 = !DIDerivedType(tag: DW_TAG_member, name: "thread", scope: !462, file: !277, line: 149, baseType: !191, size: 64, align: 64)
!465 = !DIDerivedType(tag: DW_TAG_member, name: "thread_execute", scope: !462, file: !277, line: 150, baseType: !466, size: 64, align: 64, offset: 64)
!466 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !467, size: 64, align: 64)
!467 = !DIDerivedType(tag: DW_TAG_typedef, name: "avfilter_execute_func", file: !169, line: 837, baseType: !468)
!468 = !DISubroutineType(types: !469)
!469 = !{!200, !173, !470, !191, !474, !200}
!470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !471, size: 64, align: 64)
!471 = !DIDerivedType(tag: DW_TAG_typedef, name: "avfilter_action_func", file: !169, line: 823, baseType: !472)
!472 = !DISubroutineType(types: !473)
!473 = !{!200, !173, !191, !200, !200}
!474 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !200, size: 64, align: 64)
!475 = !DIDerivedType(tag: DW_TAG_member, name: "frame_queues", scope: !462, file: !277, line: 151, baseType: !476, size: 8, align: 8, offset: 128)
!476 = !DIDerivedType(tag: DW_TAG_typedef, name: "FFFrameQueueGlobal", file: !477, line: 48, baseType: !478)
!477 = !DIFile(filename: "libavfilter/framequeue.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!478 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FFFrameQueueGlobal", file: !477, line: 46, size: 8, align: 8, elements: !479)
!479 = !{!480}
!480 = !DIDerivedType(tag: DW_TAG_member, name: "dummy", scope: !478, file: !477, line: 47, baseType: !186, size: 8, align: 8)
!481 = !DIDerivedType(tag: DW_TAG_member, name: "opaque", scope: !449, file: !169, line: 881, baseType: !191, size: 64, align: 64, offset: 448)
!482 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !449, file: !169, line: 895, baseType: !466, size: 64, align: 64, offset: 512)
!483 = !DIDerivedType(tag: DW_TAG_member, name: "aresample_swr_opts", scope: !449, file: !169, line: 897, baseType: !430, size: 64, align: 64, offset: 576)
!484 = !DIDerivedType(tag: DW_TAG_member, name: "sink_links", scope: !449, file: !169, line: 906, baseType: !440, size: 64, align: 64, offset: 640)
!485 = !DIDerivedType(tag: DW_TAG_member, name: "sink_links_count", scope: !449, file: !169, line: 907, baseType: !200, size: 32, align: 32, offset: 704)
!486 = !DIDerivedType(tag: DW_TAG_member, name: "disable_auto_convert", scope: !449, file: !169, line: 909, baseType: !442, size: 32, align: 32, offset: 736)
!487 = !DIDerivedType(tag: DW_TAG_member, name: "thread_type", scope: !175, file: !169, line: 373, baseType: !200, size: 32, align: 32, offset: 704)
!488 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !175, file: !169, line: 378, baseType: !489, size: 64, align: 64, offset: 768)
!489 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !490, size: 64, align: 64)
!490 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilterInternal", file: !169, line: 335, baseType: !491)
!491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterInternal", file: !277, line: 154, size: 64, align: 64, elements: !492)
!492 = !{!493}
!493 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !491, file: !277, line: 155, baseType: !466, size: 64, align: 64)
!494 = !DIDerivedType(tag: DW_TAG_member, name: "command_queue", scope: !175, file: !169, line: 380, baseType: !495, size: 64, align: 64, offset: 832)
!495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !496, size: 64, align: 64)
!496 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterCommand", file: !277, line: 38, size: 320, align: 64, elements: !497)
!497 = !{!498, !499, !500, !501, !502}
!498 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !496, file: !277, line: 39, baseType: !210, size: 64, align: 64)
!499 = !DIDerivedType(tag: DW_TAG_member, name: "command", scope: !496, file: !277, line: 40, baseType: !430, size: 64, align: 64, offset: 64)
!500 = !DIDerivedType(tag: DW_TAG_member, name: "arg", scope: !496, file: !277, line: 41, baseType: !430, size: 64, align: 64, offset: 128)
!501 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !496, file: !277, line: 42, baseType: !200, size: 32, align: 32, offset: 192)
!502 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !496, file: !277, line: 43, baseType: !495, size: 64, align: 64, offset: 256)
!503 = !DIDerivedType(tag: DW_TAG_member, name: "enable_str", scope: !175, file: !169, line: 382, baseType: !430, size: 64, align: 64, offset: 896)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "enable", scope: !175, file: !169, line: 383, baseType: !191, size: 64, align: 64, offset: 960)
!505 = !DIDerivedType(tag: DW_TAG_member, name: "var_values", scope: !175, file: !169, line: 384, baseType: !506, size: 64, align: 64, offset: 1024)
!506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !210, size: 64, align: 64)
!507 = !DIDerivedType(tag: DW_TAG_member, name: "is_disabled", scope: !175, file: !169, line: 385, baseType: !200, size: 32, align: 32, offset: 1088)
!508 = !DIDerivedType(tag: DW_TAG_member, name: "hw_device_ctx", scope: !175, file: !169, line: 394, baseType: !327, size: 64, align: 64, offset: 1152)
!509 = !DIDerivedType(tag: DW_TAG_member, name: "nb_threads", scope: !175, file: !169, line: 401, baseType: !200, size: 32, align: 32, offset: 1216)
!510 = !DIDerivedType(tag: DW_TAG_member, name: "ready", scope: !175, file: !169, line: 408, baseType: !442, size: 32, align: 32, offset: 1248)
!511 = !DIDerivedType(tag: DW_TAG_member, name: "extra_hw_frames", scope: !175, file: !169, line: 424, baseType: !200, size: 32, align: 32, offset: 1280)
!512 = !DIDerivedType(tag: DW_TAG_member, name: "srcpad", scope: !170, file: !169, line: 441, baseType: !438, size: 64, align: 64, offset: 64)
!513 = !DIDerivedType(tag: DW_TAG_member, name: "dst", scope: !170, file: !169, line: 443, baseType: !173, size: 64, align: 64, offset: 128)
!514 = !DIDerivedType(tag: DW_TAG_member, name: "dstpad", scope: !170, file: !169, line: 444, baseType: !438, size: 64, align: 64, offset: 192)
!515 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !170, file: !169, line: 446, baseType: !3, size: 32, align: 32, offset: 256)
!516 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !170, file: !169, line: 449, baseType: !200, size: 32, align: 32, offset: 288)
!517 = !DIDerivedType(tag: DW_TAG_member, name: "h", scope: !170, file: !169, line: 450, baseType: !200, size: 32, align: 32, offset: 320)
!518 = !DIDerivedType(tag: DW_TAG_member, name: "sample_aspect_ratio", scope: !170, file: !169, line: 451, baseType: !213, size: 64, align: 32, offset: 352)
!519 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layout", scope: !170, file: !169, line: 453, baseType: !316, size: 64, align: 64, offset: 448)
!520 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !170, file: !169, line: 454, baseType: !200, size: 32, align: 32, offset: 512)
!521 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !170, file: !169, line: 456, baseType: !200, size: 32, align: 32, offset: 544)
!522 = !DIDerivedType(tag: DW_TAG_member, name: "time_base", scope: !170, file: !169, line: 465, baseType: !213, size: 64, align: 32, offset: 576)
!523 = !DIDerivedType(tag: DW_TAG_member, name: "in_formats", scope: !170, file: !169, line: 481, baseType: !524, size: 64, align: 64, offset: 640)
!524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !525, size: 64, align: 64)
!525 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilterFormats", file: !169, line: 70, baseType: !526)
!526 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterFormats", file: !527, line: 64, size: 256, align: 64, elements: !528)
!527 = !DIFile(filename: "libavfilter/formats.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!528 = !{!529, !530, !531, !532}
!529 = !DIDerivedType(tag: DW_TAG_member, name: "nb_formats", scope: !526, file: !527, line: 65, baseType: !442, size: 32, align: 32)
!530 = !DIDerivedType(tag: DW_TAG_member, name: "formats", scope: !526, file: !527, line: 66, baseType: !474, size: 64, align: 64, offset: 64)
!531 = !DIDerivedType(tag: DW_TAG_member, name: "refcount", scope: !526, file: !527, line: 68, baseType: !442, size: 32, align: 32, offset: 128)
!532 = !DIDerivedType(tag: DW_TAG_member, name: "refs", scope: !526, file: !527, line: 69, baseType: !533, size: 64, align: 64, offset: 192)
!533 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !534, size: 64, align: 64)
!534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !535, size: 64, align: 64)
!535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !526, size: 64, align: 64)
!536 = !DIDerivedType(tag: DW_TAG_member, name: "out_formats", scope: !170, file: !169, line: 482, baseType: !524, size: 64, align: 64, offset: 704)
!537 = !DIDerivedType(tag: DW_TAG_member, name: "in_samplerates", scope: !170, file: !169, line: 488, baseType: !524, size: 64, align: 64, offset: 768)
!538 = !DIDerivedType(tag: DW_TAG_member, name: "out_samplerates", scope: !170, file: !169, line: 489, baseType: !524, size: 64, align: 64, offset: 832)
!539 = !DIDerivedType(tag: DW_TAG_member, name: "in_channel_layouts", scope: !170, file: !169, line: 490, baseType: !540, size: 64, align: 64, offset: 896)
!540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !541, size: 64, align: 64)
!541 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterChannelLayouts", file: !527, line: 85, size: 256, align: 64, elements: !542)
!542 = !{!543, !545, !546, !547, !548, !549}
!543 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layouts", scope: !541, file: !527, line: 86, baseType: !544, size: 64, align: 64)
!544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !316, size: 64, align: 64)
!545 = !DIDerivedType(tag: DW_TAG_member, name: "nb_channel_layouts", scope: !541, file: !527, line: 87, baseType: !200, size: 32, align: 32, offset: 64)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "all_layouts", scope: !541, file: !527, line: 88, baseType: !186, size: 8, align: 8, offset: 96)
!547 = !DIDerivedType(tag: DW_TAG_member, name: "all_counts", scope: !541, file: !527, line: 89, baseType: !186, size: 8, align: 8, offset: 104)
!548 = !DIDerivedType(tag: DW_TAG_member, name: "refcount", scope: !541, file: !527, line: 91, baseType: !442, size: 32, align: 32, offset: 128)
!549 = !DIDerivedType(tag: DW_TAG_member, name: "refs", scope: !541, file: !527, line: 92, baseType: !550, size: 64, align: 64, offset: 192)
!550 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !551, size: 64, align: 64)
!551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !540, size: 64, align: 64)
!552 = !DIDerivedType(tag: DW_TAG_member, name: "out_channel_layouts", scope: !170, file: !169, line: 491, baseType: !540, size: 64, align: 64, offset: 960)
!553 = !DIDerivedType(tag: DW_TAG_member, name: "request_samples", scope: !170, file: !169, line: 500, baseType: !200, size: 32, align: 32, offset: 1024)
!554 = !DIDerivedType(tag: DW_TAG_member, name: "init_state", scope: !170, file: !169, line: 507, baseType: !168, size: 32, align: 32, offset: 1056)
!555 = !DIDerivedType(tag: DW_TAG_member, name: "graph", scope: !170, file: !169, line: 512, baseType: !448, size: 64, align: 64, offset: 1088)
!556 = !DIDerivedType(tag: DW_TAG_member, name: "current_pts", scope: !170, file: !169, line: 518, baseType: !206, size: 64, align: 64, offset: 1152)
!557 = !DIDerivedType(tag: DW_TAG_member, name: "current_pts_us", scope: !170, file: !169, line: 524, baseType: !206, size: 64, align: 64, offset: 1216)
!558 = !DIDerivedType(tag: DW_TAG_member, name: "age_index", scope: !170, file: !169, line: 529, baseType: !200, size: 32, align: 32, offset: 1280)
!559 = !DIDerivedType(tag: DW_TAG_member, name: "frame_rate", scope: !170, file: !169, line: 542, baseType: !213, size: 64, align: 32, offset: 1312)
!560 = !DIDerivedType(tag: DW_TAG_member, name: "partial_buf", scope: !170, file: !169, line: 547, baseType: !285, size: 64, align: 64, offset: 1408)
!561 = !DIDerivedType(tag: DW_TAG_member, name: "partial_buf_size", scope: !170, file: !169, line: 553, baseType: !200, size: 32, align: 32, offset: 1472)
!562 = !DIDerivedType(tag: DW_TAG_member, name: "min_samples", scope: !170, file: !169, line: 562, baseType: !200, size: 32, align: 32, offset: 1504)
!563 = !DIDerivedType(tag: DW_TAG_member, name: "max_samples", scope: !170, file: !169, line: 568, baseType: !200, size: 32, align: 32, offset: 1536)
!564 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !170, file: !169, line: 573, baseType: !200, size: 32, align: 32, offset: 1568)
!565 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !170, file: !169, line: 578, baseType: !442, size: 32, align: 32, offset: 1600)
!566 = !DIDerivedType(tag: DW_TAG_member, name: "frame_count_in", scope: !170, file: !169, line: 583, baseType: !206, size: 64, align: 64, offset: 1664)
!567 = !DIDerivedType(tag: DW_TAG_member, name: "frame_count_out", scope: !170, file: !169, line: 583, baseType: !206, size: 64, align: 64, offset: 1728)
!568 = !DIDerivedType(tag: DW_TAG_member, name: "frame_pool", scope: !170, file: !169, line: 588, baseType: !191, size: 64, align: 64, offset: 1792)
!569 = !DIDerivedType(tag: DW_TAG_member, name: "frame_wanted_out", scope: !170, file: !169, line: 595, baseType: !200, size: 32, align: 32, offset: 1856)
!570 = !DIDerivedType(tag: DW_TAG_member, name: "hw_frames_ctx", scope: !170, file: !169, line: 601, baseType: !327, size: 64, align: 64, offset: 1920)
!571 = !DIDerivedType(tag: DW_TAG_member, name: "reserved", scope: !170, file: !169, line: 610, baseType: !572, size: 491520, align: 8, offset: 1984)
!572 = !DICompositeType(tag: DW_TAG_array_type, baseType: !186, size: 491520, align: 8, elements: !573)
!573 = !{!574}
!574 = !DISubrange(count: 61440)
!575 = !{!576, !577, !578}
!576 = !DIEnumerator(name: "AVLINK_UNINIT", value: 0)
!577 = !DIEnumerator(name: "AVLINK_STARTINIT", value: 1)
!578 = !DIEnumerator(name: "AVLINK_INIT", value: 2)
!579 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !580, line: 890, size: 32, align: 32, elements: !581)
!580 = !DIFile(filename: "libavfilter/af_hdcd.c", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!581 = !{!582, !583, !584}
!582 = !DIEnumerator(name: "HDCD_NONE", value: 0)
!583 = !DIEnumerator(name: "HDCD_NO_EFFECT", value: 1)
!584 = !DIEnumerator(name: "HDCD_EFFECTUAL", value: 2)
!585 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !580, line: 896, size: 32, align: 32, elements: !586)
!586 = !{!587, !588, !589, !590}
!587 = !DIEnumerator(name: "HDCD_PVER_NONE", value: 0)
!588 = !DIEnumerator(name: "HDCD_PVER_A", value: 1)
!589 = !DIEnumerator(name: "HDCD_PVER_B", value: 2)
!590 = !DIEnumerator(name: "HDCD_PVER_MIX", value: 3)
!591 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !580, line: 878, size: 32, align: 32, elements: !592)
!592 = !{!593, !594, !595}
!593 = !DIEnumerator(name: "HDCD_PE_NEVER", value: 0)
!594 = !DIEnumerator(name: "HDCD_PE_INTERMITTENT", value: 1)
!595 = !DIEnumerator(name: "HDCD_PE_PERMANENT", value: 2)
!596 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !580, line: 1341, size: 32, align: 32, elements: !597)
!597 = !{!598, !599}
!598 = !DIEnumerator(name: "HDCD_OK", value: 0)
!599 = !DIEnumerator(name: "HDCD_TG_MISMATCH", value: 1)
!600 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !580, line: 920, size: 32, align: 32, elements: !601)
!601 = !{!602, !603, !604, !605, !606, !607}
!602 = !DIEnumerator(name: "HDCD_ANA_OFF", value: 0)
!603 = !DIEnumerator(name: "HDCD_ANA_LLE", value: 1)
!604 = !DIEnumerator(name: "HDCD_ANA_PE", value: 2)
!605 = !DIEnumerator(name: "HDCD_ANA_CDT", value: 3)
!606 = !DIEnumerator(name: "HDCD_ANA_TGM", value: 4)
!607 = !DIEnumerator(name: "HDCD_ANA_TOP", value: 5)
!608 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVSampleFormat", file: !609, line: 58, size: 32, align: 32, elements: !610)
!609 = !DIFile(filename: "./libavutil/samplefmt.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!610 = !{!611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624}
!611 = !DIEnumerator(name: "AV_SAMPLE_FMT_NONE", value: -1)
!612 = !DIEnumerator(name: "AV_SAMPLE_FMT_U8", value: 0)
!613 = !DIEnumerator(name: "AV_SAMPLE_FMT_S16", value: 1)
!614 = !DIEnumerator(name: "AV_SAMPLE_FMT_S32", value: 2)
!615 = !DIEnumerator(name: "AV_SAMPLE_FMT_FLT", value: 3)
!616 = !DIEnumerator(name: "AV_SAMPLE_FMT_DBL", value: 4)
!617 = !DIEnumerator(name: "AV_SAMPLE_FMT_U8P", value: 5)
!618 = !DIEnumerator(name: "AV_SAMPLE_FMT_S16P", value: 6)
!619 = !DIEnumerator(name: "AV_SAMPLE_FMT_S32P", value: 7)
!620 = !DIEnumerator(name: "AV_SAMPLE_FMT_FLTP", value: 8)
!621 = !DIEnumerator(name: "AV_SAMPLE_FMT_DBLP", value: 9)
!622 = !DIEnumerator(name: "AV_SAMPLE_FMT_S64", value: 10)
!623 = !DIEnumerator(name: "AV_SAMPLE_FMT_S64P", value: 11)
!624 = !DIEnumerator(name: "AV_SAMPLE_FMT_NB", value: 12)
!625 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !169, line: 974, size: 32, align: 32, elements: !626)
!626 = !{!627, !628}
!627 = !DIEnumerator(name: "AVFILTER_AUTO_CONVERT_ALL", value: 0)
!628 = !DIEnumerator(name: "AVFILTER_AUTO_CONVERT_NONE", value: -1)
!629 = !{!630, !632, !191, !633, !635, !442, !636, !631, !316}
!630 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !631, size: 64, align: 64)
!631 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !207, line: 38, baseType: !200)
!632 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !633, size: 64, align: 64)
!633 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !207, line: 37, baseType: !634)
!634 = !DIBasicType(name: "short", size: 16, align: 16, encoding: DW_ATE_signed)
!635 = !DIBasicType(name: "float", size: 32, align: 32, encoding: DW_ATE_float)
!636 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !207, line: 51, baseType: !442)
!637 = !{!638, !639, !643, !648, !654, !658, !659, !663, !668, !673, !678, !679, !680, !686, !690, !694, !699, !702}
!638 = distinct !DIGlobalVariable(name: "ff_af_hdcd", scope: !0, file: !580, line: 1775, type: !267, isLocal: false, isDefinition: true, variable: %struct.AVFilter* @ff_af_hdcd)
!639 = distinct !DIGlobalVariable(name: "avfilter_af_hdcd_inputs", scope: !0, file: !580, line: 1757, type: !640, isLocal: true, isDefinition: true, variable: [2 x %struct.AVFilterPad]* @avfilter_af_hdcd_inputs)
!640 = !DICompositeType(tag: DW_TAG_array_type, baseType: !274, size: 1152, align: 64, elements: !641)
!641 = !{!642}
!642 = !DISubrange(count: 2)
!643 = distinct !DIGlobalVariable(name: "readaheadtab", scope: !0, file: !580, line: 672, type: !644, isLocal: true, isDefinition: true, variable: [256 x i8]* @readaheadtab)
!644 = !DICompositeType(tag: DW_TAG_array_type, baseType: !645, size: 2048, align: 8, elements: !646)
!645 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !292)
!646 = !{!647}
!647 = !DISubrange(count: 256)
!648 = distinct !DIGlobalVariable(name: "maxg", scope: !649, file: !580, line: 1208, type: !653, isLocal: true, isDefinition: true, variable: i32* @hdcd_analyze.maxg)
!649 = distinct !DISubprogram(name: "hdcd_analyze", scope: !580, file: !580, line: 1206, type: !650, isLocal: true, isDefinition: true, scopeLine: 1207, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!650 = !DISubroutineType(types: !651)
!651 = !{!200, !630, !200, !200, !200, !200, !200, !200, !200, !200}
!652 = !{}
!653 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !200)
!654 = distinct !DIGlobalVariable(name: "r", scope: !655, file: !580, line: 1198, type: !653, isLocal: true, isDefinition: true, variable: i32* @hdcd_analyze_gen.r)
!655 = distinct !DISubprogram(name: "hdcd_analyze_gen", scope: !580, file: !580, line: 1196, type: !656, isLocal: true, isDefinition: true, scopeLine: 1197, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!656 = !DISubroutineType(types: !657)
!657 = !{!631, !631, !442, !442}
!658 = distinct !DIGlobalVariable(name: "m", scope: !655, file: !580, line: 1198, type: !653, isLocal: true, isDefinition: true, variable: i32* @hdcd_analyze_gen.m)
!659 = distinct !DIGlobalVariable(name: "max_asample", scope: !660, file: !580, line: 1268, type: !653, isLocal: true, isDefinition: true, variable: i32* @hdcd_envelope.max_asample)
!660 = distinct !DISubprogram(name: "hdcd_envelope", scope: !580, file: !580, line: 1266, type: !661, isLocal: true, isDefinition: true, scopeLine: 1267, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!661 = !DISubroutineType(types: !662)
!662 = !{!200, !630, !200, !200, !200, !200, !200, !200}
!663 = distinct !DIGlobalVariable(name: "peaktab", scope: !0, file: !580, line: 53, type: !664, isLocal: true, isDefinition: true, variable: [9856 x i32]* @peaktab)
!664 = !DICompositeType(tag: DW_TAG_array_type, baseType: !665, size: 315392, align: 32, elements: !666)
!665 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !636)
!666 = !{!667}
!667 = !DISubrange(count: 9856)
!668 = distinct !DIGlobalVariable(name: "gaintab", scope: !0, file: !580, line: 694, type: !669, isLocal: true, isDefinition: true, variable: [1921 x i32]* @gaintab)
!669 = !DICompositeType(tag: DW_TAG_array_type, baseType: !670, size: 61472, align: 32, elements: !671)
!670 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !631)
!671 = !{!672}
!672 = !DISubrange(count: 1921)
!673 = distinct !DIGlobalVariable(name: "ana_mode_str", scope: !0, file: !580, line: 935, type: !674, isLocal: true, isDefinition: true, variable: [5 x i8*]* @ana_mode_str)
!674 = !DICompositeType(tag: DW_TAG_array_type, baseType: !675, size: 320, align: 64, elements: !676)
!675 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !184)
!676 = !{!677}
!677 = !DISubrange(count: 5)
!678 = distinct !DIGlobalVariable(name: "avfilter_af_hdcd_outputs", scope: !0, file: !580, line: 1767, type: !640, isLocal: true, isDefinition: true, variable: [2 x %struct.AVFilterPad]* @avfilter_af_hdcd_outputs)
!679 = distinct !DIGlobalVariable(name: "hdcd_class", scope: !0, file: !580, line: 1010, type: !179, isLocal: true, isDefinition: true, variable: %struct.AVClass* @hdcd_class)
!680 = distinct !DIGlobalVariable(name: "hdcd_options", scope: !0, file: !580, line: 986, type: !681, isLocal: true, isDefinition: true, variable: [15 x %struct.AVOption]* @hdcd_options)
!681 = !DICompositeType(tag: DW_TAG_array_type, baseType: !682, size: 7680, align: 64, elements: !684)
!682 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !683)
!683 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVOption", file: !126, line: 301, baseType: !195)
!684 = !{!685}
!685 = !DISubrange(count: 15)
!686 = distinct !DIGlobalVariable(name: "pf_str", scope: !0, file: !580, line: 903, type: !687, isLocal: true, isDefinition: true, variable: [4 x i8*]* @pf_str)
!687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !675, size: 256, align: 64, elements: !688)
!688 = !{!689}
!689 = !DISubrange(count: 4)
!690 = distinct !DIGlobalVariable(name: "pe_str", scope: !0, file: !580, line: 884, type: !691, isLocal: true, isDefinition: true, variable: [3 x i8*]* @pe_str)
!691 = !DICompositeType(tag: DW_TAG_array_type, baseType: !675, size: 192, align: 64, elements: !692)
!692 = !{!693}
!693 = !DISubrange(count: 3)
!694 = distinct !DIGlobalVariable(name: "sample_rates", scope: !695, file: !580, line: 1604, type: !696, isLocal: true, isDefinition: true, variable: [7 x i32]* @query_formats.sample_rates)
!695 = distinct !DISubprogram(name: "query_formats", scope: !580, file: !580, line: 1602, type: !409, isLocal: true, isDefinition: true, scopeLine: 1603, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!696 = !DICompositeType(tag: DW_TAG_array_type, baseType: !653, size: 224, align: 32, elements: !697)
!697 = !{!698}
!698 = !DISubrange(count: 7)
!699 = distinct !DIGlobalVariable(name: "sample_fmts_in", scope: !695, file: !580, line: 1616, type: !700, isLocal: true, isDefinition: true, variable: [5 x i32]* @query_formats.sample_fmts_in)
!700 = !DICompositeType(tag: DW_TAG_array_type, baseType: !701, size: 160, align: 32, elements: !676)
!701 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !608)
!702 = distinct !DIGlobalVariable(name: "sample_fmts_out", scope: !695, file: !580, line: 1623, type: !703, isLocal: true, isDefinition: true, variable: [2 x i32]* @query_formats.sample_fmts_out)
!703 = !DICompositeType(tag: DW_TAG_array_type, baseType: !701, size: 64, align: 32, elements: !641)
!704 = !{i32 2, !"Dwarf Version", i32 4}
!705 = !{i32 2, !"Debug Info Version", i32 3}
!706 = !{!"clang version 3.9.0 (tags/RELEASE_390/final)"}
!707 = distinct !DISubprogram(name: "init", scope: !580, file: !580, line: 1696, type: !409, isLocal: true, isDefinition: true, scopeLine: 1697, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!708 = !DILocalVariable(name: "ctx", arg: 1, scope: !707, file: !580, line: 1696, type: !173)
!709 = !DIExpression()
!710 = !DILocation(line: 1696, column: 56, scope: !707)
!711 = !DILocalVariable(name: "s", scope: !707, file: !580, line: 1698, type: !712)
!712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !713, size: 64, align: 64)
!713 = !DIDerivedType(tag: DW_TAG_typedef, name: "HDCDContext", file: !580, line: 982, baseType: !714)
!714 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "HDCDContext", file: !580, line: 943, size: 2944, align: 64, elements: !715)
!715 = !{!716, !717, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755}
!716 = !DIDerivedType(tag: DW_TAG_member, name: "class", scope: !714, file: !580, line: 944, baseType: !178, size: 64, align: 64)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !714, file: !580, line: 945, baseType: !718, size: 2176, align: 64, offset: 64)
!718 = !DICompositeType(tag: DW_TAG_array_type, baseType: !719, size: 2176, align: 64, elements: !641)
!719 = !DIDerivedType(tag: DW_TAG_typedef, name: "hdcd_state", file: !580, line: 876, baseType: !720)
!720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hdcd_state", file: !580, line: 840, size: 1088, align: 64, elements: !721)
!721 = !{!722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !741, !742, !743, !744}
!722 = !DIDerivedType(tag: DW_TAG_member, name: "window", scope: !720, file: !580, line: 841, baseType: !316, size: 64, align: 64)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "readahead", scope: !720, file: !580, line: 842, baseType: !293, size: 8, align: 8, offset: 64)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "arg", scope: !720, file: !580, line: 850, baseType: !292, size: 8, align: 8, offset: 72)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !720, file: !580, line: 850, baseType: !292, size: 8, align: 8, offset: 80)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "sustain", scope: !720, file: !580, line: 851, baseType: !442, size: 32, align: 32, offset: 96)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "sustain_reset", scope: !720, file: !580, line: 851, baseType: !442, size: 32, align: 32, offset: 128)
!728 = !DIDerivedType(tag: DW_TAG_member, name: "running_gain", scope: !720, file: !580, line: 853, baseType: !200, size: 32, align: 32, offset: 160)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "code_counterA", scope: !720, file: !580, line: 856, baseType: !200, size: 32, align: 32, offset: 192)
!730 = !DIDerivedType(tag: DW_TAG_member, name: "code_counterA_almost", scope: !720, file: !580, line: 857, baseType: !200, size: 32, align: 32, offset: 224)
!731 = !DIDerivedType(tag: DW_TAG_member, name: "code_counterB", scope: !720, file: !580, line: 858, baseType: !200, size: 32, align: 32, offset: 256)
!732 = !DIDerivedType(tag: DW_TAG_member, name: "code_counterB_checkfails", scope: !720, file: !580, line: 859, baseType: !200, size: 32, align: 32, offset: 288)
!733 = !DIDerivedType(tag: DW_TAG_member, name: "code_counterC", scope: !720, file: !580, line: 860, baseType: !200, size: 32, align: 32, offset: 320)
!734 = !DIDerivedType(tag: DW_TAG_member, name: "code_counterC_unmatched", scope: !720, file: !580, line: 861, baseType: !200, size: 32, align: 32, offset: 352)
!735 = !DIDerivedType(tag: DW_TAG_member, name: "count_peak_extend", scope: !720, file: !580, line: 862, baseType: !200, size: 32, align: 32, offset: 384)
!736 = !DIDerivedType(tag: DW_TAG_member, name: "count_transient_filter", scope: !720, file: !580, line: 863, baseType: !200, size: 32, align: 32, offset: 416)
!737 = !DIDerivedType(tag: DW_TAG_member, name: "gain_counts", scope: !720, file: !580, line: 868, baseType: !738, size: 512, align: 32, offset: 448)
!738 = !DICompositeType(tag: DW_TAG_array_type, baseType: !200, size: 512, align: 32, elements: !739)
!739 = !{!740}
!740 = !DISubrange(count: 16)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "max_gain", scope: !720, file: !580, line: 869, baseType: !200, size: 32, align: 32, offset: 960)
!742 = !DIDerivedType(tag: DW_TAG_member, name: "count_sustain_expired", scope: !720, file: !580, line: 872, baseType: !200, size: 32, align: 32, offset: 992)
!743 = !DIDerivedType(tag: DW_TAG_member, name: "rate", scope: !720, file: !580, line: 874, baseType: !200, size: 32, align: 32, offset: 1024)
!744 = !DIDerivedType(tag: DW_TAG_member, name: "_ana_snb", scope: !720, file: !580, line: 875, baseType: !200, size: 32, align: 32, offset: 1056)
!745 = !DIDerivedType(tag: DW_TAG_member, name: "process_stereo", scope: !714, file: !580, line: 952, baseType: !200, size: 32, align: 32, offset: 2240)
!746 = !DIDerivedType(tag: DW_TAG_member, name: "force_pe", scope: !714, file: !580, line: 957, baseType: !200, size: 32, align: 32, offset: 2272)
!747 = !DIDerivedType(tag: DW_TAG_member, name: "analyze_mode", scope: !714, file: !580, line: 962, baseType: !200, size: 32, align: 32, offset: 2304)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "cdt_ms", scope: !714, file: !580, line: 964, baseType: !200, size: 32, align: 32, offset: 2336)
!749 = !DIDerivedType(tag: DW_TAG_member, name: "disable_autoconvert", scope: !714, file: !580, line: 966, baseType: !200, size: 32, align: 32, offset: 2368)
!750 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_sample", scope: !714, file: !580, line: 968, baseType: !200, size: 32, align: 32, offset: 2400)
!751 = !DIDerivedType(tag: DW_TAG_member, name: "bad_config", scope: !714, file: !580, line: 974, baseType: !200, size: 32, align: 32, offset: 2432)
!752 = !DIDerivedType(tag: DW_TAG_member, name: "fctx", scope: !714, file: !580, line: 976, baseType: !173, size: 64, align: 64, offset: 2496)
!753 = !DIDerivedType(tag: DW_TAG_member, name: "sample_count", scope: !714, file: !580, line: 977, baseType: !200, size: 32, align: 32, offset: 2560)
!754 = !DIDerivedType(tag: DW_TAG_member, name: "val_target_gain", scope: !714, file: !580, line: 978, baseType: !200, size: 32, align: 32, offset: 2592)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "detect", scope: !714, file: !580, line: 981, baseType: !756, size: 288, align: 32, offset: 2624)
!756 = !DIDerivedType(tag: DW_TAG_typedef, name: "hdcd_detection_data", file: !580, line: 918, baseType: !757)
!757 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hdcd_detection_data", file: !580, line: 907, size: 288, align: 32, elements: !758)
!758 = !{!759, !761, !763, !764, !765, !767, !768, !769, !770}
!759 = !DIDerivedType(tag: DW_TAG_member, name: "hdcd_detected", scope: !757, file: !580, line: 908, baseType: !760, size: 32, align: 32)
!760 = !DIDerivedType(tag: DW_TAG_typedef, name: "hdcd_dv", file: !580, line: 894, baseType: !579)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "packet_type", scope: !757, file: !580, line: 909, baseType: !762, size: 32, align: 32, offset: 32)
!762 = !DIDerivedType(tag: DW_TAG_typedef, name: "hdcd_pf", file: !580, line: 901, baseType: !585)
!763 = !DIDerivedType(tag: DW_TAG_member, name: "total_packets", scope: !757, file: !580, line: 910, baseType: !200, size: 32, align: 32, offset: 64)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "errors", scope: !757, file: !580, line: 911, baseType: !200, size: 32, align: 32, offset: 96)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "peak_extend", scope: !757, file: !580, line: 912, baseType: !766, size: 32, align: 32, offset: 128)
!766 = !DIDerivedType(tag: DW_TAG_typedef, name: "hdcd_pe", file: !580, line: 882, baseType: !591)
!767 = !DIDerivedType(tag: DW_TAG_member, name: "uses_transient_filter", scope: !757, file: !580, line: 913, baseType: !200, size: 32, align: 32, offset: 160)
!768 = !DIDerivedType(tag: DW_TAG_member, name: "max_gain_adjustment", scope: !757, file: !580, line: 914, baseType: !635, size: 32, align: 32, offset: 192)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "cdt_expirations", scope: !757, file: !580, line: 915, baseType: !200, size: 32, align: 32, offset: 224)
!770 = !DIDerivedType(tag: DW_TAG_member, name: "_active_count", scope: !757, file: !580, line: 917, baseType: !200, size: 32, align: 32, offset: 256)
!771 = !DILocation(line: 1698, column: 18, scope: !707)
!772 = !DILocation(line: 1698, column: 22, scope: !707)
!773 = !DILocation(line: 1698, column: 27, scope: !707)
!774 = !DILocation(line: 1700, column: 5, scope: !707)
!775 = !DILocation(line: 1700, column: 8, scope: !707)
!776 = !DILocation(line: 1700, column: 21, scope: !707)
!777 = !DILocation(line: 1701, column: 15, scope: !707)
!778 = !DILocation(line: 1701, column: 5, scope: !707)
!779 = !DILocation(line: 1701, column: 8, scope: !707)
!780 = !DILocation(line: 1701, column: 13, scope: !707)
!781 = !DILocation(line: 1702, column: 5, scope: !707)
!782 = !DILocation(line: 1702, column: 8, scope: !707)
!783 = !DILocation(line: 1702, column: 19, scope: !707)
!784 = !DILocation(line: 1704, column: 9, scope: !785)
!785 = distinct !DILexicalBlock(scope: !707, file: !580, line: 1704, column: 9)
!786 = !DILocation(line: 1704, column: 12, scope: !785)
!787 = !DILocation(line: 1704, column: 9, scope: !707)
!788 = !DILocation(line: 1705, column: 16, scope: !789)
!789 = distinct !DILexicalBlock(scope: !785, file: !580, line: 1704, column: 33)
!790 = !DILocation(line: 1705, column: 9, scope: !789)
!791 = !DILocation(line: 1706, column: 41, scope: !789)
!792 = !DILocation(line: 1706, column: 46, scope: !789)
!793 = !DILocation(line: 1706, column: 9, scope: !789)
!794 = !DILocation(line: 1707, column: 5, scope: !789)
!795 = !DILocation(line: 1708, column: 5, scope: !707)
!796 = distinct !DISubprogram(name: "uninit", scope: !580, file: !580, line: 1654, type: !419, isLocal: true, isDefinition: true, scopeLine: 1655, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!797 = !DILocalVariable(name: "ctx", arg: 1, scope: !796, file: !580, line: 1654, type: !173)
!798 = !DILocation(line: 1654, column: 59, scope: !796)
!799 = !DILocalVariable(name: "s", scope: !796, file: !580, line: 1656, type: !712)
!800 = !DILocation(line: 1656, column: 18, scope: !796)
!801 = !DILocation(line: 1656, column: 22, scope: !796)
!802 = !DILocation(line: 1656, column: 27, scope: !796)
!803 = !DILocalVariable(name: "i", scope: !796, file: !580, line: 1657, type: !200)
!804 = !DILocation(line: 1657, column: 9, scope: !796)
!805 = !DILocalVariable(name: "j", scope: !796, file: !580, line: 1657, type: !200)
!806 = !DILocation(line: 1657, column: 12, scope: !796)
!807 = !DILocation(line: 1660, column: 12, scope: !808)
!808 = distinct !DILexicalBlock(scope: !796, file: !580, line: 1660, column: 5)
!809 = !DILocation(line: 1660, column: 10, scope: !808)
!810 = !DILocation(line: 1660, column: 17, scope: !811)
!811 = !DILexicalBlockFile(scope: !812, file: !580, discriminator: 1)
!812 = distinct !DILexicalBlock(scope: !808, file: !580, line: 1660, column: 5)
!813 = !DILocation(line: 1660, column: 19, scope: !811)
!814 = !DILocation(line: 1660, column: 5, scope: !811)
!815 = !DILocalVariable(name: "state", scope: !816, file: !580, line: 1661, type: !817)
!816 = distinct !DILexicalBlock(scope: !812, file: !580, line: 1660, column: 29)
!817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !719, size: 64, align: 64)
!818 = !DILocation(line: 1661, column: 21, scope: !816)
!819 = !DILocation(line: 1661, column: 39, scope: !816)
!820 = !DILocation(line: 1661, column: 30, scope: !816)
!821 = !DILocation(line: 1661, column: 33, scope: !816)
!822 = !DILocation(line: 1662, column: 16, scope: !816)
!823 = !DILocation(line: 1662, column: 70, scope: !816)
!824 = !DILocation(line: 1663, column: 17, scope: !816)
!825 = !DILocation(line: 1663, column: 24, scope: !816)
!826 = !DILocation(line: 1663, column: 39, scope: !816)
!827 = !DILocation(line: 1663, column: 46, scope: !816)
!828 = !DILocation(line: 1663, column: 61, scope: !816)
!829 = !DILocation(line: 1663, column: 68, scope: !816)
!830 = !DILocation(line: 1662, column: 9, scope: !816)
!831 = !DILocation(line: 1664, column: 16, scope: !816)
!832 = !DILocation(line: 1664, column: 122, scope: !816)
!833 = !DILocation(line: 1665, column: 13, scope: !816)
!834 = !DILocation(line: 1665, column: 20, scope: !816)
!835 = !DILocation(line: 1666, column: 13, scope: !816)
!836 = !DILocation(line: 1666, column: 20, scope: !816)
!837 = !DILocation(line: 1667, column: 13, scope: !816)
!838 = !DILocation(line: 1667, column: 20, scope: !816)
!839 = !DILocation(line: 1668, column: 13, scope: !816)
!840 = !DILocation(line: 1668, column: 20, scope: !816)
!841 = !DILocation(line: 1669, column: 13, scope: !816)
!842 = !DILocation(line: 1669, column: 20, scope: !816)
!843 = !DILocation(line: 1670, column: 13, scope: !816)
!844 = !DILocation(line: 1670, column: 20, scope: !816)
!845 = !DILocation(line: 1664, column: 9, scope: !816)
!846 = !DILocation(line: 1671, column: 16, scope: !847)
!847 = distinct !DILexicalBlock(scope: !816, file: !580, line: 1671, column: 9)
!848 = !DILocation(line: 1671, column: 14, scope: !847)
!849 = !DILocation(line: 1671, column: 21, scope: !850)
!850 = !DILexicalBlockFile(scope: !851, file: !580, discriminator: 1)
!851 = distinct !DILexicalBlock(scope: !847, file: !580, line: 1671, column: 9)
!852 = !DILocation(line: 1671, column: 26, scope: !850)
!853 = !DILocation(line: 1671, column: 33, scope: !850)
!854 = !DILocation(line: 1671, column: 23, scope: !850)
!855 = !DILocation(line: 1671, column: 9, scope: !850)
!856 = !DILocation(line: 1672, column: 20, scope: !857)
!857 = distinct !DILexicalBlock(scope: !851, file: !580, line: 1671, column: 48)
!858 = !DILocation(line: 1672, column: 59, scope: !857)
!859 = !DILocation(line: 1672, column: 63, scope: !857)
!860 = !DILocation(line: 1672, column: 62, scope: !857)
!861 = !DILocation(line: 1672, column: 77, scope: !862)
!862 = !DILexicalBlockFile(scope: !857, file: !580, discriminator: 1)
!863 = !DILocation(line: 1672, column: 78, scope: !862)
!864 = !DILocation(line: 1672, column: 69, scope: !862)
!865 = !DILocation(line: 1672, column: 68, scope: !862)
!866 = !DILocation(line: 1672, column: 87, scope: !862)
!867 = !DILocation(line: 1672, column: 89, scope: !862)
!868 = !DILocation(line: 1672, column: 86, scope: !862)
!869 = !DILocation(line: 1672, column: 83, scope: !862)
!870 = !DILocation(line: 1672, column: 62, scope: !862)
!871 = !DILocation(line: 1672, column: 62, scope: !872)
!872 = !DILexicalBlockFile(scope: !857, file: !580, discriminator: 2)
!873 = !DILocation(line: 1672, column: 62, scope: !874)
!874 = !DILexicalBlockFile(scope: !857, file: !580, discriminator: 3)
!875 = !DILocation(line: 1672, column: 133, scope: !874)
!876 = !DILocation(line: 1672, column: 114, scope: !874)
!877 = !DILocation(line: 1672, column: 121, scope: !874)
!878 = !DILocation(line: 1672, column: 13, scope: !874)
!879 = !DILocation(line: 1673, column: 9, scope: !857)
!880 = !DILocation(line: 1671, column: 44, scope: !881)
!881 = !DILexicalBlockFile(scope: !851, file: !580, discriminator: 2)
!882 = !DILocation(line: 1671, column: 9, scope: !881)
!883 = distinct !{!883, !884}
!884 = !DILocation(line: 1671, column: 9, scope: !816)
!885 = !DILocation(line: 1674, column: 5, scope: !816)
!886 = !DILocation(line: 1660, column: 25, scope: !887)
!887 = !DILexicalBlockFile(scope: !812, file: !580, discriminator: 2)
!888 = !DILocation(line: 1660, column: 5, scope: !887)
!889 = distinct !{!889, !890}
!890 = !DILocation(line: 1660, column: 5, scope: !796)
!891 = !DILocation(line: 1675, column: 12, scope: !796)
!892 = !DILocation(line: 1676, column: 16, scope: !796)
!893 = !DILocation(line: 1676, column: 19, scope: !796)
!894 = !DILocation(line: 1676, column: 26, scope: !796)
!895 = !DILocation(line: 1676, column: 9, scope: !796)
!896 = !DILocation(line: 1677, column: 9, scope: !796)
!897 = !DILocation(line: 1677, column: 12, scope: !796)
!898 = !DILocation(line: 1677, column: 19, scope: !796)
!899 = !DILocation(line: 1675, column: 5, scope: !796)
!900 = !DILocation(line: 1680, column: 9, scope: !901)
!901 = distinct !DILexicalBlock(scope: !796, file: !580, line: 1680, column: 9)
!902 = !DILocation(line: 1680, column: 12, scope: !901)
!903 = !DILocation(line: 1680, column: 19, scope: !901)
!904 = !DILocation(line: 1680, column: 9, scope: !796)
!905 = !DILocation(line: 1681, column: 16, scope: !901)
!906 = !DILocation(line: 1683, column: 20, scope: !901)
!907 = !DILocation(line: 1683, column: 23, scope: !901)
!908 = !DILocation(line: 1683, column: 30, scope: !901)
!909 = !DILocation(line: 1683, column: 13, scope: !901)
!910 = !DILocation(line: 1684, column: 13, scope: !901)
!911 = !DILocation(line: 1684, column: 16, scope: !901)
!912 = !DILocation(line: 1684, column: 23, scope: !901)
!913 = !DILocation(line: 1685, column: 14, scope: !901)
!914 = !DILocation(line: 1685, column: 17, scope: !901)
!915 = !DILocation(line: 1685, column: 24, scope: !901)
!916 = !DILocation(line: 1685, column: 13, scope: !901)
!917 = !DILocation(line: 1686, column: 13, scope: !901)
!918 = !DILocation(line: 1686, column: 16, scope: !901)
!919 = !DILocation(line: 1686, column: 23, scope: !901)
!920 = !DILocation(line: 1686, column: 32, scope: !901)
!921 = !DILocation(line: 1686, column: 35, scope: !901)
!922 = !DILocation(line: 1686, column: 42, scope: !901)
!923 = !DILocation(line: 1686, column: 31, scope: !901)
!924 = !DILocation(line: 1687, column: 14, scope: !901)
!925 = !DILocation(line: 1687, column: 17, scope: !901)
!926 = !DILocation(line: 1687, column: 13, scope: !901)
!927 = !DILocation(line: 1681, column: 9, scope: !901)
!928 = !DILocation(line: 1690, column: 16, scope: !901)
!929 = !DILocation(line: 1691, column: 14, scope: !901)
!930 = !DILocation(line: 1691, column: 17, scope: !901)
!931 = !DILocation(line: 1691, column: 13, scope: !901)
!932 = !DILocation(line: 1690, column: 9, scope: !901)
!933 = !DILocation(line: 1693, column: 1, scope: !796)
!934 = !DILocalVariable(name: "ctx", arg: 1, scope: !695, file: !580, line: 1602, type: !173)
!935 = !DILocation(line: 1602, column: 43, scope: !695)
!936 = !DILocalVariable(name: "in_formats", scope: !695, file: !580, line: 1610, type: !524)
!937 = !DILocation(line: 1610, column: 22, scope: !695)
!938 = !DILocalVariable(name: "out_formats", scope: !695, file: !580, line: 1611, type: !524)
!939 = !DILocation(line: 1611, column: 22, scope: !695)
!940 = !DILocalVariable(name: "layouts", scope: !695, file: !580, line: 1612, type: !941)
!941 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !942, size: 64, align: 64)
!942 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilterChannelLayouts", file: !527, line: 93, baseType: !541)
!943 = !DILocation(line: 1612, column: 29, scope: !695)
!944 = !DILocalVariable(name: "inlink", scope: !695, file: !580, line: 1613, type: !386)
!945 = !DILocation(line: 1613, column: 19, scope: !695)
!946 = !DILocation(line: 1613, column: 28, scope: !695)
!947 = !DILocation(line: 1613, column: 33, scope: !695)
!948 = !DILocalVariable(name: "outlink", scope: !695, file: !580, line: 1614, type: !386)
!949 = !DILocation(line: 1614, column: 19, scope: !695)
!950 = !DILocation(line: 1614, column: 29, scope: !695)
!951 = !DILocation(line: 1614, column: 34, scope: !695)
!952 = !DILocalVariable(name: "ret", scope: !695, file: !580, line: 1627, type: !200)
!953 = !DILocation(line: 1627, column: 9, scope: !695)
!954 = !DILocation(line: 1629, column: 11, scope: !695)
!955 = !DILocation(line: 1629, column: 9, scope: !695)
!956 = !DILocation(line: 1630, column: 9, scope: !957)
!957 = distinct !DILexicalBlock(scope: !695, file: !580, line: 1630, column: 9)
!958 = !DILocation(line: 1630, column: 13, scope: !957)
!959 = !DILocation(line: 1630, column: 9, scope: !695)
!960 = !DILocation(line: 1631, column: 16, scope: !957)
!961 = !DILocation(line: 1631, column: 9, scope: !957)
!962 = !DILocation(line: 1632, column: 11, scope: !695)
!963 = !DILocation(line: 1632, column: 9, scope: !695)
!964 = !DILocation(line: 1633, column: 9, scope: !965)
!965 = distinct !DILexicalBlock(scope: !695, file: !580, line: 1633, column: 9)
!966 = !DILocation(line: 1633, column: 13, scope: !965)
!967 = !DILocation(line: 1633, column: 9, scope: !695)
!968 = !DILocation(line: 1634, column: 16, scope: !965)
!969 = !DILocation(line: 1634, column: 9, scope: !965)
!970 = !DILocation(line: 1636, column: 41, scope: !695)
!971 = !DILocation(line: 1636, column: 46, scope: !695)
!972 = !DILocation(line: 1636, column: 11, scope: !695)
!973 = !DILocation(line: 1636, column: 9, scope: !695)
!974 = !DILocation(line: 1637, column: 9, scope: !975)
!975 = distinct !DILexicalBlock(scope: !695, file: !580, line: 1637, column: 9)
!976 = !DILocation(line: 1637, column: 13, scope: !975)
!977 = !DILocation(line: 1637, column: 9, scope: !695)
!978 = !DILocation(line: 1638, column: 16, scope: !975)
!979 = !DILocation(line: 1638, column: 9, scope: !975)
!980 = !DILocation(line: 1640, column: 18, scope: !695)
!981 = !DILocation(line: 1640, column: 16, scope: !695)
!982 = !DILocation(line: 1641, column: 26, scope: !695)
!983 = !DILocation(line: 1641, column: 39, scope: !695)
!984 = !DILocation(line: 1641, column: 47, scope: !695)
!985 = !DILocation(line: 1641, column: 11, scope: !695)
!986 = !DILocation(line: 1641, column: 9, scope: !695)
!987 = !DILocation(line: 1642, column: 9, scope: !988)
!988 = distinct !DILexicalBlock(scope: !695, file: !580, line: 1642, column: 9)
!989 = !DILocation(line: 1642, column: 13, scope: !988)
!990 = !DILocation(line: 1642, column: 9, scope: !695)
!991 = !DILocation(line: 1643, column: 16, scope: !988)
!992 = !DILocation(line: 1643, column: 9, scope: !988)
!993 = !DILocation(line: 1645, column: 19, scope: !695)
!994 = !DILocation(line: 1645, column: 17, scope: !695)
!995 = !DILocation(line: 1646, column: 26, scope: !695)
!996 = !DILocation(line: 1646, column: 40, scope: !695)
!997 = !DILocation(line: 1646, column: 49, scope: !695)
!998 = !DILocation(line: 1646, column: 11, scope: !695)
!999 = !DILocation(line: 1646, column: 9, scope: !695)
!1000 = !DILocation(line: 1647, column: 9, scope: !1001)
!1001 = distinct !DILexicalBlock(scope: !695, file: !580, line: 1647, column: 9)
!1002 = !DILocation(line: 1647, column: 13, scope: !1001)
!1003 = !DILocation(line: 1647, column: 9, scope: !695)
!1004 = !DILocation(line: 1648, column: 16, scope: !1001)
!1005 = !DILocation(line: 1648, column: 9, scope: !1001)
!1006 = !DILocation(line: 1651, column: 35, scope: !695)
!1007 = !DILocation(line: 1651, column: 40, scope: !695)
!1008 = !DILocation(line: 1651, column: 9, scope: !1009)
!1009 = !DILexicalBlockFile(scope: !695, file: !580, discriminator: 1)
!1010 = !DILocation(line: 1650, column: 5, scope: !695)
!1011 = !DILocation(line: 1652, column: 1, scope: !695)
!1012 = distinct !DISubprogram(name: "filter_frame", scope: !580, file: !580, line: 1527, type: !394, isLocal: true, isDefinition: true, scopeLine: 1528, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!1013 = !DILocalVariable(name: "inlink", arg: 1, scope: !1012, file: !580, line: 1527, type: !386)
!1014 = !DILocation(line: 1527, column: 39, scope: !1012)
!1015 = !DILocalVariable(name: "in", arg: 2, scope: !1012, file: !580, line: 1527, type: !285)
!1016 = !DILocation(line: 1527, column: 56, scope: !1012)
!1017 = !DILocalVariable(name: "ctx", scope: !1012, file: !580, line: 1529, type: !173)
!1018 = !DILocation(line: 1529, column: 22, scope: !1012)
!1019 = !DILocation(line: 1529, column: 28, scope: !1012)
!1020 = !DILocation(line: 1529, column: 36, scope: !1012)
!1021 = !DILocalVariable(name: "s", scope: !1012, file: !580, line: 1530, type: !712)
!1022 = !DILocation(line: 1530, column: 18, scope: !1012)
!1023 = !DILocation(line: 1530, column: 22, scope: !1012)
!1024 = !DILocation(line: 1530, column: 27, scope: !1012)
!1025 = !DILocalVariable(name: "outlink", scope: !1012, file: !580, line: 1531, type: !386)
!1026 = !DILocation(line: 1531, column: 19, scope: !1012)
!1027 = !DILocation(line: 1531, column: 29, scope: !1012)
!1028 = !DILocation(line: 1531, column: 34, scope: !1012)
!1029 = !DILocalVariable(name: "out", scope: !1012, file: !580, line: 1532, type: !285)
!1030 = !DILocation(line: 1532, column: 14, scope: !1012)
!1031 = !DILocalVariable(name: "in_data", scope: !1012, file: !580, line: 1533, type: !1032)
!1032 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1033, size: 64, align: 64)
!1033 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !633)
!1034 = !DILocation(line: 1533, column: 20, scope: !1012)
!1035 = !DILocalVariable(name: "in_data32", scope: !1012, file: !580, line: 1534, type: !1036)
!1036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !670, size: 64, align: 64)
!1037 = !DILocation(line: 1534, column: 20, scope: !1012)
!1038 = !DILocalVariable(name: "out_data", scope: !1012, file: !580, line: 1535, type: !630)
!1039 = !DILocation(line: 1535, column: 14, scope: !1012)
!1040 = !DILocalVariable(name: "n", scope: !1012, file: !580, line: 1536, type: !200)
!1041 = !DILocation(line: 1536, column: 9, scope: !1012)
!1042 = !DILocalVariable(name: "c", scope: !1012, file: !580, line: 1536, type: !200)
!1043 = !DILocation(line: 1536, column: 12, scope: !1012)
!1044 = !DILocalVariable(name: "result", scope: !1012, file: !580, line: 1536, type: !200)
!1045 = !DILocation(line: 1536, column: 15, scope: !1012)
!1046 = !DILocalVariable(name: "a", scope: !1012, file: !580, line: 1537, type: !200)
!1047 = !DILocation(line: 1537, column: 9, scope: !1012)
!1048 = !DILocation(line: 1537, column: 18, scope: !1012)
!1049 = !DILocation(line: 1537, column: 21, scope: !1012)
!1050 = !DILocation(line: 1537, column: 16, scope: !1012)
!1051 = !DILocation(line: 1539, column: 31, scope: !1012)
!1052 = !DILocation(line: 1539, column: 40, scope: !1012)
!1053 = !DILocation(line: 1539, column: 44, scope: !1012)
!1054 = !DILocation(line: 1539, column: 11, scope: !1012)
!1055 = !DILocation(line: 1539, column: 9, scope: !1012)
!1056 = !DILocation(line: 1540, column: 10, scope: !1057)
!1057 = distinct !DILexicalBlock(scope: !1012, file: !580, line: 1540, column: 9)
!1058 = !DILocation(line: 1540, column: 9, scope: !1012)
!1059 = !DILocation(line: 1541, column: 9, scope: !1060)
!1060 = distinct !DILexicalBlock(scope: !1057, file: !580, line: 1540, column: 15)
!1061 = !DILocation(line: 1542, column: 9, scope: !1060)
!1062 = !DILocation(line: 1544, column: 34, scope: !1012)
!1063 = !DILocation(line: 1544, column: 39, scope: !1012)
!1064 = !DILocation(line: 1544, column: 14, scope: !1012)
!1065 = !DILocation(line: 1544, column: 12, scope: !1012)
!1066 = !DILocation(line: 1545, column: 9, scope: !1067)
!1067 = distinct !DILexicalBlock(scope: !1012, file: !580, line: 1545, column: 9)
!1068 = !DILocation(line: 1545, column: 9, scope: !1012)
!1069 = !DILocation(line: 1546, column: 9, scope: !1070)
!1070 = distinct !DILexicalBlock(scope: !1067, file: !580, line: 1545, column: 17)
!1071 = !DILocation(line: 1547, column: 9, scope: !1070)
!1072 = !DILocation(line: 1548, column: 16, scope: !1070)
!1073 = !DILocation(line: 1548, column: 9, scope: !1070)
!1074 = !DILocation(line: 1550, column: 19, scope: !1012)
!1075 = !DILocation(line: 1550, column: 28, scope: !1012)
!1076 = !DILocation(line: 1550, column: 5, scope: !1012)
!1077 = !DILocation(line: 1550, column: 10, scope: !1012)
!1078 = !DILocation(line: 1550, column: 17, scope: !1012)
!1079 = !DILocation(line: 1552, column: 26, scope: !1012)
!1080 = !DILocation(line: 1552, column: 31, scope: !1012)
!1081 = !DILocation(line: 1552, column: 16, scope: !1012)
!1082 = !DILocation(line: 1552, column: 14, scope: !1012)
!1083 = !DILocation(line: 1553, column: 13, scope: !1012)
!1084 = !DILocation(line: 1553, column: 21, scope: !1012)
!1085 = !DILocation(line: 1553, column: 5, scope: !1012)
!1086 = !DILocation(line: 1555, column: 20, scope: !1087)
!1087 = distinct !DILexicalBlock(scope: !1088, file: !580, line: 1555, column: 13)
!1088 = distinct !DILexicalBlock(scope: !1012, file: !580, line: 1553, column: 29)
!1089 = !DILocation(line: 1555, column: 18, scope: !1087)
!1090 = !DILocation(line: 1555, column: 25, scope: !1091)
!1091 = !DILexicalBlockFile(scope: !1092, file: !580, discriminator: 1)
!1092 = distinct !DILexicalBlock(scope: !1087, file: !580, line: 1555, column: 13)
!1093 = !DILocation(line: 1555, column: 29, scope: !1091)
!1094 = !DILocation(line: 1555, column: 33, scope: !1091)
!1095 = !DILocation(line: 1555, column: 27, scope: !1091)
!1096 = !DILocation(line: 1555, column: 13, scope: !1091)
!1097 = !DILocation(line: 1556, column: 24, scope: !1098)
!1098 = distinct !DILexicalBlock(scope: !1092, file: !580, line: 1556, column: 17)
!1099 = !DILocation(line: 1556, column: 22, scope: !1098)
!1100 = !DILocation(line: 1556, column: 29, scope: !1101)
!1101 = !DILexicalBlockFile(scope: !1102, file: !580, discriminator: 1)
!1102 = distinct !DILexicalBlock(scope: !1098, file: !580, line: 1556, column: 17)
!1103 = !DILocation(line: 1556, column: 33, scope: !1101)
!1104 = !DILocation(line: 1556, column: 37, scope: !1101)
!1105 = !DILocation(line: 1556, column: 31, scope: !1101)
!1106 = !DILocation(line: 1556, column: 17, scope: !1101)
!1107 = !DILocation(line: 1557, column: 59, scope: !1108)
!1108 = distinct !DILexicalBlock(scope: !1102, file: !580, line: 1556, column: 52)
!1109 = !DILocation(line: 1557, column: 41, scope: !1108)
!1110 = !DILocation(line: 1557, column: 45, scope: !1108)
!1111 = !DILocation(line: 1557, column: 31, scope: !1108)
!1112 = !DILocation(line: 1557, column: 29, scope: !1108)
!1113 = !DILocation(line: 1558, column: 64, scope: !1108)
!1114 = !DILocation(line: 1558, column: 56, scope: !1108)
!1115 = !DILocation(line: 1558, column: 31, scope: !1108)
!1116 = !DILocation(line: 1558, column: 35, scope: !1108)
!1117 = !DILocation(line: 1558, column: 39, scope: !1108)
!1118 = !DILocation(line: 1558, column: 33, scope: !1108)
!1119 = !DILocation(line: 1558, column: 51, scope: !1108)
!1120 = !DILocation(line: 1558, column: 49, scope: !1108)
!1121 = !DILocation(line: 1558, column: 21, scope: !1108)
!1122 = !DILocation(line: 1558, column: 54, scope: !1108)
!1123 = !DILocation(line: 1559, column: 17, scope: !1108)
!1124 = !DILocation(line: 1556, column: 48, scope: !1125)
!1125 = !DILexicalBlockFile(scope: !1102, file: !580, discriminator: 2)
!1126 = !DILocation(line: 1556, column: 17, scope: !1125)
!1127 = distinct !{!1127, !1128}
!1128 = !DILocation(line: 1556, column: 17, scope: !1092)
!1129 = !DILocation(line: 1559, column: 17, scope: !1130)
!1130 = !DILexicalBlockFile(scope: !1098, file: !580, discriminator: 1)
!1131 = !DILocation(line: 1555, column: 46, scope: !1132)
!1132 = !DILexicalBlockFile(scope: !1092, file: !580, discriminator: 2)
!1133 = !DILocation(line: 1555, column: 13, scope: !1132)
!1134 = distinct !{!1134, !1135}
!1135 = !DILocation(line: 1555, column: 13, scope: !1088)
!1136 = !DILocation(line: 1560, column: 13, scope: !1088)
!1137 = !DILocation(line: 1562, column: 33, scope: !1088)
!1138 = !DILocation(line: 1562, column: 37, scope: !1088)
!1139 = !DILocation(line: 1562, column: 23, scope: !1088)
!1140 = !DILocation(line: 1562, column: 21, scope: !1088)
!1141 = !DILocation(line: 1563, column: 20, scope: !1142)
!1142 = distinct !DILexicalBlock(scope: !1088, file: !580, line: 1563, column: 13)
!1143 = !DILocation(line: 1563, column: 18, scope: !1142)
!1144 = !DILocation(line: 1563, column: 25, scope: !1145)
!1145 = !DILexicalBlockFile(scope: !1146, file: !580, discriminator: 1)
!1146 = distinct !DILexicalBlock(scope: !1142, file: !580, line: 1563, column: 13)
!1147 = !DILocation(line: 1563, column: 29, scope: !1145)
!1148 = !DILocation(line: 1563, column: 33, scope: !1145)
!1149 = !DILocation(line: 1563, column: 46, scope: !1145)
!1150 = !DILocation(line: 1563, column: 50, scope: !1145)
!1151 = !DILocation(line: 1563, column: 44, scope: !1145)
!1152 = !DILocation(line: 1563, column: 27, scope: !1145)
!1153 = !DILocation(line: 1563, column: 13, scope: !1145)
!1154 = !DILocation(line: 1564, column: 39, scope: !1146)
!1155 = !DILocation(line: 1564, column: 31, scope: !1146)
!1156 = !DILocation(line: 1564, column: 26, scope: !1146)
!1157 = !DILocation(line: 1564, column: 17, scope: !1146)
!1158 = !DILocation(line: 1564, column: 29, scope: !1146)
!1159 = !DILocation(line: 1563, column: 61, scope: !1160)
!1160 = !DILexicalBlockFile(scope: !1146, file: !580, discriminator: 2)
!1161 = !DILocation(line: 1563, column: 13, scope: !1160)
!1162 = distinct !{!1162, !1163}
!1163 = !DILocation(line: 1563, column: 13, scope: !1088)
!1164 = !DILocation(line: 1565, column: 13, scope: !1088)
!1165 = !DILocation(line: 1568, column: 20, scope: !1166)
!1166 = distinct !DILexicalBlock(scope: !1088, file: !580, line: 1568, column: 13)
!1167 = !DILocation(line: 1568, column: 18, scope: !1166)
!1168 = !DILocation(line: 1568, column: 25, scope: !1169)
!1169 = !DILexicalBlockFile(scope: !1170, file: !580, discriminator: 1)
!1170 = distinct !DILexicalBlock(scope: !1166, file: !580, line: 1568, column: 13)
!1171 = !DILocation(line: 1568, column: 29, scope: !1169)
!1172 = !DILocation(line: 1568, column: 33, scope: !1169)
!1173 = !DILocation(line: 1568, column: 27, scope: !1169)
!1174 = !DILocation(line: 1568, column: 13, scope: !1169)
!1175 = !DILocation(line: 1569, column: 24, scope: !1176)
!1176 = distinct !DILexicalBlock(scope: !1170, file: !580, line: 1569, column: 17)
!1177 = !DILocation(line: 1569, column: 22, scope: !1176)
!1178 = !DILocation(line: 1569, column: 29, scope: !1179)
!1179 = !DILexicalBlockFile(scope: !1180, file: !580, discriminator: 1)
!1180 = distinct !DILexicalBlock(scope: !1176, file: !580, line: 1569, column: 17)
!1181 = !DILocation(line: 1569, column: 33, scope: !1179)
!1182 = !DILocation(line: 1569, column: 37, scope: !1179)
!1183 = !DILocation(line: 1569, column: 31, scope: !1179)
!1184 = !DILocation(line: 1569, column: 17, scope: !1179)
!1185 = !DILocation(line: 1570, column: 61, scope: !1186)
!1186 = distinct !DILexicalBlock(scope: !1180, file: !580, line: 1569, column: 52)
!1187 = !DILocation(line: 1570, column: 43, scope: !1186)
!1188 = !DILocation(line: 1570, column: 47, scope: !1186)
!1189 = !DILocation(line: 1570, column: 33, scope: !1186)
!1190 = !DILocation(line: 1570, column: 31, scope: !1186)
!1191 = !DILocation(line: 1571, column: 66, scope: !1186)
!1192 = !DILocation(line: 1571, column: 56, scope: !1186)
!1193 = !DILocation(line: 1571, column: 72, scope: !1186)
!1194 = !DILocation(line: 1571, column: 69, scope: !1186)
!1195 = !DILocation(line: 1571, column: 31, scope: !1186)
!1196 = !DILocation(line: 1571, column: 35, scope: !1186)
!1197 = !DILocation(line: 1571, column: 39, scope: !1186)
!1198 = !DILocation(line: 1571, column: 33, scope: !1186)
!1199 = !DILocation(line: 1571, column: 51, scope: !1186)
!1200 = !DILocation(line: 1571, column: 49, scope: !1186)
!1201 = !DILocation(line: 1571, column: 21, scope: !1186)
!1202 = !DILocation(line: 1571, column: 54, scope: !1186)
!1203 = !DILocation(line: 1572, column: 17, scope: !1186)
!1204 = !DILocation(line: 1569, column: 48, scope: !1205)
!1205 = !DILexicalBlockFile(scope: !1180, file: !580, discriminator: 2)
!1206 = !DILocation(line: 1569, column: 17, scope: !1205)
!1207 = distinct !{!1207, !1208}
!1208 = !DILocation(line: 1569, column: 17, scope: !1170)
!1209 = !DILocation(line: 1572, column: 17, scope: !1210)
!1210 = !DILexicalBlockFile(scope: !1176, file: !580, discriminator: 1)
!1211 = !DILocation(line: 1568, column: 46, scope: !1212)
!1212 = !DILexicalBlockFile(scope: !1170, file: !580, discriminator: 2)
!1213 = !DILocation(line: 1568, column: 13, scope: !1212)
!1214 = distinct !{!1214, !1215}
!1215 = !DILocation(line: 1568, column: 13, scope: !1088)
!1216 = !DILocation(line: 1573, column: 13, scope: !1088)
!1217 = !DILocation(line: 1575, column: 35, scope: !1088)
!1218 = !DILocation(line: 1575, column: 39, scope: !1088)
!1219 = !DILocation(line: 1575, column: 25, scope: !1088)
!1220 = !DILocation(line: 1575, column: 23, scope: !1088)
!1221 = !DILocation(line: 1576, column: 20, scope: !1222)
!1222 = distinct !DILexicalBlock(scope: !1088, file: !580, line: 1576, column: 13)
!1223 = !DILocation(line: 1576, column: 18, scope: !1222)
!1224 = !DILocation(line: 1576, column: 25, scope: !1225)
!1225 = !DILexicalBlockFile(scope: !1226, file: !580, discriminator: 1)
!1226 = distinct !DILexicalBlock(scope: !1222, file: !580, line: 1576, column: 13)
!1227 = !DILocation(line: 1576, column: 29, scope: !1225)
!1228 = !DILocation(line: 1576, column: 33, scope: !1225)
!1229 = !DILocation(line: 1576, column: 46, scope: !1225)
!1230 = !DILocation(line: 1576, column: 50, scope: !1225)
!1231 = !DILocation(line: 1576, column: 44, scope: !1225)
!1232 = !DILocation(line: 1576, column: 27, scope: !1225)
!1233 = !DILocation(line: 1576, column: 13, scope: !1225)
!1234 = !DILocation(line: 1577, column: 41, scope: !1226)
!1235 = !DILocation(line: 1577, column: 31, scope: !1226)
!1236 = !DILocation(line: 1577, column: 47, scope: !1226)
!1237 = !DILocation(line: 1577, column: 44, scope: !1226)
!1238 = !DILocation(line: 1577, column: 26, scope: !1226)
!1239 = !DILocation(line: 1577, column: 17, scope: !1226)
!1240 = !DILocation(line: 1577, column: 29, scope: !1226)
!1241 = !DILocation(line: 1576, column: 61, scope: !1242)
!1242 = !DILexicalBlockFile(scope: !1226, file: !580, discriminator: 2)
!1243 = !DILocation(line: 1576, column: 13, scope: !1242)
!1244 = distinct !{!1244, !1245}
!1245 = !DILocation(line: 1576, column: 13, scope: !1088)
!1246 = !DILocation(line: 1578, column: 13, scope: !1088)
!1247 = !DILocation(line: 1581, column: 9, scope: !1248)
!1248 = distinct !DILexicalBlock(scope: !1012, file: !580, line: 1581, column: 9)
!1249 = !DILocation(line: 1581, column: 12, scope: !1248)
!1250 = !DILocation(line: 1581, column: 9, scope: !1012)
!1251 = !DILocation(line: 1582, column: 28, scope: !1252)
!1252 = distinct !DILexicalBlock(scope: !1248, file: !580, line: 1581, column: 28)
!1253 = !DILocation(line: 1582, column: 31, scope: !1252)
!1254 = !DILocation(line: 1582, column: 9, scope: !1252)
!1255 = !DILocation(line: 1583, column: 29, scope: !1252)
!1256 = !DILocation(line: 1583, column: 32, scope: !1252)
!1257 = !DILocation(line: 1583, column: 42, scope: !1252)
!1258 = !DILocation(line: 1583, column: 46, scope: !1252)
!1259 = !DILocation(line: 1583, column: 9, scope: !1252)
!1260 = !DILocation(line: 1584, column: 28, scope: !1252)
!1261 = !DILocation(line: 1584, column: 31, scope: !1252)
!1262 = !DILocation(line: 1584, column: 42, scope: !1252)
!1263 = !DILocation(line: 1584, column: 45, scope: !1252)
!1264 = !DILocation(line: 1584, column: 9, scope: !1252)
!1265 = !DILocation(line: 1585, column: 28, scope: !1252)
!1266 = !DILocation(line: 1585, column: 31, scope: !1252)
!1267 = !DILocation(line: 1585, column: 42, scope: !1252)
!1268 = !DILocation(line: 1585, column: 45, scope: !1252)
!1269 = !DILocation(line: 1585, column: 9, scope: !1252)
!1270 = !DILocation(line: 1586, column: 26, scope: !1252)
!1271 = !DILocation(line: 1586, column: 29, scope: !1252)
!1272 = !DILocation(line: 1586, column: 9, scope: !1252)
!1273 = !DILocation(line: 1587, column: 5, scope: !1252)
!1274 = !DILocation(line: 1588, column: 28, scope: !1275)
!1275 = distinct !DILexicalBlock(scope: !1248, file: !580, line: 1587, column: 12)
!1276 = !DILocation(line: 1588, column: 31, scope: !1275)
!1277 = !DILocation(line: 1588, column: 9, scope: !1275)
!1278 = !DILocation(line: 1589, column: 16, scope: !1279)
!1279 = distinct !DILexicalBlock(scope: !1275, file: !580, line: 1589, column: 9)
!1280 = !DILocation(line: 1589, column: 14, scope: !1279)
!1281 = !DILocation(line: 1589, column: 21, scope: !1282)
!1282 = !DILexicalBlockFile(scope: !1283, file: !580, discriminator: 1)
!1283 = distinct !DILexicalBlock(scope: !1279, file: !580, line: 1589, column: 9)
!1284 = !DILocation(line: 1589, column: 25, scope: !1282)
!1285 = !DILocation(line: 1589, column: 29, scope: !1282)
!1286 = !DILocation(line: 1589, column: 23, scope: !1282)
!1287 = !DILocation(line: 1589, column: 9, scope: !1282)
!1288 = !DILocation(line: 1590, column: 26, scope: !1289)
!1289 = distinct !DILexicalBlock(scope: !1283, file: !580, line: 1589, column: 44)
!1290 = !DILocation(line: 1590, column: 39, scope: !1289)
!1291 = !DILocation(line: 1590, column: 30, scope: !1289)
!1292 = !DILocation(line: 1590, column: 33, scope: !1289)
!1293 = !DILocation(line: 1590, column: 43, scope: !1289)
!1294 = !DILocation(line: 1590, column: 54, scope: !1289)
!1295 = !DILocation(line: 1590, column: 52, scope: !1289)
!1296 = !DILocation(line: 1590, column: 57, scope: !1289)
!1297 = !DILocation(line: 1590, column: 61, scope: !1289)
!1298 = !DILocation(line: 1590, column: 73, scope: !1289)
!1299 = !DILocation(line: 1590, column: 77, scope: !1289)
!1300 = !DILocation(line: 1590, column: 13, scope: !1289)
!1301 = !DILocation(line: 1591, column: 41, scope: !1289)
!1302 = !DILocation(line: 1591, column: 32, scope: !1289)
!1303 = !DILocation(line: 1591, column: 35, scope: !1289)
!1304 = !DILocation(line: 1591, column: 46, scope: !1289)
!1305 = !DILocation(line: 1591, column: 49, scope: !1289)
!1306 = !DILocation(line: 1591, column: 13, scope: !1289)
!1307 = !DILocation(line: 1592, column: 9, scope: !1289)
!1308 = !DILocation(line: 1589, column: 40, scope: !1309)
!1309 = !DILexicalBlockFile(scope: !1283, file: !580, discriminator: 2)
!1310 = !DILocation(line: 1589, column: 9, scope: !1309)
!1311 = distinct !{!1311, !1312}
!1312 = !DILocation(line: 1589, column: 9, scope: !1275)
!1313 = !DILocation(line: 1593, column: 26, scope: !1275)
!1314 = !DILocation(line: 1593, column: 29, scope: !1275)
!1315 = !DILocation(line: 1593, column: 37, scope: !1275)
!1316 = !DILocation(line: 1593, column: 41, scope: !1275)
!1317 = !DILocation(line: 1593, column: 9, scope: !1275)
!1318 = !DILocation(line: 1596, column: 24, scope: !1012)
!1319 = !DILocation(line: 1596, column: 28, scope: !1012)
!1320 = !DILocation(line: 1596, column: 41, scope: !1012)
!1321 = !DILocation(line: 1596, column: 45, scope: !1012)
!1322 = !DILocation(line: 1596, column: 39, scope: !1012)
!1323 = !DILocation(line: 1596, column: 5, scope: !1012)
!1324 = !DILocation(line: 1596, column: 8, scope: !1012)
!1325 = !DILocation(line: 1596, column: 21, scope: !1012)
!1326 = !DILocation(line: 1598, column: 5, scope: !1012)
!1327 = !DILocation(line: 1599, column: 28, scope: !1012)
!1328 = !DILocation(line: 1599, column: 37, scope: !1012)
!1329 = !DILocation(line: 1599, column: 12, scope: !1012)
!1330 = !DILocation(line: 1599, column: 5, scope: !1012)
!1331 = !DILocation(line: 1600, column: 1, scope: !1012)
!1332 = distinct !DISubprogram(name: "config_input", scope: !580, file: !580, line: 1711, type: !398, isLocal: true, isDefinition: true, scopeLine: 1711, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!1333 = !DILocalVariable(name: "inlink", arg: 1, scope: !1332, file: !580, line: 1711, type: !386)
!1334 = !DILocation(line: 1711, column: 39, scope: !1332)
!1335 = !DILocalVariable(name: "ctx", scope: !1332, file: !580, line: 1712, type: !173)
!1336 = !DILocation(line: 1712, column: 22, scope: !1332)
!1337 = !DILocation(line: 1712, column: 28, scope: !1332)
!1338 = !DILocation(line: 1712, column: 36, scope: !1332)
!1339 = !DILocalVariable(name: "s", scope: !1332, file: !580, line: 1713, type: !712)
!1340 = !DILocation(line: 1713, column: 18, scope: !1332)
!1341 = !DILocation(line: 1713, column: 22, scope: !1332)
!1342 = !DILocation(line: 1713, column: 27, scope: !1332)
!1343 = !DILocalVariable(name: "c", scope: !1332, file: !580, line: 1714, type: !200)
!1344 = !DILocation(line: 1714, column: 9, scope: !1332)
!1345 = !DILocation(line: 1716, column: 12, scope: !1332)
!1346 = !DILocation(line: 1717, column: 10, scope: !1332)
!1347 = !DILocation(line: 1717, column: 15, scope: !1332)
!1348 = !DILocation(line: 1717, column: 22, scope: !1332)
!1349 = !DILocation(line: 1717, column: 9, scope: !1332)
!1350 = !DILocation(line: 1716, column: 5, scope: !1332)
!1351 = !DILocation(line: 1719, column: 10, scope: !1352)
!1352 = distinct !DILexicalBlock(scope: !1332, file: !580, line: 1719, column: 9)
!1353 = !DILocation(line: 1719, column: 18, scope: !1352)
!1354 = !DILocation(line: 1719, column: 25, scope: !1352)
!1355 = !DILocation(line: 1719, column: 46, scope: !1352)
!1356 = !DILocation(line: 1720, column: 10, scope: !1352)
!1357 = !DILocation(line: 1720, column: 18, scope: !1352)
!1358 = !DILocation(line: 1720, column: 25, scope: !1352)
!1359 = !DILocation(line: 1720, column: 48, scope: !1352)
!1360 = !DILocation(line: 1721, column: 10, scope: !1352)
!1361 = !DILocation(line: 1721, column: 13, scope: !1352)
!1362 = !DILocation(line: 1721, column: 29, scope: !1352)
!1363 = !DILocation(line: 1719, column: 9, scope: !1364)
!1364 = !DILexicalBlockFile(scope: !1332, file: !580, discriminator: 1)
!1365 = !DILocation(line: 1722, column: 20, scope: !1366)
!1366 = distinct !DILexicalBlock(scope: !1352, file: !580, line: 1721, column: 36)
!1367 = !DILocation(line: 1723, column: 17, scope: !1366)
!1368 = !DILocation(line: 1723, column: 20, scope: !1366)
!1369 = !DILocation(line: 1723, column: 60, scope: !1366)
!1370 = !DILocation(line: 1723, column: 68, scope: !1366)
!1371 = !DILocation(line: 1723, column: 37, scope: !1366)
!1372 = !DILocation(line: 1722, column: 13, scope: !1366)
!1373 = !DILocation(line: 1724, column: 9, scope: !1366)
!1374 = !DILocation(line: 1724, column: 12, scope: !1366)
!1375 = !DILocation(line: 1724, column: 28, scope: !1366)
!1376 = !DILocation(line: 1725, column: 5, scope: !1366)
!1377 = !DILocation(line: 1726, column: 16, scope: !1378)
!1378 = distinct !DILexicalBlock(scope: !1352, file: !580, line: 1725, column: 12)
!1379 = !DILocation(line: 1727, column: 13, scope: !1378)
!1380 = !DILocation(line: 1727, column: 16, scope: !1378)
!1381 = !DILocation(line: 1727, column: 56, scope: !1378)
!1382 = !DILocation(line: 1727, column: 64, scope: !1378)
!1383 = !DILocation(line: 1727, column: 33, scope: !1378)
!1384 = !DILocation(line: 1726, column: 9, scope: !1378)
!1385 = !DILocation(line: 1730, column: 9, scope: !1386)
!1386 = distinct !DILexicalBlock(scope: !1332, file: !580, line: 1730, column: 9)
!1387 = !DILocation(line: 1730, column: 12, scope: !1386)
!1388 = !DILocation(line: 1730, column: 28, scope: !1386)
!1389 = !DILocation(line: 1730, column: 9, scope: !1332)
!1390 = !DILocation(line: 1731, column: 16, scope: !1386)
!1391 = !DILocation(line: 1731, column: 9, scope: !1386)
!1392 = !DILocation(line: 1732, column: 9, scope: !1393)
!1393 = distinct !DILexicalBlock(scope: !1332, file: !580, line: 1732, column: 9)
!1394 = !DILocation(line: 1732, column: 17, scope: !1393)
!1395 = !DILocation(line: 1732, column: 29, scope: !1393)
!1396 = !DILocation(line: 1732, column: 9, scope: !1332)
!1397 = !DILocation(line: 1733, column: 16, scope: !1393)
!1398 = !DILocation(line: 1733, column: 9, scope: !1393)
!1399 = !DILocation(line: 1735, column: 24, scope: !1332)
!1400 = !DILocation(line: 1735, column: 27, scope: !1332)
!1401 = !DILocation(line: 1735, column: 5, scope: !1332)
!1402 = !DILocation(line: 1736, column: 12, scope: !1403)
!1403 = distinct !DILexicalBlock(scope: !1332, file: !580, line: 1736, column: 5)
!1404 = !DILocation(line: 1736, column: 10, scope: !1403)
!1405 = !DILocation(line: 1736, column: 17, scope: !1406)
!1406 = !DILexicalBlockFile(scope: !1407, file: !580, discriminator: 1)
!1407 = distinct !DILexicalBlock(scope: !1403, file: !580, line: 1736, column: 5)
!1408 = !DILocation(line: 1736, column: 19, scope: !1406)
!1409 = !DILocation(line: 1736, column: 5, scope: !1406)
!1410 = !DILocation(line: 1737, column: 30, scope: !1411)
!1411 = distinct !DILexicalBlock(scope: !1407, file: !580, line: 1736, column: 29)
!1412 = !DILocation(line: 1737, column: 21, scope: !1411)
!1413 = !DILocation(line: 1737, column: 24, scope: !1411)
!1414 = !DILocation(line: 1737, column: 34, scope: !1411)
!1415 = !DILocation(line: 1737, column: 42, scope: !1411)
!1416 = !DILocation(line: 1737, column: 55, scope: !1411)
!1417 = !DILocation(line: 1737, column: 58, scope: !1411)
!1418 = !DILocation(line: 1737, column: 9, scope: !1411)
!1419 = !DILocation(line: 1738, column: 5, scope: !1411)
!1420 = !DILocation(line: 1736, column: 25, scope: !1421)
!1421 = !DILexicalBlockFile(scope: !1407, file: !580, discriminator: 2)
!1422 = !DILocation(line: 1736, column: 5, scope: !1421)
!1423 = distinct !{!1423, !1424}
!1424 = !DILocation(line: 1736, column: 5, scope: !1332)
!1425 = !DILocation(line: 1739, column: 12, scope: !1332)
!1426 = !DILocation(line: 1740, column: 9, scope: !1332)
!1427 = !DILocation(line: 1740, column: 12, scope: !1332)
!1428 = !DILocation(line: 1740, column: 20, scope: !1332)
!1429 = !DILocation(line: 1740, column: 23, scope: !1332)
!1430 = !DILocation(line: 1740, column: 32, scope: !1332)
!1431 = !DILocation(line: 1739, column: 5, scope: !1332)
!1432 = !DILocation(line: 1742, column: 9, scope: !1433)
!1433 = distinct !DILexicalBlock(scope: !1332, file: !580, line: 1742, column: 9)
!1434 = !DILocation(line: 1742, column: 17, scope: !1433)
!1435 = !DILocation(line: 1742, column: 26, scope: !1433)
!1436 = !DILocation(line: 1742, column: 31, scope: !1433)
!1437 = !DILocation(line: 1742, column: 34, scope: !1438)
!1438 = !DILexicalBlockFile(scope: !1433, file: !580, discriminator: 1)
!1439 = !DILocation(line: 1742, column: 37, scope: !1438)
!1440 = !DILocation(line: 1742, column: 9, scope: !1438)
!1441 = !DILocation(line: 1743, column: 16, scope: !1442)
!1442 = distinct !DILexicalBlock(scope: !1433, file: !580, line: 1742, column: 53)
!1443 = !DILocation(line: 1743, column: 70, scope: !1442)
!1444 = !DILocation(line: 1743, column: 78, scope: !1442)
!1445 = !DILocation(line: 1743, column: 9, scope: !1442)
!1446 = !DILocation(line: 1744, column: 9, scope: !1442)
!1447 = !DILocation(line: 1744, column: 12, scope: !1442)
!1448 = !DILocation(line: 1744, column: 27, scope: !1442)
!1449 = !DILocation(line: 1745, column: 5, scope: !1442)
!1450 = !DILocation(line: 1746, column: 12, scope: !1332)
!1451 = !DILocation(line: 1747, column: 10, scope: !1332)
!1452 = !DILocation(line: 1747, column: 13, scope: !1332)
!1453 = !DILocation(line: 1747, column: 9, scope: !1332)
!1454 = !DILocation(line: 1746, column: 5, scope: !1332)
!1455 = !DILocation(line: 1749, column: 12, scope: !1332)
!1456 = !DILocation(line: 1750, column: 10, scope: !1332)
!1457 = !DILocation(line: 1750, column: 13, scope: !1332)
!1458 = !DILocation(line: 1750, column: 9, scope: !1332)
!1459 = !DILocation(line: 1749, column: 5, scope: !1332)
!1460 = !DILocation(line: 1751, column: 12, scope: !1332)
!1461 = !DILocation(line: 1752, column: 9, scope: !1332)
!1462 = !DILocation(line: 1752, column: 12, scope: !1332)
!1463 = !DILocation(line: 1752, column: 39, scope: !1332)
!1464 = !DILocation(line: 1752, column: 42, scope: !1332)
!1465 = !DILocation(line: 1752, column: 26, scope: !1332)
!1466 = !DILocation(line: 1751, column: 5, scope: !1332)
!1467 = !DILocation(line: 1754, column: 5, scope: !1332)
!1468 = distinct !DISubprogram(name: "hdcd_detect_start", scope: !580, file: !580, line: 1483, type: !1469, isLocal: true, isDefinition: true, scopeLine: 1483, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!1469 = !DISubroutineType(types: !1470)
!1470 = !{null, !1471}
!1471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !756, size: 64, align: 64)
!1472 = !DILocalVariable(name: "detect", arg: 1, scope: !1468, file: !580, line: 1483, type: !1471)
!1473 = !DILocation(line: 1483, column: 52, scope: !1468)
!1474 = !DILocation(line: 1484, column: 5, scope: !1468)
!1475 = !DILocation(line: 1484, column: 13, scope: !1468)
!1476 = !DILocation(line: 1484, column: 20, scope: !1468)
!1477 = !DILocation(line: 1485, column: 5, scope: !1468)
!1478 = !DILocation(line: 1485, column: 13, scope: !1468)
!1479 = !DILocation(line: 1485, column: 27, scope: !1468)
!1480 = !DILocation(line: 1486, column: 5, scope: !1468)
!1481 = !DILocation(line: 1486, column: 13, scope: !1468)
!1482 = !DILocation(line: 1486, column: 27, scope: !1468)
!1483 = !DILocation(line: 1487, column: 5, scope: !1468)
!1484 = !DILocation(line: 1487, column: 13, scope: !1468)
!1485 = !DILocation(line: 1487, column: 29, scope: !1468)
!1486 = !DILocation(line: 1488, column: 1, scope: !1468)
!1487 = distinct !DISubprogram(name: "hdcd_process_stereo", scope: !580, file: !580, line: 1406, type: !1488, isLocal: true, isDefinition: true, scopeLine: 1407, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!1488 = !DISubroutineType(types: !1489)
!1489 = !{null, !712, !630, !200}
!1490 = !DILocalVariable(name: "ctx", arg: 1, scope: !1487, file: !580, line: 1406, type: !712)
!1491 = !DILocation(line: 1406, column: 46, scope: !1487)
!1492 = !DILocalVariable(name: "samples", arg: 2, scope: !1487, file: !580, line: 1406, type: !630)
!1493 = !DILocation(line: 1406, column: 60, scope: !1487)
!1494 = !DILocalVariable(name: "count", arg: 3, scope: !1487, file: !580, line: 1406, type: !200)
!1495 = !DILocation(line: 1406, column: 73, scope: !1487)
!1496 = !DILocalVariable(name: "stride", scope: !1487, file: !580, line: 1408, type: !653)
!1497 = !DILocation(line: 1408, column: 15, scope: !1487)
!1498 = !DILocalVariable(name: "samples_end", scope: !1487, file: !580, line: 1409, type: !630)
!1499 = !DILocation(line: 1409, column: 14, scope: !1487)
!1500 = !DILocation(line: 1409, column: 28, scope: !1487)
!1501 = !DILocation(line: 1409, column: 38, scope: !1487)
!1502 = !DILocation(line: 1409, column: 44, scope: !1487)
!1503 = !DILocation(line: 1409, column: 36, scope: !1487)
!1504 = !DILocalVariable(name: "gain", scope: !1487, file: !580, line: 1410, type: !1505)
!1505 = !DICompositeType(tag: DW_TAG_array_type, baseType: !200, size: 64, align: 32, elements: !641)
!1506 = !DILocation(line: 1410, column: 9, scope: !1487)
!1507 = !DILocation(line: 1410, column: 19, scope: !1487)
!1508 = !DILocation(line: 1410, column: 20, scope: !1487)
!1509 = !DILocation(line: 1410, column: 25, scope: !1487)
!1510 = !DILocation(line: 1410, column: 34, scope: !1487)
!1511 = !DILocation(line: 1410, column: 48, scope: !1487)
!1512 = !DILocation(line: 1410, column: 53, scope: !1487)
!1513 = !DILocation(line: 1410, column: 62, scope: !1487)
!1514 = !DILocalVariable(name: "peak_extend", scope: !1487, file: !580, line: 1411, type: !1505)
!1515 = !DILocation(line: 1411, column: 9, scope: !1487)
!1516 = !DILocalVariable(name: "lead", scope: !1487, file: !580, line: 1412, type: !200)
!1517 = !DILocation(line: 1412, column: 9, scope: !1487)
!1518 = !DILocalVariable(name: "ctlret", scope: !1487, file: !580, line: 1413, type: !200)
!1519 = !DILocation(line: 1413, column: 9, scope: !1487)
!1520 = !DILocation(line: 1415, column: 9, scope: !1521)
!1521 = distinct !DILexicalBlock(scope: !1487, file: !580, line: 1415, column: 9)
!1522 = !DILocation(line: 1415, column: 14, scope: !1521)
!1523 = !DILocation(line: 1415, column: 9, scope: !1487)
!1524 = !DILocation(line: 1416, column: 31, scope: !1525)
!1525 = distinct !DILexicalBlock(scope: !1521, file: !580, line: 1415, column: 28)
!1526 = !DILocation(line: 1416, column: 36, scope: !1525)
!1527 = !DILocation(line: 1416, column: 46, scope: !1525)
!1528 = !DILocation(line: 1416, column: 55, scope: !1525)
!1529 = !DILocation(line: 1416, column: 9, scope: !1525)
!1530 = !DILocation(line: 1417, column: 31, scope: !1525)
!1531 = !DILocation(line: 1417, column: 36, scope: !1525)
!1532 = !DILocation(line: 1417, column: 46, scope: !1525)
!1533 = !DILocation(line: 1417, column: 54, scope: !1525)
!1534 = !DILocation(line: 1417, column: 59, scope: !1525)
!1535 = !DILocation(line: 1417, column: 9, scope: !1525)
!1536 = !DILocation(line: 1418, column: 5, scope: !1525)
!1537 = !DILocation(line: 1420, column: 34, scope: !1487)
!1538 = !DILocation(line: 1420, column: 40, scope: !1487)
!1539 = !DILocation(line: 1420, column: 57, scope: !1487)
!1540 = !DILocation(line: 1420, column: 14, scope: !1487)
!1541 = !DILocation(line: 1420, column: 12, scope: !1487)
!1542 = !DILocation(line: 1421, column: 5, scope: !1487)
!1543 = !DILocation(line: 1421, column: 12, scope: !1544)
!1544 = !DILexicalBlockFile(scope: !1487, file: !580, discriminator: 1)
!1545 = !DILocation(line: 1421, column: 20, scope: !1544)
!1546 = !DILocation(line: 1421, column: 18, scope: !1544)
!1547 = !DILocation(line: 1421, column: 5, scope: !1544)
!1548 = !DILocalVariable(name: "envelope_run", scope: !1549, file: !580, line: 1422, type: !200)
!1549 = distinct !DILexicalBlock(scope: !1487, file: !580, line: 1421, column: 26)
!1550 = !DILocation(line: 1422, column: 13, scope: !1549)
!1551 = !DILocalVariable(name: "run", scope: !1549, file: !580, line: 1422, type: !200)
!1552 = !DILocation(line: 1422, column: 27, scope: !1549)
!1553 = !DILocation(line: 1424, column: 9, scope: !1549)
!1554 = distinct !{!1554, !1553}
!1555 = !DILocation(line: 1424, column: 20, scope: !1556)
!1556 = !DILexicalBlockFile(scope: !1557, file: !580, discriminator: 1)
!1557 = distinct !DILexicalBlock(scope: !1558, file: !580, line: 1424, column: 18)
!1558 = distinct !DILexicalBlock(scope: !1549, file: !580, line: 1424, column: 12)
!1559 = !DILocation(line: 1424, column: 30, scope: !1556)
!1560 = !DILocation(line: 1424, column: 35, scope: !1556)
!1561 = !DILocation(line: 1424, column: 28, scope: !1556)
!1562 = !DILocation(line: 1424, column: 56, scope: !1556)
!1563 = !DILocation(line: 1424, column: 64, scope: !1556)
!1564 = !DILocation(line: 1424, column: 62, scope: !1556)
!1565 = !DILocation(line: 1424, column: 53, scope: !1556)
!1566 = !DILocation(line: 1424, column: 44, scope: !1556)
!1567 = !DILocation(line: 1424, column: 73, scope: !1556)
!1568 = !DILocation(line: 1424, column: 70, scope: !1556)
!1569 = !DILocation(line: 1424, column: 18, scope: !1556)
!1570 = !DILocation(line: 1424, column: 89, scope: !1571)
!1571 = !DILexicalBlockFile(scope: !1572, file: !580, discriminator: 2)
!1572 = distinct !DILexicalBlock(scope: !1557, file: !580, line: 1424, column: 87)
!1573 = !DILocation(line: 1424, column: 147, scope: !1574)
!1574 = !DILexicalBlockFile(scope: !1571, file: !580, discriminator: 4)
!1575 = !DILocation(line: 1424, column: 147, scope: !1571)
!1576 = !DILocation(line: 1424, column: 158, scope: !1577)
!1577 = !DILexicalBlockFile(scope: !1558, file: !580, discriminator: 3)
!1578 = !DILocation(line: 1425, column: 25, scope: !1549)
!1579 = !DILocation(line: 1425, column: 30, scope: !1549)
!1580 = !DILocation(line: 1425, column: 35, scope: !1549)
!1581 = !DILocation(line: 1425, column: 45, scope: !1549)
!1582 = !DILocation(line: 1425, column: 55, scope: !1549)
!1583 = !DILocation(line: 1425, column: 60, scope: !1549)
!1584 = !DILocation(line: 1425, column: 53, scope: !1549)
!1585 = !DILocation(line: 1425, column: 70, scope: !1549)
!1586 = !DILocation(line: 1425, column: 78, scope: !1549)
!1587 = !DILocation(line: 1425, column: 76, scope: !1549)
!1588 = !DILocation(line: 1425, column: 15, scope: !1549)
!1589 = !DILocation(line: 1425, column: 89, scope: !1549)
!1590 = !DILocation(line: 1425, column: 87, scope: !1549)
!1591 = !DILocation(line: 1425, column: 13, scope: !1549)
!1592 = !DILocation(line: 1426, column: 24, scope: !1549)
!1593 = !DILocation(line: 1426, column: 28, scope: !1549)
!1594 = !DILocation(line: 1426, column: 22, scope: !1549)
!1595 = !DILocation(line: 1428, column: 9, scope: !1549)
!1596 = distinct !{!1596, !1595}
!1597 = !DILocation(line: 1428, column: 20, scope: !1598)
!1598 = !DILexicalBlockFile(scope: !1599, file: !580, discriminator: 1)
!1599 = distinct !DILexicalBlock(scope: !1600, file: !580, line: 1428, column: 18)
!1600 = distinct !DILexicalBlock(scope: !1549, file: !580, line: 1428, column: 12)
!1601 = !DILocation(line: 1428, column: 30, scope: !1598)
!1602 = !DILocation(line: 1428, column: 43, scope: !1598)
!1603 = !DILocation(line: 1428, column: 28, scope: !1598)
!1604 = !DILocation(line: 1428, column: 55, scope: !1598)
!1605 = !DILocation(line: 1428, column: 52, scope: !1598)
!1606 = !DILocation(line: 1428, column: 18, scope: !1598)
!1607 = !DILocation(line: 1428, column: 71, scope: !1608)
!1608 = !DILexicalBlockFile(scope: !1609, file: !580, discriminator: 2)
!1609 = distinct !DILexicalBlock(scope: !1599, file: !580, line: 1428, column: 69)
!1610 = !DILocation(line: 1428, column: 129, scope: !1611)
!1611 = !DILexicalBlockFile(scope: !1608, file: !580, discriminator: 4)
!1612 = !DILocation(line: 1428, column: 129, scope: !1608)
!1613 = !DILocation(line: 1428, column: 140, scope: !1614)
!1614 = !DILexicalBlockFile(scope: !1600, file: !580, discriminator: 3)
!1615 = !DILocation(line: 1430, column: 13, scope: !1616)
!1616 = distinct !DILexicalBlock(scope: !1549, file: !580, line: 1430, column: 13)
!1617 = !DILocation(line: 1430, column: 18, scope: !1616)
!1618 = !DILocation(line: 1430, column: 13, scope: !1549)
!1619 = !DILocation(line: 1431, column: 36, scope: !1620)
!1620 = distinct !DILexicalBlock(scope: !1616, file: !580, line: 1430, column: 32)
!1621 = !DILocation(line: 1431, column: 45, scope: !1620)
!1622 = !DILocation(line: 1431, column: 67, scope: !1620)
!1623 = !DILocation(line: 1431, column: 76, scope: !1620)
!1624 = !DILocation(line: 1431, column: 81, scope: !1620)
!1625 = !DILocation(line: 1431, column: 98, scope: !1620)
!1626 = !DILocation(line: 1432, column: 17, scope: !1620)
!1627 = !DILocation(line: 1432, column: 22, scope: !1620)
!1628 = !DILocation(line: 1433, column: 17, scope: !1620)
!1629 = !DILocation(line: 1433, column: 22, scope: !1620)
!1630 = !DILocation(line: 1433, column: 31, scope: !1620)
!1631 = !DILocation(line: 1434, column: 18, scope: !1620)
!1632 = !DILocation(line: 1434, column: 25, scope: !1620)
!1633 = !DILocation(line: 1431, column: 23, scope: !1620)
!1634 = !DILocation(line: 1431, column: 13, scope: !1620)
!1635 = !DILocation(line: 1431, column: 21, scope: !1620)
!1636 = !DILocation(line: 1435, column: 36, scope: !1620)
!1637 = !DILocation(line: 1435, column: 44, scope: !1620)
!1638 = !DILocation(line: 1435, column: 49, scope: !1620)
!1639 = !DILocation(line: 1435, column: 71, scope: !1620)
!1640 = !DILocation(line: 1435, column: 80, scope: !1620)
!1641 = !DILocation(line: 1435, column: 85, scope: !1620)
!1642 = !DILocation(line: 1435, column: 102, scope: !1620)
!1643 = !DILocation(line: 1436, column: 17, scope: !1620)
!1644 = !DILocation(line: 1436, column: 22, scope: !1620)
!1645 = !DILocation(line: 1437, column: 17, scope: !1620)
!1646 = !DILocation(line: 1437, column: 22, scope: !1620)
!1647 = !DILocation(line: 1437, column: 31, scope: !1620)
!1648 = !DILocation(line: 1438, column: 18, scope: !1620)
!1649 = !DILocation(line: 1438, column: 25, scope: !1620)
!1650 = !DILocation(line: 1435, column: 23, scope: !1620)
!1651 = !DILocation(line: 1435, column: 13, scope: !1620)
!1652 = !DILocation(line: 1435, column: 21, scope: !1620)
!1653 = !DILocation(line: 1439, column: 9, scope: !1620)
!1654 = !DILocation(line: 1440, column: 37, scope: !1655)
!1655 = distinct !DILexicalBlock(scope: !1616, file: !580, line: 1439, column: 16)
!1656 = !DILocation(line: 1440, column: 46, scope: !1655)
!1657 = !DILocation(line: 1440, column: 68, scope: !1655)
!1658 = !DILocation(line: 1440, column: 73, scope: !1655)
!1659 = !DILocation(line: 1440, column: 90, scope: !1655)
!1660 = !DILocation(line: 1440, column: 99, scope: !1655)
!1661 = !DILocation(line: 1440, column: 104, scope: !1655)
!1662 = !DILocation(line: 1440, column: 121, scope: !1655)
!1663 = !DILocation(line: 1440, column: 23, scope: !1655)
!1664 = !DILocation(line: 1440, column: 13, scope: !1655)
!1665 = !DILocation(line: 1440, column: 21, scope: !1655)
!1666 = !DILocation(line: 1441, column: 37, scope: !1655)
!1667 = !DILocation(line: 1441, column: 45, scope: !1655)
!1668 = !DILocation(line: 1441, column: 50, scope: !1655)
!1669 = !DILocation(line: 1441, column: 72, scope: !1655)
!1670 = !DILocation(line: 1441, column: 77, scope: !1655)
!1671 = !DILocation(line: 1441, column: 94, scope: !1655)
!1672 = !DILocation(line: 1441, column: 103, scope: !1655)
!1673 = !DILocation(line: 1441, column: 108, scope: !1655)
!1674 = !DILocation(line: 1441, column: 125, scope: !1655)
!1675 = !DILocation(line: 1441, column: 23, scope: !1655)
!1676 = !DILocation(line: 1441, column: 13, scope: !1655)
!1677 = !DILocation(line: 1441, column: 21, scope: !1655)
!1678 = !DILocation(line: 1444, column: 20, scope: !1549)
!1679 = !DILocation(line: 1444, column: 33, scope: !1549)
!1680 = !DILocation(line: 1444, column: 17, scope: !1549)
!1681 = !DILocation(line: 1445, column: 18, scope: !1549)
!1682 = !DILocation(line: 1445, column: 15, scope: !1549)
!1683 = !DILocation(line: 1446, column: 16, scope: !1549)
!1684 = !DILocation(line: 1446, column: 22, scope: !1549)
!1685 = !DILocation(line: 1446, column: 20, scope: !1549)
!1686 = !DILocation(line: 1446, column: 14, scope: !1549)
!1687 = !DILocation(line: 1448, column: 38, scope: !1549)
!1688 = !DILocation(line: 1448, column: 44, scope: !1549)
!1689 = !DILocation(line: 1448, column: 61, scope: !1549)
!1690 = !DILocation(line: 1448, column: 18, scope: !1549)
!1691 = !DILocation(line: 1448, column: 16, scope: !1549)
!1692 = !DILocation(line: 1421, column: 5, scope: !1693)
!1693 = !DILexicalBlockFile(scope: !1487, file: !580, discriminator: 2)
!1694 = distinct !{!1694, !1542}
!1695 = !DILocation(line: 1450, column: 9, scope: !1696)
!1696 = distinct !DILexicalBlock(scope: !1487, file: !580, line: 1450, column: 9)
!1697 = !DILocation(line: 1450, column: 14, scope: !1696)
!1698 = !DILocation(line: 1450, column: 9, scope: !1487)
!1699 = !DILocation(line: 1451, column: 9, scope: !1700)
!1700 = distinct !DILexicalBlock(scope: !1696, file: !580, line: 1450, column: 19)
!1701 = distinct !{!1701, !1699}
!1702 = !DILocation(line: 1451, column: 20, scope: !1703)
!1703 = !DILexicalBlockFile(scope: !1704, file: !580, discriminator: 1)
!1704 = distinct !DILexicalBlock(scope: !1705, file: !580, line: 1451, column: 18)
!1705 = distinct !DILexicalBlock(scope: !1700, file: !580, line: 1451, column: 12)
!1706 = !DILocation(line: 1451, column: 30, scope: !1703)
!1707 = !DILocation(line: 1451, column: 35, scope: !1703)
!1708 = !DILocation(line: 1451, column: 28, scope: !1703)
!1709 = !DILocation(line: 1451, column: 47, scope: !1703)
!1710 = !DILocation(line: 1451, column: 44, scope: !1703)
!1711 = !DILocation(line: 1451, column: 18, scope: !1703)
!1712 = !DILocation(line: 1451, column: 63, scope: !1713)
!1713 = !DILexicalBlockFile(scope: !1714, file: !580, discriminator: 2)
!1714 = distinct !DILexicalBlock(scope: !1704, file: !580, line: 1451, column: 61)
!1715 = !DILocation(line: 1451, column: 121, scope: !1716)
!1716 = !DILexicalBlockFile(scope: !1713, file: !580, discriminator: 4)
!1717 = !DILocation(line: 1451, column: 121, scope: !1713)
!1718 = !DILocation(line: 1451, column: 132, scope: !1719)
!1719 = !DILexicalBlockFile(scope: !1705, file: !580, discriminator: 3)
!1720 = !DILocation(line: 1452, column: 13, scope: !1721)
!1721 = distinct !DILexicalBlock(scope: !1700, file: !580, line: 1452, column: 13)
!1722 = !DILocation(line: 1452, column: 18, scope: !1721)
!1723 = !DILocation(line: 1452, column: 13, scope: !1700)
!1724 = !DILocation(line: 1453, column: 36, scope: !1725)
!1725 = distinct !DILexicalBlock(scope: !1721, file: !580, line: 1452, column: 32)
!1726 = !DILocation(line: 1453, column: 45, scope: !1725)
!1727 = !DILocation(line: 1453, column: 59, scope: !1725)
!1728 = !DILocation(line: 1453, column: 68, scope: !1725)
!1729 = !DILocation(line: 1453, column: 73, scope: !1725)
!1730 = !DILocation(line: 1453, column: 90, scope: !1725)
!1731 = !DILocation(line: 1454, column: 17, scope: !1725)
!1732 = !DILocation(line: 1454, column: 22, scope: !1725)
!1733 = !DILocation(line: 1455, column: 17, scope: !1725)
!1734 = !DILocation(line: 1455, column: 22, scope: !1725)
!1735 = !DILocation(line: 1455, column: 31, scope: !1725)
!1736 = !DILocation(line: 1456, column: 18, scope: !1725)
!1737 = !DILocation(line: 1456, column: 25, scope: !1725)
!1738 = !DILocation(line: 1453, column: 23, scope: !1725)
!1739 = !DILocation(line: 1453, column: 13, scope: !1725)
!1740 = !DILocation(line: 1453, column: 21, scope: !1725)
!1741 = !DILocation(line: 1457, column: 36, scope: !1725)
!1742 = !DILocation(line: 1457, column: 44, scope: !1725)
!1743 = !DILocation(line: 1457, column: 49, scope: !1725)
!1744 = !DILocation(line: 1457, column: 63, scope: !1725)
!1745 = !DILocation(line: 1457, column: 72, scope: !1725)
!1746 = !DILocation(line: 1457, column: 77, scope: !1725)
!1747 = !DILocation(line: 1457, column: 94, scope: !1725)
!1748 = !DILocation(line: 1458, column: 17, scope: !1725)
!1749 = !DILocation(line: 1458, column: 22, scope: !1725)
!1750 = !DILocation(line: 1459, column: 17, scope: !1725)
!1751 = !DILocation(line: 1459, column: 22, scope: !1725)
!1752 = !DILocation(line: 1459, column: 31, scope: !1725)
!1753 = !DILocation(line: 1460, column: 18, scope: !1725)
!1754 = !DILocation(line: 1460, column: 25, scope: !1725)
!1755 = !DILocation(line: 1457, column: 23, scope: !1725)
!1756 = !DILocation(line: 1457, column: 13, scope: !1725)
!1757 = !DILocation(line: 1457, column: 21, scope: !1725)
!1758 = !DILocation(line: 1461, column: 9, scope: !1725)
!1759 = !DILocation(line: 1462, column: 37, scope: !1760)
!1760 = distinct !DILexicalBlock(scope: !1721, file: !580, line: 1461, column: 16)
!1761 = !DILocation(line: 1462, column: 46, scope: !1760)
!1762 = !DILocation(line: 1462, column: 60, scope: !1760)
!1763 = !DILocation(line: 1462, column: 65, scope: !1760)
!1764 = !DILocation(line: 1462, column: 82, scope: !1760)
!1765 = !DILocation(line: 1462, column: 91, scope: !1760)
!1766 = !DILocation(line: 1462, column: 96, scope: !1760)
!1767 = !DILocation(line: 1462, column: 113, scope: !1760)
!1768 = !DILocation(line: 1462, column: 23, scope: !1760)
!1769 = !DILocation(line: 1462, column: 13, scope: !1760)
!1770 = !DILocation(line: 1462, column: 21, scope: !1760)
!1771 = !DILocation(line: 1463, column: 37, scope: !1760)
!1772 = !DILocation(line: 1463, column: 45, scope: !1760)
!1773 = !DILocation(line: 1463, column: 50, scope: !1760)
!1774 = !DILocation(line: 1463, column: 64, scope: !1760)
!1775 = !DILocation(line: 1463, column: 69, scope: !1760)
!1776 = !DILocation(line: 1463, column: 86, scope: !1760)
!1777 = !DILocation(line: 1463, column: 95, scope: !1760)
!1778 = !DILocation(line: 1463, column: 100, scope: !1760)
!1779 = !DILocation(line: 1463, column: 117, scope: !1760)
!1780 = !DILocation(line: 1463, column: 23, scope: !1760)
!1781 = !DILocation(line: 1463, column: 13, scope: !1760)
!1782 = !DILocation(line: 1463, column: 21, scope: !1760)
!1783 = !DILocation(line: 1465, column: 5, scope: !1700)
!1784 = !DILocation(line: 1467, column: 34, scope: !1487)
!1785 = !DILocation(line: 1467, column: 5, scope: !1487)
!1786 = !DILocation(line: 1467, column: 10, scope: !1487)
!1787 = !DILocation(line: 1467, column: 19, scope: !1487)
!1788 = !DILocation(line: 1467, column: 32, scope: !1487)
!1789 = !DILocation(line: 1468, column: 34, scope: !1487)
!1790 = !DILocation(line: 1468, column: 5, scope: !1487)
!1791 = !DILocation(line: 1468, column: 10, scope: !1487)
!1792 = !DILocation(line: 1468, column: 19, scope: !1487)
!1793 = !DILocation(line: 1468, column: 32, scope: !1487)
!1794 = !DILocation(line: 1469, column: 1, scope: !1487)
!1795 = distinct !DISubprogram(name: "hdcd_detect_onech", scope: !580, file: !580, line: 1490, type: !1796, isLocal: true, isDefinition: true, scopeLine: 1490, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!1796 = !DISubroutineType(types: !1797)
!1797 = !{null, !817, !1471}
!1798 = !DILocalVariable(name: "state", arg: 1, scope: !1795, file: !580, line: 1490, type: !817)
!1799 = !DILocation(line: 1490, column: 43, scope: !1795)
!1800 = !DILocalVariable(name: "detect", arg: 2, scope: !1795, file: !580, line: 1490, type: !1471)
!1801 = !DILocation(line: 1490, column: 71, scope: !1795)
!1802 = !DILocalVariable(name: "pe", scope: !1795, file: !580, line: 1491, type: !766)
!1803 = !DILocation(line: 1491, column: 13, scope: !1795)
!1804 = !DILocation(line: 1492, column: 41, scope: !1795)
!1805 = !DILocation(line: 1492, column: 48, scope: !1795)
!1806 = !DILocation(line: 1492, column: 39, scope: !1795)
!1807 = !DILocation(line: 1492, column: 38, scope: !1795)
!1808 = !DILocation(line: 1492, column: 5, scope: !1795)
!1809 = !DILocation(line: 1492, column: 13, scope: !1795)
!1810 = !DILocation(line: 1492, column: 35, scope: !1795)
!1811 = !DILocation(line: 1493, column: 30, scope: !1795)
!1812 = !DILocation(line: 1493, column: 37, scope: !1795)
!1813 = !DILocation(line: 1493, column: 53, scope: !1795)
!1814 = !DILocation(line: 1493, column: 60, scope: !1795)
!1815 = !DILocation(line: 1493, column: 51, scope: !1795)
!1816 = !DILocation(line: 1493, column: 5, scope: !1795)
!1817 = !DILocation(line: 1493, column: 13, scope: !1795)
!1818 = !DILocation(line: 1493, column: 27, scope: !1795)
!1819 = !DILocation(line: 1494, column: 9, scope: !1820)
!1820 = distinct !DILexicalBlock(scope: !1795, file: !580, line: 1494, column: 9)
!1821 = !DILocation(line: 1494, column: 16, scope: !1820)
!1822 = !DILocation(line: 1494, column: 9, scope: !1795)
!1823 = !DILocation(line: 1494, column: 31, scope: !1824)
!1824 = !DILexicalBlockFile(scope: !1820, file: !580, discriminator: 1)
!1825 = !DILocation(line: 1494, column: 39, scope: !1824)
!1826 = !DILocation(line: 1494, column: 51, scope: !1824)
!1827 = !DILocation(line: 1495, column: 9, scope: !1828)
!1828 = distinct !DILexicalBlock(scope: !1795, file: !580, line: 1495, column: 9)
!1829 = !DILocation(line: 1495, column: 16, scope: !1828)
!1830 = !DILocation(line: 1495, column: 9, scope: !1795)
!1831 = !DILocation(line: 1495, column: 31, scope: !1832)
!1832 = !DILexicalBlockFile(scope: !1828, file: !580, discriminator: 1)
!1833 = !DILocation(line: 1495, column: 39, scope: !1832)
!1834 = !DILocation(line: 1495, column: 51, scope: !1832)
!1835 = !DILocation(line: 1496, column: 9, scope: !1836)
!1836 = distinct !DILexicalBlock(scope: !1795, file: !580, line: 1496, column: 9)
!1837 = !DILocation(line: 1496, column: 16, scope: !1836)
!1838 = !DILocation(line: 1496, column: 9, scope: !1795)
!1839 = !DILocation(line: 1498, column: 13, scope: !1840)
!1840 = distinct !DILexicalBlock(scope: !1841, file: !580, line: 1498, column: 13)
!1841 = distinct !DILexicalBlock(scope: !1836, file: !580, line: 1496, column: 35)
!1842 = !DILocation(line: 1498, column: 20, scope: !1840)
!1843 = !DILocation(line: 1498, column: 41, scope: !1840)
!1844 = !DILocation(line: 1498, column: 48, scope: !1840)
!1845 = !DILocation(line: 1498, column: 64, scope: !1840)
!1846 = !DILocation(line: 1498, column: 71, scope: !1840)
!1847 = !DILocation(line: 1498, column: 62, scope: !1840)
!1848 = !DILocation(line: 1498, column: 38, scope: !1840)
!1849 = !DILocation(line: 1498, column: 13, scope: !1841)
!1850 = !DILocation(line: 1499, column: 16, scope: !1840)
!1851 = !DILocation(line: 1499, column: 13, scope: !1840)
!1852 = !DILocation(line: 1501, column: 16, scope: !1840)
!1853 = !DILocation(line: 1502, column: 13, scope: !1854)
!1854 = distinct !DILexicalBlock(scope: !1841, file: !580, line: 1502, column: 13)
!1855 = !DILocation(line: 1502, column: 21, scope: !1854)
!1856 = !DILocation(line: 1502, column: 33, scope: !1854)
!1857 = !DILocation(line: 1502, column: 13, scope: !1841)
!1858 = !DILocation(line: 1503, column: 35, scope: !1854)
!1859 = !DILocation(line: 1503, column: 13, scope: !1854)
!1860 = !DILocation(line: 1503, column: 21, scope: !1854)
!1861 = !DILocation(line: 1503, column: 33, scope: !1854)
!1862 = !DILocation(line: 1504, column: 5, scope: !1841)
!1863 = !DILocation(line: 1505, column: 37, scope: !1795)
!1864 = !DILocation(line: 1505, column: 45, scope: !1795)
!1865 = !DILocation(line: 1505, column: 36, scope: !1795)
!1866 = !DILocation(line: 1505, column: 70, scope: !1795)
!1867 = !DILocation(line: 1505, column: 77, scope: !1795)
!1868 = !DILocation(line: 1505, column: 69, scope: !1795)
!1869 = !DILocation(line: 1505, column: 98, scope: !1870)
!1870 = !DILexicalBlockFile(scope: !1795, file: !580, discriminator: 1)
!1871 = !DILocation(line: 1505, column: 105, scope: !1870)
!1872 = !DILocation(line: 1505, column: 113, scope: !1870)
!1873 = !DILocation(line: 1505, column: 90, scope: !1870)
!1874 = !DILocation(line: 1505, column: 89, scope: !1870)
!1875 = !DILocation(line: 1505, column: 122, scope: !1870)
!1876 = !DILocation(line: 1505, column: 129, scope: !1870)
!1877 = !DILocation(line: 1505, column: 138, scope: !1870)
!1878 = !DILocation(line: 1505, column: 121, scope: !1870)
!1879 = !DILocation(line: 1505, column: 118, scope: !1870)
!1880 = !DILocation(line: 1505, column: 69, scope: !1870)
!1881 = !DILocation(line: 1505, column: 69, scope: !1882)
!1882 = !DILexicalBlockFile(scope: !1795, file: !580, discriminator: 2)
!1883 = !DILocation(line: 1505, column: 69, scope: !1884)
!1884 = !DILexicalBlockFile(scope: !1795, file: !580, discriminator: 3)
!1885 = !DILocation(line: 1505, column: 66, scope: !1884)
!1886 = !DILocation(line: 1505, column: 36, scope: !1884)
!1887 = !DILocation(line: 1505, column: 167, scope: !1888)
!1888 = !DILexicalBlockFile(scope: !1795, file: !580, discriminator: 4)
!1889 = !DILocation(line: 1505, column: 174, scope: !1888)
!1890 = !DILocation(line: 1505, column: 166, scope: !1888)
!1891 = !DILocation(line: 1505, column: 195, scope: !1892)
!1892 = !DILexicalBlockFile(scope: !1795, file: !580, discriminator: 5)
!1893 = !DILocation(line: 1505, column: 202, scope: !1892)
!1894 = !DILocation(line: 1505, column: 210, scope: !1892)
!1895 = !DILocation(line: 1505, column: 187, scope: !1892)
!1896 = !DILocation(line: 1505, column: 186, scope: !1892)
!1897 = !DILocation(line: 1505, column: 219, scope: !1892)
!1898 = !DILocation(line: 1505, column: 226, scope: !1892)
!1899 = !DILocation(line: 1505, column: 235, scope: !1892)
!1900 = !DILocation(line: 1505, column: 218, scope: !1892)
!1901 = !DILocation(line: 1505, column: 215, scope: !1892)
!1902 = !DILocation(line: 1505, column: 166, scope: !1892)
!1903 = !DILocation(line: 1505, column: 166, scope: !1904)
!1904 = !DILexicalBlockFile(scope: !1795, file: !580, discriminator: 6)
!1905 = !DILocation(line: 1505, column: 166, scope: !1906)
!1906 = !DILexicalBlockFile(scope: !1795, file: !580, discriminator: 7)
!1907 = !DILocation(line: 1505, column: 36, scope: !1906)
!1908 = !DILocation(line: 1505, column: 263, scope: !1909)
!1909 = !DILexicalBlockFile(scope: !1795, file: !580, discriminator: 8)
!1910 = !DILocation(line: 1505, column: 271, scope: !1909)
!1911 = !DILocation(line: 1505, column: 262, scope: !1909)
!1912 = !DILocation(line: 1505, column: 36, scope: !1909)
!1913 = !DILocation(line: 1505, column: 36, scope: !1914)
!1914 = !DILexicalBlockFile(scope: !1795, file: !580, discriminator: 9)
!1915 = !DILocation(line: 1505, column: 35, scope: !1914)
!1916 = !DILocation(line: 1505, column: 5, scope: !1914)
!1917 = !DILocation(line: 1505, column: 13, scope: !1914)
!1918 = !DILocation(line: 1505, column: 33, scope: !1914)
!1919 = !DILocation(line: 1506, column: 23, scope: !1795)
!1920 = !DILocation(line: 1506, column: 30, scope: !1795)
!1921 = !DILocation(line: 1507, column: 11, scope: !1795)
!1922 = !DILocation(line: 1507, column: 18, scope: !1795)
!1923 = !DILocation(line: 1507, column: 9, scope: !1795)
!1924 = !DILocation(line: 1508, column: 11, scope: !1795)
!1925 = !DILocation(line: 1508, column: 18, scope: !1795)
!1926 = !DILocation(line: 1508, column: 9, scope: !1795)
!1927 = !DILocation(line: 1506, column: 5, scope: !1795)
!1928 = !DILocation(line: 1506, column: 13, scope: !1795)
!1929 = !DILocation(line: 1506, column: 20, scope: !1795)
!1930 = !DILocation(line: 1509, column: 9, scope: !1931)
!1931 = distinct !DILexicalBlock(scope: !1795, file: !580, line: 1509, column: 9)
!1932 = !DILocation(line: 1509, column: 16, scope: !1931)
!1933 = !DILocation(line: 1509, column: 9, scope: !1795)
!1934 = !DILocation(line: 1509, column: 25, scope: !1935)
!1935 = !DILexicalBlockFile(scope: !1931, file: !580, discriminator: 1)
!1936 = !DILocation(line: 1509, column: 33, scope: !1935)
!1937 = !DILocation(line: 1509, column: 46, scope: !1935)
!1938 = !DILocation(line: 1510, column: 9, scope: !1939)
!1939 = distinct !DILexicalBlock(scope: !1795, file: !580, line: 1510, column: 9)
!1940 = !DILocation(line: 1510, column: 16, scope: !1939)
!1941 = !DILocation(line: 1510, column: 38, scope: !1939)
!1942 = !DILocation(line: 1510, column: 9, scope: !1795)
!1943 = !DILocation(line: 1511, column: 13, scope: !1944)
!1944 = distinct !DILexicalBlock(scope: !1945, file: !580, line: 1511, column: 13)
!1945 = distinct !DILexicalBlock(scope: !1939, file: !580, line: 1510, column: 44)
!1946 = !DILocation(line: 1511, column: 21, scope: !1944)
!1947 = !DILocation(line: 1511, column: 37, scope: !1944)
!1948 = !DILocation(line: 1511, column: 13, scope: !1945)
!1949 = !DILocation(line: 1511, column: 44, scope: !1950)
!1950 = !DILexicalBlockFile(scope: !1944, file: !580, discriminator: 1)
!1951 = !DILocation(line: 1511, column: 52, scope: !1950)
!1952 = !DILocation(line: 1511, column: 68, scope: !1950)
!1953 = !DILocation(line: 1512, column: 36, scope: !1945)
!1954 = !DILocation(line: 1512, column: 43, scope: !1945)
!1955 = !DILocation(line: 1512, column: 9, scope: !1945)
!1956 = !DILocation(line: 1512, column: 17, scope: !1945)
!1957 = !DILocation(line: 1512, column: 33, scope: !1945)
!1958 = !DILocation(line: 1513, column: 5, scope: !1945)
!1959 = !DILocation(line: 1514, column: 1, scope: !1795)
!1960 = distinct !DISubprogram(name: "hdcd_detect_end", scope: !580, file: !580, line: 1516, type: !1961, isLocal: true, isDefinition: true, scopeLine: 1516, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!1961 = !DISubroutineType(types: !1962)
!1962 = !{null, !1471, !200}
!1963 = !DILocalVariable(name: "detect", arg: 1, scope: !1960, file: !580, line: 1516, type: !1471)
!1964 = !DILocation(line: 1516, column: 50, scope: !1960)
!1965 = !DILocalVariable(name: "channels", arg: 2, scope: !1960, file: !580, line: 1516, type: !200)
!1966 = !DILocation(line: 1516, column: 62, scope: !1960)
!1967 = !DILocation(line: 1519, column: 9, scope: !1968)
!1968 = distinct !DILexicalBlock(scope: !1960, file: !580, line: 1519, column: 9)
!1969 = !DILocation(line: 1519, column: 17, scope: !1968)
!1970 = !DILocation(line: 1519, column: 34, scope: !1968)
!1971 = !DILocation(line: 1519, column: 31, scope: !1968)
!1972 = !DILocation(line: 1519, column: 9, scope: !1960)
!1973 = !DILocation(line: 1520, column: 13, scope: !1974)
!1974 = distinct !DILexicalBlock(scope: !1975, file: !580, line: 1520, column: 13)
!1975 = distinct !DILexicalBlock(scope: !1968, file: !580, line: 1519, column: 44)
!1976 = !DILocation(line: 1520, column: 21, scope: !1974)
!1977 = !DILocation(line: 1520, column: 41, scope: !1974)
!1978 = !DILocation(line: 1520, column: 44, scope: !1979)
!1979 = !DILexicalBlockFile(scope: !1974, file: !580, discriminator: 1)
!1980 = !DILocation(line: 1520, column: 52, scope: !1979)
!1981 = !DILocation(line: 1520, column: 13, scope: !1979)
!1982 = !DILocation(line: 1521, column: 13, scope: !1974)
!1983 = !DILocation(line: 1521, column: 21, scope: !1974)
!1984 = !DILocation(line: 1521, column: 35, scope: !1974)
!1985 = !DILocation(line: 1523, column: 13, scope: !1974)
!1986 = !DILocation(line: 1523, column: 21, scope: !1974)
!1987 = !DILocation(line: 1523, column: 35, scope: !1974)
!1988 = !DILocation(line: 1524, column: 5, scope: !1975)
!1989 = !DILocation(line: 1525, column: 1, scope: !1960)
!1990 = distinct !DISubprogram(name: "hdcd_process", scope: !580, file: !580, line: 1365, type: !1991, isLocal: true, isDefinition: true, scopeLine: 1366, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!1991 = !DISubroutineType(types: !1992)
!1992 = !{null, !712, !817, !630, !200, !200}
!1993 = !DILocalVariable(name: "ctx", arg: 1, scope: !1990, file: !580, line: 1365, type: !712)
!1994 = !DILocation(line: 1365, column: 39, scope: !1990)
!1995 = !DILocalVariable(name: "state", arg: 2, scope: !1990, file: !580, line: 1365, type: !817)
!1996 = !DILocation(line: 1365, column: 56, scope: !1990)
!1997 = !DILocalVariable(name: "samples", arg: 3, scope: !1990, file: !580, line: 1365, type: !630)
!1998 = !DILocation(line: 1365, column: 72, scope: !1990)
!1999 = !DILocalVariable(name: "count", arg: 4, scope: !1990, file: !580, line: 1365, type: !200)
!2000 = !DILocation(line: 1365, column: 85, scope: !1990)
!2001 = !DILocalVariable(name: "stride", arg: 5, scope: !1990, file: !580, line: 1365, type: !200)
!2002 = !DILocation(line: 1365, column: 96, scope: !1990)
!2003 = !DILocalVariable(name: "samples_end", scope: !1990, file: !580, line: 1367, type: !630)
!2004 = !DILocation(line: 1367, column: 14, scope: !1990)
!2005 = !DILocation(line: 1367, column: 28, scope: !1990)
!2006 = !DILocation(line: 1367, column: 38, scope: !1990)
!2007 = !DILocation(line: 1367, column: 46, scope: !1990)
!2008 = !DILocation(line: 1367, column: 44, scope: !1990)
!2009 = !DILocation(line: 1367, column: 36, scope: !1990)
!2010 = !DILocalVariable(name: "gain", scope: !1990, file: !580, line: 1368, type: !200)
!2011 = !DILocation(line: 1368, column: 9, scope: !1990)
!2012 = !DILocation(line: 1368, column: 16, scope: !1990)
!2013 = !DILocation(line: 1368, column: 23, scope: !1990)
!2014 = !DILocalVariable(name: "peak_extend", scope: !1990, file: !580, line: 1369, type: !200)
!2015 = !DILocation(line: 1369, column: 9, scope: !1990)
!2016 = !DILocalVariable(name: "target_gain", scope: !1990, file: !580, line: 1369, type: !200)
!2017 = !DILocation(line: 1369, column: 22, scope: !1990)
!2018 = !DILocalVariable(name: "lead", scope: !1990, file: !580, line: 1370, type: !200)
!2019 = !DILocation(line: 1370, column: 9, scope: !1990)
!2020 = !DILocation(line: 1372, column: 9, scope: !2021)
!2021 = distinct !DILexicalBlock(scope: !1990, file: !580, line: 1372, column: 9)
!2022 = !DILocation(line: 1372, column: 14, scope: !2021)
!2023 = !DILocation(line: 1372, column: 9, scope: !1990)
!2024 = !DILocation(line: 1373, column: 30, scope: !2021)
!2025 = !DILocation(line: 1373, column: 37, scope: !2021)
!2026 = !DILocation(line: 1373, column: 46, scope: !2021)
!2027 = !DILocation(line: 1373, column: 53, scope: !2021)
!2028 = !DILocation(line: 1373, column: 9, scope: !2021)
!2029 = !DILocation(line: 1375, column: 18, scope: !1990)
!2030 = !DILocation(line: 1375, column: 23, scope: !1990)
!2031 = !DILocation(line: 1375, column: 5, scope: !1990)
!2032 = !DILocation(line: 1376, column: 5, scope: !1990)
!2033 = !DILocation(line: 1376, column: 12, scope: !2034)
!2034 = !DILexicalBlockFile(scope: !1990, file: !580, discriminator: 1)
!2035 = !DILocation(line: 1376, column: 20, scope: !2034)
!2036 = !DILocation(line: 1376, column: 18, scope: !2034)
!2037 = !DILocation(line: 1376, column: 5, scope: !2034)
!2038 = !DILocalVariable(name: "envelope_run", scope: !2039, file: !580, line: 1377, type: !200)
!2039 = distinct !DILexicalBlock(scope: !1990, file: !580, line: 1376, column: 26)
!2040 = !DILocation(line: 1377, column: 13, scope: !2039)
!2041 = !DILocalVariable(name: "run", scope: !2039, file: !580, line: 1378, type: !200)
!2042 = !DILocation(line: 1378, column: 13, scope: !2039)
!2043 = !DILocation(line: 1380, column: 9, scope: !2039)
!2044 = distinct !{!2044, !2043}
!2045 = !DILocation(line: 1380, column: 20, scope: !2046)
!2046 = !DILexicalBlockFile(scope: !2047, file: !580, discriminator: 1)
!2047 = distinct !DILexicalBlock(scope: !2048, file: !580, line: 1380, column: 18)
!2048 = distinct !DILexicalBlock(scope: !2039, file: !580, line: 1380, column: 12)
!2049 = !DILocation(line: 1380, column: 30, scope: !2046)
!2050 = !DILocation(line: 1380, column: 37, scope: !2046)
!2051 = !DILocation(line: 1380, column: 35, scope: !2046)
!2052 = !DILocation(line: 1380, column: 28, scope: !2046)
!2053 = !DILocation(line: 1380, column: 46, scope: !2046)
!2054 = !DILocation(line: 1380, column: 56, scope: !2046)
!2055 = !DILocation(line: 1380, column: 64, scope: !2046)
!2056 = !DILocation(line: 1380, column: 62, scope: !2046)
!2057 = !DILocation(line: 1380, column: 53, scope: !2046)
!2058 = !DILocation(line: 1380, column: 44, scope: !2046)
!2059 = !DILocation(line: 1380, column: 73, scope: !2046)
!2060 = !DILocation(line: 1380, column: 70, scope: !2046)
!2061 = !DILocation(line: 1380, column: 18, scope: !2046)
!2062 = !DILocation(line: 1380, column: 89, scope: !2063)
!2063 = !DILexicalBlockFile(scope: !2064, file: !580, discriminator: 2)
!2064 = distinct !DILexicalBlock(scope: !2047, file: !580, line: 1380, column: 87)
!2065 = !DILocation(line: 1380, column: 147, scope: !2066)
!2066 = !DILexicalBlockFile(scope: !2063, file: !580, discriminator: 4)
!2067 = !DILocation(line: 1380, column: 147, scope: !2063)
!2068 = !DILocation(line: 1380, column: 158, scope: !2069)
!2069 = !DILexicalBlockFile(scope: !2048, file: !580, discriminator: 3)
!2070 = !DILocation(line: 1381, column: 25, scope: !2039)
!2071 = !DILocation(line: 1381, column: 30, scope: !2039)
!2072 = !DILocation(line: 1381, column: 40, scope: !2039)
!2073 = !DILocation(line: 1381, column: 50, scope: !2039)
!2074 = !DILocation(line: 1381, column: 57, scope: !2039)
!2075 = !DILocation(line: 1381, column: 55, scope: !2039)
!2076 = !DILocation(line: 1381, column: 48, scope: !2039)
!2077 = !DILocation(line: 1381, column: 65, scope: !2039)
!2078 = !DILocation(line: 1381, column: 73, scope: !2039)
!2079 = !DILocation(line: 1381, column: 71, scope: !2039)
!2080 = !DILocation(line: 1381, column: 15, scope: !2039)
!2081 = !DILocation(line: 1381, column: 84, scope: !2039)
!2082 = !DILocation(line: 1381, column: 82, scope: !2039)
!2083 = !DILocation(line: 1381, column: 13, scope: !2039)
!2084 = !DILocation(line: 1382, column: 24, scope: !2039)
!2085 = !DILocation(line: 1382, column: 28, scope: !2039)
!2086 = !DILocation(line: 1382, column: 22, scope: !2039)
!2087 = !DILocation(line: 1384, column: 9, scope: !2039)
!2088 = distinct !{!2088, !2087}
!2089 = !DILocation(line: 1384, column: 20, scope: !2090)
!2090 = !DILexicalBlockFile(scope: !2091, file: !580, discriminator: 1)
!2091 = distinct !DILexicalBlock(scope: !2092, file: !580, line: 1384, column: 18)
!2092 = distinct !DILexicalBlock(scope: !2039, file: !580, line: 1384, column: 12)
!2093 = !DILocation(line: 1384, column: 30, scope: !2090)
!2094 = !DILocation(line: 1384, column: 45, scope: !2090)
!2095 = !DILocation(line: 1384, column: 43, scope: !2090)
!2096 = !DILocation(line: 1384, column: 28, scope: !2090)
!2097 = !DILocation(line: 1384, column: 55, scope: !2090)
!2098 = !DILocation(line: 1384, column: 52, scope: !2090)
!2099 = !DILocation(line: 1384, column: 18, scope: !2090)
!2100 = !DILocation(line: 1384, column: 71, scope: !2101)
!2101 = !DILexicalBlockFile(scope: !2102, file: !580, discriminator: 2)
!2102 = distinct !DILexicalBlock(scope: !2091, file: !580, line: 1384, column: 69)
!2103 = !DILocation(line: 1384, column: 129, scope: !2104)
!2104 = !DILexicalBlockFile(scope: !2101, file: !580, discriminator: 4)
!2105 = !DILocation(line: 1384, column: 129, scope: !2101)
!2106 = !DILocation(line: 1384, column: 140, scope: !2107)
!2107 = !DILexicalBlockFile(scope: !2092, file: !580, discriminator: 3)
!2108 = !DILocation(line: 1385, column: 13, scope: !2109)
!2109 = distinct !DILexicalBlock(scope: !2039, file: !580, line: 1385, column: 13)
!2110 = !DILocation(line: 1385, column: 18, scope: !2109)
!2111 = !DILocation(line: 1385, column: 13, scope: !2039)
!2112 = !DILocation(line: 1386, column: 33, scope: !2109)
!2113 = !DILocation(line: 1386, column: 42, scope: !2109)
!2114 = !DILocation(line: 1386, column: 56, scope: !2109)
!2115 = !DILocation(line: 1386, column: 64, scope: !2109)
!2116 = !DILocation(line: 1386, column: 70, scope: !2109)
!2117 = !DILocation(line: 1386, column: 83, scope: !2109)
!2118 = !DILocation(line: 1386, column: 96, scope: !2109)
!2119 = !DILocation(line: 1386, column: 101, scope: !2109)
!2120 = !DILocation(line: 1386, column: 115, scope: !2109)
!2121 = !DILocation(line: 1386, column: 122, scope: !2109)
!2122 = !DILocation(line: 1386, column: 20, scope: !2109)
!2123 = !DILocation(line: 1386, column: 18, scope: !2109)
!2124 = !DILocation(line: 1386, column: 13, scope: !2109)
!2125 = !DILocation(line: 1388, column: 34, scope: !2109)
!2126 = !DILocation(line: 1388, column: 43, scope: !2109)
!2127 = !DILocation(line: 1388, column: 57, scope: !2109)
!2128 = !DILocation(line: 1388, column: 65, scope: !2109)
!2129 = !DILocation(line: 1388, column: 70, scope: !2109)
!2130 = !DILocation(line: 1388, column: 87, scope: !2109)
!2131 = !DILocation(line: 1388, column: 93, scope: !2109)
!2132 = !DILocation(line: 1388, column: 106, scope: !2109)
!2133 = !DILocation(line: 1388, column: 20, scope: !2109)
!2134 = !DILocation(line: 1388, column: 18, scope: !2109)
!2135 = !DILocation(line: 1390, column: 20, scope: !2039)
!2136 = !DILocation(line: 1390, column: 35, scope: !2039)
!2137 = !DILocation(line: 1390, column: 33, scope: !2039)
!2138 = !DILocation(line: 1390, column: 17, scope: !2039)
!2139 = !DILocation(line: 1391, column: 18, scope: !2039)
!2140 = !DILocation(line: 1391, column: 15, scope: !2039)
!2141 = !DILocation(line: 1392, column: 16, scope: !2039)
!2142 = !DILocation(line: 1392, column: 22, scope: !2039)
!2143 = !DILocation(line: 1392, column: 20, scope: !2039)
!2144 = !DILocation(line: 1392, column: 14, scope: !2039)
!2145 = !DILocation(line: 1393, column: 22, scope: !2039)
!2146 = !DILocation(line: 1393, column: 27, scope: !2039)
!2147 = !DILocation(line: 1393, column: 9, scope: !2039)
!2148 = !DILocation(line: 1376, column: 5, scope: !2149)
!2149 = !DILexicalBlockFile(scope: !1990, file: !580, discriminator: 2)
!2150 = distinct !{!2150, !2032}
!2151 = !DILocation(line: 1395, column: 9, scope: !2152)
!2152 = distinct !DILexicalBlock(scope: !1990, file: !580, line: 1395, column: 9)
!2153 = !DILocation(line: 1395, column: 14, scope: !2152)
!2154 = !DILocation(line: 1395, column: 9, scope: !1990)
!2155 = !DILocation(line: 1396, column: 9, scope: !2156)
!2156 = distinct !DILexicalBlock(scope: !2152, file: !580, line: 1395, column: 19)
!2157 = distinct !{!2157, !2155}
!2158 = !DILocation(line: 1396, column: 20, scope: !2159)
!2159 = !DILexicalBlockFile(scope: !2160, file: !580, discriminator: 1)
!2160 = distinct !DILexicalBlock(scope: !2161, file: !580, line: 1396, column: 18)
!2161 = distinct !DILexicalBlock(scope: !2156, file: !580, line: 1396, column: 12)
!2162 = !DILocation(line: 1396, column: 30, scope: !2159)
!2163 = !DILocation(line: 1396, column: 37, scope: !2159)
!2164 = !DILocation(line: 1396, column: 35, scope: !2159)
!2165 = !DILocation(line: 1396, column: 28, scope: !2159)
!2166 = !DILocation(line: 1396, column: 47, scope: !2159)
!2167 = !DILocation(line: 1396, column: 44, scope: !2159)
!2168 = !DILocation(line: 1396, column: 18, scope: !2159)
!2169 = !DILocation(line: 1396, column: 63, scope: !2170)
!2170 = !DILexicalBlockFile(scope: !2171, file: !580, discriminator: 2)
!2171 = distinct !DILexicalBlock(scope: !2160, file: !580, line: 1396, column: 61)
!2172 = !DILocation(line: 1396, column: 121, scope: !2173)
!2173 = !DILexicalBlockFile(scope: !2170, file: !580, discriminator: 4)
!2174 = !DILocation(line: 1396, column: 121, scope: !2170)
!2175 = !DILocation(line: 1396, column: 132, scope: !2176)
!2176 = !DILexicalBlockFile(scope: !2161, file: !580, discriminator: 3)
!2177 = !DILocation(line: 1397, column: 13, scope: !2178)
!2178 = distinct !DILexicalBlock(scope: !2156, file: !580, line: 1397, column: 13)
!2179 = !DILocation(line: 1397, column: 18, scope: !2178)
!2180 = !DILocation(line: 1397, column: 13, scope: !2156)
!2181 = !DILocation(line: 1398, column: 33, scope: !2178)
!2182 = !DILocation(line: 1398, column: 42, scope: !2178)
!2183 = !DILocation(line: 1398, column: 48, scope: !2178)
!2184 = !DILocation(line: 1398, column: 56, scope: !2178)
!2185 = !DILocation(line: 1398, column: 62, scope: !2178)
!2186 = !DILocation(line: 1398, column: 75, scope: !2178)
!2187 = !DILocation(line: 1398, column: 88, scope: !2178)
!2188 = !DILocation(line: 1398, column: 93, scope: !2178)
!2189 = !DILocation(line: 1398, column: 107, scope: !2178)
!2190 = !DILocation(line: 1398, column: 114, scope: !2178)
!2191 = !DILocation(line: 1398, column: 20, scope: !2178)
!2192 = !DILocation(line: 1398, column: 18, scope: !2178)
!2193 = !DILocation(line: 1398, column: 13, scope: !2178)
!2194 = !DILocation(line: 1400, column: 34, scope: !2178)
!2195 = !DILocation(line: 1400, column: 43, scope: !2178)
!2196 = !DILocation(line: 1400, column: 49, scope: !2178)
!2197 = !DILocation(line: 1400, column: 57, scope: !2178)
!2198 = !DILocation(line: 1400, column: 62, scope: !2178)
!2199 = !DILocation(line: 1400, column: 79, scope: !2178)
!2200 = !DILocation(line: 1400, column: 85, scope: !2178)
!2201 = !DILocation(line: 1400, column: 98, scope: !2178)
!2202 = !DILocation(line: 1400, column: 20, scope: !2178)
!2203 = !DILocation(line: 1400, column: 18, scope: !2178)
!2204 = !DILocation(line: 1401, column: 5, scope: !2156)
!2205 = !DILocation(line: 1403, column: 27, scope: !1990)
!2206 = !DILocation(line: 1403, column: 5, scope: !1990)
!2207 = !DILocation(line: 1403, column: 12, scope: !1990)
!2208 = !DILocation(line: 1403, column: 25, scope: !1990)
!2209 = !DILocation(line: 1404, column: 1, scope: !1990)
!2210 = distinct !DISubprogram(name: "hdcd_analyze_prepare", scope: !580, file: !580, line: 1178, type: !2211, isLocal: true, isDefinition: true, scopeLine: 1178, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!2211 = !DISubroutineType(types: !2212)
!2212 = !{null, !817, !630, !200, !200}
!2213 = !DILocalVariable(name: "state", arg: 1, scope: !2210, file: !580, line: 1178, type: !817)
!2214 = !DILocation(line: 1178, column: 46, scope: !2210)
!2215 = !DILocalVariable(name: "samples", arg: 2, scope: !2210, file: !580, line: 1178, type: !630)
!2216 = !DILocation(line: 1178, column: 62, scope: !2210)
!2217 = !DILocalVariable(name: "count", arg: 3, scope: !2210, file: !580, line: 1178, type: !200)
!2218 = !DILocation(line: 1178, column: 75, scope: !2210)
!2219 = !DILocalVariable(name: "stride", arg: 4, scope: !2210, file: !580, line: 1178, type: !200)
!2220 = !DILocation(line: 1178, column: 86, scope: !2210)
!2221 = !DILocalVariable(name: "n", scope: !2210, file: !580, line: 1179, type: !200)
!2222 = !DILocation(line: 1179, column: 9, scope: !2210)
!2223 = !DILocalVariable(name: "f", scope: !2210, file: !580, line: 1179, type: !200)
!2224 = !DILocation(line: 1179, column: 12, scope: !2210)
!2225 = !DILocalVariable(name: "so", scope: !2210, file: !580, line: 1180, type: !200)
!2226 = !DILocation(line: 1180, column: 9, scope: !2210)
!2227 = !DILocation(line: 1180, column: 14, scope: !2210)
!2228 = !DILocation(line: 1180, column: 21, scope: !2210)
!2229 = !DILocation(line: 1180, column: 28, scope: !2210)
!2230 = !DILocation(line: 1180, column: 26, scope: !2210)
!2231 = !DILocation(line: 1181, column: 12, scope: !2232)
!2232 = distinct !DILexicalBlock(scope: !2210, file: !580, line: 1181, column: 5)
!2233 = !DILocation(line: 1181, column: 10, scope: !2232)
!2234 = !DILocation(line: 1181, column: 17, scope: !2235)
!2235 = !DILexicalBlockFile(scope: !2236, file: !580, discriminator: 1)
!2236 = distinct !DILexicalBlock(scope: !2232, file: !580, line: 1181, column: 5)
!2237 = !DILocation(line: 1181, column: 21, scope: !2235)
!2238 = !DILocation(line: 1181, column: 29, scope: !2235)
!2239 = !DILocation(line: 1181, column: 27, scope: !2235)
!2240 = !DILocation(line: 1181, column: 19, scope: !2235)
!2241 = !DILocation(line: 1181, column: 5, scope: !2235)
!2242 = !DILocalVariable(name: "save", scope: !2243, file: !580, line: 1187, type: !631)
!2243 = distinct !DILexicalBlock(scope: !2236, file: !580, line: 1181, column: 50)
!2244 = !DILocation(line: 1187, column: 17, scope: !2243)
!2245 = !DILocation(line: 1187, column: 37, scope: !2243)
!2246 = !DILocation(line: 1187, column: 29, scope: !2243)
!2247 = !DILocation(line: 1187, column: 25, scope: !2243)
!2248 = !DILocation(line: 1187, column: 41, scope: !2243)
!2249 = !DILocation(line: 1187, column: 50, scope: !2243)
!2250 = !DILocation(line: 1187, column: 24, scope: !2243)
!2251 = !DILocation(line: 1188, column: 25, scope: !2243)
!2252 = !DILocation(line: 1188, column: 17, scope: !2243)
!2253 = !DILocation(line: 1188, column: 28, scope: !2243)
!2254 = !DILocation(line: 1188, column: 14, scope: !2243)
!2255 = !DILocation(line: 1189, column: 54, scope: !2243)
!2256 = !DILocation(line: 1189, column: 61, scope: !2243)
!2257 = !DILocation(line: 1189, column: 53, scope: !2243)
!2258 = !DILocation(line: 1189, column: 51, scope: !2243)
!2259 = !DILocation(line: 1189, column: 74, scope: !2243)
!2260 = !DILocation(line: 1189, column: 73, scope: !2243)
!2261 = !DILocation(line: 1189, column: 71, scope: !2243)
!2262 = !DILocation(line: 1189, column: 80, scope: !2243)
!2263 = !DILocation(line: 1189, column: 87, scope: !2243)
!2264 = !DILocation(line: 1189, column: 79, scope: !2243)
!2265 = !DILocation(line: 1189, column: 78, scope: !2243)
!2266 = !DILocation(line: 1189, column: 32, scope: !2243)
!2267 = !DILocation(line: 1189, column: 94, scope: !2243)
!2268 = !DILocation(line: 1189, column: 102, scope: !2243)
!2269 = !DILocation(line: 1189, column: 22, scope: !2243)
!2270 = !DILocation(line: 1189, column: 17, scope: !2243)
!2271 = !DILocation(line: 1189, column: 9, scope: !2243)
!2272 = !DILocation(line: 1189, column: 20, scope: !2243)
!2273 = !DILocation(line: 1190, column: 31, scope: !2243)
!2274 = !DILocation(line: 1190, column: 23, scope: !2243)
!2275 = !DILocation(line: 1190, column: 34, scope: !2243)
!2276 = !DILocation(line: 1190, column: 44, scope: !2243)
!2277 = !DILocation(line: 1190, column: 43, scope: !2243)
!2278 = !DILocation(line: 1190, column: 50, scope: !2243)
!2279 = !DILocation(line: 1190, column: 39, scope: !2243)
!2280 = !DILocation(line: 1190, column: 17, scope: !2243)
!2281 = !DILocation(line: 1190, column: 9, scope: !2243)
!2282 = !DILocation(line: 1190, column: 20, scope: !2243)
!2283 = !DILocation(line: 1191, column: 15, scope: !2284)
!2284 = distinct !DILexicalBlock(scope: !2243, file: !580, line: 1191, column: 13)
!2285 = !DILocation(line: 1191, column: 22, scope: !2284)
!2286 = !DILocation(line: 1191, column: 13, scope: !2284)
!2287 = !DILocation(line: 1191, column: 33, scope: !2284)
!2288 = !DILocation(line: 1191, column: 31, scope: !2284)
!2289 = !DILocation(line: 1191, column: 13, scope: !2243)
!2290 = !DILocation(line: 1191, column: 37, scope: !2291)
!2291 = !DILexicalBlockFile(scope: !2284, file: !580, discriminator: 1)
!2292 = !DILocation(line: 1191, column: 44, scope: !2291)
!2293 = !DILocation(line: 1191, column: 53, scope: !2291)
!2294 = !DILocation(line: 1192, column: 5, scope: !2243)
!2295 = !DILocation(line: 1181, column: 42, scope: !2296)
!2296 = !DILexicalBlockFile(scope: !2236, file: !580, discriminator: 2)
!2297 = !DILocation(line: 1181, column: 39, scope: !2296)
!2298 = !DILocation(line: 1181, column: 5, scope: !2296)
!2299 = distinct !{!2299, !2300}
!2300 = !DILocation(line: 1181, column: 5, scope: !2210)
!2301 = !DILocation(line: 1193, column: 1, scope: !2210)
!2302 = distinct !DISubprogram(name: "hdcd_control_stereo", scope: !580, file: !580, line: 1346, type: !2303, isLocal: true, isDefinition: true, scopeLine: 1347, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!2303 = !DISubroutineType(types: !2304)
!2304 = !{!2305, !712, !474, !474}
!2305 = !DIDerivedType(tag: DW_TAG_typedef, name: "hdcd_control_result", file: !580, line: 1344, baseType: !596)
!2306 = !DILocalVariable(name: "ctx", arg: 1, scope: !2302, file: !580, line: 1346, type: !712)
!2307 = !DILocation(line: 1346, column: 61, scope: !2302)
!2308 = !DILocalVariable(name: "peak_extend0", arg: 2, scope: !2302, file: !580, line: 1346, type: !474)
!2309 = !DILocation(line: 1346, column: 71, scope: !2302)
!2310 = !DILocalVariable(name: "peak_extend1", arg: 3, scope: !2302, file: !580, line: 1346, type: !474)
!2311 = !DILocation(line: 1346, column: 90, scope: !2302)
!2312 = !DILocalVariable(name: "target_gain", scope: !2302, file: !580, line: 1348, type: !1505)
!2313 = !DILocation(line: 1348, column: 9, scope: !2302)
!2314 = !DILocation(line: 1349, column: 18, scope: !2302)
!2315 = !DILocation(line: 1349, column: 24, scope: !2302)
!2316 = !DILocation(line: 1349, column: 29, scope: !2302)
!2317 = !DILocation(line: 1349, column: 39, scope: !2302)
!2318 = !DILocation(line: 1349, column: 54, scope: !2302)
!2319 = !DILocation(line: 1349, column: 5, scope: !2302)
!2320 = !DILocation(line: 1350, column: 18, scope: !2302)
!2321 = !DILocation(line: 1350, column: 24, scope: !2302)
!2322 = !DILocation(line: 1350, column: 29, scope: !2302)
!2323 = !DILocation(line: 1350, column: 39, scope: !2302)
!2324 = !DILocation(line: 1350, column: 54, scope: !2302)
!2325 = !DILocation(line: 1350, column: 5, scope: !2302)
!2326 = !DILocation(line: 1351, column: 9, scope: !2327)
!2327 = distinct !DILexicalBlock(scope: !2302, file: !580, line: 1351, column: 9)
!2328 = !DILocation(line: 1351, column: 27, scope: !2327)
!2329 = !DILocation(line: 1351, column: 24, scope: !2327)
!2330 = !DILocation(line: 1351, column: 9, scope: !2302)
!2331 = !DILocation(line: 1352, column: 32, scope: !2327)
!2332 = !DILocation(line: 1352, column: 9, scope: !2327)
!2333 = !DILocation(line: 1352, column: 14, scope: !2327)
!2334 = !DILocation(line: 1352, column: 30, scope: !2327)
!2335 = !DILocation(line: 1354, column: 16, scope: !2336)
!2336 = distinct !DILexicalBlock(scope: !2327, file: !580, line: 1353, column: 10)
!2337 = !DILocation(line: 1354, column: 21, scope: !2336)
!2338 = !DILocation(line: 1356, column: 12, scope: !2336)
!2339 = !DILocation(line: 1356, column: 17, scope: !2336)
!2340 = !DILocation(line: 1357, column: 13, scope: !2336)
!2341 = !DILocation(line: 1357, column: 28, scope: !2336)
!2342 = !DILocation(line: 1357, column: 12, scope: !2336)
!2343 = !DILocation(line: 1357, column: 44, scope: !2344)
!2344 = !DILexicalBlockFile(scope: !2336, file: !580, discriminator: 1)
!2345 = !DILocation(line: 1357, column: 59, scope: !2344)
!2346 = !DILocation(line: 1357, column: 62, scope: !2344)
!2347 = !DILocation(line: 1357, column: 36, scope: !2344)
!2348 = !DILocation(line: 1357, column: 35, scope: !2344)
!2349 = !DILocation(line: 1357, column: 71, scope: !2344)
!2350 = !DILocation(line: 1357, column: 86, scope: !2344)
!2351 = !DILocation(line: 1357, column: 90, scope: !2344)
!2352 = !DILocation(line: 1357, column: 70, scope: !2344)
!2353 = !DILocation(line: 1357, column: 67, scope: !2344)
!2354 = !DILocation(line: 1357, column: 12, scope: !2344)
!2355 = !DILocation(line: 1357, column: 12, scope: !2356)
!2356 = !DILexicalBlockFile(scope: !2336, file: !580, discriminator: 2)
!2357 = !DILocation(line: 1357, column: 12, scope: !2358)
!2358 = !DILexicalBlockFile(scope: !2336, file: !580, discriminator: 3)
!2359 = !DILocation(line: 1358, column: 13, scope: !2336)
!2360 = !DILocation(line: 1358, column: 28, scope: !2336)
!2361 = !DILocation(line: 1358, column: 12, scope: !2336)
!2362 = !DILocation(line: 1358, column: 44, scope: !2344)
!2363 = !DILocation(line: 1358, column: 59, scope: !2344)
!2364 = !DILocation(line: 1358, column: 62, scope: !2344)
!2365 = !DILocation(line: 1358, column: 36, scope: !2344)
!2366 = !DILocation(line: 1358, column: 35, scope: !2344)
!2367 = !DILocation(line: 1358, column: 71, scope: !2344)
!2368 = !DILocation(line: 1358, column: 86, scope: !2344)
!2369 = !DILocation(line: 1358, column: 90, scope: !2344)
!2370 = !DILocation(line: 1358, column: 70, scope: !2344)
!2371 = !DILocation(line: 1358, column: 67, scope: !2344)
!2372 = !DILocation(line: 1358, column: 12, scope: !2344)
!2373 = !DILocation(line: 1358, column: 12, scope: !2356)
!2374 = !DILocation(line: 1358, column: 12, scope: !2358)
!2375 = !DILocation(line: 1359, column: 13, scope: !2336)
!2376 = !DILocation(line: 1359, column: 18, scope: !2336)
!2377 = !DILocation(line: 1359, column: 34, scope: !2336)
!2378 = !DILocation(line: 1359, column: 12, scope: !2336)
!2379 = !DILocation(line: 1359, column: 50, scope: !2344)
!2380 = !DILocation(line: 1359, column: 55, scope: !2344)
!2381 = !DILocation(line: 1359, column: 71, scope: !2344)
!2382 = !DILocation(line: 1359, column: 74, scope: !2344)
!2383 = !DILocation(line: 1359, column: 42, scope: !2344)
!2384 = !DILocation(line: 1359, column: 41, scope: !2344)
!2385 = !DILocation(line: 1359, column: 83, scope: !2344)
!2386 = !DILocation(line: 1359, column: 88, scope: !2344)
!2387 = !DILocation(line: 1359, column: 104, scope: !2344)
!2388 = !DILocation(line: 1359, column: 108, scope: !2344)
!2389 = !DILocation(line: 1359, column: 82, scope: !2344)
!2390 = !DILocation(line: 1359, column: 79, scope: !2344)
!2391 = !DILocation(line: 1359, column: 12, scope: !2344)
!2392 = !DILocation(line: 1359, column: 12, scope: !2356)
!2393 = !DILocation(line: 1359, column: 12, scope: !2358)
!2394 = !DILocation(line: 1354, column: 9, scope: !2344)
!2395 = !DILocation(line: 1360, column: 12, scope: !2336)
!2396 = !DILocation(line: 1362, column: 5, scope: !2302)
!2397 = !DILocation(line: 1363, column: 1, scope: !2302)
!2398 = distinct !DISubprogram(name: "hdcd_scan", scope: !580, file: !580, line: 1126, type: !2399, isLocal: true, isDefinition: true, scopeLine: 1127, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!2399 = !DISubroutineType(types: !2400)
!2400 = !{!200, !712, !817, !200, !1036, !200, !200}
!2401 = !DILocalVariable(name: "ctx", arg: 1, scope: !2398, file: !580, line: 1126, type: !712)
!2402 = !DILocation(line: 1126, column: 35, scope: !2398)
!2403 = !DILocalVariable(name: "states", arg: 2, scope: !2398, file: !580, line: 1126, type: !817)
!2404 = !DILocation(line: 1126, column: 52, scope: !2398)
!2405 = !DILocalVariable(name: "channels", arg: 3, scope: !2398, file: !580, line: 1126, type: !200)
!2406 = !DILocation(line: 1126, column: 64, scope: !2398)
!2407 = !DILocalVariable(name: "samples", arg: 4, scope: !2398, file: !580, line: 1126, type: !1036)
!2408 = !DILocation(line: 1126, column: 89, scope: !2398)
!2409 = !DILocalVariable(name: "max", arg: 5, scope: !2398, file: !580, line: 1126, type: !200)
!2410 = !DILocation(line: 1126, column: 102, scope: !2398)
!2411 = !DILocalVariable(name: "stride", arg: 6, scope: !2398, file: !580, line: 1126, type: !200)
!2412 = !DILocation(line: 1126, column: 111, scope: !2398)
!2413 = !DILocalVariable(name: "result", scope: !2398, file: !580, line: 1128, type: !200)
!2414 = !DILocation(line: 1128, column: 9, scope: !2398)
!2415 = !DILocalVariable(name: "i", scope: !2398, file: !580, line: 1129, type: !200)
!2416 = !DILocation(line: 1129, column: 9, scope: !2398)
!2417 = !DILocalVariable(name: "cdt_active", scope: !2398, file: !580, line: 1130, type: !1505)
!2418 = !DILocation(line: 1130, column: 9, scope: !2398)
!2419 = !DILocation(line: 1131, column: 5, scope: !2398)
!2420 = !DILocation(line: 1133, column: 9, scope: !2421)
!2421 = distinct !DILexicalBlock(scope: !2398, file: !580, line: 1133, column: 9)
!2422 = !DILocation(line: 1133, column: 18, scope: !2421)
!2423 = !DILocation(line: 1133, column: 16, scope: !2421)
!2424 = !DILocation(line: 1133, column: 9, scope: !2398)
!2425 = !DILocation(line: 1133, column: 37, scope: !2426)
!2426 = !DILexicalBlockFile(scope: !2421, file: !580, discriminator: 1)
!2427 = !DILocation(line: 1133, column: 35, scope: !2426)
!2428 = !DILocation(line: 1133, column: 28, scope: !2426)
!2429 = !DILocation(line: 1136, column: 11, scope: !2430)
!2430 = distinct !DILexicalBlock(scope: !2398, file: !580, line: 1136, column: 5)
!2431 = !DILocation(line: 1136, column: 9, scope: !2430)
!2432 = !DILocation(line: 1136, column: 16, scope: !2433)
!2433 = !DILexicalBlockFile(scope: !2434, file: !580, discriminator: 1)
!2434 = distinct !DILexicalBlock(scope: !2430, file: !580, line: 1136, column: 5)
!2435 = !DILocation(line: 1136, column: 20, scope: !2433)
!2436 = !DILocation(line: 1136, column: 18, scope: !2433)
!2437 = !DILocation(line: 1136, column: 5, scope: !2433)
!2438 = !DILocation(line: 1137, column: 20, scope: !2439)
!2439 = distinct !DILexicalBlock(scope: !2440, file: !580, line: 1137, column: 13)
!2440 = distinct !DILexicalBlock(scope: !2434, file: !580, line: 1136, column: 35)
!2441 = !DILocation(line: 1137, column: 13, scope: !2439)
!2442 = !DILocation(line: 1137, column: 23, scope: !2439)
!2443 = !DILocation(line: 1137, column: 31, scope: !2439)
!2444 = !DILocation(line: 1137, column: 13, scope: !2440)
!2445 = !DILocation(line: 1138, column: 24, scope: !2446)
!2446 = distinct !DILexicalBlock(scope: !2439, file: !580, line: 1137, column: 36)
!2447 = !DILocation(line: 1138, column: 13, scope: !2446)
!2448 = !DILocation(line: 1138, column: 27, scope: !2446)
!2449 = !DILocation(line: 1139, column: 24, scope: !2450)
!2450 = distinct !DILexicalBlock(scope: !2446, file: !580, line: 1139, column: 17)
!2451 = !DILocation(line: 1139, column: 17, scope: !2450)
!2452 = !DILocation(line: 1139, column: 27, scope: !2450)
!2453 = !DILocation(line: 1139, column: 48, scope: !2450)
!2454 = !DILocation(line: 1139, column: 35, scope: !2450)
!2455 = !DILocation(line: 1139, column: 17, scope: !2446)
!2456 = !DILocation(line: 1140, column: 24, scope: !2457)
!2457 = distinct !DILexicalBlock(scope: !2450, file: !580, line: 1139, column: 53)
!2458 = !DILocation(line: 1140, column: 17, scope: !2457)
!2459 = !DILocation(line: 1140, column: 27, scope: !2457)
!2460 = !DILocation(line: 1140, column: 35, scope: !2457)
!2461 = !DILocation(line: 1141, column: 30, scope: !2457)
!2462 = !DILocation(line: 1141, column: 23, scope: !2457)
!2463 = !DILocation(line: 1141, column: 33, scope: !2457)
!2464 = !DILocation(line: 1141, column: 21, scope: !2457)
!2465 = !DILocation(line: 1142, column: 13, scope: !2457)
!2466 = !DILocation(line: 1143, column: 34, scope: !2446)
!2467 = !DILocation(line: 1143, column: 20, scope: !2446)
!2468 = !DILocation(line: 1143, column: 13, scope: !2446)
!2469 = !DILocation(line: 1143, column: 23, scope: !2446)
!2470 = !DILocation(line: 1143, column: 31, scope: !2446)
!2471 = !DILocation(line: 1144, column: 9, scope: !2446)
!2472 = !DILocation(line: 1145, column: 5, scope: !2440)
!2473 = !DILocation(line: 1136, column: 31, scope: !2474)
!2474 = !DILexicalBlockFile(scope: !2434, file: !580, discriminator: 2)
!2475 = !DILocation(line: 1136, column: 5, scope: !2474)
!2476 = distinct !{!2476, !2477}
!2477 = !DILocation(line: 1136, column: 5, scope: !2398)
!2478 = !DILocation(line: 1147, column: 12, scope: !2398)
!2479 = !DILocation(line: 1148, column: 5, scope: !2398)
!2480 = !DILocation(line: 1148, column: 12, scope: !2481)
!2481 = !DILexicalBlockFile(scope: !2398, file: !580, discriminator: 1)
!2482 = !DILocation(line: 1148, column: 21, scope: !2481)
!2483 = !DILocation(line: 1148, column: 19, scope: !2481)
!2484 = !DILocation(line: 1148, column: 5, scope: !2481)
!2485 = !DILocalVariable(name: "flag", scope: !2486, file: !580, line: 1149, type: !200)
!2486 = distinct !DILexicalBlock(scope: !2398, file: !580, line: 1148, column: 26)
!2487 = !DILocation(line: 1149, column: 13, scope: !2486)
!2488 = !DILocalVariable(name: "consumed", scope: !2486, file: !580, line: 1150, type: !200)
!2489 = !DILocation(line: 1150, column: 13, scope: !2486)
!2490 = !DILocation(line: 1150, column: 39, scope: !2486)
!2491 = !DILocation(line: 1150, column: 44, scope: !2486)
!2492 = !DILocation(line: 1150, column: 52, scope: !2486)
!2493 = !DILocation(line: 1150, column: 69, scope: !2486)
!2494 = !DILocation(line: 1150, column: 78, scope: !2486)
!2495 = !DILocation(line: 1150, column: 84, scope: !2486)
!2496 = !DILocation(line: 1150, column: 82, scope: !2486)
!2497 = !DILocation(line: 1150, column: 92, scope: !2486)
!2498 = !DILocation(line: 1150, column: 24, scope: !2486)
!2499 = !DILocation(line: 1151, column: 19, scope: !2486)
!2500 = !DILocation(line: 1151, column: 16, scope: !2486)
!2501 = !DILocation(line: 1152, column: 13, scope: !2502)
!2502 = distinct !DILexicalBlock(scope: !2486, file: !580, line: 1152, column: 13)
!2503 = !DILocation(line: 1152, column: 13, scope: !2486)
!2504 = !DILocation(line: 1154, column: 19, scope: !2505)
!2505 = distinct !DILexicalBlock(scope: !2506, file: !580, line: 1154, column: 13)
!2506 = distinct !DILexicalBlock(scope: !2502, file: !580, line: 1152, column: 19)
!2507 = !DILocation(line: 1154, column: 17, scope: !2505)
!2508 = !DILocation(line: 1154, column: 24, scope: !2509)
!2509 = !DILexicalBlockFile(scope: !2510, file: !580, discriminator: 1)
!2510 = distinct !DILexicalBlock(scope: !2505, file: !580, line: 1154, column: 13)
!2511 = !DILocation(line: 1154, column: 28, scope: !2509)
!2512 = !DILocation(line: 1154, column: 26, scope: !2509)
!2513 = !DILocation(line: 1154, column: 13, scope: !2509)
!2514 = !DILocation(line: 1155, column: 21, scope: !2515)
!2515 = distinct !DILexicalBlock(scope: !2516, file: !580, line: 1155, column: 21)
!2516 = distinct !DILexicalBlock(scope: !2510, file: !580, line: 1154, column: 43)
!2517 = !DILocation(line: 1155, column: 32, scope: !2515)
!2518 = !DILocation(line: 1155, column: 30, scope: !2515)
!2519 = !DILocation(line: 1155, column: 26, scope: !2515)
!2520 = !DILocation(line: 1155, column: 21, scope: !2516)
!2521 = !DILocation(line: 1156, column: 48, scope: !2522)
!2522 = distinct !DILexicalBlock(scope: !2515, file: !580, line: 1155, column: 36)
!2523 = !DILocation(line: 1156, column: 41, scope: !2522)
!2524 = !DILocation(line: 1156, column: 51, scope: !2522)
!2525 = !DILocation(line: 1156, column: 28, scope: !2522)
!2526 = !DILocation(line: 1156, column: 21, scope: !2522)
!2527 = !DILocation(line: 1156, column: 31, scope: !2522)
!2528 = !DILocation(line: 1156, column: 39, scope: !2522)
!2529 = !DILocation(line: 1159, column: 32, scope: !2530)
!2530 = distinct !DILexicalBlock(scope: !2522, file: !580, line: 1159, column: 25)
!2531 = !DILocation(line: 1159, column: 25, scope: !2530)
!2532 = !DILocation(line: 1159, column: 35, scope: !2530)
!2533 = !DILocation(line: 1159, column: 57, scope: !2530)
!2534 = !DILocation(line: 1159, column: 25, scope: !2522)
!2535 = !DILocation(line: 1160, column: 32, scope: !2530)
!2536 = !DILocation(line: 1160, column: 25, scope: !2530)
!2537 = !DILocation(line: 1160, column: 35, scope: !2530)
!2538 = !DILocation(line: 1160, column: 57, scope: !2530)
!2539 = !DILocation(line: 1161, column: 17, scope: !2522)
!2540 = !DILocation(line: 1162, column: 13, scope: !2516)
!2541 = !DILocation(line: 1154, column: 39, scope: !2542)
!2542 = !DILexicalBlockFile(scope: !2510, file: !580, discriminator: 2)
!2543 = !DILocation(line: 1154, column: 13, scope: !2542)
!2544 = distinct !{!2544, !2545}
!2545 = !DILocation(line: 1154, column: 13, scope: !2506)
!2546 = !DILocation(line: 1163, column: 13, scope: !2506)
!2547 = !DILocation(line: 1165, column: 20, scope: !2486)
!2548 = !DILocation(line: 1165, column: 31, scope: !2486)
!2549 = !DILocation(line: 1165, column: 29, scope: !2486)
!2550 = !DILocation(line: 1165, column: 17, scope: !2486)
!2551 = !DILocation(line: 1148, column: 5, scope: !2552)
!2552 = !DILexicalBlockFile(scope: !2398, file: !580, discriminator: 2)
!2553 = distinct !{!2553, !2479}
!2554 = !DILocation(line: 1168, column: 11, scope: !2555)
!2555 = distinct !DILexicalBlock(scope: !2398, file: !580, line: 1168, column: 5)
!2556 = !DILocation(line: 1168, column: 9, scope: !2555)
!2557 = !DILocation(line: 1168, column: 16, scope: !2558)
!2558 = !DILexicalBlockFile(scope: !2559, file: !580, discriminator: 1)
!2559 = distinct !DILexicalBlock(scope: !2555, file: !580, line: 1168, column: 5)
!2560 = !DILocation(line: 1168, column: 20, scope: !2558)
!2561 = !DILocation(line: 1168, column: 18, scope: !2558)
!2562 = !DILocation(line: 1168, column: 5, scope: !2558)
!2563 = !DILocation(line: 1170, column: 24, scope: !2564)
!2564 = distinct !DILexicalBlock(scope: !2565, file: !580, line: 1170, column: 13)
!2565 = distinct !DILexicalBlock(scope: !2559, file: !580, line: 1168, column: 35)
!2566 = !DILocation(line: 1170, column: 13, scope: !2564)
!2567 = !DILocation(line: 1170, column: 27, scope: !2564)
!2568 = !DILocation(line: 1170, column: 37, scope: !2569)
!2569 = !DILexicalBlockFile(scope: !2564, file: !580, discriminator: 1)
!2570 = !DILocation(line: 1170, column: 30, scope: !2569)
!2571 = !DILocation(line: 1170, column: 40, scope: !2569)
!2572 = !DILocation(line: 1170, column: 48, scope: !2569)
!2573 = !DILocation(line: 1170, column: 13, scope: !2569)
!2574 = !DILocation(line: 1171, column: 20, scope: !2564)
!2575 = !DILocation(line: 1171, column: 13, scope: !2564)
!2576 = !DILocation(line: 1171, column: 23, scope: !2564)
!2577 = !DILocation(line: 1171, column: 44, scope: !2564)
!2578 = !DILocation(line: 1172, column: 5, scope: !2565)
!2579 = !DILocation(line: 1168, column: 31, scope: !2580)
!2580 = !DILexicalBlockFile(scope: !2559, file: !580, discriminator: 2)
!2581 = !DILocation(line: 1168, column: 5, scope: !2580)
!2582 = distinct !{!2582, !2583}
!2583 = !DILocation(line: 1168, column: 5, scope: !2398)
!2584 = !DILocation(line: 1174, column: 12, scope: !2398)
!2585 = !DILocation(line: 1174, column: 5, scope: !2398)
!2586 = !DILocalVariable(name: "samples", arg: 1, scope: !649, file: !580, line: 1206, type: !630)
!2587 = !DILocation(line: 1206, column: 34, scope: !649)
!2588 = !DILocalVariable(name: "count", arg: 2, scope: !649, file: !580, line: 1206, type: !200)
!2589 = !DILocation(line: 1206, column: 47, scope: !649)
!2590 = !DILocalVariable(name: "stride", arg: 3, scope: !649, file: !580, line: 1206, type: !200)
!2591 = !DILocation(line: 1206, column: 58, scope: !649)
!2592 = !DILocalVariable(name: "gain", arg: 4, scope: !649, file: !580, line: 1206, type: !200)
!2593 = !DILocation(line: 1206, column: 70, scope: !649)
!2594 = !DILocalVariable(name: "target_gain", arg: 5, scope: !649, file: !580, line: 1206, type: !200)
!2595 = !DILocation(line: 1206, column: 80, scope: !649)
!2596 = !DILocalVariable(name: "extend", arg: 6, scope: !649, file: !580, line: 1206, type: !200)
!2597 = !DILocation(line: 1206, column: 97, scope: !649)
!2598 = !DILocalVariable(name: "mode", arg: 7, scope: !649, file: !580, line: 1206, type: !200)
!2599 = !DILocation(line: 1206, column: 109, scope: !649)
!2600 = !DILocalVariable(name: "cdt_active", arg: 8, scope: !649, file: !580, line: 1206, type: !200)
!2601 = !DILocation(line: 1206, column: 119, scope: !649)
!2602 = !DILocalVariable(name: "tg_mismatch", arg: 9, scope: !649, file: !580, line: 1206, type: !200)
!2603 = !DILocation(line: 1206, column: 135, scope: !649)
!2604 = !DILocalVariable(name: "i", scope: !649, file: !580, line: 1209, type: !200)
!2605 = !DILocation(line: 1209, column: 9, scope: !649)
!2606 = !DILocalVariable(name: "samples_end", scope: !649, file: !580, line: 1210, type: !630)
!2607 = !DILocation(line: 1210, column: 14, scope: !649)
!2608 = !DILocation(line: 1210, column: 28, scope: !649)
!2609 = !DILocation(line: 1210, column: 38, scope: !649)
!2610 = !DILocation(line: 1210, column: 47, scope: !649)
!2611 = !DILocation(line: 1210, column: 45, scope: !649)
!2612 = !DILocation(line: 1210, column: 36, scope: !649)
!2613 = !DILocation(line: 1212, column: 12, scope: !2614)
!2614 = distinct !DILexicalBlock(scope: !649, file: !580, line: 1212, column: 5)
!2615 = !DILocation(line: 1212, column: 10, scope: !2614)
!2616 = !DILocation(line: 1212, column: 17, scope: !2617)
!2617 = !DILexicalBlockFile(scope: !2618, file: !580, discriminator: 1)
!2618 = distinct !DILexicalBlock(scope: !2614, file: !580, line: 1212, column: 5)
!2619 = !DILocation(line: 1212, column: 21, scope: !2617)
!2620 = !DILocation(line: 1212, column: 19, scope: !2617)
!2621 = !DILocation(line: 1212, column: 5, scope: !2617)
!2622 = !DILocation(line: 1213, column: 17, scope: !2623)
!2623 = distinct !DILexicalBlock(scope: !2618, file: !580, line: 1212, column: 33)
!2624 = !DILocation(line: 1213, column: 21, scope: !2623)
!2625 = !DILocation(line: 1213, column: 19, scope: !2623)
!2626 = !DILocation(line: 1213, column: 9, scope: !2623)
!2627 = !DILocation(line: 1213, column: 29, scope: !2623)
!2628 = !DILocation(line: 1214, column: 13, scope: !2629)
!2629 = distinct !DILexicalBlock(scope: !2623, file: !580, line: 1214, column: 13)
!2630 = !DILocation(line: 1214, column: 18, scope: !2629)
!2631 = !DILocation(line: 1214, column: 13, scope: !2623)
!2632 = !DILocalVariable(name: "pel", scope: !2633, file: !580, line: 1215, type: !200)
!2633 = distinct !DILexicalBlock(scope: !2629, file: !580, line: 1214, column: 34)
!2634 = !DILocation(line: 1215, column: 17, scope: !2633)
!2635 = !DILocation(line: 1215, column: 32, scope: !2633)
!2636 = !DILocation(line: 1215, column: 36, scope: !2633)
!2637 = !DILocation(line: 1215, column: 34, scope: !2633)
!2638 = !DILocation(line: 1215, column: 24, scope: !2633)
!2639 = !DILocation(line: 1215, column: 44, scope: !2633)
!2640 = !DILocation(line: 1215, column: 51, scope: !2633)
!2641 = !DILocalVariable(name: "sample", scope: !2633, file: !580, line: 1216, type: !631)
!2642 = !DILocation(line: 1216, column: 21, scope: !2633)
!2643 = !DILocation(line: 1216, column: 38, scope: !2633)
!2644 = !DILocation(line: 1216, column: 42, scope: !2633)
!2645 = !DILocation(line: 1216, column: 40, scope: !2633)
!2646 = !DILocation(line: 1216, column: 30, scope: !2633)
!2647 = !DILocation(line: 1217, column: 52, scope: !2633)
!2648 = !DILocation(line: 1217, column: 63, scope: !2633)
!2649 = !DILocation(line: 1217, column: 67, scope: !2633)
!2650 = !DILocation(line: 1217, column: 70, scope: !2651)
!2651 = !DILexicalBlockFile(scope: !2633, file: !580, discriminator: 1)
!2652 = !DILocation(line: 1217, column: 67, scope: !2651)
!2653 = !DILocation(line: 1217, column: 61, scope: !2654)
!2654 = !DILexicalBlockFile(scope: !2633, file: !580, discriminator: 2)
!2655 = !DILocation(line: 1217, column: 60, scope: !2654)
!2656 = !DILocation(line: 1217, column: 35, scope: !2654)
!2657 = !DILocation(line: 1217, column: 21, scope: !2654)
!2658 = !DILocation(line: 1217, column: 25, scope: !2654)
!2659 = !DILocation(line: 1217, column: 23, scope: !2654)
!2660 = !DILocation(line: 1217, column: 13, scope: !2654)
!2661 = !DILocation(line: 1217, column: 33, scope: !2654)
!2662 = !DILocation(line: 1218, column: 9, scope: !2633)
!2663 = !DILocation(line: 1218, column: 20, scope: !2664)
!2664 = !DILexicalBlockFile(scope: !2665, file: !580, discriminator: 1)
!2665 = distinct !DILexicalBlock(scope: !2629, file: !580, line: 1218, column: 20)
!2666 = !DILocation(line: 1218, column: 25, scope: !2664)
!2667 = !DILocation(line: 1218, column: 41, scope: !2664)
!2668 = !DILocation(line: 1218, column: 44, scope: !2669)
!2669 = !DILexicalBlockFile(scope: !2665, file: !580, discriminator: 2)
!2670 = !DILocation(line: 1218, column: 56, scope: !2669)
!2671 = !DILocation(line: 1218, column: 20, scope: !2669)
!2672 = !DILocation(line: 1219, column: 60, scope: !2665)
!2673 = !DILocation(line: 1219, column: 64, scope: !2665)
!2674 = !DILocation(line: 1219, column: 62, scope: !2665)
!2675 = !DILocation(line: 1219, column: 52, scope: !2665)
!2676 = !DILocation(line: 1219, column: 35, scope: !2665)
!2677 = !DILocation(line: 1219, column: 21, scope: !2665)
!2678 = !DILocation(line: 1219, column: 25, scope: !2665)
!2679 = !DILocation(line: 1219, column: 23, scope: !2665)
!2680 = !DILocation(line: 1219, column: 13, scope: !2665)
!2681 = !DILocation(line: 1219, column: 33, scope: !2665)
!2682 = !DILocation(line: 1220, column: 20, scope: !2683)
!2683 = distinct !DILexicalBlock(scope: !2665, file: !580, line: 1220, column: 20)
!2684 = !DILocation(line: 1220, column: 25, scope: !2683)
!2685 = !DILocation(line: 1220, column: 41, scope: !2683)
!2686 = !DILocation(line: 1220, column: 44, scope: !2687)
!2687 = !DILexicalBlockFile(scope: !2683, file: !580, discriminator: 1)
!2688 = !DILocation(line: 1220, column: 20, scope: !2687)
!2689 = !DILocation(line: 1221, column: 60, scope: !2683)
!2690 = !DILocation(line: 1221, column: 64, scope: !2683)
!2691 = !DILocation(line: 1221, column: 62, scope: !2683)
!2692 = !DILocation(line: 1221, column: 52, scope: !2683)
!2693 = !DILocation(line: 1221, column: 35, scope: !2683)
!2694 = !DILocation(line: 1221, column: 21, scope: !2683)
!2695 = !DILocation(line: 1221, column: 25, scope: !2683)
!2696 = !DILocation(line: 1221, column: 23, scope: !2683)
!2697 = !DILocation(line: 1221, column: 13, scope: !2683)
!2698 = !DILocation(line: 1221, column: 33, scope: !2683)
!2699 = !DILocation(line: 1222, column: 5, scope: !2623)
!2700 = !DILocation(line: 1212, column: 29, scope: !2701)
!2701 = !DILexicalBlockFile(scope: !2618, file: !580, discriminator: 2)
!2702 = !DILocation(line: 1212, column: 5, scope: !2701)
!2703 = distinct !{!2703, !2704}
!2704 = !DILocation(line: 1212, column: 5, scope: !649)
!2705 = !DILocation(line: 1224, column: 9, scope: !2706)
!2706 = distinct !DILexicalBlock(scope: !649, file: !580, line: 1224, column: 9)
!2707 = !DILocation(line: 1224, column: 17, scope: !2706)
!2708 = !DILocation(line: 1224, column: 14, scope: !2706)
!2709 = !DILocation(line: 1224, column: 9, scope: !649)
!2710 = !DILocalVariable(name: "len", scope: !2711, file: !580, line: 1225, type: !200)
!2711 = distinct !DILexicalBlock(scope: !2706, file: !580, line: 1224, column: 30)
!2712 = !DILocation(line: 1225, column: 13, scope: !2711)
!2713 = !DILocation(line: 1225, column: 21, scope: !2711)
!2714 = !DILocation(line: 1225, column: 31, scope: !2711)
!2715 = !DILocation(line: 1225, column: 45, scope: !2711)
!2716 = !DILocation(line: 1225, column: 43, scope: !2711)
!2717 = !DILocation(line: 1225, column: 28, scope: !2711)
!2718 = !DILocation(line: 1225, column: 20, scope: !2711)
!2719 = !DILocation(line: 1225, column: 54, scope: !2720)
!2720 = !DILexicalBlockFile(scope: !2711, file: !580, discriminator: 1)
!2721 = !DILocation(line: 1225, column: 68, scope: !2720)
!2722 = !DILocation(line: 1225, column: 66, scope: !2720)
!2723 = !DILocation(line: 1225, column: 20, scope: !2720)
!2724 = !DILocation(line: 1225, column: 77, scope: !2725)
!2725 = !DILexicalBlockFile(scope: !2711, file: !580, discriminator: 2)
!2726 = !DILocation(line: 1225, column: 20, scope: !2725)
!2727 = !DILocation(line: 1225, column: 20, scope: !2728)
!2728 = !DILexicalBlockFile(scope: !2711, file: !580, discriminator: 3)
!2729 = !DILocation(line: 1225, column: 13, scope: !2728)
!2730 = !DILocation(line: 1227, column: 16, scope: !2731)
!2731 = distinct !DILexicalBlock(scope: !2711, file: !580, line: 1227, column: 9)
!2732 = !DILocation(line: 1227, column: 14, scope: !2731)
!2733 = !DILocation(line: 1227, column: 21, scope: !2734)
!2734 = !DILexicalBlockFile(scope: !2735, file: !580, discriminator: 1)
!2735 = distinct !DILexicalBlock(scope: !2731, file: !580, line: 1227, column: 9)
!2736 = !DILocation(line: 1227, column: 25, scope: !2734)
!2737 = !DILocation(line: 1227, column: 23, scope: !2734)
!2738 = !DILocation(line: 1227, column: 9, scope: !2734)
!2739 = !DILocation(line: 1228, column: 13, scope: !2740)
!2740 = distinct !DILexicalBlock(scope: !2735, file: !580, line: 1227, column: 35)
!2741 = !DILocation(line: 1229, column: 17, scope: !2742)
!2742 = distinct !DILexicalBlock(scope: !2740, file: !580, line: 1229, column: 17)
!2743 = !DILocation(line: 1229, column: 22, scope: !2742)
!2744 = !DILocation(line: 1229, column: 17, scope: !2740)
!2745 = !DILocation(line: 1230, column: 46, scope: !2742)
!2746 = !DILocation(line: 1230, column: 45, scope: !2742)
!2747 = !DILocation(line: 1230, column: 55, scope: !2742)
!2748 = !DILocation(line: 1230, column: 28, scope: !2742)
!2749 = !DILocation(line: 1230, column: 18, scope: !2742)
!2750 = !DILocation(line: 1230, column: 26, scope: !2742)
!2751 = !DILocation(line: 1230, column: 17, scope: !2742)
!2752 = !DILocation(line: 1231, column: 24, scope: !2740)
!2753 = !DILocation(line: 1231, column: 21, scope: !2740)
!2754 = !DILocation(line: 1232, column: 9, scope: !2740)
!2755 = !DILocation(line: 1227, column: 31, scope: !2756)
!2756 = !DILexicalBlockFile(scope: !2735, file: !580, discriminator: 2)
!2757 = !DILocation(line: 1227, column: 9, scope: !2756)
!2758 = distinct !{!2758, !2759}
!2759 = !DILocation(line: 1227, column: 9, scope: !2711)
!2760 = !DILocation(line: 1233, column: 18, scope: !2711)
!2761 = !DILocation(line: 1233, column: 15, scope: !2711)
!2762 = !DILocation(line: 1234, column: 5, scope: !2711)
!2763 = !DILocalVariable(name: "len", scope: !2764, file: !580, line: 1235, type: !200)
!2764 = distinct !DILexicalBlock(scope: !2706, file: !580, line: 1234, column: 12)
!2765 = !DILocation(line: 1235, column: 13, scope: !2764)
!2766 = !DILocation(line: 1235, column: 21, scope: !2764)
!2767 = !DILocation(line: 1235, column: 32, scope: !2764)
!2768 = !DILocation(line: 1235, column: 39, scope: !2764)
!2769 = !DILocation(line: 1235, column: 37, scope: !2764)
!2770 = !DILocation(line: 1235, column: 52, scope: !2764)
!2771 = !DILocation(line: 1235, column: 28, scope: !2764)
!2772 = !DILocation(line: 1235, column: 20, scope: !2764)
!2773 = !DILocation(line: 1235, column: 62, scope: !2774)
!2774 = !DILexicalBlockFile(scope: !2764, file: !580, discriminator: 1)
!2775 = !DILocation(line: 1235, column: 69, scope: !2774)
!2776 = !DILocation(line: 1235, column: 67, scope: !2774)
!2777 = !DILocation(line: 1235, column: 82, scope: !2774)
!2778 = !DILocation(line: 1235, column: 20, scope: !2774)
!2779 = !DILocation(line: 1235, column: 91, scope: !2780)
!2780 = !DILexicalBlockFile(scope: !2764, file: !580, discriminator: 2)
!2781 = !DILocation(line: 1235, column: 20, scope: !2780)
!2782 = !DILocation(line: 1235, column: 20, scope: !2783)
!2783 = !DILexicalBlockFile(scope: !2764, file: !580, discriminator: 3)
!2784 = !DILocation(line: 1235, column: 13, scope: !2783)
!2785 = !DILocation(line: 1237, column: 16, scope: !2786)
!2786 = distinct !DILexicalBlock(scope: !2764, file: !580, line: 1237, column: 9)
!2787 = !DILocation(line: 1237, column: 14, scope: !2786)
!2788 = !DILocation(line: 1237, column: 21, scope: !2789)
!2789 = !DILexicalBlockFile(scope: !2790, file: !580, discriminator: 1)
!2790 = distinct !DILexicalBlock(scope: !2786, file: !580, line: 1237, column: 9)
!2791 = !DILocation(line: 1237, column: 25, scope: !2789)
!2792 = !DILocation(line: 1237, column: 23, scope: !2789)
!2793 = !DILocation(line: 1237, column: 9, scope: !2789)
!2794 = !DILocation(line: 1238, column: 18, scope: !2795)
!2795 = distinct !DILexicalBlock(scope: !2790, file: !580, line: 1237, column: 35)
!2796 = !DILocation(line: 1239, column: 17, scope: !2797)
!2797 = distinct !DILexicalBlock(scope: !2795, file: !580, line: 1239, column: 17)
!2798 = !DILocation(line: 1239, column: 22, scope: !2797)
!2799 = !DILocation(line: 1239, column: 17, scope: !2795)
!2800 = !DILocation(line: 1240, column: 46, scope: !2797)
!2801 = !DILocation(line: 1240, column: 45, scope: !2797)
!2802 = !DILocation(line: 1240, column: 55, scope: !2797)
!2803 = !DILocation(line: 1240, column: 28, scope: !2797)
!2804 = !DILocation(line: 1240, column: 18, scope: !2797)
!2805 = !DILocation(line: 1240, column: 26, scope: !2797)
!2806 = !DILocation(line: 1240, column: 17, scope: !2797)
!2807 = !DILocation(line: 1241, column: 24, scope: !2795)
!2808 = !DILocation(line: 1241, column: 21, scope: !2795)
!2809 = !DILocation(line: 1242, column: 9, scope: !2795)
!2810 = !DILocation(line: 1237, column: 31, scope: !2811)
!2811 = !DILexicalBlockFile(scope: !2790, file: !580, discriminator: 2)
!2812 = !DILocation(line: 1237, column: 9, scope: !2811)
!2813 = distinct !{!2813, !2814}
!2814 = !DILocation(line: 1237, column: 9, scope: !2764)
!2815 = !DILocation(line: 1243, column: 13, scope: !2816)
!2816 = distinct !DILexicalBlock(scope: !2764, file: !580, line: 1243, column: 13)
!2817 = !DILocation(line: 1243, column: 18, scope: !2816)
!2818 = !DILocation(line: 1243, column: 24, scope: !2816)
!2819 = !DILocation(line: 1243, column: 22, scope: !2816)
!2820 = !DILocation(line: 1243, column: 13, scope: !2764)
!2821 = !DILocation(line: 1244, column: 20, scope: !2816)
!2822 = !DILocation(line: 1244, column: 18, scope: !2816)
!2823 = !DILocation(line: 1244, column: 13, scope: !2816)
!2824 = !DILocation(line: 1245, column: 18, scope: !2764)
!2825 = !DILocation(line: 1245, column: 15, scope: !2764)
!2826 = !DILocation(line: 1249, column: 9, scope: !2827)
!2827 = distinct !DILexicalBlock(scope: !649, file: !580, line: 1249, column: 9)
!2828 = !DILocation(line: 1249, column: 14, scope: !2827)
!2829 = !DILocation(line: 1249, column: 9, scope: !649)
!2830 = !DILocation(line: 1250, column: 13, scope: !2831)
!2831 = distinct !DILexicalBlock(scope: !2832, file: !580, line: 1250, column: 13)
!2832 = distinct !DILexicalBlock(scope: !2827, file: !580, line: 1249, column: 20)
!2833 = !DILocation(line: 1250, column: 19, scope: !2831)
!2834 = !DILocation(line: 1250, column: 13, scope: !2832)
!2835 = !DILocation(line: 1251, column: 24, scope: !2831)
!2836 = !DILocation(line: 1251, column: 32, scope: !2831)
!2837 = !DILocation(line: 1251, column: 30, scope: !2831)
!2838 = !DILocation(line: 1251, column: 21, scope: !2831)
!2839 = !DILocation(line: 1251, column: 13, scope: !2831)
!2840 = !DILocation(line: 1252, column: 5, scope: !2832)
!2841 = !DILocation(line: 1253, column: 9, scope: !2842)
!2842 = distinct !DILexicalBlock(scope: !2827, file: !580, line: 1252, column: 12)
!2843 = !DILocation(line: 1253, column: 16, scope: !2844)
!2844 = !DILexicalBlockFile(scope: !2842, file: !580, discriminator: 1)
!2845 = !DILocation(line: 1253, column: 24, scope: !2844)
!2846 = !DILocation(line: 1253, column: 9, scope: !2844)
!2847 = !DILocation(line: 1254, column: 17, scope: !2848)
!2848 = distinct !DILexicalBlock(scope: !2849, file: !580, line: 1254, column: 17)
!2849 = distinct !DILexicalBlock(scope: !2842, file: !580, line: 1253, column: 30)
!2850 = !DILocation(line: 1254, column: 22, scope: !2848)
!2851 = !DILocation(line: 1254, column: 17, scope: !2849)
!2852 = !DILocation(line: 1255, column: 46, scope: !2848)
!2853 = !DILocation(line: 1255, column: 45, scope: !2848)
!2854 = !DILocation(line: 1255, column: 55, scope: !2848)
!2855 = !DILocation(line: 1255, column: 28, scope: !2848)
!2856 = !DILocation(line: 1255, column: 18, scope: !2848)
!2857 = !DILocation(line: 1255, column: 26, scope: !2848)
!2858 = !DILocation(line: 1255, column: 17, scope: !2848)
!2859 = !DILocation(line: 1256, column: 24, scope: !2849)
!2860 = !DILocation(line: 1256, column: 21, scope: !2849)
!2861 = !DILocation(line: 1253, column: 9, scope: !2862)
!2862 = !DILexicalBlockFile(scope: !2842, file: !580, discriminator: 2)
!2863 = distinct !{!2863, !2841}
!2864 = !DILocation(line: 1260, column: 5, scope: !649)
!2865 = distinct !{!2865, !2864}
!2866 = !DILocation(line: 1260, column: 16, scope: !2867)
!2867 = !DILexicalBlockFile(scope: !2868, file: !580, discriminator: 1)
!2868 = distinct !DILexicalBlock(scope: !2869, file: !580, line: 1260, column: 14)
!2869 = distinct !DILexicalBlock(scope: !649, file: !580, line: 1260, column: 8)
!2870 = !DILocation(line: 1260, column: 27, scope: !2867)
!2871 = !DILocation(line: 1260, column: 24, scope: !2867)
!2872 = !DILocation(line: 1260, column: 14, scope: !2867)
!2873 = !DILocation(line: 1260, column: 43, scope: !2874)
!2874 = !DILexicalBlockFile(scope: !2875, file: !580, discriminator: 2)
!2875 = distinct !DILexicalBlock(scope: !2868, file: !580, line: 1260, column: 41)
!2876 = !DILocation(line: 1260, column: 101, scope: !2877)
!2877 = !DILexicalBlockFile(scope: !2874, file: !580, discriminator: 4)
!2878 = !DILocation(line: 1260, column: 101, scope: !2874)
!2879 = !DILocation(line: 1260, column: 112, scope: !2880)
!2880 = !DILexicalBlockFile(scope: !2869, file: !580, discriminator: 3)
!2881 = !DILocation(line: 1262, column: 12, scope: !649)
!2882 = !DILocation(line: 1262, column: 5, scope: !649)
!2883 = !DILocalVariable(name: "samples", arg: 1, scope: !660, file: !580, line: 1266, type: !630)
!2884 = !DILocation(line: 1266, column: 35, scope: !660)
!2885 = !DILocalVariable(name: "count", arg: 2, scope: !660, file: !580, line: 1266, type: !200)
!2886 = !DILocation(line: 1266, column: 48, scope: !660)
!2887 = !DILocalVariable(name: "stride", arg: 3, scope: !660, file: !580, line: 1266, type: !200)
!2888 = !DILocation(line: 1266, column: 59, scope: !660)
!2889 = !DILocalVariable(name: "vbits", arg: 4, scope: !660, file: !580, line: 1266, type: !200)
!2890 = !DILocation(line: 1266, column: 71, scope: !660)
!2891 = !DILocalVariable(name: "gain", arg: 5, scope: !660, file: !580, line: 1266, type: !200)
!2892 = !DILocation(line: 1266, column: 82, scope: !660)
!2893 = !DILocalVariable(name: "target_gain", arg: 6, scope: !660, file: !580, line: 1266, type: !200)
!2894 = !DILocation(line: 1266, column: 92, scope: !660)
!2895 = !DILocalVariable(name: "extend", arg: 7, scope: !660, file: !580, line: 1266, type: !200)
!2896 = !DILocation(line: 1266, column: 109, scope: !660)
!2897 = !DILocalVariable(name: "samples_end", scope: !660, file: !580, line: 1269, type: !630)
!2898 = !DILocation(line: 1269, column: 14, scope: !660)
!2899 = !DILocation(line: 1269, column: 28, scope: !660)
!2900 = !DILocation(line: 1269, column: 38, scope: !660)
!2901 = !DILocation(line: 1269, column: 47, scope: !660)
!2902 = !DILocation(line: 1269, column: 45, scope: !660)
!2903 = !DILocation(line: 1269, column: 36, scope: !660)
!2904 = !DILocalVariable(name: "i", scope: !660, file: !580, line: 1270, type: !200)
!2905 = !DILocation(line: 1270, column: 9, scope: !660)
!2906 = !DILocalVariable(name: "pe_level", scope: !660, file: !580, line: 1272, type: !200)
!2907 = !DILocation(line: 1272, column: 9, scope: !660)
!2908 = !DILocalVariable(name: "shft", scope: !660, file: !580, line: 1272, type: !200)
!2909 = !DILocation(line: 1272, column: 28, scope: !660)
!2910 = !DILocation(line: 1273, column: 9, scope: !2911)
!2911 = distinct !DILexicalBlock(scope: !660, file: !580, line: 1273, column: 9)
!2912 = !DILocation(line: 1273, column: 15, scope: !2911)
!2913 = !DILocation(line: 1273, column: 9, scope: !660)
!2914 = !DILocation(line: 1274, column: 27, scope: !2915)
!2915 = distinct !DILexicalBlock(scope: !2911, file: !580, line: 1273, column: 22)
!2916 = !DILocation(line: 1274, column: 33, scope: !2915)
!2917 = !DILocation(line: 1274, column: 23, scope: !2915)
!2918 = !DILocation(line: 1274, column: 39, scope: !2915)
!2919 = !DILocation(line: 1274, column: 18, scope: !2915)
!2920 = !DILocation(line: 1275, column: 21, scope: !2915)
!2921 = !DILocation(line: 1275, column: 19, scope: !2915)
!2922 = !DILocation(line: 1275, column: 27, scope: !2915)
!2923 = !DILocation(line: 1275, column: 14, scope: !2915)
!2924 = !DILocation(line: 1276, column: 5, scope: !2915)
!2925 = !DILocation(line: 1277, column: 5, scope: !660)
!2926 = distinct !{!2926, !2925}
!2927 = !DILocation(line: 1277, column: 120, scope: !2928)
!2928 = !DILexicalBlockFile(scope: !2929, file: !580, discriminator: 1)
!2929 = distinct !DILexicalBlock(scope: !660, file: !580, line: 1277, column: 8)
!2930 = !DILocation(line: 1279, column: 9, scope: !2931)
!2931 = distinct !DILexicalBlock(scope: !660, file: !580, line: 1279, column: 9)
!2932 = !DILocation(line: 1279, column: 9, scope: !660)
!2933 = !DILocation(line: 1280, column: 16, scope: !2934)
!2934 = distinct !DILexicalBlock(scope: !2935, file: !580, line: 1280, column: 9)
!2935 = distinct !DILexicalBlock(scope: !2931, file: !580, line: 1279, column: 17)
!2936 = !DILocation(line: 1280, column: 14, scope: !2934)
!2937 = !DILocation(line: 1280, column: 21, scope: !2938)
!2938 = !DILexicalBlockFile(scope: !2939, file: !580, discriminator: 1)
!2939 = distinct !DILexicalBlock(scope: !2934, file: !580, line: 1280, column: 9)
!2940 = !DILocation(line: 1280, column: 25, scope: !2938)
!2941 = !DILocation(line: 1280, column: 23, scope: !2938)
!2942 = !DILocation(line: 1280, column: 9, scope: !2938)
!2943 = !DILocalVariable(name: "sample", scope: !2944, file: !580, line: 1281, type: !631)
!2944 = distinct !DILexicalBlock(scope: !2939, file: !580, line: 1280, column: 37)
!2945 = !DILocation(line: 1281, column: 21, scope: !2944)
!2946 = !DILocation(line: 1281, column: 38, scope: !2944)
!2947 = !DILocation(line: 1281, column: 42, scope: !2944)
!2948 = !DILocation(line: 1281, column: 40, scope: !2944)
!2949 = !DILocation(line: 1281, column: 30, scope: !2944)
!2950 = !DILocalVariable(name: "asample", scope: !2944, file: !580, line: 1282, type: !631)
!2951 = !DILocation(line: 1282, column: 21, scope: !2944)
!2952 = !DILocation(line: 1282, column: 35, scope: !2944)
!2953 = !DILocation(line: 1282, column: 31, scope: !2944)
!2954 = !DILocation(line: 1282, column: 45, scope: !2944)
!2955 = !DILocation(line: 1282, column: 43, scope: !2944)
!2956 = !DILocation(line: 1283, column: 17, scope: !2957)
!2957 = distinct !DILexicalBlock(scope: !2944, file: !580, line: 1283, column: 17)
!2958 = !DILocation(line: 1283, column: 25, scope: !2957)
!2959 = !DILocation(line: 1283, column: 17, scope: !2944)
!2960 = !DILocation(line: 1284, column: 17, scope: !2961)
!2961 = distinct !DILexicalBlock(scope: !2957, file: !580, line: 1283, column: 31)
!2962 = distinct !{!2962, !2960}
!2963 = !DILocation(line: 1284, column: 28, scope: !2964)
!2964 = !DILexicalBlockFile(scope: !2965, file: !580, discriminator: 1)
!2965 = distinct !DILexicalBlock(scope: !2966, file: !580, line: 1284, column: 26)
!2966 = distinct !DILexicalBlock(scope: !2961, file: !580, line: 1284, column: 20)
!2967 = !DILocation(line: 1284, column: 36, scope: !2964)
!2968 = !DILocation(line: 1284, column: 26, scope: !2964)
!2969 = !DILocation(line: 1284, column: 55, scope: !2970)
!2970 = !DILexicalBlockFile(scope: !2971, file: !580, discriminator: 2)
!2971 = distinct !DILexicalBlock(scope: !2965, file: !580, line: 1284, column: 53)
!2972 = !DILocation(line: 1284, column: 113, scope: !2973)
!2973 = !DILexicalBlockFile(scope: !2970, file: !580, discriminator: 4)
!2974 = !DILocation(line: 1284, column: 113, scope: !2970)
!2975 = !DILocation(line: 1284, column: 124, scope: !2976)
!2976 = !DILexicalBlockFile(scope: !2966, file: !580, discriminator: 3)
!2977 = !DILocation(line: 1285, column: 26, scope: !2961)
!2978 = !DILocation(line: 1285, column: 33, scope: !2961)
!2979 = !DILocation(line: 1285, column: 48, scope: !2980)
!2980 = !DILexicalBlockFile(scope: !2961, file: !580, discriminator: 1)
!2981 = !DILocation(line: 1285, column: 40, scope: !2980)
!2982 = !DILocation(line: 1285, column: 26, scope: !2980)
!2983 = !DILocation(line: 1285, column: 68, scope: !2984)
!2984 = !DILexicalBlockFile(scope: !2961, file: !580, discriminator: 2)
!2985 = !DILocation(line: 1285, column: 60, scope: !2984)
!2986 = !DILocation(line: 1285, column: 59, scope: !2984)
!2987 = !DILocation(line: 1285, column: 26, scope: !2984)
!2988 = !DILocation(line: 1285, column: 26, scope: !2989)
!2989 = !DILexicalBlockFile(scope: !2961, file: !580, discriminator: 3)
!2990 = !DILocation(line: 1285, column: 24, scope: !2989)
!2991 = !DILocation(line: 1286, column: 13, scope: !2961)
!2992 = !DILocation(line: 1287, column: 28, scope: !2957)
!2993 = !DILocation(line: 1287, column: 24, scope: !2957)
!2994 = !DILocation(line: 1289, column: 35, scope: !2944)
!2995 = !DILocation(line: 1289, column: 21, scope: !2944)
!2996 = !DILocation(line: 1289, column: 25, scope: !2944)
!2997 = !DILocation(line: 1289, column: 23, scope: !2944)
!2998 = !DILocation(line: 1289, column: 13, scope: !2944)
!2999 = !DILocation(line: 1289, column: 33, scope: !2944)
!3000 = !DILocation(line: 1290, column: 9, scope: !2944)
!3001 = !DILocation(line: 1280, column: 33, scope: !3002)
!3002 = !DILexicalBlockFile(scope: !2939, file: !580, discriminator: 2)
!3003 = !DILocation(line: 1280, column: 9, scope: !3002)
!3004 = distinct !{!3004, !3005}
!3005 = !DILocation(line: 1280, column: 9, scope: !2935)
!3006 = !DILocation(line: 1291, column: 5, scope: !2935)
!3007 = !DILocation(line: 1292, column: 16, scope: !3008)
!3008 = distinct !DILexicalBlock(scope: !3009, file: !580, line: 1292, column: 9)
!3009 = distinct !DILexicalBlock(scope: !2931, file: !580, line: 1291, column: 12)
!3010 = !DILocation(line: 1292, column: 14, scope: !3008)
!3011 = !DILocation(line: 1292, column: 21, scope: !3012)
!3012 = !DILexicalBlockFile(scope: !3013, file: !580, discriminator: 1)
!3013 = distinct !DILexicalBlock(scope: !3008, file: !580, line: 1292, column: 9)
!3014 = !DILocation(line: 1292, column: 25, scope: !3012)
!3015 = !DILocation(line: 1292, column: 23, scope: !3012)
!3016 = !DILocation(line: 1292, column: 9, scope: !3012)
!3017 = !DILocation(line: 1293, column: 37, scope: !3013)
!3018 = !DILocation(line: 1293, column: 21, scope: !3013)
!3019 = !DILocation(line: 1293, column: 25, scope: !3013)
!3020 = !DILocation(line: 1293, column: 23, scope: !3013)
!3021 = !DILocation(line: 1293, column: 13, scope: !3013)
!3022 = !DILocation(line: 1293, column: 33, scope: !3013)
!3023 = !DILocation(line: 1292, column: 33, scope: !3024)
!3024 = !DILexicalBlockFile(scope: !3013, file: !580, discriminator: 2)
!3025 = !DILocation(line: 1292, column: 9, scope: !3024)
!3026 = distinct !{!3026, !3027}
!3027 = !DILocation(line: 1292, column: 9, scope: !3009)
!3028 = !DILocation(line: 1296, column: 9, scope: !3029)
!3029 = distinct !DILexicalBlock(scope: !660, file: !580, line: 1296, column: 9)
!3030 = !DILocation(line: 1296, column: 17, scope: !3029)
!3031 = !DILocation(line: 1296, column: 14, scope: !3029)
!3032 = !DILocation(line: 1296, column: 9, scope: !660)
!3033 = !DILocalVariable(name: "len", scope: !3034, file: !580, line: 1297, type: !200)
!3034 = distinct !DILexicalBlock(scope: !3029, file: !580, line: 1296, column: 30)
!3035 = !DILocation(line: 1297, column: 13, scope: !3034)
!3036 = !DILocation(line: 1297, column: 21, scope: !3034)
!3037 = !DILocation(line: 1297, column: 31, scope: !3034)
!3038 = !DILocation(line: 1297, column: 45, scope: !3034)
!3039 = !DILocation(line: 1297, column: 43, scope: !3034)
!3040 = !DILocation(line: 1297, column: 28, scope: !3034)
!3041 = !DILocation(line: 1297, column: 20, scope: !3034)
!3042 = !DILocation(line: 1297, column: 54, scope: !3043)
!3043 = !DILexicalBlockFile(scope: !3034, file: !580, discriminator: 1)
!3044 = !DILocation(line: 1297, column: 68, scope: !3043)
!3045 = !DILocation(line: 1297, column: 66, scope: !3043)
!3046 = !DILocation(line: 1297, column: 20, scope: !3043)
!3047 = !DILocation(line: 1297, column: 77, scope: !3048)
!3048 = !DILexicalBlockFile(scope: !3034, file: !580, discriminator: 2)
!3049 = !DILocation(line: 1297, column: 20, scope: !3048)
!3050 = !DILocation(line: 1297, column: 20, scope: !3051)
!3051 = !DILexicalBlockFile(scope: !3034, file: !580, discriminator: 3)
!3052 = !DILocation(line: 1297, column: 13, scope: !3051)
!3053 = !DILocation(line: 1299, column: 16, scope: !3054)
!3054 = distinct !DILexicalBlock(scope: !3034, file: !580, line: 1299, column: 9)
!3055 = !DILocation(line: 1299, column: 14, scope: !3054)
!3056 = !DILocation(line: 1299, column: 21, scope: !3057)
!3057 = !DILexicalBlockFile(scope: !3058, file: !580, discriminator: 1)
!3058 = distinct !DILexicalBlock(scope: !3054, file: !580, line: 1299, column: 9)
!3059 = !DILocation(line: 1299, column: 25, scope: !3057)
!3060 = !DILocation(line: 1299, column: 23, scope: !3057)
!3061 = !DILocation(line: 1299, column: 9, scope: !3057)
!3062 = !DILocation(line: 1300, column: 13, scope: !3063)
!3063 = distinct !DILexicalBlock(scope: !3058, file: !580, line: 1299, column: 35)
!3064 = !DILocation(line: 1301, column: 13, scope: !3063)
!3065 = distinct !{!3065, !3064}
!3066 = !DILocalVariable(name: "s64", scope: !3067, file: !580, line: 1301, type: !206)
!3067 = distinct !DILexicalBlock(scope: !3063, file: !580, line: 1301, column: 15)
!3068 = !DILocation(line: 1301, column: 24, scope: !3067)
!3069 = !DILocation(line: 1301, column: 31, scope: !3070)
!3070 = !DILexicalBlockFile(scope: !3067, file: !580, discriminator: 1)
!3071 = !DILocation(line: 1301, column: 30, scope: !3070)
!3072 = !DILocation(line: 1301, column: 24, scope: !3070)
!3073 = !DILocation(line: 1301, column: 55, scope: !3070)
!3074 = !DILocation(line: 1301, column: 47, scope: !3070)
!3075 = !DILocation(line: 1301, column: 44, scope: !3070)
!3076 = !DILocation(line: 1301, column: 83, scope: !3070)
!3077 = !DILocation(line: 1301, column: 87, scope: !3070)
!3078 = !DILocation(line: 1301, column: 73, scope: !3070)
!3079 = !DILocation(line: 1301, column: 63, scope: !3070)
!3080 = !DILocation(line: 1301, column: 71, scope: !3070)
!3081 = !DILocation(line: 1301, column: 95, scope: !3070)
!3082 = !DILocation(line: 1302, column: 24, scope: !3063)
!3083 = !DILocation(line: 1302, column: 21, scope: !3063)
!3084 = !DILocation(line: 1303, column: 9, scope: !3063)
!3085 = !DILocation(line: 1299, column: 31, scope: !3086)
!3086 = !DILexicalBlockFile(scope: !3058, file: !580, discriminator: 2)
!3087 = !DILocation(line: 1299, column: 9, scope: !3086)
!3088 = distinct !{!3088, !3089}
!3089 = !DILocation(line: 1299, column: 9, scope: !3034)
!3090 = !DILocation(line: 1304, column: 18, scope: !3034)
!3091 = !DILocation(line: 1304, column: 15, scope: !3034)
!3092 = !DILocation(line: 1305, column: 5, scope: !3034)
!3093 = !DILocalVariable(name: "len", scope: !3094, file: !580, line: 1306, type: !200)
!3094 = distinct !DILexicalBlock(scope: !3029, file: !580, line: 1305, column: 12)
!3095 = !DILocation(line: 1306, column: 13, scope: !3094)
!3096 = !DILocation(line: 1306, column: 21, scope: !3094)
!3097 = !DILocation(line: 1306, column: 32, scope: !3094)
!3098 = !DILocation(line: 1306, column: 39, scope: !3094)
!3099 = !DILocation(line: 1306, column: 37, scope: !3094)
!3100 = !DILocation(line: 1306, column: 52, scope: !3094)
!3101 = !DILocation(line: 1306, column: 28, scope: !3094)
!3102 = !DILocation(line: 1306, column: 20, scope: !3094)
!3103 = !DILocation(line: 1306, column: 62, scope: !3104)
!3104 = !DILexicalBlockFile(scope: !3094, file: !580, discriminator: 1)
!3105 = !DILocation(line: 1306, column: 69, scope: !3104)
!3106 = !DILocation(line: 1306, column: 67, scope: !3104)
!3107 = !DILocation(line: 1306, column: 82, scope: !3104)
!3108 = !DILocation(line: 1306, column: 20, scope: !3104)
!3109 = !DILocation(line: 1306, column: 91, scope: !3110)
!3110 = !DILexicalBlockFile(scope: !3094, file: !580, discriminator: 2)
!3111 = !DILocation(line: 1306, column: 20, scope: !3110)
!3112 = !DILocation(line: 1306, column: 20, scope: !3113)
!3113 = !DILexicalBlockFile(scope: !3094, file: !580, discriminator: 3)
!3114 = !DILocation(line: 1306, column: 13, scope: !3113)
!3115 = !DILocation(line: 1308, column: 16, scope: !3116)
!3116 = distinct !DILexicalBlock(scope: !3094, file: !580, line: 1308, column: 9)
!3117 = !DILocation(line: 1308, column: 14, scope: !3116)
!3118 = !DILocation(line: 1308, column: 21, scope: !3119)
!3119 = !DILexicalBlockFile(scope: !3120, file: !580, discriminator: 1)
!3120 = distinct !DILexicalBlock(scope: !3116, file: !580, line: 1308, column: 9)
!3121 = !DILocation(line: 1308, column: 25, scope: !3119)
!3122 = !DILocation(line: 1308, column: 23, scope: !3119)
!3123 = !DILocation(line: 1308, column: 9, scope: !3119)
!3124 = !DILocation(line: 1309, column: 18, scope: !3125)
!3125 = distinct !DILexicalBlock(scope: !3120, file: !580, line: 1308, column: 35)
!3126 = !DILocation(line: 1310, column: 13, scope: !3125)
!3127 = distinct !{!3127, !3126}
!3128 = !DILocalVariable(name: "s64", scope: !3129, file: !580, line: 1310, type: !206)
!3129 = distinct !DILexicalBlock(scope: !3125, file: !580, line: 1310, column: 15)
!3130 = !DILocation(line: 1310, column: 24, scope: !3129)
!3131 = !DILocation(line: 1310, column: 31, scope: !3132)
!3132 = !DILexicalBlockFile(scope: !3129, file: !580, discriminator: 1)
!3133 = !DILocation(line: 1310, column: 30, scope: !3132)
!3134 = !DILocation(line: 1310, column: 24, scope: !3132)
!3135 = !DILocation(line: 1310, column: 55, scope: !3132)
!3136 = !DILocation(line: 1310, column: 47, scope: !3132)
!3137 = !DILocation(line: 1310, column: 44, scope: !3132)
!3138 = !DILocation(line: 1310, column: 83, scope: !3132)
!3139 = !DILocation(line: 1310, column: 87, scope: !3132)
!3140 = !DILocation(line: 1310, column: 73, scope: !3132)
!3141 = !DILocation(line: 1310, column: 63, scope: !3132)
!3142 = !DILocation(line: 1310, column: 71, scope: !3132)
!3143 = !DILocation(line: 1310, column: 95, scope: !3132)
!3144 = !DILocation(line: 1311, column: 24, scope: !3125)
!3145 = !DILocation(line: 1311, column: 21, scope: !3125)
!3146 = !DILocation(line: 1312, column: 9, scope: !3125)
!3147 = !DILocation(line: 1308, column: 31, scope: !3148)
!3148 = !DILexicalBlockFile(scope: !3120, file: !580, discriminator: 2)
!3149 = !DILocation(line: 1308, column: 9, scope: !3148)
!3150 = distinct !{!3150, !3151}
!3151 = !DILocation(line: 1308, column: 9, scope: !3094)
!3152 = !DILocation(line: 1313, column: 13, scope: !3153)
!3153 = distinct !DILexicalBlock(scope: !3094, file: !580, line: 1313, column: 13)
!3154 = !DILocation(line: 1313, column: 18, scope: !3153)
!3155 = !DILocation(line: 1313, column: 24, scope: !3153)
!3156 = !DILocation(line: 1313, column: 22, scope: !3153)
!3157 = !DILocation(line: 1313, column: 13, scope: !3094)
!3158 = !DILocation(line: 1314, column: 20, scope: !3153)
!3159 = !DILocation(line: 1314, column: 18, scope: !3153)
!3160 = !DILocation(line: 1314, column: 13, scope: !3153)
!3161 = !DILocation(line: 1315, column: 18, scope: !3094)
!3162 = !DILocation(line: 1315, column: 15, scope: !3094)
!3163 = !DILocation(line: 1319, column: 9, scope: !3164)
!3164 = distinct !DILexicalBlock(scope: !660, file: !580, line: 1319, column: 9)
!3165 = !DILocation(line: 1319, column: 14, scope: !3164)
!3166 = !DILocation(line: 1319, column: 9, scope: !660)
!3167 = !DILocation(line: 1320, column: 13, scope: !3168)
!3168 = distinct !DILexicalBlock(scope: !3169, file: !580, line: 1320, column: 13)
!3169 = distinct !DILexicalBlock(scope: !3164, file: !580, line: 1319, column: 20)
!3170 = !DILocation(line: 1320, column: 19, scope: !3168)
!3171 = !DILocation(line: 1320, column: 13, scope: !3169)
!3172 = !DILocation(line: 1321, column: 24, scope: !3168)
!3173 = !DILocation(line: 1321, column: 32, scope: !3168)
!3174 = !DILocation(line: 1321, column: 30, scope: !3168)
!3175 = !DILocation(line: 1321, column: 21, scope: !3168)
!3176 = !DILocation(line: 1321, column: 13, scope: !3168)
!3177 = !DILocation(line: 1322, column: 5, scope: !3169)
!3178 = !DILocation(line: 1323, column: 9, scope: !3179)
!3179 = distinct !DILexicalBlock(scope: !3164, file: !580, line: 1322, column: 12)
!3180 = !DILocation(line: 1323, column: 16, scope: !3181)
!3181 = !DILexicalBlockFile(scope: !3179, file: !580, discriminator: 1)
!3182 = !DILocation(line: 1323, column: 24, scope: !3181)
!3183 = !DILocation(line: 1323, column: 9, scope: !3181)
!3184 = !DILocation(line: 1324, column: 13, scope: !3185)
!3185 = distinct !DILexicalBlock(scope: !3179, file: !580, line: 1323, column: 30)
!3186 = distinct !{!3186, !3184}
!3187 = !DILocalVariable(name: "s64", scope: !3188, file: !580, line: 1324, type: !206)
!3188 = distinct !DILexicalBlock(scope: !3185, file: !580, line: 1324, column: 15)
!3189 = !DILocation(line: 1324, column: 24, scope: !3188)
!3190 = !DILocation(line: 1324, column: 31, scope: !3191)
!3191 = !DILexicalBlockFile(scope: !3188, file: !580, discriminator: 1)
!3192 = !DILocation(line: 1324, column: 30, scope: !3191)
!3193 = !DILocation(line: 1324, column: 24, scope: !3191)
!3194 = !DILocation(line: 1324, column: 55, scope: !3191)
!3195 = !DILocation(line: 1324, column: 47, scope: !3191)
!3196 = !DILocation(line: 1324, column: 44, scope: !3191)
!3197 = !DILocation(line: 1324, column: 83, scope: !3191)
!3198 = !DILocation(line: 1324, column: 87, scope: !3191)
!3199 = !DILocation(line: 1324, column: 73, scope: !3191)
!3200 = !DILocation(line: 1324, column: 63, scope: !3191)
!3201 = !DILocation(line: 1324, column: 71, scope: !3191)
!3202 = !DILocation(line: 1324, column: 95, scope: !3191)
!3203 = !DILocation(line: 1325, column: 24, scope: !3185)
!3204 = !DILocation(line: 1325, column: 21, scope: !3185)
!3205 = !DILocation(line: 1323, column: 9, scope: !3206)
!3206 = !DILexicalBlockFile(scope: !3179, file: !580, discriminator: 2)
!3207 = distinct !{!3207, !3178}
!3208 = !DILocation(line: 1329, column: 5, scope: !660)
!3209 = distinct !{!3209, !3208}
!3210 = !DILocation(line: 1329, column: 16, scope: !3211)
!3211 = !DILexicalBlockFile(scope: !3212, file: !580, discriminator: 1)
!3212 = distinct !DILexicalBlock(scope: !3213, file: !580, line: 1329, column: 14)
!3213 = distinct !DILexicalBlock(scope: !660, file: !580, line: 1329, column: 8)
!3214 = !DILocation(line: 1329, column: 27, scope: !3211)
!3215 = !DILocation(line: 1329, column: 24, scope: !3211)
!3216 = !DILocation(line: 1329, column: 14, scope: !3211)
!3217 = !DILocation(line: 1329, column: 43, scope: !3218)
!3218 = !DILexicalBlockFile(scope: !3219, file: !580, discriminator: 2)
!3219 = distinct !DILexicalBlock(scope: !3212, file: !580, line: 1329, column: 41)
!3220 = !DILocation(line: 1329, column: 101, scope: !3221)
!3221 = !DILexicalBlockFile(scope: !3218, file: !580, discriminator: 4)
!3222 = !DILocation(line: 1329, column: 101, scope: !3218)
!3223 = !DILocation(line: 1329, column: 112, scope: !3224)
!3224 = !DILexicalBlockFile(scope: !3213, file: !580, discriminator: 3)
!3225 = !DILocation(line: 1331, column: 12, scope: !660)
!3226 = !DILocation(line: 1331, column: 5, scope: !660)
!3227 = distinct !DISubprogram(name: "hdcd_control", scope: !580, file: !580, line: 1335, type: !3228, isLocal: true, isDefinition: true, scopeLine: 1336, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!3228 = !DISubroutineType(types: !3229)
!3229 = !{null, !712, !817, !474, !474}
!3230 = !DILocalVariable(name: "ctx", arg: 1, scope: !3227, file: !580, line: 1335, type: !712)
!3231 = !DILocation(line: 1335, column: 39, scope: !3227)
!3232 = !DILocalVariable(name: "state", arg: 2, scope: !3227, file: !580, line: 1335, type: !817)
!3233 = !DILocation(line: 1335, column: 56, scope: !3227)
!3234 = !DILocalVariable(name: "peak_extend", arg: 3, scope: !3227, file: !580, line: 1335, type: !474)
!3235 = !DILocation(line: 1335, column: 68, scope: !3227)
!3236 = !DILocalVariable(name: "target_gain", arg: 4, scope: !3227, file: !580, line: 1335, type: !474)
!3237 = !DILocation(line: 1335, column: 86, scope: !3227)
!3238 = !DILocation(line: 1337, column: 21, scope: !3227)
!3239 = !DILocation(line: 1337, column: 26, scope: !3227)
!3240 = !DILocation(line: 1337, column: 35, scope: !3227)
!3241 = !DILocation(line: 1337, column: 38, scope: !3242)
!3242 = !DILexicalBlockFile(scope: !3227, file: !580, discriminator: 1)
!3243 = !DILocation(line: 1337, column: 45, scope: !3242)
!3244 = !DILocation(line: 1337, column: 53, scope: !3242)
!3245 = !DILocation(line: 1337, column: 35, scope: !3242)
!3246 = !DILocation(line: 1337, column: 35, scope: !3247)
!3247 = !DILexicalBlockFile(scope: !3227, file: !580, discriminator: 2)
!3248 = !DILocation(line: 1337, column: 6, scope: !3247)
!3249 = !DILocation(line: 1337, column: 18, scope: !3247)
!3250 = !DILocation(line: 1338, column: 21, scope: !3227)
!3251 = !DILocation(line: 1338, column: 28, scope: !3227)
!3252 = !DILocation(line: 1338, column: 36, scope: !3227)
!3253 = !DILocation(line: 1338, column: 42, scope: !3227)
!3254 = !DILocation(line: 1338, column: 6, scope: !3227)
!3255 = !DILocation(line: 1338, column: 18, scope: !3227)
!3256 = !DILocation(line: 1339, column: 1, scope: !3227)
!3257 = distinct !DISubprogram(name: "hdcd_integrate", scope: !580, file: !580, line: 1041, type: !3258, isLocal: true, isDefinition: true, scopeLine: 1042, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!3258 = !DISubroutineType(types: !3259)
!3259 = !{!200, !712, !817, !200, !474, !1036, !200, !200}
!3260 = !DILocalVariable(name: "ctx", arg: 1, scope: !3257, file: !580, line: 1041, type: !712)
!3261 = !DILocation(line: 1041, column: 40, scope: !3257)
!3262 = !DILocalVariable(name: "states", arg: 2, scope: !3257, file: !580, line: 1041, type: !817)
!3263 = !DILocation(line: 1041, column: 57, scope: !3257)
!3264 = !DILocalVariable(name: "channels", arg: 3, scope: !3257, file: !580, line: 1041, type: !200)
!3265 = !DILocation(line: 1041, column: 69, scope: !3257)
!3266 = !DILocalVariable(name: "flag", arg: 4, scope: !3257, file: !580, line: 1041, type: !474)
!3267 = !DILocation(line: 1041, column: 84, scope: !3257)
!3268 = !DILocalVariable(name: "samples", arg: 5, scope: !3257, file: !580, line: 1041, type: !1036)
!3269 = !DILocation(line: 1041, column: 105, scope: !3257)
!3270 = !DILocalVariable(name: "count", arg: 6, scope: !3257, file: !580, line: 1041, type: !200)
!3271 = !DILocation(line: 1041, column: 118, scope: !3257)
!3272 = !DILocalVariable(name: "stride", arg: 7, scope: !3257, file: !580, line: 1041, type: !200)
!3273 = !DILocation(line: 1041, column: 129, scope: !3257)
!3274 = !DILocalVariable(name: "bits", scope: !3257, file: !580, line: 1043, type: !3275)
!3275 = !DICompositeType(tag: DW_TAG_array_type, baseType: !636, size: 64, align: 32, elements: !641)
!3276 = !DILocation(line: 1043, column: 14, scope: !3257)
!3277 = !DILocalVariable(name: "result", scope: !3257, file: !580, line: 1044, type: !200)
!3278 = !DILocation(line: 1044, column: 9, scope: !3257)
!3279 = !DILocation(line: 1044, column: 18, scope: !3257)
!3280 = !DILocalVariable(name: "i", scope: !3257, file: !580, line: 1045, type: !200)
!3281 = !DILocation(line: 1045, column: 9, scope: !3257)
!3282 = !DILocalVariable(name: "j", scope: !3257, file: !580, line: 1045, type: !200)
!3283 = !DILocation(line: 1045, column: 12, scope: !3257)
!3284 = !DILocalVariable(name: "f", scope: !3257, file: !580, line: 1045, type: !200)
!3285 = !DILocation(line: 1045, column: 15, scope: !3257)
!3286 = !DILocation(line: 1046, column: 6, scope: !3257)
!3287 = !DILocation(line: 1046, column: 11, scope: !3257)
!3288 = !DILocation(line: 1048, column: 5, scope: !3257)
!3289 = !DILocation(line: 1049, column: 9, scope: !3290)
!3290 = distinct !DILexicalBlock(scope: !3257, file: !580, line: 1049, column: 9)
!3291 = !DILocation(line: 1049, column: 18, scope: !3290)
!3292 = !DILocation(line: 1049, column: 16, scope: !3290)
!3293 = !DILocation(line: 1049, column: 9, scope: !3257)
!3294 = !DILocation(line: 1049, column: 37, scope: !3295)
!3295 = !DILexicalBlockFile(scope: !3290, file: !580, discriminator: 1)
!3296 = !DILocation(line: 1049, column: 35, scope: !3295)
!3297 = !DILocation(line: 1049, column: 28, scope: !3295)
!3298 = !DILocation(line: 1051, column: 12, scope: !3299)
!3299 = distinct !DILexicalBlock(scope: !3257, file: !580, line: 1051, column: 5)
!3300 = !DILocation(line: 1051, column: 10, scope: !3299)
!3301 = !DILocation(line: 1051, column: 17, scope: !3302)
!3302 = !DILexicalBlockFile(scope: !3303, file: !580, discriminator: 1)
!3303 = distinct !DILexicalBlock(scope: !3299, file: !580, line: 1051, column: 5)
!3304 = !DILocation(line: 1051, column: 21, scope: !3302)
!3305 = !DILocation(line: 1051, column: 19, scope: !3302)
!3306 = !DILocation(line: 1051, column: 5, scope: !3302)
!3307 = !DILocation(line: 1052, column: 27, scope: !3303)
!3308 = !DILocation(line: 1052, column: 20, scope: !3303)
!3309 = !DILocation(line: 1052, column: 30, scope: !3303)
!3310 = !DILocation(line: 1052, column: 19, scope: !3303)
!3311 = !DILocation(line: 1052, column: 44, scope: !3303)
!3312 = !DILocation(line: 1052, column: 41, scope: !3303)
!3313 = !DILocation(line: 1052, column: 55, scope: !3302)
!3314 = !DILocation(line: 1052, column: 19, scope: !3302)
!3315 = !DILocation(line: 1052, column: 73, scope: !3316)
!3316 = !DILexicalBlockFile(scope: !3303, file: !580, discriminator: 2)
!3317 = !DILocation(line: 1052, column: 66, scope: !3316)
!3318 = !DILocation(line: 1052, column: 76, scope: !3316)
!3319 = !DILocation(line: 1052, column: 65, scope: !3316)
!3320 = !DILocation(line: 1052, column: 19, scope: !3316)
!3321 = !DILocation(line: 1052, column: 19, scope: !3322)
!3322 = !DILexicalBlockFile(scope: !3303, file: !580, discriminator: 3)
!3323 = !DILocation(line: 1052, column: 16, scope: !3322)
!3324 = !DILocation(line: 1052, column: 9, scope: !3322)
!3325 = !DILocation(line: 1051, column: 32, scope: !3316)
!3326 = !DILocation(line: 1051, column: 5, scope: !3316)
!3327 = distinct !{!3327, !3328}
!3328 = !DILocation(line: 1051, column: 5, scope: !3257)
!3329 = !DILocation(line: 1054, column: 14, scope: !3330)
!3330 = distinct !DILexicalBlock(scope: !3257, file: !580, line: 1054, column: 5)
!3331 = !DILocation(line: 1054, column: 21, scope: !3330)
!3332 = !DILocation(line: 1054, column: 12, scope: !3330)
!3333 = !DILocation(line: 1054, column: 10, scope: !3330)
!3334 = !DILocation(line: 1054, column: 26, scope: !3335)
!3335 = !DILexicalBlockFile(scope: !3336, file: !580, discriminator: 1)
!3336 = distinct !DILexicalBlock(scope: !3330, file: !580, line: 1054, column: 5)
!3337 = !DILocation(line: 1054, column: 28, scope: !3335)
!3338 = !DILocation(line: 1054, column: 5, scope: !3335)
!3339 = !DILocation(line: 1055, column: 16, scope: !3340)
!3340 = distinct !DILexicalBlock(scope: !3341, file: !580, line: 1055, column: 9)
!3341 = distinct !DILexicalBlock(scope: !3336, file: !580, line: 1054, column: 39)
!3342 = !DILocation(line: 1055, column: 14, scope: !3340)
!3343 = !DILocation(line: 1055, column: 21, scope: !3344)
!3344 = !DILexicalBlockFile(scope: !3345, file: !580, discriminator: 1)
!3345 = distinct !DILexicalBlock(scope: !3340, file: !580, line: 1055, column: 9)
!3346 = !DILocation(line: 1055, column: 25, scope: !3344)
!3347 = !DILocation(line: 1055, column: 23, scope: !3344)
!3348 = !DILocation(line: 1055, column: 9, scope: !3344)
!3349 = !DILocation(line: 1056, column: 34, scope: !3345)
!3350 = !DILocation(line: 1056, column: 25, scope: !3345)
!3351 = !DILocation(line: 1056, column: 38, scope: !3345)
!3352 = !DILocation(line: 1056, column: 46, scope: !3345)
!3353 = !DILocation(line: 1056, column: 43, scope: !3345)
!3354 = !DILocation(line: 1056, column: 18, scope: !3345)
!3355 = !DILocation(line: 1056, column: 13, scope: !3345)
!3356 = !DILocation(line: 1056, column: 21, scope: !3345)
!3357 = !DILocation(line: 1055, column: 36, scope: !3358)
!3358 = !DILexicalBlockFile(scope: !3345, file: !580, discriminator: 2)
!3359 = !DILocation(line: 1055, column: 9, scope: !3358)
!3360 = distinct !{!3360, !3361}
!3361 = !DILocation(line: 1055, column: 9, scope: !3341)
!3362 = !DILocation(line: 1057, column: 20, scope: !3341)
!3363 = !DILocation(line: 1057, column: 29, scope: !3341)
!3364 = !DILocation(line: 1057, column: 27, scope: !3341)
!3365 = !DILocation(line: 1057, column: 17, scope: !3341)
!3366 = !DILocation(line: 1058, column: 5, scope: !3341)
!3367 = !DILocation(line: 1054, column: 35, scope: !3368)
!3368 = !DILexicalBlockFile(scope: !3336, file: !580, discriminator: 2)
!3369 = !DILocation(line: 1054, column: 5, scope: !3368)
!3370 = distinct !{!3370, !3371}
!3371 = !DILocation(line: 1054, column: 5, scope: !3257)
!3372 = !DILocation(line: 1060, column: 12, scope: !3373)
!3373 = distinct !DILexicalBlock(scope: !3257, file: !580, line: 1060, column: 5)
!3374 = !DILocation(line: 1060, column: 10, scope: !3373)
!3375 = !DILocation(line: 1060, column: 17, scope: !3376)
!3376 = !DILexicalBlockFile(scope: !3377, file: !580, discriminator: 1)
!3377 = distinct !DILexicalBlock(scope: !3373, file: !580, line: 1060, column: 5)
!3378 = !DILocation(line: 1060, column: 21, scope: !3376)
!3379 = !DILocation(line: 1060, column: 19, scope: !3376)
!3380 = !DILocation(line: 1060, column: 5, scope: !3376)
!3381 = !DILocation(line: 1061, column: 36, scope: !3382)
!3382 = distinct !DILexicalBlock(scope: !3377, file: !580, line: 1060, column: 36)
!3383 = !DILocation(line: 1061, column: 29, scope: !3382)
!3384 = !DILocation(line: 1061, column: 39, scope: !3382)
!3385 = !DILocation(line: 1061, column: 49, scope: !3382)
!3386 = !DILocation(line: 1061, column: 46, scope: !3382)
!3387 = !DILocation(line: 1061, column: 64, scope: !3382)
!3388 = !DILocation(line: 1061, column: 59, scope: !3382)
!3389 = !DILocation(line: 1061, column: 57, scope: !3382)
!3390 = !DILocation(line: 1061, column: 16, scope: !3382)
!3391 = !DILocation(line: 1061, column: 9, scope: !3382)
!3392 = !DILocation(line: 1061, column: 19, scope: !3382)
!3393 = !DILocation(line: 1061, column: 26, scope: !3382)
!3394 = !DILocation(line: 1062, column: 32, scope: !3382)
!3395 = !DILocation(line: 1062, column: 16, scope: !3382)
!3396 = !DILocation(line: 1062, column: 9, scope: !3382)
!3397 = !DILocation(line: 1062, column: 19, scope: !3382)
!3398 = !DILocation(line: 1062, column: 29, scope: !3382)
!3399 = !DILocation(line: 1064, column: 20, scope: !3400)
!3400 = distinct !DILexicalBlock(scope: !3382, file: !580, line: 1064, column: 13)
!3401 = !DILocation(line: 1064, column: 13, scope: !3400)
!3402 = !DILocation(line: 1064, column: 23, scope: !3400)
!3403 = !DILocation(line: 1064, column: 33, scope: !3400)
!3404 = !DILocation(line: 1064, column: 13, scope: !3382)
!3405 = !DILocalVariable(name: "wbits", scope: !3406, file: !580, line: 1065, type: !636)
!3406 = distinct !DILexicalBlock(scope: !3400, file: !580, line: 1064, column: 39)
!3407 = !DILocation(line: 1065, column: 22, scope: !3406)
!3408 = !DILocation(line: 1065, column: 48, scope: !3406)
!3409 = !DILocation(line: 1065, column: 41, scope: !3406)
!3410 = !DILocation(line: 1065, column: 51, scope: !3406)
!3411 = !DILocation(line: 1065, column: 67, scope: !3406)
!3412 = !DILocation(line: 1065, column: 60, scope: !3406)
!3413 = !DILocation(line: 1065, column: 70, scope: !3406)
!3414 = !DILocation(line: 1065, column: 77, scope: !3406)
!3415 = !DILocation(line: 1065, column: 58, scope: !3406)
!3416 = !DILocation(line: 1065, column: 91, scope: !3406)
!3417 = !DILocation(line: 1065, column: 84, scope: !3406)
!3418 = !DILocation(line: 1065, column: 94, scope: !3406)
!3419 = !DILocation(line: 1065, column: 101, scope: !3406)
!3420 = !DILocation(line: 1065, column: 82, scope: !3406)
!3421 = !DILocation(line: 1065, column: 30, scope: !3406)
!3422 = !DILocation(line: 1066, column: 24, scope: !3423)
!3423 = distinct !DILexicalBlock(scope: !3406, file: !580, line: 1066, column: 17)
!3424 = !DILocation(line: 1066, column: 17, scope: !3423)
!3425 = !DILocation(line: 1066, column: 27, scope: !3423)
!3426 = !DILocation(line: 1066, column: 17, scope: !3406)
!3427 = !DILocation(line: 1067, column: 19, scope: !3428)
!3428 = distinct !DILexicalBlock(scope: !3423, file: !580, line: 1066, column: 32)
!3429 = !DILocation(line: 1068, column: 22, scope: !3430)
!3430 = distinct !DILexicalBlock(scope: !3428, file: !580, line: 1068, column: 21)
!3431 = !DILocation(line: 1068, column: 28, scope: !3430)
!3432 = !DILocation(line: 1068, column: 42, scope: !3430)
!3433 = !DILocation(line: 1068, column: 21, scope: !3428)
!3434 = !DILocation(line: 1070, column: 26, scope: !3435)
!3435 = distinct !DILexicalBlock(scope: !3436, file: !580, line: 1070, column: 25)
!3436 = distinct !DILexicalBlock(scope: !3430, file: !580, line: 1068, column: 57)
!3437 = !DILocation(line: 1070, column: 32, scope: !3435)
!3438 = !DILocation(line: 1070, column: 40, scope: !3435)
!3439 = !DILocation(line: 1070, column: 25, scope: !3436)
!3440 = !DILocation(line: 1073, column: 46, scope: !3441)
!3441 = distinct !DILexicalBlock(scope: !3435, file: !580, line: 1070, column: 46)
!3442 = !DILocation(line: 1073, column: 52, scope: !3441)
!3443 = !DILocation(line: 1073, column: 62, scope: !3441)
!3444 = !DILocation(line: 1073, column: 68, scope: !3441)
!3445 = !DILocation(line: 1073, column: 59, scope: !3441)
!3446 = !DILocation(line: 1073, column: 45, scope: !3441)
!3447 = !DILocation(line: 1073, column: 32, scope: !3441)
!3448 = !DILocation(line: 1073, column: 25, scope: !3441)
!3449 = !DILocation(line: 1073, column: 35, scope: !3441)
!3450 = !DILocation(line: 1073, column: 43, scope: !3441)
!3451 = !DILocation(line: 1074, column: 27, scope: !3441)
!3452 = !DILocation(line: 1075, column: 32, scope: !3441)
!3453 = !DILocation(line: 1075, column: 25, scope: !3441)
!3454 = !DILocation(line: 1075, column: 35, scope: !3441)
!3455 = !DILocation(line: 1075, column: 48, scope: !3441)
!3456 = !DILocation(line: 1076, column: 21, scope: !3441)
!3457 = !DILocation(line: 1078, column: 32, scope: !3458)
!3458 = distinct !DILexicalBlock(scope: !3435, file: !580, line: 1076, column: 28)
!3459 = !DILocation(line: 1078, column: 25, scope: !3458)
!3460 = !DILocation(line: 1078, column: 35, scope: !3458)
!3461 = !DILocation(line: 1078, column: 55, scope: !3458)
!3462 = !DILocation(line: 1079, column: 32, scope: !3458)
!3463 = !DILocation(line: 1079, column: 37, scope: !3458)
!3464 = !DILocation(line: 1081, column: 32, scope: !3458)
!3465 = !DILocation(line: 1081, column: 38, scope: !3458)
!3466 = !DILocation(line: 1081, column: 46, scope: !3458)
!3467 = !DILocation(line: 1081, column: 51, scope: !3458)
!3468 = !DILocation(line: 1079, column: 25, scope: !3458)
!3469 = !DILocation(line: 1083, column: 17, scope: !3436)
!3470 = !DILocation(line: 1083, column: 29, scope: !3471)
!3471 = !DILexicalBlockFile(scope: !3472, file: !580, discriminator: 1)
!3472 = distinct !DILexicalBlock(scope: !3430, file: !580, line: 1083, column: 28)
!3473 = !DILocation(line: 1083, column: 35, scope: !3471)
!3474 = !DILocation(line: 1083, column: 49, scope: !3471)
!3475 = !DILocation(line: 1083, column: 28, scope: !3471)
!3476 = !DILocation(line: 1085, column: 27, scope: !3477)
!3477 = distinct !DILexicalBlock(scope: !3478, file: !580, line: 1085, column: 25)
!3478 = distinct !DILexicalBlock(scope: !3472, file: !580, line: 1083, column: 64)
!3479 = !DILocation(line: 1085, column: 37, scope: !3477)
!3480 = !DILocation(line: 1085, column: 36, scope: !3477)
!3481 = !DILocation(line: 1085, column: 43, scope: !3477)
!3482 = !DILocation(line: 1085, column: 48, scope: !3477)
!3483 = !DILocation(line: 1085, column: 33, scope: !3477)
!3484 = !DILocation(line: 1085, column: 56, scope: !3477)
!3485 = !DILocation(line: 1085, column: 70, scope: !3477)
!3486 = !DILocation(line: 1085, column: 25, scope: !3478)
!3487 = !DILocation(line: 1088, column: 45, scope: !3488)
!3488 = distinct !DILexicalBlock(scope: !3477, file: !580, line: 1085, column: 85)
!3489 = !DILocation(line: 1088, column: 51, scope: !3488)
!3490 = !DILocation(line: 1088, column: 56, scope: !3488)
!3491 = !DILocation(line: 1088, column: 32, scope: !3488)
!3492 = !DILocation(line: 1088, column: 25, scope: !3488)
!3493 = !DILocation(line: 1088, column: 35, scope: !3488)
!3494 = !DILocation(line: 1088, column: 43, scope: !3488)
!3495 = !DILocation(line: 1089, column: 27, scope: !3488)
!3496 = !DILocation(line: 1090, column: 32, scope: !3488)
!3497 = !DILocation(line: 1090, column: 25, scope: !3488)
!3498 = !DILocation(line: 1090, column: 35, scope: !3488)
!3499 = !DILocation(line: 1090, column: 48, scope: !3488)
!3500 = !DILocation(line: 1091, column: 21, scope: !3488)
!3501 = !DILocation(line: 1093, column: 32, scope: !3502)
!3502 = distinct !DILexicalBlock(scope: !3477, file: !580, line: 1091, column: 28)
!3503 = !DILocation(line: 1093, column: 25, scope: !3502)
!3504 = !DILocation(line: 1093, column: 35, scope: !3502)
!3505 = !DILocation(line: 1093, column: 59, scope: !3502)
!3506 = !DILocation(line: 1094, column: 32, scope: !3502)
!3507 = !DILocation(line: 1094, column: 37, scope: !3502)
!3508 = !DILocation(line: 1097, column: 32, scope: !3502)
!3509 = !DILocation(line: 1097, column: 38, scope: !3502)
!3510 = !DILocation(line: 1097, column: 49, scope: !3502)
!3511 = !DILocation(line: 1097, column: 55, scope: !3502)
!3512 = !DILocation(line: 1097, column: 65, scope: !3502)
!3513 = !DILocation(line: 1097, column: 72, scope: !3502)
!3514 = !DILocation(line: 1097, column: 71, scope: !3502)
!3515 = !DILocation(line: 1097, column: 78, scope: !3502)
!3516 = !DILocation(line: 1097, column: 86, scope: !3502)
!3517 = !DILocation(line: 1097, column: 91, scope: !3502)
!3518 = !DILocation(line: 1094, column: 25, scope: !3502)
!3519 = !DILocation(line: 1099, column: 17, scope: !3478)
!3520 = !DILocation(line: 1100, column: 21, scope: !3521)
!3521 = distinct !DILexicalBlock(scope: !3428, file: !580, line: 1100, column: 21)
!3522 = !DILocation(line: 1100, column: 21, scope: !3428)
!3523 = !DILocation(line: 1101, column: 34, scope: !3524)
!3524 = distinct !DILexicalBlock(scope: !3521, file: !580, line: 1100, column: 24)
!3525 = !DILocation(line: 1101, column: 32, scope: !3524)
!3526 = !DILocation(line: 1101, column: 22, scope: !3524)
!3527 = !DILocation(line: 1101, column: 27, scope: !3524)
!3528 = !DILocation(line: 1103, column: 32, scope: !3529)
!3529 = distinct !DILexicalBlock(scope: !3524, file: !580, line: 1103, column: 25)
!3530 = !DILocation(line: 1103, column: 25, scope: !3529)
!3531 = !DILocation(line: 1103, column: 35, scope: !3529)
!3532 = !DILocation(line: 1103, column: 43, scope: !3529)
!3533 = !DILocation(line: 1103, column: 25, scope: !3524)
!3534 = !DILocation(line: 1103, column: 56, scope: !3535)
!3535 = !DILexicalBlockFile(scope: !3529, file: !580, discriminator: 1)
!3536 = !DILocation(line: 1103, column: 49, scope: !3535)
!3537 = !DILocation(line: 1103, column: 59, scope: !3535)
!3538 = !DILocation(line: 1103, column: 76, scope: !3535)
!3539 = !DILocation(line: 1104, column: 32, scope: !3540)
!3540 = distinct !DILexicalBlock(scope: !3524, file: !580, line: 1104, column: 25)
!3541 = !DILocation(line: 1104, column: 25, scope: !3540)
!3542 = !DILocation(line: 1104, column: 35, scope: !3540)
!3543 = !DILocation(line: 1104, column: 43, scope: !3540)
!3544 = !DILocation(line: 1104, column: 25, scope: !3524)
!3545 = !DILocation(line: 1104, column: 56, scope: !3546)
!3546 = !DILexicalBlockFile(scope: !3540, file: !580, discriminator: 1)
!3547 = !DILocation(line: 1104, column: 49, scope: !3546)
!3548 = !DILocation(line: 1104, column: 59, scope: !3546)
!3549 = !DILocation(line: 1104, column: 81, scope: !3546)
!3550 = !DILocation(line: 1105, column: 50, scope: !3524)
!3551 = !DILocation(line: 1105, column: 43, scope: !3524)
!3552 = !DILocation(line: 1105, column: 53, scope: !3524)
!3553 = !DILocation(line: 1105, column: 61, scope: !3524)
!3554 = !DILocation(line: 1105, column: 21, scope: !3524)
!3555 = !DILocation(line: 1105, column: 28, scope: !3524)
!3556 = !DILocation(line: 1105, column: 31, scope: !3524)
!3557 = !DILocation(line: 1105, column: 66, scope: !3524)
!3558 = !DILocation(line: 1106, column: 51, scope: !3524)
!3559 = !DILocation(line: 1106, column: 44, scope: !3524)
!3560 = !DILocation(line: 1106, column: 54, scope: !3524)
!3561 = !DILocation(line: 1106, column: 75, scope: !3524)
!3562 = !DILocation(line: 1106, column: 68, scope: !3524)
!3563 = !DILocation(line: 1106, column: 78, scope: !3524)
!3564 = !DILocation(line: 1106, column: 86, scope: !3524)
!3565 = !DILocation(line: 1106, column: 64, scope: !3524)
!3566 = !DILocation(line: 1106, column: 43, scope: !3524)
!3567 = !DILocation(line: 1106, column: 103, scope: !3568)
!3568 = !DILexicalBlockFile(scope: !3524, file: !580, discriminator: 1)
!3569 = !DILocation(line: 1106, column: 96, scope: !3568)
!3570 = !DILocation(line: 1106, column: 106, scope: !3568)
!3571 = !DILocation(line: 1106, column: 43, scope: !3568)
!3572 = !DILocation(line: 1106, column: 127, scope: !3573)
!3573 = !DILexicalBlockFile(scope: !3524, file: !580, discriminator: 2)
!3574 = !DILocation(line: 1106, column: 120, scope: !3573)
!3575 = !DILocation(line: 1106, column: 130, scope: !3573)
!3576 = !DILocation(line: 1106, column: 138, scope: !3573)
!3577 = !DILocation(line: 1106, column: 43, scope: !3573)
!3578 = !DILocation(line: 1106, column: 43, scope: !3579)
!3579 = !DILexicalBlockFile(scope: !3524, file: !580, discriminator: 3)
!3580 = !DILocation(line: 1106, column: 28, scope: !3579)
!3581 = !DILocation(line: 1106, column: 21, scope: !3579)
!3582 = !DILocation(line: 1106, column: 31, scope: !3579)
!3583 = !DILocation(line: 1106, column: 40, scope: !3579)
!3584 = !DILocation(line: 1107, column: 17, scope: !3524)
!3585 = !DILocation(line: 1108, column: 24, scope: !3428)
!3586 = !DILocation(line: 1108, column: 17, scope: !3428)
!3587 = !DILocation(line: 1108, column: 27, scope: !3428)
!3588 = !DILocation(line: 1108, column: 31, scope: !3428)
!3589 = !DILocation(line: 1109, column: 13, scope: !3428)
!3590 = !DILocation(line: 1110, column: 17, scope: !3591)
!3591 = distinct !DILexicalBlock(scope: !3406, file: !580, line: 1110, column: 17)
!3592 = !DILocation(line: 1110, column: 23, scope: !3591)
!3593 = !DILocation(line: 1110, column: 37, scope: !3591)
!3594 = !DILocation(line: 1110, column: 40, scope: !3595)
!3595 = !DILexicalBlockFile(scope: !3591, file: !580, discriminator: 1)
!3596 = !DILocation(line: 1110, column: 46, scope: !3595)
!3597 = !DILocation(line: 1110, column: 17, scope: !3595)
!3598 = !DILocation(line: 1112, column: 40, scope: !3599)
!3599 = distinct !DILexicalBlock(scope: !3591, file: !580, line: 1110, column: 61)
!3600 = !DILocation(line: 1112, column: 46, scope: !3599)
!3601 = !DILocation(line: 1112, column: 51, scope: !3599)
!3602 = !DILocation(line: 1112, column: 39, scope: !3599)
!3603 = !DILocation(line: 1112, column: 24, scope: !3599)
!3604 = !DILocation(line: 1112, column: 17, scope: !3599)
!3605 = !DILocation(line: 1112, column: 27, scope: !3599)
!3606 = !DILocation(line: 1112, column: 37, scope: !3599)
!3607 = !DILocation(line: 1113, column: 24, scope: !3599)
!3608 = !DILocation(line: 1113, column: 17, scope: !3599)
!3609 = !DILocation(line: 1113, column: 27, scope: !3599)
!3610 = !DILocation(line: 1113, column: 31, scope: !3599)
!3611 = !DILocation(line: 1114, column: 24, scope: !3599)
!3612 = !DILocation(line: 1114, column: 17, scope: !3599)
!3613 = !DILocation(line: 1114, column: 27, scope: !3599)
!3614 = !DILocation(line: 1114, column: 40, scope: !3599)
!3615 = !DILocation(line: 1115, column: 13, scope: !3599)
!3616 = !DILocation(line: 1116, column: 21, scope: !3617)
!3617 = distinct !DILexicalBlock(scope: !3618, file: !580, line: 1116, column: 21)
!3618 = distinct !DILexicalBlock(scope: !3591, file: !580, line: 1115, column: 20)
!3619 = !DILocation(line: 1116, column: 21, scope: !3618)
!3620 = !DILocation(line: 1117, column: 56, scope: !3617)
!3621 = !DILocation(line: 1117, column: 62, scope: !3617)
!3622 = !DILocation(line: 1117, column: 43, scope: !3617)
!3623 = !DILocation(line: 1117, column: 28, scope: !3617)
!3624 = !DILocation(line: 1117, column: 21, scope: !3617)
!3625 = !DILocation(line: 1117, column: 31, scope: !3617)
!3626 = !DILocation(line: 1117, column: 41, scope: !3617)
!3627 = !DILocation(line: 1119, column: 28, scope: !3617)
!3628 = !DILocation(line: 1119, column: 21, scope: !3617)
!3629 = !DILocation(line: 1119, column: 31, scope: !3617)
!3630 = !DILocation(line: 1119, column: 41, scope: !3617)
!3631 = !DILocation(line: 1121, column: 9, scope: !3406)
!3632 = !DILocation(line: 1122, column: 5, scope: !3382)
!3633 = !DILocation(line: 1060, column: 32, scope: !3634)
!3634 = !DILexicalBlockFile(scope: !3377, file: !580, discriminator: 2)
!3635 = !DILocation(line: 1060, column: 5, scope: !3634)
!3636 = distinct !{!3636, !3637}
!3637 = !DILocation(line: 1060, column: 5, scope: !3257)
!3638 = !DILocation(line: 1123, column: 12, scope: !3257)
!3639 = !DILocation(line: 1123, column: 5, scope: !3257)
!3640 = !DILocalVariable(name: "sample", arg: 1, scope: !655, file: !580, line: 1196, type: !631)
!3641 = !DILocation(line: 1196, column: 41, scope: !655)
!3642 = !DILocalVariable(name: "v", arg: 2, scope: !655, file: !580, line: 1196, type: !442)
!3643 = !DILocation(line: 1196, column: 62, scope: !655)
!3644 = !DILocalVariable(name: "maxv", arg: 3, scope: !655, file: !580, line: 1196, type: !442)
!3645 = !DILocation(line: 1196, column: 78, scope: !655)
!3646 = !DILocalVariable(name: "s64", scope: !655, file: !580, line: 1199, type: !206)
!3647 = !DILocation(line: 1199, column: 13, scope: !655)
!3648 = !DILocation(line: 1199, column: 19, scope: !655)
!3649 = !DILocation(line: 1200, column: 14, scope: !655)
!3650 = !DILocation(line: 1200, column: 16, scope: !655)
!3651 = !DILocation(line: 1200, column: 20, scope: !655)
!3652 = !DILocation(line: 1200, column: 26, scope: !655)
!3653 = !DILocation(line: 1200, column: 24, scope: !655)
!3654 = !DILocation(line: 1200, column: 11, scope: !655)
!3655 = !DILocation(line: 1200, column: 7, scope: !655)
!3656 = !DILocation(line: 1201, column: 22, scope: !655)
!3657 = !DILocation(line: 1201, column: 28, scope: !655)
!3658 = !DILocation(line: 1201, column: 26, scope: !655)
!3659 = !DILocation(line: 1201, column: 30, scope: !655)
!3660 = !DILocation(line: 1201, column: 12, scope: !655)
!3661 = !DILocation(line: 1201, column: 5, scope: !655)
!3662 = distinct !DISubprogram(name: "hdcd_detect_reset", scope: !580, file: !580, line: 1471, type: !1469, isLocal: true, isDefinition: true, scopeLine: 1471, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!3663 = !DILocalVariable(name: "detect", arg: 1, scope: !3662, file: !580, line: 1471, type: !1471)
!3664 = !DILocation(line: 1471, column: 52, scope: !3662)
!3665 = !DILocation(line: 1472, column: 5, scope: !3662)
!3666 = !DILocation(line: 1472, column: 13, scope: !3662)
!3667 = !DILocation(line: 1472, column: 27, scope: !3662)
!3668 = !DILocation(line: 1473, column: 5, scope: !3662)
!3669 = !DILocation(line: 1473, column: 13, scope: !3662)
!3670 = !DILocation(line: 1473, column: 25, scope: !3662)
!3671 = !DILocation(line: 1474, column: 5, scope: !3662)
!3672 = !DILocation(line: 1474, column: 13, scope: !3662)
!3673 = !DILocation(line: 1474, column: 27, scope: !3662)
!3674 = !DILocation(line: 1475, column: 5, scope: !3662)
!3675 = !DILocation(line: 1475, column: 13, scope: !3662)
!3676 = !DILocation(line: 1475, column: 20, scope: !3662)
!3677 = !DILocation(line: 1476, column: 5, scope: !3662)
!3678 = !DILocation(line: 1476, column: 13, scope: !3662)
!3679 = !DILocation(line: 1476, column: 25, scope: !3662)
!3680 = !DILocation(line: 1477, column: 5, scope: !3662)
!3681 = !DILocation(line: 1477, column: 13, scope: !3662)
!3682 = !DILocation(line: 1477, column: 35, scope: !3662)
!3683 = !DILocation(line: 1478, column: 5, scope: !3662)
!3684 = !DILocation(line: 1478, column: 13, scope: !3662)
!3685 = !DILocation(line: 1478, column: 33, scope: !3662)
!3686 = !DILocation(line: 1479, column: 5, scope: !3662)
!3687 = !DILocation(line: 1479, column: 13, scope: !3662)
!3688 = !DILocation(line: 1479, column: 29, scope: !3662)
!3689 = !DILocation(line: 1480, column: 5, scope: !3662)
!3690 = !DILocation(line: 1480, column: 13, scope: !3662)
!3691 = !DILocation(line: 1480, column: 27, scope: !3662)
!3692 = !DILocation(line: 1481, column: 1, scope: !3662)
!3693 = distinct !DISubprogram(name: "hdcd_reset", scope: !580, file: !580, line: 1012, type: !3694, isLocal: true, isDefinition: true, scopeLine: 1013, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !652)
!3694 = !DISubroutineType(types: !3695)
!3695 = !{null, !817, !442, !442}
!3696 = !DILocalVariable(name: "state", arg: 1, scope: !3693, file: !580, line: 1012, type: !817)
!3697 = !DILocation(line: 1012, column: 36, scope: !3693)
!3698 = !DILocalVariable(name: "rate", arg: 2, scope: !3693, file: !580, line: 1012, type: !442)
!3699 = !DILocation(line: 1012, column: 52, scope: !3693)
!3700 = !DILocalVariable(name: "cdt_ms", arg: 3, scope: !3693, file: !580, line: 1012, type: !442)
!3701 = !DILocation(line: 1012, column: 67, scope: !3693)
!3702 = !DILocalVariable(name: "i", scope: !3693, file: !580, line: 1014, type: !200)
!3703 = !DILocation(line: 1014, column: 9, scope: !3693)
!3704 = !DILocalVariable(name: "sustain_reset", scope: !3693, file: !580, line: 1015, type: !316)
!3705 = !DILocation(line: 1015, column: 14, scope: !3693)
!3706 = !DILocation(line: 1015, column: 40, scope: !3693)
!3707 = !DILocation(line: 1015, column: 30, scope: !3693)
!3708 = !DILocation(line: 1015, column: 49, scope: !3693)
!3709 = !DILocation(line: 1015, column: 47, scope: !3693)
!3710 = !DILocation(line: 1015, column: 54, scope: !3693)
!3711 = !DILocation(line: 1017, column: 5, scope: !3693)
!3712 = !DILocation(line: 1017, column: 12, scope: !3693)
!3713 = !DILocation(line: 1017, column: 19, scope: !3693)
!3714 = !DILocation(line: 1018, column: 5, scope: !3693)
!3715 = !DILocation(line: 1018, column: 12, scope: !3693)
!3716 = !DILocation(line: 1018, column: 22, scope: !3693)
!3717 = !DILocation(line: 1019, column: 5, scope: !3693)
!3718 = !DILocation(line: 1019, column: 12, scope: !3693)
!3719 = !DILocation(line: 1019, column: 16, scope: !3693)
!3720 = !DILocation(line: 1020, column: 5, scope: !3693)
!3721 = !DILocation(line: 1020, column: 12, scope: !3693)
!3722 = !DILocation(line: 1020, column: 20, scope: !3693)
!3723 = !DILocation(line: 1021, column: 5, scope: !3693)
!3724 = !DILocation(line: 1021, column: 12, scope: !3693)
!3725 = !DILocation(line: 1021, column: 25, scope: !3693)
!3726 = !DILocation(line: 1022, column: 28, scope: !3693)
!3727 = !DILocation(line: 1022, column: 5, scope: !3693)
!3728 = !DILocation(line: 1022, column: 12, scope: !3693)
!3729 = !DILocation(line: 1022, column: 26, scope: !3693)
!3730 = !DILocation(line: 1023, column: 5, scope: !3693)
!3731 = !DILocation(line: 1023, column: 12, scope: !3693)
!3732 = !DILocation(line: 1023, column: 20, scope: !3693)
!3733 = !DILocation(line: 1025, column: 5, scope: !3693)
!3734 = !DILocation(line: 1025, column: 12, scope: !3693)
!3735 = !DILocation(line: 1025, column: 26, scope: !3693)
!3736 = !DILocation(line: 1026, column: 5, scope: !3693)
!3737 = !DILocation(line: 1026, column: 12, scope: !3693)
!3738 = !DILocation(line: 1026, column: 33, scope: !3693)
!3739 = !DILocation(line: 1027, column: 5, scope: !3693)
!3740 = !DILocation(line: 1027, column: 12, scope: !3693)
!3741 = !DILocation(line: 1027, column: 26, scope: !3693)
!3742 = !DILocation(line: 1028, column: 5, scope: !3693)
!3743 = !DILocation(line: 1028, column: 12, scope: !3693)
!3744 = !DILocation(line: 1028, column: 37, scope: !3693)
!3745 = !DILocation(line: 1029, column: 5, scope: !3693)
!3746 = !DILocation(line: 1029, column: 12, scope: !3693)
!3747 = !DILocation(line: 1029, column: 26, scope: !3693)
!3748 = !DILocation(line: 1030, column: 5, scope: !3693)
!3749 = !DILocation(line: 1030, column: 12, scope: !3693)
!3750 = !DILocation(line: 1030, column: 36, scope: !3693)
!3751 = !DILocation(line: 1031, column: 5, scope: !3693)
!3752 = !DILocation(line: 1031, column: 12, scope: !3693)
!3753 = !DILocation(line: 1031, column: 30, scope: !3693)
!3754 = !DILocation(line: 1032, column: 5, scope: !3693)
!3755 = !DILocation(line: 1032, column: 12, scope: !3693)
!3756 = !DILocation(line: 1032, column: 35, scope: !3693)
!3757 = !DILocation(line: 1033, column: 11, scope: !3758)
!3758 = distinct !DILexicalBlock(scope: !3693, file: !580, line: 1033, column: 5)
!3759 = !DILocation(line: 1033, column: 9, scope: !3758)
!3760 = !DILocation(line: 1033, column: 16, scope: !3761)
!3761 = !DILexicalBlockFile(scope: !3762, file: !580, discriminator: 1)
!3762 = distinct !DILexicalBlock(scope: !3758, file: !580, line: 1033, column: 5)
!3763 = !DILocation(line: 1033, column: 18, scope: !3761)
!3764 = !DILocation(line: 1033, column: 5, scope: !3761)
!3765 = !DILocation(line: 1033, column: 48, scope: !3766)
!3766 = !DILexicalBlockFile(scope: !3762, file: !580, discriminator: 2)
!3767 = !DILocation(line: 1033, column: 29, scope: !3766)
!3768 = !DILocation(line: 1033, column: 36, scope: !3766)
!3769 = !DILocation(line: 1033, column: 51, scope: !3766)
!3770 = !DILocation(line: 1033, column: 25, scope: !3771)
!3771 = !DILexicalBlockFile(scope: !3762, file: !580, discriminator: 3)
!3772 = !DILocation(line: 1033, column: 5, scope: !3771)
!3773 = distinct !{!3773, !3774}
!3774 = !DILocation(line: 1033, column: 5, scope: !3693)
!3775 = !DILocation(line: 1034, column: 5, scope: !3693)
!3776 = !DILocation(line: 1034, column: 12, scope: !3693)
!3777 = !DILocation(line: 1034, column: 21, scope: !3693)
!3778 = !DILocation(line: 1035, column: 5, scope: !3693)
!3779 = !DILocation(line: 1035, column: 12, scope: !3693)
!3780 = !DILocation(line: 1035, column: 34, scope: !3693)
!3781 = !DILocation(line: 1037, column: 19, scope: !3693)
!3782 = !DILocation(line: 1037, column: 5, scope: !3693)
!3783 = !DILocation(line: 1037, column: 12, scope: !3693)
!3784 = !DILocation(line: 1037, column: 17, scope: !3693)
!3785 = !DILocation(line: 1038, column: 5, scope: !3693)
!3786 = !DILocation(line: 1038, column: 12, scope: !3693)
!3787 = !DILocation(line: 1038, column: 21, scope: !3693)
!3788 = !DILocation(line: 1039, column: 1, scope: !3693)
