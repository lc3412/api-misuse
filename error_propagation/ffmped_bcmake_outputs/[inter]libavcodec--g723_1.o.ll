; ModuleID = '/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[inter]libavcodec--g723_1.o.i'
source_filename = "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[inter]libavcodec--g723_1.o.i"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.G723_1_Subframe = type { i32, i32, i32, i32, i32, i32, i32 }

@adaptive_cb_gain85 = internal constant [1700 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 800, i16 1496, i16 167, i16 -256, i16 -338, i16 -39, i16 -136, i16 -1, i16 -4, i16 -6, i16 -73, i16 -8, i16 -15, i16 12, i16 23, i16 2, i16 16, i16 30, i16 3, i16 -5, i16 -462, i16 -686, i16 493, i16 2575, i16 311, i16 -13, i16 -28, i16 -14, i16 -404, i16 -5, i16 -19, i16 13, i16 20, i16 72, i16 107, i16 -77, i16 8, i16 13, i16 -9, i16 -48, i16 1483, i16 144, i16 784, i16 928, i16 1243, i16 -134, i16 -1, i16 -37, i16 -52, i16 -94, i16 -13, i16 -71, i16 -6, i16 -84, i16 -8, i16 -44, i16 -112, i16 -10, i16 -59, i16 -70, i16 -77, i16 275, i16 3522, i16 1056, i16 -1254, i16 0, i16 -4, i16 -757, i16 -68, i16 -95, i16 1, i16 16, i16 -59, i16 4, i16 -17, i16 -227, i16 -5, i16 21, i16 269, i16 80, i16 -125, i16 -40, i16 -264, i16 381, i16 5027, i16 0, i16 0, i16 -4, i16 -8, i16 -1542, i16 0, i16 -2, i16 0, i16 2, i16 0, i16 6, i16 38, i16 12, i16 81, i16 -117, i16 138, i16 332, i16 2215, i16 2574, i16 1339, i16 -1, i16 -6, i16 -299, i16 -404, i16 -109, i16 -2, i16 -18, i16 -44, i16 -21, i16 -52, i16 -348, i16 -11, i16 -27, i16 -181, i16 -210, i16 3685, i16 2883, i16 -887, i16 866, i16 -1639, i16 -828, i16 -507, i16 -48, i16 -45, i16 -164, i16 -648, i16 199, i16 156, i16 -194, i16 -152, i16 46, i16 368, i16 288, i16 -88, i16 86, i16 1396, i16 2146, i16 2235, i16 345, i16 942, i16 -118, i16 -281, i16 -305, i16 -7, i16 -54, i16 -182, i16 -190, i16 -292, i16 -29, i16 -45, i16 -47, i16 -80, i16 -123, i16 -128, i16 -19, i16 13, i16 4475, i16 3549, i16 -804, i16 -655, i16 0, i16 -1222, i16 -768, i16 -39, i16 -26, i16 -3, i16 -2, i16 -969, i16 0, i16 219, i16 174, i16 0, i16 179, i16 141, i16 -32, i16 -724, i16 254, i16 242, i16 6049, i16 2462, i16 -32, i16 -3, i16 -3, i16 -2233, i16 -370, i16 11, i16 10, i16 -3, i16 267, i16 -94, i16 -89, i16 108, i16 -38, i16 -36, i16 -909, i16 626, i16 -1713, i16 6121, i16 4561, i16 -1061, i16 -23, i16 -179, i16 -2287, i16 -1270, i16 -68, i16 65, i16 -233, i16 640, i16 -174, i16 477, i16 -1704, i16 40, i16 -111, i16 396, i16 295, i16 -350, i16 1391, i16 7985, i16 511, i16 -405, i16 -7, i16 -118, i16 -3892, i16 -15, i16 -10, i16 29, i16 170, i16 -678, i16 10, i16 -43, i16 -249, i16 -8, i16 34, i16 197, i16 12, i16 3144, i16 -529, i16 608, i16 2530, i16 3878, i16 -603, i16 -17, i16 -22, i16 -390, i16 -918, i16 101, i16 -116, i16 19, i16 -485, i16 81, i16 -93, i16 -744, i16 125, i16 -144, i16 -599, i16 2589, i16 -689, i16 3045, i16 5603, i16 -404, i16 -409, i16 -29, i16 -566, i16 -1916, i16 -10, i16 108, i16 -481, i16 128, i16 -885, i16 235, i16 -1041, i16 63, i16 -17, i16 75, i16 138, i16 3107, i16 513, i16 1374, i16 -3594, i16 -4922, i16 -589, i16 -16, i16 -115, i16 -788, i16 -1478, i16 -97, i16 -260, i16 -43, i16 681, i16 112, i16 301, i16 933, i16 154, i16 413, i16 -1079, i16 2468, i16 6010, i16 1107, i16 -390, i16 1961, i16 -372, i16 -2204, i16 -74, i16 -9, i16 -234, i16 -905, i16 -166, i16 -406, i16 58, i16 143, i16 26, i16 -295, i16 -719, i16 -132, i16 46, i16 4773, i16 2766, i16 2368, i16 4862, i16 -4044, i16 -1390, i16 -467, i16 -342, i16 -1443, i16 -998, i16 -806, i16 -690, i16 -399, i16 -1416, i16 -821, i16 -702, i16 1178, i16 682, i16 584, i16 1200, i16 1665, i16 -1879, i16 1443, i16 1701, i16 8562, i16 -169, i16 -215, i16 -127, i16 -176, i16 -4475, i16 190, i16 -146, i16 165, i16 -172, i16 195, i16 -149, i16 -870, i16 982, i16 -754, i16 -889, i16 2716, i16 9011, i16 -1007, i16 755, i16 -1785, i16 -450, i16 -4956, i16 -61, i16 -34, i16 -194, i16 -1493, i16 167, i16 554, i16 -125, i16 -415, i16 46, i16 296, i16 982, i16 -109, i16 82, i16 -2727, i16 7548, i16 1285, i16 938, i16 3420, i16 -453, i16 -3478, i16 -100, i16 -53, i16 -714, i16 1256, i16 213, i16 -592, i16 156, i16 -432, i16 -73, i16 569, i16 -1576, i16 -268, i16 -196, i16 3677, i16 882, i16 4050, i16 1202, i16 2323, i16 -825, i16 -47, i16 -1001, i16 -88, i16 -329, i16 -198, i16 -909, i16 -218, i16 -269, i16 -64, i16 -297, i16 -521, i16 -125, i16 -574, i16 -170, i16 2046, i16 -753, i16 122, i16 10102, i16 603, i16 -255, i16 -34, i16 0, i16 -6229, i16 -22, i16 94, i16 -15, i16 5, i16 -1261, i16 464, i16 -75, i16 -75, i16 27, i16 -4, i16 -372, i16 449, i16 -1815, i16 10690, i16 3870, i16 -527, i16 -12, i16 -201, i16 -6976, i16 -914, i16 -16, i16 49, i16 -293, i16 1184, i16 -106, i16 428, i16 -2525, i16 14, i16 -58, i16 344, i16 124, i16 -941, i16 2352, i16 5049, i16 3650, i16 2637, i16 -54, i16 -337, i16 -1556, i16 -813, i16 -424, i16 135, i16 290, i16 -725, i16 209, i16 -524, i16 -1125, i16 151, i16 -378, i16 -812, i16 -587, i16 -1879, i16 796, i16 3117, i16 9569, i16 -404, i16 -215, i16 -38, i16 -593, i16 -5589, i16 -9, i16 91, i16 357, i16 -151, i16 1097, i16 -464, i16 -1821, i16 -46, i16 19, i16 76, i16 236, i16 -1715, i16 2043, i16 -2096, i16 9946, i16 4001, i16 -179, i16 -254, i16 -268, i16 -6038, i16 -977, i16 213, i16 -219, i16 261, i16 1041, i16 -1240, i16 1272, i16 418, i16 -498, i16 511, i16 -2429, i16 -5772, i16 -618, i16 -3921, i16 284, i16 -3155, i16 -2033, i16 -23, i16 -938, i16 -4, i16 -607, i16 -218, i16 -1381, i16 -148, i16 100, i16 10, i16 68, i16 -1111, i16 -119, i16 -755, i16 54, i16 382, i16 4748, i16 8003, i16 -2064, i16 2198, i16 -8, i16 -1376, i16 -3909, i16 -260, i16 -294, i16 -110, i16 -186, i16 -2319, i16 48, i16 598, i16 1008, i16 -51, i16 -637, i16 -1073, i16 277, i16 -867, i16 3015, i16 11926, i16 -1675, i16 947, i16 -45, i16 -555, i16 -8681, i16 -171, i16 -54, i16 159, i16 631, i16 -2195, i16 -88, i16 308, i16 1219, i16 50, i16 -174, i16 -690, i16 96, i16 -4933, i16 -432, i16 6757, i16 3771, i16 1352, i16 -1485, i16 -11, i16 -2786, i16 -867, i16 -111, i16 -130, i16 2034, i16 178, i16 1135, i16 99, i16 -1555, i16 407, i16 35, i16 -557, i16 -311, i16 152, i16 9726, i16 4231, i16 -1928, i16 1490, i16 -1, i16 -5774, i16 -1092, i16 -226, i16 -135, i16 -90, i16 -39, i16 -2511, i16 17, i16 1144, i16 498, i16 -13, i16 -884, i16 -384, i16 175, i16 2512, i16 193, i16 9033, i16 5361, i16 -3148, i16 -385, i16 -2, i16 -4980, i16 -1754, i16 -605, i16 -29, i16 -1385, i16 -106, i16 -822, i16 -63, i16 -2956, i16 482, i16 37, i16 1735, i16 1030, i16 8464, i16 2844, i16 12, i16 549, i16 2132, i16 -4373, i16 -493, i16 0, i16 -18, i16 -277, i16 -1469, i16 -6, i16 -2, i16 -284, i16 -95, i16 0, i16 -1101, i16 -370, i16 -1, i16 -71, i16 2141, i16 -2602, i16 7166, i16 9046, i16 -1350, i16 -279, i16 -413, i16 -3134, i16 -4994, i16 -111, i16 340, i16 -936, i16 1138, i16 -1182, i16 1436, i16 -3957, i16 176, i16 -214, i16 590, i16 745, i16 -244, i16 278, i16 13307, i16 1227, i16 -161, i16 -3, i16 -4, i16 -10808, i16 -91, i16 -1, i16 4, i16 198, i16 -226, i16 18, i16 -20, i16 -997, i16 -2, i16 2, i16 131, i16 12, i16 -1947, i16 8217, i16 6269, i16 917, i16 -2559, i16 -231, i16 -4121, i16 -2399, i16 -51, i16 -399, i16 976, i16 745, i16 -3144, i16 108, i16 -460, i16 -350, i16 -304, i16 1283, i16 979, i16 143, i16 -1810, i16 2061, i16 -2781, i16 6056, i16 10058, i16 -200, i16 -259, i16 -472, i16 -2238, i16 -6174, i16 227, i16 -307, i16 349, i16 669, i16 -761, i16 1028, i16 1111, i16 -1265, i16 1707, i16 -3717, i16 7827, i16 9161, i16 -3409, i16 2473, i16 -1510, i16 -3739, i16 -5122, i16 -709, i16 -373, i16 -139, i16 -4376, i16 1628, i16 1906, i16 -1181, i16 -1382, i16 514, i16 721, i16 844, i16 -314, i16 228, i16 -1430, i16 8313, i16 9541, i16 -2955, i16 1626, i16 -124, i16 -4218, i16 -5556, i16 -533, i16 -161, i16 725, i16 832, i16 -4841, i16 -257, i16 1499, i16 1721, i16 142, i16 -825, i16 -947, i16 293, i16 2819, i16 -4247, i16 5391, i16 8673, i16 2756, i16 -485, i16 -1101, i16 -1774, i16 -4591, i16 -463, i16 730, i16 -927, i16 1397, i16 -1492, i16 2248, i16 -2854, i16 -474, i16 714, i16 -907, i16 -1459, i16 141, i16 14552, i16 690, i16 257, i16 -112, i16 -1, i16 -12926, i16 -29, i16 -4, i16 0, i16 -125, i16 -5, i16 -613, i16 -2, i16 -228, i16 -10, i16 0, i16 99, i16 4, i16 1, i16 11938, i16 -1859, i16 1806, i16 -962, i16 -884, i16 -8699, i16 -211, i16 -199, i16 -56, i16 -47, i16 1355, i16 -1316, i16 205, i16 701, i16 -109, i16 106, i16 644, i16 -100, i16 97, i16 -51, i16 3728, i16 1982, i16 2264, i16 4584, i16 3131, i16 -848, i16 -239, i16 -312, i16 -1282, i16 -598, i16 -451, i16 -515, i16 -273, i16 -1043, i16 -554, i16 -633, i16 -712, i16 -378, i16 -432, i16 -876, i16 -1181, i16 766, i16 720, i16 14303, i16 -216, i16 -85, i16 -35, i16 -31, i16 -12486, i16 -2, i16 55, i16 51, i16 -33, i16 1031, i16 -668, i16 -628, i16 -15, i16 10, i16 9, i16 189, i16 -4385, i16 4826, i16 10112, i16 1569, i16 3388, i16 -1173, i16 -1421, i16 -6242, i16 -150, i16 -700, i16 1291, i16 2706, i16 -2979, i16 420, i16 -462, i16 -969, i16 906, i16 -998, i16 -2091, i16 -324, i16 -448, i16 1932, i16 15591, i16 -1842, i16 657, i16 -12, i16 -227, i16 -14837, i16 -207, i16 -26, i16 52, i16 427, i16 -1838, i16 -50, i16 217, i16 1753, i16 18, i16 -77, i16 -626, i16 74, i16 -4141, i16 1844, i16 3962, i16 5517, i16 6220, i16 -1046, i16 -207, i16 -958, i16 -1858, i16 -2361, i16 466, i16 1001, i16 -446, i16 1394, i16 -621, i16 -1334, i16 1572, i16 -700, i16 -1504, i16 -2094, i16 729, i16 -2299, i16 14755, i16 3657, i16 -952, i16 -32, i16 -322, i16 -13288, i16 -816, i16 -55, i16 102, i16 -656, i16 2071, i16 -162, i16 513, i16 -3294, i16 42, i16 -133, i16 857, i16 212, i16 -1385, i16 5801, i16 13339, i16 -3137, i16 1344, i16 -117, i16 -2054, i16 -10861, i16 -600, i16 -110, i16 490, i16 1127, i16 -4723, i16 -265, i16 1111, i16 2554, i16 113, i16 -476, i16 -1094, i16 257, i16 4710, i16 9661, i16 1073, i16 -2467, i16 3274, i16 -1354, i16 -5697, i16 -70, i16 -371, i16 -654, i16 -2777, i16 -308, i16 -633, i16 709, i16 1455, i16 161, i16 -941, i16 -1930, i16 -214, i16 493, i16 1843, i16 -3624, i16 12422, i16 6898, i16 -1559, i16 -207, i16 -802, i16 -9419, i16 -2904, i16 -148, i16 407, i16 -1397, i16 2748, i16 -775, i16 1526, i16 -5230, i16 175, i16 -344, i16 1182, i16 656, i16 1433, i16 2394, i16 2507, i16 1380, i16 8780, i16 -125, i16 -349, i16 -383, i16 -116, i16 -4705, i16 -209, i16 -219, i16 -366, i16 -120, i16 -201, i16 -211, i16 -768, i16 -1283, i16 -1343, i16 -740, i16 -1712, i16 12915, i16 5883, i16 -2197, i16 991, i16 -179, i16 -10181, i16 -2112, i16 -294, i16 -60, i16 1350, i16 615, i16 -4638, i16 -229, i16 1732, i16 789, i16 103, i16 -781, i16 -356, i16 133, i16 15072, i16 2158, i16 -1245, i16 910, i16 -496, i16 -13865, i16 -284, i16 -94, i16 -50, i16 -15, i16 -1986, i16 1145, i16 164, i16 -837, i16 -119, i16 69, i16 456, i16 65, i16 -37, i16 27, i16 4655, i16 7319, i16 4916, i16 586, i16 -3381, i16 -1322, i16 -3270, i16 -1475, i16 -20, i16 -697, i16 -2079, i16 -1396, i16 -2196, i16 -166, i16 -261, i16 -175, i16 960, i16 1510, i16 1014, i16 120, i16 1191, i16 -2140, i16 5120, i16 13498, i16 -1418, i16 -86, i16 -279, i16 -1600, i16 -11121, i16 -122, i16 155, i16 -372, i16 669, i16 -981, i16 1763, i16 -4218, i16 103, i16 -185, i16 443, i16 1168, i16 -1530, i16 -817, i16 8191, i16 9632, i16 -1452, i16 -143, i16 -40, i16 -4095, i16 -5663, i16 -128, i16 -76, i16 765, i16 408, i16 900, i16 480, i16 -4815, i16 -135, i16 -72, i16 726, i16 854, i16 -3236, i16 607, i16 1696, i16 -2106, i16 11485, i16 -639, i16 -22, i16 -175, i16 -270, i16 -8051, i16 119, i16 335, i16 -62, i16 -416, i16 78, i16 218, i16 2268, i16 -425, i16 -1189, i16 1476, i16 3203, i16 -1903, i16 -837, i16 9679, i16 7057, i16 -626, i16 -221, i16 -42, i16 -5718, i16 -3039, i16 372, i16 163, i16 -97, i16 -1892, i16 1124, i16 494, i16 -1380, i16 819, i16 360, i16 -4169, i16 213, i16 -655, i16 17015, i16 620, i16 -384, i16 -2, i16 -26, i16 -17671, i16 -23, i16 -9, i16 8, i16 -221, i16 681, i16 -8, i16 24, i16 -644, i16 5, i16 -15, i16 399, i16 14, i16 5088, i16 35, i16 -3339, i16 3726, i16 8488, i16 -1580, i16 0, i16 -680, i16 -847, i16 -4397, i16 -10, i16 1037, i16 7, i16 -1157, i16 -8, i16 759, i16 -2636, i16 -18, i16 1730, i16 -1930, i16 -988, i16 1454, i16 -2688, i16 15039, i16 2682, i16 -59, i16 -129, i16 -441, i16 -13805, i16 -439, i16 87, i16 -162, i16 238, i16 907, i16 -1335, i16 2467, i16 161, i16 -238, i16 440, i16 -2462, i16 -4865, i16 -2842, i16 -53, i16 5495, i16 6523, i16 -1445, i16 -493, i16 0, i16 -1843, i16 -2597, i16 -844, i16 -16, i16 -9, i16 1632, i16 953, i16 18, i16 1937, i16 1131, i16 21, i16 -2188, i16 3076, i16 15069, i16 -2914, i16 1810, i16 -971, i16 -577, i16 -13860, i16 -518, i16 -200, i16 -57, i16 -2829, i16 547, i16 2680, i16 -339, i16 -1665, i16 322, i16 182, i16 893, i16 -172, i16 107, i16 1311, i16 5355, i16 11054, i16 2299, i16 -3654, i16 -105, i16 -1750, i16 -7458, i16 -322, i16 -814, i16 -428, i16 -885, i16 -3613, i16 -184, i16 -751, i16 -1551, i16 292, i16 1194, i16 2465, i16 512, i16 4035, i16 5619, i16 4618, i16 1815, i16 1912, i16 -994, i16 -1927, i16 -1301, i16 -201, i16 -223, i16 -1384, i16 -1137, i16 -1583, i16 -447, i16 -622, i16 -511, i16 -471, i16 -656, i16 -539, i16 -211, i16 -2131, i16 2754, i16 -4501, i16 12879, i16 7432, i16 -277, i16 -463, i16 -1236, i16 -10124, i16 -3371, i16 358, i16 -585, i16 756, i16 1675, i16 -2165, i16 3538, i16 967, i16 -1249, i16 2042, i16 -5842, i16 5618, i16 -515, i16 3219, i16 -4149, i16 4857, i16 -1926, i16 -16, i16 -632, i16 -1050, i16 -1440, i16 176, i16 -1104, i16 101, i16 1422, i16 -130, i16 815, i16 -1666, i16 152, i16 -954, i16 1230, i16 1838, i16 -1709, i16 1139, i16 16867, i16 716, i16 -206, i16 -178, i16 -79, i16 -17366, i16 -31, i16 191, i16 -127, i16 118, i16 -1892, i16 1759, i16 -1173, i16 -80, i16 74, i16 -49, i16 -737, i16 1978, i16 -3845, i16 10050, i16 11854, i16 -2492, i16 -238, i16 -902, i16 -6164, i16 -8576, i16 -379, i16 464, i16 -1213, i16 2358, i16 -1431, i16 2782, i16 -7271, i16 301, i16 -585, i16 1529, i16 1803, i16 -2600, i16 11246, i16 11289, i16 -3647, i16 1463, i16 -412, i16 -7720, i16 -7778, i16 -812, i16 -130, i16 1784, i16 1791, i16 -7749, i16 -578, i16 2504, i16 2513, i16 232, i16 -1004, i16 -1008, i16 325, i16 3442, i16 907, i16 2725, i16 8970, i16 3638, i16 -723, i16 -50, i16 -453, i16 -4911, i16 -808, i16 -190, i16 -572, i16 -150, i16 -1884, i16 -496, i16 -1492, i16 -764, i16 -201, i16 -605, i16 -1992, i16 -126, i16 17498, i16 3481, i16 -2003, i16 1090, i16 0, i16 -18689, i16 -739, i16 -244, i16 -72, i16 135, i16 26, i16 -3717, i16 -15, i16 2139, i16 425, i16 8, i16 -1165, i16 -231, i16 133, i16 -1814, i16 1048, i16 -2164, i16 4070, i16 16272, i16 -200, i16 -67, i16 -285, i16 -1011, i16 -16160, i16 116, i16 -239, i16 138, i16 450, i16 -260, i16 537, i16 1801, i16 -1041, i16 2149, i16 -4042, i16 9354, i16 12580, i16 -1883, i16 962, i16 -617, i16 -5341, i16 -9660, i16 -216, i16 -56, i16 -23, i16 -7183, i16 1075, i16 1446, i16 -549, i16 -738, i16 110, i16 352, i16 474, i16 -71, i16 36, i16 1708, i16 4199, i16 7387, i16 6335, i16 1003, i16 -178, i16 -1076, i16 -3330, i16 -2449, i16 -61, i16 -437, i16 -770, i16 -1893, i16 -660, i16 -1623, i16 -2856, i16 -104, i16 -257, i16 -452, i16 -388, i16 -2624, i16 5623, i16 17310, i16 -2353, i16 592, i16 -420, i16 -1930, i16 -18288, i16 -338, i16 -21, i16 900, i16 2772, i16 -5941, i16 -376, i16 807, i16 2486, i16 94, i16 -203, i16 -625, i16 85, i16 1211, i16 -850, i16 1193, i16 -1926, i16 15992, i16 -89, i16 -44, i16 -86, i16 -226, i16 -15609, i16 62, i16 -88, i16 61, i16 142, i16 -100, i16 140, i16 -1182, i16 830, i16 -1165, i16 1880, i16 3983, i16 -2054, i16 11506, i16 -19, i16 3622, i16 -968, i16 -257, i16 -8080, i16 0, i16 -801, i16 499, i16 -2797, i16 1442, i16 4, i16 -2, i16 13, i16 -880, i16 454, i16 -2544, i16 4, i16 -786, i16 -1354, i16 16092, i16 7246, i16 -1665, i16 -37, i16 -111, i16 -15805, i16 -3205, i16 -169, i16 -65, i16 772, i16 1330, i16 348, i16 599, i16 -7117, i16 -80, i16 -137, i16 1636, i16 736, i16 -4316, i16 -511, i16 6674, i16 11665, i16 4633, i16 -1137, i16 -15, i16 -2719, i16 -8305, i16 -1310, i16 -134, i16 1758, i16 208, i16 3073, i16 364, i16 -4752, i16 1220, i16 144, i16 -1887, i16 -3299, i16 7912, i16 4557, i16 1937, i16 1885, i16 7037, i16 -3821, i16 -1267, i16 -229, i16 -216, i16 -3022, i16 -2200, i16 -935, i16 -538, i16 -910, i16 -524, i16 -222, i16 -3398, i16 -1957, i16 -832, i16 -809, i16 3434, i16 2967, i16 5867, i16 8196, i16 8766, i16 -720, i16 -537, i16 -2101, i16 -4100, i16 -4690, i16 -622, i16 -1230, i16 -1062, i16 -1718, i16 -1484, i16 -2935, i16 -1837, i16 -1588, i16 -3139, i16 -4385, i16 5881, i16 9176, i16 8119, i16 3934, i16 3355, i16 -2111, i16 -5139, i16 -4023, i16 -944, i16 -687, i16 -3294, i16 -2914, i16 -4547, i16 -1412, i16 -2203, i16 -1949, i16 -1204, i16 -1879, i16 -1662, i16 -805], align 16
@adaptive_cb_gain170 = internal constant [3400 x i16] [i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 776, i16 212, i16 715, i16 670, i16 809, i16 -36, i16 -2, i16 -31, i16 -27, i16 -39, i16 -10, i16 -33, i16 -9, i16 -31, i16 -8, i16 -29, i16 -38, i16 -10, i16 -35, i16 -33, i16 1296, i16 1316, i16 -168, i16 -320, i16 -815, i16 -102, i16 -105, i16 -1, i16 -6, i16 -40, i16 -104, i16 13, i16 13, i16 25, i16 25, i16 -3, i16 64, i16 65, i16 -8, i16 -15, i16 -589, i16 680, i16 2478, i16 308, i16 -596, i16 -21, i16 -28, i16 -375, i16 -5, i16 -21, i16 24, i16 89, i16 -102, i16 11, i16 -12, i16 -46, i16 -21, i16 24, i16 90, i16 11, i16 -735, i16 -487, i16 -5, i16 2948, i16 468, i16 -33, i16 -14, i16 0, i16 -530, i16 -13, i16 -21, i16 0, i16 0, i16 132, i16 87, i16 0, i16 21, i16 13, i16 0, i16 -84, i16 1042, i16 1730, i16 1068, i16 333, i16 626, i16 -66, i16 -182, i16 -69, i16 -6, i16 -23, i16 -110, i16 -67, i16 -112, i16 -21, i16 -35, i16 -21, i16 -39, i16 -66, i16 -40, i16 -12, i16 486, i16 -769, i16 4074, i16 2825, i16 -1107, i16 -14, i16 -36, i16 -1013, i16 -487, i16 -74, i16 22, i16 -120, i16 191, i16 -83, i16 132, i16 -702, i16 32, i16 -52, i16 275, i16 191, i16 1521, i16 -767, i16 -124, i16 4320, i16 1026, i16 -141, i16 -35, i16 0, i16 -1139, i16 -64, i16 71, i16 11, i16 -5, i16 -401, i16 202, i16 32, i16 -95, i16 48, i16 7, i16 -270, i16 2425, i16 1267, i16 3439, i16 -91, i16 -1166, i16 -359, i16 -98, i16 -722, i16 0, i16 -83, i16 -187, i16 -509, i16 -266, i16 13, i16 7, i16 19, i16 172, i16 90, i16 244, i16 -6, i16 -1251, i16 975, i16 173, i16 4039, i16 2005, i16 -95, i16 -58, i16 -1, i16 -996, i16 -245, i16 74, i16 13, i16 -10, i16 308, i16 -240, i16 -42, i16 153, i16 -119, i16 -21, i16 -494, i16 1820, i16 632, i16 1322, i16 2062, i16 1031, i16 -202, i16 -24, i16 -106, i16 -259, i16 -64, i16 -70, i16 -146, i16 -51, i16 -229, i16 -79, i16 -166, i16 -114, i16 -39, i16 -83, i16 -129, i16 -447, i16 4904, i16 244, i16 -315, i16 -2038, i16 -12, i16 -1467, i16 -3, i16 -6, i16 -253, i16 134, i16 6, i16 -73, i16 -8, i16 94, i16 4, i16 -55, i16 610, i16 30, i16 -39, i16 -208, i16 -1102, i16 463, i16 -448, i16 5653, i16 -2, i16 -74, i16 -13, i16 -12, i16 -1950, i16 -14, i16 5, i16 31, i16 -5, i16 -30, i16 12, i16 71, i16 380, i16 -159, i16 154, i16 4739, i16 2600, i16 -1864, i16 856, i16 -1554, i16 -1371, i16 -412, i16 -212, i16 -44, i16 -147, i16 -752, i16 539, i16 295, i16 -247, i16 -135, i16 97, i16 449, i16 246, i16 -176, i16 81, i16 1894, i16 3533, i16 35, i16 -26, i16 2145, i16 -219, i16 -762, i16 0, i16 0, i16 -280, i16 -408, i16 -4, i16 -7, i16 3, i16 5, i16 0, i16 -248, i16 -462, i16 -4, i16 3, i16 -2699, i16 1841, i16 4072, i16 2443, i16 1582, i16 -444, i16 -207, i16 -1012, i16 -364, i16 -152, i16 303, i16 670, i16 -457, i16 402, i16 -274, i16 -607, i16 260, i16 -177, i16 -393, i16 -236, i16 -844, i16 3358, i16 6106, i16 -1059, i16 -537, i16 -43, i16 -688, i16 -2275, i16 -68, i16 -17, i16 173, i16 314, i16 -1251, i16 -54, i16 217, i16 395, i16 -27, i16 110, i16 200, i16 -34, i16 1251, i16 1016, i16 3020, i16 2210, i16 1445, i16 -95, i16 -63, i16 -556, i16 -298, i16 -127, i16 -77, i16 -230, i16 -187, i16 -168, i16 -137, i16 -407, i16 -110, i16 -89, i16 -266, i16 -194, i16 2099, i16 2277, i16 4038, i16 3533, i16 -2870, i16 -269, i16 -316, i16 -995, i16 -762, i16 -503, i16 -291, i16 -517, i16 -561, i16 -452, i16 -491, i16 -871, i16 367, i16 399, i16 707, i16 619, i16 400, i16 -1114, i16 8516, i16 2422, i16 -1117, i16 -9, i16 -75, i16 -4426, i16 -358, i16 -76, i16 27, i16 -208, i16 579, i16 -59, i16 164, i16 -1259, i16 27, i16 -75, i16 580, i16 165, i16 -4398, i16 -2011, i16 3912, i16 -2407, i16 2258, i16 -1180, i16 -247, i16 -934, i16 -353, i16 -311, i16 -540, i16 1050, i16 480, i16 -646, i16 -295, i16 575, i16 606, i16 277, i16 -539, i16 331, i16 1767, i16 -1447, i16 4240, i16 6160, i16 -757, i16 -190, i16 -127, i16 -1097, i16 -2316, i16 -35, i16 156, i16 -457, i16 374, i16 -664, i16 544, i16 -1594, i16 81, i16 -66, i16 195, i16 284, i16 1594, i16 -1463, i16 1035, i16 6938, i16 1920, i16 -155, i16 -130, i16 -65, i16 -2938, i16 -225, i16 142, i16 -100, i16 92, i16 -675, i16 619, i16 -438, i16 -186, i16 171, i16 -121, i16 -813, i16 -562, i16 4716, i16 4085, i16 -591, i16 2421, i16 -19, i16 -1357, i16 -1018, i16 -21, i16 -357, i16 162, i16 140, i16 -1175, i16 -20, i16 170, i16 147, i16 83, i16 -696, i16 -603, i16 87, i16 1552, i16 8778, i16 -935, i16 354, i16 -1424, i16 -147, i16 -4703, i16 -53, i16 -7, i16 -123, i16 -831, i16 88, i16 501, i16 -33, i16 -189, i16 20, i16 134, i16 763, i16 -81, i16 30, i16 4831, i16 -4431, i16 41, i16 -1479, i16 -2976, i16 -1424, i16 -1198, i16 0, i16 -133, i16 -540, i16 1306, i16 -12, i16 11, i16 436, i16 -400, i16 3, i16 877, i16 -804, i16 7, i16 -268, i16 2090, i16 1192, i16 1006, i16 1645, i16 4853, i16 -266, i16 -86, i16 -61, i16 -165, i16 -1437, i16 -152, i16 -128, i16 -73, i16 -210, i16 -119, i16 -101, i16 -619, i16 -353, i16 -298, i16 -487, i16 2386, i16 5712, i16 1426, i16 -94, i16 1350, i16 -347, i16 -1991, i16 -124, i16 0, i16 -111, i16 -832, i16 -207, i16 -497, i16 13, i16 32, i16 8, i16 -196, i16 -470, i16 -117, i16 7, i16 -1349, i16 1091, i16 1659, i16 8891, i16 313, i16 -111, i16 -72, i16 -168, i16 -4825, i16 -5, i16 89, i16 136, i16 -110, i16 732, i16 -592, i16 -900, i16 25, i16 -20, i16 -31, i16 -170, i16 9980, i16 916, i16 -381, i16 -808, i16 88, i16 -6080, i16 -51, i16 -8, i16 -39, i16 0, i16 -558, i16 232, i16 21, i16 492, i16 45, i16 -18, i16 -53, i16 -4, i16 2, i16 4, i16 2338, i16 -1031, i16 -248, i16 3928, i16 6484, i16 -333, i16 -64, i16 -3, i16 -942, i16 -2566, i16 147, i16 35, i16 -15, i16 -560, i16 247, i16 59, i16 -925, i16 408, i16 98, i16 -1555, i16 6166, i16 -1240, i16 -337, i16 3672, i16 -1277, i16 -2320, i16 -93, i16 -6, i16 -823, i16 -99, i16 466, i16 126, i16 -25, i16 -1382, i16 278, i16 75, i16 480, i16 -96, i16 -26, i16 286, i16 4377, i16 -132, i16 -2588, i16 1701, i16 4865, i16 -1169, i16 -1, i16 -409, i16 -176, i16 -1444, i16 35, i16 691, i16 -20, i16 -454, i16 13, i16 268, i16 -1299, i16 39, i16 768, i16 -505, i16 2594, i16 3295, i16 3944, i16 1481, i16 682, i16 -410, i16 -662, i16 -949, i16 -133, i16 -28, i16 -521, i16 -624, i16 -793, i16 -234, i16 -297, i16 -356, i16 -108, i16 -137, i16 -164, i16 -61, i16 4151, i16 624, i16 815, i16 4485, i16 2229, i16 -1052, i16 -23, i16 -40, i16 -1228, i16 -303, i16 -158, i16 -206, i16 -31, i16 -1136, i16 -170, i16 -223, i16 -565, i16 -84, i16 -111, i16 -610, i16 -3575, i16 -361, i16 4924, i16 2791, i16 4698, i16 -780, i16 -7, i16 -1480, i16 -475, i16 -1347, i16 -78, i16 1074, i16 108, i16 609, i16 61, i16 -839, i16 1025, i16 103, i16 -1412, i16 -800, i16 -2518, i16 3791, i16 8623, i16 315, i16 2465, i16 -387, i16 -877, i16 -4538, i16 -6, i16 -370, i16 582, i16 1325, i16 -1995, i16 48, i16 -73, i16 -166, i16 378, i16 -570, i16 -1297, i16 -47, i16 -691, i16 2989, i16 9957, i16 -421, i16 -1142, i16 -29, i16 -545, i16 -6051, i16 -10, i16 -79, i16 126, i16 420, i16 -1817, i16 -17, i16 76, i16 256, i16 -48, i16 208, i16 694, i16 -29, i16 -1918, i16 104, i16 -3190, i16 -3410, i16 -4440, i16 -224, i16 0, i16 -621, i16 -709, i16 -1203, i16 12, i16 -373, i16 20, i16 -399, i16 21, i16 -664, i16 -519, i16 28, i16 -864, i16 -924, i16 -3359, i16 -1668, i16 1854, i16 6939, i16 1430, i16 -688, i16 -169, i16 -209, i16 -2939, i16 -124, i16 -341, i16 380, i16 188, i16 1422, i16 706, i16 -785, i16 293, i16 145, i16 -161, i16 -606, i16 42, i16 9706, i16 3164, i16 -952, i16 907, i16 0, i16 -5750, i16 -611, i16 -55, i16 -50, i16 -25, i16 -8, i16 -1874, i16 2, i16 564, i16 183, i16 -2, i16 -537, i16 -175, i16 52, i16 1607, i16 785, i16 2862, i16 4327, i16 3307, i16 -157, i16 -37, i16 -500, i16 -1143, i16 -667, i16 -77, i16 -280, i16 -137, i16 -424, i16 -207, i16 -756, i16 -324, i16 -158, i16 -577, i16 -873, i16 6801, i16 3416, i16 2227, i16 1682, i16 -3217, i16 -2823, i16 -712, i16 -302, i16 -172, i16 -631, i16 -1418, i16 -924, i16 -464, i16 -698, i16 -350, i16 -228, i16 1335, i16 670, i16 437, i16 330, i16 3459, i16 3898, i16 364, i16 7841, i16 -2640, i16 -730, i16 -927, i16 -8, i16 -3753, i16 -425, i16 -823, i16 -76, i16 -86, i16 -1655, i16 -1865, i16 -174, i16 557, i16 628, i16 58, i16 1263, i16 -5902, i16 -3458, i16 -2465, i16 -1886, i16 4334, i16 -2126, i16 -730, i16 -371, i16 -217, i16 -1146, i16 -1245, i16 -888, i16 -520, i16 -679, i16 -398, i16 -283, i16 1561, i16 915, i16 652, i16 499, i16 -3710, i16 1133, i16 7849, i16 3443, i16 -215, i16 -840, i16 -78, i16 -3760, i16 -723, i16 -2, i16 256, i16 1777, i16 -543, i16 779, i16 -238, i16 -1649, i16 -48, i16 14, i16 103, i16 45, i16 4132, i16 2828, i16 2, i16 -4212, i16 -4116, i16 -1042, i16 -488, i16 0, i16 -1083, i16 -1034, i16 -713, i16 0, i16 0, i16 1062, i16 727, i16 0, i16 1038, i16 710, i16 0, i16 -1058, i16 5875, i16 8496, i16 -1796, i16 1376, i16 -1786, i16 -2107, i16 -4406, i16 -197, i16 -115, i16 -194, i16 -3047, i16 644, i16 931, i16 -493, i16 -713, i16 150, i16 640, i16 926, i16 -195, i16 150, i16 3143, i16 3483, i16 3546, i16 -793, i16 4489, i16 -603, i16 -740, i16 -767, i16 -38, i16 -1230, i16 -668, i16 -680, i16 -754, i16 152, i16 168, i16 171, i16 -861, i16 -954, i16 -971, i16 217, i16 2845, i16 7965, i16 3695, i16 -5432, i16 3978, i16 -494, i16 -3873, i16 -833, i16 -1801, i16 -966, i16 -1383, i16 -641, i16 -1796, i16 943, i16 2641, i16 1225, i16 -691, i16 -1934, i16 -897, i16 1319, i16 1538, i16 150, i16 7139, i16 2049, i16 3097, i16 -144, i16 -1, i16 -3110, i16 -256, i16 -585, i16 -14, i16 -670, i16 -65, i16 -192, i16 -18, i16 -892, i16 -290, i16 -28, i16 -1349, i16 -387, i16 618, i16 7520, i16 4729, i16 -238, i16 -3373, i16 -23, i16 -3452, i16 -1365, i16 -3, i16 -694, i16 -283, i16 -178, i16 -2170, i16 8, i16 109, i16 68, i16 127, i16 1548, i16 973, i16 -49, i16 2965, i16 -3013, i16 7912, i16 7076, i16 -1997, i16 -536, i16 -554, i16 -3821, i16 -3056, i16 -243, i16 545, i16 -1431, i16 1455, i16 -1280, i16 1301, i16 -3417, i16 361, i16 -367, i16 964, i16 862, i16 2443, i16 -929, i16 -1113, i16 9677, i16 4138, i16 -364, i16 -52, i16 -75, i16 -5716, i16 -1045, i16 138, i16 166, i16 -63, i16 -1443, i16 549, i16 657, i16 -617, i16 234, i16 281, i16 -2444, i16 1966, i16 3309, i16 10085, i16 -3399, i16 2105, i16 -236, i16 -668, i16 -6207, i16 -705, i16 -270, i16 -397, i16 -1210, i16 -2037, i16 408, i16 686, i16 2092, i16 -252, i16 -425, i16 -1295, i16 436, i16 -112, i16 -1368, i16 8868, i16 4822, i16 2048, i16 0, i16 -114, i16 -4800, i16 -1419, i16 -256, i16 -9, i16 61, i16 740, i16 33, i16 402, i16 -2610, i16 14, i16 171, i16 -1108, i16 -602, i16 -2597, i16 438, i16 -1839, i16 6229, i16 7266, i16 -411, i16 -11, i16 -206, i16 -2368, i16 -3223, i16 69, i16 -291, i16 49, i16 987, i16 -166, i16 699, i16 1152, i16 -194, i16 816, i16 -2763, i16 3454, i16 553, i16 9127, i16 4946, i16 -5596, i16 -728, i16 -18, i16 -5084, i16 -1493, i16 -1911, i16 -116, i16 -1924, i16 -308, i16 -1042, i16 -166, i16 -2755, i16 1179, i16 188, i16 3117, i16 1689, i16 -532, i16 -663, i16 12262, i16 2495, i16 -1004, i16 -17, i16 -26, i16 -9177, i16 -380, i16 -61, i16 -21, i16 398, i16 496, i16 81, i16 101, i16 -1867, i16 -32, i16 -40, i16 751, i16 152, i16 -2100, i16 1317, i16 -1509, i16 11425, i16 2997, i16 -269, i16 -105, i16 -139, i16 -7967, i16 -548, i16 168, i16 -193, i16 121, i16 1464, i16 -918, i16 1052, i16 384, i16 -240, i16 276, i16 -2090, i16 1193, i16 -2697, i16 11259, i16 5373, i16 -763, i16 -86, i16 -444, i16 -7737, i16 -1762, i16 -35, i16 196, i16 -819, i16 1853, i16 -391, i16 884, i16 -3692, i16 55, i16 -125, i16 525, i16 250, i16 2405, i16 -471, i16 11079, i16 203, i16 782, i16 -353, i16 -13, i16 -7491, i16 -2, i16 -37, i16 69, i16 -1626, i16 318, i16 -29, i16 5, i16 -137, i16 -114, i16 22, i16 -529, i16 -9, i16 -1871, i16 5685, i16 11290, i16 -2662, i16 1353, i16 -213, i16 -1972, i16 -7780, i16 -432, i16 -111, i16 649, i16 1289, i16 -3917, i16 -304, i16 923, i16 1834, i16 154, i16 -469, i16 -932, i16 220, i16 -3768, i16 5927, i16 -3093, i16 5041, i16 5212, i16 -866, i16 -2144, i16 -584, i16 -1551, i16 -1658, i16 1363, i16 -711, i16 1119, i16 1159, i16 -1824, i16 951, i16 1198, i16 -1885, i16 984, i16 -1603, i16 -2546, i16 9502, i16 5969, i16 -2440, i16 1928, i16 -395, i16 -5511, i16 -2175, i16 -363, i16 -226, i16 1477, i16 927, i16 -3462, i16 -379, i16 1415, i16 889, i16 299, i16 -1118, i16 -702, i16 287, i16 -4963, i16 3568, i16 4592, i16 5508, i16 3451, i16 -1503, i16 -777, i16 -1287, i16 -1851, i16 -727, i16 1080, i16 1391, i16 -1000, i16 1668, i16 -1199, i16 -1543, i16 1045, i16 -751, i16 -967, i16 -1160, i16 1745, i16 -2586, i16 3983, i16 10899, i16 -1551, i16 -186, i16 -408, i16 -968, i16 -7250, i16 -146, i16 275, i16 -424, i16 628, i16 -1161, i16 1720, i16 -2649, i16 165, i16 -244, i16 377, i16 1032, i16 867, i16 -456, i16 -727, i16 3369, i16 11822, i16 -45, i16 -12, i16 -32, i16 -692, i16 -8531, i16 24, i16 38, i16 -20, i16 -178, i16 93, i16 149, i16 -625, i16 329, i16 525, i16 -2431, i16 7535, i16 2422, i16 1926, i16 1405, i16 1599, i16 -3466, i16 -358, i16 -226, i16 -120, i16 -156, i16 -1114, i16 -886, i16 -284, i16 -646, i16 -207, i16 -165, i16 -735, i16 -236, i16 -188, i16 -137, i16 1041, i16 -735, i16 -142, i16 13209, i16 1515, i16 -66, i16 -33, i16 -1, i16 -10649, i16 -140, i16 46, i16 9, i16 -6, i16 -839, i16 593, i16 114, i16 -96, i16 68, i16 13, i16 -1222, i16 7950, i16 6745, i16 -1444, i16 -1008, i16 2721, i16 -3857, i16 -2777, i16 -127, i16 -62, i16 -452, i16 -3273, i16 700, i16 594, i16 489, i16 415, i16 -88, i16 -1320, i16 -1120, i16 239, i16 167, i16 -4754, i16 -1379, i16 4522, i16 -578, i16 -5733, i16 -1379, i16 -116, i16 -1248, i16 -20, i16 -2006, i16 -400, i16 1312, i16 380, i16 -167, i16 -48, i16 159, i16 -1663, i16 -482, i16 1582, i16 -202, i16 3220, i16 5978, i16 5923, i16 2430, i16 -2689, i16 -633, i16 -2181, i16 -2141, i16 -360, i16 -441, i16 -1175, i16 -1164, i16 -2161, i16 -477, i16 -886, i16 -878, i16 528, i16 981, i16 972, i16 398, i16 377, i16 1312, i16 13978, i16 -1470, i16 677, i16 -8, i16 -105, i16 -11925, i16 -132, i16 -28, i16 -30, i16 -321, i16 -1119, i16 33, i16 117, i16 1254, i16 -15, i16 -54, i16 -577, i16 60, i16 -3435, i16 6770, i16 314, i16 -885, i16 5686, i16 -720, i16 -2797, i16 -6, i16 -47, i16 -1973, i16 1419, i16 65, i16 -129, i16 -185, i16 366, i16 16, i16 1192, i16 -2349, i16 -109, i16 307, i16 3171, i16 8774, i16 -2260, i16 2679, i16 3069, i16 -613, i16 -4699, i16 -312, i16 -438, i16 -575, i16 -1698, i16 437, i16 1210, i16 -518, i16 -1435, i16 369, i16 -594, i16 -1643, i16 423, i16 -501, i16 5557, i16 1509, i16 5407, i16 -125, i16 -7386, i16 -1884, i16 -139, i16 -1784, i16 0, i16 -3330, i16 -511, i16 -1834, i16 -498, i16 42, i16 11, i16 41, i16 2505, i16 680, i16 2438, i16 -56, i16 -2838, i16 2595, i16 13228, i16 271, i16 1793, i16 -491, i16 -411, i16 -10680, i16 -4, i16 -196, i16 449, i16 2291, i16 -2095, i16 47, i16 -42, i16 -219, i16 310, i16 -284, i16 -1447, i16 -29, i16 664, i16 -278, i16 14966, i16 951, i16 -711, i16 -26, i16 -4, i16 -13672, i16 -55, i16 -30, i16 11, i16 -606, i16 253, i16 -38, i16 16, i16 -869, i16 28, i16 -12, i16 650, i16 41, i16 808, i16 1770, i16 8658, i16 5863, i16 -1486, i16 -39, i16 -191, i16 -4576, i16 -2098, i16 -134, i16 -87, i16 -427, i16 -935, i16 -289, i16 -633, i16 -3098, i16 73, i16 160, i16 785, i16 531, i16 3063, i16 1539, i16 2000, i16 -542, i16 9576, i16 -572, i16 -144, i16 -244, i16 -17, i16 -5597, i16 -287, i16 -374, i16 -188, i16 101, i16 51, i16 66, i16 -1790, i16 -900, i16 -1169, i16 317, i16 514, i16 14083, i16 -323, i16 896, i16 -891, i16 -16, i16 -12106, i16 -6, i16 -49, i16 -48, i16 -442, i16 10, i16 277, i16 -28, i16 -770, i16 17, i16 27, i16 766, i16 -17, i16 48, i16 892, i16 158, i16 5237, i16 11057, i16 -1603, i16 -48, i16 -1, i16 -1674, i16 -7462, i16 -156, i16 -8, i16 -285, i16 -50, i16 -602, i16 -106, i16 -3534, i16 87, i16 15, i16 512, i16 1082, i16 -1612, i16 2564, i16 -4296, i16 12526, i16 5710, i16 -158, i16 -401, i16 -1126, i16 -9576, i16 -1990, i16 252, i16 -422, i16 672, i16 1232, i16 -1960, i16 3284, i16 561, i16 -893, i16 1497, i16 -4365, i16 4889, i16 -6878, i16 612, i16 6109, i16 4753, i16 -1459, i16 -2887, i16 -22, i16 -2277, i16 -1379, i16 2052, i16 -182, i16 257, i16 -1823, i16 2564, i16 -228, i16 -1418, i16 1995, i16 -177, i16 -1772, i16 3053, i16 -506, i16 2403, i16 9625, i16 1322, i16 -569, i16 -15, i16 -352, i16 -5655, i16 -106, i16 94, i16 -448, i16 74, i16 -1794, i16 297, i16 -1412, i16 -246, i16 40, i16 -194, i16 -777, i16 -754, i16 12904, i16 4480, i16 -2113, i16 1471, i16 -34, i16 -10163, i16 -1225, i16 -272, i16 -132, i16 594, i16 206, i16 -3529, i16 -97, i16 1664, i16 577, i16 67, i16 -1159, i16 -402, i16 189, i16 4255, i16 1476, i16 5055, i16 2393, i16 2912, i16 -1105, i16 -132, i16 -1559, i16 -349, i16 -517, i16 -383, i16 -1313, i16 -455, i16 -621, i16 -215, i16 -738, i16 -756, i16 -262, i16 -898, i16 -425, i16 -1371, i16 535, i16 1417, i16 14604, i16 -997, i16 -114, i16 -17, i16 -122, i16 -13017, i16 -60, i16 44, i16 118, i16 -46, i16 1222, i16 -477, i16 -1263, i16 -83, i16 32, i16 86, i16 888, i16 5368, i16 -1744, i16 4083, i16 -1236, i16 3753, i16 -1758, i16 -185, i16 -1017, i16 -93, i16 -860, i16 571, i16 -1338, i16 434, i16 405, i16 -131, i16 308, i16 -1229, i16 399, i16 -935, i16 283, i16 1588, i16 -3097, i16 14415, i16 3699, i16 -1171, i16 -154, i16 -585, i16 -12683, i16 -835, i16 -83, i16 300, i16 -1397, i16 2725, i16 -358, i16 699, i16 -3255, i16 113, i16 -221, i16 1030, i16 264, i16 212, i16 7989, i16 9471, i16 -3344, i16 2009, i16 -2, i16 -3895, i16 -5475, i16 -682, i16 -246, i16 -103, i16 -123, i16 -4618, i16 43, i16 1630, i16 1933, i16 -26, i16 -979, i16 -1161, i16 410, i16 856, i16 2294, i16 -627, i16 6930, i16 6929, i16 -44, i16 -321, i16 -24, i16 -2931, i16 -2930, i16 -119, i16 32, i16 87, i16 -362, i16 -970, i16 265, i16 -362, i16 -970, i16 265, i16 -2931, i16 2357, i16 -4187, i16 7162, i16 7683, i16 3371, i16 -339, i16 -1070, i16 -3131, i16 -3603, i16 -693, i16 602, i16 -1030, i16 1830, i16 -1105, i16 1963, i16 -3359, i16 -485, i16 861, i16 -1474, i16 -1581, i16 350, i16 4585, i16 14053, i16 -3819, i16 1218, i16 -7, i16 -1283, i16 -12054, i16 -890, i16 -90, i16 -97, i16 -300, i16 -3933, i16 81, i16 1068, i16 3275, i16 -26, i16 -341, i16 -1045, i16 284, i16 -3248, i16 3531, i16 475, i16 2137, i16 11711, i16 -644, i16 -761, i16 -13, i16 -278, i16 -8372, i16 700, i16 94, i16 -102, i16 423, i16 -460, i16 -62, i16 2322, i16 -2524, i16 -340, i16 -1528, i16 -3017, i16 3852, i16 1725, i16 8440, i16 5257, i16 -555, i16 -905, i16 -181, i16 -4348, i16 -1686, i16 709, i16 317, i16 -405, i16 1554, i16 -1984, i16 -889, i16 968, i16 -1236, i16 -553, i16 -2708, i16 -909, i16 3196, i16 15512, i16 -2528, i16 1066, i16 -50, i16 -623, i16 -14686, i16 -390, i16 -69, i16 177, i16 861, i16 -3026, i16 -140, i16 493, i16 2393, i16 59, i16 -208, i16 -1009, i16 164, i16 959, i16 -3370, i16 9617, i16 9545, i16 -1761, i16 -56, i16 -693, i16 -5645, i16 -5561, i16 -189, i16 197, i16 -563, i16 1978, i16 -558, i16 1963, i16 -5603, i16 103, i16 -362, i16 1034, i16 1026, i16 7575, i16 11796, i16 -4845, i16 3252, i16 -1703, i16 -3502, i16 -8493, i16 -1433, i16 -645, i16 -177, i16 -5454, i16 2240, i16 3488, i16 -1503, i16 -2341, i16 961, i16 787, i16 1226, i16 -503, i16 338, i16 6409, i16 1722, i16 1764, i16 -4191, i16 6015, i16 -2507, i16 -181, i16 -189, i16 -1072, i16 -2208, i16 -673, i16 -690, i16 -185, i16 1639, i16 440, i16 451, i16 -2353, i16 -632, i16 -647, i16 1538, i16 -2420, i16 12161, i16 5038, i16 1286, i16 -2098, i16 -357, i16 -9027, i16 -1549, i16 -100, i16 -268, i16 1796, i16 744, i16 -3740, i16 190, i16 -954, i16 -395, i16 -310, i16 1557, i16 645, i16 164, i16 -2232, i16 -1341, i16 7246, i16 9470, i16 -1977, i16 -304, i16 -109, i16 -3204, i16 -5474, i16 -238, i16 -182, i16 987, i16 593, i16 1290, i16 775, i16 -4188, i16 -269, i16 -161, i16 874, i16 1143, i16 1030, i16 7034, i16 4231, i16 1551, i16 3077, i16 -64, i16 -3019, i16 -1093, i16 -146, i16 -577, i16 -442, i16 -266, i16 -1816, i16 -97, i16 -666, i16 -400, i16 -193, i16 -1321, i16 -794, i16 -291, i16 5121, i16 11835, i16 -477, i16 -1749, i16 2298, i16 -1601, i16 -8549, i16 -13, i16 -186, i16 -322, i16 -3699, i16 149, i16 344, i16 546, i16 1264, i16 -50, i16 -718, i16 -1660, i16 66, i16 245, i16 -3328, i16 3827, i16 5921, i16 9976, i16 -1045, i16 -676, i16 -894, i16 -2140, i16 -6075, i16 -66, i16 777, i16 1203, i16 -1383, i16 2027, i16 -2330, i16 -3605, i16 -212, i16 244, i16 377, i16 636, i16 3813, i16 5718, i16 -4666, i16 -3412, i16 5674, i16 -887, i16 -1995, i16 -1329, i16 -710, i16 -1965, i16 -1331, i16 1086, i16 1628, i16 794, i16 1191, i16 -972, i16 -1320, i16 -1980, i16 1616, i16 1181, i16 1348, i16 -3672, i16 13154, i16 6938, i16 -1690, i16 -110, i16 -823, i16 -10561, i16 -2938, i16 -174, i16 302, i16 -1082, i16 2948, i16 -570, i16 1555, i16 -5570, i16 139, i16 -379, i16 1357, i16 716, i16 2151, i16 -3586, i16 6949, i16 12131, i16 -1224, i16 -282, i16 -785, i16 -2947, i16 -8982, i16 -91, i16 470, i16 -912, i16 1521, i16 -1592, i16 2655, i16 -5145, i16 160, i16 -268, i16 519, i16 906, i16 -2889, i16 9647, i16 10276, i16 -2728, i16 995, i16 -509, i16 -5680, i16 -6445, i16 -454, i16 -60, i16 1701, i16 1812, i16 -6051, i16 -481, i16 1606, i16 1711, i16 175, i16 -586, i16 -624, i16 165, i16 6177, i16 2184, i16 555, i16 1985, i16 6589, i16 -2329, i16 -291, i16 -18, i16 -240, i16 -2650, i16 -823, i16 -209, i16 -74, i16 -748, i16 -264, i16 -67, i16 -2484, i16 -878, i16 -223, i16 -798, i16 -492, i16 391, i16 17166, i16 -681, i16 240, i16 -14, i16 -9, i16 -17987, i16 -28, i16 -3, i16 11, i16 515, i16 -410, i16 -20, i16 16, i16 713, i16 7, i16 -5, i16 -252, i16 10, i16 12628, i16 5448, i16 -2630, i16 3011, i16 -2695, i16 -9733, i16 -1811, i16 -422, i16 -553, i16 -443, i16 -4199, i16 2027, i16 874, i16 -2321, i16 -1001, i16 483, i16 2077, i16 896, i16 -432, i16 495, i16 -3628, i16 -534, i16 3447, i16 7002, i16 6751, i16 -803, i16 -17, i16 -725, i16 -2992, i16 -2782, i16 -118, i16 763, i16 112, i16 1550, i16 228, i16 -1473, i16 1495, i16 220, i16 -1420, i16 -2885, i16 -5239, i16 5901, i16 8107, i16 3650, i16 4846, i16 -1675, i16 -2125, i16 -4012, i16 -813, i16 -1433, i16 1887, i16 2592, i16 -2920, i16 1167, i16 -1315, i16 -1806, i16 1550, i16 -1745, i16 -2398, i16 -1080, i16 6157, i16 6678, i16 4099, i16 -1074, i16 2348, i16 -2314, i16 -2722, i16 -1025, i16 -70, i16 -336, i16 -2509, i16 -1540, i16 -1670, i16 403, i16 437, i16 268, i16 -882, i16 -957, i16 -587, i16 153, i16 1079, i16 16099, i16 242, i16 -881, i16 1690, i16 -71, i16 -15820, i16 -3, i16 -47, i16 -174, i16 -1060, i16 -16, i16 -238, i16 58, i16 865, i16 13, i16 -111, i16 -1661, i16 -25, i16 90, i16 -278, i16 227, i16 -1039, i16 1636, i16 16945, i16 -4, i16 -3, i16 -65, i16 -163, i16 -17526, i16 3, i16 -17, i16 14, i16 27, i16 -22, i16 103, i16 287, i16 -234, i16 1074, i16 -1693, i16 15778, i16 -1454, i16 574, i16 -603, i16 -107, i16 -15195, i16 -129, i16 -20, i16 -22, i16 0, i16 1400, i16 -553, i16 51, i16 581, i16 -53, i16 21, i16 103, i16 -9, i16 3, i16 -3, i16 2406, i16 -836, i16 13224, i16 7993, i16 -4266, i16 -353, i16 -42, i16 -10673, i16 -3899, i16 -1111, i16 122, i16 -1942, i16 674, i16 -1174, i16 407, i16 -6451, i16 626, i16 -217, i16 3443, i16 2081, i16 3184, i16 14368, i16 -3336, i16 2255, i16 -1801, i16 -619, i16 -12600, i16 -679, i16 -310, i16 -198, i16 -2793, i16 648, i16 2926, i16 -438, i16 -1977, i16 459, i16 350, i16 1580, i16 -366, i16 247, i16 -1698, i16 17076, i16 2504, i16 -539, i16 -646, i16 -176, i16 -17798, i16 -382, i16 -17, i16 -25, i16 1770, i16 259, i16 -2610, i16 -55, i16 561, i16 82, i16 -67, i16 673, i16 98, i16 -21, i16 2375, i16 -797, i16 -2696, i16 14483, i16 5383, i16 -344, i16 -38, i16 -443, i16 -12803, i16 -1769, i16 115, i16 391, i16 -131, i16 -2100, i16 705, i16 2384, i16 -780, i16 262, i16 886, i16 -4759, i16 -2691, i16 2554, i16 -4520, i16 9573, i16 10655, i16 -442, i16 -398, i16 -1247, i16 -5594, i16 -6930, i16 419, i16 -742, i16 704, i16 1572, i16 -1492, i16 2641, i16 1750, i16 -1661, i16 2939, i16 -6226, i16 -4332, i16 -4399, i16 -1657, i16 4880, i16 7375, i16 -1145, i16 -1181, i16 -167, i16 -1453, i16 -3319, i16 -1163, i16 -438, i16 -444, i16 1290, i16 1310, i16 493, i16 1950, i16 1980, i16 745, i16 -2196, i16 -3498, i16 7405, i16 9955, i16 2693, i16 -2971, i16 -746, i16 -3347, i16 -6049, i16 -442, i16 -538, i16 1581, i16 2125, i16 -4499, i16 575, i16 -1217, i16 -1636, i16 -634, i16 1342, i16 1805, i16 488, i16 6717, i16 -3792, i16 7739, i16 2798, i16 3489, i16 -2754, i16 -877, i16 -3655, i16 -477, i16 -743, i16 1554, i16 -3173, i16 1791, i16 -1147, i16 647, i16 -1321, i16 -1430, i16 807, i16 -1648, i16 -595, i16 5263, i16 9770, i16 3463, i16 1069, i16 -3971, i16 -1690, i16 -5826, i16 -732, i16 -69, i16 -962, i16 -3138, i16 -1112, i16 -2065, i16 -343, i16 -637, i16 -226, i16 1275, i16 2368, i16 839, i16 259, i16 1243, i16 -2634, i16 16772, i16 1871, i16 332, i16 -94, i16 -423, i16 -17169, i16 -213, i16 -6, i16 199, i16 -1273, i16 2696, i16 -142, i16 300, i16 -1915, i16 -25, i16 53, i16 -339, i16 -37, i16 2691, i16 2836, i16 3105, i16 5711, i16 4817, i16 -442, i16 -491, i16 -588, i16 -1991, i16 -1416, i16 -465, i16 -510, i16 -537, i16 -938, i16 -988, i16 -1082, i16 -791, i16 -834, i16 -913, i16 -1679, i16 4366, i16 2944, i16 7210, i16 3627, i16 1161, i16 -1163, i16 -529, i16 -3172, i16 -803, i16 -82, i16 -784, i16 -1921, i16 -1295, i16 -966, i16 -651, i16 -1596, i16 -309, i16 -208, i16 -511, i16 -257, i16 13888, i16 3951, i16 -671, i16 -2305, i16 3354, i16 -11773, i16 -953, i16 -27, i16 -324, i16 -686, i16 -3349, i16 569, i16 161, i16 1954, i16 556, i16 -94, i16 -2843, i16 -809, i16 137, i16 472, i16 7053, i16 5847, i16 2929, i16 8378, i16 -4794, i16 -3036, i16 -2086, i16 -523, i16 -4284, i16 -1403, i16 -2517, i16 -1261, i16 -1045, i16 -3607, i16 -2990, i16 -1498, i16 2064, i16 1711, i16 857, i16 2451, i16 -2191, i16 12838, i16 9182, i16 -3915, i16 1617, i16 -293, i16 -10059, i16 -5146, i16 -935, i16 -159, i16 1717, i16 1228, i16 -7195, i16 -523, i16 3068, i16 2194, i16 216, i16 -1267, i16 -906, i16 386, i16 -4881, i16 13114, i16 5767, i16 -435, i16 4155, i16 -1454, i16 -10498, i16 -2030, i16 -11, i16 -1054, i16 3907, i16 1718, i16 -4616, i16 -129, i16 348, i16 153, i16 1238, i16 -3326, i16 -1462, i16 110, i16 7843, i16 -1250, i16 210, i16 7106, i16 -5203, i16 -3754, i16 -95, i16 -2, i16 -3082, i16 -1652, i16 598, i16 -100, i16 16, i16 -3402, i16 542, i16 -91, i16 2491, i16 -397, i16 66, i16 2257, i16 -2463, i16 8168, i16 14551, i16 -3908, i16 1828, i16 -370, i16 -4072, i16 -12923, i16 -932, i16 -204, i16 1228, i16 2188, i16 -7254, i16 -587, i16 1948, i16 3471, i16 274, i16 -911, i16 -1623, i16 436, i16 -1579, i16 347, i16 -272, i16 -2735, i16 16031, i16 -152, i16 -7, i16 -4, i16 -456, i16 -15686, i16 33, i16 -26, i16 5, i16 -263, i16 58, i16 -45, i16 1545, i16 -340, i16 266, i16 2676, i16 -6327, i16 1328, i16 5093, i16 -5079, i16 7617, i16 -2443, i16 -107, i16 -1583, i16 -1574, i16 -3541, i16 513, i16 1967, i16 -413, i16 -1961, i16 411, i16 1578, i16 2941, i16 -617, i16 -2367, i16 2361, i16 3286, i16 -4509, i16 11306, i16 11025, i16 -2623, i16 -659, i16 -1241, i16 -7802, i16 -7419, i16 -420, i16 904, i16 -2267, i16 3112, i16 -2211, i16 3034, i16 -7608, i16 526, i16 -722, i16 1810, i16 1765, i16 5567, i16 17853, i16 -3754, i16 1166, i16 -519, i16 -1892, i16 -19455, i16 -860, i16 -83, i16 -16, i16 -6067, i16 1275, i16 4090, i16 -396, i16 -1271, i16 267, i16 176, i16 566, i16 -119, i16 37, i16 -2136, i16 -424, i16 15292, i16 5108, i16 -1648, i16 -278, i16 -10, i16 -14273, i16 -1593, i16 -165, i16 -55, i16 1993, i16 396, i16 666, i16 132, i16 -4768, i16 -214, i16 -42, i16 1538, i16 514, i16 2267, i16 -3297, i16 2549, i16 16563, i16 -791, i16 -313, i16 -663, i16 -396, i16 -16745, i16 -38, i16 456, i16 -352, i16 513, i16 -2291, i16 3333, i16 -2576, i16 109, i16 -159, i16 123, i16 799, i16 3655, i16 1899, i16 -3364, i16 6279, i16 12510, i16 -815, i16 -220, i16 -690, i16 -2406, i16 -9552, i16 -423, i16 750, i16 390, i16 -1400, i16 -728, i16 1289, i16 -2791, i16 -1450, i16 2568, i16 -4794, i16 8052, i16 2285, i16 -6193, i16 5138, i16 6003, i16 -3957, i16 -318, i16 -2341, i16 -1611, i16 -2199, i16 -1123, i16 3044, i16 864, i16 -2525, i16 -716, i16 1942, i16 -2950, i16 -837, i16 2269, i16 -1882, i16 -386, i16 -2291, i16 7679, i16 15387, i16 -2723, i16 -9, i16 -320, i16 -3599, i16 -14452, i16 -452, i16 -54, i16 181, i16 1074, i16 362, i16 2152, i16 -7212, i16 -64, i16 -380, i16 1276, i16 2557, i16 2777, i16 -1173, i16 3984, i16 13079, i16 2508, i16 -470, i16 -84, i16 -969, i16 -10440, i16 -384, i16 198, i16 -675, i16 285, i16 -2217, i16 936, i16 -3180, i16 -425, i16 179, i16 -610, i16 -2002, i16 -1879, i16 1771, i16 -2684, i16 16705, i16 1833, i16 -215, i16 -191, i16 -439, i16 -17032, i16 -205, i16 203, i16 -308, i16 290, i16 1916, i16 -1805, i16 2736, i16 210, i16 -198, i16 300, i16 -1869, i16 1052, i16 4495, i16 15519, i16 1467, i16 -4032, i16 -67, i16 -1233, i16 -14700, i16 -131, i16 -992, i16 -288, i16 -997, i16 -4257, i16 -94, i16 -402, i16 -1389, i16 259, i16 1106, i16 3819, i16 361, i16 3010, i16 2544, i16 6969, i16 7559, i16 1996, i16 -553, i16 -395, i16 -2964, i16 -3487, i16 -243, i16 -467, i16 -1280, i16 -1082, i16 -1388, i16 -1174, i16 -3215, i16 -366, i16 -310, i16 -849, i16 -921, i16 -5209, i16 -1867, i16 8713, i16 10351, i16 1549, i16 -1656, i16 -212, i16 -4634, i16 -6540, i16 -146, i16 -593, i16 2770, i16 993, i16 3291, i16 1180, i16 -5505, i16 492, i16 176, i16 -824, i16 -979, i16 -4314, i16 8513, i16 913, i16 7547, i16 -2723, i16 -1135, i16 -4423, i16 -50, i16 -3476, i16 -452, i16 2241, i16 240, i16 -474, i16 1987, i16 -3921, i16 -420, i16 -717, i16 1415, i16 151, i16 1254, i16 12929, i16 -1219, i16 2448, i16 1757, i16 6303, i16 -10204, i16 -90, i16 -365, i16 -188, i16 -2425, i16 962, i16 -1932, i16 182, i16 -1386, i16 130, i16 -262, i16 -4974, i16 469, i16 -941, i16 -676, i16 6465, i16 4132, i16 3167, i16 3160, i16 5697, i16 -2551, i16 -1042, i16 -612, i16 -609, i16 -1981, i16 -1630, i16 -1249, i16 -798, i16 -1247, i16 -797, i16 -611, i16 -2248, i16 -1437, i16 -1101, i16 -1099, i16 -3636, i16 4859, i16 18914, i16 -1335, i16 810, i16 -807, i16 -1441, i16 -21836, i16 -108, i16 -40, i16 1078, i16 4198, i16 -5609, i16 -296, i16 396, i16 1541, i16 179, i16 -240, i16 -936, i16 66, i16 8844, i16 7864, i16 654, i16 -4063, i16 -5680, i16 -4774, i16 -3774, i16 -26, i16 -1007, i16 -1969, i16 -4245, i16 -353, i16 -314, i16 2193, i16 1950, i16 162, i16 3066, i16 2726, i16 226, i16 -1408, i16 1859, i16 2634, i16 9228, i16 996, i16 9464, i16 -211, i16 -423, i16 -5197, i16 -60, i16 -5467, i16 -299, i16 -1047, i16 -1483, i16 -113, i16 -160, i16 -561, i16 -1074, i16 -1521, i16 -5330, i16 -575, i16 2949, i16 12260, i16 10290, i16 -497, i16 -3943, i16 -530, i16 -9174, i16 -6463, i16 -15, i16 -949, i16 -2206, i16 -1852, i16 -7700, i16 89, i16 372, i16 312, i16 709, i16 2950, i16 2476, i16 -119, i16 -2903, i16 1552, i16 14867, i16 9970, i16 -496, i16 -514, i16 -147, i16 -13491, i16 -6068, i16 -15, i16 275, i16 2634, i16 -1408, i16 1766, i16 -944, i16 -9047, i16 -87, i16 47, i16 450, i16 302, i16 3243, i16 8234, i16 7586, i16 3373, i16 2151, i16 -642, i16 -4138, i16 -3512, i16 -694, i16 -282, i16 -1630, i16 -1501, i16 -3812, i16 -667, i16 -1695, i16 -1561, i16 -425, i16 -1081, i16 -996, i16 -442, i16 -9631, i16 60, i16 3501, i16 5359, i16 10150, i16 -5662, i16 0, i16 -748, i16 -1752, i16 -6288, i16 35, i16 2058, i16 -12, i16 3150, i16 -19, i16 -1145, i16 5967, i16 -37, i16 -2169, i16 -3320, i16 -6874, i16 -2553, i16 -5446, i16 -2195, i16 -7841, i16 -2884, i16 -397, i16 -1810, i16 -294, i16 -3753, i16 -1071, i16 -2285, i16 -848, i16 -921, i16 -342, i16 -729, i16 -3290, i16 -1221, i16 -2606, i16 -1050, i16 -3413, i16 -1141, i16 4630, i16 13612, i16 7897, i16 -711, i16 -79, i16 -1308, i16 -11310, i16 -3806, i16 -237, i16 964, i16 322, i16 2836, i16 948, i16 -3847, i16 1645, i16 550, i16 -2231, i16 -6561, i16 4410, i16 -5678, i16 8006, i16 -3992, i16 3811, i16 -1187, i16 -1968, i16 -3912, i16 -973, i16 -886, i16 1528, i16 -2155, i16 2775, i16 1074, i16 -1383, i16 1951, i16 -1025, i16 1321, i16 -1862, i16 928, i16 5659, i16 11535, i16 2203, i16 -452, i16 7169, i16 -1954, i16 -8121, i16 -296, i16 -12, i16 -3137, i16 -3984, i16 -761, i16 -1551, i16 156, i16 318, i16 60, i16 -2476, i16 -5048, i16 -964, i16 197, i16 2914, i16 -2914, i16 3485, i16 -3965, i16 13675, i16 -518, i16 -518, i16 -741, i16 -959, i16 -11414, i16 518, i16 -620, i16 620, i16 705, i16 -705, i16 843, i16 -2433, i16 2432, i16 -2909, i16 3310, i16 7843, i16 1907, i16 1022, i16 8882, i16 7972, i16 -3755, i16 -222, i16 -63, i16 -4815, i16 -3879, i16 -913, i16 -489, i16 -119, i16 -4252, i16 -1034, i16 -554, i16 -3816, i16 -928, i16 -497, i16 -4322, i16 13807, i16 9531, i16 1436, i16 1612, i16 1779, i16 -11636, i16 -5544, i16 -125, i16 -158, i16 -193, i16 -8032, i16 -1210, i16 -835, i16 -1358, i16 -938, i16 -141, i16 -1499, i16 -1035, i16 -156, i16 -175, i16 13620, i16 -5337, i16 5450, i16 -2263, i16 1723, i16 -11322, i16 -1738, i16 -1813, i16 -312, i16 -181, i16 4436, i16 -4531, i16 1775, i16 1881, i16 -737, i16 752, i16 -1432, i16 561, i16 -573, i16 238, i16 5297, i16 8374, i16 8872, i16 7694, i16 6538, i16 -1712, i16 -4280, i16 -4804, i16 -3613, i16 -2609, i16 -2707, i16 -2868, i16 -4534, i16 -2487, i16 -3932, i16 -4166, i16 -2113, i16 -3341, i16 -3540, i16 -3070], align 16
@lsp_band0 = internal constant [256 x [3 x i16]] [[3 x i16] zeroinitializer, [3 x i16] [i16 -270, i16 -1372, i16 -1032], [3 x i16] [i16 -541, i16 -1650, i16 -1382], [3 x i16] [i16 -723, i16 -2011, i16 -2213], [3 x i16] [i16 -941, i16 -1122, i16 -1942], [3 x i16] [i16 -780, i16 -1145, i16 -2454], [3 x i16] [i16 -884, i16 -1309, i16 -1373], [3 x i16] [i16 -1051, i16 -1523, i16 -1766], [3 x i16] [i16 -1083, i16 -1622, i16 -2300], [3 x i16] [i16 -777, i16 -1377, i16 -2147], [3 x i16] [i16 -935, i16 -1467, i16 -2763], [3 x i16] [i16 -802, i16 -1327, i16 -3471], [3 x i16] [i16 -935, i16 -1959, i16 -3999], [3 x i16] [i16 -240, i16 -89, i16 222], [3 x i16] [i16 -661, i16 -257, i16 -160], [3 x i16] [i16 -994, i16 -466, i16 -419], [3 x i16] [i16 -188, i16 -164, i16 -278], [3 x i16] [i16 -342, i16 -512, i16 -415], [3 x i16] [i16 -607, i16 -511, i16 -797], [3 x i16] [i16 16, i16 19, i16 -716], [3 x i16] [i16 374, i16 425, i16 -972], [3 x i16] [i16 -346, i16 245, i16 -282], [3 x i16] [i16 -265, i16 506, i16 -754], [3 x i16] [i16 -620, i16 -147, i16 1955], [3 x i16] [i16 -742, i16 -860, i16 2597], [3 x i16] [i16 -150, i16 -352, i16 2704], [3 x i16] [i16 305, i16 880, i16 1954], [3 x i16] [i16 123, i16 731, i16 2766], [3 x i16] [i16 -348, i16 765, i16 3327], [3 x i16] [i16 618, i16 221, i16 3258], [3 x i16] [i16 -178, i16 -47, i16 4219], [3 x i16] [i16 393, i16 1304, i16 3842], [3 x i16] [i16 698, i16 1702, i16 4801], [3 x i16] [i16 63, i16 -584, i16 1229], [3 x i16] [i16 -215, i16 -732, i16 1704], [3 x i16] [i16 172, i16 -335, i16 1909], [3 x i16] [i16 -2, i16 216, i16 1797], [3 x i16] [i16 353, i16 127, i16 2205], [3 x i16] [i16 -1208, i16 188, i16 11], [3 x i16] [i16 -513, i16 -75, i16 -683], [3 x i16] [i16 -973, i16 222, i16 -646], [3 x i16] [i16 -616, i16 -843, i16 -388], [3 x i16] [i16 -950, i16 -1113, i16 -359], [3 x i16] [i16 -1431, i16 -623, i16 -705], [3 x i16] [i16 -1398, i16 -1063, i16 -178], [3 x i16] [i16 -45, i16 -461, i16 35], [3 x i16] [i16 -9, i16 -657, i16 -216], [3 x i16] [i16 127, i16 -1078, i16 95], [3 x i16] [i16 -950, i16 -1156, i16 584], [3 x i16] [i16 -1480, i16 -1494, i16 449], [3 x i16] [i16 -120, i16 -705, i16 516], [3 x i16] [i16 -368, i16 -961, i16 727], [3 x i16] [i16 -378, i16 -526, i16 973], [3 x i16] [i16 -793, i16 -614, i16 676], [3 x i16] [i16 -801, i16 -755, i16 1287], [3 x i16] [i16 -1476, i16 -340, i16 1636], [3 x i16] [i16 -505, i16 -1254, i16 1543], [3 x i16] [i16 -1243, i16 -1622, i16 1532], [3 x i16] [i16 -776, i16 -1477, i16 -655], [3 x i16] [i16 -1151, i16 -1296, i16 -823], [3 x i16] [i16 -1153, i16 -1672, i16 -1124], [3 x i16] [i16 -1291, i16 -2003, i16 -1702], [3 x i16] [i16 -622, i16 -1283, i16 57], [3 x i16] [i16 -471, i16 -1611, i16 509], [3 x i16] [i16 -1060, i16 -1570, i16 -139], [3 x i16] [i16 -873, i16 -2156, i16 -536], [3 x i16] [i16 -1716, i16 -2021, i16 -364], [3 x i16] [i16 -2150, i16 -3218, i16 -1291], [3 x i16] [i16 -1248, i16 -1945, i16 -2904], [3 x i16] [i16 -1215, i16 -2633, i16 -2855], [3 x i16] [i16 167, i16 -244, i16 84], [3 x i16] [i16 349, i16 -412, i16 -217], [3 x i16] [i16 -40, i16 -352, i16 632], [3 x i16] [i16 227, i16 -529, i16 405], [3 x i16] [i16 68, i16 -383, i16 -443], [3 x i16] [i16 167, i16 -558, i16 -706], [3 x i16] [i16 -275, i16 -854, i16 -14], [3 x i16] [i16 -351, i16 -1089, i16 -449], [3 x i16] [i16 341, i16 -72, i16 -289], [3 x i16] [i16 603, i16 -106, i16 -474], [3 x i16] [i16 322, i16 -219, i16 -649], [3 x i16] [i16 179, i16 -317, i16 -998], [3 x i16] [i16 450, i16 -291, i16 -996], [3 x i16] [i16 555, i16 195, i16 -525], [3 x i16] [i16 784, i16 272, i16 -831], [3 x i16] [i16 -148, i16 -384, i16 -849], [3 x i16] [i16 82, i16 -536, i16 -1357], [3 x i16] [i16 238, i16 -172, i16 -1354], [3 x i16] [i16 422, i16 -268, i16 -1841], [3 x i16] [i16 297, i16 -737, i16 -2079], [3 x i16] [i16 -111, i16 -801, i16 -598], [3 x i16] [i16 1, i16 -668, i16 -984], [3 x i16] [i16 -131, i16 -818, i16 -1299], [3 x i16] [i16 -329, i16 -521, i16 -1310], [3 x i16] [i16 -151, i16 -778, i16 -1834], [3 x i16] [i16 -93, i16 -352, i16 -1746], [3 x i16] [i16 -568, i16 -640, i16 -1821], [3 x i16] [i16 -509, i16 -941, i16 -2183], [3 x i16] [i16 464, i16 -815, i16 -1250], [3 x i16] [i16 79, i16 -1133, i16 -1597], [3 x i16] [i16 -184, i16 -1353, i16 -2123], [3 x i16] [i16 -196, i16 -410, i16 -2427], [3 x i16] [i16 -192, i16 -833, i16 -2810], [3 x i16] [i16 -259, i16 -1382, i16 -3045], [3 x i16] [i16 -217, i16 4, i16 -1166], [3 x i16] [i16 -800, i16 -325, i16 -1219], [3 x i16] [i16 -363, i16 -830, i16 -898], [3 x i16] [i16 -661, i16 -1134, i16 -960], [3 x i16] [i16 -386, i16 -980, i16 -1501], [3 x i16] [i16 -627, i16 -1159, i16 -1722], [3 x i16] [i16 -903, i16 -829, i16 -855], [3 x i16] [i16 -685, i16 -829, i16 -1313], [3 x i16] [i16 -1065, i16 -959, i16 -1405], [3 x i16] [i16 441, i16 25, i16 -847], [3 x i16] [i16 655, i16 -27, i16 -1181], [3 x i16] [i16 1159, i16 -110, i16 -705], [3 x i16] [i16 856, i16 253, i16 -1671], [3 x i16] [i16 415, i16 404, i16 -1], [3 x i16] [i16 322, i16 903, i16 -398], [3 x i16] [i16 670, i16 499, i16 -292], [3 x i16] [i16 803, i16 591, i16 -610], [3 x i16] [i16 1144, i16 591, i16 -814], [3 x i16] [i16 717, i16 183, i16 393], [3 x i16] [i16 857, i16 381, i16 106], [3 x i16] [i16 609, i16 62, i16 -27], [3 x i16] [i16 792, i16 198, i16 -325], [3 x i16] [i16 735, i16 805, i16 88], [3 x i16] [i16 1142, i16 812, i16 78], [3 x i16] [i16 1028, i16 366, i16 -292], [3 x i16] [i16 1309, i16 743, i16 -237], [3 x i16] [i16 1615, i16 589, i16 -79], [3 x i16] [i16 1010, i16 639, i16 -243], [3 x i16] [i16 999, i16 964, i16 -311], [3 x i16] [i16 1500, i16 1137, i16 -615], [3 x i16] [i16 988, i16 357, i16 646], [3 x i16] [i16 1227, i16 667, i16 683], [3 x i16] [i16 1164, i16 1565, i16 894], [3 x i16] [i16 1392, i16 2015, i16 477], [3 x i16] [i16 1138, i16 533, i16 250], [3 x i16] [i16 1437, i16 896, i16 391], [3 x i16] [i16 1765, i16 1118, i16 99], [3 x i16] [i16 1112, i16 1090, i16 802], [3 x i16] [i16 1596, i16 846, i16 1134], [3 x i16] [i16 937, i16 1161, i16 279], [3 x i16] [i16 1719, i16 1254, i16 683], [3 x i16] [i16 1338, i16 1086, i16 35], [3 x i16] [i16 1419, i16 1324, i16 428], [3 x i16] [i16 1428, i16 1524, i16 40], [3 x i16] [i16 2108, i16 1594, i16 89], [3 x i16] [i16 1015, i16 544, i16 1222], [3 x i16] [i16 1121, i16 925, i16 1263], [3 x i16] [i16 1030, i16 1318, i16 1485], [3 x i16] [i16 1295, i16 789, i16 1817], [3 x i16] [i16 1323, i16 1272, i16 1909], [3 x i16] [i16 1724, i16 1237, i16 1803], [3 x i16] [i16 1797, i16 1689, i16 858], [3 x i16] [i16 2149, i16 1367, i16 1301], [3 x i16] [i16 2302, i16 1867, i16 761], [3 x i16] [i16 2863, i16 2351, i16 1053], [3 x i16] [i16 52, i16 163, i16 -76], [3 x i16] [i16 230, i16 309, i16 -492], [3 x i16] [i16 -71, i16 619, i16 39], [3 x i16] [i16 -218, i16 856, i16 499], [3 x i16] [i16 -654, i16 736, i16 -207], [3 x i16] [i16 -535, i16 1259, i16 155], [3 x i16] [i16 -480, i16 1476, i16 643], [3 x i16] [i16 262, i16 1081, i16 102], [3 x i16] [i16 309, i16 1592, i16 -182], [3 x i16] [i16 627, i16 1629, i16 534], [3 x i16] [i16 337, i16 643, i16 456], [3 x i16] [i16 758, i16 670, i16 713], [3 x i16] [i16 202, i16 1126, i16 658], [3 x i16] [i16 612, i16 1131, i16 666], [3 x i16] [i16 686, i16 1223, i16 1136], [3 x i16] [i16 -131, i16 377, i16 525], [3 x i16] [i16 42, i16 708, i16 907], [3 x i16] [i16 87, i16 1488, i16 1035], [3 x i16] [i16 432, i16 2117, i16 904], [3 x i16] [i16 137, i16 981, i16 1332], [3 x i16] [i16 -447, i16 1014, i16 1136], [3 x i16] [i16 -839, i16 1793, i16 1246], [3 x i16] [i16 -559, i16 297, i16 198], [3 x i16] [i16 -850, i16 685, i16 446], [3 x i16] [i16 -1273, i16 632, i16 826], [3 x i16] [i16 -401, i16 -544, i16 173], [3 x i16] [i16 -753, i16 -793, i16 144], [3 x i16] [i16 -436, i16 -9, i16 772], [3 x i16] [i16 -115, i16 -243, i16 1310], [3 x i16] [i16 -670, i16 -269, i16 374], [3 x i16] [i16 -1027, i16 -13, i16 639], [3 x i16] [i16 -887, i16 -81, i16 1137], [3 x i16] [i16 -1277, i16 -455, i16 158], [3 x i16] [i16 -1411, i16 -720, i16 736], [3 x i16] [i16 172, i16 88, i16 403], [3 x i16] [i16 386, i16 255, i16 756], [3 x i16] [i16 -500, i16 522, i16 910], [3 x i16] [i16 -958, i16 659, i16 1388], [3 x i16] [i16 -395, i16 301, i16 1344], [3 x i16] [i16 -356, i16 768, i16 1813], [3 x i16] [i16 -613, i16 841, i16 2419], [3 x i16] [i16 445, i16 -122, i16 252], [3 x i16] [i16 629, i16 -87, i16 723], [3 x i16] [i16 283, i16 -253, i16 870], [3 x i16] [i16 456, i16 -116, i16 1381], [3 x i16] [i16 757, i16 180, i16 1059], [3 x i16] [i16 532, i16 408, i16 1509], [3 x i16] [i16 947, i16 288, i16 1806], [3 x i16] [i16 1325, i16 994, i16 2524], [3 x i16] [i16 892, i16 1219, i16 3023], [3 x i16] [i16 1397, i16 1596, i16 3406], [3 x i16] [i16 1143, i16 1552, i16 2546], [3 x i16] [i16 1850, i16 1433, i16 2710], [3 x i16] [i16 -10, i16 134, i16 1002], [3 x i16] [i16 154, i16 499, i16 1323], [3 x i16] [i16 508, i16 792, i16 1117], [3 x i16] [i16 509, i16 1340, i16 1616], [3 x i16] [i16 762, i16 862, i16 1608], [3 x i16] [i16 787, i16 740, i16 2320], [3 x i16] [i16 794, i16 1727, i16 1283], [3 x i16] [i16 465, i16 2108, i16 1660], [3 x i16] [i16 -120, i16 1451, i16 1613], [3 x i16] [i16 -386, i16 2016, i16 2169], [3 x i16] [i16 891, i16 1225, i16 2050], [3 x i16] [i16 456, i16 1480, i16 2185], [3 x i16] [i16 1493, i16 1283, i16 1209], [3 x i16] [i16 1397, i16 1636, i16 1518], [3 x i16] [i16 1776, i16 1738, i16 1552], [3 x i16] [i16 1572, i16 1698, i16 2141], [3 x i16] [i16 1389, i16 2126, i16 1271], [3 x i16] [i16 1959, i16 2413, i16 1119], [3 x i16] [i16 1365, i16 2892, i16 1505], [3 x i16] [i16 2206, i16 1971, i16 1623], [3 x i16] [i16 2076, i16 1950, i16 2280], [3 x i16] [i16 1717, i16 2291, i16 1867], [3 x i16] [i16 2366, i16 2515, i16 1953], [3 x i16] [i16 2865, i16 2838, i16 2522], [3 x i16] [i16 2535, i16 3465, i16 2011], [3 x i16] [i16 3381, i16 4127, i16 2638], [3 x i16] [i16 836, i16 2667, i16 2289], [3 x i16] [i16 1761, i16 2773, i16 2337], [3 x i16] [i16 1415, i16 3325, i16 2911], [3 x i16] [i16 2354, i16 3138, i16 3126], [3 x i16] [i16 2659, i16 4192, i16 4010], [3 x i16] [i16 1048, i16 1786, i16 1818], [3 x i16] [i16 1242, i16 2111, i16 2240], [3 x i16] [i16 1512, i16 2079, i16 2780], [3 x i16] [i16 1573, i16 2491, i16 3138], [3 x i16] [i16 2230, i16 2377, i16 2782], [3 x i16] [i16 416, i16 1773, i16 2704], [3 x i16] [i16 725, i16 2336, i16 3297], [3 x i16] [i16 1252, i16 2373, i16 3978], [3 x i16] [i16 2094, i16 2268, i16 3568], [3 x i16] [i16 2011, i16 2712, i16 4528], [3 x i16] [i16 1341, i16 3507, i16 3876], [3 x i16] [i16 1216, i16 3919, i16 4922], [3 x i16] [i16 1693, i16 4793, i16 6012]], align 16
@lsp_band1 = internal constant [256 x [3 x i16]] [[3 x i16] zeroinitializer, [3 x i16] [i16 -2114, i16 -1302, i16 76], [3 x i16] [i16 -2652, i16 -1278, i16 -1368], [3 x i16] [i16 -2847, i16 -828, i16 -349], [3 x i16] [i16 -3812, i16 -2190, i16 -349], [3 x i16] [i16 -3946, i16 -364, i16 -449], [3 x i16] [i16 -2725, i16 -4492, i16 -3607], [3 x i16] [i16 -3495, i16 -4764, i16 -1744], [3 x i16] [i16 -51, i16 -756, i16 84], [3 x i16] [i16 -153, i16 -1191, i16 504], [3 x i16] [i16 108, i16 -1418, i16 1167], [3 x i16] [i16 -835, i16 -896, i16 390], [3 x i16] [i16 -569, i16 -1702, i16 87], [3 x i16] [i16 -1151, i16 -1818, i16 933], [3 x i16] [i16 -1826, i16 -2547, i16 411], [3 x i16] [i16 -1842, i16 -1818, i16 1451], [3 x i16] [i16 -2438, i16 -1611, i16 781], [3 x i16] [i16 -2747, i16 -2477, i16 1311], [3 x i16] [i16 -940, i16 1252, i16 477], [3 x i16] [i16 -1629, i16 1688, i16 602], [3 x i16] [i16 -1202, i16 617, i16 280], [3 x i16] [i16 -1737, i16 393, i16 580], [3 x i16] [i16 -1528, i16 1077, i16 1199], [3 x i16] [i16 -2165, i16 -161, i16 1408], [3 x i16] [i16 -2504, i16 -1087, i16 2371], [3 x i16] [i16 -3458, i16 -175, i16 1395], [3 x i16] [i16 -1397, i16 -98, i16 -843], [3 x i16] [i16 -2252, i16 -177, i16 -1149], [3 x i16] [i16 -1489, i16 -726, i16 -1283], [3 x i16] [i16 -1558, i16 -265, i16 -1744], [3 x i16] [i16 -1867, i16 -821, i16 -1897], [3 x i16] [i16 -2062, i16 -1516, i16 -2340], [3 x i16] [i16 -2595, i16 -1142, i16 -2861], [3 x i16] [i16 170, i16 46, i16 -819], [3 x i16] [i16 -193, i16 -204, i16 -1151], [3 x i16] [i16 326, i16 -196, i16 -1532], [3 x i16] [i16 780, i16 329, i16 -816], [3 x i16] [i16 201, i16 369, i16 -1243], [3 x i16] [i16 650, i16 -209, i16 -1060], [3 x i16] [i16 1144, i16 -15, i16 -1216], [3 x i16] [i16 1203, i16 -259, i16 -1867], [3 x i16] [i16 -890, i16 -564, i16 -1430], [3 x i16] [i16 -638, i16 -852, i16 -1921], [3 x i16] [i16 177, i16 -739, i16 -1358], [3 x i16] [i16 -261, i16 -526, i16 -1666], [3 x i16] [i16 206, i16 -407, i16 -2255], [3 x i16] [i16 338, i16 -526, i16 -822], [3 x i16] [i16 421, i16 -1095, i16 -1009], [3 x i16] [i16 765, i16 -607, i16 -1408], [3 x i16] [i16 825, i16 -1295, i16 -2004], [3 x i16] [i16 357, i16 -905, i16 -1815], [3 x i16] [i16 -58, i16 -1248, i16 -1588], [3 x i16] [i16 -596, i16 -1436, i16 -2046], [3 x i16] [i16 -73, i16 -1159, i16 -2116], [3 x i16] [i16 -115, i16 -1382, i16 -2581], [3 x i16] [i16 -160, i16 -1723, i16 -1952], [3 x i16] [i16 -6, i16 -2196, i16 -2954], [3 x i16] [i16 -649, i16 -1705, i16 -2603], [3 x i16] [i16 -617, i16 -1453, i16 -3282], [3 x i16] [i16 -949, i16 -2019, i16 -3102], [3 x i16] [i16 -812, i16 1544, i16 1937], [3 x i16] [i16 -1854, i16 574, i16 2000], [3 x i16] [i16 -1463, i16 1140, i16 2649], [3 x i16] [i16 -2683, i16 1748, i16 1452], [3 x i16] [i16 -2486, i16 2241, i16 2523], [3 x i16] [i16 783, i16 1910, i16 1435], [3 x i16] [i16 581, i16 2682, i16 1376], [3 x i16] [i16 236, i16 2197, i16 1885], [3 x i16] [i16 -453, i16 2943, i16 2057], [3 x i16] [i16 -682, i16 2178, i16 2565], [3 x i16] [i16 -1342, i16 3201, i16 3328], [3 x i16] [i16 -288, i16 -184, i16 262], [3 x i16] [i16 121, i16 -149, i16 -183], [3 x i16] [i16 758, i16 -412, i16 206], [3 x i16] [i16 1038, i16 -204, i16 853], [3 x i16] [i16 1577, i16 -457, i16 700], [3 x i16] [i16 937, i16 -640, i16 -567], [3 x i16] [i16 1508, i16 -528, i16 -1024], [3 x i16] [i16 -225, i16 -527, i16 -427], [3 x i16] [i16 -564, i16 -1095, i16 -332], [3 x i16] [i16 -742, i16 -353, i16 -186], [3 x i16] [i16 -1288, i16 -459, i16 84], [3 x i16] [i16 -1853, i16 -484, i16 -274], [3 x i16] [i16 -1554, i16 -731, i16 825], [3 x i16] [i16 -2425, i16 -234, i16 382], [3 x i16] [i16 -1722, i16 293, i16 -271], [3 x i16] [i16 -2515, i16 425, i16 -564], [3 x i16] [i16 -2599, i16 818, i16 464], [3 x i16] [i16 -358, i16 118, i16 -375], [3 x i16] [i16 -613, i16 198, i16 -874], [3 x i16] [i16 -690, i16 683, i16 -324], [3 x i16] [i16 -1352, i16 1155, i16 -168], [3 x i16] [i16 -1093, i16 129, i16 -324], [3 x i16] [i16 -1184, i16 611, i16 -858], [3 x i16] [i16 433, i16 386, i16 -372], [3 x i16] [i16 -120, i16 486, i16 -634], [3 x i16] [i16 234, i16 851, i16 -631], [3 x i16] [i16 602, i16 128, i16 46], [3 x i16] [i16 1099, i16 410, i16 159], [3 x i16] [i16 715, i16 -145, i16 -424], [3 x i16] [i16 1198, i16 -85, i16 -593], [3 x i16] [i16 1390, i16 367, i16 -358], [3 x i16] [i16 1683, i16 362, i16 -964], [3 x i16] [i16 1711, i16 622, i16 45], [3 x i16] [i16 2033, i16 833, i16 -383], [3 x i16] [i16 2890, i16 549, i16 -506], [3 x i16] [i16 7, i16 401, i16 52], [3 x i16] [i16 72, i16 811, i16 415], [3 x i16] [i16 566, i16 668, i16 41], [3 x i16] [i16 467, i16 1218, i16 130], [3 x i16] [i16 68, i16 957, i16 -187], [3 x i16] [i16 -25, i16 1649, i16 -103], [3 x i16] [i16 -661, i16 260, i16 214], [3 x i16] [i16 -925, i16 -94, i16 612], [3 x i16] [i16 -321, i16 -422, i16 965], [3 x i16] [i16 -788, i16 -672, i16 1783], [3 x i16] [i16 400, i16 -673, i16 779], [3 x i16] [i16 741, i16 -595, i16 1635], [3 x i16] [i16 -161, i16 307, i16 657], [3 x i16] [i16 -382, i16 836, i16 871], [3 x i16] [i16 -814, i16 400, i16 1223], [3 x i16] [i16 364, i16 606, i16 1247], [3 x i16] [i16 57, i16 75, i16 1571], [3 x i16] [i16 151, i16 471, i16 2287], [3 x i16] [i16 -81, i16 1021, i16 1502], [3 x i16] [i16 227, i16 1470, i16 1097], [3 x i16] [i16 658, i16 1275, i16 1653], [3 x i16] [i16 664, i16 1478, i16 2377], [3 x i16] [i16 263, i16 -127, i16 444], [3 x i16] [i16 264, i16 89, i16 969], [3 x i16] [i16 794, i16 171, i16 576], [3 x i16] [i16 821, i16 186, i16 1226], [3 x i16] [i16 404, i16 462, i16 517], [3 x i16] [i16 339, i16 918, i16 794], [3 x i16] [i16 1280, i16 1423, i16 196], [3 x i16] [i16 1453, i16 2019, i16 365], [3 x i16] [i16 1615, i16 1481, i16 672], [3 x i16] [i16 2394, i16 1708, i16 508], [3 x i16] [i16 806, i16 1238, i16 573], [3 x i16] [i16 713, i16 1158, i16 1078], [3 x i16] [i16 1285, i16 1436, i16 1232], [3 x i16] [i16 1790, i16 1188, i16 1141], [3 x i16] [i16 765, i16 643, i16 864], [3 x i16] [i16 1032, i16 797, i16 1279], [3 x i16] [i16 900, i16 563, i16 1827], [3 x i16] [i16 1514, i16 673, i16 2312], [3 x i16] [i16 1544, i16 1129, i16 3240], [3 x i16] [i16 1469, i16 1050, i16 1594], [3 x i16] [i16 1945, i16 1318, i16 1988], [3 x i16] [i16 2397, i16 2026, i16 2060], [3 x i16] [i16 3538, i16 2057, i16 2620], [3 x i16] [i16 1249, i16 -118, i16 74], [3 x i16] [i16 1727, i16 194, i16 421], [3 x i16] [i16 2078, i16 -50, i16 -463], [3 x i16] [i16 970, i16 688, i16 -432], [3 x i16] [i16 1149, i16 952, i16 -110], [3 x i16] [i16 1254, i16 1275, i16 -651], [3 x i16] [i16 1386, i16 929, i16 401], [3 x i16] [i16 1960, i16 1167, i16 232], [3 x i16] [i16 407, i16 -752, i16 -243], [3 x i16] [i16 859, i16 -1118, i16 172], [3 x i16] [i16 -227, i16 -860, i16 -992], [3 x i16] [i16 -796, i16 -1175, i16 -1380], [3 x i16] [i16 8, i16 -1282, i16 -388], [3 x i16] [i16 353, i16 -1781, i16 -1037], [3 x i16] [i16 -732, i16 -397, i16 -807], [3 x i16] [i16 -853, i16 -28, i16 -1342], [3 x i16] [i16 -1229, i16 -1207, i16 -1959], [3 x i16] [i16 -1015, i16 -1125, i16 -2543], [3 x i16] [i16 -1452, i16 -1791, i16 -2725], [3 x i16] [i16 -1891, i16 -2416, i16 -3269], [3 x i16] [i16 -918, i16 -1629, i16 -783], [3 x i16] [i16 -580, i16 -2155, i16 -698], [3 x i16] [i16 -1097, i16 -2364, i16 -96], [3 x i16] [i16 -1387, i16 -1513, i16 7], [3 x i16] [i16 -1588, i16 -2076, i16 -664], [3 x i16] [i16 -1473, i16 -2740, i16 -784], [3 x i16] [i16 -2378, i16 -3149, i16 -56], [3 x i16] [i16 -2856, i16 -2092, i16 -169], [3 x i16] [i16 -3391, i16 -3708, i16 316], [3 x i16] [i16 -1176, i16 -890, i16 -614], [3 x i16] [i16 -1944, i16 -1061, i16 -800], [3 x i16] [i16 -299, i16 -1517, i16 -1000], [3 x i16] [i16 -640, i16 -1850, i16 -1526], [3 x i16] [i16 -1454, i16 -1536, i16 -1233], [3 x i16] [i16 -1890, i16 -1955, i16 -1756], [3 x i16] [i16 -1086, i16 -1921, i16 -2122], [3 x i16] [i16 -750, i16 -2325, i16 -2260], [3 x i16] [i16 -1325, i16 -2413, i16 -2673], [3 x i16] [i16 -1114, i16 -2542, i16 -3459], [3 x i16] [i16 -1341, i16 -2901, i16 -3963], [3 x i16] [i16 -1160, i16 -2226, i16 -1393], [3 x i16] [i16 -1001, i16 -2772, i16 -1573], [3 x i16] [i16 -1594, i16 -2641, i16 -1978], [3 x i16] [i16 -1534, i16 -3046, i16 -2624], [3 x i16] [i16 -2224, i16 -2196, i16 -675], [3 x i16] [i16 -2807, i16 -3054, i16 -1102], [3 x i16] [i16 -2008, i16 -2840, i16 -1186], [3 x i16] [i16 -1980, i16 -3332, i16 -1695], [3 x i16] [i16 -1715, i16 -3562, i16 -505], [3 x i16] [i16 -2527, i16 -4000, i16 -1887], [3 x i16] [i16 -2333, i16 -2734, i16 -2296], [3 x i16] [i16 -3440, i16 -2401, i16 -3211], [3 x i16] [i16 -2008, i16 -3528, i16 -3337], [3 x i16] [i16 -2247, i16 -3291, i16 -4510], [3 x i16] [i16 -475, i16 949, i16 155], [3 x i16] [i16 -149, i16 1365, i16 545], [3 x i16] [i16 -757, i16 1644, i16 1083], [3 x i16] [i16 -217, i16 2053, i16 1353], [3 x i16] [i16 -1433, i16 2301, i16 1462], [3 x i16] [i16 495, i16 1661, i16 529], [3 x i16] [i16 10, i16 2037, i16 740], [3 x i16] [i16 2082, i16 1898, i16 978], [3 x i16] [i16 2831, i16 2294, i16 911], [3 x i16] [i16 842, i16 793, i16 420], [3 x i16] [i16 1223, i16 1023, i16 863], [3 x i16] [i16 1237, i16 451, i16 780], [3 x i16] [i16 1744, i16 708, i16 822], [3 x i16] [i16 1533, i16 284, i16 1384], [3 x i16] [i16 2135, i16 609, i16 1538], [3 x i16] [i16 2305, i16 626, i16 540], [3 x i16] [i16 2368, i16 1187, i16 955], [3 x i16] [i16 2586, i16 1255, i16 -7], [3 x i16] [i16 3116, i16 1131, i16 726], [3 x i16] [i16 3431, i16 1730, i16 428], [3 x i16] [i16 2734, i16 1648, i16 1307], [3 x i16] [i16 2988, i16 1231, i16 2010], [3 x i16] [i16 3523, i16 2024, i16 1488], [3 x i16] [i16 1034, i16 1657, i16 871], [3 x i16] [i16 1206, i16 2163, i16 1036], [3 x i16] [i16 1807, i16 2372, i16 1233], [3 x i16] [i16 1808, i16 1769, i16 1493], [3 x i16] [i16 1573, i16 2332, i16 1779], [3 x i16] [i16 1216, i16 1609, i16 1866], [3 x i16] [i16 1480, i16 1898, i16 2513], [3 x i16] [i16 465, i16 2708, i16 2776], [3 x i16] [i16 771, i16 3638, i16 3338], [3 x i16] [i16 1869, i16 2599, i16 2623], [3 x i16] [i16 2825, i16 2745, i16 2468], [3 x i16] [i16 2638, i16 2439, i16 1585], [3 x i16] [i16 2094, i16 2970, i16 1308], [3 x i16] [i16 2022, i16 3057, i16 1999], [3 x i16] [i16 3428, i16 2912, i16 1816], [3 x i16] [i16 4536, i16 2974, i16 2129], [3 x i16] [i16 1046, i16 2563, i16 2086], [3 x i16] [i16 1363, i16 3562, i16 2318], [3 x i16] [i16 2511, i16 1891, i16 2984], [3 x i16] [i16 1866, i16 2306, i16 3986], [3 x i16] [i16 3272, i16 2924, i16 3682], [3 x i16] [i16 3146, i16 3564, i16 2272], [3 x i16] [i16 3592, i16 3968, i16 2822], [3 x i16] [i16 2431, i16 3369, i16 3069], [3 x i16] [i16 1931, i16 4709, i16 3090], [3 x i16] [i16 2629, i16 4220, i16 3986], [3 x i16] [i16 4639, i16 4056, i16 3664], [3 x i16] [i16 4035, i16 5334, i16 4912]], align 16
@lsp_band2 = internal constant [256 x [4 x i16]] [[4 x i16] zeroinitializer, [4 x i16] [i16 601, i16 512, i16 -542, i16 334], [4 x i16] [i16 428, i16 1087, i16 -484, i16 -132], [4 x i16] [i16 652, i16 622, i16 -391, i16 -572], [4 x i16] [i16 378, i16 799, i16 141, i16 -860], [4 x i16] [i16 1040, i16 409, i16 112, i16 -554], [4 x i16] [i16 1123, i16 670, i16 -75, i16 -847], [4 x i16] [i16 1421, i16 494, i16 -315, i16 -1095], [4 x i16] [i16 787, i16 1001, i16 114, i16 -460], [4 x i16] [i16 988, i16 1672, i16 216, i16 -681], [4 x i16] [i16 1007, i16 1241, i16 -132, i16 -1247], [4 x i16] [i16 1073, i16 399, i16 186, i16 -5], [4 x i16] [i16 1262, i16 193, i16 -694, i16 -129], [4 x i16] [i16 325, i16 196, i16 51, i16 -641], [4 x i16] [i16 861, i16 -59, i16 350, i16 -458], [4 x i16] [i16 1261, i16 567, i16 586, i16 -346], [4 x i16] [i16 1532, i16 885, i16 210, i16 -517], [4 x i16] [i16 2027, i16 937, i16 113, i16 -792], [4 x i16] [i16 1383, i16 1064, i16 334, i16 38], [4 x i16] [i16 1964, i16 1468, i16 459, i16 133], [4 x i16] [i16 2062, i16 1186, i16 -98, i16 -121], [4 x i16] [i16 2577, i16 1445, i16 506, i16 -373], [4 x i16] [i16 2310, i16 1682, i16 -2, i16 -960], [4 x i16] [i16 2876, i16 1939, i16 765, i16 138], [4 x i16] [i16 3581, i16 2360, i16 649, i16 -414], [4 x i16] [i16 219, i16 176, i16 -398, i16 -309], [4 x i16] [i16 434, i16 -78, i16 -435, i16 -880], [4 x i16] [i16 -344, i16 301, i16 265, i16 -552], [4 x i16] [i16 -915, i16 470, i16 657, i16 -380], [4 x i16] [i16 419, i16 -432, i16 -163, i16 -453], [4 x i16] [i16 351, i16 -953, i16 8, i16 -562], [4 x i16] [i16 789, i16 -43, i16 20, i16 -958], [4 x i16] [i16 302, i16 -594, i16 -352, i16 -1159], [4 x i16] [i16 1040, i16 108, i16 -668, i16 -924], [4 x i16] [i16 1333, i16 210, i16 -1217, i16 -1663], [4 x i16] [i16 483, i16 589, i16 -350, i16 -1140], [4 x i16] [i16 1003, i16 824, i16 -802, i16 -1184], [4 x i16] [i16 745, i16 58, i16 -589, i16 -1443], [4 x i16] [i16 346, i16 247, i16 -915, i16 -1683], [4 x i16] [i16 270, i16 796, i16 -720, i16 -2043], [4 x i16] [i16 1208, i16 722, i16 -222, i16 -193], [4 x i16] [i16 1486, i16 1180, i16 -412, i16 -672], [4 x i16] [i16 1722, i16 179, i16 -69, i16 -521], [4 x i16] [i16 2047, i16 860, i16 -666, i16 -1410], [4 x i16] [i16 -146, i16 222, i16 -281, i16 -805], [4 x i16] [i16 -189, i16 90, i16 -114, i16 -1307], [4 x i16] [i16 -152, i16 1086, i16 -241, i16 -764], [4 x i16] [i16 -439, i16 733, i16 -601, i16 -1302], [4 x i16] [i16 -833, i16 -167, i16 -351, i16 -601], [4 x i16] [i16 -856, i16 -422, i16 -411, i16 -1059], [4 x i16] [i16 -747, i16 -355, i16 -582, i16 -1644], [4 x i16] [i16 -837, i16 210, i16 -916, i16 -1144], [4 x i16] [i16 -1800, i16 32, i16 -878, i16 -1687], [4 x i16] [i16 -48, i16 -23, i16 -1146, i16 52], [4 x i16] [i16 -350, i16 -409, i16 -1656, i16 -364], [4 x i16] [i16 265, i16 -728, i16 -858, i16 -577], [4 x i16] [i16 458, i16 -247, i16 -1141, i16 -997], [4 x i16] [i16 691, i16 -407, i16 -1988, i16 -1161], [4 x i16] [i16 -66, i16 -104, i16 -705, i16 -1249], [4 x i16] [i16 -431, i16 -93, i16 -1191, i16 -1844], [4 x i16] [i16 203, i16 -732, i16 -1000, i16 -1693], [4 x i16] [i16 10, i16 -832, i16 -1846, i16 -1819], [4 x i16] [i16 493, i16 -128, i16 -1436, i16 -1768], [4 x i16] [i16 488, i16 -311, i16 -1730, i16 -2540], [4 x i16] [i16 -653, i16 -532, i16 -1150, i16 -1172], [4 x i16] [i16 -1086, i16 -289, i16 -1706, i16 -1533], [4 x i16] [i16 -699, i16 -1205, i16 -1216, i16 -1766], [4 x i16] [i16 -1032, i16 -1481, i16 -2074, i16 -1523], [4 x i16] [i16 -721, i16 -1220, i16 -2277, i16 -2600], [4 x i16] [i16 12, i16 -539, i16 -1484, i16 -1131], [4 x i16] [i16 -40, i16 -911, i16 -2106, i16 -441], [4 x i16] [i16 -471, i16 -484, i16 -2267, i16 -1549], [4 x i16] [i16 -141, i16 -988, i16 -3006, i16 -1721], [4 x i16] [i16 -1545, i16 -2102, i16 -583, i16 342], [4 x i16] [i16 -1383, i16 -2772, i16 -386, i16 -13], [4 x i16] [i16 -2118, i16 -2589, i16 -1205, i16 72], [4 x i16] [i16 -2147, i16 -3231, i16 -965, i16 390], [4 x i16] [i16 -2949, i16 -3300, i16 -621, i16 637], [4 x i16] [i16 -3907, i16 -4138, i16 -865, i16 803], [4 x i16] [i16 -1287, i16 -845, i16 -375, i16 -548], [4 x i16] [i16 -1416, i16 -1169, i16 -487, i16 -1277], [4 x i16] [i16 -1400, i16 -1690, i16 -1027, i16 -418], [4 x i16] [i16 -2018, i16 -1909, i16 -1188, i16 -1260], [4 x i16] [i16 -1418, i16 -2222, i16 -2029, i16 -128], [4 x i16] [i16 -2067, i16 -2998, i16 -2693, i16 -310], [4 x i16] [i16 -950, i16 -1028, i16 -1538, i16 185], [4 x i16] [i16 -1616, i16 -915, i16 -2205, i16 -549], [4 x i16] [i16 19, i16 -821, i16 -1145, i16 352], [4 x i16] [i16 184, i16 -1175, i16 -1356, i16 -627], [4 x i16] [i16 -547, i16 -1088, i16 -1661, i16 -911], [4 x i16] [i16 -216, i16 -1502, i16 -2197, i16 -948], [4 x i16] [i16 -795, i16 -1306, i16 -2374, i16 -451], [4 x i16] [i16 -924, i16 -1889, i16 -2796, i16 -680], [4 x i16] [i16 -600, i16 -1614, i16 -3609, i16 -885], [4 x i16] [i16 -2392, i16 -2528, i16 319, i16 303], [4 x i16] [i16 -2908, i16 -2095, i16 -310, i16 573], [4 x i16] [i16 -3460, i16 -2141, i16 49, i16 -113], [4 x i16] [i16 -2231, i16 -448, i16 675, i16 -146], [4 x i16] [i16 -2805, i16 -532, i16 1231, i16 479], [4 x i16] [i16 -2684, i16 -486, i16 -200, i16 611], [4 x i16] [i16 -3525, i16 -971, i16 -198, i16 704], [4 x i16] [i16 -3707, i16 173, i16 349, i16 254], [4 x i16] [i16 -4734, i16 -1447, i16 -34, i16 880], [4 x i16] [i16 777, i16 -512, i16 114, i16 -10], [4 x i16] [i16 1250, i16 -66, i16 442, i16 -5], [4 x i16] [i16 604, i16 613, i16 452, i16 -352], [4 x i16] [i16 1224, i16 777, i16 675, i16 -1014], [4 x i16] [i16 -1372, i16 -79, i16 -1208, i16 -238], [4 x i16] [i16 -2389, i16 -17, i16 -1157, i16 -818], [4 x i16] [i16 -1504, i16 -673, i16 -1133, i16 -1060], [4 x i16] [i16 -1984, i16 -799, i16 -2005, i16 -1973], [4 x i16] [i16 -2037, i16 -798, i16 -1068, i16 -105], [4 x i16] [i16 -3190, i16 -899, i16 -1817, i16 -194], [4 x i16] [i16 -156, i16 -886, i16 394, i16 -318], [4 x i16] [i16 -258, i16 -1283, i16 551, i16 202], [4 x i16] [i16 -536, i16 -1729, i16 910, i16 331], [4 x i16] [i16 -847, i16 -1109, i16 795, i16 -163], [4 x i16] [i16 -1171, i16 -1128, i16 715, i16 519], [4 x i16] [i16 -1080, i16 -1319, i16 1685, i16 668], [4 x i16] [i16 -1000, i16 -1921, i16 96, i16 211], [4 x i16] [i16 -1487, i16 -2148, i16 831, i16 174], [4 x i16] [i16 -1139, i16 -374, i16 414, i16 -4], [4 x i16] [i16 -1517, i16 -1383, i16 396, i16 -352], [4 x i16] [i16 -1012, i16 439, i16 -59, i16 -967], [4 x i16] [i16 -1812, i16 706, i16 -440, i16 -1030], [4 x i16] [i16 -1971, i16 -329, i16 -34, i16 -827], [4 x i16] [i16 -2472, i16 -1588, i16 -151, i16 -606], [4 x i16] [i16 -2161, i16 374, i16 -281, i16 76], [4 x i16] [i16 -3012, i16 231, i16 -15, i16 -690], [4 x i16] [i16 1104, i16 566, i16 721, i16 209], [4 x i16] [i16 1685, i16 564, i16 383, i16 98], [4 x i16] [i16 1898, i16 750, i16 792, i16 -97], [4 x i16] [i16 556, i16 -64, i16 561, i16 -93], [4 x i16] [i16 876, i16 162, i16 913, i16 -22], [4 x i16] [i16 961, i16 675, i16 1296, i16 140], [4 x i16] [i16 756, i16 -396, i16 851, i16 544], [4 x i16] [i16 360, i16 -303, i16 1341, i16 396], [4 x i16] [i16 878, i16 -22, i16 1464, i16 863], [4 x i16] [i16 -309, i16 -273, i16 642, i16 -129], [4 x i16] [i16 -686, i16 -82, i16 842, i16 454], [4 x i16] [i16 -5, i16 -47, i16 1069, i16 998], [4 x i16] [i16 -94, i16 967, i16 1277, i16 298], [4 x i16] [i16 -489, i16 385, i16 1473, i16 746], [4 x i16] [i16 -369, i16 -717, i16 1333, i16 242], [4 x i16] [i16 281, i16 -993, i16 1726, i16 924], [4 x i16] [i16 464, i16 601, i16 1575, i16 1376], [4 x i16] [i16 -250, i16 206, i16 2339, i16 1175], [4 x i16] [i16 -438, i16 377, i16 -597, i16 -285], [4 x i16] [i16 -1020, i16 787, i16 -790, i16 -287], [4 x i16] [i16 -458, i16 -410, i16 215, i16 295], [4 x i16] [i16 -589, i16 -860, i16 -121, i16 797], [4 x i16] [i16 -1175, i16 122, i16 -437, i16 466], [4 x i16] [i16 -1480, i16 -121, i16 367, i16 924], [4 x i16] [i16 234, i16 323, i16 770, i16 -555], [4 x i16] [i16 145, i16 30, i16 996, i16 26], [4 x i16] [i16 66, i16 849, i16 93, i16 -145], [4 x i16] [i16 -117, i16 1261, i16 474, i16 -399], [4 x i16] [i16 -1495, i16 1051, i16 218, i16 -506], [4 x i16] [i16 -1390, i16 694, i16 994, i16 88], [4 x i16] [i16 616, i16 7, i16 78, i16 304], [4 x i16] [i16 1060, i16 52, i16 -62, i16 835], [4 x i16] [i16 833, i16 454, i16 649, i16 1359], [4 x i16] [i16 -770, i16 464, i16 47, i16 93], [4 x i16] [i16 -574, i16 1199, i16 -39, i16 379], [4 x i16] [i16 114, i16 -98, i16 488, i16 485], [4 x i16] [i16 727, i16 244, i16 606, i16 696], [4 x i16] [i16 -76, i16 455, i16 671, i16 546], [4 x i16] [i16 -565, i16 -13, i16 145, i16 819], [4 x i16] [i16 -376, i16 569, i16 448, i16 1128], [4 x i16] [i16 218, i16 122, i16 265, i16 1167], [4 x i16] [i16 230, i16 738, i16 932, i16 1003], [4 x i16] [i16 138, i16 477, i16 36, i16 450], [4 x i16] [i16 404, i16 787, i16 -73, i16 1000], [4 x i16] [i16 497, i16 1259, i16 387, i16 1231], [4 x i16] [i16 17, i16 207, i16 195, i16 -79], [4 x i16] [i16 562, i16 358, i16 53, i16 -158], [4 x i16] [i16 493, i16 387, i16 478, i16 189], [4 x i16] [i16 678, i16 831, i16 640, i16 558], [4 x i16] [i16 -197, i16 523, i16 613, i16 57], [4 x i16] [i16 429, i16 894, i16 769, i16 111], [4 x i16] [i16 67, i16 1174, i16 568, i16 511], [4 x i16] [i16 1242, i16 824, i16 251, i16 840], [4 x i16] [i16 1419, i16 1074, i16 864, i16 481], [4 x i16] [i16 924, i16 1474, i16 669, i16 724], [4 x i16] [i16 1539, i16 1879, i16 654, i16 1590], [4 x i16] [i16 445, i16 337, i16 1111, i16 541], [4 x i16] [i16 472, i16 1421, i16 1264, i16 1094], [4 x i16] [i16 794, i16 735, i16 1103, i16 668], [4 x i16] [i16 1055, i16 863, i16 1192, i16 1020], [4 x i16] [i16 778, i16 1105, i16 806, i16 1798], [4 x i16] [i16 1052, i16 1527, i16 1587, i16 2151], [4 x i16] [i16 881, i16 1552, i16 1265, i16 391], [4 x i16] [i16 726, i16 872, i16 1812, i16 601], [4 x i16] [i16 1469, i16 280, i16 1008, i16 616], [4 x i16] [i16 1403, i16 577, i16 1803, i16 1244], [4 x i16] [i16 1650, i16 1314, i16 1148, i16 1072], [4 x i16] [i16 1297, i16 1669, i16 1911, i16 1026], [4 x i16] [i16 2093, i16 1044, i16 2115, i16 1189], [4 x i16] [i16 1644, i16 1961, i16 2587, i16 1512], [4 x i16] [i16 25, i16 -315, i16 -9, i16 -106], [4 x i16] [i16 290, i16 -339, i16 428, i16 -444], [4 x i16] [i16 -68, i16 -783, i16 735, i16 772], [4 x i16] [i16 245, i16 -555, i16 468, i16 47], [4 x i16] [i16 334, i16 -895, i16 814, i16 146], [4 x i16] [i16 235, i16 368, i16 -964, i16 -959], [4 x i16] [i16 -203, i16 315, i16 -1566, i16 -1217], [4 x i16] [i16 801, i16 17, i16 -276, i16 -354], [4 x i16] [i16 894, i16 -495, i16 -789, i16 -635], [4 x i16] [i16 716, i16 291, i16 -1189, i16 -357], [4 x i16] [i16 560, i16 -260, i16 -733, i16 -2], [4 x i16] [i16 679, i16 -508, i16 -1429, i16 211], [4 x i16] [i16 -51, i16 -62, i16 -428, i16 557], [4 x i16] [i16 322, i16 -638, i16 -211, i16 614], [4 x i16] [i16 -878, i16 -1057, i16 -84, i16 -71], [4 x i16] [i16 -388, i16 -1415, i16 -167, i16 -318], [4 x i16] [i16 -754, i16 -1574, i16 214, i16 -539], [4 x i16] [i16 -1419, i16 -2004, i16 -92, i16 -787], [4 x i16] [i16 -47, i16 -856, i16 -347, i16 -255], [4 x i16] [i16 23, i16 -1211, i16 -173, i16 320], [4 x i16] [i16 -658, i16 -487, i16 -893, i16 353], [4 x i16] [i16 -783, i16 -1587, i16 -584, i16 507], [4 x i16] [i16 -1420, i16 -859, i16 -378, i16 441], [4 x i16] [i16 -2095, i16 -1491, i16 -137, i16 439], [4 x i16] [i16 -321, i16 -1450, i16 -1288, i16 -12], [4 x i16] [i16 -359, i16 -2113, i16 -553, i16 -8], [4 x i16] [i16 -831, i16 -1918, i16 -1561, i16 32], [4 x i16] [i16 -1014, i16 -2487, i16 -1359, i16 -939], [4 x i16] [i16 -475, i16 -311, i16 -169, i16 -236], [4 x i16] [i16 -907, i16 -426, i16 276, i16 -611], [4 x i16] [i16 -96, i16 -400, i16 50, i16 -710], [4 x i16] [i16 -426, i16 -1022, i16 -10, i16 -985], [4 x i16] [i16 -197, i16 -258, i16 -744, i16 -575], [4 x i16] [i16 -611, i16 -930, i16 -771, i16 -394], [4 x i16] [i16 -267, i16 -776, i16 -612, i16 -939], [4 x i16] [i16 -256, i16 -1346, i16 -802, i16 -1122], [4 x i16] [i16 -796, i16 -1570, i16 -825, i16 -754], [4 x i16] [i16 712, i16 876, i16 141, i16 227], [4 x i16] [i16 981, i16 1509, i16 85, i16 124], [4 x i16] [i16 1462, i16 1228, i16 979, i16 -39], [4 x i16] [i16 1734, i16 999, i16 1481, i16 440], [4 x i16] [i16 2293, i16 1116, i16 769, i16 440], [4 x i16] [i16 2504, i16 1480, i16 1241, i16 356], [4 x i16] [i16 2474, i16 1909, i16 1558, i16 810], [4 x i16] [i16 917, i16 1134, i16 607, i16 -134], [4 x i16] [i16 509, i16 1809, i16 781, i16 -123], [4 x i16] [i16 1712, i16 1506, i16 559, i16 -423], [4 x i16] [i16 2037, i16 2317, i16 726, i16 -155], [4 x i16] [i16 3031, i16 2676, i16 1203, i16 331], [4 x i16] [i16 3664, i16 3274, i16 1768, i16 531], [4 x i16] [i16 1610, i16 1839, i16 867, i16 183], [4 x i16] [i16 1774, i16 1972, i16 1538, i16 97], [4 x i16] [i16 1822, i16 2158, i16 1282, i16 659], [4 x i16] [i16 2222, i16 2758, i16 1818, i16 900], [4 x i16] [i16 3251, i16 2124, i16 1723, i16 996], [4 x i16] [i16 3633, i16 2336, i16 2408, i16 1453], [4 x i16] [i16 2923, i16 3517, i16 2567, i16 1318]], align 16
@dc_lsp = internal constant [10 x i16] [i16 3131, i16 4721, i16 7690, i16 10806, i16 13872, i16 16495, i16 19752, i16 22260, i16 25484, i16 27718], align 16
@cos_tab = internal constant [513 x i16] [i16 16384, i16 16383, i16 16379, i16 16373, i16 16364, i16 16353, i16 16340, i16 16324, i16 16305, i16 16284, i16 16261, i16 16235, i16 16207, i16 16176, i16 16143, i16 16107, i16 16069, i16 16029, i16 15986, i16 15941, i16 15893, i16 15843, i16 15791, i16 15736, i16 15679, i16 15619, i16 15557, i16 15493, i16 15426, i16 15357, i16 15286, i16 15213, i16 15137, i16 15059, i16 14978, i16 14896, i16 14811, i16 14724, i16 14635, i16 14543, i16 14449, i16 14354, i16 14256, i16 14155, i16 14053, i16 13949, i16 13842, i16 13733, i16 13623, i16 13510, i16 13395, i16 13279, i16 13160, i16 13039, i16 12916, i16 12792, i16 12665, i16 12537, i16 12406, i16 12274, i16 12140, i16 12004, i16 11866, i16 11727, i16 11585, i16 11442, i16 11297, i16 11151, i16 11003, i16 10853, i16 10702, i16 10549, i16 10394, i16 10238, i16 10080, i16 9921, i16 9760, i16 9598, i16 9434, i16 9269, i16 9102, i16 8935, i16 8765, i16 8595, i16 8423, i16 8250, i16 8076, i16 7900, i16 7723, i16 7545, i16 7366, i16 7186, i16 7005, i16 6823, i16 6639, i16 6455, i16 6270, i16 6084, i16 5897, i16 5708, i16 5520, i16 5330, i16 5139, i16 4948, i16 4756, i16 4563, i16 4370, i16 4176, i16 3981, i16 3786, i16 3590, i16 3393, i16 3196, i16 2999, i16 2801, i16 2603, i16 2404, i16 2205, i16 2006, i16 1806, i16 1606, i16 1406, i16 1205, i16 1005, i16 804, i16 603, i16 402, i16 201, i16 0, i16 -201, i16 -402, i16 -603, i16 -804, i16 -1005, i16 -1205, i16 -1406, i16 -1606, i16 -1806, i16 -2006, i16 -2205, i16 -2404, i16 -2603, i16 -2801, i16 -2999, i16 -3196, i16 -3393, i16 -3590, i16 -3786, i16 -3981, i16 -4176, i16 -4370, i16 -4563, i16 -4756, i16 -4948, i16 -5139, i16 -5330, i16 -5520, i16 -5708, i16 -5897, i16 -6084, i16 -6270, i16 -6455, i16 -6639, i16 -6823, i16 -7005, i16 -7186, i16 -7366, i16 -7545, i16 -7723, i16 -7900, i16 -8076, i16 -8250, i16 -8423, i16 -8595, i16 -8765, i16 -8935, i16 -9102, i16 -9269, i16 -9434, i16 -9598, i16 -9760, i16 -9921, i16 -10080, i16 -10238, i16 -10394, i16 -10549, i16 -10702, i16 -10853, i16 -11003, i16 -11151, i16 -11297, i16 -11442, i16 -11585, i16 -11727, i16 -11866, i16 -12004, i16 -12140, i16 -12274, i16 -12406, i16 -12537, i16 -12665, i16 -12792, i16 -12916, i16 -13039, i16 -13160, i16 -13279, i16 -13395, i16 -13510, i16 -13623, i16 -13733, i16 -13842, i16 -13949, i16 -14053, i16 -14155, i16 -14256, i16 -14354, i16 -14449, i16 -14543, i16 -14635, i16 -14724, i16 -14811, i16 -14896, i16 -14978, i16 -15059, i16 -15137, i16 -15213, i16 -15286, i16 -15357, i16 -15426, i16 -15493, i16 -15557, i16 -15619, i16 -15679, i16 -15736, i16 -15791, i16 -15843, i16 -15893, i16 -15941, i16 -15986, i16 -16029, i16 -16069, i16 -16107, i16 -16143, i16 -16176, i16 -16207, i16 -16235, i16 -16261, i16 -16284, i16 -16305, i16 -16324, i16 -16340, i16 -16353, i16 -16364, i16 -16373, i16 -16379, i16 -16383, i16 -16384, i16 -16383, i16 -16379, i16 -16373, i16 -16364, i16 -16353, i16 -16340, i16 -16324, i16 -16305, i16 -16284, i16 -16261, i16 -16235, i16 -16207, i16 -16176, i16 -16143, i16 -16107, i16 -16069, i16 -16029, i16 -15986, i16 -15941, i16 -15893, i16 -15843, i16 -15791, i16 -15736, i16 -15679, i16 -15619, i16 -15557, i16 -15493, i16 -15426, i16 -15357, i16 -15286, i16 -15213, i16 -15137, i16 -15059, i16 -14978, i16 -14896, i16 -14811, i16 -14724, i16 -14635, i16 -14543, i16 -14449, i16 -14354, i16 -14256, i16 -14155, i16 -14053, i16 -13949, i16 -13842, i16 -13733, i16 -13623, i16 -13510, i16 -13395, i16 -13279, i16 -13160, i16 -13039, i16 -12916, i16 -12792, i16 -12665, i16 -12537, i16 -12406, i16 -12274, i16 -12140, i16 -12004, i16 -11866, i16 -11727, i16 -11585, i16 -11442, i16 -11297, i16 -11151, i16 -11003, i16 -10853, i16 -10702, i16 -10549, i16 -10394, i16 -10238, i16 -10080, i16 -9921, i16 -9760, i16 -9598, i16 -9434, i16 -9269, i16 -9102, i16 -8935, i16 -8765, i16 -8595, i16 -8423, i16 -8250, i16 -8076, i16 -7900, i16 -7723, i16 -7545, i16 -7366, i16 -7186, i16 -7005, i16 -6823, i16 -6639, i16 -6455, i16 -6270, i16 -6084, i16 -5897, i16 -5708, i16 -5520, i16 -5330, i16 -5139, i16 -4948, i16 -4756, i16 -4563, i16 -4370, i16 -4176, i16 -3981, i16 -3786, i16 -3590, i16 -3393, i16 -3196, i16 -2999, i16 -2801, i16 -2603, i16 -2404, i16 -2205, i16 -2006, i16 -1806, i16 -1606, i16 -1406, i16 -1205, i16 -1005, i16 -804, i16 -603, i16 -402, i16 -201, i16 0, i16 201, i16 402, i16 603, i16 804, i16 1005, i16 1205, i16 1406, i16 1606, i16 1806, i16 2006, i16 2205, i16 2404, i16 2603, i16 2801, i16 2999, i16 3196, i16 3393, i16 3590, i16 3786, i16 3981, i16 4176, i16 4370, i16 4563, i16 4756, i16 4948, i16 5139, i16 5330, i16 5520, i16 5708, i16 5897, i16 6084, i16 6270, i16 6455, i16 6639, i16 6823, i16 7005, i16 7186, i16 7366, i16 7545, i16 7723, i16 7900, i16 8076, i16 8250, i16 8423, i16 8595, i16 8765, i16 8935, i16 9102, i16 9269, i16 9434, i16 9598, i16 9760, i16 9921, i16 10080, i16 10238, i16 10394, i16 10549, i16 10702, i16 10853, i16 11003, i16 11151, i16 11297, i16 11442, i16 11585, i16 11727, i16 11866, i16 12004, i16 12140, i16 12274, i16 12406, i16 12537, i16 12665, i16 12792, i16 12916, i16 13039, i16 13160, i16 13279, i16 13395, i16 13510, i16 13623, i16 13733, i16 13842, i16 13949, i16 14053, i16 14155, i16 14256, i16 14354, i16 14449, i16 14543, i16 14635, i16 14724, i16 14811, i16 14896, i16 14978, i16 15059, i16 15137, i16 15213, i16 15286, i16 15357, i16 15426, i16 15493, i16 15557, i16 15619, i16 15679, i16 15736, i16 15791, i16 15843, i16 15893, i16 15941, i16 15986, i16 16029, i16 16069, i16 16107, i16 16143, i16 16176, i16 16207, i16 16235, i16 16261, i16 16284, i16 16305, i16 16324, i16 16340, i16 16353, i16 16364, i16 16373, i16 16379, i16 16383, i16 16384], align 16

; Function Attrs: nounwind uwtable
define i32 @ff_g723_1_scale_vector(i16* %dst, i16* %vector, i32 %length) #0 !dbg !47 {
entry:
  %dst.addr = alloca i16*, align 8
  %vector.addr = alloca i16*, align 8
  %length.addr = alloca i32, align 4
  %bits = alloca i32, align 4
  %max = alloca i32, align 4
  %i = alloca i32, align 4
  store i16* %dst, i16** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %dst.addr, metadata !54, metadata !55), !dbg !56
  store i16* %vector, i16** %vector.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %vector.addr, metadata !57, metadata !55), !dbg !58
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !59, metadata !55), !dbg !60
  call void @llvm.dbg.declare(metadata i32* %bits, metadata !61, metadata !55), !dbg !62
  call void @llvm.dbg.declare(metadata i32* %max, metadata !63, metadata !55), !dbg !64
  store i32 0, i32* %max, align 4, !dbg !64
  call void @llvm.dbg.declare(metadata i32* %i, metadata !65, metadata !55), !dbg !66
  store i32 0, i32* %i, align 4, !dbg !67
  br label %for.cond, !dbg !69

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !70
  %1 = load i32, i32* %length.addr, align 4, !dbg !73
  %cmp = icmp slt i32 %0, %1, !dbg !74
  br i1 %cmp, label %for.body, label %for.end, !dbg !75

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !76
  %idxprom = sext i32 %2 to i64, !dbg !77
  %3 = load i16*, i16** %vector.addr, align 8, !dbg !77
  %arrayidx = getelementptr inbounds i16, i16* %3, i64 %idxprom, !dbg !77
  %4 = load i16, i16* %arrayidx, align 2, !dbg !77
  %conv = sext i16 %4 to i32, !dbg !78
  %cmp1 = icmp sge i32 %conv, 0, !dbg !79
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !78

cond.true:                                        ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !80
  %idxprom3 = sext i32 %5 to i64, !dbg !81
  %6 = load i16*, i16** %vector.addr, align 8, !dbg !81
  %arrayidx4 = getelementptr inbounds i16, i16* %6, i64 %idxprom3, !dbg !81
  %7 = load i16, i16* %arrayidx4, align 2, !dbg !81
  %conv5 = sext i16 %7 to i32, !dbg !82
  br label %cond.end, !dbg !83

cond.false:                                       ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !84
  %idxprom6 = sext i32 %8 to i64, !dbg !86
  %9 = load i16*, i16** %vector.addr, align 8, !dbg !86
  %arrayidx7 = getelementptr inbounds i16, i16* %9, i64 %idxprom6, !dbg !86
  %10 = load i16, i16* %arrayidx7, align 2, !dbg !86
  %conv8 = sext i16 %10 to i32, !dbg !87
  %sub = sub nsw i32 0, %conv8, !dbg !88
  br label %cond.end, !dbg !89

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %sub, %cond.false ], !dbg !90
  %11 = load i32, i32* %max, align 4, !dbg !92
  %or = or i32 %11, %cond, !dbg !92
  store i32 %or, i32* %max, align 4, !dbg !92
  br label %for.inc, !dbg !93

for.inc:                                          ; preds = %cond.end
  %12 = load i32, i32* %i, align 4, !dbg !94
  %inc = add nsw i32 %12, 1, !dbg !94
  store i32 %inc, i32* %i, align 4, !dbg !94
  br label %for.cond, !dbg !95, !llvm.loop !96

for.end:                                          ; preds = %for.cond
  %13 = load i32, i32* %max, align 4, !dbg !98
  %or9 = or i32 %13, 1, !dbg !99
  %14 = call i32 @llvm.ctlz.i32(i32 %or9, i1 true), !dbg !100
  %sub10 = sub nsw i32 31, %14, !dbg !101
  %sub11 = sub nsw i32 14, %sub10, !dbg !102
  store i32 %sub11, i32* %bits, align 4, !dbg !103
  %15 = load i32, i32* %bits, align 4, !dbg !104
  %cmp12 = icmp sgt i32 %15, 0, !dbg !105
  br i1 %cmp12, label %cond.true14, label %cond.false15, !dbg !106

cond.true14:                                      ; preds = %for.end
  %16 = load i32, i32* %bits, align 4, !dbg !107
  br label %cond.end16, !dbg !109

cond.false15:                                     ; preds = %for.end
  br label %cond.end16, !dbg !110

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i32 [ %16, %cond.true14 ], [ 0, %cond.false15 ], !dbg !112
  store i32 %cond17, i32* %bits, align 4, !dbg !114
  store i32 0, i32* %i, align 4, !dbg !115
  br label %for.cond18, !dbg !117

for.cond18:                                       ; preds = %for.inc28, %cond.end16
  %17 = load i32, i32* %i, align 4, !dbg !118
  %18 = load i32, i32* %length.addr, align 4, !dbg !121
  %cmp19 = icmp slt i32 %17, %18, !dbg !122
  br i1 %cmp19, label %for.body21, label %for.end30, !dbg !123

for.body21:                                       ; preds = %for.cond18
  %19 = load i32, i32* %i, align 4, !dbg !124
  %idxprom22 = sext i32 %19 to i64, !dbg !125
  %20 = load i16*, i16** %vector.addr, align 8, !dbg !125
  %arrayidx23 = getelementptr inbounds i16, i16* %20, i64 %idxprom22, !dbg !125
  %21 = load i16, i16* %arrayidx23, align 2, !dbg !125
  %conv24 = sext i16 %21 to i32, !dbg !125
  %22 = load i32, i32* %bits, align 4, !dbg !126
  %shl = shl i32 1, %22, !dbg !127
  %mul = mul nsw i32 %conv24, %shl, !dbg !128
  %shr = ashr i32 %mul, 3, !dbg !129
  %conv25 = trunc i32 %shr to i16, !dbg !130
  %23 = load i32, i32* %i, align 4, !dbg !131
  %idxprom26 = sext i32 %23 to i64, !dbg !132
  %24 = load i16*, i16** %dst.addr, align 8, !dbg !132
  %arrayidx27 = getelementptr inbounds i16, i16* %24, i64 %idxprom26, !dbg !132
  store i16 %conv25, i16* %arrayidx27, align 2, !dbg !133
  br label %for.inc28, !dbg !132

for.inc28:                                        ; preds = %for.body21
  %25 = load i32, i32* %i, align 4, !dbg !134
  %inc29 = add nsw i32 %25, 1, !dbg !134
  store i32 %inc29, i32* %i, align 4, !dbg !134
  br label %for.cond18, !dbg !136, !llvm.loop !137

for.end30:                                        ; preds = %for.cond18
  %26 = load i32, i32* %bits, align 4, !dbg !139
  %sub31 = sub nsw i32 %26, 3, !dbg !140
  ret i32 %sub31, !dbg !141
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #1

; Function Attrs: nounwind uwtable
define i32 @ff_g723_1_normalize_bits(i32 %num, i32 %width) #0 !dbg !142 {
entry:
  %num.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !145, metadata !55), !dbg !146
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !147, metadata !55), !dbg !148
  %0 = load i32, i32* %width.addr, align 4, !dbg !149
  %1 = load i32, i32* %num.addr, align 4, !dbg !150
  %or = or i32 %1, 1, !dbg !151
  %2 = call i32 @llvm.ctlz.i32(i32 %or, i1 true), !dbg !152
  %sub = sub nsw i32 31, %2, !dbg !153
  %sub1 = sub nsw i32 %0, %sub, !dbg !154
  %sub2 = sub nsw i32 %sub1, 1, !dbg !155
  ret i32 %sub2, !dbg !156
}

; Function Attrs: nounwind uwtable
define i32 @ff_g723_1_dot_product(i16* %a, i16* %b, i32 %length) #0 !dbg !157 {
entry:
  %retval.i.i = alloca i32, align 4
  %a.addr.i.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr.i.i, metadata !160, metadata !55), !dbg !165
  %a.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i, metadata !169, metadata !55), !dbg !170
  %b.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr.i, metadata !171, metadata !55), !dbg !172
  %a.addr = alloca i16*, align 8
  %b.addr = alloca i16*, align 8
  %length.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  store i16* %a, i16** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %a.addr, metadata !173, metadata !55), !dbg !174
  store i16* %b, i16** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %b.addr, metadata !175, metadata !55), !dbg !176
  store i32 %length, i32* %length.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %length.addr, metadata !177, metadata !55), !dbg !178
  call void @llvm.dbg.declare(metadata i32* %sum, metadata !179, metadata !55), !dbg !180
  %0 = load i16*, i16** %a.addr, align 8, !dbg !181
  %1 = load i16*, i16** %b.addr, align 8, !dbg !182
  %2 = load i32, i32* %length.addr, align 4, !dbg !183
  %call = call i64 @ff_dot_product(i16* %0, i16* %1, i32 %2), !dbg !184
  %conv = trunc i64 %call to i32, !dbg !184
  store i32 %conv, i32* %sum, align 4, !dbg !180
  %3 = load i32, i32* %sum, align 4, !dbg !185
  %4 = load i32, i32* %sum, align 4, !dbg !186
  store i32 %3, i32* %a.addr.i, align 4, !dbg !187
  store i32 %4, i32* %b.addr.i, align 4, !dbg !187
  %5 = load i32, i32* %a.addr.i, align 4, !dbg !188
  %conv.i = sext i32 %5 to i64, !dbg !189
  %6 = load i32, i32* %b.addr.i, align 4, !dbg !190
  %conv1.i = sext i32 %6 to i64, !dbg !190
  %add.i = add nsw i64 %conv.i, %conv1.i, !dbg !191
  store i64 %add.i, i64* %a.addr.i.i, align 8, !dbg !192
  %7 = load i64, i64* %a.addr.i.i, align 8, !dbg !193
  %add.i.i = add nsw i64 %7, 2147483648, !dbg !195
  %and.i.i = and i64 %add.i.i, -4294967296, !dbg !196
  %tobool.i.i = icmp ne i64 %and.i.i, 0, !dbg !196
  br i1 %tobool.i.i, label %if.then.i.i, label %if.else.i.i, !dbg !197

if.then.i.i:                                      ; preds = %entry
  %8 = load i64, i64* %a.addr.i.i, align 8, !dbg !198
  %shr.i.i = ashr i64 %8, 63, !dbg !200
  %xor.i.i = xor i64 %shr.i.i, 2147483647, !dbg !201
  %conv.i.i = trunc i64 %xor.i.i to i32, !dbg !202
  store i32 %conv.i.i, i32* %retval.i.i, align 4, !dbg !203
  br label %av_sat_add32_c.exit, !dbg !203

if.else.i.i:                                      ; preds = %entry
  %9 = load i64, i64* %a.addr.i.i, align 8, !dbg !204
  %conv1.i.i = trunc i64 %9 to i32, !dbg !205
  store i32 %conv1.i.i, i32* %retval.i.i, align 4, !dbg !206
  br label %av_sat_add32_c.exit, !dbg !206

av_sat_add32_c.exit:                              ; preds = %if.then.i.i, %if.else.i.i
  %10 = load i32, i32* %retval.i.i, align 4, !dbg !207
  ret i32 %10, !dbg !208
}

declare i64 @ff_dot_product(i16*, i16*, i32) #2

; Function Attrs: nounwind uwtable
define void @ff_g723_1_get_residual(i16* %residual, i16* %prev_excitation, i32 %lag) #0 !dbg !209 {
entry:
  %residual.addr = alloca i16*, align 8
  %prev_excitation.addr = alloca i16*, align 8
  %lag.addr = alloca i32, align 4
  %offset = alloca i32, align 4
  %i = alloca i32, align 4
  store i16* %residual, i16** %residual.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %residual.addr, metadata !212, metadata !55), !dbg !213
  store i16* %prev_excitation, i16** %prev_excitation.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %prev_excitation.addr, metadata !214, metadata !55), !dbg !215
  store i32 %lag, i32* %lag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %lag.addr, metadata !216, metadata !55), !dbg !217
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !218, metadata !55), !dbg !219
  %0 = load i32, i32* %lag.addr, align 4, !dbg !220
  %sub = sub nsw i32 143, %0, !dbg !221
  store i32 %sub, i32* %offset, align 4, !dbg !219
  call void @llvm.dbg.declare(metadata i32* %i, metadata !222, metadata !55), !dbg !223
  %1 = load i32, i32* %offset, align 4, !dbg !224
  %idxprom = sext i32 %1 to i64, !dbg !225
  %2 = load i16*, i16** %prev_excitation.addr, align 8, !dbg !225
  %arrayidx = getelementptr inbounds i16, i16* %2, i64 %idxprom, !dbg !225
  %3 = load i16, i16* %arrayidx, align 2, !dbg !225
  %4 = load i16*, i16** %residual.addr, align 8, !dbg !226
  %arrayidx1 = getelementptr inbounds i16, i16* %4, i64 0, !dbg !226
  store i16 %3, i16* %arrayidx1, align 2, !dbg !227
  %5 = load i32, i32* %offset, align 4, !dbg !228
  %add = add nsw i32 %5, 1, !dbg !229
  %idxprom2 = sext i32 %add to i64, !dbg !230
  %6 = load i16*, i16** %prev_excitation.addr, align 8, !dbg !230
  %arrayidx3 = getelementptr inbounds i16, i16* %6, i64 %idxprom2, !dbg !230
  %7 = load i16, i16* %arrayidx3, align 2, !dbg !230
  %8 = load i16*, i16** %residual.addr, align 8, !dbg !231
  %arrayidx4 = getelementptr inbounds i16, i16* %8, i64 1, !dbg !231
  store i16 %7, i16* %arrayidx4, align 2, !dbg !232
  %9 = load i32, i32* %offset, align 4, !dbg !233
  %add5 = add nsw i32 %9, 2, !dbg !233
  store i32 %add5, i32* %offset, align 4, !dbg !233
  store i32 2, i32* %i, align 4, !dbg !234
  br label %for.cond, !dbg !236

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %i, align 4, !dbg !237
  %cmp = icmp slt i32 %10, 64, !dbg !240
  br i1 %cmp, label %for.body, label %for.end, !dbg !241

for.body:                                         ; preds = %for.cond
  %11 = load i32, i32* %offset, align 4, !dbg !242
  %12 = load i32, i32* %i, align 4, !dbg !243
  %sub6 = sub nsw i32 %12, 2, !dbg !244
  %13 = load i32, i32* %lag.addr, align 4, !dbg !245
  %rem = srem i32 %sub6, %13, !dbg !246
  %add7 = add nsw i32 %11, %rem, !dbg !247
  %idxprom8 = sext i32 %add7 to i64, !dbg !248
  %14 = load i16*, i16** %prev_excitation.addr, align 8, !dbg !248
  %arrayidx9 = getelementptr inbounds i16, i16* %14, i64 %idxprom8, !dbg !248
  %15 = load i16, i16* %arrayidx9, align 2, !dbg !248
  %16 = load i32, i32* %i, align 4, !dbg !249
  %idxprom10 = sext i32 %16 to i64, !dbg !250
  %17 = load i16*, i16** %residual.addr, align 8, !dbg !250
  %arrayidx11 = getelementptr inbounds i16, i16* %17, i64 %idxprom10, !dbg !250
  store i16 %15, i16* %arrayidx11, align 2, !dbg !251
  br label %for.inc, !dbg !250

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !dbg !252
  %inc = add nsw i32 %18, 1, !dbg !252
  store i32 %inc, i32* %i, align 4, !dbg !252
  br label %for.cond, !dbg !254, !llvm.loop !255

for.end:                                          ; preds = %for.cond
  ret void, !dbg !257
}

; Function Attrs: nounwind uwtable
define void @ff_g723_1_gen_dirac_train(i16* %buf, i32 %pitch_lag) #0 !dbg !258 {
entry:
  %buf.addr = alloca i16*, align 8
  %pitch_lag.addr = alloca i32, align 4
  %vector = alloca [60 x i16], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i16* %buf, i16** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %buf.addr, metadata !261, metadata !55), !dbg !262
  store i32 %pitch_lag, i32* %pitch_lag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pitch_lag.addr, metadata !263, metadata !55), !dbg !264
  call void @llvm.dbg.declare(metadata [60 x i16]* %vector, metadata !265, metadata !55), !dbg !269
  call void @llvm.dbg.declare(metadata i32* %i, metadata !270, metadata !55), !dbg !271
  call void @llvm.dbg.declare(metadata i32* %j, metadata !272, metadata !55), !dbg !273
  %arraydecay = getelementptr inbounds [60 x i16], [60 x i16]* %vector, i32 0, i32 0, !dbg !274
  %0 = bitcast i16* %arraydecay to i8*, !dbg !274
  %1 = load i16*, i16** %buf.addr, align 8, !dbg !275
  %2 = bitcast i16* %1 to i8*, !dbg !274
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %2, i64 120, i32 2, i1 false), !dbg !274
  %3 = load i32, i32* %pitch_lag.addr, align 4, !dbg !276
  store i32 %3, i32* %i, align 4, !dbg !278
  br label %for.cond, !dbg !279

for.cond:                                         ; preds = %for.inc9, %entry
  %4 = load i32, i32* %i, align 4, !dbg !280
  %cmp = icmp slt i32 %4, 60, !dbg !283
  br i1 %cmp, label %for.body, label %for.end11, !dbg !284

for.body:                                         ; preds = %for.cond
  store i32 0, i32* %j, align 4, !dbg !285
  br label %for.cond1, !dbg !288

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load i32, i32* %j, align 4, !dbg !289
  %6 = load i32, i32* %i, align 4, !dbg !292
  %sub = sub nsw i32 60, %6, !dbg !293
  %cmp2 = icmp slt i32 %5, %sub, !dbg !294
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !295

for.body3:                                        ; preds = %for.cond1
  %7 = load i32, i32* %j, align 4, !dbg !296
  %idxprom = sext i32 %7 to i64, !dbg !297
  %arrayidx = getelementptr inbounds [60 x i16], [60 x i16]* %vector, i64 0, i64 %idxprom, !dbg !297
  %8 = load i16, i16* %arrayidx, align 2, !dbg !297
  %conv = sext i16 %8 to i32, !dbg !297
  %9 = load i32, i32* %i, align 4, !dbg !298
  %10 = load i32, i32* %j, align 4, !dbg !299
  %add = add nsw i32 %9, %10, !dbg !300
  %idxprom4 = sext i32 %add to i64, !dbg !301
  %11 = load i16*, i16** %buf.addr, align 8, !dbg !301
  %arrayidx5 = getelementptr inbounds i16, i16* %11, i64 %idxprom4, !dbg !301
  %12 = load i16, i16* %arrayidx5, align 2, !dbg !302
  %conv6 = sext i16 %12 to i32, !dbg !302
  %add7 = add nsw i32 %conv6, %conv, !dbg !302
  %conv8 = trunc i32 %add7 to i16, !dbg !302
  store i16 %conv8, i16* %arrayidx5, align 2, !dbg !302
  br label %for.inc, !dbg !301

for.inc:                                          ; preds = %for.body3
  %13 = load i32, i32* %j, align 4, !dbg !303
  %inc = add nsw i32 %13, 1, !dbg !303
  store i32 %inc, i32* %j, align 4, !dbg !303
  br label %for.cond1, !dbg !305, !llvm.loop !306

for.end:                                          ; preds = %for.cond1
  br label %for.inc9, !dbg !308

for.inc9:                                         ; preds = %for.end
  %14 = load i32, i32* %pitch_lag.addr, align 4, !dbg !309
  %15 = load i32, i32* %i, align 4, !dbg !311
  %add10 = add nsw i32 %15, %14, !dbg !311
  store i32 %add10, i32* %i, align 4, !dbg !311
  br label %for.cond, !dbg !312, !llvm.loop !313

for.end11:                                        ; preds = %for.cond
  ret void, !dbg !315
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #3

; Function Attrs: nounwind uwtable
define void @ff_g723_1_gen_acb_excitation(i16* %vector, i16* %prev_excitation, i32 %pitch_lag, %struct.G723_1_Subframe* %subfrm, i32 %cur_rate) #0 !dbg !316 {
entry:
  %retval.i.i2.i = alloca i32, align 4
  %a.addr.i.i3.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr.i.i3.i, metadata !160, metadata !55), !dbg !330
  %a.addr.i4.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i4.i, metadata !169, metadata !55), !dbg !340
  %b.addr.i5.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr.i5.i, metadata !171, metadata !55), !dbg !341
  %retval.i.i.i = alloca i32, align 4
  %a.addr.i.i.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr.i.i.i, metadata !160, metadata !55), !dbg !342
  %a.addr.i.i9 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i.i9, metadata !169, metadata !55), !dbg !345
  %b.addr.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr.i.i, metadata !171, metadata !55), !dbg !346
  %a.addr.i10 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i10, metadata !347, metadata !55), !dbg !348
  %b.addr.i11 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr.i11, metadata !349, metadata !55), !dbg !350
  %retval.i.i = alloca i32, align 4
  %a.addr.i.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr.i.i, metadata !160, metadata !55), !dbg !351
  %a.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i, metadata !169, metadata !55), !dbg !354
  %b.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr.i, metadata !171, metadata !55), !dbg !355
  %vector.addr = alloca i16*, align 8
  %prev_excitation.addr = alloca i16*, align 8
  %pitch_lag.addr = alloca i32, align 4
  %subfrm.addr = alloca %struct.G723_1_Subframe*, align 8
  %cur_rate.addr = alloca i32, align 4
  %residual = alloca [64 x i16], align 16
  %cb_ptr = alloca i16*, align 8
  %lag = alloca i32, align 4
  %i = alloca i32, align 4
  %sum = alloca i32, align 4
  store i16* %vector, i16** %vector.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %vector.addr, metadata !356, metadata !55), !dbg !357
  store i16* %prev_excitation, i16** %prev_excitation.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %prev_excitation.addr, metadata !358, metadata !55), !dbg !359
  store i32 %pitch_lag, i32* %pitch_lag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pitch_lag.addr, metadata !360, metadata !55), !dbg !361
  store %struct.G723_1_Subframe* %subfrm, %struct.G723_1_Subframe** %subfrm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.G723_1_Subframe** %subfrm.addr, metadata !362, metadata !55), !dbg !363
  store i32 %cur_rate, i32* %cur_rate.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cur_rate.addr, metadata !364, metadata !55), !dbg !365
  call void @llvm.dbg.declare(metadata [64 x i16]* %residual, metadata !366, metadata !55), !dbg !370
  call void @llvm.dbg.declare(metadata i16** %cb_ptr, metadata !371, metadata !55), !dbg !372
  call void @llvm.dbg.declare(metadata i32* %lag, metadata !373, metadata !55), !dbg !374
  %0 = load i32, i32* %pitch_lag.addr, align 4, !dbg !375
  %1 = load %struct.G723_1_Subframe*, %struct.G723_1_Subframe** %subfrm.addr, align 8, !dbg !376
  %ad_cb_lag = getelementptr inbounds %struct.G723_1_Subframe, %struct.G723_1_Subframe* %1, i32 0, i32 0, !dbg !377
  %2 = load i32, i32* %ad_cb_lag, align 4, !dbg !377
  %add = add nsw i32 %0, %2, !dbg !378
  %sub = sub nsw i32 %add, 1, !dbg !379
  store i32 %sub, i32* %lag, align 4, !dbg !374
  call void @llvm.dbg.declare(metadata i32* %i, metadata !380, metadata !55), !dbg !381
  call void @llvm.dbg.declare(metadata i32* %sum, metadata !382, metadata !55), !dbg !383
  %arraydecay = getelementptr inbounds [64 x i16], [64 x i16]* %residual, i32 0, i32 0, !dbg !384
  %3 = load i16*, i16** %prev_excitation.addr, align 8, !dbg !385
  %4 = load i32, i32* %lag, align 4, !dbg !386
  call void @ff_g723_1_get_residual(i16* %arraydecay, i16* %3, i32 %4), !dbg !387
  %5 = load i32, i32* %cur_rate.addr, align 4, !dbg !388
  %cmp = icmp eq i32 %5, 0, !dbg !390
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !391

land.lhs.true:                                    ; preds = %entry
  %6 = load i32, i32* %pitch_lag.addr, align 4, !dbg !392
  %cmp1 = icmp slt i32 %6, 58, !dbg !394
  br i1 %cmp1, label %if.then, label %if.else, !dbg !395

if.then:                                          ; preds = %land.lhs.true
  store i16* getelementptr inbounds ([1700 x i16], [1700 x i16]* @adaptive_cb_gain85, i32 0, i32 0), i16** %cb_ptr, align 8, !dbg !396
  br label %if.end, !dbg !398

if.else:                                          ; preds = %land.lhs.true, %entry
  store i16* getelementptr inbounds ([3400 x i16], [3400 x i16]* @adaptive_cb_gain170, i32 0, i32 0), i16** %cb_ptr, align 8, !dbg !399
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %7 = load %struct.G723_1_Subframe*, %struct.G723_1_Subframe** %subfrm.addr, align 8, !dbg !400
  %ad_cb_gain = getelementptr inbounds %struct.G723_1_Subframe, %struct.G723_1_Subframe* %7, i32 0, i32 1, !dbg !401
  %8 = load i32, i32* %ad_cb_gain, align 4, !dbg !401
  %mul = mul nsw i32 %8, 20, !dbg !402
  %9 = load i16*, i16** %cb_ptr, align 8, !dbg !403
  %idx.ext = sext i32 %mul to i64, !dbg !403
  %add.ptr = getelementptr inbounds i16, i16* %9, i64 %idx.ext, !dbg !403
  store i16* %add.ptr, i16** %cb_ptr, align 8, !dbg !403
  store i32 0, i32* %i, align 4, !dbg !404
  br label %for.cond, !dbg !405

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %i, align 4, !dbg !406
  %cmp2 = icmp slt i32 %10, 60, !dbg !408
  br i1 %cmp2, label %for.body, label %for.end, !dbg !409

for.body:                                         ; preds = %for.cond
  %arraydecay3 = getelementptr inbounds [64 x i16], [64 x i16]* %residual, i32 0, i32 0, !dbg !410
  %11 = load i32, i32* %i, align 4, !dbg !411
  %idx.ext4 = sext i32 %11 to i64, !dbg !412
  %add.ptr5 = getelementptr inbounds i16, i16* %arraydecay3, i64 %idx.ext4, !dbg !412
  %12 = load i16*, i16** %cb_ptr, align 8, !dbg !413
  %call = call i64 @ff_dot_product(i16* %add.ptr5, i16* %12, i32 5), !dbg !414
  %conv = trunc i64 %call to i32, !dbg !414
  store i32 %conv, i32* %sum, align 4, !dbg !415
  %13 = load i32, i32* %sum, align 4, !dbg !416
  %14 = load i32, i32* %sum, align 4, !dbg !417
  store i32 %13, i32* %a.addr.i, align 4, !dbg !418
  store i32 %14, i32* %b.addr.i, align 4, !dbg !418
  %15 = load i32, i32* %a.addr.i, align 4, !dbg !419
  %conv.i = sext i32 %15 to i64, !dbg !420
  %16 = load i32, i32* %b.addr.i, align 4, !dbg !421
  %conv1.i = sext i32 %16 to i64, !dbg !421
  %add.i = add nsw i64 %conv.i, %conv1.i, !dbg !422
  store i64 %add.i, i64* %a.addr.i.i, align 8, !dbg !423
  %17 = load i64, i64* %a.addr.i.i, align 8, !dbg !424
  %add.i.i = add nsw i64 %17, 2147483648, !dbg !425
  %and.i.i = and i64 %add.i.i, -4294967296, !dbg !426
  %tobool.i.i = icmp ne i64 %and.i.i, 0, !dbg !426
  br i1 %tobool.i.i, label %if.then.i.i, label %if.else.i.i, !dbg !427

if.then.i.i:                                      ; preds = %for.body
  %18 = load i64, i64* %a.addr.i.i, align 8, !dbg !428
  %shr.i.i = ashr i64 %18, 63, !dbg !429
  %xor.i.i = xor i64 %shr.i.i, 2147483647, !dbg !430
  %conv.i.i = trunc i64 %xor.i.i to i32, !dbg !431
  store i32 %conv.i.i, i32* %retval.i.i, align 4, !dbg !432
  br label %av_sat_add32_c.exit, !dbg !432

if.else.i.i:                                      ; preds = %for.body
  %19 = load i64, i64* %a.addr.i.i, align 8, !dbg !433
  %conv1.i.i = trunc i64 %19 to i32, !dbg !434
  store i32 %conv1.i.i, i32* %retval.i.i, align 4, !dbg !435
  br label %av_sat_add32_c.exit, !dbg !435

av_sat_add32_c.exit:                              ; preds = %if.then.i.i, %if.else.i.i
  %20 = load i32, i32* %retval.i.i, align 4, !dbg !436
  store i32 32768, i32* %a.addr.i10, align 4, !dbg !437
  store i32 %20, i32* %b.addr.i11, align 4, !dbg !437
  %21 = load i32, i32* %a.addr.i10, align 4, !dbg !438
  %22 = load i32, i32* %b.addr.i11, align 4, !dbg !439
  %23 = load i32, i32* %b.addr.i11, align 4, !dbg !440
  store i32 %22, i32* %a.addr.i.i9, align 4, !dbg !441
  store i32 %23, i32* %b.addr.i.i, align 4, !dbg !441
  %24 = load i32, i32* %a.addr.i.i9, align 4, !dbg !442
  %conv.i.i12 = sext i32 %24 to i64, !dbg !443
  %25 = load i32, i32* %b.addr.i.i, align 4, !dbg !444
  %conv1.i.i13 = sext i32 %25 to i64, !dbg !444
  %add.i.i14 = add nsw i64 %conv.i.i12, %conv1.i.i13, !dbg !445
  store i64 %add.i.i14, i64* %a.addr.i.i.i, align 8, !dbg !446
  %26 = load i64, i64* %a.addr.i.i.i, align 8, !dbg !447
  %add.i.i.i = add nsw i64 %26, 2147483648, !dbg !448
  %and.i.i.i = and i64 %add.i.i.i, -4294967296, !dbg !449
  %tobool.i.i.i = icmp ne i64 %and.i.i.i, 0, !dbg !449
  br i1 %tobool.i.i.i, label %if.then.i.i.i, label %if.else.i.i.i, !dbg !450

if.then.i.i.i:                                    ; preds = %av_sat_add32_c.exit
  %27 = load i64, i64* %a.addr.i.i.i, align 8, !dbg !451
  %shr.i.i.i = ashr i64 %27, 63, !dbg !452
  %xor.i.i.i = xor i64 %shr.i.i.i, 2147483647, !dbg !453
  %conv.i.i.i = trunc i64 %xor.i.i.i to i32, !dbg !454
  store i32 %conv.i.i.i, i32* %retval.i.i.i, align 4, !dbg !455
  br label %av_sat_add32_c.exit.i, !dbg !455

if.else.i.i.i:                                    ; preds = %av_sat_add32_c.exit
  %28 = load i64, i64* %a.addr.i.i.i, align 8, !dbg !456
  %conv1.i.i.i = trunc i64 %28 to i32, !dbg !457
  store i32 %conv1.i.i.i, i32* %retval.i.i.i, align 4, !dbg !458
  br label %av_sat_add32_c.exit.i, !dbg !458

av_sat_add32_c.exit.i:                            ; preds = %if.else.i.i.i, %if.then.i.i.i
  %29 = load i32, i32* %retval.i.i.i, align 4, !dbg !459
  store i32 %21, i32* %a.addr.i4.i, align 4, !dbg !460
  store i32 %29, i32* %b.addr.i5.i, align 4, !dbg !460
  %30 = load i32, i32* %a.addr.i4.i, align 4, !dbg !461
  %conv.i6.i = sext i32 %30 to i64, !dbg !462
  %31 = load i32, i32* %b.addr.i5.i, align 4, !dbg !463
  %conv1.i7.i = sext i32 %31 to i64, !dbg !463
  %add.i8.i = add nsw i64 %conv.i6.i, %conv1.i7.i, !dbg !464
  store i64 %add.i8.i, i64* %a.addr.i.i3.i, align 8, !dbg !465
  %32 = load i64, i64* %a.addr.i.i3.i, align 8, !dbg !466
  %add.i.i9.i = add nsw i64 %32, 2147483648, !dbg !467
  %and.i.i10.i = and i64 %add.i.i9.i, -4294967296, !dbg !468
  %tobool.i.i11.i = icmp ne i64 %and.i.i10.i, 0, !dbg !468
  br i1 %tobool.i.i11.i, label %if.then.i.i15.i, label %if.else.i.i17.i, !dbg !469

if.then.i.i15.i:                                  ; preds = %av_sat_add32_c.exit.i
  %33 = load i64, i64* %a.addr.i.i3.i, align 8, !dbg !470
  %shr.i.i12.i = ashr i64 %33, 63, !dbg !471
  %xor.i.i13.i = xor i64 %shr.i.i12.i, 2147483647, !dbg !472
  %conv.i.i14.i = trunc i64 %xor.i.i13.i to i32, !dbg !473
  store i32 %conv.i.i14.i, i32* %retval.i.i2.i, align 4, !dbg !474
  br label %av_sat_dadd32_c.exit, !dbg !474

if.else.i.i17.i:                                  ; preds = %av_sat_add32_c.exit.i
  %34 = load i64, i64* %a.addr.i.i3.i, align 8, !dbg !475
  %conv1.i.i16.i = trunc i64 %34 to i32, !dbg !476
  store i32 %conv1.i.i16.i, i32* %retval.i.i2.i, align 4, !dbg !477
  br label %av_sat_dadd32_c.exit, !dbg !477

av_sat_dadd32_c.exit:                             ; preds = %if.then.i.i15.i, %if.else.i.i17.i
  %35 = load i32, i32* %retval.i.i2.i, align 4, !dbg !478
  %shr = ashr i32 %35, 16, !dbg !479
  %conv8 = trunc i32 %shr to i16, !dbg !480
  %36 = load i32, i32* %i, align 4, !dbg !481
  %idxprom = sext i32 %36 to i64, !dbg !482
  %37 = load i16*, i16** %vector.addr, align 8, !dbg !482
  %arrayidx = getelementptr inbounds i16, i16* %37, i64 %idxprom, !dbg !482
  store i16 %conv8, i16* %arrayidx, align 2, !dbg !483
  br label %for.inc, !dbg !484

for.inc:                                          ; preds = %av_sat_dadd32_c.exit
  %38 = load i32, i32* %i, align 4, !dbg !485
  %inc = add nsw i32 %38, 1, !dbg !485
  store i32 %inc, i32* %i, align 4, !dbg !485
  br label %for.cond, !dbg !487, !llvm.loop !488

for.end:                                          ; preds = %for.cond
  ret void, !dbg !490
}

; Function Attrs: nounwind uwtable
define void @ff_g723_1_lsp_interpolate(i16* %lpc, i16* %cur_lsp, i16* %prev_lsp) #0 !dbg !491 {
entry:
  %lpc.addr = alloca i16*, align 8
  %cur_lsp.addr = alloca i16*, align 8
  %prev_lsp.addr = alloca i16*, align 8
  %i = alloca i32, align 4
  %lpc_ptr = alloca i16*, align 8
  store i16* %lpc, i16** %lpc.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %lpc.addr, metadata !494, metadata !55), !dbg !495
  store i16* %cur_lsp, i16** %cur_lsp.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %cur_lsp.addr, metadata !496, metadata !55), !dbg !497
  store i16* %prev_lsp, i16** %prev_lsp.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %prev_lsp.addr, metadata !498, metadata !55), !dbg !499
  call void @llvm.dbg.declare(metadata i32* %i, metadata !500, metadata !55), !dbg !501
  call void @llvm.dbg.declare(metadata i16** %lpc_ptr, metadata !502, metadata !55), !dbg !503
  %0 = load i16*, i16** %lpc.addr, align 8, !dbg !504
  store i16* %0, i16** %lpc_ptr, align 8, !dbg !503
  %1 = load i16*, i16** %lpc.addr, align 8, !dbg !505
  %2 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !506
  %3 = load i16*, i16** %prev_lsp.addr, align 8, !dbg !507
  call void @ff_acelp_weighted_vector_sum(i16* %1, i16* %2, i16* %3, i16 signext 4096, i16 signext 12288, i16 signext 8192, i32 14, i32 10), !dbg !508
  %4 = load i16*, i16** %lpc.addr, align 8, !dbg !509
  %add.ptr = getelementptr inbounds i16, i16* %4, i64 10, !dbg !510
  %5 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !511
  %6 = load i16*, i16** %prev_lsp.addr, align 8, !dbg !512
  call void @ff_acelp_weighted_vector_sum(i16* %add.ptr, i16* %5, i16* %6, i16 signext 8192, i16 signext 8192, i16 signext 8192, i32 14, i32 10), !dbg !513
  %7 = load i16*, i16** %lpc.addr, align 8, !dbg !514
  %add.ptr1 = getelementptr inbounds i16, i16* %7, i64 20, !dbg !515
  %8 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !516
  %9 = load i16*, i16** %prev_lsp.addr, align 8, !dbg !517
  call void @ff_acelp_weighted_vector_sum(i16* %add.ptr1, i16* %8, i16* %9, i16 signext 12288, i16 signext 4096, i16 signext 8192, i32 14, i32 10), !dbg !518
  %10 = load i16*, i16** %lpc.addr, align 8, !dbg !519
  %add.ptr2 = getelementptr inbounds i16, i16* %10, i64 30, !dbg !520
  %11 = bitcast i16* %add.ptr2 to i8*, !dbg !521
  %12 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !522
  %13 = bitcast i16* %12 to i8*, !dbg !521
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %13, i64 20, i32 2, i1 false), !dbg !521
  store i32 0, i32* %i, align 4, !dbg !523
  br label %for.cond, !dbg !525

for.cond:                                         ; preds = %for.inc, %entry
  %14 = load i32, i32* %i, align 4, !dbg !526
  %cmp = icmp slt i32 %14, 4, !dbg !529
  br i1 %cmp, label %for.body, label %for.end, !dbg !530

for.body:                                         ; preds = %for.cond
  %15 = load i16*, i16** %lpc_ptr, align 8, !dbg !531
  call void @lsp2lpc(i16* %15), !dbg !533
  %16 = load i16*, i16** %lpc_ptr, align 8, !dbg !534
  %add.ptr3 = getelementptr inbounds i16, i16* %16, i64 10, !dbg !534
  store i16* %add.ptr3, i16** %lpc_ptr, align 8, !dbg !534
  br label %for.inc, !dbg !535

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4, !dbg !536
  %inc = add nsw i32 %17, 1, !dbg !536
  store i32 %inc, i32* %i, align 4, !dbg !536
  br label %for.cond, !dbg !538, !llvm.loop !539

for.end:                                          ; preds = %for.cond
  ret void, !dbg !541
}

declare void @ff_acelp_weighted_vector_sum(i16*, i16*, i16*, i16 signext, i16 signext, i16 signext, i32, i32) #2

; Function Attrs: nounwind uwtable
define internal void @lsp2lpc(i16* %lpc) #0 !dbg !542 {
entry:
  %retval.i281 = alloca i32, align 4
  %a.addr.i282 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr.i282, metadata !160, metadata !55), !dbg !545
  %retval.i269 = alloca i32, align 4
  %a.addr.i270 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr.i270, metadata !160, metadata !55), !dbg !550
  %retval.i257 = alloca i32, align 4
  %a.addr.i258 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr.i258, metadata !160, metadata !55), !dbg !552
  %retval.i = alloca i32, align 4
  %a.addr.i256 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr.i256, metadata !160, metadata !55), !dbg !557
  %retval.i.i2.i = alloca i32, align 4
  %a.addr.i.i3.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr.i.i3.i, metadata !160, metadata !55), !dbg !559
  %a.addr.i4.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i4.i, metadata !169, metadata !55), !dbg !566
  %b.addr.i5.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr.i5.i, metadata !171, metadata !55), !dbg !567
  %retval.i.i.i = alloca i32, align 4
  %a.addr.i.i.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %a.addr.i.i.i, metadata !160, metadata !55), !dbg !568
  %a.addr.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i.i, metadata !169, metadata !55), !dbg !571
  %b.addr.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr.i.i, metadata !171, metadata !55), !dbg !572
  %a.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i, metadata !347, metadata !55), !dbg !573
  %b.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr.i, metadata !349, metadata !55), !dbg !574
  %lpc.addr = alloca i16*, align 8
  %f1 = alloca [6 x i32], align 16
  %f2 = alloca [6 x i32], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %index = alloca i32, align 4
  %offset = alloca i32, align 4
  %temp1 = alloca i32, align 4
  %temp2 = alloca i32, align 4
  %ff1 = alloca i64, align 8
  %ff2 = alloca i64, align 8
  store i16* %lpc, i16** %lpc.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %lpc.addr, metadata !575, metadata !55), !dbg !576
  call void @llvm.dbg.declare(metadata [6 x i32]* %f1, metadata !577, metadata !55), !dbg !581
  call void @llvm.dbg.declare(metadata [6 x i32]* %f2, metadata !582, metadata !55), !dbg !583
  call void @llvm.dbg.declare(metadata i32* %i, metadata !584, metadata !55), !dbg !585
  call void @llvm.dbg.declare(metadata i32* %j, metadata !586, metadata !55), !dbg !587
  store i32 0, i32* %j, align 4, !dbg !588
  br label %for.cond, !dbg !589

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %j, align 4, !dbg !590
  %cmp = icmp slt i32 %0, 10, !dbg !592
  br i1 %cmp, label %for.body, label %for.end, !dbg !593

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %index, metadata !594, metadata !55), !dbg !595
  %1 = load i32, i32* %j, align 4, !dbg !596
  %idxprom = sext i32 %1 to i64, !dbg !597
  %2 = load i16*, i16** %lpc.addr, align 8, !dbg !597
  %arrayidx = getelementptr inbounds i16, i16* %2, i64 %idxprom, !dbg !597
  %3 = load i16, i16* %arrayidx, align 2, !dbg !597
  %conv = sext i16 %3 to i32, !dbg !597
  %shr = ashr i32 %conv, 7, !dbg !598
  %and = and i32 %shr, 511, !dbg !599
  store i32 %and, i32* %index, align 4, !dbg !595
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !600, metadata !55), !dbg !601
  %4 = load i32, i32* %j, align 4, !dbg !602
  %idxprom1 = sext i32 %4 to i64, !dbg !603
  %5 = load i16*, i16** %lpc.addr, align 8, !dbg !603
  %arrayidx2 = getelementptr inbounds i16, i16* %5, i64 %idxprom1, !dbg !603
  %6 = load i16, i16* %arrayidx2, align 2, !dbg !603
  %conv3 = sext i16 %6 to i32, !dbg !603
  %and4 = and i32 %conv3, 127, !dbg !604
  store i32 %and4, i32* %offset, align 4, !dbg !601
  call void @llvm.dbg.declare(metadata i32* %temp1, metadata !605, metadata !55), !dbg !606
  %7 = load i32, i32* %index, align 4, !dbg !607
  %idxprom5 = sext i32 %7 to i64, !dbg !608
  %arrayidx6 = getelementptr inbounds [513 x i16], [513 x i16]* @cos_tab, i64 0, i64 %idxprom5, !dbg !608
  %8 = load i16, i16* %arrayidx6, align 2, !dbg !608
  %conv7 = sext i16 %8 to i32, !dbg !608
  %mul = mul nsw i32 %conv7, 65536, !dbg !609
  store i32 %mul, i32* %temp1, align 4, !dbg !606
  call void @llvm.dbg.declare(metadata i32* %temp2, metadata !610, metadata !55), !dbg !611
  %9 = load i32, i32* %index, align 4, !dbg !612
  %add = add nsw i32 %9, 1, !dbg !613
  %idxprom8 = sext i32 %add to i64, !dbg !614
  %arrayidx9 = getelementptr inbounds [513 x i16], [513 x i16]* @cos_tab, i64 0, i64 %idxprom8, !dbg !614
  %10 = load i16, i16* %arrayidx9, align 2, !dbg !614
  %conv10 = sext i16 %10 to i32, !dbg !614
  %11 = load i32, i32* %index, align 4, !dbg !615
  %idxprom11 = sext i32 %11 to i64, !dbg !616
  %arrayidx12 = getelementptr inbounds [513 x i16], [513 x i16]* @cos_tab, i64 0, i64 %idxprom11, !dbg !616
  %12 = load i16, i16* %arrayidx12, align 2, !dbg !616
  %conv13 = sext i16 %12 to i32, !dbg !616
  %sub = sub nsw i32 %conv10, %conv13, !dbg !617
  %13 = load i32, i32* %offset, align 4, !dbg !618
  %shl = shl i32 %13, 8, !dbg !619
  %add14 = add nsw i32 %shl, 128, !dbg !620
  %shl15 = shl i32 %add14, 1, !dbg !621
  %mul16 = mul nsw i32 %sub, %shl15, !dbg !622
  store i32 %mul16, i32* %temp2, align 4, !dbg !611
  %14 = load i32, i32* %temp1, align 4, !dbg !623
  %15 = load i32, i32* %temp2, align 4, !dbg !624
  %add17 = add nsw i32 %14, %15, !dbg !625
  store i32 32768, i32* %a.addr.i, align 4, !dbg !626
  store i32 %add17, i32* %b.addr.i, align 4, !dbg !626
  %16 = load i32, i32* %a.addr.i, align 4, !dbg !627
  %17 = load i32, i32* %b.addr.i, align 4, !dbg !628
  %18 = load i32, i32* %b.addr.i, align 4, !dbg !629
  store i32 %17, i32* %a.addr.i.i, align 4, !dbg !630
  store i32 %18, i32* %b.addr.i.i, align 4, !dbg !630
  %19 = load i32, i32* %a.addr.i.i, align 4, !dbg !631
  %conv.i.i = sext i32 %19 to i64, !dbg !632
  %20 = load i32, i32* %b.addr.i.i, align 4, !dbg !633
  %conv1.i.i = sext i32 %20 to i64, !dbg !633
  %add.i.i = add nsw i64 %conv.i.i, %conv1.i.i, !dbg !634
  store i64 %add.i.i, i64* %a.addr.i.i.i, align 8, !dbg !635
  %21 = load i64, i64* %a.addr.i.i.i, align 8, !dbg !636
  %add.i.i.i = add nsw i64 %21, 2147483648, !dbg !637
  %and.i.i.i = and i64 %add.i.i.i, -4294967296, !dbg !638
  %tobool.i.i.i = icmp ne i64 %and.i.i.i, 0, !dbg !638
  br i1 %tobool.i.i.i, label %if.then.i.i.i, label %if.else.i.i.i, !dbg !639

if.then.i.i.i:                                    ; preds = %for.body
  %22 = load i64, i64* %a.addr.i.i.i, align 8, !dbg !640
  %shr.i.i.i = ashr i64 %22, 63, !dbg !641
  %xor.i.i.i = xor i64 %shr.i.i.i, 2147483647, !dbg !642
  %conv.i.i.i = trunc i64 %xor.i.i.i to i32, !dbg !643
  store i32 %conv.i.i.i, i32* %retval.i.i.i, align 4, !dbg !644
  br label %av_sat_add32_c.exit.i, !dbg !644

if.else.i.i.i:                                    ; preds = %for.body
  %23 = load i64, i64* %a.addr.i.i.i, align 8, !dbg !645
  %conv1.i.i.i = trunc i64 %23 to i32, !dbg !646
  store i32 %conv1.i.i.i, i32* %retval.i.i.i, align 4, !dbg !647
  br label %av_sat_add32_c.exit.i, !dbg !647

av_sat_add32_c.exit.i:                            ; preds = %if.else.i.i.i, %if.then.i.i.i
  %24 = load i32, i32* %retval.i.i.i, align 4, !dbg !648
  store i32 %16, i32* %a.addr.i4.i, align 4, !dbg !649
  store i32 %24, i32* %b.addr.i5.i, align 4, !dbg !649
  %25 = load i32, i32* %a.addr.i4.i, align 4, !dbg !650
  %conv.i6.i = sext i32 %25 to i64, !dbg !651
  %26 = load i32, i32* %b.addr.i5.i, align 4, !dbg !652
  %conv1.i7.i = sext i32 %26 to i64, !dbg !652
  %add.i8.i = add nsw i64 %conv.i6.i, %conv1.i7.i, !dbg !653
  store i64 %add.i8.i, i64* %a.addr.i.i3.i, align 8, !dbg !654
  %27 = load i64, i64* %a.addr.i.i3.i, align 8, !dbg !655
  %add.i.i9.i = add nsw i64 %27, 2147483648, !dbg !656
  %and.i.i10.i = and i64 %add.i.i9.i, -4294967296, !dbg !657
  %tobool.i.i11.i = icmp ne i64 %and.i.i10.i, 0, !dbg !657
  br i1 %tobool.i.i11.i, label %if.then.i.i15.i, label %if.else.i.i17.i, !dbg !658

if.then.i.i15.i:                                  ; preds = %av_sat_add32_c.exit.i
  %28 = load i64, i64* %a.addr.i.i3.i, align 8, !dbg !659
  %shr.i.i12.i = ashr i64 %28, 63, !dbg !660
  %xor.i.i13.i = xor i64 %shr.i.i12.i, 2147483647, !dbg !661
  %conv.i.i14.i = trunc i64 %xor.i.i13.i to i32, !dbg !662
  store i32 %conv.i.i14.i, i32* %retval.i.i2.i, align 4, !dbg !663
  br label %av_sat_dadd32_c.exit, !dbg !663

if.else.i.i17.i:                                  ; preds = %av_sat_add32_c.exit.i
  %29 = load i64, i64* %a.addr.i.i3.i, align 8, !dbg !664
  %conv1.i.i16.i = trunc i64 %29 to i32, !dbg !665
  store i32 %conv1.i.i16.i, i32* %retval.i.i2.i, align 4, !dbg !666
  br label %av_sat_dadd32_c.exit, !dbg !666

av_sat_dadd32_c.exit:                             ; preds = %if.then.i.i15.i, %if.else.i.i17.i
  %30 = load i32, i32* %retval.i.i2.i, align 4, !dbg !667
  %shr18 = ashr i32 %30, 16, !dbg !668
  %sub19 = sub nsw i32 0, %shr18, !dbg !669
  %conv20 = trunc i32 %sub19 to i16, !dbg !669
  %31 = load i32, i32* %j, align 4, !dbg !670
  %idxprom21 = sext i32 %31 to i64, !dbg !671
  %32 = load i16*, i16** %lpc.addr, align 8, !dbg !671
  %arrayidx22 = getelementptr inbounds i16, i16* %32, i64 %idxprom21, !dbg !671
  store i16 %conv20, i16* %arrayidx22, align 2, !dbg !672
  br label %for.inc, !dbg !673

for.inc:                                          ; preds = %av_sat_dadd32_c.exit
  %33 = load i32, i32* %j, align 4, !dbg !674
  %inc = add nsw i32 %33, 1, !dbg !674
  store i32 %inc, i32* %j, align 4, !dbg !674
  br label %for.cond, !dbg !676, !llvm.loop !677

for.end:                                          ; preds = %for.cond
  %arrayidx23 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 0, !dbg !679
  store i32 268435456, i32* %arrayidx23, align 16, !dbg !680
  %34 = load i16*, i16** %lpc.addr, align 8, !dbg !681
  %arrayidx24 = getelementptr inbounds i16, i16* %34, i64 0, !dbg !681
  %35 = load i16, i16* %arrayidx24, align 2, !dbg !681
  %conv25 = sext i16 %35 to i32, !dbg !681
  %36 = load i16*, i16** %lpc.addr, align 8, !dbg !682
  %arrayidx26 = getelementptr inbounds i16, i16* %36, i64 2, !dbg !682
  %37 = load i16, i16* %arrayidx26, align 2, !dbg !682
  %conv27 = sext i16 %37 to i32, !dbg !682
  %add28 = add nsw i32 %conv25, %conv27, !dbg !683
  %mul29 = mul nsw i32 %add28, 16384, !dbg !684
  %arrayidx30 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 1, !dbg !685
  store i32 %mul29, i32* %arrayidx30, align 4, !dbg !686
  %38 = load i16*, i16** %lpc.addr, align 8, !dbg !687
  %arrayidx31 = getelementptr inbounds i16, i16* %38, i64 0, !dbg !687
  %39 = load i16, i16* %arrayidx31, align 2, !dbg !687
  %conv32 = sext i16 %39 to i32, !dbg !687
  %40 = load i16*, i16** %lpc.addr, align 8, !dbg !688
  %arrayidx33 = getelementptr inbounds i16, i16* %40, i64 2, !dbg !688
  %41 = load i16, i16* %arrayidx33, align 2, !dbg !688
  %conv34 = sext i16 %41 to i32, !dbg !688
  %mul35 = mul nsw i32 %conv32, %conv34, !dbg !689
  %add36 = add nsw i32 %mul35, 536870912, !dbg !690
  %arrayidx37 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 2, !dbg !691
  store i32 %add36, i32* %arrayidx37, align 8, !dbg !692
  %arrayidx38 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 0, !dbg !693
  store i32 268435456, i32* %arrayidx38, align 16, !dbg !694
  %42 = load i16*, i16** %lpc.addr, align 8, !dbg !695
  %arrayidx39 = getelementptr inbounds i16, i16* %42, i64 1, !dbg !695
  %43 = load i16, i16* %arrayidx39, align 2, !dbg !695
  %conv40 = sext i16 %43 to i32, !dbg !695
  %44 = load i16*, i16** %lpc.addr, align 8, !dbg !696
  %arrayidx41 = getelementptr inbounds i16, i16* %44, i64 3, !dbg !696
  %45 = load i16, i16* %arrayidx41, align 2, !dbg !696
  %conv42 = sext i16 %45 to i32, !dbg !696
  %add43 = add nsw i32 %conv40, %conv42, !dbg !697
  %mul44 = mul nsw i32 %add43, 16384, !dbg !698
  %arrayidx45 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 1, !dbg !699
  store i32 %mul44, i32* %arrayidx45, align 4, !dbg !700
  %46 = load i16*, i16** %lpc.addr, align 8, !dbg !701
  %arrayidx46 = getelementptr inbounds i16, i16* %46, i64 1, !dbg !701
  %47 = load i16, i16* %arrayidx46, align 2, !dbg !701
  %conv47 = sext i16 %47 to i32, !dbg !701
  %48 = load i16*, i16** %lpc.addr, align 8, !dbg !702
  %arrayidx48 = getelementptr inbounds i16, i16* %48, i64 3, !dbg !702
  %49 = load i16, i16* %arrayidx48, align 2, !dbg !702
  %conv49 = sext i16 %49 to i32, !dbg !702
  %mul50 = mul nsw i32 %conv47, %conv49, !dbg !703
  %add51 = add nsw i32 %mul50, 536870912, !dbg !704
  %arrayidx52 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 2, !dbg !705
  store i32 %add51, i32* %arrayidx52, align 8, !dbg !706
  store i32 2, i32* %i, align 4, !dbg !707
  br label %for.cond53, !dbg !708

for.cond53:                                       ; preds = %for.inc214, %for.end
  %50 = load i32, i32* %i, align 4, !dbg !709
  %cmp54 = icmp slt i32 %50, 5, !dbg !711
  br i1 %cmp54, label %for.body56, label %for.end216, !dbg !712

for.body56:                                       ; preds = %for.cond53
  %51 = load i32, i32* %i, align 4, !dbg !713
  %sub57 = sub nsw i32 %51, 1, !dbg !714
  %idxprom58 = sext i32 %sub57 to i64, !dbg !715
  %arrayidx59 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 %idxprom58, !dbg !715
  %52 = load i32, i32* %arrayidx59, align 4, !dbg !715
  %conv60 = sext i32 %52 to i64, !dbg !715
  %53 = load i32, i32* %i, align 4, !dbg !716
  %idxprom61 = sext i32 %53 to i64, !dbg !717
  %arrayidx62 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 %idxprom61, !dbg !717
  %54 = load i32, i32* %arrayidx62, align 4, !dbg !717
  %shr63 = ashr i32 %54, 16, !dbg !718
  %55 = load i32, i32* %i, align 4, !dbg !719
  %mul64 = mul nsw i32 2, %55, !dbg !720
  %idxprom65 = sext i32 %mul64 to i64, !dbg !721
  %56 = load i16*, i16** %lpc.addr, align 8, !dbg !721
  %arrayidx66 = getelementptr inbounds i16, i16* %56, i64 %idxprom65, !dbg !721
  %57 = load i16, i16* %arrayidx66, align 2, !dbg !721
  %conv67 = sext i16 %57 to i32, !dbg !722
  %mul68 = mul nsw i32 %shr63, %conv67, !dbg !723
  %mul69 = mul nsw i32 %mul68, 2, !dbg !724
  %58 = load i32, i32* %i, align 4, !dbg !725
  %idxprom70 = sext i32 %58 to i64, !dbg !726
  %arrayidx71 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 %idxprom70, !dbg !726
  %59 = load i32, i32* %arrayidx71, align 4, !dbg !726
  %and72 = and i32 %59, 65535, !dbg !727
  %60 = load i32, i32* %i, align 4, !dbg !728
  %mul73 = mul nsw i32 2, %60, !dbg !729
  %idxprom74 = sext i32 %mul73 to i64, !dbg !730
  %61 = load i16*, i16** %lpc.addr, align 8, !dbg !730
  %arrayidx75 = getelementptr inbounds i16, i16* %61, i64 %idxprom74, !dbg !730
  %62 = load i16, i16* %arrayidx75, align 2, !dbg !730
  %conv76 = sext i16 %62 to i32, !dbg !731
  %mul77 = mul nsw i32 %and72, %conv76, !dbg !732
  %shr78 = ashr i32 %mul77, 15, !dbg !733
  %add79 = add nsw i32 %mul69, %shr78, !dbg !734
  %conv80 = sext i32 %add79 to i64, !dbg !735
  %add81 = add nsw i64 %conv60, %conv80, !dbg !736
  store i64 %add81, i64* %a.addr.i282, align 8, !dbg !737
  %63 = load i64, i64* %a.addr.i282, align 8, !dbg !738
  %add.i283 = add nsw i64 %63, 2147483648, !dbg !739
  %and.i284 = and i64 %add.i283, -4294967296, !dbg !740
  %tobool.i285 = icmp ne i64 %and.i284, 0, !dbg !740
  br i1 %tobool.i285, label %if.then.i289, label %if.else.i291, !dbg !741

if.then.i289:                                     ; preds = %for.body56
  %64 = load i64, i64* %a.addr.i282, align 8, !dbg !742
  %shr.i286 = ashr i64 %64, 63, !dbg !743
  %xor.i287 = xor i64 %shr.i286, 2147483647, !dbg !744
  %conv.i288 = trunc i64 %xor.i287 to i32, !dbg !745
  store i32 %conv.i288, i32* %retval.i281, align 4, !dbg !746
  br label %av_clipl_int32_c.exit292, !dbg !746

if.else.i291:                                     ; preds = %for.body56
  %65 = load i64, i64* %a.addr.i282, align 8, !dbg !747
  %conv1.i290 = trunc i64 %65 to i32, !dbg !748
  store i32 %conv1.i290, i32* %retval.i281, align 4, !dbg !749
  br label %av_clipl_int32_c.exit292, !dbg !749

av_clipl_int32_c.exit292:                         ; preds = %if.then.i289, %if.else.i291
  %66 = load i32, i32* %retval.i281, align 4, !dbg !750
  %67 = load i32, i32* %i, align 4, !dbg !751
  %add83 = add nsw i32 %67, 1, !dbg !752
  %idxprom84 = sext i32 %add83 to i64, !dbg !753
  %arrayidx85 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 %idxprom84, !dbg !753
  store i32 %66, i32* %arrayidx85, align 4, !dbg !754
  %68 = load i32, i32* %i, align 4, !dbg !755
  %sub86 = sub nsw i32 %68, 1, !dbg !756
  %idxprom87 = sext i32 %sub86 to i64, !dbg !757
  %arrayidx88 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 %idxprom87, !dbg !757
  %69 = load i32, i32* %arrayidx88, align 4, !dbg !757
  %conv89 = sext i32 %69 to i64, !dbg !757
  %70 = load i32, i32* %i, align 4, !dbg !758
  %idxprom90 = sext i32 %70 to i64, !dbg !759
  %arrayidx91 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 %idxprom90, !dbg !759
  %71 = load i32, i32* %arrayidx91, align 4, !dbg !759
  %shr92 = ashr i32 %71, 16, !dbg !760
  %72 = load i32, i32* %i, align 4, !dbg !761
  %mul93 = mul nsw i32 2, %72, !dbg !762
  %add94 = add nsw i32 %mul93, 1, !dbg !763
  %idxprom95 = sext i32 %add94 to i64, !dbg !764
  %73 = load i16*, i16** %lpc.addr, align 8, !dbg !764
  %arrayidx96 = getelementptr inbounds i16, i16* %73, i64 %idxprom95, !dbg !764
  %74 = load i16, i16* %arrayidx96, align 2, !dbg !764
  %conv97 = sext i16 %74 to i32, !dbg !765
  %mul98 = mul nsw i32 %shr92, %conv97, !dbg !766
  %mul99 = mul nsw i32 %mul98, 2, !dbg !767
  %75 = load i32, i32* %i, align 4, !dbg !768
  %idxprom100 = sext i32 %75 to i64, !dbg !769
  %arrayidx101 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 %idxprom100, !dbg !769
  %76 = load i32, i32* %arrayidx101, align 4, !dbg !769
  %and102 = and i32 %76, 65535, !dbg !770
  %77 = load i32, i32* %i, align 4, !dbg !771
  %mul103 = mul nsw i32 2, %77, !dbg !772
  %add104 = add nsw i32 %mul103, 1, !dbg !773
  %idxprom105 = sext i32 %add104 to i64, !dbg !774
  %78 = load i16*, i16** %lpc.addr, align 8, !dbg !774
  %arrayidx106 = getelementptr inbounds i16, i16* %78, i64 %idxprom105, !dbg !774
  %79 = load i16, i16* %arrayidx106, align 2, !dbg !774
  %conv107 = sext i16 %79 to i32, !dbg !775
  %mul108 = mul nsw i32 %and102, %conv107, !dbg !776
  %shr109 = ashr i32 %mul108, 15, !dbg !777
  %add110 = add nsw i32 %mul99, %shr109, !dbg !778
  %conv111 = sext i32 %add110 to i64, !dbg !779
  %add112 = add nsw i64 %conv89, %conv111, !dbg !780
  store i64 %add112, i64* %a.addr.i270, align 8, !dbg !781
  %80 = load i64, i64* %a.addr.i270, align 8, !dbg !782
  %add.i271 = add nsw i64 %80, 2147483648, !dbg !783
  %and.i272 = and i64 %add.i271, -4294967296, !dbg !784
  %tobool.i273 = icmp ne i64 %and.i272, 0, !dbg !784
  br i1 %tobool.i273, label %if.then.i277, label %if.else.i279, !dbg !785

if.then.i277:                                     ; preds = %av_clipl_int32_c.exit292
  %81 = load i64, i64* %a.addr.i270, align 8, !dbg !786
  %shr.i274 = ashr i64 %81, 63, !dbg !787
  %xor.i275 = xor i64 %shr.i274, 2147483647, !dbg !788
  %conv.i276 = trunc i64 %xor.i275 to i32, !dbg !789
  store i32 %conv.i276, i32* %retval.i269, align 4, !dbg !790
  br label %av_clipl_int32_c.exit280, !dbg !790

if.else.i279:                                     ; preds = %av_clipl_int32_c.exit292
  %82 = load i64, i64* %a.addr.i270, align 8, !dbg !791
  %conv1.i278 = trunc i64 %82 to i32, !dbg !792
  store i32 %conv1.i278, i32* %retval.i269, align 4, !dbg !793
  br label %av_clipl_int32_c.exit280, !dbg !793

av_clipl_int32_c.exit280:                         ; preds = %if.then.i277, %if.else.i279
  %83 = load i32, i32* %retval.i269, align 4, !dbg !794
  %84 = load i32, i32* %i, align 4, !dbg !795
  %add114 = add nsw i32 %84, 1, !dbg !796
  %idxprom115 = sext i32 %add114 to i64, !dbg !797
  %arrayidx116 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 %idxprom115, !dbg !797
  store i32 %83, i32* %arrayidx116, align 4, !dbg !798
  %85 = load i32, i32* %i, align 4, !dbg !799
  store i32 %85, i32* %j, align 4, !dbg !801
  br label %for.cond117, !dbg !802

for.cond117:                                      ; preds = %for.inc187, %av_clipl_int32_c.exit280
  %86 = load i32, i32* %j, align 4, !dbg !803
  %cmp118 = icmp sge i32 %86, 2, !dbg !806
  br i1 %cmp118, label %for.body120, label %for.end188, !dbg !807

for.body120:                                      ; preds = %for.cond117
  %87 = load i32, i32* %j, align 4, !dbg !808
  %sub121 = sub nsw i32 %87, 1, !dbg !810
  %idxprom122 = sext i32 %sub121 to i64, !dbg !811
  %arrayidx123 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 %idxprom122, !dbg !811
  %88 = load i32, i32* %arrayidx123, align 4, !dbg !811
  %shr124 = ashr i32 %88, 16, !dbg !812
  %89 = load i32, i32* %i, align 4, !dbg !813
  %mul125 = mul nsw i32 2, %89, !dbg !814
  %idxprom126 = sext i32 %mul125 to i64, !dbg !815
  %90 = load i16*, i16** %lpc.addr, align 8, !dbg !815
  %arrayidx127 = getelementptr inbounds i16, i16* %90, i64 %idxprom126, !dbg !815
  %91 = load i16, i16* %arrayidx127, align 2, !dbg !815
  %conv128 = sext i16 %91 to i32, !dbg !816
  %mul129 = mul nsw i32 %shr124, %conv128, !dbg !817
  %mul130 = mul nsw i32 %mul129, 2, !dbg !818
  %92 = load i32, i32* %j, align 4, !dbg !819
  %sub131 = sub nsw i32 %92, 1, !dbg !820
  %idxprom132 = sext i32 %sub131 to i64, !dbg !821
  %arrayidx133 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 %idxprom132, !dbg !821
  %93 = load i32, i32* %arrayidx133, align 4, !dbg !821
  %and134 = and i32 %93, 65535, !dbg !822
  %94 = load i32, i32* %i, align 4, !dbg !823
  %mul135 = mul nsw i32 2, %94, !dbg !824
  %idxprom136 = sext i32 %mul135 to i64, !dbg !825
  %95 = load i16*, i16** %lpc.addr, align 8, !dbg !825
  %arrayidx137 = getelementptr inbounds i16, i16* %95, i64 %idxprom136, !dbg !825
  %96 = load i16, i16* %arrayidx137, align 2, !dbg !825
  %conv138 = sext i16 %96 to i32, !dbg !826
  %mul139 = mul nsw i32 %and134, %conv138, !dbg !827
  %shr140 = ashr i32 %mul139, 15, !dbg !828
  %add141 = add nsw i32 %mul130, %shr140, !dbg !829
  %97 = load i32, i32* %j, align 4, !dbg !830
  %idxprom142 = sext i32 %97 to i64, !dbg !831
  %arrayidx143 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 %idxprom142, !dbg !831
  %98 = load i32, i32* %arrayidx143, align 4, !dbg !831
  %shr144 = ashr i32 %98, 1, !dbg !832
  %add145 = add nsw i32 %add141, %shr144, !dbg !833
  %99 = load i32, i32* %j, align 4, !dbg !834
  %sub146 = sub nsw i32 %99, 2, !dbg !835
  %idxprom147 = sext i32 %sub146 to i64, !dbg !836
  %arrayidx148 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 %idxprom147, !dbg !836
  %100 = load i32, i32* %arrayidx148, align 4, !dbg !836
  %shr149 = ashr i32 %100, 1, !dbg !837
  %add150 = add nsw i32 %add145, %shr149, !dbg !838
  %101 = load i32, i32* %j, align 4, !dbg !839
  %idxprom151 = sext i32 %101 to i64, !dbg !840
  %arrayidx152 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 %idxprom151, !dbg !840
  store i32 %add150, i32* %arrayidx152, align 4, !dbg !841
  %102 = load i32, i32* %j, align 4, !dbg !842
  %sub153 = sub nsw i32 %102, 1, !dbg !843
  %idxprom154 = sext i32 %sub153 to i64, !dbg !844
  %arrayidx155 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 %idxprom154, !dbg !844
  %103 = load i32, i32* %arrayidx155, align 4, !dbg !844
  %shr156 = ashr i32 %103, 16, !dbg !845
  %104 = load i32, i32* %i, align 4, !dbg !846
  %mul157 = mul nsw i32 2, %104, !dbg !847
  %add158 = add nsw i32 %mul157, 1, !dbg !848
  %idxprom159 = sext i32 %add158 to i64, !dbg !849
  %105 = load i16*, i16** %lpc.addr, align 8, !dbg !849
  %arrayidx160 = getelementptr inbounds i16, i16* %105, i64 %idxprom159, !dbg !849
  %106 = load i16, i16* %arrayidx160, align 2, !dbg !849
  %conv161 = sext i16 %106 to i32, !dbg !850
  %mul162 = mul nsw i32 %shr156, %conv161, !dbg !851
  %mul163 = mul nsw i32 %mul162, 2, !dbg !852
  %107 = load i32, i32* %j, align 4, !dbg !853
  %sub164 = sub nsw i32 %107, 1, !dbg !854
  %idxprom165 = sext i32 %sub164 to i64, !dbg !855
  %arrayidx166 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 %idxprom165, !dbg !855
  %108 = load i32, i32* %arrayidx166, align 4, !dbg !855
  %and167 = and i32 %108, 65535, !dbg !856
  %109 = load i32, i32* %i, align 4, !dbg !857
  %mul168 = mul nsw i32 2, %109, !dbg !858
  %add169 = add nsw i32 %mul168, 1, !dbg !859
  %idxprom170 = sext i32 %add169 to i64, !dbg !860
  %110 = load i16*, i16** %lpc.addr, align 8, !dbg !860
  %arrayidx171 = getelementptr inbounds i16, i16* %110, i64 %idxprom170, !dbg !860
  %111 = load i16, i16* %arrayidx171, align 2, !dbg !860
  %conv172 = sext i16 %111 to i32, !dbg !861
  %mul173 = mul nsw i32 %and167, %conv172, !dbg !862
  %shr174 = ashr i32 %mul173, 15, !dbg !863
  %add175 = add nsw i32 %mul163, %shr174, !dbg !864
  %112 = load i32, i32* %j, align 4, !dbg !865
  %idxprom176 = sext i32 %112 to i64, !dbg !866
  %arrayidx177 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 %idxprom176, !dbg !866
  %113 = load i32, i32* %arrayidx177, align 4, !dbg !866
  %shr178 = ashr i32 %113, 1, !dbg !867
  %add179 = add nsw i32 %add175, %shr178, !dbg !868
  %114 = load i32, i32* %j, align 4, !dbg !869
  %sub180 = sub nsw i32 %114, 2, !dbg !870
  %idxprom181 = sext i32 %sub180 to i64, !dbg !871
  %arrayidx182 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 %idxprom181, !dbg !871
  %115 = load i32, i32* %arrayidx182, align 4, !dbg !871
  %shr183 = ashr i32 %115, 1, !dbg !872
  %add184 = add nsw i32 %add179, %shr183, !dbg !873
  %116 = load i32, i32* %j, align 4, !dbg !874
  %idxprom185 = sext i32 %116 to i64, !dbg !875
  %arrayidx186 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 %idxprom185, !dbg !875
  store i32 %add184, i32* %arrayidx186, align 4, !dbg !876
  br label %for.inc187, !dbg !877

for.inc187:                                       ; preds = %for.body120
  %117 = load i32, i32* %j, align 4, !dbg !878
  %dec = add nsw i32 %117, -1, !dbg !878
  store i32 %dec, i32* %j, align 4, !dbg !878
  br label %for.cond117, !dbg !880, !llvm.loop !881

for.end188:                                       ; preds = %for.cond117
  %arrayidx189 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 0, !dbg !883
  %118 = load i32, i32* %arrayidx189, align 16, !dbg !884
  %shr190 = ashr i32 %118, 1, !dbg !884
  store i32 %shr190, i32* %arrayidx189, align 16, !dbg !884
  %arrayidx191 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 0, !dbg !885
  %119 = load i32, i32* %arrayidx191, align 16, !dbg !886
  %shr192 = ashr i32 %119, 1, !dbg !886
  store i32 %shr192, i32* %arrayidx191, align 16, !dbg !886
  %120 = load i32, i32* %i, align 4, !dbg !887
  %mul193 = mul nsw i32 2, %120, !dbg !888
  %idxprom194 = sext i32 %mul193 to i64, !dbg !889
  %121 = load i16*, i16** %lpc.addr, align 8, !dbg !889
  %arrayidx195 = getelementptr inbounds i16, i16* %121, i64 %idxprom194, !dbg !889
  %122 = load i16, i16* %arrayidx195, align 2, !dbg !889
  %conv196 = sext i16 %122 to i32, !dbg !889
  %mul197 = mul nsw i32 %conv196, 65536, !dbg !890
  %123 = load i32, i32* %i, align 4, !dbg !891
  %shr198 = ashr i32 %mul197, %123, !dbg !892
  %arrayidx199 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 1, !dbg !893
  %124 = load i32, i32* %arrayidx199, align 4, !dbg !893
  %add200 = add nsw i32 %shr198, %124, !dbg !894
  %shr201 = ashr i32 %add200, 1, !dbg !895
  %arrayidx202 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 1, !dbg !896
  store i32 %shr201, i32* %arrayidx202, align 4, !dbg !897
  %125 = load i32, i32* %i, align 4, !dbg !898
  %mul203 = mul nsw i32 2, %125, !dbg !899
  %add204 = add nsw i32 %mul203, 1, !dbg !900
  %idxprom205 = sext i32 %add204 to i64, !dbg !901
  %126 = load i16*, i16** %lpc.addr, align 8, !dbg !901
  %arrayidx206 = getelementptr inbounds i16, i16* %126, i64 %idxprom205, !dbg !901
  %127 = load i16, i16* %arrayidx206, align 2, !dbg !901
  %conv207 = sext i16 %127 to i32, !dbg !901
  %mul208 = mul nsw i32 %conv207, 65536, !dbg !902
  %128 = load i32, i32* %i, align 4, !dbg !903
  %shr209 = ashr i32 %mul208, %128, !dbg !904
  %arrayidx210 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 1, !dbg !905
  %129 = load i32, i32* %arrayidx210, align 4, !dbg !905
  %add211 = add nsw i32 %shr209, %129, !dbg !906
  %shr212 = ashr i32 %add211, 1, !dbg !907
  %arrayidx213 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 1, !dbg !908
  store i32 %shr212, i32* %arrayidx213, align 4, !dbg !909
  br label %for.inc214, !dbg !910

for.inc214:                                       ; preds = %for.end188
  %130 = load i32, i32* %i, align 4, !dbg !911
  %inc215 = add nsw i32 %130, 1, !dbg !911
  store i32 %inc215, i32* %i, align 4, !dbg !911
  br label %for.cond53, !dbg !913, !llvm.loop !914

for.end216:                                       ; preds = %for.cond53
  store i32 0, i32* %i, align 4, !dbg !916
  br label %for.cond217, !dbg !917

for.cond217:                                      ; preds = %for.inc253, %for.end216
  %131 = load i32, i32* %i, align 4, !dbg !918
  %cmp218 = icmp slt i32 %131, 5, !dbg !920
  br i1 %cmp218, label %for.body220, label %for.end255, !dbg !921

for.body220:                                      ; preds = %for.cond217
  call void @llvm.dbg.declare(metadata i64* %ff1, metadata !922, metadata !55), !dbg !923
  %132 = load i32, i32* %i, align 4, !dbg !924
  %add221 = add nsw i32 %132, 1, !dbg !925
  %idxprom222 = sext i32 %add221 to i64, !dbg !926
  %arrayidx223 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 %idxprom222, !dbg !926
  %133 = load i32, i32* %arrayidx223, align 4, !dbg !926
  %134 = load i32, i32* %i, align 4, !dbg !927
  %idxprom224 = sext i32 %134 to i64, !dbg !928
  %arrayidx225 = getelementptr inbounds [6 x i32], [6 x i32]* %f1, i64 0, i64 %idxprom224, !dbg !928
  %135 = load i32, i32* %arrayidx225, align 4, !dbg !928
  %add226 = add nsw i32 %133, %135, !dbg !929
  %conv227 = sext i32 %add226 to i64, !dbg !926
  store i64 %conv227, i64* %ff1, align 8, !dbg !923
  call void @llvm.dbg.declare(metadata i64* %ff2, metadata !930, metadata !55), !dbg !931
  %136 = load i32, i32* %i, align 4, !dbg !932
  %add228 = add nsw i32 %136, 1, !dbg !933
  %idxprom229 = sext i32 %add228 to i64, !dbg !934
  %arrayidx230 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 %idxprom229, !dbg !934
  %137 = load i32, i32* %arrayidx230, align 4, !dbg !934
  %138 = load i32, i32* %i, align 4, !dbg !935
  %idxprom231 = sext i32 %138 to i64, !dbg !936
  %arrayidx232 = getelementptr inbounds [6 x i32], [6 x i32]* %f2, i64 0, i64 %idxprom231, !dbg !936
  %139 = load i32, i32* %arrayidx232, align 4, !dbg !936
  %sub233 = sub nsw i32 %137, %139, !dbg !937
  %conv234 = sext i32 %sub233 to i64, !dbg !934
  store i64 %conv234, i64* %ff2, align 8, !dbg !931
  %140 = load i64, i64* %ff1, align 8, !dbg !938
  %141 = load i64, i64* %ff2, align 8, !dbg !939
  %add235 = add nsw i64 %140, %141, !dbg !940
  %mul236 = mul nsw i64 %add235, 8, !dbg !941
  %add237 = add nsw i64 %mul236, 32768, !dbg !942
  store i64 %add237, i64* %a.addr.i258, align 8, !dbg !943
  %142 = load i64, i64* %a.addr.i258, align 8, !dbg !944
  %add.i259 = add nsw i64 %142, 2147483648, !dbg !945
  %and.i260 = and i64 %add.i259, -4294967296, !dbg !946
  %tobool.i261 = icmp ne i64 %and.i260, 0, !dbg !946
  br i1 %tobool.i261, label %if.then.i265, label %if.else.i267, !dbg !947

if.then.i265:                                     ; preds = %for.body220
  %143 = load i64, i64* %a.addr.i258, align 8, !dbg !948
  %shr.i262 = ashr i64 %143, 63, !dbg !949
  %xor.i263 = xor i64 %shr.i262, 2147483647, !dbg !950
  %conv.i264 = trunc i64 %xor.i263 to i32, !dbg !951
  store i32 %conv.i264, i32* %retval.i257, align 4, !dbg !952
  br label %av_clipl_int32_c.exit268, !dbg !952

if.else.i267:                                     ; preds = %for.body220
  %144 = load i64, i64* %a.addr.i258, align 8, !dbg !953
  %conv1.i266 = trunc i64 %144 to i32, !dbg !954
  store i32 %conv1.i266, i32* %retval.i257, align 4, !dbg !955
  br label %av_clipl_int32_c.exit268, !dbg !955

av_clipl_int32_c.exit268:                         ; preds = %if.then.i265, %if.else.i267
  %145 = load i32, i32* %retval.i257, align 4, !dbg !956
  %shr239 = ashr i32 %145, 16, !dbg !957
  %conv240 = trunc i32 %shr239 to i16, !dbg !943
  %146 = load i32, i32* %i, align 4, !dbg !958
  %idxprom241 = sext i32 %146 to i64, !dbg !959
  %147 = load i16*, i16** %lpc.addr, align 8, !dbg !959
  %arrayidx242 = getelementptr inbounds i16, i16* %147, i64 %idxprom241, !dbg !959
  store i16 %conv240, i16* %arrayidx242, align 2, !dbg !960
  %148 = load i64, i64* %ff1, align 8, !dbg !961
  %149 = load i64, i64* %ff2, align 8, !dbg !962
  %sub243 = sub nsw i64 %148, %149, !dbg !963
  %mul244 = mul nsw i64 %sub243, 8, !dbg !964
  %add245 = add nsw i64 %mul244, 32768, !dbg !965
  store i64 %add245, i64* %a.addr.i256, align 8, !dbg !966
  %150 = load i64, i64* %a.addr.i256, align 8, !dbg !967
  %add.i = add nsw i64 %150, 2147483648, !dbg !968
  %and.i = and i64 %add.i, -4294967296, !dbg !969
  %tobool.i = icmp ne i64 %and.i, 0, !dbg !969
  br i1 %tobool.i, label %if.then.i, label %if.else.i, !dbg !970

if.then.i:                                        ; preds = %av_clipl_int32_c.exit268
  %151 = load i64, i64* %a.addr.i256, align 8, !dbg !971
  %shr.i = ashr i64 %151, 63, !dbg !972
  %xor.i = xor i64 %shr.i, 2147483647, !dbg !973
  %conv.i = trunc i64 %xor.i to i32, !dbg !974
  store i32 %conv.i, i32* %retval.i, align 4, !dbg !975
  br label %av_clipl_int32_c.exit, !dbg !975

if.else.i:                                        ; preds = %av_clipl_int32_c.exit268
  %152 = load i64, i64* %a.addr.i256, align 8, !dbg !976
  %conv1.i = trunc i64 %152 to i32, !dbg !977
  store i32 %conv1.i, i32* %retval.i, align 4, !dbg !978
  br label %av_clipl_int32_c.exit, !dbg !978

av_clipl_int32_c.exit:                            ; preds = %if.then.i, %if.else.i
  %153 = load i32, i32* %retval.i, align 4, !dbg !979
  %shr247 = ashr i32 %153, 16, !dbg !980
  %conv248 = trunc i32 %shr247 to i16, !dbg !966
  %154 = load i32, i32* %i, align 4, !dbg !981
  %sub249 = sub nsw i32 10, %154, !dbg !982
  %sub250 = sub nsw i32 %sub249, 1, !dbg !983
  %idxprom251 = sext i32 %sub250 to i64, !dbg !984
  %155 = load i16*, i16** %lpc.addr, align 8, !dbg !984
  %arrayidx252 = getelementptr inbounds i16, i16* %155, i64 %idxprom251, !dbg !984
  store i16 %conv248, i16* %arrayidx252, align 2, !dbg !985
  br label %for.inc253, !dbg !986

for.inc253:                                       ; preds = %av_clipl_int32_c.exit
  %156 = load i32, i32* %i, align 4, !dbg !987
  %inc254 = add nsw i32 %156, 1, !dbg !987
  store i32 %inc254, i32* %i, align 4, !dbg !987
  br label %for.cond217, !dbg !989, !llvm.loop !990

for.end255:                                       ; preds = %for.cond217
  ret void, !dbg !992
}

; Function Attrs: nounwind uwtable
define void @ff_g723_1_inverse_quant(i16* %cur_lsp, i16* %prev_lsp, i8* %lsp_index, i32 %bad_frame) #0 !dbg !993 {
entry:
  %cur_lsp.addr = alloca i16*, align 8
  %prev_lsp.addr = alloca i16*, align 8
  %lsp_index.addr = alloca i8*, align 8
  %bad_frame.addr = alloca i32, align 4
  %min_dist = alloca i32, align 4
  %pred = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %temp = alloca i32, align 4
  %stable = alloca i32, align 4
  store i16* %cur_lsp, i16** %cur_lsp.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %cur_lsp.addr, metadata !999, metadata !55), !dbg !1000
  store i16* %prev_lsp, i16** %prev_lsp.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %prev_lsp.addr, metadata !1001, metadata !55), !dbg !1002
  store i8* %lsp_index, i8** %lsp_index.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lsp_index.addr, metadata !1003, metadata !55), !dbg !1004
  store i32 %bad_frame, i32* %bad_frame.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bad_frame.addr, metadata !1005, metadata !55), !dbg !1006
  call void @llvm.dbg.declare(metadata i32* %min_dist, metadata !1007, metadata !55), !dbg !1008
  call void @llvm.dbg.declare(metadata i32* %pred, metadata !1009, metadata !55), !dbg !1010
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1011, metadata !55), !dbg !1012
  call void @llvm.dbg.declare(metadata i32* %j, metadata !1013, metadata !55), !dbg !1014
  call void @llvm.dbg.declare(metadata i32* %temp, metadata !1015, metadata !55), !dbg !1016
  call void @llvm.dbg.declare(metadata i32* %stable, metadata !1017, metadata !55), !dbg !1018
  %0 = load i32, i32* %bad_frame.addr, align 4, !dbg !1019
  %tobool = icmp ne i32 %0, 0, !dbg !1019
  br i1 %tobool, label %if.else, label %if.then, !dbg !1021

if.then:                                          ; preds = %entry
  store i32 256, i32* %min_dist, align 4, !dbg !1022
  store i32 12288, i32* %pred, align 4, !dbg !1024
  br label %if.end, !dbg !1025

if.else:                                          ; preds = %entry
  store i32 512, i32* %min_dist, align 4, !dbg !1026
  store i32 23552, i32* %pred, align 4, !dbg !1028
  %1 = load i8*, i8** %lsp_index.addr, align 8, !dbg !1029
  %arrayidx = getelementptr inbounds i8, i8* %1, i64 2, !dbg !1029
  store i8 0, i8* %arrayidx, align 1, !dbg !1030
  %2 = load i8*, i8** %lsp_index.addr, align 8, !dbg !1031
  %arrayidx1 = getelementptr inbounds i8, i8* %2, i64 1, !dbg !1031
  store i8 0, i8* %arrayidx1, align 1, !dbg !1032
  %3 = load i8*, i8** %lsp_index.addr, align 8, !dbg !1033
  %arrayidx2 = getelementptr inbounds i8, i8* %3, i64 0, !dbg !1033
  store i8 0, i8* %arrayidx2, align 1, !dbg !1034
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load i8*, i8** %lsp_index.addr, align 8, !dbg !1035
  %arrayidx3 = getelementptr inbounds i8, i8* %4, i64 0, !dbg !1035
  %5 = load i8, i8* %arrayidx3, align 1, !dbg !1035
  %idxprom = zext i8 %5 to i64, !dbg !1036
  %arrayidx4 = getelementptr inbounds [256 x [3 x i16]], [256 x [3 x i16]]* @lsp_band0, i64 0, i64 %idxprom, !dbg !1036
  %arrayidx5 = getelementptr inbounds [3 x i16], [3 x i16]* %arrayidx4, i64 0, i64 0, !dbg !1036
  %6 = load i16, i16* %arrayidx5, align 2, !dbg !1036
  %7 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1037
  %arrayidx6 = getelementptr inbounds i16, i16* %7, i64 0, !dbg !1037
  store i16 %6, i16* %arrayidx6, align 2, !dbg !1038
  %8 = load i8*, i8** %lsp_index.addr, align 8, !dbg !1039
  %arrayidx7 = getelementptr inbounds i8, i8* %8, i64 0, !dbg !1039
  %9 = load i8, i8* %arrayidx7, align 1, !dbg !1039
  %idxprom8 = zext i8 %9 to i64, !dbg !1040
  %arrayidx9 = getelementptr inbounds [256 x [3 x i16]], [256 x [3 x i16]]* @lsp_band0, i64 0, i64 %idxprom8, !dbg !1040
  %arrayidx10 = getelementptr inbounds [3 x i16], [3 x i16]* %arrayidx9, i64 0, i64 1, !dbg !1040
  %10 = load i16, i16* %arrayidx10, align 2, !dbg !1040
  %11 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1041
  %arrayidx11 = getelementptr inbounds i16, i16* %11, i64 1, !dbg !1041
  store i16 %10, i16* %arrayidx11, align 2, !dbg !1042
  %12 = load i8*, i8** %lsp_index.addr, align 8, !dbg !1043
  %arrayidx12 = getelementptr inbounds i8, i8* %12, i64 0, !dbg !1043
  %13 = load i8, i8* %arrayidx12, align 1, !dbg !1043
  %idxprom13 = zext i8 %13 to i64, !dbg !1044
  %arrayidx14 = getelementptr inbounds [256 x [3 x i16]], [256 x [3 x i16]]* @lsp_band0, i64 0, i64 %idxprom13, !dbg !1044
  %arrayidx15 = getelementptr inbounds [3 x i16], [3 x i16]* %arrayidx14, i64 0, i64 2, !dbg !1044
  %14 = load i16, i16* %arrayidx15, align 2, !dbg !1044
  %15 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1045
  %arrayidx16 = getelementptr inbounds i16, i16* %15, i64 2, !dbg !1045
  store i16 %14, i16* %arrayidx16, align 2, !dbg !1046
  %16 = load i8*, i8** %lsp_index.addr, align 8, !dbg !1047
  %arrayidx17 = getelementptr inbounds i8, i8* %16, i64 1, !dbg !1047
  %17 = load i8, i8* %arrayidx17, align 1, !dbg !1047
  %idxprom18 = zext i8 %17 to i64, !dbg !1048
  %arrayidx19 = getelementptr inbounds [256 x [3 x i16]], [256 x [3 x i16]]* @lsp_band1, i64 0, i64 %idxprom18, !dbg !1048
  %arrayidx20 = getelementptr inbounds [3 x i16], [3 x i16]* %arrayidx19, i64 0, i64 0, !dbg !1048
  %18 = load i16, i16* %arrayidx20, align 2, !dbg !1048
  %19 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1049
  %arrayidx21 = getelementptr inbounds i16, i16* %19, i64 3, !dbg !1049
  store i16 %18, i16* %arrayidx21, align 2, !dbg !1050
  %20 = load i8*, i8** %lsp_index.addr, align 8, !dbg !1051
  %arrayidx22 = getelementptr inbounds i8, i8* %20, i64 1, !dbg !1051
  %21 = load i8, i8* %arrayidx22, align 1, !dbg !1051
  %idxprom23 = zext i8 %21 to i64, !dbg !1052
  %arrayidx24 = getelementptr inbounds [256 x [3 x i16]], [256 x [3 x i16]]* @lsp_band1, i64 0, i64 %idxprom23, !dbg !1052
  %arrayidx25 = getelementptr inbounds [3 x i16], [3 x i16]* %arrayidx24, i64 0, i64 1, !dbg !1052
  %22 = load i16, i16* %arrayidx25, align 2, !dbg !1052
  %23 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1053
  %arrayidx26 = getelementptr inbounds i16, i16* %23, i64 4, !dbg !1053
  store i16 %22, i16* %arrayidx26, align 2, !dbg !1054
  %24 = load i8*, i8** %lsp_index.addr, align 8, !dbg !1055
  %arrayidx27 = getelementptr inbounds i8, i8* %24, i64 1, !dbg !1055
  %25 = load i8, i8* %arrayidx27, align 1, !dbg !1055
  %idxprom28 = zext i8 %25 to i64, !dbg !1056
  %arrayidx29 = getelementptr inbounds [256 x [3 x i16]], [256 x [3 x i16]]* @lsp_band1, i64 0, i64 %idxprom28, !dbg !1056
  %arrayidx30 = getelementptr inbounds [3 x i16], [3 x i16]* %arrayidx29, i64 0, i64 2, !dbg !1056
  %26 = load i16, i16* %arrayidx30, align 2, !dbg !1056
  %27 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1057
  %arrayidx31 = getelementptr inbounds i16, i16* %27, i64 5, !dbg !1057
  store i16 %26, i16* %arrayidx31, align 2, !dbg !1058
  %28 = load i8*, i8** %lsp_index.addr, align 8, !dbg !1059
  %arrayidx32 = getelementptr inbounds i8, i8* %28, i64 2, !dbg !1059
  %29 = load i8, i8* %arrayidx32, align 1, !dbg !1059
  %idxprom33 = zext i8 %29 to i64, !dbg !1060
  %arrayidx34 = getelementptr inbounds [256 x [4 x i16]], [256 x [4 x i16]]* @lsp_band2, i64 0, i64 %idxprom33, !dbg !1060
  %arrayidx35 = getelementptr inbounds [4 x i16], [4 x i16]* %arrayidx34, i64 0, i64 0, !dbg !1060
  %30 = load i16, i16* %arrayidx35, align 8, !dbg !1060
  %31 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1061
  %arrayidx36 = getelementptr inbounds i16, i16* %31, i64 6, !dbg !1061
  store i16 %30, i16* %arrayidx36, align 2, !dbg !1062
  %32 = load i8*, i8** %lsp_index.addr, align 8, !dbg !1063
  %arrayidx37 = getelementptr inbounds i8, i8* %32, i64 2, !dbg !1063
  %33 = load i8, i8* %arrayidx37, align 1, !dbg !1063
  %idxprom38 = zext i8 %33 to i64, !dbg !1064
  %arrayidx39 = getelementptr inbounds [256 x [4 x i16]], [256 x [4 x i16]]* @lsp_band2, i64 0, i64 %idxprom38, !dbg !1064
  %arrayidx40 = getelementptr inbounds [4 x i16], [4 x i16]* %arrayidx39, i64 0, i64 1, !dbg !1064
  %34 = load i16, i16* %arrayidx40, align 2, !dbg !1064
  %35 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1065
  %arrayidx41 = getelementptr inbounds i16, i16* %35, i64 7, !dbg !1065
  store i16 %34, i16* %arrayidx41, align 2, !dbg !1066
  %36 = load i8*, i8** %lsp_index.addr, align 8, !dbg !1067
  %arrayidx42 = getelementptr inbounds i8, i8* %36, i64 2, !dbg !1067
  %37 = load i8, i8* %arrayidx42, align 1, !dbg !1067
  %idxprom43 = zext i8 %37 to i64, !dbg !1068
  %arrayidx44 = getelementptr inbounds [256 x [4 x i16]], [256 x [4 x i16]]* @lsp_band2, i64 0, i64 %idxprom43, !dbg !1068
  %arrayidx45 = getelementptr inbounds [4 x i16], [4 x i16]* %arrayidx44, i64 0, i64 2, !dbg !1068
  %38 = load i16, i16* %arrayidx45, align 4, !dbg !1068
  %39 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1069
  %arrayidx46 = getelementptr inbounds i16, i16* %39, i64 8, !dbg !1069
  store i16 %38, i16* %arrayidx46, align 2, !dbg !1070
  %40 = load i8*, i8** %lsp_index.addr, align 8, !dbg !1071
  %arrayidx47 = getelementptr inbounds i8, i8* %40, i64 2, !dbg !1071
  %41 = load i8, i8* %arrayidx47, align 1, !dbg !1071
  %idxprom48 = zext i8 %41 to i64, !dbg !1072
  %arrayidx49 = getelementptr inbounds [256 x [4 x i16]], [256 x [4 x i16]]* @lsp_band2, i64 0, i64 %idxprom48, !dbg !1072
  %arrayidx50 = getelementptr inbounds [4 x i16], [4 x i16]* %arrayidx49, i64 0, i64 3, !dbg !1072
  %42 = load i16, i16* %arrayidx50, align 2, !dbg !1072
  %43 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1073
  %arrayidx51 = getelementptr inbounds i16, i16* %43, i64 9, !dbg !1073
  store i16 %42, i16* %arrayidx51, align 2, !dbg !1074
  store i32 0, i32* %i, align 4, !dbg !1075
  br label %for.cond, !dbg !1077

for.cond:                                         ; preds = %for.inc, %if.end
  %44 = load i32, i32* %i, align 4, !dbg !1078
  %cmp = icmp slt i32 %44, 10, !dbg !1081
  br i1 %cmp, label %for.body, label %for.end, !dbg !1082

for.body:                                         ; preds = %for.cond
  %45 = load i32, i32* %i, align 4, !dbg !1083
  %idxprom52 = sext i32 %45 to i64, !dbg !1085
  %46 = load i16*, i16** %prev_lsp.addr, align 8, !dbg !1085
  %arrayidx53 = getelementptr inbounds i16, i16* %46, i64 %idxprom52, !dbg !1085
  %47 = load i16, i16* %arrayidx53, align 2, !dbg !1085
  %conv = sext i16 %47 to i32, !dbg !1085
  %48 = load i32, i32* %i, align 4, !dbg !1086
  %idxprom54 = sext i32 %48 to i64, !dbg !1087
  %arrayidx55 = getelementptr inbounds [10 x i16], [10 x i16]* @dc_lsp, i64 0, i64 %idxprom54, !dbg !1087
  %49 = load i16, i16* %arrayidx55, align 2, !dbg !1087
  %conv56 = sext i16 %49 to i32, !dbg !1087
  %sub = sub nsw i32 %conv, %conv56, !dbg !1088
  %50 = load i32, i32* %pred, align 4, !dbg !1089
  %mul = mul nsw i32 %sub, %50, !dbg !1090
  %add = add nsw i32 %mul, 16384, !dbg !1091
  %shr = ashr i32 %add, 15, !dbg !1092
  store i32 %shr, i32* %temp, align 4, !dbg !1093
  %51 = load i32, i32* %i, align 4, !dbg !1094
  %idxprom57 = sext i32 %51 to i64, !dbg !1095
  %arrayidx58 = getelementptr inbounds [10 x i16], [10 x i16]* @dc_lsp, i64 0, i64 %idxprom57, !dbg !1095
  %52 = load i16, i16* %arrayidx58, align 2, !dbg !1095
  %conv59 = sext i16 %52 to i32, !dbg !1095
  %53 = load i32, i32* %temp, align 4, !dbg !1096
  %add60 = add nsw i32 %conv59, %53, !dbg !1097
  %54 = load i32, i32* %i, align 4, !dbg !1098
  %idxprom61 = sext i32 %54 to i64, !dbg !1099
  %55 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1099
  %arrayidx62 = getelementptr inbounds i16, i16* %55, i64 %idxprom61, !dbg !1099
  %56 = load i16, i16* %arrayidx62, align 2, !dbg !1100
  %conv63 = sext i16 %56 to i32, !dbg !1100
  %add64 = add nsw i32 %conv63, %add60, !dbg !1100
  %conv65 = trunc i32 %add64 to i16, !dbg !1100
  store i16 %conv65, i16* %arrayidx62, align 2, !dbg !1100
  br label %for.inc, !dbg !1101

for.inc:                                          ; preds = %for.body
  %57 = load i32, i32* %i, align 4, !dbg !1102
  %inc = add nsw i32 %57, 1, !dbg !1102
  store i32 %inc, i32* %i, align 4, !dbg !1102
  br label %for.cond, !dbg !1104, !llvm.loop !1105

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !1107
  br label %for.cond66, !dbg !1109

for.cond66:                                       ; preds = %for.inc146, %for.end
  %58 = load i32, i32* %i, align 4, !dbg !1110
  %cmp67 = icmp slt i32 %58, 10, !dbg !1113
  br i1 %cmp67, label %for.body69, label %for.end148, !dbg !1114

for.body69:                                       ; preds = %for.cond66
  %59 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1115
  %arrayidx70 = getelementptr inbounds i16, i16* %59, i64 0, !dbg !1115
  %60 = load i16, i16* %arrayidx70, align 2, !dbg !1115
  %conv71 = sext i16 %60 to i32, !dbg !1117
  %cmp72 = icmp sgt i32 %conv71, 384, !dbg !1118
  br i1 %cmp72, label %cond.true, label %cond.false, !dbg !1117

cond.true:                                        ; preds = %for.body69
  %61 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1119
  %arrayidx74 = getelementptr inbounds i16, i16* %61, i64 0, !dbg !1119
  %62 = load i16, i16* %arrayidx74, align 2, !dbg !1119
  %conv75 = sext i16 %62 to i32, !dbg !1121
  br label %cond.end, !dbg !1122

cond.false:                                       ; preds = %for.body69
  br label %cond.end, !dbg !1123

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv75, %cond.true ], [ 384, %cond.false ], !dbg !1125
  %conv76 = trunc i32 %cond to i16, !dbg !1127
  %63 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1128
  %arrayidx77 = getelementptr inbounds i16, i16* %63, i64 0, !dbg !1128
  store i16 %conv76, i16* %arrayidx77, align 2, !dbg !1129
  %64 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1130
  %arrayidx78 = getelementptr inbounds i16, i16* %64, i64 9, !dbg !1130
  %65 = load i16, i16* %arrayidx78, align 2, !dbg !1130
  %conv79 = sext i16 %65 to i32, !dbg !1131
  %cmp80 = icmp sgt i32 %conv79, 32256, !dbg !1132
  br i1 %cmp80, label %cond.true82, label %cond.false83, !dbg !1131

cond.true82:                                      ; preds = %cond.end
  br label %cond.end86, !dbg !1133

cond.false83:                                     ; preds = %cond.end
  %66 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1134
  %arrayidx84 = getelementptr inbounds i16, i16* %66, i64 9, !dbg !1134
  %67 = load i16, i16* %arrayidx84, align 2, !dbg !1134
  %conv85 = sext i16 %67 to i32, !dbg !1135
  br label %cond.end86, !dbg !1136

cond.end86:                                       ; preds = %cond.false83, %cond.true82
  %cond87 = phi i32 [ 32256, %cond.true82 ], [ %conv85, %cond.false83 ], !dbg !1137
  %conv88 = trunc i32 %cond87 to i16, !dbg !1138
  %68 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1139
  %arrayidx89 = getelementptr inbounds i16, i16* %68, i64 9, !dbg !1139
  store i16 %conv88, i16* %arrayidx89, align 2, !dbg !1140
  store i32 1, i32* %j, align 4, !dbg !1141
  br label %for.cond90, !dbg !1143

for.cond90:                                       ; preds = %for.inc119, %cond.end86
  %69 = load i32, i32* %j, align 4, !dbg !1144
  %cmp91 = icmp slt i32 %69, 10, !dbg !1147
  br i1 %cmp91, label %for.body93, label %for.end121, !dbg !1148

for.body93:                                       ; preds = %for.cond90
  %70 = load i32, i32* %min_dist, align 4, !dbg !1149
  %71 = load i32, i32* %j, align 4, !dbg !1151
  %sub94 = sub nsw i32 %71, 1, !dbg !1152
  %idxprom95 = sext i32 %sub94 to i64, !dbg !1153
  %72 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1153
  %arrayidx96 = getelementptr inbounds i16, i16* %72, i64 %idxprom95, !dbg !1153
  %73 = load i16, i16* %arrayidx96, align 2, !dbg !1153
  %conv97 = sext i16 %73 to i32, !dbg !1153
  %add98 = add nsw i32 %70, %conv97, !dbg !1154
  %74 = load i32, i32* %j, align 4, !dbg !1155
  %idxprom99 = sext i32 %74 to i64, !dbg !1156
  %75 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1156
  %arrayidx100 = getelementptr inbounds i16, i16* %75, i64 %idxprom99, !dbg !1156
  %76 = load i16, i16* %arrayidx100, align 2, !dbg !1156
  %conv101 = sext i16 %76 to i32, !dbg !1156
  %sub102 = sub nsw i32 %add98, %conv101, !dbg !1157
  store i32 %sub102, i32* %temp, align 4, !dbg !1158
  %77 = load i32, i32* %temp, align 4, !dbg !1159
  %cmp103 = icmp sgt i32 %77, 0, !dbg !1161
  br i1 %cmp103, label %if.then105, label %if.end118, !dbg !1162

if.then105:                                       ; preds = %for.body93
  %78 = load i32, i32* %temp, align 4, !dbg !1163
  %shr106 = ashr i32 %78, 1, !dbg !1163
  store i32 %shr106, i32* %temp, align 4, !dbg !1163
  %79 = load i32, i32* %temp, align 4, !dbg !1165
  %80 = load i32, i32* %j, align 4, !dbg !1166
  %sub107 = sub nsw i32 %80, 1, !dbg !1167
  %idxprom108 = sext i32 %sub107 to i64, !dbg !1168
  %81 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1168
  %arrayidx109 = getelementptr inbounds i16, i16* %81, i64 %idxprom108, !dbg !1168
  %82 = load i16, i16* %arrayidx109, align 2, !dbg !1169
  %conv110 = sext i16 %82 to i32, !dbg !1169
  %sub111 = sub nsw i32 %conv110, %79, !dbg !1169
  %conv112 = trunc i32 %sub111 to i16, !dbg !1169
  store i16 %conv112, i16* %arrayidx109, align 2, !dbg !1169
  %83 = load i32, i32* %temp, align 4, !dbg !1170
  %84 = load i32, i32* %j, align 4, !dbg !1171
  %idxprom113 = sext i32 %84 to i64, !dbg !1172
  %85 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1172
  %arrayidx114 = getelementptr inbounds i16, i16* %85, i64 %idxprom113, !dbg !1172
  %86 = load i16, i16* %arrayidx114, align 2, !dbg !1173
  %conv115 = sext i16 %86 to i32, !dbg !1173
  %add116 = add nsw i32 %conv115, %83, !dbg !1173
  %conv117 = trunc i32 %add116 to i16, !dbg !1173
  store i16 %conv117, i16* %arrayidx114, align 2, !dbg !1173
  br label %if.end118, !dbg !1174

if.end118:                                        ; preds = %if.then105, %for.body93
  br label %for.inc119, !dbg !1175

for.inc119:                                       ; preds = %if.end118
  %87 = load i32, i32* %j, align 4, !dbg !1176
  %inc120 = add nsw i32 %87, 1, !dbg !1176
  store i32 %inc120, i32* %j, align 4, !dbg !1176
  br label %for.cond90, !dbg !1178, !llvm.loop !1179

for.end121:                                       ; preds = %for.cond90
  store i32 1, i32* %stable, align 4, !dbg !1181
  store i32 1, i32* %j, align 4, !dbg !1182
  br label %for.cond122, !dbg !1184

for.cond122:                                      ; preds = %for.inc140, %for.end121
  %88 = load i32, i32* %j, align 4, !dbg !1185
  %cmp123 = icmp slt i32 %88, 10, !dbg !1188
  br i1 %cmp123, label %for.body125, label %for.end142, !dbg !1189

for.body125:                                      ; preds = %for.cond122
  %89 = load i32, i32* %j, align 4, !dbg !1190
  %sub126 = sub nsw i32 %89, 1, !dbg !1192
  %idxprom127 = sext i32 %sub126 to i64, !dbg !1193
  %90 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1193
  %arrayidx128 = getelementptr inbounds i16, i16* %90, i64 %idxprom127, !dbg !1193
  %91 = load i16, i16* %arrayidx128, align 2, !dbg !1193
  %conv129 = sext i16 %91 to i32, !dbg !1193
  %92 = load i32, i32* %min_dist, align 4, !dbg !1194
  %add130 = add nsw i32 %conv129, %92, !dbg !1195
  %93 = load i32, i32* %j, align 4, !dbg !1196
  %idxprom131 = sext i32 %93 to i64, !dbg !1197
  %94 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1197
  %arrayidx132 = getelementptr inbounds i16, i16* %94, i64 %idxprom131, !dbg !1197
  %95 = load i16, i16* %arrayidx132, align 2, !dbg !1197
  %conv133 = sext i16 %95 to i32, !dbg !1197
  %sub134 = sub nsw i32 %add130, %conv133, !dbg !1198
  %sub135 = sub nsw i32 %sub134, 4, !dbg !1199
  store i32 %sub135, i32* %temp, align 4, !dbg !1200
  %96 = load i32, i32* %temp, align 4, !dbg !1201
  %cmp136 = icmp sgt i32 %96, 0, !dbg !1203
  br i1 %cmp136, label %if.then138, label %if.end139, !dbg !1204

if.then138:                                       ; preds = %for.body125
  store i32 0, i32* %stable, align 4, !dbg !1205
  br label %for.end142, !dbg !1207

if.end139:                                        ; preds = %for.body125
  br label %for.inc140, !dbg !1208

for.inc140:                                       ; preds = %if.end139
  %97 = load i32, i32* %j, align 4, !dbg !1209
  %inc141 = add nsw i32 %97, 1, !dbg !1209
  store i32 %inc141, i32* %j, align 4, !dbg !1209
  br label %for.cond122, !dbg !1211, !llvm.loop !1212

for.end142:                                       ; preds = %if.then138, %for.cond122
  %98 = load i32, i32* %stable, align 4, !dbg !1214
  %tobool143 = icmp ne i32 %98, 0, !dbg !1214
  br i1 %tobool143, label %if.then144, label %if.end145, !dbg !1216

if.then144:                                       ; preds = %for.end142
  br label %for.end148, !dbg !1217

if.end145:                                        ; preds = %for.end142
  br label %for.inc146, !dbg !1218

for.inc146:                                       ; preds = %if.end145
  %99 = load i32, i32* %i, align 4, !dbg !1219
  %inc147 = add nsw i32 %99, 1, !dbg !1219
  store i32 %inc147, i32* %i, align 4, !dbg !1219
  br label %for.cond66, !dbg !1221, !llvm.loop !1222

for.end148:                                       ; preds = %if.then144, %for.cond66
  %100 = load i32, i32* %stable, align 4, !dbg !1224
  %tobool149 = icmp ne i32 %100, 0, !dbg !1224
  br i1 %tobool149, label %if.end151, label %if.then150, !dbg !1226

if.then150:                                       ; preds = %for.end148
  %101 = load i16*, i16** %cur_lsp.addr, align 8, !dbg !1227
  %102 = bitcast i16* %101 to i8*, !dbg !1228
  %103 = load i16*, i16** %prev_lsp.addr, align 8, !dbg !1229
  %104 = bitcast i16* %103 to i8*, !dbg !1228
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %102, i8* %104, i64 20, i32 2, i1 false), !dbg !1228
  br label %if.end151, !dbg !1228

if.end151:                                        ; preds = %if.then150, %for.end148
  ret void, !dbg !1230
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!44, !45}
!llvm.ident = !{!46}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.9.0 (tags/RELEASE_390/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !8, globals: !14)
!1 = !DIFile(filename: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[inter]libavcodec--g723_1.o.i", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "Rate", file: !4, line: 72, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "libavcodec/g723_1.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!5 = !{!6, !7}
!6 = !DIEnumerator(name: "RATE_6300", value: 0)
!7 = !DIEnumerator(name: "RATE_5300", value: 1)
!8 = !{!9, !12}
!9 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !10, line: 40, baseType: !11)
!10 = !DIFile(filename: "/usr/include/stdint.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!11 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!12 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !10, line: 38, baseType: !13)
!13 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!14 = !{!15, !22, !26, !30, !35, !36, !40}
!15 = distinct !DIGlobalVariable(name: "adaptive_cb_gain85", scope: !0, file: !4, line: 736, type: !16, isLocal: true, isDefinition: true, variable: [1700 x i16]* @adaptive_cb_gain85)
!16 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 27200, align: 16, elements: !20)
!17 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !18)
!18 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !10, line: 37, baseType: !19)
!19 = !DIBasicType(name: "short", size: 16, align: 16, encoding: DW_ATE_signed)
!20 = !{!21}
!21 = !DISubrange(count: 1700)
!22 = distinct !DIGlobalVariable(name: "adaptive_cb_gain170", scope: !0, file: !4, line: 952, type: !23, isLocal: true, isDefinition: true, variable: [3400 x i16]* @adaptive_cb_gain170)
!23 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 54400, align: 16, elements: !24)
!24 = !{!25}
!25 = !DISubrange(count: 3400)
!26 = distinct !DIGlobalVariable(name: "cos_tab", scope: !0, file: !4, line: 246, type: !27, isLocal: true, isDefinition: true, variable: [513 x i16]* @cos_tab)
!27 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 8208, align: 16, elements: !28)
!28 = !{!29}
!29 = !DISubrange(count: 513)
!30 = distinct !DIGlobalVariable(name: "lsp_band0", scope: !0, file: !4, line: 317, type: !31, isLocal: true, isDefinition: true, variable: [256 x [3 x i16]]* @lsp_band0)
!31 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 12288, align: 16, elements: !32)
!32 = !{!33, !34}
!33 = !DISubrange(count: 256)
!34 = !DISubrange(count: 3)
!35 = distinct !DIGlobalVariable(name: "lsp_band1", scope: !0, file: !4, line: 406, type: !31, isLocal: true, isDefinition: true, variable: [256 x [3 x i16]]* @lsp_band1)
!36 = distinct !DIGlobalVariable(name: "lsp_band2", scope: !0, file: !4, line: 495, type: !37, isLocal: true, isDefinition: true, variable: [256 x [4 x i16]]* @lsp_band2)
!37 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 16384, align: 16, elements: !38)
!38 = !{!33, !39}
!39 = !DISubrange(count: 4)
!40 = distinct !DIGlobalVariable(name: "dc_lsp", scope: !0, file: !4, line: 232, type: !41, isLocal: true, isDefinition: true, variable: [10 x i16]* @dc_lsp)
!41 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 160, align: 16, elements: !42)
!42 = !{!43}
!43 = !DISubrange(count: 10)
!44 = !{i32 2, !"Dwarf Version", i32 4}
!45 = !{i32 2, !"Debug Info Version", i32 3}
!46 = !{!"clang version 3.9.0 (tags/RELEASE_390/final)"}
!47 = distinct !DISubprogram(name: "ff_g723_1_scale_vector", scope: !48, file: !48, line: 32, type: !49, isLocal: false, isDefinition: true, scopeLine: 33, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !53)
!48 = !DIFile(filename: "libavcodec/g723_1.c", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!49 = !DISubroutineType(types: !50)
!50 = !{!13, !51, !52, !13}
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18, size: 64, align: 64)
!52 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64, align: 64)
!53 = !{}
!54 = !DILocalVariable(name: "dst", arg: 1, scope: !47, file: !48, line: 32, type: !51)
!55 = !DIExpression()
!56 = !DILocation(line: 32, column: 37, scope: !47)
!57 = !DILocalVariable(name: "vector", arg: 2, scope: !47, file: !48, line: 32, type: !52)
!58 = !DILocation(line: 32, column: 57, scope: !47)
!59 = !DILocalVariable(name: "length", arg: 3, scope: !47, file: !48, line: 32, type: !13)
!60 = !DILocation(line: 32, column: 69, scope: !47)
!61 = !DILocalVariable(name: "bits", scope: !47, file: !48, line: 34, type: !13)
!62 = !DILocation(line: 34, column: 9, scope: !47)
!63 = !DILocalVariable(name: "max", scope: !47, file: !48, line: 34, type: !13)
!64 = !DILocation(line: 34, column: 15, scope: !47)
!65 = !DILocalVariable(name: "i", scope: !47, file: !48, line: 35, type: !13)
!66 = !DILocation(line: 35, column: 9, scope: !47)
!67 = !DILocation(line: 37, column: 12, scope: !68)
!68 = distinct !DILexicalBlock(scope: !47, file: !48, line: 37, column: 5)
!69 = !DILocation(line: 37, column: 10, scope: !68)
!70 = !DILocation(line: 37, column: 17, scope: !71)
!71 = !DILexicalBlockFile(scope: !72, file: !48, discriminator: 1)
!72 = distinct !DILexicalBlock(scope: !68, file: !48, line: 37, column: 5)
!73 = !DILocation(line: 37, column: 21, scope: !71)
!74 = !DILocation(line: 37, column: 19, scope: !71)
!75 = !DILocation(line: 37, column: 5, scope: !71)
!76 = !DILocation(line: 38, column: 25, scope: !72)
!77 = !DILocation(line: 38, column: 18, scope: !72)
!78 = !DILocation(line: 38, column: 17, scope: !72)
!79 = !DILocation(line: 38, column: 29, scope: !72)
!80 = !DILocation(line: 38, column: 44, scope: !71)
!81 = !DILocation(line: 38, column: 37, scope: !71)
!82 = !DILocation(line: 38, column: 36, scope: !71)
!83 = !DILocation(line: 38, column: 17, scope: !71)
!84 = !DILocation(line: 38, column: 60, scope: !85)
!85 = !DILexicalBlockFile(scope: !72, file: !48, discriminator: 2)
!86 = !DILocation(line: 38, column: 53, scope: !85)
!87 = !DILocation(line: 38, column: 52, scope: !85)
!88 = !DILocation(line: 38, column: 51, scope: !85)
!89 = !DILocation(line: 38, column: 17, scope: !85)
!90 = !DILocation(line: 38, column: 17, scope: !91)
!91 = !DILexicalBlockFile(scope: !72, file: !48, discriminator: 3)
!92 = !DILocation(line: 38, column: 13, scope: !91)
!93 = !DILocation(line: 38, column: 9, scope: !91)
!94 = !DILocation(line: 37, column: 30, scope: !85)
!95 = !DILocation(line: 37, column: 5, scope: !85)
!96 = distinct !{!96, !97}
!97 = !DILocation(line: 37, column: 5, scope: !47)
!98 = !DILocation(line: 40, column: 37, scope: !47)
!99 = !DILocation(line: 40, column: 41, scope: !47)
!100 = !DILocation(line: 40, column: 22, scope: !47)
!101 = !DILocation(line: 40, column: 20, scope: !47)
!102 = !DILocation(line: 40, column: 14, scope: !47)
!103 = !DILocation(line: 40, column: 9, scope: !47)
!104 = !DILocation(line: 41, column: 13, scope: !47)
!105 = !DILocation(line: 41, column: 19, scope: !47)
!106 = !DILocation(line: 41, column: 12, scope: !47)
!107 = !DILocation(line: 41, column: 28, scope: !108)
!108 = !DILexicalBlockFile(scope: !47, file: !48, discriminator: 1)
!109 = !DILocation(line: 41, column: 12, scope: !108)
!110 = !DILocation(line: 41, column: 12, scope: !111)
!111 = !DILexicalBlockFile(scope: !47, file: !48, discriminator: 2)
!112 = !DILocation(line: 41, column: 12, scope: !113)
!113 = !DILexicalBlockFile(scope: !47, file: !48, discriminator: 3)
!114 = !DILocation(line: 41, column: 9, scope: !113)
!115 = !DILocation(line: 43, column: 12, scope: !116)
!116 = distinct !DILexicalBlock(scope: !47, file: !48, line: 43, column: 5)
!117 = !DILocation(line: 43, column: 10, scope: !116)
!118 = !DILocation(line: 43, column: 17, scope: !119)
!119 = !DILexicalBlockFile(scope: !120, file: !48, discriminator: 1)
!120 = distinct !DILexicalBlock(scope: !116, file: !48, line: 43, column: 5)
!121 = !DILocation(line: 43, column: 21, scope: !119)
!122 = !DILocation(line: 43, column: 19, scope: !119)
!123 = !DILocation(line: 43, column: 5, scope: !119)
!124 = !DILocation(line: 44, column: 26, scope: !120)
!125 = !DILocation(line: 44, column: 19, scope: !120)
!126 = !DILocation(line: 44, column: 37, scope: !120)
!127 = !DILocation(line: 44, column: 34, scope: !120)
!128 = !DILocation(line: 44, column: 29, scope: !120)
!129 = !DILocation(line: 44, column: 44, scope: !120)
!130 = !DILocation(line: 44, column: 18, scope: !120)
!131 = !DILocation(line: 44, column: 13, scope: !120)
!132 = !DILocation(line: 44, column: 9, scope: !120)
!133 = !DILocation(line: 44, column: 16, scope: !120)
!134 = !DILocation(line: 43, column: 30, scope: !135)
!135 = !DILexicalBlockFile(scope: !120, file: !48, discriminator: 2)
!136 = !DILocation(line: 43, column: 5, scope: !135)
!137 = distinct !{!137, !138}
!138 = !DILocation(line: 43, column: 5, scope: !47)
!139 = !DILocation(line: 46, column: 12, scope: !47)
!140 = !DILocation(line: 46, column: 17, scope: !47)
!141 = !DILocation(line: 46, column: 5, scope: !47)
!142 = distinct !DISubprogram(name: "ff_g723_1_normalize_bits", scope: !48, file: !48, line: 49, type: !143, isLocal: false, isDefinition: true, scopeLine: 50, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !53)
!143 = !DISubroutineType(types: !144)
!144 = !{!13, !13, !13}
!145 = !DILocalVariable(name: "num", arg: 1, scope: !142, file: !48, line: 49, type: !13)
!146 = !DILocation(line: 49, column: 34, scope: !142)
!147 = !DILocalVariable(name: "width", arg: 2, scope: !142, file: !48, line: 49, type: !13)
!148 = !DILocation(line: 49, column: 43, scope: !142)
!149 = !DILocation(line: 51, column: 12, scope: !142)
!150 = !DILocation(line: 51, column: 41, scope: !142)
!151 = !DILocation(line: 51, column: 45, scope: !142)
!152 = !DILocation(line: 51, column: 26, scope: !142)
!153 = !DILocation(line: 51, column: 24, scope: !142)
!154 = !DILocation(line: 51, column: 18, scope: !142)
!155 = !DILocation(line: 51, column: 50, scope: !142)
!156 = !DILocation(line: 51, column: 5, scope: !142)
!157 = distinct !DISubprogram(name: "ff_g723_1_dot_product", scope: !48, file: !48, line: 54, type: !158, isLocal: false, isDefinition: true, scopeLine: 55, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !53)
!158 = !DISubroutineType(types: !159)
!159 = !{!13, !52, !52, !13}
!160 = !DILocalVariable(name: "a", arg: 1, scope: !161, file: !162, line: 203, type: !9)
!161 = distinct !DISubprogram(name: "av_clipl_int32_c", scope: !162, file: !162, line: 203, type: !163, isLocal: true, isDefinition: true, scopeLine: 204, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !53)
!162 = !DIFile(filename: "./libavutil/common.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!163 = !DISubroutineType(types: !164)
!164 = !{!12, !9}
!165 = !DILocation(line: 203, column: 102, scope: !161, inlinedAt: !166)
!166 = distinct !DILocation(line: 255, column: 12, scope: !167, inlinedAt: !168)
!167 = distinct !DISubprogram(name: "av_sat_add32_c", scope: !162, file: !162, line: 253, type: !143, isLocal: true, isDefinition: true, scopeLine: 254, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !53)
!168 = distinct !DILocation(line: 57, column: 12, scope: !157)
!169 = !DILocalVariable(name: "a", arg: 1, scope: !167, file: !162, line: 253, type: !13)
!170 = !DILocation(line: 253, column: 69, scope: !167, inlinedAt: !168)
!171 = !DILocalVariable(name: "b", arg: 2, scope: !167, file: !162, line: 253, type: !13)
!172 = !DILocation(line: 253, column: 76, scope: !167, inlinedAt: !168)
!173 = !DILocalVariable(name: "a", arg: 1, scope: !157, file: !48, line: 54, type: !52)
!174 = !DILocation(line: 54, column: 42, scope: !157)
!175 = !DILocalVariable(name: "b", arg: 2, scope: !157, file: !48, line: 54, type: !52)
!176 = !DILocation(line: 54, column: 60, scope: !157)
!177 = !DILocalVariable(name: "length", arg: 3, scope: !157, file: !48, line: 54, type: !13)
!178 = !DILocation(line: 54, column: 67, scope: !157)
!179 = !DILocalVariable(name: "sum", scope: !157, file: !48, line: 56, type: !13)
!180 = !DILocation(line: 56, column: 9, scope: !157)
!181 = !DILocation(line: 56, column: 30, scope: !157)
!182 = !DILocation(line: 56, column: 33, scope: !157)
!183 = !DILocation(line: 56, column: 36, scope: !157)
!184 = !DILocation(line: 56, column: 15, scope: !157)
!185 = !DILocation(line: 57, column: 27, scope: !157)
!186 = !DILocation(line: 57, column: 32, scope: !157)
!187 = !DILocation(line: 57, column: 12, scope: !157)
!188 = !DILocation(line: 255, column: 38, scope: !167, inlinedAt: !168)
!189 = !DILocation(line: 255, column: 29, scope: !167, inlinedAt: !168)
!190 = !DILocation(line: 255, column: 42, scope: !167, inlinedAt: !168)
!191 = !DILocation(line: 255, column: 40, scope: !167, inlinedAt: !168)
!192 = !DILocation(line: 255, column: 12, scope: !167, inlinedAt: !168)
!193 = !DILocation(line: 205, column: 10, scope: !194, inlinedAt: !166)
!194 = distinct !DILexicalBlock(scope: !161, file: !162, line: 205, column: 9)
!195 = !DILocation(line: 205, column: 11, scope: !194, inlinedAt: !166)
!196 = !DILocation(line: 205, column: 25, scope: !194, inlinedAt: !166)
!197 = !DILocation(line: 205, column: 9, scope: !161, inlinedAt: !166)
!198 = !DILocation(line: 205, column: 60, scope: !199, inlinedAt: !166)
!199 = !DILexicalBlockFile(scope: !194, file: !162, discriminator: 1)
!200 = !DILocation(line: 205, column: 61, scope: !199, inlinedAt: !166)
!201 = !DILocation(line: 205, column: 67, scope: !199, inlinedAt: !166)
!202 = !DILocation(line: 205, column: 49, scope: !199, inlinedAt: !166)
!203 = !DILocation(line: 205, column: 42, scope: !199, inlinedAt: !166)
!204 = !DILocation(line: 206, column: 26, scope: !194, inlinedAt: !166)
!205 = !DILocation(line: 206, column: 17, scope: !194, inlinedAt: !166)
!206 = !DILocation(line: 206, column: 10, scope: !194, inlinedAt: !166)
!207 = !DILocation(line: 207, column: 1, scope: !161, inlinedAt: !166)
!208 = !DILocation(line: 57, column: 5, scope: !157)
!209 = distinct !DISubprogram(name: "ff_g723_1_get_residual", scope: !48, file: !48, line: 60, type: !210, isLocal: false, isDefinition: true, scopeLine: 62, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !53)
!210 = !DISubroutineType(types: !211)
!211 = !{null, !51, !51, !13}
!212 = !DILocalVariable(name: "residual", arg: 1, scope: !209, file: !48, line: 60, type: !51)
!213 = !DILocation(line: 60, column: 38, scope: !209)
!214 = !DILocalVariable(name: "prev_excitation", arg: 2, scope: !209, file: !48, line: 60, type: !51)
!215 = !DILocation(line: 60, column: 57, scope: !209)
!216 = !DILocalVariable(name: "lag", arg: 3, scope: !209, file: !48, line: 61, type: !13)
!217 = !DILocation(line: 61, column: 33, scope: !209)
!218 = !DILocalVariable(name: "offset", scope: !209, file: !48, line: 63, type: !13)
!219 = !DILocation(line: 63, column: 9, scope: !209)
!220 = !DILocation(line: 63, column: 39, scope: !209)
!221 = !DILocation(line: 63, column: 37, scope: !209)
!222 = !DILocalVariable(name: "i", scope: !209, file: !48, line: 64, type: !13)
!223 = !DILocation(line: 64, column: 9, scope: !209)
!224 = !DILocation(line: 66, column: 35, scope: !209)
!225 = !DILocation(line: 66, column: 19, scope: !209)
!226 = !DILocation(line: 66, column: 5, scope: !209)
!227 = !DILocation(line: 66, column: 17, scope: !209)
!228 = !DILocation(line: 67, column: 35, scope: !209)
!229 = !DILocation(line: 67, column: 42, scope: !209)
!230 = !DILocation(line: 67, column: 19, scope: !209)
!231 = !DILocation(line: 67, column: 5, scope: !209)
!232 = !DILocation(line: 67, column: 17, scope: !209)
!233 = !DILocation(line: 69, column: 12, scope: !209)
!234 = !DILocation(line: 70, column: 12, scope: !235)
!235 = distinct !DILexicalBlock(scope: !209, file: !48, line: 70, column: 5)
!236 = !DILocation(line: 70, column: 10, scope: !235)
!237 = !DILocation(line: 70, column: 17, scope: !238)
!238 = !DILexicalBlockFile(scope: !239, file: !48, discriminator: 1)
!239 = distinct !DILexicalBlock(scope: !235, file: !48, line: 70, column: 5)
!240 = !DILocation(line: 70, column: 19, scope: !238)
!241 = !DILocation(line: 70, column: 5, scope: !238)
!242 = !DILocation(line: 71, column: 39, scope: !239)
!243 = !DILocation(line: 71, column: 49, scope: !239)
!244 = !DILocation(line: 71, column: 51, scope: !239)
!245 = !DILocation(line: 71, column: 58, scope: !239)
!246 = !DILocation(line: 71, column: 56, scope: !239)
!247 = !DILocation(line: 71, column: 46, scope: !239)
!248 = !DILocation(line: 71, column: 23, scope: !239)
!249 = !DILocation(line: 71, column: 18, scope: !239)
!250 = !DILocation(line: 71, column: 9, scope: !239)
!251 = !DILocation(line: 71, column: 21, scope: !239)
!252 = !DILocation(line: 70, column: 34, scope: !253)
!253 = !DILexicalBlockFile(scope: !239, file: !48, discriminator: 2)
!254 = !DILocation(line: 70, column: 5, scope: !253)
!255 = distinct !{!255, !256}
!256 = !DILocation(line: 70, column: 5, scope: !209)
!257 = !DILocation(line: 72, column: 1, scope: !209)
!258 = distinct !DISubprogram(name: "ff_g723_1_gen_dirac_train", scope: !48, file: !48, line: 74, type: !259, isLocal: false, isDefinition: true, scopeLine: 75, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !53)
!259 = !DISubroutineType(types: !260)
!260 = !{null, !51, !13}
!261 = !DILocalVariable(name: "buf", arg: 1, scope: !258, file: !48, line: 74, type: !51)
!262 = !DILocation(line: 74, column: 41, scope: !258)
!263 = !DILocalVariable(name: "pitch_lag", arg: 2, scope: !258, file: !48, line: 74, type: !13)
!264 = !DILocation(line: 74, column: 50, scope: !258)
!265 = !DILocalVariable(name: "vector", scope: !258, file: !48, line: 76, type: !266)
!266 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 960, align: 16, elements: !267)
!267 = !{!268}
!268 = !DISubrange(count: 60)
!269 = !DILocation(line: 76, column: 13, scope: !258)
!270 = !DILocalVariable(name: "i", scope: !258, file: !48, line: 77, type: !13)
!271 = !DILocation(line: 77, column: 9, scope: !258)
!272 = !DILocalVariable(name: "j", scope: !258, file: !48, line: 77, type: !13)
!273 = !DILocation(line: 77, column: 12, scope: !258)
!274 = !DILocation(line: 79, column: 5, scope: !258)
!275 = !DILocation(line: 79, column: 20, scope: !258)
!276 = !DILocation(line: 80, column: 14, scope: !277)
!277 = distinct !DILexicalBlock(scope: !258, file: !48, line: 80, column: 5)
!278 = !DILocation(line: 80, column: 12, scope: !277)
!279 = !DILocation(line: 80, column: 10, scope: !277)
!280 = !DILocation(line: 80, column: 25, scope: !281)
!281 = !DILexicalBlockFile(scope: !282, file: !48, discriminator: 1)
!282 = distinct !DILexicalBlock(scope: !277, file: !48, line: 80, column: 5)
!283 = !DILocation(line: 80, column: 27, scope: !281)
!284 = !DILocation(line: 80, column: 5, scope: !281)
!285 = !DILocation(line: 81, column: 16, scope: !286)
!286 = distinct !DILexicalBlock(scope: !287, file: !48, line: 81, column: 9)
!287 = distinct !DILexicalBlock(scope: !282, file: !48, line: 80, column: 49)
!288 = !DILocation(line: 81, column: 14, scope: !286)
!289 = !DILocation(line: 81, column: 21, scope: !290)
!290 = !DILexicalBlockFile(scope: !291, file: !48, discriminator: 1)
!291 = distinct !DILexicalBlock(scope: !286, file: !48, line: 81, column: 9)
!292 = !DILocation(line: 81, column: 30, scope: !290)
!293 = !DILocation(line: 81, column: 28, scope: !290)
!294 = !DILocation(line: 81, column: 23, scope: !290)
!295 = !DILocation(line: 81, column: 9, scope: !290)
!296 = !DILocation(line: 82, column: 34, scope: !291)
!297 = !DILocation(line: 82, column: 27, scope: !291)
!298 = !DILocation(line: 82, column: 17, scope: !291)
!299 = !DILocation(line: 82, column: 21, scope: !291)
!300 = !DILocation(line: 82, column: 19, scope: !291)
!301 = !DILocation(line: 82, column: 13, scope: !291)
!302 = !DILocation(line: 82, column: 24, scope: !291)
!303 = !DILocation(line: 81, column: 34, scope: !304)
!304 = !DILexicalBlockFile(scope: !291, file: !48, discriminator: 2)
!305 = !DILocation(line: 81, column: 9, scope: !304)
!306 = distinct !{!306, !307}
!307 = !DILocation(line: 81, column: 9, scope: !287)
!308 = !DILocation(line: 83, column: 5, scope: !287)
!309 = !DILocation(line: 80, column: 38, scope: !310)
!310 = !DILexicalBlockFile(scope: !282, file: !48, discriminator: 2)
!311 = !DILocation(line: 80, column: 35, scope: !310)
!312 = !DILocation(line: 80, column: 5, scope: !310)
!313 = distinct !{!313, !314}
!314 = !DILocation(line: 80, column: 5, scope: !258)
!315 = !DILocation(line: 84, column: 1, scope: !258)
!316 = distinct !DISubprogram(name: "ff_g723_1_gen_acb_excitation", scope: !48, file: !48, line: 86, type: !317, isLocal: false, isDefinition: true, scopeLine: 89, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !53)
!317 = !DISubroutineType(types: !318)
!318 = !{null, !51, !51, !13, !319, !3}
!319 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !320, size: 64, align: 64)
!320 = !DIDerivedType(tag: DW_TAG_typedef, name: "G723_1_Subframe", file: !4, line: 88, baseType: !321)
!321 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "G723_1_Subframe", file: !4, line: 80, size: 224, align: 32, elements: !322)
!322 = !{!323, !324, !325, !326, !327, !328, !329}
!323 = !DIDerivedType(tag: DW_TAG_member, name: "ad_cb_lag", scope: !321, file: !4, line: 81, baseType: !13, size: 32, align: 32)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "ad_cb_gain", scope: !321, file: !4, line: 82, baseType: !13, size: 32, align: 32, offset: 32)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "dirac_train", scope: !321, file: !4, line: 83, baseType: !13, size: 32, align: 32, offset: 64)
!326 = !DIDerivedType(tag: DW_TAG_member, name: "pulse_sign", scope: !321, file: !4, line: 84, baseType: !13, size: 32, align: 32, offset: 96)
!327 = !DIDerivedType(tag: DW_TAG_member, name: "grid_index", scope: !321, file: !4, line: 85, baseType: !13, size: 32, align: 32, offset: 128)
!328 = !DIDerivedType(tag: DW_TAG_member, name: "amp_index", scope: !321, file: !4, line: 86, baseType: !13, size: 32, align: 32, offset: 160)
!329 = !DIDerivedType(tag: DW_TAG_member, name: "pulse_pos", scope: !321, file: !4, line: 87, baseType: !13, size: 32, align: 32, offset: 192)
!330 = !DILocation(line: 203, column: 102, scope: !161, inlinedAt: !331)
!331 = distinct !DILocation(line: 255, column: 12, scope: !167, inlinedAt: !332)
!332 = distinct !DILocation(line: 267, column: 12, scope: !333, inlinedAt: !335)
!333 = !DILexicalBlockFile(scope: !334, file: !162, discriminator: 1)
!334 = distinct !DISubprogram(name: "av_sat_dadd32_c", scope: !162, file: !162, line: 265, type: !143, isLocal: true, isDefinition: true, scopeLine: 266, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !53)
!335 = distinct !DILocation(line: 109, column: 21, scope: !336)
!336 = !DILexicalBlockFile(scope: !337, file: !48, discriminator: 1)
!337 = distinct !DILexicalBlock(scope: !338, file: !48, line: 107, column: 30)
!338 = distinct !DILexicalBlock(scope: !339, file: !48, line: 107, column: 5)
!339 = distinct !DILexicalBlock(scope: !316, file: !48, line: 107, column: 5)
!340 = !DILocation(line: 253, column: 69, scope: !167, inlinedAt: !332)
!341 = !DILocation(line: 253, column: 76, scope: !167, inlinedAt: !332)
!342 = !DILocation(line: 203, column: 102, scope: !161, inlinedAt: !343)
!343 = distinct !DILocation(line: 255, column: 12, scope: !167, inlinedAt: !344)
!344 = distinct !DILocation(line: 267, column: 30, scope: !334, inlinedAt: !335)
!345 = !DILocation(line: 253, column: 69, scope: !167, inlinedAt: !344)
!346 = !DILocation(line: 253, column: 76, scope: !167, inlinedAt: !344)
!347 = !DILocalVariable(name: "a", arg: 1, scope: !334, file: !162, line: 265, type: !13)
!348 = !DILocation(line: 265, column: 70, scope: !334, inlinedAt: !335)
!349 = !DILocalVariable(name: "b", arg: 2, scope: !334, file: !162, line: 265, type: !13)
!350 = !DILocation(line: 265, column: 77, scope: !334, inlinedAt: !335)
!351 = !DILocation(line: 203, column: 102, scope: !161, inlinedAt: !352)
!352 = distinct !DILocation(line: 255, column: 12, scope: !167, inlinedAt: !353)
!353 = distinct !DILocation(line: 109, column: 46, scope: !337)
!354 = !DILocation(line: 253, column: 69, scope: !167, inlinedAt: !353)
!355 = !DILocation(line: 253, column: 76, scope: !167, inlinedAt: !353)
!356 = !DILocalVariable(name: "vector", arg: 1, scope: !316, file: !48, line: 86, type: !51)
!357 = !DILocation(line: 86, column: 44, scope: !316)
!358 = !DILocalVariable(name: "prev_excitation", arg: 2, scope: !316, file: !48, line: 86, type: !51)
!359 = !DILocation(line: 86, column: 61, scope: !316)
!360 = !DILocalVariable(name: "pitch_lag", arg: 3, scope: !316, file: !48, line: 87, type: !13)
!361 = !DILocation(line: 87, column: 39, scope: !316)
!362 = !DILocalVariable(name: "subfrm", arg: 4, scope: !316, file: !48, line: 87, type: !319)
!363 = !DILocation(line: 87, column: 67, scope: !316)
!364 = !DILocalVariable(name: "cur_rate", arg: 5, scope: !316, file: !48, line: 88, type: !3)
!365 = !DILocation(line: 88, column: 45, scope: !316)
!366 = !DILocalVariable(name: "residual", scope: !316, file: !48, line: 90, type: !367)
!367 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 1024, align: 16, elements: !368)
!368 = !{!369}
!369 = !DISubrange(count: 64)
!370 = !DILocation(line: 90, column: 13, scope: !316)
!371 = !DILocalVariable(name: "cb_ptr", scope: !316, file: !48, line: 91, type: !52)
!372 = !DILocation(line: 91, column: 20, scope: !316)
!373 = !DILocalVariable(name: "lag", scope: !316, file: !48, line: 92, type: !13)
!374 = !DILocation(line: 92, column: 9, scope: !316)
!375 = !DILocation(line: 92, column: 15, scope: !316)
!376 = !DILocation(line: 92, column: 27, scope: !316)
!377 = !DILocation(line: 92, column: 35, scope: !316)
!378 = !DILocation(line: 92, column: 25, scope: !316)
!379 = !DILocation(line: 92, column: 45, scope: !316)
!380 = !DILocalVariable(name: "i", scope: !316, file: !48, line: 94, type: !13)
!381 = !DILocation(line: 94, column: 9, scope: !316)
!382 = !DILocalVariable(name: "sum", scope: !316, file: !48, line: 95, type: !13)
!383 = !DILocation(line: 95, column: 9, scope: !316)
!384 = !DILocation(line: 97, column: 28, scope: !316)
!385 = !DILocation(line: 97, column: 38, scope: !316)
!386 = !DILocation(line: 97, column: 55, scope: !316)
!387 = !DILocation(line: 97, column: 5, scope: !316)
!388 = !DILocation(line: 100, column: 9, scope: !389)
!389 = distinct !DILexicalBlock(scope: !316, file: !48, line: 100, column: 9)
!390 = !DILocation(line: 100, column: 18, scope: !389)
!391 = !DILocation(line: 100, column: 31, scope: !389)
!392 = !DILocation(line: 100, column: 34, scope: !393)
!393 = !DILexicalBlockFile(scope: !389, file: !48, discriminator: 1)
!394 = !DILocation(line: 100, column: 44, scope: !393)
!395 = !DILocation(line: 100, column: 9, scope: !393)
!396 = !DILocation(line: 101, column: 16, scope: !397)
!397 = distinct !DILexicalBlock(scope: !389, file: !48, line: 100, column: 54)
!398 = !DILocation(line: 102, column: 5, scope: !397)
!399 = !DILocation(line: 103, column: 16, scope: !389)
!400 = !DILocation(line: 106, column: 15, scope: !316)
!401 = !DILocation(line: 106, column: 23, scope: !316)
!402 = !DILocation(line: 106, column: 34, scope: !316)
!403 = !DILocation(line: 106, column: 12, scope: !316)
!404 = !DILocation(line: 107, column: 12, scope: !339)
!405 = !DILocation(line: 107, column: 10, scope: !339)
!406 = !DILocation(line: 107, column: 17, scope: !407)
!407 = !DILexicalBlockFile(scope: !338, file: !48, discriminator: 1)
!408 = !DILocation(line: 107, column: 19, scope: !407)
!409 = !DILocation(line: 107, column: 5, scope: !407)
!410 = !DILocation(line: 108, column: 30, scope: !337)
!411 = !DILocation(line: 108, column: 41, scope: !337)
!412 = !DILocation(line: 108, column: 39, scope: !337)
!413 = !DILocation(line: 108, column: 44, scope: !337)
!414 = !DILocation(line: 108, column: 15, scope: !337)
!415 = !DILocation(line: 108, column: 13, scope: !337)
!416 = !DILocation(line: 109, column: 61, scope: !337)
!417 = !DILocation(line: 109, column: 66, scope: !337)
!418 = !DILocation(line: 109, column: 46, scope: !337)
!419 = !DILocation(line: 255, column: 38, scope: !167, inlinedAt: !353)
!420 = !DILocation(line: 255, column: 29, scope: !167, inlinedAt: !353)
!421 = !DILocation(line: 255, column: 42, scope: !167, inlinedAt: !353)
!422 = !DILocation(line: 255, column: 40, scope: !167, inlinedAt: !353)
!423 = !DILocation(line: 255, column: 12, scope: !167, inlinedAt: !353)
!424 = !DILocation(line: 205, column: 10, scope: !194, inlinedAt: !352)
!425 = !DILocation(line: 205, column: 11, scope: !194, inlinedAt: !352)
!426 = !DILocation(line: 205, column: 25, scope: !194, inlinedAt: !352)
!427 = !DILocation(line: 205, column: 9, scope: !161, inlinedAt: !352)
!428 = !DILocation(line: 205, column: 60, scope: !199, inlinedAt: !352)
!429 = !DILocation(line: 205, column: 61, scope: !199, inlinedAt: !352)
!430 = !DILocation(line: 205, column: 67, scope: !199, inlinedAt: !352)
!431 = !DILocation(line: 205, column: 49, scope: !199, inlinedAt: !352)
!432 = !DILocation(line: 205, column: 42, scope: !199, inlinedAt: !352)
!433 = !DILocation(line: 206, column: 26, scope: !194, inlinedAt: !352)
!434 = !DILocation(line: 206, column: 17, scope: !194, inlinedAt: !352)
!435 = !DILocation(line: 206, column: 10, scope: !194, inlinedAt: !352)
!436 = !DILocation(line: 207, column: 1, scope: !161, inlinedAt: !352)
!437 = !DILocation(line: 109, column: 21, scope: !336)
!438 = !DILocation(line: 267, column: 27, scope: !334, inlinedAt: !335)
!439 = !DILocation(line: 267, column: 45, scope: !334, inlinedAt: !335)
!440 = !DILocation(line: 267, column: 48, scope: !334, inlinedAt: !335)
!441 = !DILocation(line: 267, column: 30, scope: !334, inlinedAt: !335)
!442 = !DILocation(line: 255, column: 38, scope: !167, inlinedAt: !344)
!443 = !DILocation(line: 255, column: 29, scope: !167, inlinedAt: !344)
!444 = !DILocation(line: 255, column: 42, scope: !167, inlinedAt: !344)
!445 = !DILocation(line: 255, column: 40, scope: !167, inlinedAt: !344)
!446 = !DILocation(line: 255, column: 12, scope: !167, inlinedAt: !344)
!447 = !DILocation(line: 205, column: 10, scope: !194, inlinedAt: !343)
!448 = !DILocation(line: 205, column: 11, scope: !194, inlinedAt: !343)
!449 = !DILocation(line: 205, column: 25, scope: !194, inlinedAt: !343)
!450 = !DILocation(line: 205, column: 9, scope: !161, inlinedAt: !343)
!451 = !DILocation(line: 205, column: 60, scope: !199, inlinedAt: !343)
!452 = !DILocation(line: 205, column: 61, scope: !199, inlinedAt: !343)
!453 = !DILocation(line: 205, column: 67, scope: !199, inlinedAt: !343)
!454 = !DILocation(line: 205, column: 49, scope: !199, inlinedAt: !343)
!455 = !DILocation(line: 205, column: 42, scope: !199, inlinedAt: !343)
!456 = !DILocation(line: 206, column: 26, scope: !194, inlinedAt: !343)
!457 = !DILocation(line: 206, column: 17, scope: !194, inlinedAt: !343)
!458 = !DILocation(line: 206, column: 10, scope: !194, inlinedAt: !343)
!459 = !DILocation(line: 207, column: 1, scope: !161, inlinedAt: !343)
!460 = !DILocation(line: 267, column: 12, scope: !333, inlinedAt: !335)
!461 = !DILocation(line: 255, column: 38, scope: !167, inlinedAt: !332)
!462 = !DILocation(line: 255, column: 29, scope: !167, inlinedAt: !332)
!463 = !DILocation(line: 255, column: 42, scope: !167, inlinedAt: !332)
!464 = !DILocation(line: 255, column: 40, scope: !167, inlinedAt: !332)
!465 = !DILocation(line: 255, column: 12, scope: !167, inlinedAt: !332)
!466 = !DILocation(line: 205, column: 10, scope: !194, inlinedAt: !331)
!467 = !DILocation(line: 205, column: 11, scope: !194, inlinedAt: !331)
!468 = !DILocation(line: 205, column: 25, scope: !194, inlinedAt: !331)
!469 = !DILocation(line: 205, column: 9, scope: !161, inlinedAt: !331)
!470 = !DILocation(line: 205, column: 60, scope: !199, inlinedAt: !331)
!471 = !DILocation(line: 205, column: 61, scope: !199, inlinedAt: !331)
!472 = !DILocation(line: 205, column: 67, scope: !199, inlinedAt: !331)
!473 = !DILocation(line: 205, column: 49, scope: !199, inlinedAt: !331)
!474 = !DILocation(line: 205, column: 42, scope: !199, inlinedAt: !331)
!475 = !DILocation(line: 206, column: 26, scope: !194, inlinedAt: !331)
!476 = !DILocation(line: 206, column: 17, scope: !194, inlinedAt: !331)
!477 = !DILocation(line: 206, column: 10, scope: !194, inlinedAt: !331)
!478 = !DILocation(line: 207, column: 1, scope: !161, inlinedAt: !331)
!479 = !DILocation(line: 109, column: 72, scope: !337)
!480 = !DILocation(line: 109, column: 21, scope: !337)
!481 = !DILocation(line: 109, column: 16, scope: !337)
!482 = !DILocation(line: 109, column: 9, scope: !337)
!483 = !DILocation(line: 109, column: 19, scope: !337)
!484 = !DILocation(line: 110, column: 5, scope: !337)
!485 = !DILocation(line: 107, column: 26, scope: !486)
!486 = !DILexicalBlockFile(scope: !338, file: !48, discriminator: 2)
!487 = !DILocation(line: 107, column: 5, scope: !486)
!488 = distinct !{!488, !489}
!489 = !DILocation(line: 107, column: 5, scope: !316)
!490 = !DILocation(line: 111, column: 1, scope: !316)
!491 = distinct !DISubprogram(name: "ff_g723_1_lsp_interpolate", scope: !48, file: !48, line: 180, type: !492, isLocal: false, isDefinition: true, scopeLine: 182, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !53)
!492 = !DISubroutineType(types: !493)
!493 = !{null, !51, !51, !51}
!494 = !DILocalVariable(name: "lpc", arg: 1, scope: !491, file: !48, line: 180, type: !51)
!495 = !DILocation(line: 180, column: 41, scope: !491)
!496 = !DILocalVariable(name: "cur_lsp", arg: 2, scope: !491, file: !48, line: 180, type: !51)
!497 = !DILocation(line: 180, column: 55, scope: !491)
!498 = !DILocalVariable(name: "prev_lsp", arg: 3, scope: !491, file: !48, line: 181, type: !51)
!499 = !DILocation(line: 181, column: 41, scope: !491)
!500 = !DILocalVariable(name: "i", scope: !491, file: !48, line: 183, type: !13)
!501 = !DILocation(line: 183, column: 9, scope: !491)
!502 = !DILocalVariable(name: "lpc_ptr", scope: !491, file: !48, line: 184, type: !51)
!503 = !DILocation(line: 184, column: 14, scope: !491)
!504 = !DILocation(line: 184, column: 24, scope: !491)
!505 = !DILocation(line: 187, column: 34, scope: !491)
!506 = !DILocation(line: 187, column: 39, scope: !491)
!507 = !DILocation(line: 187, column: 48, scope: !491)
!508 = !DILocation(line: 187, column: 5, scope: !491)
!509 = !DILocation(line: 189, column: 34, scope: !491)
!510 = !DILocation(line: 189, column: 38, scope: !491)
!511 = !DILocation(line: 189, column: 44, scope: !491)
!512 = !DILocation(line: 189, column: 53, scope: !491)
!513 = !DILocation(line: 189, column: 5, scope: !491)
!514 = !DILocation(line: 191, column: 34, scope: !491)
!515 = !DILocation(line: 191, column: 38, scope: !491)
!516 = !DILocation(line: 191, column: 48, scope: !491)
!517 = !DILocation(line: 191, column: 57, scope: !491)
!518 = !DILocation(line: 191, column: 5, scope: !491)
!519 = !DILocation(line: 193, column: 12, scope: !491)
!520 = !DILocation(line: 193, column: 16, scope: !491)
!521 = !DILocation(line: 193, column: 5, scope: !491)
!522 = !DILocation(line: 193, column: 26, scope: !491)
!523 = !DILocation(line: 195, column: 12, scope: !524)
!524 = distinct !DILexicalBlock(scope: !491, file: !48, line: 195, column: 5)
!525 = !DILocation(line: 195, column: 10, scope: !524)
!526 = !DILocation(line: 195, column: 17, scope: !527)
!527 = !DILexicalBlockFile(scope: !528, file: !48, discriminator: 1)
!528 = distinct !DILexicalBlock(scope: !524, file: !48, line: 195, column: 5)
!529 = !DILocation(line: 195, column: 19, scope: !527)
!530 = !DILocation(line: 195, column: 5, scope: !527)
!531 = !DILocation(line: 196, column: 17, scope: !532)
!532 = distinct !DILexicalBlock(scope: !528, file: !48, line: 195, column: 29)
!533 = !DILocation(line: 196, column: 9, scope: !532)
!534 = !DILocation(line: 197, column: 17, scope: !532)
!535 = !DILocation(line: 198, column: 5, scope: !532)
!536 = !DILocation(line: 195, column: 25, scope: !537)
!537 = !DILexicalBlockFile(scope: !528, file: !48, discriminator: 2)
!538 = !DILocation(line: 195, column: 5, scope: !537)
!539 = distinct !{!539, !540}
!540 = !DILocation(line: 195, column: 5, scope: !491)
!541 = !DILocation(line: 199, column: 1, scope: !491)
!542 = distinct !DISubprogram(name: "lsp2lpc", scope: !48, file: !48, line: 118, type: !543, isLocal: true, isDefinition: true, scopeLine: 119, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !53)
!543 = !DISubroutineType(types: !544)
!544 = !{null, !51}
!545 = !DILocation(line: 203, column: 102, scope: !161, inlinedAt: !546)
!546 = distinct !DILocation(line: 153, column: 21, scope: !547)
!547 = distinct !DILexicalBlock(scope: !548, file: !48, line: 152, column: 34)
!548 = distinct !DILexicalBlock(scope: !549, file: !48, line: 152, column: 5)
!549 = distinct !DILexicalBlock(scope: !542, file: !48, line: 152, column: 5)
!550 = !DILocation(line: 203, column: 102, scope: !161, inlinedAt: !551)
!551 = distinct !DILocation(line: 154, column: 21, scope: !547)
!552 = !DILocation(line: 203, column: 102, scope: !161, inlinedAt: !553)
!553 = distinct !DILocation(line: 174, column: 18, scope: !554)
!554 = distinct !DILexicalBlock(scope: !555, file: !48, line: 170, column: 34)
!555 = distinct !DILexicalBlock(scope: !556, file: !48, line: 170, column: 5)
!556 = distinct !DILexicalBlock(scope: !542, file: !48, line: 170, column: 5)
!557 = !DILocation(line: 203, column: 102, scope: !161, inlinedAt: !558)
!558 = distinct !DILocation(line: 175, column: 27, scope: !554)
!559 = !DILocation(line: 203, column: 102, scope: !161, inlinedAt: !560)
!560 = distinct !DILocation(line: 255, column: 12, scope: !167, inlinedAt: !561)
!561 = distinct !DILocation(line: 267, column: 12, scope: !333, inlinedAt: !562)
!562 = distinct !DILocation(line: 132, column: 20, scope: !563)
!563 = distinct !DILexicalBlock(scope: !564, file: !48, line: 125, column: 30)
!564 = distinct !DILexicalBlock(scope: !565, file: !48, line: 125, column: 5)
!565 = distinct !DILexicalBlock(scope: !542, file: !48, line: 125, column: 5)
!566 = !DILocation(line: 253, column: 69, scope: !167, inlinedAt: !561)
!567 = !DILocation(line: 253, column: 76, scope: !167, inlinedAt: !561)
!568 = !DILocation(line: 203, column: 102, scope: !161, inlinedAt: !569)
!569 = distinct !DILocation(line: 255, column: 12, scope: !167, inlinedAt: !570)
!570 = distinct !DILocation(line: 267, column: 30, scope: !334, inlinedAt: !562)
!571 = !DILocation(line: 253, column: 69, scope: !167, inlinedAt: !570)
!572 = !DILocation(line: 253, column: 76, scope: !167, inlinedAt: !570)
!573 = !DILocation(line: 265, column: 70, scope: !334, inlinedAt: !562)
!574 = !DILocation(line: 265, column: 77, scope: !334, inlinedAt: !562)
!575 = !DILocalVariable(name: "lpc", arg: 1, scope: !542, file: !48, line: 118, type: !51)
!576 = !DILocation(line: 118, column: 30, scope: !542)
!577 = !DILocalVariable(name: "f1", scope: !542, file: !48, line: 120, type: !578)
!578 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 192, align: 32, elements: !579)
!579 = !{!580}
!580 = !DISubrange(count: 6)
!581 = !DILocation(line: 120, column: 9, scope: !542)
!582 = !DILocalVariable(name: "f2", scope: !542, file: !48, line: 121, type: !578)
!583 = !DILocation(line: 121, column: 9, scope: !542)
!584 = !DILocalVariable(name: "i", scope: !542, file: !48, line: 122, type: !13)
!585 = !DILocation(line: 122, column: 9, scope: !542)
!586 = !DILocalVariable(name: "j", scope: !542, file: !48, line: 122, type: !13)
!587 = !DILocation(line: 122, column: 12, scope: !542)
!588 = !DILocation(line: 125, column: 12, scope: !565)
!589 = !DILocation(line: 125, column: 10, scope: !565)
!590 = !DILocation(line: 125, column: 17, scope: !591)
!591 = !DILexicalBlockFile(scope: !564, file: !48, discriminator: 1)
!592 = !DILocation(line: 125, column: 19, scope: !591)
!593 = !DILocation(line: 125, column: 5, scope: !591)
!594 = !DILocalVariable(name: "index", scope: !563, file: !48, line: 126, type: !13)
!595 = !DILocation(line: 126, column: 13, scope: !563)
!596 = !DILocation(line: 126, column: 26, scope: !563)
!597 = !DILocation(line: 126, column: 22, scope: !563)
!598 = !DILocation(line: 126, column: 29, scope: !563)
!599 = !DILocation(line: 126, column: 35, scope: !563)
!600 = !DILocalVariable(name: "offset", scope: !563, file: !48, line: 127, type: !13)
!601 = !DILocation(line: 127, column: 13, scope: !563)
!602 = !DILocation(line: 127, column: 26, scope: !563)
!603 = !DILocation(line: 127, column: 22, scope: !563)
!604 = !DILocation(line: 127, column: 29, scope: !563)
!605 = !DILocalVariable(name: "temp1", scope: !563, file: !48, line: 128, type: !13)
!606 = !DILocation(line: 128, column: 13, scope: !563)
!607 = !DILocation(line: 128, column: 29, scope: !563)
!608 = !DILocation(line: 128, column: 21, scope: !563)
!609 = !DILocation(line: 128, column: 36, scope: !563)
!610 = !DILocalVariable(name: "temp2", scope: !563, file: !48, line: 129, type: !13)
!611 = !DILocation(line: 129, column: 13, scope: !563)
!612 = !DILocation(line: 129, column: 30, scope: !563)
!613 = !DILocation(line: 129, column: 36, scope: !563)
!614 = !DILocation(line: 129, column: 22, scope: !563)
!615 = !DILocation(line: 129, column: 51, scope: !563)
!616 = !DILocation(line: 129, column: 43, scope: !563)
!617 = !DILocation(line: 129, column: 41, scope: !563)
!618 = !DILocation(line: 130, column: 30, scope: !563)
!619 = !DILocation(line: 130, column: 37, scope: !563)
!620 = !DILocation(line: 130, column: 43, scope: !563)
!621 = !DILocation(line: 130, column: 51, scope: !563)
!622 = !DILocation(line: 129, column: 59, scope: !563)
!623 = !DILocation(line: 132, column: 45, scope: !563)
!624 = !DILocation(line: 132, column: 53, scope: !563)
!625 = !DILocation(line: 132, column: 51, scope: !563)
!626 = !DILocation(line: 132, column: 20, scope: !563)
!627 = !DILocation(line: 267, column: 27, scope: !334, inlinedAt: !562)
!628 = !DILocation(line: 267, column: 45, scope: !334, inlinedAt: !562)
!629 = !DILocation(line: 267, column: 48, scope: !334, inlinedAt: !562)
!630 = !DILocation(line: 267, column: 30, scope: !334, inlinedAt: !562)
!631 = !DILocation(line: 255, column: 38, scope: !167, inlinedAt: !570)
!632 = !DILocation(line: 255, column: 29, scope: !167, inlinedAt: !570)
!633 = !DILocation(line: 255, column: 42, scope: !167, inlinedAt: !570)
!634 = !DILocation(line: 255, column: 40, scope: !167, inlinedAt: !570)
!635 = !DILocation(line: 255, column: 12, scope: !167, inlinedAt: !570)
!636 = !DILocation(line: 205, column: 10, scope: !194, inlinedAt: !569)
!637 = !DILocation(line: 205, column: 11, scope: !194, inlinedAt: !569)
!638 = !DILocation(line: 205, column: 25, scope: !194, inlinedAt: !569)
!639 = !DILocation(line: 205, column: 9, scope: !161, inlinedAt: !569)
!640 = !DILocation(line: 205, column: 60, scope: !199, inlinedAt: !569)
!641 = !DILocation(line: 205, column: 61, scope: !199, inlinedAt: !569)
!642 = !DILocation(line: 205, column: 67, scope: !199, inlinedAt: !569)
!643 = !DILocation(line: 205, column: 49, scope: !199, inlinedAt: !569)
!644 = !DILocation(line: 205, column: 42, scope: !199, inlinedAt: !569)
!645 = !DILocation(line: 206, column: 26, scope: !194, inlinedAt: !569)
!646 = !DILocation(line: 206, column: 17, scope: !194, inlinedAt: !569)
!647 = !DILocation(line: 206, column: 10, scope: !194, inlinedAt: !569)
!648 = !DILocation(line: 207, column: 1, scope: !161, inlinedAt: !569)
!649 = !DILocation(line: 267, column: 12, scope: !333, inlinedAt: !562)
!650 = !DILocation(line: 255, column: 38, scope: !167, inlinedAt: !561)
!651 = !DILocation(line: 255, column: 29, scope: !167, inlinedAt: !561)
!652 = !DILocation(line: 255, column: 42, scope: !167, inlinedAt: !561)
!653 = !DILocation(line: 255, column: 40, scope: !167, inlinedAt: !561)
!654 = !DILocation(line: 255, column: 12, scope: !167, inlinedAt: !561)
!655 = !DILocation(line: 205, column: 10, scope: !194, inlinedAt: !560)
!656 = !DILocation(line: 205, column: 11, scope: !194, inlinedAt: !560)
!657 = !DILocation(line: 205, column: 25, scope: !194, inlinedAt: !560)
!658 = !DILocation(line: 205, column: 9, scope: !161, inlinedAt: !560)
!659 = !DILocation(line: 205, column: 60, scope: !199, inlinedAt: !560)
!660 = !DILocation(line: 205, column: 61, scope: !199, inlinedAt: !560)
!661 = !DILocation(line: 205, column: 67, scope: !199, inlinedAt: !560)
!662 = !DILocation(line: 205, column: 49, scope: !199, inlinedAt: !560)
!663 = !DILocation(line: 205, column: 42, scope: !199, inlinedAt: !560)
!664 = !DILocation(line: 206, column: 26, scope: !194, inlinedAt: !560)
!665 = !DILocation(line: 206, column: 17, scope: !194, inlinedAt: !560)
!666 = !DILocation(line: 206, column: 10, scope: !194, inlinedAt: !560)
!667 = !DILocation(line: 207, column: 1, scope: !161, inlinedAt: !560)
!668 = !DILocation(line: 132, column: 60, scope: !563)
!669 = !DILocation(line: 132, column: 18, scope: !563)
!670 = !DILocation(line: 132, column: 13, scope: !563)
!671 = !DILocation(line: 132, column: 9, scope: !563)
!672 = !DILocation(line: 132, column: 16, scope: !563)
!673 = !DILocation(line: 133, column: 5, scope: !563)
!674 = !DILocation(line: 125, column: 26, scope: !675)
!675 = !DILexicalBlockFile(scope: !564, file: !48, discriminator: 2)
!676 = !DILocation(line: 125, column: 5, scope: !675)
!677 = distinct !{!677, !678}
!678 = !DILocation(line: 125, column: 5, scope: !542)
!679 = !DILocation(line: 140, column: 5, scope: !542)
!680 = !DILocation(line: 140, column: 11, scope: !542)
!681 = !DILocation(line: 141, column: 14, scope: !542)
!682 = !DILocation(line: 141, column: 23, scope: !542)
!683 = !DILocation(line: 141, column: 21, scope: !542)
!684 = !DILocation(line: 141, column: 31, scope: !542)
!685 = !DILocation(line: 141, column: 5, scope: !542)
!686 = !DILocation(line: 141, column: 11, scope: !542)
!687 = !DILocation(line: 142, column: 13, scope: !542)
!688 = !DILocation(line: 142, column: 22, scope: !542)
!689 = !DILocation(line: 142, column: 20, scope: !542)
!690 = !DILocation(line: 142, column: 29, scope: !542)
!691 = !DILocation(line: 142, column: 5, scope: !542)
!692 = !DILocation(line: 142, column: 11, scope: !542)
!693 = !DILocation(line: 144, column: 5, scope: !542)
!694 = !DILocation(line: 144, column: 11, scope: !542)
!695 = !DILocation(line: 145, column: 14, scope: !542)
!696 = !DILocation(line: 145, column: 23, scope: !542)
!697 = !DILocation(line: 145, column: 21, scope: !542)
!698 = !DILocation(line: 145, column: 31, scope: !542)
!699 = !DILocation(line: 145, column: 5, scope: !542)
!700 = !DILocation(line: 145, column: 11, scope: !542)
!701 = !DILocation(line: 146, column: 13, scope: !542)
!702 = !DILocation(line: 146, column: 22, scope: !542)
!703 = !DILocation(line: 146, column: 20, scope: !542)
!704 = !DILocation(line: 146, column: 29, scope: !542)
!705 = !DILocation(line: 146, column: 5, scope: !542)
!706 = !DILocation(line: 146, column: 11, scope: !542)
!707 = !DILocation(line: 152, column: 12, scope: !549)
!708 = !DILocation(line: 152, column: 10, scope: !549)
!709 = !DILocation(line: 152, column: 17, scope: !710)
!710 = !DILexicalBlockFile(scope: !548, file: !48, discriminator: 1)
!711 = !DILocation(line: 152, column: 19, scope: !710)
!712 = !DILocation(line: 152, column: 5, scope: !710)
!713 = !DILocation(line: 153, column: 41, scope: !547)
!714 = !DILocation(line: 153, column: 43, scope: !547)
!715 = !DILocation(line: 153, column: 38, scope: !547)
!716 = !DILocation(line: 153, column: 66, scope: !547)
!717 = !DILocation(line: 153, column: 63, scope: !547)
!718 = !DILocation(line: 153, column: 70, scope: !547)
!719 = !DILocation(line: 153, column: 88, scope: !547)
!720 = !DILocation(line: 153, column: 86, scope: !547)
!721 = !DILocation(line: 153, column: 80, scope: !547)
!722 = !DILocation(line: 153, column: 79, scope: !547)
!723 = !DILocation(line: 153, column: 77, scope: !547)
!724 = !DILocation(line: 153, column: 92, scope: !547)
!725 = !DILocation(line: 153, column: 105, scope: !547)
!726 = !DILocation(line: 153, column: 102, scope: !547)
!727 = !DILocation(line: 153, column: 109, scope: !547)
!728 = !DILocation(line: 153, column: 130, scope: !547)
!729 = !DILocation(line: 153, column: 128, scope: !547)
!730 = !DILocation(line: 153, column: 122, scope: !547)
!731 = !DILocation(line: 153, column: 121, scope: !547)
!732 = !DILocation(line: 153, column: 119, scope: !547)
!733 = !DILocation(line: 153, column: 134, scope: !547)
!734 = !DILocation(line: 153, column: 97, scope: !547)
!735 = !DILocation(line: 153, column: 50, scope: !547)
!736 = !DILocation(line: 153, column: 48, scope: !547)
!737 = !DILocation(line: 153, column: 21, scope: !547)
!738 = !DILocation(line: 205, column: 10, scope: !194, inlinedAt: !546)
!739 = !DILocation(line: 205, column: 11, scope: !194, inlinedAt: !546)
!740 = !DILocation(line: 205, column: 25, scope: !194, inlinedAt: !546)
!741 = !DILocation(line: 205, column: 9, scope: !161, inlinedAt: !546)
!742 = !DILocation(line: 205, column: 60, scope: !199, inlinedAt: !546)
!743 = !DILocation(line: 205, column: 61, scope: !199, inlinedAt: !546)
!744 = !DILocation(line: 205, column: 67, scope: !199, inlinedAt: !546)
!745 = !DILocation(line: 205, column: 49, scope: !199, inlinedAt: !546)
!746 = !DILocation(line: 205, column: 42, scope: !199, inlinedAt: !546)
!747 = !DILocation(line: 206, column: 26, scope: !194, inlinedAt: !546)
!748 = !DILocation(line: 206, column: 17, scope: !194, inlinedAt: !546)
!749 = !DILocation(line: 206, column: 10, scope: !194, inlinedAt: !546)
!750 = !DILocation(line: 207, column: 1, scope: !161, inlinedAt: !546)
!751 = !DILocation(line: 153, column: 12, scope: !547)
!752 = !DILocation(line: 153, column: 14, scope: !547)
!753 = !DILocation(line: 153, column: 9, scope: !547)
!754 = !DILocation(line: 153, column: 19, scope: !547)
!755 = !DILocation(line: 154, column: 41, scope: !547)
!756 = !DILocation(line: 154, column: 43, scope: !547)
!757 = !DILocation(line: 154, column: 38, scope: !547)
!758 = !DILocation(line: 154, column: 66, scope: !547)
!759 = !DILocation(line: 154, column: 63, scope: !547)
!760 = !DILocation(line: 154, column: 70, scope: !547)
!761 = !DILocation(line: 154, column: 88, scope: !547)
!762 = !DILocation(line: 154, column: 86, scope: !547)
!763 = !DILocation(line: 154, column: 90, scope: !547)
!764 = !DILocation(line: 154, column: 80, scope: !547)
!765 = !DILocation(line: 154, column: 79, scope: !547)
!766 = !DILocation(line: 154, column: 77, scope: !547)
!767 = !DILocation(line: 154, column: 96, scope: !547)
!768 = !DILocation(line: 154, column: 109, scope: !547)
!769 = !DILocation(line: 154, column: 106, scope: !547)
!770 = !DILocation(line: 154, column: 113, scope: !547)
!771 = !DILocation(line: 154, column: 134, scope: !547)
!772 = !DILocation(line: 154, column: 132, scope: !547)
!773 = !DILocation(line: 154, column: 136, scope: !547)
!774 = !DILocation(line: 154, column: 126, scope: !547)
!775 = !DILocation(line: 154, column: 125, scope: !547)
!776 = !DILocation(line: 154, column: 123, scope: !547)
!777 = !DILocation(line: 154, column: 142, scope: !547)
!778 = !DILocation(line: 154, column: 101, scope: !547)
!779 = !DILocation(line: 154, column: 50, scope: !547)
!780 = !DILocation(line: 154, column: 48, scope: !547)
!781 = !DILocation(line: 154, column: 21, scope: !547)
!782 = !DILocation(line: 205, column: 10, scope: !194, inlinedAt: !551)
!783 = !DILocation(line: 205, column: 11, scope: !194, inlinedAt: !551)
!784 = !DILocation(line: 205, column: 25, scope: !194, inlinedAt: !551)
!785 = !DILocation(line: 205, column: 9, scope: !161, inlinedAt: !551)
!786 = !DILocation(line: 205, column: 60, scope: !199, inlinedAt: !551)
!787 = !DILocation(line: 205, column: 61, scope: !199, inlinedAt: !551)
!788 = !DILocation(line: 205, column: 67, scope: !199, inlinedAt: !551)
!789 = !DILocation(line: 205, column: 49, scope: !199, inlinedAt: !551)
!790 = !DILocation(line: 205, column: 42, scope: !199, inlinedAt: !551)
!791 = !DILocation(line: 206, column: 26, scope: !194, inlinedAt: !551)
!792 = !DILocation(line: 206, column: 17, scope: !194, inlinedAt: !551)
!793 = !DILocation(line: 206, column: 10, scope: !194, inlinedAt: !551)
!794 = !DILocation(line: 207, column: 1, scope: !161, inlinedAt: !551)
!795 = !DILocation(line: 154, column: 12, scope: !547)
!796 = !DILocation(line: 154, column: 14, scope: !547)
!797 = !DILocation(line: 154, column: 9, scope: !547)
!798 = !DILocation(line: 154, column: 19, scope: !547)
!799 = !DILocation(line: 156, column: 18, scope: !800)
!800 = distinct !DILexicalBlock(scope: !547, file: !48, line: 156, column: 9)
!801 = !DILocation(line: 156, column: 16, scope: !800)
!802 = !DILocation(line: 156, column: 14, scope: !800)
!803 = !DILocation(line: 156, column: 21, scope: !804)
!804 = !DILexicalBlockFile(scope: !805, file: !48, discriminator: 1)
!805 = distinct !DILexicalBlock(scope: !800, file: !48, line: 156, column: 9)
!806 = !DILocation(line: 156, column: 23, scope: !804)
!807 = !DILocation(line: 156, column: 9, scope: !804)
!808 = !DILocation(line: 157, column: 28, scope: !809)
!809 = distinct !DILexicalBlock(scope: !805, file: !48, line: 156, column: 34)
!810 = !DILocation(line: 157, column: 30, scope: !809)
!811 = !DILocation(line: 157, column: 25, scope: !809)
!812 = !DILocation(line: 157, column: 36, scope: !809)
!813 = !DILocation(line: 157, column: 54, scope: !809)
!814 = !DILocation(line: 157, column: 52, scope: !809)
!815 = !DILocation(line: 157, column: 46, scope: !809)
!816 = !DILocation(line: 157, column: 45, scope: !809)
!817 = !DILocation(line: 157, column: 43, scope: !809)
!818 = !DILocation(line: 157, column: 58, scope: !809)
!819 = !DILocation(line: 157, column: 71, scope: !809)
!820 = !DILocation(line: 157, column: 73, scope: !809)
!821 = !DILocation(line: 157, column: 68, scope: !809)
!822 = !DILocation(line: 157, column: 79, scope: !809)
!823 = !DILocation(line: 157, column: 100, scope: !809)
!824 = !DILocation(line: 157, column: 98, scope: !809)
!825 = !DILocation(line: 157, column: 92, scope: !809)
!826 = !DILocation(line: 157, column: 91, scope: !809)
!827 = !DILocation(line: 157, column: 89, scope: !809)
!828 = !DILocation(line: 157, column: 104, scope: !809)
!829 = !DILocation(line: 157, column: 63, scope: !809)
!830 = !DILocation(line: 158, column: 25, scope: !809)
!831 = !DILocation(line: 158, column: 22, scope: !809)
!832 = !DILocation(line: 158, column: 28, scope: !809)
!833 = !DILocation(line: 157, column: 112, scope: !809)
!834 = !DILocation(line: 158, column: 40, scope: !809)
!835 = !DILocation(line: 158, column: 42, scope: !809)
!836 = !DILocation(line: 158, column: 37, scope: !809)
!837 = !DILocation(line: 158, column: 47, scope: !809)
!838 = !DILocation(line: 158, column: 34, scope: !809)
!839 = !DILocation(line: 157, column: 16, scope: !809)
!840 = !DILocation(line: 157, column: 13, scope: !809)
!841 = !DILocation(line: 157, column: 19, scope: !809)
!842 = !DILocation(line: 159, column: 28, scope: !809)
!843 = !DILocation(line: 159, column: 30, scope: !809)
!844 = !DILocation(line: 159, column: 25, scope: !809)
!845 = !DILocation(line: 159, column: 36, scope: !809)
!846 = !DILocation(line: 159, column: 54, scope: !809)
!847 = !DILocation(line: 159, column: 52, scope: !809)
!848 = !DILocation(line: 159, column: 56, scope: !809)
!849 = !DILocation(line: 159, column: 46, scope: !809)
!850 = !DILocation(line: 159, column: 45, scope: !809)
!851 = !DILocation(line: 159, column: 43, scope: !809)
!852 = !DILocation(line: 159, column: 62, scope: !809)
!853 = !DILocation(line: 159, column: 75, scope: !809)
!854 = !DILocation(line: 159, column: 77, scope: !809)
!855 = !DILocation(line: 159, column: 72, scope: !809)
!856 = !DILocation(line: 159, column: 83, scope: !809)
!857 = !DILocation(line: 159, column: 104, scope: !809)
!858 = !DILocation(line: 159, column: 102, scope: !809)
!859 = !DILocation(line: 159, column: 106, scope: !809)
!860 = !DILocation(line: 159, column: 96, scope: !809)
!861 = !DILocation(line: 159, column: 95, scope: !809)
!862 = !DILocation(line: 159, column: 93, scope: !809)
!863 = !DILocation(line: 159, column: 112, scope: !809)
!864 = !DILocation(line: 159, column: 67, scope: !809)
!865 = !DILocation(line: 160, column: 25, scope: !809)
!866 = !DILocation(line: 160, column: 22, scope: !809)
!867 = !DILocation(line: 160, column: 28, scope: !809)
!868 = !DILocation(line: 159, column: 120, scope: !809)
!869 = !DILocation(line: 160, column: 40, scope: !809)
!870 = !DILocation(line: 160, column: 42, scope: !809)
!871 = !DILocation(line: 160, column: 37, scope: !809)
!872 = !DILocation(line: 160, column: 47, scope: !809)
!873 = !DILocation(line: 160, column: 34, scope: !809)
!874 = !DILocation(line: 159, column: 16, scope: !809)
!875 = !DILocation(line: 159, column: 13, scope: !809)
!876 = !DILocation(line: 159, column: 19, scope: !809)
!877 = !DILocation(line: 161, column: 9, scope: !809)
!878 = !DILocation(line: 156, column: 30, scope: !879)
!879 = !DILexicalBlockFile(scope: !805, file: !48, discriminator: 2)
!880 = !DILocation(line: 156, column: 9, scope: !879)
!881 = distinct !{!881, !882}
!882 = !DILocation(line: 156, column: 9, scope: !547)
!883 = !DILocation(line: 163, column: 9, scope: !547)
!884 = !DILocation(line: 163, column: 15, scope: !547)
!885 = !DILocation(line: 164, column: 9, scope: !547)
!886 = !DILocation(line: 164, column: 15, scope: !547)
!887 = !DILocation(line: 165, column: 27, scope: !547)
!888 = !DILocation(line: 165, column: 25, scope: !547)
!889 = !DILocation(line: 165, column: 19, scope: !547)
!890 = !DILocation(line: 165, column: 30, scope: !547)
!891 = !DILocation(line: 165, column: 41, scope: !547)
!892 = !DILocation(line: 165, column: 38, scope: !547)
!893 = !DILocation(line: 165, column: 46, scope: !547)
!894 = !DILocation(line: 165, column: 44, scope: !547)
!895 = !DILocation(line: 165, column: 53, scope: !547)
!896 = !DILocation(line: 165, column: 9, scope: !547)
!897 = !DILocation(line: 165, column: 15, scope: !547)
!898 = !DILocation(line: 166, column: 27, scope: !547)
!899 = !DILocation(line: 166, column: 25, scope: !547)
!900 = !DILocation(line: 166, column: 29, scope: !547)
!901 = !DILocation(line: 166, column: 19, scope: !547)
!902 = !DILocation(line: 166, column: 34, scope: !547)
!903 = !DILocation(line: 166, column: 45, scope: !547)
!904 = !DILocation(line: 166, column: 42, scope: !547)
!905 = !DILocation(line: 166, column: 50, scope: !547)
!906 = !DILocation(line: 166, column: 48, scope: !547)
!907 = !DILocation(line: 166, column: 57, scope: !547)
!908 = !DILocation(line: 166, column: 9, scope: !547)
!909 = !DILocation(line: 166, column: 15, scope: !547)
!910 = !DILocation(line: 167, column: 5, scope: !547)
!911 = !DILocation(line: 152, column: 30, scope: !912)
!912 = !DILexicalBlockFile(scope: !548, file: !48, discriminator: 2)
!913 = !DILocation(line: 152, column: 5, scope: !912)
!914 = distinct !{!914, !915}
!915 = !DILocation(line: 152, column: 5, scope: !542)
!916 = !DILocation(line: 170, column: 12, scope: !556)
!917 = !DILocation(line: 170, column: 10, scope: !556)
!918 = !DILocation(line: 170, column: 17, scope: !919)
!919 = !DILexicalBlockFile(scope: !555, file: !48, discriminator: 1)
!920 = !DILocation(line: 170, column: 19, scope: !919)
!921 = !DILocation(line: 170, column: 5, scope: !919)
!922 = !DILocalVariable(name: "ff1", scope: !554, file: !48, line: 171, type: !9)
!923 = !DILocation(line: 171, column: 17, scope: !554)
!924 = !DILocation(line: 171, column: 26, scope: !554)
!925 = !DILocation(line: 171, column: 28, scope: !554)
!926 = !DILocation(line: 171, column: 23, scope: !554)
!927 = !DILocation(line: 171, column: 38, scope: !554)
!928 = !DILocation(line: 171, column: 35, scope: !554)
!929 = !DILocation(line: 171, column: 33, scope: !554)
!930 = !DILocalVariable(name: "ff2", scope: !554, file: !48, line: 172, type: !9)
!931 = !DILocation(line: 172, column: 17, scope: !554)
!932 = !DILocation(line: 172, column: 26, scope: !554)
!933 = !DILocation(line: 172, column: 28, scope: !554)
!934 = !DILocation(line: 172, column: 23, scope: !554)
!935 = !DILocation(line: 172, column: 38, scope: !554)
!936 = !DILocation(line: 172, column: 35, scope: !554)
!937 = !DILocation(line: 172, column: 33, scope: !554)
!938 = !DILocation(line: 174, column: 37, scope: !554)
!939 = !DILocation(line: 174, column: 43, scope: !554)
!940 = !DILocation(line: 174, column: 41, scope: !554)
!941 = !DILocation(line: 174, column: 48, scope: !554)
!942 = !DILocation(line: 174, column: 53, scope: !554)
!943 = !DILocation(line: 174, column: 18, scope: !554)
!944 = !DILocation(line: 205, column: 10, scope: !194, inlinedAt: !553)
!945 = !DILocation(line: 205, column: 11, scope: !194, inlinedAt: !553)
!946 = !DILocation(line: 205, column: 25, scope: !194, inlinedAt: !553)
!947 = !DILocation(line: 205, column: 9, scope: !161, inlinedAt: !553)
!948 = !DILocation(line: 205, column: 60, scope: !199, inlinedAt: !553)
!949 = !DILocation(line: 205, column: 61, scope: !199, inlinedAt: !553)
!950 = !DILocation(line: 205, column: 67, scope: !199, inlinedAt: !553)
!951 = !DILocation(line: 205, column: 49, scope: !199, inlinedAt: !553)
!952 = !DILocation(line: 205, column: 42, scope: !199, inlinedAt: !553)
!953 = !DILocation(line: 206, column: 26, scope: !194, inlinedAt: !553)
!954 = !DILocation(line: 206, column: 17, scope: !194, inlinedAt: !553)
!955 = !DILocation(line: 206, column: 10, scope: !194, inlinedAt: !553)
!956 = !DILocation(line: 207, column: 1, scope: !161, inlinedAt: !553)
!957 = !DILocation(line: 174, column: 66, scope: !554)
!958 = !DILocation(line: 174, column: 13, scope: !554)
!959 = !DILocation(line: 174, column: 9, scope: !554)
!960 = !DILocation(line: 174, column: 16, scope: !554)
!961 = !DILocation(line: 175, column: 46, scope: !554)
!962 = !DILocation(line: 175, column: 52, scope: !554)
!963 = !DILocation(line: 175, column: 50, scope: !554)
!964 = !DILocation(line: 175, column: 57, scope: !554)
!965 = !DILocation(line: 175, column: 62, scope: !554)
!966 = !DILocation(line: 175, column: 27, scope: !554)
!967 = !DILocation(line: 205, column: 10, scope: !194, inlinedAt: !558)
!968 = !DILocation(line: 205, column: 11, scope: !194, inlinedAt: !558)
!969 = !DILocation(line: 205, column: 25, scope: !194, inlinedAt: !558)
!970 = !DILocation(line: 205, column: 9, scope: !161, inlinedAt: !558)
!971 = !DILocation(line: 205, column: 60, scope: !199, inlinedAt: !558)
!972 = !DILocation(line: 205, column: 61, scope: !199, inlinedAt: !558)
!973 = !DILocation(line: 205, column: 67, scope: !199, inlinedAt: !558)
!974 = !DILocation(line: 205, column: 49, scope: !199, inlinedAt: !558)
!975 = !DILocation(line: 205, column: 42, scope: !199, inlinedAt: !558)
!976 = !DILocation(line: 206, column: 26, scope: !194, inlinedAt: !558)
!977 = !DILocation(line: 206, column: 17, scope: !194, inlinedAt: !558)
!978 = !DILocation(line: 206, column: 10, scope: !194, inlinedAt: !558)
!979 = !DILocation(line: 207, column: 1, scope: !161, inlinedAt: !558)
!980 = !DILocation(line: 176, column: 60, scope: !554)
!981 = !DILocation(line: 175, column: 18, scope: !554)
!982 = !DILocation(line: 175, column: 16, scope: !554)
!983 = !DILocation(line: 175, column: 20, scope: !554)
!984 = !DILocation(line: 175, column: 9, scope: !554)
!985 = !DILocation(line: 175, column: 25, scope: !554)
!986 = !DILocation(line: 177, column: 5, scope: !554)
!987 = !DILocation(line: 170, column: 30, scope: !988)
!988 = !DILexicalBlockFile(scope: !555, file: !48, discriminator: 2)
!989 = !DILocation(line: 170, column: 5, scope: !988)
!990 = distinct !{!990, !991}
!991 = !DILocation(line: 170, column: 5, scope: !542)
!992 = !DILocation(line: 178, column: 1, scope: !542)
!993 = distinct !DISubprogram(name: "ff_g723_1_inverse_quant", scope: !48, file: !48, line: 201, type: !994, isLocal: false, isDefinition: true, scopeLine: 203, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !53)
!994 = !DISubroutineType(types: !995)
!995 = !{null, !51, !51, !996, !13}
!996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !997, size: 64, align: 64)
!997 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !10, line: 48, baseType: !998)
!998 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!999 = !DILocalVariable(name: "cur_lsp", arg: 1, scope: !993, file: !48, line: 201, type: !51)
!1000 = !DILocation(line: 201, column: 39, scope: !993)
!1001 = !DILocalVariable(name: "prev_lsp", arg: 2, scope: !993, file: !48, line: 201, type: !51)
!1002 = !DILocation(line: 201, column: 57, scope: !993)
!1003 = !DILocalVariable(name: "lsp_index", arg: 3, scope: !993, file: !48, line: 202, type: !996)
!1004 = !DILocation(line: 202, column: 39, scope: !993)
!1005 = !DILocalVariable(name: "bad_frame", arg: 4, scope: !993, file: !48, line: 202, type: !13)
!1006 = !DILocation(line: 202, column: 54, scope: !993)
!1007 = !DILocalVariable(name: "min_dist", scope: !993, file: !48, line: 204, type: !13)
!1008 = !DILocation(line: 204, column: 9, scope: !993)
!1009 = !DILocalVariable(name: "pred", scope: !993, file: !48, line: 204, type: !13)
!1010 = !DILocation(line: 204, column: 19, scope: !993)
!1011 = !DILocalVariable(name: "i", scope: !993, file: !48, line: 205, type: !13)
!1012 = !DILocation(line: 205, column: 9, scope: !993)
!1013 = !DILocalVariable(name: "j", scope: !993, file: !48, line: 205, type: !13)
!1014 = !DILocation(line: 205, column: 12, scope: !993)
!1015 = !DILocalVariable(name: "temp", scope: !993, file: !48, line: 205, type: !13)
!1016 = !DILocation(line: 205, column: 15, scope: !993)
!1017 = !DILocalVariable(name: "stable", scope: !993, file: !48, line: 205, type: !13)
!1018 = !DILocation(line: 205, column: 21, scope: !993)
!1019 = !DILocation(line: 208, column: 10, scope: !1020)
!1020 = distinct !DILexicalBlock(scope: !993, file: !48, line: 208, column: 9)
!1021 = !DILocation(line: 208, column: 9, scope: !993)
!1022 = !DILocation(line: 209, column: 18, scope: !1023)
!1023 = distinct !DILexicalBlock(scope: !1020, file: !48, line: 208, column: 21)
!1024 = !DILocation(line: 210, column: 14, scope: !1023)
!1025 = !DILocation(line: 211, column: 5, scope: !1023)
!1026 = !DILocation(line: 212, column: 18, scope: !1027)
!1027 = distinct !DILexicalBlock(scope: !1020, file: !48, line: 211, column: 12)
!1028 = !DILocation(line: 213, column: 14, scope: !1027)
!1029 = !DILocation(line: 214, column: 39, scope: !1027)
!1030 = !DILocation(line: 214, column: 52, scope: !1027)
!1031 = !DILocation(line: 214, column: 24, scope: !1027)
!1032 = !DILocation(line: 214, column: 37, scope: !1027)
!1033 = !DILocation(line: 214, column: 9, scope: !1027)
!1034 = !DILocation(line: 214, column: 22, scope: !1027)
!1035 = !DILocation(line: 218, column: 28, scope: !993)
!1036 = !DILocation(line: 218, column: 18, scope: !993)
!1037 = !DILocation(line: 218, column: 5, scope: !993)
!1038 = !DILocation(line: 218, column: 16, scope: !993)
!1039 = !DILocation(line: 219, column: 28, scope: !993)
!1040 = !DILocation(line: 219, column: 18, scope: !993)
!1041 = !DILocation(line: 219, column: 5, scope: !993)
!1042 = !DILocation(line: 219, column: 16, scope: !993)
!1043 = !DILocation(line: 220, column: 28, scope: !993)
!1044 = !DILocation(line: 220, column: 18, scope: !993)
!1045 = !DILocation(line: 220, column: 5, scope: !993)
!1046 = !DILocation(line: 220, column: 16, scope: !993)
!1047 = !DILocation(line: 221, column: 28, scope: !993)
!1048 = !DILocation(line: 221, column: 18, scope: !993)
!1049 = !DILocation(line: 221, column: 5, scope: !993)
!1050 = !DILocation(line: 221, column: 16, scope: !993)
!1051 = !DILocation(line: 222, column: 28, scope: !993)
!1052 = !DILocation(line: 222, column: 18, scope: !993)
!1053 = !DILocation(line: 222, column: 5, scope: !993)
!1054 = !DILocation(line: 222, column: 16, scope: !993)
!1055 = !DILocation(line: 223, column: 28, scope: !993)
!1056 = !DILocation(line: 223, column: 18, scope: !993)
!1057 = !DILocation(line: 223, column: 5, scope: !993)
!1058 = !DILocation(line: 223, column: 16, scope: !993)
!1059 = !DILocation(line: 224, column: 28, scope: !993)
!1060 = !DILocation(line: 224, column: 18, scope: !993)
!1061 = !DILocation(line: 224, column: 5, scope: !993)
!1062 = !DILocation(line: 224, column: 16, scope: !993)
!1063 = !DILocation(line: 225, column: 28, scope: !993)
!1064 = !DILocation(line: 225, column: 18, scope: !993)
!1065 = !DILocation(line: 225, column: 5, scope: !993)
!1066 = !DILocation(line: 225, column: 16, scope: !993)
!1067 = !DILocation(line: 226, column: 28, scope: !993)
!1068 = !DILocation(line: 226, column: 18, scope: !993)
!1069 = !DILocation(line: 226, column: 5, scope: !993)
!1070 = !DILocation(line: 226, column: 16, scope: !993)
!1071 = !DILocation(line: 227, column: 28, scope: !993)
!1072 = !DILocation(line: 227, column: 18, scope: !993)
!1073 = !DILocation(line: 227, column: 5, scope: !993)
!1074 = !DILocation(line: 227, column: 16, scope: !993)
!1075 = !DILocation(line: 230, column: 12, scope: !1076)
!1076 = distinct !DILexicalBlock(scope: !993, file: !48, line: 230, column: 5)
!1077 = !DILocation(line: 230, column: 10, scope: !1076)
!1078 = !DILocation(line: 230, column: 17, scope: !1079)
!1079 = !DILexicalBlockFile(scope: !1080, file: !48, discriminator: 1)
!1080 = distinct !DILexicalBlock(scope: !1076, file: !48, line: 230, column: 5)
!1081 = !DILocation(line: 230, column: 19, scope: !1079)
!1082 = !DILocation(line: 230, column: 5, scope: !1079)
!1083 = !DILocation(line: 231, column: 27, scope: !1084)
!1084 = distinct !DILexicalBlock(scope: !1080, file: !48, line: 230, column: 30)
!1085 = !DILocation(line: 231, column: 18, scope: !1084)
!1086 = !DILocation(line: 231, column: 39, scope: !1084)
!1087 = !DILocation(line: 231, column: 32, scope: !1084)
!1088 = !DILocation(line: 231, column: 30, scope: !1084)
!1089 = !DILocation(line: 231, column: 45, scope: !1084)
!1090 = !DILocation(line: 231, column: 43, scope: !1084)
!1091 = !DILocation(line: 231, column: 50, scope: !1084)
!1092 = !DILocation(line: 231, column: 63, scope: !1084)
!1093 = !DILocation(line: 231, column: 14, scope: !1084)
!1094 = !DILocation(line: 232, column: 30, scope: !1084)
!1095 = !DILocation(line: 232, column: 23, scope: !1084)
!1096 = !DILocation(line: 232, column: 35, scope: !1084)
!1097 = !DILocation(line: 232, column: 33, scope: !1084)
!1098 = !DILocation(line: 232, column: 17, scope: !1084)
!1099 = !DILocation(line: 232, column: 9, scope: !1084)
!1100 = !DILocation(line: 232, column: 20, scope: !1084)
!1101 = !DILocation(line: 233, column: 5, scope: !1084)
!1102 = !DILocation(line: 230, column: 26, scope: !1103)
!1103 = !DILexicalBlockFile(scope: !1080, file: !48, discriminator: 2)
!1104 = !DILocation(line: 230, column: 5, scope: !1103)
!1105 = distinct !{!1105, !1106}
!1106 = !DILocation(line: 230, column: 5, scope: !993)
!1107 = !DILocation(line: 235, column: 12, scope: !1108)
!1108 = distinct !DILexicalBlock(scope: !993, file: !48, line: 235, column: 5)
!1109 = !DILocation(line: 235, column: 10, scope: !1108)
!1110 = !DILocation(line: 235, column: 17, scope: !1111)
!1111 = !DILexicalBlockFile(scope: !1112, file: !48, discriminator: 1)
!1112 = distinct !DILexicalBlock(scope: !1108, file: !48, line: 235, column: 5)
!1113 = !DILocation(line: 235, column: 19, scope: !1111)
!1114 = !DILocation(line: 235, column: 5, scope: !1111)
!1115 = !DILocation(line: 236, column: 24, scope: !1116)
!1116 = distinct !DILexicalBlock(scope: !1112, file: !48, line: 235, column: 30)
!1117 = !DILocation(line: 236, column: 23, scope: !1116)
!1118 = !DILocation(line: 236, column: 36, scope: !1116)
!1119 = !DILocation(line: 236, column: 49, scope: !1120)
!1120 = !DILexicalBlockFile(scope: !1116, file: !48, discriminator: 1)
!1121 = !DILocation(line: 236, column: 48, scope: !1120)
!1122 = !DILocation(line: 236, column: 23, scope: !1120)
!1123 = !DILocation(line: 236, column: 23, scope: !1124)
!1124 = !DILexicalBlockFile(scope: !1116, file: !48, discriminator: 2)
!1125 = !DILocation(line: 236, column: 23, scope: !1126)
!1126 = !DILexicalBlockFile(scope: !1116, file: !48, discriminator: 3)
!1127 = !DILocation(line: 236, column: 22, scope: !1126)
!1128 = !DILocation(line: 236, column: 9, scope: !1126)
!1129 = !DILocation(line: 236, column: 20, scope: !1126)
!1130 = !DILocation(line: 237, column: 29, scope: !1116)
!1131 = !DILocation(line: 237, column: 28, scope: !1116)
!1132 = !DILocation(line: 237, column: 46, scope: !1116)
!1133 = !DILocation(line: 237, column: 28, scope: !1120)
!1134 = !DILocation(line: 237, column: 71, scope: !1124)
!1135 = !DILocation(line: 237, column: 70, scope: !1124)
!1136 = !DILocation(line: 237, column: 28, scope: !1124)
!1137 = !DILocation(line: 237, column: 28, scope: !1126)
!1138 = !DILocation(line: 237, column: 27, scope: !1126)
!1139 = !DILocation(line: 237, column: 9, scope: !1126)
!1140 = !DILocation(line: 237, column: 25, scope: !1126)
!1141 = !DILocation(line: 240, column: 16, scope: !1142)
!1142 = distinct !DILexicalBlock(scope: !1116, file: !48, line: 240, column: 9)
!1143 = !DILocation(line: 240, column: 14, scope: !1142)
!1144 = !DILocation(line: 240, column: 21, scope: !1145)
!1145 = !DILexicalBlockFile(scope: !1146, file: !48, discriminator: 1)
!1146 = distinct !DILexicalBlock(scope: !1142, file: !48, line: 240, column: 9)
!1147 = !DILocation(line: 240, column: 23, scope: !1145)
!1148 = !DILocation(line: 240, column: 9, scope: !1145)
!1149 = !DILocation(line: 241, column: 20, scope: !1150)
!1150 = distinct !DILexicalBlock(scope: !1146, file: !48, line: 240, column: 34)
!1151 = !DILocation(line: 241, column: 39, scope: !1150)
!1152 = !DILocation(line: 241, column: 41, scope: !1150)
!1153 = !DILocation(line: 241, column: 31, scope: !1150)
!1154 = !DILocation(line: 241, column: 29, scope: !1150)
!1155 = !DILocation(line: 241, column: 56, scope: !1150)
!1156 = !DILocation(line: 241, column: 48, scope: !1150)
!1157 = !DILocation(line: 241, column: 46, scope: !1150)
!1158 = !DILocation(line: 241, column: 18, scope: !1150)
!1159 = !DILocation(line: 242, column: 17, scope: !1160)
!1160 = distinct !DILexicalBlock(scope: !1150, file: !48, line: 242, column: 17)
!1161 = !DILocation(line: 242, column: 22, scope: !1160)
!1162 = !DILocation(line: 242, column: 17, scope: !1150)
!1163 = !DILocation(line: 243, column: 22, scope: !1164)
!1164 = distinct !DILexicalBlock(scope: !1160, file: !48, line: 242, column: 27)
!1165 = !DILocation(line: 244, column: 35, scope: !1164)
!1166 = !DILocation(line: 244, column: 25, scope: !1164)
!1167 = !DILocation(line: 244, column: 27, scope: !1164)
!1168 = !DILocation(line: 244, column: 17, scope: !1164)
!1169 = !DILocation(line: 244, column: 32, scope: !1164)
!1170 = !DILocation(line: 245, column: 31, scope: !1164)
!1171 = !DILocation(line: 245, column: 25, scope: !1164)
!1172 = !DILocation(line: 245, column: 17, scope: !1164)
!1173 = !DILocation(line: 245, column: 28, scope: !1164)
!1174 = !DILocation(line: 246, column: 13, scope: !1164)
!1175 = !DILocation(line: 247, column: 9, scope: !1150)
!1176 = !DILocation(line: 240, column: 30, scope: !1177)
!1177 = !DILexicalBlockFile(scope: !1146, file: !48, discriminator: 2)
!1178 = !DILocation(line: 240, column: 9, scope: !1177)
!1179 = distinct !{!1179, !1180}
!1180 = !DILocation(line: 240, column: 9, scope: !1116)
!1181 = !DILocation(line: 248, column: 16, scope: !1116)
!1182 = !DILocation(line: 249, column: 16, scope: !1183)
!1183 = distinct !DILexicalBlock(scope: !1116, file: !48, line: 249, column: 9)
!1184 = !DILocation(line: 249, column: 14, scope: !1183)
!1185 = !DILocation(line: 249, column: 21, scope: !1186)
!1186 = !DILexicalBlockFile(scope: !1187, file: !48, discriminator: 1)
!1187 = distinct !DILexicalBlock(scope: !1183, file: !48, line: 249, column: 9)
!1188 = !DILocation(line: 249, column: 23, scope: !1186)
!1189 = !DILocation(line: 249, column: 9, scope: !1186)
!1190 = !DILocation(line: 250, column: 28, scope: !1191)
!1191 = distinct !DILexicalBlock(scope: !1187, file: !48, line: 249, column: 34)
!1192 = !DILocation(line: 250, column: 30, scope: !1191)
!1193 = !DILocation(line: 250, column: 20, scope: !1191)
!1194 = !DILocation(line: 250, column: 37, scope: !1191)
!1195 = !DILocation(line: 250, column: 35, scope: !1191)
!1196 = !DILocation(line: 250, column: 56, scope: !1191)
!1197 = !DILocation(line: 250, column: 48, scope: !1191)
!1198 = !DILocation(line: 250, column: 46, scope: !1191)
!1199 = !DILocation(line: 250, column: 59, scope: !1191)
!1200 = !DILocation(line: 250, column: 18, scope: !1191)
!1201 = !DILocation(line: 251, column: 17, scope: !1202)
!1202 = distinct !DILexicalBlock(scope: !1191, file: !48, line: 251, column: 17)
!1203 = !DILocation(line: 251, column: 22, scope: !1202)
!1204 = !DILocation(line: 251, column: 17, scope: !1191)
!1205 = !DILocation(line: 252, column: 24, scope: !1206)
!1206 = distinct !DILexicalBlock(scope: !1202, file: !48, line: 251, column: 27)
!1207 = !DILocation(line: 253, column: 17, scope: !1206)
!1208 = !DILocation(line: 255, column: 9, scope: !1191)
!1209 = !DILocation(line: 249, column: 30, scope: !1210)
!1210 = !DILexicalBlockFile(scope: !1187, file: !48, discriminator: 2)
!1211 = !DILocation(line: 249, column: 9, scope: !1210)
!1212 = distinct !{!1212, !1213}
!1213 = !DILocation(line: 249, column: 9, scope: !1116)
!1214 = !DILocation(line: 256, column: 13, scope: !1215)
!1215 = distinct !DILexicalBlock(scope: !1116, file: !48, line: 256, column: 13)
!1216 = !DILocation(line: 256, column: 13, scope: !1116)
!1217 = !DILocation(line: 257, column: 13, scope: !1215)
!1218 = !DILocation(line: 258, column: 5, scope: !1116)
!1219 = !DILocation(line: 235, column: 26, scope: !1220)
!1220 = !DILexicalBlockFile(scope: !1112, file: !48, discriminator: 2)
!1221 = !DILocation(line: 235, column: 5, scope: !1220)
!1222 = distinct !{!1222, !1223}
!1223 = !DILocation(line: 235, column: 5, scope: !993)
!1224 = !DILocation(line: 259, column: 10, scope: !1225)
!1225 = distinct !DILexicalBlock(scope: !993, file: !48, line: 259, column: 9)
!1226 = !DILocation(line: 259, column: 9, scope: !993)
!1227 = !DILocation(line: 260, column: 16, scope: !1225)
!1228 = !DILocation(line: 260, column: 9, scope: !1225)
!1229 = !DILocation(line: 260, column: 25, scope: !1225)
!1230 = !DILocation(line: 261, column: 1, scope: !993)
