; ModuleID = '/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[inter]libavcodec--wmavoice.o.i'
source_filename = "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[inter]libavcodec--wmavoice.o.i"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal** }
%struct.AVRational = type { i32, i32 }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* }
%struct.AVOption = type opaque
%struct.AVOptionRanges = type opaque
%struct.AVProfile = type { i32, i8* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32 }
%struct.AVCodecInternal = type { i32, i32, i32, %struct.AVFrame*, %struct.FramePool*, i8*, %struct.DecodeSimpleContext, %struct.DecodeFilterContext, %struct.AVPacket*, i8*, i32, i8*, i32, i8*, i32, %struct.AVPacket*, i32, %struct.AVFrame*, i32, i32, i32, i64, i64, %struct.AVFrame*, i32, i32, i32 }
%struct.FramePool = type { [4 x %struct.AVBufferPool*], i32, i32, i32, [8 x i32], [4 x i32], i32, i32, i32 }
%struct.AVBufferPool = type opaque
%struct.DecodeSimpleContext = type { %struct.AVPacket*, %struct.AVFrame* }
%struct.DecodeFilterContext = type { %struct.AVBSFContext**, i32 }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFInternal = type opaque
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, {}*, i32, void (%struct.MpegEncContext*)*, {}*, {}*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVDictionary = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVCodecDefault = type { i8*, i8* }
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.VLC = type { i32, [2 x i16]*, i32, i32 }
%struct.frame_type_desc = type { i8, i8, i8, i8, i8 }
%struct.WMAVoiceContext = type { %struct.GetBitContext, [25 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i16], i32, i32, i32, [320 x i8], i32, %struct.PutBitContext, [16 x double], i32, i32, i32, float, i32, i32, [2 x i32], [2 x i32], i32, i32, i32, [6 x float], [416 x float], [16 x float], %struct.RDFTContext, %struct.RDFTContext, %struct.DCTContext, %struct.DCTContext, [511 x float], [511 x float], float, [2 x float], [896 x float], [160 x float], i32, [24 x i8], [128 x float], [128 x float], [144 x float] }
%struct.GetBitContext = type { i8*, i8*, i32, i32, i32 }
%struct.PutBitContext = type { i32, i32, i8*, i8*, i8*, i32 }
%struct.RDFTContext = type { i32, i32, i32, float*, float*, i32, %struct.FFTContext, void (%struct.RDFTContext*, float*)* }
%struct.FFTContext = type { i32, i32, i16*, %struct.FFTComplex*, i32, i32, float*, float*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, %struct.FFTComplex*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, void (%struct.FFTContext*, float*, float*)*, i32, i32, i32* }
%struct.FFTComplex = type { float, float }
%struct.DCTContext = type { i32, i32, %struct.RDFTContext, float*, float*, void (%struct.DCTContext*, float*)*, void (float*, float*)* }
%union.unaligned_32 = type { i32 }
%struct.AMRFixed = type { i32, [10 x i32], [10 x float], i32, i32, float }

@.str = private unnamed_addr constant [9 x i8] c"wmavoice\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"Windows Media Audio Voice\00", align 1
@ff_wmavoice_decoder = global %struct.AVCodec { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i32 0, i32 0), i32 1, i32 86052, i32 290, %struct.AVRational* null, i32* null, i32* null, i32* null, i64* null, i8 0, %struct.AVClass* null, %struct.AVProfile* null, i8* null, i32 13120, %struct.AVCodec* null, i32 (%struct.AVCodecContext*)* null, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)* null, %struct.AVCodecDefault* null, void (%struct.AVCodec*)* null, i32 (%struct.AVCodecContext*)* @wmavoice_decode_init, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)* null, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)* @wmavoice_decode_packet, i32 (%struct.AVCodecContext*)* @wmavoice_decode_end, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, i32 (%struct.AVCodecContext*, %struct.AVPacket*)* null, i32 (%struct.AVCodecContext*, %struct.AVFrame*)* null, void (%struct.AVCodecContext*)* @wmavoice_flush, i32 0, i8* null, %struct.AVCodecHWConfigInternal** null }, align 8
@wmavoice_decode_init.init_static_once = internal global i32 0, align 4
@.str.2 = private unnamed_addr constant [42 x i8] c"Invalid extradata size %d (should be 46)\0A\00", align 1
@.str.3 = private unnamed_addr constant [29 x i8] c"Invalid block alignment %d.\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"Invalid denoise filter strength %d (max=11)\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"Invalid VBM tree; broken extradata?\0A\00", align 1
@.str.6 = private unnamed_addr constant [40 x i8] c"Invalid pitch range; broken extradata?\0A\00", align 1
@.str.7 = private unnamed_addr constant [44 x i8] c"Unsupported samplerate %d (min=%d, max=%d)\0A\00", align 1
@.str.8 = private unnamed_addr constant [47 x i8] c"Invalid delta pitch hrange; broken extradata?\0A\00", align 1
@wmavoice_init_static_data.bits = internal constant [22 x i8] c"\02\02\02\04\04\04\06\06\06\08\08\08\0A\0A\0A\0C\0C\0C\0E\0E\0E\0E", align 16
@wmavoice_init_static_data.codes = internal constant [22 x i16] [i16 0, i16 1, i16 2, i16 12, i16 13, i16 14, i16 60, i16 61, i16 62, i16 252, i16 253, i16 254, i16 1020, i16 1021, i16 1022, i16 4092, i16 4093, i16 4094, i16 16380, i16 16381, i16 16382, i16 16383], align 16
@wmavoice_init_static_data.table = internal global [132 x [2 x i16]] zeroinitializer, align 16
@frame_type_vlc = internal global %struct.VLC zeroinitializer, align 8
@.str.9 = private unnamed_addr constant [43 x i8] c"Internal error, put_bits buffer too small\0A\00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"s->buf_ptr < s->buf_end\00", align 1
@.str.12 = private unnamed_addr constant [22 x i8] c"libavcodec/put_bits.h\00", align 1
@wmavoice_mean_lsf16 = internal constant [2 x [16 x double]] [[16 x double] [double 0x3FB99466C1098805, double 0x3FCE0727BA61C3C8, double 0x3FDD93109488F4C2, double 0x3FE5AC11DF591F09, double 0x3FEAB55E1E76EC23, double 0x3FF01BA560999534, double 0x3FF283C3D0F58773, double 0x3FF5449C8F1ACF34, double 0x3FF7E8063A81B11B, double 0x3FFA8FAB63837894, double 0x3FFD89BE07433288, double 0x40006C7062AF1AE2, double 0x40022713F1F8A0FE, double 0x4003F5BD0BA86E8D, double 0x4005BCFAD4A591D3, double 0x400754F59C59247A], [16 x double] [double 0x3FB782291074B643, double 0x3FCFB01E292B8A82, double 0x3FDE9C5D7B4332D4, double 0x3FE41C7CA5534761, double 0x3FE92882AE8533E8, double 9.303736e-01, double 0x3FF18134638308E9, double 0x3FF4089D14F93662, double 0x3FF718775D4BE3EE, double 0x3FFA7B7534FF48F2, double 0x3FFE44CC3174D6BC, double 0x4000C61959CD8EAF, double 0x40026298D11CBDA6, double 0x4003DC667C2B8CB0, double 0x4005765E670E630C, double 0x40070C908C7FAAB0]], align 16
@wmavoice_mean_lsf10 = internal constant [2 x [10 x double]] [[10 x double] [double 0x3FCC9CF0745B6C6E, double 0x3FDA3951BC000DFC, double 0x3FE67B1EAB9C0D83, double 0x3FF1B9346E1D7442, double 0x3FF64D7CDC4B4F47, double 0x3FFAC93BAB94D33D, double 0x3FFF48E35429A12F, double 0x4001C2848E2C998A, double 0x4004152D269F6921, double 0x4006436C3CD3C0BE], [10 x double] [double 0x3FC31E80722CF86F, double 0x3FD7C59A661139B6, double 0x3FE8A6139D26FE02, double 0x3FF0F99D6A8B437D, double 0x3FF53B8A5DDD1803, double 0x3FF94A26B2C8F4E4, double 0x3FFD700757B1438F, double 0x4000E4B559E2A12A, double 0x40030F0DD1C20283, double 0x40057E19622D9AE4]], align 16
@.str.13 = private unnamed_addr constant [19 x i8] c"WMAPro-in-WMAVoice\00", align 1
@.str.14 = private unnamed_addr constant [51 x i8] c"Superframe encodes > %d samples (%d), not allowed\0A\00", align 1
@dequant_lsp10r.vec_sizes = internal constant [3 x i16] [i16 128, i16 64, i16 64], align 2
@dequant_lsp10r.mul_lsf = internal constant [3 x double] [double 0x3F65243F09B29E8E, double 0x3F543DD610A464CE, double 0x3F53461ABBE9E64E], align 16
@dequant_lsp10r.base_lsf = internal constant [3 x double] [double 0xBFD59A8C3AD1A17F, double 0xBFC531C046A094B0, double 0xBFC4C3653A6AEAC7], align 16
@wmavoice_lsp10_intercoeff_b = internal constant [32 x [2 x [10 x float]]] [[2 x [10 x float]] [[10 x float] [float 0x3FDF3D1C40000000, float 0xBFC993AD40000000, float 0xBFD8C8B520000000, float 0x3F8668EC00000000, float 0x3FA4D60500000000, float 0x3FC6E45A40000000, float 0x3FC56C8C00000000, float 0x3FD5D295E0000000, float 0x3FD9FDDFA0000000, float 0x3FE0B53040000000], [10 x float] [float 0x3FC319B340000000, float 0xBFC190DA00000000, float 0xBFD12CF5E0000000, float 0xBFAFD80900000000, float 0xBFAFFA6500000000, float 0xBF7BECF000000000, float 0xBF7F259000000000, float 0x3FB169FE00000000, float 0x3FBB06FB80000000, float 0x3FBEB7DD80000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE963CF60000000, float 0x3F545DE000000000, float 0x3FDB21EDA0000000, float 0x3FE1AB1280000000, float 0x3FE4CA7700000000, float 0x3FE48E5600000000, float 0x3FE6F1D360000000, float 0x3FE6F149E0000000, float 0x3FE8E40960000000, float 0x3FEADED640000000], [10 x float] [float 0x3FD1B76740000000, float 0xBFA92AA800000000, float 0xBFA0AD6D00000000, float 0x3F9AC62600000000, float 0x3FA80EA500000000, float 0x3FB0A02180000000, float 0x3FB403B480000000, float 0x3FBA681200000000, float 0x3FBE958180000000, float 0x3FCF619540000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE7142F40000000, float 0x3FC53B27C0000000, float 0x3F84CC9C00000000, float 0x3FE2090620000000, float 0x3FF514D440000000, float 0x3FF30F05C0000000, float 0x3FF206E2A0000000, float 0x3FEA567940000000, float 0x3FEB887C80000000, float 0x3FE9E757A0000000], [10 x float] [float 0x3FD76A9A60000000, float 0x3FB4E75600000000, float 0xBFCAC8E940000000, float 0x3FC8E9E400000000, float 0x3FF15ED8A0000000, float 0x3FEE5F66E0000000, float 0x3FEB137320000000, float 0x3FE09EA3E0000000, float 0x3FE31F1EC0000000, float 0x3FE0F03E40000000]], [2 x [10 x float]] [[10 x float] [float 0x3FEE6C4980000000, float 0x3FED0D2D40000000, float 0x3FEC12FF60000000, float 0x3FEBC49D80000000, float 0x3FE9AD5C60000000, float 0x3FEA022F80000000, float 0x3FEA635BA0000000, float 0x3FEC17D460000000, float 0x3FEE40CD00000000, float 0x3FEF905760000000], [10 x float] [float 0x3FE6073720000000, float 0x3FE614A300000000, float 0x3FE6971860000000, float 0x3FE4F81920000000, float 0x3FE2B2AC60000000, float 0x3FE1C56100000000, float 0x3FE2D72E20000000, float 0x3FE4C85140000000, float 0x3FE8B91640000000, float 0x3FE8EFD8E0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FCEB7EF00000000, float 0x3FC8D01F00000000, float 0x3FDC6DB600000000, float 0x3FDCA478A0000000, float 0x3FD38DB280000000, float 0x3FC6569EC0000000, float 0x3FBE105D00000000, float 0x3FB165B280000000, float 0x3FB4080000000000, float 0x3FC5B369C0000000], [10 x float] [float 0x3F91722C00000000, float 0x3F99F7FE00000000, float 0x3FCA863400000000, float 0x3FC86B30C0000000, float 0x3FBC114480000000, float 0x3FA0BE0F00000000, float 0xBF8B84C400000000, float 0xBFA79F8600000000, float 0xBFA317E500000000, float 0xBF98E63600000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE17675A0000000, float 0x3FD828A740000000, float 0x3FE0C0FFC0000000, float 0x3FD329D720000000, float 0x3FCEA6C100000000, float 0x3FE256DE80000000, float 0x3FEFE86340000000, float 0x3FF2A29360000000, float 0x3FECE3D6A0000000, float 0x3FE8E37FE0000000], [10 x float] [float 0x3FCD4ADD80000000, float 0x3FBE3F9B80000000, float 0x3FCA8CA540000000, float 0x3FA22F6C00000000, float 0xBF646B0000000000, float 0x3FD09E1600000000, float 0x3FE7EB77C0000000, float 0x3FED2193E0000000, float 0x3FE2F7EDC0000000, float 0x3FDE8BF1E0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE4EEF8C0000000, float 0x3FE48535A0000000, float 0x3FE8666900000000, float 0x3FE90B3A40000000, float 0x3FDEF86440000000, float 0x3FD53186A0000000, float 0x3FDD4BF920000000, float 0x3FEB6EB7A0000000, float 0x3FEE372320000000, float 0x3FEA816C20000000], [10 x float] [float 0x3FD240D740000000, float 0x3FD0BC2680000000, float 0x3FDB04F000000000, float 0x3FDB9D6840000000, float 0x3FC25CB940000000, float 0x3FA64FF900000000, float 0x3FC1E25180000000, float 0x3FE1AED4A0000000, float 0x3FE59B4E20000000, float 0x3FE18F27E0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE59340A0000000, float 0x3FF0FA2F20000000, float 0x3FF0CD1660000000, float 0x3FEE9FD360000000, float 0x3FEDD79340000000, float 0x3FED93EE20000000, float 0x3FED469F20000000, float 0x3FEA9DE060000000, float 0x3FE8A0EDA0000000, float 0x3FE5B62620000000], [10 x float] [float 0x3FCD3BD540000000, float 0x3FEF2A5640000000, float 0x3FE113AD40000000, float 0x3FDFD6A760000000, float 0x3FD996CBA0000000, float 0x3FD7845F60000000, float 0x3FD167F280000000, float 0x3FD0B27CA0000000, float 0x3FCAB9BE00000000, float 0x3FC572FD40000000]], [2 x [10 x float]] [[10 x float] [float 0x3FD7E94DA0000000, float 0xBFF8BB8760000000, float 0x3FED7E74A0000000, float 0x3FE9783600000000, float 0x3FE78BE7E0000000, float 0x3FE7255D40000000, float 0x3FE74480A0000000, float 0x3FE5ED7220000000, float 0x3FE60DA860000000, float 0x3FE51629A0000000], [10 x float] [float 0x3FBFE8CE00000000, float 0xBFFB77DE80000000, float 0x3FE684D780000000, float 0x3FDEBD5620000000, float 0x3FDE0C2BC0000000, float 0x3FDDCAAC60000000, float 0x3FE0AA7360000000, float 0x3FE0FA71A0000000, float 0x3FE0EBF2E0000000, float 0x3FE0E3E540000000]], [2 x [10 x float]] [[10 x float] [float 0x3FF02F8460000000, float 0x3FEF9FE920000000, float 0x3FEADC2720000000, float 0x3FEC728F60000000, float 0x3FEC971100000000, float 0x3FEC7FFB40000000, float 0x3FED82C020000000, float 0x3FECB6BDE0000000, float 0x3FED9FBDC0000000, float 0x3FEDC801A0000000], [10 x float] [float 0x3FE0504200000000, float 0xBF85E1AC00000000, float 0x3FC22B5500000000, float 0x3FD1F38840000000, float 0x3FD7CE75C0000000, float 0x3FD7A5A880000000, float 0x3FDDB30D20000000, float 0x3FE01C2E80000000, float 0x3FE1E50DE0000000, float 0x3FE549B3C0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FEF192840000000, float 0x3FE85E5B60000000, float 0x3FCBCEC3C0000000, float 0x3FDF7D88C0000000, float 0x3FDB96F700000000, float 0x3FE01F6720000000, float 0x3FDDE025E0000000, float 0x3FE115D2E0000000, float 0x3FDC8109C0000000, float 0x3FD9EB9EC0000000], [10 x float] [float 0x3FE4F09500000000, float 0x3FBEDA3980000000, float 0xBF74AD8800000000, float 0x3FC43975C0000000, float 0x3FC0C06940000000, float 0x3FC5C497C0000000, float 0x3FC6479680000000, float 0x3FCBE66300000000, float 0x3FC92E9C00000000, float 0x3FC5CF5480000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE8858C60000000, float 0x3FD9C2D180000000, float 0x3FF6193580000000, float 0x3FF2A0F720000000, float 0x3FF122B7A0000000, float 0x3FEF667740000000, float 0x3FF025DAA0000000, float 0x3FED15C460000000, float 0x3FE8E26D00000000, float 0x3FEA353000000000], [10 x float] [float 0x3FD6378420000000, float 0x3FAED5CB00000000, float 0x3FF659A200000000, float 0x3FF158AC20000000, float 0x3FEC9BE600000000, float 0x3FE7676620000000, float 0x3FE7812B20000000, float 0x3FE0F95EC0000000, float 0x3FDA1691C0000000, float 0x3FDD074120000000]], [2 x [10 x float]] [[10 x float] [float 0x3FC0A6A440000000, float 0x3FC0EFA7C0000000, float 0x3FE8347B40000000, float 0x3FE7791D80000000, float 0x3FE95BC1E0000000, float 0x3FE3533220000000, float 0x3FE611F3E0000000, float 0x3FD7A5A880000000, float 0x3FD215E440000000, float 0x3FD458A1E0000000], [10 x float] [float 0xBF9557B000000000, float 0xBFAB2E0C00000000, float 0x3FD6130260000000, float 0x3FD871AAC0000000, float 0x3FDC968340000000, float 0x3FD1F7D3C0000000, float 0x3FD8985240000000, float 0x3FBD4F1780000000, float 0x3FAF9B5C00000000, float 0x3FB3A53780000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE830B940000000, float 0x3FEB148600000000, float 0x3FE4A5F540000000, float 0x3FF2181080000000, float 0x3FF0F892C0000000, float 0x3FEE654EC0000000, float 0x3FE7C2AA80000000, float 0x3FE3E8FB40000000, float 0x3FE509D0A0000000, float 0x3FE652E9C0000000], [10 x float] [float 0x3FD5E4D6C0000000, float 0x3FDB95E420000000, float 0x3FD1ED1700000000, float 0x3FEDD098A0000000, float 0x3FEA465E20000000, float 0x3FE3A9A1A0000000, float 0x3FD4A816A0000000, float 0x3FCF8C8840000000, float 0x3FD1B98D00000000, float 0x3FD68A3180000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE85A0FE0000000, float 0x3FE6381200000000, float 0x3FF262B060000000, float 0x3FDBD87660000000, float 0x3FE386BC40000000, float 0x3FE3FCD880000000, float 0x3FE79591C0000000, float 0x3FE4DEDDA0000000, float 0x3FE64ADC40000000, float 0x3FE8358E20000000], [10 x float] [float 0x3FD93628E0000000, float 0x3FD6130260000000, float 0x3FEF9977E0000000, float 0x3FB751CE00000000, float 0x3FD1F27560000000, float 0x3FD27CF840000000, float 0x3FD9FCCCC0000000, float 0x3FD50580C0000000, float 0x3FD64BEAC0000000, float 0x3FDED82E00000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE90D6000000000, float 0x3FF2EECFA0000000, float 0x3FFFDDA8A0000000, float 0x3FEBBC9000000000, float 0x3FED8010E0000000, float 0x3FEC572E00000000, float 0x3FEDFEC440000000, float 0x3FE7BA9D00000000, float 0x3FE7D71120000000, float 0x3FE6A37180000000], [10 x float] [float 0x3FDDFC10A0000000, float 0x3FF2BDB000000000, float 0x3FFFC3E3A0000000, float 0x3FE3DCA240000000, float 0x3FE5535D80000000, float 0x3FE34EE6A0000000, float 0x3FE37C88E0000000, float 0x3FD838C260000000, float 0x3FDAF5E7C0000000, float 0x3FD60732C0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FDDE58440000000, float 0x3FDABBEC80000000, float 0x3FB495BB80000000, float 0xBFC78366C0000000, float 0xBFC7119600000000, float 0xBFB3DD5300000000, float 0xBF99A33000000000, float 0x3FB6A1B680000000, float 0x3FCB58A780000000, float 0x3FD6389700000000], [10 x float] [float 0x3FBE664300000000, float 0x3FBCBD1080000000, float 0xBFA3879000000000, float 0xBFCD3E1E00000000, float 0xBFCD781940000000, float 0xBFC6414840000000, float 0xBFC147D680000000, float 0xBFAC0D6200000000, float 0x3F10A1FF40000000, float 0x3FABF31100000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE1BEEFC0000000, float 0x3FDEAB1540000000, float 0x3FEA418920000000, float 0x3FEB148600000000, float 0x3FED7AB2A0000000, float 0x3FECA0BAE0000000, float 0x3FEEE96060000000, float 0x3FED3D7EC0000000, float 0x3FED856F60000000, float 0x3FED766700000000], [10 x float] [float 0x3FBE218B00000000, float 0xBFA5FA9F00000000, float 0xBFA0E98E00000000, float 0x3FAD05F100000000, float 0x3FB92A3F00000000, float 0x3FC4668E80000000, float 0x3FC62BABC0000000, float 0x3FCDB41740000000, float 0x3FD18828C0000000, float 0x3FD8053860000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE6E7A000000000, float 0x3FE4602A60000000, float 0xBFF3424F80000000, float 0x3FE6BE4960000000, float 0x3FE6084A00000000, float 0x3FE776F7E0000000, float 0x3FE7CBCB00000000, float 0x3FE6C31E40000000, float 0x3FE2FE5F00000000, float 0x3FE346D920000000], [10 x float] [float 0x3FD7733160000000, float 0x3FD4FF0F80000000, float 0xBFF4EE75E0000000, float 0x3FD905D780000000, float 0x3FD74EAFA0000000, float 0x3FD921C240000000, float 0x3FD8F396A0000000, float 0x3FDA27BFC0000000, float 0x3FD404E1A0000000, float 0x3FD94756E0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FF06D8680000000, float 0x3FF0FEBF60000000, float 0x3FF0AA30E0000000, float 0x3FEFE86340000000, float 0x3FEF3F4660000000, float 0x3FEFB1A0A0000000, float 0x3FEEB10180000000, float 0x3FEDE25000000000, float 0x3FECE23A60000000, float 0x3FED096B40000000], [10 x float] [float 0x3FEF89E640000000, float 0x3FF0E0AEE0000000, float 0x3FEF518740000000, float 0x3FEB6F4100000000, float 0x3FEAC14F40000000, float 0x3FEA37DF40000000, float 0x3FE7A2FDC0000000, float 0x3FE685EA60000000, float 0x3FE444C900000000, float 0x3FE496ED00000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE3F3B800000000, float 0x3FE86F0000000000, float 0x3FE9E757A0000000, float 0x3FE7208860000000, float 0xBFAF460200000000, float 0xBFC1619B80000000, float 0xBFCE32ED80000000, float 0x3FB47BF680000000, float 0x3FD96CEB80000000, float 0x3FE040B040000000], [10 x float] [float 0x3FD3179640000000, float 0x3FDFE5AFA0000000, float 0x3FDA886280000000, float 0x3FD50580C0000000, float 0xBFD4806DC0000000, float 0xBFD65E3D20000000, float 0xBFDE4CA9C0000000, float 0xBFC724E9C0000000, float 0x3FBF00E100000000, float 0x3FC99E4700000000]], [2 x [10 x float]] [[10 x float] [float 0x3FEC901660000000, float 0x3FEC2CC460000000, float 0x3FE3B09C40000000, float 0x3FE5A248E0000000, float 0x3FE93D27E0000000, float 0x3FF01AD920000000, float 0x3FF1539280000000, float 0x3FF08E4620000000, float 0x3FEF5C4400000000, float 0x3FED33D4C0000000], [10 x float] [float 0x3FE30F03A0000000, float 0x3FE3D381C0000000, float 0x3FD2B6F380000000, float 0x3FD6BECE60000000, float 0x3FE155B600000000, float 0x3FEBE224A0000000, float 0x3FEFEDC1A0000000, float 0x3FEC378140000000, float 0x3FE8770D80000000, float 0x3FE52282C0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FF287BB80000000, float 0x3FF0931B20000000, float 0x3FE8BD61E0000000, float 0x3FE5E2B560000000, float 0x3FE5E33EE0000000, float 0x3FE5535D80000000, float 0x3FE61D3A00000000, float 0x3FE50D92A0000000, float 0x3FE5B1DA80000000, float 0x3FE3FAB2C0000000], [10 x float] [float 0x3FF269EFC0000000, float 0x3FEAE18580000000, float 0x3FCE30A4C0000000, float 0x3FD0460A40000000, float 0x3FCFCCF4C0000000, float 0x3FD0C5D060000000, float 0x3FD12114C0000000, float 0x3FD15E48A0000000, float 0x3FD3A43EE0000000, float 0x3FD4A09280000000]], [2 x [10 x float]] [[10 x float] [float 0x3FC19D9980000000, float 0x3FF41DDF00000000, float 0x3FEB7FE580000000, float 0x3FE3E64C00000000, float 0x3FE068F420000000, float 0x3FE1426240000000, float 0x3FDC640C20000000, float 0x3FDBBD9E80000000, float 0x3FDCC39C00000000, float 0x3FD99D3CE0000000], [10 x float] [float 0xBFBDB22600000000, float 0x3FF3E4B1E0000000, float 0x3FDEC08EC0000000, float 0x3FD0D92420000000, float 0x3FC6A61380000000, float 0x3FC7EA57C0000000, float 0x3FC3E7DB40000000, float 0x3FC39640C0000000, float 0x3FC3134200000000, float 0x3FC3F4BDC0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FC742D740000000, float 0xBF8173D000000000, float 0x3FB2F0D480000000, float 0x3FC724C6C0000000, float 0x3FD1BBB2C0000000, float 0x3FD5684940000000, float 0x3FDB78E680000000, float 0x3FE14AF940000000, float 0x3FE27F2260000000, float 0x3FE2438AE0000000], [10 x float] [float 0xBF6D020000000000, float 0xBF93431E00000000, float 0xBF77A17000000000, float 0x3F8B1B8000000000, float 0x3FACB8A200000000, float 0x3FAB610A00000000, float 0x3FB9A6CC80000000, float 0x3FC63CD9C0000000, float 0x3FC5D7EB80000000, float 0x3FC4F66FC0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FEEDFB680000000, float 0x3FF00C9F00000000, float 0x3FEE67FDE0000000, float 0x3FEAD27D40000000, float 0x3FE824E980000000, float 0x3FE863B9C0000000, float 0x3FE6CA1900000000, float 0x3FE773BF20000000, float 0x3FE81C5280000000, float 0x3FE7BA1380000000], [10 x float] [float 0x3FC7F73A40000000, float 0xBF80C80400000000, float 0x3FB0FE9E80000000, float 0x3FB8A96600000000, float 0x3FAA120900000000, float 0x3FACF4C300000000, float 0x3FA8286A00000000, float 0x3FB4B81780000000, float 0x3FBADC0880000000, float 0x3FC669F280000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE5BC9760000000, float 0x3FEE781900000000, float 0x3FE0F2ED80000000, float 0x3FD76874A0000000, float 0x3FD8FF6640000000, float 0x3FD3FA24E0000000, float 0x3FD173C220000000, float 0x3FD4330D40000000, float 0x3FD24CA6E0000000, float 0x3FD458A1E0000000], [10 x float] [float 0x3FCD892440000000, float 0x3FD82348E0000000, float 0x3FB30A9980000000, float 0x3F9AA3CA00000000, float 0x3FA875B900000000, float 0x3FA4107400000000, float 0x3F9759FC00000000, float 0x3FAD534000000000, float 0x3FA1477F00000000, float 0x3FA932B300000000]], [2 x [10 x float]] [[10 x float] [float 0x3FEBAD87C0000000, float 0x3FEE6B36A0000000, float 0x3FF0B57720000000, float 0x3FF2BA32A0000000, float 0x3FF455B480000000, float 0x3FF52BEA20000000, float 0x3FF3F6F2E0000000, float 0x3FF26C1580000000, float 0x3FF08DBCC0000000, float 0x3FEF065E00000000], [10 x float] [float 0x3FDD92D6E0000000, float 0x3FE231D360000000, float 0x3FECB85A40000000, float 0x3FF0C327C0000000, float 0x3FF3A55860000000, float 0x3FF3AA2D40000000, float 0x3FF323B120000000, float 0x3FF014F140000000, float 0x3FEBDC3CC0000000, float 0x3FE7ED9D80000000]], [2 x [10 x float]] [[10 x float] [float 0x3FDACE2D60000000, float 0x3FE33CA5C0000000, float 0x3FDE3FB5C0000000, float 0x3FE4726B40000000, float 0x3FE59C6120000000, float 0x3FE918A640000000, float 0x3FE3AC50E0000000, float 0x3FE577DF60000000, float 0x3FE47FD740000000, float 0x3FE146ADC0000000], [10 x float] [float 0x3FB9EB8480000000, float 0x3FCD982C80000000, float 0x3FC6B2F600000000, float 0x3FD1EC0420000000, float 0x3FD56DA7A0000000, float 0x3FDBCB93E0000000, float 0x3FD21085E0000000, float 0x3FD5137620000000, float 0x3FD35B3B60000000, float 0x3FCEBE6040000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE0288780000000, float 0x3FE96B5380000000, float 0x3FEE83E8C0000000, float 0x3FEE1AAEE0000000, float 0x3FEF6F97C0000000, float 0x3FEF30C780000000, float 0x3FF03B98C0000000, float 0x3FEED0AE40000000, float 0x3FEE7BDB20000000, float 0x3FEDB53740000000], [10 x float] [float 0x3FACFD5A00000000, float 0x3FB8E9D280000000, float 0x3FE29970C0000000, float 0x3FE232E640000000, float 0x3FE5DE69E0000000, float 0x3FE52C2CA0000000, float 0x3FE85BAC20000000, float 0x3FE56378A0000000, float 0x3FE4AE8C40000000, float 0x3FE3942820000000]], [2 x [10 x float]] [[10 x float] [float 0x3FECB38540000000, float 0x3FEDF37E00000000, float 0x3FEC050A00000000, float 0x3FEAF11740000000, float 0x3FEABADE00000000, float 0x3FE5C866E0000000, float 0x3FD57DC2C0000000, float 0x3FD5ABEE60000000, float 0x3FD68E7D00000000, float 0x3FDCC4AEE0000000], [10 x float] [float 0x3FE0F489E0000000, float 0x3FDD7B37A0000000, float 0x3FDF941520000000, float 0x3FDC42C300000000, float 0x3FD9B2B660000000, float 0x3FCA45C780000000, float 0xBFA0E0F700000000, float 0xBF8FADE800000000, float 0x3FA5680C00000000, float 0x3FC4E0F640000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE44E72E0000000, float 0x40042AE500000000, float 0x3FF09902E0000000, float 0x3FED551E00000000, float 0x3FEC5EB220000000, float 0x3FEC810E20000000, float 0x3FEB4560E0000000, float 0x3FE7549BC0000000, float 0x3FE7A27440000000, float 0x3FE44DE980000000], [10 x float] [float 0x3FD0E82C60000000, float 0x40048E9E00000000, float 0x3FEB53DFA0000000, float 0x3FE4E774A0000000, float 0x3FE37AEC80000000, float 0x3FE2B9A700000000, float 0x3FE0E248E0000000, float 0x3FDBB72D40000000, float 0x3FD96AC5C0000000, float 0x3FD709F7A0000000]]], align 16
@wmavoice_lsp10_intercoeff_a = internal constant [32 x [2 x [10 x float]]] [[2 x [10 x float]] [[10 x float] [float 0x3FE058FCC0000000, float 0x3FA89AA500000000, float 0xBFF8289CA0000000, float 0x3FE58EE5C0000000, float 0x3FE81DF140000000, float 0x3FE87C1680000000, float 0x3FEB3BE820000000, float 0x3FE5562F00000000, float 0x3FE83E4500000000, float 0x3FE6B145C0000000], [10 x float] [float 0x3FC14C80C0000000, float 0xBFC9282480000000, float 0xBFFA19FE00000000, float 0x3FD49965C0000000, float 0x3FDA72A4C0000000, float 0x3FDDD8A260000000, float 0x3FE29418A0000000, float 0x3FD95B9C80000000, float 0x3FDED6B660000000, float 0x3FDF67E660000000]], [2 x [10 x float]] [[10 x float] [float 0x3FEB615680000000, float 0x3FE8E109E0000000, float 0xBF91FF6E00000000, float 0xBFC817EA80000000, float 0x3FC8383E80000000, float 0x3FDF0AE3A0000000, float 0x3FE410A560000000, float 0x3FE43F26C0000000, float 0x3FE4D7B640000000, float 0x3FE370B680000000], [10 x float] [float 0x3FDBFE81A0000000, float 0x3FD6701F60000000, float 0xBFB382CA00000000, float 0xBFD21DEB00000000, float 0xBFB0098400000000, float 0x3FC3343E00000000, float 0x3FD0A7E400000000, float 0x3FD1CDAB20000000, float 0x3FD4457600000000, float 0x3FD704B680000000]], [2 x [10 x float]] [[10 x float] [float 0x3FC85132C0000000, float 0x3FB0A97380000000, float 0x3FC5BF5140000000, float 0x3FED3141E0000000, float 0x3FED1CD720000000, float 0x3FE7C97060000000, float 0x3FE42D00C0000000, float 0x3FE086ED00000000, float 0x3FDAB7D5A0000000, float 0x3FE0B053A0000000], [10 x float] [float 0x3FB20B5880000000, float 0x3F914E7E00000000, float 0x3F934AA600000000, float 0x3FE1E17280000000, float 0x3FE09F5000000000, float 0x3FD6A69160000000, float 0x3FCF0F9180000000, float 0x3FC607E940000000, float 0x3FC18E4A80000000, float 0x3FD09B69E0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FEC592D60000000, float 0x3FED1F1BE0000000, float 0x3FEC8CC980000000, float 0x3FEDDD19A0000000, float 0x3FF05C5AC0000000, float 0x3FF0E35560000000, float 0x3FF192DD00000000, float 0x3FF2107C00000000, float 0x3FF094C8E0000000, float 0x3FEDB04BE0000000], [10 x float] [float 0x3FDECA3C40000000, float 0x3FE2816160000000, float 0x3FE5DFFFA0000000, float 0x3FE87B8540000000, float 0x3FECDB9E80000000, float 0x3FEFFCFC80000000, float 0x3FF05A1600000000, float 0x3FF0C27080000000, float 0x3FED267B60000000, float 0x3FE8E109E0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FDBE6AFC0000000, float 0x3FCD210600000000, float 0x3FB96F5200000000, float 0x3FC6924B00000000, float 0x3FBB07A900000000, float 0x3FBA12A800000000, float 0x3FBDF44880000000, float 0x3FBF440780000000, float 0x3FC779AF80000000, float 0x3FD320D140000000], [10 x float] [float 0x3FC424B580000000, float 0x3FBAA86180000000, float 0x3FA9F37700000000, float 0x3FB402F700000000, float 0x3F78239000000000, float 0xBF660C2000000000, float 0xBF69734000000000, float 0x3F7CF5A800000000, float 0x3F87D66C00000000, float 0x3FACFFD900000000]], [2 x [10 x float]] [[10 x float] [float 0x3FEB4AA700000000, float 0x3FE9B12DA0000000, float 0x3FDDF3DB60000000, float 0x3FECFA3EC0000000, float 0x3FF5FCE300000000, float 0x3FF1BFF360000000, float 0x3FDA62C380000000, float 0x3FD99FAB00000000, float 0x3FE45A5FC0000000, float 0x3FE487BEC0000000], [10 x float] [float 0x3FDB380200000000, float 0x3FD878C180000000, float 0x3FC576B940000000, float 0x3FE0C5E0C0000000, float 0x3FF3317100000000, float 0x3FED14E680000000, float 0x3FBF562D80000000, float 0x3FB2B33800000000, float 0x3FD3A8EE40000000, float 0x3FD824D1C0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE1A0CB20000000, float 0x3FD21BEF00000000, float 0xBF6213D000000000, float 0x3FBAB17480000000, float 0x3FF0825A60000000, float 0x3FF536AC00000000, float 0x3FF5AE56A0000000, float 0x3FEFC83E00000000, float 0x3FE70657E0000000, float 0x3FE5C8BEE0000000], [10 x float] [float 0x3FD125CBA0000000, float 0x3FB8958A00000000, float 0xBFC1605A00000000, float 0xBFC088D6C0000000, float 0x3FE4A4AB40000000, float 0x3FEFE64D00000000, float 0x3FEE6EDAE0000000, float 0x3FE52568E0000000, float 0x3FD8510E60000000, float 0x3FD7E8B3E0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FEFE52AA0000000, float 0x3FF0688C40000000, float 0x3FEF5C7C80000000, float 0x3FE9680480000000, float 0x3FEA85DB00000000, float 0x3FEAD93980000000, float 0x3FEBB668A0000000, float 0x3FED97E8C0000000, float 0x3FED353A20000000, float 0x3FEBCA4240000000], [10 x float] [float 0x3FE95945A0000000, float 0x3FEE224AA0000000, float 0x3FEB59F720000000, float 0x3FE11D37A0000000, float 0x3FE3F0E2E0000000, float 0x3FE5731BA0000000, float 0x3FE65C33A0000000, float 0x3FEA12B9E0000000, float 0x3FE7B35220000000, float 0x3FE4C98880000000]], [2 x [10 x float]] [[10 x float] [float 0x3FC26C9C00000000, float 0xBFD4704780000000, float 0xBFC9EB3D00000000, float 0xBFC7BD2C80000000, float 0x3FB6751600000000, float 0x3FC4B3A0C0000000, float 0x3FD3C1E280000000, float 0x3FD82CC260000000, float 0x3FD9068A60000000, float 0x3FDEB4AF20000000], [10 x float] [float 0xBF90156C00000000, float 0xBFC6C3A200000000, float 0xBFC3E6E3C0000000, float 0xBFC68661C0000000, float 0xBFAF1E0700000000, float 0xBF90825000000000, float 0x3FA4234B00000000, float 0x3FB36D3D80000000, float 0x3FBDCB7300000000, float 0x3FC8EDBA80000000]], [2 x [10 x float]] [[10 x float] [float 0x3FF1A275A0000000, float 0x3FEFDDCB20000000, float 0x3FDDD0B1C0000000, float 0x3FD3C549A0000000, float 0x3FD7F0A480000000, float 0x3FD2F5B700000000, float 0x3FD44B21E0000000, float 0x3FCEFB26C0000000, float 0x3FD0F50580000000, float 0x3FD2CBBF20000000], [10 x float] [float 0x3FDE15E2A0000000, float 0x3FC7280480000000, float 0x3F9FE91200000000, float 0x3F85B5F800000000, float 0x3F9FE91200000000, float 0x3F9B4D6C00000000, float 0x3F96B1C600000000, float 0x3F9007D200000000, float 0x3FAC383700000000, float 0x3FB9DC3600000000]], [2 x [10 x float]] [[10 x float] [float 0x3FD2B876C0000000, float 0x3FD5E011C0000000, float 0x3FE77C4EE0000000, float 0x3FE76EB260000000, float 0x3FE752E840000000, float 0x3FE95C1B80000000, float 0x3FE8B7A320000000, float 0x3FE90555E0000000, float 0x3FEAA47B00000000, float 0x3FE9747EA0000000], [10 x float] [float 0x3FACA51B00000000, float 0xBFA75AC600000000, float 0xBFA7AC7100000000, float 0xBFB9BB5080000000, float 0xBFAA30B600000000, float 0xBFA751B300000000, float 0xBF721CE800000000, float 0x3FA71D8700000000, float 0x3FBF8C9F80000000, float 0x3FCAB12BC0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FCC8D9140000000, float 0xBFECF7D580000000, float 0x3FF3E80F60000000, float 0x3FF1523580000000, float 0x3FED1577A0000000, float 0x3FEC26B3C0000000, float 0x3FEBACC460000000, float 0x3FE9E43880000000, float 0x3FE86D5780000000, float 0x3FE7E65CE0000000], [10 x float] [float 0xBFC9FD6300000000, float 0xBFF6AAED60000000, float 0x3FF5AAEF60000000, float 0x3FEAC835E0000000, float 0x3FE3ACD460000000, float 0x3FE1CB5440000000, float 0x3FE1712760000000, float 0x3FDFDCBB00000000, float 0x3FDAE1CD80000000, float 0x3FDF635CE0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE37B7D20000000, float 0x3FE3171AE0000000, float 0x3FE4F38060000000, float 0x3FEB603420000000, float 0xBFD321AAE0000000, float 0x3FCEC6F980000000, float 0x3FD6DF4820000000, float 0x3FE7FF5120000000, float 0x3FE89CFB60000000, float 0x3FE5D6ECA0000000], [10 x float] [float 0x3FD086FF20000000, float 0x3FD16AFC80000000, float 0x3FD628A9C0000000, float 0x3FDEDA1D80000000, float 0xBFDE980B00000000, float 0xBFB240A780000000, float 0x3F947F2C00000000, float 0x3FDB2DCCA0000000, float 0x3FDDD2F680000000, float 0x3FDAB46E80000000]], [2 x [10 x float]] [[10 x float] [float 0x3FF2CCC640000000, float 0x3FF13CA860000000, float 0x3FF0E82780000000, float 0x3FF065FF00000000, float 0x3FEFD4B840000000, float 0x3FEECE2260000000, float 0x3FEE9963E0000000, float 0x3FED086C60000000, float 0x3FE87E5B40000000, float 0x3FE4A2F7C0000000], [10 x float] [float 0x3FF28D89E0000000, float 0x3FEDE356C0000000, float 0x3FD9571300000000, float 0x3FD7A38300000000, float 0x3FD90F9D60000000, float 0x3FD3DE3DE0000000, float 0x3FD664C7A0000000, float 0x3FCCA1FC00000000, float 0x3FC4F7AF40000000, float 0x3FC7311780000000]], [2 x [10 x float]] [[10 x float] [float 0x3FEEA1E5C0000000, float 0x3FEE0C2C40000000, float 0x3FE52E7BE0000000, float 0x3FE5EAC620000000, float 0x3FE7494400000000, float 0x3FE9165980000000, float 0x3FE98F2660000000, float 0x3FE8CB7CC0000000, float 0x3FE6B93660000000, float 0x3FE749D520000000], [10 x float] [float 0x3FE2977FA0000000, float 0x3FE1D7CE60000000, float 0x3FD6AFA460000000, float 0x3FD7468040000000, float 0x3FD7E9D640000000, float 0x3FDCB64260000000, float 0x3FDDFBCC00000000, float 0x3FDCAE51C0000000, float 0x3FD61F96C0000000, float 0x3FDCA9C840000000]], [2 x [10 x float]] [[10 x float] [float 0x3FC01EC900000000, float 0x3FF4F45100000000, float 0x3FF14572E0000000, float 0x3FF003E180000000, float 0x3FECFEC820000000, float 0x3FED7E6360000000, float 0x3FECA77160000000, float 0x3FED4FE200000000, float 0x3FEB70A6A0000000, float 0x3FE7EEDEC0000000], [10 x float] [float 0xBFD79C6C00000000, float 0x3FF8785DA0000000, float 0x3FE76F43A0000000, float 0x3FDA41DEA0000000, float 0x3FD87C28A0000000, float 0x3FD219AA40000000, float 0x3FD0EBF280000000, float 0x3FCF6C9440000000, float 0x3FCFC50D80000000, float 0x3FCDE41E80000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE137DF80000000, float 0x3FC47D2EC0000000, float 0xBFB0D5AF80000000, float 0xBFCE990900000000, float 0xBFD8DE8E80000000, float 0xBFDA8FD9C0000000, float 0xBFD33615A0000000, float 0xBFC294E000000000, float 0x3FC0CB3200000000, float 0x3FD1E8E420000000], [10 x float] [float 0x3FCA8F2480000000, float 0x3FACAE2E00000000, float 0xBFB87DB780000000, float 0xBFD28400C0000000, float 0xBFD8E55CC0000000, float 0xBFD913DE20000000, float 0xBFD6B86EA0000000, float 0xBFD0F4BCC0000000, float 0xBFAC635000000000, float 0x3FBDE22280000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE37EE440000000, float 0x3FE052BFA0000000, float 0x3FD9AD4780000000, float 0x3FE154CC00000000, float 0x3FE24A5E20000000, float 0x3FE4B9A740000000, float 0x3FE65CC4E0000000, float 0x3FE76115E0000000, float 0x3FE819F900000000, float 0x3FE4E94B00000000], [10 x float] [float 0x3FCA5F80C0000000, float 0x3FC20B0FC0000000, float 0x3FBA3B7D80000000, float 0x3FC779AF80000000, float 0x3FC8EB75C0000000, float 0x3FD04E4860000000, float 0x3FD4102660000000, float 0x3FD502E2A0000000, float 0x3FD88F7100000000, float 0x3FD6695120000000]], [2 x [10 x float]] [[10 x float] [float 0x3FDCE70880000000, float 0x3FE1200D80000000, float 0x3FE9D18140000000, float 0x3FE68F3E80000000, float 0x3FE6EDF4E0000000, float 0x3FE337FFC0000000, float 0x3FDF2BC880000000, float 0x3FD0000480000000, float 0x3FD40B9CE0000000, float 0x3FDC8FB1A0000000], [10 x float] [float 0x3FBAF58300000000, float 0x3FC1436DC0000000, float 0x3FDC87C100000000, float 0x3FD665EA00000000, float 0x3FD6A44CA0000000, float 0x3FD0D2FE40000000, float 0x3FC5502880000000, float 0x3F94915200000000, float 0x3FA0E07700000000, float 0x3FC385E900000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE6960CC0000000, float 0x3FE76084A0000000, float 0x3FF2B21E60000000, float 0x3FF73D5200000000, float 0x3FF523AC40000000, float 0x3FF42E62A0000000, float 0x3FF2BD7620000000, float 0x3FF1D8E7A0000000, float 0x3FF0C78B40000000, float 0x3FED4AC740000000], [10 x float] [float 0x3FCD430D40000000, float 0x3FD2403B00000000, float 0x3FF339F2E0000000, float 0x3FF83F5E40000000, float 0x3FF45C9B60000000, float 0x3FF255ACE0000000, float 0x3FEF5D0DA0000000, float 0x3FEDBF9C00000000, float 0x3FEB2B75A0000000, float 0x3FE5ABD260000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE5657F20000000, float 0x3FE25524C0000000, float 0x3FDE4D7700000000, float 0x3FE64E0600000000, float 0x3FE2BA1820000000, float 0xBFB3875380000000, float 0xBFCA4CC940000000, float 0xBFC1AB36C0000000, float 0x3FC06BEA80000000, float 0x3FD6309A60000000], [10 x float] [float 0x3FD2B876C0000000, float 0x3FCE03E100000000, float 0x3FC578FE00000000, float 0x3FD19616C0000000, float 0x3FCAD7BC80000000, float 0xBFD1E411E0000000, float 0xBFD8126300000000, float 0xBFD4606640000000, float 0xBFB55F2F80000000, float 0x3FC2F94280000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE4FDB5C0000000, float 0x3FE8C269C0000000, float 0x3FEF937FA0000000, float 0x3FEFB85CC0000000, float 0x3FEE6DB880000000, float 0x3FED2A73A0000000, float 0x3FEAAD8E00000000, float 0x3FE94C3A40000000, float 0x3FE88DAB40000000, float 0x3FE81A8A40000000], [10 x float] [float 0x3FC7997200000000, float 0x3FD06AA3C0000000, float 0x3FE83ADDE0000000, float 0x3FE82550C0000000, float 0x3FE5BD6720000000, float 0x3FE3242640000000, float 0x3FE0400880000000, float 0x3FDB67A5C0000000, float 0x3FD944ED00000000, float 0x3FDCD05900000000]], [2 x [10 x float]] [[10 x float] [float 0x3FDC5B8460000000, float 0x3FE3876600000000, float 0x3FEB26EC40000000, float 0x3FEB6F8440000000, float 0x3FED0CF5E0000000, float 0x3FEFEF6000000000, float 0x3FF0A859E0000000, float 0x3FF0D6DB40000000, float 0x3FF04F9820000000, float 0x3FECE02820000000], [10 x float] [float 0x3F7CAD1000000000, float 0x3F8150C400000000, float 0x3FC4A84900000000, float 0x3FD64CF5C0000000, float 0x3FDC11CA00000000, float 0x3FE2DD41C0000000, float 0x3FE4609CC0000000, float 0x3FE58EE5C0000000, float 0x3FE67BF620000000, float 0x3FE2F513A0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FF0DA4260000000, float 0x3FF1B20E40000000, float 0x3FF218FDC0000000, float 0x3FF2005220000000, float 0x3FF0AE4E60000000, float 0x3FEFFAB7C0000000, float 0x3FEEF421E0000000, float 0x3FEE095640000000, float 0x3FEC467640000000, float 0x3FEAAD8E00000000], [10 x float] [float 0x3FEF551D00000000, float 0x3FF25EBFE0000000, float 0x3FF20A8780000000, float 0x3FF021A7E0000000, float 0x3FEC30E920000000, float 0x3FE9B37260000000, float 0x3FE751C5E0000000, float 0x3FE4CA19C0000000, float 0x3FE0ACEC80000000, float 0x3FDE4C54A0000000]], [2 x [10 x float]] [[10 x float] [float 0xBF99B99C00000000, float 0xBFA6B77000000000, float 0x3FC069A5C0000000, float 0x3FD8A4FE20000000, float 0x3FDB380200000000, float 0x3FDD1B35C0000000, float 0x3FDE04DF00000000, float 0x3FDF305200000000, float 0x3FE3340760000000, float 0x3FE2D30C60000000], [10 x float] [float 0xBFACD03400000000, float 0xBF993A9200000000, float 0x3F7CAD1000000000, float 0x3FB8DE2200000000, float 0x3FBF8C9F80000000, float 0x3FC05E4E00000000, float 0x3FC0AB6F80000000, float 0x3FC2B778C0000000, float 0x3FCA8A9B00000000, float 0x3FCF4F1680000000]], [2 x [10 x float]] [[10 x float] [float 0x3FF2CC7DA0000000, float 0x3FF1D978C0000000, float 0x3FED8E44A0000000, float 0x3FE41F6440000000, float 0x3FE4D969C0000000, float 0x3FE140F260000000, float 0x3FE1460D20000000, float 0x3FDFFB5B20000000, float 0x3FDA06E320000000, float 0x3FD997BA60000000], [10 x float] [float 0x3FEE16F2E0000000, float 0x3FE781FAC0000000, float 0x3FC792A3C0000000, float 0x3FC0E42640000000, float 0x3FC1DB6C00000000, float 0x3FB5F60C00000000, float 0x3FB863A180000000, float 0x3FB6083200000000, float 0x3FB53C0680000000, float 0x3FBCFABE00000000]], [2 x [10 x float]] [[10 x float] [float 0x3FECF37060000000, float 0x3FEF7D6160000000, float 0x3FEFC96080000000, float 0x3FEDF3C920000000, float 0x3FED53DA40000000, float 0x3FED7B8D80000000, float 0x3FEBD86FE0000000, float 0x3FEC3603C0000000, float 0x3FEAED1320000000, float 0x3FEA339EC0000000], [10 x float] [float 0x3FB89A1380000000, float 0xBF8E2EB000000000, float 0x3F94B59E00000000, float 0x3FB9AA4D80000000, float 0x3FC2044180000000, float 0x3FC7850740000000, float 0x3FC7C915C0000000, float 0x3FCA6D1D40000000, float 0x3FCC86C300000000, float 0x3FD24CB520000000]], [2 x [10 x float]] [[10 x float] [float 0x3FD9D19380000000, float 0x3FC88E7300000000, float 0x4001914920000000, float 0x3FDE7BF860000000, float 0x3FE50BE380000000, float 0x3FE68477E0000000, float 0x3FE534B8E0000000, float 0x3FE87AF420000000, float 0x3FE8A60E40000000, float 0x3FE4F0AA60000000], [10 x float] [float 0x3FB8168000000000, float 0xBFBF4BF780000000, float 0x4002CB0E20000000, float 0x3FC1BBA980000000, float 0x3FD3892BC0000000, float 0x3FD7762400000000, float 0x3FD5720B60000000, float 0x3FDE390C40000000, float 0x3FDB9BD300000000, float 0x3FD89E2FE0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FEA49BD00000000, float 0x3FEB906900000000, float 0x3FF0A3D060000000, float 0x3FF6881EA0000000, float 0x3FDA147FA0000000, float 0x3FDA2FB8A0000000, float 0x3FE0BCCDC0000000, float 0x3FE38643A0000000, float 0x3FE8086420000000, float 0x3FE728F040000000], [10 x float] [float 0x3FDECA3C40000000, float 0x3FE224EFE0000000, float 0x3FED7703E0000000, float 0x3FF4D00520000000, float 0x3FA738C000000000, float 0x3FB5FA9580000000, float 0x3FC715DE80000000, float 0x3FD1DB47A0000000, float 0x3FD9700740000000, float 0x3FDD52CA20000000]], [2 x [10 x float]] [[10 x float] [float 0x3FF9799020000000, float 0x3FF7FABEA0000000, float 0x3FF21D3EC0000000, float 0x3FEA5A2F80000000, float 0x3FE60B19E0000000, float 0x3FE5302F80000000, float 0x3FE3D08F20000000, float 0x3FE4E828A0000000, float 0x3FE7077A40000000, float 0x3FE4F53400000000], [10 x float] [float 0x3FF9754F40000000, float 0x3FF7A12300000000, float 0x3FEDF2A6C0000000, float 0x3FDDEAC860000000, float 0x3FD68B5860000000, float 0x3FD42007A0000000, float 0x3FD31B2560000000, float 0x3FD6C77640000000, float 0x3FD9FEF280000000, float 0x3FD955F0A0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FE9858220000000, float 0x3FEBE182E0000000, float 0x3FECB7E3C0000000, float 0x3FD34093C0000000, float 0x3FE1CC76A0000000, float 0x3FE54C8AC0000000, float 0x3FEC8C3840000000, float 0x3FF1783520000000, float 0x3FEE8B3640000000, float 0x3FEB603420000000], [10 x float] [float 0x3FD8204840000000, float 0x3FDF8E7720000000, float 0x3FE52E7BE0000000, float 0xBFA398E800000000, float 0x3FC69DA2C0000000, float 0x3FD34D0DE0000000, float 0x3FE30C5460000000, float 0x3FEC7E0AA0000000, float 0x3FE7AA3F20000000, float 0x3FE3DBE6E0000000]], [2 x [10 x float]] [[10 x float] [float 0x3FCC3E2B00000000, float 0x400392F8C0000000, float 0x3FF4AC4A40000000, float 0x3FF06206A0000000, float 0x3FECD8C8A0000000, float 0x3FEB5DEF60000000, float 0x3FEA4DB560000000, float 0x3FECD16920000000, float 0x3FE85E0780000000, float 0x3FE8D7F6E0000000], [10 x float] [float 0xBFD16BD620000000, float 0x40072C9260000000, float 0x3FF4DD1060000000, float 0x3FE89FD140000000, float 0x3FE39FC920000000, float 0x3FE23E7540000000, float 0x3FE25C8440000000, float 0x3FE4E828A0000000, float 0x3FE15A77E0000000, float 0x3FE07B9540000000]]], align 16
@wmavoice_dq_lsp10r = internal constant [5120 x i8] c"\80\80\81\81\82\82\83\82\81\81\86\85\7F}\88\87\87\86\AD\AC\85\8B\88\A5\85\B0\89\9F\87\98\93\A1\93\98\95\9C\92\92\8C\88\86\87\88\8C\8B\9B{\85\84\8E\84\94\8F\B1|\8F{\88~\86~}}|\81\80{{\85\85ttyyyx\81\80\83\83\84\85\84\81\8A|\8A|\84d\87^\95o\98s\96\80\8D\85\81\81\82\81\93\91\88\89xzxz\7F\81hlqs||\8C\8B\93\91\84\82\B8\B1\C9\C4\AA\AB\A0\A1\91\93\89\91\83\83\82\82\82\82\82\82\84\86\83\84\83\85\8D\90\8E\95T]gh\8B\8B\8E\8C\93\93\AC\A5zybdejpuz|||\86\85\85\85\92\8E\93\91\9C\9C\8F\92w|\81\84\97\95\88\87\93\94\B5\B4\C7\BC\BE\AD\A6\A1\93\8E\99\95\9A\92\96\92\8A\86\83\87`\880\8A8\83?|U\80g\84u\86x\84}\81\83\82\81\80\81\80\A3\A8uxyy\88\8A\83\84\87\88\83\85\85\85\85\86uvim\8E\97\90\9F\83\8Ay~{{y|\83\83\81\81\8D\8C\8E\86WZmm\82\7F\8B\8F\85\83\7F~\86\87\86\88ab\82\84\86\89sw}\82kmwv~\7F\86\87\7F\84\AC\CB\A0\C4\98\B3\98\AC\94\A8\99\AC\91\9C\89\8Cft*8J=RFVNeahdsltl{v\95\8F\A6\81\A8`\8E_\87buVt]ylwkyu\87\87\7F\8AH\84c\88p\93x\98\88\9B\8A\92\8C\8E\86\8B\A3\91\C0\82\93|\93}\85}\7F|\80{\81z\82z\82}\82\89\87\B4|\85\82\81\84\85||\83\82\84\88~|\7F}\84\84\85\85\90\8C\8F\8E\89\87\8F\8A\98\95\DD\DB\9E\A1\8F\8D\82\81\8C\87\AA\91\C1\9C\BA\98\A7\8B\97\83\8E\7F\86x\83}\87\85\8D}\C7m\89~\86{\82\81\84{\80}z~}}\82\80[Y\8A\87\8B\86\85\81\84\82}\80\88\87\81\7F~~\84\83\85\83\80x\84~~w\86\82\83{h_\8C\8D\88\89\85\85\85\86ubJ1po{z~\7F\83\83\7F~\80\81\82\83|\7Feklmssdc\82\80\86\88}\7F\80\82\88\89\91\96\95\A4\88\97ro|}\8F\96\A2\AE\9E\A9\88\89\83\83\83\83\84\85onzy\88\88\86\85\83\84\7F\7F}}\80\81\81\82}\7F\8C\8C\94\95\85\88\92\99nv\7F\81\80\81\83\85\7F\83\8C\A1\A7\E0\83\8B\88\8F\87\8B\8A\8F\95\9B\8D\8F\86\84xoSSy~fkpsahxs\81{zz\86\87z\83f|rw]gNOCHBINRgf\90\87\A5\8B\A5\81\A0~\99\7F\A1\86\A0\8E\A0\8F\94\8C\8A\87\8A_\936\8FN\8Cp\8Eq\8Cy\87u\87z\88\83\83\84\93\9F\8C\9C\7FQ\8E\80\92\7F\90}\92\80\95\82\90\87\85\80\82\83\83\83\86\8B~\86\8D\9A\A8\CD\99\B0\94\A3\93\9E\8D\8F\83\87~\92l\9Dk\9Cw\92d\8Ah}w\86ezqz_\854\8CS\88n\85r\83{\83\85\83\8A\87\84\84\7F\7F\81\80|z\80~\91\AA\8F\AC\8D\A3\8F\B0\8A\A4\8B\9B\87\91\87\88\88\7F\84L\80L\7F?}B{CxG|\5Czo\85\85\87\88\8B\8C\93\93\96\90\9C\93\96\91\9A\92x{{|\89\85\AA\8D||\87\86\86\87\84\84\81\81\82\82\88\88\82\84\93\9F\87\9Es\92x\94u\88s\89q\84\85\8E\8C\90\84\86\86\87\86\89\89\93\A2\B2\88\93\86\90{\84oqqq||\84\83~~urd_\82}\9D\91\A4\9C\A3\9E\91\91\85\86\86\86\7F~qf\88\82|z\8F\91\7F\83\87\8F\85\89\84\84\5C^z}\80\81\83\82\86\87\84\80\81\7F\84\84\83\81\7F\7F\81\81\84\83\8B\83\89\84\D8\B2\92\86\93\89\97\8E\94\8B\90\8A\80\7F\81\81{\83G[~\80\82\86u{}}\87\8C\81\84\84\84\85\86|\82\7F\85\85\8A\8E\95\87\8D\91\95\9A\A4\87\8A\87\87\8D\8E\8A\89t`iV\7Fv\80x|u}u}y\83\83\84\86\90\91ppy{qty{\8B\8A\80\80\83\83\86\84\84\84}\80\7F\82}\83x\80ZwDbcps|\87\87\86\86\80\81\89\89\89\8Anr\81\82\90\91{}\81\81\84\85\81\82\A8\BB\8C\95\89\90\81\82\81\86\85\8Avvzx\83\82\81\80\85\85}}|{\B5\B3\81\81\83\7F\8B\88\82\80\85\85\84\84yxzw\84\81\81}k`\88\89\96\92\87\86\83\83\82\82~{~{\80}\82{\86\7F\B7\9F\8F\87\89\86\81\81\80\80\86\85\8B\8A\85\84\81\7F\9A\97\96\90\92\92\8D\8E\84\84\83\83\82\82\84\85rs\84\84zz\84\83suxx\81\81\82\82\82\81\82\83\81\83\82\82\81\81\85\84\8F\90[[\89\88vk<-8194<8GKMP\5Cajjp\83:y\13ATelzy\7Fpujpu|~\7F\82\81\8A\85\A6\9B\C0\B3\C0\B1\D0\BF\CC\C0\BA\B3\A3\A3\8A\8E\86\86\90\8E\F3\EC\94\92\8D\89\91\8D\97\90\93\8F\87\8B\86\85\86\80\8AX\8E\0A\7FL\82`\81f\80l{o\7Fw\7F|\88\88\8B\8B\8E\8C\F6\F1\9E\A7\8F\91\92\95\8F\91\94\98\85\86\8B\87\87\88c\89_\85K\8AC\87I\80S\84`~s\7F\82\84\89\88\8C\87\86\82\89\83\9F\97\D7\C5\B5\AA\A0\95\96\8F\91\94\BA\CF\8D\93\87\89zz~}\80~\7F\7F\86~\83{\85\85~z\80zc];<RRjkw{|\80\80\81\86\89\85\8B\85\88\8D\84\8Bz\8Ea\82Q\80Y\81e}p\89\8C\81\94e\9Fv\B4z\B2x\B2t\A8v\99\7F\97~\88\84\86}~vi\9C|\B4\84\A3|\94y\83p\7Fs}z\81\83\80\81\88\86\8E\8D\A5\9E\CB\B6\8D\88\84\82\87\87\82\82\85\85\84\84\7F~jipnjiPTdez}~\80em.;rpww~y\81|\80}}z{x}z\87\86y\868\8B\83\91\87\8A\88\8B~\82z\84~\81|\81\99\A9\92\B3\8A\8B\97\8F\94\8A\99\89\8E\81\90~\8C\80\85~\88\86\9A\95\AD\9D\98\90\95\8D\89\88\7Fy{yy~x{\9D\8F\A6\87xzpvfvo|\86\83\8D\8A\87\86~\81\8C{\98L\83t\8A\88~\86\82\8E~\88x\84~\80|\7F\83\8AP\93~\8A\82\8C\81\86\85\87\83\84~\7F\7F}}{\84\84\82\84{\82ffknt\7F\84\98\8E\A0\8F\97\8E\92\84\84\84\84}~\84\8C\9E\C7\87\95\86\8C\87\83\81x\7Fy\81\82z{}|\8A\8A\8A\87\8C\8De^ibyz\7F\80~\7Fwy\85\9C\84\9F\82\94\89\A4\7F\8A\82\89\87\8C~~\80\81\81\81~|\82\80\8F\8A\95\8F\B9\AA\81\7F\8A\85\8A\87\84\86\89\90\8B\B7\83\91\7F\80\80\7F\80z\81}\91\8B\87\83\84\85\84\82\98`\9FU\96i\9As\8Fx\8A~\86|\82~\80\7Fy{z{t}TW\85\87\81\83{~\85\87\83\82\88\86\81wO?tt\88\85\85\82\8C\8F\7F\7F|}\7F\80\80~|x\8B\80\99\86\97\86\AE\91\9F\88\A5\90\AB\95\8F\87\86\86\85\85yw\B1\A2\A6\9A\7F\82\84\84\88\89\8E\8F\8A\89\A7\97\A2\8E\80\88\8E\94\80\8F\91\99\8C\95\84\8D\80\8B\7F\85\9C\A9\83\81~x\7F}\81x\83~~{|yzy{{\8A\8C\95\9C\91\98if\83~\97\92\93\8B\90\89\8F\85\87\82\84\82\83\81~\82~\81n\87s\8Bl\92i\93y\86|\85\89\89\87\86\8F\8E\92\92xy\8B\89\85\81\95\91\8B\85\82\7F\86\86\86\86}|uwxqTPz}lpafvx|{stnoba\7F|\81\7Fxurmjhtt\8A\8A\8B\8D\8E\92\7F}\85\82\86\80\86\7Ft[iTrj\80\80~~\83\89~\81\85\8B\86\91\84\8F\96\C0\83\8E\8A\8D\84\82\84\82\95\8A\C4\98\89}\86}\8B\80\85}\8D\86\86\87\86\87\86\87\83\82\88\85nj\8E\90\99\A2\83\81\86\84\83\82~}\84\82\A8\99~|\82~\8C\87\8C\86\8A\85\91\89\87\86\82\82\84\83\85\84\81\81}\80\80\82\85\8B\8F\98\C1\D7\98\A0\82\83\81\83\82\83\87\88\88\8DSQyx\88\82\96\91\93\91\86\85\87\85\92\8E\87\83\7F\80\86\87]f~\84\83\85\7F\81|}xzgj\80\81\8B\8A\7F\80\86\86\8F\8A\8B\86\87\85\83\82\85\83\8B\86\8A\88\A6\9Cwtyz~|tu{|\83\83\81\81\82\80\8D\8A\87\84\9A\91\89\81\83}\92\89\8A\87\83\83\83\84\81\82\86\8Aotqv{}z|\8F\93\8A\8Ctqrp\82~us\7F~\8B\89\8D\8B\83\84\8F\90\8B\8C\82\82\81\80\88\86wu\98\8F\9B\8Fxw\8E\8B|\82~\80pnpm\88\84}vysgemd}xyuzy\80\80\7F\7F||\80\7F\83\81\8E\8A\93\8Dslqmzw\88\85\96\8B\8E\83wo\97\89yt\92\86\89\81y{\7F\81\82\82\82\82\88\89~~\88\88\85\85\8B\8B\8E\8Fwx\86\86\84\84\85\85\87\8A\81\83\85\86\87\8A~\82uv\83\84\87\87\81\81\80\80~\81\7F\81{}su\9C\9D\7F\83\81\81\80\81\81\82\83\83~\7F\87\86\88\87\8C\88uq\84\80hamj\83\83\83\83y{|}~\7F\7F\7F\87\87\80\80\82\82\8D\8C\81\81\81\81\81\7F\7F}\95\92}{\86\85\86\84\98\96\8A\8A\80\80~}\84\85\8D\8F\88\88~\7F~\7F\81\83\80\81\87\86\B0\8B\C0\87\91z\95u\9B\86\A9\85\9D\8B\8E\88\97\98\8E\93\A6\AEgk\8D\86\8C\88\90\87\93\87\9C\83\99\7F\85~\82|\7F\82{|ri\C3\C1\9C\9D\A5\9E~z\95\8D\AE\AD\98\93\88\8B\83\8A\A3\A9g|Pf\99\BAy\97\86\A1\9C\BE\8D\97y{|\7Fw\7F\85\86\9D\9CQE\88\86\A0\A9vr\87\80rtaauz\98\A1syjz\87\89oq}\87\8D\91\8F\92\8F\96\84\88\8E\96\97\A7ek\9B\ADp|id\80~\7F\82\85\86\8Ey\83t\B0\91\A1x\D1\96\C4\85\93s\95\82\90\91\90\91xw\A3\A0uv{u\9Aw\C1b\95e\89t\85\87\8C\8F\90\9C\83\92\BA\C9\8C\8B{}\9E\A9\9D\A6\8E\8F\82\83\84\84\80\80\8D\8E\93\95\91\94\89\8B\81\81kl\9D\9Dxyww\8C\84\89\83vq\8F\88\86\87\A4\9E\85}\7F|\94z\C5\82\AD\91n\8B{\A5S\9EZ\A7]\8E\88\A9\86\98\82~\9A\8A\E3\96\9Cr\93r\8Em\87n\A6\87\B0\96\98\8E\84\84\88\88\82\87\8F\98\88\90\98\A0\B1\B9pp\A5\A6\A0\A1\91\91\8A\8Btv\7F\83BP\84\8Ew\7Felx\82~\82\87\87\8E\8B\99\897\1E\8E\8B\8B\8F\87\85\81\85ml\81\81\88\87\86\83\81\84\84\86\87\95O\CE{\89\87\8F\82\8C\83\86dc\A5\A4\8E{\94\85\85z\8E\85\8A}wo\81{\89\82\83\84{\81\AE\B9\C4\B5\7Fo\9C\8D\84r\81j\84k~u\86\8C\83\88w\92\5C\F6\80\84}\81\84\8C\80\8D~\91\89\8E\82\82ns|\8B\7F\97v\98b\92$l~\9Ep\92p\82\8A\88\91\8A\99\91t}Zg\89\8A\BD\B9\8D\97V]oo\85\AB}\D1\8C\84\82\86\81e\8Ex\8E\84\87~\8D\8C\8C\86\80{\83{\8Av\A3\85\F0\C5\B0\97~{Q^mv|\85\87\85\89\86\9A\87\8C\9BE\BEw\95\8D\97\8E{\87}\81\82\7F}\84\7FkP{g\91\83\85k\8Cg\87j\AA\91\9F\8F\88\89\7F\82iw\81\86\8D\97t\7Fw\8CKw\98\A2\95\98H\8A\09\8Fv\A0~\86\8D\93\87\83\81\81\87\81\88~\85}\89\87\92\8D\91\8B\8D\8C\85\82\D5\D0\8B\82\8B\88uu~}\85\82\8A\83\8Dd\91]\9Fy\90\84u\A0f\BBc\A2u\90\84\84\86\86\8C\8D\7F~\80\83tty\7Fw~rrcd\8D\90\94\9F\B3\E0_\83d}Wnp\84\86\93o}zz\89\8C\8D\81\A9\0C\90\84\85\90\8D\92\89\93\88z\85\82\83\80\8D\8E\80\8B\0FE\A0\9F\8E\82\89~\9F\8D\91\8F\80}\86\80\83\82\7F\7FrhwbSD\8Bx\AD\8E\C7\9A\BF\99\9E\91\80\82\7F\7F\94\96ncwmxq\A3\9AnZ\8A\81\95\90\83\86|\8EL\D9\82\81\8C\8A\85\87\91\96\88\8A\7F\82\82\86\90w\B2F\8F\82s\88\8B\8A\81m\88t\93z~p~{\84\8B\80\90k\9CK\A3x\A4\97\88\97c\A0p\9F~\8F~\8C\8A\89\87\98l\FBU\8At\89v\8Dw\88y\96\86\8A\83\89\89\8F\90\96\99\94\9A\98\97uh|`]C\92\8A\95\94\95\99\AC\C1lr}\80\91\A5\95\A0y\82sxnpyv\91\92\8D\8E\7F\7Fg_\8A\8Fr~ms\8F\88\99\95\90\8E\8C\8A\96\90\80t\8E\88\87z]X\A4\A3\8D\8E\AB\B6\9A\A0|}z{\9E\9Boa\8A\82\9D\86eA\81vyr|w\83\85}\81\88\93\87\98\83\85nsvr\A1\9F\E9\DA\AC\A6\8Ck}\00\8Cg\8Cs}q\84\87\80\85\8A\92\83\91\7F\85\83\83zz\87\84~|\84\85\A4\A7y\7Fux\A7\A2\91\8F\87\86\88\86\9C\92\C3\B1\7F\8Bl\8C\8D\AD\8D\B2\83\9B\81\8D\86\86wr\B8\B8\7F~\93\97\82\8C\92\9F\86\91\83\88\89\8E\87\89\80\88Slab\98w\CF\90\8Ey\90\81\83\7F\82\84|}lk^tQr\8B\AD\83\9E\91\B1\8D\A3\88\8C\8F\90\87\8D\84\88\86\8E\8E\88\AD2\8Fj\8E\7F\86\8B\7F\85}}\81\82\83\85\84\94n\8Aq\87\8A\AFl\977w3d]tyy\92\97cx\7F\89kz}\8Bn\84\87\9C\8D\9C\94\9D\89\89\8D\8C\8B\89\82\80\8A\88\84\86sn\B1\B3QVdbTSyy\94\9D\7F\85\92\9C\7F\88\8F\97\87\8B\8A\8E\88\88\C9\A4\97\81{\88\93\94\7F\8E\80\8Fe~w\85r\83t~\84\85\8C\8C~}\9C\99\8E\81\8C\82ME\86\84\92\94\87\88\85\84{ttg\96\87\90\7F\82u\88zzj0&QN\91\92\87\88{z~\85\85\8A\91\91\90\96\A0\B5\8E\8B\96\96\88\88\8B\8B\85\85\8B\87\86\81\8C\89\99\91\84\83\97\90DB\89\89\8B\8B\92\92\8E\8B\81\80\83\81\85\84\87\86\87\86\C9\C8\89\88\92\8F\9B\99\9D\9E\83\8A\8C\8B\8F\90\80{\D8\C0\9F\96\89\8A\88\8E\91\94~\A2\8C\AA\BA_\83\8C\8F\94\85\80\82\85\8D\8B\99\96zz\86\90|\82\9F\A6\85\8B\97\96\8A\8B\83\86yy\83\81\94\B4y\87v\83|\94ww\81~\96\9C\9B\A0(\9As\9D\85\81\8C\85\8F\85\8F\84\90\82\8D\83\86\82\89\85\86\88\8D\8C\91\89\98|\B7[v\9A{\9E\88\86\8C\8E\8A\8E\8A\87\83\83\8A\81y\80\92\DB|{}\87x~\7F\8D\85\88\7F|xk\98}\95l\9E\90\C4\B9\AE\A4\97\95\8A\83\8C\89\95\94\90\91\8F\91\8C\8F\8D\93p}qq\95\9B\8F\95\92\97\8A\8A\8D\8A\90\81\86}\8F\8C\99\9A\8E{\A2*\9Aj\99\82\99\99\89\89\90\90\8E\8C\A5\97\A1\8C\90\86\9C|\A7\8F\A6\9B\84\84\89\8A\89\84|\7F\8C\90\86\8C\A2\B4\7F\83\98\A9\91\9C\85\86\83\85\82\84\93\95}u\7Fv\9F\9B\93\8Ezu\91\90\8A\89\82\85q\95\A8\E0\A6\C9\81\97\93\9A\88\87\8C\88\98\8Dxp\8C\7F\A1d\84sv}s\85s\9D\90\92r\87\7F\8B\8A\8D\87\87\89\88\93\8E\8F\90\8B\98\8E\88\93\8F\B1'}G\93\8FBX\84\9E{~t\87w|\80\87\85\8C\89~\89\82\9B&\95g\82\87\8B\8F\7F\89\87\8D\8A\94\83\94\88\93\84\8B\88\8Cs\81s\97\88\A0W\83\9D\B0\96\A4\8C\8D\87w\89\85\8D\8C\8C\8B\86\86\8E\90\83\84\83\86\83\84tr\81\85\CD\CF\82\85\A0\AA\89\7F|p\9E\92\9B\89\86\88\89\8E\B1\B8\95\98\87\86\85\84\87\81\90\88\8B\86\A1\9B~m\D7\BA\B1\99\A0\95\8B\8B\88\8C\8C\8E\BAG\81\90\83\A5\8E\98\8C\97\8D\8F\89\8B\90\8A\96\87\85~\88\8Fc\98\8B\83\BEvz\93\86\9B\88\8F\8A\87\89\84\93\90\96\90\8A\86\81\85\82\8A8\AF\81\A6\93\A5\8C\8A\90\89\8D\85\96\8B\81\87(S~\82nxdn~\80\8D\8E\D9\AF\AC\97\92\99}\84\80\89\8D\8D\91\91\8C\85\84\83\81\90\80\B1\85\C3\93x\8A\83\A1r\A6\86\A2v\A1s\9B\81\89\88\8D\81\8D\847\A8y~\88\8Bx\85\95\93\84\8D\83\88\93\96\97\84e\1Fue\81\84z\8A\80\89\8C\AA\83\8F\83\86\95\C0z\9E\88\92\85\A6\8F\8D\8D\88\8D\81}\9B\8C\8A\89\83op\83\84x\7F\95\94\97\8D\9C\94\85\81\7F|\90\89\8E\8B\86\85\8D\8A\85\87|`\E2\98tl\80i\9B\82\99\8A\90\8B\8E\8D\89\87\8E\8F\9C\A2\88Y\BC\91\B5\98\8A\92\92\9A\91\95\98\85\9E\85*\99u\90\95\8B}\8B\86\80\96\80\8F}\87\84\8F\8D\8F\8D\A4\AD\8D\8E\9C\9B\9A\9A\A9\AAMPpi\87\86~\8Fx\ACo\90x\9Ak\99_\86h\86\80t\A3\83\97\88\87\85\8E\8F\98\CC\95p\9C\80\96~\7F\81\8B\AF\8F\8D\8A\87\A8\94\98i\A4y\86zwmz\94\88\8F\99\84\9E\94\95\96\85\83\8E\8D\96\95\9C\AD\8A\9B\81\90ok\82\81`Yjh\87\87\90\92\83\99\86\9A\92\A6u\8A\A3\BB\BE\D8\95\9C\95\98\8E\8E\99\9Am\91(ft~\89\8B\95\9Dl|\8B\92\8E\93\82~xo\AC\92\A9\88\96\87~`\9F\8F\96z\A2\81\9C\8E\87\8E\90\8A\DEm\89\91\90\8E\8D\8F\8A\88|\96\85\90\89\91\8D\90\8B\90\86\9Ar\88\91\AD\97\D7ns\7F\86\91\96\91\90\90\8E\8B\83\93\84\8Dw\8Fj\A5)\93\81\81\90\8A\87\8A\8C\80\96Y\A3\9As\8D\7F\84\91\87\9D\8F\91\8C\8D\7F\87\7F\81\8E\93t\93h\A2\99\8F\92\82\90n\85{\82\89v\C6~\98\9A\92\8B\7F\93p\CF\97\9C\88\A2\89ly\82\87}\83\83\86\86\86\8D\90k\8F\89\90|\88s\93\82\9Dw\A7G\90a\80\86\8A\84\85\8A\8A\92\92\93\83\8D\8A\B9A\91{\8B\82\8E\80\8B\88\9D\93|w\A4\94\AA\9A\85\82\9D\94\8C\8D\82\87\86\89\88\89\8F\90\90\90\B2\BAGIxv\7F|\98\97\9B\92\8D\8A\8E\8F\8B\8F\85\86\8B\8C\8A\87\92\8DN\C6\81\8B\8D\8D\86\8D\89\88xx|v\8F\94\94\98\83\8F\81\89\98\9E\9D\A0\AF\B2\89\8B\83\85\92\98y\93\8E\8F\81\88\95\91\C5rg\8D|\8C\8D\8C\81\81\7F\82\83|{u\96\8Bxmwx\A3\A3uy\8B\8B\88\88^J\96\91~\7F\93\96\9E\A2TJ\88\81\8C\84\88\87\92\91|t\81x\82\81\82mzo\A0\8D\87q\83y\88\87\87\87\93\93\8C\8C\90\91\8B\8E\83\89\91\91\8F\9901\91\8F\97\93\9E\92\87||t\9F\8C\83~{xguqw\94\92\80|{~{x\9E\8D\94\89\92\8F}\8FYkt{\95\93\8D\8B\95\99vy\8B\8Aiw\A8\93\8B\8D\8F\8A\85\82~~\8F\8E\92\90|{\8F\91\95\94\93\8D\97\8Fvq\AF\AB", align 16
@dequant_lsp16r.vec_sizes = internal constant [3 x i16] [i16 128, i16 128, i16 128], align 2
@dequant_lsp16r.mul_lsf = internal constant [3 x double] [double 0x3F540AE22C17A5CE, double 0x3F570A21AFC9CC72, double 0x3F5A67038D8ED5B0], align 16
@dequant_lsp16r.base_lsf = internal constant [3 x double] [double 0xBFC67358E385903D, double 0xBFC5468BB36F780B, double 0xBFC606D834A6C55D], align 16
@wmavoice_lsp16_intercoeff_b = internal constant [32 x [2 x [16 x float]]] [[2 x [16 x float]] [[16 x float] [float 0x3FE161B600000000, float 0xBFBF07D100000000, float 0xBFCFA31B00000000, float 0x3FB1808000000000, float 0x3FC2283580000000, float 0x3FD01F1540000000, float 0x3FD7BB5340000000, float 0x3FDA816880000000, float 0x3FE24791C0000000, float 0x3FE2BA7FA0000000, float 0x3FE22563C0000000, float 0x3FE47BF620000000, float 0x3FE4A1FC80000000, float 0x3FE58622C0000000, float 0x3FDFF75B80000000, float 0x3FE1D6C6C0000000], [16 x float] [float 0x3FCA1F0700000000, float 0xBFC0450600000000, float 0xBFCD01C400000000, float 0xBFA4CE1C00000000, float 0xBF8DB53800000000, float 0x3F9CFE0000000000, float 0x3FB5C9AB00000000, float 0x3FB7606800000000, float 0x3FC0BC3200000000, float 0x3FC8A8C280000000, float 0x3FCD929280000000, float 0x3FD219CC00000000, float 0x3FD44CE840000000, float 0x3FDC5165C0000000, float 0x3FD2F2D680000000, float 0x3FD67853C0000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE9D623C0000000, float 0x3FA4A34400000000, float 0x3FE141AAE0000000, float 0x3FE62BE840000000, float 0x3FE4CC48A0000000, float 0x3FE7732D80000000, float 0x3FE8D18500000000, float 0x3FE8DA1080000000, float 0x3FEC398760000000, float 0x3FEAF46500000000, float 0x3FEC7A0B00000000, float 0x3FEB29CCE0000000, float 0x3FEBB1AA20000000, float 0x3FE587D840000000, float 0x3FE3BDD640000000, float 0x3FE59E7D20000000], [16 x float] [float 0x3FD7627540000000, float 0xBFB5A86700000000, float 0xBF96F8BC00000000, float 0x3FBCB0C200000000, float 0x3FBA208200000000, float 0x3FC64BC780000000, float 0x3FCB434380000000, float 0x3FCBA66280000000, float 0x3FD72A0FC0000000, float 0x3FDACA0A40000000, float 0x3FE174EFE0000000, float 0x3FE12A2B40000000, float 0x3FE15F9320000000, float 0x3FD66FC840000000, float 0x3FD51846C0000000, float 0x3FD72CA000000000]], [2 x [16 x float]] [[16 x float] [float 0x3FC7990800000000, float 0x3F926AF800000000, float 0x3FD3FC95C0000000, float 0x3FD70A7200000000, float 0x3FCF934480000000, float 0x3FCBCF6680000000, float 0x3FC9496780000000, float 0x3FBE255100000000, float 0x3FBEA3C800000000, float 0x3FB5BF6A00000000, float 0x3FB8A51D00000000, float 0x3FC45F9780000000, float 0x3FCD721A00000000, float 0x3FD3BACA00000000, float 0x3FD9E79980000000, float 0x3FD91ECB40000000], [16 x float] [float 0xBF9C424000000000, float 0xBFB4597100000000, float 0x3FBDE7CB00000000, float 0x3FC45DE200000000, float 0x3FB7717F00000000, float 0x3FA79A0E00000000, float 0x3FACC83A00000000, float 0x3F814A0800000000, float 0xBF838F9000000000, float 0xBFA4F04A00000000, float 0xBFA341A000000000, float 0xBF9118D400000000, float 0x3FB0CB5900000000, float 0x3FBF633000000000, float 0x3FCD5A2D00000000, float 0x3FCB6C4780000000]], [2 x [16 x float]] [[16 x float] [float 0x3FDE9AB980000000, float 0xBFF3F76320000000, float 0x3FDF430F40000000, float 0x3FE8D117A0000000, float 0x3FE5B66A20000000, float 0x3FE5169FE0000000, float 0x3FE3C43EE0000000, float 0x3FE491C040000000, float 0x3FE1495BA0000000, float 0x3FE1A3EF20000000, float 0x3FE48EC2A0000000, float 0x3FDB10F680000000, float 0x3FE0571C00000000, float 0x3FE06F7660000000, float 0x3FDCBD1040000000, float 0x3FDE6BBA40000000], [16 x float] [float 0x3FD2411A80000000, float 0xBFF61AB080000000, float 0x3FC85F4600000000, float 0x3FDF32D300000000, float 0x3FDD656600000000, float 0x3FDAC4E9C0000000, float 0x3FDAB81880000000, float 0x3FDD783280000000, float 0x3FDA2BF580000000, float 0x3FD8E81B40000000, float 0x3FDE156C80000000, float 0x3FCE81D480000000, float 0x3FD1EE37C0000000, float 0x3FD5BFC1C0000000, float 0x3FD1B4F780000000, float 0x3FD5987340000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE2F5E2C0000000, float 0x3FD8B24600000000, float 0x3FF134E0E0000000, float 0x3FE2680A40000000, float 0x3FE1A6ECC0000000, float 0x3FDF10A500000000, float 0x3FDE342F80000000, float 0x3FE00EE7A0000000, float 0x3FD37072C0000000, float 0x3FE07E6A80000000, float 0x3FEC30FBE0000000, float 0x3FE8D18500000000, float 0x3FE3032160000000, float 0x3FD96F1DC0000000, float 0x3FE2F65020000000, float 0x3FE382E080000000], [16 x float] [float 0x3FD34098C0000000, float 0x3FB216E400000000, float 0x3FEB2661E0000000, float 0x3FD079A8C0000000, float 0x3FD2054A00000000, float 0x3FC8B66E80000000, float 0x3FD026C600000000, float 0x3FD139EB80000000, float 0x3FC047FC00000000, float 0x3FD0FAB000000000, float 0x3FE4B6EBE0000000, float 0x3FE0E1F6E0000000, float 0x3FD923EBC0000000, float 0x3FCEC99B80000000, float 0x3FD9A78340000000, float 0x3FDD28BAC0000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE77C2660000000, float 0x3FDB75CB00000000, float 0x3FE5F382C0000000, float 0x3FE4513CA0000000, float 0x3FE9B5AB40000000, float 0x3FEB3AE3E0000000, float 0x3FEB7DF7C0000000, float 0x3FF1AE00C0000000, float 0x3FF648FD00000000, float 0x3FF57A33A0000000, float 0x3FF15BC220000000, float 0x3FEC9EC940000000, float 0x3FEB749180000000, float 0x3FE6257FA0000000, float 0x3FE1F66480000000, float 0x3FDB8A4D00000000], [16 x float] [float 0x3FDD05B200000000, float 0x3FB7153600000000, float 0x3FD62D21C0000000, float 0x3FD635AD40000000, float 0x3FE0B21CE0000000, float 0x3FE2CC7160000000, float 0x3FE33EF1E0000000, float 0x3FED516000000000, float 0x3FF4848900000000, float 0x3FF3827A60000000, float 0x3FEC60D5E0000000, float 0x3FE4D8AC80000000, float 0x3FE3FF34A0000000, float 0x3FDC813FC0000000, float 0x3FD77541C0000000, float 0x3FCCB2B200000000]], [2 x [16 x float]] [[16 x float] [float 0x3FDB7A10C0000000, float 0x3FD5243D40000000, float 0x3FE3C81740000000, float 0x3FEFA11C60000000, float 0x3FEFBABEE0000000, float 0x3FE9685660000000, float 0x3FD3528A80000000, float 0x3FCF465D00000000, float 0x3FDD135E00000000, float 0x3FE1F9CF80000000, float 0x3FDF542640000000, float 0x3FE51EBE00000000, float 0x3FE420F540000000, float 0x3FE1DBE740000000, float 0x3FE1785AE0000000, float 0x3FDDBE4400000000], [16 x float] [float 0x3FC2097280000000, float 0xBF74895000000000, float 0x3FD0540FC0000000, float 0x3FE5A5C080000000, float 0x3FE6C2B9A0000000, float 0x3FDDC0D440000000, float 0x3F9EDC8400000000, float 0xBF98258400000000, float 0x3FBA12D600000000, float 0x3FCF020100000000, float 0x3FCECD0680000000, float 0x3FD999D740000000, float 0x3FD7C3DEC0000000, float 0x3FD4DC7640000000, float 0x3FD873E540000000, float 0x3FD27CEB00000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE8BF25E0000000, float 0x3FEAA0A780000000, float 0x3FF4F55400000000, float 0x3FF087A160000000, float 0x3FF09BECC0000000, float 0x3FEE55FEC0000000, float 0x3FEF2B30E0000000, float 0x3FEE37A920000000, float 0x3FEC90AFE0000000, float 0x3FEBE6A4A0000000, float 0x3FEBA68E60000000, float 0x3FEAE49620000000, float 0x3FEABFD7E0000000, float 0x3FE89026A0000000, float 0x3FE6109040000000, float 0x3FE74055E0000000], [16 x float] [float 0x3FD7650580000000, float 0x3FDDB76E00000000, float 0x3FF37981A0000000, float 0x3FEAB15120000000, float 0x3FEAD75780000000, float 0x3FE57B7460000000, float 0x3FE5CEC480000000, float 0x3FE4246040000000, float 0x3FE08CF140000000, float 0x3FE0A8B6A0000000, float 0x3FE14EE980000000, float 0x3FE0F4C360000000, float 0x3FE28064A0000000, float 0x3FE000CE40000000, float 0x3FDE4100C0000000, float 0x3FDBAFE600000000]], [2 x [16 x float]] [[16 x float] [float 0x3FEC7D08A0000000, float 0x3FDD6DF180000000, float 0x3FE4752020000000, float 0x3FDCB119C0000000, float 0x3FE3E82260000000, float 0x3FE43BDFE0000000, float 0x3FE69A9060000000, float 0x3FD7CB8F80000000, float 0x3FE57FBA20000000, float 0x3FE934A400000000, float 0x3FD1F79E00000000, float 0x3FD3F4E500000000, float 0x3FE573C3A0000000, float 0x3FE8850AE0000000, float 0x3FE6CAD7C0000000, float 0x3FE9202200000000], [16 x float] [float 0x3FE42A5B80000000, float 0x3FBF446D00000000, float 0x3FD69C3740000000, float 0x3FC2156900000000, float 0x3FD6383D80000000, float 0x3FD5FC6D00000000, float 0x3FDC969C80000000, float 0x3FC1CBEC80000000, float 0x3FDA31F0C0000000, float 0x3FE14D3400000000, float 0x3FB1ACEF00000000, float 0x3FB53A1D00000000, float 0x3FDD9B3B40000000, float 0x3FE23E2B80000000, float 0x3FE1BCB6E0000000, float 0x3FE4F1E1A0000000]], [2 x [16 x float]] [[16 x float] [float 0xBFBC2C5F00000000, float 0x3FD857B280000000, float 0x3FE9D7D940000000, float 0x3FE6176640000000, float 0x3FE9A3B980000000, float 0x3FE9127600000000, float 0x3FEA3A1D80000000, float 0x3FEAD1C9A0000000, float 0x3FE9B4D080000000, float 0x3FE8099180000000, float 0x3FE4758D80000000, float 0x3FE38205C0000000, float 0x3FE63108C0000000, float 0x3FE568A7E0000000, float 0x3FE47C6380000000, float 0x3FE1EBB620000000], [16 x float] [float 0xBFC6BEBD00000000, float 0xBF9E056C00000000, float 0x3FC3772B80000000, float 0x3FC6597380000000, float 0x3FCC71C100000000, float 0x3FD3893A80000000, float 0x3FD30F0940000000, float 0x3FD84E4C40000000, float 0x3FD5BB7C00000000, float 0x3FD30D53C0000000, float 0x3FD01BAA40000000, float 0x3FCEC47B00000000, float 0x3FD6D57780000000, float 0x3FD5236280000000, float 0x3FD58E3240000000, float 0x3FD52F5900000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE1E107C0000000, float 0x3FDDED4340000000, float 0x3FC1D47800000000, float 0xBFB95E9900000000, float 0xBFB4E59400000000, float 0xBFBD592700000000, float 0xBF87F0A800000000, float 0x3FAAB9DC00000000, float 0x3FC4D21800000000, float 0x3FD2B62B40000000, float 0x3FD9CA8C00000000, float 0x3FDCFC4BC0000000, float 0x3FDE0C0640000000, float 0x3FE02FCD80000000, float 0x3FE12E7100000000, float 0x3FE0564140000000], [16 x float] [float 0x3FCC13C280000000, float 0x3FBF037C00000000, float 0x3F926AF800000000, float 0xBFC9E3AB80000000, float 0xBFC20B9D00000000, float 0xBFCB26AB00000000, float 0xBFBD822B00000000, float 0xBFAE71E200000000, float 0xBF89021800000000, float 0x3F9C159400000000, float 0x3FC21C3F00000000, float 0x3FCA2AFD80000000, float 0x3FCBC00500000000, float 0x3FD0BE04C0000000, float 0x3FD56DB9C0000000, float 0x3FD7BA7880000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE3091CA0000000, float 0x3FE69BD880000000, float 0x3FEE2096E0000000, float 0x3FEDE3EBA0000000, float 0x3FEC45EB40000000, float 0x3FEF238020000000, float 0x3FEB3630C0000000, float 0x3FEC7D08A0000000, float 0x3FEBFD4980000000, float 0x3FE61D6180000000, float 0x3FE47E8660000000, float 0x3FE652C960000000, float 0x3FE2EE9F60000000, float 0x3FE3455A80000000, float 0x3FE8BC2840000000, float 0x3FE3827320000000], [16 x float] [float 0x3FC0278380000000, float 0x3FC0A5FA80000000, float 0x3FE51A0AE0000000, float 0x3FE4EA30E0000000, float 0x3FE20BC140000000, float 0x3FE657E9E0000000, float 0x3FDEE7A100000000, float 0x3FE1D8E9A0000000, float 0x3FDD61FB00000000, float 0x3FD2F8D1C0000000, float 0x3FD13FE6C0000000, float 0x3FD5474600000000, float 0x3FD24EC680000000, float 0x3FD293FD40000000, float 0x3FDD96F580000000, float 0x3FD590C280000000]], [2 x [16 x float]] [[16 x float] [float 0x3FEC3A6220000000, float 0x3FEB53ABA0000000, float 0x3FD28D2740000000, float 0x3FE7EE3980000000, float 0x3FE059AC40000000, float 0x3FEB726EA0000000, float 0x3FDF430F40000000, float 0x3FE91BDC40000000, float 0x3FE896FCA0000000, float 0x3FE680EDE0000000, float 0x3FE56982A0000000, float 0x3FEB7FAD40000000, float 0x3FEE06F460000000, float 0x3FEF62BBA0000000, float 0x3FE5C6A660000000, float 0x3FE47E1900000000], [16 x float] [float 0x3FE1E39800000000, float 0x3FDAF158C0000000, float 0x3F9A891800000000, float 0x3FDBA3EF80000000, float 0x3FCAEF8600000000, float 0x3FE173A7C0000000, float 0x3FC6D47F80000000, float 0x3FDC977740000000, float 0x3FDBDB7A40000000, float 0x3FDA2BF580000000, float 0x3FD9907100000000, float 0x3FE3269780000000, float 0x3FE5FE3120000000, float 0x3FE76D9FA0000000, float 0x3FDC36E880000000, float 0x3FDD11A880000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE4632E60000000, float 0x3FE4320C40000000, float 0x3FE6E39F80000000, float 0x3FE62CC300000000, float 0x3FCD56C200000000, float 0x3FD4B37240000000, float 0x3FEEDC93E0000000, float 0x3FEF9E8C20000000, float 0x3FEBE9A240000000, float 0x3FDBF887C0000000, float 0x3FD9EE6F80000000, float 0x3FDFA478C0000000, float 0x3FE141AAE0000000, float 0x3FE31A33A0000000, float 0x3FDB51E780000000, float 0x3FDFF08580000000], [16 x float] [float 0x3FDB18A740000000, float 0x3FD7575980000000, float 0x3FDBCF83C0000000, float 0x3FDAC0A400000000, float 0xBF44BC8000000000, float 0x3FAE02AE00000000, float 0x3FE8626F80000000, float 0x3FEA163A00000000, float 0x3FE5772EA0000000, float 0x3FCAD27880000000, float 0x3FCBE23300000000, float 0x3FD1C533C0000000, float 0x3FD41C3380000000, float 0x3FD8603E00000000, float 0x3FD121FE80000000, float 0x3FD1F35840000000]], [2 x [16 x float]] [[16 x float] [float 0x3FDCDBD340000000, float 0x3FEE5E8A40000000, float 0x3FEB629FC0000000, float 0x3FEA77A380000000, float 0x3FE62139E0000000, float 0x3FE76E0D00000000, float 0x3FE4067800000000, float 0x3FE413B6A0000000, float 0x3FE0C333E0000000, float 0x3FE09FBDC0000000, float 0x3FDA593F40000000, float 0x3FD5A61F40000000, float 0x3FD8083AC0000000, float 0x3FDF27B740000000, float 0x3FE2323500000000, float 0x3FE0578960000000], [16 x float] [float 0x3FB9536E00000000, float 0x3FE3FBC9A0000000, float 0x3FDE156C80000000, float 0x3FD8FE52C0000000, float 0x3FD0D51700000000, float 0x3FD3432900000000, float 0x3FCB879F80000000, float 0x3FCA77E500000000, float 0x3FC3A1E500000000, float 0x3FC73E7480000000, float 0x3FBA350400000000, float 0x3FA3247400000000, float 0x3FB6F9DE00000000, float 0x3FC7ABD480000000, float 0x3FD241F540000000, float 0x3FD0CE4100000000]], [2 x [16 x float]] [[16 x float] [float 0x3FEFDA5CA0000000, float 0x3FEE92AA00000000, float 0x3FEA5C4B80000000, float 0x3FEF4C8420000000, float 0x3FE73CEAE0000000, float 0x3FE93B0CA0000000, float 0x3FE962C880000000, float 0x3FE7A89560000000, float 0x3FEC1B31C0000000, float 0x3FF0A7AC80000000, float 0x3FF0594620000000, float 0x3FED4F3D20000000, float 0x3FEBD58DA0000000, float 0x3FE695DD40000000, float 0x3FE8857840000000, float 0x3FE77C93C0000000], [16 x float] [float 0x3FE9528C40000000, float 0x3FE590D120000000, float 0x3FE0325DC0000000, float 0x3FE696B800000000, float 0x3FD646C440000000, float 0x3FDBC38D40000000, float 0x3FDC583BC0000000, float 0x3FD80D5B40000000, float 0x3FE3143860000000, float 0x3FE95C5FE0000000, float 0x3FE97FD600000000, float 0x3FE5371860000000, float 0x3FE43D9560000000, float 0x3FDD6DF180000000, float 0x3FE0FE9700000000, float 0x3FE1A90FA0000000]], [2 x [16 x float]] [[16 x float] [float 0x3FDDAFBD40000000, float 0x3FAEF8C600000000, float 0x3FC8490E80000000, float 0x3FD5C84D40000000, float 0x3FDE223DC0000000, float 0x3FE0C5C420000000, float 0x3FE36565A0000000, float 0x3FE4A121C0000000, float 0x3FE7673700000000, float 0x3FE710E940000000, float 0x3FE40F70E0000000, float 0x3FE375A1E0000000, float 0x3FDF720E80000000, float 0x3FD69716C0000000, float 0x3FDFB58FC0000000, float 0x3FE2746E20000000], [16 x float] [float 0x3FC1544B80000000, float 0xBF9C193C00000000, float 0x3F30A20020000000, float 0x3F9BDEE400000000, float 0x3FAC6F5C00000000, float 0x3FB0B6D700000000, float 0x3FB9DF9100000000, float 0x3FBB79B900000000, float 0x3FC4146580000000, float 0x3FCC41E700000000, float 0x3FC25B7A80000000, float 0x3FCCF55880000000, float 0x3FBE21E600000000, float 0x3F90A7CC00000000, float 0x3FD0302C40000000, float 0x3FDA296540000000]], [2 x [16 x float]] [[16 x float] [float 0x3FEF0A4B00000000, float 0x3FEFBC0700000000, float 0x3FED4F3D20000000, float 0x3FEDCA4920000000, float 0x3FECC5AA60000000, float 0x3FEDCE2180000000, float 0x3FECFDA280000000, float 0x3FEE5070E0000000, float 0x3FEEBC1B60000000, float 0x3FEE024140000000, float 0x3FED6EDAE0000000, float 0x3FEC621E00000000, float 0x3FEB38C100000000, float 0x3FEB80F560000000, float 0x3FEAA03A20000000, float 0x3FEBF7BBA0000000], [16 x float] [float 0x3FD282E640000000, float 0x3FAC38AC00000000, float 0x3FB6DB1B00000000, float 0x3FBDAA4500000000, float 0x3FB7308E00000000, float 0x3FB2EACE00000000, float 0x3FA43CBA00000000, float 0x3F989CE800000000, float 0x3FA86DF800000000, float 0x3FB33CD600000000, float 0x3FBDFC4D00000000, float 0x3FC3E7F680000000, float 0x3FC1B92000000000, float 0x3FC7470000000000, float 0x3FCAF13B80000000, float 0x3FC07CF680000000]], [2 x [16 x float]] [[16 x float] [float 0x3FDA407780000000, float 0x3FD549D640000000, float 0x3FDDDDE1C0000000, float 0x3FE03F2F00000000, float 0x3FE2DAF820000000, float 0x3FDB58BD80000000, float 0x3FAEE44400000000, float 0xBFEBBD5080000000, float 0xBFF1C41020000000, float 0xBFB70BDF00000000, float 0x3FC4D21800000000, float 0x3FC30B8100000000, float 0x3FDA6E9C00000000, float 0x3FE061CA60000000, float 0x3FE2A00260000000, float 0x3FE18E2500000000], [16 x float] [float 0x3FA39F8000000000, float 0x3FC0A5FA80000000, float 0x3FCD610300000000, float 0x3FD151D880000000, float 0x3FD7D26580000000, float 0x3FC5BC3980000000, float 0xBFB7ED7500000000, float 0xBFEBC493E0000000, float 0xBFF128C260000000, float 0xBFCBB48380000000, float 0xBF77504000000000, float 0xBF9EE02C00000000, float 0x3FC0A0DA00000000, float 0x3FD0830F00000000, float 0x3FD6495480000000, float 0x3FCF9BD000000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE34D0B40000000, float 0x3FE1A61200000000, float 0x3FDB785B40000000, float 0x3FE0169860000000, float 0x3FEA230B40000000, float 0x3FF17B2920000000, float 0x3FEF9CD6A0000000, float 0x3FE6763F80000000, float 0x3FD00FB3C0000000, float 0x3FCFAE9C80000000, float 0x3FE21D45A0000000, float 0x3FE0779480000000, float 0x3FDEDFF040000000, float 0x3FE31AA100000000, float 0x3FE3306B20000000, float 0x3FE13AD4E0000000], [16 x float] [float 0x3FD788E900000000, float 0x3FD0F66A40000000, float 0x3FC44CCB00000000, float 0x3FCC54B380000000, float 0x3FE1CFF0C0000000, float 0x3FEAF687E0000000, float 0x3FE8559E40000000, float 0x3FDCF3C040000000, float 0x3FB16F6900000000, float 0x3FB2E08D00000000, float 0x3FD4497D40000000, float 0x3FD25B97C0000000, float 0x3FD10936C0000000, float 0x3FD743B240000000, float 0x3FDB860740000000, float 0x3FD7F49380000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE00E7A40000000, float 0x3FE53B5E20000000, float 0x3FE5FB3380000000, float 0x3FE69CB340000000, float 0x3FE2248900000000, float 0x3FAFCCB000000000, float 0x3FB03F3600000000, float 0x3FCDB67600000000, float 0x3FEAA1EFA0000000, float 0x3FEF899CC0000000, float 0x3FEA8C92E0000000, float 0x3FE3A5E940000000, float 0x3FE17AEB20000000, float 0x3FE5898DC0000000, float 0x3FE5F08520000000, float 0x3FE31EE6C0000000], [16 x float] [float 0x3FD127F9C0000000, float 0x3FD5466B40000000, float 0x3FD79BB580000000, float 0x3FD8DF8FC0000000, float 0x3FD1C0EE00000000, float 0xBFC5B26D80000000, float 0xBFC1530B00000000, float 0x3F90481800000000, float 0x3FE2DD8860000000, float 0x3FE8471780000000, float 0x3FE20C2EA0000000, float 0x3FD79A0000000000, float 0x3FD5C4E240000000, float 0x3FDCA7B380000000, float 0x3FDE9C6F00000000, float 0x3FD9D23CC0000000]], [2 x [16 x float]] [[16 x float] [float 0x3FEC487B80000000, float 0x3FECE1DD20000000, float 0x3FE771E560000000, float 0x3FE9FF9520000000, float 0x3FECA90A40000000, float 0x3FF19C7C60000000, float 0x3FF45EF000000000, float 0x3FF33F66A0000000, float 0x3FF157B300000000, float 0x3FEEECD020000000, float 0x3FE78AAD20000000, float 0x3FE6370400000000, float 0x3FE622EF60000000, float 0x3FE46D6F60000000, float 0x3FE4CF4640000000, float 0x3FE32A6FE0000000], [16 x float] [float 0x3FE1D87C40000000, float 0x3FDD6B6140000000, float 0x3FD84255C0000000, float 0x3FE1A53740000000, float 0x3FE777E0A0000000, float 0x3FEEC28400000000, float 0x3FF3299C80000000, float 0x3FF1C05FE0000000, float 0x3FEC60D5E0000000, float 0x3FE5B9D520000000, float 0x3FDDB76E00000000, float 0x3FD9C9B140000000, float 0x3FDC0F9A00000000, float 0x3FD8C7A2C0000000, float 0x3FDBAFE600000000, float 0x3FD7A0D600000000]], [2 x [16 x float]] [[16 x float] [float 0x3FEB444A20000000, float 0x3FEAEC46E0000000, float 0x3FE729B100000000, float 0x3FED21F360000000, float 0x3FE6A1D3C0000000, float 0x3FE4BB9F00000000, float 0x3FDD2B4B00000000, float 0x3FC86CF200000000, float 0xBFAD22EC00000000, float 0xBFB9F19200000000, float 0x3FD01C8500000000, float 0x3FDF125A80000000, float 0x3FE2A06FC0000000, float 0x3FE2D5D7A0000000, float 0x3FE3C4AC40000000, float 0x3FE3ECD580000000], [16 x float] [float 0x3FE3B70040000000, float 0x3FDD63B080000000, float 0x3FDE6A04C0000000, float 0x3FE564CF80000000, float 0x3FDBAFE600000000, float 0x3FDA184E40000000, float 0x3FCD9E8900000000, float 0x3F91C6E800000000, float 0xBFCC441180000000, float 0xBFD34B1440000000, float 0x3FA0720600000000, float 0x3FD060E100000000, float 0x3FD70F9280000000, float 0x3FD62ED740000000, float 0x3FDA0FC2C0000000, float 0x3FDE915340000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE6AACCA0000000, float 0x3FECCE35E0000000, float 0x3FE5BE8840000000, float 0x3FF463A320000000, float 0x3FF5E05040000000, float 0x3FF419EFE0000000, float 0x3FEB623260000000, float 0x3FEA854F80000000, float 0x3FE96A7940000000, float 0x3FE99F0660000000, float 0x3FE68310C0000000, float 0x3FE1889720000000, float 0x3FE4744560000000, float 0x3FE3FEC740000000, float 0x3FE1964320000000, float 0x3FDE342F80000000], [16 x float] [float 0x3FD999D740000000, float 0x3FE4C79580000000, float 0x3FDD5529C0000000, float 0x3FF25FF380000000, float 0x3FF408D8E0000000, float 0x3FF1F8C560000000, float 0x3FE3AE74C0000000, float 0x3FE11CECA0000000, float 0x3FDE402600000000, float 0x3FE0DCD660000000, float 0x3FDB614900000000, float 0x3FD192C980000000, float 0x3FD8C28240000000, float 0x3FDAC69F40000000, float 0x3FD63C8340000000, float 0x3FD42904C0000000]], [2 x [16 x float]] [[16 x float] [float 0x3FED062E00000000, float 0x3FE87981C0000000, float 0x3FDB674440000000, float 0x3FE1852C20000000, float 0x3FDA764CC0000000, float 0x3FDE1FAD80000000, float 0x3FDD1D9F00000000, float 0x3FDDBFF980000000, float 0x3FDD4412C0000000, float 0x3FDEDE3AC0000000, float 0x3FDDDD0700000000, float 0x3FDEFCFDC0000000, float 0x3FD9B89A40000000, float 0x3FDB81C180000000, float 0x3FDDBD6940000000, float 0x3FE37DC000000000], [16 x float] [float 0x3FDF85B5C0000000, float 0x3FCA6F5980000000, float 0x3FB848D400000000, float 0x3FC5F9BF80000000, float 0x3FB967F000000000, float 0x3FC10FEF80000000, float 0x3FC0130180000000, float 0x3FC0182200000000, float 0x3FB8754300000000, float 0x3FBCA31600000000, float 0x3FC1901C00000000, float 0x3FC3884280000000, float 0x3FB71C0C00000000, float 0x3FC45F9780000000, float 0x3FCDE65000000000, float 0x3FD81BE200000000]], [2 x [16 x float]] [[16 x float] [float 0x3FD4631FC0000000, float 0x3FEBC4E400000000, float 0x3FE8E29C00000000, float 0x3FEA1D1000000000, float 0x3FEB98E260000000, float 0x3FE9C877C0000000, float 0x3FEC5404A0000000, float 0x3FEB1BB380000000, float 0x3FED43B400000000, float 0x3FECA07EC0000000, float 0x3FEBA4D8E0000000, float 0x3FEB4CD5A0000000, float 0x3FE7C2A540000000, float 0x3FE3E3DCA0000000, float 0x3FE4CDFE20000000, float 0x3FE44B4160000000], [16 x float] [float 0xBFA995BE00000000, float 0x3FB19BD800000000, float 0x3FD3878500000000, float 0x3FD58E3240000000, float 0x3FDFA10DC0000000, float 0x3FD8782B00000000, float 0x3FE22FA4C0000000, float 0x3FE0244460000000, float 0x3FE41721A0000000, float 0x3FE27C8C40000000, float 0x3FE2627C60000000, float 0x3FE19B63A0000000, float 0x3FDB29BE40000000, float 0x3FD43F3C40000000, float 0x3FD69040C0000000, float 0x3FD6EE3F40000000]], [2 x [16 x float]] [[16 x float] [float 0x3FD47BE780000000, float 0x3FEE210440000000, float 0x3FE36A8620000000, float 0x3FD6D72D00000000, float 0x3FC47CA500000000, float 0x3FD2CEF300000000, float 0x3FCA14C600000000, float 0x3FD34FFA40000000, float 0x3FD0763DC0000000, float 0x3FDEB1CBC0000000, float 0x3FE6340660000000, float 0x3FE5E9AF20000000, float 0x3FE7249080000000, float 0x3FE38E69A0000000, float 0x3FE082B040000000, float 0x3FDF14EAC0000000], [16 x float] [float 0x3FB16BFE00000000, float 0x3FE41CAF80000000, float 0x3FD0176480000000, float 0x3FB439C400000000, float 0xBFB19CC200000000, float 0x3FAAB9DC00000000, float 0xBF76E2E000000000, float 0x3FAB801A00000000, float 0x3F9345B800000000, float 0x3FC81AEA00000000, float 0x3FDCC15600000000, float 0x3FDB860740000000, float 0x3FDE6699C0000000, float 0x3FD7694B40000000, float 0x3FD3F77540000000, float 0x3FD2098FC0000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE5F7C880000000, float 0x3FF14E1620000000, float 0x3FEF7BF0C0000000, float 0x3FEC4E0960000000, float 0x3FEE343E20000000, float 0x3FEC711220000000, float 0x3FEA2C0420000000, float 0x3FEB764700000000, float 0x3FE6CF8AE0000000, float 0x3FE6C92240000000, float 0x3FE78146E0000000, float 0x3FE96D0980000000, float 0x3FE922B240000000, float 0x3FEA6FF2C0000000, float 0x3FE6362940000000, float 0x3FE544C460000000], [16 x float] [float 0x3FD23969C0000000, float 0x3FEE834880000000, float 0x3FE569F000000000, float 0x3FE015BDA0000000, float 0x3FE3068C60000000, float 0x3FDA67C600000000, float 0x3FD8DF8FC0000000, float 0x3FD7F12880000000, float 0x3FCF688B00000000, float 0x3FD2BEB6C0000000, float 0x3FD49B8540000000, float 0x3FDA0581C0000000, float 0x3FD890F2C0000000, float 0x3FDB741580000000, float 0x3FD906DE40000000, float 0x3FD8759AC0000000]], [2 x [16 x float]] [[16 x float] [float 0x3FF222DAC0000000, float 0x3FF09FC500000000, float 0x3FE676ACE0000000, float 0x3FE3D99BA0000000, float 0x3FE63EB4C0000000, float 0x3FDF20E140000000, float 0x3FE3BF8BC0000000, float 0x3FE3FDEC80000000, float 0x3FE2E75C00000000, float 0x3FE579BEE0000000, float 0x3FE76EE7C0000000, float 0x3FE6890C00000000, float 0x3FE208C3A0000000, float 0x3FE3C21C00000000, float 0x3FE586FD80000000, float 0x3FE4945080000000], [16 x float] [float 0x3FF03C0200000000, float 0x3FE8D712E0000000, float 0x3FCC29FA00000000, float 0x3FCF7B5780000000, float 0x3FD14D92C0000000, float 0x3FC19DC800000000, float 0x3FD02435C0000000, float 0x3FD0C92080000000, float 0x3FCE94A100000000, float 0x3FD2EC0080000000, float 0x3FD851B740000000, float 0x3FD7627540000000, float 0x3FD0644C00000000, float 0x3FD230DE40000000, float 0x3FD9D23CC0000000, float 0x3FD7AF5CC0000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE44C1C20000000, float 0x3FEECEE7E0000000, float 0x3FE0AFFA00000000, float 0xBF973D1800000000, float 0x3FE1F8F4C0000000, float 0x3FE723B5C0000000, float 0x3FE7BCAA00000000, float 0x3FED18FA80000000, float 0x3FEF2AC380000000, float 0x3FE8F9AE40000000, float 0x3FE5AAE100000000, float 0x3FE453CCE0000000, float 0x3FDDD3A0C0000000, float 0x3FE2C89900000000, float 0x3FE56A5D60000000, float 0x3FE327DFA0000000], [16 x float] [float 0x3FD9870AC0000000, float 0x3FE6644DC0000000, float 0x3FCDA71480000000, float 0xBFD06D1200000000, float 0x3FD12FAA80000000, float 0x3FDCB2CF40000000, float 0x3FDCBD1040000000, float 0x3FE609BA40000000, float 0x3FE8A65E20000000, float 0x3FE2B639E0000000, float 0x3FDD0E3D80000000, float 0x3FDA3A7C40000000, float 0x3FD0830F00000000, float 0x3FD59BDE40000000, float 0x3FDE6E4A80000000, float 0x3FE04E2320000000]], [2 x [16 x float]] [[16 x float] [float 0x3FDC7028C0000000, float 0x40003CC520000000, float 0x3FE50588E0000000, float 0x3FE49B93E0000000, float 0x3FE4989640000000, float 0x3FE19FA960000000, float 0x3FE3812B00000000, float 0x3FE369AB60000000, float 0x3FE11CECA0000000, float 0x3FD0302C40000000, float 0x3FDC710380000000, float 0x3FE666DE00000000, float 0x3FEA6E3D40000000, float 0x3FE2F805A0000000, float 0x3FE04009C0000000, float 0x3FDC4724C0000000], [16 x float] [float 0x3FCF1D5900000000, float 0x3FFE9D2900000000, float 0x3FD7D4F5C0000000, float 0x3FD8179C40000000, float 0x3FD8CCC340000000, float 0x3FD48EB400000000, float 0x3FD886B1C0000000, float 0x3FDCA29300000000, float 0x3FD753EE80000000, float 0x3FB4D6FE00000000, float 0x3FD19DE540000000, float 0x3FDDBE4400000000, float 0x3FE52EFA40000000, float 0x3FDB8C0280000000, float 0x3FD41EC3C0000000, float 0x3FD150FDC0000000]], [2 x [16 x float]] [[16 x float] [float 0x3FEF2B9E40000000, float 0x3FF12B4400000000, float 0x3FEF2DC120000000, float 0x3FED1DADA0000000, float 0x3FEE4034A0000000, float 0x3FEEEAAD40000000, float 0x3FEDAAAB60000000, float 0x3FEEDC2680000000, float 0x3FEFF76A20000000, float 0x3FEECE7A80000000, float 0x3FEDEA5440000000, float 0x3FEF91BAE0000000, float 0x3FEE143300000000, float 0x3FEF350480000000, float 0x3FEB027E60000000, float 0x3FEC38ACA0000000], [16 x float] [float 0x3FEDA06A60000000, float 0x3FF0924FC0000000, float 0x3FEB154AE0000000, float 0x3FE9F2C3E0000000, float 0x3FEADA5520000000, float 0x3FEB6975C0000000, float 0x3FEA9443A0000000, float 0x3FEC6B16E0000000, float 0x3FED619C40000000, float 0x3FEBBE7B60000000, float 0x3FEA9443A0000000, float 0x3FECC982C0000000, float 0x3FEA8F9080000000, float 0x3FEBE03C00000000, float 0x3FE706A840000000, float 0x3FEA0B1E40000000]]], align 16
@wmavoice_lsp16_intercoeff_a = internal constant [32 x [2 x [16 x float]]] [[2 x [16 x float]] [[16 x float] [float 0x3FE1144400000000, float 0x3FDEC9D800000000, float 0xBFD81B1800000000, float 0xBFBED79000000000, float -8.984375e-02, float 0xBF7D0A0000000000, float 0x3FBD0CA000000000, float 0x3FC11F7800000000, float 0x3FD7EE3C00000000, float 0x3FD8A24C00000000, float 0x3FDB025800000000, float 0x3FE14BB200000000, float 0x3FE0B83800000000, float 0x3FE19BFC00000000, float 0x3FE100C800000000, float 0x3FDC32B400000000], [16 x float] [float 0x3FC6B94000000000, float 0x3FC57ED000000000, float 0xBFD14C4000000000, float 0xBFC1666000000000, float 0xBFC2976800000000, float 0xBFB6BF8000000000, float 0xBF9A484000000000, float 0xBF63720000000000, float 0x3FBB7EE000000000, float 0x3FC2533000000000, float 0x3FC15FF800000000, float 0x3FCA2EC800000000, float 0x3FD1318800000000, float 0x3FD5C9FC00000000, float 0x3FD48A2C00000000, float 0x3FC31F7000000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE7B00C00000000, float 0x3FB5759000000000, float 0x3FE4C19000000000, float 0x3FE3AA1000000000, float 0x3FE7759800000000, float 0x3FE6FC5200000000, float 0x3FE7CC4400000000, float 0x3FE868D000000000, float 0x3FE87DFA00000000, float 0x3FE8F23600000000, float 0x3FEAE0B600000000, float 0x3FEADBAC00000000, float 0x3FEA4D9200000000, float 0x3FE7EAD600000000, float 0x3FE5612200000000, float 0x3FE4C54200000000], [16 x float] [float 0x3FD23E4800000000, float 0xBFABDC0000000000, float 0xBF9EBBC000000000, float 0x3F94F58000000000, float 0x3FA0D76000000000, float 0x3FAE2C8000000000, float 0x3FB4637000000000, float 0x3FBE675000000000, float 0x3FC0E70800000000, float 0x3FC3B34000000000, float 0x3FCC07C800000000, float 0x3FD2567800000000, float 0x3FD3088400000000, float 0x3FD0BB4800000000, float 0x3FCEEEE000000000, float 0x3FCF173000000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE39DA200000000, float 0x3FE75CBC00000000, float 0x3FCA8B8000000000, float 0x3FE004D400000000, float 0x3FE248A800000000, float 0x3FE1332C00000000, float 0x3FE4235600000000, float 0x3FE20B8400000000, float 0x3FE7B06200000000, float 0x3FE6586200000000, float 0x3FDDE0B400000000, float 0x3FE56F9400000000, float 0x3FEC06FE00000000, float 0x3FEBC57C00000000, float 0x3FEBC57C00000000, float 0x3FE8FEA400000000], [16 x float] [float 0x3FD31CAC00000000, float 0x3FD4ECF000000000, float 0x3F83BF0000000000, float 0x3FC70C9000000000, float 0x3FCFAB0000000000, float 0x3FCC342000000000, float 0x3FD3404800000000, float 0x3FD11D6000000000, float 0x3FDC519C00000000, float 0x3FD9E57800000000, float 0x3FCA6B4000000000, float 0x3FDB127800000000, float 0x3FE3E93800000000, float 0x3FE509CA00000000, float 0x3FE5AF6800000000, float 0x3FE5225000000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE739CC00000000, float 0x3FE03C9800000000, float 0xBFD9436400000000, float 0x3FE0D0BE00000000, float 0x3FF0E5E300000000, float 0x3FEF0F5800000000, float 0x3FEF207A00000000, float 0x3FED650A00000000, float 0x3FEA310400000000, float 0x3FED19CA00000000, float 0x3FEBAA4600000000, float 0x3FE92F5A00000000, float 0x3FE4500400000000, float 0x3FE0659400000000, float 0x3FD236E400000000, float 0x3FD4D16400000000], [16 x float] [float 0x3FDB8F7000000000, float 0x3FCBF0F000000000, float 0xBFDF603000000000, float 0x3FC6D42000000000, float 0x3FE8E82200000000, float 0x3FE6E32000000000, float 0x3FE7B1BA00000000, float 0x3FE33D8E00000000, float 0x3FE1592200000000, float 0x3FE52EBE00000000, float 0x3FE436D200000000, float 0x3FE1E8EA00000000, float 0x3FD94B9C00000000, float 0x3FD6D4B800000000, float 0x3FC343B800000000, float 0x3FC0839800000000]], [2 x [16 x float]] [[16 x float] [float 0x3FD3B1D400000000, float 0x3FD0470C00000000, float 0x3FD2241400000000, float 0x3FE0E74000000000, float 0x3FE11F0400000000, float 0x3FDFA43400000000, float 0x3FDCF0D800000000, float 0x3FD3C09C00000000, float 0x3FCE5F1800000000, float 0x3FB4F9F000000000, float 0xBFC1BC6000000000, float 0xBFB5B82000000000, float 0xBFA380C000000000, float 0x3FBE84E000000000, float 0x3FD4A91400000000, float 0x3FD3485800000000], [16 x float] [float 0x3FAD0A4000000000, float 0x3F94294000000000, float 0x3FB1785000000000, float 0x3FCAE99000000000, float 0x3FCF63C800000000, float 0x3FCA608000000000, float 0x3FC4BD5000000000, float 0x3FB412D000000000, float 0x3FA56B2000000000, float 0xBFAA030000000000, float 0xBFCC14E800000000, float 0xBFC50DA000000000, float 0xBFC16E7000000000, float 0xBF9F7D4000000000, float 0x3FC3074000000000, float 0x3FCE295800000000]], [2 x [16 x float]] [[16 x float] [float 0x3FDC152400000000, float 0x3FE2510E00000000, float 0x3FE3AC1400000000, float 0x3FEFEA6000000000, float 0x3FF2A1FF00000000, float 0x3FF309CD00000000, float 0x3FF085CF00000000, float 0x3FE6347000000000, float 0x3FE367E200000000, float 0x3FDDFE4400000000, float 0x3FDDBD1800000000, float 0x3FDF54EC00000000, float 0x3FE217F200000000, float 0x3FE3372C00000000, float 0x3FE3C5F200000000, float 0x3FE49AEE00000000], [16 x float] [float 0x3FC0F32000000000, float 0x3FCF0DC800000000, float 0x3FD40BDC00000000, float 0x3FE78D1C00000000, float 0x3FEF329E00000000, float 0x3FEE839800000000, float 0x3FE9EFD800000000, float 0x3FDA5C6400000000, float 0x3FD3490400000000, float 0x3FC9ADC800000000, float 0x3FCDD76000000000, float 0x3FD0399C00000000, float 0x3FD5999C00000000, float 0x3FDA42DC00000000, float 0x3FDA423000000000, float 0x3FDCFCF000000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE7794A00000000, float 0x3FED737C00000000, float 0x3FDF0DB400000000, float 0x3FEBAB9E00000000, float 0x3FE75FC200000000, float 0x3FE8030600000000, float 0x3FE420A600000000, float 0x3FE614DC00000000, float 0x3FE48C2600000000, float 0x3FE096F600000000, float 0x3FDC728800000000, float 0x3FD1068800000000, float 0x3FCB6E9800000000, float 0x3FCECD4800000000, float 0x3FDEF4D800000000, float 0x3FE1E94000000000], [16 x float] [float 0x3FD79D9C00000000, float 0x3FDFCA8000000000, float 0x3FBE1EC000000000, float 0x3FE0689A00000000, float 0x3FD4B48000000000, float 0x3FD5ED9800000000, float 0x3FCEF19000000000, float 0x3FD5302000000000, float 0x3FD0D4D000000000, float 0x3FCB464800000000, float 0x3FC1034000000000, float 0x3FA8004000000000, float 0xBF80C98000000000, float 0x3F8DFE0000000000, float 0x3FCF3CD000000000, float 0x3FD5D0B400000000]], [2 x [16 x float]] [[16 x float] [float 0x3FEE293A00000000, float 0x3FEEB6A800000000, float 0x3FE3B6D400000000, float 0x3FE6902600000000, float 0x3FE9CDEA00000000, float 0x3FED009800000000, float 0x3FEFA62E00000000, float 0x3FF00FE500000000, float 0x3FF08A8300000000, float 0x3FEE406800000000, float 0x3FEED43800000000, float 0x3FE9D19C00000000, float 0x3FE5F34400000000, float 0x3FEC824800000000, float 0x3FEFF82600000000, float 0x3FF0325400000000], [16 x float] [float 0x3FE6112A00000000, float 0x3FE4A55800000000, float 0x3FD449AC00000000, float 0x3FDB51A000000000, float 0x3FE221B000000000, float 0x3FE8B66A00000000, float 0x3FEC4E8C00000000, float 0x3FECFF4000000000, float 0x3FEE8FB000000000, float 0x3FE9FAEE00000000, float 0x3FEB85FE00000000, float 0x3FE39DA200000000, float 0x3FE0393C00000000, float 0x3FE69BE800000000, float 0x3FE9294E00000000, float 0x3FE8DA5C00000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE20D8800000000, float 0xBFB81CE000000000, float 0x3FA5254000000000, float 0x3FC72CD000000000, float 0x3FD6240400000000, float 0x3FDAF6EC00000000, float 0x3FDC2AA400000000, float 0x3FE1455000000000, float 0x3FE1F1FC00000000, float 0x3FE4510600000000, float 0x3FE5F54800000000, float 0x3FE74C4600000000, float 0x3FE7413000000000, float 0x3FE4A1A600000000, float 0x3FE308D000000000, float 0x3FE1852400000000], [16 x float] [float 0x3FC8689800000000, float 0xBFAA942000000000, float 0xBFAF228000000000, float 0xBF5ED40000000000, float 0x3FA39CE000000000, float 0x3FA2902000000000, float 0x3FAB212000000000, float 0x3FB1BB8000000000, float 0x3FB8661000000000, float 0x3FC0FF3800000000, float 0x3FC1CCD000000000, float 0x3FC8608800000000, float 0x3FCE3D8000000000, float 0x3FCA6B4000000000, float 0x3FCD96E000000000, float 0x3FCD550800000000]], [2 x [16 x float]] [[16 x float] [float 0x3FEFAF4000000000, float 0x3FEEAFF000000000, float 0x3FECD6F000000000, float 0x3FE9A84A00000000, float 0x3FEC931400000000, float 0x3FEB3D1800000000, float 0x3FEC20DC00000000, float 0x3FEC43CC00000000, float 0x3FECA38A00000000, float 0x3FED4F3400000000, float 0x3FEDBD0E00000000, float 0x3FED49D400000000, float 0x3FED976E00000000, float 0x3FEC02F600000000, float 0x3FEBEFD000000000, float 0x3FE9D04400000000], [16 x float] [float 0x3FDB132400000000, float 0xBFA7C94000000000, float 0x3F92B10000000000, float 0x3FBDB09000000000, float 0x3FCE128000000000, float 0x3FD18A3800000000, float 0x3FD31E0400000000, float 0x3FD72C1000000000, float 0x3FD91BE800000000, float 0x3FDE0BB400000000, float 0x3FE0A5BE00000000, float 0x3FE1240E00000000, float 0x3FE1CE0A00000000, float 0x3FE1291800000000, float 0x3FDEAAF000000000, float 0x3FE0266C00000000]], [2 x [16 x float]] [[16 x float] [float 0x3FEF502E00000000, float 0x3FEC39B800000000, float 0x3FD9607000000000, float 0x3FDEA84000000000, float 0x3FD9026000000000, float 0x3FDADA0800000000, float 0x3FD2CE1000000000, float 0x3FDA2F6000000000, float 0x3FD76B3800000000, float 0x3FD9CBF000000000, float 0x3FDAADB000000000, float 0x3FE0195200000000, float 0x3FE012F000000000, float 0x3FE1A30A00000000, float 0x3FE1220A00000000, float 0x3FE1CD5E00000000], [16 x float] [float 0x3FE518E800000000, float 0x3FD2C6AC00000000, float 0x3FACCF2000000000, float 0x3FC078D800000000, float 0x3FB3698000000000, float 0x3FBE879000000000, float 0x3FAA0F0000000000, float 0x3FBE16B000000000, float 0x3FB1831000000000, float 0x3FB94FE000000000, float 0x3FB7A74000000000, float 0x3FC74A6000000000, float 0x3FC9276800000000, float 0x3FCCE58000000000, float 0x3FD384D000000000, float 0x3FD3281800000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE6C8EC00000000, float 0x3FE91CE000000000, float 0x3FE3693A00000000, float 0x3FE727A800000000, float 0x3FE591D800000000, float 0x3FE4E98A00000000, float 0x3FD7E62C00000000, float 0x3FDEA59000000000, float 0x3FDC3AC400000000, float 0x3FE62B0800000000, float 0x3FF136AE00000000, float 0x3FF1D69600000000, float 0x3FF1225B00000000, float 0x3FEC77DE00000000, float 0x3FE47C5C00000000, float 0x3FE02ED200000000], [16 x float] [float 0x3FDAF23800000000, float 0x3FDE7BE800000000, float 0x3FD4AA6C00000000, float 0x3FDA1B3800000000, float 0x3FD91A9000000000, float 0x3FD6963C00000000, float 0x3FC01D7800000000, float 0x3FCBC34000000000, float 0x3FCC419000000000, float 0x3FDD79E800000000, float 0x3FEC07AA00000000, float 0x3FEE7BDE00000000, float 0x3FEC4CDE00000000, float 0x3FE6678000000000, float 0x3FDCD29C00000000, float 0x3FD64C5400000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE0D06800000000, float 0x3FE11E5800000000, float 0x3FE6840E00000000, float 0x3FE3F80000000000, float 0x3FE4AFC200000000, float 0x3FE81EE800000000, float 0x3FEA98D200000000, float 0x3FE7784800000000, float 0x3FD64DAC00000000, float 0x3FC7A31000000000, float 0x3FB6E31000000000, float 0x3FD9754400000000, float 0x3FE88D1800000000, float 0x3FED84F400000000, float 0x3FEC380A00000000, float 0x3FE7D9B400000000], [16 x float] [float 0x3FD08F9C00000000, float 0x3FD0282400000000, float 0x3FDA77F000000000, float 0x3FD4072800000000, float 0x3FD5C8A400000000, float 0x3FDCA0E400000000, float 0x3FE10E8E00000000, float 0x3FDB0E7000000000, float 0x3FBBA73000000000, float 0xBF724A0000000000, float 0xBFB29CA000000000, float 0x3FC445B800000000, float 0x3FE0F7B600000000, float 0x3FE7677C00000000, float 0x3FE58DD000000000, float 0x3FE204CC00000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE9657000000000, float 0x3FEB5D0200000000, float 0x3FEF37FE00000000, float 0x3FECA69000000000, float 0x3FEDE80E00000000, float 0x3FE70C1C00000000, float 0x3FEAD7A400000000, float 0x3FE969CE00000000, float 0x3FE829A800000000, float 0x3FE9438200000000, float 0x3FEB7D4200000000, float 0x3FE900FE00000000, float 0x3FEB259400000000, float 0x3FEBAFFC00000000, float 0x3FEB7A3C00000000, float 0x3FEEABE800000000], [16 x float] [float 0x3FDE9A2400000000, float 0x3FDE48D800000000, float 0x3FEA86AE00000000, float 0x3FE3C29600000000, float 0x3FE73DD400000000, float 0x3FD748F400000000, float 0x3FE1BDEA00000000, float 0x3FDE79E400000000, float 0x3FDC167C00000000, float 0x3FE0119800000000, float 0x3FE2047600000000, float 0x3FDD32B000000000, float 0x3FE09C0000000000, float 0x3FE3001400000000, float 0x3FE396EA00000000, float 0x3FE650A800000000]], [2 x [16 x float]] [[16 x float] [float 0x3FF128BD00000000, float 0x3FF0B83300000000, float 0x3FEB809E00000000, float 0x3FE8555400000000, float 0x3FE914D000000000, float 0x3FEA096000000000, float 0x3FE864C800000000, float 0x3FE3841A00000000, float 0x3FE4958E00000000, float 0x3FE476FC00000000, float 0x3FE5EE9000000000, float 0x3FE7AF6000000000, float 0x3FE7ADB200000000, float 0x3FE87CF800000000, float 0x3FE88F7200000000, float 0x3FE7A8FE00000000], [16 x float] [float 0x3FEE05F400000000, float 0x3FEAF18200000000, float 0x3FD3C2A000000000, float 0x3FD72B6400000000, float 0x3FD6B47800000000, float 0x3FDB249C00000000, float 0x3FD24A6000000000, float 0x3FCB2F7000000000, float 0x3FCE280000000000, float 0x3FD1E23C00000000, float 0x3FD49BA400000000, float 0x3FD8F2EC00000000, float 0x3FD9336C00000000, float 0x3FD9F8F400000000, float 0x3FDB0FC800000000, float 0x3FDAC28400000000]], [2 x [16 x float]] [[16 x float] [float 0x3FF070D000000000, float 0x3FF1814200000000, float 0x3FF0434B00000000, float 0x3FED1CD000000000, float 0x3FEE151200000000, float 0x3FECB96000000000, float 0x3FED5CA400000000, float 0x3FEC7B9000000000, float 0x3FED4B2C00000000, float 0x3FEE605200000000, float 0x3FF004A400000000, float 0x3FF0941600000000, float 0x3FF0933F00000000, float 0x3FEDD33A00000000, float 0x3FECB7B200000000, float 0x3FEC32AA00000000], [16 x float] [float 0x3FF012EB00000000, float 0x3FF1605600000000, float 0x3FEE37AC00000000, float 0x3FE7EA2A00000000, float 0x3FE9340E00000000, float 0x3FE7B6C400000000, float 0x3FE7C02C00000000, float 0x3FE5E72C00000000, float 0x3FE7387400000000, float 0x3FEB0EBC00000000, float 0x3FECB3AA00000000, float 0x3FEDF57E00000000, float 0x3FED187200000000, float 0x3FEA539E00000000, float 0x3FE7F0E200000000, float 0x3FE6AF0E00000000]], [2 x [16 x float]] [[16 x float] [float 0x3FCC398000000000, float 0xBF8A878000000000, float 0x3FB8E46000000000, float 0x3FBD905000000000, float 0x3FB85E0000000000, float 0x3FC39DC000000000, float 0x3FC07CE000000000, float 0x3FC665F000000000, float 0x3FC45DE800000000, float 0x3FCB53B800000000, float 0x3FCFB5C000000000, float 0x3FD0DCE000000000, float 0x3FD3694400000000, float 0x3FD4F1A400000000, float 0x3FD44B0400000000, float 0x3FD44D0800000000], [16 x float] [float 0x3F6AEA0000000000, float 0xBFA6D76000000000, float 0x3F9D25C000000000, float 0x3F8FD70000000000, float 0xBF79D90000000000, float 0x3F97248000000000, float 0x3F81D08000000000, float 0x3F9AD68000000000, float 0x3F91CF4000000000, float 0x3FA2754000000000, float 0x3FA2C5E000000000, float 0x3F960D0000000000, float 0x3FA51A8000000000, float 0x3FBAD03000000000, float 0x3FC01AC800000000, float 0x3FAF394000000000]], [2 x [16 x float]] [[16 x float] [float 0x3FC324D000000000, float 0x3FD4F70400000000, float 0x3FEB83A400000000, float 0x3FE5E98600000000, float 0x3FE829A800000000, float 0x3FE21EAA00000000, float 0x3FE62D6200000000, float 0x3FE8158000000000, float 0x3FE75C6600000000, float 0x3FE74FA200000000, float 0x3FE5260200000000, float 0x3FE0B78C00000000, float 0x3FDB5A5C00000000, float 0x3FE26C4400000000, float 0x3FDD9AD400000000, float 0x3FE0653E00000000], [16 x float] [float 0xBFA2088000000000, float 0xBFA5F5A000000000, float 0x3FD3E8EC00000000, float 0x3FD1470800000000, float 0x3FD52B6C00000000, float 0x3FCA5C7800000000, float 0x3FCDDA1000000000, float 0x3FD4821C00000000, float 0x3FD2379000000000, float 0x3FD578B000000000, float 0x3FCF57B000000000, float 0x3FC3614800000000, float 0x3FBB33A000000000, float 0x3FD0B94400000000, float 0x3FCB2E1800000000, float 0x3FD3343000000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE3E68800000000, float 0x3FE34EB000000000, float 0x3FDD213800000000, float 0x3FD43C3C00000000, float 0x3FD255CC00000000, float 0x3FE3D30C00000000, float 0x3FE83F7E00000000, float 0x3FF0197800000000, float 0x3FEB26EC00000000, float 0x3FE5B06A00000000, float 0x3FE7DB6200000000, float 0x3FD73C3000000000, float 0x3FCDCB4800000000, float 0x3FE1CD5E00000000, float 0x3FDC789400000000, float 0x3FD85D1800000000], [16 x float] [float 0x3FD0CCC000000000, float 0x3FD1261C00000000, float 0x3FC78C3800000000, float 0x3FA132C000000000, float 0x3F9E1D0000000000, float 0x3FD2939C00000000, float 0x3FDFBD1000000000, float 0x3FE94C9400000000, float 0x3FE2653600000000, float 0x3FD8066C00000000, float 0x3FDF131400000000, float 0x3FBBE50000000000, float 0x3FA2958000000000, float 0x3FD73F8C00000000, float 0x3FD128CC00000000, float 0x3FD1822800000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE69B3C00000000, float 0x3FDC5D0800000000, float 0x3FE8692600000000, float 0x3FE744E200000000, float 0x3FE8FFA600000000, float 0x3FE8FB4800000000, float 0x3FEC82F400000000, float 0x3FECAAEE00000000, float 0x3FED34AA00000000, float 0x3FECEC1A00000000, float 0x3FED966C00000000, float 0x3FEECC7E00000000, float 0x3FEF24D800000000, float 0x3FE7BE7E00000000, float 0x3FE031D800000000, float 0x3FE09AFE00000000], [16 x float] [float 0x3FD61FFC00000000, float 0xBF8E8F8000000000, float 0x3FD4511000000000, float 0x3FD6EAE400000000, float 0x3FDB295000000000, float 0x3FDB5D0C00000000, float 0x3FE2D6C200000000, float 0x3FE4BB2E00000000, float 0x3FE439D800000000, float 0x3FE5352000000000, float 0x3FE5FAFE00000000, float 0x3FE7AB5800000000, float 0x3FE829FE00000000, float 0x3FE0E18A00000000, float 0x3FD3AE7800000000, float 0x3FD85D1800000000]], [2 x [16 x float]] [[16 x float] [float 0x3FDC030000000000, float 0x3FDF63B400000000, float 0x3FE40A7A00000000, float 0x3FE2E22E00000000, float 0x3FDABB2000000000, float 0x3F96AE4000000000, float 0xBFC4A4D000000000, float 0xBFCC9F5000000000, float 0xBFBBD9A000000000, float 0xBF62700000000000, float 0x3FBAEDC000000000, float 0x3FD52B6C00000000, float 0x3FDAAC5800000000, float 0x3FDFFC3800000000, float 0x3FDDBBC000000000, float 0x3FE0BB3E00000000], [16 x float] [float 0x3FBF716000000000, float 0x3FC563F000000000, float 0x3FD2C2A400000000, float 0x3FD051CC00000000, float 0x3FC260A000000000, float 0xBFBCCB8000000000, float 0xBFCBEDF000000000, float 0xBFD16DD800000000, float 0xBFC423D000000000, float 0xBFB5724000000000, float 0xBFA0AB2000000000, float 0x3FBA39B000000000, float 0x3FC8D01000000000, float 0x3FD2154C00000000, float 0x3FCCC3E800000000, float 0x3FD26DFC00000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE385C800000000, float 0x3FE947E000000000, float 0x3FEEA8E200000000, float 0x3FECCC8600000000, float 0x3FEDAFF400000000, float 0x3FEF1B7000000000, float 0x3FEFE45400000000, float 0x3FEED13200000000, float 0x3FEEA12800000000, float 0x3FECC67A00000000, float 0x3FEAC8DC00000000, float 0x3FE7BCD000000000, float 0x3FE6F54400000000, float 0x3FE397EC00000000, float 0x3FE596E200000000, float 0x3FE67F5A00000000], [16 x float] [float 0x3FB5FEA000000000, float 0x3FB766C000000000, float 0x3FE372A200000000, float 0x3FE1821E00000000, float 0x3FE3051E00000000, float 0x3FE5C6EC00000000, float 0x3FE5607600000000, float 0x3FE34EB000000000, float 0x3FE42B6600000000, float 0x3FDF31FC00000000, float 0x3FD757BC00000000, float 0x3FD1BA9800000000, float 0x3FD0486400000000, float 0x3FD0B13400000000, float 0x3FD5526400000000, float 0x3FDFAFA000000000]], [2 x [16 x float]] [[16 x float] [float 0x3FD9ED8800000000, float 0x3FF1A2AF00000000, float 0x3FEA708200000000, float 0x3FE508C800000000, float 0x3FE3092600000000, float 0x3FE15D2A00000000, float 0x3FDFEC1800000000, float 0x3FDBF84000000000, float 0x3FDC4B9000000000, float 0x3FD88ED000000000, float 0x3FD7DCC400000000, float 0x3FD7B92800000000, float 0x3FDAAFB400000000, float 0x3FD6C8A000000000, float 0x3FD3297000000000, float 0x3FD8EF9000000000], [16 x float] [float 0x3FB25A1000000000, float 0x3FED9CCE00000000, float 0x3FD1CC1000000000, float 0x3FCF7D5000000000, float 0x3FC5716000000000, float 0x3FC38DA000000000, float 0x3FC05CA000000000, float 0x3FBF66A000000000, float 0x3FBDD38000000000, float 0x3FB924E000000000, float 0x3FB860B000000000, float 0x3FBC80E000000000, float 0x3FC32F9000000000, float 0x3FB812C000000000, float 0x3FB48E7000000000, float 0x3FC3FA7800000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE67AA600000000, float 0x3FE7907800000000, float 0x3FEED08600000000, float 0x3FEED53A00000000, float 0x3FF14FB500000000, float 0x3FF272A100000000, float 0x3FF4C66A00000000, float 0x3FF44F2800000000, float 0x3FF48ED100000000, float 0x3FF49A9300000000, float 0x3FF369B600000000, float 0x3FF11D5100000000, float 0x3FF1622F00000000, float 0x3FEF869A00000000, float 0x3FEA997E00000000, float 0x3FE9C0D000000000], [16 x float] [float 0x3FD3358800000000, float 0x3FCD189000000000, float 0x3FE4184000000000, float 0x3FE6321600000000, float 0x3FE9E92000000000, float 0x3FEE35A800000000, float 0x3FF1A55F00000000, float 0x3FF2D38C00000000, float 0x3FF1EB6A00000000, float 0x3FF292B600000000, float 0x3FF110B800000000, float 0x3FEC646200000000, float 0x3FED10B800000000, float 0x3FE853FC00000000, float 0x3FE4EF4000000000, float 0x3FE76A8200000000]], [2 x [16 x float]] [[16 x float] [float 0x3FB0790000000000, float 0xBFE5C9DE00000000, float 0x3FD27EC800000000, float 0x3FE3A7B600000000, float 0x3FE4576800000000, float 0x3FE5D7B800000000, float 0x3FE407CA00000000, float 0x3FDFA6E400000000, float 0x3FE2C5F600000000, float 0x3FE4581400000000, float 0x3FE0AB1E00000000, float 0x3FDAEE3000000000, float 0x3FE066EC00000000, float 0x3FD80D2400000000, float 0x3FE15B7C00000000, float 0x3FE3C09200000000], [16 x float] [float 0xBFB04D6000000000, float 0xBFE8462200000000, float 0x3FB5C63000000000, float 0x3FD32E2400000000, float 0x3FD72C1000000000, float 0x3FDC713000000000, float 0x3FDD6C7800000000, float 0x3FD3F90C00000000, float 0x3FD9B51800000000, float 0x3FE015F600000000, float 0x3FDA50F800000000, float 0x3FD45FD800000000, float 0x3FD7775000000000, float 0x3FC76BF800000000, float 0x3FD4EC4400000000, float 0x3FDA36C400000000]], [2 x [16 x float]] [[16 x float] [float 0x3FEDAFF400000000, float 0x3FEEE25400000000, float 0x3FEEBA0400000000, float 0x3FEDD94600000000, float 0x3FED778400000000, float 0x3FEC610600000000, float 0x3FECD64400000000, float 0x3FEB6C2000000000, float 0x3FECD94A00000000, float 0x3FECB40000000000, float 0x3FEDF98600000000, float 0x3FEE395A00000000, float 0x3FEB931800000000, float 0x3FEA4A3600000000, float 0x3FEAAAF600000000, float 0x3FE967CA00000000], [16 x float] [float 0x3FC6012800000000, float 0x3FBD3FB000000000, float 0x3FBFE24000000000, float 0x3FC511F800000000, float 0x3FC207F000000000, float 0x3FB8509000000000, float 0x3F9BD88000000000, float 0x3F9B374000000000, float 0xBF7A5A0000000000, float 0xBF86548000000000, float 0x3F8F2B0000000000, float 0x3F99DF4000000000, float 0x3F91188000000000, float 0x3FB2D86000000000, float 0x3FBEDD9000000000, float 0x3FC842F800000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE315EA00000000, float 0x3FE3688E00000000, float 0x3FE7214600000000, float 0x3FE783B400000000, float 0x3FB2622000000000, float 0x3FCE55B000000000, float 0x3FCF713800000000, float 0x3FDFC06C00000000, float 0x3FE4836A00000000, float 0x3FE5A6AC00000000, float 0x3FE5AB0A00000000, float 0x3FE750A400000000, float 0x3FE5764C00000000, float 0x3FE0567600000000, float 0x3FE0383A00000000, float 0x3FE1608600000000], [16 x float] [float 0x3FD1CEC000000000, float 0x3FD0C4B000000000, float 0x3FDC50F000000000, float 0x3FDA65CC00000000, float 0xBFBDAA9000000000, float 0x3F9311C000000000, float 0x3F788B0000000000, float 0x3FC7B9E800000000, float 0x3FD6D6BC00000000, float 0x3FD8443C00000000, float 0x3FDA3ED400000000, float 0x3FDDCA8800000000, float 0x3FDD88B000000000, float 0x3FD48AD800000000, float 0x3FD4796000000000, float 0x3FD88E2400000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE9C3D600000000, float 0x3FEB386400000000, float 0x3FEE8AFC00000000, float 0x3FE1DED600000000, float 0x3FE2CC0200000000, float 0x3FE253BE00000000, float 0x3FE3C4F000000000, float 0x3FE882AE00000000, float 0x3FEE7BDE00000000, float 0x3FF0ADC900000000, float 0x3FF1210300000000, float 0x3FF0119300000000, float 0x3FE3378200000000, float 0x3FD8E01C00000000, float 0x3FDE559C00000000, float 0x3FE4EF9600000000], [16 x float] [float 0x3FDE901000000000, float 0x3FE1BBE600000000, float 0x3FE6CF4E00000000, float 0x3FCB7AB000000000, float 0x3FD0048800000000, float 0x3FCFDB6000000000, float 0x3FD3424C00000000, float 0x3FDDE00800000000, float 0x3FE62D0C00000000, float 0x3FEB84FC00000000, float 0x3FEC1C7E00000000, float 0x3FE7E27000000000, float 0x3FD4979C00000000, float 0x3FC051E000000000, float 0x3FD1B5E400000000, float 0x3FE061E200000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE3215600000000, float 0x3FE04C0C00000000, float 0x3FF12E7300000000, float 0x3FE89A8800000000, float 0x3FEA498A00000000, float 0x3FE8952800000000, float 0x3FDFCFE000000000, float 0x3FD1D01800000000, float 0x3FD0FA7000000000, float 0x3FD7337400000000, float 0x3FE23DE800000000, float 0x3FE0241200000000, float 0x3FD99EEC00000000, float 0x3FE0852800000000, float 0x3FE2541400000000, float 0x3FE1B93600000000], [16 x float] [float 0x3FD19D0800000000, float 0x3FC65F3800000000, float 0x3FEB620C00000000, float 0x3FDB65C800000000, float 0x3FE075B400000000, float 0x3FDA7EA800000000, float 0x3FC72E2800000000, float 0x3F866F0000000000, float 0x3FA03B8000000000, float 0x3FB5907000000000, float 0x3FD4072800000000, float 0x3FD0BBF400000000, float 0x3FC4053800000000, float 0x3FCE1D4000000000, float 0x3FD4CCB000000000, float 0x3FD66FF000000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE6B31600000000, float 0x3FE847E400000000, float 0x3FFDA0D100000000, float 0x3FF025E600000000, float 0x3FE9DA0200000000, float 0x3FEC233600000000, float 0x3FEA462E00000000, float 0x3FEB85A800000000, float 0x3FE61F9C00000000, float 0x3FE498EA00000000, float 0x3FE3E4DA00000000, float 0x3FE3989800000000, float 0x3FE3026E00000000, float 0x3FE2EA3E00000000, float 0x3FE4D1B000000000, float 0x3FE2903600000000], [16 x float] [float 0x3FD592E400000000, float 0x3FDDF6E000000000, float 0x3FFEC71900000000, float 0x3FE9C58400000000, float 0x3FE1072A00000000, float 0x3FE44BA600000000, float 0x3FE02CCE00000000, float 0x3FE285CC00000000, float 0x3FDC29F800000000, float 0x3FDA27FC00000000, float 0x3FD91D4000000000, float 0x3FDB025800000000, float 0x3FD88B7400000000, float 0x3FDB132400000000, float 0x3FE09C5600000000, float 0x3FD98A1800000000]], [2 x [16 x float]] [[16 x float] [float 0x3FE4163C00000000, float 0x3FF1CBAB00000000, float 0x3FF06A6E00000000, float 0x3FEE5B4800000000, float 0x3FED640800000000, float 0x3FECFDE800000000, float 0x3FED0E5E00000000, float 0x3FEA80A200000000, float 0x3FEB024E00000000, float 0x3FE93DCC00000000, float 0x3FE7E5CC00000000, float 0x3FE596E200000000, float 0x3FE438D600000000, float 0x3FE3FD6000000000, float 0x3FE73E8000000000, float 0x3FE7846000000000], [16 x float] [float 0x3FCF132800000000, float 0x3FF15CCF00000000, float 0x3FE3C6F400000000, float 0x3FE2ADC600000000, float 0x3FDBADAC00000000, float 0x3FDDFB9400000000, float 0x3FD7F85000000000, float 0x3FD35FDC00000000, float 0x3FD7571000000000, float 0x3FCED6B000000000, float 0x3FCBA05000000000, float 0x3FCA46F800000000, float 0x3FCAE43000000000, float 0x3FCD235000000000, float 0x3FD5D20C00000000, float 0x3FD9E4CC00000000]], [2 x [16 x float]] [[16 x float] [float 0x3FEADA5400000000, float 0x3FEBE20A00000000, float 0x3FF22F9C00000000, float 0x3FF24E2E00000000, float 0x3FF24F5B00000000, float 0x3FF1676400000000, float 0x3FF0D36900000000, float 0x3FF028C100000000, float 0x3FED7DE600000000, float 0x3FECC52200000000, float 0x3FECCDDE00000000, float 0x3FECC72600000000, float 0x3FE9C6DC00000000, float 0x3FEA152200000000, float 0x3FE745E400000000, float 0x3FE7071200000000], [16 x float] [float 0x3FDDA99C00000000, float 0x3FE2954000000000, float 0x3FF20F8700000000, float 0x3FF1B4FE00000000, float 0x3FF1395E00000000, float 0x3FEDB85A00000000, float 0x3FECA8EA00000000, float 0x3FE9AF0200000000, float 0x3FE585C000000000, float 0x3FE2BDE600000000, float 0x3FE1B02400000000, float 0x3FE096A000000000, float 0x3FDCFCF000000000, float 0x3FE03CEE00000000, float 0x3FDDA64000000000, float 0x3FE1C6A600000000]]], align 16
@wmavoice_dq_lsp16r1 = internal constant [1280 x i8] c"\93\91\C1\A8\BC\9C\8D\91\8D\8B\94\95\94\95\99\9D\90\90\98\98\8D\91\99\8F\F3\86\97\85\A6\87\96\95\87\84 'nomr~\7F\93\92\B1\A9\A2\9C\D2\BB\8D\93_\96\7F\9Bl\85\8B\94\8A\8A\8C\8C\93\92\86\82\88\86\93\92\8E\96>\AE~\97z\9C\9A\9C\B3\B8skic\7F|\92\83\8C,\84}\9C\92\99\99\88\89\91\90\8D\8B\9E\98\8A\84\91\91\93\91\92\8D\90\8Cna\8C\8D\8F\8E\82{\7Fu~x\93\92\A1\9B\A9\87zu\A6\9B\90\90\8E\8E}z\89\80\C2\AC\7FU\94\8F\99\8D\93\93\8C\8Fv\8C\00E3<o{\89\87\92\92\A4\A5\CF\D6\91\8F\95\93\B2\A8\C5\AA\86\9A\94\9Fs\8Cgv\0D&\8B\8A\87\8A\8C\8D\90\90\8C\8C\96\96\9C\9D\A4\AB\8F\8F\8C\8Evx\AC\AC\A0\A3\92\93\96\97\B0\B0\E6\ED\99\99\A8\9C\AD\95\A4\94\A2\92\B2\9E\93\91\8F\91o~o\82Yv\99\9Ezx\8E}|i\94\8A\91\90\9C\97\C1\9A\92\93w\87\8E\8D\91\91\98\93\8E\8D\92\92\8B\8A\9A\9A\94\96\93\95\90\91\86\86\8D\8C\87\86\91\93\A0\A3\90\91\95\92sC\7Fw\8D\87\91\8D\82|\8F\90\97\A5\8D\90\9A\98\A0\88sR@G@A\8F\8F\97\95\F0\FB\A5\AD\AD\B3\94\86\9C7\A0i\85[\81`\95\95\91\90\A0\9A\AB\9F\8C\8E\9A\A3\B2\F4\93\8C\99\96\89y\91\90\91\92\8A\8B\95\98\BD\C6\94\94\9C\9E\A8\B6\A5\B6\AC\C9\8F\8Ec\5C\98\98\8F\8F\7F\7F\A5\94\AD|qz\86\8E\7F\8E|~\89\89\83\84\90\8E\8D\8A\AC\B0\8Ao\98\88\A7\9A\9C\89\8C\96N\91\9E\9D\A1\9A\9B\93\99\A4\9C\BF\81m\99\92\99\8D\8A\89\8D\8As^\90\8D\9B\93\90\8E\90\89\A8q\8D\86\91\89\92\90\96\94\8C\9Bg\B2\89\95\91\93\94\99\AF\C9\8A\92nl\8F\92|\86|\7F\A4\9E\7F\87\91\92\96\96\91\93_P\96\97\95\95\A2\A2\90\98\AA\A9\91\9A\91\95\8F\92\8E\91\98\92\A0b\8D\8D\99\99\8C\89\83\83\91\92\85\84\7F|\9E\96\AD\A4\B2\A7\92\92\9A\9Bu\7F\8F\93\93\9C\8E\8F\90\91\92\98\AA\C7\97\A5\92\93\8B\8C\93\95\84\86\93\95\8A\8B\8E\8F\A2\BC\91\95\A0\A4\96\96\8B\8B\8F\8E\92\92\89\8A\8E\8E\8D\8C\98\99\A4\ABnp\8B\8B\8F\8F\8A\8A\8E\8E\8F\8F\89\8C\8E\8E\91\8D\95\8D\B6\87\92\92\96\96\90\91\96\97\87\89\89\913>D6E9>)\89\8B\8B\90\87\96\E1\E8\D0\C5\88\87\8D\8F\91\96\A0\A9\D5\F7\8E\89H6nkik\7F\82\91\8F\A9\9B\DB\AE\C3\A4\B7\9D\9B\9D\EF\E8\A9\A4\AA\AC\9C\9F\8E\8F\88\90;d\8B\8E\82\8A\93\92\96\A1\80\EB\8F\9B\92\A7\9A\95\80\97*\957\88;\7F\80~J\5C\8F\99\8C\96\A6\B0\92\98\96\91\8Cd\8Ci|;\C3\BF\92\94\90\88\88\85\81z\85\94(\93f\8C{\94v\88\8F\8F\96\94\B8\99\A0\93\A6\95:D\7F\87\8D\91\8F\93\96\97\8C\8F\89\89xrGA}{\99\94\D7\9F\88\87\96\92\96\96\94\8A\A6^\96\91\91\8B\93\91\92\93\96\8B\AB?\9E\8E\99\85\93\94\8F\8FLH\9B\9F\A4\B0\95\95\AD\C3\91\A5\8A\90\96\A7\B4\A9\92\97\92\A6\93\A6\95\AB\9D\9C\A8\A6\93\95yzt|\91\91\93\94\AC\BD\A8\B4\90\92\8B\91\8D\96s\AC\8D\92\8F\94\91\91\8E\8F\91\93\8A\8F:I\8D\8E\92\91\A3\95\DA\A1\93\84\98\93\92\93\8C\96\8D\98Y\96N\86\87\89\8B\8E\8C\89\89\82\90\90\98\97\91\8C\B5\AA\BF\A8\A4\A6\88\94p|\8B\90\92\95\8E\97q\B6\89\96\8F\9C\8A\93\9A\9Clfvw\85\8Bqo\91\90\96\93\AF\97hjtr\8F\90\97\9D\97\BF\87q\8A{\92\92\9B\9Dj\91\84\7F\8C}\A1\A5\92\96\97\9A\8B\8C\8E\8F\90\94\91\95\93\8A\A8h\92\88\8A\8C[lon\91\8C\9E\9A\82pzv\88\87wv\8D\8C\93\92\92\91\8A\8A\B6\BC\84\84\90\90\9C\9B\A8\AC{\80\90\97\8E\8C\91\91\89\90\8D\98\80\BC\95\95\A0\A1\A0\A0\A6\A3\82k\8F\8F\8E\8E\95\95\84\84\AA\AE\94\94\9A\99vo\9D\9Brm\8C\8B\8A\89\CD\BB\89\85\93\90\90\91\93\95i}lu\9B\A2\92\92\A2\9D\90z\9A\8F\A1\8B\8D\8E\82\83\90\90\8E\8D\90\8E\84\84\8D\8D\96\97\8B\8D\97\99\8E\8E\9A\9A\96\96\94\94\A6\A5\8F\8E\90\90\84\84\8E\90\82\80\8E\8E\8F\8F\99\99\93\8E\81}\8E\8D\8F\8E\8F\93iz\87\8C\8D\8C\8C\8C\97\97\9C\9B\92\92\85\86\8C\8E\8E\91\8D\92p\85\8E\8E\91\91\89\8A\9B\9D\95\96\90\90\8B\8A\82\80\84\83\93\93\8B\8C\8E\8Fsy\8D\8F\89\8D\92\92\96\96\91\90\85\85\85\87\8F\90\90\90\A6\A7\8B\8E\8B\8C\96\95\8A\8A\8E\8C\94\93\A0\9B\92\92\93\93\8A\89\8F\8E\97\96", align 16
@wmavoice_dq_lsp16r2 = internal constant [1280 x i8] c"bbwymp\80\87sy\9Fqqj\7Frefio\A1\A2\89\8A\A1\9F\98\96\96\94\80O\83f\8Ex\85w\82uys\8E\85\BA\9B\B3\90\A9\87kgjjzzopps\7F{vs\80}{wsm|\82u~y\85T\90crz}{\83|\87\B0\C8\9E\B0DJVWuswt\87\80stfhw{\85\94fmGyjuk\7Fjzdnus\81\80WTtt\97\9Dt\80nuw\86drx\81\8E\8D\92\97^[rrvvrppmsp{{\93\94n\A4j\98n\9Ej\97i\87U3G\1BG\22J-U5\91\86\8C\82\88\86vzv~uTyQjPmjy\7F_^pnZ^mkrmuvv{kkV]\1D\1F}ph<yo\7Ft\85\82vu\94\91z~|\7FZ[qnwv\98\93sp\84\83\81\8CbpIUmsz~{zzz~}\89\8C\CB\D2\A4\B0rr}zwp}x|zvs_`\8D\90\84\83\7F\82\84\86trz{\89\86ooptjvMehsoo}~vyqsqq\AB\AA\CA\C7\DD\CE\C7\B8\B1\A7IZ=]+J3G3H\82\82\8C\89\86\84\A4\A0vo{\88\85\9A\82\9Ejnnraa[^FE}{\8D\8CwdtMoCi4_\22dzZ|Dx+u2p\82\81\C0\BC{v|uyszo\81o\9DU}m}w\8F\98w\80rt\81\88\94\9Dwuss\96\94\A3\9Amfx~Iwjyfz`qTSuszu\9A\8F\9F\8Evzruszr\82c\9C{xztdQc[yp\8B\83\A4\8E\84w\91\85\9D\8Dpmvt\8E\86ln`conqpohb^\83\83sryvxs\AD\94{uy|z|\8C\92NR`]VZ|}y{ij\86\87km\84\8Dd_qrfiq\82b\91ts|usix{YWmlfeuuqz\84\8AMtVcv~{xuo|w\81v?:\8D\87ljmoln\87\8Aur\86\7F\8B\81\8A\82~zyv|y\85\82bU\82{\93\81vp\94\82\88{\94\83qp{v{s\93_unvwpqpqwwxx\9E\85\C6\91\BC\81\C5\89\C3\85\84\8C\8C\8B\9E\9C\DF\D9\E9\E908\22%RTfflnx\8E\88\A9\92\C3\88\BA\8C\B6\C4\BA\9E\9B\8E\86\84}xwaiHKRUQTkmCy+wE|W\81X\8059]b[^]bhh|{\85\85\B6\B5wyrt\80i\86p\83Hw;oT\84\8E\91\B4|\84\83\8Fz\86XUgg\88\8C\83\8Fr\84t9q9yL~PvV\7Fp\7Fa\83d\95[\A3Vzw\80y\80t\8E\7F\AD\8B\A2t\A6k\95g\98k\8Dlrqvt8+ZZii\84\86nkjiRTTTfjOYcc\7F\81rv\8B\9Dt{t{WYnqw~aa\9B\A3\8E\99\8F\92urBC}~\7F\80rqor\7F\85{\84\8F\A2\85\94ilrrnm90mjq\82h\83X\8Bf\A9d\AC\81r\96arpuwmt\5Ck`tZ}ez}\8C}\85z\81\88\99}\87\83\8BTG\81{\87xrgpelys\9Cj{t\83\7F\8B\89\93muw~\87\90uwx\7FLiotx}\8D\8Akh\A2\9B\87\82\7F{\7FyfhTWpsafNRwvx{[irww~\82~\86~\9E\86\85ctd}z\91\8F~ub`yx\98\94\83~\82\81~wWW\83\83\8B\89efhiVS\5CYoiys\89|`Td`zwkl]`OR\80{lj{x\96\96\8F\8CyxacOPttXZ\80\83ea\8C\8Cuttv\89\87d[sp\86ykcxzz}|~\88\8DY_gwgtz\8B}\89\98\AAyz||ba\89\8C`\5Csq\88\88\80\84z|\97\9Edky\83\83\9Ew\82qrrm\94\82g_\7Ft\89xglaa\85\80qm\88\80}|vvzyec\9D\98\8A\86|sqe{p|ntq\80ywn|q\80Crvr{myf{8tuopc|rpOrXpqsu~\7F\82\84{zohofpf\81v\81s{|\82\85ru}\7Fpu|}wxutihnn}|vt|{|y\85\84oo||xwtt\86\82rtpqmotv_b", align 16
@wmavoice_dq_lsp16r3 = internal constant [1536 x i8] c"TR_^}\83bf^]hh\7FqWM}rm^^[ji\A8}\A3x\80dwclaljVU\80}OIgf{{tuTL\87\83\85\85\81\82}{sr^aOQss^]\80\7F~}|oirhumn|}vuknjn]]\95\94vwon\93\9D\8F\9C\86\88vyjkiirSr.j5nSk^ig\5CZmj\AC\A0rnmnnmZbbmfba\5Cddef{u|bRPuspnmlkodsixhiSR_`mxHGahEJcfvu\89\85\8E\87inyy}zrp\97\BAs\84godhcehi\12&8ALSU[egln\90\87~ysqOPvuuuu|ss~q\82tpjliMLLPmm}\81\82\85tv`VmcfETEkgrqNvRrT\81EpNb`gY\89`oia]]eiii\8D{f][OWQfcml^\5C|{\82\86dkGK\5C[^hkSjeqrzzrrv|gj_tZ]khmktvLHXX\84\84\8C\8DttZQo_\8Ba{`pdnlpt\85\8CpxPU77UT}^ohtgpV]Tcb\B4\B3\C5\C5\A9\A3\95\92\82|tsL/$\0B+\1CB5RPfcw{\B0\C9qxpogijn\91rpYx]{h\83{qoamRjKhgsx|orroqi\22!??ijzz3)`\5C}}vvvwqqo\B4l\B2k\ABn\A0i\88fuLOZ\5CPXX]{|zz\83\80{z\97\9Elk\81\80wwacrxy}\97\9DRY_`\80^\82_\95q\95x\7Fsqm\A7\ABSPTOjjpnkl\82\8BQXkjppwvrplidbxtzu&%HIv}nxr~\87\8E\8B\8Evwww\9C\91NK^^pnqqelbhgmuv\A7\A7\84\84tlvo\95\88UJ_\5CqpJEhk`duygiggnjoeRH`\5C\84\82xytq\8A\8Bhg\83\83DE\5C\5Caa\92\97z\84a_utst\8B\86nn|\81dnV[dft\88XZ\89\8BgrruonRShfacaa:8TTSzLip~x\86pxlnr\80IZHLbd_`efelv~^fQS\8A\8C\83\82Xdp|ijz{yyrrLlIS]_nobcggipblr_ubxtts\E7\EE\96\92|~szuyppJIHJ<=>=UUeeCE23SSnnvqpo\C7|\B8s\B0u\A5x\8Astr4t$k1cHj[khi\8C\8A\8D\87\9A\93\A6\9F\8B\88ts\82w\B4\9D\B7\95\88ywronh\81q\9Ao\94l\84iujor#cAq^nbokkjjn\80\87\A2\AF\8F\9Bstmm\A8\9Bpm}}~z~|op\80`\A0M\97MyPr^kgahet8OJS\5C_hj?DLMnk`ZUSa`tn.*gdzxfehhjemb`=C#H=`]XPQLqn\90\8FXY]^_`de\88\84\A6\A0\94\93stPN\82\81xl[U_[hf\97\93jmnn@EDC``Z\A6a\80cxhymvimz\8An\8FKaS^Y^fg\88\8EgnSYce\8A\8Axz\A8XiZmknojigfDHfh\5CfAKY^jjSJ]UIBjfd\5Cca]ce`tp}xXX``,b]shtgkpqkk]Sic]T\7F}\8D\8Fuvjg~y\89{{r\93\8E\7F{gnY[y|BGDE`ariDAEC`^\83\82{yoh\82y__HJXXih\87|nbro\9F\9Eoqhjgl^k79svyzooacjow~;>op|}V]dnv\91q\84x}ppesN\95Qroylpklhh^`TS\87\84GEXVdb><QPZY?BYZ{tlcZV[\5CAAXXTOsm{occ\86\88y{\7F\89TXhk\80\82JEYYvp\8F\84\8D\83qqcfhiusdc\83~ZX\91\90\80\7Fpr\83\85UTvw\97\98uuni\A2\8Ctk\8C\86|zqqkn|\85bgckmqppsiRM}z\85\84vxqqeXTPac[[^^edyV\8Blj]gcpllkqSif}}rsnplm]pqy}\83eekmoobfu~PTkmST`a\84\88pv^]yvcbfgz\7F\80\85vhfXd^hfstfi\8C\8E\87\82ZXde^VppYy\5Cemlnpc]\81rmc\83wfagggt|es_ie^[ddqZ^V\5C\5Cuojgjiscn[khQZlqpqqr]eefe~]ghiuj|khwl\85hohj", align 16
@dequant_lsp10i.vec_sizes = internal constant [4 x i16] [i16 256, i16 64, i16 32, i16 32], align 2
@dequant_lsp10i.mul_lsf = internal constant [4 x double] [double 0x3F756038004CD903, double 0x3F57F700B541FD00, double 0x3F4F8420174FB4CB, double 0x3F528E5BAAD0129C], align 16
@dequant_lsp10i.base_lsf = internal constant [4 x double] [double 0xBFE5AAA89104ED86, double 0xBFC8CA115D2A9E93, double 0xBFBAEE589492D90B, double 0xBFC715CADA45460B], align 16
@wmavoice_dq_lsp10i = internal constant [3840 x i8] c"}mT7\223mpv\84zfNP\84w\84\84}\83m[\83\83\88\88\89\89\8C\91\8C\8Fu\88zjm[sw\85ugP7u{f]P\8BtF'_Ygqpz\87\F4\E5\D7\C7\B5\A3\96\92\90\8F\AD\AB\9A\9B\9A\97\94\91\8F\84\8AtUu^lukt\84v{wXC1_T_ygJF\B3\A4\8D~kpw_g\95\8B\94\90\93\94\8D\97\85\8E\81o\83l\80zly`s\8At]iss{\81j\88\B4\93\82l\8D\83v\88\9B\B0\9C\87\81\8C\92\8E\86\8D\82mP4&\12/v\86\9B\8DdNHYO`\5Cb\85oS[H:ispx\91\7F\87qqiiUE=s`t\91\9F\AA\AF\AF\A8\9B\8CxT4P\91}\7Ft~\80le\C6\E3\C8\B2\9F\93\94yX.m|~~\89\93\93\81k\A4\94\7Fu\86xotxgbIB=Fst}~dM\BC\A2\8Cr\80\8B{\91\A5\A4\86mdlv\7F\82\9C\B6\BE\AD\A7\A5\A2\9D\98\93\96\A4\B3\B7\AD\9B\8C\88\86\87z\5CE\8C\84vl\80\8A\84{\7F\94\89\96\95\8B\7F|\82\88\8ApF)%\84\8C\81}\82oN!3\A1\8D\88xz~nWjUD0Qpq\87}bUfPdWVt\8E\85nB0\98\8B\87\88{\80tYf\80cS=i|x^ISNdz|\80\84\90\89tfK\90\88\7F\8C\7F\9A\90vcZZYKDS{gY\C6\B4\9A\8Az\88x\8Avy\88niUoehy~\8Bscekn{~\7FsXm\A4\86\8A\8Axy\82\CA\C3\CA\C7\C9\B5\A4\9F\94xt\C2\C7\BA\AB\9A\8E\89\85\89\81p\95\86p\95\8Ax\86wfkSOrw\7F\80\80\90\94\A5\9B\A1\96\87ztsxcPx{|oYFlv_B5i~}iSo\81\C5\BF\C5\CE\D5\D8\D0\C4\A9\85m\7F\A4\86yc\5CRG\83y][\88is\8Cxn\96\A4\8BlWQ]\5Cht\85r}~o\88n\9C\93\85q^vxs}|~\7F\86t\83\A1\9E\A6\9D\96\96\90\8D}\B9\A9\8E\8C\8F\8B\83\86\8A\B3\BC\AA\96\86\8C\90\85\7F\7F\96\B1\CC\B8\C0\C2\BE\C1\B1\9Erq\8At\89\87\84\83\7F\86x\93\A3\87\85\89\88\88\85\87\89x_I.0oaa{\8B\82mL4H==}\7F\84wwZB)@\9C\8F\81\83j:\19csz\88\81\84\86{a5\1Br}rx{zk]9/\85\80\8A\8D\83\91\84znO9\1EI\99\90\96\84U;\85}\82sd`\94\7FoV=&nylc\9D\8FiMtvs\83zz\85w\86lV=\81\A5\8F\7F}iYoaUqcbu\95\83ejX_Ow{x}mQd\C9\B7\9C\8Ast\8Dw\81iL<nc\5CR\96\9C\81_Essq\86}vaC`\CB\C5\AB\97\85}\8F\83x\86iP3<\8B\86\81\A0\DF\DB\DB\D4\C5\AD\9D\92\84p\A4\90wf\5CLI^\84p|r]\5CSIEc\81g\BC\A3\8E\84\7FeR;\8C\8DoJ.iqc\7Fz}^?pteQx\88\86\85\BE\E0\C1\B3\9E\92\8F\8C\88\98\A1\84xp^rf\5Ct\81\C2\C4\CA\D3\D4\D2\BE\A9\98\A6\A6\91o[\84\85\80\88\82v^HJ\5CVY\5Cj{~dV\89u\5CLhjr\85m\CC\C0\A6\94\8A\80oQvcO\92\A9\8D{f\83x\7Fi\88\CC\AA\9A\83\91\87wu_@S\8D\88v`c~s]bf_ijrw\80\83yb\8B\95wmVi\81\86wh\A9\B9\9B\8Dzk\7F\88sUlW~f\80\88\81}c~\9E\85\8B\84q[k\8Dz\80\A1\82\7Fixvjz\8C\A1\A8\BB\B8\B0\9E\90\8C\7FoY\82\84i\86ydz\81n\80s\81t\84vrw\8A\85\84\BC\B7\9F\A1\93\86\8C\84qT\A7\93\84|m\85y\84\80tybe\91\81\80\81|p\98\9E\88\A1\8B\A5\9E\8E\8B\8An\7F\94u~vet\9B\A8\9A\80x\98\96\8D\8C\87\7Fom\86h\85np\84roWDYkyy~~\81x\94\A9\A3\AD\B2\B9\BC\B2\A3zaVue\8Av\8E\9B\8B}r\83\8A\99\95\A3\96\8F\8D\9D\A1\8A\98\86yzmn|\97\AB\C4\A8\91\8B\93\97\92\8B\86\A9\B3\AA\AF\B2\B1\AD\A5\9Ax\97vk}\81\85\85\88\8Bw\8D\9F\97\A0\A5\A8\A9\A2\98sow^uy\7F\7F\84\88\86\99\93\8E\8E\93\9F\9F\9A\93nj\8B\87\8F\8E\93\92\93\93s\85\97\85\8D\8E\97\98\93\90s\84\90\83}~\80\82\83\88\8Av`G0\1A+\82}}\86zb6\1CTMIm}\85pC0\8D\81~qpv\8F{Y6GIK\83{{~mQ\1F\0F^nmw\80\84za\5CI2\1B\16h\85\85w^0\22\A8\A0\9A\97\82\93\85Z6G{ji]u\8F\84kE-N\B2\A9\96\8B\8A{t`E1 qgp\9A\97}O<\98\A0\9A\9B\89\8E\97|XB;^W_w\A6\9Az\5C\8A\84|raazcb\DB\BF\B0\A5\9F\99\83\82w[3\18)\90\9C\93\8B\8BzQA|ohZ^b\8Axp[?AYKNj~k[UE_ZTlx\9B\8BdNxnm[MI\90\82\87pXA>\8E\81~\AA\9A\96\83ytd\5CSV\83zbkfK6&u\82\92\8BukVB,\1Ea\80\81td;l\7Fw\8B\81\81|jO1\9A\BE\A6\98\85{\8D\95{Y=F\8F\84}~\88q\B1\A6\8D{mli]\89u\93{cUmb[K\81yfN5Z\95\88\86\87\90\88~Zr\98\89\98\8A\80\85sk\81cN<\81}v\93\8Dw|n[O@ju\86o\A4\8F{qt_L8\93\9F\8CmST\8C\87\7F\81{htc[WPnqy|j\AE\AE\98\8D\84\86~|\8C\BE\F0\D7\D4\BD\AD\9E\90\89{aOfnoZK~|\86yh\91\7FdMAxv{jW)Dwjsmw\89\E8\F1\E1\D9\CA\B7\A9\9C\91\A1\92\7FnakXrlj\8D\F4\D8\C0\AC\A3\94\8F\90\90\80\7FmYMD|xy}}^0Gtqhx\8E\89\85\81sRDxc\85\86|\82jl\A0\82oY\81|w\86x\95\8Ft_W\8E\84z~rlkP\8D\85{\89|u_E+>brtpxzcW\A4\91{c_vi~efxqn\5C\8B\86~\94\C2\F1\DB\DD\D7\C8\C1\AE\97\7Fhz\88qjn_Nj\83\A3\D9\C7\C2\AF\A4\9B\8E\8A\8B|X9\A1\A1\91\8B|t\7Fn[b~hqb^^\91\8ArZK\82ukcZwbVe\94\85gS|\83\8F\A8\A9\85nu\8B\95\93\89|jP\8A\C2\A3\8Ewj\82\88}irWqeYlfrZ5.it~zvz|f\5C\C3\A7\A0\90\9A\9A\84vaXHbxpbOurk\B9\BF\BF\BC\AF\A5\99\8FwaZYx\97\88qcp\8Dy\90z}q\85o\5CExbNm\97\91\9D\9D\97\8F\82nx\BC\9F\8Dwpmb~pSn\A9\8B\7Fi]{\8D\91uj[N{ke}u_G\93\B0\99\94\85\87\7F|jO@s`lsji\7FsZbiQ\90\87u}~hb\A5\8A\88p\95\94\83w\90\BA\B9\CC\CA\D1\C8\B6\A1{\99\BE\BD\C7\C2\BF\B0\9D\93ygwbdxja_~\89\82fuu\5C~rev\83\DB\BE\A7\99\97\90\8C\8E\8Frf\97\98\84xpx\7F\83\8Az[\8Fvxrh|u\94\8Eu~a}lt\8E}~j[\A9\D0\B2\9E\8A\7F\87\85~eS\93\82}uruxg^\95\88\81\8Bv\85\85\93\98~\84wa\84\81r~pk\94}pr|}\81\87\8By\9D\97\83\8Cv\93\88ysi\9F\A7\B9\BF\C4\BE\B0\A0|jhz\82r\98\90\86\88\88\98\9F\99\83rt~\81\81|mW\83ks\82k\90\83~\A2\B0\AF\B4\B0\A0\8D\86\86\88\7Fl\A1\A2\85\8D|p\80\82sn\8Ck\9B\86\83\9C\89zjt\7Fv\A1\96\AA\A7\98\8B\B1\CB\B0\9B\8B\82\80\81\84\89w}gn{kxleqk\A0\9A\A0\A6\A9\B0\A8\9CsZAsshxpm|\83{dm\B9\9E\8D\84tw\8B\82w\9C|\8A\7Ft\8D\80\85vs\B4\95\97\87\82\93\81uZPw|\80\84\82\80\87pa\8E\A1\A7\A5\9A\8E\88\87v\8D\C1\AC\9D\98\94\91\92\8D}\93\A5\A6\95\85{z\80\83\80\C1\B1\AE\B6\BA\C5\C1\BF\AD|\90\A2\85qq{\80\81\82ubyz\89\84nao\82\80\B0\97}~\86\82y\7F\82z\97\8Eojy~~\82\86\94\A7\BA\99\81z|\80\82\80\94\AC\CE\B2\AB\B6\A9\B4\AC\9C\85\A4\AE\A0\9B\A3\A3\AC\A9\9E\84\96\93\8E\98\8C\8C\8C\86\87\89\9E\A7\AC\A3\99\A9\9E\92\93\96\A1\A2\AC\99\85\8C\90\88\87mTex\81\86\85\88\89\8Fpr\9D\93\8D\88\87\85\87\8Ay\9A\A1\96\95\9A\97\90\92\90ou}}\82\83\87\89\8F\94y\8D\92\83\8A~vow\82x\87\91y\8C\86\8A\89\83\86s\89\84\89\8B\8A\8A\8B\91\95\83\95\93\85\84~\83\86\82\85nbT\8Dk\A9\A9{}~v\D2b~\84\8A\80\8B\9C\9D\8C\8E\81_\C0\B2\B6\BA\B7\9F\87\86\90|d\E4\CB\A1zh\8B\9F\86\A1y~\C0\98\DA\B4\84\84wc`aP5\86\8Ffr\85r\7FSM~Uknr\C2\BA\8Bt\93h\81\8A~\85m\90s-\82a\9F\9B\9D\A2\BD\B9\A8\A3\97\97\8E\87\90\93xJ\C0\BA\95vGT\8F\9C\85\B2\A8kw\95ip\B6\B8\9Evv\94\80\B1\AB\98\8B\87~\D1\AB\96{d\BE\9E\A6a\88{\88\8B\80\8A~y\84\83\80_<\A8\7F\8C\D0\A1mfw\A2\96\89k\C8\9C\88\88\80g_J[\DC\AD\98\8A\8B\81\8C\88zR\B4s5Zykc\94t\8Bd?\BF\9B\82\81\A3\9Bb\AF_\97\7Fk||tXG\A4\94`9Y}uM?\A2\90qm\89\86\86\82\95\AE\9E\9E\82Q\1CC\8E\8B\81d\C2\86D\AF\83g\88\84z`wRs\F9\D7\A8}\8B\C7`\92{\88\B3\8E\89\B5\A6jVzj{\83jw\81\BD\BC\93~ner\93\88\84jH\AF\94c\82\99}\88{w\93\AA\9D~\D1\BC\9E\98eY\8E\83\A1\96\94|Yw\8D\89\83gQU@\AF\81y\89\90\8E\91w\CD\94P\A5\8A\8F\89\A7\A5\94\95n\EA\D9\AA\A7\98K\8C\9B\9B\AF\81\88\86\88\98\A1\83\8Cy[O\FF\D1\84\93xr\B1\80n=Y\83}\7F]W\A7s\BA\A2kj\86\A2\97dOC\97t\82\8E\A2\99\9B\8FzU\CA\BB\87}\9E\9Bg\81J\95\82b\81~\94\98\99\85v^PF/Z|v\8F\B8\9E~FRoq~\87\AF\8D\CB\A6{{\86\85qo\80L\80\B1\97\B2\86}xx\C1jb\86eVer\88\7F\86\C4Vi\91\80w\89\8A~\E6\A1\8D\80\81\88XSgv\B2{Ye\A1\AD\A5\93\82{\AB\9E\83Q2\B1\A2\88}sR\AD\C3\A8\82ppy\98\94\A7WR\A1\8E\93bY\A8\8Aa\9D\84rJ~\A1\8D\87{D\89|vp\5CA`\BF\B5\A1\97\8D\91\81fao\90\807\80s\9B\81\B8\A7\93\83\8D}!\7Fo\7F\83}\82\89\82y\C3\AC\B1\B0\95ba~j\A8\9F\90\B9\9C\97\B6\9E{]ntbc}\88\8B\94Op\95\80\93\88vi\A6\98us\5C\80\94\84\AA\8F\E2\BEz\C0\A5y\8F\90\AE|q|z\87\22]voo\88{tc\C3\8Bcrf`lopq\81\AC\89i\8B\9AVql\84O?x]\A2Zg^_u\7Fhd\8E\81]\1B\C4\99q[eZTD\8A&v\94Wg}m`\98d8\1F>\B0\81|sg\5Cdy\82}\80GRG\98Ukt\8A\85gt\8B\90H%v\8Dm_V\5Cy\A7\9Ch\5C[zrY=\AC\80_gTeXTt}l>Jl\A0\8F\BD\A4[s\90+tOjlJSWZ=GLL_\82Y^rke\91\A1\93\8F\A3\93\81eIol]h\BA\8DcYp~oq\98)\9Fs\83|ues\82|W;\B1?UmtgD\91\84\1Dw`YuZ\B5geoa`\C7\ABqx]we@87?ZieV-\88\B3\8EfsrqlyT\17}LfwkxhI\B1Sr\80U\98~\89s\95m\A3\85nb6=_o\87gX\A4s\BBzb\81\84_VGw\92o&CfdB\94\89g\91_#U,\88fols\88ixnl\93p\A9t\92Qx^T]aZwf[0\93\CC\97\94\A0\90\83\90\AF\9E\85\D4\A3\AC\98\97p\94\97\91\B3\A0|\A4\A4\A7\A1\8Dx\83\8D\C6\B1\A9\9C\92\9C|\B9\A4\C3\B5\C1\C9\93\94\A8\A5\9F\A2\94\96\94\92\9D\9E\95\A4\81\A0\D6\AE\A6\9A\B0\92\8D\9B\8C\8C\A9j\9B\A6\A2\86\C1\9D\9B\92\C4\ABk\B1\AE\A3\9B\93\CB\A2\92\96S\9D\AA\B4\B2\9F\9D\97us\B7\AA\B4\AE\96\B1\AD\88\B5\C4\B8\A4\A8\A5\94\AF\A8\D1\BD\9Fr\9D\9E\8D\A8\AA\8B\AF\80\97'\80\9A\9F\A1\94\B4\83\A5\9F\83\A3\96\AE\B2\B2\C6\AC\8A\B8\BF\8F\A4\A1\A3\D2\AB\9B\A8\96t\B6\AA\91\98\8D\8B\BF\95\A0\CA\91\A9\91\B5\94\B7\C5\A5\92\AB\A1\99\9D\AA\A4\95\B7\A7\F6\EB\A2\90\AA\98\AD\96q\87\9C\9A\9E\94\B2\9F\A1r\B4\9Ct\A3\A4\A1z\A4\A4\B7\87\87\90\B6\A0\93\A3\98\A9\B9\9F\B1c\D3\A8\A7\D7\AA\96\9D\9A\B0\9A\8F\A3u\B2\A0\A3\A5\A4\A6\AE\88\9F\A9\98{\C7\95\A9\8C\9F\D0\9B\A1\BAz\86\A7\AB\91\94\B0\94\89r\A0\A6\99\A2\9C\A4\AC\9B\94\9B\B6r\96\9D\9A\8C\9F\A6\A0\A9\CE\B6\91\9D\A5\93\CA\83\9A\C1\A2\A2\95\A7\9D\BF\BC\95\CD\93\A6\96\96\9F\99\AB\A0", align 16
@dequant_lsp16i.vec_sizes = internal constant [5 x i16] [i16 256, i16 64, i16 128, i16 64, i16 128], align 2
@dequant_lsp16i.mul_lsf = internal constant [5 x double] [double 0x3F6B64CA1E49364F, double 0x3F46E8529950AE9E, double 0x3F6B36071458BAAA, double 0x3F50EECBEA46A8FC, double 0x3F6A21BA1EEF5A47], align 16
@dequant_lsp16i.base_lsf = internal constant [5 x double] [double 0xBFD9A692C08C4B62, double 0xBFB3896AC7EB125C, double 0xBFD9C13C54EE4659, double 0xBFB9D6C03B5EF236, double 0xBFDA19DEC5A99D5F], align 16
@wmavoice_dq_lsp16i1 = internal constant [1600 x i8] c"\8Ey\8Dpcw\5Cz\B7\9BzbKNUel\86\80{sZO:I\7Fj<ak\8D\A3\82{\88\9C\C9\BD\CC\CE\8CtE<u{j|[?\96\90nP?pPFL?rV\93\A5\89}x\8Cseec\A6\9E\9Eh~\83\86\8FyfI$S\84qL&\14\84oNI3\83l\83iP\94\8AeA/sV2|\81tYUW@oJ'sqpSKz\7Fr[j}\82\83lO\88pn\93\A4\90|y\EC\DA\BE\A8je\A0\AC\BFq\8Af[mdGUpwy`3@~\87rL\22h\91\7FZ8\83\8E\83\5C{f\80i?\18_sW1\9C\AE{iX:7\8DwcKQ\89urP8w[j\A6\87rT&]t\81gaWas\B8\C1\AD\9DuXr\97y~oK\81\85\82kGs\5C\80lxdaoPwz[r^\95\81\88rX\84nUtceGGn\8C\8E\83nzbS\7Fdj\82{rgqW\8Ctq\8C\A1\AB\91\81s\B2\9E\A1\A0v\C3\D1\DD\E4cS\8C\86\8C\7F\BA\A8\BB\BBkrdooh\82\83t\80\80h@\121~kE8\99\9A\8EnqYx]I\BE\ACw`9\15<~zQcu\9F\8DlXx\90}Y,^\93\83]Q=\85qU/>{yW5Zx^LF0}g]@#\8C\81X/\1E\7Fh:3g|dfL/sW6.M\B6\DA\AE\A3\91\8C~YiR}weE:}k\AC\91\80\8Aqm\5CZu]S]\84}fC\94\A1\83n`cJw\5C6TQn\98xj\83lJDckyaxeN\84n\7F\A4\86o\9F\CC\BD\B2\9E\B7\92\90\89{j\88l\87u[\A3\87qw\B1\86zy\84m\9D\83qsWWd\5Cx_;\92\8B\81e\87zewdpXcvZ{}kybIhPpOVz`hQkZ]p\96\8CmsqVILp\82oepT{a?\86smM\80\8Dw}el\93w\86\95\96\7Fs\88\F4\DC\D2\BDi\8A\AB\9C\AEu\A2\85\92\8Ds]wbzrj\9A\91\A2k\83\BD\A5\98ek\81r\8Bt\BA\BA\A1\B4dY\89ttj\82\C2\C4\CFn\9C\9D\8A\95f]\9F\8Axm\84iz\87\94\80ULf\A8\9A\8Dud}j>e\92|fA\19\0Fx^.\15^\95\80sU\5Cw]F4\1E\A2\97{[P~pT/!\8ArI<W~\D3\AE\9E\8F\81jA\1F\85w_4c\AD{`w\CE\B2\7Fh<=C\98\88h?S\85\82\5C@-x`5\1E\82\80gJ;#\87rM\1E9l\82{ZW\8F}]6<\85vOW_sYoXA|fF(/\94\83{\82h\7FmW8y\93{ykU\B2\ED\C8\C1\AA\8BvdKn\85yQIDx\C3\9D\8D\83\7FfkX<\88qdE-\80i]MC\83t\95\B8\9CsU#-p\80lDIov]\BB\A2\8B\88sT9%\83\85}bU\8As\5CV=t`F4nsm\87hX\88\9FzmsznbF_pQDUZ|eW8YmRbds|fLX?oN*NfnG@\83o}hkW{\81\83cUD\93\89fcKx\9B\8Em[\84m\83\8Dq\88w^\98\80\7FfO\9F\86oNbmPsV3?gtV\AA\95{\87\B2\9F}rq\BD\E2\CB\CA\8Cut^F\80g^\AE\95vbSTjs\9Dx^_\83pK`Jya\90u_xZ\8C\8Anw]7\5CrrW\97}doRS\A0\8BrV8Z\8AhmeMv\8C\8E\8F\94~yf\81koqO:o[x^?sby^caNx\5CD\AD\94zrmWR\84\E5\C0\B0\9B\89t{as\84sVx_\87te\88lmJd}sp\9E\90|\86rSI\93xxh\96ztnh\C0\B7\AE\86ptx]ye]nZy]\93\98zs\99\AB\A1\8E{_tr]qY`M]q\AE\B4\8F\8AtVd\87jgy\95sgy_R\95yu\5C]or{\D1\C4\C1\B7}fk\82hs[qgcrVDlno\9F\A2}q}\EB\EA\E1\D6cJvy\7Fh{\9E\80\7Fq`t\88\9EdP\8A\9B\A6v\8Fs}rw\89\85\88\8B\97\BC\AC\AE\AD\8A\A1\9E\9E\9By\C6\C2\D3\CAdZpnzd[z\80\87em\7Feri~\A0\93\8Fm\8A\8E\9E\A3q\AE\B9\BC\CEp\9A\A6\B0\B7el\8C\8C\8Fj\87\82\89~grs\80~kV\15sKu\8BaAi@\BFej\8Bkb\DA\84hI\88\A5Tv\96o:\82kc\88\8484f\88EN\A3U\AD\94\8AUEj\80\85\9Bh[\958hge\AC`9ha}\C5\A6k\A9/xg\96Yc\8B\A2eE\89\9E~\BF\AD\7FO\9B3\83pVJ\87=rQ}upH\AFH\7F{\8E\84Nt\9Eoy\8FlfY\14\C2QckA\96gN[E`httgikun\82\1CXg>HU}~\8D~\B2yf9.|a[Y\8A_b\8Fc\A9{\8CwqR\8Cvp[\5C\F1\86Y_pN\A7\8C\91ydm\CD\90[dqg\8E\AF_uy#y\7F\9F\81U@Ktbg\7F\81BDn`VOd\9C\85\5C\87`\A4\84y]\A3\86[\D0hM~t:\88v\84Q=IsB\81{oU*\B2\86l\84\9F-\9Di\A4d^<`9\9Aifgr`\0C[wsC\5C@^=jj\A5i^bD\1E\92\82k\AD\8CfZ\A3j\B8d5D\83\5CioD\99\BAeR0c\93z\88\B0``h\84\A7\95\88\8A\90ax\5C", align 16
@wmavoice_dq_lsp16i2 = internal constant [960 x i8] c"\17\0Ckwn\CD\D6\D4\D0\C9f_Eukv{v{yR:S_T\8B\91\99\A1\A9fd\8Aye\81\82\8A\96\8BLhVp\85q[?I\81\C7\C1\B6\B5\ACweS^L\A1\9D\98\9D\9EnZy`O|krXI\98\89ykc92dQJs`H1ESD(5g$\83kT@\EC\F5\F2\E7\D5_mXEn\E4\DD\CC\B6\AA\81navhbLbK=]Mq[Ht^j\86v\B1\BC\A9\A2\99\A3\95\83\83\84\B1\A3\AD\A8\9Eq\83kqd\84\8F\83\86\8E-$yqf+_TC8LRD0!7:;+ABUBQ^fR6!^qoY<\22\8AxeeVXI7rs\5CJ]M{ZucO;aKazh\E9\ED\E3\D0\BE\D1\E6\E9\F0\F1\C3\C5\BC\A7\93\CC\B9\A8\A2\9D\8E|w{junQy{Jt|wx\B2\A8\92\84}fhinrhRNdVxfi]\8F\7Fl\80jX\B1\BD\CB\CF\D7e\83w_I\95\8B\87\93\99\A0\A7\A5\AE\B1xm\86\8C\91\83\82\8E\8B\A1\8F\9E\94\91\91{\8E\84tf(\17ORT\1AS\8D\82zA.+YV\1CKPObTA/\1A,1ped^XLK0RhdK-\0FcS?\22\1EB7^vqzj[D<\87zhM;RfT>.\5CJ7RG\91\86v]KO>SA7[^@FbYunWa\D2\DF\E1\DF\D5SgVeU~jQOi\D8\DB\D9\C7\B3VNs\8A\87fTW;.\DB\CE\B8\A7\9E\C9\BC\A5\91\87Wq\8E\98\9B\BE\AA\99\95\92\CD\D0\C9\B9\A7TI|h`LXcJPn}zcplTF\82\89\A1\98\88win[eJ`oe]\99\95\85|faxe]KQ@o^kO:\BC\CE\D7\DD\E8\A3\AF\A5\96\88gj{\85\84\A8\B8\BF\B7\AAnuZb]hWzb\7F\81n\7Fq}\86vf\8C\84\BA\C7\CA\C6\BC\95\93\AF\B9\BAu]cp]k\8A\8A\81\80`\81hv\86\91\88sy\81\8A\9B\94\86x\AA\97\96\91\8A\A8\AD\B9\C2\C8\90\9F\AC\A8\9Cyy\8A\AD\A8~o\8C\8Bu\95\85\8E\89\82\8F\8B\9E\9E\92w\80y\84\91z\88\9F\99\8D\85\85\82\81~xL2\95m\5C\9BvZB\84uW\9Cuwf,S[mIjT\1D7\82pQ\F1K([YCpZ\95QH\80ZG\1C\A0I\9D{\8Fl?XFQaKo\95q`NhS\B3_ijA\82B3v\5C5DiK\B0\97s^KD_\DCg}i+_'rA\91\87!\8E\8Ag4RUunCfJ*>v\90yR9fCK,\81`K?X0t\87^UfBzMiz\98x8ZSdZ\80?Pg~ugP\C1*Iu][_\80d\80\A2Fx~I{cc[K\87Q}oM\0D^NU\BB\9D\0B\8Fmcw5\8DRzD\84Y\88wXK1\AEwF\8AylN4hZ`]]rZN.:>rE,\A2g:b\8DS\89_wIoQ.~o{kuzy6jh;n\94a\9BaS\85aG9[:4O\7F\98m`\5C\91k\95f=}=\AA8YMj&\93`Mi{USu?E~\85]k\5CMs_og=Wgb\9B^oPN6u\80\82cmjcq\85sYAJp\7F", align 16
@wmavoice_dq_lsp16i3 = internal constant [768 x i8] c"Fdy\81\84\84\C9\BC\A5\91\90\88p\7Ft}\82\81|\87\87\92\81\80\A2\9E\90\97\87\81gVoqpzZ\8B\81u~\81\8E\91\A7\93||\E6\D1\BD\AF\9C\8D@PVly\81,Osqs\80\85jOm}\7F\AB\9C\84mgsjF]\91\8D\80\94}zknu\92\91\80nbo\ED\D4\B9\9C\8B\85T7\1AMr\7F\AC\AA\AB\A8\A2\8FRRLFh~\11_mox\84QJ9~\8D\83n\7F\A2\94\81{\B1\AC\9B\97\91\86\90{ZBm\82R\7Fg{\84\83\7Faa\8E\8C\80\9F\86\88{qu\83\8C\9A\A9\9E\86`m\96zixx\96\98zw}{~|kdq\F8\E9\D8\BD\A0\8E:\18\0DMo\7F\B7\BD\B6\9D\8C\83`S;+Iw\DE\C4\AB\92\81\80 \0D5er\7FweFFn\7FMV\A1\94\82v\C7\B7\AA\A7\9C\8D\1Es\8E\85\83\82eg\B5\B0\98~B,I^o\80\96zdehv=nWL]}\BE\AA\96\86\87\81pY?{\8D\84\AF\9A\88\8E\8C\84u\8F\81\80\88\84\A8\8Epq\80\80\9B\A9\9F\90\8B\83=\88\90|p{VQhy\81\82\A0\7Fv\96\97\86~sy\84\86\83\89\94\90\8B\8C\86jfiZWq\86\81\80yy{\99\97\81\8B\8E\86\96\8E\8D\94\95\8Ddy\85\93\96\86\A3\9E\93\84\8D\84\8E\7F\8D\88\88\84\E8\DA\CD\BD\A9\92\F3\E0\C9\AB\93\8A\E0\C4\A9\A2\9A\8C3\14;oy\80\CB\C5\C1\B1\A2\91K(/z\82\81fM/Sy\81olT8?r\D3\B5\9A\89~}\D5\C6\BA\A2\90\8A)-Znv\82S?\82\A4\99\80\C3\A7\8E{qw\13*iqx\842?1@p\80rZ\84\AB\A2\86\81\80kSJn2tmx\80\84^;Iou~\C5\AA\A6\99\8A\84A0m\85\83\80\AA\A3\AC\9E\8A\82B~\93\A0\97\84*\81u_[xa\A5\A4\8E\85}\A3\8ErXazhM\8E\8F\80x\88\A0\BC\A9\95\82qSUfr}\A4\A9\8Exz|b\98\84i\5Cu*G}\9B\97\89^iQkv~T8{ulz\AE\B3\A6\89vy\82g\93\98\86|\94\7F^u\90\86\81jf_jv\93\9D\99}gu\9B\80q\84xz\B5\97\88~zznomlx|a\82gYk|\B3\9E\9E\8E\83\80\8Eosz~}\91\91\86s\81\80\82\8Bpcy}Ohwfi{ty\88}~\7F|dzwow\9F\8C\8B\80\8A\83idt\80\87\84\9F\8E\9C\93\8C\86\82\96\81~rx\8A|\92\83mw]s}\83}\81}yewrx\A3\9A\97\99\99\8B\A6\99\96\85wy\9F\97\80\82z{\93\9A\90\85\80\7F\81\83\86\8C\94\8A\8A\88x\83\87\83\96\8C\89\90\81\81", align 16
@.str.15 = private unnamed_addr constant [39 x i8] c"Invalid frame type VLC code, skipping\0A\00", align 1
@frame_descs = internal constant [17 x %struct.frame_type_desc] [%struct.frame_type_desc { i8 1, i8 0, i8 0, i8 0, i8 0 }, %struct.frame_type_desc { i8 2, i8 1, i8 0, i8 1, i8 0 }, %struct.frame_type_desc { i8 2, i8 1, i8 1, i8 2, i8 0 }, %struct.frame_type_desc { i8 2, i8 1, i8 1, i8 3, i8 2 }, %struct.frame_type_desc { i8 2, i8 1, i8 1, i8 3, i8 5 }, %struct.frame_type_desc { i8 4, i8 2, i8 1, i8 3, i8 0 }, %struct.frame_type_desc { i8 4, i8 2, i8 1, i8 3, i8 2 }, %struct.frame_type_desc { i8 4, i8 2, i8 1, i8 3, i8 5 }, %struct.frame_type_desc { i8 2, i8 1, i8 2, i8 3, i8 0 }, %struct.frame_type_desc { i8 2, i8 1, i8 2, i8 3, i8 2 }, %struct.frame_type_desc { i8 2, i8 1, i8 2, i8 3, i8 5 }, %struct.frame_type_desc { i8 4, i8 2, i8 2, i8 3, i8 0 }, %struct.frame_type_desc { i8 4, i8 2, i8 2, i8 3, i8 2 }, %struct.frame_type_desc { i8 4, i8 2, i8 2, i8 3, i8 5 }, %struct.frame_type_desc { i8 8, i8 3, i8 2, i8 3, i8 0 }, %struct.frame_type_desc { i8 8, i8 3, i8 2, i8 3, i8 2 }, %struct.frame_type_desc { i8 8, i8 3, i8 2, i8 3, i8 5 }], align 16
@wmavoice_gain_silence = internal constant [256 x float] [float 0x3EF3C00240000000, float 0x3EFA1FFD20000000, float 0x3EFEE00060000000, float 0x3F033001A0000000, float 0x3F06300020000000, float 0x3F085FFF40000000, float 0x3F0A2000A0000000, float 0x3F0B900020000000, float 0x3F0CE00040000000, float 0x3F0E2000C0000000, float 0x3F0F3FFE80000000, float 0x3F10200020000000, float 0x3F109FFF40000000, float 0x3F110800A0000000, float 0x3F11700040000000, float 0x3F11D00020000000, float 0x3F12280000000000, float 0x3F12780020000000, float 0x3F12C80040000000, float 0x3F13180060000000, float 0x3F135800E0000000, float 0x3F1397FFA0000000, float 0x3F13D00020000000, float 0x3F13FFFF40000000, float 0x3F14300000000000, float 0x3F146800A0000000, float 0x3F1497FFA0000000, float 0x3F14C80060000000, float 0x3F14F7FF60000000, float 0x3F15280040000000, float 0x3F1557FF40000000, float 0x3F158FFFE0000000, float 0x3F15C000A0000000, float 0x3F15F7FF80000000, float 0x3F16280040000000, float 0x3F166800A0000000, float 0x3F16AFFF40000000, float 0x3F16F7FF80000000, float 0x3F174FFF80000000, float 0x3F17B800E0000000, float 0x3F18380000000000, float 0x3F18E7FFE0000000, float 0x3F19E80000000000, float 0x3F1B0FFF40000000, float 0x3F1C880060000000, float 0x3F1E17FF40000000, float 0x3F200FFFA0000000, float 0x3F214C0020000000, float 0x3F22C40060000000, float 0x3F248FFFC0000000, float 0x3F26DC0020000000, float 0x3F2997FFE0000000, float 0x3F2CEC0000000000, float 0x3F309E0020000000, float 0x3F33700000000000, float 0x3F36B40000000000, float 0x3F3AEDFFE0000000, float 0x3F40070000000000, float 0x3F435CFFE0000000, float 0x3F47CB0000000000, float 0x3F4D0F0000000000, float 0x3F51910000000000, float 0x3F54CD8000000000, float 0x3F58B50000000000, float 0x3F5C9C0000000000, float 0x3F605E0000000000, float 0x3F6210C000000000, float 0x3F63660000000000, float 0x3F649F4000000000, float 0x3F65C14000000000, float 0x3F66E0C000000000, float 0x3F67F94000000000, float 0x3F68F14000000000, float 0x3F6A0E8000000000, float 0x3F6B154000000000, float 0x3F6C1C0000000000, float 0x3F6D0B4000000000, float 0x3F6DFB4000000000, float 0x3F6EDF8000000000, float 0x3F6FBA8000000000, float 0x3F704A2000000000, float 0x3F70AC0000000000, float 0x3F71108000000000, float 0x3F716F0000000000, float 0x3F71C6E000000000, float 0x3F721FE000000000, float 0x3F72774000000000, float 0x3F72CD0000000000, float 0x3F73202000000000, float 0x3F736D8000000000, float 0x3F73BB2000000000, float 0x3F7405A000000000, float 0x3F744FE000000000, float 0x3F74956000000000, float 0x3F74D74000000000, float 0x3F7517E000000000, float 0x3F75554000000000, float 0x3F75930000000000, float 0x3F75CF4000000000, float 0x3F76096000000000, float 0x3F7642E000000000, float 0x3F7678A000000000, float 0x3F76ADC000000000, float 0x3F76E1A000000000, float 0x3F77154000000000, float 0x3F77448000000000, float 0x3F77736000000000, float 0x3F77A2E000000000, float 0x3F77CD6000000000, float 0x3F77FA4000000000, float 0x3F78272000000000, float 0x3F78510000000000, float 0x3F78768000000000, float 0x3F789D0000000000, float 0x3F78C16000000000, float 0x3F78E6C000000000, float 0x3F790D0000000000, float 0x3F792F4000000000, float 0x3F7952C000000000, float 0x3F79754000000000, float 0x3F79996000000000, float 0x3F79BB4000000000, float 0x3F79E2C000000000, float 0x3F7A07C000000000, float 0x3F7A2F4000000000, float 0x3F7A5A2000000000, float 0x3F7A87A000000000, float 0x3F7AB42000000000, float 0x3F7ADF0000000000, float 0x3F7B094000000000, float 0x3F7B33A000000000, float 0x3F7B5F4000000000, float 0x3F7B8A0000000000, float 0x3F7BB62000000000, float 0x3F7BE0A000000000, float 0x3F7C0B4000000000, float 0x3F7C352000000000, float 0x3F7C5B8000000000, float 0x3F7C832000000000, float 0x3F7CAA4000000000, float 0x3F7CD28000000000, float 0x3F7CFAC000000000, float 0x3F7D21C000000000, float 0x3F7D4D0000000000, float 0x3F7D7B0000000000, float 0x3F7DA8C000000000, float 0x3F7DD68000000000, float 0x3F7E0AA000000000, float 0x3F7E3DE000000000, float 0x3F7E754000000000, float 0x3F7EABA000000000, float 0x3F7EE50000000000, float 0x3F7F220000000000, float 0x3F7F5C0000000000, float 0x3F7F982000000000, float 0x3F7FD1C000000000, float 0x3F80076000000000, float 0x3F80265000000000, float 0x3F80478000000000, float 0x3F806B4000000000, float 0x3F808DB000000000, float 0x3F80B27000000000, float 0x3F80D65000000000, float 0x3F80F93000000000, float 0x3F811A6000000000, float 0x3F813AD000000000, float 0x3F815CB000000000, float 0x3F81805000000000, float 0x3F81A2B000000000, float 0x3F81C5E000000000, float 0x3F81EBB000000000, float 0x3F82127000000000, float 0x3F823A5000000000, float 0x3F8260B000000000, float 0x3F8284D000000000, float 0x3F82AA0000000000, float 0x3F82CDD000000000, float 0x3F82F04000000000, float 0x3F83148000000000, float 0x3F833BB000000000, float 0x3F8363E000000000, float 0x3F838B2000000000, float 0x3F83B26000000000, float 0x3F83DA0000000000, float 0x3F84009000000000, float 0x3F8426E000000000, float 0x3F844F3000000000, float 0x3F84781000000000, float 0x3F84A23000000000, float 0x3F84CF7000000000, float 0x3F84FF7000000000, float 0x3F85321000000000, float 0x3F85636000000000, float 0x3F85989000000000, float 0x3F85D41000000000, float 0x3F86109000000000, float 0x3F8651C000000000, float 0x3F868EA000000000, float 0x3F86CC5000000000, float 0x3F8708D000000000, float 0x3F8742B000000000, float 0x3F87822000000000, float 0x3F87C34000000000, float 0x3F88079000000000, float 0x3F884E1000000000, float 0x3F8899E000000000, float 0x3F88E65000000000, float 0x3F89315000000000, float 0x3F89866000000000, float 0x3F89E32000000000, float 0x3F8A431000000000, float 0x3F8AA72000000000, float 0x3F8B0E5000000000, float 0x3F8B80A000000000, float 0x3F8BFB2000000000, float 0x3F8C730000000000, float 0x3F8CF39000000000, float 0x3F8D7E1000000000, float 0x3F8E06E000000000, float 0x3F8E958000000000, float 0x3F8F284000000000, float 0x3F8FC12000000000, float 0x3F9037C000000000, float 0x3F90988000000000, float 0x3F90FEE800000000, float 0x3F91668800000000, float 0x3F91D9B000000000, float 0x3F925B8000000000, float 0x3F92E33800000000, float 0x3F93884000000000, float 0x3F9432C000000000, float 0x3F94E91000000000, float 0x3F95C18800000000, float 0x3F96AF1800000000, float 0x3F97B64800000000, float 0x3F98E2F000000000, float 0x3F9A415000000000, float 0x3F9BD83000000000, float 0x3F9DA7C000000000, float 0x3F9FC06000000000, float 0x3FA115E800000000, float 0x3FA2A07800000000, float 0x3FA48D6800000000, float 0x3FA6BB9400000000, float 0x3FA981B400000000, float 0x3FACCDDC00000000, float 0x3FB062BE00000000, float 0x3FB2C25200000000, float 0x3FB56AC600000000, float 0x3FB8A6DA00000000, float 0x3FBCBC6400000000, float 0x3FC1195400000000, float 0x3FC4984F00000000, float 0x3FC9792B00000000, float 0x3FD0BEDB80000000, float 0x3FD9206880000000], align 16
@aw_parse_coords.start_offset = internal constant [94 x i16] [i16 -11, i16 -9, i16 -7, i16 -5, i16 -3, i16 -1, i16 1, i16 3, i16 5, i16 7, i16 9, i16 11, i16 13, i16 15, i16 18, i16 17, i16 19, i16 20, i16 21, i16 22, i16 23, i16 24, i16 25, i16 26, i16 27, i16 28, i16 29, i16 30, i16 31, i16 32, i16 33, i16 35, i16 37, i16 39, i16 41, i16 43, i16 45, i16 47, i16 49, i16 51, i16 53, i16 55, i16 57, i16 59, i16 61, i16 63, i16 65, i16 67, i16 69, i16 71, i16 73, i16 75, i16 77, i16 79, i16 81, i16 83, i16 85, i16 87, i16 89, i16 91, i16 93, i16 95, i16 97, i16 99, i16 101, i16 103, i16 105, i16 107, i16 109, i16 111, i16 113, i16 115, i16 117, i16 119, i16 121, i16 123, i16 125, i16 127, i16 129, i16 131, i16 133, i16 135, i16 137, i16 139, i16 141, i16 143, i16 145, i16 147, i16 149, i16 151, i16 153, i16 155, i16 157, i16 159], align 16
@.str.16 = private unnamed_addr constant [12 x i8] c"size <= 160\00", align 1
@.str.17 = private unnamed_addr constant [22 x i8] c"libavcodec/wmavoice.c\00", align 1
@wmavoice_gain_universal = internal constant [64 x float] [float 0.000000e+00, float 0.000000e+00, float 0x3EB9FFE920000000, float 0x3EB9FFE920000000, float 0x3EE3FFFA20000000, float 0x3EF1400140000000, float 0x3F03E001A0000000, float 0x3F09F00180000000, float 0x3F14F7FF60000000, float 0x3F1BBFFF20000000, float 0x3F21AFFFE0000000, float 0x3F25540020000000, float 0x3F29DC0040000000, float 0x3F2E7BFFC0000000, float 0x3F3181FFE0000000, float 0x3F345C0000000000, float 0x3F37860020000000, float 0x3F3B0C0020000000, float 0x3F3E080000000000, float 0x3F409E0000000000, float 0x3F42DF0000000000, float 0x3F4596FFE0000000, float 0x3F48C10020000000, float 0x3F4C2FFFE0000000, float 0x3F50030000000000, float 0x3F52228000000000, float 0x3F54A68000000000, float 0x3F56C18000000000, float 0x3F594B0000000000, float 0x3F5BBA8000000000, float 0x3F5F190000000000, float 0x3F616B8000000000, float 0x3F635C0000000000, float 0x3F650C4000000000, float 0x3F675D8000000000, float 0x3F6A214000000000, float 0x3F6C638000000000, float 0x3F6F094000000000, float 0x3F7112E000000000, float 0x3F72E00000000000, float 0x3F74B76000000000, float 0x3F76C98000000000, float 0x3F79522000000000, float 0x3F7BEA4000000000, float 0x3F7E4AA000000000, float 0x3F80C1A000000000, float 0x3F82ACD000000000, float 0x3F850D2000000000, float 0x3F888F4000000000, float 0x3F8B79A000000000, float 0x3F8FB58000000000, float 0x3F91CC0800000000, float 0x3F94735000000000, float 0x3F977F8000000000, float 0x3F9B765000000000, float 0x3FA05B6C00000000, float 0x3FA4200800000000, float 0x3FA78ED000000000, float 0x3FAACD3800000000, float 0x3FB0549600000000, float 0x3FB5A4E200000000, float 0x3FBC4CBC00000000, float 0x3FC330E800000000, float 0x3FCC67C600000000], align 16
@wmavoice_std_codebook = internal constant [1000 x float] [float 0xBFC7AE8180000000, float 0xBFC34078A0000000, float 0xBFE6A1EE60000000, float 0xBFD22EB1C0000000, float 0x3FEC40B340000000, float 0xBFE93C6EC0000000, float 0x3FAF3C0C20000000, float 0x3FD7F6AD80000000, float 0x3FAB914F40000000, float 0xBFED1D4B60000000, float 0x3FE1653000000000, float 0x3FCC12DFE0000000, float 0x3FD248E040000000, float 0x3FC3CD8120000000, float 0xBFDD1ECD40000000, float 0x3FDB481B20000000, float 0xBFEBCDA2C0000000, float 0xBFEE797020000000, float 0xBFE1999BC0000000, float 0x3FEA0AC3A0000000, float 0xBFD6948560000000, float 0x3FCEFDDA80000000, float 0x3FEA417EC0000000, float 0xBFC843F600000000, float 0xBFDCC53B00000000, float 0x3FDFF1C760000000, float 0xBFCFB75A80000000, float 0x3FE3241E60000000, float 0x3FE76CDF20000000, float 0xBFE20F9D20000000, float 0xBFE4379B80000000, float 0xBFDCFD8280000000, float 0x3FD2408960000000, float 0xBFD5B313C0000000, float 0x3FD0D3CBC0000000, float 0x3FC583E000000000, float 0xBFC057E240000000, float 0xBFE5A25740000000, float 0xBFDD475E60000000, float 0x3FEDA31C60000000, float 0xBFE2BFA2A0000000, float 0xBFED3E8140000000, float 0x3FC29F5160000000, float 0x3FE664CB60000000, float 0x3FCED37C20000000, float 0x3FE6186DC0000000, float 0x3FC0236C20000000, float 0x3FD7CE78A0000000, float 0x3FE79EFD80000000, float 0x3FE26F3F60000000, float 0x3FC7C7FFE0000000, float 0xBFE3AB4520000000, float 0xBFC7453080000000, float 0x3F79BE4CE0000000, float 0x3FC90EED00000000, float 0x3FD7982CC0000000, float 0xBFDFA73F80000000, float 0x3FEE55E4A0000000, float 0xBFA0FCB500000000, float 0xBFE866C0A0000000, float 0xBFE3B9B880000000, float 0x3FD5713280000000, float 0xBFCB960740000000, float 0x3FE5668E40000000, float 0x3FEFDF0F60000000, float 0xBFEE7B99E0000000, float 0xBFC4E1E720000000, float 0xBFC0DBAD40000000, float 0xBFE41DF120000000, float 0x3FD847A9E0000000, float 0xBFCA4F3BA0000000, float 0xBFCB765780000000, float 0x3FDDCAA760000000, float 0x3FEE140580000000, float 0xBFE078C860000000, float 0xBFD2CB9660000000, float 0x3FE42C7320000000, float 0x3FE3901080000000, float 0xBFED7E8EE0000000, float 0x3FD796E160000000, float 0x3FC7FD3F60000000, float 0x3FD0E6E220000000, float 0x3FE8202B80000000, float 0xBFEFD1FA40000000, float 0xBFE7591260000000, float 0xBFA9C17220000000, float 0x3FD7F43420000000, float 0xBFCCB2BFE0000000, float 0xBFBA319400000000, float 0xBFE515AF20000000, float 0x3F8B23DD60000000, float 0x3FD2002A00000000, float 0x3FE5A2EA00000000, float 0x3FE9870DA0000000, float 0xBFA995CC80000000, float 0x3FE581F760000000, float 0x3FEB0B73E0000000, float 0x3FE92E2980000000, float 0xBFDD69E3C0000000, float 0xBFE9127D40000000, float 0x3FC547F9A0000000, float 0x3FD56E7E60000000, float 0x3F5FD9BA20000000, float 0xBFD7915BE0000000, float 0x3FD1968940000000, float 0x3FDF2E48E0000000, float 0x3FD5A30DC0000000, float 0xBFB84241C0000000, float 0x3FB939A7C0000000, float 0x3FDAA5EFE0000000, float 0xBFE73CD580000000, float 0xBFE6D97B40000000, float 0xBFD4732E00000000, float 0xBFEF1CA9E0000000, float 0xBFE6AB7560000000, float 0xBFA92A9500000000, float 0xBF97182240000000, float 0x3FE54EA4A0000000, float 0x3FE740A6C0000000, float 0x3FEC010A60000000, float 0xBFEFC70A80000000, float 0xBFD0A593A0000000, float 0x3FC4047D40000000, float 0x3FE5DBDF80000000, float 0xBFDD977860000000, float 0xBFEC983D80000000, float 0x3FD6BBADC0000000, float 0xBFE3C04860000000, float 0x3FEC95EC00000000, float 0x3FECA8E500000000, float 0xBFD9A58B40000000, float 0x3FAE7E8460000000, float 0x3FCD8090C0000000, float 0x3FE33D2740000000, float 0x3FE61F3C80000000, float 0xBFDFA92E60000000, float 0x3FB6A25D80000000, float 0x3F9E186980000000, float 0x3FDA464560000000, float 0xBFEA047F60000000, float 0xBFE1BC44C0000000, float 0x3FE5E64B20000000, float 0xBFE0DDFA80000000, float 0x3FC0289120000000, float 0x3FE6C9A140000000, float 0xBFCE25C820000000, float 0xBFED888500000000, float 0xBFD3DE3FC0000000, float 0xBFE23ACD60000000, float 0x3FE9B821A0000000, float 0xBFDBDC2B00000000, float 0xBFE201D7E0000000, float 0xBFDD355480000000, float 0x3FE7130BE0000000, float 0xBFEC25F840000000, float 0x3FB4CCCCC0000000, float 0x3FEA7ACE60000000, float 0x3FDE6FBD20000000, float 0x3FDDB2A6C0000000, float 0x3FE710BA60000000, float 0x3FD7C18720000000, float 0xBFEDF97240000000, float 0xBFCC1D7560000000, float 0xBFD97E3080000000, float 0x3FE543B500000000, float 0xBFE0E820E0000000, float 0x3FBB628460000000, float 0xBFCF9FFD60000000, float 0x3FE008A040000000, float 0xBFDEE11DC0000000, float 0xBFAEC7EAE0000000, float 0x3FEE4C5B80000000, float 0xBFE98A41A0000000, float 0x3FDA6B0DA0000000, float 0x3FB2B3EDE0000000, float 0x3FED3F5FA0000000, float 0xBFEA53EB40000000, float 0x3FC337E2C0000000, float 0xBFD95F7C60000000, float 0xBFD91D6D00000000, float 0xBFA79E5A00000000, float 0x3FC588B120000000, float 0x3FA6F71A80000000, float 0x3FDFD6E040000000, float 0xBFBC563EE0000000, float 0x3FC525E560000000, float 0xBFDAF5E840000000, float 0xBFD21FF2E0000000, float 0xBFD6FD5460000000, float 0xBFEEA1A2E0000000, float 0xBFE1FF4120000000, float 0xBFEF9DE6A0000000, float 0xBFEC9B1520000000, float 0x3FCBE58600000000, float 0xBFD8B9FDC0000000, float 0x3FE8A8A1E0000000, float 0x3FE61140A0000000, float 0x3FE70F51A0000000, float 0xBFDE7EBB00000000, float 0x3FC86783A0000000, float 0xBFE8613D40000000, float 0x3FDDA84380000000, float 0x3FC198F1E0000000, float 0xBFE1EB7EE0000000, float 0xBFBFB2BBA0000000, float 0xBFE94343C0000000, float 0xBFE4AC1F40000000, float 0x3FAB5BD520000000, float 0x3FD7156A00000000, float 0xBFA5BDD760000000, float 0x3FE52706E0000000, float 0xBFE5EF30A0000000, float 0xBFEBF9B140000000, float 0xBFD2D31340000000, float 0x3FE9FC3F80000000, float 0x3F8EE136E0000000, float 0x3FEBDFEFC0000000, float 0xBFE37EB6C0000000, float 0x3FE76B8B60000000, float 0xBFDF3D74E0000000, float 0xBFE2205780000000, float 0xBFEA93B3A0000000, float 0xBFDE793DE0000000, float 0xBFDD76D980000000, float 0x3FD8CB5BC0000000, float 0x3FC1998060000000, float 0xBFE612CAE0000000, float 0x3FB3B773A0000000, float 0xBFC22938E0000000, float 0xBFC548A9C0000000, float 0xBFE76F2E80000000, float 0x3FB8A3A4C0000000, float 0xBFE67E06A0000000, float 0x3FD9EE1BE0000000, float 0x3FE128F5C0000000, float 0x3FC62E87E0000000, float 0x3FE3B3C820000000, float 0x3FEC7CD680000000, float 0xBFE8BEA0C0000000, float 0xBF98305DA0000000, float 0xBFC37C2440000000, float 0x3FEC686620000000, float 0x3FD29E98E0000000, float 0xBF9B174820000000, float 0xBFDA024700000000, float 0x3FBA5C5F80000000, float 0x3FEFA2CAA0000000, float 0xBFE12133C0000000, float 0x3FDF99AA60000000, float 0x3FE70E5600000000, float 0xBF97FD8280000000, float 0x3FEDAC7DA0000000, float 0x3FEC7AA260000000, float 0x3FE00372E0000000, float 0xBFE10EEF20000000, float 0x3FD1C0A060000000, float 0xBFD72C55C0000000, float 0xBFCC86E7E0000000, float 0xBFE4A8BF40000000, float 0x3FDFBF09A0000000, float 0x3FE38C1BA0000000, float 0xBFD82FDFC0000000, float 0xBFDA180D40000000, float 0x3FED0E1500000000, float 0xBFEF20E200000000, float 0xBFEBE310E0000000, float 0x3FB4CDB7A0000000, float 0x3FE492E840000000, float 0xBFEF663C80000000, float 0x3FD3B62C80000000, float 0xBFD85D3560000000, float 0xBFC1151620000000, float 0x3FC90DF160000000, float 0x3FED20B1C0000000, float 0x3FEAE20040000000, float 0x3FE94258E0000000, float 0x3F8B0F6AE0000000, float 0x3FEA84CAE0000000, float 0xBFE7DEDAE0000000, float 0xBFDF8DDA40000000, float 0x3FE19320E0000000, float 0x3FCD84E400000000, float 0xBFE21A6F80000000, float 0x3FDC1B8660000000, float 0xBFD136A840000000, float 0xBFB94AF500000000, float 0xBFD223D920000000, float 0x3FD79D0200000000, float 0x3FE5B4E760000000, float 0x3FB22AA1A0000000, float 0xBFC147E8C0000000, float 0x3FD2820600000000, float 0x3FE62D6460000000, float 0x3FDD43FE60000000, float 0x3FC93C6000000000, float 0x3FE70C8260000000, float 0x3FE2BEEE60000000, float 0xBFE7173100000000, float 0x3FD73ED520000000, float 0x3FE358B1E0000000, float 0x3FE2C3E540000000, float 0x3FEF70CFE0000000, float 0xBFE0EC9180000000, float 0xBFCBE279E0000000, float 0x3FEC9181A0000000, float 0xBFE60A9360000000, float 0xBFDB6C8B40000000, float 0xBFB81205C0000000, float 0xBFEB85C8A0000000, float 0xBFC6548240000000, float 0x3FDA6DA440000000, float 0x3FE60D5840000000, float 0xBFEE33E780000000, float 0x3FEB1C62A0000000, float 0x3FC06C6DE0000000, float 0xBFCB3CEEA0000000, float 0xBFD019F800000000, float 0x3FEB092EE0000000, float 0xBFEB00BAA0000000, float 0xBFE25814A0000000, float 0xBFB58BF800000000, float 0x3F95A964E0000000, float 0x3FE6E8F080000000, float 0xBFD9083560000000, float 0xBFE0B0B3A0000000, float 0xBFB63FBBE0000000, float 0xBFE5779640000000, float 0xBFEDF1C540000000, float 0x3FC8835DE0000000, float 0x3FE627D240000000, float 0x3FE566ECA0000000, float 0xBFCC6D0D40000000, float 0x3FE598A220000000, float 0xBFEB85A500000000, float 0x3FE1EC1E40000000, float 0x3FE22A23C0000000, float 0xBFE1903860000000, float 0xBFEBCA2760000000, float 0xBFE0D81F20000000, float 0xBFDA2C01E0000000, float 0xBFA5F47FA0000000, float 0x3FEC5EB320000000, float 0xBFE708A8C0000000, float 0x3F8B341E20000000, float 0x3FE77B15C0000000, float 0x3FDA24E5A0000000, float 0x3FE99D96E0000000, float 0xBFE091E640000000, float 0x3FD0373F40000000, float 0x3FEE9CDC40000000, float 0xBFB74FD6E0000000, float 0xBFEA95DD40000000, float 0xBF96BB12A0000000, float 0xBFD80214A0000000, float 0xBFCC67DFE0000000, float 0x3FDD32E7C0000000, float 0x3FE136FE20000000, float 0x3FBB738E60000000, float 0x3FE0A7AEA0000000, float 0xBFD15058E0000000, float 0xBFC9A6E760000000, float 0x3FC83A7540000000, float 0x3FE03C9040000000, float 0xBFE0D117C0000000, float 0x3FD511F0C0000000, float 0x3FB14573A0000000, float 0xBFEEA6F600000000, float 0x3FE8F8C000000000, float 0x3FC97A1C20000000, float 0xBFDEFE2600000000, float 0xBFE41D3EE0000000, float 0xBFEB00C300000000, float 0xBFE3206200000000, float 0xBFD64BCF00000000, float 0x3FC5B03E20000000, float 0xBFEBA54C60000000, float 0xBFEE1374C0000000, float 0xBF9ECB74E0000000, float 0xBFD86E6540000000, float 0x3FD41055C0000000, float 0xBFB2CBFB20000000, float 0x3FE0DED280000000, float 0x3FDEE49B20000000, float 0x3FECF0A800000000, float 0xBFEB2237C0000000, float 0xBFE7A7AA60000000, float 0x3FD71437C0000000, float 0x3FE614C440000000, float 0x3FD78D8EC0000000, float 0xBFBE719B40000000, float 0xBFE2936600000000, float 0xBFEAA2F280000000, float 0xBFEDBF9840000000, float 0x3FEDA92A40000000, float 0xBFD6E81460000000, float 0x3FD992C060000000, float 0xBF7713AD60000000, float 0xBFD4360060000000, float 0x3FC70880E0000000, float 0xBFE9CFA260000000, float 0x3FD92CCF60000000, float 0x3FE7742BC0000000, float 0xBFDA9D0200000000, float 0xBFE72F5120000000, float 0x3FEEA29620000000, float 0xBFEC9287C0000000, float 0x3FDE6C6580000000, float 0x3FC637F7C0000000, float 0xBFDAC996C0000000, float 0xBFD35CC000000000, float 0x3FE412F6E0000000, float 0x3FE90624E0000000, float 0x3FDFD7BA60000000, float 0x3FC1CD7060000000, float 0x3FE23E5960000000, float 0x3FE76F9DC0000000, float 0xBFDD18DF00000000, float 0x3FD3578A20000000, float 0xBF93F91E60000000, float 0x3FEC378680000000, float 0xBFAD7E88A0000000, float 0x3FD1798100000000, float 0x3FDA81C2E0000000, float 0xBFE01CAE20000000, float 0xBFB460CC00000000, float 0xBFB57D2840000000, float 0x3F7D66ADC0000000, float 0xBFC601A360000000, float 0x3FE0382A20000000, float 0x3FE0ABA5A0000000, float 0x3FE436C160000000, float 0xBFB98B71C0000000, float 0x3FD03FA6E0000000, float 0xBFE917BFA0000000, float 0x3FC67D0AE0000000, float 0x3FCB099E00000000, float 0xBFE5AA4760000000, float 0xBFD6551500000000, float 0xBFE3AF9A80000000, float 0xBFB878A6E0000000, float 0x3FD64E2B00000000, float 0xBFEF9CA3A0000000, float 0xBFD411DBC0000000, float 0xBFC3B43D80000000, float 0x3FC35AD960000000, float 0xBFE7CA9480000000, float 0xBFDAFADF20000000, float 0x3FE64A46E0000000, float 0x3FE1E130A0000000, float 0x3FE1E2C780000000, float 0x3FE281CF80000000, float 0xBFDFED6FE0000000, float 0xBFC581E040000000, float 0xBF7EA89760000000, float 0xBF63660E60000000, float 0x3FE8136E80000000, float 0x3FED130BE0000000, float 0xBFEFD898C0000000, float 0xBFDAD9F4E0000000, float 0x3FDA9667C0000000, float 0x3FE0D30CE0000000, float 0xBFE9363900000000, float 0xBFE5E63840000000, float 0xBFCC348700000000, float 0xBFE24DF8C0000000, float 0x3FDF7210C0000000, float 0x3FEFB547E0000000, float 0xBFCFE10060000000, float 0xBFEB718220000000, float 0xBFE3FA52A0000000, float 0x3FE4F8AB00000000, float 0x3FDF6B26C0000000, float 0xBFE396F660000000, float 0xBFE51042E0000000, float 0xBFE5377C00000000, float 0x3FE13FC000000000, float 0xBFD9B5AEA0000000, float 0xBFB5A75CE0000000, float 0x3FCE281BA0000000, float 0xBFEAF9A6C0000000, float 0xBFE0D22640000000, float 0xBFC7D0A680000000, float 0xBFD5E0B920000000, float 0x3FD39AC360000000, float 0x3FE9CE8540000000, float 0x3FE4FC3D60000000, float 0x3FAE0D0240000000, float 0x3FE6E19120000000, float 0x3FE523A4C0000000, float 0x3FE473D5C0000000, float 0x3FC0B313C0000000, float 0x3FC7DABE20000000, float 0x3FEB3D9CA0000000, float 0x3FDC8D1960000000, float 0x3FEEE98FE0000000, float 0xBFE71059E0000000, float 0xBFB00357A0000000, float 0x3FEE9ED7C0000000, float 0x3F9EECBFC0000000, float 0x3FB4709740000000, float 0xBFE55B7D00000000, float 0xBFD41FDDE0000000, float 0xBFDB78B7A0000000, float 0xBFD1E4E6A0000000, float 0x3F9BF9C620000000, float 0xBFB79EBEA0000000, float 0xBFE7B2B340000000, float 0x3FE404F6E0000000, float 0x3FEA573CA0000000, float 0x3FDFAEA740000000, float 0x3FE90B5240000000, float 0xBFE67AE9A0000000, float 0xBFE61CD600000000, float 0xBFE1E50A40000000, float 0x3FE3527A20000000, float 0xBFEC4E50C0000000, float 0xBFECE8CF00000000, float 0xBFD5996B80000000, float 0x3FEA934040000000, float 0x3FE83AD5C0000000, float 0xBFE658E000000000, float 0xBFA3FFAC20000000, float 0xBFACE7AB80000000, float 0xBFEB1B4360000000, float 0xBFE2F96E20000000, float 0xBFB7275680000000, float 0xBFE22B9D40000000, float 0x3FD60C4DE0000000, float 0xBFC1184C20000000, float 0x3FDD978D40000000, float 0xBFE26BC620000000, float 0x3FC979BFE0000000, float 0xBFEB442840000000, float 0xBF7410F940000000, float 0x3FED6BFCA0000000, float 0x3FC66EA000000000, float 0x3FECE40640000000, float 0xBFEA46B6A0000000, float 0xBFC97D84A0000000, float 0x3FE73B42C0000000, float 0x3FE5909D00000000, float 0xBFDAA81DC0000000, float 0xBFEF3FA4C0000000, float 0x3FEF73C700000000, float 0x3F98DC9820000000, float 0x3FE412D340000000, float 0xBFECDA89C0000000, float 0x3FBEF0BF20000000, float 0xBFE6B9E280000000, float 0x3FEDB8B6A0000000, float 0xBFBF38A3C0000000, float 0xBFDA258500000000, float 0xBFBC3A10A0000000, float 0x3FEA4A72E0000000, float 0xBFD05C0BA0000000, float 0x3FD2FE9B80000000, float 0xBFD134EFC0000000, float 0x3FC6996B80000000, float 0xBFD6F516A0000000, float 0x3FE31F7300000000, float 0xBFD71BB8C0000000, float 0x3FB0CD74A0000000, float 0xBFCA086BE0000000, float 0xBFCB4812C0000000, float 0xBFEE0E7360000000, float 0xBFD22C40E0000000, float 0x3FEEC9A140000000, float 0x3FEED592E0000000, float 0xBFBAE6B840000000, float 0xBFCE56FFC0000000, float 0x3FE610D7C0000000, float 0xBFDB987400000000, float 0x3FD62C6260000000, float 0x3FE6D13300000000, float 0xBFDCB0E5E0000000, float 0xBFE422EA00000000, float 0x3FD5C80C80000000, float 0xBFD665F520000000, float 0x3FDF765BA0000000, float 0x3FE42A23C0000000, float 0xBFDAF48800000000, float 0xBFE42BE6A0000000, float 0xBFE8E89EC0000000, float 0x3FDDFCF3E0000000, float 0xBFE9E173C0000000, float 0xBFA16A4880000000, float 0xBFCE08E160000000, float 0xBFB3DF5D00000000, float 0xBFEB7049A0000000, float 0x3FDA0678C0000000, float 0xBFDEB8F140000000, float 0xBFCBF89820000000, float 0xBFE0E31500000000, float 0x3FD442D8C0000000, float 0x3FE22FD320000000, float 0xBFDDE310E0000000, float 0xBFEEF4B400000000, float 0x3FE0F97680000000, float 0xBFE01BF5A0000000, float 0xBFB28C5860000000, float 0xBFE69C4980000000, float 0xBFEA0B1DE0000000, float 0x3FDFC475E0000000, float 0x3FE479E7C0000000, float 0x3FECC61300000000, float 0xBFEE763800000000, float 0xBFEFA90260000000, float 0x3FCEA86500000000, float 0xBFD3526520000000, float 0x3FE0122B80000000, float 0xBFC0AF0380000000, float 0x3FD1B912E0000000, float 0x3FEBE64700000000, float 0x3FB75CF240000000, float 0xBFD049F940000000, float 0xBFEDFB2CC0000000, float 0xBFEE2B0640000000, float 0x3FE058CB00000000, float 0xBF8DC69F80000000, float 0xBFE99B4FE0000000, float 0xBFB51FC4C0000000, float 0x3FE02C6CE0000000, float 0xBF932EBE60000000, float 0x3FD8F1E080000000, float 0xBFC6C89B00000000, float 0xBFDCD34580000000, float 0x3FED8767E0000000, float 0xBFC29B6B20000000, float 0xBFED702C40000000, float 0xBFE2948DC0000000, float 0x3FE9079A20000000, float 0xBFE40C75C0000000, float 0xBFD93F5720000000, float 0x3FD1D3AE60000000, float 0xBFEF928E00000000, float 0xBFDFB33120000000, float 0x3FD4E73E60000000, float 0xBFEF3B9060000000, float 0x3FE7D082C0000000, float 0xBFEF359360000000, float 0x3FE0D69B20000000, float 0xBFD8B68060000000, float 0x3FD34DEC20000000, float 0x3FD979C420000000, float 0x3FE6906040000000, float 0xBFEE7E06A0000000, float 0x3FDD836A80000000, float 0x3FE8655A00000000, float 0x3FE1DAC260000000, float 0xBFE1B56540000000, float 0x3FEECA0A00000000, float 0xBFE0C93640000000, float 0x3FEE7707A0000000, float 0xBFACF6BE40000000, float 0x3FEBAFBC20000000, float 0xBFCCEC7CA0000000, float 0x3FDF8DE2A0000000, float 0x3FE93723E0000000, float 0x3FE41E0600000000, float 0x3FE256C720000000, float 0xBFE95D69E0000000, float 0x3FDA4B44A0000000, float 0x3FEE4A4F40000000, float 0xBFC7F455A0000000, float 0xBFD3E11120000000, float 0x3FEEB7C140000000, float 0x3FD452A420000000, float 0xBFEF7CE960000000, float 0x3FEF7C32E0000000, float 0x3FAF9D4D80000000, float 0xBFEEB27AA0000000, float 0x3FE052CE00000000, float 0x3FE59E94A0000000, float 0x3FD5E8F6C0000000, float 0xBFB7827FA0000000, float 0x3FD85DE580000000, float 0x3FD8ECE9A0000000, float 0xBFE42E9AC0000000, float 0x3FC2513300000000, float 0xBFAAEC8D60000000, float 0xBFC7900820000000, float 0x3FBAF2B660000000, float 0x3FDB1001E0000000, float 0xBFCDB3E140000000, float 0xBFEE711300000000, float 0x3FD26F7A00000000, float 0x3FE157E880000000, float 0x3FE155DE60000000, float 0x3FB37707A0000000, float 0x3FC5D7BA60000000, float 0x3FBD652BE0000000, float 0x3FD222EE40000000, float 0xBFDAC8DE20000000, float 0x3FAF6F4BE0000000, float 0xBFECEBA060000000, float 0x3FD15614E0000000, float 0x3F95D6BEC0000000, float 0x3FDA7B6780000000, float 0x3FD25C4220000000, float 0x3F757470E0000000, float 0xBFE0C87980000000, float 0x3FD4F74CE0000000, float 0xBFDF049240000000, float 0xBFEB29E4E0000000, float 0xBFD51FC080000000, float 0x3FDB1ACDE0000000, float 0x3FE1051000000000, float 0xBFEE196B80000000, float 0x3FE95ECC40000000, float 0xBFD4CD4660000000, float 0x3F7BE5D9E0000000, float 0xBFD90A6BA0000000, float 0x3FE8F7B3A0000000, float 0xBFE2403360000000, float 0x3FD81BA3C0000000, float 0x3FEA86A0A0000000, float 0x3FE6F789A0000000, float 0xBFB4D23D40000000, float 0x3FD7B8FDE0000000, float 0xBFCA6655A0000000, float 0xBFED245700000000, float 0xBFE076DDA0000000, float 0xBFED882060000000, float 0xBFD5118C20000000, float 0x3FE1801720000000, float 0xBFEA73BEA0000000, float 0x3FEE224460000000, float 0xBFDBA261C0000000, float 0x3FE2C9F300000000, float 0x3FCD4195C0000000, float 0x3FE259B800000000, float 0xBFEDFE8680000000, float 0xBFDC67EC80000000, float 0xBFED289120000000, float 0xBFE9286B60000000, float 0x3FCCF0A5E0000000, float 0x3FE064D5E0000000, float 0x3FE7DCA4C0000000, float 0x3FD2457C00000000, float 0x3FD3874420000000, float 0xBFE289FE80000000, float 0xBFE6A57640000000, float 0x3FED3E6C40000000, float 0xBFE9924B00000000, float 0xBFD1CB5360000000, float 0x3FD2987840000000, float 0xBFEF0BAA60000000, float 0xBFE1EE2000000000, float 0xBFE94E0980000000, float 0x3FD9A1A940000000, float 0x3FCDE12A60000000, float 0xBFE6726060000000, float 0x3FEC59F6E0000000, float 0x3FD3E05460000000, float 0xBF9F64CF80000000, float 0x3FDBB41C00000000, float 0x3FDEF8D720000000, float 0xBFB6C721A0000000, float 0xBFEFF722E0000000, float 0x3FB232F440000000, float 0xBFEB887EC0000000, float 0x3FE2629520000000, float 0x3FC11F6020000000, float 0xBFD378EA00000000, float 0x3FE53A0400000000, float 0x3FD63ED960000000, float 0x3FED7FB480000000, float 0x3FC67B6780000000, float 0x3FB7E08AE0000000, float 0x3FCA89CA20000000, float 0xBFE09D8400000000, float 0x3FE07212E0000000, float 0x3FDFF9FCC0000000, float 0xBFE35F17C0000000, float 0x3FE6DFC7E0000000, float 0xBFE8E8AB40000000, float 0x3FE5ED2460000000, float 0x3FE7D41D80000000, float 0xBFD5AD96A0000000, float 0x3FEC9F1AE0000000, float 0x3FC293C8A0000000, float 0x3FECA17F40000000, float 0xBFE9D347A0000000, float 0x3F9FDD2280000000, float 0x3FCA46A5E0000000, float 0x3FC4C64780000000, float 0xBFE12708E0000000, float 0xBFD3E3D600000000, float 0xBFEDA75260000000, float 0xBFE11E29C0000000, float 0x3FE8547180000000, float 0xBFE92FD320000000, float 0xBFEEBB94A0000000, float 0xBFBB1DB440000000, float 0xBFB7624140000000, float 0x3FE67E6F80000000, float 0xBFE84449E0000000, float 0xBFC5B24EA0000000, float 0xBFBF15B580000000, float 0x3FD56F9340000000, float 0xBFEECA1F00000000, float 0x3FD6FF8A80000000, float 0xBFC3588E40000000, float 0x3FE132DF60000000, float 0x3FE820AD80000000, float 0xBFDBECB740000000, float 0x3FE84A3400000000, float 0x3FDC1BA3C0000000, float 0xBFE6223E20000000, float 0xBFE28C9760000000, float 0x3FD559D560000000, float 0x3FDD0563E0000000, float 0xBFE5EB1820000000, float 0x3FE0D9A300000000, float 0xBFE07E6500000000, float 0x3FE0A69160000000, float 0xBFD3E99640000000, float 0xBFAA56BCA0000000, float 0xBFE94B59A0000000, float 0xBFCE7075C0000000, float 0x3FDA78D500000000, float 0x3FEF0919E0000000, float 0xBF997E1320000000, float 0x3FDD01A7A0000000, float 0xBFC16A7260000000, float 0x3FEC47C740000000, float 0x3FC3FD0D00000000, float 0x3FBB08CC60000000, float 0xBFD24994A0000000, float 0xBFEEE37160000000, float 0xBFE1E71CE0000000, float 0xBFCFBBA560000000, float 0x3FD938A7E0000000, float 0x3FD2857F40000000, float 0xBFE6BC0C20000000, float 0x3FC2F40600000000, float 0x3FEB4C61E0000000, float 0xBFEE71D820000000, float 0xBFDA6A5D60000000, float 0xBFEAD5DC40000000, float 0xBFE0FE6F80000000, float 0x3FED77BC00000000, float 0x3FE3ACD5C0000000, float 0xBFCBA61E00000000, float 0x3FDCA2C240000000, float 0xBFECD18D20000000, float 0xBFE642F400000000, float 0xBFEBA36A00000000, float 0x3FA8907100000000, float 0xBFDF1C9B40000000, float 0xBFB9FC3B40000000, float 0xBFE13A9080000000, float 0xBFE08535C0000000, float 0x3FEBF48800000000, float 0x3FED464560000000, float 0x3FD6405B40000000, float 0x3FE83C4F40000000, float 0x3FB22C4500000000, float 0xBFE17EB6C0000000, float 0xBFE0E87D20000000, float 0x3FBB10BA60000000, float 0xBFBB2E9CC0000000, float 0x3FCCA26600000000, float 0xBFE00196E0000000, float 0xBFEA231400000000, float 0x3FE06C8D60000000, float 0x3FE4BB6AA0000000, float 0xBFEED6B220000000, float 0x3FE1FAB540000000, float 0xBFE879C420000000, float 0xBFE9AC8E60000000, float 0xBFEF03BA40000000, float 0xBFEB020600000000, float 0x3FEA004740000000, float 0xBFC7B506E0000000, float 0x3FE34F5900000000, float 0x3FED2EBA20000000, float 0x3FBE7E4140000000, float 0x3FE7ABEF00000000, float 0xBFA483EC80000000, float 0x3FE4417A80000000, float 0xBFD72730C0000000, float 0x3FDAFA6160000000, float 0xBFEC43BB40000000, float 0xBFDF3E2500000000, float 0x3FD586EC20000000, float 0x3FDDB8E8E0000000, float 0xBFE762C340000000, float 0xBFE2F70160000000, float 0x3FED5DBDC0000000, float 0xBFD09680E0000000, float 0x3FE06B13E0000000, float 0xBFC8205780000000, float 0x3FEEDD5900000000, float 0xBFEF9680E0000000, float 0xBF7595FEE0000000, float 0x3FDE93CCE0000000, float 0x3FE524E9C0000000, float 0x3F9FC47E40000000, float 0x3FA449BA60000000, float 0x3FECAB25C0000000, float 0x3FCD465620000000, float 0x3FB206FAC0000000, float 0xBFEE56E040000000, float 0x3FA51DCD80000000, float 0x3FEC539DA0000000, float 0x3FE4F878C0000000, float 0xBFA7F69020000000, float 0x3F71B2E5A0000000, float 0x3FD948CF80000000, float 0x3FED385840000000, float 0xBFD7363F60000000, float 0xBFEEEF30A0000000, float 0x3FD56B1600000000, float 0xBFCF7B6BC0000000, float 0xBFDD1C8220000000, float 0xBFD50E0220000000, float 0xBFE9026680000000, float 0xBFC7C41140000000, float 0x3FB40FECE0000000, float 0xBFEBA4A8C0000000, float 0x3FE1C3BB40000000, float 0xBFDA25D8E0000000, float 0xBFAACC0BE0000000, float 0x3FE0A11440000000, float 0xBFD952DEC0000000, float 0x3FEE281560000000, float 0xBF650331E0000000, float 0xBFE78485A0000000, float 0xBF9B391920000000, float 0xBFEED069A0000000, float 0xBFEAD95FE0000000, float 0xBFE9883340000000, float 0x3FBB83BE60000000, float 0xBFE9304040000000, float 0x3FCF26A660000000, float 0xBF7DF548E0000000, float 0x3FEBC83880000000, float 0xBFE9B5BD60000000, float 0x3FEFE77B40000000, float 0x3FD0D944A0000000, float 0xBFEC7D6520000000, float 0xBFD76748E0000000, float 0x3FD2FAE360000000, float 0x3FDC704BC0000000, float 0x3FD8DB0140000000, float 0x3FEAEF30A0000000, float 0xBFEC4EDB20000000, float 0x3FE36B1A20000000, float 0xBFD603A760000000, float 0x3FC8CC9220000000, float 0x3FE7C67160000000, float 0xBFE93E1860000000, float 0x3FE9203600000000, float 0xBFD3CC9EA0000000, float 0x3FE762FBE0000000, float 0xBFE3893740000000, float 0xBFD77C73E0000000, float 0xBFD1640EA0000000, float 0xBFD61B79E0000000, float 0x3FE367FD40000000, float 0xBFCE09C3C0000000, float 0xBFC79C7360000000, float 0x3FE9DFCA00000000, float 0x3FEBEE06E0000000, float 0x3F9D145D80000000, float 0x3FAA975B00000000, float 0xBFC1378EE0000000, float 0xBFBA7913E0000000, float 0x3FCFCED920000000, float 0xBFC199A200000000, float 0xBFEAE28240000000, float 0x3FD6ECA680000000, float 0x3FDFCBE1E0000000, float 0x3FDD35DEE0000000, float 0xBFC94623E0000000, float 0xBFBD647340000000, float 0x3FD3144020000000, float 0xBFB5031060000000, float 0xBFE0417440000000, float 0x3FEE884C60000000, float 0xBFEC6D3FA0000000, float 0xBFE87B02E0000000, float 0xBFEAB5CC00000000, float 0x3FECB2F880000000, float 0xBFB30A9160000000, float 0x3FECAD2FE0000000, float 0xBFE6D640E0000000, float 0x3FE1E073E0000000, float 0xBFD809AEE0000000, float 0xBFAE3FDD60000000, float 0x3FC521C480000000, float 0x3FD8F16F40000000, float 0x3FE834E760000000, float 0xBF9AF89C60000000, float 0x3FD0CD7D00000000, float 0xBFCB89D6A0000000, float 0xBFEF2E4F40000000, float 0xBFEBE72540000000, float 0x3FE5CE67E0000000], align 16
@pRNG.div_tbl = internal constant [9 x [2 x i32]] [[2 x i32] [i32 8332, i32 -2147483647], [2 x i32] [i32 4545, i32 0], [2 x i32] [i32 3124, i32 -1342177280], [2 x i32] [i32 2380, i32 -1227133501], [2 x i32] [i32 1922, i32 -495573146], [2 x i32] [i32 1612, i32 -1108378637], [2 x i32] [i32 1388, i32 -1073741800], [2 x i32] [i32 1219, i32 1676084800], [2 x i32] [i32 1086, i32 -653581951]], align 16
@synth_block_fcb_acb.gain_coeff = internal constant [6 x float] [float 0x3FEA240B80000000, float 0xBFB0C154C0000000, float 0x3FC617C1C0000000, float 0x3F92F1AA00000000, float 0xBFA2617C20000000, float 0x3FA7731900000000], align 16
@.str.18 = private unnamed_addr constant [16 x i8] c"size <= 160 / 2\00", align 1
@wmavoice_gain_codebook_fcb = internal constant [128 x float] [float 0xBFEB01CD80000000, float 0xBFE3A8A400000000, float 0xBFC39A7540000000, float 0xBFB98DD360000000, float 0x3FD49123A0000000, float 0x3FD82D13A0000000, float 0x3FE6E88B20000000, float 0x3FF45216E0000000, float 0xBFFAFF96A0000000, float 0xBFF37A7400000000, float 0xBFDF522BE0000000, float 0xBFDA97CE20000000, float 0x3FC0189DA0000000, float 0x3FC8ED5FC0000000, float 0x3FE2D3B2C0000000, float 0x3FF32E1E20000000, float 0xBFF5BD2660000000, float 0xBFEFFD50E0000000, float 0xBFD81EC380000000, float 0xBFD3F76500000000, float 0x3FC814E780000000, float 0x3FD025E960000000, float 0x3FE4193120000000, float 0x3FF3861A20000000, float 0xBFE79EE140000000, float 0xBFE0FE2F20000000, float 0xBFB9457340000000, float 0xBFA92F76C0000000, float 0x3FD6C1BAE0000000, float 0x3FDA3F6BE0000000, float 0x3FE7A68300000000, float 0x3FF487CC20000000, float 0xBFCFF79E80000000, float 0xBFBDD52900000000, float 0x3FC814E780000000, float 0x3FCCDE8460000000, float 0x3FE180BC00000000, float 0x3FE2F37A00000000, float 0x3FEBF2C160000000, float 0x3FF5D00060000000, float 0xBFF63EADC0000000, float 0xBFF058AF00000000, float 0xBFD8F722E0000000, float 0xBFD4AB70C0000000, float 0x3FC71FA760000000, float 0x3FCF7F8040000000, float 0x3FE3F1C120000000, float 0x3FF37C6B40000000, float 0xBFE34E4960000000, float 0xBFDAC98760000000, float 0xBF99ECE960000000, float 0x3F9648A500000000, float 0x3FD9C76420000000, float 0x3FDD274F60000000, float 0x3FE8B018C0000000, float 0x3FF4D68100000000, float 0xBFF1B0B060000000, float 0xBFEA205220000000, float 0xBFD1A5F200000000, float 0xBFCB9B2000000000, float 0x3FCF991C60000000, float 0x3FD3B9DF40000000, float 0x3FE5523EE0000000, float 0x3FF3DE9A60000000, float 0xBFE1442440000000, float 0xBFD760CD40000000, float 0x3F8667ADE0000000, float 0x3FAC61F020000000, float 0x3FDB4CFD60000000, float 0x3FDE8EF600000000, float 0x3FE9375180000000, float 0x3FF4FD4C20000000, float 0xBFEEA0AAE0000000, float 0xBFE6809820000000, float 0xBFCAA81900000000, float 0xBFC3744A00000000, float 0x3FD2654960000000, float 0x3FD62BC980000000, float 0x3FE62E4300000000, float 0x3FF41CD580000000, float 0xBFCEFC3360000000, float 0xBFBC1CD3C0000000, float 0x3FC8B763E0000000, float 0x3FCD9511A0000000, float 0x3FE19D2140000000, float 0x3FE31321E0000000, float 0x3FEC0740A0000000, float 0x3FF5D75460000000, float 0x3FE501E900000000, float 0x3FE6CC77E0000000, float 0x3FEB6C4260000000, float 0x3FEC0E12E0000000, float 0x3FF0E870A0000000, float 0x3FF158C820000000, float 0x3FF43E7D20000000, float 0x3FF9F04EC0000000, float 0xBFF8AB20C0000000, float 0xBFF1FB9E20000000, float 0xBFDC5CD900000000, float 0xC015317A20000000, float 0x3FC3540FE0000000, float 0x3FCBF24D80000000, float 0x3FE3568E80000000, float 0x3FF351C8A0000000, float 0xBFE0665920000000, float 0xBFD5EB5C80000000, float 0x3F9B4805C0000000, float 0x3FB2469D60000000, float 0x3FDBF736E0000000, float 0x3FDF3AD720000000, float 0x3FE972B520000000, float 0x3FF5100220000000, float 0xBFEC601BA0000000, float 0xBFE4BDD700000000, float 0xBFC6513640000000, float 0xBFBEB27100000000, float 0x3FD3C5E7E0000000, float 0x3FD76D0D80000000, float 0x3FE6A43160000000, float 0x3FF43D5540000000, float 0xBFB824BEA0000000, float 0x3F954804A0000000, float 0x3FD2A2A080000000, float 0x3FD4CC6FE0000000, float 0x3FE3D75B60000000, float 0x3FE5308420000000, float 0x3FEDA702C0000000, float 0x3FF65704A0000000], align 16
@wmavoice_gain_codebook_acb = internal constant [128 x float] [float 0x3FA99999A0000000, float 0x3FC1EB8520000000, float 0x3FC47AE140000000, float 0x3FA99999A0000000, float 0x3FC5C28F60000000, float 2.500000e-01, float 0x3FB1EB8520000000, float 0x3FCAE147A0000000, float 0x3FBEB851E0000000, float 0x3FCC28F5C0000000, float 0x3FCD70A3E0000000, float 0x3FC0A3D700000000, float 0x3FCEB851E0000000, float 0x3FD47AE140000000, float 0x3FC1EB8520000000, float 0x3FD28F5C20000000, float 0x3FD3D70A40000000, float 0x3FDA3D70A0000000, float 0x3FDB851EC0000000, float 0x3FD47AE140000000, float 0x3FDB851EC0000000, float 0x3FE051EB80000000, float 0x3FD5C28F60000000, float 0x3FDEB851E0000000, float 0x3FD851EB80000000, float 0x3FDE147AE0000000, float 0x3FDF5C2900000000, float 0x3FD851EB80000000, float 0x3FDF5C2900000000, float 0x3FE23D70A0000000, float 0x3FD99999A0000000, float 0x3FE147AE20000000, float 0x3FDF5C2900000000, float 0x3FE2E147A0000000, float 0x3FE3851EC0000000, float 5.000000e-01, float 0x3FE3851EC0000000, float 0x3FE6147AE0000000, float 0x3FE0A3D700000000, float 0x3FE51EB860000000, float 0x3FE1EB8520000000, float 0x3FE4CCCCC0000000, float 0x3FE570A3E0000000, float 0x3FE1EB8520000000, float 0x3FE570A3E0000000, float 7.500000e-01, float 0x3FE28F5C20000000, float 0x3FE70A3D80000000, float 0x3FE4CCCCC0000000, float 0x3FE7AE1480000000, float 0x3FE851EB80000000, float 0x3FE4CCCCC0000000, float 0x3FE851EB80000000, float 0x3FEAE147A0000000, float 0x3FE570A3E0000000, float 0x3FE9EB8520000000, float 0x3FE6B851E0000000, float 0x3FE99999A0000000, float 0x3FEA3D70A0000000, float 0x3FE6B851E0000000, float 0x3FEA3D70A0000000, float 0x3FECCCCCC0000000, float 0x3FE75C2900000000, float 0x3FEBD70A40000000, float 0x3FE9EB8520000000, float 0x3FECCCCCC0000000, float 0x3FED70A3E0000000, float 0x3FE9EB8520000000, float 0x3FEDC28F60000000, float 0x3FF028F5C0000000, float 0x3FEA8F5C20000000, float 0x3FEF0A3D80000000, float 0x3FEBD70A40000000, float 0x3FEEB851E0000000, float 0x3FEF5C2900000000, float 0x3FEBD70A40000000, float 0x3FEF5C2900000000, float 0x3FF0F5C280000000, float 0x3FEC7AE140000000, float 0x3FF07AE140000000, float 0x3FED70A3E0000000, float 0x3FF051EB80000000, float 0x3FF0A3D700000000, float 0x3FEDC28F60000000, float 0x3FF0A3D700000000, float 0x3FF1EB8520000000, float 0x3FEE666660000000, float 0x3FF170A3E0000000, float 0x3FEDC28F60000000, float 0x3FF051EB80000000, float 0x3FF0A3D700000000, float 0x3FEDC28F60000000, float 0x3FF0A3D700000000, float 0x3FF1EB8520000000, float 0x3FEE666660000000, float 0x3FF170A3E0000000, float 0x3FEE147AE0000000, float 0x3FF0A3D700000000, float 0x3FF0CCCCC0000000, float 0x3FB99999A0000000, float 0x3FF0F5C280000000, float 0x3FF23D70A0000000, float 0x3FEEB851E0000000, float 0x3FF1C28F60000000, float 0x3FEF5C2900000000, float 0x3FF147AE20000000, float 0x3FF19999A0000000, float 0x3FEFAE1480000000, float 0x3FF19999A0000000, float 0x3FF2E147A0000000, float 0x3FF028F5C0000000, float 0x3FF2666660000000, float 0x3FF0F5C280000000, float 0x3FF2666660000000, float 0x3FF2B851E0000000, float 0x3FF0F5C280000000, float 0x3FF2B851E0000000, float 1.250000e+00, float 0x3FF147AE20000000, float 0x3FF3851EC0000000, float 0x3FF28F5C20000000, float 1.250000e+00, float 0x3FF451EB80000000, float 0x3FF28F5C20000000, float 0x3FF47AE140000000, float 0x3FF5C28F60000000, float 0x3FF2E147A0000000, float 0x3FF51EB860000000], align 16
@wmavoice_ipol1_coeffs = internal constant [153 x float] [float 0.000000e+00, float 0x3FE42FA760000000, float 0x3FE85C9C60000000, float 0x3FEB9FCEA0000000, float 0x3FEDB24B40000000, float 0x3FEE666360000000, float 0x3FEDAC7B00000000, float 0x3FEB94AF20000000, float 0x3FE84D2160000000, float 0xBFC6ECF080000000, float 0xBFC14C1360000000, float 0xBFAE34B8E0000000, float 0x3FA83629A0000000, float 0x3FC6D6ECE0000000, float 0x3FD4E0D9A0000000, float 0x3FDEBB5C60000000, float 0x3FE41D1E80000000, float 0.000000e+00, float 0xBFC897DAE0000000, float 0xBFC6DE1C40000000, float 0xBFC12C6C20000000, float 0xBFAD73A4E0000000, float 0x3FA931F060000000, float 0x3FC720F260000000, float 0x3FD508E8C0000000, float 0x3FDEE380E0000000, float 0x3FB4ABCC00000000, float 0x3FA9ECAA60000000, float 0x3F80685B60000000, float 0xBFA5F0BDA0000000, float 0xBFB88A1900000000, float 0xBFC261F8A0000000, float 0xBFC6CFADC0000000, float 0xBFC89745C0000000, float 0.000000e+00, float 0x3FB897BD60000000, float 0x3FB4939940000000, float 0x3FA99F0DC0000000, float 0x3F7DB0A6E0000000, float 0xBFA6601840000000, float 0xBFB8C03FA0000000, float 0xBFC2783220000000, float 0xBFC6DCEC20000000, float 0xBFA41121A0000000, float 0xBF936AD720000000, float 0x3F7CC42B20000000, float 0x3FA241E320000000, float 0x3FB021B3E0000000, float 0x3FB5B55120000000, float 0x3FB8D0DA20000000, float 0x3FB8A02F40000000, float 0.000000e+00, float 0xBFAA672140000000, float 0xBFA3EE3360000000, float 0xBF9307EB80000000, float 0x3F7E98C720000000, float 0x3FA27E0D00000000, float 0x3FB03C2BC0000000, float 0x3FB5C7AE40000000, float 0x3FB8D72DA0000000, float 0x3F924F71E0000000, float 0x3F73F376C0000000, float 0xBF86207CE0000000, float 0xBF9BC48080000000, float 0xBFA5539B80000000, float 0xBFAA971340000000, float 0xBFAC8F81E0000000, float 0xBFAA78B1C0000000, float 0.000000e+00, float 0x3F9B59A240000000, float 0x3F92208C00000000, float 0x3F72FD9160000000, float 0xBF86A9E0E0000000, float 0xBF9C06E5C0000000, float 0xBFA56E6600000000, float 0xBFAAA672A0000000, float 0xBFAC8F7F80000000, float 0xBF7C5F8820000000, float 0x3F4AED3E00000000, float 0x3F83ECFBA0000000, float 0x3F93055000000000, float 0x3F9A93C180000000, float 0x3F9F358E20000000, float 0x3F9FBD3EA0000000, float 0x3F9B7581E0000000, float 0.000000e+00, float 0xBF89B5DEA0000000, float 0xBF7BEC80C0000000, float 0x3F4F646BE0000000, float 0x3F84395360000000, float 0x3F93284BC0000000, float 0x3F9AAD8A60000000, float 0x3F9F40A9C0000000, float 0x3F9FB5AFE0000000, float 0x3F5F5FE980000000, float 0xBF626F4E80000000, float 0xBF7C187100000000, float 0xBF870873C0000000, float 0xBF8E05D860000000, float 0xBF90C2EDC0000000, float 0xBF902C2640000000, float 0xBF89DB9A20000000, float 0.000000e+00, float 0x3F74E13AA0000000, float 0x3F5E630000000000, float 0xBF6305F3C0000000, float 0xBF7C65EA20000000, float 0xBF872A2C80000000, float 0xBF8E1C2A40000000, float 0xBF90C58E40000000, float 0xBF90244F40000000, float 0xBF1E7AF820000000, float 0x3F5FA4AC80000000, float 0x3F70B8B0E0000000, float 0x3F78A7A2E0000000, float 0x3F7E428420000000, float 0x3F8012F1A0000000, float 0x3F7D3F2AA0000000, float 0x3F750DB6A0000000, float 0.000000e+00, float 0xBF5D5C7280000000, float 0xBF16784880000000, float 0x3F601A6900000000, float 0x3F70DBEB20000000, float 0x3F78C449A0000000, float 0x3F7E529D80000000, float 0x3F80121CA0000000, float 0x3F7D285EE0000000, float 0xBF3ADEF200000000, float 0xBF592C6D00000000, float 0xBF64E1A7C0000000, float 0xBF6B302840000000, float 0xBF6E78A180000000, float 0xBF6DD54200000000, float 0xBF68AC8B40000000, float 0xBF5DBF1680000000, float 0.000000e+00, float 0x3F46A27500000000, float 0xBF3C1175C0000000, float 0xBF59758E00000000, float 0xBF65003840000000, float 0xBF6B446040000000, float 0xBF6E7E7400000000, float 0xBF6DC98180000000, float 0xBF688DA2C0000000, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00], align 16
@wmavoice_ipol2_coeffs = internal constant [32 x float] [float 1.000000e+00, float 0x3FEB672FA0000000, float 0x3FE2D7F840000000, float 0x3FD0F31220000000, float 0.000000e+00, float 0xBFC16A0E00000000, float 0xBFC25CDCE0000000, float 0xBFB36AF0C0000000, float 0.000000e+00, float 0x3FA5033AC0000000, float 0x3FA51E88A0000000, float 0x3F947C92C0000000, float 0.000000e+00, float 0xBF80AB4060000000, float 0xBF7BF1BA00000000, float 0xBF68037F00000000, float 0.000000e+00, float 0x3F65304440000000, float 0x3F75BC0320000000, float 0x3F76CF64E0000000, float 0.000000e+00, float 0xBF85765340000000, float 0xBF93330820000000, float 0xBF9071D560000000, float 0.000000e+00, float 0x3F95BF7540000000, float 0x3FA0F34220000000, float 0x3F99CC84A0000000, float 0.000000e+00, float 0xBF9C0DE8A0000000, float 0xBFA4199160000000, float 0xBF9C497AE0000000], align 16
@wmavoice_denoise_power_table = internal constant [12 x [64 x float]] [[64 x float] [float 0x3FEE444DE0000000, float 0x3FEE5E90C0000000, float 0x3FEE75C420000000, float 0x3FEE8A8D40000000, float 0x3FEE9D6240000000, float 0x3FEEAE99C0000000, float 0x3FEEBE7620000000, float 0x3FEECD2A60000000, float 0x3FEEDADF60000000, float 0x3FEEE7B5E0000000, float 0x3FEEF3C8A0000000, float 0x3FEEFF2E00000000, float 0x3FEF09F8A0000000, float 0x3FEF143840000000, float 0x3FEF1DFA60000000, float 0x3FEF274A80000000, float 0x3FEF3032E0000000, float 0x3FEF38BC00000000, float 0x3FEF40EDE0000000, float 0x3FEF48CF20000000, float 0x3FEF5065C0000000, float 0x3FEF57B740000000, float 0x3FEF5EC880000000, float 0x3FEF659D80000000, float 0x3FEF6C3A80000000, float 0x3FEF72A2E0000000, float 0x3FEF78D9E0000000, float 0x3FEF7EE260000000, float 0x3FEF84BF20000000, float 0x3FEF8A7280000000, float 0x3FEF8FFEC0000000, float 0x3FEF956600000000, float 0x3FEF9AAA20000000, float 0x3FEF9FCCC0000000, float 0x3FEFA4CFC0000000, float 0x3FEFA9B480000000, float 0x3FEFAE7C60000000, float 0x3FEFB328E0000000, float 0x3FEFB7BB00000000, float 0x3FEFBC3400000000, float 0x3FEFC094E0000000, float 0x3FEFC4DEC0000000, float 0x3FEFC91280000000, float 0x3FEFCD3100000000, float 0x3FEFD13B00000000, float 0x3FEFD53180000000, float 0x3FEFD91520000000, float 0x3FEFDCE680000000, float 0x3FEFE0A660000000, float 0x3FEFE45560000000, float 0x3FEFE7F420000000, float 0x3FEFEB8300000000, float 0x3FEFEF02C0000000, float 0x3FEFF273C0000000, float 0x3FEFF5D680000000, float 0x3FEFF92B80000000, float 0x3FEFFC7340000000, float 0x3FEFFFAE00000000, float 0x3FF0016E20000000, float 0x3FF002FF40000000, float 0x3FF0048A60000000, float 0x3FF0060FC0000000, float 0x3FF0078FC0000000, float 0x3FF0090A40000000], [64 x float] [float 0x3FECA0A3E0000000, float 0x3FECD266E0000000, float 0x3FECFE8100000000, float 0x3FED2620E0000000, float 0x3FED4A1E40000000, float 0x3FED6B1900000000, float 0x3FED898B00000000, float 0x3FEDA5D2E0000000, float 0x3FEDC03BC0000000, float 0x3FEDD902C0000000, float 0x3FEDF05960000000, float 0x3FEE066920000000, float 0x3FEE1B54E0000000, float 0x3FEE2F39C0000000, float 0x3FEE423120000000, float 0x3FEE5450A0000000, float 0x3FEE65AB20000000, float 0x3FEE765100000000, float 0x3FEE8650A0000000, float 0x3FEE95B700000000, float 0x3FEEA48F40000000, float 0x3FEEB2E3A0000000, float 0x3FEEC0BD20000000, float 0x3FEECE2400000000, float 0x3FEEDB1F80000000, float 0x3FEEE7B660000000, float 0x3FEEF3EEA0000000, float 0x3FEEFFCDC0000000, float 0x3FEF0B5900000000, float 0x3FEF1694E0000000, float 0x3FEF2185A0000000, float 0x3FEF2C2F20000000, float 0x3FEF369500000000, float 0x3FEF40BAC0000000, float 0x3FEF4AA360000000, float 0x3FEF5451A0000000, float 0x3FEF5DC880000000, float 0x3FEF670A20000000, float 0x3FEF701920000000, float 0x3FEF78F780000000, float 0x3FEF81A760000000, float 0x3FEF8A2AC0000000, float 0x3FEF928340000000, float 0x3FEF9AB2A0000000, float 0x3FEFA2BA80000000, float 0x3FEFAA9C60000000, float 0x3FEFB25980000000, float 0x3FEFB9F380000000, float 0x3FEFC16B80000000, float 0x3FEFC8C2C0000000, float 0x3FEFCFFA40000000, float 0x3FEFD71320000000, float 0x3FEFDE0E80000000, float 0x3FEFE4ED40000000, float 0x3FEFEBB040000000, float 0x3FEFF25880000000, float 0x3FEFF8E6E0000000, float 0x3FEFFF5C00000000, float 0x3FF002DC60000000, float 0x3FF005FF00000000, float 0x3FF0091600000000, float 0x3FF00C21E0000000, float 0x3FF00F2300000000, float 0x3FF0121980000000], [64 x float] [float 0x3FEB13B4C0000000, float 0x3FEB5A6CE0000000, float 0x3FEB994D20000000, float 0x3FEBD1F3E0000000, float 0x3FEC0589E0000000, float 0x3FEC34EB40000000, float 0x3FEC60C000000000, float 0x3FEC898B40000000, float 0x3FECAFB560000000, float 0x3FECD392A0000000, float 0x3FECF568A0000000, float 0x3FED1570E0000000, float 0x3FED33DBC0000000, float 0x3FED50D2A0000000, float 0x3FED6C7860000000, float 0x3FED86EB80000000, float 0x3FEDA04680000000, float 0x3FEDB8A080000000, float 0x3FEDD00DA0000000, float 0x3FEDE6A000000000, float 0x3FEDFC67A0000000, float 0x3FEE1172A0000000, float 0x3FEE25CE00000000, float 0x3FEE398520000000, float 0x3FEE4CA280000000, float 0x3FEE5F2F60000000, float 0x3FEE7134A0000000, float 0x3FEE82BA00000000, float 0x3FEE93C680000000, float 0x3FEEA460E0000000, float 0x3FEEB48F20000000, float 0x3FEEC456C0000000, float 0x3FEED3BD00000000, float 0x3FEEE2C680000000, float 0x3FEEF177E0000000, float 0x3FEEFFD520000000, float 0x3FEF0DE220000000, float 0x3FEF1BA240000000, float 0x3FEF291900000000, float 0x3FEF364980000000, float 0x3FEF4336A0000000, float 0x3FEF4FE320000000, float 0x3FEF5C51A0000000, float 0x3FEF688460000000, float 0x3FEF747DE0000000, float 0x3FEF804020000000, float 0x3FEF8BCD20000000, float 0x3FEF9726E0000000, float 0x3FEFA24F40000000, float 0x3FEFAD47E0000000, float 0x3FEFB81260000000, float 0x3FEFC2B060000000, float 0x3FEFCD2340000000, float 0x3FEFD76C60000000, float 0x3FEFE18D40000000, float 0x3FEFEB8700000000, float 0x3FEFF55AE0000000, float 0x3FEFFF0A00000000, float 0x3FF0044AC0000000, float 0x3FF008FF40000000, float 0x3FF00DA300000000, float 0x3FF0123640000000, float 0x3FF016B9E0000000, float 0x3FF01B2E00000000], [64 x float] [float 0x3FE99C4540000000, float 0x3FE9F59B60000000, float 0x3FEA454A00000000, float 0x3FEA8D48E0000000, float 0x3FEACF0260000000, float 0x3FEB0B83E0000000, float 0x3FEB439B20000000, float 0x3FEB77E980000000, float 0x3FEBA8EF40000000, float 0x3FEBD714A0000000, float 0x3FEC02AF40000000, float 0x3FEC2C0680000000, float 0x3FEC535660000000, float 0x3FEC78D200000000, float 0x3FEC9CA520000000, float 0x3FECBEF560000000, float 0x3FECDFE3E0000000, float 0x3FECFF8D40000000, float 0x3FED1E0B00000000, float 0x3FED3B7380000000, float 0x3FED57DAC0000000, float 0x3FED7352C0000000, float 0x3FED8DEB80000000, float 0x3FEDA7B360000000, float 0x3FEDC0B780000000, float 0x3FEDD903A0000000, float 0x3FEDF0A2E0000000, float 0x3FEE079EC0000000, float 0x3FEE1E0080000000, float 0x3FEE33D060000000, float 0x3FEE4915E0000000, float 0x3FEE5DD840000000, float 0x3FEE721DE0000000, float 0x3FEE85ECC0000000, float 0x3FEE994AA0000000, float 0x3FEEAC3C80000000, float 0x3FEEBEC740000000, float 0x3FEED0EF80000000, float 0x3FEEE2B960000000, float 0x3FEEF428E0000000, float 0x3FEF0541C0000000, float 0x3FEF160760000000, float 0x3FEF267D00000000, float 0x3FEF36A5E0000000, float 0x3FEF4684C0000000, float 0x3FEF561C80000000, float 0x3FEF656F80000000, float 0x3FEF748060000000, float 0x3FEF835160000000, float 0x3FEF91E4C0000000, float 0x3FEFA03C80000000, float 0x3FEFAE5AA0000000, float 0x3FEFBC4100000000, float 0x3FEFC9F160000000, float 0x3FEFD76D80000000, float 0x3FEFE4B700000000, float 0x3FEFF1CF60000000, float 0x3FEFFEB820000000, float 0x3FF005B940000000, float 0x3FF00C0020000000, float 0x3FF0123120000000, float 0x3FF0184D00000000, float 0x3FF01E5440000000, float 0x3FF0244780000000], [64 x float] [float 0x3FE8392B60000000, float 0x3FE8A2F8A0000000, float 0x3FE901A3A0000000, float 0x3FE9576AE0000000, float 0x3FE9A5EC20000000, float 0x3FE9EE5C40000000, float 0x3FEA31A780000000, float 0x3FEA708760000000, float 0x3FEAAB9020000000, float 0x3FEAE33A20000000, float 0x3FEB17E840000000, float 0x3FEB49ED80000000, float 0x3FEB798F40000000, float 0x3FEBA70900000000, float 0x3FEBD28DC0000000, float 0x3FEBFC4960000000, float 0x3FEC246260000000, float 0x3FEC4AFA80000000, float 0x3FEC702F20000000, float 0x3FEC941AE0000000, float 0x3FECB6D4E0000000, float 0x3FECD87260000000, float 0x3FECF90620000000, float 0x3FED18A100000000, float 0x3FED375280000000, float 0x3FED5528A0000000, float 0x3FED723000000000, float 0x3FED8E7440000000, float 0x3FEDAA0020000000, float 0x3FEDC4DD60000000, float 0x3FEDDF1500000000, float 0x3FEDF8AF40000000, float 0x3FEE11B400000000, float 0x3FEE2A2A20000000, float 0x3FEE421880000000, float 0x3FEE598520000000, float 0x3FEE7075E0000000, float 0x3FEE86F000000000, float 0x3FEE9CF8A0000000, float 0x3FEEB29440000000, float 0x3FEEC7C780000000, float 0x3FEEDC9660000000, float 0x3FEEF104E0000000, float 0x3FEF051680000000, float 0x3FEF18CF00000000, float 0x3FEF2C3140000000, float 0x3FEF3F40A0000000, float 0x3FEF520000000000, float 0x3FEF647200000000, float 0x3FEF769960000000, float 0x3FEF887880000000, float 0x3FEF9A11E0000000, float 0x3FEFAB67A0000000, float 0x3FEFBC7C00000000, float 0x3FEFCD50E0000000, float 0x3FEFDDE860000000, float 0x3FEFEE4420000000, float 0x3FEFFE6620000000, float 0x3FF0072800000000, float 0x3FF00F01A0000000, float 0x3FF016C0C0000000, float 0x3FF01E6600000000, float 0x3FF025F240000000, float 0x3FF02D6640000000], [64 x float] [float 0x3FE6E94D20000000, float 0x3FE7619740000000, float 0x3FE7CD90A0000000, float 0x3FE82FAD20000000, float 0x3FE889B240000000, float 0x3FE8DCF320000000, float 0x3FE92A7480000000, float 0x3FE97302E0000000, float 0x3FE9B74220000000, float 0x3FE9F7B780000000, float 0x3FEA34D120000000, float 0x3FEA6EEB00000000, float 0x3FEAA65280000000, float 0x3FEADB49C0000000, float 0x3FEB0E09C0000000, float 0x3FEB3EC3C0000000, float 0x3FEB6DA2A0000000, float 0x3FEB9ACC20000000, float 0x3FEBC66180000000, float 0x3FEBF08040000000, float 0x3FEC1942C0000000, float 0x3FEC40C080000000, float 0x3FEC670EE0000000, float 0x3FEC8C4100000000, float 0x3FECB06820000000, float 0x3FECD39420000000, float 0x3FECF5D340000000, float 0x3FED1732C0000000, float 0x3FED37BEA0000000, float 0x3FED578200000000, float 0x3FED768700000000, float 0x3FED94D740000000, float 0x3FEDB27B60000000, float 0x3FEDCF7B60000000, float 0x3FEDEBDEE0000000, float 0x3FEE07AD00000000, float 0x3FEE22EC00000000, float 0x3FEE3DA240000000, float 0x3FEE57D560000000, float 0x3FEE718AA0000000, float 0x3FEE8AC720000000, float 0x3FEEA38FA0000000, float 0x3FEEBBE880000000, float 0x3FEED3D5E0000000, float 0x3FEEEB5BE0000000, float 0x3FEF027E20000000, float 0x3FEF194020000000, float 0x3FEF2FA560000000, float 0x3FEF45B0C0000000, float 0x3FEF5B6580000000, float 0x3FEF70C660000000, float 0x3FEF85D620000000, float 0x3FEF9A9740000000, float 0x3FEFAF0C40000000, float 0x3FEFC33780000000, float 0x3FEFD71B20000000, float 0x3FEFEAB960000000, float 0x3FEFFE1420000000, float 0x3FF00896C0000000, float 0x3FF01203A0000000, float 0x3FF01B5180000000, float 0x3FF0248160000000, float 0x3FF02D9400000000, float 0x3FF0368A00000000], [64 x float] [float 0x3FE5AB9FC0000000, float 0x3FE6309620000000, float 0x3FE6A85100000000, float 0x3FE7156AA0000000, float 0x3FE779C600000000, float 0x3FE7D6CCE0000000, float 0x3FE82D9620000000, float 0x3FE87EFD20000000, float 0x3FE8CBB1E0000000, float 0x3FE91443C0000000, float 0x3FE9592980000000, float 0x3FE99AC620000000, float 0x3FE9D96DC0000000, float 0x3FEA1567C0000000, float 0x3FEA4EF1E0000000, float 0x3FEA8641A0000000, float 0x3FEABB85A0000000, float 0x3FEAEEE6E0000000, float 0x3FEB2089A0000000, float 0x3FEB508E20000000, float 0x3FEB7F1120000000, float 0x3FEBAC2C60000000, float 0x3FEBD7F720000000, float 0x3FEC028640000000, float 0x3FEC2BECC0000000, float 0x3FEC543C00000000, float 0x3FEC7B83A0000000, float 0x3FECA1D240000000, float 0x3FECC73520000000, float 0x3FECEBB840000000, float 0x3FED0F6720000000, float 0x3FED324BE0000000, float 0x3FED547040000000, float 0x3FED75DD40000000, float 0x3FED969B00000000, float 0x3FEDB6B180000000, float 0x3FEDD627C0000000, float 0x3FEDF50480000000, float 0x3FEE134E40000000, float 0x3FEE310AC0000000, float 0x3FEE4E3FA0000000, float 0x3FEE6AF220000000, float 0x3FEE872740000000, float 0x3FEEA2E380000000, float 0x3FEEBE2B40000000, float 0x3FEED902C0000000, float 0x3FEEF36DE0000000, float 0x3FEF0D7060000000, float 0x3FEF270DC0000000, float 0x3FEF404940000000, float 0x3FEF592620000000, float 0x3FEF71A760000000, float 0x3FEF89CFE0000000, float 0x3FEFA1A240000000, float 0x3FEFB92160000000, float 0x3FEFD04F60000000, float 0x3FEFE72F00000000, float 0x3FEFFDC240000000, float 0x3FF00A05A0000000, float 0x3FF0150620000000, float 0x3FF01FE3A0000000, float 0x3FF02A9F00000000, float 0x3FF0353920000000, float 0x3FF03FB320000000], [64 x float] [float 0x3FE47F2740000000, float 0x3FE50F1FE0000000, float 0x3FE5912E40000000, float 0x3FE6080640000000, float 0x3FE6759F20000000, float 0x3FE6DB72A0000000, float 0x3FE73AA4C0000000, float 0x3FE7941B60000000, float 0x3FE7E88F80000000, float 0x3FE8389860000000, float 0x3FE884B2E0000000, float 0x3FE8CD4800000000, float 0x3FE912B040000000, float 0x3FE95537C0000000, float 0x3FE9951FC0000000, float 0x3FE9D2A100000000, float 0x3FEA0DED20000000, float 0x3FEA473000000000, float 0x3FEA7E9000000000, float 0x3FEAB42FC0000000, float 0x3FEAE82DC0000000, float 0x3FEB1AA5A0000000, float 0x3FEB4BB020000000, float 0x3FEB7B63E0000000, float 0x3FEBA9D520000000, float 0x3FEBD71660000000, float 0x3FEC0338A0000000, float 0x3FEC2E4B80000000, float 0x3FEC585D20000000, float 0x3FEC817A80000000, float 0x3FECA9B000000000, float 0x3FECD108C0000000, float 0x3FECF78F00000000, float 0x3FED1D4C80000000, float 0x3FED424A20000000, float 0x3FED669060000000, float 0x3FED8A26E0000000, float 0x3FEDAD1520000000, float 0x3FEDCF61E0000000, float 0x3FEDF11380000000, float 0x3FEE123020000000, float 0x3FEE32BD60000000, float 0x3FEE52C080000000, float 0x3FEE723EC0000000, float 0x3FEE913CC0000000, float 0x3FEEAFBEE0000000, float 0x3FEECDC9A0000000, float 0x3FEEEB6100000000, float 0x3FEF0888A0000000, float 0x3FEF254460000000, float 0x3FEF419780000000, float 0x3FEF5D8580000000, float 0x3FEF791140000000, float 0x3FEF943E00000000, float 0x3FEFAF0E60000000, float 0x3FEFC98520000000, float 0x3FEFE3A500000000, float 0x3FEFFD7040000000, float 0x3FF00B74A0000000, float 0x3FF0180940000000, float 0x3FF0247700000000, float 0x3FF030BF00000000, float 0x3FF03CE200000000, float 0x3FF048E140000000], [64 x float] [float 0x3FE362F500000000, float 0x3FE3FC69A0000000, float 0x3FE4877A40000000, float 0x3FE506E9C0000000, float 0x3FE57CBB20000000, float 0x3FE5EA72A0000000, float 0x3FE6513C60000000, float 0x3FE6B205A0000000, float 0x3FE70D8DC0000000, float 0x3FE7647100000000, float 0x3FE7B73120000000, float 0x3FE8063B00000000, float 0x3FE851EAE0000000, float 0x3FE89A8FC0000000, float 0x3FE8E06E00000000, float 0x3FE923C0C0000000, float 0x3FE964BC00000000, float 0x3FE9A38D80000000, float 0x3FE9E05DA0000000, float 0x3FEA1B5080000000, float 0x3FEA548660000000, float 0x3FEA8C1C20000000, float 0x3FEAC22C00000000, float 0x3FEAF6CD80000000, float 0x3FEB2A1640000000, float 0x3FEB5C19A0000000, float 0x3FEB8CE9C0000000, float 0x3FEBBC96C0000000, float 0x3FEBEB3000000000, float 0x3FEC18C320000000, float 0x3FEC455D00000000, float 0x3FEC7109A0000000, float 0x3FEC9BD3E0000000, float 0x3FECC5C600000000, float 0x3FECEEE980000000, float 0x3FED174760000000, float 0x3FED3EE7C0000000, float 0x3FED65D280000000, float 0x3FED8C0F00000000, float 0x3FEDB1A3E0000000, float 0x3FEDD697A0000000, float 0x3FEDFAF060000000, float 0x3FEE1EB3E0000000, float 0x3FEE41E740000000, float 0x3FEE648FC0000000, float 0x3FEE86B240000000, float 0x3FEEA85320000000, float 0x3FEEC976E0000000, float 0x3FEEEA2180000000, float 0x3FEF0A56E0000000, float 0x3FEF2A1AC0000000, float 0x3FEF497080000000, float 0x3FEF685BA0000000, float 0x3FEF86DF60000000, float 0x3FEFA4FEA0000000, float 0x3FEFC2BC60000000, float 0x3FEFE01B60000000, float 0x3FEFFD1E40000000, float 0x3FF00CE3E0000000, float 0x3FF01B0D00000000, float 0x3FF0290BC0000000, float 0x3FF036E140000000, float 0x3FF0448E80000000, float 0x3FF05214A0000000], [64 x float] [float 0x3FE2562720000000, float 0x3FE2F7B2E0000000, float 0x3FE38A8FC0000000, float 0x3FE41185C0000000, float 0x3FE48E9D60000000, float 0x3FE5035FA0000000, float 0x3FE570FD40000000, float 0x3FE5D867C0000000, float 0x3FE63A6220000000, float 0x3FE6978BE0000000, float 0x3FE6F069E0000000, float 0x3FE7456B80000000, float 0x3FE796EF80000000, float 0x3FE7E54720000000, float 0x3FE830B8A0000000, float 0x3FE87980E0000000, float 0x3FE8BFD5A0000000, float 0x3FE903E600000000, float 0x3FE945DBC0000000, float 0x3FE985DC60000000, float 0x3FE9C40940000000, float 0x3FEA008040000000, float 0x3FEA3B5CA0000000, float 0x3FEA74B6E0000000, float 0x3FEAACA540000000, float 0x3FEAE33C40000000, float 0x3FEB188E80000000, float 0x3FEB4CACE0000000, float 0x3FEB7FA760000000, float 0x3FEBB18C60000000, float 0x3FEBE26920000000, float 0x3FEC124A40000000, float 0x3FEC413B40000000, float 0x3FEC6F46A0000000, float 0x3FEC9C7680000000, float 0x3FECC8D420000000, float 0x3FECF46840000000, float 0x3FED1F3B00000000, float 0x3FED495420000000, float 0x3FED72BAA0000000, float 0x3FED9B7540000000, float 0x3FEDC38AA0000000, float 0x3FEDEB0060000000, float 0x3FEE11DC80000000, float 0x3FEE382420000000, float 0x3FEE5DDC80000000, float 0x3FEE830A40000000, float 0x3FEEA7B200000000, float 0x3FEECBD820000000, float 0x3FEEEF80A0000000, float 0x3FEF12AF80000000, float 0x3FEF356860000000, float 0x3FEF57AEE0000000, float 0x3FEF798660000000, float 0x3FEF9AF200000000, float 0x3FEFBBF500000000, float 0x3FEFDC9220000000, float 0x3FEFFCCC60000000, float 0x3FF00E5320000000, float 0x3FF01E1140000000, float 0x3FF02DA1C0000000, float 0x3FF03D05E0000000, float 0x3FF04C3EA0000000, float 0x3FF05B4D40000000], [64 x float] [float 0x3FE157E860000000, float 0x3FE2004520000000, float 0x3FE299D120000000, float 0x3FE32751A0000000, float 0x3FE3AACE60000000, float 0x3FE425D100000000, float 0x3FE4998B60000000, float 0x3FE506F0A0000000, float 0x3FE56EC4E0000000, float 0x3FE5D1A980000000, float 0x3FE63024C0000000, float 0x3FE68AA760000000, float 0x3FE6E191C0000000, float 0x3FE7353640000000, float 0x3FE785DC40000000, float 0x3FE7D3C200000000, float 0x3FE81F1E00000000, float 0x3FE86820A0000000, float 0x3FE8AEF480000000, float 0x3FE8F3BFE0000000, float 0x3FE936A500000000, float 0x3FE977C280000000, float 0x3FE9B73460000000, float 0x3FE9F513C0000000, float 0x3FEA3177A0000000, float 0x3FEA6C74C0000000, float 0x3FEAA61EA0000000, float 0x3FEADE86A0000000, float 0x3FEB15BD00000000, float 0x3FEB4BD0C0000000, float 0x3FEB80CFA0000000, float 0x3FEBB4C6A0000000, float 0x3FEBE7C180000000, float 0x3FEC19CB40000000, float 0x3FEC4AEE60000000, float 0x3FEC7B3480000000, float 0x3FECAAA680000000, float 0x3FECD94D00000000, float 0x3FED072FE0000000, float 0x3FED3456A0000000, float 0x3FED60C820000000, float 0x3FED8C8B20000000, float 0x3FEDB7A5C0000000, float 0x3FEDE21E00000000, float 0x3FEE0BF980000000, float 0x3FEE353D60000000, float 0x3FEE5DEEC0000000, float 0x3FEE861240000000, float 0x3FEEADAC60000000, float 0x3FEED4C1A0000000, float 0x3FEEFB55E0000000, float 0x3FEF216D20000000, float 0x3FEF470B00000000, float 0x3FEF6C3300000000, float 0x3FEF90E8A0000000, float 0x3FEFB52F00000000, float 0x3FEFD90940000000, float 0x3FEFFC7A60000000, float 0x3FF00FC280000000, float 0x3FF0211600000000, float 0x3FF0323900000000, float 0x3FF0432CC0000000, float 0x3FF053F260000000, float 0x3FF0648B00000000], [64 x float] [float 0x3FE0676EE0000000, float 0x3FE1157300000000, float 0x3FE1B4A880000000, float 0x3FE247CAA0000000, float 0x3FE2D0DBC0000000, float 0x3FE3516260000000, float 0x3FE3CA8E60000000, float 0x3FE43D51E0000000, float 0x3FE4AA70C0000000, float 0x3FE5128C60000000, float 0x3FE5762B20000000, float 0x3FE5D5BE40000000, float 0x3FE631A680000000, float 0x3FE68A36A0000000, float 0x3FE6DFB6C0000000, float 0x3FE7326580000000, float 0x3FE7827A20000000, float 0x3FE7D02540000000, float 0x3FE81B9240000000, float 0x3FE864E7E0000000, float 0x3FE8AC48A0000000, float 0x3FE8F1D400000000, float 0x3FE935A600000000, float 0x3FE977D880000000, float 0x3FE9B882C0000000, float 0x3FE9F7BA00000000, float 0x3FEA359200000000, float 0x3FEA721CC0000000, float 0x3FEAAD6A80000000, float 0x3FEAE78AE0000000, float 0x3FEB208BC0000000, float 0x3FEB587A80000000, float 0x3FEB8F6300000000, float 0x3FEBC550E0000000, float 0x3FEBFA4EA0000000, float 0x3FEC2E6620000000, float 0x3FEC61A0A0000000, float 0x3FEC940700000000, float 0x3FECC5A120000000, float 0x3FECF676C0000000, float 0x3FED268F40000000, float 0x3FED55F140000000, float 0x3FED84A340000000, float 0x3FEDB2AB60000000, float 0x3FEDE00F60000000, float 0x3FEE0CD4A0000000, float 0x3FEE390040000000, float 0x3FEE649740000000, float 0x3FEE8F9E40000000, float 0x3FEEBA19C0000000, float 0x3FEEE40DE0000000, float 0x3FEF0D7EA0000000, float 0x3FEF366FE0000000, float 0x3FEF5EE560000000, float 0x3FEF86E280000000, float 0x3FEFAE6AA0000000, float 0x3FEFD580E0000000, float 0x3FEFFC2860000000, float 0x3FF0113220000000, float 0x3FF0241B80000000, float 0x3FF036D1A0000000, float 0x3FF0495600000000, float 0x3FF05BA9C0000000, float 0x3FF06DCE00000000]], align 16
@wmavoice_energy_table = internal constant [128 x float] [float 0x3F9167FB20000000, float 0x3F91FBC4E0000000, float 0x3F92947580000000, float 0x3F933236A0000000, float 0x3F93D53320000000, float 0x3F947D9760000000, float 0x3F952B9180000000, float 0x3F95DF50C0000000, float 0x3F96990620000000, float 0x3F9758E460000000, float 0x3F981F1F80000000, float 0x3F98EBEDE0000000, float 0x3F99BF8720000000, float 0x3F9A9A2500000000, float 0x3F9B7C0300000000, float 0x3F9C655EC0000000, float 0x3F9D5677E0000000, float 0x3F9E4F9020000000, float 0x3F9F50EB40000000, float 0x3FA02D67C0000000, float 0x3FA0B6C2A0000000, float 0x3FA144ABC0000000, float 0x3FA1D749C0000000, float 0x3FA26EC4A0000000, float 0x3FA30B45C0000000, float 0x3FA3ACF7A0000000, float 0x3FA4540640000000, float 0x3FA5009F80000000, float 0x3FA5B2F220000000, float 0x3FA66B2EC0000000, float 0x3FA72987A0000000, float 0x3FA7EE30C0000000, float 0x3FA8B95FA0000000, float 0x3FA98B4BA0000000, float 0x3FAA642E00000000, float 0x3FAB4441E0000000, float 0x3FAC2BC440000000, float 0x3FAD1AF440000000, float 0x3FAE121320000000, float 0x3FAF116440000000, float 0x3FB00C9680000000, float 0x3FB094DAC0000000, float 0x3FB121A400000000, float 0x3FB1B318A0000000, float 0x3FB2496040000000, float 0x3FB2E4A3C0000000, float 0x3FB3850DA0000000, float 0x3FB42AC980000000, float 0x3FB4D60480000000, float 0x3FB586ED60000000, float 0x3FB63DB460000000, float 0x3FB6FA8B20000000, float 0x3FB7BDA540000000, float 0x3FB8873800000000, float 0x3FB9577A20000000, float 0x3FBA2EA480000000, float 0x3FBB0CF1E0000000, float 0x3FBBF29E80000000, float 0x3FBCDFE960000000, float 0x3FBDD51300000000, float 0x3FBED25E20000000, float 0x3FBFD80FE0000000, float 0x3FC07337C0000000, float 0x3FC0FEE360000000, float 0x3FC18F30E0000000, float 0x3FC22447A0000000, float 0x3FC2BE5040000000, float 0x3FC35D74C0000000, float 0x3FC401E060000000, float 0x3FC4ABC000000000, float 0x3FC55B4200000000, float 0x3FC6109620000000, float 0x3FC6CBEDE0000000, float 0x3FC78D7C40000000, float 0x3FC8557600000000, float 0x3FC92411C0000000, float 0x3FC9F987A0000000, float 0x3FCAD61200000000, float 0x3FCBB9ECC0000000, float 0x3FCCA55640000000, float 0x3FCD988E80000000, float 0x3FCE93D7C0000000, float 0x3FCF9776A0000000, float 0x3FD051D8E0000000, float 0x3FD0DC6940000000, float 0x3FD16B9200000000, float 0x3FD1FF7A60000000, float 0x3FD2984A80000000, float 0x3FD3362C20000000, float 0x3FD3D94A20000000, float 0x3FD481D140000000, float 0x3FD52FEF40000000, float 0x3FD5E3D380000000, float 0x3FD69DAF40000000, float 0x3FD75DB500000000, float 0x3FD8241900000000, float 0x3FD8F111A0000000, float 0x3FD9C4D680000000, float 0x3FDA9FA180000000, float 0x3FDB81AE00000000, float 0x3FDC6B3A00000000, float 0x3FDD5C84C0000000, float 0x3FDE55D060000000, float 0x3FDF576080000000, float 0x3FE030BDC0000000, float 0x3FE0BA3500000000, float 0x3FE1483B60000000, float 0x3FE1DAF7C0000000, float 0x3FE27291E0000000, float 0x3FE30F3320000000, float 0x3FE3B10660000000, float 0x3FE4583780000000, float 0x3FE504F440000000, float 0x3FE5B76BA0000000, float 0x3FE66FCE60000000, float 0x3FE72E4E80000000, float 0x3FE7F32040000000, float 0x3FE8BE7900000000, float 0x3FE9909040000000, float 0x3FEA699F60000000, float 0x3FEB49E160000000, float 0x3FEC319380000000, float 0x3FED20F4E0000000, float 0x3FEE1846C0000000, float 0x3FEF17CC80000000, float 0x3FF00FE5E0000000, float 0x3FF0984640000000, float 0x3FF1252C80000000], align 16

; Function Attrs: cold nounwind optsize uwtable
define internal i32 @wmavoice_decode_init(%struct.AVCodecContext* %ctx) #0 !dbg !1667 {
entry:
  %x.addr.i169 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i169, metadata !2035, metadata !2040), !dbg !2041
  %x.addr.i164 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i164, metadata !2035, metadata !2040), !dbg !2043
  %x.addr.i159 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i159, metadata !2035, metadata !2040), !dbg !2045
  %x.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i, metadata !2035, metadata !2040), !dbg !2047
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.AVCodecContext*, align 8
  %n = alloca i32, align 4
  %flags = alloca i32, align 4
  %pitch_range = alloca i32, align 4
  %lsp16_flag = alloca i32, align 4
  %s = alloca %struct.WMAVoiceContext*, align 8
  %min_sr = alloca i32, align 4
  %max_sr = alloca i32, align 4
  store %struct.AVCodecContext* %ctx, %struct.AVCodecContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVCodecContext** %ctx.addr, metadata !2049, metadata !2040), !dbg !2050
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2051, metadata !2040), !dbg !2052
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !2053, metadata !2040), !dbg !2054
  call void @llvm.dbg.declare(metadata i32* %pitch_range, metadata !2055, metadata !2040), !dbg !2056
  call void @llvm.dbg.declare(metadata i32* %lsp16_flag, metadata !2057, metadata !2040), !dbg !2058
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s, metadata !2059, metadata !2040), !dbg !2060
  %0 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2061
  %priv_data = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i32 0, i32 6, !dbg !2062
  %1 = load i8*, i8** %priv_data, align 8, !dbg !2062
  %2 = bitcast i8* %1 to %struct.WMAVoiceContext*, !dbg !2061
  store %struct.WMAVoiceContext* %2, %struct.WMAVoiceContext** %s, align 8, !dbg !2060
  %call = call i32 @pthread_once(i32* @wmavoice_decode_init.init_static_once, void ()* @wmavoice_init_static_data), !dbg !2063
  %3 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2064
  %extradata_size = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %3, i32 0, i32 16, !dbg !2066
  %4 = load i32, i32* %extradata_size, align 8, !dbg !2066
  %cmp = icmp ne i32 %4, 46, !dbg !2067
  br i1 %cmp, label %if.then, label %if.end, !dbg !2068

if.then:                                          ; preds = %entry
  %5 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2069
  %6 = bitcast %struct.AVCodecContext* %5 to i8*, !dbg !2069
  %7 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2071
  %extradata_size1 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %7, i32 0, i32 16, !dbg !2072
  %8 = load i32, i32* %extradata_size1, align 8, !dbg !2072
  call void (i8*, i32, i8*, ...) @av_log(i8* %6, i32 16, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.2, i32 0, i32 0), i32 %8), !dbg !2073
  store i32 -1094995529, i32* %retval, align 4, !dbg !2074
  br label %return, !dbg !2074

if.end:                                           ; preds = %entry
  %9 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2075
  %block_align = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %9, i32 0, i32 87, !dbg !2077
  %10 = load i32, i32* %block_align, align 4, !dbg !2077
  %cmp2 = icmp sle i32 %10, 0, !dbg !2078
  br i1 %cmp2, label %if.then3, label %if.end5, !dbg !2079

if.then3:                                         ; preds = %if.end
  %11 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2080
  %12 = bitcast %struct.AVCodecContext* %11 to i8*, !dbg !2080
  %13 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2082
  %block_align4 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %13, i32 0, i32 87, !dbg !2083
  %14 = load i32, i32* %block_align4, align 4, !dbg !2083
  call void (i8*, i32, i8*, ...) @av_log(i8* %12, i32 16, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i32 0, i32 0), i32 %14), !dbg !2084
  store i32 -1094995529, i32* %retval, align 4, !dbg !2085
  br label %return, !dbg !2085

if.end5:                                          ; preds = %if.end
  %15 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2086
  %extradata = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %15, i32 0, i32 15, !dbg !2087
  %16 = load i8*, i8** %extradata, align 8, !dbg !2087
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 18, !dbg !2088
  %17 = bitcast i8* %add.ptr to %union.unaligned_32*, !dbg !2089
  %l = bitcast %union.unaligned_32* %17 to i32*, !dbg !2089
  %18 = load i32, i32* %l, align 1, !dbg !2089
  store i32 %18, i32* %flags, align 4, !dbg !2090
  %19 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2091
  %block_align6 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %19, i32 0, i32 87, !dbg !2092
  %20 = load i32, i32* %block_align6, align 4, !dbg !2092
  store i32 %20, i32* %x.addr.i, align 4, !dbg !2093
  %21 = load i32, i32* %x.addr.i, align 4, !dbg !2094
  %sub.i = sub nsw i32 %21, 1, !dbg !2095
  %shl.i = shl i32 %sub.i, 1, !dbg !2096
  %or.i = or i32 %shl.i, 1, !dbg !2097
  %22 = call i32 @llvm.ctlz.i32(i32 %or.i, i1 true) #9, !dbg !2098
  %sub1.i = sub nsw i32 31, %22, !dbg !2099
  %add = add nsw i32 3, %sub1.i, !dbg !2100
  %23 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2101
  %spillover_bitsize = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %23, i32 0, i32 2, !dbg !2102
  store i32 %add, i32* %spillover_bitsize, align 4, !dbg !2103
  %24 = load i32, i32* %flags, align 4, !dbg !2104
  %and = and i32 %24, 1, !dbg !2105
  %25 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2106
  %do_apf = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %25, i32 0, i32 4, !dbg !2107
  store i32 %and, i32* %do_apf, align 4, !dbg !2108
  %26 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2109
  %do_apf8 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %26, i32 0, i32 4, !dbg !2111
  %27 = load i32, i32* %do_apf8, align 4, !dbg !2111
  %tobool = icmp ne i32 %27, 0, !dbg !2109
  br i1 %tobool, label %if.then9, label %if.end30, !dbg !2112

if.then9:                                         ; preds = %if.end5
  %28 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2113
  %rdft = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %28, i32 0, i32 40, !dbg !2115
  %call10 = call i32 @ff_rdft_init(%struct.RDFTContext* %rdft, i32 7, i32 0), !dbg !2116
  %29 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2117
  %irdft = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %29, i32 0, i32 41, !dbg !2118
  %call11 = call i32 @ff_rdft_init(%struct.RDFTContext* %irdft, i32 7, i32 1), !dbg !2119
  %30 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2120
  %dct = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %30, i32 0, i32 42, !dbg !2121
  %call12 = call i32 @ff_dct_init(%struct.DCTContext* %dct, i32 6, i32 2), !dbg !2122
  %31 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2123
  %dst = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %31, i32 0, i32 43, !dbg !2124
  %call13 = call i32 @ff_dct_init(%struct.DCTContext* %dst, i32 6, i32 3), !dbg !2125
  %32 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2126
  %cos = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %32, i32 0, i32 45, !dbg !2127
  %arraydecay = getelementptr inbounds [511 x float], [511 x float]* %cos, i32 0, i32 0, !dbg !2126
  call void @ff_sine_window_init(float* %arraydecay, i32 256), !dbg !2128
  %33 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2129
  %sin = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %33, i32 0, i32 44, !dbg !2130
  %arrayidx = getelementptr inbounds [511 x float], [511 x float]* %sin, i64 0, i64 255, !dbg !2129
  %34 = bitcast float* %arrayidx to i8*, !dbg !2131
  %35 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2132
  %cos14 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %35, i32 0, i32 45, !dbg !2133
  %arraydecay15 = getelementptr inbounds [511 x float], [511 x float]* %cos14, i32 0, i32 0, !dbg !2131
  %36 = bitcast float* %arraydecay15 to i8*, !dbg !2131
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %36, i64 1024, i32 4, i1 false), !dbg !2131
  store i32 0, i32* %n, align 4, !dbg !2134
  br label %for.cond, !dbg !2136

for.cond:                                         ; preds = %for.inc, %if.then9
  %37 = load i32, i32* %n, align 4, !dbg !2137
  %cmp16 = icmp slt i32 %37, 255, !dbg !2140
  br i1 %cmp16, label %for.body, label %for.end, !dbg !2141

for.body:                                         ; preds = %for.cond
  %38 = load i32, i32* %n, align 4, !dbg !2142
  %sub = sub nsw i32 510, %38, !dbg !2144
  %idxprom = sext i32 %sub to i64, !dbg !2145
  %39 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2145
  %sin17 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %39, i32 0, i32 44, !dbg !2146
  %arrayidx18 = getelementptr inbounds [511 x float], [511 x float]* %sin17, i64 0, i64 %idxprom, !dbg !2145
  %40 = load float, float* %arrayidx18, align 4, !dbg !2145
  %sub19 = fsub float -0.000000e+00, %40, !dbg !2147
  %41 = load i32, i32* %n, align 4, !dbg !2148
  %idxprom20 = sext i32 %41 to i64, !dbg !2149
  %42 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2149
  %sin21 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %42, i32 0, i32 44, !dbg !2150
  %arrayidx22 = getelementptr inbounds [511 x float], [511 x float]* %sin21, i64 0, i64 %idxprom20, !dbg !2149
  store float %sub19, float* %arrayidx22, align 4, !dbg !2151
  %43 = load i32, i32* %n, align 4, !dbg !2152
  %idxprom23 = sext i32 %43 to i64, !dbg !2153
  %44 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2153
  %cos24 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %44, i32 0, i32 45, !dbg !2154
  %arrayidx25 = getelementptr inbounds [511 x float], [511 x float]* %cos24, i64 0, i64 %idxprom23, !dbg !2153
  %45 = load float, float* %arrayidx25, align 4, !dbg !2153
  %46 = load i32, i32* %n, align 4, !dbg !2155
  %sub26 = sub nsw i32 510, %46, !dbg !2156
  %idxprom27 = sext i32 %sub26 to i64, !dbg !2157
  %47 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2157
  %cos28 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %47, i32 0, i32 45, !dbg !2158
  %arrayidx29 = getelementptr inbounds [511 x float], [511 x float]* %cos28, i64 0, i64 %idxprom27, !dbg !2157
  store float %45, float* %arrayidx29, align 4, !dbg !2159
  br label %for.inc, !dbg !2160

for.inc:                                          ; preds = %for.body
  %48 = load i32, i32* %n, align 4, !dbg !2161
  %inc = add nsw i32 %48, 1, !dbg !2161
  store i32 %inc, i32* %n, align 4, !dbg !2161
  br label %for.cond, !dbg !2163, !llvm.loop !2164

for.end:                                          ; preds = %for.cond
  br label %if.end30, !dbg !2166

if.end30:                                         ; preds = %for.end, %if.end5
  %49 = load i32, i32* %flags, align 4, !dbg !2167
  %shr = ashr i32 %49, 2, !dbg !2168
  %and31 = and i32 %shr, 15, !dbg !2169
  %50 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2170
  %denoise_strength = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %50, i32 0, i32 5, !dbg !2171
  store i32 %and31, i32* %denoise_strength, align 8, !dbg !2172
  %51 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2173
  %denoise_strength32 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %51, i32 0, i32 5, !dbg !2175
  %52 = load i32, i32* %denoise_strength32, align 8, !dbg !2175
  %cmp33 = icmp sge i32 %52, 12, !dbg !2176
  br i1 %cmp33, label %if.then34, label %if.end36, !dbg !2177

if.then34:                                        ; preds = %if.end30
  %53 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2178
  %54 = bitcast %struct.AVCodecContext* %53 to i8*, !dbg !2178
  %55 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2180
  %denoise_strength35 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %55, i32 0, i32 5, !dbg !2181
  %56 = load i32, i32* %denoise_strength35, align 8, !dbg !2181
  call void (i8*, i32, i8*, ...) @av_log(i8* %54, i32 16, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i32 0, i32 0), i32 %56), !dbg !2182
  store i32 -1094995529, i32* %retval, align 4, !dbg !2183
  br label %return, !dbg !2183

if.end36:                                         ; preds = %if.end30
  %57 = load i32, i32* %flags, align 4, !dbg !2184
  %and37 = and i32 %57, 64, !dbg !2185
  %tobool38 = icmp ne i32 %and37, 0, !dbg !2186
  %lnot = xor i1 %tobool38, true, !dbg !2186
  %lnot39 = xor i1 %lnot, true, !dbg !2187
  %lnot.ext = zext i1 %lnot39 to i32, !dbg !2187
  %58 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2188
  %denoise_tilt_corr = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %58, i32 0, i32 6, !dbg !2189
  store i32 %lnot.ext, i32* %denoise_tilt_corr, align 4, !dbg !2190
  %59 = load i32, i32* %flags, align 4, !dbg !2191
  %shr40 = ashr i32 %59, 7, !dbg !2192
  %and41 = and i32 %shr40, 15, !dbg !2193
  %60 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2194
  %dc_level = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %60, i32 0, i32 7, !dbg !2195
  store i32 %and41, i32* %dc_level, align 16, !dbg !2196
  %61 = load i32, i32* %flags, align 4, !dbg !2197
  %and42 = and i32 %61, 8192, !dbg !2198
  %tobool43 = icmp ne i32 %and42, 0, !dbg !2199
  %lnot44 = xor i1 %tobool43, true, !dbg !2199
  %lnot46 = xor i1 %lnot44, true, !dbg !2200
  %lnot.ext47 = zext i1 %lnot46 to i32, !dbg !2200
  %62 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2201
  %lsp_q_mode = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %62, i32 0, i32 9, !dbg !2202
  store i32 %lnot.ext47, i32* %lsp_q_mode, align 8, !dbg !2203
  %63 = load i32, i32* %flags, align 4, !dbg !2204
  %and48 = and i32 %63, 16384, !dbg !2205
  %tobool49 = icmp ne i32 %and48, 0, !dbg !2206
  %lnot50 = xor i1 %tobool49, true, !dbg !2206
  %lnot52 = xor i1 %lnot50, true, !dbg !2207
  %lnot.ext53 = zext i1 %lnot52 to i32, !dbg !2207
  %64 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2208
  %lsp_def_mode = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %64, i32 0, i32 10, !dbg !2209
  store i32 %lnot.ext53, i32* %lsp_def_mode, align 4, !dbg !2210
  %65 = load i32, i32* %flags, align 4, !dbg !2211
  %and54 = and i32 %65, 4096, !dbg !2212
  store i32 %and54, i32* %lsp16_flag, align 4, !dbg !2213
  %66 = load i32, i32* %lsp16_flag, align 4, !dbg !2214
  %tobool55 = icmp ne i32 %66, 0, !dbg !2214
  br i1 %tobool55, label %if.then56, label %if.else, !dbg !2216

if.then56:                                        ; preds = %if.end36
  %67 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2217
  %lsps = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %67, i32 0, i32 8, !dbg !2219
  store i32 16, i32* %lsps, align 4, !dbg !2220
  br label %if.end58, !dbg !2221

if.else:                                          ; preds = %if.end36
  %68 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2222
  %lsps57 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %68, i32 0, i32 8, !dbg !2224
  store i32 10, i32* %lsps57, align 4, !dbg !2225
  br label %if.end58

if.end58:                                         ; preds = %if.else, %if.then56
  store i32 0, i32* %n, align 4, !dbg !2226
  br label %for.cond59, !dbg !2228

for.cond59:                                       ; preds = %for.inc69, %if.end58
  %69 = load i32, i32* %n, align 4, !dbg !2229
  %70 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2232
  %lsps60 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %70, i32 0, i32 8, !dbg !2233
  %71 = load i32, i32* %lsps60, align 4, !dbg !2233
  %cmp61 = icmp slt i32 %69, %71, !dbg !2234
  br i1 %cmp61, label %for.body62, label %for.end71, !dbg !2235

for.body62:                                       ; preds = %for.cond59
  %72 = load i32, i32* %n, align 4, !dbg !2236
  %conv = sitofp i32 %72 to double, !dbg !2236
  %add63 = fadd double %conv, 1.000000e+00, !dbg !2237
  %mul = fmul double 0x400921FB54442D18, %add63, !dbg !2238
  %73 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2239
  %lsps64 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %73, i32 0, i32 8, !dbg !2240
  %74 = load i32, i32* %lsps64, align 4, !dbg !2240
  %conv65 = sitofp i32 %74 to double, !dbg !2239
  %add66 = fadd double %conv65, 1.000000e+00, !dbg !2241
  %div = fdiv double %mul, %add66, !dbg !2242
  %75 = load i32, i32* %n, align 4, !dbg !2243
  %idxprom67 = sext i32 %75 to i64, !dbg !2244
  %76 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2244
  %prev_lsps = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %76, i32 0, i32 25, !dbg !2245
  %arrayidx68 = getelementptr inbounds [16 x double], [16 x double]* %prev_lsps, i64 0, i64 %idxprom67, !dbg !2244
  store double %div, double* %arrayidx68, align 8, !dbg !2246
  br label %for.inc69, !dbg !2244

for.inc69:                                        ; preds = %for.body62
  %77 = load i32, i32* %n, align 4, !dbg !2247
  %inc70 = add nsw i32 %77, 1, !dbg !2247
  store i32 %inc70, i32* %n, align 4, !dbg !2247
  br label %for.cond59, !dbg !2249, !llvm.loop !2250

for.end71:                                        ; preds = %for.cond59
  %78 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2252
  %gb = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %78, i32 0, i32 0, !dbg !2253
  %79 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2254
  %extradata72 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %79, i32 0, i32 15, !dbg !2255
  %80 = load i8*, i8** %extradata72, align 8, !dbg !2255
  %add.ptr73 = getelementptr inbounds i8, i8* %80, i64 22, !dbg !2256
  %81 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2257
  %extradata_size74 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %81, i32 0, i32 16, !dbg !2258
  %82 = load i32, i32* %extradata_size74, align 8, !dbg !2258
  %sub75 = sub nsw i32 %82, 22, !dbg !2259
  %shl = shl i32 %sub75, 3, !dbg !2260
  %call76 = call i32 @init_get_bits(%struct.GetBitContext* %gb, i8* %add.ptr73, i32 %shl), !dbg !2261
  %83 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2262
  %gb77 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %83, i32 0, i32 0, !dbg !2264
  %84 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2265
  %vbm_tree = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %84, i32 0, i32 1, !dbg !2266
  %arraydecay78 = getelementptr inbounds [25 x i8], [25 x i8]* %vbm_tree, i32 0, i32 0, !dbg !2265
  %call79 = call i32 @decode_vbmtree(%struct.GetBitContext* %gb77, i8* %arraydecay78), !dbg !2267
  %cmp80 = icmp slt i32 %call79, 0, !dbg !2268
  br i1 %cmp80, label %if.then82, label %if.end83, !dbg !2269

if.then82:                                        ; preds = %for.end71
  %85 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2270
  %86 = bitcast %struct.AVCodecContext* %85 to i8*, !dbg !2270
  call void (i8*, i32, i8*, ...) @av_log(i8* %86, i32 16, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i32 0, i32 0)), !dbg !2272
  store i32 -1094995529, i32* %retval, align 4, !dbg !2273
  br label %return, !dbg !2273

if.end83:                                         ; preds = %for.end71
  %87 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2274
  %sample_rate = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %87, i32 0, i32 82, !dbg !2275
  %88 = load i32, i32* %sample_rate, align 8, !dbg !2275
  %shl84 = shl i32 %88, 8, !dbg !2276
  %div85 = sdiv i32 %shl84, 400, !dbg !2277
  %add86 = add nsw i32 %div85, 50, !dbg !2278
  %shr87 = ashr i32 %add86, 8, !dbg !2279
  %89 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2280
  %min_pitch_val = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %89, i32 0, i32 11, !dbg !2281
  store i32 %shr87, i32* %min_pitch_val, align 32, !dbg !2282
  %90 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2283
  %sample_rate88 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %90, i32 0, i32 82, !dbg !2284
  %91 = load i32, i32* %sample_rate88, align 8, !dbg !2284
  %shl89 = shl i32 %91, 8, !dbg !2285
  %mul90 = mul nsw i32 %shl89, 37, !dbg !2286
  %div91 = sdiv i32 %mul90, 2000, !dbg !2287
  %add92 = add nsw i32 %div91, 50, !dbg !2288
  %shr93 = ashr i32 %add92, 8, !dbg !2289
  %92 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2290
  %max_pitch_val = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %92, i32 0, i32 12, !dbg !2291
  store i32 %shr93, i32* %max_pitch_val, align 4, !dbg !2292
  %93 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2293
  %max_pitch_val94 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %93, i32 0, i32 12, !dbg !2294
  %94 = load i32, i32* %max_pitch_val94, align 4, !dbg !2294
  %95 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2295
  %min_pitch_val95 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %95, i32 0, i32 11, !dbg !2296
  %96 = load i32, i32* %min_pitch_val95, align 32, !dbg !2296
  %sub96 = sub nsw i32 %94, %96, !dbg !2297
  store i32 %sub96, i32* %pitch_range, align 4, !dbg !2298
  %97 = load i32, i32* %pitch_range, align 4, !dbg !2299
  %cmp97 = icmp sle i32 %97, 0, !dbg !2301
  br i1 %cmp97, label %if.then99, label %if.end100, !dbg !2302

if.then99:                                        ; preds = %if.end83
  %98 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2303
  %99 = bitcast %struct.AVCodecContext* %98 to i8*, !dbg !2303
  call void (i8*, i32, i8*, ...) @av_log(i8* %99, i32 16, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6, i32 0, i32 0)), !dbg !2305
  store i32 -1094995529, i32* %retval, align 4, !dbg !2306
  br label %return, !dbg !2306

if.end100:                                        ; preds = %if.end83
  %100 = load i32, i32* %pitch_range, align 4, !dbg !2307
  store i32 %100, i32* %x.addr.i169, align 4, !dbg !2308
  %101 = load i32, i32* %x.addr.i169, align 4, !dbg !2309
  %sub.i170 = sub nsw i32 %101, 1, !dbg !2310
  %shl.i171 = shl i32 %sub.i170, 1, !dbg !2311
  %or.i172 = or i32 %shl.i171, 1, !dbg !2312
  %102 = call i32 @llvm.ctlz.i32(i32 %or.i172, i1 true) #9, !dbg !2313
  %sub1.i173 = sub nsw i32 31, %102, !dbg !2314
  %103 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2315
  %pitch_nbits = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %103, i32 0, i32 13, !dbg !2316
  store i32 %sub1.i173, i32* %pitch_nbits, align 8, !dbg !2317
  %104 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2318
  %last_pitch_val = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %104, i32 0, i32 26, !dbg !2319
  store i32 40, i32* %last_pitch_val, align 32, !dbg !2320
  %105 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2321
  %last_acb_type = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %105, i32 0, i32 27, !dbg !2322
  store i32 0, i32* %last_acb_type, align 4, !dbg !2323
  %106 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2324
  %max_pitch_val102 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %106, i32 0, i32 12, !dbg !2325
  %107 = load i32, i32* %max_pitch_val102, align 4, !dbg !2325
  %add103 = add nsw i32 %107, 8, !dbg !2326
  %108 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2327
  %history_nsamples = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %108, i32 0, i32 3, !dbg !2328
  store i32 %add103, i32* %history_nsamples, align 32, !dbg !2329
  %109 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2330
  %min_pitch_val104 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %109, i32 0, i32 11, !dbg !2332
  %110 = load i32, i32* %min_pitch_val104, align 32, !dbg !2332
  %cmp105 = icmp slt i32 %110, 1, !dbg !2333
  br i1 %cmp105, label %if.then110, label %lor.lhs.false, !dbg !2334

lor.lhs.false:                                    ; preds = %if.end100
  %111 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2335
  %history_nsamples107 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %111, i32 0, i32 3, !dbg !2337
  %112 = load i32, i32* %history_nsamples107, align 32, !dbg !2337
  %cmp108 = icmp sgt i32 %112, 416, !dbg !2338
  br i1 %cmp108, label %if.then110, label %if.end112, !dbg !2339

if.then110:                                       ; preds = %lor.lhs.false, %if.end100
  call void @llvm.dbg.declare(metadata i32* %min_sr, metadata !2340, metadata !2040), !dbg !2342
  store i32 322, i32* %min_sr, align 4, !dbg !2342
  call void @llvm.dbg.declare(metadata i32* %max_sr, metadata !2343, metadata !2040), !dbg !2344
  store i32 22097, i32* %max_sr, align 4, !dbg !2344
  %113 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2345
  %114 = bitcast %struct.AVCodecContext* %113 to i8*, !dbg !2345
  %115 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2346
  %sample_rate111 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %115, i32 0, i32 82, !dbg !2347
  %116 = load i32, i32* %sample_rate111, align 8, !dbg !2347
  %117 = load i32, i32* %min_sr, align 4, !dbg !2348
  %118 = load i32, i32* %max_sr, align 4, !dbg !2349
  call void (i8*, i32, i8*, ...) @av_log(i8* %114, i32 16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.7, i32 0, i32 0), i32 %116, i32 %117, i32 %118), !dbg !2350
  store i32 -38, i32* %retval, align 4, !dbg !2351
  br label %return, !dbg !2351

if.end112:                                        ; preds = %lor.lhs.false
  %119 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2352
  %min_pitch_val113 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %119, i32 0, i32 11, !dbg !2353
  %120 = load i32, i32* %min_pitch_val113, align 32, !dbg !2353
  %conv114 = trunc i32 %120 to i16, !dbg !2352
  %121 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2354
  %block_conv_table = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %121, i32 0, i32 18, !dbg !2355
  %arrayidx115 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table, i64 0, i64 0, !dbg !2354
  store i16 %conv114, i16* %arrayidx115, align 4, !dbg !2356
  %122 = load i32, i32* %pitch_range, align 4, !dbg !2357
  %mul116 = mul nsw i32 %122, 25, !dbg !2358
  %shr117 = ashr i32 %mul116, 6, !dbg !2359
  %conv118 = trunc i32 %shr117 to i16, !dbg !2360
  %123 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2361
  %block_conv_table119 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %123, i32 0, i32 18, !dbg !2362
  %arrayidx120 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table119, i64 0, i64 1, !dbg !2361
  store i16 %conv118, i16* %arrayidx120, align 2, !dbg !2363
  %124 = load i32, i32* %pitch_range, align 4, !dbg !2364
  %mul121 = mul nsw i32 %124, 44, !dbg !2365
  %shr122 = ashr i32 %mul121, 6, !dbg !2366
  %conv123 = trunc i32 %shr122 to i16, !dbg !2367
  %125 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2368
  %block_conv_table124 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %125, i32 0, i32 18, !dbg !2369
  %arrayidx125 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table124, i64 0, i64 2, !dbg !2368
  store i16 %conv123, i16* %arrayidx125, align 4, !dbg !2370
  %126 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2371
  %max_pitch_val126 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %126, i32 0, i32 12, !dbg !2372
  %127 = load i32, i32* %max_pitch_val126, align 4, !dbg !2372
  %sub127 = sub nsw i32 %127, 1, !dbg !2373
  %conv128 = trunc i32 %sub127 to i16, !dbg !2371
  %128 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2374
  %block_conv_table129 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %128, i32 0, i32 18, !dbg !2375
  %arrayidx130 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table129, i64 0, i64 3, !dbg !2374
  store i16 %conv128, i16* %arrayidx130, align 2, !dbg !2376
  %129 = load i32, i32* %pitch_range, align 4, !dbg !2377
  %shr131 = ashr i32 %129, 3, !dbg !2378
  %and132 = and i32 %shr131, -16, !dbg !2379
  %130 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2380
  %block_delta_pitch_hrange = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %130, i32 0, i32 17, !dbg !2381
  store i32 %and132, i32* %block_delta_pitch_hrange, align 8, !dbg !2382
  %131 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2383
  %block_delta_pitch_hrange133 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %131, i32 0, i32 17, !dbg !2385
  %132 = load i32, i32* %block_delta_pitch_hrange133, align 8, !dbg !2385
  %cmp134 = icmp sle i32 %132, 0, !dbg !2386
  br i1 %cmp134, label %if.then136, label %if.end137, !dbg !2387

if.then136:                                       ; preds = %if.end112
  %133 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2388
  %134 = bitcast %struct.AVCodecContext* %133 to i8*, !dbg !2388
  call void (i8*, i32, i8*, ...) @av_log(i8* %134, i32 16, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.8, i32 0, i32 0)), !dbg !2390
  store i32 -1094995529, i32* %retval, align 4, !dbg !2391
  br label %return, !dbg !2391

if.end137:                                        ; preds = %if.end112
  %135 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2392
  %block_delta_pitch_hrange138 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %135, i32 0, i32 17, !dbg !2393
  %136 = load i32, i32* %block_delta_pitch_hrange138, align 8, !dbg !2393
  store i32 %136, i32* %x.addr.i164, align 4, !dbg !2394
  %137 = load i32, i32* %x.addr.i164, align 4, !dbg !2395
  %sub.i165 = sub nsw i32 %137, 1, !dbg !2396
  %shl.i166 = shl i32 %sub.i165, 1, !dbg !2397
  %or.i167 = or i32 %shl.i166, 1, !dbg !2398
  %138 = call i32 @llvm.ctlz.i32(i32 %or.i167, i1 true) #9, !dbg !2399
  %sub1.i168 = sub nsw i32 31, %138, !dbg !2400
  %add140 = add nsw i32 1, %sub1.i168, !dbg !2401
  %139 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2402
  %block_delta_pitch_nbits = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %139, i32 0, i32 16, !dbg !2403
  store i32 %add140, i32* %block_delta_pitch_nbits, align 4, !dbg !2404
  %140 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2405
  %block_conv_table141 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %140, i32 0, i32 18, !dbg !2406
  %arrayidx142 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table141, i64 0, i64 2, !dbg !2405
  %141 = load i16, i16* %arrayidx142, align 4, !dbg !2405
  %conv143 = zext i16 %141 to i32, !dbg !2405
  %142 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2407
  %block_conv_table144 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %142, i32 0, i32 18, !dbg !2408
  %arrayidx145 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table144, i64 0, i64 3, !dbg !2407
  %143 = load i16, i16* %arrayidx145, align 2, !dbg !2407
  %conv146 = zext i16 %143 to i32, !dbg !2407
  %add147 = add nsw i32 %conv143, %conv146, !dbg !2409
  %add148 = add nsw i32 %add147, 1, !dbg !2410
  %144 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2411
  %block_conv_table149 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %144, i32 0, i32 18, !dbg !2412
  %arrayidx150 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table149, i64 0, i64 1, !dbg !2411
  %145 = load i16, i16* %arrayidx150, align 2, !dbg !2411
  %conv151 = zext i16 %145 to i32, !dbg !2411
  %146 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2413
  %min_pitch_val152 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %146, i32 0, i32 11, !dbg !2414
  %147 = load i32, i32* %min_pitch_val152, align 32, !dbg !2414
  %mul153 = mul nsw i32 2, %147, !dbg !2415
  %sub154 = sub nsw i32 %conv151, %mul153, !dbg !2416
  %mul155 = mul nsw i32 2, %sub154, !dbg !2417
  %add156 = add nsw i32 %add148, %mul155, !dbg !2418
  %148 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2419
  %block_pitch_range = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %148, i32 0, i32 15, !dbg !2420
  store i32 %add156, i32* %block_pitch_range, align 16, !dbg !2421
  %149 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2422
  %block_pitch_range157 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %149, i32 0, i32 15, !dbg !2423
  %150 = load i32, i32* %block_pitch_range157, align 16, !dbg !2423
  store i32 %150, i32* %x.addr.i159, align 4, !dbg !2424
  %151 = load i32, i32* %x.addr.i159, align 4, !dbg !2425
  %sub.i160 = sub nsw i32 %151, 1, !dbg !2426
  %shl.i161 = shl i32 %sub.i160, 1, !dbg !2427
  %or.i162 = or i32 %shl.i161, 1, !dbg !2428
  %152 = call i32 @llvm.ctlz.i32(i32 %or.i162, i1 true) #9, !dbg !2429
  %sub1.i163 = sub nsw i32 31, %152, !dbg !2430
  %153 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2431
  %block_pitch_nbits = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %153, i32 0, i32 14, !dbg !2432
  store i32 %sub1.i163, i32* %block_pitch_nbits, align 4, !dbg !2433
  %154 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2434
  %channels = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %154, i32 0, i32 83, !dbg !2435
  store i32 1, i32* %channels, align 4, !dbg !2436
  %155 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2437
  %channel_layout = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %155, i32 0, i32 89, !dbg !2438
  store i64 4, i64* %channel_layout, align 8, !dbg !2439
  %156 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2440
  %sample_fmt = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %156, i32 0, i32 84, !dbg !2441
  store i32 3, i32* %sample_fmt, align 8, !dbg !2442
  store i32 0, i32* %retval, align 4, !dbg !2443
  br label %return, !dbg !2443

return:                                           ; preds = %if.end137, %if.then136, %if.then110, %if.then99, %if.then82, %if.then34, %if.then3, %if.then
  %157 = load i32, i32* %retval, align 4, !dbg !2444
  ret i32 %157, !dbg !2444
}

; Function Attrs: nounwind uwtable
define internal i32 @wmavoice_decode_packet(%struct.AVCodecContext* %ctx, i8* %data, i32* %got_frame_ptr, %struct.AVPacket* %avpkt) #1 !dbg !2445 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.AVCodecContext*, align 8
  %data.addr = alloca i8*, align 8
  %got_frame_ptr.addr = alloca i32*, align 8
  %avpkt.addr = alloca %struct.AVPacket*, align 8
  %s = alloca %struct.WMAVoiceContext*, align 8
  %gb = alloca %struct.GetBitContext*, align 8
  %size = alloca i32, align 4
  %res = alloca i32, align 4
  %pos = alloca i32, align 4
  %cnt = alloca i32, align 4
  %cnt74 = alloca i32, align 4
  store %struct.AVCodecContext* %ctx, %struct.AVCodecContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVCodecContext** %ctx.addr, metadata !2446, metadata !2040), !dbg !2447
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !2448, metadata !2040), !dbg !2449
  store i32* %got_frame_ptr, i32** %got_frame_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %got_frame_ptr.addr, metadata !2450, metadata !2040), !dbg !2451
  store %struct.AVPacket* %avpkt, %struct.AVPacket** %avpkt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVPacket** %avpkt.addr, metadata !2452, metadata !2040), !dbg !2453
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s, metadata !2454, metadata !2040), !dbg !2455
  %0 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2456
  %priv_data = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i32 0, i32 6, !dbg !2457
  %1 = load i8*, i8** %priv_data, align 8, !dbg !2457
  %2 = bitcast i8* %1 to %struct.WMAVoiceContext*, !dbg !2456
  store %struct.WMAVoiceContext* %2, %struct.WMAVoiceContext** %s, align 8, !dbg !2455
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb, metadata !2458, metadata !2040), !dbg !2459
  %3 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2460
  %gb1 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %3, i32 0, i32 0, !dbg !2461
  store %struct.GetBitContext* %gb1, %struct.GetBitContext** %gb, align 8, !dbg !2459
  call void @llvm.dbg.declare(metadata i32* %size, metadata !2462, metadata !2040), !dbg !2463
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2464, metadata !2040), !dbg !2465
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !2466, metadata !2040), !dbg !2467
  %4 = load %struct.AVPacket*, %struct.AVPacket** %avpkt.addr, align 8, !dbg !2468
  %size2 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %4, i32 0, i32 4, !dbg !2470
  %5 = load i32, i32* %size2, align 8, !dbg !2470
  store i32 %5, i32* %size, align 4, !dbg !2471
  br label %for.cond, !dbg !2472

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %size, align 4, !dbg !2473
  %7 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2476
  %block_align = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %7, i32 0, i32 87, !dbg !2477
  %8 = load i32, i32* %block_align, align 4, !dbg !2477
  %cmp = icmp sgt i32 %6, %8, !dbg !2478
  br i1 %cmp, label %for.body, label %for.end, !dbg !2479

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !2480

for.inc:                                          ; preds = %for.body
  %9 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2482
  %block_align3 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %9, i32 0, i32 87, !dbg !2484
  %10 = load i32, i32* %block_align3, align 4, !dbg !2484
  %11 = load i32, i32* %size, align 4, !dbg !2485
  %sub = sub nsw i32 %11, %10, !dbg !2485
  store i32 %sub, i32* %size, align 4, !dbg !2485
  br label %for.cond, !dbg !2486, !llvm.loop !2487

for.end:                                          ; preds = %for.cond
  %12 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2489
  %gb4 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %12, i32 0, i32 0, !dbg !2490
  %13 = load %struct.AVPacket*, %struct.AVPacket** %avpkt.addr, align 8, !dbg !2491
  %data5 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %13, i32 0, i32 3, !dbg !2492
  %14 = load i8*, i8** %data5, align 8, !dbg !2492
  %15 = load i32, i32* %size, align 4, !dbg !2493
  %call = call i32 @init_get_bits8(%struct.GetBitContext* %gb4, i8* %14, i32 %15), !dbg !2494
  %16 = load i32, i32* %size, align 4, !dbg !2495
  %17 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2497
  %block_align6 = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %17, i32 0, i32 87, !dbg !2498
  %18 = load i32, i32* %block_align6, align 4, !dbg !2498
  %rem = srem i32 %16, %18, !dbg !2499
  %tobool = icmp ne i32 %rem, 0, !dbg !2499
  br i1 %tobool, label %if.else51, label %if.then, !dbg !2500

if.then:                                          ; preds = %for.end
  %19 = load i32, i32* %size, align 4, !dbg !2501
  %tobool7 = icmp ne i32 %19, 0, !dbg !2501
  br i1 %tobool7, label %if.else, label %if.then8, !dbg !2504

if.then8:                                         ; preds = %if.then
  %20 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2505
  %spillover_nbits = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %20, i32 0, i32 19, !dbg !2507
  store i32 0, i32* %spillover_nbits, align 4, !dbg !2508
  %21 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2509
  %nb_superframes = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %21, i32 0, i32 36, !dbg !2510
  store i32 0, i32* %nb_superframes, align 16, !dbg !2511
  br label %if.end13, !dbg !2512

if.else:                                          ; preds = %if.then
  %22 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2513
  %call9 = call i32 @parse_packet_header(%struct.WMAVoiceContext* %22), !dbg !2516
  store i32 %call9, i32* %res, align 4, !dbg !2517
  %cmp10 = icmp slt i32 %call9, 0, !dbg !2518
  br i1 %cmp10, label %if.then11, label %if.end, !dbg !2519

if.then11:                                        ; preds = %if.else
  %23 = load i32, i32* %res, align 4, !dbg !2520
  store i32 %23, i32* %retval, align 4, !dbg !2521
  br label %return, !dbg !2521

if.end:                                           ; preds = %if.else
  %24 = load i32, i32* %res, align 4, !dbg !2522
  %25 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2523
  %nb_superframes12 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %25, i32 0, i32 36, !dbg !2524
  store i32 %24, i32* %nb_superframes12, align 16, !dbg !2525
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then8
  %26 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2526
  %sframe_cache_size = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %26, i32 0, i32 23, !dbg !2528
  %27 = load i32, i32* %sframe_cache_size, align 16, !dbg !2528
  %cmp14 = icmp sgt i32 %27, 0, !dbg !2529
  br i1 %cmp14, label %if.then15, label %if.else44, !dbg !2530

if.then15:                                        ; preds = %if.end13
  call void @llvm.dbg.declare(metadata i32* %cnt, metadata !2531, metadata !2040), !dbg !2533
  %28 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !2534
  %call16 = call i32 @get_bits_count(%struct.GetBitContext* %28), !dbg !2535
  store i32 %call16, i32* %cnt, align 4, !dbg !2533
  %29 = load i32, i32* %cnt, align 4, !dbg !2536
  %30 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2538
  %spillover_nbits17 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %30, i32 0, i32 19, !dbg !2539
  %31 = load i32, i32* %spillover_nbits17, align 4, !dbg !2539
  %add = add nsw i32 %29, %31, !dbg !2540
  %32 = load %struct.AVPacket*, %struct.AVPacket** %avpkt.addr, align 8, !dbg !2541
  %size18 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %32, i32 0, i32 4, !dbg !2542
  %33 = load i32, i32* %size18, align 8, !dbg !2542
  %mul = mul nsw i32 %33, 8, !dbg !2543
  %cmp19 = icmp sgt i32 %add, %mul, !dbg !2544
  br i1 %cmp19, label %if.then20, label %if.end25, !dbg !2545

if.then20:                                        ; preds = %if.then15
  %34 = load %struct.AVPacket*, %struct.AVPacket** %avpkt.addr, align 8, !dbg !2546
  %size21 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %34, i32 0, i32 4, !dbg !2548
  %35 = load i32, i32* %size21, align 8, !dbg !2548
  %mul22 = mul nsw i32 %35, 8, !dbg !2549
  %36 = load i32, i32* %cnt, align 4, !dbg !2550
  %sub23 = sub nsw i32 %mul22, %36, !dbg !2551
  %37 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2552
  %spillover_nbits24 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %37, i32 0, i32 19, !dbg !2553
  store i32 %sub23, i32* %spillover_nbits24, align 4, !dbg !2554
  br label %if.end25, !dbg !2555

if.end25:                                         ; preds = %if.then20, %if.then15
  %38 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2556
  %pb = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %38, i32 0, i32 24, !dbg !2557
  %39 = load %struct.AVPacket*, %struct.AVPacket** %avpkt.addr, align 8, !dbg !2558
  %data26 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %39, i32 0, i32 3, !dbg !2559
  %40 = load i8*, i8** %data26, align 8, !dbg !2559
  %41 = load i32, i32* %size, align 4, !dbg !2560
  %42 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !2561
  %43 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2562
  %spillover_nbits27 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %43, i32 0, i32 19, !dbg !2563
  %44 = load i32, i32* %spillover_nbits27, align 4, !dbg !2563
  call void @copy_bits(%struct.PutBitContext* %pb, i8* %40, i32 %41, %struct.GetBitContext* %42, i32 %44), !dbg !2564
  %45 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2565
  %pb28 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %45, i32 0, i32 24, !dbg !2566
  call void @flush_put_bits(%struct.PutBitContext* %pb28), !dbg !2567
  %46 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2568
  %spillover_nbits29 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %46, i32 0, i32 19, !dbg !2569
  %47 = load i32, i32* %spillover_nbits29, align 4, !dbg !2569
  %48 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2570
  %sframe_cache_size30 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %48, i32 0, i32 23, !dbg !2571
  %49 = load i32, i32* %sframe_cache_size30, align 16, !dbg !2572
  %add31 = add nsw i32 %49, %47, !dbg !2572
  store i32 %add31, i32* %sframe_cache_size30, align 16, !dbg !2572
  %50 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2573
  %51 = load i8*, i8** %data.addr, align 8, !dbg !2575
  %52 = bitcast i8* %51 to %struct.AVFrame*, !dbg !2575
  %53 = load i32*, i32** %got_frame_ptr.addr, align 8, !dbg !2576
  %call32 = call i32 @synth_superframe(%struct.AVCodecContext* %50, %struct.AVFrame* %52, i32* %53), !dbg !2577
  store i32 %call32, i32* %res, align 4, !dbg !2578
  %cmp33 = icmp eq i32 %call32, 0, !dbg !2579
  br i1 %cmp33, label %land.lhs.true, label %if.else38, !dbg !2580

land.lhs.true:                                    ; preds = %if.end25
  %54 = load i32*, i32** %got_frame_ptr.addr, align 8, !dbg !2581
  %55 = load i32, i32* %54, align 4, !dbg !2582
  %tobool34 = icmp ne i32 %55, 0, !dbg !2582
  br i1 %tobool34, label %if.then35, label %if.else38, !dbg !2583

if.then35:                                        ; preds = %land.lhs.true
  %56 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2585
  %spillover_nbits36 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %56, i32 0, i32 19, !dbg !2587
  %57 = load i32, i32* %spillover_nbits36, align 4, !dbg !2587
  %58 = load i32, i32* %cnt, align 4, !dbg !2588
  %add37 = add nsw i32 %58, %57, !dbg !2588
  store i32 %add37, i32* %cnt, align 4, !dbg !2588
  %59 = load i32, i32* %cnt, align 4, !dbg !2589
  %and = and i32 %59, 7, !dbg !2590
  %60 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2591
  %skip_bits_next = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %60, i32 0, i32 21, !dbg !2592
  store i32 %and, i32* %skip_bits_next, align 4, !dbg !2593
  %61 = load i32, i32* %cnt, align 4, !dbg !2594
  %shr = ashr i32 %61, 3, !dbg !2595
  store i32 %shr, i32* %res, align 4, !dbg !2596
  %62 = load i32, i32* %res, align 4, !dbg !2597
  store i32 %62, i32* %retval, align 4, !dbg !2598
  br label %return, !dbg !2598

if.else38:                                        ; preds = %land.lhs.true, %if.end25
  %63 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !2599
  %64 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2600
  %spillover_nbits39 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %64, i32 0, i32 19, !dbg !2601
  %65 = load i32, i32* %spillover_nbits39, align 4, !dbg !2601
  %66 = load i32, i32* %cnt, align 4, !dbg !2602
  %sub40 = sub nsw i32 %65, %66, !dbg !2603
  %67 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !2604
  %call41 = call i32 @get_bits_count(%struct.GetBitContext* %67), !dbg !2605
  %add42 = add nsw i32 %sub40, %call41, !dbg !2606
  call void @skip_bits_long(%struct.GetBitContext* %63, i32 %add42), !dbg !2607
  br label %if.end43

if.end43:                                         ; preds = %if.else38
  br label %if.end50, !dbg !2608

if.else44:                                        ; preds = %if.end13
  %68 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2609
  %spillover_nbits45 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %68, i32 0, i32 19, !dbg !2612
  %69 = load i32, i32* %spillover_nbits45, align 4, !dbg !2612
  %tobool46 = icmp ne i32 %69, 0, !dbg !2609
  br i1 %tobool46, label %if.then47, label %if.end49, !dbg !2609

if.then47:                                        ; preds = %if.else44
  %70 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !2613
  %71 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2615
  %spillover_nbits48 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %71, i32 0, i32 19, !dbg !2616
  %72 = load i32, i32* %spillover_nbits48, align 4, !dbg !2616
  call void @skip_bits_long(%struct.GetBitContext* %70, i32 %72), !dbg !2617
  br label %if.end49, !dbg !2618

if.end49:                                         ; preds = %if.then47, %if.else44
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.end43
  br label %if.end57, !dbg !2619

if.else51:                                        ; preds = %for.end
  %73 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2620
  %skip_bits_next52 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %73, i32 0, i32 21, !dbg !2623
  %74 = load i32, i32* %skip_bits_next52, align 4, !dbg !2623
  %tobool53 = icmp ne i32 %74, 0, !dbg !2620
  br i1 %tobool53, label %if.then54, label %if.end56, !dbg !2620

if.then54:                                        ; preds = %if.else51
  %75 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !2624
  %76 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2625
  %skip_bits_next55 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %76, i32 0, i32 21, !dbg !2626
  %77 = load i32, i32* %skip_bits_next55, align 4, !dbg !2626
  call void @skip_bits(%struct.GetBitContext* %75, i32 %77), !dbg !2627
  br label %if.end56, !dbg !2627

if.end56:                                         ; preds = %if.then54, %if.else51
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.end50
  %78 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2628
  %sframe_cache_size58 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %78, i32 0, i32 23, !dbg !2629
  store i32 0, i32* %sframe_cache_size58, align 16, !dbg !2630
  %79 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2631
  %skip_bits_next59 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %79, i32 0, i32 21, !dbg !2632
  store i32 0, i32* %skip_bits_next59, align 4, !dbg !2633
  %80 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !2634
  %call60 = call i32 @get_bits_left(%struct.GetBitContext* %80), !dbg !2635
  store i32 %call60, i32* %pos, align 4, !dbg !2636
  %81 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2637
  %nb_superframes61 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %81, i32 0, i32 36, !dbg !2639
  %82 = load i32, i32* %nb_superframes61, align 16, !dbg !2640
  %dec = add nsw i32 %82, -1, !dbg !2640
  store i32 %dec, i32* %nb_superframes61, align 16, !dbg !2640
  %cmp62 = icmp eq i32 %82, 0, !dbg !2641
  br i1 %cmp62, label %if.then63, label %if.else64, !dbg !2642

if.then63:                                        ; preds = %if.end57
  %83 = load i32*, i32** %got_frame_ptr.addr, align 8, !dbg !2643
  store i32 0, i32* %83, align 4, !dbg !2645
  %84 = load i32, i32* %size, align 4, !dbg !2646
  store i32 %84, i32* %retval, align 4, !dbg !2647
  br label %return, !dbg !2647

if.else64:                                        ; preds = %if.end57
  %85 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2648
  %nb_superframes65 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %85, i32 0, i32 36, !dbg !2650
  %86 = load i32, i32* %nb_superframes65, align 16, !dbg !2650
  %cmp66 = icmp sgt i32 %86, 0, !dbg !2651
  br i1 %cmp66, label %if.then67, label %if.else81, !dbg !2652

if.then67:                                        ; preds = %if.else64
  %87 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2653
  %88 = load i8*, i8** %data.addr, align 8, !dbg !2656
  %89 = bitcast i8* %88 to %struct.AVFrame*, !dbg !2656
  %90 = load i32*, i32** %got_frame_ptr.addr, align 8, !dbg !2657
  %call68 = call i32 @synth_superframe(%struct.AVCodecContext* %87, %struct.AVFrame* %89, i32* %90), !dbg !2658
  store i32 %call68, i32* %res, align 4, !dbg !2659
  %cmp69 = icmp slt i32 %call68, 0, !dbg !2660
  br i1 %cmp69, label %if.then70, label %if.else71, !dbg !2661

if.then70:                                        ; preds = %if.then67
  %91 = load i32, i32* %res, align 4, !dbg !2662
  store i32 %91, i32* %retval, align 4, !dbg !2664
  br label %return, !dbg !2664

if.else71:                                        ; preds = %if.then67
  %92 = load i32*, i32** %got_frame_ptr.addr, align 8, !dbg !2665
  %93 = load i32, i32* %92, align 4, !dbg !2667
  %tobool72 = icmp ne i32 %93, 0, !dbg !2667
  br i1 %tobool72, label %if.then73, label %if.end79, !dbg !2668

if.then73:                                        ; preds = %if.else71
  call void @llvm.dbg.declare(metadata i32* %cnt74, metadata !2669, metadata !2040), !dbg !2671
  %94 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !2672
  %call75 = call i32 @get_bits_count(%struct.GetBitContext* %94), !dbg !2673
  store i32 %call75, i32* %cnt74, align 4, !dbg !2671
  %95 = load i32, i32* %cnt74, align 4, !dbg !2674
  %and76 = and i32 %95, 7, !dbg !2675
  %96 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2676
  %skip_bits_next77 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %96, i32 0, i32 21, !dbg !2677
  store i32 %and76, i32* %skip_bits_next77, align 4, !dbg !2678
  %97 = load i32, i32* %cnt74, align 4, !dbg !2679
  %shr78 = ashr i32 %97, 3, !dbg !2680
  store i32 %shr78, i32* %res, align 4, !dbg !2681
  %98 = load i32, i32* %res, align 4, !dbg !2682
  store i32 %98, i32* %retval, align 4, !dbg !2683
  br label %return, !dbg !2683

if.end79:                                         ; preds = %if.else71
  br label %if.end80

if.end80:                                         ; preds = %if.end79
  br label %if.end90, !dbg !2684

if.else81:                                        ; preds = %if.else64
  %99 = load i32, i32* %pos, align 4, !dbg !2685
  %100 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2688
  %sframe_cache_size82 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %100, i32 0, i32 23, !dbg !2689
  store i32 %99, i32* %sframe_cache_size82, align 16, !dbg !2690
  %cmp83 = icmp sgt i32 %99, 0, !dbg !2691
  br i1 %cmp83, label %if.then84, label %if.end89, !dbg !2692

if.then84:                                        ; preds = %if.else81
  %101 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2693
  %pb85 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %101, i32 0, i32 24, !dbg !2695
  %102 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2696
  %sframe_cache = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %102, i32 0, i32 22, !dbg !2697
  %arraydecay = getelementptr inbounds [320 x i8], [320 x i8]* %sframe_cache, i32 0, i32 0, !dbg !2696
  call void @init_put_bits(%struct.PutBitContext* %pb85, i8* %arraydecay, i32 256), !dbg !2698
  %103 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2699
  %pb86 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %103, i32 0, i32 24, !dbg !2700
  %104 = load %struct.AVPacket*, %struct.AVPacket** %avpkt.addr, align 8, !dbg !2701
  %data87 = getelementptr inbounds %struct.AVPacket, %struct.AVPacket* %104, i32 0, i32 3, !dbg !2702
  %105 = load i8*, i8** %data87, align 8, !dbg !2702
  %106 = load i32, i32* %size, align 4, !dbg !2703
  %107 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !2704
  %108 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2705
  %sframe_cache_size88 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %108, i32 0, i32 23, !dbg !2706
  %109 = load i32, i32* %sframe_cache_size88, align 16, !dbg !2706
  call void @copy_bits(%struct.PutBitContext* %pb86, i8* %105, i32 %106, %struct.GetBitContext* %107, i32 %109), !dbg !2707
  br label %if.end89, !dbg !2708

if.end89:                                         ; preds = %if.then84, %if.else81
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.end80
  br label %if.end91

if.end91:                                         ; preds = %if.end90
  %110 = load i32, i32* %size, align 4, !dbg !2709
  store i32 %110, i32* %retval, align 4, !dbg !2710
  br label %return, !dbg !2710

return:                                           ; preds = %if.end91, %if.then73, %if.then70, %if.then63, %if.then35, %if.then11
  %111 = load i32, i32* %retval, align 4, !dbg !2711
  ret i32 %111, !dbg !2711
}

; Function Attrs: cold nounwind optsize uwtable
define internal i32 @wmavoice_decode_end(%struct.AVCodecContext* %ctx) #0 !dbg !2712 {
entry:
  %ctx.addr = alloca %struct.AVCodecContext*, align 8
  %s = alloca %struct.WMAVoiceContext*, align 8
  store %struct.AVCodecContext* %ctx, %struct.AVCodecContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVCodecContext** %ctx.addr, metadata !2713, metadata !2040), !dbg !2714
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s, metadata !2715, metadata !2040), !dbg !2716
  %0 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2717
  %priv_data = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i32 0, i32 6, !dbg !2718
  %1 = load i8*, i8** %priv_data, align 8, !dbg !2718
  %2 = bitcast i8* %1 to %struct.WMAVoiceContext*, !dbg !2717
  store %struct.WMAVoiceContext* %2, %struct.WMAVoiceContext** %s, align 8, !dbg !2716
  %3 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2719
  %do_apf = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %3, i32 0, i32 4, !dbg !2721
  %4 = load i32, i32* %do_apf, align 4, !dbg !2721
  %tobool = icmp ne i32 %4, 0, !dbg !2719
  br i1 %tobool, label %if.then, label %if.end, !dbg !2722

if.then:                                          ; preds = %entry
  %5 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2723
  %rdft = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %5, i32 0, i32 40, !dbg !2725
  call void @ff_rdft_end(%struct.RDFTContext* %rdft), !dbg !2726
  %6 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2727
  %irdft = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %6, i32 0, i32 41, !dbg !2728
  call void @ff_rdft_end(%struct.RDFTContext* %irdft), !dbg !2729
  %7 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2730
  %dct = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %7, i32 0, i32 42, !dbg !2731
  call void @ff_dct_end(%struct.DCTContext* %dct), !dbg !2732
  %8 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2733
  %dst = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %8, i32 0, i32 43, !dbg !2734
  call void @ff_dct_end(%struct.DCTContext* %dst), !dbg !2735
  br label %if.end, !dbg !2736

if.end:                                           ; preds = %if.then, %entry
  ret i32 0, !dbg !2737
}

; Function Attrs: cold nounwind optsize uwtable
define internal void @wmavoice_flush(%struct.AVCodecContext* %ctx) #0 !dbg !2738 {
entry:
  %ctx.addr = alloca %struct.AVCodecContext*, align 8
  %s = alloca %struct.WMAVoiceContext*, align 8
  %n = alloca i32, align 4
  store %struct.AVCodecContext* %ctx, %struct.AVCodecContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVCodecContext** %ctx.addr, metadata !2739, metadata !2040), !dbg !2740
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s, metadata !2741, metadata !2040), !dbg !2742
  %0 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !2743
  %priv_data = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i32 0, i32 6, !dbg !2744
  %1 = load i8*, i8** %priv_data, align 8, !dbg !2744
  %2 = bitcast i8* %1 to %struct.WMAVoiceContext*, !dbg !2743
  store %struct.WMAVoiceContext* %2, %struct.WMAVoiceContext** %s, align 8, !dbg !2742
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2745, metadata !2040), !dbg !2746
  %3 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2747
  %postfilter_agc = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %3, i32 0, i32 46, !dbg !2748
  store float 0.000000e+00, float* %postfilter_agc, align 8, !dbg !2749
  %4 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2750
  %sframe_cache_size = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %4, i32 0, i32 23, !dbg !2751
  store i32 0, i32* %sframe_cache_size, align 16, !dbg !2752
  %5 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2753
  %skip_bits_next = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %5, i32 0, i32 21, !dbg !2754
  store i32 0, i32* %skip_bits_next, align 4, !dbg !2755
  store i32 0, i32* %n, align 4, !dbg !2756
  br label %for.cond, !dbg !2758

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load i32, i32* %n, align 4, !dbg !2759
  %7 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2762
  %lsps = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %7, i32 0, i32 8, !dbg !2763
  %8 = load i32, i32* %lsps, align 4, !dbg !2763
  %cmp = icmp slt i32 %6, %8, !dbg !2764
  br i1 %cmp, label %for.body, label %for.end, !dbg !2765

for.body:                                         ; preds = %for.cond
  %9 = load i32, i32* %n, align 4, !dbg !2766
  %conv = sitofp i32 %9 to double, !dbg !2766
  %add = fadd double %conv, 1.000000e+00, !dbg !2767
  %mul = fmul double 0x400921FB54442D18, %add, !dbg !2768
  %10 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2769
  %lsps1 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %10, i32 0, i32 8, !dbg !2770
  %11 = load i32, i32* %lsps1, align 4, !dbg !2770
  %conv2 = sitofp i32 %11 to double, !dbg !2769
  %add3 = fadd double %conv2, 1.000000e+00, !dbg !2771
  %div = fdiv double %mul, %add3, !dbg !2772
  %12 = load i32, i32* %n, align 4, !dbg !2773
  %idxprom = sext i32 %12 to i64, !dbg !2774
  %13 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2774
  %prev_lsps = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %13, i32 0, i32 25, !dbg !2775
  %arrayidx = getelementptr inbounds [16 x double], [16 x double]* %prev_lsps, i64 0, i64 %idxprom, !dbg !2774
  store double %div, double* %arrayidx, align 8, !dbg !2776
  br label %for.inc, !dbg !2774

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %n, align 4, !dbg !2777
  %inc = add nsw i32 %14, 1, !dbg !2777
  store i32 %inc, i32* %n, align 4, !dbg !2777
  br label %for.cond, !dbg !2779, !llvm.loop !2780

for.end:                                          ; preds = %for.cond
  %15 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2782
  %excitation_history = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %15, i32 0, i32 38, !dbg !2783
  %arraydecay = getelementptr inbounds [416 x float], [416 x float]* %excitation_history, i32 0, i32 0, !dbg !2784
  %16 = bitcast float* %arraydecay to i8*, !dbg !2784
  call void @llvm.memset.p0i8.i64(i8* %16, i8 0, i64 1664, i32 4, i1 false), !dbg !2784
  %17 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2785
  %synth_history = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %17, i32 0, i32 39, !dbg !2786
  %arraydecay4 = getelementptr inbounds [16 x float], [16 x float]* %synth_history, i32 0, i32 0, !dbg !2787
  %18 = bitcast float* %arraydecay4 to i8*, !dbg !2787
  call void @llvm.memset.p0i8.i64(i8* %18, i8 0, i64 64, i32 4, i1 false), !dbg !2787
  %19 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2788
  %gain_pred_err = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %19, i32 0, i32 37, !dbg !2789
  %arraydecay5 = getelementptr inbounds [6 x float], [6 x float]* %gain_pred_err, i32 0, i32 0, !dbg !2790
  %20 = bitcast float* %arraydecay5 to i8*, !dbg !2790
  call void @llvm.memset.p0i8.i64(i8* %20, i8 0, i64 24, i32 4, i1 false), !dbg !2790
  %21 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2791
  %do_apf = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %21, i32 0, i32 4, !dbg !2793
  %22 = load i32, i32* %do_apf, align 4, !dbg !2793
  %tobool = icmp ne i32 %22, 0, !dbg !2791
  br i1 %tobool, label %if.then, label %if.end, !dbg !2794

if.then:                                          ; preds = %for.end
  %23 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2795
  %lsps6 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %23, i32 0, i32 8, !dbg !2797
  %24 = load i32, i32* %lsps6, align 4, !dbg !2797
  %sub = sub nsw i32 16, %24, !dbg !2798
  %idxprom7 = sext i32 %sub to i64, !dbg !2799
  %25 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2799
  %synth_filter_out_buf = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %25, i32 0, i32 54, !dbg !2800
  %arrayidx8 = getelementptr inbounds [144 x float], [144 x float]* %synth_filter_out_buf, i64 0, i64 %idxprom7, !dbg !2799
  %26 = bitcast float* %arrayidx8 to i8*, !dbg !2801
  %27 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2802
  %lsps9 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %27, i32 0, i32 8, !dbg !2803
  %28 = load i32, i32* %lsps9, align 4, !dbg !2803
  %conv10 = sext i32 %28 to i64, !dbg !2802
  %mul11 = mul i64 4, %conv10, !dbg !2804
  call void @llvm.memset.p0i8.i64(i8* %26, i8 0, i64 %mul11, i32 4, i1 false), !dbg !2801
  %29 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2805
  %dcf_mem = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %29, i32 0, i32 47, !dbg !2806
  %arraydecay12 = getelementptr inbounds [2 x float], [2 x float]* %dcf_mem, i32 0, i32 0, !dbg !2807
  %30 = bitcast float* %arraydecay12 to i8*, !dbg !2807
  call void @llvm.memset.p0i8.i64(i8* %30, i8 0, i64 8, i32 4, i1 false), !dbg !2807
  %31 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2808
  %zero_exc_pf = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %31, i32 0, i32 48, !dbg !2809
  %arraydecay13 = getelementptr inbounds [896 x float], [896 x float]* %zero_exc_pf, i32 0, i32 0, !dbg !2810
  %32 = bitcast float* %arraydecay13 to i8*, !dbg !2810
  %33 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2811
  %history_nsamples = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %33, i32 0, i32 3, !dbg !2812
  %34 = load i32, i32* %history_nsamples, align 32, !dbg !2812
  %conv14 = sext i32 %34 to i64, !dbg !2811
  %mul15 = mul i64 4, %conv14, !dbg !2813
  call void @llvm.memset.p0i8.i64(i8* %32, i8 0, i64 %mul15, i32 4, i1 false), !dbg !2810
  %35 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !2814
  %denoise_filter_cache = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %35, i32 0, i32 49, !dbg !2815
  %arraydecay16 = getelementptr inbounds [160 x float], [160 x float]* %denoise_filter_cache, i32 0, i32 0, !dbg !2816
  %36 = bitcast float* %arraydecay16 to i8*, !dbg !2816
  call void @llvm.memset.p0i8.i64(i8* %36, i8 0, i64 640, i32 4, i1 false), !dbg !2816
  br label %if.end, !dbg !2817

if.end:                                           ; preds = %if.then, %for.end
  ret void, !dbg !2818
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

declare i32 @pthread_once(i32*, void ()*) #3

; Function Attrs: cold nounwind optsize uwtable
define internal void @wmavoice_init_static_data() #0 !dbg !1672 {
entry:
  br label %do.body, !dbg !2819, !llvm.loop !2820

do.body:                                          ; preds = %entry
  store [2 x i16]* getelementptr inbounds ([132 x [2 x i16]], [132 x [2 x i16]]* @wmavoice_init_static_data.table, i32 0, i32 0), [2 x i16]** getelementptr inbounds (%struct.VLC, %struct.VLC* @frame_type_vlc, i32 0, i32 1), align 8, !dbg !2821
  store i32 132, i32* getelementptr inbounds (%struct.VLC, %struct.VLC* @frame_type_vlc, i32 0, i32 3), align 4, !dbg !2824
  %call = call i32 @ff_init_vlc_sparse(%struct.VLC* @frame_type_vlc, i32 6, i32 22, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @wmavoice_init_static_data.bits, i32 0, i32 0), i32 1, i32 1, i8* bitcast ([22 x i16]* @wmavoice_init_static_data.codes to i8*), i32 2, i32 2, i8* null, i32 0, i32 0, i32 4), !dbg !2825
  br label %do.end, !dbg !2826

do.end:                                           ; preds = %do.body
  ret void, !dbg !2827
}

declare void @av_log(i8*, i32, i8*, ...) #3

declare i32 @ff_rdft_init(%struct.RDFTContext*, i32, i32) #3

declare i32 @ff_dct_init(%struct.DCTContext*, i32, i32) #3

declare void @ff_sine_window_init(float*, i32) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @init_get_bits(%struct.GetBitContext* %s, i8* %buffer, i32 %bit_size) #5 !dbg !2828 {
entry:
  %s.addr = alloca %struct.GetBitContext*, align 8
  %buffer.addr = alloca i8*, align 8
  %bit_size.addr = alloca i32, align 4
  %buffer_size = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !2831, metadata !2040), !dbg !2832
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !2833, metadata !2040), !dbg !2834
  store i32 %bit_size, i32* %bit_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bit_size.addr, metadata !2835, metadata !2040), !dbg !2836
  call void @llvm.dbg.declare(metadata i32* %buffer_size, metadata !2837, metadata !2040), !dbg !2838
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !2839, metadata !2040), !dbg !2840
  store i32 0, i32* %ret, align 4, !dbg !2840
  %0 = load i32, i32* %bit_size.addr, align 4, !dbg !2841
  %cmp = icmp sge i32 %0, 2147483135, !dbg !2843
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !2844

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %bit_size.addr, align 4, !dbg !2845
  %cmp1 = icmp slt i32 %1, 0, !dbg !2847
  br i1 %cmp1, label %if.then, label %lor.lhs.false2, !dbg !2848

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = load i8*, i8** %buffer.addr, align 8, !dbg !2849
  %tobool = icmp ne i8* %2, null, !dbg !2849
  br i1 %tobool, label %if.end, label %if.then, !dbg !2851

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  store i32 0, i32* %bit_size.addr, align 4, !dbg !2852
  store i8* null, i8** %buffer.addr, align 8, !dbg !2854
  store i32 -1094995529, i32* %ret, align 4, !dbg !2855
  br label %if.end, !dbg !2856

if.end:                                           ; preds = %if.then, %lor.lhs.false2
  %3 = load i32, i32* %bit_size.addr, align 4, !dbg !2857
  %add = add nsw i32 %3, 7, !dbg !2858
  %shr = ashr i32 %add, 3, !dbg !2859
  store i32 %shr, i32* %buffer_size, align 4, !dbg !2860
  %4 = load i8*, i8** %buffer.addr, align 8, !dbg !2861
  %5 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !2862
  %buffer3 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %5, i32 0, i32 0, !dbg !2863
  store i8* %4, i8** %buffer3, align 8, !dbg !2864
  %6 = load i32, i32* %bit_size.addr, align 4, !dbg !2865
  %7 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !2866
  %size_in_bits = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %7, i32 0, i32 3, !dbg !2867
  store i32 %6, i32* %size_in_bits, align 4, !dbg !2868
  %8 = load i32, i32* %bit_size.addr, align 4, !dbg !2869
  %add4 = add nsw i32 %8, 8, !dbg !2870
  %9 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !2871
  %size_in_bits_plus8 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %9, i32 0, i32 4, !dbg !2872
  store i32 %add4, i32* %size_in_bits_plus8, align 8, !dbg !2873
  %10 = load i8*, i8** %buffer.addr, align 8, !dbg !2874
  %11 = load i32, i32* %buffer_size, align 4, !dbg !2875
  %idx.ext = sext i32 %11 to i64, !dbg !2876
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 %idx.ext, !dbg !2876
  %12 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !2877
  %buffer_end = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %12, i32 0, i32 1, !dbg !2878
  store i8* %add.ptr, i8** %buffer_end, align 8, !dbg !2879
  %13 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !2880
  %index = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %13, i32 0, i32 2, !dbg !2881
  store i32 0, i32* %index, align 8, !dbg !2882
  %14 = load i32, i32* %ret, align 4, !dbg !2883
  ret i32 %14, !dbg !2884
}

; Function Attrs: cold nounwind optsize uwtable
define internal i32 @decode_vbmtree(%struct.GetBitContext* %gb, i8* %vbm_tree) #0 !dbg !2885 {
entry:
  %retval = alloca i32, align 4
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %vbm_tree.addr = alloca i8*, align 8
  %cntr = alloca [8 x i32], align 16
  %n = alloca i32, align 4
  %res = alloca i32, align 4
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !2888, metadata !2040), !dbg !2889
  store i8* %vbm_tree, i8** %vbm_tree.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %vbm_tree.addr, metadata !2890, metadata !2040), !dbg !2891
  call void @llvm.dbg.declare(metadata [8 x i32]* %cntr, metadata !2892, metadata !2040), !dbg !2893
  %0 = bitcast [8 x i32]* %cntr to i8*, !dbg !2893
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 32, i32 16, i1 false), !dbg !2893
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2894, metadata !2040), !dbg !2895
  call void @llvm.dbg.declare(metadata i32* %res, metadata !2896, metadata !2040), !dbg !2897
  %1 = load i8*, i8** %vbm_tree.addr, align 8, !dbg !2898
  call void @llvm.memset.p0i8.i64(i8* %1, i8 -1, i64 25, i32 1, i1 false), !dbg !2899
  store i32 0, i32* %n, align 4, !dbg !2900
  br label %for.cond, !dbg !2902

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %n, align 4, !dbg !2903
  %cmp = icmp slt i32 %2, 17, !dbg !2906
  br i1 %cmp, label %for.body, label %for.end, !dbg !2907

for.body:                                         ; preds = %for.cond
  %3 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !2908
  %call = call i32 @get_bits(%struct.GetBitContext* %3, i32 3), !dbg !2910
  store i32 %call, i32* %res, align 4, !dbg !2911
  %4 = load i32, i32* %res, align 4, !dbg !2912
  %idxprom = sext i32 %4 to i64, !dbg !2914
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* %cntr, i64 0, i64 %idxprom, !dbg !2914
  %5 = load i32, i32* %arrayidx, align 4, !dbg !2914
  %cmp1 = icmp sgt i32 %5, 3, !dbg !2915
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2916

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval, align 4, !dbg !2917
  br label %return, !dbg !2917

if.end:                                           ; preds = %for.body
  %6 = load i32, i32* %n, align 4, !dbg !2918
  %conv = trunc i32 %6 to i8, !dbg !2918
  %7 = load i32, i32* %res, align 4, !dbg !2919
  %mul = mul nsw i32 %7, 3, !dbg !2920
  %8 = load i32, i32* %res, align 4, !dbg !2921
  %idxprom2 = sext i32 %8 to i64, !dbg !2922
  %arrayidx3 = getelementptr inbounds [8 x i32], [8 x i32]* %cntr, i64 0, i64 %idxprom2, !dbg !2922
  %9 = load i32, i32* %arrayidx3, align 4, !dbg !2923
  %inc = add nsw i32 %9, 1, !dbg !2923
  store i32 %inc, i32* %arrayidx3, align 4, !dbg !2923
  %add = add nsw i32 %mul, %9, !dbg !2924
  %idxprom4 = sext i32 %add to i64, !dbg !2925
  %10 = load i8*, i8** %vbm_tree.addr, align 8, !dbg !2925
  %arrayidx5 = getelementptr inbounds i8, i8* %10, i64 %idxprom4, !dbg !2925
  store i8 %conv, i8* %arrayidx5, align 1, !dbg !2926
  br label %for.inc, !dbg !2927

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %n, align 4, !dbg !2928
  %inc6 = add nsw i32 %11, 1, !dbg !2928
  store i32 %inc6, i32* %n, align 4, !dbg !2928
  br label %for.cond, !dbg !2930, !llvm.loop !2931

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !2933
  br label %return, !dbg !2933

return:                                           ; preds = %for.end, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !2934
  ret i32 %12, !dbg !2934
}

declare i32 @ff_init_vlc_sparse(%struct.VLC*, i32, i32, i8*, i32, i32, i8*, i32, i32, i8*, i32, i32, i32) #3

; Function Attrs: nounwind readnone
declare i32 @llvm.ctlz.i32(i32, i1) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #4

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @get_bits(%struct.GetBitContext* %s, i32 %n) #5 !dbg !2935 {
entry:
  %x.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i, metadata !2938, metadata !2040), !dbg !2943
  %s.addr = alloca %struct.GetBitContext*, align 8
  %n.addr = alloca i32, align 4
  %tmp = alloca i32, align 4
  %re_index = alloca i32, align 4
  %re_cache = alloca i32, align 4
  %re_size_plus8 = alloca i32, align 4
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !2945, metadata !2040), !dbg !2946
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !2947, metadata !2040), !dbg !2948
  call void @llvm.dbg.declare(metadata i32* %tmp, metadata !2949, metadata !2040), !dbg !2950
  call void @llvm.dbg.declare(metadata i32* %re_index, metadata !2951, metadata !2040), !dbg !2952
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !2953
  %index = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %0, i32 0, i32 2, !dbg !2954
  %1 = load i32, i32* %index, align 8, !dbg !2954
  store i32 %1, i32* %re_index, align 4, !dbg !2952
  call void @llvm.dbg.declare(metadata i32* %re_cache, metadata !2955, metadata !2040), !dbg !2956
  call void @llvm.dbg.declare(metadata i32* %re_size_plus8, metadata !2957, metadata !2040), !dbg !2958
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !2959
  %size_in_bits_plus8 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %2, i32 0, i32 4, !dbg !2960
  %3 = load i32, i32* %size_in_bits_plus8, align 8, !dbg !2960
  store i32 %3, i32* %re_size_plus8, align 4, !dbg !2958
  %4 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !2961
  %buffer = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %4, i32 0, i32 0, !dbg !2962
  %5 = load i8*, i8** %buffer, align 8, !dbg !2962
  %6 = load i32, i32* %re_index, align 4, !dbg !2963
  %shr = lshr i32 %6, 3, !dbg !2964
  %idx.ext = zext i32 %shr to i64, !dbg !2965
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %idx.ext, !dbg !2965
  %7 = bitcast i8* %add.ptr to %union.unaligned_32*, !dbg !2966
  %l = bitcast %union.unaligned_32* %7 to i32*, !dbg !2966
  %8 = load i32, i32* %l, align 1, !dbg !2966
  store i32 %8, i32* %x.addr.i, align 4, !dbg !2967
  %9 = load i32, i32* %x.addr.i, align 4, !dbg !2968
  %shl.i = shl i32 %9, 8, !dbg !2969
  %and.i = and i32 %shl.i, 65280, !dbg !2970
  %10 = load i32, i32* %x.addr.i, align 4, !dbg !2971
  %shr.i = lshr i32 %10, 8, !dbg !2972
  %and1.i = and i32 %shr.i, 255, !dbg !2973
  %or.i = or i32 %and.i, %and1.i, !dbg !2974
  %shl2.i = shl i32 %or.i, 16, !dbg !2975
  %11 = load i32, i32* %x.addr.i, align 4, !dbg !2976
  %shr3.i = lshr i32 %11, 16, !dbg !2977
  %shl4.i = shl i32 %shr3.i, 8, !dbg !2978
  %and5.i = and i32 %shl4.i, 65280, !dbg !2979
  %12 = load i32, i32* %x.addr.i, align 4, !dbg !2980
  %shr6.i = lshr i32 %12, 16, !dbg !2981
  %shr7.i = lshr i32 %shr6.i, 8, !dbg !2982
  %and8.i = and i32 %shr7.i, 255, !dbg !2983
  %or9.i = or i32 %and5.i, %and8.i, !dbg !2984
  %or10.i = or i32 %shl2.i, %or9.i, !dbg !2985
  %13 = load i32, i32* %re_index, align 4, !dbg !2986
  %and = and i32 %13, 7, !dbg !2987
  %shl = shl i32 %or10.i, %and, !dbg !2988
  store i32 %shl, i32* %re_cache, align 4, !dbg !2989
  %14 = load i32, i32* %re_cache, align 4, !dbg !2990
  %15 = load i32, i32* %n.addr, align 4, !dbg !2991
  %conv = trunc i32 %15 to i8, !dbg !2991
  %call4 = call i32 @NEG_USR32(i32 %14, i8 signext %conv), !dbg !2992
  store i32 %call4, i32* %tmp, align 4, !dbg !2993
  %16 = load i32, i32* %re_size_plus8, align 4, !dbg !2994
  %17 = load i32, i32* %re_index, align 4, !dbg !2995
  %18 = load i32, i32* %n.addr, align 4, !dbg !2996
  %add = add i32 %17, %18, !dbg !2997
  %cmp = icmp ugt i32 %16, %add, !dbg !2998
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2999

cond.true:                                        ; preds = %entry
  %19 = load i32, i32* %re_index, align 4, !dbg !3000
  %20 = load i32, i32* %n.addr, align 4, !dbg !3002
  %add6 = add i32 %19, %20, !dbg !3003
  br label %cond.end, !dbg !3004

cond.false:                                       ; preds = %entry
  %21 = load i32, i32* %re_size_plus8, align 4, !dbg !3005
  br label %cond.end, !dbg !3007

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add6, %cond.true ], [ %21, %cond.false ], !dbg !3008
  store i32 %cond, i32* %re_index, align 4, !dbg !3010
  %22 = load i32, i32* %re_index, align 4, !dbg !3011
  %23 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3012
  %index7 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %23, i32 0, i32 2, !dbg !3013
  store i32 %22, i32* %index7, align 8, !dbg !3014
  %24 = load i32, i32* %tmp, align 4, !dbg !3015
  ret i32 %24, !dbg !3016
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @NEG_USR32(i32 %a, i8 signext %s) #5 !dbg !3017 {
entry:
  %a.addr = alloca i32, align 4
  %s.addr = alloca i8, align 1
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !3021, metadata !2040), !dbg !3022
  store i8 %s, i8* %s.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %s.addr, metadata !3023, metadata !2040), !dbg !3024
  %0 = load i32, i32* %a.addr, align 4, !dbg !3025
  %1 = load i8, i8* %s.addr, align 1, !dbg !3026
  %conv = sext i8 %1 to i32, !dbg !3026
  %sub = sub nsw i32 0, %conv, !dbg !3027
  %conv1 = trunc i32 %sub to i8, !dbg !3028
  %2 = call i32 asm "shrl $1, $0\0A\09", "=r,i{cx},0,~{dirflag},~{fpsr},~{flags}"(i8 %conv1, i32 %0) #2, !dbg !3025, !srcloc !3029
  store i32 %2, i32* %a.addr, align 4, !dbg !3025
  %3 = load i32, i32* %a.addr, align 4, !dbg !3030
  ret i32 %3, !dbg !3031
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @init_get_bits8(%struct.GetBitContext* %s, i8* %buffer, i32 %byte_size) #5 !dbg !3032 {
entry:
  %s.addr = alloca %struct.GetBitContext*, align 8
  %buffer.addr = alloca i8*, align 8
  %byte_size.addr = alloca i32, align 4
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !3033, metadata !2040), !dbg !3034
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !3035, metadata !2040), !dbg !3036
  store i32 %byte_size, i32* %byte_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %byte_size.addr, metadata !3037, metadata !2040), !dbg !3038
  %0 = load i32, i32* %byte_size.addr, align 4, !dbg !3039
  %cmp = icmp sgt i32 %0, 268435455, !dbg !3041
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3042

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %byte_size.addr, align 4, !dbg !3043
  %cmp1 = icmp slt i32 %1, 0, !dbg !3045
  br i1 %cmp1, label %if.then, label %if.end, !dbg !3046

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -1, i32* %byte_size.addr, align 4, !dbg !3047
  br label %if.end, !dbg !3048

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3049
  %3 = load i8*, i8** %buffer.addr, align 8, !dbg !3050
  %4 = load i32, i32* %byte_size.addr, align 4, !dbg !3051
  %mul = mul nsw i32 %4, 8, !dbg !3052
  %call = call i32 @init_get_bits(%struct.GetBitContext* %2, i8* %3, i32 %mul), !dbg !3053
  ret i32 %call, !dbg !3054
}

; Function Attrs: nounwind uwtable
define internal i32 @parse_packet_header(%struct.WMAVoiceContext* %s) #1 !dbg !3055 {
entry:
  %s.addr = alloca %struct.WMAVoiceContext*, align 8
  %gb = alloca %struct.GetBitContext*, align 8
  %res = alloca i32, align 4
  %n_superframes = alloca i32, align 4
  store %struct.WMAVoiceContext* %s, %struct.WMAVoiceContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s.addr, metadata !3058, metadata !2040), !dbg !3059
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb, metadata !3060, metadata !2040), !dbg !3061
  %0 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !3062
  %gb1 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %0, i32 0, i32 0, !dbg !3063
  store %struct.GetBitContext* %gb1, %struct.GetBitContext** %gb, align 8, !dbg !3061
  call void @llvm.dbg.declare(metadata i32* %res, metadata !3064, metadata !2040), !dbg !3065
  call void @llvm.dbg.declare(metadata i32* %n_superframes, metadata !3066, metadata !2040), !dbg !3067
  store i32 0, i32* %n_superframes, align 4, !dbg !3067
  %1 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3068
  call void @skip_bits(%struct.GetBitContext* %1, i32 4), !dbg !3069
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3070
  %call = call i32 @get_bits1(%struct.GetBitContext* %2), !dbg !3071
  %3 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !3072
  %has_residual_lsps = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %3, i32 0, i32 20, !dbg !3073
  store i32 %call, i32* %has_residual_lsps, align 8, !dbg !3074
  br label %do.body, !dbg !3075, !llvm.loop !3076

do.body:                                          ; preds = %do.cond, %entry
  %4 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3077
  %call2 = call i32 @get_bits(%struct.GetBitContext* %4, i32 6), !dbg !3079
  store i32 %call2, i32* %res, align 4, !dbg !3080
  %5 = load i32, i32* %res, align 4, !dbg !3081
  %6 = load i32, i32* %n_superframes, align 4, !dbg !3082
  %add = add i32 %6, %5, !dbg !3082
  store i32 %add, i32* %n_superframes, align 4, !dbg !3082
  br label %do.cond, !dbg !3083

do.cond:                                          ; preds = %do.body
  %7 = load i32, i32* %res, align 4, !dbg !3084
  %cmp = icmp eq i32 %7, 63, !dbg !3086
  br i1 %cmp, label %do.body, label %do.end, !dbg !3087, !llvm.loop !3076

do.end:                                           ; preds = %do.cond
  %8 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3088
  %9 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !3089
  %spillover_bitsize = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %9, i32 0, i32 2, !dbg !3090
  %10 = load i32, i32* %spillover_bitsize, align 4, !dbg !3090
  %call3 = call i32 @get_bits(%struct.GetBitContext* %8, i32 %10), !dbg !3091
  %11 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !3092
  %spillover_nbits = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %11, i32 0, i32 19, !dbg !3093
  store i32 %call3, i32* %spillover_nbits, align 4, !dbg !3094
  %12 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3095
  %call4 = call i32 @get_bits_left(%struct.GetBitContext* %12), !dbg !3096
  %cmp5 = icmp sge i32 %call4, 0, !dbg !3097
  br i1 %cmp5, label %cond.true, label %cond.false, !dbg !3096

cond.true:                                        ; preds = %do.end
  %13 = load i32, i32* %n_superframes, align 4, !dbg !3098
  br label %cond.end, !dbg !3099

cond.false:                                       ; preds = %do.end
  br label %cond.end, !dbg !3100

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %13, %cond.true ], [ -1094995529, %cond.false ], !dbg !3102
  ret i32 %cond, !dbg !3104
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @get_bits_count(%struct.GetBitContext* %s) #5 !dbg !3105 {
entry:
  %s.addr = alloca %struct.GetBitContext*, align 8
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !3110, metadata !2040), !dbg !3111
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3112
  %index = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %0, i32 0, i32 2, !dbg !3113
  %1 = load i32, i32* %index, align 8, !dbg !3113
  ret i32 %1, !dbg !3114
}

; Function Attrs: nounwind uwtable
define internal void @copy_bits(%struct.PutBitContext* %pb, i8* %data, i32 %size, %struct.GetBitContext* %gb, i32 %nbits) #1 !dbg !3115 {
entry:
  %pb.addr = alloca %struct.PutBitContext*, align 8
  %data.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %nbits.addr = alloca i32, align 4
  %rmn_bytes = alloca i32, align 4
  %rmn_bits = alloca i32, align 4
  store %struct.PutBitContext* %pb, %struct.PutBitContext** %pb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PutBitContext** %pb.addr, metadata !3119, metadata !2040), !dbg !3120
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !3121, metadata !2040), !dbg !3122
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !3123, metadata !2040), !dbg !3124
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !3125, metadata !2040), !dbg !3126
  store i32 %nbits, i32* %nbits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nbits.addr, metadata !3127, metadata !2040), !dbg !3128
  call void @llvm.dbg.declare(metadata i32* %rmn_bytes, metadata !3129, metadata !2040), !dbg !3130
  call void @llvm.dbg.declare(metadata i32* %rmn_bits, metadata !3131, metadata !2040), !dbg !3132
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !3133
  %call = call i32 @get_bits_left(%struct.GetBitContext* %0), !dbg !3134
  store i32 %call, i32* %rmn_bytes, align 4, !dbg !3135
  store i32 %call, i32* %rmn_bits, align 4, !dbg !3136
  %1 = load i32, i32* %rmn_bits, align 4, !dbg !3137
  %2 = load i32, i32* %nbits.addr, align 4, !dbg !3139
  %cmp = icmp slt i32 %1, %2, !dbg !3140
  br i1 %cmp, label %if.then, label %if.end, !dbg !3141

if.then:                                          ; preds = %entry
  br label %return, !dbg !3142

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %nbits.addr, align 4, !dbg !3143
  %4 = load %struct.PutBitContext*, %struct.PutBitContext** %pb.addr, align 8, !dbg !3145
  %size_in_bits = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %4, i32 0, i32 5, !dbg !3146
  %5 = load i32, i32* %size_in_bits, align 8, !dbg !3146
  %6 = load %struct.PutBitContext*, %struct.PutBitContext** %pb.addr, align 8, !dbg !3147
  %call1 = call i32 @put_bits_count(%struct.PutBitContext* %6), !dbg !3148
  %sub = sub nsw i32 %5, %call1, !dbg !3149
  %cmp2 = icmp sgt i32 %3, %sub, !dbg !3150
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !3151

if.then3:                                         ; preds = %if.end
  br label %return, !dbg !3152

if.end4:                                          ; preds = %if.end
  %7 = load i32, i32* %rmn_bits, align 4, !dbg !3153
  %and = and i32 %7, 7, !dbg !3153
  store i32 %and, i32* %rmn_bits, align 4, !dbg !3153
  %8 = load i32, i32* %rmn_bytes, align 4, !dbg !3154
  %shr = ashr i32 %8, 3, !dbg !3154
  store i32 %shr, i32* %rmn_bytes, align 4, !dbg !3154
  %9 = load i32, i32* %rmn_bits, align 4, !dbg !3155
  %10 = load i32, i32* %nbits.addr, align 4, !dbg !3157
  %cmp5 = icmp sgt i32 %9, %10, !dbg !3158
  br i1 %cmp5, label %cond.true, label %cond.false, !dbg !3159

cond.true:                                        ; preds = %if.end4
  %11 = load i32, i32* %nbits.addr, align 4, !dbg !3160
  br label %cond.end, !dbg !3162

cond.false:                                       ; preds = %if.end4
  %12 = load i32, i32* %rmn_bits, align 4, !dbg !3163
  br label %cond.end, !dbg !3165

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %11, %cond.true ], [ %12, %cond.false ], !dbg !3166
  store i32 %cond, i32* %rmn_bits, align 4, !dbg !3168
  %cmp6 = icmp sgt i32 %cond, 0, !dbg !3169
  br i1 %cmp6, label %if.then7, label %if.end9, !dbg !3170

if.then7:                                         ; preds = %cond.end
  %13 = load %struct.PutBitContext*, %struct.PutBitContext** %pb.addr, align 8, !dbg !3171
  %14 = load i32, i32* %rmn_bits, align 4, !dbg !3172
  %15 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !3173
  %16 = load i32, i32* %rmn_bits, align 4, !dbg !3174
  %call8 = call i32 @get_bits(%struct.GetBitContext* %15, i32 %16), !dbg !3175
  call void @put_bits(%struct.PutBitContext* %13, i32 %14, i32 %call8), !dbg !3176
  br label %if.end9, !dbg !3177

if.end9:                                          ; preds = %if.then7, %cond.end
  %17 = load %struct.PutBitContext*, %struct.PutBitContext** %pb.addr, align 8, !dbg !3178
  %18 = load i8*, i8** %data.addr, align 8, !dbg !3179
  %19 = load i32, i32* %size.addr, align 4, !dbg !3180
  %idx.ext = sext i32 %19 to i64, !dbg !3181
  %add.ptr = getelementptr inbounds i8, i8* %18, i64 %idx.ext, !dbg !3181
  %20 = load i32, i32* %rmn_bytes, align 4, !dbg !3182
  %idx.ext10 = sext i32 %20 to i64, !dbg !3183
  %idx.neg = sub i64 0, %idx.ext10, !dbg !3183
  %add.ptr11 = getelementptr inbounds i8, i8* %add.ptr, i64 %idx.neg, !dbg !3183
  %21 = load i32, i32* %nbits.addr, align 4, !dbg !3184
  %22 = load i32, i32* %rmn_bits, align 4, !dbg !3185
  %sub12 = sub nsw i32 %21, %22, !dbg !3186
  %23 = load i32, i32* %rmn_bytes, align 4, !dbg !3187
  %shl = shl i32 %23, 3, !dbg !3188
  %cmp13 = icmp sgt i32 %sub12, %shl, !dbg !3189
  br i1 %cmp13, label %cond.true14, label %cond.false16, !dbg !3190

cond.true14:                                      ; preds = %if.end9
  %24 = load i32, i32* %rmn_bytes, align 4, !dbg !3191
  %shl15 = shl i32 %24, 3, !dbg !3193
  br label %cond.end18, !dbg !3194

cond.false16:                                     ; preds = %if.end9
  %25 = load i32, i32* %nbits.addr, align 4, !dbg !3195
  %26 = load i32, i32* %rmn_bits, align 4, !dbg !3197
  %sub17 = sub nsw i32 %25, %26, !dbg !3198
  br label %cond.end18, !dbg !3199

cond.end18:                                       ; preds = %cond.false16, %cond.true14
  %cond19 = phi i32 [ %shl15, %cond.true14 ], [ %sub17, %cond.false16 ], !dbg !3200
  call void @avpriv_copy_bits(%struct.PutBitContext* %17, i8* %add.ptr11, i32 %cond19), !dbg !3202
  br label %return, !dbg !3203

return:                                           ; preds = %cond.end18, %if.then3, %if.then
  ret void, !dbg !3204
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @flush_put_bits(%struct.PutBitContext* %s) #5 !dbg !3205 {
entry:
  %s.addr = alloca %struct.PutBitContext*, align 8
  store %struct.PutBitContext* %s, %struct.PutBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PutBitContext** %s.addr, metadata !3208, metadata !2040), !dbg !3209
  %0 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3210
  %bit_left = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i32 0, i32 1, !dbg !3212
  %1 = load i32, i32* %bit_left, align 4, !dbg !3212
  %cmp = icmp slt i32 %1, 32, !dbg !3213
  br i1 %cmp, label %if.then, label %if.end, !dbg !3214

if.then:                                          ; preds = %entry
  %2 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3215
  %bit_left1 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %2, i32 0, i32 1, !dbg !3216
  %3 = load i32, i32* %bit_left1, align 4, !dbg !3216
  %4 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3217
  %bit_buf = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %4, i32 0, i32 0, !dbg !3218
  %5 = load i32, i32* %bit_buf, align 8, !dbg !3219
  %shl = shl i32 %5, %3, !dbg !3219
  store i32 %shl, i32* %bit_buf, align 8, !dbg !3219
  br label %if.end, !dbg !3217

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !3220

while.cond:                                       ; preds = %do.end, %if.end
  %6 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3221
  %bit_left2 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %6, i32 0, i32 1, !dbg !3223
  %7 = load i32, i32* %bit_left2, align 4, !dbg !3223
  %cmp3 = icmp slt i32 %7, 32, !dbg !3224
  br i1 %cmp3, label %while.body, label %while.end, !dbg !3225

while.body:                                       ; preds = %while.cond
  br label %do.body, !dbg !3226, !llvm.loop !3228

do.body:                                          ; preds = %while.body
  %8 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3229
  %buf_ptr = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %8, i32 0, i32 3, !dbg !3233
  %9 = load i8*, i8** %buf_ptr, align 8, !dbg !3233
  %10 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3234
  %buf_end = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %10, i32 0, i32 4, !dbg !3235
  %11 = load i8*, i8** %buf_end, align 8, !dbg !3235
  %cmp4 = icmp ult i8* %9, %11, !dbg !3236
  br i1 %cmp4, label %if.end6, label %if.then5, !dbg !3237

if.then5:                                         ; preds = %do.body
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i32 0, i32 0), i32 108), !dbg !3238
  call void @abort() #10, !dbg !3241
  unreachable, !dbg !3243

if.end6:                                          ; preds = %do.body
  br label %do.end, !dbg !3244

do.end:                                           ; preds = %if.end6
  %12 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3246
  %bit_buf7 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %12, i32 0, i32 0, !dbg !3247
  %13 = load i32, i32* %bit_buf7, align 8, !dbg !3247
  %shr = lshr i32 %13, 24, !dbg !3248
  %conv = trunc i32 %shr to i8, !dbg !3246
  %14 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3249
  %buf_ptr8 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %14, i32 0, i32 3, !dbg !3250
  %15 = load i8*, i8** %buf_ptr8, align 8, !dbg !3251
  %incdec.ptr = getelementptr inbounds i8, i8* %15, i32 1, !dbg !3251
  store i8* %incdec.ptr, i8** %buf_ptr8, align 8, !dbg !3251
  store i8 %conv, i8* %15, align 1, !dbg !3252
  %16 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3253
  %bit_buf9 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %16, i32 0, i32 0, !dbg !3254
  %17 = load i32, i32* %bit_buf9, align 8, !dbg !3255
  %shl10 = shl i32 %17, 8, !dbg !3255
  store i32 %shl10, i32* %bit_buf9, align 8, !dbg !3255
  %18 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3256
  %bit_left11 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %18, i32 0, i32 1, !dbg !3257
  %19 = load i32, i32* %bit_left11, align 4, !dbg !3258
  %add = add nsw i32 %19, 8, !dbg !3258
  store i32 %add, i32* %bit_left11, align 4, !dbg !3258
  br label %while.cond, !dbg !3259, !llvm.loop !3261

while.end:                                        ; preds = %while.cond
  %20 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3262
  %bit_left12 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %20, i32 0, i32 1, !dbg !3263
  store i32 32, i32* %bit_left12, align 4, !dbg !3264
  %21 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3265
  %bit_buf13 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %21, i32 0, i32 0, !dbg !3266
  store i32 0, i32* %bit_buf13, align 8, !dbg !3267
  ret void, !dbg !3268
}

; Function Attrs: nounwind uwtable
define internal i32 @synth_superframe(%struct.AVCodecContext* %ctx, %struct.AVFrame* %frame, i32* %got_frame_ptr) #1 !dbg !3269 {
entry:
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.AVCodecContext*, align 8
  %frame.addr = alloca %struct.AVFrame*, align 8
  %got_frame_ptr.addr = alloca i32*, align 8
  %s = alloca %struct.WMAVoiceContext*, align 8
  %gb = alloca %struct.GetBitContext*, align 8
  %s_gb = alloca %struct.GetBitContext, align 8
  %n = alloca i32, align 4
  %res = alloca i32, align 4
  %n_samples = alloca i32, align 4
  %lsps = alloca [3 x [16 x double]], align 16
  %mean_lsf = alloca double*, align 8
  %excitation = alloca [908 x float], align 16
  %synth = alloca [496 x float], align 16
  %samples = alloca float*, align 8
  %prev_lsps = alloca [16 x double], align 16
  %a1 = alloca [32 x double], align 16
  %a2 = alloca [32 x double], align 16
  %m = alloca i32, align 4
  store %struct.AVCodecContext* %ctx, %struct.AVCodecContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVCodecContext** %ctx.addr, metadata !3272, metadata !2040), !dbg !3273
  store %struct.AVFrame* %frame, %struct.AVFrame** %frame.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVFrame** %frame.addr, metadata !3274, metadata !2040), !dbg !3275
  store i32* %got_frame_ptr, i32** %got_frame_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %got_frame_ptr.addr, metadata !3276, metadata !2040), !dbg !3277
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s, metadata !3278, metadata !2040), !dbg !3279
  %0 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !3280
  %priv_data = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i32 0, i32 6, !dbg !3281
  %1 = load i8*, i8** %priv_data, align 8, !dbg !3281
  %2 = bitcast i8* %1 to %struct.WMAVoiceContext*, !dbg !3280
  store %struct.WMAVoiceContext* %2, %struct.WMAVoiceContext** %s, align 8, !dbg !3279
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb, metadata !3282, metadata !2040), !dbg !3283
  %3 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3284
  %gb1 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %3, i32 0, i32 0, !dbg !3285
  store %struct.GetBitContext* %gb1, %struct.GetBitContext** %gb, align 8, !dbg !3283
  call void @llvm.dbg.declare(metadata %struct.GetBitContext* %s_gb, metadata !3286, metadata !2040), !dbg !3287
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3288, metadata !2040), !dbg !3289
  call void @llvm.dbg.declare(metadata i32* %res, metadata !3290, metadata !2040), !dbg !3291
  call void @llvm.dbg.declare(metadata i32* %n_samples, metadata !3292, metadata !2040), !dbg !3293
  store i32 480, i32* %n_samples, align 4, !dbg !3293
  call void @llvm.dbg.declare(metadata [3 x [16 x double]]* %lsps, metadata !3294, metadata !2040), !dbg !3297
  call void @llvm.dbg.declare(metadata double** %mean_lsf, metadata !3298, metadata !2040), !dbg !3299
  %4 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3300
  %lsps2 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %4, i32 0, i32 8, !dbg !3301
  %5 = load i32, i32* %lsps2, align 4, !dbg !3301
  %cmp = icmp eq i32 %5, 16, !dbg !3302
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3300

cond.true:                                        ; preds = %entry
  %6 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3303
  %lsp_def_mode = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %6, i32 0, i32 10, !dbg !3304
  %7 = load i32, i32* %lsp_def_mode, align 4, !dbg !3304
  %idxprom = sext i32 %7 to i64, !dbg !3305
  %arrayidx = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @wmavoice_mean_lsf16, i64 0, i64 %idxprom, !dbg !3305
  %arraydecay = getelementptr inbounds [16 x double], [16 x double]* %arrayidx, i32 0, i32 0, !dbg !3305
  br label %cond.end, !dbg !3306

cond.false:                                       ; preds = %entry
  %8 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3308
  %lsp_def_mode3 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %8, i32 0, i32 10, !dbg !3309
  %9 = load i32, i32* %lsp_def_mode3, align 4, !dbg !3309
  %idxprom4 = sext i32 %9 to i64, !dbg !3310
  %arrayidx5 = getelementptr inbounds [2 x [10 x double]], [2 x [10 x double]]* @wmavoice_mean_lsf10, i64 0, i64 %idxprom4, !dbg !3310
  %arraydecay6 = getelementptr inbounds [10 x double], [10 x double]* %arrayidx5, i32 0, i32 0, !dbg !3310
  br label %cond.end, !dbg !3311

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double* [ %arraydecay, %cond.true ], [ %arraydecay6, %cond.false ], !dbg !3313
  store double* %cond, double** %mean_lsf, align 8, !dbg !3315
  call void @llvm.dbg.declare(metadata [908 x float]* %excitation, metadata !3316, metadata !2040), !dbg !3320
  call void @llvm.dbg.declare(metadata [496 x float]* %synth, metadata !3321, metadata !2040), !dbg !3325
  call void @llvm.dbg.declare(metadata float** %samples, metadata !3326, metadata !2040), !dbg !3327
  %arraydecay7 = getelementptr inbounds [496 x float], [496 x float]* %synth, i32 0, i32 0, !dbg !3328
  %10 = bitcast float* %arraydecay7 to i8*, !dbg !3328
  %11 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3329
  %synth_history = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %11, i32 0, i32 39, !dbg !3330
  %arraydecay8 = getelementptr inbounds [16 x float], [16 x float]* %synth_history, i32 0, i32 0, !dbg !3328
  %12 = bitcast float* %arraydecay8 to i8*, !dbg !3328
  %13 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3331
  %lsps9 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %13, i32 0, i32 8, !dbg !3332
  %14 = load i32, i32* %lsps9, align 4, !dbg !3332
  %conv = sext i32 %14 to i64, !dbg !3331
  %mul = mul i64 %conv, 4, !dbg !3333
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %12, i64 %mul, i32 4, i1 false), !dbg !3328
  %arraydecay10 = getelementptr inbounds [908 x float], [908 x float]* %excitation, i32 0, i32 0, !dbg !3334
  %15 = bitcast float* %arraydecay10 to i8*, !dbg !3334
  %16 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3335
  %excitation_history = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %16, i32 0, i32 38, !dbg !3336
  %arraydecay11 = getelementptr inbounds [416 x float], [416 x float]* %excitation_history, i32 0, i32 0, !dbg !3334
  %17 = bitcast float* %arraydecay11 to i8*, !dbg !3334
  %18 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3337
  %history_nsamples = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %18, i32 0, i32 3, !dbg !3338
  %19 = load i32, i32* %history_nsamples, align 32, !dbg !3338
  %conv12 = sext i32 %19 to i64, !dbg !3337
  %mul13 = mul i64 %conv12, 4, !dbg !3339
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %17, i64 %mul13, i32 4, i1 false), !dbg !3334
  %20 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3340
  %sframe_cache_size = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %20, i32 0, i32 23, !dbg !3342
  %21 = load i32, i32* %sframe_cache_size, align 16, !dbg !3342
  %cmp14 = icmp sgt i32 %21, 0, !dbg !3343
  br i1 %cmp14, label %if.then, label %if.end, !dbg !3344

if.then:                                          ; preds = %cond.end
  store %struct.GetBitContext* %s_gb, %struct.GetBitContext** %gb, align 8, !dbg !3345
  %22 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3347
  %23 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3348
  %sframe_cache = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %23, i32 0, i32 22, !dbg !3349
  %arraydecay16 = getelementptr inbounds [320 x i8], [320 x i8]* %sframe_cache, i32 0, i32 0, !dbg !3348
  %24 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3350
  %sframe_cache_size17 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %24, i32 0, i32 23, !dbg !3351
  %25 = load i32, i32* %sframe_cache_size17, align 16, !dbg !3351
  %call = call i32 @init_get_bits(%struct.GetBitContext* %22, i8* %arraydecay16, i32 %25), !dbg !3352
  %26 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3353
  %sframe_cache_size18 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %26, i32 0, i32 23, !dbg !3354
  store i32 0, i32* %sframe_cache_size18, align 16, !dbg !3355
  br label %if.end, !dbg !3356

if.end:                                           ; preds = %if.then, %cond.end
  %27 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3357
  %call19 = call i32 @get_bits1(%struct.GetBitContext* %27), !dbg !3359
  %tobool = icmp ne i32 %call19, 0, !dbg !3359
  br i1 %tobool, label %if.end21, label %if.then20, !dbg !3360

if.then20:                                        ; preds = %if.end
  %28 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !3361
  %29 = bitcast %struct.AVCodecContext* %28 to i8*, !dbg !3361
  call void (i8*, i8*, ...) @avpriv_request_sample(i8* %29, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.13, i32 0, i32 0)), !dbg !3363
  store i32 -1163346256, i32* %retval, align 4, !dbg !3364
  br label %return, !dbg !3364

if.end21:                                         ; preds = %if.end
  %30 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3365
  %call22 = call i32 @get_bits1(%struct.GetBitContext* %30), !dbg !3367
  %tobool23 = icmp ne i32 %call22, 0, !dbg !3367
  br i1 %tobool23, label %if.then24, label %if.end30, !dbg !3368

if.then24:                                        ; preds = %if.end21
  %31 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3369
  %call25 = call i32 @get_bits(%struct.GetBitContext* %31, i32 12), !dbg !3372
  store i32 %call25, i32* %n_samples, align 4, !dbg !3373
  %cmp26 = icmp sgt i32 %call25, 480, !dbg !3374
  br i1 %cmp26, label %if.then28, label %if.end29, !dbg !3375

if.then28:                                        ; preds = %if.then24
  %32 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !3376
  %33 = bitcast %struct.AVCodecContext* %32 to i8*, !dbg !3376
  %34 = load i32, i32* %n_samples, align 4, !dbg !3378
  call void (i8*, i32, i8*, ...) @av_log(i8* %33, i32 16, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.14, i32 0, i32 0), i32 480, i32 %34), !dbg !3379
  store i32 -1094995529, i32* %retval, align 4, !dbg !3380
  br label %return, !dbg !3380

if.end29:                                         ; preds = %if.then24
  br label %if.end30, !dbg !3381

if.end30:                                         ; preds = %if.end29, %if.end21
  %35 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3382
  %has_residual_lsps = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %35, i32 0, i32 20, !dbg !3384
  %36 = load i32, i32* %has_residual_lsps, align 8, !dbg !3384
  %tobool31 = icmp ne i32 %36, 0, !dbg !3382
  br i1 %tobool31, label %if.then32, label %if.end110, !dbg !3385

if.then32:                                        ; preds = %if.end30
  call void @llvm.dbg.declare(metadata [16 x double]* %prev_lsps, metadata !3386, metadata !2040), !dbg !3388
  call void @llvm.dbg.declare(metadata [32 x double]* %a1, metadata !3389, metadata !2040), !dbg !3391
  call void @llvm.dbg.declare(metadata [32 x double]* %a2, metadata !3392, metadata !2040), !dbg !3393
  store i32 0, i32* %n, align 4, !dbg !3394
  br label %for.cond, !dbg !3396

for.cond:                                         ; preds = %for.inc, %if.then32
  %37 = load i32, i32* %n, align 4, !dbg !3397
  %38 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3400
  %lsps33 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %38, i32 0, i32 8, !dbg !3401
  %39 = load i32, i32* %lsps33, align 4, !dbg !3401
  %cmp34 = icmp slt i32 %37, %39, !dbg !3402
  br i1 %cmp34, label %for.body, label %for.end, !dbg !3403

for.body:                                         ; preds = %for.cond
  %40 = load i32, i32* %n, align 4, !dbg !3404
  %idxprom36 = sext i32 %40 to i64, !dbg !3405
  %41 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3405
  %prev_lsps37 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %41, i32 0, i32 25, !dbg !3406
  %arrayidx38 = getelementptr inbounds [16 x double], [16 x double]* %prev_lsps37, i64 0, i64 %idxprom36, !dbg !3405
  %42 = load double, double* %arrayidx38, align 8, !dbg !3405
  %43 = load i32, i32* %n, align 4, !dbg !3407
  %idxprom39 = sext i32 %43 to i64, !dbg !3408
  %44 = load double*, double** %mean_lsf, align 8, !dbg !3408
  %arrayidx40 = getelementptr inbounds double, double* %44, i64 %idxprom39, !dbg !3408
  %45 = load double, double* %arrayidx40, align 8, !dbg !3408
  %sub = fsub double %42, %45, !dbg !3409
  %46 = load i32, i32* %n, align 4, !dbg !3410
  %idxprom41 = sext i32 %46 to i64, !dbg !3411
  %arrayidx42 = getelementptr inbounds [16 x double], [16 x double]* %prev_lsps, i64 0, i64 %idxprom41, !dbg !3411
  store double %sub, double* %arrayidx42, align 8, !dbg !3412
  br label %for.inc, !dbg !3411

for.inc:                                          ; preds = %for.body
  %47 = load i32, i32* %n, align 4, !dbg !3413
  %inc = add nsw i32 %47, 1, !dbg !3413
  store i32 %inc, i32* %n, align 4, !dbg !3413
  br label %for.cond, !dbg !3415, !llvm.loop !3416

for.end:                                          ; preds = %for.cond
  %48 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3418
  %lsps43 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %48, i32 0, i32 8, !dbg !3420
  %49 = load i32, i32* %lsps43, align 4, !dbg !3420
  %cmp44 = icmp eq i32 %49, 10, !dbg !3421
  br i1 %cmp44, label %if.then46, label %if.else, !dbg !3422

if.then46:                                        ; preds = %for.end
  %50 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3423
  %arrayidx47 = getelementptr inbounds [3 x [16 x double]], [3 x [16 x double]]* %lsps, i64 0, i64 2, !dbg !3425
  %arraydecay48 = getelementptr inbounds [16 x double], [16 x double]* %arrayidx47, i32 0, i32 0, !dbg !3425
  %arraydecay49 = getelementptr inbounds [16 x double], [16 x double]* %prev_lsps, i32 0, i32 0, !dbg !3426
  %arraydecay50 = getelementptr inbounds [32 x double], [32 x double]* %a1, i32 0, i32 0, !dbg !3427
  %arraydecay51 = getelementptr inbounds [32 x double], [32 x double]* %a2, i32 0, i32 0, !dbg !3428
  %51 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3429
  %lsp_q_mode = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %51, i32 0, i32 9, !dbg !3430
  %52 = load i32, i32* %lsp_q_mode, align 8, !dbg !3430
  call void @dequant_lsp10r(%struct.GetBitContext* %50, double* %arraydecay48, double* %arraydecay49, double* %arraydecay50, double* %arraydecay51, i32 %52), !dbg !3431
  br label %if.end58, !dbg !3432

if.else:                                          ; preds = %for.end
  %53 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3433
  %arrayidx52 = getelementptr inbounds [3 x [16 x double]], [3 x [16 x double]]* %lsps, i64 0, i64 2, !dbg !3434
  %arraydecay53 = getelementptr inbounds [16 x double], [16 x double]* %arrayidx52, i32 0, i32 0, !dbg !3434
  %arraydecay54 = getelementptr inbounds [16 x double], [16 x double]* %prev_lsps, i32 0, i32 0, !dbg !3435
  %arraydecay55 = getelementptr inbounds [32 x double], [32 x double]* %a1, i32 0, i32 0, !dbg !3436
  %arraydecay56 = getelementptr inbounds [32 x double], [32 x double]* %a2, i32 0, i32 0, !dbg !3437
  %54 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3438
  %lsp_q_mode57 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %54, i32 0, i32 9, !dbg !3439
  %55 = load i32, i32* %lsp_q_mode57, align 8, !dbg !3439
  call void @dequant_lsp16r(%struct.GetBitContext* %53, double* %arraydecay53, double* %arraydecay54, double* %arraydecay55, double* %arraydecay56, i32 %55), !dbg !3440
  br label %if.end58

if.end58:                                         ; preds = %if.else, %if.then46
  store i32 0, i32* %n, align 4, !dbg !3441
  br label %for.cond59, !dbg !3443

for.cond59:                                       ; preds = %for.inc96, %if.end58
  %56 = load i32, i32* %n, align 4, !dbg !3444
  %57 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3447
  %lsps60 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %57, i32 0, i32 8, !dbg !3448
  %58 = load i32, i32* %lsps60, align 4, !dbg !3448
  %cmp61 = icmp slt i32 %56, %58, !dbg !3449
  br i1 %cmp61, label %for.body63, label %for.end98, !dbg !3450

for.body63:                                       ; preds = %for.cond59
  %59 = load i32, i32* %n, align 4, !dbg !3451
  %idxprom64 = sext i32 %59 to i64, !dbg !3453
  %60 = load double*, double** %mean_lsf, align 8, !dbg !3453
  %arrayidx65 = getelementptr inbounds double, double* %60, i64 %idxprom64, !dbg !3453
  %61 = load double, double* %arrayidx65, align 8, !dbg !3453
  %62 = load i32, i32* %n, align 4, !dbg !3454
  %idxprom66 = sext i32 %62 to i64, !dbg !3455
  %arrayidx67 = getelementptr inbounds [32 x double], [32 x double]* %a1, i64 0, i64 %idxprom66, !dbg !3455
  %63 = load double, double* %arrayidx67, align 8, !dbg !3455
  %64 = load i32, i32* %n, align 4, !dbg !3456
  %mul68 = mul nsw i32 %64, 2, !dbg !3457
  %idxprom69 = sext i32 %mul68 to i64, !dbg !3458
  %arrayidx70 = getelementptr inbounds [32 x double], [32 x double]* %a2, i64 0, i64 %idxprom69, !dbg !3458
  %65 = load double, double* %arrayidx70, align 8, !dbg !3458
  %sub71 = fsub double %63, %65, !dbg !3459
  %add = fadd double %61, %sub71, !dbg !3460
  %66 = load i32, i32* %n, align 4, !dbg !3461
  %idxprom72 = sext i32 %66 to i64, !dbg !3462
  %arrayidx73 = getelementptr inbounds [3 x [16 x double]], [3 x [16 x double]]* %lsps, i64 0, i64 0, !dbg !3462
  %arrayidx74 = getelementptr inbounds [16 x double], [16 x double]* %arrayidx73, i64 0, i64 %idxprom72, !dbg !3462
  store double %add, double* %arrayidx74, align 8, !dbg !3463
  %67 = load i32, i32* %n, align 4, !dbg !3464
  %idxprom75 = sext i32 %67 to i64, !dbg !3465
  %68 = load double*, double** %mean_lsf, align 8, !dbg !3465
  %arrayidx76 = getelementptr inbounds double, double* %68, i64 %idxprom75, !dbg !3465
  %69 = load double, double* %arrayidx76, align 8, !dbg !3465
  %70 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3466
  %lsps77 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %70, i32 0, i32 8, !dbg !3467
  %71 = load i32, i32* %lsps77, align 4, !dbg !3467
  %72 = load i32, i32* %n, align 4, !dbg !3468
  %add78 = add nsw i32 %71, %72, !dbg !3469
  %idxprom79 = sext i32 %add78 to i64, !dbg !3470
  %arrayidx80 = getelementptr inbounds [32 x double], [32 x double]* %a1, i64 0, i64 %idxprom79, !dbg !3470
  %73 = load double, double* %arrayidx80, align 8, !dbg !3470
  %74 = load i32, i32* %n, align 4, !dbg !3471
  %mul81 = mul nsw i32 %74, 2, !dbg !3472
  %add82 = add nsw i32 %mul81, 1, !dbg !3473
  %idxprom83 = sext i32 %add82 to i64, !dbg !3474
  %arrayidx84 = getelementptr inbounds [32 x double], [32 x double]* %a2, i64 0, i64 %idxprom83, !dbg !3474
  %75 = load double, double* %arrayidx84, align 8, !dbg !3474
  %sub85 = fsub double %73, %75, !dbg !3475
  %add86 = fadd double %69, %sub85, !dbg !3476
  %76 = load i32, i32* %n, align 4, !dbg !3477
  %idxprom87 = sext i32 %76 to i64, !dbg !3478
  %arrayidx88 = getelementptr inbounds [3 x [16 x double]], [3 x [16 x double]]* %lsps, i64 0, i64 1, !dbg !3478
  %arrayidx89 = getelementptr inbounds [16 x double], [16 x double]* %arrayidx88, i64 0, i64 %idxprom87, !dbg !3478
  store double %add86, double* %arrayidx89, align 8, !dbg !3479
  %77 = load i32, i32* %n, align 4, !dbg !3480
  %idxprom90 = sext i32 %77 to i64, !dbg !3481
  %78 = load double*, double** %mean_lsf, align 8, !dbg !3481
  %arrayidx91 = getelementptr inbounds double, double* %78, i64 %idxprom90, !dbg !3481
  %79 = load double, double* %arrayidx91, align 8, !dbg !3481
  %80 = load i32, i32* %n, align 4, !dbg !3482
  %idxprom92 = sext i32 %80 to i64, !dbg !3483
  %arrayidx93 = getelementptr inbounds [3 x [16 x double]], [3 x [16 x double]]* %lsps, i64 0, i64 2, !dbg !3483
  %arrayidx94 = getelementptr inbounds [16 x double], [16 x double]* %arrayidx93, i64 0, i64 %idxprom92, !dbg !3483
  %81 = load double, double* %arrayidx94, align 8, !dbg !3484
  %add95 = fadd double %81, %79, !dbg !3484
  store double %add95, double* %arrayidx94, align 8, !dbg !3484
  br label %for.inc96, !dbg !3485

for.inc96:                                        ; preds = %for.body63
  %82 = load i32, i32* %n, align 4, !dbg !3486
  %inc97 = add nsw i32 %82, 1, !dbg !3486
  store i32 %inc97, i32* %n, align 4, !dbg !3486
  br label %for.cond59, !dbg !3488, !llvm.loop !3489

for.end98:                                        ; preds = %for.cond59
  store i32 0, i32* %n, align 4, !dbg !3491
  br label %for.cond99, !dbg !3493

for.cond99:                                       ; preds = %for.inc107, %for.end98
  %83 = load i32, i32* %n, align 4, !dbg !3494
  %cmp100 = icmp slt i32 %83, 3, !dbg !3497
  br i1 %cmp100, label %for.body102, label %for.end109, !dbg !3498

for.body102:                                      ; preds = %for.cond99
  %84 = load i32, i32* %n, align 4, !dbg !3499
  %idxprom103 = sext i32 %84 to i64, !dbg !3500
  %arrayidx104 = getelementptr inbounds [3 x [16 x double]], [3 x [16 x double]]* %lsps, i64 0, i64 %idxprom103, !dbg !3500
  %arraydecay105 = getelementptr inbounds [16 x double], [16 x double]* %arrayidx104, i32 0, i32 0, !dbg !3500
  %85 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3501
  %lsps106 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %85, i32 0, i32 8, !dbg !3502
  %86 = load i32, i32* %lsps106, align 4, !dbg !3502
  call void @stabilize_lsps(double* %arraydecay105, i32 %86), !dbg !3503
  br label %for.inc107, !dbg !3503

for.inc107:                                       ; preds = %for.body102
  %87 = load i32, i32* %n, align 4, !dbg !3504
  %inc108 = add nsw i32 %87, 1, !dbg !3504
  store i32 %inc108, i32* %n, align 4, !dbg !3504
  br label %for.cond99, !dbg !3506, !llvm.loop !3507

for.end109:                                       ; preds = %for.cond99
  br label %if.end110, !dbg !3509

if.end110:                                        ; preds = %for.end109, %if.end30
  %88 = load %struct.AVFrame*, %struct.AVFrame** %frame.addr, align 8, !dbg !3510
  call void @av_frame_unref(%struct.AVFrame* %88), !dbg !3511
  %89 = load %struct.AVFrame*, %struct.AVFrame** %frame.addr, align 8, !dbg !3512
  %nb_samples = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %89, i32 0, i32 5, !dbg !3513
  store i32 480, i32* %nb_samples, align 8, !dbg !3514
  %90 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !3515
  %91 = load %struct.AVFrame*, %struct.AVFrame** %frame.addr, align 8, !dbg !3517
  %call111 = call i32 @ff_get_buffer(%struct.AVCodecContext* %90, %struct.AVFrame* %91, i32 0), !dbg !3518
  store i32 %call111, i32* %res, align 4, !dbg !3519
  %cmp112 = icmp slt i32 %call111, 0, !dbg !3520
  br i1 %cmp112, label %if.then114, label %if.end115, !dbg !3521

if.then114:                                       ; preds = %if.end110
  %92 = load i32, i32* %res, align 4, !dbg !3522
  store i32 %92, i32* %retval, align 4, !dbg !3523
  br label %return, !dbg !3523

if.end115:                                        ; preds = %if.end110
  %93 = load i32, i32* %n_samples, align 4, !dbg !3524
  %94 = load %struct.AVFrame*, %struct.AVFrame** %frame.addr, align 8, !dbg !3525
  %nb_samples116 = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %94, i32 0, i32 5, !dbg !3526
  store i32 %93, i32* %nb_samples116, align 8, !dbg !3527
  %95 = load %struct.AVFrame*, %struct.AVFrame** %frame.addr, align 8, !dbg !3528
  %data = getelementptr inbounds %struct.AVFrame, %struct.AVFrame* %95, i32 0, i32 0, !dbg !3529
  %arrayidx117 = getelementptr inbounds [8 x i8*], [8 x i8*]* %data, i64 0, i64 0, !dbg !3528
  %96 = load i8*, i8** %arrayidx117, align 8, !dbg !3528
  %97 = bitcast i8* %96 to float*, !dbg !3530
  store float* %97, float** %samples, align 8, !dbg !3531
  store i32 0, i32* %n, align 4, !dbg !3532
  br label %for.cond118, !dbg !3534

for.cond118:                                      ; preds = %for.inc189, %if.end115
  %98 = load i32, i32* %n, align 4, !dbg !3535
  %cmp119 = icmp slt i32 %98, 3, !dbg !3538
  br i1 %cmp119, label %for.body121, label %for.end191, !dbg !3539

for.body121:                                      ; preds = %for.cond118
  %99 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3540
  %has_residual_lsps122 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %99, i32 0, i32 20, !dbg !3543
  %100 = load i32, i32* %has_residual_lsps122, align 8, !dbg !3543
  %tobool123 = icmp ne i32 %100, 0, !dbg !3540
  br i1 %tobool123, label %if.end156, label %if.then124, !dbg !3544

if.then124:                                       ; preds = %for.body121
  call void @llvm.dbg.declare(metadata i32* %m, metadata !3545, metadata !2040), !dbg !3547
  %101 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3548
  %lsps125 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %101, i32 0, i32 8, !dbg !3550
  %102 = load i32, i32* %lsps125, align 4, !dbg !3550
  %cmp126 = icmp eq i32 %102, 10, !dbg !3551
  br i1 %cmp126, label %if.then128, label %if.else132, !dbg !3552

if.then128:                                       ; preds = %if.then124
  %103 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3553
  %104 = load i32, i32* %n, align 4, !dbg !3555
  %idxprom129 = sext i32 %104 to i64, !dbg !3556
  %arrayidx130 = getelementptr inbounds [3 x [16 x double]], [3 x [16 x double]]* %lsps, i64 0, i64 %idxprom129, !dbg !3556
  %arraydecay131 = getelementptr inbounds [16 x double], [16 x double]* %arrayidx130, i32 0, i32 0, !dbg !3556
  call void @dequant_lsp10i(%struct.GetBitContext* %103, double* %arraydecay131), !dbg !3557
  br label %if.end136, !dbg !3558

if.else132:                                       ; preds = %if.then124
  %105 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3559
  %106 = load i32, i32* %n, align 4, !dbg !3560
  %idxprom133 = sext i32 %106 to i64, !dbg !3561
  %arrayidx134 = getelementptr inbounds [3 x [16 x double]], [3 x [16 x double]]* %lsps, i64 0, i64 %idxprom133, !dbg !3561
  %arraydecay135 = getelementptr inbounds [16 x double], [16 x double]* %arrayidx134, i32 0, i32 0, !dbg !3561
  call void @dequant_lsp16i(%struct.GetBitContext* %105, double* %arraydecay135), !dbg !3562
  br label %if.end136

if.end136:                                        ; preds = %if.else132, %if.then128
  store i32 0, i32* %m, align 4, !dbg !3563
  br label %for.cond137, !dbg !3565

for.cond137:                                      ; preds = %for.inc149, %if.end136
  %107 = load i32, i32* %m, align 4, !dbg !3566
  %108 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3569
  %lsps138 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %108, i32 0, i32 8, !dbg !3570
  %109 = load i32, i32* %lsps138, align 4, !dbg !3570
  %cmp139 = icmp slt i32 %107, %109, !dbg !3571
  br i1 %cmp139, label %for.body141, label %for.end151, !dbg !3572

for.body141:                                      ; preds = %for.cond137
  %110 = load i32, i32* %m, align 4, !dbg !3573
  %idxprom142 = sext i32 %110 to i64, !dbg !3574
  %111 = load double*, double** %mean_lsf, align 8, !dbg !3574
  %arrayidx143 = getelementptr inbounds double, double* %111, i64 %idxprom142, !dbg !3574
  %112 = load double, double* %arrayidx143, align 8, !dbg !3574
  %113 = load i32, i32* %m, align 4, !dbg !3575
  %idxprom144 = sext i32 %113 to i64, !dbg !3576
  %114 = load i32, i32* %n, align 4, !dbg !3577
  %idxprom145 = sext i32 %114 to i64, !dbg !3576
  %arrayidx146 = getelementptr inbounds [3 x [16 x double]], [3 x [16 x double]]* %lsps, i64 0, i64 %idxprom145, !dbg !3576
  %arrayidx147 = getelementptr inbounds [16 x double], [16 x double]* %arrayidx146, i64 0, i64 %idxprom144, !dbg !3576
  %115 = load double, double* %arrayidx147, align 8, !dbg !3578
  %add148 = fadd double %115, %112, !dbg !3578
  store double %add148, double* %arrayidx147, align 8, !dbg !3578
  br label %for.inc149, !dbg !3576

for.inc149:                                       ; preds = %for.body141
  %116 = load i32, i32* %m, align 4, !dbg !3579
  %inc150 = add nsw i32 %116, 1, !dbg !3579
  store i32 %inc150, i32* %m, align 4, !dbg !3579
  br label %for.cond137, !dbg !3581, !llvm.loop !3582

for.end151:                                       ; preds = %for.cond137
  %117 = load i32, i32* %n, align 4, !dbg !3584
  %idxprom152 = sext i32 %117 to i64, !dbg !3585
  %arrayidx153 = getelementptr inbounds [3 x [16 x double]], [3 x [16 x double]]* %lsps, i64 0, i64 %idxprom152, !dbg !3585
  %arraydecay154 = getelementptr inbounds [16 x double], [16 x double]* %arrayidx153, i32 0, i32 0, !dbg !3585
  %118 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3586
  %lsps155 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %118, i32 0, i32 8, !dbg !3587
  %119 = load i32, i32* %lsps155, align 4, !dbg !3587
  call void @stabilize_lsps(double* %arraydecay154, i32 %119), !dbg !3588
  br label %if.end156, !dbg !3589

if.end156:                                        ; preds = %for.end151, %for.body121
  %120 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !3590
  %121 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3592
  %122 = load i32, i32* %n, align 4, !dbg !3593
  %123 = load i32, i32* %n, align 4, !dbg !3594
  %mul157 = mul nsw i32 %123, 160, !dbg !3595
  %idxprom158 = sext i32 %mul157 to i64, !dbg !3596
  %124 = load float*, float** %samples, align 8, !dbg !3596
  %arrayidx159 = getelementptr inbounds float, float* %124, i64 %idxprom158, !dbg !3596
  %125 = load i32, i32* %n, align 4, !dbg !3597
  %idxprom160 = sext i32 %125 to i64, !dbg !3598
  %arrayidx161 = getelementptr inbounds [3 x [16 x double]], [3 x [16 x double]]* %lsps, i64 0, i64 %idxprom160, !dbg !3598
  %arraydecay162 = getelementptr inbounds [16 x double], [16 x double]* %arrayidx161, i32 0, i32 0, !dbg !3598
  %126 = load i32, i32* %n, align 4, !dbg !3599
  %cmp163 = icmp eq i32 %126, 0, !dbg !3600
  br i1 %cmp163, label %cond.true165, label %cond.false168, !dbg !3599

cond.true165:                                     ; preds = %if.end156
  %127 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3601
  %prev_lsps166 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %127, i32 0, i32 25, !dbg !3603
  %arraydecay167 = getelementptr inbounds [16 x double], [16 x double]* %prev_lsps166, i32 0, i32 0, !dbg !3601
  br label %cond.end173, !dbg !3604

cond.false168:                                    ; preds = %if.end156
  %128 = load i32, i32* %n, align 4, !dbg !3605
  %sub169 = sub nsw i32 %128, 1, !dbg !3607
  %idxprom170 = sext i32 %sub169 to i64, !dbg !3608
  %arrayidx171 = getelementptr inbounds [3 x [16 x double]], [3 x [16 x double]]* %lsps, i64 0, i64 %idxprom170, !dbg !3608
  %arraydecay172 = getelementptr inbounds [16 x double], [16 x double]* %arrayidx171, i32 0, i32 0, !dbg !3608
  br label %cond.end173, !dbg !3609

cond.end173:                                      ; preds = %cond.false168, %cond.true165
  %cond174 = phi double* [ %arraydecay167, %cond.true165 ], [ %arraydecay172, %cond.false168 ], !dbg !3610
  %129 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3612
  %history_nsamples175 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %129, i32 0, i32 3, !dbg !3613
  %130 = load i32, i32* %history_nsamples175, align 32, !dbg !3613
  %131 = load i32, i32* %n, align 4, !dbg !3614
  %mul176 = mul nsw i32 %131, 160, !dbg !3615
  %add177 = add nsw i32 %130, %mul176, !dbg !3616
  %idxprom178 = sext i32 %add177 to i64, !dbg !3617
  %arrayidx179 = getelementptr inbounds [908 x float], [908 x float]* %excitation, i64 0, i64 %idxprom178, !dbg !3617
  %132 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3618
  %lsps180 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %132, i32 0, i32 8, !dbg !3619
  %133 = load i32, i32* %lsps180, align 4, !dbg !3619
  %134 = load i32, i32* %n, align 4, !dbg !3620
  %mul181 = mul nsw i32 %134, 160, !dbg !3621
  %add182 = add nsw i32 %133, %mul181, !dbg !3622
  %idxprom183 = sext i32 %add182 to i64, !dbg !3623
  %arrayidx184 = getelementptr inbounds [496 x float], [496 x float]* %synth, i64 0, i64 %idxprom183, !dbg !3623
  %call185 = call i32 @synth_frame(%struct.AVCodecContext* %120, %struct.GetBitContext* %121, i32 %122, float* %arrayidx159, double* %arraydecay162, double* %cond174, float* %arrayidx179, float* %arrayidx184), !dbg !3624
  store i32 %call185, i32* %res, align 4, !dbg !3625
  %tobool186 = icmp ne i32 %call185, 0, !dbg !3625
  br i1 %tobool186, label %if.then187, label %if.end188, !dbg !3626

if.then187:                                       ; preds = %cond.end173
  %135 = load i32*, i32** %got_frame_ptr.addr, align 8, !dbg !3627
  store i32 0, i32* %135, align 4, !dbg !3629
  %136 = load i32, i32* %res, align 4, !dbg !3630
  store i32 %136, i32* %retval, align 4, !dbg !3631
  br label %return, !dbg !3631

if.end188:                                        ; preds = %cond.end173
  br label %for.inc189, !dbg !3632

for.inc189:                                       ; preds = %if.end188
  %137 = load i32, i32* %n, align 4, !dbg !3633
  %inc190 = add nsw i32 %137, 1, !dbg !3633
  store i32 %inc190, i32* %n, align 4, !dbg !3633
  br label %for.cond118, !dbg !3635, !llvm.loop !3636

for.end191:                                       ; preds = %for.cond118
  %138 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3638
  %call192 = call i32 @get_bits1(%struct.GetBitContext* %138), !dbg !3640
  %tobool193 = icmp ne i32 %call192, 0, !dbg !3640
  br i1 %tobool193, label %if.then194, label %if.end198, !dbg !3641

if.then194:                                       ; preds = %for.end191
  %139 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3642
  %call195 = call i32 @get_bits(%struct.GetBitContext* %139, i32 4), !dbg !3644
  store i32 %call195, i32* %res, align 4, !dbg !3645
  %140 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3646
  %141 = load i32, i32* %res, align 4, !dbg !3647
  %add196 = add nsw i32 %141, 1, !dbg !3648
  %mul197 = mul nsw i32 10, %add196, !dbg !3649
  call void @skip_bits(%struct.GetBitContext* %140, i32 %mul197), !dbg !3650
  br label %if.end198, !dbg !3651

if.end198:                                        ; preds = %if.then194, %for.end191
  %142 = load %struct.GetBitContext*, %struct.GetBitContext** %gb, align 8, !dbg !3652
  %call199 = call i32 @get_bits_left(%struct.GetBitContext* %142), !dbg !3654
  %cmp200 = icmp slt i32 %call199, 0, !dbg !3655
  br i1 %cmp200, label %if.then202, label %if.end203, !dbg !3656

if.then202:                                       ; preds = %if.end198
  %143 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !3657
  call void @wmavoice_flush(%struct.AVCodecContext* %143), !dbg !3659
  store i32 -1094995529, i32* %retval, align 4, !dbg !3660
  br label %return, !dbg !3660

if.end203:                                        ; preds = %if.end198
  %144 = load i32*, i32** %got_frame_ptr.addr, align 8, !dbg !3661
  store i32 1, i32* %144, align 4, !dbg !3662
  %145 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3663
  %prev_lsps204 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %145, i32 0, i32 25, !dbg !3664
  %arraydecay205 = getelementptr inbounds [16 x double], [16 x double]* %prev_lsps204, i32 0, i32 0, !dbg !3665
  %146 = bitcast double* %arraydecay205 to i8*, !dbg !3665
  %arrayidx206 = getelementptr inbounds [3 x [16 x double]], [3 x [16 x double]]* %lsps, i64 0, i64 2, !dbg !3666
  %arraydecay207 = getelementptr inbounds [16 x double], [16 x double]* %arrayidx206, i32 0, i32 0, !dbg !3665
  %147 = bitcast double* %arraydecay207 to i8*, !dbg !3665
  %148 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3667
  %lsps208 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %148, i32 0, i32 8, !dbg !3668
  %149 = load i32, i32* %lsps208, align 4, !dbg !3668
  %conv209 = sext i32 %149 to i64, !dbg !3667
  %mul210 = mul i64 %conv209, 8, !dbg !3669
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %146, i8* %147, i64 %mul210, i32 16, i1 false), !dbg !3665
  %150 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3670
  %synth_history211 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %150, i32 0, i32 39, !dbg !3671
  %arraydecay212 = getelementptr inbounds [16 x float], [16 x float]* %synth_history211, i32 0, i32 0, !dbg !3672
  %151 = bitcast float* %arraydecay212 to i8*, !dbg !3672
  %arrayidx213 = getelementptr inbounds [496 x float], [496 x float]* %synth, i64 0, i64 480, !dbg !3673
  %152 = bitcast float* %arrayidx213 to i8*, !dbg !3672
  %153 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3674
  %lsps214 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %153, i32 0, i32 8, !dbg !3675
  %154 = load i32, i32* %lsps214, align 4, !dbg !3675
  %conv215 = sext i32 %154 to i64, !dbg !3674
  %mul216 = mul i64 %conv215, 4, !dbg !3676
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %151, i8* %152, i64 %mul216, i32 4, i1 false), !dbg !3672
  %155 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3677
  %excitation_history217 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %155, i32 0, i32 38, !dbg !3678
  %arraydecay218 = getelementptr inbounds [416 x float], [416 x float]* %excitation_history217, i32 0, i32 0, !dbg !3679
  %156 = bitcast float* %arraydecay218 to i8*, !dbg !3679
  %arrayidx219 = getelementptr inbounds [908 x float], [908 x float]* %excitation, i64 0, i64 480, !dbg !3680
  %157 = bitcast float* %arrayidx219 to i8*, !dbg !3679
  %158 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3681
  %history_nsamples220 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %158, i32 0, i32 3, !dbg !3682
  %159 = load i32, i32* %history_nsamples220, align 32, !dbg !3682
  %conv221 = sext i32 %159 to i64, !dbg !3681
  %mul222 = mul i64 %conv221, 4, !dbg !3683
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %156, i8* %157, i64 %mul222, i32 4, i1 false), !dbg !3679
  %160 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3684
  %do_apf = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %160, i32 0, i32 4, !dbg !3686
  %161 = load i32, i32* %do_apf, align 4, !dbg !3686
  %tobool223 = icmp ne i32 %161, 0, !dbg !3684
  br i1 %tobool223, label %if.then224, label %if.end231, !dbg !3687

if.then224:                                       ; preds = %if.end203
  %162 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3688
  %zero_exc_pf = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %162, i32 0, i32 48, !dbg !3689
  %arraydecay225 = getelementptr inbounds [896 x float], [896 x float]* %zero_exc_pf, i32 0, i32 0, !dbg !3690
  %163 = bitcast float* %arraydecay225 to i8*, !dbg !3690
  %164 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3691
  %zero_exc_pf226 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %164, i32 0, i32 48, !dbg !3692
  %arrayidx227 = getelementptr inbounds [896 x float], [896 x float]* %zero_exc_pf226, i64 0, i64 480, !dbg !3691
  %165 = bitcast float* %arrayidx227 to i8*, !dbg !3690
  %166 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !3693
  %history_nsamples228 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %166, i32 0, i32 3, !dbg !3694
  %167 = load i32, i32* %history_nsamples228, align 32, !dbg !3694
  %conv229 = sext i32 %167 to i64, !dbg !3693
  %mul230 = mul i64 %conv229, 4, !dbg !3695
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %163, i8* %165, i64 %mul230, i32 4, i1 false), !dbg !3690
  br label %if.end231, !dbg !3690

if.end231:                                        ; preds = %if.then224, %if.end203
  store i32 0, i32* %retval, align 4, !dbg !3696
  br label %return, !dbg !3696

return:                                           ; preds = %if.end231, %if.then202, %if.then187, %if.then114, %if.then28, %if.then20
  %168 = load i32, i32* %retval, align 4, !dbg !3697
  ret i32 %168, !dbg !3697
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @skip_bits_long(%struct.GetBitContext* %s, i32 %n) #5 !dbg !3698 {
entry:
  %retval.i = alloca i32, align 4
  %a.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i, metadata !3701, metadata !2040), !dbg !3703
  %amin.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amin.addr.i, metadata !3705, metadata !2040), !dbg !3706
  %amax.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amax.addr.i, metadata !3707, metadata !2040), !dbg !3708
  %s.addr = alloca %struct.GetBitContext*, align 8
  %n.addr = alloca i32, align 4
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !3709, metadata !2040), !dbg !3710
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3711, metadata !2040), !dbg !3712
  %0 = load i32, i32* %n.addr, align 4, !dbg !3713
  %1 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3714
  %index = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %1, i32 0, i32 2, !dbg !3715
  %2 = load i32, i32* %index, align 8, !dbg !3715
  %sub = sub nsw i32 0, %2, !dbg !3716
  %3 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3717
  %size_in_bits_plus8 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %3, i32 0, i32 4, !dbg !3718
  %4 = load i32, i32* %size_in_bits_plus8, align 8, !dbg !3718
  %5 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3719
  %index1 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %5, i32 0, i32 2, !dbg !3720
  %6 = load i32, i32* %index1, align 8, !dbg !3720
  %sub2 = sub nsw i32 %4, %6, !dbg !3721
  store i32 %0, i32* %a.addr.i, align 4, !dbg !3722
  store i32 %sub, i32* %amin.addr.i, align 4, !dbg !3722
  store i32 %sub2, i32* %amax.addr.i, align 4, !dbg !3722
  %7 = load i32, i32* %a.addr.i, align 4, !dbg !3723
  %8 = load i32, i32* %amin.addr.i, align 4, !dbg !3725
  %cmp.i = icmp slt i32 %7, %8, !dbg !3726
  br i1 %cmp.i, label %if.then.i, label %if.else.i, !dbg !3727

if.then.i:                                        ; preds = %entry
  %9 = load i32, i32* %amin.addr.i, align 4, !dbg !3728
  store i32 %9, i32* %retval.i, align 4, !dbg !3730
  br label %av_clip_c.exit, !dbg !3730

if.else.i:                                        ; preds = %entry
  %10 = load i32, i32* %a.addr.i, align 4, !dbg !3731
  %11 = load i32, i32* %amax.addr.i, align 4, !dbg !3733
  %cmp1.i = icmp sgt i32 %10, %11, !dbg !3734
  br i1 %cmp1.i, label %if.then2.i, label %if.else3.i, !dbg !3735

if.then2.i:                                       ; preds = %if.else.i
  %12 = load i32, i32* %amax.addr.i, align 4, !dbg !3736
  store i32 %12, i32* %retval.i, align 4, !dbg !3738
  br label %av_clip_c.exit, !dbg !3738

if.else3.i:                                       ; preds = %if.else.i
  %13 = load i32, i32* %a.addr.i, align 4, !dbg !3739
  store i32 %13, i32* %retval.i, align 4, !dbg !3740
  br label %av_clip_c.exit, !dbg !3740

av_clip_c.exit:                                   ; preds = %if.then.i, %if.then2.i, %if.else3.i
  %14 = load i32, i32* %retval.i, align 4, !dbg !3741
  %15 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3742
  %index3 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %15, i32 0, i32 2, !dbg !3743
  %16 = load i32, i32* %index3, align 8, !dbg !3744
  %add = add nsw i32 %16, %14, !dbg !3744
  store i32 %add, i32* %index3, align 8, !dbg !3744
  ret void, !dbg !3745
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @skip_bits(%struct.GetBitContext* %s, i32 %n) #5 !dbg !3746 {
entry:
  %s.addr = alloca %struct.GetBitContext*, align 8
  %n.addr = alloca i32, align 4
  %re_index = alloca i32, align 4
  %re_cache = alloca i32, align 4
  %re_size_plus8 = alloca i32, align 4
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !3747, metadata !2040), !dbg !3748
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3749, metadata !2040), !dbg !3750
  call void @llvm.dbg.declare(metadata i32* %re_index, metadata !3751, metadata !2040), !dbg !3752
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3753
  %index = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %0, i32 0, i32 2, !dbg !3754
  %1 = load i32, i32* %index, align 8, !dbg !3754
  store i32 %1, i32* %re_index, align 4, !dbg !3752
  call void @llvm.dbg.declare(metadata i32* %re_cache, metadata !3755, metadata !2040), !dbg !3756
  call void @llvm.dbg.declare(metadata i32* %re_size_plus8, metadata !3757, metadata !2040), !dbg !3758
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3759
  %size_in_bits_plus8 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %2, i32 0, i32 4, !dbg !3760
  %3 = load i32, i32* %size_in_bits_plus8, align 8, !dbg !3760
  store i32 %3, i32* %re_size_plus8, align 4, !dbg !3758
  %4 = load i32, i32* %re_size_plus8, align 4, !dbg !3761
  %5 = load i32, i32* %re_index, align 4, !dbg !3762
  %6 = load i32, i32* %n.addr, align 4, !dbg !3763
  %add = add i32 %5, %6, !dbg !3764
  %cmp = icmp ugt i32 %4, %add, !dbg !3765
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3766

cond.true:                                        ; preds = %entry
  %7 = load i32, i32* %re_index, align 4, !dbg !3767
  %8 = load i32, i32* %n.addr, align 4, !dbg !3769
  %add1 = add i32 %7, %8, !dbg !3770
  br label %cond.end, !dbg !3771

cond.false:                                       ; preds = %entry
  %9 = load i32, i32* %re_size_plus8, align 4, !dbg !3772
  br label %cond.end, !dbg !3774

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add1, %cond.true ], [ %9, %cond.false ], !dbg !3775
  store i32 %cond, i32* %re_index, align 4, !dbg !3777
  %10 = load i32, i32* %re_index, align 4, !dbg !3778
  %11 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3779
  %index2 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %11, i32 0, i32 2, !dbg !3780
  store i32 %10, i32* %index2, align 8, !dbg !3781
  ret void, !dbg !3782
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @get_bits_left(%struct.GetBitContext* %gb) #5 !dbg !3783 {
entry:
  %gb.addr = alloca %struct.GetBitContext*, align 8
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !3786, metadata !2040), !dbg !3787
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !3788
  %size_in_bits = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %0, i32 0, i32 3, !dbg !3789
  %1 = load i32, i32* %size_in_bits, align 4, !dbg !3789
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !3790
  %call = call i32 @get_bits_count(%struct.GetBitContext* %2), !dbg !3791
  %sub = sub nsw i32 %1, %call, !dbg !3792
  ret i32 %sub, !dbg !3793
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @init_put_bits(%struct.PutBitContext* %s, i8* %buffer, i32 %buffer_size) #5 !dbg !3794 {
entry:
  %s.addr = alloca %struct.PutBitContext*, align 8
  %buffer.addr = alloca i8*, align 8
  %buffer_size.addr = alloca i32, align 4
  store %struct.PutBitContext* %s, %struct.PutBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PutBitContext** %s.addr, metadata !3797, metadata !2040), !dbg !3798
  store i8* %buffer, i8** %buffer.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buffer.addr, metadata !3799, metadata !2040), !dbg !3800
  store i32 %buffer_size, i32* %buffer_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %buffer_size.addr, metadata !3801, metadata !2040), !dbg !3802
  %0 = load i32, i32* %buffer_size.addr, align 4, !dbg !3803
  %cmp = icmp slt i32 %0, 0, !dbg !3805
  br i1 %cmp, label %if.then, label %if.end, !dbg !3806

if.then:                                          ; preds = %entry
  store i32 0, i32* %buffer_size.addr, align 4, !dbg !3807
  store i8* null, i8** %buffer.addr, align 8, !dbg !3809
  br label %if.end, !dbg !3810

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %buffer_size.addr, align 4, !dbg !3811
  %mul = mul nsw i32 8, %1, !dbg !3812
  %2 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3813
  %size_in_bits = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %2, i32 0, i32 5, !dbg !3814
  store i32 %mul, i32* %size_in_bits, align 8, !dbg !3815
  %3 = load i8*, i8** %buffer.addr, align 8, !dbg !3816
  %4 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3817
  %buf = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %4, i32 0, i32 2, !dbg !3818
  store i8* %3, i8** %buf, align 8, !dbg !3819
  %5 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3820
  %buf1 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %5, i32 0, i32 2, !dbg !3821
  %6 = load i8*, i8** %buf1, align 8, !dbg !3821
  %7 = load i32, i32* %buffer_size.addr, align 4, !dbg !3822
  %idx.ext = sext i32 %7 to i64, !dbg !3823
  %add.ptr = getelementptr inbounds i8, i8* %6, i64 %idx.ext, !dbg !3823
  %8 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3824
  %buf_end = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %8, i32 0, i32 4, !dbg !3825
  store i8* %add.ptr, i8** %buf_end, align 8, !dbg !3826
  %9 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3827
  %buf2 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %9, i32 0, i32 2, !dbg !3828
  %10 = load i8*, i8** %buf2, align 8, !dbg !3828
  %11 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3829
  %buf_ptr = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %11, i32 0, i32 3, !dbg !3830
  store i8* %10, i8** %buf_ptr, align 8, !dbg !3831
  %12 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3832
  %bit_left = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %12, i32 0, i32 1, !dbg !3833
  store i32 32, i32* %bit_left, align 4, !dbg !3834
  %13 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3835
  %bit_buf = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %13, i32 0, i32 0, !dbg !3836
  store i32 0, i32* %bit_buf, align 8, !dbg !3837
  ret void, !dbg !3838
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @get_bits1(%struct.GetBitContext* %s) #5 !dbg !3839 {
entry:
  %s.addr = alloca %struct.GetBitContext*, align 8
  %index = alloca i32, align 4
  %result = alloca i8, align 1
  store %struct.GetBitContext* %s, %struct.GetBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr, metadata !3842, metadata !2040), !dbg !3843
  call void @llvm.dbg.declare(metadata i32* %index, metadata !3844, metadata !2040), !dbg !3845
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3846
  %index1 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %0, i32 0, i32 2, !dbg !3847
  %1 = load i32, i32* %index1, align 8, !dbg !3847
  store i32 %1, i32* %index, align 4, !dbg !3845
  call void @llvm.dbg.declare(metadata i8* %result, metadata !3848, metadata !2040), !dbg !3849
  %2 = load i32, i32* %index, align 4, !dbg !3850
  %shr = lshr i32 %2, 3, !dbg !3851
  %idxprom = zext i32 %shr to i64, !dbg !3852
  %3 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3852
  %buffer = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %3, i32 0, i32 0, !dbg !3853
  %4 = load i8*, i8** %buffer, align 8, !dbg !3853
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 %idxprom, !dbg !3852
  %5 = load i8, i8* %arrayidx, align 1, !dbg !3852
  store i8 %5, i8* %result, align 1, !dbg !3849
  %6 = load i32, i32* %index, align 4, !dbg !3854
  %and = and i32 %6, 7, !dbg !3855
  %7 = load i8, i8* %result, align 1, !dbg !3856
  %conv = zext i8 %7 to i32, !dbg !3856
  %shl = shl i32 %conv, %and, !dbg !3856
  %conv2 = trunc i32 %shl to i8, !dbg !3856
  store i8 %conv2, i8* %result, align 1, !dbg !3856
  %8 = load i8, i8* %result, align 1, !dbg !3857
  %conv3 = zext i8 %8 to i32, !dbg !3857
  %shr4 = ashr i32 %conv3, 7, !dbg !3857
  %conv5 = trunc i32 %shr4 to i8, !dbg !3857
  store i8 %conv5, i8* %result, align 1, !dbg !3857
  %9 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3858
  %index6 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %9, i32 0, i32 2, !dbg !3860
  %10 = load i32, i32* %index6, align 8, !dbg !3860
  %11 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3861
  %size_in_bits_plus8 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %11, i32 0, i32 4, !dbg !3862
  %12 = load i32, i32* %size_in_bits_plus8, align 8, !dbg !3862
  %cmp = icmp slt i32 %10, %12, !dbg !3863
  br i1 %cmp, label %if.then, label %if.end, !dbg !3864

if.then:                                          ; preds = %entry
  %13 = load i32, i32* %index, align 4, !dbg !3865
  %inc = add i32 %13, 1, !dbg !3865
  store i32 %inc, i32* %index, align 4, !dbg !3865
  br label %if.end, !dbg !3866

if.end:                                           ; preds = %if.then, %entry
  %14 = load i32, i32* %index, align 4, !dbg !3867
  %15 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr, align 8, !dbg !3868
  %index8 = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %15, i32 0, i32 2, !dbg !3869
  store i32 %14, i32* %index8, align 8, !dbg !3870
  %16 = load i8, i8* %result, align 1, !dbg !3871
  %conv9 = zext i8 %16 to i32, !dbg !3871
  ret i32 %conv9, !dbg !3872
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @put_bits_count(%struct.PutBitContext* %s) #5 !dbg !3873 {
entry:
  %s.addr = alloca %struct.PutBitContext*, align 8
  store %struct.PutBitContext* %s, %struct.PutBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PutBitContext** %s.addr, metadata !3876, metadata !2040), !dbg !3877
  %0 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3878
  %buf_ptr = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i32 0, i32 3, !dbg !3879
  %1 = load i8*, i8** %buf_ptr, align 8, !dbg !3879
  %2 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3880
  %buf = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %2, i32 0, i32 2, !dbg !3881
  %3 = load i8*, i8** %buf, align 8, !dbg !3881
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64, !dbg !3882
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64, !dbg !3882
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !3882
  %mul = mul nsw i64 %sub.ptr.sub, 8, !dbg !3883
  %add = add nsw i64 %mul, 32, !dbg !3884
  %4 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3885
  %bit_left = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %4, i32 0, i32 1, !dbg !3886
  %5 = load i32, i32* %bit_left, align 4, !dbg !3886
  %conv = sext i32 %5 to i64, !dbg !3885
  %sub = sub nsw i64 %add, %conv, !dbg !3887
  %conv1 = trunc i64 %sub to i32, !dbg !3888
  ret i32 %conv1, !dbg !3889
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @put_bits(%struct.PutBitContext* %s, i32 %n, i32 %value) #5 !dbg !3890 {
entry:
  %x.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i, metadata !2938, metadata !2040), !dbg !3893
  %s.addr = alloca %struct.PutBitContext*, align 8
  %n.addr = alloca i32, align 4
  %value.addr = alloca i32, align 4
  %bit_buf = alloca i32, align 4
  %bit_left = alloca i32, align 4
  store %struct.PutBitContext* %s, %struct.PutBitContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.PutBitContext** %s.addr, metadata !3899, metadata !2040), !dbg !3900
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !3901, metadata !2040), !dbg !3902
  store i32 %value, i32* %value.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %value.addr, metadata !3903, metadata !2040), !dbg !3904
  call void @llvm.dbg.declare(metadata i32* %bit_buf, metadata !3905, metadata !2040), !dbg !3906
  call void @llvm.dbg.declare(metadata i32* %bit_left, metadata !3907, metadata !2040), !dbg !3908
  %0 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3909
  %bit_buf1 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %0, i32 0, i32 0, !dbg !3910
  %1 = load i32, i32* %bit_buf1, align 8, !dbg !3910
  store i32 %1, i32* %bit_buf, align 4, !dbg !3911
  %2 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3912
  %bit_left2 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %2, i32 0, i32 1, !dbg !3913
  %3 = load i32, i32* %bit_left2, align 4, !dbg !3913
  store i32 %3, i32* %bit_left, align 4, !dbg !3914
  %4 = load i32, i32* %n.addr, align 4, !dbg !3915
  %5 = load i32, i32* %bit_left, align 4, !dbg !3916
  %cmp = icmp slt i32 %4, %5, !dbg !3917
  br i1 %cmp, label %if.then, label %if.else, !dbg !3918

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %bit_buf, align 4, !dbg !3919
  %7 = load i32, i32* %n.addr, align 4, !dbg !3921
  %shl = shl i32 %6, %7, !dbg !3922
  %8 = load i32, i32* %value.addr, align 4, !dbg !3923
  %or = or i32 %shl, %8, !dbg !3924
  store i32 %or, i32* %bit_buf, align 4, !dbg !3925
  %9 = load i32, i32* %n.addr, align 4, !dbg !3926
  %10 = load i32, i32* %bit_left, align 4, !dbg !3927
  %sub = sub nsw i32 %10, %9, !dbg !3927
  store i32 %sub, i32* %bit_left, align 4, !dbg !3927
  br label %if.end12, !dbg !3928

if.else:                                          ; preds = %entry
  %11 = load i32, i32* %bit_left, align 4, !dbg !3929
  %12 = load i32, i32* %bit_buf, align 4, !dbg !3930
  %shl3 = shl i32 %12, %11, !dbg !3930
  store i32 %shl3, i32* %bit_buf, align 4, !dbg !3930
  %13 = load i32, i32* %value.addr, align 4, !dbg !3931
  %14 = load i32, i32* %n.addr, align 4, !dbg !3932
  %15 = load i32, i32* %bit_left, align 4, !dbg !3933
  %sub4 = sub nsw i32 %14, %15, !dbg !3934
  %shr = lshr i32 %13, %sub4, !dbg !3935
  %16 = load i32, i32* %bit_buf, align 4, !dbg !3936
  %or5 = or i32 %16, %shr, !dbg !3936
  store i32 %or5, i32* %bit_buf, align 4, !dbg !3936
  %17 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3937
  %buf_end = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %17, i32 0, i32 4, !dbg !3938
  %18 = load i8*, i8** %buf_end, align 8, !dbg !3938
  %19 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3939
  %buf_ptr = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %19, i32 0, i32 3, !dbg !3940
  %20 = load i8*, i8** %buf_ptr, align 8, !dbg !3940
  %sub.ptr.lhs.cast = ptrtoint i8* %18 to i64, !dbg !3941
  %sub.ptr.rhs.cast = ptrtoint i8* %20 to i64, !dbg !3941
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !3941
  %cmp6 = icmp slt i64 3, %sub.ptr.sub, !dbg !3942
  br i1 %cmp6, label %if.then7, label %if.else10, !dbg !3943

if.then7:                                         ; preds = %if.else
  %21 = load i32, i32* %bit_buf, align 4, !dbg !3944
  store i32 %21, i32* %x.addr.i, align 4, !dbg !3945
  %22 = load i32, i32* %x.addr.i, align 4, !dbg !3946
  %shl.i = shl i32 %22, 8, !dbg !3947
  %and.i = and i32 %shl.i, 65280, !dbg !3948
  %23 = load i32, i32* %x.addr.i, align 4, !dbg !3949
  %shr.i = lshr i32 %23, 8, !dbg !3950
  %and1.i = and i32 %shr.i, 255, !dbg !3951
  %or.i = or i32 %and.i, %and1.i, !dbg !3952
  %shl2.i = shl i32 %or.i, 16, !dbg !3953
  %24 = load i32, i32* %x.addr.i, align 4, !dbg !3954
  %shr3.i = lshr i32 %24, 16, !dbg !3955
  %shl4.i = shl i32 %shr3.i, 8, !dbg !3956
  %and5.i = and i32 %shl4.i, 65280, !dbg !3957
  %25 = load i32, i32* %x.addr.i, align 4, !dbg !3958
  %shr6.i = lshr i32 %25, 16, !dbg !3959
  %shr7.i = lshr i32 %shr6.i, 8, !dbg !3960
  %and8.i = and i32 %shr7.i, 255, !dbg !3961
  %or9.i = or i32 %and5.i, %and8.i, !dbg !3962
  %or10.i = or i32 %shl2.i, %or9.i, !dbg !3963
  %26 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3964
  %buf_ptr8 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %26, i32 0, i32 3, !dbg !3965
  %27 = load i8*, i8** %buf_ptr8, align 8, !dbg !3965
  %28 = bitcast i8* %27 to %union.unaligned_32*, !dbg !3966
  %l = bitcast %union.unaligned_32* %28 to i32*, !dbg !3966
  store i32 %or10.i, i32* %l, align 1, !dbg !3967
  %29 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3968
  %buf_ptr9 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %29, i32 0, i32 3, !dbg !3969
  %30 = load i8*, i8** %buf_ptr9, align 8, !dbg !3970
  %add.ptr = getelementptr inbounds i8, i8* %30, i64 4, !dbg !3970
  store i8* %add.ptr, i8** %buf_ptr9, align 8, !dbg !3970
  br label %if.end, !dbg !3971

if.else10:                                        ; preds = %if.else
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.9, i32 0, i32 0)), !dbg !3972
  br label %if.end

if.end:                                           ; preds = %if.else10, %if.then7
  %31 = load i32, i32* %n.addr, align 4, !dbg !3974
  %sub11 = sub nsw i32 32, %31, !dbg !3975
  %32 = load i32, i32* %bit_left, align 4, !dbg !3976
  %add = add nsw i32 %32, %sub11, !dbg !3976
  store i32 %add, i32* %bit_left, align 4, !dbg !3976
  %33 = load i32, i32* %value.addr, align 4, !dbg !3977
  store i32 %33, i32* %bit_buf, align 4, !dbg !3978
  br label %if.end12

if.end12:                                         ; preds = %if.end, %if.then
  %34 = load i32, i32* %bit_buf, align 4, !dbg !3979
  %35 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3980
  %bit_buf13 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %35, i32 0, i32 0, !dbg !3981
  store i32 %34, i32* %bit_buf13, align 8, !dbg !3982
  %36 = load i32, i32* %bit_left, align 4, !dbg !3983
  %37 = load %struct.PutBitContext*, %struct.PutBitContext** %s.addr, align 8, !dbg !3984
  %bit_left14 = getelementptr inbounds %struct.PutBitContext, %struct.PutBitContext* %37, i32 0, i32 1, !dbg !3985
  store i32 %36, i32* %bit_left14, align 4, !dbg !3986
  ret void, !dbg !3987
}

declare void @avpriv_copy_bits(%struct.PutBitContext*, i8*, i32) #3

; Function Attrs: noreturn nounwind
declare void @abort() #6

declare void @avpriv_request_sample(i8*, i8*, ...) #3

; Function Attrs: nounwind uwtable
define internal void @dequant_lsp10r(%struct.GetBitContext* %gb, double* %i_lsps, double* %old, double* %a1, double* %a2, i32 %q_mode) #1 !dbg !1712 {
entry:
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %i_lsps.addr = alloca double*, align 8
  %old.addr = alloca double*, align 8
  %a1.addr = alloca double*, align 8
  %a2.addr = alloca double*, align 8
  %q_mode.addr = alloca i32, align 4
  %ipol_tab = alloca [2 x [10 x float]]*, align 8
  %interpol = alloca i16, align 2
  %v = alloca [3 x i16], align 2
  %n = alloca i32, align 4
  %delta = alloca double, align 8
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !3988, metadata !2040), !dbg !3989
  store double* %i_lsps, double** %i_lsps.addr, align 8
  call void @llvm.dbg.declare(metadata double** %i_lsps.addr, metadata !3990, metadata !2040), !dbg !3991
  store double* %old, double** %old.addr, align 8
  call void @llvm.dbg.declare(metadata double** %old.addr, metadata !3992, metadata !2040), !dbg !3993
  store double* %a1, double** %a1.addr, align 8
  call void @llvm.dbg.declare(metadata double** %a1.addr, metadata !3994, metadata !2040), !dbg !3995
  store double* %a2, double** %a2.addr, align 8
  call void @llvm.dbg.declare(metadata double** %a2.addr, metadata !3996, metadata !2040), !dbg !3997
  store i32 %q_mode, i32* %q_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %q_mode.addr, metadata !3998, metadata !2040), !dbg !3999
  call void @llvm.dbg.declare(metadata [2 x [10 x float]]** %ipol_tab, metadata !4000, metadata !2040), !dbg !4003
  %0 = load i32, i32* %q_mode.addr, align 4, !dbg !4004
  %tobool = icmp ne i32 %0, 0, !dbg !4004
  %cond = select i1 %tobool, [2 x [10 x float]]* getelementptr inbounds ([32 x [2 x [10 x float]]], [32 x [2 x [10 x float]]]* @wmavoice_lsp10_intercoeff_b, i32 0, i32 0), [2 x [10 x float]]* getelementptr inbounds ([32 x [2 x [10 x float]]], [32 x [2 x [10 x float]]]* @wmavoice_lsp10_intercoeff_a, i32 0, i32 0), !dbg !4004
  store [2 x [10 x float]]* %cond, [2 x [10 x float]]** %ipol_tab, align 8, !dbg !4003
  call void @llvm.dbg.declare(metadata i16* %interpol, metadata !4005, metadata !2040), !dbg !4006
  call void @llvm.dbg.declare(metadata [3 x i16]* %v, metadata !4007, metadata !2040), !dbg !4009
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4010, metadata !2040), !dbg !4011
  %1 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4012
  %2 = load double*, double** %i_lsps.addr, align 8, !dbg !4013
  call void @dequant_lsp10i(%struct.GetBitContext* %1, double* %2), !dbg !4014
  %3 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4015
  %call = call i32 @get_bits(%struct.GetBitContext* %3, i32 5), !dbg !4016
  %conv = trunc i32 %call to i16, !dbg !4016
  store i16 %conv, i16* %interpol, align 2, !dbg !4017
  %4 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4018
  %call1 = call i32 @get_bits(%struct.GetBitContext* %4, i32 7), !dbg !4019
  %conv2 = trunc i32 %call1 to i16, !dbg !4019
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %v, i64 0, i64 0, !dbg !4020
  store i16 %conv2, i16* %arrayidx, align 2, !dbg !4021
  %5 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4022
  %call3 = call i32 @get_bits(%struct.GetBitContext* %5, i32 6), !dbg !4023
  %conv4 = trunc i32 %call3 to i16, !dbg !4023
  %arrayidx5 = getelementptr inbounds [3 x i16], [3 x i16]* %v, i64 0, i64 1, !dbg !4024
  store i16 %conv4, i16* %arrayidx5, align 2, !dbg !4025
  %6 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4026
  %call6 = call i32 @get_bits(%struct.GetBitContext* %6, i32 6), !dbg !4027
  %conv7 = trunc i32 %call6 to i16, !dbg !4027
  %arrayidx8 = getelementptr inbounds [3 x i16], [3 x i16]* %v, i64 0, i64 2, !dbg !4028
  store i16 %conv7, i16* %arrayidx8, align 2, !dbg !4029
  store i32 0, i32* %n, align 4, !dbg !4030
  br label %for.cond, !dbg !4032

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %n, align 4, !dbg !4033
  %cmp = icmp slt i32 %7, 10, !dbg !4036
  br i1 %cmp, label %for.body, label %for.end, !dbg !4037

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata double* %delta, metadata !4038, metadata !2040), !dbg !4040
  %8 = load i32, i32* %n, align 4, !dbg !4041
  %idxprom = sext i32 %8 to i64, !dbg !4042
  %9 = load double*, double** %old.addr, align 8, !dbg !4042
  %arrayidx10 = getelementptr inbounds double, double* %9, i64 %idxprom, !dbg !4042
  %10 = load double, double* %arrayidx10, align 8, !dbg !4042
  %11 = load i32, i32* %n, align 4, !dbg !4043
  %idxprom11 = sext i32 %11 to i64, !dbg !4044
  %12 = load double*, double** %i_lsps.addr, align 8, !dbg !4044
  %arrayidx12 = getelementptr inbounds double, double* %12, i64 %idxprom11, !dbg !4044
  %13 = load double, double* %arrayidx12, align 8, !dbg !4044
  %sub = fsub double %10, %13, !dbg !4045
  store double %sub, double* %delta, align 8, !dbg !4040
  %14 = load i32, i32* %n, align 4, !dbg !4046
  %idxprom13 = sext i32 %14 to i64, !dbg !4047
  %15 = load i16, i16* %interpol, align 2, !dbg !4048
  %idxprom14 = zext i16 %15 to i64, !dbg !4047
  %16 = load [2 x [10 x float]]*, [2 x [10 x float]]** %ipol_tab, align 8, !dbg !4047
  %arrayidx15 = getelementptr inbounds [2 x [10 x float]], [2 x [10 x float]]* %16, i64 %idxprom14, !dbg !4047
  %arrayidx16 = getelementptr inbounds [2 x [10 x float]], [2 x [10 x float]]* %arrayidx15, i64 0, i64 0, !dbg !4047
  %arrayidx17 = getelementptr inbounds [10 x float], [10 x float]* %arrayidx16, i64 0, i64 %idxprom13, !dbg !4047
  %17 = load float, float* %arrayidx17, align 4, !dbg !4047
  %conv18 = fpext float %17 to double, !dbg !4047
  %18 = load double, double* %delta, align 8, !dbg !4049
  %mul = fmul double %conv18, %18, !dbg !4050
  %19 = load i32, i32* %n, align 4, !dbg !4051
  %idxprom19 = sext i32 %19 to i64, !dbg !4052
  %20 = load double*, double** %i_lsps.addr, align 8, !dbg !4052
  %arrayidx20 = getelementptr inbounds double, double* %20, i64 %idxprom19, !dbg !4052
  %21 = load double, double* %arrayidx20, align 8, !dbg !4052
  %add = fadd double %mul, %21, !dbg !4053
  %22 = load i32, i32* %n, align 4, !dbg !4054
  %idxprom21 = sext i32 %22 to i64, !dbg !4055
  %23 = load double*, double** %a1.addr, align 8, !dbg !4055
  %arrayidx22 = getelementptr inbounds double, double* %23, i64 %idxprom21, !dbg !4055
  store double %add, double* %arrayidx22, align 8, !dbg !4056
  %24 = load i32, i32* %n, align 4, !dbg !4057
  %idxprom23 = sext i32 %24 to i64, !dbg !4058
  %25 = load i16, i16* %interpol, align 2, !dbg !4059
  %idxprom24 = zext i16 %25 to i64, !dbg !4058
  %26 = load [2 x [10 x float]]*, [2 x [10 x float]]** %ipol_tab, align 8, !dbg !4058
  %arrayidx25 = getelementptr inbounds [2 x [10 x float]], [2 x [10 x float]]* %26, i64 %idxprom24, !dbg !4058
  %arrayidx26 = getelementptr inbounds [2 x [10 x float]], [2 x [10 x float]]* %arrayidx25, i64 0, i64 1, !dbg !4058
  %arrayidx27 = getelementptr inbounds [10 x float], [10 x float]* %arrayidx26, i64 0, i64 %idxprom23, !dbg !4058
  %27 = load float, float* %arrayidx27, align 4, !dbg !4058
  %conv28 = fpext float %27 to double, !dbg !4058
  %28 = load double, double* %delta, align 8, !dbg !4060
  %mul29 = fmul double %conv28, %28, !dbg !4061
  %29 = load i32, i32* %n, align 4, !dbg !4062
  %idxprom30 = sext i32 %29 to i64, !dbg !4063
  %30 = load double*, double** %i_lsps.addr, align 8, !dbg !4063
  %arrayidx31 = getelementptr inbounds double, double* %30, i64 %idxprom30, !dbg !4063
  %31 = load double, double* %arrayidx31, align 8, !dbg !4063
  %add32 = fadd double %mul29, %31, !dbg !4064
  %32 = load i32, i32* %n, align 4, !dbg !4065
  %add33 = add nsw i32 10, %32, !dbg !4066
  %idxprom34 = sext i32 %add33 to i64, !dbg !4067
  %33 = load double*, double** %a1.addr, align 8, !dbg !4067
  %arrayidx35 = getelementptr inbounds double, double* %33, i64 %idxprom34, !dbg !4067
  store double %add32, double* %arrayidx35, align 8, !dbg !4068
  br label %for.inc, !dbg !4069

for.inc:                                          ; preds = %for.body
  %34 = load i32, i32* %n, align 4, !dbg !4070
  %inc = add nsw i32 %34, 1, !dbg !4070
  store i32 %inc, i32* %n, align 4, !dbg !4070
  br label %for.cond, !dbg !4072, !llvm.loop !4073

for.end:                                          ; preds = %for.cond
  %35 = load double*, double** %a2.addr, align 8, !dbg !4075
  %arraydecay = getelementptr inbounds [3 x i16], [3 x i16]* %v, i32 0, i32 0, !dbg !4076
  call void @dequant_lsps(double* %35, i32 20, i16* %arraydecay, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @dequant_lsp10r.vec_sizes, i32 0, i32 0), i32 3, i8* getelementptr inbounds ([5120 x i8], [5120 x i8]* @wmavoice_dq_lsp10r, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @dequant_lsp10r.mul_lsf, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @dequant_lsp10r.base_lsf, i32 0, i32 0)), !dbg !4077
  ret void, !dbg !4078
}

; Function Attrs: nounwind uwtable
define internal void @dequant_lsp16r(%struct.GetBitContext* %gb, double* %i_lsps, double* %old, double* %a1, double* %a2, i32 %q_mode) #1 !dbg !1744 {
entry:
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %i_lsps.addr = alloca double*, align 8
  %old.addr = alloca double*, align 8
  %a1.addr = alloca double*, align 8
  %a2.addr = alloca double*, align 8
  %q_mode.addr = alloca i32, align 4
  %ipol_tab = alloca [2 x [16 x float]]*, align 8
  %interpol = alloca i16, align 2
  %v = alloca [3 x i16], align 2
  %n = alloca i32, align 4
  %delta = alloca double, align 8
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !4079, metadata !2040), !dbg !4080
  store double* %i_lsps, double** %i_lsps.addr, align 8
  call void @llvm.dbg.declare(metadata double** %i_lsps.addr, metadata !4081, metadata !2040), !dbg !4082
  store double* %old, double** %old.addr, align 8
  call void @llvm.dbg.declare(metadata double** %old.addr, metadata !4083, metadata !2040), !dbg !4084
  store double* %a1, double** %a1.addr, align 8
  call void @llvm.dbg.declare(metadata double** %a1.addr, metadata !4085, metadata !2040), !dbg !4086
  store double* %a2, double** %a2.addr, align 8
  call void @llvm.dbg.declare(metadata double** %a2.addr, metadata !4087, metadata !2040), !dbg !4088
  store i32 %q_mode, i32* %q_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %q_mode.addr, metadata !4089, metadata !2040), !dbg !4090
  call void @llvm.dbg.declare(metadata [2 x [16 x float]]** %ipol_tab, metadata !4091, metadata !2040), !dbg !4094
  %0 = load i32, i32* %q_mode.addr, align 4, !dbg !4095
  %tobool = icmp ne i32 %0, 0, !dbg !4095
  %cond = select i1 %tobool, [2 x [16 x float]]* getelementptr inbounds ([32 x [2 x [16 x float]]], [32 x [2 x [16 x float]]]* @wmavoice_lsp16_intercoeff_b, i32 0, i32 0), [2 x [16 x float]]* getelementptr inbounds ([32 x [2 x [16 x float]]], [32 x [2 x [16 x float]]]* @wmavoice_lsp16_intercoeff_a, i32 0, i32 0), !dbg !4095
  store [2 x [16 x float]]* %cond, [2 x [16 x float]]** %ipol_tab, align 8, !dbg !4094
  call void @llvm.dbg.declare(metadata i16* %interpol, metadata !4096, metadata !2040), !dbg !4097
  call void @llvm.dbg.declare(metadata [3 x i16]* %v, metadata !4098, metadata !2040), !dbg !4099
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4100, metadata !2040), !dbg !4101
  %1 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4102
  %2 = load double*, double** %i_lsps.addr, align 8, !dbg !4103
  call void @dequant_lsp16i(%struct.GetBitContext* %1, double* %2), !dbg !4104
  %3 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4105
  %call = call i32 @get_bits(%struct.GetBitContext* %3, i32 5), !dbg !4106
  %conv = trunc i32 %call to i16, !dbg !4106
  store i16 %conv, i16* %interpol, align 2, !dbg !4107
  %4 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4108
  %call1 = call i32 @get_bits(%struct.GetBitContext* %4, i32 7), !dbg !4109
  %conv2 = trunc i32 %call1 to i16, !dbg !4109
  %arrayidx = getelementptr inbounds [3 x i16], [3 x i16]* %v, i64 0, i64 0, !dbg !4110
  store i16 %conv2, i16* %arrayidx, align 2, !dbg !4111
  %5 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4112
  %call3 = call i32 @get_bits(%struct.GetBitContext* %5, i32 7), !dbg !4113
  %conv4 = trunc i32 %call3 to i16, !dbg !4113
  %arrayidx5 = getelementptr inbounds [3 x i16], [3 x i16]* %v, i64 0, i64 1, !dbg !4114
  store i16 %conv4, i16* %arrayidx5, align 2, !dbg !4115
  %6 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4116
  %call6 = call i32 @get_bits(%struct.GetBitContext* %6, i32 7), !dbg !4117
  %conv7 = trunc i32 %call6 to i16, !dbg !4117
  %arrayidx8 = getelementptr inbounds [3 x i16], [3 x i16]* %v, i64 0, i64 2, !dbg !4118
  store i16 %conv7, i16* %arrayidx8, align 2, !dbg !4119
  store i32 0, i32* %n, align 4, !dbg !4120
  br label %for.cond, !dbg !4122

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load i32, i32* %n, align 4, !dbg !4123
  %cmp = icmp slt i32 %7, 16, !dbg !4126
  br i1 %cmp, label %for.body, label %for.end, !dbg !4127

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata double* %delta, metadata !4128, metadata !2040), !dbg !4130
  %8 = load i32, i32* %n, align 4, !dbg !4131
  %idxprom = sext i32 %8 to i64, !dbg !4132
  %9 = load double*, double** %old.addr, align 8, !dbg !4132
  %arrayidx10 = getelementptr inbounds double, double* %9, i64 %idxprom, !dbg !4132
  %10 = load double, double* %arrayidx10, align 8, !dbg !4132
  %11 = load i32, i32* %n, align 4, !dbg !4133
  %idxprom11 = sext i32 %11 to i64, !dbg !4134
  %12 = load double*, double** %i_lsps.addr, align 8, !dbg !4134
  %arrayidx12 = getelementptr inbounds double, double* %12, i64 %idxprom11, !dbg !4134
  %13 = load double, double* %arrayidx12, align 8, !dbg !4134
  %sub = fsub double %10, %13, !dbg !4135
  store double %sub, double* %delta, align 8, !dbg !4130
  %14 = load i32, i32* %n, align 4, !dbg !4136
  %idxprom13 = sext i32 %14 to i64, !dbg !4137
  %15 = load i16, i16* %interpol, align 2, !dbg !4138
  %idxprom14 = zext i16 %15 to i64, !dbg !4137
  %16 = load [2 x [16 x float]]*, [2 x [16 x float]]** %ipol_tab, align 8, !dbg !4137
  %arrayidx15 = getelementptr inbounds [2 x [16 x float]], [2 x [16 x float]]* %16, i64 %idxprom14, !dbg !4137
  %arrayidx16 = getelementptr inbounds [2 x [16 x float]], [2 x [16 x float]]* %arrayidx15, i64 0, i64 0, !dbg !4137
  %arrayidx17 = getelementptr inbounds [16 x float], [16 x float]* %arrayidx16, i64 0, i64 %idxprom13, !dbg !4137
  %17 = load float, float* %arrayidx17, align 4, !dbg !4137
  %conv18 = fpext float %17 to double, !dbg !4137
  %18 = load double, double* %delta, align 8, !dbg !4139
  %mul = fmul double %conv18, %18, !dbg !4140
  %19 = load i32, i32* %n, align 4, !dbg !4141
  %idxprom19 = sext i32 %19 to i64, !dbg !4142
  %20 = load double*, double** %i_lsps.addr, align 8, !dbg !4142
  %arrayidx20 = getelementptr inbounds double, double* %20, i64 %idxprom19, !dbg !4142
  %21 = load double, double* %arrayidx20, align 8, !dbg !4142
  %add = fadd double %mul, %21, !dbg !4143
  %22 = load i32, i32* %n, align 4, !dbg !4144
  %idxprom21 = sext i32 %22 to i64, !dbg !4145
  %23 = load double*, double** %a1.addr, align 8, !dbg !4145
  %arrayidx22 = getelementptr inbounds double, double* %23, i64 %idxprom21, !dbg !4145
  store double %add, double* %arrayidx22, align 8, !dbg !4146
  %24 = load i32, i32* %n, align 4, !dbg !4147
  %idxprom23 = sext i32 %24 to i64, !dbg !4148
  %25 = load i16, i16* %interpol, align 2, !dbg !4149
  %idxprom24 = zext i16 %25 to i64, !dbg !4148
  %26 = load [2 x [16 x float]]*, [2 x [16 x float]]** %ipol_tab, align 8, !dbg !4148
  %arrayidx25 = getelementptr inbounds [2 x [16 x float]], [2 x [16 x float]]* %26, i64 %idxprom24, !dbg !4148
  %arrayidx26 = getelementptr inbounds [2 x [16 x float]], [2 x [16 x float]]* %arrayidx25, i64 0, i64 1, !dbg !4148
  %arrayidx27 = getelementptr inbounds [16 x float], [16 x float]* %arrayidx26, i64 0, i64 %idxprom23, !dbg !4148
  %27 = load float, float* %arrayidx27, align 4, !dbg !4148
  %conv28 = fpext float %27 to double, !dbg !4148
  %28 = load double, double* %delta, align 8, !dbg !4150
  %mul29 = fmul double %conv28, %28, !dbg !4151
  %29 = load i32, i32* %n, align 4, !dbg !4152
  %idxprom30 = sext i32 %29 to i64, !dbg !4153
  %30 = load double*, double** %i_lsps.addr, align 8, !dbg !4153
  %arrayidx31 = getelementptr inbounds double, double* %30, i64 %idxprom30, !dbg !4153
  %31 = load double, double* %arrayidx31, align 8, !dbg !4153
  %add32 = fadd double %mul29, %31, !dbg !4154
  %32 = load i32, i32* %n, align 4, !dbg !4155
  %add33 = add nsw i32 16, %32, !dbg !4156
  %idxprom34 = sext i32 %add33 to i64, !dbg !4157
  %33 = load double*, double** %a1.addr, align 8, !dbg !4157
  %arrayidx35 = getelementptr inbounds double, double* %33, i64 %idxprom34, !dbg !4157
  store double %add32, double* %arrayidx35, align 8, !dbg !4158
  br label %for.inc, !dbg !4159

for.inc:                                          ; preds = %for.body
  %34 = load i32, i32* %n, align 4, !dbg !4160
  %inc = add nsw i32 %34, 1, !dbg !4160
  store i32 %inc, i32* %n, align 4, !dbg !4160
  br label %for.cond, !dbg !4162, !llvm.loop !4163

for.end:                                          ; preds = %for.cond
  %35 = load double*, double** %a2.addr, align 8, !dbg !4165
  %arraydecay = getelementptr inbounds [3 x i16], [3 x i16]* %v, i32 0, i32 0, !dbg !4166
  call void @dequant_lsps(double* %35, i32 10, i16* %arraydecay, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @dequant_lsp16r.vec_sizes, i32 0, i32 0), i32 1, i8* getelementptr inbounds ([1280 x i8], [1280 x i8]* @wmavoice_dq_lsp16r1, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @dequant_lsp16r.mul_lsf, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @dequant_lsp16r.base_lsf, i32 0, i32 0)), !dbg !4167
  %36 = load double*, double** %a2.addr, align 8, !dbg !4168
  %arrayidx36 = getelementptr inbounds double, double* %36, i64 10, !dbg !4168
  %arrayidx37 = getelementptr inbounds [3 x i16], [3 x i16]* %v, i64 0, i64 1, !dbg !4169
  call void @dequant_lsps(double* %arrayidx36, i32 10, i16* %arrayidx37, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @dequant_lsp16r.vec_sizes, i64 0, i64 1), i32 1, i8* getelementptr inbounds ([1280 x i8], [1280 x i8]* @wmavoice_dq_lsp16r2, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @dequant_lsp16r.mul_lsf, i64 0, i64 1), double* getelementptr inbounds ([3 x double], [3 x double]* @dequant_lsp16r.base_lsf, i64 0, i64 1)), !dbg !4170
  %37 = load double*, double** %a2.addr, align 8, !dbg !4171
  %arrayidx38 = getelementptr inbounds double, double* %37, i64 20, !dbg !4171
  %arrayidx39 = getelementptr inbounds [3 x i16], [3 x i16]* %v, i64 0, i64 2, !dbg !4172
  call void @dequant_lsps(double* %arrayidx38, i32 12, i16* %arrayidx39, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @dequant_lsp16r.vec_sizes, i64 0, i64 2), i32 1, i8* getelementptr inbounds ([1536 x i8], [1536 x i8]* @wmavoice_dq_lsp16r3, i32 0, i32 0), double* getelementptr inbounds ([3 x double], [3 x double]* @dequant_lsp16r.mul_lsf, i64 0, i64 2), double* getelementptr inbounds ([3 x double], [3 x double]* @dequant_lsp16r.base_lsf, i64 0, i64 2)), !dbg !4173
  ret void, !dbg !4174
}

; Function Attrs: nounwind uwtable
define internal void @stabilize_lsps(double* %lsps, i32 %num) #1 !dbg !4175 {
entry:
  %lsps.addr = alloca double*, align 8
  %num.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %l = alloca i32, align 4
  %tmp = alloca double, align 8
  store double* %lsps, double** %lsps.addr, align 8
  call void @llvm.dbg.declare(metadata double** %lsps.addr, metadata !4178, metadata !2040), !dbg !4179
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !4180, metadata !2040), !dbg !4181
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4182, metadata !2040), !dbg !4183
  call void @llvm.dbg.declare(metadata i32* %m, metadata !4184, metadata !2040), !dbg !4185
  call void @llvm.dbg.declare(metadata i32* %l, metadata !4186, metadata !2040), !dbg !4187
  %0 = load double*, double** %lsps.addr, align 8, !dbg !4188
  %arrayidx = getelementptr inbounds double, double* %0, i64 0, !dbg !4188
  %1 = load double, double* %arrayidx, align 8, !dbg !4188
  %cmp = fcmp ogt double %1, 0x3F734D4C48E89552, !dbg !4189
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4190

cond.true:                                        ; preds = %entry
  %2 = load double*, double** %lsps.addr, align 8, !dbg !4191
  %arrayidx1 = getelementptr inbounds double, double* %2, i64 0, !dbg !4191
  %3 = load double, double* %arrayidx1, align 8, !dbg !4191
  br label %cond.end, !dbg !4193

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4194

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %3, %cond.true ], [ 0x3F734D4C48E89552, %cond.false ], !dbg !4196
  %4 = load double*, double** %lsps.addr, align 8, !dbg !4198
  %arrayidx2 = getelementptr inbounds double, double* %4, i64 0, !dbg !4198
  store double %cond, double* %arrayidx2, align 8, !dbg !4199
  store i32 1, i32* %n, align 4, !dbg !4200
  br label %for.cond, !dbg !4202

for.cond:                                         ; preds = %for.inc, %cond.end
  %5 = load i32, i32* %n, align 4, !dbg !4203
  %6 = load i32, i32* %num.addr, align 4, !dbg !4206
  %cmp3 = icmp slt i32 %5, %6, !dbg !4207
  br i1 %cmp3, label %for.body, label %for.end, !dbg !4208

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %n, align 4, !dbg !4209
  %idxprom = sext i32 %7 to i64, !dbg !4210
  %8 = load double*, double** %lsps.addr, align 8, !dbg !4210
  %arrayidx4 = getelementptr inbounds double, double* %8, i64 %idxprom, !dbg !4210
  %9 = load double, double* %arrayidx4, align 8, !dbg !4210
  %10 = load i32, i32* %n, align 4, !dbg !4211
  %sub = sub nsw i32 %10, 1, !dbg !4212
  %idxprom5 = sext i32 %sub to i64, !dbg !4213
  %11 = load double*, double** %lsps.addr, align 8, !dbg !4213
  %arrayidx6 = getelementptr inbounds double, double* %11, i64 %idxprom5, !dbg !4213
  %12 = load double, double* %arrayidx6, align 8, !dbg !4213
  %add = fadd double %12, 0x3FA41B2F769CF0E0, !dbg !4214
  %cmp7 = fcmp ogt double %9, %add, !dbg !4215
  br i1 %cmp7, label %cond.true8, label %cond.false11, !dbg !4216

cond.true8:                                       ; preds = %for.body
  %13 = load i32, i32* %n, align 4, !dbg !4217
  %idxprom9 = sext i32 %13 to i64, !dbg !4218
  %14 = load double*, double** %lsps.addr, align 8, !dbg !4218
  %arrayidx10 = getelementptr inbounds double, double* %14, i64 %idxprom9, !dbg !4218
  %15 = load double, double* %arrayidx10, align 8, !dbg !4218
  br label %cond.end16, !dbg !4219

cond.false11:                                     ; preds = %for.body
  %16 = load i32, i32* %n, align 4, !dbg !4220
  %sub12 = sub nsw i32 %16, 1, !dbg !4222
  %idxprom13 = sext i32 %sub12 to i64, !dbg !4223
  %17 = load double*, double** %lsps.addr, align 8, !dbg !4223
  %arrayidx14 = getelementptr inbounds double, double* %17, i64 %idxprom13, !dbg !4223
  %18 = load double, double* %arrayidx14, align 8, !dbg !4223
  %add15 = fadd double %18, 0x3FA41B2F769CF0E0, !dbg !4224
  br label %cond.end16, !dbg !4225

cond.end16:                                       ; preds = %cond.false11, %cond.true8
  %cond17 = phi double [ %15, %cond.true8 ], [ %add15, %cond.false11 ], !dbg !4226
  %19 = load i32, i32* %n, align 4, !dbg !4228
  %idxprom18 = sext i32 %19 to i64, !dbg !4229
  %20 = load double*, double** %lsps.addr, align 8, !dbg !4229
  %arrayidx19 = getelementptr inbounds double, double* %20, i64 %idxprom18, !dbg !4229
  store double %cond17, double* %arrayidx19, align 8, !dbg !4230
  br label %for.inc, !dbg !4229

for.inc:                                          ; preds = %cond.end16
  %21 = load i32, i32* %n, align 4, !dbg !4231
  %inc = add nsw i32 %21, 1, !dbg !4231
  store i32 %inc, i32* %n, align 4, !dbg !4231
  br label %for.cond, !dbg !4232, !llvm.loop !4233

for.end:                                          ; preds = %for.cond
  %22 = load i32, i32* %num.addr, align 4, !dbg !4235
  %sub20 = sub nsw i32 %22, 1, !dbg !4236
  %idxprom21 = sext i32 %sub20 to i64, !dbg !4237
  %23 = load double*, double** %lsps.addr, align 8, !dbg !4237
  %arrayidx22 = getelementptr inbounds double, double* %23, i64 %idxprom21, !dbg !4237
  %24 = load double, double* %arrayidx22, align 8, !dbg !4237
  %cmp23 = fcmp ogt double %24, 0x40091854AE1FB8CE, !dbg !4238
  br i1 %cmp23, label %cond.true24, label %cond.false25, !dbg !4239

cond.true24:                                      ; preds = %for.end
  br label %cond.end29, !dbg !4240

cond.false25:                                     ; preds = %for.end
  %25 = load i32, i32* %num.addr, align 4, !dbg !4241
  %sub26 = sub nsw i32 %25, 1, !dbg !4242
  %idxprom27 = sext i32 %sub26 to i64, !dbg !4243
  %26 = load double*, double** %lsps.addr, align 8, !dbg !4243
  %arrayidx28 = getelementptr inbounds double, double* %26, i64 %idxprom27, !dbg !4243
  %27 = load double, double* %arrayidx28, align 8, !dbg !4243
  br label %cond.end29, !dbg !4244

cond.end29:                                       ; preds = %cond.false25, %cond.true24
  %cond30 = phi double [ 0x40091854AE1FB8CE, %cond.true24 ], [ %27, %cond.false25 ], !dbg !4245
  %28 = load i32, i32* %num.addr, align 4, !dbg !4246
  %sub31 = sub nsw i32 %28, 1, !dbg !4247
  %idxprom32 = sext i32 %sub31 to i64, !dbg !4248
  %29 = load double*, double** %lsps.addr, align 8, !dbg !4248
  %arrayidx33 = getelementptr inbounds double, double* %29, i64 %idxprom32, !dbg !4248
  store double %cond30, double* %arrayidx33, align 8, !dbg !4249
  store i32 1, i32* %n, align 4, !dbg !4250
  br label %for.cond34, !dbg !4252

for.cond34:                                       ; preds = %for.inc70, %cond.end29
  %30 = load i32, i32* %n, align 4, !dbg !4253
  %31 = load i32, i32* %num.addr, align 4, !dbg !4256
  %cmp35 = icmp slt i32 %30, %31, !dbg !4257
  br i1 %cmp35, label %for.body36, label %for.end72, !dbg !4258

for.body36:                                       ; preds = %for.cond34
  %32 = load i32, i32* %n, align 4, !dbg !4259
  %idxprom37 = sext i32 %32 to i64, !dbg !4262
  %33 = load double*, double** %lsps.addr, align 8, !dbg !4262
  %arrayidx38 = getelementptr inbounds double, double* %33, i64 %idxprom37, !dbg !4262
  %34 = load double, double* %arrayidx38, align 8, !dbg !4262
  %35 = load i32, i32* %n, align 4, !dbg !4263
  %sub39 = sub nsw i32 %35, 1, !dbg !4264
  %idxprom40 = sext i32 %sub39 to i64, !dbg !4265
  %36 = load double*, double** %lsps.addr, align 8, !dbg !4265
  %arrayidx41 = getelementptr inbounds double, double* %36, i64 %idxprom40, !dbg !4265
  %37 = load double, double* %arrayidx41, align 8, !dbg !4265
  %cmp42 = fcmp olt double %34, %37, !dbg !4266
  br i1 %cmp42, label %if.then, label %if.end69, !dbg !4267

if.then:                                          ; preds = %for.body36
  store i32 1, i32* %m, align 4, !dbg !4268
  br label %for.cond43, !dbg !4271

for.cond43:                                       ; preds = %for.inc66, %if.then
  %38 = load i32, i32* %m, align 4, !dbg !4272
  %39 = load i32, i32* %num.addr, align 4, !dbg !4275
  %cmp44 = icmp slt i32 %38, %39, !dbg !4276
  br i1 %cmp44, label %for.body45, label %for.end68, !dbg !4277

for.body45:                                       ; preds = %for.cond43
  call void @llvm.dbg.declare(metadata double* %tmp, metadata !4278, metadata !2040), !dbg !4280
  %40 = load i32, i32* %m, align 4, !dbg !4281
  %idxprom46 = sext i32 %40 to i64, !dbg !4282
  %41 = load double*, double** %lsps.addr, align 8, !dbg !4282
  %arrayidx47 = getelementptr inbounds double, double* %41, i64 %idxprom46, !dbg !4282
  %42 = load double, double* %arrayidx47, align 8, !dbg !4282
  store double %42, double* %tmp, align 8, !dbg !4280
  %43 = load i32, i32* %m, align 4, !dbg !4283
  %sub48 = sub nsw i32 %43, 1, !dbg !4285
  store i32 %sub48, i32* %l, align 4, !dbg !4286
  br label %for.cond49, !dbg !4287

for.cond49:                                       ; preds = %for.inc61, %for.body45
  %44 = load i32, i32* %l, align 4, !dbg !4288
  %cmp50 = icmp sge i32 %44, 0, !dbg !4291
  br i1 %cmp50, label %for.body51, label %for.end62, !dbg !4292

for.body51:                                       ; preds = %for.cond49
  %45 = load i32, i32* %l, align 4, !dbg !4293
  %idxprom52 = sext i32 %45 to i64, !dbg !4296
  %46 = load double*, double** %lsps.addr, align 8, !dbg !4296
  %arrayidx53 = getelementptr inbounds double, double* %46, i64 %idxprom52, !dbg !4296
  %47 = load double, double* %arrayidx53, align 8, !dbg !4296
  %48 = load double, double* %tmp, align 8, !dbg !4297
  %cmp54 = fcmp ole double %47, %48, !dbg !4298
  br i1 %cmp54, label %if.then55, label %if.end, !dbg !4299

if.then55:                                        ; preds = %for.body51
  br label %for.end62, !dbg !4300

if.end:                                           ; preds = %for.body51
  %49 = load i32, i32* %l, align 4, !dbg !4302
  %idxprom56 = sext i32 %49 to i64, !dbg !4303
  %50 = load double*, double** %lsps.addr, align 8, !dbg !4303
  %arrayidx57 = getelementptr inbounds double, double* %50, i64 %idxprom56, !dbg !4303
  %51 = load double, double* %arrayidx57, align 8, !dbg !4303
  %52 = load i32, i32* %l, align 4, !dbg !4304
  %add58 = add nsw i32 %52, 1, !dbg !4305
  %idxprom59 = sext i32 %add58 to i64, !dbg !4306
  %53 = load double*, double** %lsps.addr, align 8, !dbg !4306
  %arrayidx60 = getelementptr inbounds double, double* %53, i64 %idxprom59, !dbg !4306
  store double %51, double* %arrayidx60, align 8, !dbg !4307
  br label %for.inc61, !dbg !4308

for.inc61:                                        ; preds = %if.end
  %54 = load i32, i32* %l, align 4, !dbg !4309
  %dec = add nsw i32 %54, -1, !dbg !4309
  store i32 %dec, i32* %l, align 4, !dbg !4309
  br label %for.cond49, !dbg !4311, !llvm.loop !4312

for.end62:                                        ; preds = %if.then55, %for.cond49
  %55 = load double, double* %tmp, align 8, !dbg !4314
  %56 = load i32, i32* %l, align 4, !dbg !4315
  %add63 = add nsw i32 %56, 1, !dbg !4316
  %idxprom64 = sext i32 %add63 to i64, !dbg !4317
  %57 = load double*, double** %lsps.addr, align 8, !dbg !4317
  %arrayidx65 = getelementptr inbounds double, double* %57, i64 %idxprom64, !dbg !4317
  store double %55, double* %arrayidx65, align 8, !dbg !4318
  br label %for.inc66, !dbg !4319

for.inc66:                                        ; preds = %for.end62
  %58 = load i32, i32* %m, align 4, !dbg !4320
  %inc67 = add nsw i32 %58, 1, !dbg !4320
  store i32 %inc67, i32* %m, align 4, !dbg !4320
  br label %for.cond43, !dbg !4322, !llvm.loop !4323

for.end68:                                        ; preds = %for.cond43
  br label %for.end72, !dbg !4325

if.end69:                                         ; preds = %for.body36
  br label %for.inc70, !dbg !4326

for.inc70:                                        ; preds = %if.end69
  %59 = load i32, i32* %n, align 4, !dbg !4327
  %inc71 = add nsw i32 %59, 1, !dbg !4327
  store i32 %inc71, i32* %n, align 4, !dbg !4327
  br label %for.cond34, !dbg !4329, !llvm.loop !4330

for.end72:                                        ; preds = %for.end68, %for.cond34
  ret void, !dbg !4332
}

declare void @av_frame_unref(%struct.AVFrame*) #3

declare i32 @ff_get_buffer(%struct.AVCodecContext*, %struct.AVFrame*, i32) #3

; Function Attrs: nounwind uwtable
define internal void @dequant_lsp10i(%struct.GetBitContext* %gb, double* %lsps) #1 !dbg !1761 {
entry:
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %lsps.addr = alloca double*, align 8
  %v = alloca [4 x i16], align 2
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !4333, metadata !2040), !dbg !4334
  store double* %lsps, double** %lsps.addr, align 8
  call void @llvm.dbg.declare(metadata double** %lsps.addr, metadata !4335, metadata !2040), !dbg !4336
  call void @llvm.dbg.declare(metadata [4 x i16]* %v, metadata !4337, metadata !2040), !dbg !4338
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4339
  %call = call i32 @get_bits(%struct.GetBitContext* %0, i32 8), !dbg !4340
  %conv = trunc i32 %call to i16, !dbg !4340
  %arrayidx = getelementptr inbounds [4 x i16], [4 x i16]* %v, i64 0, i64 0, !dbg !4341
  store i16 %conv, i16* %arrayidx, align 2, !dbg !4342
  %1 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4343
  %call1 = call i32 @get_bits(%struct.GetBitContext* %1, i32 6), !dbg !4344
  %conv2 = trunc i32 %call1 to i16, !dbg !4344
  %arrayidx3 = getelementptr inbounds [4 x i16], [4 x i16]* %v, i64 0, i64 1, !dbg !4345
  store i16 %conv2, i16* %arrayidx3, align 2, !dbg !4346
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4347
  %call4 = call i32 @get_bits(%struct.GetBitContext* %2, i32 5), !dbg !4348
  %conv5 = trunc i32 %call4 to i16, !dbg !4348
  %arrayidx6 = getelementptr inbounds [4 x i16], [4 x i16]* %v, i64 0, i64 2, !dbg !4349
  store i16 %conv5, i16* %arrayidx6, align 2, !dbg !4350
  %3 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4351
  %call7 = call i32 @get_bits(%struct.GetBitContext* %3, i32 5), !dbg !4352
  %conv8 = trunc i32 %call7 to i16, !dbg !4352
  %arrayidx9 = getelementptr inbounds [4 x i16], [4 x i16]* %v, i64 0, i64 3, !dbg !4353
  store i16 %conv8, i16* %arrayidx9, align 2, !dbg !4354
  %4 = load double*, double** %lsps.addr, align 8, !dbg !4355
  %arraydecay = getelementptr inbounds [4 x i16], [4 x i16]* %v, i32 0, i32 0, !dbg !4356
  call void @dequant_lsps(double* %4, i32 10, i16* %arraydecay, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @dequant_lsp10i.vec_sizes, i32 0, i32 0), i32 4, i8* getelementptr inbounds ([3840 x i8], [3840 x i8]* @wmavoice_dq_lsp10i, i32 0, i32 0), double* getelementptr inbounds ([4 x double], [4 x double]* @dequant_lsp10i.mul_lsf, i32 0, i32 0), double* getelementptr inbounds ([4 x double], [4 x double]* @dequant_lsp10i.base_lsf, i32 0, i32 0)), !dbg !4357
  ret void, !dbg !4358
}

; Function Attrs: nounwind uwtable
define internal void @dequant_lsp16i(%struct.GetBitContext* %gb, double* %lsps) #1 !dbg !1773 {
entry:
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %lsps.addr = alloca double*, align 8
  %v = alloca [5 x i16], align 2
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !4359, metadata !2040), !dbg !4360
  store double* %lsps, double** %lsps.addr, align 8
  call void @llvm.dbg.declare(metadata double** %lsps.addr, metadata !4361, metadata !2040), !dbg !4362
  call void @llvm.dbg.declare(metadata [5 x i16]* %v, metadata !4363, metadata !2040), !dbg !4365
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4366
  %call = call i32 @get_bits(%struct.GetBitContext* %0, i32 8), !dbg !4367
  %conv = trunc i32 %call to i16, !dbg !4367
  %arrayidx = getelementptr inbounds [5 x i16], [5 x i16]* %v, i64 0, i64 0, !dbg !4368
  store i16 %conv, i16* %arrayidx, align 2, !dbg !4369
  %1 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4370
  %call1 = call i32 @get_bits(%struct.GetBitContext* %1, i32 6), !dbg !4371
  %conv2 = trunc i32 %call1 to i16, !dbg !4371
  %arrayidx3 = getelementptr inbounds [5 x i16], [5 x i16]* %v, i64 0, i64 1, !dbg !4372
  store i16 %conv2, i16* %arrayidx3, align 2, !dbg !4373
  %2 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4374
  %call4 = call i32 @get_bits(%struct.GetBitContext* %2, i32 7), !dbg !4375
  %conv5 = trunc i32 %call4 to i16, !dbg !4375
  %arrayidx6 = getelementptr inbounds [5 x i16], [5 x i16]* %v, i64 0, i64 2, !dbg !4376
  store i16 %conv5, i16* %arrayidx6, align 2, !dbg !4377
  %3 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4378
  %call7 = call i32 @get_bits(%struct.GetBitContext* %3, i32 6), !dbg !4379
  %conv8 = trunc i32 %call7 to i16, !dbg !4379
  %arrayidx9 = getelementptr inbounds [5 x i16], [5 x i16]* %v, i64 0, i64 3, !dbg !4380
  store i16 %conv8, i16* %arrayidx9, align 2, !dbg !4381
  %4 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4382
  %call10 = call i32 @get_bits(%struct.GetBitContext* %4, i32 7), !dbg !4383
  %conv11 = trunc i32 %call10 to i16, !dbg !4383
  %arrayidx12 = getelementptr inbounds [5 x i16], [5 x i16]* %v, i64 0, i64 4, !dbg !4384
  store i16 %conv11, i16* %arrayidx12, align 2, !dbg !4385
  %5 = load double*, double** %lsps.addr, align 8, !dbg !4386
  %arraydecay = getelementptr inbounds [5 x i16], [5 x i16]* %v, i32 0, i32 0, !dbg !4387
  call void @dequant_lsps(double* %5, i32 5, i16* %arraydecay, i16* getelementptr inbounds ([5 x i16], [5 x i16]* @dequant_lsp16i.vec_sizes, i32 0, i32 0), i32 2, i8* getelementptr inbounds ([1600 x i8], [1600 x i8]* @wmavoice_dq_lsp16i1, i32 0, i32 0), double* getelementptr inbounds ([5 x double], [5 x double]* @dequant_lsp16i.mul_lsf, i32 0, i32 0), double* getelementptr inbounds ([5 x double], [5 x double]* @dequant_lsp16i.base_lsf, i32 0, i32 0)), !dbg !4388
  %6 = load double*, double** %lsps.addr, align 8, !dbg !4389
  %arrayidx13 = getelementptr inbounds double, double* %6, i64 5, !dbg !4389
  %arrayidx14 = getelementptr inbounds [5 x i16], [5 x i16]* %v, i64 0, i64 2, !dbg !4390
  call void @dequant_lsps(double* %arrayidx13, i32 5, i16* %arrayidx14, i16* getelementptr inbounds ([5 x i16], [5 x i16]* @dequant_lsp16i.vec_sizes, i64 0, i64 2), i32 2, i8* getelementptr inbounds ([960 x i8], [960 x i8]* @wmavoice_dq_lsp16i2, i32 0, i32 0), double* getelementptr inbounds ([5 x double], [5 x double]* @dequant_lsp16i.mul_lsf, i64 0, i64 2), double* getelementptr inbounds ([5 x double], [5 x double]* @dequant_lsp16i.base_lsf, i64 0, i64 2)), !dbg !4391
  %7 = load double*, double** %lsps.addr, align 8, !dbg !4392
  %arrayidx15 = getelementptr inbounds double, double* %7, i64 10, !dbg !4392
  %arrayidx16 = getelementptr inbounds [5 x i16], [5 x i16]* %v, i64 0, i64 4, !dbg !4393
  call void @dequant_lsps(double* %arrayidx15, i32 6, i16* %arrayidx16, i16* getelementptr inbounds ([5 x i16], [5 x i16]* @dequant_lsp16i.vec_sizes, i64 0, i64 4), i32 1, i8* getelementptr inbounds ([768 x i8], [768 x i8]* @wmavoice_dq_lsp16i3, i32 0, i32 0), double* getelementptr inbounds ([5 x double], [5 x double]* @dequant_lsp16i.mul_lsf, i64 0, i64 4), double* getelementptr inbounds ([5 x double], [5 x double]* @dequant_lsp16i.base_lsf, i64 0, i64 4)), !dbg !4394
  ret void, !dbg !4395
}

; Function Attrs: nounwind uwtable
define internal i32 @synth_frame(%struct.AVCodecContext* %ctx, %struct.GetBitContext* %gb, i32 %frame_idx, float* %samples, double* %lsps, double* %prev_lsps, float* %excitation, float* %synth) #1 !dbg !4396 {
entry:
  %retval.i = alloca i32, align 4
  %a.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i, metadata !3701, metadata !2040), !dbg !4399
  %amin.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amin.addr.i, metadata !3705, metadata !2040), !dbg !4406
  %amax.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amax.addr.i, metadata !3707, metadata !2040), !dbg !4407
  %x.addr.i96.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i96.i, metadata !2938, metadata !2040), !dbg !4408
  %x.addr.i81.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i81.i, metadata !2938, metadata !2040), !dbg !4420
  %x.addr.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i.i, metadata !2938, metadata !2040), !dbg !4423
  %s.addr.i = alloca %struct.GetBitContext*, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %s.addr.i, metadata !4425, metadata !2040), !dbg !4426
  %table.addr.i = alloca [2 x i16]*, align 8
  call void @llvm.dbg.declare(metadata [2 x i16]** %table.addr.i, metadata !4427, metadata !2040), !dbg !4428
  %bits.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %bits.addr.i, metadata !4429, metadata !2040), !dbg !4430
  %max_depth.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %max_depth.addr.i, metadata !4431, metadata !2040), !dbg !4432
  %code.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %code.i, metadata !4433, metadata !2040), !dbg !4434
  %re_index.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %re_index.i, metadata !4435, metadata !2040), !dbg !4436
  %re_cache.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %re_cache.i, metadata !4437, metadata !2040), !dbg !4438
  %re_size_plus8.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %re_size_plus8.i, metadata !4439, metadata !2040), !dbg !4440
  %n.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %n.i, metadata !4441, metadata !2040), !dbg !4442
  %nb_bits.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_bits.i, metadata !4443, metadata !2040), !dbg !4444
  %index1.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %index1.i, metadata !4445, metadata !2040), !dbg !4446
  %retval = alloca i32, align 4
  %ctx.addr = alloca %struct.AVCodecContext*, align 8
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %frame_idx.addr = alloca i32, align 4
  %samples.addr = alloca float*, align 8
  %lsps.addr = alloca double*, align 8
  %prev_lsps.addr = alloca double*, align 8
  %excitation.addr = alloca float*, align 8
  %synth.addr = alloca float*, align 8
  %s = alloca %struct.WMAVoiceContext*, align 8
  %n = alloca i32, align 4
  %n_blocks_x2 = alloca i32, align 4
  %log_n_blocks_x2 = alloca i32, align 4
  %cur_pitch_val = alloca i32, align 4
  %pitch = alloca [8 x i32], align 16
  %last_block_pitch = alloca i32, align 4
  %bd_idx = alloca i32, align 4
  %block_nsamples = alloca i32, align 4
  %fac = alloca i32, align 4
  %bl_pitch_sh2 = alloca i32, align 4
  %block_pitch = alloca i32, align 4
  %t1 = alloca i32, align 4
  %t2 = alloca i32, align 4
  %t3 = alloca i32, align 4
  %i_lsps = alloca [16 x double], align 16
  %lpcs = alloca [16 x float], align 16
  store %struct.AVCodecContext* %ctx, %struct.AVCodecContext** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVCodecContext** %ctx.addr, metadata !4447, metadata !2040), !dbg !4448
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !4449, metadata !2040), !dbg !4450
  store i32 %frame_idx, i32* %frame_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %frame_idx.addr, metadata !4451, metadata !2040), !dbg !4452
  store float* %samples, float** %samples.addr, align 8
  call void @llvm.dbg.declare(metadata float** %samples.addr, metadata !4453, metadata !2040), !dbg !4454
  store double* %lsps, double** %lsps.addr, align 8
  call void @llvm.dbg.declare(metadata double** %lsps.addr, metadata !4455, metadata !2040), !dbg !4456
  store double* %prev_lsps, double** %prev_lsps.addr, align 8
  call void @llvm.dbg.declare(metadata double** %prev_lsps.addr, metadata !4457, metadata !2040), !dbg !4458
  store float* %excitation, float** %excitation.addr, align 8
  call void @llvm.dbg.declare(metadata float** %excitation.addr, metadata !4459, metadata !2040), !dbg !4460
  store float* %synth, float** %synth.addr, align 8
  call void @llvm.dbg.declare(metadata float** %synth.addr, metadata !4461, metadata !2040), !dbg !4462
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s, metadata !4463, metadata !2040), !dbg !4464
  %0 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !4465
  %priv_data = getelementptr inbounds %struct.AVCodecContext, %struct.AVCodecContext* %0, i32 0, i32 6, !dbg !4466
  %1 = load i8*, i8** %priv_data, align 8, !dbg !4466
  %2 = bitcast i8* %1 to %struct.WMAVoiceContext*, !dbg !4465
  store %struct.WMAVoiceContext* %2, %struct.WMAVoiceContext** %s, align 8, !dbg !4464
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4467, metadata !2040), !dbg !4468
  call void @llvm.dbg.declare(metadata i32* %n_blocks_x2, metadata !4469, metadata !2040), !dbg !4470
  call void @llvm.dbg.declare(metadata i32* %log_n_blocks_x2, metadata !4471, metadata !2040), !dbg !4472
  call void @llvm.dbg.declare(metadata i32* %cur_pitch_val, metadata !4473, metadata !2040), !dbg !4474
  %3 = load i32, i32* %cur_pitch_val, align 4, !dbg !4475
  store i32 %3, i32* %cur_pitch_val, align 4, !dbg !4474
  call void @llvm.dbg.declare(metadata [8 x i32]* %pitch, metadata !4476, metadata !2040), !dbg !4477
  call void @llvm.dbg.declare(metadata i32* %last_block_pitch, metadata !4478, metadata !2040), !dbg !4479
  %4 = load i32, i32* %last_block_pitch, align 4, !dbg !4480
  store i32 %4, i32* %last_block_pitch, align 4, !dbg !4479
  call void @llvm.dbg.declare(metadata i32* %bd_idx, metadata !4481, metadata !2040), !dbg !4482
  %5 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4483
  %6 = load [2 x i16]*, [2 x i16]** getelementptr inbounds (%struct.VLC, %struct.VLC* @frame_type_vlc, i32 0, i32 1), align 8, !dbg !4484
  store %struct.GetBitContext* %5, %struct.GetBitContext** %s.addr.i, align 8, !dbg !4485
  store [2 x i16]* %6, [2 x i16]** %table.addr.i, align 8, !dbg !4485
  store i32 6, i32* %bits.addr.i, align 4, !dbg !4485
  store i32 3, i32* %max_depth.addr.i, align 4, !dbg !4485
  %7 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr.i, align 8, !dbg !4486
  %index.i = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %7, i32 0, i32 2, !dbg !4487
  %8 = load i32, i32* %index.i, align 8, !dbg !4487
  store i32 %8, i32* %re_index.i, align 4, !dbg !4436
  %9 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr.i, align 8, !dbg !4488
  %size_in_bits_plus8.i = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %9, i32 0, i32 4, !dbg !4489
  %10 = load i32, i32* %size_in_bits_plus8.i, align 8, !dbg !4489
  store i32 %10, i32* %re_size_plus8.i, align 4, !dbg !4440
  %11 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr.i, align 8, !dbg !4490
  %buffer.i = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %11, i32 0, i32 0, !dbg !4491
  %12 = load i8*, i8** %buffer.i, align 8, !dbg !4491
  %13 = load i32, i32* %re_index.i, align 4, !dbg !4492
  %shr.i = lshr i32 %13, 3, !dbg !4493
  %idx.ext.i = zext i32 %shr.i to i64, !dbg !4494
  %add.ptr.i = getelementptr inbounds i8, i8* %12, i64 %idx.ext.i, !dbg !4494
  %14 = bitcast i8* %add.ptr.i to %union.unaligned_32*, !dbg !4495
  %l.i = bitcast %union.unaligned_32* %14 to i32*, !dbg !4495
  %15 = load i32, i32* %l.i, align 1, !dbg !4495
  store i32 %15, i32* %x.addr.i.i, align 4, !dbg !4496
  %16 = load i32, i32* %x.addr.i.i, align 4, !dbg !4497
  %shl.i.i = shl i32 %16, 8, !dbg !4498
  %and.i.i = and i32 %shl.i.i, 65280, !dbg !4499
  %17 = load i32, i32* %x.addr.i.i, align 4, !dbg !4500
  %shr.i.i = lshr i32 %17, 8, !dbg !4501
  %and1.i.i = and i32 %shr.i.i, 255, !dbg !4502
  %or.i.i = or i32 %and.i.i, %and1.i.i, !dbg !4503
  %shl2.i.i = shl i32 %or.i.i, 16, !dbg !4504
  %18 = load i32, i32* %x.addr.i.i, align 4, !dbg !4505
  %shr3.i.i = lshr i32 %18, 16, !dbg !4506
  %shl4.i.i = shl i32 %shr3.i.i, 8, !dbg !4507
  %and5.i.i = and i32 %shl4.i.i, 65280, !dbg !4508
  %19 = load i32, i32* %x.addr.i.i, align 4, !dbg !4509
  %shr6.i.i = lshr i32 %19, 16, !dbg !4510
  %shr7.i.i = lshr i32 %shr6.i.i, 8, !dbg !4511
  %and8.i.i = and i32 %shr7.i.i, 255, !dbg !4512
  %or9.i.i = or i32 %and5.i.i, %and8.i.i, !dbg !4513
  %or10.i.i = or i32 %shl2.i.i, %or9.i.i, !dbg !4514
  %20 = load i32, i32* %re_index.i, align 4, !dbg !4515
  %and.i = and i32 %20, 7, !dbg !4516
  %shl.i = shl i32 %or10.i.i, %and.i, !dbg !4517
  store i32 %shl.i, i32* %re_cache.i, align 4, !dbg !4518
  %21 = load i32, i32* %re_cache.i, align 4, !dbg !4519
  %22 = load i32, i32* %bits.addr.i, align 4, !dbg !4521
  %conv.i = trunc i32 %22 to i8, !dbg !4521
  %call2.i = call i32 @NEG_USR32(i32 %21, i8 signext %conv.i) #9, !dbg !4522
  store i32 %call2.i, i32* %index1.i, align 4, !dbg !4523
  %23 = load i32, i32* %index1.i, align 4, !dbg !4524
  %idxprom.i = zext i32 %23 to i64, !dbg !4525
  %24 = load [2 x i16]*, [2 x i16]** %table.addr.i, align 8, !dbg !4525
  %arrayidx.i = getelementptr inbounds [2 x i16], [2 x i16]* %24, i64 %idxprom.i, !dbg !4525
  %arrayidx3.i = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx.i, i64 0, i64 0, !dbg !4525
  %25 = load i16, i16* %arrayidx3.i, align 2, !dbg !4525
  %conv4.i = sext i16 %25 to i32, !dbg !4525
  store i32 %conv4.i, i32* %code.i, align 4, !dbg !4526
  %26 = load i32, i32* %index1.i, align 4, !dbg !4527
  %idxprom5.i = zext i32 %26 to i64, !dbg !4528
  %27 = load [2 x i16]*, [2 x i16]** %table.addr.i, align 8, !dbg !4528
  %arrayidx6.i = getelementptr inbounds [2 x i16], [2 x i16]* %27, i64 %idxprom5.i, !dbg !4528
  %arrayidx7.i = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx6.i, i64 0, i64 1, !dbg !4528
  %28 = load i16, i16* %arrayidx7.i, align 2, !dbg !4528
  %conv8.i = sext i16 %28 to i32, !dbg !4528
  store i32 %conv8.i, i32* %n.i, align 4, !dbg !4529
  %29 = load i32, i32* %max_depth.addr.i, align 4, !dbg !4530
  %cmp.i = icmp sgt i32 %29, 1, !dbg !4531
  br i1 %cmp.i, label %land.lhs.true.i, label %if.end68.i, !dbg !4532

land.lhs.true.i:                                  ; preds = %entry
  %30 = load i32, i32* %n.i, align 4, !dbg !4533
  %cmp10.i = icmp slt i32 %30, 0, !dbg !4535
  br i1 %cmp10.i, label %if.then.i, label %if.end68.i, !dbg !4536

if.then.i:                                        ; preds = %land.lhs.true.i
  %31 = load i32, i32* %re_size_plus8.i, align 4, !dbg !4537
  %32 = load i32, i32* %re_index.i, align 4, !dbg !4539
  %33 = load i32, i32* %bits.addr.i, align 4, !dbg !4540
  %add.i = add i32 %32, %33, !dbg !4541
  %cmp12.i = icmp ugt i32 %31, %add.i, !dbg !4542
  br i1 %cmp12.i, label %cond.true.i, label %cond.false.i, !dbg !4543

cond.true.i:                                      ; preds = %if.then.i
  %34 = load i32, i32* %re_index.i, align 4, !dbg !4544
  %35 = load i32, i32* %bits.addr.i, align 4, !dbg !4546
  %add14.i = add i32 %34, %35, !dbg !4547
  br label %cond.end.i, !dbg !4548

cond.false.i:                                     ; preds = %if.then.i
  %36 = load i32, i32* %re_size_plus8.i, align 4, !dbg !4549
  br label %cond.end.i, !dbg !4551

cond.end.i:                                       ; preds = %cond.false.i, %cond.true.i
  %cond.i = phi i32 [ %add14.i, %cond.true.i ], [ %36, %cond.false.i ], !dbg !4552
  store i32 %cond.i, i32* %re_index.i, align 4, !dbg !4553
  %37 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr.i, align 8, !dbg !4554
  %buffer15.i = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %37, i32 0, i32 0, !dbg !4555
  %38 = load i8*, i8** %buffer15.i, align 8, !dbg !4555
  %39 = load i32, i32* %re_index.i, align 4, !dbg !4556
  %shr16.i = lshr i32 %39, 3, !dbg !4557
  %idx.ext17.i = zext i32 %shr16.i to i64, !dbg !4558
  %add.ptr18.i = getelementptr inbounds i8, i8* %38, i64 %idx.ext17.i, !dbg !4558
  %40 = bitcast i8* %add.ptr18.i to %union.unaligned_32*, !dbg !4559
  %l19.i = bitcast %union.unaligned_32* %40 to i32*, !dbg !4559
  %41 = load i32, i32* %l19.i, align 1, !dbg !4559
  store i32 %41, i32* %x.addr.i81.i, align 4, !dbg !4560
  %42 = load i32, i32* %x.addr.i81.i, align 4, !dbg !4561
  %shl.i82.i = shl i32 %42, 8, !dbg !4562
  %and.i83.i = and i32 %shl.i82.i, 65280, !dbg !4563
  %43 = load i32, i32* %x.addr.i81.i, align 4, !dbg !4564
  %shr.i84.i = lshr i32 %43, 8, !dbg !4565
  %and1.i85.i = and i32 %shr.i84.i, 255, !dbg !4566
  %or.i86.i = or i32 %and.i83.i, %and1.i85.i, !dbg !4567
  %shl2.i87.i = shl i32 %or.i86.i, 16, !dbg !4568
  %44 = load i32, i32* %x.addr.i81.i, align 4, !dbg !4569
  %shr3.i88.i = lshr i32 %44, 16, !dbg !4570
  %shl4.i89.i = shl i32 %shr3.i88.i, 8, !dbg !4571
  %and5.i90.i = and i32 %shl4.i89.i, 65280, !dbg !4572
  %45 = load i32, i32* %x.addr.i81.i, align 4, !dbg !4573
  %shr6.i91.i = lshr i32 %45, 16, !dbg !4574
  %shr7.i92.i = lshr i32 %shr6.i91.i, 8, !dbg !4575
  %and8.i93.i = and i32 %shr7.i92.i, 255, !dbg !4576
  %or9.i94.i = or i32 %and5.i90.i, %and8.i93.i, !dbg !4577
  %or10.i95.i = or i32 %shl2.i87.i, %or9.i94.i, !dbg !4578
  %46 = load i32, i32* %re_index.i, align 4, !dbg !4579
  %and21.i = and i32 %46, 7, !dbg !4580
  %shl22.i = shl i32 %or10.i95.i, %and21.i, !dbg !4581
  store i32 %shl22.i, i32* %re_cache.i, align 4, !dbg !4582
  %47 = load i32, i32* %n.i, align 4, !dbg !4583
  %sub.i = sub nsw i32 0, %47, !dbg !4584
  store i32 %sub.i, i32* %nb_bits.i, align 4, !dbg !4585
  %48 = load i32, i32* %re_cache.i, align 4, !dbg !4586
  %49 = load i32, i32* %nb_bits.i, align 4, !dbg !4587
  %conv23.i = trunc i32 %49 to i8, !dbg !4587
  %call24.i = call i32 @NEG_USR32(i32 %48, i8 signext %conv23.i) #9, !dbg !4588
  %50 = load i32, i32* %code.i, align 4, !dbg !4590
  %add25.i = add i32 %call24.i, %50, !dbg !4591
  store i32 %add25.i, i32* %index1.i, align 4, !dbg !4592
  %51 = load i32, i32* %index1.i, align 4, !dbg !4593
  %idxprom26.i = zext i32 %51 to i64, !dbg !4594
  %52 = load [2 x i16]*, [2 x i16]** %table.addr.i, align 8, !dbg !4594
  %arrayidx27.i = getelementptr inbounds [2 x i16], [2 x i16]* %52, i64 %idxprom26.i, !dbg !4594
  %arrayidx28.i = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx27.i, i64 0, i64 0, !dbg !4594
  %53 = load i16, i16* %arrayidx28.i, align 2, !dbg !4594
  %conv29.i = sext i16 %53 to i32, !dbg !4594
  store i32 %conv29.i, i32* %code.i, align 4, !dbg !4595
  %54 = load i32, i32* %index1.i, align 4, !dbg !4596
  %idxprom30.i = zext i32 %54 to i64, !dbg !4597
  %55 = load [2 x i16]*, [2 x i16]** %table.addr.i, align 8, !dbg !4597
  %arrayidx31.i = getelementptr inbounds [2 x i16], [2 x i16]* %55, i64 %idxprom30.i, !dbg !4597
  %arrayidx32.i = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx31.i, i64 0, i64 1, !dbg !4597
  %56 = load i16, i16* %arrayidx32.i, align 2, !dbg !4597
  %conv33.i = sext i16 %56 to i32, !dbg !4597
  store i32 %conv33.i, i32* %n.i, align 4, !dbg !4598
  %57 = load i32, i32* %max_depth.addr.i, align 4, !dbg !4599
  %cmp34.i = icmp sgt i32 %57, 2, !dbg !4600
  br i1 %cmp34.i, label %land.lhs.true36.i, label %if.end.i, !dbg !4601

land.lhs.true36.i:                                ; preds = %cond.end.i
  %58 = load i32, i32* %n.i, align 4, !dbg !4602
  %cmp37.i = icmp slt i32 %58, 0, !dbg !4604
  br i1 %cmp37.i, label %if.then39.i, label %if.end.i, !dbg !4605

if.then39.i:                                      ; preds = %land.lhs.true36.i
  %59 = load i32, i32* %re_size_plus8.i, align 4, !dbg !4606
  %60 = load i32, i32* %re_index.i, align 4, !dbg !4608
  %61 = load i32, i32* %nb_bits.i, align 4, !dbg !4609
  %add40.i = add i32 %60, %61, !dbg !4610
  %cmp41.i = icmp ugt i32 %59, %add40.i, !dbg !4611
  br i1 %cmp41.i, label %cond.true43.i, label %cond.false45.i, !dbg !4612

cond.true43.i:                                    ; preds = %if.then39.i
  %62 = load i32, i32* %re_index.i, align 4, !dbg !4613
  %63 = load i32, i32* %nb_bits.i, align 4, !dbg !4615
  %add44.i = add i32 %62, %63, !dbg !4616
  br label %cond.end46.i, !dbg !4617

cond.false45.i:                                   ; preds = %if.then39.i
  %64 = load i32, i32* %re_size_plus8.i, align 4, !dbg !4618
  br label %cond.end46.i, !dbg !4620

cond.end46.i:                                     ; preds = %cond.false45.i, %cond.true43.i
  %cond47.i = phi i32 [ %add44.i, %cond.true43.i ], [ %64, %cond.false45.i ], !dbg !4621
  store i32 %cond47.i, i32* %re_index.i, align 4, !dbg !4622
  %65 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr.i, align 8, !dbg !4623
  %buffer48.i = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %65, i32 0, i32 0, !dbg !4624
  %66 = load i8*, i8** %buffer48.i, align 8, !dbg !4624
  %67 = load i32, i32* %re_index.i, align 4, !dbg !4625
  %shr49.i = lshr i32 %67, 3, !dbg !4626
  %idx.ext50.i = zext i32 %shr49.i to i64, !dbg !4627
  %add.ptr51.i = getelementptr inbounds i8, i8* %66, i64 %idx.ext50.i, !dbg !4627
  %68 = bitcast i8* %add.ptr51.i to %union.unaligned_32*, !dbg !4628
  %l52.i = bitcast %union.unaligned_32* %68 to i32*, !dbg !4628
  %69 = load i32, i32* %l52.i, align 1, !dbg !4628
  store i32 %69, i32* %x.addr.i96.i, align 4, !dbg !4629
  %70 = load i32, i32* %x.addr.i96.i, align 4, !dbg !4630
  %shl.i97.i = shl i32 %70, 8, !dbg !4631
  %and.i98.i = and i32 %shl.i97.i, 65280, !dbg !4632
  %71 = load i32, i32* %x.addr.i96.i, align 4, !dbg !4633
  %shr.i99.i = lshr i32 %71, 8, !dbg !4634
  %and1.i100.i = and i32 %shr.i99.i, 255, !dbg !4635
  %or.i101.i = or i32 %and.i98.i, %and1.i100.i, !dbg !4636
  %shl2.i102.i = shl i32 %or.i101.i, 16, !dbg !4637
  %72 = load i32, i32* %x.addr.i96.i, align 4, !dbg !4638
  %shr3.i103.i = lshr i32 %72, 16, !dbg !4639
  %shl4.i104.i = shl i32 %shr3.i103.i, 8, !dbg !4640
  %and5.i105.i = and i32 %shl4.i104.i, 65280, !dbg !4641
  %73 = load i32, i32* %x.addr.i96.i, align 4, !dbg !4642
  %shr6.i106.i = lshr i32 %73, 16, !dbg !4643
  %shr7.i107.i = lshr i32 %shr6.i106.i, 8, !dbg !4644
  %and8.i108.i = and i32 %shr7.i107.i, 255, !dbg !4645
  %or9.i109.i = or i32 %and5.i105.i, %and8.i108.i, !dbg !4646
  %or10.i110.i = or i32 %shl2.i102.i, %or9.i109.i, !dbg !4647
  %74 = load i32, i32* %re_index.i, align 4, !dbg !4648
  %and54.i = and i32 %74, 7, !dbg !4649
  %shl55.i = shl i32 %or10.i110.i, %and54.i, !dbg !4650
  store i32 %shl55.i, i32* %re_cache.i, align 4, !dbg !4651
  %75 = load i32, i32* %n.i, align 4, !dbg !4652
  %sub56.i = sub nsw i32 0, %75, !dbg !4653
  store i32 %sub56.i, i32* %nb_bits.i, align 4, !dbg !4654
  %76 = load i32, i32* %re_cache.i, align 4, !dbg !4655
  %77 = load i32, i32* %nb_bits.i, align 4, !dbg !4656
  %conv57.i = trunc i32 %77 to i8, !dbg !4656
  %call58.i = call i32 @NEG_USR32(i32 %76, i8 signext %conv57.i) #9, !dbg !4657
  %78 = load i32, i32* %code.i, align 4, !dbg !4659
  %add59.i = add i32 %call58.i, %78, !dbg !4660
  store i32 %add59.i, i32* %index1.i, align 4, !dbg !4661
  %79 = load i32, i32* %index1.i, align 4, !dbg !4662
  %idxprom60.i = zext i32 %79 to i64, !dbg !4663
  %80 = load [2 x i16]*, [2 x i16]** %table.addr.i, align 8, !dbg !4663
  %arrayidx61.i = getelementptr inbounds [2 x i16], [2 x i16]* %80, i64 %idxprom60.i, !dbg !4663
  %arrayidx62.i = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx61.i, i64 0, i64 0, !dbg !4663
  %81 = load i16, i16* %arrayidx62.i, align 2, !dbg !4663
  %conv63.i = sext i16 %81 to i32, !dbg !4663
  store i32 %conv63.i, i32* %code.i, align 4, !dbg !4664
  %82 = load i32, i32* %index1.i, align 4, !dbg !4665
  %idxprom64.i = zext i32 %82 to i64, !dbg !4666
  %83 = load [2 x i16]*, [2 x i16]** %table.addr.i, align 8, !dbg !4666
  %arrayidx65.i = getelementptr inbounds [2 x i16], [2 x i16]* %83, i64 %idxprom64.i, !dbg !4666
  %arrayidx66.i = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx65.i, i64 0, i64 1, !dbg !4666
  %84 = load i16, i16* %arrayidx66.i, align 2, !dbg !4666
  %conv67.i = sext i16 %84 to i32, !dbg !4666
  store i32 %conv67.i, i32* %n.i, align 4, !dbg !4667
  br label %if.end.i, !dbg !4668

if.end.i:                                         ; preds = %cond.end46.i, %land.lhs.true36.i, %cond.end.i
  br label %if.end68.i, !dbg !4669

if.end68.i:                                       ; preds = %if.end.i, %land.lhs.true.i, %entry
  %85 = load i32, i32* %n.i, align 4, !dbg !4671
  %86 = load i32, i32* %re_cache.i, align 4, !dbg !4674
  %shl70.i = shl i32 %86, %85, !dbg !4674
  store i32 %shl70.i, i32* %re_cache.i, align 4, !dbg !4674
  %87 = load i32, i32* %re_size_plus8.i, align 4, !dbg !4675
  %88 = load i32, i32* %re_index.i, align 4, !dbg !4676
  %89 = load i32, i32* %n.i, align 4, !dbg !4677
  %add71.i = add i32 %88, %89, !dbg !4678
  %cmp72.i = icmp ugt i32 %87, %add71.i, !dbg !4679
  br i1 %cmp72.i, label %cond.true74.i, label %cond.false76.i, !dbg !4680

cond.true74.i:                                    ; preds = %if.end68.i
  %90 = load i32, i32* %re_index.i, align 4, !dbg !4681
  %91 = load i32, i32* %n.i, align 4, !dbg !4683
  %add75.i = add i32 %90, %91, !dbg !4684
  br label %get_vlc2.exit, !dbg !4685

cond.false76.i:                                   ; preds = %if.end68.i
  %92 = load i32, i32* %re_size_plus8.i, align 4, !dbg !4686
  br label %get_vlc2.exit, !dbg !4688

get_vlc2.exit:                                    ; preds = %cond.true74.i, %cond.false76.i
  %cond78.i = phi i32 [ %add75.i, %cond.true74.i ], [ %92, %cond.false76.i ], !dbg !4689
  store i32 %cond78.i, i32* %re_index.i, align 4, !dbg !4691
  %93 = load i32, i32* %re_index.i, align 4, !dbg !4692
  %94 = load %struct.GetBitContext*, %struct.GetBitContext** %s.addr.i, align 8, !dbg !4693
  %index80.i = getelementptr inbounds %struct.GetBitContext, %struct.GetBitContext* %94, i32 0, i32 2, !dbg !4694
  store i32 %93, i32* %index80.i, align 8, !dbg !4695
  %95 = load i32, i32* %code.i, align 4, !dbg !4696
  %idxprom = sext i32 %95 to i64, !dbg !4697
  %96 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4697
  %vbm_tree = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %96, i32 0, i32 1, !dbg !4698
  %arrayidx = getelementptr inbounds [25 x i8], [25 x i8]* %vbm_tree, i64 0, i64 %idxprom, !dbg !4697
  %97 = load i8, i8* %arrayidx, align 1, !dbg !4697
  %conv = sext i8 %97 to i32, !dbg !4697
  store i32 %conv, i32* %bd_idx, align 4, !dbg !4482
  call void @llvm.dbg.declare(metadata i32* %block_nsamples, metadata !4699, metadata !2040), !dbg !4700
  %98 = load i32, i32* %bd_idx, align 4, !dbg !4701
  %cmp = icmp slt i32 %98, 0, !dbg !4703
  br i1 %cmp, label %if.then, label %if.end, !dbg !4704

if.then:                                          ; preds = %get_vlc2.exit
  %99 = load %struct.AVCodecContext*, %struct.AVCodecContext** %ctx.addr, align 8, !dbg !4705
  %100 = bitcast %struct.AVCodecContext* %99 to i8*, !dbg !4705
  call void (i8*, i32, i8*, ...) @av_log(i8* %100, i32 16, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i32 0, i32 0)), !dbg !4707
  store i32 -1094995529, i32* %retval, align 4, !dbg !4708
  br label %return, !dbg !4708

if.end:                                           ; preds = %get_vlc2.exit
  %101 = load i32, i32* %bd_idx, align 4, !dbg !4709
  %idxprom2 = sext i32 %101 to i64, !dbg !4710
  %arrayidx3 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom2, !dbg !4710
  %n_blocks = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %arrayidx3, i32 0, i32 0, !dbg !4711
  %102 = load i8, i8* %n_blocks, align 1, !dbg !4711
  %conv4 = zext i8 %102 to i32, !dbg !4710
  %div = sdiv i32 160, %conv4, !dbg !4712
  store i32 %div, i32* %block_nsamples, align 4, !dbg !4713
  %103 = load i32, i32* %bd_idx, align 4, !dbg !4714
  %idxprom5 = sext i32 %103 to i64, !dbg !4716
  %arrayidx6 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom5, !dbg !4716
  %acb_type = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %arrayidx6, i32 0, i32 2, !dbg !4717
  %104 = load i8, i8* %acb_type, align 1, !dbg !4717
  %conv7 = zext i8 %104 to i32, !dbg !4716
  %cmp8 = icmp eq i32 %conv7, 1, !dbg !4718
  br i1 %cmp8, label %if.then10, label %if.end59, !dbg !4719

if.then10:                                        ; preds = %if.end
  %105 = load i32, i32* %bd_idx, align 4, !dbg !4720
  %idxprom11 = sext i32 %105 to i64, !dbg !4722
  %arrayidx12 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom11, !dbg !4722
  %n_blocks13 = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %arrayidx12, i32 0, i32 0, !dbg !4723
  %106 = load i8, i8* %n_blocks13, align 1, !dbg !4723
  %conv14 = zext i8 %106 to i32, !dbg !4722
  %shl = shl i32 %conv14, 1, !dbg !4724
  store i32 %shl, i32* %n_blocks_x2, align 4, !dbg !4725
  %107 = load i32, i32* %bd_idx, align 4, !dbg !4726
  %idxprom15 = sext i32 %107 to i64, !dbg !4727
  %arrayidx16 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom15, !dbg !4727
  %log_n_blocks = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %arrayidx16, i32 0, i32 1, !dbg !4728
  %108 = load i8, i8* %log_n_blocks, align 1, !dbg !4728
  %conv17 = zext i8 %108 to i32, !dbg !4727
  %add = add nsw i32 %conv17, 1, !dbg !4729
  store i32 %add, i32* %log_n_blocks_x2, align 4, !dbg !4730
  %109 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4731
  %min_pitch_val = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %109, i32 0, i32 11, !dbg !4732
  %110 = load i32, i32* %min_pitch_val, align 32, !dbg !4732
  %111 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4733
  %112 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4734
  %pitch_nbits = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %112, i32 0, i32 13, !dbg !4735
  %113 = load i32, i32* %pitch_nbits, align 8, !dbg !4735
  %call18 = call i32 @get_bits(%struct.GetBitContext* %111, i32 %113), !dbg !4736
  %add19 = add i32 %110, %call18, !dbg !4737
  store i32 %add19, i32* %cur_pitch_val, align 4, !dbg !4738
  %114 = load i32, i32* %cur_pitch_val, align 4, !dbg !4739
  %115 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4740
  %max_pitch_val = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %115, i32 0, i32 12, !dbg !4741
  %116 = load i32, i32* %max_pitch_val, align 4, !dbg !4741
  %sub = sub nsw i32 %116, 1, !dbg !4742
  %cmp20 = icmp sgt i32 %114, %sub, !dbg !4743
  br i1 %cmp20, label %cond.true, label %cond.false, !dbg !4744

cond.true:                                        ; preds = %if.then10
  %117 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4745
  %max_pitch_val22 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %117, i32 0, i32 12, !dbg !4747
  %118 = load i32, i32* %max_pitch_val22, align 4, !dbg !4747
  %sub23 = sub nsw i32 %118, 1, !dbg !4748
  br label %cond.end, !dbg !4749

cond.false:                                       ; preds = %if.then10
  %119 = load i32, i32* %cur_pitch_val, align 4, !dbg !4750
  br label %cond.end, !dbg !4752

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub23, %cond.true ], [ %119, %cond.false ], !dbg !4753
  store i32 %cond, i32* %cur_pitch_val, align 4, !dbg !4755
  %120 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4756
  %last_acb_type = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %120, i32 0, i32 27, !dbg !4758
  %121 = load i32, i32* %last_acb_type, align 4, !dbg !4758
  %cmp24 = icmp eq i32 %121, 0, !dbg !4759
  br i1 %cmp24, label %if.then32, label %lor.lhs.false, !dbg !4760

lor.lhs.false:                                    ; preds = %cond.end
  %122 = load i32, i32* %cur_pitch_val, align 4, !dbg !4761
  %123 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4762
  %last_pitch_val = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %123, i32 0, i32 26, !dbg !4763
  %124 = load i32, i32* %last_pitch_val, align 32, !dbg !4763
  %sub26 = sub nsw i32 %122, %124, !dbg !4764
  %call27 = call i32 @abs(i32 %sub26) #2, !dbg !4765
  %mul = mul nsw i32 20, %call27, !dbg !4766
  %125 = load i32, i32* %cur_pitch_val, align 4, !dbg !4767
  %126 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4768
  %last_pitch_val28 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %126, i32 0, i32 26, !dbg !4769
  %127 = load i32, i32* %last_pitch_val28, align 32, !dbg !4769
  %add29 = add nsw i32 %125, %127, !dbg !4770
  %cmp30 = icmp sgt i32 %mul, %add29, !dbg !4771
  br i1 %cmp30, label %if.then32, label %if.end34, !dbg !4772

if.then32:                                        ; preds = %lor.lhs.false, %cond.end
  %128 = load i32, i32* %cur_pitch_val, align 4, !dbg !4773
  %129 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4774
  %last_pitch_val33 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %129, i32 0, i32 26, !dbg !4775
  store i32 %128, i32* %last_pitch_val33, align 32, !dbg !4776
  br label %if.end34, !dbg !4774

if.end34:                                         ; preds = %if.then32, %lor.lhs.false
  store i32 0, i32* %n, align 4, !dbg !4777
  br label %for.cond, !dbg !4779

for.cond:                                         ; preds = %for.inc, %if.end34
  %130 = load i32, i32* %n, align 4, !dbg !4780
  %131 = load i32, i32* %bd_idx, align 4, !dbg !4783
  %idxprom35 = sext i32 %131 to i64, !dbg !4784
  %arrayidx36 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom35, !dbg !4784
  %n_blocks37 = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %arrayidx36, i32 0, i32 0, !dbg !4785
  %132 = load i8, i8* %n_blocks37, align 1, !dbg !4785
  %conv38 = zext i8 %132 to i32, !dbg !4784
  %cmp39 = icmp slt i32 %130, %conv38, !dbg !4786
  br i1 %cmp39, label %for.body, label %for.end, !dbg !4787

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %fac, metadata !4788, metadata !2040), !dbg !4790
  %133 = load i32, i32* %n, align 4, !dbg !4791
  %mul41 = mul nsw i32 %133, 2, !dbg !4792
  %add42 = add nsw i32 %mul41, 1, !dbg !4793
  store i32 %add42, i32* %fac, align 4, !dbg !4790
  %134 = load i32, i32* %fac, align 4, !dbg !4794
  %135 = load i32, i32* %cur_pitch_val, align 4, !dbg !4795
  %mul43 = mul nsw i32 %134, %135, !dbg !4796
  %136 = load i32, i32* %n_blocks_x2, align 4, !dbg !4797
  %137 = load i32, i32* %fac, align 4, !dbg !4798
  %sub44 = sub nsw i32 %136, %137, !dbg !4799
  %138 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4800
  %last_pitch_val45 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %138, i32 0, i32 26, !dbg !4801
  %139 = load i32, i32* %last_pitch_val45, align 32, !dbg !4801
  %mul46 = mul nsw i32 %sub44, %139, !dbg !4802
  %add47 = add nsw i32 %mul43, %mul46, !dbg !4803
  %140 = load i32, i32* %bd_idx, align 4, !dbg !4804
  %idxprom48 = sext i32 %140 to i64, !dbg !4805
  %arrayidx49 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom48, !dbg !4805
  %n_blocks50 = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %arrayidx49, i32 0, i32 0, !dbg !4806
  %141 = load i8, i8* %n_blocks50, align 1, !dbg !4806
  %conv51 = zext i8 %141 to i32, !dbg !4805
  %add52 = add nsw i32 %add47, %conv51, !dbg !4807
  %142 = load i32, i32* %log_n_blocks_x2, align 4, !dbg !4808
  %shr = ashr i32 %add52, %142, !dbg !4809
  %143 = load i32, i32* %n, align 4, !dbg !4810
  %idxprom53 = sext i32 %143 to i64, !dbg !4811
  %arrayidx54 = getelementptr inbounds [8 x i32], [8 x i32]* %pitch, i64 0, i64 %idxprom53, !dbg !4811
  store i32 %shr, i32* %arrayidx54, align 4, !dbg !4812
  br label %for.inc, !dbg !4813

for.inc:                                          ; preds = %for.body
  %144 = load i32, i32* %n, align 4, !dbg !4814
  %inc = add nsw i32 %144, 1, !dbg !4814
  store i32 %inc, i32* %n, align 4, !dbg !4814
  br label %for.cond, !dbg !4816, !llvm.loop !4817

for.end:                                          ; preds = %for.cond
  %145 = load i32, i32* %cur_pitch_val, align 4, !dbg !4819
  %146 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4820
  %last_pitch_val55 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %146, i32 0, i32 26, !dbg !4821
  %147 = load i32, i32* %last_pitch_val55, align 32, !dbg !4821
  %sub56 = sub nsw i32 %145, %147, !dbg !4822
  %shl57 = shl i32 %sub56, 16, !dbg !4823
  %div58 = sdiv i32 %shl57, 160, !dbg !4824
  %148 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4825
  %pitch_diff_sh16 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %148, i32 0, i32 28, !dbg !4826
  store i32 %div58, i32* %pitch_diff_sh16, align 8, !dbg !4827
  br label %if.end59, !dbg !4828

if.end59:                                         ; preds = %for.end, %if.end
  %149 = load i32, i32* %bd_idx, align 4, !dbg !4829
  %idxprom60 = sext i32 %149 to i64, !dbg !4830
  %arrayidx61 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom60, !dbg !4830
  %fcb_type = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %arrayidx61, i32 0, i32 3, !dbg !4831
  %150 = load i8, i8* %fcb_type, align 1, !dbg !4831
  %conv62 = zext i8 %150 to i32, !dbg !4830
  switch i32 %conv62, label %sw.epilog [
    i32 0, label %sw.bb
    i32 2, label %sw.bb66
  ], !dbg !4832

sw.bb:                                            ; preds = %if.end59
  %151 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4833
  %call63 = call i32 @get_bits(%struct.GetBitContext* %151, i32 8), !dbg !4835
  %idxprom64 = zext i32 %call63 to i64, !dbg !4836
  %arrayidx65 = getelementptr inbounds [256 x float], [256 x float]* @wmavoice_gain_silence, i64 0, i64 %idxprom64, !dbg !4836
  %152 = load float, float* %arrayidx65, align 4, !dbg !4836
  %153 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4837
  %silence_gain = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %153, i32 0, i32 29, !dbg !4838
  store float %152, float* %silence_gain, align 4, !dbg !4839
  br label %sw.epilog, !dbg !4840

sw.bb66:                                          ; preds = %if.end59
  %154 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4841
  %155 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4842
  %arraydecay = getelementptr inbounds [8 x i32], [8 x i32]* %pitch, i32 0, i32 0, !dbg !4843
  call void @aw_parse_coords(%struct.WMAVoiceContext* %154, %struct.GetBitContext* %155, i32* %arraydecay), !dbg !4844
  br label %sw.epilog, !dbg !4845

sw.epilog:                                        ; preds = %if.end59, %sw.bb66, %sw.bb
  store i32 0, i32* %n, align 4, !dbg !4846
  br label %for.cond67, !dbg !4847

for.cond67:                                       ; preds = %for.inc168, %sw.epilog
  %156 = load i32, i32* %n, align 4, !dbg !4848
  %157 = load i32, i32* %bd_idx, align 4, !dbg !4850
  %idxprom68 = sext i32 %157 to i64, !dbg !4851
  %arrayidx69 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom68, !dbg !4851
  %n_blocks70 = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %arrayidx69, i32 0, i32 0, !dbg !4852
  %158 = load i8, i8* %n_blocks70, align 1, !dbg !4852
  %conv71 = zext i8 %158 to i32, !dbg !4851
  %cmp72 = icmp slt i32 %156, %conv71, !dbg !4853
  br i1 %cmp72, label %for.body74, label %for.end170, !dbg !4854

for.body74:                                       ; preds = %for.cond67
  call void @llvm.dbg.declare(metadata i32* %bl_pitch_sh2, metadata !4855, metadata !2040), !dbg !4856
  %159 = load i32, i32* %bd_idx, align 4, !dbg !4857
  %idxprom75 = sext i32 %159 to i64, !dbg !4858
  %arrayidx76 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom75, !dbg !4858
  %acb_type77 = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %arrayidx76, i32 0, i32 2, !dbg !4859
  %160 = load i8, i8* %acb_type77, align 1, !dbg !4859
  %conv78 = zext i8 %160 to i32, !dbg !4858
  switch i32 %conv78, label %sw.default [
    i32 2, label %sw.bb79
    i32 1, label %sw.bb155
  ], !dbg !4860

sw.bb79:                                          ; preds = %for.body74
  call void @llvm.dbg.declare(metadata i32* %block_pitch, metadata !4861, metadata !2040), !dbg !4862
  call void @llvm.dbg.declare(metadata i32* %t1, metadata !4863, metadata !2040), !dbg !4864
  %161 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4865
  %block_conv_table = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %161, i32 0, i32 18, !dbg !4866
  %arrayidx80 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table, i64 0, i64 1, !dbg !4865
  %162 = load i16, i16* %arrayidx80, align 2, !dbg !4865
  %conv81 = zext i16 %162 to i32, !dbg !4865
  %163 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4867
  %block_conv_table82 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %163, i32 0, i32 18, !dbg !4868
  %arrayidx83 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table82, i64 0, i64 0, !dbg !4867
  %164 = load i16, i16* %arrayidx83, align 4, !dbg !4867
  %conv84 = zext i16 %164 to i32, !dbg !4867
  %sub85 = sub nsw i32 %conv81, %conv84, !dbg !4869
  %shl86 = shl i32 %sub85, 2, !dbg !4870
  store i32 %shl86, i32* %t1, align 4, !dbg !4864
  call void @llvm.dbg.declare(metadata i32* %t2, metadata !4871, metadata !2040), !dbg !4872
  %165 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4873
  %block_conv_table87 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %165, i32 0, i32 18, !dbg !4874
  %arrayidx88 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table87, i64 0, i64 2, !dbg !4873
  %166 = load i16, i16* %arrayidx88, align 4, !dbg !4873
  %conv89 = zext i16 %166 to i32, !dbg !4873
  %167 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4875
  %block_conv_table90 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %167, i32 0, i32 18, !dbg !4876
  %arrayidx91 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table90, i64 0, i64 1, !dbg !4875
  %168 = load i16, i16* %arrayidx91, align 2, !dbg !4875
  %conv92 = zext i16 %168 to i32, !dbg !4875
  %sub93 = sub nsw i32 %conv89, %conv92, !dbg !4877
  %shl94 = shl i32 %sub93, 1, !dbg !4878
  store i32 %shl94, i32* %t2, align 4, !dbg !4872
  call void @llvm.dbg.declare(metadata i32* %t3, metadata !4879, metadata !2040), !dbg !4880
  %169 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4881
  %block_conv_table95 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %169, i32 0, i32 18, !dbg !4882
  %arrayidx96 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table95, i64 0, i64 3, !dbg !4881
  %170 = load i16, i16* %arrayidx96, align 2, !dbg !4881
  %conv97 = zext i16 %170 to i32, !dbg !4881
  %171 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4883
  %block_conv_table98 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %171, i32 0, i32 18, !dbg !4884
  %arrayidx99 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table98, i64 0, i64 2, !dbg !4883
  %172 = load i16, i16* %arrayidx99, align 4, !dbg !4883
  %conv100 = zext i16 %172 to i32, !dbg !4883
  %sub101 = sub nsw i32 %conv97, %conv100, !dbg !4885
  %add102 = add nsw i32 %sub101, 1, !dbg !4886
  store i32 %add102, i32* %t3, align 4, !dbg !4880
  %173 = load i32, i32* %n, align 4, !dbg !4887
  %cmp103 = icmp eq i32 %173, 0, !dbg !4889
  br i1 %cmp103, label %if.then105, label %if.else, !dbg !4890

if.then105:                                       ; preds = %sw.bb79
  %174 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4891
  %175 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4893
  %block_pitch_nbits = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %175, i32 0, i32 14, !dbg !4894
  %176 = load i32, i32* %block_pitch_nbits, align 4, !dbg !4894
  %call106 = call i32 @get_bits(%struct.GetBitContext* %174, i32 %176), !dbg !4895
  store i32 %call106, i32* %block_pitch, align 4, !dbg !4896
  br label %if.end110, !dbg !4897

if.else:                                          ; preds = %sw.bb79
  %177 = load i32, i32* %last_block_pitch, align 4, !dbg !4898
  %178 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4899
  %block_delta_pitch_hrange = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %178, i32 0, i32 17, !dbg !4900
  %179 = load i32, i32* %block_delta_pitch_hrange, align 8, !dbg !4900
  %sub107 = sub nsw i32 %177, %179, !dbg !4901
  %180 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4902
  %181 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4903
  %block_delta_pitch_nbits = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %181, i32 0, i32 16, !dbg !4904
  %182 = load i32, i32* %block_delta_pitch_nbits, align 4, !dbg !4904
  %call108 = call i32 @get_bits(%struct.GetBitContext* %180, i32 %182), !dbg !4905
  %add109 = add i32 %sub107, %call108, !dbg !4906
  store i32 %add109, i32* %block_pitch, align 4, !dbg !4907
  br label %if.end110

if.end110:                                        ; preds = %if.else, %if.then105
  %183 = load i32, i32* %block_pitch, align 4, !dbg !4908
  %184 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4909
  %block_delta_pitch_hrange111 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %184, i32 0, i32 17, !dbg !4910
  %185 = load i32, i32* %block_delta_pitch_hrange111, align 8, !dbg !4910
  %186 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4911
  %block_pitch_range = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %186, i32 0, i32 15, !dbg !4912
  %187 = load i32, i32* %block_pitch_range, align 16, !dbg !4912
  %188 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4913
  %block_delta_pitch_hrange112 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %188, i32 0, i32 17, !dbg !4914
  %189 = load i32, i32* %block_delta_pitch_hrange112, align 8, !dbg !4914
  %sub113 = sub nsw i32 %187, %189, !dbg !4915
  store i32 %183, i32* %a.addr.i, align 4, !dbg !4916
  store i32 %185, i32* %amin.addr.i, align 4, !dbg !4916
  store i32 %sub113, i32* %amax.addr.i, align 4, !dbg !4916
  %190 = load i32, i32* %a.addr.i, align 4, !dbg !4917
  %191 = load i32, i32* %amin.addr.i, align 4, !dbg !4918
  %cmp.i268 = icmp slt i32 %190, %191, !dbg !4919
  br i1 %cmp.i268, label %if.then.i269, label %if.else.i, !dbg !4920

if.then.i269:                                     ; preds = %if.end110
  %192 = load i32, i32* %amin.addr.i, align 4, !dbg !4921
  store i32 %192, i32* %retval.i, align 4, !dbg !4922
  br label %av_clip_c.exit, !dbg !4922

if.else.i:                                        ; preds = %if.end110
  %193 = load i32, i32* %a.addr.i, align 4, !dbg !4923
  %194 = load i32, i32* %amax.addr.i, align 4, !dbg !4924
  %cmp1.i = icmp sgt i32 %193, %194, !dbg !4925
  br i1 %cmp1.i, label %if.then2.i, label %if.else3.i, !dbg !4926

if.then2.i:                                       ; preds = %if.else.i
  %195 = load i32, i32* %amax.addr.i, align 4, !dbg !4927
  store i32 %195, i32* %retval.i, align 4, !dbg !4928
  br label %av_clip_c.exit, !dbg !4928

if.else3.i:                                       ; preds = %if.else.i
  %196 = load i32, i32* %a.addr.i, align 4, !dbg !4929
  store i32 %196, i32* %retval.i, align 4, !dbg !4930
  br label %av_clip_c.exit, !dbg !4930

av_clip_c.exit:                                   ; preds = %if.then.i269, %if.then2.i, %if.else3.i
  %197 = load i32, i32* %retval.i, align 4, !dbg !4931
  store i32 %197, i32* %last_block_pitch, align 4, !dbg !4932
  %198 = load i32, i32* %block_pitch, align 4, !dbg !4933
  %199 = load i32, i32* %t1, align 4, !dbg !4935
  %cmp115 = icmp slt i32 %198, %199, !dbg !4936
  br i1 %cmp115, label %if.then117, label %if.else123, !dbg !4937

if.then117:                                       ; preds = %av_clip_c.exit
  %200 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4938
  %block_conv_table118 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %200, i32 0, i32 18, !dbg !4940
  %arrayidx119 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table118, i64 0, i64 0, !dbg !4938
  %201 = load i16, i16* %arrayidx119, align 4, !dbg !4938
  %conv120 = zext i16 %201 to i32, !dbg !4938
  %shl121 = shl i32 %conv120, 2, !dbg !4941
  %202 = load i32, i32* %block_pitch, align 4, !dbg !4942
  %add122 = add nsw i32 %shl121, %202, !dbg !4943
  store i32 %add122, i32* %bl_pitch_sh2, align 4, !dbg !4944
  br label %if.end151, !dbg !4945

if.else123:                                       ; preds = %av_clip_c.exit
  %203 = load i32, i32* %t1, align 4, !dbg !4946
  %204 = load i32, i32* %block_pitch, align 4, !dbg !4948
  %sub124 = sub nsw i32 %204, %203, !dbg !4948
  store i32 %sub124, i32* %block_pitch, align 4, !dbg !4948
  %205 = load i32, i32* %block_pitch, align 4, !dbg !4949
  %206 = load i32, i32* %t2, align 4, !dbg !4951
  %cmp125 = icmp slt i32 %205, %206, !dbg !4952
  br i1 %cmp125, label %if.then127, label %if.else134, !dbg !4953

if.then127:                                       ; preds = %if.else123
  %207 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4954
  %block_conv_table128 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %207, i32 0, i32 18, !dbg !4956
  %arrayidx129 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table128, i64 0, i64 1, !dbg !4954
  %208 = load i16, i16* %arrayidx129, align 2, !dbg !4954
  %conv130 = zext i16 %208 to i32, !dbg !4954
  %shl131 = shl i32 %conv130, 2, !dbg !4957
  %209 = load i32, i32* %block_pitch, align 4, !dbg !4958
  %shl132 = shl i32 %209, 1, !dbg !4959
  %add133 = add nsw i32 %shl131, %shl132, !dbg !4960
  store i32 %add133, i32* %bl_pitch_sh2, align 4, !dbg !4961
  br label %if.end150, !dbg !4962

if.else134:                                       ; preds = %if.else123
  %210 = load i32, i32* %t2, align 4, !dbg !4963
  %211 = load i32, i32* %block_pitch, align 4, !dbg !4965
  %sub135 = sub nsw i32 %211, %210, !dbg !4965
  store i32 %sub135, i32* %block_pitch, align 4, !dbg !4965
  %212 = load i32, i32* %block_pitch, align 4, !dbg !4966
  %213 = load i32, i32* %t3, align 4, !dbg !4968
  %cmp136 = icmp slt i32 %212, %213, !dbg !4969
  br i1 %cmp136, label %if.then138, label %if.else144, !dbg !4970

if.then138:                                       ; preds = %if.else134
  %214 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4971
  %block_conv_table139 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %214, i32 0, i32 18, !dbg !4973
  %arrayidx140 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table139, i64 0, i64 2, !dbg !4971
  %215 = load i16, i16* %arrayidx140, align 4, !dbg !4971
  %conv141 = zext i16 %215 to i32, !dbg !4971
  %216 = load i32, i32* %block_pitch, align 4, !dbg !4974
  %add142 = add nsw i32 %conv141, %216, !dbg !4975
  %shl143 = shl i32 %add142, 2, !dbg !4976
  store i32 %shl143, i32* %bl_pitch_sh2, align 4, !dbg !4977
  br label %if.end149, !dbg !4978

if.else144:                                       ; preds = %if.else134
  %217 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4979
  %block_conv_table145 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %217, i32 0, i32 18, !dbg !4980
  %arrayidx146 = getelementptr inbounds [4 x i16], [4 x i16]* %block_conv_table145, i64 0, i64 3, !dbg !4979
  %218 = load i16, i16* %arrayidx146, align 2, !dbg !4979
  %conv147 = zext i16 %218 to i32, !dbg !4979
  %shl148 = shl i32 %conv147, 2, !dbg !4981
  store i32 %shl148, i32* %bl_pitch_sh2, align 4, !dbg !4982
  br label %if.end149

if.end149:                                        ; preds = %if.else144, %if.then138
  br label %if.end150

if.end150:                                        ; preds = %if.end149, %if.then127
  br label %if.end151

if.end151:                                        ; preds = %if.end150, %if.then117
  %219 = load i32, i32* %bl_pitch_sh2, align 4, !dbg !4983
  %shr152 = ashr i32 %219, 2, !dbg !4984
  %220 = load i32, i32* %n, align 4, !dbg !4985
  %idxprom153 = sext i32 %220 to i64, !dbg !4986
  %arrayidx154 = getelementptr inbounds [8 x i32], [8 x i32]* %pitch, i64 0, i64 %idxprom153, !dbg !4986
  store i32 %shr152, i32* %arrayidx154, align 4, !dbg !4987
  br label %sw.epilog159, !dbg !4988

sw.bb155:                                         ; preds = %for.body74
  %221 = load i32, i32* %n, align 4, !dbg !4989
  %idxprom156 = sext i32 %221 to i64, !dbg !4991
  %arrayidx157 = getelementptr inbounds [8 x i32], [8 x i32]* %pitch, i64 0, i64 %idxprom156, !dbg !4991
  %222 = load i32, i32* %arrayidx157, align 4, !dbg !4991
  %shl158 = shl i32 %222, 2, !dbg !4992
  store i32 %shl158, i32* %bl_pitch_sh2, align 4, !dbg !4993
  br label %sw.epilog159, !dbg !4994

sw.default:                                       ; preds = %for.body74
  store i32 0, i32* %bl_pitch_sh2, align 4, !dbg !4995
  br label %sw.epilog159, !dbg !4996

sw.epilog159:                                     ; preds = %sw.default, %sw.bb155, %if.end151
  %223 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !4997
  %224 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !4998
  %225 = load i32, i32* %n, align 4, !dbg !4999
  %226 = load i32, i32* %block_nsamples, align 4, !dbg !5000
  %227 = load i32, i32* %bl_pitch_sh2, align 4, !dbg !5001
  %228 = load double*, double** %lsps.addr, align 8, !dbg !5002
  %229 = load double*, double** %prev_lsps.addr, align 8, !dbg !5003
  %230 = load i32, i32* %bd_idx, align 4, !dbg !5004
  %idxprom160 = sext i32 %230 to i64, !dbg !5005
  %arrayidx161 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom160, !dbg !5005
  %231 = load i32, i32* %n, align 4, !dbg !5006
  %232 = load i32, i32* %block_nsamples, align 4, !dbg !5007
  %mul162 = mul nsw i32 %231, %232, !dbg !5008
  %idxprom163 = sext i32 %mul162 to i64, !dbg !5009
  %233 = load float*, float** %excitation.addr, align 8, !dbg !5009
  %arrayidx164 = getelementptr inbounds float, float* %233, i64 %idxprom163, !dbg !5009
  %234 = load i32, i32* %n, align 4, !dbg !5010
  %235 = load i32, i32* %block_nsamples, align 4, !dbg !5011
  %mul165 = mul nsw i32 %234, %235, !dbg !5012
  %idxprom166 = sext i32 %mul165 to i64, !dbg !5013
  %236 = load float*, float** %synth.addr, align 8, !dbg !5013
  %arrayidx167 = getelementptr inbounds float, float* %236, i64 %idxprom166, !dbg !5013
  call void @synth_block(%struct.WMAVoiceContext* %223, %struct.GetBitContext* %224, i32 %225, i32 %226, i32 %227, double* %228, double* %229, %struct.frame_type_desc* %arrayidx161, float* %arrayidx164, float* %arrayidx167), !dbg !5014
  br label %for.inc168, !dbg !5015

for.inc168:                                       ; preds = %sw.epilog159
  %237 = load i32, i32* %n, align 4, !dbg !5016
  %inc169 = add nsw i32 %237, 1, !dbg !5016
  store i32 %inc169, i32* %n, align 4, !dbg !5016
  br label %for.cond67, !dbg !5018, !llvm.loop !5019

for.end170:                                       ; preds = %for.cond67
  %238 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5021
  %do_apf = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %238, i32 0, i32 4, !dbg !5023
  %239 = load i32, i32* %do_apf, align 4, !dbg !5023
  %tobool = icmp ne i32 %239, 0, !dbg !5021
  br i1 %tobool, label %if.then171, label %if.else235, !dbg !5024

if.then171:                                       ; preds = %for.end170
  call void @llvm.dbg.declare(metadata [16 x double]* %i_lsps, metadata !5025, metadata !2040), !dbg !5027
  call void @llvm.dbg.declare(metadata [16 x float]* %lpcs, metadata !5028, metadata !2040), !dbg !5029
  store i32 0, i32* %n, align 4, !dbg !5030
  br label %for.cond172, !dbg !5032

for.cond172:                                      ; preds = %for.inc186, %if.then171
  %240 = load i32, i32* %n, align 4, !dbg !5033
  %241 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5036
  %lsps173 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %241, i32 0, i32 8, !dbg !5037
  %242 = load i32, i32* %lsps173, align 4, !dbg !5037
  %cmp174 = icmp slt i32 %240, %242, !dbg !5038
  br i1 %cmp174, label %for.body176, label %for.end188, !dbg !5039

for.body176:                                      ; preds = %for.cond172
  %243 = load i32, i32* %n, align 4, !dbg !5040
  %idxprom177 = sext i32 %243 to i64, !dbg !5041
  %244 = load double*, double** %prev_lsps.addr, align 8, !dbg !5041
  %arrayidx178 = getelementptr inbounds double, double* %244, i64 %idxprom177, !dbg !5041
  %245 = load double, double* %arrayidx178, align 8, !dbg !5041
  %246 = load i32, i32* %n, align 4, !dbg !5042
  %idxprom179 = sext i32 %246 to i64, !dbg !5043
  %247 = load double*, double** %lsps.addr, align 8, !dbg !5043
  %arrayidx180 = getelementptr inbounds double, double* %247, i64 %idxprom179, !dbg !5043
  %248 = load double, double* %arrayidx180, align 8, !dbg !5043
  %add181 = fadd double %245, %248, !dbg !5044
  %mul182 = fmul double 5.000000e-01, %add181, !dbg !5045
  %call183 = call double @cos(double %mul182) #9, !dbg !5046
  %249 = load i32, i32* %n, align 4, !dbg !5047
  %idxprom184 = sext i32 %249 to i64, !dbg !5048
  %arrayidx185 = getelementptr inbounds [16 x double], [16 x double]* %i_lsps, i64 0, i64 %idxprom184, !dbg !5048
  store double %call183, double* %arrayidx185, align 8, !dbg !5049
  br label %for.inc186, !dbg !5048

for.inc186:                                       ; preds = %for.body176
  %250 = load i32, i32* %n, align 4, !dbg !5050
  %inc187 = add nsw i32 %250, 1, !dbg !5050
  store i32 %inc187, i32* %n, align 4, !dbg !5050
  br label %for.cond172, !dbg !5052, !llvm.loop !5053

for.end188:                                       ; preds = %for.cond172
  %arraydecay189 = getelementptr inbounds [16 x double], [16 x double]* %i_lsps, i32 0, i32 0, !dbg !5055
  %arraydecay190 = getelementptr inbounds [16 x float], [16 x float]* %lpcs, i32 0, i32 0, !dbg !5056
  %251 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5057
  %lsps191 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %251, i32 0, i32 8, !dbg !5058
  %252 = load i32, i32* %lsps191, align 4, !dbg !5058
  %shr192 = ashr i32 %252, 1, !dbg !5059
  call void @ff_acelp_lspd2lpc(double* %arraydecay189, float* %arraydecay190, i32 %shr192), !dbg !5060
  %253 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5061
  %254 = load float*, float** %synth.addr, align 8, !dbg !5062
  %255 = load float*, float** %samples.addr, align 8, !dbg !5063
  %arraydecay193 = getelementptr inbounds [16 x float], [16 x float]* %lpcs, i32 0, i32 0, !dbg !5064
  %256 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5065
  %history_nsamples = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %256, i32 0, i32 3, !dbg !5066
  %257 = load i32, i32* %history_nsamples, align 32, !dbg !5066
  %258 = load i32, i32* %frame_idx.addr, align 4, !dbg !5067
  %mul194 = mul nsw i32 160, %258, !dbg !5068
  %add195 = add nsw i32 %257, %mul194, !dbg !5069
  %idxprom196 = sext i32 %add195 to i64, !dbg !5070
  %259 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5070
  %zero_exc_pf = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %259, i32 0, i32 48, !dbg !5071
  %arrayidx197 = getelementptr inbounds [896 x float], [896 x float]* %zero_exc_pf, i64 0, i64 %idxprom196, !dbg !5070
  %260 = load i32, i32* %bd_idx, align 4, !dbg !5072
  %idxprom198 = sext i32 %260 to i64, !dbg !5073
  %arrayidx199 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom198, !dbg !5073
  %fcb_type200 = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %arrayidx199, i32 0, i32 3, !dbg !5074
  %261 = load i8, i8* %fcb_type200, align 1, !dbg !5074
  %conv201 = zext i8 %261 to i32, !dbg !5073
  %arrayidx202 = getelementptr inbounds [8 x i32], [8 x i32]* %pitch, i64 0, i64 0, !dbg !5075
  %262 = load i32, i32* %arrayidx202, align 16, !dbg !5075
  call void @postfilter(%struct.WMAVoiceContext* %253, float* %254, float* %255, i32 80, float* %arraydecay193, float* %arrayidx197, i32 %conv201, i32 %262), !dbg !5076
  store i32 0, i32* %n, align 4, !dbg !5077
  br label %for.cond203, !dbg !5079

for.cond203:                                      ; preds = %for.inc213, %for.end188
  %263 = load i32, i32* %n, align 4, !dbg !5080
  %264 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5083
  %lsps204 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %264, i32 0, i32 8, !dbg !5084
  %265 = load i32, i32* %lsps204, align 4, !dbg !5084
  %cmp205 = icmp slt i32 %263, %265, !dbg !5085
  br i1 %cmp205, label %for.body207, label %for.end215, !dbg !5086

for.body207:                                      ; preds = %for.cond203
  %266 = load i32, i32* %n, align 4, !dbg !5087
  %idxprom208 = sext i32 %266 to i64, !dbg !5088
  %267 = load double*, double** %lsps.addr, align 8, !dbg !5088
  %arrayidx209 = getelementptr inbounds double, double* %267, i64 %idxprom208, !dbg !5088
  %268 = load double, double* %arrayidx209, align 8, !dbg !5088
  %call210 = call double @cos(double %268) #9, !dbg !5089
  %269 = load i32, i32* %n, align 4, !dbg !5090
  %idxprom211 = sext i32 %269 to i64, !dbg !5091
  %arrayidx212 = getelementptr inbounds [16 x double], [16 x double]* %i_lsps, i64 0, i64 %idxprom211, !dbg !5091
  store double %call210, double* %arrayidx212, align 8, !dbg !5092
  br label %for.inc213, !dbg !5091

for.inc213:                                       ; preds = %for.body207
  %270 = load i32, i32* %n, align 4, !dbg !5093
  %inc214 = add nsw i32 %270, 1, !dbg !5093
  store i32 %inc214, i32* %n, align 4, !dbg !5093
  br label %for.cond203, !dbg !5095, !llvm.loop !5096

for.end215:                                       ; preds = %for.cond203
  %arraydecay216 = getelementptr inbounds [16 x double], [16 x double]* %i_lsps, i32 0, i32 0, !dbg !5098
  %arraydecay217 = getelementptr inbounds [16 x float], [16 x float]* %lpcs, i32 0, i32 0, !dbg !5099
  %271 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5100
  %lsps218 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %271, i32 0, i32 8, !dbg !5101
  %272 = load i32, i32* %lsps218, align 4, !dbg !5101
  %shr219 = ashr i32 %272, 1, !dbg !5102
  call void @ff_acelp_lspd2lpc(double* %arraydecay216, float* %arraydecay217, i32 %shr219), !dbg !5103
  %273 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5104
  %274 = load float*, float** %synth.addr, align 8, !dbg !5105
  %arrayidx220 = getelementptr inbounds float, float* %274, i64 80, !dbg !5105
  %275 = load float*, float** %samples.addr, align 8, !dbg !5106
  %arrayidx221 = getelementptr inbounds float, float* %275, i64 80, !dbg !5106
  %arraydecay222 = getelementptr inbounds [16 x float], [16 x float]* %lpcs, i32 0, i32 0, !dbg !5107
  %276 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5108
  %history_nsamples223 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %276, i32 0, i32 3, !dbg !5109
  %277 = load i32, i32* %history_nsamples223, align 32, !dbg !5109
  %278 = load i32, i32* %frame_idx.addr, align 4, !dbg !5110
  %mul224 = mul nsw i32 160, %278, !dbg !5111
  %add225 = add nsw i32 %277, %mul224, !dbg !5112
  %add226 = add nsw i32 %add225, 80, !dbg !5113
  %idxprom227 = sext i32 %add226 to i64, !dbg !5114
  %279 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5114
  %zero_exc_pf228 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %279, i32 0, i32 48, !dbg !5115
  %arrayidx229 = getelementptr inbounds [896 x float], [896 x float]* %zero_exc_pf228, i64 0, i64 %idxprom227, !dbg !5114
  %280 = load i32, i32* %bd_idx, align 4, !dbg !5116
  %idxprom230 = sext i32 %280 to i64, !dbg !5117
  %arrayidx231 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom230, !dbg !5117
  %fcb_type232 = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %arrayidx231, i32 0, i32 3, !dbg !5118
  %281 = load i8, i8* %fcb_type232, align 1, !dbg !5118
  %conv233 = zext i8 %281 to i32, !dbg !5117
  %arrayidx234 = getelementptr inbounds [8 x i32], [8 x i32]* %pitch, i64 0, i64 0, !dbg !5119
  %282 = load i32, i32* %arrayidx234, align 16, !dbg !5119
  call void @postfilter(%struct.WMAVoiceContext* %273, float* %arrayidx220, float* %arrayidx221, i32 80, float* %arraydecay222, float* %arrayidx229, i32 %conv233, i32 %282), !dbg !5120
  br label %if.end236, !dbg !5121

if.else235:                                       ; preds = %for.end170
  %283 = load float*, float** %samples.addr, align 8, !dbg !5122
  %284 = bitcast float* %283 to i8*, !dbg !5123
  %285 = load float*, float** %synth.addr, align 8, !dbg !5124
  %286 = bitcast float* %285 to i8*, !dbg !5123
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %284, i8* %286, i64 640, i32 4, i1 false), !dbg !5123
  br label %if.end236

if.end236:                                        ; preds = %if.else235, %for.end215
  %287 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5125
  %frame_cntr = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %287, i32 0, i32 35, !dbg !5126
  %288 = load i32, i32* %frame_cntr, align 4, !dbg !5127
  %inc237 = add nsw i32 %288, 1, !dbg !5127
  store i32 %inc237, i32* %frame_cntr, align 4, !dbg !5127
  %289 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5128
  %frame_cntr238 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %289, i32 0, i32 35, !dbg !5130
  %290 = load i32, i32* %frame_cntr238, align 4, !dbg !5130
  %cmp239 = icmp sge i32 %290, 65535, !dbg !5131
  br i1 %cmp239, label %if.then241, label %if.end244, !dbg !5132

if.then241:                                       ; preds = %if.end236
  %291 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5133
  %frame_cntr242 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %291, i32 0, i32 35, !dbg !5135
  %292 = load i32, i32* %frame_cntr242, align 4, !dbg !5136
  %sub243 = sub nsw i32 %292, 65535, !dbg !5136
  store i32 %sub243, i32* %frame_cntr242, align 4, !dbg !5136
  br label %if.end244, !dbg !5133

if.end244:                                        ; preds = %if.then241, %if.end236
  %293 = load i32, i32* %bd_idx, align 4, !dbg !5137
  %idxprom245 = sext i32 %293 to i64, !dbg !5138
  %arrayidx246 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom245, !dbg !5138
  %acb_type247 = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %arrayidx246, i32 0, i32 2, !dbg !5139
  %294 = load i8, i8* %acb_type247, align 1, !dbg !5139
  %conv248 = zext i8 %294 to i32, !dbg !5138
  %295 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5140
  %last_acb_type249 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %295, i32 0, i32 27, !dbg !5141
  store i32 %conv248, i32* %last_acb_type249, align 4, !dbg !5142
  %296 = load i32, i32* %bd_idx, align 4, !dbg !5143
  %idxprom250 = sext i32 %296 to i64, !dbg !5144
  %arrayidx251 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom250, !dbg !5144
  %acb_type252 = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %arrayidx251, i32 0, i32 2, !dbg !5145
  %297 = load i8, i8* %acb_type252, align 1, !dbg !5145
  %conv253 = zext i8 %297 to i32, !dbg !5144
  switch i32 %conv253, label %sw.epilog267 [
    i32 0, label %sw.bb254
    i32 1, label %sw.bb256
    i32 2, label %sw.bb258
  ], !dbg !5146

sw.bb254:                                         ; preds = %if.end244
  %298 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5147
  %last_pitch_val255 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %298, i32 0, i32 26, !dbg !5149
  store i32 0, i32* %last_pitch_val255, align 32, !dbg !5150
  br label %sw.epilog267, !dbg !5151

sw.bb256:                                         ; preds = %if.end244
  %299 = load i32, i32* %cur_pitch_val, align 4, !dbg !5152
  %300 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5153
  %last_pitch_val257 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %300, i32 0, i32 26, !dbg !5154
  store i32 %299, i32* %last_pitch_val257, align 32, !dbg !5155
  br label %sw.epilog267, !dbg !5156

sw.bb258:                                         ; preds = %if.end244
  %301 = load i32, i32* %bd_idx, align 4, !dbg !5157
  %idxprom259 = sext i32 %301 to i64, !dbg !5158
  %arrayidx260 = getelementptr inbounds [17 x %struct.frame_type_desc], [17 x %struct.frame_type_desc]* @frame_descs, i64 0, i64 %idxprom259, !dbg !5158
  %n_blocks261 = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %arrayidx260, i32 0, i32 0, !dbg !5159
  %302 = load i8, i8* %n_blocks261, align 1, !dbg !5159
  %conv262 = zext i8 %302 to i32, !dbg !5158
  %sub263 = sub nsw i32 %conv262, 1, !dbg !5160
  %idxprom264 = sext i32 %sub263 to i64, !dbg !5161
  %arrayidx265 = getelementptr inbounds [8 x i32], [8 x i32]* %pitch, i64 0, i64 %idxprom264, !dbg !5161
  %303 = load i32, i32* %arrayidx265, align 4, !dbg !5161
  %304 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s, align 8, !dbg !5162
  %last_pitch_val266 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %304, i32 0, i32 26, !dbg !5163
  store i32 %303, i32* %last_pitch_val266, align 32, !dbg !5164
  br label %sw.epilog267, !dbg !5165

sw.epilog267:                                     ; preds = %if.end244, %sw.bb258, %sw.bb256, %sw.bb254
  store i32 0, i32* %retval, align 4, !dbg !5166
  br label %return, !dbg !5166

return:                                           ; preds = %sw.epilog267, %if.then
  %305 = load i32, i32* %retval, align 4, !dbg !5167
  ret i32 %305, !dbg !5167
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: nounwind uwtable
define internal void @dequant_lsps(double* %lsps, i32 %num, i16* %values, i16* %sizes, i32 %n_stages, i8* %table, double* %mul_q, double* %base_q) #1 !dbg !5168 {
entry:
  %lsps.addr = alloca double*, align 8
  %num.addr = alloca i32, align 4
  %values.addr = alloca i16*, align 8
  %sizes.addr = alloca i16*, align 8
  %n_stages.addr = alloca i32, align 4
  %table.addr = alloca i8*, align 8
  %mul_q.addr = alloca double*, align 8
  %base_q.addr = alloca double*, align 8
  %n = alloca i32, align 4
  %m = alloca i32, align 4
  %t_off = alloca i8*, align 8
  %base = alloca double, align 8
  %mul8 = alloca double, align 8
  store double* %lsps, double** %lsps.addr, align 8
  call void @llvm.dbg.declare(metadata double** %lsps.addr, metadata !5172, metadata !2040), !dbg !5173
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !5174, metadata !2040), !dbg !5175
  store i16* %values, i16** %values.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %values.addr, metadata !5176, metadata !2040), !dbg !5177
  store i16* %sizes, i16** %sizes.addr, align 8
  call void @llvm.dbg.declare(metadata i16** %sizes.addr, metadata !5178, metadata !2040), !dbg !5179
  store i32 %n_stages, i32* %n_stages.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_stages.addr, metadata !5180, metadata !2040), !dbg !5181
  store i8* %table, i8** %table.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %table.addr, metadata !5182, metadata !2040), !dbg !5183
  store double* %mul_q, double** %mul_q.addr, align 8
  call void @llvm.dbg.declare(metadata double** %mul_q.addr, metadata !5184, metadata !2040), !dbg !5185
  store double* %base_q, double** %base_q.addr, align 8
  call void @llvm.dbg.declare(metadata double** %base_q.addr, metadata !5186, metadata !2040), !dbg !5187
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5188, metadata !2040), !dbg !5189
  call void @llvm.dbg.declare(metadata i32* %m, metadata !5190, metadata !2040), !dbg !5191
  %0 = load double*, double** %lsps.addr, align 8, !dbg !5192
  %1 = bitcast double* %0 to i8*, !dbg !5193
  %2 = load i32, i32* %num.addr, align 4, !dbg !5194
  %conv = sext i32 %2 to i64, !dbg !5194
  %mul = mul i64 %conv, 8, !dbg !5195
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 %mul, i32 8, i1 false), !dbg !5193
  store i32 0, i32* %n, align 4, !dbg !5196
  br label %for.cond, !dbg !5198

for.cond:                                         ; preds = %for.inc27, %entry
  %3 = load i32, i32* %n, align 4, !dbg !5199
  %4 = load i32, i32* %n_stages.addr, align 4, !dbg !5202
  %cmp = icmp slt i32 %3, %4, !dbg !5203
  br i1 %cmp, label %for.body, label %for.end29, !dbg !5204

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8** %t_off, metadata !5205, metadata !2040), !dbg !5207
  %5 = load i32, i32* %n, align 4, !dbg !5208
  %idxprom = sext i32 %5 to i64, !dbg !5209
  %6 = load i16*, i16** %values.addr, align 8, !dbg !5209
  %arrayidx = getelementptr inbounds i16, i16* %6, i64 %idxprom, !dbg !5209
  %7 = load i16, i16* %arrayidx, align 2, !dbg !5209
  %conv2 = zext i16 %7 to i32, !dbg !5209
  %8 = load i32, i32* %num.addr, align 4, !dbg !5210
  %mul3 = mul nsw i32 %conv2, %8, !dbg !5211
  %idxprom4 = sext i32 %mul3 to i64, !dbg !5212
  %9 = load i8*, i8** %table.addr, align 8, !dbg !5212
  %arrayidx5 = getelementptr inbounds i8, i8* %9, i64 %idxprom4, !dbg !5212
  store i8* %arrayidx5, i8** %t_off, align 8, !dbg !5207
  call void @llvm.dbg.declare(metadata double* %base, metadata !5213, metadata !2040), !dbg !5214
  %10 = load i32, i32* %n, align 4, !dbg !5215
  %idxprom6 = sext i32 %10 to i64, !dbg !5216
  %11 = load double*, double** %base_q.addr, align 8, !dbg !5216
  %arrayidx7 = getelementptr inbounds double, double* %11, i64 %idxprom6, !dbg !5216
  %12 = load double, double* %arrayidx7, align 8, !dbg !5216
  store double %12, double* %base, align 8, !dbg !5214
  call void @llvm.dbg.declare(metadata double* %mul8, metadata !5217, metadata !2040), !dbg !5218
  %13 = load i32, i32* %n, align 4, !dbg !5219
  %idxprom9 = sext i32 %13 to i64, !dbg !5220
  %14 = load double*, double** %mul_q.addr, align 8, !dbg !5220
  %arrayidx10 = getelementptr inbounds double, double* %14, i64 %idxprom9, !dbg !5220
  %15 = load double, double* %arrayidx10, align 8, !dbg !5220
  store double %15, double* %mul8, align 8, !dbg !5218
  store i32 0, i32* %m, align 4, !dbg !5221
  br label %for.cond11, !dbg !5223

for.cond11:                                       ; preds = %for.inc, %for.body
  %16 = load i32, i32* %m, align 4, !dbg !5224
  %17 = load i32, i32* %num.addr, align 4, !dbg !5227
  %cmp12 = icmp slt i32 %16, %17, !dbg !5228
  br i1 %cmp12, label %for.body14, label %for.end, !dbg !5229

for.body14:                                       ; preds = %for.cond11
  %18 = load double, double* %base, align 8, !dbg !5230
  %19 = load double, double* %mul8, align 8, !dbg !5231
  %20 = load i32, i32* %m, align 4, !dbg !5232
  %idxprom15 = sext i32 %20 to i64, !dbg !5233
  %21 = load i8*, i8** %t_off, align 8, !dbg !5233
  %arrayidx16 = getelementptr inbounds i8, i8* %21, i64 %idxprom15, !dbg !5233
  %22 = load i8, i8* %arrayidx16, align 1, !dbg !5233
  %conv17 = zext i8 %22 to i32, !dbg !5233
  %conv18 = sitofp i32 %conv17 to double, !dbg !5233
  %mul19 = fmul double %19, %conv18, !dbg !5234
  %add = fadd double %18, %mul19, !dbg !5235
  %23 = load i32, i32* %m, align 4, !dbg !5236
  %idxprom20 = sext i32 %23 to i64, !dbg !5237
  %24 = load double*, double** %lsps.addr, align 8, !dbg !5237
  %arrayidx21 = getelementptr inbounds double, double* %24, i64 %idxprom20, !dbg !5237
  %25 = load double, double* %arrayidx21, align 8, !dbg !5238
  %add22 = fadd double %25, %add, !dbg !5238
  store double %add22, double* %arrayidx21, align 8, !dbg !5238
  br label %for.inc, !dbg !5237

for.inc:                                          ; preds = %for.body14
  %26 = load i32, i32* %m, align 4, !dbg !5239
  %inc = add nsw i32 %26, 1, !dbg !5239
  store i32 %inc, i32* %m, align 4, !dbg !5239
  br label %for.cond11, !dbg !5241, !llvm.loop !5242

for.end:                                          ; preds = %for.cond11
  %27 = load i32, i32* %n, align 4, !dbg !5244
  %idxprom23 = sext i32 %27 to i64, !dbg !5245
  %28 = load i16*, i16** %sizes.addr, align 8, !dbg !5245
  %arrayidx24 = getelementptr inbounds i16, i16* %28, i64 %idxprom23, !dbg !5245
  %29 = load i16, i16* %arrayidx24, align 2, !dbg !5245
  %conv25 = zext i16 %29 to i32, !dbg !5245
  %30 = load i32, i32* %num.addr, align 4, !dbg !5246
  %mul26 = mul nsw i32 %conv25, %30, !dbg !5247
  %31 = load i8*, i8** %table.addr, align 8, !dbg !5248
  %idx.ext = sext i32 %mul26 to i64, !dbg !5248
  %add.ptr = getelementptr inbounds i8, i8* %31, i64 %idx.ext, !dbg !5248
  store i8* %add.ptr, i8** %table.addr, align 8, !dbg !5248
  br label %for.inc27, !dbg !5249

for.inc27:                                        ; preds = %for.end
  %32 = load i32, i32* %n, align 4, !dbg !5250
  %inc28 = add nsw i32 %32, 1, !dbg !5250
  store i32 %inc28, i32* %n, align 4, !dbg !5250
  br label %for.cond, !dbg !5252, !llvm.loop !5253

for.end29:                                        ; preds = %for.cond
  ret void, !dbg !5255
}

; Function Attrs: nounwind readnone
declare i32 @abs(i32) #7

; Function Attrs: nounwind uwtable
define internal void @aw_parse_coords(%struct.WMAVoiceContext* %s, %struct.GetBitContext* %gb, i32* %pitch) #1 !dbg !1809 {
entry:
  %s.addr = alloca %struct.WMAVoiceContext*, align 8
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %pitch.addr = alloca i32*, align 8
  %bits = alloca i32, align 4
  %offset = alloca i32, align 4
  store %struct.WMAVoiceContext* %s, %struct.WMAVoiceContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s.addr, metadata !5256, metadata !2040), !dbg !5257
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !5258, metadata !2040), !dbg !5259
  store i32* %pitch, i32** %pitch.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %pitch.addr, metadata !5260, metadata !2040), !dbg !5261
  call void @llvm.dbg.declare(metadata i32* %bits, metadata !5262, metadata !2040), !dbg !5263
  call void @llvm.dbg.declare(metadata i32* %offset, metadata !5264, metadata !2040), !dbg !5265
  %0 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5266
  %aw_idx_is_ext = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %0, i32 0, i32 30, !dbg !5267
  store i32 0, i32* %aw_idx_is_ext, align 16, !dbg !5268
  %1 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !5269
  %call = call i32 @get_bits(%struct.GetBitContext* %1, i32 6), !dbg !5271
  store i32 %call, i32* %bits, align 4, !dbg !5272
  %cmp = icmp sge i32 %call, 54, !dbg !5273
  br i1 %cmp, label %if.then, label %if.end, !dbg !5274

if.then:                                          ; preds = %entry
  %2 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5275
  %aw_idx_is_ext1 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %2, i32 0, i32 30, !dbg !5277
  store i32 1, i32* %aw_idx_is_ext1, align 16, !dbg !5278
  %3 = load i32, i32* %bits, align 4, !dbg !5279
  %sub = sub nsw i32 %3, 54, !dbg !5280
  %mul = mul nsw i32 %sub, 3, !dbg !5281
  %4 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !5282
  %call2 = call i32 @get_bits(%struct.GetBitContext* %4, i32 2), !dbg !5283
  %add = add i32 %mul, %call2, !dbg !5284
  %5 = load i32, i32* %bits, align 4, !dbg !5285
  %add3 = add i32 %5, %add, !dbg !5285
  store i32 %add3, i32* %bits, align 4, !dbg !5285
  br label %if.end, !dbg !5286

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32*, i32** %pitch.addr, align 8, !dbg !5287
  %arrayidx = getelementptr inbounds i32, i32* %6, i64 0, !dbg !5287
  %7 = load i32, i32* %arrayidx, align 4, !dbg !5287
  %8 = load i32*, i32** %pitch.addr, align 8, !dbg !5288
  %arrayidx4 = getelementptr inbounds i32, i32* %8, i64 1, !dbg !5288
  %9 = load i32, i32* %arrayidx4, align 4, !dbg !5288
  %cmp5 = icmp sgt i32 %7, %9, !dbg !5289
  br i1 %cmp5, label %cond.true, label %cond.false, !dbg !5290

cond.true:                                        ; preds = %if.end
  %10 = load i32*, i32** %pitch.addr, align 8, !dbg !5291
  %arrayidx6 = getelementptr inbounds i32, i32* %10, i64 1, !dbg !5291
  %11 = load i32, i32* %arrayidx6, align 4, !dbg !5291
  br label %cond.end, !dbg !5293

cond.false:                                       ; preds = %if.end
  %12 = load i32*, i32** %pitch.addr, align 8, !dbg !5294
  %arrayidx7 = getelementptr inbounds i32, i32* %12, i64 0, !dbg !5294
  %13 = load i32, i32* %arrayidx7, align 4, !dbg !5294
  br label %cond.end, !dbg !5296

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %11, %cond.true ], [ %13, %cond.false ], !dbg !5297
  %cmp8 = icmp sgt i32 %cond, 32, !dbg !5299
  %cond9 = select i1 %cmp8, i32 24, i32 16, !dbg !5300
  %14 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5301
  %aw_pulse_range = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %14, i32 0, i32 31, !dbg !5302
  store i32 %cond9, i32* %aw_pulse_range, align 4, !dbg !5303
  %15 = load i32, i32* %bits, align 4, !dbg !5304
  %idxprom = sext i32 %15 to i64, !dbg !5306
  %arrayidx10 = getelementptr inbounds [94 x i16], [94 x i16]* @aw_parse_coords.start_offset, i64 0, i64 %idxprom, !dbg !5306
  %16 = load i16, i16* %arrayidx10, align 2, !dbg !5306
  %conv = sext i16 %16 to i32, !dbg !5306
  store i32 %conv, i32* %offset, align 4, !dbg !5307
  br label %for.cond, !dbg !5308

for.cond:                                         ; preds = %for.inc, %cond.end
  %17 = load i32, i32* %offset, align 4, !dbg !5309
  %cmp11 = icmp slt i32 %17, 0, !dbg !5312
  br i1 %cmp11, label %for.body, label %for.end, !dbg !5313

for.body:                                         ; preds = %for.cond
  br label %for.inc, !dbg !5314

for.inc:                                          ; preds = %for.body
  %18 = load i32*, i32** %pitch.addr, align 8, !dbg !5316
  %arrayidx13 = getelementptr inbounds i32, i32* %18, i64 0, !dbg !5316
  %19 = load i32, i32* %arrayidx13, align 4, !dbg !5316
  %20 = load i32, i32* %offset, align 4, !dbg !5318
  %add14 = add nsw i32 %20, %19, !dbg !5318
  store i32 %add14, i32* %offset, align 4, !dbg !5318
  br label %for.cond, !dbg !5319, !llvm.loop !5320

for.end:                                          ; preds = %for.cond
  %21 = load i32*, i32** %pitch.addr, align 8, !dbg !5322
  %arrayidx15 = getelementptr inbounds i32, i32* %21, i64 0, !dbg !5322
  %22 = load i32, i32* %arrayidx15, align 4, !dbg !5322
  %sub16 = sub nsw i32 %22, 1, !dbg !5323
  %add17 = add nsw i32 %sub16, 80, !dbg !5324
  %23 = load i32, i32* %offset, align 4, !dbg !5325
  %sub18 = sub nsw i32 %add17, %23, !dbg !5326
  %24 = load i32*, i32** %pitch.addr, align 8, !dbg !5327
  %arrayidx19 = getelementptr inbounds i32, i32* %24, i64 0, !dbg !5327
  %25 = load i32, i32* %arrayidx19, align 4, !dbg !5327
  %div = sdiv i32 %sub18, %25, !dbg !5328
  %26 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5329
  %aw_n_pulses = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %26, i32 0, i32 32, !dbg !5330
  %arrayidx20 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_n_pulses, i64 0, i64 0, !dbg !5329
  store i32 %div, i32* %arrayidx20, align 8, !dbg !5331
  %27 = load i32, i32* %offset, align 4, !dbg !5332
  %28 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5333
  %aw_pulse_range21 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %28, i32 0, i32 31, !dbg !5334
  %29 = load i32, i32* %aw_pulse_range21, align 4, !dbg !5334
  %div22 = sdiv i32 %29, 2, !dbg !5335
  %sub23 = sub nsw i32 %27, %div22, !dbg !5336
  %30 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5337
  %aw_first_pulse_off = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %30, i32 0, i32 33, !dbg !5338
  %arrayidx24 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_first_pulse_off, i64 0, i64 0, !dbg !5337
  store i32 %sub23, i32* %arrayidx24, align 32, !dbg !5339
  %31 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5340
  %aw_n_pulses25 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %31, i32 0, i32 32, !dbg !5341
  %arrayidx26 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_n_pulses25, i64 0, i64 0, !dbg !5340
  %32 = load i32, i32* %arrayidx26, align 8, !dbg !5340
  %33 = load i32*, i32** %pitch.addr, align 8, !dbg !5342
  %arrayidx27 = getelementptr inbounds i32, i32* %33, i64 0, !dbg !5342
  %34 = load i32, i32* %arrayidx27, align 4, !dbg !5342
  %mul28 = mul nsw i32 %32, %34, !dbg !5343
  %35 = load i32, i32* %offset, align 4, !dbg !5344
  %add29 = add nsw i32 %35, %mul28, !dbg !5344
  store i32 %add29, i32* %offset, align 4, !dbg !5344
  %36 = load i32*, i32** %pitch.addr, align 8, !dbg !5345
  %arrayidx30 = getelementptr inbounds i32, i32* %36, i64 1, !dbg !5345
  %37 = load i32, i32* %arrayidx30, align 4, !dbg !5345
  %sub31 = sub nsw i32 %37, 1, !dbg !5346
  %add32 = add nsw i32 %sub31, 160, !dbg !5347
  %38 = load i32, i32* %offset, align 4, !dbg !5348
  %sub33 = sub nsw i32 %add32, %38, !dbg !5349
  %39 = load i32*, i32** %pitch.addr, align 8, !dbg !5350
  %arrayidx34 = getelementptr inbounds i32, i32* %39, i64 1, !dbg !5350
  %40 = load i32, i32* %arrayidx34, align 4, !dbg !5350
  %div35 = sdiv i32 %sub33, %40, !dbg !5351
  %41 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5352
  %aw_n_pulses36 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %41, i32 0, i32 32, !dbg !5353
  %arrayidx37 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_n_pulses36, i64 0, i64 1, !dbg !5352
  store i32 %div35, i32* %arrayidx37, align 4, !dbg !5354
  %42 = load i32, i32* %offset, align 4, !dbg !5355
  %43 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5356
  %aw_pulse_range38 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %43, i32 0, i32 31, !dbg !5357
  %44 = load i32, i32* %aw_pulse_range38, align 4, !dbg !5357
  %add39 = add nsw i32 160, %44, !dbg !5358
  %div40 = sdiv i32 %add39, 2, !dbg !5359
  %sub41 = sub nsw i32 %42, %div40, !dbg !5360
  %45 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5361
  %aw_first_pulse_off42 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %45, i32 0, i32 33, !dbg !5362
  %arrayidx43 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_first_pulse_off42, i64 0, i64 1, !dbg !5361
  store i32 %sub41, i32* %arrayidx43, align 4, !dbg !5363
  %46 = load i32, i32* %bits, align 4, !dbg !5364
  %idxprom44 = sext i32 %46 to i64, !dbg !5366
  %arrayidx45 = getelementptr inbounds [94 x i16], [94 x i16]* @aw_parse_coords.start_offset, i64 0, i64 %idxprom44, !dbg !5366
  %47 = load i16, i16* %arrayidx45, align 2, !dbg !5366
  %conv46 = sext i16 %47 to i32, !dbg !5366
  %cmp47 = icmp slt i32 %conv46, 80, !dbg !5367
  br i1 %cmp47, label %if.then49, label %if.end84, !dbg !5368

if.then49:                                        ; preds = %for.end
  br label %while.cond, !dbg !5369

while.cond:                                       ; preds = %while.body, %if.then49
  %48 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5371
  %aw_first_pulse_off50 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %48, i32 0, i32 33, !dbg !5373
  %arrayidx51 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_first_pulse_off50, i64 0, i64 1, !dbg !5371
  %49 = load i32, i32* %arrayidx51, align 4, !dbg !5371
  %50 = load i32*, i32** %pitch.addr, align 8, !dbg !5374
  %arrayidx52 = getelementptr inbounds i32, i32* %50, i64 1, !dbg !5374
  %51 = load i32, i32* %arrayidx52, align 4, !dbg !5374
  %sub53 = sub nsw i32 %49, %51, !dbg !5375
  %52 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5376
  %aw_pulse_range54 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %52, i32 0, i32 31, !dbg !5377
  %53 = load i32, i32* %aw_pulse_range54, align 4, !dbg !5377
  %add55 = add nsw i32 %sub53, %53, !dbg !5378
  %cmp56 = icmp sgt i32 %add55, 0, !dbg !5379
  br i1 %cmp56, label %while.body, label %while.end, !dbg !5380

while.body:                                       ; preds = %while.cond
  %54 = load i32*, i32** %pitch.addr, align 8, !dbg !5381
  %arrayidx58 = getelementptr inbounds i32, i32* %54, i64 1, !dbg !5381
  %55 = load i32, i32* %arrayidx58, align 4, !dbg !5381
  %56 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5382
  %aw_first_pulse_off59 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %56, i32 0, i32 33, !dbg !5383
  %arrayidx60 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_first_pulse_off59, i64 0, i64 1, !dbg !5382
  %57 = load i32, i32* %arrayidx60, align 4, !dbg !5384
  %sub61 = sub nsw i32 %57, %55, !dbg !5384
  store i32 %sub61, i32* %arrayidx60, align 4, !dbg !5384
  br label %while.cond, !dbg !5385, !llvm.loop !5387

while.end:                                        ; preds = %while.cond
  %58 = load i32, i32* %bits, align 4, !dbg !5388
  %idxprom62 = sext i32 %58 to i64, !dbg !5390
  %arrayidx63 = getelementptr inbounds [94 x i16], [94 x i16]* @aw_parse_coords.start_offset, i64 0, i64 %idxprom62, !dbg !5390
  %59 = load i16, i16* %arrayidx63, align 2, !dbg !5390
  %conv64 = sext i16 %59 to i32, !dbg !5390
  %cmp65 = icmp slt i32 %conv64, 0, !dbg !5391
  br i1 %cmp65, label %if.then67, label %if.end83, !dbg !5392

if.then67:                                        ; preds = %while.end
  br label %while.cond68, !dbg !5393

while.cond68:                                     ; preds = %while.body77, %if.then67
  %60 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5394
  %aw_first_pulse_off69 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %60, i32 0, i32 33, !dbg !5396
  %arrayidx70 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_first_pulse_off69, i64 0, i64 0, !dbg !5394
  %61 = load i32, i32* %arrayidx70, align 32, !dbg !5394
  %62 = load i32*, i32** %pitch.addr, align 8, !dbg !5397
  %arrayidx71 = getelementptr inbounds i32, i32* %62, i64 0, !dbg !5397
  %63 = load i32, i32* %arrayidx71, align 4, !dbg !5397
  %sub72 = sub nsw i32 %61, %63, !dbg !5398
  %64 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5399
  %aw_pulse_range73 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %64, i32 0, i32 31, !dbg !5400
  %65 = load i32, i32* %aw_pulse_range73, align 4, !dbg !5400
  %add74 = add nsw i32 %sub72, %65, !dbg !5401
  %cmp75 = icmp sgt i32 %add74, 0, !dbg !5402
  br i1 %cmp75, label %while.body77, label %while.end82, !dbg !5403

while.body77:                                     ; preds = %while.cond68
  %66 = load i32*, i32** %pitch.addr, align 8, !dbg !5404
  %arrayidx78 = getelementptr inbounds i32, i32* %66, i64 0, !dbg !5404
  %67 = load i32, i32* %arrayidx78, align 4, !dbg !5404
  %68 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5405
  %aw_first_pulse_off79 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %68, i32 0, i32 33, !dbg !5406
  %arrayidx80 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_first_pulse_off79, i64 0, i64 0, !dbg !5405
  %69 = load i32, i32* %arrayidx80, align 32, !dbg !5407
  %sub81 = sub nsw i32 %69, %67, !dbg !5407
  store i32 %sub81, i32* %arrayidx80, align 32, !dbg !5407
  br label %while.cond68, !dbg !5408, !llvm.loop !5410

while.end82:                                      ; preds = %while.cond68
  br label %if.end83, !dbg !5411

if.end83:                                         ; preds = %while.end82, %while.end
  br label %if.end84, !dbg !5413

if.end84:                                         ; preds = %if.end83, %for.end
  ret void, !dbg !5414
}

; Function Attrs: nounwind uwtable
define internal void @synth_block(%struct.WMAVoiceContext* %s, %struct.GetBitContext* %gb, i32 %block_idx, i32 %size, i32 %block_pitch_sh2, double* %lsps, double* %prev_lsps, %struct.frame_type_desc* %frame_desc, float* %excitation, float* %synth) #1 !dbg !5415 {
entry:
  %s.addr = alloca %struct.WMAVoiceContext*, align 8
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %block_idx.addr = alloca i32, align 4
  %size.addr = alloca i32, align 4
  %block_pitch_sh2.addr = alloca i32, align 4
  %lsps.addr = alloca double*, align 8
  %prev_lsps.addr = alloca double*, align 8
  %frame_desc.addr = alloca %struct.frame_type_desc*, align 8
  %excitation.addr = alloca float*, align 8
  %synth.addr = alloca float*, align 8
  %i_lsps = alloca [16 x double], align 16
  %lpcs = alloca [16 x float], align 16
  %fac = alloca float, align 4
  %n = alloca i32, align 4
  store %struct.WMAVoiceContext* %s, %struct.WMAVoiceContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s.addr, metadata !5418, metadata !2040), !dbg !5419
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !5420, metadata !2040), !dbg !5421
  store i32 %block_idx, i32* %block_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %block_idx.addr, metadata !5422, metadata !2040), !dbg !5423
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !5424, metadata !2040), !dbg !5425
  store i32 %block_pitch_sh2, i32* %block_pitch_sh2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %block_pitch_sh2.addr, metadata !5426, metadata !2040), !dbg !5427
  store double* %lsps, double** %lsps.addr, align 8
  call void @llvm.dbg.declare(metadata double** %lsps.addr, metadata !5428, metadata !2040), !dbg !5429
  store double* %prev_lsps, double** %prev_lsps.addr, align 8
  call void @llvm.dbg.declare(metadata double** %prev_lsps.addr, metadata !5430, metadata !2040), !dbg !5431
  store %struct.frame_type_desc* %frame_desc, %struct.frame_type_desc** %frame_desc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.frame_type_desc** %frame_desc.addr, metadata !5432, metadata !2040), !dbg !5433
  store float* %excitation, float** %excitation.addr, align 8
  call void @llvm.dbg.declare(metadata float** %excitation.addr, metadata !5434, metadata !2040), !dbg !5435
  store float* %synth, float** %synth.addr, align 8
  call void @llvm.dbg.declare(metadata float** %synth.addr, metadata !5436, metadata !2040), !dbg !5437
  call void @llvm.dbg.declare(metadata [16 x double]* %i_lsps, metadata !5438, metadata !2040), !dbg !5439
  call void @llvm.dbg.declare(metadata [16 x float]* %lpcs, metadata !5440, metadata !2040), !dbg !5441
  call void @llvm.dbg.declare(metadata float* %fac, metadata !5442, metadata !2040), !dbg !5443
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5444, metadata !2040), !dbg !5445
  %0 = load %struct.frame_type_desc*, %struct.frame_type_desc** %frame_desc.addr, align 8, !dbg !5446
  %acb_type = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %0, i32 0, i32 2, !dbg !5448
  %1 = load i8, i8* %acb_type, align 1, !dbg !5448
  %conv = zext i8 %1 to i32, !dbg !5446
  %cmp = icmp eq i32 %conv, 0, !dbg !5449
  br i1 %cmp, label %if.then, label %if.else, !dbg !5450

if.then:                                          ; preds = %entry
  %2 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5451
  %3 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !5452
  %4 = load i32, i32* %block_idx.addr, align 4, !dbg !5453
  %5 = load i32, i32* %size.addr, align 4, !dbg !5454
  %6 = load %struct.frame_type_desc*, %struct.frame_type_desc** %frame_desc.addr, align 8, !dbg !5455
  %7 = load float*, float** %excitation.addr, align 8, !dbg !5456
  call void @synth_block_hardcoded(%struct.WMAVoiceContext* %2, %struct.GetBitContext* %3, i32 %4, i32 %5, %struct.frame_type_desc* %6, float* %7), !dbg !5457
  br label %if.end, !dbg !5457

if.else:                                          ; preds = %entry
  %8 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5458
  %9 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !5459
  %10 = load i32, i32* %block_idx.addr, align 4, !dbg !5460
  %11 = load i32, i32* %size.addr, align 4, !dbg !5461
  %12 = load i32, i32* %block_pitch_sh2.addr, align 4, !dbg !5462
  %13 = load %struct.frame_type_desc*, %struct.frame_type_desc** %frame_desc.addr, align 8, !dbg !5463
  %14 = load float*, float** %excitation.addr, align 8, !dbg !5464
  call void @synth_block_fcb_acb(%struct.WMAVoiceContext* %8, %struct.GetBitContext* %9, i32 %10, i32 %11, i32 %12, %struct.frame_type_desc* %13, float* %14), !dbg !5465
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %15 = load i32, i32* %block_idx.addr, align 4, !dbg !5466
  %conv2 = sitofp i32 %15 to double, !dbg !5466
  %add = fadd double %conv2, 5.000000e-01, !dbg !5467
  %16 = load %struct.frame_type_desc*, %struct.frame_type_desc** %frame_desc.addr, align 8, !dbg !5468
  %n_blocks = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %16, i32 0, i32 0, !dbg !5469
  %17 = load i8, i8* %n_blocks, align 1, !dbg !5469
  %conv3 = zext i8 %17 to i32, !dbg !5468
  %conv4 = sitofp i32 %conv3 to double, !dbg !5468
  %div = fdiv double %add, %conv4, !dbg !5470
  %conv5 = fptrunc double %div to float, !dbg !5471
  store float %conv5, float* %fac, align 4, !dbg !5472
  store i32 0, i32* %n, align 4, !dbg !5473
  br label %for.cond, !dbg !5475

for.cond:                                         ; preds = %for.inc, %if.end
  %18 = load i32, i32* %n, align 4, !dbg !5476
  %19 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5479
  %lsps6 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %19, i32 0, i32 8, !dbg !5480
  %20 = load i32, i32* %lsps6, align 4, !dbg !5480
  %cmp7 = icmp slt i32 %18, %20, !dbg !5481
  br i1 %cmp7, label %for.body, label %for.end, !dbg !5482

for.body:                                         ; preds = %for.cond
  %21 = load i32, i32* %n, align 4, !dbg !5483
  %idxprom = sext i32 %21 to i64, !dbg !5484
  %22 = load double*, double** %prev_lsps.addr, align 8, !dbg !5484
  %arrayidx = getelementptr inbounds double, double* %22, i64 %idxprom, !dbg !5484
  %23 = load double, double* %arrayidx, align 8, !dbg !5484
  %24 = load float, float* %fac, align 4, !dbg !5485
  %conv9 = fpext float %24 to double, !dbg !5485
  %25 = load i32, i32* %n, align 4, !dbg !5486
  %idxprom10 = sext i32 %25 to i64, !dbg !5487
  %26 = load double*, double** %lsps.addr, align 8, !dbg !5487
  %arrayidx11 = getelementptr inbounds double, double* %26, i64 %idxprom10, !dbg !5487
  %27 = load double, double* %arrayidx11, align 8, !dbg !5487
  %28 = load i32, i32* %n, align 4, !dbg !5488
  %idxprom12 = sext i32 %28 to i64, !dbg !5489
  %29 = load double*, double** %prev_lsps.addr, align 8, !dbg !5489
  %arrayidx13 = getelementptr inbounds double, double* %29, i64 %idxprom12, !dbg !5489
  %30 = load double, double* %arrayidx13, align 8, !dbg !5489
  %sub = fsub double %27, %30, !dbg !5490
  %mul = fmul double %conv9, %sub, !dbg !5491
  %add14 = fadd double %23, %mul, !dbg !5492
  %call = call double @cos(double %add14) #9, !dbg !5493
  %31 = load i32, i32* %n, align 4, !dbg !5494
  %idxprom15 = sext i32 %31 to i64, !dbg !5495
  %arrayidx16 = getelementptr inbounds [16 x double], [16 x double]* %i_lsps, i64 0, i64 %idxprom15, !dbg !5495
  store double %call, double* %arrayidx16, align 8, !dbg !5496
  br label %for.inc, !dbg !5495

for.inc:                                          ; preds = %for.body
  %32 = load i32, i32* %n, align 4, !dbg !5497
  %inc = add nsw i32 %32, 1, !dbg !5497
  store i32 %inc, i32* %n, align 4, !dbg !5497
  br label %for.cond, !dbg !5499, !llvm.loop !5500

for.end:                                          ; preds = %for.cond
  %arraydecay = getelementptr inbounds [16 x double], [16 x double]* %i_lsps, i32 0, i32 0, !dbg !5502
  %arraydecay17 = getelementptr inbounds [16 x float], [16 x float]* %lpcs, i32 0, i32 0, !dbg !5503
  %33 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5504
  %lsps18 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %33, i32 0, i32 8, !dbg !5505
  %34 = load i32, i32* %lsps18, align 4, !dbg !5505
  %shr = ashr i32 %34, 1, !dbg !5506
  call void @ff_acelp_lspd2lpc(double* %arraydecay, float* %arraydecay17, i32 %shr), !dbg !5507
  %35 = load float*, float** %synth.addr, align 8, !dbg !5508
  %arraydecay19 = getelementptr inbounds [16 x float], [16 x float]* %lpcs, i32 0, i32 0, !dbg !5509
  %36 = load float*, float** %excitation.addr, align 8, !dbg !5510
  %37 = load i32, i32* %size.addr, align 4, !dbg !5511
  %38 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5512
  %lsps20 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %38, i32 0, i32 8, !dbg !5513
  %39 = load i32, i32* %lsps20, align 4, !dbg !5513
  call void @ff_celp_lp_synthesis_filterf(float* %35, float* %arraydecay19, float* %36, i32 %37, i32 %39), !dbg !5514
  ret void, !dbg !5515
}

; Function Attrs: nounwind
declare double @cos(double) #8

declare void @ff_acelp_lspd2lpc(double*, float*, i32) #3

; Function Attrs: nounwind uwtable
define internal void @postfilter(%struct.WMAVoiceContext* %s, float* %synth, float* %samples, i32 %size, float* %lpcs, float* %zero_exc_pf, i32 %fcb_type, i32 %pitch) #1 !dbg !5516 {
entry:
  %s.addr = alloca %struct.WMAVoiceContext*, align 8
  %synth.addr = alloca float*, align 8
  %samples.addr = alloca float*, align 8
  %size.addr = alloca i32, align 4
  %lpcs.addr = alloca float*, align 8
  %zero_exc_pf.addr = alloca float*, align 8
  %fcb_type.addr = alloca i32, align 4
  %pitch.addr = alloca i32, align 4
  %synth_filter_in_buf = alloca [80 x float], align 16
  %synth_pf = alloca float*, align 8
  %synth_filter_in = alloca float*, align 8
  %.compoundliteral = alloca [2 x float], align 4
  %.compoundliteral17 = alloca [2 x float], align 4
  store %struct.WMAVoiceContext* %s, %struct.WMAVoiceContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s.addr, metadata !5519, metadata !2040), !dbg !5520
  store float* %synth, float** %synth.addr, align 8
  call void @llvm.dbg.declare(metadata float** %synth.addr, metadata !5521, metadata !2040), !dbg !5522
  store float* %samples, float** %samples.addr, align 8
  call void @llvm.dbg.declare(metadata float** %samples.addr, metadata !5523, metadata !2040), !dbg !5524
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !5525, metadata !2040), !dbg !5526
  store float* %lpcs, float** %lpcs.addr, align 8
  call void @llvm.dbg.declare(metadata float** %lpcs.addr, metadata !5527, metadata !2040), !dbg !5528
  store float* %zero_exc_pf, float** %zero_exc_pf.addr, align 8
  call void @llvm.dbg.declare(metadata float** %zero_exc_pf.addr, metadata !5529, metadata !2040), !dbg !5530
  store i32 %fcb_type, i32* %fcb_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fcb_type.addr, metadata !5531, metadata !2040), !dbg !5532
  store i32 %pitch, i32* %pitch.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pitch.addr, metadata !5533, metadata !2040), !dbg !5534
  call void @llvm.dbg.declare(metadata [80 x float]* %synth_filter_in_buf, metadata !5535, metadata !2040), !dbg !5539
  call void @llvm.dbg.declare(metadata float** %synth_pf, metadata !5540, metadata !2040), !dbg !5541
  %0 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5542
  %synth_filter_out_buf = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %0, i32 0, i32 54, !dbg !5543
  %arrayidx = getelementptr inbounds [144 x float], [144 x float]* %synth_filter_out_buf, i64 0, i64 16, !dbg !5542
  store float* %arrayidx, float** %synth_pf, align 8, !dbg !5541
  call void @llvm.dbg.declare(metadata float** %synth_filter_in, metadata !5544, metadata !2040), !dbg !5545
  %1 = load float*, float** %zero_exc_pf.addr, align 8, !dbg !5546
  store float* %1, float** %synth_filter_in, align 8, !dbg !5545
  br label %do.body, !dbg !5547, !llvm.loop !5548

do.body:                                          ; preds = %entry
  %2 = load i32, i32* %size.addr, align 4, !dbg !5549
  %cmp = icmp sle i32 %2, 80, !dbg !5553
  br i1 %cmp, label %if.end, label %if.then, !dbg !5554

if.then:                                          ; preds = %do.body
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.17, i32 0, i32 0), i32 810), !dbg !5555
  call void @abort() #10, !dbg !5558
  unreachable, !dbg !5560

if.end:                                           ; preds = %do.body
  br label %do.end, !dbg !5561

do.end:                                           ; preds = %if.end
  %3 = load float*, float** %zero_exc_pf.addr, align 8, !dbg !5563
  %4 = load float*, float** %lpcs.addr, align 8, !dbg !5564
  %5 = load float*, float** %synth.addr, align 8, !dbg !5565
  %6 = load i32, i32* %size.addr, align 4, !dbg !5566
  %7 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5567
  %lsps = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %7, i32 0, i32 8, !dbg !5568
  %8 = load i32, i32* %lsps, align 4, !dbg !5568
  call void @ff_celp_lp_zero_synthesis_filterf(float* %3, float* %4, float* %5, i32 %6, i32 %8), !dbg !5569
  %9 = load i32, i32* %fcb_type.addr, align 4, !dbg !5570
  %cmp1 = icmp sge i32 %9, 2, !dbg !5572
  br i1 %cmp1, label %land.lhs.true, label %if.end4, !dbg !5573

land.lhs.true:                                    ; preds = %do.end
  %10 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5574
  %11 = load i32, i32* %pitch.addr, align 4, !dbg !5575
  %12 = load float*, float** %zero_exc_pf.addr, align 8, !dbg !5576
  %arraydecay = getelementptr inbounds [80 x float], [80 x float]* %synth_filter_in_buf, i32 0, i32 0, !dbg !5577
  %13 = load i32, i32* %size.addr, align 4, !dbg !5578
  %call = call i32 @kalman_smoothen(%struct.WMAVoiceContext* %10, i32 %11, float* %12, float* %arraydecay, i32 %13), !dbg !5579
  %tobool = icmp ne i32 %call, 0, !dbg !5579
  br i1 %tobool, label %if.end4, label %if.then2, !dbg !5580

if.then2:                                         ; preds = %land.lhs.true
  %arraydecay3 = getelementptr inbounds [80 x float], [80 x float]* %synth_filter_in_buf, i32 0, i32 0, !dbg !5582
  store float* %arraydecay3, float** %synth_filter_in, align 8, !dbg !5583
  br label %if.end4, !dbg !5584

if.end4:                                          ; preds = %if.then2, %land.lhs.true, %do.end
  %14 = load float*, float** %synth_pf, align 8, !dbg !5585
  %15 = load float*, float** %lpcs.addr, align 8, !dbg !5586
  %16 = load float*, float** %synth_filter_in, align 8, !dbg !5587
  %17 = load i32, i32* %size.addr, align 4, !dbg !5588
  %18 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5589
  %lsps5 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %18, i32 0, i32 8, !dbg !5590
  %19 = load i32, i32* %lsps5, align 4, !dbg !5590
  call void @ff_celp_lp_synthesis_filterf(float* %14, float* %15, float* %16, i32 %17, i32 %19), !dbg !5591
  %20 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5592
  %lsps6 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %20, i32 0, i32 8, !dbg !5593
  %21 = load i32, i32* %lsps6, align 4, !dbg !5593
  %sub = sub nsw i32 0, %21, !dbg !5594
  %idxprom = sext i32 %sub to i64, !dbg !5595
  %22 = load float*, float** %synth_pf, align 8, !dbg !5595
  %arrayidx7 = getelementptr inbounds float, float* %22, i64 %idxprom, !dbg !5595
  %23 = bitcast float* %arrayidx7 to i8*, !dbg !5596
  %24 = load i32, i32* %size.addr, align 4, !dbg !5597
  %25 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5598
  %lsps8 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %25, i32 0, i32 8, !dbg !5599
  %26 = load i32, i32* %lsps8, align 4, !dbg !5599
  %sub9 = sub nsw i32 %24, %26, !dbg !5600
  %idxprom10 = sext i32 %sub9 to i64, !dbg !5601
  %27 = load float*, float** %synth_pf, align 8, !dbg !5601
  %arrayidx11 = getelementptr inbounds float, float* %27, i64 %idxprom10, !dbg !5601
  %28 = bitcast float* %arrayidx11 to i8*, !dbg !5596
  %29 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5602
  %lsps12 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %29, i32 0, i32 8, !dbg !5603
  %30 = load i32, i32* %lsps12, align 4, !dbg !5603
  %conv = sext i32 %30 to i64, !dbg !5602
  %mul = mul i64 4, %conv, !dbg !5604
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %28, i64 %mul, i32 4, i1 false), !dbg !5596
  %31 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5605
  %32 = load i32, i32* %fcb_type.addr, align 4, !dbg !5606
  %33 = load float*, float** %synth_pf, align 8, !dbg !5607
  %34 = load i32, i32* %size.addr, align 4, !dbg !5608
  %35 = load float*, float** %lpcs.addr, align 8, !dbg !5609
  call void @wiener_denoise(%struct.WMAVoiceContext* %31, i32 %32, float* %33, i32 %34, float* %35), !dbg !5610
  %36 = load float*, float** %samples.addr, align 8, !dbg !5611
  %37 = load float*, float** %synth_pf, align 8, !dbg !5612
  %38 = load float*, float** %synth.addr, align 8, !dbg !5613
  %39 = load i32, i32* %size.addr, align 4, !dbg !5614
  %40 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5615
  %postfilter_agc = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %40, i32 0, i32 46, !dbg !5616
  call void @adaptive_gain_control(float* %36, float* %37, float* %38, i32 %39, float 0x3FEFAE1480000000, float* %postfilter_agc), !dbg !5617
  %41 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5618
  %dc_level = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %41, i32 0, i32 7, !dbg !5620
  %42 = load i32, i32* %dc_level, align 16, !dbg !5620
  %cmp13 = icmp sgt i32 %42, 8, !dbg !5621
  br i1 %cmp13, label %if.then15, label %if.end22, !dbg !5622

if.then15:                                        ; preds = %if.end4
  %43 = load float*, float** %samples.addr, align 8, !dbg !5623
  %44 = load float*, float** %samples.addr, align 8, !dbg !5625
  %arrayinit.begin = getelementptr inbounds [2 x float], [2 x float]* %.compoundliteral, i64 0, i64 0, !dbg !5626
  store float 0xBFFFFFE080000000, float* %arrayinit.begin, align 4, !dbg !5626
  %arrayinit.element = getelementptr inbounds float, float* %arrayinit.begin, i64 1, !dbg !5626
  store float 1.000000e+00, float* %arrayinit.element, align 4, !dbg !5626
  %arraydecay16 = getelementptr inbounds [2 x float], [2 x float]* %.compoundliteral, i32 0, i32 0, !dbg !5627
  %arrayinit.begin18 = getelementptr inbounds [2 x float], [2 x float]* %.compoundliteral17, i64 0, i64 0, !dbg !5628
  store float 0xBFFEEDDE80000000, float* %arrayinit.begin18, align 4, !dbg !5628
  %arrayinit.element19 = getelementptr inbounds float, float* %arrayinit.begin18, i64 1, !dbg !5628
  store float 0x3FEDF2D3C0000000, float* %arrayinit.element19, align 4, !dbg !5628
  %arraydecay20 = getelementptr inbounds [2 x float], [2 x float]* %.compoundliteral17, i32 0, i32 0, !dbg !5629
  %45 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5630
  %dcf_mem = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %45, i32 0, i32 47, !dbg !5631
  %arraydecay21 = getelementptr inbounds [2 x float], [2 x float]* %dcf_mem, i32 0, i32 0, !dbg !5630
  %46 = load i32, i32* %size.addr, align 4, !dbg !5632
  call void @ff_acelp_apply_order_2_transfer_function(float* %43, float* %44, float* %arraydecay16, float* %arraydecay20, float 0x3FEE12E3A0000000, float* %arraydecay21, i32 %46), !dbg !5633
  br label %if.end22, !dbg !5634

if.end22:                                         ; preds = %if.then15, %if.end4
  ret void, !dbg !5635
}

; Function Attrs: nounwind uwtable
define internal void @synth_block_hardcoded(%struct.WMAVoiceContext* %s, %struct.GetBitContext* %gb, i32 %block_idx, i32 %size, %struct.frame_type_desc* %frame_desc, float* %excitation) #1 !dbg !5636 {
entry:
  %s.addr = alloca %struct.WMAVoiceContext*, align 8
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %block_idx.addr = alloca i32, align 4
  %size.addr = alloca i32, align 4
  %frame_desc.addr = alloca %struct.frame_type_desc*, align 8
  %excitation.addr = alloca float*, align 8
  %gain = alloca float, align 4
  %n = alloca i32, align 4
  %r_idx = alloca i32, align 4
  store %struct.WMAVoiceContext* %s, %struct.WMAVoiceContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s.addr, metadata !5639, metadata !2040), !dbg !5640
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !5641, metadata !2040), !dbg !5642
  store i32 %block_idx, i32* %block_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %block_idx.addr, metadata !5643, metadata !2040), !dbg !5644
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !5645, metadata !2040), !dbg !5646
  store %struct.frame_type_desc* %frame_desc, %struct.frame_type_desc** %frame_desc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.frame_type_desc** %frame_desc.addr, metadata !5647, metadata !2040), !dbg !5648
  store float* %excitation, float** %excitation.addr, align 8
  call void @llvm.dbg.declare(metadata float** %excitation.addr, metadata !5649, metadata !2040), !dbg !5650
  call void @llvm.dbg.declare(metadata float* %gain, metadata !5651, metadata !2040), !dbg !5652
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5653, metadata !2040), !dbg !5654
  call void @llvm.dbg.declare(metadata i32* %r_idx, metadata !5655, metadata !2040), !dbg !5656
  br label %do.body, !dbg !5657, !llvm.loop !5658

do.body:                                          ; preds = %entry
  %0 = load i32, i32* %size.addr, align 4, !dbg !5659
  %cmp = icmp sle i32 %0, 160, !dbg !5663
  br i1 %cmp, label %if.end, label %if.then, !dbg !5664

if.then:                                          ; preds = %do.body
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.17, i32 0, i32 0), i32 1278), !dbg !5665
  call void @abort() #10, !dbg !5668
  unreachable, !dbg !5670

if.end:                                           ; preds = %do.body
  br label %do.end, !dbg !5671

do.end:                                           ; preds = %if.end
  %1 = load %struct.frame_type_desc*, %struct.frame_type_desc** %frame_desc.addr, align 8, !dbg !5673
  %fcb_type = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %1, i32 0, i32 3, !dbg !5675
  %2 = load i8, i8* %fcb_type, align 1, !dbg !5675
  %conv = zext i8 %2 to i32, !dbg !5673
  %cmp1 = icmp eq i32 %conv, 0, !dbg !5676
  br i1 %cmp1, label %if.then3, label %if.else, !dbg !5677

if.then3:                                         ; preds = %do.end
  %3 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5678
  %frame_cntr = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %3, i32 0, i32 35, !dbg !5680
  %4 = load i32, i32* %frame_cntr, align 4, !dbg !5680
  %5 = load i32, i32* %block_idx.addr, align 4, !dbg !5681
  %6 = load i32, i32* %size.addr, align 4, !dbg !5682
  %call = call i32 @pRNG(i32 %4, i32 %5, i32 %6), !dbg !5683
  store i32 %call, i32* %r_idx, align 4, !dbg !5684
  %7 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5685
  %silence_gain = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %7, i32 0, i32 29, !dbg !5686
  %8 = load float, float* %silence_gain, align 4, !dbg !5686
  store float %8, float* %gain, align 4, !dbg !5687
  br label %if.end6, !dbg !5688

if.else:                                          ; preds = %do.end
  %9 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !5689
  %call4 = call i32 @get_bits(%struct.GetBitContext* %9, i32 8), !dbg !5691
  store i32 %call4, i32* %r_idx, align 4, !dbg !5692
  %10 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !5693
  %call5 = call i32 @get_bits(%struct.GetBitContext* %10, i32 6), !dbg !5694
  %idxprom = zext i32 %call5 to i64, !dbg !5695
  %arrayidx = getelementptr inbounds [64 x float], [64 x float]* @wmavoice_gain_universal, i64 0, i64 %idxprom, !dbg !5695
  %11 = load float, float* %arrayidx, align 4, !dbg !5695
  store float %11, float* %gain, align 4, !dbg !5696
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then3
  %12 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5697
  %gain_pred_err = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %12, i32 0, i32 37, !dbg !5698
  %arraydecay = getelementptr inbounds [6 x float], [6 x float]* %gain_pred_err, i32 0, i32 0, !dbg !5699
  %13 = bitcast float* %arraydecay to i8*, !dbg !5699
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 24, i32 4, i1 false), !dbg !5699
  store i32 0, i32* %n, align 4, !dbg !5700
  br label %for.cond, !dbg !5702

for.cond:                                         ; preds = %for.inc, %if.end6
  %14 = load i32, i32* %n, align 4, !dbg !5703
  %15 = load i32, i32* %size.addr, align 4, !dbg !5706
  %cmp7 = icmp slt i32 %14, %15, !dbg !5707
  br i1 %cmp7, label %for.body, label %for.end, !dbg !5708

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %r_idx, align 4, !dbg !5709
  %17 = load i32, i32* %n, align 4, !dbg !5710
  %add = add nsw i32 %16, %17, !dbg !5711
  %idxprom9 = sext i32 %add to i64, !dbg !5712
  %arrayidx10 = getelementptr inbounds [1000 x float], [1000 x float]* @wmavoice_std_codebook, i64 0, i64 %idxprom9, !dbg !5712
  %18 = load float, float* %arrayidx10, align 4, !dbg !5712
  %19 = load float, float* %gain, align 4, !dbg !5713
  %mul = fmul float %18, %19, !dbg !5714
  %20 = load i32, i32* %n, align 4, !dbg !5715
  %idxprom11 = sext i32 %20 to i64, !dbg !5716
  %21 = load float*, float** %excitation.addr, align 8, !dbg !5716
  %arrayidx12 = getelementptr inbounds float, float* %21, i64 %idxprom11, !dbg !5716
  store float %mul, float* %arrayidx12, align 4, !dbg !5717
  br label %for.inc, !dbg !5716

for.inc:                                          ; preds = %for.body
  %22 = load i32, i32* %n, align 4, !dbg !5718
  %inc = add nsw i32 %22, 1, !dbg !5718
  store i32 %inc, i32* %n, align 4, !dbg !5718
  br label %for.cond, !dbg !5720, !llvm.loop !5721

for.end:                                          ; preds = %for.cond
  ret void, !dbg !5723
}

; Function Attrs: nounwind uwtable
define internal void @synth_block_fcb_acb(%struct.WMAVoiceContext* %s, %struct.GetBitContext* %gb, i32 %block_idx, i32 %size, i32 %block_pitch_sh2, %struct.frame_type_desc* %frame_desc, float* %excitation) #1 !dbg !2012 {
entry:
  %retval.i = alloca i32, align 4
  %a.addr.i159 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i159, metadata !3701, metadata !2040), !dbg !5724
  %amin.addr.i160 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amin.addr.i160, metadata !3705, metadata !2040), !dbg !5733
  %amax.addr.i161 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amax.addr.i161, metadata !3707, metadata !2040), !dbg !5734
  %a.addr.i = alloca float, align 4
  call void @llvm.dbg.declare(metadata float* %a.addr.i, metadata !5735, metadata !2040), !dbg !5740
  %amin.addr.i = alloca float, align 4
  call void @llvm.dbg.declare(metadata float* %amin.addr.i, metadata !5742, metadata !2040), !dbg !5743
  %amax.addr.i = alloca float, align 4
  call void @llvm.dbg.declare(metadata float* %amax.addr.i, metadata !5744, metadata !2040), !dbg !5745
  %s.addr = alloca %struct.WMAVoiceContext*, align 8
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %block_idx.addr = alloca i32, align 4
  %size.addr = alloca i32, align 4
  %block_pitch_sh2.addr = alloca i32, align 4
  %frame_desc.addr = alloca %struct.frame_type_desc*, align 8
  %excitation.addr = alloca float*, align 8
  %pulses = alloca [80 x float], align 16
  %pred_err = alloca float, align 4
  %acb_gain = alloca float, align 4
  %fcb_gain = alloca float, align 4
  %n = alloca i32, align 4
  %idx = alloca i32, align 4
  %gain_weight = alloca i32, align 4
  %fcb = alloca %struct.AMRFixed, align 4
  %r_idx = alloca i32, align 4
  %offset_nbits = alloca i32, align 4
  %sign = alloca float, align 4
  %pos1 = alloca i32, align 4
  %pos2 = alloca i32, align 4
  %len = alloca i32, align 4
  %next_idx_sh16 = alloca i32, align 4
  %abs_idx = alloca i32, align 4
  %pitch_sh16 = alloca i32, align 4
  %pitch = alloca i32, align 4
  %idx_sh16 = alloca i32, align 4
  %block_pitch = alloca i32, align 4
  store %struct.WMAVoiceContext* %s, %struct.WMAVoiceContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s.addr, metadata !5746, metadata !2040), !dbg !5747
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !5748, metadata !2040), !dbg !5749
  store i32 %block_idx, i32* %block_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %block_idx.addr, metadata !5750, metadata !2040), !dbg !5751
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !5752, metadata !2040), !dbg !5753
  store i32 %block_pitch_sh2, i32* %block_pitch_sh2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %block_pitch_sh2.addr, metadata !5754, metadata !2040), !dbg !5755
  store %struct.frame_type_desc* %frame_desc, %struct.frame_type_desc** %frame_desc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.frame_type_desc** %frame_desc.addr, metadata !5756, metadata !2040), !dbg !5757
  store float* %excitation, float** %excitation.addr, align 8
  call void @llvm.dbg.declare(metadata float** %excitation.addr, metadata !5758, metadata !2040), !dbg !5759
  call void @llvm.dbg.declare(metadata [80 x float]* %pulses, metadata !5760, metadata !2040), !dbg !5761
  call void @llvm.dbg.declare(metadata float* %pred_err, metadata !5762, metadata !2040), !dbg !5763
  call void @llvm.dbg.declare(metadata float* %acb_gain, metadata !5764, metadata !2040), !dbg !5765
  call void @llvm.dbg.declare(metadata float* %fcb_gain, metadata !5766, metadata !2040), !dbg !5767
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5768, metadata !2040), !dbg !5769
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !5770, metadata !2040), !dbg !5771
  call void @llvm.dbg.declare(metadata i32* %gain_weight, metadata !5772, metadata !2040), !dbg !5773
  call void @llvm.dbg.declare(metadata %struct.AMRFixed* %fcb, metadata !5774, metadata !2040), !dbg !5788
  br label %do.body, !dbg !5789, !llvm.loop !5790

do.body:                                          ; preds = %entry
  %0 = load i32, i32* %size.addr, align 4, !dbg !5791
  %cmp = icmp sle i32 %0, 80, !dbg !5795
  br i1 %cmp, label %if.end, label %if.then, !dbg !5796

if.then:                                          ; preds = %do.body
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.17, i32 0, i32 0), i32 1314), !dbg !5797
  call void @abort() #10, !dbg !5800
  unreachable, !dbg !5802

if.end:                                           ; preds = %do.body
  br label %do.end, !dbg !5803

do.end:                                           ; preds = %if.end
  %arraydecay = getelementptr inbounds [80 x float], [80 x float]* %pulses, i32 0, i32 0, !dbg !5805
  %1 = bitcast float* %arraydecay to i8*, !dbg !5805
  %2 = load i32, i32* %size.addr, align 4, !dbg !5806
  %conv = sext i32 %2 to i64, !dbg !5806
  %mul = mul i64 4, %conv, !dbg !5807
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 %mul, i32 16, i1 false), !dbg !5805
  %3 = load i32, i32* %block_pitch_sh2.addr, align 4, !dbg !5808
  %shr = ashr i32 %3, 2, !dbg !5809
  %pitch_lag = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %fcb, i32 0, i32 4, !dbg !5810
  store i32 %shr, i32* %pitch_lag, align 4, !dbg !5811
  %pitch_fac = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %fcb, i32 0, i32 5, !dbg !5812
  store float 1.000000e+00, float* %pitch_fac, align 4, !dbg !5813
  %no_repeat_mask = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %fcb, i32 0, i32 3, !dbg !5814
  store i32 0, i32* %no_repeat_mask, align 4, !dbg !5815
  %n1 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %fcb, i32 0, i32 0, !dbg !5816
  store i32 0, i32* %n1, align 4, !dbg !5817
  %4 = load %struct.frame_type_desc*, %struct.frame_type_desc** %frame_desc.addr, align 8, !dbg !5818
  %fcb_type = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %4, i32 0, i32 3, !dbg !5820
  %5 = load i8, i8* %fcb_type, align 1, !dbg !5820
  %conv2 = zext i8 %5 to i32, !dbg !5818
  %cmp3 = icmp eq i32 %conv2, 2, !dbg !5821
  br i1 %cmp3, label %if.then5, label %if.else, !dbg !5822

if.then5:                                         ; preds = %do.end
  %6 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5823
  %7 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !5825
  %8 = load i32, i32* %block_idx.addr, align 4, !dbg !5826
  call void @aw_pulse_set1(%struct.WMAVoiceContext* %6, %struct.GetBitContext* %7, i32 %8, %struct.AMRFixed* %fcb), !dbg !5827
  %9 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5828
  %10 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !5830
  %11 = load i32, i32* %block_idx.addr, align 4, !dbg !5831
  %call = call i32 @aw_pulse_set2(%struct.WMAVoiceContext* %9, %struct.GetBitContext* %10, i32 %11, %struct.AMRFixed* %fcb), !dbg !5832
  %tobool = icmp ne i32 %call, 0, !dbg !5832
  br i1 %tobool, label %if.then6, label %if.end13, !dbg !5833

if.then6:                                         ; preds = %if.then5
  call void @llvm.dbg.declare(metadata i32* %r_idx, metadata !5834, metadata !2040), !dbg !5836
  %12 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5837
  %frame_cntr = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %12, i32 0, i32 35, !dbg !5838
  %13 = load i32, i32* %frame_cntr, align 4, !dbg !5838
  %14 = load i32, i32* %block_idx.addr, align 4, !dbg !5839
  %15 = load i32, i32* %size.addr, align 4, !dbg !5840
  %call7 = call i32 @pRNG(i32 %13, i32 %14, i32 %15), !dbg !5841
  store i32 %call7, i32* %r_idx, align 4, !dbg !5836
  store i32 0, i32* %n, align 4, !dbg !5842
  br label %for.cond, !dbg !5844

for.cond:                                         ; preds = %for.inc, %if.then6
  %16 = load i32, i32* %n, align 4, !dbg !5845
  %17 = load i32, i32* %size.addr, align 4, !dbg !5848
  %cmp8 = icmp slt i32 %16, %17, !dbg !5849
  br i1 %cmp8, label %for.body, label %for.end, !dbg !5850

for.body:                                         ; preds = %for.cond
  %18 = load i32, i32* %r_idx, align 4, !dbg !5851
  %19 = load i32, i32* %n, align 4, !dbg !5852
  %add = add nsw i32 %18, %19, !dbg !5853
  %idxprom = sext i32 %add to i64, !dbg !5854
  %arrayidx = getelementptr inbounds [1000 x float], [1000 x float]* @wmavoice_std_codebook, i64 0, i64 %idxprom, !dbg !5854
  %20 = load float, float* %arrayidx, align 4, !dbg !5854
  %21 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5855
  %silence_gain = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %21, i32 0, i32 29, !dbg !5856
  %22 = load float, float* %silence_gain, align 4, !dbg !5856
  %mul10 = fmul float %20, %22, !dbg !5857
  %23 = load i32, i32* %n, align 4, !dbg !5858
  %idxprom11 = sext i32 %23 to i64, !dbg !5859
  %24 = load float*, float** %excitation.addr, align 8, !dbg !5859
  %arrayidx12 = getelementptr inbounds float, float* %24, i64 %idxprom11, !dbg !5859
  store float %mul10, float* %arrayidx12, align 4, !dbg !5860
  br label %for.inc, !dbg !5859

for.inc:                                          ; preds = %for.body
  %25 = load i32, i32* %n, align 4, !dbg !5861
  %inc = add nsw i32 %25, 1, !dbg !5861
  store i32 %inc, i32* %n, align 4, !dbg !5861
  br label %for.cond, !dbg !5863, !llvm.loop !5864

for.end:                                          ; preds = %for.cond
  %26 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !5866
  call void @skip_bits(%struct.GetBitContext* %26, i32 8), !dbg !5867
  br label %return, !dbg !5868

if.end13:                                         ; preds = %if.then5
  br label %if.end57, !dbg !5869

if.else:                                          ; preds = %do.end
  call void @llvm.dbg.declare(metadata i32* %offset_nbits, metadata !5870, metadata !2040), !dbg !5872
  %27 = load %struct.frame_type_desc*, %struct.frame_type_desc** %frame_desc.addr, align 8, !dbg !5873
  %log_n_blocks = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %27, i32 0, i32 1, !dbg !5874
  %28 = load i8, i8* %log_n_blocks, align 1, !dbg !5874
  %conv14 = zext i8 %28 to i32, !dbg !5873
  %sub = sub nsw i32 5, %conv14, !dbg !5875
  store i32 %sub, i32* %offset_nbits, align 4, !dbg !5872
  %no_repeat_mask15 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %fcb, i32 0, i32 3, !dbg !5876
  store i32 -1, i32* %no_repeat_mask15, align 4, !dbg !5877
  store i32 0, i32* %n, align 4, !dbg !5878
  br label %for.cond16, !dbg !5880

for.cond16:                                       ; preds = %for.inc54, %if.else
  %29 = load i32, i32* %n, align 4, !dbg !5881
  %cmp17 = icmp slt i32 %29, 5, !dbg !5884
  br i1 %cmp17, label %for.body19, label %for.end56, !dbg !5885

for.body19:                                       ; preds = %for.cond16
  call void @llvm.dbg.declare(metadata float* %sign, metadata !5886, metadata !2040), !dbg !5888
  call void @llvm.dbg.declare(metadata i32* %pos1, metadata !5889, metadata !2040), !dbg !5890
  call void @llvm.dbg.declare(metadata i32* %pos2, metadata !5891, metadata !2040), !dbg !5892
  %30 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !5893
  %call20 = call i32 @get_bits1(%struct.GetBitContext* %30), !dbg !5894
  %tobool21 = icmp ne i32 %call20, 0, !dbg !5894
  %cond = select i1 %tobool21, double 1.000000e+00, double -1.000000e+00, !dbg !5894
  %conv22 = fptrunc double %cond to float, !dbg !5894
  store float %conv22, float* %sign, align 4, !dbg !5895
  %31 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !5896
  %32 = load i32, i32* %offset_nbits, align 4, !dbg !5897
  %call23 = call i32 @get_bits(%struct.GetBitContext* %31, i32 %32), !dbg !5898
  store i32 %call23, i32* %pos1, align 4, !dbg !5899
  %33 = load i32, i32* %n, align 4, !dbg !5900
  %34 = load i32, i32* %pos1, align 4, !dbg !5901
  %mul24 = mul nsw i32 5, %34, !dbg !5902
  %add25 = add nsw i32 %33, %mul24, !dbg !5903
  %n26 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %fcb, i32 0, i32 0, !dbg !5904
  %35 = load i32, i32* %n26, align 4, !dbg !5904
  %idxprom27 = sext i32 %35 to i64, !dbg !5905
  %x = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %fcb, i32 0, i32 1, !dbg !5906
  %arrayidx28 = getelementptr inbounds [10 x i32], [10 x i32]* %x, i64 0, i64 %idxprom27, !dbg !5905
  store i32 %add25, i32* %arrayidx28, align 4, !dbg !5907
  %36 = load float, float* %sign, align 4, !dbg !5908
  %n29 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %fcb, i32 0, i32 0, !dbg !5909
  %37 = load i32, i32* %n29, align 4, !dbg !5910
  %inc30 = add nsw i32 %37, 1, !dbg !5910
  store i32 %inc30, i32* %n29, align 4, !dbg !5910
  %idxprom31 = sext i32 %37 to i64, !dbg !5911
  %y = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %fcb, i32 0, i32 2, !dbg !5912
  %arrayidx32 = getelementptr inbounds [10 x float], [10 x float]* %y, i64 0, i64 %idxprom31, !dbg !5911
  store float %36, float* %arrayidx32, align 4, !dbg !5913
  %38 = load i32, i32* %n, align 4, !dbg !5914
  %39 = load %struct.frame_type_desc*, %struct.frame_type_desc** %frame_desc.addr, align 8, !dbg !5916
  %dbl_pulses = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %39, i32 0, i32 4, !dbg !5917
  %40 = load i8, i8* %dbl_pulses, align 1, !dbg !5917
  %conv33 = zext i8 %40 to i32, !dbg !5916
  %cmp34 = icmp slt i32 %38, %conv33, !dbg !5918
  br i1 %cmp34, label %if.then36, label %if.end53, !dbg !5919

if.then36:                                        ; preds = %for.body19
  %41 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !5920
  %42 = load i32, i32* %offset_nbits, align 4, !dbg !5922
  %call37 = call i32 @get_bits(%struct.GetBitContext* %41, i32 %42), !dbg !5923
  store i32 %call37, i32* %pos2, align 4, !dbg !5924
  %43 = load i32, i32* %n, align 4, !dbg !5925
  %44 = load i32, i32* %pos2, align 4, !dbg !5926
  %mul38 = mul nsw i32 5, %44, !dbg !5927
  %add39 = add nsw i32 %43, %mul38, !dbg !5928
  %n40 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %fcb, i32 0, i32 0, !dbg !5929
  %45 = load i32, i32* %n40, align 4, !dbg !5929
  %idxprom41 = sext i32 %45 to i64, !dbg !5930
  %x42 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %fcb, i32 0, i32 1, !dbg !5931
  %arrayidx43 = getelementptr inbounds [10 x i32], [10 x i32]* %x42, i64 0, i64 %idxprom41, !dbg !5930
  store i32 %add39, i32* %arrayidx43, align 4, !dbg !5932
  %46 = load i32, i32* %pos1, align 4, !dbg !5933
  %47 = load i32, i32* %pos2, align 4, !dbg !5934
  %cmp44 = icmp slt i32 %46, %47, !dbg !5935
  br i1 %cmp44, label %cond.true, label %cond.false, !dbg !5936

cond.true:                                        ; preds = %if.then36
  %48 = load float, float* %sign, align 4, !dbg !5937
  %sub46 = fsub float -0.000000e+00, %48, !dbg !5939
  br label %cond.end, !dbg !5940

cond.false:                                       ; preds = %if.then36
  %49 = load float, float* %sign, align 4, !dbg !5941
  br label %cond.end, !dbg !5943

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond47 = phi float [ %sub46, %cond.true ], [ %49, %cond.false ], !dbg !5944
  %n48 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %fcb, i32 0, i32 0, !dbg !5946
  %50 = load i32, i32* %n48, align 4, !dbg !5947
  %inc49 = add nsw i32 %50, 1, !dbg !5947
  store i32 %inc49, i32* %n48, align 4, !dbg !5947
  %idxprom50 = sext i32 %50 to i64, !dbg !5948
  %y51 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %fcb, i32 0, i32 2, !dbg !5949
  %arrayidx52 = getelementptr inbounds [10 x float], [10 x float]* %y51, i64 0, i64 %idxprom50, !dbg !5948
  store float %cond47, float* %arrayidx52, align 4, !dbg !5950
  br label %if.end53, !dbg !5951

if.end53:                                         ; preds = %cond.end, %for.body19
  br label %for.inc54, !dbg !5952

for.inc54:                                        ; preds = %if.end53
  %51 = load i32, i32* %n, align 4, !dbg !5953
  %inc55 = add nsw i32 %51, 1, !dbg !5953
  store i32 %inc55, i32* %n, align 4, !dbg !5953
  br label %for.cond16, !dbg !5955, !llvm.loop !5956

for.end56:                                        ; preds = %for.cond16
  br label %if.end57

if.end57:                                         ; preds = %for.end56, %if.end13
  %arraydecay58 = getelementptr inbounds [80 x float], [80 x float]* %pulses, i32 0, i32 0, !dbg !5958
  %52 = load i32, i32* %size.addr, align 4, !dbg !5959
  call void @ff_set_fixed_vector(float* %arraydecay58, %struct.AMRFixed* %fcb, float 1.000000e+00, i32 %52), !dbg !5960
  %53 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !5961
  %call59 = call i32 @get_bits(%struct.GetBitContext* %53, i32 7), !dbg !5962
  store i32 %call59, i32* %idx, align 4, !dbg !5963
  %54 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5964
  %gain_pred_err = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %54, i32 0, i32 37, !dbg !5965
  %arraydecay60 = getelementptr inbounds [6 x float], [6 x float]* %gain_pred_err, i32 0, i32 0, !dbg !5964
  %call61 = call float @avpriv_scalarproduct_float_c(float* %arraydecay60, float* getelementptr inbounds ([6 x float], [6 x float]* @synth_block_fcb_acb.gain_coeff, i32 0, i32 0), i32 6), !dbg !5966
  %conv62 = fpext float %call61 to double, !dbg !5966
  %sub63 = fsub double %conv62, 0x4014F6B2BA15D4C2, !dbg !5967
  %55 = load i32, i32* %idx, align 4, !dbg !5968
  %idxprom64 = sext i32 %55 to i64, !dbg !5969
  %arrayidx65 = getelementptr inbounds [128 x float], [128 x float]* @wmavoice_gain_codebook_fcb, i64 0, i64 %idxprom64, !dbg !5969
  %56 = load float, float* %arrayidx65, align 4, !dbg !5969
  %conv66 = fpext float %56 to double, !dbg !5969
  %add67 = fadd double %sub63, %conv66, !dbg !5970
  %conv68 = fptrunc double %add67 to float, !dbg !5966
  %call69 = call float @expf(float %conv68) #9, !dbg !5971
  store float %call69, float* %fcb_gain, align 4, !dbg !5973
  %57 = load i32, i32* %idx, align 4, !dbg !5974
  %idxprom70 = sext i32 %57 to i64, !dbg !5975
  %arrayidx71 = getelementptr inbounds [128 x float], [128 x float]* @wmavoice_gain_codebook_acb, i64 0, i64 %idxprom70, !dbg !5975
  %58 = load float, float* %arrayidx71, align 4, !dbg !5975
  store float %58, float* %acb_gain, align 4, !dbg !5976
  %59 = load i32, i32* %idx, align 4, !dbg !5977
  %idxprom72 = sext i32 %59 to i64, !dbg !5978
  %arrayidx73 = getelementptr inbounds [128 x float], [128 x float]* @wmavoice_gain_codebook_fcb, i64 0, i64 %idxprom72, !dbg !5978
  %60 = load float, float* %arrayidx73, align 4, !dbg !5978
  store float %60, float* %a.addr.i, align 4, !dbg !5979
  store float 0xC007F74280000000, float* %amin.addr.i, align 4, !dbg !5979
  store float 0x3FF9C04200000000, float* %amax.addr.i, align 4, !dbg !5979
  %61 = load float, float* %a.addr.i, align 4, !dbg !5980
  %62 = load float, float* %amin.addr.i, align 4, !dbg !5981
  %63 = load float, float* %amax.addr.i, align 4, !dbg !5982
  %64 = call float asm "minss $2, $0 \0A\09maxss $1, $0 \0A\09", "=&x,xm,xm,0,~{dirflag},~{fpsr},~{flags}"(float %62, float %63, float %61) #11, !dbg !5980, !srcloc !5983
  store float %64, float* %a.addr.i, align 4, !dbg !5980
  %65 = load float, float* %a.addr.i, align 4, !dbg !5984
  store float %65, float* %pred_err, align 4, !dbg !5985
  %66 = load %struct.frame_type_desc*, %struct.frame_type_desc** %frame_desc.addr, align 8, !dbg !5986
  %log_n_blocks75 = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %66, i32 0, i32 1, !dbg !5987
  %67 = load i8, i8* %log_n_blocks75, align 1, !dbg !5987
  %conv76 = zext i8 %67 to i32, !dbg !5986
  %shr77 = ashr i32 8, %conv76, !dbg !5988
  store i32 %shr77, i32* %gain_weight, align 4, !dbg !5989
  %68 = load i32, i32* %gain_weight, align 4, !dbg !5990
  %idxprom78 = sext i32 %68 to i64, !dbg !5991
  %69 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5991
  %gain_pred_err79 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %69, i32 0, i32 37, !dbg !5992
  %arrayidx80 = getelementptr inbounds [6 x float], [6 x float]* %gain_pred_err79, i64 0, i64 %idxprom78, !dbg !5991
  %70 = bitcast float* %arrayidx80 to i8*, !dbg !5993
  %71 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !5994
  %gain_pred_err81 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %71, i32 0, i32 37, !dbg !5995
  %arraydecay82 = getelementptr inbounds [6 x float], [6 x float]* %gain_pred_err81, i32 0, i32 0, !dbg !5993
  %72 = bitcast float* %arraydecay82 to i8*, !dbg !5993
  %73 = load i32, i32* %gain_weight, align 4, !dbg !5996
  %sub83 = sub nsw i32 6, %73, !dbg !5997
  %conv84 = sext i32 %sub83 to i64, !dbg !5998
  %mul85 = mul i64 4, %conv84, !dbg !5999
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %70, i8* %72, i64 %mul85, i32 4, i1 false), !dbg !5993
  store i32 0, i32* %n, align 4, !dbg !6000
  br label %for.cond86, !dbg !6002

for.cond86:                                       ; preds = %for.inc93, %if.end57
  %74 = load i32, i32* %n, align 4, !dbg !6003
  %75 = load i32, i32* %gain_weight, align 4, !dbg !6006
  %cmp87 = icmp slt i32 %74, %75, !dbg !6007
  br i1 %cmp87, label %for.body89, label %for.end95, !dbg !6008

for.body89:                                       ; preds = %for.cond86
  %76 = load float, float* %pred_err, align 4, !dbg !6009
  %77 = load i32, i32* %n, align 4, !dbg !6010
  %idxprom90 = sext i32 %77 to i64, !dbg !6011
  %78 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6011
  %gain_pred_err91 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %78, i32 0, i32 37, !dbg !6012
  %arrayidx92 = getelementptr inbounds [6 x float], [6 x float]* %gain_pred_err91, i64 0, i64 %idxprom90, !dbg !6011
  store float %76, float* %arrayidx92, align 4, !dbg !6013
  br label %for.inc93, !dbg !6011

for.inc93:                                        ; preds = %for.body89
  %79 = load i32, i32* %n, align 4, !dbg !6014
  %inc94 = add nsw i32 %79, 1, !dbg !6014
  store i32 %inc94, i32* %n, align 4, !dbg !6014
  br label %for.cond86, !dbg !6016, !llvm.loop !6017

for.end95:                                        ; preds = %for.cond86
  %80 = load %struct.frame_type_desc*, %struct.frame_type_desc** %frame_desc.addr, align 8, !dbg !6019
  %acb_type = getelementptr inbounds %struct.frame_type_desc, %struct.frame_type_desc* %80, i32 0, i32 2, !dbg !6020
  %81 = load i8, i8* %acb_type, align 1, !dbg !6020
  %conv96 = zext i8 %81 to i32, !dbg !6019
  %cmp97 = icmp eq i32 %conv96, 1, !dbg !6021
  br i1 %cmp97, label %if.then99, label %if.else141, !dbg !6022

if.then99:                                        ; preds = %for.end95
  call void @llvm.dbg.declare(metadata i32* %len, metadata !6023, metadata !2040), !dbg !6024
  store i32 0, i32* %n, align 4, !dbg !6025
  br label %for.cond100, !dbg !6026

for.cond100:                                      ; preds = %for.inc138, %if.then99
  %82 = load i32, i32* %n, align 4, !dbg !6027
  %83 = load i32, i32* %size.addr, align 4, !dbg !6029
  %cmp101 = icmp slt i32 %82, %83, !dbg !6030
  br i1 %cmp101, label %for.body103, label %for.end140, !dbg !6031

for.body103:                                      ; preds = %for.cond100
  call void @llvm.dbg.declare(metadata i32* %next_idx_sh16, metadata !6032, metadata !2040), !dbg !6033
  call void @llvm.dbg.declare(metadata i32* %abs_idx, metadata !6034, metadata !2040), !dbg !6035
  %84 = load i32, i32* %block_idx.addr, align 4, !dbg !6036
  %85 = load i32, i32* %size.addr, align 4, !dbg !6037
  %mul104 = mul nsw i32 %84, %85, !dbg !6038
  %86 = load i32, i32* %n, align 4, !dbg !6039
  %add105 = add nsw i32 %mul104, %86, !dbg !6040
  store i32 %add105, i32* %abs_idx, align 4, !dbg !6035
  call void @llvm.dbg.declare(metadata i32* %pitch_sh16, metadata !6041, metadata !2040), !dbg !6042
  %87 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6043
  %last_pitch_val = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %87, i32 0, i32 26, !dbg !6044
  %88 = load i32, i32* %last_pitch_val, align 32, !dbg !6044
  %shl = shl i32 %88, 16, !dbg !6045
  %89 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6046
  %pitch_diff_sh16 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %89, i32 0, i32 28, !dbg !6047
  %90 = load i32, i32* %pitch_diff_sh16, align 8, !dbg !6047
  %91 = load i32, i32* %abs_idx, align 4, !dbg !6048
  %mul106 = mul nsw i32 %90, %91, !dbg !6049
  %add107 = add nsw i32 %shl, %mul106, !dbg !6050
  store i32 %add107, i32* %pitch_sh16, align 4, !dbg !6042
  call void @llvm.dbg.declare(metadata i32* %pitch, metadata !6051, metadata !2040), !dbg !6052
  %92 = load i32, i32* %pitch_sh16, align 4, !dbg !6053
  %add108 = add nsw i32 %92, 28671, !dbg !6054
  %shr109 = ashr i32 %add108, 16, !dbg !6055
  store i32 %shr109, i32* %pitch, align 4, !dbg !6052
  call void @llvm.dbg.declare(metadata i32* %idx_sh16, metadata !6056, metadata !2040), !dbg !6057
  %93 = load i32, i32* %pitch, align 4, !dbg !6058
  %shl110 = shl i32 %93, 16, !dbg !6059
  %94 = load i32, i32* %pitch_sh16, align 4, !dbg !6060
  %sub111 = sub nsw i32 %shl110, %94, !dbg !6061
  %mul112 = mul nsw i32 %sub111, 8, !dbg !6062
  %add113 = add nsw i32 %mul112, 360448, !dbg !6063
  store i32 %add113, i32* %idx_sh16, align 4, !dbg !6057
  %95 = load i32, i32* %idx_sh16, align 4, !dbg !6064
  %shr114 = ashr i32 %95, 16, !dbg !6065
  store i32 %shr114, i32* %idx, align 4, !dbg !6066
  %96 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6067
  %pitch_diff_sh16115 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %96, i32 0, i32 28, !dbg !6068
  %97 = load i32, i32* %pitch_diff_sh16115, align 8, !dbg !6068
  %tobool116 = icmp ne i32 %97, 0, !dbg !6067
  br i1 %tobool116, label %if.then117, label %if.else131, !dbg !6069

if.then117:                                       ; preds = %for.body103
  %98 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6070
  %pitch_diff_sh16118 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %98, i32 0, i32 28, !dbg !6072
  %99 = load i32, i32* %pitch_diff_sh16118, align 8, !dbg !6072
  %cmp119 = icmp sgt i32 %99, 0, !dbg !6073
  br i1 %cmp119, label %if.then121, label %if.else122, !dbg !6074

if.then121:                                       ; preds = %if.then117
  %100 = load i32, i32* %idx_sh16, align 4, !dbg !6075
  %and = and i32 %100, -65536, !dbg !6077
  store i32 %and, i32* %next_idx_sh16, align 4, !dbg !6078
  br label %if.end125, !dbg !6079

if.else122:                                       ; preds = %if.then117
  %101 = load i32, i32* %idx_sh16, align 4, !dbg !6080
  %add123 = add nsw i32 %101, 65536, !dbg !6081
  %and124 = and i32 %add123, -65536, !dbg !6082
  store i32 %and124, i32* %next_idx_sh16, align 4, !dbg !6083
  br label %if.end125

if.end125:                                        ; preds = %if.else122, %if.then121
  %102 = load i32, i32* %idx_sh16, align 4, !dbg !6084
  %103 = load i32, i32* %next_idx_sh16, align 4, !dbg !6085
  %sub126 = sub nsw i32 %102, %103, !dbg !6086
  %104 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6087
  %pitch_diff_sh16127 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %104, i32 0, i32 28, !dbg !6088
  %105 = load i32, i32* %pitch_diff_sh16127, align 8, !dbg !6088
  %div = sdiv i32 %sub126, %105, !dbg !6089
  %div128 = sdiv i32 %div, 8, !dbg !6090
  %106 = load i32, i32* %size.addr, align 4, !dbg !6091
  %107 = load i32, i32* %n, align 4, !dbg !6092
  %sub129 = sub nsw i32 %106, %107, !dbg !6093
  store i32 %div128, i32* %a.addr.i159, align 4, !dbg !6094
  store i32 1, i32* %amin.addr.i160, align 4, !dbg !6094
  store i32 %sub129, i32* %amax.addr.i161, align 4, !dbg !6094
  %108 = load i32, i32* %a.addr.i159, align 4, !dbg !6095
  %109 = load i32, i32* %amin.addr.i160, align 4, !dbg !6096
  %cmp.i = icmp slt i32 %108, %109, !dbg !6097
  br i1 %cmp.i, label %if.then.i, label %if.else.i, !dbg !6098

if.then.i:                                        ; preds = %if.end125
  %110 = load i32, i32* %amin.addr.i160, align 4, !dbg !6099
  store i32 %110, i32* %retval.i, align 4, !dbg !6100
  br label %av_clip_c.exit, !dbg !6100

if.else.i:                                        ; preds = %if.end125
  %111 = load i32, i32* %a.addr.i159, align 4, !dbg !6101
  %112 = load i32, i32* %amax.addr.i161, align 4, !dbg !6102
  %cmp1.i = icmp sgt i32 %111, %112, !dbg !6103
  br i1 %cmp1.i, label %if.then2.i, label %if.else3.i, !dbg !6104

if.then2.i:                                       ; preds = %if.else.i
  %113 = load i32, i32* %amax.addr.i161, align 4, !dbg !6105
  store i32 %113, i32* %retval.i, align 4, !dbg !6106
  br label %av_clip_c.exit, !dbg !6106

if.else3.i:                                       ; preds = %if.else.i
  %114 = load i32, i32* %a.addr.i159, align 4, !dbg !6107
  store i32 %114, i32* %retval.i, align 4, !dbg !6108
  br label %av_clip_c.exit, !dbg !6108

av_clip_c.exit:                                   ; preds = %if.then.i, %if.then2.i, %if.else3.i
  %115 = load i32, i32* %retval.i, align 4, !dbg !6109
  store i32 %115, i32* %len, align 4, !dbg !6110
  br label %if.end132, !dbg !6111

if.else131:                                       ; preds = %for.body103
  %116 = load i32, i32* %size.addr, align 4, !dbg !6112
  store i32 %116, i32* %len, align 4, !dbg !6113
  br label %if.end132

if.end132:                                        ; preds = %if.else131, %av_clip_c.exit
  %117 = load i32, i32* %n, align 4, !dbg !6114
  %idxprom133 = sext i32 %117 to i64, !dbg !6115
  %118 = load float*, float** %excitation.addr, align 8, !dbg !6115
  %arrayidx134 = getelementptr inbounds float, float* %118, i64 %idxprom133, !dbg !6115
  %119 = load i32, i32* %n, align 4, !dbg !6116
  %120 = load i32, i32* %pitch, align 4, !dbg !6117
  %sub135 = sub nsw i32 %119, %120, !dbg !6118
  %idxprom136 = sext i32 %sub135 to i64, !dbg !6119
  %121 = load float*, float** %excitation.addr, align 8, !dbg !6119
  %arrayidx137 = getelementptr inbounds float, float* %121, i64 %idxprom136, !dbg !6119
  %122 = load i32, i32* %idx, align 4, !dbg !6120
  %123 = load i32, i32* %len, align 4, !dbg !6121
  call void @ff_acelp_interpolatef(float* %arrayidx134, float* %arrayidx137, float* getelementptr inbounds ([153 x float], [153 x float]* @wmavoice_ipol1_coeffs, i32 0, i32 0), i32 17, i32 %122, i32 9, i32 %123), !dbg !6122
  br label %for.inc138, !dbg !6123

for.inc138:                                       ; preds = %if.end132
  %124 = load i32, i32* %len, align 4, !dbg !6124
  %125 = load i32, i32* %n, align 4, !dbg !6126
  %add139 = add nsw i32 %125, %124, !dbg !6126
  store i32 %add139, i32* %n, align 4, !dbg !6126
  br label %for.cond100, !dbg !6127, !llvm.loop !6128

for.end140:                                       ; preds = %for.cond100
  br label %if.end157, !dbg !6130

if.else141:                                       ; preds = %for.end95
  call void @llvm.dbg.declare(metadata i32* %block_pitch, metadata !6131, metadata !2040), !dbg !6133
  %126 = load i32, i32* %block_pitch_sh2.addr, align 4, !dbg !6134
  %shr142 = ashr i32 %126, 2, !dbg !6135
  store i32 %shr142, i32* %block_pitch, align 4, !dbg !6133
  %127 = load i32, i32* %block_pitch_sh2.addr, align 4, !dbg !6136
  %and143 = and i32 %127, 3, !dbg !6137
  store i32 %and143, i32* %idx, align 4, !dbg !6138
  %128 = load i32, i32* %idx, align 4, !dbg !6139
  %tobool144 = icmp ne i32 %128, 0, !dbg !6139
  br i1 %tobool144, label %if.then145, label %if.else149, !dbg !6141

if.then145:                                       ; preds = %if.else141
  %129 = load float*, float** %excitation.addr, align 8, !dbg !6142
  %130 = load i32, i32* %block_pitch, align 4, !dbg !6144
  %sub146 = sub nsw i32 0, %130, !dbg !6145
  %idxprom147 = sext i32 %sub146 to i64, !dbg !6146
  %131 = load float*, float** %excitation.addr, align 8, !dbg !6146
  %arrayidx148 = getelementptr inbounds float, float* %131, i64 %idxprom147, !dbg !6146
  %132 = load i32, i32* %idx, align 4, !dbg !6147
  %133 = load i32, i32* %size.addr, align 4, !dbg !6148
  call void @ff_acelp_interpolatef(float* %129, float* %arrayidx148, float* getelementptr inbounds ([32 x float], [32 x float]* @wmavoice_ipol2_coeffs, i32 0, i32 0), i32 4, i32 %132, i32 8, i32 %133), !dbg !6149
  br label %if.end156, !dbg !6150

if.else149:                                       ; preds = %if.else141
  %134 = load float*, float** %excitation.addr, align 8, !dbg !6151
  %135 = bitcast float* %134 to i8*, !dbg !6152
  %136 = load i32, i32* %block_pitch, align 4, !dbg !6153
  %conv150 = sext i32 %136 to i64, !dbg !6153
  %mul151 = mul i64 4, %conv150, !dbg !6154
  %conv152 = trunc i64 %mul151 to i32, !dbg !6155
  %137 = load i32, i32* %size.addr, align 4, !dbg !6156
  %conv153 = sext i32 %137 to i64, !dbg !6156
  %mul154 = mul i64 4, %conv153, !dbg !6157
  %conv155 = trunc i64 %mul154 to i32, !dbg !6158
  call void @av_memcpy_backptr(i8* %135, i32 %conv152, i32 %conv155), !dbg !6159
  br label %if.end156

if.end156:                                        ; preds = %if.else149, %if.then145
  br label %if.end157

if.end157:                                        ; preds = %if.end156, %for.end140
  %138 = load float*, float** %excitation.addr, align 8, !dbg !6160
  %139 = load float*, float** %excitation.addr, align 8, !dbg !6161
  %arraydecay158 = getelementptr inbounds [80 x float], [80 x float]* %pulses, i32 0, i32 0, !dbg !6162
  %140 = load float, float* %acb_gain, align 4, !dbg !6163
  %141 = load float, float* %fcb_gain, align 4, !dbg !6164
  %142 = load i32, i32* %size.addr, align 4, !dbg !6165
  call void @ff_weighted_vector_sumf(float* %138, float* %139, float* %arraydecay158, float %140, float %141, i32 %142), !dbg !6166
  br label %return, !dbg !6167

return:                                           ; preds = %if.end157, %for.end
  ret void, !dbg !6168
}

declare void @ff_celp_lp_synthesis_filterf(float*, float*, float*, i32, i32) #3

; Function Attrs: nounwind uwtable
define internal i32 @pRNG(i32 %frame_cntr, i32 %block_num, i32 %block_size) #1 !dbg !1996 {
entry:
  %a.addr.i12 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i12, metadata !6169, metadata !2040), !dbg !6174
  %b.addr.i13 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr.i13, metadata !6176, metadata !2040), !dbg !6177
  %a.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i, metadata !6178, metadata !2040), !dbg !6182
  %b.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr.i, metadata !6184, metadata !2040), !dbg !6185
  %frame_cntr.addr = alloca i32, align 4
  %block_num.addr = alloca i32, align 4
  %block_size.addr = alloca i32, align 4
  %z = alloca i32, align 4
  %y = alloca i32, align 4
  %x = alloca i32, align 4
  store i32 %frame_cntr, i32* %frame_cntr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %frame_cntr.addr, metadata !6186, metadata !2040), !dbg !6187
  store i32 %block_num, i32* %block_num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %block_num.addr, metadata !6188, metadata !2040), !dbg !6189
  store i32 %block_size, i32* %block_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %block_size.addr, metadata !6190, metadata !2040), !dbg !6191
  call void @llvm.dbg.declare(metadata i32* %z, metadata !6192, metadata !2040), !dbg !6193
  call void @llvm.dbg.declare(metadata i32* %y, metadata !6194, metadata !2040), !dbg !6195
  call void @llvm.dbg.declare(metadata i32* %x, metadata !6196, metadata !2040), !dbg !6197
  %0 = load i32, i32* %block_num.addr, align 4, !dbg !6198
  %mul = mul nsw i32 %0, 1877, !dbg !6199
  %1 = load i32, i32* %frame_cntr.addr, align 4, !dbg !6200
  %add = add nsw i32 %mul, %1, !dbg !6201
  store i32 %add, i32* %x, align 4, !dbg !6197
  %2 = load i32, i32* %x, align 4, !dbg !6202
  %cmp = icmp uge i32 %2, 65535, !dbg !6204
  br i1 %cmp, label %if.then, label %if.end, !dbg !6205

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %x, align 4, !dbg !6206
  %sub = sub i32 %3, 65535, !dbg !6206
  store i32 %sub, i32* %x, align 4, !dbg !6206
  br label %if.end, !dbg !6208

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %x, align 4, !dbg !6209
  %5 = load i32, i32* %x, align 4, !dbg !6210
  store i32 477218589, i32* %a.addr.i, align 4, !dbg !6211
  store i32 %5, i32* %b.addr.i, align 4, !dbg !6211
  %6 = load i32, i32* %a.addr.i, align 4, !dbg !6212
  %conv.i = sext i32 %6 to i64, !dbg !6213
  %7 = load i32, i32* %b.addr.i, align 4, !dbg !6214
  %conv1.i = sext i32 %7 to i64, !dbg !6215
  %mul.i = mul nsw i64 %conv.i, %conv1.i, !dbg !6216
  %shr.i = ashr i64 %mul.i, 32, !dbg !6217
  %conv2.i = trunc i64 %shr.i to i32, !dbg !6218
  %mul1 = mul nsw i32 9, %conv2.i, !dbg !6219
  %sub2 = sub i32 %4, %mul1, !dbg !6220
  store i32 %sub2, i32* %y, align 4, !dbg !6221
  %8 = load i32, i32* %x, align 4, !dbg !6222
  %9 = load i32, i32* %y, align 4, !dbg !6223
  %idxprom = zext i32 %9 to i64, !dbg !6224
  %arrayidx = getelementptr inbounds [9 x [2 x i32]], [9 x [2 x i32]]* @pRNG.div_tbl, i64 0, i64 %idxprom, !dbg !6224
  %arrayidx3 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx, i64 0, i64 0, !dbg !6224
  %10 = load i32, i32* %arrayidx3, align 8, !dbg !6224
  %mul4 = mul i32 %8, %10, !dbg !6225
  %11 = load i32, i32* %x, align 4, !dbg !6226
  %12 = load i32, i32* %y, align 4, !dbg !6227
  %idxprom5 = zext i32 %12 to i64, !dbg !6228
  %arrayidx6 = getelementptr inbounds [9 x [2 x i32]], [9 x [2 x i32]]* @pRNG.div_tbl, i64 0, i64 %idxprom5, !dbg !6228
  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %arrayidx6, i64 0, i64 1, !dbg !6228
  %13 = load i32, i32* %arrayidx7, align 4, !dbg !6228
  store i32 %11, i32* %a.addr.i12, align 4, !dbg !6229
  store i32 %13, i32* %b.addr.i13, align 4, !dbg !6229
  %14 = load i32, i32* %a.addr.i12, align 4, !dbg !6230
  %conv.i14 = zext i32 %14 to i64, !dbg !6231
  %15 = load i32, i32* %b.addr.i13, align 4, !dbg !6232
  %conv1.i15 = zext i32 %15 to i64, !dbg !6233
  %mul.i16 = mul i64 %conv.i14, %conv1.i15, !dbg !6234
  %shr.i17 = lshr i64 %mul.i16, 32, !dbg !6235
  %conv2.i18 = trunc i64 %shr.i17 to i32, !dbg !6236
  %add9 = add i32 %mul4, %conv2.i18, !dbg !6237
  %conv = trunc i32 %add9 to i16, !dbg !6238
  %conv10 = zext i16 %conv to i32, !dbg !6238
  store i32 %conv10, i32* %z, align 4, !dbg !6239
  %16 = load i32, i32* %z, align 4, !dbg !6240
  %17 = load i32, i32* %block_size.addr, align 4, !dbg !6241
  %sub11 = sub nsw i32 1000, %17, !dbg !6242
  %rem = urem i32 %16, %sub11, !dbg !6243
  ret i32 %rem, !dbg !6244
}

; Function Attrs: nounwind uwtable
define internal void @aw_pulse_set1(%struct.WMAVoiceContext* %s, %struct.GetBitContext* %gb, i32 %block_idx, %struct.AMRFixed* %fcb) #1 !dbg !6245 {
entry:
  %s.addr = alloca %struct.WMAVoiceContext*, align 8
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %block_idx.addr = alloca i32, align 4
  %fcb.addr = alloca %struct.AMRFixed*, align 8
  %val = alloca i32, align 4
  %v = alloca float, align 4
  %n = alloca i32, align 4
  %v_mask = alloca i32, align 4
  %i_mask = alloca i32, align 4
  %sh = alloca i32, align 4
  %n_pulses = alloca i32, align 4
  %num2 = alloca i32, align 4
  %delta = alloca i32, align 4
  %idx = alloca i32, align 4
  store %struct.WMAVoiceContext* %s, %struct.WMAVoiceContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s.addr, metadata !6249, metadata !2040), !dbg !6250
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !6251, metadata !2040), !dbg !6252
  store i32 %block_idx, i32* %block_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %block_idx.addr, metadata !6253, metadata !2040), !dbg !6254
  store %struct.AMRFixed* %fcb, %struct.AMRFixed** %fcb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AMRFixed** %fcb.addr, metadata !6255, metadata !2040), !dbg !6256
  call void @llvm.dbg.declare(metadata i32* %val, metadata !6257, metadata !2040), !dbg !6258
  %0 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !6259
  %1 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6260
  %aw_idx_is_ext = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %1, i32 0, i32 30, !dbg !6261
  %2 = load i32, i32* %aw_idx_is_ext, align 16, !dbg !6261
  %tobool = icmp ne i32 %2, 0, !dbg !6260
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6262

land.rhs:                                         ; preds = %entry
  %3 = load i32, i32* %block_idx.addr, align 4, !dbg !6263
  %tobool1 = icmp ne i32 %3, 0, !dbg !6265
  %lnot = xor i1 %tobool1, true, !dbg !6265
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ]
  %land.ext = zext i1 %4 to i32, !dbg !6266
  %mul = mul nsw i32 2, %land.ext, !dbg !6268
  %sub = sub nsw i32 12, %mul, !dbg !6269
  %call = call i32 @get_bits(%struct.GetBitContext* %0, i32 %sub), !dbg !6270
  store i32 %call, i32* %val, align 4, !dbg !6271
  call void @llvm.dbg.declare(metadata float* %v, metadata !6272, metadata !2040), !dbg !6273
  %5 = load i32, i32* %block_idx.addr, align 4, !dbg !6274
  %idxprom = sext i32 %5 to i64, !dbg !6276
  %6 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6276
  %aw_n_pulses = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %6, i32 0, i32 32, !dbg !6277
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %aw_n_pulses, i64 0, i64 %idxprom, !dbg !6276
  %7 = load i32, i32* %arrayidx, align 4, !dbg !6276
  %cmp = icmp sgt i32 %7, 0, !dbg !6278
  br i1 %cmp, label %if.then, label %if.else38, !dbg !6279

if.then:                                          ; preds = %land.end
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6280, metadata !2040), !dbg !6282
  call void @llvm.dbg.declare(metadata i32* %v_mask, metadata !6283, metadata !2040), !dbg !6284
  call void @llvm.dbg.declare(metadata i32* %i_mask, metadata !6285, metadata !2040), !dbg !6286
  call void @llvm.dbg.declare(metadata i32* %sh, metadata !6287, metadata !2040), !dbg !6288
  call void @llvm.dbg.declare(metadata i32* %n_pulses, metadata !6289, metadata !2040), !dbg !6290
  %8 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6291
  %aw_pulse_range = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %8, i32 0, i32 31, !dbg !6293
  %9 = load i32, i32* %aw_pulse_range, align 4, !dbg !6293
  %cmp2 = icmp eq i32 %9, 24, !dbg !6294
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !6295

if.then3:                                         ; preds = %if.then
  store i32 3, i32* %n_pulses, align 4, !dbg !6296
  store i32 8, i32* %v_mask, align 4, !dbg !6298
  store i32 7, i32* %i_mask, align 4, !dbg !6299
  store i32 4, i32* %sh, align 4, !dbg !6300
  br label %if.end, !dbg !6301

if.else:                                          ; preds = %if.then
  store i32 4, i32* %n_pulses, align 4, !dbg !6302
  store i32 4, i32* %v_mask, align 4, !dbg !6304
  store i32 3, i32* %i_mask, align 4, !dbg !6305
  store i32 3, i32* %sh, align 4, !dbg !6306
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  %10 = load i32, i32* %n_pulses, align 4, !dbg !6307
  %sub4 = sub nsw i32 %10, 1, !dbg !6309
  store i32 %sub4, i32* %n, align 4, !dbg !6310
  br label %for.cond, !dbg !6311

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = load i32, i32* %n, align 4, !dbg !6312
  %cmp5 = icmp sge i32 %11, 0, !dbg !6315
  br i1 %cmp5, label %for.body, label %for.end, !dbg !6316

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %val, align 4, !dbg !6317
  %13 = load i32, i32* %v_mask, align 4, !dbg !6319
  %and = and i32 %12, %13, !dbg !6320
  %tobool6 = icmp ne i32 %and, 0, !dbg !6321
  %cond = select i1 %tobool6, double -1.000000e+00, double 1.000000e+00, !dbg !6321
  %conv = fptrunc double %cond to float, !dbg !6321
  %14 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6322
  %n7 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %14, i32 0, i32 0, !dbg !6323
  %15 = load i32, i32* %n7, align 4, !dbg !6323
  %idxprom8 = sext i32 %15 to i64, !dbg !6324
  %16 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6324
  %y = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %16, i32 0, i32 2, !dbg !6325
  %arrayidx9 = getelementptr inbounds [10 x float], [10 x float]* %y, i64 0, i64 %idxprom8, !dbg !6324
  store float %conv, float* %arrayidx9, align 4, !dbg !6326
  %17 = load i32, i32* %val, align 4, !dbg !6327
  %18 = load i32, i32* %i_mask, align 4, !dbg !6328
  %and10 = and i32 %17, %18, !dbg !6329
  %19 = load i32, i32* %n_pulses, align 4, !dbg !6330
  %mul11 = mul nsw i32 %and10, %19, !dbg !6331
  %20 = load i32, i32* %n, align 4, !dbg !6332
  %add = add nsw i32 %mul11, %20, !dbg !6333
  %21 = load i32, i32* %block_idx.addr, align 4, !dbg !6334
  %idxprom12 = sext i32 %21 to i64, !dbg !6335
  %22 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6335
  %aw_first_pulse_off = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %22, i32 0, i32 33, !dbg !6336
  %arrayidx13 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_first_pulse_off, i64 0, i64 %idxprom12, !dbg !6335
  %23 = load i32, i32* %arrayidx13, align 4, !dbg !6335
  %add14 = add nsw i32 %add, %23, !dbg !6337
  %24 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6338
  %n15 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %24, i32 0, i32 0, !dbg !6339
  %25 = load i32, i32* %n15, align 4, !dbg !6339
  %idxprom16 = sext i32 %25 to i64, !dbg !6340
  %26 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6340
  %x = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %26, i32 0, i32 1, !dbg !6341
  %arrayidx17 = getelementptr inbounds [10 x i32], [10 x i32]* %x, i64 0, i64 %idxprom16, !dbg !6340
  store i32 %add14, i32* %arrayidx17, align 4, !dbg !6342
  br label %while.cond, !dbg !6343

while.cond:                                       ; preds = %while.body, %for.body
  %27 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6344
  %n18 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %27, i32 0, i32 0, !dbg !6346
  %28 = load i32, i32* %n18, align 4, !dbg !6346
  %idxprom19 = sext i32 %28 to i64, !dbg !6347
  %29 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6347
  %x20 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %29, i32 0, i32 1, !dbg !6348
  %arrayidx21 = getelementptr inbounds [10 x i32], [10 x i32]* %x20, i64 0, i64 %idxprom19, !dbg !6347
  %30 = load i32, i32* %arrayidx21, align 4, !dbg !6347
  %cmp22 = icmp slt i32 %30, 0, !dbg !6349
  br i1 %cmp22, label %while.body, label %while.end, !dbg !6350

while.body:                                       ; preds = %while.cond
  %31 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6351
  %pitch_lag = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %31, i32 0, i32 4, !dbg !6352
  %32 = load i32, i32* %pitch_lag, align 4, !dbg !6352
  %33 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6353
  %n24 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %33, i32 0, i32 0, !dbg !6354
  %34 = load i32, i32* %n24, align 4, !dbg !6354
  %idxprom25 = sext i32 %34 to i64, !dbg !6355
  %35 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6355
  %x26 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %35, i32 0, i32 1, !dbg !6356
  %arrayidx27 = getelementptr inbounds [10 x i32], [10 x i32]* %x26, i64 0, i64 %idxprom25, !dbg !6355
  %36 = load i32, i32* %arrayidx27, align 4, !dbg !6357
  %add28 = add nsw i32 %36, %32, !dbg !6357
  store i32 %add28, i32* %arrayidx27, align 4, !dbg !6357
  br label %while.cond, !dbg !6358, !llvm.loop !6360

while.end:                                        ; preds = %while.cond
  %37 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6361
  %n29 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %37, i32 0, i32 0, !dbg !6363
  %38 = load i32, i32* %n29, align 4, !dbg !6363
  %idxprom30 = sext i32 %38 to i64, !dbg !6364
  %39 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6364
  %x31 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %39, i32 0, i32 1, !dbg !6365
  %arrayidx32 = getelementptr inbounds [10 x i32], [10 x i32]* %x31, i64 0, i64 %idxprom30, !dbg !6364
  %40 = load i32, i32* %arrayidx32, align 4, !dbg !6364
  %cmp33 = icmp slt i32 %40, 80, !dbg !6366
  br i1 %cmp33, label %if.then35, label %if.end37, !dbg !6367

if.then35:                                        ; preds = %while.end
  %41 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6368
  %n36 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %41, i32 0, i32 0, !dbg !6369
  %42 = load i32, i32* %n36, align 4, !dbg !6370
  %inc = add nsw i32 %42, 1, !dbg !6370
  store i32 %inc, i32* %n36, align 4, !dbg !6370
  br label %if.end37, !dbg !6368

if.end37:                                         ; preds = %if.then35, %while.end
  br label %for.inc, !dbg !6371

for.inc:                                          ; preds = %if.end37
  %43 = load i32, i32* %n, align 4, !dbg !6372
  %dec = add nsw i32 %43, -1, !dbg !6372
  store i32 %dec, i32* %n, align 4, !dbg !6372
  %44 = load i32, i32* %sh, align 4, !dbg !6374
  %45 = load i32, i32* %val, align 4, !dbg !6375
  %shr = ashr i32 %45, %44, !dbg !6375
  store i32 %shr, i32* %val, align 4, !dbg !6375
  br label %for.cond, !dbg !6376, !llvm.loop !6377

for.end:                                          ; preds = %for.cond
  br label %if.end93, !dbg !6379

if.else38:                                        ; preds = %land.end
  call void @llvm.dbg.declare(metadata i32* %num2, metadata !6380, metadata !2040), !dbg !6382
  %46 = load i32, i32* %val, align 4, !dbg !6383
  %and39 = and i32 %46, 511, !dbg !6384
  %shr40 = ashr i32 %and39, 1, !dbg !6385
  store i32 %shr40, i32* %num2, align 4, !dbg !6382
  call void @llvm.dbg.declare(metadata i32* %delta, metadata !6386, metadata !2040), !dbg !6387
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !6388, metadata !2040), !dbg !6389
  %47 = load i32, i32* %num2, align 4, !dbg !6390
  %cmp41 = icmp slt i32 %47, 79, !dbg !6392
  br i1 %cmp41, label %if.then43, label %if.else45, !dbg !6393

if.then43:                                        ; preds = %if.else38
  store i32 1, i32* %delta, align 4, !dbg !6394
  %48 = load i32, i32* %num2, align 4, !dbg !6397
  %add44 = add nsw i32 %48, 1, !dbg !6398
  store i32 %add44, i32* %idx, align 4, !dbg !6399
  br label %if.end62, !dbg !6400

if.else45:                                        ; preds = %if.else38
  %49 = load i32, i32* %num2, align 4, !dbg !6401
  %cmp46 = icmp slt i32 %49, 156, !dbg !6403
  br i1 %cmp46, label %if.then48, label %if.else51, !dbg !6404

if.then48:                                        ; preds = %if.else45
  store i32 3, i32* %delta, align 4, !dbg !6405
  %50 = load i32, i32* %num2, align 4, !dbg !6408
  %add49 = add nsw i32 %50, 1, !dbg !6409
  %sub50 = sub nsw i32 %add49, 77, !dbg !6410
  store i32 %sub50, i32* %idx, align 4, !dbg !6411
  br label %if.end61, !dbg !6412

if.else51:                                        ; preds = %if.else45
  %51 = load i32, i32* %num2, align 4, !dbg !6413
  %cmp52 = icmp slt i32 %51, 231, !dbg !6415
  br i1 %cmp52, label %if.then54, label %if.else57, !dbg !6416

if.then54:                                        ; preds = %if.else51
  store i32 5, i32* %delta, align 4, !dbg !6417
  %52 = load i32, i32* %num2, align 4, !dbg !6420
  %add55 = add nsw i32 %52, 1, !dbg !6421
  %sub56 = sub nsw i32 %add55, 152, !dbg !6422
  store i32 %sub56, i32* %idx, align 4, !dbg !6423
  br label %if.end60, !dbg !6424

if.else57:                                        ; preds = %if.else51
  store i32 7, i32* %delta, align 4, !dbg !6425
  %53 = load i32, i32* %num2, align 4, !dbg !6427
  %add58 = add nsw i32 %53, 1, !dbg !6428
  %sub59 = sub nsw i32 %add58, 225, !dbg !6429
  store i32 %sub59, i32* %idx, align 4, !dbg !6430
  br label %if.end60

if.end60:                                         ; preds = %if.else57, %if.then54
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then48
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.then43
  %54 = load i32, i32* %val, align 4, !dbg !6431
  %and63 = and i32 %54, 512, !dbg !6432
  %tobool64 = icmp ne i32 %and63, 0, !dbg !6433
  %cond65 = select i1 %tobool64, double -1.000000e+00, double 1.000000e+00, !dbg !6433
  %conv66 = fptrunc double %cond65 to float, !dbg !6433
  store float %conv66, float* %v, align 4, !dbg !6434
  %55 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6435
  %n67 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %55, i32 0, i32 0, !dbg !6436
  %56 = load i32, i32* %n67, align 4, !dbg !6436
  %shl = shl i32 3, %56, !dbg !6437
  %57 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6438
  %no_repeat_mask = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %57, i32 0, i32 3, !dbg !6439
  %58 = load i32, i32* %no_repeat_mask, align 4, !dbg !6440
  %or = or i32 %58, %shl, !dbg !6440
  store i32 %or, i32* %no_repeat_mask, align 4, !dbg !6440
  %59 = load i32, i32* %idx, align 4, !dbg !6441
  %60 = load i32, i32* %delta, align 4, !dbg !6442
  %sub68 = sub nsw i32 %59, %60, !dbg !6443
  %61 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6444
  %n69 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %61, i32 0, i32 0, !dbg !6445
  %62 = load i32, i32* %n69, align 4, !dbg !6445
  %idxprom70 = sext i32 %62 to i64, !dbg !6446
  %63 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6446
  %x71 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %63, i32 0, i32 1, !dbg !6447
  %arrayidx72 = getelementptr inbounds [10 x i32], [10 x i32]* %x71, i64 0, i64 %idxprom70, !dbg !6446
  store i32 %sub68, i32* %arrayidx72, align 4, !dbg !6448
  %64 = load float, float* %v, align 4, !dbg !6449
  %65 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6450
  %n73 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %65, i32 0, i32 0, !dbg !6451
  %66 = load i32, i32* %n73, align 4, !dbg !6451
  %idxprom74 = sext i32 %66 to i64, !dbg !6452
  %67 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6452
  %y75 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %67, i32 0, i32 2, !dbg !6453
  %arrayidx76 = getelementptr inbounds [10 x float], [10 x float]* %y75, i64 0, i64 %idxprom74, !dbg !6452
  store float %64, float* %arrayidx76, align 4, !dbg !6454
  %68 = load i32, i32* %idx, align 4, !dbg !6455
  %69 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6456
  %n77 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %69, i32 0, i32 0, !dbg !6457
  %70 = load i32, i32* %n77, align 4, !dbg !6457
  %add78 = add nsw i32 %70, 1, !dbg !6458
  %idxprom79 = sext i32 %add78 to i64, !dbg !6459
  %71 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6459
  %x80 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %71, i32 0, i32 1, !dbg !6460
  %arrayidx81 = getelementptr inbounds [10 x i32], [10 x i32]* %x80, i64 0, i64 %idxprom79, !dbg !6459
  store i32 %68, i32* %arrayidx81, align 4, !dbg !6461
  %72 = load i32, i32* %val, align 4, !dbg !6462
  %and82 = and i32 %72, 1, !dbg !6463
  %tobool83 = icmp ne i32 %and82, 0, !dbg !6463
  br i1 %tobool83, label %cond.true, label %cond.false, !dbg !6464

cond.true:                                        ; preds = %if.end62
  %73 = load float, float* %v, align 4, !dbg !6465
  %sub84 = fsub float -0.000000e+00, %73, !dbg !6467
  br label %cond.end, !dbg !6468

cond.false:                                       ; preds = %if.end62
  %74 = load float, float* %v, align 4, !dbg !6469
  br label %cond.end, !dbg !6471

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond85 = phi float [ %sub84, %cond.true ], [ %74, %cond.false ], !dbg !6472
  %75 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6474
  %n86 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %75, i32 0, i32 0, !dbg !6475
  %76 = load i32, i32* %n86, align 4, !dbg !6475
  %add87 = add nsw i32 %76, 1, !dbg !6476
  %idxprom88 = sext i32 %add87 to i64, !dbg !6477
  %77 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6477
  %y89 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %77, i32 0, i32 2, !dbg !6478
  %arrayidx90 = getelementptr inbounds [10 x float], [10 x float]* %y89, i64 0, i64 %idxprom88, !dbg !6477
  store float %cond85, float* %arrayidx90, align 4, !dbg !6479
  %78 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6480
  %n91 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %78, i32 0, i32 0, !dbg !6481
  %79 = load i32, i32* %n91, align 4, !dbg !6482
  %add92 = add nsw i32 %79, 2, !dbg !6482
  store i32 %add92, i32* %n91, align 4, !dbg !6482
  br label %if.end93

if.end93:                                         ; preds = %cond.end, %for.end
  ret void, !dbg !6483
}

; Function Attrs: nounwind uwtable
define internal i32 @aw_pulse_set2(%struct.WMAVoiceContext* %s, %struct.GetBitContext* %gb, i32 %block_idx, %struct.AMRFixed* %fcb) #1 !dbg !6484 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.WMAVoiceContext*, align 8
  %gb.addr = alloca %struct.GetBitContext*, align 8
  %block_idx.addr = alloca i32, align 4
  %fcb.addr = alloca %struct.AMRFixed*, align 8
  %use_mask_mem = alloca [9 x i16], align 16
  %use_mask = alloca i16*, align 8
  %pulse_off = alloca i32, align 4
  %pulse_start = alloca i32, align 4
  %n = alloca i32, align 4
  %idx = alloca i32, align 4
  %range = alloca i32, align 4
  %aidx = alloca i32, align 4
  %start_off = alloca i32, align 4
  %excl_range = alloca i32, align 4
  %use_mask_ptr = alloca i16*, align 8
  %first_sh = alloca i32, align 4
  store %struct.WMAVoiceContext* %s, %struct.WMAVoiceContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s.addr, metadata !6487, metadata !2040), !dbg !6488
  store %struct.GetBitContext* %gb, %struct.GetBitContext** %gb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.GetBitContext** %gb.addr, metadata !6489, metadata !2040), !dbg !6490
  store i32 %block_idx, i32* %block_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %block_idx.addr, metadata !6491, metadata !2040), !dbg !6492
  store %struct.AMRFixed* %fcb, %struct.AMRFixed** %fcb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AMRFixed** %fcb.addr, metadata !6493, metadata !2040), !dbg !6494
  call void @llvm.dbg.declare(metadata [9 x i16]* %use_mask_mem, metadata !6495, metadata !2040), !dbg !6498
  call void @llvm.dbg.declare(metadata i16** %use_mask, metadata !6499, metadata !2040), !dbg !6500
  %arraydecay = getelementptr inbounds [9 x i16], [9 x i16]* %use_mask_mem, i32 0, i32 0, !dbg !6501
  %add.ptr = getelementptr inbounds i16, i16* %arraydecay, i64 2, !dbg !6502
  store i16* %add.ptr, i16** %use_mask, align 8, !dbg !6500
  call void @llvm.dbg.declare(metadata i32* %pulse_off, metadata !6503, metadata !2040), !dbg !6504
  %0 = load i32, i32* %block_idx.addr, align 4, !dbg !6505
  %idxprom = sext i32 %0 to i64, !dbg !6506
  %1 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6506
  %aw_first_pulse_off = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %1, i32 0, i32 33, !dbg !6507
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %aw_first_pulse_off, i64 0, i64 %idxprom, !dbg !6506
  %2 = load i32, i32* %arrayidx, align 4, !dbg !6506
  store i32 %2, i32* %pulse_off, align 4, !dbg !6504
  call void @llvm.dbg.declare(metadata i32* %pulse_start, metadata !6508, metadata !2040), !dbg !6509
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6510, metadata !2040), !dbg !6511
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !6512, metadata !2040), !dbg !6513
  call void @llvm.dbg.declare(metadata i32* %range, metadata !6514, metadata !2040), !dbg !6515
  call void @llvm.dbg.declare(metadata i32* %aidx, metadata !6516, metadata !2040), !dbg !6517
  call void @llvm.dbg.declare(metadata i32* %start_off, metadata !6518, metadata !2040), !dbg !6519
  store i32 0, i32* %start_off, align 4, !dbg !6519
  %3 = load i32, i32* %block_idx.addr, align 4, !dbg !6520
  %idxprom1 = sext i32 %3 to i64, !dbg !6522
  %4 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6522
  %aw_n_pulses = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %4, i32 0, i32 32, !dbg !6523
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_n_pulses, i64 0, i64 %idxprom1, !dbg !6522
  %5 = load i32, i32* %arrayidx2, align 4, !dbg !6522
  %cmp = icmp sgt i32 %5, 0, !dbg !6524
  br i1 %cmp, label %if.then, label %if.end, !dbg !6525

if.then:                                          ; preds = %entry
  br label %while.cond, !dbg !6526

while.cond:                                       ; preds = %while.body, %if.then
  %6 = load i32, i32* %pulse_off, align 4, !dbg !6527
  %7 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6529
  %aw_pulse_range = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %7, i32 0, i32 31, !dbg !6530
  %8 = load i32, i32* %aw_pulse_range, align 4, !dbg !6530
  %add = add nsw i32 %6, %8, !dbg !6531
  %cmp3 = icmp slt i32 %add, 1, !dbg !6532
  br i1 %cmp3, label %while.body, label %while.end, !dbg !6533

while.body:                                       ; preds = %while.cond
  %9 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6534
  %pitch_lag = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %9, i32 0, i32 4, !dbg !6535
  %10 = load i32, i32* %pitch_lag, align 4, !dbg !6535
  %11 = load i32, i32* %pulse_off, align 4, !dbg !6536
  %add4 = add nsw i32 %11, %10, !dbg !6536
  store i32 %add4, i32* %pulse_off, align 4, !dbg !6536
  br label %while.cond, !dbg !6537, !llvm.loop !6539

while.end:                                        ; preds = %while.cond
  br label %if.end, !dbg !6540

if.end:                                           ; preds = %while.end, %entry
  %12 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6542
  %aw_n_pulses5 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %12, i32 0, i32 32, !dbg !6544
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_n_pulses5, i64 0, i64 0, !dbg !6542
  %13 = load i32, i32* %arrayidx6, align 8, !dbg !6542
  %cmp7 = icmp sgt i32 %13, 0, !dbg !6545
  br i1 %cmp7, label %if.then8, label %if.else18, !dbg !6546

if.then8:                                         ; preds = %if.end
  %14 = load i32, i32* %block_idx.addr, align 4, !dbg !6547
  %cmp9 = icmp eq i32 %14, 0, !dbg !6550
  br i1 %cmp9, label %if.then10, label %if.else, !dbg !6551

if.then10:                                        ; preds = %if.then8
  store i32 32, i32* %range, align 4, !dbg !6552
  br label %if.end17, !dbg !6554

if.else:                                          ; preds = %if.then8
  store i32 8, i32* %range, align 4, !dbg !6555
  %15 = load i32, i32* %block_idx.addr, align 4, !dbg !6557
  %idxprom11 = sext i32 %15 to i64, !dbg !6559
  %16 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6559
  %aw_n_pulses12 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %16, i32 0, i32 32, !dbg !6560
  %arrayidx13 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_n_pulses12, i64 0, i64 %idxprom11, !dbg !6559
  %17 = load i32, i32* %arrayidx13, align 4, !dbg !6559
  %cmp14 = icmp sgt i32 %17, 0, !dbg !6561
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !6562

if.then15:                                        ; preds = %if.else
  %18 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6563
  %aw_next_pulse_off_cache = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %18, i32 0, i32 34, !dbg !6564
  %19 = load i32, i32* %aw_next_pulse_off_cache, align 8, !dbg !6564
  store i32 %19, i32* %pulse_off, align 4, !dbg !6565
  br label %if.end16, !dbg !6566

if.end16:                                         ; preds = %if.then15, %if.else
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.then10
  br label %if.end19, !dbg !6567

if.else18:                                        ; preds = %if.end
  store i32 16, i32* %range, align 4, !dbg !6568
  br label %if.end19

if.end19:                                         ; preds = %if.else18, %if.end17
  %20 = load i32, i32* %block_idx.addr, align 4, !dbg !6569
  %idxprom20 = sext i32 %20 to i64, !dbg !6570
  %21 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6570
  %aw_n_pulses21 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %21, i32 0, i32 32, !dbg !6571
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_n_pulses21, i64 0, i64 %idxprom20, !dbg !6570
  %22 = load i32, i32* %arrayidx22, align 4, !dbg !6570
  %cmp23 = icmp sgt i32 %22, 0, !dbg !6572
  br i1 %cmp23, label %cond.true, label %cond.false, !dbg !6570

cond.true:                                        ; preds = %if.end19
  %23 = load i32, i32* %pulse_off, align 4, !dbg !6573
  %24 = load i32, i32* %range, align 4, !dbg !6575
  %div = sdiv i32 %24, 2, !dbg !6576
  %sub = sub nsw i32 %23, %div, !dbg !6577
  br label %cond.end, !dbg !6578

cond.false:                                       ; preds = %if.end19
  br label %cond.end, !dbg !6579

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ], !dbg !6581
  store i32 %cond, i32* %pulse_start, align 4, !dbg !6583
  %25 = load i16*, i16** %use_mask, align 8, !dbg !6584
  %arrayidx24 = getelementptr inbounds i16, i16* %25, i64 -2, !dbg !6584
  %26 = bitcast i16* %arrayidx24 to i8*, !dbg !6585
  call void @llvm.memset.p0i8.i64(i8* %26, i8 0, i64 4, i32 2, i1 false), !dbg !6585
  %27 = load i16*, i16** %use_mask, align 8, !dbg !6586
  %28 = bitcast i16* %27 to i8*, !dbg !6587
  call void @llvm.memset.p0i8.i64(i8* %28, i8 -1, i64 10, i32 2, i1 false), !dbg !6587
  %29 = load i16*, i16** %use_mask, align 8, !dbg !6588
  %arrayidx25 = getelementptr inbounds i16, i16* %29, i64 5, !dbg !6588
  %30 = bitcast i16* %arrayidx25 to i8*, !dbg !6589
  call void @llvm.memset.p0i8.i64(i8* %30, i8 0, i64 4, i32 2, i1 false), !dbg !6589
  %31 = load i32, i32* %block_idx.addr, align 4, !dbg !6590
  %idxprom26 = sext i32 %31 to i64, !dbg !6592
  %32 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6592
  %aw_n_pulses27 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %32, i32 0, i32 32, !dbg !6593
  %arrayidx28 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_n_pulses27, i64 0, i64 %idxprom26, !dbg !6592
  %33 = load i32, i32* %arrayidx28, align 4, !dbg !6592
  %cmp29 = icmp sgt i32 %33, 0, !dbg !6594
  br i1 %cmp29, label %if.then30, label %if.end56, !dbg !6595

if.then30:                                        ; preds = %cond.end
  %34 = load i32, i32* %pulse_off, align 4, !dbg !6596
  store i32 %34, i32* %idx, align 4, !dbg !6598
  br label %for.cond, !dbg !6599

for.cond:                                         ; preds = %for.inc, %if.then30
  %35 = load i32, i32* %idx, align 4, !dbg !6600
  %cmp31 = icmp slt i32 %35, 80, !dbg !6603
  br i1 %cmp31, label %for.body, label %for.end, !dbg !6604

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %excl_range, metadata !6605, metadata !2040), !dbg !6607
  %36 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6608
  %aw_pulse_range32 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %36, i32 0, i32 31, !dbg !6609
  %37 = load i32, i32* %aw_pulse_range32, align 4, !dbg !6609
  store i32 %37, i32* %excl_range, align 4, !dbg !6607
  call void @llvm.dbg.declare(metadata i16** %use_mask_ptr, metadata !6610, metadata !2040), !dbg !6611
  %38 = load i32, i32* %idx, align 4, !dbg !6612
  %shr = ashr i32 %38, 4, !dbg !6613
  %idxprom33 = sext i32 %shr to i64, !dbg !6614
  %39 = load i16*, i16** %use_mask, align 8, !dbg !6614
  %arrayidx34 = getelementptr inbounds i16, i16* %39, i64 %idxprom33, !dbg !6614
  store i16* %arrayidx34, i16** %use_mask_ptr, align 8, !dbg !6611
  call void @llvm.dbg.declare(metadata i32* %first_sh, metadata !6615, metadata !2040), !dbg !6616
  %40 = load i32, i32* %idx, align 4, !dbg !6617
  %and = and i32 %40, 15, !dbg !6618
  %sub35 = sub nsw i32 16, %and, !dbg !6619
  store i32 %sub35, i32* %first_sh, align 4, !dbg !6616
  %41 = load i32, i32* %first_sh, align 4, !dbg !6620
  %shl = shl i32 65535, %41, !dbg !6621
  %42 = load i16*, i16** %use_mask_ptr, align 8, !dbg !6622
  %incdec.ptr = getelementptr inbounds i16, i16* %42, i32 1, !dbg !6622
  store i16* %incdec.ptr, i16** %use_mask_ptr, align 8, !dbg !6622
  %43 = load i16, i16* %42, align 2, !dbg !6623
  %conv = zext i16 %43 to i32, !dbg !6623
  %and36 = and i32 %conv, %shl, !dbg !6623
  %conv37 = trunc i32 %and36 to i16, !dbg !6623
  store i16 %conv37, i16* %42, align 2, !dbg !6623
  %44 = load i32, i32* %first_sh, align 4, !dbg !6624
  %45 = load i32, i32* %excl_range, align 4, !dbg !6625
  %sub38 = sub nsw i32 %45, %44, !dbg !6625
  store i32 %sub38, i32* %excl_range, align 4, !dbg !6625
  %46 = load i32, i32* %excl_range, align 4, !dbg !6626
  %cmp39 = icmp sge i32 %46, 16, !dbg !6628
  br i1 %cmp39, label %if.then41, label %if.else48, !dbg !6629

if.then41:                                        ; preds = %for.body
  %47 = load i16*, i16** %use_mask_ptr, align 8, !dbg !6630
  %incdec.ptr42 = getelementptr inbounds i16, i16* %47, i32 1, !dbg !6630
  store i16* %incdec.ptr42, i16** %use_mask_ptr, align 8, !dbg !6630
  store i16 0, i16* %47, align 2, !dbg !6632
  %48 = load i32, i32* %excl_range, align 4, !dbg !6633
  %sub43 = sub nsw i32 %48, 16, !dbg !6634
  %shr44 = ashr i32 65535, %sub43, !dbg !6635
  %49 = load i16*, i16** %use_mask_ptr, align 8, !dbg !6636
  %50 = load i16, i16* %49, align 2, !dbg !6637
  %conv45 = zext i16 %50 to i32, !dbg !6637
  %and46 = and i32 %conv45, %shr44, !dbg !6637
  %conv47 = trunc i32 %and46 to i16, !dbg !6637
  store i16 %conv47, i16* %49, align 2, !dbg !6637
  br label %if.end53, !dbg !6638

if.else48:                                        ; preds = %for.body
  %51 = load i32, i32* %excl_range, align 4, !dbg !6639
  %shr49 = ashr i32 65535, %51, !dbg !6640
  %52 = load i16*, i16** %use_mask_ptr, align 8, !dbg !6641
  %53 = load i16, i16* %52, align 2, !dbg !6642
  %conv50 = zext i16 %53 to i32, !dbg !6642
  %and51 = and i32 %conv50, %shr49, !dbg !6642
  %conv52 = trunc i32 %and51 to i16, !dbg !6642
  store i16 %conv52, i16* %52, align 2, !dbg !6642
  br label %if.end53

if.end53:                                         ; preds = %if.else48, %if.then41
  br label %for.inc, !dbg !6643

for.inc:                                          ; preds = %if.end53
  %54 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6644
  %pitch_lag54 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %54, i32 0, i32 4, !dbg !6646
  %55 = load i32, i32* %pitch_lag54, align 4, !dbg !6646
  %56 = load i32, i32* %idx, align 4, !dbg !6647
  %add55 = add nsw i32 %56, %55, !dbg !6647
  store i32 %add55, i32* %idx, align 4, !dbg !6647
  br label %for.cond, !dbg !6648, !llvm.loop !6649

for.end:                                          ; preds = %for.cond
  br label %if.end56, !dbg !6651

if.end56:                                         ; preds = %for.end, %cond.end
  %57 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !6653
  %58 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6654
  %aw_n_pulses57 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %58, i32 0, i32 32, !dbg !6655
  %arrayidx58 = getelementptr inbounds [2 x i32], [2 x i32]* %aw_n_pulses57, i64 0, i64 0, !dbg !6654
  %59 = load i32, i32* %arrayidx58, align 8, !dbg !6654
  %cmp59 = icmp sgt i32 %59, 0, !dbg !6656
  br i1 %cmp59, label %cond.true61, label %cond.false63, !dbg !6654

cond.true61:                                      ; preds = %if.end56
  %60 = load i32, i32* %block_idx.addr, align 4, !dbg !6657
  %mul = mul nsw i32 2, %60, !dbg !6658
  %sub62 = sub nsw i32 5, %mul, !dbg !6659
  br label %cond.end64, !dbg !6660

cond.false63:                                     ; preds = %if.end56
  br label %cond.end64, !dbg !6661

cond.end64:                                       ; preds = %cond.false63, %cond.true61
  %cond65 = phi i32 [ %sub62, %cond.true61 ], [ 4, %cond.false63 ], !dbg !6662
  %call = call i32 @get_bits(%struct.GetBitContext* %57, i32 %cond65), !dbg !6663
  store i32 %call, i32* %aidx, align 4, !dbg !6664
  store i32 0, i32* %n, align 4, !dbg !6665
  br label %for.cond66, !dbg !6667

for.cond66:                                       ; preds = %for.inc130, %cond.end64
  %61 = load i32, i32* %n, align 4, !dbg !6668
  %62 = load i32, i32* %aidx, align 4, !dbg !6671
  %cmp67 = icmp sle i32 %61, %62, !dbg !6672
  br i1 %cmp67, label %for.body69, label %for.end132, !dbg !6673

for.body69:                                       ; preds = %for.cond66
  %63 = load i32, i32* %pulse_start, align 4, !dbg !6674
  store i32 %63, i32* %idx, align 4, !dbg !6677
  br label %for.cond70, !dbg !6678

for.cond70:                                       ; preds = %for.inc74, %for.body69
  %64 = load i32, i32* %idx, align 4, !dbg !6679
  %cmp71 = icmp slt i32 %64, 0, !dbg !6682
  br i1 %cmp71, label %for.body73, label %for.end77, !dbg !6683

for.body73:                                       ; preds = %for.cond70
  br label %for.inc74, !dbg !6684

for.inc74:                                        ; preds = %for.body73
  %65 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6686
  %pitch_lag75 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %65, i32 0, i32 4, !dbg !6688
  %66 = load i32, i32* %pitch_lag75, align 4, !dbg !6688
  %67 = load i32, i32* %idx, align 4, !dbg !6689
  %add76 = add nsw i32 %67, %66, !dbg !6689
  store i32 %add76, i32* %idx, align 4, !dbg !6689
  br label %for.cond70, !dbg !6690, !llvm.loop !6691

for.end77:                                        ; preds = %for.cond70
  %68 = load i32, i32* %idx, align 4, !dbg !6693
  %cmp78 = icmp sge i32 %68, 80, !dbg !6695
  br i1 %cmp78, label %if.then80, label %if.end111, !dbg !6696

if.then80:                                        ; preds = %for.end77
  %69 = load i16*, i16** %use_mask, align 8, !dbg !6697
  %arrayidx81 = getelementptr inbounds i16, i16* %69, i64 0, !dbg !6697
  %70 = load i16, i16* %arrayidx81, align 2, !dbg !6697
  %tobool = icmp ne i16 %70, 0, !dbg !6697
  br i1 %tobool, label %if.then82, label %if.else83, !dbg !6700

if.then82:                                        ; preds = %if.then80
  store i32 15, i32* %idx, align 4, !dbg !6701
  br label %if.end104, !dbg !6703

if.else83:                                        ; preds = %if.then80
  %71 = load i16*, i16** %use_mask, align 8, !dbg !6704
  %arrayidx84 = getelementptr inbounds i16, i16* %71, i64 1, !dbg !6704
  %72 = load i16, i16* %arrayidx84, align 2, !dbg !6704
  %tobool85 = icmp ne i16 %72, 0, !dbg !6704
  br i1 %tobool85, label %if.then86, label %if.else87, !dbg !6706

if.then86:                                        ; preds = %if.else83
  store i32 31, i32* %idx, align 4, !dbg !6707
  br label %if.end103, !dbg !6709

if.else87:                                        ; preds = %if.else83
  %73 = load i16*, i16** %use_mask, align 8, !dbg !6710
  %arrayidx88 = getelementptr inbounds i16, i16* %73, i64 2, !dbg !6710
  %74 = load i16, i16* %arrayidx88, align 2, !dbg !6710
  %tobool89 = icmp ne i16 %74, 0, !dbg !6710
  br i1 %tobool89, label %if.then90, label %if.else91, !dbg !6712

if.then90:                                        ; preds = %if.else87
  store i32 47, i32* %idx, align 4, !dbg !6713
  br label %if.end102, !dbg !6715

if.else91:                                        ; preds = %if.else87
  %75 = load i16*, i16** %use_mask, align 8, !dbg !6716
  %arrayidx92 = getelementptr inbounds i16, i16* %75, i64 3, !dbg !6716
  %76 = load i16, i16* %arrayidx92, align 2, !dbg !6716
  %tobool93 = icmp ne i16 %76, 0, !dbg !6716
  br i1 %tobool93, label %if.then94, label %if.else95, !dbg !6718

if.then94:                                        ; preds = %if.else91
  store i32 63, i32* %idx, align 4, !dbg !6719
  br label %if.end101, !dbg !6721

if.else95:                                        ; preds = %if.else91
  %77 = load i16*, i16** %use_mask, align 8, !dbg !6722
  %arrayidx96 = getelementptr inbounds i16, i16* %77, i64 4, !dbg !6722
  %78 = load i16, i16* %arrayidx96, align 2, !dbg !6722
  %tobool97 = icmp ne i16 %78, 0, !dbg !6722
  br i1 %tobool97, label %if.then98, label %if.else99, !dbg !6724

if.then98:                                        ; preds = %if.else95
  store i32 79, i32* %idx, align 4, !dbg !6725
  br label %if.end100, !dbg !6727

if.else99:                                        ; preds = %if.else95
  store i32 -1, i32* %retval, align 4, !dbg !6728
  br label %return, !dbg !6728

if.end100:                                        ; preds = %if.then98
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %if.then94
  br label %if.end102

if.end102:                                        ; preds = %if.end101, %if.then90
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %if.then86
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.then82
  %79 = load i32, i32* %idx, align 4, !dbg !6729
  %shr105 = ashr i32 %79, 4, !dbg !6730
  %idxprom106 = sext i32 %shr105 to i64, !dbg !6731
  %80 = load i16*, i16** %use_mask, align 8, !dbg !6731
  %arrayidx107 = getelementptr inbounds i16, i16* %80, i64 %idxprom106, !dbg !6731
  %81 = load i16, i16* %arrayidx107, align 2, !dbg !6731
  %conv108 = zext i16 %81 to i32, !dbg !6732
  %or = or i32 %conv108, 1, !dbg !6733
  %82 = call i32 @llvm.ctlz.i32(i32 %or, i1 true), !dbg !6734
  %sub109 = sub nsw i32 31, %82, !dbg !6735
  %83 = load i32, i32* %idx, align 4, !dbg !6736
  %sub110 = sub nsw i32 %83, %sub109, !dbg !6736
  store i32 %sub110, i32* %idx, align 4, !dbg !6736
  br label %if.end111, !dbg !6737

if.end111:                                        ; preds = %if.end104, %for.end77
  %84 = load i32, i32* %idx, align 4, !dbg !6738
  %shr112 = ashr i32 %84, 4, !dbg !6740
  %idxprom113 = sext i32 %shr112 to i64, !dbg !6741
  %85 = load i16*, i16** %use_mask, align 8, !dbg !6741
  %arrayidx114 = getelementptr inbounds i16, i16* %85, i64 %idxprom113, !dbg !6741
  %86 = load i16, i16* %arrayidx114, align 2, !dbg !6741
  %conv115 = zext i16 %86 to i32, !dbg !6741
  %87 = load i32, i32* %idx, align 4, !dbg !6742
  %and116 = and i32 %87, 15, !dbg !6743
  %shr117 = ashr i32 32768, %and116, !dbg !6744
  %and118 = and i32 %conv115, %shr117, !dbg !6745
  %tobool119 = icmp ne i32 %and118, 0, !dbg !6745
  br i1 %tobool119, label %if.then120, label %if.end129, !dbg !6746

if.then120:                                       ; preds = %if.end111
  %88 = load i32, i32* %idx, align 4, !dbg !6747
  %and121 = and i32 %88, 15, !dbg !6749
  %shr122 = ashr i32 32768, %and121, !dbg !6750
  %neg = xor i32 %shr122, -1, !dbg !6751
  %89 = load i32, i32* %idx, align 4, !dbg !6752
  %shr123 = ashr i32 %89, 4, !dbg !6753
  %idxprom124 = sext i32 %shr123 to i64, !dbg !6754
  %90 = load i16*, i16** %use_mask, align 8, !dbg !6754
  %arrayidx125 = getelementptr inbounds i16, i16* %90, i64 %idxprom124, !dbg !6754
  %91 = load i16, i16* %arrayidx125, align 2, !dbg !6755
  %conv126 = zext i16 %91 to i32, !dbg !6755
  %and127 = and i32 %conv126, %neg, !dbg !6755
  %conv128 = trunc i32 %and127 to i16, !dbg !6755
  store i16 %conv128, i16* %arrayidx125, align 2, !dbg !6755
  %92 = load i32, i32* %n, align 4, !dbg !6756
  %inc = add nsw i32 %92, 1, !dbg !6756
  store i32 %inc, i32* %n, align 4, !dbg !6756
  %93 = load i32, i32* %idx, align 4, !dbg !6757
  store i32 %93, i32* %start_off, align 4, !dbg !6758
  br label %if.end129, !dbg !6759

if.end129:                                        ; preds = %if.then120, %if.end111
  br label %for.inc130, !dbg !6760

for.inc130:                                       ; preds = %if.end129
  %94 = load i32, i32* %pulse_start, align 4, !dbg !6761
  %inc131 = add nsw i32 %94, 1, !dbg !6761
  store i32 %inc131, i32* %pulse_start, align 4, !dbg !6761
  br label %for.cond66, !dbg !6763, !llvm.loop !6764

for.end132:                                       ; preds = %for.cond66
  %95 = load i32, i32* %start_off, align 4, !dbg !6766
  %96 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6767
  %n133 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %96, i32 0, i32 0, !dbg !6768
  %97 = load i32, i32* %n133, align 4, !dbg !6768
  %idxprom134 = sext i32 %97 to i64, !dbg !6769
  %98 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6769
  %x = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %98, i32 0, i32 1, !dbg !6770
  %arrayidx135 = getelementptr inbounds [10 x i32], [10 x i32]* %x, i64 0, i64 %idxprom134, !dbg !6769
  store i32 %95, i32* %arrayidx135, align 4, !dbg !6771
  %99 = load %struct.GetBitContext*, %struct.GetBitContext** %gb.addr, align 8, !dbg !6772
  %call136 = call i32 @get_bits1(%struct.GetBitContext* %99), !dbg !6773
  %tobool137 = icmp ne i32 %call136, 0, !dbg !6773
  %cond138 = select i1 %tobool137, double -1.000000e+00, double 1.000000e+00, !dbg !6773
  %conv139 = fptrunc double %cond138 to float, !dbg !6773
  %100 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6774
  %n140 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %100, i32 0, i32 0, !dbg !6775
  %101 = load i32, i32* %n140, align 4, !dbg !6775
  %idxprom141 = sext i32 %101 to i64, !dbg !6776
  %102 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6776
  %y = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %102, i32 0, i32 2, !dbg !6777
  %arrayidx142 = getelementptr inbounds [10 x float], [10 x float]* %y, i64 0, i64 %idxprom141, !dbg !6776
  store float %conv139, float* %arrayidx142, align 4, !dbg !6778
  %103 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6779
  %n143 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %103, i32 0, i32 0, !dbg !6780
  %104 = load i32, i32* %n143, align 4, !dbg !6781
  %inc144 = add nsw i32 %104, 1, !dbg !6781
  store i32 %inc144, i32* %n143, align 4, !dbg !6781
  %105 = load i32, i32* %start_off, align 4, !dbg !6782
  %sub145 = sub nsw i32 80, %105, !dbg !6783
  %106 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6784
  %pitch_lag146 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %106, i32 0, i32 4, !dbg !6785
  %107 = load i32, i32* %pitch_lag146, align 4, !dbg !6785
  %rem = srem i32 %sub145, %107, !dbg !6786
  store i32 %rem, i32* %n, align 4, !dbg !6787
  %108 = load i32, i32* %n, align 4, !dbg !6788
  %tobool147 = icmp ne i32 %108, 0, !dbg !6788
  br i1 %tobool147, label %cond.true148, label %cond.false151, !dbg !6788

cond.true148:                                     ; preds = %for.end132
  %109 = load %struct.AMRFixed*, %struct.AMRFixed** %fcb.addr, align 8, !dbg !6789
  %pitch_lag149 = getelementptr inbounds %struct.AMRFixed, %struct.AMRFixed* %109, i32 0, i32 4, !dbg !6790
  %110 = load i32, i32* %pitch_lag149, align 4, !dbg !6790
  %111 = load i32, i32* %n, align 4, !dbg !6791
  %sub150 = sub nsw i32 %110, %111, !dbg !6792
  br label %cond.end152, !dbg !6793

cond.false151:                                    ; preds = %for.end132
  br label %cond.end152, !dbg !6794

cond.end152:                                      ; preds = %cond.false151, %cond.true148
  %cond153 = phi i32 [ %sub150, %cond.true148 ], [ 0, %cond.false151 ], !dbg !6795
  %112 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6796
  %aw_next_pulse_off_cache154 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %112, i32 0, i32 34, !dbg !6797
  store i32 %cond153, i32* %aw_next_pulse_off_cache154, align 8, !dbg !6798
  store i32 0, i32* %retval, align 4, !dbg !6799
  br label %return, !dbg !6799

return:                                           ; preds = %cond.end152, %if.else99
  %113 = load i32, i32* %retval, align 4, !dbg !6800
  ret i32 %113, !dbg !6800
}

declare void @ff_set_fixed_vector(float*, %struct.AMRFixed*, float, i32) #3

; Function Attrs: nounwind
declare float @expf(float) #8

declare float @avpriv_scalarproduct_float_c(float*, float*, i32) #3

declare void @ff_acelp_interpolatef(float*, float*, float*, i32, i32, i32, i32) #3

declare void @av_memcpy_backptr(i8*, i32, i32) #3

declare void @ff_weighted_vector_sumf(float*, float*, float*, float, float, i32) #3

declare void @ff_celp_lp_zero_synthesis_filterf(float*, float*, float*, i32, i32) #3

; Function Attrs: nounwind uwtable
define internal i32 @kalman_smoothen(%struct.WMAVoiceContext* %s, i32 %pitch, float* %in, float* %out, i32 %size) #1 !dbg !6801 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.WMAVoiceContext*, align 8
  %pitch.addr = alloca i32, align 4
  %in.addr = alloca float*, align 8
  %out.addr = alloca float*, align 8
  %size.addr = alloca i32, align 4
  %n = alloca i32, align 4
  %optimal_gain = alloca float, align 4
  %dot = alloca float, align 4
  %ptr = alloca float*, align 8
  %end = alloca float*, align 8
  %best_hist_ptr = alloca float*, align 8
  store %struct.WMAVoiceContext* %s, %struct.WMAVoiceContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s.addr, metadata !6804, metadata !2040), !dbg !6805
  store i32 %pitch, i32* %pitch.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pitch.addr, metadata !6806, metadata !2040), !dbg !6807
  store float* %in, float** %in.addr, align 8
  call void @llvm.dbg.declare(metadata float** %in.addr, metadata !6808, metadata !2040), !dbg !6809
  store float* %out, float** %out.addr, align 8
  call void @llvm.dbg.declare(metadata float** %out.addr, metadata !6810, metadata !2040), !dbg !6811
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !6812, metadata !2040), !dbg !6813
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6814, metadata !2040), !dbg !6815
  call void @llvm.dbg.declare(metadata float* %optimal_gain, metadata !6816, metadata !2040), !dbg !6817
  store float 0.000000e+00, float* %optimal_gain, align 4, !dbg !6817
  call void @llvm.dbg.declare(metadata float* %dot, metadata !6818, metadata !2040), !dbg !6819
  call void @llvm.dbg.declare(metadata float** %ptr, metadata !6820, metadata !2040), !dbg !6821
  %0 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6822
  %min_pitch_val = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %0, i32 0, i32 11, !dbg !6823
  %1 = load i32, i32* %min_pitch_val, align 32, !dbg !6823
  %2 = load i32, i32* %pitch.addr, align 4, !dbg !6824
  %sub = sub nsw i32 %2, 3, !dbg !6825
  %cmp = icmp sgt i32 %1, %sub, !dbg !6826
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6827

cond.true:                                        ; preds = %entry
  %3 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6828
  %min_pitch_val1 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %3, i32 0, i32 11, !dbg !6830
  %4 = load i32, i32* %min_pitch_val1, align 32, !dbg !6830
  br label %cond.end, !dbg !6831

cond.false:                                       ; preds = %entry
  %5 = load i32, i32* %pitch.addr, align 4, !dbg !6832
  %sub2 = sub nsw i32 %5, 3, !dbg !6834
  br label %cond.end, !dbg !6835

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %4, %cond.true ], [ %sub2, %cond.false ], !dbg !6836
  %sub3 = sub nsw i32 0, %cond, !dbg !6838
  %idxprom = sext i32 %sub3 to i64, !dbg !6839
  %6 = load float*, float** %in.addr, align 8, !dbg !6839
  %arrayidx = getelementptr inbounds float, float* %6, i64 %idxprom, !dbg !6839
  store float* %arrayidx, float** %ptr, align 8, !dbg !6840
  call void @llvm.dbg.declare(metadata float** %end, metadata !6841, metadata !2040), !dbg !6842
  %7 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6843
  %max_pitch_val = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %7, i32 0, i32 12, !dbg !6844
  %8 = load i32, i32* %max_pitch_val, align 4, !dbg !6844
  %9 = load i32, i32* %pitch.addr, align 4, !dbg !6845
  %add = add nsw i32 %9, 3, !dbg !6846
  %cmp4 = icmp sgt i32 %8, %add, !dbg !6847
  br i1 %cmp4, label %cond.true5, label %cond.false7, !dbg !6848

cond.true5:                                       ; preds = %cond.end
  %10 = load i32, i32* %pitch.addr, align 4, !dbg !6849
  %add6 = add nsw i32 %10, 3, !dbg !6850
  br label %cond.end9, !dbg !6851

cond.false7:                                      ; preds = %cond.end
  %11 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6852
  %max_pitch_val8 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %11, i32 0, i32 12, !dbg !6853
  %12 = load i32, i32* %max_pitch_val8, align 4, !dbg !6853
  br label %cond.end9, !dbg !6854

cond.end9:                                        ; preds = %cond.false7, %cond.true5
  %cond10 = phi i32 [ %add6, %cond.true5 ], [ %12, %cond.false7 ], !dbg !6855
  %sub11 = sub nsw i32 0, %cond10, !dbg !6856
  %idxprom12 = sext i32 %sub11 to i64, !dbg !6857
  %13 = load float*, float** %in.addr, align 8, !dbg !6857
  %arrayidx13 = getelementptr inbounds float, float* %13, i64 %idxprom12, !dbg !6857
  store float* %arrayidx13, float** %end, align 8, !dbg !6858
  call void @llvm.dbg.declare(metadata float** %best_hist_ptr, metadata !6859, metadata !2040), !dbg !6860
  store float* null, float** %best_hist_ptr, align 8, !dbg !6860
  br label %do.body, !dbg !6861, !llvm.loop !6862

do.body:                                          ; preds = %do.cond, %cond.end9
  %14 = load float*, float** %in.addr, align 8, !dbg !6863
  %15 = load float*, float** %ptr, align 8, !dbg !6865
  %16 = load i32, i32* %size.addr, align 4, !dbg !6866
  %call = call float @avpriv_scalarproduct_float_c(float* %14, float* %15, i32 %16), !dbg !6867
  store float %call, float* %dot, align 4, !dbg !6868
  %17 = load float, float* %dot, align 4, !dbg !6869
  %18 = load float, float* %optimal_gain, align 4, !dbg !6871
  %cmp14 = fcmp ogt float %17, %18, !dbg !6872
  br i1 %cmp14, label %if.then, label %if.end, !dbg !6873

if.then:                                          ; preds = %do.body
  %19 = load float, float* %dot, align 4, !dbg !6874
  store float %19, float* %optimal_gain, align 4, !dbg !6876
  %20 = load float*, float** %ptr, align 8, !dbg !6877
  store float* %20, float** %best_hist_ptr, align 8, !dbg !6878
  br label %if.end, !dbg !6879

if.end:                                           ; preds = %if.then, %do.body
  br label %do.cond, !dbg !6880

do.cond:                                          ; preds = %if.end
  %21 = load float*, float** %ptr, align 8, !dbg !6881
  %incdec.ptr = getelementptr inbounds float, float* %21, i32 -1, !dbg !6881
  store float* %incdec.ptr, float** %ptr, align 8, !dbg !6881
  %22 = load float*, float** %end, align 8, !dbg !6882
  %cmp15 = icmp uge float* %incdec.ptr, %22, !dbg !6883
  br i1 %cmp15, label %do.body, label %do.end, !dbg !6884, !llvm.loop !6862

do.end:                                           ; preds = %do.cond
  %23 = load float, float* %optimal_gain, align 4, !dbg !6885
  %cmp16 = fcmp ole float %23, 0.000000e+00, !dbg !6887
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !6888

if.then17:                                        ; preds = %do.end
  store i32 -1, i32* %retval, align 4, !dbg !6889
  br label %return, !dbg !6889

if.end18:                                         ; preds = %do.end
  %24 = load float*, float** %best_hist_ptr, align 8, !dbg !6890
  %25 = load float*, float** %best_hist_ptr, align 8, !dbg !6891
  %26 = load i32, i32* %size.addr, align 4, !dbg !6892
  %call19 = call float @avpriv_scalarproduct_float_c(float* %24, float* %25, i32 %26), !dbg !6893
  store float %call19, float* %dot, align 4, !dbg !6894
  %27 = load float, float* %dot, align 4, !dbg !6895
  %cmp20 = fcmp ole float %27, 0.000000e+00, !dbg !6897
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !6898

if.then21:                                        ; preds = %if.end18
  store i32 -1, i32* %retval, align 4, !dbg !6899
  br label %return, !dbg !6899

if.end22:                                         ; preds = %if.end18
  %28 = load float, float* %optimal_gain, align 4, !dbg !6900
  %29 = load float, float* %dot, align 4, !dbg !6902
  %cmp23 = fcmp ole float %28, %29, !dbg !6903
  br i1 %cmp23, label %if.then24, label %if.else, !dbg !6904

if.then24:                                        ; preds = %if.end22
  %30 = load float, float* %dot, align 4, !dbg !6905
  %conv = fpext float %30 to double, !dbg !6905
  %31 = load float, float* %dot, align 4, !dbg !6907
  %conv25 = fpext float %31 to double, !dbg !6907
  %32 = load float, float* %optimal_gain, align 4, !dbg !6908
  %conv26 = fpext float %32 to double, !dbg !6908
  %mul = fmul double 6.000000e-01, %conv26, !dbg !6909
  %add27 = fadd double %conv25, %mul, !dbg !6910
  %div = fdiv double %conv, %add27, !dbg !6911
  %conv28 = fptrunc double %div to float, !dbg !6905
  store float %conv28, float* %dot, align 4, !dbg !6912
  br label %if.end29, !dbg !6913

if.else:                                          ; preds = %if.end22
  store float 6.250000e-01, float* %dot, align 4, !dbg !6914
  br label %if.end29

if.end29:                                         ; preds = %if.else, %if.then24
  store i32 0, i32* %n, align 4, !dbg !6915
  br label %for.cond, !dbg !6917

for.cond:                                         ; preds = %for.inc, %if.end29
  %33 = load i32, i32* %n, align 4, !dbg !6918
  %34 = load i32, i32* %size.addr, align 4, !dbg !6921
  %cmp30 = icmp slt i32 %33, %34, !dbg !6922
  br i1 %cmp30, label %for.body, label %for.end, !dbg !6923

for.body:                                         ; preds = %for.cond
  %35 = load i32, i32* %n, align 4, !dbg !6924
  %idxprom32 = sext i32 %35 to i64, !dbg !6925
  %36 = load float*, float** %best_hist_ptr, align 8, !dbg !6925
  %arrayidx33 = getelementptr inbounds float, float* %36, i64 %idxprom32, !dbg !6925
  %37 = load float, float* %arrayidx33, align 4, !dbg !6925
  %38 = load float, float* %dot, align 4, !dbg !6926
  %39 = load i32, i32* %n, align 4, !dbg !6927
  %idxprom34 = sext i32 %39 to i64, !dbg !6928
  %40 = load float*, float** %in.addr, align 8, !dbg !6928
  %arrayidx35 = getelementptr inbounds float, float* %40, i64 %idxprom34, !dbg !6928
  %41 = load float, float* %arrayidx35, align 4, !dbg !6928
  %42 = load i32, i32* %n, align 4, !dbg !6929
  %idxprom36 = sext i32 %42 to i64, !dbg !6930
  %43 = load float*, float** %best_hist_ptr, align 8, !dbg !6930
  %arrayidx37 = getelementptr inbounds float, float* %43, i64 %idxprom36, !dbg !6930
  %44 = load float, float* %arrayidx37, align 4, !dbg !6930
  %sub38 = fsub float %41, %44, !dbg !6931
  %mul39 = fmul float %38, %sub38, !dbg !6932
  %add40 = fadd float %37, %mul39, !dbg !6933
  %45 = load i32, i32* %n, align 4, !dbg !6934
  %idxprom41 = sext i32 %45 to i64, !dbg !6935
  %46 = load float*, float** %out.addr, align 8, !dbg !6935
  %arrayidx42 = getelementptr inbounds float, float* %46, i64 %idxprom41, !dbg !6935
  store float %add40, float* %arrayidx42, align 4, !dbg !6936
  br label %for.inc, !dbg !6935

for.inc:                                          ; preds = %for.body
  %47 = load i32, i32* %n, align 4, !dbg !6937
  %inc = add nsw i32 %47, 1, !dbg !6937
  store i32 %inc, i32* %n, align 4, !dbg !6937
  br label %for.cond, !dbg !6939, !llvm.loop !6940

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !6942
  br label %return, !dbg !6942

return:                                           ; preds = %for.end, %if.then21, %if.then17
  %48 = load i32, i32* %retval, align 4, !dbg !6943
  ret i32 %48, !dbg !6943
}

; Function Attrs: nounwind uwtable
define internal void @wiener_denoise(%struct.WMAVoiceContext* %s, i32 %fcb_type, float* %synth_pf, i32 %size, float* %lpcs) #1 !dbg !6944 {
entry:
  %s.addr = alloca %struct.WMAVoiceContext*, align 8
  %fcb_type.addr = alloca i32, align 4
  %synth_pf.addr = alloca float*, align 8
  %size.addr = alloca i32, align 4
  %lpcs.addr = alloca float*, align 8
  %remainder = alloca i32, align 4
  %lim = alloca i32, align 4
  %n = alloca i32, align 4
  %tilted_lpcs = alloca float*, align 8
  %coeffs = alloca float*, align 8
  %tilt_mem = alloca float, align 4
  %v1 = alloca float, align 4
  %v2 = alloca float, align 4
  store %struct.WMAVoiceContext* %s, %struct.WMAVoiceContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s.addr, metadata !6947, metadata !2040), !dbg !6948
  store i32 %fcb_type, i32* %fcb_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fcb_type.addr, metadata !6949, metadata !2040), !dbg !6950
  store float* %synth_pf, float** %synth_pf.addr, align 8
  call void @llvm.dbg.declare(metadata float** %synth_pf.addr, metadata !6951, metadata !2040), !dbg !6952
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !6953, metadata !2040), !dbg !6954
  store float* %lpcs, float** %lpcs.addr, align 8
  call void @llvm.dbg.declare(metadata float** %lpcs.addr, metadata !6955, metadata !2040), !dbg !6956
  call void @llvm.dbg.declare(metadata i32* %remainder, metadata !6957, metadata !2040), !dbg !6958
  call void @llvm.dbg.declare(metadata i32* %lim, metadata !6959, metadata !2040), !dbg !6960
  call void @llvm.dbg.declare(metadata i32* %n, metadata !6961, metadata !2040), !dbg !6962
  %0 = load i32, i32* %fcb_type.addr, align 4, !dbg !6963
  %cmp = icmp ne i32 %0, 0, !dbg !6965
  br i1 %cmp, label %if.then, label %if.end, !dbg !6966

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata float** %tilted_lpcs, metadata !6967, metadata !2040), !dbg !6969
  %1 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6970
  %tilted_lpcs_pf = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %1, i32 0, i32 52, !dbg !6971
  %arraydecay = getelementptr inbounds [128 x float], [128 x float]* %tilted_lpcs_pf, i32 0, i32 0, !dbg !6970
  store float* %arraydecay, float** %tilted_lpcs, align 8, !dbg !6969
  call void @llvm.dbg.declare(metadata float** %coeffs, metadata !6972, metadata !2040), !dbg !6973
  %2 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6974
  %denoise_coeffs_pf = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %2, i32 0, i32 53, !dbg !6975
  %arraydecay1 = getelementptr inbounds [128 x float], [128 x float]* %denoise_coeffs_pf, i32 0, i32 0, !dbg !6974
  store float* %arraydecay1, float** %coeffs, align 8, !dbg !6973
  call void @llvm.dbg.declare(metadata float* %tilt_mem, metadata !6976, metadata !2040), !dbg !6977
  store float 0.000000e+00, float* %tilt_mem, align 4, !dbg !6977
  %3 = load float*, float** %tilted_lpcs, align 8, !dbg !6978
  %arrayidx = getelementptr inbounds float, float* %3, i64 0, !dbg !6978
  store float 1.000000e+00, float* %arrayidx, align 4, !dbg !6979
  %4 = load float*, float** %tilted_lpcs, align 8, !dbg !6980
  %arrayidx2 = getelementptr inbounds float, float* %4, i64 1, !dbg !6980
  %5 = bitcast float* %arrayidx2 to i8*, !dbg !6981
  %6 = load float*, float** %lpcs.addr, align 8, !dbg !6982
  %7 = bitcast float* %6 to i8*, !dbg !6981
  %8 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6983
  %lsps = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %8, i32 0, i32 8, !dbg !6984
  %9 = load i32, i32* %lsps, align 4, !dbg !6984
  %conv = sext i32 %9 to i64, !dbg !6983
  %mul = mul i64 4, %conv, !dbg !6985
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %7, i64 %mul, i32 4, i1 false), !dbg !6981
  %10 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6986
  %lsps3 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %10, i32 0, i32 8, !dbg !6987
  %11 = load i32, i32* %lsps3, align 4, !dbg !6987
  %add = add nsw i32 %11, 1, !dbg !6988
  %idxprom = sext i32 %add to i64, !dbg !6989
  %12 = load float*, float** %tilted_lpcs, align 8, !dbg !6989
  %arrayidx4 = getelementptr inbounds float, float* %12, i64 %idxprom, !dbg !6989
  %13 = bitcast float* %arrayidx4 to i8*, !dbg !6990
  %14 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6991
  %lsps5 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %14, i32 0, i32 8, !dbg !6992
  %15 = load i32, i32* %lsps5, align 4, !dbg !6992
  %sub = sub nsw i32 128, %15, !dbg !6993
  %sub6 = sub nsw i32 %sub, 1, !dbg !6994
  %conv7 = sext i32 %sub6 to i64, !dbg !6995
  %mul8 = mul i64 4, %conv7, !dbg !6996
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 %mul8, i32 4, i1 false), !dbg !6990
  %16 = load float*, float** %lpcs.addr, align 8, !dbg !6997
  %17 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !6998
  %lsps9 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %17, i32 0, i32 8, !dbg !6999
  %18 = load i32, i32* %lsps9, align 4, !dbg !6999
  %call = call float @tilt_factor(float* %16, i32 %18), !dbg !7000
  %conv10 = fpext float %call to double, !dbg !7000
  %mul11 = fmul double 7.000000e-01, %conv10, !dbg !7001
  %conv12 = fptrunc double %mul11 to float, !dbg !7002
  %19 = load float*, float** %tilted_lpcs, align 8, !dbg !7003
  %20 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7004
  %lsps13 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %20, i32 0, i32 8, !dbg !7005
  %21 = load i32, i32* %lsps13, align 4, !dbg !7005
  %add14 = add nsw i32 %21, 2, !dbg !7006
  call void @ff_tilt_compensation(float* %tilt_mem, float %conv12, float* %19, i32 %add14), !dbg !7007
  %22 = load i32, i32* %size.addr, align 4, !dbg !7009
  %sub15 = sub nsw i32 127, %22, !dbg !7010
  %23 = load i32, i32* %size.addr, align 4, !dbg !7011
  %sub16 = sub nsw i32 %23, 1, !dbg !7012
  %cmp17 = icmp sgt i32 %sub15, %sub16, !dbg !7013
  br i1 %cmp17, label %cond.true, label %cond.false, !dbg !7014

cond.true:                                        ; preds = %if.then
  %24 = load i32, i32* %size.addr, align 4, !dbg !7015
  %sub19 = sub nsw i32 %24, 1, !dbg !7016
  br label %cond.end, !dbg !7017

cond.false:                                       ; preds = %if.then
  %25 = load i32, i32* %size.addr, align 4, !dbg !7018
  %sub20 = sub nsw i32 127, %25, !dbg !7020
  br label %cond.end, !dbg !7021

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub19, %cond.true ], [ %sub20, %cond.false ], !dbg !7022
  store i32 %cond, i32* %remainder, align 4, !dbg !7024
  %26 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7025
  %27 = load float*, float** %tilted_lpcs, align 8, !dbg !7026
  %28 = load i32, i32* %fcb_type.addr, align 4, !dbg !7027
  %29 = load float*, float** %coeffs, align 8, !dbg !7028
  %30 = load i32, i32* %remainder, align 4, !dbg !7029
  call void @calc_input_response(%struct.WMAVoiceContext* %26, float* %27, i32 %28, float* %29, i32 %30), !dbg !7030
  %31 = load i32, i32* %size.addr, align 4, !dbg !7031
  %idxprom21 = sext i32 %31 to i64, !dbg !7032
  %32 = load float*, float** %synth_pf.addr, align 8, !dbg !7032
  %arrayidx22 = getelementptr inbounds float, float* %32, i64 %idxprom21, !dbg !7032
  %33 = bitcast float* %arrayidx22 to i8*, !dbg !7033
  %34 = load i32, i32* %size.addr, align 4, !dbg !7034
  %sub23 = sub nsw i32 128, %34, !dbg !7035
  %conv24 = sext i32 %sub23 to i64, !dbg !7036
  %mul25 = mul i64 4, %conv24, !dbg !7037
  call void @llvm.memset.p0i8.i64(i8* %33, i8 0, i64 %mul25, i32 4, i1 false), !dbg !7033
  %35 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7038
  %rdft = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %35, i32 0, i32 40, !dbg !7039
  %rdft_calc = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %rdft, i32 0, i32 7, !dbg !7040
  %36 = load void (%struct.RDFTContext*, float*)*, void (%struct.RDFTContext*, float*)** %rdft_calc, align 8, !dbg !7040
  %37 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7041
  %rdft26 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %37, i32 0, i32 40, !dbg !7042
  %38 = load float*, float** %synth_pf.addr, align 8, !dbg !7043
  call void %36(%struct.RDFTContext* %rdft26, float* %38), !dbg !7038
  %39 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7044
  %rdft27 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %39, i32 0, i32 40, !dbg !7045
  %rdft_calc28 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %rdft27, i32 0, i32 7, !dbg !7046
  %40 = load void (%struct.RDFTContext*, float*)*, void (%struct.RDFTContext*, float*)** %rdft_calc28, align 8, !dbg !7046
  %41 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7047
  %rdft29 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %41, i32 0, i32 40, !dbg !7048
  %42 = load float*, float** %coeffs, align 8, !dbg !7049
  call void %40(%struct.RDFTContext* %rdft29, float* %42), !dbg !7044
  %43 = load float*, float** %coeffs, align 8, !dbg !7050
  %arrayidx30 = getelementptr inbounds float, float* %43, i64 0, !dbg !7050
  %44 = load float, float* %arrayidx30, align 4, !dbg !7050
  %45 = load float*, float** %synth_pf.addr, align 8, !dbg !7051
  %arrayidx31 = getelementptr inbounds float, float* %45, i64 0, !dbg !7051
  %46 = load float, float* %arrayidx31, align 4, !dbg !7052
  %mul32 = fmul float %46, %44, !dbg !7052
  store float %mul32, float* %arrayidx31, align 4, !dbg !7052
  %47 = load float*, float** %coeffs, align 8, !dbg !7053
  %arrayidx33 = getelementptr inbounds float, float* %47, i64 1, !dbg !7053
  %48 = load float, float* %arrayidx33, align 4, !dbg !7053
  %49 = load float*, float** %synth_pf.addr, align 8, !dbg !7054
  %arrayidx34 = getelementptr inbounds float, float* %49, i64 1, !dbg !7054
  %50 = load float, float* %arrayidx34, align 4, !dbg !7055
  %mul35 = fmul float %50, %48, !dbg !7055
  store float %mul35, float* %arrayidx34, align 4, !dbg !7055
  store i32 1, i32* %n, align 4, !dbg !7056
  br label %for.cond, !dbg !7058

for.cond:                                         ; preds = %for.inc, %cond.end
  %51 = load i32, i32* %n, align 4, !dbg !7059
  %cmp36 = icmp slt i32 %51, 64, !dbg !7062
  br i1 %cmp36, label %for.body, label %for.end, !dbg !7063

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata float* %v1, metadata !7064, metadata !2040), !dbg !7066
  %52 = load i32, i32* %n, align 4, !dbg !7067
  %mul38 = mul nsw i32 %52, 2, !dbg !7068
  %idxprom39 = sext i32 %mul38 to i64, !dbg !7069
  %53 = load float*, float** %synth_pf.addr, align 8, !dbg !7069
  %arrayidx40 = getelementptr inbounds float, float* %53, i64 %idxprom39, !dbg !7069
  %54 = load float, float* %arrayidx40, align 4, !dbg !7069
  store float %54, float* %v1, align 4, !dbg !7066
  call void @llvm.dbg.declare(metadata float* %v2, metadata !7070, metadata !2040), !dbg !7071
  %55 = load i32, i32* %n, align 4, !dbg !7072
  %mul41 = mul nsw i32 %55, 2, !dbg !7073
  %add42 = add nsw i32 %mul41, 1, !dbg !7074
  %idxprom43 = sext i32 %add42 to i64, !dbg !7075
  %56 = load float*, float** %synth_pf.addr, align 8, !dbg !7075
  %arrayidx44 = getelementptr inbounds float, float* %56, i64 %idxprom43, !dbg !7075
  %57 = load float, float* %arrayidx44, align 4, !dbg !7075
  store float %57, float* %v2, align 4, !dbg !7071
  %58 = load float, float* %v1, align 4, !dbg !7076
  %59 = load i32, i32* %n, align 4, !dbg !7077
  %mul45 = mul nsw i32 %59, 2, !dbg !7078
  %idxprom46 = sext i32 %mul45 to i64, !dbg !7079
  %60 = load float*, float** %coeffs, align 8, !dbg !7079
  %arrayidx47 = getelementptr inbounds float, float* %60, i64 %idxprom46, !dbg !7079
  %61 = load float, float* %arrayidx47, align 4, !dbg !7079
  %mul48 = fmul float %58, %61, !dbg !7080
  %62 = load float, float* %v2, align 4, !dbg !7081
  %63 = load i32, i32* %n, align 4, !dbg !7082
  %mul49 = mul nsw i32 %63, 2, !dbg !7083
  %add50 = add nsw i32 %mul49, 1, !dbg !7084
  %idxprom51 = sext i32 %add50 to i64, !dbg !7085
  %64 = load float*, float** %coeffs, align 8, !dbg !7085
  %arrayidx52 = getelementptr inbounds float, float* %64, i64 %idxprom51, !dbg !7085
  %65 = load float, float* %arrayidx52, align 4, !dbg !7085
  %mul53 = fmul float %62, %65, !dbg !7086
  %sub54 = fsub float %mul48, %mul53, !dbg !7087
  %66 = load i32, i32* %n, align 4, !dbg !7088
  %mul55 = mul nsw i32 %66, 2, !dbg !7089
  %idxprom56 = sext i32 %mul55 to i64, !dbg !7090
  %67 = load float*, float** %synth_pf.addr, align 8, !dbg !7090
  %arrayidx57 = getelementptr inbounds float, float* %67, i64 %idxprom56, !dbg !7090
  store float %sub54, float* %arrayidx57, align 4, !dbg !7091
  %68 = load float, float* %v2, align 4, !dbg !7092
  %69 = load i32, i32* %n, align 4, !dbg !7093
  %mul58 = mul nsw i32 %69, 2, !dbg !7094
  %idxprom59 = sext i32 %mul58 to i64, !dbg !7095
  %70 = load float*, float** %coeffs, align 8, !dbg !7095
  %arrayidx60 = getelementptr inbounds float, float* %70, i64 %idxprom59, !dbg !7095
  %71 = load float, float* %arrayidx60, align 4, !dbg !7095
  %mul61 = fmul float %68, %71, !dbg !7096
  %72 = load float, float* %v1, align 4, !dbg !7097
  %73 = load i32, i32* %n, align 4, !dbg !7098
  %mul62 = mul nsw i32 %73, 2, !dbg !7099
  %add63 = add nsw i32 %mul62, 1, !dbg !7100
  %idxprom64 = sext i32 %add63 to i64, !dbg !7101
  %74 = load float*, float** %coeffs, align 8, !dbg !7101
  %arrayidx65 = getelementptr inbounds float, float* %74, i64 %idxprom64, !dbg !7101
  %75 = load float, float* %arrayidx65, align 4, !dbg !7101
  %mul66 = fmul float %72, %75, !dbg !7102
  %add67 = fadd float %mul61, %mul66, !dbg !7103
  %76 = load i32, i32* %n, align 4, !dbg !7104
  %mul68 = mul nsw i32 %76, 2, !dbg !7105
  %add69 = add nsw i32 %mul68, 1, !dbg !7106
  %idxprom70 = sext i32 %add69 to i64, !dbg !7107
  %77 = load float*, float** %synth_pf.addr, align 8, !dbg !7107
  %arrayidx71 = getelementptr inbounds float, float* %77, i64 %idxprom70, !dbg !7107
  store float %add67, float* %arrayidx71, align 4, !dbg !7108
  br label %for.inc, !dbg !7109

for.inc:                                          ; preds = %for.body
  %78 = load i32, i32* %n, align 4, !dbg !7110
  %inc = add nsw i32 %78, 1, !dbg !7110
  store i32 %inc, i32* %n, align 4, !dbg !7110
  br label %for.cond, !dbg !7112, !llvm.loop !7113

for.end:                                          ; preds = %for.cond
  %79 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7115
  %irdft = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %79, i32 0, i32 41, !dbg !7116
  %rdft_calc72 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %irdft, i32 0, i32 7, !dbg !7117
  %80 = load void (%struct.RDFTContext*, float*)*, void (%struct.RDFTContext*, float*)** %rdft_calc72, align 8, !dbg !7117
  %81 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7118
  %irdft73 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %81, i32 0, i32 41, !dbg !7119
  %82 = load float*, float** %synth_pf.addr, align 8, !dbg !7120
  call void %80(%struct.RDFTContext* %irdft73, float* %82), !dbg !7115
  br label %if.end, !dbg !7121

if.end:                                           ; preds = %for.end, %entry
  %83 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7122
  %denoise_filter_cache_size = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %83, i32 0, i32 50, !dbg !7124
  %84 = load i32, i32* %denoise_filter_cache_size, align 4, !dbg !7124
  %tobool = icmp ne i32 %84, 0, !dbg !7122
  br i1 %tobool, label %if.then74, label %if.end105, !dbg !7125

if.then74:                                        ; preds = %if.end
  %85 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7126
  %denoise_filter_cache_size75 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %85, i32 0, i32 50, !dbg !7128
  %86 = load i32, i32* %denoise_filter_cache_size75, align 4, !dbg !7128
  %87 = load i32, i32* %size.addr, align 4, !dbg !7129
  %cmp76 = icmp sgt i32 %86, %87, !dbg !7130
  br i1 %cmp76, label %cond.true78, label %cond.false79, !dbg !7131

cond.true78:                                      ; preds = %if.then74
  %88 = load i32, i32* %size.addr, align 4, !dbg !7132
  br label %cond.end81, !dbg !7134

cond.false79:                                     ; preds = %if.then74
  %89 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7135
  %denoise_filter_cache_size80 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %89, i32 0, i32 50, !dbg !7137
  %90 = load i32, i32* %denoise_filter_cache_size80, align 4, !dbg !7137
  br label %cond.end81, !dbg !7138

cond.end81:                                       ; preds = %cond.false79, %cond.true78
  %cond82 = phi i32 [ %88, %cond.true78 ], [ %90, %cond.false79 ], !dbg !7139
  store i32 %cond82, i32* %lim, align 4, !dbg !7141
  store i32 0, i32* %n, align 4, !dbg !7142
  br label %for.cond83, !dbg !7144

for.cond83:                                       ; preds = %for.inc92, %cond.end81
  %91 = load i32, i32* %n, align 4, !dbg !7145
  %92 = load i32, i32* %lim, align 4, !dbg !7148
  %cmp84 = icmp slt i32 %91, %92, !dbg !7149
  br i1 %cmp84, label %for.body86, label %for.end94, !dbg !7150

for.body86:                                       ; preds = %for.cond83
  %93 = load i32, i32* %n, align 4, !dbg !7151
  %idxprom87 = sext i32 %93 to i64, !dbg !7152
  %94 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7152
  %denoise_filter_cache = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %94, i32 0, i32 49, !dbg !7153
  %arrayidx88 = getelementptr inbounds [160 x float], [160 x float]* %denoise_filter_cache, i64 0, i64 %idxprom87, !dbg !7152
  %95 = load float, float* %arrayidx88, align 4, !dbg !7152
  %96 = load i32, i32* %n, align 4, !dbg !7154
  %idxprom89 = sext i32 %96 to i64, !dbg !7155
  %97 = load float*, float** %synth_pf.addr, align 8, !dbg !7155
  %arrayidx90 = getelementptr inbounds float, float* %97, i64 %idxprom89, !dbg !7155
  %98 = load float, float* %arrayidx90, align 4, !dbg !7156
  %add91 = fadd float %98, %95, !dbg !7156
  store float %add91, float* %arrayidx90, align 4, !dbg !7156
  br label %for.inc92, !dbg !7155

for.inc92:                                        ; preds = %for.body86
  %99 = load i32, i32* %n, align 4, !dbg !7157
  %inc93 = add nsw i32 %99, 1, !dbg !7157
  store i32 %inc93, i32* %n, align 4, !dbg !7157
  br label %for.cond83, !dbg !7159, !llvm.loop !7160

for.end94:                                        ; preds = %for.cond83
  %100 = load i32, i32* %lim, align 4, !dbg !7162
  %101 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7163
  %denoise_filter_cache_size95 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %101, i32 0, i32 50, !dbg !7164
  %102 = load i32, i32* %denoise_filter_cache_size95, align 4, !dbg !7165
  %sub96 = sub nsw i32 %102, %100, !dbg !7165
  store i32 %sub96, i32* %denoise_filter_cache_size95, align 4, !dbg !7165
  %103 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7166
  %denoise_filter_cache97 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %103, i32 0, i32 49, !dbg !7167
  %arraydecay98 = getelementptr inbounds [160 x float], [160 x float]* %denoise_filter_cache97, i32 0, i32 0, !dbg !7168
  %104 = bitcast float* %arraydecay98 to i8*, !dbg !7168
  %105 = load i32, i32* %size.addr, align 4, !dbg !7169
  %idxprom99 = sext i32 %105 to i64, !dbg !7170
  %106 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7170
  %denoise_filter_cache100 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %106, i32 0, i32 49, !dbg !7171
  %arrayidx101 = getelementptr inbounds [160 x float], [160 x float]* %denoise_filter_cache100, i64 0, i64 %idxprom99, !dbg !7170
  %107 = bitcast float* %arrayidx101 to i8*, !dbg !7168
  %108 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7172
  %denoise_filter_cache_size102 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %108, i32 0, i32 50, !dbg !7173
  %109 = load i32, i32* %denoise_filter_cache_size102, align 4, !dbg !7173
  %conv103 = sext i32 %109 to i64, !dbg !7172
  %mul104 = mul i64 4, %conv103, !dbg !7174
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %104, i8* %107, i64 %mul104, i32 4, i1 false), !dbg !7168
  br label %if.end105, !dbg !7175

if.end105:                                        ; preds = %for.end94, %if.end
  %110 = load i32, i32* %fcb_type.addr, align 4, !dbg !7176
  %cmp106 = icmp ne i32 %110, 0, !dbg !7178
  br i1 %cmp106, label %if.then108, label %if.end145, !dbg !7179

if.then108:                                       ; preds = %if.end105
  %111 = load i32, i32* %remainder, align 4, !dbg !7180
  %112 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7182
  %denoise_filter_cache_size109 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %112, i32 0, i32 50, !dbg !7183
  %113 = load i32, i32* %denoise_filter_cache_size109, align 4, !dbg !7183
  %cmp110 = icmp sgt i32 %111, %113, !dbg !7184
  br i1 %cmp110, label %cond.true112, label %cond.false114, !dbg !7185

cond.true112:                                     ; preds = %if.then108
  %114 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7186
  %denoise_filter_cache_size113 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %114, i32 0, i32 50, !dbg !7188
  %115 = load i32, i32* %denoise_filter_cache_size113, align 4, !dbg !7188
  br label %cond.end115, !dbg !7189

cond.false114:                                    ; preds = %if.then108
  %116 = load i32, i32* %remainder, align 4, !dbg !7190
  br label %cond.end115, !dbg !7192

cond.end115:                                      ; preds = %cond.false114, %cond.true112
  %cond116 = phi i32 [ %115, %cond.true112 ], [ %116, %cond.false114 ], !dbg !7193
  store i32 %cond116, i32* %lim, align 4, !dbg !7195
  store i32 0, i32* %n, align 4, !dbg !7196
  br label %for.cond117, !dbg !7198

for.cond117:                                      ; preds = %for.inc128, %cond.end115
  %117 = load i32, i32* %n, align 4, !dbg !7199
  %118 = load i32, i32* %lim, align 4, !dbg !7202
  %cmp118 = icmp slt i32 %117, %118, !dbg !7203
  br i1 %cmp118, label %for.body120, label %for.end130, !dbg !7204

for.body120:                                      ; preds = %for.cond117
  %119 = load i32, i32* %size.addr, align 4, !dbg !7205
  %120 = load i32, i32* %n, align 4, !dbg !7206
  %add121 = add nsw i32 %119, %120, !dbg !7207
  %idxprom122 = sext i32 %add121 to i64, !dbg !7208
  %121 = load float*, float** %synth_pf.addr, align 8, !dbg !7208
  %arrayidx123 = getelementptr inbounds float, float* %121, i64 %idxprom122, !dbg !7208
  %122 = load float, float* %arrayidx123, align 4, !dbg !7208
  %123 = load i32, i32* %n, align 4, !dbg !7209
  %idxprom124 = sext i32 %123 to i64, !dbg !7210
  %124 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7210
  %denoise_filter_cache125 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %124, i32 0, i32 49, !dbg !7211
  %arrayidx126 = getelementptr inbounds [160 x float], [160 x float]* %denoise_filter_cache125, i64 0, i64 %idxprom124, !dbg !7210
  %125 = load float, float* %arrayidx126, align 4, !dbg !7212
  %add127 = fadd float %125, %122, !dbg !7212
  store float %add127, float* %arrayidx126, align 4, !dbg !7212
  br label %for.inc128, !dbg !7210

for.inc128:                                       ; preds = %for.body120
  %126 = load i32, i32* %n, align 4, !dbg !7213
  %inc129 = add nsw i32 %126, 1, !dbg !7213
  store i32 %inc129, i32* %n, align 4, !dbg !7213
  br label %for.cond117, !dbg !7215, !llvm.loop !7216

for.end130:                                       ; preds = %for.cond117
  %127 = load i32, i32* %lim, align 4, !dbg !7218
  %128 = load i32, i32* %remainder, align 4, !dbg !7220
  %cmp131 = icmp slt i32 %127, %128, !dbg !7221
  br i1 %cmp131, label %if.then133, label %if.end144, !dbg !7222

if.then133:                                       ; preds = %for.end130
  %129 = load i32, i32* %lim, align 4, !dbg !7223
  %idxprom134 = sext i32 %129 to i64, !dbg !7225
  %130 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7225
  %denoise_filter_cache135 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %130, i32 0, i32 49, !dbg !7226
  %arrayidx136 = getelementptr inbounds [160 x float], [160 x float]* %denoise_filter_cache135, i64 0, i64 %idxprom134, !dbg !7225
  %131 = bitcast float* %arrayidx136 to i8*, !dbg !7227
  %132 = load i32, i32* %size.addr, align 4, !dbg !7228
  %133 = load i32, i32* %lim, align 4, !dbg !7229
  %add137 = add nsw i32 %132, %133, !dbg !7230
  %idxprom138 = sext i32 %add137 to i64, !dbg !7231
  %134 = load float*, float** %synth_pf.addr, align 8, !dbg !7231
  %arrayidx139 = getelementptr inbounds float, float* %134, i64 %idxprom138, !dbg !7231
  %135 = bitcast float* %arrayidx139 to i8*, !dbg !7227
  %136 = load i32, i32* %remainder, align 4, !dbg !7232
  %137 = load i32, i32* %lim, align 4, !dbg !7233
  %sub140 = sub nsw i32 %136, %137, !dbg !7234
  %conv141 = sext i32 %sub140 to i64, !dbg !7235
  %mul142 = mul i64 4, %conv141, !dbg !7236
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %131, i8* %135, i64 %mul142, i32 4, i1 false), !dbg !7227
  %138 = load i32, i32* %remainder, align 4, !dbg !7237
  %139 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7238
  %denoise_filter_cache_size143 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %139, i32 0, i32 50, !dbg !7239
  store i32 %138, i32* %denoise_filter_cache_size143, align 4, !dbg !7240
  br label %if.end144, !dbg !7241

if.end144:                                        ; preds = %if.then133, %for.end130
  br label %if.end145, !dbg !7242

if.end145:                                        ; preds = %if.end144, %if.end105
  ret void, !dbg !7243
}

; Function Attrs: nounwind uwtable
define internal void @adaptive_gain_control(float* %out, float* %in, float* %speech_synth, i32 %size, float %alpha, float* %gain_mem) #1 !dbg !7244 {
entry:
  %out.addr = alloca float*, align 8
  %in.addr = alloca float*, align 8
  %speech_synth.addr = alloca float*, align 8
  %size.addr = alloca i32, align 4
  %alpha.addr = alloca float, align 4
  %gain_mem.addr = alloca float*, align 8
  %i = alloca i32, align 4
  %speech_energy = alloca float, align 4
  %postfilter_energy = alloca float, align 4
  %gain_scale_factor = alloca float, align 4
  %mem = alloca float, align 4
  store float* %out, float** %out.addr, align 8
  call void @llvm.dbg.declare(metadata float** %out.addr, metadata !7247, metadata !2040), !dbg !7248
  store float* %in, float** %in.addr, align 8
  call void @llvm.dbg.declare(metadata float** %in.addr, metadata !7249, metadata !2040), !dbg !7250
  store float* %speech_synth, float** %speech_synth.addr, align 8
  call void @llvm.dbg.declare(metadata float** %speech_synth.addr, metadata !7251, metadata !2040), !dbg !7252
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !7253, metadata !2040), !dbg !7254
  store float %alpha, float* %alpha.addr, align 4
  call void @llvm.dbg.declare(metadata float* %alpha.addr, metadata !7255, metadata !2040), !dbg !7256
  store float* %gain_mem, float** %gain_mem.addr, align 8
  call void @llvm.dbg.declare(metadata float** %gain_mem.addr, metadata !7257, metadata !2040), !dbg !7258
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7259, metadata !2040), !dbg !7260
  call void @llvm.dbg.declare(metadata float* %speech_energy, metadata !7261, metadata !2040), !dbg !7262
  store float 0.000000e+00, float* %speech_energy, align 4, !dbg !7262
  call void @llvm.dbg.declare(metadata float* %postfilter_energy, metadata !7263, metadata !2040), !dbg !7264
  store float 0.000000e+00, float* %postfilter_energy, align 4, !dbg !7264
  call void @llvm.dbg.declare(metadata float* %gain_scale_factor, metadata !7265, metadata !2040), !dbg !7266
  call void @llvm.dbg.declare(metadata float* %mem, metadata !7267, metadata !2040), !dbg !7268
  %0 = load float*, float** %gain_mem.addr, align 8, !dbg !7269
  %1 = load float, float* %0, align 4, !dbg !7270
  store float %1, float* %mem, align 4, !dbg !7268
  store i32 0, i32* %i, align 4, !dbg !7271
  br label %for.cond, !dbg !7273

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4, !dbg !7274
  %3 = load i32, i32* %size.addr, align 4, !dbg !7277
  %cmp = icmp slt i32 %2, %3, !dbg !7278
  br i1 %cmp, label %for.body, label %for.end, !dbg !7279

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4, !dbg !7280
  %idxprom = sext i32 %4 to i64, !dbg !7282
  %5 = load float*, float** %speech_synth.addr, align 8, !dbg !7282
  %arrayidx = getelementptr inbounds float, float* %5, i64 %idxprom, !dbg !7282
  %6 = load float, float* %arrayidx, align 4, !dbg !7282
  %call = call float @fabsf(float %6) #2, !dbg !7283
  %7 = load float, float* %speech_energy, align 4, !dbg !7284
  %add = fadd float %7, %call, !dbg !7284
  store float %add, float* %speech_energy, align 4, !dbg !7284
  %8 = load i32, i32* %i, align 4, !dbg !7285
  %idxprom1 = sext i32 %8 to i64, !dbg !7286
  %9 = load float*, float** %in.addr, align 8, !dbg !7286
  %arrayidx2 = getelementptr inbounds float, float* %9, i64 %idxprom1, !dbg !7286
  %10 = load float, float* %arrayidx2, align 4, !dbg !7286
  %call3 = call float @fabsf(float %10) #2, !dbg !7287
  %11 = load float, float* %postfilter_energy, align 4, !dbg !7288
  %add4 = fadd float %11, %call3, !dbg !7288
  store float %add4, float* %postfilter_energy, align 4, !dbg !7288
  br label %for.inc, !dbg !7289

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !7290
  %inc = add nsw i32 %12, 1, !dbg !7290
  store i32 %inc, i32* %i, align 4, !dbg !7290
  br label %for.cond, !dbg !7292, !llvm.loop !7293

for.end:                                          ; preds = %for.cond
  %13 = load float, float* %postfilter_energy, align 4, !dbg !7295
  %conv = fpext float %13 to double, !dbg !7295
  %cmp5 = fcmp oeq double %conv, 0.000000e+00, !dbg !7296
  br i1 %cmp5, label %cond.true, label %cond.false, !dbg !7295

cond.true:                                        ; preds = %for.end
  br label %cond.end, !dbg !7297

cond.false:                                       ; preds = %for.end
  %14 = load float, float* %alpha.addr, align 4, !dbg !7299
  %conv7 = fpext float %14 to double, !dbg !7299
  %sub = fsub double 1.000000e+00, %conv7, !dbg !7300
  %15 = load float, float* %speech_energy, align 4, !dbg !7301
  %conv8 = fpext float %15 to double, !dbg !7301
  %mul = fmul double %sub, %conv8, !dbg !7302
  %16 = load float, float* %postfilter_energy, align 4, !dbg !7303
  %conv9 = fpext float %16 to double, !dbg !7303
  %div = fdiv double %mul, %conv9, !dbg !7304
  br label %cond.end, !dbg !7305

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ 0.000000e+00, %cond.true ], [ %div, %cond.false ], !dbg !7307
  %conv10 = fptrunc double %cond to float, !dbg !7307
  store float %conv10, float* %gain_scale_factor, align 4, !dbg !7309
  store i32 0, i32* %i, align 4, !dbg !7310
  br label %for.cond11, !dbg !7312

for.cond11:                                       ; preds = %for.inc22, %cond.end
  %17 = load i32, i32* %i, align 4, !dbg !7313
  %18 = load i32, i32* %size.addr, align 4, !dbg !7316
  %cmp12 = icmp slt i32 %17, %18, !dbg !7317
  br i1 %cmp12, label %for.body14, label %for.end24, !dbg !7318

for.body14:                                       ; preds = %for.cond11
  %19 = load float, float* %alpha.addr, align 4, !dbg !7319
  %20 = load float, float* %mem, align 4, !dbg !7321
  %mul15 = fmul float %19, %20, !dbg !7322
  %21 = load float, float* %gain_scale_factor, align 4, !dbg !7323
  %add16 = fadd float %mul15, %21, !dbg !7324
  store float %add16, float* %mem, align 4, !dbg !7325
  %22 = load i32, i32* %i, align 4, !dbg !7326
  %idxprom17 = sext i32 %22 to i64, !dbg !7327
  %23 = load float*, float** %in.addr, align 8, !dbg !7327
  %arrayidx18 = getelementptr inbounds float, float* %23, i64 %idxprom17, !dbg !7327
  %24 = load float, float* %arrayidx18, align 4, !dbg !7327
  %25 = load float, float* %mem, align 4, !dbg !7328
  %mul19 = fmul float %24, %25, !dbg !7329
  %26 = load i32, i32* %i, align 4, !dbg !7330
  %idxprom20 = sext i32 %26 to i64, !dbg !7331
  %27 = load float*, float** %out.addr, align 8, !dbg !7331
  %arrayidx21 = getelementptr inbounds float, float* %27, i64 %idxprom20, !dbg !7331
  store float %mul19, float* %arrayidx21, align 4, !dbg !7332
  br label %for.inc22, !dbg !7333

for.inc22:                                        ; preds = %for.body14
  %28 = load i32, i32* %i, align 4, !dbg !7334
  %inc23 = add nsw i32 %28, 1, !dbg !7334
  store i32 %inc23, i32* %i, align 4, !dbg !7334
  br label %for.cond11, !dbg !7336, !llvm.loop !7337

for.end24:                                        ; preds = %for.cond11
  %29 = load float, float* %mem, align 4, !dbg !7339
  %30 = load float*, float** %gain_mem.addr, align 8, !dbg !7340
  store float %29, float* %30, align 4, !dbg !7341
  ret void, !dbg !7342
}

declare void @ff_acelp_apply_order_2_transfer_function(float*, float*, float*, float*, float, float*, i32) #3

declare void @ff_tilt_compensation(float*, float, float*, i32) #3

; Function Attrs: nounwind uwtable
define internal float @tilt_factor(float* %lpcs, i32 %n_lpcs) #1 !dbg !7343 {
entry:
  %lpcs.addr = alloca float*, align 8
  %n_lpcs.addr = alloca i32, align 4
  %rh0 = alloca float, align 4
  %rh1 = alloca float, align 4
  store float* %lpcs, float** %lpcs.addr, align 8
  call void @llvm.dbg.declare(metadata float** %lpcs.addr, metadata !7346, metadata !2040), !dbg !7347
  store i32 %n_lpcs, i32* %n_lpcs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_lpcs.addr, metadata !7348, metadata !2040), !dbg !7349
  call void @llvm.dbg.declare(metadata float* %rh0, metadata !7350, metadata !2040), !dbg !7351
  call void @llvm.dbg.declare(metadata float* %rh1, metadata !7352, metadata !2040), !dbg !7353
  %0 = load float*, float** %lpcs.addr, align 8, !dbg !7354
  %1 = load float*, float** %lpcs.addr, align 8, !dbg !7355
  %2 = load i32, i32* %n_lpcs.addr, align 4, !dbg !7356
  %call = call float @avpriv_scalarproduct_float_c(float* %0, float* %1, i32 %2), !dbg !7357
  %conv = fpext float %call to double, !dbg !7357
  %add = fadd double 1.000000e+00, %conv, !dbg !7358
  %conv1 = fptrunc double %add to float, !dbg !7359
  store float %conv1, float* %rh0, align 4, !dbg !7360
  %3 = load float*, float** %lpcs.addr, align 8, !dbg !7361
  %arrayidx = getelementptr inbounds float, float* %3, i64 0, !dbg !7361
  %4 = load float, float* %arrayidx, align 4, !dbg !7361
  %5 = load float*, float** %lpcs.addr, align 8, !dbg !7362
  %6 = load float*, float** %lpcs.addr, align 8, !dbg !7363
  %arrayidx2 = getelementptr inbounds float, float* %6, i64 1, !dbg !7363
  %7 = load i32, i32* %n_lpcs.addr, align 4, !dbg !7364
  %sub = sub nsw i32 %7, 1, !dbg !7365
  %call3 = call float @avpriv_scalarproduct_float_c(float* %5, float* %arrayidx2, i32 %sub), !dbg !7366
  %add4 = fadd float %4, %call3, !dbg !7367
  store float %add4, float* %rh1, align 4, !dbg !7368
  %8 = load float, float* %rh1, align 4, !dbg !7369
  %9 = load float, float* %rh0, align 4, !dbg !7370
  %div = fdiv float %8, %9, !dbg !7371
  ret float %div, !dbg !7372
}

; Function Attrs: nounwind uwtable
define internal void @calc_input_response(%struct.WMAVoiceContext* %s, float* %lpcs, i32 %fcb_type, float* %coeffs, i32 %remainder) #1 !dbg !7373 {
entry:
  %retval.i274 = alloca i32, align 4
  %a.addr.i275 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i275, metadata !3701, metadata !2040), !dbg !7376
  %amin.addr.i276 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amin.addr.i276, metadata !3705, metadata !2040), !dbg !7381
  %amax.addr.i277 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amax.addr.i277, metadata !3707, metadata !2040), !dbg !7382
  %retval.i263 = alloca i32, align 4
  %a.addr.i264 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i264, metadata !3701, metadata !2040), !dbg !7383
  %amin.addr.i265 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amin.addr.i265, metadata !3705, metadata !2040), !dbg !7385
  %amax.addr.i266 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amax.addr.i266, metadata !3707, metadata !2040), !dbg !7386
  %retval.i252 = alloca i32, align 4
  %a.addr.i253 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i253, metadata !3701, metadata !2040), !dbg !7387
  %amin.addr.i254 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amin.addr.i254, metadata !3705, metadata !2040), !dbg !7389
  %amax.addr.i255 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amax.addr.i255, metadata !3707, metadata !2040), !dbg !7390
  %retval.i = alloca i32, align 4
  %a.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr.i, metadata !3701, metadata !2040), !dbg !7391
  %amin.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amin.addr.i, metadata !3705, metadata !2040), !dbg !7393
  %amax.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %amax.addr.i, metadata !3707, metadata !2040), !dbg !7394
  %s.addr = alloca %struct.WMAVoiceContext*, align 8
  %lpcs.addr = alloca float*, align 8
  %fcb_type.addr = alloca i32, align 4
  %coeffs.addr = alloca float*, align 8
  %remainder.addr = alloca i32, align 4
  %last_coeff = alloca float, align 4
  %min = alloca float, align 4
  %max = alloca float, align 4
  %irange = alloca float, align 4
  %angle_mul = alloca float, align 4
  %gain_mul = alloca float, align 4
  %range = alloca float, align 4
  %sq = alloca float, align 4
  %n = alloca i32, align 4
  %idx = alloca i32, align 4
  %tmp = alloca float, align 4
  %tmp11 = alloca float, align 4
  %tmp43 = alloca float, align 4
  %pwr = alloca float, align 4
  %tilt_mem = alloca float, align 4
  store %struct.WMAVoiceContext* %s, %struct.WMAVoiceContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.WMAVoiceContext** %s.addr, metadata !7395, metadata !2040), !dbg !7396
  store float* %lpcs, float** %lpcs.addr, align 8
  call void @llvm.dbg.declare(metadata float** %lpcs.addr, metadata !7397, metadata !2040), !dbg !7398
  store i32 %fcb_type, i32* %fcb_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fcb_type.addr, metadata !7399, metadata !2040), !dbg !7400
  store float* %coeffs, float** %coeffs.addr, align 8
  call void @llvm.dbg.declare(metadata float** %coeffs.addr, metadata !7401, metadata !2040), !dbg !7402
  store i32 %remainder, i32* %remainder.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %remainder.addr, metadata !7403, metadata !2040), !dbg !7404
  call void @llvm.dbg.declare(metadata float* %last_coeff, metadata !7405, metadata !2040), !dbg !7406
  call void @llvm.dbg.declare(metadata float* %min, metadata !7407, metadata !2040), !dbg !7408
  store float 1.500000e+01, float* %min, align 4, !dbg !7408
  call void @llvm.dbg.declare(metadata float* %max, metadata !7409, metadata !2040), !dbg !7410
  store float -1.500000e+01, float* %max, align 4, !dbg !7410
  call void @llvm.dbg.declare(metadata float* %irange, metadata !7411, metadata !2040), !dbg !7412
  call void @llvm.dbg.declare(metadata float* %angle_mul, metadata !7413, metadata !2040), !dbg !7414
  call void @llvm.dbg.declare(metadata float* %gain_mul, metadata !7415, metadata !2040), !dbg !7416
  call void @llvm.dbg.declare(metadata float* %range, metadata !7417, metadata !2040), !dbg !7418
  call void @llvm.dbg.declare(metadata float* %sq, metadata !7419, metadata !2040), !dbg !7420
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7421, metadata !2040), !dbg !7422
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !7423, metadata !2040), !dbg !7424
  %0 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7425
  %rdft = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %0, i32 0, i32 40, !dbg !7426
  %rdft_calc = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %rdft, i32 0, i32 7, !dbg !7427
  %1 = load void (%struct.RDFTContext*, float*)*, void (%struct.RDFTContext*, float*)** %rdft_calc, align 8, !dbg !7427
  %2 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7428
  %rdft1 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %2, i32 0, i32 40, !dbg !7429
  %3 = load float*, float** %lpcs.addr, align 8, !dbg !7430
  call void %1(%struct.RDFTContext* %rdft1, float* %3), !dbg !7425
  br label %do.body, !dbg !7431, !llvm.loop !7432

do.body:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata float* %tmp, metadata !7433, metadata !2040), !dbg !7435
  %4 = load float*, float** %lpcs.addr, align 8, !dbg !7436
  %arrayidx = getelementptr inbounds float, float* %4, i64 1, !dbg !7436
  %5 = load float, float* %arrayidx, align 4, !dbg !7436
  %6 = load float*, float** %lpcs.addr, align 8, !dbg !7438
  %arrayidx2 = getelementptr inbounds float, float* %6, i64 1, !dbg !7438
  %7 = load float, float* %arrayidx2, align 4, !dbg !7438
  %mul = fmul float %5, %7, !dbg !7439
  %call = call float @log10f(float %mul) #9, !dbg !7440
  store float %call, float* %tmp, align 4, !dbg !7441
  %8 = load float, float* %tmp, align 4, !dbg !7442
  store float %8, float* %last_coeff, align 4, !dbg !7443
  %9 = load float, float* %max, align 4, !dbg !7444
  %10 = load float, float* %tmp, align 4, !dbg !7445
  %cmp = fcmp ogt float %9, %10, !dbg !7446
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7447

cond.true:                                        ; preds = %do.body
  %11 = load float, float* %max, align 4, !dbg !7448
  br label %cond.end, !dbg !7450

cond.false:                                       ; preds = %do.body
  %12 = load float, float* %tmp, align 4, !dbg !7451
  br label %cond.end, !dbg !7453

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %11, %cond.true ], [ %12, %cond.false ], !dbg !7454
  store float %cond, float* %max, align 4, !dbg !7456
  %13 = load float, float* %min, align 4, !dbg !7457
  %14 = load float, float* %tmp, align 4, !dbg !7458
  %cmp3 = fcmp ogt float %13, %14, !dbg !7459
  br i1 %cmp3, label %cond.true4, label %cond.false5, !dbg !7460

cond.true4:                                       ; preds = %cond.end
  %15 = load float, float* %tmp, align 4, !dbg !7461
  br label %cond.end6, !dbg !7463

cond.false5:                                      ; preds = %cond.end
  %16 = load float, float* %min, align 4, !dbg !7464
  br label %cond.end6, !dbg !7466

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi float [ %15, %cond.true4 ], [ %16, %cond.false5 ], !dbg !7467
  store float %cond7, float* %min, align 4, !dbg !7469
  br label %do.end, !dbg !7470

do.end:                                           ; preds = %cond.end6
  store i32 1, i32* %n, align 4, !dbg !7471
  br label %for.cond, !dbg !7473

for.cond:                                         ; preds = %for.inc, %do.end
  %17 = load i32, i32* %n, align 4, !dbg !7474
  %cmp8 = icmp slt i32 %17, 64, !dbg !7477
  br i1 %cmp8, label %for.body, label %for.end, !dbg !7478

for.body:                                         ; preds = %for.cond
  br label %do.body9, !dbg !7479, !llvm.loop !7480

do.body9:                                         ; preds = %for.body
  call void @llvm.dbg.declare(metadata float* %tmp11, metadata !7481, metadata !2040), !dbg !7483
  %18 = load i32, i32* %n, align 4, !dbg !7484
  %mul12 = mul nsw i32 %18, 2, !dbg !7486
  %idxprom = sext i32 %mul12 to i64, !dbg !7487
  %19 = load float*, float** %lpcs.addr, align 8, !dbg !7487
  %arrayidx13 = getelementptr inbounds float, float* %19, i64 %idxprom, !dbg !7487
  %20 = load float, float* %arrayidx13, align 4, !dbg !7487
  %21 = load i32, i32* %n, align 4, !dbg !7488
  %mul14 = mul nsw i32 %21, 2, !dbg !7489
  %idxprom15 = sext i32 %mul14 to i64, !dbg !7490
  %22 = load float*, float** %lpcs.addr, align 8, !dbg !7490
  %arrayidx16 = getelementptr inbounds float, float* %22, i64 %idxprom15, !dbg !7490
  %23 = load float, float* %arrayidx16, align 4, !dbg !7490
  %mul17 = fmul float %20, %23, !dbg !7491
  %24 = load i32, i32* %n, align 4, !dbg !7492
  %mul18 = mul nsw i32 %24, 2, !dbg !7493
  %add = add nsw i32 %mul18, 1, !dbg !7494
  %idxprom19 = sext i32 %add to i64, !dbg !7495
  %25 = load float*, float** %lpcs.addr, align 8, !dbg !7495
  %arrayidx20 = getelementptr inbounds float, float* %25, i64 %idxprom19, !dbg !7495
  %26 = load float, float* %arrayidx20, align 4, !dbg !7495
  %27 = load i32, i32* %n, align 4, !dbg !7496
  %mul21 = mul nsw i32 %27, 2, !dbg !7497
  %add22 = add nsw i32 %mul21, 1, !dbg !7498
  %idxprom23 = sext i32 %add22 to i64, !dbg !7499
  %28 = load float*, float** %lpcs.addr, align 8, !dbg !7499
  %arrayidx24 = getelementptr inbounds float, float* %28, i64 %idxprom23, !dbg !7499
  %29 = load float, float* %arrayidx24, align 4, !dbg !7499
  %mul25 = fmul float %26, %29, !dbg !7500
  %add26 = fadd float %mul17, %mul25, !dbg !7501
  %call27 = call float @log10f(float %add26) #9, !dbg !7502
  store float %call27, float* %tmp11, align 4, !dbg !7503
  %30 = load float, float* %tmp11, align 4, !dbg !7504
  %31 = load i32, i32* %n, align 4, !dbg !7505
  %idxprom28 = sext i32 %31 to i64, !dbg !7506
  %32 = load float*, float** %lpcs.addr, align 8, !dbg !7506
  %arrayidx29 = getelementptr inbounds float, float* %32, i64 %idxprom28, !dbg !7506
  store float %30, float* %arrayidx29, align 4, !dbg !7507
  %33 = load float, float* %max, align 4, !dbg !7508
  %34 = load float, float* %tmp11, align 4, !dbg !7509
  %cmp30 = fcmp ogt float %33, %34, !dbg !7510
  br i1 %cmp30, label %cond.true31, label %cond.false32, !dbg !7511

cond.true31:                                      ; preds = %do.body9
  %35 = load float, float* %max, align 4, !dbg !7512
  br label %cond.end33, !dbg !7514

cond.false32:                                     ; preds = %do.body9
  %36 = load float, float* %tmp11, align 4, !dbg !7515
  br label %cond.end33, !dbg !7517

cond.end33:                                       ; preds = %cond.false32, %cond.true31
  %cond34 = phi float [ %35, %cond.true31 ], [ %36, %cond.false32 ], !dbg !7518
  store float %cond34, float* %max, align 4, !dbg !7520
  %37 = load float, float* %min, align 4, !dbg !7521
  %38 = load float, float* %tmp11, align 4, !dbg !7522
  %cmp35 = fcmp ogt float %37, %38, !dbg !7523
  br i1 %cmp35, label %cond.true36, label %cond.false37, !dbg !7524

cond.true36:                                      ; preds = %cond.end33
  %39 = load float, float* %tmp11, align 4, !dbg !7525
  br label %cond.end38, !dbg !7527

cond.false37:                                     ; preds = %cond.end33
  %40 = load float, float* %min, align 4, !dbg !7528
  br label %cond.end38, !dbg !7530

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond39 = phi float [ %39, %cond.true36 ], [ %40, %cond.false37 ], !dbg !7531
  store float %cond39, float* %min, align 4, !dbg !7533
  br label %do.end40, !dbg !7534

do.end40:                                         ; preds = %cond.end38
  br label %for.inc, !dbg !7535

for.inc:                                          ; preds = %do.end40
  %41 = load i32, i32* %n, align 4, !dbg !7537
  %inc = add nsw i32 %41, 1, !dbg !7537
  store i32 %inc, i32* %n, align 4, !dbg !7537
  br label %for.cond, !dbg !7539, !llvm.loop !7540

for.end:                                          ; preds = %for.cond
  br label %do.body41, !dbg !7542, !llvm.loop !7543

do.body41:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata float* %tmp43, metadata !7544, metadata !2040), !dbg !7546
  %42 = load float*, float** %lpcs.addr, align 8, !dbg !7547
  %arrayidx44 = getelementptr inbounds float, float* %42, i64 0, !dbg !7547
  %43 = load float, float* %arrayidx44, align 4, !dbg !7547
  %44 = load float*, float** %lpcs.addr, align 8, !dbg !7549
  %arrayidx45 = getelementptr inbounds float, float* %44, i64 0, !dbg !7549
  %45 = load float, float* %arrayidx45, align 4, !dbg !7549
  %mul46 = fmul float %43, %45, !dbg !7550
  %call47 = call float @log10f(float %mul46) #9, !dbg !7551
  store float %call47, float* %tmp43, align 4, !dbg !7552
  %46 = load float, float* %tmp43, align 4, !dbg !7553
  %47 = load float*, float** %lpcs.addr, align 8, !dbg !7554
  %arrayidx48 = getelementptr inbounds float, float* %47, i64 0, !dbg !7554
  store float %46, float* %arrayidx48, align 4, !dbg !7555
  %48 = load float, float* %max, align 4, !dbg !7556
  %49 = load float, float* %tmp43, align 4, !dbg !7557
  %cmp49 = fcmp ogt float %48, %49, !dbg !7558
  br i1 %cmp49, label %cond.true50, label %cond.false51, !dbg !7559

cond.true50:                                      ; preds = %do.body41
  %50 = load float, float* %max, align 4, !dbg !7560
  br label %cond.end52, !dbg !7562

cond.false51:                                     ; preds = %do.body41
  %51 = load float, float* %tmp43, align 4, !dbg !7563
  br label %cond.end52, !dbg !7565

cond.end52:                                       ; preds = %cond.false51, %cond.true50
  %cond53 = phi float [ %50, %cond.true50 ], [ %51, %cond.false51 ], !dbg !7566
  store float %cond53, float* %max, align 4, !dbg !7568
  %52 = load float, float* %min, align 4, !dbg !7569
  %53 = load float, float* %tmp43, align 4, !dbg !7570
  %cmp54 = fcmp ogt float %52, %53, !dbg !7571
  br i1 %cmp54, label %cond.true55, label %cond.false56, !dbg !7572

cond.true55:                                      ; preds = %cond.end52
  %54 = load float, float* %tmp43, align 4, !dbg !7573
  br label %cond.end57, !dbg !7575

cond.false56:                                     ; preds = %cond.end52
  %55 = load float, float* %min, align 4, !dbg !7576
  br label %cond.end57, !dbg !7578

cond.end57:                                       ; preds = %cond.false56, %cond.true55
  %cond58 = phi float [ %54, %cond.true55 ], [ %55, %cond.false56 ], !dbg !7579
  store float %cond58, float* %min, align 4, !dbg !7581
  br label %do.end59, !dbg !7582

do.end59:                                         ; preds = %cond.end57
  %56 = load float, float* %max, align 4, !dbg !7583
  %57 = load float, float* %min, align 4, !dbg !7584
  %sub = fsub float %56, %57, !dbg !7585
  store float %sub, float* %range, align 4, !dbg !7586
  %58 = load float, float* %last_coeff, align 4, !dbg !7587
  %59 = load float*, float** %lpcs.addr, align 8, !dbg !7588
  %arrayidx60 = getelementptr inbounds float, float* %59, i64 64, !dbg !7588
  store float %58, float* %arrayidx60, align 4, !dbg !7589
  %60 = load float, float* %range, align 4, !dbg !7590
  %conv = fpext float %60 to double, !dbg !7590
  %div = fdiv double 6.400000e+01, %conv, !dbg !7591
  %conv61 = fptrunc double %div to float, !dbg !7592
  store float %conv61, float* %irange, align 4, !dbg !7593
  %61 = load float, float* %range, align 4, !dbg !7594
  %conv62 = fpext float %61 to double, !dbg !7594
  %62 = load i32, i32* %fcb_type.addr, align 4, !dbg !7595
  %cmp63 = icmp eq i32 %62, 1, !dbg !7596
  %cond65 = select i1 %cmp63, double 0x3FD89D89D89D89D9, double 0x3FD5C4CA037BA571, !dbg !7595
  %mul66 = fmul double %conv62, %cond65, !dbg !7597
  %conv67 = fptrunc double %mul66 to float, !dbg !7594
  store float %conv67, float* %gain_mul, align 4, !dbg !7598
  %63 = load float, float* %gain_mul, align 4, !dbg !7599
  %conv68 = fpext float %63 to double, !dbg !7599
  %mul69 = fmul double %conv68, 0x401774355B685CB5, !dbg !7600
  %conv70 = fptrunc double %mul69 to float, !dbg !7599
  store float %conv70, float* %angle_mul, align 4, !dbg !7601
  store i32 0, i32* %n, align 4, !dbg !7602
  br label %for.cond71, !dbg !7604

for.cond71:                                       ; preds = %for.inc127, %do.end59
  %64 = load i32, i32* %n, align 4, !dbg !7605
  %cmp72 = icmp sle i32 %64, 64, !dbg !7608
  br i1 %cmp72, label %for.body74, label %for.end129, !dbg !7609

for.body74:                                       ; preds = %for.cond71
  call void @llvm.dbg.declare(metadata float* %pwr, metadata !7610, metadata !2040), !dbg !7612
  %65 = load float, float* %max, align 4, !dbg !7613
  %66 = load i32, i32* %n, align 4, !dbg !7614
  %idxprom76 = sext i32 %66 to i64, !dbg !7615
  %67 = load float*, float** %lpcs.addr, align 8, !dbg !7615
  %arrayidx77 = getelementptr inbounds float, float* %67, i64 %idxprom76, !dbg !7615
  %68 = load float, float* %arrayidx77, align 4, !dbg !7615
  %sub78 = fsub float %65, %68, !dbg !7616
  %69 = load float, float* %irange, align 4, !dbg !7617
  %mul79 = fmul float %sub78, %69, !dbg !7618
  %conv80 = fpext float %mul79 to double, !dbg !7619
  %call81 = call i64 @lrint(double %conv80) #9, !dbg !7620
  %sub82 = sub nsw i64 %call81, 1, !dbg !7621
  %cmp83 = icmp sgt i64 0, %sub82, !dbg !7622
  br i1 %cmp83, label %cond.true85, label %cond.false86, !dbg !7623

cond.true85:                                      ; preds = %for.body74
  br label %cond.end94, !dbg !7624

cond.false86:                                     ; preds = %for.body74
  %70 = load float, float* %max, align 4, !dbg !7626
  %71 = load i32, i32* %n, align 4, !dbg !7628
  %idxprom87 = sext i32 %71 to i64, !dbg !7629
  %72 = load float*, float** %lpcs.addr, align 8, !dbg !7629
  %arrayidx88 = getelementptr inbounds float, float* %72, i64 %idxprom87, !dbg !7629
  %73 = load float, float* %arrayidx88, align 4, !dbg !7629
  %sub89 = fsub float %70, %73, !dbg !7630
  %74 = load float, float* %irange, align 4, !dbg !7631
  %mul90 = fmul float %sub89, %74, !dbg !7632
  %conv91 = fpext float %mul90 to double, !dbg !7633
  %call92 = call i64 @lrint(double %conv91) #9, !dbg !7634
  %sub93 = sub nsw i64 %call92, 1, !dbg !7635
  br label %cond.end94, !dbg !7636

cond.end94:                                       ; preds = %cond.false86, %cond.true85
  %cond95 = phi i64 [ 0, %cond.true85 ], [ %sub93, %cond.false86 ], !dbg !7637
  %conv96 = trunc i64 %cond95 to i32, !dbg !7639
  store i32 %conv96, i32* %idx, align 4, !dbg !7640
  %75 = load i32, i32* %idx, align 4, !dbg !7641
  %idxprom97 = sext i32 %75 to i64, !dbg !7642
  %76 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7643
  %denoise_strength = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %76, i32 0, i32 5, !dbg !7644
  %77 = load i32, i32* %denoise_strength, align 8, !dbg !7644
  %idxprom98 = sext i32 %77 to i64, !dbg !7642
  %arrayidx99 = getelementptr inbounds [12 x [64 x float]], [12 x [64 x float]]* @wmavoice_denoise_power_table, i64 0, i64 %idxprom98, !dbg !7642
  %arrayidx100 = getelementptr inbounds [64 x float], [64 x float]* %arrayidx99, i64 0, i64 %idxprom97, !dbg !7642
  %78 = load float, float* %arrayidx100, align 4, !dbg !7642
  store float %78, float* %pwr, align 4, !dbg !7645
  %79 = load float, float* %angle_mul, align 4, !dbg !7646
  %80 = load float, float* %pwr, align 4, !dbg !7647
  %mul101 = fmul float %79, %80, !dbg !7648
  %81 = load i32, i32* %n, align 4, !dbg !7649
  %idxprom102 = sext i32 %81 to i64, !dbg !7650
  %82 = load float*, float** %lpcs.addr, align 8, !dbg !7650
  %arrayidx103 = getelementptr inbounds float, float* %82, i64 %idxprom102, !dbg !7650
  store float %mul101, float* %arrayidx103, align 4, !dbg !7651
  %83 = load float, float* %pwr, align 4, !dbg !7652
  %84 = load float, float* %gain_mul, align 4, !dbg !7653
  %mul104 = fmul float %83, %84, !dbg !7654
  %conv105 = fpext float %mul104 to double, !dbg !7652
  %sub106 = fsub double %conv105, 2.950000e-02, !dbg !7655
  %mul107 = fmul double %sub106, 0x4051A4837FFFF31D, !dbg !7656
  %conv108 = fptosi double %mul107 to i32, !dbg !7657
  store i32 %conv108, i32* %idx, align 4, !dbg !7658
  %85 = load i32, i32* %idx, align 4, !dbg !7659
  %cmp109 = icmp sgt i32 %85, 127, !dbg !7661
  br i1 %cmp109, label %if.then, label %if.else, !dbg !7662

if.then:                                          ; preds = %cond.end94
  %86 = load float, float* getelementptr inbounds ([128 x float], [128 x float]* @wmavoice_energy_table, i64 0, i64 127), align 4, !dbg !7663
  %87 = load i32, i32* %idx, align 4, !dbg !7665
  %sub111 = sub nsw i32 %87, 127, !dbg !7666
  %conv112 = sitofp i32 %sub111 to float, !dbg !7665
  %call113 = call float @powf(float 0x3FF087D960000000, float %conv112) #9, !dbg !7667
  %mul114 = fmul float %86, %call113, !dbg !7668
  %88 = load i32, i32* %n, align 4, !dbg !7669
  %idxprom115 = sext i32 %88 to i64, !dbg !7670
  %89 = load float*, float** %coeffs.addr, align 8, !dbg !7670
  %arrayidx116 = getelementptr inbounds float, float* %89, i64 %idxprom115, !dbg !7670
  store float %mul114, float* %arrayidx116, align 4, !dbg !7671
  br label %if.end, !dbg !7672

if.else:                                          ; preds = %cond.end94
  %90 = load i32, i32* %idx, align 4, !dbg !7673
  %cmp117 = icmp sgt i32 0, %90, !dbg !7674
  br i1 %cmp117, label %cond.true119, label %cond.false120, !dbg !7675

cond.true119:                                     ; preds = %if.else
  br label %cond.end121, !dbg !7676

cond.false120:                                    ; preds = %if.else
  %91 = load i32, i32* %idx, align 4, !dbg !7678
  br label %cond.end121, !dbg !7680

cond.end121:                                      ; preds = %cond.false120, %cond.true119
  %cond122 = phi i32 [ 0, %cond.true119 ], [ %91, %cond.false120 ], !dbg !7681
  %idxprom123 = sext i32 %cond122 to i64, !dbg !7683
  %arrayidx124 = getelementptr inbounds [128 x float], [128 x float]* @wmavoice_energy_table, i64 0, i64 %idxprom123, !dbg !7683
  %92 = load float, float* %arrayidx124, align 4, !dbg !7683
  %93 = load i32, i32* %n, align 4, !dbg !7684
  %idxprom125 = sext i32 %93 to i64, !dbg !7685
  %94 = load float*, float** %coeffs.addr, align 8, !dbg !7685
  %arrayidx126 = getelementptr inbounds float, float* %94, i64 %idxprom125, !dbg !7685
  store float %92, float* %arrayidx126, align 4, !dbg !7686
  br label %if.end

if.end:                                           ; preds = %cond.end121, %if.then
  br label %for.inc127, !dbg !7687

for.inc127:                                       ; preds = %if.end
  %95 = load i32, i32* %n, align 4, !dbg !7688
  %inc128 = add nsw i32 %95, 1, !dbg !7688
  store i32 %inc128, i32* %n, align 4, !dbg !7688
  br label %for.cond71, !dbg !7690, !llvm.loop !7691

for.end129:                                       ; preds = %for.cond71
  %96 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7693
  %dct = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %96, i32 0, i32 42, !dbg !7694
  %dct_calc = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %dct, i32 0, i32 5, !dbg !7695
  %97 = load void (%struct.DCTContext*, float*)*, void (%struct.DCTContext*, float*)** %dct_calc, align 8, !dbg !7695
  %98 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7696
  %dct130 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %98, i32 0, i32 42, !dbg !7697
  %99 = load float*, float** %lpcs.addr, align 8, !dbg !7698
  call void %97(%struct.DCTContext* %dct130, float* %99), !dbg !7693
  %100 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7699
  %dst = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %100, i32 0, i32 43, !dbg !7700
  %dct_calc131 = getelementptr inbounds %struct.DCTContext, %struct.DCTContext* %dst, i32 0, i32 5, !dbg !7701
  %101 = load void (%struct.DCTContext*, float*)*, void (%struct.DCTContext*, float*)** %dct_calc131, align 8, !dbg !7701
  %102 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7702
  %dst132 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %102, i32 0, i32 43, !dbg !7703
  %103 = load float*, float** %lpcs.addr, align 8, !dbg !7704
  call void %101(%struct.DCTContext* %dst132, float* %103), !dbg !7699
  %104 = load float*, float** %lpcs.addr, align 8, !dbg !7705
  %arrayidx133 = getelementptr inbounds float, float* %104, i64 64, !dbg !7705
  %105 = load float, float* %arrayidx133, align 4, !dbg !7705
  %conv134 = fptosi float %105 to i32, !dbg !7705
  store i32 %conv134, i32* %a.addr.i, align 4, !dbg !7706
  store i32 -255, i32* %amin.addr.i, align 4, !dbg !7706
  store i32 255, i32* %amax.addr.i, align 4, !dbg !7706
  %106 = load i32, i32* %a.addr.i, align 4, !dbg !7707
  %107 = load i32, i32* %amin.addr.i, align 4, !dbg !7708
  %cmp.i = icmp slt i32 %106, %107, !dbg !7709
  br i1 %cmp.i, label %if.then.i, label %if.else.i, !dbg !7710

if.then.i:                                        ; preds = %for.end129
  %108 = load i32, i32* %amin.addr.i, align 4, !dbg !7711
  store i32 %108, i32* %retval.i, align 4, !dbg !7712
  br label %av_clip_c.exit, !dbg !7712

if.else.i:                                        ; preds = %for.end129
  %109 = load i32, i32* %a.addr.i, align 4, !dbg !7713
  %110 = load i32, i32* %amax.addr.i, align 4, !dbg !7714
  %cmp1.i = icmp sgt i32 %109, %110, !dbg !7715
  br i1 %cmp1.i, label %if.then2.i, label %if.else3.i, !dbg !7716

if.then2.i:                                       ; preds = %if.else.i
  %111 = load i32, i32* %amax.addr.i, align 4, !dbg !7717
  store i32 %111, i32* %retval.i, align 4, !dbg !7718
  br label %av_clip_c.exit, !dbg !7718

if.else3.i:                                       ; preds = %if.else.i
  %112 = load i32, i32* %a.addr.i, align 4, !dbg !7719
  store i32 %112, i32* %retval.i, align 4, !dbg !7720
  br label %av_clip_c.exit, !dbg !7720

av_clip_c.exit:                                   ; preds = %if.then.i, %if.then2.i, %if.else3.i
  %113 = load i32, i32* %retval.i, align 4, !dbg !7721
  %add136 = add nsw i32 255, %113, !dbg !7722
  store i32 %add136, i32* %idx, align 4, !dbg !7723
  %114 = load float*, float** %coeffs.addr, align 8, !dbg !7724
  %arrayidx137 = getelementptr inbounds float, float* %114, i64 0, !dbg !7724
  %115 = load float, float* %arrayidx137, align 4, !dbg !7724
  %116 = load i32, i32* %idx, align 4, !dbg !7725
  %idxprom138 = sext i32 %116 to i64, !dbg !7726
  %117 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7726
  %cos = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %117, i32 0, i32 45, !dbg !7727
  %arrayidx139 = getelementptr inbounds [511 x float], [511 x float]* %cos, i64 0, i64 %idxprom138, !dbg !7726
  %118 = load float, float* %arrayidx139, align 4, !dbg !7726
  %mul140 = fmul float %115, %118, !dbg !7728
  %119 = load float*, float** %coeffs.addr, align 8, !dbg !7729
  %arrayidx141 = getelementptr inbounds float, float* %119, i64 0, !dbg !7729
  store float %mul140, float* %arrayidx141, align 4, !dbg !7730
  %120 = load float*, float** %lpcs.addr, align 8, !dbg !7731
  %arrayidx142 = getelementptr inbounds float, float* %120, i64 64, !dbg !7731
  %121 = load float, float* %arrayidx142, align 4, !dbg !7731
  %122 = load float*, float** %lpcs.addr, align 8, !dbg !7732
  %arrayidx143 = getelementptr inbounds float, float* %122, i64 63, !dbg !7732
  %123 = load float, float* %arrayidx143, align 4, !dbg !7732
  %mul144 = fmul float 2.000000e+00, %123, !dbg !7733
  %sub145 = fsub float %121, %mul144, !dbg !7734
  %conv146 = fptosi float %sub145 to i32, !dbg !7731
  store i32 %conv146, i32* %a.addr.i253, align 4, !dbg !7735
  store i32 -255, i32* %amin.addr.i254, align 4, !dbg !7735
  store i32 255, i32* %amax.addr.i255, align 4, !dbg !7735
  %124 = load i32, i32* %a.addr.i253, align 4, !dbg !7736
  %125 = load i32, i32* %amin.addr.i254, align 4, !dbg !7737
  %cmp.i256 = icmp slt i32 %124, %125, !dbg !7738
  br i1 %cmp.i256, label %if.then.i257, label %if.else.i259, !dbg !7739

if.then.i257:                                     ; preds = %av_clip_c.exit
  %126 = load i32, i32* %amin.addr.i254, align 4, !dbg !7740
  store i32 %126, i32* %retval.i252, align 4, !dbg !7741
  br label %av_clip_c.exit262, !dbg !7741

if.else.i259:                                     ; preds = %av_clip_c.exit
  %127 = load i32, i32* %a.addr.i253, align 4, !dbg !7742
  %128 = load i32, i32* %amax.addr.i255, align 4, !dbg !7743
  %cmp1.i258 = icmp sgt i32 %127, %128, !dbg !7744
  br i1 %cmp1.i258, label %if.then2.i260, label %if.else3.i261, !dbg !7745

if.then2.i260:                                    ; preds = %if.else.i259
  %129 = load i32, i32* %amax.addr.i255, align 4, !dbg !7746
  store i32 %129, i32* %retval.i252, align 4, !dbg !7747
  br label %av_clip_c.exit262, !dbg !7747

if.else3.i261:                                    ; preds = %if.else.i259
  %130 = load i32, i32* %a.addr.i253, align 4, !dbg !7748
  store i32 %130, i32* %retval.i252, align 4, !dbg !7749
  br label %av_clip_c.exit262, !dbg !7749

av_clip_c.exit262:                                ; preds = %if.then.i257, %if.then2.i260, %if.else3.i261
  %131 = load i32, i32* %retval.i252, align 4, !dbg !7750
  %add148 = add nsw i32 255, %131, !dbg !7751
  store i32 %add148, i32* %idx, align 4, !dbg !7752
  %132 = load float*, float** %coeffs.addr, align 8, !dbg !7753
  %arrayidx149 = getelementptr inbounds float, float* %132, i64 64, !dbg !7753
  %133 = load float, float* %arrayidx149, align 4, !dbg !7753
  %134 = load i32, i32* %idx, align 4, !dbg !7754
  %idxprom150 = sext i32 %134 to i64, !dbg !7755
  %135 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7755
  %cos151 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %135, i32 0, i32 45, !dbg !7756
  %arrayidx152 = getelementptr inbounds [511 x float], [511 x float]* %cos151, i64 0, i64 %idxprom150, !dbg !7755
  %136 = load float, float* %arrayidx152, align 4, !dbg !7755
  %mul153 = fmul float %133, %136, !dbg !7757
  store float %mul153, float* %last_coeff, align 4, !dbg !7758
  store i32 63, i32* %n, align 4, !dbg !7759
  br label %for.cond154, !dbg !7760

for.cond154:                                      ; preds = %for.inc213, %av_clip_c.exit262
  %137 = load float*, float** %lpcs.addr, align 8, !dbg !7761
  %arrayidx155 = getelementptr inbounds float, float* %137, i64 64, !dbg !7761
  %138 = load float, float* %arrayidx155, align 4, !dbg !7761
  %sub156 = fsub float -0.000000e+00, %138, !dbg !7762
  %139 = load i32, i32* %n, align 4, !dbg !7763
  %sub157 = sub nsw i32 %139, 1, !dbg !7764
  %idxprom158 = sext i32 %sub157 to i64, !dbg !7765
  %140 = load float*, float** %lpcs.addr, align 8, !dbg !7765
  %arrayidx159 = getelementptr inbounds float, float* %140, i64 %idxprom158, !dbg !7765
  %141 = load float, float* %arrayidx159, align 4, !dbg !7765
  %mul160 = fmul float 2.000000e+00, %141, !dbg !7766
  %sub161 = fsub float %sub156, %mul160, !dbg !7767
  %conv162 = fptosi float %sub161 to i32, !dbg !7762
  store i32 %conv162, i32* %a.addr.i264, align 4, !dbg !7768
  store i32 -255, i32* %amin.addr.i265, align 4, !dbg !7768
  store i32 255, i32* %amax.addr.i266, align 4, !dbg !7768
  %142 = load i32, i32* %a.addr.i264, align 4, !dbg !7769
  %143 = load i32, i32* %amin.addr.i265, align 4, !dbg !7770
  %cmp.i267 = icmp slt i32 %142, %143, !dbg !7771
  br i1 %cmp.i267, label %if.then.i268, label %if.else.i270, !dbg !7772

if.then.i268:                                     ; preds = %for.cond154
  %144 = load i32, i32* %amin.addr.i265, align 4, !dbg !7773
  store i32 %144, i32* %retval.i263, align 4, !dbg !7774
  br label %av_clip_c.exit273, !dbg !7774

if.else.i270:                                     ; preds = %for.cond154
  %145 = load i32, i32* %a.addr.i264, align 4, !dbg !7775
  %146 = load i32, i32* %amax.addr.i266, align 4, !dbg !7776
  %cmp1.i269 = icmp sgt i32 %145, %146, !dbg !7777
  br i1 %cmp1.i269, label %if.then2.i271, label %if.else3.i272, !dbg !7778

if.then2.i271:                                    ; preds = %if.else.i270
  %147 = load i32, i32* %amax.addr.i266, align 4, !dbg !7779
  store i32 %147, i32* %retval.i263, align 4, !dbg !7780
  br label %av_clip_c.exit273, !dbg !7780

if.else3.i272:                                    ; preds = %if.else.i270
  %148 = load i32, i32* %a.addr.i264, align 4, !dbg !7781
  store i32 %148, i32* %retval.i263, align 4, !dbg !7782
  br label %av_clip_c.exit273, !dbg !7782

av_clip_c.exit273:                                ; preds = %if.then.i268, %if.then2.i271, %if.else3.i272
  %149 = load i32, i32* %retval.i263, align 4, !dbg !7783
  %add164 = add nsw i32 255, %149, !dbg !7784
  store i32 %add164, i32* %idx, align 4, !dbg !7785
  %150 = load i32, i32* %n, align 4, !dbg !7786
  %idxprom165 = sext i32 %150 to i64, !dbg !7787
  %151 = load float*, float** %coeffs.addr, align 8, !dbg !7787
  %arrayidx166 = getelementptr inbounds float, float* %151, i64 %idxprom165, !dbg !7787
  %152 = load float, float* %arrayidx166, align 4, !dbg !7787
  %153 = load i32, i32* %idx, align 4, !dbg !7788
  %idxprom167 = sext i32 %153 to i64, !dbg !7789
  %154 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7789
  %sin = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %154, i32 0, i32 44, !dbg !7790
  %arrayidx168 = getelementptr inbounds [511 x float], [511 x float]* %sin, i64 0, i64 %idxprom167, !dbg !7789
  %155 = load float, float* %arrayidx168, align 4, !dbg !7789
  %mul169 = fmul float %152, %155, !dbg !7791
  %156 = load i32, i32* %n, align 4, !dbg !7792
  %mul170 = mul nsw i32 %156, 2, !dbg !7793
  %add171 = add nsw i32 %mul170, 1, !dbg !7794
  %idxprom172 = sext i32 %add171 to i64, !dbg !7795
  %157 = load float*, float** %coeffs.addr, align 8, !dbg !7795
  %arrayidx173 = getelementptr inbounds float, float* %157, i64 %idxprom172, !dbg !7795
  store float %mul169, float* %arrayidx173, align 4, !dbg !7796
  %158 = load i32, i32* %n, align 4, !dbg !7797
  %idxprom174 = sext i32 %158 to i64, !dbg !7798
  %159 = load float*, float** %coeffs.addr, align 8, !dbg !7798
  %arrayidx175 = getelementptr inbounds float, float* %159, i64 %idxprom174, !dbg !7798
  %160 = load float, float* %arrayidx175, align 4, !dbg !7798
  %161 = load i32, i32* %idx, align 4, !dbg !7799
  %idxprom176 = sext i32 %161 to i64, !dbg !7800
  %162 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7800
  %cos177 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %162, i32 0, i32 45, !dbg !7801
  %arrayidx178 = getelementptr inbounds [511 x float], [511 x float]* %cos177, i64 0, i64 %idxprom176, !dbg !7800
  %163 = load float, float* %arrayidx178, align 4, !dbg !7800
  %mul179 = fmul float %160, %163, !dbg !7802
  %164 = load i32, i32* %n, align 4, !dbg !7803
  %mul180 = mul nsw i32 %164, 2, !dbg !7804
  %idxprom181 = sext i32 %mul180 to i64, !dbg !7805
  %165 = load float*, float** %coeffs.addr, align 8, !dbg !7805
  %arrayidx182 = getelementptr inbounds float, float* %165, i64 %idxprom181, !dbg !7805
  store float %mul179, float* %arrayidx182, align 4, !dbg !7806
  %166 = load i32, i32* %n, align 4, !dbg !7807
  %dec = add nsw i32 %166, -1, !dbg !7807
  store i32 %dec, i32* %n, align 4, !dbg !7807
  %tobool = icmp ne i32 %dec, 0, !dbg !7807
  br i1 %tobool, label %if.end184, label %if.then183, !dbg !7809

if.then183:                                       ; preds = %av_clip_c.exit273
  br label %for.end215, !dbg !7810

if.end184:                                        ; preds = %av_clip_c.exit273
  %167 = load float*, float** %lpcs.addr, align 8, !dbg !7812
  %arrayidx185 = getelementptr inbounds float, float* %167, i64 64, !dbg !7812
  %168 = load float, float* %arrayidx185, align 4, !dbg !7812
  %169 = load i32, i32* %n, align 4, !dbg !7813
  %sub186 = sub nsw i32 %169, 1, !dbg !7814
  %idxprom187 = sext i32 %sub186 to i64, !dbg !7815
  %170 = load float*, float** %lpcs.addr, align 8, !dbg !7815
  %arrayidx188 = getelementptr inbounds float, float* %170, i64 %idxprom187, !dbg !7815
  %171 = load float, float* %arrayidx188, align 4, !dbg !7815
  %mul189 = fmul float 2.000000e+00, %171, !dbg !7816
  %sub190 = fsub float %168, %mul189, !dbg !7817
  %conv191 = fptosi float %sub190 to i32, !dbg !7812
  store i32 %conv191, i32* %a.addr.i275, align 4, !dbg !7818
  store i32 -255, i32* %amin.addr.i276, align 4, !dbg !7818
  store i32 255, i32* %amax.addr.i277, align 4, !dbg !7818
  %172 = load i32, i32* %a.addr.i275, align 4, !dbg !7819
  %173 = load i32, i32* %amin.addr.i276, align 4, !dbg !7820
  %cmp.i278 = icmp slt i32 %172, %173, !dbg !7821
  br i1 %cmp.i278, label %if.then.i279, label %if.else.i281, !dbg !7822

if.then.i279:                                     ; preds = %if.end184
  %174 = load i32, i32* %amin.addr.i276, align 4, !dbg !7823
  store i32 %174, i32* %retval.i274, align 4, !dbg !7824
  br label %av_clip_c.exit284, !dbg !7824

if.else.i281:                                     ; preds = %if.end184
  %175 = load i32, i32* %a.addr.i275, align 4, !dbg !7825
  %176 = load i32, i32* %amax.addr.i277, align 4, !dbg !7826
  %cmp1.i280 = icmp sgt i32 %175, %176, !dbg !7827
  br i1 %cmp1.i280, label %if.then2.i282, label %if.else3.i283, !dbg !7828

if.then2.i282:                                    ; preds = %if.else.i281
  %177 = load i32, i32* %amax.addr.i277, align 4, !dbg !7829
  store i32 %177, i32* %retval.i274, align 4, !dbg !7830
  br label %av_clip_c.exit284, !dbg !7830

if.else3.i283:                                    ; preds = %if.else.i281
  %178 = load i32, i32* %a.addr.i275, align 4, !dbg !7831
  store i32 %178, i32* %retval.i274, align 4, !dbg !7832
  br label %av_clip_c.exit284, !dbg !7832

av_clip_c.exit284:                                ; preds = %if.then.i279, %if.then2.i282, %if.else3.i283
  %179 = load i32, i32* %retval.i274, align 4, !dbg !7833
  %add193 = add nsw i32 255, %179, !dbg !7834
  store i32 %add193, i32* %idx, align 4, !dbg !7835
  %180 = load i32, i32* %n, align 4, !dbg !7836
  %idxprom194 = sext i32 %180 to i64, !dbg !7837
  %181 = load float*, float** %coeffs.addr, align 8, !dbg !7837
  %arrayidx195 = getelementptr inbounds float, float* %181, i64 %idxprom194, !dbg !7837
  %182 = load float, float* %arrayidx195, align 4, !dbg !7837
  %183 = load i32, i32* %idx, align 4, !dbg !7838
  %idxprom196 = sext i32 %183 to i64, !dbg !7839
  %184 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7839
  %sin197 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %184, i32 0, i32 44, !dbg !7840
  %arrayidx198 = getelementptr inbounds [511 x float], [511 x float]* %sin197, i64 0, i64 %idxprom196, !dbg !7839
  %185 = load float, float* %arrayidx198, align 4, !dbg !7839
  %mul199 = fmul float %182, %185, !dbg !7841
  %186 = load i32, i32* %n, align 4, !dbg !7842
  %mul200 = mul nsw i32 %186, 2, !dbg !7843
  %add201 = add nsw i32 %mul200, 1, !dbg !7844
  %idxprom202 = sext i32 %add201 to i64, !dbg !7845
  %187 = load float*, float** %coeffs.addr, align 8, !dbg !7845
  %arrayidx203 = getelementptr inbounds float, float* %187, i64 %idxprom202, !dbg !7845
  store float %mul199, float* %arrayidx203, align 4, !dbg !7846
  %188 = load i32, i32* %n, align 4, !dbg !7847
  %idxprom204 = sext i32 %188 to i64, !dbg !7848
  %189 = load float*, float** %coeffs.addr, align 8, !dbg !7848
  %arrayidx205 = getelementptr inbounds float, float* %189, i64 %idxprom204, !dbg !7848
  %190 = load float, float* %arrayidx205, align 4, !dbg !7848
  %191 = load i32, i32* %idx, align 4, !dbg !7849
  %idxprom206 = sext i32 %191 to i64, !dbg !7850
  %192 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7850
  %cos207 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %192, i32 0, i32 45, !dbg !7851
  %arrayidx208 = getelementptr inbounds [511 x float], [511 x float]* %cos207, i64 0, i64 %idxprom206, !dbg !7850
  %193 = load float, float* %arrayidx208, align 4, !dbg !7850
  %mul209 = fmul float %190, %193, !dbg !7852
  %194 = load i32, i32* %n, align 4, !dbg !7853
  %mul210 = mul nsw i32 %194, 2, !dbg !7854
  %idxprom211 = sext i32 %mul210 to i64, !dbg !7855
  %195 = load float*, float** %coeffs.addr, align 8, !dbg !7855
  %arrayidx212 = getelementptr inbounds float, float* %195, i64 %idxprom211, !dbg !7855
  store float %mul209, float* %arrayidx212, align 4, !dbg !7856
  br label %for.inc213, !dbg !7857

for.inc213:                                       ; preds = %av_clip_c.exit284
  %196 = load i32, i32* %n, align 4, !dbg !7858
  %dec214 = add nsw i32 %196, -1, !dbg !7858
  store i32 %dec214, i32* %n, align 4, !dbg !7858
  br label %for.cond154, !dbg !7860, !llvm.loop !7861

for.end215:                                       ; preds = %if.then183
  %197 = load float, float* %last_coeff, align 4, !dbg !7863
  %198 = load float*, float** %coeffs.addr, align 8, !dbg !7864
  %arrayidx216 = getelementptr inbounds float, float* %198, i64 1, !dbg !7864
  store float %197, float* %arrayidx216, align 4, !dbg !7865
  %199 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7866
  %irdft = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %199, i32 0, i32 41, !dbg !7867
  %rdft_calc217 = getelementptr inbounds %struct.RDFTContext, %struct.RDFTContext* %irdft, i32 0, i32 7, !dbg !7868
  %200 = load void (%struct.RDFTContext*, float*)*, void (%struct.RDFTContext*, float*)** %rdft_calc217, align 8, !dbg !7868
  %201 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7869
  %irdft218 = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %201, i32 0, i32 41, !dbg !7870
  %202 = load float*, float** %coeffs.addr, align 8, !dbg !7871
  call void %200(%struct.RDFTContext* %irdft218, float* %202), !dbg !7866
  %203 = load i32, i32* %remainder.addr, align 4, !dbg !7872
  %idxprom219 = sext i32 %203 to i64, !dbg !7873
  %204 = load float*, float** %coeffs.addr, align 8, !dbg !7873
  %arrayidx220 = getelementptr inbounds float, float* %204, i64 %idxprom219, !dbg !7873
  %205 = bitcast float* %arrayidx220 to i8*, !dbg !7874
  %206 = load i32, i32* %remainder.addr, align 4, !dbg !7875
  %sub221 = sub nsw i32 128, %206, !dbg !7876
  %conv222 = sext i32 %sub221 to i64, !dbg !7877
  %mul223 = mul i64 4, %conv222, !dbg !7878
  call void @llvm.memset.p0i8.i64(i8* %205, i8 0, i64 %mul223, i32 4, i1 false), !dbg !7874
  %207 = load %struct.WMAVoiceContext*, %struct.WMAVoiceContext** %s.addr, align 8, !dbg !7879
  %denoise_tilt_corr = getelementptr inbounds %struct.WMAVoiceContext, %struct.WMAVoiceContext* %207, i32 0, i32 6, !dbg !7881
  %208 = load i32, i32* %denoise_tilt_corr, align 4, !dbg !7881
  %tobool224 = icmp ne i32 %208, 0, !dbg !7879
  br i1 %tobool224, label %if.then225, label %if.end235, !dbg !7882

if.then225:                                       ; preds = %for.end215
  call void @llvm.dbg.declare(metadata float* %tilt_mem, metadata !7883, metadata !2040), !dbg !7885
  store float 0.000000e+00, float* %tilt_mem, align 4, !dbg !7885
  %209 = load i32, i32* %remainder.addr, align 4, !dbg !7886
  %sub227 = sub nsw i32 %209, 1, !dbg !7887
  %idxprom228 = sext i32 %sub227 to i64, !dbg !7888
  %210 = load float*, float** %coeffs.addr, align 8, !dbg !7888
  %arrayidx229 = getelementptr inbounds float, float* %210, i64 %idxprom228, !dbg !7888
  store float 0.000000e+00, float* %arrayidx229, align 4, !dbg !7889
  %211 = load float*, float** %coeffs.addr, align 8, !dbg !7890
  %212 = load i32, i32* %remainder.addr, align 4, !dbg !7891
  %sub230 = sub nsw i32 %212, 1, !dbg !7892
  %call231 = call float @tilt_factor(float* %211, i32 %sub230), !dbg !7893
  %conv232 = fpext float %call231 to double, !dbg !7893
  %mul233 = fmul double -1.800000e+00, %conv232, !dbg !7894
  %conv234 = fptrunc double %mul233 to float, !dbg !7895
  %213 = load float*, float** %coeffs.addr, align 8, !dbg !7896
  %214 = load i32, i32* %remainder.addr, align 4, !dbg !7897
  call void @ff_tilt_compensation(float* %tilt_mem, float %conv234, float* %213, i32 %214), !dbg !7898
  br label %if.end235, !dbg !7899

if.end235:                                        ; preds = %if.then225, %for.end215
  %215 = load float*, float** %coeffs.addr, align 8, !dbg !7900
  %216 = load float*, float** %coeffs.addr, align 8, !dbg !7901
  %217 = load i32, i32* %remainder.addr, align 4, !dbg !7902
  %call236 = call float @avpriv_scalarproduct_float_c(float* %215, float* %216, i32 %217), !dbg !7903
  %div237 = fdiv float 1.000000e+00, %call236, !dbg !7904
  %call238 = call float @sqrtf(float %div237) #9, !dbg !7905
  %conv239 = fpext float %call238 to double, !dbg !7907
  %mul240 = fmul double 1.562500e-02, %conv239, !dbg !7908
  %conv241 = fptrunc double %mul240 to float, !dbg !7909
  store float %conv241, float* %sq, align 4, !dbg !7910
  store i32 0, i32* %n, align 4, !dbg !7911
  br label %for.cond242, !dbg !7913

for.cond242:                                      ; preds = %for.inc249, %if.end235
  %218 = load i32, i32* %n, align 4, !dbg !7914
  %219 = load i32, i32* %remainder.addr, align 4, !dbg !7917
  %cmp243 = icmp slt i32 %218, %219, !dbg !7918
  br i1 %cmp243, label %for.body245, label %for.end251, !dbg !7919

for.body245:                                      ; preds = %for.cond242
  %220 = load float, float* %sq, align 4, !dbg !7920
  %221 = load i32, i32* %n, align 4, !dbg !7921
  %idxprom246 = sext i32 %221 to i64, !dbg !7922
  %222 = load float*, float** %coeffs.addr, align 8, !dbg !7922
  %arrayidx247 = getelementptr inbounds float, float* %222, i64 %idxprom246, !dbg !7922
  %223 = load float, float* %arrayidx247, align 4, !dbg !7923
  %mul248 = fmul float %223, %220, !dbg !7923
  store float %mul248, float* %arrayidx247, align 4, !dbg !7923
  br label %for.inc249, !dbg !7922

for.inc249:                                       ; preds = %for.body245
  %224 = load i32, i32* %n, align 4, !dbg !7924
  %inc250 = add nsw i32 %224, 1, !dbg !7924
  store i32 %inc250, i32* %n, align 4, !dbg !7924
  br label %for.cond242, !dbg !7926, !llvm.loop !7927

for.end251:                                       ; preds = %for.cond242
  ret void, !dbg !7929
}

; Function Attrs: nounwind
declare float @log10f(float) #8

; Function Attrs: nounwind
declare i64 @lrint(double) #8

; Function Attrs: nounwind
declare float @powf(float, float) #8

; Function Attrs: nounwind
declare float @sqrtf(float) #8

; Function Attrs: nounwind readnone
declare float @fabsf(float) #7

declare void @ff_rdft_end(%struct.RDFTContext*) #3

declare void @ff_dct_end(%struct.DCTContext*) #3

attributes #0 = { cold nounwind optsize uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn nounwind }
attributes #11 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2032, !2033}
!llvm.ident = !{!2034}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.9.0 (tags/RELEASE_390/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !922, globals: !946)
!1 = !DIFile(filename: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[inter]libavcodec--wmavoice.o.i", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!2 = !{!3, !13, !473, !673, !690, !711, !721, !745, !751, !769, !793, !812, !822, !852, !860, !872, !881, !887, !893, !897, !904, !910, !916}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVMediaType", file: !4, line: 199, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "./libavutil/avutil.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!5 = !{!6, !7, !8, !9, !10, !11, !12}
!6 = !DIEnumerator(name: "AVMEDIA_TYPE_UNKNOWN", value: -1)
!7 = !DIEnumerator(name: "AVMEDIA_TYPE_VIDEO", value: 0)
!8 = !DIEnumerator(name: "AVMEDIA_TYPE_AUDIO", value: 1)
!9 = !DIEnumerator(name: "AVMEDIA_TYPE_DATA", value: 2)
!10 = !DIEnumerator(name: "AVMEDIA_TYPE_SUBTITLE", value: 3)
!11 = !DIEnumerator(name: "AVMEDIA_TYPE_ATTACHMENT", value: 4)
!12 = !DIEnumerator(name: "AVMEDIA_TYPE_NB", value: 5)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVCodecID", file: !14, line: 215, size: 32, align: 32, elements: !15)
!14 = !DIFile(filename: "libavcodec/avcodec.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!15 = !{!16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472}
!16 = !DIEnumerator(name: "AV_CODEC_ID_NONE", value: 0)
!17 = !DIEnumerator(name: "AV_CODEC_ID_MPEG1VIDEO", value: 1)
!18 = !DIEnumerator(name: "AV_CODEC_ID_MPEG2VIDEO", value: 2)
!19 = !DIEnumerator(name: "AV_CODEC_ID_H261", value: 3)
!20 = !DIEnumerator(name: "AV_CODEC_ID_H263", value: 4)
!21 = !DIEnumerator(name: "AV_CODEC_ID_RV10", value: 5)
!22 = !DIEnumerator(name: "AV_CODEC_ID_RV20", value: 6)
!23 = !DIEnumerator(name: "AV_CODEC_ID_MJPEG", value: 7)
!24 = !DIEnumerator(name: "AV_CODEC_ID_MJPEGB", value: 8)
!25 = !DIEnumerator(name: "AV_CODEC_ID_LJPEG", value: 9)
!26 = !DIEnumerator(name: "AV_CODEC_ID_SP5X", value: 10)
!27 = !DIEnumerator(name: "AV_CODEC_ID_JPEGLS", value: 11)
!28 = !DIEnumerator(name: "AV_CODEC_ID_MPEG4", value: 12)
!29 = !DIEnumerator(name: "AV_CODEC_ID_RAWVIDEO", value: 13)
!30 = !DIEnumerator(name: "AV_CODEC_ID_MSMPEG4V1", value: 14)
!31 = !DIEnumerator(name: "AV_CODEC_ID_MSMPEG4V2", value: 15)
!32 = !DIEnumerator(name: "AV_CODEC_ID_MSMPEG4V3", value: 16)
!33 = !DIEnumerator(name: "AV_CODEC_ID_WMV1", value: 17)
!34 = !DIEnumerator(name: "AV_CODEC_ID_WMV2", value: 18)
!35 = !DIEnumerator(name: "AV_CODEC_ID_H263P", value: 19)
!36 = !DIEnumerator(name: "AV_CODEC_ID_H263I", value: 20)
!37 = !DIEnumerator(name: "AV_CODEC_ID_FLV1", value: 21)
!38 = !DIEnumerator(name: "AV_CODEC_ID_SVQ1", value: 22)
!39 = !DIEnumerator(name: "AV_CODEC_ID_SVQ3", value: 23)
!40 = !DIEnumerator(name: "AV_CODEC_ID_DVVIDEO", value: 24)
!41 = !DIEnumerator(name: "AV_CODEC_ID_HUFFYUV", value: 25)
!42 = !DIEnumerator(name: "AV_CODEC_ID_CYUV", value: 26)
!43 = !DIEnumerator(name: "AV_CODEC_ID_H264", value: 27)
!44 = !DIEnumerator(name: "AV_CODEC_ID_INDEO3", value: 28)
!45 = !DIEnumerator(name: "AV_CODEC_ID_VP3", value: 29)
!46 = !DIEnumerator(name: "AV_CODEC_ID_THEORA", value: 30)
!47 = !DIEnumerator(name: "AV_CODEC_ID_ASV1", value: 31)
!48 = !DIEnumerator(name: "AV_CODEC_ID_ASV2", value: 32)
!49 = !DIEnumerator(name: "AV_CODEC_ID_FFV1", value: 33)
!50 = !DIEnumerator(name: "AV_CODEC_ID_4XM", value: 34)
!51 = !DIEnumerator(name: "AV_CODEC_ID_VCR1", value: 35)
!52 = !DIEnumerator(name: "AV_CODEC_ID_CLJR", value: 36)
!53 = !DIEnumerator(name: "AV_CODEC_ID_MDEC", value: 37)
!54 = !DIEnumerator(name: "AV_CODEC_ID_ROQ", value: 38)
!55 = !DIEnumerator(name: "AV_CODEC_ID_INTERPLAY_VIDEO", value: 39)
!56 = !DIEnumerator(name: "AV_CODEC_ID_XAN_WC3", value: 40)
!57 = !DIEnumerator(name: "AV_CODEC_ID_XAN_WC4", value: 41)
!58 = !DIEnumerator(name: "AV_CODEC_ID_RPZA", value: 42)
!59 = !DIEnumerator(name: "AV_CODEC_ID_CINEPAK", value: 43)
!60 = !DIEnumerator(name: "AV_CODEC_ID_WS_VQA", value: 44)
!61 = !DIEnumerator(name: "AV_CODEC_ID_MSRLE", value: 45)
!62 = !DIEnumerator(name: "AV_CODEC_ID_MSVIDEO1", value: 46)
!63 = !DIEnumerator(name: "AV_CODEC_ID_IDCIN", value: 47)
!64 = !DIEnumerator(name: "AV_CODEC_ID_8BPS", value: 48)
!65 = !DIEnumerator(name: "AV_CODEC_ID_SMC", value: 49)
!66 = !DIEnumerator(name: "AV_CODEC_ID_FLIC", value: 50)
!67 = !DIEnumerator(name: "AV_CODEC_ID_TRUEMOTION1", value: 51)
!68 = !DIEnumerator(name: "AV_CODEC_ID_VMDVIDEO", value: 52)
!69 = !DIEnumerator(name: "AV_CODEC_ID_MSZH", value: 53)
!70 = !DIEnumerator(name: "AV_CODEC_ID_ZLIB", value: 54)
!71 = !DIEnumerator(name: "AV_CODEC_ID_QTRLE", value: 55)
!72 = !DIEnumerator(name: "AV_CODEC_ID_TSCC", value: 56)
!73 = !DIEnumerator(name: "AV_CODEC_ID_ULTI", value: 57)
!74 = !DIEnumerator(name: "AV_CODEC_ID_QDRAW", value: 58)
!75 = !DIEnumerator(name: "AV_CODEC_ID_VIXL", value: 59)
!76 = !DIEnumerator(name: "AV_CODEC_ID_QPEG", value: 60)
!77 = !DIEnumerator(name: "AV_CODEC_ID_PNG", value: 61)
!78 = !DIEnumerator(name: "AV_CODEC_ID_PPM", value: 62)
!79 = !DIEnumerator(name: "AV_CODEC_ID_PBM", value: 63)
!80 = !DIEnumerator(name: "AV_CODEC_ID_PGM", value: 64)
!81 = !DIEnumerator(name: "AV_CODEC_ID_PGMYUV", value: 65)
!82 = !DIEnumerator(name: "AV_CODEC_ID_PAM", value: 66)
!83 = !DIEnumerator(name: "AV_CODEC_ID_FFVHUFF", value: 67)
!84 = !DIEnumerator(name: "AV_CODEC_ID_RV30", value: 68)
!85 = !DIEnumerator(name: "AV_CODEC_ID_RV40", value: 69)
!86 = !DIEnumerator(name: "AV_CODEC_ID_VC1", value: 70)
!87 = !DIEnumerator(name: "AV_CODEC_ID_WMV3", value: 71)
!88 = !DIEnumerator(name: "AV_CODEC_ID_LOCO", value: 72)
!89 = !DIEnumerator(name: "AV_CODEC_ID_WNV1", value: 73)
!90 = !DIEnumerator(name: "AV_CODEC_ID_AASC", value: 74)
!91 = !DIEnumerator(name: "AV_CODEC_ID_INDEO2", value: 75)
!92 = !DIEnumerator(name: "AV_CODEC_ID_FRAPS", value: 76)
!93 = !DIEnumerator(name: "AV_CODEC_ID_TRUEMOTION2", value: 77)
!94 = !DIEnumerator(name: "AV_CODEC_ID_BMP", value: 78)
!95 = !DIEnumerator(name: "AV_CODEC_ID_CSCD", value: 79)
!96 = !DIEnumerator(name: "AV_CODEC_ID_MMVIDEO", value: 80)
!97 = !DIEnumerator(name: "AV_CODEC_ID_ZMBV", value: 81)
!98 = !DIEnumerator(name: "AV_CODEC_ID_AVS", value: 82)
!99 = !DIEnumerator(name: "AV_CODEC_ID_SMACKVIDEO", value: 83)
!100 = !DIEnumerator(name: "AV_CODEC_ID_NUV", value: 84)
!101 = !DIEnumerator(name: "AV_CODEC_ID_KMVC", value: 85)
!102 = !DIEnumerator(name: "AV_CODEC_ID_FLASHSV", value: 86)
!103 = !DIEnumerator(name: "AV_CODEC_ID_CAVS", value: 87)
!104 = !DIEnumerator(name: "AV_CODEC_ID_JPEG2000", value: 88)
!105 = !DIEnumerator(name: "AV_CODEC_ID_VMNC", value: 89)
!106 = !DIEnumerator(name: "AV_CODEC_ID_VP5", value: 90)
!107 = !DIEnumerator(name: "AV_CODEC_ID_VP6", value: 91)
!108 = !DIEnumerator(name: "AV_CODEC_ID_VP6F", value: 92)
!109 = !DIEnumerator(name: "AV_CODEC_ID_TARGA", value: 93)
!110 = !DIEnumerator(name: "AV_CODEC_ID_DSICINVIDEO", value: 94)
!111 = !DIEnumerator(name: "AV_CODEC_ID_TIERTEXSEQVIDEO", value: 95)
!112 = !DIEnumerator(name: "AV_CODEC_ID_TIFF", value: 96)
!113 = !DIEnumerator(name: "AV_CODEC_ID_GIF", value: 97)
!114 = !DIEnumerator(name: "AV_CODEC_ID_DXA", value: 98)
!115 = !DIEnumerator(name: "AV_CODEC_ID_DNXHD", value: 99)
!116 = !DIEnumerator(name: "AV_CODEC_ID_THP", value: 100)
!117 = !DIEnumerator(name: "AV_CODEC_ID_SGI", value: 101)
!118 = !DIEnumerator(name: "AV_CODEC_ID_C93", value: 102)
!119 = !DIEnumerator(name: "AV_CODEC_ID_BETHSOFTVID", value: 103)
!120 = !DIEnumerator(name: "AV_CODEC_ID_PTX", value: 104)
!121 = !DIEnumerator(name: "AV_CODEC_ID_TXD", value: 105)
!122 = !DIEnumerator(name: "AV_CODEC_ID_VP6A", value: 106)
!123 = !DIEnumerator(name: "AV_CODEC_ID_AMV", value: 107)
!124 = !DIEnumerator(name: "AV_CODEC_ID_VB", value: 108)
!125 = !DIEnumerator(name: "AV_CODEC_ID_PCX", value: 109)
!126 = !DIEnumerator(name: "AV_CODEC_ID_SUNRAST", value: 110)
!127 = !DIEnumerator(name: "AV_CODEC_ID_INDEO4", value: 111)
!128 = !DIEnumerator(name: "AV_CODEC_ID_INDEO5", value: 112)
!129 = !DIEnumerator(name: "AV_CODEC_ID_MIMIC", value: 113)
!130 = !DIEnumerator(name: "AV_CODEC_ID_RL2", value: 114)
!131 = !DIEnumerator(name: "AV_CODEC_ID_ESCAPE124", value: 115)
!132 = !DIEnumerator(name: "AV_CODEC_ID_DIRAC", value: 116)
!133 = !DIEnumerator(name: "AV_CODEC_ID_BFI", value: 117)
!134 = !DIEnumerator(name: "AV_CODEC_ID_CMV", value: 118)
!135 = !DIEnumerator(name: "AV_CODEC_ID_MOTIONPIXELS", value: 119)
!136 = !DIEnumerator(name: "AV_CODEC_ID_TGV", value: 120)
!137 = !DIEnumerator(name: "AV_CODEC_ID_TGQ", value: 121)
!138 = !DIEnumerator(name: "AV_CODEC_ID_TQI", value: 122)
!139 = !DIEnumerator(name: "AV_CODEC_ID_AURA", value: 123)
!140 = !DIEnumerator(name: "AV_CODEC_ID_AURA2", value: 124)
!141 = !DIEnumerator(name: "AV_CODEC_ID_V210X", value: 125)
!142 = !DIEnumerator(name: "AV_CODEC_ID_TMV", value: 126)
!143 = !DIEnumerator(name: "AV_CODEC_ID_V210", value: 127)
!144 = !DIEnumerator(name: "AV_CODEC_ID_DPX", value: 128)
!145 = !DIEnumerator(name: "AV_CODEC_ID_MAD", value: 129)
!146 = !DIEnumerator(name: "AV_CODEC_ID_FRWU", value: 130)
!147 = !DIEnumerator(name: "AV_CODEC_ID_FLASHSV2", value: 131)
!148 = !DIEnumerator(name: "AV_CODEC_ID_CDGRAPHICS", value: 132)
!149 = !DIEnumerator(name: "AV_CODEC_ID_R210", value: 133)
!150 = !DIEnumerator(name: "AV_CODEC_ID_ANM", value: 134)
!151 = !DIEnumerator(name: "AV_CODEC_ID_BINKVIDEO", value: 135)
!152 = !DIEnumerator(name: "AV_CODEC_ID_IFF_ILBM", value: 136)
!153 = !DIEnumerator(name: "AV_CODEC_ID_KGV1", value: 137)
!154 = !DIEnumerator(name: "AV_CODEC_ID_YOP", value: 138)
!155 = !DIEnumerator(name: "AV_CODEC_ID_VP8", value: 139)
!156 = !DIEnumerator(name: "AV_CODEC_ID_PICTOR", value: 140)
!157 = !DIEnumerator(name: "AV_CODEC_ID_ANSI", value: 141)
!158 = !DIEnumerator(name: "AV_CODEC_ID_A64_MULTI", value: 142)
!159 = !DIEnumerator(name: "AV_CODEC_ID_A64_MULTI5", value: 143)
!160 = !DIEnumerator(name: "AV_CODEC_ID_R10K", value: 144)
!161 = !DIEnumerator(name: "AV_CODEC_ID_MXPEG", value: 145)
!162 = !DIEnumerator(name: "AV_CODEC_ID_LAGARITH", value: 146)
!163 = !DIEnumerator(name: "AV_CODEC_ID_PRORES", value: 147)
!164 = !DIEnumerator(name: "AV_CODEC_ID_JV", value: 148)
!165 = !DIEnumerator(name: "AV_CODEC_ID_DFA", value: 149)
!166 = !DIEnumerator(name: "AV_CODEC_ID_WMV3IMAGE", value: 150)
!167 = !DIEnumerator(name: "AV_CODEC_ID_VC1IMAGE", value: 151)
!168 = !DIEnumerator(name: "AV_CODEC_ID_UTVIDEO", value: 152)
!169 = !DIEnumerator(name: "AV_CODEC_ID_BMV_VIDEO", value: 153)
!170 = !DIEnumerator(name: "AV_CODEC_ID_VBLE", value: 154)
!171 = !DIEnumerator(name: "AV_CODEC_ID_DXTORY", value: 155)
!172 = !DIEnumerator(name: "AV_CODEC_ID_V410", value: 156)
!173 = !DIEnumerator(name: "AV_CODEC_ID_XWD", value: 157)
!174 = !DIEnumerator(name: "AV_CODEC_ID_CDXL", value: 158)
!175 = !DIEnumerator(name: "AV_CODEC_ID_XBM", value: 159)
!176 = !DIEnumerator(name: "AV_CODEC_ID_ZEROCODEC", value: 160)
!177 = !DIEnumerator(name: "AV_CODEC_ID_MSS1", value: 161)
!178 = !DIEnumerator(name: "AV_CODEC_ID_MSA1", value: 162)
!179 = !DIEnumerator(name: "AV_CODEC_ID_TSCC2", value: 163)
!180 = !DIEnumerator(name: "AV_CODEC_ID_MTS2", value: 164)
!181 = !DIEnumerator(name: "AV_CODEC_ID_CLLC", value: 165)
!182 = !DIEnumerator(name: "AV_CODEC_ID_MSS2", value: 166)
!183 = !DIEnumerator(name: "AV_CODEC_ID_VP9", value: 167)
!184 = !DIEnumerator(name: "AV_CODEC_ID_AIC", value: 168)
!185 = !DIEnumerator(name: "AV_CODEC_ID_ESCAPE130", value: 169)
!186 = !DIEnumerator(name: "AV_CODEC_ID_G2M", value: 170)
!187 = !DIEnumerator(name: "AV_CODEC_ID_WEBP", value: 171)
!188 = !DIEnumerator(name: "AV_CODEC_ID_HNM4_VIDEO", value: 172)
!189 = !DIEnumerator(name: "AV_CODEC_ID_HEVC", value: 173)
!190 = !DIEnumerator(name: "AV_CODEC_ID_FIC", value: 174)
!191 = !DIEnumerator(name: "AV_CODEC_ID_ALIAS_PIX", value: 175)
!192 = !DIEnumerator(name: "AV_CODEC_ID_BRENDER_PIX", value: 176)
!193 = !DIEnumerator(name: "AV_CODEC_ID_PAF_VIDEO", value: 177)
!194 = !DIEnumerator(name: "AV_CODEC_ID_EXR", value: 178)
!195 = !DIEnumerator(name: "AV_CODEC_ID_VP7", value: 179)
!196 = !DIEnumerator(name: "AV_CODEC_ID_SANM", value: 180)
!197 = !DIEnumerator(name: "AV_CODEC_ID_SGIRLE", value: 181)
!198 = !DIEnumerator(name: "AV_CODEC_ID_MVC1", value: 182)
!199 = !DIEnumerator(name: "AV_CODEC_ID_MVC2", value: 183)
!200 = !DIEnumerator(name: "AV_CODEC_ID_HQX", value: 184)
!201 = !DIEnumerator(name: "AV_CODEC_ID_TDSC", value: 185)
!202 = !DIEnumerator(name: "AV_CODEC_ID_HQ_HQA", value: 186)
!203 = !DIEnumerator(name: "AV_CODEC_ID_HAP", value: 187)
!204 = !DIEnumerator(name: "AV_CODEC_ID_DDS", value: 188)
!205 = !DIEnumerator(name: "AV_CODEC_ID_DXV", value: 189)
!206 = !DIEnumerator(name: "AV_CODEC_ID_SCREENPRESSO", value: 190)
!207 = !DIEnumerator(name: "AV_CODEC_ID_RSCC", value: 191)
!208 = !DIEnumerator(name: "AV_CODEC_ID_AVS2", value: 192)
!209 = !DIEnumerator(name: "AV_CODEC_ID_Y41P", value: 32768)
!210 = !DIEnumerator(name: "AV_CODEC_ID_AVRP", value: 32769)
!211 = !DIEnumerator(name: "AV_CODEC_ID_012V", value: 32770)
!212 = !DIEnumerator(name: "AV_CODEC_ID_AVUI", value: 32771)
!213 = !DIEnumerator(name: "AV_CODEC_ID_AYUV", value: 32772)
!214 = !DIEnumerator(name: "AV_CODEC_ID_TARGA_Y216", value: 32773)
!215 = !DIEnumerator(name: "AV_CODEC_ID_V308", value: 32774)
!216 = !DIEnumerator(name: "AV_CODEC_ID_V408", value: 32775)
!217 = !DIEnumerator(name: "AV_CODEC_ID_YUV4", value: 32776)
!218 = !DIEnumerator(name: "AV_CODEC_ID_AVRN", value: 32777)
!219 = !DIEnumerator(name: "AV_CODEC_ID_CPIA", value: 32778)
!220 = !DIEnumerator(name: "AV_CODEC_ID_XFACE", value: 32779)
!221 = !DIEnumerator(name: "AV_CODEC_ID_SNOW", value: 32780)
!222 = !DIEnumerator(name: "AV_CODEC_ID_SMVJPEG", value: 32781)
!223 = !DIEnumerator(name: "AV_CODEC_ID_APNG", value: 32782)
!224 = !DIEnumerator(name: "AV_CODEC_ID_DAALA", value: 32783)
!225 = !DIEnumerator(name: "AV_CODEC_ID_CFHD", value: 32784)
!226 = !DIEnumerator(name: "AV_CODEC_ID_TRUEMOTION2RT", value: 32785)
!227 = !DIEnumerator(name: "AV_CODEC_ID_M101", value: 32786)
!228 = !DIEnumerator(name: "AV_CODEC_ID_MAGICYUV", value: 32787)
!229 = !DIEnumerator(name: "AV_CODEC_ID_SHEERVIDEO", value: 32788)
!230 = !DIEnumerator(name: "AV_CODEC_ID_YLC", value: 32789)
!231 = !DIEnumerator(name: "AV_CODEC_ID_PSD", value: 32790)
!232 = !DIEnumerator(name: "AV_CODEC_ID_PIXLET", value: 32791)
!233 = !DIEnumerator(name: "AV_CODEC_ID_SPEEDHQ", value: 32792)
!234 = !DIEnumerator(name: "AV_CODEC_ID_FMVC", value: 32793)
!235 = !DIEnumerator(name: "AV_CODEC_ID_SCPR", value: 32794)
!236 = !DIEnumerator(name: "AV_CODEC_ID_CLEARVIDEO", value: 32795)
!237 = !DIEnumerator(name: "AV_CODEC_ID_XPM", value: 32796)
!238 = !DIEnumerator(name: "AV_CODEC_ID_AV1", value: 32797)
!239 = !DIEnumerator(name: "AV_CODEC_ID_BITPACKED", value: 32798)
!240 = !DIEnumerator(name: "AV_CODEC_ID_MSCC", value: 32799)
!241 = !DIEnumerator(name: "AV_CODEC_ID_SRGC", value: 32800)
!242 = !DIEnumerator(name: "AV_CODEC_ID_SVG", value: 32801)
!243 = !DIEnumerator(name: "AV_CODEC_ID_GDV", value: 32802)
!244 = !DIEnumerator(name: "AV_CODEC_ID_FITS", value: 32803)
!245 = !DIEnumerator(name: "AV_CODEC_ID_IMM4", value: 32804)
!246 = !DIEnumerator(name: "AV_CODEC_ID_PROSUMER", value: 32805)
!247 = !DIEnumerator(name: "AV_CODEC_ID_MWSC", value: 32806)
!248 = !DIEnumerator(name: "AV_CODEC_ID_WCMV", value: 32807)
!249 = !DIEnumerator(name: "AV_CODEC_ID_RASC", value: 32808)
!250 = !DIEnumerator(name: "AV_CODEC_ID_HYMT", value: 32809)
!251 = !DIEnumerator(name: "AV_CODEC_ID_ARBC", value: 32810)
!252 = !DIEnumerator(name: "AV_CODEC_ID_FIRST_AUDIO", value: 65536)
!253 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S16LE", value: 65536)
!254 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S16BE", value: 65537)
!255 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U16LE", value: 65538)
!256 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U16BE", value: 65539)
!257 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S8", value: 65540)
!258 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U8", value: 65541)
!259 = !DIEnumerator(name: "AV_CODEC_ID_PCM_MULAW", value: 65542)
!260 = !DIEnumerator(name: "AV_CODEC_ID_PCM_ALAW", value: 65543)
!261 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S32LE", value: 65544)
!262 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S32BE", value: 65545)
!263 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U32LE", value: 65546)
!264 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U32BE", value: 65547)
!265 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S24LE", value: 65548)
!266 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S24BE", value: 65549)
!267 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U24LE", value: 65550)
!268 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U24BE", value: 65551)
!269 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S24DAUD", value: 65552)
!270 = !DIEnumerator(name: "AV_CODEC_ID_PCM_ZORK", value: 65553)
!271 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S16LE_PLANAR", value: 65554)
!272 = !DIEnumerator(name: "AV_CODEC_ID_PCM_DVD", value: 65555)
!273 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F32BE", value: 65556)
!274 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F32LE", value: 65557)
!275 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F64BE", value: 65558)
!276 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F64LE", value: 65559)
!277 = !DIEnumerator(name: "AV_CODEC_ID_PCM_BLURAY", value: 65560)
!278 = !DIEnumerator(name: "AV_CODEC_ID_PCM_LXF", value: 65561)
!279 = !DIEnumerator(name: "AV_CODEC_ID_S302M", value: 65562)
!280 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S8_PLANAR", value: 65563)
!281 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S24LE_PLANAR", value: 65564)
!282 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S32LE_PLANAR", value: 65565)
!283 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S16BE_PLANAR", value: 65566)
!284 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S64LE", value: 67584)
!285 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S64BE", value: 67585)
!286 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F16LE", value: 67586)
!287 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F24LE", value: 67587)
!288 = !DIEnumerator(name: "AV_CODEC_ID_PCM_VIDC", value: 67588)
!289 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_QT", value: 69632)
!290 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_WAV", value: 69633)
!291 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_DK3", value: 69634)
!292 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_DK4", value: 69635)
!293 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_WS", value: 69636)
!294 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_SMJPEG", value: 69637)
!295 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_MS", value: 69638)
!296 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_4XM", value: 69639)
!297 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_XA", value: 69640)
!298 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_ADX", value: 69641)
!299 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA", value: 69642)
!300 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_G726", value: 69643)
!301 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_CT", value: 69644)
!302 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_SWF", value: 69645)
!303 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_YAMAHA", value: 69646)
!304 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_SBPRO_4", value: 69647)
!305 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_SBPRO_3", value: 69648)
!306 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_SBPRO_2", value: 69649)
!307 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_THP", value: 69650)
!308 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_AMV", value: 69651)
!309 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_R1", value: 69652)
!310 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_R3", value: 69653)
!311 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_R2", value: 69654)
!312 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_EA_SEAD", value: 69655)
!313 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_EA_EACS", value: 69656)
!314 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_XAS", value: 69657)
!315 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_MAXIS_XA", value: 69658)
!316 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_ISS", value: 69659)
!317 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_G722", value: 69660)
!318 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_APC", value: 69661)
!319 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_VIMA", value: 69662)
!320 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_AFC", value: 71680)
!321 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_OKI", value: 71681)
!322 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_DTK", value: 71682)
!323 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_RAD", value: 71683)
!324 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_G726LE", value: 71684)
!325 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_THP_LE", value: 71685)
!326 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_PSX", value: 71686)
!327 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_AICA", value: 71687)
!328 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_DAT4", value: 71688)
!329 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_MTAF", value: 71689)
!330 = !DIEnumerator(name: "AV_CODEC_ID_AMR_NB", value: 73728)
!331 = !DIEnumerator(name: "AV_CODEC_ID_AMR_WB", value: 73729)
!332 = !DIEnumerator(name: "AV_CODEC_ID_RA_144", value: 77824)
!333 = !DIEnumerator(name: "AV_CODEC_ID_RA_288", value: 77825)
!334 = !DIEnumerator(name: "AV_CODEC_ID_ROQ_DPCM", value: 81920)
!335 = !DIEnumerator(name: "AV_CODEC_ID_INTERPLAY_DPCM", value: 81921)
!336 = !DIEnumerator(name: "AV_CODEC_ID_XAN_DPCM", value: 81922)
!337 = !DIEnumerator(name: "AV_CODEC_ID_SOL_DPCM", value: 81923)
!338 = !DIEnumerator(name: "AV_CODEC_ID_SDX2_DPCM", value: 83968)
!339 = !DIEnumerator(name: "AV_CODEC_ID_GREMLIN_DPCM", value: 83969)
!340 = !DIEnumerator(name: "AV_CODEC_ID_MP2", value: 86016)
!341 = !DIEnumerator(name: "AV_CODEC_ID_MP3", value: 86017)
!342 = !DIEnumerator(name: "AV_CODEC_ID_AAC", value: 86018)
!343 = !DIEnumerator(name: "AV_CODEC_ID_AC3", value: 86019)
!344 = !DIEnumerator(name: "AV_CODEC_ID_DTS", value: 86020)
!345 = !DIEnumerator(name: "AV_CODEC_ID_VORBIS", value: 86021)
!346 = !DIEnumerator(name: "AV_CODEC_ID_DVAUDIO", value: 86022)
!347 = !DIEnumerator(name: "AV_CODEC_ID_WMAV1", value: 86023)
!348 = !DIEnumerator(name: "AV_CODEC_ID_WMAV2", value: 86024)
!349 = !DIEnumerator(name: "AV_CODEC_ID_MACE3", value: 86025)
!350 = !DIEnumerator(name: "AV_CODEC_ID_MACE6", value: 86026)
!351 = !DIEnumerator(name: "AV_CODEC_ID_VMDAUDIO", value: 86027)
!352 = !DIEnumerator(name: "AV_CODEC_ID_FLAC", value: 86028)
!353 = !DIEnumerator(name: "AV_CODEC_ID_MP3ADU", value: 86029)
!354 = !DIEnumerator(name: "AV_CODEC_ID_MP3ON4", value: 86030)
!355 = !DIEnumerator(name: "AV_CODEC_ID_SHORTEN", value: 86031)
!356 = !DIEnumerator(name: "AV_CODEC_ID_ALAC", value: 86032)
!357 = !DIEnumerator(name: "AV_CODEC_ID_WESTWOOD_SND1", value: 86033)
!358 = !DIEnumerator(name: "AV_CODEC_ID_GSM", value: 86034)
!359 = !DIEnumerator(name: "AV_CODEC_ID_QDM2", value: 86035)
!360 = !DIEnumerator(name: "AV_CODEC_ID_COOK", value: 86036)
!361 = !DIEnumerator(name: "AV_CODEC_ID_TRUESPEECH", value: 86037)
!362 = !DIEnumerator(name: "AV_CODEC_ID_TTA", value: 86038)
!363 = !DIEnumerator(name: "AV_CODEC_ID_SMACKAUDIO", value: 86039)
!364 = !DIEnumerator(name: "AV_CODEC_ID_QCELP", value: 86040)
!365 = !DIEnumerator(name: "AV_CODEC_ID_WAVPACK", value: 86041)
!366 = !DIEnumerator(name: "AV_CODEC_ID_DSICINAUDIO", value: 86042)
!367 = !DIEnumerator(name: "AV_CODEC_ID_IMC", value: 86043)
!368 = !DIEnumerator(name: "AV_CODEC_ID_MUSEPACK7", value: 86044)
!369 = !DIEnumerator(name: "AV_CODEC_ID_MLP", value: 86045)
!370 = !DIEnumerator(name: "AV_CODEC_ID_GSM_MS", value: 86046)
!371 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC3", value: 86047)
!372 = !DIEnumerator(name: "AV_CODEC_ID_APE", value: 86048)
!373 = !DIEnumerator(name: "AV_CODEC_ID_NELLYMOSER", value: 86049)
!374 = !DIEnumerator(name: "AV_CODEC_ID_MUSEPACK8", value: 86050)
!375 = !DIEnumerator(name: "AV_CODEC_ID_SPEEX", value: 86051)
!376 = !DIEnumerator(name: "AV_CODEC_ID_WMAVOICE", value: 86052)
!377 = !DIEnumerator(name: "AV_CODEC_ID_WMAPRO", value: 86053)
!378 = !DIEnumerator(name: "AV_CODEC_ID_WMALOSSLESS", value: 86054)
!379 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC3P", value: 86055)
!380 = !DIEnumerator(name: "AV_CODEC_ID_EAC3", value: 86056)
!381 = !DIEnumerator(name: "AV_CODEC_ID_SIPR", value: 86057)
!382 = !DIEnumerator(name: "AV_CODEC_ID_MP1", value: 86058)
!383 = !DIEnumerator(name: "AV_CODEC_ID_TWINVQ", value: 86059)
!384 = !DIEnumerator(name: "AV_CODEC_ID_TRUEHD", value: 86060)
!385 = !DIEnumerator(name: "AV_CODEC_ID_MP4ALS", value: 86061)
!386 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC1", value: 86062)
!387 = !DIEnumerator(name: "AV_CODEC_ID_BINKAUDIO_RDFT", value: 86063)
!388 = !DIEnumerator(name: "AV_CODEC_ID_BINKAUDIO_DCT", value: 86064)
!389 = !DIEnumerator(name: "AV_CODEC_ID_AAC_LATM", value: 86065)
!390 = !DIEnumerator(name: "AV_CODEC_ID_QDMC", value: 86066)
!391 = !DIEnumerator(name: "AV_CODEC_ID_CELT", value: 86067)
!392 = !DIEnumerator(name: "AV_CODEC_ID_G723_1", value: 86068)
!393 = !DIEnumerator(name: "AV_CODEC_ID_G729", value: 86069)
!394 = !DIEnumerator(name: "AV_CODEC_ID_8SVX_EXP", value: 86070)
!395 = !DIEnumerator(name: "AV_CODEC_ID_8SVX_FIB", value: 86071)
!396 = !DIEnumerator(name: "AV_CODEC_ID_BMV_AUDIO", value: 86072)
!397 = !DIEnumerator(name: "AV_CODEC_ID_RALF", value: 86073)
!398 = !DIEnumerator(name: "AV_CODEC_ID_IAC", value: 86074)
!399 = !DIEnumerator(name: "AV_CODEC_ID_ILBC", value: 86075)
!400 = !DIEnumerator(name: "AV_CODEC_ID_OPUS", value: 86076)
!401 = !DIEnumerator(name: "AV_CODEC_ID_COMFORT_NOISE", value: 86077)
!402 = !DIEnumerator(name: "AV_CODEC_ID_TAK", value: 86078)
!403 = !DIEnumerator(name: "AV_CODEC_ID_METASOUND", value: 86079)
!404 = !DIEnumerator(name: "AV_CODEC_ID_PAF_AUDIO", value: 86080)
!405 = !DIEnumerator(name: "AV_CODEC_ID_ON2AVC", value: 86081)
!406 = !DIEnumerator(name: "AV_CODEC_ID_DSS_SP", value: 86082)
!407 = !DIEnumerator(name: "AV_CODEC_ID_CODEC2", value: 86083)
!408 = !DIEnumerator(name: "AV_CODEC_ID_FFWAVESYNTH", value: 88064)
!409 = !DIEnumerator(name: "AV_CODEC_ID_SONIC", value: 88065)
!410 = !DIEnumerator(name: "AV_CODEC_ID_SONIC_LS", value: 88066)
!411 = !DIEnumerator(name: "AV_CODEC_ID_EVRC", value: 88067)
!412 = !DIEnumerator(name: "AV_CODEC_ID_SMV", value: 88068)
!413 = !DIEnumerator(name: "AV_CODEC_ID_DSD_LSBF", value: 88069)
!414 = !DIEnumerator(name: "AV_CODEC_ID_DSD_MSBF", value: 88070)
!415 = !DIEnumerator(name: "AV_CODEC_ID_DSD_LSBF_PLANAR", value: 88071)
!416 = !DIEnumerator(name: "AV_CODEC_ID_DSD_MSBF_PLANAR", value: 88072)
!417 = !DIEnumerator(name: "AV_CODEC_ID_4GV", value: 88073)
!418 = !DIEnumerator(name: "AV_CODEC_ID_INTERPLAY_ACM", value: 88074)
!419 = !DIEnumerator(name: "AV_CODEC_ID_XMA1", value: 88075)
!420 = !DIEnumerator(name: "AV_CODEC_ID_XMA2", value: 88076)
!421 = !DIEnumerator(name: "AV_CODEC_ID_DST", value: 88077)
!422 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC3AL", value: 88078)
!423 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC3PAL", value: 88079)
!424 = !DIEnumerator(name: "AV_CODEC_ID_DOLBY_E", value: 88080)
!425 = !DIEnumerator(name: "AV_CODEC_ID_APTX", value: 88081)
!426 = !DIEnumerator(name: "AV_CODEC_ID_APTX_HD", value: 88082)
!427 = !DIEnumerator(name: "AV_CODEC_ID_SBC", value: 88083)
!428 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC9", value: 88084)
!429 = !DIEnumerator(name: "AV_CODEC_ID_HCOM", value: 88085)
!430 = !DIEnumerator(name: "AV_CODEC_ID_FIRST_SUBTITLE", value: 94208)
!431 = !DIEnumerator(name: "AV_CODEC_ID_DVD_SUBTITLE", value: 94208)
!432 = !DIEnumerator(name: "AV_CODEC_ID_DVB_SUBTITLE", value: 94209)
!433 = !DIEnumerator(name: "AV_CODEC_ID_TEXT", value: 94210)
!434 = !DIEnumerator(name: "AV_CODEC_ID_XSUB", value: 94211)
!435 = !DIEnumerator(name: "AV_CODEC_ID_SSA", value: 94212)
!436 = !DIEnumerator(name: "AV_CODEC_ID_MOV_TEXT", value: 94213)
!437 = !DIEnumerator(name: "AV_CODEC_ID_HDMV_PGS_SUBTITLE", value: 94214)
!438 = !DIEnumerator(name: "AV_CODEC_ID_DVB_TELETEXT", value: 94215)
!439 = !DIEnumerator(name: "AV_CODEC_ID_SRT", value: 94216)
!440 = !DIEnumerator(name: "AV_CODEC_ID_MICRODVD", value: 96256)
!441 = !DIEnumerator(name: "AV_CODEC_ID_EIA_608", value: 96257)
!442 = !DIEnumerator(name: "AV_CODEC_ID_JACOSUB", value: 96258)
!443 = !DIEnumerator(name: "AV_CODEC_ID_SAMI", value: 96259)
!444 = !DIEnumerator(name: "AV_CODEC_ID_REALTEXT", value: 96260)
!445 = !DIEnumerator(name: "AV_CODEC_ID_STL", value: 96261)
!446 = !DIEnumerator(name: "AV_CODEC_ID_SUBVIEWER1", value: 96262)
!447 = !DIEnumerator(name: "AV_CODEC_ID_SUBVIEWER", value: 96263)
!448 = !DIEnumerator(name: "AV_CODEC_ID_SUBRIP", value: 96264)
!449 = !DIEnumerator(name: "AV_CODEC_ID_WEBVTT", value: 96265)
!450 = !DIEnumerator(name: "AV_CODEC_ID_MPL2", value: 96266)
!451 = !DIEnumerator(name: "AV_CODEC_ID_VPLAYER", value: 96267)
!452 = !DIEnumerator(name: "AV_CODEC_ID_PJS", value: 96268)
!453 = !DIEnumerator(name: "AV_CODEC_ID_ASS", value: 96269)
!454 = !DIEnumerator(name: "AV_CODEC_ID_HDMV_TEXT_SUBTITLE", value: 96270)
!455 = !DIEnumerator(name: "AV_CODEC_ID_TTML", value: 96271)
!456 = !DIEnumerator(name: "AV_CODEC_ID_ARIB_CAPTION", value: 96272)
!457 = !DIEnumerator(name: "AV_CODEC_ID_FIRST_UNKNOWN", value: 98304)
!458 = !DIEnumerator(name: "AV_CODEC_ID_TTF", value: 98304)
!459 = !DIEnumerator(name: "AV_CODEC_ID_SCTE_35", value: 98305)
!460 = !DIEnumerator(name: "AV_CODEC_ID_BINTEXT", value: 100352)
!461 = !DIEnumerator(name: "AV_CODEC_ID_XBIN", value: 100353)
!462 = !DIEnumerator(name: "AV_CODEC_ID_IDF", value: 100354)
!463 = !DIEnumerator(name: "AV_CODEC_ID_OTF", value: 100355)
!464 = !DIEnumerator(name: "AV_CODEC_ID_SMPTE_KLV", value: 100356)
!465 = !DIEnumerator(name: "AV_CODEC_ID_DVD_NAV", value: 100357)
!466 = !DIEnumerator(name: "AV_CODEC_ID_TIMED_ID3", value: 100358)
!467 = !DIEnumerator(name: "AV_CODEC_ID_BIN_DATA", value: 100359)
!468 = !DIEnumerator(name: "AV_CODEC_ID_PROBE", value: 102400)
!469 = !DIEnumerator(name: "AV_CODEC_ID_MPEG2TS", value: 131072)
!470 = !DIEnumerator(name: "AV_CODEC_ID_MPEG4SYSTEMS", value: 131073)
!471 = !DIEnumerator(name: "AV_CODEC_ID_FFMETADATA", value: 135168)
!472 = !DIEnumerator(name: "AV_CODEC_ID_WRAPPED_AVFRAME", value: 135169)
!473 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVPixelFormat", file: !474, line: 64, size: 32, align: 32, elements: !475)
!474 = !DIFile(filename: "./libavutil/pixfmt.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!475 = !{!476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672}
!476 = !DIEnumerator(name: "AV_PIX_FMT_NONE", value: -1)
!477 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P", value: 0)
!478 = !DIEnumerator(name: "AV_PIX_FMT_YUYV422", value: 1)
!479 = !DIEnumerator(name: "AV_PIX_FMT_RGB24", value: 2)
!480 = !DIEnumerator(name: "AV_PIX_FMT_BGR24", value: 3)
!481 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P", value: 4)
!482 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P", value: 5)
!483 = !DIEnumerator(name: "AV_PIX_FMT_YUV410P", value: 6)
!484 = !DIEnumerator(name: "AV_PIX_FMT_YUV411P", value: 7)
!485 = !DIEnumerator(name: "AV_PIX_FMT_GRAY8", value: 8)
!486 = !DIEnumerator(name: "AV_PIX_FMT_MONOWHITE", value: 9)
!487 = !DIEnumerator(name: "AV_PIX_FMT_MONOBLACK", value: 10)
!488 = !DIEnumerator(name: "AV_PIX_FMT_PAL8", value: 11)
!489 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ420P", value: 12)
!490 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ422P", value: 13)
!491 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ444P", value: 14)
!492 = !DIEnumerator(name: "AV_PIX_FMT_UYVY422", value: 15)
!493 = !DIEnumerator(name: "AV_PIX_FMT_UYYVYY411", value: 16)
!494 = !DIEnumerator(name: "AV_PIX_FMT_BGR8", value: 17)
!495 = !DIEnumerator(name: "AV_PIX_FMT_BGR4", value: 18)
!496 = !DIEnumerator(name: "AV_PIX_FMT_BGR4_BYTE", value: 19)
!497 = !DIEnumerator(name: "AV_PIX_FMT_RGB8", value: 20)
!498 = !DIEnumerator(name: "AV_PIX_FMT_RGB4", value: 21)
!499 = !DIEnumerator(name: "AV_PIX_FMT_RGB4_BYTE", value: 22)
!500 = !DIEnumerator(name: "AV_PIX_FMT_NV12", value: 23)
!501 = !DIEnumerator(name: "AV_PIX_FMT_NV21", value: 24)
!502 = !DIEnumerator(name: "AV_PIX_FMT_ARGB", value: 25)
!503 = !DIEnumerator(name: "AV_PIX_FMT_RGBA", value: 26)
!504 = !DIEnumerator(name: "AV_PIX_FMT_ABGR", value: 27)
!505 = !DIEnumerator(name: "AV_PIX_FMT_BGRA", value: 28)
!506 = !DIEnumerator(name: "AV_PIX_FMT_GRAY16BE", value: 29)
!507 = !DIEnumerator(name: "AV_PIX_FMT_GRAY16LE", value: 30)
!508 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P", value: 31)
!509 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ440P", value: 32)
!510 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P", value: 33)
!511 = !DIEnumerator(name: "AV_PIX_FMT_RGB48BE", value: 34)
!512 = !DIEnumerator(name: "AV_PIX_FMT_RGB48LE", value: 35)
!513 = !DIEnumerator(name: "AV_PIX_FMT_RGB565BE", value: 36)
!514 = !DIEnumerator(name: "AV_PIX_FMT_RGB565LE", value: 37)
!515 = !DIEnumerator(name: "AV_PIX_FMT_RGB555BE", value: 38)
!516 = !DIEnumerator(name: "AV_PIX_FMT_RGB555LE", value: 39)
!517 = !DIEnumerator(name: "AV_PIX_FMT_BGR565BE", value: 40)
!518 = !DIEnumerator(name: "AV_PIX_FMT_BGR565LE", value: 41)
!519 = !DIEnumerator(name: "AV_PIX_FMT_BGR555BE", value: 42)
!520 = !DIEnumerator(name: "AV_PIX_FMT_BGR555LE", value: 43)
!521 = !DIEnumerator(name: "AV_PIX_FMT_VAAPI_MOCO", value: 44)
!522 = !DIEnumerator(name: "AV_PIX_FMT_VAAPI_IDCT", value: 45)
!523 = !DIEnumerator(name: "AV_PIX_FMT_VAAPI_VLD", value: 46)
!524 = !DIEnumerator(name: "AV_PIX_FMT_VAAPI", value: 46)
!525 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P16LE", value: 47)
!526 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P16BE", value: 48)
!527 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P16LE", value: 49)
!528 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P16BE", value: 50)
!529 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P16LE", value: 51)
!530 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P16BE", value: 52)
!531 = !DIEnumerator(name: "AV_PIX_FMT_DXVA2_VLD", value: 53)
!532 = !DIEnumerator(name: "AV_PIX_FMT_RGB444LE", value: 54)
!533 = !DIEnumerator(name: "AV_PIX_FMT_RGB444BE", value: 55)
!534 = !DIEnumerator(name: "AV_PIX_FMT_BGR444LE", value: 56)
!535 = !DIEnumerator(name: "AV_PIX_FMT_BGR444BE", value: 57)
!536 = !DIEnumerator(name: "AV_PIX_FMT_YA8", value: 58)
!537 = !DIEnumerator(name: "AV_PIX_FMT_Y400A", value: 58)
!538 = !DIEnumerator(name: "AV_PIX_FMT_GRAY8A", value: 58)
!539 = !DIEnumerator(name: "AV_PIX_FMT_BGR48BE", value: 59)
!540 = !DIEnumerator(name: "AV_PIX_FMT_BGR48LE", value: 60)
!541 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P9BE", value: 61)
!542 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P9LE", value: 62)
!543 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P10BE", value: 63)
!544 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P10LE", value: 64)
!545 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P10BE", value: 65)
!546 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P10LE", value: 66)
!547 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P9BE", value: 67)
!548 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P9LE", value: 68)
!549 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P10BE", value: 69)
!550 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P10LE", value: 70)
!551 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P9BE", value: 71)
!552 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P9LE", value: 72)
!553 = !DIEnumerator(name: "AV_PIX_FMT_GBRP", value: 73)
!554 = !DIEnumerator(name: "AV_PIX_FMT_GBR24P", value: 73)
!555 = !DIEnumerator(name: "AV_PIX_FMT_GBRP9BE", value: 74)
!556 = !DIEnumerator(name: "AV_PIX_FMT_GBRP9LE", value: 75)
!557 = !DIEnumerator(name: "AV_PIX_FMT_GBRP10BE", value: 76)
!558 = !DIEnumerator(name: "AV_PIX_FMT_GBRP10LE", value: 77)
!559 = !DIEnumerator(name: "AV_PIX_FMT_GBRP16BE", value: 78)
!560 = !DIEnumerator(name: "AV_PIX_FMT_GBRP16LE", value: 79)
!561 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P", value: 80)
!562 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P", value: 81)
!563 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P9BE", value: 82)
!564 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P9LE", value: 83)
!565 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P9BE", value: 84)
!566 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P9LE", value: 85)
!567 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P9BE", value: 86)
!568 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P9LE", value: 87)
!569 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P10BE", value: 88)
!570 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P10LE", value: 89)
!571 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P10BE", value: 90)
!572 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P10LE", value: 91)
!573 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P10BE", value: 92)
!574 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P10LE", value: 93)
!575 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P16BE", value: 94)
!576 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P16LE", value: 95)
!577 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P16BE", value: 96)
!578 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P16LE", value: 97)
!579 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P16BE", value: 98)
!580 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P16LE", value: 99)
!581 = !DIEnumerator(name: "AV_PIX_FMT_VDPAU", value: 100)
!582 = !DIEnumerator(name: "AV_PIX_FMT_XYZ12LE", value: 101)
!583 = !DIEnumerator(name: "AV_PIX_FMT_XYZ12BE", value: 102)
!584 = !DIEnumerator(name: "AV_PIX_FMT_NV16", value: 103)
!585 = !DIEnumerator(name: "AV_PIX_FMT_NV20LE", value: 104)
!586 = !DIEnumerator(name: "AV_PIX_FMT_NV20BE", value: 105)
!587 = !DIEnumerator(name: "AV_PIX_FMT_RGBA64BE", value: 106)
!588 = !DIEnumerator(name: "AV_PIX_FMT_RGBA64LE", value: 107)
!589 = !DIEnumerator(name: "AV_PIX_FMT_BGRA64BE", value: 108)
!590 = !DIEnumerator(name: "AV_PIX_FMT_BGRA64LE", value: 109)
!591 = !DIEnumerator(name: "AV_PIX_FMT_YVYU422", value: 110)
!592 = !DIEnumerator(name: "AV_PIX_FMT_YA16BE", value: 111)
!593 = !DIEnumerator(name: "AV_PIX_FMT_YA16LE", value: 112)
!594 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP", value: 113)
!595 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP16BE", value: 114)
!596 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP16LE", value: 115)
!597 = !DIEnumerator(name: "AV_PIX_FMT_QSV", value: 116)
!598 = !DIEnumerator(name: "AV_PIX_FMT_MMAL", value: 117)
!599 = !DIEnumerator(name: "AV_PIX_FMT_D3D11VA_VLD", value: 118)
!600 = !DIEnumerator(name: "AV_PIX_FMT_CUDA", value: 119)
!601 = !DIEnumerator(name: "AV_PIX_FMT_0RGB", value: 120)
!602 = !DIEnumerator(name: "AV_PIX_FMT_RGB0", value: 121)
!603 = !DIEnumerator(name: "AV_PIX_FMT_0BGR", value: 122)
!604 = !DIEnumerator(name: "AV_PIX_FMT_BGR0", value: 123)
!605 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P12BE", value: 124)
!606 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P12LE", value: 125)
!607 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P14BE", value: 126)
!608 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P14LE", value: 127)
!609 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P12BE", value: 128)
!610 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P12LE", value: 129)
!611 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P14BE", value: 130)
!612 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P14LE", value: 131)
!613 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P12BE", value: 132)
!614 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P12LE", value: 133)
!615 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P14BE", value: 134)
!616 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P14LE", value: 135)
!617 = !DIEnumerator(name: "AV_PIX_FMT_GBRP12BE", value: 136)
!618 = !DIEnumerator(name: "AV_PIX_FMT_GBRP12LE", value: 137)
!619 = !DIEnumerator(name: "AV_PIX_FMT_GBRP14BE", value: 138)
!620 = !DIEnumerator(name: "AV_PIX_FMT_GBRP14LE", value: 139)
!621 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ411P", value: 140)
!622 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_BGGR8", value: 141)
!623 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_RGGB8", value: 142)
!624 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GBRG8", value: 143)
!625 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GRBG8", value: 144)
!626 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_BGGR16LE", value: 145)
!627 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_BGGR16BE", value: 146)
!628 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_RGGB16LE", value: 147)
!629 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_RGGB16BE", value: 148)
!630 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GBRG16LE", value: 149)
!631 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GBRG16BE", value: 150)
!632 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GRBG16LE", value: 151)
!633 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GRBG16BE", value: 152)
!634 = !DIEnumerator(name: "AV_PIX_FMT_XVMC", value: 153)
!635 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P10LE", value: 154)
!636 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P10BE", value: 155)
!637 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P12LE", value: 156)
!638 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P12BE", value: 157)
!639 = !DIEnumerator(name: "AV_PIX_FMT_AYUV64LE", value: 158)
!640 = !DIEnumerator(name: "AV_PIX_FMT_AYUV64BE", value: 159)
!641 = !DIEnumerator(name: "AV_PIX_FMT_VIDEOTOOLBOX", value: 160)
!642 = !DIEnumerator(name: "AV_PIX_FMT_P010LE", value: 161)
!643 = !DIEnumerator(name: "AV_PIX_FMT_P010BE", value: 162)
!644 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP12BE", value: 163)
!645 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP12LE", value: 164)
!646 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP10BE", value: 165)
!647 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP10LE", value: 166)
!648 = !DIEnumerator(name: "AV_PIX_FMT_MEDIACODEC", value: 167)
!649 = !DIEnumerator(name: "AV_PIX_FMT_GRAY12BE", value: 168)
!650 = !DIEnumerator(name: "AV_PIX_FMT_GRAY12LE", value: 169)
!651 = !DIEnumerator(name: "AV_PIX_FMT_GRAY10BE", value: 170)
!652 = !DIEnumerator(name: "AV_PIX_FMT_GRAY10LE", value: 171)
!653 = !DIEnumerator(name: "AV_PIX_FMT_P016LE", value: 172)
!654 = !DIEnumerator(name: "AV_PIX_FMT_P016BE", value: 173)
!655 = !DIEnumerator(name: "AV_PIX_FMT_D3D11", value: 174)
!656 = !DIEnumerator(name: "AV_PIX_FMT_GRAY9BE", value: 175)
!657 = !DIEnumerator(name: "AV_PIX_FMT_GRAY9LE", value: 176)
!658 = !DIEnumerator(name: "AV_PIX_FMT_GBRPF32BE", value: 177)
!659 = !DIEnumerator(name: "AV_PIX_FMT_GBRPF32LE", value: 178)
!660 = !DIEnumerator(name: "AV_PIX_FMT_GBRAPF32BE", value: 179)
!661 = !DIEnumerator(name: "AV_PIX_FMT_GBRAPF32LE", value: 180)
!662 = !DIEnumerator(name: "AV_PIX_FMT_DRM_PRIME", value: 181)
!663 = !DIEnumerator(name: "AV_PIX_FMT_OPENCL", value: 182)
!664 = !DIEnumerator(name: "AV_PIX_FMT_GRAY14BE", value: 183)
!665 = !DIEnumerator(name: "AV_PIX_FMT_GRAY14LE", value: 184)
!666 = !DIEnumerator(name: "AV_PIX_FMT_GRAYF32BE", value: 185)
!667 = !DIEnumerator(name: "AV_PIX_FMT_GRAYF32LE", value: 186)
!668 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P12BE", value: 187)
!669 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P12LE", value: 188)
!670 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P12BE", value: 189)
!671 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P12LE", value: 190)
!672 = !DIEnumerator(name: "AV_PIX_FMT_NB", value: 191)
!673 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVSampleFormat", file: !674, line: 58, size: 32, align: 32, elements: !675)
!674 = !DIFile(filename: "./libavutil/samplefmt.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!675 = !{!676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689}
!676 = !DIEnumerator(name: "AV_SAMPLE_FMT_NONE", value: -1)
!677 = !DIEnumerator(name: "AV_SAMPLE_FMT_U8", value: 0)
!678 = !DIEnumerator(name: "AV_SAMPLE_FMT_S16", value: 1)
!679 = !DIEnumerator(name: "AV_SAMPLE_FMT_S32", value: 2)
!680 = !DIEnumerator(name: "AV_SAMPLE_FMT_FLT", value: 3)
!681 = !DIEnumerator(name: "AV_SAMPLE_FMT_DBL", value: 4)
!682 = !DIEnumerator(name: "AV_SAMPLE_FMT_U8P", value: 5)
!683 = !DIEnumerator(name: "AV_SAMPLE_FMT_S16P", value: 6)
!684 = !DIEnumerator(name: "AV_SAMPLE_FMT_S32P", value: 7)
!685 = !DIEnumerator(name: "AV_SAMPLE_FMT_FLTP", value: 8)
!686 = !DIEnumerator(name: "AV_SAMPLE_FMT_DBLP", value: 9)
!687 = !DIEnumerator(name: "AV_SAMPLE_FMT_S64", value: 10)
!688 = !DIEnumerator(name: "AV_SAMPLE_FMT_S64P", value: 11)
!689 = !DIEnumerator(name: "AV_SAMPLE_FMT_NB", value: 12)
!690 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !691, line: 29, size: 32, align: 32, elements: !692)
!691 = !DIFile(filename: "./libavutil/log.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!692 = !{!693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710}
!693 = !DIEnumerator(name: "AV_CLASS_CATEGORY_NA", value: 0)
!694 = !DIEnumerator(name: "AV_CLASS_CATEGORY_INPUT", value: 1)
!695 = !DIEnumerator(name: "AV_CLASS_CATEGORY_OUTPUT", value: 2)
!696 = !DIEnumerator(name: "AV_CLASS_CATEGORY_MUXER", value: 3)
!697 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEMUXER", value: 4)
!698 = !DIEnumerator(name: "AV_CLASS_CATEGORY_ENCODER", value: 5)
!699 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DECODER", value: 6)
!700 = !DIEnumerator(name: "AV_CLASS_CATEGORY_FILTER", value: 7)
!701 = !DIEnumerator(name: "AV_CLASS_CATEGORY_BITSTREAM_FILTER", value: 8)
!702 = !DIEnumerator(name: "AV_CLASS_CATEGORY_SWSCALER", value: 9)
!703 = !DIEnumerator(name: "AV_CLASS_CATEGORY_SWRESAMPLER", value: 10)
!704 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT", value: 40)
!705 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT", value: 41)
!706 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT", value: 42)
!707 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT", value: 43)
!708 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_OUTPUT", value: 44)
!709 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_INPUT", value: 45)
!710 = !DIEnumerator(name: "AV_CLASS_CATEGORY_NB", value: 46)
!711 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVPictureType", file: !4, line: 272, size: 32, align: 32, elements: !712)
!712 = !{!713, !714, !715, !716, !717, !718, !719, !720}
!713 = !DIEnumerator(name: "AV_PICTURE_TYPE_NONE", value: 0)
!714 = !DIEnumerator(name: "AV_PICTURE_TYPE_I", value: 1)
!715 = !DIEnumerator(name: "AV_PICTURE_TYPE_P", value: 2)
!716 = !DIEnumerator(name: "AV_PICTURE_TYPE_B", value: 3)
!717 = !DIEnumerator(name: "AV_PICTURE_TYPE_S", value: 4)
!718 = !DIEnumerator(name: "AV_PICTURE_TYPE_SI", value: 5)
!719 = !DIEnumerator(name: "AV_PICTURE_TYPE_SP", value: 6)
!720 = !DIEnumerator(name: "AV_PICTURE_TYPE_BI", value: 7)
!721 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVFrameSideDataType", file: !722, line: 48, size: 32, align: 32, elements: !723)
!722 = !DIFile(filename: "./libavutil/frame.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!723 = !{!724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744}
!724 = !DIEnumerator(name: "AV_FRAME_DATA_PANSCAN", value: 0)
!725 = !DIEnumerator(name: "AV_FRAME_DATA_A53_CC", value: 1)
!726 = !DIEnumerator(name: "AV_FRAME_DATA_STEREO3D", value: 2)
!727 = !DIEnumerator(name: "AV_FRAME_DATA_MATRIXENCODING", value: 3)
!728 = !DIEnumerator(name: "AV_FRAME_DATA_DOWNMIX_INFO", value: 4)
!729 = !DIEnumerator(name: "AV_FRAME_DATA_REPLAYGAIN", value: 5)
!730 = !DIEnumerator(name: "AV_FRAME_DATA_DISPLAYMATRIX", value: 6)
!731 = !DIEnumerator(name: "AV_FRAME_DATA_AFD", value: 7)
!732 = !DIEnumerator(name: "AV_FRAME_DATA_MOTION_VECTORS", value: 8)
!733 = !DIEnumerator(name: "AV_FRAME_DATA_SKIP_SAMPLES", value: 9)
!734 = !DIEnumerator(name: "AV_FRAME_DATA_AUDIO_SERVICE_TYPE", value: 10)
!735 = !DIEnumerator(name: "AV_FRAME_DATA_MASTERING_DISPLAY_METADATA", value: 11)
!736 = !DIEnumerator(name: "AV_FRAME_DATA_GOP_TIMECODE", value: 12)
!737 = !DIEnumerator(name: "AV_FRAME_DATA_SPHERICAL", value: 13)
!738 = !DIEnumerator(name: "AV_FRAME_DATA_CONTENT_LIGHT_LEVEL", value: 14)
!739 = !DIEnumerator(name: "AV_FRAME_DATA_ICC_PROFILE", value: 15)
!740 = !DIEnumerator(name: "AV_FRAME_DATA_QP_TABLE_PROPERTIES", value: 16)
!741 = !DIEnumerator(name: "AV_FRAME_DATA_QP_TABLE_DATA", value: 17)
!742 = !DIEnumerator(name: "AV_FRAME_DATA_S12M_TIMECODE", value: 18)
!743 = !DIEnumerator(name: "AV_FRAME_DATA_DYNAMIC_HDR_PLUS", value: 19)
!744 = !DIEnumerator(name: "AV_FRAME_DATA_REGIONS_OF_INTEREST", value: 20)
!745 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorRange", file: !474, line: 516, size: 32, align: 32, elements: !746)
!746 = !{!747, !748, !749, !750}
!747 = !DIEnumerator(name: "AVCOL_RANGE_UNSPECIFIED", value: 0)
!748 = !DIEnumerator(name: "AVCOL_RANGE_MPEG", value: 1)
!749 = !DIEnumerator(name: "AVCOL_RANGE_JPEG", value: 2)
!750 = !DIEnumerator(name: "AVCOL_RANGE_NB", value: 3)
!751 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorPrimaries", file: !474, line: 440, size: 32, align: 32, elements: !752)
!752 = !{!753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768}
!753 = !DIEnumerator(name: "AVCOL_PRI_RESERVED0", value: 0)
!754 = !DIEnumerator(name: "AVCOL_PRI_BT709", value: 1)
!755 = !DIEnumerator(name: "AVCOL_PRI_UNSPECIFIED", value: 2)
!756 = !DIEnumerator(name: "AVCOL_PRI_RESERVED", value: 3)
!757 = !DIEnumerator(name: "AVCOL_PRI_BT470M", value: 4)
!758 = !DIEnumerator(name: "AVCOL_PRI_BT470BG", value: 5)
!759 = !DIEnumerator(name: "AVCOL_PRI_SMPTE170M", value: 6)
!760 = !DIEnumerator(name: "AVCOL_PRI_SMPTE240M", value: 7)
!761 = !DIEnumerator(name: "AVCOL_PRI_FILM", value: 8)
!762 = !DIEnumerator(name: "AVCOL_PRI_BT2020", value: 9)
!763 = !DIEnumerator(name: "AVCOL_PRI_SMPTE428", value: 10)
!764 = !DIEnumerator(name: "AVCOL_PRI_SMPTEST428_1", value: 10)
!765 = !DIEnumerator(name: "AVCOL_PRI_SMPTE431", value: 11)
!766 = !DIEnumerator(name: "AVCOL_PRI_SMPTE432", value: 12)
!767 = !DIEnumerator(name: "AVCOL_PRI_JEDEC_P22", value: 22)
!768 = !DIEnumerator(name: "AVCOL_PRI_NB", value: 23)
!769 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorTransferCharacteristic", file: !474, line: 464, size: 32, align: 32, elements: !770)
!770 = !{!771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792}
!771 = !DIEnumerator(name: "AVCOL_TRC_RESERVED0", value: 0)
!772 = !DIEnumerator(name: "AVCOL_TRC_BT709", value: 1)
!773 = !DIEnumerator(name: "AVCOL_TRC_UNSPECIFIED", value: 2)
!774 = !DIEnumerator(name: "AVCOL_TRC_RESERVED", value: 3)
!775 = !DIEnumerator(name: "AVCOL_TRC_GAMMA22", value: 4)
!776 = !DIEnumerator(name: "AVCOL_TRC_GAMMA28", value: 5)
!777 = !DIEnumerator(name: "AVCOL_TRC_SMPTE170M", value: 6)
!778 = !DIEnumerator(name: "AVCOL_TRC_SMPTE240M", value: 7)
!779 = !DIEnumerator(name: "AVCOL_TRC_LINEAR", value: 8)
!780 = !DIEnumerator(name: "AVCOL_TRC_LOG", value: 9)
!781 = !DIEnumerator(name: "AVCOL_TRC_LOG_SQRT", value: 10)
!782 = !DIEnumerator(name: "AVCOL_TRC_IEC61966_2_4", value: 11)
!783 = !DIEnumerator(name: "AVCOL_TRC_BT1361_ECG", value: 12)
!784 = !DIEnumerator(name: "AVCOL_TRC_IEC61966_2_1", value: 13)
!785 = !DIEnumerator(name: "AVCOL_TRC_BT2020_10", value: 14)
!786 = !DIEnumerator(name: "AVCOL_TRC_BT2020_12", value: 15)
!787 = !DIEnumerator(name: "AVCOL_TRC_SMPTE2084", value: 16)
!788 = !DIEnumerator(name: "AVCOL_TRC_SMPTEST2084", value: 16)
!789 = !DIEnumerator(name: "AVCOL_TRC_SMPTE428", value: 17)
!790 = !DIEnumerator(name: "AVCOL_TRC_SMPTEST428_1", value: 17)
!791 = !DIEnumerator(name: "AVCOL_TRC_ARIB_STD_B67", value: 18)
!792 = !DIEnumerator(name: "AVCOL_TRC_NB", value: 19)
!793 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorSpace", file: !474, line: 493, size: 32, align: 32, elements: !794)
!794 = !{!795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811}
!795 = !DIEnumerator(name: "AVCOL_SPC_RGB", value: 0)
!796 = !DIEnumerator(name: "AVCOL_SPC_BT709", value: 1)
!797 = !DIEnumerator(name: "AVCOL_SPC_UNSPECIFIED", value: 2)
!798 = !DIEnumerator(name: "AVCOL_SPC_RESERVED", value: 3)
!799 = !DIEnumerator(name: "AVCOL_SPC_FCC", value: 4)
!800 = !DIEnumerator(name: "AVCOL_SPC_BT470BG", value: 5)
!801 = !DIEnumerator(name: "AVCOL_SPC_SMPTE170M", value: 6)
!802 = !DIEnumerator(name: "AVCOL_SPC_SMPTE240M", value: 7)
!803 = !DIEnumerator(name: "AVCOL_SPC_YCGCO", value: 8)
!804 = !DIEnumerator(name: "AVCOL_SPC_YCOCG", value: 8)
!805 = !DIEnumerator(name: "AVCOL_SPC_BT2020_NCL", value: 9)
!806 = !DIEnumerator(name: "AVCOL_SPC_BT2020_CL", value: 10)
!807 = !DIEnumerator(name: "AVCOL_SPC_SMPTE2085", value: 11)
!808 = !DIEnumerator(name: "AVCOL_SPC_CHROMA_DERIVED_NCL", value: 12)
!809 = !DIEnumerator(name: "AVCOL_SPC_CHROMA_DERIVED_CL", value: 13)
!810 = !DIEnumerator(name: "AVCOL_SPC_ICTCP", value: 14)
!811 = !DIEnumerator(name: "AVCOL_SPC_NB", value: 15)
!812 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVChromaLocation", file: !474, line: 538, size: 32, align: 32, elements: !813)
!813 = !{!814, !815, !816, !817, !818, !819, !820, !821}
!814 = !DIEnumerator(name: "AVCHROMA_LOC_UNSPECIFIED", value: 0)
!815 = !DIEnumerator(name: "AVCHROMA_LOC_LEFT", value: 1)
!816 = !DIEnumerator(name: "AVCHROMA_LOC_CENTER", value: 2)
!817 = !DIEnumerator(name: "AVCHROMA_LOC_TOPLEFT", value: 3)
!818 = !DIEnumerator(name: "AVCHROMA_LOC_TOP", value: 4)
!819 = !DIEnumerator(name: "AVCHROMA_LOC_BOTTOMLEFT", value: 5)
!820 = !DIEnumerator(name: "AVCHROMA_LOC_BOTTOM", value: 6)
!821 = !DIEnumerator(name: "AVCHROMA_LOC_NB", value: 7)
!822 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVPacketSideDataType", file: !14, line: 1175, size: 32, align: 32, elements: !823)
!823 = !{!824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851}
!824 = !DIEnumerator(name: "AV_PKT_DATA_PALETTE", value: 0)
!825 = !DIEnumerator(name: "AV_PKT_DATA_NEW_EXTRADATA", value: 1)
!826 = !DIEnumerator(name: "AV_PKT_DATA_PARAM_CHANGE", value: 2)
!827 = !DIEnumerator(name: "AV_PKT_DATA_H263_MB_INFO", value: 3)
!828 = !DIEnumerator(name: "AV_PKT_DATA_REPLAYGAIN", value: 4)
!829 = !DIEnumerator(name: "AV_PKT_DATA_DISPLAYMATRIX", value: 5)
!830 = !DIEnumerator(name: "AV_PKT_DATA_STEREO3D", value: 6)
!831 = !DIEnumerator(name: "AV_PKT_DATA_AUDIO_SERVICE_TYPE", value: 7)
!832 = !DIEnumerator(name: "AV_PKT_DATA_QUALITY_STATS", value: 8)
!833 = !DIEnumerator(name: "AV_PKT_DATA_FALLBACK_TRACK", value: 9)
!834 = !DIEnumerator(name: "AV_PKT_DATA_CPB_PROPERTIES", value: 10)
!835 = !DIEnumerator(name: "AV_PKT_DATA_SKIP_SAMPLES", value: 11)
!836 = !DIEnumerator(name: "AV_PKT_DATA_JP_DUALMONO", value: 12)
!837 = !DIEnumerator(name: "AV_PKT_DATA_STRINGS_METADATA", value: 13)
!838 = !DIEnumerator(name: "AV_PKT_DATA_SUBTITLE_POSITION", value: 14)
!839 = !DIEnumerator(name: "AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL", value: 15)
!840 = !DIEnumerator(name: "AV_PKT_DATA_WEBVTT_IDENTIFIER", value: 16)
!841 = !DIEnumerator(name: "AV_PKT_DATA_WEBVTT_SETTINGS", value: 17)
!842 = !DIEnumerator(name: "AV_PKT_DATA_METADATA_UPDATE", value: 18)
!843 = !DIEnumerator(name: "AV_PKT_DATA_MPEGTS_STREAM_ID", value: 19)
!844 = !DIEnumerator(name: "AV_PKT_DATA_MASTERING_DISPLAY_METADATA", value: 20)
!845 = !DIEnumerator(name: "AV_PKT_DATA_SPHERICAL", value: 21)
!846 = !DIEnumerator(name: "AV_PKT_DATA_CONTENT_LIGHT_LEVEL", value: 22)
!847 = !DIEnumerator(name: "AV_PKT_DATA_A53_CC", value: 23)
!848 = !DIEnumerator(name: "AV_PKT_DATA_ENCRYPTION_INIT_INFO", value: 24)
!849 = !DIEnumerator(name: "AV_PKT_DATA_ENCRYPTION_INFO", value: 25)
!850 = !DIEnumerator(name: "AV_PKT_DATA_AFD", value: 26)
!851 = !DIEnumerator(name: "AV_PKT_DATA_NB", value: 27)
!852 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVFieldOrder", file: !14, line: 1534, size: 32, align: 32, elements: !853)
!853 = !{!854, !855, !856, !857, !858, !859}
!854 = !DIEnumerator(name: "AV_FIELD_UNKNOWN", value: 0)
!855 = !DIEnumerator(name: "AV_FIELD_PROGRESSIVE", value: 1)
!856 = !DIEnumerator(name: "AV_FIELD_TT", value: 2)
!857 = !DIEnumerator(name: "AV_FIELD_BB", value: 3)
!858 = !DIEnumerator(name: "AV_FIELD_TB", value: 4)
!859 = !DIEnumerator(name: "AV_FIELD_BT", value: 5)
!860 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVAudioServiceType", file: !14, line: 810, size: 32, align: 32, elements: !861)
!861 = !{!862, !863, !864, !865, !866, !867, !868, !869, !870, !871}
!862 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_MAIN", value: 0)
!863 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_EFFECTS", value: 1)
!864 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED", value: 2)
!865 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED", value: 3)
!866 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_DIALOGUE", value: 4)
!867 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_COMMENTARY", value: 5)
!868 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_EMERGENCY", value: 6)
!869 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_VOICE_OVER", value: 7)
!870 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_KARAOKE", value: 8)
!871 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_NB", value: 9)
!872 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVDiscard", file: !14, line: 798, size: 32, align: 32, elements: !873)
!873 = !{!874, !875, !876, !877, !878, !879, !880}
!874 = !DIEnumerator(name: "AVDISCARD_NONE", value: -16)
!875 = !DIEnumerator(name: "AVDISCARD_DEFAULT", value: 0)
!876 = !DIEnumerator(name: "AVDISCARD_NONREF", value: 8)
!877 = !DIEnumerator(name: "AVDISCARD_BIDIR", value: 16)
!878 = !DIEnumerator(name: "AVDISCARD_NONINTRA", value: 24)
!879 = !DIEnumerator(name: "AVDISCARD_NONKEY", value: 32)
!880 = !DIEnumerator(name: "AVDISCARD_ALL", value: 48)
!881 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVSubtitleType", file: !14, line: 3865, size: 32, align: 32, elements: !882)
!882 = !{!883, !884, !885, !886}
!883 = !DIEnumerator(name: "SUBTITLE_NONE", value: 0)
!884 = !DIEnumerator(name: "SUBTITLE_BITMAP", value: 1)
!885 = !DIEnumerator(name: "SUBTITLE_TEXT", value: 2)
!886 = !DIEnumerator(name: "SUBTITLE_ASS", value: 3)
!887 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "fft_permutation_type", file: !888, line: 77, size: 32, align: 32, elements: !889)
!888 = !DIFile(filename: "libavcodec/fft.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!889 = !{!890, !891, !892}
!890 = !DIEnumerator(name: "FF_FFT_PERM_DEFAULT", value: 0)
!891 = !DIEnumerator(name: "FF_FFT_PERM_SWAP_LSBS", value: 1)
!892 = !DIEnumerator(name: "FF_FFT_PERM_AVX", value: 2)
!893 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mdct_permutation_type", file: !888, line: 83, size: 32, align: 32, elements: !894)
!894 = !{!895, !896}
!895 = !DIEnumerator(name: "FF_MDCT_PERM_NONE", value: 0)
!896 = !DIEnumerator(name: "FF_MDCT_PERM_INTERLEAVE", value: 1)
!897 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "RDFTransformType", file: !898, line: 71, size: 32, align: 32, elements: !899)
!898 = !DIFile(filename: "libavcodec/avfft.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!899 = !{!900, !901, !902, !903}
!900 = !DIEnumerator(name: "DFT_R2C", value: 0)
!901 = !DIEnumerator(name: "IDFT_C2R", value: 1)
!902 = !DIEnumerator(name: "IDFT_R2C", value: 2)
!903 = !DIEnumerator(name: "DFT_C2R", value: 3)
!904 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "DCTTransformType", file: !898, line: 93, size: 32, align: 32, elements: !905)
!905 = !{!906, !907, !908, !909}
!906 = !DIEnumerator(name: "DCT_II", value: 0)
!907 = !DIEnumerator(name: "DCT_III", value: 1)
!908 = !DIEnumerator(name: "DCT_I", value: 2)
!909 = !DIEnumerator(name: "DST_I", value: 3)
!910 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !911, line: 68, size: 32, align: 32, elements: !912)
!911 = !DIFile(filename: "libavcodec/wmavoice.c", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!912 = !{!913, !914, !915}
!913 = !DIEnumerator(name: "ACB_TYPE_NONE", value: 0)
!914 = !DIEnumerator(name: "ACB_TYPE_ASYMMETRIC", value: 1)
!915 = !DIEnumerator(name: "ACB_TYPE_HAMMING", value: 2)
!916 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !911, line: 83, size: 32, align: 32, elements: !917)
!917 = !{!918, !919, !920, !921}
!918 = !DIEnumerator(name: "FCB_TYPE_SILENCE", value: 0)
!919 = !DIEnumerator(name: "FCB_TYPE_HARDCODED", value: 1)
!920 = !DIEnumerator(name: "FCB_TYPE_AW_PULSES", value: 2)
!921 = !DIEnumerator(name: "FCB_TYPE_EXC_PULSES", value: 3)
!922 = !{!923, !924, !925, !933, !935, !936, !937, !939, !941, !943, !945}
!923 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!924 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !926, size: 64, align: 64)
!926 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !927)
!927 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "unaligned_32", file: !928, line: 221, size: 32, align: 8, elements: !929)
!928 = !DIFile(filename: "./libavutil/intreadwrite.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!929 = !{!930}
!930 = !DIDerivedType(tag: DW_TAG_member, name: "l", scope: !927, file: !928, line: 221, baseType: !931, size: 32, align: 32)
!931 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !932, line: 51, baseType: !924)
!932 = !DIFile(filename: "/usr/include/stdint.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!933 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !932, line: 48, baseType: !934)
!934 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !927, size: 64, align: 64)
!936 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !938, size: 64, align: 64)
!938 = !DIBasicType(name: "float", size: 32, align: 32, encoding: DW_ATE_float)
!939 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !932, line: 49, baseType: !940)
!940 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!941 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !932, line: 40, baseType: !942)
!942 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!943 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !932, line: 55, baseType: !944)
!944 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!945 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !933, size: 64, align: 64)
!946 = !{!947, !1666, !1671, !1678, !1681, !1688, !1700, !1707, !1711, !1730, !1732, !1733, !1738, !1739, !1743, !1745, !1746, !1747, !1750, !1751, !1755, !1756, !1760, !1765, !1767, !1768, !1772, !1777, !1779, !1780, !1784, !1788, !1792, !1804, !1808, !1995, !2003, !2007, !2011, !2017, !2019, !2020, !2024, !2027, !2031}
!947 = distinct !DIGlobalVariable(name: "ff_wmavoice_decoder", scope: !0, file: !911, line: 1991, type: !948, isLocal: false, isDefinition: true, variable: %struct.AVCodec* @ff_wmavoice_decoder)
!948 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodec", file: !14, line: 3610, baseType: !949)
!949 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodec", file: !14, line: 3468, size: 1984, align: 64, elements: !950)
!950 = !{!951, !955, !956, !957, !958, !959, !968, !971, !974, !977, !980, !981, !1022, !1030, !1031, !1032, !1034, !1581, !1587, !1595, !1599, !1600, !1637, !1641, !1645, !1646, !1650, !1654, !1655, !1659, !1660, !1661}
!951 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !949, file: !14, line: 3475, baseType: !952, size: 64, align: 64)
!952 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !953, size: 64, align: 64)
!953 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !954)
!954 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "long_name", scope: !949, file: !14, line: 3480, baseType: !952, size: 64, align: 64, offset: 64)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !949, file: !14, line: 3481, baseType: !3, size: 32, align: 32, offset: 128)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !949, file: !14, line: 3482, baseType: !13, size: 32, align: 32, offset: 160)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "capabilities", scope: !949, file: !14, line: 3487, baseType: !923, size: 32, align: 32, offset: 192)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "supported_framerates", scope: !949, file: !14, line: 3488, baseType: !960, size: 64, align: 64, offset: 256)
!960 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !961, size: 64, align: 64)
!961 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !962)
!962 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVRational", file: !963, line: 61, baseType: !964)
!963 = !DIFile(filename: "./libavutil/rational.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVRational", file: !963, line: 58, size: 64, align: 32, elements: !965)
!965 = !{!966, !967}
!966 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !964, file: !963, line: 59, baseType: !923, size: 32, align: 32)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "den", scope: !964, file: !963, line: 60, baseType: !923, size: 32, align: 32, offset: 32)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "pix_fmts", scope: !949, file: !14, line: 3489, baseType: !969, size: 64, align: 64, offset: 320)
!969 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !970, size: 64, align: 64)
!970 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !473)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "supported_samplerates", scope: !949, file: !14, line: 3490, baseType: !972, size: 64, align: 64, offset: 384)
!972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !973, size: 64, align: 64)
!973 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !923)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "sample_fmts", scope: !949, file: !14, line: 3491, baseType: !975, size: 64, align: 64, offset: 448)
!975 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !976, size: 64, align: 64)
!976 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !673)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layouts", scope: !949, file: !14, line: 3492, baseType: !978, size: 64, align: 64, offset: 512)
!978 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !979, size: 64, align: 64)
!979 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !943)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "max_lowres", scope: !949, file: !14, line: 3493, baseType: !933, size: 8, align: 8, offset: 576)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "priv_class", scope: !949, file: !14, line: 3494, baseType: !982, size: 64, align: 64, offset: 640)
!982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !983, size: 64, align: 64)
!983 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !984)
!984 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVClass", file: !691, line: 143, baseType: !985)
!985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVClass", file: !691, line: 67, size: 640, align: 64, elements: !986)
!986 = !{!987, !988, !992, !996, !997, !998, !999, !1003, !1009, !1011, !1015}
!987 = !DIDerivedType(tag: DW_TAG_member, name: "class_name", scope: !985, file: !691, line: 72, baseType: !952, size: 64, align: 64)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "item_name", scope: !985, file: !691, line: 78, baseType: !989, size: 64, align: 64, offset: 64)
!989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !990, size: 64, align: 64)
!990 = !DISubroutineType(types: !991)
!991 = !{!952, !936}
!992 = !DIDerivedType(tag: DW_TAG_member, name: "option", scope: !985, file: !691, line: 85, baseType: !993, size: 64, align: 64, offset: 128)
!993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !994, size: 64, align: 64)
!994 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !995)
!995 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVOption", file: !691, line: 85, flags: DIFlagFwdDecl)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !985, file: !691, line: 93, baseType: !923, size: 32, align: 32, offset: 192)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "log_level_offset_offset", scope: !985, file: !691, line: 99, baseType: !923, size: 32, align: 32, offset: 224)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "parent_log_context_offset", scope: !985, file: !691, line: 108, baseType: !923, size: 32, align: 32, offset: 256)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "child_next", scope: !985, file: !691, line: 113, baseType: !1000, size: 64, align: 64, offset: 320)
!1000 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1001, size: 64, align: 64)
!1001 = !DISubroutineType(types: !1002)
!1002 = !{!936, !936, !936}
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "child_class_next", scope: !985, file: !691, line: 123, baseType: !1004, size: 64, align: 64, offset: 384)
!1004 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1005, size: 64, align: 64)
!1005 = !DISubroutineType(types: !1006)
!1006 = !{!1007, !1007}
!1007 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1008, size: 64, align: 64)
!1008 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !985)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "category", scope: !985, file: !691, line: 130, baseType: !1010, size: 32, align: 32, offset: 448)
!1010 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVClassCategory", file: !691, line: 48, baseType: !690)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "get_category", scope: !985, file: !691, line: 136, baseType: !1012, size: 64, align: 64, offset: 512)
!1012 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1013, size: 64, align: 64)
!1013 = !DISubroutineType(types: !1014)
!1014 = !{!1010, !936}
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "query_ranges", scope: !985, file: !691, line: 142, baseType: !1016, size: 64, align: 64, offset: 576)
!1016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1017, size: 64, align: 64)
!1017 = !DISubroutineType(types: !1018)
!1018 = !{!923, !1019, !936, !952, !923}
!1019 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1020, size: 64, align: 64)
!1020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1021, size: 64, align: 64)
!1021 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVOptionRanges", file: !691, line: 60, flags: DIFlagFwdDecl)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "profiles", scope: !949, file: !14, line: 3495, baseType: !1023, size: 64, align: 64, offset: 704)
!1023 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1024, size: 64, align: 64)
!1024 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1025)
!1025 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVProfile", file: !14, line: 3404, baseType: !1026)
!1026 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVProfile", file: !14, line: 3401, size: 128, align: 64, elements: !1027)
!1027 = !{!1028, !1029}
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "profile", scope: !1026, file: !14, line: 3402, baseType: !923, size: 32, align: 32)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1026, file: !14, line: 3403, baseType: !952, size: 64, align: 64, offset: 64)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "wrapper_name", scope: !949, file: !14, line: 3507, baseType: !952, size: 64, align: 64, offset: 768)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data_size", scope: !949, file: !14, line: 3516, baseType: !923, size: 32, align: 32, offset: 832)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !949, file: !14, line: 3517, baseType: !1033, size: 64, align: 64, offset: 896)
!1033 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !949, size: 64, align: 64)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "init_thread_copy", scope: !949, file: !14, line: 3527, baseType: !1035, size: 64, align: 64, offset: 960)
!1035 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1036, size: 64, align: 64)
!1036 = !DISubroutineType(types: !1037)
!1037 = !{!923, !1038}
!1038 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1039, size: 64, align: 64)
!1039 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodecContext", file: !14, line: 3360, baseType: !1040)
!1040 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecContext", file: !14, line: 1556, size: 8448, align: 64, elements: !1041)
!1041 = !{!1042, !1043, !1044, !1045, !1048, !1049, !1050, !1051, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1330, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1519, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580}
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "av_class", scope: !1040, file: !14, line: 1561, baseType: !982, size: 64, align: 64)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "log_level_offset", scope: !1040, file: !14, line: 1562, baseType: !923, size: 32, align: 32, offset: 64)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "codec_type", scope: !1040, file: !14, line: 1564, baseType: !3, size: 32, align: 32, offset: 96)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "codec", scope: !1040, file: !14, line: 1565, baseType: !1046, size: 64, align: 64, offset: 128)
!1046 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1047, size: 64, align: 64)
!1047 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !949)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "codec_id", scope: !1040, file: !14, line: 1566, baseType: !13, size: 32, align: 32, offset: 192)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "codec_tag", scope: !1040, file: !14, line: 1581, baseType: !924, size: 32, align: 32, offset: 224)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data", scope: !1040, file: !14, line: 1583, baseType: !936, size: 64, align: 64, offset: 256)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !1040, file: !14, line: 1591, baseType: !1052, size: 64, align: 64, offset: 320)
!1052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1053, size: 64, align: 64)
!1053 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecInternal", file: !1054, line: 129, size: 1664, align: 64, elements: !1055)
!1054 = !DIFile(filename: "libavcodec/internal.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!1055 = !{!1056, !1057, !1058, !1059, !1156, !1177, !1178, !1207, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303}
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "is_copy", scope: !1053, file: !1054, line: 136, baseType: !923, size: 32, align: 32)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "allocate_progress", scope: !1053, file: !1054, line: 151, baseType: !923, size: 32, align: 32, offset: 32)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "last_audio_frame", scope: !1053, file: !1054, line: 157, baseType: !923, size: 32, align: 32, offset: 64)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "to_free", scope: !1053, file: !1054, line: 159, baseType: !1060, size: 64, align: 64, offset: 128)
!1060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1061, size: 64, align: 64)
!1061 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFrame", file: !722, line: 646, baseType: !1062)
!1062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFrame", file: !722, line: 268, size: 4288, align: 64, elements: !1063)
!1063 = !{!1064, !1068, !1070, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1108, !1110, !1111, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1144, !1145, !1146, !1147, !1148, !1149, !1152, !1153, !1154, !1155}
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1062, file: !722, line: 282, baseType: !1065, size: 512, align: 64)
!1065 = !DICompositeType(tag: DW_TAG_array_type, baseType: !945, size: 512, align: 64, elements: !1066)
!1066 = !{!1067}
!1067 = !DISubrange(count: 8)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "linesize", scope: !1062, file: !722, line: 299, baseType: !1069, size: 256, align: 32, offset: 512)
!1069 = !DICompositeType(tag: DW_TAG_array_type, baseType: !923, size: 256, align: 32, elements: !1066)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "extended_data", scope: !1062, file: !722, line: 315, baseType: !1071, size: 64, align: 64, offset: 768)
!1071 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !945, size: 64, align: 64)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1062, file: !722, line: 326, baseType: !923, size: 32, align: 32, offset: 832)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !1062, file: !722, line: 326, baseType: !923, size: 32, align: 32, offset: 864)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "nb_samples", scope: !1062, file: !722, line: 334, baseType: !923, size: 32, align: 32, offset: 896)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !1062, file: !722, line: 341, baseType: !923, size: 32, align: 32, offset: 928)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "key_frame", scope: !1062, file: !722, line: 346, baseType: !923, size: 32, align: 32, offset: 960)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "pict_type", scope: !1062, file: !722, line: 351, baseType: !711, size: 32, align: 32, offset: 992)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "sample_aspect_ratio", scope: !1062, file: !722, line: 356, baseType: !962, size: 64, align: 32, offset: 1024)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "pts", scope: !1062, file: !722, line: 361, baseType: !941, size: 64, align: 64, offset: 1088)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_pts", scope: !1062, file: !722, line: 369, baseType: !941, size: 64, align: 64, offset: 1152)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_dts", scope: !1062, file: !722, line: 377, baseType: !941, size: 64, align: 64, offset: 1216)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "coded_picture_number", scope: !1062, file: !722, line: 382, baseType: !923, size: 32, align: 32, offset: 1280)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "display_picture_number", scope: !1062, file: !722, line: 386, baseType: !923, size: 32, align: 32, offset: 1312)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "quality", scope: !1062, file: !722, line: 391, baseType: !923, size: 32, align: 32, offset: 1344)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "opaque", scope: !1062, file: !722, line: 396, baseType: !936, size: 64, align: 64, offset: 1408)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !1062, file: !722, line: 403, baseType: !1087, size: 512, align: 64, offset: 1472)
!1087 = !DICompositeType(tag: DW_TAG_array_type, baseType: !943, size: 512, align: 64, elements: !1066)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "repeat_pict", scope: !1062, file: !722, line: 410, baseType: !923, size: 32, align: 32, offset: 1984)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "interlaced_frame", scope: !1062, file: !722, line: 415, baseType: !923, size: 32, align: 32, offset: 2016)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "top_field_first", scope: !1062, file: !722, line: 420, baseType: !923, size: 32, align: 32, offset: 2048)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "palette_has_changed", scope: !1062, file: !722, line: 425, baseType: !923, size: 32, align: 32, offset: 2080)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "reordered_opaque", scope: !1062, file: !722, line: 435, baseType: !941, size: 64, align: 64, offset: 2112)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !1062, file: !722, line: 440, baseType: !923, size: 32, align: 32, offset: 2176)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layout", scope: !1062, file: !722, line: 445, baseType: !943, size: 64, align: 64, offset: 2240)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1062, file: !722, line: 459, baseType: !1096, size: 512, align: 64, offset: 2304)
!1096 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1097, size: 512, align: 64, elements: !1066)
!1097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1098, size: 64, align: 64)
!1098 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBufferRef", file: !1099, line: 94, baseType: !1100)
!1099 = !DIFile(filename: "./libavutil/buffer.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!1100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVBufferRef", file: !1099, line: 81, size: 192, align: 64, elements: !1101)
!1101 = !{!1102, !1106, !1107}
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !1100, file: !1099, line: 82, baseType: !1103, size: 64, align: 64)
!1103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1104, size: 64, align: 64)
!1104 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBuffer", file: !1099, line: 73, baseType: !1105)
!1105 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVBuffer", file: !1099, line: 73, flags: DIFlagFwdDecl)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1100, file: !1099, line: 89, baseType: !945, size: 64, align: 64, offset: 64)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1100, file: !1099, line: 93, baseType: !923, size: 32, align: 32, offset: 128)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "extended_buf", scope: !1062, file: !722, line: 473, baseType: !1109, size: 64, align: 64, offset: 2816)
!1109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1097, size: 64, align: 64)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "nb_extended_buf", scope: !1062, file: !722, line: 477, baseType: !923, size: 32, align: 32, offset: 2880)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "side_data", scope: !1062, file: !722, line: 479, baseType: !1112, size: 64, align: 64, offset: 2944)
!1112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1113, size: 64, align: 64)
!1113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1114, size: 64, align: 64)
!1114 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFrameSideData", file: !722, line: 207, baseType: !1115)
!1115 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFrameSideData", file: !722, line: 201, size: 320, align: 64, elements: !1116)
!1116 = !{!1117, !1118, !1119, !1120, !1125}
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1115, file: !722, line: 202, baseType: !721, size: 32, align: 32)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1115, file: !722, line: 203, baseType: !945, size: 64, align: 64, offset: 64)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1115, file: !722, line: 204, baseType: !923, size: 32, align: 32, offset: 128)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "metadata", scope: !1115, file: !722, line: 205, baseType: !1121, size: 64, align: 64, offset: 192)
!1121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1122, size: 64, align: 64)
!1122 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVDictionary", file: !1123, line: 86, baseType: !1124)
!1123 = !DIFile(filename: "./libavutil/dict.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!1124 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVDictionary", file: !1123, line: 86, flags: DIFlagFwdDecl)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1115, file: !722, line: 206, baseType: !1097, size: 64, align: 64, offset: 256)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "nb_side_data", scope: !1062, file: !722, line: 480, baseType: !923, size: 32, align: 32, offset: 3008)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1062, file: !722, line: 505, baseType: !923, size: 32, align: 32, offset: 3040)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "color_range", scope: !1062, file: !722, line: 512, baseType: !745, size: 32, align: 32, offset: 3072)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "color_primaries", scope: !1062, file: !722, line: 514, baseType: !751, size: 32, align: 32, offset: 3104)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "color_trc", scope: !1062, file: !722, line: 516, baseType: !769, size: 32, align: 32, offset: 3136)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace", scope: !1062, file: !722, line: 523, baseType: !793, size: 32, align: 32, offset: 3168)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_location", scope: !1062, file: !722, line: 525, baseType: !812, size: 32, align: 32, offset: 3200)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "best_effort_timestamp", scope: !1062, file: !722, line: 532, baseType: !941, size: 64, align: 64, offset: 3264)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_pos", scope: !1062, file: !722, line: 539, baseType: !941, size: 64, align: 64, offset: 3328)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_duration", scope: !1062, file: !722, line: 547, baseType: !941, size: 64, align: 64, offset: 3392)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "metadata", scope: !1062, file: !722, line: 554, baseType: !1121, size: 64, align: 64, offset: 3456)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "decode_error_flags", scope: !1062, file: !722, line: 563, baseType: !923, size: 32, align: 32, offset: 3520)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !1062, file: !722, line: 572, baseType: !923, size: 32, align: 32, offset: 3552)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_size", scope: !1062, file: !722, line: 581, baseType: !923, size: 32, align: 32, offset: 3584)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "qscale_table", scope: !1062, file: !722, line: 588, baseType: !1141, size: 64, align: 64, offset: 3648)
!1141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1142, size: 64, align: 64)
!1142 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !932, line: 36, baseType: !1143)
!1143 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "qstride", scope: !1062, file: !722, line: 593, baseType: !923, size: 32, align: 32, offset: 3712)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "qscale_type", scope: !1062, file: !722, line: 596, baseType: !923, size: 32, align: 32, offset: 3744)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "qp_table_buf", scope: !1062, file: !722, line: 599, baseType: !1097, size: 64, align: 64, offset: 3776)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "hw_frames_ctx", scope: !1062, file: !722, line: 605, baseType: !1097, size: 64, align: 64, offset: 3840)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "opaque_ref", scope: !1062, file: !722, line: 616, baseType: !1097, size: 64, align: 64, offset: 3904)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "crop_top", scope: !1062, file: !722, line: 626, baseType: !1150, size: 64, align: 64, offset: 3968)
!1150 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1151, line: 216, baseType: !944)
!1151 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "crop_bottom", scope: !1062, file: !722, line: 627, baseType: !1150, size: 64, align: 64, offset: 4032)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "crop_left", scope: !1062, file: !722, line: 628, baseType: !1150, size: 64, align: 64, offset: 4096)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "crop_right", scope: !1062, file: !722, line: 629, baseType: !1150, size: 64, align: 64, offset: 4160)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "private_ref", scope: !1062, file: !722, line: 645, baseType: !1097, size: 64, align: 64, offset: 4224)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "pool", scope: !1053, file: !1054, line: 161, baseType: !1157, size: 64, align: 64, offset: 192)
!1157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1158, size: 64, align: 64)
!1158 = !DIDerivedType(tag: DW_TAG_typedef, name: "FramePool", file: !1054, line: 117, baseType: !1159)
!1159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FramePool", file: !1054, line: 100, size: 832, align: 64, elements: !1160)
!1160 = !{!1161, !1168, !1169, !1170, !1171, !1172, !1174, !1175, !1176}
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "pools", scope: !1159, file: !1054, line: 105, baseType: !1162, size: 256, align: 64)
!1162 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1163, size: 256, align: 64, elements: !1166)
!1163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1164, size: 64, align: 64)
!1164 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBufferPool", file: !1099, line: 238, baseType: !1165)
!1165 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVBufferPool", file: !1099, line: 238, flags: DIFlagFwdDecl)
!1166 = !{!1167}
!1167 = !DISubrange(count: 4)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !1159, file: !1054, line: 110, baseType: !923, size: 32, align: 32, offset: 256)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1159, file: !1054, line: 111, baseType: !923, size: 32, align: 32, offset: 288)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !1159, file: !1054, line: 111, baseType: !923, size: 32, align: 32, offset: 320)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "stride_align", scope: !1159, file: !1054, line: 112, baseType: !1069, size: 256, align: 32, offset: 352)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "linesize", scope: !1159, file: !1054, line: 113, baseType: !1173, size: 128, align: 32, offset: 608)
!1173 = !DICompositeType(tag: DW_TAG_array_type, baseType: !923, size: 128, align: 32, elements: !1166)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "planes", scope: !1159, file: !1054, line: 114, baseType: !923, size: 32, align: 32, offset: 736)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !1159, file: !1054, line: 115, baseType: !923, size: 32, align: 32, offset: 768)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "samples", scope: !1159, file: !1054, line: 116, baseType: !923, size: 32, align: 32, offset: 800)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "thread_ctx", scope: !1053, file: !1054, line: 163, baseType: !936, size: 64, align: 64, offset: 256)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1053, file: !1054, line: 165, baseType: !1179, size: 128, align: 64, offset: 320)
!1179 = !DIDerivedType(tag: DW_TAG_typedef, name: "DecodeSimpleContext", file: !1054, line: 122, baseType: !1180)
!1180 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DecodeSimpleContext", file: !1054, line: 119, size: 128, align: 64, elements: !1181)
!1181 = !{!1182, !1206}
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "in_pkt", scope: !1180, file: !1054, line: 120, baseType: !1183, size: 64, align: 64)
!1183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1184, size: 64, align: 64)
!1184 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVPacket", file: !14, line: 1499, baseType: !1185)
!1185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVPacket", file: !14, line: 1445, size: 704, align: 64, elements: !1186)
!1186 = !{!1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1202, !1203, !1204, !1205}
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1185, file: !14, line: 1451, baseType: !1097, size: 64, align: 64)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "pts", scope: !1185, file: !14, line: 1461, baseType: !941, size: 64, align: 64, offset: 64)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "dts", scope: !1185, file: !14, line: 1467, baseType: !941, size: 64, align: 64, offset: 128)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1185, file: !14, line: 1468, baseType: !945, size: 64, align: 64, offset: 192)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1185, file: !14, line: 1469, baseType: !923, size: 32, align: 32, offset: 256)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "stream_index", scope: !1185, file: !14, line: 1470, baseType: !923, size: 32, align: 32, offset: 288)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1185, file: !14, line: 1474, baseType: !923, size: 32, align: 32, offset: 320)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "side_data", scope: !1185, file: !14, line: 1479, baseType: !1195, size: 64, align: 64, offset: 384)
!1195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1196, size: 64, align: 64)
!1196 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVPacketSideData", file: !14, line: 1415, baseType: !1197)
!1197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVPacketSideData", file: !14, line: 1411, size: 128, align: 64, elements: !1198)
!1198 = !{!1199, !1200, !1201}
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1197, file: !14, line: 1412, baseType: !945, size: 64, align: 64)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1197, file: !14, line: 1413, baseType: !923, size: 32, align: 32, offset: 64)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1197, file: !14, line: 1414, baseType: !822, size: 32, align: 32, offset: 96)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "side_data_elems", scope: !1185, file: !14, line: 1480, baseType: !923, size: 32, align: 32, offset: 448)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "duration", scope: !1185, file: !14, line: 1486, baseType: !941, size: 64, align: 64, offset: 512)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !1185, file: !14, line: 1488, baseType: !941, size: 64, align: 64, offset: 576)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "convergence_duration", scope: !1185, file: !14, line: 1497, baseType: !941, size: 64, align: 64, offset: 640)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "out_frame", scope: !1180, file: !1054, line: 121, baseType: !1060, size: 64, align: 64, offset: 64)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1053, file: !1054, line: 166, baseType: !1208, size: 128, align: 64, offset: 448)
!1208 = !DIDerivedType(tag: DW_TAG_typedef, name: "DecodeFilterContext", file: !1054, line: 127, baseType: !1209)
!1209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DecodeFilterContext", file: !1054, line: 124, size: 128, align: 64, elements: !1210)
!1210 = !{!1211, !1284}
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "bsfs", scope: !1209, file: !1054, line: 125, baseType: !1212, size: 64, align: 64)
!1212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1213, size: 64, align: 64)
!1213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1214, size: 64, align: 64)
!1214 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBSFContext", file: !14, line: 5794, baseType: !1215)
!1215 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVBSFContext", file: !14, line: 5747, size: 512, align: 64, elements: !1216)
!1216 = !{!1217, !1218, !1242, !1246, !1247, !1281, !1282, !1283}
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "av_class", scope: !1215, file: !14, line: 5751, baseType: !982, size: 64, align: 64)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1215, file: !14, line: 5756, baseType: !1219, size: 64, align: 64, offset: 64)
!1219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1220, size: 64, align: 64)
!1220 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1221)
!1221 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVBitStreamFilter", file: !14, line: 5796, size: 512, align: 64, elements: !1222)
!1222 = !{!1223, !1224, !1227, !1228, !1229, !1233, !1237, !1241}
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1221, file: !14, line: 5797, baseType: !952, size: 64, align: 64)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "codec_ids", scope: !1221, file: !14, line: 5804, baseType: !1225, size: 64, align: 64, offset: 64)
!1225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1226, size: 64, align: 64)
!1226 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !13)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "priv_class", scope: !1221, file: !14, line: 5815, baseType: !982, size: 64, align: 64, offset: 128)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data_size", scope: !1221, file: !14, line: 5825, baseType: !923, size: 32, align: 32, offset: 192)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !1221, file: !14, line: 5826, baseType: !1230, size: 64, align: 64, offset: 256)
!1230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1231, size: 64, align: 64)
!1231 = !DISubroutineType(types: !1232)
!1232 = !{!923, !1213}
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1221, file: !14, line: 5827, baseType: !1234, size: 64, align: 64, offset: 320)
!1234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1235, size: 64, align: 64)
!1235 = !DISubroutineType(types: !1236)
!1236 = !{!923, !1213, !1183}
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "close", scope: !1221, file: !14, line: 5828, baseType: !1238, size: 64, align: 64, offset: 384)
!1238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1239, size: 64, align: 64)
!1239 = !DISubroutineType(types: !1240)
!1240 = !{null, !1213}
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "flush", scope: !1221, file: !14, line: 5829, baseType: !1238, size: 64, align: 64, offset: 448)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !1215, file: !14, line: 5762, baseType: !1243, size: 64, align: 64, offset: 128)
!1243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1244, size: 64, align: 64)
!1244 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBSFInternal", file: !14, line: 5735, baseType: !1245)
!1245 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVBSFInternal", file: !14, line: 5735, flags: DIFlagFwdDecl)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data", scope: !1215, file: !14, line: 5768, baseType: !936, size: 64, align: 64, offset: 192)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "par_in", scope: !1215, file: !14, line: 5775, baseType: !1248, size: 64, align: 64, offset: 256)
!1248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1249, size: 64, align: 64)
!1249 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodecParameters", file: !14, line: 4085, baseType: !1250)
!1250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecParameters", file: !14, line: 3936, size: 1152, align: 64, elements: !1251)
!1251 = !{!1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280}
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "codec_type", scope: !1250, file: !14, line: 3940, baseType: !3, size: 32, align: 32)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "codec_id", scope: !1250, file: !14, line: 3944, baseType: !13, size: 32, align: 32, offset: 32)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "codec_tag", scope: !1250, file: !14, line: 3948, baseType: !931, size: 32, align: 32, offset: 64)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "extradata", scope: !1250, file: !14, line: 3958, baseType: !945, size: 64, align: 64, offset: 128)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "extradata_size", scope: !1250, file: !14, line: 3962, baseType: !923, size: 32, align: 32, offset: 192)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !1250, file: !14, line: 3968, baseType: !923, size: 32, align: 32, offset: 224)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "bit_rate", scope: !1250, file: !14, line: 3973, baseType: !941, size: 64, align: 64, offset: 256)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_coded_sample", scope: !1250, file: !14, line: 3986, baseType: !923, size: 32, align: 32, offset: 320)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_raw_sample", scope: !1250, file: !14, line: 3999, baseType: !923, size: 32, align: 32, offset: 352)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "profile", scope: !1250, file: !14, line: 4004, baseType: !923, size: 32, align: 32, offset: 384)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !1250, file: !14, line: 4005, baseType: !923, size: 32, align: 32, offset: 416)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1250, file: !14, line: 4010, baseType: !923, size: 32, align: 32, offset: 448)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !1250, file: !14, line: 4011, baseType: !923, size: 32, align: 32, offset: 480)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "sample_aspect_ratio", scope: !1250, file: !14, line: 4020, baseType: !962, size: 64, align: 32, offset: 512)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "field_order", scope: !1250, file: !14, line: 4025, baseType: !852, size: 32, align: 32, offset: 576)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "color_range", scope: !1250, file: !14, line: 4030, baseType: !745, size: 32, align: 32, offset: 608)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "color_primaries", scope: !1250, file: !14, line: 4031, baseType: !751, size: 32, align: 32, offset: 640)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "color_trc", scope: !1250, file: !14, line: 4032, baseType: !769, size: 32, align: 32, offset: 672)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "color_space", scope: !1250, file: !14, line: 4033, baseType: !793, size: 32, align: 32, offset: 704)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_location", scope: !1250, file: !14, line: 4034, baseType: !812, size: 32, align: 32, offset: 736)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "video_delay", scope: !1250, file: !14, line: 4039, baseType: !923, size: 32, align: 32, offset: 768)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layout", scope: !1250, file: !14, line: 4046, baseType: !943, size: 64, align: 64, offset: 832)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !1250, file: !14, line: 4050, baseType: !923, size: 32, align: 32, offset: 896)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !1250, file: !14, line: 4054, baseType: !923, size: 32, align: 32, offset: 928)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "block_align", scope: !1250, file: !14, line: 4061, baseType: !923, size: 32, align: 32, offset: 960)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "frame_size", scope: !1250, file: !14, line: 4065, baseType: !923, size: 32, align: 32, offset: 992)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "initial_padding", scope: !1250, file: !14, line: 4073, baseType: !923, size: 32, align: 32, offset: 1024)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "trailing_padding", scope: !1250, file: !14, line: 4080, baseType: !923, size: 32, align: 32, offset: 1056)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "seek_preroll", scope: !1250, file: !14, line: 4084, baseType: !923, size: 32, align: 32, offset: 1088)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "par_out", scope: !1215, file: !14, line: 5781, baseType: !1248, size: 64, align: 64, offset: 320)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "time_base_in", scope: !1215, file: !14, line: 5787, baseType: !962, size: 64, align: 32, offset: 384)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "time_base_out", scope: !1215, file: !14, line: 5793, baseType: !962, size: 64, align: 32, offset: 448)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "nb_bsfs", scope: !1209, file: !1054, line: 126, baseType: !923, size: 32, align: 32, offset: 64)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "last_pkt_props", scope: !1053, file: !1054, line: 172, baseType: !1183, size: 64, align: 64, offset: 576)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "byte_buffer", scope: !1053, file: !1054, line: 177, baseType: !945, size: 64, align: 64, offset: 640)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "byte_buffer_size", scope: !1053, file: !1054, line: 178, baseType: !924, size: 32, align: 32, offset: 704)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "frame_thread_encoder", scope: !1053, file: !1054, line: 180, baseType: !936, size: 64, align: 64, offset: 768)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "skip_samples", scope: !1053, file: !1054, line: 185, baseType: !923, size: 32, align: 32, offset: 832)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "hwaccel_priv_data", scope: !1053, file: !1054, line: 190, baseType: !936, size: 64, align: 64, offset: 896)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "draining", scope: !1053, file: !1054, line: 195, baseType: !923, size: 32, align: 32, offset: 960)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "buffer_pkt", scope: !1053, file: !1054, line: 200, baseType: !1183, size: 64, align: 64, offset: 1024)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "buffer_pkt_valid", scope: !1053, file: !1054, line: 201, baseType: !923, size: 32, align: 32, offset: 1088)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "buffer_frame", scope: !1053, file: !1054, line: 202, baseType: !1060, size: 64, align: 64, offset: 1152)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "draining_done", scope: !1053, file: !1054, line: 203, baseType: !923, size: 32, align: 32, offset: 1216)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "compat_decode", scope: !1053, file: !1054, line: 205, baseType: !923, size: 32, align: 32, offset: 1248)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "compat_decode_warned", scope: !1053, file: !1054, line: 206, baseType: !923, size: 32, align: 32, offset: 1280)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "compat_decode_consumed", scope: !1053, file: !1054, line: 209, baseType: !1150, size: 64, align: 64, offset: 1344)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "compat_decode_partial_size", scope: !1053, file: !1054, line: 212, baseType: !1150, size: 64, align: 64, offset: 1408)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "compat_decode_frame", scope: !1053, file: !1054, line: 213, baseType: !1060, size: 64, align: 64, offset: 1472)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "showed_multi_packet_warning", scope: !1053, file: !1054, line: 215, baseType: !923, size: 32, align: 32, offset: 1536)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "skip_samples_multiplier", scope: !1053, file: !1054, line: 217, baseType: !923, size: 32, align: 32, offset: 1568)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "nb_draining_errors", scope: !1053, file: !1054, line: 220, baseType: !923, size: 32, align: 32, offset: 1600)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "opaque", scope: !1040, file: !14, line: 1598, baseType: !936, size: 64, align: 64, offset: 384)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "bit_rate", scope: !1040, file: !14, line: 1606, baseType: !941, size: 64, align: 64, offset: 448)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "bit_rate_tolerance", scope: !1040, file: !14, line: 1614, baseType: !923, size: 32, align: 32, offset: 512)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "global_quality", scope: !1040, file: !14, line: 1622, baseType: !923, size: 32, align: 32, offset: 544)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "compression_level", scope: !1040, file: !14, line: 1628, baseType: !923, size: 32, align: 32, offset: 576)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1040, file: !14, line: 1636, baseType: !923, size: 32, align: 32, offset: 608)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "flags2", scope: !1040, file: !14, line: 1643, baseType: !923, size: 32, align: 32, offset: 640)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "extradata", scope: !1040, file: !14, line: 1657, baseType: !945, size: 64, align: 64, offset: 704)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "extradata_size", scope: !1040, file: !14, line: 1658, baseType: !923, size: 32, align: 32, offset: 768)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "time_base", scope: !1040, file: !14, line: 1679, baseType: !962, size: 64, align: 32, offset: 800)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "ticks_per_frame", scope: !1040, file: !14, line: 1688, baseType: !923, size: 32, align: 32, offset: 864)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "delay", scope: !1040, file: !14, line: 1712, baseType: !923, size: 32, align: 32, offset: 896)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1040, file: !14, line: 1729, baseType: !923, size: 32, align: 32, offset: 928)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !1040, file: !14, line: 1729, baseType: !923, size: 32, align: 32, offset: 960)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "coded_width", scope: !1040, file: !14, line: 1744, baseType: !923, size: 32, align: 32, offset: 992)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "coded_height", scope: !1040, file: !14, line: 1744, baseType: !923, size: 32, align: 32, offset: 1024)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "gop_size", scope: !1040, file: !14, line: 1751, baseType: !923, size: 32, align: 32, offset: 1056)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "pix_fmt", scope: !1040, file: !14, line: 1766, baseType: !473, size: 32, align: 32, offset: 1088)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "draw_horiz_band", scope: !1040, file: !14, line: 1791, baseType: !1323, size: 64, align: 64, offset: 1152)
!1323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1324, size: 64, align: 64)
!1324 = !DISubroutineType(types: !1325)
!1325 = !{null, !1326, !1327, !1329, !923, !923, !923}
!1326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1040, size: 64, align: 64)
!1327 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1328, size: 64, align: 64)
!1328 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1061)
!1329 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !923, size: 64, align: 64)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "get_format", scope: !1040, file: !14, line: 1808, baseType: !1331, size: 64, align: 64, offset: 1216)
!1331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1332, size: 64, align: 64)
!1332 = !DISubroutineType(types: !1333)
!1333 = !{!473, !1326, !969}
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "max_b_frames", scope: !1040, file: !14, line: 1816, baseType: !923, size: 32, align: 32, offset: 1280)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "b_quant_factor", scope: !1040, file: !14, line: 1825, baseType: !938, size: 32, align: 32, offset: 1312)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "b_frame_strategy", scope: !1040, file: !14, line: 1830, baseType: !923, size: 32, align: 32, offset: 1344)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "b_quant_offset", scope: !1040, file: !14, line: 1838, baseType: !938, size: 32, align: 32, offset: 1376)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "has_b_frames", scope: !1040, file: !14, line: 1846, baseType: !923, size: 32, align: 32, offset: 1408)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "mpeg_quant", scope: !1040, file: !14, line: 1851, baseType: !923, size: 32, align: 32, offset: 1440)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "i_quant_factor", scope: !1040, file: !14, line: 1861, baseType: !938, size: 32, align: 32, offset: 1472)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "i_quant_offset", scope: !1040, file: !14, line: 1868, baseType: !938, size: 32, align: 32, offset: 1504)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "lumi_masking", scope: !1040, file: !14, line: 1875, baseType: !938, size: 32, align: 32, offset: 1536)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "temporal_cplx_masking", scope: !1040, file: !14, line: 1882, baseType: !938, size: 32, align: 32, offset: 1568)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "spatial_cplx_masking", scope: !1040, file: !14, line: 1889, baseType: !938, size: 32, align: 32, offset: 1600)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "p_masking", scope: !1040, file: !14, line: 1896, baseType: !938, size: 32, align: 32, offset: 1632)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "dark_masking", scope: !1040, file: !14, line: 1903, baseType: !938, size: 32, align: 32, offset: 1664)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "slice_count", scope: !1040, file: !14, line: 1910, baseType: !923, size: 32, align: 32, offset: 1696)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "prediction_method", scope: !1040, file: !14, line: 1915, baseType: !923, size: 32, align: 32, offset: 1728)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "slice_offset", scope: !1040, file: !14, line: 1926, baseType: !1329, size: 64, align: 64, offset: 1792)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "sample_aspect_ratio", scope: !1040, file: !14, line: 1935, baseType: !962, size: 64, align: 32, offset: 1856)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "me_cmp", scope: !1040, file: !14, line: 1942, baseType: !923, size: 32, align: 32, offset: 1920)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "me_sub_cmp", scope: !1040, file: !14, line: 1948, baseType: !923, size: 32, align: 32, offset: 1952)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "mb_cmp", scope: !1040, file: !14, line: 1954, baseType: !923, size: 32, align: 32, offset: 1984)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "ildct_cmp", scope: !1040, file: !14, line: 1960, baseType: !923, size: 32, align: 32, offset: 2016)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "dia_size", scope: !1040, file: !14, line: 1984, baseType: !923, size: 32, align: 32, offset: 2048)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "last_predictor_count", scope: !1040, file: !14, line: 1991, baseType: !923, size: 32, align: 32, offset: 2080)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "pre_me", scope: !1040, file: !14, line: 1996, baseType: !923, size: 32, align: 32, offset: 2112)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "me_pre_cmp", scope: !1040, file: !14, line: 2004, baseType: !923, size: 32, align: 32, offset: 2144)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "pre_dia_size", scope: !1040, file: !14, line: 2011, baseType: !923, size: 32, align: 32, offset: 2176)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "me_subpel_quality", scope: !1040, file: !14, line: 2018, baseType: !923, size: 32, align: 32, offset: 2208)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "me_range", scope: !1040, file: !14, line: 2027, baseType: !923, size: 32, align: 32, offset: 2240)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "slice_flags", scope: !1040, file: !14, line: 2034, baseType: !923, size: 32, align: 32, offset: 2272)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "mb_decision", scope: !1040, file: !14, line: 2044, baseType: !923, size: 32, align: 32, offset: 2304)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "intra_matrix", scope: !1040, file: !14, line: 2054, baseType: !1365, size: 64, align: 64, offset: 2368)
!1365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !939, size: 64, align: 64)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "inter_matrix", scope: !1040, file: !14, line: 2061, baseType: !1365, size: 64, align: 64, offset: 2432)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "scenechange_threshold", scope: !1040, file: !14, line: 2066, baseType: !923, size: 32, align: 32, offset: 2496)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "noise_reduction", scope: !1040, file: !14, line: 2070, baseType: !923, size: 32, align: 32, offset: 2528)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "intra_dc_precision", scope: !1040, file: !14, line: 2078, baseType: !923, size: 32, align: 32, offset: 2560)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "skip_top", scope: !1040, file: !14, line: 2085, baseType: !923, size: 32, align: 32, offset: 2592)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "skip_bottom", scope: !1040, file: !14, line: 2092, baseType: !923, size: 32, align: 32, offset: 2624)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "mb_lmin", scope: !1040, file: !14, line: 2099, baseType: !923, size: 32, align: 32, offset: 2656)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "mb_lmax", scope: !1040, file: !14, line: 2106, baseType: !923, size: 32, align: 32, offset: 2688)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "me_penalty_compensation", scope: !1040, file: !14, line: 2113, baseType: !923, size: 32, align: 32, offset: 2720)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "bidir_refine", scope: !1040, file: !14, line: 2120, baseType: !923, size: 32, align: 32, offset: 2752)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "brd_scale", scope: !1040, file: !14, line: 2125, baseType: !923, size: 32, align: 32, offset: 2784)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "keyint_min", scope: !1040, file: !14, line: 2133, baseType: !923, size: 32, align: 32, offset: 2816)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "refs", scope: !1040, file: !14, line: 2140, baseType: !923, size: 32, align: 32, offset: 2848)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "chromaoffset", scope: !1040, file: !14, line: 2145, baseType: !923, size: 32, align: 32, offset: 2880)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "mv0_threshold", scope: !1040, file: !14, line: 2153, baseType: !923, size: 32, align: 32, offset: 2912)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "b_sensitivity", scope: !1040, file: !14, line: 2158, baseType: !923, size: 32, align: 32, offset: 2944)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "color_primaries", scope: !1040, file: !14, line: 2166, baseType: !751, size: 32, align: 32, offset: 2976)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "color_trc", scope: !1040, file: !14, line: 2173, baseType: !769, size: 32, align: 32, offset: 3008)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace", scope: !1040, file: !14, line: 2180, baseType: !793, size: 32, align: 32, offset: 3040)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "color_range", scope: !1040, file: !14, line: 2187, baseType: !745, size: 32, align: 32, offset: 3072)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_sample_location", scope: !1040, file: !14, line: 2194, baseType: !812, size: 32, align: 32, offset: 3104)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "slices", scope: !1040, file: !14, line: 2203, baseType: !923, size: 32, align: 32, offset: 3136)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "field_order", scope: !1040, file: !14, line: 2209, baseType: !852, size: 32, align: 32, offset: 3168)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !1040, file: !14, line: 2212, baseType: !923, size: 32, align: 32, offset: 3200)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !1040, file: !14, line: 2213, baseType: !923, size: 32, align: 32, offset: 3232)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "sample_fmt", scope: !1040, file: !14, line: 2220, baseType: !673, size: 32, align: 32, offset: 3264)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "frame_size", scope: !1040, file: !14, line: 2232, baseType: !923, size: 32, align: 32, offset: 3296)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "frame_number", scope: !1040, file: !14, line: 2243, baseType: !923, size: 32, align: 32, offset: 3328)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "block_align", scope: !1040, file: !14, line: 2249, baseType: !923, size: 32, align: 32, offset: 3360)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "cutoff", scope: !1040, file: !14, line: 2256, baseType: !923, size: 32, align: 32, offset: 3392)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layout", scope: !1040, file: !14, line: 2263, baseType: !943, size: 64, align: 64, offset: 3456)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "request_channel_layout", scope: !1040, file: !14, line: 2270, baseType: !943, size: 64, align: 64, offset: 3520)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "audio_service_type", scope: !1040, file: !14, line: 2277, baseType: !860, size: 32, align: 32, offset: 3584)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "request_sample_fmt", scope: !1040, file: !14, line: 2285, baseType: !673, size: 32, align: 32, offset: 3616)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "get_buffer2", scope: !1040, file: !14, line: 2367, baseType: !1401, size: 64, align: 64, offset: 3648)
!1401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1402, size: 64, align: 64)
!1402 = !DISubroutineType(types: !1403)
!1403 = !{!923, !1326, !1060, !923}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "refcounted_frames", scope: !1040, file: !14, line: 2383, baseType: !923, size: 32, align: 32, offset: 3712)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "qcompress", scope: !1040, file: !14, line: 2386, baseType: !938, size: 32, align: 32, offset: 3744)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "qblur", scope: !1040, file: !14, line: 2387, baseType: !938, size: 32, align: 32, offset: 3776)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "qmin", scope: !1040, file: !14, line: 2394, baseType: !923, size: 32, align: 32, offset: 3808)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "qmax", scope: !1040, file: !14, line: 2401, baseType: !923, size: 32, align: 32, offset: 3840)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "max_qdiff", scope: !1040, file: !14, line: 2408, baseType: !923, size: 32, align: 32, offset: 3872)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "rc_buffer_size", scope: !1040, file: !14, line: 2415, baseType: !923, size: 32, align: 32, offset: 3904)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "rc_override_count", scope: !1040, file: !14, line: 2422, baseType: !923, size: 32, align: 32, offset: 3936)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "rc_override", scope: !1040, file: !14, line: 2423, baseType: !1413, size: 64, align: 64, offset: 3968)
!1413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1414, size: 64, align: 64)
!1414 = !DIDerivedType(tag: DW_TAG_typedef, name: "RcOverride", file: !14, line: 831, baseType: !1415)
!1415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "RcOverride", file: !14, line: 826, size: 128, align: 32, elements: !1416)
!1416 = !{!1417, !1418, !1419, !1420}
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "start_frame", scope: !1415, file: !14, line: 827, baseType: !923, size: 32, align: 32)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "end_frame", scope: !1415, file: !14, line: 828, baseType: !923, size: 32, align: 32, offset: 32)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "qscale", scope: !1415, file: !14, line: 829, baseType: !923, size: 32, align: 32, offset: 64)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "quality_factor", scope: !1415, file: !14, line: 830, baseType: !938, size: 32, align: 32, offset: 96)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "rc_max_rate", scope: !1040, file: !14, line: 2430, baseType: !941, size: 64, align: 64, offset: 4032)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "rc_min_rate", scope: !1040, file: !14, line: 2437, baseType: !941, size: 64, align: 64, offset: 4096)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "rc_max_available_vbv_use", scope: !1040, file: !14, line: 2444, baseType: !938, size: 32, align: 32, offset: 4160)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "rc_min_vbv_overflow_use", scope: !1040, file: !14, line: 2451, baseType: !938, size: 32, align: 32, offset: 4192)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "rc_initial_buffer_occupancy", scope: !1040, file: !14, line: 2458, baseType: !923, size: 32, align: 32, offset: 4224)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "coder_type", scope: !1040, file: !14, line: 2469, baseType: !923, size: 32, align: 32, offset: 4256)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "context_model", scope: !1040, file: !14, line: 2475, baseType: !923, size: 32, align: 32, offset: 4288)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "frame_skip_threshold", scope: !1040, file: !14, line: 2481, baseType: !923, size: 32, align: 32, offset: 4320)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "frame_skip_factor", scope: !1040, file: !14, line: 2485, baseType: !923, size: 32, align: 32, offset: 4352)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "frame_skip_exp", scope: !1040, file: !14, line: 2489, baseType: !923, size: 32, align: 32, offset: 4384)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "frame_skip_cmp", scope: !1040, file: !14, line: 2493, baseType: !923, size: 32, align: 32, offset: 4416)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "trellis", scope: !1040, file: !14, line: 2501, baseType: !923, size: 32, align: 32, offset: 4448)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "min_prediction_order", scope: !1040, file: !14, line: 2506, baseType: !923, size: 32, align: 32, offset: 4480)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "max_prediction_order", scope: !1040, file: !14, line: 2510, baseType: !923, size: 32, align: 32, offset: 4512)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "timecode_frame_start", scope: !1040, file: !14, line: 2514, baseType: !941, size: 64, align: 64, offset: 4544)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "rtp_callback", scope: !1040, file: !14, line: 2528, baseType: !1437, size: 64, align: 64, offset: 4608)
!1437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1438, size: 64, align: 64)
!1438 = !DISubroutineType(types: !1439)
!1439 = !{null, !1326, !936, !923, !923}
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "rtp_payload_size", scope: !1040, file: !14, line: 2534, baseType: !923, size: 32, align: 32, offset: 4672)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "mv_bits", scope: !1040, file: !14, line: 2545, baseType: !923, size: 32, align: 32, offset: 4704)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "header_bits", scope: !1040, file: !14, line: 2547, baseType: !923, size: 32, align: 32, offset: 4736)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "i_tex_bits", scope: !1040, file: !14, line: 2549, baseType: !923, size: 32, align: 32, offset: 4768)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "p_tex_bits", scope: !1040, file: !14, line: 2551, baseType: !923, size: 32, align: 32, offset: 4800)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "i_count", scope: !1040, file: !14, line: 2553, baseType: !923, size: 32, align: 32, offset: 4832)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "p_count", scope: !1040, file: !14, line: 2555, baseType: !923, size: 32, align: 32, offset: 4864)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "skip_count", scope: !1040, file: !14, line: 2557, baseType: !923, size: 32, align: 32, offset: 4896)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "misc_bits", scope: !1040, file: !14, line: 2559, baseType: !923, size: 32, align: 32, offset: 4928)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "frame_bits", scope: !1040, file: !14, line: 2563, baseType: !923, size: 32, align: 32, offset: 4960)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "stats_out", scope: !1040, file: !14, line: 2571, baseType: !1451, size: 64, align: 64, offset: 4992)
!1451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !954, size: 64, align: 64)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "stats_in", scope: !1040, file: !14, line: 2579, baseType: !1451, size: 64, align: 64, offset: 5056)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "workaround_bugs", scope: !1040, file: !14, line: 2586, baseType: !923, size: 32, align: 32, offset: 5120)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "strict_std_compliance", scope: !1040, file: !14, line: 2615, baseType: !923, size: 32, align: 32, offset: 5152)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "error_concealment", scope: !1040, file: !14, line: 2627, baseType: !923, size: 32, align: 32, offset: 5184)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "debug", scope: !1040, file: !14, line: 2637, baseType: !923, size: 32, align: 32, offset: 5216)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "err_recognition", scope: !1040, file: !14, line: 2681, baseType: !923, size: 32, align: 32, offset: 5248)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "reordered_opaque", scope: !1040, file: !14, line: 2709, baseType: !941, size: 64, align: 64, offset: 5312)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "hwaccel", scope: !1040, file: !14, line: 2716, baseType: !1460, size: 64, align: 64, offset: 5376)
!1460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1461, size: 64, align: 64)
!1461 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1462)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVHWAccel", file: !14, line: 3636, size: 896, align: 64, elements: !1463)
!1463 = !{!1464, !1465, !1466, !1467, !1468, !1469, !1473, !1479, !1483, !1484, !1485, !1486, !1492, !1493, !1494, !1495, !1496}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1462, file: !14, line: 3642, baseType: !952, size: 64, align: 64)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1462, file: !14, line: 3649, baseType: !3, size: 32, align: 32, offset: 64)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1462, file: !14, line: 3656, baseType: !13, size: 32, align: 32, offset: 96)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "pix_fmt", scope: !1462, file: !14, line: 3663, baseType: !473, size: 32, align: 32, offset: 128)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "capabilities", scope: !1462, file: !14, line: 3669, baseType: !923, size: 32, align: 32, offset: 160)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_frame", scope: !1462, file: !14, line: 3682, baseType: !1470, size: 64, align: 64, offset: 192)
!1470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1471, size: 64, align: 64)
!1471 = !DISubroutineType(types: !1472)
!1472 = !{!923, !1038, !1060}
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "start_frame", scope: !1462, file: !14, line: 3698, baseType: !1474, size: 64, align: 64, offset: 256)
!1474 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1475, size: 64, align: 64)
!1475 = !DISubroutineType(types: !1476)
!1476 = !{!923, !1038, !1477, !931}
!1477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1478, size: 64, align: 64)
!1478 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !933)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "decode_params", scope: !1462, file: !14, line: 3712, baseType: !1480, size: 64, align: 64, offset: 320)
!1480 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1481, size: 64, align: 64)
!1481 = !DISubroutineType(types: !1482)
!1482 = !{!923, !1038, !923, !1477, !931}
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "decode_slice", scope: !1462, file: !14, line: 3726, baseType: !1474, size: 64, align: 64, offset: 384)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "end_frame", scope: !1462, file: !14, line: 3737, baseType: !1035, size: 64, align: 64, offset: 448)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "frame_priv_data_size", scope: !1462, file: !14, line: 3746, baseType: !923, size: 32, align: 32, offset: 512)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "decode_mb", scope: !1462, file: !14, line: 3757, baseType: !1487, size: 64, align: 64, offset: 576)
!1487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1488, size: 64, align: 64)
!1488 = !DISubroutineType(types: !1489)
!1489 = !{null, !1490}
!1490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1491, size: 64, align: 64)
!1491 = !DICompositeType(tag: DW_TAG_structure_type, name: "MpegEncContext", file: !14, line: 3617, flags: DIFlagFwdDecl)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !1462, file: !14, line: 3766, baseType: !1035, size: 64, align: 64, offset: 640)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "uninit", scope: !1462, file: !14, line: 3774, baseType: !1035, size: 64, align: 64, offset: 704)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data_size", scope: !1462, file: !14, line: 3780, baseType: !923, size: 32, align: 32, offset: 768)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "caps_internal", scope: !1462, file: !14, line: 3785, baseType: !923, size: 32, align: 32, offset: 800)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "frame_params", scope: !1462, file: !14, line: 3795, baseType: !1497, size: 64, align: 64, offset: 832)
!1497 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1498, size: 64, align: 64)
!1498 = !DISubroutineType(types: !1499)
!1499 = !{!923, !1038, !1097}
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "hwaccel_context", scope: !1040, file: !14, line: 2728, baseType: !936, size: 64, align: 64, offset: 5440)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !1040, file: !14, line: 2735, baseType: !1087, size: 512, align: 64, offset: 5504)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "dct_algo", scope: !1040, file: !14, line: 2742, baseType: !923, size: 32, align: 32, offset: 6016)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "idct_algo", scope: !1040, file: !14, line: 2755, baseType: !923, size: 32, align: 32, offset: 6048)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_coded_sample", scope: !1040, file: !14, line: 2776, baseType: !923, size: 32, align: 32, offset: 6080)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_raw_sample", scope: !1040, file: !14, line: 2783, baseType: !923, size: 32, align: 32, offset: 6112)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "lowres", scope: !1040, file: !14, line: 2791, baseType: !923, size: 32, align: 32, offset: 6144)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "coded_frame", scope: !1040, file: !14, line: 2802, baseType: !1060, size: 64, align: 64, offset: 6208)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "thread_count", scope: !1040, file: !14, line: 2811, baseType: !923, size: 32, align: 32, offset: 6272)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "thread_type", scope: !1040, file: !14, line: 2821, baseType: !923, size: 32, align: 32, offset: 6304)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "active_thread_type", scope: !1040, file: !14, line: 2830, baseType: !923, size: 32, align: 32, offset: 6336)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "thread_safe_callbacks", scope: !1040, file: !14, line: 2840, baseType: !923, size: 32, align: 32, offset: 6368)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !1040, file: !14, line: 2851, baseType: !1513, size: 64, align: 64, offset: 6400)
!1513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1514, size: 64, align: 64)
!1514 = !DISubroutineType(types: !1515)
!1515 = !{!923, !1326, !1516, !936, !1329, !923, !923}
!1516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1517, size: 64, align: 64)
!1517 = !DISubroutineType(types: !1518)
!1518 = !{!923, !1326, !936}
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "execute2", scope: !1040, file: !14, line: 2871, baseType: !1520, size: 64, align: 64, offset: 6464)
!1520 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1521, size: 64, align: 64)
!1521 = !DISubroutineType(types: !1522)
!1522 = !{!923, !1326, !1523, !936, !1329, !923}
!1523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1524, size: 64, align: 64)
!1524 = !DISubroutineType(types: !1525)
!1525 = !{!923, !1326, !936, !923, !923}
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "nsse_weight", scope: !1040, file: !14, line: 2878, baseType: !923, size: 32, align: 32, offset: 6528)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "profile", scope: !1040, file: !14, line: 2885, baseType: !923, size: 32, align: 32, offset: 6560)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !1040, file: !14, line: 3005, baseType: !923, size: 32, align: 32, offset: 6592)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "skip_loop_filter", scope: !1040, file: !14, line: 3013, baseType: !872, size: 32, align: 32, offset: 6624)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "skip_idct", scope: !1040, file: !14, line: 3020, baseType: !872, size: 32, align: 32, offset: 6656)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "skip_frame", scope: !1040, file: !14, line: 3027, baseType: !872, size: 32, align: 32, offset: 6688)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "subtitle_header", scope: !1040, file: !14, line: 3037, baseType: !945, size: 64, align: 64, offset: 6720)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "subtitle_header_size", scope: !1040, file: !14, line: 3038, baseType: !923, size: 32, align: 32, offset: 6784)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "vbv_delay", scope: !1040, file: !14, line: 3050, baseType: !943, size: 64, align: 64, offset: 6848)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "side_data_only_packets", scope: !1040, file: !14, line: 3065, baseType: !923, size: 32, align: 32, offset: 6912)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "initial_padding", scope: !1040, file: !14, line: 3083, baseType: !923, size: 32, align: 32, offset: 6944)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "framerate", scope: !1040, file: !14, line: 3092, baseType: !962, size: 64, align: 32, offset: 6976)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "sw_pix_fmt", scope: !1040, file: !14, line: 3099, baseType: !473, size: 32, align: 32, offset: 7040)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_timebase", scope: !1040, file: !14, line: 3106, baseType: !962, size: 64, align: 32, offset: 7072)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "codec_descriptor", scope: !1040, file: !14, line: 3113, baseType: !1541, size: 64, align: 64, offset: 7168)
!1541 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1542, size: 64, align: 64)
!1542 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1543)
!1543 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodecDescriptor", file: !14, line: 740, baseType: !1544)
!1544 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecDescriptor", file: !14, line: 712, size: 384, align: 64, elements: !1545)
!1545 = !{!1546, !1547, !1548, !1549, !1550, !1551, !1554}
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1544, file: !14, line: 713, baseType: !13, size: 32, align: 32)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1544, file: !14, line: 714, baseType: !3, size: 32, align: 32, offset: 32)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1544, file: !14, line: 720, baseType: !952, size: 64, align: 64, offset: 64)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "long_name", scope: !1544, file: !14, line: 724, baseType: !952, size: 64, align: 64, offset: 128)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "props", scope: !1544, file: !14, line: 728, baseType: !923, size: 32, align: 32, offset: 192)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "mime_types", scope: !1544, file: !14, line: 734, baseType: !1552, size: 64, align: 64, offset: 256)
!1552 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1553, size: 64, align: 64)
!1553 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !952)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "profiles", scope: !1544, file: !14, line: 739, baseType: !1555, size: 64, align: 64, offset: 320)
!1555 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1556, size: 64, align: 64)
!1556 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1026)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "pts_correction_num_faulty_pts", scope: !1040, file: !14, line: 3129, baseType: !941, size: 64, align: 64, offset: 7232)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "pts_correction_num_faulty_dts", scope: !1040, file: !14, line: 3130, baseType: !941, size: 64, align: 64, offset: 7296)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "pts_correction_last_pts", scope: !1040, file: !14, line: 3131, baseType: !941, size: 64, align: 64, offset: 7360)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "pts_correction_last_dts", scope: !1040, file: !14, line: 3132, baseType: !941, size: 64, align: 64, offset: 7424)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "sub_charenc", scope: !1040, file: !14, line: 3139, baseType: !1451, size: 64, align: 64, offset: 7488)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "sub_charenc_mode", scope: !1040, file: !14, line: 3147, baseType: !923, size: 32, align: 32, offset: 7552)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "skip_alpha", scope: !1040, file: !14, line: 3165, baseType: !923, size: 32, align: 32, offset: 7584)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "seek_preroll", scope: !1040, file: !14, line: 3172, baseType: !923, size: 32, align: 32, offset: 7616)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "debug_mv", scope: !1040, file: !14, line: 3180, baseType: !923, size: 32, align: 32, offset: 7648)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_intra_matrix", scope: !1040, file: !14, line: 3191, baseType: !1365, size: 64, align: 64, offset: 7680)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "dump_separator", scope: !1040, file: !14, line: 3199, baseType: !945, size: 64, align: 64, offset: 7744)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "codec_whitelist", scope: !1040, file: !14, line: 3207, baseType: !1451, size: 64, align: 64, offset: 7808)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "properties", scope: !1040, file: !14, line: 3214, baseType: !924, size: 32, align: 32, offset: 7872)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "coded_side_data", scope: !1040, file: !14, line: 3224, baseType: !1195, size: 64, align: 64, offset: 7936)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "nb_coded_side_data", scope: !1040, file: !14, line: 3225, baseType: !923, size: 32, align: 32, offset: 8000)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "hw_frames_ctx", scope: !1040, file: !14, line: 3249, baseType: !1097, size: 64, align: 64, offset: 8064)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "sub_text_format", scope: !1040, file: !14, line: 3256, baseType: !923, size: 32, align: 32, offset: 8128)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "trailing_padding", scope: !1040, file: !14, line: 3271, baseType: !923, size: 32, align: 32, offset: 8160)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "max_pixels", scope: !1040, file: !14, line: 3279, baseType: !941, size: 64, align: 64, offset: 8192)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "hw_device_ctx", scope: !1040, file: !14, line: 3301, baseType: !1097, size: 64, align: 64, offset: 8256)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "hwaccel_flags", scope: !1040, file: !14, line: 3310, baseType: !923, size: 32, align: 32, offset: 8320)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "apply_cropping", scope: !1040, file: !14, line: 3337, baseType: !923, size: 32, align: 32, offset: 8352)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "extra_hw_frames", scope: !1040, file: !14, line: 3351, baseType: !923, size: 32, align: 32, offset: 8384)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "discard_damaged_percentage", scope: !1040, file: !14, line: 3359, baseType: !923, size: 32, align: 32, offset: 8416)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "update_thread_context", scope: !949, file: !14, line: 3535, baseType: !1582, size: 64, align: 64, offset: 1024)
!1582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1583, size: 64, align: 64)
!1583 = !DISubroutineType(types: !1584)
!1584 = !{!923, !1038, !1585}
!1585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1586, size: 64, align: 64)
!1586 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1039)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "defaults", scope: !949, file: !14, line: 3541, baseType: !1588, size: 64, align: 64, offset: 1088)
!1588 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1589, size: 64, align: 64)
!1589 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1590)
!1590 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodecDefault", file: !14, line: 3461, baseType: !1591)
!1591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecDefault", file: !1054, line: 223, size: 128, align: 64, elements: !1592)
!1592 = !{!1593, !1594}
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !1591, file: !1054, line: 224, baseType: !1477, size: 64, align: 64)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1591, file: !1054, line: 225, baseType: !1477, size: 64, align: 64, offset: 64)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "init_static_data", scope: !949, file: !14, line: 3549, baseType: !1596, size: 64, align: 64, offset: 1152)
!1596 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1597, size: 64, align: 64)
!1597 = !DISubroutineType(types: !1598)
!1598 = !{null, !1033}
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !949, file: !14, line: 3551, baseType: !1035, size: 64, align: 64, offset: 1216)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "encode_sub", scope: !949, file: !14, line: 3552, baseType: !1601, size: 64, align: 64, offset: 1280)
!1601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1602, size: 64, align: 64)
!1602 = !DISubroutineType(types: !1603)
!1603 = !{!923, !1038, !945, !923, !1604}
!1604 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1605, size: 64, align: 64)
!1605 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1606)
!1606 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVSubtitle", file: !14, line: 3920, size: 256, align: 64, elements: !1607)
!1607 = !{!1608, !1609, !1610, !1611, !1612, !1636}
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !1606, file: !14, line: 3921, baseType: !939, size: 16, align: 16)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "start_display_time", scope: !1606, file: !14, line: 3922, baseType: !931, size: 32, align: 32, offset: 32)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "end_display_time", scope: !1606, file: !14, line: 3923, baseType: !931, size: 32, align: 32, offset: 64)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "num_rects", scope: !1606, file: !14, line: 3924, baseType: !924, size: 32, align: 32, offset: 96)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "rects", scope: !1606, file: !14, line: 3925, baseType: !1613, size: 64, align: 64, offset: 128)
!1613 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1614, size: 64, align: 64)
!1614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1615, size: 64, align: 64)
!1615 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVSubtitleRect", file: !14, line: 3918, baseType: !1616)
!1616 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVSubtitleRect", file: !14, line: 3885, size: 1600, align: 64, elements: !1617)
!1617 = !{!1618, !1619, !1620, !1621, !1622, !1623, !1629, !1631, !1632, !1633, !1634, !1635}
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1616, file: !14, line: 3886, baseType: !923, size: 32, align: 32)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !1616, file: !14, line: 3887, baseType: !923, size: 32, align: 32, offset: 32)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !1616, file: !14, line: 3888, baseType: !923, size: 32, align: 32, offset: 64)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "h", scope: !1616, file: !14, line: 3889, baseType: !923, size: 32, align: 32, offset: 96)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "nb_colors", scope: !1616, file: !14, line: 3890, baseType: !923, size: 32, align: 32, offset: 128)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "pict", scope: !1616, file: !14, line: 3897, baseType: !1624, size: 768, align: 64, offset: 192)
!1624 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVPicture", file: !14, line: 3858, baseType: !1625)
!1625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVPicture", file: !14, line: 3853, size: 768, align: 64, elements: !1626)
!1626 = !{!1627, !1628}
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1625, file: !14, line: 3855, baseType: !1065, size: 512, align: 64)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "linesize", scope: !1625, file: !14, line: 3857, baseType: !1069, size: 256, align: 32, offset: 512)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1616, file: !14, line: 3903, baseType: !1630, size: 256, align: 64, offset: 960)
!1630 = !DICompositeType(tag: DW_TAG_array_type, baseType: !945, size: 256, align: 64, elements: !1166)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "linesize", scope: !1616, file: !14, line: 3904, baseType: !1173, size: 128, align: 32, offset: 1216)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1616, file: !14, line: 3906, baseType: !881, size: 32, align: 32, offset: 1344)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "text", scope: !1616, file: !14, line: 3908, baseType: !1451, size: 64, align: 64, offset: 1408)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "ass", scope: !1616, file: !14, line: 3915, baseType: !1451, size: 64, align: 64, offset: 1472)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1616, file: !14, line: 3917, baseType: !923, size: 32, align: 32, offset: 1536)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "pts", scope: !1606, file: !14, line: 3926, baseType: !941, size: 64, align: 64, offset: 192)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "encode2", scope: !949, file: !14, line: 3564, baseType: !1638, size: 64, align: 64, offset: 1344)
!1638 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1639, size: 64, align: 64)
!1639 = !DISubroutineType(types: !1640)
!1640 = !{!923, !1038, !1183, !1327, !1329}
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "decode", scope: !949, file: !14, line: 3566, baseType: !1642, size: 64, align: 64, offset: 1408)
!1642 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1643, size: 64, align: 64)
!1643 = !DISubroutineType(types: !1644)
!1644 = !{!923, !1038, !936, !1329, !1183}
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "close", scope: !949, file: !14, line: 3567, baseType: !1035, size: 64, align: 64, offset: 1472)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "send_frame", scope: !949, file: !14, line: 3576, baseType: !1647, size: 64, align: 64, offset: 1536)
!1647 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1648, size: 64, align: 64)
!1648 = !DISubroutineType(types: !1649)
!1649 = !{!923, !1038, !1327}
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "receive_packet", scope: !949, file: !14, line: 3577, baseType: !1651, size: 64, align: 64, offset: 1600)
!1651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1652, size: 64, align: 64)
!1652 = !DISubroutineType(types: !1653)
!1653 = !{!923, !1038, !1183}
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "receive_frame", scope: !949, file: !14, line: 3584, baseType: !1470, size: 64, align: 64, offset: 1664)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "flush", scope: !949, file: !14, line: 3589, baseType: !1656, size: 64, align: 64, offset: 1728)
!1656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1657, size: 64, align: 64)
!1657 = !DISubroutineType(types: !1658)
!1658 = !{null, !1038}
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "caps_internal", scope: !949, file: !14, line: 3594, baseType: !923, size: 32, align: 32, offset: 1792)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "bsfs", scope: !949, file: !14, line: 3600, baseType: !952, size: 64, align: 64, offset: 1856)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "hw_configs", scope: !949, file: !14, line: 3609, baseType: !1662, size: 64, align: 64, offset: 1920)
!1662 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1663, size: 64, align: 64)
!1663 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1664, size: 64, align: 64)
!1664 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1665)
!1665 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecHWConfigInternal", file: !14, line: 3609, flags: DIFlagFwdDecl)
!1666 = distinct !DIGlobalVariable(name: "init_static_once", scope: !1667, file: !911, line: 369, type: !1669, isLocal: true, isDefinition: true, variable: i32* @wmavoice_decode_init.init_static_once)
!1667 = distinct !DISubprogram(name: "wmavoice_decode_init", scope: !911, file: !911, line: 367, type: !1036, isLocal: true, isDefinition: true, scopeLine: 368, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!1668 = !{}
!1669 = !DIDerivedType(tag: DW_TAG_typedef, name: "pthread_once_t", file: !1670, line: 168, baseType: !923)
!1670 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!1671 = distinct !DIGlobalVariable(name: "bits", scope: !1672, file: !911, line: 316, type: !1675, isLocal: true, isDefinition: true, variable: [22 x i8]* @wmavoice_init_static_data.bits)
!1672 = distinct !DISubprogram(name: "wmavoice_init_static_data", scope: !911, file: !911, line: 314, type: !1673, isLocal: true, isDefinition: true, scopeLine: 315, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!1673 = !DISubroutineType(types: !1674)
!1674 = !{null}
!1675 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1478, size: 176, align: 8, elements: !1676)
!1676 = !{!1677}
!1677 = !DISubrange(count: 22)
!1678 = distinct !DIGlobalVariable(name: "codes", scope: !1672, file: !911, line: 322, type: !1679, isLocal: true, isDefinition: true, variable: [22 x i16]* @wmavoice_init_static_data.codes)
!1679 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1680, size: 352, align: 16, elements: !1676)
!1680 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !939)
!1681 = distinct !DIGlobalVariable(name: "table", scope: !1672, file: !911, line: 332, type: !1682, isLocal: true, isDefinition: true, variable: [132 x [2 x i16]]* @wmavoice_init_static_data.table)
!1682 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1683, size: 4224, align: 16, elements: !1685)
!1683 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !932, line: 37, baseType: !1684)
!1684 = !DIBasicType(name: "short", size: 16, align: 16, encoding: DW_ATE_signed)
!1685 = !{!1686, !1687}
!1686 = !DISubrange(count: 132)
!1687 = !DISubrange(count: 2)
!1688 = distinct !DIGlobalVariable(name: "frame_type_vlc", scope: !0, file: !911, line: 63, type: !1689, isLocal: true, isDefinition: true, variable: %struct.VLC* @frame_type_vlc)
!1689 = !DIDerivedType(tag: DW_TAG_typedef, name: "VLC", file: !1690, line: 30, baseType: !1691)
!1690 = !DIFile(filename: "libavcodec/vlc.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!1691 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VLC", file: !1690, line: 26, size: 192, align: 64, elements: !1692)
!1692 = !{!1693, !1694, !1698, !1699}
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1691, file: !1690, line: 27, baseType: !923, size: 32, align: 32)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "table", scope: !1691, file: !1690, line: 28, baseType: !1695, size: 64, align: 64, offset: 64)
!1695 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1696, size: 64, align: 64)
!1696 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1683, size: 32, align: 16, elements: !1697)
!1697 = !{!1687}
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "table_size", scope: !1691, file: !1690, line: 29, baseType: !923, size: 32, align: 32, offset: 128)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "table_allocated", scope: !1691, file: !1690, line: 29, baseType: !923, size: 32, align: 32, offset: 160)
!1700 = distinct !DIGlobalVariable(name: "wmavoice_mean_lsf16", scope: !0, file: !1701, line: 2574, type: !1702, isLocal: true, isDefinition: true, variable: [2 x [16 x double]]* @wmavoice_mean_lsf16)
!1701 = !DIFile(filename: "libavcodec/wmavoice_data.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1703, size: 2048, align: 64, elements: !1705)
!1703 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1704)
!1704 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!1705 = !{!1687, !1706}
!1706 = !DISubrange(count: 16)
!1707 = distinct !DIGlobalVariable(name: "wmavoice_mean_lsf10", scope: !0, file: !1701, line: 2565, type: !1708, isLocal: true, isDefinition: true, variable: [2 x [10 x double]]* @wmavoice_mean_lsf10)
!1708 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1703, size: 1280, align: 64, elements: !1709)
!1709 = !{!1687, !1710}
!1710 = !DISubrange(count: 10)
!1711 = distinct !DIGlobalVariable(name: "vec_sizes", scope: !1712, file: !911, line: 916, type: !1727, isLocal: true, isDefinition: true, variable: [3 x i16]* @dequant_lsp10r.vec_sizes)
!1712 = distinct !DISubprogram(name: "dequant_lsp10r", scope: !911, file: !911, line: 912, type: !1713, isLocal: true, isDefinition: true, scopeLine: 915, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!1713 = !DISubroutineType(types: !1714)
!1714 = !{null, !1715, !1725, !1726, !1725, !1725, !923}
!1715 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1716, size: 64, align: 64)
!1716 = !DIDerivedType(tag: DW_TAG_typedef, name: "GetBitContext", file: !1717, line: 70, baseType: !1718)
!1717 = !DIFile(filename: "libavcodec/get_bits.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!1718 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "GetBitContext", file: !1717, line: 61, size: 256, align: 64, elements: !1719)
!1719 = !{!1720, !1721, !1722, !1723, !1724}
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !1718, file: !1717, line: 62, baseType: !1477, size: 64, align: 64)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "buffer_end", scope: !1718, file: !1717, line: 62, baseType: !1477, size: 64, align: 64, offset: 64)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1718, file: !1717, line: 67, baseType: !923, size: 32, align: 32, offset: 128)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "size_in_bits", scope: !1718, file: !1717, line: 68, baseType: !923, size: 32, align: 32, offset: 160)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "size_in_bits_plus8", scope: !1718, file: !1717, line: 69, baseType: !923, size: 32, align: 32, offset: 192)
!1725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1704, size: 64, align: 64)
!1726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1703, size: 64, align: 64)
!1727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1680, size: 48, align: 16, elements: !1728)
!1728 = !{!1729}
!1729 = !DISubrange(count: 3)
!1730 = distinct !DIGlobalVariable(name: "mul_lsf", scope: !1712, file: !911, line: 917, type: !1731, isLocal: true, isDefinition: true, variable: [3 x double]* @dequant_lsp10r.mul_lsf)
!1731 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1703, size: 192, align: 64, elements: !1728)
!1732 = distinct !DIGlobalVariable(name: "base_lsf", scope: !1712, file: !911, line: 920, type: !1731, isLocal: true, isDefinition: true, variable: [3 x double]* @dequant_lsp10r.base_lsf)
!1733 = distinct !DIGlobalVariable(name: "wmavoice_lsp10_intercoeff_b", scope: !0, file: !1701, line: 1852, type: !1734, isLocal: true, isDefinition: true, variable: [32 x [2 x [10 x float]]]* @wmavoice_lsp10_intercoeff_b)
!1734 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1735, size: 20480, align: 32, elements: !1736)
!1735 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !938)
!1736 = !{!1737, !1687, !1710}
!1737 = !DISubrange(count: 32)
!1738 = distinct !DIGlobalVariable(name: "wmavoice_lsp10_intercoeff_a", scope: !0, file: !1701, line: 1657, type: !1734, isLocal: true, isDefinition: true, variable: [32 x [2 x [10 x float]]]* @wmavoice_lsp10_intercoeff_a)
!1739 = distinct !DIGlobalVariable(name: "wmavoice_dq_lsp10r", scope: !0, file: !1701, line: 749, type: !1740, isLocal: true, isDefinition: true, variable: [5120 x i8]* @wmavoice_dq_lsp10r)
!1740 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1478, size: 40960, align: 8, elements: !1741)
!1741 = !{!1742}
!1742 = !DISubrange(count: 5120)
!1743 = distinct !DIGlobalVariable(name: "vec_sizes", scope: !1744, file: !911, line: 985, type: !1727, isLocal: true, isDefinition: true, variable: [3 x i16]* @dequant_lsp16r.vec_sizes)
!1744 = distinct !DISubprogram(name: "dequant_lsp16r", scope: !911, file: !911, line: 981, type: !1713, isLocal: true, isDefinition: true, scopeLine: 984, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!1745 = distinct !DIGlobalVariable(name: "mul_lsf", scope: !1744, file: !911, line: 986, type: !1731, isLocal: true, isDefinition: true, variable: [3 x double]* @dequant_lsp16r.mul_lsf)
!1746 = distinct !DIGlobalVariable(name: "base_lsf", scope: !1744, file: !911, line: 989, type: !1731, isLocal: true, isDefinition: true, variable: [3 x double]* @dequant_lsp16r.base_lsf)
!1747 = distinct !DIGlobalVariable(name: "wmavoice_lsp16_intercoeff_b", scope: !0, file: !1701, line: 2306, type: !1748, isLocal: true, isDefinition: true, variable: [32 x [2 x [16 x float]]]* @wmavoice_lsp16_intercoeff_b)
!1748 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1735, size: 32768, align: 32, elements: !1749)
!1749 = !{!1737, !1687, !1706}
!1750 = distinct !DIGlobalVariable(name: "wmavoice_lsp16_intercoeff_a", scope: !0, file: !1701, line: 2047, type: !1748, isLocal: true, isDefinition: true, variable: [32 x [2 x [16 x float]]]* @wmavoice_lsp16_intercoeff_a)
!1751 = distinct !DIGlobalVariable(name: "wmavoice_dq_lsp16r1", scope: !0, file: !1701, line: 1264, type: !1752, isLocal: true, isDefinition: true, variable: [1280 x i8]* @wmavoice_dq_lsp16r1)
!1752 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1478, size: 10240, align: 8, elements: !1753)
!1753 = !{!1754}
!1754 = !DISubrange(count: 1280)
!1755 = distinct !DIGlobalVariable(name: "wmavoice_dq_lsp16r2", scope: !0, file: !1701, line: 1395, type: !1752, isLocal: true, isDefinition: true, variable: [1280 x i8]* @wmavoice_dq_lsp16r2)
!1756 = distinct !DIGlobalVariable(name: "wmavoice_dq_lsp16r3", scope: !0, file: !1701, line: 1526, type: !1757, isLocal: true, isDefinition: true, variable: [1536 x i8]* @wmavoice_dq_lsp16r3)
!1757 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1478, size: 12288, align: 8, elements: !1758)
!1758 = !{!1759}
!1759 = !DISubrange(count: 1536)
!1760 = distinct !DIGlobalVariable(name: "vec_sizes", scope: !1761, file: !911, line: 888, type: !1764, isLocal: true, isDefinition: true, variable: [4 x i16]* @dequant_lsp10i.vec_sizes)
!1761 = distinct !DISubprogram(name: "dequant_lsp10i", scope: !911, file: !911, line: 886, type: !1762, isLocal: true, isDefinition: true, scopeLine: 887, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!1762 = !DISubroutineType(types: !1763)
!1763 = !{null, !1715, !1725}
!1764 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1680, size: 64, align: 16, elements: !1166)
!1765 = distinct !DIGlobalVariable(name: "mul_lsf", scope: !1761, file: !911, line: 889, type: !1766, isLocal: true, isDefinition: true, variable: [4 x double]* @dequant_lsp10i.mul_lsf)
!1766 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1703, size: 256, align: 64, elements: !1166)
!1767 = distinct !DIGlobalVariable(name: "base_lsf", scope: !1761, file: !911, line: 893, type: !1766, isLocal: true, isDefinition: true, variable: [4 x double]* @dequant_lsp10i.base_lsf)
!1768 = distinct !DIGlobalVariable(name: "wmavoice_dq_lsp10i", scope: !0, file: !1701, line: 33, type: !1769, isLocal: true, isDefinition: true, variable: [3840 x i8]* @wmavoice_dq_lsp10i)
!1769 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1478, size: 30720, align: 8, elements: !1770)
!1770 = !{!1771}
!1771 = !DISubrange(count: 3840)
!1772 = distinct !DIGlobalVariable(name: "vec_sizes", scope: !1773, file: !911, line: 950, type: !1774, isLocal: true, isDefinition: true, variable: [5 x i16]* @dequant_lsp16i.vec_sizes)
!1773 = distinct !DISubprogram(name: "dequant_lsp16i", scope: !911, file: !911, line: 948, type: !1762, isLocal: true, isDefinition: true, scopeLine: 949, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!1774 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1680, size: 80, align: 16, elements: !1775)
!1775 = !{!1776}
!1776 = !DISubrange(count: 5)
!1777 = distinct !DIGlobalVariable(name: "mul_lsf", scope: !1773, file: !911, line: 951, type: !1778, isLocal: true, isDefinition: true, variable: [5 x double]* @dequant_lsp16i.mul_lsf)
!1778 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1703, size: 320, align: 64, elements: !1775)
!1779 = distinct !DIGlobalVariable(name: "base_lsf", scope: !1773, file: !911, line: 956, type: !1778, isLocal: true, isDefinition: true, variable: [5 x double]* @dequant_lsp16i.base_lsf)
!1780 = distinct !DIGlobalVariable(name: "wmavoice_dq_lsp16i1", scope: !0, file: !1701, line: 420, type: !1781, isLocal: true, isDefinition: true, variable: [1600 x i8]* @wmavoice_dq_lsp16i1)
!1781 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1478, size: 12800, align: 8, elements: !1782)
!1782 = !{!1783}
!1783 = !DISubrange(count: 1600)
!1784 = distinct !DIGlobalVariable(name: "wmavoice_dq_lsp16i2", scope: !0, file: !1701, line: 583, type: !1785, isLocal: true, isDefinition: true, variable: [960 x i8]* @wmavoice_dq_lsp16i2)
!1785 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1478, size: 7680, align: 8, elements: !1786)
!1786 = !{!1787}
!1787 = !DISubrange(count: 960)
!1788 = distinct !DIGlobalVariable(name: "wmavoice_dq_lsp16i3", scope: !0, file: !1701, line: 682, type: !1789, isLocal: true, isDefinition: true, variable: [768 x i8]* @wmavoice_dq_lsp16i3)
!1789 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1478, size: 6144, align: 8, elements: !1790)
!1790 = !{!1791}
!1791 = !DISubrange(count: 768)
!1792 = distinct !DIGlobalVariable(name: "frame_descs", scope: !0, file: !911, line: 108, type: !1793, isLocal: true, isDefinition: true, variable: [17 x %struct.frame_type_desc]* @frame_descs)
!1793 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1794, size: 680, align: 8, elements: !1802)
!1794 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1795)
!1795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "frame_type_desc", file: !911, line: 99, size: 40, align: 8, elements: !1796)
!1796 = !{!1797, !1798, !1799, !1800, !1801}
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "n_blocks", scope: !1795, file: !911, line: 100, baseType: !933, size: 8, align: 8)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "log_n_blocks", scope: !1795, file: !911, line: 102, baseType: !933, size: 8, align: 8, offset: 8)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "acb_type", scope: !1795, file: !911, line: 103, baseType: !933, size: 8, align: 8, offset: 16)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "fcb_type", scope: !1795, file: !911, line: 104, baseType: !933, size: 8, align: 8, offset: 24)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "dbl_pulses", scope: !1795, file: !911, line: 105, baseType: !933, size: 8, align: 8, offset: 32)
!1802 = !{!1803}
!1803 = !DISubrange(count: 17)
!1804 = distinct !DIGlobalVariable(name: "wmavoice_gain_silence", scope: !0, file: !1701, line: 2788, type: !1805, isLocal: true, isDefinition: true, variable: [256 x float]* @wmavoice_gain_silence)
!1805 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1735, size: 8192, align: 32, elements: !1806)
!1806 = !{!1807}
!1807 = !DISubrange(count: 256)
!1808 = distinct !DIGlobalVariable(name: "start_offset", scope: !1809, file: !911, line: 1034, type: !1991, isLocal: true, isDefinition: true, variable: [94 x i16]* @aw_parse_coords.start_offset)
!1809 = distinct !DISubprogram(name: "aw_parse_coords", scope: !911, file: !911, line: 1031, type: !1810, isLocal: true, isDefinition: true, scopeLine: 1033, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!1810 = !DISubroutineType(types: !1811)
!1811 = !{null, !1812, !1715, !972}
!1812 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1813, size: 64, align: 64)
!1813 = !DIDerivedType(tag: DW_TAG_typedef, name: "WMAVoiceContext", file: !911, line: 289, baseType: !1814)
!1814 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "WMAVoiceContext", file: !911, line: 131, size: 104960, align: 256, elements: !1815)
!1815 = !{!1816, !1817, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1839, !1840, !1841, !1842, !1846, !1847, !1858, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1869, !1870, !1871, !1872, !1873, !1877, !1881, !1883, !1943, !1944, !1964, !1965, !1969, !1970, !1971, !1973, !1977, !1981, !1982, !1986, !1987}
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "gb", scope: !1814, file: !911, line: 136, baseType: !1716, size: 256, align: 64)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "vbm_tree", scope: !1814, file: !911, line: 140, baseType: !1818, size: 200, align: 8, offset: 256)
!1818 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1142, size: 200, align: 8, elements: !1819)
!1819 = !{!1820}
!1820 = !DISubrange(count: 25)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "spillover_bitsize", scope: !1814, file: !911, line: 142, baseType: !923, size: 32, align: 32, offset: 480)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "history_nsamples", scope: !1814, file: !911, line: 145, baseType: !923, size: 32, align: 32, offset: 512)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "do_apf", scope: !1814, file: !911, line: 149, baseType: !923, size: 32, align: 32, offset: 544)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "denoise_strength", scope: !1814, file: !911, line: 151, baseType: !923, size: 32, align: 32, offset: 576)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "denoise_tilt_corr", scope: !1814, file: !911, line: 153, baseType: !923, size: 32, align: 32, offset: 608)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "dc_level", scope: !1814, file: !911, line: 155, baseType: !923, size: 32, align: 32, offset: 640)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "lsps", scope: !1814, file: !911, line: 158, baseType: !923, size: 32, align: 32, offset: 672)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "lsp_q_mode", scope: !1814, file: !911, line: 159, baseType: !923, size: 32, align: 32, offset: 704)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "lsp_def_mode", scope: !1814, file: !911, line: 160, baseType: !923, size: 32, align: 32, offset: 736)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "min_pitch_val", scope: !1814, file: !911, line: 163, baseType: !923, size: 32, align: 32, offset: 768)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "max_pitch_val", scope: !1814, file: !911, line: 164, baseType: !923, size: 32, align: 32, offset: 800)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "pitch_nbits", scope: !1814, file: !911, line: 165, baseType: !923, size: 32, align: 32, offset: 832)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "block_pitch_nbits", scope: !1814, file: !911, line: 167, baseType: !923, size: 32, align: 32, offset: 864)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "block_pitch_range", scope: !1814, file: !911, line: 169, baseType: !923, size: 32, align: 32, offset: 896)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "block_delta_pitch_nbits", scope: !1814, file: !911, line: 170, baseType: !923, size: 32, align: 32, offset: 928)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "block_delta_pitch_hrange", scope: !1814, file: !911, line: 174, baseType: !923, size: 32, align: 32, offset: 960)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "block_conv_table", scope: !1814, file: !911, line: 176, baseType: !1838, size: 64, align: 16, offset: 992)
!1838 = !DICompositeType(tag: DW_TAG_array_type, baseType: !939, size: 64, align: 16, elements: !1166)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "spillover_nbits", scope: !1814, file: !911, line: 188, baseType: !923, size: 32, align: 32, offset: 1056)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "has_residual_lsps", scope: !1814, file: !911, line: 192, baseType: !923, size: 32, align: 32, offset: 1088)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "skip_bits_next", scope: !1814, file: !911, line: 197, baseType: !923, size: 32, align: 32, offset: 1120)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "sframe_cache", scope: !1814, file: !911, line: 201, baseType: !1843, size: 2560, align: 8, offset: 1152)
!1843 = !DICompositeType(tag: DW_TAG_array_type, baseType: !933, size: 2560, align: 8, elements: !1844)
!1844 = !{!1845}
!1845 = !DISubrange(count: 320)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "sframe_cache_size", scope: !1814, file: !911, line: 204, baseType: !923, size: 32, align: 32, offset: 3712)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "pb", scope: !1814, file: !911, line: 209, baseType: !1848, size: 320, align: 64, offset: 3776)
!1848 = !DIDerivedType(tag: DW_TAG_typedef, name: "PutBitContext", file: !1849, line: 40, baseType: !1850)
!1849 = !DIFile(filename: "libavcodec/put_bits.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!1850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "PutBitContext", file: !1849, line: 35, size: 320, align: 64, elements: !1851)
!1851 = !{!1852, !1853, !1854, !1855, !1856, !1857}
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "bit_buf", scope: !1850, file: !1849, line: 36, baseType: !931, size: 32, align: 32)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "bit_left", scope: !1850, file: !1849, line: 37, baseType: !923, size: 32, align: 32, offset: 32)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1850, file: !1849, line: 38, baseType: !945, size: 64, align: 64, offset: 64)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "buf_ptr", scope: !1850, file: !1849, line: 38, baseType: !945, size: 64, align: 64, offset: 128)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "buf_end", scope: !1850, file: !1849, line: 38, baseType: !945, size: 64, align: 64, offset: 192)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "size_in_bits", scope: !1850, file: !1849, line: 39, baseType: !923, size: 32, align: 32, offset: 256)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "prev_lsps", scope: !1814, file: !911, line: 220, baseType: !1859, size: 1024, align: 64, offset: 4096)
!1859 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1704, size: 1024, align: 64, elements: !1860)
!1860 = !{!1706}
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "last_pitch_val", scope: !1814, file: !911, line: 222, baseType: !923, size: 32, align: 32, offset: 5120)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "last_acb_type", scope: !1814, file: !911, line: 223, baseType: !923, size: 32, align: 32, offset: 5152)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "pitch_diff_sh16", scope: !1814, file: !911, line: 224, baseType: !923, size: 32, align: 32, offset: 5184)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "silence_gain", scope: !1814, file: !911, line: 226, baseType: !938, size: 32, align: 32, offset: 5216)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "aw_idx_is_ext", scope: !1814, file: !911, line: 228, baseType: !923, size: 32, align: 32, offset: 5248)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "aw_pulse_range", scope: !1814, file: !911, line: 230, baseType: !923, size: 32, align: 32, offset: 5280)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "aw_n_pulses", scope: !1814, file: !911, line: 236, baseType: !1868, size: 64, align: 32, offset: 5312)
!1868 = !DICompositeType(tag: DW_TAG_array_type, baseType: !923, size: 64, align: 32, elements: !1697)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "aw_first_pulse_off", scope: !1814, file: !911, line: 239, baseType: !1868, size: 64, align: 32, offset: 5376)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "aw_next_pulse_off_cache", scope: !1814, file: !911, line: 241, baseType: !923, size: 32, align: 32, offset: 5440)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "frame_cntr", scope: !1814, file: !911, line: 247, baseType: !923, size: 32, align: 32, offset: 5472)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "nb_superframes", scope: !1814, file: !911, line: 249, baseType: !923, size: 32, align: 32, offset: 5504)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "gain_pred_err", scope: !1814, file: !911, line: 250, baseType: !1874, size: 192, align: 32, offset: 5536)
!1874 = !DICompositeType(tag: DW_TAG_array_type, baseType: !938, size: 192, align: 32, elements: !1875)
!1875 = !{!1876}
!1876 = !DISubrange(count: 6)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "excitation_history", scope: !1814, file: !911, line: 251, baseType: !1878, size: 13312, align: 32, offset: 5728)
!1878 = !DICompositeType(tag: DW_TAG_array_type, baseType: !938, size: 13312, align: 32, elements: !1879)
!1879 = !{!1880}
!1880 = !DISubrange(count: 416)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "synth_history", scope: !1814, file: !911, line: 255, baseType: !1882, size: 512, align: 32, offset: 19040)
!1882 = !DICompositeType(tag: DW_TAG_array_type, baseType: !938, size: 512, align: 32, elements: !1860)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "rdft", scope: !1814, file: !911, line: 265, baseType: !1884, size: 1280, align: 64, offset: 19584)
!1884 = !DIDerivedType(tag: DW_TAG_typedef, name: "RDFTContext", file: !898, line: 78, baseType: !1885)
!1885 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "RDFTContext", file: !1886, line: 28, size: 1280, align: 64, elements: !1887)
!1886 = !DIFile(filename: "libavcodec/rdft.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!1887 = !{!1888, !1889, !1890, !1891, !1895, !1896, !1897, !1938}
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "nbits", scope: !1885, file: !1886, line: 29, baseType: !923, size: 32, align: 32)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "inverse", scope: !1885, file: !1886, line: 30, baseType: !923, size: 32, align: 32, offset: 32)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "sign_convention", scope: !1885, file: !1886, line: 31, baseType: !923, size: 32, align: 32, offset: 64)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "tcos", scope: !1885, file: !1886, line: 34, baseType: !1892, size: 64, align: 64, offset: 128)
!1892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1893, size: 64, align: 64)
!1893 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1894)
!1894 = !DIDerivedType(tag: DW_TAG_typedef, name: "FFTSample", file: !898, line: 35, baseType: !938)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "tsin", scope: !1885, file: !1886, line: 35, baseType: !1892, size: 64, align: 64, offset: 192)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "negative_sin", scope: !1885, file: !1886, line: 36, baseType: !923, size: 32, align: 32, offset: 256)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "fft", scope: !1885, file: !1886, line: 37, baseType: !1898, size: 896, align: 64, offset: 320)
!1898 = !DIDerivedType(tag: DW_TAG_typedef, name: "FFTContext", file: !898, line: 41, baseType: !1899)
!1899 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FFTContext", file: !888, line: 88, size: 896, align: 64, elements: !1900)
!1900 = !{!1901, !1902, !1903, !1904, !1911, !1912, !1913, !1915, !1916, !1921, !1922, !1926, !1927, !1928, !1934, !1935, !1936}
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "nbits", scope: !1899, file: !888, line: 89, baseType: !923, size: 32, align: 32)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "inverse", scope: !1899, file: !888, line: 90, baseType: !923, size: 32, align: 32, offset: 32)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "revtab", scope: !1899, file: !888, line: 91, baseType: !1365, size: 64, align: 64, offset: 64)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "tmp_buf", scope: !1899, file: !888, line: 92, baseType: !1905, size: 64, align: 64, offset: 128)
!1905 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1906, size: 64, align: 64)
!1906 = !DIDerivedType(tag: DW_TAG_typedef, name: "FFTComplex", file: !898, line: 39, baseType: !1907)
!1907 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "FFTComplex", file: !898, line: 37, size: 64, align: 32, elements: !1908)
!1908 = !{!1909, !1910}
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "re", scope: !1907, file: !898, line: 38, baseType: !1894, size: 32, align: 32)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "im", scope: !1907, file: !898, line: 38, baseType: !1894, size: 32, align: 32, offset: 32)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "mdct_size", scope: !1899, file: !888, line: 93, baseType: !923, size: 32, align: 32, offset: 192)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "mdct_bits", scope: !1899, file: !888, line: 94, baseType: !923, size: 32, align: 32, offset: 224)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "tcos", scope: !1899, file: !888, line: 96, baseType: !1914, size: 64, align: 64, offset: 256)
!1914 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1894, size: 64, align: 64)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "tsin", scope: !1899, file: !888, line: 97, baseType: !1914, size: 64, align: 64, offset: 320)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "fft_permute", scope: !1899, file: !888, line: 101, baseType: !1917, size: 64, align: 64, offset: 384)
!1917 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1918, size: 64, align: 64)
!1918 = !DISubroutineType(types: !1919)
!1919 = !{null, !1920, !1905}
!1920 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1899, size: 64, align: 64)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "fft_calc", scope: !1899, file: !888, line: 106, baseType: !1917, size: 64, align: 64, offset: 448)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "imdct_calc", scope: !1899, file: !888, line: 107, baseType: !1923, size: 64, align: 64, offset: 512)
!1923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1924, size: 64, align: 64)
!1924 = !DISubroutineType(types: !1925)
!1925 = !{null, !1920, !1914, !1892}
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "imdct_half", scope: !1899, file: !888, line: 108, baseType: !1923, size: 64, align: 64, offset: 576)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "mdct_calc", scope: !1899, file: !888, line: 109, baseType: !1923, size: 64, align: 64, offset: 640)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "mdct_calcw", scope: !1899, file: !888, line: 110, baseType: !1929, size: 64, align: 64, offset: 704)
!1929 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1930, size: 64, align: 64)
!1930 = !DISubroutineType(types: !1931)
!1931 = !{null, !1920, !1932, !1892}
!1932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1933, size: 64, align: 64)
!1933 = !DIDerivedType(tag: DW_TAG_typedef, name: "FFTDouble", file: !888, line: 43, baseType: !938)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "fft_permutation", scope: !1899, file: !888, line: 111, baseType: !887, size: 32, align: 32, offset: 768)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "mdct_permutation", scope: !1899, file: !888, line: 112, baseType: !893, size: 32, align: 32, offset: 800)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "revtab32", scope: !1899, file: !888, line: 113, baseType: !1937, size: 64, align: 64, offset: 832)
!1937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !931, size: 64, align: 64)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "rdft_calc", scope: !1885, file: !1886, line: 38, baseType: !1939, size: 64, align: 64, offset: 1216)
!1939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1940, size: 64, align: 64)
!1940 = !DISubroutineType(types: !1941)
!1941 = !{null, !1942, !1914}
!1942 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1885, size: 64, align: 64)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "irdft", scope: !1814, file: !911, line: 265, baseType: !1884, size: 1280, align: 64, offset: 20864)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "dct", scope: !1814, file: !911, line: 267, baseType: !1945, size: 1600, align: 64, offset: 22144)
!1945 = !DIDerivedType(tag: DW_TAG_typedef, name: "DCTContext", file: !898, line: 91, baseType: !1946)
!1946 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "DCTContext", file: !1947, line: 32, size: 1600, align: 64, elements: !1948)
!1947 = !DIFile(filename: "libavcodec/dct.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!1948 = !{!1949, !1950, !1951, !1952, !1954, !1955, !1960}
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "nbits", scope: !1946, file: !1947, line: 33, baseType: !923, size: 32, align: 32)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "inverse", scope: !1946, file: !1947, line: 34, baseType: !923, size: 32, align: 32, offset: 32)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "rdft", scope: !1946, file: !1947, line: 35, baseType: !1884, size: 1280, align: 64, offset: 64)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "costab", scope: !1946, file: !1947, line: 36, baseType: !1953, size: 64, align: 64, offset: 1344)
!1953 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1735, size: 64, align: 64)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "csc2", scope: !1946, file: !1947, line: 37, baseType: !1914, size: 64, align: 64, offset: 1408)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "dct_calc", scope: !1946, file: !1947, line: 38, baseType: !1956, size: 64, align: 64, offset: 1472)
!1956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1957, size: 64, align: 64)
!1957 = !DISubroutineType(types: !1958)
!1958 = !{null, !1959, !1914}
!1959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1946, size: 64, align: 64)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "dct32", scope: !1946, file: !1947, line: 39, baseType: !1961, size: 64, align: 64, offset: 1536)
!1961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1962, size: 64, align: 64)
!1962 = !DISubroutineType(types: !1963)
!1963 = !{null, !1914, !1892}
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "dst", scope: !1814, file: !911, line: 267, baseType: !1945, size: 1600, align: 64, offset: 23744)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "sin", scope: !1814, file: !911, line: 269, baseType: !1966, size: 16352, align: 32, offset: 25344)
!1966 = !DICompositeType(tag: DW_TAG_array_type, baseType: !938, size: 16352, align: 32, elements: !1967)
!1967 = !{!1968}
!1968 = !DISubrange(count: 511)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "cos", scope: !1814, file: !911, line: 269, baseType: !1966, size: 16352, align: 32, offset: 41696)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "postfilter_agc", scope: !1814, file: !911, line: 271, baseType: !938, size: 32, align: 32, offset: 58048)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "dcf_mem", scope: !1814, file: !911, line: 273, baseType: !1972, size: 64, align: 32, offset: 58080)
!1972 = !DICompositeType(tag: DW_TAG_array_type, baseType: !938, size: 64, align: 32, elements: !1697)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "zero_exc_pf", scope: !1814, file: !911, line: 274, baseType: !1974, size: 28672, align: 32, offset: 58144)
!1974 = !DICompositeType(tag: DW_TAG_array_type, baseType: !938, size: 28672, align: 32, elements: !1975)
!1975 = !{!1976}
!1976 = !DISubrange(count: 896)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "denoise_filter_cache", scope: !1814, file: !911, line: 277, baseType: !1978, size: 5120, align: 32, offset: 86816)
!1978 = !DICompositeType(tag: DW_TAG_array_type, baseType: !938, size: 5120, align: 32, elements: !1979)
!1979 = !{!1980}
!1980 = !DISubrange(count: 160)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "denoise_filter_cache_size", scope: !1814, file: !911, line: 278, baseType: !923, size: 32, align: 32, offset: 91936)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "tilted_lpcs_pf", scope: !1814, file: !911, line: 279, baseType: !1983, size: 4096, align: 32, offset: 92160)
!1983 = !DICompositeType(tag: DW_TAG_array_type, baseType: !938, size: 4096, align: 32, elements: !1984)
!1984 = !{!1985}
!1985 = !DISubrange(count: 128)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "denoise_coeffs_pf", scope: !1814, file: !911, line: 281, baseType: !1983, size: 4096, align: 32, offset: 96256)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "synth_filter_out_buf", scope: !1814, file: !911, line: 283, baseType: !1988, size: 4608, align: 32, offset: 100352)
!1988 = !DICompositeType(tag: DW_TAG_array_type, baseType: !938, size: 4608, align: 32, elements: !1989)
!1989 = !{!1990}
!1990 = !DISubrange(count: 144)
!1991 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1992, size: 1504, align: 16, elements: !1993)
!1992 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1683)
!1993 = !{!1994}
!1994 = !DISubrange(count: 94)
!1995 = distinct !DIGlobalVariable(name: "div_tbl", scope: !1996, file: !911, line: 1246, type: !1999, isLocal: true, isDefinition: true, variable: [9 x [2 x i32]]* @pRNG.div_tbl)
!1996 = distinct !DISubprogram(name: "pRNG", scope: !911, file: !911, line: 1234, type: !1997, isLocal: true, isDefinition: true, scopeLine: 1235, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!1997 = !DISubroutineType(types: !1998)
!1998 = !{!923, !923, !923, !923}
!1999 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2000, size: 576, align: 32, elements: !2001)
!2000 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !924)
!2001 = !{!2002, !1687}
!2002 = !DISubrange(count: 9)
!2003 = distinct !DIGlobalVariable(name: "wmavoice_gain_universal", scope: !0, file: !1701, line: 2855, type: !2004, isLocal: true, isDefinition: true, variable: [64 x float]* @wmavoice_gain_universal)
!2004 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1735, size: 2048, align: 32, elements: !2005)
!2005 = !{!2006}
!2006 = !DISubrange(count: 64)
!2007 = distinct !DIGlobalVariable(name: "wmavoice_std_codebook", scope: !0, file: !1701, line: 2585, type: !2008, isLocal: true, isDefinition: true, variable: [1000 x float]* @wmavoice_std_codebook)
!2008 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1735, size: 32000, align: 32, elements: !2009)
!2009 = !{!2010}
!2010 = !DISubrange(count: 1000)
!2011 = distinct !DIGlobalVariable(name: "gain_coeff", scope: !2012, file: !911, line: 1307, type: !2016, isLocal: true, isDefinition: true, variable: [6 x float]* @synth_block_fcb_acb.gain_coeff)
!2012 = distinct !DISubprogram(name: "synth_block_fcb_acb", scope: !911, file: !911, line: 1301, type: !2013, isLocal: true, isDefinition: true, scopeLine: 1306, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!2013 = !DISubroutineType(types: !2014)
!2014 = !{null, !1812, !1715, !923, !923, !923, !2015, !937}
!2015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1794, size: 64, align: 64)
!2016 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1735, size: 192, align: 32, elements: !1875)
!2017 = distinct !DIGlobalVariable(name: "wmavoice_gain_codebook_fcb", scope: !0, file: !1701, line: 2893, type: !2018, isLocal: true, isDefinition: true, variable: [128 x float]* @wmavoice_gain_codebook_fcb)
!2018 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1735, size: 4096, align: 32, elements: !1984)
!2019 = distinct !DIGlobalVariable(name: "wmavoice_gain_codebook_acb", scope: !0, file: !1701, line: 2874, type: !2018, isLocal: true, isDefinition: true, variable: [128 x float]* @wmavoice_gain_codebook_acb)
!2020 = distinct !DIGlobalVariable(name: "wmavoice_ipol1_coeffs", scope: !0, file: !1701, line: 2960, type: !2021, isLocal: true, isDefinition: true, variable: [153 x float]* @wmavoice_ipol1_coeffs)
!2021 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1735, size: 4896, align: 32, elements: !2022)
!2022 = !{!2023}
!2023 = !DISubrange(count: 153)
!2024 = distinct !DIGlobalVariable(name: "wmavoice_ipol2_coeffs", scope: !0, file: !1701, line: 3012, type: !2025, isLocal: true, isDefinition: true, variable: [32 x float]* @wmavoice_ipol2_coeffs)
!2025 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1735, size: 1024, align: 32, elements: !2026)
!2026 = !{!1737}
!2027 = distinct !DIGlobalVariable(name: "wmavoice_denoise_power_table", scope: !0, file: !1701, line: 3064, type: !2028, isLocal: true, isDefinition: true, variable: [12 x [64 x float]]* @wmavoice_denoise_power_table)
!2028 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1735, size: 24576, align: 32, elements: !2029)
!2029 = !{!2030, !2006}
!2030 = !DISubrange(count: 12)
!2031 = distinct !DIGlobalVariable(name: "wmavoice_energy_table", scope: !0, file: !1701, line: 3026, type: !2018, isLocal: true, isDefinition: true, variable: [128 x float]* @wmavoice_energy_table)
!2032 = !{i32 2, !"Dwarf Version", i32 4}
!2033 = !{i32 2, !"Debug Info Version", i32 3}
!2034 = !{!"clang version 3.9.0 (tags/RELEASE_390/final)"}
!2035 = !DILocalVariable(name: "x", arg: 1, scope: !2036, file: !2037, line: 332, type: !923)
!2036 = distinct !DISubprogram(name: "av_ceil_log2_c", scope: !2037, file: !2037, line: 332, type: !2038, isLocal: true, isDefinition: true, scopeLine: 333, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!2037 = !DIFile(filename: "./libavutil/common.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!2038 = !DISubroutineType(types: !2039)
!2039 = !{!923, !923}
!2040 = !DIExpression()
!2041 = !DILocation(line: 332, column: 92, scope: !2036, inlinedAt: !2042)
!2042 = distinct !DILocation(line: 443, column: 22, scope: !1667)
!2043 = !DILocation(line: 332, column: 92, scope: !2036, inlinedAt: !2044)
!2044 = distinct !DILocation(line: 468, column: 38, scope: !1667)
!2045 = !DILocation(line: 332, column: 92, scope: !2036, inlinedAt: !2046)
!2046 = distinct !DILocation(line: 472, column: 28, scope: !1667)
!2047 = !DILocation(line: 332, column: 92, scope: !2036, inlinedAt: !2048)
!2048 = distinct !DILocation(line: 395, column: 32, scope: !1667)
!2049 = !DILocalVariable(name: "ctx", arg: 1, scope: !1667, file: !911, line: 367, type: !1038)
!2050 = !DILocation(line: 367, column: 71, scope: !1667)
!2051 = !DILocalVariable(name: "n", scope: !1667, file: !911, line: 370, type: !923)
!2052 = !DILocation(line: 370, column: 9, scope: !1667)
!2053 = !DILocalVariable(name: "flags", scope: !1667, file: !911, line: 370, type: !923)
!2054 = !DILocation(line: 370, column: 12, scope: !1667)
!2055 = !DILocalVariable(name: "pitch_range", scope: !1667, file: !911, line: 370, type: !923)
!2056 = !DILocation(line: 370, column: 19, scope: !1667)
!2057 = !DILocalVariable(name: "lsp16_flag", scope: !1667, file: !911, line: 370, type: !923)
!2058 = !DILocation(line: 370, column: 32, scope: !1667)
!2059 = !DILocalVariable(name: "s", scope: !1667, file: !911, line: 371, type: !1812)
!2060 = !DILocation(line: 371, column: 22, scope: !1667)
!2061 = !DILocation(line: 371, column: 26, scope: !1667)
!2062 = !DILocation(line: 371, column: 31, scope: !1667)
!2063 = !DILocation(line: 373, column: 5, scope: !1667)
!2064 = !DILocation(line: 383, column: 9, scope: !2065)
!2065 = distinct !DILexicalBlock(scope: !1667, file: !911, line: 383, column: 9)
!2066 = !DILocation(line: 383, column: 14, scope: !2065)
!2067 = !DILocation(line: 383, column: 29, scope: !2065)
!2068 = !DILocation(line: 383, column: 9, scope: !1667)
!2069 = !DILocation(line: 384, column: 16, scope: !2070)
!2070 = distinct !DILexicalBlock(scope: !2065, file: !911, line: 383, column: 36)
!2071 = !DILocation(line: 386, column: 16, scope: !2070)
!2072 = !DILocation(line: 386, column: 21, scope: !2070)
!2073 = !DILocation(line: 384, column: 9, scope: !2070)
!2074 = !DILocation(line: 387, column: 9, scope: !2070)
!2075 = !DILocation(line: 389, column: 9, scope: !2076)
!2076 = distinct !DILexicalBlock(scope: !1667, file: !911, line: 389, column: 9)
!2077 = !DILocation(line: 389, column: 14, scope: !2076)
!2078 = !DILocation(line: 389, column: 26, scope: !2076)
!2079 = !DILocation(line: 389, column: 9, scope: !1667)
!2080 = !DILocation(line: 390, column: 16, scope: !2081)
!2081 = distinct !DILexicalBlock(scope: !2076, file: !911, line: 389, column: 32)
!2082 = !DILocation(line: 390, column: 58, scope: !2081)
!2083 = !DILocation(line: 390, column: 63, scope: !2081)
!2084 = !DILocation(line: 390, column: 9, scope: !2081)
!2085 = !DILocation(line: 391, column: 9, scope: !2081)
!2086 = !DILocation(line: 394, column: 45, scope: !1667)
!2087 = !DILocation(line: 394, column: 50, scope: !1667)
!2088 = !DILocation(line: 394, column: 60, scope: !1667)
!2089 = !DILocation(line: 394, column: 68, scope: !1667)
!2090 = !DILocation(line: 394, column: 11, scope: !1667)
!2091 = !DILocation(line: 395, column: 47, scope: !1667)
!2092 = !DILocation(line: 395, column: 52, scope: !1667)
!2093 = !DILocation(line: 395, column: 32, scope: !1667)
!2094 = !DILocation(line: 334, column: 34, scope: !2036, inlinedAt: !2048)
!2095 = !DILocation(line: 334, column: 36, scope: !2036, inlinedAt: !2048)
!2096 = !DILocation(line: 334, column: 41, scope: !2036, inlinedAt: !2048)
!2097 = !DILocation(line: 334, column: 46, scope: !2036, inlinedAt: !2048)
!2098 = !DILocation(line: 334, column: 18, scope: !2036, inlinedAt: !2048)
!2099 = !DILocation(line: 334, column: 16, scope: !2036, inlinedAt: !2048)
!2100 = !DILocation(line: 395, column: 30, scope: !1667)
!2101 = !DILocation(line: 395, column: 5, scope: !1667)
!2102 = !DILocation(line: 395, column: 8, scope: !1667)
!2103 = !DILocation(line: 395, column: 26, scope: !1667)
!2104 = !DILocation(line: 396, column: 17, scope: !1667)
!2105 = !DILocation(line: 396, column: 23, scope: !1667)
!2106 = !DILocation(line: 396, column: 5, scope: !1667)
!2107 = !DILocation(line: 396, column: 8, scope: !1667)
!2108 = !DILocation(line: 396, column: 15, scope: !1667)
!2109 = !DILocation(line: 397, column: 9, scope: !2110)
!2110 = distinct !DILexicalBlock(scope: !1667, file: !911, line: 397, column: 9)
!2111 = !DILocation(line: 397, column: 12, scope: !2110)
!2112 = !DILocation(line: 397, column: 9, scope: !1667)
!2113 = !DILocation(line: 398, column: 23, scope: !2114)
!2114 = distinct !DILexicalBlock(scope: !2110, file: !911, line: 397, column: 20)
!2115 = !DILocation(line: 398, column: 26, scope: !2114)
!2116 = !DILocation(line: 398, column: 9, scope: !2114)
!2117 = !DILocation(line: 399, column: 23, scope: !2114)
!2118 = !DILocation(line: 399, column: 26, scope: !2114)
!2119 = !DILocation(line: 399, column: 9, scope: !2114)
!2120 = !DILocation(line: 400, column: 22, scope: !2114)
!2121 = !DILocation(line: 400, column: 25, scope: !2114)
!2122 = !DILocation(line: 400, column: 9, scope: !2114)
!2123 = !DILocation(line: 401, column: 22, scope: !2114)
!2124 = !DILocation(line: 401, column: 25, scope: !2114)
!2125 = !DILocation(line: 401, column: 9, scope: !2114)
!2126 = !DILocation(line: 403, column: 29, scope: !2114)
!2127 = !DILocation(line: 403, column: 32, scope: !2114)
!2128 = !DILocation(line: 403, column: 9, scope: !2114)
!2129 = !DILocation(line: 404, column: 17, scope: !2114)
!2130 = !DILocation(line: 404, column: 20, scope: !2114)
!2131 = !DILocation(line: 404, column: 9, scope: !2114)
!2132 = !DILocation(line: 404, column: 30, scope: !2114)
!2133 = !DILocation(line: 404, column: 33, scope: !2114)
!2134 = !DILocation(line: 405, column: 16, scope: !2135)
!2135 = distinct !DILexicalBlock(scope: !2114, file: !911, line: 405, column: 9)
!2136 = !DILocation(line: 405, column: 14, scope: !2135)
!2137 = !DILocation(line: 405, column: 21, scope: !2138)
!2138 = !DILexicalBlockFile(scope: !2139, file: !911, discriminator: 1)
!2139 = distinct !DILexicalBlock(scope: !2135, file: !911, line: 405, column: 9)
!2140 = !DILocation(line: 405, column: 23, scope: !2138)
!2141 = !DILocation(line: 405, column: 9, scope: !2138)
!2142 = !DILocation(line: 406, column: 39, scope: !2143)
!2143 = distinct !DILexicalBlock(scope: !2139, file: !911, line: 405, column: 35)
!2144 = !DILocation(line: 406, column: 37, scope: !2143)
!2145 = !DILocation(line: 406, column: 26, scope: !2143)
!2146 = !DILocation(line: 406, column: 29, scope: !2143)
!2147 = !DILocation(line: 406, column: 25, scope: !2143)
!2148 = !DILocation(line: 406, column: 20, scope: !2143)
!2149 = !DILocation(line: 406, column: 13, scope: !2143)
!2150 = !DILocation(line: 406, column: 16, scope: !2143)
!2151 = !DILocation(line: 406, column: 23, scope: !2143)
!2152 = !DILocation(line: 407, column: 38, scope: !2143)
!2153 = !DILocation(line: 407, column: 31, scope: !2143)
!2154 = !DILocation(line: 407, column: 34, scope: !2143)
!2155 = !DILocation(line: 407, column: 26, scope: !2143)
!2156 = !DILocation(line: 407, column: 24, scope: !2143)
!2157 = !DILocation(line: 407, column: 13, scope: !2143)
!2158 = !DILocation(line: 407, column: 16, scope: !2143)
!2159 = !DILocation(line: 407, column: 29, scope: !2143)
!2160 = !DILocation(line: 408, column: 9, scope: !2143)
!2161 = !DILocation(line: 405, column: 31, scope: !2162)
!2162 = !DILexicalBlockFile(scope: !2139, file: !911, discriminator: 2)
!2163 = !DILocation(line: 405, column: 9, scope: !2162)
!2164 = distinct !{!2164, !2165}
!2165 = !DILocation(line: 405, column: 9, scope: !2114)
!2166 = !DILocation(line: 409, column: 5, scope: !2114)
!2167 = !DILocation(line: 410, column: 28, scope: !1667)
!2168 = !DILocation(line: 410, column: 34, scope: !1667)
!2169 = !DILocation(line: 410, column: 40, scope: !1667)
!2170 = !DILocation(line: 410, column: 5, scope: !1667)
!2171 = !DILocation(line: 410, column: 8, scope: !1667)
!2172 = !DILocation(line: 410, column: 25, scope: !1667)
!2173 = !DILocation(line: 411, column: 9, scope: !2174)
!2174 = distinct !DILexicalBlock(scope: !1667, file: !911, line: 411, column: 9)
!2175 = !DILocation(line: 411, column: 12, scope: !2174)
!2176 = !DILocation(line: 411, column: 29, scope: !2174)
!2177 = !DILocation(line: 411, column: 9, scope: !1667)
!2178 = !DILocation(line: 412, column: 16, scope: !2179)
!2179 = distinct !DILexicalBlock(scope: !2174, file: !911, line: 411, column: 36)
!2180 = !DILocation(line: 414, column: 16, scope: !2179)
!2181 = !DILocation(line: 414, column: 19, scope: !2179)
!2182 = !DILocation(line: 412, column: 9, scope: !2179)
!2183 = !DILocation(line: 415, column: 9, scope: !2179)
!2184 = !DILocation(line: 417, column: 31, scope: !1667)
!2185 = !DILocation(line: 417, column: 37, scope: !1667)
!2186 = !DILocation(line: 417, column: 29, scope: !1667)
!2187 = !DILocation(line: 417, column: 28, scope: !1667)
!2188 = !DILocation(line: 417, column: 5, scope: !1667)
!2189 = !DILocation(line: 417, column: 8, scope: !1667)
!2190 = !DILocation(line: 417, column: 26, scope: !1667)
!2191 = !DILocation(line: 418, column: 20, scope: !1667)
!2192 = !DILocation(line: 418, column: 26, scope: !1667)
!2193 = !DILocation(line: 418, column: 32, scope: !1667)
!2194 = !DILocation(line: 418, column: 5, scope: !1667)
!2195 = !DILocation(line: 418, column: 8, scope: !1667)
!2196 = !DILocation(line: 418, column: 17, scope: !1667)
!2197 = !DILocation(line: 419, column: 24, scope: !1667)
!2198 = !DILocation(line: 419, column: 30, scope: !1667)
!2199 = !DILocation(line: 419, column: 22, scope: !1667)
!2200 = !DILocation(line: 419, column: 21, scope: !1667)
!2201 = !DILocation(line: 419, column: 5, scope: !1667)
!2202 = !DILocation(line: 419, column: 8, scope: !1667)
!2203 = !DILocation(line: 419, column: 19, scope: !1667)
!2204 = !DILocation(line: 420, column: 26, scope: !1667)
!2205 = !DILocation(line: 420, column: 32, scope: !1667)
!2206 = !DILocation(line: 420, column: 24, scope: !1667)
!2207 = !DILocation(line: 420, column: 23, scope: !1667)
!2208 = !DILocation(line: 420, column: 5, scope: !1667)
!2209 = !DILocation(line: 420, column: 8, scope: !1667)
!2210 = !DILocation(line: 420, column: 21, scope: !1667)
!2211 = !DILocation(line: 421, column: 18, scope: !1667)
!2212 = !DILocation(line: 421, column: 24, scope: !1667)
!2213 = !DILocation(line: 421, column: 16, scope: !1667)
!2214 = !DILocation(line: 422, column: 9, scope: !2215)
!2215 = distinct !DILexicalBlock(scope: !1667, file: !911, line: 422, column: 9)
!2216 = !DILocation(line: 422, column: 9, scope: !1667)
!2217 = !DILocation(line: 423, column: 9, scope: !2218)
!2218 = distinct !DILexicalBlock(scope: !2215, file: !911, line: 422, column: 21)
!2219 = !DILocation(line: 423, column: 12, scope: !2218)
!2220 = !DILocation(line: 423, column: 17, scope: !2218)
!2221 = !DILocation(line: 424, column: 5, scope: !2218)
!2222 = !DILocation(line: 425, column: 9, scope: !2223)
!2223 = distinct !DILexicalBlock(scope: !2215, file: !911, line: 424, column: 12)
!2224 = !DILocation(line: 425, column: 12, scope: !2223)
!2225 = !DILocation(line: 425, column: 17, scope: !2223)
!2226 = !DILocation(line: 427, column: 12, scope: !2227)
!2227 = distinct !DILexicalBlock(scope: !1667, file: !911, line: 427, column: 5)
!2228 = !DILocation(line: 427, column: 10, scope: !2227)
!2229 = !DILocation(line: 427, column: 17, scope: !2230)
!2230 = !DILexicalBlockFile(scope: !2231, file: !911, discriminator: 1)
!2231 = distinct !DILexicalBlock(scope: !2227, file: !911, line: 427, column: 5)
!2232 = !DILocation(line: 427, column: 21, scope: !2230)
!2233 = !DILocation(line: 427, column: 24, scope: !2230)
!2234 = !DILocation(line: 427, column: 19, scope: !2230)
!2235 = !DILocation(line: 427, column: 5, scope: !2230)
!2236 = !DILocation(line: 428, column: 34, scope: !2231)
!2237 = !DILocation(line: 428, column: 36, scope: !2231)
!2238 = !DILocation(line: 428, column: 31, scope: !2231)
!2239 = !DILocation(line: 428, column: 46, scope: !2231)
!2240 = !DILocation(line: 428, column: 49, scope: !2231)
!2241 = !DILocation(line: 428, column: 54, scope: !2231)
!2242 = !DILocation(line: 428, column: 43, scope: !2231)
!2243 = !DILocation(line: 428, column: 22, scope: !2231)
!2244 = !DILocation(line: 428, column: 9, scope: !2231)
!2245 = !DILocation(line: 428, column: 12, scope: !2231)
!2246 = !DILocation(line: 428, column: 25, scope: !2231)
!2247 = !DILocation(line: 427, column: 31, scope: !2248)
!2248 = !DILexicalBlockFile(scope: !2231, file: !911, discriminator: 2)
!2249 = !DILocation(line: 427, column: 5, scope: !2248)
!2250 = distinct !{!2250, !2251}
!2251 = !DILocation(line: 427, column: 5, scope: !1667)
!2252 = !DILocation(line: 430, column: 20, scope: !1667)
!2253 = !DILocation(line: 430, column: 23, scope: !1667)
!2254 = !DILocation(line: 430, column: 27, scope: !1667)
!2255 = !DILocation(line: 430, column: 32, scope: !1667)
!2256 = !DILocation(line: 430, column: 42, scope: !1667)
!2257 = !DILocation(line: 430, column: 49, scope: !1667)
!2258 = !DILocation(line: 430, column: 54, scope: !1667)
!2259 = !DILocation(line: 430, column: 69, scope: !1667)
!2260 = !DILocation(line: 430, column: 75, scope: !1667)
!2261 = !DILocation(line: 430, column: 5, scope: !1667)
!2262 = !DILocation(line: 431, column: 25, scope: !2263)
!2263 = distinct !DILexicalBlock(scope: !1667, file: !911, line: 431, column: 9)
!2264 = !DILocation(line: 431, column: 28, scope: !2263)
!2265 = !DILocation(line: 431, column: 32, scope: !2263)
!2266 = !DILocation(line: 431, column: 35, scope: !2263)
!2267 = !DILocation(line: 431, column: 9, scope: !2263)
!2268 = !DILocation(line: 431, column: 45, scope: !2263)
!2269 = !DILocation(line: 431, column: 9, scope: !1667)
!2270 = !DILocation(line: 432, column: 16, scope: !2271)
!2271 = distinct !DILexicalBlock(scope: !2263, file: !911, line: 431, column: 50)
!2272 = !DILocation(line: 432, column: 9, scope: !2271)
!2273 = !DILocation(line: 433, column: 9, scope: !2271)
!2274 = !DILocation(line: 436, column: 26, scope: !1667)
!2275 = !DILocation(line: 436, column: 31, scope: !1667)
!2276 = !DILocation(line: 436, column: 43, scope: !1667)
!2277 = !DILocation(line: 436, column: 49, scope: !1667)
!2278 = !DILocation(line: 436, column: 55, scope: !1667)
!2279 = !DILocation(line: 436, column: 61, scope: !1667)
!2280 = !DILocation(line: 436, column: 5, scope: !1667)
!2281 = !DILocation(line: 436, column: 8, scope: !1667)
!2282 = !DILocation(line: 436, column: 22, scope: !1667)
!2283 = !DILocation(line: 437, column: 26, scope: !1667)
!2284 = !DILocation(line: 437, column: 31, scope: !1667)
!2285 = !DILocation(line: 437, column: 43, scope: !1667)
!2286 = !DILocation(line: 437, column: 49, scope: !1667)
!2287 = !DILocation(line: 437, column: 54, scope: !1667)
!2288 = !DILocation(line: 437, column: 61, scope: !1667)
!2289 = !DILocation(line: 437, column: 67, scope: !1667)
!2290 = !DILocation(line: 437, column: 5, scope: !1667)
!2291 = !DILocation(line: 437, column: 8, scope: !1667)
!2292 = !DILocation(line: 437, column: 22, scope: !1667)
!2293 = !DILocation(line: 438, column: 19, scope: !1667)
!2294 = !DILocation(line: 438, column: 22, scope: !1667)
!2295 = !DILocation(line: 438, column: 38, scope: !1667)
!2296 = !DILocation(line: 438, column: 41, scope: !1667)
!2297 = !DILocation(line: 438, column: 36, scope: !1667)
!2298 = !DILocation(line: 438, column: 17, scope: !1667)
!2299 = !DILocation(line: 439, column: 9, scope: !2300)
!2300 = distinct !DILexicalBlock(scope: !1667, file: !911, line: 439, column: 9)
!2301 = !DILocation(line: 439, column: 21, scope: !2300)
!2302 = !DILocation(line: 439, column: 9, scope: !1667)
!2303 = !DILocation(line: 440, column: 16, scope: !2304)
!2304 = distinct !DILexicalBlock(scope: !2300, file: !911, line: 439, column: 27)
!2305 = !DILocation(line: 440, column: 9, scope: !2304)
!2306 = !DILocation(line: 441, column: 9, scope: !2304)
!2307 = !DILocation(line: 443, column: 37, scope: !1667)
!2308 = !DILocation(line: 443, column: 22, scope: !1667)
!2309 = !DILocation(line: 334, column: 34, scope: !2036, inlinedAt: !2042)
!2310 = !DILocation(line: 334, column: 36, scope: !2036, inlinedAt: !2042)
!2311 = !DILocation(line: 334, column: 41, scope: !2036, inlinedAt: !2042)
!2312 = !DILocation(line: 334, column: 46, scope: !2036, inlinedAt: !2042)
!2313 = !DILocation(line: 334, column: 18, scope: !2036, inlinedAt: !2042)
!2314 = !DILocation(line: 334, column: 16, scope: !2036, inlinedAt: !2042)
!2315 = !DILocation(line: 443, column: 5, scope: !1667)
!2316 = !DILocation(line: 443, column: 8, scope: !1667)
!2317 = !DILocation(line: 443, column: 20, scope: !1667)
!2318 = !DILocation(line: 444, column: 5, scope: !1667)
!2319 = !DILocation(line: 444, column: 8, scope: !1667)
!2320 = !DILocation(line: 444, column: 23, scope: !1667)
!2321 = !DILocation(line: 445, column: 5, scope: !1667)
!2322 = !DILocation(line: 445, column: 8, scope: !1667)
!2323 = !DILocation(line: 445, column: 22, scope: !1667)
!2324 = !DILocation(line: 446, column: 27, scope: !1667)
!2325 = !DILocation(line: 446, column: 30, scope: !1667)
!2326 = !DILocation(line: 446, column: 44, scope: !1667)
!2327 = !DILocation(line: 446, column: 5, scope: !1667)
!2328 = !DILocation(line: 446, column: 8, scope: !1667)
!2329 = !DILocation(line: 446, column: 25, scope: !1667)
!2330 = !DILocation(line: 448, column: 9, scope: !2331)
!2331 = distinct !DILexicalBlock(scope: !1667, file: !911, line: 448, column: 9)
!2332 = !DILocation(line: 448, column: 12, scope: !2331)
!2333 = !DILocation(line: 448, column: 26, scope: !2331)
!2334 = !DILocation(line: 448, column: 30, scope: !2331)
!2335 = !DILocation(line: 448, column: 33, scope: !2336)
!2336 = !DILexicalBlockFile(scope: !2331, file: !911, discriminator: 1)
!2337 = !DILocation(line: 448, column: 36, scope: !2336)
!2338 = !DILocation(line: 448, column: 53, scope: !2336)
!2339 = !DILocation(line: 448, column: 9, scope: !2336)
!2340 = !DILocalVariable(name: "min_sr", scope: !2341, file: !911, line: 449, type: !923)
!2341 = distinct !DILexicalBlock(scope: !2331, file: !911, line: 448, column: 60)
!2342 = !DILocation(line: 449, column: 13, scope: !2341)
!2343 = !DILocalVariable(name: "max_sr", scope: !2341, file: !911, line: 450, type: !923)
!2344 = !DILocation(line: 450, column: 13, scope: !2341)
!2345 = !DILocation(line: 452, column: 16, scope: !2341)
!2346 = !DILocation(line: 454, column: 16, scope: !2341)
!2347 = !DILocation(line: 454, column: 21, scope: !2341)
!2348 = !DILocation(line: 454, column: 34, scope: !2341)
!2349 = !DILocation(line: 454, column: 42, scope: !2341)
!2350 = !DILocation(line: 452, column: 9, scope: !2341)
!2351 = !DILocation(line: 456, column: 9, scope: !2341)
!2352 = !DILocation(line: 459, column: 30, scope: !1667)
!2353 = !DILocation(line: 459, column: 33, scope: !1667)
!2354 = !DILocation(line: 459, column: 5, scope: !1667)
!2355 = !DILocation(line: 459, column: 8, scope: !1667)
!2356 = !DILocation(line: 459, column: 28, scope: !1667)
!2357 = !DILocation(line: 460, column: 31, scope: !1667)
!2358 = !DILocation(line: 460, column: 43, scope: !1667)
!2359 = !DILocation(line: 460, column: 49, scope: !1667)
!2360 = !DILocation(line: 460, column: 30, scope: !1667)
!2361 = !DILocation(line: 460, column: 5, scope: !1667)
!2362 = !DILocation(line: 460, column: 8, scope: !1667)
!2363 = !DILocation(line: 460, column: 28, scope: !1667)
!2364 = !DILocation(line: 461, column: 31, scope: !1667)
!2365 = !DILocation(line: 461, column: 43, scope: !1667)
!2366 = !DILocation(line: 461, column: 49, scope: !1667)
!2367 = !DILocation(line: 461, column: 30, scope: !1667)
!2368 = !DILocation(line: 461, column: 5, scope: !1667)
!2369 = !DILocation(line: 461, column: 8, scope: !1667)
!2370 = !DILocation(line: 461, column: 28, scope: !1667)
!2371 = !DILocation(line: 462, column: 30, scope: !1667)
!2372 = !DILocation(line: 462, column: 33, scope: !1667)
!2373 = !DILocation(line: 462, column: 47, scope: !1667)
!2374 = !DILocation(line: 462, column: 5, scope: !1667)
!2375 = !DILocation(line: 462, column: 8, scope: !1667)
!2376 = !DILocation(line: 462, column: 28, scope: !1667)
!2377 = !DILocation(line: 463, column: 36, scope: !1667)
!2378 = !DILocation(line: 463, column: 48, scope: !1667)
!2379 = !DILocation(line: 463, column: 54, scope: !1667)
!2380 = !DILocation(line: 463, column: 5, scope: !1667)
!2381 = !DILocation(line: 463, column: 8, scope: !1667)
!2382 = !DILocation(line: 463, column: 33, scope: !1667)
!2383 = !DILocation(line: 464, column: 9, scope: !2384)
!2384 = distinct !DILexicalBlock(scope: !1667, file: !911, line: 464, column: 9)
!2385 = !DILocation(line: 464, column: 12, scope: !2384)
!2386 = !DILocation(line: 464, column: 37, scope: !2384)
!2387 = !DILocation(line: 464, column: 9, scope: !1667)
!2388 = !DILocation(line: 465, column: 16, scope: !2389)
!2389 = distinct !DILexicalBlock(scope: !2384, file: !911, line: 464, column: 43)
!2390 = !DILocation(line: 465, column: 9, scope: !2389)
!2391 = !DILocation(line: 466, column: 9, scope: !2389)
!2392 = !DILocation(line: 468, column: 53, scope: !1667)
!2393 = !DILocation(line: 468, column: 56, scope: !1667)
!2394 = !DILocation(line: 468, column: 38, scope: !1667)
!2395 = !DILocation(line: 334, column: 34, scope: !2036, inlinedAt: !2044)
!2396 = !DILocation(line: 334, column: 36, scope: !2036, inlinedAt: !2044)
!2397 = !DILocation(line: 334, column: 41, scope: !2036, inlinedAt: !2044)
!2398 = !DILocation(line: 334, column: 46, scope: !2036, inlinedAt: !2044)
!2399 = !DILocation(line: 334, column: 18, scope: !2036, inlinedAt: !2044)
!2400 = !DILocation(line: 334, column: 16, scope: !2036, inlinedAt: !2044)
!2401 = !DILocation(line: 468, column: 36, scope: !1667)
!2402 = !DILocation(line: 468, column: 5, scope: !1667)
!2403 = !DILocation(line: 468, column: 8, scope: !1667)
!2404 = !DILocation(line: 468, column: 32, scope: !1667)
!2405 = !DILocation(line: 469, column: 28, scope: !1667)
!2406 = !DILocation(line: 469, column: 31, scope: !1667)
!2407 = !DILocation(line: 470, column: 35, scope: !1667)
!2408 = !DILocation(line: 470, column: 38, scope: !1667)
!2409 = !DILocation(line: 469, column: 51, scope: !1667)
!2410 = !DILocation(line: 470, column: 58, scope: !1667)
!2411 = !DILocation(line: 471, column: 40, scope: !1667)
!2412 = !DILocation(line: 471, column: 43, scope: !1667)
!2413 = !DILocation(line: 471, column: 69, scope: !1667)
!2414 = !DILocation(line: 471, column: 72, scope: !1667)
!2415 = !DILocation(line: 471, column: 67, scope: !1667)
!2416 = !DILocation(line: 471, column: 63, scope: !1667)
!2417 = !DILocation(line: 471, column: 37, scope: !1667)
!2418 = !DILocation(line: 470, column: 62, scope: !1667)
!2419 = !DILocation(line: 469, column: 5, scope: !1667)
!2420 = !DILocation(line: 469, column: 8, scope: !1667)
!2421 = !DILocation(line: 469, column: 26, scope: !1667)
!2422 = !DILocation(line: 472, column: 43, scope: !1667)
!2423 = !DILocation(line: 472, column: 46, scope: !1667)
!2424 = !DILocation(line: 472, column: 28, scope: !1667)
!2425 = !DILocation(line: 334, column: 34, scope: !2036, inlinedAt: !2046)
!2426 = !DILocation(line: 334, column: 36, scope: !2036, inlinedAt: !2046)
!2427 = !DILocation(line: 334, column: 41, scope: !2036, inlinedAt: !2046)
!2428 = !DILocation(line: 334, column: 46, scope: !2036, inlinedAt: !2046)
!2429 = !DILocation(line: 334, column: 18, scope: !2036, inlinedAt: !2046)
!2430 = !DILocation(line: 334, column: 16, scope: !2036, inlinedAt: !2046)
!2431 = !DILocation(line: 472, column: 5, scope: !1667)
!2432 = !DILocation(line: 472, column: 8, scope: !1667)
!2433 = !DILocation(line: 472, column: 26, scope: !1667)
!2434 = !DILocation(line: 474, column: 5, scope: !1667)
!2435 = !DILocation(line: 474, column: 10, scope: !1667)
!2436 = !DILocation(line: 474, column: 19, scope: !1667)
!2437 = !DILocation(line: 475, column: 5, scope: !1667)
!2438 = !DILocation(line: 475, column: 10, scope: !1667)
!2439 = !DILocation(line: 475, column: 25, scope: !1667)
!2440 = !DILocation(line: 476, column: 5, scope: !1667)
!2441 = !DILocation(line: 476, column: 10, scope: !1667)
!2442 = !DILocation(line: 476, column: 21, scope: !1667)
!2443 = !DILocation(line: 478, column: 5, scope: !1667)
!2444 = !DILocation(line: 479, column: 1, scope: !1667)
!2445 = distinct !DISubprogram(name: "wmavoice_decode_packet", scope: !911, file: !911, line: 1896, type: !1643, isLocal: true, isDefinition: true, scopeLine: 1898, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!2446 = !DILocalVariable(name: "ctx", arg: 1, scope: !2445, file: !911, line: 1896, type: !1038)
!2447 = !DILocation(line: 1896, column: 51, scope: !2445)
!2448 = !DILocalVariable(name: "data", arg: 2, scope: !2445, file: !911, line: 1896, type: !936)
!2449 = !DILocation(line: 1896, column: 62, scope: !2445)
!2450 = !DILocalVariable(name: "got_frame_ptr", arg: 3, scope: !2445, file: !911, line: 1897, type: !1329)
!2451 = !DILocation(line: 1897, column: 40, scope: !2445)
!2452 = !DILocalVariable(name: "avpkt", arg: 4, scope: !2445, file: !911, line: 1897, type: !1183)
!2453 = !DILocation(line: 1897, column: 65, scope: !2445)
!2454 = !DILocalVariable(name: "s", scope: !2445, file: !911, line: 1899, type: !1812)
!2455 = !DILocation(line: 1899, column: 22, scope: !2445)
!2456 = !DILocation(line: 1899, column: 26, scope: !2445)
!2457 = !DILocation(line: 1899, column: 31, scope: !2445)
!2458 = !DILocalVariable(name: "gb", scope: !2445, file: !911, line: 1900, type: !1715)
!2459 = !DILocation(line: 1900, column: 20, scope: !2445)
!2460 = !DILocation(line: 1900, column: 26, scope: !2445)
!2461 = !DILocation(line: 1900, column: 29, scope: !2445)
!2462 = !DILocalVariable(name: "size", scope: !2445, file: !911, line: 1901, type: !923)
!2463 = !DILocation(line: 1901, column: 9, scope: !2445)
!2464 = !DILocalVariable(name: "res", scope: !2445, file: !911, line: 1901, type: !923)
!2465 = !DILocation(line: 1901, column: 15, scope: !2445)
!2466 = !DILocalVariable(name: "pos", scope: !2445, file: !911, line: 1901, type: !923)
!2467 = !DILocation(line: 1901, column: 20, scope: !2445)
!2468 = !DILocation(line: 1908, column: 17, scope: !2469)
!2469 = distinct !DILexicalBlock(scope: !2445, file: !911, line: 1908, column: 5)
!2470 = !DILocation(line: 1908, column: 24, scope: !2469)
!2471 = !DILocation(line: 1908, column: 15, scope: !2469)
!2472 = !DILocation(line: 1908, column: 10, scope: !2469)
!2473 = !DILocation(line: 1908, column: 30, scope: !2474)
!2474 = !DILexicalBlockFile(scope: !2475, file: !911, discriminator: 1)
!2475 = distinct !DILexicalBlock(scope: !2469, file: !911, line: 1908, column: 5)
!2476 = !DILocation(line: 1908, column: 37, scope: !2474)
!2477 = !DILocation(line: 1908, column: 42, scope: !2474)
!2478 = !DILocation(line: 1908, column: 35, scope: !2474)
!2479 = !DILocation(line: 1908, column: 5, scope: !2474)
!2480 = !DILocation(line: 1908, column: 5, scope: !2481)
!2481 = !DILexicalBlockFile(scope: !2469, file: !911, discriminator: 2)
!2482 = !DILocation(line: 1908, column: 63, scope: !2483)
!2483 = !DILexicalBlockFile(scope: !2475, file: !911, discriminator: 3)
!2484 = !DILocation(line: 1908, column: 68, scope: !2483)
!2485 = !DILocation(line: 1908, column: 60, scope: !2483)
!2486 = !DILocation(line: 1908, column: 5, scope: !2483)
!2487 = distinct !{!2487, !2488}
!2488 = !DILocation(line: 1908, column: 5, scope: !2445)
!2489 = !DILocation(line: 1909, column: 21, scope: !2445)
!2490 = !DILocation(line: 1909, column: 24, scope: !2445)
!2491 = !DILocation(line: 1909, column: 28, scope: !2445)
!2492 = !DILocation(line: 1909, column: 35, scope: !2445)
!2493 = !DILocation(line: 1909, column: 41, scope: !2445)
!2494 = !DILocation(line: 1909, column: 5, scope: !2445)
!2495 = !DILocation(line: 1914, column: 11, scope: !2496)
!2496 = distinct !DILexicalBlock(scope: !2445, file: !911, line: 1914, column: 9)
!2497 = !DILocation(line: 1914, column: 18, scope: !2496)
!2498 = !DILocation(line: 1914, column: 23, scope: !2496)
!2499 = !DILocation(line: 1914, column: 16, scope: !2496)
!2500 = !DILocation(line: 1914, column: 9, scope: !2445)
!2501 = !DILocation(line: 1915, column: 14, scope: !2502)
!2502 = distinct !DILexicalBlock(scope: !2503, file: !911, line: 1915, column: 13)
!2503 = distinct !DILexicalBlock(scope: !2496, file: !911, line: 1914, column: 37)
!2504 = !DILocation(line: 1915, column: 13, scope: !2503)
!2505 = !DILocation(line: 1916, column: 13, scope: !2506)
!2506 = distinct !DILexicalBlock(scope: !2502, file: !911, line: 1915, column: 20)
!2507 = !DILocation(line: 1916, column: 16, scope: !2506)
!2508 = !DILocation(line: 1916, column: 32, scope: !2506)
!2509 = !DILocation(line: 1917, column: 13, scope: !2506)
!2510 = !DILocation(line: 1917, column: 16, scope: !2506)
!2511 = !DILocation(line: 1917, column: 31, scope: !2506)
!2512 = !DILocation(line: 1918, column: 9, scope: !2506)
!2513 = !DILocation(line: 1919, column: 44, scope: !2514)
!2514 = distinct !DILexicalBlock(scope: !2515, file: !911, line: 1919, column: 17)
!2515 = distinct !DILexicalBlock(scope: !2502, file: !911, line: 1918, column: 16)
!2516 = !DILocation(line: 1919, column: 24, scope: !2514)
!2517 = !DILocation(line: 1919, column: 22, scope: !2514)
!2518 = !DILocation(line: 1919, column: 48, scope: !2514)
!2519 = !DILocation(line: 1919, column: 17, scope: !2515)
!2520 = !DILocation(line: 1920, column: 24, scope: !2514)
!2521 = !DILocation(line: 1920, column: 17, scope: !2514)
!2522 = !DILocation(line: 1921, column: 33, scope: !2515)
!2523 = !DILocation(line: 1921, column: 13, scope: !2515)
!2524 = !DILocation(line: 1921, column: 16, scope: !2515)
!2525 = !DILocation(line: 1921, column: 31, scope: !2515)
!2526 = !DILocation(line: 1927, column: 13, scope: !2527)
!2527 = distinct !DILexicalBlock(scope: !2503, file: !911, line: 1927, column: 13)
!2528 = !DILocation(line: 1927, column: 16, scope: !2527)
!2529 = !DILocation(line: 1927, column: 34, scope: !2527)
!2530 = !DILocation(line: 1927, column: 13, scope: !2503)
!2531 = !DILocalVariable(name: "cnt", scope: !2532, file: !911, line: 1928, type: !923)
!2532 = distinct !DILexicalBlock(scope: !2527, file: !911, line: 1927, column: 39)
!2533 = !DILocation(line: 1928, column: 17, scope: !2532)
!2534 = !DILocation(line: 1928, column: 38, scope: !2532)
!2535 = !DILocation(line: 1928, column: 23, scope: !2532)
!2536 = !DILocation(line: 1929, column: 17, scope: !2537)
!2537 = distinct !DILexicalBlock(scope: !2532, file: !911, line: 1929, column: 17)
!2538 = !DILocation(line: 1929, column: 23, scope: !2537)
!2539 = !DILocation(line: 1929, column: 26, scope: !2537)
!2540 = !DILocation(line: 1929, column: 21, scope: !2537)
!2541 = !DILocation(line: 1929, column: 44, scope: !2537)
!2542 = !DILocation(line: 1929, column: 51, scope: !2537)
!2543 = !DILocation(line: 1929, column: 56, scope: !2537)
!2544 = !DILocation(line: 1929, column: 42, scope: !2537)
!2545 = !DILocation(line: 1929, column: 17, scope: !2532)
!2546 = !DILocation(line: 1930, column: 38, scope: !2547)
!2547 = distinct !DILexicalBlock(scope: !2537, file: !911, line: 1929, column: 61)
!2548 = !DILocation(line: 1930, column: 45, scope: !2547)
!2549 = !DILocation(line: 1930, column: 50, scope: !2547)
!2550 = !DILocation(line: 1930, column: 56, scope: !2547)
!2551 = !DILocation(line: 1930, column: 54, scope: !2547)
!2552 = !DILocation(line: 1930, column: 17, scope: !2547)
!2553 = !DILocation(line: 1930, column: 20, scope: !2547)
!2554 = !DILocation(line: 1930, column: 36, scope: !2547)
!2555 = !DILocation(line: 1931, column: 13, scope: !2547)
!2556 = !DILocation(line: 1932, column: 24, scope: !2532)
!2557 = !DILocation(line: 1932, column: 27, scope: !2532)
!2558 = !DILocation(line: 1932, column: 31, scope: !2532)
!2559 = !DILocation(line: 1932, column: 38, scope: !2532)
!2560 = !DILocation(line: 1932, column: 44, scope: !2532)
!2561 = !DILocation(line: 1932, column: 50, scope: !2532)
!2562 = !DILocation(line: 1932, column: 54, scope: !2532)
!2563 = !DILocation(line: 1932, column: 57, scope: !2532)
!2564 = !DILocation(line: 1932, column: 13, scope: !2532)
!2565 = !DILocation(line: 1933, column: 29, scope: !2532)
!2566 = !DILocation(line: 1933, column: 32, scope: !2532)
!2567 = !DILocation(line: 1933, column: 13, scope: !2532)
!2568 = !DILocation(line: 1934, column: 37, scope: !2532)
!2569 = !DILocation(line: 1934, column: 40, scope: !2532)
!2570 = !DILocation(line: 1934, column: 13, scope: !2532)
!2571 = !DILocation(line: 1934, column: 16, scope: !2532)
!2572 = !DILocation(line: 1934, column: 34, scope: !2532)
!2573 = !DILocation(line: 1935, column: 41, scope: !2574)
!2574 = distinct !DILexicalBlock(scope: !2532, file: !911, line: 1935, column: 17)
!2575 = !DILocation(line: 1935, column: 46, scope: !2574)
!2576 = !DILocation(line: 1935, column: 52, scope: !2574)
!2577 = !DILocation(line: 1935, column: 24, scope: !2574)
!2578 = !DILocation(line: 1935, column: 22, scope: !2574)
!2579 = !DILocation(line: 1935, column: 68, scope: !2574)
!2580 = !DILocation(line: 1935, column: 73, scope: !2574)
!2581 = !DILocation(line: 1936, column: 18, scope: !2574)
!2582 = !DILocation(line: 1936, column: 17, scope: !2574)
!2583 = !DILocation(line: 1935, column: 17, scope: !2584)
!2584 = !DILexicalBlockFile(scope: !2532, file: !911, discriminator: 1)
!2585 = !DILocation(line: 1937, column: 24, scope: !2586)
!2586 = distinct !DILexicalBlock(scope: !2574, file: !911, line: 1936, column: 33)
!2587 = !DILocation(line: 1937, column: 27, scope: !2586)
!2588 = !DILocation(line: 1937, column: 21, scope: !2586)
!2589 = !DILocation(line: 1938, column: 37, scope: !2586)
!2590 = !DILocation(line: 1938, column: 41, scope: !2586)
!2591 = !DILocation(line: 1938, column: 17, scope: !2586)
!2592 = !DILocation(line: 1938, column: 20, scope: !2586)
!2593 = !DILocation(line: 1938, column: 35, scope: !2586)
!2594 = !DILocation(line: 1939, column: 23, scope: !2586)
!2595 = !DILocation(line: 1939, column: 27, scope: !2586)
!2596 = !DILocation(line: 1939, column: 21, scope: !2586)
!2597 = !DILocation(line: 1940, column: 24, scope: !2586)
!2598 = !DILocation(line: 1940, column: 17, scope: !2586)
!2599 = !DILocation(line: 1942, column: 33, scope: !2574)
!2600 = !DILocation(line: 1942, column: 37, scope: !2574)
!2601 = !DILocation(line: 1942, column: 40, scope: !2574)
!2602 = !DILocation(line: 1942, column: 58, scope: !2574)
!2603 = !DILocation(line: 1942, column: 56, scope: !2574)
!2604 = !DILocation(line: 1943, column: 48, scope: !2574)
!2605 = !DILocation(line: 1943, column: 33, scope: !2574)
!2606 = !DILocation(line: 1942, column: 62, scope: !2574)
!2607 = !DILocation(line: 1942, column: 17, scope: !2574)
!2608 = !DILocation(line: 1944, column: 9, scope: !2532)
!2609 = !DILocation(line: 1944, column: 20, scope: !2610)
!2610 = !DILexicalBlockFile(scope: !2611, file: !911, discriminator: 1)
!2611 = distinct !DILexicalBlock(scope: !2527, file: !911, line: 1944, column: 20)
!2612 = !DILocation(line: 1944, column: 23, scope: !2610)
!2613 = !DILocation(line: 1945, column: 28, scope: !2614)
!2614 = distinct !DILexicalBlock(scope: !2611, file: !911, line: 1944, column: 40)
!2615 = !DILocation(line: 1945, column: 32, scope: !2614)
!2616 = !DILocation(line: 1945, column: 35, scope: !2614)
!2617 = !DILocation(line: 1945, column: 13, scope: !2614)
!2618 = !DILocation(line: 1946, column: 9, scope: !2614)
!2619 = !DILocation(line: 1947, column: 5, scope: !2503)
!2620 = !DILocation(line: 1947, column: 16, scope: !2621)
!2621 = !DILexicalBlockFile(scope: !2622, file: !911, discriminator: 1)
!2622 = distinct !DILexicalBlock(scope: !2496, file: !911, line: 1947, column: 16)
!2623 = !DILocation(line: 1947, column: 19, scope: !2621)
!2624 = !DILocation(line: 1948, column: 19, scope: !2622)
!2625 = !DILocation(line: 1948, column: 23, scope: !2622)
!2626 = !DILocation(line: 1948, column: 26, scope: !2622)
!2627 = !DILocation(line: 1948, column: 9, scope: !2622)
!2628 = !DILocation(line: 1951, column: 5, scope: !2445)
!2629 = !DILocation(line: 1951, column: 8, scope: !2445)
!2630 = !DILocation(line: 1951, column: 26, scope: !2445)
!2631 = !DILocation(line: 1952, column: 5, scope: !2445)
!2632 = !DILocation(line: 1952, column: 8, scope: !2445)
!2633 = !DILocation(line: 1952, column: 23, scope: !2445)
!2634 = !DILocation(line: 1953, column: 25, scope: !2445)
!2635 = !DILocation(line: 1953, column: 11, scope: !2445)
!2636 = !DILocation(line: 1953, column: 9, scope: !2445)
!2637 = !DILocation(line: 1954, column: 9, scope: !2638)
!2638 = distinct !DILexicalBlock(scope: !2445, file: !911, line: 1954, column: 9)
!2639 = !DILocation(line: 1954, column: 12, scope: !2638)
!2640 = !DILocation(line: 1954, column: 26, scope: !2638)
!2641 = !DILocation(line: 1954, column: 29, scope: !2638)
!2642 = !DILocation(line: 1954, column: 9, scope: !2445)
!2643 = !DILocation(line: 1955, column: 10, scope: !2644)
!2644 = distinct !DILexicalBlock(scope: !2638, file: !911, line: 1954, column: 35)
!2645 = !DILocation(line: 1955, column: 24, scope: !2644)
!2646 = !DILocation(line: 1956, column: 16, scope: !2644)
!2647 = !DILocation(line: 1956, column: 9, scope: !2644)
!2648 = !DILocation(line: 1957, column: 16, scope: !2649)
!2649 = distinct !DILexicalBlock(scope: !2638, file: !911, line: 1957, column: 16)
!2650 = !DILocation(line: 1957, column: 19, scope: !2649)
!2651 = !DILocation(line: 1957, column: 34, scope: !2649)
!2652 = !DILocation(line: 1957, column: 16, scope: !2638)
!2653 = !DILocation(line: 1958, column: 37, scope: !2654)
!2654 = distinct !DILexicalBlock(scope: !2655, file: !911, line: 1958, column: 13)
!2655 = distinct !DILexicalBlock(scope: !2649, file: !911, line: 1957, column: 39)
!2656 = !DILocation(line: 1958, column: 42, scope: !2654)
!2657 = !DILocation(line: 1958, column: 48, scope: !2654)
!2658 = !DILocation(line: 1958, column: 20, scope: !2654)
!2659 = !DILocation(line: 1958, column: 18, scope: !2654)
!2660 = !DILocation(line: 1958, column: 64, scope: !2654)
!2661 = !DILocation(line: 1958, column: 13, scope: !2655)
!2662 = !DILocation(line: 1959, column: 20, scope: !2663)
!2663 = distinct !DILexicalBlock(scope: !2654, file: !911, line: 1958, column: 69)
!2664 = !DILocation(line: 1959, column: 13, scope: !2663)
!2665 = !DILocation(line: 1960, column: 21, scope: !2666)
!2666 = distinct !DILexicalBlock(scope: !2654, file: !911, line: 1960, column: 20)
!2667 = !DILocation(line: 1960, column: 20, scope: !2666)
!2668 = !DILocation(line: 1960, column: 20, scope: !2654)
!2669 = !DILocalVariable(name: "cnt", scope: !2670, file: !911, line: 1961, type: !923)
!2670 = distinct !DILexicalBlock(scope: !2666, file: !911, line: 1960, column: 36)
!2671 = !DILocation(line: 1961, column: 17, scope: !2670)
!2672 = !DILocation(line: 1961, column: 38, scope: !2670)
!2673 = !DILocation(line: 1961, column: 23, scope: !2670)
!2674 = !DILocation(line: 1962, column: 33, scope: !2670)
!2675 = !DILocation(line: 1962, column: 37, scope: !2670)
!2676 = !DILocation(line: 1962, column: 13, scope: !2670)
!2677 = !DILocation(line: 1962, column: 16, scope: !2670)
!2678 = !DILocation(line: 1962, column: 31, scope: !2670)
!2679 = !DILocation(line: 1963, column: 19, scope: !2670)
!2680 = !DILocation(line: 1963, column: 23, scope: !2670)
!2681 = !DILocation(line: 1963, column: 17, scope: !2670)
!2682 = !DILocation(line: 1964, column: 20, scope: !2670)
!2683 = !DILocation(line: 1964, column: 13, scope: !2670)
!2684 = !DILocation(line: 1966, column: 5, scope: !2655)
!2685 = !DILocation(line: 1966, column: 40, scope: !2686)
!2686 = !DILexicalBlockFile(scope: !2687, file: !911, discriminator: 1)
!2687 = distinct !DILexicalBlock(scope: !2649, file: !911, line: 1966, column: 16)
!2688 = !DILocation(line: 1966, column: 17, scope: !2686)
!2689 = !DILocation(line: 1966, column: 20, scope: !2686)
!2690 = !DILocation(line: 1966, column: 38, scope: !2686)
!2691 = !DILocation(line: 1966, column: 45, scope: !2686)
!2692 = !DILocation(line: 1966, column: 16, scope: !2686)
!2693 = !DILocation(line: 1968, column: 24, scope: !2694)
!2694 = distinct !DILexicalBlock(scope: !2687, file: !911, line: 1966, column: 50)
!2695 = !DILocation(line: 1968, column: 27, scope: !2694)
!2696 = !DILocation(line: 1968, column: 31, scope: !2694)
!2697 = !DILocation(line: 1968, column: 34, scope: !2694)
!2698 = !DILocation(line: 1968, column: 9, scope: !2694)
!2699 = !DILocation(line: 1969, column: 20, scope: !2694)
!2700 = !DILocation(line: 1969, column: 23, scope: !2694)
!2701 = !DILocation(line: 1969, column: 27, scope: !2694)
!2702 = !DILocation(line: 1969, column: 34, scope: !2694)
!2703 = !DILocation(line: 1969, column: 40, scope: !2694)
!2704 = !DILocation(line: 1969, column: 46, scope: !2694)
!2705 = !DILocation(line: 1969, column: 50, scope: !2694)
!2706 = !DILocation(line: 1969, column: 53, scope: !2694)
!2707 = !DILocation(line: 1969, column: 9, scope: !2694)
!2708 = !DILocation(line: 1972, column: 5, scope: !2694)
!2709 = !DILocation(line: 1974, column: 12, scope: !2445)
!2710 = !DILocation(line: 1974, column: 5, scope: !2445)
!2711 = !DILocation(line: 1975, column: 1, scope: !2445)
!2712 = distinct !DISubprogram(name: "wmavoice_decode_end", scope: !911, file: !911, line: 1977, type: !1036, isLocal: true, isDefinition: true, scopeLine: 1978, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!2713 = !DILocalVariable(name: "ctx", arg: 1, scope: !2712, file: !911, line: 1977, type: !1038)
!2714 = !DILocation(line: 1977, column: 70, scope: !2712)
!2715 = !DILocalVariable(name: "s", scope: !2712, file: !911, line: 1979, type: !1812)
!2716 = !DILocation(line: 1979, column: 22, scope: !2712)
!2717 = !DILocation(line: 1979, column: 26, scope: !2712)
!2718 = !DILocation(line: 1979, column: 31, scope: !2712)
!2719 = !DILocation(line: 1981, column: 9, scope: !2720)
!2720 = distinct !DILexicalBlock(scope: !2712, file: !911, line: 1981, column: 9)
!2721 = !DILocation(line: 1981, column: 12, scope: !2720)
!2722 = !DILocation(line: 1981, column: 9, scope: !2712)
!2723 = !DILocation(line: 1982, column: 22, scope: !2724)
!2724 = distinct !DILexicalBlock(scope: !2720, file: !911, line: 1981, column: 20)
!2725 = !DILocation(line: 1982, column: 25, scope: !2724)
!2726 = !DILocation(line: 1982, column: 9, scope: !2724)
!2727 = !DILocation(line: 1983, column: 22, scope: !2724)
!2728 = !DILocation(line: 1983, column: 25, scope: !2724)
!2729 = !DILocation(line: 1983, column: 9, scope: !2724)
!2730 = !DILocation(line: 1984, column: 21, scope: !2724)
!2731 = !DILocation(line: 1984, column: 24, scope: !2724)
!2732 = !DILocation(line: 1984, column: 9, scope: !2724)
!2733 = !DILocation(line: 1985, column: 21, scope: !2724)
!2734 = !DILocation(line: 1985, column: 24, scope: !2724)
!2735 = !DILocation(line: 1985, column: 9, scope: !2724)
!2736 = !DILocation(line: 1986, column: 5, scope: !2724)
!2737 = !DILocation(line: 1988, column: 5, scope: !2712)
!2738 = distinct !DISubprogram(name: "wmavoice_flush", scope: !911, file: !911, line: 336, type: !1657, isLocal: true, isDefinition: true, scopeLine: 337, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!2739 = !DILocalVariable(name: "ctx", arg: 1, scope: !2738, file: !911, line: 336, type: !1038)
!2740 = !DILocation(line: 336, column: 66, scope: !2738)
!2741 = !DILocalVariable(name: "s", scope: !2738, file: !911, line: 338, type: !1812)
!2742 = !DILocation(line: 338, column: 22, scope: !2738)
!2743 = !DILocation(line: 338, column: 26, scope: !2738)
!2744 = !DILocation(line: 338, column: 31, scope: !2738)
!2745 = !DILocalVariable(name: "n", scope: !2738, file: !911, line: 339, type: !923)
!2746 = !DILocation(line: 339, column: 9, scope: !2738)
!2747 = !DILocation(line: 341, column: 5, scope: !2738)
!2748 = !DILocation(line: 341, column: 8, scope: !2738)
!2749 = !DILocation(line: 341, column: 23, scope: !2738)
!2750 = !DILocation(line: 342, column: 5, scope: !2738)
!2751 = !DILocation(line: 342, column: 8, scope: !2738)
!2752 = !DILocation(line: 342, column: 26, scope: !2738)
!2753 = !DILocation(line: 343, column: 5, scope: !2738)
!2754 = !DILocation(line: 343, column: 8, scope: !2738)
!2755 = !DILocation(line: 343, column: 23, scope: !2738)
!2756 = !DILocation(line: 344, column: 12, scope: !2757)
!2757 = distinct !DILexicalBlock(scope: !2738, file: !911, line: 344, column: 5)
!2758 = !DILocation(line: 344, column: 10, scope: !2757)
!2759 = !DILocation(line: 344, column: 17, scope: !2760)
!2760 = !DILexicalBlockFile(scope: !2761, file: !911, discriminator: 1)
!2761 = distinct !DILexicalBlock(scope: !2757, file: !911, line: 344, column: 5)
!2762 = !DILocation(line: 344, column: 21, scope: !2760)
!2763 = !DILocation(line: 344, column: 24, scope: !2760)
!2764 = !DILocation(line: 344, column: 19, scope: !2760)
!2765 = !DILocation(line: 344, column: 5, scope: !2760)
!2766 = !DILocation(line: 345, column: 34, scope: !2761)
!2767 = !DILocation(line: 345, column: 36, scope: !2761)
!2768 = !DILocation(line: 345, column: 31, scope: !2761)
!2769 = !DILocation(line: 345, column: 46, scope: !2761)
!2770 = !DILocation(line: 345, column: 49, scope: !2761)
!2771 = !DILocation(line: 345, column: 54, scope: !2761)
!2772 = !DILocation(line: 345, column: 43, scope: !2761)
!2773 = !DILocation(line: 345, column: 22, scope: !2761)
!2774 = !DILocation(line: 345, column: 9, scope: !2761)
!2775 = !DILocation(line: 345, column: 12, scope: !2761)
!2776 = !DILocation(line: 345, column: 25, scope: !2761)
!2777 = !DILocation(line: 344, column: 31, scope: !2778)
!2778 = !DILexicalBlockFile(scope: !2761, file: !911, discriminator: 2)
!2779 = !DILocation(line: 344, column: 5, scope: !2778)
!2780 = distinct !{!2780, !2781}
!2781 = !DILocation(line: 344, column: 5, scope: !2738)
!2782 = !DILocation(line: 346, column: 12, scope: !2738)
!2783 = !DILocation(line: 346, column: 15, scope: !2738)
!2784 = !DILocation(line: 346, column: 5, scope: !2738)
!2785 = !DILocation(line: 348, column: 12, scope: !2738)
!2786 = !DILocation(line: 348, column: 15, scope: !2738)
!2787 = !DILocation(line: 348, column: 5, scope: !2738)
!2788 = !DILocation(line: 350, column: 12, scope: !2738)
!2789 = !DILocation(line: 350, column: 15, scope: !2738)
!2790 = !DILocation(line: 350, column: 5, scope: !2738)
!2791 = !DILocation(line: 353, column: 9, scope: !2792)
!2792 = distinct !DILexicalBlock(scope: !2738, file: !911, line: 353, column: 9)
!2793 = !DILocation(line: 353, column: 12, scope: !2792)
!2794 = !DILocation(line: 353, column: 9, scope: !2738)
!2795 = !DILocation(line: 354, column: 46, scope: !2796)
!2796 = distinct !DILexicalBlock(scope: !2792, file: !911, line: 353, column: 20)
!2797 = !DILocation(line: 354, column: 49, scope: !2796)
!2798 = !DILocation(line: 354, column: 44, scope: !2796)
!2799 = !DILocation(line: 354, column: 17, scope: !2796)
!2800 = !DILocation(line: 354, column: 20, scope: !2796)
!2801 = !DILocation(line: 354, column: 9, scope: !2796)
!2802 = !DILocation(line: 355, column: 51, scope: !2796)
!2803 = !DILocation(line: 355, column: 54, scope: !2796)
!2804 = !DILocation(line: 355, column: 49, scope: !2796)
!2805 = !DILocation(line: 356, column: 16, scope: !2796)
!2806 = !DILocation(line: 356, column: 19, scope: !2796)
!2807 = !DILocation(line: 356, column: 9, scope: !2796)
!2808 = !DILocation(line: 358, column: 16, scope: !2796)
!2809 = !DILocation(line: 358, column: 19, scope: !2796)
!2810 = !DILocation(line: 358, column: 9, scope: !2796)
!2811 = !DILocation(line: 359, column: 42, scope: !2796)
!2812 = !DILocation(line: 359, column: 45, scope: !2796)
!2813 = !DILocation(line: 359, column: 40, scope: !2796)
!2814 = !DILocation(line: 360, column: 16, scope: !2796)
!2815 = !DILocation(line: 360, column: 19, scope: !2796)
!2816 = !DILocation(line: 360, column: 9, scope: !2796)
!2817 = !DILocation(line: 361, column: 5, scope: !2796)
!2818 = !DILocation(line: 362, column: 1, scope: !2738)
!2819 = !DILocation(line: 332, column: 5, scope: !1672)
!2820 = distinct !{!2820, !2819}
!2821 = !DILocation(line: 332, column: 65, scope: !2822)
!2822 = !DILexicalBlockFile(scope: !2823, file: !911, discriminator: 1)
!2823 = distinct !DILexicalBlock(scope: !1672, file: !911, line: 332, column: 8)
!2824 = !DILocation(line: 332, column: 109, scope: !2822)
!2825 = !DILocation(line: 332, column: 116, scope: !2822)
!2826 = !DILocation(line: 332, column: 16, scope: !2822)
!2827 = !DILocation(line: 334, column: 1, scope: !1672)
!2828 = distinct !DISubprogram(name: "init_get_bits", scope: !1717, file: !1717, line: 615, type: !2829, isLocal: true, isDefinition: true, scopeLine: 617, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!2829 = !DISubroutineType(types: !2830)
!2830 = !{!923, !1715, !1477, !923}
!2831 = !DILocalVariable(name: "s", arg: 1, scope: !2828, file: !1717, line: 615, type: !1715)
!2832 = !DILocation(line: 615, column: 48, scope: !2828)
!2833 = !DILocalVariable(name: "buffer", arg: 2, scope: !2828, file: !1717, line: 615, type: !1477)
!2834 = !DILocation(line: 615, column: 66, scope: !2828)
!2835 = !DILocalVariable(name: "bit_size", arg: 3, scope: !2828, file: !1717, line: 616, type: !923)
!2836 = !DILocation(line: 616, column: 37, scope: !2828)
!2837 = !DILocalVariable(name: "buffer_size", scope: !2828, file: !1717, line: 618, type: !923)
!2838 = !DILocation(line: 618, column: 9, scope: !2828)
!2839 = !DILocalVariable(name: "ret", scope: !2828, file: !1717, line: 619, type: !923)
!2840 = !DILocation(line: 619, column: 9, scope: !2828)
!2841 = !DILocation(line: 621, column: 9, scope: !2842)
!2842 = distinct !DILexicalBlock(scope: !2828, file: !1717, line: 621, column: 9)
!2843 = !DILocation(line: 621, column: 18, scope: !2842)
!2844 = !DILocation(line: 621, column: 64, scope: !2842)
!2845 = !DILocation(line: 621, column: 67, scope: !2846)
!2846 = !DILexicalBlockFile(scope: !2842, file: !1717, discriminator: 1)
!2847 = !DILocation(line: 621, column: 76, scope: !2846)
!2848 = !DILocation(line: 621, column: 80, scope: !2846)
!2849 = !DILocation(line: 621, column: 84, scope: !2850)
!2850 = !DILexicalBlockFile(scope: !2842, file: !1717, discriminator: 2)
!2851 = !DILocation(line: 621, column: 9, scope: !2850)
!2852 = !DILocation(line: 622, column: 18, scope: !2853)
!2853 = distinct !DILexicalBlock(scope: !2842, file: !1717, line: 621, column: 92)
!2854 = !DILocation(line: 623, column: 16, scope: !2853)
!2855 = !DILocation(line: 624, column: 13, scope: !2853)
!2856 = !DILocation(line: 625, column: 5, scope: !2853)
!2857 = !DILocation(line: 627, column: 20, scope: !2828)
!2858 = !DILocation(line: 627, column: 29, scope: !2828)
!2859 = !DILocation(line: 627, column: 34, scope: !2828)
!2860 = !DILocation(line: 627, column: 17, scope: !2828)
!2861 = !DILocation(line: 629, column: 17, scope: !2828)
!2862 = !DILocation(line: 629, column: 5, scope: !2828)
!2863 = !DILocation(line: 629, column: 8, scope: !2828)
!2864 = !DILocation(line: 629, column: 15, scope: !2828)
!2865 = !DILocation(line: 630, column: 23, scope: !2828)
!2866 = !DILocation(line: 630, column: 5, scope: !2828)
!2867 = !DILocation(line: 630, column: 8, scope: !2828)
!2868 = !DILocation(line: 630, column: 21, scope: !2828)
!2869 = !DILocation(line: 631, column: 29, scope: !2828)
!2870 = !DILocation(line: 631, column: 38, scope: !2828)
!2871 = !DILocation(line: 631, column: 5, scope: !2828)
!2872 = !DILocation(line: 631, column: 8, scope: !2828)
!2873 = !DILocation(line: 631, column: 27, scope: !2828)
!2874 = !DILocation(line: 632, column: 21, scope: !2828)
!2875 = !DILocation(line: 632, column: 30, scope: !2828)
!2876 = !DILocation(line: 632, column: 28, scope: !2828)
!2877 = !DILocation(line: 632, column: 5, scope: !2828)
!2878 = !DILocation(line: 632, column: 8, scope: !2828)
!2879 = !DILocation(line: 632, column: 19, scope: !2828)
!2880 = !DILocation(line: 633, column: 5, scope: !2828)
!2881 = !DILocation(line: 633, column: 8, scope: !2828)
!2882 = !DILocation(line: 633, column: 14, scope: !2828)
!2883 = !DILocation(line: 639, column: 12, scope: !2828)
!2884 = !DILocation(line: 639, column: 5, scope: !2828)
!2885 = distinct !DISubprogram(name: "decode_vbmtree", scope: !911, file: !911, line: 300, type: !2886, isLocal: true, isDefinition: true, scopeLine: 301, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!2886 = !DISubroutineType(types: !2887)
!2887 = !{!923, !1715, !1141}
!2888 = !DILocalVariable(name: "gb", arg: 1, scope: !2885, file: !911, line: 300, type: !1715)
!2889 = !DILocation(line: 300, column: 64, scope: !2885)
!2890 = !DILocalVariable(name: "vbm_tree", arg: 2, scope: !2885, file: !911, line: 300, type: !1141)
!2891 = !DILocation(line: 300, column: 75, scope: !2885)
!2892 = !DILocalVariable(name: "cntr", scope: !2885, file: !911, line: 302, type: !1069)
!2893 = !DILocation(line: 302, column: 9, scope: !2885)
!2894 = !DILocalVariable(name: "n", scope: !2885, file: !911, line: 302, type: !923)
!2895 = !DILocation(line: 302, column: 26, scope: !2885)
!2896 = !DILocalVariable(name: "res", scope: !2885, file: !911, line: 302, type: !923)
!2897 = !DILocation(line: 302, column: 29, scope: !2885)
!2898 = !DILocation(line: 304, column: 12, scope: !2885)
!2899 = !DILocation(line: 304, column: 5, scope: !2885)
!2900 = !DILocation(line: 305, column: 12, scope: !2901)
!2901 = distinct !DILexicalBlock(scope: !2885, file: !911, line: 305, column: 5)
!2902 = !DILocation(line: 305, column: 10, scope: !2901)
!2903 = !DILocation(line: 305, column: 17, scope: !2904)
!2904 = !DILexicalBlockFile(scope: !2905, file: !911, discriminator: 1)
!2905 = distinct !DILexicalBlock(scope: !2901, file: !911, line: 305, column: 5)
!2906 = !DILocation(line: 305, column: 19, scope: !2904)
!2907 = !DILocation(line: 305, column: 5, scope: !2904)
!2908 = !DILocation(line: 306, column: 24, scope: !2909)
!2909 = distinct !DILexicalBlock(scope: !2905, file: !911, line: 305, column: 30)
!2910 = !DILocation(line: 306, column: 15, scope: !2909)
!2911 = !DILocation(line: 306, column: 13, scope: !2909)
!2912 = !DILocation(line: 307, column: 18, scope: !2913)
!2913 = distinct !DILexicalBlock(scope: !2909, file: !911, line: 307, column: 13)
!2914 = !DILocation(line: 307, column: 13, scope: !2913)
!2915 = !DILocation(line: 307, column: 23, scope: !2913)
!2916 = !DILocation(line: 307, column: 13, scope: !2909)
!2917 = !DILocation(line: 308, column: 13, scope: !2913)
!2918 = !DILocation(line: 309, column: 43, scope: !2909)
!2919 = !DILocation(line: 309, column: 18, scope: !2909)
!2920 = !DILocation(line: 309, column: 22, scope: !2909)
!2921 = !DILocation(line: 309, column: 33, scope: !2909)
!2922 = !DILocation(line: 309, column: 28, scope: !2909)
!2923 = !DILocation(line: 309, column: 37, scope: !2909)
!2924 = !DILocation(line: 309, column: 26, scope: !2909)
!2925 = !DILocation(line: 309, column: 9, scope: !2909)
!2926 = !DILocation(line: 309, column: 41, scope: !2909)
!2927 = !DILocation(line: 310, column: 5, scope: !2909)
!2928 = !DILocation(line: 305, column: 26, scope: !2929)
!2929 = !DILexicalBlockFile(scope: !2905, file: !911, discriminator: 2)
!2930 = !DILocation(line: 305, column: 5, scope: !2929)
!2931 = distinct !{!2931, !2932}
!2932 = !DILocation(line: 305, column: 5, scope: !2885)
!2933 = !DILocation(line: 311, column: 5, scope: !2885)
!2934 = !DILocation(line: 312, column: 1, scope: !2885)
!2935 = distinct !DISubprogram(name: "get_bits", scope: !1717, file: !1717, line: 381, type: !2936, isLocal: true, isDefinition: true, scopeLine: 382, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!2936 = !DISubroutineType(types: !2937)
!2937 = !{!924, !1715, !923}
!2938 = !DILocalVariable(name: "x", arg: 1, scope: !2939, file: !2940, line: 66, type: !931)
!2939 = distinct !DISubprogram(name: "av_bswap32", scope: !2940, file: !2940, line: 66, type: !2941, isLocal: true, isDefinition: true, scopeLine: 67, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!2940 = !DIFile(filename: "./libavutil/bswap.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!2941 = !DISubroutineType(types: !2942)
!2942 = !{!931, !931}
!2943 = !DILocation(line: 66, column: 98, scope: !2939, inlinedAt: !2944)
!2944 = distinct !DILocation(line: 401, column: 16, scope: !2935)
!2945 = !DILocalVariable(name: "s", arg: 1, scope: !2935, file: !1717, line: 381, type: !1715)
!2946 = !DILocation(line: 381, column: 52, scope: !2935)
!2947 = !DILocalVariable(name: "n", arg: 2, scope: !2935, file: !1717, line: 381, type: !923)
!2948 = !DILocation(line: 381, column: 59, scope: !2935)
!2949 = !DILocalVariable(name: "tmp", scope: !2935, file: !1717, line: 383, type: !923)
!2950 = !DILocation(line: 383, column: 18, scope: !2935)
!2951 = !DILocalVariable(name: "re_index", scope: !2935, file: !1717, line: 399, type: !924)
!2952 = !DILocation(line: 399, column: 18, scope: !2935)
!2953 = !DILocation(line: 399, column: 30, scope: !2935)
!2954 = !DILocation(line: 399, column: 34, scope: !2935)
!2955 = !DILocalVariable(name: "re_cache", scope: !2935, file: !1717, line: 399, type: !924)
!2956 = !DILocation(line: 399, column: 78, scope: !2935)
!2957 = !DILocalVariable(name: "re_size_plus8", scope: !2935, file: !1717, line: 399, type: !924)
!2958 = !DILocation(line: 399, column: 101, scope: !2935)
!2959 = !DILocation(line: 399, column: 118, scope: !2935)
!2960 = !DILocation(line: 399, column: 122, scope: !2935)
!2961 = !DILocation(line: 401, column: 60, scope: !2935)
!2962 = !DILocation(line: 401, column: 64, scope: !2935)
!2963 = !DILocation(line: 401, column: 74, scope: !2935)
!2964 = !DILocation(line: 401, column: 83, scope: !2935)
!2965 = !DILocation(line: 401, column: 71, scope: !2935)
!2966 = !DILocation(line: 401, column: 92, scope: !2935)
!2967 = !DILocation(line: 401, column: 16, scope: !2935)
!2968 = !DILocation(line: 68, column: 16, scope: !2939, inlinedAt: !2944)
!2969 = !DILocation(line: 68, column: 19, scope: !2939, inlinedAt: !2944)
!2970 = !DILocation(line: 68, column: 24, scope: !2939, inlinedAt: !2944)
!2971 = !DILocation(line: 68, column: 38, scope: !2939, inlinedAt: !2944)
!2972 = !DILocation(line: 68, column: 41, scope: !2939, inlinedAt: !2944)
!2973 = !DILocation(line: 68, column: 46, scope: !2939, inlinedAt: !2944)
!2974 = !DILocation(line: 68, column: 34, scope: !2939, inlinedAt: !2944)
!2975 = !DILocation(line: 68, column: 57, scope: !2939, inlinedAt: !2944)
!2976 = !DILocation(line: 68, column: 69, scope: !2939, inlinedAt: !2944)
!2977 = !DILocation(line: 68, column: 72, scope: !2939, inlinedAt: !2944)
!2978 = !DILocation(line: 68, column: 79, scope: !2939, inlinedAt: !2944)
!2979 = !DILocation(line: 68, column: 84, scope: !2939, inlinedAt: !2944)
!2980 = !DILocation(line: 68, column: 99, scope: !2939, inlinedAt: !2944)
!2981 = !DILocation(line: 68, column: 102, scope: !2939, inlinedAt: !2944)
!2982 = !DILocation(line: 68, column: 109, scope: !2939, inlinedAt: !2944)
!2983 = !DILocation(line: 68, column: 114, scope: !2939, inlinedAt: !2944)
!2984 = !DILocation(line: 68, column: 94, scope: !2939, inlinedAt: !2944)
!2985 = !DILocation(line: 68, column: 63, scope: !2939, inlinedAt: !2944)
!2986 = !DILocation(line: 401, column: 100, scope: !2935)
!2987 = !DILocation(line: 401, column: 109, scope: !2935)
!2988 = !DILocation(line: 401, column: 96, scope: !2935)
!2989 = !DILocation(line: 401, column: 14, scope: !2935)
!2990 = !DILocation(line: 402, column: 21, scope: !2935)
!2991 = !DILocation(line: 402, column: 31, scope: !2935)
!2992 = !DILocation(line: 402, column: 11, scope: !2935)
!2993 = !DILocation(line: 402, column: 9, scope: !2935)
!2994 = !DILocation(line: 403, column: 18, scope: !2935)
!2995 = !DILocation(line: 403, column: 36, scope: !2935)
!2996 = !DILocation(line: 403, column: 48, scope: !2935)
!2997 = !DILocation(line: 403, column: 45, scope: !2935)
!2998 = !DILocation(line: 403, column: 33, scope: !2935)
!2999 = !DILocation(line: 403, column: 17, scope: !2935)
!3000 = !DILocation(line: 403, column: 55, scope: !3001)
!3001 = !DILexicalBlockFile(scope: !2935, file: !1717, discriminator: 1)
!3002 = !DILocation(line: 403, column: 67, scope: !3001)
!3003 = !DILocation(line: 403, column: 64, scope: !3001)
!3004 = !DILocation(line: 403, column: 17, scope: !3001)
!3005 = !DILocation(line: 403, column: 74, scope: !3006)
!3006 = !DILexicalBlockFile(scope: !2935, file: !1717, discriminator: 2)
!3007 = !DILocation(line: 403, column: 17, scope: !3006)
!3008 = !DILocation(line: 403, column: 17, scope: !3009)
!3009 = !DILexicalBlockFile(scope: !2935, file: !1717, discriminator: 3)
!3010 = !DILocation(line: 403, column: 14, scope: !3009)
!3011 = !DILocation(line: 404, column: 18, scope: !2935)
!3012 = !DILocation(line: 404, column: 6, scope: !2935)
!3013 = !DILocation(line: 404, column: 10, scope: !2935)
!3014 = !DILocation(line: 404, column: 16, scope: !2935)
!3015 = !DILocation(line: 406, column: 12, scope: !2935)
!3016 = !DILocation(line: 406, column: 5, scope: !2935)
!3017 = distinct !DISubprogram(name: "NEG_USR32", scope: !3018, file: !3018, line: 124, type: !3019, isLocal: true, isDefinition: true, scopeLine: 124, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3018 = !DIFile(filename: "libavcodec/x86/mathops.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!3019 = !DISubroutineType(types: !3020)
!3020 = !{!931, !931, !1142}
!3021 = !DILocalVariable(name: "a", arg: 1, scope: !3017, file: !3018, line: 124, type: !931)
!3022 = !DILocation(line: 124, column: 43, scope: !3017)
!3023 = !DILocalVariable(name: "s", arg: 2, scope: !3017, file: !3018, line: 124, type: !1142)
!3024 = !DILocation(line: 124, column: 53, scope: !3017)
!3025 = !DILocation(line: 125, column: 5, scope: !3017)
!3026 = !DILocation(line: 127, column: 29, scope: !3017)
!3027 = !DILocation(line: 127, column: 28, scope: !3017)
!3028 = !DILocation(line: 127, column: 18, scope: !3017)
!3029 = !{i32 211986, i32 212000}
!3030 = !DILocation(line: 129, column: 12, scope: !3017)
!3031 = !DILocation(line: 129, column: 5, scope: !3017)
!3032 = distinct !DISubprogram(name: "init_get_bits8", scope: !1717, file: !1717, line: 650, type: !2829, isLocal: true, isDefinition: true, scopeLine: 652, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3033 = !DILocalVariable(name: "s", arg: 1, scope: !3032, file: !1717, line: 650, type: !1715)
!3034 = !DILocation(line: 650, column: 49, scope: !3032)
!3035 = !DILocalVariable(name: "buffer", arg: 2, scope: !3032, file: !1717, line: 650, type: !1477)
!3036 = !DILocation(line: 650, column: 67, scope: !3032)
!3037 = !DILocalVariable(name: "byte_size", arg: 3, scope: !3032, file: !1717, line: 651, type: !923)
!3038 = !DILocation(line: 651, column: 38, scope: !3032)
!3039 = !DILocation(line: 653, column: 9, scope: !3040)
!3040 = distinct !DILexicalBlock(scope: !3032, file: !1717, line: 653, column: 9)
!3041 = !DILocation(line: 653, column: 19, scope: !3040)
!3042 = !DILocation(line: 653, column: 36, scope: !3040)
!3043 = !DILocation(line: 653, column: 39, scope: !3044)
!3044 = !DILexicalBlockFile(scope: !3040, file: !1717, discriminator: 1)
!3045 = !DILocation(line: 653, column: 49, scope: !3044)
!3046 = !DILocation(line: 653, column: 9, scope: !3044)
!3047 = !DILocation(line: 654, column: 19, scope: !3040)
!3048 = !DILocation(line: 654, column: 9, scope: !3040)
!3049 = !DILocation(line: 655, column: 26, scope: !3032)
!3050 = !DILocation(line: 655, column: 29, scope: !3032)
!3051 = !DILocation(line: 655, column: 37, scope: !3032)
!3052 = !DILocation(line: 655, column: 47, scope: !3032)
!3053 = !DILocation(line: 655, column: 12, scope: !3032)
!3054 = !DILocation(line: 655, column: 5, scope: !3032)
!3055 = distinct !DISubprogram(name: "parse_packet_header", scope: !911, file: !911, line: 1835, type: !3056, isLocal: true, isDefinition: true, scopeLine: 1836, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3056 = !DISubroutineType(types: !3057)
!3057 = !{!923, !1812}
!3058 = !DILocalVariable(name: "s", arg: 1, scope: !3055, file: !911, line: 1835, type: !1812)
!3059 = !DILocation(line: 1835, column: 49, scope: !3055)
!3060 = !DILocalVariable(name: "gb", scope: !3055, file: !911, line: 1837, type: !1715)
!3061 = !DILocation(line: 1837, column: 20, scope: !3055)
!3062 = !DILocation(line: 1837, column: 26, scope: !3055)
!3063 = !DILocation(line: 1837, column: 29, scope: !3055)
!3064 = !DILocalVariable(name: "res", scope: !3055, file: !911, line: 1838, type: !924)
!3065 = !DILocation(line: 1838, column: 18, scope: !3055)
!3066 = !DILocalVariable(name: "n_superframes", scope: !3055, file: !911, line: 1838, type: !924)
!3067 = !DILocation(line: 1838, column: 23, scope: !3055)
!3068 = !DILocation(line: 1840, column: 15, scope: !3055)
!3069 = !DILocation(line: 1840, column: 5, scope: !3055)
!3070 = !DILocation(line: 1841, column: 38, scope: !3055)
!3071 = !DILocation(line: 1841, column: 28, scope: !3055)
!3072 = !DILocation(line: 1841, column: 5, scope: !3055)
!3073 = !DILocation(line: 1841, column: 8, scope: !3055)
!3074 = !DILocation(line: 1841, column: 26, scope: !3055)
!3075 = !DILocation(line: 1842, column: 5, scope: !3055)
!3076 = distinct !{!3076, !3075}
!3077 = !DILocation(line: 1843, column: 24, scope: !3078)
!3078 = distinct !DILexicalBlock(scope: !3055, file: !911, line: 1842, column: 8)
!3079 = !DILocation(line: 1843, column: 15, scope: !3078)
!3080 = !DILocation(line: 1843, column: 13, scope: !3078)
!3081 = !DILocation(line: 1845, column: 26, scope: !3078)
!3082 = !DILocation(line: 1845, column: 23, scope: !3078)
!3083 = !DILocation(line: 1846, column: 5, scope: !3078)
!3084 = !DILocation(line: 1846, column: 14, scope: !3085)
!3085 = !DILexicalBlockFile(scope: !3055, file: !911, discriminator: 1)
!3086 = !DILocation(line: 1846, column: 18, scope: !3085)
!3087 = !DILocation(line: 1846, column: 5, scope: !3085)
!3088 = !DILocation(line: 1847, column: 35, scope: !3055)
!3089 = !DILocation(line: 1847, column: 39, scope: !3055)
!3090 = !DILocation(line: 1847, column: 42, scope: !3055)
!3091 = !DILocation(line: 1847, column: 26, scope: !3055)
!3092 = !DILocation(line: 1847, column: 5, scope: !3055)
!3093 = !DILocation(line: 1847, column: 8, scope: !3055)
!3094 = !DILocation(line: 1847, column: 24, scope: !3055)
!3095 = !DILocation(line: 1849, column: 26, scope: !3055)
!3096 = !DILocation(line: 1849, column: 12, scope: !3055)
!3097 = !DILocation(line: 1849, column: 30, scope: !3055)
!3098 = !DILocation(line: 1849, column: 37, scope: !3085)
!3099 = !DILocation(line: 1849, column: 12, scope: !3085)
!3100 = !DILocation(line: 1849, column: 12, scope: !3101)
!3101 = !DILexicalBlockFile(scope: !3055, file: !911, discriminator: 2)
!3102 = !DILocation(line: 1849, column: 12, scope: !3103)
!3103 = !DILexicalBlockFile(scope: !3055, file: !911, discriminator: 3)
!3104 = !DILocation(line: 1849, column: 5, scope: !3103)
!3105 = distinct !DISubprogram(name: "get_bits_count", scope: !1717, file: !1717, line: 219, type: !3106, isLocal: true, isDefinition: true, scopeLine: 220, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3106 = !DISubroutineType(types: !3107)
!3107 = !{!923, !3108}
!3108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3109, size: 64, align: 64)
!3109 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1716)
!3110 = !DILocalVariable(name: "s", arg: 1, scope: !3105, file: !1717, line: 219, type: !3108)
!3111 = !DILocation(line: 219, column: 55, scope: !3105)
!3112 = !DILocation(line: 224, column: 12, scope: !3105)
!3113 = !DILocation(line: 224, column: 15, scope: !3105)
!3114 = !DILocation(line: 224, column: 5, scope: !3105)
!3115 = distinct !DISubprogram(name: "copy_bits", scope: !911, file: !911, line: 1867, type: !3116, isLocal: true, isDefinition: true, scopeLine: 1870, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3116 = !DISubroutineType(types: !3117)
!3117 = !{null, !3118, !1477, !923, !1715, !923}
!3118 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1848, size: 64, align: 64)
!3119 = !DILocalVariable(name: "pb", arg: 1, scope: !3115, file: !911, line: 1867, type: !3118)
!3120 = !DILocation(line: 1867, column: 38, scope: !3115)
!3121 = !DILocalVariable(name: "data", arg: 2, scope: !3115, file: !911, line: 1868, type: !1477)
!3122 = !DILocation(line: 1868, column: 38, scope: !3115)
!3123 = !DILocalVariable(name: "size", arg: 3, scope: !3115, file: !911, line: 1868, type: !923)
!3124 = !DILocation(line: 1868, column: 48, scope: !3115)
!3125 = !DILocalVariable(name: "gb", arg: 4, scope: !3115, file: !911, line: 1869, type: !1715)
!3126 = !DILocation(line: 1869, column: 38, scope: !3115)
!3127 = !DILocalVariable(name: "nbits", arg: 5, scope: !3115, file: !911, line: 1869, type: !923)
!3128 = !DILocation(line: 1869, column: 46, scope: !3115)
!3129 = !DILocalVariable(name: "rmn_bytes", scope: !3115, file: !911, line: 1871, type: !923)
!3130 = !DILocation(line: 1871, column: 9, scope: !3115)
!3131 = !DILocalVariable(name: "rmn_bits", scope: !3115, file: !911, line: 1871, type: !923)
!3132 = !DILocation(line: 1871, column: 20, scope: !3115)
!3133 = !DILocation(line: 1873, column: 42, scope: !3115)
!3134 = !DILocation(line: 1873, column: 28, scope: !3115)
!3135 = !DILocation(line: 1873, column: 26, scope: !3115)
!3136 = !DILocation(line: 1873, column: 14, scope: !3115)
!3137 = !DILocation(line: 1874, column: 9, scope: !3138)
!3138 = distinct !DILexicalBlock(scope: !3115, file: !911, line: 1874, column: 9)
!3139 = !DILocation(line: 1874, column: 20, scope: !3138)
!3140 = !DILocation(line: 1874, column: 18, scope: !3138)
!3141 = !DILocation(line: 1874, column: 9, scope: !3115)
!3142 = !DILocation(line: 1875, column: 9, scope: !3138)
!3143 = !DILocation(line: 1876, column: 9, scope: !3144)
!3144 = distinct !DILexicalBlock(scope: !3115, file: !911, line: 1876, column: 9)
!3145 = !DILocation(line: 1876, column: 17, scope: !3144)
!3146 = !DILocation(line: 1876, column: 21, scope: !3144)
!3147 = !DILocation(line: 1876, column: 51, scope: !3144)
!3148 = !DILocation(line: 1876, column: 36, scope: !3144)
!3149 = !DILocation(line: 1876, column: 34, scope: !3144)
!3150 = !DILocation(line: 1876, column: 15, scope: !3144)
!3151 = !DILocation(line: 1876, column: 9, scope: !3115)
!3152 = !DILocation(line: 1877, column: 9, scope: !3144)
!3153 = !DILocation(line: 1878, column: 14, scope: !3115)
!3154 = !DILocation(line: 1878, column: 30, scope: !3115)
!3155 = !DILocation(line: 1879, column: 23, scope: !3156)
!3156 = distinct !DILexicalBlock(scope: !3115, file: !911, line: 1879, column: 9)
!3157 = !DILocation(line: 1879, column: 36, scope: !3156)
!3158 = !DILocation(line: 1879, column: 33, scope: !3156)
!3159 = !DILocation(line: 1879, column: 22, scope: !3156)
!3160 = !DILocation(line: 1879, column: 46, scope: !3161)
!3161 = !DILexicalBlockFile(scope: !3156, file: !911, discriminator: 1)
!3162 = !DILocation(line: 1879, column: 22, scope: !3161)
!3163 = !DILocation(line: 1879, column: 56, scope: !3164)
!3164 = !DILexicalBlockFile(scope: !3156, file: !911, discriminator: 2)
!3165 = !DILocation(line: 1879, column: 22, scope: !3164)
!3166 = !DILocation(line: 1879, column: 22, scope: !3167)
!3167 = !DILexicalBlockFile(scope: !3156, file: !911, discriminator: 3)
!3168 = !DILocation(line: 1879, column: 19, scope: !3167)
!3169 = !DILocation(line: 1879, column: 68, scope: !3167)
!3170 = !DILocation(line: 1879, column: 9, scope: !3167)
!3171 = !DILocation(line: 1880, column: 18, scope: !3156)
!3172 = !DILocation(line: 1880, column: 22, scope: !3156)
!3173 = !DILocation(line: 1880, column: 41, scope: !3156)
!3174 = !DILocation(line: 1880, column: 45, scope: !3156)
!3175 = !DILocation(line: 1880, column: 32, scope: !3156)
!3176 = !DILocation(line: 1880, column: 9, scope: !3161)
!3177 = !DILocation(line: 1880, column: 9, scope: !3156)
!3178 = !DILocation(line: 1881, column: 22, scope: !3115)
!3179 = !DILocation(line: 1881, column: 26, scope: !3115)
!3180 = !DILocation(line: 1881, column: 33, scope: !3115)
!3181 = !DILocation(line: 1881, column: 31, scope: !3115)
!3182 = !DILocation(line: 1881, column: 40, scope: !3115)
!3183 = !DILocation(line: 1881, column: 38, scope: !3115)
!3184 = !DILocation(line: 1882, column: 20, scope: !3115)
!3185 = !DILocation(line: 1882, column: 28, scope: !3115)
!3186 = !DILocation(line: 1882, column: 26, scope: !3115)
!3187 = !DILocation(line: 1882, column: 41, scope: !3115)
!3188 = !DILocation(line: 1882, column: 51, scope: !3115)
!3189 = !DILocation(line: 1882, column: 38, scope: !3115)
!3190 = !DILocation(line: 1882, column: 19, scope: !3115)
!3191 = !DILocation(line: 1882, column: 60, scope: !3192)
!3192 = !DILexicalBlockFile(scope: !3115, file: !911, discriminator: 1)
!3193 = !DILocation(line: 1882, column: 70, scope: !3192)
!3194 = !DILocation(line: 1882, column: 19, scope: !3192)
!3195 = !DILocation(line: 1882, column: 79, scope: !3196)
!3196 = !DILexicalBlockFile(scope: !3115, file: !911, discriminator: 2)
!3197 = !DILocation(line: 1882, column: 87, scope: !3196)
!3198 = !DILocation(line: 1882, column: 85, scope: !3196)
!3199 = !DILocation(line: 1882, column: 19, scope: !3196)
!3200 = !DILocation(line: 1882, column: 19, scope: !3201)
!3201 = !DILexicalBlockFile(scope: !3115, file: !911, discriminator: 3)
!3202 = !DILocation(line: 1881, column: 5, scope: !3192)
!3203 = !DILocation(line: 1883, column: 1, scope: !3115)
!3204 = !DILocation(line: 1883, column: 1, scope: !3192)
!3205 = distinct !DISubprogram(name: "flush_put_bits", scope: !1849, file: !1849, line: 101, type: !3206, isLocal: true, isDefinition: true, scopeLine: 102, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3206 = !DISubroutineType(types: !3207)
!3207 = !{null, !3118}
!3208 = !DILocalVariable(name: "s", arg: 1, scope: !3205, file: !1849, line: 101, type: !3118)
!3209 = !DILocation(line: 101, column: 50, scope: !3205)
!3210 = !DILocation(line: 104, column: 9, scope: !3211)
!3211 = distinct !DILexicalBlock(scope: !3205, file: !1849, line: 104, column: 9)
!3212 = !DILocation(line: 104, column: 12, scope: !3211)
!3213 = !DILocation(line: 104, column: 21, scope: !3211)
!3214 = !DILocation(line: 104, column: 9, scope: !3205)
!3215 = !DILocation(line: 105, column: 24, scope: !3211)
!3216 = !DILocation(line: 105, column: 27, scope: !3211)
!3217 = !DILocation(line: 105, column: 9, scope: !3211)
!3218 = !DILocation(line: 105, column: 12, scope: !3211)
!3219 = !DILocation(line: 105, column: 20, scope: !3211)
!3220 = !DILocation(line: 107, column: 5, scope: !3205)
!3221 = !DILocation(line: 107, column: 12, scope: !3222)
!3222 = !DILexicalBlockFile(scope: !3205, file: !1849, discriminator: 1)
!3223 = !DILocation(line: 107, column: 15, scope: !3222)
!3224 = !DILocation(line: 107, column: 24, scope: !3222)
!3225 = !DILocation(line: 107, column: 5, scope: !3222)
!3226 = !DILocation(line: 108, column: 9, scope: !3227)
!3227 = distinct !DILexicalBlock(scope: !3205, file: !1849, line: 107, column: 30)
!3228 = distinct !{!3228, !3226}
!3229 = !DILocation(line: 108, column: 20, scope: !3230)
!3230 = !DILexicalBlockFile(scope: !3231, file: !1849, discriminator: 1)
!3231 = distinct !DILexicalBlock(scope: !3232, file: !1849, line: 108, column: 18)
!3232 = distinct !DILexicalBlock(scope: !3227, file: !1849, line: 108, column: 12)
!3233 = !DILocation(line: 108, column: 23, scope: !3230)
!3234 = !DILocation(line: 108, column: 33, scope: !3230)
!3235 = !DILocation(line: 108, column: 36, scope: !3230)
!3236 = !DILocation(line: 108, column: 31, scope: !3230)
!3237 = !DILocation(line: 108, column: 18, scope: !3230)
!3238 = !DILocation(line: 108, column: 48, scope: !3239)
!3239 = !DILexicalBlockFile(scope: !3240, file: !1849, discriminator: 2)
!3240 = distinct !DILexicalBlock(scope: !3231, file: !1849, line: 108, column: 46)
!3241 = !DILocation(line: 108, column: 105, scope: !3242)
!3242 = !DILexicalBlockFile(scope: !3239, file: !1849, discriminator: 4)
!3243 = !DILocation(line: 108, column: 105, scope: !3239)
!3244 = !DILocation(line: 108, column: 116, scope: !3245)
!3245 = !DILexicalBlockFile(scope: !3232, file: !1849, discriminator: 3)
!3246 = !DILocation(line: 113, column: 25, scope: !3227)
!3247 = !DILocation(line: 113, column: 28, scope: !3227)
!3248 = !DILocation(line: 113, column: 36, scope: !3227)
!3249 = !DILocation(line: 113, column: 10, scope: !3227)
!3250 = !DILocation(line: 113, column: 13, scope: !3227)
!3251 = !DILocation(line: 113, column: 20, scope: !3227)
!3252 = !DILocation(line: 113, column: 23, scope: !3227)
!3253 = !DILocation(line: 114, column: 9, scope: !3227)
!3254 = !DILocation(line: 114, column: 12, scope: !3227)
!3255 = !DILocation(line: 114, column: 20, scope: !3227)
!3256 = !DILocation(line: 116, column: 9, scope: !3227)
!3257 = !DILocation(line: 116, column: 12, scope: !3227)
!3258 = !DILocation(line: 116, column: 21, scope: !3227)
!3259 = !DILocation(line: 107, column: 5, scope: !3260)
!3260 = !DILexicalBlockFile(scope: !3205, file: !1849, discriminator: 2)
!3261 = distinct !{!3261, !3220}
!3262 = !DILocation(line: 118, column: 5, scope: !3205)
!3263 = !DILocation(line: 118, column: 8, scope: !3205)
!3264 = !DILocation(line: 118, column: 17, scope: !3205)
!3265 = !DILocation(line: 119, column: 5, scope: !3205)
!3266 = !DILocation(line: 119, column: 8, scope: !3205)
!3267 = !DILocation(line: 119, column: 16, scope: !3205)
!3268 = !DILocation(line: 120, column: 1, scope: !3205)
!3269 = distinct !DISubprogram(name: "synth_superframe", scope: !911, file: !911, line: 1699, type: !3270, isLocal: true, isDefinition: true, scopeLine: 1701, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3270 = !DISubroutineType(types: !3271)
!3271 = !{!923, !1038, !1060, !1329}
!3272 = !DILocalVariable(name: "ctx", arg: 1, scope: !3269, file: !911, line: 1699, type: !1038)
!3273 = !DILocation(line: 1699, column: 45, scope: !3269)
!3274 = !DILocalVariable(name: "frame", arg: 2, scope: !3269, file: !911, line: 1699, type: !1060)
!3275 = !DILocation(line: 1699, column: 59, scope: !3269)
!3276 = !DILocalVariable(name: "got_frame_ptr", arg: 3, scope: !3269, file: !911, line: 1700, type: !1329)
!3277 = !DILocation(line: 1700, column: 34, scope: !3269)
!3278 = !DILocalVariable(name: "s", scope: !3269, file: !911, line: 1702, type: !1812)
!3279 = !DILocation(line: 1702, column: 22, scope: !3269)
!3280 = !DILocation(line: 1702, column: 26, scope: !3269)
!3281 = !DILocation(line: 1702, column: 31, scope: !3269)
!3282 = !DILocalVariable(name: "gb", scope: !3269, file: !911, line: 1703, type: !1715)
!3283 = !DILocation(line: 1703, column: 20, scope: !3269)
!3284 = !DILocation(line: 1703, column: 26, scope: !3269)
!3285 = !DILocation(line: 1703, column: 29, scope: !3269)
!3286 = !DILocalVariable(name: "s_gb", scope: !3269, file: !911, line: 1703, type: !1716)
!3287 = !DILocation(line: 1703, column: 33, scope: !3269)
!3288 = !DILocalVariable(name: "n", scope: !3269, file: !911, line: 1704, type: !923)
!3289 = !DILocation(line: 1704, column: 9, scope: !3269)
!3290 = !DILocalVariable(name: "res", scope: !3269, file: !911, line: 1704, type: !923)
!3291 = !DILocation(line: 1704, column: 12, scope: !3269)
!3292 = !DILocalVariable(name: "n_samples", scope: !3269, file: !911, line: 1704, type: !923)
!3293 = !DILocation(line: 1704, column: 17, scope: !3269)
!3294 = !DILocalVariable(name: "lsps", scope: !3269, file: !911, line: 1705, type: !3295)
!3295 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1704, size: 3072, align: 64, elements: !3296)
!3296 = !{!1729, !1706}
!3297 = !DILocation(line: 1705, column: 12, scope: !3269)
!3298 = !DILocalVariable(name: "mean_lsf", scope: !3269, file: !911, line: 1706, type: !1726)
!3299 = !DILocation(line: 1706, column: 19, scope: !3269)
!3300 = !DILocation(line: 1706, column: 30, scope: !3269)
!3301 = !DILocation(line: 1706, column: 33, scope: !3269)
!3302 = !DILocation(line: 1706, column: 38, scope: !3269)
!3303 = !DILocation(line: 1707, column: 29, scope: !3269)
!3304 = !DILocation(line: 1707, column: 32, scope: !3269)
!3305 = !DILocation(line: 1707, column: 9, scope: !3269)
!3306 = !DILocation(line: 1706, column: 30, scope: !3307)
!3307 = !DILexicalBlockFile(scope: !3269, file: !911, discriminator: 1)
!3308 = !DILocation(line: 1707, column: 68, scope: !3307)
!3309 = !DILocation(line: 1707, column: 71, scope: !3307)
!3310 = !DILocation(line: 1707, column: 48, scope: !3307)
!3311 = !DILocation(line: 1706, column: 30, scope: !3312)
!3312 = !DILexicalBlockFile(scope: !3269, file: !911, discriminator: 2)
!3313 = !DILocation(line: 1706, column: 30, scope: !3314)
!3314 = !DILexicalBlockFile(scope: !3269, file: !911, discriminator: 3)
!3315 = !DILocation(line: 1706, column: 19, scope: !3314)
!3316 = !DILocalVariable(name: "excitation", scope: !3269, file: !911, line: 1708, type: !3317)
!3317 = !DICompositeType(tag: DW_TAG_array_type, baseType: !938, size: 29056, align: 32, elements: !3318)
!3318 = !{!3319}
!3319 = !DISubrange(count: 908)
!3320 = !DILocation(line: 1708, column: 11, scope: !3269)
!3321 = !DILocalVariable(name: "synth", scope: !3269, file: !911, line: 1709, type: !3322)
!3322 = !DICompositeType(tag: DW_TAG_array_type, baseType: !938, size: 15872, align: 32, elements: !3323)
!3323 = !{!3324}
!3324 = !DISubrange(count: 496)
!3325 = !DILocation(line: 1709, column: 11, scope: !3269)
!3326 = !DILocalVariable(name: "samples", scope: !3269, file: !911, line: 1710, type: !937)
!3327 = !DILocation(line: 1710, column: 12, scope: !3269)
!3328 = !DILocation(line: 1712, column: 5, scope: !3269)
!3329 = !DILocation(line: 1712, column: 19, scope: !3269)
!3330 = !DILocation(line: 1712, column: 22, scope: !3269)
!3331 = !DILocation(line: 1713, column: 12, scope: !3269)
!3332 = !DILocation(line: 1713, column: 15, scope: !3269)
!3333 = !DILocation(line: 1713, column: 20, scope: !3269)
!3334 = !DILocation(line: 1714, column: 5, scope: !3269)
!3335 = !DILocation(line: 1714, column: 24, scope: !3269)
!3336 = !DILocation(line: 1714, column: 27, scope: !3269)
!3337 = !DILocation(line: 1715, column: 12, scope: !3269)
!3338 = !DILocation(line: 1715, column: 15, scope: !3269)
!3339 = !DILocation(line: 1715, column: 32, scope: !3269)
!3340 = !DILocation(line: 1717, column: 9, scope: !3341)
!3341 = distinct !DILexicalBlock(scope: !3269, file: !911, line: 1717, column: 9)
!3342 = !DILocation(line: 1717, column: 12, scope: !3341)
!3343 = !DILocation(line: 1717, column: 30, scope: !3341)
!3344 = !DILocation(line: 1717, column: 9, scope: !3269)
!3345 = !DILocation(line: 1718, column: 12, scope: !3346)
!3346 = distinct !DILexicalBlock(scope: !3341, file: !911, line: 1717, column: 35)
!3347 = !DILocation(line: 1719, column: 23, scope: !3346)
!3348 = !DILocation(line: 1719, column: 27, scope: !3346)
!3349 = !DILocation(line: 1719, column: 30, scope: !3346)
!3350 = !DILocation(line: 1719, column: 44, scope: !3346)
!3351 = !DILocation(line: 1719, column: 47, scope: !3346)
!3352 = !DILocation(line: 1719, column: 9, scope: !3346)
!3353 = !DILocation(line: 1720, column: 9, scope: !3346)
!3354 = !DILocation(line: 1720, column: 12, scope: !3346)
!3355 = !DILocation(line: 1720, column: 30, scope: !3346)
!3356 = !DILocation(line: 1721, column: 5, scope: !3346)
!3357 = !DILocation(line: 1727, column: 20, scope: !3358)
!3358 = distinct !DILexicalBlock(scope: !3269, file: !911, line: 1727, column: 9)
!3359 = !DILocation(line: 1727, column: 10, scope: !3358)
!3360 = !DILocation(line: 1727, column: 9, scope: !3269)
!3361 = !DILocation(line: 1728, column: 31, scope: !3362)
!3362 = distinct !DILexicalBlock(scope: !3358, file: !911, line: 1727, column: 25)
!3363 = !DILocation(line: 1728, column: 9, scope: !3362)
!3364 = !DILocation(line: 1729, column: 9, scope: !3362)
!3365 = !DILocation(line: 1733, column: 19, scope: !3366)
!3366 = distinct !DILexicalBlock(scope: !3269, file: !911, line: 1733, column: 9)
!3367 = !DILocation(line: 1733, column: 9, scope: !3366)
!3368 = !DILocation(line: 1733, column: 9, scope: !3269)
!3369 = !DILocation(line: 1734, column: 35, scope: !3370)
!3370 = distinct !DILexicalBlock(scope: !3371, file: !911, line: 1734, column: 13)
!3371 = distinct !DILexicalBlock(scope: !3366, file: !911, line: 1733, column: 24)
!3372 = !DILocation(line: 1734, column: 26, scope: !3370)
!3373 = !DILocation(line: 1734, column: 24, scope: !3370)
!3374 = !DILocation(line: 1734, column: 44, scope: !3370)
!3375 = !DILocation(line: 1734, column: 13, scope: !3371)
!3376 = !DILocation(line: 1735, column: 20, scope: !3377)
!3377 = distinct !DILexicalBlock(scope: !3370, file: !911, line: 1734, column: 57)
!3378 = !DILocation(line: 1737, column: 31, scope: !3377)
!3379 = !DILocation(line: 1735, column: 13, scope: !3377)
!3380 = !DILocation(line: 1738, column: 13, scope: !3377)
!3381 = !DILocation(line: 1740, column: 5, scope: !3371)
!3382 = !DILocation(line: 1743, column: 9, scope: !3383)
!3383 = distinct !DILexicalBlock(scope: !3269, file: !911, line: 1743, column: 9)
!3384 = !DILocation(line: 1743, column: 12, scope: !3383)
!3385 = !DILocation(line: 1743, column: 9, scope: !3269)
!3386 = !DILocalVariable(name: "prev_lsps", scope: !3387, file: !911, line: 1744, type: !1859)
!3387 = distinct !DILexicalBlock(scope: !3383, file: !911, line: 1743, column: 31)
!3388 = !DILocation(line: 1744, column: 16, scope: !3387)
!3389 = !DILocalVariable(name: "a1", scope: !3387, file: !911, line: 1744, type: !3390)
!3390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1704, size: 2048, align: 64, elements: !2026)
!3391 = !DILocation(line: 1744, column: 31, scope: !3387)
!3392 = !DILocalVariable(name: "a2", scope: !3387, file: !911, line: 1744, type: !3390)
!3393 = !DILocation(line: 1744, column: 43, scope: !3387)
!3394 = !DILocation(line: 1746, column: 16, scope: !3395)
!3395 = distinct !DILexicalBlock(scope: !3387, file: !911, line: 1746, column: 9)
!3396 = !DILocation(line: 1746, column: 14, scope: !3395)
!3397 = !DILocation(line: 1746, column: 21, scope: !3398)
!3398 = !DILexicalBlockFile(scope: !3399, file: !911, discriminator: 1)
!3399 = distinct !DILexicalBlock(scope: !3395, file: !911, line: 1746, column: 9)
!3400 = !DILocation(line: 1746, column: 25, scope: !3398)
!3401 = !DILocation(line: 1746, column: 28, scope: !3398)
!3402 = !DILocation(line: 1746, column: 23, scope: !3398)
!3403 = !DILocation(line: 1746, column: 9, scope: !3398)
!3404 = !DILocation(line: 1747, column: 41, scope: !3399)
!3405 = !DILocation(line: 1747, column: 28, scope: !3399)
!3406 = !DILocation(line: 1747, column: 31, scope: !3399)
!3407 = !DILocation(line: 1747, column: 55, scope: !3399)
!3408 = !DILocation(line: 1747, column: 46, scope: !3399)
!3409 = !DILocation(line: 1747, column: 44, scope: !3399)
!3410 = !DILocation(line: 1747, column: 23, scope: !3399)
!3411 = !DILocation(line: 1747, column: 13, scope: !3399)
!3412 = !DILocation(line: 1747, column: 26, scope: !3399)
!3413 = !DILocation(line: 1746, column: 35, scope: !3414)
!3414 = !DILexicalBlockFile(scope: !3399, file: !911, discriminator: 2)
!3415 = !DILocation(line: 1746, column: 9, scope: !3414)
!3416 = distinct !{!3416, !3417}
!3417 = !DILocation(line: 1746, column: 9, scope: !3387)
!3418 = !DILocation(line: 1749, column: 13, scope: !3419)
!3419 = distinct !DILexicalBlock(scope: !3387, file: !911, line: 1749, column: 13)
!3420 = !DILocation(line: 1749, column: 16, scope: !3419)
!3421 = !DILocation(line: 1749, column: 21, scope: !3419)
!3422 = !DILocation(line: 1749, column: 13, scope: !3387)
!3423 = !DILocation(line: 1750, column: 28, scope: !3424)
!3424 = distinct !DILexicalBlock(scope: !3419, file: !911, line: 1749, column: 28)
!3425 = !DILocation(line: 1750, column: 32, scope: !3424)
!3426 = !DILocation(line: 1750, column: 41, scope: !3424)
!3427 = !DILocation(line: 1750, column: 52, scope: !3424)
!3428 = !DILocation(line: 1750, column: 56, scope: !3424)
!3429 = !DILocation(line: 1750, column: 60, scope: !3424)
!3430 = !DILocation(line: 1750, column: 63, scope: !3424)
!3431 = !DILocation(line: 1750, column: 13, scope: !3424)
!3432 = !DILocation(line: 1751, column: 9, scope: !3424)
!3433 = !DILocation(line: 1752, column: 28, scope: !3419)
!3434 = !DILocation(line: 1752, column: 32, scope: !3419)
!3435 = !DILocation(line: 1752, column: 41, scope: !3419)
!3436 = !DILocation(line: 1752, column: 52, scope: !3419)
!3437 = !DILocation(line: 1752, column: 56, scope: !3419)
!3438 = !DILocation(line: 1752, column: 60, scope: !3419)
!3439 = !DILocation(line: 1752, column: 63, scope: !3419)
!3440 = !DILocation(line: 1752, column: 13, scope: !3419)
!3441 = !DILocation(line: 1754, column: 16, scope: !3442)
!3442 = distinct !DILexicalBlock(scope: !3387, file: !911, line: 1754, column: 9)
!3443 = !DILocation(line: 1754, column: 14, scope: !3442)
!3444 = !DILocation(line: 1754, column: 21, scope: !3445)
!3445 = !DILexicalBlockFile(scope: !3446, file: !911, discriminator: 1)
!3446 = distinct !DILexicalBlock(scope: !3442, file: !911, line: 1754, column: 9)
!3447 = !DILocation(line: 1754, column: 25, scope: !3445)
!3448 = !DILocation(line: 1754, column: 28, scope: !3445)
!3449 = !DILocation(line: 1754, column: 23, scope: !3445)
!3450 = !DILocation(line: 1754, column: 9, scope: !3445)
!3451 = !DILocation(line: 1755, column: 35, scope: !3452)
!3452 = distinct !DILexicalBlock(scope: !3446, file: !911, line: 1754, column: 39)
!3453 = !DILocation(line: 1755, column: 26, scope: !3452)
!3454 = !DILocation(line: 1755, column: 44, scope: !3452)
!3455 = !DILocation(line: 1755, column: 41, scope: !3452)
!3456 = !DILocation(line: 1755, column: 52, scope: !3452)
!3457 = !DILocation(line: 1755, column: 54, scope: !3452)
!3458 = !DILocation(line: 1755, column: 49, scope: !3452)
!3459 = !DILocation(line: 1755, column: 47, scope: !3452)
!3460 = !DILocation(line: 1755, column: 38, scope: !3452)
!3461 = !DILocation(line: 1755, column: 21, scope: !3452)
!3462 = !DILocation(line: 1755, column: 13, scope: !3452)
!3463 = !DILocation(line: 1755, column: 24, scope: !3452)
!3464 = !DILocation(line: 1756, column: 35, scope: !3452)
!3465 = !DILocation(line: 1756, column: 26, scope: !3452)
!3466 = !DILocation(line: 1756, column: 44, scope: !3452)
!3467 = !DILocation(line: 1756, column: 47, scope: !3452)
!3468 = !DILocation(line: 1756, column: 54, scope: !3452)
!3469 = !DILocation(line: 1756, column: 52, scope: !3452)
!3470 = !DILocation(line: 1756, column: 41, scope: !3452)
!3471 = !DILocation(line: 1756, column: 62, scope: !3452)
!3472 = !DILocation(line: 1756, column: 64, scope: !3452)
!3473 = !DILocation(line: 1756, column: 68, scope: !3452)
!3474 = !DILocation(line: 1756, column: 59, scope: !3452)
!3475 = !DILocation(line: 1756, column: 57, scope: !3452)
!3476 = !DILocation(line: 1756, column: 38, scope: !3452)
!3477 = !DILocation(line: 1756, column: 21, scope: !3452)
!3478 = !DILocation(line: 1756, column: 13, scope: !3452)
!3479 = !DILocation(line: 1756, column: 24, scope: !3452)
!3480 = !DILocation(line: 1757, column: 36, scope: !3452)
!3481 = !DILocation(line: 1757, column: 27, scope: !3452)
!3482 = !DILocation(line: 1757, column: 21, scope: !3452)
!3483 = !DILocation(line: 1757, column: 13, scope: !3452)
!3484 = !DILocation(line: 1757, column: 24, scope: !3452)
!3485 = !DILocation(line: 1758, column: 9, scope: !3452)
!3486 = !DILocation(line: 1754, column: 35, scope: !3487)
!3487 = !DILexicalBlockFile(scope: !3446, file: !911, discriminator: 2)
!3488 = !DILocation(line: 1754, column: 9, scope: !3487)
!3489 = distinct !{!3489, !3490}
!3490 = !DILocation(line: 1754, column: 9, scope: !3387)
!3491 = !DILocation(line: 1759, column: 16, scope: !3492)
!3492 = distinct !DILexicalBlock(scope: !3387, file: !911, line: 1759, column: 9)
!3493 = !DILocation(line: 1759, column: 14, scope: !3492)
!3494 = !DILocation(line: 1759, column: 21, scope: !3495)
!3495 = !DILexicalBlockFile(scope: !3496, file: !911, discriminator: 1)
!3496 = distinct !DILexicalBlock(scope: !3492, file: !911, line: 1759, column: 9)
!3497 = !DILocation(line: 1759, column: 23, scope: !3495)
!3498 = !DILocation(line: 1759, column: 9, scope: !3495)
!3499 = !DILocation(line: 1760, column: 33, scope: !3496)
!3500 = !DILocation(line: 1760, column: 28, scope: !3496)
!3501 = !DILocation(line: 1760, column: 37, scope: !3496)
!3502 = !DILocation(line: 1760, column: 40, scope: !3496)
!3503 = !DILocation(line: 1760, column: 13, scope: !3496)
!3504 = !DILocation(line: 1759, column: 29, scope: !3505)
!3505 = !DILexicalBlockFile(scope: !3496, file: !911, discriminator: 2)
!3506 = !DILocation(line: 1759, column: 9, scope: !3505)
!3507 = distinct !{!3507, !3508}
!3508 = !DILocation(line: 1759, column: 9, scope: !3387)
!3509 = !DILocation(line: 1761, column: 5, scope: !3387)
!3510 = !DILocation(line: 1765, column: 20, scope: !3269)
!3511 = !DILocation(line: 1765, column: 5, scope: !3269)
!3512 = !DILocation(line: 1768, column: 5, scope: !3269)
!3513 = !DILocation(line: 1768, column: 12, scope: !3269)
!3514 = !DILocation(line: 1768, column: 23, scope: !3269)
!3515 = !DILocation(line: 1769, column: 30, scope: !3516)
!3516 = distinct !DILexicalBlock(scope: !3269, file: !911, line: 1769, column: 9)
!3517 = !DILocation(line: 1769, column: 35, scope: !3516)
!3518 = !DILocation(line: 1769, column: 16, scope: !3516)
!3519 = !DILocation(line: 1769, column: 14, scope: !3516)
!3520 = !DILocation(line: 1769, column: 46, scope: !3516)
!3521 = !DILocation(line: 1769, column: 9, scope: !3269)
!3522 = !DILocation(line: 1770, column: 16, scope: !3516)
!3523 = !DILocation(line: 1770, column: 9, scope: !3516)
!3524 = !DILocation(line: 1771, column: 25, scope: !3269)
!3525 = !DILocation(line: 1771, column: 5, scope: !3269)
!3526 = !DILocation(line: 1771, column: 12, scope: !3269)
!3527 = !DILocation(line: 1771, column: 23, scope: !3269)
!3528 = !DILocation(line: 1772, column: 24, scope: !3269)
!3529 = !DILocation(line: 1772, column: 31, scope: !3269)
!3530 = !DILocation(line: 1772, column: 15, scope: !3269)
!3531 = !DILocation(line: 1772, column: 13, scope: !3269)
!3532 = !DILocation(line: 1775, column: 12, scope: !3533)
!3533 = distinct !DILexicalBlock(scope: !3269, file: !911, line: 1775, column: 5)
!3534 = !DILocation(line: 1775, column: 10, scope: !3533)
!3535 = !DILocation(line: 1775, column: 17, scope: !3536)
!3536 = !DILexicalBlockFile(scope: !3537, file: !911, discriminator: 1)
!3537 = distinct !DILexicalBlock(scope: !3533, file: !911, line: 1775, column: 5)
!3538 = !DILocation(line: 1775, column: 19, scope: !3536)
!3539 = !DILocation(line: 1775, column: 5, scope: !3536)
!3540 = !DILocation(line: 1776, column: 14, scope: !3541)
!3541 = distinct !DILexicalBlock(scope: !3542, file: !911, line: 1776, column: 13)
!3542 = distinct !DILexicalBlock(scope: !3537, file: !911, line: 1775, column: 29)
!3543 = !DILocation(line: 1776, column: 17, scope: !3541)
!3544 = !DILocation(line: 1776, column: 13, scope: !3542)
!3545 = !DILocalVariable(name: "m", scope: !3546, file: !911, line: 1777, type: !923)
!3546 = distinct !DILexicalBlock(scope: !3541, file: !911, line: 1776, column: 36)
!3547 = !DILocation(line: 1777, column: 17, scope: !3546)
!3548 = !DILocation(line: 1779, column: 17, scope: !3549)
!3549 = distinct !DILexicalBlock(scope: !3546, file: !911, line: 1779, column: 17)
!3550 = !DILocation(line: 1779, column: 20, scope: !3549)
!3551 = !DILocation(line: 1779, column: 25, scope: !3549)
!3552 = !DILocation(line: 1779, column: 17, scope: !3546)
!3553 = !DILocation(line: 1780, column: 32, scope: !3554)
!3554 = distinct !DILexicalBlock(scope: !3549, file: !911, line: 1779, column: 32)
!3555 = !DILocation(line: 1780, column: 41, scope: !3554)
!3556 = !DILocation(line: 1780, column: 36, scope: !3554)
!3557 = !DILocation(line: 1780, column: 17, scope: !3554)
!3558 = !DILocation(line: 1781, column: 13, scope: !3554)
!3559 = !DILocation(line: 1782, column: 32, scope: !3549)
!3560 = !DILocation(line: 1782, column: 41, scope: !3549)
!3561 = !DILocation(line: 1782, column: 36, scope: !3549)
!3562 = !DILocation(line: 1782, column: 17, scope: !3549)
!3563 = !DILocation(line: 1784, column: 20, scope: !3564)
!3564 = distinct !DILexicalBlock(scope: !3546, file: !911, line: 1784, column: 13)
!3565 = !DILocation(line: 1784, column: 18, scope: !3564)
!3566 = !DILocation(line: 1784, column: 25, scope: !3567)
!3567 = !DILexicalBlockFile(scope: !3568, file: !911, discriminator: 1)
!3568 = distinct !DILexicalBlock(scope: !3564, file: !911, line: 1784, column: 13)
!3569 = !DILocation(line: 1784, column: 29, scope: !3567)
!3570 = !DILocation(line: 1784, column: 32, scope: !3567)
!3571 = !DILocation(line: 1784, column: 27, scope: !3567)
!3572 = !DILocation(line: 1784, column: 13, scope: !3567)
!3573 = !DILocation(line: 1785, column: 40, scope: !3568)
!3574 = !DILocation(line: 1785, column: 31, scope: !3568)
!3575 = !DILocation(line: 1785, column: 25, scope: !3568)
!3576 = !DILocation(line: 1785, column: 17, scope: !3568)
!3577 = !DILocation(line: 1785, column: 22, scope: !3568)
!3578 = !DILocation(line: 1785, column: 28, scope: !3568)
!3579 = !DILocation(line: 1784, column: 39, scope: !3580)
!3580 = !DILexicalBlockFile(scope: !3568, file: !911, discriminator: 2)
!3581 = !DILocation(line: 1784, column: 13, scope: !3580)
!3582 = distinct !{!3582, !3583}
!3583 = !DILocation(line: 1784, column: 13, scope: !3546)
!3584 = !DILocation(line: 1786, column: 33, scope: !3546)
!3585 = !DILocation(line: 1786, column: 28, scope: !3546)
!3586 = !DILocation(line: 1786, column: 37, scope: !3546)
!3587 = !DILocation(line: 1786, column: 40, scope: !3546)
!3588 = !DILocation(line: 1786, column: 13, scope: !3546)
!3589 = !DILocation(line: 1787, column: 9, scope: !3546)
!3590 = !DILocation(line: 1789, column: 32, scope: !3591)
!3591 = distinct !DILexicalBlock(scope: !3542, file: !911, line: 1789, column: 13)
!3592 = !DILocation(line: 1789, column: 37, scope: !3591)
!3593 = !DILocation(line: 1789, column: 41, scope: !3591)
!3594 = !DILocation(line: 1790, column: 41, scope: !3591)
!3595 = !DILocation(line: 1790, column: 43, scope: !3591)
!3596 = !DILocation(line: 1790, column: 33, scope: !3591)
!3597 = !DILocation(line: 1791, column: 37, scope: !3591)
!3598 = !DILocation(line: 1791, column: 32, scope: !3591)
!3599 = !DILocation(line: 1791, column: 41, scope: !3591)
!3600 = !DILocation(line: 1791, column: 43, scope: !3591)
!3601 = !DILocation(line: 1791, column: 50, scope: !3602)
!3602 = !DILexicalBlockFile(scope: !3591, file: !911, discriminator: 1)
!3603 = !DILocation(line: 1791, column: 53, scope: !3602)
!3604 = !DILocation(line: 1791, column: 41, scope: !3602)
!3605 = !DILocation(line: 1791, column: 70, scope: !3606)
!3606 = !DILexicalBlockFile(scope: !3591, file: !911, discriminator: 2)
!3607 = !DILocation(line: 1791, column: 72, scope: !3606)
!3608 = !DILocation(line: 1791, column: 65, scope: !3606)
!3609 = !DILocation(line: 1791, column: 41, scope: !3606)
!3610 = !DILocation(line: 1791, column: 41, scope: !3611)
!3611 = !DILexicalBlockFile(scope: !3591, file: !911, discriminator: 3)
!3612 = !DILocation(line: 1792, column: 44, scope: !3591)
!3613 = !DILocation(line: 1792, column: 47, scope: !3591)
!3614 = !DILocation(line: 1792, column: 66, scope: !3591)
!3615 = !DILocation(line: 1792, column: 68, scope: !3591)
!3616 = !DILocation(line: 1792, column: 64, scope: !3591)
!3617 = !DILocation(line: 1792, column: 33, scope: !3591)
!3618 = !DILocation(line: 1793, column: 39, scope: !3591)
!3619 = !DILocation(line: 1793, column: 42, scope: !3591)
!3620 = !DILocation(line: 1793, column: 49, scope: !3591)
!3621 = !DILocation(line: 1793, column: 51, scope: !3591)
!3622 = !DILocation(line: 1793, column: 47, scope: !3591)
!3623 = !DILocation(line: 1793, column: 33, scope: !3591)
!3624 = !DILocation(line: 1789, column: 20, scope: !3602)
!3625 = !DILocation(line: 1789, column: 18, scope: !3602)
!3626 = !DILocation(line: 1789, column: 13, scope: !3602)
!3627 = !DILocation(line: 1794, column: 14, scope: !3628)
!3628 = distinct !DILexicalBlock(scope: !3591, file: !911, line: 1793, column: 61)
!3629 = !DILocation(line: 1794, column: 28, scope: !3628)
!3630 = !DILocation(line: 1795, column: 20, scope: !3628)
!3631 = !DILocation(line: 1795, column: 13, scope: !3628)
!3632 = !DILocation(line: 1797, column: 5, scope: !3542)
!3633 = !DILocation(line: 1775, column: 25, scope: !3634)
!3634 = !DILexicalBlockFile(scope: !3537, file: !911, discriminator: 2)
!3635 = !DILocation(line: 1775, column: 5, scope: !3634)
!3636 = distinct !{!3636, !3637}
!3637 = !DILocation(line: 1775, column: 5, scope: !3269)
!3638 = !DILocation(line: 1802, column: 19, scope: !3639)
!3639 = distinct !DILexicalBlock(scope: !3269, file: !911, line: 1802, column: 9)
!3640 = !DILocation(line: 1802, column: 9, scope: !3639)
!3641 = !DILocation(line: 1802, column: 9, scope: !3269)
!3642 = !DILocation(line: 1803, column: 24, scope: !3643)
!3643 = distinct !DILexicalBlock(scope: !3639, file: !911, line: 1802, column: 24)
!3644 = !DILocation(line: 1803, column: 15, scope: !3643)
!3645 = !DILocation(line: 1803, column: 13, scope: !3643)
!3646 = !DILocation(line: 1804, column: 19, scope: !3643)
!3647 = !DILocation(line: 1804, column: 29, scope: !3643)
!3648 = !DILocation(line: 1804, column: 33, scope: !3643)
!3649 = !DILocation(line: 1804, column: 26, scope: !3643)
!3650 = !DILocation(line: 1804, column: 9, scope: !3643)
!3651 = !DILocation(line: 1805, column: 5, scope: !3643)
!3652 = !DILocation(line: 1807, column: 23, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3269, file: !911, line: 1807, column: 9)
!3654 = !DILocation(line: 1807, column: 9, scope: !3653)
!3655 = !DILocation(line: 1807, column: 27, scope: !3653)
!3656 = !DILocation(line: 1807, column: 9, scope: !3269)
!3657 = !DILocation(line: 1808, column: 24, scope: !3658)
!3658 = distinct !DILexicalBlock(scope: !3653, file: !911, line: 1807, column: 32)
!3659 = !DILocation(line: 1808, column: 9, scope: !3658)
!3660 = !DILocation(line: 1809, column: 9, scope: !3658)
!3661 = !DILocation(line: 1812, column: 6, scope: !3269)
!3662 = !DILocation(line: 1812, column: 20, scope: !3269)
!3663 = !DILocation(line: 1815, column: 12, scope: !3269)
!3664 = !DILocation(line: 1815, column: 15, scope: !3269)
!3665 = !DILocation(line: 1815, column: 5, scope: !3269)
!3666 = !DILocation(line: 1815, column: 26, scope: !3269)
!3667 = !DILocation(line: 1816, column: 12, scope: !3269)
!3668 = !DILocation(line: 1816, column: 15, scope: !3269)
!3669 = !DILocation(line: 1816, column: 20, scope: !3269)
!3670 = !DILocation(line: 1817, column: 12, scope: !3269)
!3671 = !DILocation(line: 1817, column: 15, scope: !3269)
!3672 = !DILocation(line: 1817, column: 5, scope: !3269)
!3673 = !DILocation(line: 1817, column: 31, scope: !3269)
!3674 = !DILocation(line: 1818, column: 12, scope: !3269)
!3675 = !DILocation(line: 1818, column: 15, scope: !3269)
!3676 = !DILocation(line: 1818, column: 20, scope: !3269)
!3677 = !DILocation(line: 1819, column: 12, scope: !3269)
!3678 = !DILocation(line: 1819, column: 15, scope: !3269)
!3679 = !DILocation(line: 1819, column: 5, scope: !3269)
!3680 = !DILocation(line: 1819, column: 36, scope: !3269)
!3681 = !DILocation(line: 1820, column: 12, scope: !3269)
!3682 = !DILocation(line: 1820, column: 15, scope: !3269)
!3683 = !DILocation(line: 1820, column: 32, scope: !3269)
!3684 = !DILocation(line: 1821, column: 9, scope: !3685)
!3685 = distinct !DILexicalBlock(scope: !3269, file: !911, line: 1821, column: 9)
!3686 = !DILocation(line: 1821, column: 12, scope: !3685)
!3687 = !DILocation(line: 1821, column: 9, scope: !3269)
!3688 = !DILocation(line: 1822, column: 17, scope: !3685)
!3689 = !DILocation(line: 1822, column: 20, scope: !3685)
!3690 = !DILocation(line: 1822, column: 9, scope: !3685)
!3691 = !DILocation(line: 1822, column: 34, scope: !3685)
!3692 = !DILocation(line: 1822, column: 37, scope: !3685)
!3693 = !DILocation(line: 1823, column: 17, scope: !3685)
!3694 = !DILocation(line: 1823, column: 20, scope: !3685)
!3695 = !DILocation(line: 1823, column: 37, scope: !3685)
!3696 = !DILocation(line: 1825, column: 5, scope: !3269)
!3697 = !DILocation(line: 1826, column: 1, scope: !3269)
!3698 = distinct !DISubprogram(name: "skip_bits_long", scope: !1717, file: !1717, line: 293, type: !3699, isLocal: true, isDefinition: true, scopeLine: 294, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3699 = !DISubroutineType(types: !3700)
!3700 = !{null, !1715, !923}
!3701 = !DILocalVariable(name: "a", arg: 1, scope: !3702, file: !2037, line: 127, type: !923)
!3702 = distinct !DISubprogram(name: "av_clip_c", scope: !2037, file: !2037, line: 127, type: !1997, isLocal: true, isDefinition: true, scopeLine: 128, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3703 = !DILocation(line: 127, column: 87, scope: !3702, inlinedAt: !3704)
!3704 = distinct !DILocation(line: 301, column: 17, scope: !3698)
!3705 = !DILocalVariable(name: "amin", arg: 2, scope: !3702, file: !2037, line: 127, type: !923)
!3706 = !DILocation(line: 127, column: 94, scope: !3702, inlinedAt: !3704)
!3707 = !DILocalVariable(name: "amax", arg: 3, scope: !3702, file: !2037, line: 127, type: !923)
!3708 = !DILocation(line: 127, column: 104, scope: !3702, inlinedAt: !3704)
!3709 = !DILocalVariable(name: "s", arg: 1, scope: !3698, file: !1717, line: 293, type: !1715)
!3710 = !DILocation(line: 293, column: 50, scope: !3698)
!3711 = !DILocalVariable(name: "n", arg: 2, scope: !3698, file: !1717, line: 293, type: !923)
!3712 = !DILocation(line: 293, column: 57, scope: !3698)
!3713 = !DILocation(line: 301, column: 27, scope: !3698)
!3714 = !DILocation(line: 301, column: 31, scope: !3698)
!3715 = !DILocation(line: 301, column: 34, scope: !3698)
!3716 = !DILocation(line: 301, column: 30, scope: !3698)
!3717 = !DILocation(line: 301, column: 41, scope: !3698)
!3718 = !DILocation(line: 301, column: 44, scope: !3698)
!3719 = !DILocation(line: 301, column: 65, scope: !3698)
!3720 = !DILocation(line: 301, column: 68, scope: !3698)
!3721 = !DILocation(line: 301, column: 63, scope: !3698)
!3722 = !DILocation(line: 301, column: 17, scope: !3698)
!3723 = !DILocation(line: 132, column: 9, scope: !3724, inlinedAt: !3704)
!3724 = distinct !DILexicalBlock(scope: !3702, file: !2037, line: 132, column: 9)
!3725 = !DILocation(line: 132, column: 13, scope: !3724, inlinedAt: !3704)
!3726 = !DILocation(line: 132, column: 11, scope: !3724, inlinedAt: !3704)
!3727 = !DILocation(line: 132, column: 9, scope: !3702, inlinedAt: !3704)
!3728 = !DILocation(line: 132, column: 26, scope: !3729, inlinedAt: !3704)
!3729 = !DILexicalBlockFile(scope: !3724, file: !2037, discriminator: 1)
!3730 = !DILocation(line: 132, column: 19, scope: !3729, inlinedAt: !3704)
!3731 = !DILocation(line: 133, column: 14, scope: !3732, inlinedAt: !3704)
!3732 = distinct !DILexicalBlock(scope: !3724, file: !2037, line: 133, column: 14)
!3733 = !DILocation(line: 133, column: 18, scope: !3732, inlinedAt: !3704)
!3734 = !DILocation(line: 133, column: 16, scope: !3732, inlinedAt: !3704)
!3735 = !DILocation(line: 133, column: 14, scope: !3724, inlinedAt: !3704)
!3736 = !DILocation(line: 133, column: 31, scope: !3737, inlinedAt: !3704)
!3737 = !DILexicalBlockFile(scope: !3732, file: !2037, discriminator: 1)
!3738 = !DILocation(line: 133, column: 24, scope: !3737, inlinedAt: !3704)
!3739 = !DILocation(line: 134, column: 17, scope: !3732, inlinedAt: !3704)
!3740 = !DILocation(line: 134, column: 10, scope: !3732, inlinedAt: !3704)
!3741 = !DILocation(line: 135, column: 1, scope: !3702, inlinedAt: !3704)
!3742 = !DILocation(line: 301, column: 5, scope: !3698)
!3743 = !DILocation(line: 301, column: 8, scope: !3698)
!3744 = !DILocation(line: 301, column: 14, scope: !3698)
!3745 = !DILocation(line: 304, column: 1, scope: !3698)
!3746 = distinct !DISubprogram(name: "skip_bits", scope: !1717, file: !1717, line: 460, type: !3699, isLocal: true, isDefinition: true, scopeLine: 461, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3747 = !DILocalVariable(name: "s", arg: 1, scope: !3746, file: !1717, line: 460, type: !1715)
!3748 = !DILocation(line: 460, column: 45, scope: !3746)
!3749 = !DILocalVariable(name: "n", arg: 2, scope: !3746, file: !1717, line: 460, type: !923)
!3750 = !DILocation(line: 460, column: 52, scope: !3746)
!3751 = !DILocalVariable(name: "re_index", scope: !3746, file: !1717, line: 481, type: !924)
!3752 = !DILocation(line: 481, column: 18, scope: !3746)
!3753 = !DILocation(line: 481, column: 30, scope: !3746)
!3754 = !DILocation(line: 481, column: 34, scope: !3746)
!3755 = !DILocalVariable(name: "re_cache", scope: !3746, file: !1717, line: 481, type: !924)
!3756 = !DILocation(line: 481, column: 78, scope: !3746)
!3757 = !DILocalVariable(name: "re_size_plus8", scope: !3746, file: !1717, line: 481, type: !924)
!3758 = !DILocation(line: 481, column: 101, scope: !3746)
!3759 = !DILocation(line: 481, column: 118, scope: !3746)
!3760 = !DILocation(line: 481, column: 122, scope: !3746)
!3761 = !DILocation(line: 482, column: 18, scope: !3746)
!3762 = !DILocation(line: 482, column: 36, scope: !3746)
!3763 = !DILocation(line: 482, column: 48, scope: !3746)
!3764 = !DILocation(line: 482, column: 45, scope: !3746)
!3765 = !DILocation(line: 482, column: 33, scope: !3746)
!3766 = !DILocation(line: 482, column: 17, scope: !3746)
!3767 = !DILocation(line: 482, column: 55, scope: !3768)
!3768 = !DILexicalBlockFile(scope: !3746, file: !1717, discriminator: 1)
!3769 = !DILocation(line: 482, column: 67, scope: !3768)
!3770 = !DILocation(line: 482, column: 64, scope: !3768)
!3771 = !DILocation(line: 482, column: 17, scope: !3768)
!3772 = !DILocation(line: 482, column: 74, scope: !3773)
!3773 = !DILexicalBlockFile(scope: !3746, file: !1717, discriminator: 2)
!3774 = !DILocation(line: 482, column: 17, scope: !3773)
!3775 = !DILocation(line: 482, column: 17, scope: !3776)
!3776 = !DILexicalBlockFile(scope: !3746, file: !1717, discriminator: 3)
!3777 = !DILocation(line: 482, column: 14, scope: !3776)
!3778 = !DILocation(line: 483, column: 18, scope: !3746)
!3779 = !DILocation(line: 483, column: 6, scope: !3746)
!3780 = !DILocation(line: 483, column: 10, scope: !3746)
!3781 = !DILocation(line: 483, column: 16, scope: !3746)
!3782 = !DILocation(line: 485, column: 1, scope: !3746)
!3783 = distinct !DISubprogram(name: "get_bits_left", scope: !1717, file: !1717, line: 814, type: !3784, isLocal: true, isDefinition: true, scopeLine: 815, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3784 = !DISubroutineType(types: !3785)
!3785 = !{!923, !1715}
!3786 = !DILocalVariable(name: "gb", arg: 1, scope: !3783, file: !1717, line: 814, type: !1715)
!3787 = !DILocation(line: 814, column: 48, scope: !3783)
!3788 = !DILocation(line: 816, column: 12, scope: !3783)
!3789 = !DILocation(line: 816, column: 16, scope: !3783)
!3790 = !DILocation(line: 816, column: 46, scope: !3783)
!3791 = !DILocation(line: 816, column: 31, scope: !3783)
!3792 = !DILocation(line: 816, column: 29, scope: !3783)
!3793 = !DILocation(line: 816, column: 5, scope: !3783)
!3794 = distinct !DISubprogram(name: "init_put_bits", scope: !1849, file: !1849, line: 48, type: !3795, isLocal: true, isDefinition: true, scopeLine: 50, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3795 = !DISubroutineType(types: !3796)
!3796 = !{null, !3118, !945, !923}
!3797 = !DILocalVariable(name: "s", arg: 1, scope: !3794, file: !1849, line: 48, type: !3118)
!3798 = !DILocation(line: 48, column: 49, scope: !3794)
!3799 = !DILocalVariable(name: "buffer", arg: 2, scope: !3794, file: !1849, line: 48, type: !945)
!3800 = !DILocation(line: 48, column: 61, scope: !3794)
!3801 = !DILocalVariable(name: "buffer_size", arg: 3, scope: !3794, file: !1849, line: 49, type: !923)
!3802 = !DILocation(line: 49, column: 38, scope: !3794)
!3803 = !DILocation(line: 51, column: 9, scope: !3804)
!3804 = distinct !DILexicalBlock(scope: !3794, file: !1849, line: 51, column: 9)
!3805 = !DILocation(line: 51, column: 21, scope: !3804)
!3806 = !DILocation(line: 51, column: 9, scope: !3794)
!3807 = !DILocation(line: 52, column: 21, scope: !3808)
!3808 = distinct !DILexicalBlock(scope: !3804, file: !1849, line: 51, column: 26)
!3809 = !DILocation(line: 53, column: 16, scope: !3808)
!3810 = !DILocation(line: 54, column: 5, scope: !3808)
!3811 = !DILocation(line: 56, column: 27, scope: !3794)
!3812 = !DILocation(line: 56, column: 25, scope: !3794)
!3813 = !DILocation(line: 56, column: 5, scope: !3794)
!3814 = !DILocation(line: 56, column: 8, scope: !3794)
!3815 = !DILocation(line: 56, column: 21, scope: !3794)
!3816 = !DILocation(line: 57, column: 14, scope: !3794)
!3817 = !DILocation(line: 57, column: 5, scope: !3794)
!3818 = !DILocation(line: 57, column: 8, scope: !3794)
!3819 = !DILocation(line: 57, column: 12, scope: !3794)
!3820 = !DILocation(line: 58, column: 18, scope: !3794)
!3821 = !DILocation(line: 58, column: 21, scope: !3794)
!3822 = !DILocation(line: 58, column: 27, scope: !3794)
!3823 = !DILocation(line: 58, column: 25, scope: !3794)
!3824 = !DILocation(line: 58, column: 5, scope: !3794)
!3825 = !DILocation(line: 58, column: 8, scope: !3794)
!3826 = !DILocation(line: 58, column: 16, scope: !3794)
!3827 = !DILocation(line: 59, column: 18, scope: !3794)
!3828 = !DILocation(line: 59, column: 21, scope: !3794)
!3829 = !DILocation(line: 59, column: 5, scope: !3794)
!3830 = !DILocation(line: 59, column: 8, scope: !3794)
!3831 = !DILocation(line: 59, column: 16, scope: !3794)
!3832 = !DILocation(line: 60, column: 5, scope: !3794)
!3833 = !DILocation(line: 60, column: 8, scope: !3794)
!3834 = !DILocation(line: 60, column: 17, scope: !3794)
!3835 = !DILocation(line: 61, column: 5, scope: !3794)
!3836 = !DILocation(line: 61, column: 8, scope: !3794)
!3837 = !DILocation(line: 61, column: 16, scope: !3794)
!3838 = !DILocation(line: 62, column: 1, scope: !3794)
!3839 = distinct !DISubprogram(name: "get_bits1", scope: !1717, file: !1717, line: 487, type: !3840, isLocal: true, isDefinition: true, scopeLine: 488, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3840 = !DISubroutineType(types: !3841)
!3841 = !{!924, !1715}
!3842 = !DILocalVariable(name: "s", arg: 1, scope: !3839, file: !1717, line: 487, type: !1715)
!3843 = !DILocation(line: 487, column: 53, scope: !3839)
!3844 = !DILocalVariable(name: "index", scope: !3839, file: !1717, line: 499, type: !924)
!3845 = !DILocation(line: 499, column: 18, scope: !3839)
!3846 = !DILocation(line: 499, column: 26, scope: !3839)
!3847 = !DILocation(line: 499, column: 29, scope: !3839)
!3848 = !DILocalVariable(name: "result", scope: !3839, file: !1717, line: 500, type: !933)
!3849 = !DILocation(line: 500, column: 13, scope: !3839)
!3850 = !DILocation(line: 500, column: 32, scope: !3839)
!3851 = !DILocation(line: 500, column: 38, scope: !3839)
!3852 = !DILocation(line: 500, column: 22, scope: !3839)
!3853 = !DILocation(line: 500, column: 25, scope: !3839)
!3854 = !DILocation(line: 505, column: 16, scope: !3839)
!3855 = !DILocation(line: 505, column: 22, scope: !3839)
!3856 = !DILocation(line: 505, column: 12, scope: !3839)
!3857 = !DILocation(line: 506, column: 12, scope: !3839)
!3858 = !DILocation(line: 509, column: 9, scope: !3859)
!3859 = distinct !DILexicalBlock(scope: !3839, file: !1717, line: 509, column: 9)
!3860 = !DILocation(line: 509, column: 12, scope: !3859)
!3861 = !DILocation(line: 509, column: 20, scope: !3859)
!3862 = !DILocation(line: 509, column: 23, scope: !3859)
!3863 = !DILocation(line: 509, column: 18, scope: !3859)
!3864 = !DILocation(line: 509, column: 9, scope: !3839)
!3865 = !DILocation(line: 511, column: 14, scope: !3859)
!3866 = !DILocation(line: 511, column: 9, scope: !3859)
!3867 = !DILocation(line: 512, column: 16, scope: !3839)
!3868 = !DILocation(line: 512, column: 5, scope: !3839)
!3869 = !DILocation(line: 512, column: 8, scope: !3839)
!3870 = !DILocation(line: 512, column: 14, scope: !3839)
!3871 = !DILocation(line: 514, column: 12, scope: !3839)
!3872 = !DILocation(line: 514, column: 5, scope: !3839)
!3873 = distinct !DISubprogram(name: "put_bits_count", scope: !1849, file: !1849, line: 85, type: !3874, isLocal: true, isDefinition: true, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3874 = !DISubroutineType(types: !3875)
!3875 = !{!923, !3118}
!3876 = !DILocalVariable(name: "s", arg: 1, scope: !3873, file: !1849, line: 85, type: !3118)
!3877 = !DILocation(line: 85, column: 49, scope: !3873)
!3878 = !DILocation(line: 87, column: 13, scope: !3873)
!3879 = !DILocation(line: 87, column: 16, scope: !3873)
!3880 = !DILocation(line: 87, column: 26, scope: !3873)
!3881 = !DILocation(line: 87, column: 29, scope: !3873)
!3882 = !DILocation(line: 87, column: 24, scope: !3873)
!3883 = !DILocation(line: 87, column: 34, scope: !3873)
!3884 = !DILocation(line: 87, column: 38, scope: !3873)
!3885 = !DILocation(line: 87, column: 45, scope: !3873)
!3886 = !DILocation(line: 87, column: 48, scope: !3873)
!3887 = !DILocation(line: 87, column: 43, scope: !3873)
!3888 = !DILocation(line: 87, column: 12, scope: !3873)
!3889 = !DILocation(line: 87, column: 5, scope: !3873)
!3890 = distinct !DISubprogram(name: "put_bits", scope: !1849, file: !1849, line: 164, type: !3891, isLocal: true, isDefinition: true, scopeLine: 165, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!3891 = !DISubroutineType(types: !3892)
!3892 = !{null, !3118, !923, !924}
!3893 = !DILocation(line: 66, column: 98, scope: !2939, inlinedAt: !3894)
!3894 = distinct !DILocation(line: 197, column: 60, scope: !3895)
!3895 = distinct !DILexicalBlock(scope: !3896, file: !1849, line: 196, column: 42)
!3896 = distinct !DILexicalBlock(scope: !3897, file: !1849, line: 196, column: 13)
!3897 = distinct !DILexicalBlock(scope: !3898, file: !1849, line: 193, column: 12)
!3898 = distinct !DILexicalBlock(scope: !3890, file: !1849, line: 190, column: 9)
!3899 = !DILocalVariable(name: "s", arg: 1, scope: !3890, file: !1849, line: 164, type: !3118)
!3900 = !DILocation(line: 164, column: 44, scope: !3890)
!3901 = !DILocalVariable(name: "n", arg: 2, scope: !3890, file: !1849, line: 164, type: !923)
!3902 = !DILocation(line: 164, column: 51, scope: !3890)
!3903 = !DILocalVariable(name: "value", arg: 3, scope: !3890, file: !1849, line: 164, type: !924)
!3904 = !DILocation(line: 164, column: 67, scope: !3890)
!3905 = !DILocalVariable(name: "bit_buf", scope: !3890, file: !1849, line: 166, type: !924)
!3906 = !DILocation(line: 166, column: 18, scope: !3890)
!3907 = !DILocalVariable(name: "bit_left", scope: !3890, file: !1849, line: 167, type: !923)
!3908 = !DILocation(line: 167, column: 9, scope: !3890)
!3909 = !DILocation(line: 171, column: 15, scope: !3890)
!3910 = !DILocation(line: 171, column: 18, scope: !3890)
!3911 = !DILocation(line: 171, column: 13, scope: !3890)
!3912 = !DILocation(line: 172, column: 16, scope: !3890)
!3913 = !DILocation(line: 172, column: 19, scope: !3890)
!3914 = !DILocation(line: 172, column: 14, scope: !3890)
!3915 = !DILocation(line: 190, column: 9, scope: !3898)
!3916 = !DILocation(line: 190, column: 13, scope: !3898)
!3917 = !DILocation(line: 190, column: 11, scope: !3898)
!3918 = !DILocation(line: 190, column: 9, scope: !3890)
!3919 = !DILocation(line: 191, column: 20, scope: !3920)
!3920 = distinct !DILexicalBlock(scope: !3898, file: !1849, line: 190, column: 23)
!3921 = !DILocation(line: 191, column: 31, scope: !3920)
!3922 = !DILocation(line: 191, column: 28, scope: !3920)
!3923 = !DILocation(line: 191, column: 36, scope: !3920)
!3924 = !DILocation(line: 191, column: 34, scope: !3920)
!3925 = !DILocation(line: 191, column: 17, scope: !3920)
!3926 = !DILocation(line: 192, column: 21, scope: !3920)
!3927 = !DILocation(line: 192, column: 18, scope: !3920)
!3928 = !DILocation(line: 193, column: 5, scope: !3920)
!3929 = !DILocation(line: 194, column: 21, scope: !3897)
!3930 = !DILocation(line: 194, column: 17, scope: !3897)
!3931 = !DILocation(line: 195, column: 20, scope: !3897)
!3932 = !DILocation(line: 195, column: 30, scope: !3897)
!3933 = !DILocation(line: 195, column: 34, scope: !3897)
!3934 = !DILocation(line: 195, column: 32, scope: !3897)
!3935 = !DILocation(line: 195, column: 26, scope: !3897)
!3936 = !DILocation(line: 195, column: 17, scope: !3897)
!3937 = !DILocation(line: 196, column: 17, scope: !3896)
!3938 = !DILocation(line: 196, column: 20, scope: !3896)
!3939 = !DILocation(line: 196, column: 30, scope: !3896)
!3940 = !DILocation(line: 196, column: 33, scope: !3896)
!3941 = !DILocation(line: 196, column: 28, scope: !3896)
!3942 = !DILocation(line: 196, column: 15, scope: !3896)
!3943 = !DILocation(line: 196, column: 13, scope: !3897)
!3944 = !DILocation(line: 197, column: 71, scope: !3895)
!3945 = !DILocation(line: 197, column: 60, scope: !3895)
!3946 = !DILocation(line: 68, column: 16, scope: !2939, inlinedAt: !3894)
!3947 = !DILocation(line: 68, column: 19, scope: !2939, inlinedAt: !3894)
!3948 = !DILocation(line: 68, column: 24, scope: !2939, inlinedAt: !3894)
!3949 = !DILocation(line: 68, column: 38, scope: !2939, inlinedAt: !3894)
!3950 = !DILocation(line: 68, column: 41, scope: !2939, inlinedAt: !3894)
!3951 = !DILocation(line: 68, column: 46, scope: !2939, inlinedAt: !3894)
!3952 = !DILocation(line: 68, column: 34, scope: !2939, inlinedAt: !3894)
!3953 = !DILocation(line: 68, column: 57, scope: !2939, inlinedAt: !3894)
!3954 = !DILocation(line: 68, column: 69, scope: !2939, inlinedAt: !3894)
!3955 = !DILocation(line: 68, column: 72, scope: !2939, inlinedAt: !3894)
!3956 = !DILocation(line: 68, column: 79, scope: !2939, inlinedAt: !3894)
!3957 = !DILocation(line: 68, column: 84, scope: !2939, inlinedAt: !3894)
!3958 = !DILocation(line: 68, column: 99, scope: !2939, inlinedAt: !3894)
!3959 = !DILocation(line: 68, column: 102, scope: !2939, inlinedAt: !3894)
!3960 = !DILocation(line: 68, column: 109, scope: !2939, inlinedAt: !3894)
!3961 = !DILocation(line: 68, column: 114, scope: !2939, inlinedAt: !3894)
!3962 = !DILocation(line: 68, column: 94, scope: !2939, inlinedAt: !3894)
!3963 = !DILocation(line: 68, column: 63, scope: !2939, inlinedAt: !3894)
!3964 = !DILocation(line: 197, column: 40, scope: !3895)
!3965 = !DILocation(line: 197, column: 43, scope: !3895)
!3966 = !DILocation(line: 197, column: 54, scope: !3895)
!3967 = !DILocation(line: 197, column: 57, scope: !3895)
!3968 = !DILocation(line: 198, column: 13, scope: !3895)
!3969 = !DILocation(line: 198, column: 16, scope: !3895)
!3970 = !DILocation(line: 198, column: 24, scope: !3895)
!3971 = !DILocation(line: 199, column: 9, scope: !3895)
!3972 = !DILocation(line: 200, column: 13, scope: !3973)
!3973 = distinct !DILexicalBlock(scope: !3896, file: !1849, line: 199, column: 16)
!3974 = !DILocation(line: 203, column: 26, scope: !3897)
!3975 = !DILocation(line: 203, column: 24, scope: !3897)
!3976 = !DILocation(line: 203, column: 18, scope: !3897)
!3977 = !DILocation(line: 204, column: 19, scope: !3897)
!3978 = !DILocation(line: 204, column: 17, scope: !3897)
!3979 = !DILocation(line: 208, column: 18, scope: !3890)
!3980 = !DILocation(line: 208, column: 5, scope: !3890)
!3981 = !DILocation(line: 208, column: 8, scope: !3890)
!3982 = !DILocation(line: 208, column: 16, scope: !3890)
!3983 = !DILocation(line: 209, column: 19, scope: !3890)
!3984 = !DILocation(line: 209, column: 5, scope: !3890)
!3985 = !DILocation(line: 209, column: 8, scope: !3890)
!3986 = !DILocation(line: 209, column: 17, scope: !3890)
!3987 = !DILocation(line: 210, column: 1, scope: !3890)
!3988 = !DILocalVariable(name: "gb", arg: 1, scope: !1712, file: !911, line: 912, type: !1715)
!3989 = !DILocation(line: 912, column: 43, scope: !1712)
!3990 = !DILocalVariable(name: "i_lsps", arg: 2, scope: !1712, file: !911, line: 913, type: !1725)
!3991 = !DILocation(line: 913, column: 36, scope: !1712)
!3992 = !DILocalVariable(name: "old", arg: 3, scope: !1712, file: !911, line: 913, type: !1726)
!3993 = !DILocation(line: 913, column: 58, scope: !1712)
!3994 = !DILocalVariable(name: "a1", arg: 4, scope: !1712, file: !911, line: 914, type: !1725)
!3995 = !DILocation(line: 914, column: 36, scope: !1712)
!3996 = !DILocalVariable(name: "a2", arg: 5, scope: !1712, file: !911, line: 914, type: !1725)
!3997 = !DILocation(line: 914, column: 48, scope: !1712)
!3998 = !DILocalVariable(name: "q_mode", arg: 6, scope: !1712, file: !911, line: 914, type: !923)
!3999 = !DILocation(line: 914, column: 56, scope: !1712)
!4000 = !DILocalVariable(name: "ipol_tab", scope: !1712, file: !911, line: 923, type: !4001)
!4001 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4002, size: 64, align: 64)
!4002 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1735, size: 640, align: 32, elements: !1709)
!4003 = !DILocation(line: 923, column: 19, scope: !1712)
!4004 = !DILocation(line: 923, column: 38, scope: !1712)
!4005 = !DILocalVariable(name: "interpol", scope: !1712, file: !911, line: 925, type: !939)
!4006 = !DILocation(line: 925, column: 14, scope: !1712)
!4007 = !DILocalVariable(name: "v", scope: !1712, file: !911, line: 925, type: !4008)
!4008 = !DICompositeType(tag: DW_TAG_array_type, baseType: !939, size: 48, align: 16, elements: !1728)
!4009 = !DILocation(line: 925, column: 24, scope: !1712)
!4010 = !DILocalVariable(name: "n", scope: !1712, file: !911, line: 926, type: !923)
!4011 = !DILocation(line: 926, column: 9, scope: !1712)
!4012 = !DILocation(line: 928, column: 20, scope: !1712)
!4013 = !DILocation(line: 928, column: 24, scope: !1712)
!4014 = !DILocation(line: 928, column: 5, scope: !1712)
!4015 = !DILocation(line: 930, column: 25, scope: !1712)
!4016 = !DILocation(line: 930, column: 16, scope: !1712)
!4017 = !DILocation(line: 930, column: 14, scope: !1712)
!4018 = !DILocation(line: 931, column: 21, scope: !1712)
!4019 = !DILocation(line: 931, column: 12, scope: !1712)
!4020 = !DILocation(line: 931, column: 5, scope: !1712)
!4021 = !DILocation(line: 931, column: 10, scope: !1712)
!4022 = !DILocation(line: 932, column: 21, scope: !1712)
!4023 = !DILocation(line: 932, column: 12, scope: !1712)
!4024 = !DILocation(line: 932, column: 5, scope: !1712)
!4025 = !DILocation(line: 932, column: 10, scope: !1712)
!4026 = !DILocation(line: 933, column: 21, scope: !1712)
!4027 = !DILocation(line: 933, column: 12, scope: !1712)
!4028 = !DILocation(line: 933, column: 5, scope: !1712)
!4029 = !DILocation(line: 933, column: 10, scope: !1712)
!4030 = !DILocation(line: 935, column: 12, scope: !4031)
!4031 = distinct !DILexicalBlock(scope: !1712, file: !911, line: 935, column: 5)
!4032 = !DILocation(line: 935, column: 10, scope: !4031)
!4033 = !DILocation(line: 935, column: 17, scope: !4034)
!4034 = !DILexicalBlockFile(scope: !4035, file: !911, discriminator: 1)
!4035 = distinct !DILexicalBlock(scope: !4031, file: !911, line: 935, column: 5)
!4036 = !DILocation(line: 935, column: 19, scope: !4034)
!4037 = !DILocation(line: 935, column: 5, scope: !4034)
!4038 = !DILocalVariable(name: "delta", scope: !4039, file: !911, line: 936, type: !1704)
!4039 = distinct !DILexicalBlock(scope: !4035, file: !911, line: 935, column: 30)
!4040 = !DILocation(line: 936, column: 16, scope: !4039)
!4041 = !DILocation(line: 936, column: 28, scope: !4039)
!4042 = !DILocation(line: 936, column: 24, scope: !4039)
!4043 = !DILocation(line: 936, column: 40, scope: !4039)
!4044 = !DILocation(line: 936, column: 33, scope: !4039)
!4045 = !DILocation(line: 936, column: 31, scope: !4039)
!4046 = !DILocation(line: 937, column: 39, scope: !4039)
!4047 = !DILocation(line: 937, column: 17, scope: !4039)
!4048 = !DILocation(line: 937, column: 26, scope: !4039)
!4049 = !DILocation(line: 937, column: 44, scope: !4039)
!4050 = !DILocation(line: 937, column: 42, scope: !4039)
!4051 = !DILocation(line: 937, column: 59, scope: !4039)
!4052 = !DILocation(line: 937, column: 52, scope: !4039)
!4053 = !DILocation(line: 937, column: 50, scope: !4039)
!4054 = !DILocation(line: 937, column: 12, scope: !4039)
!4055 = !DILocation(line: 937, column: 9, scope: !4039)
!4056 = !DILocation(line: 937, column: 15, scope: !4039)
!4057 = !DILocation(line: 938, column: 44, scope: !4039)
!4058 = !DILocation(line: 938, column: 22, scope: !4039)
!4059 = !DILocation(line: 938, column: 31, scope: !4039)
!4060 = !DILocation(line: 938, column: 49, scope: !4039)
!4061 = !DILocation(line: 938, column: 47, scope: !4039)
!4062 = !DILocation(line: 938, column: 64, scope: !4039)
!4063 = !DILocation(line: 938, column: 57, scope: !4039)
!4064 = !DILocation(line: 938, column: 55, scope: !4039)
!4065 = !DILocation(line: 938, column: 17, scope: !4039)
!4066 = !DILocation(line: 938, column: 15, scope: !4039)
!4067 = !DILocation(line: 938, column: 9, scope: !4039)
!4068 = !DILocation(line: 938, column: 20, scope: !4039)
!4069 = !DILocation(line: 939, column: 5, scope: !4039)
!4070 = !DILocation(line: 935, column: 26, scope: !4071)
!4071 = !DILexicalBlockFile(scope: !4035, file: !911, discriminator: 2)
!4072 = !DILocation(line: 935, column: 5, scope: !4071)
!4073 = distinct !{!4073, !4074}
!4074 = !DILocation(line: 935, column: 5, scope: !1712)
!4075 = !DILocation(line: 941, column: 18, scope: !1712)
!4076 = !DILocation(line: 941, column: 26, scope: !1712)
!4077 = !DILocation(line: 941, column: 5, scope: !1712)
!4078 = !DILocation(line: 943, column: 1, scope: !1712)
!4079 = !DILocalVariable(name: "gb", arg: 1, scope: !1744, file: !911, line: 981, type: !1715)
!4080 = !DILocation(line: 981, column: 43, scope: !1744)
!4081 = !DILocalVariable(name: "i_lsps", arg: 2, scope: !1744, file: !911, line: 982, type: !1725)
!4082 = !DILocation(line: 982, column: 36, scope: !1744)
!4083 = !DILocalVariable(name: "old", arg: 3, scope: !1744, file: !911, line: 982, type: !1726)
!4084 = !DILocation(line: 982, column: 58, scope: !1744)
!4085 = !DILocalVariable(name: "a1", arg: 4, scope: !1744, file: !911, line: 983, type: !1725)
!4086 = !DILocation(line: 983, column: 36, scope: !1744)
!4087 = !DILocalVariable(name: "a2", arg: 5, scope: !1744, file: !911, line: 983, type: !1725)
!4088 = !DILocation(line: 983, column: 48, scope: !1744)
!4089 = !DILocalVariable(name: "q_mode", arg: 6, scope: !1744, file: !911, line: 983, type: !923)
!4090 = !DILocation(line: 983, column: 56, scope: !1744)
!4091 = !DILocalVariable(name: "ipol_tab", scope: !1744, file: !911, line: 992, type: !4092)
!4092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4093, size: 64, align: 64)
!4093 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1735, size: 1024, align: 32, elements: !1705)
!4094 = !DILocation(line: 992, column: 19, scope: !1744)
!4095 = !DILocation(line: 992, column: 38, scope: !1744)
!4096 = !DILocalVariable(name: "interpol", scope: !1744, file: !911, line: 994, type: !939)
!4097 = !DILocation(line: 994, column: 14, scope: !1744)
!4098 = !DILocalVariable(name: "v", scope: !1744, file: !911, line: 994, type: !4008)
!4099 = !DILocation(line: 994, column: 24, scope: !1744)
!4100 = !DILocalVariable(name: "n", scope: !1744, file: !911, line: 995, type: !923)
!4101 = !DILocation(line: 995, column: 9, scope: !1744)
!4102 = !DILocation(line: 997, column: 20, scope: !1744)
!4103 = !DILocation(line: 997, column: 24, scope: !1744)
!4104 = !DILocation(line: 997, column: 5, scope: !1744)
!4105 = !DILocation(line: 999, column: 25, scope: !1744)
!4106 = !DILocation(line: 999, column: 16, scope: !1744)
!4107 = !DILocation(line: 999, column: 14, scope: !1744)
!4108 = !DILocation(line: 1000, column: 21, scope: !1744)
!4109 = !DILocation(line: 1000, column: 12, scope: !1744)
!4110 = !DILocation(line: 1000, column: 5, scope: !1744)
!4111 = !DILocation(line: 1000, column: 10, scope: !1744)
!4112 = !DILocation(line: 1001, column: 21, scope: !1744)
!4113 = !DILocation(line: 1001, column: 12, scope: !1744)
!4114 = !DILocation(line: 1001, column: 5, scope: !1744)
!4115 = !DILocation(line: 1001, column: 10, scope: !1744)
!4116 = !DILocation(line: 1002, column: 21, scope: !1744)
!4117 = !DILocation(line: 1002, column: 12, scope: !1744)
!4118 = !DILocation(line: 1002, column: 5, scope: !1744)
!4119 = !DILocation(line: 1002, column: 10, scope: !1744)
!4120 = !DILocation(line: 1004, column: 12, scope: !4121)
!4121 = distinct !DILexicalBlock(scope: !1744, file: !911, line: 1004, column: 5)
!4122 = !DILocation(line: 1004, column: 10, scope: !4121)
!4123 = !DILocation(line: 1004, column: 17, scope: !4124)
!4124 = !DILexicalBlockFile(scope: !4125, file: !911, discriminator: 1)
!4125 = distinct !DILexicalBlock(scope: !4121, file: !911, line: 1004, column: 5)
!4126 = !DILocation(line: 1004, column: 19, scope: !4124)
!4127 = !DILocation(line: 1004, column: 5, scope: !4124)
!4128 = !DILocalVariable(name: "delta", scope: !4129, file: !911, line: 1005, type: !1704)
!4129 = distinct !DILexicalBlock(scope: !4125, file: !911, line: 1004, column: 30)
!4130 = !DILocation(line: 1005, column: 16, scope: !4129)
!4131 = !DILocation(line: 1005, column: 28, scope: !4129)
!4132 = !DILocation(line: 1005, column: 24, scope: !4129)
!4133 = !DILocation(line: 1005, column: 40, scope: !4129)
!4134 = !DILocation(line: 1005, column: 33, scope: !4129)
!4135 = !DILocation(line: 1005, column: 31, scope: !4129)
!4136 = !DILocation(line: 1006, column: 39, scope: !4129)
!4137 = !DILocation(line: 1006, column: 17, scope: !4129)
!4138 = !DILocation(line: 1006, column: 26, scope: !4129)
!4139 = !DILocation(line: 1006, column: 44, scope: !4129)
!4140 = !DILocation(line: 1006, column: 42, scope: !4129)
!4141 = !DILocation(line: 1006, column: 59, scope: !4129)
!4142 = !DILocation(line: 1006, column: 52, scope: !4129)
!4143 = !DILocation(line: 1006, column: 50, scope: !4129)
!4144 = !DILocation(line: 1006, column: 12, scope: !4129)
!4145 = !DILocation(line: 1006, column: 9, scope: !4129)
!4146 = !DILocation(line: 1006, column: 15, scope: !4129)
!4147 = !DILocation(line: 1007, column: 44, scope: !4129)
!4148 = !DILocation(line: 1007, column: 22, scope: !4129)
!4149 = !DILocation(line: 1007, column: 31, scope: !4129)
!4150 = !DILocation(line: 1007, column: 49, scope: !4129)
!4151 = !DILocation(line: 1007, column: 47, scope: !4129)
!4152 = !DILocation(line: 1007, column: 64, scope: !4129)
!4153 = !DILocation(line: 1007, column: 57, scope: !4129)
!4154 = !DILocation(line: 1007, column: 55, scope: !4129)
!4155 = !DILocation(line: 1007, column: 17, scope: !4129)
!4156 = !DILocation(line: 1007, column: 15, scope: !4129)
!4157 = !DILocation(line: 1007, column: 9, scope: !4129)
!4158 = !DILocation(line: 1007, column: 20, scope: !4129)
!4159 = !DILocation(line: 1008, column: 5, scope: !4129)
!4160 = !DILocation(line: 1004, column: 26, scope: !4161)
!4161 = !DILexicalBlockFile(scope: !4125, file: !911, discriminator: 2)
!4162 = !DILocation(line: 1004, column: 5, scope: !4161)
!4163 = distinct !{!4163, !4164}
!4164 = !DILocation(line: 1004, column: 5, scope: !1744)
!4165 = !DILocation(line: 1010, column: 19, scope: !1744)
!4166 = !DILocation(line: 1010, column: 27, scope: !1744)
!4167 = !DILocation(line: 1010, column: 5, scope: !1744)
!4168 = !DILocation(line: 1012, column: 19, scope: !1744)
!4169 = !DILocation(line: 1012, column: 32, scope: !1744)
!4170 = !DILocation(line: 1012, column: 5, scope: !1744)
!4171 = !DILocation(line: 1014, column: 19, scope: !1744)
!4172 = !DILocation(line: 1014, column: 32, scope: !1744)
!4173 = !DILocation(line: 1014, column: 5, scope: !1744)
!4174 = !DILocation(line: 1016, column: 1, scope: !1744)
!4175 = distinct !DISubprogram(name: "stabilize_lsps", scope: !911, file: !911, line: 1653, type: !4176, isLocal: true, isDefinition: true, scopeLine: 1654, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!4176 = !DISubroutineType(types: !4177)
!4177 = !{null, !1725, !923}
!4178 = !DILocalVariable(name: "lsps", arg: 1, scope: !4175, file: !911, line: 1653, type: !1725)
!4179 = !DILocation(line: 1653, column: 36, scope: !4175)
!4180 = !DILocalVariable(name: "num", arg: 2, scope: !4175, file: !911, line: 1653, type: !923)
!4181 = !DILocation(line: 1653, column: 46, scope: !4175)
!4182 = !DILocalVariable(name: "n", scope: !4175, file: !911, line: 1655, type: !923)
!4183 = !DILocation(line: 1655, column: 9, scope: !4175)
!4184 = !DILocalVariable(name: "m", scope: !4175, file: !911, line: 1655, type: !923)
!4185 = !DILocation(line: 1655, column: 12, scope: !4175)
!4186 = !DILocalVariable(name: "l", scope: !4175, file: !911, line: 1655, type: !923)
!4187 = !DILocation(line: 1655, column: 15, scope: !4175)
!4188 = !DILocation(line: 1660, column: 17, scope: !4175)
!4189 = !DILocation(line: 1660, column: 26, scope: !4175)
!4190 = !DILocation(line: 1660, column: 16, scope: !4175)
!4191 = !DILocation(line: 1660, column: 25, scope: !4192)
!4192 = !DILexicalBlockFile(scope: !4175, file: !911, discriminator: 1)
!4193 = !DILocation(line: 1660, column: 16, scope: !4192)
!4194 = !DILocation(line: 1660, column: 16, scope: !4195)
!4195 = !DILexicalBlockFile(scope: !4175, file: !911, discriminator: 2)
!4196 = !DILocation(line: 1660, column: 16, scope: !4197)
!4197 = !DILexicalBlockFile(scope: !4175, file: !911, discriminator: 3)
!4198 = !DILocation(line: 1660, column: 5, scope: !4197)
!4199 = !DILocation(line: 1660, column: 13, scope: !4197)
!4200 = !DILocation(line: 1661, column: 12, scope: !4201)
!4201 = distinct !DILexicalBlock(scope: !4175, file: !911, line: 1661, column: 5)
!4202 = !DILocation(line: 1661, column: 10, scope: !4201)
!4203 = !DILocation(line: 1661, column: 17, scope: !4204)
!4204 = !DILexicalBlockFile(scope: !4205, file: !911, discriminator: 1)
!4205 = distinct !DILexicalBlock(scope: !4201, file: !911, line: 1661, column: 5)
!4206 = !DILocation(line: 1661, column: 21, scope: !4204)
!4207 = !DILocation(line: 1661, column: 19, scope: !4204)
!4208 = !DILocation(line: 1661, column: 5, scope: !4204)
!4209 = !DILocation(line: 1662, column: 26, scope: !4205)
!4210 = !DILocation(line: 1662, column: 21, scope: !4205)
!4211 = !DILocation(line: 1662, column: 38, scope: !4205)
!4212 = !DILocation(line: 1662, column: 40, scope: !4205)
!4213 = !DILocation(line: 1662, column: 33, scope: !4205)
!4214 = !DILocation(line: 1662, column: 45, scope: !4205)
!4215 = !DILocation(line: 1662, column: 30, scope: !4205)
!4216 = !DILocation(line: 1662, column: 20, scope: !4205)
!4217 = !DILocation(line: 1662, column: 30, scope: !4204)
!4218 = !DILocation(line: 1662, column: 25, scope: !4204)
!4219 = !DILocation(line: 1662, column: 20, scope: !4204)
!4220 = !DILocation(line: 1662, column: 42, scope: !4221)
!4221 = !DILexicalBlockFile(scope: !4205, file: !911, discriminator: 2)
!4222 = !DILocation(line: 1662, column: 44, scope: !4221)
!4223 = !DILocation(line: 1662, column: 37, scope: !4221)
!4224 = !DILocation(line: 1662, column: 49, scope: !4221)
!4225 = !DILocation(line: 1662, column: 20, scope: !4221)
!4226 = !DILocation(line: 1662, column: 20, scope: !4227)
!4227 = !DILexicalBlockFile(scope: !4205, file: !911, discriminator: 3)
!4228 = !DILocation(line: 1662, column: 14, scope: !4227)
!4229 = !DILocation(line: 1662, column: 9, scope: !4227)
!4230 = !DILocation(line: 1662, column: 17, scope: !4227)
!4231 = !DILocation(line: 1661, column: 27, scope: !4221)
!4232 = !DILocation(line: 1661, column: 5, scope: !4221)
!4233 = distinct !{!4233, !4234}
!4234 = !DILocation(line: 1661, column: 5, scope: !4175)
!4235 = !DILocation(line: 1663, column: 28, scope: !4175)
!4236 = !DILocation(line: 1663, column: 32, scope: !4175)
!4237 = !DILocation(line: 1663, column: 23, scope: !4175)
!4238 = !DILocation(line: 1663, column: 38, scope: !4175)
!4239 = !DILocation(line: 1663, column: 22, scope: !4175)
!4240 = !DILocation(line: 1663, column: 22, scope: !4192)
!4241 = !DILocation(line: 1663, column: 30, scope: !4195)
!4242 = !DILocation(line: 1663, column: 34, scope: !4195)
!4243 = !DILocation(line: 1663, column: 25, scope: !4195)
!4244 = !DILocation(line: 1663, column: 22, scope: !4195)
!4245 = !DILocation(line: 1663, column: 22, scope: !4197)
!4246 = !DILocation(line: 1663, column: 10, scope: !4197)
!4247 = !DILocation(line: 1663, column: 14, scope: !4197)
!4248 = !DILocation(line: 1663, column: 5, scope: !4197)
!4249 = !DILocation(line: 1663, column: 19, scope: !4197)
!4250 = !DILocation(line: 1667, column: 12, scope: !4251)
!4251 = distinct !DILexicalBlock(scope: !4175, file: !911, line: 1667, column: 5)
!4252 = !DILocation(line: 1667, column: 10, scope: !4251)
!4253 = !DILocation(line: 1667, column: 17, scope: !4254)
!4254 = !DILexicalBlockFile(scope: !4255, file: !911, discriminator: 1)
!4255 = distinct !DILexicalBlock(scope: !4251, file: !911, line: 1667, column: 5)
!4256 = !DILocation(line: 1667, column: 21, scope: !4254)
!4257 = !DILocation(line: 1667, column: 19, scope: !4254)
!4258 = !DILocation(line: 1667, column: 5, scope: !4254)
!4259 = !DILocation(line: 1668, column: 18, scope: !4260)
!4260 = distinct !DILexicalBlock(scope: !4261, file: !911, line: 1668, column: 13)
!4261 = distinct !DILexicalBlock(scope: !4255, file: !911, line: 1667, column: 31)
!4262 = !DILocation(line: 1668, column: 13, scope: !4260)
!4263 = !DILocation(line: 1668, column: 28, scope: !4260)
!4264 = !DILocation(line: 1668, column: 30, scope: !4260)
!4265 = !DILocation(line: 1668, column: 23, scope: !4260)
!4266 = !DILocation(line: 1668, column: 21, scope: !4260)
!4267 = !DILocation(line: 1668, column: 13, scope: !4261)
!4268 = !DILocation(line: 1669, column: 20, scope: !4269)
!4269 = distinct !DILexicalBlock(scope: !4270, file: !911, line: 1669, column: 13)
!4270 = distinct !DILexicalBlock(scope: !4260, file: !911, line: 1668, column: 36)
!4271 = !DILocation(line: 1669, column: 18, scope: !4269)
!4272 = !DILocation(line: 1669, column: 25, scope: !4273)
!4273 = !DILexicalBlockFile(scope: !4274, file: !911, discriminator: 1)
!4274 = distinct !DILexicalBlock(scope: !4269, file: !911, line: 1669, column: 13)
!4275 = !DILocation(line: 1669, column: 29, scope: !4273)
!4276 = !DILocation(line: 1669, column: 27, scope: !4273)
!4277 = !DILocation(line: 1669, column: 13, scope: !4273)
!4278 = !DILocalVariable(name: "tmp", scope: !4279, file: !911, line: 1670, type: !1704)
!4279 = distinct !DILexicalBlock(scope: !4274, file: !911, line: 1669, column: 39)
!4280 = !DILocation(line: 1670, column: 24, scope: !4279)
!4281 = !DILocation(line: 1670, column: 35, scope: !4279)
!4282 = !DILocation(line: 1670, column: 30, scope: !4279)
!4283 = !DILocation(line: 1671, column: 26, scope: !4284)
!4284 = distinct !DILexicalBlock(scope: !4279, file: !911, line: 1671, column: 17)
!4285 = !DILocation(line: 1671, column: 28, scope: !4284)
!4286 = !DILocation(line: 1671, column: 24, scope: !4284)
!4287 = !DILocation(line: 1671, column: 22, scope: !4284)
!4288 = !DILocation(line: 1671, column: 33, scope: !4289)
!4289 = !DILexicalBlockFile(scope: !4290, file: !911, discriminator: 1)
!4290 = distinct !DILexicalBlock(scope: !4284, file: !911, line: 1671, column: 17)
!4291 = !DILocation(line: 1671, column: 35, scope: !4289)
!4292 = !DILocation(line: 1671, column: 17, scope: !4289)
!4293 = !DILocation(line: 1672, column: 30, scope: !4294)
!4294 = distinct !DILexicalBlock(scope: !4295, file: !911, line: 1672, column: 25)
!4295 = distinct !DILexicalBlock(scope: !4290, file: !911, line: 1671, column: 46)
!4296 = !DILocation(line: 1672, column: 25, scope: !4294)
!4297 = !DILocation(line: 1672, column: 36, scope: !4294)
!4298 = !DILocation(line: 1672, column: 33, scope: !4294)
!4299 = !DILocation(line: 1672, column: 25, scope: !4295)
!4300 = !DILocation(line: 1672, column: 41, scope: !4301)
!4301 = !DILexicalBlockFile(scope: !4294, file: !911, discriminator: 1)
!4302 = !DILocation(line: 1673, column: 40, scope: !4295)
!4303 = !DILocation(line: 1673, column: 35, scope: !4295)
!4304 = !DILocation(line: 1673, column: 26, scope: !4295)
!4305 = !DILocation(line: 1673, column: 28, scope: !4295)
!4306 = !DILocation(line: 1673, column: 21, scope: !4295)
!4307 = !DILocation(line: 1673, column: 33, scope: !4295)
!4308 = !DILocation(line: 1674, column: 17, scope: !4295)
!4309 = !DILocation(line: 1671, column: 42, scope: !4310)
!4310 = !DILexicalBlockFile(scope: !4290, file: !911, discriminator: 2)
!4311 = !DILocation(line: 1671, column: 17, scope: !4310)
!4312 = distinct !{!4312, !4313}
!4313 = !DILocation(line: 1671, column: 17, scope: !4279)
!4314 = !DILocation(line: 1675, column: 31, scope: !4279)
!4315 = !DILocation(line: 1675, column: 22, scope: !4279)
!4316 = !DILocation(line: 1675, column: 24, scope: !4279)
!4317 = !DILocation(line: 1675, column: 17, scope: !4279)
!4318 = !DILocation(line: 1675, column: 29, scope: !4279)
!4319 = !DILocation(line: 1676, column: 13, scope: !4279)
!4320 = !DILocation(line: 1669, column: 35, scope: !4321)
!4321 = !DILexicalBlockFile(scope: !4274, file: !911, discriminator: 2)
!4322 = !DILocation(line: 1669, column: 13, scope: !4321)
!4323 = distinct !{!4323, !4324}
!4324 = !DILocation(line: 1669, column: 13, scope: !4270)
!4325 = !DILocation(line: 1677, column: 13, scope: !4270)
!4326 = !DILocation(line: 1679, column: 5, scope: !4261)
!4327 = !DILocation(line: 1667, column: 27, scope: !4328)
!4328 = !DILexicalBlockFile(scope: !4255, file: !911, discriminator: 2)
!4329 = !DILocation(line: 1667, column: 5, scope: !4328)
!4330 = distinct !{!4330, !4331}
!4331 = !DILocation(line: 1667, column: 5, scope: !4175)
!4332 = !DILocation(line: 1680, column: 1, scope: !4175)
!4333 = !DILocalVariable(name: "gb", arg: 1, scope: !1761, file: !911, line: 886, type: !1715)
!4334 = !DILocation(line: 886, column: 43, scope: !1761)
!4335 = !DILocalVariable(name: "lsps", arg: 2, scope: !1761, file: !911, line: 886, type: !1725)
!4336 = !DILocation(line: 886, column: 55, scope: !1761)
!4337 = !DILocalVariable(name: "v", scope: !1761, file: !911, line: 897, type: !1838)
!4338 = !DILocation(line: 897, column: 14, scope: !1761)
!4339 = !DILocation(line: 899, column: 21, scope: !1761)
!4340 = !DILocation(line: 899, column: 12, scope: !1761)
!4341 = !DILocation(line: 899, column: 5, scope: !1761)
!4342 = !DILocation(line: 899, column: 10, scope: !1761)
!4343 = !DILocation(line: 900, column: 21, scope: !1761)
!4344 = !DILocation(line: 900, column: 12, scope: !1761)
!4345 = !DILocation(line: 900, column: 5, scope: !1761)
!4346 = !DILocation(line: 900, column: 10, scope: !1761)
!4347 = !DILocation(line: 901, column: 21, scope: !1761)
!4348 = !DILocation(line: 901, column: 12, scope: !1761)
!4349 = !DILocation(line: 901, column: 5, scope: !1761)
!4350 = !DILocation(line: 901, column: 10, scope: !1761)
!4351 = !DILocation(line: 902, column: 21, scope: !1761)
!4352 = !DILocation(line: 902, column: 12, scope: !1761)
!4353 = !DILocation(line: 902, column: 5, scope: !1761)
!4354 = !DILocation(line: 902, column: 10, scope: !1761)
!4355 = !DILocation(line: 904, column: 18, scope: !1761)
!4356 = !DILocation(line: 904, column: 28, scope: !1761)
!4357 = !DILocation(line: 904, column: 5, scope: !1761)
!4358 = !DILocation(line: 906, column: 1, scope: !1761)
!4359 = !DILocalVariable(name: "gb", arg: 1, scope: !1773, file: !911, line: 948, type: !1715)
!4360 = !DILocation(line: 948, column: 43, scope: !1773)
!4361 = !DILocalVariable(name: "lsps", arg: 2, scope: !1773, file: !911, line: 948, type: !1725)
!4362 = !DILocation(line: 948, column: 55, scope: !1773)
!4363 = !DILocalVariable(name: "v", scope: !1773, file: !911, line: 961, type: !4364)
!4364 = !DICompositeType(tag: DW_TAG_array_type, baseType: !939, size: 80, align: 16, elements: !1775)
!4365 = !DILocation(line: 961, column: 14, scope: !1773)
!4366 = !DILocation(line: 963, column: 21, scope: !1773)
!4367 = !DILocation(line: 963, column: 12, scope: !1773)
!4368 = !DILocation(line: 963, column: 5, scope: !1773)
!4369 = !DILocation(line: 963, column: 10, scope: !1773)
!4370 = !DILocation(line: 964, column: 21, scope: !1773)
!4371 = !DILocation(line: 964, column: 12, scope: !1773)
!4372 = !DILocation(line: 964, column: 5, scope: !1773)
!4373 = !DILocation(line: 964, column: 10, scope: !1773)
!4374 = !DILocation(line: 965, column: 21, scope: !1773)
!4375 = !DILocation(line: 965, column: 12, scope: !1773)
!4376 = !DILocation(line: 965, column: 5, scope: !1773)
!4377 = !DILocation(line: 965, column: 10, scope: !1773)
!4378 = !DILocation(line: 966, column: 21, scope: !1773)
!4379 = !DILocation(line: 966, column: 12, scope: !1773)
!4380 = !DILocation(line: 966, column: 5, scope: !1773)
!4381 = !DILocation(line: 966, column: 10, scope: !1773)
!4382 = !DILocation(line: 967, column: 21, scope: !1773)
!4383 = !DILocation(line: 967, column: 12, scope: !1773)
!4384 = !DILocation(line: 967, column: 5, scope: !1773)
!4385 = !DILocation(line: 967, column: 10, scope: !1773)
!4386 = !DILocation(line: 969, column: 19, scope: !1773)
!4387 = !DILocation(line: 969, column: 28, scope: !1773)
!4388 = !DILocation(line: 969, column: 5, scope: !1773)
!4389 = !DILocation(line: 971, column: 19, scope: !1773)
!4390 = !DILocation(line: 971, column: 32, scope: !1773)
!4391 = !DILocation(line: 971, column: 5, scope: !1773)
!4392 = !DILocation(line: 973, column: 19, scope: !1773)
!4393 = !DILocation(line: 973, column: 33, scope: !1773)
!4394 = !DILocation(line: 973, column: 5, scope: !1773)
!4395 = !DILocation(line: 975, column: 1, scope: !1773)
!4396 = distinct !DISubprogram(name: "synth_frame", scope: !911, file: !911, line: 1477, type: !4397, isLocal: true, isDefinition: true, scopeLine: 1481, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!4397 = !DISubroutineType(types: !4398)
!4398 = !{!923, !1038, !1715, !923, !937, !1726, !1726, !937, !937}
!4399 = !DILocation(line: 127, column: 87, scope: !3702, inlinedAt: !4400)
!4400 = distinct !DILocation(line: 1558, column: 32, scope: !4401)
!4401 = distinct !DILexicalBlock(scope: !4402, file: !911, line: 1541, column: 32)
!4402 = distinct !DILexicalBlock(scope: !4403, file: !911, line: 1540, column: 47)
!4403 = distinct !DILexicalBlock(scope: !4404, file: !911, line: 1536, column: 56)
!4404 = distinct !DILexicalBlock(scope: !4405, file: !911, line: 1536, column: 5)
!4405 = distinct !DILexicalBlock(scope: !4396, file: !911, line: 1536, column: 5)
!4406 = !DILocation(line: 127, column: 94, scope: !3702, inlinedAt: !4400)
!4407 = !DILocation(line: 127, column: 104, scope: !3702, inlinedAt: !4400)
!4408 = !DILocation(line: 66, column: 98, scope: !2939, inlinedAt: !4409)
!4409 = distinct !DILocation(line: 788, column: 601, scope: !4410, inlinedAt: !4419)
!4410 = !DILexicalBlockFile(scope: !4411, file: !1717, discriminator: 11)
!4411 = distinct !DILexicalBlock(scope: !4412, file: !1717, line: 788, column: 490)
!4412 = distinct !DILexicalBlock(scope: !4413, file: !1717, line: 788, column: 466)
!4413 = distinct !DILexicalBlock(scope: !4414, file: !1717, line: 788, column: 154)
!4414 = distinct !DILexicalBlock(scope: !4415, file: !1717, line: 788, column: 130)
!4415 = distinct !DILexicalBlock(scope: !4416, file: !1717, line: 788, column: 8)
!4416 = distinct !DISubprogram(name: "get_vlc2", scope: !1717, file: !1717, line: 762, type: !4417, isLocal: true, isDefinition: true, scopeLine: 764, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!4417 = !DISubroutineType(types: !4418)
!4418 = !{!923, !1715, !1695, !923, !923}
!4419 = distinct !DILocation(line: 1487, column: 30, scope: !4396)
!4420 = !DILocation(line: 66, column: 98, scope: !2939, inlinedAt: !4421)
!4421 = distinct !DILocation(line: 788, column: 259, scope: !4422, inlinedAt: !4419)
!4422 = !DILexicalBlockFile(scope: !4413, file: !1717, discriminator: 6)
!4423 = !DILocation(line: 66, column: 98, scope: !2939, inlinedAt: !4424)
!4424 = distinct !DILocation(line: 786, column: 16, scope: !4416, inlinedAt: !4419)
!4425 = !DILocalVariable(name: "s", arg: 1, scope: !4416, file: !1717, line: 762, type: !1715)
!4426 = !DILocation(line: 762, column: 74, scope: !4416, inlinedAt: !4419)
!4427 = !DILocalVariable(name: "table", arg: 2, scope: !4416, file: !1717, line: 762, type: !1695)
!4428 = !DILocation(line: 762, column: 87, scope: !4416, inlinedAt: !4419)
!4429 = !DILocalVariable(name: "bits", arg: 3, scope: !4416, file: !1717, line: 763, type: !923)
!4430 = !DILocation(line: 763, column: 42, scope: !4416, inlinedAt: !4419)
!4431 = !DILocalVariable(name: "max_depth", arg: 4, scope: !4416, file: !1717, line: 763, type: !923)
!4432 = !DILocation(line: 763, column: 52, scope: !4416, inlinedAt: !4419)
!4433 = !DILocalVariable(name: "code", scope: !4416, file: !1717, line: 783, type: !923)
!4434 = !DILocation(line: 783, column: 9, scope: !4416, inlinedAt: !4419)
!4435 = !DILocalVariable(name: "re_index", scope: !4416, file: !1717, line: 785, type: !924)
!4436 = !DILocation(line: 785, column: 18, scope: !4416, inlinedAt: !4419)
!4437 = !DILocalVariable(name: "re_cache", scope: !4416, file: !1717, line: 785, type: !924)
!4438 = !DILocation(line: 785, column: 78, scope: !4416, inlinedAt: !4419)
!4439 = !DILocalVariable(name: "re_size_plus8", scope: !4416, file: !1717, line: 785, type: !924)
!4440 = !DILocation(line: 785, column: 101, scope: !4416, inlinedAt: !4419)
!4441 = !DILocalVariable(name: "n", scope: !4415, file: !1717, line: 788, type: !923)
!4442 = !DILocation(line: 788, column: 14, scope: !4415, inlinedAt: !4419)
!4443 = !DILocalVariable(name: "nb_bits", scope: !4415, file: !1717, line: 788, type: !923)
!4444 = !DILocation(line: 788, column: 17, scope: !4415, inlinedAt: !4419)
!4445 = !DILocalVariable(name: "index", scope: !4415, file: !1717, line: 788, type: !924)
!4446 = !DILocation(line: 788, column: 39, scope: !4415, inlinedAt: !4419)
!4447 = !DILocalVariable(name: "ctx", arg: 1, scope: !4396, file: !911, line: 1477, type: !1038)
!4448 = !DILocation(line: 1477, column: 40, scope: !4396)
!4449 = !DILocalVariable(name: "gb", arg: 2, scope: !4396, file: !911, line: 1477, type: !1715)
!4450 = !DILocation(line: 1477, column: 60, scope: !4396)
!4451 = !DILocalVariable(name: "frame_idx", arg: 3, scope: !4396, file: !911, line: 1477, type: !923)
!4452 = !DILocation(line: 1477, column: 68, scope: !4396)
!4453 = !DILocalVariable(name: "samples", arg: 4, scope: !4396, file: !911, line: 1478, type: !937)
!4454 = !DILocation(line: 1478, column: 31, scope: !4396)
!4455 = !DILocalVariable(name: "lsps", arg: 5, scope: !4396, file: !911, line: 1479, type: !1726)
!4456 = !DILocation(line: 1479, column: 38, scope: !4396)
!4457 = !DILocalVariable(name: "prev_lsps", arg: 6, scope: !4396, file: !911, line: 1479, type: !1726)
!4458 = !DILocation(line: 1479, column: 58, scope: !4396)
!4459 = !DILocalVariable(name: "excitation", arg: 7, scope: !4396, file: !911, line: 1480, type: !937)
!4460 = !DILocation(line: 1480, column: 31, scope: !4396)
!4461 = !DILocalVariable(name: "synth", arg: 8, scope: !4396, file: !911, line: 1480, type: !937)
!4462 = !DILocation(line: 1480, column: 50, scope: !4396)
!4463 = !DILocalVariable(name: "s", scope: !4396, file: !911, line: 1482, type: !1812)
!4464 = !DILocation(line: 1482, column: 22, scope: !4396)
!4465 = !DILocation(line: 1482, column: 26, scope: !4396)
!4466 = !DILocation(line: 1482, column: 31, scope: !4396)
!4467 = !DILocalVariable(name: "n", scope: !4396, file: !911, line: 1483, type: !923)
!4468 = !DILocation(line: 1483, column: 9, scope: !4396)
!4469 = !DILocalVariable(name: "n_blocks_x2", scope: !4396, file: !911, line: 1483, type: !923)
!4470 = !DILocation(line: 1483, column: 12, scope: !4396)
!4471 = !DILocalVariable(name: "log_n_blocks_x2", scope: !4396, file: !911, line: 1483, type: !923)
!4472 = !DILocation(line: 1483, column: 25, scope: !4396)
!4473 = !DILocalVariable(name: "cur_pitch_val", scope: !4396, file: !911, line: 1483, type: !923)
!4474 = !DILocation(line: 1483, column: 42, scope: !4396)
!4475 = !DILocation(line: 1483, column: 56, scope: !4396)
!4476 = !DILocalVariable(name: "pitch", scope: !4396, file: !911, line: 1484, type: !1069)
!4477 = !DILocation(line: 1484, column: 9, scope: !4396)
!4478 = !DILocalVariable(name: "last_block_pitch", scope: !4396, file: !911, line: 1484, type: !923)
!4479 = !DILocation(line: 1484, column: 19, scope: !4396)
!4480 = !DILocation(line: 1484, column: 36, scope: !4396)
!4481 = !DILocalVariable(name: "bd_idx", scope: !4396, file: !911, line: 1487, type: !923)
!4482 = !DILocation(line: 1487, column: 9, scope: !4396)
!4483 = !DILocation(line: 1487, column: 39, scope: !4396)
!4484 = !DILocation(line: 1487, column: 58, scope: !4396)
!4485 = !DILocation(line: 1487, column: 30, scope: !4396)
!4486 = !DILocation(line: 785, column: 30, scope: !4416, inlinedAt: !4419)
!4487 = !DILocation(line: 785, column: 34, scope: !4416, inlinedAt: !4419)
!4488 = !DILocation(line: 785, column: 118, scope: !4416, inlinedAt: !4419)
!4489 = !DILocation(line: 785, column: 122, scope: !4416, inlinedAt: !4419)
!4490 = !DILocation(line: 786, column: 60, scope: !4416, inlinedAt: !4419)
!4491 = !DILocation(line: 786, column: 64, scope: !4416, inlinedAt: !4419)
!4492 = !DILocation(line: 786, column: 74, scope: !4416, inlinedAt: !4419)
!4493 = !DILocation(line: 786, column: 83, scope: !4416, inlinedAt: !4419)
!4494 = !DILocation(line: 786, column: 71, scope: !4416, inlinedAt: !4419)
!4495 = !DILocation(line: 786, column: 92, scope: !4416, inlinedAt: !4419)
!4496 = !DILocation(line: 786, column: 16, scope: !4416, inlinedAt: !4419)
!4497 = !DILocation(line: 68, column: 16, scope: !2939, inlinedAt: !4424)
!4498 = !DILocation(line: 68, column: 19, scope: !2939, inlinedAt: !4424)
!4499 = !DILocation(line: 68, column: 24, scope: !2939, inlinedAt: !4424)
!4500 = !DILocation(line: 68, column: 38, scope: !2939, inlinedAt: !4424)
!4501 = !DILocation(line: 68, column: 41, scope: !2939, inlinedAt: !4424)
!4502 = !DILocation(line: 68, column: 46, scope: !2939, inlinedAt: !4424)
!4503 = !DILocation(line: 68, column: 34, scope: !2939, inlinedAt: !4424)
!4504 = !DILocation(line: 68, column: 57, scope: !2939, inlinedAt: !4424)
!4505 = !DILocation(line: 68, column: 69, scope: !2939, inlinedAt: !4424)
!4506 = !DILocation(line: 68, column: 72, scope: !2939, inlinedAt: !4424)
!4507 = !DILocation(line: 68, column: 79, scope: !2939, inlinedAt: !4424)
!4508 = !DILocation(line: 68, column: 84, scope: !2939, inlinedAt: !4424)
!4509 = !DILocation(line: 68, column: 99, scope: !2939, inlinedAt: !4424)
!4510 = !DILocation(line: 68, column: 102, scope: !2939, inlinedAt: !4424)
!4511 = !DILocation(line: 68, column: 109, scope: !2939, inlinedAt: !4424)
!4512 = !DILocation(line: 68, column: 114, scope: !2939, inlinedAt: !4424)
!4513 = !DILocation(line: 68, column: 94, scope: !2939, inlinedAt: !4424)
!4514 = !DILocation(line: 68, column: 63, scope: !2939, inlinedAt: !4424)
!4515 = !DILocation(line: 786, column: 100, scope: !4416, inlinedAt: !4419)
!4516 = !DILocation(line: 786, column: 109, scope: !4416, inlinedAt: !4419)
!4517 = !DILocation(line: 786, column: 96, scope: !4416, inlinedAt: !4419)
!4518 = !DILocation(line: 786, column: 14, scope: !4416, inlinedAt: !4419)
!4519 = !DILocation(line: 788, column: 64, scope: !4520, inlinedAt: !4419)
!4520 = !DILexicalBlockFile(scope: !4415, file: !1717, discriminator: 1)
!4521 = !DILocation(line: 788, column: 74, scope: !4520, inlinedAt: !4419)
!4522 = !DILocation(line: 788, column: 54, scope: !4520, inlinedAt: !4419)
!4523 = !DILocation(line: 788, column: 52, scope: !4520, inlinedAt: !4419)
!4524 = !DILocation(line: 788, column: 94, scope: !4520, inlinedAt: !4419)
!4525 = !DILocation(line: 788, column: 88, scope: !4520, inlinedAt: !4419)
!4526 = !DILocation(line: 788, column: 86, scope: !4520, inlinedAt: !4419)
!4527 = !DILocation(line: 788, column: 115, scope: !4520, inlinedAt: !4419)
!4528 = !DILocation(line: 788, column: 109, scope: !4520, inlinedAt: !4419)
!4529 = !DILocation(line: 788, column: 107, scope: !4520, inlinedAt: !4419)
!4530 = !DILocation(line: 788, column: 130, scope: !4520, inlinedAt: !4419)
!4531 = !DILocation(line: 788, column: 140, scope: !4520, inlinedAt: !4419)
!4532 = !DILocation(line: 788, column: 144, scope: !4520, inlinedAt: !4419)
!4533 = !DILocation(line: 788, column: 147, scope: !4534, inlinedAt: !4419)
!4534 = !DILexicalBlockFile(scope: !4414, file: !1717, discriminator: 2)
!4535 = !DILocation(line: 788, column: 149, scope: !4534, inlinedAt: !4419)
!4536 = !DILocation(line: 788, column: 130, scope: !4534, inlinedAt: !4419)
!4537 = !DILocation(line: 788, column: 169, scope: !4538, inlinedAt: !4419)
!4538 = !DILexicalBlockFile(scope: !4413, file: !1717, discriminator: 3)
!4539 = !DILocation(line: 788, column: 187, scope: !4538, inlinedAt: !4419)
!4540 = !DILocation(line: 788, column: 199, scope: !4538, inlinedAt: !4419)
!4541 = !DILocation(line: 788, column: 196, scope: !4538, inlinedAt: !4419)
!4542 = !DILocation(line: 788, column: 184, scope: !4538, inlinedAt: !4419)
!4543 = !DILocation(line: 788, column: 168, scope: !4538, inlinedAt: !4419)
!4544 = !DILocation(line: 788, column: 209, scope: !4545, inlinedAt: !4419)
!4545 = !DILexicalBlockFile(scope: !4413, file: !1717, discriminator: 4)
!4546 = !DILocation(line: 788, column: 221, scope: !4545, inlinedAt: !4419)
!4547 = !DILocation(line: 788, column: 218, scope: !4545, inlinedAt: !4419)
!4548 = !DILocation(line: 788, column: 168, scope: !4545, inlinedAt: !4419)
!4549 = !DILocation(line: 788, column: 231, scope: !4550, inlinedAt: !4419)
!4550 = !DILexicalBlockFile(scope: !4413, file: !1717, discriminator: 5)
!4551 = !DILocation(line: 788, column: 168, scope: !4550, inlinedAt: !4419)
!4552 = !DILocation(line: 788, column: 168, scope: !4422, inlinedAt: !4419)
!4553 = !DILocation(line: 788, column: 165, scope: !4422, inlinedAt: !4419)
!4554 = !DILocation(line: 788, column: 303, scope: !4422, inlinedAt: !4419)
!4555 = !DILocation(line: 788, column: 307, scope: !4422, inlinedAt: !4419)
!4556 = !DILocation(line: 788, column: 317, scope: !4422, inlinedAt: !4419)
!4557 = !DILocation(line: 788, column: 326, scope: !4422, inlinedAt: !4419)
!4558 = !DILocation(line: 788, column: 314, scope: !4422, inlinedAt: !4419)
!4559 = !DILocation(line: 788, column: 335, scope: !4422, inlinedAt: !4419)
!4560 = !DILocation(line: 788, column: 259, scope: !4422, inlinedAt: !4419)
!4561 = !DILocation(line: 68, column: 16, scope: !2939, inlinedAt: !4421)
!4562 = !DILocation(line: 68, column: 19, scope: !2939, inlinedAt: !4421)
!4563 = !DILocation(line: 68, column: 24, scope: !2939, inlinedAt: !4421)
!4564 = !DILocation(line: 68, column: 38, scope: !2939, inlinedAt: !4421)
!4565 = !DILocation(line: 68, column: 41, scope: !2939, inlinedAt: !4421)
!4566 = !DILocation(line: 68, column: 46, scope: !2939, inlinedAt: !4421)
!4567 = !DILocation(line: 68, column: 34, scope: !2939, inlinedAt: !4421)
!4568 = !DILocation(line: 68, column: 57, scope: !2939, inlinedAt: !4421)
!4569 = !DILocation(line: 68, column: 69, scope: !2939, inlinedAt: !4421)
!4570 = !DILocation(line: 68, column: 72, scope: !2939, inlinedAt: !4421)
!4571 = !DILocation(line: 68, column: 79, scope: !2939, inlinedAt: !4421)
!4572 = !DILocation(line: 68, column: 84, scope: !2939, inlinedAt: !4421)
!4573 = !DILocation(line: 68, column: 99, scope: !2939, inlinedAt: !4421)
!4574 = !DILocation(line: 68, column: 102, scope: !2939, inlinedAt: !4421)
!4575 = !DILocation(line: 68, column: 109, scope: !2939, inlinedAt: !4421)
!4576 = !DILocation(line: 68, column: 114, scope: !2939, inlinedAt: !4421)
!4577 = !DILocation(line: 68, column: 94, scope: !2939, inlinedAt: !4421)
!4578 = !DILocation(line: 68, column: 63, scope: !2939, inlinedAt: !4421)
!4579 = !DILocation(line: 788, column: 343, scope: !4422, inlinedAt: !4419)
!4580 = !DILocation(line: 788, column: 352, scope: !4422, inlinedAt: !4419)
!4581 = !DILocation(line: 788, column: 339, scope: !4422, inlinedAt: !4419)
!4582 = !DILocation(line: 788, column: 257, scope: !4422, inlinedAt: !4419)
!4583 = !DILocation(line: 788, column: 369, scope: !4422, inlinedAt: !4419)
!4584 = !DILocation(line: 788, column: 368, scope: !4422, inlinedAt: !4419)
!4585 = !DILocation(line: 788, column: 366, scope: !4422, inlinedAt: !4419)
!4586 = !DILocation(line: 788, column: 390, scope: !4422, inlinedAt: !4419)
!4587 = !DILocation(line: 788, column: 400, scope: !4422, inlinedAt: !4419)
!4588 = !DILocation(line: 788, column: 380, scope: !4589, inlinedAt: !4419)
!4589 = !DILexicalBlockFile(scope: !4422, file: !1717, discriminator: 19)
!4590 = !DILocation(line: 788, column: 411, scope: !4422, inlinedAt: !4419)
!4591 = !DILocation(line: 788, column: 409, scope: !4422, inlinedAt: !4419)
!4592 = !DILocation(line: 788, column: 378, scope: !4422, inlinedAt: !4419)
!4593 = !DILocation(line: 788, column: 430, scope: !4422, inlinedAt: !4419)
!4594 = !DILocation(line: 788, column: 424, scope: !4422, inlinedAt: !4419)
!4595 = !DILocation(line: 788, column: 422, scope: !4422, inlinedAt: !4419)
!4596 = !DILocation(line: 788, column: 451, scope: !4422, inlinedAt: !4419)
!4597 = !DILocation(line: 788, column: 445, scope: !4422, inlinedAt: !4419)
!4598 = !DILocation(line: 788, column: 443, scope: !4422, inlinedAt: !4419)
!4599 = !DILocation(line: 788, column: 466, scope: !4422, inlinedAt: !4419)
!4600 = !DILocation(line: 788, column: 476, scope: !4422, inlinedAt: !4419)
!4601 = !DILocation(line: 788, column: 480, scope: !4422, inlinedAt: !4419)
!4602 = !DILocation(line: 788, column: 483, scope: !4603, inlinedAt: !4419)
!4603 = !DILexicalBlockFile(scope: !4412, file: !1717, discriminator: 7)
!4604 = !DILocation(line: 788, column: 485, scope: !4603, inlinedAt: !4419)
!4605 = !DILocation(line: 788, column: 466, scope: !4603, inlinedAt: !4419)
!4606 = !DILocation(line: 788, column: 505, scope: !4607, inlinedAt: !4419)
!4607 = !DILexicalBlockFile(scope: !4411, file: !1717, discriminator: 8)
!4608 = !DILocation(line: 788, column: 523, scope: !4607, inlinedAt: !4419)
!4609 = !DILocation(line: 788, column: 535, scope: !4607, inlinedAt: !4419)
!4610 = !DILocation(line: 788, column: 532, scope: !4607, inlinedAt: !4419)
!4611 = !DILocation(line: 788, column: 520, scope: !4607, inlinedAt: !4419)
!4612 = !DILocation(line: 788, column: 504, scope: !4607, inlinedAt: !4419)
!4613 = !DILocation(line: 788, column: 548, scope: !4614, inlinedAt: !4419)
!4614 = !DILexicalBlockFile(scope: !4411, file: !1717, discriminator: 9)
!4615 = !DILocation(line: 788, column: 560, scope: !4614, inlinedAt: !4419)
!4616 = !DILocation(line: 788, column: 557, scope: !4614, inlinedAt: !4419)
!4617 = !DILocation(line: 788, column: 504, scope: !4614, inlinedAt: !4419)
!4618 = !DILocation(line: 788, column: 573, scope: !4619, inlinedAt: !4419)
!4619 = !DILexicalBlockFile(scope: !4411, file: !1717, discriminator: 10)
!4620 = !DILocation(line: 788, column: 504, scope: !4619, inlinedAt: !4419)
!4621 = !DILocation(line: 788, column: 504, scope: !4410, inlinedAt: !4419)
!4622 = !DILocation(line: 788, column: 501, scope: !4410, inlinedAt: !4419)
!4623 = !DILocation(line: 788, column: 645, scope: !4410, inlinedAt: !4419)
!4624 = !DILocation(line: 788, column: 649, scope: !4410, inlinedAt: !4419)
!4625 = !DILocation(line: 788, column: 659, scope: !4410, inlinedAt: !4419)
!4626 = !DILocation(line: 788, column: 668, scope: !4410, inlinedAt: !4419)
!4627 = !DILocation(line: 788, column: 656, scope: !4410, inlinedAt: !4419)
!4628 = !DILocation(line: 788, column: 677, scope: !4410, inlinedAt: !4419)
!4629 = !DILocation(line: 788, column: 601, scope: !4410, inlinedAt: !4419)
!4630 = !DILocation(line: 68, column: 16, scope: !2939, inlinedAt: !4409)
!4631 = !DILocation(line: 68, column: 19, scope: !2939, inlinedAt: !4409)
!4632 = !DILocation(line: 68, column: 24, scope: !2939, inlinedAt: !4409)
!4633 = !DILocation(line: 68, column: 38, scope: !2939, inlinedAt: !4409)
!4634 = !DILocation(line: 68, column: 41, scope: !2939, inlinedAt: !4409)
!4635 = !DILocation(line: 68, column: 46, scope: !2939, inlinedAt: !4409)
!4636 = !DILocation(line: 68, column: 34, scope: !2939, inlinedAt: !4409)
!4637 = !DILocation(line: 68, column: 57, scope: !2939, inlinedAt: !4409)
!4638 = !DILocation(line: 68, column: 69, scope: !2939, inlinedAt: !4409)
!4639 = !DILocation(line: 68, column: 72, scope: !2939, inlinedAt: !4409)
!4640 = !DILocation(line: 68, column: 79, scope: !2939, inlinedAt: !4409)
!4641 = !DILocation(line: 68, column: 84, scope: !2939, inlinedAt: !4409)
!4642 = !DILocation(line: 68, column: 99, scope: !2939, inlinedAt: !4409)
!4643 = !DILocation(line: 68, column: 102, scope: !2939, inlinedAt: !4409)
!4644 = !DILocation(line: 68, column: 109, scope: !2939, inlinedAt: !4409)
!4645 = !DILocation(line: 68, column: 114, scope: !2939, inlinedAt: !4409)
!4646 = !DILocation(line: 68, column: 94, scope: !2939, inlinedAt: !4409)
!4647 = !DILocation(line: 68, column: 63, scope: !2939, inlinedAt: !4409)
!4648 = !DILocation(line: 788, column: 685, scope: !4410, inlinedAt: !4419)
!4649 = !DILocation(line: 788, column: 694, scope: !4410, inlinedAt: !4419)
!4650 = !DILocation(line: 788, column: 681, scope: !4410, inlinedAt: !4419)
!4651 = !DILocation(line: 788, column: 599, scope: !4410, inlinedAt: !4419)
!4652 = !DILocation(line: 788, column: 711, scope: !4410, inlinedAt: !4419)
!4653 = !DILocation(line: 788, column: 710, scope: !4410, inlinedAt: !4419)
!4654 = !DILocation(line: 788, column: 708, scope: !4410, inlinedAt: !4419)
!4655 = !DILocation(line: 788, column: 732, scope: !4410, inlinedAt: !4419)
!4656 = !DILocation(line: 788, column: 742, scope: !4410, inlinedAt: !4419)
!4657 = !DILocation(line: 788, column: 722, scope: !4658, inlinedAt: !4419)
!4658 = !DILexicalBlockFile(scope: !4410, file: !1717, discriminator: 20)
!4659 = !DILocation(line: 788, column: 753, scope: !4410, inlinedAt: !4419)
!4660 = !DILocation(line: 788, column: 751, scope: !4410, inlinedAt: !4419)
!4661 = !DILocation(line: 788, column: 720, scope: !4410, inlinedAt: !4419)
!4662 = !DILocation(line: 788, column: 772, scope: !4410, inlinedAt: !4419)
!4663 = !DILocation(line: 788, column: 766, scope: !4410, inlinedAt: !4419)
!4664 = !DILocation(line: 788, column: 764, scope: !4410, inlinedAt: !4419)
!4665 = !DILocation(line: 788, column: 793, scope: !4410, inlinedAt: !4419)
!4666 = !DILocation(line: 788, column: 787, scope: !4410, inlinedAt: !4419)
!4667 = !DILocation(line: 788, column: 785, scope: !4410, inlinedAt: !4419)
!4668 = !DILocation(line: 788, column: 804, scope: !4410, inlinedAt: !4419)
!4669 = !DILocation(line: 788, column: 806, scope: !4670, inlinedAt: !4419)
!4670 = !DILexicalBlockFile(scope: !4413, file: !1717, discriminator: 12)
!4671 = !DILocation(line: 788, column: 827, scope: !4672, inlinedAt: !4419)
!4672 = !DILexicalBlockFile(scope: !4673, file: !1717, discriminator: 14)
!4673 = distinct !DILexicalBlock(scope: !4415, file: !1717, line: 788, column: 811)
!4674 = !DILocation(line: 788, column: 822, scope: !4672, inlinedAt: !4419)
!4675 = !DILocation(line: 788, column: 844, scope: !4672, inlinedAt: !4419)
!4676 = !DILocation(line: 788, column: 862, scope: !4672, inlinedAt: !4419)
!4677 = !DILocation(line: 788, column: 874, scope: !4672, inlinedAt: !4419)
!4678 = !DILocation(line: 788, column: 871, scope: !4672, inlinedAt: !4419)
!4679 = !DILocation(line: 788, column: 859, scope: !4672, inlinedAt: !4419)
!4680 = !DILocation(line: 788, column: 843, scope: !4672, inlinedAt: !4419)
!4681 = !DILocation(line: 788, column: 881, scope: !4682, inlinedAt: !4419)
!4682 = !DILexicalBlockFile(scope: !4673, file: !1717, discriminator: 15)
!4683 = !DILocation(line: 788, column: 893, scope: !4682, inlinedAt: !4419)
!4684 = !DILocation(line: 788, column: 890, scope: !4682, inlinedAt: !4419)
!4685 = !DILocation(line: 788, column: 843, scope: !4682, inlinedAt: !4419)
!4686 = !DILocation(line: 788, column: 900, scope: !4687, inlinedAt: !4419)
!4687 = !DILexicalBlockFile(scope: !4673, file: !1717, discriminator: 16)
!4688 = !DILocation(line: 788, column: 843, scope: !4687, inlinedAt: !4419)
!4689 = !DILocation(line: 788, column: 843, scope: !4690, inlinedAt: !4419)
!4690 = !DILexicalBlockFile(scope: !4673, file: !1717, discriminator: 17)
!4691 = !DILocation(line: 788, column: 840, scope: !4690, inlinedAt: !4419)
!4692 = !DILocation(line: 790, column: 18, scope: !4416, inlinedAt: !4419)
!4693 = !DILocation(line: 790, column: 6, scope: !4416, inlinedAt: !4419)
!4694 = !DILocation(line: 790, column: 10, scope: !4416, inlinedAt: !4419)
!4695 = !DILocation(line: 790, column: 16, scope: !4416, inlinedAt: !4419)
!4696 = !DILocation(line: 792, column: 12, scope: !4416, inlinedAt: !4419)
!4697 = !DILocation(line: 1487, column: 18, scope: !4396)
!4698 = !DILocation(line: 1487, column: 21, scope: !4396)
!4699 = !DILocalVariable(name: "block_nsamples", scope: !4396, file: !911, line: 1487, type: !923)
!4700 = !DILocation(line: 1487, column: 73, scope: !4396)
!4701 = !DILocation(line: 1489, column: 9, scope: !4702)
!4702 = distinct !DILexicalBlock(scope: !4396, file: !911, line: 1489, column: 9)
!4703 = !DILocation(line: 1489, column: 16, scope: !4702)
!4704 = !DILocation(line: 1489, column: 9, scope: !4396)
!4705 = !DILocation(line: 1490, column: 16, scope: !4706)
!4706 = distinct !DILexicalBlock(scope: !4702, file: !911, line: 1489, column: 21)
!4707 = !DILocation(line: 1490, column: 9, scope: !4706)
!4708 = !DILocation(line: 1492, column: 9, scope: !4706)
!4709 = !DILocation(line: 1495, column: 40, scope: !4396)
!4710 = !DILocation(line: 1495, column: 28, scope: !4396)
!4711 = !DILocation(line: 1495, column: 48, scope: !4396)
!4712 = !DILocation(line: 1495, column: 26, scope: !4396)
!4713 = !DILocation(line: 1495, column: 20, scope: !4396)
!4714 = !DILocation(line: 1498, column: 21, scope: !4715)
!4715 = distinct !DILexicalBlock(scope: !4396, file: !911, line: 1498, column: 9)
!4716 = !DILocation(line: 1498, column: 9, scope: !4715)
!4717 = !DILocation(line: 1498, column: 29, scope: !4715)
!4718 = !DILocation(line: 1498, column: 38, scope: !4715)
!4719 = !DILocation(line: 1498, column: 9, scope: !4396)
!4720 = !DILocation(line: 1503, column: 35, scope: !4721)
!4721 = distinct !DILexicalBlock(scope: !4715, file: !911, line: 1498, column: 62)
!4722 = !DILocation(line: 1503, column: 23, scope: !4721)
!4723 = !DILocation(line: 1503, column: 43, scope: !4721)
!4724 = !DILocation(line: 1503, column: 52, scope: !4721)
!4725 = !DILocation(line: 1503, column: 21, scope: !4721)
!4726 = !DILocation(line: 1504, column: 39, scope: !4721)
!4727 = !DILocation(line: 1504, column: 27, scope: !4721)
!4728 = !DILocation(line: 1504, column: 47, scope: !4721)
!4729 = !DILocation(line: 1504, column: 60, scope: !4721)
!4730 = !DILocation(line: 1504, column: 25, scope: !4721)
!4731 = !DILocation(line: 1505, column: 25, scope: !4721)
!4732 = !DILocation(line: 1505, column: 28, scope: !4721)
!4733 = !DILocation(line: 1505, column: 53, scope: !4721)
!4734 = !DILocation(line: 1505, column: 57, scope: !4721)
!4735 = !DILocation(line: 1505, column: 60, scope: !4721)
!4736 = !DILocation(line: 1505, column: 44, scope: !4721)
!4737 = !DILocation(line: 1505, column: 42, scope: !4721)
!4738 = !DILocation(line: 1505, column: 23, scope: !4721)
!4739 = !DILocation(line: 1506, column: 27, scope: !4721)
!4740 = !DILocation(line: 1506, column: 45, scope: !4721)
!4741 = !DILocation(line: 1506, column: 48, scope: !4721)
!4742 = !DILocation(line: 1506, column: 62, scope: !4721)
!4743 = !DILocation(line: 1506, column: 42, scope: !4721)
!4744 = !DILocation(line: 1506, column: 26, scope: !4721)
!4745 = !DILocation(line: 1506, column: 70, scope: !4746)
!4746 = !DILexicalBlockFile(scope: !4721, file: !911, discriminator: 1)
!4747 = !DILocation(line: 1506, column: 73, scope: !4746)
!4748 = !DILocation(line: 1506, column: 87, scope: !4746)
!4749 = !DILocation(line: 1506, column: 26, scope: !4746)
!4750 = !DILocation(line: 1506, column: 95, scope: !4751)
!4751 = !DILexicalBlockFile(scope: !4721, file: !911, discriminator: 2)
!4752 = !DILocation(line: 1506, column: 26, scope: !4751)
!4753 = !DILocation(line: 1506, column: 26, scope: !4754)
!4754 = !DILexicalBlockFile(scope: !4721, file: !911, discriminator: 3)
!4755 = !DILocation(line: 1506, column: 23, scope: !4754)
!4756 = !DILocation(line: 1507, column: 13, scope: !4757)
!4757 = distinct !DILexicalBlock(scope: !4721, file: !911, line: 1507, column: 13)
!4758 = !DILocation(line: 1507, column: 16, scope: !4757)
!4759 = !DILocation(line: 1507, column: 30, scope: !4757)
!4760 = !DILocation(line: 1507, column: 47, scope: !4757)
!4761 = !DILocation(line: 1508, column: 22, scope: !4757)
!4762 = !DILocation(line: 1508, column: 38, scope: !4757)
!4763 = !DILocation(line: 1508, column: 41, scope: !4757)
!4764 = !DILocation(line: 1508, column: 36, scope: !4757)
!4765 = !DILocation(line: 1508, column: 18, scope: !4757)
!4766 = !DILocation(line: 1508, column: 16, scope: !4757)
!4767 = !DILocation(line: 1509, column: 18, scope: !4757)
!4768 = !DILocation(line: 1509, column: 34, scope: !4757)
!4769 = !DILocation(line: 1509, column: 37, scope: !4757)
!4770 = !DILocation(line: 1509, column: 32, scope: !4757)
!4771 = !DILocation(line: 1508, column: 57, scope: !4757)
!4772 = !DILocation(line: 1507, column: 13, scope: !4746)
!4773 = !DILocation(line: 1510, column: 33, scope: !4757)
!4774 = !DILocation(line: 1510, column: 13, scope: !4757)
!4775 = !DILocation(line: 1510, column: 16, scope: !4757)
!4776 = !DILocation(line: 1510, column: 31, scope: !4757)
!4777 = !DILocation(line: 1513, column: 16, scope: !4778)
!4778 = distinct !DILexicalBlock(scope: !4721, file: !911, line: 1513, column: 9)
!4779 = !DILocation(line: 1513, column: 14, scope: !4778)
!4780 = !DILocation(line: 1513, column: 21, scope: !4781)
!4781 = !DILexicalBlockFile(scope: !4782, file: !911, discriminator: 1)
!4782 = distinct !DILexicalBlock(scope: !4778, file: !911, line: 1513, column: 9)
!4783 = !DILocation(line: 1513, column: 37, scope: !4781)
!4784 = !DILocation(line: 1513, column: 25, scope: !4781)
!4785 = !DILocation(line: 1513, column: 45, scope: !4781)
!4786 = !DILocation(line: 1513, column: 23, scope: !4781)
!4787 = !DILocation(line: 1513, column: 9, scope: !4781)
!4788 = !DILocalVariable(name: "fac", scope: !4789, file: !911, line: 1514, type: !923)
!4789 = distinct !DILexicalBlock(scope: !4782, file: !911, line: 1513, column: 60)
!4790 = !DILocation(line: 1514, column: 17, scope: !4789)
!4791 = !DILocation(line: 1514, column: 23, scope: !4789)
!4792 = !DILocation(line: 1514, column: 25, scope: !4789)
!4793 = !DILocation(line: 1514, column: 29, scope: !4789)
!4794 = !DILocation(line: 1516, column: 27, scope: !4789)
!4795 = !DILocation(line: 1516, column: 35, scope: !4789)
!4796 = !DILocation(line: 1516, column: 32, scope: !4789)
!4797 = !DILocation(line: 1517, column: 28, scope: !4789)
!4798 = !DILocation(line: 1517, column: 42, scope: !4789)
!4799 = !DILocation(line: 1517, column: 40, scope: !4789)
!4800 = !DILocation(line: 1517, column: 51, scope: !4789)
!4801 = !DILocation(line: 1517, column: 54, scope: !4789)
!4802 = !DILocation(line: 1517, column: 48, scope: !4789)
!4803 = !DILocation(line: 1516, column: 51, scope: !4789)
!4804 = !DILocation(line: 1518, column: 37, scope: !4789)
!4805 = !DILocation(line: 1518, column: 25, scope: !4789)
!4806 = !DILocation(line: 1518, column: 45, scope: !4789)
!4807 = !DILocation(line: 1517, column: 71, scope: !4789)
!4808 = !DILocation(line: 1518, column: 58, scope: !4789)
!4809 = !DILocation(line: 1518, column: 55, scope: !4789)
!4810 = !DILocation(line: 1516, column: 19, scope: !4789)
!4811 = !DILocation(line: 1516, column: 13, scope: !4789)
!4812 = !DILocation(line: 1516, column: 22, scope: !4789)
!4813 = !DILocation(line: 1519, column: 9, scope: !4789)
!4814 = !DILocation(line: 1513, column: 56, scope: !4815)
!4815 = !DILexicalBlockFile(scope: !4782, file: !911, discriminator: 2)
!4816 = !DILocation(line: 1513, column: 9, scope: !4815)
!4817 = distinct !{!4817, !4818}
!4818 = !DILocation(line: 1513, column: 9, scope: !4721)
!4819 = !DILocation(line: 1523, column: 15, scope: !4721)
!4820 = !DILocation(line: 1523, column: 31, scope: !4721)
!4821 = !DILocation(line: 1523, column: 34, scope: !4721)
!4822 = !DILocation(line: 1523, column: 29, scope: !4721)
!4823 = !DILocation(line: 1523, column: 50, scope: !4721)
!4824 = !DILocation(line: 1523, column: 57, scope: !4721)
!4825 = !DILocation(line: 1522, column: 9, scope: !4721)
!4826 = !DILocation(line: 1522, column: 12, scope: !4721)
!4827 = !DILocation(line: 1522, column: 28, scope: !4721)
!4828 = !DILocation(line: 1524, column: 5, scope: !4721)
!4829 = !DILocation(line: 1527, column: 25, scope: !4396)
!4830 = !DILocation(line: 1527, column: 13, scope: !4396)
!4831 = !DILocation(line: 1527, column: 33, scope: !4396)
!4832 = !DILocation(line: 1527, column: 5, scope: !4396)
!4833 = !DILocation(line: 1529, column: 58, scope: !4834)
!4834 = distinct !DILexicalBlock(scope: !4396, file: !911, line: 1527, column: 43)
!4835 = !DILocation(line: 1529, column: 49, scope: !4834)
!4836 = !DILocation(line: 1529, column: 27, scope: !4834)
!4837 = !DILocation(line: 1529, column: 9, scope: !4834)
!4838 = !DILocation(line: 1529, column: 12, scope: !4834)
!4839 = !DILocation(line: 1529, column: 25, scope: !4834)
!4840 = !DILocation(line: 1530, column: 9, scope: !4834)
!4841 = !DILocation(line: 1532, column: 25, scope: !4834)
!4842 = !DILocation(line: 1532, column: 28, scope: !4834)
!4843 = !DILocation(line: 1532, column: 32, scope: !4834)
!4844 = !DILocation(line: 1532, column: 9, scope: !4834)
!4845 = !DILocation(line: 1533, column: 9, scope: !4834)
!4846 = !DILocation(line: 1536, column: 12, scope: !4405)
!4847 = !DILocation(line: 1536, column: 10, scope: !4405)
!4848 = !DILocation(line: 1536, column: 17, scope: !4849)
!4849 = !DILexicalBlockFile(scope: !4404, file: !911, discriminator: 1)
!4850 = !DILocation(line: 1536, column: 33, scope: !4849)
!4851 = !DILocation(line: 1536, column: 21, scope: !4849)
!4852 = !DILocation(line: 1536, column: 41, scope: !4849)
!4853 = !DILocation(line: 1536, column: 19, scope: !4849)
!4854 = !DILocation(line: 1536, column: 5, scope: !4849)
!4855 = !DILocalVariable(name: "bl_pitch_sh2", scope: !4403, file: !911, line: 1537, type: !923)
!4856 = !DILocation(line: 1537, column: 13, scope: !4403)
!4857 = !DILocation(line: 1540, column: 29, scope: !4403)
!4858 = !DILocation(line: 1540, column: 17, scope: !4403)
!4859 = !DILocation(line: 1540, column: 37, scope: !4403)
!4860 = !DILocation(line: 1540, column: 9, scope: !4403)
!4861 = !DILocalVariable(name: "block_pitch", scope: !4401, file: !911, line: 1547, type: !923)
!4862 = !DILocation(line: 1547, column: 17, scope: !4401)
!4863 = !DILocalVariable(name: "t1", scope: !4401, file: !911, line: 1548, type: !923)
!4864 = !DILocation(line: 1548, column: 17, scope: !4401)
!4865 = !DILocation(line: 1548, column: 23, scope: !4401)
!4866 = !DILocation(line: 1548, column: 26, scope: !4401)
!4867 = !DILocation(line: 1548, column: 48, scope: !4401)
!4868 = !DILocation(line: 1548, column: 51, scope: !4401)
!4869 = !DILocation(line: 1548, column: 46, scope: !4401)
!4870 = !DILocation(line: 1548, column: 72, scope: !4401)
!4871 = !DILocalVariable(name: "t2", scope: !4401, file: !911, line: 1549, type: !923)
!4872 = !DILocation(line: 1549, column: 17, scope: !4401)
!4873 = !DILocation(line: 1549, column: 23, scope: !4401)
!4874 = !DILocation(line: 1549, column: 26, scope: !4401)
!4875 = !DILocation(line: 1549, column: 48, scope: !4401)
!4876 = !DILocation(line: 1549, column: 51, scope: !4401)
!4877 = !DILocation(line: 1549, column: 46, scope: !4401)
!4878 = !DILocation(line: 1549, column: 72, scope: !4401)
!4879 = !DILocalVariable(name: "t3", scope: !4401, file: !911, line: 1550, type: !923)
!4880 = !DILocation(line: 1550, column: 17, scope: !4401)
!4881 = !DILocation(line: 1550, column: 22, scope: !4401)
!4882 = !DILocation(line: 1550, column: 25, scope: !4401)
!4883 = !DILocation(line: 1550, column: 47, scope: !4401)
!4884 = !DILocation(line: 1550, column: 50, scope: !4401)
!4885 = !DILocation(line: 1550, column: 45, scope: !4401)
!4886 = !DILocation(line: 1550, column: 70, scope: !4401)
!4887 = !DILocation(line: 1552, column: 17, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4401, file: !911, line: 1552, column: 17)
!4889 = !DILocation(line: 1552, column: 19, scope: !4888)
!4890 = !DILocation(line: 1552, column: 17, scope: !4401)
!4891 = !DILocation(line: 1553, column: 40, scope: !4892)
!4892 = distinct !DILexicalBlock(scope: !4888, file: !911, line: 1552, column: 25)
!4893 = !DILocation(line: 1553, column: 44, scope: !4892)
!4894 = !DILocation(line: 1553, column: 47, scope: !4892)
!4895 = !DILocation(line: 1553, column: 31, scope: !4892)
!4896 = !DILocation(line: 1553, column: 29, scope: !4892)
!4897 = !DILocation(line: 1554, column: 13, scope: !4892)
!4898 = !DILocation(line: 1555, column: 31, scope: !4888)
!4899 = !DILocation(line: 1555, column: 50, scope: !4888)
!4900 = !DILocation(line: 1555, column: 53, scope: !4888)
!4901 = !DILocation(line: 1555, column: 48, scope: !4888)
!4902 = !DILocation(line: 1556, column: 43, scope: !4888)
!4903 = !DILocation(line: 1556, column: 47, scope: !4888)
!4904 = !DILocation(line: 1556, column: 50, scope: !4888)
!4905 = !DILocation(line: 1556, column: 34, scope: !4888)
!4906 = !DILocation(line: 1555, column: 78, scope: !4888)
!4907 = !DILocation(line: 1555, column: 29, scope: !4888)
!4908 = !DILocation(line: 1558, column: 42, scope: !4401)
!4909 = !DILocation(line: 1559, column: 40, scope: !4401)
!4910 = !DILocation(line: 1559, column: 43, scope: !4401)
!4911 = !DILocation(line: 1560, column: 40, scope: !4401)
!4912 = !DILocation(line: 1560, column: 43, scope: !4401)
!4913 = !DILocation(line: 1561, column: 44, scope: !4401)
!4914 = !DILocation(line: 1561, column: 47, scope: !4401)
!4915 = !DILocation(line: 1560, column: 61, scope: !4401)
!4916 = !DILocation(line: 1558, column: 32, scope: !4401)
!4917 = !DILocation(line: 132, column: 9, scope: !3724, inlinedAt: !4400)
!4918 = !DILocation(line: 132, column: 13, scope: !3724, inlinedAt: !4400)
!4919 = !DILocation(line: 132, column: 11, scope: !3724, inlinedAt: !4400)
!4920 = !DILocation(line: 132, column: 9, scope: !3702, inlinedAt: !4400)
!4921 = !DILocation(line: 132, column: 26, scope: !3729, inlinedAt: !4400)
!4922 = !DILocation(line: 132, column: 19, scope: !3729, inlinedAt: !4400)
!4923 = !DILocation(line: 133, column: 14, scope: !3732, inlinedAt: !4400)
!4924 = !DILocation(line: 133, column: 18, scope: !3732, inlinedAt: !4400)
!4925 = !DILocation(line: 133, column: 16, scope: !3732, inlinedAt: !4400)
!4926 = !DILocation(line: 133, column: 14, scope: !3724, inlinedAt: !4400)
!4927 = !DILocation(line: 133, column: 31, scope: !3737, inlinedAt: !4400)
!4928 = !DILocation(line: 133, column: 24, scope: !3737, inlinedAt: !4400)
!4929 = !DILocation(line: 134, column: 17, scope: !3732, inlinedAt: !4400)
!4930 = !DILocation(line: 134, column: 10, scope: !3732, inlinedAt: !4400)
!4931 = !DILocation(line: 135, column: 1, scope: !3702, inlinedAt: !4400)
!4932 = !DILocation(line: 1558, column: 30, scope: !4401)
!4933 = !DILocation(line: 1564, column: 17, scope: !4934)
!4934 = distinct !DILexicalBlock(scope: !4401, file: !911, line: 1564, column: 17)
!4935 = !DILocation(line: 1564, column: 31, scope: !4934)
!4936 = !DILocation(line: 1564, column: 29, scope: !4934)
!4937 = !DILocation(line: 1564, column: 17, scope: !4401)
!4938 = !DILocation(line: 1565, column: 33, scope: !4939)
!4939 = distinct !DILexicalBlock(scope: !4934, file: !911, line: 1564, column: 35)
!4940 = !DILocation(line: 1565, column: 36, scope: !4939)
!4941 = !DILocation(line: 1565, column: 56, scope: !4939)
!4942 = !DILocation(line: 1565, column: 64, scope: !4939)
!4943 = !DILocation(line: 1565, column: 62, scope: !4939)
!4944 = !DILocation(line: 1565, column: 30, scope: !4939)
!4945 = !DILocation(line: 1566, column: 13, scope: !4939)
!4946 = !DILocation(line: 1567, column: 32, scope: !4947)
!4947 = distinct !DILexicalBlock(scope: !4934, file: !911, line: 1566, column: 20)
!4948 = !DILocation(line: 1567, column: 29, scope: !4947)
!4949 = !DILocation(line: 1568, column: 21, scope: !4950)
!4950 = distinct !DILexicalBlock(scope: !4947, file: !911, line: 1568, column: 21)
!4951 = !DILocation(line: 1568, column: 35, scope: !4950)
!4952 = !DILocation(line: 1568, column: 33, scope: !4950)
!4953 = !DILocation(line: 1568, column: 21, scope: !4947)
!4954 = !DILocation(line: 1570, column: 26, scope: !4955)
!4955 = distinct !DILexicalBlock(scope: !4950, file: !911, line: 1568, column: 39)
!4956 = !DILocation(line: 1570, column: 29, scope: !4955)
!4957 = !DILocation(line: 1570, column: 49, scope: !4955)
!4958 = !DILocation(line: 1570, column: 58, scope: !4955)
!4959 = !DILocation(line: 1570, column: 70, scope: !4955)
!4960 = !DILocation(line: 1570, column: 55, scope: !4955)
!4961 = !DILocation(line: 1569, column: 34, scope: !4955)
!4962 = !DILocation(line: 1571, column: 17, scope: !4955)
!4963 = !DILocation(line: 1572, column: 36, scope: !4964)
!4964 = distinct !DILexicalBlock(scope: !4950, file: !911, line: 1571, column: 24)
!4965 = !DILocation(line: 1572, column: 33, scope: !4964)
!4966 = !DILocation(line: 1573, column: 25, scope: !4967)
!4967 = distinct !DILexicalBlock(scope: !4964, file: !911, line: 1573, column: 25)
!4968 = !DILocation(line: 1573, column: 39, scope: !4967)
!4969 = !DILocation(line: 1573, column: 37, scope: !4967)
!4970 = !DILocation(line: 1573, column: 25, scope: !4964)
!4971 = !DILocation(line: 1575, column: 30, scope: !4972)
!4972 = distinct !DILexicalBlock(scope: !4967, file: !911, line: 1573, column: 43)
!4973 = !DILocation(line: 1575, column: 33, scope: !4972)
!4974 = !DILocation(line: 1575, column: 55, scope: !4972)
!4975 = !DILocation(line: 1575, column: 53, scope: !4972)
!4976 = !DILocation(line: 1575, column: 68, scope: !4972)
!4977 = !DILocation(line: 1574, column: 38, scope: !4972)
!4978 = !DILocation(line: 1576, column: 21, scope: !4972)
!4979 = !DILocation(line: 1577, column: 40, scope: !4967)
!4980 = !DILocation(line: 1577, column: 43, scope: !4967)
!4981 = !DILocation(line: 1577, column: 63, scope: !4967)
!4982 = !DILocation(line: 1577, column: 38, scope: !4967)
!4983 = !DILocation(line: 1580, column: 24, scope: !4401)
!4984 = !DILocation(line: 1580, column: 37, scope: !4401)
!4985 = !DILocation(line: 1580, column: 19, scope: !4401)
!4986 = !DILocation(line: 1580, column: 13, scope: !4401)
!4987 = !DILocation(line: 1580, column: 22, scope: !4401)
!4988 = !DILocation(line: 1581, column: 13, scope: !4401)
!4989 = !DILocation(line: 1585, column: 34, scope: !4990)
!4990 = distinct !DILexicalBlock(scope: !4402, file: !911, line: 1584, column: 35)
!4991 = !DILocation(line: 1585, column: 28, scope: !4990)
!4992 = !DILocation(line: 1585, column: 37, scope: !4990)
!4993 = !DILocation(line: 1585, column: 26, scope: !4990)
!4994 = !DILocation(line: 1586, column: 13, scope: !4990)
!4995 = !DILocation(line: 1590, column: 26, scope: !4402)
!4996 = !DILocation(line: 1591, column: 13, scope: !4402)
!4997 = !DILocation(line: 1594, column: 21, scope: !4403)
!4998 = !DILocation(line: 1594, column: 24, scope: !4403)
!4999 = !DILocation(line: 1594, column: 28, scope: !4403)
!5000 = !DILocation(line: 1594, column: 31, scope: !4403)
!5001 = !DILocation(line: 1594, column: 47, scope: !4403)
!5002 = !DILocation(line: 1595, column: 21, scope: !4403)
!5003 = !DILocation(line: 1595, column: 27, scope: !4403)
!5004 = !DILocation(line: 1595, column: 51, scope: !4403)
!5005 = !DILocation(line: 1595, column: 39, scope: !4403)
!5006 = !DILocation(line: 1596, column: 33, scope: !4403)
!5007 = !DILocation(line: 1596, column: 37, scope: !4403)
!5008 = !DILocation(line: 1596, column: 35, scope: !4403)
!5009 = !DILocation(line: 1596, column: 22, scope: !4403)
!5010 = !DILocation(line: 1597, column: 28, scope: !4403)
!5011 = !DILocation(line: 1597, column: 32, scope: !4403)
!5012 = !DILocation(line: 1597, column: 30, scope: !4403)
!5013 = !DILocation(line: 1597, column: 22, scope: !4403)
!5014 = !DILocation(line: 1594, column: 9, scope: !4403)
!5015 = !DILocation(line: 1598, column: 5, scope: !4403)
!5016 = !DILocation(line: 1536, column: 52, scope: !5017)
!5017 = !DILexicalBlockFile(scope: !4404, file: !911, discriminator: 2)
!5018 = !DILocation(line: 1536, column: 5, scope: !5017)
!5019 = distinct !{!5019, !5020}
!5020 = !DILocation(line: 1536, column: 5, scope: !4396)
!5021 = !DILocation(line: 1602, column: 9, scope: !5022)
!5022 = distinct !DILexicalBlock(scope: !4396, file: !911, line: 1602, column: 9)
!5023 = !DILocation(line: 1602, column: 12, scope: !5022)
!5024 = !DILocation(line: 1602, column: 9, scope: !4396)
!5025 = !DILocalVariable(name: "i_lsps", scope: !5026, file: !911, line: 1603, type: !1859)
!5026 = distinct !DILexicalBlock(scope: !5022, file: !911, line: 1602, column: 20)
!5027 = !DILocation(line: 1603, column: 16, scope: !5026)
!5028 = !DILocalVariable(name: "lpcs", scope: !5026, file: !911, line: 1604, type: !1882)
!5029 = !DILocation(line: 1604, column: 15, scope: !5026)
!5030 = !DILocation(line: 1606, column: 16, scope: !5031)
!5031 = distinct !DILexicalBlock(scope: !5026, file: !911, line: 1606, column: 9)
!5032 = !DILocation(line: 1606, column: 14, scope: !5031)
!5033 = !DILocation(line: 1606, column: 21, scope: !5034)
!5034 = !DILexicalBlockFile(scope: !5035, file: !911, discriminator: 1)
!5035 = distinct !DILexicalBlock(scope: !5031, file: !911, line: 1606, column: 9)
!5036 = !DILocation(line: 1606, column: 25, scope: !5034)
!5037 = !DILocation(line: 1606, column: 28, scope: !5034)
!5038 = !DILocation(line: 1606, column: 23, scope: !5034)
!5039 = !DILocation(line: 1606, column: 9, scope: !5034)
!5040 = !DILocation(line: 1607, column: 46, scope: !5035)
!5041 = !DILocation(line: 1607, column: 36, scope: !5035)
!5042 = !DILocation(line: 1607, column: 56, scope: !5035)
!5043 = !DILocation(line: 1607, column: 51, scope: !5035)
!5044 = !DILocation(line: 1607, column: 49, scope: !5035)
!5045 = !DILocation(line: 1607, column: 33, scope: !5035)
!5046 = !DILocation(line: 1607, column: 25, scope: !5035)
!5047 = !DILocation(line: 1607, column: 20, scope: !5035)
!5048 = !DILocation(line: 1607, column: 13, scope: !5035)
!5049 = !DILocation(line: 1607, column: 23, scope: !5035)
!5050 = !DILocation(line: 1606, column: 35, scope: !5051)
!5051 = !DILexicalBlockFile(scope: !5035, file: !911, discriminator: 2)
!5052 = !DILocation(line: 1606, column: 9, scope: !5051)
!5053 = distinct !{!5053, !5054}
!5054 = !DILocation(line: 1606, column: 9, scope: !5026)
!5055 = !DILocation(line: 1608, column: 27, scope: !5026)
!5056 = !DILocation(line: 1608, column: 35, scope: !5026)
!5057 = !DILocation(line: 1608, column: 41, scope: !5026)
!5058 = !DILocation(line: 1608, column: 44, scope: !5026)
!5059 = !DILocation(line: 1608, column: 49, scope: !5026)
!5060 = !DILocation(line: 1608, column: 9, scope: !5026)
!5061 = !DILocation(line: 1609, column: 20, scope: !5026)
!5062 = !DILocation(line: 1609, column: 23, scope: !5026)
!5063 = !DILocation(line: 1609, column: 30, scope: !5026)
!5064 = !DILocation(line: 1609, column: 43, scope: !5026)
!5065 = !DILocation(line: 1610, column: 36, scope: !5026)
!5066 = !DILocation(line: 1610, column: 39, scope: !5026)
!5067 = !DILocation(line: 1610, column: 64, scope: !5026)
!5068 = !DILocation(line: 1610, column: 62, scope: !5026)
!5069 = !DILocation(line: 1610, column: 56, scope: !5026)
!5070 = !DILocation(line: 1610, column: 21, scope: !5026)
!5071 = !DILocation(line: 1610, column: 24, scope: !5026)
!5072 = !DILocation(line: 1611, column: 32, scope: !5026)
!5073 = !DILocation(line: 1611, column: 20, scope: !5026)
!5074 = !DILocation(line: 1611, column: 40, scope: !5026)
!5075 = !DILocation(line: 1611, column: 50, scope: !5026)
!5076 = !DILocation(line: 1609, column: 9, scope: !5026)
!5077 = !DILocation(line: 1613, column: 16, scope: !5078)
!5078 = distinct !DILexicalBlock(scope: !5026, file: !911, line: 1613, column: 9)
!5079 = !DILocation(line: 1613, column: 14, scope: !5078)
!5080 = !DILocation(line: 1613, column: 21, scope: !5081)
!5081 = !DILexicalBlockFile(scope: !5082, file: !911, discriminator: 1)
!5082 = distinct !DILexicalBlock(scope: !5078, file: !911, line: 1613, column: 9)
!5083 = !DILocation(line: 1613, column: 25, scope: !5081)
!5084 = !DILocation(line: 1613, column: 28, scope: !5081)
!5085 = !DILocation(line: 1613, column: 23, scope: !5081)
!5086 = !DILocation(line: 1613, column: 9, scope: !5081)
!5087 = !DILocation(line: 1614, column: 34, scope: !5082)
!5088 = !DILocation(line: 1614, column: 29, scope: !5082)
!5089 = !DILocation(line: 1614, column: 25, scope: !5082)
!5090 = !DILocation(line: 1614, column: 20, scope: !5082)
!5091 = !DILocation(line: 1614, column: 13, scope: !5082)
!5092 = !DILocation(line: 1614, column: 23, scope: !5082)
!5093 = !DILocation(line: 1613, column: 35, scope: !5094)
!5094 = !DILexicalBlockFile(scope: !5082, file: !911, discriminator: 2)
!5095 = !DILocation(line: 1613, column: 9, scope: !5094)
!5096 = distinct !{!5096, !5097}
!5097 = !DILocation(line: 1613, column: 9, scope: !5026)
!5098 = !DILocation(line: 1615, column: 27, scope: !5026)
!5099 = !DILocation(line: 1615, column: 35, scope: !5026)
!5100 = !DILocation(line: 1615, column: 41, scope: !5026)
!5101 = !DILocation(line: 1615, column: 44, scope: !5026)
!5102 = !DILocation(line: 1615, column: 49, scope: !5026)
!5103 = !DILocation(line: 1615, column: 9, scope: !5026)
!5104 = !DILocation(line: 1616, column: 20, scope: !5026)
!5105 = !DILocation(line: 1616, column: 24, scope: !5026)
!5106 = !DILocation(line: 1616, column: 36, scope: !5026)
!5107 = !DILocation(line: 1616, column: 53, scope: !5026)
!5108 = !DILocation(line: 1617, column: 36, scope: !5026)
!5109 = !DILocation(line: 1617, column: 39, scope: !5026)
!5110 = !DILocation(line: 1617, column: 64, scope: !5026)
!5111 = !DILocation(line: 1617, column: 62, scope: !5026)
!5112 = !DILocation(line: 1617, column: 56, scope: !5026)
!5113 = !DILocation(line: 1617, column: 74, scope: !5026)
!5114 = !DILocation(line: 1617, column: 21, scope: !5026)
!5115 = !DILocation(line: 1617, column: 24, scope: !5026)
!5116 = !DILocation(line: 1618, column: 32, scope: !5026)
!5117 = !DILocation(line: 1618, column: 20, scope: !5026)
!5118 = !DILocation(line: 1618, column: 40, scope: !5026)
!5119 = !DILocation(line: 1618, column: 50, scope: !5026)
!5120 = !DILocation(line: 1616, column: 9, scope: !5026)
!5121 = !DILocation(line: 1619, column: 5, scope: !5026)
!5122 = !DILocation(line: 1620, column: 16, scope: !5022)
!5123 = !DILocation(line: 1620, column: 9, scope: !5022)
!5124 = !DILocation(line: 1620, column: 25, scope: !5022)
!5125 = !DILocation(line: 1623, column: 5, scope: !4396)
!5126 = !DILocation(line: 1623, column: 8, scope: !4396)
!5127 = !DILocation(line: 1623, column: 18, scope: !4396)
!5128 = !DILocation(line: 1624, column: 9, scope: !5129)
!5129 = distinct !DILexicalBlock(scope: !4396, file: !911, line: 1624, column: 9)
!5130 = !DILocation(line: 1624, column: 12, scope: !5129)
!5131 = !DILocation(line: 1624, column: 23, scope: !5129)
!5132 = !DILocation(line: 1624, column: 9, scope: !4396)
!5133 = !DILocation(line: 1624, column: 34, scope: !5134)
!5134 = !DILexicalBlockFile(scope: !5129, file: !911, discriminator: 1)
!5135 = !DILocation(line: 1624, column: 37, scope: !5134)
!5136 = !DILocation(line: 1624, column: 48, scope: !5134)
!5137 = !DILocation(line: 1625, column: 36, scope: !4396)
!5138 = !DILocation(line: 1625, column: 24, scope: !4396)
!5139 = !DILocation(line: 1625, column: 44, scope: !4396)
!5140 = !DILocation(line: 1625, column: 5, scope: !4396)
!5141 = !DILocation(line: 1625, column: 8, scope: !4396)
!5142 = !DILocation(line: 1625, column: 22, scope: !4396)
!5143 = !DILocation(line: 1626, column: 25, scope: !4396)
!5144 = !DILocation(line: 1626, column: 13, scope: !4396)
!5145 = !DILocation(line: 1626, column: 33, scope: !4396)
!5146 = !DILocation(line: 1626, column: 5, scope: !4396)
!5147 = !DILocation(line: 1628, column: 9, scope: !5148)
!5148 = distinct !DILexicalBlock(scope: !4396, file: !911, line: 1626, column: 43)
!5149 = !DILocation(line: 1628, column: 12, scope: !5148)
!5150 = !DILocation(line: 1628, column: 27, scope: !5148)
!5151 = !DILocation(line: 1629, column: 9, scope: !5148)
!5152 = !DILocation(line: 1631, column: 29, scope: !5148)
!5153 = !DILocation(line: 1631, column: 9, scope: !5148)
!5154 = !DILocation(line: 1631, column: 12, scope: !5148)
!5155 = !DILocation(line: 1631, column: 27, scope: !5148)
!5156 = !DILocation(line: 1632, column: 9, scope: !5148)
!5157 = !DILocation(line: 1634, column: 47, scope: !5148)
!5158 = !DILocation(line: 1634, column: 35, scope: !5148)
!5159 = !DILocation(line: 1634, column: 55, scope: !5148)
!5160 = !DILocation(line: 1634, column: 64, scope: !5148)
!5161 = !DILocation(line: 1634, column: 29, scope: !5148)
!5162 = !DILocation(line: 1634, column: 9, scope: !5148)
!5163 = !DILocation(line: 1634, column: 12, scope: !5148)
!5164 = !DILocation(line: 1634, column: 27, scope: !5148)
!5165 = !DILocation(line: 1635, column: 9, scope: !5148)
!5166 = !DILocation(line: 1638, column: 5, scope: !4396)
!5167 = !DILocation(line: 1639, column: 1, scope: !4396)
!5168 = distinct !DISubprogram(name: "dequant_lsps", scope: !911, file: !911, line: 855, type: !5169, isLocal: true, isDefinition: true, scopeLine: 861, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!5169 = !DISubroutineType(types: !5170)
!5170 = !{null, !1725, !923, !5171, !5171, !923, !1477, !1726, !1726}
!5171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1680, size: 64, align: 64)
!5172 = !DILocalVariable(name: "lsps", arg: 1, scope: !5168, file: !911, line: 855, type: !1725)
!5173 = !DILocation(line: 855, column: 34, scope: !5168)
!5174 = !DILocalVariable(name: "num", arg: 2, scope: !5168, file: !911, line: 855, type: !923)
!5175 = !DILocation(line: 855, column: 44, scope: !5168)
!5176 = !DILocalVariable(name: "values", arg: 3, scope: !5168, file: !911, line: 856, type: !5171)
!5177 = !DILocation(line: 856, column: 42, scope: !5168)
!5178 = !DILocalVariable(name: "sizes", arg: 4, scope: !5168, file: !911, line: 857, type: !5171)
!5179 = !DILocation(line: 857, column: 42, scope: !5168)
!5180 = !DILocalVariable(name: "n_stages", arg: 5, scope: !5168, file: !911, line: 858, type: !923)
!5181 = !DILocation(line: 858, column: 30, scope: !5168)
!5182 = !DILocalVariable(name: "table", arg: 6, scope: !5168, file: !911, line: 858, type: !1477)
!5183 = !DILocation(line: 858, column: 55, scope: !5168)
!5184 = !DILocalVariable(name: "mul_q", arg: 7, scope: !5168, file: !911, line: 859, type: !1726)
!5185 = !DILocation(line: 859, column: 40, scope: !5168)
!5186 = !DILocalVariable(name: "base_q", arg: 8, scope: !5168, file: !911, line: 860, type: !1726)
!5187 = !DILocation(line: 860, column: 40, scope: !5168)
!5188 = !DILocalVariable(name: "n", scope: !5168, file: !911, line: 862, type: !923)
!5189 = !DILocation(line: 862, column: 9, scope: !5168)
!5190 = !DILocalVariable(name: "m", scope: !5168, file: !911, line: 862, type: !923)
!5191 = !DILocation(line: 862, column: 12, scope: !5168)
!5192 = !DILocation(line: 864, column: 12, scope: !5168)
!5193 = !DILocation(line: 864, column: 5, scope: !5168)
!5194 = !DILocation(line: 864, column: 21, scope: !5168)
!5195 = !DILocation(line: 864, column: 25, scope: !5168)
!5196 = !DILocation(line: 865, column: 12, scope: !5197)
!5197 = distinct !DILexicalBlock(scope: !5168, file: !911, line: 865, column: 5)
!5198 = !DILocation(line: 865, column: 10, scope: !5197)
!5199 = !DILocation(line: 865, column: 17, scope: !5200)
!5200 = !DILexicalBlockFile(scope: !5201, file: !911, discriminator: 1)
!5201 = distinct !DILexicalBlock(scope: !5197, file: !911, line: 865, column: 5)
!5202 = !DILocation(line: 865, column: 21, scope: !5200)
!5203 = !DILocation(line: 865, column: 19, scope: !5200)
!5204 = !DILocation(line: 865, column: 5, scope: !5200)
!5205 = !DILocalVariable(name: "t_off", scope: !5206, file: !911, line: 866, type: !1477)
!5206 = distinct !DILexicalBlock(scope: !5201, file: !911, line: 865, column: 36)
!5207 = !DILocation(line: 866, column: 24, scope: !5206)
!5208 = !DILocation(line: 866, column: 46, scope: !5206)
!5209 = !DILocation(line: 866, column: 39, scope: !5206)
!5210 = !DILocation(line: 866, column: 51, scope: !5206)
!5211 = !DILocation(line: 866, column: 49, scope: !5206)
!5212 = !DILocation(line: 866, column: 33, scope: !5206)
!5213 = !DILocalVariable(name: "base", scope: !5206, file: !911, line: 867, type: !1704)
!5214 = !DILocation(line: 867, column: 16, scope: !5206)
!5215 = !DILocation(line: 867, column: 30, scope: !5206)
!5216 = !DILocation(line: 867, column: 23, scope: !5206)
!5217 = !DILocalVariable(name: "mul", scope: !5206, file: !911, line: 867, type: !1704)
!5218 = !DILocation(line: 867, column: 34, scope: !5206)
!5219 = !DILocation(line: 867, column: 46, scope: !5206)
!5220 = !DILocation(line: 867, column: 40, scope: !5206)
!5221 = !DILocation(line: 869, column: 16, scope: !5222)
!5222 = distinct !DILexicalBlock(scope: !5206, file: !911, line: 869, column: 9)
!5223 = !DILocation(line: 869, column: 14, scope: !5222)
!5224 = !DILocation(line: 869, column: 21, scope: !5225)
!5225 = !DILexicalBlockFile(scope: !5226, file: !911, discriminator: 1)
!5226 = distinct !DILexicalBlock(scope: !5222, file: !911, line: 869, column: 9)
!5227 = !DILocation(line: 869, column: 25, scope: !5225)
!5228 = !DILocation(line: 869, column: 23, scope: !5225)
!5229 = !DILocation(line: 869, column: 9, scope: !5225)
!5230 = !DILocation(line: 870, column: 24, scope: !5226)
!5231 = !DILocation(line: 870, column: 31, scope: !5226)
!5232 = !DILocation(line: 870, column: 43, scope: !5226)
!5233 = !DILocation(line: 870, column: 37, scope: !5226)
!5234 = !DILocation(line: 870, column: 35, scope: !5226)
!5235 = !DILocation(line: 870, column: 29, scope: !5226)
!5236 = !DILocation(line: 870, column: 18, scope: !5226)
!5237 = !DILocation(line: 870, column: 13, scope: !5226)
!5238 = !DILocation(line: 870, column: 21, scope: !5226)
!5239 = !DILocation(line: 869, column: 31, scope: !5240)
!5240 = !DILexicalBlockFile(scope: !5226, file: !911, discriminator: 2)
!5241 = !DILocation(line: 869, column: 9, scope: !5240)
!5242 = distinct !{!5242, !5243}
!5243 = !DILocation(line: 869, column: 9, scope: !5206)
!5244 = !DILocation(line: 872, column: 24, scope: !5206)
!5245 = !DILocation(line: 872, column: 18, scope: !5206)
!5246 = !DILocation(line: 872, column: 29, scope: !5206)
!5247 = !DILocation(line: 872, column: 27, scope: !5206)
!5248 = !DILocation(line: 872, column: 15, scope: !5206)
!5249 = !DILocation(line: 873, column: 5, scope: !5206)
!5250 = !DILocation(line: 865, column: 32, scope: !5251)
!5251 = !DILexicalBlockFile(scope: !5201, file: !911, discriminator: 2)
!5252 = !DILocation(line: 865, column: 5, scope: !5251)
!5253 = distinct !{!5253, !5254}
!5254 = !DILocation(line: 865, column: 5, scope: !5168)
!5255 = !DILocation(line: 874, column: 1, scope: !5168)
!5256 = !DILocalVariable(name: "s", arg: 1, scope: !1809, file: !911, line: 1031, type: !1812)
!5257 = !DILocation(line: 1031, column: 46, scope: !1809)
!5258 = !DILocalVariable(name: "gb", arg: 2, scope: !1809, file: !911, line: 1031, type: !1715)
!5259 = !DILocation(line: 1031, column: 64, scope: !1809)
!5260 = !DILocalVariable(name: "pitch", arg: 3, scope: !1809, file: !911, line: 1032, type: !972)
!5261 = !DILocation(line: 1032, column: 40, scope: !1809)
!5262 = !DILocalVariable(name: "bits", scope: !1809, file: !911, line: 1044, type: !923)
!5263 = !DILocation(line: 1044, column: 9, scope: !1809)
!5264 = !DILocalVariable(name: "offset", scope: !1809, file: !911, line: 1044, type: !923)
!5265 = !DILocation(line: 1044, column: 15, scope: !1809)
!5266 = !DILocation(line: 1047, column: 5, scope: !1809)
!5267 = !DILocation(line: 1047, column: 8, scope: !1809)
!5268 = !DILocation(line: 1047, column: 22, scope: !1809)
!5269 = !DILocation(line: 1048, column: 26, scope: !5270)
!5270 = distinct !DILexicalBlock(scope: !1809, file: !911, line: 1048, column: 9)
!5271 = !DILocation(line: 1048, column: 17, scope: !5270)
!5272 = !DILocation(line: 1048, column: 15, scope: !5270)
!5273 = !DILocation(line: 1048, column: 34, scope: !5270)
!5274 = !DILocation(line: 1048, column: 9, scope: !1809)
!5275 = !DILocation(line: 1049, column: 9, scope: !5276)
!5276 = distinct !DILexicalBlock(scope: !5270, file: !911, line: 1048, column: 41)
!5277 = !DILocation(line: 1049, column: 12, scope: !5276)
!5278 = !DILocation(line: 1049, column: 26, scope: !5276)
!5279 = !DILocation(line: 1050, column: 18, scope: !5276)
!5280 = !DILocation(line: 1050, column: 23, scope: !5276)
!5281 = !DILocation(line: 1050, column: 29, scope: !5276)
!5282 = !DILocation(line: 1050, column: 44, scope: !5276)
!5283 = !DILocation(line: 1050, column: 35, scope: !5276)
!5284 = !DILocation(line: 1050, column: 33, scope: !5276)
!5285 = !DILocation(line: 1050, column: 14, scope: !5276)
!5286 = !DILocation(line: 1051, column: 5, scope: !5276)
!5287 = !DILocation(line: 1055, column: 27, scope: !1809)
!5288 = !DILocation(line: 1055, column: 40, scope: !1809)
!5289 = !DILocation(line: 1055, column: 37, scope: !1809)
!5290 = !DILocation(line: 1055, column: 26, scope: !1809)
!5291 = !DILocation(line: 1055, column: 53, scope: !5292)
!5292 = !DILexicalBlockFile(scope: !1809, file: !911, discriminator: 1)
!5293 = !DILocation(line: 1055, column: 26, scope: !5292)
!5294 = !DILocation(line: 1055, column: 66, scope: !5295)
!5295 = !DILexicalBlockFile(scope: !1809, file: !911, discriminator: 2)
!5296 = !DILocation(line: 1055, column: 26, scope: !5295)
!5297 = !DILocation(line: 1055, column: 26, scope: !5298)
!5298 = !DILexicalBlockFile(scope: !1809, file: !911, discriminator: 3)
!5299 = !DILocation(line: 1055, column: 77, scope: !5298)
!5300 = !DILocation(line: 1055, column: 25, scope: !5298)
!5301 = !DILocation(line: 1055, column: 5, scope: !5298)
!5302 = !DILocation(line: 1055, column: 8, scope: !5298)
!5303 = !DILocation(line: 1055, column: 23, scope: !5298)
!5304 = !DILocation(line: 1056, column: 32, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !1809, file: !911, line: 1056, column: 5)
!5306 = !DILocation(line: 1056, column: 19, scope: !5305)
!5307 = !DILocation(line: 1056, column: 17, scope: !5305)
!5308 = !DILocation(line: 1056, column: 10, scope: !5305)
!5309 = !DILocation(line: 1056, column: 39, scope: !5310)
!5310 = !DILexicalBlockFile(scope: !5311, file: !911, discriminator: 1)
!5311 = distinct !DILexicalBlock(scope: !5305, file: !911, line: 1056, column: 5)
!5312 = !DILocation(line: 1056, column: 46, scope: !5310)
!5313 = !DILocation(line: 1056, column: 5, scope: !5310)
!5314 = !DILocation(line: 1056, column: 5, scope: !5315)
!5315 = !DILexicalBlockFile(scope: !5305, file: !911, discriminator: 2)
!5316 = !DILocation(line: 1056, column: 61, scope: !5317)
!5317 = !DILexicalBlockFile(scope: !5311, file: !911, discriminator: 3)
!5318 = !DILocation(line: 1056, column: 58, scope: !5317)
!5319 = !DILocation(line: 1056, column: 5, scope: !5317)
!5320 = distinct !{!5320, !5321}
!5321 = !DILocation(line: 1056, column: 5, scope: !1809)
!5322 = !DILocation(line: 1057, column: 26, scope: !1809)
!5323 = !DILocation(line: 1057, column: 35, scope: !1809)
!5324 = !DILocation(line: 1057, column: 39, scope: !1809)
!5325 = !DILocation(line: 1057, column: 51, scope: !1809)
!5326 = !DILocation(line: 1057, column: 49, scope: !1809)
!5327 = !DILocation(line: 1057, column: 61, scope: !1809)
!5328 = !DILocation(line: 1057, column: 59, scope: !1809)
!5329 = !DILocation(line: 1057, column: 5, scope: !1809)
!5330 = !DILocation(line: 1057, column: 8, scope: !1809)
!5331 = !DILocation(line: 1057, column: 23, scope: !1809)
!5332 = !DILocation(line: 1058, column: 32, scope: !1809)
!5333 = !DILocation(line: 1058, column: 41, scope: !1809)
!5334 = !DILocation(line: 1058, column: 44, scope: !1809)
!5335 = !DILocation(line: 1058, column: 59, scope: !1809)
!5336 = !DILocation(line: 1058, column: 39, scope: !1809)
!5337 = !DILocation(line: 1058, column: 5, scope: !1809)
!5338 = !DILocation(line: 1058, column: 8, scope: !1809)
!5339 = !DILocation(line: 1058, column: 30, scope: !1809)
!5340 = !DILocation(line: 1059, column: 15, scope: !1809)
!5341 = !DILocation(line: 1059, column: 18, scope: !1809)
!5342 = !DILocation(line: 1059, column: 35, scope: !1809)
!5343 = !DILocation(line: 1059, column: 33, scope: !1809)
!5344 = !DILocation(line: 1059, column: 12, scope: !1809)
!5345 = !DILocation(line: 1060, column: 26, scope: !1809)
!5346 = !DILocation(line: 1060, column: 35, scope: !1809)
!5347 = !DILocation(line: 1060, column: 39, scope: !1809)
!5348 = !DILocation(line: 1060, column: 47, scope: !1809)
!5349 = !DILocation(line: 1060, column: 45, scope: !1809)
!5350 = !DILocation(line: 1060, column: 57, scope: !1809)
!5351 = !DILocation(line: 1060, column: 55, scope: !1809)
!5352 = !DILocation(line: 1060, column: 5, scope: !1809)
!5353 = !DILocation(line: 1060, column: 8, scope: !1809)
!5354 = !DILocation(line: 1060, column: 23, scope: !1809)
!5355 = !DILocation(line: 1061, column: 32, scope: !1809)
!5356 = !DILocation(line: 1061, column: 48, scope: !1809)
!5357 = !DILocation(line: 1061, column: 51, scope: !1809)
!5358 = !DILocation(line: 1061, column: 46, scope: !1809)
!5359 = !DILocation(line: 1061, column: 67, scope: !1809)
!5360 = !DILocation(line: 1061, column: 39, scope: !1809)
!5361 = !DILocation(line: 1061, column: 5, scope: !1809)
!5362 = !DILocation(line: 1061, column: 8, scope: !1809)
!5363 = !DILocation(line: 1061, column: 30, scope: !1809)
!5364 = !DILocation(line: 1066, column: 22, scope: !5365)
!5365 = distinct !DILexicalBlock(scope: !1809, file: !911, line: 1066, column: 9)
!5366 = !DILocation(line: 1066, column: 9, scope: !5365)
!5367 = !DILocation(line: 1066, column: 28, scope: !5365)
!5368 = !DILocation(line: 1066, column: 9, scope: !1809)
!5369 = !DILocation(line: 1067, column: 9, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5365, file: !911, line: 1066, column: 39)
!5371 = !DILocation(line: 1067, column: 16, scope: !5372)
!5372 = !DILexicalBlockFile(scope: !5370, file: !911, discriminator: 1)
!5373 = !DILocation(line: 1067, column: 19, scope: !5372)
!5374 = !DILocation(line: 1067, column: 43, scope: !5372)
!5375 = !DILocation(line: 1067, column: 41, scope: !5372)
!5376 = !DILocation(line: 1067, column: 54, scope: !5372)
!5377 = !DILocation(line: 1067, column: 57, scope: !5372)
!5378 = !DILocation(line: 1067, column: 52, scope: !5372)
!5379 = !DILocation(line: 1067, column: 72, scope: !5372)
!5380 = !DILocation(line: 1067, column: 9, scope: !5372)
!5381 = !DILocation(line: 1068, column: 41, scope: !5370)
!5382 = !DILocation(line: 1068, column: 13, scope: !5370)
!5383 = !DILocation(line: 1068, column: 16, scope: !5370)
!5384 = !DILocation(line: 1068, column: 38, scope: !5370)
!5385 = !DILocation(line: 1067, column: 9, scope: !5386)
!5386 = !DILexicalBlockFile(scope: !5370, file: !911, discriminator: 2)
!5387 = distinct !{!5387, !5369}
!5388 = !DILocation(line: 1069, column: 26, scope: !5389)
!5389 = distinct !DILexicalBlock(scope: !5370, file: !911, line: 1069, column: 13)
!5390 = !DILocation(line: 1069, column: 13, scope: !5389)
!5391 = !DILocation(line: 1069, column: 32, scope: !5389)
!5392 = !DILocation(line: 1069, column: 13, scope: !5370)
!5393 = !DILocation(line: 1070, column: 13, scope: !5389)
!5394 = !DILocation(line: 1070, column: 20, scope: !5395)
!5395 = !DILexicalBlockFile(scope: !5389, file: !911, discriminator: 1)
!5396 = !DILocation(line: 1070, column: 23, scope: !5395)
!5397 = !DILocation(line: 1070, column: 47, scope: !5395)
!5398 = !DILocation(line: 1070, column: 45, scope: !5395)
!5399 = !DILocation(line: 1070, column: 58, scope: !5395)
!5400 = !DILocation(line: 1070, column: 61, scope: !5395)
!5401 = !DILocation(line: 1070, column: 56, scope: !5395)
!5402 = !DILocation(line: 1070, column: 76, scope: !5395)
!5403 = !DILocation(line: 1070, column: 13, scope: !5395)
!5404 = !DILocation(line: 1071, column: 45, scope: !5389)
!5405 = !DILocation(line: 1071, column: 17, scope: !5389)
!5406 = !DILocation(line: 1071, column: 20, scope: !5389)
!5407 = !DILocation(line: 1071, column: 42, scope: !5389)
!5408 = !DILocation(line: 1070, column: 13, scope: !5409)
!5409 = !DILexicalBlockFile(scope: !5389, file: !911, discriminator: 2)
!5410 = distinct !{!5410, !5393}
!5411 = !DILocation(line: 1070, column: 13, scope: !5412)
!5412 = !DILexicalBlockFile(scope: !5389, file: !911, discriminator: 3)
!5413 = !DILocation(line: 1072, column: 5, scope: !5370)
!5414 = !DILocation(line: 1073, column: 1, scope: !1809)
!5415 = distinct !DISubprogram(name: "synth_block", scope: !911, file: !911, line: 1435, type: !5416, isLocal: true, isDefinition: true, scopeLine: 1441, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!5416 = !DISubroutineType(types: !5417)
!5417 = !{null, !1812, !1715, !923, !923, !923, !1726, !1726, !2015, !937, !937}
!5418 = !DILocalVariable(name: "s", arg: 1, scope: !5415, file: !911, line: 1435, type: !1812)
!5419 = !DILocation(line: 1435, column: 42, scope: !5415)
!5420 = !DILocalVariable(name: "gb", arg: 2, scope: !5415, file: !911, line: 1435, type: !1715)
!5421 = !DILocation(line: 1435, column: 60, scope: !5415)
!5422 = !DILocalVariable(name: "block_idx", arg: 3, scope: !5415, file: !911, line: 1436, type: !923)
!5423 = !DILocation(line: 1436, column: 29, scope: !5415)
!5424 = !DILocalVariable(name: "size", arg: 4, scope: !5415, file: !911, line: 1436, type: !923)
!5425 = !DILocation(line: 1436, column: 44, scope: !5415)
!5426 = !DILocalVariable(name: "block_pitch_sh2", arg: 5, scope: !5415, file: !911, line: 1437, type: !923)
!5427 = !DILocation(line: 1437, column: 29, scope: !5415)
!5428 = !DILocalVariable(name: "lsps", arg: 6, scope: !5415, file: !911, line: 1438, type: !1726)
!5429 = !DILocation(line: 1438, column: 39, scope: !5415)
!5430 = !DILocalVariable(name: "prev_lsps", arg: 7, scope: !5415, file: !911, line: 1438, type: !1726)
!5431 = !DILocation(line: 1438, column: 59, scope: !5415)
!5432 = !DILocalVariable(name: "frame_desc", arg: 8, scope: !5415, file: !911, line: 1439, type: !2015)
!5433 = !DILocation(line: 1439, column: 55, scope: !5415)
!5434 = !DILocalVariable(name: "excitation", arg: 9, scope: !5415, file: !911, line: 1440, type: !937)
!5435 = !DILocation(line: 1440, column: 32, scope: !5415)
!5436 = !DILocalVariable(name: "synth", arg: 10, scope: !5415, file: !911, line: 1440, type: !937)
!5437 = !DILocation(line: 1440, column: 51, scope: !5415)
!5438 = !DILocalVariable(name: "i_lsps", scope: !5415, file: !911, line: 1442, type: !1859)
!5439 = !DILocation(line: 1442, column: 12, scope: !5415)
!5440 = !DILocalVariable(name: "lpcs", scope: !5415, file: !911, line: 1443, type: !1882)
!5441 = !DILocation(line: 1443, column: 11, scope: !5415)
!5442 = !DILocalVariable(name: "fac", scope: !5415, file: !911, line: 1444, type: !938)
!5443 = !DILocation(line: 1444, column: 11, scope: !5415)
!5444 = !DILocalVariable(name: "n", scope: !5415, file: !911, line: 1445, type: !923)
!5445 = !DILocation(line: 1445, column: 9, scope: !5415)
!5446 = !DILocation(line: 1447, column: 9, scope: !5447)
!5447 = distinct !DILexicalBlock(scope: !5415, file: !911, line: 1447, column: 9)
!5448 = !DILocation(line: 1447, column: 21, scope: !5447)
!5449 = !DILocation(line: 1447, column: 30, scope: !5447)
!5450 = !DILocation(line: 1447, column: 9, scope: !5415)
!5451 = !DILocation(line: 1448, column: 31, scope: !5447)
!5452 = !DILocation(line: 1448, column: 34, scope: !5447)
!5453 = !DILocation(line: 1448, column: 38, scope: !5447)
!5454 = !DILocation(line: 1448, column: 49, scope: !5447)
!5455 = !DILocation(line: 1448, column: 55, scope: !5447)
!5456 = !DILocation(line: 1448, column: 67, scope: !5447)
!5457 = !DILocation(line: 1448, column: 9, scope: !5447)
!5458 = !DILocation(line: 1450, column: 29, scope: !5447)
!5459 = !DILocation(line: 1450, column: 32, scope: !5447)
!5460 = !DILocation(line: 1450, column: 36, scope: !5447)
!5461 = !DILocation(line: 1450, column: 47, scope: !5447)
!5462 = !DILocation(line: 1450, column: 53, scope: !5447)
!5463 = !DILocation(line: 1451, column: 29, scope: !5447)
!5464 = !DILocation(line: 1451, column: 41, scope: !5447)
!5465 = !DILocation(line: 1450, column: 9, scope: !5447)
!5466 = !DILocation(line: 1454, column: 12, scope: !5415)
!5467 = !DILocation(line: 1454, column: 22, scope: !5415)
!5468 = !DILocation(line: 1454, column: 31, scope: !5415)
!5469 = !DILocation(line: 1454, column: 43, scope: !5415)
!5470 = !DILocation(line: 1454, column: 29, scope: !5415)
!5471 = !DILocation(line: 1454, column: 11, scope: !5415)
!5472 = !DILocation(line: 1454, column: 9, scope: !5415)
!5473 = !DILocation(line: 1455, column: 12, scope: !5474)
!5474 = distinct !DILexicalBlock(scope: !5415, file: !911, line: 1455, column: 5)
!5475 = !DILocation(line: 1455, column: 10, scope: !5474)
!5476 = !DILocation(line: 1455, column: 17, scope: !5477)
!5477 = !DILexicalBlockFile(scope: !5478, file: !911, discriminator: 1)
!5478 = distinct !DILexicalBlock(scope: !5474, file: !911, line: 1455, column: 5)
!5479 = !DILocation(line: 1455, column: 21, scope: !5477)
!5480 = !DILocation(line: 1455, column: 24, scope: !5477)
!5481 = !DILocation(line: 1455, column: 19, scope: !5477)
!5482 = !DILocation(line: 1455, column: 5, scope: !5477)
!5483 = !DILocation(line: 1456, column: 35, scope: !5478)
!5484 = !DILocation(line: 1456, column: 25, scope: !5478)
!5485 = !DILocation(line: 1456, column: 40, scope: !5478)
!5486 = !DILocation(line: 1456, column: 52, scope: !5478)
!5487 = !DILocation(line: 1456, column: 47, scope: !5478)
!5488 = !DILocation(line: 1456, column: 67, scope: !5478)
!5489 = !DILocation(line: 1456, column: 57, scope: !5478)
!5490 = !DILocation(line: 1456, column: 55, scope: !5478)
!5491 = !DILocation(line: 1456, column: 44, scope: !5478)
!5492 = !DILocation(line: 1456, column: 38, scope: !5478)
!5493 = !DILocation(line: 1456, column: 21, scope: !5478)
!5494 = !DILocation(line: 1456, column: 16, scope: !5478)
!5495 = !DILocation(line: 1456, column: 9, scope: !5478)
!5496 = !DILocation(line: 1456, column: 19, scope: !5478)
!5497 = !DILocation(line: 1455, column: 31, scope: !5498)
!5498 = !DILexicalBlockFile(scope: !5478, file: !911, discriminator: 2)
!5499 = !DILocation(line: 1455, column: 5, scope: !5498)
!5500 = distinct !{!5500, !5501}
!5501 = !DILocation(line: 1455, column: 5, scope: !5415)
!5502 = !DILocation(line: 1457, column: 23, scope: !5415)
!5503 = !DILocation(line: 1457, column: 31, scope: !5415)
!5504 = !DILocation(line: 1457, column: 37, scope: !5415)
!5505 = !DILocation(line: 1457, column: 40, scope: !5415)
!5506 = !DILocation(line: 1457, column: 45, scope: !5415)
!5507 = !DILocation(line: 1457, column: 5, scope: !5415)
!5508 = !DILocation(line: 1460, column: 34, scope: !5415)
!5509 = !DILocation(line: 1460, column: 41, scope: !5415)
!5510 = !DILocation(line: 1460, column: 47, scope: !5415)
!5511 = !DILocation(line: 1460, column: 59, scope: !5415)
!5512 = !DILocation(line: 1460, column: 65, scope: !5415)
!5513 = !DILocation(line: 1460, column: 68, scope: !5415)
!5514 = !DILocation(line: 1460, column: 5, scope: !5415)
!5515 = !DILocation(line: 1461, column: 1, scope: !5415)
!5516 = distinct !DISubprogram(name: "postfilter", scope: !911, file: !911, line: 801, type: !5517, isLocal: true, isDefinition: true, scopeLine: 805, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!5517 = !DISubroutineType(types: !5518)
!5518 = !{null, !1812, !1953, !937, !923, !1953, !937, !923, !923}
!5519 = !DILocalVariable(name: "s", arg: 1, scope: !5516, file: !911, line: 801, type: !1812)
!5520 = !DILocation(line: 801, column: 41, scope: !5516)
!5521 = !DILocalVariable(name: "synth", arg: 2, scope: !5516, file: !911, line: 801, type: !1953)
!5522 = !DILocation(line: 801, column: 57, scope: !5516)
!5523 = !DILocalVariable(name: "samples", arg: 3, scope: !5516, file: !911, line: 802, type: !937)
!5524 = !DILocation(line: 802, column: 31, scope: !5516)
!5525 = !DILocalVariable(name: "size", arg: 4, scope: !5516, file: !911, line: 802, type: !923)
!5526 = !DILocation(line: 802, column: 44, scope: !5516)
!5527 = !DILocalVariable(name: "lpcs", arg: 5, scope: !5516, file: !911, line: 803, type: !1953)
!5528 = !DILocation(line: 803, column: 37, scope: !5516)
!5529 = !DILocalVariable(name: "zero_exc_pf", arg: 6, scope: !5516, file: !911, line: 803, type: !937)
!5530 = !DILocation(line: 803, column: 50, scope: !5516)
!5531 = !DILocalVariable(name: "fcb_type", arg: 7, scope: !5516, file: !911, line: 804, type: !923)
!5532 = !DILocation(line: 804, column: 28, scope: !5516)
!5533 = !DILocalVariable(name: "pitch", arg: 8, scope: !5516, file: !911, line: 804, type: !923)
!5534 = !DILocation(line: 804, column: 42, scope: !5516)
!5535 = !DILocalVariable(name: "synth_filter_in_buf", scope: !5516, file: !911, line: 806, type: !5536)
!5536 = !DICompositeType(tag: DW_TAG_array_type, baseType: !938, size: 2560, align: 32, elements: !5537)
!5537 = !{!5538}
!5538 = !DISubrange(count: 80)
!5539 = !DILocation(line: 806, column: 11, scope: !5516)
!5540 = !DILocalVariable(name: "synth_pf", scope: !5516, file: !911, line: 807, type: !937)
!5541 = !DILocation(line: 807, column: 12, scope: !5516)
!5542 = !DILocation(line: 807, column: 24, scope: !5516)
!5543 = !DILocation(line: 807, column: 27, scope: !5516)
!5544 = !DILocalVariable(name: "synth_filter_in", scope: !5516, file: !911, line: 808, type: !937)
!5545 = !DILocation(line: 808, column: 12, scope: !5516)
!5546 = !DILocation(line: 808, column: 30, scope: !5516)
!5547 = !DILocation(line: 810, column: 5, scope: !5516)
!5548 = distinct !{!5548, !5547}
!5549 = !DILocation(line: 810, column: 16, scope: !5550)
!5550 = !DILexicalBlockFile(scope: !5551, file: !911, discriminator: 1)
!5551 = distinct !DILexicalBlock(scope: !5552, file: !911, line: 810, column: 14)
!5552 = distinct !DILexicalBlock(scope: !5516, file: !911, line: 810, column: 8)
!5553 = !DILocation(line: 810, column: 21, scope: !5550)
!5554 = !DILocation(line: 810, column: 14, scope: !5550)
!5555 = !DILocation(line: 810, column: 36, scope: !5556)
!5556 = !DILexicalBlockFile(scope: !5557, file: !911, discriminator: 2)
!5557 = distinct !DILexicalBlock(scope: !5551, file: !911, line: 810, column: 34)
!5558 = !DILocation(line: 810, column: 93, scope: !5559)
!5559 = !DILexicalBlockFile(scope: !5556, file: !911, discriminator: 4)
!5560 = !DILocation(line: 810, column: 93, scope: !5556)
!5561 = !DILocation(line: 810, column: 104, scope: !5562)
!5562 = !DILexicalBlockFile(scope: !5552, file: !911, discriminator: 3)
!5563 = !DILocation(line: 813, column: 39, scope: !5516)
!5564 = !DILocation(line: 813, column: 52, scope: !5516)
!5565 = !DILocation(line: 813, column: 58, scope: !5516)
!5566 = !DILocation(line: 813, column: 65, scope: !5516)
!5567 = !DILocation(line: 813, column: 71, scope: !5516)
!5568 = !DILocation(line: 813, column: 74, scope: !5516)
!5569 = !DILocation(line: 813, column: 5, scope: !5516)
!5570 = !DILocation(line: 815, column: 9, scope: !5571)
!5571 = distinct !DILexicalBlock(scope: !5516, file: !911, line: 815, column: 9)
!5572 = !DILocation(line: 815, column: 18, scope: !5571)
!5573 = !DILocation(line: 815, column: 40, scope: !5571)
!5574 = !DILocation(line: 816, column: 26, scope: !5571)
!5575 = !DILocation(line: 816, column: 29, scope: !5571)
!5576 = !DILocation(line: 816, column: 36, scope: !5571)
!5577 = !DILocation(line: 816, column: 49, scope: !5571)
!5578 = !DILocation(line: 816, column: 70, scope: !5571)
!5579 = !DILocation(line: 816, column: 10, scope: !5571)
!5580 = !DILocation(line: 815, column: 9, scope: !5581)
!5581 = !DILexicalBlockFile(scope: !5516, file: !911, discriminator: 1)
!5582 = !DILocation(line: 817, column: 27, scope: !5571)
!5583 = !DILocation(line: 817, column: 25, scope: !5571)
!5584 = !DILocation(line: 817, column: 9, scope: !5571)
!5585 = !DILocation(line: 820, column: 34, scope: !5516)
!5586 = !DILocation(line: 820, column: 44, scope: !5516)
!5587 = !DILocation(line: 821, column: 34, scope: !5516)
!5588 = !DILocation(line: 821, column: 51, scope: !5516)
!5589 = !DILocation(line: 821, column: 57, scope: !5516)
!5590 = !DILocation(line: 821, column: 60, scope: !5516)
!5591 = !DILocation(line: 820, column: 5, scope: !5516)
!5592 = !DILocation(line: 822, column: 23, scope: !5516)
!5593 = !DILocation(line: 822, column: 26, scope: !5516)
!5594 = !DILocation(line: 822, column: 22, scope: !5516)
!5595 = !DILocation(line: 822, column: 13, scope: !5516)
!5596 = !DILocation(line: 822, column: 5, scope: !5516)
!5597 = !DILocation(line: 822, column: 43, scope: !5516)
!5598 = !DILocation(line: 822, column: 50, scope: !5516)
!5599 = !DILocation(line: 822, column: 53, scope: !5516)
!5600 = !DILocation(line: 822, column: 48, scope: !5516)
!5601 = !DILocation(line: 822, column: 34, scope: !5516)
!5602 = !DILocation(line: 823, column: 34, scope: !5516)
!5603 = !DILocation(line: 823, column: 37, scope: !5516)
!5604 = !DILocation(line: 823, column: 32, scope: !5516)
!5605 = !DILocation(line: 825, column: 20, scope: !5516)
!5606 = !DILocation(line: 825, column: 23, scope: !5516)
!5607 = !DILocation(line: 825, column: 33, scope: !5516)
!5608 = !DILocation(line: 825, column: 43, scope: !5516)
!5609 = !DILocation(line: 825, column: 49, scope: !5516)
!5610 = !DILocation(line: 825, column: 5, scope: !5516)
!5611 = !DILocation(line: 827, column: 27, scope: !5516)
!5612 = !DILocation(line: 827, column: 36, scope: !5516)
!5613 = !DILocation(line: 827, column: 46, scope: !5516)
!5614 = !DILocation(line: 827, column: 53, scope: !5516)
!5615 = !DILocation(line: 828, column: 28, scope: !5516)
!5616 = !DILocation(line: 828, column: 31, scope: !5516)
!5617 = !DILocation(line: 827, column: 5, scope: !5516)
!5618 = !DILocation(line: 830, column: 9, scope: !5619)
!5619 = distinct !DILexicalBlock(scope: !5516, file: !911, line: 830, column: 9)
!5620 = !DILocation(line: 830, column: 12, scope: !5619)
!5621 = !DILocation(line: 830, column: 21, scope: !5619)
!5622 = !DILocation(line: 830, column: 9, scope: !5516)
!5623 = !DILocation(line: 834, column: 50, scope: !5624)
!5624 = distinct !DILexicalBlock(scope: !5619, file: !911, line: 830, column: 26)
!5625 = !DILocation(line: 834, column: 59, scope: !5624)
!5626 = !DILocation(line: 835, column: 30, scope: !5624)
!5627 = !DILocation(line: 835, column: 13, scope: !5624)
!5628 = !DILocation(line: 836, column: 30, scope: !5624)
!5629 = !DILocation(line: 836, column: 13, scope: !5624)
!5630 = !DILocation(line: 837, column: 28, scope: !5624)
!5631 = !DILocation(line: 837, column: 31, scope: !5624)
!5632 = !DILocation(line: 837, column: 40, scope: !5624)
!5633 = !DILocation(line: 834, column: 9, scope: !5624)
!5634 = !DILocation(line: 838, column: 5, scope: !5624)
!5635 = !DILocation(line: 839, column: 1, scope: !5516)
!5636 = distinct !DISubprogram(name: "synth_block_hardcoded", scope: !911, file: !911, line: 1270, type: !5637, isLocal: true, isDefinition: true, scopeLine: 1274, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!5637 = !DISubroutineType(types: !5638)
!5638 = !{null, !1812, !1715, !923, !923, !2015, !937}
!5639 = !DILocalVariable(name: "s", arg: 1, scope: !5636, file: !911, line: 1270, type: !1812)
!5640 = !DILocation(line: 1270, column: 52, scope: !5636)
!5641 = !DILocalVariable(name: "gb", arg: 2, scope: !5636, file: !911, line: 1270, type: !1715)
!5642 = !DILocation(line: 1270, column: 70, scope: !5636)
!5643 = !DILocalVariable(name: "block_idx", arg: 3, scope: !5636, file: !911, line: 1271, type: !923)
!5644 = !DILocation(line: 1271, column: 38, scope: !5636)
!5645 = !DILocalVariable(name: "size", arg: 4, scope: !5636, file: !911, line: 1271, type: !923)
!5646 = !DILocation(line: 1271, column: 53, scope: !5636)
!5647 = !DILocalVariable(name: "frame_desc", arg: 5, scope: !5636, file: !911, line: 1272, type: !2015)
!5648 = !DILocation(line: 1272, column: 64, scope: !5636)
!5649 = !DILocalVariable(name: "excitation", arg: 6, scope: !5636, file: !911, line: 1273, type: !937)
!5650 = !DILocation(line: 1273, column: 41, scope: !5636)
!5651 = !DILocalVariable(name: "gain", scope: !5636, file: !911, line: 1275, type: !938)
!5652 = !DILocation(line: 1275, column: 11, scope: !5636)
!5653 = !DILocalVariable(name: "n", scope: !5636, file: !911, line: 1276, type: !923)
!5654 = !DILocation(line: 1276, column: 9, scope: !5636)
!5655 = !DILocalVariable(name: "r_idx", scope: !5636, file: !911, line: 1276, type: !923)
!5656 = !DILocation(line: 1276, column: 12, scope: !5636)
!5657 = !DILocation(line: 1278, column: 5, scope: !5636)
!5658 = distinct !{!5658, !5657}
!5659 = !DILocation(line: 1278, column: 16, scope: !5660)
!5660 = !DILexicalBlockFile(scope: !5661, file: !911, discriminator: 1)
!5661 = distinct !DILexicalBlock(scope: !5662, file: !911, line: 1278, column: 14)
!5662 = distinct !DILexicalBlock(scope: !5636, file: !911, line: 1278, column: 8)
!5663 = !DILocation(line: 1278, column: 21, scope: !5660)
!5664 = !DILocation(line: 1278, column: 14, scope: !5660)
!5665 = !DILocation(line: 1278, column: 32, scope: !5666)
!5666 = !DILexicalBlockFile(scope: !5667, file: !911, discriminator: 2)
!5667 = distinct !DILexicalBlock(scope: !5661, file: !911, line: 1278, column: 30)
!5668 = !DILocation(line: 1278, column: 90, scope: !5669)
!5669 = !DILexicalBlockFile(scope: !5666, file: !911, discriminator: 4)
!5670 = !DILocation(line: 1278, column: 90, scope: !5666)
!5671 = !DILocation(line: 1278, column: 101, scope: !5672)
!5672 = !DILexicalBlockFile(scope: !5662, file: !911, discriminator: 3)
!5673 = !DILocation(line: 1281, column: 9, scope: !5674)
!5674 = distinct !DILexicalBlock(scope: !5636, file: !911, line: 1281, column: 9)
!5675 = !DILocation(line: 1281, column: 21, scope: !5674)
!5676 = !DILocation(line: 1281, column: 30, scope: !5674)
!5677 = !DILocation(line: 1281, column: 9, scope: !5636)
!5678 = !DILocation(line: 1282, column: 22, scope: !5679)
!5679 = distinct !DILexicalBlock(scope: !5674, file: !911, line: 1281, column: 51)
!5680 = !DILocation(line: 1282, column: 25, scope: !5679)
!5681 = !DILocation(line: 1282, column: 37, scope: !5679)
!5682 = !DILocation(line: 1282, column: 48, scope: !5679)
!5683 = !DILocation(line: 1282, column: 17, scope: !5679)
!5684 = !DILocation(line: 1282, column: 15, scope: !5679)
!5685 = !DILocation(line: 1283, column: 16, scope: !5679)
!5686 = !DILocation(line: 1283, column: 19, scope: !5679)
!5687 = !DILocation(line: 1283, column: 14, scope: !5679)
!5688 = !DILocation(line: 1284, column: 5, scope: !5679)
!5689 = !DILocation(line: 1285, column: 26, scope: !5690)
!5690 = distinct !DILexicalBlock(scope: !5674, file: !911, line: 1284, column: 12)
!5691 = !DILocation(line: 1285, column: 17, scope: !5690)
!5692 = !DILocation(line: 1285, column: 15, scope: !5690)
!5693 = !DILocation(line: 1286, column: 49, scope: !5690)
!5694 = !DILocation(line: 1286, column: 40, scope: !5690)
!5695 = !DILocation(line: 1286, column: 16, scope: !5690)
!5696 = !DILocation(line: 1286, column: 14, scope: !5690)
!5697 = !DILocation(line: 1290, column: 12, scope: !5636)
!5698 = !DILocation(line: 1290, column: 15, scope: !5636)
!5699 = !DILocation(line: 1290, column: 5, scope: !5636)
!5700 = !DILocation(line: 1293, column: 12, scope: !5701)
!5701 = distinct !DILexicalBlock(scope: !5636, file: !911, line: 1293, column: 5)
!5702 = !DILocation(line: 1293, column: 10, scope: !5701)
!5703 = !DILocation(line: 1293, column: 17, scope: !5704)
!5704 = !DILexicalBlockFile(scope: !5705, file: !911, discriminator: 1)
!5705 = distinct !DILexicalBlock(scope: !5701, file: !911, line: 1293, column: 5)
!5706 = !DILocation(line: 1293, column: 21, scope: !5704)
!5707 = !DILocation(line: 1293, column: 19, scope: !5704)
!5708 = !DILocation(line: 1293, column: 5, scope: !5704)
!5709 = !DILocation(line: 1294, column: 47, scope: !5705)
!5710 = !DILocation(line: 1294, column: 55, scope: !5705)
!5711 = !DILocation(line: 1294, column: 53, scope: !5705)
!5712 = !DILocation(line: 1294, column: 25, scope: !5705)
!5713 = !DILocation(line: 1294, column: 60, scope: !5705)
!5714 = !DILocation(line: 1294, column: 58, scope: !5705)
!5715 = !DILocation(line: 1294, column: 20, scope: !5705)
!5716 = !DILocation(line: 1294, column: 9, scope: !5705)
!5717 = !DILocation(line: 1294, column: 23, scope: !5705)
!5718 = !DILocation(line: 1293, column: 28, scope: !5719)
!5719 = !DILexicalBlockFile(scope: !5705, file: !911, discriminator: 2)
!5720 = !DILocation(line: 1293, column: 5, scope: !5719)
!5721 = distinct !{!5721, !5722}
!5722 = !DILocation(line: 1293, column: 5, scope: !5636)
!5723 = !DILocation(line: 1295, column: 1, scope: !5636)
!5724 = !DILocation(line: 127, column: 87, scope: !3702, inlinedAt: !5725)
!5725 = distinct !DILocation(line: 1394, column: 23, scope: !5726)
!5726 = distinct !DILexicalBlock(scope: !5727, file: !911, line: 1389, column: 37)
!5727 = distinct !DILexicalBlock(scope: !5728, file: !911, line: 1389, column: 17)
!5728 = distinct !DILexicalBlock(scope: !5729, file: !911, line: 1381, column: 41)
!5729 = distinct !DILexicalBlock(scope: !5730, file: !911, line: 1381, column: 9)
!5730 = distinct !DILexicalBlock(scope: !5731, file: !911, line: 1381, column: 9)
!5731 = distinct !DILexicalBlock(scope: !5732, file: !911, line: 1379, column: 54)
!5732 = distinct !DILexicalBlock(scope: !2012, file: !911, line: 1379, column: 9)
!5733 = !DILocation(line: 127, column: 94, scope: !3702, inlinedAt: !5725)
!5734 = !DILocation(line: 127, column: 104, scope: !3702, inlinedAt: !5725)
!5735 = !DILocalVariable(name: "a", arg: 1, scope: !5736, file: !5737, line: 124, type: !938)
!5736 = distinct !DISubprogram(name: "av_clipf_sse", scope: !5737, file: !5737, line: 124, type: !5738, isLocal: true, isDefinition: true, scopeLine: 125, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!5737 = !DIFile(filename: "./libavutil/x86/intmath.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!5738 = !DISubroutineType(types: !5739)
!5739 = !{!938, !938, !938, !938}
!5740 = !DILocation(line: 124, column: 94, scope: !5736, inlinedAt: !5741)
!5741 = distinct !DILocation(line: 1368, column: 16, scope: !2012)
!5742 = !DILocalVariable(name: "amin", arg: 2, scope: !5736, file: !5737, line: 124, type: !938)
!5743 = !DILocation(line: 124, column: 103, scope: !5736, inlinedAt: !5741)
!5744 = !DILocalVariable(name: "amax", arg: 3, scope: !5736, file: !5737, line: 124, type: !938)
!5745 = !DILocation(line: 124, column: 115, scope: !5736, inlinedAt: !5741)
!5746 = !DILocalVariable(name: "s", arg: 1, scope: !2012, file: !911, line: 1301, type: !1812)
!5747 = !DILocation(line: 1301, column: 50, scope: !2012)
!5748 = !DILocalVariable(name: "gb", arg: 2, scope: !2012, file: !911, line: 1301, type: !1715)
!5749 = !DILocation(line: 1301, column: 68, scope: !2012)
!5750 = !DILocalVariable(name: "block_idx", arg: 3, scope: !2012, file: !911, line: 1302, type: !923)
!5751 = !DILocation(line: 1302, column: 37, scope: !2012)
!5752 = !DILocalVariable(name: "size", arg: 4, scope: !2012, file: !911, line: 1302, type: !923)
!5753 = !DILocation(line: 1302, column: 52, scope: !2012)
!5754 = !DILocalVariable(name: "block_pitch_sh2", arg: 5, scope: !2012, file: !911, line: 1303, type: !923)
!5755 = !DILocation(line: 1303, column: 37, scope: !2012)
!5756 = !DILocalVariable(name: "frame_desc", arg: 6, scope: !2012, file: !911, line: 1304, type: !2015)
!5757 = !DILocation(line: 1304, column: 63, scope: !2012)
!5758 = !DILocalVariable(name: "excitation", arg: 7, scope: !2012, file: !911, line: 1305, type: !937)
!5759 = !DILocation(line: 1305, column: 40, scope: !2012)
!5760 = !DILocalVariable(name: "pulses", scope: !2012, file: !911, line: 1310, type: !5536)
!5761 = !DILocation(line: 1310, column: 11, scope: !2012)
!5762 = !DILocalVariable(name: "pred_err", scope: !2012, file: !911, line: 1310, type: !938)
!5763 = !DILocation(line: 1310, column: 28, scope: !2012)
!5764 = !DILocalVariable(name: "acb_gain", scope: !2012, file: !911, line: 1310, type: !938)
!5765 = !DILocation(line: 1310, column: 38, scope: !2012)
!5766 = !DILocalVariable(name: "fcb_gain", scope: !2012, file: !911, line: 1310, type: !938)
!5767 = !DILocation(line: 1310, column: 48, scope: !2012)
!5768 = !DILocalVariable(name: "n", scope: !2012, file: !911, line: 1311, type: !923)
!5769 = !DILocation(line: 1311, column: 9, scope: !2012)
!5770 = !DILocalVariable(name: "idx", scope: !2012, file: !911, line: 1311, type: !923)
!5771 = !DILocation(line: 1311, column: 12, scope: !2012)
!5772 = !DILocalVariable(name: "gain_weight", scope: !2012, file: !911, line: 1311, type: !923)
!5773 = !DILocation(line: 1311, column: 17, scope: !2012)
!5774 = !DILocalVariable(name: "fcb", scope: !2012, file: !911, line: 1312, type: !5775)
!5775 = !DIDerivedType(tag: DW_TAG_typedef, name: "AMRFixed", file: !5776, line: 60, baseType: !5777)
!5776 = !DIFile(filename: "libavcodec/acelp_vectors.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!5777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AMRFixed", file: !5776, line: 53, size: 768, align: 32, elements: !5778)
!5778 = !{!5779, !5780, !5783, !5785, !5786, !5787}
!5779 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !5777, file: !5776, line: 54, baseType: !923, size: 32, align: 32)
!5780 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !5777, file: !5776, line: 55, baseType: !5781, size: 320, align: 32, offset: 32)
!5781 = !DICompositeType(tag: DW_TAG_array_type, baseType: !923, size: 320, align: 32, elements: !5782)
!5782 = !{!1710}
!5783 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !5777, file: !5776, line: 56, baseType: !5784, size: 320, align: 32, offset: 352)
!5784 = !DICompositeType(tag: DW_TAG_array_type, baseType: !938, size: 320, align: 32, elements: !5782)
!5785 = !DIDerivedType(tag: DW_TAG_member, name: "no_repeat_mask", scope: !5777, file: !5776, line: 57, baseType: !923, size: 32, align: 32, offset: 672)
!5786 = !DIDerivedType(tag: DW_TAG_member, name: "pitch_lag", scope: !5777, file: !5776, line: 58, baseType: !923, size: 32, align: 32, offset: 704)
!5787 = !DIDerivedType(tag: DW_TAG_member, name: "pitch_fac", scope: !5777, file: !5776, line: 59, baseType: !938, size: 32, align: 32, offset: 736)
!5788 = !DILocation(line: 1312, column: 14, scope: !2012)
!5789 = !DILocation(line: 1314, column: 5, scope: !2012)
!5790 = distinct !{!5790, !5789}
!5791 = !DILocation(line: 1314, column: 16, scope: !5792)
!5792 = !DILexicalBlockFile(scope: !5793, file: !911, discriminator: 1)
!5793 = distinct !DILexicalBlock(scope: !5794, file: !911, line: 1314, column: 14)
!5794 = distinct !DILexicalBlock(scope: !2012, file: !911, line: 1314, column: 8)
!5795 = !DILocation(line: 1314, column: 21, scope: !5792)
!5796 = !DILocation(line: 1314, column: 14, scope: !5792)
!5797 = !DILocation(line: 1314, column: 36, scope: !5798)
!5798 = !DILexicalBlockFile(scope: !5799, file: !911, discriminator: 2)
!5799 = distinct !DILexicalBlock(scope: !5793, file: !911, line: 1314, column: 34)
!5800 = !DILocation(line: 1314, column: 94, scope: !5801)
!5801 = !DILexicalBlockFile(scope: !5798, file: !911, discriminator: 4)
!5802 = !DILocation(line: 1314, column: 94, scope: !5798)
!5803 = !DILocation(line: 1314, column: 105, scope: !5804)
!5804 = !DILexicalBlockFile(scope: !5794, file: !911, discriminator: 3)
!5805 = !DILocation(line: 1315, column: 5, scope: !2012)
!5806 = !DILocation(line: 1315, column: 41, scope: !2012)
!5807 = !DILocation(line: 1315, column: 39, scope: !2012)
!5808 = !DILocation(line: 1317, column: 21, scope: !2012)
!5809 = !DILocation(line: 1317, column: 37, scope: !2012)
!5810 = !DILocation(line: 1317, column: 9, scope: !2012)
!5811 = !DILocation(line: 1317, column: 19, scope: !2012)
!5812 = !DILocation(line: 1318, column: 9, scope: !2012)
!5813 = !DILocation(line: 1318, column: 19, scope: !2012)
!5814 = !DILocation(line: 1319, column: 9, scope: !2012)
!5815 = !DILocation(line: 1319, column: 24, scope: !2012)
!5816 = !DILocation(line: 1320, column: 9, scope: !2012)
!5817 = !DILocation(line: 1320, column: 11, scope: !2012)
!5818 = !DILocation(line: 1324, column: 9, scope: !5819)
!5819 = distinct !DILexicalBlock(scope: !2012, file: !911, line: 1324, column: 9)
!5820 = !DILocation(line: 1324, column: 21, scope: !5819)
!5821 = !DILocation(line: 1324, column: 30, scope: !5819)
!5822 = !DILocation(line: 1324, column: 9, scope: !2012)
!5823 = !DILocation(line: 1325, column: 23, scope: !5824)
!5824 = distinct !DILexicalBlock(scope: !5819, file: !911, line: 1324, column: 53)
!5825 = !DILocation(line: 1325, column: 26, scope: !5824)
!5826 = !DILocation(line: 1325, column: 30, scope: !5824)
!5827 = !DILocation(line: 1325, column: 9, scope: !5824)
!5828 = !DILocation(line: 1326, column: 27, scope: !5829)
!5829 = distinct !DILexicalBlock(scope: !5824, file: !911, line: 1326, column: 13)
!5830 = !DILocation(line: 1326, column: 30, scope: !5829)
!5831 = !DILocation(line: 1326, column: 34, scope: !5829)
!5832 = !DILocation(line: 1326, column: 13, scope: !5829)
!5833 = !DILocation(line: 1326, column: 13, scope: !5824)
!5834 = !DILocalVariable(name: "r_idx", scope: !5835, file: !911, line: 1330, type: !923)
!5835 = distinct !DILexicalBlock(scope: !5829, file: !911, line: 1326, column: 52)
!5836 = !DILocation(line: 1330, column: 17, scope: !5835)
!5837 = !DILocation(line: 1330, column: 30, scope: !5835)
!5838 = !DILocation(line: 1330, column: 33, scope: !5835)
!5839 = !DILocation(line: 1330, column: 45, scope: !5835)
!5840 = !DILocation(line: 1330, column: 56, scope: !5835)
!5841 = !DILocation(line: 1330, column: 25, scope: !5835)
!5842 = !DILocation(line: 1332, column: 20, scope: !5843)
!5843 = distinct !DILexicalBlock(scope: !5835, file: !911, line: 1332, column: 13)
!5844 = !DILocation(line: 1332, column: 18, scope: !5843)
!5845 = !DILocation(line: 1332, column: 25, scope: !5846)
!5846 = !DILexicalBlockFile(scope: !5847, file: !911, discriminator: 1)
!5847 = distinct !DILexicalBlock(scope: !5843, file: !911, line: 1332, column: 13)
!5848 = !DILocation(line: 1332, column: 29, scope: !5846)
!5849 = !DILocation(line: 1332, column: 27, scope: !5846)
!5850 = !DILocation(line: 1332, column: 13, scope: !5846)
!5851 = !DILocation(line: 1334, column: 43, scope: !5847)
!5852 = !DILocation(line: 1334, column: 51, scope: !5847)
!5853 = !DILocation(line: 1334, column: 49, scope: !5847)
!5854 = !DILocation(line: 1334, column: 21, scope: !5847)
!5855 = !DILocation(line: 1334, column: 56, scope: !5847)
!5856 = !DILocation(line: 1334, column: 59, scope: !5847)
!5857 = !DILocation(line: 1334, column: 54, scope: !5847)
!5858 = !DILocation(line: 1333, column: 28, scope: !5847)
!5859 = !DILocation(line: 1333, column: 17, scope: !5847)
!5860 = !DILocation(line: 1333, column: 31, scope: !5847)
!5861 = !DILocation(line: 1332, column: 36, scope: !5862)
!5862 = !DILexicalBlockFile(scope: !5847, file: !911, discriminator: 2)
!5863 = !DILocation(line: 1332, column: 13, scope: !5862)
!5864 = distinct !{!5864, !5865}
!5865 = !DILocation(line: 1332, column: 13, scope: !5835)
!5866 = !DILocation(line: 1335, column: 23, scope: !5835)
!5867 = !DILocation(line: 1335, column: 13, scope: !5835)
!5868 = !DILocation(line: 1336, column: 13, scope: !5835)
!5869 = !DILocation(line: 1338, column: 5, scope: !5824)
!5870 = !DILocalVariable(name: "offset_nbits", scope: !5871, file: !911, line: 1339, type: !923)
!5871 = distinct !DILexicalBlock(scope: !5819, file: !911, line: 1338, column: 12)
!5872 = !DILocation(line: 1339, column: 13, scope: !5871)
!5873 = !DILocation(line: 1339, column: 32, scope: !5871)
!5874 = !DILocation(line: 1339, column: 44, scope: !5871)
!5875 = !DILocation(line: 1339, column: 30, scope: !5871)
!5876 = !DILocation(line: 1341, column: 13, scope: !5871)
!5877 = !DILocation(line: 1341, column: 28, scope: !5871)
!5878 = !DILocation(line: 1344, column: 16, scope: !5879)
!5879 = distinct !DILexicalBlock(scope: !5871, file: !911, line: 1344, column: 9)
!5880 = !DILocation(line: 1344, column: 14, scope: !5879)
!5881 = !DILocation(line: 1344, column: 21, scope: !5882)
!5882 = !DILexicalBlockFile(scope: !5883, file: !911, discriminator: 1)
!5883 = distinct !DILexicalBlock(scope: !5879, file: !911, line: 1344, column: 9)
!5884 = !DILocation(line: 1344, column: 23, scope: !5882)
!5885 = !DILocation(line: 1344, column: 9, scope: !5882)
!5886 = !DILocalVariable(name: "sign", scope: !5887, file: !911, line: 1345, type: !938)
!5887 = distinct !DILexicalBlock(scope: !5883, file: !911, line: 1344, column: 33)
!5888 = !DILocation(line: 1345, column: 19, scope: !5887)
!5889 = !DILocalVariable(name: "pos1", scope: !5887, file: !911, line: 1346, type: !923)
!5890 = !DILocation(line: 1346, column: 17, scope: !5887)
!5891 = !DILocalVariable(name: "pos2", scope: !5887, file: !911, line: 1346, type: !923)
!5892 = !DILocation(line: 1346, column: 23, scope: !5887)
!5893 = !DILocation(line: 1348, column: 30, scope: !5887)
!5894 = !DILocation(line: 1348, column: 20, scope: !5887)
!5895 = !DILocation(line: 1348, column: 18, scope: !5887)
!5896 = !DILocation(line: 1349, column: 29, scope: !5887)
!5897 = !DILocation(line: 1349, column: 33, scope: !5887)
!5898 = !DILocation(line: 1349, column: 20, scope: !5887)
!5899 = !DILocation(line: 1349, column: 18, scope: !5887)
!5900 = !DILocation(line: 1350, column: 28, scope: !5887)
!5901 = !DILocation(line: 1350, column: 36, scope: !5887)
!5902 = !DILocation(line: 1350, column: 34, scope: !5887)
!5903 = !DILocation(line: 1350, column: 30, scope: !5887)
!5904 = !DILocation(line: 1350, column: 23, scope: !5887)
!5905 = !DILocation(line: 1350, column: 13, scope: !5887)
!5906 = !DILocation(line: 1350, column: 17, scope: !5887)
!5907 = !DILocation(line: 1350, column: 26, scope: !5887)
!5908 = !DILocation(line: 1351, column: 30, scope: !5887)
!5909 = !DILocation(line: 1351, column: 23, scope: !5887)
!5910 = !DILocation(line: 1351, column: 24, scope: !5887)
!5911 = !DILocation(line: 1351, column: 13, scope: !5887)
!5912 = !DILocation(line: 1351, column: 17, scope: !5887)
!5913 = !DILocation(line: 1351, column: 28, scope: !5887)
!5914 = !DILocation(line: 1352, column: 17, scope: !5915)
!5915 = distinct !DILexicalBlock(scope: !5887, file: !911, line: 1352, column: 17)
!5916 = !DILocation(line: 1352, column: 21, scope: !5915)
!5917 = !DILocation(line: 1352, column: 33, scope: !5915)
!5918 = !DILocation(line: 1352, column: 19, scope: !5915)
!5919 = !DILocation(line: 1352, column: 17, scope: !5887)
!5920 = !DILocation(line: 1353, column: 33, scope: !5921)
!5921 = distinct !DILexicalBlock(scope: !5915, file: !911, line: 1352, column: 45)
!5922 = !DILocation(line: 1353, column: 37, scope: !5921)
!5923 = !DILocation(line: 1353, column: 24, scope: !5921)
!5924 = !DILocation(line: 1353, column: 22, scope: !5921)
!5925 = !DILocation(line: 1354, column: 32, scope: !5921)
!5926 = !DILocation(line: 1354, column: 40, scope: !5921)
!5927 = !DILocation(line: 1354, column: 38, scope: !5921)
!5928 = !DILocation(line: 1354, column: 34, scope: !5921)
!5929 = !DILocation(line: 1354, column: 27, scope: !5921)
!5930 = !DILocation(line: 1354, column: 17, scope: !5921)
!5931 = !DILocation(line: 1354, column: 21, scope: !5921)
!5932 = !DILocation(line: 1354, column: 30, scope: !5921)
!5933 = !DILocation(line: 1355, column: 35, scope: !5921)
!5934 = !DILocation(line: 1355, column: 42, scope: !5921)
!5935 = !DILocation(line: 1355, column: 40, scope: !5921)
!5936 = !DILocation(line: 1355, column: 34, scope: !5921)
!5937 = !DILocation(line: 1355, column: 51, scope: !5938)
!5938 = !DILexicalBlockFile(scope: !5921, file: !911, discriminator: 1)
!5939 = !DILocation(line: 1355, column: 50, scope: !5938)
!5940 = !DILocation(line: 1355, column: 34, scope: !5938)
!5941 = !DILocation(line: 1355, column: 58, scope: !5942)
!5942 = !DILexicalBlockFile(scope: !5921, file: !911, discriminator: 2)
!5943 = !DILocation(line: 1355, column: 34, scope: !5942)
!5944 = !DILocation(line: 1355, column: 34, scope: !5945)
!5945 = !DILexicalBlockFile(scope: !5921, file: !911, discriminator: 3)
!5946 = !DILocation(line: 1355, column: 27, scope: !5945)
!5947 = !DILocation(line: 1355, column: 28, scope: !5945)
!5948 = !DILocation(line: 1355, column: 17, scope: !5945)
!5949 = !DILocation(line: 1355, column: 21, scope: !5945)
!5950 = !DILocation(line: 1355, column: 32, scope: !5945)
!5951 = !DILocation(line: 1356, column: 13, scope: !5921)
!5952 = !DILocation(line: 1357, column: 9, scope: !5887)
!5953 = !DILocation(line: 1344, column: 29, scope: !5954)
!5954 = !DILexicalBlockFile(scope: !5883, file: !911, discriminator: 2)
!5955 = !DILocation(line: 1344, column: 9, scope: !5954)
!5956 = distinct !{!5956, !5957}
!5957 = !DILocation(line: 1344, column: 9, scope: !5871)
!5958 = !DILocation(line: 1359, column: 25, scope: !2012)
!5959 = !DILocation(line: 1359, column: 44, scope: !2012)
!5960 = !DILocation(line: 1359, column: 5, scope: !2012)
!5961 = !DILocation(line: 1363, column: 20, scope: !2012)
!5962 = !DILocation(line: 1363, column: 11, scope: !2012)
!5963 = !DILocation(line: 1363, column: 9, scope: !2012)
!5964 = !DILocation(line: 1364, column: 50, scope: !2012)
!5965 = !DILocation(line: 1364, column: 53, scope: !2012)
!5966 = !DILocation(line: 1364, column: 21, scope: !2012)
!5967 = !DILocation(line: 1365, column: 65, scope: !2012)
!5968 = !DILocation(line: 1366, column: 63, scope: !2012)
!5969 = !DILocation(line: 1366, column: 36, scope: !2012)
!5970 = !DILocation(line: 1366, column: 34, scope: !2012)
!5971 = !DILocation(line: 1364, column: 16, scope: !5972)
!5972 = !DILexicalBlockFile(scope: !2012, file: !911, discriminator: 1)
!5973 = !DILocation(line: 1364, column: 14, scope: !2012)
!5974 = !DILocation(line: 1367, column: 43, scope: !2012)
!5975 = !DILocation(line: 1367, column: 16, scope: !2012)
!5976 = !DILocation(line: 1367, column: 14, scope: !2012)
!5977 = !DILocation(line: 1368, column: 56, scope: !2012)
!5978 = !DILocation(line: 1368, column: 29, scope: !2012)
!5979 = !DILocation(line: 1368, column: 16, scope: !2012)
!5980 = !DILocation(line: 129, column: 5, scope: !5736, inlinedAt: !5741)
!5981 = !DILocation(line: 131, column: 32, scope: !5736, inlinedAt: !5741)
!5982 = !DILocation(line: 131, column: 44, scope: !5736, inlinedAt: !5741)
!5983 = !{i32 84352, i32 84368, i32 84401}
!5984 = !DILocation(line: 132, column: 12, scope: !5736, inlinedAt: !5741)
!5985 = !DILocation(line: 1368, column: 14, scope: !2012)
!5986 = !DILocation(line: 1372, column: 24, scope: !2012)
!5987 = !DILocation(line: 1372, column: 36, scope: !2012)
!5988 = !DILocation(line: 1372, column: 21, scope: !2012)
!5989 = !DILocation(line: 1372, column: 17, scope: !2012)
!5990 = !DILocation(line: 1373, column: 31, scope: !2012)
!5991 = !DILocation(line: 1373, column: 14, scope: !2012)
!5992 = !DILocation(line: 1373, column: 17, scope: !2012)
!5993 = !DILocation(line: 1373, column: 5, scope: !2012)
!5994 = !DILocation(line: 1373, column: 45, scope: !2012)
!5995 = !DILocation(line: 1373, column: 48, scope: !2012)
!5996 = !DILocation(line: 1374, column: 46, scope: !2012)
!5997 = !DILocation(line: 1374, column: 44, scope: !2012)
!5998 = !DILocation(line: 1374, column: 41, scope: !2012)
!5999 = !DILocation(line: 1374, column: 39, scope: !2012)
!6000 = !DILocation(line: 1375, column: 12, scope: !6001)
!6001 = distinct !DILexicalBlock(scope: !2012, file: !911, line: 1375, column: 5)
!6002 = !DILocation(line: 1375, column: 10, scope: !6001)
!6003 = !DILocation(line: 1375, column: 17, scope: !6004)
!6004 = !DILexicalBlockFile(scope: !6005, file: !911, discriminator: 1)
!6005 = distinct !DILexicalBlock(scope: !6001, file: !911, line: 1375, column: 5)
!6006 = !DILocation(line: 1375, column: 21, scope: !6004)
!6007 = !DILocation(line: 1375, column: 19, scope: !6004)
!6008 = !DILocation(line: 1375, column: 5, scope: !6004)
!6009 = !DILocation(line: 1376, column: 31, scope: !6005)
!6010 = !DILocation(line: 1376, column: 26, scope: !6005)
!6011 = !DILocation(line: 1376, column: 9, scope: !6005)
!6012 = !DILocation(line: 1376, column: 12, scope: !6005)
!6013 = !DILocation(line: 1376, column: 29, scope: !6005)
!6014 = !DILocation(line: 1375, column: 35, scope: !6015)
!6015 = !DILexicalBlockFile(scope: !6005, file: !911, discriminator: 2)
!6016 = !DILocation(line: 1375, column: 5, scope: !6015)
!6017 = distinct !{!6017, !6018}
!6018 = !DILocation(line: 1375, column: 5, scope: !2012)
!6019 = !DILocation(line: 1379, column: 9, scope: !5732)
!6020 = !DILocation(line: 1379, column: 21, scope: !5732)
!6021 = !DILocation(line: 1379, column: 30, scope: !5732)
!6022 = !DILocation(line: 1379, column: 9, scope: !2012)
!6023 = !DILocalVariable(name: "len", scope: !5731, file: !911, line: 1380, type: !923)
!6024 = !DILocation(line: 1380, column: 13, scope: !5731)
!6025 = !DILocation(line: 1381, column: 16, scope: !5730)
!6026 = !DILocation(line: 1381, column: 14, scope: !5730)
!6027 = !DILocation(line: 1381, column: 21, scope: !6028)
!6028 = !DILexicalBlockFile(scope: !5729, file: !911, discriminator: 1)
!6029 = !DILocation(line: 1381, column: 25, scope: !6028)
!6030 = !DILocation(line: 1381, column: 23, scope: !6028)
!6031 = !DILocation(line: 1381, column: 9, scope: !6028)
!6032 = !DILocalVariable(name: "next_idx_sh16", scope: !5728, file: !911, line: 1382, type: !923)
!6033 = !DILocation(line: 1382, column: 17, scope: !5728)
!6034 = !DILocalVariable(name: "abs_idx", scope: !5728, file: !911, line: 1383, type: !923)
!6035 = !DILocation(line: 1383, column: 17, scope: !5728)
!6036 = !DILocation(line: 1383, column: 27, scope: !5728)
!6037 = !DILocation(line: 1383, column: 39, scope: !5728)
!6038 = !DILocation(line: 1383, column: 37, scope: !5728)
!6039 = !DILocation(line: 1383, column: 46, scope: !5728)
!6040 = !DILocation(line: 1383, column: 44, scope: !5728)
!6041 = !DILocalVariable(name: "pitch_sh16", scope: !5728, file: !911, line: 1384, type: !923)
!6042 = !DILocation(line: 1384, column: 17, scope: !5728)
!6043 = !DILocation(line: 1384, column: 31, scope: !5728)
!6044 = !DILocation(line: 1384, column: 34, scope: !5728)
!6045 = !DILocation(line: 1384, column: 49, scope: !5728)
!6046 = !DILocation(line: 1385, column: 30, scope: !5728)
!6047 = !DILocation(line: 1385, column: 33, scope: !5728)
!6048 = !DILocation(line: 1385, column: 51, scope: !5728)
!6049 = !DILocation(line: 1385, column: 49, scope: !5728)
!6050 = !DILocation(line: 1384, column: 56, scope: !5728)
!6051 = !DILocalVariable(name: "pitch", scope: !5728, file: !911, line: 1386, type: !923)
!6052 = !DILocation(line: 1386, column: 17, scope: !5728)
!6053 = !DILocation(line: 1386, column: 26, scope: !5728)
!6054 = !DILocation(line: 1386, column: 37, scope: !5728)
!6055 = !DILocation(line: 1386, column: 47, scope: !5728)
!6056 = !DILocalVariable(name: "idx_sh16", scope: !5728, file: !911, line: 1387, type: !923)
!6057 = !DILocation(line: 1387, column: 17, scope: !5728)
!6058 = !DILocation(line: 1387, column: 30, scope: !5728)
!6059 = !DILocation(line: 1387, column: 36, scope: !5728)
!6060 = !DILocation(line: 1387, column: 45, scope: !5728)
!6061 = !DILocation(line: 1387, column: 43, scope: !5728)
!6062 = !DILocation(line: 1387, column: 57, scope: !5728)
!6063 = !DILocation(line: 1387, column: 61, scope: !5728)
!6064 = !DILocation(line: 1388, column: 19, scope: !5728)
!6065 = !DILocation(line: 1388, column: 28, scope: !5728)
!6066 = !DILocation(line: 1388, column: 17, scope: !5728)
!6067 = !DILocation(line: 1389, column: 17, scope: !5727)
!6068 = !DILocation(line: 1389, column: 20, scope: !5727)
!6069 = !DILocation(line: 1389, column: 17, scope: !5728)
!6070 = !DILocation(line: 1390, column: 21, scope: !6071)
!6071 = distinct !DILexicalBlock(scope: !5726, file: !911, line: 1390, column: 21)
!6072 = !DILocation(line: 1390, column: 24, scope: !6071)
!6073 = !DILocation(line: 1390, column: 40, scope: !6071)
!6074 = !DILocation(line: 1390, column: 21, scope: !5726)
!6075 = !DILocation(line: 1391, column: 38, scope: !6076)
!6076 = distinct !DILexicalBlock(scope: !6071, file: !911, line: 1390, column: 45)
!6077 = !DILocation(line: 1391, column: 48, scope: !6076)
!6078 = !DILocation(line: 1391, column: 35, scope: !6076)
!6079 = !DILocation(line: 1392, column: 17, scope: !6076)
!6080 = !DILocation(line: 1393, column: 38, scope: !6071)
!6081 = !DILocation(line: 1393, column: 47, scope: !6071)
!6082 = !DILocation(line: 1393, column: 58, scope: !6071)
!6083 = !DILocation(line: 1393, column: 35, scope: !6071)
!6084 = !DILocation(line: 1394, column: 34, scope: !5726)
!6085 = !DILocation(line: 1394, column: 45, scope: !5726)
!6086 = !DILocation(line: 1394, column: 43, scope: !5726)
!6087 = !DILocation(line: 1394, column: 62, scope: !5726)
!6088 = !DILocation(line: 1394, column: 65, scope: !5726)
!6089 = !DILocation(line: 1394, column: 60, scope: !5726)
!6090 = !DILocation(line: 1394, column: 81, scope: !5726)
!6091 = !DILocation(line: 1395, column: 34, scope: !5726)
!6092 = !DILocation(line: 1395, column: 41, scope: !5726)
!6093 = !DILocation(line: 1395, column: 39, scope: !5726)
!6094 = !DILocation(line: 1394, column: 23, scope: !5726)
!6095 = !DILocation(line: 132, column: 9, scope: !3724, inlinedAt: !5725)
!6096 = !DILocation(line: 132, column: 13, scope: !3724, inlinedAt: !5725)
!6097 = !DILocation(line: 132, column: 11, scope: !3724, inlinedAt: !5725)
!6098 = !DILocation(line: 132, column: 9, scope: !3702, inlinedAt: !5725)
!6099 = !DILocation(line: 132, column: 26, scope: !3729, inlinedAt: !5725)
!6100 = !DILocation(line: 132, column: 19, scope: !3729, inlinedAt: !5725)
!6101 = !DILocation(line: 133, column: 14, scope: !3732, inlinedAt: !5725)
!6102 = !DILocation(line: 133, column: 18, scope: !3732, inlinedAt: !5725)
!6103 = !DILocation(line: 133, column: 16, scope: !3732, inlinedAt: !5725)
!6104 = !DILocation(line: 133, column: 14, scope: !3724, inlinedAt: !5725)
!6105 = !DILocation(line: 133, column: 31, scope: !3737, inlinedAt: !5725)
!6106 = !DILocation(line: 133, column: 24, scope: !3737, inlinedAt: !5725)
!6107 = !DILocation(line: 134, column: 17, scope: !3732, inlinedAt: !5725)
!6108 = !DILocation(line: 134, column: 10, scope: !3732, inlinedAt: !5725)
!6109 = !DILocation(line: 135, column: 1, scope: !3702, inlinedAt: !5725)
!6110 = !DILocation(line: 1394, column: 21, scope: !5726)
!6111 = !DILocation(line: 1396, column: 13, scope: !5726)
!6112 = !DILocation(line: 1397, column: 23, scope: !5727)
!6113 = !DILocation(line: 1397, column: 21, scope: !5727)
!6114 = !DILocation(line: 1399, column: 47, scope: !5728)
!6115 = !DILocation(line: 1399, column: 36, scope: !5728)
!6116 = !DILocation(line: 1399, column: 63, scope: !5728)
!6117 = !DILocation(line: 1399, column: 67, scope: !5728)
!6118 = !DILocation(line: 1399, column: 65, scope: !5728)
!6119 = !DILocation(line: 1399, column: 52, scope: !5728)
!6120 = !DILocation(line: 1401, column: 35, scope: !5728)
!6121 = !DILocation(line: 1401, column: 43, scope: !5728)
!6122 = !DILocation(line: 1399, column: 13, scope: !5728)
!6123 = !DILocation(line: 1402, column: 9, scope: !5728)
!6124 = !DILocation(line: 1381, column: 36, scope: !6125)
!6125 = !DILexicalBlockFile(scope: !5729, file: !911, discriminator: 2)
!6126 = !DILocation(line: 1381, column: 33, scope: !6125)
!6127 = !DILocation(line: 1381, column: 9, scope: !6125)
!6128 = distinct !{!6128, !6129}
!6129 = !DILocation(line: 1381, column: 9, scope: !5731)
!6130 = !DILocation(line: 1403, column: 5, scope: !5731)
!6131 = !DILocalVariable(name: "block_pitch", scope: !6132, file: !911, line: 1404, type: !923)
!6132 = distinct !DILexicalBlock(scope: !5732, file: !911, line: 1403, column: 12)
!6133 = !DILocation(line: 1404, column: 13, scope: !6132)
!6134 = !DILocation(line: 1404, column: 27, scope: !6132)
!6135 = !DILocation(line: 1404, column: 43, scope: !6132)
!6136 = !DILocation(line: 1405, column: 15, scope: !6132)
!6137 = !DILocation(line: 1405, column: 31, scope: !6132)
!6138 = !DILocation(line: 1405, column: 13, scope: !6132)
!6139 = !DILocation(line: 1406, column: 13, scope: !6140)
!6140 = distinct !DILexicalBlock(scope: !6132, file: !911, line: 1406, column: 13)
!6141 = !DILocation(line: 1406, column: 13, scope: !6132)
!6142 = !DILocation(line: 1407, column: 35, scope: !6143)
!6143 = distinct !DILexicalBlock(scope: !6140, file: !911, line: 1406, column: 18)
!6144 = !DILocation(line: 1407, column: 60, scope: !6143)
!6145 = !DILocation(line: 1407, column: 59, scope: !6143)
!6146 = !DILocation(line: 1407, column: 48, scope: !6143)
!6147 = !DILocation(line: 1409, column: 35, scope: !6143)
!6148 = !DILocation(line: 1409, column: 43, scope: !6143)
!6149 = !DILocation(line: 1407, column: 13, scope: !6143)
!6150 = !DILocation(line: 1410, column: 9, scope: !6143)
!6151 = !DILocation(line: 1411, column: 43, scope: !6140)
!6152 = !DILocation(line: 1411, column: 31, scope: !6140)
!6153 = !DILocation(line: 1411, column: 71, scope: !6140)
!6154 = !DILocation(line: 1411, column: 69, scope: !6140)
!6155 = !DILocation(line: 1411, column: 55, scope: !6140)
!6156 = !DILocation(line: 1412, column: 47, scope: !6140)
!6157 = !DILocation(line: 1412, column: 45, scope: !6140)
!6158 = !DILocation(line: 1412, column: 31, scope: !6140)
!6159 = !DILocation(line: 1411, column: 13, scope: !6140)
!6160 = !DILocation(line: 1416, column: 29, scope: !2012)
!6161 = !DILocation(line: 1416, column: 41, scope: !2012)
!6162 = !DILocation(line: 1416, column: 53, scope: !2012)
!6163 = !DILocation(line: 1417, column: 29, scope: !2012)
!6164 = !DILocation(line: 1417, column: 39, scope: !2012)
!6165 = !DILocation(line: 1417, column: 49, scope: !2012)
!6166 = !DILocation(line: 1416, column: 5, scope: !2012)
!6167 = !DILocation(line: 1418, column: 1, scope: !2012)
!6168 = !DILocation(line: 1418, column: 1, scope: !5972)
!6169 = !DILocalVariable(name: "a", arg: 1, scope: !6170, file: !6171, line: 68, type: !924)
!6170 = distinct !DISubprogram(name: "UMULH", scope: !6171, file: !6171, line: 68, type: !6172, isLocal: true, isDefinition: true, scopeLine: 68, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!6171 = !DIFile(filename: "libavcodec/mathops.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs")
!6172 = !DISubroutineType(types: !6173)
!6173 = !{!924, !924, !924}
!6174 = !DILocation(line: 68, column: 70, scope: !6170, inlinedAt: !6175)
!6175 = distinct !DILocation(line: 1261, column: 41, scope: !1996)
!6176 = !DILocalVariable(name: "b", arg: 2, scope: !6170, file: !6171, line: 68, type: !924)
!6177 = !DILocation(line: 68, column: 82, scope: !6170, inlinedAt: !6175)
!6178 = !DILocalVariable(name: "a", arg: 1, scope: !6179, file: !6171, line: 62, type: !923)
!6179 = distinct !DISubprogram(name: "MULH", scope: !6171, file: !6171, line: 62, type: !6180, isLocal: true, isDefinition: true, scopeLine: 62, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!6180 = !DISubroutineType(types: !6181)
!6181 = !{!923, !923, !923}
!6182 = !DILocation(line: 62, column: 59, scope: !6179, inlinedAt: !6183)
!6183 = distinct !DILocation(line: 1260, column: 17, scope: !1996)
!6184 = !DILocalVariable(name: "b", arg: 2, scope: !6179, file: !6171, line: 62, type: !923)
!6185 = !DILocation(line: 62, column: 66, scope: !6179, inlinedAt: !6183)
!6186 = !DILocalVariable(name: "frame_cntr", arg: 1, scope: !1996, file: !911, line: 1234, type: !923)
!6187 = !DILocation(line: 1234, column: 21, scope: !1996)
!6188 = !DILocalVariable(name: "block_num", arg: 2, scope: !1996, file: !911, line: 1234, type: !923)
!6189 = !DILocation(line: 1234, column: 37, scope: !1996)
!6190 = !DILocalVariable(name: "block_size", arg: 3, scope: !1996, file: !911, line: 1234, type: !923)
!6191 = !DILocation(line: 1234, column: 52, scope: !1996)
!6192 = !DILocalVariable(name: "z", scope: !1996, file: !911, line: 1257, type: !924)
!6193 = !DILocation(line: 1257, column: 18, scope: !1996)
!6194 = !DILocalVariable(name: "y", scope: !1996, file: !911, line: 1257, type: !924)
!6195 = !DILocation(line: 1257, column: 21, scope: !1996)
!6196 = !DILocalVariable(name: "x", scope: !1996, file: !911, line: 1257, type: !924)
!6197 = !DILocation(line: 1257, column: 24, scope: !1996)
!6198 = !DILocation(line: 1257, column: 30, scope: !1996)
!6199 = !DILocation(line: 1257, column: 41, scope: !1996)
!6200 = !DILocation(line: 1257, column: 53, scope: !1996)
!6201 = !DILocation(line: 1257, column: 51, scope: !1996)
!6202 = !DILocation(line: 1258, column: 9, scope: !6203)
!6203 = distinct !DILexicalBlock(scope: !1996, file: !911, line: 1258, column: 9)
!6204 = !DILocation(line: 1258, column: 11, scope: !6203)
!6205 = !DILocation(line: 1258, column: 9, scope: !1996)
!6206 = !DILocation(line: 1258, column: 24, scope: !6207)
!6207 = !DILexicalBlockFile(scope: !6203, file: !911, discriminator: 1)
!6208 = !DILocation(line: 1258, column: 22, scope: !6207)
!6209 = !DILocation(line: 1260, column: 9, scope: !1996)
!6210 = !DILocation(line: 1260, column: 33, scope: !1996)
!6211 = !DILocation(line: 1260, column: 17, scope: !1996)
!6212 = !DILocation(line: 63, column: 23, scope: !6179, inlinedAt: !6183)
!6213 = !DILocation(line: 63, column: 13, scope: !6179, inlinedAt: !6183)
!6214 = !DILocation(line: 63, column: 38, scope: !6179, inlinedAt: !6183)
!6215 = !DILocation(line: 63, column: 28, scope: !6179, inlinedAt: !6183)
!6216 = !DILocation(line: 63, column: 26, scope: !6179, inlinedAt: !6183)
!6217 = !DILocation(line: 63, column: 42, scope: !6179, inlinedAt: !6183)
!6218 = !DILocation(line: 63, column: 12, scope: !6179, inlinedAt: !6183)
!6219 = !DILocation(line: 1260, column: 15, scope: !1996)
!6220 = !DILocation(line: 1260, column: 11, scope: !1996)
!6221 = !DILocation(line: 1260, column: 7, scope: !1996)
!6222 = !DILocation(line: 1261, column: 21, scope: !1996)
!6223 = !DILocation(line: 1261, column: 33, scope: !1996)
!6224 = !DILocation(line: 1261, column: 25, scope: !1996)
!6225 = !DILocation(line: 1261, column: 23, scope: !1996)
!6226 = !DILocation(line: 1261, column: 47, scope: !1996)
!6227 = !DILocation(line: 1261, column: 58, scope: !1996)
!6228 = !DILocation(line: 1261, column: 50, scope: !1996)
!6229 = !DILocation(line: 1261, column: 41, scope: !1996)
!6230 = !DILocation(line: 69, column: 24, scope: !6170, inlinedAt: !6175)
!6231 = !DILocation(line: 69, column: 13, scope: !6170, inlinedAt: !6175)
!6232 = !DILocation(line: 69, column: 40, scope: !6170, inlinedAt: !6175)
!6233 = !DILocation(line: 69, column: 29, scope: !6170, inlinedAt: !6175)
!6234 = !DILocation(line: 69, column: 27, scope: !6170, inlinedAt: !6175)
!6235 = !DILocation(line: 69, column: 43, scope: !6170, inlinedAt: !6175)
!6236 = !DILocation(line: 69, column: 12, scope: !6170, inlinedAt: !6175)
!6237 = !DILocation(line: 1261, column: 39, scope: !1996)
!6238 = !DILocation(line: 1261, column: 9, scope: !1996)
!6239 = !DILocation(line: 1261, column: 7, scope: !1996)
!6240 = !DILocation(line: 1263, column: 12, scope: !1996)
!6241 = !DILocation(line: 1263, column: 24, scope: !1996)
!6242 = !DILocation(line: 1263, column: 22, scope: !1996)
!6243 = !DILocation(line: 1263, column: 14, scope: !1996)
!6244 = !DILocation(line: 1263, column: 5, scope: !1996)
!6245 = distinct !DISubprogram(name: "aw_pulse_set1", scope: !911, file: !911, line: 1173, type: !6246, isLocal: true, isDefinition: true, scopeLine: 1175, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!6246 = !DISubroutineType(types: !6247)
!6247 = !{null, !1812, !1715, !923, !6248}
!6248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5775, size: 64, align: 64)
!6249 = !DILocalVariable(name: "s", arg: 1, scope: !6245, file: !911, line: 1173, type: !1812)
!6250 = !DILocation(line: 1173, column: 44, scope: !6245)
!6251 = !DILocalVariable(name: "gb", arg: 2, scope: !6245, file: !911, line: 1173, type: !1715)
!6252 = !DILocation(line: 1173, column: 62, scope: !6245)
!6253 = !DILocalVariable(name: "block_idx", arg: 3, scope: !6245, file: !911, line: 1174, type: !923)
!6254 = !DILocation(line: 1174, column: 31, scope: !6245)
!6255 = !DILocalVariable(name: "fcb", arg: 4, scope: !6245, file: !911, line: 1174, type: !6248)
!6256 = !DILocation(line: 1174, column: 52, scope: !6245)
!6257 = !DILocalVariable(name: "val", scope: !6245, file: !911, line: 1176, type: !923)
!6258 = !DILocation(line: 1176, column: 9, scope: !6245)
!6259 = !DILocation(line: 1176, column: 24, scope: !6245)
!6260 = !DILocation(line: 1176, column: 38, scope: !6245)
!6261 = !DILocation(line: 1176, column: 41, scope: !6245)
!6262 = !DILocation(line: 1176, column: 55, scope: !6245)
!6263 = !DILocation(line: 1176, column: 59, scope: !6264)
!6264 = !DILexicalBlockFile(scope: !6245, file: !911, discriminator: 1)
!6265 = !DILocation(line: 1176, column: 58, scope: !6264)
!6266 = !DILocation(line: 1176, column: 55, scope: !6267)
!6267 = !DILexicalBlockFile(scope: !6245, file: !911, discriminator: 2)
!6268 = !DILocation(line: 1176, column: 35, scope: !6267)
!6269 = !DILocation(line: 1176, column: 31, scope: !6267)
!6270 = !DILocation(line: 1176, column: 15, scope: !6267)
!6271 = !DILocation(line: 1176, column: 9, scope: !6267)
!6272 = !DILocalVariable(name: "v", scope: !6245, file: !911, line: 1177, type: !938)
!6273 = !DILocation(line: 1177, column: 11, scope: !6245)
!6274 = !DILocation(line: 1179, column: 24, scope: !6275)
!6275 = distinct !DILexicalBlock(scope: !6245, file: !911, line: 1179, column: 9)
!6276 = !DILocation(line: 1179, column: 9, scope: !6275)
!6277 = !DILocation(line: 1179, column: 12, scope: !6275)
!6278 = !DILocation(line: 1179, column: 35, scope: !6275)
!6279 = !DILocation(line: 1179, column: 9, scope: !6245)
!6280 = !DILocalVariable(name: "n", scope: !6281, file: !911, line: 1180, type: !923)
!6281 = distinct !DILexicalBlock(scope: !6275, file: !911, line: 1179, column: 40)
!6282 = !DILocation(line: 1180, column: 13, scope: !6281)
!6283 = !DILocalVariable(name: "v_mask", scope: !6281, file: !911, line: 1180, type: !923)
!6284 = !DILocation(line: 1180, column: 16, scope: !6281)
!6285 = !DILocalVariable(name: "i_mask", scope: !6281, file: !911, line: 1180, type: !923)
!6286 = !DILocation(line: 1180, column: 24, scope: !6281)
!6287 = !DILocalVariable(name: "sh", scope: !6281, file: !911, line: 1180, type: !923)
!6288 = !DILocation(line: 1180, column: 32, scope: !6281)
!6289 = !DILocalVariable(name: "n_pulses", scope: !6281, file: !911, line: 1180, type: !923)
!6290 = !DILocation(line: 1180, column: 36, scope: !6281)
!6291 = !DILocation(line: 1182, column: 13, scope: !6292)
!6292 = distinct !DILexicalBlock(scope: !6281, file: !911, line: 1182, column: 13)
!6293 = !DILocation(line: 1182, column: 16, scope: !6292)
!6294 = !DILocation(line: 1182, column: 31, scope: !6292)
!6295 = !DILocation(line: 1182, column: 13, scope: !6281)
!6296 = !DILocation(line: 1183, column: 22, scope: !6297)
!6297 = distinct !DILexicalBlock(scope: !6292, file: !911, line: 1182, column: 38)
!6298 = !DILocation(line: 1184, column: 20, scope: !6297)
!6299 = !DILocation(line: 1185, column: 20, scope: !6297)
!6300 = !DILocation(line: 1186, column: 16, scope: !6297)
!6301 = !DILocation(line: 1187, column: 9, scope: !6297)
!6302 = !DILocation(line: 1188, column: 22, scope: !6303)
!6303 = distinct !DILexicalBlock(scope: !6292, file: !911, line: 1187, column: 16)
!6304 = !DILocation(line: 1189, column: 20, scope: !6303)
!6305 = !DILocation(line: 1190, column: 20, scope: !6303)
!6306 = !DILocation(line: 1191, column: 16, scope: !6303)
!6307 = !DILocation(line: 1194, column: 18, scope: !6308)
!6308 = distinct !DILexicalBlock(scope: !6281, file: !911, line: 1194, column: 9)
!6309 = !DILocation(line: 1194, column: 27, scope: !6308)
!6310 = !DILocation(line: 1194, column: 16, scope: !6308)
!6311 = !DILocation(line: 1194, column: 14, scope: !6308)
!6312 = !DILocation(line: 1194, column: 32, scope: !6313)
!6313 = !DILexicalBlockFile(scope: !6314, file: !911, discriminator: 1)
!6314 = distinct !DILexicalBlock(scope: !6308, file: !911, line: 1194, column: 9)
!6315 = !DILocation(line: 1194, column: 34, scope: !6313)
!6316 = !DILocation(line: 1194, column: 9, scope: !6313)
!6317 = !DILocation(line: 1195, column: 31, scope: !6318)
!6318 = distinct !DILexicalBlock(scope: !6314, file: !911, line: 1194, column: 57)
!6319 = !DILocation(line: 1195, column: 37, scope: !6318)
!6320 = !DILocation(line: 1195, column: 35, scope: !6318)
!6321 = !DILocation(line: 1195, column: 30, scope: !6318)
!6322 = !DILocation(line: 1195, column: 20, scope: !6318)
!6323 = !DILocation(line: 1195, column: 25, scope: !6318)
!6324 = !DILocation(line: 1195, column: 13, scope: !6318)
!6325 = !DILocation(line: 1195, column: 18, scope: !6318)
!6326 = !DILocation(line: 1195, column: 28, scope: !6318)
!6327 = !DILocation(line: 1196, column: 31, scope: !6318)
!6328 = !DILocation(line: 1196, column: 37, scope: !6318)
!6329 = !DILocation(line: 1196, column: 35, scope: !6318)
!6330 = !DILocation(line: 1196, column: 47, scope: !6318)
!6331 = !DILocation(line: 1196, column: 45, scope: !6318)
!6332 = !DILocation(line: 1196, column: 58, scope: !6318)
!6333 = !DILocation(line: 1196, column: 56, scope: !6318)
!6334 = !DILocation(line: 1197, column: 56, scope: !6318)
!6335 = !DILocation(line: 1197, column: 34, scope: !6318)
!6336 = !DILocation(line: 1197, column: 37, scope: !6318)
!6337 = !DILocation(line: 1196, column: 60, scope: !6318)
!6338 = !DILocation(line: 1196, column: 20, scope: !6318)
!6339 = !DILocation(line: 1196, column: 25, scope: !6318)
!6340 = !DILocation(line: 1196, column: 13, scope: !6318)
!6341 = !DILocation(line: 1196, column: 18, scope: !6318)
!6342 = !DILocation(line: 1196, column: 28, scope: !6318)
!6343 = !DILocation(line: 1198, column: 13, scope: !6318)
!6344 = !DILocation(line: 1198, column: 27, scope: !6345)
!6345 = !DILexicalBlockFile(scope: !6318, file: !911, discriminator: 1)
!6346 = !DILocation(line: 1198, column: 32, scope: !6345)
!6347 = !DILocation(line: 1198, column: 20, scope: !6345)
!6348 = !DILocation(line: 1198, column: 25, scope: !6345)
!6349 = !DILocation(line: 1198, column: 35, scope: !6345)
!6350 = !DILocation(line: 1198, column: 13, scope: !6345)
!6351 = !DILocation(line: 1199, column: 35, scope: !6318)
!6352 = !DILocation(line: 1199, column: 40, scope: !6318)
!6353 = !DILocation(line: 1199, column: 24, scope: !6318)
!6354 = !DILocation(line: 1199, column: 29, scope: !6318)
!6355 = !DILocation(line: 1199, column: 17, scope: !6318)
!6356 = !DILocation(line: 1199, column: 22, scope: !6318)
!6357 = !DILocation(line: 1199, column: 32, scope: !6318)
!6358 = !DILocation(line: 1198, column: 13, scope: !6359)
!6359 = !DILexicalBlockFile(scope: !6318, file: !911, discriminator: 2)
!6360 = distinct !{!6360, !6343}
!6361 = !DILocation(line: 1200, column: 24, scope: !6362)
!6362 = distinct !DILexicalBlock(scope: !6318, file: !911, line: 1200, column: 17)
!6363 = !DILocation(line: 1200, column: 29, scope: !6362)
!6364 = !DILocation(line: 1200, column: 17, scope: !6362)
!6365 = !DILocation(line: 1200, column: 22, scope: !6362)
!6366 = !DILocation(line: 1200, column: 32, scope: !6362)
!6367 = !DILocation(line: 1200, column: 17, scope: !6318)
!6368 = !DILocation(line: 1201, column: 17, scope: !6362)
!6369 = !DILocation(line: 1201, column: 22, scope: !6362)
!6370 = !DILocation(line: 1201, column: 23, scope: !6362)
!6371 = !DILocation(line: 1202, column: 9, scope: !6318)
!6372 = !DILocation(line: 1194, column: 41, scope: !6373)
!6373 = !DILexicalBlockFile(scope: !6314, file: !911, discriminator: 2)
!6374 = !DILocation(line: 1194, column: 53, scope: !6373)
!6375 = !DILocation(line: 1194, column: 49, scope: !6373)
!6376 = !DILocation(line: 1194, column: 9, scope: !6373)
!6377 = distinct !{!6377, !6378}
!6378 = !DILocation(line: 1194, column: 9, scope: !6281)
!6379 = !DILocation(line: 1203, column: 5, scope: !6281)
!6380 = !DILocalVariable(name: "num2", scope: !6381, file: !911, line: 1204, type: !923)
!6381 = distinct !DILexicalBlock(scope: !6275, file: !911, line: 1203, column: 12)
!6382 = !DILocation(line: 1204, column: 13, scope: !6381)
!6383 = !DILocation(line: 1204, column: 21, scope: !6381)
!6384 = !DILocation(line: 1204, column: 25, scope: !6381)
!6385 = !DILocation(line: 1204, column: 34, scope: !6381)
!6386 = !DILocalVariable(name: "delta", scope: !6381, file: !911, line: 1204, type: !923)
!6387 = !DILocation(line: 1204, column: 40, scope: !6381)
!6388 = !DILocalVariable(name: "idx", scope: !6381, file: !911, line: 1204, type: !923)
!6389 = !DILocation(line: 1204, column: 47, scope: !6381)
!6390 = !DILocation(line: 1206, column: 13, scope: !6391)
!6391 = distinct !DILexicalBlock(scope: !6381, file: !911, line: 1206, column: 13)
!6392 = !DILocation(line: 1206, column: 18, scope: !6391)
!6393 = !DILocation(line: 1206, column: 13, scope: !6381)
!6394 = !DILocation(line: 1206, column: 36, scope: !6395)
!6395 = !DILexicalBlockFile(scope: !6396, file: !911, discriminator: 1)
!6396 = distinct !DILexicalBlock(scope: !6391, file: !911, line: 1206, column: 28)
!6397 = !DILocation(line: 1206, column: 47, scope: !6395)
!6398 = !DILocation(line: 1206, column: 52, scope: !6395)
!6399 = !DILocation(line: 1206, column: 45, scope: !6395)
!6400 = !DILocation(line: 1206, column: 57, scope: !6395)
!6401 = !DILocation(line: 1207, column: 18, scope: !6402)
!6402 = distinct !DILexicalBlock(scope: !6391, file: !911, line: 1207, column: 18)
!6403 = !DILocation(line: 1207, column: 23, scope: !6402)
!6404 = !DILocation(line: 1207, column: 18, scope: !6391)
!6405 = !DILocation(line: 1207, column: 41, scope: !6406)
!6406 = !DILexicalBlockFile(scope: !6407, file: !911, discriminator: 1)
!6407 = distinct !DILexicalBlock(scope: !6402, file: !911, line: 1207, column: 33)
!6408 = !DILocation(line: 1207, column: 52, scope: !6406)
!6409 = !DILocation(line: 1207, column: 57, scope: !6406)
!6410 = !DILocation(line: 1207, column: 61, scope: !6406)
!6411 = !DILocation(line: 1207, column: 50, scope: !6406)
!6412 = !DILocation(line: 1207, column: 71, scope: !6406)
!6413 = !DILocation(line: 1208, column: 18, scope: !6414)
!6414 = distinct !DILexicalBlock(scope: !6402, file: !911, line: 1208, column: 18)
!6415 = !DILocation(line: 1208, column: 23, scope: !6414)
!6416 = !DILocation(line: 1208, column: 18, scope: !6402)
!6417 = !DILocation(line: 1208, column: 41, scope: !6418)
!6418 = !DILexicalBlockFile(scope: !6419, file: !911, discriminator: 1)
!6419 = distinct !DILexicalBlock(scope: !6414, file: !911, line: 1208, column: 33)
!6420 = !DILocation(line: 1208, column: 52, scope: !6418)
!6421 = !DILocation(line: 1208, column: 57, scope: !6418)
!6422 = !DILocation(line: 1208, column: 61, scope: !6418)
!6423 = !DILocation(line: 1208, column: 50, scope: !6418)
!6424 = !DILocation(line: 1208, column: 71, scope: !6418)
!6425 = !DILocation(line: 1209, column: 22, scope: !6426)
!6426 = distinct !DILexicalBlock(scope: !6414, file: !911, line: 1209, column: 14)
!6427 = !DILocation(line: 1209, column: 33, scope: !6426)
!6428 = !DILocation(line: 1209, column: 38, scope: !6426)
!6429 = !DILocation(line: 1209, column: 42, scope: !6426)
!6430 = !DILocation(line: 1209, column: 31, scope: !6426)
!6431 = !DILocation(line: 1210, column: 14, scope: !6381)
!6432 = !DILocation(line: 1210, column: 18, scope: !6381)
!6433 = !DILocation(line: 1210, column: 13, scope: !6381)
!6434 = !DILocation(line: 1210, column: 11, scope: !6381)
!6435 = !DILocation(line: 1212, column: 37, scope: !6381)
!6436 = !DILocation(line: 1212, column: 42, scope: !6381)
!6437 = !DILocation(line: 1212, column: 34, scope: !6381)
!6438 = !DILocation(line: 1212, column: 9, scope: !6381)
!6439 = !DILocation(line: 1212, column: 14, scope: !6381)
!6440 = !DILocation(line: 1212, column: 29, scope: !6381)
!6441 = !DILocation(line: 1213, column: 26, scope: !6381)
!6442 = !DILocation(line: 1213, column: 32, scope: !6381)
!6443 = !DILocation(line: 1213, column: 30, scope: !6381)
!6444 = !DILocation(line: 1213, column: 16, scope: !6381)
!6445 = !DILocation(line: 1213, column: 21, scope: !6381)
!6446 = !DILocation(line: 1213, column: 9, scope: !6381)
!6447 = !DILocation(line: 1213, column: 14, scope: !6381)
!6448 = !DILocation(line: 1213, column: 24, scope: !6381)
!6449 = !DILocation(line: 1214, column: 26, scope: !6381)
!6450 = !DILocation(line: 1214, column: 16, scope: !6381)
!6451 = !DILocation(line: 1214, column: 21, scope: !6381)
!6452 = !DILocation(line: 1214, column: 9, scope: !6381)
!6453 = !DILocation(line: 1214, column: 14, scope: !6381)
!6454 = !DILocation(line: 1214, column: 24, scope: !6381)
!6455 = !DILocation(line: 1215, column: 30, scope: !6381)
!6456 = !DILocation(line: 1215, column: 16, scope: !6381)
!6457 = !DILocation(line: 1215, column: 21, scope: !6381)
!6458 = !DILocation(line: 1215, column: 23, scope: !6381)
!6459 = !DILocation(line: 1215, column: 9, scope: !6381)
!6460 = !DILocation(line: 1215, column: 14, scope: !6381)
!6461 = !DILocation(line: 1215, column: 28, scope: !6381)
!6462 = !DILocation(line: 1216, column: 31, scope: !6381)
!6463 = !DILocation(line: 1216, column: 35, scope: !6381)
!6464 = !DILocation(line: 1216, column: 30, scope: !6381)
!6465 = !DILocation(line: 1216, column: 43, scope: !6466)
!6466 = !DILexicalBlockFile(scope: !6381, file: !911, discriminator: 1)
!6467 = !DILocation(line: 1216, column: 42, scope: !6466)
!6468 = !DILocation(line: 1216, column: 30, scope: !6466)
!6469 = !DILocation(line: 1216, column: 47, scope: !6470)
!6470 = !DILexicalBlockFile(scope: !6381, file: !911, discriminator: 2)
!6471 = !DILocation(line: 1216, column: 30, scope: !6470)
!6472 = !DILocation(line: 1216, column: 30, scope: !6473)
!6473 = !DILexicalBlockFile(scope: !6381, file: !911, discriminator: 3)
!6474 = !DILocation(line: 1216, column: 16, scope: !6473)
!6475 = !DILocation(line: 1216, column: 21, scope: !6473)
!6476 = !DILocation(line: 1216, column: 23, scope: !6473)
!6477 = !DILocation(line: 1216, column: 9, scope: !6473)
!6478 = !DILocation(line: 1216, column: 14, scope: !6473)
!6479 = !DILocation(line: 1216, column: 28, scope: !6473)
!6480 = !DILocation(line: 1217, column: 9, scope: !6381)
!6481 = !DILocation(line: 1217, column: 14, scope: !6381)
!6482 = !DILocation(line: 1217, column: 16, scope: !6381)
!6483 = !DILocation(line: 1219, column: 1, scope: !6245)
!6484 = distinct !DISubprogram(name: "aw_pulse_set2", scope: !911, file: !911, line: 1083, type: !6485, isLocal: true, isDefinition: true, scopeLine: 1085, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!6485 = !DISubroutineType(types: !6486)
!6486 = !{!923, !1812, !1715, !923, !6248}
!6487 = !DILocalVariable(name: "s", arg: 1, scope: !6484, file: !911, line: 1083, type: !1812)
!6488 = !DILocation(line: 1083, column: 43, scope: !6484)
!6489 = !DILocalVariable(name: "gb", arg: 2, scope: !6484, file: !911, line: 1083, type: !1715)
!6490 = !DILocation(line: 1083, column: 61, scope: !6484)
!6491 = !DILocalVariable(name: "block_idx", arg: 3, scope: !6484, file: !911, line: 1084, type: !923)
!6492 = !DILocation(line: 1084, column: 30, scope: !6484)
!6493 = !DILocalVariable(name: "fcb", arg: 4, scope: !6484, file: !911, line: 1084, type: !6248)
!6494 = !DILocation(line: 1084, column: 51, scope: !6484)
!6495 = !DILocalVariable(name: "use_mask_mem", scope: !6484, file: !911, line: 1086, type: !6496)
!6496 = !DICompositeType(tag: DW_TAG_array_type, baseType: !939, size: 144, align: 16, elements: !6497)
!6497 = !{!2002}
!6498 = !DILocation(line: 1086, column: 14, scope: !6484)
!6499 = !DILocalVariable(name: "use_mask", scope: !6484, file: !911, line: 1087, type: !1365)
!6500 = !DILocation(line: 1087, column: 15, scope: !6484)
!6501 = !DILocation(line: 1087, column: 26, scope: !6484)
!6502 = !DILocation(line: 1087, column: 39, scope: !6484)
!6503 = !DILocalVariable(name: "pulse_off", scope: !6484, file: !911, line: 1095, type: !923)
!6504 = !DILocation(line: 1095, column: 9, scope: !6484)
!6505 = !DILocation(line: 1095, column: 43, scope: !6484)
!6506 = !DILocation(line: 1095, column: 21, scope: !6484)
!6507 = !DILocation(line: 1095, column: 24, scope: !6484)
!6508 = !DILocalVariable(name: "pulse_start", scope: !6484, file: !911, line: 1096, type: !923)
!6509 = !DILocation(line: 1096, column: 9, scope: !6484)
!6510 = !DILocalVariable(name: "n", scope: !6484, file: !911, line: 1096, type: !923)
!6511 = !DILocation(line: 1096, column: 22, scope: !6484)
!6512 = !DILocalVariable(name: "idx", scope: !6484, file: !911, line: 1096, type: !923)
!6513 = !DILocation(line: 1096, column: 25, scope: !6484)
!6514 = !DILocalVariable(name: "range", scope: !6484, file: !911, line: 1096, type: !923)
!6515 = !DILocation(line: 1096, column: 30, scope: !6484)
!6516 = !DILocalVariable(name: "aidx", scope: !6484, file: !911, line: 1096, type: !923)
!6517 = !DILocation(line: 1096, column: 37, scope: !6484)
!6518 = !DILocalVariable(name: "start_off", scope: !6484, file: !911, line: 1096, type: !923)
!6519 = !DILocation(line: 1096, column: 43, scope: !6484)
!6520 = !DILocation(line: 1099, column: 24, scope: !6521)
!6521 = distinct !DILexicalBlock(scope: !6484, file: !911, line: 1099, column: 9)
!6522 = !DILocation(line: 1099, column: 9, scope: !6521)
!6523 = !DILocation(line: 1099, column: 12, scope: !6521)
!6524 = !DILocation(line: 1099, column: 35, scope: !6521)
!6525 = !DILocation(line: 1099, column: 9, scope: !6484)
!6526 = !DILocation(line: 1100, column: 9, scope: !6521)
!6527 = !DILocation(line: 1100, column: 16, scope: !6528)
!6528 = !DILexicalBlockFile(scope: !6521, file: !911, discriminator: 1)
!6529 = !DILocation(line: 1100, column: 28, scope: !6528)
!6530 = !DILocation(line: 1100, column: 31, scope: !6528)
!6531 = !DILocation(line: 1100, column: 26, scope: !6528)
!6532 = !DILocation(line: 1100, column: 46, scope: !6528)
!6533 = !DILocation(line: 1100, column: 9, scope: !6528)
!6534 = !DILocation(line: 1101, column: 26, scope: !6521)
!6535 = !DILocation(line: 1101, column: 31, scope: !6521)
!6536 = !DILocation(line: 1101, column: 23, scope: !6521)
!6537 = !DILocation(line: 1100, column: 9, scope: !6538)
!6538 = !DILexicalBlockFile(scope: !6521, file: !911, discriminator: 2)
!6539 = distinct !{!6539, !6526}
!6540 = !DILocation(line: 1100, column: 9, scope: !6541)
!6541 = !DILexicalBlockFile(scope: !6521, file: !911, discriminator: 3)
!6542 = !DILocation(line: 1104, column: 9, scope: !6543)
!6543 = distinct !DILexicalBlock(scope: !6484, file: !911, line: 1104, column: 9)
!6544 = !DILocation(line: 1104, column: 12, scope: !6543)
!6545 = !DILocation(line: 1104, column: 27, scope: !6543)
!6546 = !DILocation(line: 1104, column: 9, scope: !6484)
!6547 = !DILocation(line: 1105, column: 13, scope: !6548)
!6548 = distinct !DILexicalBlock(scope: !6549, file: !911, line: 1105, column: 13)
!6549 = distinct !DILexicalBlock(scope: !6543, file: !911, line: 1104, column: 32)
!6550 = !DILocation(line: 1105, column: 23, scope: !6548)
!6551 = !DILocation(line: 1105, column: 13, scope: !6549)
!6552 = !DILocation(line: 1106, column: 19, scope: !6553)
!6553 = distinct !DILexicalBlock(scope: !6548, file: !911, line: 1105, column: 29)
!6554 = !DILocation(line: 1107, column: 9, scope: !6553)
!6555 = !DILocation(line: 1108, column: 19, scope: !6556)
!6556 = distinct !DILexicalBlock(scope: !6548, file: !911, line: 1107, column: 16)
!6557 = !DILocation(line: 1109, column: 32, scope: !6558)
!6558 = distinct !DILexicalBlock(scope: !6556, file: !911, line: 1109, column: 17)
!6559 = !DILocation(line: 1109, column: 17, scope: !6558)
!6560 = !DILocation(line: 1109, column: 20, scope: !6558)
!6561 = !DILocation(line: 1109, column: 43, scope: !6558)
!6562 = !DILocation(line: 1109, column: 17, scope: !6556)
!6563 = !DILocation(line: 1110, column: 29, scope: !6558)
!6564 = !DILocation(line: 1110, column: 32, scope: !6558)
!6565 = !DILocation(line: 1110, column: 27, scope: !6558)
!6566 = !DILocation(line: 1110, column: 17, scope: !6558)
!6567 = !DILocation(line: 1112, column: 5, scope: !6549)
!6568 = !DILocation(line: 1113, column: 15, scope: !6543)
!6569 = !DILocation(line: 1114, column: 34, scope: !6484)
!6570 = !DILocation(line: 1114, column: 19, scope: !6484)
!6571 = !DILocation(line: 1114, column: 22, scope: !6484)
!6572 = !DILocation(line: 1114, column: 45, scope: !6484)
!6573 = !DILocation(line: 1114, column: 51, scope: !6574)
!6574 = !DILexicalBlockFile(scope: !6484, file: !911, discriminator: 1)
!6575 = !DILocation(line: 1114, column: 63, scope: !6574)
!6576 = !DILocation(line: 1114, column: 69, scope: !6574)
!6577 = !DILocation(line: 1114, column: 61, scope: !6574)
!6578 = !DILocation(line: 1114, column: 19, scope: !6574)
!6579 = !DILocation(line: 1114, column: 19, scope: !6580)
!6580 = !DILexicalBlockFile(scope: !6484, file: !911, discriminator: 2)
!6581 = !DILocation(line: 1114, column: 19, scope: !6582)
!6582 = !DILexicalBlockFile(scope: !6484, file: !911, discriminator: 3)
!6583 = !DILocation(line: 1114, column: 17, scope: !6582)
!6584 = !DILocation(line: 1119, column: 13, scope: !6484)
!6585 = !DILocation(line: 1119, column: 5, scope: !6484)
!6586 = !DILocation(line: 1120, column: 13, scope: !6484)
!6587 = !DILocation(line: 1120, column: 5, scope: !6484)
!6588 = !DILocation(line: 1121, column: 13, scope: !6484)
!6589 = !DILocation(line: 1121, column: 5, scope: !6484)
!6590 = !DILocation(line: 1122, column: 24, scope: !6591)
!6591 = distinct !DILexicalBlock(scope: !6484, file: !911, line: 1122, column: 9)
!6592 = !DILocation(line: 1122, column: 9, scope: !6591)
!6593 = !DILocation(line: 1122, column: 12, scope: !6591)
!6594 = !DILocation(line: 1122, column: 35, scope: !6591)
!6595 = !DILocation(line: 1122, column: 9, scope: !6484)
!6596 = !DILocation(line: 1123, column: 20, scope: !6597)
!6597 = distinct !DILexicalBlock(scope: !6591, file: !911, line: 1123, column: 9)
!6598 = !DILocation(line: 1123, column: 18, scope: !6597)
!6599 = !DILocation(line: 1123, column: 14, scope: !6597)
!6600 = !DILocation(line: 1123, column: 31, scope: !6601)
!6601 = !DILexicalBlockFile(scope: !6602, file: !911, discriminator: 1)
!6602 = distinct !DILexicalBlock(scope: !6597, file: !911, line: 1123, column: 9)
!6603 = !DILocation(line: 1123, column: 35, scope: !6601)
!6604 = !DILocation(line: 1123, column: 9, scope: !6601)
!6605 = !DILocalVariable(name: "excl_range", scope: !6606, file: !911, line: 1124, type: !923)
!6606 = distinct !DILexicalBlock(scope: !6602, file: !911, line: 1123, column: 69)
!6607 = !DILocation(line: 1124, column: 17, scope: !6606)
!6608 = !DILocation(line: 1124, column: 30, scope: !6606)
!6609 = !DILocation(line: 1124, column: 33, scope: !6606)
!6610 = !DILocalVariable(name: "use_mask_ptr", scope: !6606, file: !911, line: 1125, type: !1365)
!6611 = !DILocation(line: 1125, column: 23, scope: !6606)
!6612 = !DILocation(line: 1125, column: 48, scope: !6606)
!6613 = !DILocation(line: 1125, column: 52, scope: !6606)
!6614 = !DILocation(line: 1125, column: 39, scope: !6606)
!6615 = !DILocalVariable(name: "first_sh", scope: !6606, file: !911, line: 1126, type: !923)
!6616 = !DILocation(line: 1126, column: 17, scope: !6606)
!6617 = !DILocation(line: 1126, column: 34, scope: !6606)
!6618 = !DILocation(line: 1126, column: 38, scope: !6606)
!6619 = !DILocation(line: 1126, column: 31, scope: !6606)
!6620 = !DILocation(line: 1127, column: 43, scope: !6606)
!6621 = !DILocation(line: 1127, column: 40, scope: !6606)
!6622 = !DILocation(line: 1127, column: 26, scope: !6606)
!6623 = !DILocation(line: 1127, column: 29, scope: !6606)
!6624 = !DILocation(line: 1128, column: 27, scope: !6606)
!6625 = !DILocation(line: 1128, column: 24, scope: !6606)
!6626 = !DILocation(line: 1129, column: 17, scope: !6627)
!6627 = distinct !DILexicalBlock(scope: !6606, file: !911, line: 1129, column: 17)
!6628 = !DILocation(line: 1129, column: 28, scope: !6627)
!6629 = !DILocation(line: 1129, column: 17, scope: !6606)
!6630 = !DILocation(line: 1130, column: 30, scope: !6631)
!6631 = distinct !DILexicalBlock(scope: !6627, file: !911, line: 1129, column: 35)
!6632 = !DILocation(line: 1130, column: 33, scope: !6631)
!6633 = !DILocation(line: 1131, column: 45, scope: !6631)
!6634 = !DILocation(line: 1131, column: 56, scope: !6631)
!6635 = !DILocation(line: 1131, column: 41, scope: !6631)
!6636 = !DILocation(line: 1131, column: 18, scope: !6631)
!6637 = !DILocation(line: 1131, column: 31, scope: !6631)
!6638 = !DILocation(line: 1132, column: 13, scope: !6631)
!6639 = !DILocation(line: 1133, column: 44, scope: !6627)
!6640 = !DILocation(line: 1133, column: 41, scope: !6627)
!6641 = !DILocation(line: 1133, column: 18, scope: !6627)
!6642 = !DILocation(line: 1133, column: 31, scope: !6627)
!6643 = !DILocation(line: 1134, column: 9, scope: !6606)
!6644 = !DILocation(line: 1123, column: 53, scope: !6645)
!6645 = !DILexicalBlockFile(scope: !6602, file: !911, discriminator: 2)
!6646 = !DILocation(line: 1123, column: 58, scope: !6645)
!6647 = !DILocation(line: 1123, column: 50, scope: !6645)
!6648 = !DILocation(line: 1123, column: 9, scope: !6645)
!6649 = distinct !{!6649, !6650}
!6650 = !DILocation(line: 1123, column: 9, scope: !6591)
!6651 = !DILocation(line: 1134, column: 9, scope: !6652)
!6652 = !DILexicalBlockFile(scope: !6597, file: !911, discriminator: 1)
!6653 = !DILocation(line: 1137, column: 21, scope: !6484)
!6654 = !DILocation(line: 1137, column: 25, scope: !6484)
!6655 = !DILocation(line: 1137, column: 28, scope: !6484)
!6656 = !DILocation(line: 1137, column: 43, scope: !6484)
!6657 = !DILocation(line: 1137, column: 57, scope: !6574)
!6658 = !DILocation(line: 1137, column: 55, scope: !6574)
!6659 = !DILocation(line: 1137, column: 51, scope: !6574)
!6660 = !DILocation(line: 1137, column: 25, scope: !6574)
!6661 = !DILocation(line: 1137, column: 25, scope: !6580)
!6662 = !DILocation(line: 1137, column: 25, scope: !6582)
!6663 = !DILocation(line: 1137, column: 12, scope: !6582)
!6664 = !DILocation(line: 1137, column: 10, scope: !6582)
!6665 = !DILocation(line: 1138, column: 12, scope: !6666)
!6666 = distinct !DILexicalBlock(scope: !6484, file: !911, line: 1138, column: 5)
!6667 = !DILocation(line: 1138, column: 10, scope: !6666)
!6668 = !DILocation(line: 1138, column: 17, scope: !6669)
!6669 = !DILexicalBlockFile(scope: !6670, file: !911, discriminator: 1)
!6670 = distinct !DILexicalBlock(scope: !6666, file: !911, line: 1138, column: 5)
!6671 = !DILocation(line: 1138, column: 22, scope: !6669)
!6672 = !DILocation(line: 1138, column: 19, scope: !6669)
!6673 = !DILocation(line: 1138, column: 5, scope: !6669)
!6674 = !DILocation(line: 1139, column: 20, scope: !6675)
!6675 = distinct !DILexicalBlock(scope: !6676, file: !911, line: 1139, column: 9)
!6676 = distinct !DILexicalBlock(scope: !6670, file: !911, line: 1138, column: 43)
!6677 = !DILocation(line: 1139, column: 18, scope: !6675)
!6678 = !DILocation(line: 1139, column: 14, scope: !6675)
!6679 = !DILocation(line: 1139, column: 33, scope: !6680)
!6680 = !DILexicalBlockFile(scope: !6681, file: !911, discriminator: 1)
!6681 = distinct !DILexicalBlock(scope: !6675, file: !911, line: 1139, column: 9)
!6682 = !DILocation(line: 1139, column: 37, scope: !6680)
!6683 = !DILocation(line: 1139, column: 9, scope: !6680)
!6684 = !DILocation(line: 1139, column: 9, scope: !6685)
!6685 = !DILexicalBlockFile(scope: !6675, file: !911, discriminator: 2)
!6686 = !DILocation(line: 1139, column: 49, scope: !6687)
!6687 = !DILexicalBlockFile(scope: !6681, file: !911, discriminator: 3)
!6688 = !DILocation(line: 1139, column: 54, scope: !6687)
!6689 = !DILocation(line: 1139, column: 46, scope: !6687)
!6690 = !DILocation(line: 1139, column: 9, scope: !6687)
!6691 = distinct !{!6691, !6692}
!6692 = !DILocation(line: 1139, column: 9, scope: !6676)
!6693 = !DILocation(line: 1140, column: 13, scope: !6694)
!6694 = distinct !DILexicalBlock(scope: !6676, file: !911, line: 1140, column: 13)
!6695 = !DILocation(line: 1140, column: 17, scope: !6694)
!6696 = !DILocation(line: 1140, column: 13, scope: !6676)
!6697 = !DILocation(line: 1141, column: 17, scope: !6698)
!6698 = distinct !DILexicalBlock(scope: !6699, file: !911, line: 1141, column: 17)
!6699 = distinct !DILexicalBlock(scope: !6694, file: !911, line: 1140, column: 29)
!6700 = !DILocation(line: 1141, column: 17, scope: !6699)
!6701 = !DILocation(line: 1141, column: 34, scope: !6702)
!6702 = !DILexicalBlockFile(scope: !6698, file: !911, discriminator: 1)
!6703 = !DILocation(line: 1141, column: 30, scope: !6702)
!6704 = !DILocation(line: 1142, column: 22, scope: !6705)
!6705 = distinct !DILexicalBlock(scope: !6698, file: !911, line: 1142, column: 22)
!6706 = !DILocation(line: 1142, column: 22, scope: !6698)
!6707 = !DILocation(line: 1142, column: 39, scope: !6708)
!6708 = !DILexicalBlockFile(scope: !6705, file: !911, discriminator: 1)
!6709 = !DILocation(line: 1142, column: 35, scope: !6708)
!6710 = !DILocation(line: 1143, column: 22, scope: !6711)
!6711 = distinct !DILexicalBlock(scope: !6705, file: !911, line: 1143, column: 22)
!6712 = !DILocation(line: 1143, column: 22, scope: !6705)
!6713 = !DILocation(line: 1143, column: 39, scope: !6714)
!6714 = !DILexicalBlockFile(scope: !6711, file: !911, discriminator: 1)
!6715 = !DILocation(line: 1143, column: 35, scope: !6714)
!6716 = !DILocation(line: 1144, column: 22, scope: !6717)
!6717 = distinct !DILexicalBlock(scope: !6711, file: !911, line: 1144, column: 22)
!6718 = !DILocation(line: 1144, column: 22, scope: !6711)
!6719 = !DILocation(line: 1144, column: 39, scope: !6720)
!6720 = !DILexicalBlockFile(scope: !6717, file: !911, discriminator: 1)
!6721 = !DILocation(line: 1144, column: 35, scope: !6720)
!6722 = !DILocation(line: 1145, column: 22, scope: !6723)
!6723 = distinct !DILexicalBlock(scope: !6717, file: !911, line: 1145, column: 22)
!6724 = !DILocation(line: 1145, column: 22, scope: !6717)
!6725 = !DILocation(line: 1145, column: 39, scope: !6726)
!6726 = !DILexicalBlockFile(scope: !6723, file: !911, discriminator: 1)
!6727 = !DILocation(line: 1145, column: 35, scope: !6726)
!6728 = !DILocation(line: 1146, column: 18, scope: !6723)
!6729 = !DILocation(line: 1147, column: 50, scope: !6699)
!6730 = !DILocation(line: 1147, column: 54, scope: !6699)
!6731 = !DILocation(line: 1147, column: 41, scope: !6699)
!6732 = !DILocation(line: 1147, column: 40, scope: !6699)
!6733 = !DILocation(line: 1147, column: 60, scope: !6699)
!6734 = !DILocation(line: 1147, column: 26, scope: !6699)
!6735 = !DILocation(line: 1147, column: 24, scope: !6699)
!6736 = !DILocation(line: 1147, column: 17, scope: !6699)
!6737 = !DILocation(line: 1148, column: 9, scope: !6699)
!6738 = !DILocation(line: 1149, column: 22, scope: !6739)
!6739 = distinct !DILexicalBlock(scope: !6676, file: !911, line: 1149, column: 13)
!6740 = !DILocation(line: 1149, column: 26, scope: !6739)
!6741 = !DILocation(line: 1149, column: 13, scope: !6739)
!6742 = !DILocation(line: 1149, column: 46, scope: !6739)
!6743 = !DILocation(line: 1149, column: 50, scope: !6739)
!6744 = !DILocation(line: 1149, column: 42, scope: !6739)
!6745 = !DILocation(line: 1149, column: 32, scope: !6739)
!6746 = !DILocation(line: 1149, column: 13, scope: !6676)
!6747 = !DILocation(line: 1150, column: 48, scope: !6748)
!6748 = distinct !DILexicalBlock(scope: !6739, file: !911, line: 1149, column: 58)
!6749 = !DILocation(line: 1150, column: 52, scope: !6748)
!6750 = !DILocation(line: 1150, column: 44, scope: !6748)
!6751 = !DILocation(line: 1150, column: 35, scope: !6748)
!6752 = !DILocation(line: 1150, column: 22, scope: !6748)
!6753 = !DILocation(line: 1150, column: 26, scope: !6748)
!6754 = !DILocation(line: 1150, column: 13, scope: !6748)
!6755 = !DILocation(line: 1150, column: 32, scope: !6748)
!6756 = !DILocation(line: 1151, column: 14, scope: !6748)
!6757 = !DILocation(line: 1152, column: 25, scope: !6748)
!6758 = !DILocation(line: 1152, column: 23, scope: !6748)
!6759 = !DILocation(line: 1153, column: 9, scope: !6748)
!6760 = !DILocation(line: 1154, column: 5, scope: !6676)
!6761 = !DILocation(line: 1138, column: 39, scope: !6762)
!6762 = !DILexicalBlockFile(scope: !6670, file: !911, discriminator: 2)
!6763 = !DILocation(line: 1138, column: 5, scope: !6762)
!6764 = distinct !{!6764, !6765}
!6765 = !DILocation(line: 1138, column: 5, scope: !6484)
!6766 = !DILocation(line: 1156, column: 22, scope: !6484)
!6767 = !DILocation(line: 1156, column: 12, scope: !6484)
!6768 = !DILocation(line: 1156, column: 17, scope: !6484)
!6769 = !DILocation(line: 1156, column: 5, scope: !6484)
!6770 = !DILocation(line: 1156, column: 10, scope: !6484)
!6771 = !DILocation(line: 1156, column: 20, scope: !6484)
!6772 = !DILocation(line: 1157, column: 32, scope: !6484)
!6773 = !DILocation(line: 1157, column: 22, scope: !6484)
!6774 = !DILocation(line: 1157, column: 12, scope: !6484)
!6775 = !DILocation(line: 1157, column: 17, scope: !6484)
!6776 = !DILocation(line: 1157, column: 5, scope: !6484)
!6777 = !DILocation(line: 1157, column: 10, scope: !6484)
!6778 = !DILocation(line: 1157, column: 20, scope: !6484)
!6779 = !DILocation(line: 1158, column: 5, scope: !6484)
!6780 = !DILocation(line: 1158, column: 10, scope: !6484)
!6781 = !DILocation(line: 1158, column: 11, scope: !6484)
!6782 = !DILocation(line: 1161, column: 20, scope: !6484)
!6783 = !DILocation(line: 1161, column: 18, scope: !6484)
!6784 = !DILocation(line: 1161, column: 33, scope: !6484)
!6785 = !DILocation(line: 1161, column: 38, scope: !6484)
!6786 = !DILocation(line: 1161, column: 31, scope: !6484)
!6787 = !DILocation(line: 1161, column: 7, scope: !6484)
!6788 = !DILocation(line: 1162, column: 34, scope: !6484)
!6789 = !DILocation(line: 1162, column: 38, scope: !6574)
!6790 = !DILocation(line: 1162, column: 43, scope: !6574)
!6791 = !DILocation(line: 1162, column: 55, scope: !6574)
!6792 = !DILocation(line: 1162, column: 53, scope: !6574)
!6793 = !DILocation(line: 1162, column: 34, scope: !6574)
!6794 = !DILocation(line: 1162, column: 34, scope: !6580)
!6795 = !DILocation(line: 1162, column: 34, scope: !6582)
!6796 = !DILocation(line: 1162, column: 5, scope: !6582)
!6797 = !DILocation(line: 1162, column: 8, scope: !6582)
!6798 = !DILocation(line: 1162, column: 32, scope: !6582)
!6799 = !DILocation(line: 1163, column: 5, scope: !6484)
!6800 = !DILocation(line: 1164, column: 1, scope: !6484)
!6801 = distinct !DISubprogram(name: "kalman_smoothen", scope: !911, file: !911, line: 543, type: !6802, isLocal: true, isDefinition: true, scopeLine: 545, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!6802 = !DISubroutineType(types: !6803)
!6803 = !{!923, !1812, !923, !1953, !937, !923}
!6804 = !DILocalVariable(name: "s", arg: 1, scope: !6801, file: !911, line: 543, type: !1812)
!6805 = !DILocation(line: 543, column: 45, scope: !6801)
!6806 = !DILocalVariable(name: "pitch", arg: 2, scope: !6801, file: !911, line: 543, type: !923)
!6807 = !DILocation(line: 543, column: 52, scope: !6801)
!6808 = !DILocalVariable(name: "in", arg: 3, scope: !6801, file: !911, line: 544, type: !1953)
!6809 = !DILocation(line: 544, column: 41, scope: !6801)
!6810 = !DILocalVariable(name: "out", arg: 4, scope: !6801, file: !911, line: 544, type: !937)
!6811 = !DILocation(line: 544, column: 52, scope: !6801)
!6812 = !DILocalVariable(name: "size", arg: 5, scope: !6801, file: !911, line: 544, type: !923)
!6813 = !DILocation(line: 544, column: 61, scope: !6801)
!6814 = !DILocalVariable(name: "n", scope: !6801, file: !911, line: 546, type: !923)
!6815 = !DILocation(line: 546, column: 9, scope: !6801)
!6816 = !DILocalVariable(name: "optimal_gain", scope: !6801, file: !911, line: 547, type: !938)
!6817 = !DILocation(line: 547, column: 11, scope: !6801)
!6818 = !DILocalVariable(name: "dot", scope: !6801, file: !911, line: 547, type: !938)
!6819 = !DILocation(line: 547, column: 29, scope: !6801)
!6820 = !DILocalVariable(name: "ptr", scope: !6801, file: !911, line: 548, type: !1953)
!6821 = !DILocation(line: 548, column: 18, scope: !6801)
!6822 = !DILocation(line: 548, column: 31, scope: !6801)
!6823 = !DILocation(line: 548, column: 34, scope: !6801)
!6824 = !DILocation(line: 548, column: 52, scope: !6801)
!6825 = !DILocation(line: 548, column: 58, scope: !6801)
!6826 = !DILocation(line: 548, column: 49, scope: !6801)
!6827 = !DILocation(line: 548, column: 30, scope: !6801)
!6828 = !DILocation(line: 548, column: 66, scope: !6829)
!6829 = !DILexicalBlockFile(scope: !6801, file: !911, discriminator: 1)
!6830 = !DILocation(line: 548, column: 69, scope: !6829)
!6831 = !DILocation(line: 548, column: 30, scope: !6829)
!6832 = !DILocation(line: 548, column: 87, scope: !6833)
!6833 = !DILexicalBlockFile(scope: !6801, file: !911, discriminator: 2)
!6834 = !DILocation(line: 548, column: 93, scope: !6833)
!6835 = !DILocation(line: 548, column: 30, scope: !6833)
!6836 = !DILocation(line: 548, column: 30, scope: !6837)
!6837 = !DILexicalBlockFile(scope: !6801, file: !911, discriminator: 3)
!6838 = !DILocation(line: 548, column: 28, scope: !6837)
!6839 = !DILocation(line: 548, column: 25, scope: !6837)
!6840 = !DILocation(line: 548, column: 18, scope: !6837)
!6841 = !DILocalVariable(name: "end", scope: !6801, file: !911, line: 549, type: !1953)
!6842 = !DILocation(line: 549, column: 18, scope: !6801)
!6843 = !DILocation(line: 549, column: 31, scope: !6801)
!6844 = !DILocation(line: 549, column: 34, scope: !6801)
!6845 = !DILocation(line: 549, column: 52, scope: !6801)
!6846 = !DILocation(line: 549, column: 58, scope: !6801)
!6847 = !DILocation(line: 549, column: 49, scope: !6801)
!6848 = !DILocation(line: 549, column: 30, scope: !6801)
!6849 = !DILocation(line: 549, column: 66, scope: !6829)
!6850 = !DILocation(line: 549, column: 72, scope: !6829)
!6851 = !DILocation(line: 549, column: 30, scope: !6829)
!6852 = !DILocation(line: 549, column: 80, scope: !6833)
!6853 = !DILocation(line: 549, column: 83, scope: !6833)
!6854 = !DILocation(line: 549, column: 30, scope: !6833)
!6855 = !DILocation(line: 549, column: 30, scope: !6837)
!6856 = !DILocation(line: 549, column: 28, scope: !6837)
!6857 = !DILocation(line: 549, column: 25, scope: !6837)
!6858 = !DILocation(line: 549, column: 18, scope: !6837)
!6859 = !DILocalVariable(name: "best_hist_ptr", scope: !6801, file: !911, line: 550, type: !1953)
!6860 = !DILocation(line: 550, column: 18, scope: !6801)
!6861 = !DILocation(line: 553, column: 5, scope: !6801)
!6862 = distinct !{!6862, !6861}
!6863 = !DILocation(line: 554, column: 44, scope: !6864)
!6864 = distinct !DILexicalBlock(scope: !6801, file: !911, line: 553, column: 8)
!6865 = !DILocation(line: 554, column: 48, scope: !6864)
!6866 = !DILocation(line: 554, column: 53, scope: !6864)
!6867 = !DILocation(line: 554, column: 15, scope: !6864)
!6868 = !DILocation(line: 554, column: 13, scope: !6864)
!6869 = !DILocation(line: 555, column: 13, scope: !6870)
!6870 = distinct !DILexicalBlock(scope: !6864, file: !911, line: 555, column: 13)
!6871 = !DILocation(line: 555, column: 19, scope: !6870)
!6872 = !DILocation(line: 555, column: 17, scope: !6870)
!6873 = !DILocation(line: 555, column: 13, scope: !6864)
!6874 = !DILocation(line: 556, column: 28, scope: !6875)
!6875 = distinct !DILexicalBlock(scope: !6870, file: !911, line: 555, column: 33)
!6876 = !DILocation(line: 556, column: 26, scope: !6875)
!6877 = !DILocation(line: 557, column: 29, scope: !6875)
!6878 = !DILocation(line: 557, column: 27, scope: !6875)
!6879 = !DILocation(line: 558, column: 9, scope: !6875)
!6880 = !DILocation(line: 559, column: 5, scope: !6864)
!6881 = !DILocation(line: 559, column: 14, scope: !6829)
!6882 = !DILocation(line: 559, column: 23, scope: !6829)
!6883 = !DILocation(line: 559, column: 20, scope: !6829)
!6884 = !DILocation(line: 559, column: 5, scope: !6829)
!6885 = !DILocation(line: 561, column: 9, scope: !6886)
!6886 = distinct !DILexicalBlock(scope: !6801, file: !911, line: 561, column: 9)
!6887 = !DILocation(line: 561, column: 22, scope: !6886)
!6888 = !DILocation(line: 561, column: 9, scope: !6801)
!6889 = !DILocation(line: 562, column: 9, scope: !6886)
!6890 = !DILocation(line: 563, column: 40, scope: !6801)
!6891 = !DILocation(line: 563, column: 55, scope: !6801)
!6892 = !DILocation(line: 563, column: 70, scope: !6801)
!6893 = !DILocation(line: 563, column: 11, scope: !6801)
!6894 = !DILocation(line: 563, column: 9, scope: !6801)
!6895 = !DILocation(line: 564, column: 9, scope: !6896)
!6896 = distinct !DILexicalBlock(scope: !6801, file: !911, line: 564, column: 9)
!6897 = !DILocation(line: 564, column: 13, scope: !6896)
!6898 = !DILocation(line: 564, column: 9, scope: !6801)
!6899 = !DILocation(line: 565, column: 9, scope: !6896)
!6900 = !DILocation(line: 567, column: 9, scope: !6901)
!6901 = distinct !DILexicalBlock(scope: !6801, file: !911, line: 567, column: 9)
!6902 = !DILocation(line: 567, column: 25, scope: !6901)
!6903 = !DILocation(line: 567, column: 22, scope: !6901)
!6904 = !DILocation(line: 567, column: 9, scope: !6801)
!6905 = !DILocation(line: 568, column: 15, scope: !6906)
!6906 = distinct !DILexicalBlock(scope: !6901, file: !911, line: 567, column: 30)
!6907 = !DILocation(line: 568, column: 22, scope: !6906)
!6908 = !DILocation(line: 568, column: 34, scope: !6906)
!6909 = !DILocation(line: 568, column: 32, scope: !6906)
!6910 = !DILocation(line: 568, column: 26, scope: !6906)
!6911 = !DILocation(line: 568, column: 19, scope: !6906)
!6912 = !DILocation(line: 568, column: 13, scope: !6906)
!6913 = !DILocation(line: 569, column: 5, scope: !6906)
!6914 = !DILocation(line: 570, column: 13, scope: !6901)
!6915 = !DILocation(line: 573, column: 12, scope: !6916)
!6916 = distinct !DILexicalBlock(scope: !6801, file: !911, line: 573, column: 5)
!6917 = !DILocation(line: 573, column: 10, scope: !6916)
!6918 = !DILocation(line: 573, column: 17, scope: !6919)
!6919 = !DILexicalBlockFile(scope: !6920, file: !911, discriminator: 1)
!6920 = distinct !DILexicalBlock(scope: !6916, file: !911, line: 573, column: 5)
!6921 = !DILocation(line: 573, column: 21, scope: !6919)
!6922 = !DILocation(line: 573, column: 19, scope: !6919)
!6923 = !DILocation(line: 573, column: 5, scope: !6919)
!6924 = !DILocation(line: 574, column: 32, scope: !6920)
!6925 = !DILocation(line: 574, column: 18, scope: !6920)
!6926 = !DILocation(line: 574, column: 37, scope: !6920)
!6927 = !DILocation(line: 574, column: 47, scope: !6920)
!6928 = !DILocation(line: 574, column: 44, scope: !6920)
!6929 = !DILocation(line: 574, column: 66, scope: !6920)
!6930 = !DILocation(line: 574, column: 52, scope: !6920)
!6931 = !DILocation(line: 574, column: 50, scope: !6920)
!6932 = !DILocation(line: 574, column: 41, scope: !6920)
!6933 = !DILocation(line: 574, column: 35, scope: !6920)
!6934 = !DILocation(line: 574, column: 13, scope: !6920)
!6935 = !DILocation(line: 574, column: 9, scope: !6920)
!6936 = !DILocation(line: 574, column: 16, scope: !6920)
!6937 = !DILocation(line: 573, column: 28, scope: !6938)
!6938 = !DILexicalBlockFile(scope: !6920, file: !911, discriminator: 2)
!6939 = !DILocation(line: 573, column: 5, scope: !6938)
!6940 = distinct !{!6940, !6941}
!6941 = !DILocation(line: 573, column: 5, scope: !6801)
!6942 = !DILocation(line: 576, column: 5, scope: !6801)
!6943 = !DILocation(line: 577, column: 1, scope: !6801)
!6944 = distinct !DISubprogram(name: "wiener_denoise", scope: !911, file: !911, line: 719, type: !6945, isLocal: true, isDefinition: true, scopeLine: 722, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!6945 = !DISubroutineType(types: !6946)
!6946 = !{null, !1812, !923, !937, !923, !1953}
!6947 = !DILocalVariable(name: "s", arg: 1, scope: !6944, file: !911, line: 719, type: !1812)
!6948 = !DILocation(line: 719, column: 45, scope: !6944)
!6949 = !DILocalVariable(name: "fcb_type", arg: 2, scope: !6944, file: !911, line: 719, type: !923)
!6950 = !DILocation(line: 719, column: 52, scope: !6944)
!6951 = !DILocalVariable(name: "synth_pf", arg: 3, scope: !6944, file: !911, line: 720, type: !937)
!6952 = !DILocation(line: 720, column: 35, scope: !6944)
!6953 = !DILocalVariable(name: "size", arg: 4, scope: !6944, file: !911, line: 720, type: !923)
!6954 = !DILocation(line: 720, column: 49, scope: !6944)
!6955 = !DILocalVariable(name: "lpcs", arg: 5, scope: !6944, file: !911, line: 721, type: !1953)
!6956 = !DILocation(line: 721, column: 41, scope: !6944)
!6957 = !DILocalVariable(name: "remainder", scope: !6944, file: !911, line: 723, type: !923)
!6958 = !DILocation(line: 723, column: 9, scope: !6944)
!6959 = !DILocalVariable(name: "lim", scope: !6944, file: !911, line: 723, type: !923)
!6960 = !DILocation(line: 723, column: 20, scope: !6944)
!6961 = !DILocalVariable(name: "n", scope: !6944, file: !911, line: 723, type: !923)
!6962 = !DILocation(line: 723, column: 25, scope: !6944)
!6963 = !DILocation(line: 725, column: 9, scope: !6964)
!6964 = distinct !DILexicalBlock(scope: !6944, file: !911, line: 725, column: 9)
!6965 = !DILocation(line: 725, column: 18, scope: !6964)
!6966 = !DILocation(line: 725, column: 9, scope: !6944)
!6967 = !DILocalVariable(name: "tilted_lpcs", scope: !6968, file: !911, line: 726, type: !937)
!6968 = distinct !DILexicalBlock(scope: !6964, file: !911, line: 725, column: 39)
!6969 = !DILocation(line: 726, column: 16, scope: !6968)
!6970 = !DILocation(line: 726, column: 30, scope: !6968)
!6971 = !DILocation(line: 726, column: 33, scope: !6968)
!6972 = !DILocalVariable(name: "coeffs", scope: !6968, file: !911, line: 727, type: !937)
!6973 = !DILocation(line: 727, column: 16, scope: !6968)
!6974 = !DILocation(line: 727, column: 25, scope: !6968)
!6975 = !DILocation(line: 727, column: 28, scope: !6968)
!6976 = !DILocalVariable(name: "tilt_mem", scope: !6968, file: !911, line: 727, type: !938)
!6977 = !DILocation(line: 727, column: 47, scope: !6968)
!6978 = !DILocation(line: 729, column: 9, scope: !6968)
!6979 = !DILocation(line: 729, column: 24, scope: !6968)
!6980 = !DILocation(line: 730, column: 17, scope: !6968)
!6981 = !DILocation(line: 730, column: 9, scope: !6968)
!6982 = !DILocation(line: 730, column: 33, scope: !6968)
!6983 = !DILocation(line: 730, column: 57, scope: !6968)
!6984 = !DILocation(line: 730, column: 60, scope: !6968)
!6985 = !DILocation(line: 730, column: 55, scope: !6968)
!6986 = !DILocation(line: 731, column: 29, scope: !6968)
!6987 = !DILocation(line: 731, column: 32, scope: !6968)
!6988 = !DILocation(line: 731, column: 37, scope: !6968)
!6989 = !DILocation(line: 731, column: 17, scope: !6968)
!6990 = !DILocation(line: 731, column: 9, scope: !6968)
!6991 = !DILocation(line: 732, column: 48, scope: !6968)
!6992 = !DILocation(line: 732, column: 51, scope: !6968)
!6993 = !DILocation(line: 732, column: 46, scope: !6968)
!6994 = !DILocation(line: 732, column: 56, scope: !6968)
!6995 = !DILocation(line: 732, column: 41, scope: !6968)
!6996 = !DILocation(line: 732, column: 39, scope: !6968)
!6997 = !DILocation(line: 733, column: 59, scope: !6968)
!6998 = !DILocation(line: 733, column: 65, scope: !6968)
!6999 = !DILocation(line: 733, column: 68, scope: !6968)
!7000 = !DILocation(line: 733, column: 47, scope: !6968)
!7001 = !DILocation(line: 733, column: 45, scope: !6968)
!7002 = !DILocation(line: 733, column: 41, scope: !6968)
!7003 = !DILocation(line: 734, column: 30, scope: !6968)
!7004 = !DILocation(line: 734, column: 43, scope: !6968)
!7005 = !DILocation(line: 734, column: 46, scope: !6968)
!7006 = !DILocation(line: 734, column: 51, scope: !6968)
!7007 = !DILocation(line: 733, column: 9, scope: !7008)
!7008 = !DILexicalBlockFile(scope: !6968, file: !911, discriminator: 1)
!7009 = !DILocation(line: 740, column: 29, scope: !6968)
!7010 = !DILocation(line: 740, column: 27, scope: !6968)
!7011 = !DILocation(line: 740, column: 38, scope: !6968)
!7012 = !DILocation(line: 740, column: 43, scope: !6968)
!7013 = !DILocation(line: 740, column: 35, scope: !6968)
!7014 = !DILocation(line: 740, column: 22, scope: !6968)
!7015 = !DILocation(line: 740, column: 51, scope: !7008)
!7016 = !DILocation(line: 740, column: 56, scope: !7008)
!7017 = !DILocation(line: 740, column: 22, scope: !7008)
!7018 = !DILocation(line: 740, column: 70, scope: !7019)
!7019 = !DILexicalBlockFile(scope: !6968, file: !911, discriminator: 2)
!7020 = !DILocation(line: 740, column: 68, scope: !7019)
!7021 = !DILocation(line: 740, column: 22, scope: !7019)
!7022 = !DILocation(line: 740, column: 22, scope: !7023)
!7023 = !DILexicalBlockFile(scope: !6968, file: !911, discriminator: 3)
!7024 = !DILocation(line: 740, column: 19, scope: !7023)
!7025 = !DILocation(line: 741, column: 29, scope: !6968)
!7026 = !DILocation(line: 741, column: 32, scope: !6968)
!7027 = !DILocation(line: 741, column: 45, scope: !6968)
!7028 = !DILocation(line: 741, column: 55, scope: !6968)
!7029 = !DILocation(line: 741, column: 63, scope: !6968)
!7030 = !DILocation(line: 741, column: 9, scope: !6968)
!7031 = !DILocation(line: 745, column: 26, scope: !6968)
!7032 = !DILocation(line: 745, column: 17, scope: !6968)
!7033 = !DILocation(line: 745, column: 9, scope: !6968)
!7034 = !DILocation(line: 745, column: 65, scope: !6968)
!7035 = !DILocation(line: 745, column: 63, scope: !6968)
!7036 = !DILocation(line: 745, column: 58, scope: !6968)
!7037 = !DILocation(line: 745, column: 56, scope: !6968)
!7038 = !DILocation(line: 746, column: 9, scope: !6968)
!7039 = !DILocation(line: 746, column: 12, scope: !6968)
!7040 = !DILocation(line: 746, column: 17, scope: !6968)
!7041 = !DILocation(line: 746, column: 28, scope: !6968)
!7042 = !DILocation(line: 746, column: 31, scope: !6968)
!7043 = !DILocation(line: 746, column: 37, scope: !6968)
!7044 = !DILocation(line: 747, column: 9, scope: !6968)
!7045 = !DILocation(line: 747, column: 12, scope: !6968)
!7046 = !DILocation(line: 747, column: 17, scope: !6968)
!7047 = !DILocation(line: 747, column: 28, scope: !6968)
!7048 = !DILocation(line: 747, column: 31, scope: !6968)
!7049 = !DILocation(line: 747, column: 37, scope: !6968)
!7050 = !DILocation(line: 748, column: 24, scope: !6968)
!7051 = !DILocation(line: 748, column: 9, scope: !6968)
!7052 = !DILocation(line: 748, column: 21, scope: !6968)
!7053 = !DILocation(line: 749, column: 24, scope: !6968)
!7054 = !DILocation(line: 749, column: 9, scope: !6968)
!7055 = !DILocation(line: 749, column: 21, scope: !6968)
!7056 = !DILocation(line: 750, column: 16, scope: !7057)
!7057 = distinct !DILexicalBlock(scope: !6968, file: !911, line: 750, column: 9)
!7058 = !DILocation(line: 750, column: 14, scope: !7057)
!7059 = !DILocation(line: 750, column: 21, scope: !7060)
!7060 = !DILexicalBlockFile(scope: !7061, file: !911, discriminator: 1)
!7061 = distinct !DILexicalBlock(scope: !7057, file: !911, line: 750, column: 9)
!7062 = !DILocation(line: 750, column: 23, scope: !7060)
!7063 = !DILocation(line: 750, column: 9, scope: !7060)
!7064 = !DILocalVariable(name: "v1", scope: !7065, file: !911, line: 751, type: !938)
!7065 = distinct !DILexicalBlock(scope: !7061, file: !911, line: 750, column: 34)
!7066 = !DILocation(line: 751, column: 19, scope: !7065)
!7067 = !DILocation(line: 751, column: 33, scope: !7065)
!7068 = !DILocation(line: 751, column: 35, scope: !7065)
!7069 = !DILocation(line: 751, column: 24, scope: !7065)
!7070 = !DILocalVariable(name: "v2", scope: !7065, file: !911, line: 751, type: !938)
!7071 = !DILocation(line: 751, column: 41, scope: !7065)
!7072 = !DILocation(line: 751, column: 55, scope: !7065)
!7073 = !DILocation(line: 751, column: 57, scope: !7065)
!7074 = !DILocation(line: 751, column: 61, scope: !7065)
!7075 = !DILocation(line: 751, column: 46, scope: !7065)
!7076 = !DILocation(line: 752, column: 31, scope: !7065)
!7077 = !DILocation(line: 752, column: 43, scope: !7065)
!7078 = !DILocation(line: 752, column: 45, scope: !7065)
!7079 = !DILocation(line: 752, column: 36, scope: !7065)
!7080 = !DILocation(line: 752, column: 34, scope: !7065)
!7081 = !DILocation(line: 752, column: 52, scope: !7065)
!7082 = !DILocation(line: 752, column: 64, scope: !7065)
!7083 = !DILocation(line: 752, column: 66, scope: !7065)
!7084 = !DILocation(line: 752, column: 70, scope: !7065)
!7085 = !DILocation(line: 752, column: 57, scope: !7065)
!7086 = !DILocation(line: 752, column: 55, scope: !7065)
!7087 = !DILocation(line: 752, column: 50, scope: !7065)
!7088 = !DILocation(line: 752, column: 22, scope: !7065)
!7089 = !DILocation(line: 752, column: 24, scope: !7065)
!7090 = !DILocation(line: 752, column: 13, scope: !7065)
!7091 = !DILocation(line: 752, column: 29, scope: !7065)
!7092 = !DILocation(line: 753, column: 35, scope: !7065)
!7093 = !DILocation(line: 753, column: 47, scope: !7065)
!7094 = !DILocation(line: 753, column: 49, scope: !7065)
!7095 = !DILocation(line: 753, column: 40, scope: !7065)
!7096 = !DILocation(line: 753, column: 38, scope: !7065)
!7097 = !DILocation(line: 753, column: 56, scope: !7065)
!7098 = !DILocation(line: 753, column: 68, scope: !7065)
!7099 = !DILocation(line: 753, column: 70, scope: !7065)
!7100 = !DILocation(line: 753, column: 74, scope: !7065)
!7101 = !DILocation(line: 753, column: 61, scope: !7065)
!7102 = !DILocation(line: 753, column: 59, scope: !7065)
!7103 = !DILocation(line: 753, column: 54, scope: !7065)
!7104 = !DILocation(line: 753, column: 22, scope: !7065)
!7105 = !DILocation(line: 753, column: 24, scope: !7065)
!7106 = !DILocation(line: 753, column: 28, scope: !7065)
!7107 = !DILocation(line: 753, column: 13, scope: !7065)
!7108 = !DILocation(line: 753, column: 33, scope: !7065)
!7109 = !DILocation(line: 754, column: 9, scope: !7065)
!7110 = !DILocation(line: 750, column: 30, scope: !7111)
!7111 = !DILexicalBlockFile(scope: !7061, file: !911, discriminator: 2)
!7112 = !DILocation(line: 750, column: 9, scope: !7111)
!7113 = distinct !{!7113, !7114}
!7114 = !DILocation(line: 750, column: 9, scope: !6968)
!7115 = !DILocation(line: 755, column: 9, scope: !6968)
!7116 = !DILocation(line: 755, column: 12, scope: !6968)
!7117 = !DILocation(line: 755, column: 18, scope: !6968)
!7118 = !DILocation(line: 755, column: 29, scope: !6968)
!7119 = !DILocation(line: 755, column: 32, scope: !6968)
!7120 = !DILocation(line: 755, column: 39, scope: !6968)
!7121 = !DILocation(line: 756, column: 5, scope: !6968)
!7122 = !DILocation(line: 759, column: 9, scope: !7123)
!7123 = distinct !DILexicalBlock(scope: !6944, file: !911, line: 759, column: 9)
!7124 = !DILocation(line: 759, column: 12, scope: !7123)
!7125 = !DILocation(line: 759, column: 9, scope: !6944)
!7126 = !DILocation(line: 760, column: 17, scope: !7127)
!7127 = distinct !DILexicalBlock(scope: !7123, file: !911, line: 759, column: 39)
!7128 = !DILocation(line: 760, column: 20, scope: !7127)
!7129 = !DILocation(line: 760, column: 50, scope: !7127)
!7130 = !DILocation(line: 760, column: 47, scope: !7127)
!7131 = !DILocation(line: 760, column: 16, scope: !7127)
!7132 = !DILocation(line: 760, column: 59, scope: !7133)
!7133 = !DILexicalBlockFile(scope: !7127, file: !911, discriminator: 1)
!7134 = !DILocation(line: 760, column: 16, scope: !7133)
!7135 = !DILocation(line: 760, column: 68, scope: !7136)
!7136 = !DILexicalBlockFile(scope: !7127, file: !911, discriminator: 2)
!7137 = !DILocation(line: 760, column: 71, scope: !7136)
!7138 = !DILocation(line: 760, column: 16, scope: !7136)
!7139 = !DILocation(line: 760, column: 16, scope: !7140)
!7140 = !DILexicalBlockFile(scope: !7127, file: !911, discriminator: 3)
!7141 = !DILocation(line: 760, column: 13, scope: !7140)
!7142 = !DILocation(line: 761, column: 16, scope: !7143)
!7143 = distinct !DILexicalBlock(scope: !7127, file: !911, line: 761, column: 9)
!7144 = !DILocation(line: 761, column: 14, scope: !7143)
!7145 = !DILocation(line: 761, column: 21, scope: !7146)
!7146 = !DILexicalBlockFile(scope: !7147, file: !911, discriminator: 1)
!7147 = distinct !DILexicalBlock(scope: !7143, file: !911, line: 761, column: 9)
!7148 = !DILocation(line: 761, column: 25, scope: !7146)
!7149 = !DILocation(line: 761, column: 23, scope: !7146)
!7150 = !DILocation(line: 761, column: 9, scope: !7146)
!7151 = !DILocation(line: 762, column: 52, scope: !7147)
!7152 = !DILocation(line: 762, column: 28, scope: !7147)
!7153 = !DILocation(line: 762, column: 31, scope: !7147)
!7154 = !DILocation(line: 762, column: 22, scope: !7147)
!7155 = !DILocation(line: 762, column: 13, scope: !7147)
!7156 = !DILocation(line: 762, column: 25, scope: !7147)
!7157 = !DILocation(line: 761, column: 31, scope: !7158)
!7158 = !DILexicalBlockFile(scope: !7147, file: !911, discriminator: 2)
!7159 = !DILocation(line: 761, column: 9, scope: !7158)
!7160 = distinct !{!7160, !7161}
!7161 = !DILocation(line: 761, column: 9, scope: !7127)
!7162 = !DILocation(line: 763, column: 41, scope: !7127)
!7163 = !DILocation(line: 763, column: 9, scope: !7127)
!7164 = !DILocation(line: 763, column: 12, scope: !7127)
!7165 = !DILocation(line: 763, column: 38, scope: !7127)
!7166 = !DILocation(line: 764, column: 17, scope: !7127)
!7167 = !DILocation(line: 764, column: 20, scope: !7127)
!7168 = !DILocation(line: 764, column: 9, scope: !7127)
!7169 = !DILocation(line: 764, column: 67, scope: !7127)
!7170 = !DILocation(line: 764, column: 43, scope: !7127)
!7171 = !DILocation(line: 764, column: 46, scope: !7127)
!7172 = !DILocation(line: 765, column: 54, scope: !7127)
!7173 = !DILocation(line: 765, column: 57, scope: !7127)
!7174 = !DILocation(line: 765, column: 52, scope: !7127)
!7175 = !DILocation(line: 766, column: 5, scope: !7127)
!7176 = !DILocation(line: 769, column: 9, scope: !7177)
!7177 = distinct !DILexicalBlock(scope: !6944, file: !911, line: 769, column: 9)
!7178 = !DILocation(line: 769, column: 18, scope: !7177)
!7179 = !DILocation(line: 769, column: 9, scope: !6944)
!7180 = !DILocation(line: 770, column: 17, scope: !7181)
!7181 = distinct !DILexicalBlock(scope: !7177, file: !911, line: 769, column: 39)
!7182 = !DILocation(line: 770, column: 31, scope: !7181)
!7183 = !DILocation(line: 770, column: 34, scope: !7181)
!7184 = !DILocation(line: 770, column: 28, scope: !7181)
!7185 = !DILocation(line: 770, column: 16, scope: !7181)
!7186 = !DILocation(line: 770, column: 64, scope: !7187)
!7187 = !DILexicalBlockFile(scope: !7181, file: !911, discriminator: 1)
!7188 = !DILocation(line: 770, column: 67, scope: !7187)
!7189 = !DILocation(line: 770, column: 16, scope: !7187)
!7190 = !DILocation(line: 770, column: 97, scope: !7191)
!7191 = !DILexicalBlockFile(scope: !7181, file: !911, discriminator: 2)
!7192 = !DILocation(line: 770, column: 16, scope: !7191)
!7193 = !DILocation(line: 770, column: 16, scope: !7194)
!7194 = !DILexicalBlockFile(scope: !7181, file: !911, discriminator: 3)
!7195 = !DILocation(line: 770, column: 13, scope: !7194)
!7196 = !DILocation(line: 771, column: 16, scope: !7197)
!7197 = distinct !DILexicalBlock(scope: !7181, file: !911, line: 771, column: 9)
!7198 = !DILocation(line: 771, column: 14, scope: !7197)
!7199 = !DILocation(line: 771, column: 21, scope: !7200)
!7200 = !DILexicalBlockFile(scope: !7201, file: !911, discriminator: 1)
!7201 = distinct !DILexicalBlock(scope: !7197, file: !911, line: 771, column: 9)
!7202 = !DILocation(line: 771, column: 25, scope: !7200)
!7203 = !DILocation(line: 771, column: 23, scope: !7200)
!7204 = !DILocation(line: 771, column: 9, scope: !7200)
!7205 = !DILocation(line: 772, column: 52, scope: !7201)
!7206 = !DILocation(line: 772, column: 59, scope: !7201)
!7207 = !DILocation(line: 772, column: 57, scope: !7201)
!7208 = !DILocation(line: 772, column: 43, scope: !7201)
!7209 = !DILocation(line: 772, column: 37, scope: !7201)
!7210 = !DILocation(line: 772, column: 13, scope: !7201)
!7211 = !DILocation(line: 772, column: 16, scope: !7201)
!7212 = !DILocation(line: 772, column: 40, scope: !7201)
!7213 = !DILocation(line: 771, column: 31, scope: !7214)
!7214 = !DILexicalBlockFile(scope: !7201, file: !911, discriminator: 2)
!7215 = !DILocation(line: 771, column: 9, scope: !7214)
!7216 = distinct !{!7216, !7217}
!7217 = !DILocation(line: 771, column: 9, scope: !7181)
!7218 = !DILocation(line: 773, column: 13, scope: !7219)
!7219 = distinct !DILexicalBlock(scope: !7181, file: !911, line: 773, column: 13)
!7220 = !DILocation(line: 773, column: 19, scope: !7219)
!7221 = !DILocation(line: 773, column: 17, scope: !7219)
!7222 = !DILocation(line: 773, column: 13, scope: !7181)
!7223 = !DILocation(line: 774, column: 45, scope: !7224)
!7224 = distinct !DILexicalBlock(scope: !7219, file: !911, line: 773, column: 30)
!7225 = !DILocation(line: 774, column: 21, scope: !7224)
!7226 = !DILocation(line: 774, column: 24, scope: !7224)
!7227 = !DILocation(line: 774, column: 13, scope: !7224)
!7228 = !DILocation(line: 774, column: 61, scope: !7224)
!7229 = !DILocation(line: 774, column: 68, scope: !7224)
!7230 = !DILocation(line: 774, column: 66, scope: !7224)
!7231 = !DILocation(line: 774, column: 52, scope: !7224)
!7232 = !DILocation(line: 775, column: 58, scope: !7224)
!7233 = !DILocation(line: 775, column: 70, scope: !7224)
!7234 = !DILocation(line: 775, column: 68, scope: !7224)
!7235 = !DILocation(line: 775, column: 57, scope: !7224)
!7236 = !DILocation(line: 775, column: 55, scope: !7224)
!7237 = !DILocation(line: 776, column: 44, scope: !7224)
!7238 = !DILocation(line: 776, column: 13, scope: !7224)
!7239 = !DILocation(line: 776, column: 16, scope: !7224)
!7240 = !DILocation(line: 776, column: 42, scope: !7224)
!7241 = !DILocation(line: 777, column: 9, scope: !7224)
!7242 = !DILocation(line: 778, column: 5, scope: !7181)
!7243 = !DILocation(line: 779, column: 1, scope: !6944)
!7244 = distinct !DISubprogram(name: "adaptive_gain_control", scope: !911, file: !911, line: 502, type: !7245, isLocal: true, isDefinition: true, scopeLine: 505, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!7245 = !DISubroutineType(types: !7246)
!7246 = !{null, !937, !1953, !1953, !923, !938, !937}
!7247 = !DILocalVariable(name: "out", arg: 1, scope: !7244, file: !911, line: 502, type: !937)
!7248 = !DILocation(line: 502, column: 42, scope: !7244)
!7249 = !DILocalVariable(name: "in", arg: 2, scope: !7244, file: !911, line: 502, type: !1953)
!7250 = !DILocation(line: 502, column: 60, scope: !7244)
!7251 = !DILocalVariable(name: "speech_synth", arg: 3, scope: !7244, file: !911, line: 503, type: !1953)
!7252 = !DILocation(line: 503, column: 48, scope: !7244)
!7253 = !DILocalVariable(name: "size", arg: 4, scope: !7244, file: !911, line: 504, type: !923)
!7254 = !DILocation(line: 504, column: 39, scope: !7244)
!7255 = !DILocalVariable(name: "alpha", arg: 5, scope: !7244, file: !911, line: 504, type: !938)
!7256 = !DILocation(line: 504, column: 51, scope: !7244)
!7257 = !DILocalVariable(name: "gain_mem", arg: 6, scope: !7244, file: !911, line: 504, type: !937)
!7258 = !DILocation(line: 504, column: 65, scope: !7244)
!7259 = !DILocalVariable(name: "i", scope: !7244, file: !911, line: 506, type: !923)
!7260 = !DILocation(line: 506, column: 9, scope: !7244)
!7261 = !DILocalVariable(name: "speech_energy", scope: !7244, file: !911, line: 507, type: !938)
!7262 = !DILocation(line: 507, column: 11, scope: !7244)
!7263 = !DILocalVariable(name: "postfilter_energy", scope: !7244, file: !911, line: 507, type: !938)
!7264 = !DILocation(line: 507, column: 32, scope: !7244)
!7265 = !DILocalVariable(name: "gain_scale_factor", scope: !7244, file: !911, line: 507, type: !938)
!7266 = !DILocation(line: 507, column: 57, scope: !7244)
!7267 = !DILocalVariable(name: "mem", scope: !7244, file: !911, line: 508, type: !938)
!7268 = !DILocation(line: 508, column: 11, scope: !7244)
!7269 = !DILocation(line: 508, column: 18, scope: !7244)
!7270 = !DILocation(line: 508, column: 17, scope: !7244)
!7271 = !DILocation(line: 510, column: 12, scope: !7272)
!7272 = distinct !DILexicalBlock(scope: !7244, file: !911, line: 510, column: 5)
!7273 = !DILocation(line: 510, column: 10, scope: !7272)
!7274 = !DILocation(line: 510, column: 17, scope: !7275)
!7275 = !DILexicalBlockFile(scope: !7276, file: !911, discriminator: 1)
!7276 = distinct !DILexicalBlock(scope: !7272, file: !911, line: 510, column: 5)
!7277 = !DILocation(line: 510, column: 21, scope: !7275)
!7278 = !DILocation(line: 510, column: 19, scope: !7275)
!7279 = !DILocation(line: 510, column: 5, scope: !7275)
!7280 = !DILocation(line: 511, column: 45, scope: !7281)
!7281 = distinct !DILexicalBlock(scope: !7276, file: !911, line: 510, column: 32)
!7282 = !DILocation(line: 511, column: 32, scope: !7281)
!7283 = !DILocation(line: 511, column: 26, scope: !7281)
!7284 = !DILocation(line: 511, column: 23, scope: !7281)
!7285 = !DILocation(line: 512, column: 39, scope: !7281)
!7286 = !DILocation(line: 512, column: 36, scope: !7281)
!7287 = !DILocation(line: 512, column: 30, scope: !7281)
!7288 = !DILocation(line: 512, column: 27, scope: !7281)
!7289 = !DILocation(line: 513, column: 5, scope: !7281)
!7290 = !DILocation(line: 510, column: 28, scope: !7291)
!7291 = !DILexicalBlockFile(scope: !7276, file: !911, discriminator: 2)
!7292 = !DILocation(line: 510, column: 5, scope: !7291)
!7293 = distinct !{!7293, !7294}
!7294 = !DILocation(line: 510, column: 5, scope: !7244)
!7295 = !DILocation(line: 514, column: 25, scope: !7244)
!7296 = !DILocation(line: 514, column: 43, scope: !7244)
!7297 = !DILocation(line: 514, column: 25, scope: !7298)
!7298 = !DILexicalBlockFile(scope: !7244, file: !911, discriminator: 1)
!7299 = !DILocation(line: 515, column: 32, scope: !7244)
!7300 = !DILocation(line: 515, column: 30, scope: !7244)
!7301 = !DILocation(line: 515, column: 41, scope: !7244)
!7302 = !DILocation(line: 515, column: 39, scope: !7244)
!7303 = !DILocation(line: 515, column: 57, scope: !7244)
!7304 = !DILocation(line: 515, column: 55, scope: !7244)
!7305 = !DILocation(line: 514, column: 25, scope: !7306)
!7306 = !DILexicalBlockFile(scope: !7244, file: !911, discriminator: 2)
!7307 = !DILocation(line: 514, column: 25, scope: !7308)
!7308 = !DILexicalBlockFile(scope: !7244, file: !911, discriminator: 3)
!7309 = !DILocation(line: 514, column: 23, scope: !7308)
!7310 = !DILocation(line: 517, column: 12, scope: !7311)
!7311 = distinct !DILexicalBlock(scope: !7244, file: !911, line: 517, column: 5)
!7312 = !DILocation(line: 517, column: 10, scope: !7311)
!7313 = !DILocation(line: 517, column: 17, scope: !7314)
!7314 = !DILexicalBlockFile(scope: !7315, file: !911, discriminator: 1)
!7315 = distinct !DILexicalBlock(scope: !7311, file: !911, line: 517, column: 5)
!7316 = !DILocation(line: 517, column: 21, scope: !7314)
!7317 = !DILocation(line: 517, column: 19, scope: !7314)
!7318 = !DILocation(line: 517, column: 5, scope: !7314)
!7319 = !DILocation(line: 518, column: 15, scope: !7320)
!7320 = distinct !DILexicalBlock(scope: !7315, file: !911, line: 517, column: 32)
!7321 = !DILocation(line: 518, column: 23, scope: !7320)
!7322 = !DILocation(line: 518, column: 21, scope: !7320)
!7323 = !DILocation(line: 518, column: 29, scope: !7320)
!7324 = !DILocation(line: 518, column: 27, scope: !7320)
!7325 = !DILocation(line: 518, column: 13, scope: !7320)
!7326 = !DILocation(line: 519, column: 21, scope: !7320)
!7327 = !DILocation(line: 519, column: 18, scope: !7320)
!7328 = !DILocation(line: 519, column: 26, scope: !7320)
!7329 = !DILocation(line: 519, column: 24, scope: !7320)
!7330 = !DILocation(line: 519, column: 13, scope: !7320)
!7331 = !DILocation(line: 519, column: 9, scope: !7320)
!7332 = !DILocation(line: 519, column: 16, scope: !7320)
!7333 = !DILocation(line: 520, column: 5, scope: !7320)
!7334 = !DILocation(line: 517, column: 28, scope: !7335)
!7335 = !DILexicalBlockFile(scope: !7315, file: !911, discriminator: 2)
!7336 = !DILocation(line: 517, column: 5, scope: !7335)
!7337 = distinct !{!7337, !7338}
!7338 = !DILocation(line: 517, column: 5, scope: !7244)
!7339 = !DILocation(line: 522, column: 17, scope: !7244)
!7340 = !DILocation(line: 522, column: 6, scope: !7244)
!7341 = !DILocation(line: 522, column: 15, scope: !7244)
!7342 = !DILocation(line: 523, column: 1, scope: !7244)
!7343 = distinct !DISubprogram(name: "tilt_factor", scope: !911, file: !911, line: 589, type: !7344, isLocal: true, isDefinition: true, scopeLine: 590, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!7344 = !DISubroutineType(types: !7345)
!7345 = !{!938, !1953, !923}
!7346 = !DILocalVariable(name: "lpcs", arg: 1, scope: !7343, file: !911, line: 589, type: !1953)
!7347 = !DILocation(line: 589, column: 39, scope: !7343)
!7348 = !DILocalVariable(name: "n_lpcs", arg: 2, scope: !7343, file: !911, line: 589, type: !923)
!7349 = !DILocation(line: 589, column: 49, scope: !7343)
!7350 = !DILocalVariable(name: "rh0", scope: !7343, file: !911, line: 591, type: !938)
!7351 = !DILocation(line: 591, column: 11, scope: !7343)
!7352 = !DILocalVariable(name: "rh1", scope: !7343, file: !911, line: 591, type: !938)
!7353 = !DILocation(line: 591, column: 16, scope: !7343)
!7354 = !DILocation(line: 593, column: 46, scope: !7343)
!7355 = !DILocation(line: 593, column: 52, scope: !7343)
!7356 = !DILocation(line: 593, column: 58, scope: !7343)
!7357 = !DILocation(line: 593, column: 17, scope: !7343)
!7358 = !DILocation(line: 593, column: 15, scope: !7343)
!7359 = !DILocation(line: 593, column: 11, scope: !7343)
!7360 = !DILocation(line: 593, column: 9, scope: !7343)
!7361 = !DILocation(line: 594, column: 11, scope: !7343)
!7362 = !DILocation(line: 594, column: 50, scope: !7343)
!7363 = !DILocation(line: 594, column: 57, scope: !7343)
!7364 = !DILocation(line: 594, column: 66, scope: !7343)
!7365 = !DILocation(line: 594, column: 73, scope: !7343)
!7366 = !DILocation(line: 594, column: 21, scope: !7343)
!7367 = !DILocation(line: 594, column: 19, scope: !7343)
!7368 = !DILocation(line: 594, column: 9, scope: !7343)
!7369 = !DILocation(line: 596, column: 12, scope: !7343)
!7370 = !DILocation(line: 596, column: 18, scope: !7343)
!7371 = !DILocation(line: 596, column: 16, scope: !7343)
!7372 = !DILocation(line: 596, column: 5, scope: !7343)
!7373 = distinct !DISubprogram(name: "calc_input_response", scope: !911, file: !911, line: 602, type: !7374, isLocal: true, isDefinition: true, scopeLine: 604, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1668)
!7374 = !DISubroutineType(types: !7375)
!7375 = !{null, !1812, !937, !923, !937, !923}
!7376 = !DILocation(line: 127, column: 87, scope: !3702, inlinedAt: !7377)
!7377 = distinct !DILocation(line: 668, column: 21, scope: !7378)
!7378 = distinct !DILexicalBlock(scope: !7379, file: !911, line: 661, column: 24)
!7379 = distinct !DILexicalBlock(scope: !7380, file: !911, line: 661, column: 5)
!7380 = distinct !DILexicalBlock(scope: !7373, file: !911, line: 661, column: 5)
!7381 = !DILocation(line: 127, column: 94, scope: !3702, inlinedAt: !7377)
!7382 = !DILocation(line: 127, column: 104, scope: !3702, inlinedAt: !7377)
!7383 = !DILocation(line: 127, column: 87, scope: !3702, inlinedAt: !7384)
!7384 = distinct !DILocation(line: 662, column: 21, scope: !7378)
!7385 = !DILocation(line: 127, column: 94, scope: !3702, inlinedAt: !7384)
!7386 = !DILocation(line: 127, column: 104, scope: !3702, inlinedAt: !7384)
!7387 = !DILocation(line: 127, column: 87, scope: !3702, inlinedAt: !7388)
!7388 = distinct !DILocation(line: 659, column: 17, scope: !7373)
!7389 = !DILocation(line: 127, column: 94, scope: !3702, inlinedAt: !7388)
!7390 = !DILocation(line: 127, column: 104, scope: !3702, inlinedAt: !7388)
!7391 = !DILocation(line: 127, column: 87, scope: !3702, inlinedAt: !7392)
!7392 = distinct !DILocation(line: 657, column: 17, scope: !7373)
!7393 = !DILocation(line: 127, column: 94, scope: !3702, inlinedAt: !7392)
!7394 = !DILocation(line: 127, column: 104, scope: !3702, inlinedAt: !7392)
!7395 = !DILocalVariable(name: "s", arg: 1, scope: !7373, file: !911, line: 602, type: !1812)
!7396 = !DILocation(line: 602, column: 50, scope: !7373)
!7397 = !DILocalVariable(name: "lpcs", arg: 2, scope: !7373, file: !911, line: 602, type: !937)
!7398 = !DILocation(line: 602, column: 60, scope: !7373)
!7399 = !DILocalVariable(name: "fcb_type", arg: 3, scope: !7373, file: !911, line: 603, type: !923)
!7400 = !DILocation(line: 603, column: 37, scope: !7373)
!7401 = !DILocalVariable(name: "coeffs", arg: 4, scope: !7373, file: !911, line: 603, type: !937)
!7402 = !DILocation(line: 603, column: 54, scope: !7373)
!7403 = !DILocalVariable(name: "remainder", arg: 5, scope: !7373, file: !911, line: 603, type: !923)
!7404 = !DILocation(line: 603, column: 66, scope: !7373)
!7405 = !DILocalVariable(name: "last_coeff", scope: !7373, file: !911, line: 605, type: !938)
!7406 = !DILocation(line: 605, column: 11, scope: !7373)
!7407 = !DILocalVariable(name: "min", scope: !7373, file: !911, line: 605, type: !938)
!7408 = !DILocation(line: 605, column: 23, scope: !7373)
!7409 = !DILocalVariable(name: "max", scope: !7373, file: !911, line: 605, type: !938)
!7410 = !DILocation(line: 605, column: 35, scope: !7373)
!7411 = !DILocalVariable(name: "irange", scope: !7373, file: !911, line: 606, type: !938)
!7412 = !DILocation(line: 606, column: 11, scope: !7373)
!7413 = !DILocalVariable(name: "angle_mul", scope: !7373, file: !911, line: 606, type: !938)
!7414 = !DILocation(line: 606, column: 19, scope: !7373)
!7415 = !DILocalVariable(name: "gain_mul", scope: !7373, file: !911, line: 606, type: !938)
!7416 = !DILocation(line: 606, column: 30, scope: !7373)
!7417 = !DILocalVariable(name: "range", scope: !7373, file: !911, line: 606, type: !938)
!7418 = !DILocation(line: 606, column: 40, scope: !7373)
!7419 = !DILocalVariable(name: "sq", scope: !7373, file: !911, line: 606, type: !938)
!7420 = !DILocation(line: 606, column: 47, scope: !7373)
!7421 = !DILocalVariable(name: "n", scope: !7373, file: !911, line: 607, type: !923)
!7422 = !DILocation(line: 607, column: 9, scope: !7373)
!7423 = !DILocalVariable(name: "idx", scope: !7373, file: !911, line: 607, type: !923)
!7424 = !DILocation(line: 607, column: 12, scope: !7373)
!7425 = !DILocation(line: 610, column: 5, scope: !7373)
!7426 = !DILocation(line: 610, column: 8, scope: !7373)
!7427 = !DILocation(line: 610, column: 13, scope: !7373)
!7428 = !DILocation(line: 610, column: 24, scope: !7373)
!7429 = !DILocation(line: 610, column: 27, scope: !7373)
!7430 = !DILocation(line: 610, column: 33, scope: !7373)
!7431 = !DILocation(line: 615, column: 5, scope: !7373)
!7432 = distinct !{!7432, !7431}
!7433 = !DILocalVariable(name: "tmp", scope: !7434, file: !911, line: 615, type: !938)
!7434 = distinct !DILexicalBlock(scope: !7373, file: !911, line: 615, column: 8)
!7435 = !DILocation(line: 615, column: 16, scope: !7434)
!7436 = !DILocation(line: 615, column: 29, scope: !7437)
!7437 = !DILexicalBlockFile(scope: !7434, file: !911, discriminator: 1)
!7438 = !DILocation(line: 615, column: 39, scope: !7437)
!7439 = !DILocation(line: 615, column: 37, scope: !7437)
!7440 = !DILocation(line: 615, column: 22, scope: !7437)
!7441 = !DILocation(line: 615, column: 16, scope: !7437)
!7442 = !DILocation(line: 615, column: 62, scope: !7437)
!7443 = !DILocation(line: 615, column: 60, scope: !7437)
!7444 = !DILocation(line: 615, column: 75, scope: !7437)
!7445 = !DILocation(line: 615, column: 83, scope: !7437)
!7446 = !DILocation(line: 615, column: 80, scope: !7437)
!7447 = !DILocation(line: 615, column: 74, scope: !7437)
!7448 = !DILocation(line: 615, column: 91, scope: !7449)
!7449 = !DILexicalBlockFile(scope: !7434, file: !911, discriminator: 2)
!7450 = !DILocation(line: 615, column: 74, scope: !7449)
!7451 = !DILocation(line: 615, column: 99, scope: !7452)
!7452 = !DILexicalBlockFile(scope: !7434, file: !911, discriminator: 3)
!7453 = !DILocation(line: 615, column: 74, scope: !7452)
!7454 = !DILocation(line: 615, column: 74, scope: !7455)
!7455 = !DILexicalBlockFile(scope: !7434, file: !911, discriminator: 4)
!7456 = !DILocation(line: 615, column: 71, scope: !7455)
!7457 = !DILocation(line: 615, column: 114, scope: !7455)
!7458 = !DILocation(line: 615, column: 122, scope: !7455)
!7459 = !DILocation(line: 615, column: 119, scope: !7455)
!7460 = !DILocation(line: 615, column: 113, scope: !7455)
!7461 = !DILocation(line: 615, column: 130, scope: !7462)
!7462 = !DILexicalBlockFile(scope: !7434, file: !911, discriminator: 5)
!7463 = !DILocation(line: 615, column: 113, scope: !7462)
!7464 = !DILocation(line: 615, column: 138, scope: !7465)
!7465 = !DILexicalBlockFile(scope: !7434, file: !911, discriminator: 6)
!7466 = !DILocation(line: 615, column: 113, scope: !7465)
!7467 = !DILocation(line: 615, column: 113, scope: !7468)
!7468 = !DILexicalBlockFile(scope: !7434, file: !911, discriminator: 7)
!7469 = !DILocation(line: 615, column: 110, scope: !7468)
!7470 = !DILocation(line: 615, column: 145, scope: !7468)
!7471 = !DILocation(line: 616, column: 12, scope: !7472)
!7472 = distinct !DILexicalBlock(scope: !7373, file: !911, line: 616, column: 5)
!7473 = !DILocation(line: 616, column: 10, scope: !7472)
!7474 = !DILocation(line: 616, column: 17, scope: !7475)
!7475 = !DILexicalBlockFile(scope: !7476, file: !911, discriminator: 1)
!7476 = distinct !DILexicalBlock(scope: !7472, file: !911, line: 616, column: 5)
!7477 = !DILocation(line: 616, column: 19, scope: !7475)
!7478 = !DILocation(line: 616, column: 5, scope: !7475)
!7479 = !DILocation(line: 617, column: 9, scope: !7476)
!7480 = distinct !{!7480, !7479}
!7481 = !DILocalVariable(name: "tmp", scope: !7482, file: !911, line: 617, type: !938)
!7482 = distinct !DILexicalBlock(scope: !7476, file: !911, line: 617, column: 12)
!7483 = !DILocation(line: 617, column: 20, scope: !7482)
!7484 = !DILocation(line: 617, column: 38, scope: !7485)
!7485 = !DILexicalBlockFile(scope: !7482, file: !911, discriminator: 1)
!7486 = !DILocation(line: 617, column: 40, scope: !7485)
!7487 = !DILocation(line: 617, column: 33, scope: !7485)
!7488 = !DILocation(line: 617, column: 52, scope: !7485)
!7489 = !DILocation(line: 617, column: 54, scope: !7485)
!7490 = !DILocation(line: 617, column: 47, scope: !7485)
!7491 = !DILocation(line: 617, column: 45, scope: !7485)
!7492 = !DILocation(line: 617, column: 66, scope: !7485)
!7493 = !DILocation(line: 617, column: 68, scope: !7485)
!7494 = !DILocation(line: 617, column: 72, scope: !7485)
!7495 = !DILocation(line: 617, column: 61, scope: !7485)
!7496 = !DILocation(line: 617, column: 84, scope: !7485)
!7497 = !DILocation(line: 617, column: 86, scope: !7485)
!7498 = !DILocation(line: 617, column: 90, scope: !7485)
!7499 = !DILocation(line: 617, column: 79, scope: !7485)
!7500 = !DILocation(line: 617, column: 77, scope: !7485)
!7501 = !DILocation(line: 617, column: 59, scope: !7485)
!7502 = !DILocation(line: 617, column: 26, scope: !7485)
!7503 = !DILocation(line: 617, column: 20, scope: !7485)
!7504 = !DILocation(line: 617, column: 107, scope: !7485)
!7505 = !DILocation(line: 617, column: 102, scope: !7485)
!7506 = !DILocation(line: 617, column: 97, scope: !7485)
!7507 = !DILocation(line: 617, column: 105, scope: !7485)
!7508 = !DILocation(line: 617, column: 120, scope: !7485)
!7509 = !DILocation(line: 617, column: 128, scope: !7485)
!7510 = !DILocation(line: 617, column: 125, scope: !7485)
!7511 = !DILocation(line: 617, column: 119, scope: !7485)
!7512 = !DILocation(line: 617, column: 136, scope: !7513)
!7513 = !DILexicalBlockFile(scope: !7482, file: !911, discriminator: 2)
!7514 = !DILocation(line: 617, column: 119, scope: !7513)
!7515 = !DILocation(line: 617, column: 144, scope: !7516)
!7516 = !DILexicalBlockFile(scope: !7482, file: !911, discriminator: 3)
!7517 = !DILocation(line: 617, column: 119, scope: !7516)
!7518 = !DILocation(line: 617, column: 119, scope: !7519)
!7519 = !DILexicalBlockFile(scope: !7482, file: !911, discriminator: 4)
!7520 = !DILocation(line: 617, column: 116, scope: !7519)
!7521 = !DILocation(line: 617, column: 159, scope: !7519)
!7522 = !DILocation(line: 617, column: 167, scope: !7519)
!7523 = !DILocation(line: 617, column: 164, scope: !7519)
!7524 = !DILocation(line: 617, column: 158, scope: !7519)
!7525 = !DILocation(line: 617, column: 175, scope: !7526)
!7526 = !DILexicalBlockFile(scope: !7482, file: !911, discriminator: 5)
!7527 = !DILocation(line: 617, column: 158, scope: !7526)
!7528 = !DILocation(line: 617, column: 183, scope: !7529)
!7529 = !DILexicalBlockFile(scope: !7482, file: !911, discriminator: 6)
!7530 = !DILocation(line: 617, column: 158, scope: !7529)
!7531 = !DILocation(line: 617, column: 158, scope: !7532)
!7532 = !DILexicalBlockFile(scope: !7482, file: !911, discriminator: 7)
!7533 = !DILocation(line: 617, column: 155, scope: !7532)
!7534 = !DILocation(line: 617, column: 190, scope: !7532)
!7535 = !DILocation(line: 617, column: 190, scope: !7536)
!7536 = !DILexicalBlockFile(scope: !7482, file: !911, discriminator: 8)
!7537 = !DILocation(line: 616, column: 26, scope: !7538)
!7538 = !DILexicalBlockFile(scope: !7476, file: !911, discriminator: 2)
!7539 = !DILocation(line: 616, column: 5, scope: !7538)
!7540 = distinct !{!7540, !7541}
!7541 = !DILocation(line: 616, column: 5, scope: !7373)
!7542 = !DILocation(line: 619, column: 5, scope: !7373)
!7543 = distinct !{!7543, !7542}
!7544 = !DILocalVariable(name: "tmp", scope: !7545, file: !911, line: 619, type: !938)
!7545 = distinct !DILexicalBlock(scope: !7373, file: !911, line: 619, column: 8)
!7546 = !DILocation(line: 619, column: 16, scope: !7545)
!7547 = !DILocation(line: 619, column: 29, scope: !7548)
!7548 = !DILexicalBlockFile(scope: !7545, file: !911, discriminator: 1)
!7549 = !DILocation(line: 619, column: 39, scope: !7548)
!7550 = !DILocation(line: 619, column: 37, scope: !7548)
!7551 = !DILocation(line: 619, column: 22, scope: !7548)
!7552 = !DILocation(line: 619, column: 16, scope: !7548)
!7553 = !DILocation(line: 619, column: 59, scope: !7548)
!7554 = !DILocation(line: 619, column: 49, scope: !7548)
!7555 = !DILocation(line: 619, column: 57, scope: !7548)
!7556 = !DILocation(line: 619, column: 72, scope: !7548)
!7557 = !DILocation(line: 619, column: 80, scope: !7548)
!7558 = !DILocation(line: 619, column: 77, scope: !7548)
!7559 = !DILocation(line: 619, column: 71, scope: !7548)
!7560 = !DILocation(line: 619, column: 88, scope: !7561)
!7561 = !DILexicalBlockFile(scope: !7545, file: !911, discriminator: 2)
!7562 = !DILocation(line: 619, column: 71, scope: !7561)
!7563 = !DILocation(line: 619, column: 96, scope: !7564)
!7564 = !DILexicalBlockFile(scope: !7545, file: !911, discriminator: 3)
!7565 = !DILocation(line: 619, column: 71, scope: !7564)
!7566 = !DILocation(line: 619, column: 71, scope: !7567)
!7567 = !DILexicalBlockFile(scope: !7545, file: !911, discriminator: 4)
!7568 = !DILocation(line: 619, column: 68, scope: !7567)
!7569 = !DILocation(line: 619, column: 111, scope: !7567)
!7570 = !DILocation(line: 619, column: 119, scope: !7567)
!7571 = !DILocation(line: 619, column: 116, scope: !7567)
!7572 = !DILocation(line: 619, column: 110, scope: !7567)
!7573 = !DILocation(line: 619, column: 127, scope: !7574)
!7574 = !DILexicalBlockFile(scope: !7545, file: !911, discriminator: 5)
!7575 = !DILocation(line: 619, column: 110, scope: !7574)
!7576 = !DILocation(line: 619, column: 135, scope: !7577)
!7577 = !DILexicalBlockFile(scope: !7545, file: !911, discriminator: 6)
!7578 = !DILocation(line: 619, column: 110, scope: !7577)
!7579 = !DILocation(line: 619, column: 110, scope: !7580)
!7580 = !DILexicalBlockFile(scope: !7545, file: !911, discriminator: 7)
!7581 = !DILocation(line: 619, column: 107, scope: !7580)
!7582 = !DILocation(line: 619, column: 142, scope: !7580)
!7583 = !DILocation(line: 621, column: 13, scope: !7373)
!7584 = !DILocation(line: 621, column: 19, scope: !7373)
!7585 = !DILocation(line: 621, column: 17, scope: !7373)
!7586 = !DILocation(line: 621, column: 11, scope: !7373)
!7587 = !DILocation(line: 622, column: 16, scope: !7373)
!7588 = !DILocation(line: 622, column: 5, scope: !7373)
!7589 = !DILocation(line: 622, column: 14, scope: !7373)
!7590 = !DILocation(line: 629, column: 21, scope: !7373)
!7591 = !DILocation(line: 629, column: 19, scope: !7373)
!7592 = !DILocation(line: 629, column: 14, scope: !7373)
!7593 = !DILocation(line: 629, column: 12, scope: !7373)
!7594 = !DILocation(line: 630, column: 16, scope: !7373)
!7595 = !DILocation(line: 630, column: 25, scope: !7373)
!7596 = !DILocation(line: 630, column: 34, scope: !7373)
!7597 = !DILocation(line: 630, column: 22, scope: !7373)
!7598 = !DILocation(line: 630, column: 14, scope: !7373)
!7599 = !DILocation(line: 632, column: 17, scope: !7373)
!7600 = !DILocation(line: 632, column: 26, scope: !7373)
!7601 = !DILocation(line: 632, column: 15, scope: !7373)
!7602 = !DILocation(line: 633, column: 12, scope: !7603)
!7603 = distinct !DILexicalBlock(scope: !7373, file: !911, line: 633, column: 5)
!7604 = !DILocation(line: 633, column: 10, scope: !7603)
!7605 = !DILocation(line: 633, column: 17, scope: !7606)
!7606 = !DILexicalBlockFile(scope: !7607, file: !911, discriminator: 1)
!7607 = distinct !DILexicalBlock(scope: !7603, file: !911, line: 633, column: 5)
!7608 = !DILocation(line: 633, column: 19, scope: !7606)
!7609 = !DILocation(line: 633, column: 5, scope: !7606)
!7610 = !DILocalVariable(name: "pwr", scope: !7611, file: !911, line: 634, type: !938)
!7611 = distinct !DILexicalBlock(scope: !7607, file: !911, line: 633, column: 31)
!7612 = !DILocation(line: 634, column: 15, scope: !7611)
!7613 = !DILocation(line: 636, column: 30, scope: !7611)
!7614 = !DILocation(line: 636, column: 41, scope: !7611)
!7615 = !DILocation(line: 636, column: 36, scope: !7611)
!7616 = !DILocation(line: 636, column: 34, scope: !7611)
!7617 = !DILocation(line: 636, column: 47, scope: !7611)
!7618 = !DILocation(line: 636, column: 45, scope: !7611)
!7619 = !DILocation(line: 636, column: 29, scope: !7611)
!7620 = !DILocation(line: 636, column: 23, scope: !7611)
!7621 = !DILocation(line: 636, column: 55, scope: !7611)
!7622 = !DILocation(line: 636, column: 20, scope: !7611)
!7623 = !DILocation(line: 636, column: 16, scope: !7611)
!7624 = !DILocation(line: 636, column: 16, scope: !7625)
!7625 = !DILexicalBlockFile(scope: !7611, file: !911, discriminator: 1)
!7626 = !DILocation(line: 636, column: 76, scope: !7627)
!7627 = !DILexicalBlockFile(scope: !7611, file: !911, discriminator: 2)
!7628 = !DILocation(line: 636, column: 87, scope: !7627)
!7629 = !DILocation(line: 636, column: 82, scope: !7627)
!7630 = !DILocation(line: 636, column: 80, scope: !7627)
!7631 = !DILocation(line: 636, column: 93, scope: !7627)
!7632 = !DILocation(line: 636, column: 91, scope: !7627)
!7633 = !DILocation(line: 636, column: 75, scope: !7627)
!7634 = !DILocation(line: 636, column: 69, scope: !7627)
!7635 = !DILocation(line: 636, column: 101, scope: !7627)
!7636 = !DILocation(line: 636, column: 16, scope: !7627)
!7637 = !DILocation(line: 636, column: 16, scope: !7638)
!7638 = !DILexicalBlockFile(scope: !7611, file: !911, discriminator: 3)
!7639 = !DILocation(line: 636, column: 15, scope: !7638)
!7640 = !DILocation(line: 636, column: 13, scope: !7638)
!7641 = !DILocation(line: 637, column: 65, scope: !7611)
!7642 = !DILocation(line: 637, column: 15, scope: !7611)
!7643 = !DILocation(line: 637, column: 44, scope: !7611)
!7644 = !DILocation(line: 637, column: 47, scope: !7611)
!7645 = !DILocation(line: 637, column: 13, scope: !7611)
!7646 = !DILocation(line: 638, column: 19, scope: !7611)
!7647 = !DILocation(line: 638, column: 31, scope: !7611)
!7648 = !DILocation(line: 638, column: 29, scope: !7611)
!7649 = !DILocation(line: 638, column: 14, scope: !7611)
!7650 = !DILocation(line: 638, column: 9, scope: !7611)
!7651 = !DILocation(line: 638, column: 17, scope: !7611)
!7652 = !DILocation(line: 641, column: 16, scope: !7611)
!7653 = !DILocation(line: 641, column: 22, scope: !7611)
!7654 = !DILocation(line: 641, column: 20, scope: !7611)
!7655 = !DILocation(line: 641, column: 31, scope: !7611)
!7656 = !DILocation(line: 641, column: 41, scope: !7611)
!7657 = !DILocation(line: 641, column: 15, scope: !7611)
!7658 = !DILocation(line: 641, column: 13, scope: !7611)
!7659 = !DILocation(line: 642, column: 13, scope: !7660)
!7660 = distinct !DILexicalBlock(scope: !7611, file: !911, line: 642, column: 13)
!7661 = !DILocation(line: 642, column: 17, scope: !7660)
!7662 = !DILocation(line: 642, column: 13, scope: !7611)
!7663 = !DILocation(line: 643, column: 25, scope: !7664)
!7664 = distinct !DILexicalBlock(scope: !7660, file: !911, line: 642, column: 24)
!7665 = !DILocation(line: 644, column: 41, scope: !7664)
!7666 = !DILocation(line: 644, column: 45, scope: !7664)
!7667 = !DILocation(line: 644, column: 25, scope: !7664)
!7668 = !DILocation(line: 643, column: 52, scope: !7664)
!7669 = !DILocation(line: 643, column: 20, scope: !7664)
!7670 = !DILocation(line: 643, column: 13, scope: !7664)
!7671 = !DILocation(line: 643, column: 23, scope: !7664)
!7672 = !DILocation(line: 645, column: 9, scope: !7664)
!7673 = !DILocation(line: 646, column: 55, scope: !7660)
!7674 = !DILocation(line: 646, column: 52, scope: !7660)
!7675 = !DILocation(line: 646, column: 48, scope: !7660)
!7676 = !DILocation(line: 646, column: 48, scope: !7677)
!7677 = !DILexicalBlockFile(scope: !7660, file: !911, discriminator: 1)
!7678 = !DILocation(line: 646, column: 69, scope: !7679)
!7679 = !DILexicalBlockFile(scope: !7660, file: !911, discriminator: 2)
!7680 = !DILocation(line: 646, column: 48, scope: !7679)
!7681 = !DILocation(line: 646, column: 48, scope: !7682)
!7682 = !DILexicalBlockFile(scope: !7660, file: !911, discriminator: 3)
!7683 = !DILocation(line: 646, column: 25, scope: !7682)
!7684 = !DILocation(line: 646, column: 20, scope: !7682)
!7685 = !DILocation(line: 646, column: 13, scope: !7682)
!7686 = !DILocation(line: 646, column: 23, scope: !7682)
!7687 = !DILocation(line: 647, column: 5, scope: !7611)
!7688 = !DILocation(line: 633, column: 27, scope: !7689)
!7689 = !DILexicalBlockFile(scope: !7607, file: !911, discriminator: 2)
!7690 = !DILocation(line: 633, column: 5, scope: !7689)
!7691 = distinct !{!7691, !7692}
!7692 = !DILocation(line: 633, column: 5, scope: !7373)
!7693 = !DILocation(line: 653, column: 5, scope: !7373)
!7694 = !DILocation(line: 653, column: 8, scope: !7373)
!7695 = !DILocation(line: 653, column: 12, scope: !7373)
!7696 = !DILocation(line: 653, column: 22, scope: !7373)
!7697 = !DILocation(line: 653, column: 25, scope: !7373)
!7698 = !DILocation(line: 653, column: 30, scope: !7373)
!7699 = !DILocation(line: 654, column: 5, scope: !7373)
!7700 = !DILocation(line: 654, column: 8, scope: !7373)
!7701 = !DILocation(line: 654, column: 12, scope: !7373)
!7702 = !DILocation(line: 654, column: 22, scope: !7373)
!7703 = !DILocation(line: 654, column: 25, scope: !7373)
!7704 = !DILocation(line: 654, column: 30, scope: !7373)
!7705 = !DILocation(line: 657, column: 27, scope: !7373)
!7706 = !DILocation(line: 657, column: 17, scope: !7373)
!7707 = !DILocation(line: 132, column: 9, scope: !3724, inlinedAt: !7392)
!7708 = !DILocation(line: 132, column: 13, scope: !3724, inlinedAt: !7392)
!7709 = !DILocation(line: 132, column: 11, scope: !3724, inlinedAt: !7392)
!7710 = !DILocation(line: 132, column: 9, scope: !3702, inlinedAt: !7392)
!7711 = !DILocation(line: 132, column: 26, scope: !3729, inlinedAt: !7392)
!7712 = !DILocation(line: 132, column: 19, scope: !3729, inlinedAt: !7392)
!7713 = !DILocation(line: 133, column: 14, scope: !3732, inlinedAt: !7392)
!7714 = !DILocation(line: 133, column: 18, scope: !3732, inlinedAt: !7392)
!7715 = !DILocation(line: 133, column: 16, scope: !3732, inlinedAt: !7392)
!7716 = !DILocation(line: 133, column: 14, scope: !3724, inlinedAt: !7392)
!7717 = !DILocation(line: 133, column: 31, scope: !3737, inlinedAt: !7392)
!7718 = !DILocation(line: 133, column: 24, scope: !3737, inlinedAt: !7392)
!7719 = !DILocation(line: 134, column: 17, scope: !3732, inlinedAt: !7392)
!7720 = !DILocation(line: 134, column: 10, scope: !3732, inlinedAt: !7392)
!7721 = !DILocation(line: 135, column: 1, scope: !3702, inlinedAt: !7392)
!7722 = !DILocation(line: 657, column: 15, scope: !7373)
!7723 = !DILocation(line: 657, column: 9, scope: !7373)
!7724 = !DILocation(line: 658, column: 17, scope: !7373)
!7725 = !DILocation(line: 658, column: 36, scope: !7373)
!7726 = !DILocation(line: 658, column: 29, scope: !7373)
!7727 = !DILocation(line: 658, column: 32, scope: !7373)
!7728 = !DILocation(line: 658, column: 27, scope: !7373)
!7729 = !DILocation(line: 658, column: 5, scope: !7373)
!7730 = !DILocation(line: 658, column: 15, scope: !7373)
!7731 = !DILocation(line: 659, column: 27, scope: !7373)
!7732 = !DILocation(line: 659, column: 42, scope: !7373)
!7733 = !DILocation(line: 659, column: 40, scope: !7373)
!7734 = !DILocation(line: 659, column: 36, scope: !7373)
!7735 = !DILocation(line: 659, column: 17, scope: !7373)
!7736 = !DILocation(line: 132, column: 9, scope: !3724, inlinedAt: !7388)
!7737 = !DILocation(line: 132, column: 13, scope: !3724, inlinedAt: !7388)
!7738 = !DILocation(line: 132, column: 11, scope: !3724, inlinedAt: !7388)
!7739 = !DILocation(line: 132, column: 9, scope: !3702, inlinedAt: !7388)
!7740 = !DILocation(line: 132, column: 26, scope: !3729, inlinedAt: !7388)
!7741 = !DILocation(line: 132, column: 19, scope: !3729, inlinedAt: !7388)
!7742 = !DILocation(line: 133, column: 14, scope: !3732, inlinedAt: !7388)
!7743 = !DILocation(line: 133, column: 18, scope: !3732, inlinedAt: !7388)
!7744 = !DILocation(line: 133, column: 16, scope: !3732, inlinedAt: !7388)
!7745 = !DILocation(line: 133, column: 14, scope: !3724, inlinedAt: !7388)
!7746 = !DILocation(line: 133, column: 31, scope: !3737, inlinedAt: !7388)
!7747 = !DILocation(line: 133, column: 24, scope: !3737, inlinedAt: !7388)
!7748 = !DILocation(line: 134, column: 17, scope: !3732, inlinedAt: !7388)
!7749 = !DILocation(line: 134, column: 10, scope: !3732, inlinedAt: !7388)
!7750 = !DILocation(line: 135, column: 1, scope: !3702, inlinedAt: !7388)
!7751 = !DILocation(line: 659, column: 15, scope: !7373)
!7752 = !DILocation(line: 659, column: 9, scope: !7373)
!7753 = !DILocation(line: 660, column: 18, scope: !7373)
!7754 = !DILocation(line: 660, column: 38, scope: !7373)
!7755 = !DILocation(line: 660, column: 31, scope: !7373)
!7756 = !DILocation(line: 660, column: 34, scope: !7373)
!7757 = !DILocation(line: 660, column: 29, scope: !7373)
!7758 = !DILocation(line: 660, column: 16, scope: !7373)
!7759 = !DILocation(line: 661, column: 12, scope: !7380)
!7760 = !DILocation(line: 661, column: 10, scope: !7380)
!7761 = !DILocation(line: 662, column: 32, scope: !7378)
!7762 = !DILocation(line: 662, column: 31, scope: !7378)
!7763 = !DILocation(line: 662, column: 52, scope: !7378)
!7764 = !DILocation(line: 662, column: 54, scope: !7378)
!7765 = !DILocation(line: 662, column: 47, scope: !7378)
!7766 = !DILocation(line: 662, column: 45, scope: !7378)
!7767 = !DILocation(line: 662, column: 41, scope: !7378)
!7768 = !DILocation(line: 662, column: 21, scope: !7378)
!7769 = !DILocation(line: 132, column: 9, scope: !3724, inlinedAt: !7384)
!7770 = !DILocation(line: 132, column: 13, scope: !3724, inlinedAt: !7384)
!7771 = !DILocation(line: 132, column: 11, scope: !3724, inlinedAt: !7384)
!7772 = !DILocation(line: 132, column: 9, scope: !3702, inlinedAt: !7384)
!7773 = !DILocation(line: 132, column: 26, scope: !3729, inlinedAt: !7384)
!7774 = !DILocation(line: 132, column: 19, scope: !3729, inlinedAt: !7384)
!7775 = !DILocation(line: 133, column: 14, scope: !3732, inlinedAt: !7384)
!7776 = !DILocation(line: 133, column: 18, scope: !3732, inlinedAt: !7384)
!7777 = !DILocation(line: 133, column: 16, scope: !3732, inlinedAt: !7384)
!7778 = !DILocation(line: 133, column: 14, scope: !3724, inlinedAt: !7384)
!7779 = !DILocation(line: 133, column: 31, scope: !3737, inlinedAt: !7384)
!7780 = !DILocation(line: 133, column: 24, scope: !3737, inlinedAt: !7384)
!7781 = !DILocation(line: 134, column: 17, scope: !3732, inlinedAt: !7384)
!7782 = !DILocation(line: 134, column: 10, scope: !3732, inlinedAt: !7384)
!7783 = !DILocation(line: 135, column: 1, scope: !3702, inlinedAt: !7384)
!7784 = !DILocation(line: 662, column: 19, scope: !7378)
!7785 = !DILocation(line: 662, column: 13, scope: !7378)
!7786 = !DILocation(line: 663, column: 36, scope: !7378)
!7787 = !DILocation(line: 663, column: 29, scope: !7378)
!7788 = !DILocation(line: 663, column: 48, scope: !7378)
!7789 = !DILocation(line: 663, column: 41, scope: !7378)
!7790 = !DILocation(line: 663, column: 44, scope: !7378)
!7791 = !DILocation(line: 663, column: 39, scope: !7378)
!7792 = !DILocation(line: 663, column: 16, scope: !7378)
!7793 = !DILocation(line: 663, column: 18, scope: !7378)
!7794 = !DILocation(line: 663, column: 22, scope: !7378)
!7795 = !DILocation(line: 663, column: 9, scope: !7378)
!7796 = !DILocation(line: 663, column: 27, scope: !7378)
!7797 = !DILocation(line: 664, column: 32, scope: !7378)
!7798 = !DILocation(line: 664, column: 25, scope: !7378)
!7799 = !DILocation(line: 664, column: 44, scope: !7378)
!7800 = !DILocation(line: 664, column: 37, scope: !7378)
!7801 = !DILocation(line: 664, column: 40, scope: !7378)
!7802 = !DILocation(line: 664, column: 35, scope: !7378)
!7803 = !DILocation(line: 664, column: 16, scope: !7378)
!7804 = !DILocation(line: 664, column: 18, scope: !7378)
!7805 = !DILocation(line: 664, column: 9, scope: !7378)
!7806 = !DILocation(line: 664, column: 23, scope: !7378)
!7807 = !DILocation(line: 666, column: 14, scope: !7808)
!7808 = distinct !DILexicalBlock(scope: !7378, file: !911, line: 666, column: 13)
!7809 = !DILocation(line: 666, column: 13, scope: !7378)
!7810 = !DILocation(line: 666, column: 19, scope: !7811)
!7811 = !DILexicalBlockFile(scope: !7808, file: !911, discriminator: 1)
!7812 = !DILocation(line: 668, column: 32, scope: !7378)
!7813 = !DILocation(line: 668, column: 52, scope: !7378)
!7814 = !DILocation(line: 668, column: 54, scope: !7378)
!7815 = !DILocation(line: 668, column: 47, scope: !7378)
!7816 = !DILocation(line: 668, column: 45, scope: !7378)
!7817 = !DILocation(line: 668, column: 41, scope: !7378)
!7818 = !DILocation(line: 668, column: 21, scope: !7378)
!7819 = !DILocation(line: 132, column: 9, scope: !3724, inlinedAt: !7377)
!7820 = !DILocation(line: 132, column: 13, scope: !3724, inlinedAt: !7377)
!7821 = !DILocation(line: 132, column: 11, scope: !3724, inlinedAt: !7377)
!7822 = !DILocation(line: 132, column: 9, scope: !3702, inlinedAt: !7377)
!7823 = !DILocation(line: 132, column: 26, scope: !3729, inlinedAt: !7377)
!7824 = !DILocation(line: 132, column: 19, scope: !3729, inlinedAt: !7377)
!7825 = !DILocation(line: 133, column: 14, scope: !3732, inlinedAt: !7377)
!7826 = !DILocation(line: 133, column: 18, scope: !3732, inlinedAt: !7377)
!7827 = !DILocation(line: 133, column: 16, scope: !3732, inlinedAt: !7377)
!7828 = !DILocation(line: 133, column: 14, scope: !3724, inlinedAt: !7377)
!7829 = !DILocation(line: 133, column: 31, scope: !3737, inlinedAt: !7377)
!7830 = !DILocation(line: 133, column: 24, scope: !3737, inlinedAt: !7377)
!7831 = !DILocation(line: 134, column: 17, scope: !3732, inlinedAt: !7377)
!7832 = !DILocation(line: 134, column: 10, scope: !3732, inlinedAt: !7377)
!7833 = !DILocation(line: 135, column: 1, scope: !3702, inlinedAt: !7377)
!7834 = !DILocation(line: 668, column: 19, scope: !7378)
!7835 = !DILocation(line: 668, column: 13, scope: !7378)
!7836 = !DILocation(line: 669, column: 36, scope: !7378)
!7837 = !DILocation(line: 669, column: 29, scope: !7378)
!7838 = !DILocation(line: 669, column: 48, scope: !7378)
!7839 = !DILocation(line: 669, column: 41, scope: !7378)
!7840 = !DILocation(line: 669, column: 44, scope: !7378)
!7841 = !DILocation(line: 669, column: 39, scope: !7378)
!7842 = !DILocation(line: 669, column: 16, scope: !7378)
!7843 = !DILocation(line: 669, column: 18, scope: !7378)
!7844 = !DILocation(line: 669, column: 22, scope: !7378)
!7845 = !DILocation(line: 669, column: 9, scope: !7378)
!7846 = !DILocation(line: 669, column: 27, scope: !7378)
!7847 = !DILocation(line: 670, column: 32, scope: !7378)
!7848 = !DILocation(line: 670, column: 25, scope: !7378)
!7849 = !DILocation(line: 670, column: 44, scope: !7378)
!7850 = !DILocation(line: 670, column: 37, scope: !7378)
!7851 = !DILocation(line: 670, column: 40, scope: !7378)
!7852 = !DILocation(line: 670, column: 35, scope: !7378)
!7853 = !DILocation(line: 670, column: 16, scope: !7378)
!7854 = !DILocation(line: 670, column: 18, scope: !7378)
!7855 = !DILocation(line: 670, column: 9, scope: !7378)
!7856 = !DILocation(line: 670, column: 23, scope: !7378)
!7857 = !DILocation(line: 671, column: 5, scope: !7378)
!7858 = !DILocation(line: 661, column: 20, scope: !7859)
!7859 = !DILexicalBlockFile(scope: !7379, file: !911, discriminator: 1)
!7860 = !DILocation(line: 661, column: 5, scope: !7859)
!7861 = distinct !{!7861, !7862}
!7862 = !DILocation(line: 661, column: 5, scope: !7373)
!7863 = !DILocation(line: 672, column: 17, scope: !7373)
!7864 = !DILocation(line: 672, column: 5, scope: !7373)
!7865 = !DILocation(line: 672, column: 15, scope: !7373)
!7866 = !DILocation(line: 675, column: 5, scope: !7373)
!7867 = !DILocation(line: 675, column: 8, scope: !7373)
!7868 = !DILocation(line: 675, column: 14, scope: !7373)
!7869 = !DILocation(line: 675, column: 25, scope: !7373)
!7870 = !DILocation(line: 675, column: 28, scope: !7373)
!7871 = !DILocation(line: 675, column: 35, scope: !7373)
!7872 = !DILocation(line: 678, column: 20, scope: !7373)
!7873 = !DILocation(line: 678, column: 13, scope: !7373)
!7874 = !DILocation(line: 678, column: 5, scope: !7373)
!7875 = !DILocation(line: 678, column: 62, scope: !7373)
!7876 = !DILocation(line: 678, column: 60, scope: !7373)
!7877 = !DILocation(line: 678, column: 55, scope: !7373)
!7878 = !DILocation(line: 678, column: 53, scope: !7373)
!7879 = !DILocation(line: 679, column: 9, scope: !7880)
!7880 = distinct !DILexicalBlock(scope: !7373, file: !911, line: 679, column: 9)
!7881 = !DILocation(line: 679, column: 12, scope: !7880)
!7882 = !DILocation(line: 679, column: 9, scope: !7373)
!7883 = !DILocalVariable(name: "tilt_mem", scope: !7884, file: !911, line: 680, type: !938)
!7884 = distinct !DILexicalBlock(scope: !7880, file: !911, line: 679, column: 31)
!7885 = !DILocation(line: 680, column: 15, scope: !7884)
!7886 = !DILocation(line: 682, column: 16, scope: !7884)
!7887 = !DILocation(line: 682, column: 26, scope: !7884)
!7888 = !DILocation(line: 682, column: 9, scope: !7884)
!7889 = !DILocation(line: 682, column: 31, scope: !7884)
!7890 = !DILocation(line: 684, column: 49, scope: !7884)
!7891 = !DILocation(line: 684, column: 57, scope: !7884)
!7892 = !DILocation(line: 684, column: 67, scope: !7884)
!7893 = !DILocation(line: 684, column: 37, scope: !7884)
!7894 = !DILocation(line: 684, column: 35, scope: !7884)
!7895 = !DILocation(line: 684, column: 30, scope: !7884)
!7896 = !DILocation(line: 685, column: 30, scope: !7884)
!7897 = !DILocation(line: 685, column: 38, scope: !7884)
!7898 = !DILocation(line: 683, column: 9, scope: !7884)
!7899 = !DILocation(line: 686, column: 5, scope: !7884)
!7900 = !DILocation(line: 687, column: 64, scope: !7373)
!7901 = !DILocation(line: 687, column: 72, scope: !7373)
!7902 = !DILocation(line: 688, column: 64, scope: !7373)
!7903 = !DILocation(line: 687, column: 35, scope: !7373)
!7904 = !DILocation(line: 687, column: 33, scope: !7373)
!7905 = !DILocation(line: 687, column: 25, scope: !7906)
!7906 = !DILexicalBlockFile(scope: !7373, file: !911, discriminator: 1)
!7907 = !DILocation(line: 687, column: 25, scope: !7373)
!7908 = !DILocation(line: 687, column: 23, scope: !7373)
!7909 = !DILocation(line: 687, column: 10, scope: !7373)
!7910 = !DILocation(line: 687, column: 8, scope: !7373)
!7911 = !DILocation(line: 689, column: 12, scope: !7912)
!7912 = distinct !DILexicalBlock(scope: !7373, file: !911, line: 689, column: 5)
!7913 = !DILocation(line: 689, column: 10, scope: !7912)
!7914 = !DILocation(line: 689, column: 17, scope: !7915)
!7915 = !DILexicalBlockFile(scope: !7916, file: !911, discriminator: 1)
!7916 = distinct !DILexicalBlock(scope: !7912, file: !911, line: 689, column: 5)
!7917 = !DILocation(line: 689, column: 21, scope: !7915)
!7918 = !DILocation(line: 689, column: 19, scope: !7915)
!7919 = !DILocation(line: 689, column: 5, scope: !7915)
!7920 = !DILocation(line: 690, column: 22, scope: !7916)
!7921 = !DILocation(line: 690, column: 16, scope: !7916)
!7922 = !DILocation(line: 690, column: 9, scope: !7916)
!7923 = !DILocation(line: 690, column: 19, scope: !7916)
!7924 = !DILocation(line: 689, column: 33, scope: !7925)
!7925 = !DILexicalBlockFile(scope: !7916, file: !911, discriminator: 2)
!7926 = !DILocation(line: 689, column: 5, scope: !7925)
!7927 = distinct !{!7927, !7928}
!7928 = !DILocation(line: 689, column: 5, scope: !7373)
!7929 = !DILocation(line: 691, column: 1, scope: !7373)
