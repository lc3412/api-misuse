; ModuleID = '/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g/[inter]fftools--cmdutils.o.i'
source_filename = "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g/[inter]fftools--cmdutils.o.i"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.AVDictionary = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.anon = type { i8*, i32 }
%struct.OptionGroupDef = type { i8*, i8*, i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.OptionDef = type { i8*, i32, %union.anon, i8*, i8* }
%union.anon = type { i8* }
%struct.AVClass = type { i8*, i8* (i8*)*, %struct.AVOption*, i32, i32, i32, i8* (i8*, i8*)*, %struct.AVClass* (%struct.AVClass*)*, i32, i32 (i8*)*, i32 (%struct.AVOptionRanges**, i8*, i8*, i32)* }
%struct.AVOption = type { i8*, i8*, i32, i32, %union.anon.0, double, double, i32, i8* }
%union.anon.0 = type { i64 }
%struct.AVOptionRanges = type { %struct.AVOptionRange**, i32, i32 }
%struct.AVOptionRange = type { i8*, double, double, double, double, i32 }
%struct.SpecifierOpt = type { i8*, %union.anon.2 }
%union.anon.2 = type { i8* }
%struct.OptionGroup = type { %struct.OptionGroupDef*, i8*, %struct.Option*, i32, %struct.AVDictionary*, %struct.AVDictionary*, %struct.AVDictionary*, %struct.AVDictionary*, %struct.AVDictionary* }
%struct.Option = type { %struct.OptionDef*, i8*, i8* }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.AVBPrint = type { i8*, i32, i32, i32, [1 x i8], [1000 x i8] }
%struct.SwsContext = type opaque
%struct.SwrContext = type opaque
%struct.OptionParseContext = type { %struct.OptionGroup, %struct.OptionGroupList*, i32, %struct.OptionGroup }
%struct.OptionGroupList = type { %struct.OptionGroupDef*, %struct.OptionGroup*, i32 }
%struct.rlimit = type { i64, i64 }
%struct.AVInputFormat = type { i8*, i8*, i32, i8*, %struct.AVCodecTag**, %struct.AVClass*, i8*, %struct.AVInputFormat*, i32, i32, i32 (%struct.AVProbeData*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i32)*, i64 (%struct.AVFormatContext*, i32, i64*, i64)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, i32, i64, i64, i64, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)* }
%struct.AVCodecTag = type opaque
%struct.AVProbeData = type { i8*, i8*, i32, i8* }
%struct.AVFormatContext = type { %struct.AVClass*, %struct.AVInputFormat*, %struct.AVOutputFormat*, i8*, %struct.AVIOContext*, i32, i32, %struct.AVStream**, [1024 x i8], i8*, i64, i64, i64, i32, i32, i32, i64, i64, i8*, i32, i32, %struct.AVProgram**, i32, i32, i32, i32, i32, i32, %struct.AVChapter**, %struct.AVDictionary*, i64, i32, i32, %struct.AVIOInterruptCB, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i8*, i8*, %struct.AVFormatInternal*, i32, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, %struct.AVCodec*, i32, i8*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i64, i8*, i32, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVIOInterruptCB*, %struct.AVDictionary**)*, i8*, i32 (%struct.AVFormatContext*, %struct.AVIOContext**, i8*, i32, %struct.AVDictionary**)*, void (%struct.AVFormatContext*, %struct.AVIOContext*)*, i8*, i32, i32 }
%struct.AVOutputFormat = type { i8*, i8*, i8*, i8*, i32, i32, i32, i32, %struct.AVCodecTag**, %struct.AVClass*, %struct.AVOutputFormat*, i32, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)*, i32 (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*, %struct.AVPacket*, i32)*, i32 (i32, i32)*, void (%struct.AVFormatContext*, i32, i64*, i64*)*, i32 (%struct.AVFormatContext*, i32, i8*, i64)*, i32 (%struct.AVFormatContext*, i32, %struct.AVFrame**, i32)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceCapabilitiesQuery*)*, i32, i32 (%struct.AVFormatContext*)*, void (%struct.AVFormatContext*)*, i32 (%struct.AVFormatContext*, %struct.AVPacket*)* }
%struct.AVFrame = type { [8 x i8*], [8 x i32], i8**, i32, i32, i32, i32, i32, i32, %struct.AVRational, i64, i64, i64, i32, i32, i32, i8*, [8 x i64], i32, i32, i32, i32, i64, i32, i64, [8 x %struct.AVBufferRef*], %struct.AVBufferRef**, i32, %struct.AVFrameSideData**, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, %struct.AVDictionary*, i32, i32, i32, i8*, i32, i32, %struct.AVBufferRef*, %struct.AVBufferRef*, %struct.AVBufferRef*, i64, i64, i64, i64, %struct.AVBufferRef* }
%struct.AVRational = type { i32, i32 }
%struct.AVFrameSideData = type { i32, i8*, i32, %struct.AVDictionary*, %struct.AVBufferRef* }
%struct.AVBufferRef = type { %struct.AVBuffer*, i8*, i32 }
%struct.AVBuffer = type opaque
%struct.AVIOContext = type { %struct.AVClass*, i8*, i32, i8*, i8*, i8*, i32 (i8*, i8*, i32)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i64, i32, i32, i32, i64, i8*, i64 (i64, i8*, i32)*, i32, i32 (i8*, i32)*, i64 (i8*, i32, i64, i32)*, i32, i64, i32, i64, i32, i32, i32, i32, i8*, i8*, i32 (i8*, i8*, i32, i32, i64)*, i32, i32, i64, i32 (i8*)*, i64, i8*, i32 }
%struct.AVStream = type { i32, i32, %struct.AVCodecContext*, i8*, %struct.AVRational, i64, i64, i64, i32, i32, %struct.AVRational, %struct.AVDictionary*, %struct.AVRational, %struct.AVPacket, %struct.AVPacketSideData*, i32, i32, %struct.AVRational, i8*, %struct.AVCodecParameters*, %struct.anon.1*, i32, i64, i64, i64, i32, i32, i32, i32, %struct.AVCodecParserContext*, %struct.AVPacketList*, %struct.AVProbeData, [17 x i64], %struct.AVIndexEntry*, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32, i64, i64, i64, i32, i64, i64, i32, i32, [17 x i64], [17 x i8], i64, i8, i8, i32, %struct.AVRational, %struct.AVStreamInternal* }
%struct.AVCodecContext = type { %struct.AVClass*, i32, i32, %struct.AVCodec*, i32, i32, i8*, %struct.AVCodecInternal*, i8*, i64, i32, i32, i32, i32, i32, i8*, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, void (%struct.AVCodecContext*, %struct.AVFrame*, i32*, i32, i32, i32)*, i32 (%struct.AVCodecContext*, i32*)*, i32, float, i32, float, i32, i32, float, float, float, float, float, float, float, i32, i32, i32*, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*, i32)*, i32, float, float, i32, i32, i32, i32, i32, %struct.RcOverride*, i64, i64, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, void (%struct.AVCodecContext*, i8*, i32, i32)*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, i32, i32, i32, i64, %struct.AVHWAccel*, i8*, [8 x i64], i32, i32, i32, i32, i32, %struct.AVFrame*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*)*, i8*, i32*, i32, i32)*, i32 (%struct.AVCodecContext*, i32 (%struct.AVCodecContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i32, i32, i32, i32, i32, i32, i8*, i32, i64, i32, i32, %struct.AVRational, i32, %struct.AVRational, %struct.AVCodecDescriptor*, i64, i64, i64, i64, i8*, i32, i32, i32, i32, i16*, i8*, i8*, i32, %struct.AVPacketSideData*, i32, %struct.AVBufferRef*, i32, i32, i64, %struct.AVBufferRef*, i32, i32, i32, i32 }
%struct.AVCodecInternal = type opaque
%struct.RcOverride = type { i32, i32, i32, float }
%struct.AVHWAccel = type { i8*, i32, i32, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, i32 (%struct.AVCodecContext*, i32, i8*, i32)*, i32 (%struct.AVCodecContext*, i8*, i32)*, {}*, i32, void (%struct.MpegEncContext*)*, {}*, {}*, i32, i32, i32 (%struct.AVCodecContext*, %struct.AVBufferRef*)* }
%struct.MpegEncContext = type opaque
%struct.AVCodecDescriptor = type { i32, i32, i8*, i8*, i32, i8**, %struct.AVProfile* }
%struct.AVProfile = type { i32, i8* }
%struct.AVPacket = type { %struct.AVBufferRef*, i64, i64, i8*, i32, i32, i32, %struct.AVPacketSideData*, i32, i64, i64, i64 }
%struct.AVPacketSideData = type { i8*, i32, i32 }
%struct.AVCodecParameters = type { i32, i32, i32, i8*, i32, i32, i64, i32, i32, i32, i32, i32, i32, %struct.AVRational, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon.1 = type { i64, i64, i32, i64, [2 x [399 x double]]*, i64, i64, i32, i32, i64, i64, i32, i64, i32 }
%struct.AVCodecParserContext = type { i8*, %struct.AVCodecParser*, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32, i32, [4 x i64], [4 x i64], [4 x i64], i32, i64, [4 x i64], i32, i64, i32, i32, i32, [4 x i64], i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVCodecParser = type { [5 x i32], i32, i32 (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecParserContext*, %struct.AVCodecContext*, i8**, i32*, i8*, i32)*, void (%struct.AVCodecParserContext*)*, i32 (%struct.AVCodecContext*, i8*, i32)*, %struct.AVCodecParser* }
%struct.AVPacketList = type { %struct.AVPacket, %struct.AVPacketList* }
%struct.AVIndexEntry = type { i64, i64, i32, i32 }
%struct.AVStreamInternal = type opaque
%struct.AVProgram = type { i32, i32, i32, i32*, i32, %struct.AVDictionary*, i32, i32, i32, i32, i64, i64, i64, i32 }
%struct.AVChapter = type { i32, %struct.AVRational, i64, i64, %struct.AVDictionary* }
%struct.AVIOInterruptCB = type { i32 (i8*)*, i8* }
%struct.AVFormatInternal = type opaque
%struct.AVCodec = type { i8*, i8*, i32, i32, i32, %struct.AVRational*, i32*, i32*, i32*, i64*, i8, %struct.AVClass*, %struct.AVProfile*, i8*, i32, %struct.AVCodec*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVCodecContext*)*, %struct.AVCodecDefault*, void (%struct.AVCodec*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, i8*, i32, %struct.AVSubtitle*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*, %struct.AVFrame*, i32*)*, i32 (%struct.AVCodecContext*, i8*, i32*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, i32 (%struct.AVCodecContext*, %struct.AVPacket*)*, i32 (%struct.AVCodecContext*, %struct.AVFrame*)*, void (%struct.AVCodecContext*)*, i32, i8*, %struct.AVCodecHWConfigInternal** }
%struct.AVCodecDefault = type opaque
%struct.AVSubtitle = type { i16, i32, i32, i32, %struct.AVSubtitleRect**, i64 }
%struct.AVSubtitleRect = type { i32, i32, i32, i32, i32, %struct.AVPicture, [4 x i8*], [4 x i32], i32, i8*, i8*, i32 }
%struct.AVPicture = type { [8 x i8*], [8 x i32] }
%struct.AVCodecHWConfigInternal = type opaque
%struct.AVDeviceInfoList = type { %struct.AVDeviceInfo**, i32, i32 }
%struct.AVDeviceInfo = type { i8*, i8* }
%struct.AVDeviceCapabilitiesQuery = type { %struct.AVClass*, %struct.AVFormatContext*, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, %struct.AVRational }
%struct.AVBitStreamFilter = type { i8*, i32*, %struct.AVClass*, i32, i32 (%struct.AVBSFContext*)*, i32 (%struct.AVBSFContext*, %struct.AVPacket*)*, void (%struct.AVBSFContext*)*, void (%struct.AVBSFContext*)* }
%struct.AVBSFContext = type { %struct.AVClass*, %struct.AVBitStreamFilter*, %struct.AVBSFInternal*, i8*, %struct.AVCodecParameters*, %struct.AVCodecParameters*, %struct.AVRational, %struct.AVRational }
%struct.AVBSFInternal = type opaque
%struct.AVFilter = type { i8*, i8*, %struct.AVFilterPad*, %struct.AVFilterPad*, %struct.AVClass*, i32, i32 (%struct.AVFilterContext*)*, i32 (%struct.AVFilterContext*)*, i32 (%struct.AVFilterContext*, %struct.AVDictionary**)*, void (%struct.AVFilterContext*)*, i32 (%struct.AVFilterContext*)*, i32, i32, %struct.AVFilter*, i32 (%struct.AVFilterContext*, i8*, i8*, i8*, i32, i32)*, i32 (%struct.AVFilterContext*, i8*)*, i32 (%struct.AVFilterContext*)* }
%struct.AVFilterPad = type opaque
%struct.AVFilterContext = type { %struct.AVClass*, %struct.AVFilter*, i8*, %struct.AVFilterPad*, %struct.AVFilterLink**, i32, %struct.AVFilterPad*, %struct.AVFilterLink**, i32, i8*, %struct.AVFilterGraph*, i32, %struct.AVFilterInternal*, %struct.AVFilterCommand*, i8*, i8*, double*, i32, %struct.AVBufferRef*, i32, i32, i32 }
%struct.AVFilterLink = type { %struct.AVFilterContext*, %struct.AVFilterPad*, %struct.AVFilterContext*, %struct.AVFilterPad*, i32, i32, i32, %struct.AVRational, i64, i32, i32, %struct.AVRational, %struct.AVFilterFormats*, %struct.AVFilterFormats*, %struct.AVFilterFormats*, %struct.AVFilterFormats*, %struct.AVFilterChannelLayouts*, %struct.AVFilterChannelLayouts*, i32, i32, %struct.AVFilterGraph*, i64, i64, i32, %struct.AVRational, %struct.AVFrame*, i32, i32, i32, i32, i32, i64, i64, i8*, i32, %struct.AVBufferRef*, [61440 x i8] }
%struct.AVFilterFormats = type opaque
%struct.AVFilterChannelLayouts = type opaque
%struct.AVFilterGraph = type { %struct.AVClass*, %struct.AVFilterContext**, i32, i8*, i8*, i32, i32, %struct.AVFilterGraphInternal*, i8*, i32 (%struct.AVFilterContext*, i32 (%struct.AVFilterContext*, i8*, i32, i32)*, i8*, i32*, i32)*, i8*, %struct.AVFilterLink**, i32, i32 }
%struct.AVFilterGraphInternal = type opaque
%struct.AVFilterInternal = type opaque
%struct.AVFilterCommand = type opaque
%struct.AVPixFmtDescriptor = type { i8*, i8, i8, i8, i64, [4 x %struct.AVComponentDescriptor], i8* }
%struct.AVComponentDescriptor = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.AVDictionaryEntry = type { i8*, i8* }
%struct.AVCodecHWConfig = type { i32, i32, i32 }

@hide_banner = global i32 0, align 4
@sws_dict = common global %struct.AVDictionary* null, align 8
@.str = private unnamed_addr constant [6 x i8] c"flags\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"bicubic\00", align 1
@swr_opts = common global %struct.AVDictionary* null, align 8
@format_opts = common global %struct.AVDictionary* null, align 8
@codec_opts = common global %struct.AVDictionary* null, align 8
@resample_opts = common global %struct.AVDictionary* null, align 8
@stdout = external global %struct._IO_FILE*, align 8
@program_exit = internal global void (i32)* null, align 8
@.str.2 = private unnamed_addr constant [38 x i8] c"Expected number for %s but found: %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [53 x i8] c"The value for %s was %s which is not within %f - %f\0A\00", align 1
@.str.4 = private unnamed_addr constant [36 x i8] c"Expected int64 for %s but found %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [34 x i8] c"Expected int for %s but found %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"Invalid %s specification for %s: %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"duration\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"date\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"-%-17s  %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"default\00", align 1
@.str.16 = private unnamed_addr constant [26 x i8] c"Unrecognized option '%s'\0A\00", align 1
@.str.17 = private unnamed_addr constant [34 x i8] c"Missing argument for option '%s'\0A\00", align 1
@.str.18 = private unnamed_addr constant [36 x i8] c"Parsing a group of options: %s %s.\0A\00", align 1
@.str.19 = private unnamed_addr constant [167 x i8] c"Option %s (%s) cannot be applied to %s %s -- you are trying to apply an input option to an output file or vice versa. Move this option before the file it belongs to.\0A\00", align 1
@.str.20 = private unnamed_addr constant [43 x i8] c"Applying option %s (%s) with argument %s.\0A\00", align 1
@.str.21 = private unnamed_addr constant [41 x i8] c"Successfully parsed a group of options.\0A\00", align 1
@.str.22 = private unnamed_addr constant [9 x i8] c"loglevel\00", align 1
@.str.23 = private unnamed_addr constant [2 x i8] c"v\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"report\00", align 1
@.str.25 = private unnamed_addr constant [9 x i8] c"FFREPORT\00", align 1
@report_file = internal global %struct._IO_FILE* null, align 8
@.str.26 = private unnamed_addr constant [15 x i8] c"Command line:\0A\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"hide_banner\00", align 1
@.str.28 = private unnamed_addr constant [6 x i8] c"debug\00", align 1
@.str.29 = private unnamed_addr constant [7 x i8] c"fdebug\00", align 1
@.str.30 = private unnamed_addr constant [49 x i8] c"Routing option %s to both codec and muxer layer\0A\00", align 1
@.str.31 = private unnamed_addr constant [5 x i8] c"srcw\00", align 1
@.str.32 = private unnamed_addr constant [5 x i8] c"srch\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"dstw\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"dsth\00", align 1
@.str.35 = private unnamed_addr constant [11 x i8] c"src_format\00", align 1
@.str.36 = private unnamed_addr constant [11 x i8] c"dst_format\00", align 1
@.str.37 = private unnamed_addr constant [106 x i8] c"Directly using swscale dimensions/format options is not supported, please use the -s or -pix_fmt options\0A\00", align 1
@.str.38 = private unnamed_addr constant [26 x i8] c"Error setting option %s.\0A\00", align 1
@.str.39 = private unnamed_addr constant [28 x i8] c"Splitting the commandline.\0A\00", align 1
@.str.40 = private unnamed_addr constant [24 x i8] c"Reading option '%s' ...\00", align 1
@.str.41 = private unnamed_addr constant [17 x i8] c" matched as %s.\0A\00", align 1
@.str.42 = private unnamed_addr constant [35 x i8] c"Missing argument for option '%s'.\0A\00", align 1
@.str.43 = private unnamed_addr constant [36 x i8] c" matched as %s with argument '%s'.\0A\00", align 1
@.str.44 = private unnamed_addr constant [50 x i8] c" matched as option '%s' (%s) with argument '%s'.\0A\00", align 1
@.str.45 = private unnamed_addr constant [47 x i8] c" matched as AVOption '%s' with argument '%s'.\0A\00", align 1
@.str.46 = private unnamed_addr constant [47 x i8] c"Error parsing option '%s' with argument '%s'.\0A\00", align 1
@.str.47 = private unnamed_addr constant [47 x i8] c" matched as option '%s' (%s) with argument 0.\0A\00", align 1
@.str.48 = private unnamed_addr constant [27 x i8] c"Unrecognized option '%s'.\0A\00", align 1
@.str.49 = private unnamed_addr constant [49 x i8] c"Trailing options were found on the commandline.\0A\00", align 1
@.str.50 = private unnamed_addr constant [37 x i8] c"Finished splitting the commandline.\0A\00", align 1
@opt_loglevel.log_levels = internal constant [9 x %struct.anon] [%struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.51, i32 0, i32 0), i32 -8 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i32 0, i32 0), i32 0 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0), i32 8 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.54, i32 0, i32 0), i32 16 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.55, i32 0, i32 0), i32 24 }, %struct.anon { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.56, i32 0, i32 0), i32 32 }, %struct.anon { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57, i32 0, i32 0), i32 40 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.28, i32 0, i32 0), i32 48 }, %struct.anon { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), i32 56 }], align 16
@.str.51 = private unnamed_addr constant [6 x i8] c"quiet\00", align 1
@.str.52 = private unnamed_addr constant [6 x i8] c"panic\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c"fatal\00", align 1
@.str.54 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@.str.55 = private unnamed_addr constant [8 x i8] c"warning\00", align 1
@.str.56 = private unnamed_addr constant [5 x i8] c"info\00", align 1
@.str.57 = private unnamed_addr constant [8 x i8] c"verbose\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"trace\00", align 1
@.str.59 = private unnamed_addr constant [30 x i8] c"Assertion %s failed at %s:%d\0A\00", align 1
@.str.60 = private unnamed_addr constant [4 x i8] c"arg\00", align 1
@.str.61 = private unnamed_addr constant [19 x i8] c"fftools/cmdutils.c\00", align 1
@.str.62 = private unnamed_addr constant [7 x i8] c"repeat\00", align 1
@.str.63 = private unnamed_addr constant [6 x i8] c"level\00", align 1
@.str.64 = private unnamed_addr constant [56 x i8] c"Invalid loglevel \22%s\22. Possible levels are numbers or:\0A\00", align 1
@.str.65 = private unnamed_addr constant [6 x i8] c"\22%s\22\0A\00", align 1
@.str.66 = private unnamed_addr constant [25 x i8] c"Invalid max_alloc \22%s\22.\0A\00", align 1
@.str.67 = private unnamed_addr constant [10 x i8] c"setrlimit\00", align 1
@.str.68 = private unnamed_addr constant [8 x i8] c"%s: %s\0A\00", align 1
@.str.69 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.70 = private unnamed_addr constant [673 x i8] c"%s is free software; you can redistribute it and/or\0Amodify it under the terms of the GNU Lesser General Public\0ALicense as published by the Free Software Foundation; either\0Aversion 2.1 of the License, or (at your option) any later version.\0A\0A%s is distributed in the hope that it will be useful,\0Abut WITHOUT ANY WARRANTY; without even the implied warranty of\0AMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\0ALesser General Public License for more details.\0A\0AYou should have received a copy of the GNU Lesser General Public\0ALicense along with %s; if not, write to the Free Software\0AFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\0A\00", align 1
@program_name = external constant [0 x i8], align 1
@.str.71 = private unnamed_addr constant [237 x i8] c"Codecs:\0A D..... = Decoding supported\0A .E.... = Encoding supported\0A ..V... = Video codec\0A ..A... = Audio codec\0A ..S... = Subtitle codec\0A ...I.. = Intra frame-only codec\0A ....L. = Lossy compression\0A .....S = Lossless compression\0A -------\0A\00", align 1
@.str.72 = private unnamed_addr constant [12 x i8] c"_deprecated\00", align 1
@.str.73 = private unnamed_addr constant [2 x i8] c"D\00", align 1
@.str.74 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.75 = private unnamed_addr constant [2 x i8] c"E\00", align 1
@.str.76 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.77 = private unnamed_addr constant [2 x i8] c"I\00", align 1
@.str.78 = private unnamed_addr constant [2 x i8] c"L\00", align 1
@.str.79 = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str.80 = private unnamed_addr constant [10 x i8] c" %-20s %s\00", align 1
@.str.81 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.82 = private unnamed_addr constant [20 x i8] c"Bitstream filters:\0A\00", align 1
@.str.83 = private unnamed_addr constant [34 x i8] c"Supported file protocols:\0AInput:\0A\00", align 1
@.str.84 = private unnamed_addr constant [6 x i8] c"  %s\0A\00", align 1
@.str.85 = private unnamed_addr constant [9 x i8] c"Output:\0A\00", align 1
@.str.86 = private unnamed_addr constant [210 x i8] c"Filters:\0A  T.. = Timeline support\0A  .S. = Slice threading\0A  ..C = Command support\0A  A = Audio input/output\0A  V = Video input/output\0A  N = Dynamic number and/or type of input/output\0A  | = Source or sink filter\0A\00", align 1
@.str.87 = private unnamed_addr constant [24 x i8] c" %c%c%c %-17s %-10s %s\0A\00", align 1
@.str.88 = private unnamed_addr constant [15 x i8] c"%-32s #RRGGBB\0A\00", align 1
@.str.89 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.90 = private unnamed_addr constant [21 x i8] c"%-32s #%02x%02x%02x\0A\00", align 1
@.str.91 = private unnamed_addr constant [252 x i8] c"Pixel formats:\0AI.... = Supported Input  format for conversion\0A.O... = Supported Output format for conversion\0A..H.. = Hardware accelerated format\0A...P. = Paletted format\0A....B = Bitstream format\0AFLAGS NAME            NB_COMPONENTS BITS_PER_PIXEL\0A-----\0A\00", align 1
@.str.92 = private unnamed_addr constant [42 x i8] c"%c%c%c%c%c %-16s       %d            %2d\0A\00", align 1
@.str.93 = private unnamed_addr constant [49 x i8] c"Individual channels:\0ANAME           DESCRIPTION\0A\00", align 1
@.str.94 = private unnamed_addr constant [10 x i8] c"%-14s %s\0A\00", align 1
@.str.95 = private unnamed_addr constant [57 x i8] c"\0AStandard channel layouts:\0ANAME           DECOMPOSITION\0A\00", align 1
@.str.96 = private unnamed_addr constant [7 x i8] c"%-14s \00", align 1
@.str.97 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.98 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.99 = private unnamed_addr constant [8 x i8] c"decoder\00", align 1
@.str.100 = private unnamed_addr constant [8 x i8] c"encoder\00", align 1
@.str.101 = private unnamed_addr constant [8 x i8] c"demuxer\00", align 1
@.str.102 = private unnamed_addr constant [6 x i8] c"muxer\00", align 1
@.str.103 = private unnamed_addr constant [7 x i8] c"filter\00", align 1
@.str.104 = private unnamed_addr constant [4 x i8] c"bsf\00", align 1
@.str.105 = private unnamed_addr constant [15 x i8] c"FFMPEG_DATADIR\00", align 1
@.str.106 = private unnamed_addr constant [5 x i8] c"HOME\00", align 1
@.str.107 = private unnamed_addr constant [24 x i8] c"/usr/local/share/ffmpeg\00", align 1
@.str.108 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.109 = private unnamed_addr constant [17 x i8] c"%s%s/%s.ffpreset\00", align 1
@.str.110 = private unnamed_addr constant [9 x i8] c"/.ffmpeg\00", align 1
@.str.111 = private unnamed_addr constant [20 x i8] c"%s%s/%s-%s.ffpreset\00", align 1
@.str.112 = private unnamed_addr constant [31 x i8] c"Invalid stream specifier: %s.\0A\00", align 1
@.str.113 = private unnamed_addr constant [44 x i8] c"Could not alloc memory for stream options.\0A\00", align 1
@.str.114 = private unnamed_addr constant [16 x i8] c"Array too big.\0A\00", align 1
@.str.115 = private unnamed_addr constant [25 x i8] c"Could not alloc buffer.\0A\00", align 1
@.str.116 = private unnamed_addr constant [176 x i8] c"Odd rotation angle.\0AIf you want to help, upload a sample of this file to ftp://upload.ffmpeg.org/incoming/ and contact the ffmpeg-devel mailing list. (ffmpeg-devel@ffmpeg.org)\00", align 1
@.str.117 = private unnamed_addr constant [6 x i8] c"lavfi\00", align 1
@.str.118 = private unnamed_addr constant [46 x i8] c"Failed to set value '%s' for option '%s': %s\0A\00", align 1
@.str.119 = private unnamed_addr constant [32 x i8] c"po->flags & (0x40000 | 0x80000)\00", align 1
@.str.120 = private unnamed_addr constant [4 x i8] c"\5C%c\00", align 1
@.str.121 = private unnamed_addr constant [7 x i8] c"\5Cx%02x\00", align 1
@init_parse_context.global_group = internal constant %struct.OptionGroupDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.122, i32 0, i32 0), i8* null, i32 0 }, align 8
@.str.122 = private unnamed_addr constant [7 x i8] c"global\00", align 1
@.str.123 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@.str.124 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.125 = private unnamed_addr constant [51 x i8] c"Failed to parse FFREPORT environment variable: %s\0A\00", align 1
@.str.126 = private unnamed_addr constant [5 x i8] c"file\00", align 1
@report_file_level = internal global i32 48, align 4
@.str.127 = private unnamed_addr constant [27 x i8] c"Invalid report file level\0A\00", align 1
@.str.128 = private unnamed_addr constant [30 x i8] c"Unknown key '%s' in FFREPORT\0A\00", align 1
@.str.129 = private unnamed_addr constant [10 x i8] c"%p-%t.log\00", align 1
@.str.130 = private unnamed_addr constant [41 x i8] c"Out of memory building report file name\0A\00", align 1
@.str.131 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.132 = private unnamed_addr constant [32 x i8] c"Failed to open report \22%s\22: %s\0A\00", align 1
@.str.133 = private unnamed_addr constant [71 x i8] c"%s started on %04d-%02d-%02d at %02d:%02d:%02d\0AReport written to \22%s\22\0A\00", align 1
@.str.134 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.135 = private unnamed_addr constant [26 x i8] c"%04d%02d%02d-%02d%02d%02d\00", align 1
@log_callback_report.print_prefix = internal global i32 1, align 4
@.str.136 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@.str.137 = private unnamed_addr constant [28 x i8] c"%s version N-93147-g9326117\00", align 1
@.str.138 = private unnamed_addr constant [43 x i8] c" Copyright (c) %d-%d the FFmpeg developers\00", align 1
@program_birth_year = external constant i32, align 4
@.str.139 = private unnamed_addr constant [17 x i8] c"%sbuilt with %s\0A\00", align 1
@.str.140 = private unnamed_addr constant [52 x i8] c"gcc 5.4.0 (Ubuntu 5.4.0-6ubuntu1~16.04.10) 20160609\00", align 1
@.str.141 = private unnamed_addr constant [35 x i8] c"%sconfiguration: --disable-x86asm\0A\00", align 1
@.str.142 = private unnamed_addr constant [38 x i8] c"%slib%-11s %2d.%3d.%3d / %2d.%3d.%3d\0A\00", align 1
@.str.143 = private unnamed_addr constant [7 x i8] c"avutil\00", align 1
@.str.144 = private unnamed_addr constant [17 x i8] c"--disable-x86asm\00", align 1
@warned_cfg = internal global i32 0, align 4
@.str.145 = private unnamed_addr constant [43 x i8] c"%sWARNING: library configuration mismatch\0A\00", align 1
@.str.146 = private unnamed_addr constant [27 x i8] c"%s%-11s configuration: %s\0A\00", align 1
@.str.147 = private unnamed_addr constant [8 x i8] c"avcodec\00", align 1
@.str.148 = private unnamed_addr constant [9 x i8] c"avformat\00", align 1
@.str.149 = private unnamed_addr constant [9 x i8] c"avdevice\00", align 1
@.str.150 = private unnamed_addr constant [9 x i8] c"avfilter\00", align 1
@.str.151 = private unnamed_addr constant [8 x i8] c"swscale\00", align 1
@.str.152 = private unnamed_addr constant [11 x i8] c"swresample\00", align 1
@print_buildconf.str = private unnamed_addr constant [17 x i8] c"--disable-x86asm\00", align 16
@.str.153 = private unnamed_addr constant [4 x i8] c" --\00", align 1
@.str.154 = private unnamed_addr constant [4 x i8] c"~--\00", align 1
@.str.155 = private unnamed_addr constant [12 x i8] c"pkg-config~\00", align 1
@.str.156 = private unnamed_addr constant [12 x i8] c"pkg-config \00", align 1
@.str.157 = private unnamed_addr constant [2 x i8] c"~\00", align 1
@.str.158 = private unnamed_addr constant [19 x i8] c"\0A%sconfiguration:\0A\00", align 1
@.str.159 = private unnamed_addr constant [8 x i8] c"%s%s%s\0A\00", align 1
@.str.160 = private unnamed_addr constant [56 x i8] c"%s\0A D. = Demuxing supported\0A .E = Muxing supported\0A --\0A\00", align 1
@.str.161 = private unnamed_addr constant [9 x i8] c"Devices:\00", align 1
@.str.162 = private unnamed_addr constant [14 x i8] c"File formats:\00", align 1
@.str.163 = private unnamed_addr constant [4 x i8] c"000\00", align 1
@.str.164 = private unnamed_addr constant [16 x i8] c" %s%s %-15s %s\0A\00", align 1
@.str.165 = private unnamed_addr constant [15 x i8] c"Out of memory\0A\00", align 1
@.str.166 = private unnamed_addr constant [15 x i8] c"i == nb_codecs\00", align 1
@.str.167 = private unnamed_addr constant [7 x i8] c" (%s: \00", align 1
@.str.168 = private unnamed_addr constant [9 x i8] c"encoders\00", align 1
@.str.169 = private unnamed_addr constant [9 x i8] c"decoders\00", align 1
@.str.170 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.171 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.172 = private unnamed_addr constant [250 x i8] c"%s:\0A V..... = Video\0A A..... = Audio\0A S..... = Subtitle\0A .F.... = Frame-level multithreading\0A ..S... = Slice-level multithreading\0A ...X.. = Codec is experimental\0A ....B. = Supports draw_horiz_band\0A .....D = Supports direct rendering method 1\0A ------\0A\00", align 1
@.str.173 = private unnamed_addr constant [9 x i8] c"Encoders\00", align 1
@.str.174 = private unnamed_addr constant [9 x i8] c"Decoders\00", align 1
@.str.175 = private unnamed_addr constant [4 x i8] c" %c\00", align 1
@.str.176 = private unnamed_addr constant [2 x i8] c"F\00", align 1
@.str.177 = private unnamed_addr constant [2 x i8] c"X\00", align 1
@.str.178 = private unnamed_addr constant [2 x i8] c"B\00", align 1
@.str.179 = private unnamed_addr constant [12 x i8] c" (codec %s)\00", align 1
@.str.180 = private unnamed_addr constant [26 x i8] c"No codec name specified.\0A\00", align 1
@.str.181 = private unnamed_addr constant [135 x i8] c"Codec '%s' is known to FFmpeg, but no %s for it are available. FFmpeg might need to be recompiled with additional external libraries.\0A\00", align 1
@.str.182 = private unnamed_addr constant [41 x i8] c"Codec '%s' is not recognized by FFmpeg.\0A\00", align 1
@.str.183 = private unnamed_addr constant [13 x i8] c"%s %s [%s]:\0A\00", align 1
@.str.184 = private unnamed_addr constant [8 x i8] c"Encoder\00", align 1
@.str.185 = private unnamed_addr constant [8 x i8] c"Decoder\00", align 1
@.str.186 = private unnamed_addr constant [27 x i8] c"    General capabilities: \00", align 1
@.str.187 = private unnamed_addr constant [11 x i8] c"horizband \00", align 1
@.str.188 = private unnamed_addr constant [5 x i8] c"dr1 \00", align 1
@.str.189 = private unnamed_addr constant [7 x i8] c"trunc \00", align 1
@.str.190 = private unnamed_addr constant [7 x i8] c"delay \00", align 1
@.str.191 = private unnamed_addr constant [7 x i8] c"small \00", align 1
@.str.192 = private unnamed_addr constant [11 x i8] c"subframes \00", align 1
@.str.193 = private unnamed_addr constant [5 x i8] c"exp \00", align 1
@.str.194 = private unnamed_addr constant [8 x i8] c"chconf \00", align 1
@.str.195 = private unnamed_addr constant [13 x i8] c"paramchange \00", align 1
@.str.196 = private unnamed_addr constant [10 x i8] c"variable \00", align 1
@.str.197 = private unnamed_addr constant [9 x i8] c"threads \00", align 1
@.str.198 = private unnamed_addr constant [12 x i8] c"avoidprobe \00", align 1
@.str.199 = private unnamed_addr constant [11 x i8] c"intraonly \00", align 1
@.str.200 = private unnamed_addr constant [10 x i8] c"lossless \00", align 1
@.str.201 = private unnamed_addr constant [10 x i8] c"hardware \00", align 1
@.str.202 = private unnamed_addr constant [8 x i8] c"hybrid \00", align 1
@.str.203 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.204 = private unnamed_addr constant [29 x i8] c"    Threading capabilities: \00", align 1
@.str.205 = private unnamed_addr constant [16 x i8] c"frame and slice\00", align 1
@.str.206 = private unnamed_addr constant [6 x i8] c"frame\00", align 1
@.str.207 = private unnamed_addr constant [6 x i8] c"slice\00", align 1
@.str.208 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.209 = private unnamed_addr constant [33 x i8] c"    Supported hardware devices: \00", align 1
@.str.210 = private unnamed_addr constant [26 x i8] c"    Supported framerates:\00", align 1
@.str.211 = private unnamed_addr constant [7 x i8] c" %d/%d\00", align 1
@.str.212 = private unnamed_addr constant [29 x i8] c"    Supported pixel formats:\00", align 1
@.str.213 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@.str.214 = private unnamed_addr constant [28 x i8] c"    Supported sample rates:\00", align 1
@.str.215 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.216 = private unnamed_addr constant [30 x i8] c"    Supported sample formats:\00", align 1
@.str.217 = private unnamed_addr constant [31 x i8] c"    Supported channel layouts:\00", align 1
@.str.218 = private unnamed_addr constant [22 x i8] c"Unknown format '%s'.\0A\00", align 1
@.str.219 = private unnamed_addr constant [18 x i8] c"Demuxer %s [%s]:\0A\00", align 1
@.str.220 = private unnamed_addr constant [28 x i8] c"    Common extensions: %s.\0A\00", align 1
@.str.221 = private unnamed_addr constant [16 x i8] c"Muxer %s [%s]:\0A\00", align 1
@.str.222 = private unnamed_addr constant [20 x i8] c"    Mime type: %s.\0A\00", align 1
@.str.223 = private unnamed_addr constant [30 x i8] c"    Default video codec: %s.\0A\00", align 1
@.str.224 = private unnamed_addr constant [30 x i8] c"    Default audio codec: %s.\0A\00", align 1
@.str.225 = private unnamed_addr constant [33 x i8] c"    Default subtitle codec: %s.\0A\00", align 1
@.str.226 = private unnamed_addr constant [27 x i8] c"No filter name specified.\0A\00", align 1
@.str.227 = private unnamed_addr constant [22 x i8] c"Unknown filter '%s'.\0A\00", align 1
@.str.228 = private unnamed_addr constant [11 x i8] c"Filter %s\0A\00", align 1
@.str.229 = private unnamed_addr constant [31 x i8] c"    slice threading supported\0A\00", align 1
@.str.230 = private unnamed_addr constant [13 x i8] c"    Inputs:\0A\00", align 1
@.str.231 = private unnamed_addr constant [21 x i8] c"       #%d: %s (%s)\0A\00", align 1
@.str.232 = private unnamed_addr constant [44 x i8] c"        dynamic (depending on the options)\0A\00", align 1
@.str.233 = private unnamed_addr constant [30 x i8] c"        none (source filter)\0A\00", align 1
@.str.234 = private unnamed_addr constant [14 x i8] c"    Outputs:\0A\00", align 1
@.str.235 = private unnamed_addr constant [28 x i8] c"        none (sink filter)\0A\00", align 1
@.str.236 = private unnamed_addr constant [67 x i8] c"This filter has support for timeline through the 'enable' option.\0A\00", align 1
@.str.237 = private unnamed_addr constant [37 x i8] c"No bitstream filter name specified.\0A\00", align 1
@.str.238 = private unnamed_addr constant [33 x i8] c"Unknown bit stream filter '%s'.\0A\00", align 1
@.str.239 = private unnamed_addr constant [22 x i8] c"Bit stream filter %s\0A\00", align 1
@.str.240 = private unnamed_addr constant [22 x i8] c"    Supported codecs:\00", align 1
@.str.241 = private unnamed_addr constant [12 x i8] c"dev && opts\00", align 1
@.str.242 = private unnamed_addr constant [99 x i8] c"\0ADevice name is not provided.\0AYou can pass devicename[,opt1=val1[,opt2=val2...]] as an argument.\0A\0A\00", align 1
@.str.243 = private unnamed_addr constant [31 x i8] c"Auto-detected sources for %s:\0A\00", align 1
@.str.244 = private unnamed_addr constant [39 x i8] c"Cannot list sources. Not implemented.\0A\00", align 1
@.str.245 = private unnamed_addr constant [22 x i8] c"Cannot list sources.\0A\00", align 1
@.str.246 = private unnamed_addr constant [12 x i8] c"%s %s [%s]\0A\00", align 1
@.str.247 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.248 = private unnamed_addr constant [29 x i8] c"Auto-detected sinks for %s:\0A\00", align 1
@.str.249 = private unnamed_addr constant [37 x i8] c"Cannot list sinks. Not implemented.\0A\00", align 1
@.str.250 = private unnamed_addr constant [20 x i8] c"Cannot list sinks.\0A\00", align 1

; Function Attrs: nounwind uwtable
define void @init_opts() #0 !dbg !1498 {
entry:
  %call = call i32 @av_dict_set(%struct.AVDictionary** @sws_dict, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i32 0), !dbg !1501
  ret void, !dbg !1502
}

declare i32 @av_dict_set(%struct.AVDictionary**, i8*, i8*, i32) #1

; Function Attrs: nounwind uwtable
define void @uninit_opts() #0 !dbg !1503 {
entry:
  call void @av_dict_free(%struct.AVDictionary** @swr_opts), !dbg !1504
  call void @av_dict_free(%struct.AVDictionary** @sws_dict), !dbg !1505
  call void @av_dict_free(%struct.AVDictionary** @format_opts), !dbg !1506
  call void @av_dict_free(%struct.AVDictionary** @codec_opts), !dbg !1507
  call void @av_dict_free(%struct.AVDictionary** @resample_opts), !dbg !1508
  ret void, !dbg !1509
}

declare void @av_dict_free(%struct.AVDictionary**) #1

; Function Attrs: nounwind uwtable
define void @log_callback_help(i8* %ptr, i32 %level, i8* %fmt, %struct.__va_list_tag* %vl) #0 !dbg !1510 {
entry:
  %ptr.addr = alloca i8*, align 8
  %level.addr = alloca i32, align 4
  %fmt.addr = alloca i8*, align 8
  %vl.addr = alloca %struct.__va_list_tag*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ptr.addr, metadata !1511, metadata !1512), !dbg !1513
  store i32 %level, i32* %level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %level.addr, metadata !1514, metadata !1512), !dbg !1515
  store i8* %fmt, i8** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fmt.addr, metadata !1516, metadata !1512), !dbg !1517
  store %struct.__va_list_tag* %vl, %struct.__va_list_tag** %vl.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %vl.addr, metadata !1518, metadata !1512), !dbg !1519
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1520
  %1 = load i8*, i8** %fmt.addr, align 8, !dbg !1521
  %2 = load %struct.__va_list_tag*, %struct.__va_list_tag** %vl.addr, align 8, !dbg !1522
  %call = call i32 @vfprintf(%struct._IO_FILE* %0, i8* %1, %struct.__va_list_tag* %2), !dbg !1523
  ret void, !dbg !1524
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

declare i32 @vfprintf(%struct._IO_FILE*, i8*, %struct.__va_list_tag*) #1

; Function Attrs: nounwind uwtable
define void @init_dynload() #0 !dbg !1525 {
entry:
  ret void, !dbg !1526
}

; Function Attrs: nounwind uwtable
define void @register_exit(void (i32)* %cb) #0 !dbg !1527 {
entry:
  %cb.addr = alloca void (i32)*, align 8
  store void (i32)* %cb, void (i32)** %cb.addr, align 8
  call void @llvm.dbg.declare(metadata void (i32)** %cb.addr, metadata !1530, metadata !1512), !dbg !1531
  %0 = load void (i32)*, void (i32)** %cb.addr, align 8, !dbg !1532
  store void (i32)* %0, void (i32)** @program_exit, align 8, !dbg !1533
  ret void, !dbg !1534
}

; Function Attrs: noreturn nounwind uwtable
define void @exit_program(i32 %ret) #3 !dbg !1535 {
entry:
  %ret.addr = alloca i32, align 4
  store i32 %ret, i32* %ret.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ret.addr, metadata !1536, metadata !1512), !dbg !1537
  %0 = load void (i32)*, void (i32)** @program_exit, align 8, !dbg !1538
  %tobool = icmp ne void (i32)* %0, null, !dbg !1538
  br i1 %tobool, label %if.then, label %if.end, !dbg !1540

if.then:                                          ; preds = %entry
  %1 = load void (i32)*, void (i32)** @program_exit, align 8, !dbg !1541
  %2 = load i32, i32* %ret.addr, align 4, !dbg !1542
  call void %1(i32 %2), !dbg !1541
  br label %if.end, !dbg !1541

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %ret.addr, align 4, !dbg !1543
  call void @exit(i32 %3) #12, !dbg !1544
  unreachable, !dbg !1544

return:                                           ; No predecessors!
  ret void, !dbg !1545
}

; Function Attrs: noreturn nounwind
declare void @exit(i32) #4

; Function Attrs: nounwind uwtable
define double @parse_number_or_die(i8* %context, i8* %numstr, i32 %type, double %min, double %max) #0 !dbg !1546 {
entry:
  %context.addr = alloca i8*, align 8
  %numstr.addr = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  %min.addr = alloca double, align 8
  %max.addr = alloca double, align 8
  %tail = alloca i8*, align 8
  %error = alloca i8*, align 8
  %d = alloca double, align 8
  store i8* %context, i8** %context.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %context.addr, metadata !1549, metadata !1512), !dbg !1550
  store i8* %numstr, i8** %numstr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %numstr.addr, metadata !1551, metadata !1512), !dbg !1552
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !1553, metadata !1512), !dbg !1554
  store double %min, double* %min.addr, align 8
  call void @llvm.dbg.declare(metadata double* %min.addr, metadata !1555, metadata !1512), !dbg !1556
  store double %max, double* %max.addr, align 8
  call void @llvm.dbg.declare(metadata double* %max.addr, metadata !1557, metadata !1512), !dbg !1558
  call void @llvm.dbg.declare(metadata i8** %tail, metadata !1559, metadata !1512), !dbg !1560
  call void @llvm.dbg.declare(metadata i8** %error, metadata !1561, metadata !1512), !dbg !1562
  call void @llvm.dbg.declare(metadata double* %d, metadata !1563, metadata !1512), !dbg !1564
  %0 = load i8*, i8** %numstr.addr, align 8, !dbg !1565
  %call = call double @av_strtod(i8* %0, i8** %tail), !dbg !1566
  store double %call, double* %d, align 8, !dbg !1564
  %1 = load i8*, i8** %tail, align 8, !dbg !1567
  %2 = load i8, i8* %1, align 1, !dbg !1569
  %tobool = icmp ne i8 %2, 0, !dbg !1569
  br i1 %tobool, label %if.then, label %if.else, !dbg !1570

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i32 0, i32 0), i8** %error, align 8, !dbg !1571
  br label %if.end21, !dbg !1572

if.else:                                          ; preds = %entry
  %3 = load double, double* %d, align 8, !dbg !1573
  %4 = load double, double* %min.addr, align 8, !dbg !1575
  %cmp = fcmp olt double %3, %4, !dbg !1576
  br i1 %cmp, label %if.then2, label %lor.lhs.false, !dbg !1577

lor.lhs.false:                                    ; preds = %if.else
  %5 = load double, double* %d, align 8, !dbg !1578
  %6 = load double, double* %max.addr, align 8, !dbg !1580
  %cmp1 = fcmp ogt double %5, %6, !dbg !1581
  br i1 %cmp1, label %if.then2, label %if.else3, !dbg !1582

if.then2:                                         ; preds = %lor.lhs.false, %if.else
  store i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.3, i32 0, i32 0), i8** %error, align 8, !dbg !1583
  br label %if.end20, !dbg !1584

if.else3:                                         ; preds = %lor.lhs.false
  %7 = load i32, i32* %type.addr, align 4, !dbg !1585
  %cmp4 = icmp eq i32 %7, 1024, !dbg !1587
  br i1 %cmp4, label %land.lhs.true, label %if.else9, !dbg !1588

land.lhs.true:                                    ; preds = %if.else3
  %8 = load double, double* %d, align 8, !dbg !1589
  %conv = fptosi double %8 to i64, !dbg !1591
  %conv5 = sitofp i64 %conv to double, !dbg !1591
  %9 = load double, double* %d, align 8, !dbg !1592
  %cmp6 = fcmp une double %conv5, %9, !dbg !1593
  br i1 %cmp6, label %if.then8, label %if.else9, !dbg !1594

if.then8:                                         ; preds = %land.lhs.true
  store i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i32 0, i32 0), i8** %error, align 8, !dbg !1595
  br label %if.end19, !dbg !1596

if.else9:                                         ; preds = %land.lhs.true, %if.else3
  %10 = load i32, i32* %type.addr, align 4, !dbg !1597
  %cmp10 = icmp eq i32 %10, 128, !dbg !1599
  br i1 %cmp10, label %land.lhs.true12, label %if.else18, !dbg !1600

land.lhs.true12:                                  ; preds = %if.else9
  %11 = load double, double* %d, align 8, !dbg !1601
  %conv13 = fptosi double %11 to i32, !dbg !1603
  %conv14 = sitofp i32 %conv13 to double, !dbg !1603
  %12 = load double, double* %d, align 8, !dbg !1604
  %cmp15 = fcmp une double %conv14, %12, !dbg !1605
  br i1 %cmp15, label %if.then17, label %if.else18, !dbg !1606

if.then17:                                        ; preds = %land.lhs.true12
  store i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i32 0, i32 0), i8** %error, align 8, !dbg !1607
  br label %if.end, !dbg !1608

if.else18:                                        ; preds = %land.lhs.true12, %if.else9
  %13 = load double, double* %d, align 8, !dbg !1609
  ret double %13, !dbg !1610

if.end:                                           ; preds = %if.then17
  br label %if.end19

if.end19:                                         ; preds = %if.end, %if.then8
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.then2
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then
  %14 = load i8*, i8** %error, align 8, !dbg !1611
  %15 = load i8*, i8** %context.addr, align 8, !dbg !1612
  %16 = load i8*, i8** %numstr.addr, align 8, !dbg !1613
  %17 = load double, double* %min.addr, align 8, !dbg !1614
  %18 = load double, double* %max.addr, align 8, !dbg !1615
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 8, i8* %14, i8* %15, i8* %16, double %17, double %18), !dbg !1616
  call void @exit_program(i32 1) #13, !dbg !1617
  unreachable, !dbg !1617
}

declare double @av_strtod(i8*, i8**) #1

declare void @av_log(i8*, i32, i8*, ...) #1

; Function Attrs: nounwind uwtable
define i64 @parse_time_or_die(i8* %context, i8* %timestr, i32 %is_duration) #0 !dbg !1618 {
entry:
  %context.addr = alloca i8*, align 8
  %timestr.addr = alloca i8*, align 8
  %is_duration.addr = alloca i32, align 4
  %us = alloca i64, align 8
  store i8* %context, i8** %context.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %context.addr, metadata !1621, metadata !1512), !dbg !1622
  store i8* %timestr, i8** %timestr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %timestr.addr, metadata !1623, metadata !1512), !dbg !1624
  store i32 %is_duration, i32* %is_duration.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %is_duration.addr, metadata !1625, metadata !1512), !dbg !1626
  call void @llvm.dbg.declare(metadata i64* %us, metadata !1627, metadata !1512), !dbg !1628
  %0 = load i8*, i8** %timestr.addr, align 8, !dbg !1629
  %1 = load i32, i32* %is_duration.addr, align 4, !dbg !1631
  %call = call i32 @av_parse_time(i64* %us, i8* %0, i32 %1), !dbg !1632
  %cmp = icmp slt i32 %call, 0, !dbg !1633
  br i1 %cmp, label %if.then, label %if.end, !dbg !1634

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %is_duration.addr, align 4, !dbg !1635
  %tobool = icmp ne i32 %2, 0, !dbg !1635
  %cond = select i1 %tobool, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), !dbg !1635
  %3 = load i8*, i8** %context.addr, align 8, !dbg !1637
  %4 = load i8*, i8** %timestr.addr, align 8, !dbg !1638
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 8, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i32 0, i32 0), i8* %cond, i8* %3, i8* %4), !dbg !1639
  call void @exit_program(i32 1) #13, !dbg !1640
  unreachable, !dbg !1640

if.end:                                           ; preds = %entry
  %5 = load i64, i64* %us, align 8, !dbg !1641
  ret i64 %5, !dbg !1642
}

declare i32 @av_parse_time(i64*, i8*, i32) #1

; Function Attrs: nounwind uwtable
define void @show_help_options(%struct.OptionDef* %options, i8* %msg, i32 %req_flags, i32 %rej_flags, i32 %alt_flags) #0 !dbg !1643 {
entry:
  %options.addr = alloca %struct.OptionDef*, align 8
  %msg.addr = alloca i8*, align 8
  %req_flags.addr = alloca i32, align 4
  %rej_flags.addr = alloca i32, align 4
  %alt_flags.addr = alloca i32, align 4
  %po = alloca %struct.OptionDef*, align 8
  %first = alloca i32, align 4
  %buf = alloca [64 x i8], align 16
  store %struct.OptionDef* %options, %struct.OptionDef** %options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %options.addr, metadata !1646, metadata !1512), !dbg !1647
  store i8* %msg, i8** %msg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %msg.addr, metadata !1648, metadata !1512), !dbg !1649
  store i32 %req_flags, i32* %req_flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %req_flags.addr, metadata !1650, metadata !1512), !dbg !1651
  store i32 %rej_flags, i32* %rej_flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rej_flags.addr, metadata !1652, metadata !1512), !dbg !1653
  store i32 %alt_flags, i32* %alt_flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alt_flags.addr, metadata !1654, metadata !1512), !dbg !1655
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %po, metadata !1656, metadata !1512), !dbg !1657
  call void @llvm.dbg.declare(metadata i32* %first, metadata !1658, metadata !1512), !dbg !1659
  store i32 1, i32* %first, align 4, !dbg !1660
  %0 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !1661
  store %struct.OptionDef* %0, %struct.OptionDef** %po, align 8, !dbg !1663
  br label %for.cond, !dbg !1664

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1665
  %name = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %1, i32 0, i32 0, !dbg !1668
  %2 = load i8*, i8** %name, align 8, !dbg !1668
  %tobool = icmp ne i8* %2, null, !dbg !1669
  br i1 %tobool, label %for.body, label %for.end, !dbg !1669

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata [64 x i8]* %buf, metadata !1670, metadata !1512), !dbg !1675
  %3 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1676
  %flags = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %3, i32 0, i32 1, !dbg !1678
  %4 = load i32, i32* %flags, align 8, !dbg !1678
  %5 = load i32, i32* %req_flags.addr, align 4, !dbg !1679
  %and = and i32 %4, %5, !dbg !1680
  %6 = load i32, i32* %req_flags.addr, align 4, !dbg !1681
  %cmp = icmp ne i32 %and, %6, !dbg !1682
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !1683

lor.lhs.false:                                    ; preds = %for.body
  %7 = load i32, i32* %alt_flags.addr, align 4, !dbg !1684
  %tobool1 = icmp ne i32 %7, 0, !dbg !1684
  br i1 %tobool1, label %land.lhs.true, label %lor.lhs.false5, !dbg !1685

land.lhs.true:                                    ; preds = %lor.lhs.false
  %8 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1686
  %flags2 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %8, i32 0, i32 1, !dbg !1688
  %9 = load i32, i32* %flags2, align 8, !dbg !1688
  %10 = load i32, i32* %alt_flags.addr, align 4, !dbg !1689
  %and3 = and i32 %9, %10, !dbg !1690
  %tobool4 = icmp ne i32 %and3, 0, !dbg !1690
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !1691

lor.lhs.false5:                                   ; preds = %land.lhs.true, %lor.lhs.false
  %11 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1692
  %flags6 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %11, i32 0, i32 1, !dbg !1693
  %12 = load i32, i32* %flags6, align 8, !dbg !1693
  %13 = load i32, i32* %rej_flags.addr, align 4, !dbg !1694
  %and7 = and i32 %12, %13, !dbg !1695
  %tobool8 = icmp ne i32 %and7, 0, !dbg !1695
  br i1 %tobool8, label %if.then, label %if.end, !dbg !1696

if.then:                                          ; preds = %lor.lhs.false5, %land.lhs.true, %for.body
  br label %for.inc, !dbg !1698

if.end:                                           ; preds = %lor.lhs.false5
  %14 = load i32, i32* %first, align 4, !dbg !1699
  %tobool9 = icmp ne i32 %14, 0, !dbg !1699
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !1701

if.then10:                                        ; preds = %if.end
  %15 = load i8*, i8** %msg.addr, align 8, !dbg !1702
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* %15), !dbg !1704
  store i32 0, i32* %first, align 4, !dbg !1705
  br label %if.end11, !dbg !1706

if.end11:                                         ; preds = %if.then10, %if.end
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0, !dbg !1707
  %16 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1708
  %name12 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %16, i32 0, i32 0, !dbg !1709
  %17 = load i8*, i8** %name12, align 8, !dbg !1709
  %call13 = call i64 @av_strlcpy(i8* %arraydecay, i8* %17, i64 64), !dbg !1710
  %18 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1711
  %argname = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %18, i32 0, i32 4, !dbg !1713
  %19 = load i8*, i8** %argname, align 8, !dbg !1713
  %tobool14 = icmp ne i8* %19, null, !dbg !1711
  br i1 %tobool14, label %if.then15, label %if.end21, !dbg !1714

if.then15:                                        ; preds = %if.end11
  %arraydecay16 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0, !dbg !1715
  %call17 = call i64 @av_strlcat(i8* %arraydecay16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), i64 64), !dbg !1717
  %arraydecay18 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0, !dbg !1718
  %20 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1719
  %argname19 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %20, i32 0, i32 4, !dbg !1720
  %21 = load i8*, i8** %argname19, align 8, !dbg !1720
  %call20 = call i64 @av_strlcat(i8* %arraydecay18, i8* %21, i64 64), !dbg !1721
  br label %if.end21, !dbg !1722

if.end21:                                         ; preds = %if.then15, %if.end11
  %arraydecay22 = getelementptr inbounds [64 x i8], [64 x i8]* %buf, i32 0, i32 0, !dbg !1723
  %22 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1724
  %help = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %22, i32 0, i32 3, !dbg !1725
  %23 = load i8*, i8** %help, align 8, !dbg !1725
  %call23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i32 0, i32 0), i8* %arraydecay22, i8* %23), !dbg !1726
  br label %for.inc, !dbg !1727

for.inc:                                          ; preds = %if.end21, %if.then
  %24 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1728
  %incdec.ptr = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %24, i32 1, !dbg !1728
  store %struct.OptionDef* %incdec.ptr, %struct.OptionDef** %po, align 8, !dbg !1728
  br label %for.cond, !dbg !1730, !llvm.loop !1731

for.end:                                          ; preds = %for.cond
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !1733
  ret void, !dbg !1734
}

declare i32 @printf(i8*, ...) #1

declare i64 @av_strlcpy(i8*, i8*, i64) #1

declare i64 @av_strlcat(i8*, i8*, i64) #1

; Function Attrs: nounwind uwtable
define void @show_help_children(%struct.AVClass* %class, i32 %flags) #0 !dbg !1735 {
entry:
  %class.addr = alloca %struct.AVClass*, align 8
  %flags.addr = alloca i32, align 4
  %child = alloca %struct.AVClass*, align 8
  store %struct.AVClass* %class, %struct.AVClass** %class.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVClass** %class.addr, metadata !1738, metadata !1512), !dbg !1739
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !1740, metadata !1512), !dbg !1741
  call void @llvm.dbg.declare(metadata %struct.AVClass** %child, metadata !1742, metadata !1512), !dbg !1743
  store %struct.AVClass* null, %struct.AVClass** %child, align 8, !dbg !1743
  %0 = load %struct.AVClass*, %struct.AVClass** %class.addr, align 8, !dbg !1744
  %option = getelementptr inbounds %struct.AVClass, %struct.AVClass* %0, i32 0, i32 2, !dbg !1746
  %1 = load %struct.AVOption*, %struct.AVOption** %option, align 8, !dbg !1746
  %tobool = icmp ne %struct.AVOption* %1, null, !dbg !1744
  br i1 %tobool, label %if.then, label %if.end, !dbg !1747

if.then:                                          ; preds = %entry
  %2 = bitcast %struct.AVClass** %class.addr to i8*, !dbg !1748
  %3 = load i32, i32* %flags.addr, align 4, !dbg !1750
  %call = call i32 @av_opt_show2(i8* %2, i8* null, i32 %3, i32 0), !dbg !1751
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !1752
  br label %if.end, !dbg !1753

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond, !dbg !1754

while.cond:                                       ; preds = %while.body, %if.end
  %4 = load %struct.AVClass*, %struct.AVClass** %class.addr, align 8, !dbg !1755
  %5 = load %struct.AVClass*, %struct.AVClass** %child, align 8, !dbg !1757
  %call2 = call %struct.AVClass* @av_opt_child_class_next(%struct.AVClass* %4, %struct.AVClass* %5), !dbg !1758
  store %struct.AVClass* %call2, %struct.AVClass** %child, align 8, !dbg !1759
  %tobool3 = icmp ne %struct.AVClass* %call2, null, !dbg !1760
  br i1 %tobool3, label %while.body, label %while.end, !dbg !1760

while.body:                                       ; preds = %while.cond
  %6 = load %struct.AVClass*, %struct.AVClass** %child, align 8, !dbg !1761
  %7 = load i32, i32* %flags.addr, align 4, !dbg !1762
  call void @show_help_children(%struct.AVClass* %6, i32 %7), !dbg !1763
  br label %while.cond, !dbg !1764, !llvm.loop !1766

while.end:                                        ; preds = %while.cond
  ret void, !dbg !1767
}

declare i32 @av_opt_show2(i8*, i8*, i32, i32) #1

declare %struct.AVClass* @av_opt_child_class_next(%struct.AVClass*, %struct.AVClass*) #1

; Function Attrs: nounwind uwtable
define i32 @parse_option(i8* %optctx, i8* %opt, i8* %arg, %struct.OptionDef* %options) #0 !dbg !1768 {
entry:
  %retval = alloca i32, align 4
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %options.addr = alloca %struct.OptionDef*, align 8
  %po = alloca %struct.OptionDef*, align 8
  %ret = alloca i32, align 4
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !1771, metadata !1512), !dbg !1772
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !1773, metadata !1512), !dbg !1774
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !1775, metadata !1512), !dbg !1776
  store %struct.OptionDef* %options, %struct.OptionDef** %options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %options.addr, metadata !1777, metadata !1512), !dbg !1778
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %po, metadata !1779, metadata !1512), !dbg !1780
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !1781, metadata !1512), !dbg !1782
  %0 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !1783
  %1 = load i8*, i8** %opt.addr, align 8, !dbg !1784
  %call = call %struct.OptionDef* @find_option(%struct.OptionDef* %0, i8* %1), !dbg !1785
  store %struct.OptionDef* %call, %struct.OptionDef** %po, align 8, !dbg !1786
  %2 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1787
  %name = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %2, i32 0, i32 0, !dbg !1789
  %3 = load i8*, i8** %name, align 8, !dbg !1789
  %tobool = icmp ne i8* %3, null, !dbg !1787
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !1790

land.lhs.true:                                    ; preds = %entry
  %4 = load i8*, i8** %opt.addr, align 8, !dbg !1791
  %arrayidx = getelementptr inbounds i8, i8* %4, i64 0, !dbg !1791
  %5 = load i8, i8* %arrayidx, align 1, !dbg !1791
  %conv = sext i8 %5 to i32, !dbg !1791
  %cmp = icmp eq i32 %conv, 110, !dbg !1793
  br i1 %cmp, label %land.lhs.true2, label %if.else, !dbg !1794

land.lhs.true2:                                   ; preds = %land.lhs.true
  %6 = load i8*, i8** %opt.addr, align 8, !dbg !1795
  %arrayidx3 = getelementptr inbounds i8, i8* %6, i64 1, !dbg !1795
  %7 = load i8, i8* %arrayidx3, align 1, !dbg !1795
  %conv4 = sext i8 %7 to i32, !dbg !1795
  %cmp5 = icmp eq i32 %conv4, 111, !dbg !1797
  br i1 %cmp5, label %if.then, label %if.else, !dbg !1798

if.then:                                          ; preds = %land.lhs.true2
  %8 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !1799
  %9 = load i8*, i8** %opt.addr, align 8, !dbg !1801
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 2, !dbg !1802
  %call7 = call %struct.OptionDef* @find_option(%struct.OptionDef* %8, i8* %add.ptr), !dbg !1803
  store %struct.OptionDef* %call7, %struct.OptionDef** %po, align 8, !dbg !1804
  %10 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1805
  %name8 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %10, i32 0, i32 0, !dbg !1807
  %11 = load i8*, i8** %name8, align 8, !dbg !1807
  %tobool9 = icmp ne i8* %11, null, !dbg !1805
  br i1 %tobool9, label %land.lhs.true10, label %if.end, !dbg !1808

land.lhs.true10:                                  ; preds = %if.then
  %12 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1809
  %flags = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %12, i32 0, i32 1, !dbg !1811
  %13 = load i32, i32* %flags, align 8, !dbg !1811
  %and = and i32 %13, 2, !dbg !1812
  %tobool11 = icmp ne i32 %and, 0, !dbg !1812
  br i1 %tobool11, label %if.then12, label %if.end, !dbg !1813

if.then12:                                        ; preds = %land.lhs.true10
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0), i8** %arg.addr, align 8, !dbg !1814
  br label %if.end, !dbg !1815

if.end:                                           ; preds = %if.then12, %land.lhs.true10, %if.then
  br label %if.end18, !dbg !1816

if.else:                                          ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %14 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1817
  %flags13 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %14, i32 0, i32 1, !dbg !1820
  %15 = load i32, i32* %flags13, align 8, !dbg !1820
  %and14 = and i32 %15, 2, !dbg !1821
  %tobool15 = icmp ne i32 %and14, 0, !dbg !1821
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !1817

if.then16:                                        ; preds = %if.else
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0), i8** %arg.addr, align 8, !dbg !1822
  br label %if.end17, !dbg !1823

if.end17:                                         ; preds = %if.then16, %if.else
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.end
  %16 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1824
  %name19 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %16, i32 0, i32 0, !dbg !1826
  %17 = load i8*, i8** %name19, align 8, !dbg !1826
  %tobool20 = icmp ne i8* %17, null, !dbg !1824
  br i1 %tobool20, label %if.end23, label %if.then21, !dbg !1827

if.then21:                                        ; preds = %if.end18
  %18 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !1828
  %call22 = call %struct.OptionDef* @find_option(%struct.OptionDef* %18, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0)), !dbg !1829
  store %struct.OptionDef* %call22, %struct.OptionDef** %po, align 8, !dbg !1830
  br label %if.end23, !dbg !1831

if.end23:                                         ; preds = %if.then21, %if.end18
  %19 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1832
  %name24 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %19, i32 0, i32 0, !dbg !1834
  %20 = load i8*, i8** %name24, align 8, !dbg !1834
  %tobool25 = icmp ne i8* %20, null, !dbg !1832
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !1835

if.then26:                                        ; preds = %if.end23
  %21 = load i8*, i8** %opt.addr, align 8, !dbg !1836
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.16, i32 0, i32 0), i8* %21), !dbg !1838
  store i32 -22, i32* %retval, align 4, !dbg !1839
  br label %return, !dbg !1839

if.end27:                                         ; preds = %if.end23
  %22 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1840
  %flags28 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %22, i32 0, i32 1, !dbg !1842
  %23 = load i32, i32* %flags28, align 8, !dbg !1842
  %and29 = and i32 %23, 1, !dbg !1843
  %tobool30 = icmp ne i32 %and29, 0, !dbg !1843
  br i1 %tobool30, label %land.lhs.true31, label %if.end34, !dbg !1844

land.lhs.true31:                                  ; preds = %if.end27
  %24 = load i8*, i8** %arg.addr, align 8, !dbg !1845
  %tobool32 = icmp ne i8* %24, null, !dbg !1845
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !1847

if.then33:                                        ; preds = %land.lhs.true31
  %25 = load i8*, i8** %opt.addr, align 8, !dbg !1848
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.17, i32 0, i32 0), i8* %25), !dbg !1850
  store i32 -22, i32* %retval, align 4, !dbg !1851
  br label %return, !dbg !1851

if.end34:                                         ; preds = %land.lhs.true31, %if.end27
  %26 = load i8*, i8** %optctx.addr, align 8, !dbg !1852
  %27 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1853
  %28 = load i8*, i8** %opt.addr, align 8, !dbg !1854
  %29 = load i8*, i8** %arg.addr, align 8, !dbg !1855
  %call35 = call i32 @write_option(i8* %26, %struct.OptionDef* %27, i8* %28, i8* %29), !dbg !1856
  store i32 %call35, i32* %ret, align 4, !dbg !1857
  %30 = load i32, i32* %ret, align 4, !dbg !1858
  %cmp36 = icmp slt i32 %30, 0, !dbg !1860
  br i1 %cmp36, label %if.then38, label %if.end39, !dbg !1861

if.then38:                                        ; preds = %if.end34
  %31 = load i32, i32* %ret, align 4, !dbg !1862
  store i32 %31, i32* %retval, align 4, !dbg !1863
  br label %return, !dbg !1863

if.end39:                                         ; preds = %if.end34
  %32 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !1864
  %flags40 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %32, i32 0, i32 1, !dbg !1865
  %33 = load i32, i32* %flags40, align 8, !dbg !1865
  %and41 = and i32 %33, 1, !dbg !1866
  %tobool42 = icmp ne i32 %and41, 0, !dbg !1867
  %lnot = xor i1 %tobool42, true, !dbg !1867
  %lnot43 = xor i1 %lnot, true, !dbg !1868
  %lnot.ext = zext i1 %lnot43 to i32, !dbg !1868
  store i32 %lnot.ext, i32* %retval, align 4, !dbg !1869
  br label %return, !dbg !1869

return:                                           ; preds = %if.end39, %if.then38, %if.then33, %if.then26
  %34 = load i32, i32* %retval, align 4, !dbg !1870
  ret i32 %34, !dbg !1870
}

; Function Attrs: nounwind uwtable
define internal %struct.OptionDef* @find_option(%struct.OptionDef* %po, i8* %name) #0 !dbg !1871 {
entry:
  %po.addr = alloca %struct.OptionDef*, align 8
  %name.addr = alloca i8*, align 8
  %p = alloca i8*, align 8
  %len = alloca i32, align 4
  store %struct.OptionDef* %po, %struct.OptionDef** %po.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %po.addr, metadata !1874, metadata !1512), !dbg !1875
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1876, metadata !1512), !dbg !1877
  call void @llvm.dbg.declare(metadata i8** %p, metadata !1878, metadata !1512), !dbg !1879
  %0 = load i8*, i8** %name.addr, align 8, !dbg !1880
  %call = call i8* @strchr(i8* %0, i32 58) #14, !dbg !1881
  store i8* %call, i8** %p, align 8, !dbg !1879
  call void @llvm.dbg.declare(metadata i32* %len, metadata !1882, metadata !1512), !dbg !1883
  %1 = load i8*, i8** %p, align 8, !dbg !1884
  %tobool = icmp ne i8* %1, null, !dbg !1884
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !1884

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %p, align 8, !dbg !1885
  %3 = load i8*, i8** %name.addr, align 8, !dbg !1887
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64, !dbg !1888
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64, !dbg !1888
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !1888
  br label %cond.end, !dbg !1889

cond.false:                                       ; preds = %entry
  %4 = load i8*, i8** %name.addr, align 8, !dbg !1890
  %call1 = call i64 @strlen(i8* %4) #14, !dbg !1892
  br label %cond.end, !dbg !1893

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %sub.ptr.sub, %cond.true ], [ %call1, %cond.false ], !dbg !1894
  %conv = trunc i64 %cond to i32, !dbg !1894
  store i32 %conv, i32* %len, align 4, !dbg !1896
  br label %while.cond, !dbg !1897

while.cond:                                       ; preds = %if.end, %cond.end
  %5 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !1898
  %name2 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %5, i32 0, i32 0, !dbg !1899
  %6 = load i8*, i8** %name2, align 8, !dbg !1899
  %tobool3 = icmp ne i8* %6, null, !dbg !1900
  br i1 %tobool3, label %while.body, label %while.end, !dbg !1900

while.body:                                       ; preds = %while.cond
  %7 = load i8*, i8** %name.addr, align 8, !dbg !1901
  %8 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !1904
  %name4 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %8, i32 0, i32 0, !dbg !1905
  %9 = load i8*, i8** %name4, align 8, !dbg !1905
  %10 = load i32, i32* %len, align 4, !dbg !1906
  %conv5 = sext i32 %10 to i64, !dbg !1906
  %call6 = call i32 @strncmp(i8* %7, i8* %9, i64 %conv5) #14, !dbg !1907
  %tobool7 = icmp ne i32 %call6, 0, !dbg !1907
  br i1 %tobool7, label %if.end, label %land.lhs.true, !dbg !1908

land.lhs.true:                                    ; preds = %while.body
  %11 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !1909
  %name8 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %11, i32 0, i32 0, !dbg !1911
  %12 = load i8*, i8** %name8, align 8, !dbg !1911
  %call9 = call i64 @strlen(i8* %12) #14, !dbg !1912
  %13 = load i32, i32* %len, align 4, !dbg !1913
  %conv10 = sext i32 %13 to i64, !dbg !1913
  %cmp = icmp eq i64 %call9, %conv10, !dbg !1914
  br i1 %cmp, label %if.then, label %if.end, !dbg !1915

if.then:                                          ; preds = %land.lhs.true
  br label %while.end, !dbg !1916

if.end:                                           ; preds = %land.lhs.true, %while.body
  %14 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !1917
  %incdec.ptr = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %14, i32 1, !dbg !1917
  store %struct.OptionDef* %incdec.ptr, %struct.OptionDef** %po.addr, align 8, !dbg !1917
  br label %while.cond, !dbg !1918, !llvm.loop !1919

while.end:                                        ; preds = %if.then, %while.cond
  %15 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !1920
  ret %struct.OptionDef* %15, !dbg !1921
}

; Function Attrs: nounwind uwtable
define internal i32 @write_option(i8* %optctx, %struct.OptionDef* %po, i8* %opt, i8* %arg) #0 !dbg !1922 {
entry:
  %retval = alloca i32, align 4
  %optctx.addr = alloca i8*, align 8
  %po.addr = alloca %struct.OptionDef*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %dst = alloca i8*, align 8
  %dstcount = alloca i32*, align 8
  %so = alloca %struct.SpecifierOpt**, align 8
  %p = alloca i8*, align 8
  %str = alloca i8*, align 8
  %str25 = alloca i8*, align 8
  %ret = alloca i32, align 4
  %.compoundliteral = alloca [64 x i8], align 1
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !1925, metadata !1512), !dbg !1926
  store %struct.OptionDef* %po, %struct.OptionDef** %po.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %po.addr, metadata !1927, metadata !1512), !dbg !1928
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !1929, metadata !1512), !dbg !1930
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !1931, metadata !1512), !dbg !1932
  call void @llvm.dbg.declare(metadata i8** %dst, metadata !1933, metadata !1512), !dbg !1934
  %0 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !1935
  %flags = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %0, i32 0, i32 1, !dbg !1936
  %1 = load i32, i32* %flags, align 8, !dbg !1936
  %and = and i32 %1, 49152, !dbg !1937
  %tobool = icmp ne i32 %and, 0, !dbg !1937
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !1935

cond.true:                                        ; preds = %entry
  %2 = load i8*, i8** %optctx.addr, align 8, !dbg !1938
  %3 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !1939
  %u = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %3, i32 0, i32 2, !dbg !1940
  %off = bitcast %union.anon* %u to i64*, !dbg !1941
  %4 = load i64, i64* %off, align 8, !dbg !1941
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %4, !dbg !1942
  br label %cond.end, !dbg !1943

cond.false:                                       ; preds = %entry
  %5 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !1945
  %u1 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %5, i32 0, i32 2, !dbg !1946
  %dst_ptr = bitcast %union.anon* %u1 to i8**, !dbg !1947
  %6 = load i8*, i8** %dst_ptr, align 8, !dbg !1947
  br label %cond.end, !dbg !1948

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %6, %cond.false ], !dbg !1950
  store i8* %cond, i8** %dst, align 8, !dbg !1952
  call void @llvm.dbg.declare(metadata i32** %dstcount, metadata !1953, metadata !1512), !dbg !1954
  %7 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !1955
  %flags2 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %7, i32 0, i32 1, !dbg !1957
  %8 = load i32, i32* %flags2, align 8, !dbg !1957
  %and3 = and i32 %8, 32768, !dbg !1958
  %tobool4 = icmp ne i32 %and3, 0, !dbg !1958
  br i1 %tobool4, label %if.then, label %if.end20, !dbg !1959

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.SpecifierOpt*** %so, metadata !1960, metadata !1512), !dbg !1977
  %9 = load i8*, i8** %dst, align 8, !dbg !1978
  %10 = bitcast i8* %9 to %struct.SpecifierOpt**, !dbg !1978
  store %struct.SpecifierOpt** %10, %struct.SpecifierOpt*** %so, align 8, !dbg !1977
  call void @llvm.dbg.declare(metadata i8** %p, metadata !1979, metadata !1512), !dbg !1980
  %11 = load i8*, i8** %opt.addr, align 8, !dbg !1981
  %call = call i8* @strchr(i8* %11, i32 58) #14, !dbg !1982
  store i8* %call, i8** %p, align 8, !dbg !1980
  call void @llvm.dbg.declare(metadata i8** %str, metadata !1983, metadata !1512), !dbg !1984
  %12 = load %struct.SpecifierOpt**, %struct.SpecifierOpt*** %so, align 8, !dbg !1985
  %add.ptr5 = getelementptr inbounds %struct.SpecifierOpt*, %struct.SpecifierOpt** %12, i64 1, !dbg !1986
  %13 = bitcast %struct.SpecifierOpt** %add.ptr5 to i32*, !dbg !1987
  store i32* %13, i32** %dstcount, align 8, !dbg !1988
  %14 = load %struct.SpecifierOpt**, %struct.SpecifierOpt*** %so, align 8, !dbg !1989
  %15 = load %struct.SpecifierOpt*, %struct.SpecifierOpt** %14, align 8, !dbg !1990
  %16 = bitcast %struct.SpecifierOpt* %15 to i8*, !dbg !1990
  %17 = load i32*, i32** %dstcount, align 8, !dbg !1991
  %18 = load i32*, i32** %dstcount, align 8, !dbg !1992
  %19 = load i32, i32* %18, align 4, !dbg !1993
  %add = add nsw i32 %19, 1, !dbg !1994
  %call6 = call i8* @grow_array(i8* %16, i32 16, i32* %17, i32 %add), !dbg !1995
  %20 = bitcast i8* %call6 to %struct.SpecifierOpt*, !dbg !1995
  %21 = load %struct.SpecifierOpt**, %struct.SpecifierOpt*** %so, align 8, !dbg !1996
  store %struct.SpecifierOpt* %20, %struct.SpecifierOpt** %21, align 8, !dbg !1997
  %22 = load i8*, i8** %p, align 8, !dbg !1998
  %tobool7 = icmp ne i8* %22, null, !dbg !1998
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !1998

cond.true8:                                       ; preds = %if.then
  %23 = load i8*, i8** %p, align 8, !dbg !1999
  %add.ptr9 = getelementptr inbounds i8, i8* %23, i64 1, !dbg !2001
  br label %cond.end11, !dbg !2002

cond.false10:                                     ; preds = %if.then
  br label %cond.end11, !dbg !2003

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi i8* [ %add.ptr9, %cond.true8 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), %cond.false10 ], !dbg !2005
  %call13 = call noalias i8* @av_strdup(i8* %cond12), !dbg !2007
  store i8* %call13, i8** %str, align 8, !dbg !2008
  %24 = load i8*, i8** %str, align 8, !dbg !2009
  %tobool14 = icmp ne i8* %24, null, !dbg !2009
  br i1 %tobool14, label %if.end, label %if.then15, !dbg !2011

if.then15:                                        ; preds = %cond.end11
  store i32 -12, i32* %retval, align 4, !dbg !2012
  br label %return, !dbg !2012

if.end:                                           ; preds = %cond.end11
  %25 = load i8*, i8** %str, align 8, !dbg !2013
  %26 = load i32*, i32** %dstcount, align 8, !dbg !2014
  %27 = load i32, i32* %26, align 4, !dbg !2015
  %sub = sub nsw i32 %27, 1, !dbg !2016
  %idxprom = sext i32 %sub to i64, !dbg !2017
  %28 = load %struct.SpecifierOpt**, %struct.SpecifierOpt*** %so, align 8, !dbg !2018
  %29 = load %struct.SpecifierOpt*, %struct.SpecifierOpt** %28, align 8, !dbg !2019
  %arrayidx = getelementptr inbounds %struct.SpecifierOpt, %struct.SpecifierOpt* %29, i64 %idxprom, !dbg !2017
  %specifier = getelementptr inbounds %struct.SpecifierOpt, %struct.SpecifierOpt* %arrayidx, i32 0, i32 0, !dbg !2020
  store i8* %25, i8** %specifier, align 8, !dbg !2021
  %30 = load i32*, i32** %dstcount, align 8, !dbg !2022
  %31 = load i32, i32* %30, align 4, !dbg !2023
  %sub16 = sub nsw i32 %31, 1, !dbg !2024
  %idxprom17 = sext i32 %sub16 to i64, !dbg !2025
  %32 = load %struct.SpecifierOpt**, %struct.SpecifierOpt*** %so, align 8, !dbg !2026
  %33 = load %struct.SpecifierOpt*, %struct.SpecifierOpt** %32, align 8, !dbg !2027
  %arrayidx18 = getelementptr inbounds %struct.SpecifierOpt, %struct.SpecifierOpt* %33, i64 %idxprom17, !dbg !2025
  %u19 = getelementptr inbounds %struct.SpecifierOpt, %struct.SpecifierOpt* %arrayidx18, i32 0, i32 1, !dbg !2028
  %34 = bitcast %union.anon.2* %u19 to i8*, !dbg !2029
  store i8* %34, i8** %dst, align 8, !dbg !2030
  br label %if.end20, !dbg !2031

if.end20:                                         ; preds = %if.end, %cond.end
  %35 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !2032
  %flags21 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %35, i32 0, i32 1, !dbg !2034
  %36 = load i32, i32* %flags21, align 8, !dbg !2034
  %and22 = and i32 %36, 8, !dbg !2035
  %tobool23 = icmp ne i32 %and22, 0, !dbg !2035
  br i1 %tobool23, label %if.then24, label %if.else, !dbg !2036

if.then24:                                        ; preds = %if.end20
  call void @llvm.dbg.declare(metadata i8** %str25, metadata !2037, metadata !1512), !dbg !2039
  %37 = load i8*, i8** %arg.addr, align 8, !dbg !2040
  %call26 = call noalias i8* @av_strdup(i8* %37), !dbg !2041
  store i8* %call26, i8** %str25, align 8, !dbg !2042
  %38 = load i8*, i8** %dst, align 8, !dbg !2043
  call void @av_freep(i8* %38), !dbg !2044
  %39 = load i8*, i8** %str25, align 8, !dbg !2045
  %tobool27 = icmp ne i8* %39, null, !dbg !2045
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !2047

if.then28:                                        ; preds = %if.then24
  store i32 -12, i32* %retval, align 4, !dbg !2048
  br label %return, !dbg !2048

if.end29:                                         ; preds = %if.then24
  %40 = load i8*, i8** %str25, align 8, !dbg !2049
  %41 = load i8*, i8** %dst, align 8, !dbg !2050
  %42 = bitcast i8* %41 to i8**, !dbg !2051
  store i8* %40, i8** %42, align 8, !dbg !2052
  br label %if.end81, !dbg !2053

if.else:                                          ; preds = %if.end20
  %43 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !2054
  %flags30 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %43, i32 0, i32 1, !dbg !2057
  %44 = load i32, i32* %flags30, align 8, !dbg !2057
  %and31 = and i32 %44, 2, !dbg !2058
  %tobool32 = icmp ne i32 %and31, 0, !dbg !2058
  br i1 %tobool32, label %if.then36, label %lor.lhs.false, !dbg !2059

lor.lhs.false:                                    ; preds = %if.else
  %45 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !2060
  %flags33 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %45, i32 0, i32 1, !dbg !2062
  %46 = load i32, i32* %flags33, align 8, !dbg !2062
  %and34 = and i32 %46, 128, !dbg !2063
  %tobool35 = icmp ne i32 %and34, 0, !dbg !2063
  br i1 %tobool35, label %if.then36, label %if.else38, !dbg !2064

if.then36:                                        ; preds = %lor.lhs.false, %if.else
  %47 = load i8*, i8** %opt.addr, align 8, !dbg !2065
  %48 = load i8*, i8** %arg.addr, align 8, !dbg !2067
  %call37 = call double @parse_number_or_die(i8* %47, i8* %48, i32 1024, double 0xC1E0000000000000, double 0x41DFFFFFFFC00000), !dbg !2068
  %conv = fptosi double %call37 to i32, !dbg !2068
  %49 = load i8*, i8** %dst, align 8, !dbg !2069
  %50 = bitcast i8* %49 to i32*, !dbg !2070
  store i32 %conv, i32* %50, align 4, !dbg !2071
  br label %if.end80, !dbg !2072

if.else38:                                        ; preds = %lor.lhs.false
  %51 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !2073
  %flags39 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %51, i32 0, i32 1, !dbg !2076
  %52 = load i32, i32* %flags39, align 8, !dbg !2076
  %and40 = and i32 %52, 1024, !dbg !2077
  %tobool41 = icmp ne i32 %and40, 0, !dbg !2077
  br i1 %tobool41, label %if.then42, label %if.else45, !dbg !2073

if.then42:                                        ; preds = %if.else38
  %53 = load i8*, i8** %opt.addr, align 8, !dbg !2078
  %54 = load i8*, i8** %arg.addr, align 8, !dbg !2080
  %call43 = call double @parse_number_or_die(i8* %53, i8* %54, i32 1024, double 0xC3E0000000000000, double 0x43E0000000000000), !dbg !2081
  %conv44 = fptosi double %call43 to i64, !dbg !2081
  %55 = load i8*, i8** %dst, align 8, !dbg !2082
  %56 = bitcast i8* %55 to i64*, !dbg !2083
  store i64 %conv44, i64* %56, align 8, !dbg !2084
  br label %if.end79, !dbg !2085

if.else45:                                        ; preds = %if.else38
  %57 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !2086
  %flags46 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %57, i32 0, i32 1, !dbg !2089
  %58 = load i32, i32* %flags46, align 8, !dbg !2089
  %and47 = and i32 %58, 65536, !dbg !2090
  %tobool48 = icmp ne i32 %and47, 0, !dbg !2090
  br i1 %tobool48, label %if.then49, label %if.else51, !dbg !2086

if.then49:                                        ; preds = %if.else45
  %59 = load i8*, i8** %opt.addr, align 8, !dbg !2091
  %60 = load i8*, i8** %arg.addr, align 8, !dbg !2093
  %call50 = call i64 @parse_time_or_die(i8* %59, i8* %60, i32 1), !dbg !2094
  %61 = load i8*, i8** %dst, align 8, !dbg !2095
  %62 = bitcast i8* %61 to i64*, !dbg !2096
  store i64 %call50, i64* %62, align 8, !dbg !2097
  br label %if.end78, !dbg !2098

if.else51:                                        ; preds = %if.else45
  %63 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !2099
  %flags52 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %63, i32 0, i32 1, !dbg !2102
  %64 = load i32, i32* %flags52, align 8, !dbg !2102
  %and53 = and i32 %64, 256, !dbg !2103
  %tobool54 = icmp ne i32 %and53, 0, !dbg !2103
  br i1 %tobool54, label %if.then55, label %if.else58, !dbg !2099

if.then55:                                        ; preds = %if.else51
  %65 = load i8*, i8** %opt.addr, align 8, !dbg !2104
  %66 = load i8*, i8** %arg.addr, align 8, !dbg !2106
  %call56 = call double @parse_number_or_die(i8* %65, i8* %66, i32 256, double 0xFFF0000000000000, double 0x7FF0000000000000), !dbg !2107
  %conv57 = fptrunc double %call56 to float, !dbg !2107
  %67 = load i8*, i8** %dst, align 8, !dbg !2108
  %68 = bitcast i8* %67 to float*, !dbg !2109
  store float %conv57, float* %68, align 4, !dbg !2110
  br label %if.end77, !dbg !2111

if.else58:                                        ; preds = %if.else51
  %69 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !2112
  %flags59 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %69, i32 0, i32 1, !dbg !2115
  %70 = load i32, i32* %flags59, align 8, !dbg !2115
  %and60 = and i32 %70, 131072, !dbg !2116
  %tobool61 = icmp ne i32 %and60, 0, !dbg !2116
  br i1 %tobool61, label %if.then62, label %if.else64, !dbg !2112

if.then62:                                        ; preds = %if.else58
  %71 = load i8*, i8** %opt.addr, align 8, !dbg !2117
  %72 = load i8*, i8** %arg.addr, align 8, !dbg !2119
  %call63 = call double @parse_number_or_die(i8* %71, i8* %72, i32 131072, double 0xFFF0000000000000, double 0x7FF0000000000000), !dbg !2120
  %73 = load i8*, i8** %dst, align 8, !dbg !2121
  %74 = bitcast i8* %73 to double*, !dbg !2122
  store double %call63, double* %74, align 8, !dbg !2123
  br label %if.end76, !dbg !2124

if.else64:                                        ; preds = %if.else58
  %75 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !2125
  %u65 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %75, i32 0, i32 2, !dbg !2128
  %func_arg = bitcast %union.anon* %u65 to i32 (i8*, i8*, i8*)**, !dbg !2129
  %76 = load i32 (i8*, i8*, i8*)*, i32 (i8*, i8*, i8*)** %func_arg, align 8, !dbg !2129
  %tobool66 = icmp ne i32 (i8*, i8*, i8*)* %76, null, !dbg !2125
  br i1 %tobool66, label %if.then67, label %if.end75, !dbg !2125

if.then67:                                        ; preds = %if.else64
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !2130, metadata !1512), !dbg !2132
  %77 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !2133
  %u68 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %77, i32 0, i32 2, !dbg !2134
  %func_arg69 = bitcast %union.anon* %u68 to i32 (i8*, i8*, i8*)**, !dbg !2135
  %78 = load i32 (i8*, i8*, i8*)*, i32 (i8*, i8*, i8*)** %func_arg69, align 8, !dbg !2135
  %79 = load i8*, i8** %optctx.addr, align 8, !dbg !2136
  %80 = load i8*, i8** %opt.addr, align 8, !dbg !2137
  %81 = load i8*, i8** %arg.addr, align 8, !dbg !2138
  %call70 = call i32 %78(i8* %79, i8* %80, i8* %81), !dbg !2133
  store i32 %call70, i32* %ret, align 4, !dbg !2132
  %82 = load i32, i32* %ret, align 4, !dbg !2139
  %cmp = icmp slt i32 %82, 0, !dbg !2141
  br i1 %cmp, label %if.then72, label %if.end74, !dbg !2142

if.then72:                                        ; preds = %if.then67
  %83 = load i8*, i8** %arg.addr, align 8, !dbg !2143
  %84 = load i8*, i8** %opt.addr, align 8, !dbg !2145
  %85 = bitcast [64 x i8]* %.compoundliteral to i8*, !dbg !2146
  call void @llvm.memset.p0i8.i64(i8* %85, i8 0, i64 64, i32 1, i1 false), !dbg !2146
  %arrayinit.begin = getelementptr inbounds [64 x i8], [64 x i8]* %.compoundliteral, i64 0, i64 0, !dbg !2147
  store i8 0, i8* %arrayinit.begin, align 1, !dbg !2147
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %.compoundliteral, i32 0, i32 0, !dbg !2146
  %86 = load i32, i32* %ret, align 4, !dbg !2148
  %call73 = call i8* @av_make_error_string(i8* %arraydecay, i64 64, i32 %86), !dbg !2149
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.118, i32 0, i32 0), i8* %83, i8* %84, i8* %call73), !dbg !2151
  %87 = load i32, i32* %ret, align 4, !dbg !2152
  store i32 %87, i32* %retval, align 4, !dbg !2153
  br label %return, !dbg !2153

if.end74:                                         ; preds = %if.then67
  br label %if.end75, !dbg !2154

if.end75:                                         ; preds = %if.end74, %if.else64
  br label %if.end76

if.end76:                                         ; preds = %if.end75, %if.then62
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.then55
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.then49
  br label %if.end79

if.end79:                                         ; preds = %if.end78, %if.then42
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.then36
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.end29
  %88 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !2155
  %flags82 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %88, i32 0, i32 1, !dbg !2157
  %89 = load i32, i32* %flags82, align 8, !dbg !2157
  %and83 = and i32 %89, 2048, !dbg !2158
  %tobool84 = icmp ne i32 %and83, 0, !dbg !2158
  br i1 %tobool84, label %if.then85, label %if.end86, !dbg !2159

if.then85:                                        ; preds = %if.end81
  call void @exit_program(i32 0) #13, !dbg !2160
  unreachable, !dbg !2160

if.end86:                                         ; preds = %if.end81
  store i32 0, i32* %retval, align 4, !dbg !2161
  br label %return, !dbg !2161

return:                                           ; preds = %if.end86, %if.then72, %if.then28, %if.then15
  %90 = load i32, i32* %retval, align 4, !dbg !2162
  ret i32 %90, !dbg !2162
}

; Function Attrs: nounwind uwtable
define void @parse_options(i8* %optctx, i32 %argc, i8** %argv, %struct.OptionDef* %options, void (i8*, i8*)* %parse_arg_function) #0 !dbg !2163 {
entry:
  %optctx.addr = alloca i8*, align 8
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %options.addr = alloca %struct.OptionDef*, align 8
  %parse_arg_function.addr = alloca void (i8*, i8*)*, align 8
  %opt = alloca i8*, align 8
  %optindex = alloca i32, align 4
  %handleoptions = alloca i32, align 4
  %ret = alloca i32, align 4
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !2169, metadata !1512), !dbg !2170
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !2171, metadata !1512), !dbg !2172
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !2173, metadata !1512), !dbg !2174
  store %struct.OptionDef* %options, %struct.OptionDef** %options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %options.addr, metadata !2175, metadata !1512), !dbg !2176
  store void (i8*, i8*)* %parse_arg_function, void (i8*, i8*)** %parse_arg_function.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*, i8*)** %parse_arg_function.addr, metadata !2177, metadata !1512), !dbg !2178
  call void @llvm.dbg.declare(metadata i8** %opt, metadata !2179, metadata !1512), !dbg !2180
  call void @llvm.dbg.declare(metadata i32* %optindex, metadata !2181, metadata !1512), !dbg !2182
  call void @llvm.dbg.declare(metadata i32* %handleoptions, metadata !2183, metadata !1512), !dbg !2184
  store i32 1, i32* %handleoptions, align 4, !dbg !2184
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !2185, metadata !1512), !dbg !2186
  call void @prepare_app_arguments(i32* %argc.addr, i8*** %argv.addr), !dbg !2187
  store i32 1, i32* %optindex, align 4, !dbg !2188
  br label %while.cond, !dbg !2189

while.cond:                                       ; preds = %if.end28, %if.then18, %entry
  %0 = load i32, i32* %optindex, align 4, !dbg !2190
  %1 = load i32, i32* %argc.addr, align 4, !dbg !2192
  %cmp = icmp slt i32 %0, %1, !dbg !2193
  br i1 %cmp, label %while.body, label %while.end, !dbg !2194

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %optindex, align 4, !dbg !2195
  %inc = add nsw i32 %2, 1, !dbg !2195
  store i32 %inc, i32* %optindex, align 4, !dbg !2195
  %idxprom = sext i32 %2 to i64, !dbg !2197
  %3 = load i8**, i8*** %argv.addr, align 8, !dbg !2197
  %arrayidx = getelementptr inbounds i8*, i8** %3, i64 %idxprom, !dbg !2197
  %4 = load i8*, i8** %arrayidx, align 8, !dbg !2197
  store i8* %4, i8** %opt, align 8, !dbg !2198
  %5 = load i32, i32* %handleoptions, align 4, !dbg !2199
  %tobool = icmp ne i32 %5, 0, !dbg !2199
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !2201

land.lhs.true:                                    ; preds = %while.body
  %6 = load i8*, i8** %opt, align 8, !dbg !2202
  %arrayidx1 = getelementptr inbounds i8, i8* %6, i64 0, !dbg !2202
  %7 = load i8, i8* %arrayidx1, align 1, !dbg !2202
  %conv = sext i8 %7 to i32, !dbg !2202
  %cmp2 = icmp eq i32 %conv, 45, !dbg !2204
  br i1 %cmp2, label %land.lhs.true4, label %if.else, !dbg !2205

land.lhs.true4:                                   ; preds = %land.lhs.true
  %8 = load i8*, i8** %opt, align 8, !dbg !2206
  %arrayidx5 = getelementptr inbounds i8, i8* %8, i64 1, !dbg !2206
  %9 = load i8, i8* %arrayidx5, align 1, !dbg !2206
  %conv6 = sext i8 %9 to i32, !dbg !2206
  %cmp7 = icmp ne i32 %conv6, 0, !dbg !2208
  br i1 %cmp7, label %if.then, label %if.else, !dbg !2209

if.then:                                          ; preds = %land.lhs.true4
  %10 = load i8*, i8** %opt, align 8, !dbg !2210
  %arrayidx9 = getelementptr inbounds i8, i8* %10, i64 1, !dbg !2210
  %11 = load i8, i8* %arrayidx9, align 1, !dbg !2210
  %conv10 = sext i8 %11 to i32, !dbg !2210
  %cmp11 = icmp eq i32 %conv10, 45, !dbg !2213
  br i1 %cmp11, label %land.lhs.true13, label %if.end, !dbg !2214

land.lhs.true13:                                  ; preds = %if.then
  %12 = load i8*, i8** %opt, align 8, !dbg !2215
  %arrayidx14 = getelementptr inbounds i8, i8* %12, i64 2, !dbg !2215
  %13 = load i8, i8* %arrayidx14, align 1, !dbg !2215
  %conv15 = sext i8 %13 to i32, !dbg !2215
  %cmp16 = icmp eq i32 %conv15, 0, !dbg !2217
  br i1 %cmp16, label %if.then18, label %if.end, !dbg !2218

if.then18:                                        ; preds = %land.lhs.true13
  store i32 0, i32* %handleoptions, align 4, !dbg !2219
  br label %while.cond, !dbg !2221, !llvm.loop !2222

if.end:                                           ; preds = %land.lhs.true13, %if.then
  %14 = load i8*, i8** %opt, align 8, !dbg !2223
  %incdec.ptr = getelementptr inbounds i8, i8* %14, i32 1, !dbg !2223
  store i8* %incdec.ptr, i8** %opt, align 8, !dbg !2223
  %15 = load i8*, i8** %optctx.addr, align 8, !dbg !2224
  %16 = load i8*, i8** %opt, align 8, !dbg !2226
  %17 = load i32, i32* %optindex, align 4, !dbg !2227
  %idxprom19 = sext i32 %17 to i64, !dbg !2228
  %18 = load i8**, i8*** %argv.addr, align 8, !dbg !2228
  %arrayidx20 = getelementptr inbounds i8*, i8** %18, i64 %idxprom19, !dbg !2228
  %19 = load i8*, i8** %arrayidx20, align 8, !dbg !2228
  %20 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !2229
  %call = call i32 @parse_option(i8* %15, i8* %16, i8* %19, %struct.OptionDef* %20), !dbg !2230
  store i32 %call, i32* %ret, align 4, !dbg !2231
  %cmp21 = icmp slt i32 %call, 0, !dbg !2232
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !2233

if.then23:                                        ; preds = %if.end
  call void @exit_program(i32 1) #13, !dbg !2234
  unreachable, !dbg !2234

if.end24:                                         ; preds = %if.end
  %21 = load i32, i32* %ret, align 4, !dbg !2235
  %22 = load i32, i32* %optindex, align 4, !dbg !2236
  %add = add nsw i32 %22, %21, !dbg !2236
  store i32 %add, i32* %optindex, align 4, !dbg !2236
  br label %if.end28, !dbg !2237

if.else:                                          ; preds = %land.lhs.true4, %land.lhs.true, %while.body
  %23 = load void (i8*, i8*)*, void (i8*, i8*)** %parse_arg_function.addr, align 8, !dbg !2238
  %tobool25 = icmp ne void (i8*, i8*)* %23, null, !dbg !2238
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !2241

if.then26:                                        ; preds = %if.else
  %24 = load void (i8*, i8*)*, void (i8*, i8*)** %parse_arg_function.addr, align 8, !dbg !2242
  %25 = load i8*, i8** %optctx.addr, align 8, !dbg !2243
  %26 = load i8*, i8** %opt, align 8, !dbg !2244
  call void %24(i8* %25, i8* %26), !dbg !2242
  br label %if.end27, !dbg !2242

if.end27:                                         ; preds = %if.then26, %if.else
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.end24
  br label %while.cond, !dbg !2245, !llvm.loop !2222

while.end:                                        ; preds = %while.cond
  ret void, !dbg !2247
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @prepare_app_arguments(i32* %argc_ptr, i8*** %argv_ptr) #5 !dbg !2248 {
entry:
  %argc_ptr.addr = alloca i32*, align 8
  %argv_ptr.addr = alloca i8***, align 8
  store i32* %argc_ptr, i32** %argc_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %argc_ptr.addr, metadata !2252, metadata !1512), !dbg !2253
  store i8*** %argv_ptr, i8**** %argv_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8**** %argv_ptr.addr, metadata !2254, metadata !1512), !dbg !2255
  ret void, !dbg !2256
}

; Function Attrs: nounwind uwtable
define i32 @parse_optgroup(i8* %optctx, %struct.OptionGroup* %g) #0 !dbg !2257 {
entry:
  %retval = alloca i32, align 4
  %optctx.addr = alloca i8*, align 8
  %g.addr = alloca %struct.OptionGroup*, align 8
  %i = alloca i32, align 4
  %ret = alloca i32, align 4
  %o = alloca %struct.Option*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !2260, metadata !1512), !dbg !2261
  store %struct.OptionGroup* %g, %struct.OptionGroup** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionGroup** %g.addr, metadata !2262, metadata !1512), !dbg !2263
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2264, metadata !1512), !dbg !2265
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !2266, metadata !1512), !dbg !2267
  %0 = load %struct.OptionGroup*, %struct.OptionGroup** %g.addr, align 8, !dbg !2268
  %group_def = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %0, i32 0, i32 0, !dbg !2269
  %1 = load %struct.OptionGroupDef*, %struct.OptionGroupDef** %group_def, align 8, !dbg !2269
  %name = getelementptr inbounds %struct.OptionGroupDef, %struct.OptionGroupDef* %1, i32 0, i32 0, !dbg !2270
  %2 = load i8*, i8** %name, align 8, !dbg !2270
  %3 = load %struct.OptionGroup*, %struct.OptionGroup** %g.addr, align 8, !dbg !2271
  %arg = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %3, i32 0, i32 1, !dbg !2272
  %4 = load i8*, i8** %arg, align 8, !dbg !2272
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 48, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.18, i32 0, i32 0), i8* %2, i8* %4), !dbg !2273
  store i32 0, i32* %i, align 4, !dbg !2274
  br label %for.cond, !dbg !2276

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4, !dbg !2277
  %6 = load %struct.OptionGroup*, %struct.OptionGroup** %g.addr, align 8, !dbg !2280
  %nb_opts = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %6, i32 0, i32 3, !dbg !2281
  %7 = load i32, i32* %nb_opts, align 8, !dbg !2281
  %cmp = icmp slt i32 %5, %7, !dbg !2282
  br i1 %cmp, label %for.body, label %for.end, !dbg !2283

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.Option** %o, metadata !2284, metadata !1512), !dbg !2286
  %8 = load i32, i32* %i, align 4, !dbg !2287
  %idxprom = sext i32 %8 to i64, !dbg !2288
  %9 = load %struct.OptionGroup*, %struct.OptionGroup** %g.addr, align 8, !dbg !2288
  %opts = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %9, i32 0, i32 2, !dbg !2289
  %10 = load %struct.Option*, %struct.Option** %opts, align 8, !dbg !2289
  %arrayidx = getelementptr inbounds %struct.Option, %struct.Option* %10, i64 %idxprom, !dbg !2288
  store %struct.Option* %arrayidx, %struct.Option** %o, align 8, !dbg !2286
  %11 = load %struct.OptionGroup*, %struct.OptionGroup** %g.addr, align 8, !dbg !2290
  %group_def1 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %11, i32 0, i32 0, !dbg !2292
  %12 = load %struct.OptionGroupDef*, %struct.OptionGroupDef** %group_def1, align 8, !dbg !2292
  %flags = getelementptr inbounds %struct.OptionGroupDef, %struct.OptionGroupDef* %12, i32 0, i32 2, !dbg !2293
  %13 = load i32, i32* %flags, align 8, !dbg !2293
  %tobool = icmp ne i32 %13, 0, !dbg !2290
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !2294

land.lhs.true:                                    ; preds = %for.body
  %14 = load %struct.OptionGroup*, %struct.OptionGroup** %g.addr, align 8, !dbg !2295
  %group_def2 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %14, i32 0, i32 0, !dbg !2296
  %15 = load %struct.OptionGroupDef*, %struct.OptionGroupDef** %group_def2, align 8, !dbg !2296
  %flags3 = getelementptr inbounds %struct.OptionGroupDef, %struct.OptionGroupDef* %15, i32 0, i32 2, !dbg !2297
  %16 = load i32, i32* %flags3, align 8, !dbg !2297
  %17 = load %struct.Option*, %struct.Option** %o, align 8, !dbg !2298
  %opt = getelementptr inbounds %struct.Option, %struct.Option* %17, i32 0, i32 0, !dbg !2299
  %18 = load %struct.OptionDef*, %struct.OptionDef** %opt, align 8, !dbg !2299
  %flags4 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %18, i32 0, i32 1, !dbg !2300
  %19 = load i32, i32* %flags4, align 8, !dbg !2300
  %and = and i32 %16, %19, !dbg !2301
  %tobool5 = icmp ne i32 %and, 0, !dbg !2301
  br i1 %tobool5, label %if.end, label %if.then, !dbg !2302

if.then:                                          ; preds = %land.lhs.true
  %20 = load %struct.Option*, %struct.Option** %o, align 8, !dbg !2304
  %key = getelementptr inbounds %struct.Option, %struct.Option* %20, i32 0, i32 1, !dbg !2306
  %21 = load i8*, i8** %key, align 8, !dbg !2306
  %22 = load %struct.Option*, %struct.Option** %o, align 8, !dbg !2307
  %opt6 = getelementptr inbounds %struct.Option, %struct.Option* %22, i32 0, i32 0, !dbg !2308
  %23 = load %struct.OptionDef*, %struct.OptionDef** %opt6, align 8, !dbg !2308
  %help = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %23, i32 0, i32 3, !dbg !2309
  %24 = load i8*, i8** %help, align 8, !dbg !2309
  %25 = load %struct.OptionGroup*, %struct.OptionGroup** %g.addr, align 8, !dbg !2310
  %group_def7 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %25, i32 0, i32 0, !dbg !2311
  %26 = load %struct.OptionGroupDef*, %struct.OptionGroupDef** %group_def7, align 8, !dbg !2311
  %name8 = getelementptr inbounds %struct.OptionGroupDef, %struct.OptionGroupDef* %26, i32 0, i32 0, !dbg !2312
  %27 = load i8*, i8** %name8, align 8, !dbg !2312
  %28 = load %struct.OptionGroup*, %struct.OptionGroup** %g.addr, align 8, !dbg !2313
  %arg9 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %28, i32 0, i32 1, !dbg !2314
  %29 = load i8*, i8** %arg9, align 8, !dbg !2314
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @.str.19, i32 0, i32 0), i8* %21, i8* %24, i8* %27, i8* %29), !dbg !2315
  store i32 -22, i32* %retval, align 4, !dbg !2316
  br label %return, !dbg !2316

if.end:                                           ; preds = %land.lhs.true, %for.body
  %30 = load %struct.Option*, %struct.Option** %o, align 8, !dbg !2317
  %key10 = getelementptr inbounds %struct.Option, %struct.Option* %30, i32 0, i32 1, !dbg !2318
  %31 = load i8*, i8** %key10, align 8, !dbg !2318
  %32 = load %struct.Option*, %struct.Option** %o, align 8, !dbg !2319
  %opt11 = getelementptr inbounds %struct.Option, %struct.Option* %32, i32 0, i32 0, !dbg !2320
  %33 = load %struct.OptionDef*, %struct.OptionDef** %opt11, align 8, !dbg !2320
  %help12 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %33, i32 0, i32 3, !dbg !2321
  %34 = load i8*, i8** %help12, align 8, !dbg !2321
  %35 = load %struct.Option*, %struct.Option** %o, align 8, !dbg !2322
  %val = getelementptr inbounds %struct.Option, %struct.Option* %35, i32 0, i32 2, !dbg !2323
  %36 = load i8*, i8** %val, align 8, !dbg !2323
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 48, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.20, i32 0, i32 0), i8* %31, i8* %34, i8* %36), !dbg !2324
  %37 = load i8*, i8** %optctx.addr, align 8, !dbg !2325
  %38 = load %struct.Option*, %struct.Option** %o, align 8, !dbg !2326
  %opt13 = getelementptr inbounds %struct.Option, %struct.Option* %38, i32 0, i32 0, !dbg !2327
  %39 = load %struct.OptionDef*, %struct.OptionDef** %opt13, align 8, !dbg !2327
  %40 = load %struct.Option*, %struct.Option** %o, align 8, !dbg !2328
  %key14 = getelementptr inbounds %struct.Option, %struct.Option* %40, i32 0, i32 1, !dbg !2329
  %41 = load i8*, i8** %key14, align 8, !dbg !2329
  %42 = load %struct.Option*, %struct.Option** %o, align 8, !dbg !2330
  %val15 = getelementptr inbounds %struct.Option, %struct.Option* %42, i32 0, i32 2, !dbg !2331
  %43 = load i8*, i8** %val15, align 8, !dbg !2331
  %call = call i32 @write_option(i8* %37, %struct.OptionDef* %39, i8* %41, i8* %43), !dbg !2332
  store i32 %call, i32* %ret, align 4, !dbg !2333
  %44 = load i32, i32* %ret, align 4, !dbg !2334
  %cmp16 = icmp slt i32 %44, 0, !dbg !2336
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !2337

if.then17:                                        ; preds = %if.end
  %45 = load i32, i32* %ret, align 4, !dbg !2338
  store i32 %45, i32* %retval, align 4, !dbg !2339
  br label %return, !dbg !2339

if.end18:                                         ; preds = %if.end
  br label %for.inc, !dbg !2340

for.inc:                                          ; preds = %if.end18
  %46 = load i32, i32* %i, align 4, !dbg !2341
  %inc = add nsw i32 %46, 1, !dbg !2341
  store i32 %inc, i32* %i, align 4, !dbg !2341
  br label %for.cond, !dbg !2343, !llvm.loop !2344

for.end:                                          ; preds = %for.cond
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 48, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.21, i32 0, i32 0)), !dbg !2346
  store i32 0, i32* %retval, align 4, !dbg !2347
  br label %return, !dbg !2347

return:                                           ; preds = %for.end, %if.then17, %if.then
  %47 = load i32, i32* %retval, align 4, !dbg !2348
  ret i32 %47, !dbg !2348
}

; Function Attrs: nounwind uwtable
define i32 @locate_option(i32 %argc, i8** %argv, %struct.OptionDef* %options, i8* %optname) #0 !dbg !2349 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %options.addr = alloca %struct.OptionDef*, align 8
  %optname.addr = alloca i8*, align 8
  %po = alloca %struct.OptionDef*, align 8
  %i = alloca i32, align 4
  %cur_opt = alloca i8*, align 8
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !2352, metadata !1512), !dbg !2353
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !2354, metadata !1512), !dbg !2355
  store %struct.OptionDef* %options, %struct.OptionDef** %options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %options.addr, metadata !2356, metadata !1512), !dbg !2357
  store i8* %optname, i8** %optname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optname.addr, metadata !2358, metadata !1512), !dbg !2359
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %po, metadata !2360, metadata !1512), !dbg !2361
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2362, metadata !1512), !dbg !2363
  store i32 1, i32* %i, align 4, !dbg !2364
  br label %for.cond, !dbg !2366

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2367
  %1 = load i32, i32* %argc.addr, align 4, !dbg !2370
  %cmp = icmp slt i32 %0, %1, !dbg !2371
  br i1 %cmp, label %for.body, label %for.end, !dbg !2372

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8** %cur_opt, metadata !2373, metadata !1512), !dbg !2375
  %2 = load i32, i32* %i, align 4, !dbg !2376
  %idxprom = sext i32 %2 to i64, !dbg !2377
  %3 = load i8**, i8*** %argv.addr, align 8, !dbg !2377
  %arrayidx = getelementptr inbounds i8*, i8** %3, i64 %idxprom, !dbg !2377
  %4 = load i8*, i8** %arrayidx, align 8, !dbg !2377
  store i8* %4, i8** %cur_opt, align 8, !dbg !2375
  %5 = load i8*, i8** %cur_opt, align 8, !dbg !2378
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1, !dbg !2378
  store i8* %incdec.ptr, i8** %cur_opt, align 8, !dbg !2378
  %6 = load i8, i8* %5, align 1, !dbg !2380
  %conv = sext i8 %6 to i32, !dbg !2380
  %cmp1 = icmp ne i32 %conv, 45, !dbg !2381
  br i1 %cmp1, label %if.then, label %if.end, !dbg !2382

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !2383

if.end:                                           ; preds = %for.body
  %7 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !2384
  %8 = load i8*, i8** %cur_opt, align 8, !dbg !2385
  %call = call %struct.OptionDef* @find_option(%struct.OptionDef* %7, i8* %8), !dbg !2386
  store %struct.OptionDef* %call, %struct.OptionDef** %po, align 8, !dbg !2387
  %9 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !2388
  %name = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %9, i32 0, i32 0, !dbg !2390
  %10 = load i8*, i8** %name, align 8, !dbg !2390
  %tobool = icmp ne i8* %10, null, !dbg !2388
  br i1 %tobool, label %if.end14, label %land.lhs.true, !dbg !2391

land.lhs.true:                                    ; preds = %if.end
  %11 = load i8*, i8** %cur_opt, align 8, !dbg !2392
  %arrayidx3 = getelementptr inbounds i8, i8* %11, i64 0, !dbg !2392
  %12 = load i8, i8* %arrayidx3, align 1, !dbg !2392
  %conv4 = sext i8 %12 to i32, !dbg !2392
  %cmp5 = icmp eq i32 %conv4, 110, !dbg !2394
  br i1 %cmp5, label %land.lhs.true7, label %if.end14, !dbg !2395

land.lhs.true7:                                   ; preds = %land.lhs.true
  %13 = load i8*, i8** %cur_opt, align 8, !dbg !2396
  %arrayidx8 = getelementptr inbounds i8, i8* %13, i64 1, !dbg !2396
  %14 = load i8, i8* %arrayidx8, align 1, !dbg !2396
  %conv9 = sext i8 %14 to i32, !dbg !2396
  %cmp10 = icmp eq i32 %conv9, 111, !dbg !2398
  br i1 %cmp10, label %if.then12, label %if.end14, !dbg !2399

if.then12:                                        ; preds = %land.lhs.true7
  %15 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !2400
  %16 = load i8*, i8** %cur_opt, align 8, !dbg !2401
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 2, !dbg !2402
  %call13 = call %struct.OptionDef* @find_option(%struct.OptionDef* %15, i8* %add.ptr), !dbg !2403
  store %struct.OptionDef* %call13, %struct.OptionDef** %po, align 8, !dbg !2404
  br label %if.end14, !dbg !2405

if.end14:                                         ; preds = %if.then12, %land.lhs.true7, %land.lhs.true, %if.end
  %17 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !2406
  %name15 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %17, i32 0, i32 0, !dbg !2408
  %18 = load i8*, i8** %name15, align 8, !dbg !2408
  %tobool16 = icmp ne i8* %18, null, !dbg !2406
  br i1 %tobool16, label %lor.lhs.false, label %land.lhs.true17, !dbg !2409

land.lhs.true17:                                  ; preds = %if.end14
  %19 = load i8*, i8** %cur_opt, align 8, !dbg !2410
  %20 = load i8*, i8** %optname.addr, align 8, !dbg !2412
  %call18 = call i32 @strcmp(i8* %19, i8* %20) #14, !dbg !2413
  %tobool19 = icmp ne i32 %call18, 0, !dbg !2413
  br i1 %tobool19, label %lor.lhs.false, label %if.then26, !dbg !2414

lor.lhs.false:                                    ; preds = %land.lhs.true17, %if.end14
  %21 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !2415
  %name20 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %21, i32 0, i32 0, !dbg !2416
  %22 = load i8*, i8** %name20, align 8, !dbg !2416
  %tobool21 = icmp ne i8* %22, null, !dbg !2415
  br i1 %tobool21, label %land.lhs.true22, label %if.end27, !dbg !2417

land.lhs.true22:                                  ; preds = %lor.lhs.false
  %23 = load i8*, i8** %optname.addr, align 8, !dbg !2418
  %24 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !2419
  %name23 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %24, i32 0, i32 0, !dbg !2420
  %25 = load i8*, i8** %name23, align 8, !dbg !2420
  %call24 = call i32 @strcmp(i8* %23, i8* %25) #14, !dbg !2421
  %tobool25 = icmp ne i32 %call24, 0, !dbg !2421
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !2422

if.then26:                                        ; preds = %land.lhs.true22, %land.lhs.true17
  %26 = load i32, i32* %i, align 4, !dbg !2424
  store i32 %26, i32* %retval, align 4, !dbg !2425
  br label %return, !dbg !2425

if.end27:                                         ; preds = %land.lhs.true22, %lor.lhs.false
  %27 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !2426
  %name28 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %27, i32 0, i32 0, !dbg !2428
  %28 = load i8*, i8** %name28, align 8, !dbg !2428
  %tobool29 = icmp ne i8* %28, null, !dbg !2426
  br i1 %tobool29, label %lor.lhs.false30, label %if.then32, !dbg !2429

lor.lhs.false30:                                  ; preds = %if.end27
  %29 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !2430
  %flags = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %29, i32 0, i32 1, !dbg !2432
  %30 = load i32, i32* %flags, align 8, !dbg !2432
  %and = and i32 %30, 1, !dbg !2433
  %tobool31 = icmp ne i32 %and, 0, !dbg !2433
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !2434

if.then32:                                        ; preds = %lor.lhs.false30, %if.end27
  %31 = load i32, i32* %i, align 4, !dbg !2435
  %inc = add nsw i32 %31, 1, !dbg !2435
  store i32 %inc, i32* %i, align 4, !dbg !2435
  br label %if.end33, !dbg !2436

if.end33:                                         ; preds = %if.then32, %lor.lhs.false30
  br label %for.inc, !dbg !2437

for.inc:                                          ; preds = %if.end33, %if.then
  %32 = load i32, i32* %i, align 4, !dbg !2438
  %inc34 = add nsw i32 %32, 1, !dbg !2438
  store i32 %inc34, i32* %i, align 4, !dbg !2438
  br label %for.cond, !dbg !2440, !llvm.loop !2441

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !2443
  br label %return, !dbg !2443

return:                                           ; preds = %for.end, %if.then26
  %33 = load i32, i32* %retval, align 4, !dbg !2444
  ret i32 %33, !dbg !2444
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #6

; Function Attrs: nounwind uwtable
define void @parse_loglevel(i32 %argc, i8** %argv, %struct.OptionDef* %options) #0 !dbg !2445 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %options.addr = alloca %struct.OptionDef*, align 8
  %idx = alloca i32, align 4
  %env = alloca i8*, align 8
  %i = alloca i32, align 4
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !2448, metadata !1512), !dbg !2449
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !2450, metadata !1512), !dbg !2451
  store %struct.OptionDef* %options, %struct.OptionDef** %options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %options.addr, metadata !2452, metadata !1512), !dbg !2453
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !2454, metadata !1512), !dbg !2455
  %0 = load i32, i32* %argc.addr, align 4, !dbg !2456
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !2457
  %2 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !2458
  %call = call i32 @locate_option(i32 %0, i8** %1, %struct.OptionDef* %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.22, i32 0, i32 0)), !dbg !2459
  store i32 %call, i32* %idx, align 4, !dbg !2455
  call void @llvm.dbg.declare(metadata i8** %env, metadata !2460, metadata !1512), !dbg !2461
  %3 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !2462
  call void @check_options(%struct.OptionDef* %3), !dbg !2463
  %4 = load i32, i32* %idx, align 4, !dbg !2464
  %tobool = icmp ne i32 %4, 0, !dbg !2464
  br i1 %tobool, label %if.end, label %if.then, !dbg !2466

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %argc.addr, align 4, !dbg !2467
  %6 = load i8**, i8*** %argv.addr, align 8, !dbg !2468
  %7 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !2469
  %call1 = call i32 @locate_option(i32 %5, i8** %6, %struct.OptionDef* %7, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i32 0, i32 0)), !dbg !2470
  store i32 %call1, i32* %idx, align 4, !dbg !2471
  br label %if.end, !dbg !2472

if.end:                                           ; preds = %if.then, %entry
  %8 = load i32, i32* %idx, align 4, !dbg !2473
  %tobool2 = icmp ne i32 %8, 0, !dbg !2473
  br i1 %tobool2, label %land.lhs.true, label %if.end9, !dbg !2475

land.lhs.true:                                    ; preds = %if.end
  %9 = load i32, i32* %idx, align 4, !dbg !2476
  %add = add nsw i32 %9, 1, !dbg !2478
  %idxprom = sext i32 %add to i64, !dbg !2479
  %10 = load i8**, i8*** %argv.addr, align 8, !dbg !2479
  %arrayidx = getelementptr inbounds i8*, i8** %10, i64 %idxprom, !dbg !2479
  %11 = load i8*, i8** %arrayidx, align 8, !dbg !2479
  %tobool3 = icmp ne i8* %11, null, !dbg !2479
  br i1 %tobool3, label %if.then4, label %if.end9, !dbg !2480

if.then4:                                         ; preds = %land.lhs.true
  %12 = load i32, i32* %idx, align 4, !dbg !2481
  %add5 = add nsw i32 %12, 1, !dbg !2482
  %idxprom6 = sext i32 %add5 to i64, !dbg !2483
  %13 = load i8**, i8*** %argv.addr, align 8, !dbg !2483
  %arrayidx7 = getelementptr inbounds i8*, i8** %13, i64 %idxprom6, !dbg !2483
  %14 = load i8*, i8** %arrayidx7, align 8, !dbg !2483
  %call8 = call i32 @opt_loglevel(i8* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.22, i32 0, i32 0), i8* %14), !dbg !2484
  br label %if.end9, !dbg !2484

if.end9:                                          ; preds = %if.then4, %land.lhs.true, %if.end
  %15 = load i32, i32* %argc.addr, align 4, !dbg !2485
  %16 = load i8**, i8*** %argv.addr, align 8, !dbg !2486
  %17 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !2487
  %call10 = call i32 @locate_option(i32 %15, i8** %16, %struct.OptionDef* %17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0)), !dbg !2488
  store i32 %call10, i32* %idx, align 4, !dbg !2489
  %call11 = call i8* @getenv(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.25, i32 0, i32 0)) #11, !dbg !2490
  store i8* %call11, i8** %env, align 8, !dbg !2492
  %tobool12 = icmp ne i8* %call11, null, !dbg !2492
  br i1 %tobool12, label %if.then14, label %lor.lhs.false, !dbg !2493

lor.lhs.false:                                    ; preds = %if.end9
  %18 = load i32, i32* %idx, align 4, !dbg !2494
  %tobool13 = icmp ne i32 %18, 0, !dbg !2494
  br i1 %tobool13, label %if.then14, label %if.end25, !dbg !2496

if.then14:                                        ; preds = %lor.lhs.false, %if.end9
  %19 = load i8*, i8** %env, align 8, !dbg !2497
  %call15 = call i32 @init_report(i8* %19), !dbg !2499
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @report_file, align 8, !dbg !2500
  %tobool16 = icmp ne %struct._IO_FILE* %20, null, !dbg !2500
  br i1 %tobool16, label %if.then17, label %if.end24, !dbg !2502

if.then17:                                        ; preds = %if.then14
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2503, metadata !1512), !dbg !2505
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @report_file, align 8, !dbg !2506
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0)), !dbg !2507
  store i32 0, i32* %i, align 4, !dbg !2508
  br label %for.cond, !dbg !2510

for.cond:                                         ; preds = %for.inc, %if.then17
  %22 = load i32, i32* %i, align 4, !dbg !2511
  %23 = load i32, i32* %argc.addr, align 4, !dbg !2514
  %cmp = icmp slt i32 %22, %23, !dbg !2515
  br i1 %cmp, label %for.body, label %for.end, !dbg !2516

for.body:                                         ; preds = %for.cond
  %24 = load i32, i32* %i, align 4, !dbg !2517
  %idxprom19 = sext i32 %24 to i64, !dbg !2519
  %25 = load i8**, i8*** %argv.addr, align 8, !dbg !2519
  %arrayidx20 = getelementptr inbounds i8*, i8** %25, i64 %idxprom19, !dbg !2519
  %26 = load i8*, i8** %arrayidx20, align 8, !dbg !2519
  call void @dump_argument(i8* %26), !dbg !2520
  %27 = load i32, i32* %i, align 4, !dbg !2521
  %28 = load i32, i32* %argc.addr, align 4, !dbg !2522
  %sub = sub nsw i32 %28, 1, !dbg !2523
  %cmp21 = icmp slt i32 %27, %sub, !dbg !2524
  %cond = select i1 %cmp21, i32 32, i32 10, !dbg !2521
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @report_file, align 8, !dbg !2525
  %call22 = call i32 @fputc(i32 %cond, %struct._IO_FILE* %29), !dbg !2526
  br label %for.inc, !dbg !2527

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %i, align 4, !dbg !2528
  %inc = add nsw i32 %30, 1, !dbg !2528
  store i32 %inc, i32* %i, align 4, !dbg !2528
  br label %for.cond, !dbg !2530, !llvm.loop !2531

for.end:                                          ; preds = %for.cond
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @report_file, align 8, !dbg !2533
  %call23 = call i32 @fflush(%struct._IO_FILE* %31), !dbg !2534
  br label %if.end24, !dbg !2535

if.end24:                                         ; preds = %for.end, %if.then14
  br label %if.end25, !dbg !2536

if.end25:                                         ; preds = %if.end24, %lor.lhs.false
  %32 = load i32, i32* %argc.addr, align 4, !dbg !2537
  %33 = load i8**, i8*** %argv.addr, align 8, !dbg !2538
  %34 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !2539
  %call26 = call i32 @locate_option(i32 %32, i8** %33, %struct.OptionDef* %34, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0)), !dbg !2540
  store i32 %call26, i32* %idx, align 4, !dbg !2541
  %35 = load i32, i32* %idx, align 4, !dbg !2542
  %tobool27 = icmp ne i32 %35, 0, !dbg !2542
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !2544

if.then28:                                        ; preds = %if.end25
  store i32 1, i32* @hide_banner, align 4, !dbg !2545
  br label %if.end29, !dbg !2546

if.end29:                                         ; preds = %if.then28, %if.end25
  ret void, !dbg !2547
}

; Function Attrs: nounwind uwtable
define internal void @check_options(%struct.OptionDef* %po) #0 !dbg !2548 {
entry:
  %po.addr = alloca %struct.OptionDef*, align 8
  store %struct.OptionDef* %po, %struct.OptionDef** %po.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %po.addr, metadata !2551, metadata !1512), !dbg !2552
  br label %while.cond, !dbg !2553

while.cond:                                       ; preds = %if.end6, %entry
  %0 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !2554
  %name = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %0, i32 0, i32 0, !dbg !2556
  %1 = load i8*, i8** %name, align 8, !dbg !2556
  %tobool = icmp ne i8* %1, null, !dbg !2557
  br i1 %tobool, label %while.body, label %while.end, !dbg !2557

while.body:                                       ; preds = %while.cond
  %2 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !2558
  %flags = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %2, i32 0, i32 1, !dbg !2561
  %3 = load i32, i32* %flags, align 8, !dbg !2561
  %and = and i32 %3, 8192, !dbg !2562
  %tobool1 = icmp ne i32 %and, 0, !dbg !2562
  br i1 %tobool1, label %if.then, label %if.end6, !dbg !2563

if.then:                                          ; preds = %while.body
  br label %do.body, !dbg !2564, !llvm.loop !2565

do.body:                                          ; preds = %if.then
  %4 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !2566
  %flags2 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %4, i32 0, i32 1, !dbg !2570
  %5 = load i32, i32* %flags2, align 8, !dbg !2570
  %and3 = and i32 %5, 786432, !dbg !2571
  %tobool4 = icmp ne i32 %and3, 0, !dbg !2571
  br i1 %tobool4, label %if.end, label %if.then5, !dbg !2572

if.then5:                                         ; preds = %do.body
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.61, i32 0, i32 0), i32 501), !dbg !2573
  call void @abort() #12, !dbg !2576
  unreachable, !dbg !2578

if.end:                                           ; preds = %do.body
  br label %do.end, !dbg !2579

do.end:                                           ; preds = %if.end
  br label %if.end6, !dbg !2581

if.end6:                                          ; preds = %do.end, %while.body
  %6 = load %struct.OptionDef*, %struct.OptionDef** %po.addr, align 8, !dbg !2583
  %incdec.ptr = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %6, i32 1, !dbg !2583
  store %struct.OptionDef* %incdec.ptr, %struct.OptionDef** %po.addr, align 8, !dbg !2583
  br label %while.cond, !dbg !2584, !llvm.loop !2586

while.end:                                        ; preds = %while.cond
  ret void, !dbg !2587
}

; Function Attrs: nounwind uwtable
define i32 @opt_loglevel(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !1342 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %token = alloca i8*, align 8
  %tail = alloca i8*, align 8
  %flags = alloca i32, align 4
  %level = alloca i32, align 4
  %cmd = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !2588, metadata !1512), !dbg !2589
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !2590, metadata !1512), !dbg !2591
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !2592, metadata !1512), !dbg !2593
  call void @llvm.dbg.declare(metadata i8** %token, metadata !2594, metadata !1512), !dbg !2595
  call void @llvm.dbg.declare(metadata i8** %tail, metadata !2596, metadata !1512), !dbg !2597
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !2598, metadata !1512), !dbg !2599
  %call = call i32 @av_log_get_flags(), !dbg !2600
  store i32 %call, i32* %flags, align 4, !dbg !2599
  call void @llvm.dbg.declare(metadata i32* %level, metadata !2601, metadata !1512), !dbg !2602
  %call1 = call i32 @av_log_get_level(), !dbg !2603
  store i32 %call1, i32* %level, align 4, !dbg !2602
  call void @llvm.dbg.declare(metadata i32* %cmd, metadata !2604, metadata !1512), !dbg !2605
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2606, metadata !1512), !dbg !2607
  store i32 0, i32* %i, align 4, !dbg !2607
  br label %do.body, !dbg !2608, !llvm.loop !2609

do.body:                                          ; preds = %entry
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !2610
  %tobool = icmp ne i8* %0, null, !dbg !2614
  br i1 %tobool, label %if.end, label %if.then, !dbg !2615

if.then:                                          ; preds = %do.body
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.61, i32 0, i32 0), i32 890), !dbg !2616
  call void @abort() #12, !dbg !2619
  unreachable, !dbg !2621

if.end:                                           ; preds = %do.body
  br label %do.end, !dbg !2622

do.end:                                           ; preds = %if.end
  br label %while.cond, !dbg !2624

while.cond:                                       ; preds = %if.end36, %do.end
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !2625
  %2 = load i8, i8* %1, align 1, !dbg !2627
  %tobool2 = icmp ne i8 %2, 0, !dbg !2628
  br i1 %tobool2, label %while.body, label %while.end, !dbg !2628

while.body:                                       ; preds = %while.cond
  %3 = load i8*, i8** %arg.addr, align 8, !dbg !2629
  store i8* %3, i8** %token, align 8, !dbg !2631
  %4 = load i8*, i8** %token, align 8, !dbg !2632
  %5 = load i8, i8* %4, align 1, !dbg !2634
  %conv = sext i8 %5 to i32, !dbg !2634
  %cmp = icmp eq i32 %conv, 43, !dbg !2635
  br i1 %cmp, label %if.then7, label %lor.lhs.false, !dbg !2636

lor.lhs.false:                                    ; preds = %while.body
  %6 = load i8*, i8** %token, align 8, !dbg !2637
  %7 = load i8, i8* %6, align 1, !dbg !2639
  %conv4 = sext i8 %7 to i32, !dbg !2639
  %cmp5 = icmp eq i32 %conv4, 45, !dbg !2640
  br i1 %cmp5, label %if.then7, label %if.else, !dbg !2641

if.then7:                                         ; preds = %lor.lhs.false, %while.body
  %8 = load i8*, i8** %token, align 8, !dbg !2642
  %incdec.ptr = getelementptr inbounds i8, i8* %8, i32 1, !dbg !2642
  store i8* %incdec.ptr, i8** %token, align 8, !dbg !2642
  %9 = load i8, i8* %8, align 1, !dbg !2644
  %conv8 = sext i8 %9 to i32, !dbg !2644
  store i32 %conv8, i32* %cmd, align 4, !dbg !2645
  br label %if.end9, !dbg !2646

if.else:                                          ; preds = %lor.lhs.false
  store i32 0, i32* %cmd, align 4, !dbg !2647
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.then7
  %10 = load i32, i32* %i, align 4, !dbg !2649
  %tobool10 = icmp ne i32 %10, 0, !dbg !2649
  br i1 %tobool10, label %if.end13, label %land.lhs.true, !dbg !2651

land.lhs.true:                                    ; preds = %if.end9
  %11 = load i32, i32* %cmd, align 4, !dbg !2652
  %tobool11 = icmp ne i32 %11, 0, !dbg !2652
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !2654

if.then12:                                        ; preds = %land.lhs.true
  store i32 0, i32* %flags, align 4, !dbg !2655
  br label %if.end13, !dbg !2657

if.end13:                                         ; preds = %if.then12, %land.lhs.true, %if.end9
  %12 = load i8*, i8** %token, align 8, !dbg !2658
  %call14 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.62, i32 0, i32 0), i64 6) #14, !dbg !2660
  %tobool15 = icmp ne i32 %call14, 0, !dbg !2660
  br i1 %tobool15, label %if.else22, label %if.then16, !dbg !2661

if.then16:                                        ; preds = %if.end13
  %13 = load i32, i32* %cmd, align 4, !dbg !2662
  %cmp17 = icmp eq i32 %13, 45, !dbg !2665
  br i1 %cmp17, label %if.then19, label %if.else20, !dbg !2666

if.then19:                                        ; preds = %if.then16
  %14 = load i32, i32* %flags, align 4, !dbg !2667
  %or = or i32 %14, 1, !dbg !2667
  store i32 %or, i32* %flags, align 4, !dbg !2667
  br label %if.end21, !dbg !2669

if.else20:                                        ; preds = %if.then16
  %15 = load i32, i32* %flags, align 4, !dbg !2670
  %and = and i32 %15, -2, !dbg !2670
  store i32 %and, i32* %flags, align 4, !dbg !2670
  br label %if.end21

if.end21:                                         ; preds = %if.else20, %if.then19
  %16 = load i8*, i8** %token, align 8, !dbg !2672
  %add.ptr = getelementptr inbounds i8, i8* %16, i64 6, !dbg !2673
  store i8* %add.ptr, i8** %arg.addr, align 8, !dbg !2674
  br label %if.end36, !dbg !2675

if.else22:                                        ; preds = %if.end13
  %17 = load i8*, i8** %token, align 8, !dbg !2676
  %call23 = call i32 @strncmp(i8* %17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.63, i32 0, i32 0), i64 5) #14, !dbg !2679
  %tobool24 = icmp ne i32 %call23, 0, !dbg !2679
  br i1 %tobool24, label %if.else34, label %if.then25, !dbg !2680

if.then25:                                        ; preds = %if.else22
  %18 = load i32, i32* %cmd, align 4, !dbg !2681
  %cmp26 = icmp eq i32 %18, 45, !dbg !2684
  br i1 %cmp26, label %if.then28, label %if.else30, !dbg !2685

if.then28:                                        ; preds = %if.then25
  %19 = load i32, i32* %flags, align 4, !dbg !2686
  %and29 = and i32 %19, -3, !dbg !2686
  store i32 %and29, i32* %flags, align 4, !dbg !2686
  br label %if.end32, !dbg !2688

if.else30:                                        ; preds = %if.then25
  %20 = load i32, i32* %flags, align 4, !dbg !2689
  %or31 = or i32 %20, 2, !dbg !2689
  store i32 %or31, i32* %flags, align 4, !dbg !2689
  br label %if.end32

if.end32:                                         ; preds = %if.else30, %if.then28
  %21 = load i8*, i8** %token, align 8, !dbg !2691
  %add.ptr33 = getelementptr inbounds i8, i8* %21, i64 5, !dbg !2692
  store i8* %add.ptr33, i8** %arg.addr, align 8, !dbg !2693
  br label %if.end35, !dbg !2694

if.else34:                                        ; preds = %if.else22
  br label %while.end, !dbg !2695

if.end35:                                         ; preds = %if.end32
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.end21
  %22 = load i32, i32* %i, align 4, !dbg !2697
  %inc = add nsw i32 %22, 1, !dbg !2697
  store i32 %inc, i32* %i, align 4, !dbg !2697
  br label %while.cond, !dbg !2698, !llvm.loop !2700

while.end:                                        ; preds = %if.else34, %while.cond
  %23 = load i8*, i8** %arg.addr, align 8, !dbg !2701
  %24 = load i8, i8* %23, align 1, !dbg !2703
  %tobool37 = icmp ne i8 %24, 0, !dbg !2703
  br i1 %tobool37, label %if.else39, label %if.then38, !dbg !2704

if.then38:                                        ; preds = %while.end
  br label %end, !dbg !2705

if.else39:                                        ; preds = %while.end
  %25 = load i8*, i8** %arg.addr, align 8, !dbg !2707
  %26 = load i8, i8* %25, align 1, !dbg !2709
  %conv40 = sext i8 %26 to i32, !dbg !2709
  %cmp41 = icmp eq i32 %conv40, 43, !dbg !2710
  br i1 %cmp41, label %if.then43, label %if.else45, !dbg !2711

if.then43:                                        ; preds = %if.else39
  %27 = load i8*, i8** %arg.addr, align 8, !dbg !2712
  %incdec.ptr44 = getelementptr inbounds i8, i8* %27, i32 1, !dbg !2712
  store i8* %incdec.ptr44, i8** %arg.addr, align 8, !dbg !2712
  br label %if.end50, !dbg !2714

if.else45:                                        ; preds = %if.else39
  %28 = load i32, i32* %i, align 4, !dbg !2715
  %tobool46 = icmp ne i32 %28, 0, !dbg !2715
  br i1 %tobool46, label %if.end49, label %if.then47, !dbg !2718

if.then47:                                        ; preds = %if.else45
  %call48 = call i32 @av_log_get_flags(), !dbg !2719
  store i32 %call48, i32* %flags, align 4, !dbg !2721
  br label %if.end49, !dbg !2722

if.end49:                                         ; preds = %if.then47, %if.else45
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then43
  br label %if.end51

if.end51:                                         ; preds = %if.end50
  store i32 0, i32* %i, align 4, !dbg !2723
  br label %for.cond, !dbg !2725

for.cond:                                         ; preds = %for.inc, %if.end51
  %29 = load i32, i32* %i, align 4, !dbg !2726
  %conv52 = sext i32 %29 to i64, !dbg !2726
  %cmp53 = icmp ult i64 %conv52, 9, !dbg !2729
  br i1 %cmp53, label %for.body, label %for.end, !dbg !2730

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %i, align 4, !dbg !2731
  %idxprom = sext i32 %30 to i64, !dbg !2734
  %arrayidx = getelementptr inbounds [9 x %struct.anon], [9 x %struct.anon]* @opt_loglevel.log_levels, i64 0, i64 %idxprom, !dbg !2734
  %name = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 0, !dbg !2735
  %31 = load i8*, i8** %name, align 16, !dbg !2735
  %32 = load i8*, i8** %arg.addr, align 8, !dbg !2736
  %call55 = call i32 @strcmp(i8* %31, i8* %32) #14, !dbg !2737
  %tobool56 = icmp ne i32 %call55, 0, !dbg !2737
  br i1 %tobool56, label %if.end61, label %if.then57, !dbg !2738

if.then57:                                        ; preds = %for.body
  %33 = load i32, i32* %i, align 4, !dbg !2739
  %idxprom58 = sext i32 %33 to i64, !dbg !2741
  %arrayidx59 = getelementptr inbounds [9 x %struct.anon], [9 x %struct.anon]* @opt_loglevel.log_levels, i64 0, i64 %idxprom58, !dbg !2741
  %level60 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx59, i32 0, i32 1, !dbg !2742
  %34 = load i32, i32* %level60, align 8, !dbg !2742
  store i32 %34, i32* %level, align 4, !dbg !2743
  br label %end, !dbg !2744

if.end61:                                         ; preds = %for.body
  br label %for.inc, !dbg !2745

for.inc:                                          ; preds = %if.end61
  %35 = load i32, i32* %i, align 4, !dbg !2746
  %inc62 = add nsw i32 %35, 1, !dbg !2746
  store i32 %inc62, i32* %i, align 4, !dbg !2746
  br label %for.cond, !dbg !2748, !llvm.loop !2749

for.end:                                          ; preds = %for.cond
  %36 = load i8*, i8** %arg.addr, align 8, !dbg !2751
  %call63 = call i64 @strtol(i8* %36, i8** %tail, i32 10) #11, !dbg !2752
  %conv64 = trunc i64 %call63 to i32, !dbg !2752
  store i32 %conv64, i32* %level, align 4, !dbg !2753
  %37 = load i8*, i8** %tail, align 8, !dbg !2754
  %38 = load i8, i8* %37, align 1, !dbg !2756
  %tobool65 = icmp ne i8 %38, 0, !dbg !2756
  br i1 %tobool65, label %if.then66, label %if.end78, !dbg !2757

if.then66:                                        ; preds = %for.end
  %39 = load i8*, i8** %arg.addr, align 8, !dbg !2758
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 8, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.64, i32 0, i32 0), i8* %39), !dbg !2760
  store i32 0, i32* %i, align 4, !dbg !2761
  br label %for.cond67, !dbg !2763

for.cond67:                                       ; preds = %for.inc75, %if.then66
  %40 = load i32, i32* %i, align 4, !dbg !2764
  %conv68 = sext i32 %40 to i64, !dbg !2764
  %cmp69 = icmp ult i64 %conv68, 9, !dbg !2767
  br i1 %cmp69, label %for.body71, label %for.end77, !dbg !2768

for.body71:                                       ; preds = %for.cond67
  %41 = load i32, i32* %i, align 4, !dbg !2769
  %idxprom72 = sext i32 %41 to i64, !dbg !2770
  %arrayidx73 = getelementptr inbounds [9 x %struct.anon], [9 x %struct.anon]* @opt_loglevel.log_levels, i64 0, i64 %idxprom72, !dbg !2770
  %name74 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx73, i32 0, i32 0, !dbg !2771
  %42 = load i8*, i8** %name74, align 16, !dbg !2771
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i32 0, i32 0), i8* %42), !dbg !2772
  br label %for.inc75, !dbg !2772

for.inc75:                                        ; preds = %for.body71
  %43 = load i32, i32* %i, align 4, !dbg !2773
  %inc76 = add nsw i32 %43, 1, !dbg !2773
  store i32 %inc76, i32* %i, align 4, !dbg !2773
  br label %for.cond67, !dbg !2775, !llvm.loop !2776

for.end77:                                        ; preds = %for.cond67
  call void @exit_program(i32 1) #13, !dbg !2778
  unreachable, !dbg !2778

if.end78:                                         ; preds = %for.end
  br label %end, !dbg !2779

end:                                              ; preds = %if.end78, %if.then57, %if.then38
  %44 = load i32, i32* %flags, align 4, !dbg !2781
  call void @av_log_set_flags(i32 %44), !dbg !2782
  %45 = load i32, i32* %level, align 4, !dbg !2783
  call void @av_log_set_level(i32 %45), !dbg !2784
  ret i32 0, !dbg !2785
}

; Function Attrs: nounwind
declare i8* @getenv(i8*) #7

; Function Attrs: nounwind uwtable
define internal i32 @init_report(i8* %env) #0 !dbg !2786 {
entry:
  %retval = alloca i32, align 4
  %env.addr = alloca i8*, align 8
  %filename_template = alloca i8*, align 8
  %key = alloca i8*, align 8
  %val = alloca i8*, align 8
  %ret = alloca i32, align 4
  %count = alloca i32, align 4
  %now = alloca i64, align 8
  %tm = alloca %struct.tm*, align 8
  %filename = alloca %struct.AVBPrint, align 8
  %.compoundliteral = alloca [64 x i8], align 1
  %tail = alloca i8*, align 8
  %ret37 = alloca i32, align 4
  store i8* %env, i8** %env.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %env.addr, metadata !2789, metadata !1512), !dbg !2790
  call void @llvm.dbg.declare(metadata i8** %filename_template, metadata !2791, metadata !1512), !dbg !2792
  store i8* null, i8** %filename_template, align 8, !dbg !2792
  call void @llvm.dbg.declare(metadata i8** %key, metadata !2793, metadata !1512), !dbg !2794
  call void @llvm.dbg.declare(metadata i8** %val, metadata !2795, metadata !1512), !dbg !2796
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !2797, metadata !1512), !dbg !2798
  call void @llvm.dbg.declare(metadata i32* %count, metadata !2799, metadata !1512), !dbg !2800
  store i32 0, i32* %count, align 4, !dbg !2800
  call void @llvm.dbg.declare(metadata i64* %now, metadata !2801, metadata !1512), !dbg !2805
  call void @llvm.dbg.declare(metadata %struct.tm** %tm, metadata !2806, metadata !1512), !dbg !2821
  call void @llvm.dbg.declare(metadata %struct.AVBPrint* %filename, metadata !2822, metadata !1512), !dbg !2836
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @report_file, align 8, !dbg !2837
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !2837
  br i1 %tobool, label %if.then, label %if.end, !dbg !2839

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !2840
  br label %return, !dbg !2840

if.end:                                           ; preds = %entry
  %call = call i64 @time(i64* %now) #11, !dbg !2841
  %call1 = call %struct.tm* @localtime(i64* %now) #11, !dbg !2842
  store %struct.tm* %call1, %struct.tm** %tm, align 8, !dbg !2843
  br label %while.cond, !dbg !2844

while.cond:                                       ; preds = %if.end28, %if.end
  %1 = load i8*, i8** %env.addr, align 8, !dbg !2845
  %tobool2 = icmp ne i8* %1, null, !dbg !2845
  br i1 %tobool2, label %land.rhs, label %land.end, !dbg !2847

land.rhs:                                         ; preds = %while.cond
  %2 = load i8*, i8** %env.addr, align 8, !dbg !2848
  %3 = load i8, i8* %2, align 1, !dbg !2850
  %conv = sext i8 %3 to i32, !dbg !2850
  %tobool3 = icmp ne i32 %conv, 0, !dbg !2851
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %4 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ]
  br i1 %4, label %while.body, label %while.end, !dbg !2852

while.body:                                       ; preds = %land.end
  %call4 = call i32 @av_opt_get_key_value(i8** %env.addr, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.124, i32 0, i32 0), i32 0, i8** %key, i8** %val), !dbg !2854
  store i32 %call4, i32* %ret, align 4, !dbg !2857
  %cmp = icmp slt i32 %call4, 0, !dbg !2858
  br i1 %cmp, label %if.then6, label %if.end11, !dbg !2859

if.then6:                                         ; preds = %while.body
  %5 = load i32, i32* %count, align 4, !dbg !2860
  %tobool7 = icmp ne i32 %5, 0, !dbg !2860
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !2863

if.then8:                                         ; preds = %if.then6
  %6 = bitcast [64 x i8]* %.compoundliteral to i8*, !dbg !2864
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 64, i32 1, i1 false), !dbg !2864
  %arrayinit.begin = getelementptr inbounds [64 x i8], [64 x i8]* %.compoundliteral, i64 0, i64 0, !dbg !2865
  store i8 0, i8* %arrayinit.begin, align 1, !dbg !2865
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %.compoundliteral, i32 0, i32 0, !dbg !2864
  %7 = load i32, i32* %ret, align 4, !dbg !2866
  %call9 = call i8* @av_make_error_string(i8* %arraydecay, i64 64, i32 %7), !dbg !2867
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.125, i32 0, i32 0), i8* %call9), !dbg !2869
  br label %if.end10, !dbg !2869

if.end10:                                         ; preds = %if.then8, %if.then6
  br label %while.end, !dbg !2870

if.end11:                                         ; preds = %while.body
  %8 = load i8*, i8** %env.addr, align 8, !dbg !2871
  %9 = load i8, i8* %8, align 1, !dbg !2873
  %tobool12 = icmp ne i8 %9, 0, !dbg !2873
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !2874

if.then13:                                        ; preds = %if.end11
  %10 = load i8*, i8** %env.addr, align 8, !dbg !2875
  %incdec.ptr = getelementptr inbounds i8, i8* %10, i32 1, !dbg !2875
  store i8* %incdec.ptr, i8** %env.addr, align 8, !dbg !2875
  br label %if.end14, !dbg !2876

if.end14:                                         ; preds = %if.then13, %if.end11
  %11 = load i32, i32* %count, align 4, !dbg !2877
  %inc = add nsw i32 %11, 1, !dbg !2877
  store i32 %inc, i32* %count, align 4, !dbg !2877
  %12 = load i8*, i8** %key, align 8, !dbg !2878
  %call15 = call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.126, i32 0, i32 0)) #14, !dbg !2880
  %tobool16 = icmp ne i32 %call15, 0, !dbg !2880
  br i1 %tobool16, label %if.else, label %if.then17, !dbg !2881

if.then17:                                        ; preds = %if.end14
  %13 = load i8*, i8** %filename_template, align 8, !dbg !2882
  call void @av_free(i8* %13), !dbg !2884
  %14 = load i8*, i8** %val, align 8, !dbg !2885
  store i8* %14, i8** %filename_template, align 8, !dbg !2886
  store i8* null, i8** %val, align 8, !dbg !2887
  br label %if.end28, !dbg !2888

if.else:                                          ; preds = %if.end14
  %15 = load i8*, i8** %key, align 8, !dbg !2889
  %call18 = call i32 @strcmp(i8* %15, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.63, i32 0, i32 0)) #14, !dbg !2892
  %tobool19 = icmp ne i32 %call18, 0, !dbg !2892
  br i1 %tobool19, label %if.else26, label %if.then20, !dbg !2893

if.then20:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata i8** %tail, metadata !2894, metadata !1512), !dbg !2896
  %16 = load i8*, i8** %val, align 8, !dbg !2897
  %call21 = call i64 @strtol(i8* %16, i8** %tail, i32 10) #11, !dbg !2898
  %conv22 = trunc i64 %call21 to i32, !dbg !2898
  store i32 %conv22, i32* @report_file_level, align 4, !dbg !2899
  %17 = load i8*, i8** %tail, align 8, !dbg !2900
  %18 = load i8, i8* %17, align 1, !dbg !2902
  %tobool23 = icmp ne i8 %18, 0, !dbg !2902
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !2903

if.then24:                                        ; preds = %if.then20
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 8, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.127, i32 0, i32 0)), !dbg !2904
  call void @exit_program(i32 1) #13, !dbg !2906
  unreachable, !dbg !2906

if.end25:                                         ; preds = %if.then20
  br label %if.end27, !dbg !2907

if.else26:                                        ; preds = %if.else
  %19 = load i8*, i8** %key, align 8, !dbg !2908
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.128, i32 0, i32 0), i8* %19), !dbg !2910
  br label %if.end27

if.end27:                                         ; preds = %if.else26, %if.end25
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then17
  %20 = load i8*, i8** %val, align 8, !dbg !2911
  call void @av_free(i8* %20), !dbg !2912
  %21 = load i8*, i8** %key, align 8, !dbg !2913
  call void @av_free(i8* %21), !dbg !2914
  br label %while.cond, !dbg !2915, !llvm.loop !2917

while.end:                                        ; preds = %if.end10, %land.end
  call void @av_bprint_init(%struct.AVBPrint* %filename, i32 0, i32 1), !dbg !2918
  %22 = load i8*, i8** %filename_template, align 8, !dbg !2919
  %call29 = call i8* @av_x_if_null(i8* %22, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.129, i32 0, i32 0)), !dbg !2920
  %23 = load %struct.tm*, %struct.tm** %tm, align 8, !dbg !2921
  call void @expand_filename_template(%struct.AVBPrint* %filename, i8* %call29, %struct.tm* %23), !dbg !2922
  %24 = load i8*, i8** %filename_template, align 8, !dbg !2923
  call void @av_free(i8* %24), !dbg !2924
  %call30 = call i32 @av_bprint_is_complete(%struct.AVBPrint* %filename), !dbg !2925
  %tobool31 = icmp ne i32 %call30, 0, !dbg !2925
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !2927

if.then32:                                        ; preds = %while.end
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.130, i32 0, i32 0)), !dbg !2928
  store i32 -12, i32* %retval, align 4, !dbg !2930
  br label %return, !dbg !2930

if.end33:                                         ; preds = %while.end
  %str = getelementptr inbounds %struct.AVBPrint, %struct.AVBPrint* %filename, i32 0, i32 0, !dbg !2931
  %25 = load i8*, i8** %str, align 8, !dbg !2931
  %call34 = call %struct._IO_FILE* @fopen64(i8* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.131, i32 0, i32 0)), !dbg !2932
  store %struct._IO_FILE* %call34, %struct._IO_FILE** @report_file, align 8, !dbg !2933
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @report_file, align 8, !dbg !2934
  %tobool35 = icmp ne %struct._IO_FILE* %26, null, !dbg !2934
  br i1 %tobool35, label %if.end42, label %if.then36, !dbg !2936

if.then36:                                        ; preds = %if.end33
  call void @llvm.dbg.declare(metadata i32* %ret37, metadata !2937, metadata !1512), !dbg !2939
  %call38 = call i32* @__errno_location() #2, !dbg !2940
  %27 = load i32, i32* %call38, align 4, !dbg !2941
  %sub = sub nsw i32 0, %27, !dbg !2940
  store i32 %sub, i32* %ret37, align 4, !dbg !2939
  %str39 = getelementptr inbounds %struct.AVBPrint, %struct.AVBPrint* %filename, i32 0, i32 0, !dbg !2942
  %28 = load i8*, i8** %str39, align 8, !dbg !2942
  %call40 = call i32* @__errno_location() #2, !dbg !2943
  %29 = load i32, i32* %call40, align 4, !dbg !2944
  %call41 = call i8* @strerror(i32 %29) #11, !dbg !2945
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.132, i32 0, i32 0), i8* %28, i8* %call41), !dbg !2947
  %30 = load i32, i32* %ret37, align 4, !dbg !2948
  store i32 %30, i32* %retval, align 4, !dbg !2949
  br label %return, !dbg !2949

if.end42:                                         ; preds = %if.end33
  call void @av_log_set_callback(void (i8*, i32, i8*, %struct.__va_list_tag*)* @log_callback_report), !dbg !2950
  %31 = load %struct.tm*, %struct.tm** %tm, align 8, !dbg !2951
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %31, i32 0, i32 5, !dbg !2952
  %32 = load i32, i32* %tm_year, align 4, !dbg !2952
  %add = add nsw i32 %32, 1900, !dbg !2953
  %33 = load %struct.tm*, %struct.tm** %tm, align 8, !dbg !2954
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %33, i32 0, i32 4, !dbg !2955
  %34 = load i32, i32* %tm_mon, align 8, !dbg !2955
  %add43 = add nsw i32 %34, 1, !dbg !2956
  %35 = load %struct.tm*, %struct.tm** %tm, align 8, !dbg !2957
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %35, i32 0, i32 3, !dbg !2958
  %36 = load i32, i32* %tm_mday, align 4, !dbg !2958
  %37 = load %struct.tm*, %struct.tm** %tm, align 8, !dbg !2959
  %tm_hour = getelementptr inbounds %struct.tm, %struct.tm* %37, i32 0, i32 2, !dbg !2960
  %38 = load i32, i32* %tm_hour, align 8, !dbg !2960
  %39 = load %struct.tm*, %struct.tm** %tm, align 8, !dbg !2961
  %tm_min = getelementptr inbounds %struct.tm, %struct.tm* %39, i32 0, i32 1, !dbg !2962
  %40 = load i32, i32* %tm_min, align 4, !dbg !2962
  %41 = load %struct.tm*, %struct.tm** %tm, align 8, !dbg !2963
  %tm_sec = getelementptr inbounds %struct.tm, %struct.tm* %41, i32 0, i32 0, !dbg !2964
  %42 = load i32, i32* %tm_sec, align 8, !dbg !2964
  %str44 = getelementptr inbounds %struct.AVBPrint, %struct.AVBPrint* %filename, i32 0, i32 0, !dbg !2965
  %43 = load i8*, i8** %str44, align 8, !dbg !2965
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 32, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.133, i32 0, i32 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @program_name, i32 0, i32 0), i32 %add, i32 %add43, i32 %36, i32 %38, i32 %40, i32 %42, i8* %43), !dbg !2966
  %call45 = call i32 @av_bprint_finalize(%struct.AVBPrint* %filename, i8** null), !dbg !2967
  store i32 0, i32* %retval, align 4, !dbg !2968
  br label %return, !dbg !2968

return:                                           ; preds = %if.end42, %if.then36, %if.then32, %if.then
  %44 = load i32, i32* %retval, align 4, !dbg !2969
  ret i32 %44, !dbg !2969
}

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal void @dump_argument(i8* %a) #0 !dbg !2970 {
entry:
  %a.addr = alloca i8*, align 8
  %p = alloca i8*, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !2973, metadata !1512), !dbg !2974
  call void @llvm.dbg.declare(metadata i8** %p, metadata !2975, metadata !1512), !dbg !2978
  %0 = load i8*, i8** %a.addr, align 8, !dbg !2979
  store i8* %0, i8** %p, align 8, !dbg !2981
  br label %for.cond, !dbg !2982

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8*, i8** %p, align 8, !dbg !2983
  %2 = load i8, i8* %1, align 1, !dbg !2986
  %tobool = icmp ne i8 %2, 0, !dbg !2987
  br i1 %tobool, label %for.body, label %for.end, !dbg !2987

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %p, align 8, !dbg !2988
  %4 = load i8, i8* %3, align 1, !dbg !2990
  %conv = zext i8 %4 to i32, !dbg !2990
  %cmp = icmp sge i32 %conv, 43, !dbg !2991
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !2992

land.lhs.true:                                    ; preds = %for.body
  %5 = load i8*, i8** %p, align 8, !dbg !2993
  %6 = load i8, i8* %5, align 1, !dbg !2995
  %conv2 = zext i8 %6 to i32, !dbg !2995
  %cmp3 = icmp sle i32 %conv2, 58, !dbg !2996
  br i1 %cmp3, label %if.end, label %lor.lhs.false, !dbg !2997

lor.lhs.false:                                    ; preds = %land.lhs.true, %for.body
  %7 = load i8*, i8** %p, align 8, !dbg !2998
  %8 = load i8, i8* %7, align 1, !dbg !3000
  %conv5 = zext i8 %8 to i32, !dbg !3000
  %cmp6 = icmp sge i32 %conv5, 64, !dbg !3001
  br i1 %cmp6, label %land.lhs.true8, label %lor.lhs.false12, !dbg !3002

land.lhs.true8:                                   ; preds = %lor.lhs.false
  %9 = load i8*, i8** %p, align 8, !dbg !3003
  %10 = load i8, i8* %9, align 1, !dbg !3005
  %conv9 = zext i8 %10 to i32, !dbg !3005
  %cmp10 = icmp sle i32 %conv9, 90, !dbg !3006
  br i1 %cmp10, label %if.end, label %lor.lhs.false12, !dbg !3007

lor.lhs.false12:                                  ; preds = %land.lhs.true8, %lor.lhs.false
  %11 = load i8*, i8** %p, align 8, !dbg !3008
  %12 = load i8, i8* %11, align 1, !dbg !3009
  %conv13 = zext i8 %12 to i32, !dbg !3009
  %cmp14 = icmp eq i32 %conv13, 95, !dbg !3010
  br i1 %cmp14, label %if.end, label %lor.lhs.false16, !dbg !3011

lor.lhs.false16:                                  ; preds = %lor.lhs.false12
  %13 = load i8*, i8** %p, align 8, !dbg !3012
  %14 = load i8, i8* %13, align 1, !dbg !3013
  %conv17 = zext i8 %14 to i32, !dbg !3013
  %cmp18 = icmp sge i32 %conv17, 97, !dbg !3014
  br i1 %cmp18, label %land.lhs.true20, label %if.then, !dbg !3015

land.lhs.true20:                                  ; preds = %lor.lhs.false16
  %15 = load i8*, i8** %p, align 8, !dbg !3016
  %16 = load i8, i8* %15, align 1, !dbg !3017
  %conv21 = zext i8 %16 to i32, !dbg !3017
  %cmp22 = icmp sle i32 %conv21, 122, !dbg !3018
  br i1 %cmp22, label %if.end, label %if.then, !dbg !3019

if.then:                                          ; preds = %land.lhs.true20, %lor.lhs.false16
  br label %for.end, !dbg !3021

if.end:                                           ; preds = %land.lhs.true20, %lor.lhs.false12, %land.lhs.true8, %land.lhs.true
  br label %for.inc, !dbg !3022

for.inc:                                          ; preds = %if.end
  %17 = load i8*, i8** %p, align 8, !dbg !3023
  %incdec.ptr = getelementptr inbounds i8, i8* %17, i32 1, !dbg !3023
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !3023
  br label %for.cond, !dbg !3025, !llvm.loop !3026

for.end:                                          ; preds = %if.then, %for.cond
  %18 = load i8*, i8** %p, align 8, !dbg !3028
  %19 = load i8, i8* %18, align 1, !dbg !3030
  %tobool24 = icmp ne i8 %19, 0, !dbg !3030
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !3031

if.then25:                                        ; preds = %for.end
  %20 = load i8*, i8** %a.addr, align 8, !dbg !3032
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @report_file, align 8, !dbg !3034
  %call = call i32 @fputs(i8* %20, %struct._IO_FILE* %21), !dbg !3035
  br label %return, !dbg !3036

if.end26:                                         ; preds = %for.end
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @report_file, align 8, !dbg !3037
  %call27 = call i32 @fputc(i32 34, %struct._IO_FILE* %22), !dbg !3038
  %23 = load i8*, i8** %a.addr, align 8, !dbg !3039
  store i8* %23, i8** %p, align 8, !dbg !3041
  br label %for.cond28, !dbg !3042

for.cond28:                                       ; preds = %for.inc64, %if.end26
  %24 = load i8*, i8** %p, align 8, !dbg !3043
  %25 = load i8, i8* %24, align 1, !dbg !3046
  %tobool29 = icmp ne i8 %25, 0, !dbg !3047
  br i1 %tobool29, label %for.body30, label %for.end66, !dbg !3047

for.body30:                                       ; preds = %for.cond28
  %26 = load i8*, i8** %p, align 8, !dbg !3048
  %27 = load i8, i8* %26, align 1, !dbg !3051
  %conv31 = zext i8 %27 to i32, !dbg !3051
  %cmp32 = icmp eq i32 %conv31, 92, !dbg !3052
  br i1 %cmp32, label %if.then46, label %lor.lhs.false34, !dbg !3053

lor.lhs.false34:                                  ; preds = %for.body30
  %28 = load i8*, i8** %p, align 8, !dbg !3054
  %29 = load i8, i8* %28, align 1, !dbg !3056
  %conv35 = zext i8 %29 to i32, !dbg !3056
  %cmp36 = icmp eq i32 %conv35, 34, !dbg !3057
  br i1 %cmp36, label %if.then46, label %lor.lhs.false38, !dbg !3058

lor.lhs.false38:                                  ; preds = %lor.lhs.false34
  %30 = load i8*, i8** %p, align 8, !dbg !3059
  %31 = load i8, i8* %30, align 1, !dbg !3061
  %conv39 = zext i8 %31 to i32, !dbg !3061
  %cmp40 = icmp eq i32 %conv39, 36, !dbg !3062
  br i1 %cmp40, label %if.then46, label %lor.lhs.false42, !dbg !3063

lor.lhs.false42:                                  ; preds = %lor.lhs.false38
  %32 = load i8*, i8** %p, align 8, !dbg !3064
  %33 = load i8, i8* %32, align 1, !dbg !3066
  %conv43 = zext i8 %33 to i32, !dbg !3066
  %cmp44 = icmp eq i32 %conv43, 96, !dbg !3067
  br i1 %cmp44, label %if.then46, label %if.else, !dbg !3068

if.then46:                                        ; preds = %lor.lhs.false42, %lor.lhs.false38, %lor.lhs.false34, %for.body30
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @report_file, align 8, !dbg !3069
  %35 = load i8*, i8** %p, align 8, !dbg !3070
  %36 = load i8, i8* %35, align 1, !dbg !3071
  %conv47 = zext i8 %36 to i32, !dbg !3071
  %call48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.120, i32 0, i32 0), i32 %conv47), !dbg !3072
  br label %if.end63, !dbg !3072

if.else:                                          ; preds = %lor.lhs.false42
  %37 = load i8*, i8** %p, align 8, !dbg !3073
  %38 = load i8, i8* %37, align 1, !dbg !3075
  %conv49 = zext i8 %38 to i32, !dbg !3075
  %cmp50 = icmp slt i32 %conv49, 32, !dbg !3076
  br i1 %cmp50, label %if.then56, label %lor.lhs.false52, !dbg !3077

lor.lhs.false52:                                  ; preds = %if.else
  %39 = load i8*, i8** %p, align 8, !dbg !3078
  %40 = load i8, i8* %39, align 1, !dbg !3080
  %conv53 = zext i8 %40 to i32, !dbg !3080
  %cmp54 = icmp sgt i32 %conv53, 126, !dbg !3081
  br i1 %cmp54, label %if.then56, label %if.else59, !dbg !3082

if.then56:                                        ; preds = %lor.lhs.false52, %if.else
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @report_file, align 8, !dbg !3083
  %42 = load i8*, i8** %p, align 8, !dbg !3084
  %43 = load i8, i8* %42, align 1, !dbg !3085
  %conv57 = zext i8 %43 to i32, !dbg !3085
  %call58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.121, i32 0, i32 0), i32 %conv57), !dbg !3086
  br label %if.end62, !dbg !3086

if.else59:                                        ; preds = %lor.lhs.false52
  %44 = load i8*, i8** %p, align 8, !dbg !3087
  %45 = load i8, i8* %44, align 1, !dbg !3088
  %conv60 = zext i8 %45 to i32, !dbg !3088
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @report_file, align 8, !dbg !3089
  %call61 = call i32 @fputc(i32 %conv60, %struct._IO_FILE* %46), !dbg !3090
  br label %if.end62

if.end62:                                         ; preds = %if.else59, %if.then56
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.then46
  br label %for.inc64, !dbg !3091

for.inc64:                                        ; preds = %if.end63
  %47 = load i8*, i8** %p, align 8, !dbg !3092
  %incdec.ptr65 = getelementptr inbounds i8, i8* %47, i32 1, !dbg !3092
  store i8* %incdec.ptr65, i8** %p, align 8, !dbg !3092
  br label %for.cond28, !dbg !3094, !llvm.loop !3095

for.end66:                                        ; preds = %for.cond28
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @report_file, align 8, !dbg !3097
  %call67 = call i32 @fputc(i32 34, %struct._IO_FILE* %48), !dbg !3098
  br label %return, !dbg !3099

return:                                           ; preds = %for.end66, %if.then25
  ret void, !dbg !3100
}

declare i32 @fputc(i32, %struct._IO_FILE*) #1

declare i32 @fflush(%struct._IO_FILE*) #1

; Function Attrs: nounwind uwtable
define i32 @opt_default(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !3102 {
entry:
  %retval = alloca i32, align 4
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %o = alloca %struct.AVOption*, align 8
  %consumed = alloca i32, align 4
  %opt_stripped = alloca [128 x i8], align 16
  %p = alloca i8*, align 8
  %cc = alloca %struct.AVClass*, align 8
  %fc = alloca %struct.AVClass*, align 8
  %sc = alloca %struct.AVClass*, align 8
  %swr_class = alloca %struct.AVClass*, align 8
  %sws = alloca %struct.SwsContext*, align 8
  %ret = alloca i32, align 4
  %swr = alloca %struct.SwrContext*, align 8
  %ret128 = alloca i32, align 4
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !3103, metadata !1512), !dbg !3104
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !3105, metadata !1512), !dbg !3106
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !3107, metadata !1512), !dbg !3108
  call void @llvm.dbg.declare(metadata %struct.AVOption** %o, metadata !3109, metadata !1512), !dbg !3113
  call void @llvm.dbg.declare(metadata i32* %consumed, metadata !3114, metadata !1512), !dbg !3115
  store i32 0, i32* %consumed, align 4, !dbg !3115
  call void @llvm.dbg.declare(metadata [128 x i8]* %opt_stripped, metadata !3116, metadata !1512), !dbg !3120
  call void @llvm.dbg.declare(metadata i8** %p, metadata !3121, metadata !1512), !dbg !3122
  call void @llvm.dbg.declare(metadata %struct.AVClass** %cc, metadata !3123, metadata !1512), !dbg !3124
  %call = call %struct.AVClass* @avcodec_get_class(), !dbg !3125
  store %struct.AVClass* %call, %struct.AVClass** %cc, align 8, !dbg !3124
  call void @llvm.dbg.declare(metadata %struct.AVClass** %fc, metadata !3126, metadata !1512), !dbg !3127
  %call1 = call %struct.AVClass* @avformat_get_class(), !dbg !3128
  store %struct.AVClass* %call1, %struct.AVClass** %fc, align 8, !dbg !3127
  call void @llvm.dbg.declare(metadata %struct.AVClass** %sc, metadata !3130, metadata !1512), !dbg !3131
  %call2 = call %struct.AVClass* @sws_get_class(), !dbg !3132
  store %struct.AVClass* %call2, %struct.AVClass** %sc, align 8, !dbg !3131
  call void @llvm.dbg.declare(metadata %struct.AVClass** %swr_class, metadata !3133, metadata !1512), !dbg !3134
  %call3 = call %struct.AVClass* @swr_get_class(), !dbg !3135
  store %struct.AVClass* %call3, %struct.AVClass** %swr_class, align 8, !dbg !3134
  %0 = load i8*, i8** %opt.addr, align 8, !dbg !3136
  %call4 = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.28, i32 0, i32 0)) #14, !dbg !3138
  %tobool = icmp ne i32 %call4, 0, !dbg !3138
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3139

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %opt.addr, align 8, !dbg !3140
  %call5 = call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29, i32 0, i32 0)) #14, !dbg !3142
  %tobool6 = icmp ne i32 %call5, 0, !dbg !3142
  br i1 %tobool6, label %if.end, label %if.then, !dbg !3143

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @av_log_set_level(i32 48), !dbg !3144
  br label %if.end, !dbg !3144

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %2 = load i8*, i8** %opt.addr, align 8, !dbg !3145
  %call7 = call i8* @strchr(i8* %2, i32 58) #14, !dbg !3147
  store i8* %call7, i8** %p, align 8, !dbg !3148
  %tobool8 = icmp ne i8* %call7, null, !dbg !3148
  br i1 %tobool8, label %if.end11, label %if.then9, !dbg !3149

if.then9:                                         ; preds = %if.end
  %3 = load i8*, i8** %opt.addr, align 8, !dbg !3150
  %4 = load i8*, i8** %opt.addr, align 8, !dbg !3151
  %call10 = call i64 @strlen(i8* %4) #14, !dbg !3152
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %call10, !dbg !3153
  store i8* %add.ptr, i8** %p, align 8, !dbg !3154
  br label %if.end11, !dbg !3155

if.end11:                                         ; preds = %if.then9, %if.end
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %opt_stripped, i32 0, i32 0, !dbg !3156
  %5 = load i8*, i8** %opt.addr, align 8, !dbg !3157
  %6 = load i8*, i8** %p, align 8, !dbg !3158
  %7 = load i8*, i8** %opt.addr, align 8, !dbg !3159
  %sub.ptr.lhs.cast = ptrtoint i8* %6 to i64, !dbg !3160
  %sub.ptr.rhs.cast = ptrtoint i8* %7 to i64, !dbg !3160
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !3160
  %add = add nsw i64 %sub.ptr.sub, 1, !dbg !3161
  %cmp = icmp ugt i64 128, %add, !dbg !3162
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3163

cond.true:                                        ; preds = %if.end11
  %8 = load i8*, i8** %p, align 8, !dbg !3164
  %9 = load i8*, i8** %opt.addr, align 8, !dbg !3165
  %sub.ptr.lhs.cast12 = ptrtoint i8* %8 to i64, !dbg !3166
  %sub.ptr.rhs.cast13 = ptrtoint i8* %9 to i64, !dbg !3166
  %sub.ptr.sub14 = sub i64 %sub.ptr.lhs.cast12, %sub.ptr.rhs.cast13, !dbg !3166
  %add15 = add nsw i64 %sub.ptr.sub14, 1, !dbg !3167
  br label %cond.end, !dbg !3168

cond.false:                                       ; preds = %if.end11
  br label %cond.end, !dbg !3169

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %add15, %cond.true ], [ 128, %cond.false ], !dbg !3171
  %call16 = call i64 @av_strlcpy(i8* %arraydecay, i8* %5, i64 %cond), !dbg !3173
  %10 = bitcast %struct.AVClass** %cc to i8*, !dbg !3174
  %arraydecay17 = getelementptr inbounds [128 x i8], [128 x i8]* %opt_stripped, i32 0, i32 0, !dbg !3176
  %call18 = call %struct.AVOption* @opt_find(i8* %10, i8* %arraydecay17, i8* null, i32 0, i32 3), !dbg !3177
  store %struct.AVOption* %call18, %struct.AVOption** %o, align 8, !dbg !3178
  %tobool19 = icmp ne %struct.AVOption* %call18, null, !dbg !3178
  br i1 %tobool19, label %if.then36, label %lor.lhs.false20, !dbg !3179

lor.lhs.false20:                                  ; preds = %cond.end
  %11 = load i8*, i8** %opt.addr, align 8, !dbg !3180
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 0, !dbg !3180
  %12 = load i8, i8* %arrayidx, align 1, !dbg !3180
  %conv = sext i8 %12 to i32, !dbg !3180
  %cmp21 = icmp eq i32 %conv, 118, !dbg !3181
  br i1 %cmp21, label %land.lhs.true, label %lor.lhs.false23, !dbg !3182

lor.lhs.false23:                                  ; preds = %lor.lhs.false20
  %13 = load i8*, i8** %opt.addr, align 8, !dbg !3183
  %arrayidx24 = getelementptr inbounds i8, i8* %13, i64 0, !dbg !3183
  %14 = load i8, i8* %arrayidx24, align 1, !dbg !3183
  %conv25 = sext i8 %14 to i32, !dbg !3183
  %cmp26 = icmp eq i32 %conv25, 97, !dbg !3185
  br i1 %cmp26, label %land.lhs.true, label %lor.lhs.false28, !dbg !3186

lor.lhs.false28:                                  ; preds = %lor.lhs.false23
  %15 = load i8*, i8** %opt.addr, align 8, !dbg !3187
  %arrayidx29 = getelementptr inbounds i8, i8* %15, i64 0, !dbg !3187
  %16 = load i8, i8* %arrayidx29, align 1, !dbg !3187
  %conv30 = sext i8 %16 to i32, !dbg !3187
  %cmp31 = icmp eq i32 %conv30, 115, !dbg !3189
  br i1 %cmp31, label %land.lhs.true, label %if.end49, !dbg !3190

land.lhs.true:                                    ; preds = %lor.lhs.false28, %lor.lhs.false23, %lor.lhs.false20
  %17 = bitcast %struct.AVClass** %cc to i8*, !dbg !3191
  %18 = load i8*, i8** %opt.addr, align 8, !dbg !3192
  %add.ptr33 = getelementptr inbounds i8, i8* %18, i64 1, !dbg !3193
  %call34 = call %struct.AVOption* @opt_find(i8* %17, i8* %add.ptr33, i8* null, i32 0, i32 2), !dbg !3194
  store %struct.AVOption* %call34, %struct.AVOption** %o, align 8, !dbg !3195
  %tobool35 = icmp ne %struct.AVOption* %call34, null, !dbg !3195
  br i1 %tobool35, label %if.then36, label %if.end49, !dbg !3196

if.then36:                                        ; preds = %land.lhs.true, %cond.end
  %19 = load i8*, i8** %opt.addr, align 8, !dbg !3197
  %20 = load i8*, i8** %arg.addr, align 8, !dbg !3199
  %21 = load %struct.AVOption*, %struct.AVOption** %o, align 8, !dbg !3200
  %type = getelementptr inbounds %struct.AVOption, %struct.AVOption* %21, i32 0, i32 3, !dbg !3201
  %22 = load i32, i32* %type, align 4, !dbg !3201
  %cmp37 = icmp eq i32 %22, 0, !dbg !3202
  br i1 %cmp37, label %land.rhs, label %land.end, !dbg !3203

land.rhs:                                         ; preds = %if.then36
  %23 = load i8*, i8** %arg.addr, align 8, !dbg !3204
  %arrayidx39 = getelementptr inbounds i8, i8* %23, i64 0, !dbg !3204
  %24 = load i8, i8* %arrayidx39, align 1, !dbg !3204
  %conv40 = sext i8 %24 to i32, !dbg !3204
  %cmp41 = icmp eq i32 %conv40, 45, !dbg !3206
  br i1 %cmp41, label %lor.end, label %lor.rhs, !dbg !3207

lor.rhs:                                          ; preds = %land.rhs
  %25 = load i8*, i8** %arg.addr, align 8, !dbg !3208
  %arrayidx43 = getelementptr inbounds i8, i8* %25, i64 0, !dbg !3208
  %26 = load i8, i8* %arrayidx43, align 1, !dbg !3208
  %conv44 = sext i8 %26 to i32, !dbg !3208
  %cmp45 = icmp eq i32 %conv44, 43, !dbg !3210
  br label %lor.end, !dbg !3211

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %27 = phi i1 [ true, %land.rhs ], [ %cmp45, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %if.then36
  %28 = phi i1 [ false, %if.then36 ], [ %27, %lor.end ]
  %cond47 = select i1 %28, i32 32, i32 0, !dbg !3212
  %call48 = call i32 @av_dict_set(%struct.AVDictionary** @codec_opts, i8* %19, i8* %20, i32 %cond47), !dbg !3214
  store i32 1, i32* %consumed, align 4, !dbg !3215
  br label %if.end49, !dbg !3216

if.end49:                                         ; preds = %land.end, %land.lhs.true, %lor.lhs.false28
  %29 = bitcast %struct.AVClass** %fc to i8*, !dbg !3217
  %30 = load i8*, i8** %opt.addr, align 8, !dbg !3219
  %call50 = call %struct.AVOption* @opt_find(i8* %29, i8* %30, i8* null, i32 0, i32 3), !dbg !3220
  store %struct.AVOption* %call50, %struct.AVOption** %o, align 8, !dbg !3221
  %tobool51 = icmp ne %struct.AVOption* %call50, null, !dbg !3221
  br i1 %tobool51, label %if.then52, label %if.end73, !dbg !3222

if.then52:                                        ; preds = %if.end49
  %31 = load i8*, i8** %opt.addr, align 8, !dbg !3223
  %32 = load i8*, i8** %arg.addr, align 8, !dbg !3225
  %33 = load %struct.AVOption*, %struct.AVOption** %o, align 8, !dbg !3226
  %type53 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %33, i32 0, i32 3, !dbg !3227
  %34 = load i32, i32* %type53, align 4, !dbg !3227
  %cmp54 = icmp eq i32 %34, 0, !dbg !3228
  br i1 %cmp54, label %land.rhs56, label %land.end67, !dbg !3229

land.rhs56:                                       ; preds = %if.then52
  %35 = load i8*, i8** %arg.addr, align 8, !dbg !3230
  %arrayidx57 = getelementptr inbounds i8, i8* %35, i64 0, !dbg !3230
  %36 = load i8, i8* %arrayidx57, align 1, !dbg !3230
  %conv58 = sext i8 %36 to i32, !dbg !3230
  %cmp59 = icmp eq i32 %conv58, 45, !dbg !3232
  br i1 %cmp59, label %lor.end66, label %lor.rhs61, !dbg !3233

lor.rhs61:                                        ; preds = %land.rhs56
  %37 = load i8*, i8** %arg.addr, align 8, !dbg !3234
  %arrayidx62 = getelementptr inbounds i8, i8* %37, i64 0, !dbg !3234
  %38 = load i8, i8* %arrayidx62, align 1, !dbg !3234
  %conv63 = sext i8 %38 to i32, !dbg !3234
  %cmp64 = icmp eq i32 %conv63, 43, !dbg !3236
  br label %lor.end66, !dbg !3237

lor.end66:                                        ; preds = %lor.rhs61, %land.rhs56
  %39 = phi i1 [ true, %land.rhs56 ], [ %cmp64, %lor.rhs61 ]
  br label %land.end67

land.end67:                                       ; preds = %lor.end66, %if.then52
  %40 = phi i1 [ false, %if.then52 ], [ %39, %lor.end66 ]
  %cond68 = select i1 %40, i32 32, i32 0, !dbg !3238
  %call69 = call i32 @av_dict_set(%struct.AVDictionary** @format_opts, i8* %31, i8* %32, i32 %cond68), !dbg !3240
  %41 = load i32, i32* %consumed, align 4, !dbg !3241
  %tobool70 = icmp ne i32 %41, 0, !dbg !3241
  br i1 %tobool70, label %if.then71, label %if.end72, !dbg !3243

if.then71:                                        ; preds = %land.end67
  %42 = load i8*, i8** %opt.addr, align 8, !dbg !3244
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 40, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.30, i32 0, i32 0), i8* %42), !dbg !3245
  br label %if.end72, !dbg !3245

if.end72:                                         ; preds = %if.then71, %land.end67
  store i32 1, i32* %consumed, align 4, !dbg !3246
  br label %if.end73, !dbg !3247

if.end73:                                         ; preds = %if.end72, %if.end49
  %43 = load i32, i32* %consumed, align 4, !dbg !3248
  %tobool74 = icmp ne i32 %43, 0, !dbg !3248
  br i1 %tobool74, label %if.end121, label %land.lhs.true75, !dbg !3250

land.lhs.true75:                                  ; preds = %if.end73
  %44 = bitcast %struct.AVClass** %sc to i8*, !dbg !3251
  %45 = load i8*, i8** %opt.addr, align 8, !dbg !3253
  %call76 = call %struct.AVOption* @opt_find(i8* %44, i8* %45, i8* null, i32 0, i32 3), !dbg !3254
  store %struct.AVOption* %call76, %struct.AVOption** %o, align 8, !dbg !3255
  %tobool77 = icmp ne %struct.AVOption* %call76, null, !dbg !3255
  br i1 %tobool77, label %if.then78, label %if.end121, !dbg !3256

if.then78:                                        ; preds = %land.lhs.true75
  call void @llvm.dbg.declare(metadata %struct.SwsContext** %sws, metadata !3257, metadata !1512), !dbg !3262
  %call79 = call %struct.SwsContext* @sws_alloc_context(), !dbg !3263
  store %struct.SwsContext* %call79, %struct.SwsContext** %sws, align 8, !dbg !3262
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !3264, metadata !1512), !dbg !3265
  %46 = load %struct.SwsContext*, %struct.SwsContext** %sws, align 8, !dbg !3266
  %47 = bitcast %struct.SwsContext* %46 to i8*, !dbg !3266
  %48 = load i8*, i8** %opt.addr, align 8, !dbg !3267
  %49 = load i8*, i8** %arg.addr, align 8, !dbg !3268
  %call80 = call i32 @av_opt_set(i8* %47, i8* %48, i8* %49, i32 0), !dbg !3269
  store i32 %call80, i32* %ret, align 4, !dbg !3265
  %50 = load %struct.SwsContext*, %struct.SwsContext** %sws, align 8, !dbg !3270
  call void @sws_freeContext(%struct.SwsContext* %50), !dbg !3271
  %51 = load i8*, i8** %opt.addr, align 8, !dbg !3272
  %call81 = call i32 @strcmp(i8* %51, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i32 0, i32 0)) #14, !dbg !3274
  %tobool82 = icmp ne i32 %call81, 0, !dbg !3274
  br i1 %tobool82, label %lor.lhs.false83, label %if.then98, !dbg !3275

lor.lhs.false83:                                  ; preds = %if.then78
  %52 = load i8*, i8** %opt.addr, align 8, !dbg !3276
  %call84 = call i32 @strcmp(i8* %52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.32, i32 0, i32 0)) #14, !dbg !3278
  %tobool85 = icmp ne i32 %call84, 0, !dbg !3278
  br i1 %tobool85, label %lor.lhs.false86, label %if.then98, !dbg !3279

lor.lhs.false86:                                  ; preds = %lor.lhs.false83
  %53 = load i8*, i8** %opt.addr, align 8, !dbg !3280
  %call87 = call i32 @strcmp(i8* %53, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0)) #14, !dbg !3281
  %tobool88 = icmp ne i32 %call87, 0, !dbg !3281
  br i1 %tobool88, label %lor.lhs.false89, label %if.then98, !dbg !3282

lor.lhs.false89:                                  ; preds = %lor.lhs.false86
  %54 = load i8*, i8** %opt.addr, align 8, !dbg !3283
  %call90 = call i32 @strcmp(i8* %54, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0)) #14, !dbg !3284
  %tobool91 = icmp ne i32 %call90, 0, !dbg !3284
  br i1 %tobool91, label %lor.lhs.false92, label %if.then98, !dbg !3285

lor.lhs.false92:                                  ; preds = %lor.lhs.false89
  %55 = load i8*, i8** %opt.addr, align 8, !dbg !3286
  %call93 = call i32 @strcmp(i8* %55, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.35, i32 0, i32 0)) #14, !dbg !3287
  %tobool94 = icmp ne i32 %call93, 0, !dbg !3287
  br i1 %tobool94, label %lor.lhs.false95, label %if.then98, !dbg !3288

lor.lhs.false95:                                  ; preds = %lor.lhs.false92
  %56 = load i8*, i8** %opt.addr, align 8, !dbg !3289
  %call96 = call i32 @strcmp(i8* %56, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.36, i32 0, i32 0)) #14, !dbg !3290
  %tobool97 = icmp ne i32 %call96, 0, !dbg !3290
  br i1 %tobool97, label %if.end99, label %if.then98, !dbg !3291

if.then98:                                        ; preds = %lor.lhs.false95, %lor.lhs.false92, %lor.lhs.false89, %lor.lhs.false86, %lor.lhs.false83, %if.then78
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([106 x i8], [106 x i8]* @.str.37, i32 0, i32 0)), !dbg !3293
  store i32 -22, i32* %retval, align 4, !dbg !3295
  br label %return, !dbg !3295

if.end99:                                         ; preds = %lor.lhs.false95
  %57 = load i32, i32* %ret, align 4, !dbg !3296
  %cmp100 = icmp slt i32 %57, 0, !dbg !3298
  br i1 %cmp100, label %if.then102, label %if.end103, !dbg !3299

if.then102:                                       ; preds = %if.end99
  %58 = load i8*, i8** %opt.addr, align 8, !dbg !3300
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.38, i32 0, i32 0), i8* %58), !dbg !3302
  %59 = load i32, i32* %ret, align 4, !dbg !3303
  store i32 %59, i32* %retval, align 4, !dbg !3304
  br label %return, !dbg !3304

if.end103:                                        ; preds = %if.end99
  %60 = load i8*, i8** %opt.addr, align 8, !dbg !3305
  %61 = load i8*, i8** %arg.addr, align 8, !dbg !3306
  %62 = load %struct.AVOption*, %struct.AVOption** %o, align 8, !dbg !3307
  %type104 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %62, i32 0, i32 3, !dbg !3308
  %63 = load i32, i32* %type104, align 4, !dbg !3308
  %cmp105 = icmp eq i32 %63, 0, !dbg !3309
  br i1 %cmp105, label %land.rhs107, label %land.end118, !dbg !3310

land.rhs107:                                      ; preds = %if.end103
  %64 = load i8*, i8** %arg.addr, align 8, !dbg !3311
  %arrayidx108 = getelementptr inbounds i8, i8* %64, i64 0, !dbg !3311
  %65 = load i8, i8* %arrayidx108, align 1, !dbg !3311
  %conv109 = sext i8 %65 to i32, !dbg !3311
  %cmp110 = icmp eq i32 %conv109, 45, !dbg !3313
  br i1 %cmp110, label %lor.end117, label %lor.rhs112, !dbg !3314

lor.rhs112:                                       ; preds = %land.rhs107
  %66 = load i8*, i8** %arg.addr, align 8, !dbg !3315
  %arrayidx113 = getelementptr inbounds i8, i8* %66, i64 0, !dbg !3315
  %67 = load i8, i8* %arrayidx113, align 1, !dbg !3315
  %conv114 = sext i8 %67 to i32, !dbg !3315
  %cmp115 = icmp eq i32 %conv114, 43, !dbg !3316
  br label %lor.end117, !dbg !3317

lor.end117:                                       ; preds = %lor.rhs112, %land.rhs107
  %68 = phi i1 [ true, %land.rhs107 ], [ %cmp115, %lor.rhs112 ]
  br label %land.end118

land.end118:                                      ; preds = %lor.end117, %if.end103
  %69 = phi i1 [ false, %if.end103 ], [ %68, %lor.end117 ]
  %cond119 = select i1 %69, i32 32, i32 0, !dbg !3318
  %call120 = call i32 @av_dict_set(%struct.AVDictionary** @sws_dict, i8* %60, i8* %61, i32 %cond119), !dbg !3320
  store i32 1, i32* %consumed, align 4, !dbg !3321
  br label %if.end121, !dbg !3322

if.end121:                                        ; preds = %land.end118, %land.lhs.true75, %if.end73
  %70 = load i32, i32* %consumed, align 4, !dbg !3323
  %tobool122 = icmp ne i32 %70, 0, !dbg !3323
  br i1 %tobool122, label %if.end151, label %land.lhs.true123, !dbg !3325

land.lhs.true123:                                 ; preds = %if.end121
  %71 = bitcast %struct.AVClass** %swr_class to i8*, !dbg !3326
  %72 = load i8*, i8** %opt.addr, align 8, !dbg !3328
  %call124 = call %struct.AVOption* @opt_find(i8* %71, i8* %72, i8* null, i32 0, i32 3), !dbg !3329
  store %struct.AVOption* %call124, %struct.AVOption** %o, align 8, !dbg !3330
  %tobool125 = icmp ne %struct.AVOption* %call124, null, !dbg !3330
  br i1 %tobool125, label %if.then126, label %if.end151, !dbg !3331

if.then126:                                       ; preds = %land.lhs.true123
  call void @llvm.dbg.declare(metadata %struct.SwrContext** %swr, metadata !3332, metadata !1512), !dbg !3337
  %call127 = call %struct.SwrContext* @swr_alloc(), !dbg !3338
  store %struct.SwrContext* %call127, %struct.SwrContext** %swr, align 8, !dbg !3337
  call void @llvm.dbg.declare(metadata i32* %ret128, metadata !3339, metadata !1512), !dbg !3340
  %73 = load %struct.SwrContext*, %struct.SwrContext** %swr, align 8, !dbg !3341
  %74 = bitcast %struct.SwrContext* %73 to i8*, !dbg !3341
  %75 = load i8*, i8** %opt.addr, align 8, !dbg !3342
  %76 = load i8*, i8** %arg.addr, align 8, !dbg !3343
  %call129 = call i32 @av_opt_set(i8* %74, i8* %75, i8* %76, i32 0), !dbg !3344
  store i32 %call129, i32* %ret128, align 4, !dbg !3340
  call void @swr_free(%struct.SwrContext** %swr), !dbg !3345
  %77 = load i32, i32* %ret128, align 4, !dbg !3346
  %cmp130 = icmp slt i32 %77, 0, !dbg !3348
  br i1 %cmp130, label %if.then132, label %if.end133, !dbg !3349

if.then132:                                       ; preds = %if.then126
  %78 = load i8*, i8** %opt.addr, align 8, !dbg !3350
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.38, i32 0, i32 0), i8* %78), !dbg !3352
  %79 = load i32, i32* %ret128, align 4, !dbg !3353
  store i32 %79, i32* %retval, align 4, !dbg !3354
  br label %return, !dbg !3354

if.end133:                                        ; preds = %if.then126
  %80 = load i8*, i8** %opt.addr, align 8, !dbg !3355
  %81 = load i8*, i8** %arg.addr, align 8, !dbg !3356
  %82 = load %struct.AVOption*, %struct.AVOption** %o, align 8, !dbg !3357
  %type134 = getelementptr inbounds %struct.AVOption, %struct.AVOption* %82, i32 0, i32 3, !dbg !3358
  %83 = load i32, i32* %type134, align 4, !dbg !3358
  %cmp135 = icmp eq i32 %83, 0, !dbg !3359
  br i1 %cmp135, label %land.rhs137, label %land.end148, !dbg !3360

land.rhs137:                                      ; preds = %if.end133
  %84 = load i8*, i8** %arg.addr, align 8, !dbg !3361
  %arrayidx138 = getelementptr inbounds i8, i8* %84, i64 0, !dbg !3361
  %85 = load i8, i8* %arrayidx138, align 1, !dbg !3361
  %conv139 = sext i8 %85 to i32, !dbg !3361
  %cmp140 = icmp eq i32 %conv139, 45, !dbg !3363
  br i1 %cmp140, label %lor.end147, label %lor.rhs142, !dbg !3364

lor.rhs142:                                       ; preds = %land.rhs137
  %86 = load i8*, i8** %arg.addr, align 8, !dbg !3365
  %arrayidx143 = getelementptr inbounds i8, i8* %86, i64 0, !dbg !3365
  %87 = load i8, i8* %arrayidx143, align 1, !dbg !3365
  %conv144 = sext i8 %87 to i32, !dbg !3365
  %cmp145 = icmp eq i32 %conv144, 43, !dbg !3367
  br label %lor.end147, !dbg !3368

lor.end147:                                       ; preds = %lor.rhs142, %land.rhs137
  %88 = phi i1 [ true, %land.rhs137 ], [ %cmp145, %lor.rhs142 ]
  br label %land.end148

land.end148:                                      ; preds = %lor.end147, %if.end133
  %89 = phi i1 [ false, %if.end133 ], [ %88, %lor.end147 ]
  %cond149 = select i1 %89, i32 32, i32 0, !dbg !3369
  %call150 = call i32 @av_dict_set(%struct.AVDictionary** @swr_opts, i8* %80, i8* %81, i32 %cond149), !dbg !3371
  store i32 1, i32* %consumed, align 4, !dbg !3372
  br label %if.end151, !dbg !3373

if.end151:                                        ; preds = %land.end148, %land.lhs.true123, %if.end121
  %90 = load i32, i32* %consumed, align 4, !dbg !3374
  %tobool152 = icmp ne i32 %90, 0, !dbg !3374
  br i1 %tobool152, label %if.then153, label %if.end154, !dbg !3376

if.then153:                                       ; preds = %if.end151
  store i32 0, i32* %retval, align 4, !dbg !3377
  br label %return, !dbg !3377

if.end154:                                        ; preds = %if.end151
  store i32 -1414549496, i32* %retval, align 4, !dbg !3378
  br label %return, !dbg !3378

return:                                           ; preds = %if.end154, %if.then153, %if.then132, %if.then102, %if.then98
  %91 = load i32, i32* %retval, align 4, !dbg !3379
  ret i32 %91, !dbg !3379
}

declare %struct.AVClass* @avcodec_get_class() #1

declare %struct.AVClass* @avformat_get_class() #1

declare %struct.AVClass* @sws_get_class() #1

declare %struct.AVClass* @swr_get_class() #1

declare void @av_log_set_level(i32) #1

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #6

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #6

; Function Attrs: nounwind uwtable
define internal %struct.AVOption* @opt_find(i8* %obj, i8* %name, i8* %unit, i32 %opt_flags, i32 %search_flags) #0 !dbg !3380 {
entry:
  %retval = alloca %struct.AVOption*, align 8
  %obj.addr = alloca i8*, align 8
  %name.addr = alloca i8*, align 8
  %unit.addr = alloca i8*, align 8
  %opt_flags.addr = alloca i32, align 4
  %search_flags.addr = alloca i32, align 4
  %o = alloca %struct.AVOption*, align 8
  store i8* %obj, i8** %obj.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %obj.addr, metadata !3383, metadata !1512), !dbg !3384
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !3385, metadata !1512), !dbg !3386
  store i8* %unit, i8** %unit.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %unit.addr, metadata !3387, metadata !1512), !dbg !3388
  store i32 %opt_flags, i32* %opt_flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %opt_flags.addr, metadata !3389, metadata !1512), !dbg !3390
  store i32 %search_flags, i32* %search_flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %search_flags.addr, metadata !3391, metadata !1512), !dbg !3392
  call void @llvm.dbg.declare(metadata %struct.AVOption** %o, metadata !3393, metadata !1512), !dbg !3394
  %0 = load i8*, i8** %obj.addr, align 8, !dbg !3395
  %1 = load i8*, i8** %name.addr, align 8, !dbg !3396
  %2 = load i8*, i8** %unit.addr, align 8, !dbg !3397
  %3 = load i32, i32* %opt_flags.addr, align 4, !dbg !3398
  %4 = load i32, i32* %search_flags.addr, align 4, !dbg !3399
  %call = call %struct.AVOption* @av_opt_find(i8* %0, i8* %1, i8* %2, i32 %3, i32 %4), !dbg !3400
  store %struct.AVOption* %call, %struct.AVOption** %o, align 8, !dbg !3394
  %5 = load %struct.AVOption*, %struct.AVOption** %o, align 8, !dbg !3401
  %tobool = icmp ne %struct.AVOption* %5, null, !dbg !3401
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3403

land.lhs.true:                                    ; preds = %entry
  %6 = load %struct.AVOption*, %struct.AVOption** %o, align 8, !dbg !3404
  %flags = getelementptr inbounds %struct.AVOption, %struct.AVOption* %6, i32 0, i32 7, !dbg !3406
  %7 = load i32, i32* %flags, align 8, !dbg !3406
  %tobool1 = icmp ne i32 %7, 0, !dbg !3404
  br i1 %tobool1, label %if.end, label %if.then, !dbg !3407

if.then:                                          ; preds = %land.lhs.true
  store %struct.AVOption* null, %struct.AVOption** %retval, align 8, !dbg !3408
  br label %return, !dbg !3408

if.end:                                           ; preds = %land.lhs.true, %entry
  %8 = load %struct.AVOption*, %struct.AVOption** %o, align 8, !dbg !3409
  store %struct.AVOption* %8, %struct.AVOption** %retval, align 8, !dbg !3410
  br label %return, !dbg !3410

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.AVOption*, %struct.AVOption** %retval, align 8, !dbg !3411
  ret %struct.AVOption* %9, !dbg !3411
}

declare %struct.SwsContext* @sws_alloc_context() #1

declare i32 @av_opt_set(i8*, i8*, i8*, i32) #1

declare void @sws_freeContext(%struct.SwsContext*) #1

declare %struct.SwrContext* @swr_alloc() #1

declare void @swr_free(%struct.SwrContext**) #1

; Function Attrs: nounwind uwtable
define void @uninit_parse_context(%struct.OptionParseContext* %octx) #0 !dbg !3412 {
entry:
  %octx.addr = alloca %struct.OptionParseContext*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %l = alloca %struct.OptionGroupList*, align 8
  store %struct.OptionParseContext* %octx, %struct.OptionParseContext** %octx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionParseContext** %octx.addr, metadata !3415, metadata !1512), !dbg !3416
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3417, metadata !1512), !dbg !3418
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3419, metadata !1512), !dbg !3420
  store i32 0, i32* %i, align 4, !dbg !3421
  br label %for.cond, !dbg !3423

for.cond:                                         ; preds = %for.inc24, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3424
  %1 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3427
  %nb_groups = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %1, i32 0, i32 2, !dbg !3428
  %2 = load i32, i32* %nb_groups, align 8, !dbg !3428
  %cmp = icmp slt i32 %0, %2, !dbg !3429
  br i1 %cmp, label %for.body, label %for.end26, !dbg !3430

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.OptionGroupList** %l, metadata !3431, metadata !1512), !dbg !3433
  %3 = load i32, i32* %i, align 4, !dbg !3434
  %idxprom = sext i32 %3 to i64, !dbg !3435
  %4 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3435
  %groups = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %4, i32 0, i32 1, !dbg !3436
  %5 = load %struct.OptionGroupList*, %struct.OptionGroupList** %groups, align 8, !dbg !3436
  %arrayidx = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %5, i64 %idxprom, !dbg !3435
  store %struct.OptionGroupList* %arrayidx, %struct.OptionGroupList** %l, align 8, !dbg !3433
  store i32 0, i32* %j, align 4, !dbg !3437
  br label %for.cond1, !dbg !3439

for.cond1:                                        ; preds = %for.inc, %for.body
  %6 = load i32, i32* %j, align 4, !dbg !3440
  %7 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3443
  %nb_groups2 = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %7, i32 0, i32 2, !dbg !3444
  %8 = load i32, i32* %nb_groups2, align 8, !dbg !3444
  %cmp3 = icmp slt i32 %6, %8, !dbg !3445
  br i1 %cmp3, label %for.body4, label %for.end, !dbg !3446

for.body4:                                        ; preds = %for.cond1
  %9 = load i32, i32* %j, align 4, !dbg !3447
  %idxprom5 = sext i32 %9 to i64, !dbg !3449
  %10 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3449
  %groups6 = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %10, i32 0, i32 1, !dbg !3450
  %11 = load %struct.OptionGroup*, %struct.OptionGroup** %groups6, align 8, !dbg !3450
  %arrayidx7 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %11, i64 %idxprom5, !dbg !3449
  %opts = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %arrayidx7, i32 0, i32 2, !dbg !3451
  %12 = bitcast %struct.Option** %opts to i8*, !dbg !3452
  call void @av_freep(i8* %12), !dbg !3453
  %13 = load i32, i32* %j, align 4, !dbg !3454
  %idxprom8 = sext i32 %13 to i64, !dbg !3455
  %14 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3455
  %groups9 = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %14, i32 0, i32 1, !dbg !3456
  %15 = load %struct.OptionGroup*, %struct.OptionGroup** %groups9, align 8, !dbg !3456
  %arrayidx10 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %15, i64 %idxprom8, !dbg !3455
  %codec_opts = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %arrayidx10, i32 0, i32 4, !dbg !3457
  call void @av_dict_free(%struct.AVDictionary** %codec_opts), !dbg !3458
  %16 = load i32, i32* %j, align 4, !dbg !3459
  %idxprom11 = sext i32 %16 to i64, !dbg !3460
  %17 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3460
  %groups12 = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %17, i32 0, i32 1, !dbg !3461
  %18 = load %struct.OptionGroup*, %struct.OptionGroup** %groups12, align 8, !dbg !3461
  %arrayidx13 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %18, i64 %idxprom11, !dbg !3460
  %format_opts = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %arrayidx13, i32 0, i32 5, !dbg !3462
  call void @av_dict_free(%struct.AVDictionary** %format_opts), !dbg !3463
  %19 = load i32, i32* %j, align 4, !dbg !3464
  %idxprom14 = sext i32 %19 to i64, !dbg !3465
  %20 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3465
  %groups15 = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %20, i32 0, i32 1, !dbg !3466
  %21 = load %struct.OptionGroup*, %struct.OptionGroup** %groups15, align 8, !dbg !3466
  %arrayidx16 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %21, i64 %idxprom14, !dbg !3465
  %resample_opts = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %arrayidx16, i32 0, i32 6, !dbg !3467
  call void @av_dict_free(%struct.AVDictionary** %resample_opts), !dbg !3468
  %22 = load i32, i32* %j, align 4, !dbg !3469
  %idxprom17 = sext i32 %22 to i64, !dbg !3470
  %23 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3470
  %groups18 = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %23, i32 0, i32 1, !dbg !3471
  %24 = load %struct.OptionGroup*, %struct.OptionGroup** %groups18, align 8, !dbg !3471
  %arrayidx19 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %24, i64 %idxprom17, !dbg !3470
  %sws_dict = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %arrayidx19, i32 0, i32 7, !dbg !3472
  call void @av_dict_free(%struct.AVDictionary** %sws_dict), !dbg !3473
  %25 = load i32, i32* %j, align 4, !dbg !3474
  %idxprom20 = sext i32 %25 to i64, !dbg !3475
  %26 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3475
  %groups21 = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %26, i32 0, i32 1, !dbg !3476
  %27 = load %struct.OptionGroup*, %struct.OptionGroup** %groups21, align 8, !dbg !3476
  %arrayidx22 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %27, i64 %idxprom20, !dbg !3475
  %swr_opts = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %arrayidx22, i32 0, i32 8, !dbg !3477
  call void @av_dict_free(%struct.AVDictionary** %swr_opts), !dbg !3478
  br label %for.inc, !dbg !3479

for.inc:                                          ; preds = %for.body4
  %28 = load i32, i32* %j, align 4, !dbg !3480
  %inc = add nsw i32 %28, 1, !dbg !3480
  store i32 %inc, i32* %j, align 4, !dbg !3480
  br label %for.cond1, !dbg !3482, !llvm.loop !3483

for.end:                                          ; preds = %for.cond1
  %29 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3485
  %groups23 = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %29, i32 0, i32 1, !dbg !3486
  %30 = bitcast %struct.OptionGroup** %groups23 to i8*, !dbg !3487
  call void @av_freep(i8* %30), !dbg !3488
  br label %for.inc24, !dbg !3489

for.inc24:                                        ; preds = %for.end
  %31 = load i32, i32* %i, align 4, !dbg !3490
  %inc25 = add nsw i32 %31, 1, !dbg !3490
  store i32 %inc25, i32* %i, align 4, !dbg !3490
  br label %for.cond, !dbg !3492, !llvm.loop !3493

for.end26:                                        ; preds = %for.cond
  %32 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3495
  %groups27 = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %32, i32 0, i32 1, !dbg !3496
  %33 = bitcast %struct.OptionGroupList** %groups27 to i8*, !dbg !3497
  call void @av_freep(i8* %33), !dbg !3498
  %34 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3499
  %cur_group = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %34, i32 0, i32 3, !dbg !3500
  %opts28 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %cur_group, i32 0, i32 2, !dbg !3501
  %35 = bitcast %struct.Option** %opts28 to i8*, !dbg !3502
  call void @av_freep(i8* %35), !dbg !3503
  %36 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3504
  %global_opts = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %36, i32 0, i32 0, !dbg !3505
  %opts29 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %global_opts, i32 0, i32 2, !dbg !3506
  %37 = bitcast %struct.Option** %opts29 to i8*, !dbg !3507
  call void @av_freep(i8* %37), !dbg !3508
  call void @uninit_opts(), !dbg !3509
  ret void, !dbg !3510
}

declare void @av_freep(i8*) #1

; Function Attrs: nounwind uwtable
define i32 @split_commandline(%struct.OptionParseContext* %octx, i32 %argc, i8** %argv, %struct.OptionDef* %options, %struct.OptionGroupDef* %groups, i32 %nb_groups) #0 !dbg !3511 {
entry:
  %retval = alloca i32, align 4
  %octx.addr = alloca %struct.OptionParseContext*, align 8
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %options.addr = alloca %struct.OptionDef*, align 8
  %groups.addr = alloca %struct.OptionGroupDef*, align 8
  %nb_groups.addr = alloca i32, align 4
  %optindex = alloca i32, align 4
  %dashdash = alloca i32, align 4
  %opt = alloca i8*, align 8
  %arg = alloca i8*, align 8
  %po = alloca %struct.OptionDef*, align 8
  %ret = alloca i32, align 4
  store %struct.OptionParseContext* %octx, %struct.OptionParseContext** %octx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionParseContext** %octx.addr, metadata !3514, metadata !1512), !dbg !3515
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !3516, metadata !1512), !dbg !3517
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !3518, metadata !1512), !dbg !3519
  store %struct.OptionDef* %options, %struct.OptionDef** %options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %options.addr, metadata !3520, metadata !1512), !dbg !3521
  store %struct.OptionGroupDef* %groups, %struct.OptionGroupDef** %groups.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionGroupDef** %groups.addr, metadata !3522, metadata !1512), !dbg !3523
  store i32 %nb_groups, i32* %nb_groups.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_groups.addr, metadata !3524, metadata !1512), !dbg !3525
  call void @llvm.dbg.declare(metadata i32* %optindex, metadata !3526, metadata !1512), !dbg !3527
  store i32 1, i32* %optindex, align 4, !dbg !3527
  call void @llvm.dbg.declare(metadata i32* %dashdash, metadata !3528, metadata !1512), !dbg !3529
  store i32 -2, i32* %dashdash, align 4, !dbg !3529
  call void @prepare_app_arguments(i32* %argc.addr, i8*** %argv.addr), !dbg !3530
  %0 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3531
  %1 = load %struct.OptionGroupDef*, %struct.OptionGroupDef** %groups.addr, align 8, !dbg !3532
  %2 = load i32, i32* %nb_groups.addr, align 4, !dbg !3533
  call void @init_parse_context(%struct.OptionParseContext* %0, %struct.OptionGroupDef* %1, i32 %2), !dbg !3534
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 48, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.39, i32 0, i32 0)), !dbg !3535
  br label %while.cond, !dbg !3536

while.cond:                                       ; preds = %if.then102, %if.then70, %if.end58, %do.end, %if.then19, %if.then, %entry
  %3 = load i32, i32* %optindex, align 4, !dbg !3537
  %4 = load i32, i32* %argc.addr, align 4, !dbg !3539
  %cmp = icmp slt i32 %3, %4, !dbg !3540
  br i1 %cmp, label %while.body, label %while.end, !dbg !3541

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8** %opt, metadata !3542, metadata !1512), !dbg !3544
  %5 = load i32, i32* %optindex, align 4, !dbg !3545
  %inc = add nsw i32 %5, 1, !dbg !3545
  store i32 %inc, i32* %optindex, align 4, !dbg !3545
  %idxprom = sext i32 %5 to i64, !dbg !3546
  %6 = load i8**, i8*** %argv.addr, align 8, !dbg !3546
  %arrayidx = getelementptr inbounds i8*, i8** %6, i64 %idxprom, !dbg !3546
  %7 = load i8*, i8** %arrayidx, align 8, !dbg !3546
  store i8* %7, i8** %opt, align 8, !dbg !3544
  call void @llvm.dbg.declare(metadata i8** %arg, metadata !3547, metadata !1512), !dbg !3548
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %po, metadata !3549, metadata !1512), !dbg !3550
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !3551, metadata !1512), !dbg !3552
  %8 = load i8*, i8** %opt, align 8, !dbg !3553
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 48, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.40, i32 0, i32 0), i8* %8), !dbg !3554
  %9 = load i8*, i8** %opt, align 8, !dbg !3555
  %arrayidx1 = getelementptr inbounds i8, i8* %9, i64 0, !dbg !3555
  %10 = load i8, i8* %arrayidx1, align 1, !dbg !3555
  %conv = sext i8 %10 to i32, !dbg !3555
  %cmp2 = icmp eq i32 %conv, 45, !dbg !3557
  br i1 %cmp2, label %land.lhs.true, label %if.end, !dbg !3558

land.lhs.true:                                    ; preds = %while.body
  %11 = load i8*, i8** %opt, align 8, !dbg !3559
  %arrayidx4 = getelementptr inbounds i8, i8* %11, i64 1, !dbg !3559
  %12 = load i8, i8* %arrayidx4, align 1, !dbg !3559
  %conv5 = sext i8 %12 to i32, !dbg !3559
  %cmp6 = icmp eq i32 %conv5, 45, !dbg !3561
  br i1 %cmp6, label %land.lhs.true8, label %if.end, !dbg !3562

land.lhs.true8:                                   ; preds = %land.lhs.true
  %13 = load i8*, i8** %opt, align 8, !dbg !3563
  %arrayidx9 = getelementptr inbounds i8, i8* %13, i64 2, !dbg !3563
  %14 = load i8, i8* %arrayidx9, align 1, !dbg !3563
  %tobool = icmp ne i8 %14, 0, !dbg !3563
  br i1 %tobool, label %if.end, label %if.then, !dbg !3565

if.then:                                          ; preds = %land.lhs.true8
  %15 = load i32, i32* %optindex, align 4, !dbg !3566
  store i32 %15, i32* %dashdash, align 4, !dbg !3568
  br label %while.cond, !dbg !3569, !llvm.loop !3570

if.end:                                           ; preds = %land.lhs.true8, %land.lhs.true, %while.body
  %16 = load i8*, i8** %opt, align 8, !dbg !3571
  %arrayidx10 = getelementptr inbounds i8, i8* %16, i64 0, !dbg !3571
  %17 = load i8, i8* %arrayidx10, align 1, !dbg !3571
  %conv11 = sext i8 %17 to i32, !dbg !3571
  %cmp12 = icmp ne i32 %conv11, 45, !dbg !3573
  br i1 %cmp12, label %if.then19, label %lor.lhs.false, !dbg !3574

lor.lhs.false:                                    ; preds = %if.end
  %18 = load i8*, i8** %opt, align 8, !dbg !3575
  %arrayidx14 = getelementptr inbounds i8, i8* %18, i64 1, !dbg !3575
  %19 = load i8, i8* %arrayidx14, align 1, !dbg !3575
  %tobool15 = icmp ne i8 %19, 0, !dbg !3575
  br i1 %tobool15, label %lor.lhs.false16, label %if.then19, !dbg !3577

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %20 = load i32, i32* %dashdash, align 4, !dbg !3578
  %add = add nsw i32 %20, 1, !dbg !3580
  %21 = load i32, i32* %optindex, align 4, !dbg !3581
  %cmp17 = icmp eq i32 %add, %21, !dbg !3582
  br i1 %cmp17, label %if.then19, label %if.end21, !dbg !3583

if.then19:                                        ; preds = %lor.lhs.false16, %lor.lhs.false, %if.end
  %22 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3584
  %23 = load i8*, i8** %opt, align 8, !dbg !3586
  call void @finish_group(%struct.OptionParseContext* %22, i32 0, i8* %23), !dbg !3587
  %24 = load %struct.OptionGroupDef*, %struct.OptionGroupDef** %groups.addr, align 8, !dbg !3588
  %arrayidx20 = getelementptr inbounds %struct.OptionGroupDef, %struct.OptionGroupDef* %24, i64 0, !dbg !3588
  %name = getelementptr inbounds %struct.OptionGroupDef, %struct.OptionGroupDef* %arrayidx20, i32 0, i32 0, !dbg !3589
  %25 = load i8*, i8** %name, align 8, !dbg !3589
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 48, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.41, i32 0, i32 0), i8* %25), !dbg !3590
  br label %while.cond, !dbg !3591, !llvm.loop !3570

if.end21:                                         ; preds = %lor.lhs.false16
  %26 = load i8*, i8** %opt, align 8, !dbg !3592
  %incdec.ptr = getelementptr inbounds i8, i8* %26, i32 1, !dbg !3592
  store i8* %incdec.ptr, i8** %opt, align 8, !dbg !3592
  %27 = load %struct.OptionGroupDef*, %struct.OptionGroupDef** %groups.addr, align 8, !dbg !3593
  %28 = load i32, i32* %nb_groups.addr, align 4, !dbg !3595
  %29 = load i8*, i8** %opt, align 8, !dbg !3596
  %call = call i32 @match_group_separator(%struct.OptionGroupDef* %27, i32 %28, i8* %29), !dbg !3597
  store i32 %call, i32* %ret, align 4, !dbg !3598
  %cmp22 = icmp sge i32 %call, 0, !dbg !3599
  br i1 %cmp22, label %if.then24, label %if.end34, !dbg !3600

if.then24:                                        ; preds = %if.end21
  br label %do.body, !dbg !3601, !llvm.loop !3603

do.body:                                          ; preds = %if.then24
  %30 = load i32, i32* %optindex, align 4, !dbg !3604
  %inc25 = add nsw i32 %30, 1, !dbg !3604
  store i32 %inc25, i32* %optindex, align 4, !dbg !3604
  %idxprom26 = sext i32 %30 to i64, !dbg !3607
  %31 = load i8**, i8*** %argv.addr, align 8, !dbg !3607
  %arrayidx27 = getelementptr inbounds i8*, i8** %31, i64 %idxprom26, !dbg !3607
  %32 = load i8*, i8** %arrayidx27, align 8, !dbg !3607
  store i8* %32, i8** %arg, align 8, !dbg !3608
  %33 = load i8*, i8** %arg, align 8, !dbg !3609
  %tobool28 = icmp ne i8* %33, null, !dbg !3609
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !3610

if.then29:                                        ; preds = %do.body
  %34 = load i8*, i8** %opt, align 8, !dbg !3611
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.42, i32 0, i32 0), i8* %34), !dbg !3615
  store i32 -22, i32* %retval, align 4, !dbg !3616
  br label %return, !dbg !3616

if.end30:                                         ; preds = %do.body
  br label %do.end, !dbg !3617

do.end:                                           ; preds = %if.end30
  %35 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3619
  %36 = load i32, i32* %ret, align 4, !dbg !3620
  %37 = load i8*, i8** %arg, align 8, !dbg !3621
  call void @finish_group(%struct.OptionParseContext* %35, i32 %36, i8* %37), !dbg !3622
  %38 = load i32, i32* %ret, align 4, !dbg !3623
  %idxprom31 = sext i32 %38 to i64, !dbg !3624
  %39 = load %struct.OptionGroupDef*, %struct.OptionGroupDef** %groups.addr, align 8, !dbg !3624
  %arrayidx32 = getelementptr inbounds %struct.OptionGroupDef, %struct.OptionGroupDef* %39, i64 %idxprom31, !dbg !3624
  %name33 = getelementptr inbounds %struct.OptionGroupDef, %struct.OptionGroupDef* %arrayidx32, i32 0, i32 0, !dbg !3625
  %40 = load i8*, i8** %name33, align 8, !dbg !3625
  %41 = load i8*, i8** %arg, align 8, !dbg !3626
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 48, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.43, i32 0, i32 0), i8* %40, i8* %41), !dbg !3627
  br label %while.cond, !dbg !3628, !llvm.loop !3570

if.end34:                                         ; preds = %if.end21
  %42 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !3629
  %43 = load i8*, i8** %opt, align 8, !dbg !3630
  %call35 = call %struct.OptionDef* @find_option(%struct.OptionDef* %42, i8* %43), !dbg !3631
  store %struct.OptionDef* %call35, %struct.OptionDef** %po, align 8, !dbg !3632
  %44 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !3633
  %name36 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %44, i32 0, i32 0, !dbg !3635
  %45 = load i8*, i8** %name36, align 8, !dbg !3635
  %tobool37 = icmp ne i8* %45, null, !dbg !3633
  br i1 %tobool37, label %if.then38, label %if.end60, !dbg !3636

if.then38:                                        ; preds = %if.end34
  %46 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !3637
  %flags = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %46, i32 0, i32 1, !dbg !3640
  %47 = load i32, i32* %flags, align 8, !dbg !3640
  %and = and i32 %47, 2048, !dbg !3641
  %tobool39 = icmp ne i32 %and, 0, !dbg !3641
  br i1 %tobool39, label %if.then40, label %if.else, !dbg !3642

if.then40:                                        ; preds = %if.then38
  %48 = load i32, i32* %optindex, align 4, !dbg !3643
  %inc41 = add nsw i32 %48, 1, !dbg !3643
  store i32 %inc41, i32* %optindex, align 4, !dbg !3643
  %idxprom42 = sext i32 %48 to i64, !dbg !3645
  %49 = load i8**, i8*** %argv.addr, align 8, !dbg !3645
  %arrayidx43 = getelementptr inbounds i8*, i8** %49, i64 %idxprom42, !dbg !3645
  %50 = load i8*, i8** %arrayidx43, align 8, !dbg !3645
  store i8* %50, i8** %arg, align 8, !dbg !3646
  br label %if.end58, !dbg !3647

if.else:                                          ; preds = %if.then38
  %51 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !3648
  %flags44 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %51, i32 0, i32 1, !dbg !3651
  %52 = load i32, i32* %flags44, align 8, !dbg !3651
  %and45 = and i32 %52, 1, !dbg !3652
  %tobool46 = icmp ne i32 %and45, 0, !dbg !3652
  br i1 %tobool46, label %if.then47, label %if.else56, !dbg !3648

if.then47:                                        ; preds = %if.else
  br label %do.body48, !dbg !3653, !llvm.loop !3655

do.body48:                                        ; preds = %if.then47
  %53 = load i32, i32* %optindex, align 4, !dbg !3656
  %inc49 = add nsw i32 %53, 1, !dbg !3656
  store i32 %inc49, i32* %optindex, align 4, !dbg !3656
  %idxprom50 = sext i32 %53 to i64, !dbg !3659
  %54 = load i8**, i8*** %argv.addr, align 8, !dbg !3659
  %arrayidx51 = getelementptr inbounds i8*, i8** %54, i64 %idxprom50, !dbg !3659
  %55 = load i8*, i8** %arrayidx51, align 8, !dbg !3659
  store i8* %55, i8** %arg, align 8, !dbg !3660
  %56 = load i8*, i8** %arg, align 8, !dbg !3661
  %tobool52 = icmp ne i8* %56, null, !dbg !3661
  br i1 %tobool52, label %if.end54, label %if.then53, !dbg !3662

if.then53:                                        ; preds = %do.body48
  %57 = load i8*, i8** %opt, align 8, !dbg !3663
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.42, i32 0, i32 0), i8* %57), !dbg !3667
  store i32 -22, i32* %retval, align 4, !dbg !3668
  br label %return, !dbg !3668

if.end54:                                         ; preds = %do.body48
  br label %do.end55, !dbg !3669

do.end55:                                         ; preds = %if.end54
  br label %if.end57, !dbg !3671

if.else56:                                        ; preds = %if.else
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0), i8** %arg, align 8, !dbg !3672
  br label %if.end57

if.end57:                                         ; preds = %if.else56, %do.end55
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then40
  %58 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3674
  %59 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !3675
  %60 = load i8*, i8** %opt, align 8, !dbg !3676
  %61 = load i8*, i8** %arg, align 8, !dbg !3677
  call void @add_opt(%struct.OptionParseContext* %58, %struct.OptionDef* %59, i8* %60, i8* %61), !dbg !3678
  %62 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !3679
  %name59 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %62, i32 0, i32 0, !dbg !3680
  %63 = load i8*, i8** %name59, align 8, !dbg !3680
  %64 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !3681
  %help = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %64, i32 0, i32 3, !dbg !3682
  %65 = load i8*, i8** %help, align 8, !dbg !3682
  %66 = load i8*, i8** %arg, align 8, !dbg !3683
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 48, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.44, i32 0, i32 0), i8* %63, i8* %65, i8* %66), !dbg !3684
  br label %while.cond, !dbg !3685, !llvm.loop !3570

if.end60:                                         ; preds = %if.end34
  %67 = load i32, i32* %optindex, align 4, !dbg !3686
  %idxprom61 = sext i32 %67 to i64, !dbg !3688
  %68 = load i8**, i8*** %argv.addr, align 8, !dbg !3688
  %arrayidx62 = getelementptr inbounds i8*, i8** %68, i64 %idxprom61, !dbg !3688
  %69 = load i8*, i8** %arrayidx62, align 8, !dbg !3688
  %tobool63 = icmp ne i8* %69, null, !dbg !3688
  br i1 %tobool63, label %if.then64, label %if.end82, !dbg !3689

if.then64:                                        ; preds = %if.end60
  %70 = load i8*, i8** %opt, align 8, !dbg !3690
  %71 = load i32, i32* %optindex, align 4, !dbg !3692
  %idxprom65 = sext i32 %71 to i64, !dbg !3693
  %72 = load i8**, i8*** %argv.addr, align 8, !dbg !3693
  %arrayidx66 = getelementptr inbounds i8*, i8** %72, i64 %idxprom65, !dbg !3693
  %73 = load i8*, i8** %arrayidx66, align 8, !dbg !3693
  %call67 = call i32 @opt_default(i8* null, i8* %70, i8* %73), !dbg !3694
  store i32 %call67, i32* %ret, align 4, !dbg !3695
  %74 = load i32, i32* %ret, align 4, !dbg !3696
  %cmp68 = icmp sge i32 %74, 0, !dbg !3698
  br i1 %cmp68, label %if.then70, label %if.else74, !dbg !3699

if.then70:                                        ; preds = %if.then64
  %75 = load i8*, i8** %opt, align 8, !dbg !3700
  %76 = load i32, i32* %optindex, align 4, !dbg !3702
  %idxprom71 = sext i32 %76 to i64, !dbg !3703
  %77 = load i8**, i8*** %argv.addr, align 8, !dbg !3703
  %arrayidx72 = getelementptr inbounds i8*, i8** %77, i64 %idxprom71, !dbg !3703
  %78 = load i8*, i8** %arrayidx72, align 8, !dbg !3703
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 48, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.45, i32 0, i32 0), i8* %75, i8* %78), !dbg !3704
  %79 = load i32, i32* %optindex, align 4, !dbg !3705
  %inc73 = add nsw i32 %79, 1, !dbg !3705
  store i32 %inc73, i32* %optindex, align 4, !dbg !3705
  br label %while.cond, !dbg !3706, !llvm.loop !3570

if.else74:                                        ; preds = %if.then64
  %80 = load i32, i32* %ret, align 4, !dbg !3707
  %cmp75 = icmp ne i32 %80, -1414549496, !dbg !3709
  br i1 %cmp75, label %if.then77, label %if.end80, !dbg !3710

if.then77:                                        ; preds = %if.else74
  %81 = load i8*, i8** %opt, align 8, !dbg !3711
  %82 = load i32, i32* %optindex, align 4, !dbg !3713
  %idxprom78 = sext i32 %82 to i64, !dbg !3714
  %83 = load i8**, i8*** %argv.addr, align 8, !dbg !3714
  %arrayidx79 = getelementptr inbounds i8*, i8** %83, i64 %idxprom78, !dbg !3714
  %84 = load i8*, i8** %arrayidx79, align 8, !dbg !3714
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.46, i32 0, i32 0), i8* %81, i8* %84), !dbg !3715
  %85 = load i32, i32* %ret, align 4, !dbg !3716
  store i32 %85, i32* %retval, align 4, !dbg !3717
  br label %return, !dbg !3717

if.end80:                                         ; preds = %if.else74
  br label %if.end81

if.end81:                                         ; preds = %if.end80
  br label %if.end82, !dbg !3718

if.end82:                                         ; preds = %if.end81, %if.end60
  %86 = load i8*, i8** %opt, align 8, !dbg !3719
  %arrayidx83 = getelementptr inbounds i8, i8* %86, i64 0, !dbg !3719
  %87 = load i8, i8* %arrayidx83, align 1, !dbg !3719
  %conv84 = sext i8 %87 to i32, !dbg !3719
  %cmp85 = icmp eq i32 %conv84, 110, !dbg !3721
  br i1 %cmp85, label %land.lhs.true87, label %if.end105, !dbg !3722

land.lhs.true87:                                  ; preds = %if.end82
  %88 = load i8*, i8** %opt, align 8, !dbg !3723
  %arrayidx88 = getelementptr inbounds i8, i8* %88, i64 1, !dbg !3723
  %89 = load i8, i8* %arrayidx88, align 1, !dbg !3723
  %conv89 = sext i8 %89 to i32, !dbg !3723
  %cmp90 = icmp eq i32 %conv89, 111, !dbg !3725
  br i1 %cmp90, label %land.lhs.true92, label %if.end105, !dbg !3726

land.lhs.true92:                                  ; preds = %land.lhs.true87
  %90 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !3727
  %91 = load i8*, i8** %opt, align 8, !dbg !3728
  %add.ptr = getelementptr inbounds i8, i8* %91, i64 2, !dbg !3729
  %call93 = call %struct.OptionDef* @find_option(%struct.OptionDef* %90, i8* %add.ptr), !dbg !3730
  store %struct.OptionDef* %call93, %struct.OptionDef** %po, align 8, !dbg !3731
  %tobool94 = icmp ne %struct.OptionDef* %call93, null, !dbg !3731
  br i1 %tobool94, label %land.lhs.true95, label %if.end105, !dbg !3732

land.lhs.true95:                                  ; preds = %land.lhs.true92
  %92 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !3733
  %name96 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %92, i32 0, i32 0, !dbg !3734
  %93 = load i8*, i8** %name96, align 8, !dbg !3734
  %tobool97 = icmp ne i8* %93, null, !dbg !3733
  br i1 %tobool97, label %land.lhs.true98, label %if.end105, !dbg !3735

land.lhs.true98:                                  ; preds = %land.lhs.true95
  %94 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !3736
  %flags99 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %94, i32 0, i32 1, !dbg !3737
  %95 = load i32, i32* %flags99, align 8, !dbg !3737
  %and100 = and i32 %95, 2, !dbg !3738
  %tobool101 = icmp ne i32 %and100, 0, !dbg !3738
  br i1 %tobool101, label %if.then102, label %if.end105, !dbg !3739

if.then102:                                       ; preds = %land.lhs.true98
  %96 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3741
  %97 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !3743
  %98 = load i8*, i8** %opt, align 8, !dbg !3744
  call void @add_opt(%struct.OptionParseContext* %96, %struct.OptionDef* %97, i8* %98, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i32 0, i32 0)), !dbg !3745
  %99 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !3746
  %name103 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %99, i32 0, i32 0, !dbg !3747
  %100 = load i8*, i8** %name103, align 8, !dbg !3747
  %101 = load %struct.OptionDef*, %struct.OptionDef** %po, align 8, !dbg !3748
  %help104 = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %101, i32 0, i32 3, !dbg !3749
  %102 = load i8*, i8** %help104, align 8, !dbg !3749
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 48, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.47, i32 0, i32 0), i8* %100, i8* %102), !dbg !3750
  br label %while.cond, !dbg !3751, !llvm.loop !3570

if.end105:                                        ; preds = %land.lhs.true98, %land.lhs.true95, %land.lhs.true92, %land.lhs.true87, %if.end82
  %103 = load i8*, i8** %opt, align 8, !dbg !3752
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.48, i32 0, i32 0), i8* %103), !dbg !3753
  store i32 -1414549496, i32* %retval, align 4, !dbg !3754
  br label %return, !dbg !3754

while.end:                                        ; preds = %while.cond
  %104 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3755
  %cur_group = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %104, i32 0, i32 3, !dbg !3757
  %nb_opts = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %cur_group, i32 0, i32 3, !dbg !3758
  %105 = load i32, i32* %nb_opts, align 8, !dbg !3758
  %tobool106 = icmp ne i32 %105, 0, !dbg !3755
  br i1 %tobool106, label %if.then113, label %lor.lhs.false107, !dbg !3759

lor.lhs.false107:                                 ; preds = %while.end
  %106 = load %struct.AVDictionary*, %struct.AVDictionary** @codec_opts, align 8, !dbg !3760
  %tobool108 = icmp ne %struct.AVDictionary* %106, null, !dbg !3760
  br i1 %tobool108, label %if.then113, label %lor.lhs.false109, !dbg !3762

lor.lhs.false109:                                 ; preds = %lor.lhs.false107
  %107 = load %struct.AVDictionary*, %struct.AVDictionary** @format_opts, align 8, !dbg !3763
  %tobool110 = icmp ne %struct.AVDictionary* %107, null, !dbg !3763
  br i1 %tobool110, label %if.then113, label %lor.lhs.false111, !dbg !3765

lor.lhs.false111:                                 ; preds = %lor.lhs.false109
  %108 = load %struct.AVDictionary*, %struct.AVDictionary** @resample_opts, align 8, !dbg !3766
  %tobool112 = icmp ne %struct.AVDictionary* %108, null, !dbg !3766
  br i1 %tobool112, label %if.then113, label %if.end114, !dbg !3768

if.then113:                                       ; preds = %lor.lhs.false111, %lor.lhs.false109, %lor.lhs.false107, %while.end
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 24, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.49, i32 0, i32 0)), !dbg !3769
  br label %if.end114, !dbg !3769

if.end114:                                        ; preds = %if.then113, %lor.lhs.false111
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 48, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.50, i32 0, i32 0)), !dbg !3770
  store i32 0, i32* %retval, align 4, !dbg !3771
  br label %return, !dbg !3771

return:                                           ; preds = %if.end114, %if.end105, %if.then77, %if.then53, %if.then29
  %109 = load i32, i32* %retval, align 4, !dbg !3772
  ret i32 %109, !dbg !3772
}

; Function Attrs: nounwind uwtable
define internal void @init_parse_context(%struct.OptionParseContext* %octx, %struct.OptionGroupDef* %groups, i32 %nb_groups) #0 !dbg !1419 {
entry:
  %octx.addr = alloca %struct.OptionParseContext*, align 8
  %groups.addr = alloca %struct.OptionGroupDef*, align 8
  %nb_groups.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.OptionParseContext* %octx, %struct.OptionParseContext** %octx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionParseContext** %octx.addr, metadata !3773, metadata !1512), !dbg !3774
  store %struct.OptionGroupDef* %groups, %struct.OptionGroupDef** %groups.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionGroupDef** %groups.addr, metadata !3775, metadata !1512), !dbg !3776
  store i32 %nb_groups, i32* %nb_groups.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_groups.addr, metadata !3777, metadata !1512), !dbg !3778
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3779, metadata !1512), !dbg !3780
  %0 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3781
  %1 = bitcast %struct.OptionParseContext* %0 to i8*, !dbg !3782
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 160, i32 8, i1 false), !dbg !3782
  %2 = load i32, i32* %nb_groups.addr, align 4, !dbg !3783
  %3 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3784
  %nb_groups1 = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %3, i32 0, i32 2, !dbg !3785
  store i32 %2, i32* %nb_groups1, align 8, !dbg !3786
  %4 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3787
  %nb_groups2 = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %4, i32 0, i32 2, !dbg !3788
  %5 = load i32, i32* %nb_groups2, align 8, !dbg !3788
  %conv = sext i32 %5 to i64, !dbg !3787
  %call = call i8* @av_mallocz_array(i64 %conv, i64 24), !dbg !3789
  %6 = bitcast i8* %call to %struct.OptionGroupList*, !dbg !3789
  %7 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3790
  %groups3 = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %7, i32 0, i32 1, !dbg !3791
  store %struct.OptionGroupList* %6, %struct.OptionGroupList** %groups3, align 8, !dbg !3792
  %8 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3793
  %groups4 = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %8, i32 0, i32 1, !dbg !3795
  %9 = load %struct.OptionGroupList*, %struct.OptionGroupList** %groups4, align 8, !dbg !3795
  %tobool = icmp ne %struct.OptionGroupList* %9, null, !dbg !3793
  br i1 %tobool, label %if.end, label %if.then, !dbg !3796

if.then:                                          ; preds = %entry
  call void @exit_program(i32 1) #13, !dbg !3797
  unreachable, !dbg !3797

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !3798
  br label %for.cond, !dbg !3800

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %i, align 4, !dbg !3801
  %11 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3804
  %nb_groups5 = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %11, i32 0, i32 2, !dbg !3805
  %12 = load i32, i32* %nb_groups5, align 8, !dbg !3805
  %cmp = icmp slt i32 %10, %12, !dbg !3806
  br i1 %cmp, label %for.body, label %for.end, !dbg !3807

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %i, align 4, !dbg !3808
  %idxprom = sext i32 %13 to i64, !dbg !3809
  %14 = load %struct.OptionGroupDef*, %struct.OptionGroupDef** %groups.addr, align 8, !dbg !3809
  %arrayidx = getelementptr inbounds %struct.OptionGroupDef, %struct.OptionGroupDef* %14, i64 %idxprom, !dbg !3809
  %15 = load i32, i32* %i, align 4, !dbg !3810
  %idxprom7 = sext i32 %15 to i64, !dbg !3811
  %16 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3811
  %groups8 = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %16, i32 0, i32 1, !dbg !3812
  %17 = load %struct.OptionGroupList*, %struct.OptionGroupList** %groups8, align 8, !dbg !3812
  %arrayidx9 = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %17, i64 %idxprom7, !dbg !3811
  %group_def = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %arrayidx9, i32 0, i32 0, !dbg !3813
  store %struct.OptionGroupDef* %arrayidx, %struct.OptionGroupDef** %group_def, align 8, !dbg !3814
  br label %for.inc, !dbg !3811

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !dbg !3815
  %inc = add nsw i32 %18, 1, !dbg !3815
  store i32 %inc, i32* %i, align 4, !dbg !3815
  br label %for.cond, !dbg !3817, !llvm.loop !3818

for.end:                                          ; preds = %for.cond
  %19 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3820
  %global_opts = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %19, i32 0, i32 0, !dbg !3821
  %group_def10 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %global_opts, i32 0, i32 0, !dbg !3822
  store %struct.OptionGroupDef* @init_parse_context.global_group, %struct.OptionGroupDef** %group_def10, align 8, !dbg !3823
  %20 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3824
  %global_opts11 = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %20, i32 0, i32 0, !dbg !3825
  %arg = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %global_opts11, i32 0, i32 1, !dbg !3826
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), i8** %arg, align 8, !dbg !3827
  call void @init_opts(), !dbg !3828
  ret void, !dbg !3829
}

; Function Attrs: nounwind uwtable
define internal void @finish_group(%struct.OptionParseContext* %octx, i32 %group_idx, i8* %arg) #0 !dbg !3830 {
entry:
  %octx.addr = alloca %struct.OptionParseContext*, align 8
  %group_idx.addr = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %l = alloca %struct.OptionGroupList*, align 8
  %g = alloca %struct.OptionGroup*, align 8
  store %struct.OptionParseContext* %octx, %struct.OptionParseContext** %octx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionParseContext** %octx.addr, metadata !3833, metadata !1512), !dbg !3834
  store i32 %group_idx, i32* %group_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %group_idx.addr, metadata !3835, metadata !1512), !dbg !3836
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !3837, metadata !1512), !dbg !3838
  call void @llvm.dbg.declare(metadata %struct.OptionGroupList** %l, metadata !3839, metadata !1512), !dbg !3840
  %0 = load i32, i32* %group_idx.addr, align 4, !dbg !3841
  %idxprom = sext i32 %0 to i64, !dbg !3842
  %1 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3842
  %groups = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %1, i32 0, i32 1, !dbg !3843
  %2 = load %struct.OptionGroupList*, %struct.OptionGroupList** %groups, align 8, !dbg !3843
  %arrayidx = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %2, i64 %idxprom, !dbg !3842
  store %struct.OptionGroupList* %arrayidx, %struct.OptionGroupList** %l, align 8, !dbg !3840
  call void @llvm.dbg.declare(metadata %struct.OptionGroup** %g, metadata !3844, metadata !1512), !dbg !3845
  %3 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3846
  %groups1 = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %3, i32 0, i32 1, !dbg !3847
  %4 = load %struct.OptionGroup*, %struct.OptionGroup** %groups1, align 8, !dbg !3847
  %5 = bitcast %struct.OptionGroup* %4 to i8*, !dbg !3846
  %6 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3848
  %nb_groups = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %6, i32 0, i32 2, !dbg !3849
  %7 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3850
  %nb_groups2 = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %7, i32 0, i32 2, !dbg !3851
  %8 = load i32, i32* %nb_groups2, align 8, !dbg !3851
  %add = add nsw i32 %8, 1, !dbg !3852
  %call = call i8* @grow_array(i8* %5, i32 72, i32* %nb_groups, i32 %add), !dbg !3853
  %9 = bitcast i8* %call to %struct.OptionGroup*, !dbg !3853
  %10 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3854
  %groups3 = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %10, i32 0, i32 1, !dbg !3855
  store %struct.OptionGroup* %9, %struct.OptionGroup** %groups3, align 8, !dbg !3856
  %11 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3857
  %nb_groups4 = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %11, i32 0, i32 2, !dbg !3858
  %12 = load i32, i32* %nb_groups4, align 8, !dbg !3858
  %sub = sub nsw i32 %12, 1, !dbg !3859
  %idxprom5 = sext i32 %sub to i64, !dbg !3860
  %13 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3860
  %groups6 = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %13, i32 0, i32 1, !dbg !3861
  %14 = load %struct.OptionGroup*, %struct.OptionGroup** %groups6, align 8, !dbg !3861
  %arrayidx7 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %14, i64 %idxprom5, !dbg !3860
  store %struct.OptionGroup* %arrayidx7, %struct.OptionGroup** %g, align 8, !dbg !3862
  %15 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !3863
  %16 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3864
  %cur_group = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %16, i32 0, i32 3, !dbg !3865
  %17 = bitcast %struct.OptionGroup* %15 to i8*, !dbg !3865
  %18 = bitcast %struct.OptionGroup* %cur_group to i8*, !dbg !3865
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 72, i32 8, i1 false), !dbg !3865
  %19 = load i8*, i8** %arg.addr, align 8, !dbg !3866
  %20 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !3867
  %arg8 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %20, i32 0, i32 1, !dbg !3868
  store i8* %19, i8** %arg8, align 8, !dbg !3869
  %21 = load %struct.OptionGroupList*, %struct.OptionGroupList** %l, align 8, !dbg !3870
  %group_def = getelementptr inbounds %struct.OptionGroupList, %struct.OptionGroupList* %21, i32 0, i32 0, !dbg !3871
  %22 = load %struct.OptionGroupDef*, %struct.OptionGroupDef** %group_def, align 8, !dbg !3871
  %23 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !3872
  %group_def9 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %23, i32 0, i32 0, !dbg !3873
  store %struct.OptionGroupDef* %22, %struct.OptionGroupDef** %group_def9, align 8, !dbg !3874
  %24 = load %struct.AVDictionary*, %struct.AVDictionary** @sws_dict, align 8, !dbg !3875
  %25 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !3876
  %sws_dict = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %25, i32 0, i32 7, !dbg !3877
  store %struct.AVDictionary* %24, %struct.AVDictionary** %sws_dict, align 8, !dbg !3878
  %26 = load %struct.AVDictionary*, %struct.AVDictionary** @swr_opts, align 8, !dbg !3879
  %27 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !3880
  %swr_opts = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %27, i32 0, i32 8, !dbg !3881
  store %struct.AVDictionary* %26, %struct.AVDictionary** %swr_opts, align 8, !dbg !3882
  %28 = load %struct.AVDictionary*, %struct.AVDictionary** @codec_opts, align 8, !dbg !3883
  %29 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !3884
  %codec_opts = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %29, i32 0, i32 4, !dbg !3885
  store %struct.AVDictionary* %28, %struct.AVDictionary** %codec_opts, align 8, !dbg !3886
  %30 = load %struct.AVDictionary*, %struct.AVDictionary** @format_opts, align 8, !dbg !3887
  %31 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !3888
  %format_opts = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %31, i32 0, i32 5, !dbg !3889
  store %struct.AVDictionary* %30, %struct.AVDictionary** %format_opts, align 8, !dbg !3890
  %32 = load %struct.AVDictionary*, %struct.AVDictionary** @resample_opts, align 8, !dbg !3891
  %33 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !3892
  %resample_opts = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %33, i32 0, i32 6, !dbg !3893
  store %struct.AVDictionary* %32, %struct.AVDictionary** %resample_opts, align 8, !dbg !3894
  store %struct.AVDictionary* null, %struct.AVDictionary** @codec_opts, align 8, !dbg !3895
  store %struct.AVDictionary* null, %struct.AVDictionary** @format_opts, align 8, !dbg !3896
  store %struct.AVDictionary* null, %struct.AVDictionary** @resample_opts, align 8, !dbg !3897
  store %struct.AVDictionary* null, %struct.AVDictionary** @sws_dict, align 8, !dbg !3898
  store %struct.AVDictionary* null, %struct.AVDictionary** @swr_opts, align 8, !dbg !3899
  call void @init_opts(), !dbg !3900
  %34 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3901
  %cur_group10 = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %34, i32 0, i32 3, !dbg !3902
  %35 = bitcast %struct.OptionGroup* %cur_group10 to i8*, !dbg !3903
  call void @llvm.memset.p0i8.i64(i8* %35, i8 0, i64 72, i32 8, i1 false), !dbg !3903
  ret void, !dbg !3904
}

; Function Attrs: nounwind uwtable
define internal i32 @match_group_separator(%struct.OptionGroupDef* %groups, i32 %nb_groups, i8* %opt) #0 !dbg !3905 {
entry:
  %retval = alloca i32, align 4
  %groups.addr = alloca %struct.OptionGroupDef*, align 8
  %nb_groups.addr = alloca i32, align 4
  %opt.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %p = alloca %struct.OptionGroupDef*, align 8
  store %struct.OptionGroupDef* %groups, %struct.OptionGroupDef** %groups.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionGroupDef** %groups.addr, metadata !3908, metadata !1512), !dbg !3909
  store i32 %nb_groups, i32* %nb_groups.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_groups.addr, metadata !3910, metadata !1512), !dbg !3911
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !3912, metadata !1512), !dbg !3913
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3914, metadata !1512), !dbg !3915
  store i32 0, i32* %i, align 4, !dbg !3916
  br label %for.cond, !dbg !3918

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3919
  %1 = load i32, i32* %nb_groups.addr, align 4, !dbg !3922
  %cmp = icmp slt i32 %0, %1, !dbg !3923
  br i1 %cmp, label %for.body, label %for.end, !dbg !3924

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.OptionGroupDef** %p, metadata !3925, metadata !1512), !dbg !3927
  %2 = load i32, i32* %i, align 4, !dbg !3928
  %idxprom = sext i32 %2 to i64, !dbg !3929
  %3 = load %struct.OptionGroupDef*, %struct.OptionGroupDef** %groups.addr, align 8, !dbg !3929
  %arrayidx = getelementptr inbounds %struct.OptionGroupDef, %struct.OptionGroupDef* %3, i64 %idxprom, !dbg !3929
  store %struct.OptionGroupDef* %arrayidx, %struct.OptionGroupDef** %p, align 8, !dbg !3927
  %4 = load %struct.OptionGroupDef*, %struct.OptionGroupDef** %p, align 8, !dbg !3930
  %sep = getelementptr inbounds %struct.OptionGroupDef, %struct.OptionGroupDef* %4, i32 0, i32 1, !dbg !3932
  %5 = load i8*, i8** %sep, align 8, !dbg !3932
  %tobool = icmp ne i8* %5, null, !dbg !3930
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3933

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.OptionGroupDef*, %struct.OptionGroupDef** %p, align 8, !dbg !3934
  %sep1 = getelementptr inbounds %struct.OptionGroupDef, %struct.OptionGroupDef* %6, i32 0, i32 1, !dbg !3936
  %7 = load i8*, i8** %sep1, align 8, !dbg !3936
  %8 = load i8*, i8** %opt.addr, align 8, !dbg !3937
  %call = call i32 @strcmp(i8* %7, i8* %8) #14, !dbg !3938
  %tobool2 = icmp ne i32 %call, 0, !dbg !3938
  br i1 %tobool2, label %if.end, label %if.then, !dbg !3939

if.then:                                          ; preds = %land.lhs.true
  %9 = load i32, i32* %i, align 4, !dbg !3940
  store i32 %9, i32* %retval, align 4, !dbg !3941
  br label %return, !dbg !3941

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !3942

for.inc:                                          ; preds = %if.end
  %10 = load i32, i32* %i, align 4, !dbg !3943
  %inc = add nsw i32 %10, 1, !dbg !3943
  store i32 %inc, i32* %i, align 4, !dbg !3943
  br label %for.cond, !dbg !3945, !llvm.loop !3946

for.end:                                          ; preds = %for.cond
  store i32 -1, i32* %retval, align 4, !dbg !3948
  br label %return, !dbg !3948

return:                                           ; preds = %for.end, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !3949
  ret i32 %11, !dbg !3949
}

; Function Attrs: nounwind uwtable
define internal void @add_opt(%struct.OptionParseContext* %octx, %struct.OptionDef* %opt, i8* %key, i8* %val) #0 !dbg !3950 {
entry:
  %octx.addr = alloca %struct.OptionParseContext*, align 8
  %opt.addr = alloca %struct.OptionDef*, align 8
  %key.addr = alloca i8*, align 8
  %val.addr = alloca i8*, align 8
  %global = alloca i32, align 4
  %g = alloca %struct.OptionGroup*, align 8
  store %struct.OptionParseContext* %octx, %struct.OptionParseContext** %octx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionParseContext** %octx.addr, metadata !3953, metadata !1512), !dbg !3954
  store %struct.OptionDef* %opt, %struct.OptionDef** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %opt.addr, metadata !3955, metadata !1512), !dbg !3956
  store i8* %key, i8** %key.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key.addr, metadata !3957, metadata !1512), !dbg !3958
  store i8* %val, i8** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %val.addr, metadata !3959, metadata !1512), !dbg !3960
  call void @llvm.dbg.declare(metadata i32* %global, metadata !3961, metadata !1512), !dbg !3962
  %0 = load %struct.OptionDef*, %struct.OptionDef** %opt.addr, align 8, !dbg !3963
  %flags = getelementptr inbounds %struct.OptionDef, %struct.OptionDef* %0, i32 0, i32 1, !dbg !3964
  %1 = load i32, i32* %flags, align 8, !dbg !3964
  %and = and i32 %1, 57344, !dbg !3965
  %tobool = icmp ne i32 %and, 0, !dbg !3966
  %lnot = xor i1 %tobool, true, !dbg !3966
  %lnot.ext = zext i1 %lnot to i32, !dbg !3966
  store i32 %lnot.ext, i32* %global, align 4, !dbg !3962
  call void @llvm.dbg.declare(metadata %struct.OptionGroup** %g, metadata !3967, metadata !1512), !dbg !3968
  %2 = load i32, i32* %global, align 4, !dbg !3969
  %tobool1 = icmp ne i32 %2, 0, !dbg !3969
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !3969

cond.true:                                        ; preds = %entry
  %3 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3970
  %global_opts = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %3, i32 0, i32 0, !dbg !3972
  br label %cond.end, !dbg !3973

cond.false:                                       ; preds = %entry
  %4 = load %struct.OptionParseContext*, %struct.OptionParseContext** %octx.addr, align 8, !dbg !3974
  %cur_group = getelementptr inbounds %struct.OptionParseContext, %struct.OptionParseContext* %4, i32 0, i32 3, !dbg !3976
  br label %cond.end, !dbg !3977

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.OptionGroup* [ %global_opts, %cond.true ], [ %cur_group, %cond.false ], !dbg !3978
  store %struct.OptionGroup* %cond, %struct.OptionGroup** %g, align 8, !dbg !3980
  %5 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !3981
  %opts = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %5, i32 0, i32 2, !dbg !3982
  %6 = load %struct.Option*, %struct.Option** %opts, align 8, !dbg !3982
  %7 = bitcast %struct.Option* %6 to i8*, !dbg !3981
  %8 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !3983
  %nb_opts = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %8, i32 0, i32 3, !dbg !3984
  %9 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !3985
  %nb_opts2 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %9, i32 0, i32 3, !dbg !3986
  %10 = load i32, i32* %nb_opts2, align 8, !dbg !3986
  %add = add nsw i32 %10, 1, !dbg !3987
  %call = call i8* @grow_array(i8* %7, i32 24, i32* %nb_opts, i32 %add), !dbg !3988
  %11 = bitcast i8* %call to %struct.Option*, !dbg !3988
  %12 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !3989
  %opts3 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %12, i32 0, i32 2, !dbg !3990
  store %struct.Option* %11, %struct.Option** %opts3, align 8, !dbg !3991
  %13 = load %struct.OptionDef*, %struct.OptionDef** %opt.addr, align 8, !dbg !3992
  %14 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !3993
  %nb_opts4 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %14, i32 0, i32 3, !dbg !3994
  %15 = load i32, i32* %nb_opts4, align 8, !dbg !3994
  %sub = sub nsw i32 %15, 1, !dbg !3995
  %idxprom = sext i32 %sub to i64, !dbg !3996
  %16 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !3996
  %opts5 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %16, i32 0, i32 2, !dbg !3997
  %17 = load %struct.Option*, %struct.Option** %opts5, align 8, !dbg !3997
  %arrayidx = getelementptr inbounds %struct.Option, %struct.Option* %17, i64 %idxprom, !dbg !3996
  %opt6 = getelementptr inbounds %struct.Option, %struct.Option* %arrayidx, i32 0, i32 0, !dbg !3998
  store %struct.OptionDef* %13, %struct.OptionDef** %opt6, align 8, !dbg !3999
  %18 = load i8*, i8** %key.addr, align 8, !dbg !4000
  %19 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !4001
  %nb_opts7 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %19, i32 0, i32 3, !dbg !4002
  %20 = load i32, i32* %nb_opts7, align 8, !dbg !4002
  %sub8 = sub nsw i32 %20, 1, !dbg !4003
  %idxprom9 = sext i32 %sub8 to i64, !dbg !4004
  %21 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !4004
  %opts10 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %21, i32 0, i32 2, !dbg !4005
  %22 = load %struct.Option*, %struct.Option** %opts10, align 8, !dbg !4005
  %arrayidx11 = getelementptr inbounds %struct.Option, %struct.Option* %22, i64 %idxprom9, !dbg !4004
  %key12 = getelementptr inbounds %struct.Option, %struct.Option* %arrayidx11, i32 0, i32 1, !dbg !4006
  store i8* %18, i8** %key12, align 8, !dbg !4007
  %23 = load i8*, i8** %val.addr, align 8, !dbg !4008
  %24 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !4009
  %nb_opts13 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %24, i32 0, i32 3, !dbg !4010
  %25 = load i32, i32* %nb_opts13, align 8, !dbg !4010
  %sub14 = sub nsw i32 %25, 1, !dbg !4011
  %idxprom15 = sext i32 %sub14 to i64, !dbg !4012
  %26 = load %struct.OptionGroup*, %struct.OptionGroup** %g, align 8, !dbg !4012
  %opts16 = getelementptr inbounds %struct.OptionGroup, %struct.OptionGroup* %26, i32 0, i32 2, !dbg !4013
  %27 = load %struct.Option*, %struct.Option** %opts16, align 8, !dbg !4013
  %arrayidx17 = getelementptr inbounds %struct.Option, %struct.Option* %27, i64 %idxprom15, !dbg !4012
  %val18 = getelementptr inbounds %struct.Option, %struct.Option* %arrayidx17, i32 0, i32 2, !dbg !4014
  store i8* %23, i8** %val18, align 8, !dbg !4015
  ret void, !dbg !4016
}

; Function Attrs: nounwind uwtable
define i32 @opt_cpuflags(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !4017 {
entry:
  %retval = alloca i32, align 4
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %ret = alloca i32, align 4
  %flags = alloca i32, align 4
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !4018, metadata !1512), !dbg !4019
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !4020, metadata !1512), !dbg !4021
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !4022, metadata !1512), !dbg !4023
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !4024, metadata !1512), !dbg !4025
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !4026, metadata !1512), !dbg !4027
  %call = call i32 @av_get_cpu_flags(), !dbg !4028
  store i32 %call, i32* %flags, align 4, !dbg !4027
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !4029
  %call1 = call i32 @av_parse_cpu_caps(i32* %flags, i8* %0), !dbg !4031
  store i32 %call1, i32* %ret, align 4, !dbg !4032
  %cmp = icmp slt i32 %call1, 0, !dbg !4033
  br i1 %cmp, label %if.then, label %if.end, !dbg !4034

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %ret, align 4, !dbg !4035
  store i32 %1, i32* %retval, align 4, !dbg !4036
  br label %return, !dbg !4036

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %flags, align 4, !dbg !4037
  call void @av_force_cpu_flags(i32 %2), !dbg !4038
  store i32 0, i32* %retval, align 4, !dbg !4039
  br label %return, !dbg !4039

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !4040
  ret i32 %3, !dbg !4040
}

declare i32 @av_get_cpu_flags() #1

declare i32 @av_parse_cpu_caps(i32*, i8*) #1

declare void @av_force_cpu_flags(i32) #1

declare i32 @av_log_get_flags() #1

declare i32 @av_log_get_level() #1

; Function Attrs: noreturn nounwind
declare void @abort() #4

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #6

; Function Attrs: nounwind
declare i64 @strtol(i8*, i8**, i32) #7

declare void @av_log_set_flags(i32) #1

; Function Attrs: nounwind uwtable
define i32 @opt_report(i8* %opt) #0 !dbg !4041 {
entry:
  %opt.addr = alloca i8*, align 8
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !4042, metadata !1512), !dbg !4043
  %call = call i32 @init_report(i8* null), !dbg !4044
  ret i32 %call, !dbg !4045
}

; Function Attrs: nounwind uwtable
define i32 @opt_max_alloc(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !4046 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %tail = alloca i8*, align 8
  %max = alloca i64, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !4047, metadata !1512), !dbg !4048
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !4049, metadata !1512), !dbg !4050
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !4051, metadata !1512), !dbg !4052
  call void @llvm.dbg.declare(metadata i8** %tail, metadata !4053, metadata !1512), !dbg !4054
  call void @llvm.dbg.declare(metadata i64* %max, metadata !4055, metadata !1512), !dbg !4056
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !4057
  %call = call i64 @strtol(i8* %0, i8** %tail, i32 10) #11, !dbg !4058
  store i64 %call, i64* %max, align 8, !dbg !4059
  %1 = load i8*, i8** %tail, align 8, !dbg !4060
  %2 = load i8, i8* %1, align 1, !dbg !4062
  %tobool = icmp ne i8 %2, 0, !dbg !4062
  br i1 %tobool, label %if.then, label %if.end, !dbg !4063

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %arg.addr, align 8, !dbg !4064
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 8, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.66, i32 0, i32 0), i8* %3), !dbg !4066
  call void @exit_program(i32 1) #13, !dbg !4067
  unreachable, !dbg !4067

if.end:                                           ; preds = %entry
  %4 = load i64, i64* %max, align 8, !dbg !4068
  call void @av_max_alloc(i64 %4), !dbg !4069
  ret i32 0, !dbg !4070
}

declare void @av_max_alloc(i64) #1

; Function Attrs: nounwind uwtable
define i32 @opt_timelimit(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !4071 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %lim = alloca i32, align 4
  %rl = alloca %struct.rlimit, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !4072, metadata !1512), !dbg !4073
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !4074, metadata !1512), !dbg !4075
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !4076, metadata !1512), !dbg !4077
  call void @llvm.dbg.declare(metadata i32* %lim, metadata !4078, metadata !1512), !dbg !4079
  %0 = load i8*, i8** %opt.addr, align 8, !dbg !4080
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !4081
  %call = call double @parse_number_or_die(i8* %0, i8* %1, i32 1024, double 0.000000e+00, double 0x41DFFFFFFFC00000), !dbg !4082
  %conv = fptosi double %call to i32, !dbg !4082
  store i32 %conv, i32* %lim, align 4, !dbg !4079
  call void @llvm.dbg.declare(metadata %struct.rlimit* %rl, metadata !4083, metadata !1512), !dbg !4090
  %rlim_cur = getelementptr inbounds %struct.rlimit, %struct.rlimit* %rl, i32 0, i32 0, !dbg !4091
  %2 = load i32, i32* %lim, align 4, !dbg !4092
  %conv1 = sext i32 %2 to i64, !dbg !4092
  store i64 %conv1, i64* %rlim_cur, align 8, !dbg !4091
  %rlim_max = getelementptr inbounds %struct.rlimit, %struct.rlimit* %rl, i32 0, i32 1, !dbg !4091
  %3 = load i32, i32* %lim, align 4, !dbg !4093
  %add = add nsw i32 %3, 1, !dbg !4094
  %conv2 = sext i32 %add to i64, !dbg !4093
  store i64 %conv2, i64* %rlim_max, align 8, !dbg !4091
  %call3 = call i32 @setrlimit64(i32 0, %struct.rlimit* %rl) #11, !dbg !4095
  %tobool = icmp ne i32 %call3, 0, !dbg !4095
  br i1 %tobool, label %if.then, label %if.end, !dbg !4097

if.then:                                          ; preds = %entry
  call void @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.67, i32 0, i32 0)), !dbg !4098
  br label %if.end, !dbg !4098

if.end:                                           ; preds = %if.then, %entry
  ret i32 0, !dbg !4099
}

; Function Attrs: nounwind
declare i32 @setrlimit64(i32, %struct.rlimit*) #7

declare void @perror(i8*) #1

; Function Attrs: nounwind uwtable
define void @print_error(i8* %filename, i32 %err) #0 !dbg !4100 {
entry:
  %filename.addr = alloca i8*, align 8
  %err.addr = alloca i32, align 4
  %errbuf = alloca [128 x i8], align 16
  %errbuf_ptr = alloca i8*, align 8
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !4103, metadata !1512), !dbg !4104
  store i32 %err, i32* %err.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %err.addr, metadata !4105, metadata !1512), !dbg !4106
  call void @llvm.dbg.declare(metadata [128 x i8]* %errbuf, metadata !4107, metadata !1512), !dbg !4108
  call void @llvm.dbg.declare(metadata i8** %errbuf_ptr, metadata !4109, metadata !1512), !dbg !4110
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %errbuf, i32 0, i32 0, !dbg !4111
  store i8* %arraydecay, i8** %errbuf_ptr, align 8, !dbg !4110
  %0 = load i32, i32* %err.addr, align 4, !dbg !4112
  %arraydecay1 = getelementptr inbounds [128 x i8], [128 x i8]* %errbuf, i32 0, i32 0, !dbg !4114
  %call = call i32 @av_strerror(i32 %0, i8* %arraydecay1, i64 128), !dbg !4115
  %cmp = icmp slt i32 %call, 0, !dbg !4116
  br i1 %cmp, label %if.then, label %if.end, !dbg !4117

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %err.addr, align 4, !dbg !4118
  %sub = sub nsw i32 0, %1, !dbg !4119
  %call2 = call i8* @strerror(i32 %sub) #11, !dbg !4120
  store i8* %call2, i8** %errbuf_ptr, align 8, !dbg !4121
  br label %if.end, !dbg !4122

if.end:                                           ; preds = %if.then, %entry
  %2 = load i8*, i8** %filename.addr, align 8, !dbg !4123
  %3 = load i8*, i8** %errbuf_ptr, align 8, !dbg !4124
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68, i32 0, i32 0), i8* %2, i8* %3), !dbg !4125
  ret void, !dbg !4126
}

declare i32 @av_strerror(i32, i8*, i64) #1

; Function Attrs: nounwind
declare i8* @strerror(i32) #7

; Function Attrs: nounwind uwtable
define void @show_banner(i32 %argc, i8** %argv, %struct.OptionDef* %options) #0 !dbg !4127 {
entry:
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %options.addr = alloca %struct.OptionDef*, align 8
  %idx = alloca i32, align 4
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !4128, metadata !1512), !dbg !4129
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !4130, metadata !1512), !dbg !4131
  store %struct.OptionDef* %options, %struct.OptionDef** %options.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.OptionDef** %options.addr, metadata !4132, metadata !1512), !dbg !4133
  call void @llvm.dbg.declare(metadata i32* %idx, metadata !4134, metadata !1512), !dbg !4135
  %0 = load i32, i32* %argc.addr, align 4, !dbg !4136
  %1 = load i8**, i8*** %argv.addr, align 8, !dbg !4137
  %2 = load %struct.OptionDef*, %struct.OptionDef** %options.addr, align 8, !dbg !4138
  %call = call i32 @locate_option(i32 %0, i8** %1, %struct.OptionDef* %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.69, i32 0, i32 0)), !dbg !4139
  store i32 %call, i32* %idx, align 4, !dbg !4135
  %3 = load i32, i32* @hide_banner, align 4, !dbg !4140
  %tobool = icmp ne i32 %3, 0, !dbg !4140
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !4142

lor.lhs.false:                                    ; preds = %entry
  %4 = load i32, i32* %idx, align 4, !dbg !4143
  %tobool1 = icmp ne i32 %4, 0, !dbg !4143
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4145

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %return, !dbg !4146

if.end:                                           ; preds = %lor.lhs.false
  call void @print_program_info(i32 9, i32 32), !dbg !4147
  call void @print_all_libs_info(i32 5, i32 32), !dbg !4148
  call void @print_all_libs_info(i32 3, i32 32), !dbg !4149
  br label %return, !dbg !4150

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !4151
}

; Function Attrs: nounwind uwtable
define internal void @print_program_info(i32 %flags, i32 %level) #0 !dbg !4153 {
entry:
  %flags.addr = alloca i32, align 4
  %level.addr = alloca i32, align 4
  %indent = alloca i8*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4156, metadata !1512), !dbg !4157
  store i32 %level, i32* %level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %level.addr, metadata !4158, metadata !1512), !dbg !4159
  call void @llvm.dbg.declare(metadata i8** %indent, metadata !4160, metadata !1512), !dbg !4161
  %0 = load i32, i32* %flags.addr, align 4, !dbg !4162
  %and = and i32 %0, 1, !dbg !4163
  %tobool = icmp ne i32 %and, 0, !dbg !4162
  %cond = select i1 %tobool, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), !dbg !4162
  store i8* %cond, i8** %indent, align 8, !dbg !4161
  %1 = load i32, i32* %level.addr, align 4, !dbg !4164
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @program_name, i32 0, i32 0)), !dbg !4165
  %2 = load i32, i32* %flags.addr, align 4, !dbg !4166
  %and1 = and i32 %2, 8, !dbg !4168
  %tobool2 = icmp ne i32 %and1, 0, !dbg !4168
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4169

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %level.addr, align 4, !dbg !4170
  %4 = load i32, i32* @program_birth_year, align 4, !dbg !4171
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %3, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.138, i32 0, i32 0), i32 %4, i32 2019), !dbg !4172
  br label %if.end, !dbg !4172

if.end:                                           ; preds = %if.then, %entry
  %5 = load i32, i32* %level.addr, align 4, !dbg !4173
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !4174
  %6 = load i32, i32* %level.addr, align 4, !dbg !4175
  %7 = load i8*, i8** %indent, align 8, !dbg !4176
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %6, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.139, i32 0, i32 0), i8* %7, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.140, i32 0, i32 0)), !dbg !4177
  %8 = load i32, i32* %level.addr, align 4, !dbg !4178
  %9 = load i8*, i8** %indent, align 8, !dbg !4179
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %8, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.141, i32 0, i32 0), i8* %9), !dbg !4180
  ret void, !dbg !4181
}

; Function Attrs: nounwind uwtable
define internal void @print_all_libs_info(i32 %flags, i32 %level) #0 !dbg !4182 {
entry:
  %flags.addr = alloca i32, align 4
  %level.addr = alloca i32, align 4
  %indent = alloca i8*, align 8
  %version = alloca i32, align 4
  %cfg = alloca i8*, align 8
  %indent18 = alloca i8*, align 8
  %version25 = alloca i32, align 4
  %cfg35 = alloca i8*, align 8
  %indent45 = alloca i8*, align 8
  %version52 = alloca i32, align 4
  %cfg62 = alloca i8*, align 8
  %indent72 = alloca i8*, align 8
  %version79 = alloca i32, align 4
  %cfg89 = alloca i8*, align 8
  %indent99 = alloca i8*, align 8
  %version106 = alloca i32, align 4
  %cfg116 = alloca i8*, align 8
  %indent126 = alloca i8*, align 8
  %version133 = alloca i32, align 4
  %cfg143 = alloca i8*, align 8
  %indent153 = alloca i8*, align 8
  %version160 = alloca i32, align 4
  %cfg170 = alloca i8*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4183, metadata !1512), !dbg !4184
  store i32 %level, i32* %level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %level.addr, metadata !4185, metadata !1512), !dbg !4186
  call void @llvm.dbg.declare(metadata i8** %indent, metadata !4187, metadata !1512), !dbg !4190
  %0 = load i32, i32* %flags.addr, align 4, !dbg !4191
  %and = and i32 %0, 1, !dbg !4192
  %tobool = icmp ne i32 %and, 0, !dbg !4191
  %cond = select i1 %tobool, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), !dbg !4191
  store i8* %cond, i8** %indent, align 8, !dbg !4190
  %1 = load i32, i32* %flags.addr, align 4, !dbg !4193
  %and1 = and i32 %1, 2, !dbg !4195
  %tobool2 = icmp ne i32 %and1, 0, !dbg !4195
  br i1 %tobool2, label %if.then, label %if.end, !dbg !4196

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %version, metadata !4197, metadata !1512), !dbg !4199
  %call = call i32 @avutil_version(), !dbg !4200
  store i32 %call, i32* %version, align 4, !dbg !4202
  %2 = load i32, i32* %level.addr, align 4, !dbg !4203
  %3 = load i8*, i8** %indent, align 8, !dbg !4204
  %4 = load i32, i32* %version, align 4, !dbg !4205
  %shr = lshr i32 %4, 16, !dbg !4200
  %5 = load i32, i32* %version, align 4, !dbg !4206
  %and3 = and i32 %5, 65280, !dbg !4207
  %shr4 = lshr i32 %and3, 8, !dbg !4208
  %6 = load i32, i32* %version, align 4, !dbg !4209
  %and5 = and i32 %6, 255, !dbg !4210
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %2, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.142, i32 0, i32 0), i8* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.143, i32 0, i32 0), i32 56, i32 26, i32 100, i32 %shr, i32 %shr4, i32 %and5), !dbg !4211
  br label %if.end, !dbg !4213

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %flags.addr, align 4, !dbg !4214
  %and6 = and i32 %7, 4, !dbg !4217
  %tobool7 = icmp ne i32 %and6, 0, !dbg !4217
  br i1 %tobool7, label %if.then8, label %if.end17, !dbg !4214

if.then8:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8** %cfg, metadata !4218, metadata !1512), !dbg !4220
  %call9 = call i8* @avutil_configuration(), !dbg !4221
  store i8* %call9, i8** %cfg, align 8, !dbg !4223
  %8 = load i8*, i8** %cfg, align 8, !dbg !4224
  %call10 = call i32 @strcmp(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.144, i32 0, i32 0), i8* %8) #14, !dbg !4225
  %tobool11 = icmp ne i32 %call10, 0, !dbg !4227
  br i1 %tobool11, label %if.then12, label %if.end16, !dbg !4227

if.then12:                                        ; preds = %if.then8
  %9 = load i32, i32* @warned_cfg, align 4, !dbg !4228
  %tobool13 = icmp ne i32 %9, 0, !dbg !4228
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !4233

if.then14:                                        ; preds = %if.then12
  %10 = load i32, i32* %level.addr, align 4, !dbg !4234
  %11 = load i8*, i8** %indent, align 8, !dbg !4237
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %10, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.145, i32 0, i32 0), i8* %11), !dbg !4238
  store i32 1, i32* @warned_cfg, align 4, !dbg !4239
  br label %if.end15, !dbg !4240

if.end15:                                         ; preds = %if.then14, %if.then12
  %12 = load i32, i32* %level.addr, align 4, !dbg !4241
  %13 = load i8*, i8** %indent, align 8, !dbg !4243
  %14 = load i8*, i8** %cfg, align 8, !dbg !4244
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %12, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.146, i32 0, i32 0), i8* %13, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.143, i32 0, i32 0), i8* %14), !dbg !4245
  br label %if.end16, !dbg !4246

if.end16:                                         ; preds = %if.end15, %if.then8
  br label %if.end17, !dbg !4247

if.end17:                                         ; preds = %if.end16, %if.end
  call void @llvm.dbg.declare(metadata i8** %indent18, metadata !4249, metadata !1512), !dbg !4252
  %15 = load i32, i32* %flags.addr, align 4, !dbg !4253
  %and19 = and i32 %15, 1, !dbg !4254
  %tobool20 = icmp ne i32 %and19, 0, !dbg !4253
  %cond21 = select i1 %tobool20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), !dbg !4253
  store i8* %cond21, i8** %indent18, align 8, !dbg !4252
  %16 = load i32, i32* %flags.addr, align 4, !dbg !4255
  %and22 = and i32 %16, 2, !dbg !4257
  %tobool23 = icmp ne i32 %and22, 0, !dbg !4257
  br i1 %tobool23, label %if.then24, label %if.end31, !dbg !4258

if.then24:                                        ; preds = %if.end17
  call void @llvm.dbg.declare(metadata i32* %version25, metadata !4259, metadata !1512), !dbg !4261
  %call26 = call i32 @avcodec_version(), !dbg !4262
  store i32 %call26, i32* %version25, align 4, !dbg !4264
  %17 = load i32, i32* %level.addr, align 4, !dbg !4265
  %18 = load i8*, i8** %indent18, align 8, !dbg !4266
  %19 = load i32, i32* %version25, align 4, !dbg !4267
  %shr27 = lshr i32 %19, 16, !dbg !4268
  %20 = load i32, i32* %version25, align 4, !dbg !4269
  %and28 = and i32 %20, 65280, !dbg !4270
  %shr29 = lshr i32 %and28, 8, !dbg !4271
  %21 = load i32, i32* %version25, align 4, !dbg !4272
  %and30 = and i32 %21, 255, !dbg !4273
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %17, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.142, i32 0, i32 0), i8* %18, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.147, i32 0, i32 0), i32 58, i32 47, i32 102, i32 %shr27, i32 %shr29, i32 %and30), !dbg !4274
  br label %if.end31, !dbg !4276

if.end31:                                         ; preds = %if.then24, %if.end17
  %22 = load i32, i32* %flags.addr, align 4, !dbg !4277
  %and32 = and i32 %22, 4, !dbg !4280
  %tobool33 = icmp ne i32 %and32, 0, !dbg !4280
  br i1 %tobool33, label %if.then34, label %if.end44, !dbg !4277

if.then34:                                        ; preds = %if.end31
  call void @llvm.dbg.declare(metadata i8** %cfg35, metadata !4281, metadata !1512), !dbg !4283
  %call36 = call i8* @avcodec_configuration(), !dbg !4284
  store i8* %call36, i8** %cfg35, align 8, !dbg !4286
  %23 = load i8*, i8** %cfg35, align 8, !dbg !4287
  %call37 = call i32 @strcmp(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.144, i32 0, i32 0), i8* %23) #14, !dbg !4288
  %tobool38 = icmp ne i32 %call37, 0, !dbg !4290
  br i1 %tobool38, label %if.then39, label %if.end43, !dbg !4290

if.then39:                                        ; preds = %if.then34
  %24 = load i32, i32* @warned_cfg, align 4, !dbg !4291
  %tobool40 = icmp ne i32 %24, 0, !dbg !4291
  br i1 %tobool40, label %if.end42, label %if.then41, !dbg !4296

if.then41:                                        ; preds = %if.then39
  %25 = load i32, i32* %level.addr, align 4, !dbg !4297
  %26 = load i8*, i8** %indent18, align 8, !dbg !4300
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %25, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.145, i32 0, i32 0), i8* %26), !dbg !4301
  store i32 1, i32* @warned_cfg, align 4, !dbg !4302
  br label %if.end42, !dbg !4303

if.end42:                                         ; preds = %if.then41, %if.then39
  %27 = load i32, i32* %level.addr, align 4, !dbg !4304
  %28 = load i8*, i8** %indent18, align 8, !dbg !4306
  %29 = load i8*, i8** %cfg35, align 8, !dbg !4307
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %27, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.146, i32 0, i32 0), i8* %28, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.147, i32 0, i32 0), i8* %29), !dbg !4308
  br label %if.end43, !dbg !4309

if.end43:                                         ; preds = %if.end42, %if.then34
  br label %if.end44, !dbg !4310

if.end44:                                         ; preds = %if.end43, %if.end31
  call void @llvm.dbg.declare(metadata i8** %indent45, metadata !4312, metadata !1512), !dbg !4315
  %30 = load i32, i32* %flags.addr, align 4, !dbg !4316
  %and46 = and i32 %30, 1, !dbg !4317
  %tobool47 = icmp ne i32 %and46, 0, !dbg !4316
  %cond48 = select i1 %tobool47, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), !dbg !4316
  store i8* %cond48, i8** %indent45, align 8, !dbg !4315
  %31 = load i32, i32* %flags.addr, align 4, !dbg !4318
  %and49 = and i32 %31, 2, !dbg !4320
  %tobool50 = icmp ne i32 %and49, 0, !dbg !4320
  br i1 %tobool50, label %if.then51, label %if.end58, !dbg !4321

if.then51:                                        ; preds = %if.end44
  call void @llvm.dbg.declare(metadata i32* %version52, metadata !4322, metadata !1512), !dbg !4324
  %call53 = call i32 @avformat_version(), !dbg !4325
  store i32 %call53, i32* %version52, align 4, !dbg !4327
  %32 = load i32, i32* %level.addr, align 4, !dbg !4328
  %33 = load i8*, i8** %indent45, align 8, !dbg !4329
  %34 = load i32, i32* %version52, align 4, !dbg !4330
  %shr54 = lshr i32 %34, 16, !dbg !4331
  %35 = load i32, i32* %version52, align 4, !dbg !4332
  %and55 = and i32 %35, 65280, !dbg !4333
  %shr56 = lshr i32 %and55, 8, !dbg !4334
  %36 = load i32, i32* %version52, align 4, !dbg !4335
  %and57 = and i32 %36, 255, !dbg !4336
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %32, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.142, i32 0, i32 0), i8* %33, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.148, i32 0, i32 0), i32 58, i32 26, i32 101, i32 %shr54, i32 %shr56, i32 %and57), !dbg !4337
  br label %if.end58, !dbg !4339

if.end58:                                         ; preds = %if.then51, %if.end44
  %37 = load i32, i32* %flags.addr, align 4, !dbg !4340
  %and59 = and i32 %37, 4, !dbg !4343
  %tobool60 = icmp ne i32 %and59, 0, !dbg !4343
  br i1 %tobool60, label %if.then61, label %if.end71, !dbg !4340

if.then61:                                        ; preds = %if.end58
  call void @llvm.dbg.declare(metadata i8** %cfg62, metadata !4344, metadata !1512), !dbg !4346
  %call63 = call i8* @avformat_configuration(), !dbg !4347
  store i8* %call63, i8** %cfg62, align 8, !dbg !4349
  %38 = load i8*, i8** %cfg62, align 8, !dbg !4350
  %call64 = call i32 @strcmp(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.144, i32 0, i32 0), i8* %38) #14, !dbg !4351
  %tobool65 = icmp ne i32 %call64, 0, !dbg !4353
  br i1 %tobool65, label %if.then66, label %if.end70, !dbg !4353

if.then66:                                        ; preds = %if.then61
  %39 = load i32, i32* @warned_cfg, align 4, !dbg !4354
  %tobool67 = icmp ne i32 %39, 0, !dbg !4354
  br i1 %tobool67, label %if.end69, label %if.then68, !dbg !4359

if.then68:                                        ; preds = %if.then66
  %40 = load i32, i32* %level.addr, align 4, !dbg !4360
  %41 = load i8*, i8** %indent45, align 8, !dbg !4363
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %40, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.145, i32 0, i32 0), i8* %41), !dbg !4364
  store i32 1, i32* @warned_cfg, align 4, !dbg !4365
  br label %if.end69, !dbg !4366

if.end69:                                         ; preds = %if.then68, %if.then66
  %42 = load i32, i32* %level.addr, align 4, !dbg !4367
  %43 = load i8*, i8** %indent45, align 8, !dbg !4369
  %44 = load i8*, i8** %cfg62, align 8, !dbg !4370
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %42, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.146, i32 0, i32 0), i8* %43, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.148, i32 0, i32 0), i8* %44), !dbg !4371
  br label %if.end70, !dbg !4372

if.end70:                                         ; preds = %if.end69, %if.then61
  br label %if.end71, !dbg !4373

if.end71:                                         ; preds = %if.end70, %if.end58
  call void @llvm.dbg.declare(metadata i8** %indent72, metadata !4375, metadata !1512), !dbg !4378
  %45 = load i32, i32* %flags.addr, align 4, !dbg !4379
  %and73 = and i32 %45, 1, !dbg !4380
  %tobool74 = icmp ne i32 %and73, 0, !dbg !4379
  %cond75 = select i1 %tobool74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), !dbg !4379
  store i8* %cond75, i8** %indent72, align 8, !dbg !4378
  %46 = load i32, i32* %flags.addr, align 4, !dbg !4381
  %and76 = and i32 %46, 2, !dbg !4383
  %tobool77 = icmp ne i32 %and76, 0, !dbg !4383
  br i1 %tobool77, label %if.then78, label %if.end85, !dbg !4384

if.then78:                                        ; preds = %if.end71
  call void @llvm.dbg.declare(metadata i32* %version79, metadata !4385, metadata !1512), !dbg !4387
  %call80 = call i32 @avdevice_version(), !dbg !4388
  store i32 %call80, i32* %version79, align 4, !dbg !4390
  %47 = load i32, i32* %level.addr, align 4, !dbg !4391
  %48 = load i8*, i8** %indent72, align 8, !dbg !4392
  %49 = load i32, i32* %version79, align 4, !dbg !4393
  %shr81 = lshr i32 %49, 16, !dbg !4394
  %50 = load i32, i32* %version79, align 4, !dbg !4395
  %and82 = and i32 %50, 65280, !dbg !4396
  %shr83 = lshr i32 %and82, 8, !dbg !4397
  %51 = load i32, i32* %version79, align 4, !dbg !4398
  %and84 = and i32 %51, 255, !dbg !4399
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %47, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.142, i32 0, i32 0), i8* %48, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.149, i32 0, i32 0), i32 58, i32 6, i32 101, i32 %shr81, i32 %shr83, i32 %and84), !dbg !4400
  br label %if.end85, !dbg !4402

if.end85:                                         ; preds = %if.then78, %if.end71
  %52 = load i32, i32* %flags.addr, align 4, !dbg !4403
  %and86 = and i32 %52, 4, !dbg !4406
  %tobool87 = icmp ne i32 %and86, 0, !dbg !4406
  br i1 %tobool87, label %if.then88, label %if.end98, !dbg !4403

if.then88:                                        ; preds = %if.end85
  call void @llvm.dbg.declare(metadata i8** %cfg89, metadata !4407, metadata !1512), !dbg !4409
  %call90 = call i8* @avdevice_configuration(), !dbg !4410
  store i8* %call90, i8** %cfg89, align 8, !dbg !4412
  %53 = load i8*, i8** %cfg89, align 8, !dbg !4413
  %call91 = call i32 @strcmp(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.144, i32 0, i32 0), i8* %53) #14, !dbg !4414
  %tobool92 = icmp ne i32 %call91, 0, !dbg !4416
  br i1 %tobool92, label %if.then93, label %if.end97, !dbg !4416

if.then93:                                        ; preds = %if.then88
  %54 = load i32, i32* @warned_cfg, align 4, !dbg !4417
  %tobool94 = icmp ne i32 %54, 0, !dbg !4417
  br i1 %tobool94, label %if.end96, label %if.then95, !dbg !4422

if.then95:                                        ; preds = %if.then93
  %55 = load i32, i32* %level.addr, align 4, !dbg !4423
  %56 = load i8*, i8** %indent72, align 8, !dbg !4426
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %55, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.145, i32 0, i32 0), i8* %56), !dbg !4427
  store i32 1, i32* @warned_cfg, align 4, !dbg !4428
  br label %if.end96, !dbg !4429

if.end96:                                         ; preds = %if.then95, %if.then93
  %57 = load i32, i32* %level.addr, align 4, !dbg !4430
  %58 = load i8*, i8** %indent72, align 8, !dbg !4432
  %59 = load i8*, i8** %cfg89, align 8, !dbg !4433
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %57, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.146, i32 0, i32 0), i8* %58, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.149, i32 0, i32 0), i8* %59), !dbg !4434
  br label %if.end97, !dbg !4435

if.end97:                                         ; preds = %if.end96, %if.then88
  br label %if.end98, !dbg !4436

if.end98:                                         ; preds = %if.end97, %if.end85
  call void @llvm.dbg.declare(metadata i8** %indent99, metadata !4438, metadata !1512), !dbg !4441
  %60 = load i32, i32* %flags.addr, align 4, !dbg !4442
  %and100 = and i32 %60, 1, !dbg !4443
  %tobool101 = icmp ne i32 %and100, 0, !dbg !4442
  %cond102 = select i1 %tobool101, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), !dbg !4442
  store i8* %cond102, i8** %indent99, align 8, !dbg !4441
  %61 = load i32, i32* %flags.addr, align 4, !dbg !4444
  %and103 = and i32 %61, 2, !dbg !4446
  %tobool104 = icmp ne i32 %and103, 0, !dbg !4446
  br i1 %tobool104, label %if.then105, label %if.end112, !dbg !4447

if.then105:                                       ; preds = %if.end98
  call void @llvm.dbg.declare(metadata i32* %version106, metadata !4448, metadata !1512), !dbg !4450
  %call107 = call i32 @avfilter_version(), !dbg !4451
  store i32 %call107, i32* %version106, align 4, !dbg !4453
  %62 = load i32, i32* %level.addr, align 4, !dbg !4454
  %63 = load i8*, i8** %indent99, align 8, !dbg !4455
  %64 = load i32, i32* %version106, align 4, !dbg !4456
  %shr108 = lshr i32 %64, 16, !dbg !4457
  %65 = load i32, i32* %version106, align 4, !dbg !4458
  %and109 = and i32 %65, 65280, !dbg !4459
  %shr110 = lshr i32 %and109, 8, !dbg !4460
  %66 = load i32, i32* %version106, align 4, !dbg !4461
  %and111 = and i32 %66, 255, !dbg !4462
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %62, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.142, i32 0, i32 0), i8* %63, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.150, i32 0, i32 0), i32 7, i32 48, i32 100, i32 %shr108, i32 %shr110, i32 %and111), !dbg !4463
  br label %if.end112, !dbg !4465

if.end112:                                        ; preds = %if.then105, %if.end98
  %67 = load i32, i32* %flags.addr, align 4, !dbg !4466
  %and113 = and i32 %67, 4, !dbg !4469
  %tobool114 = icmp ne i32 %and113, 0, !dbg !4469
  br i1 %tobool114, label %if.then115, label %if.end125, !dbg !4466

if.then115:                                       ; preds = %if.end112
  call void @llvm.dbg.declare(metadata i8** %cfg116, metadata !4470, metadata !1512), !dbg !4472
  %call117 = call i8* @avfilter_configuration(), !dbg !4473
  store i8* %call117, i8** %cfg116, align 8, !dbg !4475
  %68 = load i8*, i8** %cfg116, align 8, !dbg !4476
  %call118 = call i32 @strcmp(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.144, i32 0, i32 0), i8* %68) #14, !dbg !4477
  %tobool119 = icmp ne i32 %call118, 0, !dbg !4479
  br i1 %tobool119, label %if.then120, label %if.end124, !dbg !4479

if.then120:                                       ; preds = %if.then115
  %69 = load i32, i32* @warned_cfg, align 4, !dbg !4480
  %tobool121 = icmp ne i32 %69, 0, !dbg !4480
  br i1 %tobool121, label %if.end123, label %if.then122, !dbg !4485

if.then122:                                       ; preds = %if.then120
  %70 = load i32, i32* %level.addr, align 4, !dbg !4486
  %71 = load i8*, i8** %indent99, align 8, !dbg !4489
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %70, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.145, i32 0, i32 0), i8* %71), !dbg !4490
  store i32 1, i32* @warned_cfg, align 4, !dbg !4491
  br label %if.end123, !dbg !4492

if.end123:                                        ; preds = %if.then122, %if.then120
  %72 = load i32, i32* %level.addr, align 4, !dbg !4493
  %73 = load i8*, i8** %indent99, align 8, !dbg !4495
  %74 = load i8*, i8** %cfg116, align 8, !dbg !4496
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %72, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.146, i32 0, i32 0), i8* %73, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.150, i32 0, i32 0), i8* %74), !dbg !4497
  br label %if.end124, !dbg !4498

if.end124:                                        ; preds = %if.end123, %if.then115
  br label %if.end125, !dbg !4499

if.end125:                                        ; preds = %if.end124, %if.end112
  call void @llvm.dbg.declare(metadata i8** %indent126, metadata !4501, metadata !1512), !dbg !4504
  %75 = load i32, i32* %flags.addr, align 4, !dbg !4505
  %and127 = and i32 %75, 1, !dbg !4506
  %tobool128 = icmp ne i32 %and127, 0, !dbg !4505
  %cond129 = select i1 %tobool128, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), !dbg !4505
  store i8* %cond129, i8** %indent126, align 8, !dbg !4504
  %76 = load i32, i32* %flags.addr, align 4, !dbg !4507
  %and130 = and i32 %76, 2, !dbg !4509
  %tobool131 = icmp ne i32 %and130, 0, !dbg !4509
  br i1 %tobool131, label %if.then132, label %if.end139, !dbg !4510

if.then132:                                       ; preds = %if.end125
  call void @llvm.dbg.declare(metadata i32* %version133, metadata !4511, metadata !1512), !dbg !4513
  %call134 = call i32 @swscale_version(), !dbg !4514
  store i32 %call134, i32* %version133, align 4, !dbg !4516
  %77 = load i32, i32* %level.addr, align 4, !dbg !4517
  %78 = load i8*, i8** %indent126, align 8, !dbg !4518
  %79 = load i32, i32* %version133, align 4, !dbg !4516
  %shr135 = lshr i32 %79, 16, !dbg !4519
  %80 = load i32, i32* %version133, align 4, !dbg !4520
  %and136 = and i32 %80, 65280, !dbg !4521
  %shr137 = lshr i32 %and136, 8, !dbg !4522
  %81 = load i32, i32* %version133, align 4, !dbg !4523
  %and138 = and i32 %81, 255, !dbg !4524
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %77, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.142, i32 0, i32 0), i8* %78, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.151, i32 0, i32 0), i32 5, i32 4, i32 100, i32 %shr135, i32 %shr137, i32 %and138), !dbg !4525
  br label %if.end139, !dbg !4527

if.end139:                                        ; preds = %if.then132, %if.end125
  %82 = load i32, i32* %flags.addr, align 4, !dbg !4528
  %and140 = and i32 %82, 4, !dbg !4531
  %tobool141 = icmp ne i32 %and140, 0, !dbg !4531
  br i1 %tobool141, label %if.then142, label %if.end152, !dbg !4528

if.then142:                                       ; preds = %if.end139
  call void @llvm.dbg.declare(metadata i8** %cfg143, metadata !4532, metadata !1512), !dbg !4534
  %call144 = call i8* @swscale_configuration(), !dbg !4535
  store i8* %call144, i8** %cfg143, align 8, !dbg !4537
  %83 = load i8*, i8** %cfg143, align 8, !dbg !4538
  %call145 = call i32 @strcmp(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.144, i32 0, i32 0), i8* %83) #14, !dbg !4539
  %tobool146 = icmp ne i32 %call145, 0, !dbg !4541
  br i1 %tobool146, label %if.then147, label %if.end151, !dbg !4541

if.then147:                                       ; preds = %if.then142
  %84 = load i32, i32* @warned_cfg, align 4, !dbg !4542
  %tobool148 = icmp ne i32 %84, 0, !dbg !4542
  br i1 %tobool148, label %if.end150, label %if.then149, !dbg !4547

if.then149:                                       ; preds = %if.then147
  %85 = load i32, i32* %level.addr, align 4, !dbg !4548
  %86 = load i8*, i8** %indent126, align 8, !dbg !4551
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %85, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.145, i32 0, i32 0), i8* %86), !dbg !4552
  store i32 1, i32* @warned_cfg, align 4, !dbg !4553
  br label %if.end150, !dbg !4554

if.end150:                                        ; preds = %if.then149, %if.then147
  %87 = load i32, i32* %level.addr, align 4, !dbg !4555
  %88 = load i8*, i8** %indent126, align 8, !dbg !4557
  %89 = load i8*, i8** %cfg143, align 8, !dbg !4558
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %87, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.146, i32 0, i32 0), i8* %88, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.151, i32 0, i32 0), i8* %89), !dbg !4559
  br label %if.end151, !dbg !4560

if.end151:                                        ; preds = %if.end150, %if.then142
  br label %if.end152, !dbg !4561

if.end152:                                        ; preds = %if.end151, %if.end139
  call void @llvm.dbg.declare(metadata i8** %indent153, metadata !4563, metadata !1512), !dbg !4566
  %90 = load i32, i32* %flags.addr, align 4, !dbg !4567
  %and154 = and i32 %90, 1, !dbg !4568
  %tobool155 = icmp ne i32 %and154, 0, !dbg !4567
  %cond156 = select i1 %tobool155, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), !dbg !4567
  store i8* %cond156, i8** %indent153, align 8, !dbg !4566
  %91 = load i32, i32* %flags.addr, align 4, !dbg !4569
  %and157 = and i32 %91, 2, !dbg !4571
  %tobool158 = icmp ne i32 %and157, 0, !dbg !4571
  br i1 %tobool158, label %if.then159, label %if.end166, !dbg !4572

if.then159:                                       ; preds = %if.end152
  call void @llvm.dbg.declare(metadata i32* %version160, metadata !4573, metadata !1512), !dbg !4575
  %call161 = call i32 @swresample_version(), !dbg !4576
  store i32 %call161, i32* %version160, align 4, !dbg !4578
  %92 = load i32, i32* %level.addr, align 4, !dbg !4579
  %93 = load i8*, i8** %indent153, align 8, !dbg !4580
  %94 = load i32, i32* %version160, align 4, !dbg !4581
  %shr162 = lshr i32 %94, 16, !dbg !4582
  %95 = load i32, i32* %version160, align 4, !dbg !4583
  %and163 = and i32 %95, 65280, !dbg !4584
  %shr164 = lshr i32 %and163, 8, !dbg !4585
  %96 = load i32, i32* %version160, align 4, !dbg !4586
  %and165 = and i32 %96, 255, !dbg !4587
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %92, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.142, i32 0, i32 0), i8* %93, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.152, i32 0, i32 0), i32 3, i32 4, i32 100, i32 %shr162, i32 %shr164, i32 %and165), !dbg !4588
  br label %if.end166, !dbg !4590

if.end166:                                        ; preds = %if.then159, %if.end152
  %97 = load i32, i32* %flags.addr, align 4, !dbg !4591
  %and167 = and i32 %97, 4, !dbg !4594
  %tobool168 = icmp ne i32 %and167, 0, !dbg !4594
  br i1 %tobool168, label %if.then169, label %if.end179, !dbg !4591

if.then169:                                       ; preds = %if.end166
  call void @llvm.dbg.declare(metadata i8** %cfg170, metadata !4595, metadata !1512), !dbg !4597
  %call171 = call i8* @swresample_configuration(), !dbg !4598
  store i8* %call171, i8** %cfg170, align 8, !dbg !4600
  %98 = load i8*, i8** %cfg170, align 8, !dbg !4601
  %call172 = call i32 @strcmp(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.144, i32 0, i32 0), i8* %98) #14, !dbg !4602
  %tobool173 = icmp ne i32 %call172, 0, !dbg !4604
  br i1 %tobool173, label %if.then174, label %if.end178, !dbg !4604

if.then174:                                       ; preds = %if.then169
  %99 = load i32, i32* @warned_cfg, align 4, !dbg !4605
  %tobool175 = icmp ne i32 %99, 0, !dbg !4605
  br i1 %tobool175, label %if.end177, label %if.then176, !dbg !4610

if.then176:                                       ; preds = %if.then174
  %100 = load i32, i32* %level.addr, align 4, !dbg !4611
  %101 = load i8*, i8** %indent153, align 8, !dbg !4614
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %100, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.145, i32 0, i32 0), i8* %101), !dbg !4615
  store i32 1, i32* @warned_cfg, align 4, !dbg !4616
  br label %if.end177, !dbg !4617

if.end177:                                        ; preds = %if.then176, %if.then174
  %102 = load i32, i32* %level.addr, align 4, !dbg !4618
  %103 = load i8*, i8** %indent153, align 8, !dbg !4620
  %104 = load i8*, i8** %cfg170, align 8, !dbg !4621
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %102, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.146, i32 0, i32 0), i8* %103, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.152, i32 0, i32 0), i8* %104), !dbg !4622
  br label %if.end178, !dbg !4623

if.end178:                                        ; preds = %if.end177, %if.then169
  br label %if.end179, !dbg !4624

if.end179:                                        ; preds = %if.end178, %if.end166
  ret void, !dbg !4626
}

; Function Attrs: nounwind uwtable
define i32 @show_version(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !4627 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !4628, metadata !1512), !dbg !4629
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !4630, metadata !1512), !dbg !4631
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !4632, metadata !1512), !dbg !4633
  call void @av_log_set_callback(void (i8*, i32, i8*, %struct.__va_list_tag*)* @log_callback_help), !dbg !4634
  call void @print_program_info(i32 8, i32 32), !dbg !4635
  call void @print_all_libs_info(i32 2, i32 32), !dbg !4636
  ret i32 0, !dbg !4637
}

declare void @av_log_set_callback(void (i8*, i32, i8*, %struct.__va_list_tag*)*) #1

; Function Attrs: nounwind uwtable
define i32 @show_buildconf(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !4638 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !4639, metadata !1512), !dbg !4640
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !4641, metadata !1512), !dbg !4642
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !4643, metadata !1512), !dbg !4644
  call void @av_log_set_callback(void (i8*, i32, i8*, %struct.__va_list_tag*)* @log_callback_help), !dbg !4645
  call void @print_buildconf(i32 1, i32 32), !dbg !4646
  ret i32 0, !dbg !4647
}

; Function Attrs: nounwind uwtable
define internal void @print_buildconf(i32 %flags, i32 %level) #0 !dbg !4648 {
entry:
  %flags.addr = alloca i32, align 4
  %level.addr = alloca i32, align 4
  %indent = alloca i8*, align 8
  %str = alloca [17 x i8], align 16
  %conflist = alloca i8*, align 8
  %remove_tilde = alloca i8*, align 8
  %splitconf = alloca i8*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4649, metadata !1512), !dbg !4650
  store i32 %level, i32* %level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %level.addr, metadata !4651, metadata !1512), !dbg !4652
  call void @llvm.dbg.declare(metadata i8** %indent, metadata !4653, metadata !1512), !dbg !4654
  %0 = load i32, i32* %flags.addr, align 4, !dbg !4655
  %and = and i32 %0, 1, !dbg !4656
  %tobool = icmp ne i32 %and, 0, !dbg !4655
  %cond = select i1 %tobool, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), !dbg !4655
  store i8* %cond, i8** %indent, align 8, !dbg !4654
  call void @llvm.dbg.declare(metadata [17 x i8]* %str, metadata !4657, metadata !1512), !dbg !4661
  %1 = bitcast [17 x i8]* %str to i8*, !dbg !4661
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @print_buildconf.str, i32 0, i32 0), i64 17, i32 16, i1 false), !dbg !4661
  call void @llvm.dbg.declare(metadata i8** %conflist, metadata !4662, metadata !1512), !dbg !4663
  call void @llvm.dbg.declare(metadata i8** %remove_tilde, metadata !4664, metadata !1512), !dbg !4665
  call void @llvm.dbg.declare(metadata i8** %splitconf, metadata !4666, metadata !1512), !dbg !4667
  br label %while.cond, !dbg !4668

while.cond:                                       ; preds = %while.body, %entry
  %arraydecay = getelementptr inbounds [17 x i8], [17 x i8]* %str, i32 0, i32 0, !dbg !4669
  %call = call i8* @strstr(i8* %arraydecay, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.153, i32 0, i32 0)) #14, !dbg !4671
  store i8* %call, i8** %conflist, align 8, !dbg !4672
  %cmp = icmp ne i8* %call, null, !dbg !4673
  br i1 %cmp, label %while.body, label %while.end, !dbg !4674

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %conflist, align 8, !dbg !4675
  %call1 = call i8* @strncpy(i8* %2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.154, i32 0, i32 0), i64 3) #11, !dbg !4677
  br label %while.cond, !dbg !4678, !llvm.loop !4680

while.end:                                        ; preds = %while.cond
  br label %while.cond2, !dbg !4681

while.cond2:                                      ; preds = %while.body6, %while.end
  %arraydecay3 = getelementptr inbounds [17 x i8], [17 x i8]* %str, i32 0, i32 0, !dbg !4682
  %call4 = call i8* @strstr(i8* %arraydecay3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.155, i32 0, i32 0)) #14, !dbg !4683
  store i8* %call4, i8** %remove_tilde, align 8, !dbg !4684
  %cmp5 = icmp ne i8* %call4, null, !dbg !4685
  br i1 %cmp5, label %while.body6, label %while.end8, !dbg !4686

while.body6:                                      ; preds = %while.cond2
  %3 = load i8*, i8** %remove_tilde, align 8, !dbg !4687
  %call7 = call i8* @strncpy(i8* %3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.156, i32 0, i32 0), i64 11) #11, !dbg !4689
  br label %while.cond2, !dbg !4690, !llvm.loop !4691

while.end8:                                       ; preds = %while.cond2
  %arraydecay9 = getelementptr inbounds [17 x i8], [17 x i8]* %str, i32 0, i32 0, !dbg !4692
  %call10 = call i8* @strtok(i8* %arraydecay9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.157, i32 0, i32 0)) #11, !dbg !4693
  store i8* %call10, i8** %splitconf, align 8, !dbg !4694
  %4 = load i32, i32* %level.addr, align 4, !dbg !4695
  %5 = load i8*, i8** %indent, align 8, !dbg !4696
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %4, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.158, i32 0, i32 0), i8* %5), !dbg !4697
  br label %while.cond11, !dbg !4698

while.cond11:                                     ; preds = %while.body13, %while.end8
  %6 = load i8*, i8** %splitconf, align 8, !dbg !4699
  %cmp12 = icmp ne i8* %6, null, !dbg !4700
  br i1 %cmp12, label %while.body13, label %while.end15, !dbg !4701

while.body13:                                     ; preds = %while.cond11
  %7 = load i32, i32* %level.addr, align 4, !dbg !4702
  %8 = load i8*, i8** %indent, align 8, !dbg !4704
  %9 = load i8*, i8** %indent, align 8, !dbg !4705
  %10 = load i8*, i8** %splitconf, align 8, !dbg !4706
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 %7, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.159, i32 0, i32 0), i8* %8, i8* %9, i8* %10), !dbg !4707
  %call14 = call i8* @strtok(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.157, i32 0, i32 0)) #11, !dbg !4708
  store i8* %call14, i8** %splitconf, align 8, !dbg !4709
  br label %while.cond11, !dbg !4710, !llvm.loop !4711

while.end15:                                      ; preds = %while.cond11
  ret void, !dbg !4712
}

; Function Attrs: nounwind uwtable
define i32 @show_license(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !4713 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !4714, metadata !1512), !dbg !4715
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !4716, metadata !1512), !dbg !4717
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !4718, metadata !1512), !dbg !4719
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([673 x i8], [673 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @program_name, i32 0, i32 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @program_name, i32 0, i32 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @program_name, i32 0, i32 0)), !dbg !4720
  ret i32 0, !dbg !4721
}

; Function Attrs: nounwind uwtable
define i32 @show_formats(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !4722 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !4723, metadata !1512), !dbg !4724
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !4725, metadata !1512), !dbg !4726
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !4727, metadata !1512), !dbg !4728
  %0 = load i8*, i8** %optctx.addr, align 8, !dbg !4729
  %1 = load i8*, i8** %opt.addr, align 8, !dbg !4730
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !4731
  %call = call i32 @show_formats_devices(i8* %0, i8* %1, i8* %2, i32 0, i32 0), !dbg !4732
  ret i32 %call, !dbg !4733
}

; Function Attrs: nounwind uwtable
define internal i32 @show_formats_devices(i8* %optctx, i8* %opt, i8* %arg, i32 %device_only, i32 %muxdemuxers) #0 !dbg !4734 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %device_only.addr = alloca i32, align 4
  %muxdemuxers.addr = alloca i32, align 4
  %ifmt_opaque = alloca i8*, align 8
  %ifmt = alloca %struct.AVInputFormat*, align 8
  %ofmt_opaque = alloca i8*, align 8
  %ofmt = alloca %struct.AVOutputFormat*, align 8
  %last_name = alloca i8*, align 8
  %is_dev = alloca i32, align 4
  %decode = alloca i32, align 4
  %encode = alloca i32, align 4
  %name = alloca i8*, align 8
  %long_name = alloca i8*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !4737, metadata !1512), !dbg !4738
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !4739, metadata !1512), !dbg !4740
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !4741, metadata !1512), !dbg !4742
  store i32 %device_only, i32* %device_only.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %device_only.addr, metadata !4743, metadata !1512), !dbg !4744
  store i32 %muxdemuxers, i32* %muxdemuxers.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %muxdemuxers.addr, metadata !4745, metadata !1512), !dbg !4746
  call void @llvm.dbg.declare(metadata i8** %ifmt_opaque, metadata !4747, metadata !1512), !dbg !4748
  store i8* null, i8** %ifmt_opaque, align 8, !dbg !4748
  call void @llvm.dbg.declare(metadata %struct.AVInputFormat** %ifmt, metadata !4749, metadata !1512), !dbg !5746
  store %struct.AVInputFormat* null, %struct.AVInputFormat** %ifmt, align 8, !dbg !5746
  call void @llvm.dbg.declare(metadata i8** %ofmt_opaque, metadata !5747, metadata !1512), !dbg !5748
  store i8* null, i8** %ofmt_opaque, align 8, !dbg !5748
  call void @llvm.dbg.declare(metadata %struct.AVOutputFormat** %ofmt, metadata !5749, metadata !1512), !dbg !5753
  store %struct.AVOutputFormat* null, %struct.AVOutputFormat** %ofmt, align 8, !dbg !5753
  call void @llvm.dbg.declare(metadata i8** %last_name, metadata !5754, metadata !1512), !dbg !5755
  call void @llvm.dbg.declare(metadata i32* %is_dev, metadata !5756, metadata !1512), !dbg !5757
  %0 = load i32, i32* %device_only.addr, align 4, !dbg !5758
  %tobool = icmp ne i32 %0, 0, !dbg !5758
  %cond = select i1 %tobool, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.162, i32 0, i32 0), !dbg !5758
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.160, i32 0, i32 0), i8* %cond), !dbg !5759
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.163, i32 0, i32 0), i8** %last_name, align 8, !dbg !5760
  br label %for.cond, !dbg !5761

for.cond:                                         ; preds = %cond.end, %entry
  call void @llvm.dbg.declare(metadata i32* %decode, metadata !5762, metadata !1512), !dbg !5766
  store i32 0, i32* %decode, align 4, !dbg !5766
  call void @llvm.dbg.declare(metadata i32* %encode, metadata !5767, metadata !1512), !dbg !5768
  store i32 0, i32* %encode, align 4, !dbg !5768
  call void @llvm.dbg.declare(metadata i8** %name, metadata !5769, metadata !1512), !dbg !5770
  store i8* null, i8** %name, align 8, !dbg !5770
  call void @llvm.dbg.declare(metadata i8** %long_name, metadata !5771, metadata !1512), !dbg !5772
  store i8* null, i8** %long_name, align 8, !dbg !5772
  %1 = load i32, i32* %muxdemuxers.addr, align 4, !dbg !5773
  %cmp = icmp ne i32 %1, 1, !dbg !5775
  br i1 %cmp, label %if.then, label %if.end19, !dbg !5776

if.then:                                          ; preds = %for.cond
  store i8* null, i8** %ofmt_opaque, align 8, !dbg !5777
  br label %while.cond, !dbg !5779

while.cond:                                       ; preds = %if.end18, %if.then6, %if.then
  %call1 = call %struct.AVOutputFormat* @av_muxer_iterate(i8** %ofmt_opaque), !dbg !5780
  store %struct.AVOutputFormat* %call1, %struct.AVOutputFormat** %ofmt, align 8, !dbg !5782
  %tobool2 = icmp ne %struct.AVOutputFormat* %call1, null, !dbg !5783
  br i1 %tobool2, label %while.body, label %while.end, !dbg !5783

while.body:                                       ; preds = %while.cond
  %2 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %ofmt, align 8, !dbg !5784
  %priv_class = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %2, i32 0, i32 9, !dbg !5786
  %3 = load %struct.AVClass*, %struct.AVClass** %priv_class, align 8, !dbg !5786
  %call3 = call i32 @is_device(%struct.AVClass* %3), !dbg !5787
  store i32 %call3, i32* %is_dev, align 4, !dbg !5788
  %4 = load i32, i32* %is_dev, align 4, !dbg !5789
  %tobool4 = icmp ne i32 %4, 0, !dbg !5789
  br i1 %tobool4, label %if.end, label %land.lhs.true, !dbg !5791

land.lhs.true:                                    ; preds = %while.body
  %5 = load i32, i32* %device_only.addr, align 4, !dbg !5792
  %tobool5 = icmp ne i32 %5, 0, !dbg !5792
  br i1 %tobool5, label %if.then6, label %if.end, !dbg !5794

if.then6:                                         ; preds = %land.lhs.true
  br label %while.cond, !dbg !5795, !llvm.loop !5796

if.end:                                           ; preds = %land.lhs.true, %while.body
  %6 = load i8*, i8** %name, align 8, !dbg !5797
  %tobool7 = icmp ne i8* %6, null, !dbg !5797
  br i1 %tobool7, label %lor.lhs.false, label %land.lhs.true11, !dbg !5799

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %ofmt, align 8, !dbg !5800
  %name8 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %7, i32 0, i32 0, !dbg !5802
  %8 = load i8*, i8** %name8, align 8, !dbg !5802
  %9 = load i8*, i8** %name, align 8, !dbg !5803
  %call9 = call i32 @strcmp(i8* %8, i8* %9) #14, !dbg !5804
  %cmp10 = icmp slt i32 %call9, 0, !dbg !5805
  br i1 %cmp10, label %land.lhs.true11, label %if.end18, !dbg !5806

land.lhs.true11:                                  ; preds = %lor.lhs.false, %if.end
  %10 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %ofmt, align 8, !dbg !5807
  %name12 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %10, i32 0, i32 0, !dbg !5808
  %11 = load i8*, i8** %name12, align 8, !dbg !5808
  %12 = load i8*, i8** %last_name, align 8, !dbg !5809
  %call13 = call i32 @strcmp(i8* %11, i8* %12) #14, !dbg !5810
  %cmp14 = icmp sgt i32 %call13, 0, !dbg !5811
  br i1 %cmp14, label %if.then15, label %if.end18, !dbg !5812

if.then15:                                        ; preds = %land.lhs.true11
  %13 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %ofmt, align 8, !dbg !5814
  %name16 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %13, i32 0, i32 0, !dbg !5816
  %14 = load i8*, i8** %name16, align 8, !dbg !5816
  store i8* %14, i8** %name, align 8, !dbg !5817
  %15 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %ofmt, align 8, !dbg !5818
  %long_name17 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %15, i32 0, i32 1, !dbg !5819
  %16 = load i8*, i8** %long_name17, align 8, !dbg !5819
  store i8* %16, i8** %long_name, align 8, !dbg !5820
  store i32 1, i32* %encode, align 4, !dbg !5821
  br label %if.end18, !dbg !5822

if.end18:                                         ; preds = %if.then15, %land.lhs.true11, %lor.lhs.false
  br label %while.cond, !dbg !5823, !llvm.loop !5796

while.end:                                        ; preds = %while.cond
  br label %if.end19, !dbg !5825

if.end19:                                         ; preds = %while.end, %for.cond
  %17 = load i32, i32* %muxdemuxers.addr, align 4, !dbg !5826
  %cmp20 = icmp ne i32 %17, 2, !dbg !5828
  br i1 %cmp20, label %if.then21, label %if.end54, !dbg !5829

if.then21:                                        ; preds = %if.end19
  store i8* null, i8** %ifmt_opaque, align 8, !dbg !5830
  br label %while.cond22, !dbg !5832

while.cond22:                                     ; preds = %if.end52, %if.then31, %if.then21
  %call23 = call %struct.AVInputFormat* @av_demuxer_iterate(i8** %ifmt_opaque), !dbg !5833
  store %struct.AVInputFormat* %call23, %struct.AVInputFormat** %ifmt, align 8, !dbg !5835
  %tobool24 = icmp ne %struct.AVInputFormat* %call23, null, !dbg !5836
  br i1 %tobool24, label %while.body25, label %while.end53, !dbg !5836

while.body25:                                     ; preds = %while.cond22
  %18 = load %struct.AVInputFormat*, %struct.AVInputFormat** %ifmt, align 8, !dbg !5837
  %priv_class26 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %18, i32 0, i32 5, !dbg !5839
  %19 = load %struct.AVClass*, %struct.AVClass** %priv_class26, align 8, !dbg !5839
  %call27 = call i32 @is_device(%struct.AVClass* %19), !dbg !5840
  store i32 %call27, i32* %is_dev, align 4, !dbg !5841
  %20 = load i32, i32* %is_dev, align 4, !dbg !5842
  %tobool28 = icmp ne i32 %20, 0, !dbg !5842
  br i1 %tobool28, label %if.end32, label %land.lhs.true29, !dbg !5844

land.lhs.true29:                                  ; preds = %while.body25
  %21 = load i32, i32* %device_only.addr, align 4, !dbg !5845
  %tobool30 = icmp ne i32 %21, 0, !dbg !5845
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !5847

if.then31:                                        ; preds = %land.lhs.true29
  br label %while.cond22, !dbg !5848, !llvm.loop !5849

if.end32:                                         ; preds = %land.lhs.true29, %while.body25
  %22 = load i8*, i8** %name, align 8, !dbg !5850
  %tobool33 = icmp ne i8* %22, null, !dbg !5850
  br i1 %tobool33, label %lor.lhs.false34, label %land.lhs.true38, !dbg !5852

lor.lhs.false34:                                  ; preds = %if.end32
  %23 = load %struct.AVInputFormat*, %struct.AVInputFormat** %ifmt, align 8, !dbg !5853
  %name35 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %23, i32 0, i32 0, !dbg !5855
  %24 = load i8*, i8** %name35, align 8, !dbg !5855
  %25 = load i8*, i8** %name, align 8, !dbg !5856
  %call36 = call i32 @strcmp(i8* %24, i8* %25) #14, !dbg !5857
  %cmp37 = icmp slt i32 %call36, 0, !dbg !5858
  br i1 %cmp37, label %land.lhs.true38, label %if.end45, !dbg !5859

land.lhs.true38:                                  ; preds = %lor.lhs.false34, %if.end32
  %26 = load %struct.AVInputFormat*, %struct.AVInputFormat** %ifmt, align 8, !dbg !5860
  %name39 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %26, i32 0, i32 0, !dbg !5861
  %27 = load i8*, i8** %name39, align 8, !dbg !5861
  %28 = load i8*, i8** %last_name, align 8, !dbg !5862
  %call40 = call i32 @strcmp(i8* %27, i8* %28) #14, !dbg !5863
  %cmp41 = icmp sgt i32 %call40, 0, !dbg !5864
  br i1 %cmp41, label %if.then42, label %if.end45, !dbg !5865

if.then42:                                        ; preds = %land.lhs.true38
  %29 = load %struct.AVInputFormat*, %struct.AVInputFormat** %ifmt, align 8, !dbg !5867
  %name43 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %29, i32 0, i32 0, !dbg !5869
  %30 = load i8*, i8** %name43, align 8, !dbg !5869
  store i8* %30, i8** %name, align 8, !dbg !5870
  %31 = load %struct.AVInputFormat*, %struct.AVInputFormat** %ifmt, align 8, !dbg !5871
  %long_name44 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %31, i32 0, i32 1, !dbg !5872
  %32 = load i8*, i8** %long_name44, align 8, !dbg !5872
  store i8* %32, i8** %long_name, align 8, !dbg !5873
  store i32 0, i32* %encode, align 4, !dbg !5874
  br label %if.end45, !dbg !5875

if.end45:                                         ; preds = %if.then42, %land.lhs.true38, %lor.lhs.false34
  %33 = load i8*, i8** %name, align 8, !dbg !5876
  %tobool46 = icmp ne i8* %33, null, !dbg !5876
  br i1 %tobool46, label %land.lhs.true47, label %if.end52, !dbg !5878

land.lhs.true47:                                  ; preds = %if.end45
  %34 = load %struct.AVInputFormat*, %struct.AVInputFormat** %ifmt, align 8, !dbg !5879
  %name48 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %34, i32 0, i32 0, !dbg !5881
  %35 = load i8*, i8** %name48, align 8, !dbg !5881
  %36 = load i8*, i8** %name, align 8, !dbg !5882
  %call49 = call i32 @strcmp(i8* %35, i8* %36) #14, !dbg !5883
  %cmp50 = icmp eq i32 %call49, 0, !dbg !5884
  br i1 %cmp50, label %if.then51, label %if.end52, !dbg !5885

if.then51:                                        ; preds = %land.lhs.true47
  store i32 1, i32* %decode, align 4, !dbg !5886
  br label %if.end52, !dbg !5887

if.end52:                                         ; preds = %if.then51, %land.lhs.true47, %if.end45
  br label %while.cond22, !dbg !5888, !llvm.loop !5849

while.end53:                                      ; preds = %while.cond22
  br label %if.end54, !dbg !5890

if.end54:                                         ; preds = %while.end53, %if.end19
  %37 = load i8*, i8** %name, align 8, !dbg !5891
  %tobool55 = icmp ne i8* %37, null, !dbg !5891
  br i1 %tobool55, label %if.end57, label %if.then56, !dbg !5893

if.then56:                                        ; preds = %if.end54
  br label %for.end, !dbg !5894

if.end57:                                         ; preds = %if.end54
  %38 = load i8*, i8** %name, align 8, !dbg !5895
  store i8* %38, i8** %last_name, align 8, !dbg !5896
  %39 = load i32, i32* %decode, align 4, !dbg !5897
  %tobool58 = icmp ne i32 %39, 0, !dbg !5897
  %cond59 = select i1 %tobool58, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), !dbg !5897
  %40 = load i32, i32* %encode, align 4, !dbg !5898
  %tobool60 = icmp ne i32 %40, 0, !dbg !5898
  %cond61 = select i1 %tobool60, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), !dbg !5898
  %41 = load i8*, i8** %name, align 8, !dbg !5899
  %42 = load i8*, i8** %long_name, align 8, !dbg !5900
  %tobool62 = icmp ne i8* %42, null, !dbg !5900
  br i1 %tobool62, label %cond.true, label %cond.false, !dbg !5900

cond.true:                                        ; preds = %if.end57
  %43 = load i8*, i8** %long_name, align 8, !dbg !5901
  br label %cond.end, !dbg !5903

cond.false:                                       ; preds = %if.end57
  br label %cond.end, !dbg !5904

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond63 = phi i8* [ %43, %cond.true ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), %cond.false ], !dbg !5906
  %call64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.164, i32 0, i32 0), i8* %cond59, i8* %cond61, i8* %41, i8* %cond63), !dbg !5908
  br label %for.cond, !dbg !5909, !llvm.loop !5911

for.end:                                          ; preds = %if.then56
  ret i32 0, !dbg !5912
}

; Function Attrs: nounwind uwtable
define i32 @show_muxers(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !5913 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !5914, metadata !1512), !dbg !5915
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !5916, metadata !1512), !dbg !5917
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !5918, metadata !1512), !dbg !5919
  %0 = load i8*, i8** %optctx.addr, align 8, !dbg !5920
  %1 = load i8*, i8** %opt.addr, align 8, !dbg !5921
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !5922
  %call = call i32 @show_formats_devices(i8* %0, i8* %1, i8* %2, i32 0, i32 2), !dbg !5923
  ret i32 %call, !dbg !5924
}

; Function Attrs: nounwind uwtable
define i32 @show_demuxers(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !5925 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !5926, metadata !1512), !dbg !5927
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !5928, metadata !1512), !dbg !5929
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !5930, metadata !1512), !dbg !5931
  %0 = load i8*, i8** %optctx.addr, align 8, !dbg !5932
  %1 = load i8*, i8** %opt.addr, align 8, !dbg !5933
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !5934
  %call = call i32 @show_formats_devices(i8* %0, i8* %1, i8* %2, i32 0, i32 1), !dbg !5935
  ret i32 %call, !dbg !5936
}

; Function Attrs: nounwind uwtable
define i32 @show_devices(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !5937 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !5938, metadata !1512), !dbg !5939
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !5940, metadata !1512), !dbg !5941
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !5942, metadata !1512), !dbg !5943
  %0 = load i8*, i8** %optctx.addr, align 8, !dbg !5944
  %1 = load i8*, i8** %opt.addr, align 8, !dbg !5945
  %2 = load i8*, i8** %arg.addr, align 8, !dbg !5946
  %call = call i32 @show_formats_devices(i8* %0, i8* %1, i8* %2, i32 1, i32 0), !dbg !5947
  ret i32 %call, !dbg !5948
}

; Function Attrs: nounwind uwtable
define i32 @show_codecs(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !5949 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %codecs = alloca %struct.AVCodecDescriptor**, align 8
  %i = alloca i32, align 4
  %nb_codecs = alloca i32, align 4
  %desc = alloca %struct.AVCodecDescriptor*, align 8
  %codec = alloca %struct.AVCodec*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !5950, metadata !1512), !dbg !5951
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !5952, metadata !1512), !dbg !5953
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !5954, metadata !1512), !dbg !5955
  call void @llvm.dbg.declare(metadata %struct.AVCodecDescriptor*** %codecs, metadata !5956, metadata !1512), !dbg !5958
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5959, metadata !1512), !dbg !5960
  call void @llvm.dbg.declare(metadata i32* %nb_codecs, metadata !5961, metadata !1512), !dbg !5962
  %call = call i32 @get_codecs_sorted(%struct.AVCodecDescriptor*** %codecs), !dbg !5963
  store i32 %call, i32* %nb_codecs, align 4, !dbg !5962
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([237 x i8], [237 x i8]* @.str.71, i32 0, i32 0)), !dbg !5964
  store i32 0, i32* %i, align 4, !dbg !5965
  br label %for.cond, !dbg !5967

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !5968
  %1 = load i32, i32* %nb_codecs, align 4, !dbg !5971
  %cmp = icmp ult i32 %0, %1, !dbg !5972
  br i1 %cmp, label %for.body, label %for.end, !dbg !5973

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.AVCodecDescriptor** %desc, metadata !5974, metadata !1512), !dbg !5976
  %2 = load i32, i32* %i, align 4, !dbg !5977
  %idxprom = zext i32 %2 to i64, !dbg !5978
  %3 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %codecs, align 8, !dbg !5978
  %arrayidx = getelementptr inbounds %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %3, i64 %idxprom, !dbg !5978
  %4 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %arrayidx, align 8, !dbg !5978
  store %struct.AVCodecDescriptor* %4, %struct.AVCodecDescriptor** %desc, align 8, !dbg !5976
  call void @llvm.dbg.declare(metadata %struct.AVCodec** %codec, metadata !5979, metadata !1512), !dbg !5982
  store %struct.AVCodec* null, %struct.AVCodec** %codec, align 8, !dbg !5982
  %5 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !5983
  %name = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %5, i32 0, i32 2, !dbg !5985
  %6 = load i8*, i8** %name, align 8, !dbg !5985
  %call2 = call i8* @strstr(i8* %6, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.72, i32 0, i32 0)) #14, !dbg !5986
  %tobool = icmp ne i8* %call2, null, !dbg !5986
  br i1 %tobool, label %if.then, label %if.end, !dbg !5987

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !5988

if.end:                                           ; preds = %for.body
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0)), !dbg !5989
  %7 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !5990
  %id = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %7, i32 0, i32 0, !dbg !5991
  %8 = load i32, i32* %id, align 8, !dbg !5991
  %call4 = call %struct.AVCodec* @avcodec_find_decoder(i32 %8), !dbg !5992
  %tobool5 = icmp ne %struct.AVCodec* %call4, null, !dbg !5992
  %cond = select i1 %tobool5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i32 0, i32 0), !dbg !5992
  %call6 = call i32 (i8*, ...) @printf(i8* %cond), !dbg !5993
  %9 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !5995
  %id7 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %9, i32 0, i32 0, !dbg !5996
  %10 = load i32, i32* %id7, align 8, !dbg !5996
  %call8 = call %struct.AVCodec* @avcodec_find_encoder(i32 %10), !dbg !5997
  %tobool9 = icmp ne %struct.AVCodec* %call8, null, !dbg !5997
  %cond10 = select i1 %tobool9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i32 0, i32 0), !dbg !5997
  %call11 = call i32 (i8*, ...) @printf(i8* %cond10), !dbg !5998
  %11 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !5999
  %type = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %11, i32 0, i32 1, !dbg !6000
  %12 = load i32, i32* %type, align 4, !dbg !6000
  %call12 = call signext i8 @get_media_type_char(i32 %12), !dbg !6001
  %conv = sext i8 %call12 to i32, !dbg !6001
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.76, i32 0, i32 0), i32 %conv), !dbg !6002
  %13 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6003
  %props = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %13, i32 0, i32 4, !dbg !6004
  %14 = load i32, i32* %props, align 8, !dbg !6004
  %and = and i32 %14, 1, !dbg !6005
  %tobool14 = icmp ne i32 %and, 0, !dbg !6006
  %cond15 = select i1 %tobool14, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i32 0, i32 0), !dbg !6006
  %call16 = call i32 (i8*, ...) @printf(i8* %cond15), !dbg !6007
  %15 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6008
  %props17 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %15, i32 0, i32 4, !dbg !6009
  %16 = load i32, i32* %props17, align 8, !dbg !6009
  %and18 = and i32 %16, 2, !dbg !6010
  %tobool19 = icmp ne i32 %and18, 0, !dbg !6011
  %cond20 = select i1 %tobool19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i32 0, i32 0), !dbg !6011
  %call21 = call i32 (i8*, ...) @printf(i8* %cond20), !dbg !6012
  %17 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6013
  %props22 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %17, i32 0, i32 4, !dbg !6014
  %18 = load i32, i32* %props22, align 8, !dbg !6014
  %and23 = and i32 %18, 4, !dbg !6015
  %tobool24 = icmp ne i32 %and23, 0, !dbg !6016
  %cond25 = select i1 %tobool24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i32 0, i32 0), !dbg !6016
  %call26 = call i32 (i8*, ...) @printf(i8* %cond25), !dbg !6017
  %19 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6018
  %name27 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %19, i32 0, i32 2, !dbg !6019
  %20 = load i8*, i8** %name27, align 8, !dbg !6019
  %21 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6020
  %long_name = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %21, i32 0, i32 3, !dbg !6021
  %22 = load i8*, i8** %long_name, align 8, !dbg !6021
  %tobool28 = icmp ne i8* %22, null, !dbg !6020
  br i1 %tobool28, label %cond.true, label %cond.false, !dbg !6020

cond.true:                                        ; preds = %if.end
  %23 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6022
  %long_name29 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %23, i32 0, i32 3, !dbg !6023
  %24 = load i8*, i8** %long_name29, align 8, !dbg !6023
  br label %cond.end, !dbg !6024

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !6025

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond30 = phi i8* [ %24, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), %cond.false ], !dbg !6027
  %call31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.80, i32 0, i32 0), i8* %20, i8* %cond30), !dbg !6029
  br label %while.cond, !dbg !6030

while.cond:                                       ; preds = %if.end41, %cond.end
  %25 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6031
  %id32 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %25, i32 0, i32 0, !dbg !6032
  %26 = load i32, i32* %id32, align 8, !dbg !6032
  %27 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6033
  %call33 = call %struct.AVCodec* @next_codec_for_id(i32 %26, %struct.AVCodec* %27, i32 0), !dbg !6034
  store %struct.AVCodec* %call33, %struct.AVCodec** %codec, align 8, !dbg !6035
  %tobool34 = icmp ne %struct.AVCodec* %call33, null, !dbg !6036
  br i1 %tobool34, label %while.body, label %while.end, !dbg !6036

while.body:                                       ; preds = %while.cond
  %28 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6037
  %name35 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %28, i32 0, i32 0, !dbg !6040
  %29 = load i8*, i8** %name35, align 8, !dbg !6040
  %30 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6041
  %name36 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %30, i32 0, i32 2, !dbg !6042
  %31 = load i8*, i8** %name36, align 8, !dbg !6042
  %call37 = call i32 @strcmp(i8* %29, i8* %31) #14, !dbg !6043
  %tobool38 = icmp ne i32 %call37, 0, !dbg !6043
  br i1 %tobool38, label %if.then39, label %if.end41, !dbg !6044

if.then39:                                        ; preds = %while.body
  %32 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6045
  %id40 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %32, i32 0, i32 0, !dbg !6047
  %33 = load i32, i32* %id40, align 8, !dbg !6047
  call void @print_codecs_for_id(i32 %33, i32 0), !dbg !6048
  br label %while.end, !dbg !6049

if.end41:                                         ; preds = %while.body
  br label %while.cond, !dbg !6050, !llvm.loop !6051

while.end:                                        ; preds = %if.then39, %while.cond
  store %struct.AVCodec* null, %struct.AVCodec** %codec, align 8, !dbg !6052
  br label %while.cond42, !dbg !6053

while.cond42:                                     ; preds = %if.end53, %while.end
  %34 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6054
  %id43 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %34, i32 0, i32 0, !dbg !6055
  %35 = load i32, i32* %id43, align 8, !dbg !6055
  %36 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6056
  %call44 = call %struct.AVCodec* @next_codec_for_id(i32 %35, %struct.AVCodec* %36, i32 1), !dbg !6057
  store %struct.AVCodec* %call44, %struct.AVCodec** %codec, align 8, !dbg !6058
  %tobool45 = icmp ne %struct.AVCodec* %call44, null, !dbg !6059
  br i1 %tobool45, label %while.body46, label %while.end54, !dbg !6059

while.body46:                                     ; preds = %while.cond42
  %37 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6060
  %name47 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %37, i32 0, i32 0, !dbg !6063
  %38 = load i8*, i8** %name47, align 8, !dbg !6063
  %39 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6064
  %name48 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %39, i32 0, i32 2, !dbg !6065
  %40 = load i8*, i8** %name48, align 8, !dbg !6065
  %call49 = call i32 @strcmp(i8* %38, i8* %40) #14, !dbg !6066
  %tobool50 = icmp ne i32 %call49, 0, !dbg !6066
  br i1 %tobool50, label %if.then51, label %if.end53, !dbg !6067

if.then51:                                        ; preds = %while.body46
  %41 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6068
  %id52 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %41, i32 0, i32 0, !dbg !6070
  %42 = load i32, i32* %id52, align 8, !dbg !6070
  call void @print_codecs_for_id(i32 %42, i32 1), !dbg !6071
  br label %while.end54, !dbg !6072

if.end53:                                         ; preds = %while.body46
  br label %while.cond42, !dbg !6073, !llvm.loop !6074

while.end54:                                      ; preds = %if.then51, %while.cond42
  %call55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !6075
  br label %for.inc, !dbg !6076

for.inc:                                          ; preds = %while.end54, %if.then
  %43 = load i32, i32* %i, align 4, !dbg !6077
  %inc = add i32 %43, 1, !dbg !6077
  store i32 %inc, i32* %i, align 4, !dbg !6077
  br label %for.cond, !dbg !6079, !llvm.loop !6080

for.end:                                          ; preds = %for.cond
  %44 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %codecs, align 8, !dbg !6082
  %45 = bitcast %struct.AVCodecDescriptor** %44 to i8*, !dbg !6082
  call void @av_free(i8* %45), !dbg !6083
  ret i32 0, !dbg !6084
}

; Function Attrs: nounwind uwtable
define internal i32 @get_codecs_sorted(%struct.AVCodecDescriptor*** %rcodecs) #0 !dbg !6085 {
entry:
  %rcodecs.addr = alloca %struct.AVCodecDescriptor***, align 8
  %desc = alloca %struct.AVCodecDescriptor*, align 8
  %codecs = alloca %struct.AVCodecDescriptor**, align 8
  %nb_codecs = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.AVCodecDescriptor*** %rcodecs, %struct.AVCodecDescriptor**** %rcodecs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVCodecDescriptor**** %rcodecs.addr, metadata !6089, metadata !1512), !dbg !6090
  call void @llvm.dbg.declare(metadata %struct.AVCodecDescriptor** %desc, metadata !6091, metadata !1512), !dbg !6092
  store %struct.AVCodecDescriptor* null, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6092
  call void @llvm.dbg.declare(metadata %struct.AVCodecDescriptor*** %codecs, metadata !6093, metadata !1512), !dbg !6094
  call void @llvm.dbg.declare(metadata i32* %nb_codecs, metadata !6095, metadata !1512), !dbg !6096
  store i32 0, i32* %nb_codecs, align 4, !dbg !6096
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6097, metadata !1512), !dbg !6098
  store i32 0, i32* %i, align 4, !dbg !6098
  br label %while.cond, !dbg !6099

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6100
  %call = call %struct.AVCodecDescriptor* @avcodec_descriptor_next(%struct.AVCodecDescriptor* %0), !dbg !6102
  store %struct.AVCodecDescriptor* %call, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6103
  %tobool = icmp ne %struct.AVCodecDescriptor* %call, null, !dbg !6104
  br i1 %tobool, label %while.body, label %while.end, !dbg !6104

while.body:                                       ; preds = %while.cond
  %1 = load i32, i32* %nb_codecs, align 4, !dbg !6105
  %inc = add i32 %1, 1, !dbg !6105
  store i32 %inc, i32* %nb_codecs, align 4, !dbg !6105
  br label %while.cond, !dbg !6106, !llvm.loop !6108

while.end:                                        ; preds = %while.cond
  %2 = load i32, i32* %nb_codecs, align 4, !dbg !6109
  %conv = zext i32 %2 to i64, !dbg !6109
  %call1 = call noalias i8* @av_calloc(i64 %conv, i64 8), !dbg !6111
  %3 = bitcast i8* %call1 to %struct.AVCodecDescriptor**, !dbg !6111
  store %struct.AVCodecDescriptor** %3, %struct.AVCodecDescriptor*** %codecs, align 8, !dbg !6112
  %tobool2 = icmp ne %struct.AVCodecDescriptor** %3, null, !dbg !6112
  br i1 %tobool2, label %if.end, label %if.then, !dbg !6113

if.then:                                          ; preds = %while.end
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.165, i32 0, i32 0)), !dbg !6114
  call void @exit_program(i32 1) #13, !dbg !6116
  unreachable, !dbg !6116

if.end:                                           ; preds = %while.end
  store %struct.AVCodecDescriptor* null, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6117
  br label %while.cond3, !dbg !6118

while.cond3:                                      ; preds = %while.body6, %if.end
  %4 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6119
  %call4 = call %struct.AVCodecDescriptor* @avcodec_descriptor_next(%struct.AVCodecDescriptor* %4), !dbg !6120
  store %struct.AVCodecDescriptor* %call4, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6121
  %tobool5 = icmp ne %struct.AVCodecDescriptor* %call4, null, !dbg !6122
  br i1 %tobool5, label %while.body6, label %while.end8, !dbg !6122

while.body6:                                      ; preds = %while.cond3
  %5 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6123
  %6 = load i32, i32* %i, align 4, !dbg !6124
  %inc7 = add i32 %6, 1, !dbg !6124
  store i32 %inc7, i32* %i, align 4, !dbg !6124
  %idxprom = zext i32 %6 to i64, !dbg !6125
  %7 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %codecs, align 8, !dbg !6125
  %arrayidx = getelementptr inbounds %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %7, i64 %idxprom, !dbg !6125
  store %struct.AVCodecDescriptor* %5, %struct.AVCodecDescriptor** %arrayidx, align 8, !dbg !6126
  br label %while.cond3, !dbg !6127, !llvm.loop !6128

while.end8:                                       ; preds = %while.cond3
  br label %do.body, !dbg !6129, !llvm.loop !6130

do.body:                                          ; preds = %while.end8
  %8 = load i32, i32* %i, align 4, !dbg !6131
  %9 = load i32, i32* %nb_codecs, align 4, !dbg !6135
  %cmp = icmp eq i32 %8, %9, !dbg !6136
  br i1 %cmp, label %if.end11, label %if.then10, !dbg !6137

if.then10:                                        ; preds = %do.body
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.166, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.61, i32 0, i32 0), i32 1531), !dbg !6138
  call void @abort() #12, !dbg !6141
  unreachable, !dbg !6143

if.end11:                                         ; preds = %do.body
  br label %do.end, !dbg !6144

do.end:                                           ; preds = %if.end11
  %10 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %codecs, align 8, !dbg !6146
  %11 = bitcast %struct.AVCodecDescriptor** %10 to i8*, !dbg !6146
  %12 = load i32, i32* %nb_codecs, align 4, !dbg !6147
  %conv12 = zext i32 %12 to i64, !dbg !6147
  call void @qsort(i8* %11, i64 %conv12, i64 8, i32 (i8*, i8*)* @compare_codec_desc), !dbg !6148
  %13 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %codecs, align 8, !dbg !6149
  %14 = load %struct.AVCodecDescriptor***, %struct.AVCodecDescriptor**** %rcodecs.addr, align 8, !dbg !6150
  store %struct.AVCodecDescriptor** %13, %struct.AVCodecDescriptor*** %14, align 8, !dbg !6151
  %15 = load i32, i32* %nb_codecs, align 4, !dbg !6152
  ret i32 %15, !dbg !6153
}

; Function Attrs: nounwind readonly
declare i8* @strstr(i8*, i8*) #6

declare %struct.AVCodec* @avcodec_find_decoder(i32) #1

declare %struct.AVCodec* @avcodec_find_encoder(i32) #1

; Function Attrs: nounwind uwtable
define internal signext i8 @get_media_type_char(i32 %type) #0 !dbg !6154 {
entry:
  %retval = alloca i8, align 1
  %type.addr = alloca i32, align 4
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !6157, metadata !1512), !dbg !6158
  %0 = load i32, i32* %type.addr, align 4, !dbg !6159
  switch i32 %0, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb2
    i32 3, label %sw.bb3
    i32 4, label %sw.bb4
  ], !dbg !6160

sw.bb:                                            ; preds = %entry
  store i8 86, i8* %retval, align 1, !dbg !6161
  br label %return, !dbg !6161

sw.bb1:                                           ; preds = %entry
  store i8 65, i8* %retval, align 1, !dbg !6163
  br label %return, !dbg !6163

sw.bb2:                                           ; preds = %entry
  store i8 68, i8* %retval, align 1, !dbg !6164
  br label %return, !dbg !6164

sw.bb3:                                           ; preds = %entry
  store i8 83, i8* %retval, align 1, !dbg !6165
  br label %return, !dbg !6165

sw.bb4:                                           ; preds = %entry
  store i8 84, i8* %retval, align 1, !dbg !6166
  br label %return, !dbg !6166

sw.default:                                       ; preds = %entry
  store i8 63, i8* %retval, align 1, !dbg !6167
  br label %return, !dbg !6167

return:                                           ; preds = %sw.default, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb1, %sw.bb
  %1 = load i8, i8* %retval, align 1, !dbg !6168
  ret i8 %1, !dbg !6168
}

; Function Attrs: nounwind uwtable
define internal %struct.AVCodec* @next_codec_for_id(i32 %id, %struct.AVCodec* %prev, i32 %encoder) #0 !dbg !6169 {
entry:
  %retval = alloca %struct.AVCodec*, align 8
  %id.addr = alloca i32, align 4
  %prev.addr = alloca %struct.AVCodec*, align 8
  %encoder.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !6172, metadata !1512), !dbg !6173
  store %struct.AVCodec* %prev, %struct.AVCodec** %prev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVCodec** %prev.addr, metadata !6174, metadata !1512), !dbg !6175
  store i32 %encoder, i32* %encoder.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %encoder.addr, metadata !6176, metadata !1512), !dbg !6177
  br label %while.cond, !dbg !6178

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.AVCodec*, %struct.AVCodec** %prev.addr, align 8, !dbg !6179
  %call = call %struct.AVCodec* @av_codec_next(%struct.AVCodec* %0), !dbg !6181
  store %struct.AVCodec* %call, %struct.AVCodec** %prev.addr, align 8, !dbg !6182
  %tobool = icmp ne %struct.AVCodec* %call, null, !dbg !6183
  br i1 %tobool, label %while.body, label %while.end, !dbg !6183

while.body:                                       ; preds = %while.cond
  %1 = load %struct.AVCodec*, %struct.AVCodec** %prev.addr, align 8, !dbg !6184
  %id1 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %1, i32 0, i32 3, !dbg !6187
  %2 = load i32, i32* %id1, align 4, !dbg !6187
  %3 = load i32, i32* %id.addr, align 4, !dbg !6188
  %cmp = icmp eq i32 %2, %3, !dbg !6189
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6190

land.lhs.true:                                    ; preds = %while.body
  %4 = load i32, i32* %encoder.addr, align 4, !dbg !6191
  %tobool2 = icmp ne i32 %4, 0, !dbg !6191
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !6192

cond.true:                                        ; preds = %land.lhs.true
  %5 = load %struct.AVCodec*, %struct.AVCodec** %prev.addr, align 8, !dbg !6194
  %call3 = call i32 @av_codec_is_encoder(%struct.AVCodec* %5), !dbg !6196
  %tobool4 = icmp ne i32 %call3, 0, !dbg !6196
  br i1 %tobool4, label %if.then, label %if.end, !dbg !6197

cond.false:                                       ; preds = %land.lhs.true
  %6 = load %struct.AVCodec*, %struct.AVCodec** %prev.addr, align 8, !dbg !6198
  %call5 = call i32 @av_codec_is_decoder(%struct.AVCodec* %6), !dbg !6200
  %tobool6 = icmp ne i32 %call5, 0, !dbg !6200
  br i1 %tobool6, label %if.then, label %if.end, !dbg !6201

if.then:                                          ; preds = %cond.false, %cond.true
  %7 = load %struct.AVCodec*, %struct.AVCodec** %prev.addr, align 8, !dbg !6203
  store %struct.AVCodec* %7, %struct.AVCodec** %retval, align 8, !dbg !6204
  br label %return, !dbg !6204

if.end:                                           ; preds = %cond.false, %cond.true, %while.body
  br label %while.cond, !dbg !6205, !llvm.loop !6207

while.end:                                        ; preds = %while.cond
  store %struct.AVCodec* null, %struct.AVCodec** %retval, align 8, !dbg !6208
  br label %return, !dbg !6208

return:                                           ; preds = %while.end, %if.then
  %8 = load %struct.AVCodec*, %struct.AVCodec** %retval, align 8, !dbg !6209
  ret %struct.AVCodec* %8, !dbg !6209
}

; Function Attrs: nounwind uwtable
define internal void @print_codecs_for_id(i32 %id, i32 %encoder) #0 !dbg !6210 {
entry:
  %id.addr = alloca i32, align 4
  %encoder.addr = alloca i32, align 4
  %codec = alloca %struct.AVCodec*, align 8
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !6213, metadata !1512), !dbg !6214
  store i32 %encoder, i32* %encoder.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %encoder.addr, metadata !6215, metadata !1512), !dbg !6216
  call void @llvm.dbg.declare(metadata %struct.AVCodec** %codec, metadata !6217, metadata !1512), !dbg !6218
  store %struct.AVCodec* null, %struct.AVCodec** %codec, align 8, !dbg !6218
  %0 = load i32, i32* %encoder.addr, align 4, !dbg !6219
  %tobool = icmp ne i32 %0, 0, !dbg !6219
  %cond = select i1 %tobool, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.168, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.169, i32 0, i32 0), !dbg !6219
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.167, i32 0, i32 0), i8* %cond), !dbg !6220
  br label %while.cond, !dbg !6221

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %id.addr, align 4, !dbg !6222
  %2 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6224
  %3 = load i32, i32* %encoder.addr, align 4, !dbg !6225
  %call1 = call %struct.AVCodec* @next_codec_for_id(i32 %1, %struct.AVCodec* %2, i32 %3), !dbg !6226
  store %struct.AVCodec* %call1, %struct.AVCodec** %codec, align 8, !dbg !6227
  %tobool2 = icmp ne %struct.AVCodec* %call1, null, !dbg !6228
  br i1 %tobool2, label %while.body, label %while.end, !dbg !6228

while.body:                                       ; preds = %while.cond
  %4 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6229
  %name = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %4, i32 0, i32 0, !dbg !6230
  %5 = load i8*, i8** %name, align 8, !dbg !6230
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.170, i32 0, i32 0), i8* %5), !dbg !6231
  br label %while.cond, !dbg !6232, !llvm.loop !6234

while.end:                                        ; preds = %while.cond
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.171, i32 0, i32 0)), !dbg !6235
  ret void, !dbg !6236
}

declare void @av_free(i8*) #1

; Function Attrs: nounwind uwtable
define i32 @show_decoders(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !6237 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !6238, metadata !1512), !dbg !6239
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !6240, metadata !1512), !dbg !6241
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !6242, metadata !1512), !dbg !6243
  call void @print_codecs(i32 0), !dbg !6244
  ret i32 0, !dbg !6245
}

; Function Attrs: nounwind uwtable
define internal void @print_codecs(i32 %encoder) #0 !dbg !6246 {
entry:
  %encoder.addr = alloca i32, align 4
  %codecs = alloca %struct.AVCodecDescriptor**, align 8
  %i = alloca i32, align 4
  %nb_codecs = alloca i32, align 4
  %desc = alloca %struct.AVCodecDescriptor*, align 8
  %codec = alloca %struct.AVCodec*, align 8
  store i32 %encoder, i32* %encoder.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %encoder.addr, metadata !6247, metadata !1512), !dbg !6248
  call void @llvm.dbg.declare(metadata %struct.AVCodecDescriptor*** %codecs, metadata !6249, metadata !1512), !dbg !6250
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6251, metadata !1512), !dbg !6252
  call void @llvm.dbg.declare(metadata i32* %nb_codecs, metadata !6253, metadata !1512), !dbg !6254
  %call = call i32 @get_codecs_sorted(%struct.AVCodecDescriptor*** %codecs), !dbg !6255
  store i32 %call, i32* %nb_codecs, align 4, !dbg !6254
  %0 = load i32, i32* %encoder.addr, align 4, !dbg !6256
  %tobool = icmp ne i32 %0, 0, !dbg !6256
  %cond = select i1 %tobool, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.173, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.174, i32 0, i32 0), !dbg !6256
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([250 x i8], [250 x i8]* @.str.172, i32 0, i32 0), i8* %cond), !dbg !6257
  store i32 0, i32* %i, align 4, !dbg !6258
  br label %for.cond, !dbg !6260

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !6261
  %2 = load i32, i32* %nb_codecs, align 4, !dbg !6264
  %cmp = icmp ult i32 %1, %2, !dbg !6265
  br i1 %cmp, label %for.body, label %for.end, !dbg !6266

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.AVCodecDescriptor** %desc, metadata !6267, metadata !1512), !dbg !6269
  %3 = load i32, i32* %i, align 4, !dbg !6270
  %idxprom = zext i32 %3 to i64, !dbg !6271
  %4 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %codecs, align 8, !dbg !6271
  %arrayidx = getelementptr inbounds %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %4, i64 %idxprom, !dbg !6271
  %5 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %arrayidx, align 8, !dbg !6271
  store %struct.AVCodecDescriptor* %5, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6269
  call void @llvm.dbg.declare(metadata %struct.AVCodec** %codec, metadata !6272, metadata !1512), !dbg !6273
  store %struct.AVCodec* null, %struct.AVCodec** %codec, align 8, !dbg !6273
  br label %while.cond, !dbg !6274

while.cond:                                       ; preds = %if.end, %for.body
  %6 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6275
  %id = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %6, i32 0, i32 0, !dbg !6277
  %7 = load i32, i32* %id, align 8, !dbg !6277
  %8 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6278
  %9 = load i32, i32* %encoder.addr, align 4, !dbg !6279
  %call2 = call %struct.AVCodec* @next_codec_for_id(i32 %7, %struct.AVCodec* %8, i32 %9), !dbg !6280
  store %struct.AVCodec* %call2, %struct.AVCodec** %codec, align 8, !dbg !6281
  %tobool3 = icmp ne %struct.AVCodec* %call2, null, !dbg !6282
  br i1 %tobool3, label %while.body, label %while.end, !dbg !6282

while.body:                                       ; preds = %while.cond
  %10 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6283
  %type = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %10, i32 0, i32 1, !dbg !6285
  %11 = load i32, i32* %type, align 4, !dbg !6285
  %call4 = call signext i8 @get_media_type_char(i32 %11), !dbg !6286
  %conv = sext i8 %call4 to i32, !dbg !6286
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.175, i32 0, i32 0), i32 %conv), !dbg !6287
  %12 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6289
  %capabilities = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %12, i32 0, i32 4, !dbg !6290
  %13 = load i32, i32* %capabilities, align 8, !dbg !6290
  %and = and i32 %13, 4096, !dbg !6291
  %tobool6 = icmp ne i32 %and, 0, !dbg !6292
  %cond7 = select i1 %tobool6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.176, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i32 0, i32 0), !dbg !6292
  %call8 = call i32 (i8*, ...) @printf(i8* %cond7), !dbg !6293
  %14 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6294
  %capabilities9 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %14, i32 0, i32 4, !dbg !6295
  %15 = load i32, i32* %capabilities9, align 8, !dbg !6295
  %and10 = and i32 %15, 8192, !dbg !6296
  %tobool11 = icmp ne i32 %and10, 0, !dbg !6297
  %cond12 = select i1 %tobool11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i32 0, i32 0), !dbg !6297
  %call13 = call i32 (i8*, ...) @printf(i8* %cond12), !dbg !6298
  %16 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6299
  %capabilities14 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %16, i32 0, i32 4, !dbg !6300
  %17 = load i32, i32* %capabilities14, align 8, !dbg !6300
  %and15 = and i32 %17, 512, !dbg !6301
  %tobool16 = icmp ne i32 %and15, 0, !dbg !6302
  %cond17 = select i1 %tobool16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.177, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i32 0, i32 0), !dbg !6302
  %call18 = call i32 (i8*, ...) @printf(i8* %cond17), !dbg !6303
  %18 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6304
  %capabilities19 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %18, i32 0, i32 4, !dbg !6305
  %19 = load i32, i32* %capabilities19, align 8, !dbg !6305
  %and20 = and i32 %19, 1, !dbg !6306
  %tobool21 = icmp ne i32 %and20, 0, !dbg !6307
  %cond22 = select i1 %tobool21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.178, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i32 0, i32 0), !dbg !6307
  %call23 = call i32 (i8*, ...) @printf(i8* %cond22), !dbg !6308
  %20 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6309
  %capabilities24 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %20, i32 0, i32 4, !dbg !6310
  %21 = load i32, i32* %capabilities24, align 8, !dbg !6310
  %and25 = and i32 %21, 2, !dbg !6311
  %tobool26 = icmp ne i32 %and25, 0, !dbg !6312
  %cond27 = select i1 %tobool26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.74, i32 0, i32 0), !dbg !6312
  %call28 = call i32 (i8*, ...) @printf(i8* %cond27), !dbg !6313
  %22 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6314
  %name = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %22, i32 0, i32 0, !dbg !6315
  %23 = load i8*, i8** %name, align 8, !dbg !6315
  %24 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6316
  %long_name = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %24, i32 0, i32 1, !dbg !6317
  %25 = load i8*, i8** %long_name, align 8, !dbg !6317
  %tobool29 = icmp ne i8* %25, null, !dbg !6316
  br i1 %tobool29, label %cond.true, label %cond.false, !dbg !6316

cond.true:                                        ; preds = %while.body
  %26 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6318
  %long_name30 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %26, i32 0, i32 1, !dbg !6319
  %27 = load i8*, i8** %long_name30, align 8, !dbg !6319
  br label %cond.end, !dbg !6320

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !6321

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond31 = phi i8* [ %27, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), %cond.false ], !dbg !6323
  %call32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.80, i32 0, i32 0), i8* %23, i8* %cond31), !dbg !6325
  %28 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6326
  %name33 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %28, i32 0, i32 0, !dbg !6328
  %29 = load i8*, i8** %name33, align 8, !dbg !6328
  %30 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6329
  %name34 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %30, i32 0, i32 2, !dbg !6330
  %31 = load i8*, i8** %name34, align 8, !dbg !6330
  %call35 = call i32 @strcmp(i8* %29, i8* %31) #14, !dbg !6331
  %tobool36 = icmp ne i32 %call35, 0, !dbg !6331
  br i1 %tobool36, label %if.then, label %if.end, !dbg !6332

if.then:                                          ; preds = %cond.end
  %32 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6333
  %name37 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %32, i32 0, i32 2, !dbg !6334
  %33 = load i8*, i8** %name37, align 8, !dbg !6334
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.179, i32 0, i32 0), i8* %33), !dbg !6335
  br label %if.end, !dbg !6335

if.end:                                           ; preds = %if.then, %cond.end
  %call39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !6336
  br label %while.cond, !dbg !6337, !llvm.loop !6339

while.end:                                        ; preds = %while.cond
  br label %for.inc, !dbg !6340

for.inc:                                          ; preds = %while.end
  %34 = load i32, i32* %i, align 4, !dbg !6341
  %inc = add i32 %34, 1, !dbg !6341
  store i32 %inc, i32* %i, align 4, !dbg !6341
  br label %for.cond, !dbg !6343, !llvm.loop !6344

for.end:                                          ; preds = %for.cond
  %35 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %codecs, align 8, !dbg !6346
  %36 = bitcast %struct.AVCodecDescriptor** %35 to i8*, !dbg !6346
  call void @av_free(i8* %36), !dbg !6347
  ret void, !dbg !6348
}

; Function Attrs: nounwind uwtable
define i32 @show_encoders(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !6349 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !6350, metadata !1512), !dbg !6351
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !6352, metadata !1512), !dbg !6353
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !6354, metadata !1512), !dbg !6355
  call void @print_codecs(i32 1), !dbg !6356
  ret i32 0, !dbg !6357
}

; Function Attrs: nounwind uwtable
define i32 @show_bsfs(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !6358 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %bsf = alloca %struct.AVBitStreamFilter*, align 8
  %opaque = alloca i8*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !6359, metadata !1512), !dbg !6360
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !6361, metadata !1512), !dbg !6362
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !6363, metadata !1512), !dbg !6364
  call void @llvm.dbg.declare(metadata %struct.AVBitStreamFilter** %bsf, metadata !6365, metadata !1512), !dbg !6407
  store %struct.AVBitStreamFilter* null, %struct.AVBitStreamFilter** %bsf, align 8, !dbg !6407
  call void @llvm.dbg.declare(metadata i8** %opaque, metadata !6408, metadata !1512), !dbg !6409
  store i8* null, i8** %opaque, align 8, !dbg !6409
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.82, i32 0, i32 0)), !dbg !6410
  br label %while.cond, !dbg !6411

while.cond:                                       ; preds = %while.body, %entry
  %call1 = call %struct.AVBitStreamFilter* @av_bsf_iterate(i8** %opaque), !dbg !6412
  store %struct.AVBitStreamFilter* %call1, %struct.AVBitStreamFilter** %bsf, align 8, !dbg !6414
  %tobool = icmp ne %struct.AVBitStreamFilter* %call1, null, !dbg !6415
  br i1 %tobool, label %while.body, label %while.end, !dbg !6415

while.body:                                       ; preds = %while.cond
  %0 = load %struct.AVBitStreamFilter*, %struct.AVBitStreamFilter** %bsf, align 8, !dbg !6416
  %name = getelementptr inbounds %struct.AVBitStreamFilter, %struct.AVBitStreamFilter* %0, i32 0, i32 0, !dbg !6417
  %1 = load i8*, i8** %name, align 8, !dbg !6417
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* %1), !dbg !6418
  br label %while.cond, !dbg !6419, !llvm.loop !6421

while.end:                                        ; preds = %while.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !6422
  ret i32 0, !dbg !6423
}

declare %struct.AVBitStreamFilter* @av_bsf_iterate(i8**) #1

; Function Attrs: nounwind uwtable
define i32 @show_protocols(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !6424 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %opaque = alloca i8*, align 8
  %name = alloca i8*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !6425, metadata !1512), !dbg !6426
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !6427, metadata !1512), !dbg !6428
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !6429, metadata !1512), !dbg !6430
  call void @llvm.dbg.declare(metadata i8** %opaque, metadata !6431, metadata !1512), !dbg !6432
  store i8* null, i8** %opaque, align 8, !dbg !6432
  call void @llvm.dbg.declare(metadata i8** %name, metadata !6433, metadata !1512), !dbg !6434
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.83, i32 0, i32 0)), !dbg !6435
  br label %while.cond, !dbg !6436

while.cond:                                       ; preds = %while.body, %entry
  %call1 = call i8* @avio_enum_protocols(i8** %opaque, i32 0), !dbg !6437
  store i8* %call1, i8** %name, align 8, !dbg !6439
  %tobool = icmp ne i8* %call1, null, !dbg !6440
  br i1 %tobool, label %while.body, label %while.end, !dbg !6440

while.body:                                       ; preds = %while.cond
  %0 = load i8*, i8** %name, align 8, !dbg !6441
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.84, i32 0, i32 0), i8* %0), !dbg !6442
  br label %while.cond, !dbg !6443, !llvm.loop !6445

while.end:                                        ; preds = %while.cond
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.85, i32 0, i32 0)), !dbg !6446
  br label %while.cond4, !dbg !6447

while.cond4:                                      ; preds = %while.body7, %while.end
  %call5 = call i8* @avio_enum_protocols(i8** %opaque, i32 1), !dbg !6448
  store i8* %call5, i8** %name, align 8, !dbg !6449
  %tobool6 = icmp ne i8* %call5, null, !dbg !6450
  br i1 %tobool6, label %while.body7, label %while.end9, !dbg !6450

while.body7:                                      ; preds = %while.cond4
  %1 = load i8*, i8** %name, align 8, !dbg !6451
  %call8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.84, i32 0, i32 0), i8* %1), !dbg !6452
  br label %while.cond4, !dbg !6453, !llvm.loop !6454

while.end9:                                       ; preds = %while.cond4
  ret i32 0, !dbg !6455
}

declare i8* @avio_enum_protocols(i8**, i32) #1

; Function Attrs: nounwind uwtable
define i32 @show_filters(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !6456 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %filter = alloca %struct.AVFilter*, align 8
  %descr = alloca [64 x i8], align 16
  %descr_cur = alloca i8*, align 8
  %opaque = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %pad = alloca %struct.AVFilterPad*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !6457, metadata !1512), !dbg !6458
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !6459, metadata !1512), !dbg !6460
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !6461, metadata !1512), !dbg !6462
  call void @llvm.dbg.declare(metadata %struct.AVFilter** %filter, metadata !6463, metadata !1512), !dbg !6464
  store %struct.AVFilter* null, %struct.AVFilter** %filter, align 8, !dbg !6464
  call void @llvm.dbg.declare(metadata [64 x i8]* %descr, metadata !6465, metadata !1512), !dbg !6466
  call void @llvm.dbg.declare(metadata i8** %descr_cur, metadata !6467, metadata !1512), !dbg !6468
  call void @llvm.dbg.declare(metadata i8** %opaque, metadata !6469, metadata !1512), !dbg !6470
  store i8* null, i8** %opaque, align 8, !dbg !6470
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6471, metadata !1512), !dbg !6472
  call void @llvm.dbg.declare(metadata i32* %j, metadata !6473, metadata !1512), !dbg !6474
  call void @llvm.dbg.declare(metadata %struct.AVFilterPad** %pad, metadata !6475, metadata !1512), !dbg !6476
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([210 x i8], [210 x i8]* @.str.86, i32 0, i32 0)), !dbg !6477
  br label %while.cond, !dbg !6478

while.cond:                                       ; preds = %for.end33, %entry
  %call1 = call %struct.AVFilter* @av_filter_iterate(i8** %opaque), !dbg !6479
  store %struct.AVFilter* %call1, %struct.AVFilter** %filter, align 8, !dbg !6481
  %tobool = icmp ne %struct.AVFilter* %call1, null, !dbg !6482
  br i1 %tobool, label %while.body, label %while.end, !dbg !6482

while.body:                                       ; preds = %while.cond
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %descr, i32 0, i32 0, !dbg !6483
  store i8* %arraydecay, i8** %descr_cur, align 8, !dbg !6485
  store i32 0, i32* %i, align 4, !dbg !6486
  br label %for.cond, !dbg !6488

for.cond:                                         ; preds = %for.inc31, %while.body
  %0 = load i32, i32* %i, align 4, !dbg !6489
  %cmp = icmp slt i32 %0, 2, !dbg !6492
  br i1 %cmp, label %for.body, label %for.end33, !dbg !6493

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !6494
  %tobool2 = icmp ne i32 %1, 0, !dbg !6494
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6497

if.then:                                          ; preds = %for.body
  %2 = load i8*, i8** %descr_cur, align 8, !dbg !6498
  %incdec.ptr = getelementptr inbounds i8, i8* %2, i32 1, !dbg !6498
  store i8* %incdec.ptr, i8** %descr_cur, align 8, !dbg !6498
  store i8 45, i8* %2, align 1, !dbg !6500
  %3 = load i8*, i8** %descr_cur, align 8, !dbg !6501
  %incdec.ptr3 = getelementptr inbounds i8, i8* %3, i32 1, !dbg !6501
  store i8* %incdec.ptr3, i8** %descr_cur, align 8, !dbg !6501
  store i8 62, i8* %3, align 1, !dbg !6502
  br label %if.end, !dbg !6503

if.end:                                           ; preds = %if.then, %for.body
  %4 = load i32, i32* %i, align 4, !dbg !6504
  %tobool4 = icmp ne i32 %4, 0, !dbg !6504
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !6504

cond.true:                                        ; preds = %if.end
  %5 = load %struct.AVFilter*, %struct.AVFilter** %filter, align 8, !dbg !6505
  %outputs = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %5, i32 0, i32 3, !dbg !6507
  %6 = load %struct.AVFilterPad*, %struct.AVFilterPad** %outputs, align 8, !dbg !6507
  br label %cond.end, !dbg !6508

cond.false:                                       ; preds = %if.end
  %7 = load %struct.AVFilter*, %struct.AVFilter** %filter, align 8, !dbg !6509
  %inputs = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %7, i32 0, i32 2, !dbg !6511
  %8 = load %struct.AVFilterPad*, %struct.AVFilterPad** %inputs, align 8, !dbg !6511
  br label %cond.end, !dbg !6512

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.AVFilterPad* [ %6, %cond.true ], [ %8, %cond.false ], !dbg !6513
  store %struct.AVFilterPad* %cond, %struct.AVFilterPad** %pad, align 8, !dbg !6515
  store i32 0, i32* %j, align 4, !dbg !6516
  br label %for.cond5, !dbg !6518

for.cond5:                                        ; preds = %for.inc, %cond.end
  %9 = load %struct.AVFilterPad*, %struct.AVFilterPad** %pad, align 8, !dbg !6519
  %tobool6 = icmp ne %struct.AVFilterPad* %9, null, !dbg !6519
  br i1 %tobool6, label %land.rhs, label %land.end, !dbg !6522

land.rhs:                                         ; preds = %for.cond5
  %10 = load %struct.AVFilterPad*, %struct.AVFilterPad** %pad, align 8, !dbg !6523
  %11 = load i32, i32* %j, align 4, !dbg !6525
  %call7 = call i8* @avfilter_pad_get_name(%struct.AVFilterPad* %10, i32 %11), !dbg !6526
  %tobool8 = icmp ne i8* %call7, null, !dbg !6527
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond5
  %12 = phi i1 [ false, %for.cond5 ], [ %tobool8, %land.rhs ]
  br i1 %12, label %for.body9, label %for.end, !dbg !6528

for.body9:                                        ; preds = %land.end
  %13 = load i8*, i8** %descr_cur, align 8, !dbg !6530
  %arraydecay10 = getelementptr inbounds [64 x i8], [64 x i8]* %descr, i32 0, i32 0, !dbg !6533
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay10, i64 64, !dbg !6534
  %add.ptr11 = getelementptr inbounds i8, i8* %add.ptr, i64 -4, !dbg !6535
  %cmp12 = icmp uge i8* %13, %add.ptr11, !dbg !6536
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !6537

if.then13:                                        ; preds = %for.body9
  br label %for.end, !dbg !6538

if.end14:                                         ; preds = %for.body9
  %14 = load %struct.AVFilterPad*, %struct.AVFilterPad** %pad, align 8, !dbg !6539
  %15 = load i32, i32* %j, align 4, !dbg !6540
  %call15 = call i32 @avfilter_pad_get_type(%struct.AVFilterPad* %14, i32 %15), !dbg !6541
  %call16 = call signext i8 @get_media_type_char(i32 %call15), !dbg !6542
  %16 = load i8*, i8** %descr_cur, align 8, !dbg !6544
  %incdec.ptr17 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !6544
  store i8* %incdec.ptr17, i8** %descr_cur, align 8, !dbg !6544
  store i8 %call16, i8* %16, align 1, !dbg !6545
  br label %for.inc, !dbg !6546

for.inc:                                          ; preds = %if.end14
  %17 = load i32, i32* %j, align 4, !dbg !6547
  %inc = add nsw i32 %17, 1, !dbg !6547
  store i32 %inc, i32* %j, align 4, !dbg !6547
  br label %for.cond5, !dbg !6549, !llvm.loop !6550

for.end:                                          ; preds = %if.then13, %land.end
  %18 = load i32, i32* %j, align 4, !dbg !6552
  %tobool18 = icmp ne i32 %18, 0, !dbg !6552
  br i1 %tobool18, label %if.end30, label %if.then19, !dbg !6554

if.then19:                                        ; preds = %for.end
  %19 = load i32, i32* %i, align 4, !dbg !6555
  %tobool20 = icmp ne i32 %19, 0, !dbg !6555
  br i1 %tobool20, label %lor.rhs, label %land.lhs.true, !dbg !6556

land.lhs.true:                                    ; preds = %if.then19
  %20 = load %struct.AVFilter*, %struct.AVFilter** %filter, align 8, !dbg !6557
  %flags = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %20, i32 0, i32 5, !dbg !6559
  %21 = load i32, i32* %flags, align 8, !dbg !6559
  %and = and i32 %21, 1, !dbg !6560
  %tobool21 = icmp ne i32 %and, 0, !dbg !6560
  br i1 %tobool21, label %lor.end, label %lor.rhs, !dbg !6561

lor.rhs:                                          ; preds = %land.lhs.true, %if.then19
  %22 = load i32, i32* %i, align 4, !dbg !6562
  %tobool22 = icmp ne i32 %22, 0, !dbg !6562
  br i1 %tobool22, label %land.rhs23, label %land.end27, !dbg !6563

land.rhs23:                                       ; preds = %lor.rhs
  %23 = load %struct.AVFilter*, %struct.AVFilter** %filter, align 8, !dbg !6564
  %flags24 = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %23, i32 0, i32 5, !dbg !6565
  %24 = load i32, i32* %flags24, align 8, !dbg !6565
  %and25 = and i32 %24, 2, !dbg !6566
  %tobool26 = icmp ne i32 %and25, 0, !dbg !6567
  br label %land.end27

land.end27:                                       ; preds = %land.rhs23, %lor.rhs
  %25 = phi i1 [ false, %lor.rhs ], [ %tobool26, %land.rhs23 ]
  br label %lor.end, !dbg !6568

lor.end:                                          ; preds = %land.end27, %land.lhs.true
  %26 = phi i1 [ true, %land.lhs.true ], [ %25, %land.end27 ]
  %cond28 = select i1 %26, i32 78, i32 124, !dbg !6570
  %conv = trunc i32 %cond28 to i8, !dbg !6570
  %27 = load i8*, i8** %descr_cur, align 8, !dbg !6572
  %incdec.ptr29 = getelementptr inbounds i8, i8* %27, i32 1, !dbg !6572
  store i8* %incdec.ptr29, i8** %descr_cur, align 8, !dbg !6572
  store i8 %conv, i8* %27, align 1, !dbg !6573
  br label %if.end30, !dbg !6574

if.end30:                                         ; preds = %lor.end, %for.end
  br label %for.inc31, !dbg !6575

for.inc31:                                        ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !6576
  %inc32 = add nsw i32 %28, 1, !dbg !6576
  store i32 %inc32, i32* %i, align 4, !dbg !6576
  br label %for.cond, !dbg !6578, !llvm.loop !6579

for.end33:                                        ; preds = %for.cond
  %29 = load i8*, i8** %descr_cur, align 8, !dbg !6581
  store i8 0, i8* %29, align 1, !dbg !6582
  %30 = load %struct.AVFilter*, %struct.AVFilter** %filter, align 8, !dbg !6583
  %flags34 = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %30, i32 0, i32 5, !dbg !6584
  %31 = load i32, i32* %flags34, align 8, !dbg !6584
  %and35 = and i32 %31, 196608, !dbg !6585
  %tobool36 = icmp ne i32 %and35, 0, !dbg !6583
  %cond37 = select i1 %tobool36, i32 84, i32 46, !dbg !6583
  %32 = load %struct.AVFilter*, %struct.AVFilter** %filter, align 8, !dbg !6586
  %flags38 = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %32, i32 0, i32 5, !dbg !6587
  %33 = load i32, i32* %flags38, align 8, !dbg !6587
  %and39 = and i32 %33, 4, !dbg !6588
  %tobool40 = icmp ne i32 %and39, 0, !dbg !6586
  %cond41 = select i1 %tobool40, i32 83, i32 46, !dbg !6586
  %34 = load %struct.AVFilter*, %struct.AVFilter** %filter, align 8, !dbg !6589
  %process_command = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %34, i32 0, i32 14, !dbg !6590
  %35 = load i32 (%struct.AVFilterContext*, i8*, i8*, i8*, i32, i32)*, i32 (%struct.AVFilterContext*, i8*, i8*, i8*, i32, i32)** %process_command, align 8, !dbg !6590
  %tobool42 = icmp ne i32 (%struct.AVFilterContext*, i8*, i8*, i8*, i32, i32)* %35, null, !dbg !6589
  %cond43 = select i1 %tobool42, i32 67, i32 46, !dbg !6589
  %36 = load %struct.AVFilter*, %struct.AVFilter** %filter, align 8, !dbg !6591
  %name = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %36, i32 0, i32 0, !dbg !6592
  %37 = load i8*, i8** %name, align 8, !dbg !6592
  %arraydecay44 = getelementptr inbounds [64 x i8], [64 x i8]* %descr, i32 0, i32 0, !dbg !6593
  %38 = load %struct.AVFilter*, %struct.AVFilter** %filter, align 8, !dbg !6594
  %description = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %38, i32 0, i32 1, !dbg !6595
  %39 = load i8*, i8** %description, align 8, !dbg !6595
  %call45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.87, i32 0, i32 0), i32 %cond37, i32 %cond41, i32 %cond43, i8* %37, i8* %arraydecay44, i8* %39), !dbg !6596
  br label %while.cond, !dbg !6597, !llvm.loop !6599

while.end:                                        ; preds = %while.cond
  ret i32 0, !dbg !6600
}

declare %struct.AVFilter* @av_filter_iterate(i8**) #1

declare i8* @avfilter_pad_get_name(%struct.AVFilterPad*, i32) #1

declare i32 @avfilter_pad_get_type(%struct.AVFilterPad*, i32) #1

; Function Attrs: nounwind uwtable
define i32 @show_colors(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !6601 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %name = alloca i8*, align 8
  %rgb = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !6602, metadata !1512), !dbg !6603
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !6604, metadata !1512), !dbg !6605
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !6606, metadata !1512), !dbg !6607
  call void @llvm.dbg.declare(metadata i8** %name, metadata !6608, metadata !1512), !dbg !6609
  call void @llvm.dbg.declare(metadata i8** %rgb, metadata !6610, metadata !1512), !dbg !6611
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6612, metadata !1512), !dbg !6613
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.89, i32 0, i32 0)), !dbg !6614
  store i32 0, i32* %i, align 4, !dbg !6615
  br label %for.cond, !dbg !6617

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !6618
  %call1 = call i8* @av_get_known_color_name(i32 %0, i8** %rgb), !dbg !6621
  store i8* %call1, i8** %name, align 8, !dbg !6622
  %tobool = icmp ne i8* %call1, null, !dbg !6623
  br i1 %tobool, label %for.body, label %for.end, !dbg !6623

for.body:                                         ; preds = %for.cond
  %1 = load i8*, i8** %name, align 8, !dbg !6624
  %2 = load i8*, i8** %rgb, align 8, !dbg !6625
  %arrayidx = getelementptr inbounds i8, i8* %2, i64 0, !dbg !6625
  %3 = load i8, i8* %arrayidx, align 1, !dbg !6625
  %conv = zext i8 %3 to i32, !dbg !6625
  %4 = load i8*, i8** %rgb, align 8, !dbg !6626
  %arrayidx2 = getelementptr inbounds i8, i8* %4, i64 1, !dbg !6626
  %5 = load i8, i8* %arrayidx2, align 1, !dbg !6626
  %conv3 = zext i8 %5 to i32, !dbg !6626
  %6 = load i8*, i8** %rgb, align 8, !dbg !6627
  %arrayidx4 = getelementptr inbounds i8, i8* %6, i64 2, !dbg !6627
  %7 = load i8, i8* %arrayidx4, align 1, !dbg !6627
  %conv5 = zext i8 %7 to i32, !dbg !6627
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.90, i32 0, i32 0), i8* %1, i32 %conv, i32 %conv3, i32 %conv5), !dbg !6628
  br label %for.inc, !dbg !6628

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !6629
  %inc = add nsw i32 %8, 1, !dbg !6629
  store i32 %inc, i32* %i, align 4, !dbg !6629
  br label %for.cond, !dbg !6631, !llvm.loop !6632

for.end:                                          ; preds = %for.cond
  ret i32 0, !dbg !6634
}

declare i8* @av_get_known_color_name(i32, i8**) #1

; Function Attrs: nounwind uwtable
define i32 @show_pix_fmts(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !6635 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %pix_desc = alloca %struct.AVPixFmtDescriptor*, align 8
  %pix_fmt = alloca i32, align 4
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !6636, metadata !1512), !dbg !6637
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !6638, metadata !1512), !dbg !6639
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !6640, metadata !1512), !dbg !6641
  call void @llvm.dbg.declare(metadata %struct.AVPixFmtDescriptor** %pix_desc, metadata !6642, metadata !1512), !dbg !6668
  store %struct.AVPixFmtDescriptor* null, %struct.AVPixFmtDescriptor** %pix_desc, align 8, !dbg !6668
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([252 x i8], [252 x i8]* @.str.91, i32 0, i32 0)), !dbg !6669
  br label %while.cond, !dbg !6670

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.AVPixFmtDescriptor*, %struct.AVPixFmtDescriptor** %pix_desc, align 8, !dbg !6671
  %call1 = call %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_next(%struct.AVPixFmtDescriptor* %0), !dbg !6673
  store %struct.AVPixFmtDescriptor* %call1, %struct.AVPixFmtDescriptor** %pix_desc, align 8, !dbg !6674
  %tobool = icmp ne %struct.AVPixFmtDescriptor* %call1, null, !dbg !6675
  br i1 %tobool, label %while.body, label %while.end, !dbg !6675

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %pix_fmt, metadata !6676, metadata !1512), !dbg !6678
  %1 = load %struct.AVPixFmtDescriptor*, %struct.AVPixFmtDescriptor** %pix_desc, align 8, !dbg !6679
  %call2 = call i32 @av_pix_fmt_desc_get_id(%struct.AVPixFmtDescriptor* %1), !dbg !6680
  store i32 %call2, i32* %pix_fmt, align 4, !dbg !6678
  %2 = load i32, i32* %pix_fmt, align 4, !dbg !6681
  %call3 = call i32 @sws_isSupportedInput(i32 %2), !dbg !6682
  %tobool4 = icmp ne i32 %call3, 0, !dbg !6682
  %cond = select i1 %tobool4, i32 73, i32 46, !dbg !6682
  %3 = load i32, i32* %pix_fmt, align 4, !dbg !6683
  %call5 = call i32 @sws_isSupportedOutput(i32 %3), !dbg !6684
  %tobool6 = icmp ne i32 %call5, 0, !dbg !6684
  %cond7 = select i1 %tobool6, i32 79, i32 46, !dbg !6684
  %4 = load %struct.AVPixFmtDescriptor*, %struct.AVPixFmtDescriptor** %pix_desc, align 8, !dbg !6685
  %flags = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %4, i32 0, i32 4, !dbg !6686
  %5 = load i64, i64* %flags, align 8, !dbg !6686
  %and = and i64 %5, 8, !dbg !6687
  %tobool8 = icmp ne i64 %and, 0, !dbg !6685
  %cond9 = select i1 %tobool8, i32 72, i32 46, !dbg !6685
  %6 = load %struct.AVPixFmtDescriptor*, %struct.AVPixFmtDescriptor** %pix_desc, align 8, !dbg !6688
  %flags10 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %6, i32 0, i32 4, !dbg !6689
  %7 = load i64, i64* %flags10, align 8, !dbg !6689
  %and11 = and i64 %7, 2, !dbg !6690
  %tobool12 = icmp ne i64 %and11, 0, !dbg !6688
  %cond13 = select i1 %tobool12, i32 80, i32 46, !dbg !6688
  %8 = load %struct.AVPixFmtDescriptor*, %struct.AVPixFmtDescriptor** %pix_desc, align 8, !dbg !6691
  %flags14 = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %8, i32 0, i32 4, !dbg !6692
  %9 = load i64, i64* %flags14, align 8, !dbg !6692
  %and15 = and i64 %9, 4, !dbg !6693
  %tobool16 = icmp ne i64 %and15, 0, !dbg !6691
  %cond17 = select i1 %tobool16, i32 66, i32 46, !dbg !6691
  %10 = load %struct.AVPixFmtDescriptor*, %struct.AVPixFmtDescriptor** %pix_desc, align 8, !dbg !6694
  %name = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %10, i32 0, i32 0, !dbg !6695
  %11 = load i8*, i8** %name, align 8, !dbg !6695
  %12 = load %struct.AVPixFmtDescriptor*, %struct.AVPixFmtDescriptor** %pix_desc, align 8, !dbg !6696
  %nb_components = getelementptr inbounds %struct.AVPixFmtDescriptor, %struct.AVPixFmtDescriptor* %12, i32 0, i32 1, !dbg !6697
  %13 = load i8, i8* %nb_components, align 8, !dbg !6697
  %conv = zext i8 %13 to i32, !dbg !6696
  %14 = load %struct.AVPixFmtDescriptor*, %struct.AVPixFmtDescriptor** %pix_desc, align 8, !dbg !6698
  %call18 = call i32 @av_get_bits_per_pixel(%struct.AVPixFmtDescriptor* %14), !dbg !6699
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.92, i32 0, i32 0), i32 %cond, i32 %cond7, i32 %cond9, i32 %cond13, i32 %cond17, i8* %11, i32 %conv, i32 %call18), !dbg !6700
  br label %while.cond, !dbg !6701, !llvm.loop !6703

while.end:                                        ; preds = %while.cond
  ret i32 0, !dbg !6704
}

declare %struct.AVPixFmtDescriptor* @av_pix_fmt_desc_next(%struct.AVPixFmtDescriptor*) #1

declare i32 @av_pix_fmt_desc_get_id(%struct.AVPixFmtDescriptor*) #1

declare i32 @sws_isSupportedInput(i32) #1

declare i32 @sws_isSupportedOutput(i32) #1

declare i32 @av_get_bits_per_pixel(%struct.AVPixFmtDescriptor*) #1

; Function Attrs: nounwind uwtable
define i32 @show_layouts(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !6705 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %layout = alloca i64, align 8
  %j = alloca i64, align 8
  %name = alloca i8*, align 8
  %descr = alloca i8*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !6706, metadata !1512), !dbg !6707
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !6708, metadata !1512), !dbg !6709
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !6710, metadata !1512), !dbg !6711
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6712, metadata !1512), !dbg !6713
  store i32 0, i32* %i, align 4, !dbg !6713
  call void @llvm.dbg.declare(metadata i64* %layout, metadata !6714, metadata !1512), !dbg !6715
  call void @llvm.dbg.declare(metadata i64* %j, metadata !6716, metadata !1512), !dbg !6717
  call void @llvm.dbg.declare(metadata i8** %name, metadata !6718, metadata !1512), !dbg !6719
  call void @llvm.dbg.declare(metadata i8** %descr, metadata !6720, metadata !1512), !dbg !6721
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.93, i32 0, i32 0)), !dbg !6722
  store i32 0, i32* %i, align 4, !dbg !6723
  br label %for.cond, !dbg !6725

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !6726
  %cmp = icmp slt i32 %0, 63, !dbg !6729
  br i1 %cmp, label %for.body, label %for.end, !dbg !6730

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !6731
  %sh_prom = zext i32 %1 to i64, !dbg !6733
  %shl = shl i64 1, %sh_prom, !dbg !6733
  %call1 = call i8* @av_get_channel_name(i64 %shl), !dbg !6734
  store i8* %call1, i8** %name, align 8, !dbg !6735
  %2 = load i8*, i8** %name, align 8, !dbg !6736
  %tobool = icmp ne i8* %2, null, !dbg !6736
  br i1 %tobool, label %if.end, label %if.then, !dbg !6738

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !6739

if.end:                                           ; preds = %for.body
  %3 = load i32, i32* %i, align 4, !dbg !6740
  %sh_prom2 = zext i32 %3 to i64, !dbg !6741
  %shl3 = shl i64 1, %sh_prom2, !dbg !6741
  %call4 = call i8* @av_get_channel_description(i64 %shl3), !dbg !6742
  store i8* %call4, i8** %descr, align 8, !dbg !6743
  %4 = load i8*, i8** %name, align 8, !dbg !6744
  %5 = load i8*, i8** %descr, align 8, !dbg !6745
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94, i32 0, i32 0), i8* %4, i8* %5), !dbg !6746
  br label %for.inc, !dbg !6747

for.inc:                                          ; preds = %if.end, %if.then
  %6 = load i32, i32* %i, align 4, !dbg !6748
  %inc = add nsw i32 %6, 1, !dbg !6748
  store i32 %inc, i32* %i, align 4, !dbg !6748
  br label %for.cond, !dbg !6750, !llvm.loop !6751

for.end:                                          ; preds = %for.cond
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.95, i32 0, i32 0)), !dbg !6753
  store i32 0, i32* %i, align 4, !dbg !6754
  br label %for.cond7, !dbg !6756

for.cond7:                                        ; preds = %for.inc29, %for.end
  %7 = load i32, i32* %i, align 4, !dbg !6757
  %call8 = call i32 @av_get_standard_channel_layout(i32 %7, i64* %layout, i8** %name), !dbg !6760
  %tobool9 = icmp ne i32 %call8, 0, !dbg !6761
  %lnot = xor i1 %tobool9, true, !dbg !6761
  br i1 %lnot, label %for.body10, label %for.end31, !dbg !6762

for.body10:                                       ; preds = %for.cond7
  %8 = load i8*, i8** %name, align 8, !dbg !6763
  %tobool11 = icmp ne i8* %8, null, !dbg !6763
  br i1 %tobool11, label %if.then12, label %if.end28, !dbg !6766

if.then12:                                        ; preds = %for.body10
  %9 = load i8*, i8** %name, align 8, !dbg !6767
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.96, i32 0, i32 0), i8* %9), !dbg !6769
  store i64 1, i64* %j, align 8, !dbg !6770
  br label %for.cond14, !dbg !6772

for.cond14:                                       ; preds = %for.inc24, %if.then12
  %10 = load i64, i64* %j, align 8, !dbg !6773
  %tobool15 = icmp ne i64 %10, 0, !dbg !6776
  br i1 %tobool15, label %for.body16, label %for.end26, !dbg !6776

for.body16:                                       ; preds = %for.cond14
  %11 = load i64, i64* %layout, align 8, !dbg !6777
  %12 = load i64, i64* %j, align 8, !dbg !6779
  %and = and i64 %11, %12, !dbg !6780
  %tobool17 = icmp ne i64 %and, 0, !dbg !6780
  br i1 %tobool17, label %if.then18, label %if.end23, !dbg !6781

if.then18:                                        ; preds = %for.body16
  %13 = load i64, i64* %layout, align 8, !dbg !6782
  %14 = load i64, i64* %j, align 8, !dbg !6783
  %sub = sub i64 %14, 1, !dbg !6784
  %and19 = and i64 %13, %sub, !dbg !6785
  %tobool20 = icmp ne i64 %and19, 0, !dbg !6786
  %cond = select i1 %tobool20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), !dbg !6786
  %15 = load i64, i64* %j, align 8, !dbg !6787
  %call21 = call i8* @av_get_channel_name(i64 %15), !dbg !6788
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.97, i32 0, i32 0), i8* %cond, i8* %call21), !dbg !6789
  br label %if.end23, !dbg !6791

if.end23:                                         ; preds = %if.then18, %for.body16
  br label %for.inc24, !dbg !6792

for.inc24:                                        ; preds = %if.end23
  %16 = load i64, i64* %j, align 8, !dbg !6793
  %shl25 = shl i64 %16, 1, !dbg !6793
  store i64 %shl25, i64* %j, align 8, !dbg !6793
  br label %for.cond14, !dbg !6795, !llvm.loop !6796

for.end26:                                        ; preds = %for.cond14
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !6798
  br label %if.end28, !dbg !6799

if.end28:                                         ; preds = %for.end26, %for.body10
  br label %for.inc29, !dbg !6800

for.inc29:                                        ; preds = %if.end28
  %17 = load i32, i32* %i, align 4, !dbg !6801
  %inc30 = add nsw i32 %17, 1, !dbg !6801
  store i32 %inc30, i32* %i, align 4, !dbg !6801
  br label %for.cond7, !dbg !6803, !llvm.loop !6804

for.end31:                                        ; preds = %for.cond7
  ret i32 0, !dbg !6806
}

declare i8* @av_get_channel_name(i64) #1

declare i8* @av_get_channel_description(i64) #1

declare i32 @av_get_standard_channel_layout(i32, i64*, i8**) #1

; Function Attrs: nounwind uwtable
define i32 @show_sample_fmts(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !6807 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %fmt_str = alloca [128 x i8], align 16
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !6808, metadata !1512), !dbg !6809
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !6810, metadata !1512), !dbg !6811
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !6812, metadata !1512), !dbg !6813
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6814, metadata !1512), !dbg !6815
  call void @llvm.dbg.declare(metadata [128 x i8]* %fmt_str, metadata !6816, metadata !1512), !dbg !6817
  store i32 -1, i32* %i, align 4, !dbg !6818
  br label %for.cond, !dbg !6820

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !6821
  %cmp = icmp slt i32 %0, 12, !dbg !6824
  br i1 %cmp, label %for.body, label %for.end, !dbg !6825

for.body:                                         ; preds = %for.cond
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %fmt_str, i32 0, i32 0, !dbg !6826
  %1 = load i32, i32* %i, align 4, !dbg !6827
  %call = call i8* @av_get_sample_fmt_string(i8* %arraydecay, i32 128, i32 %1), !dbg !6828
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i32 0, i32 0), i8* %call), !dbg !6829
  br label %for.inc, !dbg !6830

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4, !dbg !6831
  %inc = add nsw i32 %2, 1, !dbg !6831
  store i32 %inc, i32* %i, align 4, !dbg !6831
  br label %for.cond, !dbg !6833, !llvm.loop !6834

for.end:                                          ; preds = %for.cond
  ret i32 0, !dbg !6836
}

declare i8* @av_get_sample_fmt_string(i8*, i32, i32) #1

; Function Attrs: nounwind uwtable
define i32 @show_help(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !6837 {
entry:
  %retval = alloca i32, align 4
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %topic = alloca i8*, align 8
  %par = alloca i8*, align 8
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !6838, metadata !1512), !dbg !6839
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !6840, metadata !1512), !dbg !6841
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !6842, metadata !1512), !dbg !6843
  call void @llvm.dbg.declare(metadata i8** %topic, metadata !6844, metadata !1512), !dbg !6845
  call void @llvm.dbg.declare(metadata i8** %par, metadata !6846, metadata !1512), !dbg !6847
  call void @av_log_set_callback(void (i8*, i32, i8*, %struct.__va_list_tag*)* @log_callback_help), !dbg !6848
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !6849
  %tobool = icmp ne i8* %0, null, !dbg !6849
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6849

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** %arg.addr, align 8, !dbg !6850
  br label %cond.end, !dbg !6852

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6853

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %1, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), %cond.false ], !dbg !6855
  %call = call noalias i8* @av_strdup(i8* %cond), !dbg !6857
  store i8* %call, i8** %topic, align 8, !dbg !6858
  %2 = load i8*, i8** %topic, align 8, !dbg !6859
  %tobool1 = icmp ne i8* %2, null, !dbg !6859
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6861

if.then:                                          ; preds = %cond.end
  store i32 -12, i32* %retval, align 4, !dbg !6862
  br label %return, !dbg !6862

if.end:                                           ; preds = %cond.end
  %3 = load i8*, i8** %topic, align 8, !dbg !6863
  %call2 = call i8* @strchr(i8* %3, i32 61) #14, !dbg !6864
  store i8* %call2, i8** %par, align 8, !dbg !6865
  %4 = load i8*, i8** %par, align 8, !dbg !6866
  %tobool3 = icmp ne i8* %4, null, !dbg !6866
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !6868

if.then4:                                         ; preds = %if.end
  %5 = load i8*, i8** %par, align 8, !dbg !6869
  %incdec.ptr = getelementptr inbounds i8, i8* %5, i32 1, !dbg !6869
  store i8* %incdec.ptr, i8** %par, align 8, !dbg !6869
  store i8 0, i8* %5, align 1, !dbg !6870
  br label %if.end5, !dbg !6871

if.end5:                                          ; preds = %if.then4, %if.end
  %6 = load i8*, i8** %topic, align 8, !dbg !6872
  %7 = load i8, i8* %6, align 1, !dbg !6874
  %tobool6 = icmp ne i8 %7, 0, !dbg !6874
  br i1 %tobool6, label %if.else, label %if.then7, !dbg !6875

if.then7:                                         ; preds = %if.end5
  %8 = load i8*, i8** %topic, align 8, !dbg !6876
  %9 = load i8*, i8** %par, align 8, !dbg !6878
  call void @show_help_default(i8* %8, i8* %9), !dbg !6879
  br label %if.end38, !dbg !6880

if.else:                                          ; preds = %if.end5
  %10 = load i8*, i8** %topic, align 8, !dbg !6881
  %call8 = call i32 @strcmp(i8* %10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.99, i32 0, i32 0)) #14, !dbg !6884
  %tobool9 = icmp ne i32 %call8, 0, !dbg !6884
  br i1 %tobool9, label %if.else11, label %if.then10, !dbg !6885

if.then10:                                        ; preds = %if.else
  %11 = load i8*, i8** %par, align 8, !dbg !6886
  call void @show_help_codec(i8* %11, i32 0), !dbg !6888
  br label %if.end37, !dbg !6889

if.else11:                                        ; preds = %if.else
  %12 = load i8*, i8** %topic, align 8, !dbg !6890
  %call12 = call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i32 0, i32 0)) #14, !dbg !6893
  %tobool13 = icmp ne i32 %call12, 0, !dbg !6893
  br i1 %tobool13, label %if.else15, label %if.then14, !dbg !6894

if.then14:                                        ; preds = %if.else11
  %13 = load i8*, i8** %par, align 8, !dbg !6895
  call void @show_help_codec(i8* %13, i32 1), !dbg !6897
  br label %if.end36, !dbg !6898

if.else15:                                        ; preds = %if.else11
  %14 = load i8*, i8** %topic, align 8, !dbg !6899
  %call16 = call i32 @strcmp(i8* %14, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.101, i32 0, i32 0)) #14, !dbg !6902
  %tobool17 = icmp ne i32 %call16, 0, !dbg !6902
  br i1 %tobool17, label %if.else19, label %if.then18, !dbg !6903

if.then18:                                        ; preds = %if.else15
  %15 = load i8*, i8** %par, align 8, !dbg !6904
  call void @show_help_demuxer(i8* %15), !dbg !6906
  br label %if.end35, !dbg !6907

if.else19:                                        ; preds = %if.else15
  %16 = load i8*, i8** %topic, align 8, !dbg !6908
  %call20 = call i32 @strcmp(i8* %16, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.102, i32 0, i32 0)) #14, !dbg !6911
  %tobool21 = icmp ne i32 %call20, 0, !dbg !6911
  br i1 %tobool21, label %if.else23, label %if.then22, !dbg !6912

if.then22:                                        ; preds = %if.else19
  %17 = load i8*, i8** %par, align 8, !dbg !6913
  call void @show_help_muxer(i8* %17), !dbg !6915
  br label %if.end34, !dbg !6916

if.else23:                                        ; preds = %if.else19
  %18 = load i8*, i8** %topic, align 8, !dbg !6917
  %call24 = call i32 @strcmp(i8* %18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.103, i32 0, i32 0)) #14, !dbg !6920
  %tobool25 = icmp ne i32 %call24, 0, !dbg !6920
  br i1 %tobool25, label %if.else27, label %if.then26, !dbg !6921

if.then26:                                        ; preds = %if.else23
  %19 = load i8*, i8** %par, align 8, !dbg !6922
  call void @show_help_filter(i8* %19), !dbg !6924
  br label %if.end33, !dbg !6925

if.else27:                                        ; preds = %if.else23
  %20 = load i8*, i8** %topic, align 8, !dbg !6926
  %call28 = call i32 @strcmp(i8* %20, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.104, i32 0, i32 0)) #14, !dbg !6929
  %tobool29 = icmp ne i32 %call28, 0, !dbg !6929
  br i1 %tobool29, label %if.else31, label %if.then30, !dbg !6930

if.then30:                                        ; preds = %if.else27
  %21 = load i8*, i8** %par, align 8, !dbg !6931
  call void @show_help_bsf(i8* %21), !dbg !6933
  br label %if.end32, !dbg !6934

if.else31:                                        ; preds = %if.else27
  %22 = load i8*, i8** %topic, align 8, !dbg !6935
  %23 = load i8*, i8** %par, align 8, !dbg !6937
  call void @show_help_default(i8* %22, i8* %23), !dbg !6938
  br label %if.end32

if.end32:                                         ; preds = %if.else31, %if.then30
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then26
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.then22
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then18
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then14
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.then10
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.then7
  %24 = bitcast i8** %topic to i8*, !dbg !6939
  call void @av_freep(i8* %24), !dbg !6940
  store i32 0, i32* %retval, align 4, !dbg !6941
  br label %return, !dbg !6941

return:                                           ; preds = %if.end38, %if.then
  %25 = load i32, i32* %retval, align 4, !dbg !6942
  ret i32 %25, !dbg !6942
}

declare noalias i8* @av_strdup(i8*) #1

declare void @show_help_default(i8*, i8*) #1

; Function Attrs: nounwind uwtable
define internal void @show_help_codec(i8* %name, i32 %encoder) #0 !dbg !6943 {
entry:
  %name.addr = alloca i8*, align 8
  %encoder.addr = alloca i32, align 4
  %desc = alloca %struct.AVCodecDescriptor*, align 8
  %codec = alloca %struct.AVCodec*, align 8
  %printed = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !6944, metadata !1512), !dbg !6945
  store i32 %encoder, i32* %encoder.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %encoder.addr, metadata !6946, metadata !1512), !dbg !6947
  call void @llvm.dbg.declare(metadata %struct.AVCodecDescriptor** %desc, metadata !6948, metadata !1512), !dbg !6949
  call void @llvm.dbg.declare(metadata %struct.AVCodec** %codec, metadata !6950, metadata !1512), !dbg !6951
  %0 = load i8*, i8** %name.addr, align 8, !dbg !6952
  %tobool = icmp ne i8* %0, null, !dbg !6952
  br i1 %tobool, label %if.end, label %if.then, !dbg !6954

if.then:                                          ; preds = %entry
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.180, i32 0, i32 0)), !dbg !6955
  br label %if.end17, !dbg !6957

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %encoder.addr, align 4, !dbg !6958
  %tobool1 = icmp ne i32 %1, 0, !dbg !6958
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6958

cond.true:                                        ; preds = %if.end
  %2 = load i8*, i8** %name.addr, align 8, !dbg !6959
  %call = call %struct.AVCodec* @avcodec_find_encoder_by_name(i8* %2), !dbg !6961
  br label %cond.end, !dbg !6962

cond.false:                                       ; preds = %if.end
  %3 = load i8*, i8** %name.addr, align 8, !dbg !6963
  %call2 = call %struct.AVCodec* @avcodec_find_decoder_by_name(i8* %3), !dbg !6964
  br label %cond.end, !dbg !6965

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.AVCodec* [ %call, %cond.true ], [ %call2, %cond.false ], !dbg !6967
  store %struct.AVCodec* %cond, %struct.AVCodec** %codec, align 8, !dbg !6969
  %4 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6970
  %tobool3 = icmp ne %struct.AVCodec* %4, null, !dbg !6970
  br i1 %tobool3, label %if.then4, label %if.else, !dbg !6972

if.then4:                                         ; preds = %cond.end
  %5 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6973
  call void @print_codec(%struct.AVCodec* %5), !dbg !6974
  br label %if.end17, !dbg !6974

if.else:                                          ; preds = %cond.end
  %6 = load i8*, i8** %name.addr, align 8, !dbg !6975
  %call5 = call %struct.AVCodecDescriptor* @avcodec_descriptor_get_by_name(i8* %6), !dbg !6977
  store %struct.AVCodecDescriptor* %call5, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6978
  %tobool6 = icmp ne %struct.AVCodecDescriptor* %call5, null, !dbg !6978
  br i1 %tobool6, label %if.then7, label %if.else15, !dbg !6979

if.then7:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %printed, metadata !6980, metadata !1512), !dbg !6982
  store i32 0, i32* %printed, align 4, !dbg !6982
  br label %while.cond, !dbg !6983

while.cond:                                       ; preds = %while.body, %if.then7
  %7 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !6984
  %id = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %7, i32 0, i32 0, !dbg !6986
  %8 = load i32, i32* %id, align 8, !dbg !6986
  %9 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6987
  %10 = load i32, i32* %encoder.addr, align 4, !dbg !6988
  %call8 = call %struct.AVCodec* @next_codec_for_id(i32 %8, %struct.AVCodec* %9, i32 %10), !dbg !6989
  store %struct.AVCodec* %call8, %struct.AVCodec** %codec, align 8, !dbg !6990
  %tobool9 = icmp ne %struct.AVCodec* %call8, null, !dbg !6991
  br i1 %tobool9, label %while.body, label %while.end, !dbg !6991

while.body:                                       ; preds = %while.cond
  store i32 1, i32* %printed, align 4, !dbg !6992
  %11 = load %struct.AVCodec*, %struct.AVCodec** %codec, align 8, !dbg !6994
  call void @print_codec(%struct.AVCodec* %11), !dbg !6995
  br label %while.cond, !dbg !6996, !llvm.loop !6998

while.end:                                        ; preds = %while.cond
  %12 = load i32, i32* %printed, align 4, !dbg !6999
  %tobool10 = icmp ne i32 %12, 0, !dbg !6999
  br i1 %tobool10, label %if.end14, label %if.then11, !dbg !7001

if.then11:                                        ; preds = %while.end
  %13 = load i8*, i8** %name.addr, align 8, !dbg !7002
  %14 = load i32, i32* %encoder.addr, align 4, !dbg !7004
  %tobool12 = icmp ne i32 %14, 0, !dbg !7004
  %cond13 = select i1 %tobool12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.168, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.169, i32 0, i32 0), !dbg !7004
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str.181, i32 0, i32 0), i8* %13, i8* %cond13), !dbg !7005
  br label %if.end14, !dbg !7006

if.end14:                                         ; preds = %if.then11, %while.end
  br label %if.end16, !dbg !7007

if.else15:                                        ; preds = %if.else
  %15 = load i8*, i8** %name.addr, align 8, !dbg !7008
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.182, i32 0, i32 0), i8* %15), !dbg !7010
  br label %if.end16

if.end16:                                         ; preds = %if.else15, %if.end14
  br label %if.end17

if.end17:                                         ; preds = %if.then, %if.end16, %if.then4
  ret void, !dbg !7011
}

; Function Attrs: nounwind uwtable
define internal void @show_help_demuxer(i8* %name) #0 !dbg !7012 {
entry:
  %name.addr = alloca i8*, align 8
  %fmt = alloca %struct.AVInputFormat*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !7013, metadata !1512), !dbg !7014
  call void @llvm.dbg.declare(metadata %struct.AVInputFormat** %fmt, metadata !7015, metadata !1512), !dbg !7016
  %0 = load i8*, i8** %name.addr, align 8, !dbg !7017
  %call = call %struct.AVInputFormat* @av_find_input_format(i8* %0), !dbg !7018
  store %struct.AVInputFormat* %call, %struct.AVInputFormat** %fmt, align 8, !dbg !7016
  %1 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7019
  %tobool = icmp ne %struct.AVInputFormat* %1, null, !dbg !7019
  br i1 %tobool, label %if.end, label %if.then, !dbg !7021

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %name.addr, align 8, !dbg !7022
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.218, i32 0, i32 0), i8* %2), !dbg !7024
  br label %if.end11, !dbg !7025

if.end:                                           ; preds = %entry
  %3 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7026
  %name1 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %3, i32 0, i32 0, !dbg !7027
  %4 = load i8*, i8** %name1, align 8, !dbg !7027
  %5 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7028
  %long_name = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %5, i32 0, i32 1, !dbg !7029
  %6 = load i8*, i8** %long_name, align 8, !dbg !7029
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.219, i32 0, i32 0), i8* %4, i8* %6), !dbg !7030
  %7 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7031
  %extensions = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %7, i32 0, i32 3, !dbg !7033
  %8 = load i8*, i8** %extensions, align 8, !dbg !7033
  %tobool3 = icmp ne i8* %8, null, !dbg !7031
  br i1 %tobool3, label %if.then4, label %if.end7, !dbg !7034

if.then4:                                         ; preds = %if.end
  %9 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7035
  %extensions5 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %9, i32 0, i32 3, !dbg !7036
  %10 = load i8*, i8** %extensions5, align 8, !dbg !7036
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.220, i32 0, i32 0), i8* %10), !dbg !7037
  br label %if.end7, !dbg !7037

if.end7:                                          ; preds = %if.then4, %if.end
  %11 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7038
  %priv_class = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %11, i32 0, i32 5, !dbg !7040
  %12 = load %struct.AVClass*, %struct.AVClass** %priv_class, align 8, !dbg !7040
  %tobool8 = icmp ne %struct.AVClass* %12, null, !dbg !7038
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !7041

if.then9:                                         ; preds = %if.end7
  %13 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7042
  %priv_class10 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %13, i32 0, i32 5, !dbg !7043
  %14 = load %struct.AVClass*, %struct.AVClass** %priv_class10, align 8, !dbg !7043
  call void @show_help_children(%struct.AVClass* %14, i32 2), !dbg !7044
  br label %if.end11, !dbg !7044

if.end11:                                         ; preds = %if.then, %if.then9, %if.end7
  ret void, !dbg !7045
}

; Function Attrs: nounwind uwtable
define internal void @show_help_muxer(i8* %name) #0 !dbg !7046 {
entry:
  %name.addr = alloca i8*, align 8
  %desc = alloca %struct.AVCodecDescriptor*, align 8
  %fmt = alloca %struct.AVOutputFormat*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !7047, metadata !1512), !dbg !7048
  call void @llvm.dbg.declare(metadata %struct.AVCodecDescriptor** %desc, metadata !7049, metadata !1512), !dbg !7050
  call void @llvm.dbg.declare(metadata %struct.AVOutputFormat** %fmt, metadata !7051, metadata !1512), !dbg !7052
  %0 = load i8*, i8** %name.addr, align 8, !dbg !7053
  %call = call %struct.AVOutputFormat* @av_guess_format(i8* %0, i8* null, i8* null), !dbg !7054
  store %struct.AVOutputFormat* %call, %struct.AVOutputFormat** %fmt, align 8, !dbg !7052
  %1 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7055
  %tobool = icmp ne %struct.AVOutputFormat* %1, null, !dbg !7055
  br i1 %tobool, label %if.end, label %if.then, !dbg !7057

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %name.addr, align 8, !dbg !7058
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.218, i32 0, i32 0), i8* %2), !dbg !7060
  br label %if.end41, !dbg !7061

if.end:                                           ; preds = %entry
  %3 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7062
  %name1 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %3, i32 0, i32 0, !dbg !7063
  %4 = load i8*, i8** %name1, align 8, !dbg !7063
  %5 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7064
  %long_name = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %5, i32 0, i32 1, !dbg !7065
  %6 = load i8*, i8** %long_name, align 8, !dbg !7065
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.221, i32 0, i32 0), i8* %4, i8* %6), !dbg !7066
  %7 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7067
  %extensions = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %7, i32 0, i32 3, !dbg !7069
  %8 = load i8*, i8** %extensions, align 8, !dbg !7069
  %tobool3 = icmp ne i8* %8, null, !dbg !7067
  br i1 %tobool3, label %if.then4, label %if.end7, !dbg !7070

if.then4:                                         ; preds = %if.end
  %9 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7071
  %extensions5 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %9, i32 0, i32 3, !dbg !7072
  %10 = load i8*, i8** %extensions5, align 8, !dbg !7072
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.220, i32 0, i32 0), i8* %10), !dbg !7073
  br label %if.end7, !dbg !7073

if.end7:                                          ; preds = %if.then4, %if.end
  %11 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7074
  %mime_type = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %11, i32 0, i32 2, !dbg !7076
  %12 = load i8*, i8** %mime_type, align 8, !dbg !7076
  %tobool8 = icmp ne i8* %12, null, !dbg !7074
  br i1 %tobool8, label %if.then9, label %if.end12, !dbg !7077

if.then9:                                         ; preds = %if.end7
  %13 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7078
  %mime_type10 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %13, i32 0, i32 2, !dbg !7079
  %14 = load i8*, i8** %mime_type10, align 8, !dbg !7079
  %call11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.222, i32 0, i32 0), i8* %14), !dbg !7080
  br label %if.end12, !dbg !7080

if.end12:                                         ; preds = %if.then9, %if.end7
  %15 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7081
  %video_codec = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %15, i32 0, i32 5, !dbg !7083
  %16 = load i32, i32* %video_codec, align 4, !dbg !7083
  %cmp = icmp ne i32 %16, 0, !dbg !7084
  br i1 %cmp, label %land.lhs.true, label %if.end19, !dbg !7085

land.lhs.true:                                    ; preds = %if.end12
  %17 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7086
  %video_codec13 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %17, i32 0, i32 5, !dbg !7087
  %18 = load i32, i32* %video_codec13, align 4, !dbg !7087
  %call14 = call %struct.AVCodecDescriptor* @avcodec_descriptor_get(i32 %18), !dbg !7088
  store %struct.AVCodecDescriptor* %call14, %struct.AVCodecDescriptor** %desc, align 8, !dbg !7089
  %tobool15 = icmp ne %struct.AVCodecDescriptor* %call14, null, !dbg !7089
  br i1 %tobool15, label %if.then16, label %if.end19, !dbg !7090

if.then16:                                        ; preds = %land.lhs.true
  %19 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !7092
  %name17 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %19, i32 0, i32 2, !dbg !7094
  %20 = load i8*, i8** %name17, align 8, !dbg !7094
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.223, i32 0, i32 0), i8* %20), !dbg !7095
  br label %if.end19, !dbg !7096

if.end19:                                         ; preds = %if.then16, %land.lhs.true, %if.end12
  %21 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7097
  %audio_codec = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %21, i32 0, i32 4, !dbg !7099
  %22 = load i32, i32* %audio_codec, align 8, !dbg !7099
  %cmp20 = icmp ne i32 %22, 0, !dbg !7100
  br i1 %cmp20, label %land.lhs.true21, label %if.end28, !dbg !7101

land.lhs.true21:                                  ; preds = %if.end19
  %23 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7102
  %audio_codec22 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %23, i32 0, i32 4, !dbg !7103
  %24 = load i32, i32* %audio_codec22, align 8, !dbg !7103
  %call23 = call %struct.AVCodecDescriptor* @avcodec_descriptor_get(i32 %24), !dbg !7104
  store %struct.AVCodecDescriptor* %call23, %struct.AVCodecDescriptor** %desc, align 8, !dbg !7105
  %tobool24 = icmp ne %struct.AVCodecDescriptor* %call23, null, !dbg !7105
  br i1 %tobool24, label %if.then25, label %if.end28, !dbg !7106

if.then25:                                        ; preds = %land.lhs.true21
  %25 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !7107
  %name26 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %25, i32 0, i32 2, !dbg !7109
  %26 = load i8*, i8** %name26, align 8, !dbg !7109
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.224, i32 0, i32 0), i8* %26), !dbg !7110
  br label %if.end28, !dbg !7111

if.end28:                                         ; preds = %if.then25, %land.lhs.true21, %if.end19
  %27 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7112
  %subtitle_codec = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %27, i32 0, i32 6, !dbg !7114
  %28 = load i32, i32* %subtitle_codec, align 8, !dbg !7114
  %cmp29 = icmp ne i32 %28, 0, !dbg !7115
  br i1 %cmp29, label %land.lhs.true30, label %if.end37, !dbg !7116

land.lhs.true30:                                  ; preds = %if.end28
  %29 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7117
  %subtitle_codec31 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %29, i32 0, i32 6, !dbg !7118
  %30 = load i32, i32* %subtitle_codec31, align 8, !dbg !7118
  %call32 = call %struct.AVCodecDescriptor* @avcodec_descriptor_get(i32 %30), !dbg !7119
  store %struct.AVCodecDescriptor* %call32, %struct.AVCodecDescriptor** %desc, align 8, !dbg !7120
  %tobool33 = icmp ne %struct.AVCodecDescriptor* %call32, null, !dbg !7120
  br i1 %tobool33, label %if.then34, label %if.end37, !dbg !7121

if.then34:                                        ; preds = %land.lhs.true30
  %31 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %desc, align 8, !dbg !7122
  %name35 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %31, i32 0, i32 2, !dbg !7124
  %32 = load i8*, i8** %name35, align 8, !dbg !7124
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.225, i32 0, i32 0), i8* %32), !dbg !7125
  br label %if.end37, !dbg !7126

if.end37:                                         ; preds = %if.then34, %land.lhs.true30, %if.end28
  %33 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7127
  %priv_class = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %33, i32 0, i32 9, !dbg !7129
  %34 = load %struct.AVClass*, %struct.AVClass** %priv_class, align 8, !dbg !7129
  %tobool38 = icmp ne %struct.AVClass* %34, null, !dbg !7127
  br i1 %tobool38, label %if.then39, label %if.end41, !dbg !7130

if.then39:                                        ; preds = %if.end37
  %35 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !7131
  %priv_class40 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %35, i32 0, i32 9, !dbg !7132
  %36 = load %struct.AVClass*, %struct.AVClass** %priv_class40, align 8, !dbg !7132
  call void @show_help_children(%struct.AVClass* %36, i32 1), !dbg !7133
  br label %if.end41, !dbg !7133

if.end41:                                         ; preds = %if.then, %if.then39, %if.end37
  ret void, !dbg !7134
}

; Function Attrs: nounwind uwtable
define internal void @show_help_filter(i8* %name) #0 !dbg !7135 {
entry:
  %name.addr = alloca i8*, align 8
  %f = alloca %struct.AVFilter*, align 8
  %i = alloca i32, align 4
  %count = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !7136, metadata !1512), !dbg !7137
  call void @llvm.dbg.declare(metadata %struct.AVFilter** %f, metadata !7138, metadata !1512), !dbg !7139
  %0 = load i8*, i8** %name.addr, align 8, !dbg !7140
  %call = call %struct.AVFilter* @avfilter_get_by_name(i8* %0), !dbg !7141
  store %struct.AVFilter* %call, %struct.AVFilter** %f, align 8, !dbg !7139
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7142, metadata !1512), !dbg !7143
  call void @llvm.dbg.declare(metadata i32* %count, metadata !7144, metadata !1512), !dbg !7145
  %1 = load i8*, i8** %name.addr, align 8, !dbg !7146
  %tobool = icmp ne i8* %1, null, !dbg !7146
  br i1 %tobool, label %if.else, label %if.then, !dbg !7148

if.then:                                          ; preds = %entry
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.226, i32 0, i32 0)), !dbg !7149
  br label %if.end68, !dbg !7151

if.else:                                          ; preds = %entry
  %2 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7152
  %tobool1 = icmp ne %struct.AVFilter* %2, null, !dbg !7152
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !7154

if.then2:                                         ; preds = %if.else
  %3 = load i8*, i8** %name.addr, align 8, !dbg !7155
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.227, i32 0, i32 0), i8* %3), !dbg !7157
  br label %if.end68, !dbg !7158

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end
  %4 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7159
  %name4 = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %4, i32 0, i32 0, !dbg !7160
  %5 = load i8*, i8** %name4, align 8, !dbg !7160
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.228, i32 0, i32 0), i8* %5), !dbg !7161
  %6 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7162
  %description = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %6, i32 0, i32 1, !dbg !7164
  %7 = load i8*, i8** %description, align 8, !dbg !7164
  %tobool6 = icmp ne i8* %7, null, !dbg !7162
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !7165

if.then7:                                         ; preds = %if.end3
  %8 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7166
  %description8 = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %8, i32 0, i32 1, !dbg !7167
  %9 = load i8*, i8** %description8, align 8, !dbg !7167
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.84, i32 0, i32 0), i8* %9), !dbg !7168
  br label %if.end10, !dbg !7168

if.end10:                                         ; preds = %if.then7, %if.end3
  %10 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7169
  %flags = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %10, i32 0, i32 5, !dbg !7171
  %11 = load i32, i32* %flags, align 8, !dbg !7171
  %and = and i32 %11, 4, !dbg !7172
  %tobool11 = icmp ne i32 %and, 0, !dbg !7172
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !7173

if.then12:                                        ; preds = %if.end10
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.229, i32 0, i32 0)), !dbg !7174
  br label %if.end14, !dbg !7174

if.end14:                                         ; preds = %if.then12, %if.end10
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.230, i32 0, i32 0)), !dbg !7175
  %12 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7176
  %inputs = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %12, i32 0, i32 2, !dbg !7177
  %13 = load %struct.AVFilterPad*, %struct.AVFilterPad** %inputs, align 8, !dbg !7177
  %call16 = call i32 @avfilter_pad_count(%struct.AVFilterPad* %13), !dbg !7178
  store i32 %call16, i32* %count, align 4, !dbg !7179
  store i32 0, i32* %i, align 4, !dbg !7180
  br label %for.cond, !dbg !7182

for.cond:                                         ; preds = %for.inc, %if.end14
  %14 = load i32, i32* %i, align 4, !dbg !7183
  %15 = load i32, i32* %count, align 4, !dbg !7186
  %cmp = icmp slt i32 %14, %15, !dbg !7187
  br i1 %cmp, label %for.body, label %for.end, !dbg !7188

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %i, align 4, !dbg !7189
  %17 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7191
  %inputs17 = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %17, i32 0, i32 2, !dbg !7192
  %18 = load %struct.AVFilterPad*, %struct.AVFilterPad** %inputs17, align 8, !dbg !7192
  %19 = load i32, i32* %i, align 4, !dbg !7193
  %call18 = call i8* @avfilter_pad_get_name(%struct.AVFilterPad* %18, i32 %19), !dbg !7194
  %20 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7195
  %inputs19 = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %20, i32 0, i32 2, !dbg !7196
  %21 = load %struct.AVFilterPad*, %struct.AVFilterPad** %inputs19, align 8, !dbg !7196
  %22 = load i32, i32* %i, align 4, !dbg !7197
  %call20 = call i32 @avfilter_pad_get_type(%struct.AVFilterPad* %21, i32 %22), !dbg !7198
  %call21 = call i8* @av_get_media_type_string(i32 %call20), !dbg !7199
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.231, i32 0, i32 0), i32 %16, i8* %call18, i8* %call21), !dbg !7201
  br label %for.inc, !dbg !7202

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %i, align 4, !dbg !7203
  %inc = add nsw i32 %23, 1, !dbg !7203
  store i32 %inc, i32* %i, align 4, !dbg !7203
  br label %for.cond, !dbg !7205, !llvm.loop !7206

for.end:                                          ; preds = %for.cond
  %24 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7208
  %flags23 = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %24, i32 0, i32 5, !dbg !7210
  %25 = load i32, i32* %flags23, align 8, !dbg !7210
  %and24 = and i32 %25, 1, !dbg !7211
  %tobool25 = icmp ne i32 %and24, 0, !dbg !7211
  br i1 %tobool25, label %if.then26, label %if.else28, !dbg !7212

if.then26:                                        ; preds = %for.end
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.232, i32 0, i32 0)), !dbg !7213
  br label %if.end33, !dbg !7213

if.else28:                                        ; preds = %for.end
  %26 = load i32, i32* %count, align 4, !dbg !7214
  %tobool29 = icmp ne i32 %26, 0, !dbg !7214
  br i1 %tobool29, label %if.end32, label %if.then30, !dbg !7216

if.then30:                                        ; preds = %if.else28
  %call31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.233, i32 0, i32 0)), !dbg !7217
  br label %if.end32, !dbg !7217

if.end32:                                         ; preds = %if.then30, %if.else28
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then26
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.234, i32 0, i32 0)), !dbg !7218
  %27 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7219
  %outputs = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %27, i32 0, i32 3, !dbg !7220
  %28 = load %struct.AVFilterPad*, %struct.AVFilterPad** %outputs, align 8, !dbg !7220
  %call35 = call i32 @avfilter_pad_count(%struct.AVFilterPad* %28), !dbg !7221
  store i32 %call35, i32* %count, align 4, !dbg !7222
  store i32 0, i32* %i, align 4, !dbg !7223
  br label %for.cond36, !dbg !7225

for.cond36:                                       ; preds = %for.inc45, %if.end33
  %29 = load i32, i32* %i, align 4, !dbg !7226
  %30 = load i32, i32* %count, align 4, !dbg !7229
  %cmp37 = icmp slt i32 %29, %30, !dbg !7230
  br i1 %cmp37, label %for.body38, label %for.end47, !dbg !7231

for.body38:                                       ; preds = %for.cond36
  %31 = load i32, i32* %i, align 4, !dbg !7232
  %32 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7234
  %outputs39 = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %32, i32 0, i32 3, !dbg !7235
  %33 = load %struct.AVFilterPad*, %struct.AVFilterPad** %outputs39, align 8, !dbg !7235
  %34 = load i32, i32* %i, align 4, !dbg !7236
  %call40 = call i8* @avfilter_pad_get_name(%struct.AVFilterPad* %33, i32 %34), !dbg !7237
  %35 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7238
  %outputs41 = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %35, i32 0, i32 3, !dbg !7239
  %36 = load %struct.AVFilterPad*, %struct.AVFilterPad** %outputs41, align 8, !dbg !7239
  %37 = load i32, i32* %i, align 4, !dbg !7240
  %call42 = call i32 @avfilter_pad_get_type(%struct.AVFilterPad* %36, i32 %37), !dbg !7241
  %call43 = call i8* @av_get_media_type_string(i32 %call42), !dbg !7242
  %call44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.231, i32 0, i32 0), i32 %31, i8* %call40, i8* %call43), !dbg !7244
  br label %for.inc45, !dbg !7245

for.inc45:                                        ; preds = %for.body38
  %38 = load i32, i32* %i, align 4, !dbg !7246
  %inc46 = add nsw i32 %38, 1, !dbg !7246
  store i32 %inc46, i32* %i, align 4, !dbg !7246
  br label %for.cond36, !dbg !7248, !llvm.loop !7249

for.end47:                                        ; preds = %for.cond36
  %39 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7251
  %flags48 = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %39, i32 0, i32 5, !dbg !7253
  %40 = load i32, i32* %flags48, align 8, !dbg !7253
  %and49 = and i32 %40, 2, !dbg !7254
  %tobool50 = icmp ne i32 %and49, 0, !dbg !7254
  br i1 %tobool50, label %if.then51, label %if.else53, !dbg !7255

if.then51:                                        ; preds = %for.end47
  %call52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.232, i32 0, i32 0)), !dbg !7256
  br label %if.end58, !dbg !7256

if.else53:                                        ; preds = %for.end47
  %41 = load i32, i32* %count, align 4, !dbg !7257
  %tobool54 = icmp ne i32 %41, 0, !dbg !7257
  br i1 %tobool54, label %if.end57, label %if.then55, !dbg !7259

if.then55:                                        ; preds = %if.else53
  %call56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.235, i32 0, i32 0)), !dbg !7260
  br label %if.end57, !dbg !7260

if.end57:                                         ; preds = %if.then55, %if.else53
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then51
  %42 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7261
  %priv_class = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %42, i32 0, i32 4, !dbg !7263
  %43 = load %struct.AVClass*, %struct.AVClass** %priv_class, align 8, !dbg !7263
  %tobool59 = icmp ne %struct.AVClass* %43, null, !dbg !7261
  br i1 %tobool59, label %if.then60, label %if.end62, !dbg !7264

if.then60:                                        ; preds = %if.end58
  %44 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7265
  %priv_class61 = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %44, i32 0, i32 4, !dbg !7266
  %45 = load %struct.AVClass*, %struct.AVClass** %priv_class61, align 8, !dbg !7266
  call void @show_help_children(%struct.AVClass* %45, i32 65560), !dbg !7267
  br label %if.end62, !dbg !7267

if.end62:                                         ; preds = %if.then60, %if.end58
  %46 = load %struct.AVFilter*, %struct.AVFilter** %f, align 8, !dbg !7268
  %flags63 = getelementptr inbounds %struct.AVFilter, %struct.AVFilter* %46, i32 0, i32 5, !dbg !7270
  %47 = load i32, i32* %flags63, align 8, !dbg !7270
  %and64 = and i32 %47, 196608, !dbg !7271
  %tobool65 = icmp ne i32 %and64, 0, !dbg !7271
  br i1 %tobool65, label %if.then66, label %if.end68, !dbg !7272

if.then66:                                        ; preds = %if.end62
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.236, i32 0, i32 0)), !dbg !7273
  br label %if.end68, !dbg !7273

if.end68:                                         ; preds = %if.then, %if.then2, %if.then66, %if.end62
  ret void, !dbg !7274
}

; Function Attrs: nounwind uwtable
define internal void @show_help_bsf(i8* %name) #0 !dbg !7275 {
entry:
  %name.addr = alloca i8*, align 8
  %bsf = alloca %struct.AVBitStreamFilter*, align 8
  %p = alloca i32*, align 8
  %name10 = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !7276, metadata !1512), !dbg !7277
  call void @llvm.dbg.declare(metadata %struct.AVBitStreamFilter** %bsf, metadata !7278, metadata !1512), !dbg !7279
  %0 = load i8*, i8** %name.addr, align 8, !dbg !7280
  %call = call %struct.AVBitStreamFilter* @av_bsf_get_by_name(i8* %0), !dbg !7281
  store %struct.AVBitStreamFilter* %call, %struct.AVBitStreamFilter** %bsf, align 8, !dbg !7279
  %1 = load i8*, i8** %name.addr, align 8, !dbg !7282
  %tobool = icmp ne i8* %1, null, !dbg !7282
  br i1 %tobool, label %if.else, label %if.then, !dbg !7284

if.then:                                          ; preds = %entry
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.237, i32 0, i32 0)), !dbg !7285
  br label %if.end19, !dbg !7287

if.else:                                          ; preds = %entry
  %2 = load %struct.AVBitStreamFilter*, %struct.AVBitStreamFilter** %bsf, align 8, !dbg !7288
  %tobool1 = icmp ne %struct.AVBitStreamFilter* %2, null, !dbg !7288
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !7290

if.then2:                                         ; preds = %if.else
  %3 = load i8*, i8** %name.addr, align 8, !dbg !7291
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.238, i32 0, i32 0), i8* %3), !dbg !7293
  br label %if.end19, !dbg !7294

if.end:                                           ; preds = %if.else
  br label %if.end3

if.end3:                                          ; preds = %if.end
  %4 = load %struct.AVBitStreamFilter*, %struct.AVBitStreamFilter** %bsf, align 8, !dbg !7295
  %name4 = getelementptr inbounds %struct.AVBitStreamFilter, %struct.AVBitStreamFilter* %4, i32 0, i32 0, !dbg !7296
  %5 = load i8*, i8** %name4, align 8, !dbg !7296
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.239, i32 0, i32 0), i8* %5), !dbg !7297
  %6 = load %struct.AVBitStreamFilter*, %struct.AVBitStreamFilter** %bsf, align 8, !dbg !7298
  %codec_ids = getelementptr inbounds %struct.AVBitStreamFilter, %struct.AVBitStreamFilter* %6, i32 0, i32 1, !dbg !7300
  %7 = load i32*, i32** %codec_ids, align 8, !dbg !7300
  %tobool6 = icmp ne i32* %7, null, !dbg !7298
  br i1 %tobool6, label %if.then7, label %if.end15, !dbg !7301

if.then7:                                         ; preds = %if.end3
  call void @llvm.dbg.declare(metadata i32** %p, metadata !7302, metadata !1512), !dbg !7304
  %8 = load %struct.AVBitStreamFilter*, %struct.AVBitStreamFilter** %bsf, align 8, !dbg !7305
  %codec_ids8 = getelementptr inbounds %struct.AVBitStreamFilter, %struct.AVBitStreamFilter* %8, i32 0, i32 1, !dbg !7307
  %9 = load i32*, i32** %codec_ids8, align 8, !dbg !7307
  store i32* %9, i32** %p, align 8, !dbg !7308
  %call9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.240, i32 0, i32 0)), !dbg !7309
  br label %while.cond, !dbg !7310

while.cond:                                       ; preds = %while.body, %if.then7
  %10 = load i32*, i32** %p, align 8, !dbg !7311
  %11 = load i32, i32* %10, align 4, !dbg !7313
  %cmp = icmp ne i32 %11, 0, !dbg !7314
  br i1 %cmp, label %while.body, label %while.end, !dbg !7315

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8** %name10, metadata !7316, metadata !1512), !dbg !7318
  %12 = load i32*, i32** %p, align 8, !dbg !7319
  %13 = load i32, i32* %12, align 4, !dbg !7321
  %call11 = call %struct.AVCodecDescriptor* @avcodec_descriptor_get(i32 %13), !dbg !7322
  %name12 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %call11, i32 0, i32 2, !dbg !7323
  %14 = load i8*, i8** %name12, align 8, !dbg !7323
  store i8* %14, i8** %name10, align 8, !dbg !7324
  %15 = load i8*, i8** %name10, align 8, !dbg !7325
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.213, i32 0, i32 0), i8* %15), !dbg !7326
  %16 = load i32*, i32** %p, align 8, !dbg !7328
  %incdec.ptr = getelementptr inbounds i32, i32* %16, i32 1, !dbg !7328
  store i32* %incdec.ptr, i32** %p, align 8, !dbg !7328
  br label %while.cond, !dbg !7329, !llvm.loop !7330

while.end:                                        ; preds = %while.cond
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !7332
  br label %if.end15, !dbg !7334

if.end15:                                         ; preds = %while.end, %if.end3
  %17 = load %struct.AVBitStreamFilter*, %struct.AVBitStreamFilter** %bsf, align 8, !dbg !7335
  %priv_class = getelementptr inbounds %struct.AVBitStreamFilter, %struct.AVBitStreamFilter* %17, i32 0, i32 2, !dbg !7337
  %18 = load %struct.AVClass*, %struct.AVClass** %priv_class, align 8, !dbg !7337
  %tobool16 = icmp ne %struct.AVClass* %18, null, !dbg !7335
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !7338

if.then17:                                        ; preds = %if.end15
  %19 = load %struct.AVBitStreamFilter*, %struct.AVBitStreamFilter** %bsf, align 8, !dbg !7339
  %priv_class18 = getelementptr inbounds %struct.AVBitStreamFilter, %struct.AVBitStreamFilter* %19, i32 0, i32 2, !dbg !7340
  %20 = load %struct.AVClass*, %struct.AVClass** %priv_class18, align 8, !dbg !7340
  call void @show_help_children(%struct.AVClass* %20, i32 256), !dbg !7341
  br label %if.end19, !dbg !7341

if.end19:                                         ; preds = %if.then, %if.then2, %if.then17, %if.end15
  ret void, !dbg !7342
}

; Function Attrs: nounwind uwtable
define i32 @read_yesno() #0 !dbg !7343 {
entry:
  %c = alloca i32, align 4
  %yesno = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %c, metadata !7346, metadata !1512), !dbg !7347
  %call = call i32 @getchar(), !dbg !7348
  store i32 %call, i32* %c, align 4, !dbg !7347
  call void @llvm.dbg.declare(metadata i32* %yesno, metadata !7349, metadata !1512), !dbg !7350
  %0 = load i32, i32* %c, align 4, !dbg !7351
  %call1 = call i32 @av_toupper(i32 %0) #2, !dbg !7352
  %cmp = icmp eq i32 %call1, 89, !dbg !7353
  %conv = zext i1 %cmp to i32, !dbg !7353
  store i32 %conv, i32* %yesno, align 4, !dbg !7350
  br label %while.cond, !dbg !7354

while.cond:                                       ; preds = %while.body, %entry
  %1 = load i32, i32* %c, align 4, !dbg !7355
  %cmp2 = icmp ne i32 %1, 10, !dbg !7357
  br i1 %cmp2, label %land.rhs, label %land.end, !dbg !7358

land.rhs:                                         ; preds = %while.cond
  %2 = load i32, i32* %c, align 4, !dbg !7359
  %cmp4 = icmp ne i32 %2, -1, !dbg !7361
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %3 = phi i1 [ false, %while.cond ], [ %cmp4, %land.rhs ]
  br i1 %3, label %while.body, label %while.end, !dbg !7362

while.body:                                       ; preds = %land.end
  %call6 = call i32 @getchar(), !dbg !7364
  store i32 %call6, i32* %c, align 4, !dbg !7365
  br label %while.cond, !dbg !7366, !llvm.loop !7368

while.end:                                        ; preds = %land.end
  %4 = load i32, i32* %yesno, align 4, !dbg !7369
  ret i32 %4, !dbg !7370
}

declare i32 @getchar() #1

; Function Attrs: inlinehint nounwind readnone uwtable
define internal i32 @av_toupper(i32 %c) #8 !dbg !7371 {
entry:
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %c.addr, metadata !7375, metadata !1512), !dbg !7376
  %0 = load i32, i32* %c.addr, align 4, !dbg !7377
  %cmp = icmp sge i32 %0, 97, !dbg !7379
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7380

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4, !dbg !7381
  %cmp1 = icmp sle i32 %1, 122, !dbg !7383
  br i1 %cmp1, label %if.then, label %if.end, !dbg !7384

if.then:                                          ; preds = %land.lhs.true
  %2 = load i32, i32* %c.addr, align 4, !dbg !7385
  %xor = xor i32 %2, 32, !dbg !7385
  store i32 %xor, i32* %c.addr, align 4, !dbg !7385
  br label %if.end, !dbg !7386

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %3 = load i32, i32* %c.addr, align 4, !dbg !7387
  ret i32 %3, !dbg !7388
}

; Function Attrs: nounwind uwtable
define %struct._IO_FILE* @get_preset_file(i8* %filename, i64 %filename_size, i8* %preset_name, i32 %is_path, i8* %codec_name) #0 !dbg !7389 {
entry:
  %filename.addr = alloca i8*, align 8
  %filename_size.addr = alloca i64, align 8
  %preset_name.addr = alloca i8*, align 8
  %is_path.addr = alloca i32, align 4
  %codec_name.addr = alloca i8*, align 8
  %f = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  %base = alloca [3 x i8*], align 16
  store i8* %filename, i8** %filename.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %filename.addr, metadata !7392, metadata !1512), !dbg !7393
  store i64 %filename_size, i64* %filename_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %filename_size.addr, metadata !7394, metadata !1512), !dbg !7395
  store i8* %preset_name, i8** %preset_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %preset_name.addr, metadata !7396, metadata !1512), !dbg !7397
  store i32 %is_path, i32* %is_path.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %is_path.addr, metadata !7398, metadata !1512), !dbg !7399
  store i8* %codec_name, i8** %codec_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %codec_name.addr, metadata !7400, metadata !1512), !dbg !7401
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %f, metadata !7402, metadata !1512), !dbg !7403
  store %struct._IO_FILE* null, %struct._IO_FILE** %f, align 8, !dbg !7403
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7404, metadata !1512), !dbg !7405
  call void @llvm.dbg.declare(metadata [3 x i8*]* %base, metadata !7406, metadata !1512), !dbg !7410
  %arrayinit.begin = getelementptr inbounds [3 x i8*], [3 x i8*]* %base, i64 0, i64 0, !dbg !7411
  %call = call i8* @getenv(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.105, i32 0, i32 0)) #11, !dbg !7412
  store i8* %call, i8** %arrayinit.begin, align 8, !dbg !7411
  %arrayinit.element = getelementptr inbounds i8*, i8** %arrayinit.begin, i64 1, !dbg !7411
  %call1 = call i8* @getenv(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.106, i32 0, i32 0)) #11, !dbg !7413
  store i8* %call1, i8** %arrayinit.element, align 8, !dbg !7411
  %arrayinit.element2 = getelementptr inbounds i8*, i8** %arrayinit.element, i64 1, !dbg !7411
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.107, i32 0, i32 0), i8** %arrayinit.element2, align 8, !dbg !7411
  %0 = load i32, i32* %is_path.addr, align 4, !dbg !7414
  %tobool = icmp ne i32 %0, 0, !dbg !7414
  br i1 %tobool, label %if.then, label %if.else, !dbg !7416

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %filename.addr, align 8, !dbg !7417
  %2 = load i8*, i8** %preset_name.addr, align 8, !dbg !7419
  %3 = load i64, i64* %filename_size.addr, align 8, !dbg !7420
  %call3 = call i64 @av_strlcpy(i8* %1, i8* %2, i64 %3), !dbg !7421
  %4 = load i8*, i8** %filename.addr, align 8, !dbg !7422
  %call4 = call %struct._IO_FILE* @fopen64(i8* %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.108, i32 0, i32 0)), !dbg !7423
  store %struct._IO_FILE* %call4, %struct._IO_FILE** %f, align 8, !dbg !7424
  br label %if.end23, !dbg !7425

if.else:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !7426
  br label %for.cond, !dbg !7429

for.cond:                                         ; preds = %for.inc, %if.else
  %5 = load i32, i32* %i, align 4, !dbg !7430
  %cmp = icmp slt i32 %5, 3, !dbg !7433
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7434

land.rhs:                                         ; preds = %for.cond
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8, !dbg !7435
  %tobool5 = icmp ne %struct._IO_FILE* %6, null, !dbg !7437
  %lnot = xor i1 %tobool5, true, !dbg !7437
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %7 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ]
  br i1 %7, label %for.body, label %for.end, !dbg !7438

for.body:                                         ; preds = %land.end
  %8 = load i32, i32* %i, align 4, !dbg !7440
  %idxprom = sext i32 %8 to i64, !dbg !7443
  %arrayidx = getelementptr inbounds [3 x i8*], [3 x i8*]* %base, i64 0, i64 %idxprom, !dbg !7443
  %9 = load i8*, i8** %arrayidx, align 8, !dbg !7443
  %tobool6 = icmp ne i8* %9, null, !dbg !7443
  br i1 %tobool6, label %if.end, label %if.then7, !dbg !7444

if.then7:                                         ; preds = %for.body
  br label %for.inc, !dbg !7445

if.end:                                           ; preds = %for.body
  %10 = load i8*, i8** %filename.addr, align 8, !dbg !7446
  %11 = load i64, i64* %filename_size.addr, align 8, !dbg !7447
  %12 = load i32, i32* %i, align 4, !dbg !7448
  %idxprom8 = sext i32 %12 to i64, !dbg !7449
  %arrayidx9 = getelementptr inbounds [3 x i8*], [3 x i8*]* %base, i64 0, i64 %idxprom8, !dbg !7449
  %13 = load i8*, i8** %arrayidx9, align 8, !dbg !7449
  %14 = load i32, i32* %i, align 4, !dbg !7450
  %cmp10 = icmp ne i32 %14, 1, !dbg !7451
  %cond = select i1 %cmp10, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.110, i32 0, i32 0), !dbg !7450
  %15 = load i8*, i8** %preset_name.addr, align 8, !dbg !7452
  %call11 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %10, i64 %11, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.109, i32 0, i32 0), i8* %13, i8* %cond, i8* %15) #11, !dbg !7453
  %16 = load i8*, i8** %filename.addr, align 8, !dbg !7454
  %call12 = call %struct._IO_FILE* @fopen64(i8* %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.108, i32 0, i32 0)), !dbg !7455
  store %struct._IO_FILE* %call12, %struct._IO_FILE** %f, align 8, !dbg !7456
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8, !dbg !7457
  %tobool13 = icmp ne %struct._IO_FILE* %17, null, !dbg !7457
  br i1 %tobool13, label %if.end22, label %land.lhs.true, !dbg !7459

land.lhs.true:                                    ; preds = %if.end
  %18 = load i8*, i8** %codec_name.addr, align 8, !dbg !7460
  %tobool14 = icmp ne i8* %18, null, !dbg !7460
  br i1 %tobool14, label %if.then15, label %if.end22, !dbg !7462

if.then15:                                        ; preds = %land.lhs.true
  %19 = load i8*, i8** %filename.addr, align 8, !dbg !7463
  %20 = load i64, i64* %filename_size.addr, align 8, !dbg !7465
  %21 = load i32, i32* %i, align 4, !dbg !7466
  %idxprom16 = sext i32 %21 to i64, !dbg !7467
  %arrayidx17 = getelementptr inbounds [3 x i8*], [3 x i8*]* %base, i64 0, i64 %idxprom16, !dbg !7467
  %22 = load i8*, i8** %arrayidx17, align 8, !dbg !7467
  %23 = load i32, i32* %i, align 4, !dbg !7468
  %cmp18 = icmp ne i32 %23, 1, !dbg !7469
  %cond19 = select i1 %cmp18, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.110, i32 0, i32 0), !dbg !7468
  %24 = load i8*, i8** %codec_name.addr, align 8, !dbg !7470
  %25 = load i8*, i8** %preset_name.addr, align 8, !dbg !7471
  %call20 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %19, i64 %20, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.111, i32 0, i32 0), i8* %22, i8* %cond19, i8* %24, i8* %25) #11, !dbg !7472
  %26 = load i8*, i8** %filename.addr, align 8, !dbg !7473
  %call21 = call %struct._IO_FILE* @fopen64(i8* %26, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.108, i32 0, i32 0)), !dbg !7474
  store %struct._IO_FILE* %call21, %struct._IO_FILE** %f, align 8, !dbg !7475
  br label %if.end22, !dbg !7476

if.end22:                                         ; preds = %if.then15, %land.lhs.true, %if.end
  br label %for.inc, !dbg !7477

for.inc:                                          ; preds = %if.end22, %if.then7
  %27 = load i32, i32* %i, align 4, !dbg !7478
  %inc = add nsw i32 %27, 1, !dbg !7478
  store i32 %inc, i32* %i, align 4, !dbg !7478
  br label %for.cond, !dbg !7480, !llvm.loop !7481

for.end:                                          ; preds = %land.end
  br label %if.end23

if.end23:                                         ; preds = %for.end, %if.then
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %f, align 8, !dbg !7483
  ret %struct._IO_FILE* %28, !dbg !7484
}

declare %struct._IO_FILE* @fopen64(i8*, i8*) #1

; Function Attrs: nounwind
declare i32 @snprintf(i8*, i64, i8*, ...) #7

; Function Attrs: nounwind uwtable
define i32 @check_stream_specifier(%struct.AVFormatContext* %s, %struct.AVStream* %st, i8* %spec) #0 !dbg !7485 {
entry:
  %s.addr = alloca %struct.AVFormatContext*, align 8
  %st.addr = alloca %struct.AVStream*, align 8
  %spec.addr = alloca i8*, align 8
  %ret = alloca i32, align 4
  store %struct.AVFormatContext* %s, %struct.AVFormatContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVFormatContext** %s.addr, metadata !7488, metadata !1512), !dbg !7489
  store %struct.AVStream* %st, %struct.AVStream** %st.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVStream** %st.addr, metadata !7490, metadata !1512), !dbg !7491
  store i8* %spec, i8** %spec.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %spec.addr, metadata !7492, metadata !1512), !dbg !7493
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7494, metadata !1512), !dbg !7495
  %0 = load %struct.AVFormatContext*, %struct.AVFormatContext** %s.addr, align 8, !dbg !7496
  %1 = load %struct.AVStream*, %struct.AVStream** %st.addr, align 8, !dbg !7497
  %2 = load i8*, i8** %spec.addr, align 8, !dbg !7498
  %call = call i32 @avformat_match_stream_specifier(%struct.AVFormatContext* %0, %struct.AVStream* %1, i8* %2), !dbg !7499
  store i32 %call, i32* %ret, align 4, !dbg !7495
  %3 = load i32, i32* %ret, align 4, !dbg !7500
  %cmp = icmp slt i32 %3, 0, !dbg !7502
  br i1 %cmp, label %if.then, label %if.end, !dbg !7503

if.then:                                          ; preds = %entry
  %4 = load %struct.AVFormatContext*, %struct.AVFormatContext** %s.addr, align 8, !dbg !7504
  %5 = bitcast %struct.AVFormatContext* %4 to i8*, !dbg !7504
  %6 = load i8*, i8** %spec.addr, align 8, !dbg !7505
  call void (i8*, i32, i8*, ...) @av_log(i8* %5, i32 16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.112, i32 0, i32 0), i8* %6), !dbg !7506
  br label %if.end, !dbg !7506

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %ret, align 4, !dbg !7507
  ret i32 %7, !dbg !7508
}

declare i32 @avformat_match_stream_specifier(%struct.AVFormatContext*, %struct.AVStream*, i8*) #1

; Function Attrs: nounwind uwtable
define %struct.AVDictionary* @filter_codec_opts(%struct.AVDictionary* %opts, i32 %codec_id, %struct.AVFormatContext* %s, %struct.AVStream* %st, %struct.AVCodec* %codec) #0 !dbg !7509 {
entry:
  %opts.addr = alloca %struct.AVDictionary*, align 8
  %codec_id.addr = alloca i32, align 4
  %s.addr = alloca %struct.AVFormatContext*, align 8
  %st.addr = alloca %struct.AVStream*, align 8
  %codec.addr = alloca %struct.AVCodec*, align 8
  %ret = alloca %struct.AVDictionary*, align 8
  %t = alloca %struct.AVDictionaryEntry*, align 8
  %flags = alloca i32, align 4
  %prefix = alloca i8, align 1
  %cc = alloca %struct.AVClass*, align 8
  %p = alloca i8*, align 8
  store %struct.AVDictionary* %opts, %struct.AVDictionary** %opts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVDictionary** %opts.addr, metadata !7512, metadata !1512), !dbg !7513
  store i32 %codec_id, i32* %codec_id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %codec_id.addr, metadata !7514, metadata !1512), !dbg !7515
  store %struct.AVFormatContext* %s, %struct.AVFormatContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVFormatContext** %s.addr, metadata !7516, metadata !1512), !dbg !7517
  store %struct.AVStream* %st, %struct.AVStream** %st.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVStream** %st.addr, metadata !7518, metadata !1512), !dbg !7519
  store %struct.AVCodec* %codec, %struct.AVCodec** %codec.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVCodec** %codec.addr, metadata !7520, metadata !1512), !dbg !7521
  call void @llvm.dbg.declare(metadata %struct.AVDictionary** %ret, metadata !7522, metadata !1512), !dbg !7523
  store %struct.AVDictionary* null, %struct.AVDictionary** %ret, align 8, !dbg !7523
  call void @llvm.dbg.declare(metadata %struct.AVDictionaryEntry** %t, metadata !7524, metadata !1512), !dbg !7531
  store %struct.AVDictionaryEntry* null, %struct.AVDictionaryEntry** %t, align 8, !dbg !7531
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !7532, metadata !1512), !dbg !7533
  %0 = load %struct.AVFormatContext*, %struct.AVFormatContext** %s.addr, align 8, !dbg !7534
  %oformat = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i32 0, i32 2, !dbg !7535
  %1 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %oformat, align 8, !dbg !7535
  %tobool = icmp ne %struct.AVOutputFormat* %1, null, !dbg !7534
  %cond = select i1 %tobool, i32 1, i32 2, !dbg !7534
  store i32 %cond, i32* %flags, align 4, !dbg !7533
  call void @llvm.dbg.declare(metadata i8* %prefix, metadata !7536, metadata !1512), !dbg !7537
  store i8 0, i8* %prefix, align 1, !dbg !7537
  call void @llvm.dbg.declare(metadata %struct.AVClass** %cc, metadata !7538, metadata !1512), !dbg !7539
  %call = call %struct.AVClass* @avcodec_get_class(), !dbg !7540
  store %struct.AVClass* %call, %struct.AVClass** %cc, align 8, !dbg !7539
  %2 = load %struct.AVCodec*, %struct.AVCodec** %codec.addr, align 8, !dbg !7541
  %tobool1 = icmp ne %struct.AVCodec* %2, null, !dbg !7541
  br i1 %tobool1, label %if.end, label %if.then, !dbg !7543

if.then:                                          ; preds = %entry
  %3 = load %struct.AVFormatContext*, %struct.AVFormatContext** %s.addr, align 8, !dbg !7544
  %oformat2 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %3, i32 0, i32 2, !dbg !7545
  %4 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %oformat2, align 8, !dbg !7545
  %tobool3 = icmp ne %struct.AVOutputFormat* %4, null, !dbg !7544
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !7544

cond.true:                                        ; preds = %if.then
  %5 = load i32, i32* %codec_id.addr, align 4, !dbg !7546
  %call4 = call %struct.AVCodec* @avcodec_find_encoder(i32 %5), !dbg !7548
  br label %cond.end, !dbg !7549

cond.false:                                       ; preds = %if.then
  %6 = load i32, i32* %codec_id.addr, align 4, !dbg !7550
  %call5 = call %struct.AVCodec* @avcodec_find_decoder(i32 %6), !dbg !7551
  br label %cond.end, !dbg !7552

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond6 = phi %struct.AVCodec* [ %call4, %cond.true ], [ %call5, %cond.false ], !dbg !7554
  store %struct.AVCodec* %cond6, %struct.AVCodec** %codec.addr, align 8, !dbg !7556
  br label %if.end, !dbg !7557

if.end:                                           ; preds = %cond.end, %entry
  %7 = load %struct.AVStream*, %struct.AVStream** %st.addr, align 8, !dbg !7558
  %codecpar = getelementptr inbounds %struct.AVStream, %struct.AVStream* %7, i32 0, i32 19, !dbg !7559
  %8 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %codecpar, align 8, !dbg !7559
  %codec_type = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %8, i32 0, i32 0, !dbg !7560
  %9 = load i32, i32* %codec_type, align 8, !dbg !7560
  switch i32 %9, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb7
    i32 3, label %sw.bb9
  ], !dbg !7561

sw.bb:                                            ; preds = %if.end
  store i8 118, i8* %prefix, align 1, !dbg !7562
  %10 = load i32, i32* %flags, align 4, !dbg !7564
  %or = or i32 %10, 16, !dbg !7564
  store i32 %or, i32* %flags, align 4, !dbg !7564
  br label %sw.epilog, !dbg !7565

sw.bb7:                                           ; preds = %if.end
  store i8 97, i8* %prefix, align 1, !dbg !7566
  %11 = load i32, i32* %flags, align 4, !dbg !7567
  %or8 = or i32 %11, 8, !dbg !7567
  store i32 %or8, i32* %flags, align 4, !dbg !7567
  br label %sw.epilog, !dbg !7568

sw.bb9:                                           ; preds = %if.end
  store i8 115, i8* %prefix, align 1, !dbg !7569
  %12 = load i32, i32* %flags, align 4, !dbg !7570
  %or10 = or i32 %12, 32, !dbg !7570
  store i32 %or10, i32* %flags, align 4, !dbg !7570
  br label %sw.epilog, !dbg !7571

sw.epilog:                                        ; preds = %if.end, %sw.bb9, %sw.bb7, %sw.bb
  br label %while.cond, !dbg !7572

while.cond:                                       ; preds = %if.end51, %sw.bb18, %sw.epilog
  %13 = load %struct.AVDictionary*, %struct.AVDictionary** %opts.addr, align 8, !dbg !7573
  %14 = load %struct.AVDictionaryEntry*, %struct.AVDictionaryEntry** %t, align 8, !dbg !7575
  %call11 = call %struct.AVDictionaryEntry* @av_dict_get(%struct.AVDictionary* %13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), %struct.AVDictionaryEntry* %14, i32 2), !dbg !7576
  store %struct.AVDictionaryEntry* %call11, %struct.AVDictionaryEntry** %t, align 8, !dbg !7577
  %tobool12 = icmp ne %struct.AVDictionaryEntry* %call11, null, !dbg !7578
  br i1 %tobool12, label %while.body, label %while.end, !dbg !7578

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8** %p, metadata !7579, metadata !1512), !dbg !7581
  %15 = load %struct.AVDictionaryEntry*, %struct.AVDictionaryEntry** %t, align 8, !dbg !7582
  %key = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %15, i32 0, i32 0, !dbg !7583
  %16 = load i8*, i8** %key, align 8, !dbg !7583
  %call13 = call i8* @strchr(i8* %16, i32 58) #14, !dbg !7584
  store i8* %call13, i8** %p, align 8, !dbg !7581
  %17 = load i8*, i8** %p, align 8, !dbg !7585
  %tobool14 = icmp ne i8* %17, null, !dbg !7585
  br i1 %tobool14, label %if.then15, label %if.end20, !dbg !7587

if.then15:                                        ; preds = %while.body
  %18 = load %struct.AVFormatContext*, %struct.AVFormatContext** %s.addr, align 8, !dbg !7588
  %19 = load %struct.AVStream*, %struct.AVStream** %st.addr, align 8, !dbg !7589
  %20 = load i8*, i8** %p, align 8, !dbg !7590
  %add.ptr = getelementptr inbounds i8, i8* %20, i64 1, !dbg !7591
  %call16 = call i32 @check_stream_specifier(%struct.AVFormatContext* %18, %struct.AVStream* %19, i8* %add.ptr), !dbg !7592
  switch i32 %call16, label %sw.default [
    i32 1, label %sw.bb17
    i32 0, label %sw.bb18
  ], !dbg !7593

sw.bb17:                                          ; preds = %if.then15
  %21 = load i8*, i8** %p, align 8, !dbg !7594
  store i8 0, i8* %21, align 1, !dbg !7596
  br label %sw.epilog19, !dbg !7597

sw.bb18:                                          ; preds = %if.then15
  br label %while.cond, !dbg !7598, !llvm.loop !7599

sw.default:                                       ; preds = %if.then15
  call void @exit_program(i32 1) #13, !dbg !7600
  unreachable, !dbg !7600

sw.epilog19:                                      ; preds = %sw.bb17
  br label %if.end20, !dbg !7601

if.end20:                                         ; preds = %sw.epilog19, %while.body
  %22 = bitcast %struct.AVClass** %cc to i8*, !dbg !7602
  %23 = load %struct.AVDictionaryEntry*, %struct.AVDictionaryEntry** %t, align 8, !dbg !7604
  %key21 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %23, i32 0, i32 0, !dbg !7605
  %24 = load i8*, i8** %key21, align 8, !dbg !7605
  %25 = load i32, i32* %flags, align 4, !dbg !7606
  %call22 = call %struct.AVOption* @av_opt_find(i8* %22, i8* %24, i8* null, i32 %25, i32 2), !dbg !7607
  %tobool23 = icmp ne %struct.AVOption* %call22, null, !dbg !7607
  br i1 %tobool23, label %if.then31, label %lor.lhs.false, !dbg !7608

lor.lhs.false:                                    ; preds = %if.end20
  %26 = load %struct.AVCodec*, %struct.AVCodec** %codec.addr, align 8, !dbg !7609
  %tobool24 = icmp ne %struct.AVCodec* %26, null, !dbg !7609
  br i1 %tobool24, label %lor.lhs.false25, label %if.then31, !dbg !7610

lor.lhs.false25:                                  ; preds = %lor.lhs.false
  %27 = load %struct.AVCodec*, %struct.AVCodec** %codec.addr, align 8, !dbg !7611
  %priv_class = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %27, i32 0, i32 11, !dbg !7612
  %28 = load %struct.AVClass*, %struct.AVClass** %priv_class, align 8, !dbg !7612
  %tobool26 = icmp ne %struct.AVClass* %28, null, !dbg !7611
  br i1 %tobool26, label %land.lhs.true, label %if.else, !dbg !7613

land.lhs.true:                                    ; preds = %lor.lhs.false25
  %29 = load %struct.AVCodec*, %struct.AVCodec** %codec.addr, align 8, !dbg !7614
  %priv_class27 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %29, i32 0, i32 11, !dbg !7615
  %30 = bitcast %struct.AVClass** %priv_class27 to i8*, !dbg !7616
  %31 = load %struct.AVDictionaryEntry*, %struct.AVDictionaryEntry** %t, align 8, !dbg !7617
  %key28 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %31, i32 0, i32 0, !dbg !7618
  %32 = load i8*, i8** %key28, align 8, !dbg !7618
  %33 = load i32, i32* %flags, align 4, !dbg !7619
  %call29 = call %struct.AVOption* @av_opt_find(i8* %30, i8* %32, i8* null, i32 %33, i32 2), !dbg !7620
  %tobool30 = icmp ne %struct.AVOption* %call29, null, !dbg !7620
  br i1 %tobool30, label %if.then31, label %if.else, !dbg !7621

if.then31:                                        ; preds = %land.lhs.true, %lor.lhs.false, %if.end20
  %34 = load %struct.AVDictionaryEntry*, %struct.AVDictionaryEntry** %t, align 8, !dbg !7623
  %key32 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %34, i32 0, i32 0, !dbg !7624
  %35 = load i8*, i8** %key32, align 8, !dbg !7624
  %36 = load %struct.AVDictionaryEntry*, %struct.AVDictionaryEntry** %t, align 8, !dbg !7625
  %value = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %36, i32 0, i32 1, !dbg !7626
  %37 = load i8*, i8** %value, align 8, !dbg !7626
  %call33 = call i32 @av_dict_set(%struct.AVDictionary** %ret, i8* %35, i8* %37, i32 0), !dbg !7627
  br label %if.end48, !dbg !7627

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false25
  %38 = load %struct.AVDictionaryEntry*, %struct.AVDictionaryEntry** %t, align 8, !dbg !7628
  %key34 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %38, i32 0, i32 0, !dbg !7630
  %39 = load i8*, i8** %key34, align 8, !dbg !7630
  %arrayidx = getelementptr inbounds i8, i8* %39, i64 0, !dbg !7628
  %40 = load i8, i8* %arrayidx, align 1, !dbg !7628
  %conv = sext i8 %40 to i32, !dbg !7628
  %41 = load i8, i8* %prefix, align 1, !dbg !7631
  %conv35 = sext i8 %41 to i32, !dbg !7631
  %cmp = icmp eq i32 %conv, %conv35, !dbg !7632
  br i1 %cmp, label %land.lhs.true37, label %if.end47, !dbg !7633

land.lhs.true37:                                  ; preds = %if.else
  %42 = bitcast %struct.AVClass** %cc to i8*, !dbg !7634
  %43 = load %struct.AVDictionaryEntry*, %struct.AVDictionaryEntry** %t, align 8, !dbg !7635
  %key38 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %43, i32 0, i32 0, !dbg !7636
  %44 = load i8*, i8** %key38, align 8, !dbg !7636
  %add.ptr39 = getelementptr inbounds i8, i8* %44, i64 1, !dbg !7637
  %45 = load i32, i32* %flags, align 4, !dbg !7638
  %call40 = call %struct.AVOption* @av_opt_find(i8* %42, i8* %add.ptr39, i8* null, i32 %45, i32 2), !dbg !7639
  %tobool41 = icmp ne %struct.AVOption* %call40, null, !dbg !7639
  br i1 %tobool41, label %if.then42, label %if.end47, !dbg !7640

if.then42:                                        ; preds = %land.lhs.true37
  %46 = load %struct.AVDictionaryEntry*, %struct.AVDictionaryEntry** %t, align 8, !dbg !7642
  %key43 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %46, i32 0, i32 0, !dbg !7643
  %47 = load i8*, i8** %key43, align 8, !dbg !7643
  %add.ptr44 = getelementptr inbounds i8, i8* %47, i64 1, !dbg !7644
  %48 = load %struct.AVDictionaryEntry*, %struct.AVDictionaryEntry** %t, align 8, !dbg !7645
  %value45 = getelementptr inbounds %struct.AVDictionaryEntry, %struct.AVDictionaryEntry* %48, i32 0, i32 1, !dbg !7646
  %49 = load i8*, i8** %value45, align 8, !dbg !7646
  %call46 = call i32 @av_dict_set(%struct.AVDictionary** %ret, i8* %add.ptr44, i8* %49, i32 0), !dbg !7647
  br label %if.end47, !dbg !7647

if.end47:                                         ; preds = %if.then42, %land.lhs.true37, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then31
  %50 = load i8*, i8** %p, align 8, !dbg !7648
  %tobool49 = icmp ne i8* %50, null, !dbg !7648
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !7650

if.then50:                                        ; preds = %if.end48
  %51 = load i8*, i8** %p, align 8, !dbg !7651
  store i8 58, i8* %51, align 1, !dbg !7652
  br label %if.end51, !dbg !7653

if.end51:                                         ; preds = %if.then50, %if.end48
  br label %while.cond, !dbg !7654, !llvm.loop !7599

while.end:                                        ; preds = %while.cond
  %52 = load %struct.AVDictionary*, %struct.AVDictionary** %ret, align 8, !dbg !7656
  ret %struct.AVDictionary* %52, !dbg !7657
}

declare %struct.AVDictionaryEntry* @av_dict_get(%struct.AVDictionary*, i8*, %struct.AVDictionaryEntry*, i32) #1

declare %struct.AVOption* @av_opt_find(i8*, i8*, i8*, i32, i32) #1

; Function Attrs: nounwind uwtable
define %struct.AVDictionary** @setup_find_stream_info_opts(%struct.AVFormatContext* %s, %struct.AVDictionary* %codec_opts) #0 !dbg !7658 {
entry:
  %retval = alloca %struct.AVDictionary**, align 8
  %s.addr = alloca %struct.AVFormatContext*, align 8
  %codec_opts.addr = alloca %struct.AVDictionary*, align 8
  %i = alloca i32, align 4
  %opts = alloca %struct.AVDictionary**, align 8
  store %struct.AVFormatContext* %s, %struct.AVFormatContext** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVFormatContext** %s.addr, metadata !7661, metadata !1512), !dbg !7662
  store %struct.AVDictionary* %codec_opts, %struct.AVDictionary** %codec_opts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVDictionary** %codec_opts.addr, metadata !7663, metadata !1512), !dbg !7664
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7665, metadata !1512), !dbg !7666
  call void @llvm.dbg.declare(metadata %struct.AVDictionary*** %opts, metadata !7667, metadata !1512), !dbg !7668
  %0 = load %struct.AVFormatContext*, %struct.AVFormatContext** %s.addr, align 8, !dbg !7669
  %nb_streams = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %0, i32 0, i32 6, !dbg !7671
  %1 = load i32, i32* %nb_streams, align 4, !dbg !7671
  %tobool = icmp ne i32 %1, 0, !dbg !7669
  br i1 %tobool, label %if.end, label %if.then, !dbg !7672

if.then:                                          ; preds = %entry
  store %struct.AVDictionary** null, %struct.AVDictionary*** %retval, align 8, !dbg !7673
  br label %return, !dbg !7673

if.end:                                           ; preds = %entry
  %2 = load %struct.AVFormatContext*, %struct.AVFormatContext** %s.addr, align 8, !dbg !7674
  %nb_streams1 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %2, i32 0, i32 6, !dbg !7675
  %3 = load i32, i32* %nb_streams1, align 4, !dbg !7675
  %conv = zext i32 %3 to i64, !dbg !7674
  %call = call i8* @av_mallocz_array(i64 %conv, i64 8), !dbg !7676
  %4 = bitcast i8* %call to %struct.AVDictionary**, !dbg !7676
  store %struct.AVDictionary** %4, %struct.AVDictionary*** %opts, align 8, !dbg !7677
  %5 = load %struct.AVDictionary**, %struct.AVDictionary*** %opts, align 8, !dbg !7678
  %tobool2 = icmp ne %struct.AVDictionary** %5, null, !dbg !7678
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !7680

if.then3:                                         ; preds = %if.end
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.113, i32 0, i32 0)), !dbg !7681
  store %struct.AVDictionary** null, %struct.AVDictionary*** %retval, align 8, !dbg !7683
  br label %return, !dbg !7683

if.end4:                                          ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !7684
  br label %for.cond, !dbg !7686

for.cond:                                         ; preds = %for.inc, %if.end4
  %6 = load i32, i32* %i, align 4, !dbg !7687
  %7 = load %struct.AVFormatContext*, %struct.AVFormatContext** %s.addr, align 8, !dbg !7690
  %nb_streams5 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %7, i32 0, i32 6, !dbg !7691
  %8 = load i32, i32* %nb_streams5, align 4, !dbg !7691
  %cmp = icmp ult i32 %6, %8, !dbg !7692
  br i1 %cmp, label %for.body, label %for.end, !dbg !7693

for.body:                                         ; preds = %for.cond
  %9 = load %struct.AVDictionary*, %struct.AVDictionary** %codec_opts.addr, align 8, !dbg !7694
  %10 = load i32, i32* %i, align 4, !dbg !7695
  %idxprom = sext i32 %10 to i64, !dbg !7696
  %11 = load %struct.AVFormatContext*, %struct.AVFormatContext** %s.addr, align 8, !dbg !7696
  %streams = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %11, i32 0, i32 7, !dbg !7697
  %12 = load %struct.AVStream**, %struct.AVStream*** %streams, align 8, !dbg !7697
  %arrayidx = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %12, i64 %idxprom, !dbg !7696
  %13 = load %struct.AVStream*, %struct.AVStream** %arrayidx, align 8, !dbg !7696
  %codecpar = getelementptr inbounds %struct.AVStream, %struct.AVStream* %13, i32 0, i32 19, !dbg !7698
  %14 = load %struct.AVCodecParameters*, %struct.AVCodecParameters** %codecpar, align 8, !dbg !7698
  %codec_id = getelementptr inbounds %struct.AVCodecParameters, %struct.AVCodecParameters* %14, i32 0, i32 1, !dbg !7699
  %15 = load i32, i32* %codec_id, align 4, !dbg !7699
  %16 = load %struct.AVFormatContext*, %struct.AVFormatContext** %s.addr, align 8, !dbg !7700
  %17 = load i32, i32* %i, align 4, !dbg !7701
  %idxprom7 = sext i32 %17 to i64, !dbg !7702
  %18 = load %struct.AVFormatContext*, %struct.AVFormatContext** %s.addr, align 8, !dbg !7702
  %streams8 = getelementptr inbounds %struct.AVFormatContext, %struct.AVFormatContext* %18, i32 0, i32 7, !dbg !7703
  %19 = load %struct.AVStream**, %struct.AVStream*** %streams8, align 8, !dbg !7703
  %arrayidx9 = getelementptr inbounds %struct.AVStream*, %struct.AVStream** %19, i64 %idxprom7, !dbg !7702
  %20 = load %struct.AVStream*, %struct.AVStream** %arrayidx9, align 8, !dbg !7702
  %call10 = call %struct.AVDictionary* @filter_codec_opts(%struct.AVDictionary* %9, i32 %15, %struct.AVFormatContext* %16, %struct.AVStream* %20, %struct.AVCodec* null), !dbg !7704
  %21 = load i32, i32* %i, align 4, !dbg !7705
  %idxprom11 = sext i32 %21 to i64, !dbg !7706
  %22 = load %struct.AVDictionary**, %struct.AVDictionary*** %opts, align 8, !dbg !7706
  %arrayidx12 = getelementptr inbounds %struct.AVDictionary*, %struct.AVDictionary** %22, i64 %idxprom11, !dbg !7706
  store %struct.AVDictionary* %call10, %struct.AVDictionary** %arrayidx12, align 8, !dbg !7707
  br label %for.inc, !dbg !7706

for.inc:                                          ; preds = %for.body
  %23 = load i32, i32* %i, align 4, !dbg !7708
  %inc = add nsw i32 %23, 1, !dbg !7708
  store i32 %inc, i32* %i, align 4, !dbg !7708
  br label %for.cond, !dbg !7710, !llvm.loop !7711

for.end:                                          ; preds = %for.cond
  %24 = load %struct.AVDictionary**, %struct.AVDictionary*** %opts, align 8, !dbg !7713
  store %struct.AVDictionary** %24, %struct.AVDictionary*** %retval, align 8, !dbg !7714
  br label %return, !dbg !7714

return:                                           ; preds = %for.end, %if.then3, %if.then
  %25 = load %struct.AVDictionary**, %struct.AVDictionary*** %retval, align 8, !dbg !7715
  ret %struct.AVDictionary** %25, !dbg !7715
}

declare i8* @av_mallocz_array(i64, i64) #1

; Function Attrs: nounwind uwtable
define i8* @grow_array(i8* %array, i32 %elem_size, i32* %size, i32 %new_size) #0 !dbg !7716 {
entry:
  %retval = alloca i8*, align 8
  %array.addr = alloca i8*, align 8
  %elem_size.addr = alloca i32, align 4
  %size.addr = alloca i32*, align 8
  %new_size.addr = alloca i32, align 4
  %tmp = alloca i8*, align 8
  store i8* %array, i8** %array.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %array.addr, metadata !7719, metadata !1512), !dbg !7720
  store i32 %elem_size, i32* %elem_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %elem_size.addr, metadata !7721, metadata !1512), !dbg !7722
  store i32* %size, i32** %size.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %size.addr, metadata !7723, metadata !1512), !dbg !7724
  store i32 %new_size, i32* %new_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %new_size.addr, metadata !7725, metadata !1512), !dbg !7726
  %0 = load i32, i32* %new_size.addr, align 4, !dbg !7727
  %1 = load i32, i32* %elem_size.addr, align 4, !dbg !7729
  %div = sdiv i32 2147483647, %1, !dbg !7730
  %cmp = icmp sge i32 %0, %div, !dbg !7731
  br i1 %cmp, label %if.then, label %if.end, !dbg !7732

if.then:                                          ; preds = %entry
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.114, i32 0, i32 0)), !dbg !7733
  call void @exit_program(i32 1) #13, !dbg !7735
  unreachable, !dbg !7735

if.end:                                           ; preds = %entry
  %2 = load i32*, i32** %size.addr, align 8, !dbg !7736
  %3 = load i32, i32* %2, align 4, !dbg !7738
  %4 = load i32, i32* %new_size.addr, align 4, !dbg !7739
  %cmp1 = icmp slt i32 %3, %4, !dbg !7740
  br i1 %cmp1, label %if.then2, label %if.end8, !dbg !7741

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i8** %tmp, metadata !7742, metadata !1512), !dbg !7744
  %5 = load i8*, i8** %array.addr, align 8, !dbg !7745
  %6 = load i32, i32* %new_size.addr, align 4, !dbg !7746
  %conv = sext i32 %6 to i64, !dbg !7746
  %7 = load i32, i32* %elem_size.addr, align 4, !dbg !7747
  %conv3 = sext i32 %7 to i64, !dbg !7747
  %call = call i8* @av_realloc_array(i8* %5, i64 %conv, i64 %conv3), !dbg !7748
  store i8* %call, i8** %tmp, align 8, !dbg !7744
  %8 = load i8*, i8** %tmp, align 8, !dbg !7749
  %tobool = icmp ne i8* %8, null, !dbg !7749
  br i1 %tobool, label %if.end5, label %if.then4, !dbg !7751

if.then4:                                         ; preds = %if.then2
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 16, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.115, i32 0, i32 0)), !dbg !7752
  call void @exit_program(i32 1) #13, !dbg !7754
  unreachable, !dbg !7754

if.end5:                                          ; preds = %if.then2
  %9 = load i8*, i8** %tmp, align 8, !dbg !7755
  %10 = load i32*, i32** %size.addr, align 8, !dbg !7756
  %11 = load i32, i32* %10, align 4, !dbg !7757
  %12 = load i32, i32* %elem_size.addr, align 4, !dbg !7758
  %mul = mul nsw i32 %11, %12, !dbg !7759
  %idx.ext = sext i32 %mul to i64, !dbg !7760
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %idx.ext, !dbg !7760
  %13 = load i32, i32* %new_size.addr, align 4, !dbg !7761
  %14 = load i32*, i32** %size.addr, align 8, !dbg !7762
  %15 = load i32, i32* %14, align 4, !dbg !7763
  %sub = sub nsw i32 %13, %15, !dbg !7764
  %16 = load i32, i32* %elem_size.addr, align 4, !dbg !7765
  %mul6 = mul nsw i32 %sub, %16, !dbg !7766
  %conv7 = sext i32 %mul6 to i64, !dbg !7767
  call void @llvm.memset.p0i8.i64(i8* %add.ptr, i8 0, i64 %conv7, i32 1, i1 false), !dbg !7768
  %17 = load i32, i32* %new_size.addr, align 4, !dbg !7769
  %18 = load i32*, i32** %size.addr, align 8, !dbg !7770
  store i32 %17, i32* %18, align 4, !dbg !7771
  %19 = load i8*, i8** %tmp, align 8, !dbg !7772
  store i8* %19, i8** %retval, align 8, !dbg !7773
  br label %return, !dbg !7773

if.end8:                                          ; preds = %if.end
  %20 = load i8*, i8** %array.addr, align 8, !dbg !7774
  store i8* %20, i8** %retval, align 8, !dbg !7775
  br label %return, !dbg !7775

return:                                           ; preds = %if.end8, %if.end5
  %21 = load i8*, i8** %retval, align 8, !dbg !7776
  ret i8* %21, !dbg !7776
}

declare i8* @av_realloc_array(i8*, i64, i64) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #9

; Function Attrs: nounwind uwtable
define double @get_rotation(%struct.AVStream* %st) #0 !dbg !7777 {
entry:
  %st.addr = alloca %struct.AVStream*, align 8
  %displaymatrix = alloca i8*, align 8
  %theta = alloca double, align 8
  store %struct.AVStream* %st, %struct.AVStream** %st.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVStream** %st.addr, metadata !7780, metadata !1512), !dbg !7781
  call void @llvm.dbg.declare(metadata i8** %displaymatrix, metadata !7782, metadata !1512), !dbg !7783
  %0 = load %struct.AVStream*, %struct.AVStream** %st.addr, align 8, !dbg !7784
  %call = call i8* @av_stream_get_side_data(%struct.AVStream* %0, i32 5, i32* null), !dbg !7785
  store i8* %call, i8** %displaymatrix, align 8, !dbg !7783
  call void @llvm.dbg.declare(metadata double* %theta, metadata !7786, metadata !1512), !dbg !7787
  store double 0.000000e+00, double* %theta, align 8, !dbg !7787
  %1 = load i8*, i8** %displaymatrix, align 8, !dbg !7788
  %tobool = icmp ne i8* %1, null, !dbg !7788
  br i1 %tobool, label %if.then, label %if.end, !dbg !7790

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %displaymatrix, align 8, !dbg !7791
  %3 = bitcast i8* %2 to i32*, !dbg !7792
  %call1 = call double @av_display_rotation_get(i32* %3), !dbg !7793
  %sub = fsub double -0.000000e+00, %call1, !dbg !7794
  store double %sub, double* %theta, align 8, !dbg !7795
  br label %if.end, !dbg !7796

if.end:                                           ; preds = %if.then, %entry
  %4 = load double, double* %theta, align 8, !dbg !7797
  %div = fdiv double %4, 3.600000e+02, !dbg !7798
  %add = fadd double %div, 2.500000e-03, !dbg !7799
  %call2 = call double @floor(double %add) #2, !dbg !7800
  %mul = fmul double 3.600000e+02, %call2, !dbg !7801
  %5 = load double, double* %theta, align 8, !dbg !7802
  %sub3 = fsub double %5, %mul, !dbg !7802
  store double %sub3, double* %theta, align 8, !dbg !7802
  %6 = load double, double* %theta, align 8, !dbg !7803
  %7 = load double, double* %theta, align 8, !dbg !7805
  %div4 = fdiv double %7, 9.000000e+01, !dbg !7806
  %call5 = call double @round(double %div4) #2, !dbg !7807
  %mul6 = fmul double 9.000000e+01, %call5, !dbg !7808
  %sub7 = fsub double %6, %mul6, !dbg !7809
  %call8 = call double @fabs(double %sub7) #2, !dbg !7810
  %cmp = fcmp ogt double %call8, 2.000000e+00, !dbg !7812
  br i1 %cmp, label %if.then9, label %if.end10, !dbg !7813

if.then9:                                         ; preds = %if.end
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 24, i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.116, i32 0, i32 0)), !dbg !7814
  br label %if.end10, !dbg !7814

if.end10:                                         ; preds = %if.then9, %if.end
  %8 = load double, double* %theta, align 8, !dbg !7815
  ret double %8, !dbg !7816
}

declare i8* @av_stream_get_side_data(%struct.AVStream*, i32, i32*) #1

declare double @av_display_rotation_get(i32*) #1

; Function Attrs: nounwind readnone
declare double @floor(double) #10

; Function Attrs: nounwind readnone
declare double @fabs(double) #10

; Function Attrs: nounwind readnone
declare double @round(double) #10

; Function Attrs: nounwind uwtable
define i32 @show_sources(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !7817 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %fmt = alloca %struct.AVInputFormat*, align 8
  %dev = alloca i8*, align 8
  %opts = alloca %struct.AVDictionary*, align 8
  %ret = alloca i32, align 4
  %error_level = alloca i32, align 4
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !7818, metadata !1512), !dbg !7819
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !7820, metadata !1512), !dbg !7821
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !7822, metadata !1512), !dbg !7823
  call void @llvm.dbg.declare(metadata %struct.AVInputFormat** %fmt, metadata !7824, metadata !1512), !dbg !7826
  store %struct.AVInputFormat* null, %struct.AVInputFormat** %fmt, align 8, !dbg !7826
  call void @llvm.dbg.declare(metadata i8** %dev, metadata !7827, metadata !1512), !dbg !7828
  store i8* null, i8** %dev, align 8, !dbg !7828
  call void @llvm.dbg.declare(metadata %struct.AVDictionary** %opts, metadata !7829, metadata !1512), !dbg !7830
  store %struct.AVDictionary* null, %struct.AVDictionary** %opts, align 8, !dbg !7830
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7831, metadata !1512), !dbg !7832
  store i32 0, i32* %ret, align 4, !dbg !7832
  call void @llvm.dbg.declare(metadata i32* %error_level, metadata !7833, metadata !1512), !dbg !7834
  %call = call i32 @av_log_get_level(), !dbg !7835
  store i32 %call, i32* %error_level, align 4, !dbg !7834
  call void @av_log_set_level(i32 16), !dbg !7836
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !7837
  %call1 = call i32 @show_sinks_sources_parse_arg(i8* %0, i8** %dev, %struct.AVDictionary** %opts), !dbg !7839
  store i32 %call1, i32* %ret, align 4, !dbg !7840
  %cmp = icmp slt i32 %call1, 0, !dbg !7841
  br i1 %cmp, label %if.then, label %if.end, !dbg !7842

if.then:                                          ; preds = %entry
  br label %fail, !dbg !7843

if.end:                                           ; preds = %entry
  br label %do.body, !dbg !7844, !llvm.loop !7845

do.body:                                          ; preds = %do.cond, %if.end
  %1 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7846
  %call2 = call %struct.AVInputFormat* @av_input_audio_device_next(%struct.AVInputFormat* %1), !dbg !7848
  store %struct.AVInputFormat* %call2, %struct.AVInputFormat** %fmt, align 8, !dbg !7849
  %2 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7850
  %tobool = icmp ne %struct.AVInputFormat* %2, null, !dbg !7850
  br i1 %tobool, label %if.then3, label %if.end15, !dbg !7852

if.then3:                                         ; preds = %do.body
  %3 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7853
  %name = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %3, i32 0, i32 0, !dbg !7856
  %4 = load i8*, i8** %name, align 8, !dbg !7856
  %call4 = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.117, i32 0, i32 0)) #14, !dbg !7857
  %tobool5 = icmp ne i32 %call4, 0, !dbg !7857
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !7858

if.then6:                                         ; preds = %if.then3
  br label %do.cond, !dbg !7859

if.end7:                                          ; preds = %if.then3
  %5 = load i8*, i8** %dev, align 8, !dbg !7860
  %tobool8 = icmp ne i8* %5, null, !dbg !7860
  br i1 %tobool8, label %land.lhs.true, label %if.end13, !dbg !7862

land.lhs.true:                                    ; preds = %if.end7
  %6 = load i8*, i8** %dev, align 8, !dbg !7863
  %7 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7865
  %name9 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %7, i32 0, i32 0, !dbg !7866
  %8 = load i8*, i8** %name9, align 8, !dbg !7866
  %call10 = call i32 @av_match_name(i8* %6, i8* %8), !dbg !7867
  %tobool11 = icmp ne i32 %call10, 0, !dbg !7867
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !7868

if.then12:                                        ; preds = %land.lhs.true
  br label %do.cond, !dbg !7869

if.end13:                                         ; preds = %land.lhs.true, %if.end7
  %9 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7870
  %10 = load %struct.AVDictionary*, %struct.AVDictionary** %opts, align 8, !dbg !7871
  %call14 = call i32 @print_device_sources(%struct.AVInputFormat* %9, %struct.AVDictionary* %10), !dbg !7872
  br label %if.end15, !dbg !7873

if.end15:                                         ; preds = %if.end13, %do.body
  br label %do.cond, !dbg !7874

do.cond:                                          ; preds = %if.end15, %if.then12, %if.then6
  %11 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7875
  %tobool16 = icmp ne %struct.AVInputFormat* %11, null, !dbg !7877
  br i1 %tobool16, label %do.body, label %do.end, !dbg !7877, !llvm.loop !7845

do.end:                                           ; preds = %do.cond
  br label %do.body17, !dbg !7878, !llvm.loop !7879

do.body17:                                        ; preds = %do.cond30, %do.end
  %12 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7880
  %call18 = call %struct.AVInputFormat* @av_input_video_device_next(%struct.AVInputFormat* %12), !dbg !7882
  store %struct.AVInputFormat* %call18, %struct.AVInputFormat** %fmt, align 8, !dbg !7883
  %13 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7884
  %tobool19 = icmp ne %struct.AVInputFormat* %13, null, !dbg !7884
  br i1 %tobool19, label %if.then20, label %if.end29, !dbg !7886

if.then20:                                        ; preds = %do.body17
  %14 = load i8*, i8** %dev, align 8, !dbg !7887
  %tobool21 = icmp ne i8* %14, null, !dbg !7887
  br i1 %tobool21, label %land.lhs.true22, label %if.end27, !dbg !7890

land.lhs.true22:                                  ; preds = %if.then20
  %15 = load i8*, i8** %dev, align 8, !dbg !7891
  %16 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7893
  %name23 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %16, i32 0, i32 0, !dbg !7894
  %17 = load i8*, i8** %name23, align 8, !dbg !7894
  %call24 = call i32 @av_match_name(i8* %15, i8* %17), !dbg !7895
  %tobool25 = icmp ne i32 %call24, 0, !dbg !7895
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !7896

if.then26:                                        ; preds = %land.lhs.true22
  br label %do.cond30, !dbg !7897

if.end27:                                         ; preds = %land.lhs.true22, %if.then20
  %18 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7898
  %19 = load %struct.AVDictionary*, %struct.AVDictionary** %opts, align 8, !dbg !7899
  %call28 = call i32 @print_device_sources(%struct.AVInputFormat* %18, %struct.AVDictionary* %19), !dbg !7900
  br label %if.end29, !dbg !7901

if.end29:                                         ; preds = %if.end27, %do.body17
  br label %do.cond30, !dbg !7902

do.cond30:                                        ; preds = %if.end29, %if.then26
  %20 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt, align 8, !dbg !7903
  %tobool31 = icmp ne %struct.AVInputFormat* %20, null, !dbg !7904
  br i1 %tobool31, label %do.body17, label %do.end32, !dbg !7904, !llvm.loop !7879

do.end32:                                         ; preds = %do.cond30
  br label %fail, !dbg !7905

fail:                                             ; preds = %do.end32, %if.then
  call void @av_dict_free(%struct.AVDictionary** %opts), !dbg !7907
  %21 = load i8*, i8** %dev, align 8, !dbg !7908
  call void @av_free(i8* %21), !dbg !7909
  %22 = load i32, i32* %error_level, align 4, !dbg !7910
  call void @av_log_set_level(i32 %22), !dbg !7911
  %23 = load i32, i32* %ret, align 4, !dbg !7912
  ret i32 %23, !dbg !7913
}

; Function Attrs: nounwind uwtable
define internal i32 @show_sinks_sources_parse_arg(i8* %arg, i8** %dev, %struct.AVDictionary** %opts) #0 !dbg !7914 {
entry:
  %retval = alloca i32, align 4
  %arg.addr = alloca i8*, align 8
  %dev.addr = alloca i8**, align 8
  %opts.addr = alloca %struct.AVDictionary**, align 8
  %ret = alloca i32, align 4
  %opts_str = alloca i8*, align 8
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !7917, metadata !1512), !dbg !7918
  store i8** %dev, i8*** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %dev.addr, metadata !7919, metadata !1512), !dbg !7920
  store %struct.AVDictionary** %opts, %struct.AVDictionary*** %opts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVDictionary*** %opts.addr, metadata !7921, metadata !1512), !dbg !7922
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7923, metadata !1512), !dbg !7924
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !7925
  %tobool = icmp ne i8* %0, null, !dbg !7925
  br i1 %tobool, label %if.then, label %if.else, !dbg !7927

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %opts_str, metadata !7928, metadata !1512), !dbg !7930
  store i8* null, i8** %opts_str, align 8, !dbg !7930
  br label %do.body, !dbg !7931, !llvm.loop !7932

do.body:                                          ; preds = %if.then
  %1 = load i8**, i8*** %dev.addr, align 8, !dbg !7933
  %tobool1 = icmp ne i8** %1, null, !dbg !7933
  br i1 %tobool1, label %land.lhs.true, label %if.then3, !dbg !7937

land.lhs.true:                                    ; preds = %do.body
  %2 = load %struct.AVDictionary**, %struct.AVDictionary*** %opts.addr, align 8, !dbg !7938
  %tobool2 = icmp ne %struct.AVDictionary** %2, null, !dbg !7938
  br i1 %tobool2, label %if.end, label %if.then3, !dbg !7940

if.then3:                                         ; preds = %land.lhs.true, %do.body
  call void (i8*, i32, i8*, ...) @av_log(i8* null, i32 0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.241, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.61, i32 0, i32 0), i32 2260), !dbg !7941
  call void @abort() #12, !dbg !7944
  unreachable, !dbg !7946

if.end:                                           ; preds = %land.lhs.true
  br label %do.end, !dbg !7947

do.end:                                           ; preds = %if.end
  %3 = load i8*, i8** %arg.addr, align 8, !dbg !7949
  %call = call noalias i8* @av_strdup(i8* %3), !dbg !7950
  %4 = load i8**, i8*** %dev.addr, align 8, !dbg !7951
  store i8* %call, i8** %4, align 8, !dbg !7952
  %5 = load i8**, i8*** %dev.addr, align 8, !dbg !7953
  %6 = load i8*, i8** %5, align 8, !dbg !7955
  %tobool4 = icmp ne i8* %6, null, !dbg !7955
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !7956

if.then5:                                         ; preds = %do.end
  store i32 -12, i32* %retval, align 4, !dbg !7957
  br label %return, !dbg !7957

if.end6:                                          ; preds = %do.end
  %7 = load i8**, i8*** %dev.addr, align 8, !dbg !7958
  %8 = load i8*, i8** %7, align 8, !dbg !7960
  %call7 = call i8* @strchr(i8* %8, i32 44) #14, !dbg !7961
  store i8* %call7, i8** %opts_str, align 8, !dbg !7962
  %tobool8 = icmp ne i8* %call7, null, !dbg !7962
  br i1 %tobool8, label %if.then9, label %if.end16, !dbg !7963

if.then9:                                         ; preds = %if.end6
  %9 = load i8*, i8** %opts_str, align 8, !dbg !7964
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1, !dbg !7964
  store i8* %incdec.ptr, i8** %opts_str, align 8, !dbg !7964
  store i8 0, i8* %9, align 1, !dbg !7966
  %10 = load i8*, i8** %opts_str, align 8, !dbg !7967
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 0, !dbg !7967
  %11 = load i8, i8* %arrayidx, align 1, !dbg !7967
  %conv = sext i8 %11 to i32, !dbg !7967
  %tobool10 = icmp ne i32 %conv, 0, !dbg !7967
  br i1 %tobool10, label %land.lhs.true11, label %if.end15, !dbg !7969

land.lhs.true11:                                  ; preds = %if.then9
  %12 = load %struct.AVDictionary**, %struct.AVDictionary*** %opts.addr, align 8, !dbg !7970
  %13 = load i8*, i8** %opts_str, align 8, !dbg !7972
  %call12 = call i32 @av_dict_parse_string(%struct.AVDictionary** %12, i8* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.124, i32 0, i32 0), i32 0), !dbg !7973
  store i32 %call12, i32* %ret, align 4, !dbg !7974
  %cmp = icmp slt i32 %call12, 0, !dbg !7975
  br i1 %cmp, label %if.then14, label %if.end15, !dbg !7976

if.then14:                                        ; preds = %land.lhs.true11
  %14 = load i8**, i8*** %dev.addr, align 8, !dbg !7977
  %15 = bitcast i8** %14 to i8*, !dbg !7977
  call void @av_freep(i8* %15), !dbg !7979
  %16 = load i32, i32* %ret, align 4, !dbg !7980
  store i32 %16, i32* %retval, align 4, !dbg !7981
  br label %return, !dbg !7981

if.end15:                                         ; preds = %land.lhs.true11, %if.then9
  br label %if.end16, !dbg !7982

if.end16:                                         ; preds = %if.end15, %if.end6
  br label %if.end18, !dbg !7983

if.else:                                          ; preds = %entry
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([99 x i8], [99 x i8]* @.str.242, i32 0, i32 0)), !dbg !7984
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.end16
  store i32 0, i32* %retval, align 4, !dbg !7985
  br label %return, !dbg !7985

return:                                           ; preds = %if.end18, %if.then14, %if.then5
  %17 = load i32, i32* %retval, align 4, !dbg !7986
  ret i32 %17, !dbg !7986
}

declare %struct.AVInputFormat* @av_input_audio_device_next(%struct.AVInputFormat*) #1

declare i32 @av_match_name(i8*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @print_device_sources(%struct.AVInputFormat* %fmt, %struct.AVDictionary* %opts) #0 !dbg !7987 {
entry:
  %retval = alloca i32, align 4
  %fmt.addr = alloca %struct.AVInputFormat*, align 8
  %opts.addr = alloca %struct.AVDictionary*, align 8
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  %device_list = alloca %struct.AVDeviceInfoList*, align 8
  store %struct.AVInputFormat* %fmt, %struct.AVInputFormat** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVInputFormat** %fmt.addr, metadata !7990, metadata !1512), !dbg !7991
  store %struct.AVDictionary* %opts, %struct.AVDictionary** %opts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVDictionary** %opts.addr, metadata !7992, metadata !1512), !dbg !7993
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7994, metadata !1512), !dbg !7995
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7996, metadata !1512), !dbg !7997
  call void @llvm.dbg.declare(metadata %struct.AVDeviceInfoList** %device_list, metadata !7998, metadata !1512), !dbg !8001
  store %struct.AVDeviceInfoList* null, %struct.AVDeviceInfoList** %device_list, align 8, !dbg !8001
  %0 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt.addr, align 8, !dbg !8002
  %tobool = icmp ne %struct.AVInputFormat* %0, null, !dbg !8002
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !8004

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt.addr, align 8, !dbg !8005
  %priv_class = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %1, i32 0, i32 5, !dbg !8007
  %2 = load %struct.AVClass*, %struct.AVClass** %priv_class, align 8, !dbg !8007
  %tobool1 = icmp ne %struct.AVClass* %2, null, !dbg !8005
  br i1 %tobool1, label %lor.lhs.false2, label %if.then, !dbg !8008

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt.addr, align 8, !dbg !8009
  %priv_class3 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %3, i32 0, i32 5, !dbg !8011
  %4 = load %struct.AVClass*, %struct.AVClass** %priv_class3, align 8, !dbg !8011
  %category = getelementptr inbounds %struct.AVClass, %struct.AVClass* %4, i32 0, i32 8, !dbg !8012
  %5 = load i32, i32* %category, align 8, !dbg !8012
  %cmp = icmp eq i32 %5, 41, !dbg !8013
  br i1 %cmp, label %if.end, label %lor.lhs.false4, !dbg !8014

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %6 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt.addr, align 8, !dbg !8015
  %priv_class5 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %6, i32 0, i32 5, !dbg !8017
  %7 = load %struct.AVClass*, %struct.AVClass** %priv_class5, align 8, !dbg !8017
  %category6 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %7, i32 0, i32 8, !dbg !8018
  %8 = load i32, i32* %category6, align 8, !dbg !8018
  %cmp7 = icmp eq i32 %8, 43, !dbg !8019
  br i1 %cmp7, label %if.end, label %lor.lhs.false8, !dbg !8020

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %9 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt.addr, align 8, !dbg !8021
  %priv_class9 = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %9, i32 0, i32 5, !dbg !8023
  %10 = load %struct.AVClass*, %struct.AVClass** %priv_class9, align 8, !dbg !8023
  %category10 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %10, i32 0, i32 8, !dbg !8024
  %11 = load i32, i32* %category10, align 8, !dbg !8024
  %cmp11 = icmp eq i32 %11, 45, !dbg !8025
  br i1 %cmp11, label %if.end, label %if.then, !dbg !8026

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false, %entry
  store i32 -22, i32* %retval, align 4, !dbg !8027
  br label %return, !dbg !8027

if.end:                                           ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false2
  %12 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt.addr, align 8, !dbg !8028
  %name = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %12, i32 0, i32 0, !dbg !8029
  %13 = load i8*, i8** %name, align 8, !dbg !8029
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.243, i32 0, i32 0), i8* %13), !dbg !8030
  %14 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt.addr, align 8, !dbg !8031
  %get_device_list = getelementptr inbounds %struct.AVInputFormat, %struct.AVInputFormat* %14, i32 0, i32 19, !dbg !8033
  %15 = load i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)** %get_device_list, align 8, !dbg !8033
  %tobool12 = icmp ne i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)* %15, null, !dbg !8031
  br i1 %tobool12, label %if.end15, label %if.then13, !dbg !8034

if.then13:                                        ; preds = %if.end
  store i32 -38, i32* %ret, align 4, !dbg !8035
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.244, i32 0, i32 0)), !dbg !8037
  br label %fail, !dbg !8038

if.end15:                                         ; preds = %if.end
  %16 = load %struct.AVInputFormat*, %struct.AVInputFormat** %fmt.addr, align 8, !dbg !8039
  %17 = load %struct.AVDictionary*, %struct.AVDictionary** %opts.addr, align 8, !dbg !8041
  %call16 = call i32 @avdevice_list_input_sources(%struct.AVInputFormat* %16, i8* null, %struct.AVDictionary* %17, %struct.AVDeviceInfoList** %device_list), !dbg !8042
  store i32 %call16, i32* %ret, align 4, !dbg !8043
  %cmp17 = icmp slt i32 %call16, 0, !dbg !8044
  br i1 %cmp17, label %if.then18, label %if.end20, !dbg !8045

if.then18:                                        ; preds = %if.end15
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.245, i32 0, i32 0)), !dbg !8046
  br label %fail, !dbg !8048

if.end20:                                         ; preds = %if.end15
  store i32 0, i32* %i, align 4, !dbg !8049
  br label %for.cond, !dbg !8051

for.cond:                                         ; preds = %for.inc, %if.end20
  %18 = load i32, i32* %i, align 4, !dbg !8052
  %19 = load %struct.AVDeviceInfoList*, %struct.AVDeviceInfoList** %device_list, align 8, !dbg !8055
  %nb_devices = getelementptr inbounds %struct.AVDeviceInfoList, %struct.AVDeviceInfoList* %19, i32 0, i32 1, !dbg !8056
  %20 = load i32, i32* %nb_devices, align 8, !dbg !8056
  %cmp21 = icmp slt i32 %18, %20, !dbg !8057
  br i1 %cmp21, label %for.body, label %for.end, !dbg !8058

for.body:                                         ; preds = %for.cond
  %21 = load %struct.AVDeviceInfoList*, %struct.AVDeviceInfoList** %device_list, align 8, !dbg !8059
  %default_device = getelementptr inbounds %struct.AVDeviceInfoList, %struct.AVDeviceInfoList* %21, i32 0, i32 2, !dbg !8061
  %22 = load i32, i32* %default_device, align 4, !dbg !8061
  %23 = load i32, i32* %i, align 4, !dbg !8062
  %cmp22 = icmp eq i32 %22, %23, !dbg !8063
  %cond = select i1 %cmp22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.247, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), !dbg !8059
  %24 = load i32, i32* %i, align 4, !dbg !8064
  %idxprom = sext i32 %24 to i64, !dbg !8065
  %25 = load %struct.AVDeviceInfoList*, %struct.AVDeviceInfoList** %device_list, align 8, !dbg !8065
  %devices = getelementptr inbounds %struct.AVDeviceInfoList, %struct.AVDeviceInfoList* %25, i32 0, i32 0, !dbg !8066
  %26 = load %struct.AVDeviceInfo**, %struct.AVDeviceInfo*** %devices, align 8, !dbg !8066
  %arrayidx = getelementptr inbounds %struct.AVDeviceInfo*, %struct.AVDeviceInfo** %26, i64 %idxprom, !dbg !8065
  %27 = load %struct.AVDeviceInfo*, %struct.AVDeviceInfo** %arrayidx, align 8, !dbg !8065
  %device_name = getelementptr inbounds %struct.AVDeviceInfo, %struct.AVDeviceInfo* %27, i32 0, i32 0, !dbg !8067
  %28 = load i8*, i8** %device_name, align 8, !dbg !8067
  %29 = load i32, i32* %i, align 4, !dbg !8068
  %idxprom23 = sext i32 %29 to i64, !dbg !8069
  %30 = load %struct.AVDeviceInfoList*, %struct.AVDeviceInfoList** %device_list, align 8, !dbg !8069
  %devices24 = getelementptr inbounds %struct.AVDeviceInfoList, %struct.AVDeviceInfoList* %30, i32 0, i32 0, !dbg !8070
  %31 = load %struct.AVDeviceInfo**, %struct.AVDeviceInfo*** %devices24, align 8, !dbg !8070
  %arrayidx25 = getelementptr inbounds %struct.AVDeviceInfo*, %struct.AVDeviceInfo** %31, i64 %idxprom23, !dbg !8069
  %32 = load %struct.AVDeviceInfo*, %struct.AVDeviceInfo** %arrayidx25, align 8, !dbg !8069
  %device_description = getelementptr inbounds %struct.AVDeviceInfo, %struct.AVDeviceInfo* %32, i32 0, i32 1, !dbg !8071
  %33 = load i8*, i8** %device_description, align 8, !dbg !8071
  %call26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.246, i32 0, i32 0), i8* %cond, i8* %28, i8* %33), !dbg !8072
  br label %for.inc, !dbg !8073

for.inc:                                          ; preds = %for.body
  %34 = load i32, i32* %i, align 4, !dbg !8074
  %inc = add nsw i32 %34, 1, !dbg !8074
  store i32 %inc, i32* %i, align 4, !dbg !8074
  br label %for.cond, !dbg !8076, !llvm.loop !8077

for.end:                                          ; preds = %for.cond
  br label %fail, !dbg !8079

fail:                                             ; preds = %for.end, %if.then18, %if.then13
  call void @avdevice_free_list_devices(%struct.AVDeviceInfoList** %device_list), !dbg !8081
  %35 = load i32, i32* %ret, align 4, !dbg !8082
  store i32 %35, i32* %retval, align 4, !dbg !8083
  br label %return, !dbg !8083

return:                                           ; preds = %fail, %if.then
  %36 = load i32, i32* %retval, align 4, !dbg !8084
  ret i32 %36, !dbg !8084
}

declare %struct.AVInputFormat* @av_input_video_device_next(%struct.AVInputFormat*) #1

; Function Attrs: nounwind uwtable
define i32 @show_sinks(i8* %optctx, i8* %opt, i8* %arg) #0 !dbg !8085 {
entry:
  %optctx.addr = alloca i8*, align 8
  %opt.addr = alloca i8*, align 8
  %arg.addr = alloca i8*, align 8
  %fmt = alloca %struct.AVOutputFormat*, align 8
  %dev = alloca i8*, align 8
  %opts = alloca %struct.AVDictionary*, align 8
  %ret = alloca i32, align 4
  %error_level = alloca i32, align 4
  store i8* %optctx, i8** %optctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %optctx.addr, metadata !8086, metadata !1512), !dbg !8087
  store i8* %opt, i8** %opt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %opt.addr, metadata !8088, metadata !1512), !dbg !8089
  store i8* %arg, i8** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %arg.addr, metadata !8090, metadata !1512), !dbg !8091
  call void @llvm.dbg.declare(metadata %struct.AVOutputFormat** %fmt, metadata !8092, metadata !1512), !dbg !8094
  store %struct.AVOutputFormat* null, %struct.AVOutputFormat** %fmt, align 8, !dbg !8094
  call void @llvm.dbg.declare(metadata i8** %dev, metadata !8095, metadata !1512), !dbg !8096
  store i8* null, i8** %dev, align 8, !dbg !8096
  call void @llvm.dbg.declare(metadata %struct.AVDictionary** %opts, metadata !8097, metadata !1512), !dbg !8098
  store %struct.AVDictionary* null, %struct.AVDictionary** %opts, align 8, !dbg !8098
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8099, metadata !1512), !dbg !8100
  store i32 0, i32* %ret, align 4, !dbg !8100
  call void @llvm.dbg.declare(metadata i32* %error_level, metadata !8101, metadata !1512), !dbg !8102
  %call = call i32 @av_log_get_level(), !dbg !8103
  store i32 %call, i32* %error_level, align 4, !dbg !8102
  call void @av_log_set_level(i32 16), !dbg !8104
  %0 = load i8*, i8** %arg.addr, align 8, !dbg !8105
  %call1 = call i32 @show_sinks_sources_parse_arg(i8* %0, i8** %dev, %struct.AVDictionary** %opts), !dbg !8107
  store i32 %call1, i32* %ret, align 4, !dbg !8108
  %cmp = icmp slt i32 %call1, 0, !dbg !8109
  br i1 %cmp, label %if.then, label %if.end, !dbg !8110

if.then:                                          ; preds = %entry
  br label %fail, !dbg !8111

if.end:                                           ; preds = %entry
  br label %do.body, !dbg !8112, !llvm.loop !8113

do.body:                                          ; preds = %do.cond, %if.end
  %1 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !8114
  %call2 = call %struct.AVOutputFormat* @av_output_audio_device_next(%struct.AVOutputFormat* %1), !dbg !8116
  store %struct.AVOutputFormat* %call2, %struct.AVOutputFormat** %fmt, align 8, !dbg !8117
  %2 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !8118
  %tobool = icmp ne %struct.AVOutputFormat* %2, null, !dbg !8118
  br i1 %tobool, label %if.then3, label %if.end10, !dbg !8120

if.then3:                                         ; preds = %do.body
  %3 = load i8*, i8** %dev, align 8, !dbg !8121
  %tobool4 = icmp ne i8* %3, null, !dbg !8121
  br i1 %tobool4, label %land.lhs.true, label %if.end8, !dbg !8124

land.lhs.true:                                    ; preds = %if.then3
  %4 = load i8*, i8** %dev, align 8, !dbg !8125
  %5 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !8127
  %name = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %5, i32 0, i32 0, !dbg !8128
  %6 = load i8*, i8** %name, align 8, !dbg !8128
  %call5 = call i32 @av_match_name(i8* %4, i8* %6), !dbg !8129
  %tobool6 = icmp ne i32 %call5, 0, !dbg !8129
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !8130

if.then7:                                         ; preds = %land.lhs.true
  br label %do.cond, !dbg !8131

if.end8:                                          ; preds = %land.lhs.true, %if.then3
  %7 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !8132
  %8 = load %struct.AVDictionary*, %struct.AVDictionary** %opts, align 8, !dbg !8133
  %call9 = call i32 @print_device_sinks(%struct.AVOutputFormat* %7, %struct.AVDictionary* %8), !dbg !8134
  br label %if.end10, !dbg !8135

if.end10:                                         ; preds = %if.end8, %do.body
  br label %do.cond, !dbg !8136

do.cond:                                          ; preds = %if.end10, %if.then7
  %9 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !8137
  %tobool11 = icmp ne %struct.AVOutputFormat* %9, null, !dbg !8139
  br i1 %tobool11, label %do.body, label %do.end, !dbg !8139, !llvm.loop !8113

do.end:                                           ; preds = %do.cond
  br label %do.body12, !dbg !8140, !llvm.loop !8141

do.body12:                                        ; preds = %do.cond25, %do.end
  %10 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !8142
  %call13 = call %struct.AVOutputFormat* @av_output_video_device_next(%struct.AVOutputFormat* %10), !dbg !8144
  store %struct.AVOutputFormat* %call13, %struct.AVOutputFormat** %fmt, align 8, !dbg !8145
  %11 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !8146
  %tobool14 = icmp ne %struct.AVOutputFormat* %11, null, !dbg !8146
  br i1 %tobool14, label %if.then15, label %if.end24, !dbg !8148

if.then15:                                        ; preds = %do.body12
  %12 = load i8*, i8** %dev, align 8, !dbg !8149
  %tobool16 = icmp ne i8* %12, null, !dbg !8149
  br i1 %tobool16, label %land.lhs.true17, label %if.end22, !dbg !8152

land.lhs.true17:                                  ; preds = %if.then15
  %13 = load i8*, i8** %dev, align 8, !dbg !8153
  %14 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !8155
  %name18 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %14, i32 0, i32 0, !dbg !8156
  %15 = load i8*, i8** %name18, align 8, !dbg !8156
  %call19 = call i32 @av_match_name(i8* %13, i8* %15), !dbg !8157
  %tobool20 = icmp ne i32 %call19, 0, !dbg !8157
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !8158

if.then21:                                        ; preds = %land.lhs.true17
  br label %do.cond25, !dbg !8159

if.end22:                                         ; preds = %land.lhs.true17, %if.then15
  %16 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !8160
  %17 = load %struct.AVDictionary*, %struct.AVDictionary** %opts, align 8, !dbg !8161
  %call23 = call i32 @print_device_sinks(%struct.AVOutputFormat* %16, %struct.AVDictionary* %17), !dbg !8162
  br label %if.end24, !dbg !8163

if.end24:                                         ; preds = %if.end22, %do.body12
  br label %do.cond25, !dbg !8164

do.cond25:                                        ; preds = %if.end24, %if.then21
  %18 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt, align 8, !dbg !8165
  %tobool26 = icmp ne %struct.AVOutputFormat* %18, null, !dbg !8166
  br i1 %tobool26, label %do.body12, label %do.end27, !dbg !8166, !llvm.loop !8141

do.end27:                                         ; preds = %do.cond25
  br label %fail, !dbg !8167

fail:                                             ; preds = %do.end27, %if.then
  call void @av_dict_free(%struct.AVDictionary** %opts), !dbg !8169
  %19 = load i8*, i8** %dev, align 8, !dbg !8170
  call void @av_free(i8* %19), !dbg !8171
  %20 = load i32, i32* %error_level, align 4, !dbg !8172
  call void @av_log_set_level(i32 %20), !dbg !8173
  %21 = load i32, i32* %ret, align 4, !dbg !8174
  ret i32 %21, !dbg !8175
}

declare %struct.AVOutputFormat* @av_output_audio_device_next(%struct.AVOutputFormat*) #1

; Function Attrs: nounwind uwtable
define internal i32 @print_device_sinks(%struct.AVOutputFormat* %fmt, %struct.AVDictionary* %opts) #0 !dbg !8176 {
entry:
  %retval = alloca i32, align 4
  %fmt.addr = alloca %struct.AVOutputFormat*, align 8
  %opts.addr = alloca %struct.AVDictionary*, align 8
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  %device_list = alloca %struct.AVDeviceInfoList*, align 8
  store %struct.AVOutputFormat* %fmt, %struct.AVOutputFormat** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVOutputFormat** %fmt.addr, metadata !8179, metadata !1512), !dbg !8180
  store %struct.AVDictionary* %opts, %struct.AVDictionary** %opts.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVDictionary** %opts.addr, metadata !8181, metadata !1512), !dbg !8182
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8183, metadata !1512), !dbg !8184
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8185, metadata !1512), !dbg !8186
  call void @llvm.dbg.declare(metadata %struct.AVDeviceInfoList** %device_list, metadata !8187, metadata !1512), !dbg !8188
  store %struct.AVDeviceInfoList* null, %struct.AVDeviceInfoList** %device_list, align 8, !dbg !8188
  %0 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt.addr, align 8, !dbg !8189
  %tobool = icmp ne %struct.AVOutputFormat* %0, null, !dbg !8189
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !8191

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt.addr, align 8, !dbg !8192
  %priv_class = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %1, i32 0, i32 9, !dbg !8194
  %2 = load %struct.AVClass*, %struct.AVClass** %priv_class, align 8, !dbg !8194
  %tobool1 = icmp ne %struct.AVClass* %2, null, !dbg !8192
  br i1 %tobool1, label %lor.lhs.false2, label %if.then, !dbg !8195

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt.addr, align 8, !dbg !8196
  %priv_class3 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %3, i32 0, i32 9, !dbg !8198
  %4 = load %struct.AVClass*, %struct.AVClass** %priv_class3, align 8, !dbg !8198
  %category = getelementptr inbounds %struct.AVClass, %struct.AVClass* %4, i32 0, i32 8, !dbg !8199
  %5 = load i32, i32* %category, align 8, !dbg !8199
  %cmp = icmp eq i32 %5, 40, !dbg !8200
  br i1 %cmp, label %if.end, label %lor.lhs.false4, !dbg !8201

lor.lhs.false4:                                   ; preds = %lor.lhs.false2
  %6 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt.addr, align 8, !dbg !8202
  %priv_class5 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %6, i32 0, i32 9, !dbg !8204
  %7 = load %struct.AVClass*, %struct.AVClass** %priv_class5, align 8, !dbg !8204
  %category6 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %7, i32 0, i32 8, !dbg !8205
  %8 = load i32, i32* %category6, align 8, !dbg !8205
  %cmp7 = icmp eq i32 %8, 42, !dbg !8206
  br i1 %cmp7, label %if.end, label %lor.lhs.false8, !dbg !8207

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %9 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt.addr, align 8, !dbg !8208
  %priv_class9 = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %9, i32 0, i32 9, !dbg !8210
  %10 = load %struct.AVClass*, %struct.AVClass** %priv_class9, align 8, !dbg !8210
  %category10 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %10, i32 0, i32 8, !dbg !8211
  %11 = load i32, i32* %category10, align 8, !dbg !8211
  %cmp11 = icmp eq i32 %11, 44, !dbg !8212
  br i1 %cmp11, label %if.end, label %if.then, !dbg !8213

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false, %entry
  store i32 -22, i32* %retval, align 4, !dbg !8214
  br label %return, !dbg !8214

if.end:                                           ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false2
  %12 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt.addr, align 8, !dbg !8215
  %name = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %12, i32 0, i32 0, !dbg !8216
  %13 = load i8*, i8** %name, align 8, !dbg !8216
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.248, i32 0, i32 0), i8* %13), !dbg !8217
  %14 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt.addr, align 8, !dbg !8218
  %get_device_list = getelementptr inbounds %struct.AVOutputFormat, %struct.AVOutputFormat* %14, i32 0, i32 20, !dbg !8220
  %15 = load i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)*, i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)** %get_device_list, align 8, !dbg !8220
  %tobool12 = icmp ne i32 (%struct.AVFormatContext*, %struct.AVDeviceInfoList*)* %15, null, !dbg !8218
  br i1 %tobool12, label %if.end15, label %if.then13, !dbg !8221

if.then13:                                        ; preds = %if.end
  store i32 -38, i32* %ret, align 4, !dbg !8222
  %call14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.249, i32 0, i32 0)), !dbg !8224
  br label %fail, !dbg !8225

if.end15:                                         ; preds = %if.end
  %16 = load %struct.AVOutputFormat*, %struct.AVOutputFormat** %fmt.addr, align 8, !dbg !8226
  %17 = load %struct.AVDictionary*, %struct.AVDictionary** %opts.addr, align 8, !dbg !8228
  %call16 = call i32 @avdevice_list_output_sinks(%struct.AVOutputFormat* %16, i8* null, %struct.AVDictionary* %17, %struct.AVDeviceInfoList** %device_list), !dbg !8229
  store i32 %call16, i32* %ret, align 4, !dbg !8230
  %cmp17 = icmp slt i32 %call16, 0, !dbg !8231
  br i1 %cmp17, label %if.then18, label %if.end20, !dbg !8232

if.then18:                                        ; preds = %if.end15
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.250, i32 0, i32 0)), !dbg !8233
  br label %fail, !dbg !8235

if.end20:                                         ; preds = %if.end15
  store i32 0, i32* %i, align 4, !dbg !8236
  br label %for.cond, !dbg !8238

for.cond:                                         ; preds = %for.inc, %if.end20
  %18 = load i32, i32* %i, align 4, !dbg !8239
  %19 = load %struct.AVDeviceInfoList*, %struct.AVDeviceInfoList** %device_list, align 8, !dbg !8242
  %nb_devices = getelementptr inbounds %struct.AVDeviceInfoList, %struct.AVDeviceInfoList* %19, i32 0, i32 1, !dbg !8243
  %20 = load i32, i32* %nb_devices, align 8, !dbg !8243
  %cmp21 = icmp slt i32 %18, %20, !dbg !8244
  br i1 %cmp21, label %for.body, label %for.end, !dbg !8245

for.body:                                         ; preds = %for.cond
  %21 = load %struct.AVDeviceInfoList*, %struct.AVDeviceInfoList** %device_list, align 8, !dbg !8246
  %default_device = getelementptr inbounds %struct.AVDeviceInfoList, %struct.AVDeviceInfoList* %21, i32 0, i32 2, !dbg !8248
  %22 = load i32, i32* %default_device, align 4, !dbg !8248
  %23 = load i32, i32* %i, align 4, !dbg !8249
  %cmp22 = icmp eq i32 %22, %23, !dbg !8250
  %cond = select i1 %cmp22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.247, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), !dbg !8246
  %24 = load i32, i32* %i, align 4, !dbg !8251
  %idxprom = sext i32 %24 to i64, !dbg !8252
  %25 = load %struct.AVDeviceInfoList*, %struct.AVDeviceInfoList** %device_list, align 8, !dbg !8252
  %devices = getelementptr inbounds %struct.AVDeviceInfoList, %struct.AVDeviceInfoList* %25, i32 0, i32 0, !dbg !8253
  %26 = load %struct.AVDeviceInfo**, %struct.AVDeviceInfo*** %devices, align 8, !dbg !8253
  %arrayidx = getelementptr inbounds %struct.AVDeviceInfo*, %struct.AVDeviceInfo** %26, i64 %idxprom, !dbg !8252
  %27 = load %struct.AVDeviceInfo*, %struct.AVDeviceInfo** %arrayidx, align 8, !dbg !8252
  %device_name = getelementptr inbounds %struct.AVDeviceInfo, %struct.AVDeviceInfo* %27, i32 0, i32 0, !dbg !8254
  %28 = load i8*, i8** %device_name, align 8, !dbg !8254
  %29 = load i32, i32* %i, align 4, !dbg !8255
  %idxprom23 = sext i32 %29 to i64, !dbg !8256
  %30 = load %struct.AVDeviceInfoList*, %struct.AVDeviceInfoList** %device_list, align 8, !dbg !8256
  %devices24 = getelementptr inbounds %struct.AVDeviceInfoList, %struct.AVDeviceInfoList* %30, i32 0, i32 0, !dbg !8257
  %31 = load %struct.AVDeviceInfo**, %struct.AVDeviceInfo*** %devices24, align 8, !dbg !8257
  %arrayidx25 = getelementptr inbounds %struct.AVDeviceInfo*, %struct.AVDeviceInfo** %31, i64 %idxprom23, !dbg !8256
  %32 = load %struct.AVDeviceInfo*, %struct.AVDeviceInfo** %arrayidx25, align 8, !dbg !8256
  %device_description = getelementptr inbounds %struct.AVDeviceInfo, %struct.AVDeviceInfo* %32, i32 0, i32 1, !dbg !8258
  %33 = load i8*, i8** %device_description, align 8, !dbg !8258
  %call26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.246, i32 0, i32 0), i8* %cond, i8* %28, i8* %33), !dbg !8259
  br label %for.inc, !dbg !8260

for.inc:                                          ; preds = %for.body
  %34 = load i32, i32* %i, align 4, !dbg !8261
  %inc = add nsw i32 %34, 1, !dbg !8261
  store i32 %inc, i32* %i, align 4, !dbg !8261
  br label %for.cond, !dbg !8263, !llvm.loop !8264

for.end:                                          ; preds = %for.cond
  br label %fail, !dbg !8266

fail:                                             ; preds = %for.end, %if.then18, %if.then13
  call void @avdevice_free_list_devices(%struct.AVDeviceInfoList** %device_list), !dbg !8268
  %35 = load i32, i32* %ret, align 4, !dbg !8269
  store i32 %35, i32* %retval, align 4, !dbg !8270
  br label %return, !dbg !8270

return:                                           ; preds = %fail, %if.then
  %36 = load i32, i32* %retval, align 4, !dbg !8271
  ret i32 %36, !dbg !8271
}

declare %struct.AVOutputFormat* @av_output_video_device_next(%struct.AVOutputFormat*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @av_make_error_string(i8* %errbuf, i64 %errbuf_size, i32 %errnum) #5 !dbg !8272 {
entry:
  %errbuf.addr = alloca i8*, align 8
  %errbuf_size.addr = alloca i64, align 8
  %errnum.addr = alloca i32, align 4
  store i8* %errbuf, i8** %errbuf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %errbuf.addr, metadata !8276, metadata !1512), !dbg !8277
  store i64 %errbuf_size, i64* %errbuf_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %errbuf_size.addr, metadata !8278, metadata !1512), !dbg !8279
  store i32 %errnum, i32* %errnum.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %errnum.addr, metadata !8280, metadata !1512), !dbg !8281
  %0 = load i32, i32* %errnum.addr, align 4, !dbg !8282
  %1 = load i8*, i8** %errbuf.addr, align 8, !dbg !8283
  %2 = load i64, i64* %errbuf_size.addr, align 8, !dbg !8284
  %call = call i32 @av_strerror(i32 %0, i8* %1, i64 %2), !dbg !8285
  %3 = load i8*, i8** %errbuf.addr, align 8, !dbg !8286
  ret i8* %3, !dbg !8287
}

declare i32 @fputs(i8*, %struct._IO_FILE*) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #9

; Function Attrs: nounwind
declare i64 @time(i64*) #7

; Function Attrs: nounwind
declare %struct.tm* @localtime(i64*) #7

declare i32 @av_opt_get_key_value(i8**, i8*, i8*, i32, i8**, i8**) #1

declare void @av_bprint_init(%struct.AVBPrint*, i32, i32) #1

; Function Attrs: nounwind uwtable
define internal void @expand_filename_template(%struct.AVBPrint* %bp, i8* %template, %struct.tm* %tm) #0 !dbg !8288 {
entry:
  %bp.addr = alloca %struct.AVBPrint*, align 8
  %template.addr = alloca i8*, align 8
  %tm.addr = alloca %struct.tm*, align 8
  %c = alloca i32, align 4
  store %struct.AVBPrint* %bp, %struct.AVBPrint** %bp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVBPrint** %bp.addr, metadata !8292, metadata !1512), !dbg !8293
  store i8* %template, i8** %template.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %template.addr, metadata !8294, metadata !1512), !dbg !8295
  store %struct.tm* %tm, %struct.tm** %tm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.tm** %tm.addr, metadata !8296, metadata !1512), !dbg !8297
  call void @llvm.dbg.declare(metadata i32* %c, metadata !8298, metadata !1512), !dbg !8299
  br label %while.cond, !dbg !8300

while.cond:                                       ; preds = %if.end11, %entry
  %0 = load i8*, i8** %template.addr, align 8, !dbg !8301
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i32 1, !dbg !8301
  store i8* %incdec.ptr, i8** %template.addr, align 8, !dbg !8301
  %1 = load i8, i8* %0, align 1, !dbg !8303
  %conv = sext i8 %1 to i32, !dbg !8303
  store i32 %conv, i32* %c, align 4, !dbg !8304
  %tobool = icmp ne i32 %conv, 0, !dbg !8305
  br i1 %tobool, label %while.body, label %while.end, !dbg !8305

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* %c, align 4, !dbg !8306
  %cmp = icmp eq i32 %2, 37, !dbg !8309
  br i1 %cmp, label %if.then, label %if.else, !dbg !8310

if.then:                                          ; preds = %while.body
  %3 = load i8*, i8** %template.addr, align 8, !dbg !8311
  %incdec.ptr2 = getelementptr inbounds i8, i8* %3, i32 1, !dbg !8311
  store i8* %incdec.ptr2, i8** %template.addr, align 8, !dbg !8311
  %4 = load i8, i8* %3, align 1, !dbg !8314
  %conv3 = sext i8 %4 to i32, !dbg !8314
  store i32 %conv3, i32* %c, align 4, !dbg !8315
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !8315
  br i1 %tobool4, label %if.end, label %if.then5, !dbg !8316

if.then5:                                         ; preds = %if.then
  br label %while.end, !dbg !8317

if.end:                                           ; preds = %if.then
  %5 = load i32, i32* %c, align 4, !dbg !8318
  switch i32 %5, label %sw.epilog [
    i32 112, label %sw.bb
    i32 116, label %sw.bb6
    i32 37, label %sw.bb8
  ], !dbg !8319

sw.bb:                                            ; preds = %if.end
  %6 = load %struct.AVBPrint*, %struct.AVBPrint** %bp.addr, align 8, !dbg !8320
  call void (%struct.AVBPrint*, i8*, ...) @av_bprintf(%struct.AVBPrint* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @program_name, i32 0, i32 0)), !dbg !8322
  br label %sw.epilog, !dbg !8323

sw.bb6:                                           ; preds = %if.end
  %7 = load %struct.AVBPrint*, %struct.AVBPrint** %bp.addr, align 8, !dbg !8324
  %8 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !8325
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %8, i32 0, i32 5, !dbg !8326
  %9 = load i32, i32* %tm_year, align 4, !dbg !8326
  %add = add nsw i32 %9, 1900, !dbg !8327
  %10 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !8328
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %10, i32 0, i32 4, !dbg !8329
  %11 = load i32, i32* %tm_mon, align 8, !dbg !8329
  %add7 = add nsw i32 %11, 1, !dbg !8330
  %12 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !8331
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %12, i32 0, i32 3, !dbg !8332
  %13 = load i32, i32* %tm_mday, align 4, !dbg !8332
  %14 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !8333
  %tm_hour = getelementptr inbounds %struct.tm, %struct.tm* %14, i32 0, i32 2, !dbg !8334
  %15 = load i32, i32* %tm_hour, align 8, !dbg !8334
  %16 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !8335
  %tm_min = getelementptr inbounds %struct.tm, %struct.tm* %16, i32 0, i32 1, !dbg !8336
  %17 = load i32, i32* %tm_min, align 4, !dbg !8336
  %18 = load %struct.tm*, %struct.tm** %tm.addr, align 8, !dbg !8337
  %tm_sec = getelementptr inbounds %struct.tm, %struct.tm* %18, i32 0, i32 0, !dbg !8338
  %19 = load i32, i32* %tm_sec, align 8, !dbg !8338
  call void (%struct.AVBPrint*, i8*, ...) @av_bprintf(%struct.AVBPrint* %7, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.135, i32 0, i32 0), i32 %add, i32 %add7, i32 %13, i32 %15, i32 %17, i32 %19), !dbg !8339
  br label %sw.epilog, !dbg !8340

sw.bb8:                                           ; preds = %if.end
  %20 = load %struct.AVBPrint*, %struct.AVBPrint** %bp.addr, align 8, !dbg !8341
  %21 = load i32, i32* %c, align 4, !dbg !8342
  %conv9 = trunc i32 %21 to i8, !dbg !8342
  call void @av_bprint_chars(%struct.AVBPrint* %20, i8 signext %conv9, i32 1), !dbg !8343
  br label %sw.epilog, !dbg !8344

sw.epilog:                                        ; preds = %if.end, %sw.bb8, %sw.bb6, %sw.bb
  br label %if.end11, !dbg !8345

if.else:                                          ; preds = %while.body
  %22 = load %struct.AVBPrint*, %struct.AVBPrint** %bp.addr, align 8, !dbg !8346
  %23 = load i32, i32* %c, align 4, !dbg !8348
  %conv10 = trunc i32 %23 to i8, !dbg !8348
  call void @av_bprint_chars(%struct.AVBPrint* %22, i8 signext %conv10, i32 1), !dbg !8349
  br label %if.end11

if.end11:                                         ; preds = %if.else, %sw.epilog
  br label %while.cond, !dbg !8350, !llvm.loop !8352

while.end:                                        ; preds = %if.then5, %while.cond
  ret void, !dbg !8353
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @av_x_if_null(i8* %p, i8* %x) #5 !dbg !8354 {
entry:
  %p.addr = alloca i8*, align 8
  %x.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !8359, metadata !1512), !dbg !8360
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !8361, metadata !1512), !dbg !8362
  %0 = load i8*, i8** %p.addr, align 8, !dbg !8363
  %tobool = icmp ne i8* %0, null, !dbg !8363
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8363

cond.true:                                        ; preds = %entry
  %1 = load i8*, i8** %p.addr, align 8, !dbg !8364
  br label %cond.end, !dbg !8366

cond.false:                                       ; preds = %entry
  %2 = load i8*, i8** %x.addr, align 8, !dbg !8367
  br label %cond.end, !dbg !8369

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %1, %cond.true ], [ %2, %cond.false ], !dbg !8370
  %3 = ptrtoint i8* %cond to i64, !dbg !8372
  %4 = inttoptr i64 %3 to i8*, !dbg !8373
  ret i8* %4, !dbg !8374
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @av_bprint_is_complete(%struct.AVBPrint* %buf) #5 !dbg !8375 {
entry:
  %buf.addr = alloca %struct.AVBPrint*, align 8
  store %struct.AVBPrint* %buf, %struct.AVBPrint** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVBPrint** %buf.addr, metadata !8380, metadata !1512), !dbg !8381
  %0 = load %struct.AVBPrint*, %struct.AVBPrint** %buf.addr, align 8, !dbg !8382
  %len = getelementptr inbounds %struct.AVBPrint, %struct.AVBPrint* %0, i32 0, i32 1, !dbg !8383
  %1 = load i32, i32* %len, align 8, !dbg !8383
  %2 = load %struct.AVBPrint*, %struct.AVBPrint** %buf.addr, align 8, !dbg !8384
  %size = getelementptr inbounds %struct.AVBPrint, %struct.AVBPrint* %2, i32 0, i32 2, !dbg !8385
  %3 = load i32, i32* %size, align 4, !dbg !8385
  %cmp = icmp ult i32 %1, %3, !dbg !8386
  %conv = zext i1 %cmp to i32, !dbg !8386
  ret i32 %conv, !dbg !8387
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #10

; Function Attrs: nounwind uwtable
define internal void @log_callback_report(i8* %ptr, i32 %level, i8* %fmt, %struct.__va_list_tag* %vl) #0 !dbg !1484 {
entry:
  %ptr.addr = alloca i8*, align 8
  %level.addr = alloca i32, align 4
  %fmt.addr = alloca i8*, align 8
  %vl.addr = alloca %struct.__va_list_tag*, align 8
  %vl2 = alloca [1 x %struct.__va_list_tag], align 16
  %line = alloca [1024 x i8], align 16
  store i8* %ptr, i8** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ptr.addr, metadata !8388, metadata !1512), !dbg !8389
  store i32 %level, i32* %level.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %level.addr, metadata !8390, metadata !1512), !dbg !8391
  store i8* %fmt, i8** %fmt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %fmt.addr, metadata !8392, metadata !1512), !dbg !8393
  store %struct.__va_list_tag* %vl, %struct.__va_list_tag** %vl.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %vl.addr, metadata !8394, metadata !1512), !dbg !8395
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %vl2, metadata !8396, metadata !1512), !dbg !8402
  call void @llvm.dbg.declare(metadata [1024 x i8]* %line, metadata !8403, metadata !1512), !dbg !8404
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %vl2, i32 0, i32 0, !dbg !8405
  %0 = load %struct.__va_list_tag*, %struct.__va_list_tag** %vl.addr, align 8, !dbg !8405
  %1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !8405
  %2 = bitcast %struct.__va_list_tag* %0 to i8*, !dbg !8405
  call void @llvm.va_copy(i8* %1, i8* %2), !dbg !8405
  %3 = load i8*, i8** %ptr.addr, align 8, !dbg !8406
  %4 = load i32, i32* %level.addr, align 4, !dbg !8407
  %5 = load i8*, i8** %fmt.addr, align 8, !dbg !8408
  %6 = load %struct.__va_list_tag*, %struct.__va_list_tag** %vl.addr, align 8, !dbg !8409
  call void @av_log_default_callback(i8* %3, i32 %4, i8* %5, %struct.__va_list_tag* %6), !dbg !8410
  %7 = load i8*, i8** %ptr.addr, align 8, !dbg !8411
  %8 = load i32, i32* %level.addr, align 4, !dbg !8412
  %9 = load i8*, i8** %fmt.addr, align 8, !dbg !8413
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %vl2, i32 0, i32 0, !dbg !8414
  %arraydecay2 = getelementptr inbounds [1024 x i8], [1024 x i8]* %line, i32 0, i32 0, !dbg !8415
  call void @av_log_format_line(i8* %7, i32 %8, i8* %9, %struct.__va_list_tag* %arraydecay1, i8* %arraydecay2, i32 1024, i32* @log_callback_report.print_prefix), !dbg !8416
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %vl2, i32 0, i32 0, !dbg !8417
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*, !dbg !8417
  call void @llvm.va_end(i8* %arraydecay34), !dbg !8417
  %10 = load i32, i32* @report_file_level, align 4, !dbg !8418
  %11 = load i32, i32* %level.addr, align 4, !dbg !8420
  %cmp = icmp sge i32 %10, %11, !dbg !8421
  br i1 %cmp, label %if.then, label %if.end, !dbg !8422

if.then:                                          ; preds = %entry
  %arraydecay5 = getelementptr inbounds [1024 x i8], [1024 x i8]* %line, i32 0, i32 0, !dbg !8423
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @report_file, align 8, !dbg !8425
  %call = call i32 @fputs(i8* %arraydecay5, %struct._IO_FILE* %12), !dbg !8426
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @report_file, align 8, !dbg !8427
  %call6 = call i32 @fflush(%struct._IO_FILE* %13), !dbg !8428
  br label %if.end, !dbg !8429

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !8430
}

declare i32 @av_bprint_finalize(%struct.AVBPrint*, i8**) #1

declare void @av_bprintf(%struct.AVBPrint*, i8*, ...) #1

declare void @av_bprint_chars(%struct.AVBPrint*, i8 signext, i32) #1

; Function Attrs: nounwind
declare void @llvm.va_copy(i8*, i8*) #11

declare void @av_log_default_callback(i8*, i32, i8*, %struct.__va_list_tag*) #1

declare void @av_log_format_line(i8*, i32, i8*, %struct.__va_list_tag*, i8*, i32, i32*) #1

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #11

declare i32 @avutil_version() #1

declare i8* @avutil_configuration() #1

declare i32 @avcodec_version() #1

declare i8* @avcodec_configuration() #1

declare i32 @avformat_version() #1

declare i8* @avformat_configuration() #1

declare i32 @avdevice_version() #1

declare i8* @avdevice_configuration() #1

declare i32 @avfilter_version() #1

declare i8* @avfilter_configuration() #1

declare i32 @swscale_version() #1

declare i8* @swscale_configuration() #1

declare i32 @swresample_version() #1

declare i8* @swresample_configuration() #1

; Function Attrs: nounwind
declare i8* @strncpy(i8*, i8*, i64) #7

; Function Attrs: nounwind
declare i8* @strtok(i8*, i8*) #7

declare %struct.AVOutputFormat* @av_muxer_iterate(i8**) #1

; Function Attrs: nounwind uwtable
define internal i32 @is_device(%struct.AVClass* %avclass) #0 !dbg !8431 {
entry:
  %retval = alloca i32, align 4
  %avclass.addr = alloca %struct.AVClass*, align 8
  store %struct.AVClass* %avclass, %struct.AVClass** %avclass.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVClass** %avclass.addr, metadata !8434, metadata !1512), !dbg !8435
  %0 = load %struct.AVClass*, %struct.AVClass** %avclass.addr, align 8, !dbg !8436
  %tobool = icmp ne %struct.AVClass* %0, null, !dbg !8436
  br i1 %tobool, label %if.end, label %if.then, !dbg !8438

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !8439
  br label %return, !dbg !8439

if.end:                                           ; preds = %entry
  %1 = load %struct.AVClass*, %struct.AVClass** %avclass.addr, align 8, !dbg !8440
  %category = getelementptr inbounds %struct.AVClass, %struct.AVClass* %1, i32 0, i32 8, !dbg !8441
  %2 = load i32, i32* %category, align 8, !dbg !8441
  %cmp = icmp eq i32 %2, 41, !dbg !8442
  br i1 %cmp, label %lor.end14, label %lor.lhs.false, !dbg !8443

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %struct.AVClass*, %struct.AVClass** %avclass.addr, align 8, !dbg !8444
  %category1 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %3, i32 0, i32 8, !dbg !8446
  %4 = load i32, i32* %category1, align 8, !dbg !8446
  %cmp2 = icmp eq i32 %4, 43, !dbg !8447
  br i1 %cmp2, label %lor.end14, label %lor.lhs.false3, !dbg !8448

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %5 = load %struct.AVClass*, %struct.AVClass** %avclass.addr, align 8, !dbg !8449
  %category4 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %5, i32 0, i32 8, !dbg !8451
  %6 = load i32, i32* %category4, align 8, !dbg !8451
  %cmp5 = icmp eq i32 %6, 45, !dbg !8452
  br i1 %cmp5, label %lor.end14, label %lor.rhs, !dbg !8453

lor.rhs:                                          ; preds = %lor.lhs.false3
  %7 = load %struct.AVClass*, %struct.AVClass** %avclass.addr, align 8, !dbg !8454
  %category6 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %7, i32 0, i32 8, !dbg !8456
  %8 = load i32, i32* %category6, align 8, !dbg !8456
  %cmp7 = icmp eq i32 %8, 40, !dbg !8457
  br i1 %cmp7, label %lor.end, label %lor.lhs.false8, !dbg !8458

lor.lhs.false8:                                   ; preds = %lor.rhs
  %9 = load %struct.AVClass*, %struct.AVClass** %avclass.addr, align 8, !dbg !8459
  %category9 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %9, i32 0, i32 8, !dbg !8461
  %10 = load i32, i32* %category9, align 8, !dbg !8461
  %cmp10 = icmp eq i32 %10, 42, !dbg !8462
  br i1 %cmp10, label %lor.end, label %lor.rhs11, !dbg !8463

lor.rhs11:                                        ; preds = %lor.lhs.false8
  %11 = load %struct.AVClass*, %struct.AVClass** %avclass.addr, align 8, !dbg !8464
  %category12 = getelementptr inbounds %struct.AVClass, %struct.AVClass* %11, i32 0, i32 8, !dbg !8466
  %12 = load i32, i32* %category12, align 8, !dbg !8466
  %cmp13 = icmp eq i32 %12, 44, !dbg !8467
  br label %lor.end, !dbg !8468

lor.end:                                          ; preds = %lor.rhs11, %lor.lhs.false8, %lor.rhs
  %13 = phi i1 [ true, %lor.lhs.false8 ], [ true, %lor.rhs ], [ %cmp13, %lor.rhs11 ]
  br label %lor.end14, !dbg !8469

lor.end14:                                        ; preds = %lor.end, %lor.lhs.false3, %lor.lhs.false, %if.end
  %14 = phi i1 [ true, %lor.lhs.false3 ], [ true, %lor.lhs.false ], [ true, %if.end ], [ %13, %lor.end ]
  %lor.ext = zext i1 %14 to i32, !dbg !8471
  store i32 %lor.ext, i32* %retval, align 4, !dbg !8473
  br label %return, !dbg !8473

return:                                           ; preds = %lor.end14, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !8474
  ret i32 %15, !dbg !8474
}

declare %struct.AVInputFormat* @av_demuxer_iterate(i8**) #1

declare %struct.AVCodecDescriptor* @avcodec_descriptor_next(%struct.AVCodecDescriptor*) #1

declare noalias i8* @av_calloc(i64, i64) #1

declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)*) #1

; Function Attrs: nounwind uwtable
define internal i32 @compare_codec_desc(i8* %a, i8* %b) #0 !dbg !8475 {
entry:
  %a.addr = alloca i8*, align 8
  %b.addr = alloca i8*, align 8
  %da = alloca %struct.AVCodecDescriptor**, align 8
  %db = alloca %struct.AVCodecDescriptor**, align 8
  store i8* %a, i8** %a.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %a.addr, metadata !8478, metadata !1512), !dbg !8479
  store i8* %b, i8** %b.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %b.addr, metadata !8480, metadata !1512), !dbg !8481
  call void @llvm.dbg.declare(metadata %struct.AVCodecDescriptor*** %da, metadata !8482, metadata !1512), !dbg !8485
  %0 = load i8*, i8** %a.addr, align 8, !dbg !8486
  %1 = bitcast i8* %0 to %struct.AVCodecDescriptor**, !dbg !8486
  store %struct.AVCodecDescriptor** %1, %struct.AVCodecDescriptor*** %da, align 8, !dbg !8485
  call void @llvm.dbg.declare(metadata %struct.AVCodecDescriptor*** %db, metadata !8487, metadata !1512), !dbg !8488
  %2 = load i8*, i8** %b.addr, align 8, !dbg !8489
  %3 = bitcast i8* %2 to %struct.AVCodecDescriptor**, !dbg !8489
  store %struct.AVCodecDescriptor** %3, %struct.AVCodecDescriptor*** %db, align 8, !dbg !8488
  %4 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %da, align 8, !dbg !8490
  %5 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %4, align 8, !dbg !8491
  %type = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %5, i32 0, i32 1, !dbg !8492
  %6 = load i32, i32* %type, align 4, !dbg !8492
  %7 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %db, align 8, !dbg !8493
  %8 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %7, align 8, !dbg !8494
  %type1 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %8, i32 0, i32 1, !dbg !8495
  %9 = load i32, i32* %type1, align 4, !dbg !8495
  %cmp = icmp ne i32 %6, %9, !dbg !8496
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8497

cond.true:                                        ; preds = %entry
  %10 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %da, align 8, !dbg !8498
  %11 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %10, align 8, !dbg !8500
  %type2 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %11, i32 0, i32 1, !dbg !8501
  %12 = load i32, i32* %type2, align 4, !dbg !8501
  %13 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %db, align 8, !dbg !8502
  %14 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %13, align 8, !dbg !8503
  %type3 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %14, i32 0, i32 1, !dbg !8504
  %15 = load i32, i32* %type3, align 4, !dbg !8504
  %cmp4 = icmp sgt i32 %12, %15, !dbg !8505
  %conv = zext i1 %cmp4 to i32, !dbg !8505
  %16 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %da, align 8, !dbg !8506
  %17 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %16, align 8, !dbg !8507
  %type5 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %17, i32 0, i32 1, !dbg !8508
  %18 = load i32, i32* %type5, align 4, !dbg !8508
  %19 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %db, align 8, !dbg !8509
  %20 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %19, align 8, !dbg !8510
  %type6 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %20, i32 0, i32 1, !dbg !8511
  %21 = load i32, i32* %type6, align 4, !dbg !8511
  %cmp7 = icmp slt i32 %18, %21, !dbg !8512
  %conv8 = zext i1 %cmp7 to i32, !dbg !8512
  %sub = sub nsw i32 %conv, %conv8, !dbg !8513
  br label %cond.end, !dbg !8514

cond.false:                                       ; preds = %entry
  %22 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %da, align 8, !dbg !8515
  %23 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %22, align 8, !dbg !8516
  %name = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %23, i32 0, i32 2, !dbg !8517
  %24 = load i8*, i8** %name, align 8, !dbg !8517
  %25 = load %struct.AVCodecDescriptor**, %struct.AVCodecDescriptor*** %db, align 8, !dbg !8518
  %26 = load %struct.AVCodecDescriptor*, %struct.AVCodecDescriptor** %25, align 8, !dbg !8519
  %name9 = getelementptr inbounds %struct.AVCodecDescriptor, %struct.AVCodecDescriptor* %26, i32 0, i32 2, !dbg !8520
  %27 = load i8*, i8** %name9, align 8, !dbg !8520
  %call = call i32 @strcmp(i8* %24, i8* %27) #14, !dbg !8521
  br label %cond.end, !dbg !8522

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %call, %cond.false ], !dbg !8524
  ret i32 %cond, !dbg !8526
}

declare %struct.AVCodec* @av_codec_next(%struct.AVCodec*) #1

declare i32 @av_codec_is_encoder(%struct.AVCodec*) #1

declare i32 @av_codec_is_decoder(%struct.AVCodec*) #1

declare %struct.AVCodec* @avcodec_find_encoder_by_name(i8*) #1

declare %struct.AVCodec* @avcodec_find_decoder_by_name(i8*) #1

; Function Attrs: nounwind uwtable
define internal void @print_codec(%struct.AVCodec* %c) #0 !dbg !8527 {
entry:
  %c.addr = alloca %struct.AVCodec*, align 8
  %encoder = alloca i32, align 4
  %i = alloca i32, align 4
  %config = alloca %struct.AVCodecHWConfig*, align 8
  %fps = alloca %struct.AVRational*, align 8
  %p = alloca i32*, align 8
  %name148 = alloca i8*, align 8
  %p157 = alloca i32*, align 8
  %name163 = alloca [16 x i8], align 16
  %p173 = alloca i32*, align 8
  %name179 = alloca i8*, align 8
  %p188 = alloca i64*, align 8
  %name194 = alloca [128 x i8], align 16
  store %struct.AVCodec* %c, %struct.AVCodec** %c.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.AVCodec** %c.addr, metadata !8530, metadata !1512), !dbg !8531
  call void @llvm.dbg.declare(metadata i32* %encoder, metadata !8532, metadata !1512), !dbg !8533
  %0 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8534
  %call = call i32 @av_codec_is_encoder(%struct.AVCodec* %0), !dbg !8535
  store i32 %call, i32* %encoder, align 4, !dbg !8533
  %1 = load i32, i32* %encoder, align 4, !dbg !8536
  %tobool = icmp ne i32 %1, 0, !dbg !8536
  %cond = select i1 %tobool, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.184, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.185, i32 0, i32 0), !dbg !8536
  %2 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8537
  %name = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %2, i32 0, i32 0, !dbg !8538
  %3 = load i8*, i8** %name, align 8, !dbg !8538
  %4 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8539
  %long_name = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %4, i32 0, i32 1, !dbg !8540
  %5 = load i8*, i8** %long_name, align 8, !dbg !8540
  %tobool1 = icmp ne i8* %5, null, !dbg !8539
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !8539

cond.true:                                        ; preds = %entry
  %6 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8541
  %long_name2 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %6, i32 0, i32 1, !dbg !8543
  %7 = load i8*, i8** %long_name2, align 8, !dbg !8543
  br label %cond.end, !dbg !8544

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8545

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond3 = phi i8* [ %7, %cond.true ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.81, i32 0, i32 0), %cond.false ], !dbg !8547
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.183, i32 0, i32 0), i8* %cond, i8* %3, i8* %cond3), !dbg !8549
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.186, i32 0, i32 0)), !dbg !8550
  %8 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8551
  %capabilities = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %8, i32 0, i32 4, !dbg !8553
  %9 = load i32, i32* %capabilities, align 8, !dbg !8553
  %and = and i32 %9, 1, !dbg !8554
  %tobool6 = icmp ne i32 %and, 0, !dbg !8554
  br i1 %tobool6, label %if.then, label %if.end, !dbg !8555

if.then:                                          ; preds = %cond.end
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.187, i32 0, i32 0)), !dbg !8556
  br label %if.end, !dbg !8556

if.end:                                           ; preds = %if.then, %cond.end
  %10 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8557
  %capabilities8 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %10, i32 0, i32 4, !dbg !8559
  %11 = load i32, i32* %capabilities8, align 8, !dbg !8559
  %and9 = and i32 %11, 2, !dbg !8560
  %tobool10 = icmp ne i32 %and9, 0, !dbg !8560
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !8561

if.then11:                                        ; preds = %if.end
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.188, i32 0, i32 0)), !dbg !8562
  br label %if.end13, !dbg !8562

if.end13:                                         ; preds = %if.then11, %if.end
  %12 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8563
  %capabilities14 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %12, i32 0, i32 4, !dbg !8565
  %13 = load i32, i32* %capabilities14, align 8, !dbg !8565
  %and15 = and i32 %13, 8, !dbg !8566
  %tobool16 = icmp ne i32 %and15, 0, !dbg !8566
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !8567

if.then17:                                        ; preds = %if.end13
  %call18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.189, i32 0, i32 0)), !dbg !8568
  br label %if.end19, !dbg !8568

if.end19:                                         ; preds = %if.then17, %if.end13
  %14 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8569
  %capabilities20 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %14, i32 0, i32 4, !dbg !8571
  %15 = load i32, i32* %capabilities20, align 8, !dbg !8571
  %and21 = and i32 %15, 32, !dbg !8572
  %tobool22 = icmp ne i32 %and21, 0, !dbg !8572
  br i1 %tobool22, label %if.then23, label %if.end25, !dbg !8573

if.then23:                                        ; preds = %if.end19
  %call24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.190, i32 0, i32 0)), !dbg !8574
  br label %if.end25, !dbg !8574

if.end25:                                         ; preds = %if.then23, %if.end19
  %16 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8575
  %capabilities26 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %16, i32 0, i32 4, !dbg !8577
  %17 = load i32, i32* %capabilities26, align 8, !dbg !8577
  %and27 = and i32 %17, 64, !dbg !8578
  %tobool28 = icmp ne i32 %and27, 0, !dbg !8578
  br i1 %tobool28, label %if.then29, label %if.end31, !dbg !8579

if.then29:                                        ; preds = %if.end25
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.191, i32 0, i32 0)), !dbg !8580
  br label %if.end31, !dbg !8580

if.end31:                                         ; preds = %if.then29, %if.end25
  %18 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8581
  %capabilities32 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %18, i32 0, i32 4, !dbg !8583
  %19 = load i32, i32* %capabilities32, align 8, !dbg !8583
  %and33 = and i32 %19, 256, !dbg !8584
  %tobool34 = icmp ne i32 %and33, 0, !dbg !8584
  br i1 %tobool34, label %if.then35, label %if.end37, !dbg !8585

if.then35:                                        ; preds = %if.end31
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.192, i32 0, i32 0)), !dbg !8586
  br label %if.end37, !dbg !8586

if.end37:                                         ; preds = %if.then35, %if.end31
  %20 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8587
  %capabilities38 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %20, i32 0, i32 4, !dbg !8589
  %21 = load i32, i32* %capabilities38, align 8, !dbg !8589
  %and39 = and i32 %21, 512, !dbg !8590
  %tobool40 = icmp ne i32 %and39, 0, !dbg !8590
  br i1 %tobool40, label %if.then41, label %if.end43, !dbg !8591

if.then41:                                        ; preds = %if.end37
  %call42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.193, i32 0, i32 0)), !dbg !8592
  br label %if.end43, !dbg !8592

if.end43:                                         ; preds = %if.then41, %if.end37
  %22 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8593
  %capabilities44 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %22, i32 0, i32 4, !dbg !8595
  %23 = load i32, i32* %capabilities44, align 8, !dbg !8595
  %and45 = and i32 %23, 1024, !dbg !8596
  %tobool46 = icmp ne i32 %and45, 0, !dbg !8596
  br i1 %tobool46, label %if.then47, label %if.end49, !dbg !8597

if.then47:                                        ; preds = %if.end43
  %call48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.194, i32 0, i32 0)), !dbg !8598
  br label %if.end49, !dbg !8598

if.end49:                                         ; preds = %if.then47, %if.end43
  %24 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8599
  %capabilities50 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %24, i32 0, i32 4, !dbg !8601
  %25 = load i32, i32* %capabilities50, align 8, !dbg !8601
  %and51 = and i32 %25, 16384, !dbg !8602
  %tobool52 = icmp ne i32 %and51, 0, !dbg !8602
  br i1 %tobool52, label %if.then53, label %if.end55, !dbg !8603

if.then53:                                        ; preds = %if.end49
  %call54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.195, i32 0, i32 0)), !dbg !8604
  br label %if.end55, !dbg !8604

if.end55:                                         ; preds = %if.then53, %if.end49
  %26 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8605
  %capabilities56 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %26, i32 0, i32 4, !dbg !8607
  %27 = load i32, i32* %capabilities56, align 8, !dbg !8607
  %and57 = and i32 %27, 65536, !dbg !8608
  %tobool58 = icmp ne i32 %and57, 0, !dbg !8608
  br i1 %tobool58, label %if.then59, label %if.end61, !dbg !8609

if.then59:                                        ; preds = %if.end55
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.196, i32 0, i32 0)), !dbg !8610
  br label %if.end61, !dbg !8610

if.end61:                                         ; preds = %if.then59, %if.end55
  %28 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8611
  %capabilities62 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %28, i32 0, i32 4, !dbg !8613
  %29 = load i32, i32* %capabilities62, align 8, !dbg !8613
  %and63 = and i32 %29, 45056, !dbg !8614
  %tobool64 = icmp ne i32 %and63, 0, !dbg !8614
  br i1 %tobool64, label %if.then65, label %if.end67, !dbg !8615

if.then65:                                        ; preds = %if.end61
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.197, i32 0, i32 0)), !dbg !8616
  br label %if.end67, !dbg !8616

if.end67:                                         ; preds = %if.then65, %if.end61
  %30 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8617
  %capabilities68 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %30, i32 0, i32 4, !dbg !8619
  %31 = load i32, i32* %capabilities68, align 8, !dbg !8619
  %and69 = and i32 %31, 131072, !dbg !8620
  %tobool70 = icmp ne i32 %and69, 0, !dbg !8620
  br i1 %tobool70, label %if.then71, label %if.end73, !dbg !8621

if.then71:                                        ; preds = %if.end67
  %call72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.198, i32 0, i32 0)), !dbg !8622
  br label %if.end73, !dbg !8622

if.end73:                                         ; preds = %if.then71, %if.end67
  %32 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8623
  %capabilities74 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %32, i32 0, i32 4, !dbg !8625
  %33 = load i32, i32* %capabilities74, align 8, !dbg !8625
  %and75 = and i32 %33, 1073741824, !dbg !8626
  %tobool76 = icmp ne i32 %and75, 0, !dbg !8626
  br i1 %tobool76, label %if.then77, label %if.end79, !dbg !8627

if.then77:                                        ; preds = %if.end73
  %call78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.199, i32 0, i32 0)), !dbg !8628
  br label %if.end79, !dbg !8628

if.end79:                                         ; preds = %if.then77, %if.end73
  %34 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8629
  %capabilities80 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %34, i32 0, i32 4, !dbg !8631
  %35 = load i32, i32* %capabilities80, align 8, !dbg !8631
  %and81 = and i32 %35, -2147483648, !dbg !8632
  %tobool82 = icmp ne i32 %and81, 0, !dbg !8632
  br i1 %tobool82, label %if.then83, label %if.end85, !dbg !8633

if.then83:                                        ; preds = %if.end79
  %call84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.200, i32 0, i32 0)), !dbg !8634
  br label %if.end85, !dbg !8634

if.end85:                                         ; preds = %if.then83, %if.end79
  %36 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8635
  %capabilities86 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %36, i32 0, i32 4, !dbg !8637
  %37 = load i32, i32* %capabilities86, align 8, !dbg !8637
  %and87 = and i32 %37, 262144, !dbg !8638
  %tobool88 = icmp ne i32 %and87, 0, !dbg !8638
  br i1 %tobool88, label %if.then89, label %if.end91, !dbg !8639

if.then89:                                        ; preds = %if.end85
  %call90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.201, i32 0, i32 0)), !dbg !8640
  br label %if.end91, !dbg !8640

if.end91:                                         ; preds = %if.then89, %if.end85
  %38 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8641
  %capabilities92 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %38, i32 0, i32 4, !dbg !8643
  %39 = load i32, i32* %capabilities92, align 8, !dbg !8643
  %and93 = and i32 %39, 524288, !dbg !8644
  %tobool94 = icmp ne i32 %and93, 0, !dbg !8644
  br i1 %tobool94, label %if.then95, label %if.end97, !dbg !8645

if.then95:                                        ; preds = %if.end91
  %call96 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.202, i32 0, i32 0)), !dbg !8646
  br label %if.end97, !dbg !8646

if.end97:                                         ; preds = %if.then95, %if.end91
  %40 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8647
  %capabilities98 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %40, i32 0, i32 4, !dbg !8649
  %41 = load i32, i32* %capabilities98, align 8, !dbg !8649
  %tobool99 = icmp ne i32 %41, 0, !dbg !8647
  br i1 %tobool99, label %if.end102, label %if.then100, !dbg !8650

if.then100:                                       ; preds = %if.end97
  %call101 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.203, i32 0, i32 0)), !dbg !8651
  br label %if.end102, !dbg !8651

if.end102:                                        ; preds = %if.then100, %if.end97
  %call103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !8652
  %42 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8653
  %type = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %42, i32 0, i32 2, !dbg !8655
  %43 = load i32, i32* %type, align 8, !dbg !8655
  %cmp = icmp eq i32 %43, 0, !dbg !8656
  br i1 %cmp, label %if.then106, label %lor.lhs.false, !dbg !8657

lor.lhs.false:                                    ; preds = %if.end102
  %44 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8658
  %type104 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %44, i32 0, i32 2, !dbg !8659
  %45 = load i32, i32* %type104, align 8, !dbg !8659
  %cmp105 = icmp eq i32 %45, 1, !dbg !8660
  br i1 %cmp105, label %if.then106, label %if.end119, !dbg !8661

if.then106:                                       ; preds = %lor.lhs.false, %if.end102
  %call107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.204, i32 0, i32 0)), !dbg !8662
  %46 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8664
  %capabilities108 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %46, i32 0, i32 4, !dbg !8665
  %47 = load i32, i32* %capabilities108, align 8, !dbg !8665
  %and109 = and i32 %47, 45056, !dbg !8666
  switch i32 %and109, label %sw.default [
    i32 12288, label %sw.bb
    i32 4096, label %sw.bb111
    i32 8192, label %sw.bb113
    i32 32768, label %sw.bb115
  ], !dbg !8667

sw.bb:                                            ; preds = %if.then106
  %call110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.205, i32 0, i32 0)), !dbg !8668
  br label %sw.epilog, !dbg !8670

sw.bb111:                                         ; preds = %if.then106
  %call112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.206, i32 0, i32 0)), !dbg !8671
  br label %sw.epilog, !dbg !8672

sw.bb113:                                         ; preds = %if.then106
  %call114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.207, i32 0, i32 0)), !dbg !8673
  br label %sw.epilog, !dbg !8674

sw.bb115:                                         ; preds = %if.then106
  %call116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.208, i32 0, i32 0)), !dbg !8675
  br label %sw.epilog, !dbg !8676

sw.default:                                       ; preds = %if.then106
  %call117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.203, i32 0, i32 0)), !dbg !8677
  br label %sw.epilog, !dbg !8678

sw.epilog:                                        ; preds = %sw.default, %sw.bb115, %sw.bb113, %sw.bb111, %sw.bb
  %call118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !8679
  br label %if.end119, !dbg !8680

if.end119:                                        ; preds = %sw.epilog, %lor.lhs.false
  %48 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8681
  %call120 = call %struct.AVCodecHWConfig* @avcodec_get_hw_config(%struct.AVCodec* %48, i32 0), !dbg !8683
  %tobool121 = icmp ne %struct.AVCodecHWConfig* %call120, null, !dbg !8683
  br i1 %tobool121, label %if.then122, label %if.end131, !dbg !8684

if.then122:                                       ; preds = %if.end119
  %call123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.209, i32 0, i32 0)), !dbg !8685
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8687, metadata !1512), !dbg !8689
  store i32 0, i32* %i, align 4, !dbg !8689
  br label %for.cond, !dbg !8690

for.cond:                                         ; preds = %for.inc, %if.then122
  call void @llvm.dbg.declare(metadata %struct.AVCodecHWConfig** %config, metadata !8691, metadata !1512), !dbg !8702
  %49 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8703
  %50 = load i32, i32* %i, align 4, !dbg !8704
  %call124 = call %struct.AVCodecHWConfig* @avcodec_get_hw_config(%struct.AVCodec* %49, i32 %50), !dbg !8705
  store %struct.AVCodecHWConfig* %call124, %struct.AVCodecHWConfig** %config, align 8, !dbg !8702
  %51 = load %struct.AVCodecHWConfig*, %struct.AVCodecHWConfig** %config, align 8, !dbg !8706
  %tobool125 = icmp ne %struct.AVCodecHWConfig* %51, null, !dbg !8706
  br i1 %tobool125, label %if.end127, label %if.then126, !dbg !8708

if.then126:                                       ; preds = %for.cond
  br label %for.end, !dbg !8709

if.end127:                                        ; preds = %for.cond
  %52 = load %struct.AVCodecHWConfig*, %struct.AVCodecHWConfig** %config, align 8, !dbg !8710
  %device_type = getelementptr inbounds %struct.AVCodecHWConfig, %struct.AVCodecHWConfig* %52, i32 0, i32 2, !dbg !8711
  %53 = load i32, i32* %device_type, align 4, !dbg !8711
  %call128 = call i8* @av_hwdevice_get_type_name(i32 %53), !dbg !8712
  %call129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.170, i32 0, i32 0), i8* %call128), !dbg !8713
  br label %for.inc, !dbg !8715

for.inc:                                          ; preds = %if.end127
  %54 = load i32, i32* %i, align 4, !dbg !8716
  %inc = add nsw i32 %54, 1, !dbg !8716
  store i32 %inc, i32* %i, align 4, !dbg !8716
  br label %for.cond, !dbg !8718, !llvm.loop !8719

for.end:                                          ; preds = %if.then126
  %call130 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !8721
  br label %if.end131, !dbg !8722

if.end131:                                        ; preds = %for.end, %if.end119
  %55 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8723
  %supported_framerates = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %55, i32 0, i32 5, !dbg !8725
  %56 = load %struct.AVRational*, %struct.AVRational** %supported_framerates, align 8, !dbg !8725
  %tobool132 = icmp ne %struct.AVRational* %56, null, !dbg !8723
  br i1 %tobool132, label %if.then133, label %if.end140, !dbg !8726

if.then133:                                       ; preds = %if.end131
  call void @llvm.dbg.declare(metadata %struct.AVRational** %fps, metadata !8727, metadata !1512), !dbg !8729
  %57 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8730
  %supported_framerates134 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %57, i32 0, i32 5, !dbg !8731
  %58 = load %struct.AVRational*, %struct.AVRational** %supported_framerates134, align 8, !dbg !8731
  store %struct.AVRational* %58, %struct.AVRational** %fps, align 8, !dbg !8729
  %call135 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.210, i32 0, i32 0)), !dbg !8732
  br label %while.cond, !dbg !8733

while.cond:                                       ; preds = %while.body, %if.then133
  %59 = load %struct.AVRational*, %struct.AVRational** %fps, align 8, !dbg !8734
  %num = getelementptr inbounds %struct.AVRational, %struct.AVRational* %59, i32 0, i32 0, !dbg !8736
  %60 = load i32, i32* %num, align 4, !dbg !8736
  %tobool136 = icmp ne i32 %60, 0, !dbg !8737
  br i1 %tobool136, label %while.body, label %while.end, !dbg !8737

while.body:                                       ; preds = %while.cond
  %61 = load %struct.AVRational*, %struct.AVRational** %fps, align 8, !dbg !8738
  %num137 = getelementptr inbounds %struct.AVRational, %struct.AVRational* %61, i32 0, i32 0, !dbg !8740
  %62 = load i32, i32* %num137, align 4, !dbg !8740
  %63 = load %struct.AVRational*, %struct.AVRational** %fps, align 8, !dbg !8741
  %den = getelementptr inbounds %struct.AVRational, %struct.AVRational* %63, i32 0, i32 1, !dbg !8742
  %64 = load i32, i32* %den, align 4, !dbg !8742
  %call138 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.211, i32 0, i32 0), i32 %62, i32 %64), !dbg !8743
  %65 = load %struct.AVRational*, %struct.AVRational** %fps, align 8, !dbg !8744
  %incdec.ptr = getelementptr inbounds %struct.AVRational, %struct.AVRational* %65, i32 1, !dbg !8744
  store %struct.AVRational* %incdec.ptr, %struct.AVRational** %fps, align 8, !dbg !8744
  br label %while.cond, !dbg !8745, !llvm.loop !8747

while.end:                                        ; preds = %while.cond
  %call139 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !8748
  br label %if.end140, !dbg !8749

if.end140:                                        ; preds = %while.end, %if.end131
  %66 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8750
  %pix_fmts = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %66, i32 0, i32 6, !dbg !8752
  %67 = load i32*, i32** %pix_fmts, align 8, !dbg !8752
  %tobool141 = icmp ne i32* %67, null, !dbg !8750
  br i1 %tobool141, label %if.then142, label %if.end154, !dbg !8753

if.then142:                                       ; preds = %if.end140
  call void @llvm.dbg.declare(metadata i32** %p, metadata !8754, metadata !1512), !dbg !8756
  %68 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8757
  %pix_fmts143 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %68, i32 0, i32 6, !dbg !8759
  %69 = load i32*, i32** %pix_fmts143, align 8, !dbg !8759
  store i32* %69, i32** %p, align 8, !dbg !8760
  %call144 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.212, i32 0, i32 0)), !dbg !8761
  br label %while.cond145, !dbg !8762

while.cond145:                                    ; preds = %while.body147, %if.then142
  %70 = load i32*, i32** %p, align 8, !dbg !8763
  %71 = load i32, i32* %70, align 4, !dbg !8765
  %cmp146 = icmp ne i32 %71, -1, !dbg !8766
  br i1 %cmp146, label %while.body147, label %while.end152, !dbg !8767

while.body147:                                    ; preds = %while.cond145
  call void @llvm.dbg.declare(metadata i8** %name148, metadata !8768, metadata !1512), !dbg !8770
  %72 = load i32*, i32** %p, align 8, !dbg !8771
  %73 = load i32, i32* %72, align 4, !dbg !8773
  %call149 = call i8* @av_get_pix_fmt_name(i32 %73), !dbg !8774
  store i8* %call149, i8** %name148, align 8, !dbg !8775
  %74 = load i8*, i8** %name148, align 8, !dbg !8776
  %call150 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.213, i32 0, i32 0), i8* %74), !dbg !8777
  %75 = load i32*, i32** %p, align 8, !dbg !8779
  %incdec.ptr151 = getelementptr inbounds i32, i32* %75, i32 1, !dbg !8779
  store i32* %incdec.ptr151, i32** %p, align 8, !dbg !8779
  br label %while.cond145, !dbg !8780, !llvm.loop !8781

while.end152:                                     ; preds = %while.cond145
  %call153 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !8783
  br label %if.end154, !dbg !8785

if.end154:                                        ; preds = %while.end152, %if.end140
  %76 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8786
  %supported_samplerates = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %76, i32 0, i32 7, !dbg !8788
  %77 = load i32*, i32** %supported_samplerates, align 8, !dbg !8788
  %tobool155 = icmp ne i32* %77, null, !dbg !8786
  br i1 %tobool155, label %if.then156, label %if.end170, !dbg !8789

if.then156:                                       ; preds = %if.end154
  call void @llvm.dbg.declare(metadata i32** %p157, metadata !8790, metadata !1512), !dbg !8792
  %78 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8793
  %supported_samplerates158 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %78, i32 0, i32 7, !dbg !8795
  %79 = load i32*, i32** %supported_samplerates158, align 8, !dbg !8795
  store i32* %79, i32** %p157, align 8, !dbg !8796
  %call159 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.214, i32 0, i32 0)), !dbg !8797
  br label %while.cond160, !dbg !8798

while.cond160:                                    ; preds = %while.body162, %if.then156
  %80 = load i32*, i32** %p157, align 8, !dbg !8799
  %81 = load i32, i32* %80, align 4, !dbg !8801
  %cmp161 = icmp ne i32 %81, 0, !dbg !8802
  br i1 %cmp161, label %while.body162, label %while.end168, !dbg !8803

while.body162:                                    ; preds = %while.cond160
  call void @llvm.dbg.declare(metadata [16 x i8]* %name163, metadata !8804, metadata !1512), !dbg !8809
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %name163, i32 0, i32 0, !dbg !8810
  %82 = load i32*, i32** %p157, align 8, !dbg !8812
  %83 = load i32, i32* %82, align 4, !dbg !8813
  %call164 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %arraydecay, i64 16, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.215, i32 0, i32 0), i32 %83) #11, !dbg !8814
  %arraydecay165 = getelementptr inbounds [16 x i8], [16 x i8]* %name163, i32 0, i32 0, !dbg !8815
  %call166 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.213, i32 0, i32 0), i8* %arraydecay165), !dbg !8816
  %84 = load i32*, i32** %p157, align 8, !dbg !8818
  %incdec.ptr167 = getelementptr inbounds i32, i32* %84, i32 1, !dbg !8818
  store i32* %incdec.ptr167, i32** %p157, align 8, !dbg !8818
  br label %while.cond160, !dbg !8819, !llvm.loop !8820

while.end168:                                     ; preds = %while.cond160
  %call169 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !8822
  br label %if.end170, !dbg !8824

if.end170:                                        ; preds = %while.end168, %if.end154
  %85 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8825
  %sample_fmts = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %85, i32 0, i32 8, !dbg !8827
  %86 = load i32*, i32** %sample_fmts, align 8, !dbg !8827
  %tobool171 = icmp ne i32* %86, null, !dbg !8825
  br i1 %tobool171, label %if.then172, label %if.end185, !dbg !8828

if.then172:                                       ; preds = %if.end170
  call void @llvm.dbg.declare(metadata i32** %p173, metadata !8829, metadata !1512), !dbg !8831
  %87 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8832
  %sample_fmts174 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %87, i32 0, i32 8, !dbg !8834
  %88 = load i32*, i32** %sample_fmts174, align 8, !dbg !8834
  store i32* %88, i32** %p173, align 8, !dbg !8835
  %call175 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.216, i32 0, i32 0)), !dbg !8836
  br label %while.cond176, !dbg !8837

while.cond176:                                    ; preds = %while.body178, %if.then172
  %89 = load i32*, i32** %p173, align 8, !dbg !8838
  %90 = load i32, i32* %89, align 4, !dbg !8840
  %cmp177 = icmp ne i32 %90, -1, !dbg !8841
  br i1 %cmp177, label %while.body178, label %while.end183, !dbg !8842

while.body178:                                    ; preds = %while.cond176
  call void @llvm.dbg.declare(metadata i8** %name179, metadata !8843, metadata !1512), !dbg !8845
  %91 = load i32*, i32** %p173, align 8, !dbg !8846
  %92 = load i32, i32* %91, align 4, !dbg !8848
  %call180 = call i8* @av_get_sample_fmt_name(i32 %92), !dbg !8849
  store i8* %call180, i8** %name179, align 8, !dbg !8850
  %93 = load i8*, i8** %name179, align 8, !dbg !8851
  %call181 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.213, i32 0, i32 0), i8* %93), !dbg !8852
  %94 = load i32*, i32** %p173, align 8, !dbg !8854
  %incdec.ptr182 = getelementptr inbounds i32, i32* %94, i32 1, !dbg !8854
  store i32* %incdec.ptr182, i32** %p173, align 8, !dbg !8854
  br label %while.cond176, !dbg !8855, !llvm.loop !8856

while.end183:                                     ; preds = %while.cond176
  %call184 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !8858
  br label %if.end185, !dbg !8860

if.end185:                                        ; preds = %while.end183, %if.end170
  %95 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8861
  %channel_layouts = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %95, i32 0, i32 9, !dbg !8863
  %96 = load i64*, i64** %channel_layouts, align 8, !dbg !8863
  %tobool186 = icmp ne i64* %96, null, !dbg !8861
  br i1 %tobool186, label %if.then187, label %if.end201, !dbg !8864

if.then187:                                       ; preds = %if.end185
  call void @llvm.dbg.declare(metadata i64** %p188, metadata !8865, metadata !1512), !dbg !8867
  %97 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8868
  %channel_layouts189 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %97, i32 0, i32 9, !dbg !8870
  %98 = load i64*, i64** %channel_layouts189, align 8, !dbg !8870
  store i64* %98, i64** %p188, align 8, !dbg !8871
  %call190 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.217, i32 0, i32 0)), !dbg !8872
  br label %while.cond191, !dbg !8873

while.cond191:                                    ; preds = %while.body193, %if.then187
  %99 = load i64*, i64** %p188, align 8, !dbg !8874
  %100 = load i64, i64* %99, align 8, !dbg !8876
  %cmp192 = icmp ne i64 %100, 0, !dbg !8877
  br i1 %cmp192, label %while.body193, label %while.end199, !dbg !8878

while.body193:                                    ; preds = %while.cond191
  call void @llvm.dbg.declare(metadata [128 x i8]* %name194, metadata !8879, metadata !1512), !dbg !8881
  %arraydecay195 = getelementptr inbounds [128 x i8], [128 x i8]* %name194, i32 0, i32 0, !dbg !8882
  %101 = load i64*, i64** %p188, align 8, !dbg !8884
  %102 = load i64, i64* %101, align 8, !dbg !8885
  call void @av_get_channel_layout_string(i8* %arraydecay195, i32 128, i32 0, i64 %102), !dbg !8886
  %arraydecay196 = getelementptr inbounds [128 x i8], [128 x i8]* %name194, i32 0, i32 0, !dbg !8887
  %call197 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.213, i32 0, i32 0), i8* %arraydecay196), !dbg !8888
  %103 = load i64*, i64** %p188, align 8, !dbg !8890
  %incdec.ptr198 = getelementptr inbounds i64, i64* %103, i32 1, !dbg !8890
  store i64* %incdec.ptr198, i64** %p188, align 8, !dbg !8890
  br label %while.cond191, !dbg !8891, !llvm.loop !8892

while.end199:                                     ; preds = %while.cond191
  %call200 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i32 0, i32 0)), !dbg !8894
  br label %if.end201, !dbg !8896

if.end201:                                        ; preds = %while.end199, %if.end185
  %104 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8897
  %priv_class = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %104, i32 0, i32 11, !dbg !8899
  %105 = load %struct.AVClass*, %struct.AVClass** %priv_class, align 8, !dbg !8899
  %tobool202 = icmp ne %struct.AVClass* %105, null, !dbg !8897
  br i1 %tobool202, label %if.then203, label %if.end205, !dbg !8900

if.then203:                                       ; preds = %if.end201
  %106 = load %struct.AVCodec*, %struct.AVCodec** %c.addr, align 8, !dbg !8901
  %priv_class204 = getelementptr inbounds %struct.AVCodec, %struct.AVCodec* %106, i32 0, i32 11, !dbg !8903
  %107 = load %struct.AVClass*, %struct.AVClass** %priv_class204, align 8, !dbg !8903
  call void @show_help_children(%struct.AVClass* %107, i32 3), !dbg !8904
  br label %if.end205, !dbg !8905

if.end205:                                        ; preds = %if.then203, %if.end201
  ret void, !dbg !8906
}

declare %struct.AVCodecDescriptor* @avcodec_descriptor_get_by_name(i8*) #1

declare %struct.AVCodecHWConfig* @avcodec_get_hw_config(%struct.AVCodec*, i32) #1

declare i8* @av_hwdevice_get_type_name(i32) #1

declare i8* @av_get_pix_fmt_name(i32) #1

declare i8* @av_get_sample_fmt_name(i32) #1

declare void @av_get_channel_layout_string(i8*, i32, i32, i64) #1

declare %struct.AVInputFormat* @av_find_input_format(i8*) #1

declare %struct.AVOutputFormat* @av_guess_format(i8*, i8*, i8*) #1

declare %struct.AVCodecDescriptor* @avcodec_descriptor_get(i32) #1

declare %struct.AVFilter* @avfilter_get_by_name(i8*) #1

declare i32 @avfilter_pad_count(%struct.AVFilterPad*) #1

declare i8* @av_get_media_type_string(i32) #1

declare %struct.AVBitStreamFilter* @av_bsf_get_by_name(i8*) #1

declare i32 @av_dict_parse_string(%struct.AVDictionary**, i8*, i8*, i8*, i32) #1

declare i32 @avdevice_list_input_sources(%struct.AVInputFormat*, i8*, %struct.AVDictionary*, %struct.AVDeviceInfoList**) #1

declare void @avdevice_free_list_devices(%struct.AVDeviceInfoList**) #1

declare i32 @avdevice_list_output_sinks(%struct.AVOutputFormat*, i8*, %struct.AVDictionary*, %struct.AVDeviceInfoList**) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { noreturn nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind readnone uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { argmemonly nounwind }
attributes #10 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind }
attributes #12 = { noreturn nounwind }
attributes #13 = { noreturn }
attributes #14 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!1495, !1496}
!llvm.ident = !{!1497}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.9.0 (tags/RELEASE_390/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !1331, globals: !1339)
!1 = !DIFile(filename: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g/[inter]fftools--cmdutils.o.i", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!2 = !{!3, !25, !46, !68, !74, !534, !544, !744, !761, !771, !795, !801, !819, !843, !862, !872, !880, !892, !901, !931, !937, !1288, !1297, !1306, !1312, !1317}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVOptionType", file: !4, line: 221, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "./libavutil/opt.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!5 = !{!6, !7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24}
!6 = !DIEnumerator(name: "AV_OPT_TYPE_FLAGS", value: 0)
!7 = !DIEnumerator(name: "AV_OPT_TYPE_INT", value: 1)
!8 = !DIEnumerator(name: "AV_OPT_TYPE_INT64", value: 2)
!9 = !DIEnumerator(name: "AV_OPT_TYPE_DOUBLE", value: 3)
!10 = !DIEnumerator(name: "AV_OPT_TYPE_FLOAT", value: 4)
!11 = !DIEnumerator(name: "AV_OPT_TYPE_STRING", value: 5)
!12 = !DIEnumerator(name: "AV_OPT_TYPE_RATIONAL", value: 6)
!13 = !DIEnumerator(name: "AV_OPT_TYPE_BINARY", value: 7)
!14 = !DIEnumerator(name: "AV_OPT_TYPE_DICT", value: 8)
!15 = !DIEnumerator(name: "AV_OPT_TYPE_UINT64", value: 9)
!16 = !DIEnumerator(name: "AV_OPT_TYPE_CONST", value: 10)
!17 = !DIEnumerator(name: "AV_OPT_TYPE_IMAGE_SIZE", value: 11)
!18 = !DIEnumerator(name: "AV_OPT_TYPE_PIXEL_FMT", value: 12)
!19 = !DIEnumerator(name: "AV_OPT_TYPE_SAMPLE_FMT", value: 13)
!20 = !DIEnumerator(name: "AV_OPT_TYPE_VIDEO_RATE", value: 14)
!21 = !DIEnumerator(name: "AV_OPT_TYPE_DURATION", value: 15)
!22 = !DIEnumerator(name: "AV_OPT_TYPE_COLOR", value: 16)
!23 = !DIEnumerator(name: "AV_OPT_TYPE_CHANNEL_LAYOUT", value: 17)
!24 = !DIEnumerator(name: "AV_OPT_TYPE_BOOL", value: 18)
!25 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !26, line: 29, size: 32, align: 32, elements: !27)
!26 = !DIFile(filename: "./libavutil/log.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!27 = !{!28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45}
!28 = !DIEnumerator(name: "AV_CLASS_CATEGORY_NA", value: 0)
!29 = !DIEnumerator(name: "AV_CLASS_CATEGORY_INPUT", value: 1)
!30 = !DIEnumerator(name: "AV_CLASS_CATEGORY_OUTPUT", value: 2)
!31 = !DIEnumerator(name: "AV_CLASS_CATEGORY_MUXER", value: 3)
!32 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEMUXER", value: 4)
!33 = !DIEnumerator(name: "AV_CLASS_CATEGORY_ENCODER", value: 5)
!34 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DECODER", value: 6)
!35 = !DIEnumerator(name: "AV_CLASS_CATEGORY_FILTER", value: 7)
!36 = !DIEnumerator(name: "AV_CLASS_CATEGORY_BITSTREAM_FILTER", value: 8)
!37 = !DIEnumerator(name: "AV_CLASS_CATEGORY_SWSCALER", value: 9)
!38 = !DIEnumerator(name: "AV_CLASS_CATEGORY_SWRESAMPLER", value: 10)
!39 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_VIDEO_OUTPUT", value: 40)
!40 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_VIDEO_INPUT", value: 41)
!41 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_AUDIO_OUTPUT", value: 42)
!42 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_AUDIO_INPUT", value: 43)
!43 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_OUTPUT", value: 44)
!44 = !DIEnumerator(name: "AV_CLASS_CATEGORY_DEVICE_INPUT", value: 45)
!45 = !DIEnumerator(name: "AV_CLASS_CATEGORY_NB", value: 46)
!46 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "__rlimit_resource", file: !47, line: 31, size: 32, align: 32, elements: !48)
!47 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/resource.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!48 = !{!49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67}
!49 = !DIEnumerator(name: "RLIMIT_CPU", value: 0)
!50 = !DIEnumerator(name: "RLIMIT_FSIZE", value: 1)
!51 = !DIEnumerator(name: "RLIMIT_DATA", value: 2)
!52 = !DIEnumerator(name: "RLIMIT_STACK", value: 3)
!53 = !DIEnumerator(name: "RLIMIT_CORE", value: 4)
!54 = !DIEnumerator(name: "__RLIMIT_RSS", value: 5)
!55 = !DIEnumerator(name: "RLIMIT_NOFILE", value: 7)
!56 = !DIEnumerator(name: "__RLIMIT_OFILE", value: 7)
!57 = !DIEnumerator(name: "RLIMIT_AS", value: 9)
!58 = !DIEnumerator(name: "__RLIMIT_NPROC", value: 6)
!59 = !DIEnumerator(name: "__RLIMIT_MEMLOCK", value: 8)
!60 = !DIEnumerator(name: "__RLIMIT_LOCKS", value: 10)
!61 = !DIEnumerator(name: "__RLIMIT_SIGPENDING", value: 11)
!62 = !DIEnumerator(name: "__RLIMIT_MSGQUEUE", value: 12)
!63 = !DIEnumerator(name: "__RLIMIT_NICE", value: 13)
!64 = !DIEnumerator(name: "__RLIMIT_RTPRIO", value: 14)
!65 = !DIEnumerator(name: "__RLIMIT_RTTIME", value: 15)
!66 = !DIEnumerator(name: "__RLIMIT_NLIMITS", value: 16)
!67 = !DIEnumerator(name: "__RLIM_NLIMITS", value: 16)
!68 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "show_muxdemuxers", file: !69, line: 79, size: 32, align: 32, elements: !70)
!69 = !DIFile(filename: "fftools/cmdutils.c", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!70 = !{!71, !72, !73}
!71 = !DIEnumerator(name: "SHOW_DEFAULT", value: 0)
!72 = !DIEnumerator(name: "SHOW_DEMUXERS", value: 1)
!73 = !DIEnumerator(name: "SHOW_MUXERS", value: 2)
!74 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVCodecID", file: !75, line: 215, size: 32, align: 32, elements: !76)
!75 = !DIFile(filename: "./libavcodec/avcodec.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!76 = !{!77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533}
!77 = !DIEnumerator(name: "AV_CODEC_ID_NONE", value: 0)
!78 = !DIEnumerator(name: "AV_CODEC_ID_MPEG1VIDEO", value: 1)
!79 = !DIEnumerator(name: "AV_CODEC_ID_MPEG2VIDEO", value: 2)
!80 = !DIEnumerator(name: "AV_CODEC_ID_H261", value: 3)
!81 = !DIEnumerator(name: "AV_CODEC_ID_H263", value: 4)
!82 = !DIEnumerator(name: "AV_CODEC_ID_RV10", value: 5)
!83 = !DIEnumerator(name: "AV_CODEC_ID_RV20", value: 6)
!84 = !DIEnumerator(name: "AV_CODEC_ID_MJPEG", value: 7)
!85 = !DIEnumerator(name: "AV_CODEC_ID_MJPEGB", value: 8)
!86 = !DIEnumerator(name: "AV_CODEC_ID_LJPEG", value: 9)
!87 = !DIEnumerator(name: "AV_CODEC_ID_SP5X", value: 10)
!88 = !DIEnumerator(name: "AV_CODEC_ID_JPEGLS", value: 11)
!89 = !DIEnumerator(name: "AV_CODEC_ID_MPEG4", value: 12)
!90 = !DIEnumerator(name: "AV_CODEC_ID_RAWVIDEO", value: 13)
!91 = !DIEnumerator(name: "AV_CODEC_ID_MSMPEG4V1", value: 14)
!92 = !DIEnumerator(name: "AV_CODEC_ID_MSMPEG4V2", value: 15)
!93 = !DIEnumerator(name: "AV_CODEC_ID_MSMPEG4V3", value: 16)
!94 = !DIEnumerator(name: "AV_CODEC_ID_WMV1", value: 17)
!95 = !DIEnumerator(name: "AV_CODEC_ID_WMV2", value: 18)
!96 = !DIEnumerator(name: "AV_CODEC_ID_H263P", value: 19)
!97 = !DIEnumerator(name: "AV_CODEC_ID_H263I", value: 20)
!98 = !DIEnumerator(name: "AV_CODEC_ID_FLV1", value: 21)
!99 = !DIEnumerator(name: "AV_CODEC_ID_SVQ1", value: 22)
!100 = !DIEnumerator(name: "AV_CODEC_ID_SVQ3", value: 23)
!101 = !DIEnumerator(name: "AV_CODEC_ID_DVVIDEO", value: 24)
!102 = !DIEnumerator(name: "AV_CODEC_ID_HUFFYUV", value: 25)
!103 = !DIEnumerator(name: "AV_CODEC_ID_CYUV", value: 26)
!104 = !DIEnumerator(name: "AV_CODEC_ID_H264", value: 27)
!105 = !DIEnumerator(name: "AV_CODEC_ID_INDEO3", value: 28)
!106 = !DIEnumerator(name: "AV_CODEC_ID_VP3", value: 29)
!107 = !DIEnumerator(name: "AV_CODEC_ID_THEORA", value: 30)
!108 = !DIEnumerator(name: "AV_CODEC_ID_ASV1", value: 31)
!109 = !DIEnumerator(name: "AV_CODEC_ID_ASV2", value: 32)
!110 = !DIEnumerator(name: "AV_CODEC_ID_FFV1", value: 33)
!111 = !DIEnumerator(name: "AV_CODEC_ID_4XM", value: 34)
!112 = !DIEnumerator(name: "AV_CODEC_ID_VCR1", value: 35)
!113 = !DIEnumerator(name: "AV_CODEC_ID_CLJR", value: 36)
!114 = !DIEnumerator(name: "AV_CODEC_ID_MDEC", value: 37)
!115 = !DIEnumerator(name: "AV_CODEC_ID_ROQ", value: 38)
!116 = !DIEnumerator(name: "AV_CODEC_ID_INTERPLAY_VIDEO", value: 39)
!117 = !DIEnumerator(name: "AV_CODEC_ID_XAN_WC3", value: 40)
!118 = !DIEnumerator(name: "AV_CODEC_ID_XAN_WC4", value: 41)
!119 = !DIEnumerator(name: "AV_CODEC_ID_RPZA", value: 42)
!120 = !DIEnumerator(name: "AV_CODEC_ID_CINEPAK", value: 43)
!121 = !DIEnumerator(name: "AV_CODEC_ID_WS_VQA", value: 44)
!122 = !DIEnumerator(name: "AV_CODEC_ID_MSRLE", value: 45)
!123 = !DIEnumerator(name: "AV_CODEC_ID_MSVIDEO1", value: 46)
!124 = !DIEnumerator(name: "AV_CODEC_ID_IDCIN", value: 47)
!125 = !DIEnumerator(name: "AV_CODEC_ID_8BPS", value: 48)
!126 = !DIEnumerator(name: "AV_CODEC_ID_SMC", value: 49)
!127 = !DIEnumerator(name: "AV_CODEC_ID_FLIC", value: 50)
!128 = !DIEnumerator(name: "AV_CODEC_ID_TRUEMOTION1", value: 51)
!129 = !DIEnumerator(name: "AV_CODEC_ID_VMDVIDEO", value: 52)
!130 = !DIEnumerator(name: "AV_CODEC_ID_MSZH", value: 53)
!131 = !DIEnumerator(name: "AV_CODEC_ID_ZLIB", value: 54)
!132 = !DIEnumerator(name: "AV_CODEC_ID_QTRLE", value: 55)
!133 = !DIEnumerator(name: "AV_CODEC_ID_TSCC", value: 56)
!134 = !DIEnumerator(name: "AV_CODEC_ID_ULTI", value: 57)
!135 = !DIEnumerator(name: "AV_CODEC_ID_QDRAW", value: 58)
!136 = !DIEnumerator(name: "AV_CODEC_ID_VIXL", value: 59)
!137 = !DIEnumerator(name: "AV_CODEC_ID_QPEG", value: 60)
!138 = !DIEnumerator(name: "AV_CODEC_ID_PNG", value: 61)
!139 = !DIEnumerator(name: "AV_CODEC_ID_PPM", value: 62)
!140 = !DIEnumerator(name: "AV_CODEC_ID_PBM", value: 63)
!141 = !DIEnumerator(name: "AV_CODEC_ID_PGM", value: 64)
!142 = !DIEnumerator(name: "AV_CODEC_ID_PGMYUV", value: 65)
!143 = !DIEnumerator(name: "AV_CODEC_ID_PAM", value: 66)
!144 = !DIEnumerator(name: "AV_CODEC_ID_FFVHUFF", value: 67)
!145 = !DIEnumerator(name: "AV_CODEC_ID_RV30", value: 68)
!146 = !DIEnumerator(name: "AV_CODEC_ID_RV40", value: 69)
!147 = !DIEnumerator(name: "AV_CODEC_ID_VC1", value: 70)
!148 = !DIEnumerator(name: "AV_CODEC_ID_WMV3", value: 71)
!149 = !DIEnumerator(name: "AV_CODEC_ID_LOCO", value: 72)
!150 = !DIEnumerator(name: "AV_CODEC_ID_WNV1", value: 73)
!151 = !DIEnumerator(name: "AV_CODEC_ID_AASC", value: 74)
!152 = !DIEnumerator(name: "AV_CODEC_ID_INDEO2", value: 75)
!153 = !DIEnumerator(name: "AV_CODEC_ID_FRAPS", value: 76)
!154 = !DIEnumerator(name: "AV_CODEC_ID_TRUEMOTION2", value: 77)
!155 = !DIEnumerator(name: "AV_CODEC_ID_BMP", value: 78)
!156 = !DIEnumerator(name: "AV_CODEC_ID_CSCD", value: 79)
!157 = !DIEnumerator(name: "AV_CODEC_ID_MMVIDEO", value: 80)
!158 = !DIEnumerator(name: "AV_CODEC_ID_ZMBV", value: 81)
!159 = !DIEnumerator(name: "AV_CODEC_ID_AVS", value: 82)
!160 = !DIEnumerator(name: "AV_CODEC_ID_SMACKVIDEO", value: 83)
!161 = !DIEnumerator(name: "AV_CODEC_ID_NUV", value: 84)
!162 = !DIEnumerator(name: "AV_CODEC_ID_KMVC", value: 85)
!163 = !DIEnumerator(name: "AV_CODEC_ID_FLASHSV", value: 86)
!164 = !DIEnumerator(name: "AV_CODEC_ID_CAVS", value: 87)
!165 = !DIEnumerator(name: "AV_CODEC_ID_JPEG2000", value: 88)
!166 = !DIEnumerator(name: "AV_CODEC_ID_VMNC", value: 89)
!167 = !DIEnumerator(name: "AV_CODEC_ID_VP5", value: 90)
!168 = !DIEnumerator(name: "AV_CODEC_ID_VP6", value: 91)
!169 = !DIEnumerator(name: "AV_CODEC_ID_VP6F", value: 92)
!170 = !DIEnumerator(name: "AV_CODEC_ID_TARGA", value: 93)
!171 = !DIEnumerator(name: "AV_CODEC_ID_DSICINVIDEO", value: 94)
!172 = !DIEnumerator(name: "AV_CODEC_ID_TIERTEXSEQVIDEO", value: 95)
!173 = !DIEnumerator(name: "AV_CODEC_ID_TIFF", value: 96)
!174 = !DIEnumerator(name: "AV_CODEC_ID_GIF", value: 97)
!175 = !DIEnumerator(name: "AV_CODEC_ID_DXA", value: 98)
!176 = !DIEnumerator(name: "AV_CODEC_ID_DNXHD", value: 99)
!177 = !DIEnumerator(name: "AV_CODEC_ID_THP", value: 100)
!178 = !DIEnumerator(name: "AV_CODEC_ID_SGI", value: 101)
!179 = !DIEnumerator(name: "AV_CODEC_ID_C93", value: 102)
!180 = !DIEnumerator(name: "AV_CODEC_ID_BETHSOFTVID", value: 103)
!181 = !DIEnumerator(name: "AV_CODEC_ID_PTX", value: 104)
!182 = !DIEnumerator(name: "AV_CODEC_ID_TXD", value: 105)
!183 = !DIEnumerator(name: "AV_CODEC_ID_VP6A", value: 106)
!184 = !DIEnumerator(name: "AV_CODEC_ID_AMV", value: 107)
!185 = !DIEnumerator(name: "AV_CODEC_ID_VB", value: 108)
!186 = !DIEnumerator(name: "AV_CODEC_ID_PCX", value: 109)
!187 = !DIEnumerator(name: "AV_CODEC_ID_SUNRAST", value: 110)
!188 = !DIEnumerator(name: "AV_CODEC_ID_INDEO4", value: 111)
!189 = !DIEnumerator(name: "AV_CODEC_ID_INDEO5", value: 112)
!190 = !DIEnumerator(name: "AV_CODEC_ID_MIMIC", value: 113)
!191 = !DIEnumerator(name: "AV_CODEC_ID_RL2", value: 114)
!192 = !DIEnumerator(name: "AV_CODEC_ID_ESCAPE124", value: 115)
!193 = !DIEnumerator(name: "AV_CODEC_ID_DIRAC", value: 116)
!194 = !DIEnumerator(name: "AV_CODEC_ID_BFI", value: 117)
!195 = !DIEnumerator(name: "AV_CODEC_ID_CMV", value: 118)
!196 = !DIEnumerator(name: "AV_CODEC_ID_MOTIONPIXELS", value: 119)
!197 = !DIEnumerator(name: "AV_CODEC_ID_TGV", value: 120)
!198 = !DIEnumerator(name: "AV_CODEC_ID_TGQ", value: 121)
!199 = !DIEnumerator(name: "AV_CODEC_ID_TQI", value: 122)
!200 = !DIEnumerator(name: "AV_CODEC_ID_AURA", value: 123)
!201 = !DIEnumerator(name: "AV_CODEC_ID_AURA2", value: 124)
!202 = !DIEnumerator(name: "AV_CODEC_ID_V210X", value: 125)
!203 = !DIEnumerator(name: "AV_CODEC_ID_TMV", value: 126)
!204 = !DIEnumerator(name: "AV_CODEC_ID_V210", value: 127)
!205 = !DIEnumerator(name: "AV_CODEC_ID_DPX", value: 128)
!206 = !DIEnumerator(name: "AV_CODEC_ID_MAD", value: 129)
!207 = !DIEnumerator(name: "AV_CODEC_ID_FRWU", value: 130)
!208 = !DIEnumerator(name: "AV_CODEC_ID_FLASHSV2", value: 131)
!209 = !DIEnumerator(name: "AV_CODEC_ID_CDGRAPHICS", value: 132)
!210 = !DIEnumerator(name: "AV_CODEC_ID_R210", value: 133)
!211 = !DIEnumerator(name: "AV_CODEC_ID_ANM", value: 134)
!212 = !DIEnumerator(name: "AV_CODEC_ID_BINKVIDEO", value: 135)
!213 = !DIEnumerator(name: "AV_CODEC_ID_IFF_ILBM", value: 136)
!214 = !DIEnumerator(name: "AV_CODEC_ID_KGV1", value: 137)
!215 = !DIEnumerator(name: "AV_CODEC_ID_YOP", value: 138)
!216 = !DIEnumerator(name: "AV_CODEC_ID_VP8", value: 139)
!217 = !DIEnumerator(name: "AV_CODEC_ID_PICTOR", value: 140)
!218 = !DIEnumerator(name: "AV_CODEC_ID_ANSI", value: 141)
!219 = !DIEnumerator(name: "AV_CODEC_ID_A64_MULTI", value: 142)
!220 = !DIEnumerator(name: "AV_CODEC_ID_A64_MULTI5", value: 143)
!221 = !DIEnumerator(name: "AV_CODEC_ID_R10K", value: 144)
!222 = !DIEnumerator(name: "AV_CODEC_ID_MXPEG", value: 145)
!223 = !DIEnumerator(name: "AV_CODEC_ID_LAGARITH", value: 146)
!224 = !DIEnumerator(name: "AV_CODEC_ID_PRORES", value: 147)
!225 = !DIEnumerator(name: "AV_CODEC_ID_JV", value: 148)
!226 = !DIEnumerator(name: "AV_CODEC_ID_DFA", value: 149)
!227 = !DIEnumerator(name: "AV_CODEC_ID_WMV3IMAGE", value: 150)
!228 = !DIEnumerator(name: "AV_CODEC_ID_VC1IMAGE", value: 151)
!229 = !DIEnumerator(name: "AV_CODEC_ID_UTVIDEO", value: 152)
!230 = !DIEnumerator(name: "AV_CODEC_ID_BMV_VIDEO", value: 153)
!231 = !DIEnumerator(name: "AV_CODEC_ID_VBLE", value: 154)
!232 = !DIEnumerator(name: "AV_CODEC_ID_DXTORY", value: 155)
!233 = !DIEnumerator(name: "AV_CODEC_ID_V410", value: 156)
!234 = !DIEnumerator(name: "AV_CODEC_ID_XWD", value: 157)
!235 = !DIEnumerator(name: "AV_CODEC_ID_CDXL", value: 158)
!236 = !DIEnumerator(name: "AV_CODEC_ID_XBM", value: 159)
!237 = !DIEnumerator(name: "AV_CODEC_ID_ZEROCODEC", value: 160)
!238 = !DIEnumerator(name: "AV_CODEC_ID_MSS1", value: 161)
!239 = !DIEnumerator(name: "AV_CODEC_ID_MSA1", value: 162)
!240 = !DIEnumerator(name: "AV_CODEC_ID_TSCC2", value: 163)
!241 = !DIEnumerator(name: "AV_CODEC_ID_MTS2", value: 164)
!242 = !DIEnumerator(name: "AV_CODEC_ID_CLLC", value: 165)
!243 = !DIEnumerator(name: "AV_CODEC_ID_MSS2", value: 166)
!244 = !DIEnumerator(name: "AV_CODEC_ID_VP9", value: 167)
!245 = !DIEnumerator(name: "AV_CODEC_ID_AIC", value: 168)
!246 = !DIEnumerator(name: "AV_CODEC_ID_ESCAPE130", value: 169)
!247 = !DIEnumerator(name: "AV_CODEC_ID_G2M", value: 170)
!248 = !DIEnumerator(name: "AV_CODEC_ID_WEBP", value: 171)
!249 = !DIEnumerator(name: "AV_CODEC_ID_HNM4_VIDEO", value: 172)
!250 = !DIEnumerator(name: "AV_CODEC_ID_HEVC", value: 173)
!251 = !DIEnumerator(name: "AV_CODEC_ID_FIC", value: 174)
!252 = !DIEnumerator(name: "AV_CODEC_ID_ALIAS_PIX", value: 175)
!253 = !DIEnumerator(name: "AV_CODEC_ID_BRENDER_PIX", value: 176)
!254 = !DIEnumerator(name: "AV_CODEC_ID_PAF_VIDEO", value: 177)
!255 = !DIEnumerator(name: "AV_CODEC_ID_EXR", value: 178)
!256 = !DIEnumerator(name: "AV_CODEC_ID_VP7", value: 179)
!257 = !DIEnumerator(name: "AV_CODEC_ID_SANM", value: 180)
!258 = !DIEnumerator(name: "AV_CODEC_ID_SGIRLE", value: 181)
!259 = !DIEnumerator(name: "AV_CODEC_ID_MVC1", value: 182)
!260 = !DIEnumerator(name: "AV_CODEC_ID_MVC2", value: 183)
!261 = !DIEnumerator(name: "AV_CODEC_ID_HQX", value: 184)
!262 = !DIEnumerator(name: "AV_CODEC_ID_TDSC", value: 185)
!263 = !DIEnumerator(name: "AV_CODEC_ID_HQ_HQA", value: 186)
!264 = !DIEnumerator(name: "AV_CODEC_ID_HAP", value: 187)
!265 = !DIEnumerator(name: "AV_CODEC_ID_DDS", value: 188)
!266 = !DIEnumerator(name: "AV_CODEC_ID_DXV", value: 189)
!267 = !DIEnumerator(name: "AV_CODEC_ID_SCREENPRESSO", value: 190)
!268 = !DIEnumerator(name: "AV_CODEC_ID_RSCC", value: 191)
!269 = !DIEnumerator(name: "AV_CODEC_ID_AVS2", value: 192)
!270 = !DIEnumerator(name: "AV_CODEC_ID_Y41P", value: 32768)
!271 = !DIEnumerator(name: "AV_CODEC_ID_AVRP", value: 32769)
!272 = !DIEnumerator(name: "AV_CODEC_ID_012V", value: 32770)
!273 = !DIEnumerator(name: "AV_CODEC_ID_AVUI", value: 32771)
!274 = !DIEnumerator(name: "AV_CODEC_ID_AYUV", value: 32772)
!275 = !DIEnumerator(name: "AV_CODEC_ID_TARGA_Y216", value: 32773)
!276 = !DIEnumerator(name: "AV_CODEC_ID_V308", value: 32774)
!277 = !DIEnumerator(name: "AV_CODEC_ID_V408", value: 32775)
!278 = !DIEnumerator(name: "AV_CODEC_ID_YUV4", value: 32776)
!279 = !DIEnumerator(name: "AV_CODEC_ID_AVRN", value: 32777)
!280 = !DIEnumerator(name: "AV_CODEC_ID_CPIA", value: 32778)
!281 = !DIEnumerator(name: "AV_CODEC_ID_XFACE", value: 32779)
!282 = !DIEnumerator(name: "AV_CODEC_ID_SNOW", value: 32780)
!283 = !DIEnumerator(name: "AV_CODEC_ID_SMVJPEG", value: 32781)
!284 = !DIEnumerator(name: "AV_CODEC_ID_APNG", value: 32782)
!285 = !DIEnumerator(name: "AV_CODEC_ID_DAALA", value: 32783)
!286 = !DIEnumerator(name: "AV_CODEC_ID_CFHD", value: 32784)
!287 = !DIEnumerator(name: "AV_CODEC_ID_TRUEMOTION2RT", value: 32785)
!288 = !DIEnumerator(name: "AV_CODEC_ID_M101", value: 32786)
!289 = !DIEnumerator(name: "AV_CODEC_ID_MAGICYUV", value: 32787)
!290 = !DIEnumerator(name: "AV_CODEC_ID_SHEERVIDEO", value: 32788)
!291 = !DIEnumerator(name: "AV_CODEC_ID_YLC", value: 32789)
!292 = !DIEnumerator(name: "AV_CODEC_ID_PSD", value: 32790)
!293 = !DIEnumerator(name: "AV_CODEC_ID_PIXLET", value: 32791)
!294 = !DIEnumerator(name: "AV_CODEC_ID_SPEEDHQ", value: 32792)
!295 = !DIEnumerator(name: "AV_CODEC_ID_FMVC", value: 32793)
!296 = !DIEnumerator(name: "AV_CODEC_ID_SCPR", value: 32794)
!297 = !DIEnumerator(name: "AV_CODEC_ID_CLEARVIDEO", value: 32795)
!298 = !DIEnumerator(name: "AV_CODEC_ID_XPM", value: 32796)
!299 = !DIEnumerator(name: "AV_CODEC_ID_AV1", value: 32797)
!300 = !DIEnumerator(name: "AV_CODEC_ID_BITPACKED", value: 32798)
!301 = !DIEnumerator(name: "AV_CODEC_ID_MSCC", value: 32799)
!302 = !DIEnumerator(name: "AV_CODEC_ID_SRGC", value: 32800)
!303 = !DIEnumerator(name: "AV_CODEC_ID_SVG", value: 32801)
!304 = !DIEnumerator(name: "AV_CODEC_ID_GDV", value: 32802)
!305 = !DIEnumerator(name: "AV_CODEC_ID_FITS", value: 32803)
!306 = !DIEnumerator(name: "AV_CODEC_ID_IMM4", value: 32804)
!307 = !DIEnumerator(name: "AV_CODEC_ID_PROSUMER", value: 32805)
!308 = !DIEnumerator(name: "AV_CODEC_ID_MWSC", value: 32806)
!309 = !DIEnumerator(name: "AV_CODEC_ID_WCMV", value: 32807)
!310 = !DIEnumerator(name: "AV_CODEC_ID_RASC", value: 32808)
!311 = !DIEnumerator(name: "AV_CODEC_ID_HYMT", value: 32809)
!312 = !DIEnumerator(name: "AV_CODEC_ID_ARBC", value: 32810)
!313 = !DIEnumerator(name: "AV_CODEC_ID_FIRST_AUDIO", value: 65536)
!314 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S16LE", value: 65536)
!315 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S16BE", value: 65537)
!316 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U16LE", value: 65538)
!317 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U16BE", value: 65539)
!318 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S8", value: 65540)
!319 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U8", value: 65541)
!320 = !DIEnumerator(name: "AV_CODEC_ID_PCM_MULAW", value: 65542)
!321 = !DIEnumerator(name: "AV_CODEC_ID_PCM_ALAW", value: 65543)
!322 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S32LE", value: 65544)
!323 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S32BE", value: 65545)
!324 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U32LE", value: 65546)
!325 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U32BE", value: 65547)
!326 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S24LE", value: 65548)
!327 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S24BE", value: 65549)
!328 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U24LE", value: 65550)
!329 = !DIEnumerator(name: "AV_CODEC_ID_PCM_U24BE", value: 65551)
!330 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S24DAUD", value: 65552)
!331 = !DIEnumerator(name: "AV_CODEC_ID_PCM_ZORK", value: 65553)
!332 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S16LE_PLANAR", value: 65554)
!333 = !DIEnumerator(name: "AV_CODEC_ID_PCM_DVD", value: 65555)
!334 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F32BE", value: 65556)
!335 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F32LE", value: 65557)
!336 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F64BE", value: 65558)
!337 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F64LE", value: 65559)
!338 = !DIEnumerator(name: "AV_CODEC_ID_PCM_BLURAY", value: 65560)
!339 = !DIEnumerator(name: "AV_CODEC_ID_PCM_LXF", value: 65561)
!340 = !DIEnumerator(name: "AV_CODEC_ID_S302M", value: 65562)
!341 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S8_PLANAR", value: 65563)
!342 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S24LE_PLANAR", value: 65564)
!343 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S32LE_PLANAR", value: 65565)
!344 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S16BE_PLANAR", value: 65566)
!345 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S64LE", value: 67584)
!346 = !DIEnumerator(name: "AV_CODEC_ID_PCM_S64BE", value: 67585)
!347 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F16LE", value: 67586)
!348 = !DIEnumerator(name: "AV_CODEC_ID_PCM_F24LE", value: 67587)
!349 = !DIEnumerator(name: "AV_CODEC_ID_PCM_VIDC", value: 67588)
!350 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_QT", value: 69632)
!351 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_WAV", value: 69633)
!352 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_DK3", value: 69634)
!353 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_DK4", value: 69635)
!354 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_WS", value: 69636)
!355 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_SMJPEG", value: 69637)
!356 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_MS", value: 69638)
!357 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_4XM", value: 69639)
!358 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_XA", value: 69640)
!359 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_ADX", value: 69641)
!360 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA", value: 69642)
!361 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_G726", value: 69643)
!362 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_CT", value: 69644)
!363 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_SWF", value: 69645)
!364 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_YAMAHA", value: 69646)
!365 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_SBPRO_4", value: 69647)
!366 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_SBPRO_3", value: 69648)
!367 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_SBPRO_2", value: 69649)
!368 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_THP", value: 69650)
!369 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_AMV", value: 69651)
!370 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_R1", value: 69652)
!371 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_R3", value: 69653)
!372 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_R2", value: 69654)
!373 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_EA_SEAD", value: 69655)
!374 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_EA_EACS", value: 69656)
!375 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_XAS", value: 69657)
!376 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_EA_MAXIS_XA", value: 69658)
!377 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_ISS", value: 69659)
!378 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_G722", value: 69660)
!379 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_APC", value: 69661)
!380 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_VIMA", value: 69662)
!381 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_AFC", value: 71680)
!382 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_OKI", value: 71681)
!383 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_DTK", value: 71682)
!384 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_RAD", value: 71683)
!385 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_G726LE", value: 71684)
!386 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_THP_LE", value: 71685)
!387 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_PSX", value: 71686)
!388 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_AICA", value: 71687)
!389 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_IMA_DAT4", value: 71688)
!390 = !DIEnumerator(name: "AV_CODEC_ID_ADPCM_MTAF", value: 71689)
!391 = !DIEnumerator(name: "AV_CODEC_ID_AMR_NB", value: 73728)
!392 = !DIEnumerator(name: "AV_CODEC_ID_AMR_WB", value: 73729)
!393 = !DIEnumerator(name: "AV_CODEC_ID_RA_144", value: 77824)
!394 = !DIEnumerator(name: "AV_CODEC_ID_RA_288", value: 77825)
!395 = !DIEnumerator(name: "AV_CODEC_ID_ROQ_DPCM", value: 81920)
!396 = !DIEnumerator(name: "AV_CODEC_ID_INTERPLAY_DPCM", value: 81921)
!397 = !DIEnumerator(name: "AV_CODEC_ID_XAN_DPCM", value: 81922)
!398 = !DIEnumerator(name: "AV_CODEC_ID_SOL_DPCM", value: 81923)
!399 = !DIEnumerator(name: "AV_CODEC_ID_SDX2_DPCM", value: 83968)
!400 = !DIEnumerator(name: "AV_CODEC_ID_GREMLIN_DPCM", value: 83969)
!401 = !DIEnumerator(name: "AV_CODEC_ID_MP2", value: 86016)
!402 = !DIEnumerator(name: "AV_CODEC_ID_MP3", value: 86017)
!403 = !DIEnumerator(name: "AV_CODEC_ID_AAC", value: 86018)
!404 = !DIEnumerator(name: "AV_CODEC_ID_AC3", value: 86019)
!405 = !DIEnumerator(name: "AV_CODEC_ID_DTS", value: 86020)
!406 = !DIEnumerator(name: "AV_CODEC_ID_VORBIS", value: 86021)
!407 = !DIEnumerator(name: "AV_CODEC_ID_DVAUDIO", value: 86022)
!408 = !DIEnumerator(name: "AV_CODEC_ID_WMAV1", value: 86023)
!409 = !DIEnumerator(name: "AV_CODEC_ID_WMAV2", value: 86024)
!410 = !DIEnumerator(name: "AV_CODEC_ID_MACE3", value: 86025)
!411 = !DIEnumerator(name: "AV_CODEC_ID_MACE6", value: 86026)
!412 = !DIEnumerator(name: "AV_CODEC_ID_VMDAUDIO", value: 86027)
!413 = !DIEnumerator(name: "AV_CODEC_ID_FLAC", value: 86028)
!414 = !DIEnumerator(name: "AV_CODEC_ID_MP3ADU", value: 86029)
!415 = !DIEnumerator(name: "AV_CODEC_ID_MP3ON4", value: 86030)
!416 = !DIEnumerator(name: "AV_CODEC_ID_SHORTEN", value: 86031)
!417 = !DIEnumerator(name: "AV_CODEC_ID_ALAC", value: 86032)
!418 = !DIEnumerator(name: "AV_CODEC_ID_WESTWOOD_SND1", value: 86033)
!419 = !DIEnumerator(name: "AV_CODEC_ID_GSM", value: 86034)
!420 = !DIEnumerator(name: "AV_CODEC_ID_QDM2", value: 86035)
!421 = !DIEnumerator(name: "AV_CODEC_ID_COOK", value: 86036)
!422 = !DIEnumerator(name: "AV_CODEC_ID_TRUESPEECH", value: 86037)
!423 = !DIEnumerator(name: "AV_CODEC_ID_TTA", value: 86038)
!424 = !DIEnumerator(name: "AV_CODEC_ID_SMACKAUDIO", value: 86039)
!425 = !DIEnumerator(name: "AV_CODEC_ID_QCELP", value: 86040)
!426 = !DIEnumerator(name: "AV_CODEC_ID_WAVPACK", value: 86041)
!427 = !DIEnumerator(name: "AV_CODEC_ID_DSICINAUDIO", value: 86042)
!428 = !DIEnumerator(name: "AV_CODEC_ID_IMC", value: 86043)
!429 = !DIEnumerator(name: "AV_CODEC_ID_MUSEPACK7", value: 86044)
!430 = !DIEnumerator(name: "AV_CODEC_ID_MLP", value: 86045)
!431 = !DIEnumerator(name: "AV_CODEC_ID_GSM_MS", value: 86046)
!432 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC3", value: 86047)
!433 = !DIEnumerator(name: "AV_CODEC_ID_APE", value: 86048)
!434 = !DIEnumerator(name: "AV_CODEC_ID_NELLYMOSER", value: 86049)
!435 = !DIEnumerator(name: "AV_CODEC_ID_MUSEPACK8", value: 86050)
!436 = !DIEnumerator(name: "AV_CODEC_ID_SPEEX", value: 86051)
!437 = !DIEnumerator(name: "AV_CODEC_ID_WMAVOICE", value: 86052)
!438 = !DIEnumerator(name: "AV_CODEC_ID_WMAPRO", value: 86053)
!439 = !DIEnumerator(name: "AV_CODEC_ID_WMALOSSLESS", value: 86054)
!440 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC3P", value: 86055)
!441 = !DIEnumerator(name: "AV_CODEC_ID_EAC3", value: 86056)
!442 = !DIEnumerator(name: "AV_CODEC_ID_SIPR", value: 86057)
!443 = !DIEnumerator(name: "AV_CODEC_ID_MP1", value: 86058)
!444 = !DIEnumerator(name: "AV_CODEC_ID_TWINVQ", value: 86059)
!445 = !DIEnumerator(name: "AV_CODEC_ID_TRUEHD", value: 86060)
!446 = !DIEnumerator(name: "AV_CODEC_ID_MP4ALS", value: 86061)
!447 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC1", value: 86062)
!448 = !DIEnumerator(name: "AV_CODEC_ID_BINKAUDIO_RDFT", value: 86063)
!449 = !DIEnumerator(name: "AV_CODEC_ID_BINKAUDIO_DCT", value: 86064)
!450 = !DIEnumerator(name: "AV_CODEC_ID_AAC_LATM", value: 86065)
!451 = !DIEnumerator(name: "AV_CODEC_ID_QDMC", value: 86066)
!452 = !DIEnumerator(name: "AV_CODEC_ID_CELT", value: 86067)
!453 = !DIEnumerator(name: "AV_CODEC_ID_G723_1", value: 86068)
!454 = !DIEnumerator(name: "AV_CODEC_ID_G729", value: 86069)
!455 = !DIEnumerator(name: "AV_CODEC_ID_8SVX_EXP", value: 86070)
!456 = !DIEnumerator(name: "AV_CODEC_ID_8SVX_FIB", value: 86071)
!457 = !DIEnumerator(name: "AV_CODEC_ID_BMV_AUDIO", value: 86072)
!458 = !DIEnumerator(name: "AV_CODEC_ID_RALF", value: 86073)
!459 = !DIEnumerator(name: "AV_CODEC_ID_IAC", value: 86074)
!460 = !DIEnumerator(name: "AV_CODEC_ID_ILBC", value: 86075)
!461 = !DIEnumerator(name: "AV_CODEC_ID_OPUS", value: 86076)
!462 = !DIEnumerator(name: "AV_CODEC_ID_COMFORT_NOISE", value: 86077)
!463 = !DIEnumerator(name: "AV_CODEC_ID_TAK", value: 86078)
!464 = !DIEnumerator(name: "AV_CODEC_ID_METASOUND", value: 86079)
!465 = !DIEnumerator(name: "AV_CODEC_ID_PAF_AUDIO", value: 86080)
!466 = !DIEnumerator(name: "AV_CODEC_ID_ON2AVC", value: 86081)
!467 = !DIEnumerator(name: "AV_CODEC_ID_DSS_SP", value: 86082)
!468 = !DIEnumerator(name: "AV_CODEC_ID_CODEC2", value: 86083)
!469 = !DIEnumerator(name: "AV_CODEC_ID_FFWAVESYNTH", value: 88064)
!470 = !DIEnumerator(name: "AV_CODEC_ID_SONIC", value: 88065)
!471 = !DIEnumerator(name: "AV_CODEC_ID_SONIC_LS", value: 88066)
!472 = !DIEnumerator(name: "AV_CODEC_ID_EVRC", value: 88067)
!473 = !DIEnumerator(name: "AV_CODEC_ID_SMV", value: 88068)
!474 = !DIEnumerator(name: "AV_CODEC_ID_DSD_LSBF", value: 88069)
!475 = !DIEnumerator(name: "AV_CODEC_ID_DSD_MSBF", value: 88070)
!476 = !DIEnumerator(name: "AV_CODEC_ID_DSD_LSBF_PLANAR", value: 88071)
!477 = !DIEnumerator(name: "AV_CODEC_ID_DSD_MSBF_PLANAR", value: 88072)
!478 = !DIEnumerator(name: "AV_CODEC_ID_4GV", value: 88073)
!479 = !DIEnumerator(name: "AV_CODEC_ID_INTERPLAY_ACM", value: 88074)
!480 = !DIEnumerator(name: "AV_CODEC_ID_XMA1", value: 88075)
!481 = !DIEnumerator(name: "AV_CODEC_ID_XMA2", value: 88076)
!482 = !DIEnumerator(name: "AV_CODEC_ID_DST", value: 88077)
!483 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC3AL", value: 88078)
!484 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC3PAL", value: 88079)
!485 = !DIEnumerator(name: "AV_CODEC_ID_DOLBY_E", value: 88080)
!486 = !DIEnumerator(name: "AV_CODEC_ID_APTX", value: 88081)
!487 = !DIEnumerator(name: "AV_CODEC_ID_APTX_HD", value: 88082)
!488 = !DIEnumerator(name: "AV_CODEC_ID_SBC", value: 88083)
!489 = !DIEnumerator(name: "AV_CODEC_ID_ATRAC9", value: 88084)
!490 = !DIEnumerator(name: "AV_CODEC_ID_HCOM", value: 88085)
!491 = !DIEnumerator(name: "AV_CODEC_ID_FIRST_SUBTITLE", value: 94208)
!492 = !DIEnumerator(name: "AV_CODEC_ID_DVD_SUBTITLE", value: 94208)
!493 = !DIEnumerator(name: "AV_CODEC_ID_DVB_SUBTITLE", value: 94209)
!494 = !DIEnumerator(name: "AV_CODEC_ID_TEXT", value: 94210)
!495 = !DIEnumerator(name: "AV_CODEC_ID_XSUB", value: 94211)
!496 = !DIEnumerator(name: "AV_CODEC_ID_SSA", value: 94212)
!497 = !DIEnumerator(name: "AV_CODEC_ID_MOV_TEXT", value: 94213)
!498 = !DIEnumerator(name: "AV_CODEC_ID_HDMV_PGS_SUBTITLE", value: 94214)
!499 = !DIEnumerator(name: "AV_CODEC_ID_DVB_TELETEXT", value: 94215)
!500 = !DIEnumerator(name: "AV_CODEC_ID_SRT", value: 94216)
!501 = !DIEnumerator(name: "AV_CODEC_ID_MICRODVD", value: 96256)
!502 = !DIEnumerator(name: "AV_CODEC_ID_EIA_608", value: 96257)
!503 = !DIEnumerator(name: "AV_CODEC_ID_JACOSUB", value: 96258)
!504 = !DIEnumerator(name: "AV_CODEC_ID_SAMI", value: 96259)
!505 = !DIEnumerator(name: "AV_CODEC_ID_REALTEXT", value: 96260)
!506 = !DIEnumerator(name: "AV_CODEC_ID_STL", value: 96261)
!507 = !DIEnumerator(name: "AV_CODEC_ID_SUBVIEWER1", value: 96262)
!508 = !DIEnumerator(name: "AV_CODEC_ID_SUBVIEWER", value: 96263)
!509 = !DIEnumerator(name: "AV_CODEC_ID_SUBRIP", value: 96264)
!510 = !DIEnumerator(name: "AV_CODEC_ID_WEBVTT", value: 96265)
!511 = !DIEnumerator(name: "AV_CODEC_ID_MPL2", value: 96266)
!512 = !DIEnumerator(name: "AV_CODEC_ID_VPLAYER", value: 96267)
!513 = !DIEnumerator(name: "AV_CODEC_ID_PJS", value: 96268)
!514 = !DIEnumerator(name: "AV_CODEC_ID_ASS", value: 96269)
!515 = !DIEnumerator(name: "AV_CODEC_ID_HDMV_TEXT_SUBTITLE", value: 96270)
!516 = !DIEnumerator(name: "AV_CODEC_ID_TTML", value: 96271)
!517 = !DIEnumerator(name: "AV_CODEC_ID_ARIB_CAPTION", value: 96272)
!518 = !DIEnumerator(name: "AV_CODEC_ID_FIRST_UNKNOWN", value: 98304)
!519 = !DIEnumerator(name: "AV_CODEC_ID_TTF", value: 98304)
!520 = !DIEnumerator(name: "AV_CODEC_ID_SCTE_35", value: 98305)
!521 = !DIEnumerator(name: "AV_CODEC_ID_BINTEXT", value: 100352)
!522 = !DIEnumerator(name: "AV_CODEC_ID_XBIN", value: 100353)
!523 = !DIEnumerator(name: "AV_CODEC_ID_IDF", value: 100354)
!524 = !DIEnumerator(name: "AV_CODEC_ID_OTF", value: 100355)
!525 = !DIEnumerator(name: "AV_CODEC_ID_SMPTE_KLV", value: 100356)
!526 = !DIEnumerator(name: "AV_CODEC_ID_DVD_NAV", value: 100357)
!527 = !DIEnumerator(name: "AV_CODEC_ID_TIMED_ID3", value: 100358)
!528 = !DIEnumerator(name: "AV_CODEC_ID_BIN_DATA", value: 100359)
!529 = !DIEnumerator(name: "AV_CODEC_ID_PROBE", value: 102400)
!530 = !DIEnumerator(name: "AV_CODEC_ID_MPEG2TS", value: 131072)
!531 = !DIEnumerator(name: "AV_CODEC_ID_MPEG4SYSTEMS", value: 131073)
!532 = !DIEnumerator(name: "AV_CODEC_ID_FFMETADATA", value: 135168)
!533 = !DIEnumerator(name: "AV_CODEC_ID_WRAPPED_AVFRAME", value: 135169)
!534 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVMediaType", file: !535, line: 199, size: 32, align: 32, elements: !536)
!535 = !DIFile(filename: "./libavutil/avutil.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!536 = !{!537, !538, !539, !540, !541, !542, !543}
!537 = !DIEnumerator(name: "AVMEDIA_TYPE_UNKNOWN", value: -1)
!538 = !DIEnumerator(name: "AVMEDIA_TYPE_VIDEO", value: 0)
!539 = !DIEnumerator(name: "AVMEDIA_TYPE_AUDIO", value: 1)
!540 = !DIEnumerator(name: "AVMEDIA_TYPE_DATA", value: 2)
!541 = !DIEnumerator(name: "AVMEDIA_TYPE_SUBTITLE", value: 3)
!542 = !DIEnumerator(name: "AVMEDIA_TYPE_ATTACHMENT", value: 4)
!543 = !DIEnumerator(name: "AVMEDIA_TYPE_NB", value: 5)
!544 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVPixelFormat", file: !545, line: 64, size: 32, align: 32, elements: !546)
!545 = !DIFile(filename: "./libavutil/pixfmt.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!546 = !{!547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743}
!547 = !DIEnumerator(name: "AV_PIX_FMT_NONE", value: -1)
!548 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P", value: 0)
!549 = !DIEnumerator(name: "AV_PIX_FMT_YUYV422", value: 1)
!550 = !DIEnumerator(name: "AV_PIX_FMT_RGB24", value: 2)
!551 = !DIEnumerator(name: "AV_PIX_FMT_BGR24", value: 3)
!552 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P", value: 4)
!553 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P", value: 5)
!554 = !DIEnumerator(name: "AV_PIX_FMT_YUV410P", value: 6)
!555 = !DIEnumerator(name: "AV_PIX_FMT_YUV411P", value: 7)
!556 = !DIEnumerator(name: "AV_PIX_FMT_GRAY8", value: 8)
!557 = !DIEnumerator(name: "AV_PIX_FMT_MONOWHITE", value: 9)
!558 = !DIEnumerator(name: "AV_PIX_FMT_MONOBLACK", value: 10)
!559 = !DIEnumerator(name: "AV_PIX_FMT_PAL8", value: 11)
!560 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ420P", value: 12)
!561 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ422P", value: 13)
!562 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ444P", value: 14)
!563 = !DIEnumerator(name: "AV_PIX_FMT_UYVY422", value: 15)
!564 = !DIEnumerator(name: "AV_PIX_FMT_UYYVYY411", value: 16)
!565 = !DIEnumerator(name: "AV_PIX_FMT_BGR8", value: 17)
!566 = !DIEnumerator(name: "AV_PIX_FMT_BGR4", value: 18)
!567 = !DIEnumerator(name: "AV_PIX_FMT_BGR4_BYTE", value: 19)
!568 = !DIEnumerator(name: "AV_PIX_FMT_RGB8", value: 20)
!569 = !DIEnumerator(name: "AV_PIX_FMT_RGB4", value: 21)
!570 = !DIEnumerator(name: "AV_PIX_FMT_RGB4_BYTE", value: 22)
!571 = !DIEnumerator(name: "AV_PIX_FMT_NV12", value: 23)
!572 = !DIEnumerator(name: "AV_PIX_FMT_NV21", value: 24)
!573 = !DIEnumerator(name: "AV_PIX_FMT_ARGB", value: 25)
!574 = !DIEnumerator(name: "AV_PIX_FMT_RGBA", value: 26)
!575 = !DIEnumerator(name: "AV_PIX_FMT_ABGR", value: 27)
!576 = !DIEnumerator(name: "AV_PIX_FMT_BGRA", value: 28)
!577 = !DIEnumerator(name: "AV_PIX_FMT_GRAY16BE", value: 29)
!578 = !DIEnumerator(name: "AV_PIX_FMT_GRAY16LE", value: 30)
!579 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P", value: 31)
!580 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ440P", value: 32)
!581 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P", value: 33)
!582 = !DIEnumerator(name: "AV_PIX_FMT_RGB48BE", value: 34)
!583 = !DIEnumerator(name: "AV_PIX_FMT_RGB48LE", value: 35)
!584 = !DIEnumerator(name: "AV_PIX_FMT_RGB565BE", value: 36)
!585 = !DIEnumerator(name: "AV_PIX_FMT_RGB565LE", value: 37)
!586 = !DIEnumerator(name: "AV_PIX_FMT_RGB555BE", value: 38)
!587 = !DIEnumerator(name: "AV_PIX_FMT_RGB555LE", value: 39)
!588 = !DIEnumerator(name: "AV_PIX_FMT_BGR565BE", value: 40)
!589 = !DIEnumerator(name: "AV_PIX_FMT_BGR565LE", value: 41)
!590 = !DIEnumerator(name: "AV_PIX_FMT_BGR555BE", value: 42)
!591 = !DIEnumerator(name: "AV_PIX_FMT_BGR555LE", value: 43)
!592 = !DIEnumerator(name: "AV_PIX_FMT_VAAPI_MOCO", value: 44)
!593 = !DIEnumerator(name: "AV_PIX_FMT_VAAPI_IDCT", value: 45)
!594 = !DIEnumerator(name: "AV_PIX_FMT_VAAPI_VLD", value: 46)
!595 = !DIEnumerator(name: "AV_PIX_FMT_VAAPI", value: 46)
!596 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P16LE", value: 47)
!597 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P16BE", value: 48)
!598 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P16LE", value: 49)
!599 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P16BE", value: 50)
!600 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P16LE", value: 51)
!601 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P16BE", value: 52)
!602 = !DIEnumerator(name: "AV_PIX_FMT_DXVA2_VLD", value: 53)
!603 = !DIEnumerator(name: "AV_PIX_FMT_RGB444LE", value: 54)
!604 = !DIEnumerator(name: "AV_PIX_FMT_RGB444BE", value: 55)
!605 = !DIEnumerator(name: "AV_PIX_FMT_BGR444LE", value: 56)
!606 = !DIEnumerator(name: "AV_PIX_FMT_BGR444BE", value: 57)
!607 = !DIEnumerator(name: "AV_PIX_FMT_YA8", value: 58)
!608 = !DIEnumerator(name: "AV_PIX_FMT_Y400A", value: 58)
!609 = !DIEnumerator(name: "AV_PIX_FMT_GRAY8A", value: 58)
!610 = !DIEnumerator(name: "AV_PIX_FMT_BGR48BE", value: 59)
!611 = !DIEnumerator(name: "AV_PIX_FMT_BGR48LE", value: 60)
!612 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P9BE", value: 61)
!613 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P9LE", value: 62)
!614 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P10BE", value: 63)
!615 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P10LE", value: 64)
!616 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P10BE", value: 65)
!617 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P10LE", value: 66)
!618 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P9BE", value: 67)
!619 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P9LE", value: 68)
!620 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P10BE", value: 69)
!621 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P10LE", value: 70)
!622 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P9BE", value: 71)
!623 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P9LE", value: 72)
!624 = !DIEnumerator(name: "AV_PIX_FMT_GBRP", value: 73)
!625 = !DIEnumerator(name: "AV_PIX_FMT_GBR24P", value: 73)
!626 = !DIEnumerator(name: "AV_PIX_FMT_GBRP9BE", value: 74)
!627 = !DIEnumerator(name: "AV_PIX_FMT_GBRP9LE", value: 75)
!628 = !DIEnumerator(name: "AV_PIX_FMT_GBRP10BE", value: 76)
!629 = !DIEnumerator(name: "AV_PIX_FMT_GBRP10LE", value: 77)
!630 = !DIEnumerator(name: "AV_PIX_FMT_GBRP16BE", value: 78)
!631 = !DIEnumerator(name: "AV_PIX_FMT_GBRP16LE", value: 79)
!632 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P", value: 80)
!633 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P", value: 81)
!634 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P9BE", value: 82)
!635 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P9LE", value: 83)
!636 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P9BE", value: 84)
!637 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P9LE", value: 85)
!638 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P9BE", value: 86)
!639 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P9LE", value: 87)
!640 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P10BE", value: 88)
!641 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P10LE", value: 89)
!642 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P10BE", value: 90)
!643 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P10LE", value: 91)
!644 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P10BE", value: 92)
!645 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P10LE", value: 93)
!646 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P16BE", value: 94)
!647 = !DIEnumerator(name: "AV_PIX_FMT_YUVA420P16LE", value: 95)
!648 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P16BE", value: 96)
!649 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P16LE", value: 97)
!650 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P16BE", value: 98)
!651 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P16LE", value: 99)
!652 = !DIEnumerator(name: "AV_PIX_FMT_VDPAU", value: 100)
!653 = !DIEnumerator(name: "AV_PIX_FMT_XYZ12LE", value: 101)
!654 = !DIEnumerator(name: "AV_PIX_FMT_XYZ12BE", value: 102)
!655 = !DIEnumerator(name: "AV_PIX_FMT_NV16", value: 103)
!656 = !DIEnumerator(name: "AV_PIX_FMT_NV20LE", value: 104)
!657 = !DIEnumerator(name: "AV_PIX_FMT_NV20BE", value: 105)
!658 = !DIEnumerator(name: "AV_PIX_FMT_RGBA64BE", value: 106)
!659 = !DIEnumerator(name: "AV_PIX_FMT_RGBA64LE", value: 107)
!660 = !DIEnumerator(name: "AV_PIX_FMT_BGRA64BE", value: 108)
!661 = !DIEnumerator(name: "AV_PIX_FMT_BGRA64LE", value: 109)
!662 = !DIEnumerator(name: "AV_PIX_FMT_YVYU422", value: 110)
!663 = !DIEnumerator(name: "AV_PIX_FMT_YA16BE", value: 111)
!664 = !DIEnumerator(name: "AV_PIX_FMT_YA16LE", value: 112)
!665 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP", value: 113)
!666 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP16BE", value: 114)
!667 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP16LE", value: 115)
!668 = !DIEnumerator(name: "AV_PIX_FMT_QSV", value: 116)
!669 = !DIEnumerator(name: "AV_PIX_FMT_MMAL", value: 117)
!670 = !DIEnumerator(name: "AV_PIX_FMT_D3D11VA_VLD", value: 118)
!671 = !DIEnumerator(name: "AV_PIX_FMT_CUDA", value: 119)
!672 = !DIEnumerator(name: "AV_PIX_FMT_0RGB", value: 120)
!673 = !DIEnumerator(name: "AV_PIX_FMT_RGB0", value: 121)
!674 = !DIEnumerator(name: "AV_PIX_FMT_0BGR", value: 122)
!675 = !DIEnumerator(name: "AV_PIX_FMT_BGR0", value: 123)
!676 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P12BE", value: 124)
!677 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P12LE", value: 125)
!678 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P14BE", value: 126)
!679 = !DIEnumerator(name: "AV_PIX_FMT_YUV420P14LE", value: 127)
!680 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P12BE", value: 128)
!681 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P12LE", value: 129)
!682 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P14BE", value: 130)
!683 = !DIEnumerator(name: "AV_PIX_FMT_YUV422P14LE", value: 131)
!684 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P12BE", value: 132)
!685 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P12LE", value: 133)
!686 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P14BE", value: 134)
!687 = !DIEnumerator(name: "AV_PIX_FMT_YUV444P14LE", value: 135)
!688 = !DIEnumerator(name: "AV_PIX_FMT_GBRP12BE", value: 136)
!689 = !DIEnumerator(name: "AV_PIX_FMT_GBRP12LE", value: 137)
!690 = !DIEnumerator(name: "AV_PIX_FMT_GBRP14BE", value: 138)
!691 = !DIEnumerator(name: "AV_PIX_FMT_GBRP14LE", value: 139)
!692 = !DIEnumerator(name: "AV_PIX_FMT_YUVJ411P", value: 140)
!693 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_BGGR8", value: 141)
!694 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_RGGB8", value: 142)
!695 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GBRG8", value: 143)
!696 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GRBG8", value: 144)
!697 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_BGGR16LE", value: 145)
!698 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_BGGR16BE", value: 146)
!699 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_RGGB16LE", value: 147)
!700 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_RGGB16BE", value: 148)
!701 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GBRG16LE", value: 149)
!702 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GBRG16BE", value: 150)
!703 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GRBG16LE", value: 151)
!704 = !DIEnumerator(name: "AV_PIX_FMT_BAYER_GRBG16BE", value: 152)
!705 = !DIEnumerator(name: "AV_PIX_FMT_XVMC", value: 153)
!706 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P10LE", value: 154)
!707 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P10BE", value: 155)
!708 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P12LE", value: 156)
!709 = !DIEnumerator(name: "AV_PIX_FMT_YUV440P12BE", value: 157)
!710 = !DIEnumerator(name: "AV_PIX_FMT_AYUV64LE", value: 158)
!711 = !DIEnumerator(name: "AV_PIX_FMT_AYUV64BE", value: 159)
!712 = !DIEnumerator(name: "AV_PIX_FMT_VIDEOTOOLBOX", value: 160)
!713 = !DIEnumerator(name: "AV_PIX_FMT_P010LE", value: 161)
!714 = !DIEnumerator(name: "AV_PIX_FMT_P010BE", value: 162)
!715 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP12BE", value: 163)
!716 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP12LE", value: 164)
!717 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP10BE", value: 165)
!718 = !DIEnumerator(name: "AV_PIX_FMT_GBRAP10LE", value: 166)
!719 = !DIEnumerator(name: "AV_PIX_FMT_MEDIACODEC", value: 167)
!720 = !DIEnumerator(name: "AV_PIX_FMT_GRAY12BE", value: 168)
!721 = !DIEnumerator(name: "AV_PIX_FMT_GRAY12LE", value: 169)
!722 = !DIEnumerator(name: "AV_PIX_FMT_GRAY10BE", value: 170)
!723 = !DIEnumerator(name: "AV_PIX_FMT_GRAY10LE", value: 171)
!724 = !DIEnumerator(name: "AV_PIX_FMT_P016LE", value: 172)
!725 = !DIEnumerator(name: "AV_PIX_FMT_P016BE", value: 173)
!726 = !DIEnumerator(name: "AV_PIX_FMT_D3D11", value: 174)
!727 = !DIEnumerator(name: "AV_PIX_FMT_GRAY9BE", value: 175)
!728 = !DIEnumerator(name: "AV_PIX_FMT_GRAY9LE", value: 176)
!729 = !DIEnumerator(name: "AV_PIX_FMT_GBRPF32BE", value: 177)
!730 = !DIEnumerator(name: "AV_PIX_FMT_GBRPF32LE", value: 178)
!731 = !DIEnumerator(name: "AV_PIX_FMT_GBRAPF32BE", value: 179)
!732 = !DIEnumerator(name: "AV_PIX_FMT_GBRAPF32LE", value: 180)
!733 = !DIEnumerator(name: "AV_PIX_FMT_DRM_PRIME", value: 181)
!734 = !DIEnumerator(name: "AV_PIX_FMT_OPENCL", value: 182)
!735 = !DIEnumerator(name: "AV_PIX_FMT_GRAY14BE", value: 183)
!736 = !DIEnumerator(name: "AV_PIX_FMT_GRAY14LE", value: 184)
!737 = !DIEnumerator(name: "AV_PIX_FMT_GRAYF32BE", value: 185)
!738 = !DIEnumerator(name: "AV_PIX_FMT_GRAYF32LE", value: 186)
!739 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P12BE", value: 187)
!740 = !DIEnumerator(name: "AV_PIX_FMT_YUVA422P12LE", value: 188)
!741 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P12BE", value: 189)
!742 = !DIEnumerator(name: "AV_PIX_FMT_YUVA444P12LE", value: 190)
!743 = !DIEnumerator(name: "AV_PIX_FMT_NB", value: 191)
!744 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVSampleFormat", file: !745, line: 58, size: 32, align: 32, elements: !746)
!745 = !DIFile(filename: "./libavutil/samplefmt.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!746 = !{!747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760}
!747 = !DIEnumerator(name: "AV_SAMPLE_FMT_NONE", value: -1)
!748 = !DIEnumerator(name: "AV_SAMPLE_FMT_U8", value: 0)
!749 = !DIEnumerator(name: "AV_SAMPLE_FMT_S16", value: 1)
!750 = !DIEnumerator(name: "AV_SAMPLE_FMT_S32", value: 2)
!751 = !DIEnumerator(name: "AV_SAMPLE_FMT_FLT", value: 3)
!752 = !DIEnumerator(name: "AV_SAMPLE_FMT_DBL", value: 4)
!753 = !DIEnumerator(name: "AV_SAMPLE_FMT_U8P", value: 5)
!754 = !DIEnumerator(name: "AV_SAMPLE_FMT_S16P", value: 6)
!755 = !DIEnumerator(name: "AV_SAMPLE_FMT_S32P", value: 7)
!756 = !DIEnumerator(name: "AV_SAMPLE_FMT_FLTP", value: 8)
!757 = !DIEnumerator(name: "AV_SAMPLE_FMT_DBLP", value: 9)
!758 = !DIEnumerator(name: "AV_SAMPLE_FMT_S64", value: 10)
!759 = !DIEnumerator(name: "AV_SAMPLE_FMT_S64P", value: 11)
!760 = !DIEnumerator(name: "AV_SAMPLE_FMT_NB", value: 12)
!761 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVPictureType", file: !535, line: 272, size: 32, align: 32, elements: !762)
!762 = !{!763, !764, !765, !766, !767, !768, !769, !770}
!763 = !DIEnumerator(name: "AV_PICTURE_TYPE_NONE", value: 0)
!764 = !DIEnumerator(name: "AV_PICTURE_TYPE_I", value: 1)
!765 = !DIEnumerator(name: "AV_PICTURE_TYPE_P", value: 2)
!766 = !DIEnumerator(name: "AV_PICTURE_TYPE_B", value: 3)
!767 = !DIEnumerator(name: "AV_PICTURE_TYPE_S", value: 4)
!768 = !DIEnumerator(name: "AV_PICTURE_TYPE_SI", value: 5)
!769 = !DIEnumerator(name: "AV_PICTURE_TYPE_SP", value: 6)
!770 = !DIEnumerator(name: "AV_PICTURE_TYPE_BI", value: 7)
!771 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVFrameSideDataType", file: !772, line: 48, size: 32, align: 32, elements: !773)
!772 = !DIFile(filename: "./libavutil/frame.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!773 = !{!774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794}
!774 = !DIEnumerator(name: "AV_FRAME_DATA_PANSCAN", value: 0)
!775 = !DIEnumerator(name: "AV_FRAME_DATA_A53_CC", value: 1)
!776 = !DIEnumerator(name: "AV_FRAME_DATA_STEREO3D", value: 2)
!777 = !DIEnumerator(name: "AV_FRAME_DATA_MATRIXENCODING", value: 3)
!778 = !DIEnumerator(name: "AV_FRAME_DATA_DOWNMIX_INFO", value: 4)
!779 = !DIEnumerator(name: "AV_FRAME_DATA_REPLAYGAIN", value: 5)
!780 = !DIEnumerator(name: "AV_FRAME_DATA_DISPLAYMATRIX", value: 6)
!781 = !DIEnumerator(name: "AV_FRAME_DATA_AFD", value: 7)
!782 = !DIEnumerator(name: "AV_FRAME_DATA_MOTION_VECTORS", value: 8)
!783 = !DIEnumerator(name: "AV_FRAME_DATA_SKIP_SAMPLES", value: 9)
!784 = !DIEnumerator(name: "AV_FRAME_DATA_AUDIO_SERVICE_TYPE", value: 10)
!785 = !DIEnumerator(name: "AV_FRAME_DATA_MASTERING_DISPLAY_METADATA", value: 11)
!786 = !DIEnumerator(name: "AV_FRAME_DATA_GOP_TIMECODE", value: 12)
!787 = !DIEnumerator(name: "AV_FRAME_DATA_SPHERICAL", value: 13)
!788 = !DIEnumerator(name: "AV_FRAME_DATA_CONTENT_LIGHT_LEVEL", value: 14)
!789 = !DIEnumerator(name: "AV_FRAME_DATA_ICC_PROFILE", value: 15)
!790 = !DIEnumerator(name: "AV_FRAME_DATA_QP_TABLE_PROPERTIES", value: 16)
!791 = !DIEnumerator(name: "AV_FRAME_DATA_QP_TABLE_DATA", value: 17)
!792 = !DIEnumerator(name: "AV_FRAME_DATA_S12M_TIMECODE", value: 18)
!793 = !DIEnumerator(name: "AV_FRAME_DATA_DYNAMIC_HDR_PLUS", value: 19)
!794 = !DIEnumerator(name: "AV_FRAME_DATA_REGIONS_OF_INTEREST", value: 20)
!795 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorRange", file: !545, line: 516, size: 32, align: 32, elements: !796)
!796 = !{!797, !798, !799, !800}
!797 = !DIEnumerator(name: "AVCOL_RANGE_UNSPECIFIED", value: 0)
!798 = !DIEnumerator(name: "AVCOL_RANGE_MPEG", value: 1)
!799 = !DIEnumerator(name: "AVCOL_RANGE_JPEG", value: 2)
!800 = !DIEnumerator(name: "AVCOL_RANGE_NB", value: 3)
!801 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorPrimaries", file: !545, line: 440, size: 32, align: 32, elements: !802)
!802 = !{!803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818}
!803 = !DIEnumerator(name: "AVCOL_PRI_RESERVED0", value: 0)
!804 = !DIEnumerator(name: "AVCOL_PRI_BT709", value: 1)
!805 = !DIEnumerator(name: "AVCOL_PRI_UNSPECIFIED", value: 2)
!806 = !DIEnumerator(name: "AVCOL_PRI_RESERVED", value: 3)
!807 = !DIEnumerator(name: "AVCOL_PRI_BT470M", value: 4)
!808 = !DIEnumerator(name: "AVCOL_PRI_BT470BG", value: 5)
!809 = !DIEnumerator(name: "AVCOL_PRI_SMPTE170M", value: 6)
!810 = !DIEnumerator(name: "AVCOL_PRI_SMPTE240M", value: 7)
!811 = !DIEnumerator(name: "AVCOL_PRI_FILM", value: 8)
!812 = !DIEnumerator(name: "AVCOL_PRI_BT2020", value: 9)
!813 = !DIEnumerator(name: "AVCOL_PRI_SMPTE428", value: 10)
!814 = !DIEnumerator(name: "AVCOL_PRI_SMPTEST428_1", value: 10)
!815 = !DIEnumerator(name: "AVCOL_PRI_SMPTE431", value: 11)
!816 = !DIEnumerator(name: "AVCOL_PRI_SMPTE432", value: 12)
!817 = !DIEnumerator(name: "AVCOL_PRI_JEDEC_P22", value: 22)
!818 = !DIEnumerator(name: "AVCOL_PRI_NB", value: 23)
!819 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorTransferCharacteristic", file: !545, line: 464, size: 32, align: 32, elements: !820)
!820 = !{!821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842}
!821 = !DIEnumerator(name: "AVCOL_TRC_RESERVED0", value: 0)
!822 = !DIEnumerator(name: "AVCOL_TRC_BT709", value: 1)
!823 = !DIEnumerator(name: "AVCOL_TRC_UNSPECIFIED", value: 2)
!824 = !DIEnumerator(name: "AVCOL_TRC_RESERVED", value: 3)
!825 = !DIEnumerator(name: "AVCOL_TRC_GAMMA22", value: 4)
!826 = !DIEnumerator(name: "AVCOL_TRC_GAMMA28", value: 5)
!827 = !DIEnumerator(name: "AVCOL_TRC_SMPTE170M", value: 6)
!828 = !DIEnumerator(name: "AVCOL_TRC_SMPTE240M", value: 7)
!829 = !DIEnumerator(name: "AVCOL_TRC_LINEAR", value: 8)
!830 = !DIEnumerator(name: "AVCOL_TRC_LOG", value: 9)
!831 = !DIEnumerator(name: "AVCOL_TRC_LOG_SQRT", value: 10)
!832 = !DIEnumerator(name: "AVCOL_TRC_IEC61966_2_4", value: 11)
!833 = !DIEnumerator(name: "AVCOL_TRC_BT1361_ECG", value: 12)
!834 = !DIEnumerator(name: "AVCOL_TRC_IEC61966_2_1", value: 13)
!835 = !DIEnumerator(name: "AVCOL_TRC_BT2020_10", value: 14)
!836 = !DIEnumerator(name: "AVCOL_TRC_BT2020_12", value: 15)
!837 = !DIEnumerator(name: "AVCOL_TRC_SMPTE2084", value: 16)
!838 = !DIEnumerator(name: "AVCOL_TRC_SMPTEST2084", value: 16)
!839 = !DIEnumerator(name: "AVCOL_TRC_SMPTE428", value: 17)
!840 = !DIEnumerator(name: "AVCOL_TRC_SMPTEST428_1", value: 17)
!841 = !DIEnumerator(name: "AVCOL_TRC_ARIB_STD_B67", value: 18)
!842 = !DIEnumerator(name: "AVCOL_TRC_NB", value: 19)
!843 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVColorSpace", file: !545, line: 493, size: 32, align: 32, elements: !844)
!844 = !{!845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861}
!845 = !DIEnumerator(name: "AVCOL_SPC_RGB", value: 0)
!846 = !DIEnumerator(name: "AVCOL_SPC_BT709", value: 1)
!847 = !DIEnumerator(name: "AVCOL_SPC_UNSPECIFIED", value: 2)
!848 = !DIEnumerator(name: "AVCOL_SPC_RESERVED", value: 3)
!849 = !DIEnumerator(name: "AVCOL_SPC_FCC", value: 4)
!850 = !DIEnumerator(name: "AVCOL_SPC_BT470BG", value: 5)
!851 = !DIEnumerator(name: "AVCOL_SPC_SMPTE170M", value: 6)
!852 = !DIEnumerator(name: "AVCOL_SPC_SMPTE240M", value: 7)
!853 = !DIEnumerator(name: "AVCOL_SPC_YCGCO", value: 8)
!854 = !DIEnumerator(name: "AVCOL_SPC_YCOCG", value: 8)
!855 = !DIEnumerator(name: "AVCOL_SPC_BT2020_NCL", value: 9)
!856 = !DIEnumerator(name: "AVCOL_SPC_BT2020_CL", value: 10)
!857 = !DIEnumerator(name: "AVCOL_SPC_SMPTE2085", value: 11)
!858 = !DIEnumerator(name: "AVCOL_SPC_CHROMA_DERIVED_NCL", value: 12)
!859 = !DIEnumerator(name: "AVCOL_SPC_CHROMA_DERIVED_CL", value: 13)
!860 = !DIEnumerator(name: "AVCOL_SPC_ICTCP", value: 14)
!861 = !DIEnumerator(name: "AVCOL_SPC_NB", value: 15)
!862 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVChromaLocation", file: !545, line: 538, size: 32, align: 32, elements: !863)
!863 = !{!864, !865, !866, !867, !868, !869, !870, !871}
!864 = !DIEnumerator(name: "AVCHROMA_LOC_UNSPECIFIED", value: 0)
!865 = !DIEnumerator(name: "AVCHROMA_LOC_LEFT", value: 1)
!866 = !DIEnumerator(name: "AVCHROMA_LOC_CENTER", value: 2)
!867 = !DIEnumerator(name: "AVCHROMA_LOC_TOPLEFT", value: 3)
!868 = !DIEnumerator(name: "AVCHROMA_LOC_TOP", value: 4)
!869 = !DIEnumerator(name: "AVCHROMA_LOC_BOTTOMLEFT", value: 5)
!870 = !DIEnumerator(name: "AVCHROMA_LOC_BOTTOM", value: 6)
!871 = !DIEnumerator(name: "AVCHROMA_LOC_NB", value: 7)
!872 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVFieldOrder", file: !75, line: 1534, size: 32, align: 32, elements: !873)
!873 = !{!874, !875, !876, !877, !878, !879}
!874 = !DIEnumerator(name: "AV_FIELD_UNKNOWN", value: 0)
!875 = !DIEnumerator(name: "AV_FIELD_PROGRESSIVE", value: 1)
!876 = !DIEnumerator(name: "AV_FIELD_TT", value: 2)
!877 = !DIEnumerator(name: "AV_FIELD_BB", value: 3)
!878 = !DIEnumerator(name: "AV_FIELD_TB", value: 4)
!879 = !DIEnumerator(name: "AV_FIELD_BT", value: 5)
!880 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVAudioServiceType", file: !75, line: 810, size: 32, align: 32, elements: !881)
!881 = !{!882, !883, !884, !885, !886, !887, !888, !889, !890, !891}
!882 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_MAIN", value: 0)
!883 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_EFFECTS", value: 1)
!884 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_VISUALLY_IMPAIRED", value: 2)
!885 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_HEARING_IMPAIRED", value: 3)
!886 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_DIALOGUE", value: 4)
!887 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_COMMENTARY", value: 5)
!888 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_EMERGENCY", value: 6)
!889 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_VOICE_OVER", value: 7)
!890 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_KARAOKE", value: 8)
!891 = !DIEnumerator(name: "AV_AUDIO_SERVICE_TYPE_NB", value: 9)
!892 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVDiscard", file: !75, line: 798, size: 32, align: 32, elements: !893)
!893 = !{!894, !895, !896, !897, !898, !899, !900}
!894 = !DIEnumerator(name: "AVDISCARD_NONE", value: -16)
!895 = !DIEnumerator(name: "AVDISCARD_DEFAULT", value: 0)
!896 = !DIEnumerator(name: "AVDISCARD_NONREF", value: 8)
!897 = !DIEnumerator(name: "AVDISCARD_BIDIR", value: 16)
!898 = !DIEnumerator(name: "AVDISCARD_NONINTRA", value: 24)
!899 = !DIEnumerator(name: "AVDISCARD_NONKEY", value: 32)
!900 = !DIEnumerator(name: "AVDISCARD_ALL", value: 48)
!901 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVPacketSideDataType", file: !75, line: 1175, size: 32, align: 32, elements: !902)
!902 = !{!903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930}
!903 = !DIEnumerator(name: "AV_PKT_DATA_PALETTE", value: 0)
!904 = !DIEnumerator(name: "AV_PKT_DATA_NEW_EXTRADATA", value: 1)
!905 = !DIEnumerator(name: "AV_PKT_DATA_PARAM_CHANGE", value: 2)
!906 = !DIEnumerator(name: "AV_PKT_DATA_H263_MB_INFO", value: 3)
!907 = !DIEnumerator(name: "AV_PKT_DATA_REPLAYGAIN", value: 4)
!908 = !DIEnumerator(name: "AV_PKT_DATA_DISPLAYMATRIX", value: 5)
!909 = !DIEnumerator(name: "AV_PKT_DATA_STEREO3D", value: 6)
!910 = !DIEnumerator(name: "AV_PKT_DATA_AUDIO_SERVICE_TYPE", value: 7)
!911 = !DIEnumerator(name: "AV_PKT_DATA_QUALITY_STATS", value: 8)
!912 = !DIEnumerator(name: "AV_PKT_DATA_FALLBACK_TRACK", value: 9)
!913 = !DIEnumerator(name: "AV_PKT_DATA_CPB_PROPERTIES", value: 10)
!914 = !DIEnumerator(name: "AV_PKT_DATA_SKIP_SAMPLES", value: 11)
!915 = !DIEnumerator(name: "AV_PKT_DATA_JP_DUALMONO", value: 12)
!916 = !DIEnumerator(name: "AV_PKT_DATA_STRINGS_METADATA", value: 13)
!917 = !DIEnumerator(name: "AV_PKT_DATA_SUBTITLE_POSITION", value: 14)
!918 = !DIEnumerator(name: "AV_PKT_DATA_MATROSKA_BLOCKADDITIONAL", value: 15)
!919 = !DIEnumerator(name: "AV_PKT_DATA_WEBVTT_IDENTIFIER", value: 16)
!920 = !DIEnumerator(name: "AV_PKT_DATA_WEBVTT_SETTINGS", value: 17)
!921 = !DIEnumerator(name: "AV_PKT_DATA_METADATA_UPDATE", value: 18)
!922 = !DIEnumerator(name: "AV_PKT_DATA_MPEGTS_STREAM_ID", value: 19)
!923 = !DIEnumerator(name: "AV_PKT_DATA_MASTERING_DISPLAY_METADATA", value: 20)
!924 = !DIEnumerator(name: "AV_PKT_DATA_SPHERICAL", value: 21)
!925 = !DIEnumerator(name: "AV_PKT_DATA_CONTENT_LIGHT_LEVEL", value: 22)
!926 = !DIEnumerator(name: "AV_PKT_DATA_A53_CC", value: 23)
!927 = !DIEnumerator(name: "AV_PKT_DATA_ENCRYPTION_INIT_INFO", value: 24)
!928 = !DIEnumerator(name: "AV_PKT_DATA_ENCRYPTION_INFO", value: 25)
!929 = !DIEnumerator(name: "AV_PKT_DATA_AFD", value: 26)
!930 = !DIEnumerator(name: "AV_PKT_DATA_NB", value: 27)
!931 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVSubtitleType", file: !75, line: 3865, size: 32, align: 32, elements: !932)
!932 = !{!933, !934, !935, !936}
!933 = !DIEnumerator(name: "SUBTITLE_NONE", value: 0)
!934 = !DIEnumerator(name: "SUBTITLE_BITMAP", value: 1)
!935 = !DIEnumerator(name: "SUBTITLE_TEXT", value: 2)
!936 = !DIEnumerator(name: "SUBTITLE_ASS", value: 3)
!937 = !DICompositeType(tag: DW_TAG_enumeration_type, scope: !939, file: !938, line: 503, size: 32, align: 32, elements: !1284)
!938 = !DIFile(filename: "./libavfilter/avfilter.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!939 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterLink", file: !938, line: 439, size: 493504, align: 64, elements: !940)
!940 = !{!941, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1167, !1168, !1169, !1170, !1174, !1175, !1176, !1177, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280}
!941 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !939, file: !938, line: 440, baseType: !942, size: 64, align: 64)
!942 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !943, size: 64, align: 64)
!943 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilterContext", file: !938, line: 67, baseType: !944)
!944 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterContext", file: !938, line: 338, size: 1344, align: 64, elements: !945)
!945 = !{!946, !1033, !1082, !1083, !1085, !1089, !1091, !1092, !1093, !1094, !1095, !1126, !1127, !1131, !1134, !1135, !1136, !1138, !1139, !1154, !1155, !1156}
!946 = !DIDerivedType(tag: DW_TAG_member, name: "av_class", scope: !944, file: !938, line: 339, baseType: !947, size: 64, align: 64)
!947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !948, size: 64, align: 64)
!948 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !949)
!949 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVClass", file: !26, line: 143, baseType: !950)
!950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVClass", file: !26, line: 67, size: 640, align: 64, elements: !951)
!951 = !{!952, !956, !961, !992, !993, !994, !995, !999, !1005, !1007, !1011}
!952 = !DIDerivedType(tag: DW_TAG_member, name: "class_name", scope: !950, file: !26, line: 72, baseType: !953, size: 64, align: 64)
!953 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !954, size: 64, align: 64)
!954 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !955)
!955 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "item_name", scope: !950, file: !26, line: 78, baseType: !957, size: 64, align: 64, offset: 64)
!957 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !958, size: 64, align: 64)
!958 = !DISubroutineType(types: !959)
!959 = !{!953, !960}
!960 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "option", scope: !950, file: !26, line: 85, baseType: !962, size: 64, align: 64, offset: 128)
!962 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !963, size: 64, align: 64)
!963 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !964)
!964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVOption", file: !4, line: 246, size: 512, align: 64, elements: !965)
!965 = !{!966, !967, !968, !970, !971, !988, !989, !990, !991}
!966 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !964, file: !4, line: 247, baseType: !953, size: 64, align: 64)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "help", scope: !964, file: !4, line: 253, baseType: !953, size: 64, align: 64, offset: 64)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !964, file: !4, line: 259, baseType: !969, size: 32, align: 32, offset: 128)
!969 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !964, file: !4, line: 260, baseType: !3, size: 32, align: 32, offset: 160)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "default_val", scope: !964, file: !4, line: 271, baseType: !972, size: 64, align: 64, offset: 192)
!972 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !964, file: !4, line: 265, size: 64, align: 64, elements: !973)
!973 = !{!974, !978, !980, !981}
!974 = !DIDerivedType(tag: DW_TAG_member, name: "i64", scope: !972, file: !4, line: 266, baseType: !975, size: 64, align: 64)
!975 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !976, line: 40, baseType: !977)
!976 = !DIFile(filename: "/usr/include/stdint.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!977 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "dbl", scope: !972, file: !4, line: 267, baseType: !979, size: 64, align: 64)
!979 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !972, file: !4, line: 268, baseType: !953, size: 64, align: 64)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "q", scope: !972, file: !4, line: 270, baseType: !982, size: 64, align: 32)
!982 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVRational", file: !983, line: 61, baseType: !984)
!983 = !DIFile(filename: "./libavutil/rational.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVRational", file: !983, line: 58, size: 64, align: 32, elements: !985)
!985 = !{!986, !987}
!986 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !984, file: !983, line: 59, baseType: !969, size: 32, align: 32)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "den", scope: !984, file: !983, line: 60, baseType: !969, size: 32, align: 32, offset: 32)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "min", scope: !964, file: !4, line: 272, baseType: !979, size: 64, align: 64, offset: 256)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !964, file: !4, line: 273, baseType: !979, size: 64, align: 64, offset: 320)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !964, file: !4, line: 275, baseType: !969, size: 32, align: 32, offset: 384)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "unit", scope: !964, file: !4, line: 300, baseType: !953, size: 64, align: 64, offset: 448)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !950, file: !26, line: 93, baseType: !969, size: 32, align: 32, offset: 192)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "log_level_offset_offset", scope: !950, file: !26, line: 99, baseType: !969, size: 32, align: 32, offset: 224)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "parent_log_context_offset", scope: !950, file: !26, line: 108, baseType: !969, size: 32, align: 32, offset: 256)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "child_next", scope: !950, file: !26, line: 113, baseType: !996, size: 64, align: 64, offset: 320)
!996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !997, size: 64, align: 64)
!997 = !DISubroutineType(types: !998)
!998 = !{!960, !960, !960}
!999 = !DIDerivedType(tag: DW_TAG_member, name: "child_class_next", scope: !950, file: !26, line: 123, baseType: !1000, size: 64, align: 64, offset: 384)
!1000 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1001, size: 64, align: 64)
!1001 = !DISubroutineType(types: !1002)
!1002 = !{!1003, !1003}
!1003 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1004, size: 64, align: 64)
!1004 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !950)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "category", scope: !950, file: !26, line: 130, baseType: !1006, size: 32, align: 32, offset: 448)
!1006 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVClassCategory", file: !26, line: 48, baseType: !25)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "get_category", scope: !950, file: !26, line: 136, baseType: !1008, size: 64, align: 64, offset: 512)
!1008 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1009, size: 64, align: 64)
!1009 = !DISubroutineType(types: !1010)
!1010 = !{!1006, !960}
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "query_ranges", scope: !950, file: !26, line: 142, baseType: !1012, size: 64, align: 64, offset: 576)
!1012 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1013, size: 64, align: 64)
!1013 = !DISubroutineType(types: !1014)
!1014 = !{!969, !1015, !960, !953, !969}
!1015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1016, size: 64, align: 64)
!1016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1017, size: 64, align: 64)
!1017 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVOptionRanges", file: !4, line: 329, size: 128, align: 64, elements: !1018)
!1018 = !{!1019, !1031, !1032}
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "range", scope: !1017, file: !4, line: 360, baseType: !1020, size: 64, align: 64)
!1020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1021, size: 64, align: 64)
!1021 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1022, size: 64, align: 64)
!1022 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVOptionRange", file: !4, line: 324, baseType: !1023)
!1023 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVOptionRange", file: !4, line: 306, size: 384, align: 64, elements: !1024)
!1024 = !{!1025, !1026, !1027, !1028, !1029, !1030}
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1023, file: !4, line: 307, baseType: !953, size: 64, align: 64)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "value_min", scope: !1023, file: !4, line: 313, baseType: !979, size: 64, align: 64, offset: 64)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "value_max", scope: !1023, file: !4, line: 313, baseType: !979, size: 64, align: 64, offset: 128)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "component_min", scope: !1023, file: !4, line: 318, baseType: !979, size: 64, align: 64, offset: 192)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "component_max", scope: !1023, file: !4, line: 318, baseType: !979, size: 64, align: 64, offset: 256)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "is_range", scope: !1023, file: !4, line: 323, baseType: !969, size: 32, align: 32, offset: 320)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "nb_ranges", scope: !1017, file: !4, line: 364, baseType: !969, size: 32, align: 32, offset: 64)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "nb_components", scope: !1017, file: !4, line: 368, baseType: !969, size: 32, align: 32, offset: 96)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !944, file: !938, line: 341, baseType: !1034, size: 64, align: 64, offset: 64)
!1034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1035, size: 64, align: 64)
!1035 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1036)
!1036 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilter", file: !938, line: 328, baseType: !1037)
!1037 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilter", file: !938, line: 144, size: 1024, align: 64, elements: !1038)
!1038 = !{!1039, !1040, !1041, !1046, !1047, !1048, !1049, !1053, !1054, !1063, !1067, !1068, !1069, !1070, !1072, !1077, !1081}
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1037, file: !938, line: 148, baseType: !953, size: 64, align: 64)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "description", scope: !1037, file: !938, line: 155, baseType: !953, size: 64, align: 64, offset: 64)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "inputs", scope: !1037, file: !938, line: 164, baseType: !1042, size: 64, align: 64, offset: 128)
!1042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1043, size: 64, align: 64)
!1043 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1044)
!1044 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilterPad", file: !938, line: 69, baseType: !1045)
!1045 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterPad", file: !938, line: 69, flags: DIFlagFwdDecl)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "outputs", scope: !1037, file: !938, line: 172, baseType: !1042, size: 64, align: 64, offset: 192)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "priv_class", scope: !1037, file: !938, line: 182, baseType: !947, size: 64, align: 64, offset: 256)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1037, file: !938, line: 187, baseType: !969, size: 32, align: 32, offset: 320)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "preinit", scope: !1037, file: !938, line: 210, baseType: !1050, size: 64, align: 64, offset: 384)
!1050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1051, size: 64, align: 64)
!1051 = !DISubroutineType(types: !1052)
!1052 = !{!969, !942}
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !1037, file: !938, line: 233, baseType: !1050, size: 64, align: 64, offset: 448)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "init_dict", scope: !1037, file: !938, line: 246, baseType: !1055, size: 64, align: 64, offset: 512)
!1055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1056, size: 64, align: 64)
!1056 = !DISubroutineType(types: !1057)
!1057 = !{!969, !942, !1058}
!1058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1059, size: 64, align: 64)
!1059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1060, size: 64, align: 64)
!1060 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVDictionary", file: !1061, line: 86, baseType: !1062)
!1061 = !DIFile(filename: "./libavutil/dict.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!1062 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVDictionary", file: !1061, line: 86, flags: DIFlagFwdDecl)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "uninit", scope: !1037, file: !938, line: 258, baseType: !1064, size: 64, align: 64, offset: 576)
!1064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1065, size: 64, align: 64)
!1065 = !DISubroutineType(types: !1066)
!1066 = !{null, !942}
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "query_formats", scope: !1037, file: !938, line: 282, baseType: !1050, size: 64, align: 64, offset: 640)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "priv_size", scope: !1037, file: !938, line: 284, baseType: !969, size: 32, align: 32, offset: 704)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "flags_internal", scope: !1037, file: !938, line: 286, baseType: !969, size: 32, align: 32, offset: 736)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1037, file: !938, line: 292, baseType: !1071, size: 64, align: 64, offset: 768)
!1071 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1037, size: 64, align: 64)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "process_command", scope: !1037, file: !938, line: 306, baseType: !1073, size: 64, align: 64, offset: 832)
!1073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1074, size: 64, align: 64)
!1074 = !DISubroutineType(types: !1075)
!1075 = !{!969, !942, !953, !953, !1076, !969, !969}
!1076 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !955, size: 64, align: 64)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "init_opaque", scope: !1037, file: !938, line: 313, baseType: !1078, size: 64, align: 64, offset: 896)
!1078 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1079, size: 64, align: 64)
!1079 = !DISubroutineType(types: !1080)
!1080 = !{!969, !942, !960}
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "activate", scope: !1037, file: !938, line: 327, baseType: !1050, size: 64, align: 64, offset: 960)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !944, file: !938, line: 343, baseType: !1076, size: 64, align: 64, offset: 128)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "input_pads", scope: !944, file: !938, line: 345, baseType: !1084, size: 64, align: 64, offset: 192)
!1084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1044, size: 64, align: 64)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "inputs", scope: !944, file: !938, line: 346, baseType: !1086, size: 64, align: 64, offset: 256)
!1086 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1087, size: 64, align: 64)
!1087 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1088, size: 64, align: 64)
!1088 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilterLink", file: !938, line: 68, baseType: !939)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "nb_inputs", scope: !944, file: !938, line: 347, baseType: !1090, size: 32, align: 32, offset: 320)
!1090 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "output_pads", scope: !944, file: !938, line: 349, baseType: !1084, size: 64, align: 64, offset: 384)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "outputs", scope: !944, file: !938, line: 350, baseType: !1086, size: 64, align: 64, offset: 448)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "nb_outputs", scope: !944, file: !938, line: 351, baseType: !1090, size: 32, align: 32, offset: 512)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "priv", scope: !944, file: !938, line: 353, baseType: !960, size: 64, align: 64, offset: 576)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "graph", scope: !944, file: !938, line: 355, baseType: !1096, size: 64, align: 64, offset: 640)
!1096 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1097, size: 64, align: 64)
!1097 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterGraph", file: !938, line: 840, size: 768, align: 64, elements: !1098)
!1098 = !{!1099, !1100, !1102, !1103, !1104, !1105, !1106, !1107, !1111, !1112, !1122, !1123, !1124, !1125}
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "av_class", scope: !1097, file: !938, line: 841, baseType: !947, size: 64, align: 64)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "filters", scope: !1097, file: !938, line: 842, baseType: !1101, size: 64, align: 64, offset: 64)
!1101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !942, size: 64, align: 64)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "nb_filters", scope: !1097, file: !938, line: 843, baseType: !1090, size: 32, align: 32, offset: 128)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "scale_sws_opts", scope: !1097, file: !938, line: 845, baseType: !1076, size: 64, align: 64, offset: 192)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "resample_lavr_opts", scope: !1097, file: !938, line: 847, baseType: !1076, size: 64, align: 64, offset: 256)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "thread_type", scope: !1097, file: !938, line: 862, baseType: !969, size: 32, align: 32, offset: 320)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "nb_threads", scope: !1097, file: !938, line: 869, baseType: !969, size: 32, align: 32, offset: 352)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !1097, file: !938, line: 874, baseType: !1108, size: 64, align: 64, offset: 384)
!1108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1109, size: 64, align: 64)
!1109 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilterGraphInternal", file: !938, line: 809, baseType: !1110)
!1110 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterGraphInternal", file: !938, line: 809, flags: DIFlagFwdDecl)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "opaque", scope: !1097, file: !938, line: 881, baseType: !960, size: 64, align: 64, offset: 448)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !1097, file: !938, line: 895, baseType: !1113, size: 64, align: 64, offset: 512)
!1113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1114, size: 64, align: 64)
!1114 = !DIDerivedType(tag: DW_TAG_typedef, name: "avfilter_execute_func", file: !938, line: 837, baseType: !1115)
!1115 = !DISubroutineType(types: !1116)
!1116 = !{!969, !942, !1117, !960, !1121, !969}
!1117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1118, size: 64, align: 64)
!1118 = !DIDerivedType(tag: DW_TAG_typedef, name: "avfilter_action_func", file: !938, line: 823, baseType: !1119)
!1119 = !DISubroutineType(types: !1120)
!1120 = !{!969, !942, !960, !969, !969}
!1121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !969, size: 64, align: 64)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "aresample_swr_opts", scope: !1097, file: !938, line: 897, baseType: !1076, size: 64, align: 64, offset: 576)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "sink_links", scope: !1097, file: !938, line: 906, baseType: !1086, size: 64, align: 64, offset: 640)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "sink_links_count", scope: !1097, file: !938, line: 907, baseType: !969, size: 32, align: 32, offset: 704)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "disable_auto_convert", scope: !1097, file: !938, line: 909, baseType: !1090, size: 32, align: 32, offset: 736)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "thread_type", scope: !944, file: !938, line: 373, baseType: !969, size: 32, align: 32, offset: 704)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !944, file: !938, line: 378, baseType: !1128, size: 64, align: 64, offset: 768)
!1128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1129, size: 64, align: 64)
!1129 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilterInternal", file: !938, line: 335, baseType: !1130)
!1130 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterInternal", file: !938, line: 335, flags: DIFlagFwdDecl)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "command_queue", scope: !944, file: !938, line: 380, baseType: !1132, size: 64, align: 64, offset: 832)
!1132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1133, size: 64, align: 64)
!1133 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterCommand", file: !938, line: 380, flags: DIFlagFwdDecl)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "enable_str", scope: !944, file: !938, line: 382, baseType: !1076, size: 64, align: 64, offset: 896)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "enable", scope: !944, file: !938, line: 383, baseType: !960, size: 64, align: 64, offset: 960)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "var_values", scope: !944, file: !938, line: 384, baseType: !1137, size: 64, align: 64, offset: 1024)
!1137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !979, size: 64, align: 64)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "is_disabled", scope: !944, file: !938, line: 385, baseType: !969, size: 32, align: 32, offset: 1088)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "hw_device_ctx", scope: !944, file: !938, line: 394, baseType: !1140, size: 64, align: 64, offset: 1152)
!1140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1141, size: 64, align: 64)
!1141 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBufferRef", file: !1142, line: 94, baseType: !1143)
!1142 = !DIFile(filename: "./libavutil/buffer.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!1143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVBufferRef", file: !1142, line: 81, size: 192, align: 64, elements: !1144)
!1144 = !{!1145, !1149, !1153}
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !1143, file: !1142, line: 82, baseType: !1146, size: 64, align: 64)
!1146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1147, size: 64, align: 64)
!1147 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBuffer", file: !1142, line: 73, baseType: !1148)
!1148 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVBuffer", file: !1142, line: 73, flags: DIFlagFwdDecl)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1143, file: !1142, line: 89, baseType: !1150, size: 64, align: 64, offset: 64)
!1150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1151, size: 64, align: 64)
!1151 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !976, line: 48, baseType: !1152)
!1152 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1143, file: !1142, line: 93, baseType: !969, size: 32, align: 32, offset: 128)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "nb_threads", scope: !944, file: !938, line: 401, baseType: !969, size: 32, align: 32, offset: 1216)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "ready", scope: !944, file: !938, line: 408, baseType: !1090, size: 32, align: 32, offset: 1248)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "extra_hw_frames", scope: !944, file: !938, line: 424, baseType: !969, size: 32, align: 32, offset: 1280)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "srcpad", scope: !939, file: !938, line: 441, baseType: !1084, size: 64, align: 64, offset: 64)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "dst", scope: !939, file: !938, line: 443, baseType: !942, size: 64, align: 64, offset: 128)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "dstpad", scope: !939, file: !938, line: 444, baseType: !1084, size: 64, align: 64, offset: 192)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !939, file: !938, line: 446, baseType: !534, size: 32, align: 32, offset: 256)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !939, file: !938, line: 449, baseType: !969, size: 32, align: 32, offset: 288)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "h", scope: !939, file: !938, line: 450, baseType: !969, size: 32, align: 32, offset: 320)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "sample_aspect_ratio", scope: !939, file: !938, line: 451, baseType: !982, size: 64, align: 32, offset: 352)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layout", scope: !939, file: !938, line: 453, baseType: !1165, size: 64, align: 64, offset: 448)
!1165 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !976, line: 55, baseType: !1166)
!1166 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !939, file: !938, line: 454, baseType: !969, size: 32, align: 32, offset: 512)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !939, file: !938, line: 456, baseType: !969, size: 32, align: 32, offset: 544)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "time_base", scope: !939, file: !938, line: 465, baseType: !982, size: 64, align: 32, offset: 576)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "in_formats", scope: !939, file: !938, line: 481, baseType: !1171, size: 64, align: 64, offset: 640)
!1171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1172, size: 64, align: 64)
!1172 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFilterFormats", file: !938, line: 70, baseType: !1173)
!1173 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterFormats", file: !938, line: 70, flags: DIFlagFwdDecl)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "out_formats", scope: !939, file: !938, line: 482, baseType: !1171, size: 64, align: 64, offset: 704)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "in_samplerates", scope: !939, file: !938, line: 488, baseType: !1171, size: 64, align: 64, offset: 768)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "out_samplerates", scope: !939, file: !938, line: 489, baseType: !1171, size: 64, align: 64, offset: 832)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "in_channel_layouts", scope: !939, file: !938, line: 490, baseType: !1178, size: 64, align: 64, offset: 896)
!1178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1179, size: 64, align: 64)
!1179 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVFilterChannelLayouts", file: !938, line: 490, flags: DIFlagFwdDecl)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "out_channel_layouts", scope: !939, file: !938, line: 491, baseType: !1178, size: 64, align: 64, offset: 960)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "request_samples", scope: !939, file: !938, line: 500, baseType: !969, size: 32, align: 32, offset: 1024)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "init_state", scope: !939, file: !938, line: 507, baseType: !937, size: 32, align: 32, offset: 1056)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "graph", scope: !939, file: !938, line: 512, baseType: !1096, size: 64, align: 64, offset: 1088)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "current_pts", scope: !939, file: !938, line: 518, baseType: !975, size: 64, align: 64, offset: 1152)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "current_pts_us", scope: !939, file: !938, line: 524, baseType: !975, size: 64, align: 64, offset: 1216)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "age_index", scope: !939, file: !938, line: 529, baseType: !969, size: 32, align: 32, offset: 1280)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "frame_rate", scope: !939, file: !938, line: 542, baseType: !982, size: 64, align: 32, offset: 1312)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "partial_buf", scope: !939, file: !938, line: 547, baseType: !1189, size: 64, align: 64, offset: 1408)
!1189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1190, size: 64, align: 64)
!1190 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFrame", file: !772, line: 646, baseType: !1191)
!1191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFrame", file: !772, line: 268, size: 4288, align: 64, elements: !1192)
!1192 = !{!1193, !1197, !1199, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1226, !1228, !1229, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1258, !1259, !1260, !1261, !1262, !1263, !1266, !1267, !1268, !1269}
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1191, file: !772, line: 282, baseType: !1194, size: 512, align: 64)
!1194 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1150, size: 512, align: 64, elements: !1195)
!1195 = !{!1196}
!1196 = !DISubrange(count: 8)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "linesize", scope: !1191, file: !772, line: 299, baseType: !1198, size: 256, align: 32, offset: 512)
!1198 = !DICompositeType(tag: DW_TAG_array_type, baseType: !969, size: 256, align: 32, elements: !1195)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "extended_data", scope: !1191, file: !772, line: 315, baseType: !1200, size: 64, align: 64, offset: 768)
!1200 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1150, size: 64, align: 64)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !1191, file: !772, line: 326, baseType: !969, size: 32, align: 32, offset: 832)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !1191, file: !772, line: 326, baseType: !969, size: 32, align: 32, offset: 864)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "nb_samples", scope: !1191, file: !772, line: 334, baseType: !969, size: 32, align: 32, offset: 896)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !1191, file: !772, line: 341, baseType: !969, size: 32, align: 32, offset: 928)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "key_frame", scope: !1191, file: !772, line: 346, baseType: !969, size: 32, align: 32, offset: 960)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "pict_type", scope: !1191, file: !772, line: 351, baseType: !761, size: 32, align: 32, offset: 992)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "sample_aspect_ratio", scope: !1191, file: !772, line: 356, baseType: !982, size: 64, align: 32, offset: 1024)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "pts", scope: !1191, file: !772, line: 361, baseType: !975, size: 64, align: 64, offset: 1088)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_pts", scope: !1191, file: !772, line: 369, baseType: !975, size: 64, align: 64, offset: 1152)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_dts", scope: !1191, file: !772, line: 377, baseType: !975, size: 64, align: 64, offset: 1216)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "coded_picture_number", scope: !1191, file: !772, line: 382, baseType: !969, size: 32, align: 32, offset: 1280)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "display_picture_number", scope: !1191, file: !772, line: 386, baseType: !969, size: 32, align: 32, offset: 1312)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "quality", scope: !1191, file: !772, line: 391, baseType: !969, size: 32, align: 32, offset: 1344)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "opaque", scope: !1191, file: !772, line: 396, baseType: !960, size: 64, align: 64, offset: 1408)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !1191, file: !772, line: 403, baseType: !1216, size: 512, align: 64, offset: 1472)
!1216 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1165, size: 512, align: 64, elements: !1195)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "repeat_pict", scope: !1191, file: !772, line: 410, baseType: !969, size: 32, align: 32, offset: 1984)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "interlaced_frame", scope: !1191, file: !772, line: 415, baseType: !969, size: 32, align: 32, offset: 2016)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "top_field_first", scope: !1191, file: !772, line: 420, baseType: !969, size: 32, align: 32, offset: 2048)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "palette_has_changed", scope: !1191, file: !772, line: 425, baseType: !969, size: 32, align: 32, offset: 2080)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "reordered_opaque", scope: !1191, file: !772, line: 435, baseType: !975, size: 64, align: 64, offset: 2112)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !1191, file: !772, line: 440, baseType: !969, size: 32, align: 32, offset: 2176)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layout", scope: !1191, file: !772, line: 445, baseType: !1165, size: 64, align: 64, offset: 2240)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1191, file: !772, line: 459, baseType: !1225, size: 512, align: 64, offset: 2304)
!1225 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1140, size: 512, align: 64, elements: !1195)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "extended_buf", scope: !1191, file: !772, line: 473, baseType: !1227, size: 64, align: 64, offset: 2816)
!1227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1140, size: 64, align: 64)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "nb_extended_buf", scope: !1191, file: !772, line: 477, baseType: !969, size: 32, align: 32, offset: 2880)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "side_data", scope: !1191, file: !772, line: 479, baseType: !1230, size: 64, align: 64, offset: 2944)
!1230 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1231, size: 64, align: 64)
!1231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1232, size: 64, align: 64)
!1232 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFrameSideData", file: !772, line: 207, baseType: !1233)
!1233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFrameSideData", file: !772, line: 201, size: 320, align: 64, elements: !1234)
!1234 = !{!1235, !1236, !1237, !1238, !1239}
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1233, file: !772, line: 202, baseType: !771, size: 32, align: 32)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1233, file: !772, line: 203, baseType: !1150, size: 64, align: 64, offset: 64)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1233, file: !772, line: 204, baseType: !969, size: 32, align: 32, offset: 128)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "metadata", scope: !1233, file: !772, line: 205, baseType: !1059, size: 64, align: 64, offset: 192)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1233, file: !772, line: 206, baseType: !1140, size: 64, align: 64, offset: 256)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "nb_side_data", scope: !1191, file: !772, line: 480, baseType: !969, size: 32, align: 32, offset: 3008)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1191, file: !772, line: 505, baseType: !969, size: 32, align: 32, offset: 3040)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "color_range", scope: !1191, file: !772, line: 512, baseType: !795, size: 32, align: 32, offset: 3072)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "color_primaries", scope: !1191, file: !772, line: 514, baseType: !801, size: 32, align: 32, offset: 3104)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "color_trc", scope: !1191, file: !772, line: 516, baseType: !819, size: 32, align: 32, offset: 3136)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace", scope: !1191, file: !772, line: 523, baseType: !843, size: 32, align: 32, offset: 3168)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_location", scope: !1191, file: !772, line: 525, baseType: !862, size: 32, align: 32, offset: 3200)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "best_effort_timestamp", scope: !1191, file: !772, line: 532, baseType: !975, size: 64, align: 64, offset: 3264)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_pos", scope: !1191, file: !772, line: 539, baseType: !975, size: 64, align: 64, offset: 3328)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_duration", scope: !1191, file: !772, line: 547, baseType: !975, size: 64, align: 64, offset: 3392)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "metadata", scope: !1191, file: !772, line: 554, baseType: !1059, size: 64, align: 64, offset: 3456)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "decode_error_flags", scope: !1191, file: !772, line: 563, baseType: !969, size: 32, align: 32, offset: 3520)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !1191, file: !772, line: 572, baseType: !969, size: 32, align: 32, offset: 3552)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_size", scope: !1191, file: !772, line: 581, baseType: !969, size: 32, align: 32, offset: 3584)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "qscale_table", scope: !1191, file: !772, line: 588, baseType: !1255, size: 64, align: 64, offset: 3648)
!1255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1256, size: 64, align: 64)
!1256 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !976, line: 36, baseType: !1257)
!1257 = !DIBasicType(name: "signed char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "qstride", scope: !1191, file: !772, line: 593, baseType: !969, size: 32, align: 32, offset: 3712)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "qscale_type", scope: !1191, file: !772, line: 596, baseType: !969, size: 32, align: 32, offset: 3744)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "qp_table_buf", scope: !1191, file: !772, line: 599, baseType: !1140, size: 64, align: 64, offset: 3776)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "hw_frames_ctx", scope: !1191, file: !772, line: 605, baseType: !1140, size: 64, align: 64, offset: 3840)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "opaque_ref", scope: !1191, file: !772, line: 616, baseType: !1140, size: 64, align: 64, offset: 3904)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "crop_top", scope: !1191, file: !772, line: 626, baseType: !1264, size: 64, align: 64, offset: 3968)
!1264 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1265, line: 216, baseType: !1166)
!1265 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "crop_bottom", scope: !1191, file: !772, line: 627, baseType: !1264, size: 64, align: 64, offset: 4032)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "crop_left", scope: !1191, file: !772, line: 628, baseType: !1264, size: 64, align: 64, offset: 4096)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "crop_right", scope: !1191, file: !772, line: 629, baseType: !1264, size: 64, align: 64, offset: 4160)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "private_ref", scope: !1191, file: !772, line: 645, baseType: !1140, size: 64, align: 64, offset: 4224)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "partial_buf_size", scope: !939, file: !938, line: 553, baseType: !969, size: 32, align: 32, offset: 1472)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "min_samples", scope: !939, file: !938, line: 562, baseType: !969, size: 32, align: 32, offset: 1504)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "max_samples", scope: !939, file: !938, line: 568, baseType: !969, size: 32, align: 32, offset: 1536)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !939, file: !938, line: 573, baseType: !969, size: 32, align: 32, offset: 1568)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !939, file: !938, line: 578, baseType: !1090, size: 32, align: 32, offset: 1600)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "frame_count_in", scope: !939, file: !938, line: 583, baseType: !975, size: 64, align: 64, offset: 1664)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "frame_count_out", scope: !939, file: !938, line: 583, baseType: !975, size: 64, align: 64, offset: 1728)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "frame_pool", scope: !939, file: !938, line: 588, baseType: !960, size: 64, align: 64, offset: 1792)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "frame_wanted_out", scope: !939, file: !938, line: 595, baseType: !969, size: 32, align: 32, offset: 1856)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "hw_frames_ctx", scope: !939, file: !938, line: 601, baseType: !1140, size: 64, align: 64, offset: 1920)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "reserved", scope: !939, file: !938, line: 610, baseType: !1281, size: 491520, align: 8, offset: 1984)
!1281 = !DICompositeType(tag: DW_TAG_array_type, baseType: !955, size: 491520, align: 8, elements: !1282)
!1282 = !{!1283}
!1283 = !DISubrange(count: 61440)
!1284 = !{!1285, !1286, !1287}
!1285 = !DIEnumerator(name: "AVLINK_UNINIT", value: 0)
!1286 = !DIEnumerator(name: "AVLINK_STARTINIT", value: 1)
!1287 = !DIEnumerator(name: "AVLINK_INIT", value: 2)
!1288 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVIODataMarkerType", file: !1289, line: 111, size: 32, align: 32, elements: !1290)
!1289 = !DIFile(filename: "./libavformat/avio.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!1290 = !{!1291, !1292, !1293, !1294, !1295, !1296}
!1291 = !DIEnumerator(name: "AVIO_DATA_MARKER_HEADER", value: 0)
!1292 = !DIEnumerator(name: "AVIO_DATA_MARKER_SYNC_POINT", value: 1)
!1293 = !DIEnumerator(name: "AVIO_DATA_MARKER_BOUNDARY_POINT", value: 2)
!1294 = !DIEnumerator(name: "AVIO_DATA_MARKER_UNKNOWN", value: 3)
!1295 = !DIEnumerator(name: "AVIO_DATA_MARKER_TRAILER", value: 4)
!1296 = !DIEnumerator(name: "AVIO_DATA_MARKER_FLUSH_POINT", value: 5)
!1297 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVStreamParseType", file: !1298, line: 782, size: 32, align: 32, elements: !1299)
!1298 = !DIFile(filename: "./libavformat/avformat.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!1299 = !{!1300, !1301, !1302, !1303, !1304, !1305}
!1300 = !DIEnumerator(name: "AVSTREAM_PARSE_NONE", value: 0)
!1301 = !DIEnumerator(name: "AVSTREAM_PARSE_FULL", value: 1)
!1302 = !DIEnumerator(name: "AVSTREAM_PARSE_HEADERS", value: 2)
!1303 = !DIEnumerator(name: "AVSTREAM_PARSE_TIMESTAMPS", value: 3)
!1304 = !DIEnumerator(name: "AVSTREAM_PARSE_FULL_ONCE", value: 4)
!1305 = !DIEnumerator(name: "AVSTREAM_PARSE_FULL_RAW", value: 5)
!1306 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVPictureStructure", file: !75, line: 5085, size: 32, align: 32, elements: !1307)
!1307 = !{!1308, !1309, !1310, !1311}
!1308 = !DIEnumerator(name: "AV_PICTURE_STRUCTURE_UNKNOWN", value: 0)
!1309 = !DIEnumerator(name: "AV_PICTURE_STRUCTURE_TOP_FIELD", value: 1)
!1310 = !DIEnumerator(name: "AV_PICTURE_STRUCTURE_BOTTOM_FIELD", value: 2)
!1311 = !DIEnumerator(name: "AV_PICTURE_STRUCTURE_FRAME", value: 3)
!1312 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVDurationEstimationMethod", file: !1298, line: 1315, size: 32, align: 32, elements: !1313)
!1313 = !{!1314, !1315, !1316}
!1314 = !DIEnumerator(name: "AVFMT_DURATION_FROM_PTS", value: 0)
!1315 = !DIEnumerator(name: "AVFMT_DURATION_FROM_STREAM", value: 1)
!1316 = !DIEnumerator(name: "AVFMT_DURATION_FROM_BITRATE", value: 2)
!1317 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "AVHWDeviceType", file: !1318, line: 27, size: 32, align: 32, elements: !1319)
!1318 = !DIFile(filename: "./libavutil/hwcontext.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!1319 = !{!1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330}
!1320 = !DIEnumerator(name: "AV_HWDEVICE_TYPE_NONE", value: 0)
!1321 = !DIEnumerator(name: "AV_HWDEVICE_TYPE_VDPAU", value: 1)
!1322 = !DIEnumerator(name: "AV_HWDEVICE_TYPE_CUDA", value: 2)
!1323 = !DIEnumerator(name: "AV_HWDEVICE_TYPE_VAAPI", value: 3)
!1324 = !DIEnumerator(name: "AV_HWDEVICE_TYPE_DXVA2", value: 4)
!1325 = !DIEnumerator(name: "AV_HWDEVICE_TYPE_QSV", value: 5)
!1326 = !DIEnumerator(name: "AV_HWDEVICE_TYPE_VIDEOTOOLBOX", value: 6)
!1327 = !DIEnumerator(name: "AV_HWDEVICE_TYPE_D3D11VA", value: 7)
!1328 = !DIEnumerator(name: "AV_HWDEVICE_TYPE_DRM", value: 8)
!1329 = !DIEnumerator(name: "AV_HWDEVICE_TYPE_OPENCL", value: 9)
!1330 = !DIEnumerator(name: "AV_HWDEVICE_TYPE_MEDIACODEC", value: 10)
!1331 = !{!975, !969, !960, !1090, !1165, !1332, !1150, !1121, !1334, !1335, !1336, !1137, !1338}
!1332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1333, size: 64, align: 64)
!1333 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !976, line: 38, baseType: !969)
!1334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1076, size: 64, align: 64)
!1335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !975, size: 64, align: 64)
!1336 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1337, size: 64, align: 64)
!1337 = !DIBasicType(name: "float", size: 32, align: 32, encoding: DW_ATE_float)
!1338 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !976, line: 119, baseType: !977)
!1339 = !{!1340, !1341, !1354, !1355, !1356, !1357, !1358, !1359, !1414, !1418, !1482, !1483, !1494}
!1340 = distinct !DIGlobalVariable(name: "hide_banner", scope: !0, file: !69, line: 77, type: !969, isLocal: false, isDefinition: true, variable: i32* @hide_banner)
!1341 = distinct !DIGlobalVariable(name: "log_levels", scope: !1342, file: !69, line: 873, type: !1346, isLocal: true, isDefinition: true, variable: [9 x %struct.anon]* @opt_loglevel.log_levels)
!1342 = distinct !DISubprogram(name: "opt_loglevel", scope: !69, file: !69, line: 871, type: !1343, isLocal: false, isDefinition: true, scopeLine: 872, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1343 = !DISubroutineType(types: !1344)
!1344 = !{!969, !960, !953, !953}
!1345 = !{}
!1346 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1347, size: 1152, align: 64, elements: !1352)
!1347 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1348)
!1348 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1342, file: !69, line: 873, size: 128, align: 64, elements: !1349)
!1349 = !{!1350, !1351}
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1348, file: !69, line: 873, baseType: !953, size: 64, align: 64)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !1348, file: !69, line: 873, baseType: !969, size: 32, align: 32, offset: 64)
!1352 = !{!1353}
!1353 = !DISubrange(count: 9)
!1354 = distinct !DIGlobalVariable(name: "sws_dict", scope: !0, file: !69, line: 71, type: !1059, isLocal: false, isDefinition: true, variable: %struct.AVDictionary** @sws_dict)
!1355 = distinct !DIGlobalVariable(name: "swr_opts", scope: !0, file: !69, line: 72, type: !1059, isLocal: false, isDefinition: true, variable: %struct.AVDictionary** @swr_opts)
!1356 = distinct !DIGlobalVariable(name: "format_opts", scope: !0, file: !69, line: 73, type: !1059, isLocal: false, isDefinition: true, variable: %struct.AVDictionary** @format_opts)
!1357 = distinct !DIGlobalVariable(name: "codec_opts", scope: !0, file: !69, line: 73, type: !1059, isLocal: false, isDefinition: true, variable: %struct.AVDictionary** @codec_opts)
!1358 = distinct !DIGlobalVariable(name: "resample_opts", scope: !0, file: !69, line: 73, type: !1059, isLocal: false, isDefinition: true, variable: %struct.AVDictionary** @resample_opts)
!1359 = distinct !DIGlobalVariable(name: "report_file", scope: !0, file: !69, line: 75, type: !1360, isLocal: true, isDefinition: true, variable: %struct._IO_FILE** @report_file)
!1360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1361, size: 64, align: 64)
!1361 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !1362, line: 48, baseType: !1363)
!1362 = !DIFile(filename: "/usr/include/stdio.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!1363 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !1364, line: 241, size: 1728, align: 64, elements: !1365)
!1364 = !DIFile(filename: "/usr/include/libio.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!1365 = !{!1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1386, !1387, !1388, !1389, !1392, !1394, !1395, !1399, !1402, !1404, !1405, !1406, !1407, !1408, !1409, !1410}
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1363, file: !1364, line: 242, baseType: !969, size: 32, align: 32)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1363, file: !1364, line: 247, baseType: !1076, size: 64, align: 64, offset: 64)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1363, file: !1364, line: 248, baseType: !1076, size: 64, align: 64, offset: 128)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1363, file: !1364, line: 249, baseType: !1076, size: 64, align: 64, offset: 192)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1363, file: !1364, line: 250, baseType: !1076, size: 64, align: 64, offset: 256)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1363, file: !1364, line: 251, baseType: !1076, size: 64, align: 64, offset: 320)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1363, file: !1364, line: 252, baseType: !1076, size: 64, align: 64, offset: 384)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1363, file: !1364, line: 253, baseType: !1076, size: 64, align: 64, offset: 448)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1363, file: !1364, line: 254, baseType: !1076, size: 64, align: 64, offset: 512)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1363, file: !1364, line: 256, baseType: !1076, size: 64, align: 64, offset: 576)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1363, file: !1364, line: 257, baseType: !1076, size: 64, align: 64, offset: 640)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1363, file: !1364, line: 258, baseType: !1076, size: 64, align: 64, offset: 704)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1363, file: !1364, line: 260, baseType: !1379, size: 64, align: 64, offset: 768)
!1379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1380, size: 64, align: 64)
!1380 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !1364, line: 156, size: 192, align: 64, elements: !1381)
!1381 = !{!1382, !1383, !1385}
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "_next", scope: !1380, file: !1364, line: 157, baseType: !1379, size: 64, align: 64)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "_sbuf", scope: !1380, file: !1364, line: 158, baseType: !1384, size: 64, align: 64, offset: 64)
!1384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1363, size: 64, align: 64)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "_pos", scope: !1380, file: !1364, line: 162, baseType: !969, size: 32, align: 32, offset: 128)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1363, file: !1364, line: 262, baseType: !1384, size: 64, align: 64, offset: 832)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1363, file: !1364, line: 264, baseType: !969, size: 32, align: 32, offset: 896)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1363, file: !1364, line: 268, baseType: !969, size: 32, align: 32, offset: 928)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1363, file: !1364, line: 270, baseType: !1390, size: 64, align: 64, offset: 960)
!1390 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !1391, line: 131, baseType: !977)
!1391 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1363, file: !1364, line: 274, baseType: !1393, size: 16, align: 16, offset: 1024)
!1393 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1363, file: !1364, line: 275, baseType: !1257, size: 8, align: 8, offset: 1040)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1363, file: !1364, line: 276, baseType: !1396, size: 8, align: 8, offset: 1048)
!1396 = !DICompositeType(tag: DW_TAG_array_type, baseType: !955, size: 8, align: 8, elements: !1397)
!1397 = !{!1398}
!1398 = !DISubrange(count: 1)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1363, file: !1364, line: 280, baseType: !1400, size: 64, align: 64, offset: 1088)
!1400 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1401, size: 64, align: 64)
!1401 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !1364, line: 150, baseType: null)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1363, file: !1364, line: 289, baseType: !1403, size: 64, align: 64, offset: 1152)
!1403 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !1391, line: 132, baseType: !977)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "__pad1", scope: !1363, file: !1364, line: 297, baseType: !960, size: 64, align: 64, offset: 1216)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "__pad2", scope: !1363, file: !1364, line: 298, baseType: !960, size: 64, align: 64, offset: 1280)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "__pad3", scope: !1363, file: !1364, line: 299, baseType: !960, size: 64, align: 64, offset: 1344)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "__pad4", scope: !1363, file: !1364, line: 300, baseType: !960, size: 64, align: 64, offset: 1408)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1363, file: !1364, line: 302, baseType: !1264, size: 64, align: 64, offset: 1472)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1363, file: !1364, line: 303, baseType: !969, size: 32, align: 32, offset: 1536)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1363, file: !1364, line: 305, baseType: !1411, size: 160, align: 8, offset: 1568)
!1411 = !DICompositeType(tag: DW_TAG_array_type, baseType: !955, size: 160, align: 8, elements: !1412)
!1412 = !{!1413}
!1413 = !DISubrange(count: 20)
!1414 = distinct !DIGlobalVariable(name: "program_exit", scope: !0, file: !69, line: 129, type: !1415, isLocal: true, isDefinition: true, variable: void (i32)** @program_exit)
!1415 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1416, size: 64, align: 64)
!1416 = !DISubroutineType(types: !1417)
!1417 = !{null, !969}
!1418 = distinct !DIGlobalVariable(name: "global_group", scope: !1419, file: !69, line: 708, type: !1433, isLocal: true, isDefinition: true, variable: %struct.OptionGroupDef* @init_parse_context.global_group)
!1419 = distinct !DISubprogram(name: "init_parse_context", scope: !69, file: !69, line: 705, type: !1420, isLocal: true, isDefinition: true, scopeLine: 707, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1420 = !DISubroutineType(types: !1421)
!1421 = !{null, !1422, !1432, !969}
!1422 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1423, size: 64, align: 64)
!1423 = !DIDerivedType(tag: DW_TAG_typedef, name: "OptionParseContext", file: !1424, line: 344, baseType: !1425)
!1424 = !DIFile(filename: "fftools/cmdutils.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!1425 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "OptionParseContext", file: !1424, line: 336, size: 1280, align: 64, elements: !1426)
!1426 = !{!1427, !1471, !1480, !1481}
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "global_opts", scope: !1425, file: !1424, line: 337, baseType: !1428, size: 576, align: 64)
!1428 = !DIDerivedType(tag: DW_TAG_typedef, name: "OptionGroup", file: !1424, line: 323, baseType: !1429)
!1429 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "OptionGroup", file: !1424, line: 311, size: 576, align: 64, elements: !1430)
!1430 = !{!1431, !1440, !1441, !1465, !1466, !1467, !1468, !1469, !1470}
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "group_def", scope: !1429, file: !1424, line: 312, baseType: !1432, size: 64, align: 64)
!1432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1433, size: 64, align: 64)
!1433 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1434)
!1434 = !DIDerivedType(tag: DW_TAG_typedef, name: "OptionGroupDef", file: !1424, line: 309, baseType: !1435)
!1435 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "OptionGroupDef", file: !1424, line: 296, size: 192, align: 64, elements: !1436)
!1436 = !{!1437, !1438, !1439}
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1435, file: !1424, line: 298, baseType: !953, size: 64, align: 64)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "sep", scope: !1435, file: !1424, line: 303, baseType: !953, size: 64, align: 64, offset: 64)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1435, file: !1424, line: 308, baseType: !969, size: 32, align: 32, offset: 128)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "arg", scope: !1429, file: !1424, line: 313, baseType: !953, size: 64, align: 64, offset: 64)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1429, file: !1424, line: 315, baseType: !1442, size: 64, align: 64, offset: 128)
!1442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1443, size: 64, align: 64)
!1443 = !DIDerivedType(tag: DW_TAG_typedef, name: "Option", file: !1424, line: 294, baseType: !1444)
!1444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "Option", file: !1424, line: 290, size: 192, align: 64, elements: !1445)
!1445 = !{!1446, !1463, !1464}
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "opt", scope: !1444, file: !1424, line: 291, baseType: !1447, size: 64, align: 64)
!1447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1448, size: 64, align: 64)
!1448 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1449)
!1449 = !DIDerivedType(tag: DW_TAG_typedef, name: "OptionDef", file: !1424, line: 190, baseType: !1450)
!1450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "OptionDef", file: !1424, line: 158, size: 320, align: 64, elements: !1451)
!1451 = !{!1452, !1453, !1454, !1461, !1462}
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1450, file: !1424, line: 159, baseType: !953, size: 64, align: 64)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1450, file: !1424, line: 160, baseType: !969, size: 32, align: 32, offset: 64)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1450, file: !1424, line: 187, baseType: !1455, size: 64, align: 64, offset: 128)
!1455 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1450, file: !1424, line: 183, size: 64, align: 64, elements: !1456)
!1456 = !{!1457, !1458, !1460}
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "dst_ptr", scope: !1455, file: !1424, line: 184, baseType: !960, size: 64, align: 64)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "func_arg", scope: !1455, file: !1424, line: 185, baseType: !1459, size: 64, align: 64)
!1459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1343, size: 64, align: 64)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "off", scope: !1455, file: !1424, line: 186, baseType: !1264, size: 64, align: 64)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "help", scope: !1450, file: !1424, line: 188, baseType: !953, size: 64, align: 64, offset: 192)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "argname", scope: !1450, file: !1424, line: 189, baseType: !953, size: 64, align: 64, offset: 256)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !1444, file: !1424, line: 292, baseType: !953, size: 64, align: 64, offset: 64)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1444, file: !1424, line: 293, baseType: !953, size: 64, align: 64, offset: 128)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "nb_opts", scope: !1429, file: !1424, line: 316, baseType: !969, size: 32, align: 32, offset: 192)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "codec_opts", scope: !1429, file: !1424, line: 318, baseType: !1059, size: 64, align: 64, offset: 256)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "format_opts", scope: !1429, file: !1424, line: 319, baseType: !1059, size: 64, align: 64, offset: 320)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "resample_opts", scope: !1429, file: !1424, line: 320, baseType: !1059, size: 64, align: 64, offset: 384)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "sws_dict", scope: !1429, file: !1424, line: 321, baseType: !1059, size: 64, align: 64, offset: 448)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "swr_opts", scope: !1429, file: !1424, line: 322, baseType: !1059, size: 64, align: 64, offset: 512)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "groups", scope: !1425, file: !1424, line: 339, baseType: !1472, size: 64, align: 64, offset: 576)
!1472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1473, size: 64, align: 64)
!1473 = !DIDerivedType(tag: DW_TAG_typedef, name: "OptionGroupList", file: !1424, line: 334, baseType: !1474)
!1474 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "OptionGroupList", file: !1424, line: 329, size: 192, align: 64, elements: !1475)
!1475 = !{!1476, !1477, !1479}
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "group_def", scope: !1474, file: !1424, line: 330, baseType: !1432, size: 64, align: 64)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "groups", scope: !1474, file: !1424, line: 332, baseType: !1478, size: 64, align: 64, offset: 64)
!1478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1428, size: 64, align: 64)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "nb_groups", scope: !1474, file: !1424, line: 333, baseType: !969, size: 32, align: 32, offset: 128)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "nb_groups", scope: !1425, file: !1424, line: 340, baseType: !969, size: 32, align: 32, offset: 640)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "cur_group", scope: !1425, file: !1424, line: 343, baseType: !1428, size: 576, align: 64, offset: 704)
!1482 = distinct !DIGlobalVariable(name: "report_file_level", scope: !0, file: !69, line: 76, type: !969, isLocal: true, isDefinition: true, variable: i32* @report_file_level)
!1483 = distinct !DIGlobalVariable(name: "print_prefix", scope: !1484, file: !69, line: 108, type: !969, isLocal: true, isDefinition: true, variable: i32* @log_callback_report.print_prefix)
!1484 = distinct !DISubprogram(name: "log_callback_report", scope: !69, file: !69, line: 104, type: !1485, isLocal: true, isDefinition: true, scopeLine: 105, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1485 = !DISubroutineType(types: !1486)
!1486 = !{null, !960, !969, !953, !1487}
!1487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1488, size: 64, align: 64)
!1488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !1, line: 97, size: 192, align: 64, elements: !1489)
!1489 = !{!1490, !1491, !1492, !1493}
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !1488, file: !1, line: 97, baseType: !1090, size: 32, align: 32)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !1488, file: !1, line: 97, baseType: !1090, size: 32, align: 32, offset: 32)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !1488, file: !1, line: 97, baseType: !960, size: 64, align: 64, offset: 64)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !1488, file: !1, line: 97, baseType: !960, size: 64, align: 64, offset: 128)
!1494 = distinct !DIGlobalVariable(name: "warned_cfg", scope: !0, file: !69, line: 1091, type: !969, isLocal: true, isDefinition: true, variable: i32* @warned_cfg)
!1495 = !{i32 2, !"Dwarf Version", i32 4}
!1496 = !{i32 2, !"Debug Info Version", i32 3}
!1497 = !{!"clang version 3.9.0 (tags/RELEASE_390/final)"}
!1498 = distinct !DISubprogram(name: "init_opts", scope: !69, file: !69, line: 85, type: !1499, isLocal: false, isDefinition: true, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1499 = !DISubroutineType(types: !1500)
!1500 = !{null}
!1501 = !DILocation(line: 87, column: 5, scope: !1498)
!1502 = !DILocation(line: 88, column: 1, scope: !1498)
!1503 = distinct !DISubprogram(name: "uninit_opts", scope: !69, file: !69, line: 90, type: !1499, isLocal: false, isDefinition: true, scopeLine: 91, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1504 = !DILocation(line: 92, column: 5, scope: !1503)
!1505 = !DILocation(line: 93, column: 5, scope: !1503)
!1506 = !DILocation(line: 94, column: 5, scope: !1503)
!1507 = !DILocation(line: 95, column: 5, scope: !1503)
!1508 = !DILocation(line: 96, column: 5, scope: !1503)
!1509 = !DILocation(line: 97, column: 1, scope: !1503)
!1510 = distinct !DISubprogram(name: "log_callback_help", scope: !69, file: !69, line: 99, type: !1485, isLocal: false, isDefinition: true, scopeLine: 100, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1511 = !DILocalVariable(name: "ptr", arg: 1, scope: !1510, file: !69, line: 99, type: !960)
!1512 = !DIExpression()
!1513 = !DILocation(line: 99, column: 30, scope: !1510)
!1514 = !DILocalVariable(name: "level", arg: 2, scope: !1510, file: !69, line: 99, type: !969)
!1515 = !DILocation(line: 99, column: 39, scope: !1510)
!1516 = !DILocalVariable(name: "fmt", arg: 3, scope: !1510, file: !69, line: 99, type: !953)
!1517 = !DILocation(line: 99, column: 58, scope: !1510)
!1518 = !DILocalVariable(name: "vl", arg: 4, scope: !1510, file: !69, line: 99, type: !1487)
!1519 = !DILocation(line: 99, column: 71, scope: !1510)
!1520 = !DILocation(line: 101, column: 13, scope: !1510)
!1521 = !DILocation(line: 101, column: 21, scope: !1510)
!1522 = !DILocation(line: 101, column: 26, scope: !1510)
!1523 = !DILocation(line: 101, column: 5, scope: !1510)
!1524 = !DILocation(line: 102, column: 1, scope: !1510)
!1525 = distinct !DISubprogram(name: "init_dynload", scope: !69, file: !69, line: 120, type: !1499, isLocal: false, isDefinition: true, scopeLine: 121, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1526 = !DILocation(line: 127, column: 1, scope: !1525)
!1527 = distinct !DISubprogram(name: "register_exit", scope: !69, file: !69, line: 131, type: !1528, isLocal: false, isDefinition: true, scopeLine: 132, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1528 = !DISubroutineType(types: !1529)
!1529 = !{null, !1415}
!1530 = !DILocalVariable(name: "cb", arg: 1, scope: !1527, file: !69, line: 131, type: !1415)
!1531 = !DILocation(line: 131, column: 27, scope: !1527)
!1532 = !DILocation(line: 133, column: 20, scope: !1527)
!1533 = !DILocation(line: 133, column: 18, scope: !1527)
!1534 = !DILocation(line: 134, column: 1, scope: !1527)
!1535 = distinct !DISubprogram(name: "exit_program", scope: !69, file: !69, line: 136, type: !1416, isLocal: false, isDefinition: true, scopeLine: 137, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1536 = !DILocalVariable(name: "ret", arg: 1, scope: !1535, file: !69, line: 136, type: !969)
!1537 = !DILocation(line: 136, column: 23, scope: !1535)
!1538 = !DILocation(line: 138, column: 9, scope: !1539)
!1539 = distinct !DILexicalBlock(scope: !1535, file: !69, line: 138, column: 9)
!1540 = !DILocation(line: 138, column: 9, scope: !1535)
!1541 = !DILocation(line: 139, column: 9, scope: !1539)
!1542 = !DILocation(line: 139, column: 22, scope: !1539)
!1543 = !DILocation(line: 141, column: 10, scope: !1535)
!1544 = !DILocation(line: 141, column: 5, scope: !1535)
!1545 = !DILocation(line: 142, column: 1, scope: !1535)
!1546 = distinct !DISubprogram(name: "parse_number_or_die", scope: !69, file: !69, line: 144, type: !1547, isLocal: false, isDefinition: true, scopeLine: 146, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1547 = !DISubroutineType(types: !1548)
!1548 = !{!979, !953, !953, !969, !979, !979}
!1549 = !DILocalVariable(name: "context", arg: 1, scope: !1546, file: !69, line: 144, type: !953)
!1550 = !DILocation(line: 144, column: 40, scope: !1546)
!1551 = !DILocalVariable(name: "numstr", arg: 2, scope: !1546, file: !69, line: 144, type: !953)
!1552 = !DILocation(line: 144, column: 61, scope: !1546)
!1553 = !DILocalVariable(name: "type", arg: 3, scope: !1546, file: !69, line: 144, type: !969)
!1554 = !DILocation(line: 144, column: 73, scope: !1546)
!1555 = !DILocalVariable(name: "min", arg: 4, scope: !1546, file: !69, line: 145, type: !979)
!1556 = !DILocation(line: 145, column: 35, scope: !1546)
!1557 = !DILocalVariable(name: "max", arg: 5, scope: !1546, file: !69, line: 145, type: !979)
!1558 = !DILocation(line: 145, column: 47, scope: !1546)
!1559 = !DILocalVariable(name: "tail", scope: !1546, file: !69, line: 147, type: !1076)
!1560 = !DILocation(line: 147, column: 11, scope: !1546)
!1561 = !DILocalVariable(name: "error", scope: !1546, file: !69, line: 148, type: !953)
!1562 = !DILocation(line: 148, column: 17, scope: !1546)
!1563 = !DILocalVariable(name: "d", scope: !1546, file: !69, line: 149, type: !979)
!1564 = !DILocation(line: 149, column: 12, scope: !1546)
!1565 = !DILocation(line: 149, column: 26, scope: !1546)
!1566 = !DILocation(line: 149, column: 16, scope: !1546)
!1567 = !DILocation(line: 150, column: 10, scope: !1568)
!1568 = distinct !DILexicalBlock(scope: !1546, file: !69, line: 150, column: 9)
!1569 = !DILocation(line: 150, column: 9, scope: !1568)
!1570 = !DILocation(line: 150, column: 9, scope: !1546)
!1571 = !DILocation(line: 151, column: 15, scope: !1568)
!1572 = !DILocation(line: 151, column: 9, scope: !1568)
!1573 = !DILocation(line: 152, column: 14, scope: !1574)
!1574 = distinct !DILexicalBlock(scope: !1568, file: !69, line: 152, column: 14)
!1575 = !DILocation(line: 152, column: 18, scope: !1574)
!1576 = !DILocation(line: 152, column: 16, scope: !1574)
!1577 = !DILocation(line: 152, column: 22, scope: !1574)
!1578 = !DILocation(line: 152, column: 25, scope: !1579)
!1579 = !DILexicalBlockFile(scope: !1574, file: !69, discriminator: 1)
!1580 = !DILocation(line: 152, column: 29, scope: !1579)
!1581 = !DILocation(line: 152, column: 27, scope: !1579)
!1582 = !DILocation(line: 152, column: 14, scope: !1579)
!1583 = !DILocation(line: 153, column: 15, scope: !1574)
!1584 = !DILocation(line: 153, column: 9, scope: !1574)
!1585 = !DILocation(line: 154, column: 14, scope: !1586)
!1586 = distinct !DILexicalBlock(scope: !1574, file: !69, line: 154, column: 14)
!1587 = !DILocation(line: 154, column: 19, scope: !1586)
!1588 = !DILocation(line: 154, column: 29, scope: !1586)
!1589 = !DILocation(line: 154, column: 41, scope: !1590)
!1590 = !DILexicalBlockFile(scope: !1586, file: !69, discriminator: 1)
!1591 = !DILocation(line: 154, column: 32, scope: !1590)
!1592 = !DILocation(line: 154, column: 46, scope: !1590)
!1593 = !DILocation(line: 154, column: 43, scope: !1590)
!1594 = !DILocation(line: 154, column: 14, scope: !1590)
!1595 = !DILocation(line: 155, column: 15, scope: !1586)
!1596 = !DILocation(line: 155, column: 9, scope: !1586)
!1597 = !DILocation(line: 156, column: 14, scope: !1598)
!1598 = distinct !DILexicalBlock(scope: !1586, file: !69, line: 156, column: 14)
!1599 = !DILocation(line: 156, column: 19, scope: !1598)
!1600 = !DILocation(line: 156, column: 29, scope: !1598)
!1601 = !DILocation(line: 156, column: 37, scope: !1602)
!1602 = !DILexicalBlockFile(scope: !1598, file: !69, discriminator: 1)
!1603 = !DILocation(line: 156, column: 32, scope: !1602)
!1604 = !DILocation(line: 156, column: 42, scope: !1602)
!1605 = !DILocation(line: 156, column: 39, scope: !1602)
!1606 = !DILocation(line: 156, column: 14, scope: !1602)
!1607 = !DILocation(line: 157, column: 15, scope: !1598)
!1608 = !DILocation(line: 157, column: 9, scope: !1598)
!1609 = !DILocation(line: 159, column: 16, scope: !1598)
!1610 = !DILocation(line: 159, column: 9, scope: !1598)
!1611 = !DILocation(line: 160, column: 20, scope: !1546)
!1612 = !DILocation(line: 160, column: 27, scope: !1546)
!1613 = !DILocation(line: 160, column: 36, scope: !1546)
!1614 = !DILocation(line: 160, column: 44, scope: !1546)
!1615 = !DILocation(line: 160, column: 49, scope: !1546)
!1616 = !DILocation(line: 160, column: 5, scope: !1546)
!1617 = !DILocation(line: 161, column: 5, scope: !1546)
!1618 = distinct !DISubprogram(name: "parse_time_or_die", scope: !69, file: !69, line: 165, type: !1619, isLocal: false, isDefinition: true, scopeLine: 167, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1619 = !DISubroutineType(types: !1620)
!1620 = !{!975, !953, !953, !969}
!1621 = !DILocalVariable(name: "context", arg: 1, scope: !1618, file: !69, line: 165, type: !953)
!1622 = !DILocation(line: 165, column: 39, scope: !1618)
!1623 = !DILocalVariable(name: "timestr", arg: 2, scope: !1618, file: !69, line: 165, type: !953)
!1624 = !DILocation(line: 165, column: 60, scope: !1618)
!1625 = !DILocalVariable(name: "is_duration", arg: 3, scope: !1618, file: !69, line: 166, type: !969)
!1626 = !DILocation(line: 166, column: 31, scope: !1618)
!1627 = !DILocalVariable(name: "us", scope: !1618, file: !69, line: 168, type: !975)
!1628 = !DILocation(line: 168, column: 13, scope: !1618)
!1629 = !DILocation(line: 169, column: 28, scope: !1630)
!1630 = distinct !DILexicalBlock(scope: !1618, file: !69, line: 169, column: 9)
!1631 = !DILocation(line: 169, column: 37, scope: !1630)
!1632 = !DILocation(line: 169, column: 9, scope: !1630)
!1633 = !DILocation(line: 169, column: 50, scope: !1630)
!1634 = !DILocation(line: 169, column: 9, scope: !1618)
!1635 = !DILocation(line: 171, column: 16, scope: !1636)
!1636 = distinct !DILexicalBlock(scope: !1630, file: !69, line: 169, column: 55)
!1637 = !DILocation(line: 171, column: 51, scope: !1636)
!1638 = !DILocation(line: 171, column: 60, scope: !1636)
!1639 = !DILocation(line: 170, column: 9, scope: !1636)
!1640 = !DILocation(line: 172, column: 9, scope: !1636)
!1641 = !DILocation(line: 174, column: 12, scope: !1618)
!1642 = !DILocation(line: 174, column: 5, scope: !1618)
!1643 = distinct !DISubprogram(name: "show_help_options", scope: !69, file: !69, line: 177, type: !1644, isLocal: false, isDefinition: true, scopeLine: 179, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1644 = !DISubroutineType(types: !1645)
!1645 = !{null, !1447, !953, !969, !969, !969}
!1646 = !DILocalVariable(name: "options", arg: 1, scope: !1643, file: !69, line: 177, type: !1447)
!1647 = !DILocation(line: 177, column: 41, scope: !1643)
!1648 = !DILocalVariable(name: "msg", arg: 2, scope: !1643, file: !69, line: 177, type: !953)
!1649 = !DILocation(line: 177, column: 62, scope: !1643)
!1650 = !DILocalVariable(name: "req_flags", arg: 3, scope: !1643, file: !69, line: 177, type: !969)
!1651 = !DILocation(line: 177, column: 71, scope: !1643)
!1652 = !DILocalVariable(name: "rej_flags", arg: 4, scope: !1643, file: !69, line: 178, type: !969)
!1653 = !DILocation(line: 178, column: 28, scope: !1643)
!1654 = !DILocalVariable(name: "alt_flags", arg: 5, scope: !1643, file: !69, line: 178, type: !969)
!1655 = !DILocation(line: 178, column: 43, scope: !1643)
!1656 = !DILocalVariable(name: "po", scope: !1643, file: !69, line: 180, type: !1447)
!1657 = !DILocation(line: 180, column: 22, scope: !1643)
!1658 = !DILocalVariable(name: "first", scope: !1643, file: !69, line: 181, type: !969)
!1659 = !DILocation(line: 181, column: 9, scope: !1643)
!1660 = !DILocation(line: 183, column: 11, scope: !1643)
!1661 = !DILocation(line: 184, column: 15, scope: !1662)
!1662 = distinct !DILexicalBlock(scope: !1643, file: !69, line: 184, column: 5)
!1663 = !DILocation(line: 184, column: 13, scope: !1662)
!1664 = !DILocation(line: 184, column: 10, scope: !1662)
!1665 = !DILocation(line: 184, column: 24, scope: !1666)
!1666 = !DILexicalBlockFile(scope: !1667, file: !69, discriminator: 1)
!1667 = distinct !DILexicalBlock(scope: !1662, file: !69, line: 184, column: 5)
!1668 = !DILocation(line: 184, column: 28, scope: !1666)
!1669 = !DILocation(line: 184, column: 5, scope: !1666)
!1670 = !DILocalVariable(name: "buf", scope: !1671, file: !69, line: 185, type: !1672)
!1671 = distinct !DILexicalBlock(scope: !1667, file: !69, line: 184, column: 40)
!1672 = !DICompositeType(tag: DW_TAG_array_type, baseType: !955, size: 512, align: 8, elements: !1673)
!1673 = !{!1674}
!1674 = !DISubrange(count: 64)
!1675 = !DILocation(line: 185, column: 14, scope: !1671)
!1676 = !DILocation(line: 187, column: 15, scope: !1677)
!1677 = distinct !DILexicalBlock(scope: !1671, file: !69, line: 187, column: 13)
!1678 = !DILocation(line: 187, column: 19, scope: !1677)
!1679 = !DILocation(line: 187, column: 27, scope: !1677)
!1680 = !DILocation(line: 187, column: 25, scope: !1677)
!1681 = !DILocation(line: 187, column: 41, scope: !1677)
!1682 = !DILocation(line: 187, column: 38, scope: !1677)
!1683 = !DILocation(line: 187, column: 52, scope: !1677)
!1684 = !DILocation(line: 188, column: 14, scope: !1677)
!1685 = !DILocation(line: 188, column: 24, scope: !1677)
!1686 = !DILocation(line: 188, column: 29, scope: !1687)
!1687 = !DILexicalBlockFile(scope: !1677, file: !69, discriminator: 1)
!1688 = !DILocation(line: 188, column: 33, scope: !1687)
!1689 = !DILocation(line: 188, column: 41, scope: !1687)
!1690 = !DILocation(line: 188, column: 39, scope: !1687)
!1691 = !DILocation(line: 188, column: 53, scope: !1687)
!1692 = !DILocation(line: 189, column: 14, scope: !1677)
!1693 = !DILocation(line: 189, column: 18, scope: !1677)
!1694 = !DILocation(line: 189, column: 26, scope: !1677)
!1695 = !DILocation(line: 189, column: 24, scope: !1677)
!1696 = !DILocation(line: 187, column: 13, scope: !1697)
!1697 = !DILexicalBlockFile(scope: !1671, file: !69, discriminator: 1)
!1698 = !DILocation(line: 190, column: 13, scope: !1677)
!1699 = !DILocation(line: 192, column: 13, scope: !1700)
!1700 = distinct !DILexicalBlock(scope: !1671, file: !69, line: 192, column: 13)
!1701 = !DILocation(line: 192, column: 13, scope: !1671)
!1702 = !DILocation(line: 193, column: 28, scope: !1703)
!1703 = distinct !DILexicalBlock(scope: !1700, file: !69, line: 192, column: 20)
!1704 = !DILocation(line: 193, column: 13, scope: !1703)
!1705 = !DILocation(line: 194, column: 19, scope: !1703)
!1706 = !DILocation(line: 195, column: 9, scope: !1703)
!1707 = !DILocation(line: 196, column: 20, scope: !1671)
!1708 = !DILocation(line: 196, column: 25, scope: !1671)
!1709 = !DILocation(line: 196, column: 29, scope: !1671)
!1710 = !DILocation(line: 196, column: 9, scope: !1671)
!1711 = !DILocation(line: 197, column: 13, scope: !1712)
!1712 = distinct !DILexicalBlock(scope: !1671, file: !69, line: 197, column: 13)
!1713 = !DILocation(line: 197, column: 17, scope: !1712)
!1714 = !DILocation(line: 197, column: 13, scope: !1671)
!1715 = !DILocation(line: 198, column: 24, scope: !1716)
!1716 = distinct !DILexicalBlock(scope: !1712, file: !69, line: 197, column: 26)
!1717 = !DILocation(line: 198, column: 13, scope: !1716)
!1718 = !DILocation(line: 199, column: 24, scope: !1716)
!1719 = !DILocation(line: 199, column: 29, scope: !1716)
!1720 = !DILocation(line: 199, column: 33, scope: !1716)
!1721 = !DILocation(line: 199, column: 13, scope: !1716)
!1722 = !DILocation(line: 200, column: 9, scope: !1716)
!1723 = !DILocation(line: 201, column: 32, scope: !1671)
!1724 = !DILocation(line: 201, column: 37, scope: !1671)
!1725 = !DILocation(line: 201, column: 41, scope: !1671)
!1726 = !DILocation(line: 201, column: 9, scope: !1671)
!1727 = !DILocation(line: 202, column: 5, scope: !1671)
!1728 = !DILocation(line: 184, column: 36, scope: !1729)
!1729 = !DILexicalBlockFile(scope: !1667, file: !69, discriminator: 2)
!1730 = !DILocation(line: 184, column: 5, scope: !1729)
!1731 = distinct !{!1731, !1732}
!1732 = !DILocation(line: 184, column: 5, scope: !1643)
!1733 = !DILocation(line: 203, column: 5, scope: !1643)
!1734 = !DILocation(line: 204, column: 1, scope: !1643)
!1735 = distinct !DISubprogram(name: "show_help_children", scope: !69, file: !69, line: 206, type: !1736, isLocal: false, isDefinition: true, scopeLine: 207, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1736 = !DISubroutineType(types: !1737)
!1737 = !{null, !947, !969}
!1738 = !DILocalVariable(name: "class", arg: 1, scope: !1735, file: !69, line: 206, type: !947)
!1739 = !DILocation(line: 206, column: 40, scope: !1735)
!1740 = !DILocalVariable(name: "flags", arg: 2, scope: !1735, file: !69, line: 206, type: !969)
!1741 = !DILocation(line: 206, column: 51, scope: !1735)
!1742 = !DILocalVariable(name: "child", scope: !1735, file: !69, line: 208, type: !947)
!1743 = !DILocation(line: 208, column: 20, scope: !1735)
!1744 = !DILocation(line: 209, column: 9, scope: !1745)
!1745 = distinct !DILexicalBlock(scope: !1735, file: !69, line: 209, column: 9)
!1746 = !DILocation(line: 209, column: 16, scope: !1745)
!1747 = !DILocation(line: 209, column: 9, scope: !1735)
!1748 = !DILocation(line: 210, column: 22, scope: !1749)
!1749 = distinct !DILexicalBlock(scope: !1745, file: !69, line: 209, column: 24)
!1750 = !DILocation(line: 210, column: 35, scope: !1749)
!1751 = !DILocation(line: 210, column: 9, scope: !1749)
!1752 = !DILocation(line: 211, column: 9, scope: !1749)
!1753 = !DILocation(line: 212, column: 5, scope: !1749)
!1754 = !DILocation(line: 214, column: 5, scope: !1735)
!1755 = !DILocation(line: 214, column: 44, scope: !1756)
!1756 = !DILexicalBlockFile(scope: !1735, file: !69, discriminator: 1)
!1757 = !DILocation(line: 214, column: 51, scope: !1756)
!1758 = !DILocation(line: 214, column: 20, scope: !1756)
!1759 = !DILocation(line: 214, column: 18, scope: !1756)
!1760 = !DILocation(line: 214, column: 5, scope: !1756)
!1761 = !DILocation(line: 215, column: 28, scope: !1735)
!1762 = !DILocation(line: 215, column: 35, scope: !1735)
!1763 = !DILocation(line: 215, column: 9, scope: !1735)
!1764 = !DILocation(line: 214, column: 5, scope: !1765)
!1765 = !DILexicalBlockFile(scope: !1735, file: !69, discriminator: 2)
!1766 = distinct !{!1766, !1754}
!1767 = !DILocation(line: 216, column: 1, scope: !1735)
!1768 = distinct !DISubprogram(name: "parse_option", scope: !69, file: !69, line: 350, type: !1769, isLocal: false, isDefinition: true, scopeLine: 352, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1769 = !DISubroutineType(types: !1770)
!1770 = !{!969, !960, !953, !953, !1447}
!1771 = !DILocalVariable(name: "optctx", arg: 1, scope: !1768, file: !69, line: 350, type: !960)
!1772 = !DILocation(line: 350, column: 24, scope: !1768)
!1773 = !DILocalVariable(name: "opt", arg: 2, scope: !1768, file: !69, line: 350, type: !953)
!1774 = !DILocation(line: 350, column: 44, scope: !1768)
!1775 = !DILocalVariable(name: "arg", arg: 3, scope: !1768, file: !69, line: 350, type: !953)
!1776 = !DILocation(line: 350, column: 61, scope: !1768)
!1777 = !DILocalVariable(name: "options", arg: 4, scope: !1768, file: !69, line: 351, type: !1447)
!1778 = !DILocation(line: 351, column: 35, scope: !1768)
!1779 = !DILocalVariable(name: "po", scope: !1768, file: !69, line: 353, type: !1447)
!1780 = !DILocation(line: 353, column: 22, scope: !1768)
!1781 = !DILocalVariable(name: "ret", scope: !1768, file: !69, line: 354, type: !969)
!1782 = !DILocation(line: 354, column: 9, scope: !1768)
!1783 = !DILocation(line: 356, column: 22, scope: !1768)
!1784 = !DILocation(line: 356, column: 31, scope: !1768)
!1785 = !DILocation(line: 356, column: 10, scope: !1768)
!1786 = !DILocation(line: 356, column: 8, scope: !1768)
!1787 = !DILocation(line: 357, column: 10, scope: !1788)
!1788 = distinct !DILexicalBlock(scope: !1768, file: !69, line: 357, column: 9)
!1789 = !DILocation(line: 357, column: 14, scope: !1788)
!1790 = !DILocation(line: 357, column: 19, scope: !1788)
!1791 = !DILocation(line: 357, column: 22, scope: !1792)
!1792 = !DILexicalBlockFile(scope: !1788, file: !69, discriminator: 1)
!1793 = !DILocation(line: 357, column: 29, scope: !1792)
!1794 = !DILocation(line: 357, column: 36, scope: !1792)
!1795 = !DILocation(line: 357, column: 39, scope: !1796)
!1796 = !DILexicalBlockFile(scope: !1788, file: !69, discriminator: 2)
!1797 = !DILocation(line: 357, column: 46, scope: !1796)
!1798 = !DILocation(line: 357, column: 9, scope: !1796)
!1799 = !DILocation(line: 359, column: 26, scope: !1800)
!1800 = distinct !DILexicalBlock(scope: !1788, file: !69, line: 357, column: 54)
!1801 = !DILocation(line: 359, column: 35, scope: !1800)
!1802 = !DILocation(line: 359, column: 39, scope: !1800)
!1803 = !DILocation(line: 359, column: 14, scope: !1800)
!1804 = !DILocation(line: 359, column: 12, scope: !1800)
!1805 = !DILocation(line: 360, column: 14, scope: !1806)
!1806 = distinct !DILexicalBlock(scope: !1800, file: !69, line: 360, column: 13)
!1807 = !DILocation(line: 360, column: 18, scope: !1806)
!1808 = !DILocation(line: 360, column: 23, scope: !1806)
!1809 = !DILocation(line: 360, column: 27, scope: !1810)
!1810 = !DILexicalBlockFile(scope: !1806, file: !69, discriminator: 1)
!1811 = !DILocation(line: 360, column: 31, scope: !1810)
!1812 = !DILocation(line: 360, column: 37, scope: !1810)
!1813 = !DILocation(line: 360, column: 13, scope: !1810)
!1814 = !DILocation(line: 361, column: 17, scope: !1806)
!1815 = !DILocation(line: 361, column: 13, scope: !1806)
!1816 = !DILocation(line: 362, column: 5, scope: !1800)
!1817 = !DILocation(line: 362, column: 16, scope: !1818)
!1818 = !DILexicalBlockFile(scope: !1819, file: !69, discriminator: 1)
!1819 = distinct !DILexicalBlock(scope: !1788, file: !69, line: 362, column: 16)
!1820 = !DILocation(line: 362, column: 20, scope: !1818)
!1821 = !DILocation(line: 362, column: 26, scope: !1818)
!1822 = !DILocation(line: 363, column: 13, scope: !1819)
!1823 = !DILocation(line: 363, column: 9, scope: !1819)
!1824 = !DILocation(line: 365, column: 10, scope: !1825)
!1825 = distinct !DILexicalBlock(scope: !1768, file: !69, line: 365, column: 9)
!1826 = !DILocation(line: 365, column: 14, scope: !1825)
!1827 = !DILocation(line: 365, column: 9, scope: !1768)
!1828 = !DILocation(line: 366, column: 26, scope: !1825)
!1829 = !DILocation(line: 366, column: 14, scope: !1825)
!1830 = !DILocation(line: 366, column: 12, scope: !1825)
!1831 = !DILocation(line: 366, column: 9, scope: !1825)
!1832 = !DILocation(line: 367, column: 10, scope: !1833)
!1833 = distinct !DILexicalBlock(scope: !1768, file: !69, line: 367, column: 9)
!1834 = !DILocation(line: 367, column: 14, scope: !1833)
!1835 = !DILocation(line: 367, column: 9, scope: !1768)
!1836 = !DILocation(line: 368, column: 55, scope: !1837)
!1837 = distinct !DILexicalBlock(scope: !1833, file: !69, line: 367, column: 20)
!1838 = !DILocation(line: 368, column: 9, scope: !1837)
!1839 = !DILocation(line: 369, column: 9, scope: !1837)
!1840 = !DILocation(line: 371, column: 9, scope: !1841)
!1841 = distinct !DILexicalBlock(scope: !1768, file: !69, line: 371, column: 9)
!1842 = !DILocation(line: 371, column: 13, scope: !1841)
!1843 = !DILocation(line: 371, column: 19, scope: !1841)
!1844 = !DILocation(line: 371, column: 28, scope: !1841)
!1845 = !DILocation(line: 371, column: 32, scope: !1846)
!1846 = !DILexicalBlockFile(scope: !1841, file: !69, discriminator: 1)
!1847 = !DILocation(line: 371, column: 9, scope: !1846)
!1848 = !DILocation(line: 372, column: 63, scope: !1849)
!1849 = distinct !DILexicalBlock(scope: !1841, file: !69, line: 371, column: 37)
!1850 = !DILocation(line: 372, column: 9, scope: !1849)
!1851 = !DILocation(line: 373, column: 9, scope: !1849)
!1852 = !DILocation(line: 376, column: 24, scope: !1768)
!1853 = !DILocation(line: 376, column: 32, scope: !1768)
!1854 = !DILocation(line: 376, column: 36, scope: !1768)
!1855 = !DILocation(line: 376, column: 41, scope: !1768)
!1856 = !DILocation(line: 376, column: 11, scope: !1768)
!1857 = !DILocation(line: 376, column: 9, scope: !1768)
!1858 = !DILocation(line: 377, column: 9, scope: !1859)
!1859 = distinct !DILexicalBlock(scope: !1768, file: !69, line: 377, column: 9)
!1860 = !DILocation(line: 377, column: 13, scope: !1859)
!1861 = !DILocation(line: 377, column: 9, scope: !1768)
!1862 = !DILocation(line: 378, column: 16, scope: !1859)
!1863 = !DILocation(line: 378, column: 9, scope: !1859)
!1864 = !DILocation(line: 380, column: 15, scope: !1768)
!1865 = !DILocation(line: 380, column: 19, scope: !1768)
!1866 = !DILocation(line: 380, column: 25, scope: !1768)
!1867 = !DILocation(line: 380, column: 13, scope: !1768)
!1868 = !DILocation(line: 380, column: 12, scope: !1768)
!1869 = !DILocation(line: 380, column: 5, scope: !1768)
!1870 = !DILocation(line: 381, column: 1, scope: !1768)
!1871 = distinct !DISubprogram(name: "find_option", scope: !69, file: !69, line: 218, type: !1872, isLocal: true, isDefinition: true, scopeLine: 219, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1872 = !DISubroutineType(types: !1873)
!1873 = !{!1447, !1447, !953}
!1874 = !DILocalVariable(name: "po", arg: 1, scope: !1871, file: !69, line: 218, type: !1447)
!1875 = !DILocation(line: 218, column: 54, scope: !1871)
!1876 = !DILocalVariable(name: "name", arg: 2, scope: !1871, file: !69, line: 218, type: !953)
!1877 = !DILocation(line: 218, column: 70, scope: !1871)
!1878 = !DILocalVariable(name: "p", scope: !1871, file: !69, line: 220, type: !953)
!1879 = !DILocation(line: 220, column: 17, scope: !1871)
!1880 = !DILocation(line: 220, column: 28, scope: !1871)
!1881 = !DILocation(line: 220, column: 21, scope: !1871)
!1882 = !DILocalVariable(name: "len", scope: !1871, file: !69, line: 221, type: !969)
!1883 = !DILocation(line: 221, column: 9, scope: !1871)
!1884 = !DILocation(line: 221, column: 15, scope: !1871)
!1885 = !DILocation(line: 221, column: 19, scope: !1886)
!1886 = !DILexicalBlockFile(scope: !1871, file: !69, discriminator: 1)
!1887 = !DILocation(line: 221, column: 23, scope: !1886)
!1888 = !DILocation(line: 221, column: 21, scope: !1886)
!1889 = !DILocation(line: 221, column: 15, scope: !1886)
!1890 = !DILocation(line: 221, column: 37, scope: !1891)
!1891 = !DILexicalBlockFile(scope: !1871, file: !69, discriminator: 2)
!1892 = !DILocation(line: 221, column: 30, scope: !1891)
!1893 = !DILocation(line: 221, column: 15, scope: !1891)
!1894 = !DILocation(line: 221, column: 15, scope: !1895)
!1895 = !DILexicalBlockFile(scope: !1871, file: !69, discriminator: 3)
!1896 = !DILocation(line: 221, column: 9, scope: !1895)
!1897 = !DILocation(line: 223, column: 5, scope: !1871)
!1898 = !DILocation(line: 223, column: 12, scope: !1886)
!1899 = !DILocation(line: 223, column: 16, scope: !1886)
!1900 = !DILocation(line: 223, column: 5, scope: !1886)
!1901 = !DILocation(line: 224, column: 22, scope: !1902)
!1902 = distinct !DILexicalBlock(scope: !1903, file: !69, line: 224, column: 13)
!1903 = distinct !DILexicalBlock(scope: !1871, file: !69, line: 223, column: 22)
!1904 = !DILocation(line: 224, column: 28, scope: !1902)
!1905 = !DILocation(line: 224, column: 32, scope: !1902)
!1906 = !DILocation(line: 224, column: 38, scope: !1902)
!1907 = !DILocation(line: 224, column: 14, scope: !1902)
!1908 = !DILocation(line: 224, column: 43, scope: !1902)
!1909 = !DILocation(line: 224, column: 53, scope: !1910)
!1910 = !DILexicalBlockFile(scope: !1902, file: !69, discriminator: 1)
!1911 = !DILocation(line: 224, column: 57, scope: !1910)
!1912 = !DILocation(line: 224, column: 46, scope: !1910)
!1913 = !DILocation(line: 224, column: 66, scope: !1910)
!1914 = !DILocation(line: 224, column: 63, scope: !1910)
!1915 = !DILocation(line: 224, column: 13, scope: !1910)
!1916 = !DILocation(line: 225, column: 13, scope: !1902)
!1917 = !DILocation(line: 226, column: 11, scope: !1903)
!1918 = !DILocation(line: 223, column: 5, scope: !1891)
!1919 = distinct !{!1919, !1897}
!1920 = !DILocation(line: 228, column: 12, scope: !1871)
!1921 = !DILocation(line: 228, column: 5, scope: !1871)
!1922 = distinct !DISubprogram(name: "write_option", scope: !69, file: !69, line: 295, type: !1923, isLocal: true, isDefinition: true, scopeLine: 297, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!1923 = !DISubroutineType(types: !1924)
!1924 = !{!969, !960, !1447, !953, !953}
!1925 = !DILocalVariable(name: "optctx", arg: 1, scope: !1922, file: !69, line: 295, type: !960)
!1926 = !DILocation(line: 295, column: 31, scope: !1922)
!1927 = !DILocalVariable(name: "po", arg: 2, scope: !1922, file: !69, line: 295, type: !1447)
!1928 = !DILocation(line: 295, column: 56, scope: !1922)
!1929 = !DILocalVariable(name: "opt", arg: 3, scope: !1922, file: !69, line: 295, type: !953)
!1930 = !DILocation(line: 295, column: 72, scope: !1922)
!1931 = !DILocalVariable(name: "arg", arg: 4, scope: !1922, file: !69, line: 296, type: !953)
!1932 = !DILocation(line: 296, column: 37, scope: !1922)
!1933 = !DILocalVariable(name: "dst", scope: !1922, file: !69, line: 300, type: !960)
!1934 = !DILocation(line: 300, column: 11, scope: !1922)
!1935 = !DILocation(line: 300, column: 17, scope: !1922)
!1936 = !DILocation(line: 300, column: 21, scope: !1922)
!1937 = !DILocation(line: 300, column: 27, scope: !1922)
!1938 = !DILocation(line: 301, column: 28, scope: !1922)
!1939 = !DILocation(line: 301, column: 37, scope: !1922)
!1940 = !DILocation(line: 301, column: 41, scope: !1922)
!1941 = !DILocation(line: 301, column: 43, scope: !1922)
!1942 = !DILocation(line: 301, column: 35, scope: !1922)
!1943 = !DILocation(line: 300, column: 17, scope: !1944)
!1944 = !DILexicalBlockFile(scope: !1922, file: !69, discriminator: 1)
!1945 = !DILocation(line: 301, column: 49, scope: !1944)
!1946 = !DILocation(line: 301, column: 53, scope: !1944)
!1947 = !DILocation(line: 301, column: 55, scope: !1944)
!1948 = !DILocation(line: 300, column: 17, scope: !1949)
!1949 = !DILexicalBlockFile(scope: !1922, file: !69, discriminator: 2)
!1950 = !DILocation(line: 300, column: 17, scope: !1951)
!1951 = !DILexicalBlockFile(scope: !1922, file: !69, discriminator: 3)
!1952 = !DILocation(line: 300, column: 11, scope: !1951)
!1953 = !DILocalVariable(name: "dstcount", scope: !1922, file: !69, line: 302, type: !1121)
!1954 = !DILocation(line: 302, column: 10, scope: !1922)
!1955 = !DILocation(line: 304, column: 9, scope: !1956)
!1956 = distinct !DILexicalBlock(scope: !1922, file: !69, line: 304, column: 9)
!1957 = !DILocation(line: 304, column: 13, scope: !1956)
!1958 = !DILocation(line: 304, column: 19, scope: !1956)
!1959 = !DILocation(line: 304, column: 9, scope: !1922)
!1960 = !DILocalVariable(name: "so", scope: !1961, file: !69, line: 305, type: !1962)
!1961 = distinct !DILexicalBlock(scope: !1956, file: !69, line: 304, column: 29)
!1962 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1963, size: 64, align: 64)
!1963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1964, size: 64, align: 64)
!1964 = !DIDerivedType(tag: DW_TAG_typedef, name: "SpecifierOpt", file: !1424, line: 156, baseType: !1965)
!1965 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "SpecifierOpt", file: !1424, line: 146, size: 128, align: 64, elements: !1966)
!1966 = !{!1967, !1968}
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "specifier", scope: !1965, file: !1424, line: 147, baseType: !1076, size: 64, align: 64)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1965, file: !1424, line: 155, baseType: !1969, size: 64, align: 64, offset: 64)
!1969 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1965, file: !1424, line: 148, size: 64, align: 64, elements: !1970)
!1970 = !{!1971, !1972, !1973, !1974, !1975, !1976}
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1969, file: !1424, line: 149, baseType: !1150, size: 64, align: 64)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !1969, file: !1424, line: 150, baseType: !969, size: 32, align: 32)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "i64", scope: !1969, file: !1424, line: 151, baseType: !975, size: 64, align: 64)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "ui64", scope: !1969, file: !1424, line: 152, baseType: !1165, size: 64, align: 64)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1969, file: !1424, line: 153, baseType: !1337, size: 32, align: 32)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "dbl", scope: !1969, file: !1424, line: 154, baseType: !979, size: 64, align: 64)
!1977 = !DILocation(line: 305, column: 24, scope: !1961)
!1978 = !DILocation(line: 305, column: 29, scope: !1961)
!1979 = !DILocalVariable(name: "p", scope: !1961, file: !69, line: 306, type: !1076)
!1980 = !DILocation(line: 306, column: 15, scope: !1961)
!1981 = !DILocation(line: 306, column: 26, scope: !1961)
!1982 = !DILocation(line: 306, column: 19, scope: !1961)
!1983 = !DILocalVariable(name: "str", scope: !1961, file: !69, line: 307, type: !1076)
!1984 = !DILocation(line: 307, column: 15, scope: !1961)
!1985 = !DILocation(line: 309, column: 28, scope: !1961)
!1986 = !DILocation(line: 309, column: 31, scope: !1961)
!1987 = !DILocation(line: 309, column: 20, scope: !1961)
!1988 = !DILocation(line: 309, column: 18, scope: !1961)
!1989 = !DILocation(line: 310, column: 27, scope: !1961)
!1990 = !DILocation(line: 310, column: 26, scope: !1961)
!1991 = !DILocation(line: 310, column: 45, scope: !1961)
!1992 = !DILocation(line: 310, column: 56, scope: !1961)
!1993 = !DILocation(line: 310, column: 55, scope: !1961)
!1994 = !DILocation(line: 310, column: 65, scope: !1961)
!1995 = !DILocation(line: 310, column: 15, scope: !1961)
!1996 = !DILocation(line: 310, column: 10, scope: !1961)
!1997 = !DILocation(line: 310, column: 13, scope: !1961)
!1998 = !DILocation(line: 311, column: 25, scope: !1961)
!1999 = !DILocation(line: 311, column: 29, scope: !2000)
!2000 = !DILexicalBlockFile(scope: !1961, file: !69, discriminator: 1)
!2001 = !DILocation(line: 311, column: 31, scope: !2000)
!2002 = !DILocation(line: 311, column: 25, scope: !2000)
!2003 = !DILocation(line: 311, column: 25, scope: !2004)
!2004 = !DILexicalBlockFile(scope: !1961, file: !69, discriminator: 2)
!2005 = !DILocation(line: 311, column: 25, scope: !2006)
!2006 = !DILexicalBlockFile(scope: !1961, file: !69, discriminator: 3)
!2007 = !DILocation(line: 311, column: 15, scope: !2006)
!2008 = !DILocation(line: 311, column: 13, scope: !2006)
!2009 = !DILocation(line: 312, column: 14, scope: !2010)
!2010 = distinct !DILexicalBlock(scope: !1961, file: !69, line: 312, column: 13)
!2011 = !DILocation(line: 312, column: 13, scope: !1961)
!2012 = !DILocation(line: 313, column: 13, scope: !2010)
!2013 = !DILocation(line: 314, column: 42, scope: !1961)
!2014 = !DILocation(line: 314, column: 16, scope: !1961)
!2015 = !DILocation(line: 314, column: 15, scope: !1961)
!2016 = !DILocation(line: 314, column: 25, scope: !1961)
!2017 = !DILocation(line: 314, column: 9, scope: !1961)
!2018 = !DILocation(line: 314, column: 11, scope: !1961)
!2019 = !DILocation(line: 314, column: 10, scope: !1961)
!2020 = !DILocation(line: 314, column: 30, scope: !1961)
!2021 = !DILocation(line: 314, column: 40, scope: !1961)
!2022 = !DILocation(line: 315, column: 23, scope: !1961)
!2023 = !DILocation(line: 315, column: 22, scope: !1961)
!2024 = !DILocation(line: 315, column: 32, scope: !1961)
!2025 = !DILocation(line: 315, column: 16, scope: !1961)
!2026 = !DILocation(line: 315, column: 18, scope: !1961)
!2027 = !DILocation(line: 315, column: 17, scope: !1961)
!2028 = !DILocation(line: 315, column: 37, scope: !1961)
!2029 = !DILocation(line: 315, column: 15, scope: !1961)
!2030 = !DILocation(line: 315, column: 13, scope: !1961)
!2031 = !DILocation(line: 316, column: 5, scope: !1961)
!2032 = !DILocation(line: 318, column: 9, scope: !2033)
!2033 = distinct !DILexicalBlock(scope: !1922, file: !69, line: 318, column: 9)
!2034 = !DILocation(line: 318, column: 13, scope: !2033)
!2035 = !DILocation(line: 318, column: 19, scope: !2033)
!2036 = !DILocation(line: 318, column: 9, scope: !1922)
!2037 = !DILocalVariable(name: "str", scope: !2038, file: !69, line: 319, type: !1076)
!2038 = distinct !DILexicalBlock(scope: !2033, file: !69, line: 318, column: 29)
!2039 = !DILocation(line: 319, column: 15, scope: !2038)
!2040 = !DILocation(line: 320, column: 25, scope: !2038)
!2041 = !DILocation(line: 320, column: 15, scope: !2038)
!2042 = !DILocation(line: 320, column: 13, scope: !2038)
!2043 = !DILocation(line: 321, column: 18, scope: !2038)
!2044 = !DILocation(line: 321, column: 9, scope: !2038)
!2045 = !DILocation(line: 322, column: 14, scope: !2046)
!2046 = distinct !DILexicalBlock(scope: !2038, file: !69, line: 322, column: 13)
!2047 = !DILocation(line: 322, column: 13, scope: !2038)
!2048 = !DILocation(line: 323, column: 13, scope: !2046)
!2049 = !DILocation(line: 324, column: 25, scope: !2038)
!2050 = !DILocation(line: 324, column: 19, scope: !2038)
!2051 = !DILocation(line: 324, column: 10, scope: !2038)
!2052 = !DILocation(line: 324, column: 23, scope: !2038)
!2053 = !DILocation(line: 325, column: 5, scope: !2038)
!2054 = !DILocation(line: 325, column: 16, scope: !2055)
!2055 = !DILexicalBlockFile(scope: !2056, file: !69, discriminator: 1)
!2056 = distinct !DILexicalBlock(scope: !2033, file: !69, line: 325, column: 16)
!2057 = !DILocation(line: 325, column: 20, scope: !2055)
!2058 = !DILocation(line: 325, column: 26, scope: !2055)
!2059 = !DILocation(line: 325, column: 35, scope: !2055)
!2060 = !DILocation(line: 325, column: 38, scope: !2061)
!2061 = !DILexicalBlockFile(scope: !2056, file: !69, discriminator: 2)
!2062 = !DILocation(line: 325, column: 42, scope: !2061)
!2063 = !DILocation(line: 325, column: 48, scope: !2061)
!2064 = !DILocation(line: 325, column: 16, scope: !2061)
!2065 = !DILocation(line: 326, column: 43, scope: !2066)
!2066 = distinct !DILexicalBlock(scope: !2056, file: !69, line: 325, column: 58)
!2067 = !DILocation(line: 326, column: 48, scope: !2066)
!2068 = !DILocation(line: 326, column: 23, scope: !2066)
!2069 = !DILocation(line: 326, column: 17, scope: !2066)
!2070 = !DILocation(line: 326, column: 10, scope: !2066)
!2071 = !DILocation(line: 326, column: 21, scope: !2066)
!2072 = !DILocation(line: 327, column: 5, scope: !2066)
!2073 = !DILocation(line: 327, column: 16, scope: !2074)
!2074 = !DILexicalBlockFile(scope: !2075, file: !69, discriminator: 1)
!2075 = distinct !DILexicalBlock(scope: !2056, file: !69, line: 327, column: 16)
!2076 = !DILocation(line: 327, column: 20, scope: !2074)
!2077 = !DILocation(line: 327, column: 26, scope: !2074)
!2078 = !DILocation(line: 328, column: 47, scope: !2079)
!2079 = distinct !DILexicalBlock(scope: !2075, file: !69, line: 327, column: 36)
!2080 = !DILocation(line: 328, column: 52, scope: !2079)
!2081 = !DILocation(line: 328, column: 27, scope: !2079)
!2082 = !DILocation(line: 328, column: 21, scope: !2079)
!2083 = !DILocation(line: 328, column: 10, scope: !2079)
!2084 = !DILocation(line: 328, column: 25, scope: !2079)
!2085 = !DILocation(line: 329, column: 5, scope: !2079)
!2086 = !DILocation(line: 329, column: 16, scope: !2087)
!2087 = !DILexicalBlockFile(scope: !2088, file: !69, discriminator: 1)
!2088 = distinct !DILexicalBlock(scope: !2075, file: !69, line: 329, column: 16)
!2089 = !DILocation(line: 329, column: 20, scope: !2087)
!2090 = !DILocation(line: 329, column: 26, scope: !2087)
!2091 = !DILocation(line: 330, column: 45, scope: !2092)
!2092 = distinct !DILexicalBlock(scope: !2088, file: !69, line: 329, column: 37)
!2093 = !DILocation(line: 330, column: 50, scope: !2092)
!2094 = !DILocation(line: 330, column: 27, scope: !2092)
!2095 = !DILocation(line: 330, column: 21, scope: !2092)
!2096 = !DILocation(line: 330, column: 10, scope: !2092)
!2097 = !DILocation(line: 330, column: 25, scope: !2092)
!2098 = !DILocation(line: 331, column: 5, scope: !2092)
!2099 = !DILocation(line: 331, column: 16, scope: !2100)
!2100 = !DILexicalBlockFile(scope: !2101, file: !69, discriminator: 1)
!2101 = distinct !DILexicalBlock(scope: !2088, file: !69, line: 331, column: 16)
!2102 = !DILocation(line: 331, column: 20, scope: !2100)
!2103 = !DILocation(line: 331, column: 26, scope: !2100)
!2104 = !DILocation(line: 332, column: 45, scope: !2105)
!2105 = distinct !DILexicalBlock(scope: !2101, file: !69, line: 331, column: 36)
!2106 = !DILocation(line: 332, column: 50, scope: !2105)
!2107 = !DILocation(line: 332, column: 25, scope: !2105)
!2108 = !DILocation(line: 332, column: 19, scope: !2105)
!2109 = !DILocation(line: 332, column: 10, scope: !2105)
!2110 = !DILocation(line: 332, column: 23, scope: !2105)
!2111 = !DILocation(line: 333, column: 5, scope: !2105)
!2112 = !DILocation(line: 333, column: 16, scope: !2113)
!2113 = !DILexicalBlockFile(scope: !2114, file: !69, discriminator: 1)
!2114 = distinct !DILexicalBlock(scope: !2101, file: !69, line: 333, column: 16)
!2115 = !DILocation(line: 333, column: 20, scope: !2113)
!2116 = !DILocation(line: 333, column: 26, scope: !2113)
!2117 = !DILocation(line: 334, column: 46, scope: !2118)
!2118 = distinct !DILexicalBlock(scope: !2114, file: !69, line: 333, column: 37)
!2119 = !DILocation(line: 334, column: 51, scope: !2118)
!2120 = !DILocation(line: 334, column: 26, scope: !2118)
!2121 = !DILocation(line: 334, column: 20, scope: !2118)
!2122 = !DILocation(line: 334, column: 10, scope: !2118)
!2123 = !DILocation(line: 334, column: 24, scope: !2118)
!2124 = !DILocation(line: 335, column: 5, scope: !2118)
!2125 = !DILocation(line: 335, column: 16, scope: !2126)
!2126 = !DILexicalBlockFile(scope: !2127, file: !69, discriminator: 1)
!2127 = distinct !DILexicalBlock(scope: !2114, file: !69, line: 335, column: 16)
!2128 = !DILocation(line: 335, column: 20, scope: !2126)
!2129 = !DILocation(line: 335, column: 22, scope: !2126)
!2130 = !DILocalVariable(name: "ret", scope: !2131, file: !69, line: 336, type: !969)
!2131 = distinct !DILexicalBlock(scope: !2127, file: !69, line: 335, column: 32)
!2132 = !DILocation(line: 336, column: 13, scope: !2131)
!2133 = !DILocation(line: 336, column: 19, scope: !2131)
!2134 = !DILocation(line: 336, column: 23, scope: !2131)
!2135 = !DILocation(line: 336, column: 25, scope: !2131)
!2136 = !DILocation(line: 336, column: 34, scope: !2131)
!2137 = !DILocation(line: 336, column: 42, scope: !2131)
!2138 = !DILocation(line: 336, column: 47, scope: !2131)
!2139 = !DILocation(line: 337, column: 13, scope: !2140)
!2140 = distinct !DILexicalBlock(scope: !2131, file: !69, line: 337, column: 13)
!2141 = !DILocation(line: 337, column: 17, scope: !2140)
!2142 = !DILocation(line: 337, column: 13, scope: !2131)
!2143 = !DILocation(line: 340, column: 20, scope: !2144)
!2144 = distinct !DILexicalBlock(scope: !2140, file: !69, line: 337, column: 22)
!2145 = !DILocation(line: 340, column: 25, scope: !2144)
!2146 = !DILocation(line: 340, column: 51, scope: !2144)
!2147 = !DILocation(line: 340, column: 61, scope: !2144)
!2148 = !DILocation(line: 340, column: 70, scope: !2144)
!2149 = !DILocation(line: 340, column: 30, scope: !2150)
!2150 = !DILexicalBlockFile(scope: !2144, file: !69, discriminator: 1)
!2151 = !DILocation(line: 338, column: 13, scope: !2144)
!2152 = !DILocation(line: 341, column: 20, scope: !2144)
!2153 = !DILocation(line: 341, column: 13, scope: !2144)
!2154 = !DILocation(line: 343, column: 5, scope: !2131)
!2155 = !DILocation(line: 344, column: 9, scope: !2156)
!2156 = distinct !DILexicalBlock(scope: !1922, file: !69, line: 344, column: 9)
!2157 = !DILocation(line: 344, column: 13, scope: !2156)
!2158 = !DILocation(line: 344, column: 19, scope: !2156)
!2159 = !DILocation(line: 344, column: 9, scope: !1922)
!2160 = !DILocation(line: 345, column: 9, scope: !2156)
!2161 = !DILocation(line: 347, column: 5, scope: !1922)
!2162 = !DILocation(line: 348, column: 1, scope: !1922)
!2163 = distinct !DISubprogram(name: "parse_options", scope: !69, file: !69, line: 383, type: !2164, isLocal: false, isDefinition: true, scopeLine: 385, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!2164 = !DISubroutineType(types: !2165)
!2165 = !{null, !960, !969, !1334, !1447, !2166}
!2166 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2167, size: 64, align: 64)
!2167 = !DISubroutineType(types: !2168)
!2168 = !{null, !960, !953}
!2169 = !DILocalVariable(name: "optctx", arg: 1, scope: !2163, file: !69, line: 383, type: !960)
!2170 = !DILocation(line: 383, column: 26, scope: !2163)
!2171 = !DILocalVariable(name: "argc", arg: 2, scope: !2163, file: !69, line: 383, type: !969)
!2172 = !DILocation(line: 383, column: 38, scope: !2163)
!2173 = !DILocalVariable(name: "argv", arg: 3, scope: !2163, file: !69, line: 383, type: !1334)
!2174 = !DILocation(line: 383, column: 51, scope: !2163)
!2175 = !DILocalVariable(name: "options", arg: 4, scope: !2163, file: !69, line: 383, type: !1447)
!2176 = !DILocation(line: 383, column: 74, scope: !2163)
!2177 = !DILocalVariable(name: "parse_arg_function", arg: 5, scope: !2163, file: !69, line: 384, type: !2166)
!2178 = !DILocation(line: 384, column: 27, scope: !2163)
!2179 = !DILocalVariable(name: "opt", scope: !2163, file: !69, line: 386, type: !953)
!2180 = !DILocation(line: 386, column: 17, scope: !2163)
!2181 = !DILocalVariable(name: "optindex", scope: !2163, file: !69, line: 387, type: !969)
!2182 = !DILocation(line: 387, column: 9, scope: !2163)
!2183 = !DILocalVariable(name: "handleoptions", scope: !2163, file: !69, line: 387, type: !969)
!2184 = !DILocation(line: 387, column: 19, scope: !2163)
!2185 = !DILocalVariable(name: "ret", scope: !2163, file: !69, line: 387, type: !969)
!2186 = !DILocation(line: 387, column: 38, scope: !2163)
!2187 = !DILocation(line: 390, column: 5, scope: !2163)
!2188 = !DILocation(line: 393, column: 14, scope: !2163)
!2189 = !DILocation(line: 394, column: 5, scope: !2163)
!2190 = !DILocation(line: 394, column: 12, scope: !2191)
!2191 = !DILexicalBlockFile(scope: !2163, file: !69, discriminator: 1)
!2192 = !DILocation(line: 394, column: 23, scope: !2191)
!2193 = !DILocation(line: 394, column: 21, scope: !2191)
!2194 = !DILocation(line: 394, column: 5, scope: !2191)
!2195 = !DILocation(line: 395, column: 28, scope: !2196)
!2196 = distinct !DILexicalBlock(scope: !2163, file: !69, line: 394, column: 29)
!2197 = !DILocation(line: 395, column: 15, scope: !2196)
!2198 = !DILocation(line: 395, column: 13, scope: !2196)
!2199 = !DILocation(line: 397, column: 13, scope: !2200)
!2200 = distinct !DILexicalBlock(scope: !2196, file: !69, line: 397, column: 13)
!2201 = !DILocation(line: 397, column: 27, scope: !2200)
!2202 = !DILocation(line: 397, column: 30, scope: !2203)
!2203 = !DILexicalBlockFile(scope: !2200, file: !69, discriminator: 1)
!2204 = !DILocation(line: 397, column: 37, scope: !2203)
!2205 = !DILocation(line: 397, column: 44, scope: !2203)
!2206 = !DILocation(line: 397, column: 47, scope: !2207)
!2207 = !DILexicalBlockFile(scope: !2200, file: !69, discriminator: 2)
!2208 = !DILocation(line: 397, column: 54, scope: !2207)
!2209 = !DILocation(line: 397, column: 13, scope: !2207)
!2210 = !DILocation(line: 398, column: 17, scope: !2211)
!2211 = distinct !DILexicalBlock(scope: !2212, file: !69, line: 398, column: 17)
!2212 = distinct !DILexicalBlock(scope: !2200, file: !69, line: 397, column: 63)
!2213 = !DILocation(line: 398, column: 24, scope: !2211)
!2214 = !DILocation(line: 398, column: 31, scope: !2211)
!2215 = !DILocation(line: 398, column: 34, scope: !2216)
!2216 = !DILexicalBlockFile(scope: !2211, file: !69, discriminator: 1)
!2217 = !DILocation(line: 398, column: 41, scope: !2216)
!2218 = !DILocation(line: 398, column: 17, scope: !2216)
!2219 = !DILocation(line: 399, column: 31, scope: !2220)
!2220 = distinct !DILexicalBlock(scope: !2211, file: !69, line: 398, column: 50)
!2221 = !DILocation(line: 400, column: 17, scope: !2220)
!2222 = distinct !{!2222, !2189}
!2223 = !DILocation(line: 402, column: 16, scope: !2212)
!2224 = !DILocation(line: 404, column: 37, scope: !2225)
!2225 = distinct !DILexicalBlock(scope: !2212, file: !69, line: 404, column: 17)
!2226 = !DILocation(line: 404, column: 45, scope: !2225)
!2227 = !DILocation(line: 404, column: 55, scope: !2225)
!2228 = !DILocation(line: 404, column: 50, scope: !2225)
!2229 = !DILocation(line: 404, column: 66, scope: !2225)
!2230 = !DILocation(line: 404, column: 24, scope: !2225)
!2231 = !DILocation(line: 404, column: 22, scope: !2225)
!2232 = !DILocation(line: 404, column: 76, scope: !2225)
!2233 = !DILocation(line: 404, column: 17, scope: !2212)
!2234 = !DILocation(line: 405, column: 17, scope: !2225)
!2235 = !DILocation(line: 406, column: 25, scope: !2212)
!2236 = !DILocation(line: 406, column: 22, scope: !2212)
!2237 = !DILocation(line: 407, column: 9, scope: !2212)
!2238 = !DILocation(line: 408, column: 17, scope: !2239)
!2239 = distinct !DILexicalBlock(scope: !2240, file: !69, line: 408, column: 17)
!2240 = distinct !DILexicalBlock(scope: !2200, file: !69, line: 407, column: 16)
!2241 = !DILocation(line: 408, column: 17, scope: !2240)
!2242 = !DILocation(line: 409, column: 17, scope: !2239)
!2243 = !DILocation(line: 409, column: 36, scope: !2239)
!2244 = !DILocation(line: 409, column: 44, scope: !2239)
!2245 = !DILocation(line: 394, column: 5, scope: !2246)
!2246 = !DILexicalBlockFile(scope: !2163, file: !69, discriminator: 2)
!2247 = !DILocation(line: 412, column: 1, scope: !2163)
!2248 = distinct !DISubprogram(name: "prepare_app_arguments", scope: !69, file: !69, line: 289, type: !2249, isLocal: true, isDefinition: true, scopeLine: 290, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!2249 = !DISubroutineType(types: !2250)
!2250 = !{null, !1121, !2251}
!2251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1334, size: 64, align: 64)
!2252 = !DILocalVariable(name: "argc_ptr", arg: 1, scope: !2248, file: !69, line: 289, type: !1121)
!2253 = !DILocation(line: 289, column: 47, scope: !2248)
!2254 = !DILocalVariable(name: "argv_ptr", arg: 2, scope: !2248, file: !69, line: 289, type: !2251)
!2255 = !DILocation(line: 289, column: 65, scope: !2248)
!2256 = !DILocation(line: 292, column: 1, scope: !2248)
!2257 = distinct !DISubprogram(name: "parse_optgroup", scope: !69, file: !69, line: 414, type: !2258, isLocal: false, isDefinition: true, scopeLine: 415, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!2258 = !DISubroutineType(types: !2259)
!2259 = !{!969, !960, !1478}
!2260 = !DILocalVariable(name: "optctx", arg: 1, scope: !2257, file: !69, line: 414, type: !960)
!2261 = !DILocation(line: 414, column: 26, scope: !2257)
!2262 = !DILocalVariable(name: "g", arg: 2, scope: !2257, file: !69, line: 414, type: !1478)
!2263 = !DILocation(line: 414, column: 47, scope: !2257)
!2264 = !DILocalVariable(name: "i", scope: !2257, file: !69, line: 416, type: !969)
!2265 = !DILocation(line: 416, column: 9, scope: !2257)
!2266 = !DILocalVariable(name: "ret", scope: !2257, file: !69, line: 416, type: !969)
!2267 = !DILocation(line: 416, column: 12, scope: !2257)
!2268 = !DILocation(line: 419, column: 12, scope: !2257)
!2269 = !DILocation(line: 419, column: 15, scope: !2257)
!2270 = !DILocation(line: 419, column: 26, scope: !2257)
!2271 = !DILocation(line: 419, column: 32, scope: !2257)
!2272 = !DILocation(line: 419, column: 35, scope: !2257)
!2273 = !DILocation(line: 418, column: 5, scope: !2257)
!2274 = !DILocation(line: 421, column: 12, scope: !2275)
!2275 = distinct !DILexicalBlock(scope: !2257, file: !69, line: 421, column: 5)
!2276 = !DILocation(line: 421, column: 10, scope: !2275)
!2277 = !DILocation(line: 421, column: 17, scope: !2278)
!2278 = !DILexicalBlockFile(scope: !2279, file: !69, discriminator: 1)
!2279 = distinct !DILexicalBlock(scope: !2275, file: !69, line: 421, column: 5)
!2280 = !DILocation(line: 421, column: 21, scope: !2278)
!2281 = !DILocation(line: 421, column: 24, scope: !2278)
!2282 = !DILocation(line: 421, column: 19, scope: !2278)
!2283 = !DILocation(line: 421, column: 5, scope: !2278)
!2284 = !DILocalVariable(name: "o", scope: !2285, file: !69, line: 422, type: !1442)
!2285 = distinct !DILexicalBlock(scope: !2279, file: !69, line: 421, column: 38)
!2286 = !DILocation(line: 422, column: 17, scope: !2285)
!2287 = !DILocation(line: 422, column: 30, scope: !2285)
!2288 = !DILocation(line: 422, column: 22, scope: !2285)
!2289 = !DILocation(line: 422, column: 25, scope: !2285)
!2290 = !DILocation(line: 424, column: 13, scope: !2291)
!2291 = distinct !DILexicalBlock(scope: !2285, file: !69, line: 424, column: 13)
!2292 = !DILocation(line: 424, column: 16, scope: !2291)
!2293 = !DILocation(line: 424, column: 27, scope: !2291)
!2294 = !DILocation(line: 424, column: 33, scope: !2291)
!2295 = !DILocation(line: 425, column: 15, scope: !2291)
!2296 = !DILocation(line: 425, column: 18, scope: !2291)
!2297 = !DILocation(line: 425, column: 29, scope: !2291)
!2298 = !DILocation(line: 425, column: 37, scope: !2291)
!2299 = !DILocation(line: 425, column: 40, scope: !2291)
!2300 = !DILocation(line: 425, column: 45, scope: !2291)
!2301 = !DILocation(line: 425, column: 35, scope: !2291)
!2302 = !DILocation(line: 424, column: 13, scope: !2303)
!2303 = !DILexicalBlockFile(scope: !2285, file: !69, discriminator: 1)
!2304 = !DILocation(line: 429, column: 45, scope: !2305)
!2305 = distinct !DILexicalBlock(scope: !2291, file: !69, line: 425, column: 53)
!2306 = !DILocation(line: 429, column: 48, scope: !2305)
!2307 = !DILocation(line: 429, column: 53, scope: !2305)
!2308 = !DILocation(line: 429, column: 56, scope: !2305)
!2309 = !DILocation(line: 429, column: 61, scope: !2305)
!2310 = !DILocation(line: 430, column: 20, scope: !2305)
!2311 = !DILocation(line: 430, column: 23, scope: !2305)
!2312 = !DILocation(line: 430, column: 34, scope: !2305)
!2313 = !DILocation(line: 430, column: 40, scope: !2305)
!2314 = !DILocation(line: 430, column: 43, scope: !2305)
!2315 = !DILocation(line: 426, column: 13, scope: !2305)
!2316 = !DILocation(line: 431, column: 13, scope: !2305)
!2317 = !DILocation(line: 435, column: 16, scope: !2285)
!2318 = !DILocation(line: 435, column: 19, scope: !2285)
!2319 = !DILocation(line: 435, column: 24, scope: !2285)
!2320 = !DILocation(line: 435, column: 27, scope: !2285)
!2321 = !DILocation(line: 435, column: 32, scope: !2285)
!2322 = !DILocation(line: 435, column: 38, scope: !2285)
!2323 = !DILocation(line: 435, column: 41, scope: !2285)
!2324 = !DILocation(line: 434, column: 9, scope: !2285)
!2325 = !DILocation(line: 437, column: 28, scope: !2285)
!2326 = !DILocation(line: 437, column: 36, scope: !2285)
!2327 = !DILocation(line: 437, column: 39, scope: !2285)
!2328 = !DILocation(line: 437, column: 44, scope: !2285)
!2329 = !DILocation(line: 437, column: 47, scope: !2285)
!2330 = !DILocation(line: 437, column: 52, scope: !2285)
!2331 = !DILocation(line: 437, column: 55, scope: !2285)
!2332 = !DILocation(line: 437, column: 15, scope: !2285)
!2333 = !DILocation(line: 437, column: 13, scope: !2285)
!2334 = !DILocation(line: 438, column: 13, scope: !2335)
!2335 = distinct !DILexicalBlock(scope: !2285, file: !69, line: 438, column: 13)
!2336 = !DILocation(line: 438, column: 17, scope: !2335)
!2337 = !DILocation(line: 438, column: 13, scope: !2285)
!2338 = !DILocation(line: 439, column: 20, scope: !2335)
!2339 = !DILocation(line: 439, column: 13, scope: !2335)
!2340 = !DILocation(line: 440, column: 5, scope: !2285)
!2341 = !DILocation(line: 421, column: 34, scope: !2342)
!2342 = !DILexicalBlockFile(scope: !2279, file: !69, discriminator: 2)
!2343 = !DILocation(line: 421, column: 5, scope: !2342)
!2344 = distinct !{!2344, !2345}
!2345 = !DILocation(line: 421, column: 5, scope: !2257)
!2346 = !DILocation(line: 442, column: 5, scope: !2257)
!2347 = !DILocation(line: 444, column: 5, scope: !2257)
!2348 = !DILocation(line: 445, column: 1, scope: !2257)
!2349 = distinct !DISubprogram(name: "locate_option", scope: !69, file: !69, line: 447, type: !2350, isLocal: false, isDefinition: true, scopeLine: 449, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!2350 = !DISubroutineType(types: !2351)
!2351 = !{!969, !969, !1334, !1447, !953}
!2352 = !DILocalVariable(name: "argc", arg: 1, scope: !2349, file: !69, line: 447, type: !969)
!2353 = !DILocation(line: 447, column: 23, scope: !2349)
!2354 = !DILocalVariable(name: "argv", arg: 2, scope: !2349, file: !69, line: 447, type: !1334)
!2355 = !DILocation(line: 447, column: 36, scope: !2349)
!2356 = !DILocalVariable(name: "options", arg: 3, scope: !2349, file: !69, line: 447, type: !1447)
!2357 = !DILocation(line: 447, column: 59, scope: !2349)
!2358 = !DILocalVariable(name: "optname", arg: 4, scope: !2349, file: !69, line: 448, type: !953)
!2359 = !DILocation(line: 448, column: 31, scope: !2349)
!2360 = !DILocalVariable(name: "po", scope: !2349, file: !69, line: 450, type: !1447)
!2361 = !DILocation(line: 450, column: 22, scope: !2349)
!2362 = !DILocalVariable(name: "i", scope: !2349, file: !69, line: 451, type: !969)
!2363 = !DILocation(line: 451, column: 9, scope: !2349)
!2364 = !DILocation(line: 453, column: 12, scope: !2365)
!2365 = distinct !DILexicalBlock(scope: !2349, file: !69, line: 453, column: 5)
!2366 = !DILocation(line: 453, column: 10, scope: !2365)
!2367 = !DILocation(line: 453, column: 17, scope: !2368)
!2368 = !DILexicalBlockFile(scope: !2369, file: !69, discriminator: 1)
!2369 = distinct !DILexicalBlock(scope: !2365, file: !69, line: 453, column: 5)
!2370 = !DILocation(line: 453, column: 21, scope: !2368)
!2371 = !DILocation(line: 453, column: 19, scope: !2368)
!2372 = !DILocation(line: 453, column: 5, scope: !2368)
!2373 = !DILocalVariable(name: "cur_opt", scope: !2374, file: !69, line: 454, type: !953)
!2374 = distinct !DILexicalBlock(scope: !2369, file: !69, line: 453, column: 32)
!2375 = !DILocation(line: 454, column: 21, scope: !2374)
!2376 = !DILocation(line: 454, column: 36, scope: !2374)
!2377 = !DILocation(line: 454, column: 31, scope: !2374)
!2378 = !DILocation(line: 456, column: 21, scope: !2379)
!2379 = distinct !DILexicalBlock(scope: !2374, file: !69, line: 456, column: 13)
!2380 = !DILocation(line: 456, column: 13, scope: !2379)
!2381 = !DILocation(line: 456, column: 24, scope: !2379)
!2382 = !DILocation(line: 456, column: 13, scope: !2374)
!2383 = !DILocation(line: 457, column: 13, scope: !2379)
!2384 = !DILocation(line: 459, column: 26, scope: !2374)
!2385 = !DILocation(line: 459, column: 35, scope: !2374)
!2386 = !DILocation(line: 459, column: 14, scope: !2374)
!2387 = !DILocation(line: 459, column: 12, scope: !2374)
!2388 = !DILocation(line: 460, column: 14, scope: !2389)
!2389 = distinct !DILexicalBlock(scope: !2374, file: !69, line: 460, column: 13)
!2390 = !DILocation(line: 460, column: 18, scope: !2389)
!2391 = !DILocation(line: 460, column: 23, scope: !2389)
!2392 = !DILocation(line: 460, column: 26, scope: !2393)
!2393 = !DILexicalBlockFile(scope: !2389, file: !69, discriminator: 1)
!2394 = !DILocation(line: 460, column: 37, scope: !2393)
!2395 = !DILocation(line: 460, column: 44, scope: !2393)
!2396 = !DILocation(line: 460, column: 47, scope: !2397)
!2397 = !DILexicalBlockFile(scope: !2389, file: !69, discriminator: 2)
!2398 = !DILocation(line: 460, column: 58, scope: !2397)
!2399 = !DILocation(line: 460, column: 13, scope: !2397)
!2400 = !DILocation(line: 461, column: 30, scope: !2389)
!2401 = !DILocation(line: 461, column: 39, scope: !2389)
!2402 = !DILocation(line: 461, column: 47, scope: !2389)
!2403 = !DILocation(line: 461, column: 18, scope: !2389)
!2404 = !DILocation(line: 461, column: 16, scope: !2389)
!2405 = !DILocation(line: 461, column: 13, scope: !2389)
!2406 = !DILocation(line: 463, column: 15, scope: !2407)
!2407 = distinct !DILexicalBlock(scope: !2374, file: !69, line: 463, column: 13)
!2408 = !DILocation(line: 463, column: 19, scope: !2407)
!2409 = !DILocation(line: 463, column: 24, scope: !2407)
!2410 = !DILocation(line: 463, column: 35, scope: !2411)
!2411 = !DILexicalBlockFile(scope: !2407, file: !69, discriminator: 1)
!2412 = !DILocation(line: 463, column: 44, scope: !2411)
!2413 = !DILocation(line: 463, column: 28, scope: !2411)
!2414 = !DILocation(line: 463, column: 54, scope: !2411)
!2415 = !DILocation(line: 464, column: 15, scope: !2407)
!2416 = !DILocation(line: 464, column: 19, scope: !2407)
!2417 = !DILocation(line: 464, column: 24, scope: !2407)
!2418 = !DILocation(line: 464, column: 35, scope: !2411)
!2419 = !DILocation(line: 464, column: 44, scope: !2411)
!2420 = !DILocation(line: 464, column: 48, scope: !2411)
!2421 = !DILocation(line: 464, column: 28, scope: !2411)
!2422 = !DILocation(line: 463, column: 13, scope: !2423)
!2423 = !DILexicalBlockFile(scope: !2374, file: !69, discriminator: 2)
!2424 = !DILocation(line: 465, column: 20, scope: !2407)
!2425 = !DILocation(line: 465, column: 13, scope: !2407)
!2426 = !DILocation(line: 467, column: 14, scope: !2427)
!2427 = distinct !DILexicalBlock(scope: !2374, file: !69, line: 467, column: 13)
!2428 = !DILocation(line: 467, column: 18, scope: !2427)
!2429 = !DILocation(line: 467, column: 23, scope: !2427)
!2430 = !DILocation(line: 467, column: 26, scope: !2431)
!2431 = !DILexicalBlockFile(scope: !2427, file: !69, discriminator: 1)
!2432 = !DILocation(line: 467, column: 30, scope: !2431)
!2433 = !DILocation(line: 467, column: 36, scope: !2431)
!2434 = !DILocation(line: 467, column: 13, scope: !2431)
!2435 = !DILocation(line: 468, column: 14, scope: !2427)
!2436 = !DILocation(line: 468, column: 13, scope: !2427)
!2437 = !DILocation(line: 469, column: 5, scope: !2374)
!2438 = !DILocation(line: 453, column: 28, scope: !2439)
!2439 = !DILexicalBlockFile(scope: !2369, file: !69, discriminator: 2)
!2440 = !DILocation(line: 453, column: 5, scope: !2439)
!2441 = distinct !{!2441, !2442}
!2442 = !DILocation(line: 453, column: 5, scope: !2349)
!2443 = !DILocation(line: 470, column: 5, scope: !2349)
!2444 = !DILocation(line: 471, column: 1, scope: !2349)
!2445 = distinct !DISubprogram(name: "parse_loglevel", scope: !69, file: !69, line: 506, type: !2446, isLocal: false, isDefinition: true, scopeLine: 507, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!2446 = !DISubroutineType(types: !2447)
!2447 = !{null, !969, !1334, !1447}
!2448 = !DILocalVariable(name: "argc", arg: 1, scope: !2445, file: !69, line: 506, type: !969)
!2449 = !DILocation(line: 506, column: 25, scope: !2445)
!2450 = !DILocalVariable(name: "argv", arg: 2, scope: !2445, file: !69, line: 506, type: !1334)
!2451 = !DILocation(line: 506, column: 38, scope: !2445)
!2452 = !DILocalVariable(name: "options", arg: 3, scope: !2445, file: !69, line: 506, type: !1447)
!2453 = !DILocation(line: 506, column: 61, scope: !2445)
!2454 = !DILocalVariable(name: "idx", scope: !2445, file: !69, line: 508, type: !969)
!2455 = !DILocation(line: 508, column: 9, scope: !2445)
!2456 = !DILocation(line: 508, column: 29, scope: !2445)
!2457 = !DILocation(line: 508, column: 35, scope: !2445)
!2458 = !DILocation(line: 508, column: 41, scope: !2445)
!2459 = !DILocation(line: 508, column: 15, scope: !2445)
!2460 = !DILocalVariable(name: "env", scope: !2445, file: !69, line: 509, type: !953)
!2461 = !DILocation(line: 509, column: 17, scope: !2445)
!2462 = !DILocation(line: 511, column: 19, scope: !2445)
!2463 = !DILocation(line: 511, column: 5, scope: !2445)
!2464 = !DILocation(line: 513, column: 10, scope: !2465)
!2465 = distinct !DILexicalBlock(scope: !2445, file: !69, line: 513, column: 9)
!2466 = !DILocation(line: 513, column: 9, scope: !2445)
!2467 = !DILocation(line: 514, column: 29, scope: !2465)
!2468 = !DILocation(line: 514, column: 35, scope: !2465)
!2469 = !DILocation(line: 514, column: 41, scope: !2465)
!2470 = !DILocation(line: 514, column: 15, scope: !2465)
!2471 = !DILocation(line: 514, column: 13, scope: !2465)
!2472 = !DILocation(line: 514, column: 9, scope: !2465)
!2473 = !DILocation(line: 515, column: 9, scope: !2474)
!2474 = distinct !DILexicalBlock(scope: !2445, file: !69, line: 515, column: 9)
!2475 = !DILocation(line: 515, column: 13, scope: !2474)
!2476 = !DILocation(line: 515, column: 21, scope: !2477)
!2477 = !DILexicalBlockFile(scope: !2474, file: !69, discriminator: 1)
!2478 = !DILocation(line: 515, column: 25, scope: !2477)
!2479 = !DILocation(line: 515, column: 16, scope: !2477)
!2480 = !DILocation(line: 515, column: 9, scope: !2477)
!2481 = !DILocation(line: 516, column: 44, scope: !2474)
!2482 = !DILocation(line: 516, column: 48, scope: !2474)
!2483 = !DILocation(line: 516, column: 39, scope: !2474)
!2484 = !DILocation(line: 516, column: 9, scope: !2474)
!2485 = !DILocation(line: 517, column: 25, scope: !2445)
!2486 = !DILocation(line: 517, column: 31, scope: !2445)
!2487 = !DILocation(line: 517, column: 37, scope: !2445)
!2488 = !DILocation(line: 517, column: 11, scope: !2445)
!2489 = !DILocation(line: 517, column: 9, scope: !2445)
!2490 = !DILocation(line: 518, column: 16, scope: !2491)
!2491 = distinct !DILexicalBlock(scope: !2445, file: !69, line: 518, column: 9)
!2492 = !DILocation(line: 518, column: 14, scope: !2491)
!2493 = !DILocation(line: 518, column: 36, scope: !2491)
!2494 = !DILocation(line: 518, column: 39, scope: !2495)
!2495 = !DILexicalBlockFile(scope: !2491, file: !69, discriminator: 1)
!2496 = !DILocation(line: 518, column: 9, scope: !2495)
!2497 = !DILocation(line: 519, column: 21, scope: !2498)
!2498 = distinct !DILexicalBlock(scope: !2491, file: !69, line: 518, column: 44)
!2499 = !DILocation(line: 519, column: 9, scope: !2498)
!2500 = !DILocation(line: 520, column: 13, scope: !2501)
!2501 = distinct !DILexicalBlock(scope: !2498, file: !69, line: 520, column: 13)
!2502 = !DILocation(line: 520, column: 13, scope: !2498)
!2503 = !DILocalVariable(name: "i", scope: !2504, file: !69, line: 521, type: !969)
!2504 = distinct !DILexicalBlock(scope: !2501, file: !69, line: 520, column: 26)
!2505 = !DILocation(line: 521, column: 17, scope: !2504)
!2506 = !DILocation(line: 522, column: 21, scope: !2504)
!2507 = !DILocation(line: 522, column: 13, scope: !2504)
!2508 = !DILocation(line: 523, column: 20, scope: !2509)
!2509 = distinct !DILexicalBlock(scope: !2504, file: !69, line: 523, column: 13)
!2510 = !DILocation(line: 523, column: 18, scope: !2509)
!2511 = !DILocation(line: 523, column: 25, scope: !2512)
!2512 = !DILexicalBlockFile(scope: !2513, file: !69, discriminator: 1)
!2513 = distinct !DILexicalBlock(scope: !2509, file: !69, line: 523, column: 13)
!2514 = !DILocation(line: 523, column: 29, scope: !2512)
!2515 = !DILocation(line: 523, column: 27, scope: !2512)
!2516 = !DILocation(line: 523, column: 13, scope: !2512)
!2517 = !DILocation(line: 524, column: 36, scope: !2518)
!2518 = distinct !DILexicalBlock(scope: !2513, file: !69, line: 523, column: 40)
!2519 = !DILocation(line: 524, column: 31, scope: !2518)
!2520 = !DILocation(line: 524, column: 17, scope: !2518)
!2521 = !DILocation(line: 525, column: 23, scope: !2518)
!2522 = !DILocation(line: 525, column: 27, scope: !2518)
!2523 = !DILocation(line: 525, column: 32, scope: !2518)
!2524 = !DILocation(line: 525, column: 25, scope: !2518)
!2525 = !DILocation(line: 525, column: 50, scope: !2518)
!2526 = !DILocation(line: 525, column: 17, scope: !2518)
!2527 = !DILocation(line: 526, column: 13, scope: !2518)
!2528 = !DILocation(line: 523, column: 36, scope: !2529)
!2529 = !DILexicalBlockFile(scope: !2513, file: !69, discriminator: 2)
!2530 = !DILocation(line: 523, column: 13, scope: !2529)
!2531 = distinct !{!2531, !2532}
!2532 = !DILocation(line: 523, column: 13, scope: !2504)
!2533 = !DILocation(line: 527, column: 20, scope: !2504)
!2534 = !DILocation(line: 527, column: 13, scope: !2504)
!2535 = !DILocation(line: 528, column: 9, scope: !2504)
!2536 = !DILocation(line: 529, column: 5, scope: !2498)
!2537 = !DILocation(line: 530, column: 25, scope: !2445)
!2538 = !DILocation(line: 530, column: 31, scope: !2445)
!2539 = !DILocation(line: 530, column: 37, scope: !2445)
!2540 = !DILocation(line: 530, column: 11, scope: !2445)
!2541 = !DILocation(line: 530, column: 9, scope: !2445)
!2542 = !DILocation(line: 531, column: 9, scope: !2543)
!2543 = distinct !DILexicalBlock(scope: !2445, file: !69, line: 531, column: 9)
!2544 = !DILocation(line: 531, column: 9, scope: !2445)
!2545 = !DILocation(line: 532, column: 21, scope: !2543)
!2546 = !DILocation(line: 532, column: 9, scope: !2543)
!2547 = !DILocation(line: 533, column: 1, scope: !2445)
!2548 = distinct !DISubprogram(name: "check_options", scope: !69, file: !69, line: 497, type: !2549, isLocal: true, isDefinition: true, scopeLine: 498, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!2549 = !DISubroutineType(types: !2550)
!2550 = !{null, !1447}
!2551 = !DILocalVariable(name: "po", arg: 1, scope: !2548, file: !69, line: 497, type: !1447)
!2552 = !DILocation(line: 497, column: 44, scope: !2548)
!2553 = !DILocation(line: 499, column: 5, scope: !2548)
!2554 = !DILocation(line: 499, column: 12, scope: !2555)
!2555 = !DILexicalBlockFile(scope: !2548, file: !69, discriminator: 1)
!2556 = !DILocation(line: 499, column: 16, scope: !2555)
!2557 = !DILocation(line: 499, column: 5, scope: !2555)
!2558 = !DILocation(line: 500, column: 13, scope: !2559)
!2559 = distinct !DILexicalBlock(scope: !2560, file: !69, line: 500, column: 13)
!2560 = distinct !DILexicalBlock(scope: !2548, file: !69, line: 499, column: 22)
!2561 = !DILocation(line: 500, column: 17, scope: !2559)
!2562 = !DILocation(line: 500, column: 23, scope: !2559)
!2563 = !DILocation(line: 500, column: 13, scope: !2560)
!2564 = !DILocation(line: 501, column: 13, scope: !2559)
!2565 = distinct !{!2565, !2564}
!2566 = !DILocation(line: 501, column: 24, scope: !2567)
!2567 = !DILexicalBlockFile(scope: !2568, file: !69, discriminator: 1)
!2568 = distinct !DILexicalBlock(scope: !2569, file: !69, line: 501, column: 22)
!2569 = distinct !DILexicalBlock(scope: !2559, file: !69, line: 501, column: 16)
!2570 = !DILocation(line: 501, column: 28, scope: !2567)
!2571 = !DILocation(line: 501, column: 34, scope: !2567)
!2572 = !DILocation(line: 501, column: 22, scope: !2567)
!2573 = !DILocation(line: 501, column: 60, scope: !2574)
!2574 = !DILexicalBlockFile(scope: !2575, file: !69, discriminator: 2)
!2575 = distinct !DILexicalBlock(scope: !2568, file: !69, line: 501, column: 58)
!2576 = !DILocation(line: 501, column: 114, scope: !2577)
!2577 = !DILexicalBlockFile(scope: !2574, file: !69, discriminator: 5)
!2578 = !DILocation(line: 501, column: 114, scope: !2574)
!2579 = !DILocation(line: 501, column: 125, scope: !2580)
!2580 = !DILexicalBlockFile(scope: !2569, file: !69, discriminator: 3)
!2581 = !DILocation(line: 501, column: 125, scope: !2582)
!2582 = !DILexicalBlockFile(scope: !2569, file: !69, discriminator: 4)
!2583 = !DILocation(line: 502, column: 11, scope: !2560)
!2584 = !DILocation(line: 499, column: 5, scope: !2585)
!2585 = !DILexicalBlockFile(scope: !2548, file: !69, discriminator: 2)
!2586 = distinct !{!2586, !2553}
!2587 = !DILocation(line: 504, column: 1, scope: !2548)
!2588 = !DILocalVariable(name: "optctx", arg: 1, scope: !1342, file: !69, line: 871, type: !960)
!2589 = !DILocation(line: 871, column: 24, scope: !1342)
!2590 = !DILocalVariable(name: "opt", arg: 2, scope: !1342, file: !69, line: 871, type: !953)
!2591 = !DILocation(line: 871, column: 44, scope: !1342)
!2592 = !DILocalVariable(name: "arg", arg: 3, scope: !1342, file: !69, line: 871, type: !953)
!2593 = !DILocation(line: 871, column: 61, scope: !1342)
!2594 = !DILocalVariable(name: "token", scope: !1342, file: !69, line: 884, type: !953)
!2595 = !DILocation(line: 884, column: 17, scope: !1342)
!2596 = !DILocalVariable(name: "tail", scope: !1342, file: !69, line: 885, type: !1076)
!2597 = !DILocation(line: 885, column: 11, scope: !1342)
!2598 = !DILocalVariable(name: "flags", scope: !1342, file: !69, line: 886, type: !969)
!2599 = !DILocation(line: 886, column: 9, scope: !1342)
!2600 = !DILocation(line: 886, column: 17, scope: !1342)
!2601 = !DILocalVariable(name: "level", scope: !1342, file: !69, line: 887, type: !969)
!2602 = !DILocation(line: 887, column: 9, scope: !1342)
!2603 = !DILocation(line: 887, column: 17, scope: !1342)
!2604 = !DILocalVariable(name: "cmd", scope: !1342, file: !69, line: 888, type: !969)
!2605 = !DILocation(line: 888, column: 9, scope: !1342)
!2606 = !DILocalVariable(name: "i", scope: !1342, file: !69, line: 888, type: !969)
!2607 = !DILocation(line: 888, column: 14, scope: !1342)
!2608 = !DILocation(line: 890, column: 5, scope: !1342)
!2609 = distinct !{!2609, !2608}
!2610 = !DILocation(line: 890, column: 16, scope: !2611)
!2611 = !DILexicalBlockFile(scope: !2612, file: !69, discriminator: 1)
!2612 = distinct !DILexicalBlock(scope: !2613, file: !69, line: 890, column: 14)
!2613 = distinct !DILexicalBlock(scope: !1342, file: !69, line: 890, column: 8)
!2614 = !DILocation(line: 890, column: 15, scope: !2611)
!2615 = !DILocation(line: 890, column: 14, scope: !2611)
!2616 = !DILocation(line: 890, column: 24, scope: !2617)
!2617 = !DILexicalBlockFile(scope: !2618, file: !69, discriminator: 2)
!2618 = distinct !DILexicalBlock(scope: !2612, file: !69, line: 890, column: 22)
!2619 = !DILocation(line: 890, column: 78, scope: !2620)
!2620 = !DILexicalBlockFile(scope: !2617, file: !69, discriminator: 4)
!2621 = !DILocation(line: 890, column: 78, scope: !2617)
!2622 = !DILocation(line: 890, column: 89, scope: !2623)
!2623 = !DILexicalBlockFile(scope: !2613, file: !69, discriminator: 3)
!2624 = !DILocation(line: 891, column: 5, scope: !1342)
!2625 = !DILocation(line: 891, column: 13, scope: !2626)
!2626 = !DILexicalBlockFile(scope: !1342, file: !69, discriminator: 1)
!2627 = !DILocation(line: 891, column: 12, scope: !2626)
!2628 = !DILocation(line: 891, column: 5, scope: !2626)
!2629 = !DILocation(line: 892, column: 17, scope: !2630)
!2630 = distinct !DILexicalBlock(scope: !1342, file: !69, line: 891, column: 18)
!2631 = !DILocation(line: 892, column: 15, scope: !2630)
!2632 = !DILocation(line: 893, column: 14, scope: !2633)
!2633 = distinct !DILexicalBlock(scope: !2630, file: !69, line: 893, column: 13)
!2634 = !DILocation(line: 893, column: 13, scope: !2633)
!2635 = !DILocation(line: 893, column: 20, scope: !2633)
!2636 = !DILocation(line: 893, column: 27, scope: !2633)
!2637 = !DILocation(line: 893, column: 31, scope: !2638)
!2638 = !DILexicalBlockFile(scope: !2633, file: !69, discriminator: 1)
!2639 = !DILocation(line: 893, column: 30, scope: !2638)
!2640 = !DILocation(line: 893, column: 37, scope: !2638)
!2641 = !DILocation(line: 893, column: 13, scope: !2638)
!2642 = !DILocation(line: 894, column: 25, scope: !2643)
!2643 = distinct !DILexicalBlock(scope: !2633, file: !69, line: 893, column: 45)
!2644 = !DILocation(line: 894, column: 19, scope: !2643)
!2645 = !DILocation(line: 894, column: 17, scope: !2643)
!2646 = !DILocation(line: 895, column: 9, scope: !2643)
!2647 = !DILocation(line: 896, column: 17, scope: !2648)
!2648 = distinct !DILexicalBlock(scope: !2633, file: !69, line: 895, column: 16)
!2649 = !DILocation(line: 898, column: 14, scope: !2650)
!2650 = distinct !DILexicalBlock(scope: !2630, file: !69, line: 898, column: 13)
!2651 = !DILocation(line: 898, column: 16, scope: !2650)
!2652 = !DILocation(line: 898, column: 20, scope: !2653)
!2653 = !DILexicalBlockFile(scope: !2650, file: !69, discriminator: 1)
!2654 = !DILocation(line: 898, column: 13, scope: !2653)
!2655 = !DILocation(line: 899, column: 19, scope: !2656)
!2656 = distinct !DILexicalBlock(scope: !2650, file: !69, line: 898, column: 25)
!2657 = !DILocation(line: 900, column: 9, scope: !2656)
!2658 = !DILocation(line: 901, column: 22, scope: !2659)
!2659 = distinct !DILexicalBlock(scope: !2630, file: !69, line: 901, column: 13)
!2660 = !DILocation(line: 901, column: 14, scope: !2659)
!2661 = !DILocation(line: 901, column: 13, scope: !2630)
!2662 = !DILocation(line: 902, column: 17, scope: !2663)
!2663 = distinct !DILexicalBlock(scope: !2664, file: !69, line: 902, column: 17)
!2664 = distinct !DILexicalBlock(scope: !2659, file: !69, line: 901, column: 43)
!2665 = !DILocation(line: 902, column: 21, scope: !2663)
!2666 = !DILocation(line: 902, column: 17, scope: !2664)
!2667 = !DILocation(line: 903, column: 23, scope: !2668)
!2668 = distinct !DILexicalBlock(scope: !2663, file: !69, line: 902, column: 29)
!2669 = !DILocation(line: 904, column: 13, scope: !2668)
!2670 = !DILocation(line: 905, column: 23, scope: !2671)
!2671 = distinct !DILexicalBlock(scope: !2663, file: !69, line: 904, column: 20)
!2672 = !DILocation(line: 907, column: 19, scope: !2664)
!2673 = !DILocation(line: 907, column: 25, scope: !2664)
!2674 = !DILocation(line: 907, column: 17, scope: !2664)
!2675 = !DILocation(line: 908, column: 9, scope: !2664)
!2676 = !DILocation(line: 908, column: 29, scope: !2677)
!2677 = !DILexicalBlockFile(scope: !2678, file: !69, discriminator: 1)
!2678 = distinct !DILexicalBlock(scope: !2659, file: !69, line: 908, column: 20)
!2679 = !DILocation(line: 908, column: 21, scope: !2677)
!2680 = !DILocation(line: 908, column: 20, scope: !2677)
!2681 = !DILocation(line: 909, column: 17, scope: !2682)
!2682 = distinct !DILexicalBlock(scope: !2683, file: !69, line: 909, column: 17)
!2683 = distinct !DILexicalBlock(scope: !2678, file: !69, line: 908, column: 49)
!2684 = !DILocation(line: 909, column: 21, scope: !2682)
!2685 = !DILocation(line: 909, column: 17, scope: !2683)
!2686 = !DILocation(line: 910, column: 23, scope: !2687)
!2687 = distinct !DILexicalBlock(scope: !2682, file: !69, line: 909, column: 29)
!2688 = !DILocation(line: 911, column: 13, scope: !2687)
!2689 = !DILocation(line: 912, column: 23, scope: !2690)
!2690 = distinct !DILexicalBlock(scope: !2682, file: !69, line: 911, column: 20)
!2691 = !DILocation(line: 914, column: 19, scope: !2683)
!2692 = !DILocation(line: 914, column: 25, scope: !2683)
!2693 = !DILocation(line: 914, column: 17, scope: !2683)
!2694 = !DILocation(line: 915, column: 9, scope: !2683)
!2695 = !DILocation(line: 916, column: 13, scope: !2696)
!2696 = distinct !DILexicalBlock(scope: !2678, file: !69, line: 915, column: 16)
!2697 = !DILocation(line: 918, column: 10, scope: !2630)
!2698 = !DILocation(line: 891, column: 5, scope: !2699)
!2699 = !DILexicalBlockFile(scope: !1342, file: !69, discriminator: 2)
!2700 = distinct !{!2700, !2624}
!2701 = !DILocation(line: 920, column: 11, scope: !2702)
!2702 = distinct !DILexicalBlock(scope: !1342, file: !69, line: 920, column: 9)
!2703 = !DILocation(line: 920, column: 10, scope: !2702)
!2704 = !DILocation(line: 920, column: 9, scope: !1342)
!2705 = !DILocation(line: 921, column: 9, scope: !2706)
!2706 = distinct !DILexicalBlock(scope: !2702, file: !69, line: 920, column: 16)
!2707 = !DILocation(line: 922, column: 17, scope: !2708)
!2708 = distinct !DILexicalBlock(scope: !2702, file: !69, line: 922, column: 16)
!2709 = !DILocation(line: 922, column: 16, scope: !2708)
!2710 = !DILocation(line: 922, column: 21, scope: !2708)
!2711 = !DILocation(line: 922, column: 16, scope: !2702)
!2712 = !DILocation(line: 923, column: 12, scope: !2713)
!2713 = distinct !DILexicalBlock(scope: !2708, file: !69, line: 922, column: 29)
!2714 = !DILocation(line: 924, column: 5, scope: !2713)
!2715 = !DILocation(line: 924, column: 17, scope: !2716)
!2716 = !DILexicalBlockFile(scope: !2717, file: !69, discriminator: 1)
!2717 = distinct !DILexicalBlock(scope: !2708, file: !69, line: 924, column: 16)
!2718 = !DILocation(line: 924, column: 16, scope: !2716)
!2719 = !DILocation(line: 925, column: 17, scope: !2720)
!2720 = distinct !DILexicalBlock(scope: !2717, file: !69, line: 924, column: 20)
!2721 = !DILocation(line: 925, column: 15, scope: !2720)
!2722 = !DILocation(line: 926, column: 5, scope: !2720)
!2723 = !DILocation(line: 928, column: 12, scope: !2724)
!2724 = distinct !DILexicalBlock(scope: !1342, file: !69, line: 928, column: 5)
!2725 = !DILocation(line: 928, column: 10, scope: !2724)
!2726 = !DILocation(line: 928, column: 17, scope: !2727)
!2727 = !DILexicalBlockFile(scope: !2728, file: !69, discriminator: 1)
!2728 = distinct !DILexicalBlock(scope: !2724, file: !69, line: 928, column: 5)
!2729 = !DILocation(line: 928, column: 19, scope: !2727)
!2730 = !DILocation(line: 928, column: 5, scope: !2727)
!2731 = !DILocation(line: 929, column: 32, scope: !2732)
!2732 = distinct !DILexicalBlock(scope: !2733, file: !69, line: 929, column: 13)
!2733 = distinct !DILexicalBlock(scope: !2728, file: !69, line: 928, column: 74)
!2734 = !DILocation(line: 929, column: 21, scope: !2732)
!2735 = !DILocation(line: 929, column: 35, scope: !2732)
!2736 = !DILocation(line: 929, column: 41, scope: !2732)
!2737 = !DILocation(line: 929, column: 14, scope: !2732)
!2738 = !DILocation(line: 929, column: 13, scope: !2733)
!2739 = !DILocation(line: 930, column: 32, scope: !2740)
!2740 = distinct !DILexicalBlock(scope: !2732, file: !69, line: 929, column: 47)
!2741 = !DILocation(line: 930, column: 21, scope: !2740)
!2742 = !DILocation(line: 930, column: 35, scope: !2740)
!2743 = !DILocation(line: 930, column: 19, scope: !2740)
!2744 = !DILocation(line: 931, column: 13, scope: !2740)
!2745 = !DILocation(line: 933, column: 5, scope: !2733)
!2746 = !DILocation(line: 928, column: 70, scope: !2747)
!2747 = !DILexicalBlockFile(scope: !2728, file: !69, discriminator: 2)
!2748 = !DILocation(line: 928, column: 5, scope: !2747)
!2749 = distinct !{!2749, !2750}
!2750 = !DILocation(line: 928, column: 5, scope: !1342)
!2751 = !DILocation(line: 935, column: 20, scope: !1342)
!2752 = !DILocation(line: 935, column: 13, scope: !1342)
!2753 = !DILocation(line: 935, column: 11, scope: !1342)
!2754 = !DILocation(line: 936, column: 10, scope: !2755)
!2755 = distinct !DILexicalBlock(scope: !1342, file: !69, line: 936, column: 9)
!2756 = !DILocation(line: 936, column: 9, scope: !2755)
!2757 = !DILocation(line: 936, column: 9, scope: !1342)
!2758 = !DILocation(line: 938, column: 53, scope: !2759)
!2759 = distinct !DILexicalBlock(scope: !2755, file: !69, line: 936, column: 16)
!2760 = !DILocation(line: 937, column: 9, scope: !2759)
!2761 = !DILocation(line: 939, column: 16, scope: !2762)
!2762 = distinct !DILexicalBlock(scope: !2759, file: !69, line: 939, column: 9)
!2763 = !DILocation(line: 939, column: 14, scope: !2762)
!2764 = !DILocation(line: 939, column: 21, scope: !2765)
!2765 = !DILexicalBlockFile(scope: !2766, file: !69, discriminator: 1)
!2766 = distinct !DILexicalBlock(scope: !2762, file: !69, line: 939, column: 9)
!2767 = !DILocation(line: 939, column: 23, scope: !2765)
!2768 = !DILocation(line: 939, column: 9, scope: !2765)
!2769 = !DILocation(line: 940, column: 51, scope: !2766)
!2770 = !DILocation(line: 940, column: 40, scope: !2766)
!2771 = !DILocation(line: 940, column: 54, scope: !2766)
!2772 = !DILocation(line: 940, column: 13, scope: !2766)
!2773 = !DILocation(line: 939, column: 74, scope: !2774)
!2774 = !DILexicalBlockFile(scope: !2766, file: !69, discriminator: 2)
!2775 = !DILocation(line: 939, column: 9, scope: !2774)
!2776 = distinct !{!2776, !2777}
!2777 = !DILocation(line: 939, column: 9, scope: !2759)
!2778 = !DILocation(line: 941, column: 9, scope: !2759)
!2779 = !DILocation(line: 936, column: 10, scope: !2780)
!2780 = !DILexicalBlockFile(scope: !2755, file: !69, discriminator: 1)
!2781 = !DILocation(line: 945, column: 22, scope: !1342)
!2782 = !DILocation(line: 945, column: 5, scope: !1342)
!2783 = !DILocation(line: 946, column: 22, scope: !1342)
!2784 = !DILocation(line: 946, column: 5, scope: !1342)
!2785 = !DILocation(line: 947, column: 5, scope: !1342)
!2786 = distinct !DISubprogram(name: "init_report", scope: !69, file: !69, line: 978, type: !2787, isLocal: true, isDefinition: true, scopeLine: 979, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!2787 = !DISubroutineType(types: !2788)
!2788 = !{!969, !953}
!2789 = !DILocalVariable(name: "env", arg: 1, scope: !2786, file: !69, line: 978, type: !953)
!2790 = !DILocation(line: 978, column: 36, scope: !2786)
!2791 = !DILocalVariable(name: "filename_template", scope: !2786, file: !69, line: 980, type: !1076)
!2792 = !DILocation(line: 980, column: 11, scope: !2786)
!2793 = !DILocalVariable(name: "key", scope: !2786, file: !69, line: 981, type: !1076)
!2794 = !DILocation(line: 981, column: 11, scope: !2786)
!2795 = !DILocalVariable(name: "val", scope: !2786, file: !69, line: 981, type: !1076)
!2796 = !DILocation(line: 981, column: 17, scope: !2786)
!2797 = !DILocalVariable(name: "ret", scope: !2786, file: !69, line: 982, type: !969)
!2798 = !DILocation(line: 982, column: 9, scope: !2786)
!2799 = !DILocalVariable(name: "count", scope: !2786, file: !69, line: 982, type: !969)
!2800 = !DILocation(line: 982, column: 14, scope: !2786)
!2801 = !DILocalVariable(name: "now", scope: !2786, file: !69, line: 983, type: !2802)
!2802 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !2803, line: 75, baseType: !2804)
!2803 = !DIFile(filename: "/usr/include/time.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!2804 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !1391, line: 139, baseType: !977)
!2805 = !DILocation(line: 983, column: 12, scope: !2786)
!2806 = !DILocalVariable(name: "tm", scope: !2786, file: !69, line: 984, type: !2807)
!2807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2808, size: 64, align: 64)
!2808 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !2803, line: 133, size: 448, align: 64, elements: !2809)
!2809 = !{!2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820}
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "tm_sec", scope: !2808, file: !2803, line: 135, baseType: !969, size: 32, align: 32)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "tm_min", scope: !2808, file: !2803, line: 136, baseType: !969, size: 32, align: 32, offset: 32)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "tm_hour", scope: !2808, file: !2803, line: 137, baseType: !969, size: 32, align: 32, offset: 64)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mday", scope: !2808, file: !2803, line: 138, baseType: !969, size: 32, align: 32, offset: 96)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mon", scope: !2808, file: !2803, line: 139, baseType: !969, size: 32, align: 32, offset: 128)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "tm_year", scope: !2808, file: !2803, line: 140, baseType: !969, size: 32, align: 32, offset: 160)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "tm_wday", scope: !2808, file: !2803, line: 141, baseType: !969, size: 32, align: 32, offset: 192)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "tm_yday", scope: !2808, file: !2803, line: 142, baseType: !969, size: 32, align: 32, offset: 224)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "tm_isdst", scope: !2808, file: !2803, line: 143, baseType: !969, size: 32, align: 32, offset: 256)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "__tm_gmtoff", scope: !2808, file: !2803, line: 149, baseType: !977, size: 64, align: 64, offset: 320)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "__tm_zone", scope: !2808, file: !2803, line: 150, baseType: !953, size: 64, align: 64, offset: 384)
!2821 = !DILocation(line: 984, column: 16, scope: !2786)
!2822 = !DILocalVariable(name: "filename", scope: !2786, file: !69, line: 985, type: !2823)
!2823 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBPrint", file: !2824, line: 82, baseType: !2825)
!2824 = !DIFile(filename: "./libavutil/bprint.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!2825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVBPrint", file: !2824, line: 82, size: 8192, align: 64, elements: !2826)
!2826 = !{!2827, !2828, !2829, !2830, !2831, !2832}
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2825, file: !2824, line: 82, baseType: !1076, size: 64, align: 64)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2825, file: !2824, line: 82, baseType: !1090, size: 32, align: 32, offset: 64)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2825, file: !2824, line: 82, baseType: !1090, size: 32, align: 32, offset: 96)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "size_max", scope: !2825, file: !2824, line: 82, baseType: !1090, size: 32, align: 32, offset: 128)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_internal_buffer", scope: !2825, file: !2824, line: 82, baseType: !1396, size: 8, align: 8, offset: 160)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_padding", scope: !2825, file: !2824, line: 82, baseType: !2833, size: 8000, align: 8, offset: 168)
!2833 = !DICompositeType(tag: DW_TAG_array_type, baseType: !955, size: 8000, align: 8, elements: !2834)
!2834 = !{!2835}
!2835 = !DISubrange(count: 1000)
!2836 = !DILocation(line: 985, column: 14, scope: !2786)
!2837 = !DILocation(line: 987, column: 9, scope: !2838)
!2838 = distinct !DILexicalBlock(scope: !2786, file: !69, line: 987, column: 9)
!2839 = !DILocation(line: 987, column: 9, scope: !2786)
!2840 = !DILocation(line: 988, column: 9, scope: !2838)
!2841 = !DILocation(line: 989, column: 5, scope: !2786)
!2842 = !DILocation(line: 990, column: 10, scope: !2786)
!2843 = !DILocation(line: 990, column: 8, scope: !2786)
!2844 = !DILocation(line: 992, column: 5, scope: !2786)
!2845 = !DILocation(line: 992, column: 12, scope: !2846)
!2846 = !DILexicalBlockFile(scope: !2786, file: !69, discriminator: 1)
!2847 = !DILocation(line: 992, column: 16, scope: !2846)
!2848 = !DILocation(line: 992, column: 20, scope: !2849)
!2849 = !DILexicalBlockFile(scope: !2786, file: !69, discriminator: 2)
!2850 = !DILocation(line: 992, column: 19, scope: !2849)
!2851 = !DILocation(line: 992, column: 16, scope: !2849)
!2852 = !DILocation(line: 992, column: 5, scope: !2853)
!2853 = !DILexicalBlockFile(scope: !2786, file: !69, discriminator: 3)
!2854 = !DILocation(line: 993, column: 20, scope: !2855)
!2855 = distinct !DILexicalBlock(scope: !2856, file: !69, line: 993, column: 13)
!2856 = distinct !DILexicalBlock(scope: !2786, file: !69, line: 992, column: 25)
!2857 = !DILocation(line: 993, column: 18, scope: !2855)
!2858 = !DILocation(line: 993, column: 73, scope: !2855)
!2859 = !DILocation(line: 993, column: 13, scope: !2856)
!2860 = !DILocation(line: 994, column: 17, scope: !2861)
!2861 = distinct !DILexicalBlock(scope: !2862, file: !69, line: 994, column: 17)
!2862 = distinct !DILexicalBlock(scope: !2855, file: !69, line: 993, column: 78)
!2863 = !DILocation(line: 994, column: 17, scope: !2862)
!2864 = !DILocation(line: 997, column: 45, scope: !2861)
!2865 = !DILocation(line: 997, column: 55, scope: !2861)
!2866 = !DILocation(line: 997, column: 64, scope: !2861)
!2867 = !DILocation(line: 997, column: 24, scope: !2868)
!2868 = !DILexicalBlockFile(scope: !2861, file: !69, discriminator: 1)
!2869 = !DILocation(line: 995, column: 17, scope: !2861)
!2870 = !DILocation(line: 998, column: 13, scope: !2862)
!2871 = !DILocation(line: 1000, column: 14, scope: !2872)
!2872 = distinct !DILexicalBlock(scope: !2856, file: !69, line: 1000, column: 13)
!2873 = !DILocation(line: 1000, column: 13, scope: !2872)
!2874 = !DILocation(line: 1000, column: 13, scope: !2856)
!2875 = !DILocation(line: 1001, column: 16, scope: !2872)
!2876 = !DILocation(line: 1001, column: 13, scope: !2872)
!2877 = !DILocation(line: 1002, column: 14, scope: !2856)
!2878 = !DILocation(line: 1003, column: 21, scope: !2879)
!2879 = distinct !DILexicalBlock(scope: !2856, file: !69, line: 1003, column: 13)
!2880 = !DILocation(line: 1003, column: 14, scope: !2879)
!2881 = !DILocation(line: 1003, column: 13, scope: !2856)
!2882 = !DILocation(line: 1004, column: 21, scope: !2883)
!2883 = distinct !DILexicalBlock(scope: !2879, file: !69, line: 1003, column: 35)
!2884 = !DILocation(line: 1004, column: 13, scope: !2883)
!2885 = !DILocation(line: 1005, column: 33, scope: !2883)
!2886 = !DILocation(line: 1005, column: 31, scope: !2883)
!2887 = !DILocation(line: 1006, column: 17, scope: !2883)
!2888 = !DILocation(line: 1007, column: 9, scope: !2883)
!2889 = !DILocation(line: 1007, column: 28, scope: !2890)
!2890 = !DILexicalBlockFile(scope: !2891, file: !69, discriminator: 1)
!2891 = distinct !DILexicalBlock(scope: !2879, file: !69, line: 1007, column: 20)
!2892 = !DILocation(line: 1007, column: 21, scope: !2890)
!2893 = !DILocation(line: 1007, column: 20, scope: !2890)
!2894 = !DILocalVariable(name: "tail", scope: !2895, file: !69, line: 1008, type: !1076)
!2895 = distinct !DILexicalBlock(scope: !2891, file: !69, line: 1007, column: 43)
!2896 = !DILocation(line: 1008, column: 19, scope: !2895)
!2897 = !DILocation(line: 1009, column: 40, scope: !2895)
!2898 = !DILocation(line: 1009, column: 33, scope: !2895)
!2899 = !DILocation(line: 1009, column: 31, scope: !2895)
!2900 = !DILocation(line: 1010, column: 18, scope: !2901)
!2901 = distinct !DILexicalBlock(scope: !2895, file: !69, line: 1010, column: 17)
!2902 = !DILocation(line: 1010, column: 17, scope: !2901)
!2903 = !DILocation(line: 1010, column: 17, scope: !2895)
!2904 = !DILocation(line: 1011, column: 17, scope: !2905)
!2905 = distinct !DILexicalBlock(scope: !2901, file: !69, line: 1010, column: 24)
!2906 = !DILocation(line: 1012, column: 17, scope: !2905)
!2907 = !DILocation(line: 1014, column: 9, scope: !2895)
!2908 = !DILocation(line: 1015, column: 63, scope: !2909)
!2909 = distinct !DILexicalBlock(scope: !2891, file: !69, line: 1014, column: 16)
!2910 = !DILocation(line: 1015, column: 13, scope: !2909)
!2911 = !DILocation(line: 1017, column: 17, scope: !2856)
!2912 = !DILocation(line: 1017, column: 9, scope: !2856)
!2913 = !DILocation(line: 1018, column: 17, scope: !2856)
!2914 = !DILocation(line: 1018, column: 9, scope: !2856)
!2915 = !DILocation(line: 992, column: 5, scope: !2916)
!2916 = !DILexicalBlockFile(scope: !2786, file: !69, discriminator: 4)
!2917 = distinct !{!2917, !2844}
!2918 = !DILocation(line: 1021, column: 5, scope: !2786)
!2919 = !DILocation(line: 1023, column: 43, scope: !2786)
!2920 = !DILocation(line: 1023, column: 30, scope: !2786)
!2921 = !DILocation(line: 1023, column: 76, scope: !2786)
!2922 = !DILocation(line: 1022, column: 5, scope: !2786)
!2923 = !DILocation(line: 1024, column: 13, scope: !2786)
!2924 = !DILocation(line: 1024, column: 5, scope: !2786)
!2925 = !DILocation(line: 1025, column: 10, scope: !2926)
!2926 = distinct !DILexicalBlock(scope: !2786, file: !69, line: 1025, column: 9)
!2927 = !DILocation(line: 1025, column: 9, scope: !2786)
!2928 = !DILocation(line: 1026, column: 9, scope: !2929)
!2929 = distinct !DILexicalBlock(scope: !2926, file: !69, line: 1025, column: 44)
!2930 = !DILocation(line: 1027, column: 9, scope: !2929)
!2931 = !DILocation(line: 1030, column: 34, scope: !2786)
!2932 = !DILocation(line: 1030, column: 19, scope: !2786)
!2933 = !DILocation(line: 1030, column: 17, scope: !2786)
!2934 = !DILocation(line: 1031, column: 10, scope: !2935)
!2935 = distinct !DILexicalBlock(scope: !2786, file: !69, line: 1031, column: 9)
!2936 = !DILocation(line: 1031, column: 9, scope: !2786)
!2937 = !DILocalVariable(name: "ret", scope: !2938, file: !69, line: 1032, type: !969)
!2938 = distinct !DILexicalBlock(scope: !2935, file: !69, line: 1031, column: 23)
!2939 = !DILocation(line: 1032, column: 13, scope: !2938)
!2940 = !DILocation(line: 1032, column: 20, scope: !2938)
!2941 = !DILocation(line: 1032, column: 19, scope: !2938)
!2942 = !DILocation(line: 1034, column: 25, scope: !2938)
!2943 = !DILocation(line: 1034, column: 40, scope: !2938)
!2944 = !DILocation(line: 1034, column: 39, scope: !2938)
!2945 = !DILocation(line: 1034, column: 30, scope: !2946)
!2946 = !DILexicalBlockFile(scope: !2938, file: !69, discriminator: 1)
!2947 = !DILocation(line: 1033, column: 9, scope: !2938)
!2948 = !DILocation(line: 1035, column: 16, scope: !2938)
!2949 = !DILocation(line: 1035, column: 9, scope: !2938)
!2950 = !DILocation(line: 1037, column: 5, scope: !2786)
!2951 = !DILocation(line: 1042, column: 12, scope: !2786)
!2952 = !DILocation(line: 1042, column: 16, scope: !2786)
!2953 = !DILocation(line: 1042, column: 24, scope: !2786)
!2954 = !DILocation(line: 1042, column: 32, scope: !2786)
!2955 = !DILocation(line: 1042, column: 36, scope: !2786)
!2956 = !DILocation(line: 1042, column: 43, scope: !2786)
!2957 = !DILocation(line: 1042, column: 48, scope: !2786)
!2958 = !DILocation(line: 1042, column: 52, scope: !2786)
!2959 = !DILocation(line: 1043, column: 12, scope: !2786)
!2960 = !DILocation(line: 1043, column: 16, scope: !2786)
!2961 = !DILocation(line: 1043, column: 25, scope: !2786)
!2962 = !DILocation(line: 1043, column: 29, scope: !2786)
!2963 = !DILocation(line: 1043, column: 37, scope: !2786)
!2964 = !DILocation(line: 1043, column: 41, scope: !2786)
!2965 = !DILocation(line: 1044, column: 21, scope: !2786)
!2966 = !DILocation(line: 1038, column: 5, scope: !2786)
!2967 = !DILocation(line: 1045, column: 5, scope: !2786)
!2968 = !DILocation(line: 1046, column: 5, scope: !2786)
!2969 = !DILocation(line: 1047, column: 1, scope: !2786)
!2970 = distinct !DISubprogram(name: "dump_argument", scope: !69, file: !69, line: 473, type: !2971, isLocal: true, isDefinition: true, scopeLine: 474, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!2971 = !DISubroutineType(types: !2972)
!2972 = !{null, !953}
!2973 = !DILocalVariable(name: "a", arg: 1, scope: !2970, file: !69, line: 473, type: !953)
!2974 = !DILocation(line: 473, column: 39, scope: !2970)
!2975 = !DILocalVariable(name: "p", scope: !2970, file: !69, line: 475, type: !2976)
!2976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2977, size: 64, align: 64)
!2977 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1152)
!2978 = !DILocation(line: 475, column: 26, scope: !2970)
!2979 = !DILocation(line: 477, column: 14, scope: !2980)
!2980 = distinct !DILexicalBlock(scope: !2970, file: !69, line: 477, column: 5)
!2981 = !DILocation(line: 477, column: 12, scope: !2980)
!2982 = !DILocation(line: 477, column: 10, scope: !2980)
!2983 = !DILocation(line: 477, column: 18, scope: !2984)
!2984 = !DILexicalBlockFile(scope: !2985, file: !69, discriminator: 1)
!2985 = distinct !DILexicalBlock(scope: !2980, file: !69, line: 477, column: 5)
!2986 = !DILocation(line: 477, column: 17, scope: !2984)
!2987 = !DILocation(line: 477, column: 5, scope: !2984)
!2988 = !DILocation(line: 478, column: 17, scope: !2989)
!2989 = distinct !DILexicalBlock(scope: !2985, file: !69, line: 478, column: 13)
!2990 = !DILocation(line: 478, column: 16, scope: !2989)
!2991 = !DILocation(line: 478, column: 19, scope: !2989)
!2992 = !DILocation(line: 478, column: 26, scope: !2989)
!2993 = !DILocation(line: 478, column: 30, scope: !2994)
!2994 = !DILexicalBlockFile(scope: !2989, file: !69, discriminator: 1)
!2995 = !DILocation(line: 478, column: 29, scope: !2994)
!2996 = !DILocation(line: 478, column: 32, scope: !2994)
!2997 = !DILocation(line: 478, column: 40, scope: !2994)
!2998 = !DILocation(line: 478, column: 45, scope: !2999)
!2999 = !DILexicalBlockFile(scope: !2989, file: !69, discriminator: 2)
!3000 = !DILocation(line: 478, column: 44, scope: !2999)
!3001 = !DILocation(line: 478, column: 47, scope: !2999)
!3002 = !DILocation(line: 478, column: 54, scope: !2999)
!3003 = !DILocation(line: 478, column: 58, scope: !3004)
!3004 = !DILexicalBlockFile(scope: !2989, file: !69, discriminator: 3)
!3005 = !DILocation(line: 478, column: 57, scope: !3004)
!3006 = !DILocation(line: 478, column: 60, scope: !3004)
!3007 = !DILocation(line: 478, column: 68, scope: !3004)
!3008 = !DILocation(line: 479, column: 16, scope: !2989)
!3009 = !DILocation(line: 479, column: 15, scope: !2989)
!3010 = !DILocation(line: 479, column: 18, scope: !2989)
!3011 = !DILocation(line: 479, column: 25, scope: !2989)
!3012 = !DILocation(line: 479, column: 30, scope: !2994)
!3013 = !DILocation(line: 479, column: 29, scope: !2994)
!3014 = !DILocation(line: 479, column: 32, scope: !2994)
!3015 = !DILocation(line: 479, column: 39, scope: !2994)
!3016 = !DILocation(line: 479, column: 43, scope: !2999)
!3017 = !DILocation(line: 479, column: 42, scope: !2999)
!3018 = !DILocation(line: 479, column: 45, scope: !2999)
!3019 = !DILocation(line: 478, column: 13, scope: !3020)
!3020 = !DILexicalBlockFile(scope: !2985, file: !69, discriminator: 4)
!3021 = !DILocation(line: 480, column: 13, scope: !2989)
!3022 = !DILocation(line: 479, column: 52, scope: !3004)
!3023 = !DILocation(line: 477, column: 22, scope: !3024)
!3024 = !DILexicalBlockFile(scope: !2985, file: !69, discriminator: 2)
!3025 = !DILocation(line: 477, column: 5, scope: !3024)
!3026 = distinct !{!3026, !3027}
!3027 = !DILocation(line: 477, column: 5, scope: !2970)
!3028 = !DILocation(line: 481, column: 11, scope: !3029)
!3029 = distinct !DILexicalBlock(scope: !2970, file: !69, line: 481, column: 9)
!3030 = !DILocation(line: 481, column: 10, scope: !3029)
!3031 = !DILocation(line: 481, column: 9, scope: !2970)
!3032 = !DILocation(line: 482, column: 15, scope: !3033)
!3033 = distinct !DILexicalBlock(scope: !3029, file: !69, line: 481, column: 14)
!3034 = !DILocation(line: 482, column: 18, scope: !3033)
!3035 = !DILocation(line: 482, column: 9, scope: !3033)
!3036 = !DILocation(line: 483, column: 9, scope: !3033)
!3037 = !DILocation(line: 485, column: 16, scope: !2970)
!3038 = !DILocation(line: 485, column: 5, scope: !2970)
!3039 = !DILocation(line: 486, column: 14, scope: !3040)
!3040 = distinct !DILexicalBlock(scope: !2970, file: !69, line: 486, column: 5)
!3041 = !DILocation(line: 486, column: 12, scope: !3040)
!3042 = !DILocation(line: 486, column: 10, scope: !3040)
!3043 = !DILocation(line: 486, column: 18, scope: !3044)
!3044 = !DILexicalBlockFile(scope: !3045, file: !69, discriminator: 1)
!3045 = distinct !DILexicalBlock(scope: !3040, file: !69, line: 486, column: 5)
!3046 = !DILocation(line: 486, column: 17, scope: !3044)
!3047 = !DILocation(line: 486, column: 5, scope: !3044)
!3048 = !DILocation(line: 487, column: 14, scope: !3049)
!3049 = distinct !DILexicalBlock(scope: !3050, file: !69, line: 487, column: 13)
!3050 = distinct !DILexicalBlock(scope: !3045, file: !69, line: 486, column: 26)
!3051 = !DILocation(line: 487, column: 13, scope: !3049)
!3052 = !DILocation(line: 487, column: 16, scope: !3049)
!3053 = !DILocation(line: 487, column: 24, scope: !3049)
!3054 = !DILocation(line: 487, column: 28, scope: !3055)
!3055 = !DILexicalBlockFile(scope: !3049, file: !69, discriminator: 1)
!3056 = !DILocation(line: 487, column: 27, scope: !3055)
!3057 = !DILocation(line: 487, column: 30, scope: !3055)
!3058 = !DILocation(line: 487, column: 37, scope: !3055)
!3059 = !DILocation(line: 487, column: 41, scope: !3060)
!3060 = !DILexicalBlockFile(scope: !3049, file: !69, discriminator: 2)
!3061 = !DILocation(line: 487, column: 40, scope: !3060)
!3062 = !DILocation(line: 487, column: 43, scope: !3060)
!3063 = !DILocation(line: 487, column: 50, scope: !3060)
!3064 = !DILocation(line: 487, column: 54, scope: !3065)
!3065 = !DILexicalBlockFile(scope: !3049, file: !69, discriminator: 3)
!3066 = !DILocation(line: 487, column: 53, scope: !3065)
!3067 = !DILocation(line: 487, column: 56, scope: !3065)
!3068 = !DILocation(line: 487, column: 13, scope: !3065)
!3069 = !DILocation(line: 488, column: 21, scope: !3049)
!3070 = !DILocation(line: 488, column: 43, scope: !3049)
!3071 = !DILocation(line: 488, column: 42, scope: !3049)
!3072 = !DILocation(line: 488, column: 13, scope: !3049)
!3073 = !DILocation(line: 489, column: 19, scope: !3074)
!3074 = distinct !DILexicalBlock(scope: !3049, file: !69, line: 489, column: 18)
!3075 = !DILocation(line: 489, column: 18, scope: !3074)
!3076 = !DILocation(line: 489, column: 21, scope: !3074)
!3077 = !DILocation(line: 489, column: 27, scope: !3074)
!3078 = !DILocation(line: 489, column: 31, scope: !3079)
!3079 = !DILexicalBlockFile(scope: !3074, file: !69, discriminator: 1)
!3080 = !DILocation(line: 489, column: 30, scope: !3079)
!3081 = !DILocation(line: 489, column: 33, scope: !3079)
!3082 = !DILocation(line: 489, column: 18, scope: !3079)
!3083 = !DILocation(line: 490, column: 21, scope: !3074)
!3084 = !DILocation(line: 490, column: 46, scope: !3074)
!3085 = !DILocation(line: 490, column: 45, scope: !3074)
!3086 = !DILocation(line: 490, column: 13, scope: !3074)
!3087 = !DILocation(line: 492, column: 20, scope: !3074)
!3088 = !DILocation(line: 492, column: 19, scope: !3074)
!3089 = !DILocation(line: 492, column: 23, scope: !3074)
!3090 = !DILocation(line: 492, column: 13, scope: !3074)
!3091 = !DILocation(line: 493, column: 5, scope: !3050)
!3092 = !DILocation(line: 486, column: 22, scope: !3093)
!3093 = !DILexicalBlockFile(scope: !3045, file: !69, discriminator: 2)
!3094 = !DILocation(line: 486, column: 5, scope: !3093)
!3095 = distinct !{!3095, !3096}
!3096 = !DILocation(line: 486, column: 5, scope: !2970)
!3097 = !DILocation(line: 494, column: 16, scope: !2970)
!3098 = !DILocation(line: 494, column: 5, scope: !2970)
!3099 = !DILocation(line: 495, column: 1, scope: !2970)
!3100 = !DILocation(line: 495, column: 1, scope: !3101)
!3101 = !DILexicalBlockFile(scope: !2970, file: !69, discriminator: 1)
!3102 = distinct !DISubprogram(name: "opt_default", scope: !69, file: !69, line: 545, type: !1343, isLocal: false, isDefinition: true, scopeLine: 546, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!3103 = !DILocalVariable(name: "optctx", arg: 1, scope: !3102, file: !69, line: 545, type: !960)
!3104 = !DILocation(line: 545, column: 23, scope: !3102)
!3105 = !DILocalVariable(name: "opt", arg: 2, scope: !3102, file: !69, line: 545, type: !953)
!3106 = !DILocation(line: 545, column: 43, scope: !3102)
!3107 = !DILocalVariable(name: "arg", arg: 3, scope: !3102, file: !69, line: 545, type: !953)
!3108 = !DILocation(line: 545, column: 60, scope: !3102)
!3109 = !DILocalVariable(name: "o", scope: !3102, file: !69, line: 547, type: !3110)
!3110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3111, size: 64, align: 64)
!3111 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3112)
!3112 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVOption", file: !4, line: 301, baseType: !964)
!3113 = !DILocation(line: 547, column: 21, scope: !3102)
!3114 = !DILocalVariable(name: "consumed", scope: !3102, file: !69, line: 548, type: !969)
!3115 = !DILocation(line: 548, column: 9, scope: !3102)
!3116 = !DILocalVariable(name: "opt_stripped", scope: !3102, file: !69, line: 549, type: !3117)
!3117 = !DICompositeType(tag: DW_TAG_array_type, baseType: !955, size: 1024, align: 8, elements: !3118)
!3118 = !{!3119}
!3119 = !DISubrange(count: 128)
!3120 = !DILocation(line: 549, column: 10, scope: !3102)
!3121 = !DILocalVariable(name: "p", scope: !3102, file: !69, line: 550, type: !953)
!3122 = !DILocation(line: 550, column: 17, scope: !3102)
!3123 = !DILocalVariable(name: "cc", scope: !3102, file: !69, line: 551, type: !947)
!3124 = !DILocation(line: 551, column: 20, scope: !3102)
!3125 = !DILocation(line: 551, column: 25, scope: !3102)
!3126 = !DILocalVariable(name: "fc", scope: !3102, file: !69, line: 551, type: !947)
!3127 = !DILocation(line: 551, column: 47, scope: !3102)
!3128 = !DILocation(line: 551, column: 52, scope: !3129)
!3129 = !DILexicalBlockFile(scope: !3102, file: !69, discriminator: 1)
!3130 = !DILocalVariable(name: "sc", scope: !3102, file: !69, line: 556, type: !947)
!3131 = !DILocation(line: 556, column: 20, scope: !3102)
!3132 = !DILocation(line: 556, column: 25, scope: !3102)
!3133 = !DILocalVariable(name: "swr_class", scope: !3102, file: !69, line: 559, type: !947)
!3134 = !DILocation(line: 559, column: 20, scope: !3102)
!3135 = !DILocation(line: 559, column: 32, scope: !3102)
!3136 = !DILocation(line: 562, column: 17, scope: !3137)
!3137 = distinct !DILexicalBlock(scope: !3102, file: !69, line: 562, column: 9)
!3138 = !DILocation(line: 562, column: 10, scope: !3137)
!3139 = !DILocation(line: 562, column: 31, scope: !3137)
!3140 = !DILocation(line: 562, column: 42, scope: !3141)
!3141 = !DILexicalBlockFile(scope: !3137, file: !69, discriminator: 1)
!3142 = !DILocation(line: 562, column: 35, scope: !3141)
!3143 = !DILocation(line: 562, column: 9, scope: !3141)
!3144 = !DILocation(line: 563, column: 9, scope: !3137)
!3145 = !DILocation(line: 565, column: 22, scope: !3146)
!3146 = distinct !DILexicalBlock(scope: !3102, file: !69, line: 565, column: 9)
!3147 = !DILocation(line: 565, column: 15, scope: !3146)
!3148 = !DILocation(line: 565, column: 13, scope: !3146)
!3149 = !DILocation(line: 565, column: 9, scope: !3102)
!3150 = !DILocation(line: 566, column: 13, scope: !3146)
!3151 = !DILocation(line: 566, column: 26, scope: !3146)
!3152 = !DILocation(line: 566, column: 19, scope: !3146)
!3153 = !DILocation(line: 566, column: 17, scope: !3146)
!3154 = !DILocation(line: 566, column: 11, scope: !3146)
!3155 = !DILocation(line: 566, column: 9, scope: !3146)
!3156 = !DILocation(line: 567, column: 16, scope: !3102)
!3157 = !DILocation(line: 567, column: 30, scope: !3102)
!3158 = !DILocation(line: 567, column: 62, scope: !3102)
!3159 = !DILocation(line: 567, column: 66, scope: !3102)
!3160 = !DILocation(line: 567, column: 64, scope: !3102)
!3161 = !DILocation(line: 567, column: 70, scope: !3102)
!3162 = !DILocation(line: 567, column: 59, scope: !3102)
!3163 = !DILocation(line: 567, column: 36, scope: !3102)
!3164 = !DILocation(line: 567, column: 78, scope: !3129)
!3165 = !DILocation(line: 567, column: 82, scope: !3129)
!3166 = !DILocation(line: 567, column: 80, scope: !3129)
!3167 = !DILocation(line: 567, column: 86, scope: !3129)
!3168 = !DILocation(line: 567, column: 36, scope: !3129)
!3169 = !DILocation(line: 567, column: 36, scope: !3170)
!3170 = !DILexicalBlockFile(scope: !3102, file: !69, discriminator: 2)
!3171 = !DILocation(line: 567, column: 36, scope: !3172)
!3172 = !DILexicalBlockFile(scope: !3102, file: !69, discriminator: 3)
!3173 = !DILocation(line: 567, column: 5, scope: !3172)
!3174 = !DILocation(line: 569, column: 23, scope: !3175)
!3175 = distinct !DILexicalBlock(scope: !3102, file: !69, line: 569, column: 9)
!3176 = !DILocation(line: 569, column: 28, scope: !3175)
!3177 = !DILocation(line: 569, column: 14, scope: !3175)
!3178 = !DILocation(line: 569, column: 12, scope: !3175)
!3179 = !DILocation(line: 570, column: 48, scope: !3175)
!3180 = !DILocation(line: 571, column: 11, scope: !3175)
!3181 = !DILocation(line: 571, column: 18, scope: !3175)
!3182 = !DILocation(line: 571, column: 25, scope: !3175)
!3183 = !DILocation(line: 571, column: 28, scope: !3184)
!3184 = !DILexicalBlockFile(scope: !3175, file: !69, discriminator: 1)
!3185 = !DILocation(line: 571, column: 35, scope: !3184)
!3186 = !DILocation(line: 571, column: 42, scope: !3184)
!3187 = !DILocation(line: 571, column: 45, scope: !3188)
!3188 = !DILexicalBlockFile(scope: !3175, file: !69, discriminator: 2)
!3189 = !DILocation(line: 571, column: 52, scope: !3188)
!3190 = !DILocation(line: 571, column: 60, scope: !3188)
!3191 = !DILocation(line: 572, column: 24, scope: !3175)
!3192 = !DILocation(line: 572, column: 29, scope: !3175)
!3193 = !DILocation(line: 572, column: 33, scope: !3175)
!3194 = !DILocation(line: 572, column: 15, scope: !3175)
!3195 = !DILocation(line: 572, column: 13, scope: !3175)
!3196 = !DILocation(line: 569, column: 9, scope: !3129)
!3197 = !DILocation(line: 573, column: 34, scope: !3198)
!3198 = distinct !DILexicalBlock(scope: !3175, file: !69, line: 572, column: 59)
!3199 = !DILocation(line: 573, column: 39, scope: !3198)
!3200 = !DILocation(line: 573, column: 45, scope: !3198)
!3201 = !DILocation(line: 573, column: 48, scope: !3198)
!3202 = !DILocation(line: 573, column: 53, scope: !3198)
!3203 = !DILocation(line: 573, column: 74, scope: !3198)
!3204 = !DILocation(line: 573, column: 78, scope: !3205)
!3205 = !DILexicalBlockFile(scope: !3198, file: !69, discriminator: 1)
!3206 = !DILocation(line: 573, column: 84, scope: !3205)
!3207 = !DILocation(line: 573, column: 90, scope: !3205)
!3208 = !DILocation(line: 573, column: 93, scope: !3209)
!3209 = !DILexicalBlockFile(scope: !3198, file: !69, discriminator: 2)
!3210 = !DILocation(line: 573, column: 99, scope: !3209)
!3211 = !DILocation(line: 573, column: 90, scope: !3209)
!3212 = !DILocation(line: 573, column: 44, scope: !3213)
!3213 = !DILexicalBlockFile(scope: !3198, file: !69, discriminator: 3)
!3214 = !DILocation(line: 573, column: 9, scope: !3213)
!3215 = !DILocation(line: 574, column: 18, scope: !3198)
!3216 = !DILocation(line: 575, column: 5, scope: !3198)
!3217 = !DILocation(line: 576, column: 23, scope: !3218)
!3218 = distinct !DILexicalBlock(scope: !3102, file: !69, line: 576, column: 9)
!3219 = !DILocation(line: 576, column: 28, scope: !3218)
!3220 = !DILocation(line: 576, column: 14, scope: !3218)
!3221 = !DILocation(line: 576, column: 12, scope: !3218)
!3222 = !DILocation(line: 576, column: 9, scope: !3102)
!3223 = !DILocation(line: 578, column: 35, scope: !3224)
!3224 = distinct !DILexicalBlock(scope: !3218, file: !69, line: 577, column: 49)
!3225 = !DILocation(line: 578, column: 40, scope: !3224)
!3226 = !DILocation(line: 578, column: 46, scope: !3224)
!3227 = !DILocation(line: 578, column: 49, scope: !3224)
!3228 = !DILocation(line: 578, column: 54, scope: !3224)
!3229 = !DILocation(line: 578, column: 75, scope: !3224)
!3230 = !DILocation(line: 578, column: 79, scope: !3231)
!3231 = !DILexicalBlockFile(scope: !3224, file: !69, discriminator: 1)
!3232 = !DILocation(line: 578, column: 85, scope: !3231)
!3233 = !DILocation(line: 578, column: 91, scope: !3231)
!3234 = !DILocation(line: 578, column: 94, scope: !3235)
!3235 = !DILexicalBlockFile(scope: !3224, file: !69, discriminator: 2)
!3236 = !DILocation(line: 578, column: 100, scope: !3235)
!3237 = !DILocation(line: 578, column: 91, scope: !3235)
!3238 = !DILocation(line: 578, column: 45, scope: !3239)
!3239 = !DILexicalBlockFile(scope: !3224, file: !69, discriminator: 3)
!3240 = !DILocation(line: 578, column: 9, scope: !3239)
!3241 = !DILocation(line: 579, column: 13, scope: !3242)
!3242 = distinct !DILexicalBlock(scope: !3224, file: !69, line: 579, column: 13)
!3243 = !DILocation(line: 579, column: 13, scope: !3224)
!3244 = !DILocation(line: 580, column: 82, scope: !3242)
!3245 = !DILocation(line: 580, column: 13, scope: !3242)
!3246 = !DILocation(line: 581, column: 18, scope: !3224)
!3247 = !DILocation(line: 582, column: 5, scope: !3224)
!3248 = !DILocation(line: 584, column: 10, scope: !3249)
!3249 = distinct !DILexicalBlock(scope: !3102, file: !69, line: 584, column: 9)
!3250 = !DILocation(line: 584, column: 19, scope: !3249)
!3251 = !DILocation(line: 584, column: 36, scope: !3252)
!3252 = !DILexicalBlockFile(scope: !3249, file: !69, discriminator: 1)
!3253 = !DILocation(line: 584, column: 41, scope: !3252)
!3254 = !DILocation(line: 584, column: 27, scope: !3252)
!3255 = !DILocation(line: 584, column: 25, scope: !3252)
!3256 = !DILocation(line: 584, column: 9, scope: !3252)
!3257 = !DILocalVariable(name: "sws", scope: !3258, file: !69, line: 586, type: !3259)
!3258 = distinct !DILexicalBlock(scope: !3249, file: !69, line: 585, column: 49)
!3259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3260, size: 64, align: 64)
!3260 = !DICompositeType(tag: DW_TAG_structure_type, name: "SwsContext", file: !3261, line: 122, flags: DIFlagFwdDecl)
!3261 = !DIFile(filename: "./libswscale/swscale.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!3262 = !DILocation(line: 586, column: 28, scope: !3258)
!3263 = !DILocation(line: 586, column: 34, scope: !3258)
!3264 = !DILocalVariable(name: "ret", scope: !3258, file: !69, line: 587, type: !969)
!3265 = !DILocation(line: 587, column: 13, scope: !3258)
!3266 = !DILocation(line: 587, column: 30, scope: !3258)
!3267 = !DILocation(line: 587, column: 35, scope: !3258)
!3268 = !DILocation(line: 587, column: 40, scope: !3258)
!3269 = !DILocation(line: 587, column: 19, scope: !3258)
!3270 = !DILocation(line: 588, column: 25, scope: !3258)
!3271 = !DILocation(line: 588, column: 9, scope: !3258)
!3272 = !DILocation(line: 589, column: 21, scope: !3273)
!3273 = distinct !DILexicalBlock(scope: !3258, file: !69, line: 589, column: 13)
!3274 = !DILocation(line: 589, column: 14, scope: !3273)
!3275 = !DILocation(line: 589, column: 34, scope: !3273)
!3276 = !DILocation(line: 589, column: 45, scope: !3277)
!3277 = !DILexicalBlockFile(scope: !3273, file: !69, discriminator: 1)
!3278 = !DILocation(line: 589, column: 38, scope: !3277)
!3279 = !DILocation(line: 589, column: 58, scope: !3277)
!3280 = !DILocation(line: 590, column: 21, scope: !3273)
!3281 = !DILocation(line: 590, column: 14, scope: !3273)
!3282 = !DILocation(line: 590, column: 34, scope: !3273)
!3283 = !DILocation(line: 590, column: 45, scope: !3277)
!3284 = !DILocation(line: 590, column: 38, scope: !3277)
!3285 = !DILocation(line: 590, column: 58, scope: !3277)
!3286 = !DILocation(line: 591, column: 21, scope: !3273)
!3287 = !DILocation(line: 591, column: 14, scope: !3273)
!3288 = !DILocation(line: 591, column: 40, scope: !3273)
!3289 = !DILocation(line: 591, column: 51, scope: !3277)
!3290 = !DILocation(line: 591, column: 44, scope: !3277)
!3291 = !DILocation(line: 589, column: 13, scope: !3292)
!3292 = !DILexicalBlockFile(scope: !3258, file: !69, discriminator: 2)
!3293 = !DILocation(line: 592, column: 13, scope: !3294)
!3294 = distinct !DILexicalBlock(scope: !3273, file: !69, line: 591, column: 71)
!3295 = !DILocation(line: 593, column: 13, scope: !3294)
!3296 = !DILocation(line: 595, column: 13, scope: !3297)
!3297 = distinct !DILexicalBlock(scope: !3258, file: !69, line: 595, column: 13)
!3298 = !DILocation(line: 595, column: 17, scope: !3297)
!3299 = !DILocation(line: 595, column: 13, scope: !3258)
!3300 = !DILocation(line: 596, column: 59, scope: !3301)
!3301 = distinct !DILexicalBlock(scope: !3297, file: !69, line: 595, column: 22)
!3302 = !DILocation(line: 596, column: 13, scope: !3301)
!3303 = !DILocation(line: 597, column: 20, scope: !3301)
!3304 = !DILocation(line: 597, column: 13, scope: !3301)
!3305 = !DILocation(line: 600, column: 32, scope: !3258)
!3306 = !DILocation(line: 600, column: 37, scope: !3258)
!3307 = !DILocation(line: 600, column: 43, scope: !3258)
!3308 = !DILocation(line: 600, column: 46, scope: !3258)
!3309 = !DILocation(line: 600, column: 51, scope: !3258)
!3310 = !DILocation(line: 600, column: 72, scope: !3258)
!3311 = !DILocation(line: 600, column: 76, scope: !3312)
!3312 = !DILexicalBlockFile(scope: !3258, file: !69, discriminator: 1)
!3313 = !DILocation(line: 600, column: 82, scope: !3312)
!3314 = !DILocation(line: 600, column: 88, scope: !3312)
!3315 = !DILocation(line: 600, column: 91, scope: !3292)
!3316 = !DILocation(line: 600, column: 97, scope: !3292)
!3317 = !DILocation(line: 600, column: 88, scope: !3292)
!3318 = !DILocation(line: 600, column: 42, scope: !3319)
!3319 = !DILexicalBlockFile(scope: !3258, file: !69, discriminator: 3)
!3320 = !DILocation(line: 600, column: 9, scope: !3319)
!3321 = !DILocation(line: 602, column: 18, scope: !3258)
!3322 = !DILocation(line: 603, column: 5, scope: !3258)
!3323 = !DILocation(line: 611, column: 10, scope: !3324)
!3324 = distinct !DILexicalBlock(scope: !3102, file: !69, line: 611, column: 9)
!3325 = !DILocation(line: 611, column: 19, scope: !3324)
!3326 = !DILocation(line: 611, column: 34, scope: !3327)
!3327 = !DILexicalBlockFile(scope: !3324, file: !69, discriminator: 1)
!3328 = !DILocation(line: 611, column: 46, scope: !3327)
!3329 = !DILocation(line: 611, column: 25, scope: !3327)
!3330 = !DILocation(line: 611, column: 24, scope: !3327)
!3331 = !DILocation(line: 611, column: 9, scope: !3327)
!3332 = !DILocalVariable(name: "swr", scope: !3333, file: !69, line: 613, type: !3334)
!3333 = distinct !DILexicalBlock(scope: !3324, file: !69, line: 612, column: 60)
!3334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3335, size: 64, align: 64)
!3335 = !DICompositeType(tag: DW_TAG_structure_type, name: "SwrContext", file: !3336, line: 182, flags: DIFlagFwdDecl)
!3336 = !DIFile(filename: "./libswresample/swresample.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!3337 = !DILocation(line: 613, column: 28, scope: !3333)
!3338 = !DILocation(line: 613, column: 34, scope: !3333)
!3339 = !DILocalVariable(name: "ret", scope: !3333, file: !69, line: 614, type: !969)
!3340 = !DILocation(line: 614, column: 13, scope: !3333)
!3341 = !DILocation(line: 614, column: 30, scope: !3333)
!3342 = !DILocation(line: 614, column: 35, scope: !3333)
!3343 = !DILocation(line: 614, column: 40, scope: !3333)
!3344 = !DILocation(line: 614, column: 19, scope: !3333)
!3345 = !DILocation(line: 615, column: 9, scope: !3333)
!3346 = !DILocation(line: 616, column: 13, scope: !3347)
!3347 = distinct !DILexicalBlock(scope: !3333, file: !69, line: 616, column: 13)
!3348 = !DILocation(line: 616, column: 17, scope: !3347)
!3349 = !DILocation(line: 616, column: 13, scope: !3333)
!3350 = !DILocation(line: 617, column: 59, scope: !3351)
!3351 = distinct !DILexicalBlock(scope: !3347, file: !69, line: 616, column: 22)
!3352 = !DILocation(line: 617, column: 13, scope: !3351)
!3353 = !DILocation(line: 618, column: 20, scope: !3351)
!3354 = !DILocation(line: 618, column: 13, scope: !3351)
!3355 = !DILocation(line: 620, column: 32, scope: !3333)
!3356 = !DILocation(line: 620, column: 37, scope: !3333)
!3357 = !DILocation(line: 620, column: 43, scope: !3333)
!3358 = !DILocation(line: 620, column: 46, scope: !3333)
!3359 = !DILocation(line: 620, column: 51, scope: !3333)
!3360 = !DILocation(line: 620, column: 72, scope: !3333)
!3361 = !DILocation(line: 620, column: 76, scope: !3362)
!3362 = !DILexicalBlockFile(scope: !3333, file: !69, discriminator: 1)
!3363 = !DILocation(line: 620, column: 82, scope: !3362)
!3364 = !DILocation(line: 620, column: 88, scope: !3362)
!3365 = !DILocation(line: 620, column: 91, scope: !3366)
!3366 = !DILexicalBlockFile(scope: !3333, file: !69, discriminator: 2)
!3367 = !DILocation(line: 620, column: 97, scope: !3366)
!3368 = !DILocation(line: 620, column: 88, scope: !3366)
!3369 = !DILocation(line: 620, column: 42, scope: !3370)
!3370 = !DILexicalBlockFile(scope: !3333, file: !69, discriminator: 3)
!3371 = !DILocation(line: 620, column: 9, scope: !3370)
!3372 = !DILocation(line: 621, column: 18, scope: !3333)
!3373 = !DILocation(line: 622, column: 5, scope: !3333)
!3374 = !DILocation(line: 632, column: 9, scope: !3375)
!3375 = distinct !DILexicalBlock(scope: !3102, file: !69, line: 632, column: 9)
!3376 = !DILocation(line: 632, column: 9, scope: !3102)
!3377 = !DILocation(line: 633, column: 9, scope: !3375)
!3378 = !DILocation(line: 634, column: 5, scope: !3102)
!3379 = !DILocation(line: 635, column: 1, scope: !3102)
!3380 = distinct !DISubprogram(name: "opt_find", scope: !69, file: !69, line: 535, type: !3381, isLocal: true, isDefinition: true, scopeLine: 537, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!3381 = !DISubroutineType(types: !3382)
!3382 = !{!3110, !960, !953, !953, !969, !969}
!3383 = !DILocalVariable(name: "obj", arg: 1, scope: !3380, file: !69, line: 535, type: !960)
!3384 = !DILocation(line: 535, column: 39, scope: !3380)
!3385 = !DILocalVariable(name: "name", arg: 2, scope: !3380, file: !69, line: 535, type: !953)
!3386 = !DILocation(line: 535, column: 56, scope: !3380)
!3387 = !DILocalVariable(name: "unit", arg: 3, scope: !3380, file: !69, line: 535, type: !953)
!3388 = !DILocation(line: 535, column: 74, scope: !3380)
!3389 = !DILocalVariable(name: "opt_flags", arg: 4, scope: !3380, file: !69, line: 536, type: !969)
!3390 = !DILocation(line: 536, column: 33, scope: !3380)
!3391 = !DILocalVariable(name: "search_flags", arg: 5, scope: !3380, file: !69, line: 536, type: !969)
!3392 = !DILocation(line: 536, column: 48, scope: !3380)
!3393 = !DILocalVariable(name: "o", scope: !3380, file: !69, line: 538, type: !3110)
!3394 = !DILocation(line: 538, column: 21, scope: !3380)
!3395 = !DILocation(line: 538, column: 37, scope: !3380)
!3396 = !DILocation(line: 538, column: 42, scope: !3380)
!3397 = !DILocation(line: 538, column: 48, scope: !3380)
!3398 = !DILocation(line: 538, column: 54, scope: !3380)
!3399 = !DILocation(line: 538, column: 65, scope: !3380)
!3400 = !DILocation(line: 538, column: 25, scope: !3380)
!3401 = !DILocation(line: 539, column: 8, scope: !3402)
!3402 = distinct !DILexicalBlock(scope: !3380, file: !69, line: 539, column: 8)
!3403 = !DILocation(line: 539, column: 10, scope: !3402)
!3404 = !DILocation(line: 539, column: 14, scope: !3405)
!3405 = !DILexicalBlockFile(scope: !3402, file: !69, discriminator: 1)
!3406 = !DILocation(line: 539, column: 17, scope: !3405)
!3407 = !DILocation(line: 539, column: 8, scope: !3405)
!3408 = !DILocation(line: 540, column: 9, scope: !3402)
!3409 = !DILocation(line: 541, column: 12, scope: !3380)
!3410 = !DILocation(line: 541, column: 5, scope: !3380)
!3411 = !DILocation(line: 542, column: 1, scope: !3380)
!3412 = distinct !DISubprogram(name: "uninit_parse_context", scope: !69, file: !69, line: 727, type: !3413, isLocal: false, isDefinition: true, scopeLine: 728, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!3413 = !DISubroutineType(types: !3414)
!3414 = !{null, !1422}
!3415 = !DILocalVariable(name: "octx", arg: 1, scope: !3412, file: !69, line: 727, type: !1422)
!3416 = !DILocation(line: 727, column: 47, scope: !3412)
!3417 = !DILocalVariable(name: "i", scope: !3412, file: !69, line: 729, type: !969)
!3418 = !DILocation(line: 729, column: 9, scope: !3412)
!3419 = !DILocalVariable(name: "j", scope: !3412, file: !69, line: 729, type: !969)
!3420 = !DILocation(line: 729, column: 12, scope: !3412)
!3421 = !DILocation(line: 731, column: 12, scope: !3422)
!3422 = distinct !DILexicalBlock(scope: !3412, file: !69, line: 731, column: 5)
!3423 = !DILocation(line: 731, column: 10, scope: !3422)
!3424 = !DILocation(line: 731, column: 17, scope: !3425)
!3425 = !DILexicalBlockFile(scope: !3426, file: !69, discriminator: 1)
!3426 = distinct !DILexicalBlock(scope: !3422, file: !69, line: 731, column: 5)
!3427 = !DILocation(line: 731, column: 21, scope: !3425)
!3428 = !DILocation(line: 731, column: 27, scope: !3425)
!3429 = !DILocation(line: 731, column: 19, scope: !3425)
!3430 = !DILocation(line: 731, column: 5, scope: !3425)
!3431 = !DILocalVariable(name: "l", scope: !3432, file: !69, line: 732, type: !1472)
!3432 = distinct !DILexicalBlock(scope: !3426, file: !69, line: 731, column: 43)
!3433 = !DILocation(line: 732, column: 26, scope: !3432)
!3434 = !DILocation(line: 732, column: 44, scope: !3432)
!3435 = !DILocation(line: 732, column: 31, scope: !3432)
!3436 = !DILocation(line: 732, column: 37, scope: !3432)
!3437 = !DILocation(line: 734, column: 16, scope: !3438)
!3438 = distinct !DILexicalBlock(scope: !3432, file: !69, line: 734, column: 9)
!3439 = !DILocation(line: 734, column: 14, scope: !3438)
!3440 = !DILocation(line: 734, column: 21, scope: !3441)
!3441 = !DILexicalBlockFile(scope: !3442, file: !69, discriminator: 1)
!3442 = distinct !DILexicalBlock(scope: !3438, file: !69, line: 734, column: 9)
!3443 = !DILocation(line: 734, column: 25, scope: !3441)
!3444 = !DILocation(line: 734, column: 28, scope: !3441)
!3445 = !DILocation(line: 734, column: 23, scope: !3441)
!3446 = !DILocation(line: 734, column: 9, scope: !3441)
!3447 = !DILocation(line: 735, column: 33, scope: !3448)
!3448 = distinct !DILexicalBlock(scope: !3442, file: !69, line: 734, column: 44)
!3449 = !DILocation(line: 735, column: 23, scope: !3448)
!3450 = !DILocation(line: 735, column: 26, scope: !3448)
!3451 = !DILocation(line: 735, column: 36, scope: !3448)
!3452 = !DILocation(line: 735, column: 22, scope: !3448)
!3453 = !DILocation(line: 735, column: 13, scope: !3448)
!3454 = !DILocation(line: 736, column: 37, scope: !3448)
!3455 = !DILocation(line: 736, column: 27, scope: !3448)
!3456 = !DILocation(line: 736, column: 30, scope: !3448)
!3457 = !DILocation(line: 736, column: 40, scope: !3448)
!3458 = !DILocation(line: 736, column: 13, scope: !3448)
!3459 = !DILocation(line: 737, column: 37, scope: !3448)
!3460 = !DILocation(line: 737, column: 27, scope: !3448)
!3461 = !DILocation(line: 737, column: 30, scope: !3448)
!3462 = !DILocation(line: 737, column: 40, scope: !3448)
!3463 = !DILocation(line: 737, column: 13, scope: !3448)
!3464 = !DILocation(line: 738, column: 37, scope: !3448)
!3465 = !DILocation(line: 738, column: 27, scope: !3448)
!3466 = !DILocation(line: 738, column: 30, scope: !3448)
!3467 = !DILocation(line: 738, column: 40, scope: !3448)
!3468 = !DILocation(line: 738, column: 13, scope: !3448)
!3469 = !DILocation(line: 740, column: 37, scope: !3448)
!3470 = !DILocation(line: 740, column: 27, scope: !3448)
!3471 = !DILocation(line: 740, column: 30, scope: !3448)
!3472 = !DILocation(line: 740, column: 40, scope: !3448)
!3473 = !DILocation(line: 740, column: 13, scope: !3448)
!3474 = !DILocation(line: 741, column: 37, scope: !3448)
!3475 = !DILocation(line: 741, column: 27, scope: !3448)
!3476 = !DILocation(line: 741, column: 30, scope: !3448)
!3477 = !DILocation(line: 741, column: 40, scope: !3448)
!3478 = !DILocation(line: 741, column: 13, scope: !3448)
!3479 = !DILocation(line: 742, column: 9, scope: !3448)
!3480 = !DILocation(line: 734, column: 40, scope: !3481)
!3481 = !DILexicalBlockFile(scope: !3442, file: !69, discriminator: 2)
!3482 = !DILocation(line: 734, column: 9, scope: !3481)
!3483 = distinct !{!3483, !3484}
!3484 = !DILocation(line: 734, column: 9, scope: !3432)
!3485 = !DILocation(line: 743, column: 19, scope: !3432)
!3486 = !DILocation(line: 743, column: 22, scope: !3432)
!3487 = !DILocation(line: 743, column: 18, scope: !3432)
!3488 = !DILocation(line: 743, column: 9, scope: !3432)
!3489 = !DILocation(line: 744, column: 5, scope: !3432)
!3490 = !DILocation(line: 731, column: 39, scope: !3491)
!3491 = !DILexicalBlockFile(scope: !3426, file: !69, discriminator: 2)
!3492 = !DILocation(line: 731, column: 5, scope: !3491)
!3493 = distinct !{!3493, !3494}
!3494 = !DILocation(line: 731, column: 5, scope: !3412)
!3495 = !DILocation(line: 745, column: 15, scope: !3412)
!3496 = !DILocation(line: 745, column: 21, scope: !3412)
!3497 = !DILocation(line: 745, column: 14, scope: !3412)
!3498 = !DILocation(line: 745, column: 5, scope: !3412)
!3499 = !DILocation(line: 747, column: 15, scope: !3412)
!3500 = !DILocation(line: 747, column: 21, scope: !3412)
!3501 = !DILocation(line: 747, column: 31, scope: !3412)
!3502 = !DILocation(line: 747, column: 14, scope: !3412)
!3503 = !DILocation(line: 747, column: 5, scope: !3412)
!3504 = !DILocation(line: 748, column: 15, scope: !3412)
!3505 = !DILocation(line: 748, column: 21, scope: !3412)
!3506 = !DILocation(line: 748, column: 33, scope: !3412)
!3507 = !DILocation(line: 748, column: 14, scope: !3412)
!3508 = !DILocation(line: 748, column: 5, scope: !3412)
!3509 = !DILocation(line: 750, column: 5, scope: !3412)
!3510 = !DILocation(line: 751, column: 1, scope: !3412)
!3511 = distinct !DISubprogram(name: "split_commandline", scope: !69, file: !69, line: 753, type: !3512, isLocal: false, isDefinition: true, scopeLine: 756, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!3512 = !DISubroutineType(types: !3513)
!3513 = !{!969, !1422, !969, !1334, !1447, !1432, !969}
!3514 = !DILocalVariable(name: "octx", arg: 1, scope: !3511, file: !69, line: 753, type: !1422)
!3515 = !DILocation(line: 753, column: 43, scope: !3511)
!3516 = !DILocalVariable(name: "argc", arg: 2, scope: !3511, file: !69, line: 753, type: !969)
!3517 = !DILocation(line: 753, column: 53, scope: !3511)
!3518 = !DILocalVariable(name: "argv", arg: 3, scope: !3511, file: !69, line: 753, type: !1334)
!3519 = !DILocation(line: 753, column: 65, scope: !3511)
!3520 = !DILocalVariable(name: "options", arg: 4, scope: !3511, file: !69, line: 754, type: !1447)
!3521 = !DILocation(line: 754, column: 40, scope: !3511)
!3522 = !DILocalVariable(name: "groups", arg: 5, scope: !3511, file: !69, line: 755, type: !1432)
!3523 = !DILocation(line: 755, column: 45, scope: !3511)
!3524 = !DILocalVariable(name: "nb_groups", arg: 6, scope: !3511, file: !69, line: 755, type: !969)
!3525 = !DILocation(line: 755, column: 57, scope: !3511)
!3526 = !DILocalVariable(name: "optindex", scope: !3511, file: !69, line: 757, type: !969)
!3527 = !DILocation(line: 757, column: 9, scope: !3511)
!3528 = !DILocalVariable(name: "dashdash", scope: !3511, file: !69, line: 758, type: !969)
!3529 = !DILocation(line: 758, column: 9, scope: !3511)
!3530 = !DILocation(line: 761, column: 5, scope: !3511)
!3531 = !DILocation(line: 763, column: 24, scope: !3511)
!3532 = !DILocation(line: 763, column: 30, scope: !3511)
!3533 = !DILocation(line: 763, column: 38, scope: !3511)
!3534 = !DILocation(line: 763, column: 5, scope: !3511)
!3535 = !DILocation(line: 764, column: 5, scope: !3511)
!3536 = !DILocation(line: 766, column: 5, scope: !3511)
!3537 = !DILocation(line: 766, column: 12, scope: !3538)
!3538 = !DILexicalBlockFile(scope: !3511, file: !69, discriminator: 1)
!3539 = !DILocation(line: 766, column: 23, scope: !3538)
!3540 = !DILocation(line: 766, column: 21, scope: !3538)
!3541 = !DILocation(line: 766, column: 5, scope: !3538)
!3542 = !DILocalVariable(name: "opt", scope: !3543, file: !69, line: 767, type: !953)
!3543 = distinct !DILexicalBlock(scope: !3511, file: !69, line: 766, column: 29)
!3544 = !DILocation(line: 767, column: 21, scope: !3543)
!3545 = !DILocation(line: 767, column: 40, scope: !3543)
!3546 = !DILocation(line: 767, column: 27, scope: !3543)
!3547 = !DILocalVariable(name: "arg", scope: !3543, file: !69, line: 767, type: !953)
!3548 = !DILocation(line: 767, column: 46, scope: !3543)
!3549 = !DILocalVariable(name: "po", scope: !3543, file: !69, line: 768, type: !1447)
!3550 = !DILocation(line: 768, column: 26, scope: !3543)
!3551 = !DILocalVariable(name: "ret", scope: !3543, file: !69, line: 769, type: !969)
!3552 = !DILocation(line: 769, column: 13, scope: !3543)
!3553 = !DILocation(line: 771, column: 52, scope: !3543)
!3554 = !DILocation(line: 771, column: 9, scope: !3543)
!3555 = !DILocation(line: 773, column: 13, scope: !3556)
!3556 = distinct !DILexicalBlock(scope: !3543, file: !69, line: 773, column: 13)
!3557 = !DILocation(line: 773, column: 20, scope: !3556)
!3558 = !DILocation(line: 773, column: 27, scope: !3556)
!3559 = !DILocation(line: 773, column: 30, scope: !3560)
!3560 = !DILexicalBlockFile(scope: !3556, file: !69, discriminator: 1)
!3561 = !DILocation(line: 773, column: 37, scope: !3560)
!3562 = !DILocation(line: 773, column: 44, scope: !3560)
!3563 = !DILocation(line: 773, column: 48, scope: !3564)
!3564 = !DILexicalBlockFile(scope: !3556, file: !69, discriminator: 2)
!3565 = !DILocation(line: 773, column: 13, scope: !3564)
!3566 = !DILocation(line: 774, column: 24, scope: !3567)
!3567 = distinct !DILexicalBlock(scope: !3556, file: !69, line: 773, column: 56)
!3568 = !DILocation(line: 774, column: 22, scope: !3567)
!3569 = !DILocation(line: 775, column: 13, scope: !3567)
!3570 = distinct !{!3570, !3536}
!3571 = !DILocation(line: 778, column: 13, scope: !3572)
!3572 = distinct !DILexicalBlock(scope: !3543, file: !69, line: 778, column: 13)
!3573 = !DILocation(line: 778, column: 20, scope: !3572)
!3574 = !DILocation(line: 778, column: 27, scope: !3572)
!3575 = !DILocation(line: 778, column: 31, scope: !3576)
!3576 = !DILexicalBlockFile(scope: !3572, file: !69, discriminator: 1)
!3577 = !DILocation(line: 778, column: 38, scope: !3576)
!3578 = !DILocation(line: 778, column: 41, scope: !3579)
!3579 = !DILexicalBlockFile(scope: !3572, file: !69, discriminator: 2)
!3580 = !DILocation(line: 778, column: 49, scope: !3579)
!3581 = !DILocation(line: 778, column: 55, scope: !3579)
!3582 = !DILocation(line: 778, column: 52, scope: !3579)
!3583 = !DILocation(line: 778, column: 13, scope: !3579)
!3584 = !DILocation(line: 779, column: 26, scope: !3585)
!3585 = distinct !DILexicalBlock(scope: !3572, file: !69, line: 778, column: 65)
!3586 = !DILocation(line: 779, column: 35, scope: !3585)
!3587 = !DILocation(line: 779, column: 13, scope: !3585)
!3588 = !DILocation(line: 780, column: 50, scope: !3585)
!3589 = !DILocation(line: 780, column: 60, scope: !3585)
!3590 = !DILocation(line: 780, column: 13, scope: !3585)
!3591 = !DILocation(line: 781, column: 13, scope: !3585)
!3592 = !DILocation(line: 783, column: 12, scope: !3543)
!3593 = !DILocation(line: 795, column: 42, scope: !3594)
!3594 = distinct !DILexicalBlock(scope: !3543, file: !69, line: 795, column: 13)
!3595 = !DILocation(line: 795, column: 50, scope: !3594)
!3596 = !DILocation(line: 795, column: 61, scope: !3594)
!3597 = !DILocation(line: 795, column: 20, scope: !3594)
!3598 = !DILocation(line: 795, column: 18, scope: !3594)
!3599 = !DILocation(line: 795, column: 67, scope: !3594)
!3600 = !DILocation(line: 795, column: 13, scope: !3543)
!3601 = !DILocation(line: 796, column: 13, scope: !3602)
!3602 = distinct !DILexicalBlock(scope: !3594, file: !69, line: 795, column: 73)
!3603 = distinct !{!3603, !3601}
!3604 = !DILocation(line: 796, column: 37, scope: !3605)
!3605 = !DILexicalBlockFile(scope: !3606, file: !69, discriminator: 1)
!3606 = distinct !DILexicalBlock(scope: !3602, file: !69, line: 796, column: 16)
!3607 = !DILocation(line: 796, column: 24, scope: !3605)
!3608 = !DILocation(line: 796, column: 22, scope: !3605)
!3609 = !DILocation(line: 796, column: 47, scope: !3605)
!3610 = !DILocation(line: 796, column: 46, scope: !3605)
!3611 = !DILocation(line: 796, column: 57, scope: !3612)
!3612 = !DILexicalBlockFile(scope: !3613, file: !69, discriminator: 2)
!3613 = distinct !DILexicalBlock(scope: !3614, file: !69, line: 796, column: 52)
!3614 = distinct !DILexicalBlock(scope: !3606, file: !69, line: 796, column: 46)
!3615 = !DILocation(line: 796, column: 54, scope: !3612)
!3616 = !DILocation(line: 796, column: 63, scope: !3612)
!3617 = !DILocation(line: 796, column: 18, scope: !3618)
!3618 = !DILexicalBlockFile(scope: !3606, file: !69, discriminator: 3)
!3619 = !DILocation(line: 797, column: 26, scope: !3602)
!3620 = !DILocation(line: 797, column: 32, scope: !3602)
!3621 = !DILocation(line: 797, column: 37, scope: !3602)
!3622 = !DILocation(line: 797, column: 13, scope: !3602)
!3623 = !DILocation(line: 799, column: 27, scope: !3602)
!3624 = !DILocation(line: 799, column: 20, scope: !3602)
!3625 = !DILocation(line: 799, column: 32, scope: !3602)
!3626 = !DILocation(line: 799, column: 38, scope: !3602)
!3627 = !DILocation(line: 798, column: 13, scope: !3602)
!3628 = !DILocation(line: 800, column: 13, scope: !3602)
!3629 = !DILocation(line: 804, column: 26, scope: !3543)
!3630 = !DILocation(line: 804, column: 35, scope: !3543)
!3631 = !DILocation(line: 804, column: 14, scope: !3543)
!3632 = !DILocation(line: 804, column: 12, scope: !3543)
!3633 = !DILocation(line: 805, column: 13, scope: !3634)
!3634 = distinct !DILexicalBlock(scope: !3543, file: !69, line: 805, column: 13)
!3635 = !DILocation(line: 805, column: 17, scope: !3634)
!3636 = !DILocation(line: 805, column: 13, scope: !3543)
!3637 = !DILocation(line: 806, column: 17, scope: !3638)
!3638 = distinct !DILexicalBlock(scope: !3639, file: !69, line: 806, column: 17)
!3639 = distinct !DILexicalBlock(scope: !3634, file: !69, line: 805, column: 23)
!3640 = !DILocation(line: 806, column: 21, scope: !3638)
!3641 = !DILocation(line: 806, column: 27, scope: !3638)
!3642 = !DILocation(line: 806, column: 17, scope: !3639)
!3643 = !DILocation(line: 808, column: 36, scope: !3644)
!3644 = distinct !DILexicalBlock(scope: !3638, file: !69, line: 806, column: 37)
!3645 = !DILocation(line: 808, column: 23, scope: !3644)
!3646 = !DILocation(line: 808, column: 21, scope: !3644)
!3647 = !DILocation(line: 809, column: 13, scope: !3644)
!3648 = !DILocation(line: 809, column: 24, scope: !3649)
!3649 = !DILexicalBlockFile(scope: !3650, file: !69, discriminator: 1)
!3650 = distinct !DILexicalBlock(scope: !3638, file: !69, line: 809, column: 24)
!3651 = !DILocation(line: 809, column: 28, scope: !3649)
!3652 = !DILocation(line: 809, column: 34, scope: !3649)
!3653 = !DILocation(line: 810, column: 17, scope: !3654)
!3654 = distinct !DILexicalBlock(scope: !3650, file: !69, line: 809, column: 44)
!3655 = distinct !{!3655, !3653}
!3656 = !DILocation(line: 810, column: 41, scope: !3657)
!3657 = !DILexicalBlockFile(scope: !3658, file: !69, discriminator: 1)
!3658 = distinct !DILexicalBlock(scope: !3654, file: !69, line: 810, column: 20)
!3659 = !DILocation(line: 810, column: 28, scope: !3657)
!3660 = !DILocation(line: 810, column: 26, scope: !3657)
!3661 = !DILocation(line: 810, column: 51, scope: !3657)
!3662 = !DILocation(line: 810, column: 50, scope: !3657)
!3663 = !DILocation(line: 810, column: 61, scope: !3664)
!3664 = !DILexicalBlockFile(scope: !3665, file: !69, discriminator: 2)
!3665 = distinct !DILexicalBlock(scope: !3666, file: !69, line: 810, column: 56)
!3666 = distinct !DILexicalBlock(scope: !3658, file: !69, line: 810, column: 50)
!3667 = !DILocation(line: 810, column: 58, scope: !3664)
!3668 = !DILocation(line: 810, column: 67, scope: !3664)
!3669 = !DILocation(line: 810, column: 22, scope: !3670)
!3670 = !DILexicalBlockFile(scope: !3658, file: !69, discriminator: 3)
!3671 = !DILocation(line: 811, column: 13, scope: !3654)
!3672 = !DILocation(line: 812, column: 21, scope: !3673)
!3673 = distinct !DILexicalBlock(scope: !3650, file: !69, line: 811, column: 20)
!3674 = !DILocation(line: 815, column: 21, scope: !3639)
!3675 = !DILocation(line: 815, column: 27, scope: !3639)
!3676 = !DILocation(line: 815, column: 31, scope: !3639)
!3677 = !DILocation(line: 815, column: 36, scope: !3639)
!3678 = !DILocation(line: 815, column: 13, scope: !3639)
!3679 = !DILocation(line: 817, column: 40, scope: !3639)
!3680 = !DILocation(line: 817, column: 44, scope: !3639)
!3681 = !DILocation(line: 817, column: 50, scope: !3639)
!3682 = !DILocation(line: 817, column: 54, scope: !3639)
!3683 = !DILocation(line: 817, column: 60, scope: !3639)
!3684 = !DILocation(line: 816, column: 13, scope: !3639)
!3685 = !DILocation(line: 818, column: 13, scope: !3639)
!3686 = !DILocation(line: 822, column: 18, scope: !3687)
!3687 = distinct !DILexicalBlock(scope: !3543, file: !69, line: 822, column: 13)
!3688 = !DILocation(line: 822, column: 13, scope: !3687)
!3689 = !DILocation(line: 822, column: 13, scope: !3543)
!3690 = !DILocation(line: 823, column: 36, scope: !3691)
!3691 = distinct !DILexicalBlock(scope: !3687, file: !69, line: 822, column: 29)
!3692 = !DILocation(line: 823, column: 46, scope: !3691)
!3693 = !DILocation(line: 823, column: 41, scope: !3691)
!3694 = !DILocation(line: 823, column: 19, scope: !3691)
!3695 = !DILocation(line: 823, column: 17, scope: !3691)
!3696 = !DILocation(line: 824, column: 17, scope: !3697)
!3697 = distinct !DILexicalBlock(scope: !3691, file: !69, line: 824, column: 17)
!3698 = !DILocation(line: 824, column: 21, scope: !3697)
!3699 = !DILocation(line: 824, column: 17, scope: !3691)
!3700 = !DILocation(line: 826, column: 44, scope: !3701)
!3701 = distinct !DILexicalBlock(scope: !3697, file: !69, line: 824, column: 27)
!3702 = !DILocation(line: 826, column: 54, scope: !3701)
!3703 = !DILocation(line: 826, column: 49, scope: !3701)
!3704 = !DILocation(line: 825, column: 17, scope: !3701)
!3705 = !DILocation(line: 827, column: 25, scope: !3701)
!3706 = !DILocation(line: 828, column: 17, scope: !3701)
!3707 = !DILocation(line: 829, column: 24, scope: !3708)
!3708 = distinct !DILexicalBlock(scope: !3697, file: !69, line: 829, column: 24)
!3709 = !DILocation(line: 829, column: 28, scope: !3708)
!3710 = !DILocation(line: 829, column: 24, scope: !3697)
!3711 = !DILocation(line: 831, column: 49, scope: !3712)
!3712 = distinct !DILexicalBlock(scope: !3708, file: !69, line: 829, column: 106)
!3713 = !DILocation(line: 831, column: 59, scope: !3712)
!3714 = !DILocation(line: 831, column: 54, scope: !3712)
!3715 = !DILocation(line: 830, column: 17, scope: !3712)
!3716 = !DILocation(line: 832, column: 24, scope: !3712)
!3717 = !DILocation(line: 832, column: 17, scope: !3712)
!3718 = !DILocation(line: 834, column: 9, scope: !3691)
!3719 = !DILocation(line: 837, column: 13, scope: !3720)
!3720 = distinct !DILexicalBlock(scope: !3543, file: !69, line: 837, column: 13)
!3721 = !DILocation(line: 837, column: 20, scope: !3720)
!3722 = !DILocation(line: 837, column: 27, scope: !3720)
!3723 = !DILocation(line: 837, column: 30, scope: !3724)
!3724 = !DILexicalBlockFile(scope: !3720, file: !69, discriminator: 1)
!3725 = !DILocation(line: 837, column: 37, scope: !3724)
!3726 = !DILocation(line: 837, column: 44, scope: !3724)
!3727 = !DILocation(line: 838, column: 31, scope: !3720)
!3728 = !DILocation(line: 838, column: 40, scope: !3720)
!3729 = !DILocation(line: 838, column: 44, scope: !3720)
!3730 = !DILocation(line: 838, column: 19, scope: !3720)
!3731 = !DILocation(line: 838, column: 17, scope: !3720)
!3732 = !DILocation(line: 838, column: 50, scope: !3720)
!3733 = !DILocation(line: 839, column: 13, scope: !3720)
!3734 = !DILocation(line: 839, column: 17, scope: !3720)
!3735 = !DILocation(line: 839, column: 22, scope: !3720)
!3736 = !DILocation(line: 839, column: 25, scope: !3724)
!3737 = !DILocation(line: 839, column: 29, scope: !3724)
!3738 = !DILocation(line: 839, column: 35, scope: !3724)
!3739 = !DILocation(line: 837, column: 13, scope: !3740)
!3740 = !DILexicalBlockFile(scope: !3543, file: !69, discriminator: 2)
!3741 = !DILocation(line: 840, column: 21, scope: !3742)
!3742 = distinct !DILexicalBlock(scope: !3720, file: !69, line: 839, column: 45)
!3743 = !DILocation(line: 840, column: 27, scope: !3742)
!3744 = !DILocation(line: 840, column: 31, scope: !3742)
!3745 = !DILocation(line: 840, column: 13, scope: !3742)
!3746 = !DILocation(line: 842, column: 37, scope: !3742)
!3747 = !DILocation(line: 842, column: 41, scope: !3742)
!3748 = !DILocation(line: 842, column: 47, scope: !3742)
!3749 = !DILocation(line: 842, column: 51, scope: !3742)
!3750 = !DILocation(line: 841, column: 13, scope: !3742)
!3751 = !DILocation(line: 843, column: 13, scope: !3742)
!3752 = !DILocation(line: 846, column: 56, scope: !3543)
!3753 = !DILocation(line: 846, column: 9, scope: !3543)
!3754 = !DILocation(line: 847, column: 9, scope: !3543)
!3755 = !DILocation(line: 850, column: 9, scope: !3756)
!3756 = distinct !DILexicalBlock(scope: !3511, file: !69, line: 850, column: 9)
!3757 = !DILocation(line: 850, column: 15, scope: !3756)
!3758 = !DILocation(line: 850, column: 25, scope: !3756)
!3759 = !DILocation(line: 850, column: 33, scope: !3756)
!3760 = !DILocation(line: 850, column: 36, scope: !3761)
!3761 = !DILexicalBlockFile(scope: !3756, file: !69, discriminator: 1)
!3762 = !DILocation(line: 850, column: 47, scope: !3761)
!3763 = !DILocation(line: 850, column: 50, scope: !3764)
!3764 = !DILexicalBlockFile(scope: !3756, file: !69, discriminator: 2)
!3765 = !DILocation(line: 850, column: 62, scope: !3764)
!3766 = !DILocation(line: 850, column: 65, scope: !3767)
!3767 = !DILexicalBlockFile(scope: !3756, file: !69, discriminator: 3)
!3768 = !DILocation(line: 850, column: 9, scope: !3767)
!3769 = !DILocation(line: 851, column: 9, scope: !3756)
!3770 = !DILocation(line: 854, column: 5, scope: !3511)
!3771 = !DILocation(line: 856, column: 5, scope: !3511)
!3772 = !DILocation(line: 857, column: 1, scope: !3511)
!3773 = !DILocalVariable(name: "octx", arg: 1, scope: !1419, file: !69, line: 705, type: !1422)
!3774 = !DILocation(line: 705, column: 52, scope: !1419)
!3775 = !DILocalVariable(name: "groups", arg: 2, scope: !1419, file: !69, line: 706, type: !1432)
!3776 = !DILocation(line: 706, column: 54, scope: !1419)
!3777 = !DILocalVariable(name: "nb_groups", arg: 3, scope: !1419, file: !69, line: 706, type: !969)
!3778 = !DILocation(line: 706, column: 66, scope: !1419)
!3779 = !DILocalVariable(name: "i", scope: !1419, file: !69, line: 709, type: !969)
!3780 = !DILocation(line: 709, column: 9, scope: !1419)
!3781 = !DILocation(line: 711, column: 12, scope: !1419)
!3782 = !DILocation(line: 711, column: 5, scope: !1419)
!3783 = !DILocation(line: 713, column: 23, scope: !1419)
!3784 = !DILocation(line: 713, column: 5, scope: !1419)
!3785 = !DILocation(line: 713, column: 11, scope: !1419)
!3786 = !DILocation(line: 713, column: 21, scope: !1419)
!3787 = !DILocation(line: 714, column: 37, scope: !1419)
!3788 = !DILocation(line: 714, column: 43, scope: !1419)
!3789 = !DILocation(line: 714, column: 20, scope: !1419)
!3790 = !DILocation(line: 714, column: 5, scope: !1419)
!3791 = !DILocation(line: 714, column: 11, scope: !1419)
!3792 = !DILocation(line: 714, column: 18, scope: !1419)
!3793 = !DILocation(line: 715, column: 10, scope: !3794)
!3794 = distinct !DILexicalBlock(scope: !1419, file: !69, line: 715, column: 9)
!3795 = !DILocation(line: 715, column: 16, scope: !3794)
!3796 = !DILocation(line: 715, column: 9, scope: !1419)
!3797 = !DILocation(line: 716, column: 9, scope: !3794)
!3798 = !DILocation(line: 718, column: 12, scope: !3799)
!3799 = distinct !DILexicalBlock(scope: !1419, file: !69, line: 718, column: 5)
!3800 = !DILocation(line: 718, column: 10, scope: !3799)
!3801 = !DILocation(line: 718, column: 17, scope: !3802)
!3802 = !DILexicalBlockFile(scope: !3803, file: !69, discriminator: 1)
!3803 = distinct !DILexicalBlock(scope: !3799, file: !69, line: 718, column: 5)
!3804 = !DILocation(line: 718, column: 21, scope: !3802)
!3805 = !DILocation(line: 718, column: 27, scope: !3802)
!3806 = !DILocation(line: 718, column: 19, scope: !3802)
!3807 = !DILocation(line: 718, column: 5, scope: !3802)
!3808 = !DILocation(line: 719, column: 45, scope: !3803)
!3809 = !DILocation(line: 719, column: 38, scope: !3803)
!3810 = !DILocation(line: 719, column: 22, scope: !3803)
!3811 = !DILocation(line: 719, column: 9, scope: !3803)
!3812 = !DILocation(line: 719, column: 15, scope: !3803)
!3813 = !DILocation(line: 719, column: 25, scope: !3803)
!3814 = !DILocation(line: 719, column: 35, scope: !3803)
!3815 = !DILocation(line: 718, column: 39, scope: !3816)
!3816 = !DILexicalBlockFile(scope: !3803, file: !69, discriminator: 2)
!3817 = !DILocation(line: 718, column: 5, scope: !3816)
!3818 = distinct !{!3818, !3819}
!3819 = !DILocation(line: 718, column: 5, scope: !1419)
!3820 = !DILocation(line: 721, column: 5, scope: !1419)
!3821 = !DILocation(line: 721, column: 11, scope: !1419)
!3822 = !DILocation(line: 721, column: 23, scope: !1419)
!3823 = !DILocation(line: 721, column: 33, scope: !1419)
!3824 = !DILocation(line: 722, column: 5, scope: !1419)
!3825 = !DILocation(line: 722, column: 11, scope: !1419)
!3826 = !DILocation(line: 722, column: 23, scope: !1419)
!3827 = !DILocation(line: 722, column: 27, scope: !1419)
!3828 = !DILocation(line: 724, column: 5, scope: !1419)
!3829 = !DILocation(line: 725, column: 1, scope: !1419)
!3830 = distinct !DISubprogram(name: "finish_group", scope: !69, file: !69, line: 662, type: !3831, isLocal: true, isDefinition: true, scopeLine: 664, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!3831 = !DISubroutineType(types: !3832)
!3832 = !{null, !1422, !969, !953}
!3833 = !DILocalVariable(name: "octx", arg: 1, scope: !3830, file: !69, line: 662, type: !1422)
!3834 = !DILocation(line: 662, column: 46, scope: !3830)
!3835 = !DILocalVariable(name: "group_idx", arg: 2, scope: !3830, file: !69, line: 662, type: !969)
!3836 = !DILocation(line: 662, column: 56, scope: !3830)
!3837 = !DILocalVariable(name: "arg", arg: 3, scope: !3830, file: !69, line: 663, type: !953)
!3838 = !DILocation(line: 663, column: 38, scope: !3830)
!3839 = !DILocalVariable(name: "l", scope: !3830, file: !69, line: 665, type: !1472)
!3840 = !DILocation(line: 665, column: 22, scope: !3830)
!3841 = !DILocation(line: 665, column: 40, scope: !3830)
!3842 = !DILocation(line: 665, column: 27, scope: !3830)
!3843 = !DILocation(line: 665, column: 33, scope: !3830)
!3844 = !DILocalVariable(name: "g", scope: !3830, file: !69, line: 666, type: !1478)
!3845 = !DILocation(line: 666, column: 18, scope: !3830)
!3846 = !DILocation(line: 668, column: 28, scope: !3830)
!3847 = !DILocation(line: 668, column: 31, scope: !3830)
!3848 = !DILocation(line: 668, column: 60, scope: !3830)
!3849 = !DILocation(line: 668, column: 63, scope: !3830)
!3850 = !DILocation(line: 668, column: 74, scope: !3830)
!3851 = !DILocation(line: 668, column: 77, scope: !3830)
!3852 = !DILocation(line: 668, column: 87, scope: !3830)
!3853 = !DILocation(line: 668, column: 17, scope: !3830)
!3854 = !DILocation(line: 668, column: 5, scope: !3830)
!3855 = !DILocation(line: 668, column: 8, scope: !3830)
!3856 = !DILocation(line: 668, column: 15, scope: !3830)
!3857 = !DILocation(line: 669, column: 20, scope: !3830)
!3858 = !DILocation(line: 669, column: 23, scope: !3830)
!3859 = !DILocation(line: 669, column: 33, scope: !3830)
!3860 = !DILocation(line: 669, column: 10, scope: !3830)
!3861 = !DILocation(line: 669, column: 13, scope: !3830)
!3862 = !DILocation(line: 669, column: 7, scope: !3830)
!3863 = !DILocation(line: 671, column: 6, scope: !3830)
!3864 = !DILocation(line: 671, column: 10, scope: !3830)
!3865 = !DILocation(line: 671, column: 16, scope: !3830)
!3866 = !DILocation(line: 672, column: 14, scope: !3830)
!3867 = !DILocation(line: 672, column: 5, scope: !3830)
!3868 = !DILocation(line: 672, column: 8, scope: !3830)
!3869 = !DILocation(line: 672, column: 12, scope: !3830)
!3870 = !DILocation(line: 673, column: 20, scope: !3830)
!3871 = !DILocation(line: 673, column: 23, scope: !3830)
!3872 = !DILocation(line: 673, column: 5, scope: !3830)
!3873 = !DILocation(line: 673, column: 8, scope: !3830)
!3874 = !DILocation(line: 673, column: 18, scope: !3830)
!3875 = !DILocation(line: 674, column: 19, scope: !3830)
!3876 = !DILocation(line: 674, column: 5, scope: !3830)
!3877 = !DILocation(line: 674, column: 8, scope: !3830)
!3878 = !DILocation(line: 674, column: 17, scope: !3830)
!3879 = !DILocation(line: 675, column: 19, scope: !3830)
!3880 = !DILocation(line: 675, column: 5, scope: !3830)
!3881 = !DILocation(line: 675, column: 8, scope: !3830)
!3882 = !DILocation(line: 675, column: 17, scope: !3830)
!3883 = !DILocation(line: 676, column: 21, scope: !3830)
!3884 = !DILocation(line: 676, column: 5, scope: !3830)
!3885 = !DILocation(line: 676, column: 8, scope: !3830)
!3886 = !DILocation(line: 676, column: 19, scope: !3830)
!3887 = !DILocation(line: 677, column: 22, scope: !3830)
!3888 = !DILocation(line: 677, column: 5, scope: !3830)
!3889 = !DILocation(line: 677, column: 8, scope: !3830)
!3890 = !DILocation(line: 677, column: 20, scope: !3830)
!3891 = !DILocation(line: 678, column: 24, scope: !3830)
!3892 = !DILocation(line: 678, column: 5, scope: !3830)
!3893 = !DILocation(line: 678, column: 8, scope: !3830)
!3894 = !DILocation(line: 678, column: 22, scope: !3830)
!3895 = !DILocation(line: 680, column: 16, scope: !3830)
!3896 = !DILocation(line: 681, column: 17, scope: !3830)
!3897 = !DILocation(line: 682, column: 19, scope: !3830)
!3898 = !DILocation(line: 683, column: 14, scope: !3830)
!3899 = !DILocation(line: 684, column: 14, scope: !3830)
!3900 = !DILocation(line: 685, column: 5, scope: !3830)
!3901 = !DILocation(line: 687, column: 13, scope: !3830)
!3902 = !DILocation(line: 687, column: 19, scope: !3830)
!3903 = !DILocation(line: 687, column: 5, scope: !3830)
!3904 = !DILocation(line: 688, column: 1, scope: !3830)
!3905 = distinct !DISubprogram(name: "match_group_separator", scope: !69, file: !69, line: 642, type: !3906, isLocal: true, isDefinition: true, scopeLine: 644, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!3906 = !DISubroutineType(types: !3907)
!3907 = !{!969, !1432, !969, !953}
!3908 = !DILocalVariable(name: "groups", arg: 1, scope: !3905, file: !69, line: 642, type: !1432)
!3909 = !DILocation(line: 642, column: 56, scope: !3905)
!3910 = !DILocalVariable(name: "nb_groups", arg: 2, scope: !3905, file: !69, line: 642, type: !969)
!3911 = !DILocation(line: 642, column: 68, scope: !3905)
!3912 = !DILocalVariable(name: "opt", arg: 3, scope: !3905, file: !69, line: 643, type: !953)
!3913 = !DILocation(line: 643, column: 46, scope: !3905)
!3914 = !DILocalVariable(name: "i", scope: !3905, file: !69, line: 645, type: !969)
!3915 = !DILocation(line: 645, column: 9, scope: !3905)
!3916 = !DILocation(line: 647, column: 12, scope: !3917)
!3917 = distinct !DILexicalBlock(scope: !3905, file: !69, line: 647, column: 5)
!3918 = !DILocation(line: 647, column: 10, scope: !3917)
!3919 = !DILocation(line: 647, column: 17, scope: !3920)
!3920 = !DILexicalBlockFile(scope: !3921, file: !69, discriminator: 1)
!3921 = distinct !DILexicalBlock(scope: !3917, file: !69, line: 647, column: 5)
!3922 = !DILocation(line: 647, column: 21, scope: !3920)
!3923 = !DILocation(line: 647, column: 19, scope: !3920)
!3924 = !DILocation(line: 647, column: 5, scope: !3920)
!3925 = !DILocalVariable(name: "p", scope: !3926, file: !69, line: 648, type: !1432)
!3926 = distinct !DILexicalBlock(scope: !3921, file: !69, line: 647, column: 37)
!3927 = !DILocation(line: 648, column: 31, scope: !3926)
!3928 = !DILocation(line: 648, column: 43, scope: !3926)
!3929 = !DILocation(line: 648, column: 36, scope: !3926)
!3930 = !DILocation(line: 649, column: 13, scope: !3931)
!3931 = distinct !DILexicalBlock(scope: !3926, file: !69, line: 649, column: 13)
!3932 = !DILocation(line: 649, column: 16, scope: !3931)
!3933 = !DILocation(line: 649, column: 20, scope: !3931)
!3934 = !DILocation(line: 649, column: 31, scope: !3935)
!3935 = !DILexicalBlockFile(scope: !3931, file: !69, discriminator: 1)
!3936 = !DILocation(line: 649, column: 34, scope: !3935)
!3937 = !DILocation(line: 649, column: 39, scope: !3935)
!3938 = !DILocation(line: 649, column: 24, scope: !3935)
!3939 = !DILocation(line: 649, column: 13, scope: !3935)
!3940 = !DILocation(line: 650, column: 20, scope: !3931)
!3941 = !DILocation(line: 650, column: 13, scope: !3931)
!3942 = !DILocation(line: 651, column: 5, scope: !3926)
!3943 = !DILocation(line: 647, column: 33, scope: !3944)
!3944 = !DILexicalBlockFile(scope: !3921, file: !69, discriminator: 2)
!3945 = !DILocation(line: 647, column: 5, scope: !3944)
!3946 = distinct !{!3946, !3947}
!3947 = !DILocation(line: 647, column: 5, scope: !3905)
!3948 = !DILocation(line: 653, column: 5, scope: !3905)
!3949 = !DILocation(line: 654, column: 1, scope: !3905)
!3950 = distinct !DISubprogram(name: "add_opt", scope: !69, file: !69, line: 693, type: !3951, isLocal: true, isDefinition: true, scopeLine: 695, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!3951 = !DISubroutineType(types: !3952)
!3952 = !{null, !1422, !1447, !953, !953}
!3953 = !DILocalVariable(name: "octx", arg: 1, scope: !3950, file: !69, line: 693, type: !1422)
!3954 = !DILocation(line: 693, column: 41, scope: !3950)
!3955 = !DILocalVariable(name: "opt", arg: 2, scope: !3950, file: !69, line: 693, type: !1447)
!3956 = !DILocation(line: 693, column: 64, scope: !3950)
!3957 = !DILocalVariable(name: "key", arg: 3, scope: !3950, file: !69, line: 694, type: !953)
!3958 = !DILocation(line: 694, column: 33, scope: !3950)
!3959 = !DILocalVariable(name: "val", arg: 4, scope: !3950, file: !69, line: 694, type: !953)
!3960 = !DILocation(line: 694, column: 50, scope: !3950)
!3961 = !DILocalVariable(name: "global", scope: !3950, file: !69, line: 696, type: !969)
!3962 = !DILocation(line: 696, column: 9, scope: !3950)
!3963 = !DILocation(line: 696, column: 20, scope: !3950)
!3964 = !DILocation(line: 696, column: 25, scope: !3950)
!3965 = !DILocation(line: 696, column: 31, scope: !3950)
!3966 = !DILocation(line: 696, column: 18, scope: !3950)
!3967 = !DILocalVariable(name: "g", scope: !3950, file: !69, line: 697, type: !1478)
!3968 = !DILocation(line: 697, column: 18, scope: !3950)
!3969 = !DILocation(line: 697, column: 22, scope: !3950)
!3970 = !DILocation(line: 697, column: 32, scope: !3971)
!3971 = !DILexicalBlockFile(scope: !3950, file: !69, discriminator: 1)
!3972 = !DILocation(line: 697, column: 38, scope: !3971)
!3973 = !DILocation(line: 697, column: 22, scope: !3971)
!3974 = !DILocation(line: 697, column: 53, scope: !3975)
!3975 = !DILexicalBlockFile(scope: !3950, file: !69, discriminator: 2)
!3976 = !DILocation(line: 697, column: 59, scope: !3975)
!3977 = !DILocation(line: 697, column: 22, scope: !3975)
!3978 = !DILocation(line: 697, column: 22, scope: !3979)
!3979 = !DILexicalBlockFile(scope: !3950, file: !69, discriminator: 3)
!3980 = !DILocation(line: 697, column: 18, scope: !3979)
!3981 = !DILocation(line: 699, column: 26, scope: !3950)
!3982 = !DILocation(line: 699, column: 29, scope: !3950)
!3983 = !DILocation(line: 699, column: 54, scope: !3950)
!3984 = !DILocation(line: 699, column: 57, scope: !3950)
!3985 = !DILocation(line: 699, column: 66, scope: !3950)
!3986 = !DILocation(line: 699, column: 69, scope: !3950)
!3987 = !DILocation(line: 699, column: 77, scope: !3950)
!3988 = !DILocation(line: 699, column: 15, scope: !3950)
!3989 = !DILocation(line: 699, column: 5, scope: !3950)
!3990 = !DILocation(line: 699, column: 8, scope: !3950)
!3991 = !DILocation(line: 699, column: 13, scope: !3950)
!3992 = !DILocation(line: 700, column: 35, scope: !3950)
!3993 = !DILocation(line: 700, column: 13, scope: !3950)
!3994 = !DILocation(line: 700, column: 16, scope: !3950)
!3995 = !DILocation(line: 700, column: 24, scope: !3950)
!3996 = !DILocation(line: 700, column: 5, scope: !3950)
!3997 = !DILocation(line: 700, column: 8, scope: !3950)
!3998 = !DILocation(line: 700, column: 29, scope: !3950)
!3999 = !DILocation(line: 700, column: 33, scope: !3950)
!4000 = !DILocation(line: 701, column: 35, scope: !3950)
!4001 = !DILocation(line: 701, column: 13, scope: !3950)
!4002 = !DILocation(line: 701, column: 16, scope: !3950)
!4003 = !DILocation(line: 701, column: 24, scope: !3950)
!4004 = !DILocation(line: 701, column: 5, scope: !3950)
!4005 = !DILocation(line: 701, column: 8, scope: !3950)
!4006 = !DILocation(line: 701, column: 29, scope: !3950)
!4007 = !DILocation(line: 701, column: 33, scope: !3950)
!4008 = !DILocation(line: 702, column: 35, scope: !3950)
!4009 = !DILocation(line: 702, column: 13, scope: !3950)
!4010 = !DILocation(line: 702, column: 16, scope: !3950)
!4011 = !DILocation(line: 702, column: 24, scope: !3950)
!4012 = !DILocation(line: 702, column: 5, scope: !3950)
!4013 = !DILocation(line: 702, column: 8, scope: !3950)
!4014 = !DILocation(line: 702, column: 29, scope: !3950)
!4015 = !DILocation(line: 702, column: 33, scope: !3950)
!4016 = !DILocation(line: 703, column: 1, scope: !3950)
!4017 = distinct !DISubprogram(name: "opt_cpuflags", scope: !69, file: !69, line: 859, type: !1343, isLocal: false, isDefinition: true, scopeLine: 860, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!4018 = !DILocalVariable(name: "optctx", arg: 1, scope: !4017, file: !69, line: 859, type: !960)
!4019 = !DILocation(line: 859, column: 24, scope: !4017)
!4020 = !DILocalVariable(name: "opt", arg: 2, scope: !4017, file: !69, line: 859, type: !953)
!4021 = !DILocation(line: 859, column: 44, scope: !4017)
!4022 = !DILocalVariable(name: "arg", arg: 3, scope: !4017, file: !69, line: 859, type: !953)
!4023 = !DILocation(line: 859, column: 61, scope: !4017)
!4024 = !DILocalVariable(name: "ret", scope: !4017, file: !69, line: 861, type: !969)
!4025 = !DILocation(line: 861, column: 9, scope: !4017)
!4026 = !DILocalVariable(name: "flags", scope: !4017, file: !69, line: 862, type: !1090)
!4027 = !DILocation(line: 862, column: 14, scope: !4017)
!4028 = !DILocation(line: 862, column: 22, scope: !4017)
!4029 = !DILocation(line: 864, column: 42, scope: !4030)
!4030 = distinct !DILexicalBlock(scope: !4017, file: !69, line: 864, column: 9)
!4031 = !DILocation(line: 864, column: 16, scope: !4030)
!4032 = !DILocation(line: 864, column: 14, scope: !4030)
!4033 = !DILocation(line: 864, column: 48, scope: !4030)
!4034 = !DILocation(line: 864, column: 9, scope: !4017)
!4035 = !DILocation(line: 865, column: 16, scope: !4030)
!4036 = !DILocation(line: 865, column: 9, scope: !4030)
!4037 = !DILocation(line: 867, column: 24, scope: !4017)
!4038 = !DILocation(line: 867, column: 5, scope: !4017)
!4039 = !DILocation(line: 868, column: 5, scope: !4017)
!4040 = !DILocation(line: 869, column: 1, scope: !4017)
!4041 = distinct !DISubprogram(name: "opt_report", scope: !69, file: !69, line: 1049, type: !2787, isLocal: false, isDefinition: true, scopeLine: 1050, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!4042 = !DILocalVariable(name: "opt", arg: 1, scope: !4041, file: !69, line: 1049, type: !953)
!4043 = !DILocation(line: 1049, column: 28, scope: !4041)
!4044 = !DILocation(line: 1051, column: 12, scope: !4041)
!4045 = !DILocation(line: 1051, column: 5, scope: !4041)
!4046 = distinct !DISubprogram(name: "opt_max_alloc", scope: !69, file: !69, line: 1054, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1055, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!4047 = !DILocalVariable(name: "optctx", arg: 1, scope: !4046, file: !69, line: 1054, type: !960)
!4048 = !DILocation(line: 1054, column: 25, scope: !4046)
!4049 = !DILocalVariable(name: "opt", arg: 2, scope: !4046, file: !69, line: 1054, type: !953)
!4050 = !DILocation(line: 1054, column: 45, scope: !4046)
!4051 = !DILocalVariable(name: "arg", arg: 3, scope: !4046, file: !69, line: 1054, type: !953)
!4052 = !DILocation(line: 1054, column: 62, scope: !4046)
!4053 = !DILocalVariable(name: "tail", scope: !4046, file: !69, line: 1056, type: !1076)
!4054 = !DILocation(line: 1056, column: 11, scope: !4046)
!4055 = !DILocalVariable(name: "max", scope: !4046, file: !69, line: 1057, type: !1264)
!4056 = !DILocation(line: 1057, column: 12, scope: !4046)
!4057 = !DILocation(line: 1059, column: 18, scope: !4046)
!4058 = !DILocation(line: 1059, column: 11, scope: !4046)
!4059 = !DILocation(line: 1059, column: 9, scope: !4046)
!4060 = !DILocation(line: 1060, column: 10, scope: !4061)
!4061 = distinct !DILexicalBlock(scope: !4046, file: !69, line: 1060, column: 9)
!4062 = !DILocation(line: 1060, column: 9, scope: !4061)
!4063 = !DILocation(line: 1060, column: 9, scope: !4046)
!4064 = !DILocation(line: 1061, column: 55, scope: !4065)
!4065 = distinct !DILexicalBlock(scope: !4061, file: !69, line: 1060, column: 16)
!4066 = !DILocation(line: 1061, column: 9, scope: !4065)
!4067 = !DILocation(line: 1062, column: 9, scope: !4065)
!4068 = !DILocation(line: 1064, column: 18, scope: !4046)
!4069 = !DILocation(line: 1064, column: 5, scope: !4046)
!4070 = !DILocation(line: 1065, column: 5, scope: !4046)
!4071 = distinct !DISubprogram(name: "opt_timelimit", scope: !69, file: !69, line: 1068, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1069, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!4072 = !DILocalVariable(name: "optctx", arg: 1, scope: !4071, file: !69, line: 1068, type: !960)
!4073 = !DILocation(line: 1068, column: 25, scope: !4071)
!4074 = !DILocalVariable(name: "opt", arg: 2, scope: !4071, file: !69, line: 1068, type: !953)
!4075 = !DILocation(line: 1068, column: 45, scope: !4071)
!4076 = !DILocalVariable(name: "arg", arg: 3, scope: !4071, file: !69, line: 1068, type: !953)
!4077 = !DILocation(line: 1068, column: 62, scope: !4071)
!4078 = !DILocalVariable(name: "lim", scope: !4071, file: !69, line: 1071, type: !969)
!4079 = !DILocation(line: 1071, column: 9, scope: !4071)
!4080 = !DILocation(line: 1071, column: 35, scope: !4071)
!4081 = !DILocation(line: 1071, column: 40, scope: !4071)
!4082 = !DILocation(line: 1071, column: 15, scope: !4071)
!4083 = !DILocalVariable(name: "rl", scope: !4071, file: !69, line: 1072, type: !4084)
!4084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rlimit", file: !47, line: 139, size: 128, align: 64, elements: !4085)
!4085 = !{!4086, !4089}
!4086 = !DIDerivedType(tag: DW_TAG_member, name: "rlim_cur", scope: !4084, file: !47, line: 142, baseType: !4087, size: 64, align: 64)
!4087 = !DIDerivedType(tag: DW_TAG_typedef, name: "rlim_t", file: !47, line: 133, baseType: !4088)
!4088 = !DIDerivedType(tag: DW_TAG_typedef, name: "__rlim64_t", file: !1391, line: 137, baseType: !1166)
!4089 = !DIDerivedType(tag: DW_TAG_member, name: "rlim_max", scope: !4084, file: !47, line: 144, baseType: !4087, size: 64, align: 64, offset: 64)
!4090 = !DILocation(line: 1072, column: 19, scope: !4071)
!4091 = !DILocation(line: 1072, column: 24, scope: !4071)
!4092 = !DILocation(line: 1072, column: 26, scope: !4071)
!4093 = !DILocation(line: 1072, column: 31, scope: !4071)
!4094 = !DILocation(line: 1072, column: 35, scope: !4071)
!4095 = !DILocation(line: 1073, column: 9, scope: !4096)
!4096 = distinct !DILexicalBlock(scope: !4071, file: !69, line: 1073, column: 9)
!4097 = !DILocation(line: 1073, column: 9, scope: !4071)
!4098 = !DILocation(line: 1074, column: 9, scope: !4096)
!4099 = !DILocation(line: 1078, column: 5, scope: !4071)
!4100 = distinct !DISubprogram(name: "print_error", scope: !69, file: !69, line: 1081, type: !4101, isLocal: false, isDefinition: true, scopeLine: 1082, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!4101 = !DISubroutineType(types: !4102)
!4102 = !{null, !953, !969}
!4103 = !DILocalVariable(name: "filename", arg: 1, scope: !4100, file: !69, line: 1081, type: !953)
!4104 = !DILocation(line: 1081, column: 30, scope: !4100)
!4105 = !DILocalVariable(name: "err", arg: 2, scope: !4100, file: !69, line: 1081, type: !969)
!4106 = !DILocation(line: 1081, column: 44, scope: !4100)
!4107 = !DILocalVariable(name: "errbuf", scope: !4100, file: !69, line: 1083, type: !3117)
!4108 = !DILocation(line: 1083, column: 10, scope: !4100)
!4109 = !DILocalVariable(name: "errbuf_ptr", scope: !4100, file: !69, line: 1084, type: !953)
!4110 = !DILocation(line: 1084, column: 17, scope: !4100)
!4111 = !DILocation(line: 1084, column: 30, scope: !4100)
!4112 = !DILocation(line: 1086, column: 21, scope: !4113)
!4113 = distinct !DILexicalBlock(scope: !4100, file: !69, line: 1086, column: 9)
!4114 = !DILocation(line: 1086, column: 26, scope: !4113)
!4115 = !DILocation(line: 1086, column: 9, scope: !4113)
!4116 = !DILocation(line: 1086, column: 50, scope: !4113)
!4117 = !DILocation(line: 1086, column: 9, scope: !4100)
!4118 = !DILocation(line: 1087, column: 34, scope: !4113)
!4119 = !DILocation(line: 1087, column: 32, scope: !4113)
!4120 = !DILocation(line: 1087, column: 22, scope: !4113)
!4121 = !DILocation(line: 1087, column: 20, scope: !4113)
!4122 = !DILocation(line: 1087, column: 9, scope: !4113)
!4123 = !DILocation(line: 1088, column: 33, scope: !4100)
!4124 = !DILocation(line: 1088, column: 43, scope: !4100)
!4125 = !DILocation(line: 1088, column: 5, scope: !4100)
!4126 = !DILocation(line: 1089, column: 1, scope: !4100)
!4127 = distinct !DISubprogram(name: "show_banner", scope: !69, file: !69, line: 1180, type: !2446, isLocal: false, isDefinition: true, scopeLine: 1181, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!4128 = !DILocalVariable(name: "argc", arg: 1, scope: !4127, file: !69, line: 1180, type: !969)
!4129 = !DILocation(line: 1180, column: 22, scope: !4127)
!4130 = !DILocalVariable(name: "argv", arg: 2, scope: !4127, file: !69, line: 1180, type: !1334)
!4131 = !DILocation(line: 1180, column: 35, scope: !4127)
!4132 = !DILocalVariable(name: "options", arg: 3, scope: !4127, file: !69, line: 1180, type: !1447)
!4133 = !DILocation(line: 1180, column: 58, scope: !4127)
!4134 = !DILocalVariable(name: "idx", scope: !4127, file: !69, line: 1182, type: !969)
!4135 = !DILocation(line: 1182, column: 9, scope: !4127)
!4136 = !DILocation(line: 1182, column: 29, scope: !4127)
!4137 = !DILocation(line: 1182, column: 35, scope: !4127)
!4138 = !DILocation(line: 1182, column: 41, scope: !4127)
!4139 = !DILocation(line: 1182, column: 15, scope: !4127)
!4140 = !DILocation(line: 1183, column: 9, scope: !4141)
!4141 = distinct !DILexicalBlock(scope: !4127, file: !69, line: 1183, column: 9)
!4142 = !DILocation(line: 1183, column: 21, scope: !4141)
!4143 = !DILocation(line: 1183, column: 24, scope: !4144)
!4144 = !DILexicalBlockFile(scope: !4141, file: !69, discriminator: 1)
!4145 = !DILocation(line: 1183, column: 9, scope: !4144)
!4146 = !DILocation(line: 1184, column: 9, scope: !4141)
!4147 = !DILocation(line: 1186, column: 5, scope: !4127)
!4148 = !DILocation(line: 1187, column: 5, scope: !4127)
!4149 = !DILocation(line: 1188, column: 5, scope: !4127)
!4150 = !DILocation(line: 1189, column: 1, scope: !4127)
!4151 = !DILocation(line: 1189, column: 1, scope: !4152)
!4152 = !DILexicalBlockFile(scope: !4127, file: !69, discriminator: 1)
!4153 = distinct !DISubprogram(name: "print_program_info", scope: !69, file: !69, line: 1140, type: !4154, isLocal: true, isDefinition: true, scopeLine: 1141, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!4154 = !DISubroutineType(types: !4155)
!4155 = !{null, !969, !969}
!4156 = !DILocalVariable(name: "flags", arg: 1, scope: !4153, file: !69, line: 1140, type: !969)
!4157 = !DILocation(line: 1140, column: 36, scope: !4153)
!4158 = !DILocalVariable(name: "level", arg: 2, scope: !4153, file: !69, line: 1140, type: !969)
!4159 = !DILocation(line: 1140, column: 47, scope: !4153)
!4160 = !DILocalVariable(name: "indent", scope: !4153, file: !69, line: 1142, type: !953)
!4161 = !DILocation(line: 1142, column: 17, scope: !4153)
!4162 = !DILocation(line: 1142, column: 26, scope: !4153)
!4163 = !DILocation(line: 1142, column: 32, scope: !4153)
!4164 = !DILocation(line: 1144, column: 17, scope: !4153)
!4165 = !DILocation(line: 1144, column: 5, scope: !4153)
!4166 = !DILocation(line: 1145, column: 9, scope: !4167)
!4167 = distinct !DILexicalBlock(scope: !4153, file: !69, line: 1145, column: 9)
!4168 = !DILocation(line: 1145, column: 15, scope: !4167)
!4169 = !DILocation(line: 1145, column: 9, scope: !4153)
!4170 = !DILocation(line: 1146, column: 21, scope: !4167)
!4171 = !DILocation(line: 1147, column: 16, scope: !4167)
!4172 = !DILocation(line: 1146, column: 9, scope: !4167)
!4173 = !DILocation(line: 1148, column: 17, scope: !4153)
!4174 = !DILocation(line: 1148, column: 5, scope: !4153)
!4175 = !DILocation(line: 1149, column: 17, scope: !4153)
!4176 = !DILocation(line: 1149, column: 45, scope: !4153)
!4177 = !DILocation(line: 1149, column: 5, scope: !4153)
!4178 = !DILocation(line: 1151, column: 17, scope: !4153)
!4179 = !DILocation(line: 1151, column: 69, scope: !4153)
!4180 = !DILocation(line: 1151, column: 5, scope: !4153)
!4181 = !DILocation(line: 1152, column: 1, scope: !4153)
!4182 = distinct !DISubprogram(name: "print_all_libs_info", scope: !69, file: !69, line: 1127, type: !4154, isLocal: true, isDefinition: true, scopeLine: 1128, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!4183 = !DILocalVariable(name: "flags", arg: 1, scope: !4182, file: !69, line: 1127, type: !969)
!4184 = !DILocation(line: 1127, column: 37, scope: !4182)
!4185 = !DILocalVariable(name: "level", arg: 2, scope: !4182, file: !69, line: 1127, type: !969)
!4186 = !DILocation(line: 1127, column: 48, scope: !4182)
!4187 = !DILocalVariable(name: "indent", scope: !4188, file: !69, line: 1129, type: !953)
!4188 = distinct !DILexicalBlock(scope: !4189, file: !69, line: 1129, column: 12)
!4189 = distinct !DILexicalBlock(scope: !4182, file: !69, line: 1129, column: 9)
!4190 = !DILocation(line: 1129, column: 26, scope: !4188)
!4191 = !DILocation(line: 1129, column: 35, scope: !4188)
!4192 = !DILocation(line: 1129, column: 41, scope: !4188)
!4193 = !DILocation(line: 1129, column: 61, scope: !4194)
!4194 = distinct !DILexicalBlock(scope: !4188, file: !69, line: 1129, column: 61)
!4195 = !DILocation(line: 1129, column: 67, scope: !4194)
!4196 = !DILocation(line: 1129, column: 61, scope: !4188)
!4197 = !DILocalVariable(name: "version", scope: !4198, file: !69, line: 1129, type: !1090)
!4198 = distinct !DILexicalBlock(scope: !4194, file: !69, line: 1129, column: 72)
!4199 = !DILocation(line: 1129, column: 87, scope: !4198)
!4200 = !DILocation(line: 1129, column: 97, scope: !4201)
!4201 = !DILexicalBlockFile(scope: !4198, file: !69, discriminator: 1)
!4202 = !DILocation(line: 1129, column: 87, scope: !4201)
!4203 = !DILocation(line: 1129, column: 6, scope: !4201)
!4204 = !DILocation(line: 1129, column: 55, scope: !4201)
!4205 = !DILocation(line: 1129, column: 88, scope: !4201)
!4206 = !DILocation(line: 1129, column: 108, scope: !4201)
!4207 = !DILocation(line: 1129, column: 117, scope: !4201)
!4208 = !DILocation(line: 1129, column: 129, scope: !4201)
!4209 = !DILocation(line: 1129, column: 138, scope: !4201)
!4210 = !DILocation(line: 1129, column: 147, scope: !4201)
!4211 = !DILocation(line: 1129, column: 115, scope: !4212)
!4212 = !DILexicalBlockFile(scope: !4201, file: !69, discriminator: 8)
!4213 = !DILocation(line: 1129, column: 157, scope: !4201)
!4214 = !DILocation(line: 1129, column: 163, scope: !4215)
!4215 = !DILexicalBlockFile(scope: !4216, file: !69, discriminator: 2)
!4216 = distinct !DILexicalBlock(scope: !4188, file: !69, line: 1129, column: 163)
!4217 = !DILocation(line: 1129, column: 169, scope: !4215)
!4218 = !DILocalVariable(name: "cfg", scope: !4219, file: !69, line: 1129, type: !953)
!4219 = distinct !DILexicalBlock(scope: !4216, file: !69, line: 1129, column: 174)
!4220 = !DILocation(line: 1129, column: 188, scope: !4219)
!4221 = !DILocation(line: 1129, column: 194, scope: !4222)
!4222 = !DILexicalBlockFile(scope: !4219, file: !69, discriminator: 3)
!4223 = !DILocation(line: 1129, column: 188, scope: !4222)
!4224 = !DILocation(line: 1129, column: 249, scope: !4222)
!4225 = !DILocation(line: 1129, column: 222, scope: !4226)
!4226 = !DILexicalBlockFile(scope: !4222, file: !69, discriminator: 9)
!4227 = !DILocation(line: 1129, column: 222, scope: !4222)
!4228 = !DILocation(line: 1129, column: 262, scope: !4229)
!4229 = !DILexicalBlockFile(scope: !4230, file: !69, discriminator: 4)
!4230 = distinct !DILexicalBlock(scope: !4231, file: !69, line: 1129, column: 261)
!4231 = distinct !DILexicalBlock(scope: !4232, file: !69, line: 1129, column: 255)
!4232 = distinct !DILexicalBlock(scope: !4219, file: !69, line: 1129, column: 222)
!4233 = !DILocation(line: 1129, column: 261, scope: !4229)
!4234 = !DILocation(line: 1129, column: 6, scope: !4235)
!4235 = !DILexicalBlockFile(scope: !4236, file: !69, discriminator: 5)
!4236 = distinct !DILexicalBlock(scope: !4230, file: !69, line: 1129, column: 274)
!4237 = !DILocation(line: 1129, column: 60, scope: !4235)
!4238 = !DILocation(line: 1129, column: 276, scope: !4235)
!4239 = !DILocation(line: 1129, column: 80, scope: !4235)
!4240 = !DILocation(line: 1129, column: 85, scope: !4235)
!4241 = !DILocation(line: 1129, column: 6, scope: !4242)
!4242 = !DILexicalBlockFile(scope: !4231, file: !69, discriminator: 6)
!4243 = !DILocation(line: 1129, column: 44, scope: !4242)
!4244 = !DILocation(line: 1129, column: 62, scope: !4242)
!4245 = !DILocation(line: 1129, column: 87, scope: !4242)
!4246 = !DILocation(line: 1129, column: 68, scope: !4242)
!4247 = !DILocation(line: 1129, column: 70, scope: !4248)
!4248 = !DILexicalBlockFile(scope: !4219, file: !69, discriminator: 7)
!4249 = !DILocalVariable(name: "indent", scope: !4250, file: !69, line: 1130, type: !953)
!4250 = distinct !DILexicalBlock(scope: !4251, file: !69, line: 1130, column: 12)
!4251 = distinct !DILexicalBlock(scope: !4182, file: !69, line: 1130, column: 9)
!4252 = !DILocation(line: 1130, column: 26, scope: !4250)
!4253 = !DILocation(line: 1130, column: 35, scope: !4250)
!4254 = !DILocation(line: 1130, column: 41, scope: !4250)
!4255 = !DILocation(line: 1130, column: 61, scope: !4256)
!4256 = distinct !DILexicalBlock(scope: !4250, file: !69, line: 1130, column: 61)
!4257 = !DILocation(line: 1130, column: 67, scope: !4256)
!4258 = !DILocation(line: 1130, column: 61, scope: !4250)
!4259 = !DILocalVariable(name: "version", scope: !4260, file: !69, line: 1130, type: !1090)
!4260 = distinct !DILexicalBlock(scope: !4256, file: !69, line: 1130, column: 72)
!4261 = !DILocation(line: 1130, column: 87, scope: !4260)
!4262 = !DILocation(line: 1130, column: 97, scope: !4263)
!4263 = !DILexicalBlockFile(scope: !4260, file: !69, discriminator: 1)
!4264 = !DILocation(line: 1130, column: 87, scope: !4263)
!4265 = !DILocation(line: 1130, column: 6, scope: !4263)
!4266 = !DILocation(line: 1130, column: 55, scope: !4263)
!4267 = !DILocation(line: 1130, column: 89, scope: !4263)
!4268 = !DILocation(line: 1130, column: 98, scope: !4263)
!4269 = !DILocation(line: 1130, column: 109, scope: !4263)
!4270 = !DILocation(line: 1130, column: 118, scope: !4263)
!4271 = !DILocation(line: 1130, column: 130, scope: !4263)
!4272 = !DILocation(line: 1130, column: 139, scope: !4263)
!4273 = !DILocation(line: 1130, column: 148, scope: !4263)
!4274 = !DILocation(line: 1130, column: 116, scope: !4275)
!4275 = !DILexicalBlockFile(scope: !4263, file: !69, discriminator: 8)
!4276 = !DILocation(line: 1130, column: 158, scope: !4263)
!4277 = !DILocation(line: 1130, column: 164, scope: !4278)
!4278 = !DILexicalBlockFile(scope: !4279, file: !69, discriminator: 2)
!4279 = distinct !DILexicalBlock(scope: !4250, file: !69, line: 1130, column: 164)
!4280 = !DILocation(line: 1130, column: 170, scope: !4278)
!4281 = !DILocalVariable(name: "cfg", scope: !4282, file: !69, line: 1130, type: !953)
!4282 = distinct !DILexicalBlock(scope: !4279, file: !69, line: 1130, column: 175)
!4283 = !DILocation(line: 1130, column: 189, scope: !4282)
!4284 = !DILocation(line: 1130, column: 195, scope: !4285)
!4285 = !DILexicalBlockFile(scope: !4282, file: !69, discriminator: 3)
!4286 = !DILocation(line: 1130, column: 189, scope: !4285)
!4287 = !DILocation(line: 1130, column: 251, scope: !4285)
!4288 = !DILocation(line: 1130, column: 224, scope: !4289)
!4289 = !DILexicalBlockFile(scope: !4285, file: !69, discriminator: 9)
!4290 = !DILocation(line: 1130, column: 224, scope: !4285)
!4291 = !DILocation(line: 1130, column: 264, scope: !4292)
!4292 = !DILexicalBlockFile(scope: !4293, file: !69, discriminator: 4)
!4293 = distinct !DILexicalBlock(scope: !4294, file: !69, line: 1130, column: 263)
!4294 = distinct !DILexicalBlock(scope: !4295, file: !69, line: 1130, column: 257)
!4295 = distinct !DILexicalBlock(scope: !4282, file: !69, line: 1130, column: 224)
!4296 = !DILocation(line: 1130, column: 263, scope: !4292)
!4297 = !DILocation(line: 1130, column: 6, scope: !4298)
!4298 = !DILexicalBlockFile(scope: !4299, file: !69, discriminator: 5)
!4299 = distinct !DILexicalBlock(scope: !4293, file: !69, line: 1130, column: 276)
!4300 = !DILocation(line: 1130, column: 60, scope: !4298)
!4301 = !DILocation(line: 1130, column: 278, scope: !4298)
!4302 = !DILocation(line: 1130, column: 80, scope: !4298)
!4303 = !DILocation(line: 1130, column: 85, scope: !4298)
!4304 = !DILocation(line: 1130, column: 6, scope: !4305)
!4305 = !DILexicalBlockFile(scope: !4294, file: !69, discriminator: 6)
!4306 = !DILocation(line: 1130, column: 44, scope: !4305)
!4307 = !DILocation(line: 1130, column: 63, scope: !4305)
!4308 = !DILocation(line: 1130, column: 87, scope: !4305)
!4309 = !DILocation(line: 1130, column: 69, scope: !4305)
!4310 = !DILocation(line: 1130, column: 71, scope: !4311)
!4311 = !DILexicalBlockFile(scope: !4282, file: !69, discriminator: 7)
!4312 = !DILocalVariable(name: "indent", scope: !4313, file: !69, line: 1131, type: !953)
!4313 = distinct !DILexicalBlock(scope: !4314, file: !69, line: 1131, column: 12)
!4314 = distinct !DILexicalBlock(scope: !4182, file: !69, line: 1131, column: 9)
!4315 = !DILocation(line: 1131, column: 26, scope: !4313)
!4316 = !DILocation(line: 1131, column: 35, scope: !4313)
!4317 = !DILocation(line: 1131, column: 41, scope: !4313)
!4318 = !DILocation(line: 1131, column: 61, scope: !4319)
!4319 = distinct !DILexicalBlock(scope: !4313, file: !69, line: 1131, column: 61)
!4320 = !DILocation(line: 1131, column: 67, scope: !4319)
!4321 = !DILocation(line: 1131, column: 61, scope: !4313)
!4322 = !DILocalVariable(name: "version", scope: !4323, file: !69, line: 1131, type: !1090)
!4323 = distinct !DILexicalBlock(scope: !4319, file: !69, line: 1131, column: 72)
!4324 = !DILocation(line: 1131, column: 87, scope: !4323)
!4325 = !DILocation(line: 1131, column: 97, scope: !4326)
!4326 = !DILexicalBlockFile(scope: !4323, file: !69, discriminator: 1)
!4327 = !DILocation(line: 1131, column: 87, scope: !4326)
!4328 = !DILocation(line: 1131, column: 6, scope: !4326)
!4329 = !DILocation(line: 1131, column: 55, scope: !4326)
!4330 = !DILocation(line: 1131, column: 90, scope: !4326)
!4331 = !DILocation(line: 1131, column: 99, scope: !4326)
!4332 = !DILocation(line: 1131, column: 110, scope: !4326)
!4333 = !DILocation(line: 1131, column: 119, scope: !4326)
!4334 = !DILocation(line: 1131, column: 131, scope: !4326)
!4335 = !DILocation(line: 1131, column: 140, scope: !4326)
!4336 = !DILocation(line: 1131, column: 149, scope: !4326)
!4337 = !DILocation(line: 1131, column: 117, scope: !4338)
!4338 = !DILexicalBlockFile(scope: !4326, file: !69, discriminator: 8)
!4339 = !DILocation(line: 1131, column: 159, scope: !4326)
!4340 = !DILocation(line: 1131, column: 165, scope: !4341)
!4341 = !DILexicalBlockFile(scope: !4342, file: !69, discriminator: 2)
!4342 = distinct !DILexicalBlock(scope: !4313, file: !69, line: 1131, column: 165)
!4343 = !DILocation(line: 1131, column: 171, scope: !4341)
!4344 = !DILocalVariable(name: "cfg", scope: !4345, file: !69, line: 1131, type: !953)
!4345 = distinct !DILexicalBlock(scope: !4342, file: !69, line: 1131, column: 176)
!4346 = !DILocation(line: 1131, column: 190, scope: !4345)
!4347 = !DILocation(line: 1131, column: 196, scope: !4348)
!4348 = !DILexicalBlockFile(scope: !4345, file: !69, discriminator: 3)
!4349 = !DILocation(line: 1131, column: 190, scope: !4348)
!4350 = !DILocation(line: 1131, column: 253, scope: !4348)
!4351 = !DILocation(line: 1131, column: 226, scope: !4352)
!4352 = !DILexicalBlockFile(scope: !4348, file: !69, discriminator: 9)
!4353 = !DILocation(line: 1131, column: 226, scope: !4348)
!4354 = !DILocation(line: 1131, column: 266, scope: !4355)
!4355 = !DILexicalBlockFile(scope: !4356, file: !69, discriminator: 4)
!4356 = distinct !DILexicalBlock(scope: !4357, file: !69, line: 1131, column: 265)
!4357 = distinct !DILexicalBlock(scope: !4358, file: !69, line: 1131, column: 259)
!4358 = distinct !DILexicalBlock(scope: !4345, file: !69, line: 1131, column: 226)
!4359 = !DILocation(line: 1131, column: 265, scope: !4355)
!4360 = !DILocation(line: 1131, column: 6, scope: !4361)
!4361 = !DILexicalBlockFile(scope: !4362, file: !69, discriminator: 5)
!4362 = distinct !DILexicalBlock(scope: !4356, file: !69, line: 1131, column: 278)
!4363 = !DILocation(line: 1131, column: 60, scope: !4361)
!4364 = !DILocation(line: 1131, column: 280, scope: !4361)
!4365 = !DILocation(line: 1131, column: 80, scope: !4361)
!4366 = !DILocation(line: 1131, column: 85, scope: !4361)
!4367 = !DILocation(line: 1131, column: 6, scope: !4368)
!4368 = !DILexicalBlockFile(scope: !4357, file: !69, discriminator: 6)
!4369 = !DILocation(line: 1131, column: 44, scope: !4368)
!4370 = !DILocation(line: 1131, column: 64, scope: !4368)
!4371 = !DILocation(line: 1131, column: 87, scope: !4368)
!4372 = !DILocation(line: 1131, column: 70, scope: !4368)
!4373 = !DILocation(line: 1131, column: 72, scope: !4374)
!4374 = !DILexicalBlockFile(scope: !4345, file: !69, discriminator: 7)
!4375 = !DILocalVariable(name: "indent", scope: !4376, file: !69, line: 1132, type: !953)
!4376 = distinct !DILexicalBlock(scope: !4377, file: !69, line: 1132, column: 12)
!4377 = distinct !DILexicalBlock(scope: !4182, file: !69, line: 1132, column: 9)
!4378 = !DILocation(line: 1132, column: 26, scope: !4376)
!4379 = !DILocation(line: 1132, column: 35, scope: !4376)
!4380 = !DILocation(line: 1132, column: 41, scope: !4376)
!4381 = !DILocation(line: 1132, column: 61, scope: !4382)
!4382 = distinct !DILexicalBlock(scope: !4376, file: !69, line: 1132, column: 61)
!4383 = !DILocation(line: 1132, column: 67, scope: !4382)
!4384 = !DILocation(line: 1132, column: 61, scope: !4376)
!4385 = !DILocalVariable(name: "version", scope: !4386, file: !69, line: 1132, type: !1090)
!4386 = distinct !DILexicalBlock(scope: !4382, file: !69, line: 1132, column: 72)
!4387 = !DILocation(line: 1132, column: 87, scope: !4386)
!4388 = !DILocation(line: 1132, column: 97, scope: !4389)
!4389 = !DILexicalBlockFile(scope: !4386, file: !69, discriminator: 1)
!4390 = !DILocation(line: 1132, column: 87, scope: !4389)
!4391 = !DILocation(line: 1132, column: 6, scope: !4389)
!4392 = !DILocation(line: 1132, column: 55, scope: !4389)
!4393 = !DILocation(line: 1132, column: 89, scope: !4389)
!4394 = !DILocation(line: 1132, column: 98, scope: !4389)
!4395 = !DILocation(line: 1132, column: 109, scope: !4389)
!4396 = !DILocation(line: 1132, column: 118, scope: !4389)
!4397 = !DILocation(line: 1132, column: 130, scope: !4389)
!4398 = !DILocation(line: 1132, column: 139, scope: !4389)
!4399 = !DILocation(line: 1132, column: 148, scope: !4389)
!4400 = !DILocation(line: 1132, column: 117, scope: !4401)
!4401 = !DILexicalBlockFile(scope: !4389, file: !69, discriminator: 8)
!4402 = !DILocation(line: 1132, column: 158, scope: !4389)
!4403 = !DILocation(line: 1132, column: 164, scope: !4404)
!4404 = !DILexicalBlockFile(scope: !4405, file: !69, discriminator: 2)
!4405 = distinct !DILexicalBlock(scope: !4376, file: !69, line: 1132, column: 164)
!4406 = !DILocation(line: 1132, column: 170, scope: !4404)
!4407 = !DILocalVariable(name: "cfg", scope: !4408, file: !69, line: 1132, type: !953)
!4408 = distinct !DILexicalBlock(scope: !4405, file: !69, line: 1132, column: 175)
!4409 = !DILocation(line: 1132, column: 189, scope: !4408)
!4410 = !DILocation(line: 1132, column: 195, scope: !4411)
!4411 = !DILexicalBlockFile(scope: !4408, file: !69, discriminator: 3)
!4412 = !DILocation(line: 1132, column: 189, scope: !4411)
!4413 = !DILocation(line: 1132, column: 252, scope: !4411)
!4414 = !DILocation(line: 1132, column: 225, scope: !4415)
!4415 = !DILexicalBlockFile(scope: !4411, file: !69, discriminator: 9)
!4416 = !DILocation(line: 1132, column: 225, scope: !4411)
!4417 = !DILocation(line: 1132, column: 265, scope: !4418)
!4418 = !DILexicalBlockFile(scope: !4419, file: !69, discriminator: 4)
!4419 = distinct !DILexicalBlock(scope: !4420, file: !69, line: 1132, column: 264)
!4420 = distinct !DILexicalBlock(scope: !4421, file: !69, line: 1132, column: 258)
!4421 = distinct !DILexicalBlock(scope: !4408, file: !69, line: 1132, column: 225)
!4422 = !DILocation(line: 1132, column: 264, scope: !4418)
!4423 = !DILocation(line: 1132, column: 6, scope: !4424)
!4424 = !DILexicalBlockFile(scope: !4425, file: !69, discriminator: 5)
!4425 = distinct !DILexicalBlock(scope: !4419, file: !69, line: 1132, column: 277)
!4426 = !DILocation(line: 1132, column: 60, scope: !4424)
!4427 = !DILocation(line: 1132, column: 279, scope: !4424)
!4428 = !DILocation(line: 1132, column: 80, scope: !4424)
!4429 = !DILocation(line: 1132, column: 85, scope: !4424)
!4430 = !DILocation(line: 1132, column: 6, scope: !4431)
!4431 = !DILexicalBlockFile(scope: !4420, file: !69, discriminator: 6)
!4432 = !DILocation(line: 1132, column: 44, scope: !4431)
!4433 = !DILocation(line: 1132, column: 64, scope: !4431)
!4434 = !DILocation(line: 1132, column: 87, scope: !4431)
!4435 = !DILocation(line: 1132, column: 70, scope: !4431)
!4436 = !DILocation(line: 1132, column: 72, scope: !4437)
!4437 = !DILexicalBlockFile(scope: !4408, file: !69, discriminator: 7)
!4438 = !DILocalVariable(name: "indent", scope: !4439, file: !69, line: 1133, type: !953)
!4439 = distinct !DILexicalBlock(scope: !4440, file: !69, line: 1133, column: 12)
!4440 = distinct !DILexicalBlock(scope: !4182, file: !69, line: 1133, column: 9)
!4441 = !DILocation(line: 1133, column: 26, scope: !4439)
!4442 = !DILocation(line: 1133, column: 35, scope: !4439)
!4443 = !DILocation(line: 1133, column: 41, scope: !4439)
!4444 = !DILocation(line: 1133, column: 61, scope: !4445)
!4445 = distinct !DILexicalBlock(scope: !4439, file: !69, line: 1133, column: 61)
!4446 = !DILocation(line: 1133, column: 67, scope: !4445)
!4447 = !DILocation(line: 1133, column: 61, scope: !4439)
!4448 = !DILocalVariable(name: "version", scope: !4449, file: !69, line: 1133, type: !1090)
!4449 = distinct !DILexicalBlock(scope: !4445, file: !69, line: 1133, column: 72)
!4450 = !DILocation(line: 1133, column: 87, scope: !4449)
!4451 = !DILocation(line: 1133, column: 97, scope: !4452)
!4452 = !DILexicalBlockFile(scope: !4449, file: !69, discriminator: 1)
!4453 = !DILocation(line: 1133, column: 87, scope: !4452)
!4454 = !DILocation(line: 1133, column: 6, scope: !4452)
!4455 = !DILocation(line: 1133, column: 55, scope: !4452)
!4456 = !DILocation(line: 1133, column: 89, scope: !4452)
!4457 = !DILocation(line: 1133, column: 98, scope: !4452)
!4458 = !DILocation(line: 1133, column: 109, scope: !4452)
!4459 = !DILocation(line: 1133, column: 118, scope: !4452)
!4460 = !DILocation(line: 1133, column: 130, scope: !4452)
!4461 = !DILocation(line: 1133, column: 139, scope: !4452)
!4462 = !DILocation(line: 1133, column: 148, scope: !4452)
!4463 = !DILocation(line: 1133, column: 117, scope: !4464)
!4464 = !DILexicalBlockFile(scope: !4452, file: !69, discriminator: 8)
!4465 = !DILocation(line: 1133, column: 158, scope: !4452)
!4466 = !DILocation(line: 1133, column: 164, scope: !4467)
!4467 = !DILexicalBlockFile(scope: !4468, file: !69, discriminator: 2)
!4468 = distinct !DILexicalBlock(scope: !4439, file: !69, line: 1133, column: 164)
!4469 = !DILocation(line: 1133, column: 170, scope: !4467)
!4470 = !DILocalVariable(name: "cfg", scope: !4471, file: !69, line: 1133, type: !953)
!4471 = distinct !DILexicalBlock(scope: !4468, file: !69, line: 1133, column: 175)
!4472 = !DILocation(line: 1133, column: 189, scope: !4471)
!4473 = !DILocation(line: 1133, column: 195, scope: !4474)
!4474 = !DILexicalBlockFile(scope: !4471, file: !69, discriminator: 3)
!4475 = !DILocation(line: 1133, column: 189, scope: !4474)
!4476 = !DILocation(line: 1133, column: 252, scope: !4474)
!4477 = !DILocation(line: 1133, column: 225, scope: !4478)
!4478 = !DILexicalBlockFile(scope: !4474, file: !69, discriminator: 9)
!4479 = !DILocation(line: 1133, column: 225, scope: !4474)
!4480 = !DILocation(line: 1133, column: 265, scope: !4481)
!4481 = !DILexicalBlockFile(scope: !4482, file: !69, discriminator: 4)
!4482 = distinct !DILexicalBlock(scope: !4483, file: !69, line: 1133, column: 264)
!4483 = distinct !DILexicalBlock(scope: !4484, file: !69, line: 1133, column: 258)
!4484 = distinct !DILexicalBlock(scope: !4471, file: !69, line: 1133, column: 225)
!4485 = !DILocation(line: 1133, column: 264, scope: !4481)
!4486 = !DILocation(line: 1133, column: 6, scope: !4487)
!4487 = !DILexicalBlockFile(scope: !4488, file: !69, discriminator: 5)
!4488 = distinct !DILexicalBlock(scope: !4482, file: !69, line: 1133, column: 277)
!4489 = !DILocation(line: 1133, column: 60, scope: !4487)
!4490 = !DILocation(line: 1133, column: 279, scope: !4487)
!4491 = !DILocation(line: 1133, column: 80, scope: !4487)
!4492 = !DILocation(line: 1133, column: 85, scope: !4487)
!4493 = !DILocation(line: 1133, column: 6, scope: !4494)
!4494 = !DILexicalBlockFile(scope: !4483, file: !69, discriminator: 6)
!4495 = !DILocation(line: 1133, column: 44, scope: !4494)
!4496 = !DILocation(line: 1133, column: 64, scope: !4494)
!4497 = !DILocation(line: 1133, column: 87, scope: !4494)
!4498 = !DILocation(line: 1133, column: 70, scope: !4494)
!4499 = !DILocation(line: 1133, column: 72, scope: !4500)
!4500 = !DILexicalBlockFile(scope: !4471, file: !69, discriminator: 7)
!4501 = !DILocalVariable(name: "indent", scope: !4502, file: !69, line: 1135, type: !953)
!4502 = distinct !DILexicalBlock(scope: !4503, file: !69, line: 1135, column: 12)
!4503 = distinct !DILexicalBlock(scope: !4182, file: !69, line: 1135, column: 9)
!4504 = !DILocation(line: 1135, column: 26, scope: !4502)
!4505 = !DILocation(line: 1135, column: 35, scope: !4502)
!4506 = !DILocation(line: 1135, column: 41, scope: !4502)
!4507 = !DILocation(line: 1135, column: 61, scope: !4508)
!4508 = distinct !DILexicalBlock(scope: !4502, file: !69, line: 1135, column: 61)
!4509 = !DILocation(line: 1135, column: 67, scope: !4508)
!4510 = !DILocation(line: 1135, column: 61, scope: !4502)
!4511 = !DILocalVariable(name: "version", scope: !4512, file: !69, line: 1135, type: !1090)
!4512 = distinct !DILexicalBlock(scope: !4508, file: !69, line: 1135, column: 72)
!4513 = !DILocation(line: 1135, column: 87, scope: !4512)
!4514 = !DILocation(line: 1135, column: 97, scope: !4515)
!4515 = !DILexicalBlockFile(scope: !4512, file: !69, discriminator: 1)
!4516 = !DILocation(line: 1135, column: 87, scope: !4515)
!4517 = !DILocation(line: 1135, column: 6, scope: !4515)
!4518 = !DILocation(line: 1135, column: 55, scope: !4515)
!4519 = !DILocation(line: 1135, column: 96, scope: !4515)
!4520 = !DILocation(line: 1135, column: 107, scope: !4515)
!4521 = !DILocation(line: 1135, column: 116, scope: !4515)
!4522 = !DILocation(line: 1135, column: 128, scope: !4515)
!4523 = !DILocation(line: 1135, column: 137, scope: !4515)
!4524 = !DILocation(line: 1135, column: 146, scope: !4515)
!4525 = !DILocation(line: 1135, column: 116, scope: !4526)
!4526 = !DILexicalBlockFile(scope: !4515, file: !69, discriminator: 8)
!4527 = !DILocation(line: 1135, column: 156, scope: !4515)
!4528 = !DILocation(line: 1135, column: 162, scope: !4529)
!4529 = !DILexicalBlockFile(scope: !4530, file: !69, discriminator: 2)
!4530 = distinct !DILexicalBlock(scope: !4502, file: !69, line: 1135, column: 162)
!4531 = !DILocation(line: 1135, column: 168, scope: !4529)
!4532 = !DILocalVariable(name: "cfg", scope: !4533, file: !69, line: 1135, type: !953)
!4533 = distinct !DILexicalBlock(scope: !4530, file: !69, line: 1135, column: 173)
!4534 = !DILocation(line: 1135, column: 187, scope: !4533)
!4535 = !DILocation(line: 1135, column: 193, scope: !4536)
!4536 = !DILexicalBlockFile(scope: !4533, file: !69, discriminator: 3)
!4537 = !DILocation(line: 1135, column: 187, scope: !4536)
!4538 = !DILocation(line: 1135, column: 249, scope: !4536)
!4539 = !DILocation(line: 1135, column: 222, scope: !4540)
!4540 = !DILexicalBlockFile(scope: !4536, file: !69, discriminator: 9)
!4541 = !DILocation(line: 1135, column: 222, scope: !4536)
!4542 = !DILocation(line: 1135, column: 262, scope: !4543)
!4543 = !DILexicalBlockFile(scope: !4544, file: !69, discriminator: 4)
!4544 = distinct !DILexicalBlock(scope: !4545, file: !69, line: 1135, column: 261)
!4545 = distinct !DILexicalBlock(scope: !4546, file: !69, line: 1135, column: 255)
!4546 = distinct !DILexicalBlock(scope: !4533, file: !69, line: 1135, column: 222)
!4547 = !DILocation(line: 1135, column: 261, scope: !4543)
!4548 = !DILocation(line: 1135, column: 6, scope: !4549)
!4549 = !DILexicalBlockFile(scope: !4550, file: !69, discriminator: 5)
!4550 = distinct !DILexicalBlock(scope: !4544, file: !69, line: 1135, column: 274)
!4551 = !DILocation(line: 1135, column: 60, scope: !4549)
!4552 = !DILocation(line: 1135, column: 276, scope: !4549)
!4553 = !DILocation(line: 1135, column: 80, scope: !4549)
!4554 = !DILocation(line: 1135, column: 85, scope: !4549)
!4555 = !DILocation(line: 1135, column: 6, scope: !4556)
!4556 = !DILexicalBlockFile(scope: !4545, file: !69, discriminator: 6)
!4557 = !DILocation(line: 1135, column: 44, scope: !4556)
!4558 = !DILocation(line: 1135, column: 63, scope: !4556)
!4559 = !DILocation(line: 1135, column: 87, scope: !4556)
!4560 = !DILocation(line: 1135, column: 69, scope: !4556)
!4561 = !DILocation(line: 1135, column: 71, scope: !4562)
!4562 = !DILexicalBlockFile(scope: !4533, file: !69, discriminator: 7)
!4563 = !DILocalVariable(name: "indent", scope: !4564, file: !69, line: 1136, type: !953)
!4564 = distinct !DILexicalBlock(scope: !4565, file: !69, line: 1136, column: 12)
!4565 = distinct !DILexicalBlock(scope: !4182, file: !69, line: 1136, column: 9)
!4566 = !DILocation(line: 1136, column: 26, scope: !4564)
!4567 = !DILocation(line: 1136, column: 35, scope: !4564)
!4568 = !DILocation(line: 1136, column: 41, scope: !4564)
!4569 = !DILocation(line: 1136, column: 61, scope: !4570)
!4570 = distinct !DILexicalBlock(scope: !4564, file: !69, line: 1136, column: 61)
!4571 = !DILocation(line: 1136, column: 67, scope: !4570)
!4572 = !DILocation(line: 1136, column: 61, scope: !4564)
!4573 = !DILocalVariable(name: "version", scope: !4574, file: !69, line: 1136, type: !1090)
!4574 = distinct !DILexicalBlock(scope: !4570, file: !69, line: 1136, column: 72)
!4575 = !DILocation(line: 1136, column: 87, scope: !4574)
!4576 = !DILocation(line: 1136, column: 97, scope: !4577)
!4577 = !DILexicalBlockFile(scope: !4574, file: !69, discriminator: 1)
!4578 = !DILocation(line: 1136, column: 87, scope: !4577)
!4579 = !DILocation(line: 1136, column: 6, scope: !4577)
!4580 = !DILocation(line: 1136, column: 55, scope: !4577)
!4581 = !DILocation(line: 1136, column: 90, scope: !4577)
!4582 = !DILocation(line: 1136, column: 99, scope: !4577)
!4583 = !DILocation(line: 1136, column: 110, scope: !4577)
!4584 = !DILocation(line: 1136, column: 119, scope: !4577)
!4585 = !DILocation(line: 1136, column: 131, scope: !4577)
!4586 = !DILocation(line: 1136, column: 140, scope: !4577)
!4587 = !DILocation(line: 1136, column: 149, scope: !4577)
!4588 = !DILocation(line: 1136, column: 119, scope: !4589)
!4589 = !DILexicalBlockFile(scope: !4577, file: !69, discriminator: 8)
!4590 = !DILocation(line: 1136, column: 159, scope: !4577)
!4591 = !DILocation(line: 1136, column: 165, scope: !4592)
!4592 = !DILexicalBlockFile(scope: !4593, file: !69, discriminator: 2)
!4593 = distinct !DILexicalBlock(scope: !4564, file: !69, line: 1136, column: 165)
!4594 = !DILocation(line: 1136, column: 171, scope: !4592)
!4595 = !DILocalVariable(name: "cfg", scope: !4596, file: !69, line: 1136, type: !953)
!4596 = distinct !DILexicalBlock(scope: !4593, file: !69, line: 1136, column: 176)
!4597 = !DILocation(line: 1136, column: 190, scope: !4596)
!4598 = !DILocation(line: 1136, column: 196, scope: !4599)
!4599 = !DILexicalBlockFile(scope: !4596, file: !69, discriminator: 3)
!4600 = !DILocation(line: 1136, column: 190, scope: !4599)
!4601 = !DILocation(line: 1136, column: 255, scope: !4599)
!4602 = !DILocation(line: 1136, column: 228, scope: !4603)
!4603 = !DILexicalBlockFile(scope: !4599, file: !69, discriminator: 9)
!4604 = !DILocation(line: 1136, column: 228, scope: !4599)
!4605 = !DILocation(line: 1136, column: 268, scope: !4606)
!4606 = !DILexicalBlockFile(scope: !4607, file: !69, discriminator: 4)
!4607 = distinct !DILexicalBlock(scope: !4608, file: !69, line: 1136, column: 267)
!4608 = distinct !DILexicalBlock(scope: !4609, file: !69, line: 1136, column: 261)
!4609 = distinct !DILexicalBlock(scope: !4596, file: !69, line: 1136, column: 228)
!4610 = !DILocation(line: 1136, column: 267, scope: !4606)
!4611 = !DILocation(line: 1136, column: 6, scope: !4612)
!4612 = !DILexicalBlockFile(scope: !4613, file: !69, discriminator: 5)
!4613 = distinct !DILexicalBlock(scope: !4607, file: !69, line: 1136, column: 280)
!4614 = !DILocation(line: 1136, column: 60, scope: !4612)
!4615 = !DILocation(line: 1136, column: 282, scope: !4612)
!4616 = !DILocation(line: 1136, column: 80, scope: !4612)
!4617 = !DILocation(line: 1136, column: 85, scope: !4612)
!4618 = !DILocation(line: 1136, column: 6, scope: !4619)
!4619 = !DILexicalBlockFile(scope: !4608, file: !69, discriminator: 6)
!4620 = !DILocation(line: 1136, column: 44, scope: !4619)
!4621 = !DILocation(line: 1136, column: 66, scope: !4619)
!4622 = !DILocation(line: 1136, column: 87, scope: !4619)
!4623 = !DILocation(line: 1136, column: 72, scope: !4619)
!4624 = !DILocation(line: 1136, column: 74, scope: !4625)
!4625 = !DILexicalBlockFile(scope: !4596, file: !69, discriminator: 7)
!4626 = !DILocation(line: 1138, column: 1, scope: !4182)
!4627 = distinct !DISubprogram(name: "show_version", scope: !69, file: !69, line: 1191, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1192, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!4628 = !DILocalVariable(name: "optctx", arg: 1, scope: !4627, file: !69, line: 1191, type: !960)
!4629 = !DILocation(line: 1191, column: 24, scope: !4627)
!4630 = !DILocalVariable(name: "opt", arg: 2, scope: !4627, file: !69, line: 1191, type: !953)
!4631 = !DILocation(line: 1191, column: 44, scope: !4627)
!4632 = !DILocalVariable(name: "arg", arg: 3, scope: !4627, file: !69, line: 1191, type: !953)
!4633 = !DILocation(line: 1191, column: 61, scope: !4627)
!4634 = !DILocation(line: 1193, column: 5, scope: !4627)
!4635 = !DILocation(line: 1194, column: 5, scope: !4627)
!4636 = !DILocation(line: 1195, column: 5, scope: !4627)
!4637 = !DILocation(line: 1197, column: 5, scope: !4627)
!4638 = distinct !DISubprogram(name: "show_buildconf", scope: !69, file: !69, line: 1200, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1201, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!4639 = !DILocalVariable(name: "optctx", arg: 1, scope: !4638, file: !69, line: 1200, type: !960)
!4640 = !DILocation(line: 1200, column: 26, scope: !4638)
!4641 = !DILocalVariable(name: "opt", arg: 2, scope: !4638, file: !69, line: 1200, type: !953)
!4642 = !DILocation(line: 1200, column: 46, scope: !4638)
!4643 = !DILocalVariable(name: "arg", arg: 3, scope: !4638, file: !69, line: 1200, type: !953)
!4644 = !DILocation(line: 1200, column: 63, scope: !4638)
!4645 = !DILocation(line: 1202, column: 5, scope: !4638)
!4646 = !DILocation(line: 1203, column: 5, scope: !4638)
!4647 = !DILocation(line: 1205, column: 5, scope: !4638)
!4648 = distinct !DISubprogram(name: "print_buildconf", scope: !69, file: !69, line: 1154, type: !4154, isLocal: true, isDefinition: true, scopeLine: 1155, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!4649 = !DILocalVariable(name: "flags", arg: 1, scope: !4648, file: !69, line: 1154, type: !969)
!4650 = !DILocation(line: 1154, column: 33, scope: !4648)
!4651 = !DILocalVariable(name: "level", arg: 2, scope: !4648, file: !69, line: 1154, type: !969)
!4652 = !DILocation(line: 1154, column: 44, scope: !4648)
!4653 = !DILocalVariable(name: "indent", scope: !4648, file: !69, line: 1156, type: !953)
!4654 = !DILocation(line: 1156, column: 17, scope: !4648)
!4655 = !DILocation(line: 1156, column: 26, scope: !4648)
!4656 = !DILocation(line: 1156, column: 32, scope: !4648)
!4657 = !DILocalVariable(name: "str", scope: !4648, file: !69, line: 1157, type: !4658)
!4658 = !DICompositeType(tag: DW_TAG_array_type, baseType: !955, size: 136, align: 8, elements: !4659)
!4659 = !{!4660}
!4660 = !DISubrange(count: 17)
!4661 = !DILocation(line: 1157, column: 10, scope: !4648)
!4662 = !DILocalVariable(name: "conflist", scope: !4648, file: !69, line: 1158, type: !1076)
!4663 = !DILocation(line: 1158, column: 11, scope: !4648)
!4664 = !DILocalVariable(name: "remove_tilde", scope: !4648, file: !69, line: 1158, type: !1076)
!4665 = !DILocation(line: 1158, column: 22, scope: !4648)
!4666 = !DILocalVariable(name: "splitconf", scope: !4648, file: !69, line: 1158, type: !1076)
!4667 = !DILocation(line: 1158, column: 37, scope: !4648)
!4668 = !DILocation(line: 1162, column: 5, scope: !4648)
!4669 = !DILocation(line: 1162, column: 31, scope: !4670)
!4670 = !DILexicalBlockFile(scope: !4648, file: !69, discriminator: 1)
!4671 = !DILocation(line: 1162, column: 24, scope: !4670)
!4672 = !DILocation(line: 1162, column: 22, scope: !4670)
!4673 = !DILocation(line: 1162, column: 44, scope: !4670)
!4674 = !DILocation(line: 1162, column: 5, scope: !4670)
!4675 = !DILocation(line: 1163, column: 17, scope: !4676)
!4676 = distinct !DILexicalBlock(scope: !4648, file: !69, line: 1162, column: 52)
!4677 = !DILocation(line: 1163, column: 9, scope: !4676)
!4678 = !DILocation(line: 1162, column: 5, scope: !4679)
!4679 = !DILexicalBlockFile(scope: !4648, file: !69, discriminator: 2)
!4680 = distinct !{!4680, !4668}
!4681 = !DILocation(line: 1168, column: 5, scope: !4648)
!4682 = !DILocation(line: 1168, column: 35, scope: !4670)
!4683 = !DILocation(line: 1168, column: 28, scope: !4670)
!4684 = !DILocation(line: 1168, column: 26, scope: !4670)
!4685 = !DILocation(line: 1168, column: 56, scope: !4670)
!4686 = !DILocation(line: 1168, column: 5, scope: !4670)
!4687 = !DILocation(line: 1169, column: 17, scope: !4688)
!4688 = distinct !DILexicalBlock(scope: !4648, file: !69, line: 1168, column: 64)
!4689 = !DILocation(line: 1169, column: 9, scope: !4688)
!4690 = !DILocation(line: 1168, column: 5, scope: !4679)
!4691 = distinct !{!4691, !4681}
!4692 = !DILocation(line: 1172, column: 24, scope: !4648)
!4693 = !DILocation(line: 1172, column: 17, scope: !4648)
!4694 = !DILocation(line: 1172, column: 15, scope: !4648)
!4695 = !DILocation(line: 1173, column: 17, scope: !4648)
!4696 = !DILocation(line: 1173, column: 48, scope: !4648)
!4697 = !DILocation(line: 1173, column: 5, scope: !4648)
!4698 = !DILocation(line: 1174, column: 5, scope: !4648)
!4699 = !DILocation(line: 1174, column: 12, scope: !4670)
!4700 = !DILocation(line: 1174, column: 22, scope: !4670)
!4701 = !DILocation(line: 1174, column: 5, scope: !4670)
!4702 = !DILocation(line: 1175, column: 21, scope: !4703)
!4703 = distinct !DILexicalBlock(scope: !4648, file: !69, line: 1174, column: 30)
!4704 = !DILocation(line: 1175, column: 40, scope: !4703)
!4705 = !DILocation(line: 1175, column: 48, scope: !4703)
!4706 = !DILocation(line: 1175, column: 56, scope: !4703)
!4707 = !DILocation(line: 1175, column: 9, scope: !4703)
!4708 = !DILocation(line: 1176, column: 21, scope: !4703)
!4709 = !DILocation(line: 1176, column: 19, scope: !4703)
!4710 = !DILocation(line: 1174, column: 5, scope: !4679)
!4711 = distinct !{!4711, !4698}
!4712 = !DILocation(line: 1178, column: 1, scope: !4648)
!4713 = distinct !DISubprogram(name: "show_license", scope: !69, file: !69, line: 1208, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1209, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!4714 = !DILocalVariable(name: "optctx", arg: 1, scope: !4713, file: !69, line: 1208, type: !960)
!4715 = !DILocation(line: 1208, column: 24, scope: !4713)
!4716 = !DILocalVariable(name: "opt", arg: 2, scope: !4713, file: !69, line: 1208, type: !953)
!4717 = !DILocation(line: 1208, column: 44, scope: !4713)
!4718 = !DILocalVariable(name: "arg", arg: 3, scope: !4713, file: !69, line: 1208, type: !953)
!4719 = !DILocation(line: 1208, column: 61, scope: !4713)
!4720 = !DILocation(line: 1262, column: 5, scope: !4713)
!4721 = !DILocation(line: 1279, column: 5, scope: !4713)
!4722 = distinct !DISubprogram(name: "show_formats", scope: !69, file: !69, line: 1352, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1353, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!4723 = !DILocalVariable(name: "optctx", arg: 1, scope: !4722, file: !69, line: 1352, type: !960)
!4724 = !DILocation(line: 1352, column: 24, scope: !4722)
!4725 = !DILocalVariable(name: "opt", arg: 2, scope: !4722, file: !69, line: 1352, type: !953)
!4726 = !DILocation(line: 1352, column: 44, scope: !4722)
!4727 = !DILocalVariable(name: "arg", arg: 3, scope: !4722, file: !69, line: 1352, type: !953)
!4728 = !DILocation(line: 1352, column: 61, scope: !4722)
!4729 = !DILocation(line: 1354, column: 33, scope: !4722)
!4730 = !DILocation(line: 1354, column: 41, scope: !4722)
!4731 = !DILocation(line: 1354, column: 46, scope: !4722)
!4732 = !DILocation(line: 1354, column: 12, scope: !4722)
!4733 = !DILocation(line: 1354, column: 5, scope: !4722)
!4734 = distinct !DISubprogram(name: "show_formats_devices", scope: !69, file: !69, line: 1289, type: !4735, isLocal: true, isDefinition: true, scopeLine: 1290, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!4735 = !DISubroutineType(types: !4736)
!4736 = !{!969, !960, !953, !953, !969, !969}
!4737 = !DILocalVariable(name: "optctx", arg: 1, scope: !4734, file: !69, line: 1289, type: !960)
!4738 = !DILocation(line: 1289, column: 39, scope: !4734)
!4739 = !DILocalVariable(name: "opt", arg: 2, scope: !4734, file: !69, line: 1289, type: !953)
!4740 = !DILocation(line: 1289, column: 59, scope: !4734)
!4741 = !DILocalVariable(name: "arg", arg: 3, scope: !4734, file: !69, line: 1289, type: !953)
!4742 = !DILocation(line: 1289, column: 76, scope: !4734)
!4743 = !DILocalVariable(name: "device_only", arg: 4, scope: !4734, file: !69, line: 1289, type: !969)
!4744 = !DILocation(line: 1289, column: 85, scope: !4734)
!4745 = !DILocalVariable(name: "muxdemuxers", arg: 5, scope: !4734, file: !69, line: 1289, type: !969)
!4746 = !DILocation(line: 1289, column: 102, scope: !4734)
!4747 = !DILocalVariable(name: "ifmt_opaque", scope: !4734, file: !69, line: 1291, type: !960)
!4748 = !DILocation(line: 1291, column: 11, scope: !4734)
!4749 = !DILocalVariable(name: "ifmt", scope: !4734, file: !69, line: 1292, type: !4750)
!4750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4751, size: 64, align: 64)
!4751 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4752)
!4752 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVInputFormat", file: !1298, line: 777, baseType: !4753)
!4753 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVInputFormat", file: !1298, line: 633, size: 1344, align: 64, elements: !4754)
!4754 = !{!4755, !4756, !4757, !4758, !4759, !4765, !4766, !4767, !4769, !4770, !4771, !4784, !5727, !5728, !5729, !5733, !5737, !5738, !5739, !5743, !5744, !5745}
!4755 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4753, file: !1298, line: 638, baseType: !953, size: 64, align: 64)
!4756 = !DIDerivedType(tag: DW_TAG_member, name: "long_name", scope: !4753, file: !1298, line: 645, baseType: !953, size: 64, align: 64, offset: 64)
!4757 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4753, file: !1298, line: 652, baseType: !969, size: 32, align: 32, offset: 128)
!4758 = !DIDerivedType(tag: DW_TAG_member, name: "extensions", scope: !4753, file: !1298, line: 659, baseType: !953, size: 64, align: 64, offset: 192)
!4759 = !DIDerivedType(tag: DW_TAG_member, name: "codec_tag", scope: !4753, file: !1298, line: 661, baseType: !4760, size: 64, align: 64, offset: 256)
!4760 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4761, size: 64, align: 64)
!4761 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4762)
!4762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4763, size: 64, align: 64)
!4763 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4764)
!4764 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecTag", file: !1298, line: 443, flags: DIFlagFwdDecl)
!4765 = !DIDerivedType(tag: DW_TAG_member, name: "priv_class", scope: !4753, file: !1298, line: 663, baseType: !947, size: 64, align: 64, offset: 320)
!4766 = !DIDerivedType(tag: DW_TAG_member, name: "mime_type", scope: !4753, file: !1298, line: 670, baseType: !953, size: 64, align: 64, offset: 384)
!4767 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4753, file: !1298, line: 679, baseType: !4768, size: 64, align: 64, offset: 448)
!4768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4753, size: 64, align: 64)
!4769 = !DIDerivedType(tag: DW_TAG_member, name: "raw_codec_id", scope: !4753, file: !1298, line: 684, baseType: !969, size: 32, align: 32, offset: 512)
!4770 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data_size", scope: !4753, file: !1298, line: 689, baseType: !969, size: 32, align: 32, offset: 544)
!4771 = !DIDerivedType(tag: DW_TAG_member, name: "read_probe", scope: !4753, file: !1298, line: 696, baseType: !4772, size: 64, align: 64, offset: 576)
!4772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4773, size: 64, align: 64)
!4773 = !DISubroutineType(types: !4774)
!4774 = !{!969, !4775}
!4775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4776, size: 64, align: 64)
!4776 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVProbeData", file: !1298, line: 453, baseType: !4777)
!4777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVProbeData", file: !1298, line: 448, size: 256, align: 64, elements: !4778)
!4778 = !{!4779, !4780, !4782, !4783}
!4779 = !DIDerivedType(tag: DW_TAG_member, name: "filename", scope: !4777, file: !1298, line: 449, baseType: !953, size: 64, align: 64)
!4780 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !4777, file: !1298, line: 450, baseType: !4781, size: 64, align: 64, offset: 64)
!4781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1152, size: 64, align: 64)
!4782 = !DIDerivedType(tag: DW_TAG_member, name: "buf_size", scope: !4777, file: !1298, line: 451, baseType: !969, size: 32, align: 32, offset: 128)
!4783 = !DIDerivedType(tag: DW_TAG_member, name: "mime_type", scope: !4777, file: !1298, line: 452, baseType: !953, size: 64, align: 64, offset: 192)
!4784 = !DIDerivedType(tag: DW_TAG_member, name: "read_header", scope: !4753, file: !1298, line: 703, baseType: !4785, size: 64, align: 64, offset: 640)
!4785 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4786, size: 64, align: 64)
!4786 = !DISubroutineType(types: !4787)
!4787 = !{!969, !4788}
!4788 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4789, size: 64, align: 64)
!4789 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVFormatContext", file: !1298, line: 1337, size: 11968, align: 64, elements: !4790)
!4790 = !{!4791, !4792, !4793, !4912, !4913, !4978, !4979, !4980, !5605, !5609, !5610, !5611, !5612, !5613, !5614, !5615, !5616, !5617, !5618, !5619, !5620, !5621, !5642, !5643, !5644, !5645, !5646, !5647, !5648, !5659, !5660, !5661, !5662, !5663, !5669, !5670, !5671, !5672, !5673, !5674, !5675, !5676, !5677, !5678, !5679, !5680, !5681, !5682, !5683, !5684, !5685, !5686, !5687, !5688, !5689, !5690, !5694, !5695, !5698, !5699, !5700, !5701, !5702, !5703, !5705, !5706, !5707, !5708, !5715, !5716, !5720, !5724, !5725, !5726}
!4791 = !DIDerivedType(tag: DW_TAG_member, name: "av_class", scope: !4789, file: !1298, line: 1342, baseType: !947, size: 64, align: 64)
!4792 = !DIDerivedType(tag: DW_TAG_member, name: "iformat", scope: !4789, file: !1298, line: 1349, baseType: !4768, size: 64, align: 64, offset: 64)
!4793 = !DIDerivedType(tag: DW_TAG_member, name: "oformat", scope: !4789, file: !1298, line: 1356, baseType: !4794, size: 64, align: 64, offset: 128)
!4794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4795, size: 64, align: 64)
!4795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVOutputFormat", file: !1298, line: 497, size: 1600, align: 64, elements: !4796)
!4796 = !{!4797, !4798, !4799, !4800, !4801, !4802, !4803, !4804, !4805, !4806, !4807, !4808, !4809, !4810, !4837, !4838, !4842, !4846, !4850, !4854, !4859, !4877, !4899, !4900, !4901, !4902, !4906}
!4797 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4795, file: !1298, line: 498, baseType: !953, size: 64, align: 64)
!4798 = !DIDerivedType(tag: DW_TAG_member, name: "long_name", scope: !4795, file: !1298, line: 504, baseType: !953, size: 64, align: 64, offset: 64)
!4799 = !DIDerivedType(tag: DW_TAG_member, name: "mime_type", scope: !4795, file: !1298, line: 505, baseType: !953, size: 64, align: 64, offset: 128)
!4800 = !DIDerivedType(tag: DW_TAG_member, name: "extensions", scope: !4795, file: !1298, line: 506, baseType: !953, size: 64, align: 64, offset: 192)
!4801 = !DIDerivedType(tag: DW_TAG_member, name: "audio_codec", scope: !4795, file: !1298, line: 508, baseType: !74, size: 32, align: 32, offset: 256)
!4802 = !DIDerivedType(tag: DW_TAG_member, name: "video_codec", scope: !4795, file: !1298, line: 509, baseType: !74, size: 32, align: 32, offset: 288)
!4803 = !DIDerivedType(tag: DW_TAG_member, name: "subtitle_codec", scope: !4795, file: !1298, line: 510, baseType: !74, size: 32, align: 32, offset: 320)
!4804 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4795, file: !1298, line: 517, baseType: !969, size: 32, align: 32, offset: 352)
!4805 = !DIDerivedType(tag: DW_TAG_member, name: "codec_tag", scope: !4795, file: !1298, line: 523, baseType: !4760, size: 64, align: 64, offset: 384)
!4806 = !DIDerivedType(tag: DW_TAG_member, name: "priv_class", scope: !4795, file: !1298, line: 526, baseType: !947, size: 64, align: 64, offset: 448)
!4807 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4795, file: !1298, line: 535, baseType: !4794, size: 64, align: 64, offset: 512)
!4808 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data_size", scope: !4795, file: !1298, line: 539, baseType: !969, size: 32, align: 32, offset: 576)
!4809 = !DIDerivedType(tag: DW_TAG_member, name: "write_header", scope: !4795, file: !1298, line: 541, baseType: !4785, size: 64, align: 64, offset: 640)
!4810 = !DIDerivedType(tag: DW_TAG_member, name: "write_packet", scope: !4795, file: !1298, line: 549, baseType: !4811, size: 64, align: 64, offset: 704)
!4811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4812, size: 64, align: 64)
!4812 = !DISubroutineType(types: !4813)
!4813 = !{!969, !4788, !4814}
!4814 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4815, size: 64, align: 64)
!4815 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVPacket", file: !75, line: 1499, baseType: !4816)
!4816 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVPacket", file: !75, line: 1445, size: 704, align: 64, elements: !4817)
!4817 = !{!4818, !4819, !4820, !4821, !4822, !4823, !4824, !4825, !4833, !4834, !4835, !4836}
!4818 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !4816, file: !75, line: 1451, baseType: !1140, size: 64, align: 64)
!4819 = !DIDerivedType(tag: DW_TAG_member, name: "pts", scope: !4816, file: !75, line: 1461, baseType: !975, size: 64, align: 64, offset: 64)
!4820 = !DIDerivedType(tag: DW_TAG_member, name: "dts", scope: !4816, file: !75, line: 1467, baseType: !975, size: 64, align: 64, offset: 128)
!4821 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !4816, file: !75, line: 1468, baseType: !1150, size: 64, align: 64, offset: 192)
!4822 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4816, file: !75, line: 1469, baseType: !969, size: 32, align: 32, offset: 256)
!4823 = !DIDerivedType(tag: DW_TAG_member, name: "stream_index", scope: !4816, file: !75, line: 1470, baseType: !969, size: 32, align: 32, offset: 288)
!4824 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4816, file: !75, line: 1474, baseType: !969, size: 32, align: 32, offset: 320)
!4825 = !DIDerivedType(tag: DW_TAG_member, name: "side_data", scope: !4816, file: !75, line: 1479, baseType: !4826, size: 64, align: 64, offset: 384)
!4826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4827, size: 64, align: 64)
!4827 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVPacketSideData", file: !75, line: 1415, baseType: !4828)
!4828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVPacketSideData", file: !75, line: 1411, size: 128, align: 64, elements: !4829)
!4829 = !{!4830, !4831, !4832}
!4830 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !4828, file: !75, line: 1412, baseType: !1150, size: 64, align: 64)
!4831 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4828, file: !75, line: 1413, baseType: !969, size: 32, align: 32, offset: 64)
!4832 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4828, file: !75, line: 1414, baseType: !901, size: 32, align: 32, offset: 96)
!4833 = !DIDerivedType(tag: DW_TAG_member, name: "side_data_elems", scope: !4816, file: !75, line: 1480, baseType: !969, size: 32, align: 32, offset: 448)
!4834 = !DIDerivedType(tag: DW_TAG_member, name: "duration", scope: !4816, file: !75, line: 1486, baseType: !975, size: 64, align: 64, offset: 512)
!4835 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !4816, file: !75, line: 1488, baseType: !975, size: 64, align: 64, offset: 576)
!4836 = !DIDerivedType(tag: DW_TAG_member, name: "convergence_duration", scope: !4816, file: !75, line: 1497, baseType: !975, size: 64, align: 64, offset: 640)
!4837 = !DIDerivedType(tag: DW_TAG_member, name: "write_trailer", scope: !4795, file: !1298, line: 550, baseType: !4785, size: 64, align: 64, offset: 768)
!4838 = !DIDerivedType(tag: DW_TAG_member, name: "interleave_packet", scope: !4795, file: !1298, line: 554, baseType: !4839, size: 64, align: 64, offset: 832)
!4839 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4840, size: 64, align: 64)
!4840 = !DISubroutineType(types: !4841)
!4841 = !{!969, !4788, !4814, !4814, !969}
!4842 = !DIDerivedType(tag: DW_TAG_member, name: "query_codec", scope: !4795, file: !1298, line: 563, baseType: !4843, size: 64, align: 64, offset: 896)
!4843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4844, size: 64, align: 64)
!4844 = !DISubroutineType(types: !4845)
!4845 = !{!969, !74, !969}
!4846 = !DIDerivedType(tag: DW_TAG_member, name: "get_output_timestamp", scope: !4795, file: !1298, line: 565, baseType: !4847, size: 64, align: 64, offset: 960)
!4847 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4848, size: 64, align: 64)
!4848 = !DISubroutineType(types: !4849)
!4849 = !{null, !4788, !969, !1335, !1335}
!4850 = !DIDerivedType(tag: DW_TAG_member, name: "control_message", scope: !4795, file: !1298, line: 570, baseType: !4851, size: 64, align: 64, offset: 1024)
!4851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4852, size: 64, align: 64)
!4852 = !DISubroutineType(types: !4853)
!4853 = !{!969, !4788, !969, !960, !1264}
!4854 = !DIDerivedType(tag: DW_TAG_member, name: "write_uncoded_frame", scope: !4795, file: !1298, line: 581, baseType: !4855, size: 64, align: 64, offset: 1088)
!4855 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4856, size: 64, align: 64)
!4856 = !DISubroutineType(types: !4857)
!4857 = !{!969, !4788, !969, !4858, !1090}
!4858 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1189, size: 64, align: 64)
!4859 = !DIDerivedType(tag: DW_TAG_member, name: "get_device_list", scope: !4795, file: !1298, line: 587, baseType: !4860, size: 64, align: 64, offset: 1152)
!4860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4861, size: 64, align: 64)
!4861 = !DISubroutineType(types: !4862)
!4862 = !{!969, !4788, !4863}
!4863 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4864, size: 64, align: 64)
!4864 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVDeviceInfoList", file: !4865, line: 460, size: 128, align: 64, elements: !4866)
!4865 = !DIFile(filename: "./libavdevice/avdevice.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!4866 = !{!4867, !4875, !4876}
!4867 = !DIDerivedType(tag: DW_TAG_member, name: "devices", scope: !4864, file: !4865, line: 461, baseType: !4868, size: 64, align: 64)
!4868 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4869, size: 64, align: 64)
!4869 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4870, size: 64, align: 64)
!4870 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVDeviceInfo", file: !4865, line: 455, baseType: !4871)
!4871 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVDeviceInfo", file: !4865, line: 452, size: 128, align: 64, elements: !4872)
!4872 = !{!4873, !4874}
!4873 = !DIDerivedType(tag: DW_TAG_member, name: "device_name", scope: !4871, file: !4865, line: 453, baseType: !1076, size: 64, align: 64)
!4874 = !DIDerivedType(tag: DW_TAG_member, name: "device_description", scope: !4871, file: !4865, line: 454, baseType: !1076, size: 64, align: 64, offset: 64)
!4875 = !DIDerivedType(tag: DW_TAG_member, name: "nb_devices", scope: !4864, file: !4865, line: 462, baseType: !969, size: 32, align: 32, offset: 64)
!4876 = !DIDerivedType(tag: DW_TAG_member, name: "default_device", scope: !4864, file: !4865, line: 463, baseType: !969, size: 32, align: 32, offset: 96)
!4877 = !DIDerivedType(tag: DW_TAG_member, name: "create_device_capabilities", scope: !4795, file: !1298, line: 592, baseType: !4878, size: 64, align: 64, offset: 1216)
!4878 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4879, size: 64, align: 64)
!4879 = !DISubroutineType(types: !4880)
!4880 = !{!969, !4788, !4881}
!4881 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4882, size: 64, align: 64)
!4882 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVDeviceCapabilitiesQuery", file: !4865, line: 400, size: 576, align: 64, elements: !4883)
!4883 = !{!4884, !4885, !4888, !4889, !4890, !4891, !4892, !4893, !4894, !4895, !4896, !4897, !4898}
!4884 = !DIDerivedType(tag: DW_TAG_member, name: "av_class", scope: !4882, file: !4865, line: 401, baseType: !947, size: 64, align: 64)
!4885 = !DIDerivedType(tag: DW_TAG_member, name: "device_context", scope: !4882, file: !4865, line: 402, baseType: !4886, size: 64, align: 64, offset: 64)
!4886 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4887, size: 64, align: 64)
!4887 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFormatContext", file: !1298, line: 1947, baseType: !4789)
!4888 = !DIDerivedType(tag: DW_TAG_member, name: "codec", scope: !4882, file: !4865, line: 403, baseType: !74, size: 32, align: 32, offset: 128)
!4889 = !DIDerivedType(tag: DW_TAG_member, name: "sample_format", scope: !4882, file: !4865, line: 404, baseType: !744, size: 32, align: 32, offset: 160)
!4890 = !DIDerivedType(tag: DW_TAG_member, name: "pixel_format", scope: !4882, file: !4865, line: 405, baseType: !544, size: 32, align: 32, offset: 192)
!4891 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !4882, file: !4865, line: 406, baseType: !969, size: 32, align: 32, offset: 224)
!4892 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !4882, file: !4865, line: 407, baseType: !969, size: 32, align: 32, offset: 256)
!4893 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layout", scope: !4882, file: !4865, line: 408, baseType: !975, size: 64, align: 64, offset: 320)
!4894 = !DIDerivedType(tag: DW_TAG_member, name: "window_width", scope: !4882, file: !4865, line: 409, baseType: !969, size: 32, align: 32, offset: 384)
!4895 = !DIDerivedType(tag: DW_TAG_member, name: "window_height", scope: !4882, file: !4865, line: 410, baseType: !969, size: 32, align: 32, offset: 416)
!4896 = !DIDerivedType(tag: DW_TAG_member, name: "frame_width", scope: !4882, file: !4865, line: 411, baseType: !969, size: 32, align: 32, offset: 448)
!4897 = !DIDerivedType(tag: DW_TAG_member, name: "frame_height", scope: !4882, file: !4865, line: 412, baseType: !969, size: 32, align: 32, offset: 480)
!4898 = !DIDerivedType(tag: DW_TAG_member, name: "fps", scope: !4882, file: !4865, line: 413, baseType: !982, size: 64, align: 32, offset: 512)
!4899 = !DIDerivedType(tag: DW_TAG_member, name: "free_device_capabilities", scope: !4795, file: !1298, line: 597, baseType: !4878, size: 64, align: 64, offset: 1280)
!4900 = !DIDerivedType(tag: DW_TAG_member, name: "data_codec", scope: !4795, file: !1298, line: 598, baseType: !74, size: 32, align: 32, offset: 1344)
!4901 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !4795, file: !1298, line: 608, baseType: !4785, size: 64, align: 64, offset: 1408)
!4902 = !DIDerivedType(tag: DW_TAG_member, name: "deinit", scope: !4795, file: !1298, line: 617, baseType: !4903, size: 64, align: 64, offset: 1472)
!4903 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4904, size: 64, align: 64)
!4904 = !DISubroutineType(types: !4905)
!4905 = !{null, !4788}
!4906 = !DIDerivedType(tag: DW_TAG_member, name: "check_bitstream", scope: !4795, file: !1298, line: 623, baseType: !4907, size: 64, align: 64, offset: 1536)
!4907 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4908, size: 64, align: 64)
!4908 = !DISubroutineType(types: !4909)
!4909 = !{!969, !4788, !4910}
!4910 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4911, size: 64, align: 64)
!4911 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4815)
!4912 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data", scope: !4789, file: !1298, line: 1365, baseType: !960, size: 64, align: 64, offset: 192)
!4913 = !DIDerivedType(tag: DW_TAG_member, name: "pb", scope: !4789, file: !1298, line: 1379, baseType: !4914, size: 64, align: 64, offset: 256)
!4914 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4915, size: 64, align: 64)
!4915 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVIOContext", file: !1289, line: 352, baseType: !4916)
!4916 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVIOContext", file: !1289, line: 161, size: 2112, align: 64, elements: !4917)
!4917 = !{!4918, !4919, !4920, !4921, !4922, !4923, !4924, !4928, !4929, !4933, !4934, !4935, !4936, !4937, !4938, !4939, !4945, !4946, !4950, !4954, !4955, !4956, !4957, !4958, !4959, !4960, !4961, !4962, !4963, !4964, !4968, !4969, !4970, !4971, !4975, !4976, !4977}
!4918 = !DIDerivedType(tag: DW_TAG_member, name: "av_class", scope: !4916, file: !1289, line: 174, baseType: !947, size: 64, align: 64)
!4919 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !4916, file: !1289, line: 226, baseType: !4781, size: 64, align: 64, offset: 64)
!4920 = !DIDerivedType(tag: DW_TAG_member, name: "buffer_size", scope: !4916, file: !1289, line: 227, baseType: !969, size: 32, align: 32, offset: 128)
!4921 = !DIDerivedType(tag: DW_TAG_member, name: "buf_ptr", scope: !4916, file: !1289, line: 228, baseType: !4781, size: 64, align: 64, offset: 192)
!4922 = !DIDerivedType(tag: DW_TAG_member, name: "buf_end", scope: !4916, file: !1289, line: 229, baseType: !4781, size: 64, align: 64, offset: 256)
!4923 = !DIDerivedType(tag: DW_TAG_member, name: "opaque", scope: !4916, file: !1289, line: 233, baseType: !960, size: 64, align: 64, offset: 320)
!4924 = !DIDerivedType(tag: DW_TAG_member, name: "read_packet", scope: !4916, file: !1289, line: 235, baseType: !4925, size: 64, align: 64, offset: 384)
!4925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4926, size: 64, align: 64)
!4926 = !DISubroutineType(types: !4927)
!4927 = !{!969, !960, !1150, !969}
!4928 = !DIDerivedType(tag: DW_TAG_member, name: "write_packet", scope: !4916, file: !1289, line: 236, baseType: !4925, size: 64, align: 64, offset: 448)
!4929 = !DIDerivedType(tag: DW_TAG_member, name: "seek", scope: !4916, file: !1289, line: 237, baseType: !4930, size: 64, align: 64, offset: 512)
!4930 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4931, size: 64, align: 64)
!4931 = !DISubroutineType(types: !4932)
!4932 = !{!975, !960, !975, !969}
!4933 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !4916, file: !1289, line: 238, baseType: !975, size: 64, align: 64, offset: 576)
!4934 = !DIDerivedType(tag: DW_TAG_member, name: "eof_reached", scope: !4916, file: !1289, line: 239, baseType: !969, size: 32, align: 32, offset: 640)
!4935 = !DIDerivedType(tag: DW_TAG_member, name: "write_flag", scope: !4916, file: !1289, line: 240, baseType: !969, size: 32, align: 32, offset: 672)
!4936 = !DIDerivedType(tag: DW_TAG_member, name: "max_packet_size", scope: !4916, file: !1289, line: 241, baseType: !969, size: 32, align: 32, offset: 704)
!4937 = !DIDerivedType(tag: DW_TAG_member, name: "checksum", scope: !4916, file: !1289, line: 242, baseType: !1166, size: 64, align: 64, offset: 768)
!4938 = !DIDerivedType(tag: DW_TAG_member, name: "checksum_ptr", scope: !4916, file: !1289, line: 243, baseType: !4781, size: 64, align: 64, offset: 832)
!4939 = !DIDerivedType(tag: DW_TAG_member, name: "update_checksum", scope: !4916, file: !1289, line: 244, baseType: !4940, size: 64, align: 64, offset: 896)
!4940 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4941, size: 64, align: 64)
!4941 = !DISubroutineType(types: !4942)
!4942 = !{!1166, !1166, !4943, !1090}
!4943 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4944, size: 64, align: 64)
!4944 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1151)
!4945 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !4916, file: !1289, line: 245, baseType: !969, size: 32, align: 32, offset: 960)
!4946 = !DIDerivedType(tag: DW_TAG_member, name: "read_pause", scope: !4916, file: !1289, line: 249, baseType: !4947, size: 64, align: 64, offset: 1024)
!4947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4948, size: 64, align: 64)
!4948 = !DISubroutineType(types: !4949)
!4949 = !{!969, !960, !969}
!4950 = !DIDerivedType(tag: DW_TAG_member, name: "read_seek", scope: !4916, file: !1289, line: 255, baseType: !4951, size: 64, align: 64, offset: 1088)
!4951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4952, size: 64, align: 64)
!4952 = !DISubroutineType(types: !4953)
!4953 = !{!975, !960, !969, !975, !969}
!4954 = !DIDerivedType(tag: DW_TAG_member, name: "seekable", scope: !4916, file: !1289, line: 260, baseType: !969, size: 32, align: 32, offset: 1152)
!4955 = !DIDerivedType(tag: DW_TAG_member, name: "maxsize", scope: !4916, file: !1289, line: 266, baseType: !975, size: 64, align: 64, offset: 1216)
!4956 = !DIDerivedType(tag: DW_TAG_member, name: "direct", scope: !4916, file: !1289, line: 273, baseType: !969, size: 32, align: 32, offset: 1280)
!4957 = !DIDerivedType(tag: DW_TAG_member, name: "bytes_read", scope: !4916, file: !1289, line: 279, baseType: !975, size: 64, align: 64, offset: 1344)
!4958 = !DIDerivedType(tag: DW_TAG_member, name: "seek_count", scope: !4916, file: !1289, line: 285, baseType: !969, size: 32, align: 32, offset: 1408)
!4959 = !DIDerivedType(tag: DW_TAG_member, name: "writeout_count", scope: !4916, file: !1289, line: 291, baseType: !969, size: 32, align: 32, offset: 1440)
!4960 = !DIDerivedType(tag: DW_TAG_member, name: "orig_buffer_size", scope: !4916, file: !1289, line: 298, baseType: !969, size: 32, align: 32, offset: 1472)
!4961 = !DIDerivedType(tag: DW_TAG_member, name: "short_seek_threshold", scope: !4916, file: !1289, line: 304, baseType: !969, size: 32, align: 32, offset: 1504)
!4962 = !DIDerivedType(tag: DW_TAG_member, name: "protocol_whitelist", scope: !4916, file: !1289, line: 309, baseType: !953, size: 64, align: 64, offset: 1536)
!4963 = !DIDerivedType(tag: DW_TAG_member, name: "protocol_blacklist", scope: !4916, file: !1289, line: 314, baseType: !953, size: 64, align: 64, offset: 1600)
!4964 = !DIDerivedType(tag: DW_TAG_member, name: "write_data_type", scope: !4916, file: !1289, line: 319, baseType: !4965, size: 64, align: 64, offset: 1664)
!4965 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4966, size: 64, align: 64)
!4966 = !DISubroutineType(types: !4967)
!4967 = !{!969, !960, !1150, !969, !1288, !975}
!4968 = !DIDerivedType(tag: DW_TAG_member, name: "ignore_boundary_point", scope: !4916, file: !1289, line: 326, baseType: !969, size: 32, align: 32, offset: 1728)
!4969 = !DIDerivedType(tag: DW_TAG_member, name: "current_type", scope: !4916, file: !1289, line: 331, baseType: !1288, size: 32, align: 32, offset: 1760)
!4970 = !DIDerivedType(tag: DW_TAG_member, name: "last_time", scope: !4916, file: !1289, line: 332, baseType: !975, size: 64, align: 64, offset: 1792)
!4971 = !DIDerivedType(tag: DW_TAG_member, name: "short_seek_get", scope: !4916, file: !1289, line: 338, baseType: !4972, size: 64, align: 64, offset: 1856)
!4972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4973, size: 64, align: 64)
!4973 = !DISubroutineType(types: !4974)
!4974 = !{!969, !960}
!4975 = !DIDerivedType(tag: DW_TAG_member, name: "written", scope: !4916, file: !1289, line: 340, baseType: !975, size: 64, align: 64, offset: 1920)
!4976 = !DIDerivedType(tag: DW_TAG_member, name: "buf_ptr_max", scope: !4916, file: !1289, line: 346, baseType: !4781, size: 64, align: 64, offset: 1984)
!4977 = !DIDerivedType(tag: DW_TAG_member, name: "min_packet_size", scope: !4916, file: !1289, line: 351, baseType: !969, size: 32, align: 32, offset: 2048)
!4978 = !DIDerivedType(tag: DW_TAG_member, name: "ctx_flags", scope: !4789, file: !1298, line: 1386, baseType: !969, size: 32, align: 32, offset: 320)
!4979 = !DIDerivedType(tag: DW_TAG_member, name: "nb_streams", scope: !4789, file: !1298, line: 1393, baseType: !1090, size: 32, align: 32, offset: 352)
!4980 = !DIDerivedType(tag: DW_TAG_member, name: "streams", scope: !4789, file: !1298, line: 1405, baseType: !4981, size: 64, align: 64, offset: 384)
!4981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4982, size: 64, align: 64)
!4982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4983, size: 64, align: 64)
!4983 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVStream", file: !1298, line: 1223, baseType: !4984)
!4984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVStream", file: !1298, line: 865, size: 6144, align: 64, elements: !4985)
!4985 = !{!4986, !4987, !4988, !5405, !5406, !5407, !5408, !5409, !5410, !5411, !5412, !5413, !5414, !5415, !5416, !5417, !5418, !5419, !5420, !5421, !5455, !5478, !5479, !5480, !5481, !5482, !5483, !5484, !5485, !5486, !5555, !5561, !5562, !5564, !5574, !5575, !5576, !5577, !5578, !5579, !5580, !5581, !5582, !5583, !5584, !5585, !5586, !5587, !5588, !5589, !5590, !5591, !5592, !5593, !5594, !5596, !5597, !5598, !5599, !5600, !5601}
!4986 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4984, file: !1298, line: 866, baseType: !969, size: 32, align: 32)
!4987 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !4984, file: !1298, line: 872, baseType: !969, size: 32, align: 32, offset: 32)
!4988 = !DIDerivedType(tag: DW_TAG_member, name: "codec", scope: !4984, file: !1298, line: 878, baseType: !4989, size: 64, align: 64, offset: 64)
!4989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4990, size: 64, align: 64)
!4990 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodecContext", file: !75, line: 3360, baseType: !4991)
!4991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecContext", file: !75, line: 1556, size: 8448, align: 64, elements: !4992)
!4992 = !{!4993, !4994, !4995, !4996, !5131, !5132, !5133, !5134, !5137, !5138, !5139, !5140, !5141, !5142, !5143, !5144, !5145, !5146, !5147, !5148, !5149, !5150, !5151, !5152, !5153, !5154, !5155, !5160, !5164, !5165, !5166, !5167, !5168, !5169, !5170, !5171, !5172, !5173, !5174, !5175, !5176, !5177, !5178, !5179, !5180, !5181, !5182, !5183, !5184, !5185, !5186, !5187, !5188, !5189, !5190, !5191, !5192, !5193, !5194, !5196, !5197, !5198, !5199, !5200, !5201, !5202, !5203, !5204, !5205, !5206, !5207, !5208, !5209, !5210, !5211, !5212, !5213, !5214, !5215, !5216, !5217, !5218, !5219, !5220, !5221, !5222, !5223, !5224, !5225, !5226, !5227, !5228, !5229, !5230, !5234, !5235, !5236, !5237, !5238, !5239, !5240, !5241, !5242, !5251, !5252, !5253, !5254, !5255, !5256, !5257, !5258, !5259, !5260, !5261, !5262, !5263, !5264, !5265, !5266, !5270, !5271, !5272, !5273, !5274, !5275, !5276, !5277, !5278, !5279, !5280, !5281, !5282, !5283, !5284, !5285, !5286, !5287, !5288, !5324, !5325, !5326, !5327, !5328, !5329, !5330, !5331, !5332, !5333, !5334, !5335, !5336, !5343, !5350, !5351, !5352, !5353, !5354, !5355, !5356, !5357, !5358, !5359, !5360, !5361, !5362, !5363, !5364, !5381, !5382, !5383, !5384, !5385, !5386, !5387, !5388, !5389, !5390, !5391, !5392, !5393, !5394, !5395, !5396, !5397, !5398, !5399, !5400, !5401, !5402, !5403, !5404}
!4993 = !DIDerivedType(tag: DW_TAG_member, name: "av_class", scope: !4991, file: !75, line: 1561, baseType: !947, size: 64, align: 64)
!4994 = !DIDerivedType(tag: DW_TAG_member, name: "log_level_offset", scope: !4991, file: !75, line: 1562, baseType: !969, size: 32, align: 32, offset: 64)
!4995 = !DIDerivedType(tag: DW_TAG_member, name: "codec_type", scope: !4991, file: !75, line: 1564, baseType: !534, size: 32, align: 32, offset: 96)
!4996 = !DIDerivedType(tag: DW_TAG_member, name: "codec", scope: !4991, file: !75, line: 1565, baseType: !4997, size: 64, align: 64, offset: 128)
!4997 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4998, size: 64, align: 64)
!4998 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4999)
!4999 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodec", file: !75, line: 3468, size: 1984, align: 64, elements: !5000)
!5000 = !{!5001, !5002, !5003, !5004, !5005, !5006, !5009, !5012, !5015, !5018, !5021, !5022, !5023, !5031, !5032, !5033, !5035, !5039, !5045, !5050, !5054, !5055, !5097, !5103, !5107, !5108, !5112, !5116, !5120, !5124, !5125, !5126}
!5001 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4999, file: !75, line: 3475, baseType: !953, size: 64, align: 64)
!5002 = !DIDerivedType(tag: DW_TAG_member, name: "long_name", scope: !4999, file: !75, line: 3480, baseType: !953, size: 64, align: 64, offset: 64)
!5003 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4999, file: !75, line: 3481, baseType: !534, size: 32, align: 32, offset: 128)
!5004 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !4999, file: !75, line: 3482, baseType: !74, size: 32, align: 32, offset: 160)
!5005 = !DIDerivedType(tag: DW_TAG_member, name: "capabilities", scope: !4999, file: !75, line: 3487, baseType: !969, size: 32, align: 32, offset: 192)
!5006 = !DIDerivedType(tag: DW_TAG_member, name: "supported_framerates", scope: !4999, file: !75, line: 3488, baseType: !5007, size: 64, align: 64, offset: 256)
!5007 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5008, size: 64, align: 64)
!5008 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !982)
!5009 = !DIDerivedType(tag: DW_TAG_member, name: "pix_fmts", scope: !4999, file: !75, line: 3489, baseType: !5010, size: 64, align: 64, offset: 320)
!5010 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5011, size: 64, align: 64)
!5011 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !544)
!5012 = !DIDerivedType(tag: DW_TAG_member, name: "supported_samplerates", scope: !4999, file: !75, line: 3490, baseType: !5013, size: 64, align: 64, offset: 384)
!5013 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5014, size: 64, align: 64)
!5014 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !969)
!5015 = !DIDerivedType(tag: DW_TAG_member, name: "sample_fmts", scope: !4999, file: !75, line: 3491, baseType: !5016, size: 64, align: 64, offset: 448)
!5016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5017, size: 64, align: 64)
!5017 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !744)
!5018 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layouts", scope: !4999, file: !75, line: 3492, baseType: !5019, size: 64, align: 64, offset: 512)
!5019 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5020, size: 64, align: 64)
!5020 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1165)
!5021 = !DIDerivedType(tag: DW_TAG_member, name: "max_lowres", scope: !4999, file: !75, line: 3493, baseType: !1151, size: 8, align: 8, offset: 576)
!5022 = !DIDerivedType(tag: DW_TAG_member, name: "priv_class", scope: !4999, file: !75, line: 3494, baseType: !947, size: 64, align: 64, offset: 640)
!5023 = !DIDerivedType(tag: DW_TAG_member, name: "profiles", scope: !4999, file: !75, line: 3495, baseType: !5024, size: 64, align: 64, offset: 704)
!5024 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5025, size: 64, align: 64)
!5025 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5026)
!5026 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVProfile", file: !75, line: 3404, baseType: !5027)
!5027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVProfile", file: !75, line: 3401, size: 128, align: 64, elements: !5028)
!5028 = !{!5029, !5030}
!5029 = !DIDerivedType(tag: DW_TAG_member, name: "profile", scope: !5027, file: !75, line: 3402, baseType: !969, size: 32, align: 32)
!5030 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !5027, file: !75, line: 3403, baseType: !953, size: 64, align: 64, offset: 64)
!5031 = !DIDerivedType(tag: DW_TAG_member, name: "wrapper_name", scope: !4999, file: !75, line: 3507, baseType: !953, size: 64, align: 64, offset: 768)
!5032 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data_size", scope: !4999, file: !75, line: 3516, baseType: !969, size: 32, align: 32, offset: 832)
!5033 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4999, file: !75, line: 3517, baseType: !5034, size: 64, align: 64, offset: 896)
!5034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4999, size: 64, align: 64)
!5035 = !DIDerivedType(tag: DW_TAG_member, name: "init_thread_copy", scope: !4999, file: !75, line: 3527, baseType: !5036, size: 64, align: 64, offset: 960)
!5036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5037, size: 64, align: 64)
!5037 = !DISubroutineType(types: !5038)
!5038 = !{!969, !4989}
!5039 = !DIDerivedType(tag: DW_TAG_member, name: "update_thread_context", scope: !4999, file: !75, line: 3535, baseType: !5040, size: 64, align: 64, offset: 1024)
!5040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5041, size: 64, align: 64)
!5041 = !DISubroutineType(types: !5042)
!5042 = !{!969, !4989, !5043}
!5043 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5044, size: 64, align: 64)
!5044 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4990)
!5045 = !DIDerivedType(tag: DW_TAG_member, name: "defaults", scope: !4999, file: !75, line: 3541, baseType: !5046, size: 64, align: 64, offset: 1088)
!5046 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5047, size: 64, align: 64)
!5047 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5048)
!5048 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodecDefault", file: !75, line: 3461, baseType: !5049)
!5049 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecDefault", file: !75, line: 3461, flags: DIFlagFwdDecl)
!5050 = !DIDerivedType(tag: DW_TAG_member, name: "init_static_data", scope: !4999, file: !75, line: 3549, baseType: !5051, size: 64, align: 64, offset: 1152)
!5051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5052, size: 64, align: 64)
!5052 = !DISubroutineType(types: !5053)
!5053 = !{null, !5034}
!5054 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !4999, file: !75, line: 3551, baseType: !5036, size: 64, align: 64, offset: 1216)
!5055 = !DIDerivedType(tag: DW_TAG_member, name: "encode_sub", scope: !4999, file: !75, line: 3552, baseType: !5056, size: 64, align: 64, offset: 1280)
!5056 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5057, size: 64, align: 64)
!5057 = !DISubroutineType(types: !5058)
!5058 = !{!969, !4989, !1150, !969, !5059}
!5059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5060, size: 64, align: 64)
!5060 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5061)
!5061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVSubtitle", file: !75, line: 3920, size: 256, align: 64, elements: !5062)
!5062 = !{!5063, !5065, !5067, !5068, !5069, !5096}
!5063 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !5061, file: !75, line: 3921, baseType: !5064, size: 16, align: 16)
!5064 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !976, line: 49, baseType: !1393)
!5065 = !DIDerivedType(tag: DW_TAG_member, name: "start_display_time", scope: !5061, file: !75, line: 3922, baseType: !5066, size: 32, align: 32, offset: 32)
!5066 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !976, line: 51, baseType: !1090)
!5067 = !DIDerivedType(tag: DW_TAG_member, name: "end_display_time", scope: !5061, file: !75, line: 3923, baseType: !5066, size: 32, align: 32, offset: 64)
!5068 = !DIDerivedType(tag: DW_TAG_member, name: "num_rects", scope: !5061, file: !75, line: 3924, baseType: !1090, size: 32, align: 32, offset: 96)
!5069 = !DIDerivedType(tag: DW_TAG_member, name: "rects", scope: !5061, file: !75, line: 3925, baseType: !5070, size: 64, align: 64, offset: 128)
!5070 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5071, size: 64, align: 64)
!5071 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5072, size: 64, align: 64)
!5072 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVSubtitleRect", file: !75, line: 3918, baseType: !5073)
!5073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVSubtitleRect", file: !75, line: 3885, size: 1600, align: 64, elements: !5074)
!5074 = !{!5075, !5076, !5077, !5078, !5079, !5080, !5086, !5090, !5092, !5093, !5094, !5095}
!5075 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !5073, file: !75, line: 3886, baseType: !969, size: 32, align: 32)
!5076 = !DIDerivedType(tag: DW_TAG_member, name: "y", scope: !5073, file: !75, line: 3887, baseType: !969, size: 32, align: 32, offset: 32)
!5077 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !5073, file: !75, line: 3888, baseType: !969, size: 32, align: 32, offset: 64)
!5078 = !DIDerivedType(tag: DW_TAG_member, name: "h", scope: !5073, file: !75, line: 3889, baseType: !969, size: 32, align: 32, offset: 96)
!5079 = !DIDerivedType(tag: DW_TAG_member, name: "nb_colors", scope: !5073, file: !75, line: 3890, baseType: !969, size: 32, align: 32, offset: 128)
!5080 = !DIDerivedType(tag: DW_TAG_member, name: "pict", scope: !5073, file: !75, line: 3897, baseType: !5081, size: 768, align: 64, offset: 192)
!5081 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVPicture", file: !75, line: 3858, baseType: !5082)
!5082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVPicture", file: !75, line: 3853, size: 768, align: 64, elements: !5083)
!5083 = !{!5084, !5085}
!5084 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !5082, file: !75, line: 3855, baseType: !1194, size: 512, align: 64)
!5085 = !DIDerivedType(tag: DW_TAG_member, name: "linesize", scope: !5082, file: !75, line: 3857, baseType: !1198, size: 256, align: 32, offset: 512)
!5086 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !5073, file: !75, line: 3903, baseType: !5087, size: 256, align: 64, offset: 960)
!5087 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1150, size: 256, align: 64, elements: !5088)
!5088 = !{!5089}
!5089 = !DISubrange(count: 4)
!5090 = !DIDerivedType(tag: DW_TAG_member, name: "linesize", scope: !5073, file: !75, line: 3904, baseType: !5091, size: 128, align: 32, offset: 1216)
!5091 = !DICompositeType(tag: DW_TAG_array_type, baseType: !969, size: 128, align: 32, elements: !5088)
!5092 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !5073, file: !75, line: 3906, baseType: !931, size: 32, align: 32, offset: 1344)
!5093 = !DIDerivedType(tag: DW_TAG_member, name: "text", scope: !5073, file: !75, line: 3908, baseType: !1076, size: 64, align: 64, offset: 1408)
!5094 = !DIDerivedType(tag: DW_TAG_member, name: "ass", scope: !5073, file: !75, line: 3915, baseType: !1076, size: 64, align: 64, offset: 1472)
!5095 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5073, file: !75, line: 3917, baseType: !969, size: 32, align: 32, offset: 1536)
!5096 = !DIDerivedType(tag: DW_TAG_member, name: "pts", scope: !5061, file: !75, line: 3926, baseType: !975, size: 64, align: 64, offset: 192)
!5097 = !DIDerivedType(tag: DW_TAG_member, name: "encode2", scope: !4999, file: !75, line: 3564, baseType: !5098, size: 64, align: 64, offset: 1344)
!5098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5099, size: 64, align: 64)
!5099 = !DISubroutineType(types: !5100)
!5100 = !{!969, !4989, !4814, !5101, !1121}
!5101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5102, size: 64, align: 64)
!5102 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1190)
!5103 = !DIDerivedType(tag: DW_TAG_member, name: "decode", scope: !4999, file: !75, line: 3566, baseType: !5104, size: 64, align: 64, offset: 1408)
!5104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5105, size: 64, align: 64)
!5105 = !DISubroutineType(types: !5106)
!5106 = !{!969, !4989, !960, !1121, !4814}
!5107 = !DIDerivedType(tag: DW_TAG_member, name: "close", scope: !4999, file: !75, line: 3567, baseType: !5036, size: 64, align: 64, offset: 1472)
!5108 = !DIDerivedType(tag: DW_TAG_member, name: "send_frame", scope: !4999, file: !75, line: 3576, baseType: !5109, size: 64, align: 64, offset: 1536)
!5109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5110, size: 64, align: 64)
!5110 = !DISubroutineType(types: !5111)
!5111 = !{!969, !4989, !5101}
!5112 = !DIDerivedType(tag: DW_TAG_member, name: "receive_packet", scope: !4999, file: !75, line: 3577, baseType: !5113, size: 64, align: 64, offset: 1600)
!5113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5114, size: 64, align: 64)
!5114 = !DISubroutineType(types: !5115)
!5115 = !{!969, !4989, !4814}
!5116 = !DIDerivedType(tag: DW_TAG_member, name: "receive_frame", scope: !4999, file: !75, line: 3584, baseType: !5117, size: 64, align: 64, offset: 1664)
!5117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5118, size: 64, align: 64)
!5118 = !DISubroutineType(types: !5119)
!5119 = !{!969, !4989, !1189}
!5120 = !DIDerivedType(tag: DW_TAG_member, name: "flush", scope: !4999, file: !75, line: 3589, baseType: !5121, size: 64, align: 64, offset: 1728)
!5121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5122, size: 64, align: 64)
!5122 = !DISubroutineType(types: !5123)
!5123 = !{null, !4989}
!5124 = !DIDerivedType(tag: DW_TAG_member, name: "caps_internal", scope: !4999, file: !75, line: 3594, baseType: !969, size: 32, align: 32, offset: 1792)
!5125 = !DIDerivedType(tag: DW_TAG_member, name: "bsfs", scope: !4999, file: !75, line: 3600, baseType: !953, size: 64, align: 64, offset: 1856)
!5126 = !DIDerivedType(tag: DW_TAG_member, name: "hw_configs", scope: !4999, file: !75, line: 3609, baseType: !5127, size: 64, align: 64, offset: 1920)
!5127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5128, size: 64, align: 64)
!5128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5129, size: 64, align: 64)
!5129 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5130)
!5130 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecHWConfigInternal", file: !75, line: 3609, flags: DIFlagFwdDecl)
!5131 = !DIDerivedType(tag: DW_TAG_member, name: "codec_id", scope: !4991, file: !75, line: 1566, baseType: !74, size: 32, align: 32, offset: 192)
!5132 = !DIDerivedType(tag: DW_TAG_member, name: "codec_tag", scope: !4991, file: !75, line: 1581, baseType: !1090, size: 32, align: 32, offset: 224)
!5133 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data", scope: !4991, file: !75, line: 1583, baseType: !960, size: 64, align: 64, offset: 256)
!5134 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !4991, file: !75, line: 1591, baseType: !5135, size: 64, align: 64, offset: 320)
!5135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5136, size: 64, align: 64)
!5136 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecInternal", file: !75, line: 1532, flags: DIFlagFwdDecl)
!5137 = !DIDerivedType(tag: DW_TAG_member, name: "opaque", scope: !4991, file: !75, line: 1598, baseType: !960, size: 64, align: 64, offset: 384)
!5138 = !DIDerivedType(tag: DW_TAG_member, name: "bit_rate", scope: !4991, file: !75, line: 1606, baseType: !975, size: 64, align: 64, offset: 448)
!5139 = !DIDerivedType(tag: DW_TAG_member, name: "bit_rate_tolerance", scope: !4991, file: !75, line: 1614, baseType: !969, size: 32, align: 32, offset: 512)
!5140 = !DIDerivedType(tag: DW_TAG_member, name: "global_quality", scope: !4991, file: !75, line: 1622, baseType: !969, size: 32, align: 32, offset: 544)
!5141 = !DIDerivedType(tag: DW_TAG_member, name: "compression_level", scope: !4991, file: !75, line: 1628, baseType: !969, size: 32, align: 32, offset: 576)
!5142 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4991, file: !75, line: 1636, baseType: !969, size: 32, align: 32, offset: 608)
!5143 = !DIDerivedType(tag: DW_TAG_member, name: "flags2", scope: !4991, file: !75, line: 1643, baseType: !969, size: 32, align: 32, offset: 640)
!5144 = !DIDerivedType(tag: DW_TAG_member, name: "extradata", scope: !4991, file: !75, line: 1657, baseType: !1150, size: 64, align: 64, offset: 704)
!5145 = !DIDerivedType(tag: DW_TAG_member, name: "extradata_size", scope: !4991, file: !75, line: 1658, baseType: !969, size: 32, align: 32, offset: 768)
!5146 = !DIDerivedType(tag: DW_TAG_member, name: "time_base", scope: !4991, file: !75, line: 1679, baseType: !982, size: 64, align: 32, offset: 800)
!5147 = !DIDerivedType(tag: DW_TAG_member, name: "ticks_per_frame", scope: !4991, file: !75, line: 1688, baseType: !969, size: 32, align: 32, offset: 864)
!5148 = !DIDerivedType(tag: DW_TAG_member, name: "delay", scope: !4991, file: !75, line: 1712, baseType: !969, size: 32, align: 32, offset: 896)
!5149 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !4991, file: !75, line: 1729, baseType: !969, size: 32, align: 32, offset: 928)
!5150 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !4991, file: !75, line: 1729, baseType: !969, size: 32, align: 32, offset: 960)
!5151 = !DIDerivedType(tag: DW_TAG_member, name: "coded_width", scope: !4991, file: !75, line: 1744, baseType: !969, size: 32, align: 32, offset: 992)
!5152 = !DIDerivedType(tag: DW_TAG_member, name: "coded_height", scope: !4991, file: !75, line: 1744, baseType: !969, size: 32, align: 32, offset: 1024)
!5153 = !DIDerivedType(tag: DW_TAG_member, name: "gop_size", scope: !4991, file: !75, line: 1751, baseType: !969, size: 32, align: 32, offset: 1056)
!5154 = !DIDerivedType(tag: DW_TAG_member, name: "pix_fmt", scope: !4991, file: !75, line: 1766, baseType: !544, size: 32, align: 32, offset: 1088)
!5155 = !DIDerivedType(tag: DW_TAG_member, name: "draw_horiz_band", scope: !4991, file: !75, line: 1791, baseType: !5156, size: 64, align: 64, offset: 1152)
!5156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5157, size: 64, align: 64)
!5157 = !DISubroutineType(types: !5158)
!5158 = !{null, !5159, !5101, !1121, !969, !969, !969}
!5159 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4991, size: 64, align: 64)
!5160 = !DIDerivedType(tag: DW_TAG_member, name: "get_format", scope: !4991, file: !75, line: 1808, baseType: !5161, size: 64, align: 64, offset: 1216)
!5161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5162, size: 64, align: 64)
!5162 = !DISubroutineType(types: !5163)
!5163 = !{!544, !5159, !5010}
!5164 = !DIDerivedType(tag: DW_TAG_member, name: "max_b_frames", scope: !4991, file: !75, line: 1816, baseType: !969, size: 32, align: 32, offset: 1280)
!5165 = !DIDerivedType(tag: DW_TAG_member, name: "b_quant_factor", scope: !4991, file: !75, line: 1825, baseType: !1337, size: 32, align: 32, offset: 1312)
!5166 = !DIDerivedType(tag: DW_TAG_member, name: "b_frame_strategy", scope: !4991, file: !75, line: 1830, baseType: !969, size: 32, align: 32, offset: 1344)
!5167 = !DIDerivedType(tag: DW_TAG_member, name: "b_quant_offset", scope: !4991, file: !75, line: 1838, baseType: !1337, size: 32, align: 32, offset: 1376)
!5168 = !DIDerivedType(tag: DW_TAG_member, name: "has_b_frames", scope: !4991, file: !75, line: 1846, baseType: !969, size: 32, align: 32, offset: 1408)
!5169 = !DIDerivedType(tag: DW_TAG_member, name: "mpeg_quant", scope: !4991, file: !75, line: 1851, baseType: !969, size: 32, align: 32, offset: 1440)
!5170 = !DIDerivedType(tag: DW_TAG_member, name: "i_quant_factor", scope: !4991, file: !75, line: 1861, baseType: !1337, size: 32, align: 32, offset: 1472)
!5171 = !DIDerivedType(tag: DW_TAG_member, name: "i_quant_offset", scope: !4991, file: !75, line: 1868, baseType: !1337, size: 32, align: 32, offset: 1504)
!5172 = !DIDerivedType(tag: DW_TAG_member, name: "lumi_masking", scope: !4991, file: !75, line: 1875, baseType: !1337, size: 32, align: 32, offset: 1536)
!5173 = !DIDerivedType(tag: DW_TAG_member, name: "temporal_cplx_masking", scope: !4991, file: !75, line: 1882, baseType: !1337, size: 32, align: 32, offset: 1568)
!5174 = !DIDerivedType(tag: DW_TAG_member, name: "spatial_cplx_masking", scope: !4991, file: !75, line: 1889, baseType: !1337, size: 32, align: 32, offset: 1600)
!5175 = !DIDerivedType(tag: DW_TAG_member, name: "p_masking", scope: !4991, file: !75, line: 1896, baseType: !1337, size: 32, align: 32, offset: 1632)
!5176 = !DIDerivedType(tag: DW_TAG_member, name: "dark_masking", scope: !4991, file: !75, line: 1903, baseType: !1337, size: 32, align: 32, offset: 1664)
!5177 = !DIDerivedType(tag: DW_TAG_member, name: "slice_count", scope: !4991, file: !75, line: 1910, baseType: !969, size: 32, align: 32, offset: 1696)
!5178 = !DIDerivedType(tag: DW_TAG_member, name: "prediction_method", scope: !4991, file: !75, line: 1915, baseType: !969, size: 32, align: 32, offset: 1728)
!5179 = !DIDerivedType(tag: DW_TAG_member, name: "slice_offset", scope: !4991, file: !75, line: 1926, baseType: !1121, size: 64, align: 64, offset: 1792)
!5180 = !DIDerivedType(tag: DW_TAG_member, name: "sample_aspect_ratio", scope: !4991, file: !75, line: 1935, baseType: !982, size: 64, align: 32, offset: 1856)
!5181 = !DIDerivedType(tag: DW_TAG_member, name: "me_cmp", scope: !4991, file: !75, line: 1942, baseType: !969, size: 32, align: 32, offset: 1920)
!5182 = !DIDerivedType(tag: DW_TAG_member, name: "me_sub_cmp", scope: !4991, file: !75, line: 1948, baseType: !969, size: 32, align: 32, offset: 1952)
!5183 = !DIDerivedType(tag: DW_TAG_member, name: "mb_cmp", scope: !4991, file: !75, line: 1954, baseType: !969, size: 32, align: 32, offset: 1984)
!5184 = !DIDerivedType(tag: DW_TAG_member, name: "ildct_cmp", scope: !4991, file: !75, line: 1960, baseType: !969, size: 32, align: 32, offset: 2016)
!5185 = !DIDerivedType(tag: DW_TAG_member, name: "dia_size", scope: !4991, file: !75, line: 1984, baseType: !969, size: 32, align: 32, offset: 2048)
!5186 = !DIDerivedType(tag: DW_TAG_member, name: "last_predictor_count", scope: !4991, file: !75, line: 1991, baseType: !969, size: 32, align: 32, offset: 2080)
!5187 = !DIDerivedType(tag: DW_TAG_member, name: "pre_me", scope: !4991, file: !75, line: 1996, baseType: !969, size: 32, align: 32, offset: 2112)
!5188 = !DIDerivedType(tag: DW_TAG_member, name: "me_pre_cmp", scope: !4991, file: !75, line: 2004, baseType: !969, size: 32, align: 32, offset: 2144)
!5189 = !DIDerivedType(tag: DW_TAG_member, name: "pre_dia_size", scope: !4991, file: !75, line: 2011, baseType: !969, size: 32, align: 32, offset: 2176)
!5190 = !DIDerivedType(tag: DW_TAG_member, name: "me_subpel_quality", scope: !4991, file: !75, line: 2018, baseType: !969, size: 32, align: 32, offset: 2208)
!5191 = !DIDerivedType(tag: DW_TAG_member, name: "me_range", scope: !4991, file: !75, line: 2027, baseType: !969, size: 32, align: 32, offset: 2240)
!5192 = !DIDerivedType(tag: DW_TAG_member, name: "slice_flags", scope: !4991, file: !75, line: 2034, baseType: !969, size: 32, align: 32, offset: 2272)
!5193 = !DIDerivedType(tag: DW_TAG_member, name: "mb_decision", scope: !4991, file: !75, line: 2044, baseType: !969, size: 32, align: 32, offset: 2304)
!5194 = !DIDerivedType(tag: DW_TAG_member, name: "intra_matrix", scope: !4991, file: !75, line: 2054, baseType: !5195, size: 64, align: 64, offset: 2368)
!5195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5064, size: 64, align: 64)
!5196 = !DIDerivedType(tag: DW_TAG_member, name: "inter_matrix", scope: !4991, file: !75, line: 2061, baseType: !5195, size: 64, align: 64, offset: 2432)
!5197 = !DIDerivedType(tag: DW_TAG_member, name: "scenechange_threshold", scope: !4991, file: !75, line: 2066, baseType: !969, size: 32, align: 32, offset: 2496)
!5198 = !DIDerivedType(tag: DW_TAG_member, name: "noise_reduction", scope: !4991, file: !75, line: 2070, baseType: !969, size: 32, align: 32, offset: 2528)
!5199 = !DIDerivedType(tag: DW_TAG_member, name: "intra_dc_precision", scope: !4991, file: !75, line: 2078, baseType: !969, size: 32, align: 32, offset: 2560)
!5200 = !DIDerivedType(tag: DW_TAG_member, name: "skip_top", scope: !4991, file: !75, line: 2085, baseType: !969, size: 32, align: 32, offset: 2592)
!5201 = !DIDerivedType(tag: DW_TAG_member, name: "skip_bottom", scope: !4991, file: !75, line: 2092, baseType: !969, size: 32, align: 32, offset: 2624)
!5202 = !DIDerivedType(tag: DW_TAG_member, name: "mb_lmin", scope: !4991, file: !75, line: 2099, baseType: !969, size: 32, align: 32, offset: 2656)
!5203 = !DIDerivedType(tag: DW_TAG_member, name: "mb_lmax", scope: !4991, file: !75, line: 2106, baseType: !969, size: 32, align: 32, offset: 2688)
!5204 = !DIDerivedType(tag: DW_TAG_member, name: "me_penalty_compensation", scope: !4991, file: !75, line: 2113, baseType: !969, size: 32, align: 32, offset: 2720)
!5205 = !DIDerivedType(tag: DW_TAG_member, name: "bidir_refine", scope: !4991, file: !75, line: 2120, baseType: !969, size: 32, align: 32, offset: 2752)
!5206 = !DIDerivedType(tag: DW_TAG_member, name: "brd_scale", scope: !4991, file: !75, line: 2125, baseType: !969, size: 32, align: 32, offset: 2784)
!5207 = !DIDerivedType(tag: DW_TAG_member, name: "keyint_min", scope: !4991, file: !75, line: 2133, baseType: !969, size: 32, align: 32, offset: 2816)
!5208 = !DIDerivedType(tag: DW_TAG_member, name: "refs", scope: !4991, file: !75, line: 2140, baseType: !969, size: 32, align: 32, offset: 2848)
!5209 = !DIDerivedType(tag: DW_TAG_member, name: "chromaoffset", scope: !4991, file: !75, line: 2145, baseType: !969, size: 32, align: 32, offset: 2880)
!5210 = !DIDerivedType(tag: DW_TAG_member, name: "mv0_threshold", scope: !4991, file: !75, line: 2153, baseType: !969, size: 32, align: 32, offset: 2912)
!5211 = !DIDerivedType(tag: DW_TAG_member, name: "b_sensitivity", scope: !4991, file: !75, line: 2158, baseType: !969, size: 32, align: 32, offset: 2944)
!5212 = !DIDerivedType(tag: DW_TAG_member, name: "color_primaries", scope: !4991, file: !75, line: 2166, baseType: !801, size: 32, align: 32, offset: 2976)
!5213 = !DIDerivedType(tag: DW_TAG_member, name: "color_trc", scope: !4991, file: !75, line: 2173, baseType: !819, size: 32, align: 32, offset: 3008)
!5214 = !DIDerivedType(tag: DW_TAG_member, name: "colorspace", scope: !4991, file: !75, line: 2180, baseType: !843, size: 32, align: 32, offset: 3040)
!5215 = !DIDerivedType(tag: DW_TAG_member, name: "color_range", scope: !4991, file: !75, line: 2187, baseType: !795, size: 32, align: 32, offset: 3072)
!5216 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_sample_location", scope: !4991, file: !75, line: 2194, baseType: !862, size: 32, align: 32, offset: 3104)
!5217 = !DIDerivedType(tag: DW_TAG_member, name: "slices", scope: !4991, file: !75, line: 2203, baseType: !969, size: 32, align: 32, offset: 3136)
!5218 = !DIDerivedType(tag: DW_TAG_member, name: "field_order", scope: !4991, file: !75, line: 2209, baseType: !872, size: 32, align: 32, offset: 3168)
!5219 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !4991, file: !75, line: 2212, baseType: !969, size: 32, align: 32, offset: 3200)
!5220 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !4991, file: !75, line: 2213, baseType: !969, size: 32, align: 32, offset: 3232)
!5221 = !DIDerivedType(tag: DW_TAG_member, name: "sample_fmt", scope: !4991, file: !75, line: 2220, baseType: !744, size: 32, align: 32, offset: 3264)
!5222 = !DIDerivedType(tag: DW_TAG_member, name: "frame_size", scope: !4991, file: !75, line: 2232, baseType: !969, size: 32, align: 32, offset: 3296)
!5223 = !DIDerivedType(tag: DW_TAG_member, name: "frame_number", scope: !4991, file: !75, line: 2243, baseType: !969, size: 32, align: 32, offset: 3328)
!5224 = !DIDerivedType(tag: DW_TAG_member, name: "block_align", scope: !4991, file: !75, line: 2249, baseType: !969, size: 32, align: 32, offset: 3360)
!5225 = !DIDerivedType(tag: DW_TAG_member, name: "cutoff", scope: !4991, file: !75, line: 2256, baseType: !969, size: 32, align: 32, offset: 3392)
!5226 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layout", scope: !4991, file: !75, line: 2263, baseType: !1165, size: 64, align: 64, offset: 3456)
!5227 = !DIDerivedType(tag: DW_TAG_member, name: "request_channel_layout", scope: !4991, file: !75, line: 2270, baseType: !1165, size: 64, align: 64, offset: 3520)
!5228 = !DIDerivedType(tag: DW_TAG_member, name: "audio_service_type", scope: !4991, file: !75, line: 2277, baseType: !880, size: 32, align: 32, offset: 3584)
!5229 = !DIDerivedType(tag: DW_TAG_member, name: "request_sample_fmt", scope: !4991, file: !75, line: 2285, baseType: !744, size: 32, align: 32, offset: 3616)
!5230 = !DIDerivedType(tag: DW_TAG_member, name: "get_buffer2", scope: !4991, file: !75, line: 2367, baseType: !5231, size: 64, align: 64, offset: 3648)
!5231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5232, size: 64, align: 64)
!5232 = !DISubroutineType(types: !5233)
!5233 = !{!969, !5159, !1189, !969}
!5234 = !DIDerivedType(tag: DW_TAG_member, name: "refcounted_frames", scope: !4991, file: !75, line: 2383, baseType: !969, size: 32, align: 32, offset: 3712)
!5235 = !DIDerivedType(tag: DW_TAG_member, name: "qcompress", scope: !4991, file: !75, line: 2386, baseType: !1337, size: 32, align: 32, offset: 3744)
!5236 = !DIDerivedType(tag: DW_TAG_member, name: "qblur", scope: !4991, file: !75, line: 2387, baseType: !1337, size: 32, align: 32, offset: 3776)
!5237 = !DIDerivedType(tag: DW_TAG_member, name: "qmin", scope: !4991, file: !75, line: 2394, baseType: !969, size: 32, align: 32, offset: 3808)
!5238 = !DIDerivedType(tag: DW_TAG_member, name: "qmax", scope: !4991, file: !75, line: 2401, baseType: !969, size: 32, align: 32, offset: 3840)
!5239 = !DIDerivedType(tag: DW_TAG_member, name: "max_qdiff", scope: !4991, file: !75, line: 2408, baseType: !969, size: 32, align: 32, offset: 3872)
!5240 = !DIDerivedType(tag: DW_TAG_member, name: "rc_buffer_size", scope: !4991, file: !75, line: 2415, baseType: !969, size: 32, align: 32, offset: 3904)
!5241 = !DIDerivedType(tag: DW_TAG_member, name: "rc_override_count", scope: !4991, file: !75, line: 2422, baseType: !969, size: 32, align: 32, offset: 3936)
!5242 = !DIDerivedType(tag: DW_TAG_member, name: "rc_override", scope: !4991, file: !75, line: 2423, baseType: !5243, size: 64, align: 64, offset: 3968)
!5243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5244, size: 64, align: 64)
!5244 = !DIDerivedType(tag: DW_TAG_typedef, name: "RcOverride", file: !75, line: 831, baseType: !5245)
!5245 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "RcOverride", file: !75, line: 826, size: 128, align: 32, elements: !5246)
!5246 = !{!5247, !5248, !5249, !5250}
!5247 = !DIDerivedType(tag: DW_TAG_member, name: "start_frame", scope: !5245, file: !75, line: 827, baseType: !969, size: 32, align: 32)
!5248 = !DIDerivedType(tag: DW_TAG_member, name: "end_frame", scope: !5245, file: !75, line: 828, baseType: !969, size: 32, align: 32, offset: 32)
!5249 = !DIDerivedType(tag: DW_TAG_member, name: "qscale", scope: !5245, file: !75, line: 829, baseType: !969, size: 32, align: 32, offset: 64)
!5250 = !DIDerivedType(tag: DW_TAG_member, name: "quality_factor", scope: !5245, file: !75, line: 830, baseType: !1337, size: 32, align: 32, offset: 96)
!5251 = !DIDerivedType(tag: DW_TAG_member, name: "rc_max_rate", scope: !4991, file: !75, line: 2430, baseType: !975, size: 64, align: 64, offset: 4032)
!5252 = !DIDerivedType(tag: DW_TAG_member, name: "rc_min_rate", scope: !4991, file: !75, line: 2437, baseType: !975, size: 64, align: 64, offset: 4096)
!5253 = !DIDerivedType(tag: DW_TAG_member, name: "rc_max_available_vbv_use", scope: !4991, file: !75, line: 2444, baseType: !1337, size: 32, align: 32, offset: 4160)
!5254 = !DIDerivedType(tag: DW_TAG_member, name: "rc_min_vbv_overflow_use", scope: !4991, file: !75, line: 2451, baseType: !1337, size: 32, align: 32, offset: 4192)
!5255 = !DIDerivedType(tag: DW_TAG_member, name: "rc_initial_buffer_occupancy", scope: !4991, file: !75, line: 2458, baseType: !969, size: 32, align: 32, offset: 4224)
!5256 = !DIDerivedType(tag: DW_TAG_member, name: "coder_type", scope: !4991, file: !75, line: 2469, baseType: !969, size: 32, align: 32, offset: 4256)
!5257 = !DIDerivedType(tag: DW_TAG_member, name: "context_model", scope: !4991, file: !75, line: 2475, baseType: !969, size: 32, align: 32, offset: 4288)
!5258 = !DIDerivedType(tag: DW_TAG_member, name: "frame_skip_threshold", scope: !4991, file: !75, line: 2481, baseType: !969, size: 32, align: 32, offset: 4320)
!5259 = !DIDerivedType(tag: DW_TAG_member, name: "frame_skip_factor", scope: !4991, file: !75, line: 2485, baseType: !969, size: 32, align: 32, offset: 4352)
!5260 = !DIDerivedType(tag: DW_TAG_member, name: "frame_skip_exp", scope: !4991, file: !75, line: 2489, baseType: !969, size: 32, align: 32, offset: 4384)
!5261 = !DIDerivedType(tag: DW_TAG_member, name: "frame_skip_cmp", scope: !4991, file: !75, line: 2493, baseType: !969, size: 32, align: 32, offset: 4416)
!5262 = !DIDerivedType(tag: DW_TAG_member, name: "trellis", scope: !4991, file: !75, line: 2501, baseType: !969, size: 32, align: 32, offset: 4448)
!5263 = !DIDerivedType(tag: DW_TAG_member, name: "min_prediction_order", scope: !4991, file: !75, line: 2506, baseType: !969, size: 32, align: 32, offset: 4480)
!5264 = !DIDerivedType(tag: DW_TAG_member, name: "max_prediction_order", scope: !4991, file: !75, line: 2510, baseType: !969, size: 32, align: 32, offset: 4512)
!5265 = !DIDerivedType(tag: DW_TAG_member, name: "timecode_frame_start", scope: !4991, file: !75, line: 2514, baseType: !975, size: 64, align: 64, offset: 4544)
!5266 = !DIDerivedType(tag: DW_TAG_member, name: "rtp_callback", scope: !4991, file: !75, line: 2528, baseType: !5267, size: 64, align: 64, offset: 4608)
!5267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5268, size: 64, align: 64)
!5268 = !DISubroutineType(types: !5269)
!5269 = !{null, !5159, !960, !969, !969}
!5270 = !DIDerivedType(tag: DW_TAG_member, name: "rtp_payload_size", scope: !4991, file: !75, line: 2534, baseType: !969, size: 32, align: 32, offset: 4672)
!5271 = !DIDerivedType(tag: DW_TAG_member, name: "mv_bits", scope: !4991, file: !75, line: 2545, baseType: !969, size: 32, align: 32, offset: 4704)
!5272 = !DIDerivedType(tag: DW_TAG_member, name: "header_bits", scope: !4991, file: !75, line: 2547, baseType: !969, size: 32, align: 32, offset: 4736)
!5273 = !DIDerivedType(tag: DW_TAG_member, name: "i_tex_bits", scope: !4991, file: !75, line: 2549, baseType: !969, size: 32, align: 32, offset: 4768)
!5274 = !DIDerivedType(tag: DW_TAG_member, name: "p_tex_bits", scope: !4991, file: !75, line: 2551, baseType: !969, size: 32, align: 32, offset: 4800)
!5275 = !DIDerivedType(tag: DW_TAG_member, name: "i_count", scope: !4991, file: !75, line: 2553, baseType: !969, size: 32, align: 32, offset: 4832)
!5276 = !DIDerivedType(tag: DW_TAG_member, name: "p_count", scope: !4991, file: !75, line: 2555, baseType: !969, size: 32, align: 32, offset: 4864)
!5277 = !DIDerivedType(tag: DW_TAG_member, name: "skip_count", scope: !4991, file: !75, line: 2557, baseType: !969, size: 32, align: 32, offset: 4896)
!5278 = !DIDerivedType(tag: DW_TAG_member, name: "misc_bits", scope: !4991, file: !75, line: 2559, baseType: !969, size: 32, align: 32, offset: 4928)
!5279 = !DIDerivedType(tag: DW_TAG_member, name: "frame_bits", scope: !4991, file: !75, line: 2563, baseType: !969, size: 32, align: 32, offset: 4960)
!5280 = !DIDerivedType(tag: DW_TAG_member, name: "stats_out", scope: !4991, file: !75, line: 2571, baseType: !1076, size: 64, align: 64, offset: 4992)
!5281 = !DIDerivedType(tag: DW_TAG_member, name: "stats_in", scope: !4991, file: !75, line: 2579, baseType: !1076, size: 64, align: 64, offset: 5056)
!5282 = !DIDerivedType(tag: DW_TAG_member, name: "workaround_bugs", scope: !4991, file: !75, line: 2586, baseType: !969, size: 32, align: 32, offset: 5120)
!5283 = !DIDerivedType(tag: DW_TAG_member, name: "strict_std_compliance", scope: !4991, file: !75, line: 2615, baseType: !969, size: 32, align: 32, offset: 5152)
!5284 = !DIDerivedType(tag: DW_TAG_member, name: "error_concealment", scope: !4991, file: !75, line: 2627, baseType: !969, size: 32, align: 32, offset: 5184)
!5285 = !DIDerivedType(tag: DW_TAG_member, name: "debug", scope: !4991, file: !75, line: 2637, baseType: !969, size: 32, align: 32, offset: 5216)
!5286 = !DIDerivedType(tag: DW_TAG_member, name: "err_recognition", scope: !4991, file: !75, line: 2681, baseType: !969, size: 32, align: 32, offset: 5248)
!5287 = !DIDerivedType(tag: DW_TAG_member, name: "reordered_opaque", scope: !4991, file: !75, line: 2709, baseType: !975, size: 64, align: 64, offset: 5312)
!5288 = !DIDerivedType(tag: DW_TAG_member, name: "hwaccel", scope: !4991, file: !75, line: 2716, baseType: !5289, size: 64, align: 64, offset: 5376)
!5289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5290, size: 64, align: 64)
!5290 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5291)
!5291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVHWAccel", file: !75, line: 3636, size: 896, align: 64, elements: !5292)
!5292 = !{!5293, !5294, !5295, !5296, !5297, !5298, !5299, !5303, !5307, !5308, !5309, !5310, !5316, !5317, !5318, !5319, !5320}
!5293 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !5291, file: !75, line: 3642, baseType: !953, size: 64, align: 64)
!5294 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !5291, file: !75, line: 3649, baseType: !534, size: 32, align: 32, offset: 64)
!5295 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !5291, file: !75, line: 3656, baseType: !74, size: 32, align: 32, offset: 96)
!5296 = !DIDerivedType(tag: DW_TAG_member, name: "pix_fmt", scope: !5291, file: !75, line: 3663, baseType: !544, size: 32, align: 32, offset: 128)
!5297 = !DIDerivedType(tag: DW_TAG_member, name: "capabilities", scope: !5291, file: !75, line: 3669, baseType: !969, size: 32, align: 32, offset: 160)
!5298 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_frame", scope: !5291, file: !75, line: 3682, baseType: !5117, size: 64, align: 64, offset: 192)
!5299 = !DIDerivedType(tag: DW_TAG_member, name: "start_frame", scope: !5291, file: !75, line: 3698, baseType: !5300, size: 64, align: 64, offset: 256)
!5300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5301, size: 64, align: 64)
!5301 = !DISubroutineType(types: !5302)
!5302 = !{!969, !4989, !4943, !5066}
!5303 = !DIDerivedType(tag: DW_TAG_member, name: "decode_params", scope: !5291, file: !75, line: 3712, baseType: !5304, size: 64, align: 64, offset: 320)
!5304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5305, size: 64, align: 64)
!5305 = !DISubroutineType(types: !5306)
!5306 = !{!969, !4989, !969, !4943, !5066}
!5307 = !DIDerivedType(tag: DW_TAG_member, name: "decode_slice", scope: !5291, file: !75, line: 3726, baseType: !5300, size: 64, align: 64, offset: 384)
!5308 = !DIDerivedType(tag: DW_TAG_member, name: "end_frame", scope: !5291, file: !75, line: 3737, baseType: !5036, size: 64, align: 64, offset: 448)
!5309 = !DIDerivedType(tag: DW_TAG_member, name: "frame_priv_data_size", scope: !5291, file: !75, line: 3746, baseType: !969, size: 32, align: 32, offset: 512)
!5310 = !DIDerivedType(tag: DW_TAG_member, name: "decode_mb", scope: !5291, file: !75, line: 3757, baseType: !5311, size: 64, align: 64, offset: 576)
!5311 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5312, size: 64, align: 64)
!5312 = !DISubroutineType(types: !5313)
!5313 = !{null, !5314}
!5314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5315, size: 64, align: 64)
!5315 = !DICompositeType(tag: DW_TAG_structure_type, name: "MpegEncContext", file: !75, line: 3617, flags: DIFlagFwdDecl)
!5316 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !5291, file: !75, line: 3766, baseType: !5036, size: 64, align: 64, offset: 640)
!5317 = !DIDerivedType(tag: DW_TAG_member, name: "uninit", scope: !5291, file: !75, line: 3774, baseType: !5036, size: 64, align: 64, offset: 704)
!5318 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data_size", scope: !5291, file: !75, line: 3780, baseType: !969, size: 32, align: 32, offset: 768)
!5319 = !DIDerivedType(tag: DW_TAG_member, name: "caps_internal", scope: !5291, file: !75, line: 3785, baseType: !969, size: 32, align: 32, offset: 800)
!5320 = !DIDerivedType(tag: DW_TAG_member, name: "frame_params", scope: !5291, file: !75, line: 3795, baseType: !5321, size: 64, align: 64, offset: 832)
!5321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5322, size: 64, align: 64)
!5322 = !DISubroutineType(types: !5323)
!5323 = !{!969, !4989, !1140}
!5324 = !DIDerivedType(tag: DW_TAG_member, name: "hwaccel_context", scope: !4991, file: !75, line: 2728, baseType: !960, size: 64, align: 64, offset: 5440)
!5325 = !DIDerivedType(tag: DW_TAG_member, name: "error", scope: !4991, file: !75, line: 2735, baseType: !1216, size: 512, align: 64, offset: 5504)
!5326 = !DIDerivedType(tag: DW_TAG_member, name: "dct_algo", scope: !4991, file: !75, line: 2742, baseType: !969, size: 32, align: 32, offset: 6016)
!5327 = !DIDerivedType(tag: DW_TAG_member, name: "idct_algo", scope: !4991, file: !75, line: 2755, baseType: !969, size: 32, align: 32, offset: 6048)
!5328 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_coded_sample", scope: !4991, file: !75, line: 2776, baseType: !969, size: 32, align: 32, offset: 6080)
!5329 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_raw_sample", scope: !4991, file: !75, line: 2783, baseType: !969, size: 32, align: 32, offset: 6112)
!5330 = !DIDerivedType(tag: DW_TAG_member, name: "lowres", scope: !4991, file: !75, line: 2791, baseType: !969, size: 32, align: 32, offset: 6144)
!5331 = !DIDerivedType(tag: DW_TAG_member, name: "coded_frame", scope: !4991, file: !75, line: 2802, baseType: !1189, size: 64, align: 64, offset: 6208)
!5332 = !DIDerivedType(tag: DW_TAG_member, name: "thread_count", scope: !4991, file: !75, line: 2811, baseType: !969, size: 32, align: 32, offset: 6272)
!5333 = !DIDerivedType(tag: DW_TAG_member, name: "thread_type", scope: !4991, file: !75, line: 2821, baseType: !969, size: 32, align: 32, offset: 6304)
!5334 = !DIDerivedType(tag: DW_TAG_member, name: "active_thread_type", scope: !4991, file: !75, line: 2830, baseType: !969, size: 32, align: 32, offset: 6336)
!5335 = !DIDerivedType(tag: DW_TAG_member, name: "thread_safe_callbacks", scope: !4991, file: !75, line: 2840, baseType: !969, size: 32, align: 32, offset: 6368)
!5336 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !4991, file: !75, line: 2851, baseType: !5337, size: 64, align: 64, offset: 6400)
!5337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5338, size: 64, align: 64)
!5338 = !DISubroutineType(types: !5339)
!5339 = !{!969, !5159, !5340, !960, !1121, !969, !969}
!5340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5341, size: 64, align: 64)
!5341 = !DISubroutineType(types: !5342)
!5342 = !{!969, !5159, !960}
!5343 = !DIDerivedType(tag: DW_TAG_member, name: "execute2", scope: !4991, file: !75, line: 2871, baseType: !5344, size: 64, align: 64, offset: 6464)
!5344 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5345, size: 64, align: 64)
!5345 = !DISubroutineType(types: !5346)
!5346 = !{!969, !5159, !5347, !960, !1121, !969}
!5347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5348, size: 64, align: 64)
!5348 = !DISubroutineType(types: !5349)
!5349 = !{!969, !5159, !960, !969, !969}
!5350 = !DIDerivedType(tag: DW_TAG_member, name: "nsse_weight", scope: !4991, file: !75, line: 2878, baseType: !969, size: 32, align: 32, offset: 6528)
!5351 = !DIDerivedType(tag: DW_TAG_member, name: "profile", scope: !4991, file: !75, line: 2885, baseType: !969, size: 32, align: 32, offset: 6560)
!5352 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !4991, file: !75, line: 3005, baseType: !969, size: 32, align: 32, offset: 6592)
!5353 = !DIDerivedType(tag: DW_TAG_member, name: "skip_loop_filter", scope: !4991, file: !75, line: 3013, baseType: !892, size: 32, align: 32, offset: 6624)
!5354 = !DIDerivedType(tag: DW_TAG_member, name: "skip_idct", scope: !4991, file: !75, line: 3020, baseType: !892, size: 32, align: 32, offset: 6656)
!5355 = !DIDerivedType(tag: DW_TAG_member, name: "skip_frame", scope: !4991, file: !75, line: 3027, baseType: !892, size: 32, align: 32, offset: 6688)
!5356 = !DIDerivedType(tag: DW_TAG_member, name: "subtitle_header", scope: !4991, file: !75, line: 3037, baseType: !1150, size: 64, align: 64, offset: 6720)
!5357 = !DIDerivedType(tag: DW_TAG_member, name: "subtitle_header_size", scope: !4991, file: !75, line: 3038, baseType: !969, size: 32, align: 32, offset: 6784)
!5358 = !DIDerivedType(tag: DW_TAG_member, name: "vbv_delay", scope: !4991, file: !75, line: 3050, baseType: !1165, size: 64, align: 64, offset: 6848)
!5359 = !DIDerivedType(tag: DW_TAG_member, name: "side_data_only_packets", scope: !4991, file: !75, line: 3065, baseType: !969, size: 32, align: 32, offset: 6912)
!5360 = !DIDerivedType(tag: DW_TAG_member, name: "initial_padding", scope: !4991, file: !75, line: 3083, baseType: !969, size: 32, align: 32, offset: 6944)
!5361 = !DIDerivedType(tag: DW_TAG_member, name: "framerate", scope: !4991, file: !75, line: 3092, baseType: !982, size: 64, align: 32, offset: 6976)
!5362 = !DIDerivedType(tag: DW_TAG_member, name: "sw_pix_fmt", scope: !4991, file: !75, line: 3099, baseType: !544, size: 32, align: 32, offset: 7040)
!5363 = !DIDerivedType(tag: DW_TAG_member, name: "pkt_timebase", scope: !4991, file: !75, line: 3106, baseType: !982, size: 64, align: 32, offset: 7072)
!5364 = !DIDerivedType(tag: DW_TAG_member, name: "codec_descriptor", scope: !4991, file: !75, line: 3113, baseType: !5365, size: 64, align: 64, offset: 7168)
!5365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5366, size: 64, align: 64)
!5366 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5367)
!5367 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodecDescriptor", file: !75, line: 740, baseType: !5368)
!5368 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecDescriptor", file: !75, line: 712, size: 384, align: 64, elements: !5369)
!5369 = !{!5370, !5371, !5372, !5373, !5374, !5375, !5378}
!5370 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !5368, file: !75, line: 713, baseType: !74, size: 32, align: 32)
!5371 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !5368, file: !75, line: 714, baseType: !534, size: 32, align: 32, offset: 32)
!5372 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !5368, file: !75, line: 720, baseType: !953, size: 64, align: 64, offset: 64)
!5373 = !DIDerivedType(tag: DW_TAG_member, name: "long_name", scope: !5368, file: !75, line: 724, baseType: !953, size: 64, align: 64, offset: 128)
!5374 = !DIDerivedType(tag: DW_TAG_member, name: "props", scope: !5368, file: !75, line: 728, baseType: !969, size: 32, align: 32, offset: 192)
!5375 = !DIDerivedType(tag: DW_TAG_member, name: "mime_types", scope: !5368, file: !75, line: 734, baseType: !5376, size: 64, align: 64, offset: 256)
!5376 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5377, size: 64, align: 64)
!5377 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !953)
!5378 = !DIDerivedType(tag: DW_TAG_member, name: "profiles", scope: !5368, file: !75, line: 739, baseType: !5379, size: 64, align: 64, offset: 320)
!5379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5380, size: 64, align: 64)
!5380 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5027)
!5381 = !DIDerivedType(tag: DW_TAG_member, name: "pts_correction_num_faulty_pts", scope: !4991, file: !75, line: 3129, baseType: !975, size: 64, align: 64, offset: 7232)
!5382 = !DIDerivedType(tag: DW_TAG_member, name: "pts_correction_num_faulty_dts", scope: !4991, file: !75, line: 3130, baseType: !975, size: 64, align: 64, offset: 7296)
!5383 = !DIDerivedType(tag: DW_TAG_member, name: "pts_correction_last_pts", scope: !4991, file: !75, line: 3131, baseType: !975, size: 64, align: 64, offset: 7360)
!5384 = !DIDerivedType(tag: DW_TAG_member, name: "pts_correction_last_dts", scope: !4991, file: !75, line: 3132, baseType: !975, size: 64, align: 64, offset: 7424)
!5385 = !DIDerivedType(tag: DW_TAG_member, name: "sub_charenc", scope: !4991, file: !75, line: 3139, baseType: !1076, size: 64, align: 64, offset: 7488)
!5386 = !DIDerivedType(tag: DW_TAG_member, name: "sub_charenc_mode", scope: !4991, file: !75, line: 3147, baseType: !969, size: 32, align: 32, offset: 7552)
!5387 = !DIDerivedType(tag: DW_TAG_member, name: "skip_alpha", scope: !4991, file: !75, line: 3165, baseType: !969, size: 32, align: 32, offset: 7584)
!5388 = !DIDerivedType(tag: DW_TAG_member, name: "seek_preroll", scope: !4991, file: !75, line: 3172, baseType: !969, size: 32, align: 32, offset: 7616)
!5389 = !DIDerivedType(tag: DW_TAG_member, name: "debug_mv", scope: !4991, file: !75, line: 3180, baseType: !969, size: 32, align: 32, offset: 7648)
!5390 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_intra_matrix", scope: !4991, file: !75, line: 3191, baseType: !5195, size: 64, align: 64, offset: 7680)
!5391 = !DIDerivedType(tag: DW_TAG_member, name: "dump_separator", scope: !4991, file: !75, line: 3199, baseType: !1150, size: 64, align: 64, offset: 7744)
!5392 = !DIDerivedType(tag: DW_TAG_member, name: "codec_whitelist", scope: !4991, file: !75, line: 3207, baseType: !1076, size: 64, align: 64, offset: 7808)
!5393 = !DIDerivedType(tag: DW_TAG_member, name: "properties", scope: !4991, file: !75, line: 3214, baseType: !1090, size: 32, align: 32, offset: 7872)
!5394 = !DIDerivedType(tag: DW_TAG_member, name: "coded_side_data", scope: !4991, file: !75, line: 3224, baseType: !4826, size: 64, align: 64, offset: 7936)
!5395 = !DIDerivedType(tag: DW_TAG_member, name: "nb_coded_side_data", scope: !4991, file: !75, line: 3225, baseType: !969, size: 32, align: 32, offset: 8000)
!5396 = !DIDerivedType(tag: DW_TAG_member, name: "hw_frames_ctx", scope: !4991, file: !75, line: 3249, baseType: !1140, size: 64, align: 64, offset: 8064)
!5397 = !DIDerivedType(tag: DW_TAG_member, name: "sub_text_format", scope: !4991, file: !75, line: 3256, baseType: !969, size: 32, align: 32, offset: 8128)
!5398 = !DIDerivedType(tag: DW_TAG_member, name: "trailing_padding", scope: !4991, file: !75, line: 3271, baseType: !969, size: 32, align: 32, offset: 8160)
!5399 = !DIDerivedType(tag: DW_TAG_member, name: "max_pixels", scope: !4991, file: !75, line: 3279, baseType: !975, size: 64, align: 64, offset: 8192)
!5400 = !DIDerivedType(tag: DW_TAG_member, name: "hw_device_ctx", scope: !4991, file: !75, line: 3301, baseType: !1140, size: 64, align: 64, offset: 8256)
!5401 = !DIDerivedType(tag: DW_TAG_member, name: "hwaccel_flags", scope: !4991, file: !75, line: 3310, baseType: !969, size: 32, align: 32, offset: 8320)
!5402 = !DIDerivedType(tag: DW_TAG_member, name: "apply_cropping", scope: !4991, file: !75, line: 3337, baseType: !969, size: 32, align: 32, offset: 8352)
!5403 = !DIDerivedType(tag: DW_TAG_member, name: "extra_hw_frames", scope: !4991, file: !75, line: 3351, baseType: !969, size: 32, align: 32, offset: 8384)
!5404 = !DIDerivedType(tag: DW_TAG_member, name: "discard_damaged_percentage", scope: !4991, file: !75, line: 3359, baseType: !969, size: 32, align: 32, offset: 8416)
!5405 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data", scope: !4984, file: !1298, line: 880, baseType: !960, size: 64, align: 64, offset: 128)
!5406 = !DIDerivedType(tag: DW_TAG_member, name: "time_base", scope: !4984, file: !1298, line: 894, baseType: !982, size: 64, align: 32, offset: 192)
!5407 = !DIDerivedType(tag: DW_TAG_member, name: "start_time", scope: !4984, file: !1298, line: 904, baseType: !975, size: 64, align: 64, offset: 256)
!5408 = !DIDerivedType(tag: DW_TAG_member, name: "duration", scope: !4984, file: !1298, line: 914, baseType: !975, size: 64, align: 64, offset: 320)
!5409 = !DIDerivedType(tag: DW_TAG_member, name: "nb_frames", scope: !4984, file: !1298, line: 916, baseType: !975, size: 64, align: 64, offset: 384)
!5410 = !DIDerivedType(tag: DW_TAG_member, name: "disposition", scope: !4984, file: !1298, line: 918, baseType: !969, size: 32, align: 32, offset: 448)
!5411 = !DIDerivedType(tag: DW_TAG_member, name: "discard", scope: !4984, file: !1298, line: 920, baseType: !892, size: 32, align: 32, offset: 480)
!5412 = !DIDerivedType(tag: DW_TAG_member, name: "sample_aspect_ratio", scope: !4984, file: !1298, line: 927, baseType: !982, size: 64, align: 32, offset: 512)
!5413 = !DIDerivedType(tag: DW_TAG_member, name: "metadata", scope: !4984, file: !1298, line: 929, baseType: !1059, size: 64, align: 64, offset: 576)
!5414 = !DIDerivedType(tag: DW_TAG_member, name: "avg_frame_rate", scope: !4984, file: !1298, line: 938, baseType: !982, size: 64, align: 32, offset: 640)
!5415 = !DIDerivedType(tag: DW_TAG_member, name: "attached_pic", scope: !4984, file: !1298, line: 947, baseType: !4815, size: 704, align: 64, offset: 704)
!5416 = !DIDerivedType(tag: DW_TAG_member, name: "side_data", scope: !4984, file: !1298, line: 967, baseType: !4826, size: 64, align: 64, offset: 1408)
!5417 = !DIDerivedType(tag: DW_TAG_member, name: "nb_side_data", scope: !4984, file: !1298, line: 971, baseType: !969, size: 32, align: 32, offset: 1472)
!5418 = !DIDerivedType(tag: DW_TAG_member, name: "event_flags", scope: !4984, file: !1298, line: 978, baseType: !969, size: 32, align: 32, offset: 1504)
!5419 = !DIDerivedType(tag: DW_TAG_member, name: "r_frame_rate", scope: !4984, file: !1298, line: 989, baseType: !982, size: 64, align: 32, offset: 1536)
!5420 = !DIDerivedType(tag: DW_TAG_member, name: "recommended_encoder_configuration", scope: !4984, file: !1298, line: 1000, baseType: !1076, size: 64, align: 64, offset: 1600)
!5421 = !DIDerivedType(tag: DW_TAG_member, name: "codecpar", scope: !4984, file: !1298, line: 1012, baseType: !5422, size: 64, align: 64, offset: 1664)
!5422 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5423, size: 64, align: 64)
!5423 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodecParameters", file: !75, line: 4085, baseType: !5424)
!5424 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecParameters", file: !75, line: 3936, size: 1152, align: 64, elements: !5425)
!5425 = !{!5426, !5427, !5428, !5429, !5430, !5431, !5432, !5433, !5434, !5435, !5436, !5437, !5438, !5439, !5440, !5441, !5442, !5443, !5444, !5445, !5446, !5447, !5448, !5449, !5450, !5451, !5452, !5453, !5454}
!5426 = !DIDerivedType(tag: DW_TAG_member, name: "codec_type", scope: !5424, file: !75, line: 3940, baseType: !534, size: 32, align: 32)
!5427 = !DIDerivedType(tag: DW_TAG_member, name: "codec_id", scope: !5424, file: !75, line: 3944, baseType: !74, size: 32, align: 32, offset: 32)
!5428 = !DIDerivedType(tag: DW_TAG_member, name: "codec_tag", scope: !5424, file: !75, line: 3948, baseType: !5066, size: 32, align: 32, offset: 64)
!5429 = !DIDerivedType(tag: DW_TAG_member, name: "extradata", scope: !5424, file: !75, line: 3958, baseType: !1150, size: 64, align: 64, offset: 128)
!5430 = !DIDerivedType(tag: DW_TAG_member, name: "extradata_size", scope: !5424, file: !75, line: 3962, baseType: !969, size: 32, align: 32, offset: 192)
!5431 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !5424, file: !75, line: 3968, baseType: !969, size: 32, align: 32, offset: 224)
!5432 = !DIDerivedType(tag: DW_TAG_member, name: "bit_rate", scope: !5424, file: !75, line: 3973, baseType: !975, size: 64, align: 64, offset: 256)
!5433 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_coded_sample", scope: !5424, file: !75, line: 3986, baseType: !969, size: 32, align: 32, offset: 320)
!5434 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_raw_sample", scope: !5424, file: !75, line: 3999, baseType: !969, size: 32, align: 32, offset: 352)
!5435 = !DIDerivedType(tag: DW_TAG_member, name: "profile", scope: !5424, file: !75, line: 4004, baseType: !969, size: 32, align: 32, offset: 384)
!5436 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !5424, file: !75, line: 4005, baseType: !969, size: 32, align: 32, offset: 416)
!5437 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !5424, file: !75, line: 4010, baseType: !969, size: 32, align: 32, offset: 448)
!5438 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !5424, file: !75, line: 4011, baseType: !969, size: 32, align: 32, offset: 480)
!5439 = !DIDerivedType(tag: DW_TAG_member, name: "sample_aspect_ratio", scope: !5424, file: !75, line: 4020, baseType: !982, size: 64, align: 32, offset: 512)
!5440 = !DIDerivedType(tag: DW_TAG_member, name: "field_order", scope: !5424, file: !75, line: 4025, baseType: !872, size: 32, align: 32, offset: 576)
!5441 = !DIDerivedType(tag: DW_TAG_member, name: "color_range", scope: !5424, file: !75, line: 4030, baseType: !795, size: 32, align: 32, offset: 608)
!5442 = !DIDerivedType(tag: DW_TAG_member, name: "color_primaries", scope: !5424, file: !75, line: 4031, baseType: !801, size: 32, align: 32, offset: 640)
!5443 = !DIDerivedType(tag: DW_TAG_member, name: "color_trc", scope: !5424, file: !75, line: 4032, baseType: !819, size: 32, align: 32, offset: 672)
!5444 = !DIDerivedType(tag: DW_TAG_member, name: "color_space", scope: !5424, file: !75, line: 4033, baseType: !843, size: 32, align: 32, offset: 704)
!5445 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_location", scope: !5424, file: !75, line: 4034, baseType: !862, size: 32, align: 32, offset: 736)
!5446 = !DIDerivedType(tag: DW_TAG_member, name: "video_delay", scope: !5424, file: !75, line: 4039, baseType: !969, size: 32, align: 32, offset: 768)
!5447 = !DIDerivedType(tag: DW_TAG_member, name: "channel_layout", scope: !5424, file: !75, line: 4046, baseType: !1165, size: 64, align: 64, offset: 832)
!5448 = !DIDerivedType(tag: DW_TAG_member, name: "channels", scope: !5424, file: !75, line: 4050, baseType: !969, size: 32, align: 32, offset: 896)
!5449 = !DIDerivedType(tag: DW_TAG_member, name: "sample_rate", scope: !5424, file: !75, line: 4054, baseType: !969, size: 32, align: 32, offset: 928)
!5450 = !DIDerivedType(tag: DW_TAG_member, name: "block_align", scope: !5424, file: !75, line: 4061, baseType: !969, size: 32, align: 32, offset: 960)
!5451 = !DIDerivedType(tag: DW_TAG_member, name: "frame_size", scope: !5424, file: !75, line: 4065, baseType: !969, size: 32, align: 32, offset: 992)
!5452 = !DIDerivedType(tag: DW_TAG_member, name: "initial_padding", scope: !5424, file: !75, line: 4073, baseType: !969, size: 32, align: 32, offset: 1024)
!5453 = !DIDerivedType(tag: DW_TAG_member, name: "trailing_padding", scope: !5424, file: !75, line: 4080, baseType: !969, size: 32, align: 32, offset: 1056)
!5454 = !DIDerivedType(tag: DW_TAG_member, name: "seek_preroll", scope: !5424, file: !75, line: 4084, baseType: !969, size: 32, align: 32, offset: 1088)
!5455 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !4984, file: !1298, line: 1055, baseType: !5456, size: 64, align: 64, offset: 1728)
!5456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5457, size: 64, align: 64)
!5457 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !4984, file: !1298, line: 1028, size: 832, align: 64, elements: !5458)
!5458 = !{!5459, !5460, !5461, !5462, !5463, !5469, !5470, !5471, !5472, !5473, !5474, !5475, !5476, !5477}
!5459 = !DIDerivedType(tag: DW_TAG_member, name: "last_dts", scope: !5457, file: !1298, line: 1029, baseType: !975, size: 64, align: 64)
!5460 = !DIDerivedType(tag: DW_TAG_member, name: "duration_gcd", scope: !5457, file: !1298, line: 1030, baseType: !975, size: 64, align: 64, offset: 64)
!5461 = !DIDerivedType(tag: DW_TAG_member, name: "duration_count", scope: !5457, file: !1298, line: 1031, baseType: !969, size: 32, align: 32, offset: 128)
!5462 = !DIDerivedType(tag: DW_TAG_member, name: "rfps_duration_sum", scope: !5457, file: !1298, line: 1032, baseType: !975, size: 64, align: 64, offset: 192)
!5463 = !DIDerivedType(tag: DW_TAG_member, name: "duration_error", scope: !5457, file: !1298, line: 1033, baseType: !5464, size: 64, align: 64, offset: 256)
!5464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5465, size: 64, align: 64)
!5465 = !DICompositeType(tag: DW_TAG_array_type, baseType: !979, size: 51072, align: 64, elements: !5466)
!5466 = !{!5467, !5468}
!5467 = !DISubrange(count: 2)
!5468 = !DISubrange(count: 399)
!5469 = !DIDerivedType(tag: DW_TAG_member, name: "codec_info_duration", scope: !5457, file: !1298, line: 1034, baseType: !975, size: 64, align: 64, offset: 320)
!5470 = !DIDerivedType(tag: DW_TAG_member, name: "codec_info_duration_fields", scope: !5457, file: !1298, line: 1035, baseType: !975, size: 64, align: 64, offset: 384)
!5471 = !DIDerivedType(tag: DW_TAG_member, name: "frame_delay_evidence", scope: !5457, file: !1298, line: 1036, baseType: !969, size: 32, align: 32, offset: 448)
!5472 = !DIDerivedType(tag: DW_TAG_member, name: "found_decoder", scope: !5457, file: !1298, line: 1043, baseType: !969, size: 32, align: 32, offset: 480)
!5473 = !DIDerivedType(tag: DW_TAG_member, name: "last_duration", scope: !5457, file: !1298, line: 1045, baseType: !975, size: 64, align: 64, offset: 512)
!5474 = !DIDerivedType(tag: DW_TAG_member, name: "fps_first_dts", scope: !5457, file: !1298, line: 1050, baseType: !975, size: 64, align: 64, offset: 576)
!5475 = !DIDerivedType(tag: DW_TAG_member, name: "fps_first_dts_idx", scope: !5457, file: !1298, line: 1051, baseType: !969, size: 32, align: 32, offset: 640)
!5476 = !DIDerivedType(tag: DW_TAG_member, name: "fps_last_dts", scope: !5457, file: !1298, line: 1052, baseType: !975, size: 64, align: 64, offset: 704)
!5477 = !DIDerivedType(tag: DW_TAG_member, name: "fps_last_dts_idx", scope: !5457, file: !1298, line: 1053, baseType: !969, size: 32, align: 32, offset: 768)
!5478 = !DIDerivedType(tag: DW_TAG_member, name: "pts_wrap_bits", scope: !4984, file: !1298, line: 1057, baseType: !969, size: 32, align: 32, offset: 1792)
!5479 = !DIDerivedType(tag: DW_TAG_member, name: "first_dts", scope: !4984, file: !1298, line: 1067, baseType: !975, size: 64, align: 64, offset: 1856)
!5480 = !DIDerivedType(tag: DW_TAG_member, name: "cur_dts", scope: !4984, file: !1298, line: 1068, baseType: !975, size: 64, align: 64, offset: 1920)
!5481 = !DIDerivedType(tag: DW_TAG_member, name: "last_IP_pts", scope: !4984, file: !1298, line: 1069, baseType: !975, size: 64, align: 64, offset: 1984)
!5482 = !DIDerivedType(tag: DW_TAG_member, name: "last_IP_duration", scope: !4984, file: !1298, line: 1070, baseType: !969, size: 32, align: 32, offset: 2048)
!5483 = !DIDerivedType(tag: DW_TAG_member, name: "probe_packets", scope: !4984, file: !1298, line: 1075, baseType: !969, size: 32, align: 32, offset: 2080)
!5484 = !DIDerivedType(tag: DW_TAG_member, name: "codec_info_nb_frames", scope: !4984, file: !1298, line: 1080, baseType: !969, size: 32, align: 32, offset: 2112)
!5485 = !DIDerivedType(tag: DW_TAG_member, name: "need_parsing", scope: !4984, file: !1298, line: 1083, baseType: !1297, size: 32, align: 32, offset: 2144)
!5486 = !DIDerivedType(tag: DW_TAG_member, name: "parser", scope: !4984, file: !1298, line: 1084, baseType: !5487, size: 64, align: 64, offset: 2176)
!5487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5488, size: 64, align: 64)
!5488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecParserContext", file: !75, line: 5092, size: 2816, align: 64, elements: !5489)
!5489 = !{!5490, !5491, !5520, !5521, !5522, !5523, !5524, !5525, !5526, !5527, !5528, !5529, !5530, !5531, !5533, !5534, !5535, !5536, !5537, !5538, !5539, !5540, !5541, !5542, !5543, !5544, !5545, !5546, !5547, !5548, !5549, !5550, !5551, !5552, !5553, !5554}
!5490 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data", scope: !5488, file: !75, line: 5093, baseType: !960, size: 64, align: 64)
!5491 = !DIDerivedType(tag: DW_TAG_member, name: "parser", scope: !5488, file: !75, line: 5094, baseType: !5492, size: 64, align: 64, offset: 64)
!5492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5493, size: 64, align: 64)
!5493 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecParser", file: !75, line: 5259, size: 512, align: 64, elements: !5494)
!5494 = !{!5495, !5499, !5500, !5506, !5511, !5515, !5519}
!5495 = !DIDerivedType(tag: DW_TAG_member, name: "codec_ids", scope: !5493, file: !75, line: 5260, baseType: !5496, size: 160, align: 32)
!5496 = !DICompositeType(tag: DW_TAG_array_type, baseType: !969, size: 160, align: 32, elements: !5497)
!5497 = !{!5498}
!5498 = !DISubrange(count: 5)
!5499 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data_size", scope: !5493, file: !75, line: 5261, baseType: !969, size: 32, align: 32, offset: 160)
!5500 = !DIDerivedType(tag: DW_TAG_member, name: "parser_init", scope: !5493, file: !75, line: 5262, baseType: !5501, size: 64, align: 64, offset: 192)
!5501 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5502, size: 64, align: 64)
!5502 = !DISubroutineType(types: !5503)
!5503 = !{!969, !5504}
!5504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5505, size: 64, align: 64)
!5505 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodecParserContext", file: !75, line: 5257, baseType: !5488)
!5506 = !DIDerivedType(tag: DW_TAG_member, name: "parser_parse", scope: !5493, file: !75, line: 5265, baseType: !5507, size: 64, align: 64, offset: 256)
!5507 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5508, size: 64, align: 64)
!5508 = !DISubroutineType(types: !5509)
!5509 = !{!969, !5504, !4989, !5510, !1121, !4943, !969}
!5510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4943, size: 64, align: 64)
!5511 = !DIDerivedType(tag: DW_TAG_member, name: "parser_close", scope: !5493, file: !75, line: 5269, baseType: !5512, size: 64, align: 64, offset: 320)
!5512 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5513, size: 64, align: 64)
!5513 = !DISubroutineType(types: !5514)
!5514 = !{null, !5504}
!5515 = !DIDerivedType(tag: DW_TAG_member, name: "split", scope: !5493, file: !75, line: 5270, baseType: !5516, size: 64, align: 64, offset: 384)
!5516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5517, size: 64, align: 64)
!5517 = !DISubroutineType(types: !5518)
!5518 = !{!969, !4989, !4943, !969}
!5519 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !5493, file: !75, line: 5271, baseType: !5492, size: 64, align: 64, offset: 448)
!5520 = !DIDerivedType(tag: DW_TAG_member, name: "frame_offset", scope: !5488, file: !75, line: 5095, baseType: !975, size: 64, align: 64, offset: 128)
!5521 = !DIDerivedType(tag: DW_TAG_member, name: "cur_offset", scope: !5488, file: !75, line: 5096, baseType: !975, size: 64, align: 64, offset: 192)
!5522 = !DIDerivedType(tag: DW_TAG_member, name: "next_frame_offset", scope: !5488, file: !75, line: 5098, baseType: !975, size: 64, align: 64, offset: 256)
!5523 = !DIDerivedType(tag: DW_TAG_member, name: "pict_type", scope: !5488, file: !75, line: 5100, baseType: !969, size: 32, align: 32, offset: 320)
!5524 = !DIDerivedType(tag: DW_TAG_member, name: "repeat_pict", scope: !5488, file: !75, line: 5110, baseType: !969, size: 32, align: 32, offset: 352)
!5525 = !DIDerivedType(tag: DW_TAG_member, name: "pts", scope: !5488, file: !75, line: 5111, baseType: !975, size: 64, align: 64, offset: 384)
!5526 = !DIDerivedType(tag: DW_TAG_member, name: "dts", scope: !5488, file: !75, line: 5112, baseType: !975, size: 64, align: 64, offset: 448)
!5527 = !DIDerivedType(tag: DW_TAG_member, name: "last_pts", scope: !5488, file: !75, line: 5115, baseType: !975, size: 64, align: 64, offset: 512)
!5528 = !DIDerivedType(tag: DW_TAG_member, name: "last_dts", scope: !5488, file: !75, line: 5116, baseType: !975, size: 64, align: 64, offset: 576)
!5529 = !DIDerivedType(tag: DW_TAG_member, name: "fetch_timestamp", scope: !5488, file: !75, line: 5117, baseType: !969, size: 32, align: 32, offset: 640)
!5530 = !DIDerivedType(tag: DW_TAG_member, name: "cur_frame_start_index", scope: !5488, file: !75, line: 5120, baseType: !969, size: 32, align: 32, offset: 672)
!5531 = !DIDerivedType(tag: DW_TAG_member, name: "cur_frame_offset", scope: !5488, file: !75, line: 5121, baseType: !5532, size: 256, align: 64, offset: 704)
!5532 = !DICompositeType(tag: DW_TAG_array_type, baseType: !975, size: 256, align: 64, elements: !5088)
!5533 = !DIDerivedType(tag: DW_TAG_member, name: "cur_frame_pts", scope: !5488, file: !75, line: 5122, baseType: !5532, size: 256, align: 64, offset: 960)
!5534 = !DIDerivedType(tag: DW_TAG_member, name: "cur_frame_dts", scope: !5488, file: !75, line: 5123, baseType: !5532, size: 256, align: 64, offset: 1216)
!5535 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5488, file: !75, line: 5125, baseType: !969, size: 32, align: 32, offset: 1472)
!5536 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !5488, file: !75, line: 5132, baseType: !975, size: 64, align: 64, offset: 1536)
!5537 = !DIDerivedType(tag: DW_TAG_member, name: "cur_frame_end", scope: !5488, file: !75, line: 5133, baseType: !5532, size: 256, align: 64, offset: 1600)
!5538 = !DIDerivedType(tag: DW_TAG_member, name: "key_frame", scope: !5488, file: !75, line: 5141, baseType: !969, size: 32, align: 32, offset: 1856)
!5539 = !DIDerivedType(tag: DW_TAG_member, name: "convergence_duration", scope: !5488, file: !75, line: 5148, baseType: !975, size: 64, align: 64, offset: 1920)
!5540 = !DIDerivedType(tag: DW_TAG_member, name: "dts_sync_point", scope: !5488, file: !75, line: 5161, baseType: !969, size: 32, align: 32, offset: 1984)
!5541 = !DIDerivedType(tag: DW_TAG_member, name: "dts_ref_dts_delta", scope: !5488, file: !75, line: 5176, baseType: !969, size: 32, align: 32, offset: 2016)
!5542 = !DIDerivedType(tag: DW_TAG_member, name: "pts_dts_delta", scope: !5488, file: !75, line: 5190, baseType: !969, size: 32, align: 32, offset: 2048)
!5543 = !DIDerivedType(tag: DW_TAG_member, name: "cur_frame_pos", scope: !5488, file: !75, line: 5197, baseType: !5532, size: 256, align: 64, offset: 2112)
!5544 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !5488, file: !75, line: 5202, baseType: !975, size: 64, align: 64, offset: 2368)
!5545 = !DIDerivedType(tag: DW_TAG_member, name: "last_pos", scope: !5488, file: !75, line: 5207, baseType: !975, size: 64, align: 64, offset: 2432)
!5546 = !DIDerivedType(tag: DW_TAG_member, name: "duration", scope: !5488, file: !75, line: 5214, baseType: !969, size: 32, align: 32, offset: 2496)
!5547 = !DIDerivedType(tag: DW_TAG_member, name: "field_order", scope: !5488, file: !75, line: 5216, baseType: !872, size: 32, align: 32, offset: 2528)
!5548 = !DIDerivedType(tag: DW_TAG_member, name: "picture_structure", scope: !5488, file: !75, line: 5226, baseType: !1306, size: 32, align: 32, offset: 2560)
!5549 = !DIDerivedType(tag: DW_TAG_member, name: "output_picture_number", scope: !5488, file: !75, line: 5234, baseType: !969, size: 32, align: 32, offset: 2592)
!5550 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !5488, file: !75, line: 5239, baseType: !969, size: 32, align: 32, offset: 2624)
!5551 = !DIDerivedType(tag: DW_TAG_member, name: "height", scope: !5488, file: !75, line: 5240, baseType: !969, size: 32, align: 32, offset: 2656)
!5552 = !DIDerivedType(tag: DW_TAG_member, name: "coded_width", scope: !5488, file: !75, line: 5245, baseType: !969, size: 32, align: 32, offset: 2688)
!5553 = !DIDerivedType(tag: DW_TAG_member, name: "coded_height", scope: !5488, file: !75, line: 5246, baseType: !969, size: 32, align: 32, offset: 2720)
!5554 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !5488, file: !75, line: 5256, baseType: !969, size: 32, align: 32, offset: 2752)
!5555 = !DIDerivedType(tag: DW_TAG_member, name: "last_in_packet_buffer", scope: !4984, file: !1298, line: 1089, baseType: !5556, size: 64, align: 64, offset: 2240)
!5556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5557, size: 64, align: 64)
!5557 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVPacketList", file: !1298, line: 2003, size: 768, align: 64, elements: !5558)
!5558 = !{!5559, !5560}
!5559 = !DIDerivedType(tag: DW_TAG_member, name: "pkt", scope: !5557, file: !1298, line: 2004, baseType: !4815, size: 704, align: 64)
!5560 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !5557, file: !1298, line: 2005, baseType: !5556, size: 64, align: 64, offset: 704)
!5561 = !DIDerivedType(tag: DW_TAG_member, name: "probe_data", scope: !4984, file: !1298, line: 1090, baseType: !4776, size: 256, align: 64, offset: 2304)
!5562 = !DIDerivedType(tag: DW_TAG_member, name: "pts_buffer", scope: !4984, file: !1298, line: 1092, baseType: !5563, size: 1088, align: 64, offset: 2560)
!5563 = !DICompositeType(tag: DW_TAG_array_type, baseType: !975, size: 1088, align: 64, elements: !4659)
!5564 = !DIDerivedType(tag: DW_TAG_member, name: "index_entries", scope: !4984, file: !1298, line: 1094, baseType: !5565, size: 64, align: 64, offset: 3648)
!5565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5566, size: 64, align: 64)
!5566 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVIndexEntry", file: !1298, line: 808, baseType: !5567)
!5567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVIndexEntry", file: !1298, line: 793, size: 192, align: 64, elements: !5568)
!5568 = !{!5569, !5570, !5571, !5572, !5573}
!5569 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !5567, file: !1298, line: 794, baseType: !975, size: 64, align: 64)
!5570 = !DIDerivedType(tag: DW_TAG_member, name: "timestamp", scope: !5567, file: !1298, line: 795, baseType: !975, size: 64, align: 64, offset: 64)
!5571 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5567, file: !1298, line: 805, baseType: !969, size: 2, align: 32, offset: 128, flags: DIFlagBitField, extraData: i64 128)
!5572 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !5567, file: !1298, line: 806, baseType: !969, size: 30, align: 32, offset: 130, flags: DIFlagBitField, extraData: i64 128)
!5573 = !DIDerivedType(tag: DW_TAG_member, name: "min_distance", scope: !5567, file: !1298, line: 807, baseType: !969, size: 32, align: 32, offset: 160)
!5574 = !DIDerivedType(tag: DW_TAG_member, name: "nb_index_entries", scope: !4984, file: !1298, line: 1096, baseType: !969, size: 32, align: 32, offset: 3712)
!5575 = !DIDerivedType(tag: DW_TAG_member, name: "index_entries_allocated_size", scope: !4984, file: !1298, line: 1097, baseType: !1090, size: 32, align: 32, offset: 3744)
!5576 = !DIDerivedType(tag: DW_TAG_member, name: "stream_identifier", scope: !4984, file: !1298, line: 1104, baseType: !969, size: 32, align: 32, offset: 3776)
!5577 = !DIDerivedType(tag: DW_TAG_member, name: "program_num", scope: !4984, file: !1298, line: 1109, baseType: !969, size: 32, align: 32, offset: 3808)
!5578 = !DIDerivedType(tag: DW_TAG_member, name: "pmt_version", scope: !4984, file: !1298, line: 1110, baseType: !969, size: 32, align: 32, offset: 3840)
!5579 = !DIDerivedType(tag: DW_TAG_member, name: "pmt_stream_idx", scope: !4984, file: !1298, line: 1111, baseType: !969, size: 32, align: 32, offset: 3872)
!5580 = !DIDerivedType(tag: DW_TAG_member, name: "interleaver_chunk_size", scope: !4984, file: !1298, line: 1113, baseType: !975, size: 64, align: 64, offset: 3904)
!5581 = !DIDerivedType(tag: DW_TAG_member, name: "interleaver_chunk_duration", scope: !4984, file: !1298, line: 1114, baseType: !975, size: 64, align: 64, offset: 3968)
!5582 = !DIDerivedType(tag: DW_TAG_member, name: "request_probe", scope: !4984, file: !1298, line: 1123, baseType: !969, size: 32, align: 32, offset: 4032)
!5583 = !DIDerivedType(tag: DW_TAG_member, name: "skip_to_keyframe", scope: !4984, file: !1298, line: 1128, baseType: !969, size: 32, align: 32, offset: 4064)
!5584 = !DIDerivedType(tag: DW_TAG_member, name: "skip_samples", scope: !4984, file: !1298, line: 1133, baseType: !969, size: 32, align: 32, offset: 4096)
!5585 = !DIDerivedType(tag: DW_TAG_member, name: "start_skip_samples", scope: !4984, file: !1298, line: 1142, baseType: !975, size: 64, align: 64, offset: 4160)
!5586 = !DIDerivedType(tag: DW_TAG_member, name: "first_discard_sample", scope: !4984, file: !1298, line: 1150, baseType: !975, size: 64, align: 64, offset: 4224)
!5587 = !DIDerivedType(tag: DW_TAG_member, name: "last_discard_sample", scope: !4984, file: !1298, line: 1157, baseType: !975, size: 64, align: 64, offset: 4288)
!5588 = !DIDerivedType(tag: DW_TAG_member, name: "nb_decoded_frames", scope: !4984, file: !1298, line: 1163, baseType: !969, size: 32, align: 32, offset: 4352)
!5589 = !DIDerivedType(tag: DW_TAG_member, name: "mux_ts_offset", scope: !4984, file: !1298, line: 1169, baseType: !975, size: 64, align: 64, offset: 4416)
!5590 = !DIDerivedType(tag: DW_TAG_member, name: "pts_wrap_reference", scope: !4984, file: !1298, line: 1174, baseType: !975, size: 64, align: 64, offset: 4480)
!5591 = !DIDerivedType(tag: DW_TAG_member, name: "pts_wrap_behavior", scope: !4984, file: !1298, line: 1186, baseType: !969, size: 32, align: 32, offset: 4544)
!5592 = !DIDerivedType(tag: DW_TAG_member, name: "update_initial_durations_done", scope: !4984, file: !1298, line: 1191, baseType: !969, size: 32, align: 32, offset: 4576)
!5593 = !DIDerivedType(tag: DW_TAG_member, name: "pts_reorder_error", scope: !4984, file: !1298, line: 1196, baseType: !5563, size: 1088, align: 64, offset: 4608)
!5594 = !DIDerivedType(tag: DW_TAG_member, name: "pts_reorder_error_count", scope: !4984, file: !1298, line: 1197, baseType: !5595, size: 136, align: 8, offset: 5696)
!5595 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1151, size: 136, align: 8, elements: !4659)
!5596 = !DIDerivedType(tag: DW_TAG_member, name: "last_dts_for_order_check", scope: !4984, file: !1298, line: 1202, baseType: !975, size: 64, align: 64, offset: 5888)
!5597 = !DIDerivedType(tag: DW_TAG_member, name: "dts_ordered", scope: !4984, file: !1298, line: 1203, baseType: !1151, size: 8, align: 8, offset: 5952)
!5598 = !DIDerivedType(tag: DW_TAG_member, name: "dts_misordered", scope: !4984, file: !1298, line: 1204, baseType: !1151, size: 8, align: 8, offset: 5960)
!5599 = !DIDerivedType(tag: DW_TAG_member, name: "inject_global_side_data", scope: !4984, file: !1298, line: 1209, baseType: !969, size: 32, align: 32, offset: 5984)
!5600 = !DIDerivedType(tag: DW_TAG_member, name: "display_aspect_ratio", scope: !4984, file: !1298, line: 1216, baseType: !982, size: 64, align: 32, offset: 6016)
!5601 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !4984, file: !1298, line: 1222, baseType: !5602, size: 64, align: 64, offset: 6080)
!5602 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5603, size: 64, align: 64)
!5603 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVStreamInternal", file: !1298, line: 840, baseType: !5604)
!5604 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVStreamInternal", file: !1298, line: 840, flags: DIFlagFwdDecl)
!5605 = !DIDerivedType(tag: DW_TAG_member, name: "filename", scope: !4789, file: !1298, line: 1417, baseType: !5606, size: 8192, align: 8, offset: 448)
!5606 = !DICompositeType(tag: DW_TAG_array_type, baseType: !955, size: 8192, align: 8, elements: !5607)
!5607 = !{!5608}
!5608 = !DISubrange(count: 1024)
!5609 = !DIDerivedType(tag: DW_TAG_member, name: "url", scope: !4789, file: !1298, line: 1433, baseType: !1076, size: 64, align: 64, offset: 8640)
!5610 = !DIDerivedType(tag: DW_TAG_member, name: "start_time", scope: !4789, file: !1298, line: 1442, baseType: !975, size: 64, align: 64, offset: 8704)
!5611 = !DIDerivedType(tag: DW_TAG_member, name: "duration", scope: !4789, file: !1298, line: 1452, baseType: !975, size: 64, align: 64, offset: 8768)
!5612 = !DIDerivedType(tag: DW_TAG_member, name: "bit_rate", scope: !4789, file: !1298, line: 1459, baseType: !975, size: 64, align: 64, offset: 8832)
!5613 = !DIDerivedType(tag: DW_TAG_member, name: "packet_size", scope: !4789, file: !1298, line: 1461, baseType: !1090, size: 32, align: 32, offset: 8896)
!5614 = !DIDerivedType(tag: DW_TAG_member, name: "max_delay", scope: !4789, file: !1298, line: 1462, baseType: !969, size: 32, align: 32, offset: 8928)
!5615 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4789, file: !1298, line: 1468, baseType: !969, size: 32, align: 32, offset: 8960)
!5616 = !DIDerivedType(tag: DW_TAG_member, name: "probesize", scope: !4789, file: !1298, line: 1503, baseType: !975, size: 64, align: 64, offset: 9024)
!5617 = !DIDerivedType(tag: DW_TAG_member, name: "max_analyze_duration", scope: !4789, file: !1298, line: 1511, baseType: !975, size: 64, align: 64, offset: 9088)
!5618 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !4789, file: !1298, line: 1513, baseType: !4943, size: 64, align: 64, offset: 9152)
!5619 = !DIDerivedType(tag: DW_TAG_member, name: "keylen", scope: !4789, file: !1298, line: 1514, baseType: !969, size: 32, align: 32, offset: 9216)
!5620 = !DIDerivedType(tag: DW_TAG_member, name: "nb_programs", scope: !4789, file: !1298, line: 1516, baseType: !1090, size: 32, align: 32, offset: 9248)
!5621 = !DIDerivedType(tag: DW_TAG_member, name: "programs", scope: !4789, file: !1298, line: 1517, baseType: !5622, size: 64, align: 64, offset: 9280)
!5622 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5623, size: 64, align: 64)
!5623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5624, size: 64, align: 64)
!5624 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVProgram", file: !1298, line: 1284, baseType: !5625)
!5625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVProgram", file: !1298, line: 1259, size: 704, align: 64, elements: !5626)
!5626 = !{!5627, !5628, !5629, !5630, !5632, !5633, !5634, !5635, !5636, !5637, !5638, !5639, !5640, !5641}
!5627 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !5625, file: !1298, line: 1260, baseType: !969, size: 32, align: 32)
!5628 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5625, file: !1298, line: 1261, baseType: !969, size: 32, align: 32, offset: 32)
!5629 = !DIDerivedType(tag: DW_TAG_member, name: "discard", scope: !5625, file: !1298, line: 1262, baseType: !892, size: 32, align: 32, offset: 64)
!5630 = !DIDerivedType(tag: DW_TAG_member, name: "stream_index", scope: !5625, file: !1298, line: 1263, baseType: !5631, size: 64, align: 64, offset: 128)
!5631 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1090, size: 64, align: 64)
!5632 = !DIDerivedType(tag: DW_TAG_member, name: "nb_stream_indexes", scope: !5625, file: !1298, line: 1264, baseType: !1090, size: 32, align: 32, offset: 192)
!5633 = !DIDerivedType(tag: DW_TAG_member, name: "metadata", scope: !5625, file: !1298, line: 1265, baseType: !1059, size: 64, align: 64, offset: 256)
!5634 = !DIDerivedType(tag: DW_TAG_member, name: "program_num", scope: !5625, file: !1298, line: 1267, baseType: !969, size: 32, align: 32, offset: 320)
!5635 = !DIDerivedType(tag: DW_TAG_member, name: "pmt_pid", scope: !5625, file: !1298, line: 1268, baseType: !969, size: 32, align: 32, offset: 352)
!5636 = !DIDerivedType(tag: DW_TAG_member, name: "pcr_pid", scope: !5625, file: !1298, line: 1269, baseType: !969, size: 32, align: 32, offset: 384)
!5637 = !DIDerivedType(tag: DW_TAG_member, name: "pmt_version", scope: !5625, file: !1298, line: 1270, baseType: !969, size: 32, align: 32, offset: 416)
!5638 = !DIDerivedType(tag: DW_TAG_member, name: "start_time", scope: !5625, file: !1298, line: 1279, baseType: !975, size: 64, align: 64, offset: 448)
!5639 = !DIDerivedType(tag: DW_TAG_member, name: "end_time", scope: !5625, file: !1298, line: 1280, baseType: !975, size: 64, align: 64, offset: 512)
!5640 = !DIDerivedType(tag: DW_TAG_member, name: "pts_wrap_reference", scope: !5625, file: !1298, line: 1282, baseType: !975, size: 64, align: 64, offset: 576)
!5641 = !DIDerivedType(tag: DW_TAG_member, name: "pts_wrap_behavior", scope: !5625, file: !1298, line: 1283, baseType: !969, size: 32, align: 32, offset: 640)
!5642 = !DIDerivedType(tag: DW_TAG_member, name: "video_codec_id", scope: !4789, file: !1298, line: 1523, baseType: !74, size: 32, align: 32, offset: 9344)
!5643 = !DIDerivedType(tag: DW_TAG_member, name: "audio_codec_id", scope: !4789, file: !1298, line: 1529, baseType: !74, size: 32, align: 32, offset: 9376)
!5644 = !DIDerivedType(tag: DW_TAG_member, name: "subtitle_codec_id", scope: !4789, file: !1298, line: 1535, baseType: !74, size: 32, align: 32, offset: 9408)
!5645 = !DIDerivedType(tag: DW_TAG_member, name: "max_index_size", scope: !4789, file: !1298, line: 1547, baseType: !1090, size: 32, align: 32, offset: 9440)
!5646 = !DIDerivedType(tag: DW_TAG_member, name: "max_picture_buffer", scope: !4789, file: !1298, line: 1553, baseType: !1090, size: 32, align: 32, offset: 9472)
!5647 = !DIDerivedType(tag: DW_TAG_member, name: "nb_chapters", scope: !4789, file: !1298, line: 1566, baseType: !1090, size: 32, align: 32, offset: 9504)
!5648 = !DIDerivedType(tag: DW_TAG_member, name: "chapters", scope: !4789, file: !1298, line: 1567, baseType: !5649, size: 64, align: 64, offset: 9536)
!5649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5650, size: 64, align: 64)
!5650 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5651, size: 64, align: 64)
!5651 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVChapter", file: !1298, line: 1299, baseType: !5652)
!5652 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVChapter", file: !1298, line: 1294, size: 320, align: 64, elements: !5653)
!5653 = !{!5654, !5655, !5656, !5657, !5658}
!5654 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !5652, file: !1298, line: 1295, baseType: !969, size: 32, align: 32)
!5655 = !DIDerivedType(tag: DW_TAG_member, name: "time_base", scope: !5652, file: !1298, line: 1296, baseType: !982, size: 64, align: 32, offset: 32)
!5656 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !5652, file: !1298, line: 1297, baseType: !975, size: 64, align: 64, offset: 128)
!5657 = !DIDerivedType(tag: DW_TAG_member, name: "end", scope: !5652, file: !1298, line: 1297, baseType: !975, size: 64, align: 64, offset: 192)
!5658 = !DIDerivedType(tag: DW_TAG_member, name: "metadata", scope: !5652, file: !1298, line: 1298, baseType: !1059, size: 64, align: 64, offset: 256)
!5659 = !DIDerivedType(tag: DW_TAG_member, name: "metadata", scope: !4789, file: !1298, line: 1577, baseType: !1059, size: 64, align: 64, offset: 9600)
!5660 = !DIDerivedType(tag: DW_TAG_member, name: "start_time_realtime", scope: !4789, file: !1298, line: 1590, baseType: !975, size: 64, align: 64, offset: 9664)
!5661 = !DIDerivedType(tag: DW_TAG_member, name: "fps_probe_size", scope: !4789, file: !1298, line: 1597, baseType: !969, size: 32, align: 32, offset: 9728)
!5662 = !DIDerivedType(tag: DW_TAG_member, name: "error_recognition", scope: !4789, file: !1298, line: 1604, baseType: !969, size: 32, align: 32, offset: 9760)
!5663 = !DIDerivedType(tag: DW_TAG_member, name: "interrupt_callback", scope: !4789, file: !1298, line: 1615, baseType: !5664, size: 128, align: 64, offset: 9792)
!5664 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVIOInterruptCB", file: !1289, line: 61, baseType: !5665)
!5665 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVIOInterruptCB", file: !1289, line: 58, size: 128, align: 64, elements: !5666)
!5666 = !{!5667, !5668}
!5667 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !5665, file: !1289, line: 59, baseType: !4972, size: 64, align: 64)
!5668 = !DIDerivedType(tag: DW_TAG_member, name: "opaque", scope: !5665, file: !1289, line: 60, baseType: !960, size: 64, align: 64, offset: 64)
!5669 = !DIDerivedType(tag: DW_TAG_member, name: "debug", scope: !4789, file: !1298, line: 1620, baseType: !969, size: 32, align: 32, offset: 9920)
!5670 = !DIDerivedType(tag: DW_TAG_member, name: "max_interleave_delta", scope: !4789, file: !1298, line: 1639, baseType: !975, size: 64, align: 64, offset: 9984)
!5671 = !DIDerivedType(tag: DW_TAG_member, name: "strict_std_compliance", scope: !4789, file: !1298, line: 1645, baseType: !969, size: 32, align: 32, offset: 10048)
!5672 = !DIDerivedType(tag: DW_TAG_member, name: "event_flags", scope: !4789, file: !1298, line: 1652, baseType: !969, size: 32, align: 32, offset: 10080)
!5673 = !DIDerivedType(tag: DW_TAG_member, name: "max_ts_probe", scope: !4789, file: !1298, line: 1659, baseType: !969, size: 32, align: 32, offset: 10112)
!5674 = !DIDerivedType(tag: DW_TAG_member, name: "avoid_negative_ts", scope: !4789, file: !1298, line: 1668, baseType: !969, size: 32, align: 32, offset: 10144)
!5675 = !DIDerivedType(tag: DW_TAG_member, name: "ts_id", scope: !4789, file: !1298, line: 1677, baseType: !969, size: 32, align: 32, offset: 10176)
!5676 = !DIDerivedType(tag: DW_TAG_member, name: "audio_preload", scope: !4789, file: !1298, line: 1685, baseType: !969, size: 32, align: 32, offset: 10208)
!5677 = !DIDerivedType(tag: DW_TAG_member, name: "max_chunk_duration", scope: !4789, file: !1298, line: 1693, baseType: !969, size: 32, align: 32, offset: 10240)
!5678 = !DIDerivedType(tag: DW_TAG_member, name: "max_chunk_size", scope: !4789, file: !1298, line: 1701, baseType: !969, size: 32, align: 32, offset: 10272)
!5679 = !DIDerivedType(tag: DW_TAG_member, name: "use_wallclock_as_timestamps", scope: !4789, file: !1298, line: 1709, baseType: !969, size: 32, align: 32, offset: 10304)
!5680 = !DIDerivedType(tag: DW_TAG_member, name: "avio_flags", scope: !4789, file: !1298, line: 1716, baseType: !969, size: 32, align: 32, offset: 10336)
!5681 = !DIDerivedType(tag: DW_TAG_member, name: "duration_estimation_method", scope: !4789, file: !1298, line: 1724, baseType: !1312, size: 32, align: 32, offset: 10368)
!5682 = !DIDerivedType(tag: DW_TAG_member, name: "skip_initial_bytes", scope: !4789, file: !1298, line: 1731, baseType: !975, size: 64, align: 64, offset: 10432)
!5683 = !DIDerivedType(tag: DW_TAG_member, name: "correct_ts_overflow", scope: !4789, file: !1298, line: 1738, baseType: !1090, size: 32, align: 32, offset: 10496)
!5684 = !DIDerivedType(tag: DW_TAG_member, name: "seek2any", scope: !4789, file: !1298, line: 1745, baseType: !969, size: 32, align: 32, offset: 10528)
!5685 = !DIDerivedType(tag: DW_TAG_member, name: "flush_packets", scope: !4789, file: !1298, line: 1752, baseType: !969, size: 32, align: 32, offset: 10560)
!5686 = !DIDerivedType(tag: DW_TAG_member, name: "probe_score", scope: !4789, file: !1298, line: 1761, baseType: !969, size: 32, align: 32, offset: 10592)
!5687 = !DIDerivedType(tag: DW_TAG_member, name: "format_probesize", scope: !4789, file: !1298, line: 1768, baseType: !969, size: 32, align: 32, offset: 10624)
!5688 = !DIDerivedType(tag: DW_TAG_member, name: "codec_whitelist", scope: !4789, file: !1298, line: 1776, baseType: !1076, size: 64, align: 64, offset: 10688)
!5689 = !DIDerivedType(tag: DW_TAG_member, name: "format_whitelist", scope: !4789, file: !1298, line: 1784, baseType: !1076, size: 64, align: 64, offset: 10752)
!5690 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !4789, file: !1298, line: 1790, baseType: !5691, size: 64, align: 64, offset: 10816)
!5691 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5692, size: 64, align: 64)
!5692 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVFormatInternal", file: !1298, line: 1321, baseType: !5693)
!5693 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVFormatInternal", file: !1298, line: 1321, flags: DIFlagFwdDecl)
!5694 = !DIDerivedType(tag: DW_TAG_member, name: "io_repositioned", scope: !4789, file: !1298, line: 1798, baseType: !969, size: 32, align: 32, offset: 10880)
!5695 = !DIDerivedType(tag: DW_TAG_member, name: "video_codec", scope: !4789, file: !1298, line: 1806, baseType: !5696, size: 64, align: 64, offset: 10944)
!5696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5697, size: 64, align: 64)
!5697 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodec", file: !75, line: 3610, baseType: !4999)
!5698 = !DIDerivedType(tag: DW_TAG_member, name: "audio_codec", scope: !4789, file: !1298, line: 1814, baseType: !5696, size: 64, align: 64, offset: 11008)
!5699 = !DIDerivedType(tag: DW_TAG_member, name: "subtitle_codec", scope: !4789, file: !1298, line: 1822, baseType: !5696, size: 64, align: 64, offset: 11072)
!5700 = !DIDerivedType(tag: DW_TAG_member, name: "data_codec", scope: !4789, file: !1298, line: 1830, baseType: !5696, size: 64, align: 64, offset: 11136)
!5701 = !DIDerivedType(tag: DW_TAG_member, name: "metadata_header_padding", scope: !4789, file: !1298, line: 1837, baseType: !969, size: 32, align: 32, offset: 11200)
!5702 = !DIDerivedType(tag: DW_TAG_member, name: "opaque", scope: !4789, file: !1298, line: 1843, baseType: !960, size: 64, align: 64, offset: 11264)
!5703 = !DIDerivedType(tag: DW_TAG_member, name: "control_message_cb", scope: !4789, file: !1298, line: 1848, baseType: !5704, size: 64, align: 64, offset: 11328)
!5704 = !DIDerivedType(tag: DW_TAG_typedef, name: "av_format_control_message", file: !1298, line: 1305, baseType: !4851)
!5705 = !DIDerivedType(tag: DW_TAG_member, name: "output_ts_offset", scope: !4789, file: !1298, line: 1854, baseType: !975, size: 64, align: 64, offset: 11392)
!5706 = !DIDerivedType(tag: DW_TAG_member, name: "dump_separator", scope: !4789, file: !1298, line: 1862, baseType: !1150, size: 64, align: 64, offset: 11456)
!5707 = !DIDerivedType(tag: DW_TAG_member, name: "data_codec_id", scope: !4789, file: !1298, line: 1868, baseType: !74, size: 32, align: 32, offset: 11520)
!5708 = !DIDerivedType(tag: DW_TAG_member, name: "open_cb", scope: !4789, file: !1298, line: 1889, baseType: !5709, size: 64, align: 64, offset: 11584)
!5709 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5710, size: 64, align: 64)
!5710 = !DISubroutineType(types: !5711)
!5711 = !{!969, !4788, !5712, !953, !969, !5713, !1058}
!5712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4914, size: 64, align: 64)
!5713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5714, size: 64, align: 64)
!5714 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5664)
!5715 = !DIDerivedType(tag: DW_TAG_member, name: "protocol_whitelist", scope: !4789, file: !1298, line: 1897, baseType: !1076, size: 64, align: 64, offset: 11648)
!5716 = !DIDerivedType(tag: DW_TAG_member, name: "io_open", scope: !4789, file: !1298, line: 1919, baseType: !5717, size: 64, align: 64, offset: 11712)
!5717 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5718, size: 64, align: 64)
!5718 = !DISubroutineType(types: !5719)
!5719 = !{!969, !4788, !5712, !953, !969, !1058}
!5720 = !DIDerivedType(tag: DW_TAG_member, name: "io_close", scope: !4789, file: !1298, line: 1925, baseType: !5721, size: 64, align: 64, offset: 11776)
!5721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5722, size: 64, align: 64)
!5722 = !DISubroutineType(types: !5723)
!5723 = !{null, !4788, !4914}
!5724 = !DIDerivedType(tag: DW_TAG_member, name: "protocol_blacklist", scope: !4789, file: !1298, line: 1932, baseType: !1076, size: 64, align: 64, offset: 11840)
!5725 = !DIDerivedType(tag: DW_TAG_member, name: "max_streams", scope: !4789, file: !1298, line: 1939, baseType: !969, size: 32, align: 32, offset: 11904)
!5726 = !DIDerivedType(tag: DW_TAG_member, name: "skip_estimate_duration_from_pts", scope: !4789, file: !1298, line: 1946, baseType: !969, size: 32, align: 32, offset: 11936)
!5727 = !DIDerivedType(tag: DW_TAG_member, name: "read_packet", scope: !4753, file: !1298, line: 714, baseType: !4811, size: 64, align: 64, offset: 704)
!5728 = !DIDerivedType(tag: DW_TAG_member, name: "read_close", scope: !4753, file: !1298, line: 720, baseType: !4785, size: 64, align: 64, offset: 768)
!5729 = !DIDerivedType(tag: DW_TAG_member, name: "read_seek", scope: !4753, file: !1298, line: 730, baseType: !5730, size: 64, align: 64, offset: 832)
!5730 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5731, size: 64, align: 64)
!5731 = !DISubroutineType(types: !5732)
!5732 = !{!969, !4788, !969, !975, !969}
!5733 = !DIDerivedType(tag: DW_TAG_member, name: "read_timestamp", scope: !4753, file: !1298, line: 737, baseType: !5734, size: 64, align: 64, offset: 896)
!5734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5735, size: 64, align: 64)
!5735 = !DISubroutineType(types: !5736)
!5736 = !{!975, !4788, !969, !1335, !975}
!5737 = !DIDerivedType(tag: DW_TAG_member, name: "read_play", scope: !4753, file: !1298, line: 744, baseType: !4785, size: 64, align: 64, offset: 960)
!5738 = !DIDerivedType(tag: DW_TAG_member, name: "read_pause", scope: !4753, file: !1298, line: 750, baseType: !4785, size: 64, align: 64, offset: 1024)
!5739 = !DIDerivedType(tag: DW_TAG_member, name: "read_seek2", scope: !4753, file: !1298, line: 758, baseType: !5740, size: 64, align: 64, offset: 1088)
!5740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5741, size: 64, align: 64)
!5741 = !DISubroutineType(types: !5742)
!5742 = !{!969, !4788, !969, !975, !975, !975, !969}
!5743 = !DIDerivedType(tag: DW_TAG_member, name: "get_device_list", scope: !4753, file: !1298, line: 764, baseType: !4860, size: 64, align: 64, offset: 1152)
!5744 = !DIDerivedType(tag: DW_TAG_member, name: "create_device_capabilities", scope: !4753, file: !1298, line: 770, baseType: !4878, size: 64, align: 64, offset: 1216)
!5745 = !DIDerivedType(tag: DW_TAG_member, name: "free_device_capabilities", scope: !4753, file: !1298, line: 776, baseType: !4878, size: 64, align: 64, offset: 1280)
!5746 = !DILocation(line: 1292, column: 26, scope: !4734)
!5747 = !DILocalVariable(name: "ofmt_opaque", scope: !4734, file: !69, line: 1293, type: !960)
!5748 = !DILocation(line: 1293, column: 11, scope: !4734)
!5749 = !DILocalVariable(name: "ofmt", scope: !4734, file: !69, line: 1294, type: !5750)
!5750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5751, size: 64, align: 64)
!5751 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5752)
!5752 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVOutputFormat", file: !1298, line: 624, baseType: !4795)
!5753 = !DILocation(line: 1294, column: 27, scope: !4734)
!5754 = !DILocalVariable(name: "last_name", scope: !4734, file: !69, line: 1295, type: !953)
!5755 = !DILocation(line: 1295, column: 17, scope: !4734)
!5756 = !DILocalVariable(name: "is_dev", scope: !4734, file: !69, line: 1296, type: !969)
!5757 = !DILocation(line: 1296, column: 9, scope: !4734)
!5758 = !DILocation(line: 1301, column: 21, scope: !4734)
!5759 = !DILocation(line: 1298, column: 5, scope: !4734)
!5760 = !DILocation(line: 1302, column: 15, scope: !4734)
!5761 = !DILocation(line: 1303, column: 5, scope: !4734)
!5762 = !DILocalVariable(name: "decode", scope: !5763, file: !69, line: 1304, type: !969)
!5763 = distinct !DILexicalBlock(scope: !5764, file: !69, line: 1303, column: 14)
!5764 = distinct !DILexicalBlock(scope: !5765, file: !69, line: 1303, column: 5)
!5765 = distinct !DILexicalBlock(scope: !4734, file: !69, line: 1303, column: 5)
!5766 = !DILocation(line: 1304, column: 13, scope: !5763)
!5767 = !DILocalVariable(name: "encode", scope: !5763, file: !69, line: 1305, type: !969)
!5768 = !DILocation(line: 1305, column: 13, scope: !5763)
!5769 = !DILocalVariable(name: "name", scope: !5763, file: !69, line: 1306, type: !953)
!5770 = !DILocation(line: 1306, column: 21, scope: !5763)
!5771 = !DILocalVariable(name: "long_name", scope: !5763, file: !69, line: 1307, type: !953)
!5772 = !DILocation(line: 1307, column: 21, scope: !5763)
!5773 = !DILocation(line: 1309, column: 13, scope: !5774)
!5774 = distinct !DILexicalBlock(scope: !5763, file: !69, line: 1309, column: 13)
!5775 = !DILocation(line: 1309, column: 25, scope: !5774)
!5776 = !DILocation(line: 1309, column: 13, scope: !5763)
!5777 = !DILocation(line: 1310, column: 25, scope: !5778)
!5778 = distinct !DILexicalBlock(scope: !5774, file: !69, line: 1309, column: 42)
!5779 = !DILocation(line: 1311, column: 13, scope: !5778)
!5780 = !DILocation(line: 1311, column: 28, scope: !5781)
!5781 = !DILexicalBlockFile(scope: !5778, file: !69, discriminator: 1)
!5782 = !DILocation(line: 1311, column: 26, scope: !5781)
!5783 = !DILocation(line: 1311, column: 13, scope: !5781)
!5784 = !DILocation(line: 1312, column: 36, scope: !5785)
!5785 = distinct !DILexicalBlock(scope: !5778, file: !69, line: 1311, column: 61)
!5786 = !DILocation(line: 1312, column: 42, scope: !5785)
!5787 = !DILocation(line: 1312, column: 26, scope: !5785)
!5788 = !DILocation(line: 1312, column: 24, scope: !5785)
!5789 = !DILocation(line: 1313, column: 22, scope: !5790)
!5790 = distinct !DILexicalBlock(scope: !5785, file: !69, line: 1313, column: 21)
!5791 = !DILocation(line: 1313, column: 29, scope: !5790)
!5792 = !DILocation(line: 1313, column: 32, scope: !5793)
!5793 = !DILexicalBlockFile(scope: !5790, file: !69, discriminator: 1)
!5794 = !DILocation(line: 1313, column: 21, scope: !5793)
!5795 = !DILocation(line: 1314, column: 21, scope: !5790)
!5796 = distinct !{!5796, !5779}
!5797 = !DILocation(line: 1315, column: 23, scope: !5798)
!5798 = distinct !DILexicalBlock(scope: !5785, file: !69, line: 1315, column: 21)
!5799 = !DILocation(line: 1315, column: 28, scope: !5798)
!5800 = !DILocation(line: 1315, column: 38, scope: !5801)
!5801 = !DILexicalBlockFile(scope: !5798, file: !69, discriminator: 1)
!5802 = !DILocation(line: 1315, column: 44, scope: !5801)
!5803 = !DILocation(line: 1315, column: 50, scope: !5801)
!5804 = !DILocation(line: 1315, column: 31, scope: !5801)
!5805 = !DILocation(line: 1315, column: 56, scope: !5801)
!5806 = !DILocation(line: 1315, column: 61, scope: !5801)
!5807 = !DILocation(line: 1316, column: 28, scope: !5798)
!5808 = !DILocation(line: 1316, column: 34, scope: !5798)
!5809 = !DILocation(line: 1316, column: 40, scope: !5798)
!5810 = !DILocation(line: 1316, column: 21, scope: !5798)
!5811 = !DILocation(line: 1316, column: 51, scope: !5798)
!5812 = !DILocation(line: 1315, column: 21, scope: !5813)
!5813 = !DILexicalBlockFile(scope: !5785, file: !69, discriminator: 2)
!5814 = !DILocation(line: 1317, column: 28, scope: !5815)
!5815 = distinct !DILexicalBlock(scope: !5798, file: !69, line: 1316, column: 56)
!5816 = !DILocation(line: 1317, column: 34, scope: !5815)
!5817 = !DILocation(line: 1317, column: 26, scope: !5815)
!5818 = !DILocation(line: 1318, column: 33, scope: !5815)
!5819 = !DILocation(line: 1318, column: 39, scope: !5815)
!5820 = !DILocation(line: 1318, column: 31, scope: !5815)
!5821 = !DILocation(line: 1319, column: 28, scope: !5815)
!5822 = !DILocation(line: 1320, column: 17, scope: !5815)
!5823 = !DILocation(line: 1311, column: 13, scope: !5824)
!5824 = !DILexicalBlockFile(scope: !5778, file: !69, discriminator: 2)
!5825 = !DILocation(line: 1322, column: 9, scope: !5778)
!5826 = !DILocation(line: 1323, column: 13, scope: !5827)
!5827 = distinct !DILexicalBlock(scope: !5763, file: !69, line: 1323, column: 13)
!5828 = !DILocation(line: 1323, column: 25, scope: !5827)
!5829 = !DILocation(line: 1323, column: 13, scope: !5763)
!5830 = !DILocation(line: 1324, column: 25, scope: !5831)
!5831 = distinct !DILexicalBlock(scope: !5827, file: !69, line: 1323, column: 41)
!5832 = !DILocation(line: 1325, column: 13, scope: !5831)
!5833 = !DILocation(line: 1325, column: 28, scope: !5834)
!5834 = !DILexicalBlockFile(scope: !5831, file: !69, discriminator: 1)
!5835 = !DILocation(line: 1325, column: 26, scope: !5834)
!5836 = !DILocation(line: 1325, column: 13, scope: !5834)
!5837 = !DILocation(line: 1326, column: 36, scope: !5838)
!5838 = distinct !DILexicalBlock(scope: !5831, file: !69, line: 1325, column: 63)
!5839 = !DILocation(line: 1326, column: 42, scope: !5838)
!5840 = !DILocation(line: 1326, column: 26, scope: !5838)
!5841 = !DILocation(line: 1326, column: 24, scope: !5838)
!5842 = !DILocation(line: 1327, column: 22, scope: !5843)
!5843 = distinct !DILexicalBlock(scope: !5838, file: !69, line: 1327, column: 21)
!5844 = !DILocation(line: 1327, column: 29, scope: !5843)
!5845 = !DILocation(line: 1327, column: 32, scope: !5846)
!5846 = !DILexicalBlockFile(scope: !5843, file: !69, discriminator: 1)
!5847 = !DILocation(line: 1327, column: 21, scope: !5846)
!5848 = !DILocation(line: 1328, column: 21, scope: !5843)
!5849 = distinct !{!5849, !5832}
!5850 = !DILocation(line: 1329, column: 23, scope: !5851)
!5851 = distinct !DILexicalBlock(scope: !5838, file: !69, line: 1329, column: 21)
!5852 = !DILocation(line: 1329, column: 28, scope: !5851)
!5853 = !DILocation(line: 1329, column: 38, scope: !5854)
!5854 = !DILexicalBlockFile(scope: !5851, file: !69, discriminator: 1)
!5855 = !DILocation(line: 1329, column: 44, scope: !5854)
!5856 = !DILocation(line: 1329, column: 50, scope: !5854)
!5857 = !DILocation(line: 1329, column: 31, scope: !5854)
!5858 = !DILocation(line: 1329, column: 56, scope: !5854)
!5859 = !DILocation(line: 1329, column: 61, scope: !5854)
!5860 = !DILocation(line: 1330, column: 28, scope: !5851)
!5861 = !DILocation(line: 1330, column: 34, scope: !5851)
!5862 = !DILocation(line: 1330, column: 40, scope: !5851)
!5863 = !DILocation(line: 1330, column: 21, scope: !5851)
!5864 = !DILocation(line: 1330, column: 51, scope: !5851)
!5865 = !DILocation(line: 1329, column: 21, scope: !5866)
!5866 = !DILexicalBlockFile(scope: !5838, file: !69, discriminator: 2)
!5867 = !DILocation(line: 1331, column: 28, scope: !5868)
!5868 = distinct !DILexicalBlock(scope: !5851, file: !69, line: 1330, column: 56)
!5869 = !DILocation(line: 1331, column: 34, scope: !5868)
!5870 = !DILocation(line: 1331, column: 26, scope: !5868)
!5871 = !DILocation(line: 1332, column: 33, scope: !5868)
!5872 = !DILocation(line: 1332, column: 39, scope: !5868)
!5873 = !DILocation(line: 1332, column: 31, scope: !5868)
!5874 = !DILocation(line: 1333, column: 28, scope: !5868)
!5875 = !DILocation(line: 1334, column: 17, scope: !5868)
!5876 = !DILocation(line: 1335, column: 21, scope: !5877)
!5877 = distinct !DILexicalBlock(scope: !5838, file: !69, line: 1335, column: 21)
!5878 = !DILocation(line: 1335, column: 26, scope: !5877)
!5879 = !DILocation(line: 1335, column: 36, scope: !5880)
!5880 = !DILexicalBlockFile(scope: !5877, file: !69, discriminator: 1)
!5881 = !DILocation(line: 1335, column: 42, scope: !5880)
!5882 = !DILocation(line: 1335, column: 48, scope: !5880)
!5883 = !DILocation(line: 1335, column: 29, scope: !5880)
!5884 = !DILocation(line: 1335, column: 54, scope: !5880)
!5885 = !DILocation(line: 1335, column: 21, scope: !5880)
!5886 = !DILocation(line: 1336, column: 28, scope: !5877)
!5887 = !DILocation(line: 1336, column: 21, scope: !5877)
!5888 = !DILocation(line: 1325, column: 13, scope: !5889)
!5889 = !DILexicalBlockFile(scope: !5831, file: !69, discriminator: 2)
!5890 = !DILocation(line: 1338, column: 9, scope: !5831)
!5891 = !DILocation(line: 1339, column: 14, scope: !5892)
!5892 = distinct !DILexicalBlock(scope: !5763, file: !69, line: 1339, column: 13)
!5893 = !DILocation(line: 1339, column: 13, scope: !5763)
!5894 = !DILocation(line: 1340, column: 13, scope: !5892)
!5895 = !DILocation(line: 1341, column: 21, scope: !5763)
!5896 = !DILocation(line: 1341, column: 19, scope: !5763)
!5897 = !DILocation(line: 1344, column: 16, scope: !5763)
!5898 = !DILocation(line: 1345, column: 16, scope: !5763)
!5899 = !DILocation(line: 1346, column: 16, scope: !5763)
!5900 = !DILocation(line: 1347, column: 13, scope: !5763)
!5901 = !DILocation(line: 1347, column: 25, scope: !5902)
!5902 = !DILexicalBlockFile(scope: !5763, file: !69, discriminator: 1)
!5903 = !DILocation(line: 1347, column: 13, scope: !5902)
!5904 = !DILocation(line: 1347, column: 13, scope: !5905)
!5905 = !DILexicalBlockFile(scope: !5763, file: !69, discriminator: 2)
!5906 = !DILocation(line: 1347, column: 13, scope: !5907)
!5907 = !DILexicalBlockFile(scope: !5763, file: !69, discriminator: 3)
!5908 = !DILocation(line: 1343, column: 9, scope: !5763)
!5909 = !DILocation(line: 1303, column: 5, scope: !5910)
!5910 = !DILexicalBlockFile(scope: !5764, file: !69, discriminator: 1)
!5911 = distinct !{!5911, !5761}
!5912 = !DILocation(line: 1349, column: 5, scope: !4734)
!5913 = distinct !DISubprogram(name: "show_muxers", scope: !69, file: !69, line: 1357, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1358, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!5914 = !DILocalVariable(name: "optctx", arg: 1, scope: !5913, file: !69, line: 1357, type: !960)
!5915 = !DILocation(line: 1357, column: 23, scope: !5913)
!5916 = !DILocalVariable(name: "opt", arg: 2, scope: !5913, file: !69, line: 1357, type: !953)
!5917 = !DILocation(line: 1357, column: 43, scope: !5913)
!5918 = !DILocalVariable(name: "arg", arg: 3, scope: !5913, file: !69, line: 1357, type: !953)
!5919 = !DILocation(line: 1357, column: 60, scope: !5913)
!5920 = !DILocation(line: 1359, column: 33, scope: !5913)
!5921 = !DILocation(line: 1359, column: 41, scope: !5913)
!5922 = !DILocation(line: 1359, column: 46, scope: !5913)
!5923 = !DILocation(line: 1359, column: 12, scope: !5913)
!5924 = !DILocation(line: 1359, column: 5, scope: !5913)
!5925 = distinct !DISubprogram(name: "show_demuxers", scope: !69, file: !69, line: 1362, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1363, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!5926 = !DILocalVariable(name: "optctx", arg: 1, scope: !5925, file: !69, line: 1362, type: !960)
!5927 = !DILocation(line: 1362, column: 25, scope: !5925)
!5928 = !DILocalVariable(name: "opt", arg: 2, scope: !5925, file: !69, line: 1362, type: !953)
!5929 = !DILocation(line: 1362, column: 45, scope: !5925)
!5930 = !DILocalVariable(name: "arg", arg: 3, scope: !5925, file: !69, line: 1362, type: !953)
!5931 = !DILocation(line: 1362, column: 62, scope: !5925)
!5932 = !DILocation(line: 1364, column: 33, scope: !5925)
!5933 = !DILocation(line: 1364, column: 41, scope: !5925)
!5934 = !DILocation(line: 1364, column: 46, scope: !5925)
!5935 = !DILocation(line: 1364, column: 12, scope: !5925)
!5936 = !DILocation(line: 1364, column: 5, scope: !5925)
!5937 = distinct !DISubprogram(name: "show_devices", scope: !69, file: !69, line: 1367, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1368, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!5938 = !DILocalVariable(name: "optctx", arg: 1, scope: !5937, file: !69, line: 1367, type: !960)
!5939 = !DILocation(line: 1367, column: 24, scope: !5937)
!5940 = !DILocalVariable(name: "opt", arg: 2, scope: !5937, file: !69, line: 1367, type: !953)
!5941 = !DILocation(line: 1367, column: 44, scope: !5937)
!5942 = !DILocalVariable(name: "arg", arg: 3, scope: !5937, file: !69, line: 1367, type: !953)
!5943 = !DILocation(line: 1367, column: 61, scope: !5937)
!5944 = !DILocation(line: 1369, column: 33, scope: !5937)
!5945 = !DILocation(line: 1369, column: 41, scope: !5937)
!5946 = !DILocation(line: 1369, column: 46, scope: !5937)
!5947 = !DILocation(line: 1369, column: 12, scope: !5937)
!5948 = !DILocation(line: 1369, column: 5, scope: !5937)
!5949 = distinct !DISubprogram(name: "show_codecs", scope: !69, file: !69, line: 1549, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1550, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!5950 = !DILocalVariable(name: "optctx", arg: 1, scope: !5949, file: !69, line: 1549, type: !960)
!5951 = !DILocation(line: 1549, column: 23, scope: !5949)
!5952 = !DILocalVariable(name: "opt", arg: 2, scope: !5949, file: !69, line: 1549, type: !953)
!5953 = !DILocation(line: 1549, column: 43, scope: !5949)
!5954 = !DILocalVariable(name: "arg", arg: 3, scope: !5949, file: !69, line: 1549, type: !953)
!5955 = !DILocation(line: 1549, column: 60, scope: !5949)
!5956 = !DILocalVariable(name: "codecs", scope: !5949, file: !69, line: 1551, type: !5957)
!5957 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5365, size: 64, align: 64)
!5958 = !DILocation(line: 1551, column: 31, scope: !5949)
!5959 = !DILocalVariable(name: "i", scope: !5949, file: !69, line: 1552, type: !1090)
!5960 = !DILocation(line: 1552, column: 14, scope: !5949)
!5961 = !DILocalVariable(name: "nb_codecs", scope: !5949, file: !69, line: 1552, type: !1090)
!5962 = !DILocation(line: 1552, column: 17, scope: !5949)
!5963 = !DILocation(line: 1552, column: 29, scope: !5949)
!5964 = !DILocation(line: 1554, column: 5, scope: !5949)
!5965 = !DILocation(line: 1564, column: 12, scope: !5966)
!5966 = distinct !DILexicalBlock(scope: !5949, file: !69, line: 1564, column: 5)
!5967 = !DILocation(line: 1564, column: 10, scope: !5966)
!5968 = !DILocation(line: 1564, column: 17, scope: !5969)
!5969 = !DILexicalBlockFile(scope: !5970, file: !69, discriminator: 1)
!5970 = distinct !DILexicalBlock(scope: !5966, file: !69, line: 1564, column: 5)
!5971 = !DILocation(line: 1564, column: 21, scope: !5969)
!5972 = !DILocation(line: 1564, column: 19, scope: !5969)
!5973 = !DILocation(line: 1564, column: 5, scope: !5969)
!5974 = !DILocalVariable(name: "desc", scope: !5975, file: !69, line: 1565, type: !5365)
!5975 = distinct !DILexicalBlock(scope: !5970, file: !69, line: 1564, column: 37)
!5976 = !DILocation(line: 1565, column: 34, scope: !5975)
!5977 = !DILocation(line: 1565, column: 48, scope: !5975)
!5978 = !DILocation(line: 1565, column: 41, scope: !5975)
!5979 = !DILocalVariable(name: "codec", scope: !5975, file: !69, line: 1566, type: !5980)
!5980 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5981, size: 64, align: 64)
!5981 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5697)
!5982 = !DILocation(line: 1566, column: 24, scope: !5975)
!5983 = !DILocation(line: 1568, column: 20, scope: !5984)
!5984 = distinct !DILexicalBlock(scope: !5975, file: !69, line: 1568, column: 13)
!5985 = !DILocation(line: 1568, column: 26, scope: !5984)
!5986 = !DILocation(line: 1568, column: 13, scope: !5984)
!5987 = !DILocation(line: 1568, column: 13, scope: !5975)
!5988 = !DILocation(line: 1569, column: 13, scope: !5984)
!5989 = !DILocation(line: 1571, column: 9, scope: !5975)
!5990 = !DILocation(line: 1572, column: 37, scope: !5975)
!5991 = !DILocation(line: 1572, column: 43, scope: !5975)
!5992 = !DILocation(line: 1572, column: 16, scope: !5975)
!5993 = !DILocation(line: 1572, column: 9, scope: !5994)
!5994 = !DILexicalBlockFile(scope: !5975, file: !69, discriminator: 1)
!5995 = !DILocation(line: 1573, column: 37, scope: !5975)
!5996 = !DILocation(line: 1573, column: 43, scope: !5975)
!5997 = !DILocation(line: 1573, column: 16, scope: !5975)
!5998 = !DILocation(line: 1573, column: 9, scope: !5994)
!5999 = !DILocation(line: 1575, column: 42, scope: !5975)
!6000 = !DILocation(line: 1575, column: 48, scope: !5975)
!6001 = !DILocation(line: 1575, column: 22, scope: !5975)
!6002 = !DILocation(line: 1575, column: 9, scope: !5994)
!6003 = !DILocation(line: 1576, column: 17, scope: !5975)
!6004 = !DILocation(line: 1576, column: 23, scope: !5975)
!6005 = !DILocation(line: 1576, column: 29, scope: !5975)
!6006 = !DILocation(line: 1576, column: 16, scope: !5975)
!6007 = !DILocation(line: 1576, column: 9, scope: !5975)
!6008 = !DILocation(line: 1577, column: 17, scope: !5975)
!6009 = !DILocation(line: 1577, column: 23, scope: !5975)
!6010 = !DILocation(line: 1577, column: 29, scope: !5975)
!6011 = !DILocation(line: 1577, column: 16, scope: !5975)
!6012 = !DILocation(line: 1577, column: 9, scope: !5975)
!6013 = !DILocation(line: 1578, column: 17, scope: !5975)
!6014 = !DILocation(line: 1578, column: 23, scope: !5975)
!6015 = !DILocation(line: 1578, column: 29, scope: !5975)
!6016 = !DILocation(line: 1578, column: 16, scope: !5975)
!6017 = !DILocation(line: 1578, column: 9, scope: !5975)
!6018 = !DILocation(line: 1580, column: 29, scope: !5975)
!6019 = !DILocation(line: 1580, column: 35, scope: !5975)
!6020 = !DILocation(line: 1580, column: 41, scope: !5975)
!6021 = !DILocation(line: 1580, column: 47, scope: !5975)
!6022 = !DILocation(line: 1580, column: 59, scope: !5994)
!6023 = !DILocation(line: 1580, column: 65, scope: !5994)
!6024 = !DILocation(line: 1580, column: 41, scope: !5994)
!6025 = !DILocation(line: 1580, column: 41, scope: !6026)
!6026 = !DILexicalBlockFile(scope: !5975, file: !69, discriminator: 2)
!6027 = !DILocation(line: 1580, column: 41, scope: !6028)
!6028 = !DILexicalBlockFile(scope: !5975, file: !69, discriminator: 3)
!6029 = !DILocation(line: 1580, column: 9, scope: !6028)
!6030 = !DILocation(line: 1584, column: 9, scope: !5975)
!6031 = !DILocation(line: 1584, column: 43, scope: !5994)
!6032 = !DILocation(line: 1584, column: 49, scope: !5994)
!6033 = !DILocation(line: 1584, column: 53, scope: !5994)
!6034 = !DILocation(line: 1584, column: 25, scope: !5994)
!6035 = !DILocation(line: 1584, column: 23, scope: !5994)
!6036 = !DILocation(line: 1584, column: 9, scope: !5994)
!6037 = !DILocation(line: 1585, column: 24, scope: !6038)
!6038 = distinct !DILexicalBlock(scope: !6039, file: !69, line: 1585, column: 17)
!6039 = distinct !DILexicalBlock(scope: !5975, file: !69, line: 1584, column: 65)
!6040 = !DILocation(line: 1585, column: 31, scope: !6038)
!6041 = !DILocation(line: 1585, column: 37, scope: !6038)
!6042 = !DILocation(line: 1585, column: 43, scope: !6038)
!6043 = !DILocation(line: 1585, column: 17, scope: !6038)
!6044 = !DILocation(line: 1585, column: 17, scope: !6039)
!6045 = !DILocation(line: 1586, column: 37, scope: !6046)
!6046 = distinct !DILexicalBlock(scope: !6038, file: !69, line: 1585, column: 50)
!6047 = !DILocation(line: 1586, column: 43, scope: !6046)
!6048 = !DILocation(line: 1586, column: 17, scope: !6046)
!6049 = !DILocation(line: 1587, column: 17, scope: !6046)
!6050 = !DILocation(line: 1584, column: 9, scope: !6026)
!6051 = distinct !{!6051, !6030}
!6052 = !DILocation(line: 1590, column: 15, scope: !5975)
!6053 = !DILocation(line: 1591, column: 9, scope: !5975)
!6054 = !DILocation(line: 1591, column: 43, scope: !5994)
!6055 = !DILocation(line: 1591, column: 49, scope: !5994)
!6056 = !DILocation(line: 1591, column: 53, scope: !5994)
!6057 = !DILocation(line: 1591, column: 25, scope: !5994)
!6058 = !DILocation(line: 1591, column: 23, scope: !5994)
!6059 = !DILocation(line: 1591, column: 9, scope: !5994)
!6060 = !DILocation(line: 1592, column: 24, scope: !6061)
!6061 = distinct !DILexicalBlock(scope: !6062, file: !69, line: 1592, column: 17)
!6062 = distinct !DILexicalBlock(scope: !5975, file: !69, line: 1591, column: 65)
!6063 = !DILocation(line: 1592, column: 31, scope: !6061)
!6064 = !DILocation(line: 1592, column: 37, scope: !6061)
!6065 = !DILocation(line: 1592, column: 43, scope: !6061)
!6066 = !DILocation(line: 1592, column: 17, scope: !6061)
!6067 = !DILocation(line: 1592, column: 17, scope: !6062)
!6068 = !DILocation(line: 1593, column: 37, scope: !6069)
!6069 = distinct !DILexicalBlock(scope: !6061, file: !69, line: 1592, column: 50)
!6070 = !DILocation(line: 1593, column: 43, scope: !6069)
!6071 = !DILocation(line: 1593, column: 17, scope: !6069)
!6072 = !DILocation(line: 1594, column: 17, scope: !6069)
!6073 = !DILocation(line: 1591, column: 9, scope: !6026)
!6074 = distinct !{!6074, !6053}
!6075 = !DILocation(line: 1598, column: 9, scope: !5975)
!6076 = !DILocation(line: 1599, column: 5, scope: !5975)
!6077 = !DILocation(line: 1564, column: 33, scope: !6078)
!6078 = !DILexicalBlockFile(scope: !5970, file: !69, discriminator: 2)
!6079 = !DILocation(line: 1564, column: 5, scope: !6078)
!6080 = distinct !{!6080, !6081}
!6081 = !DILocation(line: 1564, column: 5, scope: !5949)
!6082 = !DILocation(line: 1600, column: 13, scope: !5949)
!6083 = !DILocation(line: 1600, column: 5, scope: !5949)
!6084 = !DILocation(line: 1601, column: 5, scope: !5949)
!6085 = distinct !DISubprogram(name: "get_codecs_sorted", scope: !69, file: !69, line: 1516, type: !6086, isLocal: true, isDefinition: true, scopeLine: 1517, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6086 = !DISubroutineType(types: !6087)
!6087 = !{!1090, !6088}
!6088 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5957, size: 64, align: 64)
!6089 = !DILocalVariable(name: "rcodecs", arg: 1, scope: !6085, file: !69, line: 1516, type: !6088)
!6090 = !DILocation(line: 1516, column: 62, scope: !6085)
!6091 = !DILocalVariable(name: "desc", scope: !6085, file: !69, line: 1518, type: !5365)
!6092 = !DILocation(line: 1518, column: 30, scope: !6085)
!6093 = !DILocalVariable(name: "codecs", scope: !6085, file: !69, line: 1519, type: !5957)
!6094 = !DILocation(line: 1519, column: 31, scope: !6085)
!6095 = !DILocalVariable(name: "nb_codecs", scope: !6085, file: !69, line: 1520, type: !1090)
!6096 = !DILocation(line: 1520, column: 14, scope: !6085)
!6097 = !DILocalVariable(name: "i", scope: !6085, file: !69, line: 1520, type: !1090)
!6098 = !DILocation(line: 1520, column: 29, scope: !6085)
!6099 = !DILocation(line: 1522, column: 5, scope: !6085)
!6100 = !DILocation(line: 1522, column: 44, scope: !6101)
!6101 = !DILexicalBlockFile(scope: !6085, file: !69, discriminator: 1)
!6102 = !DILocation(line: 1522, column: 20, scope: !6101)
!6103 = !DILocation(line: 1522, column: 18, scope: !6101)
!6104 = !DILocation(line: 1522, column: 5, scope: !6101)
!6105 = !DILocation(line: 1523, column: 18, scope: !6085)
!6106 = !DILocation(line: 1522, column: 5, scope: !6107)
!6107 = !DILexicalBlockFile(scope: !6085, file: !69, discriminator: 2)
!6108 = distinct !{!6108, !6099}
!6109 = !DILocation(line: 1524, column: 30, scope: !6110)
!6110 = distinct !DILexicalBlock(scope: !6085, file: !69, line: 1524, column: 9)
!6111 = !DILocation(line: 1524, column: 20, scope: !6110)
!6112 = !DILocation(line: 1524, column: 18, scope: !6110)
!6113 = !DILocation(line: 1524, column: 9, scope: !6085)
!6114 = !DILocation(line: 1525, column: 9, scope: !6115)
!6115 = distinct !DILexicalBlock(scope: !6110, file: !69, line: 1524, column: 60)
!6116 = !DILocation(line: 1526, column: 9, scope: !6115)
!6117 = !DILocation(line: 1528, column: 10, scope: !6085)
!6118 = !DILocation(line: 1529, column: 5, scope: !6085)
!6119 = !DILocation(line: 1529, column: 44, scope: !6101)
!6120 = !DILocation(line: 1529, column: 20, scope: !6101)
!6121 = !DILocation(line: 1529, column: 18, scope: !6101)
!6122 = !DILocation(line: 1529, column: 5, scope: !6101)
!6123 = !DILocation(line: 1530, column: 23, scope: !6085)
!6124 = !DILocation(line: 1530, column: 17, scope: !6085)
!6125 = !DILocation(line: 1530, column: 9, scope: !6085)
!6126 = !DILocation(line: 1530, column: 21, scope: !6085)
!6127 = !DILocation(line: 1529, column: 5, scope: !6107)
!6128 = distinct !{!6128, !6118}
!6129 = !DILocation(line: 1531, column: 5, scope: !6085)
!6130 = distinct !{!6130, !6129}
!6131 = !DILocation(line: 1531, column: 16, scope: !6132)
!6132 = !DILexicalBlockFile(scope: !6133, file: !69, discriminator: 1)
!6133 = distinct !DILexicalBlock(scope: !6134, file: !69, line: 1531, column: 14)
!6134 = distinct !DILexicalBlock(scope: !6085, file: !69, line: 1531, column: 8)
!6135 = !DILocation(line: 1531, column: 21, scope: !6132)
!6136 = !DILocation(line: 1531, column: 18, scope: !6132)
!6137 = !DILocation(line: 1531, column: 14, scope: !6132)
!6138 = !DILocation(line: 1531, column: 35, scope: !6139)
!6139 = !DILexicalBlockFile(scope: !6140, file: !69, discriminator: 2)
!6140 = distinct !DILexicalBlock(scope: !6133, file: !69, line: 1531, column: 33)
!6141 = !DILocation(line: 1531, column: 90, scope: !6142)
!6142 = !DILexicalBlockFile(scope: !6139, file: !69, discriminator: 4)
!6143 = !DILocation(line: 1531, column: 90, scope: !6139)
!6144 = !DILocation(line: 1531, column: 101, scope: !6145)
!6145 = !DILexicalBlockFile(scope: !6134, file: !69, discriminator: 3)
!6146 = !DILocation(line: 1532, column: 11, scope: !6085)
!6147 = !DILocation(line: 1532, column: 19, scope: !6085)
!6148 = !DILocation(line: 1532, column: 5, scope: !6085)
!6149 = !DILocation(line: 1533, column: 16, scope: !6085)
!6150 = !DILocation(line: 1533, column: 6, scope: !6085)
!6151 = !DILocation(line: 1533, column: 14, scope: !6085)
!6152 = !DILocation(line: 1534, column: 12, scope: !6085)
!6153 = !DILocation(line: 1534, column: 5, scope: !6085)
!6154 = distinct !DISubprogram(name: "get_media_type_char", scope: !69, file: !69, line: 1484, type: !6155, isLocal: true, isDefinition: true, scopeLine: 1485, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6155 = !DISubroutineType(types: !6156)
!6156 = !{!955, !534}
!6157 = !DILocalVariable(name: "type", arg: 1, scope: !6154, file: !69, line: 1484, type: !534)
!6158 = !DILocation(line: 1484, column: 50, scope: !6154)
!6159 = !DILocation(line: 1486, column: 13, scope: !6154)
!6160 = !DILocation(line: 1486, column: 5, scope: !6154)
!6161 = !DILocation(line: 1487, column: 34, scope: !6162)
!6162 = distinct !DILexicalBlock(scope: !6154, file: !69, line: 1486, column: 19)
!6163 = !DILocation(line: 1488, column: 34, scope: !6162)
!6164 = !DILocation(line: 1489, column: 33, scope: !6162)
!6165 = !DILocation(line: 1490, column: 37, scope: !6162)
!6166 = !DILocation(line: 1491, column: 38, scope: !6162)
!6167 = !DILocation(line: 1492, column: 18, scope: !6162)
!6168 = !DILocation(line: 1494, column: 1, scope: !6154)
!6169 = distinct !DISubprogram(name: "next_codec_for_id", scope: !69, file: !69, line: 1496, type: !6170, isLocal: true, isDefinition: true, scopeLine: 1498, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6170 = !DISubroutineType(types: !6171)
!6171 = !{!5980, !74, !5980, !969}
!6172 = !DILocalVariable(name: "id", arg: 1, scope: !6169, file: !69, line: 1496, type: !74)
!6173 = !DILocation(line: 1496, column: 56, scope: !6169)
!6174 = !DILocalVariable(name: "prev", arg: 2, scope: !6169, file: !69, line: 1496, type: !5980)
!6175 = !DILocation(line: 1496, column: 75, scope: !6169)
!6176 = !DILocalVariable(name: "encoder", arg: 3, scope: !6169, file: !69, line: 1497, type: !969)
!6177 = !DILocation(line: 1497, column: 45, scope: !6169)
!6178 = !DILocation(line: 1499, column: 5, scope: !6169)
!6179 = !DILocation(line: 1499, column: 34, scope: !6180)
!6180 = !DILexicalBlockFile(scope: !6169, file: !69, discriminator: 1)
!6181 = !DILocation(line: 1499, column: 20, scope: !6180)
!6182 = !DILocation(line: 1499, column: 18, scope: !6180)
!6183 = !DILocation(line: 1499, column: 5, scope: !6180)
!6184 = !DILocation(line: 1500, column: 13, scope: !6185)
!6185 = distinct !DILexicalBlock(scope: !6186, file: !69, line: 1500, column: 13)
!6186 = distinct !DILexicalBlock(scope: !6169, file: !69, line: 1499, column: 42)
!6187 = !DILocation(line: 1500, column: 19, scope: !6185)
!6188 = !DILocation(line: 1500, column: 25, scope: !6185)
!6189 = !DILocation(line: 1500, column: 22, scope: !6185)
!6190 = !DILocation(line: 1500, column: 28, scope: !6185)
!6191 = !DILocation(line: 1501, column: 14, scope: !6185)
!6192 = !DILocation(line: 1500, column: 13, scope: !6193)
!6193 = !DILexicalBlockFile(scope: !6186, file: !69, discriminator: 1)
!6194 = !DILocation(line: 1501, column: 44, scope: !6195)
!6195 = !DILexicalBlockFile(scope: !6185, file: !69, discriminator: 1)
!6196 = !DILocation(line: 1501, column: 24, scope: !6195)
!6197 = !DILocation(line: 1501, column: 14, scope: !6195)
!6198 = !DILocation(line: 1501, column: 72, scope: !6199)
!6199 = !DILexicalBlockFile(scope: !6185, file: !69, discriminator: 2)
!6200 = !DILocation(line: 1501, column: 52, scope: !6199)
!6201 = !DILocation(line: 1500, column: 13, scope: !6202)
!6202 = !DILexicalBlockFile(scope: !6186, file: !69, discriminator: 2)
!6203 = !DILocation(line: 1502, column: 20, scope: !6185)
!6204 = !DILocation(line: 1502, column: 13, scope: !6185)
!6205 = !DILocation(line: 1499, column: 5, scope: !6206)
!6206 = !DILexicalBlockFile(scope: !6169, file: !69, discriminator: 2)
!6207 = distinct !{!6207, !6178}
!6208 = !DILocation(line: 1504, column: 5, scope: !6169)
!6209 = !DILocation(line: 1505, column: 1, scope: !6169)
!6210 = distinct !DISubprogram(name: "print_codecs_for_id", scope: !69, file: !69, line: 1537, type: !6211, isLocal: true, isDefinition: true, scopeLine: 1538, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6211 = !DISubroutineType(types: !6212)
!6212 = !{null, !74, !969}
!6213 = !DILocalVariable(name: "id", arg: 1, scope: !6210, file: !69, line: 1537, type: !74)
!6214 = !DILocation(line: 1537, column: 48, scope: !6210)
!6215 = !DILocalVariable(name: "encoder", arg: 2, scope: !6210, file: !69, line: 1537, type: !969)
!6216 = !DILocation(line: 1537, column: 56, scope: !6210)
!6217 = !DILocalVariable(name: "codec", scope: !6210, file: !69, line: 1539, type: !5980)
!6218 = !DILocation(line: 1539, column: 20, scope: !6210)
!6219 = !DILocation(line: 1541, column: 22, scope: !6210)
!6220 = !DILocation(line: 1541, column: 5, scope: !6210)
!6221 = !DILocation(line: 1543, column: 5, scope: !6210)
!6222 = !DILocation(line: 1543, column: 39, scope: !6223)
!6223 = !DILexicalBlockFile(scope: !6210, file: !69, discriminator: 1)
!6224 = !DILocation(line: 1543, column: 43, scope: !6223)
!6225 = !DILocation(line: 1543, column: 50, scope: !6223)
!6226 = !DILocation(line: 1543, column: 21, scope: !6223)
!6227 = !DILocation(line: 1543, column: 19, scope: !6223)
!6228 = !DILocation(line: 1543, column: 5, scope: !6223)
!6229 = !DILocation(line: 1544, column: 23, scope: !6210)
!6230 = !DILocation(line: 1544, column: 30, scope: !6210)
!6231 = !DILocation(line: 1544, column: 9, scope: !6210)
!6232 = !DILocation(line: 1543, column: 5, scope: !6233)
!6233 = !DILexicalBlockFile(scope: !6210, file: !69, discriminator: 2)
!6234 = distinct !{!6234, !6221}
!6235 = !DILocation(line: 1546, column: 5, scope: !6210)
!6236 = !DILocation(line: 1547, column: 1, scope: !6210)
!6237 = distinct !DISubprogram(name: "show_decoders", scope: !69, file: !69, line: 1642, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1643, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6238 = !DILocalVariable(name: "optctx", arg: 1, scope: !6237, file: !69, line: 1642, type: !960)
!6239 = !DILocation(line: 1642, column: 25, scope: !6237)
!6240 = !DILocalVariable(name: "opt", arg: 2, scope: !6237, file: !69, line: 1642, type: !953)
!6241 = !DILocation(line: 1642, column: 45, scope: !6237)
!6242 = !DILocalVariable(name: "arg", arg: 3, scope: !6237, file: !69, line: 1642, type: !953)
!6243 = !DILocation(line: 1642, column: 62, scope: !6237)
!6244 = !DILocation(line: 1644, column: 5, scope: !6237)
!6245 = !DILocation(line: 1645, column: 5, scope: !6237)
!6246 = distinct !DISubprogram(name: "print_codecs", scope: !69, file: !69, line: 1604, type: !1416, isLocal: true, isDefinition: true, scopeLine: 1605, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6247 = !DILocalVariable(name: "encoder", arg: 1, scope: !6246, file: !69, line: 1604, type: !969)
!6248 = !DILocation(line: 1604, column: 30, scope: !6246)
!6249 = !DILocalVariable(name: "codecs", scope: !6246, file: !69, line: 1606, type: !5957)
!6250 = !DILocation(line: 1606, column: 31, scope: !6246)
!6251 = !DILocalVariable(name: "i", scope: !6246, file: !69, line: 1607, type: !1090)
!6252 = !DILocation(line: 1607, column: 14, scope: !6246)
!6253 = !DILocalVariable(name: "nb_codecs", scope: !6246, file: !69, line: 1607, type: !1090)
!6254 = !DILocation(line: 1607, column: 17, scope: !6246)
!6255 = !DILocation(line: 1607, column: 29, scope: !6246)
!6256 = !DILocation(line: 1619, column: 12, scope: !6246)
!6257 = !DILocation(line: 1609, column: 5, scope: !6246)
!6258 = !DILocation(line: 1620, column: 12, scope: !6259)
!6259 = distinct !DILexicalBlock(scope: !6246, file: !69, line: 1620, column: 5)
!6260 = !DILocation(line: 1620, column: 10, scope: !6259)
!6261 = !DILocation(line: 1620, column: 17, scope: !6262)
!6262 = !DILexicalBlockFile(scope: !6263, file: !69, discriminator: 1)
!6263 = distinct !DILexicalBlock(scope: !6259, file: !69, line: 1620, column: 5)
!6264 = !DILocation(line: 1620, column: 21, scope: !6262)
!6265 = !DILocation(line: 1620, column: 19, scope: !6262)
!6266 = !DILocation(line: 1620, column: 5, scope: !6262)
!6267 = !DILocalVariable(name: "desc", scope: !6268, file: !69, line: 1621, type: !5365)
!6268 = distinct !DILexicalBlock(scope: !6263, file: !69, line: 1620, column: 37)
!6269 = !DILocation(line: 1621, column: 34, scope: !6268)
!6270 = !DILocation(line: 1621, column: 48, scope: !6268)
!6271 = !DILocation(line: 1621, column: 41, scope: !6268)
!6272 = !DILocalVariable(name: "codec", scope: !6268, file: !69, line: 1622, type: !5980)
!6273 = !DILocation(line: 1622, column: 24, scope: !6268)
!6274 = !DILocation(line: 1624, column: 9, scope: !6268)
!6275 = !DILocation(line: 1624, column: 43, scope: !6276)
!6276 = !DILexicalBlockFile(scope: !6268, file: !69, discriminator: 1)
!6277 = !DILocation(line: 1624, column: 49, scope: !6276)
!6278 = !DILocation(line: 1624, column: 53, scope: !6276)
!6279 = !DILocation(line: 1624, column: 60, scope: !6276)
!6280 = !DILocation(line: 1624, column: 25, scope: !6276)
!6281 = !DILocation(line: 1624, column: 23, scope: !6276)
!6282 = !DILocation(line: 1624, column: 9, scope: !6276)
!6283 = !DILocation(line: 1625, column: 47, scope: !6284)
!6284 = distinct !DILexicalBlock(scope: !6268, file: !69, line: 1624, column: 71)
!6285 = !DILocation(line: 1625, column: 53, scope: !6284)
!6286 = !DILocation(line: 1625, column: 27, scope: !6284)
!6287 = !DILocation(line: 1625, column: 13, scope: !6288)
!6288 = !DILexicalBlockFile(scope: !6284, file: !69, discriminator: 1)
!6289 = !DILocation(line: 1626, column: 21, scope: !6284)
!6290 = !DILocation(line: 1626, column: 28, scope: !6284)
!6291 = !DILocation(line: 1626, column: 41, scope: !6284)
!6292 = !DILocation(line: 1626, column: 20, scope: !6284)
!6293 = !DILocation(line: 1626, column: 13, scope: !6284)
!6294 = !DILocation(line: 1627, column: 21, scope: !6284)
!6295 = !DILocation(line: 1627, column: 28, scope: !6284)
!6296 = !DILocation(line: 1627, column: 41, scope: !6284)
!6297 = !DILocation(line: 1627, column: 20, scope: !6284)
!6298 = !DILocation(line: 1627, column: 13, scope: !6284)
!6299 = !DILocation(line: 1628, column: 21, scope: !6284)
!6300 = !DILocation(line: 1628, column: 28, scope: !6284)
!6301 = !DILocation(line: 1628, column: 41, scope: !6284)
!6302 = !DILocation(line: 1628, column: 20, scope: !6284)
!6303 = !DILocation(line: 1628, column: 13, scope: !6284)
!6304 = !DILocation(line: 1629, column: 21, scope: !6284)
!6305 = !DILocation(line: 1629, column: 28, scope: !6284)
!6306 = !DILocation(line: 1629, column: 41, scope: !6284)
!6307 = !DILocation(line: 1629, column: 20, scope: !6284)
!6308 = !DILocation(line: 1629, column: 13, scope: !6284)
!6309 = !DILocation(line: 1630, column: 21, scope: !6284)
!6310 = !DILocation(line: 1630, column: 28, scope: !6284)
!6311 = !DILocation(line: 1630, column: 41, scope: !6284)
!6312 = !DILocation(line: 1630, column: 20, scope: !6284)
!6313 = !DILocation(line: 1630, column: 13, scope: !6284)
!6314 = !DILocation(line: 1632, column: 33, scope: !6284)
!6315 = !DILocation(line: 1632, column: 40, scope: !6284)
!6316 = !DILocation(line: 1632, column: 46, scope: !6284)
!6317 = !DILocation(line: 1632, column: 53, scope: !6284)
!6318 = !DILocation(line: 1632, column: 65, scope: !6288)
!6319 = !DILocation(line: 1632, column: 72, scope: !6288)
!6320 = !DILocation(line: 1632, column: 46, scope: !6288)
!6321 = !DILocation(line: 1632, column: 46, scope: !6322)
!6322 = !DILexicalBlockFile(scope: !6284, file: !69, discriminator: 2)
!6323 = !DILocation(line: 1632, column: 46, scope: !6324)
!6324 = !DILexicalBlockFile(scope: !6284, file: !69, discriminator: 3)
!6325 = !DILocation(line: 1632, column: 13, scope: !6324)
!6326 = !DILocation(line: 1633, column: 24, scope: !6327)
!6327 = distinct !DILexicalBlock(scope: !6284, file: !69, line: 1633, column: 17)
!6328 = !DILocation(line: 1633, column: 31, scope: !6327)
!6329 = !DILocation(line: 1633, column: 37, scope: !6327)
!6330 = !DILocation(line: 1633, column: 43, scope: !6327)
!6331 = !DILocation(line: 1633, column: 17, scope: !6327)
!6332 = !DILocation(line: 1633, column: 17, scope: !6284)
!6333 = !DILocation(line: 1634, column: 39, scope: !6327)
!6334 = !DILocation(line: 1634, column: 45, scope: !6327)
!6335 = !DILocation(line: 1634, column: 17, scope: !6327)
!6336 = !DILocation(line: 1636, column: 13, scope: !6284)
!6337 = !DILocation(line: 1624, column: 9, scope: !6338)
!6338 = !DILexicalBlockFile(scope: !6268, file: !69, discriminator: 2)
!6339 = distinct !{!6339, !6274}
!6340 = !DILocation(line: 1638, column: 5, scope: !6268)
!6341 = !DILocation(line: 1620, column: 33, scope: !6342)
!6342 = !DILexicalBlockFile(scope: !6263, file: !69, discriminator: 2)
!6343 = !DILocation(line: 1620, column: 5, scope: !6342)
!6344 = distinct !{!6344, !6345}
!6345 = !DILocation(line: 1620, column: 5, scope: !6246)
!6346 = !DILocation(line: 1639, column: 13, scope: !6246)
!6347 = !DILocation(line: 1639, column: 5, scope: !6246)
!6348 = !DILocation(line: 1640, column: 1, scope: !6246)
!6349 = distinct !DISubprogram(name: "show_encoders", scope: !69, file: !69, line: 1648, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1649, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6350 = !DILocalVariable(name: "optctx", arg: 1, scope: !6349, file: !69, line: 1648, type: !960)
!6351 = !DILocation(line: 1648, column: 25, scope: !6349)
!6352 = !DILocalVariable(name: "opt", arg: 2, scope: !6349, file: !69, line: 1648, type: !953)
!6353 = !DILocation(line: 1648, column: 45, scope: !6349)
!6354 = !DILocalVariable(name: "arg", arg: 3, scope: !6349, file: !69, line: 1648, type: !953)
!6355 = !DILocation(line: 1648, column: 62, scope: !6349)
!6356 = !DILocation(line: 1650, column: 5, scope: !6349)
!6357 = !DILocation(line: 1651, column: 5, scope: !6349)
!6358 = distinct !DISubprogram(name: "show_bsfs", scope: !69, file: !69, line: 1654, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1655, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6359 = !DILocalVariable(name: "optctx", arg: 1, scope: !6358, file: !69, line: 1654, type: !960)
!6360 = !DILocation(line: 1654, column: 21, scope: !6358)
!6361 = !DILocalVariable(name: "opt", arg: 2, scope: !6358, file: !69, line: 1654, type: !953)
!6362 = !DILocation(line: 1654, column: 41, scope: !6358)
!6363 = !DILocalVariable(name: "arg", arg: 3, scope: !6358, file: !69, line: 1654, type: !953)
!6364 = !DILocation(line: 1654, column: 58, scope: !6358)
!6365 = !DILocalVariable(name: "bsf", scope: !6358, file: !69, line: 1656, type: !6366)
!6366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6367, size: 64, align: 64)
!6367 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6368)
!6368 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBitStreamFilter", file: !75, line: 5830, baseType: !6369)
!6369 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVBitStreamFilter", file: !75, line: 5796, size: 512, align: 64, elements: !6370)
!6370 = !{!6371, !6372, !6375, !6376, !6377, !6398, !6402, !6406}
!6371 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !6369, file: !75, line: 5797, baseType: !953, size: 64, align: 64)
!6372 = !DIDerivedType(tag: DW_TAG_member, name: "codec_ids", scope: !6369, file: !75, line: 5804, baseType: !6373, size: 64, align: 64, offset: 64)
!6373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6374, size: 64, align: 64)
!6374 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !74)
!6375 = !DIDerivedType(tag: DW_TAG_member, name: "priv_class", scope: !6369, file: !75, line: 5815, baseType: !947, size: 64, align: 64, offset: 128)
!6376 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data_size", scope: !6369, file: !75, line: 5825, baseType: !969, size: 32, align: 32, offset: 192)
!6377 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !6369, file: !75, line: 5826, baseType: !6378, size: 64, align: 64, offset: 256)
!6378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6379, size: 64, align: 64)
!6379 = !DISubroutineType(types: !6380)
!6380 = !{!969, !6381}
!6381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6382, size: 64, align: 64)
!6382 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBSFContext", file: !75, line: 5794, baseType: !6383)
!6383 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVBSFContext", file: !75, line: 5747, size: 512, align: 64, elements: !6384)
!6384 = !{!6385, !6386, !6389, !6393, !6394, !6395, !6396, !6397}
!6385 = !DIDerivedType(tag: DW_TAG_member, name: "av_class", scope: !6383, file: !75, line: 5751, baseType: !947, size: 64, align: 64)
!6386 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !6383, file: !75, line: 5756, baseType: !6387, size: 64, align: 64, offset: 64)
!6387 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6388, size: 64, align: 64)
!6388 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6369)
!6389 = !DIDerivedType(tag: DW_TAG_member, name: "internal", scope: !6383, file: !75, line: 5762, baseType: !6390, size: 64, align: 64, offset: 128)
!6390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6391, size: 64, align: 64)
!6391 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVBSFInternal", file: !75, line: 5735, baseType: !6392)
!6392 = !DICompositeType(tag: DW_TAG_structure_type, name: "AVBSFInternal", file: !75, line: 5735, flags: DIFlagFwdDecl)
!6393 = !DIDerivedType(tag: DW_TAG_member, name: "priv_data", scope: !6383, file: !75, line: 5768, baseType: !960, size: 64, align: 64, offset: 192)
!6394 = !DIDerivedType(tag: DW_TAG_member, name: "par_in", scope: !6383, file: !75, line: 5775, baseType: !5422, size: 64, align: 64, offset: 256)
!6395 = !DIDerivedType(tag: DW_TAG_member, name: "par_out", scope: !6383, file: !75, line: 5781, baseType: !5422, size: 64, align: 64, offset: 320)
!6396 = !DIDerivedType(tag: DW_TAG_member, name: "time_base_in", scope: !6383, file: !75, line: 5787, baseType: !982, size: 64, align: 32, offset: 384)
!6397 = !DIDerivedType(tag: DW_TAG_member, name: "time_base_out", scope: !6383, file: !75, line: 5793, baseType: !982, size: 64, align: 32, offset: 448)
!6398 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !6369, file: !75, line: 5827, baseType: !6399, size: 64, align: 64, offset: 320)
!6399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6400, size: 64, align: 64)
!6400 = !DISubroutineType(types: !6401)
!6401 = !{!969, !6381, !4814}
!6402 = !DIDerivedType(tag: DW_TAG_member, name: "close", scope: !6369, file: !75, line: 5828, baseType: !6403, size: 64, align: 64, offset: 384)
!6403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6404, size: 64, align: 64)
!6404 = !DISubroutineType(types: !6405)
!6405 = !{null, !6381}
!6406 = !DIDerivedType(tag: DW_TAG_member, name: "flush", scope: !6369, file: !75, line: 5829, baseType: !6403, size: 64, align: 64, offset: 448)
!6407 = !DILocation(line: 1656, column: 30, scope: !6358)
!6408 = !DILocalVariable(name: "opaque", scope: !6358, file: !69, line: 1657, type: !960)
!6409 = !DILocation(line: 1657, column: 11, scope: !6358)
!6410 = !DILocation(line: 1659, column: 5, scope: !6358)
!6411 = !DILocation(line: 1660, column: 5, scope: !6358)
!6412 = !DILocation(line: 1660, column: 19, scope: !6413)
!6413 = !DILexicalBlockFile(scope: !6358, file: !69, discriminator: 1)
!6414 = !DILocation(line: 1660, column: 17, scope: !6413)
!6415 = !DILocation(line: 1660, column: 5, scope: !6413)
!6416 = !DILocation(line: 1661, column: 24, scope: !6358)
!6417 = !DILocation(line: 1661, column: 29, scope: !6358)
!6418 = !DILocation(line: 1661, column: 9, scope: !6358)
!6419 = !DILocation(line: 1660, column: 5, scope: !6420)
!6420 = !DILexicalBlockFile(scope: !6358, file: !69, discriminator: 2)
!6421 = distinct !{!6421, !6411}
!6422 = !DILocation(line: 1662, column: 5, scope: !6358)
!6423 = !DILocation(line: 1663, column: 5, scope: !6358)
!6424 = distinct !DISubprogram(name: "show_protocols", scope: !69, file: !69, line: 1666, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1667, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6425 = !DILocalVariable(name: "optctx", arg: 1, scope: !6424, file: !69, line: 1666, type: !960)
!6426 = !DILocation(line: 1666, column: 26, scope: !6424)
!6427 = !DILocalVariable(name: "opt", arg: 2, scope: !6424, file: !69, line: 1666, type: !953)
!6428 = !DILocation(line: 1666, column: 46, scope: !6424)
!6429 = !DILocalVariable(name: "arg", arg: 3, scope: !6424, file: !69, line: 1666, type: !953)
!6430 = !DILocation(line: 1666, column: 63, scope: !6424)
!6431 = !DILocalVariable(name: "opaque", scope: !6424, file: !69, line: 1668, type: !960)
!6432 = !DILocation(line: 1668, column: 11, scope: !6424)
!6433 = !DILocalVariable(name: "name", scope: !6424, file: !69, line: 1669, type: !953)
!6434 = !DILocation(line: 1669, column: 17, scope: !6424)
!6435 = !DILocation(line: 1671, column: 5, scope: !6424)
!6436 = !DILocation(line: 1673, column: 5, scope: !6424)
!6437 = !DILocation(line: 1673, column: 20, scope: !6438)
!6438 = !DILexicalBlockFile(scope: !6424, file: !69, discriminator: 1)
!6439 = !DILocation(line: 1673, column: 18, scope: !6438)
!6440 = !DILocation(line: 1673, column: 5, scope: !6438)
!6441 = !DILocation(line: 1674, column: 26, scope: !6424)
!6442 = !DILocation(line: 1674, column: 9, scope: !6424)
!6443 = !DILocation(line: 1673, column: 5, scope: !6444)
!6444 = !DILexicalBlockFile(scope: !6424, file: !69, discriminator: 2)
!6445 = distinct !{!6445, !6436}
!6446 = !DILocation(line: 1675, column: 5, scope: !6424)
!6447 = !DILocation(line: 1676, column: 5, scope: !6424)
!6448 = !DILocation(line: 1676, column: 20, scope: !6438)
!6449 = !DILocation(line: 1676, column: 18, scope: !6438)
!6450 = !DILocation(line: 1676, column: 5, scope: !6438)
!6451 = !DILocation(line: 1677, column: 26, scope: !6424)
!6452 = !DILocation(line: 1677, column: 9, scope: !6424)
!6453 = !DILocation(line: 1676, column: 5, scope: !6444)
!6454 = distinct !{!6454, !6447}
!6455 = !DILocation(line: 1678, column: 5, scope: !6424)
!6456 = distinct !DISubprogram(name: "show_filters", scope: !69, file: !69, line: 1681, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1682, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6457 = !DILocalVariable(name: "optctx", arg: 1, scope: !6456, file: !69, line: 1681, type: !960)
!6458 = !DILocation(line: 1681, column: 24, scope: !6456)
!6459 = !DILocalVariable(name: "opt", arg: 2, scope: !6456, file: !69, line: 1681, type: !953)
!6460 = !DILocation(line: 1681, column: 44, scope: !6456)
!6461 = !DILocalVariable(name: "arg", arg: 3, scope: !6456, file: !69, line: 1681, type: !953)
!6462 = !DILocation(line: 1681, column: 61, scope: !6456)
!6463 = !DILocalVariable(name: "filter", scope: !6456, file: !69, line: 1684, type: !1034)
!6464 = !DILocation(line: 1684, column: 21, scope: !6456)
!6465 = !DILocalVariable(name: "descr", scope: !6456, file: !69, line: 1685, type: !1672)
!6466 = !DILocation(line: 1685, column: 10, scope: !6456)
!6467 = !DILocalVariable(name: "descr_cur", scope: !6456, file: !69, line: 1685, type: !1076)
!6468 = !DILocation(line: 1685, column: 22, scope: !6456)
!6469 = !DILocalVariable(name: "opaque", scope: !6456, file: !69, line: 1686, type: !960)
!6470 = !DILocation(line: 1686, column: 11, scope: !6456)
!6471 = !DILocalVariable(name: "i", scope: !6456, file: !69, line: 1687, type: !969)
!6472 = !DILocation(line: 1687, column: 9, scope: !6456)
!6473 = !DILocalVariable(name: "j", scope: !6456, file: !69, line: 1687, type: !969)
!6474 = !DILocation(line: 1687, column: 12, scope: !6456)
!6475 = !DILocalVariable(name: "pad", scope: !6456, file: !69, line: 1688, type: !1042)
!6476 = !DILocation(line: 1688, column: 24, scope: !6456)
!6477 = !DILocation(line: 1690, column: 5, scope: !6456)
!6478 = !DILocation(line: 1698, column: 5, scope: !6456)
!6479 = !DILocation(line: 1698, column: 22, scope: !6480)
!6480 = !DILexicalBlockFile(scope: !6456, file: !69, discriminator: 1)
!6481 = !DILocation(line: 1698, column: 20, scope: !6480)
!6482 = !DILocation(line: 1698, column: 5, scope: !6480)
!6483 = !DILocation(line: 1699, column: 21, scope: !6484)
!6484 = distinct !DILexicalBlock(scope: !6456, file: !69, line: 1698, column: 51)
!6485 = !DILocation(line: 1699, column: 19, scope: !6484)
!6486 = !DILocation(line: 1700, column: 16, scope: !6487)
!6487 = distinct !DILexicalBlock(scope: !6484, file: !69, line: 1700, column: 9)
!6488 = !DILocation(line: 1700, column: 14, scope: !6487)
!6489 = !DILocation(line: 1700, column: 21, scope: !6490)
!6490 = !DILexicalBlockFile(scope: !6491, file: !69, discriminator: 1)
!6491 = distinct !DILexicalBlock(scope: !6487, file: !69, line: 1700, column: 9)
!6492 = !DILocation(line: 1700, column: 23, scope: !6490)
!6493 = !DILocation(line: 1700, column: 9, scope: !6490)
!6494 = !DILocation(line: 1701, column: 17, scope: !6495)
!6495 = distinct !DILexicalBlock(scope: !6496, file: !69, line: 1701, column: 17)
!6496 = distinct !DILexicalBlock(scope: !6491, file: !69, line: 1700, column: 33)
!6497 = !DILocation(line: 1701, column: 17, scope: !6496)
!6498 = !DILocation(line: 1702, column: 28, scope: !6499)
!6499 = distinct !DILexicalBlock(scope: !6495, file: !69, line: 1701, column: 20)
!6500 = !DILocation(line: 1702, column: 32, scope: !6499)
!6501 = !DILocation(line: 1703, column: 28, scope: !6499)
!6502 = !DILocation(line: 1703, column: 32, scope: !6499)
!6503 = !DILocation(line: 1704, column: 13, scope: !6499)
!6504 = !DILocation(line: 1705, column: 19, scope: !6496)
!6505 = !DILocation(line: 1705, column: 23, scope: !6506)
!6506 = !DILexicalBlockFile(scope: !6496, file: !69, discriminator: 1)
!6507 = !DILocation(line: 1705, column: 31, scope: !6506)
!6508 = !DILocation(line: 1705, column: 19, scope: !6506)
!6509 = !DILocation(line: 1705, column: 41, scope: !6510)
!6510 = !DILexicalBlockFile(scope: !6496, file: !69, discriminator: 2)
!6511 = !DILocation(line: 1705, column: 49, scope: !6510)
!6512 = !DILocation(line: 1705, column: 19, scope: !6510)
!6513 = !DILocation(line: 1705, column: 19, scope: !6514)
!6514 = !DILexicalBlockFile(scope: !6496, file: !69, discriminator: 3)
!6515 = !DILocation(line: 1705, column: 17, scope: !6514)
!6516 = !DILocation(line: 1706, column: 20, scope: !6517)
!6517 = distinct !DILexicalBlock(scope: !6496, file: !69, line: 1706, column: 13)
!6518 = !DILocation(line: 1706, column: 18, scope: !6517)
!6519 = !DILocation(line: 1706, column: 25, scope: !6520)
!6520 = !DILexicalBlockFile(scope: !6521, file: !69, discriminator: 1)
!6521 = distinct !DILexicalBlock(scope: !6517, file: !69, line: 1706, column: 13)
!6522 = !DILocation(line: 1706, column: 29, scope: !6520)
!6523 = !DILocation(line: 1706, column: 54, scope: !6524)
!6524 = !DILexicalBlockFile(scope: !6521, file: !69, discriminator: 2)
!6525 = !DILocation(line: 1706, column: 59, scope: !6524)
!6526 = !DILocation(line: 1706, column: 32, scope: !6524)
!6527 = !DILocation(line: 1706, column: 29, scope: !6524)
!6528 = !DILocation(line: 1706, column: 13, scope: !6529)
!6529 = !DILexicalBlockFile(scope: !6517, file: !69, discriminator: 3)
!6530 = !DILocation(line: 1707, column: 21, scope: !6531)
!6531 = distinct !DILexicalBlock(scope: !6532, file: !69, line: 1707, column: 21)
!6532 = distinct !DILexicalBlock(scope: !6521, file: !69, line: 1706, column: 68)
!6533 = !DILocation(line: 1707, column: 34, scope: !6531)
!6534 = !DILocation(line: 1707, column: 40, scope: !6531)
!6535 = !DILocation(line: 1707, column: 56, scope: !6531)
!6536 = !DILocation(line: 1707, column: 31, scope: !6531)
!6537 = !DILocation(line: 1707, column: 21, scope: !6532)
!6538 = !DILocation(line: 1708, column: 21, scope: !6531)
!6539 = !DILocation(line: 1709, column: 76, scope: !6532)
!6540 = !DILocation(line: 1709, column: 81, scope: !6532)
!6541 = !DILocation(line: 1709, column: 54, scope: !6532)
!6542 = !DILocation(line: 1709, column: 34, scope: !6543)
!6543 = !DILexicalBlockFile(scope: !6532, file: !69, discriminator: 1)
!6544 = !DILocation(line: 1709, column: 28, scope: !6532)
!6545 = !DILocation(line: 1709, column: 32, scope: !6532)
!6546 = !DILocation(line: 1710, column: 13, scope: !6532)
!6547 = !DILocation(line: 1706, column: 64, scope: !6548)
!6548 = !DILexicalBlockFile(scope: !6521, file: !69, discriminator: 4)
!6549 = !DILocation(line: 1706, column: 13, scope: !6548)
!6550 = distinct !{!6550, !6551}
!6551 = !DILocation(line: 1706, column: 13, scope: !6496)
!6552 = !DILocation(line: 1711, column: 18, scope: !6553)
!6553 = distinct !DILexicalBlock(scope: !6496, file: !69, line: 1711, column: 17)
!6554 = !DILocation(line: 1711, column: 17, scope: !6496)
!6555 = !DILocation(line: 1712, column: 37, scope: !6553)
!6556 = !DILocation(line: 1712, column: 39, scope: !6553)
!6557 = !DILocation(line: 1712, column: 43, scope: !6558)
!6558 = !DILexicalBlockFile(scope: !6553, file: !69, discriminator: 1)
!6559 = !DILocation(line: 1712, column: 51, scope: !6558)
!6560 = !DILocation(line: 1712, column: 57, scope: !6558)
!6561 = !DILocation(line: 1712, column: 70, scope: !6558)
!6562 = !DILocation(line: 1713, column: 37, scope: !6553)
!6563 = !DILocation(line: 1713, column: 39, scope: !6553)
!6564 = !DILocation(line: 1713, column: 43, scope: !6558)
!6565 = !DILocation(line: 1713, column: 51, scope: !6558)
!6566 = !DILocation(line: 1713, column: 57, scope: !6558)
!6567 = !DILocation(line: 1713, column: 39, scope: !6558)
!6568 = !DILocation(line: 1712, column: 70, scope: !6569)
!6569 = !DILexicalBlockFile(scope: !6553, file: !69, discriminator: 2)
!6570 = !DILocation(line: 1712, column: 34, scope: !6571)
!6571 = !DILexicalBlockFile(scope: !6553, file: !69, discriminator: 3)
!6572 = !DILocation(line: 1712, column: 28, scope: !6571)
!6573 = !DILocation(line: 1712, column: 32, scope: !6571)
!6574 = !DILocation(line: 1712, column: 17, scope: !6571)
!6575 = !DILocation(line: 1714, column: 9, scope: !6496)
!6576 = !DILocation(line: 1700, column: 29, scope: !6577)
!6577 = !DILexicalBlockFile(scope: !6491, file: !69, discriminator: 2)
!6578 = !DILocation(line: 1700, column: 9, scope: !6577)
!6579 = distinct !{!6579, !6580}
!6580 = !DILocation(line: 1700, column: 9, scope: !6484)
!6581 = !DILocation(line: 1715, column: 10, scope: !6484)
!6582 = !DILocation(line: 1715, column: 20, scope: !6484)
!6583 = !DILocation(line: 1717, column: 16, scope: !6484)
!6584 = !DILocation(line: 1717, column: 24, scope: !6484)
!6585 = !DILocation(line: 1717, column: 30, scope: !6484)
!6586 = !DILocation(line: 1718, column: 16, scope: !6484)
!6587 = !DILocation(line: 1718, column: 24, scope: !6484)
!6588 = !DILocation(line: 1718, column: 30, scope: !6484)
!6589 = !DILocation(line: 1719, column: 16, scope: !6484)
!6590 = !DILocation(line: 1719, column: 24, scope: !6484)
!6591 = !DILocation(line: 1720, column: 16, scope: !6484)
!6592 = !DILocation(line: 1720, column: 24, scope: !6484)
!6593 = !DILocation(line: 1720, column: 30, scope: !6484)
!6594 = !DILocation(line: 1720, column: 37, scope: !6484)
!6595 = !DILocation(line: 1720, column: 45, scope: !6484)
!6596 = !DILocation(line: 1716, column: 9, scope: !6484)
!6597 = !DILocation(line: 1698, column: 5, scope: !6598)
!6598 = !DILexicalBlockFile(scope: !6456, file: !69, discriminator: 2)
!6599 = distinct !{!6599, !6478}
!6600 = !DILocation(line: 1725, column: 5, scope: !6456)
!6601 = distinct !DISubprogram(name: "show_colors", scope: !69, file: !69, line: 1728, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1729, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6602 = !DILocalVariable(name: "optctx", arg: 1, scope: !6601, file: !69, line: 1728, type: !960)
!6603 = !DILocation(line: 1728, column: 23, scope: !6601)
!6604 = !DILocalVariable(name: "opt", arg: 2, scope: !6601, file: !69, line: 1728, type: !953)
!6605 = !DILocation(line: 1728, column: 43, scope: !6601)
!6606 = !DILocalVariable(name: "arg", arg: 3, scope: !6601, file: !69, line: 1728, type: !953)
!6607 = !DILocation(line: 1728, column: 60, scope: !6601)
!6608 = !DILocalVariable(name: "name", scope: !6601, file: !69, line: 1730, type: !953)
!6609 = !DILocation(line: 1730, column: 17, scope: !6601)
!6610 = !DILocalVariable(name: "rgb", scope: !6601, file: !69, line: 1731, type: !4943)
!6611 = !DILocation(line: 1731, column: 20, scope: !6601)
!6612 = !DILocalVariable(name: "i", scope: !6601, file: !69, line: 1732, type: !969)
!6613 = !DILocation(line: 1732, column: 9, scope: !6601)
!6614 = !DILocation(line: 1734, column: 5, scope: !6601)
!6615 = !DILocation(line: 1736, column: 12, scope: !6616)
!6616 = distinct !DILexicalBlock(scope: !6601, file: !69, line: 1736, column: 5)
!6617 = !DILocation(line: 1736, column: 10, scope: !6616)
!6618 = !DILocation(line: 1736, column: 48, scope: !6619)
!6619 = !DILexicalBlockFile(scope: !6620, file: !69, discriminator: 1)
!6620 = distinct !DILexicalBlock(scope: !6616, file: !69, line: 1736, column: 5)
!6621 = !DILocation(line: 1736, column: 24, scope: !6619)
!6622 = !DILocation(line: 1736, column: 22, scope: !6619)
!6623 = !DILocation(line: 1736, column: 5, scope: !6619)
!6624 = !DILocation(line: 1737, column: 41, scope: !6620)
!6625 = !DILocation(line: 1737, column: 47, scope: !6620)
!6626 = !DILocation(line: 1737, column: 55, scope: !6620)
!6627 = !DILocation(line: 1737, column: 63, scope: !6620)
!6628 = !DILocation(line: 1737, column: 9, scope: !6620)
!6629 = !DILocation(line: 1736, column: 59, scope: !6630)
!6630 = !DILexicalBlockFile(scope: !6620, file: !69, discriminator: 2)
!6631 = !DILocation(line: 1736, column: 5, scope: !6630)
!6632 = distinct !{!6632, !6633}
!6633 = !DILocation(line: 1736, column: 5, scope: !6601)
!6634 = !DILocation(line: 1739, column: 5, scope: !6601)
!6635 = distinct !DISubprogram(name: "show_pix_fmts", scope: !69, file: !69, line: 1742, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1743, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6636 = !DILocalVariable(name: "optctx", arg: 1, scope: !6635, file: !69, line: 1742, type: !960)
!6637 = !DILocation(line: 1742, column: 25, scope: !6635)
!6638 = !DILocalVariable(name: "opt", arg: 2, scope: !6635, file: !69, line: 1742, type: !953)
!6639 = !DILocation(line: 1742, column: 45, scope: !6635)
!6640 = !DILocalVariable(name: "arg", arg: 3, scope: !6635, file: !69, line: 1742, type: !953)
!6641 = !DILocation(line: 1742, column: 62, scope: !6635)
!6642 = !DILocalVariable(name: "pix_desc", scope: !6635, file: !69, line: 1744, type: !6643)
!6643 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6644, size: 64, align: 64)
!6644 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6645)
!6645 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVPixFmtDescriptor", file: !6646, line: 123, baseType: !6647)
!6646 = !DIFile(filename: "./libavutil/pixdesc.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!6647 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVPixFmtDescriptor", file: !6646, line: 81, size: 1280, align: 64, elements: !6648)
!6648 = !{!6649, !6650, !6651, !6652, !6653, !6654, !6667}
!6649 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !6647, file: !6646, line: 82, baseType: !953, size: 64, align: 64)
!6650 = !DIDerivedType(tag: DW_TAG_member, name: "nb_components", scope: !6647, file: !6646, line: 83, baseType: !1151, size: 8, align: 8, offset: 64)
!6651 = !DIDerivedType(tag: DW_TAG_member, name: "log2_chroma_w", scope: !6647, file: !6646, line: 92, baseType: !1151, size: 8, align: 8, offset: 72)
!6652 = !DIDerivedType(tag: DW_TAG_member, name: "log2_chroma_h", scope: !6647, file: !6646, line: 101, baseType: !1151, size: 8, align: 8, offset: 80)
!6653 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !6647, file: !6646, line: 106, baseType: !1165, size: 64, align: 64, offset: 128)
!6654 = !DIDerivedType(tag: DW_TAG_member, name: "comp", scope: !6647, file: !6646, line: 117, baseType: !6655, size: 1024, align: 32, offset: 192)
!6655 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6656, size: 1024, align: 32, elements: !5088)
!6656 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVComponentDescriptor", file: !6646, line: 70, baseType: !6657)
!6657 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVComponentDescriptor", file: !6646, line: 31, size: 256, align: 32, elements: !6658)
!6658 = !{!6659, !6660, !6661, !6662, !6663, !6664, !6665, !6666}
!6659 = !DIDerivedType(tag: DW_TAG_member, name: "plane", scope: !6657, file: !6646, line: 35, baseType: !969, size: 32, align: 32)
!6660 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !6657, file: !6646, line: 41, baseType: !969, size: 32, align: 32, offset: 32)
!6661 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !6657, file: !6646, line: 47, baseType: !969, size: 32, align: 32, offset: 64)
!6662 = !DIDerivedType(tag: DW_TAG_member, name: "shift", scope: !6657, file: !6646, line: 53, baseType: !969, size: 32, align: 32, offset: 96)
!6663 = !DIDerivedType(tag: DW_TAG_member, name: "depth", scope: !6657, file: !6646, line: 58, baseType: !969, size: 32, align: 32, offset: 128)
!6664 = !DIDerivedType(tag: DW_TAG_member, name: "step_minus1", scope: !6657, file: !6646, line: 62, baseType: !969, size: 32, align: 32, offset: 160)
!6665 = !DIDerivedType(tag: DW_TAG_member, name: "depth_minus1", scope: !6657, file: !6646, line: 65, baseType: !969, size: 32, align: 32, offset: 192)
!6666 = !DIDerivedType(tag: DW_TAG_member, name: "offset_plus1", scope: !6657, file: !6646, line: 68, baseType: !969, size: 32, align: 32, offset: 224)
!6667 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !6647, file: !6646, line: 122, baseType: !953, size: 64, align: 64, offset: 1216)
!6668 = !DILocation(line: 1744, column: 31, scope: !6635)
!6669 = !DILocation(line: 1746, column: 5, scope: !6635)
!6670 = !DILocation(line: 1760, column: 5, scope: !6635)
!6671 = !DILocation(line: 1760, column: 45, scope: !6672)
!6672 = !DILexicalBlockFile(scope: !6635, file: !69, discriminator: 1)
!6673 = !DILocation(line: 1760, column: 24, scope: !6672)
!6674 = !DILocation(line: 1760, column: 22, scope: !6672)
!6675 = !DILocation(line: 1760, column: 5, scope: !6672)
!6676 = !DILocalVariable(name: "pix_fmt", scope: !6677, file: !69, line: 1761, type: !544)
!6677 = distinct !DILexicalBlock(scope: !6635, file: !69, line: 1760, column: 57)
!6678 = !DILocation(line: 1761, column: 52, scope: !6677)
!6679 = !DILocation(line: 1761, column: 85, scope: !6677)
!6680 = !DILocation(line: 1761, column: 62, scope: !6677)
!6681 = !DILocation(line: 1763, column: 38, scope: !6677)
!6682 = !DILocation(line: 1763, column: 16, scope: !6677)
!6683 = !DILocation(line: 1764, column: 38, scope: !6677)
!6684 = !DILocation(line: 1764, column: 16, scope: !6677)
!6685 = !DILocation(line: 1765, column: 16, scope: !6677)
!6686 = !DILocation(line: 1765, column: 26, scope: !6677)
!6687 = !DILocation(line: 1765, column: 32, scope: !6677)
!6688 = !DILocation(line: 1766, column: 16, scope: !6677)
!6689 = !DILocation(line: 1766, column: 26, scope: !6677)
!6690 = !DILocation(line: 1766, column: 32, scope: !6677)
!6691 = !DILocation(line: 1767, column: 16, scope: !6677)
!6692 = !DILocation(line: 1767, column: 26, scope: !6677)
!6693 = !DILocation(line: 1767, column: 32, scope: !6677)
!6694 = !DILocation(line: 1768, column: 16, scope: !6677)
!6695 = !DILocation(line: 1768, column: 26, scope: !6677)
!6696 = !DILocation(line: 1769, column: 16, scope: !6677)
!6697 = !DILocation(line: 1769, column: 26, scope: !6677)
!6698 = !DILocation(line: 1770, column: 38, scope: !6677)
!6699 = !DILocation(line: 1770, column: 16, scope: !6677)
!6700 = !DILocation(line: 1762, column: 9, scope: !6677)
!6701 = !DILocation(line: 1760, column: 5, scope: !6702)
!6702 = !DILexicalBlockFile(scope: !6635, file: !69, discriminator: 2)
!6703 = distinct !{!6703, !6670}
!6704 = !DILocation(line: 1772, column: 5, scope: !6635)
!6705 = distinct !DISubprogram(name: "show_layouts", scope: !69, file: !69, line: 1775, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1776, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6706 = !DILocalVariable(name: "optctx", arg: 1, scope: !6705, file: !69, line: 1775, type: !960)
!6707 = !DILocation(line: 1775, column: 24, scope: !6705)
!6708 = !DILocalVariable(name: "opt", arg: 2, scope: !6705, file: !69, line: 1775, type: !953)
!6709 = !DILocation(line: 1775, column: 44, scope: !6705)
!6710 = !DILocalVariable(name: "arg", arg: 3, scope: !6705, file: !69, line: 1775, type: !953)
!6711 = !DILocation(line: 1775, column: 61, scope: !6705)
!6712 = !DILocalVariable(name: "i", scope: !6705, file: !69, line: 1777, type: !969)
!6713 = !DILocation(line: 1777, column: 9, scope: !6705)
!6714 = !DILocalVariable(name: "layout", scope: !6705, file: !69, line: 1778, type: !1165)
!6715 = !DILocation(line: 1778, column: 14, scope: !6705)
!6716 = !DILocalVariable(name: "j", scope: !6705, file: !69, line: 1778, type: !1165)
!6717 = !DILocation(line: 1778, column: 22, scope: !6705)
!6718 = !DILocalVariable(name: "name", scope: !6705, file: !69, line: 1779, type: !953)
!6719 = !DILocation(line: 1779, column: 17, scope: !6705)
!6720 = !DILocalVariable(name: "descr", scope: !6705, file: !69, line: 1779, type: !953)
!6721 = !DILocation(line: 1779, column: 24, scope: !6705)
!6722 = !DILocation(line: 1781, column: 5, scope: !6705)
!6723 = !DILocation(line: 1783, column: 12, scope: !6724)
!6724 = distinct !DILexicalBlock(scope: !6705, file: !69, line: 1783, column: 5)
!6725 = !DILocation(line: 1783, column: 10, scope: !6724)
!6726 = !DILocation(line: 1783, column: 17, scope: !6727)
!6727 = !DILexicalBlockFile(scope: !6728, file: !69, discriminator: 1)
!6728 = distinct !DILexicalBlock(scope: !6724, file: !69, line: 1783, column: 5)
!6729 = !DILocation(line: 1783, column: 19, scope: !6727)
!6730 = !DILocation(line: 1783, column: 5, scope: !6727)
!6731 = !DILocation(line: 1784, column: 51, scope: !6732)
!6732 = distinct !DILexicalBlock(scope: !6728, file: !69, line: 1783, column: 30)
!6733 = !DILocation(line: 1784, column: 48, scope: !6732)
!6734 = !DILocation(line: 1784, column: 16, scope: !6732)
!6735 = !DILocation(line: 1784, column: 14, scope: !6732)
!6736 = !DILocation(line: 1785, column: 14, scope: !6737)
!6737 = distinct !DILexicalBlock(scope: !6732, file: !69, line: 1785, column: 13)
!6738 = !DILocation(line: 1785, column: 13, scope: !6732)
!6739 = !DILocation(line: 1786, column: 13, scope: !6737)
!6740 = !DILocation(line: 1787, column: 59, scope: !6732)
!6741 = !DILocation(line: 1787, column: 56, scope: !6732)
!6742 = !DILocation(line: 1787, column: 17, scope: !6732)
!6743 = !DILocation(line: 1787, column: 15, scope: !6732)
!6744 = !DILocation(line: 1788, column: 30, scope: !6732)
!6745 = !DILocation(line: 1788, column: 36, scope: !6732)
!6746 = !DILocation(line: 1788, column: 9, scope: !6732)
!6747 = !DILocation(line: 1789, column: 5, scope: !6732)
!6748 = !DILocation(line: 1783, column: 26, scope: !6749)
!6749 = !DILexicalBlockFile(scope: !6728, file: !69, discriminator: 2)
!6750 = !DILocation(line: 1783, column: 5, scope: !6749)
!6751 = distinct !{!6751, !6752}
!6752 = !DILocation(line: 1783, column: 5, scope: !6705)
!6753 = !DILocation(line: 1790, column: 5, scope: !6705)
!6754 = !DILocation(line: 1792, column: 12, scope: !6755)
!6755 = distinct !DILexicalBlock(scope: !6705, file: !69, line: 1792, column: 5)
!6756 = !DILocation(line: 1792, column: 10, scope: !6755)
!6757 = !DILocation(line: 1792, column: 49, scope: !6758)
!6758 = !DILexicalBlockFile(scope: !6759, file: !69, discriminator: 1)
!6759 = distinct !DILexicalBlock(scope: !6755, file: !69, line: 1792, column: 5)
!6760 = !DILocation(line: 1792, column: 18, scope: !6758)
!6761 = !DILocation(line: 1792, column: 17, scope: !6758)
!6762 = !DILocation(line: 1792, column: 5, scope: !6758)
!6763 = !DILocation(line: 1793, column: 13, scope: !6764)
!6764 = distinct !DILexicalBlock(scope: !6765, file: !69, line: 1793, column: 13)
!6765 = distinct !DILexicalBlock(scope: !6759, file: !69, line: 1792, column: 74)
!6766 = !DILocation(line: 1793, column: 13, scope: !6765)
!6767 = !DILocation(line: 1794, column: 30, scope: !6768)
!6768 = distinct !DILexicalBlock(scope: !6764, file: !69, line: 1793, column: 19)
!6769 = !DILocation(line: 1794, column: 13, scope: !6768)
!6770 = !DILocation(line: 1795, column: 20, scope: !6771)
!6771 = distinct !DILexicalBlock(scope: !6768, file: !69, line: 1795, column: 13)
!6772 = !DILocation(line: 1795, column: 18, scope: !6771)
!6773 = !DILocation(line: 1795, column: 25, scope: !6774)
!6774 = !DILexicalBlockFile(scope: !6775, file: !69, discriminator: 1)
!6775 = distinct !DILexicalBlock(scope: !6771, file: !69, line: 1795, column: 13)
!6776 = !DILocation(line: 1795, column: 13, scope: !6774)
!6777 = !DILocation(line: 1796, column: 22, scope: !6778)
!6778 = distinct !DILexicalBlock(scope: !6775, file: !69, line: 1796, column: 21)
!6779 = !DILocation(line: 1796, column: 31, scope: !6778)
!6780 = !DILocation(line: 1796, column: 29, scope: !6778)
!6781 = !DILocation(line: 1796, column: 21, scope: !6775)
!6782 = !DILocation(line: 1797, column: 37, scope: !6778)
!6783 = !DILocation(line: 1797, column: 47, scope: !6778)
!6784 = !DILocation(line: 1797, column: 49, scope: !6778)
!6785 = !DILocation(line: 1797, column: 44, scope: !6778)
!6786 = !DILocation(line: 1797, column: 36, scope: !6778)
!6787 = !DILocation(line: 1797, column: 87, scope: !6778)
!6788 = !DILocation(line: 1797, column: 67, scope: !6778)
!6789 = !DILocation(line: 1797, column: 21, scope: !6790)
!6790 = !DILexicalBlockFile(scope: !6778, file: !69, discriminator: 1)
!6791 = !DILocation(line: 1797, column: 21, scope: !6778)
!6792 = !DILocation(line: 1796, column: 32, scope: !6790)
!6793 = !DILocation(line: 1795, column: 30, scope: !6794)
!6794 = !DILexicalBlockFile(scope: !6775, file: !69, discriminator: 2)
!6795 = !DILocation(line: 1795, column: 13, scope: !6794)
!6796 = distinct !{!6796, !6797}
!6797 = !DILocation(line: 1795, column: 13, scope: !6768)
!6798 = !DILocation(line: 1798, column: 13, scope: !6768)
!6799 = !DILocation(line: 1799, column: 9, scope: !6768)
!6800 = !DILocation(line: 1800, column: 5, scope: !6765)
!6801 = !DILocation(line: 1792, column: 70, scope: !6802)
!6802 = !DILexicalBlockFile(scope: !6759, file: !69, discriminator: 2)
!6803 = !DILocation(line: 1792, column: 5, scope: !6802)
!6804 = distinct !{!6804, !6805}
!6805 = !DILocation(line: 1792, column: 5, scope: !6705)
!6806 = !DILocation(line: 1801, column: 5, scope: !6705)
!6807 = distinct !DISubprogram(name: "show_sample_fmts", scope: !69, file: !69, line: 1804, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1805, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6808 = !DILocalVariable(name: "optctx", arg: 1, scope: !6807, file: !69, line: 1804, type: !960)
!6809 = !DILocation(line: 1804, column: 28, scope: !6807)
!6810 = !DILocalVariable(name: "opt", arg: 2, scope: !6807, file: !69, line: 1804, type: !953)
!6811 = !DILocation(line: 1804, column: 48, scope: !6807)
!6812 = !DILocalVariable(name: "arg", arg: 3, scope: !6807, file: !69, line: 1804, type: !953)
!6813 = !DILocation(line: 1804, column: 65, scope: !6807)
!6814 = !DILocalVariable(name: "i", scope: !6807, file: !69, line: 1806, type: !969)
!6815 = !DILocation(line: 1806, column: 9, scope: !6807)
!6816 = !DILocalVariable(name: "fmt_str", scope: !6807, file: !69, line: 1807, type: !3117)
!6817 = !DILocation(line: 1807, column: 10, scope: !6807)
!6818 = !DILocation(line: 1808, column: 12, scope: !6819)
!6819 = distinct !DILexicalBlock(scope: !6807, file: !69, line: 1808, column: 5)
!6820 = !DILocation(line: 1808, column: 10, scope: !6819)
!6821 = !DILocation(line: 1808, column: 18, scope: !6822)
!6822 = !DILexicalBlockFile(scope: !6823, file: !69, discriminator: 1)
!6823 = distinct !DILexicalBlock(scope: !6819, file: !69, line: 1808, column: 5)
!6824 = !DILocation(line: 1808, column: 20, scope: !6822)
!6825 = !DILocation(line: 1808, column: 5, scope: !6822)
!6826 = !DILocation(line: 1809, column: 49, scope: !6823)
!6827 = !DILocation(line: 1809, column: 75, scope: !6823)
!6828 = !DILocation(line: 1809, column: 24, scope: !6823)
!6829 = !DILocation(line: 1809, column: 9, scope: !6822)
!6830 = !DILocation(line: 1809, column: 9, scope: !6823)
!6831 = !DILocation(line: 1808, column: 41, scope: !6832)
!6832 = !DILexicalBlockFile(scope: !6823, file: !69, discriminator: 2)
!6833 = !DILocation(line: 1808, column: 5, scope: !6832)
!6834 = distinct !{!6834, !6835}
!6835 = !DILocation(line: 1808, column: 5, scope: !6807)
!6836 = !DILocation(line: 1810, column: 5, scope: !6807)
!6837 = distinct !DISubprogram(name: "show_help", scope: !69, file: !69, line: 1974, type: !1343, isLocal: false, isDefinition: true, scopeLine: 1975, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6838 = !DILocalVariable(name: "optctx", arg: 1, scope: !6837, file: !69, line: 1974, type: !960)
!6839 = !DILocation(line: 1974, column: 21, scope: !6837)
!6840 = !DILocalVariable(name: "opt", arg: 2, scope: !6837, file: !69, line: 1974, type: !953)
!6841 = !DILocation(line: 1974, column: 41, scope: !6837)
!6842 = !DILocalVariable(name: "arg", arg: 3, scope: !6837, file: !69, line: 1974, type: !953)
!6843 = !DILocation(line: 1974, column: 58, scope: !6837)
!6844 = !DILocalVariable(name: "topic", scope: !6837, file: !69, line: 1976, type: !1076)
!6845 = !DILocation(line: 1976, column: 11, scope: !6837)
!6846 = !DILocalVariable(name: "par", scope: !6837, file: !69, line: 1976, type: !1076)
!6847 = !DILocation(line: 1976, column: 19, scope: !6837)
!6848 = !DILocation(line: 1977, column: 5, scope: !6837)
!6849 = !DILocation(line: 1979, column: 23, scope: !6837)
!6850 = !DILocation(line: 1979, column: 29, scope: !6851)
!6851 = !DILexicalBlockFile(scope: !6837, file: !69, discriminator: 1)
!6852 = !DILocation(line: 1979, column: 23, scope: !6851)
!6853 = !DILocation(line: 1979, column: 23, scope: !6854)
!6854 = !DILexicalBlockFile(scope: !6837, file: !69, discriminator: 2)
!6855 = !DILocation(line: 1979, column: 23, scope: !6856)
!6856 = !DILexicalBlockFile(scope: !6837, file: !69, discriminator: 3)
!6857 = !DILocation(line: 1979, column: 13, scope: !6856)
!6858 = !DILocation(line: 1979, column: 11, scope: !6856)
!6859 = !DILocation(line: 1980, column: 10, scope: !6860)
!6860 = distinct !DILexicalBlock(scope: !6837, file: !69, line: 1980, column: 9)
!6861 = !DILocation(line: 1980, column: 9, scope: !6837)
!6862 = !DILocation(line: 1981, column: 9, scope: !6860)
!6863 = !DILocation(line: 1982, column: 18, scope: !6837)
!6864 = !DILocation(line: 1982, column: 11, scope: !6837)
!6865 = !DILocation(line: 1982, column: 9, scope: !6837)
!6866 = !DILocation(line: 1983, column: 9, scope: !6867)
!6867 = distinct !DILexicalBlock(scope: !6837, file: !69, line: 1983, column: 9)
!6868 = !DILocation(line: 1983, column: 9, scope: !6837)
!6869 = !DILocation(line: 1984, column: 13, scope: !6867)
!6870 = !DILocation(line: 1984, column: 16, scope: !6867)
!6871 = !DILocation(line: 1984, column: 9, scope: !6867)
!6872 = !DILocation(line: 1986, column: 11, scope: !6873)
!6873 = distinct !DILexicalBlock(scope: !6837, file: !69, line: 1986, column: 9)
!6874 = !DILocation(line: 1986, column: 10, scope: !6873)
!6875 = !DILocation(line: 1986, column: 9, scope: !6837)
!6876 = !DILocation(line: 1987, column: 27, scope: !6877)
!6877 = distinct !DILexicalBlock(scope: !6873, file: !69, line: 1986, column: 18)
!6878 = !DILocation(line: 1987, column: 34, scope: !6877)
!6879 = !DILocation(line: 1987, column: 9, scope: !6877)
!6880 = !DILocation(line: 1988, column: 5, scope: !6877)
!6881 = !DILocation(line: 1988, column: 24, scope: !6882)
!6882 = !DILexicalBlockFile(scope: !6883, file: !69, discriminator: 1)
!6883 = distinct !DILexicalBlock(scope: !6873, file: !69, line: 1988, column: 16)
!6884 = !DILocation(line: 1988, column: 17, scope: !6882)
!6885 = !DILocation(line: 1988, column: 16, scope: !6882)
!6886 = !DILocation(line: 1989, column: 25, scope: !6887)
!6887 = distinct !DILexicalBlock(scope: !6883, file: !69, line: 1988, column: 43)
!6888 = !DILocation(line: 1989, column: 9, scope: !6887)
!6889 = !DILocation(line: 1990, column: 5, scope: !6887)
!6890 = !DILocation(line: 1990, column: 24, scope: !6891)
!6891 = !DILexicalBlockFile(scope: !6892, file: !69, discriminator: 1)
!6892 = distinct !DILexicalBlock(scope: !6883, file: !69, line: 1990, column: 16)
!6893 = !DILocation(line: 1990, column: 17, scope: !6891)
!6894 = !DILocation(line: 1990, column: 16, scope: !6891)
!6895 = !DILocation(line: 1991, column: 25, scope: !6896)
!6896 = distinct !DILexicalBlock(scope: !6892, file: !69, line: 1990, column: 43)
!6897 = !DILocation(line: 1991, column: 9, scope: !6896)
!6898 = !DILocation(line: 1992, column: 5, scope: !6896)
!6899 = !DILocation(line: 1992, column: 24, scope: !6900)
!6900 = !DILexicalBlockFile(scope: !6901, file: !69, discriminator: 1)
!6901 = distinct !DILexicalBlock(scope: !6892, file: !69, line: 1992, column: 16)
!6902 = !DILocation(line: 1992, column: 17, scope: !6900)
!6903 = !DILocation(line: 1992, column: 16, scope: !6900)
!6904 = !DILocation(line: 1993, column: 27, scope: !6905)
!6905 = distinct !DILexicalBlock(scope: !6901, file: !69, line: 1992, column: 43)
!6906 = !DILocation(line: 1993, column: 9, scope: !6905)
!6907 = !DILocation(line: 1994, column: 5, scope: !6905)
!6908 = !DILocation(line: 1994, column: 24, scope: !6909)
!6909 = !DILexicalBlockFile(scope: !6910, file: !69, discriminator: 1)
!6910 = distinct !DILexicalBlock(scope: !6901, file: !69, line: 1994, column: 16)
!6911 = !DILocation(line: 1994, column: 17, scope: !6909)
!6912 = !DILocation(line: 1994, column: 16, scope: !6909)
!6913 = !DILocation(line: 1995, column: 25, scope: !6914)
!6914 = distinct !DILexicalBlock(scope: !6910, file: !69, line: 1994, column: 41)
!6915 = !DILocation(line: 1995, column: 9, scope: !6914)
!6916 = !DILocation(line: 1997, column: 5, scope: !6914)
!6917 = !DILocation(line: 1997, column: 24, scope: !6918)
!6918 = !DILexicalBlockFile(scope: !6919, file: !69, discriminator: 1)
!6919 = distinct !DILexicalBlock(scope: !6910, file: !69, line: 1997, column: 16)
!6920 = !DILocation(line: 1997, column: 17, scope: !6918)
!6921 = !DILocation(line: 1997, column: 16, scope: !6918)
!6922 = !DILocation(line: 1998, column: 26, scope: !6923)
!6923 = distinct !DILexicalBlock(scope: !6919, file: !69, line: 1997, column: 42)
!6924 = !DILocation(line: 1998, column: 9, scope: !6923)
!6925 = !DILocation(line: 2000, column: 5, scope: !6923)
!6926 = !DILocation(line: 2000, column: 24, scope: !6927)
!6927 = !DILexicalBlockFile(scope: !6928, file: !69, discriminator: 1)
!6928 = distinct !DILexicalBlock(scope: !6919, file: !69, line: 2000, column: 16)
!6929 = !DILocation(line: 2000, column: 17, scope: !6927)
!6930 = !DILocation(line: 2000, column: 16, scope: !6927)
!6931 = !DILocation(line: 2001, column: 23, scope: !6932)
!6932 = distinct !DILexicalBlock(scope: !6928, file: !69, line: 2000, column: 39)
!6933 = !DILocation(line: 2001, column: 9, scope: !6932)
!6934 = !DILocation(line: 2002, column: 5, scope: !6932)
!6935 = !DILocation(line: 2003, column: 27, scope: !6936)
!6936 = distinct !DILexicalBlock(scope: !6928, file: !69, line: 2002, column: 12)
!6937 = !DILocation(line: 2003, column: 34, scope: !6936)
!6938 = !DILocation(line: 2003, column: 9, scope: !6936)
!6939 = !DILocation(line: 2006, column: 14, scope: !6837)
!6940 = !DILocation(line: 2006, column: 5, scope: !6837)
!6941 = !DILocation(line: 2007, column: 5, scope: !6837)
!6942 = !DILocation(line: 2008, column: 1, scope: !6837)
!6943 = distinct !DISubprogram(name: "show_help_codec", scope: !69, file: !69, line: 1813, type: !4101, isLocal: true, isDefinition: true, scopeLine: 1814, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!6944 = !DILocalVariable(name: "name", arg: 1, scope: !6943, file: !69, line: 1813, type: !953)
!6945 = !DILocation(line: 1813, column: 41, scope: !6943)
!6946 = !DILocalVariable(name: "encoder", arg: 2, scope: !6943, file: !69, line: 1813, type: !969)
!6947 = !DILocation(line: 1813, column: 51, scope: !6943)
!6948 = !DILocalVariable(name: "desc", scope: !6943, file: !69, line: 1815, type: !5365)
!6949 = !DILocation(line: 1815, column: 30, scope: !6943)
!6950 = !DILocalVariable(name: "codec", scope: !6943, file: !69, line: 1816, type: !5980)
!6951 = !DILocation(line: 1816, column: 20, scope: !6943)
!6952 = !DILocation(line: 1818, column: 10, scope: !6953)
!6953 = distinct !DILexicalBlock(scope: !6943, file: !69, line: 1818, column: 9)
!6954 = !DILocation(line: 1818, column: 9, scope: !6943)
!6955 = !DILocation(line: 1819, column: 9, scope: !6956)
!6956 = distinct !DILexicalBlock(scope: !6953, file: !69, line: 1818, column: 16)
!6957 = !DILocation(line: 1820, column: 9, scope: !6956)
!6958 = !DILocation(line: 1823, column: 13, scope: !6943)
!6959 = !DILocation(line: 1823, column: 52, scope: !6960)
!6960 = !DILexicalBlockFile(scope: !6943, file: !69, discriminator: 1)
!6961 = !DILocation(line: 1823, column: 23, scope: !6960)
!6962 = !DILocation(line: 1823, column: 13, scope: !6960)
!6963 = !DILocation(line: 1824, column: 52, scope: !6943)
!6964 = !DILocation(line: 1824, column: 23, scope: !6943)
!6965 = !DILocation(line: 1823, column: 13, scope: !6966)
!6966 = !DILexicalBlockFile(scope: !6943, file: !69, discriminator: 2)
!6967 = !DILocation(line: 1823, column: 13, scope: !6968)
!6968 = !DILexicalBlockFile(scope: !6943, file: !69, discriminator: 3)
!6969 = !DILocation(line: 1823, column: 11, scope: !6968)
!6970 = !DILocation(line: 1826, column: 9, scope: !6971)
!6971 = distinct !DILexicalBlock(scope: !6943, file: !69, line: 1826, column: 9)
!6972 = !DILocation(line: 1826, column: 9, scope: !6943)
!6973 = !DILocation(line: 1827, column: 21, scope: !6971)
!6974 = !DILocation(line: 1827, column: 9, scope: !6971)
!6975 = !DILocation(line: 1828, column: 53, scope: !6976)
!6976 = distinct !DILexicalBlock(scope: !6971, file: !69, line: 1828, column: 14)
!6977 = !DILocation(line: 1828, column: 22, scope: !6976)
!6978 = !DILocation(line: 1828, column: 20, scope: !6976)
!6979 = !DILocation(line: 1828, column: 14, scope: !6971)
!6980 = !DILocalVariable(name: "printed", scope: !6981, file: !69, line: 1829, type: !969)
!6981 = distinct !DILexicalBlock(scope: !6976, file: !69, line: 1828, column: 61)
!6982 = !DILocation(line: 1829, column: 13, scope: !6981)
!6983 = !DILocation(line: 1831, column: 9, scope: !6981)
!6984 = !DILocation(line: 1831, column: 43, scope: !6985)
!6985 = !DILexicalBlockFile(scope: !6981, file: !69, discriminator: 1)
!6986 = !DILocation(line: 1831, column: 49, scope: !6985)
!6987 = !DILocation(line: 1831, column: 53, scope: !6985)
!6988 = !DILocation(line: 1831, column: 60, scope: !6985)
!6989 = !DILocation(line: 1831, column: 25, scope: !6985)
!6990 = !DILocation(line: 1831, column: 23, scope: !6985)
!6991 = !DILocation(line: 1831, column: 9, scope: !6985)
!6992 = !DILocation(line: 1832, column: 21, scope: !6993)
!6993 = distinct !DILexicalBlock(scope: !6981, file: !69, line: 1831, column: 71)
!6994 = !DILocation(line: 1833, column: 25, scope: !6993)
!6995 = !DILocation(line: 1833, column: 13, scope: !6993)
!6996 = !DILocation(line: 1831, column: 9, scope: !6997)
!6997 = !DILexicalBlockFile(scope: !6981, file: !69, discriminator: 2)
!6998 = distinct !{!6998, !6983}
!6999 = !DILocation(line: 1836, column: 14, scope: !7000)
!7000 = distinct !DILexicalBlock(scope: !6981, file: !69, line: 1836, column: 13)
!7001 = !DILocation(line: 1836, column: 13, scope: !6981)
!7002 = !DILocation(line: 1840, column: 20, scope: !7003)
!7003 = distinct !DILexicalBlock(scope: !7000, file: !69, line: 1836, column: 23)
!7004 = !DILocation(line: 1840, column: 26, scope: !7003)
!7005 = !DILocation(line: 1837, column: 13, scope: !7003)
!7006 = !DILocation(line: 1841, column: 9, scope: !7003)
!7007 = !DILocation(line: 1842, column: 5, scope: !6981)
!7008 = !DILocation(line: 1844, column: 16, scope: !7009)
!7009 = distinct !DILexicalBlock(scope: !6976, file: !69, line: 1842, column: 12)
!7010 = !DILocation(line: 1843, column: 9, scope: !7009)
!7011 = !DILocation(line: 1846, column: 1, scope: !6943)
!7012 = distinct !DISubprogram(name: "show_help_demuxer", scope: !69, file: !69, line: 1848, type: !2971, isLocal: true, isDefinition: true, scopeLine: 1849, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7013 = !DILocalVariable(name: "name", arg: 1, scope: !7012, file: !69, line: 1848, type: !953)
!7014 = !DILocation(line: 1848, column: 43, scope: !7012)
!7015 = !DILocalVariable(name: "fmt", scope: !7012, file: !69, line: 1850, type: !4750)
!7016 = !DILocation(line: 1850, column: 26, scope: !7012)
!7017 = !DILocation(line: 1850, column: 53, scope: !7012)
!7018 = !DILocation(line: 1850, column: 32, scope: !7012)
!7019 = !DILocation(line: 1852, column: 10, scope: !7020)
!7020 = distinct !DILexicalBlock(scope: !7012, file: !69, line: 1852, column: 9)
!7021 = !DILocation(line: 1852, column: 9, scope: !7012)
!7022 = !DILocation(line: 1853, column: 51, scope: !7023)
!7023 = distinct !DILexicalBlock(scope: !7020, file: !69, line: 1852, column: 15)
!7024 = !DILocation(line: 1853, column: 9, scope: !7023)
!7025 = !DILocation(line: 1854, column: 9, scope: !7023)
!7026 = !DILocation(line: 1857, column: 34, scope: !7012)
!7027 = !DILocation(line: 1857, column: 39, scope: !7012)
!7028 = !DILocation(line: 1857, column: 45, scope: !7012)
!7029 = !DILocation(line: 1857, column: 50, scope: !7012)
!7030 = !DILocation(line: 1857, column: 5, scope: !7012)
!7031 = !DILocation(line: 1859, column: 9, scope: !7032)
!7032 = distinct !DILexicalBlock(scope: !7012, file: !69, line: 1859, column: 9)
!7033 = !DILocation(line: 1859, column: 14, scope: !7032)
!7034 = !DILocation(line: 1859, column: 9, scope: !7012)
!7035 = !DILocation(line: 1860, column: 48, scope: !7032)
!7036 = !DILocation(line: 1860, column: 53, scope: !7032)
!7037 = !DILocation(line: 1860, column: 9, scope: !7032)
!7038 = !DILocation(line: 1862, column: 9, scope: !7039)
!7039 = distinct !DILexicalBlock(scope: !7012, file: !69, line: 1862, column: 9)
!7040 = !DILocation(line: 1862, column: 14, scope: !7039)
!7041 = !DILocation(line: 1862, column: 9, scope: !7012)
!7042 = !DILocation(line: 1863, column: 28, scope: !7039)
!7043 = !DILocation(line: 1863, column: 33, scope: !7039)
!7044 = !DILocation(line: 1863, column: 9, scope: !7039)
!7045 = !DILocation(line: 1864, column: 1, scope: !7012)
!7046 = distinct !DISubprogram(name: "show_help_muxer", scope: !69, file: !69, line: 1866, type: !2971, isLocal: true, isDefinition: true, scopeLine: 1867, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7047 = !DILocalVariable(name: "name", arg: 1, scope: !7046, file: !69, line: 1866, type: !953)
!7048 = !DILocation(line: 1866, column: 41, scope: !7046)
!7049 = !DILocalVariable(name: "desc", scope: !7046, file: !69, line: 1868, type: !5365)
!7050 = !DILocation(line: 1868, column: 30, scope: !7046)
!7051 = !DILocalVariable(name: "fmt", scope: !7046, file: !69, line: 1869, type: !5750)
!7052 = !DILocation(line: 1869, column: 27, scope: !7046)
!7053 = !DILocation(line: 1869, column: 49, scope: !7046)
!7054 = !DILocation(line: 1869, column: 33, scope: !7046)
!7055 = !DILocation(line: 1871, column: 10, scope: !7056)
!7056 = distinct !DILexicalBlock(scope: !7046, file: !69, line: 1871, column: 9)
!7057 = !DILocation(line: 1871, column: 9, scope: !7046)
!7058 = !DILocation(line: 1872, column: 51, scope: !7059)
!7059 = distinct !DILexicalBlock(scope: !7056, file: !69, line: 1871, column: 15)
!7060 = !DILocation(line: 1872, column: 9, scope: !7059)
!7061 = !DILocation(line: 1873, column: 9, scope: !7059)
!7062 = !DILocation(line: 1876, column: 32, scope: !7046)
!7063 = !DILocation(line: 1876, column: 37, scope: !7046)
!7064 = !DILocation(line: 1876, column: 43, scope: !7046)
!7065 = !DILocation(line: 1876, column: 48, scope: !7046)
!7066 = !DILocation(line: 1876, column: 5, scope: !7046)
!7067 = !DILocation(line: 1878, column: 9, scope: !7068)
!7068 = distinct !DILexicalBlock(scope: !7046, file: !69, line: 1878, column: 9)
!7069 = !DILocation(line: 1878, column: 14, scope: !7068)
!7070 = !DILocation(line: 1878, column: 9, scope: !7046)
!7071 = !DILocation(line: 1879, column: 48, scope: !7068)
!7072 = !DILocation(line: 1879, column: 53, scope: !7068)
!7073 = !DILocation(line: 1879, column: 9, scope: !7068)
!7074 = !DILocation(line: 1880, column: 9, scope: !7075)
!7075 = distinct !DILexicalBlock(scope: !7046, file: !69, line: 1880, column: 9)
!7076 = !DILocation(line: 1880, column: 14, scope: !7075)
!7077 = !DILocation(line: 1880, column: 9, scope: !7046)
!7078 = !DILocation(line: 1881, column: 40, scope: !7075)
!7079 = !DILocation(line: 1881, column: 45, scope: !7075)
!7080 = !DILocation(line: 1881, column: 9, scope: !7075)
!7081 = !DILocation(line: 1882, column: 9, scope: !7082)
!7082 = distinct !DILexicalBlock(scope: !7046, file: !69, line: 1882, column: 9)
!7083 = !DILocation(line: 1882, column: 14, scope: !7082)
!7084 = !DILocation(line: 1882, column: 26, scope: !7082)
!7085 = !DILocation(line: 1882, column: 46, scope: !7082)
!7086 = !DILocation(line: 1883, column: 40, scope: !7082)
!7087 = !DILocation(line: 1883, column: 45, scope: !7082)
!7088 = !DILocation(line: 1883, column: 17, scope: !7082)
!7089 = !DILocation(line: 1883, column: 15, scope: !7082)
!7090 = !DILocation(line: 1882, column: 9, scope: !7091)
!7091 = !DILexicalBlockFile(scope: !7046, file: !69, discriminator: 1)
!7092 = !DILocation(line: 1884, column: 50, scope: !7093)
!7093 = distinct !DILexicalBlock(scope: !7082, file: !69, line: 1883, column: 60)
!7094 = !DILocation(line: 1884, column: 56, scope: !7093)
!7095 = !DILocation(line: 1884, column: 9, scope: !7093)
!7096 = !DILocation(line: 1885, column: 5, scope: !7093)
!7097 = !DILocation(line: 1886, column: 9, scope: !7098)
!7098 = distinct !DILexicalBlock(scope: !7046, file: !69, line: 1886, column: 9)
!7099 = !DILocation(line: 1886, column: 14, scope: !7098)
!7100 = !DILocation(line: 1886, column: 26, scope: !7098)
!7101 = !DILocation(line: 1886, column: 46, scope: !7098)
!7102 = !DILocation(line: 1887, column: 40, scope: !7098)
!7103 = !DILocation(line: 1887, column: 45, scope: !7098)
!7104 = !DILocation(line: 1887, column: 17, scope: !7098)
!7105 = !DILocation(line: 1887, column: 15, scope: !7098)
!7106 = !DILocation(line: 1886, column: 9, scope: !7091)
!7107 = !DILocation(line: 1888, column: 50, scope: !7108)
!7108 = distinct !DILexicalBlock(scope: !7098, file: !69, line: 1887, column: 60)
!7109 = !DILocation(line: 1888, column: 56, scope: !7108)
!7110 = !DILocation(line: 1888, column: 9, scope: !7108)
!7111 = !DILocation(line: 1889, column: 5, scope: !7108)
!7112 = !DILocation(line: 1890, column: 9, scope: !7113)
!7113 = distinct !DILexicalBlock(scope: !7046, file: !69, line: 1890, column: 9)
!7114 = !DILocation(line: 1890, column: 14, scope: !7113)
!7115 = !DILocation(line: 1890, column: 29, scope: !7113)
!7116 = !DILocation(line: 1890, column: 49, scope: !7113)
!7117 = !DILocation(line: 1891, column: 40, scope: !7113)
!7118 = !DILocation(line: 1891, column: 45, scope: !7113)
!7119 = !DILocation(line: 1891, column: 17, scope: !7113)
!7120 = !DILocation(line: 1891, column: 15, scope: !7113)
!7121 = !DILocation(line: 1890, column: 9, scope: !7091)
!7122 = !DILocation(line: 1892, column: 53, scope: !7123)
!7123 = distinct !DILexicalBlock(scope: !7113, file: !69, line: 1891, column: 63)
!7124 = !DILocation(line: 1892, column: 59, scope: !7123)
!7125 = !DILocation(line: 1892, column: 9, scope: !7123)
!7126 = !DILocation(line: 1893, column: 5, scope: !7123)
!7127 = !DILocation(line: 1895, column: 9, scope: !7128)
!7128 = distinct !DILexicalBlock(scope: !7046, file: !69, line: 1895, column: 9)
!7129 = !DILocation(line: 1895, column: 14, scope: !7128)
!7130 = !DILocation(line: 1895, column: 9, scope: !7046)
!7131 = !DILocation(line: 1896, column: 28, scope: !7128)
!7132 = !DILocation(line: 1896, column: 33, scope: !7128)
!7133 = !DILocation(line: 1896, column: 9, scope: !7128)
!7134 = !DILocation(line: 1897, column: 1, scope: !7046)
!7135 = distinct !DISubprogram(name: "show_help_filter", scope: !69, file: !69, line: 1900, type: !2971, isLocal: true, isDefinition: true, scopeLine: 1901, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7136 = !DILocalVariable(name: "name", arg: 1, scope: !7135, file: !69, line: 1900, type: !953)
!7137 = !DILocation(line: 1900, column: 42, scope: !7135)
!7138 = !DILocalVariable(name: "f", scope: !7135, file: !69, line: 1903, type: !1034)
!7139 = !DILocation(line: 1903, column: 21, scope: !7135)
!7140 = !DILocation(line: 1903, column: 46, scope: !7135)
!7141 = !DILocation(line: 1903, column: 25, scope: !7135)
!7142 = !DILocalVariable(name: "i", scope: !7135, file: !69, line: 1904, type: !969)
!7143 = !DILocation(line: 1904, column: 9, scope: !7135)
!7144 = !DILocalVariable(name: "count", scope: !7135, file: !69, line: 1904, type: !969)
!7145 = !DILocation(line: 1904, column: 12, scope: !7135)
!7146 = !DILocation(line: 1906, column: 10, scope: !7147)
!7147 = distinct !DILexicalBlock(scope: !7135, file: !69, line: 1906, column: 9)
!7148 = !DILocation(line: 1906, column: 9, scope: !7135)
!7149 = !DILocation(line: 1907, column: 9, scope: !7150)
!7150 = distinct !DILexicalBlock(scope: !7147, file: !69, line: 1906, column: 16)
!7151 = !DILocation(line: 1908, column: 9, scope: !7150)
!7152 = !DILocation(line: 1909, column: 17, scope: !7153)
!7153 = distinct !DILexicalBlock(scope: !7147, file: !69, line: 1909, column: 16)
!7154 = !DILocation(line: 1909, column: 16, scope: !7147)
!7155 = !DILocation(line: 1910, column: 51, scope: !7156)
!7156 = distinct !DILexicalBlock(scope: !7153, file: !69, line: 1909, column: 20)
!7157 = !DILocation(line: 1910, column: 9, scope: !7156)
!7158 = !DILocation(line: 1911, column: 9, scope: !7156)
!7159 = !DILocation(line: 1914, column: 27, scope: !7135)
!7160 = !DILocation(line: 1914, column: 30, scope: !7135)
!7161 = !DILocation(line: 1914, column: 5, scope: !7135)
!7162 = !DILocation(line: 1915, column: 9, scope: !7163)
!7163 = distinct !DILexicalBlock(scope: !7135, file: !69, line: 1915, column: 9)
!7164 = !DILocation(line: 1915, column: 12, scope: !7163)
!7165 = !DILocation(line: 1915, column: 9, scope: !7135)
!7166 = !DILocation(line: 1916, column: 26, scope: !7163)
!7167 = !DILocation(line: 1916, column: 29, scope: !7163)
!7168 = !DILocation(line: 1916, column: 9, scope: !7163)
!7169 = !DILocation(line: 1918, column: 9, scope: !7170)
!7170 = distinct !DILexicalBlock(scope: !7135, file: !69, line: 1918, column: 9)
!7171 = !DILocation(line: 1918, column: 12, scope: !7170)
!7172 = !DILocation(line: 1918, column: 18, scope: !7170)
!7173 = !DILocation(line: 1918, column: 9, scope: !7135)
!7174 = !DILocation(line: 1919, column: 9, scope: !7170)
!7175 = !DILocation(line: 1921, column: 5, scope: !7135)
!7176 = !DILocation(line: 1922, column: 32, scope: !7135)
!7177 = !DILocation(line: 1922, column: 35, scope: !7135)
!7178 = !DILocation(line: 1922, column: 13, scope: !7135)
!7179 = !DILocation(line: 1922, column: 11, scope: !7135)
!7180 = !DILocation(line: 1923, column: 12, scope: !7181)
!7181 = distinct !DILexicalBlock(scope: !7135, file: !69, line: 1923, column: 5)
!7182 = !DILocation(line: 1923, column: 10, scope: !7181)
!7183 = !DILocation(line: 1923, column: 17, scope: !7184)
!7184 = !DILexicalBlockFile(scope: !7185, file: !69, discriminator: 1)
!7185 = distinct !DILexicalBlock(scope: !7181, file: !69, line: 1923, column: 5)
!7186 = !DILocation(line: 1923, column: 21, scope: !7184)
!7187 = !DILocation(line: 1923, column: 19, scope: !7184)
!7188 = !DILocation(line: 1923, column: 5, scope: !7184)
!7189 = !DILocation(line: 1924, column: 41, scope: !7190)
!7190 = distinct !DILexicalBlock(scope: !7185, file: !69, line: 1923, column: 33)
!7191 = !DILocation(line: 1924, column: 66, scope: !7190)
!7192 = !DILocation(line: 1924, column: 69, scope: !7190)
!7193 = !DILocation(line: 1924, column: 77, scope: !7190)
!7194 = !DILocation(line: 1924, column: 44, scope: !7190)
!7195 = !DILocation(line: 1925, column: 63, scope: !7190)
!7196 = !DILocation(line: 1925, column: 66, scope: !7190)
!7197 = !DILocation(line: 1925, column: 74, scope: !7190)
!7198 = !DILocation(line: 1925, column: 41, scope: !7190)
!7199 = !DILocation(line: 1925, column: 16, scope: !7200)
!7200 = !DILexicalBlockFile(scope: !7190, file: !69, discriminator: 1)
!7201 = !DILocation(line: 1924, column: 9, scope: !7200)
!7202 = !DILocation(line: 1926, column: 5, scope: !7190)
!7203 = !DILocation(line: 1923, column: 29, scope: !7204)
!7204 = !DILexicalBlockFile(scope: !7185, file: !69, discriminator: 2)
!7205 = !DILocation(line: 1923, column: 5, scope: !7204)
!7206 = distinct !{!7206, !7207}
!7207 = !DILocation(line: 1923, column: 5, scope: !7135)
!7208 = !DILocation(line: 1927, column: 9, scope: !7209)
!7209 = distinct !DILexicalBlock(scope: !7135, file: !69, line: 1927, column: 9)
!7210 = !DILocation(line: 1927, column: 12, scope: !7209)
!7211 = !DILocation(line: 1927, column: 18, scope: !7209)
!7212 = !DILocation(line: 1927, column: 9, scope: !7135)
!7213 = !DILocation(line: 1928, column: 9, scope: !7209)
!7214 = !DILocation(line: 1929, column: 15, scope: !7215)
!7215 = distinct !DILexicalBlock(scope: !7209, file: !69, line: 1929, column: 14)
!7216 = !DILocation(line: 1929, column: 14, scope: !7209)
!7217 = !DILocation(line: 1930, column: 9, scope: !7215)
!7218 = !DILocation(line: 1932, column: 5, scope: !7135)
!7219 = !DILocation(line: 1933, column: 32, scope: !7135)
!7220 = !DILocation(line: 1933, column: 35, scope: !7135)
!7221 = !DILocation(line: 1933, column: 13, scope: !7135)
!7222 = !DILocation(line: 1933, column: 11, scope: !7135)
!7223 = !DILocation(line: 1934, column: 12, scope: !7224)
!7224 = distinct !DILexicalBlock(scope: !7135, file: !69, line: 1934, column: 5)
!7225 = !DILocation(line: 1934, column: 10, scope: !7224)
!7226 = !DILocation(line: 1934, column: 17, scope: !7227)
!7227 = !DILexicalBlockFile(scope: !7228, file: !69, discriminator: 1)
!7228 = distinct !DILexicalBlock(scope: !7224, file: !69, line: 1934, column: 5)
!7229 = !DILocation(line: 1934, column: 21, scope: !7227)
!7230 = !DILocation(line: 1934, column: 19, scope: !7227)
!7231 = !DILocation(line: 1934, column: 5, scope: !7227)
!7232 = !DILocation(line: 1935, column: 41, scope: !7233)
!7233 = distinct !DILexicalBlock(scope: !7228, file: !69, line: 1934, column: 33)
!7234 = !DILocation(line: 1935, column: 66, scope: !7233)
!7235 = !DILocation(line: 1935, column: 69, scope: !7233)
!7236 = !DILocation(line: 1935, column: 78, scope: !7233)
!7237 = !DILocation(line: 1935, column: 44, scope: !7233)
!7238 = !DILocation(line: 1936, column: 63, scope: !7233)
!7239 = !DILocation(line: 1936, column: 66, scope: !7233)
!7240 = !DILocation(line: 1936, column: 75, scope: !7233)
!7241 = !DILocation(line: 1936, column: 41, scope: !7233)
!7242 = !DILocation(line: 1936, column: 16, scope: !7243)
!7243 = !DILexicalBlockFile(scope: !7233, file: !69, discriminator: 1)
!7244 = !DILocation(line: 1935, column: 9, scope: !7243)
!7245 = !DILocation(line: 1937, column: 5, scope: !7233)
!7246 = !DILocation(line: 1934, column: 29, scope: !7247)
!7247 = !DILexicalBlockFile(scope: !7228, file: !69, discriminator: 2)
!7248 = !DILocation(line: 1934, column: 5, scope: !7247)
!7249 = distinct !{!7249, !7250}
!7250 = !DILocation(line: 1934, column: 5, scope: !7135)
!7251 = !DILocation(line: 1938, column: 9, scope: !7252)
!7252 = distinct !DILexicalBlock(scope: !7135, file: !69, line: 1938, column: 9)
!7253 = !DILocation(line: 1938, column: 12, scope: !7252)
!7254 = !DILocation(line: 1938, column: 18, scope: !7252)
!7255 = !DILocation(line: 1938, column: 9, scope: !7135)
!7256 = !DILocation(line: 1939, column: 9, scope: !7252)
!7257 = !DILocation(line: 1940, column: 15, scope: !7258)
!7258 = distinct !DILexicalBlock(scope: !7252, file: !69, line: 1940, column: 14)
!7259 = !DILocation(line: 1940, column: 14, scope: !7252)
!7260 = !DILocation(line: 1941, column: 9, scope: !7258)
!7261 = !DILocation(line: 1943, column: 9, scope: !7262)
!7262 = distinct !DILexicalBlock(scope: !7135, file: !69, line: 1943, column: 9)
!7263 = !DILocation(line: 1943, column: 12, scope: !7262)
!7264 = !DILocation(line: 1943, column: 9, scope: !7135)
!7265 = !DILocation(line: 1944, column: 28, scope: !7262)
!7266 = !DILocation(line: 1944, column: 31, scope: !7262)
!7267 = !DILocation(line: 1944, column: 9, scope: !7262)
!7268 = !DILocation(line: 1946, column: 9, scope: !7269)
!7269 = distinct !DILexicalBlock(scope: !7135, file: !69, line: 1946, column: 9)
!7270 = !DILocation(line: 1946, column: 12, scope: !7269)
!7271 = !DILocation(line: 1946, column: 18, scope: !7269)
!7272 = !DILocation(line: 1946, column: 9, scope: !7135)
!7273 = !DILocation(line: 1947, column: 9, scope: !7269)
!7274 = !DILocation(line: 1952, column: 1, scope: !7135)
!7275 = distinct !DISubprogram(name: "show_help_bsf", scope: !69, file: !69, line: 1955, type: !2971, isLocal: true, isDefinition: true, scopeLine: 1956, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7276 = !DILocalVariable(name: "name", arg: 1, scope: !7275, file: !69, line: 1955, type: !953)
!7277 = !DILocation(line: 1955, column: 39, scope: !7275)
!7278 = !DILocalVariable(name: "bsf", scope: !7275, file: !69, line: 1957, type: !6366)
!7279 = !DILocation(line: 1957, column: 30, scope: !7275)
!7280 = !DILocation(line: 1957, column: 55, scope: !7275)
!7281 = !DILocation(line: 1957, column: 36, scope: !7275)
!7282 = !DILocation(line: 1959, column: 10, scope: !7283)
!7283 = distinct !DILexicalBlock(scope: !7275, file: !69, line: 1959, column: 9)
!7284 = !DILocation(line: 1959, column: 9, scope: !7275)
!7285 = !DILocation(line: 1960, column: 9, scope: !7286)
!7286 = distinct !DILexicalBlock(scope: !7283, file: !69, line: 1959, column: 16)
!7287 = !DILocation(line: 1961, column: 9, scope: !7286)
!7288 = !DILocation(line: 1962, column: 17, scope: !7289)
!7289 = distinct !DILexicalBlock(scope: !7283, file: !69, line: 1962, column: 16)
!7290 = !DILocation(line: 1962, column: 16, scope: !7283)
!7291 = !DILocation(line: 1963, column: 62, scope: !7292)
!7292 = distinct !DILexicalBlock(scope: !7289, file: !69, line: 1962, column: 22)
!7293 = !DILocation(line: 1963, column: 9, scope: !7292)
!7294 = !DILocation(line: 1964, column: 9, scope: !7292)
!7295 = !DILocation(line: 1967, column: 38, scope: !7275)
!7296 = !DILocation(line: 1967, column: 43, scope: !7275)
!7297 = !DILocation(line: 1967, column: 5, scope: !7275)
!7298 = !DILocation(line: 1968, column: 9, scope: !7299)
!7299 = distinct !DILexicalBlock(scope: !7275, file: !69, line: 1968, column: 9)
!7300 = !DILocation(line: 1968, column: 14, scope: !7299)
!7301 = !DILocation(line: 1968, column: 9, scope: !7275)
!7302 = !DILocalVariable(name: "p", scope: !7303, file: !69, line: 1968, type: !6373)
!7303 = distinct !DILexicalBlock(scope: !7299, file: !69, line: 1968, column: 25)
!7304 = !DILocation(line: 1968, column: 49, scope: !7303)
!7305 = !DILocation(line: 1968, column: 53, scope: !7306)
!7306 = !DILexicalBlockFile(scope: !7303, file: !69, discriminator: 1)
!7307 = !DILocation(line: 1968, column: 58, scope: !7306)
!7308 = !DILocation(line: 1968, column: 49, scope: !7306)
!7309 = !DILocation(line: 1968, column: 69, scope: !7306)
!7310 = !DILocation(line: 1968, column: 108, scope: !7306)
!7311 = !DILocation(line: 1968, column: 116, scope: !7312)
!7312 = !DILexicalBlockFile(scope: !7303, file: !69, discriminator: 2)
!7313 = !DILocation(line: 1968, column: 115, scope: !7312)
!7314 = !DILocation(line: 1968, column: 118, scope: !7312)
!7315 = !DILocation(line: 1968, column: 108, scope: !7312)
!7316 = !DILocalVariable(name: "name", scope: !7317, file: !69, line: 1968, type: !953)
!7317 = distinct !DILexicalBlock(scope: !7303, file: !69, line: 1968, column: 139)
!7318 = !DILocation(line: 1968, column: 153, scope: !7317)
!7319 = !DILocation(line: 1968, column: 184, scope: !7320)
!7320 = !DILexicalBlockFile(scope: !7317, file: !69, discriminator: 3)
!7321 = !DILocation(line: 1968, column: 183, scope: !7320)
!7322 = !DILocation(line: 1968, column: 160, scope: !7320)
!7323 = !DILocation(line: 1968, column: 188, scope: !7320)
!7324 = !DILocation(line: 1968, column: 153, scope: !7320)
!7325 = !DILocation(line: 1968, column: 209, scope: !7320)
!7326 = !DILocation(line: 1968, column: 195, scope: !7327)
!7327 = !DILexicalBlockFile(scope: !7320, file: !69, discriminator: 5)
!7328 = !DILocation(line: 1968, column: 217, scope: !7320)
!7329 = !DILocation(line: 1968, column: 108, scope: !7320)
!7330 = distinct !{!7330, !7331}
!7331 = !DILocation(line: 1968, column: 108, scope: !7303)
!7332 = !DILocation(line: 1968, column: 223, scope: !7333)
!7333 = !DILexicalBlockFile(scope: !7303, file: !69, discriminator: 4)
!7334 = !DILocation(line: 1968, column: 237, scope: !7333)
!7335 = !DILocation(line: 1970, column: 9, scope: !7336)
!7336 = distinct !DILexicalBlock(scope: !7275, file: !69, line: 1970, column: 9)
!7337 = !DILocation(line: 1970, column: 14, scope: !7336)
!7338 = !DILocation(line: 1970, column: 9, scope: !7275)
!7339 = !DILocation(line: 1971, column: 28, scope: !7336)
!7340 = !DILocation(line: 1971, column: 33, scope: !7336)
!7341 = !DILocation(line: 1971, column: 9, scope: !7336)
!7342 = !DILocation(line: 1972, column: 1, scope: !7275)
!7343 = distinct !DISubprogram(name: "read_yesno", scope: !69, file: !69, line: 2010, type: !7344, isLocal: false, isDefinition: true, scopeLine: 2011, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7344 = !DISubroutineType(types: !7345)
!7345 = !{!969}
!7346 = !DILocalVariable(name: "c", scope: !7343, file: !69, line: 2012, type: !969)
!7347 = !DILocation(line: 2012, column: 9, scope: !7343)
!7348 = !DILocation(line: 2012, column: 13, scope: !7343)
!7349 = !DILocalVariable(name: "yesno", scope: !7343, file: !69, line: 2013, type: !969)
!7350 = !DILocation(line: 2013, column: 9, scope: !7343)
!7351 = !DILocation(line: 2013, column: 29, scope: !7343)
!7352 = !DILocation(line: 2013, column: 18, scope: !7343)
!7353 = !DILocation(line: 2013, column: 32, scope: !7343)
!7354 = !DILocation(line: 2015, column: 5, scope: !7343)
!7355 = !DILocation(line: 2015, column: 12, scope: !7356)
!7356 = !DILexicalBlockFile(scope: !7343, file: !69, discriminator: 1)
!7357 = !DILocation(line: 2015, column: 14, scope: !7356)
!7358 = !DILocation(line: 2015, column: 22, scope: !7356)
!7359 = !DILocation(line: 2015, column: 25, scope: !7360)
!7360 = !DILexicalBlockFile(scope: !7343, file: !69, discriminator: 2)
!7361 = !DILocation(line: 2015, column: 27, scope: !7360)
!7362 = !DILocation(line: 2015, column: 5, scope: !7363)
!7363 = !DILexicalBlockFile(scope: !7343, file: !69, discriminator: 3)
!7364 = !DILocation(line: 2016, column: 13, scope: !7343)
!7365 = !DILocation(line: 2016, column: 11, scope: !7343)
!7366 = !DILocation(line: 2015, column: 5, scope: !7367)
!7367 = !DILexicalBlockFile(scope: !7343, file: !69, discriminator: 4)
!7368 = distinct !{!7368, !7354}
!7369 = !DILocation(line: 2018, column: 12, scope: !7343)
!7370 = !DILocation(line: 2018, column: 5, scope: !7343)
!7371 = distinct !DISubprogram(name: "av_toupper", scope: !7372, file: !7372, line: 231, type: !7373, isLocal: true, isDefinition: true, scopeLine: 232, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7372 = !DIFile(filename: "./libavutil/avstring.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!7373 = !DISubroutineType(types: !7374)
!7374 = !{!969, !969}
!7375 = !DILocalVariable(name: "c", arg: 1, scope: !7371, file: !7372, line: 231, type: !969)
!7376 = !DILocation(line: 231, column: 57, scope: !7371)
!7377 = !DILocation(line: 233, column: 9, scope: !7378)
!7378 = distinct !DILexicalBlock(scope: !7371, file: !7372, line: 233, column: 9)
!7379 = !DILocation(line: 233, column: 11, scope: !7378)
!7380 = !DILocation(line: 233, column: 18, scope: !7378)
!7381 = !DILocation(line: 233, column: 21, scope: !7382)
!7382 = !DILexicalBlockFile(scope: !7378, file: !7372, discriminator: 1)
!7383 = !DILocation(line: 233, column: 23, scope: !7382)
!7384 = !DILocation(line: 233, column: 9, scope: !7382)
!7385 = !DILocation(line: 234, column: 11, scope: !7378)
!7386 = !DILocation(line: 234, column: 9, scope: !7378)
!7387 = !DILocation(line: 235, column: 12, scope: !7371)
!7388 = !DILocation(line: 235, column: 5, scope: !7371)
!7389 = distinct !DISubprogram(name: "get_preset_file", scope: !69, file: !69, line: 2021, type: !7390, isLocal: false, isDefinition: true, scopeLine: 2024, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7390 = !DISubroutineType(types: !7391)
!7391 = !{!1360, !1076, !1264, !953, !969, !953}
!7392 = !DILocalVariable(name: "filename", arg: 1, scope: !7389, file: !69, line: 2021, type: !1076)
!7393 = !DILocation(line: 2021, column: 29, scope: !7389)
!7394 = !DILocalVariable(name: "filename_size", arg: 2, scope: !7389, file: !69, line: 2021, type: !1264)
!7395 = !DILocation(line: 2021, column: 46, scope: !7389)
!7396 = !DILocalVariable(name: "preset_name", arg: 3, scope: !7389, file: !69, line: 2022, type: !953)
!7397 = !DILocation(line: 2022, column: 35, scope: !7389)
!7398 = !DILocalVariable(name: "is_path", arg: 4, scope: !7389, file: !69, line: 2022, type: !969)
!7399 = !DILocation(line: 2022, column: 52, scope: !7389)
!7400 = !DILocalVariable(name: "codec_name", arg: 5, scope: !7389, file: !69, line: 2023, type: !953)
!7401 = !DILocation(line: 2023, column: 35, scope: !7389)
!7402 = !DILocalVariable(name: "f", scope: !7389, file: !69, line: 2025, type: !1360)
!7403 = !DILocation(line: 2025, column: 11, scope: !7389)
!7404 = !DILocalVariable(name: "i", scope: !7389, file: !69, line: 2026, type: !969)
!7405 = !DILocation(line: 2026, column: 9, scope: !7389)
!7406 = !DILocalVariable(name: "base", scope: !7389, file: !69, line: 2027, type: !7407)
!7407 = !DICompositeType(tag: DW_TAG_array_type, baseType: !953, size: 192, align: 64, elements: !7408)
!7408 = !{!7409}
!7409 = !DISubrange(count: 3)
!7410 = !DILocation(line: 2027, column: 17, scope: !7389)
!7411 = !DILocation(line: 2027, column: 27, scope: !7389)
!7412 = !DILocation(line: 2027, column: 29, scope: !7389)
!7413 = !DILocation(line: 2028, column: 29, scope: !7389)
!7414 = !DILocation(line: 2031, column: 9, scope: !7415)
!7415 = distinct !DILexicalBlock(scope: !7389, file: !69, line: 2031, column: 9)
!7416 = !DILocation(line: 2031, column: 9, scope: !7389)
!7417 = !DILocation(line: 2032, column: 20, scope: !7418)
!7418 = distinct !DILexicalBlock(scope: !7415, file: !69, line: 2031, column: 18)
!7419 = !DILocation(line: 2032, column: 30, scope: !7418)
!7420 = !DILocation(line: 2032, column: 43, scope: !7418)
!7421 = !DILocation(line: 2032, column: 9, scope: !7418)
!7422 = !DILocation(line: 2033, column: 19, scope: !7418)
!7423 = !DILocation(line: 2033, column: 13, scope: !7418)
!7424 = !DILocation(line: 2033, column: 11, scope: !7418)
!7425 = !DILocation(line: 2034, column: 5, scope: !7418)
!7426 = !DILocation(line: 2052, column: 16, scope: !7427)
!7427 = distinct !DILexicalBlock(scope: !7428, file: !69, line: 2052, column: 9)
!7428 = distinct !DILexicalBlock(scope: !7415, file: !69, line: 2034, column: 12)
!7429 = !DILocation(line: 2052, column: 14, scope: !7427)
!7430 = !DILocation(line: 2052, column: 21, scope: !7431)
!7431 = !DILexicalBlockFile(scope: !7432, file: !69, discriminator: 1)
!7432 = distinct !DILexicalBlock(scope: !7427, file: !69, line: 2052, column: 9)
!7433 = !DILocation(line: 2052, column: 23, scope: !7431)
!7434 = !DILocation(line: 2052, column: 27, scope: !7431)
!7435 = !DILocation(line: 2052, column: 31, scope: !7436)
!7436 = !DILexicalBlockFile(scope: !7432, file: !69, discriminator: 2)
!7437 = !DILocation(line: 2052, column: 30, scope: !7436)
!7438 = !DILocation(line: 2052, column: 9, scope: !7439)
!7439 = !DILexicalBlockFile(scope: !7427, file: !69, discriminator: 3)
!7440 = !DILocation(line: 2053, column: 23, scope: !7441)
!7441 = distinct !DILexicalBlock(scope: !7442, file: !69, line: 2053, column: 17)
!7442 = distinct !DILexicalBlock(scope: !7432, file: !69, line: 2052, column: 39)
!7443 = !DILocation(line: 2053, column: 18, scope: !7441)
!7444 = !DILocation(line: 2053, column: 17, scope: !7442)
!7445 = !DILocation(line: 2054, column: 17, scope: !7441)
!7446 = !DILocation(line: 2055, column: 22, scope: !7442)
!7447 = !DILocation(line: 2055, column: 32, scope: !7442)
!7448 = !DILocation(line: 2055, column: 72, scope: !7442)
!7449 = !DILocation(line: 2055, column: 67, scope: !7442)
!7450 = !DILocation(line: 2056, column: 22, scope: !7442)
!7451 = !DILocation(line: 2056, column: 24, scope: !7442)
!7452 = !DILocation(line: 2056, column: 48, scope: !7442)
!7453 = !DILocation(line: 2055, column: 13, scope: !7442)
!7454 = !DILocation(line: 2057, column: 23, scope: !7442)
!7455 = !DILocation(line: 2057, column: 17, scope: !7442)
!7456 = !DILocation(line: 2057, column: 15, scope: !7442)
!7457 = !DILocation(line: 2058, column: 18, scope: !7458)
!7458 = distinct !DILexicalBlock(scope: !7442, file: !69, line: 2058, column: 17)
!7459 = !DILocation(line: 2058, column: 20, scope: !7458)
!7460 = !DILocation(line: 2058, column: 23, scope: !7461)
!7461 = !DILexicalBlockFile(scope: !7458, file: !69, discriminator: 1)
!7462 = !DILocation(line: 2058, column: 17, scope: !7461)
!7463 = !DILocation(line: 2059, column: 26, scope: !7464)
!7464 = distinct !DILexicalBlock(scope: !7458, file: !69, line: 2058, column: 35)
!7465 = !DILocation(line: 2059, column: 36, scope: !7464)
!7466 = !DILocation(line: 2061, column: 31, scope: !7464)
!7467 = !DILocation(line: 2061, column: 26, scope: !7464)
!7468 = !DILocation(line: 2061, column: 35, scope: !7464)
!7469 = !DILocation(line: 2061, column: 37, scope: !7464)
!7470 = !DILocation(line: 2061, column: 61, scope: !7464)
!7471 = !DILocation(line: 2062, column: 26, scope: !7464)
!7472 = !DILocation(line: 2059, column: 17, scope: !7464)
!7473 = !DILocation(line: 2063, column: 27, scope: !7464)
!7474 = !DILocation(line: 2063, column: 21, scope: !7464)
!7475 = !DILocation(line: 2063, column: 19, scope: !7464)
!7476 = !DILocation(line: 2064, column: 13, scope: !7464)
!7477 = !DILocation(line: 2065, column: 9, scope: !7442)
!7478 = !DILocation(line: 2052, column: 35, scope: !7479)
!7479 = !DILexicalBlockFile(scope: !7432, file: !69, discriminator: 4)
!7480 = !DILocation(line: 2052, column: 9, scope: !7479)
!7481 = distinct !{!7481, !7482}
!7482 = !DILocation(line: 2052, column: 9, scope: !7428)
!7483 = !DILocation(line: 2068, column: 12, scope: !7389)
!7484 = !DILocation(line: 2068, column: 5, scope: !7389)
!7485 = distinct !DISubprogram(name: "check_stream_specifier", scope: !69, file: !69, line: 2071, type: !7486, isLocal: false, isDefinition: true, scopeLine: 2072, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7486 = !DISubroutineType(types: !7487)
!7487 = !{!969, !4886, !4982, !953}
!7488 = !DILocalVariable(name: "s", arg: 1, scope: !7485, file: !69, line: 2071, type: !4886)
!7489 = !DILocation(line: 2071, column: 45, scope: !7485)
!7490 = !DILocalVariable(name: "st", arg: 2, scope: !7485, file: !69, line: 2071, type: !4982)
!7491 = !DILocation(line: 2071, column: 58, scope: !7485)
!7492 = !DILocalVariable(name: "spec", arg: 3, scope: !7485, file: !69, line: 2071, type: !953)
!7493 = !DILocation(line: 2071, column: 74, scope: !7485)
!7494 = !DILocalVariable(name: "ret", scope: !7485, file: !69, line: 2073, type: !969)
!7495 = !DILocation(line: 2073, column: 9, scope: !7485)
!7496 = !DILocation(line: 2073, column: 47, scope: !7485)
!7497 = !DILocation(line: 2073, column: 50, scope: !7485)
!7498 = !DILocation(line: 2073, column: 54, scope: !7485)
!7499 = !DILocation(line: 2073, column: 15, scope: !7485)
!7500 = !DILocation(line: 2074, column: 9, scope: !7501)
!7501 = distinct !DILexicalBlock(scope: !7485, file: !69, line: 2074, column: 9)
!7502 = !DILocation(line: 2074, column: 13, scope: !7501)
!7503 = !DILocation(line: 2074, column: 9, scope: !7485)
!7504 = !DILocation(line: 2075, column: 16, scope: !7501)
!7505 = !DILocation(line: 2075, column: 58, scope: !7501)
!7506 = !DILocation(line: 2075, column: 9, scope: !7501)
!7507 = !DILocation(line: 2076, column: 12, scope: !7485)
!7508 = !DILocation(line: 2076, column: 5, scope: !7485)
!7509 = distinct !DISubprogram(name: "filter_codec_opts", scope: !69, file: !69, line: 2079, type: !7510, isLocal: false, isDefinition: true, scopeLine: 2081, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7510 = !DISubroutineType(types: !7511)
!7511 = !{!1059, !1059, !74, !4886, !4982, !5696}
!7512 = !DILocalVariable(name: "opts", arg: 1, scope: !7509, file: !69, line: 2079, type: !1059)
!7513 = !DILocation(line: 2079, column: 47, scope: !7509)
!7514 = !DILocalVariable(name: "codec_id", arg: 2, scope: !7509, file: !69, line: 2079, type: !74)
!7515 = !DILocation(line: 2079, column: 68, scope: !7509)
!7516 = !DILocalVariable(name: "s", arg: 3, scope: !7509, file: !69, line: 2080, type: !4886)
!7517 = !DILocation(line: 2080, column: 50, scope: !7509)
!7518 = !DILocalVariable(name: "st", arg: 4, scope: !7509, file: !69, line: 2080, type: !4982)
!7519 = !DILocation(line: 2080, column: 63, scope: !7509)
!7520 = !DILocalVariable(name: "codec", arg: 5, scope: !7509, file: !69, line: 2080, type: !5696)
!7521 = !DILocation(line: 2080, column: 76, scope: !7509)
!7522 = !DILocalVariable(name: "ret", scope: !7509, file: !69, line: 2082, type: !1059)
!7523 = !DILocation(line: 2082, column: 19, scope: !7509)
!7524 = !DILocalVariable(name: "t", scope: !7509, file: !69, line: 2083, type: !7525)
!7525 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7526, size: 64, align: 64)
!7526 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVDictionaryEntry", file: !1061, line: 84, baseType: !7527)
!7527 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVDictionaryEntry", file: !1061, line: 81, size: 128, align: 64, elements: !7528)
!7528 = !{!7529, !7530}
!7529 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !7527, file: !1061, line: 82, baseType: !1076, size: 64, align: 64)
!7530 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !7527, file: !1061, line: 83, baseType: !1076, size: 64, align: 64, offset: 64)
!7531 = !DILocation(line: 2083, column: 24, scope: !7509)
!7532 = !DILocalVariable(name: "flags", scope: !7509, file: !69, line: 2084, type: !969)
!7533 = !DILocation(line: 2084, column: 9, scope: !7509)
!7534 = !DILocation(line: 2084, column: 17, scope: !7509)
!7535 = !DILocation(line: 2084, column: 20, scope: !7509)
!7536 = !DILocalVariable(name: "prefix", scope: !7509, file: !69, line: 2086, type: !955)
!7537 = !DILocation(line: 2086, column: 10, scope: !7509)
!7538 = !DILocalVariable(name: "cc", scope: !7509, file: !69, line: 2087, type: !947)
!7539 = !DILocation(line: 2087, column: 20, scope: !7509)
!7540 = !DILocation(line: 2087, column: 25, scope: !7509)
!7541 = !DILocation(line: 2089, column: 10, scope: !7542)
!7542 = distinct !DILexicalBlock(scope: !7509, file: !69, line: 2089, column: 9)
!7543 = !DILocation(line: 2089, column: 9, scope: !7509)
!7544 = !DILocation(line: 2090, column: 17, scope: !7542)
!7545 = !DILocation(line: 2090, column: 20, scope: !7542)
!7546 = !DILocation(line: 2090, column: 51, scope: !7547)
!7547 = !DILexicalBlockFile(scope: !7542, file: !69, discriminator: 1)
!7548 = !DILocation(line: 2090, column: 30, scope: !7547)
!7549 = !DILocation(line: 2090, column: 17, scope: !7547)
!7550 = !DILocation(line: 2091, column: 62, scope: !7542)
!7551 = !DILocation(line: 2091, column: 41, scope: !7542)
!7552 = !DILocation(line: 2090, column: 17, scope: !7553)
!7553 = !DILexicalBlockFile(scope: !7542, file: !69, discriminator: 2)
!7554 = !DILocation(line: 2090, column: 17, scope: !7555)
!7555 = !DILexicalBlockFile(scope: !7542, file: !69, discriminator: 3)
!7556 = !DILocation(line: 2090, column: 15, scope: !7555)
!7557 = !DILocation(line: 2090, column: 9, scope: !7555)
!7558 = !DILocation(line: 2093, column: 13, scope: !7509)
!7559 = !DILocation(line: 2093, column: 17, scope: !7509)
!7560 = !DILocation(line: 2093, column: 27, scope: !7509)
!7561 = !DILocation(line: 2093, column: 5, scope: !7509)
!7562 = !DILocation(line: 2095, column: 16, scope: !7563)
!7563 = distinct !DILexicalBlock(scope: !7509, file: !69, line: 2093, column: 39)
!7564 = !DILocation(line: 2096, column: 15, scope: !7563)
!7565 = !DILocation(line: 2097, column: 9, scope: !7563)
!7566 = !DILocation(line: 2099, column: 16, scope: !7563)
!7567 = !DILocation(line: 2100, column: 15, scope: !7563)
!7568 = !DILocation(line: 2101, column: 9, scope: !7563)
!7569 = !DILocation(line: 2103, column: 16, scope: !7563)
!7570 = !DILocation(line: 2104, column: 15, scope: !7563)
!7571 = !DILocation(line: 2105, column: 9, scope: !7563)
!7572 = !DILocation(line: 2108, column: 5, scope: !7509)
!7573 = !DILocation(line: 2108, column: 28, scope: !7574)
!7574 = !DILexicalBlockFile(scope: !7509, file: !69, discriminator: 1)
!7575 = !DILocation(line: 2108, column: 38, scope: !7574)
!7576 = !DILocation(line: 2108, column: 16, scope: !7574)
!7577 = !DILocation(line: 2108, column: 14, scope: !7574)
!7578 = !DILocation(line: 2108, column: 5, scope: !7574)
!7579 = !DILocalVariable(name: "p", scope: !7580, file: !69, line: 2109, type: !1076)
!7580 = distinct !DILexicalBlock(scope: !7509, file: !69, line: 2108, column: 45)
!7581 = !DILocation(line: 2109, column: 15, scope: !7580)
!7582 = !DILocation(line: 2109, column: 26, scope: !7580)
!7583 = !DILocation(line: 2109, column: 29, scope: !7580)
!7584 = !DILocation(line: 2109, column: 19, scope: !7580)
!7585 = !DILocation(line: 2112, column: 13, scope: !7586)
!7586 = distinct !DILexicalBlock(scope: !7580, file: !69, line: 2112, column: 13)
!7587 = !DILocation(line: 2112, column: 13, scope: !7580)
!7588 = !DILocation(line: 2113, column: 44, scope: !7586)
!7589 = !DILocation(line: 2113, column: 47, scope: !7586)
!7590 = !DILocation(line: 2113, column: 51, scope: !7586)
!7591 = !DILocation(line: 2113, column: 53, scope: !7586)
!7592 = !DILocation(line: 2113, column: 21, scope: !7586)
!7593 = !DILocation(line: 2113, column: 13, scope: !7586)
!7594 = !DILocation(line: 2114, column: 22, scope: !7595)
!7595 = distinct !DILexicalBlock(scope: !7586, file: !69, line: 2113, column: 59)
!7596 = !DILocation(line: 2114, column: 24, scope: !7595)
!7597 = !DILocation(line: 2114, column: 29, scope: !7595)
!7598 = !DILocation(line: 2115, column: 21, scope: !7595)
!7599 = distinct !{!7599, !7572}
!7600 = !DILocation(line: 2116, column: 22, scope: !7595)
!7601 = !DILocation(line: 2117, column: 13, scope: !7595)
!7602 = !DILocation(line: 2119, column: 25, scope: !7603)
!7603 = distinct !DILexicalBlock(scope: !7580, file: !69, line: 2119, column: 13)
!7604 = !DILocation(line: 2119, column: 30, scope: !7603)
!7605 = !DILocation(line: 2119, column: 33, scope: !7603)
!7606 = !DILocation(line: 2119, column: 43, scope: !7603)
!7607 = !DILocation(line: 2119, column: 13, scope: !7603)
!7608 = !DILocation(line: 2119, column: 60, scope: !7603)
!7609 = !DILocation(line: 2120, column: 14, scope: !7603)
!7610 = !DILocation(line: 2120, column: 20, scope: !7603)
!7611 = !DILocation(line: 2121, column: 14, scope: !7603)
!7612 = !DILocation(line: 2121, column: 21, scope: !7603)
!7613 = !DILocation(line: 2121, column: 32, scope: !7603)
!7614 = !DILocation(line: 2122, column: 27, scope: !7603)
!7615 = !DILocation(line: 2122, column: 34, scope: !7603)
!7616 = !DILocation(line: 2122, column: 26, scope: !7603)
!7617 = !DILocation(line: 2122, column: 46, scope: !7603)
!7618 = !DILocation(line: 2122, column: 49, scope: !7603)
!7619 = !DILocation(line: 2122, column: 59, scope: !7603)
!7620 = !DILocation(line: 2122, column: 14, scope: !7603)
!7621 = !DILocation(line: 2119, column: 13, scope: !7622)
!7622 = !DILexicalBlockFile(scope: !7580, file: !69, discriminator: 1)
!7623 = !DILocation(line: 2124, column: 31, scope: !7603)
!7624 = !DILocation(line: 2124, column: 34, scope: !7603)
!7625 = !DILocation(line: 2124, column: 39, scope: !7603)
!7626 = !DILocation(line: 2124, column: 42, scope: !7603)
!7627 = !DILocation(line: 2124, column: 13, scope: !7603)
!7628 = !DILocation(line: 2125, column: 18, scope: !7629)
!7629 = distinct !DILexicalBlock(scope: !7603, file: !69, line: 2125, column: 18)
!7630 = !DILocation(line: 2125, column: 21, scope: !7629)
!7631 = !DILocation(line: 2125, column: 31, scope: !7629)
!7632 = !DILocation(line: 2125, column: 28, scope: !7629)
!7633 = !DILocation(line: 2125, column: 38, scope: !7629)
!7634 = !DILocation(line: 2126, column: 30, scope: !7629)
!7635 = !DILocation(line: 2126, column: 35, scope: !7629)
!7636 = !DILocation(line: 2126, column: 38, scope: !7629)
!7637 = !DILocation(line: 2126, column: 42, scope: !7629)
!7638 = !DILocation(line: 2126, column: 52, scope: !7629)
!7639 = !DILocation(line: 2126, column: 18, scope: !7629)
!7640 = !DILocation(line: 2125, column: 18, scope: !7641)
!7641 = !DILexicalBlockFile(scope: !7603, file: !69, discriminator: 1)
!7642 = !DILocation(line: 2128, column: 31, scope: !7629)
!7643 = !DILocation(line: 2128, column: 34, scope: !7629)
!7644 = !DILocation(line: 2128, column: 38, scope: !7629)
!7645 = !DILocation(line: 2128, column: 43, scope: !7629)
!7646 = !DILocation(line: 2128, column: 46, scope: !7629)
!7647 = !DILocation(line: 2128, column: 13, scope: !7629)
!7648 = !DILocation(line: 2130, column: 13, scope: !7649)
!7649 = distinct !DILexicalBlock(scope: !7580, file: !69, line: 2130, column: 13)
!7650 = !DILocation(line: 2130, column: 13, scope: !7580)
!7651 = !DILocation(line: 2131, column: 14, scope: !7649)
!7652 = !DILocation(line: 2131, column: 16, scope: !7649)
!7653 = !DILocation(line: 2131, column: 13, scope: !7649)
!7654 = !DILocation(line: 2108, column: 5, scope: !7655)
!7655 = !DILexicalBlockFile(scope: !7509, file: !69, discriminator: 2)
!7656 = !DILocation(line: 2133, column: 12, scope: !7509)
!7657 = !DILocation(line: 2133, column: 5, scope: !7509)
!7658 = distinct !DISubprogram(name: "setup_find_stream_info_opts", scope: !69, file: !69, line: 2136, type: !7659, isLocal: false, isDefinition: true, scopeLine: 2138, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7659 = !DISubroutineType(types: !7660)
!7660 = !{!1058, !4886, !1059}
!7661 = !DILocalVariable(name: "s", arg: 1, scope: !7658, file: !69, line: 2136, type: !4886)
!7662 = !DILocation(line: 2136, column: 61, scope: !7658)
!7663 = !DILocalVariable(name: "codec_opts", arg: 2, scope: !7658, file: !69, line: 2137, type: !1059)
!7664 = !DILocation(line: 2137, column: 58, scope: !7658)
!7665 = !DILocalVariable(name: "i", scope: !7658, file: !69, line: 2139, type: !969)
!7666 = !DILocation(line: 2139, column: 9, scope: !7658)
!7667 = !DILocalVariable(name: "opts", scope: !7658, file: !69, line: 2140, type: !1058)
!7668 = !DILocation(line: 2140, column: 20, scope: !7658)
!7669 = !DILocation(line: 2142, column: 10, scope: !7670)
!7670 = distinct !DILexicalBlock(scope: !7658, file: !69, line: 2142, column: 9)
!7671 = !DILocation(line: 2142, column: 13, scope: !7670)
!7672 = !DILocation(line: 2142, column: 9, scope: !7658)
!7673 = !DILocation(line: 2143, column: 9, scope: !7670)
!7674 = !DILocation(line: 2144, column: 29, scope: !7658)
!7675 = !DILocation(line: 2144, column: 32, scope: !7658)
!7676 = !DILocation(line: 2144, column: 12, scope: !7658)
!7677 = !DILocation(line: 2144, column: 10, scope: !7658)
!7678 = !DILocation(line: 2145, column: 10, scope: !7679)
!7679 = distinct !DILexicalBlock(scope: !7658, file: !69, line: 2145, column: 9)
!7680 = !DILocation(line: 2145, column: 9, scope: !7658)
!7681 = !DILocation(line: 2146, column: 9, scope: !7682)
!7682 = distinct !DILexicalBlock(scope: !7679, file: !69, line: 2145, column: 16)
!7683 = !DILocation(line: 2148, column: 9, scope: !7682)
!7684 = !DILocation(line: 2150, column: 12, scope: !7685)
!7685 = distinct !DILexicalBlock(scope: !7658, file: !69, line: 2150, column: 5)
!7686 = !DILocation(line: 2150, column: 10, scope: !7685)
!7687 = !DILocation(line: 2150, column: 17, scope: !7688)
!7688 = !DILexicalBlockFile(scope: !7689, file: !69, discriminator: 1)
!7689 = distinct !DILexicalBlock(scope: !7685, file: !69, line: 2150, column: 5)
!7690 = !DILocation(line: 2150, column: 21, scope: !7688)
!7691 = !DILocation(line: 2150, column: 24, scope: !7688)
!7692 = !DILocation(line: 2150, column: 19, scope: !7688)
!7693 = !DILocation(line: 2150, column: 5, scope: !7688)
!7694 = !DILocation(line: 2151, column: 37, scope: !7689)
!7695 = !DILocation(line: 2151, column: 60, scope: !7689)
!7696 = !DILocation(line: 2151, column: 49, scope: !7689)
!7697 = !DILocation(line: 2151, column: 52, scope: !7689)
!7698 = !DILocation(line: 2151, column: 64, scope: !7689)
!7699 = !DILocation(line: 2151, column: 74, scope: !7689)
!7700 = !DILocation(line: 2152, column: 37, scope: !7689)
!7701 = !DILocation(line: 2152, column: 51, scope: !7689)
!7702 = !DILocation(line: 2152, column: 40, scope: !7689)
!7703 = !DILocation(line: 2152, column: 43, scope: !7689)
!7704 = !DILocation(line: 2151, column: 19, scope: !7689)
!7705 = !DILocation(line: 2151, column: 14, scope: !7689)
!7706 = !DILocation(line: 2151, column: 9, scope: !7689)
!7707 = !DILocation(line: 2151, column: 17, scope: !7689)
!7708 = !DILocation(line: 2150, column: 37, scope: !7709)
!7709 = !DILexicalBlockFile(scope: !7689, file: !69, discriminator: 2)
!7710 = !DILocation(line: 2150, column: 5, scope: !7709)
!7711 = distinct !{!7711, !7712}
!7712 = !DILocation(line: 2150, column: 5, scope: !7658)
!7713 = !DILocation(line: 2153, column: 12, scope: !7658)
!7714 = !DILocation(line: 2153, column: 5, scope: !7658)
!7715 = !DILocation(line: 2154, column: 1, scope: !7658)
!7716 = distinct !DISubprogram(name: "grow_array", scope: !69, file: !69, line: 2156, type: !7717, isLocal: false, isDefinition: true, scopeLine: 2157, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7717 = !DISubroutineType(types: !7718)
!7718 = !{!960, !960, !969, !1121, !969}
!7719 = !DILocalVariable(name: "array", arg: 1, scope: !7716, file: !69, line: 2156, type: !960)
!7720 = !DILocation(line: 2156, column: 24, scope: !7716)
!7721 = !DILocalVariable(name: "elem_size", arg: 2, scope: !7716, file: !69, line: 2156, type: !969)
!7722 = !DILocation(line: 2156, column: 35, scope: !7716)
!7723 = !DILocalVariable(name: "size", arg: 3, scope: !7716, file: !69, line: 2156, type: !1121)
!7724 = !DILocation(line: 2156, column: 51, scope: !7716)
!7725 = !DILocalVariable(name: "new_size", arg: 4, scope: !7716, file: !69, line: 2156, type: !969)
!7726 = !DILocation(line: 2156, column: 61, scope: !7716)
!7727 = !DILocation(line: 2158, column: 9, scope: !7728)
!7728 = distinct !DILexicalBlock(scope: !7716, file: !69, line: 2158, column: 9)
!7729 = !DILocation(line: 2158, column: 34, scope: !7728)
!7730 = !DILocation(line: 2158, column: 32, scope: !7728)
!7731 = !DILocation(line: 2158, column: 18, scope: !7728)
!7732 = !DILocation(line: 2158, column: 9, scope: !7716)
!7733 = !DILocation(line: 2159, column: 9, scope: !7734)
!7734 = distinct !DILexicalBlock(scope: !7728, file: !69, line: 2158, column: 45)
!7735 = !DILocation(line: 2160, column: 9, scope: !7734)
!7736 = !DILocation(line: 2162, column: 10, scope: !7737)
!7737 = distinct !DILexicalBlock(scope: !7716, file: !69, line: 2162, column: 9)
!7738 = !DILocation(line: 2162, column: 9, scope: !7737)
!7739 = !DILocation(line: 2162, column: 17, scope: !7737)
!7740 = !DILocation(line: 2162, column: 15, scope: !7737)
!7741 = !DILocation(line: 2162, column: 9, scope: !7716)
!7742 = !DILocalVariable(name: "tmp", scope: !7743, file: !69, line: 2163, type: !1150)
!7743 = distinct !DILexicalBlock(scope: !7737, file: !69, line: 2162, column: 27)
!7744 = !DILocation(line: 2163, column: 18, scope: !7743)
!7745 = !DILocation(line: 2163, column: 41, scope: !7743)
!7746 = !DILocation(line: 2163, column: 48, scope: !7743)
!7747 = !DILocation(line: 2163, column: 58, scope: !7743)
!7748 = !DILocation(line: 2163, column: 24, scope: !7743)
!7749 = !DILocation(line: 2164, column: 14, scope: !7750)
!7750 = distinct !DILexicalBlock(scope: !7743, file: !69, line: 2164, column: 13)
!7751 = !DILocation(line: 2164, column: 13, scope: !7743)
!7752 = !DILocation(line: 2165, column: 13, scope: !7753)
!7753 = distinct !DILexicalBlock(scope: !7750, file: !69, line: 2164, column: 19)
!7754 = !DILocation(line: 2166, column: 13, scope: !7753)
!7755 = !DILocation(line: 2168, column: 16, scope: !7743)
!7756 = !DILocation(line: 2168, column: 23, scope: !7743)
!7757 = !DILocation(line: 2168, column: 22, scope: !7743)
!7758 = !DILocation(line: 2168, column: 28, scope: !7743)
!7759 = !DILocation(line: 2168, column: 27, scope: !7743)
!7760 = !DILocation(line: 2168, column: 20, scope: !7743)
!7761 = !DILocation(line: 2168, column: 43, scope: !7743)
!7762 = !DILocation(line: 2168, column: 53, scope: !7743)
!7763 = !DILocation(line: 2168, column: 52, scope: !7743)
!7764 = !DILocation(line: 2168, column: 51, scope: !7743)
!7765 = !DILocation(line: 2168, column: 61, scope: !7743)
!7766 = !DILocation(line: 2168, column: 59, scope: !7743)
!7767 = !DILocation(line: 2168, column: 42, scope: !7743)
!7768 = !DILocation(line: 2168, column: 9, scope: !7743)
!7769 = !DILocation(line: 2169, column: 17, scope: !7743)
!7770 = !DILocation(line: 2169, column: 10, scope: !7743)
!7771 = !DILocation(line: 2169, column: 15, scope: !7743)
!7772 = !DILocation(line: 2170, column: 16, scope: !7743)
!7773 = !DILocation(line: 2170, column: 9, scope: !7743)
!7774 = !DILocation(line: 2172, column: 12, scope: !7716)
!7775 = !DILocation(line: 2172, column: 5, scope: !7716)
!7776 = !DILocation(line: 2173, column: 1, scope: !7716)
!7777 = distinct !DISubprogram(name: "get_rotation", scope: !69, file: !69, line: 2175, type: !7778, isLocal: false, isDefinition: true, scopeLine: 2176, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7778 = !DISubroutineType(types: !7779)
!7779 = !{!979, !4982}
!7780 = !DILocalVariable(name: "st", arg: 1, scope: !7777, file: !69, line: 2175, type: !4982)
!7781 = !DILocation(line: 2175, column: 31, scope: !7777)
!7782 = !DILocalVariable(name: "displaymatrix", scope: !7777, file: !69, line: 2177, type: !1150)
!7783 = !DILocation(line: 2177, column: 14, scope: !7777)
!7784 = !DILocation(line: 2177, column: 54, scope: !7777)
!7785 = !DILocation(line: 2177, column: 30, scope: !7777)
!7786 = !DILocalVariable(name: "theta", scope: !7777, file: !69, line: 2179, type: !979)
!7787 = !DILocation(line: 2179, column: 12, scope: !7777)
!7788 = !DILocation(line: 2180, column: 9, scope: !7789)
!7789 = distinct !DILexicalBlock(scope: !7777, file: !69, line: 2180, column: 9)
!7790 = !DILocation(line: 2180, column: 9, scope: !7777)
!7791 = !DILocation(line: 2181, column: 53, scope: !7789)
!7792 = !DILocation(line: 2181, column: 42, scope: !7789)
!7793 = !DILocation(line: 2181, column: 18, scope: !7789)
!7794 = !DILocation(line: 2181, column: 17, scope: !7789)
!7795 = !DILocation(line: 2181, column: 15, scope: !7789)
!7796 = !DILocation(line: 2181, column: 9, scope: !7789)
!7797 = !DILocation(line: 2183, column: 24, scope: !7777)
!7798 = !DILocation(line: 2183, column: 29, scope: !7777)
!7799 = !DILocation(line: 2183, column: 34, scope: !7777)
!7800 = !DILocation(line: 2183, column: 18, scope: !7777)
!7801 = !DILocation(line: 2183, column: 17, scope: !7777)
!7802 = !DILocation(line: 2183, column: 11, scope: !7777)
!7803 = !DILocation(line: 2185, column: 14, scope: !7804)
!7804 = distinct !DILexicalBlock(scope: !7777, file: !69, line: 2185, column: 9)
!7805 = !DILocation(line: 2185, column: 31, scope: !7804)
!7806 = !DILocation(line: 2185, column: 36, scope: !7804)
!7807 = !DILocation(line: 2185, column: 25, scope: !7804)
!7808 = !DILocation(line: 2185, column: 24, scope: !7804)
!7809 = !DILocation(line: 2185, column: 20, scope: !7804)
!7810 = !DILocation(line: 2185, column: 9, scope: !7811)
!7811 = !DILexicalBlockFile(scope: !7804, file: !69, discriminator: 1)
!7812 = !DILocation(line: 2185, column: 42, scope: !7804)
!7813 = !DILocation(line: 2185, column: 9, scope: !7777)
!7814 = !DILocation(line: 2186, column: 9, scope: !7804)
!7815 = !DILocation(line: 2191, column: 12, scope: !7777)
!7816 = !DILocation(line: 2191, column: 5, scope: !7777)
!7817 = distinct !DISubprogram(name: "show_sources", scope: !69, file: !69, line: 2277, type: !1343, isLocal: false, isDefinition: true, scopeLine: 2278, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7818 = !DILocalVariable(name: "optctx", arg: 1, scope: !7817, file: !69, line: 2277, type: !960)
!7819 = !DILocation(line: 2277, column: 24, scope: !7817)
!7820 = !DILocalVariable(name: "opt", arg: 2, scope: !7817, file: !69, line: 2277, type: !953)
!7821 = !DILocation(line: 2277, column: 44, scope: !7817)
!7822 = !DILocalVariable(name: "arg", arg: 3, scope: !7817, file: !69, line: 2277, type: !953)
!7823 = !DILocation(line: 2277, column: 61, scope: !7817)
!7824 = !DILocalVariable(name: "fmt", scope: !7817, file: !69, line: 2279, type: !7825)
!7825 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4752, size: 64, align: 64)
!7826 = !DILocation(line: 2279, column: 20, scope: !7817)
!7827 = !DILocalVariable(name: "dev", scope: !7817, file: !69, line: 2280, type: !1076)
!7828 = !DILocation(line: 2280, column: 11, scope: !7817)
!7829 = !DILocalVariable(name: "opts", scope: !7817, file: !69, line: 2281, type: !1059)
!7830 = !DILocation(line: 2281, column: 19, scope: !7817)
!7831 = !DILocalVariable(name: "ret", scope: !7817, file: !69, line: 2282, type: !969)
!7832 = !DILocation(line: 2282, column: 9, scope: !7817)
!7833 = !DILocalVariable(name: "error_level", scope: !7817, file: !69, line: 2283, type: !969)
!7834 = !DILocation(line: 2283, column: 9, scope: !7817)
!7835 = !DILocation(line: 2283, column: 23, scope: !7817)
!7836 = !DILocation(line: 2285, column: 5, scope: !7817)
!7837 = !DILocation(line: 2287, column: 45, scope: !7838)
!7838 = distinct !DILexicalBlock(scope: !7817, file: !69, line: 2287, column: 9)
!7839 = !DILocation(line: 2287, column: 16, scope: !7838)
!7840 = !DILocation(line: 2287, column: 14, scope: !7838)
!7841 = !DILocation(line: 2287, column: 64, scope: !7838)
!7842 = !DILocation(line: 2287, column: 9, scope: !7817)
!7843 = !DILocation(line: 2288, column: 9, scope: !7838)
!7844 = !DILocation(line: 2290, column: 5, scope: !7817)
!7845 = distinct !{!7845, !7844}
!7846 = !DILocation(line: 2291, column: 42, scope: !7847)
!7847 = distinct !DILexicalBlock(scope: !7817, file: !69, line: 2290, column: 8)
!7848 = !DILocation(line: 2291, column: 15, scope: !7847)
!7849 = !DILocation(line: 2291, column: 13, scope: !7847)
!7850 = !DILocation(line: 2292, column: 13, scope: !7851)
!7851 = distinct !DILexicalBlock(scope: !7847, file: !69, line: 2292, column: 13)
!7852 = !DILocation(line: 2292, column: 13, scope: !7847)
!7853 = !DILocation(line: 2293, column: 25, scope: !7854)
!7854 = distinct !DILexicalBlock(scope: !7855, file: !69, line: 2293, column: 17)
!7855 = distinct !DILexicalBlock(scope: !7851, file: !69, line: 2292, column: 18)
!7856 = !DILocation(line: 2293, column: 30, scope: !7854)
!7857 = !DILocation(line: 2293, column: 18, scope: !7854)
!7858 = !DILocation(line: 2293, column: 17, scope: !7855)
!7859 = !DILocation(line: 2294, column: 17, scope: !7854)
!7860 = !DILocation(line: 2295, column: 17, scope: !7861)
!7861 = distinct !DILexicalBlock(scope: !7855, file: !69, line: 2295, column: 17)
!7862 = !DILocation(line: 2295, column: 21, scope: !7861)
!7863 = !DILocation(line: 2295, column: 39, scope: !7864)
!7864 = !DILexicalBlockFile(scope: !7861, file: !69, discriminator: 1)
!7865 = !DILocation(line: 2295, column: 44, scope: !7864)
!7866 = !DILocation(line: 2295, column: 49, scope: !7864)
!7867 = !DILocation(line: 2295, column: 25, scope: !7864)
!7868 = !DILocation(line: 2295, column: 17, scope: !7864)
!7869 = !DILocation(line: 2296, column: 17, scope: !7861)
!7870 = !DILocation(line: 2297, column: 34, scope: !7855)
!7871 = !DILocation(line: 2297, column: 39, scope: !7855)
!7872 = !DILocation(line: 2297, column: 13, scope: !7855)
!7873 = !DILocation(line: 2298, column: 9, scope: !7855)
!7874 = !DILocation(line: 2299, column: 5, scope: !7847)
!7875 = !DILocation(line: 2299, column: 14, scope: !7876)
!7876 = !DILexicalBlockFile(scope: !7817, file: !69, discriminator: 1)
!7877 = !DILocation(line: 2299, column: 5, scope: !7876)
!7878 = !DILocation(line: 2300, column: 5, scope: !7817)
!7879 = distinct !{!7879, !7878}
!7880 = !DILocation(line: 2301, column: 42, scope: !7881)
!7881 = distinct !DILexicalBlock(scope: !7817, file: !69, line: 2300, column: 8)
!7882 = !DILocation(line: 2301, column: 15, scope: !7881)
!7883 = !DILocation(line: 2301, column: 13, scope: !7881)
!7884 = !DILocation(line: 2302, column: 13, scope: !7885)
!7885 = distinct !DILexicalBlock(scope: !7881, file: !69, line: 2302, column: 13)
!7886 = !DILocation(line: 2302, column: 13, scope: !7881)
!7887 = !DILocation(line: 2303, column: 17, scope: !7888)
!7888 = distinct !DILexicalBlock(scope: !7889, file: !69, line: 2303, column: 17)
!7889 = distinct !DILexicalBlock(scope: !7885, file: !69, line: 2302, column: 18)
!7890 = !DILocation(line: 2303, column: 21, scope: !7888)
!7891 = !DILocation(line: 2303, column: 39, scope: !7892)
!7892 = !DILexicalBlockFile(scope: !7888, file: !69, discriminator: 1)
!7893 = !DILocation(line: 2303, column: 44, scope: !7892)
!7894 = !DILocation(line: 2303, column: 49, scope: !7892)
!7895 = !DILocation(line: 2303, column: 25, scope: !7892)
!7896 = !DILocation(line: 2303, column: 17, scope: !7892)
!7897 = !DILocation(line: 2304, column: 17, scope: !7888)
!7898 = !DILocation(line: 2305, column: 34, scope: !7889)
!7899 = !DILocation(line: 2305, column: 39, scope: !7889)
!7900 = !DILocation(line: 2305, column: 13, scope: !7889)
!7901 = !DILocation(line: 2306, column: 9, scope: !7889)
!7902 = !DILocation(line: 2307, column: 5, scope: !7881)
!7903 = !DILocation(line: 2307, column: 14, scope: !7876)
!7904 = !DILocation(line: 2307, column: 5, scope: !7876)
!7905 = !DILocation(line: 2307, column: 5, scope: !7906)
!7906 = !DILexicalBlockFile(scope: !7881, file: !69, discriminator: 2)
!7907 = !DILocation(line: 2309, column: 5, scope: !7817)
!7908 = !DILocation(line: 2310, column: 13, scope: !7817)
!7909 = !DILocation(line: 2310, column: 5, scope: !7817)
!7910 = !DILocation(line: 2311, column: 22, scope: !7817)
!7911 = !DILocation(line: 2311, column: 5, scope: !7817)
!7912 = !DILocation(line: 2312, column: 12, scope: !7817)
!7913 = !DILocation(line: 2312, column: 5, scope: !7817)
!7914 = distinct !DISubprogram(name: "show_sinks_sources_parse_arg", scope: !69, file: !69, line: 2255, type: !7915, isLocal: true, isDefinition: true, scopeLine: 2256, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7915 = !DISubroutineType(types: !7916)
!7916 = !{!969, !953, !1334, !1058}
!7917 = !DILocalVariable(name: "arg", arg: 1, scope: !7914, file: !69, line: 2255, type: !953)
!7918 = !DILocation(line: 2255, column: 53, scope: !7914)
!7919 = !DILocalVariable(name: "dev", arg: 2, scope: !7914, file: !69, line: 2255, type: !1334)
!7920 = !DILocation(line: 2255, column: 65, scope: !7914)
!7921 = !DILocalVariable(name: "opts", arg: 3, scope: !7914, file: !69, line: 2255, type: !1058)
!7922 = !DILocation(line: 2255, column: 85, scope: !7914)
!7923 = !DILocalVariable(name: "ret", scope: !7914, file: !69, line: 2257, type: !969)
!7924 = !DILocation(line: 2257, column: 9, scope: !7914)
!7925 = !DILocation(line: 2258, column: 9, scope: !7926)
!7926 = distinct !DILexicalBlock(scope: !7914, file: !69, line: 2258, column: 9)
!7927 = !DILocation(line: 2258, column: 9, scope: !7914)
!7928 = !DILocalVariable(name: "opts_str", scope: !7929, file: !69, line: 2259, type: !1076)
!7929 = distinct !DILexicalBlock(scope: !7926, file: !69, line: 2258, column: 14)
!7930 = !DILocation(line: 2259, column: 15, scope: !7929)
!7931 = !DILocation(line: 2260, column: 9, scope: !7929)
!7932 = distinct !{!7932, !7931}
!7933 = !DILocation(line: 2260, column: 20, scope: !7934)
!7934 = !DILexicalBlockFile(scope: !7935, file: !69, discriminator: 1)
!7935 = distinct !DILexicalBlock(scope: !7936, file: !69, line: 2260, column: 18)
!7936 = distinct !DILexicalBlock(scope: !7929, file: !69, line: 2260, column: 12)
!7937 = !DILocation(line: 2260, column: 24, scope: !7934)
!7938 = !DILocation(line: 2260, column: 27, scope: !7939)
!7939 = !DILexicalBlockFile(scope: !7935, file: !69, discriminator: 2)
!7940 = !DILocation(line: 2260, column: 18, scope: !7939)
!7941 = !DILocation(line: 2260, column: 36, scope: !7942)
!7942 = !DILexicalBlockFile(scope: !7943, file: !69, discriminator: 3)
!7943 = distinct !DILexicalBlock(scope: !7935, file: !69, line: 2260, column: 34)
!7944 = !DILocation(line: 2260, column: 91, scope: !7945)
!7945 = !DILexicalBlockFile(scope: !7942, file: !69, discriminator: 5)
!7946 = !DILocation(line: 2260, column: 91, scope: !7942)
!7947 = !DILocation(line: 2260, column: 102, scope: !7948)
!7948 = !DILexicalBlockFile(scope: !7936, file: !69, discriminator: 4)
!7949 = !DILocation(line: 2261, column: 26, scope: !7929)
!7950 = !DILocation(line: 2261, column: 16, scope: !7929)
!7951 = !DILocation(line: 2261, column: 10, scope: !7929)
!7952 = !DILocation(line: 2261, column: 14, scope: !7929)
!7953 = !DILocation(line: 2262, column: 15, scope: !7954)
!7954 = distinct !DILexicalBlock(scope: !7929, file: !69, line: 2262, column: 13)
!7955 = !DILocation(line: 2262, column: 14, scope: !7954)
!7956 = !DILocation(line: 2262, column: 13, scope: !7929)
!7957 = !DILocation(line: 2263, column: 13, scope: !7954)
!7958 = !DILocation(line: 2264, column: 33, scope: !7959)
!7959 = distinct !DILexicalBlock(scope: !7929, file: !69, line: 2264, column: 13)
!7960 = !DILocation(line: 2264, column: 32, scope: !7959)
!7961 = !DILocation(line: 2264, column: 25, scope: !7959)
!7962 = !DILocation(line: 2264, column: 23, scope: !7959)
!7963 = !DILocation(line: 2264, column: 13, scope: !7929)
!7964 = !DILocation(line: 2265, column: 23, scope: !7965)
!7965 = distinct !DILexicalBlock(scope: !7959, file: !69, line: 2264, column: 45)
!7966 = !DILocation(line: 2265, column: 27, scope: !7965)
!7967 = !DILocation(line: 2266, column: 17, scope: !7968)
!7968 = distinct !DILexicalBlock(scope: !7965, file: !69, line: 2266, column: 17)
!7969 = !DILocation(line: 2266, column: 29, scope: !7968)
!7970 = !DILocation(line: 2266, column: 61, scope: !7971)
!7971 = !DILexicalBlockFile(scope: !7968, file: !69, discriminator: 1)
!7972 = !DILocation(line: 2266, column: 67, scope: !7971)
!7973 = !DILocation(line: 2266, column: 40, scope: !7971)
!7974 = !DILocation(line: 2266, column: 38, scope: !7971)
!7975 = !DILocation(line: 2266, column: 91, scope: !7971)
!7976 = !DILocation(line: 2266, column: 17, scope: !7971)
!7977 = !DILocation(line: 2267, column: 26, scope: !7978)
!7978 = distinct !DILexicalBlock(scope: !7968, file: !69, line: 2266, column: 97)
!7979 = !DILocation(line: 2267, column: 17, scope: !7978)
!7980 = !DILocation(line: 2268, column: 24, scope: !7978)
!7981 = !DILocation(line: 2268, column: 17, scope: !7978)
!7982 = !DILocation(line: 2270, column: 9, scope: !7965)
!7983 = !DILocation(line: 2271, column: 5, scope: !7929)
!7984 = !DILocation(line: 2272, column: 9, scope: !7926)
!7985 = !DILocation(line: 2274, column: 5, scope: !7914)
!7986 = !DILocation(line: 2275, column: 1, scope: !7914)
!7987 = distinct !DISubprogram(name: "print_device_sources", scope: !69, file: !69, line: 2195, type: !7988, isLocal: true, isDefinition: true, scopeLine: 2196, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!7988 = !DISubroutineType(types: !7989)
!7989 = !{!969, !7825, !1059}
!7990 = !DILocalVariable(name: "fmt", arg: 1, scope: !7987, file: !69, line: 2195, type: !7825)
!7991 = !DILocation(line: 2195, column: 48, scope: !7987)
!7992 = !DILocalVariable(name: "opts", arg: 2, scope: !7987, file: !69, line: 2195, type: !1059)
!7993 = !DILocation(line: 2195, column: 67, scope: !7987)
!7994 = !DILocalVariable(name: "ret", scope: !7987, file: !69, line: 2197, type: !969)
!7995 = !DILocation(line: 2197, column: 9, scope: !7987)
!7996 = !DILocalVariable(name: "i", scope: !7987, file: !69, line: 2197, type: !969)
!7997 = !DILocation(line: 2197, column: 14, scope: !7987)
!7998 = !DILocalVariable(name: "device_list", scope: !7987, file: !69, line: 2198, type: !7999)
!7999 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8000, size: 64, align: 64)
!8000 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVDeviceInfoList", file: !4865, line: 464, baseType: !4864)
!8001 = !DILocation(line: 2198, column: 23, scope: !7987)
!8002 = !DILocation(line: 2200, column: 10, scope: !8003)
!8003 = distinct !DILexicalBlock(scope: !7987, file: !69, line: 2200, column: 9)
!8004 = !DILocation(line: 2200, column: 14, scope: !8003)
!8005 = !DILocation(line: 2200, column: 18, scope: !8006)
!8006 = !DILexicalBlockFile(scope: !8003, file: !69, discriminator: 1)
!8007 = !DILocation(line: 2200, column: 23, scope: !8006)
!8008 = !DILocation(line: 2200, column: 34, scope: !8006)
!8009 = !DILocation(line: 2200, column: 41, scope: !8010)
!8010 = !DILexicalBlockFile(scope: !8003, file: !69, discriminator: 2)
!8011 = !DILocation(line: 2200, column: 46, scope: !8010)
!8012 = !DILocation(line: 2200, column: 58, scope: !8010)
!8013 = !DILocation(line: 2200, column: 68, scope: !8010)
!8014 = !DILocation(line: 2200, column: 109, scope: !8010)
!8015 = !DILocation(line: 2200, column: 114, scope: !8016)
!8016 = !DILexicalBlockFile(scope: !8003, file: !69, discriminator: 3)
!8017 = !DILocation(line: 2200, column: 119, scope: !8016)
!8018 = !DILocation(line: 2200, column: 131, scope: !8016)
!8019 = !DILocation(line: 2200, column: 141, scope: !8016)
!8020 = !DILocation(line: 2200, column: 182, scope: !8016)
!8021 = !DILocation(line: 2200, column: 187, scope: !8022)
!8022 = !DILexicalBlockFile(scope: !8003, file: !69, discriminator: 4)
!8023 = !DILocation(line: 2200, column: 192, scope: !8022)
!8024 = !DILocation(line: 2200, column: 204, scope: !8022)
!8025 = !DILocation(line: 2200, column: 214, scope: !8022)
!8026 = !DILocation(line: 2200, column: 9, scope: !8022)
!8027 = !DILocation(line: 2201, column: 9, scope: !8003)
!8028 = !DILocation(line: 2203, column: 47, scope: !7987)
!8029 = !DILocation(line: 2203, column: 52, scope: !7987)
!8030 = !DILocation(line: 2203, column: 5, scope: !7987)
!8031 = !DILocation(line: 2204, column: 10, scope: !8032)
!8032 = distinct !DILexicalBlock(scope: !7987, file: !69, line: 2204, column: 9)
!8033 = !DILocation(line: 2204, column: 15, scope: !8032)
!8034 = !DILocation(line: 2204, column: 9, scope: !7987)
!8035 = !DILocation(line: 2205, column: 13, scope: !8036)
!8036 = distinct !DILexicalBlock(scope: !8032, file: !69, line: 2204, column: 32)
!8037 = !DILocation(line: 2206, column: 9, scope: !8036)
!8038 = !DILocation(line: 2207, column: 9, scope: !8036)
!8039 = !DILocation(line: 2210, column: 44, scope: !8040)
!8040 = distinct !DILexicalBlock(scope: !7987, file: !69, line: 2210, column: 9)
!8041 = !DILocation(line: 2210, column: 54, scope: !8040)
!8042 = !DILocation(line: 2210, column: 16, scope: !8040)
!8043 = !DILocation(line: 2210, column: 14, scope: !8040)
!8044 = !DILocation(line: 2210, column: 75, scope: !8040)
!8045 = !DILocation(line: 2210, column: 9, scope: !7987)
!8046 = !DILocation(line: 2211, column: 9, scope: !8047)
!8047 = distinct !DILexicalBlock(scope: !8040, file: !69, line: 2210, column: 80)
!8048 = !DILocation(line: 2212, column: 9, scope: !8047)
!8049 = !DILocation(line: 2215, column: 12, scope: !8050)
!8050 = distinct !DILexicalBlock(scope: !7987, file: !69, line: 2215, column: 5)
!8051 = !DILocation(line: 2215, column: 10, scope: !8050)
!8052 = !DILocation(line: 2215, column: 17, scope: !8053)
!8053 = !DILexicalBlockFile(scope: !8054, file: !69, discriminator: 1)
!8054 = distinct !DILexicalBlock(scope: !8050, file: !69, line: 2215, column: 5)
!8055 = !DILocation(line: 2215, column: 21, scope: !8053)
!8056 = !DILocation(line: 2215, column: 34, scope: !8053)
!8057 = !DILocation(line: 2215, column: 19, scope: !8053)
!8058 = !DILocation(line: 2215, column: 5, scope: !8053)
!8059 = !DILocation(line: 2216, column: 32, scope: !8060)
!8060 = distinct !DILexicalBlock(scope: !8054, file: !69, line: 2215, column: 51)
!8061 = !DILocation(line: 2216, column: 45, scope: !8060)
!8062 = !DILocation(line: 2216, column: 63, scope: !8060)
!8063 = !DILocation(line: 2216, column: 60, scope: !8060)
!8064 = !DILocation(line: 2217, column: 37, scope: !8060)
!8065 = !DILocation(line: 2217, column: 16, scope: !8060)
!8066 = !DILocation(line: 2217, column: 29, scope: !8060)
!8067 = !DILocation(line: 2217, column: 41, scope: !8060)
!8068 = !DILocation(line: 2217, column: 75, scope: !8060)
!8069 = !DILocation(line: 2217, column: 54, scope: !8060)
!8070 = !DILocation(line: 2217, column: 67, scope: !8060)
!8071 = !DILocation(line: 2217, column: 79, scope: !8060)
!8072 = !DILocation(line: 2216, column: 9, scope: !8060)
!8073 = !DILocation(line: 2218, column: 5, scope: !8060)
!8074 = !DILocation(line: 2215, column: 47, scope: !8075)
!8075 = !DILexicalBlockFile(scope: !8054, file: !69, discriminator: 2)
!8076 = !DILocation(line: 2215, column: 5, scope: !8075)
!8077 = distinct !{!8077, !8078}
!8078 = !DILocation(line: 2215, column: 5, scope: !7987)
!8079 = !DILocation(line: 2218, column: 5, scope: !8080)
!8080 = !DILexicalBlockFile(scope: !8050, file: !69, discriminator: 1)
!8081 = !DILocation(line: 2221, column: 5, scope: !7987)
!8082 = !DILocation(line: 2222, column: 12, scope: !7987)
!8083 = !DILocation(line: 2222, column: 5, scope: !7987)
!8084 = !DILocation(line: 2223, column: 1, scope: !7987)
!8085 = distinct !DISubprogram(name: "show_sinks", scope: !69, file: !69, line: 2315, type: !1343, isLocal: false, isDefinition: true, scopeLine: 2316, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!8086 = !DILocalVariable(name: "optctx", arg: 1, scope: !8085, file: !69, line: 2315, type: !960)
!8087 = !DILocation(line: 2315, column: 22, scope: !8085)
!8088 = !DILocalVariable(name: "opt", arg: 2, scope: !8085, file: !69, line: 2315, type: !953)
!8089 = !DILocation(line: 2315, column: 42, scope: !8085)
!8090 = !DILocalVariable(name: "arg", arg: 3, scope: !8085, file: !69, line: 2315, type: !953)
!8091 = !DILocation(line: 2315, column: 59, scope: !8085)
!8092 = !DILocalVariable(name: "fmt", scope: !8085, file: !69, line: 2317, type: !8093)
!8093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5752, size: 64, align: 64)
!8094 = !DILocation(line: 2317, column: 21, scope: !8085)
!8095 = !DILocalVariable(name: "dev", scope: !8085, file: !69, line: 2318, type: !1076)
!8096 = !DILocation(line: 2318, column: 11, scope: !8085)
!8097 = !DILocalVariable(name: "opts", scope: !8085, file: !69, line: 2319, type: !1059)
!8098 = !DILocation(line: 2319, column: 19, scope: !8085)
!8099 = !DILocalVariable(name: "ret", scope: !8085, file: !69, line: 2320, type: !969)
!8100 = !DILocation(line: 2320, column: 9, scope: !8085)
!8101 = !DILocalVariable(name: "error_level", scope: !8085, file: !69, line: 2321, type: !969)
!8102 = !DILocation(line: 2321, column: 9, scope: !8085)
!8103 = !DILocation(line: 2321, column: 23, scope: !8085)
!8104 = !DILocation(line: 2323, column: 5, scope: !8085)
!8105 = !DILocation(line: 2325, column: 45, scope: !8106)
!8106 = distinct !DILexicalBlock(scope: !8085, file: !69, line: 2325, column: 9)
!8107 = !DILocation(line: 2325, column: 16, scope: !8106)
!8108 = !DILocation(line: 2325, column: 14, scope: !8106)
!8109 = !DILocation(line: 2325, column: 64, scope: !8106)
!8110 = !DILocation(line: 2325, column: 9, scope: !8085)
!8111 = !DILocation(line: 2326, column: 9, scope: !8106)
!8112 = !DILocation(line: 2328, column: 5, scope: !8085)
!8113 = distinct !{!8113, !8112}
!8114 = !DILocation(line: 2329, column: 43, scope: !8115)
!8115 = distinct !DILexicalBlock(scope: !8085, file: !69, line: 2328, column: 8)
!8116 = !DILocation(line: 2329, column: 15, scope: !8115)
!8117 = !DILocation(line: 2329, column: 13, scope: !8115)
!8118 = !DILocation(line: 2330, column: 13, scope: !8119)
!8119 = distinct !DILexicalBlock(scope: !8115, file: !69, line: 2330, column: 13)
!8120 = !DILocation(line: 2330, column: 13, scope: !8115)
!8121 = !DILocation(line: 2331, column: 17, scope: !8122)
!8122 = distinct !DILexicalBlock(scope: !8123, file: !69, line: 2331, column: 17)
!8123 = distinct !DILexicalBlock(scope: !8119, file: !69, line: 2330, column: 18)
!8124 = !DILocation(line: 2331, column: 21, scope: !8122)
!8125 = !DILocation(line: 2331, column: 39, scope: !8126)
!8126 = !DILexicalBlockFile(scope: !8122, file: !69, discriminator: 1)
!8127 = !DILocation(line: 2331, column: 44, scope: !8126)
!8128 = !DILocation(line: 2331, column: 49, scope: !8126)
!8129 = !DILocation(line: 2331, column: 25, scope: !8126)
!8130 = !DILocation(line: 2331, column: 17, scope: !8126)
!8131 = !DILocation(line: 2332, column: 17, scope: !8122)
!8132 = !DILocation(line: 2333, column: 32, scope: !8123)
!8133 = !DILocation(line: 2333, column: 37, scope: !8123)
!8134 = !DILocation(line: 2333, column: 13, scope: !8123)
!8135 = !DILocation(line: 2334, column: 9, scope: !8123)
!8136 = !DILocation(line: 2335, column: 5, scope: !8115)
!8137 = !DILocation(line: 2335, column: 14, scope: !8138)
!8138 = !DILexicalBlockFile(scope: !8085, file: !69, discriminator: 1)
!8139 = !DILocation(line: 2335, column: 5, scope: !8138)
!8140 = !DILocation(line: 2336, column: 5, scope: !8085)
!8141 = distinct !{!8141, !8140}
!8142 = !DILocation(line: 2337, column: 43, scope: !8143)
!8143 = distinct !DILexicalBlock(scope: !8085, file: !69, line: 2336, column: 8)
!8144 = !DILocation(line: 2337, column: 15, scope: !8143)
!8145 = !DILocation(line: 2337, column: 13, scope: !8143)
!8146 = !DILocation(line: 2338, column: 13, scope: !8147)
!8147 = distinct !DILexicalBlock(scope: !8143, file: !69, line: 2338, column: 13)
!8148 = !DILocation(line: 2338, column: 13, scope: !8143)
!8149 = !DILocation(line: 2339, column: 17, scope: !8150)
!8150 = distinct !DILexicalBlock(scope: !8151, file: !69, line: 2339, column: 17)
!8151 = distinct !DILexicalBlock(scope: !8147, file: !69, line: 2338, column: 18)
!8152 = !DILocation(line: 2339, column: 21, scope: !8150)
!8153 = !DILocation(line: 2339, column: 39, scope: !8154)
!8154 = !DILexicalBlockFile(scope: !8150, file: !69, discriminator: 1)
!8155 = !DILocation(line: 2339, column: 44, scope: !8154)
!8156 = !DILocation(line: 2339, column: 49, scope: !8154)
!8157 = !DILocation(line: 2339, column: 25, scope: !8154)
!8158 = !DILocation(line: 2339, column: 17, scope: !8154)
!8159 = !DILocation(line: 2340, column: 17, scope: !8150)
!8160 = !DILocation(line: 2341, column: 32, scope: !8151)
!8161 = !DILocation(line: 2341, column: 37, scope: !8151)
!8162 = !DILocation(line: 2341, column: 13, scope: !8151)
!8163 = !DILocation(line: 2342, column: 9, scope: !8151)
!8164 = !DILocation(line: 2343, column: 5, scope: !8143)
!8165 = !DILocation(line: 2343, column: 14, scope: !8138)
!8166 = !DILocation(line: 2343, column: 5, scope: !8138)
!8167 = !DILocation(line: 2343, column: 5, scope: !8168)
!8168 = !DILexicalBlockFile(scope: !8143, file: !69, discriminator: 2)
!8169 = !DILocation(line: 2345, column: 5, scope: !8085)
!8170 = !DILocation(line: 2346, column: 13, scope: !8085)
!8171 = !DILocation(line: 2346, column: 5, scope: !8085)
!8172 = !DILocation(line: 2347, column: 22, scope: !8085)
!8173 = !DILocation(line: 2347, column: 5, scope: !8085)
!8174 = !DILocation(line: 2348, column: 12, scope: !8085)
!8175 = !DILocation(line: 2348, column: 5, scope: !8085)
!8176 = distinct !DISubprogram(name: "print_device_sinks", scope: !69, file: !69, line: 2225, type: !8177, isLocal: true, isDefinition: true, scopeLine: 2226, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!8177 = !DISubroutineType(types: !8178)
!8178 = !{!969, !8093, !1059}
!8179 = !DILocalVariable(name: "fmt", arg: 1, scope: !8176, file: !69, line: 2225, type: !8093)
!8180 = !DILocation(line: 2225, column: 47, scope: !8176)
!8181 = !DILocalVariable(name: "opts", arg: 2, scope: !8176, file: !69, line: 2225, type: !1059)
!8182 = !DILocation(line: 2225, column: 66, scope: !8176)
!8183 = !DILocalVariable(name: "ret", scope: !8176, file: !69, line: 2227, type: !969)
!8184 = !DILocation(line: 2227, column: 9, scope: !8176)
!8185 = !DILocalVariable(name: "i", scope: !8176, file: !69, line: 2227, type: !969)
!8186 = !DILocation(line: 2227, column: 14, scope: !8176)
!8187 = !DILocalVariable(name: "device_list", scope: !8176, file: !69, line: 2228, type: !7999)
!8188 = !DILocation(line: 2228, column: 23, scope: !8176)
!8189 = !DILocation(line: 2230, column: 10, scope: !8190)
!8190 = distinct !DILexicalBlock(scope: !8176, file: !69, line: 2230, column: 9)
!8191 = !DILocation(line: 2230, column: 14, scope: !8190)
!8192 = !DILocation(line: 2230, column: 18, scope: !8193)
!8193 = !DILexicalBlockFile(scope: !8190, file: !69, discriminator: 1)
!8194 = !DILocation(line: 2230, column: 23, scope: !8193)
!8195 = !DILocation(line: 2230, column: 34, scope: !8193)
!8196 = !DILocation(line: 2230, column: 41, scope: !8197)
!8197 = !DILexicalBlockFile(scope: !8190, file: !69, discriminator: 2)
!8198 = !DILocation(line: 2230, column: 46, scope: !8197)
!8199 = !DILocation(line: 2230, column: 58, scope: !8197)
!8200 = !DILocation(line: 2230, column: 68, scope: !8197)
!8201 = !DILocation(line: 2230, column: 110, scope: !8197)
!8202 = !DILocation(line: 2230, column: 115, scope: !8203)
!8203 = !DILexicalBlockFile(scope: !8190, file: !69, discriminator: 3)
!8204 = !DILocation(line: 2230, column: 120, scope: !8203)
!8205 = !DILocation(line: 2230, column: 132, scope: !8203)
!8206 = !DILocation(line: 2230, column: 142, scope: !8203)
!8207 = !DILocation(line: 2230, column: 184, scope: !8203)
!8208 = !DILocation(line: 2230, column: 189, scope: !8209)
!8209 = !DILexicalBlockFile(scope: !8190, file: !69, discriminator: 4)
!8210 = !DILocation(line: 2230, column: 194, scope: !8209)
!8211 = !DILocation(line: 2230, column: 206, scope: !8209)
!8212 = !DILocation(line: 2230, column: 216, scope: !8209)
!8213 = !DILocation(line: 2230, column: 9, scope: !8209)
!8214 = !DILocation(line: 2231, column: 9, scope: !8190)
!8215 = !DILocation(line: 2233, column: 45, scope: !8176)
!8216 = !DILocation(line: 2233, column: 50, scope: !8176)
!8217 = !DILocation(line: 2233, column: 5, scope: !8176)
!8218 = !DILocation(line: 2234, column: 10, scope: !8219)
!8219 = distinct !DILexicalBlock(scope: !8176, file: !69, line: 2234, column: 9)
!8220 = !DILocation(line: 2234, column: 15, scope: !8219)
!8221 = !DILocation(line: 2234, column: 9, scope: !8176)
!8222 = !DILocation(line: 2235, column: 13, scope: !8223)
!8223 = distinct !DILexicalBlock(scope: !8219, file: !69, line: 2234, column: 32)
!8224 = !DILocation(line: 2236, column: 9, scope: !8223)
!8225 = !DILocation(line: 2237, column: 9, scope: !8223)
!8226 = !DILocation(line: 2240, column: 43, scope: !8227)
!8227 = distinct !DILexicalBlock(scope: !8176, file: !69, line: 2240, column: 9)
!8228 = !DILocation(line: 2240, column: 53, scope: !8227)
!8229 = !DILocation(line: 2240, column: 16, scope: !8227)
!8230 = !DILocation(line: 2240, column: 14, scope: !8227)
!8231 = !DILocation(line: 2240, column: 74, scope: !8227)
!8232 = !DILocation(line: 2240, column: 9, scope: !8176)
!8233 = !DILocation(line: 2241, column: 9, scope: !8234)
!8234 = distinct !DILexicalBlock(scope: !8227, file: !69, line: 2240, column: 79)
!8235 = !DILocation(line: 2242, column: 9, scope: !8234)
!8236 = !DILocation(line: 2245, column: 12, scope: !8237)
!8237 = distinct !DILexicalBlock(scope: !8176, file: !69, line: 2245, column: 5)
!8238 = !DILocation(line: 2245, column: 10, scope: !8237)
!8239 = !DILocation(line: 2245, column: 17, scope: !8240)
!8240 = !DILexicalBlockFile(scope: !8241, file: !69, discriminator: 1)
!8241 = distinct !DILexicalBlock(scope: !8237, file: !69, line: 2245, column: 5)
!8242 = !DILocation(line: 2245, column: 21, scope: !8240)
!8243 = !DILocation(line: 2245, column: 34, scope: !8240)
!8244 = !DILocation(line: 2245, column: 19, scope: !8240)
!8245 = !DILocation(line: 2245, column: 5, scope: !8240)
!8246 = !DILocation(line: 2246, column: 32, scope: !8247)
!8247 = distinct !DILexicalBlock(scope: !8241, file: !69, line: 2245, column: 51)
!8248 = !DILocation(line: 2246, column: 45, scope: !8247)
!8249 = !DILocation(line: 2246, column: 63, scope: !8247)
!8250 = !DILocation(line: 2246, column: 60, scope: !8247)
!8251 = !DILocation(line: 2247, column: 37, scope: !8247)
!8252 = !DILocation(line: 2247, column: 16, scope: !8247)
!8253 = !DILocation(line: 2247, column: 29, scope: !8247)
!8254 = !DILocation(line: 2247, column: 41, scope: !8247)
!8255 = !DILocation(line: 2247, column: 75, scope: !8247)
!8256 = !DILocation(line: 2247, column: 54, scope: !8247)
!8257 = !DILocation(line: 2247, column: 67, scope: !8247)
!8258 = !DILocation(line: 2247, column: 79, scope: !8247)
!8259 = !DILocation(line: 2246, column: 9, scope: !8247)
!8260 = !DILocation(line: 2248, column: 5, scope: !8247)
!8261 = !DILocation(line: 2245, column: 47, scope: !8262)
!8262 = !DILexicalBlockFile(scope: !8241, file: !69, discriminator: 2)
!8263 = !DILocation(line: 2245, column: 5, scope: !8262)
!8264 = distinct !{!8264, !8265}
!8265 = !DILocation(line: 2245, column: 5, scope: !8176)
!8266 = !DILocation(line: 2248, column: 5, scope: !8267)
!8267 = !DILexicalBlockFile(scope: !8237, file: !69, discriminator: 1)
!8268 = !DILocation(line: 2251, column: 5, scope: !8176)
!8269 = !DILocation(line: 2252, column: 12, scope: !8176)
!8270 = !DILocation(line: 2252, column: 5, scope: !8176)
!8271 = !DILocation(line: 2253, column: 1, scope: !8176)
!8272 = distinct !DISubprogram(name: "av_make_error_string", scope: !8273, file: !8273, line: 109, type: !8274, isLocal: true, isDefinition: true, scopeLine: 110, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!8273 = !DIFile(filename: "./libavutil/error.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!8274 = !DISubroutineType(types: !8275)
!8275 = !{!1076, !1076, !1264, !969}
!8276 = !DILocalVariable(name: "errbuf", arg: 1, scope: !8272, file: !8273, line: 109, type: !1076)
!8277 = !DILocation(line: 109, column: 48, scope: !8272)
!8278 = !DILocalVariable(name: "errbuf_size", arg: 2, scope: !8272, file: !8273, line: 109, type: !1264)
!8279 = !DILocation(line: 109, column: 63, scope: !8272)
!8280 = !DILocalVariable(name: "errnum", arg: 3, scope: !8272, file: !8273, line: 109, type: !969)
!8281 = !DILocation(line: 109, column: 80, scope: !8272)
!8282 = !DILocation(line: 111, column: 17, scope: !8272)
!8283 = !DILocation(line: 111, column: 25, scope: !8272)
!8284 = !DILocation(line: 111, column: 33, scope: !8272)
!8285 = !DILocation(line: 111, column: 5, scope: !8272)
!8286 = !DILocation(line: 112, column: 12, scope: !8272)
!8287 = !DILocation(line: 112, column: 5, scope: !8272)
!8288 = distinct !DISubprogram(name: "expand_filename_template", scope: !69, file: !69, line: 950, type: !8289, isLocal: true, isDefinition: true, scopeLine: 952, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!8289 = !DISubroutineType(types: !8290)
!8290 = !{null, !8291, !953, !2807}
!8291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2823, size: 64, align: 64)
!8292 = !DILocalVariable(name: "bp", arg: 1, scope: !8288, file: !69, line: 950, type: !8291)
!8293 = !DILocation(line: 950, column: 48, scope: !8288)
!8294 = !DILocalVariable(name: "template", arg: 2, scope: !8288, file: !69, line: 950, type: !953)
!8295 = !DILocation(line: 950, column: 64, scope: !8288)
!8296 = !DILocalVariable(name: "tm", arg: 3, scope: !8288, file: !69, line: 951, type: !2807)
!8297 = !DILocation(line: 951, column: 49, scope: !8288)
!8298 = !DILocalVariable(name: "c", scope: !8288, file: !69, line: 953, type: !969)
!8299 = !DILocation(line: 953, column: 9, scope: !8288)
!8300 = !DILocation(line: 955, column: 5, scope: !8288)
!8301 = !DILocation(line: 955, column: 27, scope: !8302)
!8302 = !DILexicalBlockFile(scope: !8288, file: !69, discriminator: 1)
!8303 = !DILocation(line: 955, column: 17, scope: !8302)
!8304 = !DILocation(line: 955, column: 15, scope: !8302)
!8305 = !DILocation(line: 955, column: 5, scope: !8302)
!8306 = !DILocation(line: 956, column: 13, scope: !8307)
!8307 = distinct !DILexicalBlock(scope: !8308, file: !69, line: 956, column: 13)
!8308 = distinct !DILexicalBlock(scope: !8288, file: !69, line: 955, column: 33)
!8309 = !DILocation(line: 956, column: 15, scope: !8307)
!8310 = !DILocation(line: 956, column: 13, scope: !8308)
!8311 = !DILocation(line: 957, column: 33, scope: !8312)
!8312 = distinct !DILexicalBlock(scope: !8313, file: !69, line: 957, column: 17)
!8313 = distinct !DILexicalBlock(scope: !8307, file: !69, line: 956, column: 23)
!8314 = !DILocation(line: 957, column: 23, scope: !8312)
!8315 = !DILocation(line: 957, column: 21, scope: !8312)
!8316 = !DILocation(line: 957, column: 17, scope: !8313)
!8317 = !DILocation(line: 958, column: 17, scope: !8312)
!8318 = !DILocation(line: 959, column: 21, scope: !8313)
!8319 = !DILocation(line: 959, column: 13, scope: !8313)
!8320 = !DILocation(line: 961, column: 28, scope: !8321)
!8321 = distinct !DILexicalBlock(scope: !8313, file: !69, line: 959, column: 24)
!8322 = !DILocation(line: 961, column: 17, scope: !8321)
!8323 = !DILocation(line: 962, column: 17, scope: !8321)
!8324 = !DILocation(line: 964, column: 28, scope: !8321)
!8325 = !DILocation(line: 965, column: 28, scope: !8321)
!8326 = !DILocation(line: 965, column: 32, scope: !8321)
!8327 = !DILocation(line: 965, column: 40, scope: !8321)
!8328 = !DILocation(line: 965, column: 48, scope: !8321)
!8329 = !DILocation(line: 965, column: 52, scope: !8321)
!8330 = !DILocation(line: 965, column: 59, scope: !8321)
!8331 = !DILocation(line: 965, column: 64, scope: !8321)
!8332 = !DILocation(line: 965, column: 68, scope: !8321)
!8333 = !DILocation(line: 966, column: 28, scope: !8321)
!8334 = !DILocation(line: 966, column: 32, scope: !8321)
!8335 = !DILocation(line: 966, column: 41, scope: !8321)
!8336 = !DILocation(line: 966, column: 45, scope: !8321)
!8337 = !DILocation(line: 966, column: 53, scope: !8321)
!8338 = !DILocation(line: 966, column: 57, scope: !8321)
!8339 = !DILocation(line: 964, column: 17, scope: !8321)
!8340 = !DILocation(line: 967, column: 17, scope: !8321)
!8341 = !DILocation(line: 969, column: 33, scope: !8321)
!8342 = !DILocation(line: 969, column: 37, scope: !8321)
!8343 = !DILocation(line: 969, column: 17, scope: !8321)
!8344 = !DILocation(line: 970, column: 17, scope: !8321)
!8345 = !DILocation(line: 972, column: 9, scope: !8313)
!8346 = !DILocation(line: 973, column: 29, scope: !8347)
!8347 = distinct !DILexicalBlock(scope: !8307, file: !69, line: 972, column: 16)
!8348 = !DILocation(line: 973, column: 33, scope: !8347)
!8349 = !DILocation(line: 973, column: 13, scope: !8347)
!8350 = !DILocation(line: 955, column: 5, scope: !8351)
!8351 = !DILexicalBlockFile(scope: !8288, file: !69, discriminator: 2)
!8352 = distinct !{!8352, !8300}
!8353 = !DILocation(line: 976, column: 1, scope: !8288)
!8354 = distinct !DISubprogram(name: "av_x_if_null", scope: !535, file: !535, line: 308, type: !8355, isLocal: true, isDefinition: true, scopeLine: 309, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!8355 = !DISubroutineType(types: !8356)
!8356 = !{!960, !8357, !8357}
!8357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8358, size: 64, align: 64)
!8358 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!8359 = !DILocalVariable(name: "p", arg: 1, scope: !8354, file: !535, line: 308, type: !8357)
!8360 = !DILocation(line: 308, column: 46, scope: !8354)
!8361 = !DILocalVariable(name: "x", arg: 2, scope: !8354, file: !535, line: 308, type: !8357)
!8362 = !DILocation(line: 308, column: 61, scope: !8354)
!8363 = !DILocation(line: 310, column: 31, scope: !8354)
!8364 = !DILocation(line: 310, column: 35, scope: !8365)
!8365 = !DILexicalBlockFile(scope: !8354, file: !535, discriminator: 1)
!8366 = !DILocation(line: 310, column: 31, scope: !8365)
!8367 = !DILocation(line: 310, column: 39, scope: !8368)
!8368 = !DILexicalBlockFile(scope: !8354, file: !535, discriminator: 2)
!8369 = !DILocation(line: 310, column: 31, scope: !8368)
!8370 = !DILocation(line: 310, column: 31, scope: !8371)
!8371 = !DILexicalBlockFile(scope: !8354, file: !535, discriminator: 3)
!8372 = !DILocation(line: 310, column: 20, scope: !8371)
!8373 = !DILocation(line: 310, column: 12, scope: !8371)
!8374 = !DILocation(line: 310, column: 5, scope: !8371)
!8375 = distinct !DISubprogram(name: "av_bprint_is_complete", scope: !2824, file: !2824, line: 185, type: !8376, isLocal: true, isDefinition: true, scopeLine: 186, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!8376 = !DISubroutineType(types: !8377)
!8377 = !{!969, !8378}
!8378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8379, size: 64, align: 64)
!8379 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2823)
!8380 = !DILocalVariable(name: "buf", arg: 1, scope: !8375, file: !2824, line: 185, type: !8378)
!8381 = !DILocation(line: 185, column: 57, scope: !8375)
!8382 = !DILocation(line: 187, column: 12, scope: !8375)
!8383 = !DILocation(line: 187, column: 17, scope: !8375)
!8384 = !DILocation(line: 187, column: 23, scope: !8375)
!8385 = !DILocation(line: 187, column: 28, scope: !8375)
!8386 = !DILocation(line: 187, column: 21, scope: !8375)
!8387 = !DILocation(line: 187, column: 5, scope: !8375)
!8388 = !DILocalVariable(name: "ptr", arg: 1, scope: !1484, file: !69, line: 104, type: !960)
!8389 = !DILocation(line: 104, column: 39, scope: !1484)
!8390 = !DILocalVariable(name: "level", arg: 2, scope: !1484, file: !69, line: 104, type: !969)
!8391 = !DILocation(line: 104, column: 48, scope: !1484)
!8392 = !DILocalVariable(name: "fmt", arg: 3, scope: !1484, file: !69, line: 104, type: !953)
!8393 = !DILocation(line: 104, column: 67, scope: !1484)
!8394 = !DILocalVariable(name: "vl", arg: 4, scope: !1484, file: !69, line: 104, type: !1487)
!8395 = !DILocation(line: 104, column: 80, scope: !1484)
!8396 = !DILocalVariable(name: "vl2", scope: !1484, file: !69, line: 106, type: !8397)
!8397 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !8398, line: 98, baseType: !8399)
!8398 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/5/include/stdarg.h", directory: "/home/ubuntu_1604/Desktop/ffmped_bcmake_outputs/[task]ffprobe_g")
!8399 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !8398, line: 40, baseType: !8400)
!8400 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !1, line: 106, baseType: !8401)
!8401 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1488, size: 192, align: 64, elements: !1397)
!8402 = !DILocation(line: 106, column: 13, scope: !1484)
!8403 = !DILocalVariable(name: "line", scope: !1484, file: !69, line: 107, type: !5606)
!8404 = !DILocation(line: 107, column: 10, scope: !1484)
!8405 = !DILocation(line: 110, column: 4, scope: !1484)
!8406 = !DILocation(line: 111, column: 29, scope: !1484)
!8407 = !DILocation(line: 111, column: 34, scope: !1484)
!8408 = !DILocation(line: 111, column: 41, scope: !1484)
!8409 = !DILocation(line: 111, column: 46, scope: !1484)
!8410 = !DILocation(line: 111, column: 5, scope: !1484)
!8411 = !DILocation(line: 112, column: 24, scope: !1484)
!8412 = !DILocation(line: 112, column: 29, scope: !1484)
!8413 = !DILocation(line: 112, column: 36, scope: !1484)
!8414 = !DILocation(line: 112, column: 41, scope: !1484)
!8415 = !DILocation(line: 112, column: 46, scope: !1484)
!8416 = !DILocation(line: 112, column: 5, scope: !1484)
!8417 = !DILocation(line: 113, column: 4, scope: !1484)
!8418 = !DILocation(line: 114, column: 9, scope: !8419)
!8419 = distinct !DILexicalBlock(scope: !1484, file: !69, line: 114, column: 9)
!8420 = !DILocation(line: 114, column: 30, scope: !8419)
!8421 = !DILocation(line: 114, column: 27, scope: !8419)
!8422 = !DILocation(line: 114, column: 9, scope: !1484)
!8423 = !DILocation(line: 115, column: 15, scope: !8424)
!8424 = distinct !DILexicalBlock(scope: !8419, file: !69, line: 114, column: 37)
!8425 = !DILocation(line: 115, column: 21, scope: !8424)
!8426 = !DILocation(line: 115, column: 9, scope: !8424)
!8427 = !DILocation(line: 116, column: 16, scope: !8424)
!8428 = !DILocation(line: 116, column: 9, scope: !8424)
!8429 = !DILocation(line: 117, column: 5, scope: !8424)
!8430 = !DILocation(line: 118, column: 1, scope: !1484)
!8431 = distinct !DISubprogram(name: "is_device", scope: !69, file: !69, line: 1282, type: !8432, isLocal: true, isDefinition: true, scopeLine: 1283, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!8432 = !DISubroutineType(types: !8433)
!8433 = !{!969, !947}
!8434 = !DILocalVariable(name: "avclass", arg: 1, scope: !8431, file: !69, line: 1282, type: !947)
!8435 = !DILocation(line: 1282, column: 37, scope: !8431)
!8436 = !DILocation(line: 1284, column: 10, scope: !8437)
!8437 = distinct !DILexicalBlock(scope: !8431, file: !69, line: 1284, column: 9)
!8438 = !DILocation(line: 1284, column: 9, scope: !8431)
!8439 = !DILocation(line: 1285, column: 9, scope: !8437)
!8440 = !DILocation(line: 1286, column: 15, scope: !8431)
!8441 = !DILocation(line: 1286, column: 24, scope: !8431)
!8442 = !DILocation(line: 1286, column: 34, scope: !8431)
!8443 = !DILocation(line: 1286, column: 75, scope: !8431)
!8444 = !DILocation(line: 1286, column: 80, scope: !8445)
!8445 = !DILexicalBlockFile(scope: !8431, file: !69, discriminator: 1)
!8446 = !DILocation(line: 1286, column: 89, scope: !8445)
!8447 = !DILocation(line: 1286, column: 99, scope: !8445)
!8448 = !DILocation(line: 1286, column: 140, scope: !8445)
!8449 = !DILocation(line: 1286, column: 145, scope: !8450)
!8450 = !DILexicalBlockFile(scope: !8431, file: !69, discriminator: 2)
!8451 = !DILocation(line: 1286, column: 154, scope: !8450)
!8452 = !DILocation(line: 1286, column: 164, scope: !8450)
!8453 = !DILocation(line: 1286, column: 200, scope: !8450)
!8454 = !DILocation(line: 1286, column: 206, scope: !8455)
!8455 = !DILexicalBlockFile(scope: !8431, file: !69, discriminator: 3)
!8456 = !DILocation(line: 1286, column: 215, scope: !8455)
!8457 = !DILocation(line: 1286, column: 225, scope: !8455)
!8458 = !DILocation(line: 1286, column: 267, scope: !8455)
!8459 = !DILocation(line: 1286, column: 272, scope: !8460)
!8460 = !DILexicalBlockFile(scope: !8431, file: !69, discriminator: 4)
!8461 = !DILocation(line: 1286, column: 281, scope: !8460)
!8462 = !DILocation(line: 1286, column: 291, scope: !8460)
!8463 = !DILocation(line: 1286, column: 333, scope: !8460)
!8464 = !DILocation(line: 1286, column: 338, scope: !8465)
!8465 = !DILexicalBlockFile(scope: !8431, file: !69, discriminator: 5)
!8466 = !DILocation(line: 1286, column: 347, scope: !8465)
!8467 = !DILocation(line: 1286, column: 357, scope: !8465)
!8468 = !DILocation(line: 1286, column: 333, scope: !8465)
!8469 = !DILocation(line: 1286, column: 200, scope: !8470)
!8470 = !DILexicalBlockFile(scope: !8431, file: !69, discriminator: 6)
!8471 = !DILocation(line: 1286, column: 200, scope: !8472)
!8472 = !DILexicalBlockFile(scope: !8431, file: !69, discriminator: 7)
!8473 = !DILocation(line: 1286, column: 5, scope: !8472)
!8474 = !DILocation(line: 1287, column: 1, scope: !8431)
!8475 = distinct !DISubprogram(name: "compare_codec_desc", scope: !69, file: !69, line: 1507, type: !8476, isLocal: true, isDefinition: true, scopeLine: 1508, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!8476 = !DISubroutineType(types: !8477)
!8477 = !{!969, !8357, !8357}
!8478 = !DILocalVariable(name: "a", arg: 1, scope: !8475, file: !69, line: 1507, type: !8357)
!8479 = !DILocation(line: 1507, column: 43, scope: !8475)
!8480 = !DILocalVariable(name: "b", arg: 2, scope: !8475, file: !69, line: 1507, type: !8357)
!8481 = !DILocation(line: 1507, column: 58, scope: !8475)
!8482 = !DILocalVariable(name: "da", scope: !8475, file: !69, line: 1509, type: !8483)
!8483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8484, size: 64, align: 64)
!8484 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5365)
!8485 = !DILocation(line: 1509, column: 38, scope: !8475)
!8486 = !DILocation(line: 1509, column: 43, scope: !8475)
!8487 = !DILocalVariable(name: "db", scope: !8475, file: !69, line: 1510, type: !8483)
!8488 = !DILocation(line: 1510, column: 38, scope: !8475)
!8489 = !DILocation(line: 1510, column: 43, scope: !8475)
!8490 = !DILocation(line: 1512, column: 14, scope: !8475)
!8491 = !DILocation(line: 1512, column: 13, scope: !8475)
!8492 = !DILocation(line: 1512, column: 19, scope: !8475)
!8493 = !DILocation(line: 1512, column: 29, scope: !8475)
!8494 = !DILocation(line: 1512, column: 28, scope: !8475)
!8495 = !DILocation(line: 1512, column: 34, scope: !8475)
!8496 = !DILocation(line: 1512, column: 24, scope: !8475)
!8497 = !DILocation(line: 1512, column: 12, scope: !8475)
!8498 = !DILocation(line: 1512, column: 46, scope: !8499)
!8499 = !DILexicalBlockFile(scope: !8475, file: !69, discriminator: 1)
!8500 = !DILocation(line: 1512, column: 45, scope: !8499)
!8501 = !DILocation(line: 1512, column: 51, scope: !8499)
!8502 = !DILocation(line: 1512, column: 60, scope: !8499)
!8503 = !DILocation(line: 1512, column: 59, scope: !8499)
!8504 = !DILocation(line: 1512, column: 65, scope: !8499)
!8505 = !DILocation(line: 1512, column: 56, scope: !8499)
!8506 = !DILocation(line: 1512, column: 78, scope: !8499)
!8507 = !DILocation(line: 1512, column: 77, scope: !8499)
!8508 = !DILocation(line: 1512, column: 83, scope: !8499)
!8509 = !DILocation(line: 1512, column: 92, scope: !8499)
!8510 = !DILocation(line: 1512, column: 91, scope: !8499)
!8511 = !DILocation(line: 1512, column: 97, scope: !8499)
!8512 = !DILocation(line: 1512, column: 88, scope: !8499)
!8513 = !DILocation(line: 1512, column: 72, scope: !8499)
!8514 = !DILocation(line: 1512, column: 12, scope: !8499)
!8515 = !DILocation(line: 1513, column: 21, scope: !8475)
!8516 = !DILocation(line: 1513, column: 20, scope: !8475)
!8517 = !DILocation(line: 1513, column: 26, scope: !8475)
!8518 = !DILocation(line: 1513, column: 34, scope: !8475)
!8519 = !DILocation(line: 1513, column: 33, scope: !8475)
!8520 = !DILocation(line: 1513, column: 39, scope: !8475)
!8521 = !DILocation(line: 1513, column: 12, scope: !8475)
!8522 = !DILocation(line: 1512, column: 12, scope: !8523)
!8523 = !DILexicalBlockFile(scope: !8475, file: !69, discriminator: 2)
!8524 = !DILocation(line: 1512, column: 12, scope: !8525)
!8525 = !DILexicalBlockFile(scope: !8475, file: !69, discriminator: 3)
!8526 = !DILocation(line: 1512, column: 5, scope: !8525)
!8527 = distinct !DISubprogram(name: "print_codec", scope: !69, file: !69, line: 1385, type: !8528, isLocal: true, isDefinition: true, scopeLine: 1386, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !1345)
!8528 = !DISubroutineType(types: !8529)
!8529 = !{null, !5980}
!8530 = !DILocalVariable(name: "c", arg: 1, scope: !8527, file: !69, line: 1385, type: !5980)
!8531 = !DILocation(line: 1385, column: 40, scope: !8527)
!8532 = !DILocalVariable(name: "encoder", scope: !8527, file: !69, line: 1387, type: !969)
!8533 = !DILocation(line: 1387, column: 9, scope: !8527)
!8534 = !DILocation(line: 1387, column: 39, scope: !8527)
!8535 = !DILocation(line: 1387, column: 19, scope: !8527)
!8536 = !DILocation(line: 1389, column: 29, scope: !8527)
!8537 = !DILocation(line: 1389, column: 62, scope: !8527)
!8538 = !DILocation(line: 1389, column: 65, scope: !8527)
!8539 = !DILocation(line: 1390, column: 12, scope: !8527)
!8540 = !DILocation(line: 1390, column: 15, scope: !8527)
!8541 = !DILocation(line: 1390, column: 27, scope: !8542)
!8542 = !DILexicalBlockFile(scope: !8527, file: !69, discriminator: 1)
!8543 = !DILocation(line: 1390, column: 30, scope: !8542)
!8544 = !DILocation(line: 1390, column: 12, scope: !8542)
!8545 = !DILocation(line: 1390, column: 12, scope: !8546)
!8546 = !DILexicalBlockFile(scope: !8527, file: !69, discriminator: 2)
!8547 = !DILocation(line: 1390, column: 12, scope: !8548)
!8548 = !DILexicalBlockFile(scope: !8527, file: !69, discriminator: 3)
!8549 = !DILocation(line: 1389, column: 5, scope: !8542)
!8550 = !DILocation(line: 1392, column: 5, scope: !8527)
!8551 = !DILocation(line: 1393, column: 9, scope: !8552)
!8552 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1393, column: 9)
!8553 = !DILocation(line: 1393, column: 12, scope: !8552)
!8554 = !DILocation(line: 1393, column: 25, scope: !8552)
!8555 = !DILocation(line: 1393, column: 9, scope: !8527)
!8556 = !DILocation(line: 1394, column: 9, scope: !8552)
!8557 = !DILocation(line: 1395, column: 9, scope: !8558)
!8558 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1395, column: 9)
!8559 = !DILocation(line: 1395, column: 12, scope: !8558)
!8560 = !DILocation(line: 1395, column: 25, scope: !8558)
!8561 = !DILocation(line: 1395, column: 9, scope: !8527)
!8562 = !DILocation(line: 1396, column: 9, scope: !8558)
!8563 = !DILocation(line: 1397, column: 9, scope: !8564)
!8564 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1397, column: 9)
!8565 = !DILocation(line: 1397, column: 12, scope: !8564)
!8566 = !DILocation(line: 1397, column: 25, scope: !8564)
!8567 = !DILocation(line: 1397, column: 9, scope: !8527)
!8568 = !DILocation(line: 1398, column: 9, scope: !8564)
!8569 = !DILocation(line: 1399, column: 9, scope: !8570)
!8570 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1399, column: 9)
!8571 = !DILocation(line: 1399, column: 12, scope: !8570)
!8572 = !DILocation(line: 1399, column: 25, scope: !8570)
!8573 = !DILocation(line: 1399, column: 9, scope: !8527)
!8574 = !DILocation(line: 1400, column: 9, scope: !8570)
!8575 = !DILocation(line: 1401, column: 9, scope: !8576)
!8576 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1401, column: 9)
!8577 = !DILocation(line: 1401, column: 12, scope: !8576)
!8578 = !DILocation(line: 1401, column: 25, scope: !8576)
!8579 = !DILocation(line: 1401, column: 9, scope: !8527)
!8580 = !DILocation(line: 1402, column: 9, scope: !8576)
!8581 = !DILocation(line: 1403, column: 9, scope: !8582)
!8582 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1403, column: 9)
!8583 = !DILocation(line: 1403, column: 12, scope: !8582)
!8584 = !DILocation(line: 1403, column: 25, scope: !8582)
!8585 = !DILocation(line: 1403, column: 9, scope: !8527)
!8586 = !DILocation(line: 1404, column: 9, scope: !8582)
!8587 = !DILocation(line: 1405, column: 9, scope: !8588)
!8588 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1405, column: 9)
!8589 = !DILocation(line: 1405, column: 12, scope: !8588)
!8590 = !DILocation(line: 1405, column: 25, scope: !8588)
!8591 = !DILocation(line: 1405, column: 9, scope: !8527)
!8592 = !DILocation(line: 1406, column: 9, scope: !8588)
!8593 = !DILocation(line: 1407, column: 9, scope: !8594)
!8594 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1407, column: 9)
!8595 = !DILocation(line: 1407, column: 12, scope: !8594)
!8596 = !DILocation(line: 1407, column: 25, scope: !8594)
!8597 = !DILocation(line: 1407, column: 9, scope: !8527)
!8598 = !DILocation(line: 1408, column: 9, scope: !8594)
!8599 = !DILocation(line: 1409, column: 9, scope: !8600)
!8600 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1409, column: 9)
!8601 = !DILocation(line: 1409, column: 12, scope: !8600)
!8602 = !DILocation(line: 1409, column: 25, scope: !8600)
!8603 = !DILocation(line: 1409, column: 9, scope: !8527)
!8604 = !DILocation(line: 1410, column: 9, scope: !8600)
!8605 = !DILocation(line: 1411, column: 9, scope: !8606)
!8606 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1411, column: 9)
!8607 = !DILocation(line: 1411, column: 12, scope: !8606)
!8608 = !DILocation(line: 1411, column: 25, scope: !8606)
!8609 = !DILocation(line: 1411, column: 9, scope: !8527)
!8610 = !DILocation(line: 1412, column: 9, scope: !8606)
!8611 = !DILocation(line: 1413, column: 9, scope: !8612)
!8612 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1413, column: 9)
!8613 = !DILocation(line: 1413, column: 12, scope: !8612)
!8614 = !DILocation(line: 1413, column: 25, scope: !8612)
!8615 = !DILocation(line: 1413, column: 9, scope: !8527)
!8616 = !DILocation(line: 1416, column: 9, scope: !8612)
!8617 = !DILocation(line: 1417, column: 9, scope: !8618)
!8618 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1417, column: 9)
!8619 = !DILocation(line: 1417, column: 12, scope: !8618)
!8620 = !DILocation(line: 1417, column: 25, scope: !8618)
!8621 = !DILocation(line: 1417, column: 9, scope: !8527)
!8622 = !DILocation(line: 1418, column: 9, scope: !8618)
!8623 = !DILocation(line: 1419, column: 9, scope: !8624)
!8624 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1419, column: 9)
!8625 = !DILocation(line: 1419, column: 12, scope: !8624)
!8626 = !DILocation(line: 1419, column: 25, scope: !8624)
!8627 = !DILocation(line: 1419, column: 9, scope: !8527)
!8628 = !DILocation(line: 1420, column: 9, scope: !8624)
!8629 = !DILocation(line: 1421, column: 9, scope: !8630)
!8630 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1421, column: 9)
!8631 = !DILocation(line: 1421, column: 12, scope: !8630)
!8632 = !DILocation(line: 1421, column: 25, scope: !8630)
!8633 = !DILocation(line: 1421, column: 9, scope: !8527)
!8634 = !DILocation(line: 1422, column: 9, scope: !8630)
!8635 = !DILocation(line: 1423, column: 9, scope: !8636)
!8636 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1423, column: 9)
!8637 = !DILocation(line: 1423, column: 12, scope: !8636)
!8638 = !DILocation(line: 1423, column: 25, scope: !8636)
!8639 = !DILocation(line: 1423, column: 9, scope: !8527)
!8640 = !DILocation(line: 1424, column: 9, scope: !8636)
!8641 = !DILocation(line: 1425, column: 9, scope: !8642)
!8642 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1425, column: 9)
!8643 = !DILocation(line: 1425, column: 12, scope: !8642)
!8644 = !DILocation(line: 1425, column: 25, scope: !8642)
!8645 = !DILocation(line: 1425, column: 9, scope: !8527)
!8646 = !DILocation(line: 1426, column: 9, scope: !8642)
!8647 = !DILocation(line: 1427, column: 10, scope: !8648)
!8648 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1427, column: 9)
!8649 = !DILocation(line: 1427, column: 13, scope: !8648)
!8650 = !DILocation(line: 1427, column: 9, scope: !8527)
!8651 = !DILocation(line: 1428, column: 9, scope: !8648)
!8652 = !DILocation(line: 1429, column: 5, scope: !8527)
!8653 = !DILocation(line: 1431, column: 9, scope: !8654)
!8654 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1431, column: 9)
!8655 = !DILocation(line: 1431, column: 12, scope: !8654)
!8656 = !DILocation(line: 1431, column: 17, scope: !8654)
!8657 = !DILocation(line: 1431, column: 39, scope: !8654)
!8658 = !DILocation(line: 1432, column: 9, scope: !8654)
!8659 = !DILocation(line: 1432, column: 12, scope: !8654)
!8660 = !DILocation(line: 1432, column: 17, scope: !8654)
!8661 = !DILocation(line: 1431, column: 9, scope: !8542)
!8662 = !DILocation(line: 1433, column: 9, scope: !8663)
!8663 = distinct !DILexicalBlock(scope: !8654, file: !69, line: 1432, column: 40)
!8664 = !DILocation(line: 1434, column: 17, scope: !8663)
!8665 = !DILocation(line: 1434, column: 20, scope: !8663)
!8666 = !DILocation(line: 1434, column: 33, scope: !8663)
!8667 = !DILocation(line: 1434, column: 9, scope: !8663)
!8668 = !DILocation(line: 1438, column: 25, scope: !8669)
!8669 = distinct !DILexicalBlock(scope: !8663, file: !69, line: 1436, column: 48)
!8670 = !DILocation(line: 1438, column: 52, scope: !8669)
!8671 = !DILocation(line: 1439, column: 25, scope: !8669)
!8672 = !DILocation(line: 1439, column: 42, scope: !8669)
!8673 = !DILocation(line: 1440, column: 25, scope: !8669)
!8674 = !DILocation(line: 1440, column: 42, scope: !8669)
!8675 = !DILocation(line: 1441, column: 26, scope: !8669)
!8676 = !DILocation(line: 1441, column: 42, scope: !8669)
!8677 = !DILocation(line: 1442, column: 18, scope: !8669)
!8678 = !DILocation(line: 1442, column: 34, scope: !8669)
!8679 = !DILocation(line: 1444, column: 9, scope: !8663)
!8680 = !DILocation(line: 1445, column: 5, scope: !8663)
!8681 = !DILocation(line: 1447, column: 31, scope: !8682)
!8682 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1447, column: 9)
!8683 = !DILocation(line: 1447, column: 9, scope: !8682)
!8684 = !DILocation(line: 1447, column: 9, scope: !8527)
!8685 = !DILocation(line: 1448, column: 9, scope: !8686)
!8686 = distinct !DILexicalBlock(scope: !8682, file: !69, line: 1447, column: 38)
!8687 = !DILocalVariable(name: "i", scope: !8688, file: !69, line: 1449, type: !969)
!8688 = distinct !DILexicalBlock(scope: !8686, file: !69, line: 1449, column: 9)
!8689 = !DILocation(line: 1449, column: 18, scope: !8688)
!8690 = !DILocation(line: 1449, column: 14, scope: !8688)
!8691 = !DILocalVariable(name: "config", scope: !8692, file: !69, line: 1450, type: !8694)
!8692 = distinct !DILexicalBlock(scope: !8693, file: !69, line: 1449, column: 31)
!8693 = distinct !DILexicalBlock(scope: !8688, file: !69, line: 1449, column: 9)
!8694 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8695, size: 64, align: 64)
!8695 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8696)
!8696 = !DIDerivedType(tag: DW_TAG_typedef, name: "AVCodecHWConfig", file: !75, line: 3459, baseType: !8697)
!8697 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "AVCodecHWConfig", file: !75, line: 3442, size: 96, align: 32, elements: !8698)
!8698 = !{!8699, !8700, !8701}
!8699 = !DIDerivedType(tag: DW_TAG_member, name: "pix_fmt", scope: !8697, file: !75, line: 3446, baseType: !544, size: 32, align: 32)
!8700 = !DIDerivedType(tag: DW_TAG_member, name: "methods", scope: !8697, file: !75, line: 3451, baseType: !969, size: 32, align: 32, offset: 32)
!8701 = !DIDerivedType(tag: DW_TAG_member, name: "device_type", scope: !8697, file: !75, line: 3458, baseType: !1317, size: 32, align: 32, offset: 64)
!8702 = !DILocation(line: 1450, column: 36, scope: !8692)
!8703 = !DILocation(line: 1450, column: 67, scope: !8692)
!8704 = !DILocation(line: 1450, column: 70, scope: !8692)
!8705 = !DILocation(line: 1450, column: 45, scope: !8692)
!8706 = !DILocation(line: 1451, column: 18, scope: !8707)
!8707 = distinct !DILexicalBlock(scope: !8692, file: !69, line: 1451, column: 17)
!8708 = !DILocation(line: 1451, column: 17, scope: !8692)
!8709 = !DILocation(line: 1452, column: 17, scope: !8707)
!8710 = !DILocation(line: 1453, column: 53, scope: !8692)
!8711 = !DILocation(line: 1453, column: 61, scope: !8692)
!8712 = !DILocation(line: 1453, column: 27, scope: !8692)
!8713 = !DILocation(line: 1453, column: 13, scope: !8714)
!8714 = !DILexicalBlockFile(scope: !8692, file: !69, discriminator: 1)
!8715 = !DILocation(line: 1454, column: 9, scope: !8692)
!8716 = !DILocation(line: 1449, column: 27, scope: !8717)
!8717 = !DILexicalBlockFile(scope: !8693, file: !69, discriminator: 1)
!8718 = !DILocation(line: 1449, column: 9, scope: !8717)
!8719 = distinct !{!8719, !8720}
!8720 = !DILocation(line: 1449, column: 9, scope: !8686)
!8721 = !DILocation(line: 1455, column: 9, scope: !8686)
!8722 = !DILocation(line: 1456, column: 5, scope: !8686)
!8723 = !DILocation(line: 1458, column: 9, scope: !8724)
!8724 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1458, column: 9)
!8725 = !DILocation(line: 1458, column: 12, scope: !8724)
!8726 = !DILocation(line: 1458, column: 9, scope: !8527)
!8727 = !DILocalVariable(name: "fps", scope: !8728, file: !69, line: 1459, type: !5007)
!8728 = distinct !DILexicalBlock(scope: !8724, file: !69, line: 1458, column: 34)
!8729 = !DILocation(line: 1459, column: 27, scope: !8728)
!8730 = !DILocation(line: 1459, column: 33, scope: !8728)
!8731 = !DILocation(line: 1459, column: 36, scope: !8728)
!8732 = !DILocation(line: 1461, column: 9, scope: !8728)
!8733 = !DILocation(line: 1462, column: 9, scope: !8728)
!8734 = !DILocation(line: 1462, column: 16, scope: !8735)
!8735 = !DILexicalBlockFile(scope: !8728, file: !69, discriminator: 1)
!8736 = !DILocation(line: 1462, column: 21, scope: !8735)
!8737 = !DILocation(line: 1462, column: 9, scope: !8735)
!8738 = !DILocation(line: 1463, column: 30, scope: !8739)
!8739 = distinct !DILexicalBlock(scope: !8728, file: !69, line: 1462, column: 26)
!8740 = !DILocation(line: 1463, column: 35, scope: !8739)
!8741 = !DILocation(line: 1463, column: 40, scope: !8739)
!8742 = !DILocation(line: 1463, column: 45, scope: !8739)
!8743 = !DILocation(line: 1463, column: 13, scope: !8739)
!8744 = !DILocation(line: 1464, column: 16, scope: !8739)
!8745 = !DILocation(line: 1462, column: 9, scope: !8746)
!8746 = !DILexicalBlockFile(scope: !8728, file: !69, discriminator: 2)
!8747 = distinct !{!8747, !8733}
!8748 = !DILocation(line: 1466, column: 9, scope: !8728)
!8749 = !DILocation(line: 1467, column: 5, scope: !8728)
!8750 = !DILocation(line: 1468, column: 9, scope: !8751)
!8751 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1468, column: 9)
!8752 = !DILocation(line: 1468, column: 12, scope: !8751)
!8753 = !DILocation(line: 1468, column: 9, scope: !8527)
!8754 = !DILocalVariable(name: "p", scope: !8755, file: !69, line: 1468, type: !5010)
!8755 = distinct !DILexicalBlock(scope: !8751, file: !69, line: 1468, column: 22)
!8756 = !DILocation(line: 1468, column: 50, scope: !8755)
!8757 = !DILocation(line: 1468, column: 54, scope: !8758)
!8758 = !DILexicalBlockFile(scope: !8755, file: !69, discriminator: 1)
!8759 = !DILocation(line: 1468, column: 57, scope: !8758)
!8760 = !DILocation(line: 1468, column: 50, scope: !8758)
!8761 = !DILocation(line: 1468, column: 67, scope: !8758)
!8762 = !DILocation(line: 1468, column: 113, scope: !8758)
!8763 = !DILocation(line: 1468, column: 121, scope: !8764)
!8764 = !DILexicalBlockFile(scope: !8755, file: !69, discriminator: 2)
!8765 = !DILocation(line: 1468, column: 120, scope: !8764)
!8766 = !DILocation(line: 1468, column: 123, scope: !8764)
!8767 = !DILocation(line: 1468, column: 113, scope: !8764)
!8768 = !DILocalVariable(name: "name", scope: !8769, file: !69, line: 1468, type: !953)
!8769 = distinct !DILexicalBlock(scope: !8755, file: !69, line: 1468, column: 143)
!8770 = !DILocation(line: 1468, column: 157, scope: !8769)
!8771 = !DILocation(line: 1468, column: 185, scope: !8772)
!8772 = !DILexicalBlockFile(scope: !8769, file: !69, discriminator: 3)
!8773 = !DILocation(line: 1468, column: 184, scope: !8772)
!8774 = !DILocation(line: 1468, column: 164, scope: !8772)
!8775 = !DILocation(line: 1468, column: 157, scope: !8772)
!8776 = !DILocation(line: 1468, column: 204, scope: !8772)
!8777 = !DILocation(line: 1468, column: 190, scope: !8778)
!8778 = !DILexicalBlockFile(scope: !8772, file: !69, discriminator: 5)
!8779 = !DILocation(line: 1468, column: 212, scope: !8772)
!8780 = !DILocation(line: 1468, column: 113, scope: !8772)
!8781 = distinct !{!8781, !8782}
!8782 = !DILocation(line: 1468, column: 113, scope: !8755)
!8783 = !DILocation(line: 1468, column: 218, scope: !8784)
!8784 = !DILexicalBlockFile(scope: !8755, file: !69, discriminator: 4)
!8785 = !DILocation(line: 1468, column: 232, scope: !8784)
!8786 = !DILocation(line: 1470, column: 9, scope: !8787)
!8787 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1470, column: 9)
!8788 = !DILocation(line: 1470, column: 12, scope: !8787)
!8789 = !DILocation(line: 1470, column: 9, scope: !8527)
!8790 = !DILocalVariable(name: "p", scope: !8791, file: !69, line: 1470, type: !5013)
!8791 = distinct !DILexicalBlock(scope: !8787, file: !69, line: 1470, column: 35)
!8792 = !DILocation(line: 1470, column: 48, scope: !8791)
!8793 = !DILocation(line: 1470, column: 52, scope: !8794)
!8794 = !DILexicalBlockFile(scope: !8791, file: !69, discriminator: 1)
!8795 = !DILocation(line: 1470, column: 55, scope: !8794)
!8796 = !DILocation(line: 1470, column: 48, scope: !8794)
!8797 = !DILocation(line: 1470, column: 78, scope: !8794)
!8798 = !DILocation(line: 1470, column: 123, scope: !8794)
!8799 = !DILocation(line: 1470, column: 131, scope: !8800)
!8800 = !DILexicalBlockFile(scope: !8791, file: !69, discriminator: 2)
!8801 = !DILocation(line: 1470, column: 130, scope: !8800)
!8802 = !DILocation(line: 1470, column: 133, scope: !8800)
!8803 = !DILocation(line: 1470, column: 123, scope: !8800)
!8804 = !DILocalVariable(name: "name", scope: !8805, file: !69, line: 1470, type: !8806)
!8805 = distinct !DILexicalBlock(scope: !8791, file: !69, line: 1470, column: 139)
!8806 = !DICompositeType(tag: DW_TAG_array_type, baseType: !955, size: 128, align: 8, elements: !8807)
!8807 = !{!8808}
!8808 = !DISubrange(count: 16)
!8809 = !DILocation(line: 1470, column: 146, scope: !8805)
!8810 = !DILocation(line: 1470, column: 165, scope: !8811)
!8811 = !DILexicalBlockFile(scope: !8805, file: !69, discriminator: 3)
!8812 = !DILocation(line: 1470, column: 192, scope: !8811)
!8813 = !DILocation(line: 1470, column: 191, scope: !8811)
!8814 = !DILocation(line: 1470, column: 156, scope: !8811)
!8815 = !DILocation(line: 1470, column: 211, scope: !8811)
!8816 = !DILocation(line: 1470, column: 197, scope: !8817)
!8817 = !DILexicalBlockFile(scope: !8811, file: !69, discriminator: 5)
!8818 = !DILocation(line: 1470, column: 219, scope: !8811)
!8819 = !DILocation(line: 1470, column: 123, scope: !8811)
!8820 = distinct !{!8820, !8821}
!8821 = !DILocation(line: 1470, column: 123, scope: !8791)
!8822 = !DILocation(line: 1470, column: 225, scope: !8823)
!8823 = !DILexicalBlockFile(scope: !8791, file: !69, discriminator: 4)
!8824 = !DILocation(line: 1470, column: 239, scope: !8823)
!8825 = !DILocation(line: 1472, column: 9, scope: !8826)
!8826 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1472, column: 9)
!8827 = !DILocation(line: 1472, column: 12, scope: !8826)
!8828 = !DILocation(line: 1472, column: 9, scope: !8527)
!8829 = !DILocalVariable(name: "p", scope: !8830, file: !69, line: 1472, type: !5016)
!8830 = distinct !DILexicalBlock(scope: !8826, file: !69, line: 1472, column: 25)
!8831 = !DILocation(line: 1472, column: 54, scope: !8830)
!8832 = !DILocation(line: 1472, column: 58, scope: !8833)
!8833 = !DILexicalBlockFile(scope: !8830, file: !69, discriminator: 1)
!8834 = !DILocation(line: 1472, column: 61, scope: !8833)
!8835 = !DILocation(line: 1472, column: 54, scope: !8833)
!8836 = !DILocation(line: 1472, column: 74, scope: !8833)
!8837 = !DILocation(line: 1472, column: 121, scope: !8833)
!8838 = !DILocation(line: 1472, column: 129, scope: !8839)
!8839 = !DILexicalBlockFile(scope: !8830, file: !69, discriminator: 2)
!8840 = !DILocation(line: 1472, column: 128, scope: !8839)
!8841 = !DILocation(line: 1472, column: 131, scope: !8839)
!8842 = !DILocation(line: 1472, column: 121, scope: !8839)
!8843 = !DILocalVariable(name: "name", scope: !8844, file: !69, line: 1472, type: !953)
!8844 = distinct !DILexicalBlock(scope: !8830, file: !69, line: 1472, column: 154)
!8845 = !DILocation(line: 1472, column: 168, scope: !8844)
!8846 = !DILocation(line: 1472, column: 199, scope: !8847)
!8847 = !DILexicalBlockFile(scope: !8844, file: !69, discriminator: 3)
!8848 = !DILocation(line: 1472, column: 198, scope: !8847)
!8849 = !DILocation(line: 1472, column: 175, scope: !8847)
!8850 = !DILocation(line: 1472, column: 168, scope: !8847)
!8851 = !DILocation(line: 1472, column: 217, scope: !8847)
!8852 = !DILocation(line: 1472, column: 203, scope: !8853)
!8853 = !DILexicalBlockFile(scope: !8847, file: !69, discriminator: 5)
!8854 = !DILocation(line: 1472, column: 225, scope: !8847)
!8855 = !DILocation(line: 1472, column: 121, scope: !8847)
!8856 = distinct !{!8856, !8857}
!8857 = !DILocation(line: 1472, column: 121, scope: !8830)
!8858 = !DILocation(line: 1472, column: 231, scope: !8859)
!8859 = !DILexicalBlockFile(scope: !8830, file: !69, discriminator: 4)
!8860 = !DILocation(line: 1472, column: 245, scope: !8859)
!8861 = !DILocation(line: 1474, column: 9, scope: !8862)
!8862 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1474, column: 9)
!8863 = !DILocation(line: 1474, column: 12, scope: !8862)
!8864 = !DILocation(line: 1474, column: 9, scope: !8527)
!8865 = !DILocalVariable(name: "p", scope: !8866, file: !69, line: 1474, type: !5019)
!8866 = distinct !DILexicalBlock(scope: !8862, file: !69, line: 1474, column: 29)
!8867 = !DILocation(line: 1474, column: 47, scope: !8866)
!8868 = !DILocation(line: 1474, column: 51, scope: !8869)
!8869 = !DILexicalBlockFile(scope: !8866, file: !69, discriminator: 1)
!8870 = !DILocation(line: 1474, column: 54, scope: !8869)
!8871 = !DILocation(line: 1474, column: 47, scope: !8869)
!8872 = !DILocation(line: 1474, column: 71, scope: !8869)
!8873 = !DILocation(line: 1474, column: 119, scope: !8869)
!8874 = !DILocation(line: 1474, column: 127, scope: !8875)
!8875 = !DILexicalBlockFile(scope: !8866, file: !69, discriminator: 2)
!8876 = !DILocation(line: 1474, column: 126, scope: !8875)
!8877 = !DILocation(line: 1474, column: 129, scope: !8875)
!8878 = !DILocation(line: 1474, column: 119, scope: !8875)
!8879 = !DILocalVariable(name: "name", scope: !8880, file: !69, line: 1474, type: !3117)
!8880 = distinct !DILexicalBlock(scope: !8866, file: !69, line: 1474, column: 135)
!8881 = !DILocation(line: 1474, column: 142, scope: !8880)
!8882 = !DILocation(line: 1474, column: 182, scope: !8883)
!8883 = !DILexicalBlockFile(scope: !8880, file: !69, discriminator: 3)
!8884 = !DILocation(line: 1474, column: 206, scope: !8883)
!8885 = !DILocation(line: 1474, column: 205, scope: !8883)
!8886 = !DILocation(line: 1474, column: 153, scope: !8883)
!8887 = !DILocation(line: 1474, column: 225, scope: !8883)
!8888 = !DILocation(line: 1474, column: 211, scope: !8889)
!8889 = !DILexicalBlockFile(scope: !8883, file: !69, discriminator: 5)
!8890 = !DILocation(line: 1474, column: 233, scope: !8883)
!8891 = !DILocation(line: 1474, column: 119, scope: !8883)
!8892 = distinct !{!8892, !8893}
!8893 = !DILocation(line: 1474, column: 119, scope: !8866)
!8894 = !DILocation(line: 1474, column: 239, scope: !8895)
!8895 = !DILexicalBlockFile(scope: !8866, file: !69, discriminator: 4)
!8896 = !DILocation(line: 1474, column: 253, scope: !8895)
!8897 = !DILocation(line: 1477, column: 9, scope: !8898)
!8898 = distinct !DILexicalBlock(scope: !8527, file: !69, line: 1477, column: 9)
!8899 = !DILocation(line: 1477, column: 12, scope: !8898)
!8900 = !DILocation(line: 1477, column: 9, scope: !8527)
!8901 = !DILocation(line: 1478, column: 28, scope: !8902)
!8902 = distinct !DILexicalBlock(scope: !8898, file: !69, line: 1477, column: 24)
!8903 = !DILocation(line: 1478, column: 31, scope: !8902)
!8904 = !DILocation(line: 1478, column: 9, scope: !8902)
!8905 = !DILocation(line: 1481, column: 5, scope: !8902)
!8906 = !DILocation(line: 1482, column: 1, scope: !8527)
