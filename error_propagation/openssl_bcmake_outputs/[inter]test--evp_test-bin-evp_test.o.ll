; ModuleID = '/home/ubuntu_1604/Desktop/openssl_bcmake_outputs/[inter]test--evp_test-bin-evp_test.o.i'
source_filename = "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs/[inter]test--evp_test-bin-evp_test.o.i"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.options_st = type { i8*, i32, i32, i8* }
%struct.key_list_st = type { i8*, %struct.evp_pkey_st*, %struct.key_list_st* }
%struct.evp_pkey_st = type opaque
%struct.evp_test_method_st = type { i8*, i32 (%struct.evp_test_st*, i8*)*, void (%struct.evp_test_st*)*, i32 (%struct.evp_test_st*, i8*, i8*)*, i32 (%struct.evp_test_st*)* }
%struct.evp_test_st = type { %struct.stanza_st, i8*, i32, %struct.evp_test_method_st*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct.stanza_st = type { i8*, %struct.bio_st*, i32, i32, i32, i32, i32, i32, [20 x %struct.pair_st], %struct.bio_st*, [4096 x i8] }
%struct.pair_st = type { i8*, i8* }
%struct.bio_st = type opaque
%struct.engine_st = type opaque
%struct.evp_cipher_st = type opaque
%struct.cipher_data_st = type { %struct.evp_cipher_st*, i32, i32, i8*, i64, i8*, i64, i8*, i64, i8*, i64, [4 x i8*], [4 x i64], i8*, i64 }
%struct.evp_cipher_ctx_st = type opaque
%struct.digest_data_st = type { %struct.evp_md_st*, %struct.stack_st_EVP_TEST_BUFFER*, i8*, i64 }
%struct.evp_md_st = type opaque
%struct.stack_st_EVP_TEST_BUFFER = type opaque
%struct.evp_md_ctx_st = type opaque
%struct.evp_test_buffer_st = type { i8*, i64, i64, i32 }
%struct.stack_st = type opaque
%struct.DIGESTSIGN_DATA = type { i32, i32, %struct.evp_md_st*, %struct.evp_md_ctx_st*, %struct.evp_pkey_ctx_st*, %struct.stack_st_EVP_TEST_BUFFER*, i8*, i64, i8*, i64 }
%struct.evp_pkey_ctx_st = type opaque
%struct.encode_data_st = type { i8*, i64, i8*, i64, i32 }
%struct.evp_Encode_Ctx_st = type opaque
%struct.kdf_data_st = type { %struct.evp_kdf_ctx_st*, i8*, i64 }
%struct.evp_kdf_ctx_st = type opaque
%struct.pkey_kdf_data_st = type { %struct.evp_pkey_ctx_st*, i8*, i64 }
%struct.keypair_test_data_st = type { %struct.evp_pkey_st*, %struct.evp_pkey_st* }
%struct.keygen_test_data_st = type { %struct.evp_pkey_ctx_st*, i8* }
%struct.evp_mac_st = type opaque
%struct.mac_data_st = type { %struct.evp_mac_st*, i32, i8*, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64, %struct.stack_st_OPENSSL_STRING* }
%struct.stack_st_OPENSSL_STRING = type opaque
%struct.evp_mac_ctx_st = type opaque
%struct.pbe_data_st = type { i32, i64, i64, i64, i64, i32, i32, %struct.evp_md_st*, i8*, i64, i8*, i64, i8*, i64 }
%struct.pkey_data_st = type { %struct.evp_pkey_ctx_st*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i8*, i64, i8*, i64 }

@test_get_options.options = internal constant [9 x %struct.options_st] [%struct.options_st { i8* getelementptr inbounds ([0 x i8], [0 x i8]* @OPT_HELP_STR, i32 0, i32 0), i32 1, i32 45, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([0 x i8], [0 x i8]* @OPT_HELP_STR, i32 0, i32 0), i32 1, i32 45, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 500, i32 45, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 501, i32 45, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i32 502, i32 115, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32 503, i32 110, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 504, i32 112, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 505, i32 110, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.13, i32 0, i32 0) }, %struct.options_st zeroinitializer], align 16
@OPT_HELP_STR = external constant [0 x i8], align 1
@.str = private unnamed_addr constant [29 x i8] c"Usage: %s [options] file...\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"Valid options are:\0A\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Display this summary\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"list\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"Display the list of tests available\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@.str.7 = private unnamed_addr constant [32 x i8] c"Run a single test by id or name\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"iter\00", align 1
@.str.9 = private unnamed_addr constant [33 x i8] c"Run a single iteration of a test\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"indent\00", align 1
@.str.11 = private unnamed_addr constant [31 x i8] c"Number of tabs added to output\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"seed\00", align 1
@.str.13 = private unnamed_addr constant [35 x i8] c"Seed value to randomize tests with\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"run_file_tests\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"test/evp_test.c\00", align 1
@.str.16 = private unnamed_addr constant [31 x i8] c"t = OPENSSL_zalloc(sizeof(*t))\00", align 1
@public_keys = internal global %struct.key_list_st* null, align 8
@private_keys = internal global %struct.key_list_st* null, align 8
@.str.17 = private unnamed_addr constant [11 x i8] c"PrivateKey\00", align 1
@.str.18 = private unnamed_addr constant [26 x i8] c"Can't read private key %s\00", align 1
@.str.19 = private unnamed_addr constant [10 x i8] c"PublicKey\00", align 1
@.str.20 = private unnamed_addr constant [25 x i8] c"Can't read public key %s\00", align 1
@.str.21 = private unnamed_addr constant [14 x i8] c"PrivateKeyRaw\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"PublicKeyRaw\00", align 1
@.str.23 = private unnamed_addr constant [25 x i8] c"Failed to parse %s value\00", align 1
@.str.24 = private unnamed_addr constant [28 x i8] c"Uncrecognised algorithm NID\00", align 1
@.str.25 = private unnamed_addr constant [28 x i8] c"Failed to create binary key\00", align 1
@.str.26 = private unnamed_addr constant [19 x i8] c"Can't read %s data\00", align 1
@.str.27 = private unnamed_addr constant [17 x i8] c"Duplicate key %s\00", align 1
@.str.28 = private unnamed_addr constant [35 x i8] c"key = OPENSSL_malloc(sizeof(*key))\00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c"SM2\00", align 1
@.str.30 = private unnamed_addr constant [29 x i8] c"Line %d: missing blank line\0A\00", align 1
@.str.31 = private unnamed_addr constant [29 x i8] c"t->meth = find_test(pp->key)\00", align 1
@.str.32 = private unnamed_addr constant [16 x i8] c"unknown %s: %s\0A\00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c"Result\00", align 1
@.str.34 = private unnamed_addr constant [31 x i8] c"Line %d: multiple result lines\00", align 1
@.str.35 = private unnamed_addr constant [9 x i8] c"Function\00", align 1
@.str.36 = private unnamed_addr constant [34 x i8] c"Line %d: multiple function lines\0A\00", align 1
@.str.37 = private unnamed_addr constant [7 x i8] c"Reason\00", align 1
@.str.38 = private unnamed_addr constant [31 x i8] c"Line %d: multiple reason lines\00", align 1
@.str.39 = private unnamed_addr constant [28 x i8] c"Line %d: unknown keyword %s\00", align 1
@.str.40 = private unnamed_addr constant [43 x i8] c"Line %d: error processing keyword %s = %s\0A\00", align 1
@.str.41 = private unnamed_addr constant [5 x i8] c"NULL\00", align 1
@.str.42 = private unnamed_addr constant [39 x i8] c"*buf = OPENSSL_hexstr2buf(value, &len)\00", align 1
@.str.43 = private unnamed_addr constant [17 x i8] c"Can't convert %s\00", align 1
@.str.44 = private unnamed_addr constant [36 x i8] c"ret = p = OPENSSL_malloc(input_len)\00", align 1
@.str.45 = private unnamed_addr constant [28 x i8] c"Bad escape sequence in file\00", align 1
@evp_test_list = internal global [19 x %struct.evp_test_method_st*] [%struct.evp_test_method_st* @cipher_test_method, %struct.evp_test_method_st* @digest_test_method, %struct.evp_test_method_st* @digestsign_test_method, %struct.evp_test_method_st* @digestverify_test_method, %struct.evp_test_method_st* @encode_test_method, %struct.evp_test_method_st* @kdf_test_method, %struct.evp_test_method_st* @pkey_kdf_test_method, %struct.evp_test_method_st* @keypair_test_method, %struct.evp_test_method_st* @keygen_test_method, %struct.evp_test_method_st* @mac_test_method, %struct.evp_test_method_st* @oneshot_digestsign_test_method, %struct.evp_test_method_st* @oneshot_digestverify_test_method, %struct.evp_test_method_st* @pbe_test_method, %struct.evp_test_method_st* @pdecrypt_test_method, %struct.evp_test_method_st* @pderive_test_method, %struct.evp_test_method_st* @psign_test_method, %struct.evp_test_method_st* @pverify_recover_test_method, %struct.evp_test_method_st* @pverify_test_method, %struct.evp_test_method_st* null], align 16
@cipher_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.46, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @cipher_test_init, void (%struct.evp_test_st*)* @cipher_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @cipher_test_parse, i32 (%struct.evp_test_st*)* @cipher_test_run }, align 8
@digest_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.85, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @digest_test_init, void (%struct.evp_test_st*)* @digest_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @digest_test_parse, i32 (%struct.evp_test_st*)* @digest_test_run }, align 8
@digestsign_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.103, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @digestsign_test_init, void (%struct.evp_test_st*)* @digestsigver_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @digestsigver_test_parse, i32 (%struct.evp_test_st*)* @digestsign_test_run }, align 8
@digestverify_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.116, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @digestverify_test_init, void (%struct.evp_test_st*)* @digestsigver_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @digestsigver_test_parse, i32 (%struct.evp_test_st*)* @digestverify_test_run }, align 8
@encode_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.118, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @encode_test_init, void (%struct.evp_test_st*)* @encode_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @encode_test_parse, i32 (%struct.evp_test_st*)* @encode_test_run }, align 8
@kdf_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.134, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @kdf_test_init, void (%struct.evp_test_st*)* @kdf_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @kdf_test_parse, i32 (%struct.evp_test_st*)* @kdf_test_run }, align 8
@pkey_kdf_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.140, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @pkey_kdf_test_init, void (%struct.evp_test_st*)* @pkey_kdf_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @pkey_kdf_test_parse, i32 (%struct.evp_test_st*)* @pkey_kdf_test_run }, align 8
@keypair_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.142, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @keypair_test_init, void (%struct.evp_test_st*)* @keypair_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @void_test_parse, i32 (%struct.evp_test_st*)* @keypair_test_run }, align 8
@keygen_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.157, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @keygen_test_init, void (%struct.evp_test_st*)* @keygen_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @keygen_test_parse, i32 (%struct.evp_test_st*)* @keygen_test_run }, align 8
@mac_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.163, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @mac_test_init, void (%struct.evp_test_st*)* @mac_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @mac_test_parse, i32 (%struct.evp_test_st*)* @mac_test_run }, align 8
@oneshot_digestsign_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.188, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @oneshot_digestsign_test_init, void (%struct.evp_test_st*)* @digestsigver_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @digestsigver_test_parse, i32 (%struct.evp_test_st*)* @oneshot_digestsign_test_run }, align 8
@oneshot_digestverify_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.191, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @oneshot_digestverify_test_init, void (%struct.evp_test_st*)* @digestsigver_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @digestsigver_test_parse, i32 (%struct.evp_test_st*)* @oneshot_digestverify_test_run }, align 8
@pbe_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.192, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @pbe_test_init, void (%struct.evp_test_st*)* @pbe_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @pbe_test_parse, i32 (%struct.evp_test_st*)* @pbe_test_run }, align 8
@pdecrypt_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.214, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @decrypt_test_init, void (%struct.evp_test_st*)* @pkey_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @pkey_test_parse, i32 (%struct.evp_test_st*)* @pkey_test_run }, align 8
@pderive_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.220, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @pderive_test_init, void (%struct.evp_test_st*)* @pkey_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @pderive_test_parse, i32 (%struct.evp_test_st*)* @pderive_test_run }, align 8
@psign_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.225, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @sign_test_init, void (%struct.evp_test_st*)* @pkey_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @pkey_test_parse, i32 (%struct.evp_test_st*)* @pkey_test_run }, align 8
@pverify_recover_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.226, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @verify_recover_test_init, void (%struct.evp_test_st*)* @pkey_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @pkey_test_parse, i32 (%struct.evp_test_st*)* @pkey_test_run }, align 8
@pverify_test_method = internal constant %struct.evp_test_method_st { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.227, i32 0, i32 0), i32 (%struct.evp_test_st*, i8*)* @verify_test_init, void (%struct.evp_test_st*)* @pkey_test_cleanup, i32 (%struct.evp_test_st*, i8*, i8*)* @pkey_test_parse, i32 (%struct.evp_test_st*)* @verify_test_run }, align 8
@.str.46 = private unnamed_addr constant [7 x i8] c"Cipher\00", align 1
@.str.47 = private unnamed_addr constant [4 x i8] c"Key\00", align 1
@.str.48 = private unnamed_addr constant [3 x i8] c"IV\00", align 1
@.str.49 = private unnamed_addr constant [10 x i8] c"Plaintext\00", align 1
@.str.50 = private unnamed_addr constant [11 x i8] c"Ciphertext\00", align 1
@.str.51 = private unnamed_addr constant [4 x i8] c"AAD\00", align 1
@.str.52 = private unnamed_addr constant [4 x i8] c"Tag\00", align 1
@.str.53 = private unnamed_addr constant [10 x i8] c"Operation\00", align 1
@.str.54 = private unnamed_addr constant [8 x i8] c"ENCRYPT\00", align 1
@.str.55 = private unnamed_addr constant [8 x i8] c"DECRYPT\00", align 1
@.str.56 = private unnamed_addr constant [7 x i8] c"NO_KEY\00", align 1
@.str.57 = private unnamed_addr constant [6 x i8] c"NO_IV\00", align 1
@.str.58 = private unnamed_addr constant [7 x i8] c"NO_TAG\00", align 1
@cipher_test_run.aux_err = internal global [64 x i8] zeroinitializer, align 16
@.str.59 = private unnamed_addr constant [26 x i8] c"%s in-place, %sfragmented\00", align 1
@.str.60 = private unnamed_addr constant [11 x i8] c"misaligned\00", align 1
@.str.61 = private unnamed_addr constant [8 x i8] c"aligned\00", align 1
@.str.62 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"not \00", align 1
@.str.64 = private unnamed_addr constant [37 x i8] c"%s output and %s input, %sfragmented\00", align 1
@.str.65 = private unnamed_addr constant [13 x i8] c"TEST_FAILURE\00", align 1
@.str.66 = private unnamed_addr constant [27 x i8] c"ctx = EVP_CIPHER_CTX_new()\00", align 1
@.str.67 = private unnamed_addr constant [17 x i8] c"CIPHERINIT_ERROR\00", align 1
@.str.68 = private unnamed_addr constant [18 x i8] c"INVALID_IV_LENGTH\00", align 1
@.str.69 = private unnamed_addr constant [21 x i8] c"TAG_LENGTH_SET_ERROR\00", align 1
@.str.70 = private unnamed_addr constant [14 x i8] c"TAG_SET_ERROR\00", align 1
@.str.71 = private unnamed_addr constant [19 x i8] c"INVALID_KEY_LENGTH\00", align 1
@.str.72 = private unnamed_addr constant [14 x i8] c"KEY_SET_ERROR\00", align 1
@.str.73 = private unnamed_addr constant [31 x i8] c"CCM_PLAINTEXT_LENGTH_SET_ERROR\00", align 1
@.str.74 = private unnamed_addr constant [14 x i8] c"AAD_SET_ERROR\00", align 1
@.str.75 = private unnamed_addr constant [19 x i8] c"CIPHERUPDATE_ERROR\00", align 1
@.str.76 = private unnamed_addr constant [18 x i8] c"CIPHERFINAL_ERROR\00", align 1
@.str.77 = private unnamed_addr constant [15 x i8] c"VALUE_MISMATCH\00", align 1
@.str.78 = private unnamed_addr constant [18 x i8] c"expected->tag_len\00", align 1
@.str.79 = private unnamed_addr constant [13 x i8] c"sizeof(rtag)\00", align 1
@.str.80 = private unnamed_addr constant [26 x i8] c"TAG_LENGTH_INTERNAL_ERROR\00", align 1
@.str.81 = private unnamed_addr constant [19 x i8] c"TAG_RETRIEVE_ERROR\00", align 1
@.str.82 = private unnamed_addr constant [19 x i8] c"TAG_VALUE_MISMATCH\00", align 1
@.str.83 = private unnamed_addr constant [9 x i8] c"expected\00", align 1
@.str.84 = private unnamed_addr constant [4 x i8] c"got\00", align 1
@.str.85 = private unnamed_addr constant [7 x i8] c"Digest\00", align 1
@.str.86 = private unnamed_addr constant [37 x i8] c"mdat = OPENSSL_zalloc(sizeof(*mdat))\00", align 1
@.str.87 = private unnamed_addr constant [6 x i8] c"Input\00", align 1
@.str.88 = private unnamed_addr constant [7 x i8] c"Output\00", align 1
@.str.89 = private unnamed_addr constant [6 x i8] c"Count\00", align 1
@.str.90 = private unnamed_addr constant [6 x i8] c"Ncopy\00", align 1
@.str.91 = private unnamed_addr constant [33 x i8] c"db = OPENSSL_malloc(sizeof(*db))\00", align 1
@.str.92 = private unnamed_addr constant [36 x i8] c"*sk = sk_EVP_TEST_BUFFER_new_null()\00", align 1
@.str.93 = private unnamed_addr constant [31 x i8] c"tbuf = OPENSSL_malloc(tbuflen)\00", align 1
@.str.94 = private unnamed_addr constant [24 x i8] c"mctx = EVP_MD_CTX_new()\00", align 1
@.str.95 = private unnamed_addr constant [17 x i8] c"DIGESTINIT_ERROR\00", align 1
@.str.96 = private unnamed_addr constant [19 x i8] c"DIGESTUPDATE_ERROR\00", align 1
@.str.97 = private unnamed_addr constant [21 x i8] c"DIGESTFINALXOF_ERROR\00", align 1
@.str.98 = private unnamed_addr constant [18 x i8] c"DIGESTFINAL_ERROR\00", align 1
@.str.99 = private unnamed_addr constant [21 x i8] c"expected->output_len\00", align 1
@.str.100 = private unnamed_addr constant [8 x i8] c"got_len\00", align 1
@.str.101 = private unnamed_addr constant [23 x i8] c"DIGEST_LENGTH_MISMATCH\00", align 1
@.str.102 = private unnamed_addr constant [16 x i8] c"DIGEST_MISMATCH\00", align 1
@.str.103 = private unnamed_addr constant [11 x i8] c"DigestSign\00", align 1
@.str.104 = private unnamed_addr constant [29 x i8] c"mdat->ctx = EVP_MD_CTX_new()\00", align 1
@.str.105 = private unnamed_addr constant [23 x i8] c"DIGESTVERIFYINIT_ERROR\00", align 1
@.str.106 = private unnamed_addr constant [21 x i8] c"DIGESTSIGNINIT_ERROR\00", align 1
@.str.107 = private unnamed_addr constant [5 x i8] c"Ctrl\00", align 1
@.str.108 = private unnamed_addr constant [31 x i8] c"tmpval = OPENSSL_strdup(value)\00", align 1
@.str.109 = private unnamed_addr constant [18 x i8] c"PKEY_CTRL_INVALID\00", align 1
@.str.110 = private unnamed_addr constant [16 x i8] c"PKEY_CTRL_ERROR\00", align 1
@.str.111 = private unnamed_addr constant [29 x i8] c"DIGESTSIGNFINAL_LENGTH_ERROR\00", align 1
@.str.112 = private unnamed_addr constant [30 x i8] c"got = OPENSSL_malloc(got_len)\00", align 1
@.str.113 = private unnamed_addr constant [15 x i8] c"MALLOC_FAILURE\00", align 1
@.str.114 = private unnamed_addr constant [22 x i8] c"DIGESTSIGNFINAL_ERROR\00", align 1
@.str.115 = private unnamed_addr constant [19 x i8] c"SIGNATURE_MISMATCH\00", align 1
@.str.116 = private unnamed_addr constant [13 x i8] c"DigestVerify\00", align 1
@.str.117 = private unnamed_addr constant [13 x i8] c"VERIFY_ERROR\00", align 1
@.str.118 = private unnamed_addr constant [9 x i8] c"Encoding\00", align 1
@.str.119 = private unnamed_addr constant [39 x i8] c"edata = OPENSSL_zalloc(sizeof(*edata))\00", align 1
@.str.120 = private unnamed_addr constant [10 x i8] c"canonical\00", align 1
@.str.121 = private unnamed_addr constant [6 x i8] c"valid\00", align 1
@.str.122 = private unnamed_addr constant [8 x i8] c"invalid\00", align 1
@.str.123 = private unnamed_addr constant [49 x i8] c"t->expected_err = OPENSSL_strdup(\22DECODE_ERROR\22)\00", align 1
@.str.124 = private unnamed_addr constant [13 x i8] c"DECODE_ERROR\00", align 1
@.str.125 = private unnamed_addr constant [63 x i8] c"Bad encoding: %s. Should be one of {canonical, valid, invalid}\00", align 1
@.str.126 = private unnamed_addr constant [34 x i8] c"decode_ctx = EVP_ENCODE_CTX_new()\00", align 1
@.str.127 = private unnamed_addr constant [15 x i8] c"INTERNAL_ERROR\00", align 1
@.str.128 = private unnamed_addr constant [34 x i8] c"encode_ctx = EVP_ENCODE_CTX_new()\00", align 1
@.str.129 = private unnamed_addr constant [68 x i8] c"encode_out = OPENSSL_malloc(EVP_ENCODE_LENGTH(expected->input_len))\00", align 1
@.str.130 = private unnamed_addr constant [91 x i8] c"EVP_EncodeUpdate(encode_ctx, encode_out, &chunk_len, expected->input, expected->input_len)\00", align 1
@.str.131 = private unnamed_addr constant [13 x i8] c"BAD_ENCODING\00", align 1
@.str.132 = private unnamed_addr constant [69 x i8] c"decode_out = OPENSSL_malloc(EVP_DECODE_LENGTH(expected->output_len))\00", align 1
@.str.133 = private unnamed_addr constant [13 x i8] c"BAD_DECODING\00", align 1
@.str.134 = private unnamed_addr constant [4 x i8] c"KDF\00", align 1
@.str.135 = private unnamed_addr constant [39 x i8] c"kdata = OPENSSL_zalloc(sizeof(*kdata))\00", align 1
@.str.136 = private unnamed_addr constant [17 x i8] c"KDF_CTRL_INVALID\00", align 1
@.str.137 = private unnamed_addr constant [15 x i8] c"KDF_CTRL_ERROR\00", align 1
@.str.138 = private unnamed_addr constant [17 x i8] c"KDF_DERIVE_ERROR\00", align 1
@.str.139 = private unnamed_addr constant [13 x i8] c"KDF_MISMATCH\00", align 1
@.str.140 = private unnamed_addr constant [8 x i8] c"PKEYKDF\00", align 1
@.str.141 = private unnamed_addr constant [17 x i8] c"expected->output\00", align 1
@.str.142 = private unnamed_addr constant [15 x i8] c"PrivPubKeyPair\00", align 1
@.str.143 = private unnamed_addr constant [28 x i8] c"priv = OPENSSL_strdup(pair)\00", align 1
@.str.144 = private unnamed_addr constant [24 x i8] c"pub = strchr(priv, ':')\00", align 1
@.str.145 = private unnamed_addr constant [14 x i8] c"PARSING_ERROR\00", align 1
@.str.146 = private unnamed_addr constant [34 x i8] c"find_key(&pk, priv, private_keys)\00", align 1
@.str.147 = private unnamed_addr constant [27 x i8] c"Can't find private key: %s\00", align 1
@.str.148 = private unnamed_addr constant [20 x i8] c"MISSING_PRIVATE_KEY\00", align 1
@.str.149 = private unnamed_addr constant [34 x i8] c"find_key(&pubk, pub, public_keys)\00", align 1
@.str.150 = private unnamed_addr constant [26 x i8] c"Can't find public key: %s\00", align 1
@.str.151 = private unnamed_addr constant [19 x i8] c"MISSING_PUBLIC_KEY\00", align 1
@.str.152 = private unnamed_addr constant [37 x i8] c"data = OPENSSL_malloc(sizeof(*data))\00", align 1
@.str.153 = private unnamed_addr constant [22 x i8] c"KEYPAIR_TYPE_MISMATCH\00", align 1
@.str.154 = private unnamed_addr constant [17 x i8] c"KEYPAIR_MISMATCH\00", align 1
@.str.155 = private unnamed_addr constant [27 x i8] c"UNSUPPORTED_KEY_COMPARISON\00", align 1
@.str.156 = private unnamed_addr constant [35 x i8] c"Unexpected error in key comparison\00", align 1
@.str.157 = private unnamed_addr constant [7 x i8] c"KeyGen\00", align 1
@.str.158 = private unnamed_addr constant [40 x i8] c"genctx = EVP_PKEY_CTX_new_id(nid, NULL)\00", align 1
@.str.159 = private unnamed_addr constant [18 x i8] c"KEYGEN_INIT_ERROR\00", align 1
@.str.160 = private unnamed_addr constant [8 x i8] c"KeyName\00", align 1
@.str.161 = private unnamed_addr constant [40 x i8] c"keygen->keyname = OPENSSL_strdup(value)\00", align 1
@.str.162 = private unnamed_addr constant [22 x i8] c"KEYGEN_GENERATE_ERROR\00", align 1
@.str.163 = private unnamed_addr constant [4 x i8] c"MAC\00", align 1
@mac_test_init.epilogue = internal constant [13 x i8] c" by EVP_PKEY\00", align 1
@.str.164 = private unnamed_addr constant [5 x i8] c"HMAC\00", align 1
@.str.165 = private unnamed_addr constant [5 x i8] c"CMAC\00", align 1
@.str.166 = private unnamed_addr constant [9 x i8] c"Poly1305\00", align 1
@.str.167 = private unnamed_addr constant [8 x i8] c"SipHash\00", align 1
@.str.168 = private unnamed_addr constant [7 x i8] c"Custom\00", align 1
@.str.169 = private unnamed_addr constant [5 x i8] c"Salt\00", align 1
@.str.170 = private unnamed_addr constant [10 x i8] c"Algorithm\00", align 1
@.str.171 = private unnamed_addr constant [27 x i8] c"Trying the EVP_MAC %s test\00", align 1
@.str.172 = private unnamed_addr constant [35 x i8] c"Trying the EVP_MAC %s test with %s\00", align 1
@.str.173 = private unnamed_addr constant [17 x i8] c"MAC_CREATE_ERROR\00", align 1
@.str.174 = private unnamed_addr constant [18 x i8] c"MAC_BAD_ALGORITHM\00", align 1
@.str.175 = private unnamed_addr constant [17 x i8] c"MAC_CTRL_INVALID\00", align 1
@.str.176 = private unnamed_addr constant [15 x i8] c"MAC_CTRL_ERROR\00", align 1
@.str.177 = private unnamed_addr constant [15 x i8] c"MAC_INIT_ERROR\00", align 1
@.str.178 = private unnamed_addr constant [17 x i8] c"MAC_UPDATE_ERROR\00", align 1
@.str.179 = private unnamed_addr constant [23 x i8] c"MAC_FINAL_LENGTH_ERROR\00", align 1
@.str.180 = private unnamed_addr constant [13 x i8] c"TEST_MAC_ERR\00", align 1
@.str.181 = private unnamed_addr constant [28 x i8] c"Trying the EVP_PKEY %s test\00", align 1
@.str.182 = private unnamed_addr constant [36 x i8] c"Trying the EVP_PKEY %s test with %s\00", align 1
@.str.183 = private unnamed_addr constant [21 x i8] c"MAC_KEY_CREATE_ERROR\00", align 1
@.str.184 = private unnamed_addr constant [41 x i8] c"md = EVP_get_digestbyname(expected->alg)\00", align 1
@.str.185 = private unnamed_addr constant [24 x i8] c"MAC_ALGORITHM_SET_ERROR\00", align 1
@.str.186 = private unnamed_addr constant [21 x i8] c"EVPPKEYCTXCTRL_ERROR\00", align 1
@.str.187 = private unnamed_addr constant [23 x i8] c"DIGESTSIGNUPDATE_ERROR\00", align 1
@.str.188 = private unnamed_addr constant [18 x i8] c"OneShotDigestSign\00", align 1
@.str.189 = private unnamed_addr constant [24 x i8] c"DIGESTSIGN_LENGTH_ERROR\00", align 1
@.str.190 = private unnamed_addr constant [17 x i8] c"DIGESTSIGN_ERROR\00", align 1
@.str.191 = private unnamed_addr constant [20 x i8] c"OneShotDigestVerify\00", align 1
@.str.192 = private unnamed_addr constant [4 x i8] c"PBE\00", align 1
@.str.193 = private unnamed_addr constant [7 x i8] c"scrypt\00", align 1
@.str.194 = private unnamed_addr constant [7 x i8] c"pbkdf2\00", align 1
@.str.195 = private unnamed_addr constant [7 x i8] c"pkcs12\00", align 1
@.str.196 = private unnamed_addr constant [25 x i8] c"Unknown pbe algorithm %s\00", align 1
@.str.197 = private unnamed_addr constant [9 x i8] c"Password\00", align 1
@.str.198 = private unnamed_addr constant [3 x i8] c"MD\00", align 1
@.str.199 = private unnamed_addr constant [3 x i8] c"id\00", align 1
@.str.200 = private unnamed_addr constant [2 x i8] c"N\00", align 1
@.str.201 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str.202 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.203 = private unnamed_addr constant [7 x i8] c"maxmem\00", align 1
@.str.204 = private unnamed_addr constant [3 x i8] c"*p\00", align 1
@.str.205 = private unnamed_addr constant [28 x i8] c"Invalid empty integer value\00", align 1
@.str.206 = private unnamed_addr constant [30 x i8] c"Integer overflow in string %s\00", align 1
@.str.207 = private unnamed_addr constant [27 x i8] c"isdigit((unsigned char)*p)\00", align 1
@.str.208 = private unnamed_addr constant [31 x i8] c"Invalid character in string %s\00", align 1
@.str.209 = private unnamed_addr constant [40 x i8] c"key = OPENSSL_malloc(expected->key_len)\00", align 1
@.str.210 = private unnamed_addr constant [13 x i8] c"PBKDF2_ERROR\00", align 1
@.str.211 = private unnamed_addr constant [13 x i8] c"SCRYPT_ERROR\00", align 1
@.str.212 = private unnamed_addr constant [13 x i8] c"PKCS12_ERROR\00", align 1
@.str.213 = private unnamed_addr constant [13 x i8] c"KEY_MISMATCH\00", align 1
@.str.214 = private unnamed_addr constant [8 x i8] c"Decrypt\00", align 1
@.str.215 = private unnamed_addr constant [42 x i8] c"kdata->ctx = EVP_PKEY_CTX_new(pkey, NULL)\00", align 1
@.str.216 = private unnamed_addr constant [17 x i8] c"KEYOP_INIT_ERROR\00", align 1
@.str.217 = private unnamed_addr constant [19 x i8] c"KEYOP_LENGTH_ERROR\00", align 1
@.str.218 = private unnamed_addr constant [12 x i8] c"KEYOP_ERROR\00", align 1
@.str.219 = private unnamed_addr constant [15 x i8] c"KEYOP_MISMATCH\00", align 1
@.str.220 = private unnamed_addr constant [7 x i8] c"Derive\00", align 1
@.str.221 = private unnamed_addr constant [8 x i8] c"PeerKey\00", align 1
@.str.222 = private unnamed_addr constant [13 x i8] c"SharedSecret\00", align 1
@.str.223 = private unnamed_addr constant [13 x i8] c"DERIVE_ERROR\00", align 1
@.str.224 = private unnamed_addr constant [23 x i8] c"SHARED_SECRET_MISMATCH\00", align 1
@.str.225 = private unnamed_addr constant [5 x i8] c"Sign\00", align 1
@.str.226 = private unnamed_addr constant [14 x i8] c"VerifyRecover\00", align 1
@.str.227 = private unnamed_addr constant [7 x i8] c"Verify\00", align 1
@.str.228 = private unnamed_addr constant [15 x i8] c"%s:%d %s error\00", align 1
@.str.229 = private unnamed_addr constant [55 x i8] c"%s:%d: Source of above error (%s); unexpected error %s\00", align 1
@.str.230 = private unnamed_addr constant [50 x i8] c"%s:%d: Source of above error; unexpected error %s\00", align 1
@.str.231 = private unnamed_addr constant [38 x i8] c"%s:%d: Succeeded but was expecting %s\00", align 1
@.str.232 = private unnamed_addr constant [26 x i8] c"%s:%d: Expected %s got %s\00", align 1
@.str.233 = private unnamed_addr constant [47 x i8] c"%s:%d: Test is missing function or reason code\00", align 1
@.str.234 = private unnamed_addr constant [38 x i8] c"%s:%d: Expected error \22%s:%s\22 not set\00", align 1
@.str.235 = private unnamed_addr constant [66 x i8] c"%s:%d: Expected error \22%s:%s\22, no strings available. Assuming ok.\00", align 1
@.str.236 = private unnamed_addr constant [43 x i8] c"%s:%d: Expected error \22%s:%s\22, got \22%s:%s\22\00", align 1

; Function Attrs: nounwind uwtable
define %struct.options_st* @test_get_options() #0 !dbg !71 {
entry:
  ret %struct.options_st* getelementptr inbounds ([9 x %struct.options_st], [9 x %struct.options_st]* @test_get_options.options, i32 0, i32 0), !dbg !202
}

; Function Attrs: nounwind uwtable
define i32 @setup_tests() #0 !dbg !203 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %n, metadata !206, metadata !207), !dbg !208
  %call = call i64 @test_get_argument_count(), !dbg !209
  store i64 %call, i64* %n, align 8, !dbg !208
  %0 = load i64, i64* %n, align 8, !dbg !210
  %cmp = icmp eq i64 %0, 0, !dbg !212
  br i1 %cmp, label %if.then, label %if.end, !dbg !213

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !214
  br label %return, !dbg !214

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %n, align 8, !dbg !215
  %conv = trunc i64 %1 to i32, !dbg !215
  call void @add_all_tests(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i32 0, i32 0), i32 (i32)* @run_file_tests, i32 %conv, i32 1), !dbg !216
  store i32 1, i32* %retval, align 4, !dbg !217
  br label %return, !dbg !217

return:                                           ; preds = %if.end, %if.then
  %2 = load i32, i32* %retval, align 4, !dbg !218
  ret i32 %2, !dbg !218
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i64 @test_get_argument_count() #2

declare void @add_all_tests(i8*, i32 (i32)*, i32, i32) #2

; Function Attrs: nounwind uwtable
define internal i32 @run_file_tests(i32 %i) #0 !dbg !219 {
entry:
  %retval = alloca i32, align 4
  %i.addr = alloca i32, align 4
  %t = alloca %struct.evp_test_st*, align 8
  %testfile = alloca i8*, align 8
  %c = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !222, metadata !207), !dbg !223
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t, metadata !224, metadata !207), !dbg !225
  call void @llvm.dbg.declare(metadata i8** %testfile, metadata !226, metadata !207), !dbg !227
  %0 = load i32, i32* %i.addr, align 4, !dbg !228
  %conv = sext i32 %0 to i64, !dbg !228
  %call = call i8* @test_get_argument(i64 %conv), !dbg !229
  store i8* %call, i8** %testfile, align 8, !dbg !227
  call void @llvm.dbg.declare(metadata i32* %c, metadata !230, metadata !207), !dbg !231
  %call1 = call i8* @CRYPTO_zalloc(i64 4536, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 3009), !dbg !232
  %1 = bitcast i8* %call1 to %struct.evp_test_st*, !dbg !232
  store %struct.evp_test_st* %1, %struct.evp_test_st** %t, align 8, !dbg !234
  %2 = bitcast %struct.evp_test_st* %1 to i8*, !dbg !235
  %call2 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 3009, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.16, i32 0, i32 0), i8* %2), !dbg !236
  %tobool = icmp ne i32 %call2, 0, !dbg !238
  br i1 %tobool, label %if.end, label %if.then, !dbg !239

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !240
  br label %return, !dbg !240

if.end:                                           ; preds = %entry
  %3 = load %struct.evp_test_st*, %struct.evp_test_st** %t, align 8, !dbg !241
  %s = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %3, i32 0, i32 0, !dbg !243
  %4 = load i8*, i8** %testfile, align 8, !dbg !244
  %call3 = call i32 @test_start_file(%struct.stanza_st* %s, i8* %4), !dbg !245
  %tobool4 = icmp ne i32 %call3, 0, !dbg !245
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !246

if.then5:                                         ; preds = %if.end
  %5 = load %struct.evp_test_st*, %struct.evp_test_st** %t, align 8, !dbg !247
  %6 = bitcast %struct.evp_test_st* %5 to i8*, !dbg !247
  call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 3012), !dbg !249
  store i32 0, i32* %retval, align 4, !dbg !250
  br label %return, !dbg !250

if.end6:                                          ; preds = %if.end
  br label %while.cond, !dbg !251

while.cond:                                       ; preds = %if.end20, %if.then13, %if.end6
  %7 = load %struct.evp_test_st*, %struct.evp_test_st** %t, align 8, !dbg !252
  %s7 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %7, i32 0, i32 0, !dbg !254
  %fp = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s7, i32 0, i32 1, !dbg !255
  %8 = load %struct.bio_st*, %struct.bio_st** %fp, align 8, !dbg !255
  %call8 = call i64 @BIO_ctrl(%struct.bio_st* %8, i32 2, i64 0, i8* null), !dbg !256
  %conv9 = trunc i64 %call8 to i32, !dbg !257
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !258
  %lnot = xor i1 %tobool10, true, !dbg !258
  br i1 %lnot, label %while.body, label %while.end, !dbg !259

while.body:                                       ; preds = %while.cond
  %9 = load %struct.evp_test_st*, %struct.evp_test_st** %t, align 8, !dbg !260
  %call11 = call i32 @parse(%struct.evp_test_st* %9), !dbg !262
  store i32 %call11, i32* %c, align 4, !dbg !263
  %10 = load %struct.evp_test_st*, %struct.evp_test_st** %t, align 8, !dbg !264
  %skip = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %10, i32 0, i32 2, !dbg !266
  %11 = load i32, i32* %skip, align 8, !dbg !266
  %tobool12 = icmp ne i32 %11, 0, !dbg !264
  br i1 %tobool12, label %if.then13, label %if.end14, !dbg !267

if.then13:                                        ; preds = %while.body
  br label %while.cond, !dbg !268, !llvm.loop !269

if.end14:                                         ; preds = %while.body
  %12 = load i32, i32* %c, align 4, !dbg !270
  %cmp = icmp eq i32 %12, 0, !dbg !272
  br i1 %cmp, label %if.then18, label %lor.lhs.false, !dbg !273

lor.lhs.false:                                    ; preds = %if.end14
  %13 = load %struct.evp_test_st*, %struct.evp_test_st** %t, align 8, !dbg !274
  %call16 = call i32 @run_test(%struct.evp_test_st* %13), !dbg !276
  %tobool17 = icmp ne i32 %call16, 0, !dbg !276
  br i1 %tobool17, label %if.end20, label %if.then18, !dbg !277

if.then18:                                        ; preds = %lor.lhs.false, %if.end14
  %14 = load %struct.evp_test_st*, %struct.evp_test_st** %t, align 8, !dbg !278
  %s19 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %14, i32 0, i32 0, !dbg !280
  %errors = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s19, i32 0, i32 4, !dbg !281
  %15 = load i32, i32* %errors, align 8, !dbg !282
  %inc = add nsw i32 %15, 1, !dbg !282
  store i32 %inc, i32* %errors, align 8, !dbg !282
  br label %while.end, !dbg !283

if.end20:                                         ; preds = %lor.lhs.false
  br label %while.cond, !dbg !284, !llvm.loop !269

while.end:                                        ; preds = %if.then18, %while.cond
  %16 = load %struct.evp_test_st*, %struct.evp_test_st** %t, align 8, !dbg !286
  %s21 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %16, i32 0, i32 0, !dbg !287
  %call22 = call i32 @test_end_file(%struct.stanza_st* %s21), !dbg !288
  %17 = load %struct.evp_test_st*, %struct.evp_test_st** %t, align 8, !dbg !289
  call void @clear_test(%struct.evp_test_st* %17), !dbg !290
  %18 = load %struct.key_list_st*, %struct.key_list_st** @public_keys, align 8, !dbg !291
  call void @free_key_list(%struct.key_list_st* %18), !dbg !292
  %19 = load %struct.key_list_st*, %struct.key_list_st** @private_keys, align 8, !dbg !293
  call void @free_key_list(%struct.key_list_st* %19), !dbg !294
  %20 = load %struct.evp_test_st*, %struct.evp_test_st** %t, align 8, !dbg !295
  %s23 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %20, i32 0, i32 0, !dbg !296
  %key = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s23, i32 0, i32 9, !dbg !297
  %21 = load %struct.bio_st*, %struct.bio_st** %key, align 8, !dbg !297
  %call24 = call i32 @BIO_free(%struct.bio_st* %21), !dbg !298
  %22 = load %struct.evp_test_st*, %struct.evp_test_st** %t, align 8, !dbg !299
  %s25 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %22, i32 0, i32 0, !dbg !300
  %errors26 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s25, i32 0, i32 4, !dbg !301
  %23 = load i32, i32* %errors26, align 8, !dbg !301
  store i32 %23, i32* %c, align 4, !dbg !302
  %24 = load %struct.evp_test_st*, %struct.evp_test_st** %t, align 8, !dbg !303
  %25 = bitcast %struct.evp_test_st* %24 to i8*, !dbg !303
  call void @CRYPTO_free(i8* %25, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 3032), !dbg !304
  %26 = load i32, i32* %c, align 4, !dbg !305
  %cmp27 = icmp eq i32 %26, 0, !dbg !306
  %conv28 = zext i1 %cmp27 to i32, !dbg !306
  store i32 %conv28, i32* %retval, align 4, !dbg !307
  br label %return, !dbg !307

return:                                           ; preds = %while.end, %if.then5, %if.then
  %27 = load i32, i32* %retval, align 4, !dbg !308
  ret i32 %27, !dbg !308
}

declare i8* @test_get_argument(i64) #2

declare i32 @test_ptr(i8*, i32, i8*, i8*) #2

declare i8* @CRYPTO_zalloc(i64, i8*, i32) #2

declare i32 @test_start_file(%struct.stanza_st*, i8*) #2

declare void @CRYPTO_free(i8*, i8*, i32) #2

declare i64 @BIO_ctrl(%struct.bio_st*, i32, i64, i8*) #2

; Function Attrs: nounwind uwtable
define internal i32 @parse(%struct.evp_test_st* %t) #0 !dbg !309 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %key = alloca %struct.key_list_st*, align 8
  %klist = alloca %struct.key_list_st**, align 8
  %pkey = alloca %struct.evp_pkey_st*, align 8
  %pp = alloca %struct.pair_st*, align 8
  %i = alloca i32, align 4
  %strnid = alloca i8*, align 8
  %keydata = alloca i8*, align 8
  %keybin = alloca i8*, align 8
  %keylen = alloca i64, align 8
  %nid = alloca i32, align 4
  %rv = alloca i32, align 4
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !310, metadata !207), !dbg !311
  call void @llvm.dbg.declare(metadata %struct.key_list_st** %key, metadata !312, metadata !207), !dbg !313
  call void @llvm.dbg.declare(metadata %struct.key_list_st*** %klist, metadata !314, metadata !207), !dbg !316
  call void @llvm.dbg.declare(metadata %struct.evp_pkey_st** %pkey, metadata !317, metadata !207), !dbg !318
  call void @llvm.dbg.declare(metadata %struct.pair_st** %pp, metadata !319, metadata !207), !dbg !321
  call void @llvm.dbg.declare(metadata i32* %i, metadata !322, metadata !207), !dbg !323
  br label %top, !dbg !324

top:                                              ; preds = %if.end132, %entry
  br label %do.body, !dbg !325, !llvm.loop !326

do.body:                                          ; preds = %do.cond, %top
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !327
  %s = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 0, !dbg !330
  %fp = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s, i32 0, i32 1, !dbg !331
  %1 = load %struct.bio_st*, %struct.bio_st** %fp, align 8, !dbg !331
  %call = call i64 @BIO_ctrl(%struct.bio_st* %1, i32 2, i64 0, i8* null), !dbg !332
  %conv = trunc i64 %call to i32, !dbg !333
  %tobool = icmp ne i32 %conv, 0, !dbg !333
  br i1 %tobool, label %if.then, label %if.end, !dbg !334

if.then:                                          ; preds = %do.body
  store i32 -1, i32* %retval, align 4, !dbg !335
  br label %return, !dbg !335

if.end:                                           ; preds = %do.body
  %2 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !336
  call void @clear_test(%struct.evp_test_st* %2), !dbg !337
  %3 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !338
  %s1 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %3, i32 0, i32 0, !dbg !340
  %call2 = call i32 @test_readstanza(%struct.stanza_st* %s1), !dbg !341
  %tobool3 = icmp ne i32 %call2, 0, !dbg !341
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !342

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !343
  br label %return, !dbg !343

if.end5:                                          ; preds = %if.end
  br label %do.cond, !dbg !344

do.cond:                                          ; preds = %if.end5
  %4 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !345
  %s6 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %4, i32 0, i32 0, !dbg !347
  %numpairs = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s6, i32 0, i32 7, !dbg !348
  %5 = load i32, i32* %numpairs, align 4, !dbg !348
  %cmp = icmp eq i32 %5, 0, !dbg !349
  br i1 %cmp, label %do.body, label %do.end, !dbg !350, !llvm.loop !326

do.end:                                           ; preds = %do.cond
  %6 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !351
  %s8 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %6, i32 0, i32 0, !dbg !352
  %pairs = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s8, i32 0, i32 8, !dbg !353
  %arrayidx = getelementptr inbounds [20 x %struct.pair_st], [20 x %struct.pair_st]* %pairs, i64 0, i64 0, !dbg !351
  store %struct.pair_st* %arrayidx, %struct.pair_st** %pp, align 8, !dbg !354
  store %struct.key_list_st** null, %struct.key_list_st*** %klist, align 8, !dbg !355
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %pkey, align 8, !dbg !356
  %7 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !357
  %key9 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %7, i32 0, i32 0, !dbg !359
  %8 = load i8*, i8** %key9, align 8, !dbg !359
  %call10 = call i32 @strcmp(i8* %8, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i32 0, i32 0)) #7, !dbg !360
  %cmp11 = icmp eq i32 %call10, 0, !dbg !361
  br i1 %cmp11, label %if.then13, label %if.else, !dbg !362

if.then13:                                        ; preds = %do.end
  %9 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !363
  %s14 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %9, i32 0, i32 0, !dbg !365
  %key15 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s14, i32 0, i32 9, !dbg !366
  %10 = load %struct.bio_st*, %struct.bio_st** %key15, align 8, !dbg !366
  %call16 = call %struct.evp_pkey_st* @PEM_read_bio_PrivateKey(%struct.bio_st* %10, %struct.evp_pkey_st** null, i32 (i8*, i32, i32, i8*)* null, i8* null), !dbg !367
  store %struct.evp_pkey_st* %call16, %struct.evp_pkey_st** %pkey, align 8, !dbg !368
  %11 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !369
  %cmp17 = icmp eq %struct.evp_pkey_st* %11, null, !dbg !371
  br i1 %cmp17, label %land.lhs.true, label %if.end22, !dbg !372

land.lhs.true:                                    ; preds = %if.then13
  %call19 = call i32 @key_unsupported(), !dbg !373
  %tobool20 = icmp ne i32 %call19, 0, !dbg !373
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !375

if.then21:                                        ; preds = %land.lhs.true
  %12 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !376
  call void @EVP_PKEY_free(%struct.evp_pkey_st* %12), !dbg !378
  %13 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !379
  %value = getelementptr inbounds %struct.pair_st, %struct.pair_st* %13, i32 0, i32 1, !dbg !380
  %14 = load i8*, i8** %value, align 8, !dbg !380
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2863, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.18, i32 0, i32 0), i8* %14), !dbg !381
  call void @test_openssl_errors(), !dbg !382
  store i32 0, i32* %retval, align 4, !dbg !383
  br label %return, !dbg !383

if.end22:                                         ; preds = %land.lhs.true, %if.then13
  store %struct.key_list_st** @private_keys, %struct.key_list_st*** %klist, align 8, !dbg !384
  br label %if.end99, !dbg !385

if.else:                                          ; preds = %do.end
  %15 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !386
  %key23 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %15, i32 0, i32 0, !dbg !389
  %16 = load i8*, i8** %key23, align 8, !dbg !389
  %call24 = call i32 @strcmp(i8* %16, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i32 0, i32 0)) #7, !dbg !390
  %cmp25 = icmp eq i32 %call24, 0, !dbg !391
  br i1 %cmp25, label %if.then27, label %if.else39, !dbg !390

if.then27:                                        ; preds = %if.else
  %17 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !392
  %s28 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %17, i32 0, i32 0, !dbg !394
  %key29 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s28, i32 0, i32 9, !dbg !395
  %18 = load %struct.bio_st*, %struct.bio_st** %key29, align 8, !dbg !395
  %call30 = call %struct.evp_pkey_st* @PEM_read_bio_PUBKEY(%struct.bio_st* %18, %struct.evp_pkey_st** null, i32 (i8*, i32, i32, i8*)* null, i8* null), !dbg !396
  store %struct.evp_pkey_st* %call30, %struct.evp_pkey_st** %pkey, align 8, !dbg !397
  %19 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !398
  %cmp31 = icmp eq %struct.evp_pkey_st* %19, null, !dbg !400
  br i1 %cmp31, label %land.lhs.true33, label %if.end38, !dbg !401

land.lhs.true33:                                  ; preds = %if.then27
  %call34 = call i32 @key_unsupported(), !dbg !402
  %tobool35 = icmp ne i32 %call34, 0, !dbg !402
  br i1 %tobool35, label %if.end38, label %if.then36, !dbg !404

if.then36:                                        ; preds = %land.lhs.true33
  %20 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !405
  call void @EVP_PKEY_free(%struct.evp_pkey_st* %20), !dbg !407
  %21 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !408
  %value37 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %21, i32 0, i32 1, !dbg !409
  %22 = load i8*, i8** %value37, align 8, !dbg !409
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2872, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.20, i32 0, i32 0), i8* %22), !dbg !410
  call void @test_openssl_errors(), !dbg !411
  store i32 0, i32* %retval, align 4, !dbg !412
  br label %return, !dbg !412

if.end38:                                         ; preds = %land.lhs.true33, %if.then27
  store %struct.key_list_st** @public_keys, %struct.key_list_st*** %klist, align 8, !dbg !413
  br label %if.end98, !dbg !414

if.else39:                                        ; preds = %if.else
  %23 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !415
  %key40 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %23, i32 0, i32 0, !dbg !418
  %24 = load i8*, i8** %key40, align 8, !dbg !418
  %call41 = call i32 @strcmp(i8* %24, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i32 0, i32 0)) #7, !dbg !419
  %cmp42 = icmp eq i32 %call41, 0, !dbg !420
  br i1 %cmp42, label %if.then48, label %lor.lhs.false, !dbg !421

lor.lhs.false:                                    ; preds = %if.else39
  %25 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !422
  %key44 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %25, i32 0, i32 0, !dbg !423
  %26 = load i8*, i8** %key44, align 8, !dbg !423
  %call45 = call i32 @strcmp(i8* %26, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0)) #7, !dbg !424
  %cmp46 = icmp eq i32 %call45, 0, !dbg !425
  br i1 %cmp46, label %if.then48, label %if.end97, !dbg !426

if.then48:                                        ; preds = %lor.lhs.false, %if.else39
  call void @llvm.dbg.declare(metadata i8** %strnid, metadata !428, metadata !207), !dbg !430
  store i8* null, i8** %strnid, align 8, !dbg !430
  call void @llvm.dbg.declare(metadata i8** %keydata, metadata !431, metadata !207), !dbg !432
  store i8* null, i8** %keydata, align 8, !dbg !432
  call void @llvm.dbg.declare(metadata i8** %keybin, metadata !433, metadata !207), !dbg !434
  call void @llvm.dbg.declare(metadata i64* %keylen, metadata !435, metadata !207), !dbg !436
  call void @llvm.dbg.declare(metadata i32* %nid, metadata !437, metadata !207), !dbg !438
  %27 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !439
  %key49 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %27, i32 0, i32 0, !dbg !441
  %28 = load i8*, i8** %key49, align 8, !dbg !441
  %call50 = call i32 @strcmp(i8* %28, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i32 0, i32 0)) #7, !dbg !442
  %cmp51 = icmp eq i32 %call50, 0, !dbg !443
  br i1 %cmp51, label %if.then53, label %if.else54, !dbg !444

if.then53:                                        ; preds = %if.then48
  store %struct.key_list_st** @private_keys, %struct.key_list_st*** %klist, align 8, !dbg !445
  br label %if.end55, !dbg !446

if.else54:                                        ; preds = %if.then48
  store %struct.key_list_st** @public_keys, %struct.key_list_st*** %klist, align 8, !dbg !447
  br label %if.end55

if.end55:                                         ; preds = %if.else54, %if.then53
  %29 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !448
  %value56 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %29, i32 0, i32 1, !dbg !449
  %30 = load i8*, i8** %value56, align 8, !dbg !449
  %call57 = call i8* @strchr(i8* %30, i32 58) #7, !dbg !450
  store i8* %call57, i8** %strnid, align 8, !dbg !451
  %31 = load i8*, i8** %strnid, align 8, !dbg !452
  %cmp58 = icmp ne i8* %31, null, !dbg !454
  br i1 %cmp58, label %if.then60, label %if.end67, !dbg !455

if.then60:                                        ; preds = %if.end55
  %32 = load i8*, i8** %strnid, align 8, !dbg !456
  %incdec.ptr = getelementptr inbounds i8, i8* %32, i32 1, !dbg !456
  store i8* %incdec.ptr, i8** %strnid, align 8, !dbg !456
  store i8 0, i8* %32, align 1, !dbg !458
  %33 = load i8*, i8** %strnid, align 8, !dbg !459
  %call61 = call i8* @strchr(i8* %33, i32 58) #7, !dbg !460
  store i8* %call61, i8** %keydata, align 8, !dbg !461
  %34 = load i8*, i8** %keydata, align 8, !dbg !462
  %cmp62 = icmp ne i8* %34, null, !dbg !464
  br i1 %cmp62, label %if.then64, label %if.end66, !dbg !465

if.then64:                                        ; preds = %if.then60
  %35 = load i8*, i8** %keydata, align 8, !dbg !466
  %incdec.ptr65 = getelementptr inbounds i8, i8* %35, i32 1, !dbg !466
  store i8* %incdec.ptr65, i8** %keydata, align 8, !dbg !466
  store i8 0, i8* %35, align 1, !dbg !467
  br label %if.end66, !dbg !468

if.end66:                                         ; preds = %if.then64, %if.then60
  br label %if.end67, !dbg !469

if.end67:                                         ; preds = %if.end66, %if.end55
  %36 = load i8*, i8** %keydata, align 8, !dbg !470
  %cmp68 = icmp eq i8* %36, null, !dbg !472
  br i1 %cmp68, label %if.then70, label %if.end72, !dbg !473

if.then70:                                        ; preds = %if.end67
  %37 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !474
  %key71 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %37, i32 0, i32 0, !dbg !476
  %38 = load i8*, i8** %key71, align 8, !dbg !476
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2897, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.23, i32 0, i32 0), i8* %38), !dbg !477
  store i32 0, i32* %retval, align 4, !dbg !478
  br label %return, !dbg !478

if.end72:                                         ; preds = %if.end67
  %39 = load i8*, i8** %strnid, align 8, !dbg !479
  %call73 = call i32 @OBJ_txt2nid(i8* %39), !dbg !480
  store i32 %call73, i32* %nid, align 4, !dbg !481
  %40 = load i32, i32* %nid, align 4, !dbg !482
  %cmp74 = icmp eq i32 %40, 0, !dbg !484
  br i1 %cmp74, label %if.then76, label %if.end77, !dbg !485

if.then76:                                        ; preds = %if.end72
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2903, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.24, i32 0, i32 0)), !dbg !486
  store i32 0, i32* %retval, align 4, !dbg !488
  br label %return, !dbg !488

if.end77:                                         ; preds = %if.end72
  %41 = load i8*, i8** %keydata, align 8, !dbg !489
  %call78 = call i32 @parse_bin(i8* %41, i8** %keybin, i64* %keylen), !dbg !491
  %tobool79 = icmp ne i32 %call78, 0, !dbg !491
  br i1 %tobool79, label %if.end81, label %if.then80, !dbg !492

if.then80:                                        ; preds = %if.end77
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2907, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.25, i32 0, i32 0)), !dbg !493
  store i32 0, i32* %retval, align 4, !dbg !495
  br label %return, !dbg !495

if.end81:                                         ; preds = %if.end77
  %42 = load %struct.key_list_st**, %struct.key_list_st*** %klist, align 8, !dbg !496
  %cmp82 = icmp eq %struct.key_list_st** %42, @private_keys, !dbg !498
  br i1 %cmp82, label %if.then84, label %if.else86, !dbg !499

if.then84:                                        ; preds = %if.end81
  %43 = load i32, i32* %nid, align 4, !dbg !500
  %44 = load i8*, i8** %keybin, align 8, !dbg !501
  %45 = load i64, i64* %keylen, align 8, !dbg !502
  %call85 = call %struct.evp_pkey_st* @EVP_PKEY_new_raw_private_key(i32 %43, %struct.engine_st* null, i8* %44, i64 %45), !dbg !503
  store %struct.evp_pkey_st* %call85, %struct.evp_pkey_st** %pkey, align 8, !dbg !504
  br label %if.end88, !dbg !505

if.else86:                                        ; preds = %if.end81
  %46 = load i32, i32* %nid, align 4, !dbg !506
  %47 = load i8*, i8** %keybin, align 8, !dbg !507
  %48 = load i64, i64* %keylen, align 8, !dbg !508
  %call87 = call %struct.evp_pkey_st* @EVP_PKEY_new_raw_public_key(i32 %46, %struct.engine_st* null, i8* %47, i64 %48), !dbg !509
  store %struct.evp_pkey_st* %call87, %struct.evp_pkey_st** %pkey, align 8, !dbg !510
  br label %if.end88

if.end88:                                         ; preds = %if.else86, %if.then84
  %49 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !511
  %cmp89 = icmp eq %struct.evp_pkey_st* %49, null, !dbg !513
  br i1 %cmp89, label %land.lhs.true91, label %if.end96, !dbg !514

land.lhs.true91:                                  ; preds = %if.end88
  %call92 = call i32 @key_unsupported(), !dbg !515
  %tobool93 = icmp ne i32 %call92, 0, !dbg !515
  br i1 %tobool93, label %if.end96, label %if.then94, !dbg !517

if.then94:                                        ; preds = %land.lhs.true91
  %50 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !518
  %key95 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %50, i32 0, i32 0, !dbg !520
  %51 = load i8*, i8** %key95, align 8, !dbg !520
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2915, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.26, i32 0, i32 0), i8* %51), !dbg !521
  %52 = load i8*, i8** %keybin, align 8, !dbg !522
  call void @CRYPTO_free(i8* %52, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2916), !dbg !523
  call void @test_openssl_errors(), !dbg !524
  store i32 0, i32* %retval, align 4, !dbg !525
  br label %return, !dbg !525

if.end96:                                         ; preds = %land.lhs.true91, %if.end88
  %53 = load i8*, i8** %keybin, align 8, !dbg !526
  call void @CRYPTO_free(i8* %53, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2920), !dbg !527
  br label %if.end97, !dbg !528

if.end97:                                         ; preds = %if.end96, %lor.lhs.false
  br label %if.end98

if.end98:                                         ; preds = %if.end97, %if.end38
  br label %if.end99

if.end99:                                         ; preds = %if.end98, %if.end22
  %54 = load %struct.key_list_st**, %struct.key_list_st*** %klist, align 8, !dbg !529
  %cmp100 = icmp ne %struct.key_list_st** %54, null, !dbg !531
  br i1 %cmp100, label %if.then102, label %if.end133, !dbg !532

if.then102:                                       ; preds = %if.end99
  %55 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !533
  %value103 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %55, i32 0, i32 1, !dbg !536
  %56 = load i8*, i8** %value103, align 8, !dbg !536
  %57 = load %struct.key_list_st**, %struct.key_list_st*** %klist, align 8, !dbg !537
  %58 = load %struct.key_list_st*, %struct.key_list_st** %57, align 8, !dbg !538
  %call104 = call i32 @find_key(%struct.evp_pkey_st** null, i8* %56, %struct.key_list_st* %58), !dbg !539
  %tobool105 = icmp ne i32 %call104, 0, !dbg !539
  br i1 %tobool105, label %if.then106, label %if.end108, !dbg !540

if.then106:                                       ; preds = %if.then102
  %59 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !541
  %value107 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %59, i32 0, i32 1, !dbg !543
  %60 = load i8*, i8** %value107, align 8, !dbg !543
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2926, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.27, i32 0, i32 0), i8* %60), !dbg !544
  store i32 0, i32* %retval, align 4, !dbg !545
  br label %return, !dbg !545

if.end108:                                        ; preds = %if.then102
  %call109 = call i8* @CRYPTO_malloc(i64 24, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2929), !dbg !546
  %61 = bitcast i8* %call109 to %struct.key_list_st*, !dbg !546
  store %struct.key_list_st* %61, %struct.key_list_st** %key, align 8, !dbg !548
  %62 = bitcast %struct.key_list_st* %61 to i8*, !dbg !549
  %call110 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2929, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.28, i32 0, i32 0), i8* %62), !dbg !550
  %tobool111 = icmp ne i32 %call110, 0, !dbg !552
  br i1 %tobool111, label %if.end113, label %if.then112, !dbg !553

if.then112:                                       ; preds = %if.end108
  store i32 0, i32* %retval, align 4, !dbg !554
  br label %return, !dbg !554

if.end113:                                        ; preds = %if.end108
  %63 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !555
  %call114 = call i8* @take_value(%struct.pair_st* %63), !dbg !556
  %64 = load %struct.key_list_st*, %struct.key_list_st** %key, align 8, !dbg !557
  %name = getelementptr inbounds %struct.key_list_st, %struct.key_list_st* %64, i32 0, i32 0, !dbg !558
  store i8* %call114, i8** %name, align 8, !dbg !559
  %65 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !560
  %cmp115 = icmp ne %struct.evp_pkey_st* %65, null, !dbg !562
  br i1 %cmp115, label %land.lhs.true117, label %if.end124, !dbg !563

land.lhs.true117:                                 ; preds = %if.end113
  %66 = load %struct.key_list_st*, %struct.key_list_st** %key, align 8, !dbg !564
  %name118 = getelementptr inbounds %struct.key_list_st, %struct.key_list_st* %66, i32 0, i32 0, !dbg !566
  %67 = load i8*, i8** %name118, align 8, !dbg !566
  %call119 = call i8* @strstr(i8* %67, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i32 0, i32 0)) #7, !dbg !567
  %cmp120 = icmp ne i8* %call119, null, !dbg !568
  br i1 %cmp120, label %if.then122, label %if.end124, !dbg !569

if.then122:                                       ; preds = %land.lhs.true117
  %68 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !570
  %call123 = call i32 @EVP_PKEY_set_alias_type(%struct.evp_pkey_st* %68, i32 1172), !dbg !572
  br label %if.end124, !dbg !573

if.end124:                                        ; preds = %if.then122, %land.lhs.true117, %if.end113
  %69 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !574
  %70 = load %struct.key_list_st*, %struct.key_list_st** %key, align 8, !dbg !575
  %key125 = getelementptr inbounds %struct.key_list_st, %struct.key_list_st* %70, i32 0, i32 1, !dbg !576
  store %struct.evp_pkey_st* %69, %struct.evp_pkey_st** %key125, align 8, !dbg !577
  %71 = load %struct.key_list_st**, %struct.key_list_st*** %klist, align 8, !dbg !578
  %72 = load %struct.key_list_st*, %struct.key_list_st** %71, align 8, !dbg !579
  %73 = load %struct.key_list_st*, %struct.key_list_st** %key, align 8, !dbg !580
  %next = getelementptr inbounds %struct.key_list_st, %struct.key_list_st* %73, i32 0, i32 2, !dbg !581
  store %struct.key_list_st* %72, %struct.key_list_st** %next, align 8, !dbg !582
  %74 = load %struct.key_list_st*, %struct.key_list_st** %key, align 8, !dbg !583
  %75 = load %struct.key_list_st**, %struct.key_list_st*** %klist, align 8, !dbg !584
  store %struct.key_list_st* %74, %struct.key_list_st** %75, align 8, !dbg !585
  %76 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !586
  %s126 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %76, i32 0, i32 0, !dbg !588
  %numpairs127 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s126, i32 0, i32 7, !dbg !589
  %77 = load i32, i32* %numpairs127, align 4, !dbg !589
  %cmp128 = icmp ne i32 %77, 1, !dbg !590
  br i1 %cmp128, label %if.then130, label %if.end132, !dbg !591

if.then130:                                       ; preds = %if.end124
  %78 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !592
  %s131 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %78, i32 0, i32 0, !dbg !593
  %curr = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s131, i32 0, i32 2, !dbg !594
  %79 = load i32, i32* %curr, align 8, !dbg !594
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2949, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.30, i32 0, i32 0), i32 %79), !dbg !595
  br label %if.end132, !dbg !595

if.end132:                                        ; preds = %if.then130, %if.end124
  br label %top, !dbg !596

if.end133:                                        ; preds = %if.end99
  %80 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !597
  %key134 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %80, i32 0, i32 0, !dbg !599
  %81 = load i8*, i8** %key134, align 8, !dbg !599
  %call135 = call %struct.evp_test_method_st* @find_test(i8* %81), !dbg !600
  %82 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !601
  %meth = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %82, i32 0, i32 3, !dbg !602
  store %struct.evp_test_method_st* %call135, %struct.evp_test_method_st** %meth, align 8, !dbg !603
  %83 = bitcast %struct.evp_test_method_st* %call135 to i8*, !dbg !601
  %call136 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2954, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.31, i32 0, i32 0), i8* %83), !dbg !604
  %tobool137 = icmp ne i32 %call136, 0, !dbg !606
  br i1 %tobool137, label %if.end139, label %if.then138, !dbg !607

if.then138:                                       ; preds = %if.end133
  store i32 0, i32* %retval, align 4, !dbg !608
  br label %return, !dbg !608

if.end139:                                        ; preds = %if.end133
  %84 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !609
  %meth140 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %84, i32 0, i32 3, !dbg !611
  %85 = load %struct.evp_test_method_st*, %struct.evp_test_method_st** %meth140, align 8, !dbg !611
  %init = getelementptr inbounds %struct.evp_test_method_st, %struct.evp_test_method_st* %85, i32 0, i32 1, !dbg !612
  %86 = load i32 (%struct.evp_test_st*, i8*)*, i32 (%struct.evp_test_st*, i8*)** %init, align 8, !dbg !612
  %87 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !613
  %88 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !614
  %value141 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %88, i32 0, i32 1, !dbg !615
  %89 = load i8*, i8** %value141, align 8, !dbg !615
  %call142 = call i32 %86(%struct.evp_test_st* %87, i8* %89), !dbg !609
  %tobool143 = icmp ne i32 %call142, 0, !dbg !609
  br i1 %tobool143, label %if.end147, label %if.then144, !dbg !616

if.then144:                                       ; preds = %if.end139
  %90 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !617
  %key145 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %90, i32 0, i32 0, !dbg !619
  %91 = load i8*, i8** %key145, align 8, !dbg !619
  %92 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !620
  %value146 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %92, i32 0, i32 1, !dbg !621
  %93 = load i8*, i8** %value146, align 8, !dbg !621
  call void (i8*, i32, i8*, ...) @test_error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2957, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.32, i32 0, i32 0), i8* %91, i8* %93), !dbg !622
  store i32 0, i32* %retval, align 4, !dbg !623
  br label %return, !dbg !623

if.end147:                                        ; preds = %if.end139
  %94 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !624
  %skip = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %94, i32 0, i32 2, !dbg !626
  %95 = load i32, i32* %skip, align 8, !dbg !626
  %cmp148 = icmp eq i32 %95, 1, !dbg !627
  br i1 %cmp148, label %if.then150, label %if.end151, !dbg !628

if.then150:                                       ; preds = %if.end147
  store i32 0, i32* %retval, align 4, !dbg !629
  br label %return, !dbg !629

if.end151:                                        ; preds = %if.end147
  %96 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !631
  %incdec.ptr152 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %96, i32 1, !dbg !631
  store %struct.pair_st* %incdec.ptr152, %struct.pair_st** %pp, align 8, !dbg !631
  store i32 1, i32* %i, align 4, !dbg !633
  br label %for.cond, !dbg !634

for.cond:                                         ; preds = %for.inc, %if.end151
  %97 = load i32, i32* %i, align 4, !dbg !635
  %98 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !638
  %s153 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %98, i32 0, i32 0, !dbg !639
  %numpairs154 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s153, i32 0, i32 7, !dbg !640
  %99 = load i32, i32* %numpairs154, align 4, !dbg !640
  %cmp155 = icmp slt i32 %97, %99, !dbg !641
  br i1 %cmp155, label %for.body, label %for.end, !dbg !642

for.body:                                         ; preds = %for.cond
  %100 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !643
  %key157 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %100, i32 0, i32 0, !dbg !646
  %101 = load i8*, i8** %key157, align 8, !dbg !646
  %call158 = call i32 @strcmp(i8* %101, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i32 0, i32 0)) #7, !dbg !647
  %cmp159 = icmp eq i32 %call158, 0, !dbg !648
  br i1 %cmp159, label %if.then161, label %if.else170, !dbg !649

if.then161:                                       ; preds = %for.body
  %102 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !650
  %expected_err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %102, i32 0, i32 6, !dbg !653
  %103 = load i8*, i8** %expected_err, align 8, !dbg !653
  %cmp162 = icmp ne i8* %103, null, !dbg !654
  br i1 %cmp162, label %if.then164, label %if.end167, !dbg !655

if.then164:                                       ; preds = %if.then161
  %104 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !656
  %s165 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %104, i32 0, i32 0, !dbg !658
  %curr166 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s165, i32 0, i32 2, !dbg !659
  %105 = load i32, i32* %curr166, align 8, !dbg !659
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2968, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.34, i32 0, i32 0), i32 %105), !dbg !660
  store i32 0, i32* %retval, align 4, !dbg !661
  br label %return, !dbg !661

if.end167:                                        ; preds = %if.then161
  %106 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !662
  %call168 = call i8* @take_value(%struct.pair_st* %106), !dbg !663
  %107 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !664
  %expected_err169 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %107, i32 0, i32 6, !dbg !665
  store i8* %call168, i8** %expected_err169, align 8, !dbg !666
  br label %if.end220, !dbg !667

if.else170:                                       ; preds = %for.body
  %108 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !668
  %key171 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %108, i32 0, i32 0, !dbg !671
  %109 = load i8*, i8** %key171, align 8, !dbg !671
  %call172 = call i32 @strcmp(i8* %109, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i32 0, i32 0)) #7, !dbg !672
  %cmp173 = icmp eq i32 %call172, 0, !dbg !673
  br i1 %cmp173, label %if.then175, label %if.else184, !dbg !672

if.then175:                                       ; preds = %if.else170
  %110 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !674
  %func = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %110, i32 0, i32 7, !dbg !677
  %111 = load i8*, i8** %func, align 8, !dbg !677
  %cmp176 = icmp ne i8* %111, null, !dbg !678
  br i1 %cmp176, label %if.then178, label %if.end181, !dbg !679

if.then178:                                       ; preds = %if.then175
  %112 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !680
  %s179 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %112, i32 0, i32 0, !dbg !682
  %curr180 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s179, i32 0, i32 2, !dbg !683
  %113 = load i32, i32* %curr180, align 8, !dbg !683
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2974, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.36, i32 0, i32 0), i32 %113), !dbg !684
  store i32 0, i32* %retval, align 4, !dbg !685
  br label %return, !dbg !685

if.end181:                                        ; preds = %if.then175
  %114 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !686
  %call182 = call i8* @take_value(%struct.pair_st* %114), !dbg !687
  %115 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !688
  %func183 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %115, i32 0, i32 7, !dbg !689
  store i8* %call182, i8** %func183, align 8, !dbg !690
  br label %if.end219, !dbg !691

if.else184:                                       ; preds = %if.else170
  %116 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !692
  %key185 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %116, i32 0, i32 0, !dbg !695
  %117 = load i8*, i8** %key185, align 8, !dbg !695
  %call186 = call i32 @strcmp(i8* %117, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.37, i32 0, i32 0)) #7, !dbg !696
  %cmp187 = icmp eq i32 %call186, 0, !dbg !697
  br i1 %cmp187, label %if.then189, label %if.else198, !dbg !696

if.then189:                                       ; preds = %if.else184
  %118 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !698
  %reason = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %118, i32 0, i32 8, !dbg !701
  %119 = load i8*, i8** %reason, align 8, !dbg !701
  %cmp190 = icmp ne i8* %119, null, !dbg !702
  br i1 %cmp190, label %if.then192, label %if.end195, !dbg !703

if.then192:                                       ; preds = %if.then189
  %120 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !704
  %s193 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %120, i32 0, i32 0, !dbg !706
  %curr194 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s193, i32 0, i32 2, !dbg !707
  %121 = load i32, i32* %curr194, align 8, !dbg !707
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2980, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.38, i32 0, i32 0), i32 %121), !dbg !708
  store i32 0, i32* %retval, align 4, !dbg !709
  br label %return, !dbg !709

if.end195:                                        ; preds = %if.then189
  %122 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !710
  %call196 = call i8* @take_value(%struct.pair_st* %122), !dbg !711
  %123 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !712
  %reason197 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %123, i32 0, i32 8, !dbg !713
  store i8* %call196, i8** %reason197, align 8, !dbg !714
  br label %if.end218, !dbg !715

if.else198:                                       ; preds = %if.else184
  call void @llvm.dbg.declare(metadata i32* %rv, metadata !716, metadata !207), !dbg !718
  %124 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !719
  %meth199 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %124, i32 0, i32 3, !dbg !720
  %125 = load %struct.evp_test_method_st*, %struct.evp_test_method_st** %meth199, align 8, !dbg !720
  %parse = getelementptr inbounds %struct.evp_test_method_st, %struct.evp_test_method_st* %125, i32 0, i32 3, !dbg !721
  %126 = load i32 (%struct.evp_test_st*, i8*, i8*)*, i32 (%struct.evp_test_st*, i8*, i8*)** %parse, align 8, !dbg !721
  %127 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !722
  %128 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !723
  %key200 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %128, i32 0, i32 0, !dbg !724
  %129 = load i8*, i8** %key200, align 8, !dbg !724
  %130 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !725
  %value201 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %130, i32 0, i32 1, !dbg !726
  %131 = load i8*, i8** %value201, align 8, !dbg !726
  %call202 = call i32 %126(%struct.evp_test_st* %127, i8* %129, i8* %131), !dbg !719
  store i32 %call202, i32* %rv, align 4, !dbg !718
  %132 = load i32, i32* %rv, align 4, !dbg !727
  %cmp203 = icmp eq i32 %132, 0, !dbg !729
  br i1 %cmp203, label %if.then205, label %if.end209, !dbg !730

if.then205:                                       ; preds = %if.else198
  %133 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !731
  %s206 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %133, i32 0, i32 0, !dbg !733
  %curr207 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s206, i32 0, i32 2, !dbg !734
  %134 = load i32, i32* %curr207, align 8, !dbg !734
  %135 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !735
  %key208 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %135, i32 0, i32 0, !dbg !736
  %136 = load i8*, i8** %key208, align 8, !dbg !736
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2989, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.39, i32 0, i32 0), i32 %134, i8* %136), !dbg !737
  store i32 0, i32* %retval, align 4, !dbg !738
  br label %return, !dbg !738

if.end209:                                        ; preds = %if.else198
  %137 = load i32, i32* %rv, align 4, !dbg !739
  %cmp210 = icmp slt i32 %137, 0, !dbg !741
  br i1 %cmp210, label %if.then212, label %if.end217, !dbg !742

if.then212:                                       ; preds = %if.end209
  %138 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !743
  %s213 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %138, i32 0, i32 0, !dbg !745
  %curr214 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s213, i32 0, i32 2, !dbg !746
  %139 = load i32, i32* %curr214, align 8, !dbg !746
  %140 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !747
  %key215 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %140, i32 0, i32 0, !dbg !748
  %141 = load i8*, i8** %key215, align 8, !dbg !748
  %142 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !749
  %value216 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %142, i32 0, i32 1, !dbg !750
  %143 = load i8*, i8** %value216, align 8, !dbg !750
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2994, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.40, i32 0, i32 0), i32 %139, i8* %141, i8* %143), !dbg !751
  store i32 0, i32* %retval, align 4, !dbg !752
  br label %return, !dbg !752

if.end217:                                        ; preds = %if.end209
  br label %if.end218

if.end218:                                        ; preds = %if.end217, %if.end195
  br label %if.end219

if.end219:                                        ; preds = %if.end218, %if.end181
  br label %if.end220

if.end220:                                        ; preds = %if.end219, %if.end167
  br label %for.inc, !dbg !753

for.inc:                                          ; preds = %if.end220
  %144 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !754
  %incdec.ptr221 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %144, i32 1, !dbg !754
  store %struct.pair_st* %incdec.ptr221, %struct.pair_st** %pp, align 8, !dbg !754
  %145 = load i32, i32* %i, align 4, !dbg !756
  %inc = add nsw i32 %145, 1, !dbg !756
  store i32 %inc, i32* %i, align 4, !dbg !756
  br label %for.cond, !dbg !757, !llvm.loop !758

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !760
  br label %return, !dbg !760

return:                                           ; preds = %for.end, %if.then212, %if.then205, %if.then192, %if.then178, %if.then164, %if.then150, %if.then144, %if.then138, %if.then112, %if.then106, %if.then94, %if.then80, %if.then76, %if.then70, %if.then36, %if.then21, %if.then4, %if.then
  %146 = load i32, i32* %retval, align 4, !dbg !761
  ret i32 %146, !dbg !761
}

; Function Attrs: nounwind uwtable
define internal i32 @run_test(%struct.evp_test_st* %t) #0 !dbg !762 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !763, metadata !207), !dbg !764
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !765
  %meth = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 3, !dbg !767
  %1 = load %struct.evp_test_method_st*, %struct.evp_test_method_st** %meth, align 8, !dbg !767
  %cmp = icmp eq %struct.evp_test_method_st* %1, null, !dbg !768
  br i1 %cmp, label %if.then, label %if.end, !dbg !769

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !770
  br label %return, !dbg !770

if.end:                                           ; preds = %entry
  %2 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !771
  %s = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %2, i32 0, i32 0, !dbg !772
  %numtests = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s, i32 0, i32 5, !dbg !773
  %3 = load i32, i32* %numtests, align 4, !dbg !774
  %inc = add nsw i32 %3, 1, !dbg !774
  store i32 %inc, i32* %numtests, align 4, !dbg !774
  %4 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !775
  %skip = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %4, i32 0, i32 2, !dbg !777
  %5 = load i32, i32* %skip, align 8, !dbg !777
  %tobool = icmp ne i32 %5, 0, !dbg !775
  br i1 %tobool, label %if.then1, label %if.else, !dbg !778

if.then1:                                         ; preds = %if.end
  %6 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !779
  %s2 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %6, i32 0, i32 0, !dbg !781
  %numskip = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s2, i32 0, i32 6, !dbg !782
  %7 = load i32, i32* %numskip, align 8, !dbg !783
  %inc3 = add nsw i32 %7, 1, !dbg !783
  store i32 %inc3, i32* %numskip, align 8, !dbg !783
  br label %if.end18, !dbg !784

if.else:                                          ; preds = %if.end
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !785
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %8, i32 0, i32 4, !dbg !788
  %9 = load i8*, i8** %err, align 8, !dbg !788
  %cmp4 = icmp eq i8* %9, null, !dbg !789
  br i1 %cmp4, label %land.lhs.true, label %if.end11, !dbg !790

land.lhs.true:                                    ; preds = %if.else
  %10 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !791
  %meth5 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %10, i32 0, i32 3, !dbg !793
  %11 = load %struct.evp_test_method_st*, %struct.evp_test_method_st** %meth5, align 8, !dbg !793
  %run_test = getelementptr inbounds %struct.evp_test_method_st, %struct.evp_test_method_st* %11, i32 0, i32 4, !dbg !794
  %12 = load i32 (%struct.evp_test_st*)*, i32 (%struct.evp_test_st*)** %run_test, align 8, !dbg !794
  %13 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !795
  %call = call i32 %12(%struct.evp_test_st* %13), !dbg !791
  %cmp6 = icmp ne i32 %call, 1, !dbg !796
  br i1 %cmp6, label %if.then7, label %if.end11, !dbg !797

if.then7:                                         ; preds = %land.lhs.true
  %14 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !798
  %s8 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %14, i32 0, i32 0, !dbg !800
  %test_file = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s8, i32 0, i32 0, !dbg !801
  %15 = load i8*, i8** %test_file, align 8, !dbg !801
  %16 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !802
  %s9 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %16, i32 0, i32 0, !dbg !803
  %start = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s9, i32 0, i32 3, !dbg !804
  %17 = load i32, i32* %start, align 4, !dbg !804
  %18 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !805
  %meth10 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %18, i32 0, i32 3, !dbg !806
  %19 = load %struct.evp_test_method_st*, %struct.evp_test_method_st** %meth10, align 8, !dbg !806
  %name = getelementptr inbounds %struct.evp_test_method_st, %struct.evp_test_method_st* %19, i32 0, i32 0, !dbg !807
  %20 = load i8*, i8** %name, align 8, !dbg !807
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2761, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.228, i32 0, i32 0), i8* %15, i32 %17, i8* %20), !dbg !808
  store i32 0, i32* %retval, align 4, !dbg !809
  br label %return, !dbg !809

if.end11:                                         ; preds = %land.lhs.true, %if.else
  %21 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !810
  %call12 = call i32 @check_test_error(%struct.evp_test_st* %21), !dbg !812
  %tobool13 = icmp ne i32 %call12, 0, !dbg !812
  br i1 %tobool13, label %if.end17, label %if.then14, !dbg !813

if.then14:                                        ; preds = %if.end11
  call void @test_openssl_errors(), !dbg !814
  %22 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !816
  %s15 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %22, i32 0, i32 0, !dbg !817
  %errors = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s15, i32 0, i32 4, !dbg !818
  %23 = load i32, i32* %errors, align 8, !dbg !819
  %inc16 = add nsw i32 %23, 1, !dbg !819
  store i32 %inc16, i32* %errors, align 8, !dbg !819
  br label %if.end17, !dbg !820

if.end17:                                         ; preds = %if.then14, %if.end11
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then1
  store i32 1, i32* %retval, align 4, !dbg !821
  br label %return, !dbg !821

return:                                           ; preds = %if.end18, %if.then7, %if.then
  %24 = load i32, i32* %retval, align 4, !dbg !822
  ret i32 %24, !dbg !822
}

declare i32 @test_end_file(%struct.stanza_st*) #2

; Function Attrs: nounwind uwtable
define internal void @clear_test(%struct.evp_test_st* %t) #0 !dbg !823 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !824, metadata !207), !dbg !825
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !826
  %s = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 0, !dbg !827
  call void @test_clearstanza(%struct.stanza_st* %s), !dbg !828
  call void @ERR_clear_error(), !dbg !829
  %1 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !830
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %1, i32 0, i32 9, !dbg !832
  %2 = load i8*, i8** %data, align 8, !dbg !832
  %cmp = icmp ne i8* %2, null, !dbg !833
  br i1 %cmp, label %if.then, label %if.end6, !dbg !834

if.then:                                          ; preds = %entry
  %3 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !835
  %meth = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %3, i32 0, i32 3, !dbg !838
  %4 = load %struct.evp_test_method_st*, %struct.evp_test_method_st** %meth, align 8, !dbg !838
  %cmp1 = icmp ne %struct.evp_test_method_st* %4, null, !dbg !839
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !840

if.then2:                                         ; preds = %if.then
  %5 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !841
  %meth3 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %5, i32 0, i32 3, !dbg !842
  %6 = load %struct.evp_test_method_st*, %struct.evp_test_method_st** %meth3, align 8, !dbg !842
  %cleanup = getelementptr inbounds %struct.evp_test_method_st, %struct.evp_test_method_st* %6, i32 0, i32 2, !dbg !843
  %7 = load void (%struct.evp_test_st*)*, void (%struct.evp_test_st*)** %cleanup, align 8, !dbg !843
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !844
  call void %7(%struct.evp_test_st* %8), !dbg !841
  br label %if.end, !dbg !841

if.end:                                           ; preds = %if.then2, %if.then
  %9 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !845
  %data4 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %9, i32 0, i32 9, !dbg !846
  %10 = load i8*, i8** %data4, align 8, !dbg !846
  call void @CRYPTO_free(i8* %10, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2664), !dbg !847
  %11 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !848
  %data5 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %11, i32 0, i32 9, !dbg !849
  store i8* null, i8** %data5, align 8, !dbg !850
  br label %if.end6, !dbg !851

if.end6:                                          ; preds = %if.end, %entry
  %12 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !852
  %expected_err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %12, i32 0, i32 6, !dbg !853
  %13 = load i8*, i8** %expected_err, align 8, !dbg !853
  call void @CRYPTO_free(i8* %13, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2667), !dbg !854
  %14 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !855
  %expected_err7 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %14, i32 0, i32 6, !dbg !856
  store i8* null, i8** %expected_err7, align 8, !dbg !857
  %15 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !858
  %func = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %15, i32 0, i32 7, !dbg !859
  %16 = load i8*, i8** %func, align 8, !dbg !859
  call void @CRYPTO_free(i8* %16, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2669), !dbg !860
  %17 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !861
  %func8 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %17, i32 0, i32 7, !dbg !862
  store i8* null, i8** %func8, align 8, !dbg !863
  %18 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !864
  %reason = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %18, i32 0, i32 8, !dbg !865
  %19 = load i8*, i8** %reason, align 8, !dbg !865
  call void @CRYPTO_free(i8* %19, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2671), !dbg !866
  %20 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !867
  %reason9 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %20, i32 0, i32 8, !dbg !868
  store i8* null, i8** %reason9, align 8, !dbg !869
  %21 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !870
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %21, i32 0, i32 4, !dbg !871
  store i8* null, i8** %err, align 8, !dbg !872
  %22 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !873
  %skip = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %22, i32 0, i32 2, !dbg !874
  store i32 0, i32* %skip, align 8, !dbg !875
  %23 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !876
  %meth10 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %23, i32 0, i32 3, !dbg !877
  store %struct.evp_test_method_st* null, %struct.evp_test_method_st** %meth10, align 8, !dbg !878
  ret void, !dbg !879
}

; Function Attrs: nounwind uwtable
define internal void @free_key_list(%struct.key_list_st* %lst) #0 !dbg !880 {
entry:
  %lst.addr = alloca %struct.key_list_st*, align 8
  %next = alloca %struct.key_list_st*, align 8
  store %struct.key_list_st* %lst, %struct.key_list_st** %lst.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.key_list_st** %lst.addr, metadata !883, metadata !207), !dbg !884
  br label %while.cond, !dbg !885

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.key_list_st*, %struct.key_list_st** %lst.addr, align 8, !dbg !886
  %cmp = icmp ne %struct.key_list_st* %0, null, !dbg !888
  br i1 %cmp, label %while.body, label %while.end, !dbg !889

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.key_list_st** %next, metadata !890, metadata !207), !dbg !892
  %1 = load %struct.key_list_st*, %struct.key_list_st** %lst.addr, align 8, !dbg !893
  %next1 = getelementptr inbounds %struct.key_list_st, %struct.key_list_st* %1, i32 0, i32 2, !dbg !894
  %2 = load %struct.key_list_st*, %struct.key_list_st** %next1, align 8, !dbg !894
  store %struct.key_list_st* %2, %struct.key_list_st** %next, align 8, !dbg !892
  %3 = load %struct.key_list_st*, %struct.key_list_st** %lst.addr, align 8, !dbg !895
  %key = getelementptr inbounds %struct.key_list_st, %struct.key_list_st* %3, i32 0, i32 1, !dbg !896
  %4 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %key, align 8, !dbg !896
  call void @EVP_PKEY_free(%struct.evp_pkey_st* %4), !dbg !897
  %5 = load %struct.key_list_st*, %struct.key_list_st** %lst.addr, align 8, !dbg !898
  %name = getelementptr inbounds %struct.key_list_st, %struct.key_list_st* %5, i32 0, i32 0, !dbg !899
  %6 = load i8*, i8** %name, align 8, !dbg !899
  call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2792), !dbg !900
  %7 = load %struct.key_list_st*, %struct.key_list_st** %lst.addr, align 8, !dbg !901
  %8 = bitcast %struct.key_list_st* %7 to i8*, !dbg !901
  call void @CRYPTO_free(i8* %8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2793), !dbg !902
  %9 = load %struct.key_list_st*, %struct.key_list_st** %next, align 8, !dbg !903
  store %struct.key_list_st* %9, %struct.key_list_st** %lst.addr, align 8, !dbg !904
  br label %while.cond, !dbg !905, !llvm.loop !907

while.end:                                        ; preds = %while.cond
  ret void, !dbg !908
}

declare i32 @BIO_free(%struct.bio_st*) #2

declare i32 @test_readstanza(%struct.stanza_st*) #2

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #3

declare %struct.evp_pkey_st* @PEM_read_bio_PrivateKey(%struct.bio_st*, %struct.evp_pkey_st**, i32 (i8*, i32, i32, i8*)*, i8*) #2

; Function Attrs: nounwind uwtable
define internal i32 @key_unsupported() #0 !dbg !909 {
entry:
  %retval = alloca i32, align 4
  %err = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %err, metadata !910, metadata !207), !dbg !912
  %call = call i64 @ERR_peek_error(), !dbg !913
  store i64 %call, i64* %err, align 8, !dbg !912
  %0 = load i64, i64* %err, align 8, !dbg !914
  %shr = ashr i64 %0, 24, !dbg !916
  %and = and i64 %shr, 255, !dbg !917
  %conv = trunc i64 %and to i32, !dbg !918
  %cmp = icmp eq i32 %conv, 6, !dbg !919
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !920

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %err, align 8, !dbg !921
  %and2 = and i64 %1, 4095, !dbg !923
  %conv3 = trunc i64 %and2 to i32, !dbg !924
  %cmp4 = icmp eq i32 %conv3, 156, !dbg !925
  br i1 %cmp4, label %if.then, label %if.end, !dbg !926

if.then:                                          ; preds = %land.lhs.true
  call void @ERR_clear_error(), !dbg !928
  store i32 1, i32* %retval, align 4, !dbg !930
  br label %return, !dbg !930

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load i64, i64* %err, align 8, !dbg !931
  %shr6 = ashr i64 %2, 24, !dbg !933
  %and7 = and i64 %shr6, 255, !dbg !934
  %conv8 = trunc i64 %and7 to i32, !dbg !935
  %cmp9 = icmp eq i32 %conv8, 16, !dbg !936
  br i1 %cmp9, label %land.lhs.true11, label %if.end17, !dbg !937

land.lhs.true11:                                  ; preds = %if.end
  %3 = load i64, i64* %err, align 8, !dbg !938
  %and12 = and i64 %3, 4095, !dbg !940
  %conv13 = trunc i64 %and12 to i32, !dbg !941
  %cmp14 = icmp eq i32 %conv13, 129, !dbg !942
  br i1 %cmp14, label %if.then16, label %if.end17, !dbg !943

if.then16:                                        ; preds = %land.lhs.true11
  call void @ERR_clear_error(), !dbg !944
  store i32 1, i32* %retval, align 4, !dbg !946
  br label %return, !dbg !946

if.end17:                                         ; preds = %land.lhs.true11, %if.end
  store i32 0, i32* %retval, align 4, !dbg !947
  br label %return, !dbg !947

return:                                           ; preds = %if.end17, %if.then16, %if.then
  %4 = load i32, i32* %retval, align 4, !dbg !948
  ret i32 %4, !dbg !948
}

declare void @EVP_PKEY_free(%struct.evp_pkey_st*) #2

declare void @test_info(i8*, i32, i8*, ...) #2

declare void @test_openssl_errors() #2

declare %struct.evp_pkey_st* @PEM_read_bio_PUBKEY(%struct.bio_st*, %struct.evp_pkey_st**, i32 (i8*, i32, i32, i8*)*, i8*) #2

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #3

declare i32 @OBJ_txt2nid(i8*) #2

; Function Attrs: nounwind uwtable
define internal i32 @parse_bin(i8* %value, i8** %buf, i64* %buflen) #0 !dbg !949 {
entry:
  %retval = alloca i32, align 4
  %value.addr = alloca i8*, align 8
  %buf.addr = alloca i8**, align 8
  %buflen.addr = alloca i64*, align 8
  %len = alloca i64, align 8
  %vlen = alloca i64, align 8
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !954, metadata !207), !dbg !955
  store i8** %buf, i8*** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %buf.addr, metadata !956, metadata !207), !dbg !957
  store i64* %buflen, i64** %buflen.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %buflen.addr, metadata !958, metadata !207), !dbg !959
  call void @llvm.dbg.declare(metadata i64* %len, metadata !960, metadata !207), !dbg !961
  %0 = load i8*, i8** %value.addr, align 8, !dbg !962
  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.41, i32 0, i32 0)) #7, !dbg !964
  %cmp = icmp eq i32 %call, 0, !dbg !965
  br i1 %cmp, label %if.then, label %if.end, !dbg !966

if.then:                                          ; preds = %entry
  %1 = load i8**, i8*** %buf.addr, align 8, !dbg !967
  store i8* null, i8** %1, align 8, !dbg !969
  %2 = load i64*, i64** %buflen.addr, align 8, !dbg !970
  store i64 0, i64* %2, align 8, !dbg !971
  store i32 1, i32* %retval, align 4, !dbg !972
  br label %return, !dbg !972

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %value.addr, align 8, !dbg !973
  %4 = load i8, i8* %3, align 1, !dbg !975
  %conv = sext i8 %4 to i32, !dbg !975
  %cmp1 = icmp eq i32 %conv, 0, !dbg !976
  br i1 %cmp1, label %if.then3, label %if.end9, !dbg !977

if.then3:                                         ; preds = %if.end
  %call4 = call i8* @CRYPTO_malloc(i64 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 287), !dbg !978
  %5 = load i8**, i8*** %buf.addr, align 8, !dbg !980
  store i8* %call4, i8** %5, align 8, !dbg !981
  %6 = load i8**, i8*** %buf.addr, align 8, !dbg !982
  %7 = load i8*, i8** %6, align 8, !dbg !984
  %cmp5 = icmp eq i8* %7, null, !dbg !985
  br i1 %cmp5, label %if.then7, label %if.end8, !dbg !986

if.then7:                                         ; preds = %if.then3
  store i32 0, i32* %retval, align 4, !dbg !987
  br label %return, !dbg !987

if.end8:                                          ; preds = %if.then3
  %8 = load i8**, i8*** %buf.addr, align 8, !dbg !988
  %9 = load i8*, i8** %8, align 8, !dbg !989
  store i8 0, i8* %9, align 1, !dbg !990
  %10 = load i64*, i64** %buflen.addr, align 8, !dbg !991
  store i64 0, i64* %10, align 8, !dbg !992
  store i32 1, i32* %retval, align 4, !dbg !993
  br label %return, !dbg !993

if.end9:                                          ; preds = %if.end
  %11 = load i8*, i8** %value.addr, align 8, !dbg !994
  %arrayidx = getelementptr inbounds i8, i8* %11, i64 0, !dbg !994
  %12 = load i8, i8* %arrayidx, align 1, !dbg !994
  %conv10 = sext i8 %12 to i32, !dbg !994
  %cmp11 = icmp eq i32 %conv10, 34, !dbg !996
  br i1 %cmp11, label %if.then13, label %if.end26, !dbg !997

if.then13:                                        ; preds = %if.end9
  call void @llvm.dbg.declare(metadata i64* %vlen, metadata !998, metadata !207), !dbg !1000
  %13 = load i8*, i8** %value.addr, align 8, !dbg !1001
  %incdec.ptr = getelementptr inbounds i8, i8* %13, i32 1, !dbg !1001
  store i8* %incdec.ptr, i8** %value.addr, align 8, !dbg !1001
  %call14 = call i64 @strlen(i8* %incdec.ptr) #7, !dbg !1002
  store i64 %call14, i64* %vlen, align 8, !dbg !1000
  %14 = load i64, i64* %vlen, align 8, !dbg !1003
  %cmp15 = icmp eq i64 %14, 0, !dbg !1005
  br i1 %cmp15, label %if.then21, label %lor.lhs.false, !dbg !1006

lor.lhs.false:                                    ; preds = %if.then13
  %15 = load i64, i64* %vlen, align 8, !dbg !1007
  %sub = sub i64 %15, 1, !dbg !1009
  %16 = load i8*, i8** %value.addr, align 8, !dbg !1010
  %arrayidx17 = getelementptr inbounds i8, i8* %16, i64 %sub, !dbg !1010
  %17 = load i8, i8* %arrayidx17, align 1, !dbg !1010
  %conv18 = sext i8 %17 to i32, !dbg !1010
  %cmp19 = icmp ne i32 %conv18, 34, !dbg !1011
  br i1 %cmp19, label %if.then21, label %if.end22, !dbg !1012

if.then21:                                        ; preds = %lor.lhs.false, %if.then13
  store i32 0, i32* %retval, align 4, !dbg !1013
  br label %return, !dbg !1013

if.end22:                                         ; preds = %lor.lhs.false
  %18 = load i64, i64* %vlen, align 8, !dbg !1014
  %dec = add i64 %18, -1, !dbg !1014
  store i64 %dec, i64* %vlen, align 8, !dbg !1014
  %19 = load i8*, i8** %value.addr, align 8, !dbg !1015
  %20 = load i64, i64* %vlen, align 8, !dbg !1016
  %21 = load i64*, i64** %buflen.addr, align 8, !dbg !1017
  %call23 = call i8* @unescape(i8* %19, i64 %20, i64* %21), !dbg !1018
  %22 = load i8**, i8*** %buf.addr, align 8, !dbg !1019
  store i8* %call23, i8** %22, align 8, !dbg !1020
  %23 = load i8**, i8*** %buf.addr, align 8, !dbg !1021
  %24 = load i8*, i8** %23, align 8, !dbg !1022
  %cmp24 = icmp eq i8* %24, null, !dbg !1023
  %cond = select i1 %cmp24, i32 0, i32 1, !dbg !1022
  store i32 %cond, i32* %retval, align 4, !dbg !1024
  br label %return, !dbg !1024

if.end26:                                         ; preds = %if.end9
  %25 = load i8*, i8** %value.addr, align 8, !dbg !1025
  %call27 = call i8* @OPENSSL_hexstr2buf(i8* %25, i64* %len), !dbg !1027
  %26 = load i8**, i8*** %buf.addr, align 8, !dbg !1028
  store i8* %call27, i8** %26, align 8, !dbg !1029
  %call28 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 307, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.42, i32 0, i32 0), i8* %call27), !dbg !1030
  %tobool = icmp ne i32 %call28, 0, !dbg !1032
  br i1 %tobool, label %if.end30, label %if.then29, !dbg !1033

if.then29:                                        ; preds = %if.end26
  %27 = load i8*, i8** %value.addr, align 8, !dbg !1034
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 308, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.43, i32 0, i32 0), i8* %27), !dbg !1036
  call void @test_openssl_errors(), !dbg !1037
  store i32 -1, i32* %retval, align 4, !dbg !1038
  br label %return, !dbg !1038

if.end30:                                         ; preds = %if.end26
  %28 = load i64, i64* %len, align 8, !dbg !1039
  %29 = load i64*, i64** %buflen.addr, align 8, !dbg !1040
  store i64 %28, i64* %29, align 8, !dbg !1041
  store i32 1, i32* %retval, align 4, !dbg !1042
  br label %return, !dbg !1042

return:                                           ; preds = %if.end30, %if.then29, %if.end22, %if.then21, %if.end8, %if.then7, %if.then
  %30 = load i32, i32* %retval, align 4, !dbg !1043
  ret i32 %30, !dbg !1043
}

declare %struct.evp_pkey_st* @EVP_PKEY_new_raw_private_key(i32, %struct.engine_st*, i8*, i64) #2

declare %struct.evp_pkey_st* @EVP_PKEY_new_raw_public_key(i32, %struct.engine_st*, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @find_key(%struct.evp_pkey_st** %ppk, i8* %name, %struct.key_list_st* %lst) #0 !dbg !1044 {
entry:
  %retval = alloca i32, align 4
  %ppk.addr = alloca %struct.evp_pkey_st**, align 8
  %name.addr = alloca i8*, align 8
  %lst.addr = alloca %struct.key_list_st*, align 8
  store %struct.evp_pkey_st** %ppk, %struct.evp_pkey_st*** %ppk.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_pkey_st*** %ppk.addr, metadata !1048, metadata !207), !dbg !1049
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1050, metadata !207), !dbg !1051
  store %struct.key_list_st* %lst, %struct.key_list_st** %lst.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.key_list_st** %lst.addr, metadata !1052, metadata !207), !dbg !1053
  br label %for.cond, !dbg !1054

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.key_list_st*, %struct.key_list_st** %lst.addr, align 8, !dbg !1055
  %cmp = icmp ne %struct.key_list_st* %0, null, !dbg !1059
  br i1 %cmp, label %for.body, label %for.end, !dbg !1060

for.body:                                         ; preds = %for.cond
  %1 = load %struct.key_list_st*, %struct.key_list_st** %lst.addr, align 8, !dbg !1061
  %name1 = getelementptr inbounds %struct.key_list_st, %struct.key_list_st* %1, i32 0, i32 0, !dbg !1064
  %2 = load i8*, i8** %name1, align 8, !dbg !1064
  %3 = load i8*, i8** %name.addr, align 8, !dbg !1065
  %call = call i32 @strcmp(i8* %2, i8* %3) #7, !dbg !1066
  %cmp2 = icmp eq i32 %call, 0, !dbg !1067
  br i1 %cmp2, label %if.then, label %if.end5, !dbg !1068

if.then:                                          ; preds = %for.body
  %4 = load %struct.evp_pkey_st**, %struct.evp_pkey_st*** %ppk.addr, align 8, !dbg !1069
  %cmp3 = icmp ne %struct.evp_pkey_st** %4, null, !dbg !1072
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !1073

if.then4:                                         ; preds = %if.then
  %5 = load %struct.key_list_st*, %struct.key_list_st** %lst.addr, align 8, !dbg !1074
  %key = getelementptr inbounds %struct.key_list_st, %struct.key_list_st* %5, i32 0, i32 1, !dbg !1075
  %6 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %key, align 8, !dbg !1075
  %7 = load %struct.evp_pkey_st**, %struct.evp_pkey_st*** %ppk.addr, align 8, !dbg !1076
  store %struct.evp_pkey_st* %6, %struct.evp_pkey_st** %7, align 8, !dbg !1077
  br label %if.end, !dbg !1078

if.end:                                           ; preds = %if.then4, %if.then
  store i32 1, i32* %retval, align 4, !dbg !1079
  br label %return, !dbg !1079

if.end5:                                          ; preds = %for.body
  br label %for.inc, !dbg !1080

for.inc:                                          ; preds = %if.end5
  %8 = load %struct.key_list_st*, %struct.key_list_st** %lst.addr, align 8, !dbg !1081
  %next = getelementptr inbounds %struct.key_list_st, %struct.key_list_st* %8, i32 0, i32 2, !dbg !1083
  %9 = load %struct.key_list_st*, %struct.key_list_st** %next, align 8, !dbg !1083
  store %struct.key_list_st* %9, %struct.key_list_st** %lst.addr, align 8, !dbg !1084
  br label %for.cond, !dbg !1085, !llvm.loop !1086

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !1087
  br label %return, !dbg !1087

return:                                           ; preds = %for.end, %if.end
  %10 = load i32, i32* %retval, align 4, !dbg !1088
  ret i32 %10, !dbg !1088
}

declare i8* @CRYPTO_malloc(i64, i8*, i32) #2

; Function Attrs: nounwind uwtable
define internal i8* @take_value(%struct.pair_st* %pp) #0 !dbg !1089 {
entry:
  %pp.addr = alloca %struct.pair_st*, align 8
  %p = alloca i8*, align 8
  store %struct.pair_st* %pp, %struct.pair_st** %pp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.pair_st** %pp.addr, metadata !1092, metadata !207), !dbg !1093
  call void @llvm.dbg.declare(metadata i8** %p, metadata !1094, metadata !207), !dbg !1095
  %0 = load %struct.pair_st*, %struct.pair_st** %pp.addr, align 8, !dbg !1096
  %value = getelementptr inbounds %struct.pair_st, %struct.pair_st* %0, i32 0, i32 1, !dbg !1097
  %1 = load i8*, i8** %value, align 8, !dbg !1097
  store i8* %1, i8** %p, align 8, !dbg !1095
  %2 = load %struct.pair_st*, %struct.pair_st** %pp.addr, align 8, !dbg !1098
  %value1 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %2, i32 0, i32 1, !dbg !1099
  store i8* null, i8** %value1, align 8, !dbg !1100
  %3 = load i8*, i8** %p, align 8, !dbg !1101
  ret i8* %3, !dbg !1102
}

; Function Attrs: nounwind readonly
declare i8* @strstr(i8*, i8*) #3

declare i32 @EVP_PKEY_set_alias_type(%struct.evp_pkey_st*, i32) #2

; Function Attrs: nounwind uwtable
define internal %struct.evp_test_method_st* @find_test(i8* %name) #0 !dbg !1103 {
entry:
  %retval = alloca %struct.evp_test_method_st*, align 8
  %name.addr = alloca i8*, align 8
  %tt = alloca %struct.evp_test_method_st**, align 8
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !1106, metadata !207), !dbg !1107
  call void @llvm.dbg.declare(metadata %struct.evp_test_method_st*** %tt, metadata !1108, metadata !207), !dbg !1110
  store %struct.evp_test_method_st** getelementptr inbounds ([19 x %struct.evp_test_method_st*], [19 x %struct.evp_test_method_st*]* @evp_test_list, i32 0, i32 0), %struct.evp_test_method_st*** %tt, align 8, !dbg !1111
  br label %for.cond, !dbg !1113

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.evp_test_method_st**, %struct.evp_test_method_st*** %tt, align 8, !dbg !1114
  %1 = load %struct.evp_test_method_st*, %struct.evp_test_method_st** %0, align 8, !dbg !1117
  %tobool = icmp ne %struct.evp_test_method_st* %1, null, !dbg !1118
  br i1 %tobool, label %for.body, label %for.end, !dbg !1118

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %name.addr, align 8, !dbg !1119
  %3 = load %struct.evp_test_method_st**, %struct.evp_test_method_st*** %tt, align 8, !dbg !1122
  %4 = load %struct.evp_test_method_st*, %struct.evp_test_method_st** %3, align 8, !dbg !1123
  %name1 = getelementptr inbounds %struct.evp_test_method_st, %struct.evp_test_method_st* %4, i32 0, i32 0, !dbg !1124
  %5 = load i8*, i8** %name1, align 8, !dbg !1124
  %call = call i32 @strcmp(i8* %2, i8* %5) #7, !dbg !1125
  %cmp = icmp eq i32 %call, 0, !dbg !1126
  br i1 %cmp, label %if.then, label %if.end, !dbg !1127

if.then:                                          ; preds = %for.body
  %6 = load %struct.evp_test_method_st**, %struct.evp_test_method_st*** %tt, align 8, !dbg !1128
  %7 = load %struct.evp_test_method_st*, %struct.evp_test_method_st** %6, align 8, !dbg !1129
  store %struct.evp_test_method_st* %7, %struct.evp_test_method_st** %retval, align 8, !dbg !1130
  br label %return, !dbg !1130

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !1131

for.inc:                                          ; preds = %if.end
  %8 = load %struct.evp_test_method_st**, %struct.evp_test_method_st*** %tt, align 8, !dbg !1132
  %incdec.ptr = getelementptr inbounds %struct.evp_test_method_st*, %struct.evp_test_method_st** %8, i32 1, !dbg !1132
  store %struct.evp_test_method_st** %incdec.ptr, %struct.evp_test_method_st*** %tt, align 8, !dbg !1132
  br label %for.cond, !dbg !1134, !llvm.loop !1135

for.end:                                          ; preds = %for.cond
  store %struct.evp_test_method_st* null, %struct.evp_test_method_st** %retval, align 8, !dbg !1137
  br label %return, !dbg !1137

return:                                           ; preds = %for.end, %if.then
  %9 = load %struct.evp_test_method_st*, %struct.evp_test_method_st** %retval, align 8, !dbg !1138
  ret %struct.evp_test_method_st* %9, !dbg !1138
}

declare void @test_error(i8*, i32, i8*, ...) #2

declare i64 @ERR_peek_error() #2

declare void @ERR_clear_error() #2

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #3

; Function Attrs: nounwind uwtable
define internal i8* @unescape(i8* %input, i64 %input_len, i64* %out_len) #0 !dbg !1139 {
entry:
  %retval = alloca i8*, align 8
  %input.addr = alloca i8*, align 8
  %input_len.addr = alloca i64, align 8
  %out_len.addr = alloca i64*, align 8
  %ret = alloca i8*, align 8
  %p = alloca i8*, align 8
  %i = alloca i64, align 8
  store i8* %input, i8** %input.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %input.addr, metadata !1142, metadata !207), !dbg !1143
  store i64 %input_len, i64* %input_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %input_len.addr, metadata !1144, metadata !207), !dbg !1145
  store i64* %out_len, i64** %out_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %out_len.addr, metadata !1146, metadata !207), !dbg !1147
  call void @llvm.dbg.declare(metadata i8** %ret, metadata !1148, metadata !207), !dbg !1149
  call void @llvm.dbg.declare(metadata i8** %p, metadata !1150, metadata !207), !dbg !1151
  call void @llvm.dbg.declare(metadata i64* %i, metadata !1152, metadata !207), !dbg !1153
  %0 = load i64, i64* %input_len.addr, align 8, !dbg !1154
  %cmp = icmp eq i64 %0, 0, !dbg !1156
  br i1 %cmp, label %if.then, label %if.end, !dbg !1157

if.then:                                          ; preds = %entry
  %1 = load i64*, i64** %out_len.addr, align 8, !dbg !1158
  store i64 0, i64* %1, align 8, !dbg !1160
  %call = call i8* @CRYPTO_zalloc(i64 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 236), !dbg !1161
  store i8* %call, i8** %retval, align 8, !dbg !1162
  br label %return, !dbg !1162

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %input_len.addr, align 8, !dbg !1163
  %call1 = call i8* @CRYPTO_malloc(i64 %2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 240), !dbg !1165
  store i8* %call1, i8** %p, align 8, !dbg !1166
  store i8* %call1, i8** %ret, align 8, !dbg !1167
  %call2 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 240, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.44, i32 0, i32 0), i8* %call1), !dbg !1168
  %tobool = icmp ne i32 %call2, 0, !dbg !1170
  br i1 %tobool, label %if.end4, label %if.then3, !dbg !1171

if.then3:                                         ; preds = %if.end
  store i8* null, i8** %retval, align 8, !dbg !1172
  br label %return, !dbg !1172

if.end4:                                          ; preds = %if.end
  store i64 0, i64* %i, align 8, !dbg !1173
  br label %for.cond, !dbg !1175

for.cond:                                         ; preds = %for.inc, %if.end4
  %3 = load i64, i64* %i, align 8, !dbg !1176
  %4 = load i64, i64* %input_len.addr, align 8, !dbg !1179
  %cmp5 = icmp ult i64 %3, %4, !dbg !1180
  br i1 %cmp5, label %for.body, label %for.end, !dbg !1181

for.body:                                         ; preds = %for.cond
  %5 = load i8*, i8** %input.addr, align 8, !dbg !1182
  %6 = load i8, i8* %5, align 1, !dbg !1185
  %conv = sext i8 %6 to i32, !dbg !1185
  %cmp6 = icmp eq i32 %conv, 92, !dbg !1186
  br i1 %cmp6, label %if.then8, label %if.else, !dbg !1187

if.then8:                                         ; preds = %for.body
  %7 = load i64, i64* %i, align 8, !dbg !1188
  %8 = load i64, i64* %input_len.addr, align 8, !dbg !1191
  %sub = sub i64 %8, 1, !dbg !1192
  %cmp9 = icmp eq i64 %7, %sub, !dbg !1193
  br i1 %cmp9, label %if.then14, label %lor.lhs.false, !dbg !1194

lor.lhs.false:                                    ; preds = %if.then8
  %9 = load i8*, i8** %input.addr, align 8, !dbg !1195
  %incdec.ptr = getelementptr inbounds i8, i8* %9, i32 1, !dbg !1195
  store i8* %incdec.ptr, i8** %input.addr, align 8, !dbg !1195
  %10 = load i8, i8* %incdec.ptr, align 1, !dbg !1197
  %conv11 = sext i8 %10 to i32, !dbg !1197
  %cmp12 = icmp ne i32 %conv11, 110, !dbg !1198
  br i1 %cmp12, label %if.then14, label %if.end15, !dbg !1199

if.then14:                                        ; preds = %lor.lhs.false, %if.then8
  call void (i8*, i32, i8*, ...) @test_error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 246, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.45, i32 0, i32 0)), !dbg !1200
  br label %err, !dbg !1202

if.end15:                                         ; preds = %lor.lhs.false
  %11 = load i8*, i8** %p, align 8, !dbg !1203
  %incdec.ptr16 = getelementptr inbounds i8, i8* %11, i32 1, !dbg !1203
  store i8* %incdec.ptr16, i8** %p, align 8, !dbg !1203
  store i8 10, i8* %11, align 1, !dbg !1204
  %12 = load i64, i64* %i, align 8, !dbg !1205
  %inc = add i64 %12, 1, !dbg !1205
  store i64 %inc, i64* %i, align 8, !dbg !1205
  %13 = load i8*, i8** %input.addr, align 8, !dbg !1206
  %incdec.ptr17 = getelementptr inbounds i8, i8* %13, i32 1, !dbg !1206
  store i8* %incdec.ptr17, i8** %input.addr, align 8, !dbg !1206
  br label %if.end20, !dbg !1207

if.else:                                          ; preds = %for.body
  %14 = load i8*, i8** %input.addr, align 8, !dbg !1208
  %incdec.ptr18 = getelementptr inbounds i8, i8* %14, i32 1, !dbg !1208
  store i8* %incdec.ptr18, i8** %input.addr, align 8, !dbg !1208
  %15 = load i8, i8* %14, align 1, !dbg !1210
  %16 = load i8*, i8** %p, align 8, !dbg !1211
  %incdec.ptr19 = getelementptr inbounds i8, i8* %16, i32 1, !dbg !1211
  store i8* %incdec.ptr19, i8** %p, align 8, !dbg !1211
  store i8 %15, i8* %16, align 1, !dbg !1212
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.end15
  br label %for.inc, !dbg !1213

for.inc:                                          ; preds = %if.end20
  %17 = load i64, i64* %i, align 8, !dbg !1214
  %inc21 = add i64 %17, 1, !dbg !1214
  store i64 %inc21, i64* %i, align 8, !dbg !1214
  br label %for.cond, !dbg !1216, !llvm.loop !1217

for.end:                                          ; preds = %for.cond
  %18 = load i8*, i8** %p, align 8, !dbg !1219
  %19 = load i8*, i8** %ret, align 8, !dbg !1220
  %sub.ptr.lhs.cast = ptrtoint i8* %18 to i64, !dbg !1221
  %sub.ptr.rhs.cast = ptrtoint i8* %19 to i64, !dbg !1221
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !1221
  %20 = load i64*, i64** %out_len.addr, align 8, !dbg !1222
  store i64 %sub.ptr.sub, i64* %20, align 8, !dbg !1223
  %21 = load i8*, i8** %ret, align 8, !dbg !1224
  store i8* %21, i8** %retval, align 8, !dbg !1225
  br label %return, !dbg !1225

err:                                              ; preds = %if.then14
  %22 = load i8*, i8** %ret, align 8, !dbg !1226
  call void @CRYPTO_free(i8* %22, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 261), !dbg !1227
  store i8* null, i8** %retval, align 8, !dbg !1228
  br label %return, !dbg !1228

return:                                           ; preds = %err, %for.end, %if.then3, %if.then
  %23 = load i8*, i8** %retval, align 8, !dbg !1229
  ret i8* %23, !dbg !1229
}

declare i8* @OPENSSL_hexstr2buf(i8*, i64*) #2

; Function Attrs: nounwind uwtable
define internal i32 @cipher_test_init(%struct.evp_test_st* %t, i8* %alg) #0 !dbg !1230 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %alg.addr = alloca i8*, align 8
  %cipher = alloca %struct.evp_cipher_st*, align 8
  %cdat = alloca %struct.cipher_data_st*, align 8
  %m = alloca i32, align 4
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !1231, metadata !207), !dbg !1232
  store i8* %alg, i8** %alg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %alg.addr, metadata !1233, metadata !207), !dbg !1234
  call void @llvm.dbg.declare(metadata %struct.evp_cipher_st** %cipher, metadata !1235, metadata !207), !dbg !1240
  call void @llvm.dbg.declare(metadata %struct.cipher_data_st** %cdat, metadata !1241, metadata !207), !dbg !1265
  call void @llvm.dbg.declare(metadata i32* %m, metadata !1266, metadata !207), !dbg !1267
  %0 = load i8*, i8** %alg.addr, align 8, !dbg !1268
  %call = call %struct.evp_cipher_st* @EVP_get_cipherbyname(i8* %0), !dbg !1270
  store %struct.evp_cipher_st* %call, %struct.evp_cipher_st** %cipher, align 8, !dbg !1271
  %cmp = icmp eq %struct.evp_cipher_st* %call, null, !dbg !1272
  br i1 %cmp, label %if.then, label %if.end6, !dbg !1273

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %alg.addr, align 8, !dbg !1274
  %call1 = call i32 @OBJ_sn2nid(i8* %1), !dbg !1277
  %cmp2 = icmp ne i32 %call1, 0, !dbg !1278
  br i1 %cmp2, label %if.then5, label %lor.lhs.false, !dbg !1279

lor.lhs.false:                                    ; preds = %if.then
  %2 = load i8*, i8** %alg.addr, align 8, !dbg !1280
  %call3 = call i32 @OBJ_ln2nid(i8* %2), !dbg !1282
  %cmp4 = icmp ne i32 %call3, 0, !dbg !1283
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !1284

if.then5:                                         ; preds = %lor.lhs.false, %if.then
  %3 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1285
  %skip = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %3, i32 0, i32 2, !dbg !1287
  store i32 1, i32* %skip, align 8, !dbg !1288
  store i32 1, i32* %retval, align 4, !dbg !1289
  br label %return, !dbg !1289

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %retval, align 4, !dbg !1290
  br label %return, !dbg !1290

if.end6:                                          ; preds = %entry
  %call7 = call i8* @CRYPTO_zalloc(i64 160, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 482), !dbg !1291
  %4 = bitcast i8* %call7 to %struct.cipher_data_st*, !dbg !1291
  store %struct.cipher_data_st* %4, %struct.cipher_data_st** %cdat, align 8, !dbg !1292
  %5 = load %struct.evp_cipher_st*, %struct.evp_cipher_st** %cipher, align 8, !dbg !1293
  %6 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1294
  %cipher8 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %6, i32 0, i32 0, !dbg !1295
  store %struct.evp_cipher_st* %5, %struct.evp_cipher_st** %cipher8, align 8, !dbg !1296
  %7 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1297
  %enc = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %7, i32 0, i32 1, !dbg !1298
  store i32 -1, i32* %enc, align 8, !dbg !1299
  %8 = load %struct.evp_cipher_st*, %struct.evp_cipher_st** %cipher, align 8, !dbg !1300
  %call9 = call i64 @EVP_CIPHER_flags(%struct.evp_cipher_st* %8), !dbg !1301
  %and = and i64 %call9, 983047, !dbg !1302
  %conv = trunc i64 %and to i32, !dbg !1303
  store i32 %conv, i32* %m, align 4, !dbg !1304
  %9 = load i32, i32* %m, align 4, !dbg !1305
  %cmp10 = icmp eq i32 %9, 6, !dbg !1307
  br i1 %cmp10, label %if.then21, label %lor.lhs.false12, !dbg !1308

lor.lhs.false12:                                  ; preds = %if.end6
  %10 = load i32, i32* %m, align 4, !dbg !1309
  %cmp13 = icmp eq i32 %10, 65539, !dbg !1311
  br i1 %cmp13, label %if.then21, label %lor.lhs.false15, !dbg !1312

lor.lhs.false15:                                  ; preds = %lor.lhs.false12
  %11 = load i32, i32* %m, align 4, !dbg !1313
  %cmp16 = icmp eq i32 %11, 65540, !dbg !1314
  br i1 %cmp16, label %if.then21, label %lor.lhs.false18, !dbg !1315

lor.lhs.false18:                                  ; preds = %lor.lhs.false15
  %12 = load i32, i32* %m, align 4, !dbg !1316
  %cmp19 = icmp eq i32 %12, 7, !dbg !1317
  br i1 %cmp19, label %if.then21, label %if.else, !dbg !1318

if.then21:                                        ; preds = %lor.lhs.false18, %lor.lhs.false15, %lor.lhs.false12, %if.end6
  %13 = load i32, i32* %m, align 4, !dbg !1320
  %14 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1321
  %aead = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %14, i32 0, i32 2, !dbg !1322
  store i32 %13, i32* %aead, align 4, !dbg !1323
  br label %if.end29, !dbg !1321

if.else:                                          ; preds = %lor.lhs.false18
  %15 = load %struct.evp_cipher_st*, %struct.evp_cipher_st** %cipher, align 8, !dbg !1324
  %call22 = call i64 @EVP_CIPHER_flags(%struct.evp_cipher_st* %15), !dbg !1326
  %and23 = and i64 %call22, 2097152, !dbg !1327
  %tobool = icmp ne i64 %and23, 0, !dbg !1327
  br i1 %tobool, label %if.then24, label %if.else26, !dbg !1328

if.then24:                                        ; preds = %if.else
  %16 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1329
  %aead25 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %16, i32 0, i32 2, !dbg !1330
  store i32 -1, i32* %aead25, align 4, !dbg !1331
  br label %if.end28, !dbg !1329

if.else26:                                        ; preds = %if.else
  %17 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1332
  %aead27 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %17, i32 0, i32 2, !dbg !1333
  store i32 0, i32* %aead27, align 4, !dbg !1334
  br label %if.end28

if.end28:                                         ; preds = %if.else26, %if.then24
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then21
  %18 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1335
  %19 = bitcast %struct.cipher_data_st* %18 to i8*, !dbg !1335
  %20 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1336
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %20, i32 0, i32 9, !dbg !1337
  store i8* %19, i8** %data, align 8, !dbg !1338
  store i32 1, i32* %retval, align 4, !dbg !1339
  br label %return, !dbg !1339

return:                                           ; preds = %if.end29, %if.end, %if.then5
  %21 = load i32, i32* %retval, align 4, !dbg !1340
  ret i32 %21, !dbg !1340
}

; Function Attrs: nounwind uwtable
define internal void @cipher_test_cleanup(%struct.evp_test_st* %t) #0 !dbg !1341 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %i = alloca i32, align 4
  %cdat = alloca %struct.cipher_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !1342, metadata !207), !dbg !1343
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1344, metadata !207), !dbg !1345
  call void @llvm.dbg.declare(metadata %struct.cipher_data_st** %cdat, metadata !1346, metadata !207), !dbg !1347
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1348
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !1349
  %1 = load i8*, i8** %data, align 8, !dbg !1349
  %2 = bitcast i8* %1 to %struct.cipher_data_st*, !dbg !1348
  store %struct.cipher_data_st* %2, %struct.cipher_data_st** %cdat, align 8, !dbg !1347
  %3 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1350
  %key = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %3, i32 0, i32 3, !dbg !1351
  %4 = load i8*, i8** %key, align 8, !dbg !1351
  call void @CRYPTO_free(i8* %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 505), !dbg !1352
  %5 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1353
  %iv = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %5, i32 0, i32 5, !dbg !1354
  %6 = load i8*, i8** %iv, align 8, !dbg !1354
  call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 506), !dbg !1355
  %7 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1356
  %ciphertext = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %7, i32 0, i32 9, !dbg !1357
  %8 = load i8*, i8** %ciphertext, align 8, !dbg !1357
  call void @CRYPTO_free(i8* %8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 507), !dbg !1358
  %9 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1359
  %plaintext = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %9, i32 0, i32 7, !dbg !1360
  %10 = load i8*, i8** %plaintext, align 8, !dbg !1360
  call void @CRYPTO_free(i8* %10, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 508), !dbg !1361
  store i32 0, i32* %i, align 4, !dbg !1362
  br label %for.cond, !dbg !1364

for.cond:                                         ; preds = %for.inc, %entry
  %11 = load i32, i32* %i, align 4, !dbg !1365
  %cmp = icmp slt i32 %11, 4, !dbg !1368
  br i1 %cmp, label %for.body, label %for.end, !dbg !1369

for.body:                                         ; preds = %for.cond
  %12 = load i32, i32* %i, align 4, !dbg !1370
  %idxprom = sext i32 %12 to i64, !dbg !1371
  %13 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1371
  %aad = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %13, i32 0, i32 11, !dbg !1372
  %arrayidx = getelementptr inbounds [4 x i8*], [4 x i8*]* %aad, i64 0, i64 %idxprom, !dbg !1371
  %14 = load i8*, i8** %arrayidx, align 8, !dbg !1371
  call void @CRYPTO_free(i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 510), !dbg !1373
  br label %for.inc, !dbg !1373

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4, !dbg !1374
  %inc = add nsw i32 %15, 1, !dbg !1374
  store i32 %inc, i32* %i, align 4, !dbg !1374
  br label %for.cond, !dbg !1376, !llvm.loop !1377

for.end:                                          ; preds = %for.cond
  %16 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1379
  %tag = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %16, i32 0, i32 13, !dbg !1380
  %17 = load i8*, i8** %tag, align 8, !dbg !1380
  call void @CRYPTO_free(i8* %17, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 511), !dbg !1381
  ret void, !dbg !1382
}

; Function Attrs: nounwind uwtable
define internal i32 @cipher_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !1383 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %cdat = alloca %struct.cipher_data_st*, align 8
  %i = alloca i32, align 4
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !1384, metadata !207), !dbg !1385
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !1386, metadata !207), !dbg !1387
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !1388, metadata !207), !dbg !1389
  call void @llvm.dbg.declare(metadata %struct.cipher_data_st** %cdat, metadata !1390, metadata !207), !dbg !1391
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1392
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !1393
  %1 = load i8*, i8** %data, align 8, !dbg !1393
  %2 = bitcast i8* %1 to %struct.cipher_data_st*, !dbg !1392
  store %struct.cipher_data_st* %2, %struct.cipher_data_st** %cdat, align 8, !dbg !1391
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1394, metadata !207), !dbg !1395
  %3 = load i8*, i8** %keyword.addr, align 8, !dbg !1396
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i32 0, i32 0)) #7, !dbg !1398
  %cmp = icmp eq i32 %call, 0, !dbg !1399
  br i1 %cmp, label %if.then, label %if.end, !dbg !1400

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %value.addr, align 8, !dbg !1401
  %5 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1402
  %key = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %5, i32 0, i32 3, !dbg !1403
  %6 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1404
  %key_len = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %6, i32 0, i32 4, !dbg !1405
  %call1 = call i32 @parse_bin(i8* %4, i8** %key, i64* %key_len), !dbg !1406
  store i32 %call1, i32* %retval, align 4, !dbg !1407
  br label %return, !dbg !1407

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %keyword.addr, align 8, !dbg !1408
  %call2 = call i32 @strcmp(i8* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i32 0, i32 0)) #7, !dbg !1410
  %cmp3 = icmp eq i32 %call2, 0, !dbg !1411
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !1412

if.then4:                                         ; preds = %if.end
  %8 = load i8*, i8** %value.addr, align 8, !dbg !1413
  %9 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1414
  %iv = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %9, i32 0, i32 5, !dbg !1415
  %10 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1416
  %iv_len = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %10, i32 0, i32 6, !dbg !1417
  %call5 = call i32 @parse_bin(i8* %8, i8** %iv, i64* %iv_len), !dbg !1418
  store i32 %call5, i32* %retval, align 4, !dbg !1419
  br label %return, !dbg !1419

if.end6:                                          ; preds = %if.end
  %11 = load i8*, i8** %keyword.addr, align 8, !dbg !1420
  %call7 = call i32 @strcmp(i8* %11, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.49, i32 0, i32 0)) #7, !dbg !1422
  %cmp8 = icmp eq i32 %call7, 0, !dbg !1423
  br i1 %cmp8, label %if.then9, label %if.end11, !dbg !1424

if.then9:                                         ; preds = %if.end6
  %12 = load i8*, i8** %value.addr, align 8, !dbg !1425
  %13 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1426
  %plaintext = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %13, i32 0, i32 7, !dbg !1427
  %14 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1428
  %plaintext_len = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %14, i32 0, i32 8, !dbg !1429
  %call10 = call i32 @parse_bin(i8* %12, i8** %plaintext, i64* %plaintext_len), !dbg !1430
  store i32 %call10, i32* %retval, align 4, !dbg !1431
  br label %return, !dbg !1431

if.end11:                                         ; preds = %if.end6
  %15 = load i8*, i8** %keyword.addr, align 8, !dbg !1432
  %call12 = call i32 @strcmp(i8* %15, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.50, i32 0, i32 0)) #7, !dbg !1434
  %cmp13 = icmp eq i32 %call12, 0, !dbg !1435
  br i1 %cmp13, label %if.then14, label %if.end16, !dbg !1436

if.then14:                                        ; preds = %if.end11
  %16 = load i8*, i8** %value.addr, align 8, !dbg !1437
  %17 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1438
  %ciphertext = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %17, i32 0, i32 9, !dbg !1439
  %18 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1440
  %ciphertext_len = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %18, i32 0, i32 10, !dbg !1441
  %call15 = call i32 @parse_bin(i8* %16, i8** %ciphertext, i64* %ciphertext_len), !dbg !1442
  store i32 %call15, i32* %retval, align 4, !dbg !1443
  br label %return, !dbg !1443

if.end16:                                         ; preds = %if.end11
  %19 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1444
  %aead = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %19, i32 0, i32 2, !dbg !1446
  %20 = load i32, i32* %aead, align 4, !dbg !1446
  %tobool = icmp ne i32 %20, 0, !dbg !1444
  br i1 %tobool, label %if.then17, label %if.end37, !dbg !1447

if.then17:                                        ; preds = %if.end16
  %21 = load i8*, i8** %keyword.addr, align 8, !dbg !1448
  %call18 = call i32 @strcmp(i8* %21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.51, i32 0, i32 0)) #7, !dbg !1451
  %cmp19 = icmp eq i32 %call18, 0, !dbg !1452
  br i1 %cmp19, label %if.then20, label %if.end31, !dbg !1453

if.then20:                                        ; preds = %if.then17
  store i32 0, i32* %i, align 4, !dbg !1454
  br label %for.cond, !dbg !1457

for.cond:                                         ; preds = %for.inc, %if.then20
  %22 = load i32, i32* %i, align 4, !dbg !1458
  %cmp21 = icmp slt i32 %22, 4, !dbg !1461
  br i1 %cmp21, label %for.body, label %for.end, !dbg !1462

for.body:                                         ; preds = %for.cond
  %23 = load i32, i32* %i, align 4, !dbg !1463
  %idxprom = sext i32 %23 to i64, !dbg !1466
  %24 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1466
  %aad = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %24, i32 0, i32 11, !dbg !1467
  %arrayidx = getelementptr inbounds [4 x i8*], [4 x i8*]* %aad, i64 0, i64 %idxprom, !dbg !1466
  %25 = load i8*, i8** %arrayidx, align 8, !dbg !1466
  %cmp22 = icmp eq i8* %25, null, !dbg !1468
  br i1 %cmp22, label %if.then23, label %if.end30, !dbg !1469

if.then23:                                        ; preds = %for.body
  %26 = load i8*, i8** %value.addr, align 8, !dbg !1470
  %27 = load i32, i32* %i, align 4, !dbg !1471
  %idxprom24 = sext i32 %27 to i64, !dbg !1472
  %28 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1472
  %aad25 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %28, i32 0, i32 11, !dbg !1473
  %arrayidx26 = getelementptr inbounds [4 x i8*], [4 x i8*]* %aad25, i64 0, i64 %idxprom24, !dbg !1472
  %29 = load i32, i32* %i, align 4, !dbg !1474
  %idxprom27 = sext i32 %29 to i64, !dbg !1475
  %30 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1475
  %aad_len = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %30, i32 0, i32 12, !dbg !1476
  %arrayidx28 = getelementptr inbounds [4 x i64], [4 x i64]* %aad_len, i64 0, i64 %idxprom27, !dbg !1475
  %call29 = call i32 @parse_bin(i8* %26, i8** %arrayidx26, i64* %arrayidx28), !dbg !1477
  store i32 %call29, i32* %retval, align 4, !dbg !1478
  br label %return, !dbg !1478

if.end30:                                         ; preds = %for.body
  br label %for.inc, !dbg !1479

for.inc:                                          ; preds = %if.end30
  %31 = load i32, i32* %i, align 4, !dbg !1480
  %inc = add nsw i32 %31, 1, !dbg !1480
  store i32 %inc, i32* %i, align 4, !dbg !1480
  br label %for.cond, !dbg !1482, !llvm.loop !1483

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !1485
  br label %return, !dbg !1485

if.end31:                                         ; preds = %if.then17
  %32 = load i8*, i8** %keyword.addr, align 8, !dbg !1486
  %call32 = call i32 @strcmp(i8* %32, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.52, i32 0, i32 0)) #7, !dbg !1488
  %cmp33 = icmp eq i32 %call32, 0, !dbg !1489
  br i1 %cmp33, label %if.then34, label %if.end36, !dbg !1490

if.then34:                                        ; preds = %if.end31
  %33 = load i8*, i8** %value.addr, align 8, !dbg !1491
  %34 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1492
  %tag = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %34, i32 0, i32 13, !dbg !1493
  %35 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1494
  %tag_len = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %35, i32 0, i32 14, !dbg !1495
  %call35 = call i32 @parse_bin(i8* %33, i8** %tag, i64* %tag_len), !dbg !1496
  store i32 %call35, i32* %retval, align 4, !dbg !1497
  br label %return, !dbg !1497

if.end36:                                         ; preds = %if.end31
  br label %if.end37, !dbg !1498

if.end37:                                         ; preds = %if.end36, %if.end16
  %36 = load i8*, i8** %keyword.addr, align 8, !dbg !1499
  %call38 = call i32 @strcmp(i8* %36, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.53, i32 0, i32 0)) #7, !dbg !1501
  %cmp39 = icmp eq i32 %call38, 0, !dbg !1502
  br i1 %cmp39, label %if.then40, label %if.end51, !dbg !1503

if.then40:                                        ; preds = %if.end37
  %37 = load i8*, i8** %value.addr, align 8, !dbg !1504
  %call41 = call i32 @strcmp(i8* %37, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.54, i32 0, i32 0)) #7, !dbg !1507
  %cmp42 = icmp eq i32 %call41, 0, !dbg !1508
  br i1 %cmp42, label %if.then43, label %if.else, !dbg !1509

if.then43:                                        ; preds = %if.then40
  %38 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1510
  %enc = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %38, i32 0, i32 1, !dbg !1511
  store i32 1, i32* %enc, align 8, !dbg !1512
  br label %if.end50, !dbg !1510

if.else:                                          ; preds = %if.then40
  %39 = load i8*, i8** %value.addr, align 8, !dbg !1513
  %call44 = call i32 @strcmp(i8* %39, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.55, i32 0, i32 0)) #7, !dbg !1515
  %cmp45 = icmp eq i32 %call44, 0, !dbg !1516
  br i1 %cmp45, label %if.then46, label %if.else48, !dbg !1517

if.then46:                                        ; preds = %if.else
  %40 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1518
  %enc47 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %40, i32 0, i32 1, !dbg !1519
  store i32 0, i32* %enc47, align 8, !dbg !1520
  br label %if.end49, !dbg !1518

if.else48:                                        ; preds = %if.else
  store i32 0, i32* %retval, align 4, !dbg !1521
  br label %return, !dbg !1521

if.end49:                                         ; preds = %if.then46
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then43
  store i32 1, i32* %retval, align 4, !dbg !1522
  br label %return, !dbg !1522

if.end51:                                         ; preds = %if.end37
  store i32 0, i32* %retval, align 4, !dbg !1523
  br label %return, !dbg !1523

return:                                           ; preds = %if.end51, %if.end50, %if.else48, %if.then34, %for.end, %if.then23, %if.then14, %if.then9, %if.then4, %if.then
  %41 = load i32, i32* %retval, align 4, !dbg !1524
  ret i32 %41, !dbg !1524
}

; Function Attrs: nounwind uwtable
define internal i32 @cipher_test_run(%struct.evp_test_st* %t) #0 !dbg !160 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %cdat = alloca %struct.cipher_data_st*, align 8
  %rv = alloca i32, align 4
  %frag = alloca i32, align 4
  %out_misalign = alloca i64, align 8
  %inp_misalign = alloca i64, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !1525, metadata !207), !dbg !1526
  call void @llvm.dbg.declare(metadata %struct.cipher_data_st** %cdat, metadata !1527, metadata !207), !dbg !1528
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1529
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !1530
  %1 = load i8*, i8** %data, align 8, !dbg !1530
  %2 = bitcast i8* %1 to %struct.cipher_data_st*, !dbg !1529
  store %struct.cipher_data_st* %2, %struct.cipher_data_st** %cdat, align 8, !dbg !1528
  call void @llvm.dbg.declare(metadata i32* %rv, metadata !1531, metadata !207), !dbg !1532
  call void @llvm.dbg.declare(metadata i32* %frag, metadata !1533, metadata !207), !dbg !1534
  store i32 0, i32* %frag, align 4, !dbg !1534
  call void @llvm.dbg.declare(metadata i64* %out_misalign, metadata !1535, metadata !207), !dbg !1536
  call void @llvm.dbg.declare(metadata i64* %inp_misalign, metadata !1537, metadata !207), !dbg !1538
  %3 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1539
  %key = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %3, i32 0, i32 3, !dbg !1541
  %4 = load i8*, i8** %key, align 8, !dbg !1541
  %tobool = icmp ne i8* %4, null, !dbg !1539
  br i1 %tobool, label %if.end, label %if.then, !dbg !1542

if.then:                                          ; preds = %entry
  %5 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1543
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %5, i32 0, i32 4, !dbg !1545
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.56, i32 0, i32 0), i8** %err, align 8, !dbg !1546
  store i32 0, i32* %retval, align 4, !dbg !1547
  br label %return, !dbg !1547

if.end:                                           ; preds = %entry
  %6 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1548
  %iv = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %6, i32 0, i32 5, !dbg !1550
  %7 = load i8*, i8** %iv, align 8, !dbg !1550
  %tobool1 = icmp ne i8* %7, null, !dbg !1548
  br i1 %tobool1, label %if.end9, label %land.lhs.true, !dbg !1551

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1552
  %cipher = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %8, i32 0, i32 0, !dbg !1554
  %9 = load %struct.evp_cipher_st*, %struct.evp_cipher_st** %cipher, align 8, !dbg !1554
  %call = call i32 @EVP_CIPHER_iv_length(%struct.evp_cipher_st* %9), !dbg !1555
  %tobool2 = icmp ne i32 %call, 0, !dbg !1555
  br i1 %tobool2, label %if.then3, label %if.end9, !dbg !1556

if.then3:                                         ; preds = %land.lhs.true
  %10 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1557
  %cipher4 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %10, i32 0, i32 0, !dbg !1560
  %11 = load %struct.evp_cipher_st*, %struct.evp_cipher_st** %cipher4, align 8, !dbg !1560
  %call5 = call i64 @EVP_CIPHER_flags(%struct.evp_cipher_st* %11), !dbg !1561
  %and = and i64 %call5, 983047, !dbg !1562
  %cmp = icmp ne i64 %and, 65538, !dbg !1563
  br i1 %cmp, label %if.then6, label %if.end8, !dbg !1564

if.then6:                                         ; preds = %if.then3
  %12 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1565
  %err7 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %12, i32 0, i32 4, !dbg !1567
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.57, i32 0, i32 0), i8** %err7, align 8, !dbg !1568
  store i32 0, i32* %retval, align 4, !dbg !1569
  br label %return, !dbg !1569

if.end8:                                          ; preds = %if.then3
  br label %if.end9, !dbg !1570

if.end9:                                          ; preds = %if.end8, %land.lhs.true, %if.end
  %13 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1571
  %aead = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %13, i32 0, i32 2, !dbg !1573
  %14 = load i32, i32* %aead, align 4, !dbg !1573
  %tobool10 = icmp ne i32 %14, 0, !dbg !1571
  br i1 %tobool10, label %land.lhs.true11, label %if.end15, !dbg !1574

land.lhs.true11:                                  ; preds = %if.end9
  %15 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1575
  %tag = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %15, i32 0, i32 13, !dbg !1577
  %16 = load i8*, i8** %tag, align 8, !dbg !1577
  %tobool12 = icmp ne i8* %16, null, !dbg !1575
  br i1 %tobool12, label %if.end15, label %if.then13, !dbg !1578

if.then13:                                        ; preds = %land.lhs.true11
  %17 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1579
  %err14 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %17, i32 0, i32 4, !dbg !1581
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.58, i32 0, i32 0), i8** %err14, align 8, !dbg !1582
  store i32 0, i32* %retval, align 4, !dbg !1583
  br label %return, !dbg !1583

if.end15:                                         ; preds = %land.lhs.true11, %if.end9
  store i64 0, i64* %out_misalign, align 8, !dbg !1584
  br label %for.cond, !dbg !1586

for.cond:                                         ; preds = %if.end80, %if.end15
  %18 = load i64, i64* %out_misalign, align 8, !dbg !1587
  %cmp16 = icmp ule i64 %18, 1, !dbg !1590
  br i1 %cmp16, label %for.body, label %for.end81, !dbg !1591

for.body:                                         ; preds = %for.cond
  %19 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1592
  %aux_err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %19, i32 0, i32 5, !dbg !1594
  store i8* getelementptr inbounds ([64 x i8], [64 x i8]* @cipher_test_run.aux_err, i32 0, i32 0), i8** %aux_err, align 8, !dbg !1595
  store i64 -1, i64* %inp_misalign, align 8, !dbg !1596
  br label %for.cond17, !dbg !1598

for.cond17:                                       ; preds = %for.inc, %for.body
  %20 = load i64, i64* %inp_misalign, align 8, !dbg !1599
  %cmp18 = icmp ne i64 %20, 2, !dbg !1602
  br i1 %cmp18, label %for.body19, label %for.end, !dbg !1603

for.body19:                                       ; preds = %for.cond17
  %21 = load i64, i64* %inp_misalign, align 8, !dbg !1604
  %cmp20 = icmp eq i64 %21, -1, !dbg !1607
  br i1 %cmp20, label %if.then21, label %if.else, !dbg !1608

if.then21:                                        ; preds = %for.body19
  %22 = load i64, i64* %out_misalign, align 8, !dbg !1609
  %tobool22 = icmp ne i64 %22, 0, !dbg !1609
  %cond = select i1 %tobool22, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61, i32 0, i32 0), !dbg !1609
  %23 = load i32, i32* %frag, align 4, !dbg !1611
  %tobool23 = icmp ne i32 %23, 0, !dbg !1611
  %cond24 = select i1 %tobool23, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i32 0, i32 0), !dbg !1611
  %call25 = call i32 (i8*, i64, i8*, ...) @BIO_snprintf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @cipher_test_run.aux_err, i32 0, i32 0), i64 64, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.59, i32 0, i32 0), i8* %cond, i8* %cond24), !dbg !1612
  br label %if.end33, !dbg !1613

if.else:                                          ; preds = %for.body19
  %24 = load i64, i64* %out_misalign, align 8, !dbg !1614
  %tobool26 = icmp ne i64 %24, 0, !dbg !1614
  %cond27 = select i1 %tobool26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61, i32 0, i32 0), !dbg !1614
  %25 = load i64, i64* %inp_misalign, align 8, !dbg !1616
  %tobool28 = icmp ne i64 %25, 0, !dbg !1616
  %cond29 = select i1 %tobool28, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61, i32 0, i32 0), !dbg !1616
  %26 = load i32, i32* %frag, align 4, !dbg !1617
  %tobool30 = icmp ne i32 %26, 0, !dbg !1617
  %cond31 = select i1 %tobool30, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i32 0, i32 0), !dbg !1617
  %call32 = call i32 (i8*, i64, i8*, ...) @BIO_snprintf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @cipher_test_run.aux_err, i32 0, i32 0), i64 64, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.64, i32 0, i32 0), i8* %cond27, i8* %cond29, i8* %cond31), !dbg !1618
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.then21
  %27 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1619
  %enc = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %27, i32 0, i32 1, !dbg !1621
  %28 = load i32, i32* %enc, align 8, !dbg !1621
  %tobool34 = icmp ne i32 %28, 0, !dbg !1619
  br i1 %tobool34, label %if.then35, label %if.end43, !dbg !1622

if.then35:                                        ; preds = %if.end33
  %29 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1623
  %30 = load i64, i64* %out_misalign, align 8, !dbg !1625
  %31 = load i64, i64* %inp_misalign, align 8, !dbg !1626
  %32 = load i32, i32* %frag, align 4, !dbg !1627
  %call36 = call i32 @cipher_test_enc(%struct.evp_test_st* %29, i32 1, i64 %30, i64 %31, i32 %32), !dbg !1628
  store i32 %call36, i32* %rv, align 4, !dbg !1629
  %33 = load i32, i32* %rv, align 4, !dbg !1630
  %cmp37 = icmp ne i32 %33, 1, !dbg !1632
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !1633

if.then38:                                        ; preds = %if.then35
  %34 = load i32, i32* %rv, align 4, !dbg !1634
  %cmp39 = icmp slt i32 %34, 0, !dbg !1637
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !1638

if.then40:                                        ; preds = %if.then38
  store i32 0, i32* %retval, align 4, !dbg !1639
  br label %return, !dbg !1639

if.end41:                                         ; preds = %if.then38
  store i32 1, i32* %retval, align 4, !dbg !1640
  br label %return, !dbg !1640

if.end42:                                         ; preds = %if.then35
  br label %if.end43, !dbg !1641

if.end43:                                         ; preds = %if.end42, %if.end33
  %35 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1642
  %enc44 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %35, i32 0, i32 1, !dbg !1644
  %36 = load i32, i32* %enc44, align 8, !dbg !1644
  %cmp45 = icmp ne i32 %36, 1, !dbg !1645
  br i1 %cmp45, label %if.then46, label %if.end54, !dbg !1646

if.then46:                                        ; preds = %if.end43
  %37 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1647
  %38 = load i64, i64* %out_misalign, align 8, !dbg !1649
  %39 = load i64, i64* %inp_misalign, align 8, !dbg !1650
  %40 = load i32, i32* %frag, align 4, !dbg !1651
  %call47 = call i32 @cipher_test_enc(%struct.evp_test_st* %37, i32 0, i64 %38, i64 %39, i32 %40), !dbg !1652
  store i32 %call47, i32* %rv, align 4, !dbg !1653
  %41 = load i32, i32* %rv, align 4, !dbg !1654
  %cmp48 = icmp ne i32 %41, 1, !dbg !1656
  br i1 %cmp48, label %if.then49, label %if.end53, !dbg !1657

if.then49:                                        ; preds = %if.then46
  %42 = load i32, i32* %rv, align 4, !dbg !1658
  %cmp50 = icmp slt i32 %42, 0, !dbg !1661
  br i1 %cmp50, label %if.then51, label %if.end52, !dbg !1662

if.then51:                                        ; preds = %if.then49
  store i32 0, i32* %retval, align 4, !dbg !1663
  br label %return, !dbg !1663

if.end52:                                         ; preds = %if.then49
  store i32 1, i32* %retval, align 4, !dbg !1664
  br label %return, !dbg !1664

if.end53:                                         ; preds = %if.then46
  br label %if.end54, !dbg !1665

if.end54:                                         ; preds = %if.end53, %if.end43
  br label %for.inc, !dbg !1666

for.inc:                                          ; preds = %if.end54
  %43 = load i64, i64* %inp_misalign, align 8, !dbg !1667
  %inc = add i64 %43, 1, !dbg !1667
  store i64 %inc, i64* %inp_misalign, align 8, !dbg !1667
  br label %for.cond17, !dbg !1669, !llvm.loop !1670

for.end:                                          ; preds = %for.cond17
  %44 = load i64, i64* %out_misalign, align 8, !dbg !1672
  %cmp55 = icmp eq i64 %44, 1, !dbg !1674
  br i1 %cmp55, label %land.lhs.true56, label %if.else78, !dbg !1675

land.lhs.true56:                                  ; preds = %for.end
  %45 = load i32, i32* %frag, align 4, !dbg !1676
  %cmp57 = icmp eq i32 %45, 0, !dbg !1678
  br i1 %cmp57, label %if.then58, label %if.else78, !dbg !1679

if.then58:                                        ; preds = %land.lhs.true56
  %46 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1680
  %aead59 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %46, i32 0, i32 2, !dbg !1683
  %47 = load i32, i32* %aead59, align 4, !dbg !1683
  %cmp60 = icmp eq i32 %47, 7, !dbg !1684
  br i1 %cmp60, label %if.then75, label %lor.lhs.false, !dbg !1685

lor.lhs.false:                                    ; preds = %if.then58
  %48 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1686
  %cipher61 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %48, i32 0, i32 0, !dbg !1688
  %49 = load %struct.evp_cipher_st*, %struct.evp_cipher_st** %cipher61, align 8, !dbg !1688
  %call62 = call i64 @EVP_CIPHER_flags(%struct.evp_cipher_st* %49), !dbg !1689
  %and63 = and i64 %call62, 983047, !dbg !1690
  %cmp64 = icmp eq i64 %and63, 65540, !dbg !1691
  br i1 %cmp64, label %if.then75, label %lor.lhs.false65, !dbg !1692

lor.lhs.false65:                                  ; preds = %lor.lhs.false
  %50 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1693
  %cipher66 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %50, i32 0, i32 0, !dbg !1694
  %51 = load %struct.evp_cipher_st*, %struct.evp_cipher_st** %cipher66, align 8, !dbg !1694
  %call67 = call i64 @EVP_CIPHER_flags(%struct.evp_cipher_st* %51), !dbg !1695
  %and68 = and i64 %call67, 983047, !dbg !1696
  %cmp69 = icmp eq i64 %and68, 65537, !dbg !1697
  br i1 %cmp69, label %if.then75, label %lor.lhs.false70, !dbg !1698

lor.lhs.false70:                                  ; preds = %lor.lhs.false65
  %52 = load %struct.cipher_data_st*, %struct.cipher_data_st** %cdat, align 8, !dbg !1699
  %cipher71 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %52, i32 0, i32 0, !dbg !1700
  %53 = load %struct.evp_cipher_st*, %struct.evp_cipher_st** %cipher71, align 8, !dbg !1700
  %call72 = call i64 @EVP_CIPHER_flags(%struct.evp_cipher_st* %53), !dbg !1701
  %and73 = and i64 %call72, 983047, !dbg !1702
  %cmp74 = icmp eq i64 %and73, 65538, !dbg !1703
  br i1 %cmp74, label %if.then75, label %if.end76, !dbg !1704

if.then75:                                        ; preds = %lor.lhs.false70, %lor.lhs.false65, %lor.lhs.false, %if.then58
  br label %for.end81, !dbg !1706

if.end76:                                         ; preds = %lor.lhs.false70
  store i64 0, i64* %out_misalign, align 8, !dbg !1707
  %54 = load i32, i32* %frag, align 4, !dbg !1708
  %inc77 = add nsw i32 %54, 1, !dbg !1708
  store i32 %inc77, i32* %frag, align 4, !dbg !1708
  br label %if.end80, !dbg !1709

if.else78:                                        ; preds = %land.lhs.true56, %for.end
  %55 = load i64, i64* %out_misalign, align 8, !dbg !1710
  %inc79 = add i64 %55, 1, !dbg !1710
  store i64 %inc79, i64* %out_misalign, align 8, !dbg !1710
  br label %if.end80

if.end80:                                         ; preds = %if.else78, %if.end76
  br label %for.cond, !dbg !1712, !llvm.loop !1714

for.end81:                                        ; preds = %if.then75, %for.cond
  %56 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1716
  %aux_err82 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %56, i32 0, i32 5, !dbg !1717
  store i8* null, i8** %aux_err82, align 8, !dbg !1718
  store i32 1, i32* %retval, align 4, !dbg !1719
  br label %return, !dbg !1719

return:                                           ; preds = %for.end81, %if.end52, %if.then51, %if.end41, %if.then40, %if.then13, %if.then6, %if.then
  %57 = load i32, i32* %retval, align 4, !dbg !1720
  ret i32 %57, !dbg !1720
}

declare %struct.evp_cipher_st* @EVP_get_cipherbyname(i8*) #2

declare i32 @OBJ_sn2nid(i8*) #2

declare i32 @OBJ_ln2nid(i8*) #2

declare i64 @EVP_CIPHER_flags(%struct.evp_cipher_st*) #2

declare i32 @EVP_CIPHER_iv_length(%struct.evp_cipher_st*) #2

declare i32 @BIO_snprintf(i8*, i64, i8*, ...) #2

; Function Attrs: nounwind uwtable
define internal i32 @cipher_test_enc(%struct.evp_test_st* %t, i32 %enc, i64 %out_misalign, i64 %inp_misalign, i32 %frag) #0 !dbg !1721 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %enc.addr = alloca i32, align 4
  %out_misalign.addr = alloca i64, align 8
  %inp_misalign.addr = alloca i64, align 8
  %frag.addr = alloca i32, align 4
  %expected = alloca %struct.cipher_data_st*, align 8
  %in = alloca i8*, align 8
  %expected_out = alloca i8*, align 8
  %tmp = alloca i8*, align 8
  %in_len = alloca i64, align 8
  %out_len = alloca i64, align 8
  %donelen = alloca i64, align 8
  %ok = alloca i32, align 4
  %tmplen = alloca i32, align 4
  %chunklen = alloca i32, align 4
  %tmpflen = alloca i32, align 4
  %i = alloca i32, align 4
  %ctx = alloca %struct.evp_cipher_ctx_st*, align 8
  %tag = alloca i8*, align 8
  %rtag = alloca [16 x i8], align 16
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !1724, metadata !207), !dbg !1725
  store i32 %enc, i32* %enc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %enc.addr, metadata !1726, metadata !207), !dbg !1727
  store i64 %out_misalign, i64* %out_misalign.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %out_misalign.addr, metadata !1728, metadata !207), !dbg !1729
  store i64 %inp_misalign, i64* %inp_misalign.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %inp_misalign.addr, metadata !1730, metadata !207), !dbg !1731
  store i32 %frag, i32* %frag.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %frag.addr, metadata !1732, metadata !207), !dbg !1733
  call void @llvm.dbg.declare(metadata %struct.cipher_data_st** %expected, metadata !1734, metadata !207), !dbg !1735
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1736
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !1737
  %1 = load i8*, i8** %data, align 8, !dbg !1737
  %2 = bitcast i8* %1 to %struct.cipher_data_st*, !dbg !1736
  store %struct.cipher_data_st* %2, %struct.cipher_data_st** %expected, align 8, !dbg !1735
  call void @llvm.dbg.declare(metadata i8** %in, metadata !1738, metadata !207), !dbg !1739
  call void @llvm.dbg.declare(metadata i8** %expected_out, metadata !1740, metadata !207), !dbg !1741
  call void @llvm.dbg.declare(metadata i8** %tmp, metadata !1742, metadata !207), !dbg !1743
  store i8* null, i8** %tmp, align 8, !dbg !1743
  call void @llvm.dbg.declare(metadata i64* %in_len, metadata !1744, metadata !207), !dbg !1745
  call void @llvm.dbg.declare(metadata i64* %out_len, metadata !1746, metadata !207), !dbg !1747
  call void @llvm.dbg.declare(metadata i64* %donelen, metadata !1748, metadata !207), !dbg !1749
  store i64 0, i64* %donelen, align 8, !dbg !1749
  call void @llvm.dbg.declare(metadata i32* %ok, metadata !1750, metadata !207), !dbg !1751
  store i32 0, i32* %ok, align 4, !dbg !1751
  call void @llvm.dbg.declare(metadata i32* %tmplen, metadata !1752, metadata !207), !dbg !1753
  call void @llvm.dbg.declare(metadata i32* %chunklen, metadata !1754, metadata !207), !dbg !1755
  call void @llvm.dbg.declare(metadata i32* %tmpflen, metadata !1756, metadata !207), !dbg !1757
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1758, metadata !207), !dbg !1759
  call void @llvm.dbg.declare(metadata %struct.evp_cipher_ctx_st** %ctx, metadata !1760, metadata !207), !dbg !1764
  store %struct.evp_cipher_ctx_st* null, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !1764
  %3 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1765
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %3, i32 0, i32 4, !dbg !1766
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i32 0, i32 0), i8** %err, align 8, !dbg !1767
  %call = call %struct.evp_cipher_ctx_st* @EVP_CIPHER_CTX_new(), !dbg !1768
  store %struct.evp_cipher_ctx_st* %call, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !1770
  %4 = bitcast %struct.evp_cipher_ctx_st* %call to i8*, !dbg !1771
  %call10 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 562, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.66, i32 0, i32 0), i8* %4), !dbg !1772
  %tobool = icmp ne i32 %call10, 0, !dbg !1774
  br i1 %tobool, label %if.end, label %if.then, !dbg !1775

if.then:                                          ; preds = %entry
  br label %err309, !dbg !1776

if.end:                                           ; preds = %entry
  %5 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !1777
  call void @EVP_CIPHER_CTX_set_flags(%struct.evp_cipher_ctx_st* %5, i32 1), !dbg !1778
  %6 = load i32, i32* %enc.addr, align 4, !dbg !1779
  %tobool11 = icmp ne i32 %6, 0, !dbg !1779
  br i1 %tobool11, label %if.then12, label %if.else, !dbg !1781

if.then12:                                        ; preds = %if.end
  %7 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1782
  %plaintext = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %7, i32 0, i32 7, !dbg !1784
  %8 = load i8*, i8** %plaintext, align 8, !dbg !1784
  store i8* %8, i8** %in, align 8, !dbg !1785
  %9 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1786
  %plaintext_len = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %9, i32 0, i32 8, !dbg !1787
  %10 = load i64, i64* %plaintext_len, align 8, !dbg !1787
  store i64 %10, i64* %in_len, align 8, !dbg !1788
  %11 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1789
  %ciphertext = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %11, i32 0, i32 9, !dbg !1790
  %12 = load i8*, i8** %ciphertext, align 8, !dbg !1790
  store i8* %12, i8** %expected_out, align 8, !dbg !1791
  %13 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1792
  %ciphertext_len = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %13, i32 0, i32 10, !dbg !1793
  %14 = load i64, i64* %ciphertext_len, align 8, !dbg !1793
  store i64 %14, i64* %out_len, align 8, !dbg !1794
  br label %if.end17, !dbg !1795

if.else:                                          ; preds = %if.end
  %15 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1796
  %ciphertext13 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %15, i32 0, i32 9, !dbg !1798
  %16 = load i8*, i8** %ciphertext13, align 8, !dbg !1798
  store i8* %16, i8** %in, align 8, !dbg !1799
  %17 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1800
  %ciphertext_len14 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %17, i32 0, i32 10, !dbg !1801
  %18 = load i64, i64* %ciphertext_len14, align 8, !dbg !1801
  store i64 %18, i64* %in_len, align 8, !dbg !1802
  %19 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1803
  %plaintext15 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %19, i32 0, i32 7, !dbg !1804
  %20 = load i8*, i8** %plaintext15, align 8, !dbg !1804
  store i8* %20, i8** %expected_out, align 8, !dbg !1805
  %21 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1806
  %plaintext_len16 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %21, i32 0, i32 8, !dbg !1807
  %22 = load i64, i64* %plaintext_len16, align 8, !dbg !1807
  store i64 %22, i64* %out_len, align 8, !dbg !1808
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then12
  %23 = load i64, i64* %inp_misalign.addr, align 8, !dbg !1809
  %cmp = icmp eq i64 %23, -1, !dbg !1811
  br i1 %cmp, label %if.then18, label %if.else24, !dbg !1812

if.then18:                                        ; preds = %if.end17
  %24 = load i64, i64* %out_misalign.addr, align 8, !dbg !1813
  %25 = load i64, i64* %in_len, align 8, !dbg !1815
  %add = add i64 %24, %25, !dbg !1816
  %add19 = add i64 %add, 64, !dbg !1817
  %call20 = call i8* @CRYPTO_malloc(i64 %add19, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 580), !dbg !1818
  store i8* %call20, i8** %tmp, align 8, !dbg !1819
  %26 = load i8*, i8** %tmp, align 8, !dbg !1820
  %tobool21 = icmp ne i8* %26, null, !dbg !1820
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !1822

if.then22:                                        ; preds = %if.then18
  br label %err309, !dbg !1823

if.end23:                                         ; preds = %if.then18
  %27 = load i8*, i8** %tmp, align 8, !dbg !1824
  %28 = load i64, i64* %out_misalign.addr, align 8, !dbg !1825
  %add.ptr = getelementptr inbounds i8, i8* %27, i64 %28, !dbg !1826
  %29 = load i8*, i8** %in, align 8, !dbg !1827
  %30 = load i64, i64* %in_len, align 8, !dbg !1828
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr, i8* %29, i64 %30, i32 1, i1 false), !dbg !1829
  store i8* %add.ptr, i8** %in, align 8, !dbg !1830
  br label %if.end39, !dbg !1831

if.else24:                                        ; preds = %if.end17
  %31 = load i64, i64* %out_misalign.addr, align 8, !dbg !1832
  %32 = load i64, i64* %in_len, align 8, !dbg !1834
  %add25 = add i64 %31, %32, !dbg !1835
  %and = and i64 %add25, 15, !dbg !1836
  %sub = sub i64 16, %and, !dbg !1837
  %33 = load i64, i64* %inp_misalign.addr, align 8, !dbg !1838
  %add26 = add i64 %33, %sub, !dbg !1838
  store i64 %add26, i64* %inp_misalign.addr, align 8, !dbg !1838
  %34 = load i64, i64* %out_misalign.addr, align 8, !dbg !1839
  %35 = load i64, i64* %in_len, align 8, !dbg !1840
  %add27 = add i64 %34, %35, !dbg !1841
  %add28 = add i64 %add27, 64, !dbg !1842
  %36 = load i64, i64* %inp_misalign.addr, align 8, !dbg !1843
  %add29 = add i64 %add28, %36, !dbg !1844
  %37 = load i64, i64* %in_len, align 8, !dbg !1845
  %add30 = add i64 %add29, %37, !dbg !1846
  %call31 = call i8* @CRYPTO_malloc(i64 %add30, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 595), !dbg !1847
  store i8* %call31, i8** %tmp, align 8, !dbg !1848
  %38 = load i8*, i8** %tmp, align 8, !dbg !1849
  %tobool32 = icmp ne i8* %38, null, !dbg !1849
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !1851

if.then33:                                        ; preds = %if.else24
  br label %err309, !dbg !1852

if.end34:                                         ; preds = %if.else24
  %39 = load i8*, i8** %tmp, align 8, !dbg !1853
  %40 = load i64, i64* %out_misalign.addr, align 8, !dbg !1854
  %add.ptr35 = getelementptr inbounds i8, i8* %39, i64 %40, !dbg !1855
  %41 = load i64, i64* %in_len, align 8, !dbg !1856
  %add.ptr36 = getelementptr inbounds i8, i8* %add.ptr35, i64 %41, !dbg !1857
  %add.ptr37 = getelementptr inbounds i8, i8* %add.ptr36, i64 64, !dbg !1858
  %42 = load i64, i64* %inp_misalign.addr, align 8, !dbg !1859
  %add.ptr38 = getelementptr inbounds i8, i8* %add.ptr37, i64 %42, !dbg !1860
  %43 = load i8*, i8** %in, align 8, !dbg !1861
  %44 = load i64, i64* %in_len, align 8, !dbg !1862
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %add.ptr38, i8* %43, i64 %44, i32 1, i1 false), !dbg !1863
  store i8* %add.ptr38, i8** %in, align 8, !dbg !1864
  br label %if.end39

if.end39:                                         ; preds = %if.end34, %if.end23
  %45 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !1865
  %46 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1867
  %cipher = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %46, i32 0, i32 0, !dbg !1868
  %47 = load %struct.evp_cipher_st*, %struct.evp_cipher_st** %cipher, align 8, !dbg !1868
  %48 = load i32, i32* %enc.addr, align 4, !dbg !1869
  %call40 = call i32 @EVP_CipherInit_ex(%struct.evp_cipher_ctx_st* %45, %struct.evp_cipher_st* %47, %struct.engine_st* null, i8* null, i8* null, i32 %48), !dbg !1870
  %tobool41 = icmp ne i32 %call40, 0, !dbg !1870
  br i1 %tobool41, label %if.end44, label %if.then42, !dbg !1871

if.then42:                                        ; preds = %if.end39
  %49 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1872
  %err43 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %49, i32 0, i32 4, !dbg !1874
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.67, i32 0, i32 0), i8** %err43, align 8, !dbg !1875
  br label %err309, !dbg !1876

if.end44:                                         ; preds = %if.end39
  %50 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1877
  %iv = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %50, i32 0, i32 5, !dbg !1879
  %51 = load i8*, i8** %iv, align 8, !dbg !1879
  %tobool45 = icmp ne i8* %51, null, !dbg !1877
  br i1 %tobool45, label %if.then46, label %if.end64, !dbg !1880

if.then46:                                        ; preds = %if.end44
  %52 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1881
  %aead = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %52, i32 0, i32 2, !dbg !1884
  %53 = load i32, i32* %aead, align 4, !dbg !1884
  %tobool47 = icmp ne i32 %53, 0, !dbg !1881
  br i1 %tobool47, label %if.then48, label %if.else54, !dbg !1885

if.then48:                                        ; preds = %if.then46
  %54 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !1886
  %55 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1889
  %iv_len = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %55, i32 0, i32 6, !dbg !1890
  %56 = load i64, i64* %iv_len, align 8, !dbg !1890
  %conv = trunc i64 %56 to i32, !dbg !1889
  %call49 = call i32 @EVP_CIPHER_CTX_ctrl(%struct.evp_cipher_ctx_st* %54, i32 9, i32 %conv, i8* null), !dbg !1891
  %tobool50 = icmp ne i32 %call49, 0, !dbg !1891
  br i1 %tobool50, label %if.end53, label %if.then51, !dbg !1892

if.then51:                                        ; preds = %if.then48
  %57 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1893
  %err52 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %57, i32 0, i32 4, !dbg !1895
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.68, i32 0, i32 0), i8** %err52, align 8, !dbg !1896
  br label %err309, !dbg !1897

if.end53:                                         ; preds = %if.then48
  br label %if.end63, !dbg !1898

if.else54:                                        ; preds = %if.then46
  %58 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1899
  %iv_len55 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %58, i32 0, i32 6, !dbg !1902
  %59 = load i64, i64* %iv_len55, align 8, !dbg !1902
  %60 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !1903
  %call56 = call i32 @EVP_CIPHER_CTX_iv_length(%struct.evp_cipher_ctx_st* %60), !dbg !1904
  %conv57 = sext i32 %call56 to i64, !dbg !1905
  %cmp58 = icmp ne i64 %59, %conv57, !dbg !1906
  br i1 %cmp58, label %if.then60, label %if.end62, !dbg !1899

if.then60:                                        ; preds = %if.else54
  %61 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1907
  %err61 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %61, i32 0, i32 4, !dbg !1909
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.68, i32 0, i32 0), i8** %err61, align 8, !dbg !1910
  br label %err309, !dbg !1911

if.end62:                                         ; preds = %if.else54
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %if.end53
  br label %if.end64, !dbg !1912

if.end64:                                         ; preds = %if.end63, %if.end44
  %62 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1913
  %aead65 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %62, i32 0, i32 2, !dbg !1915
  %63 = load i32, i32* %aead65, align 4, !dbg !1915
  %tobool66 = icmp ne i32 %63, 0, !dbg !1913
  br i1 %tobool66, label %if.then67, label %if.end91, !dbg !1916

if.then67:                                        ; preds = %if.end64
  call void @llvm.dbg.declare(metadata i8** %tag, metadata !1917, metadata !207), !dbg !1919
  %64 = load i32, i32* %enc.addr, align 4, !dbg !1920
  %tobool69 = icmp ne i32 %64, 0, !dbg !1920
  br i1 %tobool69, label %if.then73, label %lor.lhs.false, !dbg !1922

lor.lhs.false:                                    ; preds = %if.then67
  %65 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1923
  %aead70 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %65, i32 0, i32 2, !dbg !1925
  %66 = load i32, i32* %aead70, align 4, !dbg !1925
  %cmp71 = icmp eq i32 %66, 65539, !dbg !1926
  br i1 %cmp71, label %if.then73, label %if.else75, !dbg !1927

if.then73:                                        ; preds = %lor.lhs.false, %if.then67
  %67 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1928
  %err74 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %67, i32 0, i32 4, !dbg !1930
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.69, i32 0, i32 0), i8** %err74, align 8, !dbg !1931
  store i8* null, i8** %tag, align 8, !dbg !1932
  br label %if.end78, !dbg !1933

if.else75:                                        ; preds = %lor.lhs.false
  %68 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1934
  %err76 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %68, i32 0, i32 4, !dbg !1936
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.70, i32 0, i32 0), i8** %err76, align 8, !dbg !1937
  %69 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1938
  %tag77 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %69, i32 0, i32 13, !dbg !1939
  %70 = load i8*, i8** %tag77, align 8, !dbg !1939
  store i8* %70, i8** %tag, align 8, !dbg !1940
  br label %if.end78

if.end78:                                         ; preds = %if.else75, %if.then73
  %71 = load i8*, i8** %tag, align 8, !dbg !1941
  %tobool79 = icmp ne i8* %71, null, !dbg !1941
  br i1 %tobool79, label %if.then84, label %lor.lhs.false80, !dbg !1943

lor.lhs.false80:                                  ; preds = %if.end78
  %72 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1944
  %aead81 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %72, i32 0, i32 2, !dbg !1946
  %73 = load i32, i32* %aead81, align 4, !dbg !1946
  %cmp82 = icmp ne i32 %73, 6, !dbg !1947
  br i1 %cmp82, label %if.then84, label %if.end90, !dbg !1948

if.then84:                                        ; preds = %lor.lhs.false80, %if.end78
  %74 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !1949
  %75 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1952
  %tag_len = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %75, i32 0, i32 14, !dbg !1953
  %76 = load i64, i64* %tag_len, align 8, !dbg !1953
  %conv85 = trunc i64 %76 to i32, !dbg !1952
  %77 = load i8*, i8** %tag, align 8, !dbg !1954
  %call86 = call i32 @EVP_CIPHER_CTX_ctrl(%struct.evp_cipher_ctx_st* %74, i32 17, i32 %conv85, i8* %77), !dbg !1955
  %tobool87 = icmp ne i32 %call86, 0, !dbg !1955
  br i1 %tobool87, label %if.end89, label %if.then88, !dbg !1956

if.then88:                                        ; preds = %if.then84
  br label %err309, !dbg !1957

if.end89:                                         ; preds = %if.then84
  br label %if.end90, !dbg !1958

if.end90:                                         ; preds = %if.end89, %lor.lhs.false80
  br label %if.end91, !dbg !1959

if.end91:                                         ; preds = %if.end90, %if.end64
  %78 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !1960
  %79 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1962
  %key_len = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %79, i32 0, i32 4, !dbg !1963
  %80 = load i64, i64* %key_len, align 8, !dbg !1963
  %conv92 = trunc i64 %80 to i32, !dbg !1962
  %call93 = call i32 @EVP_CIPHER_CTX_set_key_length(%struct.evp_cipher_ctx_st* %78, i32 %conv92), !dbg !1964
  %tobool94 = icmp ne i32 %call93, 0, !dbg !1964
  br i1 %tobool94, label %if.end97, label %if.then95, !dbg !1965

if.then95:                                        ; preds = %if.end91
  %81 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1966
  %err96 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %81, i32 0, i32 4, !dbg !1968
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.71, i32 0, i32 0), i8** %err96, align 8, !dbg !1969
  br label %err309, !dbg !1970

if.end97:                                         ; preds = %if.end91
  %82 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !1971
  %83 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1973
  %key = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %83, i32 0, i32 3, !dbg !1974
  %84 = load i8*, i8** %key, align 8, !dbg !1974
  %85 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1975
  %iv98 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %85, i32 0, i32 5, !dbg !1976
  %86 = load i8*, i8** %iv98, align 8, !dbg !1976
  %call99 = call i32 @EVP_CipherInit_ex(%struct.evp_cipher_ctx_st* %82, %struct.evp_cipher_st* null, %struct.engine_st* null, i8* %84, i8* %86, i32 -1), !dbg !1977
  %tobool100 = icmp ne i32 %call99, 0, !dbg !1977
  br i1 %tobool100, label %if.end103, label %if.then101, !dbg !1978

if.then101:                                       ; preds = %if.end97
  %87 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !1979
  %err102 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %87, i32 0, i32 4, !dbg !1981
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.72, i32 0, i32 0), i8** %err102, align 8, !dbg !1982
  br label %err309, !dbg !1983

if.end103:                                        ; preds = %if.end97
  %88 = load i32, i32* %enc.addr, align 4, !dbg !1984
  %tobool104 = icmp ne i32 %88, 0, !dbg !1984
  br i1 %tobool104, label %if.end117, label %land.lhs.true, !dbg !1986

land.lhs.true:                                    ; preds = %if.end103
  %89 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1987
  %aead105 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %89, i32 0, i32 2, !dbg !1989
  %90 = load i32, i32* %aead105, align 4, !dbg !1989
  %cmp106 = icmp eq i32 %90, 65539, !dbg !1990
  br i1 %cmp106, label %if.then108, label %if.end117, !dbg !1991

if.then108:                                       ; preds = %land.lhs.true
  %91 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !1992
  %92 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1995
  %tag_len109 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %92, i32 0, i32 14, !dbg !1996
  %93 = load i64, i64* %tag_len109, align 8, !dbg !1996
  %conv110 = trunc i64 %93 to i32, !dbg !1995
  %94 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !1997
  %tag111 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %94, i32 0, i32 13, !dbg !1998
  %95 = load i8*, i8** %tag111, align 8, !dbg !1998
  %call112 = call i32 @EVP_CIPHER_CTX_ctrl(%struct.evp_cipher_ctx_st* %91, i32 17, i32 %conv110, i8* %95), !dbg !1999
  %tobool113 = icmp ne i32 %call112, 0, !dbg !1999
  br i1 %tobool113, label %if.end116, label %if.then114, !dbg !2000

if.then114:                                       ; preds = %if.then108
  %96 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2001
  %err115 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %96, i32 0, i32 4, !dbg !2003
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.70, i32 0, i32 0), i8** %err115, align 8, !dbg !2004
  br label %err309, !dbg !2005

if.end116:                                        ; preds = %if.then108
  br label %if.end117, !dbg !2006

if.end117:                                        ; preds = %if.end116, %land.lhs.true, %if.end103
  %97 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2007
  %aead118 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %97, i32 0, i32 2, !dbg !2009
  %98 = load i32, i32* %aead118, align 4, !dbg !2009
  %cmp119 = icmp eq i32 %98, 7, !dbg !2010
  br i1 %cmp119, label %if.then121, label %if.end128, !dbg !2011

if.then121:                                       ; preds = %if.end117
  %99 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !2012
  %100 = load i64, i64* %out_len, align 8, !dbg !2015
  %conv122 = trunc i64 %100 to i32, !dbg !2015
  %call123 = call i32 @EVP_CipherUpdate(%struct.evp_cipher_ctx_st* %99, i8* null, i32* %tmplen, i8* null, i32 %conv122), !dbg !2016
  %tobool124 = icmp ne i32 %call123, 0, !dbg !2016
  br i1 %tobool124, label %if.end127, label %if.then125, !dbg !2017

if.then125:                                       ; preds = %if.then121
  %101 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2018
  %err126 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %101, i32 0, i32 4, !dbg !2020
  store i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.73, i32 0, i32 0), i8** %err126, align 8, !dbg !2021
  br label %err309, !dbg !2022

if.end127:                                        ; preds = %if.then121
  br label %if.end128, !dbg !2023

if.end128:                                        ; preds = %if.end127, %if.end117
  %102 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2024
  %aad = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %102, i32 0, i32 11, !dbg !2026
  %arrayidx = getelementptr inbounds [4 x i8*], [4 x i8*]* %aad, i64 0, i64 0, !dbg !2024
  %103 = load i8*, i8** %arrayidx, align 8, !dbg !2024
  %cmp129 = icmp ne i8* %103, null, !dbg !2027
  br i1 %cmp129, label %if.then131, label %if.end215, !dbg !2028

if.then131:                                       ; preds = %if.end128
  %104 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2029
  %err132 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %104, i32 0, i32 4, !dbg !2031
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.74, i32 0, i32 0), i8** %err132, align 8, !dbg !2032
  %105 = load i32, i32* %frag.addr, align 4, !dbg !2033
  %tobool133 = icmp ne i32 %105, 0, !dbg !2033
  br i1 %tobool133, label %if.else149, label %if.then134, !dbg !2035

if.then134:                                       ; preds = %if.then131
  store i32 0, i32* %i, align 4, !dbg !2036
  br label %for.cond, !dbg !2039

for.cond:                                         ; preds = %for.inc, %if.then134
  %106 = load i32, i32* %i, align 4, !dbg !2040
  %idxprom = sext i32 %106 to i64, !dbg !2043
  %107 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2043
  %aad135 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %107, i32 0, i32 11, !dbg !2044
  %arrayidx136 = getelementptr inbounds [4 x i8*], [4 x i8*]* %aad135, i64 0, i64 %idxprom, !dbg !2043
  %108 = load i8*, i8** %arrayidx136, align 8, !dbg !2043
  %cmp137 = icmp ne i8* %108, null, !dbg !2045
  br i1 %cmp137, label %for.body, label %for.end, !dbg !2046

for.body:                                         ; preds = %for.cond
  %109 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !2047
  %110 = load i32, i32* %i, align 4, !dbg !2050
  %idxprom139 = sext i32 %110 to i64, !dbg !2051
  %111 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2051
  %aad140 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %111, i32 0, i32 11, !dbg !2052
  %arrayidx141 = getelementptr inbounds [4 x i8*], [4 x i8*]* %aad140, i64 0, i64 %idxprom139, !dbg !2051
  %112 = load i8*, i8** %arrayidx141, align 8, !dbg !2051
  %113 = load i32, i32* %i, align 4, !dbg !2053
  %idxprom142 = sext i32 %113 to i64, !dbg !2054
  %114 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2054
  %aad_len = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %114, i32 0, i32 12, !dbg !2055
  %arrayidx143 = getelementptr inbounds [4 x i64], [4 x i64]* %aad_len, i64 0, i64 %idxprom142, !dbg !2054
  %115 = load i64, i64* %arrayidx143, align 8, !dbg !2054
  %conv144 = trunc i64 %115 to i32, !dbg !2054
  %call145 = call i32 @EVP_CipherUpdate(%struct.evp_cipher_ctx_st* %109, i8* null, i32* %chunklen, i8* %112, i32 %conv144), !dbg !2056
  %tobool146 = icmp ne i32 %call145, 0, !dbg !2056
  br i1 %tobool146, label %if.end148, label %if.then147, !dbg !2057

if.then147:                                       ; preds = %for.body
  br label %err309, !dbg !2058

if.end148:                                        ; preds = %for.body
  br label %for.inc, !dbg !2059

for.inc:                                          ; preds = %if.end148
  %116 = load i32, i32* %i, align 4, !dbg !2060
  %inc = add nsw i32 %116, 1, !dbg !2060
  store i32 %inc, i32* %i, align 4, !dbg !2060
  br label %for.cond, !dbg !2062, !llvm.loop !2063

for.end:                                          ; preds = %for.cond
  br label %if.end214, !dbg !2065

if.else149:                                       ; preds = %if.then131
  store i32 0, i32* %i, align 4, !dbg !2066
  br label %for.cond150, !dbg !2069

for.cond150:                                      ; preds = %for.inc211, %if.else149
  %117 = load i32, i32* %i, align 4, !dbg !2070
  %idxprom151 = sext i32 %117 to i64, !dbg !2073
  %118 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2073
  %aad152 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %118, i32 0, i32 11, !dbg !2074
  %arrayidx153 = getelementptr inbounds [4 x i8*], [4 x i8*]* %aad152, i64 0, i64 %idxprom151, !dbg !2073
  %119 = load i8*, i8** %arrayidx153, align 8, !dbg !2073
  %cmp154 = icmp ne i8* %119, null, !dbg !2075
  br i1 %cmp154, label %for.body156, label %for.end213, !dbg !2076

for.body156:                                      ; preds = %for.cond150
  %120 = load i32, i32* %i, align 4, !dbg !2077
  %idxprom157 = sext i32 %120 to i64, !dbg !2080
  %121 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2080
  %aad_len158 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %121, i32 0, i32 12, !dbg !2081
  %arrayidx159 = getelementptr inbounds [4 x i64], [4 x i64]* %aad_len158, i64 0, i64 %idxprom157, !dbg !2080
  %122 = load i64, i64* %arrayidx159, align 8, !dbg !2080
  %cmp160 = icmp ugt i64 %122, 0, !dbg !2082
  br i1 %cmp160, label %if.then162, label %if.end171, !dbg !2083

if.then162:                                       ; preds = %for.body156
  %123 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !2084
  %124 = load i32, i32* %i, align 4, !dbg !2087
  %idxprom163 = sext i32 %124 to i64, !dbg !2088
  %125 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2088
  %aad164 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %125, i32 0, i32 11, !dbg !2089
  %arrayidx165 = getelementptr inbounds [4 x i8*], [4 x i8*]* %aad164, i64 0, i64 %idxprom163, !dbg !2088
  %126 = load i8*, i8** %arrayidx165, align 8, !dbg !2088
  %call166 = call i32 @EVP_CipherUpdate(%struct.evp_cipher_ctx_st* %123, i8* null, i32* %chunklen, i8* %126, i32 1), !dbg !2090
  %tobool167 = icmp ne i32 %call166, 0, !dbg !2090
  br i1 %tobool167, label %if.end169, label %if.then168, !dbg !2091

if.then168:                                       ; preds = %if.then162
  br label %err309, !dbg !2092

if.end169:                                        ; preds = %if.then162
  %127 = load i64, i64* %donelen, align 8, !dbg !2093
  %inc170 = add i64 %127, 1, !dbg !2093
  store i64 %inc170, i64* %donelen, align 8, !dbg !2093
  br label %if.end171, !dbg !2094

if.end171:                                        ; preds = %if.end169, %for.body156
  %128 = load i32, i32* %i, align 4, !dbg !2095
  %idxprom172 = sext i32 %128 to i64, !dbg !2097
  %129 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2097
  %aad_len173 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %129, i32 0, i32 12, !dbg !2098
  %arrayidx174 = getelementptr inbounds [4 x i64], [4 x i64]* %aad_len173, i64 0, i64 %idxprom172, !dbg !2097
  %130 = load i64, i64* %arrayidx174, align 8, !dbg !2097
  %cmp175 = icmp ugt i64 %130, 2, !dbg !2099
  br i1 %cmp175, label %if.then177, label %if.end196, !dbg !2100

if.then177:                                       ; preds = %if.end171
  %131 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !2101
  %132 = load i32, i32* %i, align 4, !dbg !2104
  %idxprom178 = sext i32 %132 to i64, !dbg !2105
  %133 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2105
  %aad179 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %133, i32 0, i32 11, !dbg !2106
  %arrayidx180 = getelementptr inbounds [4 x i8*], [4 x i8*]* %aad179, i64 0, i64 %idxprom178, !dbg !2105
  %134 = load i8*, i8** %arrayidx180, align 8, !dbg !2105
  %135 = load i64, i64* %donelen, align 8, !dbg !2107
  %add.ptr181 = getelementptr inbounds i8, i8* %134, i64 %135, !dbg !2108
  %136 = load i32, i32* %i, align 4, !dbg !2109
  %idxprom182 = sext i32 %136 to i64, !dbg !2110
  %137 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2110
  %aad_len183 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %137, i32 0, i32 12, !dbg !2111
  %arrayidx184 = getelementptr inbounds [4 x i64], [4 x i64]* %aad_len183, i64 0, i64 %idxprom182, !dbg !2110
  %138 = load i64, i64* %arrayidx184, align 8, !dbg !2110
  %sub185 = sub i64 %138, 2, !dbg !2112
  %conv186 = trunc i64 %sub185 to i32, !dbg !2110
  %call187 = call i32 @EVP_CipherUpdate(%struct.evp_cipher_ctx_st* %131, i8* null, i32* %chunklen, i8* %add.ptr181, i32 %conv186), !dbg !2113
  %tobool188 = icmp ne i32 %call187, 0, !dbg !2113
  br i1 %tobool188, label %if.end190, label %if.then189, !dbg !2114

if.then189:                                       ; preds = %if.then177
  br label %err309, !dbg !2115

if.end190:                                        ; preds = %if.then177
  %139 = load i32, i32* %i, align 4, !dbg !2116
  %idxprom191 = sext i32 %139 to i64, !dbg !2117
  %140 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2117
  %aad_len192 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %140, i32 0, i32 12, !dbg !2118
  %arrayidx193 = getelementptr inbounds [4 x i64], [4 x i64]* %aad_len192, i64 0, i64 %idxprom191, !dbg !2117
  %141 = load i64, i64* %arrayidx193, align 8, !dbg !2117
  %sub194 = sub i64 %141, 2, !dbg !2119
  %142 = load i64, i64* %donelen, align 8, !dbg !2120
  %add195 = add i64 %142, %sub194, !dbg !2120
  store i64 %add195, i64* %donelen, align 8, !dbg !2120
  br label %if.end196, !dbg !2121

if.end196:                                        ; preds = %if.end190, %if.end171
  %143 = load i32, i32* %i, align 4, !dbg !2122
  %idxprom197 = sext i32 %143 to i64, !dbg !2124
  %144 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2124
  %aad_len198 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %144, i32 0, i32 12, !dbg !2125
  %arrayidx199 = getelementptr inbounds [4 x i64], [4 x i64]* %aad_len198, i64 0, i64 %idxprom197, !dbg !2124
  %145 = load i64, i64* %arrayidx199, align 8, !dbg !2124
  %cmp200 = icmp ugt i64 %145, 1, !dbg !2126
  br i1 %cmp200, label %land.lhs.true202, label %if.end210, !dbg !2127

land.lhs.true202:                                 ; preds = %if.end196
  %146 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !2128
  %147 = load i32, i32* %i, align 4, !dbg !2130
  %idxprom203 = sext i32 %147 to i64, !dbg !2131
  %148 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2131
  %aad204 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %148, i32 0, i32 11, !dbg !2132
  %arrayidx205 = getelementptr inbounds [4 x i8*], [4 x i8*]* %aad204, i64 0, i64 %idxprom203, !dbg !2131
  %149 = load i8*, i8** %arrayidx205, align 8, !dbg !2131
  %150 = load i64, i64* %donelen, align 8, !dbg !2133
  %add.ptr206 = getelementptr inbounds i8, i8* %149, i64 %150, !dbg !2134
  %call207 = call i32 @EVP_CipherUpdate(%struct.evp_cipher_ctx_st* %146, i8* null, i32* %chunklen, i8* %add.ptr206, i32 1), !dbg !2135
  %tobool208 = icmp ne i32 %call207, 0, !dbg !2135
  br i1 %tobool208, label %if.end210, label %if.then209, !dbg !2136

if.then209:                                       ; preds = %land.lhs.true202
  br label %err309, !dbg !2138

if.end210:                                        ; preds = %land.lhs.true202, %if.end196
  br label %for.inc211, !dbg !2139

for.inc211:                                       ; preds = %if.end210
  %151 = load i32, i32* %i, align 4, !dbg !2140
  %inc212 = add nsw i32 %151, 1, !dbg !2140
  store i32 %inc212, i32* %i, align 4, !dbg !2140
  br label %for.cond150, !dbg !2142, !llvm.loop !2143

for.end213:                                       ; preds = %for.cond150
  br label %if.end214

if.end214:                                        ; preds = %for.end213, %for.end
  br label %if.end215, !dbg !2145

if.end215:                                        ; preds = %if.end214, %if.end128
  %152 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !2146
  %call216 = call i32 @EVP_CIPHER_CTX_set_padding(%struct.evp_cipher_ctx_st* %152, i32 0), !dbg !2147
  %153 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2148
  %err217 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %153, i32 0, i32 4, !dbg !2149
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.75, i32 0, i32 0), i8** %err217, align 8, !dbg !2150
  store i32 0, i32* %tmplen, align 4, !dbg !2151
  %154 = load i32, i32* %frag.addr, align 4, !dbg !2152
  %tobool218 = icmp ne i32 %154, 0, !dbg !2152
  br i1 %tobool218, label %if.else226, label %if.then219, !dbg !2154

if.then219:                                       ; preds = %if.end215
  %155 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !2155
  %156 = load i8*, i8** %tmp, align 8, !dbg !2158
  %157 = load i64, i64* %out_misalign.addr, align 8, !dbg !2159
  %add.ptr220 = getelementptr inbounds i8, i8* %156, i64 %157, !dbg !2160
  %158 = load i8*, i8** %in, align 8, !dbg !2161
  %159 = load i64, i64* %in_len, align 8, !dbg !2162
  %conv221 = trunc i64 %159 to i32, !dbg !2162
  %call222 = call i32 @EVP_CipherUpdate(%struct.evp_cipher_ctx_st* %155, i8* %add.ptr220, i32* %tmplen, i8* %158, i32 %conv221), !dbg !2163
  %tobool223 = icmp ne i32 %call222, 0, !dbg !2163
  br i1 %tobool223, label %if.end225, label %if.then224, !dbg !2164

if.then224:                                       ; preds = %if.then219
  br label %err309, !dbg !2165

if.end225:                                        ; preds = %if.then219
  br label %if.end264, !dbg !2166

if.else226:                                       ; preds = %if.end215
  %160 = load i64, i64* %in_len, align 8, !dbg !2167
  %cmp227 = icmp ugt i64 %160, 0, !dbg !2170
  br i1 %cmp227, label %if.then229, label %if.end236, !dbg !2171

if.then229:                                       ; preds = %if.else226
  %161 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !2172
  %162 = load i8*, i8** %tmp, align 8, !dbg !2175
  %163 = load i64, i64* %out_misalign.addr, align 8, !dbg !2176
  %add.ptr230 = getelementptr inbounds i8, i8* %162, i64 %163, !dbg !2177
  %164 = load i8*, i8** %in, align 8, !dbg !2178
  %call231 = call i32 @EVP_CipherUpdate(%struct.evp_cipher_ctx_st* %161, i8* %add.ptr230, i32* %chunklen, i8* %164, i32 1), !dbg !2179
  %tobool232 = icmp ne i32 %call231, 0, !dbg !2179
  br i1 %tobool232, label %if.end234, label %if.then233, !dbg !2180

if.then233:                                       ; preds = %if.then229
  br label %err309, !dbg !2181

if.end234:                                        ; preds = %if.then229
  %165 = load i32, i32* %chunklen, align 4, !dbg !2182
  %166 = load i32, i32* %tmplen, align 4, !dbg !2183
  %add235 = add nsw i32 %166, %165, !dbg !2183
  store i32 %add235, i32* %tmplen, align 4, !dbg !2183
  %167 = load i8*, i8** %in, align 8, !dbg !2184
  %incdec.ptr = getelementptr inbounds i8, i8* %167, i32 1, !dbg !2184
  store i8* %incdec.ptr, i8** %in, align 8, !dbg !2184
  %168 = load i64, i64* %in_len, align 8, !dbg !2185
  %dec = add i64 %168, -1, !dbg !2185
  store i64 %dec, i64* %in_len, align 8, !dbg !2185
  br label %if.end236, !dbg !2186

if.end236:                                        ; preds = %if.end234, %if.else226
  %169 = load i64, i64* %in_len, align 8, !dbg !2187
  %cmp237 = icmp ugt i64 %169, 1, !dbg !2189
  br i1 %cmp237, label %if.then239, label %if.end251, !dbg !2190

if.then239:                                       ; preds = %if.end236
  %170 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !2191
  %171 = load i8*, i8** %tmp, align 8, !dbg !2194
  %172 = load i64, i64* %out_misalign.addr, align 8, !dbg !2195
  %add.ptr240 = getelementptr inbounds i8, i8* %171, i64 %172, !dbg !2196
  %173 = load i32, i32* %tmplen, align 4, !dbg !2197
  %idx.ext = sext i32 %173 to i64, !dbg !2198
  %add.ptr241 = getelementptr inbounds i8, i8* %add.ptr240, i64 %idx.ext, !dbg !2198
  %174 = load i8*, i8** %in, align 8, !dbg !2199
  %175 = load i64, i64* %in_len, align 8, !dbg !2200
  %sub242 = sub i64 %175, 1, !dbg !2201
  %conv243 = trunc i64 %sub242 to i32, !dbg !2200
  %call244 = call i32 @EVP_CipherUpdate(%struct.evp_cipher_ctx_st* %170, i8* %add.ptr241, i32* %chunklen, i8* %174, i32 %conv243), !dbg !2202
  %tobool245 = icmp ne i32 %call244, 0, !dbg !2202
  br i1 %tobool245, label %if.end247, label %if.then246, !dbg !2203

if.then246:                                       ; preds = %if.then239
  br label %err309, !dbg !2204

if.end247:                                        ; preds = %if.then239
  %176 = load i32, i32* %chunklen, align 4, !dbg !2205
  %177 = load i32, i32* %tmplen, align 4, !dbg !2206
  %add248 = add nsw i32 %177, %176, !dbg !2206
  store i32 %add248, i32* %tmplen, align 4, !dbg !2206
  %178 = load i64, i64* %in_len, align 8, !dbg !2207
  %sub249 = sub i64 %178, 1, !dbg !2208
  %179 = load i8*, i8** %in, align 8, !dbg !2209
  %add.ptr250 = getelementptr inbounds i8, i8* %179, i64 %sub249, !dbg !2209
  store i8* %add.ptr250, i8** %in, align 8, !dbg !2209
  store i64 1, i64* %in_len, align 8, !dbg !2210
  br label %if.end251, !dbg !2211

if.end251:                                        ; preds = %if.end247, %if.end236
  %180 = load i64, i64* %in_len, align 8, !dbg !2212
  %cmp252 = icmp ugt i64 %180, 0, !dbg !2214
  br i1 %cmp252, label %if.then254, label %if.end263, !dbg !2215

if.then254:                                       ; preds = %if.end251
  %181 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !2216
  %182 = load i8*, i8** %tmp, align 8, !dbg !2219
  %183 = load i64, i64* %out_misalign.addr, align 8, !dbg !2220
  %add.ptr255 = getelementptr inbounds i8, i8* %182, i64 %183, !dbg !2221
  %184 = load i32, i32* %tmplen, align 4, !dbg !2222
  %idx.ext256 = sext i32 %184 to i64, !dbg !2223
  %add.ptr257 = getelementptr inbounds i8, i8* %add.ptr255, i64 %idx.ext256, !dbg !2223
  %185 = load i8*, i8** %in, align 8, !dbg !2224
  %call258 = call i32 @EVP_CipherUpdate(%struct.evp_cipher_ctx_st* %181, i8* %add.ptr257, i32* %chunklen, i8* %185, i32 1), !dbg !2225
  %tobool259 = icmp ne i32 %call258, 0, !dbg !2225
  br i1 %tobool259, label %if.end261, label %if.then260, !dbg !2226

if.then260:                                       ; preds = %if.then254
  br label %err309, !dbg !2227

if.end261:                                        ; preds = %if.then254
  %186 = load i32, i32* %chunklen, align 4, !dbg !2228
  %187 = load i32, i32* %tmplen, align 4, !dbg !2229
  %add262 = add nsw i32 %187, %186, !dbg !2229
  store i32 %add262, i32* %tmplen, align 4, !dbg !2229
  br label %if.end263, !dbg !2230

if.end263:                                        ; preds = %if.end261, %if.end251
  br label %if.end264

if.end264:                                        ; preds = %if.end263, %if.end225
  %188 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !2231
  %189 = load i8*, i8** %tmp, align 8, !dbg !2233
  %190 = load i64, i64* %out_misalign.addr, align 8, !dbg !2234
  %add.ptr265 = getelementptr inbounds i8, i8* %189, i64 %190, !dbg !2235
  %191 = load i32, i32* %tmplen, align 4, !dbg !2236
  %idx.ext266 = sext i32 %191 to i64, !dbg !2237
  %add.ptr267 = getelementptr inbounds i8, i8* %add.ptr265, i64 %idx.ext266, !dbg !2237
  %call268 = call i32 @EVP_CipherFinal_ex(%struct.evp_cipher_ctx_st* %188, i8* %add.ptr267, i32* %tmpflen), !dbg !2238
  %tobool269 = icmp ne i32 %call268, 0, !dbg !2238
  br i1 %tobool269, label %if.end272, label %if.then270, !dbg !2239

if.then270:                                       ; preds = %if.end264
  %192 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2240
  %err271 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %192, i32 0, i32 4, !dbg !2242
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.76, i32 0, i32 0), i8** %err271, align 8, !dbg !2243
  br label %err309, !dbg !2244

if.end272:                                        ; preds = %if.end264
  %193 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2245
  %194 = load i8*, i8** %expected_out, align 8, !dbg !2247
  %195 = load i64, i64* %out_len, align 8, !dbg !2248
  %196 = load i8*, i8** %tmp, align 8, !dbg !2249
  %197 = load i64, i64* %out_misalign.addr, align 8, !dbg !2250
  %add.ptr273 = getelementptr inbounds i8, i8* %196, i64 %197, !dbg !2251
  %198 = load i32, i32* %tmplen, align 4, !dbg !2252
  %199 = load i32, i32* %tmpflen, align 4, !dbg !2253
  %add274 = add nsw i32 %198, %199, !dbg !2254
  %conv275 = sext i32 %add274 to i64, !dbg !2252
  %call276 = call i32 @memory_err_compare(%struct.evp_test_st* %193, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.77, i32 0, i32 0), i8* %194, i64 %195, i8* %add.ptr273, i64 %conv275), !dbg !2255
  %tobool277 = icmp ne i32 %call276, 0, !dbg !2255
  br i1 %tobool277, label %if.end279, label %if.then278, !dbg !2256

if.then278:                                       ; preds = %if.end272
  br label %err309, !dbg !2257

if.end279:                                        ; preds = %if.end272
  %200 = load i32, i32* %enc.addr, align 4, !dbg !2258
  %tobool280 = icmp ne i32 %200, 0, !dbg !2258
  br i1 %tobool280, label %land.lhs.true281, label %if.end307, !dbg !2260

land.lhs.true281:                                 ; preds = %if.end279
  %201 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2261
  %aead282 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %201, i32 0, i32 2, !dbg !2263
  %202 = load i32, i32* %aead282, align 4, !dbg !2263
  %tobool283 = icmp ne i32 %202, 0, !dbg !2261
  br i1 %tobool283, label %if.then284, label %if.end307, !dbg !2264

if.then284:                                       ; preds = %land.lhs.true281
  call void @llvm.dbg.declare(metadata [16 x i8]* %rtag, metadata !2265, metadata !207), !dbg !2270
  %203 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2271
  %tag_len286 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %203, i32 0, i32 14, !dbg !2273
  %204 = load i64, i64* %tag_len286, align 8, !dbg !2273
  %call287 = call i32 @test_size_t_le(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 733, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.79, i32 0, i32 0), i64 %204, i64 16), !dbg !2274
  %tobool288 = icmp ne i32 %call287, 0, !dbg !2274
  br i1 %tobool288, label %if.end291, label %if.then289, !dbg !2275

if.then289:                                       ; preds = %if.then284
  %205 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2276
  %err290 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %205, i32 0, i32 4, !dbg !2278
  store i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.80, i32 0, i32 0), i8** %err290, align 8, !dbg !2279
  br label %err309, !dbg !2280

if.end291:                                        ; preds = %if.then284
  %206 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !2281
  %207 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2283
  %tag_len292 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %207, i32 0, i32 14, !dbg !2284
  %208 = load i64, i64* %tag_len292, align 8, !dbg !2284
  %conv293 = trunc i64 %208 to i32, !dbg !2283
  %arraydecay = getelementptr inbounds [16 x i8], [16 x i8]* %rtag, i32 0, i32 0, !dbg !2285
  %call294 = call i32 @EVP_CIPHER_CTX_ctrl(%struct.evp_cipher_ctx_st* %206, i32 16, i32 %conv293, i8* %arraydecay), !dbg !2286
  %tobool295 = icmp ne i32 %call294, 0, !dbg !2286
  br i1 %tobool295, label %if.end298, label %if.then296, !dbg !2287

if.then296:                                       ; preds = %if.end291
  %209 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2288
  %err297 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %209, i32 0, i32 4, !dbg !2290
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.81, i32 0, i32 0), i8** %err297, align 8, !dbg !2291
  br label %err309, !dbg !2292

if.end298:                                        ; preds = %if.end291
  %210 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2293
  %211 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2295
  %tag299 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %211, i32 0, i32 13, !dbg !2296
  %212 = load i8*, i8** %tag299, align 8, !dbg !2296
  %213 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2297
  %tag_len300 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %213, i32 0, i32 14, !dbg !2298
  %214 = load i64, i64* %tag_len300, align 8, !dbg !2298
  %arraydecay301 = getelementptr inbounds [16 x i8], [16 x i8]* %rtag, i32 0, i32 0, !dbg !2299
  %215 = load %struct.cipher_data_st*, %struct.cipher_data_st** %expected, align 8, !dbg !2300
  %tag_len302 = getelementptr inbounds %struct.cipher_data_st, %struct.cipher_data_st* %215, i32 0, i32 14, !dbg !2301
  %216 = load i64, i64* %tag_len302, align 8, !dbg !2301
  %call303 = call i32 @memory_err_compare(%struct.evp_test_st* %210, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.82, i32 0, i32 0), i8* %212, i64 %214, i8* %arraydecay301, i64 %216), !dbg !2302
  %tobool304 = icmp ne i32 %call303, 0, !dbg !2302
  br i1 %tobool304, label %if.end306, label %if.then305, !dbg !2303

if.then305:                                       ; preds = %if.end298
  br label %err309, !dbg !2304

if.end306:                                        ; preds = %if.end298
  br label %if.end307, !dbg !2305

if.end307:                                        ; preds = %if.end306, %land.lhs.true281, %if.end279
  %217 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2306
  %err308 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %217, i32 0, i32 4, !dbg !2307
  store i8* null, i8** %err308, align 8, !dbg !2308
  store i32 1, i32* %ok, align 4, !dbg !2309
  br label %err309, !dbg !2310

err309:                                           ; preds = %if.end307, %if.then305, %if.then296, %if.then289, %if.then278, %if.then270, %if.then260, %if.then246, %if.then233, %if.then224, %if.then209, %if.then189, %if.then168, %if.then147, %if.then125, %if.then114, %if.then101, %if.then95, %if.then88, %if.then60, %if.then51, %if.then42, %if.then33, %if.then22, %if.then
  %218 = load i8*, i8** %tmp, align 8, !dbg !2311
  call void @CRYPTO_free(i8* %218, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 750), !dbg !2312
  %219 = load %struct.evp_cipher_ctx_st*, %struct.evp_cipher_ctx_st** %ctx, align 8, !dbg !2313
  call void @EVP_CIPHER_CTX_free(%struct.evp_cipher_ctx_st* %219), !dbg !2314
  %220 = load i32, i32* %ok, align 4, !dbg !2315
  ret i32 %220, !dbg !2316
}

declare %struct.evp_cipher_ctx_st* @EVP_CIPHER_CTX_new() #2

declare void @EVP_CIPHER_CTX_set_flags(%struct.evp_cipher_ctx_st*, i32) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #4

declare i32 @EVP_CipherInit_ex(%struct.evp_cipher_ctx_st*, %struct.evp_cipher_st*, %struct.engine_st*, i8*, i8*, i32) #2

declare i32 @EVP_CIPHER_CTX_ctrl(%struct.evp_cipher_ctx_st*, i32, i32, i8*) #2

declare i32 @EVP_CIPHER_CTX_iv_length(%struct.evp_cipher_ctx_st*) #2

declare i32 @EVP_CIPHER_CTX_set_key_length(%struct.evp_cipher_ctx_st*, i32) #2

declare i32 @EVP_CipherUpdate(%struct.evp_cipher_ctx_st*, i8*, i32*, i8*, i32) #2

declare i32 @EVP_CIPHER_CTX_set_padding(%struct.evp_cipher_ctx_st*, i32) #2

declare i32 @EVP_CipherFinal_ex(%struct.evp_cipher_ctx_st*, i8*, i32*) #2

; Function Attrs: nounwind uwtable
define internal i32 @memory_err_compare(%struct.evp_test_st* %t, i8* %err, i8* %expected, i64 %expected_len, i8* %got, i64 %got_len) #0 !dbg !2317 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %err.addr = alloca i8*, align 8
  %expected.addr = alloca i8*, align 8
  %expected_len.addr = alloca i64, align 8
  %got.addr = alloca i8*, align 8
  %got_len.addr = alloca i64, align 8
  %r = alloca i32, align 4
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !2320, metadata !207), !dbg !2321
  store i8* %err, i8** %err.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %err.addr, metadata !2322, metadata !207), !dbg !2323
  store i8* %expected, i8** %expected.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %expected.addr, metadata !2324, metadata !207), !dbg !2325
  store i64 %expected_len, i64* %expected_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %expected_len.addr, metadata !2326, metadata !207), !dbg !2327
  store i8* %got, i8** %got.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %got.addr, metadata !2328, metadata !207), !dbg !2329
  store i64 %got_len, i64* %got_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %got_len.addr, metadata !2330, metadata !207), !dbg !2331
  call void @llvm.dbg.declare(metadata i32* %r, metadata !2332, metadata !207), !dbg !2333
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2334
  %expected_err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 6, !dbg !2336
  %1 = load i8*, i8** %expected_err, align 8, !dbg !2336
  %cmp = icmp ne i8* %1, null, !dbg !2337
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !2338

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2339
  %expected_err1 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %2, i32 0, i32 6, !dbg !2341
  %3 = load i8*, i8** %expected_err1, align 8, !dbg !2341
  %4 = load i8*, i8** %err.addr, align 8, !dbg !2342
  %call = call i32 @strcmp(i8* %3, i8* %4) #7, !dbg !2343
  %cmp2 = icmp eq i32 %call, 0, !dbg !2344
  br i1 %cmp2, label %if.then, label %if.else, !dbg !2345

if.then:                                          ; preds = %land.lhs.true
  %5 = load i8*, i8** %expected.addr, align 8, !dbg !2346
  %6 = load i64, i64* %expected_len.addr, align 8, !dbg !2347
  %7 = load i8*, i8** %got.addr, align 8, !dbg !2348
  %8 = load i64, i64* %got_len.addr, align 8, !dbg !2349
  %call3 = call i32 @test_mem_ne(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 91, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.84, i32 0, i32 0), i8* %5, i64 %6, i8* %7, i64 %8), !dbg !2350
  %tobool = icmp ne i32 %call3, 0, !dbg !2351
  %lnot = xor i1 %tobool, true, !dbg !2351
  %lnot.ext = zext i1 %lnot to i32, !dbg !2351
  store i32 %lnot.ext, i32* %r, align 4, !dbg !2352
  br label %if.end, !dbg !2353

if.else:                                          ; preds = %land.lhs.true, %entry
  %9 = load i8*, i8** %expected.addr, align 8, !dbg !2354
  %10 = load i64, i64* %expected_len.addr, align 8, !dbg !2355
  %11 = load i8*, i8** %got.addr, align 8, !dbg !2356
  %12 = load i64, i64* %got_len.addr, align 8, !dbg !2357
  %call4 = call i32 @test_mem_eq(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 93, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.84, i32 0, i32 0), i8* %9, i64 %10, i8* %11, i64 %12), !dbg !2358
  store i32 %call4, i32* %r, align 4, !dbg !2359
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %13 = load i32, i32* %r, align 4, !dbg !2360
  %tobool5 = icmp ne i32 %13, 0, !dbg !2360
  br i1 %tobool5, label %if.end8, label %if.then6, !dbg !2362

if.then6:                                         ; preds = %if.end
  %14 = load i8*, i8** %err.addr, align 8, !dbg !2363
  %15 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2364
  %err7 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %15, i32 0, i32 4, !dbg !2365
  store i8* %14, i8** %err7, align 8, !dbg !2366
  br label %if.end8, !dbg !2364

if.end8:                                          ; preds = %if.then6, %if.end
  %16 = load i32, i32* %r, align 4, !dbg !2367
  ret i32 %16, !dbg !2368
}

declare i32 @test_size_t_le(i8*, i32, i8*, i8*, i64, i64) #2

declare void @EVP_CIPHER_CTX_free(%struct.evp_cipher_ctx_st*) #2

declare i32 @test_mem_ne(i8*, i32, i8*, i8*, i8*, i64, i8*, i64) #2

declare i32 @test_mem_eq(i8*, i32, i8*, i8*, i8*, i64, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @digest_test_init(%struct.evp_test_st* %t, i8* %alg) #0 !dbg !2369 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %alg.addr = alloca i8*, align 8
  %mdat = alloca %struct.digest_data_st*, align 8
  %digest = alloca %struct.evp_md_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !2370, metadata !207), !dbg !2371
  store i8* %alg, i8** %alg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %alg.addr, metadata !2372, metadata !207), !dbg !2373
  call void @llvm.dbg.declare(metadata %struct.digest_data_st** %mdat, metadata !2374, metadata !207), !dbg !2387
  call void @llvm.dbg.declare(metadata %struct.evp_md_st** %digest, metadata !2388, metadata !207), !dbg !2389
  %0 = load i8*, i8** %alg.addr, align 8, !dbg !2390
  %call = call %struct.evp_md_st* @EVP_get_digestbyname(i8* %0), !dbg !2392
  store %struct.evp_md_st* %call, %struct.evp_md_st** %digest, align 8, !dbg !2393
  %cmp = icmp eq %struct.evp_md_st* %call, null, !dbg !2394
  br i1 %cmp, label %if.then, label %if.end6, !dbg !2395

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %alg.addr, align 8, !dbg !2396
  %call1 = call i32 @OBJ_sn2nid(i8* %1), !dbg !2399
  %cmp2 = icmp ne i32 %call1, 0, !dbg !2400
  br i1 %cmp2, label %if.then5, label %lor.lhs.false, !dbg !2401

lor.lhs.false:                                    ; preds = %if.then
  %2 = load i8*, i8** %alg.addr, align 8, !dbg !2402
  %call3 = call i32 @OBJ_ln2nid(i8* %2), !dbg !2404
  %cmp4 = icmp ne i32 %call3, 0, !dbg !2405
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !2406

if.then5:                                         ; preds = %lor.lhs.false, %if.then
  %3 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2407
  %skip = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %3, i32 0, i32 2, !dbg !2409
  store i32 1, i32* %skip, align 8, !dbg !2410
  store i32 1, i32* %retval, align 4, !dbg !2411
  br label %return, !dbg !2411

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %retval, align 4, !dbg !2412
  br label %return, !dbg !2412

if.end6:                                          ; preds = %entry
  %call7 = call i8* @CRYPTO_zalloc(i64 32, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 345), !dbg !2413
  %4 = bitcast i8* %call7 to %struct.digest_data_st*, !dbg !2413
  store %struct.digest_data_st* %4, %struct.digest_data_st** %mdat, align 8, !dbg !2415
  %5 = bitcast %struct.digest_data_st* %4 to i8*, !dbg !2416
  %call8 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 345, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.86, i32 0, i32 0), i8* %5), !dbg !2417
  %tobool = icmp ne i32 %call8, 0, !dbg !2419
  br i1 %tobool, label %if.end10, label %if.then9, !dbg !2420

if.then9:                                         ; preds = %if.end6
  store i32 0, i32* %retval, align 4, !dbg !2421
  br label %return, !dbg !2421

if.end10:                                         ; preds = %if.end6
  %6 = load %struct.digest_data_st*, %struct.digest_data_st** %mdat, align 8, !dbg !2422
  %7 = bitcast %struct.digest_data_st* %6 to i8*, !dbg !2422
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2423
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %8, i32 0, i32 9, !dbg !2424
  store i8* %7, i8** %data, align 8, !dbg !2425
  %9 = load %struct.evp_md_st*, %struct.evp_md_st** %digest, align 8, !dbg !2426
  %10 = load %struct.digest_data_st*, %struct.digest_data_st** %mdat, align 8, !dbg !2427
  %digest11 = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %10, i32 0, i32 0, !dbg !2428
  store %struct.evp_md_st* %9, %struct.evp_md_st** %digest11, align 8, !dbg !2429
  store i32 1, i32* %retval, align 4, !dbg !2430
  br label %return, !dbg !2430

return:                                           ; preds = %if.end10, %if.then9, %if.end, %if.then5
  %11 = load i32, i32* %retval, align 4, !dbg !2431
  ret i32 %11, !dbg !2431
}

; Function Attrs: nounwind uwtable
define internal void @digest_test_cleanup(%struct.evp_test_st* %t) #0 !dbg !2432 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %mdat = alloca %struct.digest_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !2433, metadata !207), !dbg !2434
  call void @llvm.dbg.declare(metadata %struct.digest_data_st** %mdat, metadata !2435, metadata !207), !dbg !2436
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2437
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !2438
  %1 = load i8*, i8** %data, align 8, !dbg !2438
  %2 = bitcast i8* %1 to %struct.digest_data_st*, !dbg !2437
  store %struct.digest_data_st* %2, %struct.digest_data_st** %mdat, align 8, !dbg !2436
  %3 = load %struct.digest_data_st*, %struct.digest_data_st** %mdat, align 8, !dbg !2439
  %input = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %3, i32 0, i32 1, !dbg !2440
  %4 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %input, align 8, !dbg !2440
  call void @sk_EVP_TEST_BUFFER_pop_free(%struct.stack_st_EVP_TEST_BUFFER* %4, void (%struct.evp_test_buffer_st*)* @evp_test_buffer_free), !dbg !2441
  %5 = load %struct.digest_data_st*, %struct.digest_data_st** %mdat, align 8, !dbg !2442
  %output = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %5, i32 0, i32 2, !dbg !2443
  %6 = load i8*, i8** %output, align 8, !dbg !2443
  call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 357), !dbg !2444
  ret void, !dbg !2445
}

; Function Attrs: nounwind uwtable
define internal i32 @digest_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !2446 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %mdata = alloca %struct.digest_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !2447, metadata !207), !dbg !2448
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !2449, metadata !207), !dbg !2450
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !2451, metadata !207), !dbg !2452
  call void @llvm.dbg.declare(metadata %struct.digest_data_st** %mdata, metadata !2453, metadata !207), !dbg !2454
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2455
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !2456
  %1 = load i8*, i8** %data, align 8, !dbg !2456
  %2 = bitcast i8* %1 to %struct.digest_data_st*, !dbg !2455
  store %struct.digest_data_st* %2, %struct.digest_data_st** %mdata, align 8, !dbg !2454
  %3 = load i8*, i8** %keyword.addr, align 8, !dbg !2457
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.87, i32 0, i32 0)) #7, !dbg !2459
  %cmp = icmp eq i32 %call, 0, !dbg !2460
  br i1 %cmp, label %if.then, label %if.end, !dbg !2461

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %value.addr, align 8, !dbg !2462
  %5 = load %struct.digest_data_st*, %struct.digest_data_st** %mdata, align 8, !dbg !2463
  %input = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %5, i32 0, i32 1, !dbg !2464
  %call1 = call i32 @evp_test_buffer_append(i8* %4, %struct.stack_st_EVP_TEST_BUFFER** %input), !dbg !2465
  store i32 %call1, i32* %retval, align 4, !dbg !2466
  br label %return, !dbg !2466

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %keyword.addr, align 8, !dbg !2467
  %call2 = call i32 @strcmp(i8* %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i32 0, i32 0)) #7, !dbg !2469
  %cmp3 = icmp eq i32 %call2, 0, !dbg !2470
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !2471

if.then4:                                         ; preds = %if.end
  %7 = load i8*, i8** %value.addr, align 8, !dbg !2472
  %8 = load %struct.digest_data_st*, %struct.digest_data_st** %mdata, align 8, !dbg !2473
  %output = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %8, i32 0, i32 2, !dbg !2474
  %9 = load %struct.digest_data_st*, %struct.digest_data_st** %mdata, align 8, !dbg !2475
  %output_len = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %9, i32 0, i32 3, !dbg !2476
  %call5 = call i32 @parse_bin(i8* %7, i8** %output, i64* %output_len), !dbg !2477
  store i32 %call5, i32* %retval, align 4, !dbg !2478
  br label %return, !dbg !2478

if.end6:                                          ; preds = %if.end
  %10 = load i8*, i8** %keyword.addr, align 8, !dbg !2479
  %call7 = call i32 @strcmp(i8* %10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.89, i32 0, i32 0)) #7, !dbg !2481
  %cmp8 = icmp eq i32 %call7, 0, !dbg !2482
  br i1 %cmp8, label %if.then9, label %if.end12, !dbg !2483

if.then9:                                         ; preds = %if.end6
  %11 = load i8*, i8** %value.addr, align 8, !dbg !2484
  %12 = load %struct.digest_data_st*, %struct.digest_data_st** %mdata, align 8, !dbg !2485
  %input10 = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %12, i32 0, i32 1, !dbg !2486
  %13 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %input10, align 8, !dbg !2486
  %call11 = call i32 @evp_test_buffer_set_count(i8* %11, %struct.stack_st_EVP_TEST_BUFFER* %13), !dbg !2487
  store i32 %call11, i32* %retval, align 4, !dbg !2488
  br label %return, !dbg !2488

if.end12:                                         ; preds = %if.end6
  %14 = load i8*, i8** %keyword.addr, align 8, !dbg !2489
  %call13 = call i32 @strcmp(i8* %14, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.90, i32 0, i32 0)) #7, !dbg !2491
  %cmp14 = icmp eq i32 %call13, 0, !dbg !2492
  br i1 %cmp14, label %if.then15, label %if.end18, !dbg !2493

if.then15:                                        ; preds = %if.end12
  %15 = load i8*, i8** %value.addr, align 8, !dbg !2494
  %16 = load %struct.digest_data_st*, %struct.digest_data_st** %mdata, align 8, !dbg !2495
  %input16 = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %16, i32 0, i32 1, !dbg !2496
  %17 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %input16, align 8, !dbg !2496
  %call17 = call i32 @evp_test_buffer_ncopy(i8* %15, %struct.stack_st_EVP_TEST_BUFFER* %17), !dbg !2497
  store i32 %call17, i32* %retval, align 4, !dbg !2498
  br label %return, !dbg !2498

if.end18:                                         ; preds = %if.end12
  store i32 0, i32* %retval, align 4, !dbg !2499
  br label %return, !dbg !2499

return:                                           ; preds = %if.end18, %if.then15, %if.then9, %if.then4, %if.then
  %18 = load i32, i32* %retval, align 4, !dbg !2500
  ret i32 %18, !dbg !2500
}

; Function Attrs: nounwind uwtable
define internal i32 @digest_test_run(%struct.evp_test_st* %t) #0 !dbg !2501 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %expected = alloca %struct.digest_data_st*, align 8
  %mctx = alloca %struct.evp_md_ctx_st*, align 8
  %got = alloca i8*, align 8
  %got_len = alloca i32, align 4
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !2502, metadata !207), !dbg !2503
  call void @llvm.dbg.declare(metadata %struct.digest_data_st** %expected, metadata !2504, metadata !207), !dbg !2505
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2506
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !2507
  %1 = load i8*, i8** %data, align 8, !dbg !2507
  %2 = bitcast i8* %1 to %struct.digest_data_st*, !dbg !2506
  store %struct.digest_data_st* %2, %struct.digest_data_st** %expected, align 8, !dbg !2505
  call void @llvm.dbg.declare(metadata %struct.evp_md_ctx_st** %mctx, metadata !2508, metadata !207), !dbg !2512
  call void @llvm.dbg.declare(metadata i8** %got, metadata !2513, metadata !207), !dbg !2514
  store i8* null, i8** %got, align 8, !dbg !2514
  call void @llvm.dbg.declare(metadata i32* %got_len, metadata !2515, metadata !207), !dbg !2517
  %3 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2518
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %3, i32 0, i32 4, !dbg !2519
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i32 0, i32 0), i8** %err, align 8, !dbg !2520
  %call = call %struct.evp_md_ctx_st* @EVP_MD_CTX_new(), !dbg !2521
  store %struct.evp_md_ctx_st* %call, %struct.evp_md_ctx_st** %mctx, align 8, !dbg !2523
  %4 = bitcast %struct.evp_md_ctx_st* %call to i8*, !dbg !2524
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 389, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.94, i32 0, i32 0), i8* %4), !dbg !2525
  %tobool = icmp ne i32 %call1, 0, !dbg !2527
  br i1 %tobool, label %if.end, label %if.then, !dbg !2528

if.then:                                          ; preds = %entry
  br label %err49, !dbg !2529

if.end:                                           ; preds = %entry
  %5 = load %struct.digest_data_st*, %struct.digest_data_st** %expected, align 8, !dbg !2530
  %output_len = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %5, i32 0, i32 3, !dbg !2531
  %6 = load i64, i64* %output_len, align 8, !dbg !2531
  %cmp = icmp ugt i64 %6, 64, !dbg !2532
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !2530

cond.true:                                        ; preds = %if.end
  %7 = load %struct.digest_data_st*, %struct.digest_data_st** %expected, align 8, !dbg !2533
  %output_len2 = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %7, i32 0, i32 3, !dbg !2535
  %8 = load i64, i64* %output_len2, align 8, !dbg !2535
  br label %cond.end, !dbg !2536

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !2537

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ 64, %cond.false ], !dbg !2539
  %call3 = call i8* @CRYPTO_malloc(i64 %cond, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 393), !dbg !2541
  store i8* %call3, i8** %got, align 8, !dbg !2542
  %9 = load i8*, i8** %got, align 8, !dbg !2543
  %call4 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 394, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.84, i32 0, i32 0), i8* %9), !dbg !2545
  %tobool5 = icmp ne i32 %call4, 0, !dbg !2545
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !2546

if.then6:                                         ; preds = %cond.end
  br label %err49, !dbg !2547

if.end7:                                          ; preds = %cond.end
  %10 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %mctx, align 8, !dbg !2548
  %11 = load %struct.digest_data_st*, %struct.digest_data_st** %expected, align 8, !dbg !2550
  %digest = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %11, i32 0, i32 0, !dbg !2551
  %12 = load %struct.evp_md_st*, %struct.evp_md_st** %digest, align 8, !dbg !2551
  %call8 = call i32 @EVP_DigestInit_ex(%struct.evp_md_ctx_st* %10, %struct.evp_md_st* %12, %struct.engine_st* null), !dbg !2552
  %tobool9 = icmp ne i32 %call8, 0, !dbg !2552
  br i1 %tobool9, label %if.end12, label %if.then10, !dbg !2553

if.then10:                                        ; preds = %if.end7
  %13 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2554
  %err11 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %13, i32 0, i32 4, !dbg !2556
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.95, i32 0, i32 0), i8** %err11, align 8, !dbg !2557
  br label %err49, !dbg !2558

if.end12:                                         ; preds = %if.end7
  %14 = load %struct.digest_data_st*, %struct.digest_data_st** %expected, align 8, !dbg !2559
  %input = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %14, i32 0, i32 1, !dbg !2561
  %15 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %input, align 8, !dbg !2561
  %16 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %mctx, align 8, !dbg !2562
  %17 = bitcast %struct.evp_md_ctx_st* %16 to i8*, !dbg !2562
  %call13 = call i32 @evp_test_buffer_do(%struct.stack_st_EVP_TEST_BUFFER* %15, i32 (i8*, i8*, i64)* @digest_update_fn, i8* %17), !dbg !2563
  %tobool14 = icmp ne i32 %call13, 0, !dbg !2563
  br i1 %tobool14, label %if.end17, label %if.then15, !dbg !2564

if.then15:                                        ; preds = %if.end12
  %18 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2565
  %err16 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %18, i32 0, i32 4, !dbg !2567
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.96, i32 0, i32 0), i8** %err16, align 8, !dbg !2568
  br label %err49, !dbg !2569

if.end17:                                         ; preds = %if.end12
  %19 = load %struct.digest_data_st*, %struct.digest_data_st** %expected, align 8, !dbg !2570
  %digest18 = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %19, i32 0, i32 0, !dbg !2572
  %20 = load %struct.evp_md_st*, %struct.evp_md_st** %digest18, align 8, !dbg !2572
  %call19 = call i64 @EVP_MD_flags(%struct.evp_md_st* %20), !dbg !2573
  %and = and i64 %call19, 2, !dbg !2574
  %tobool20 = icmp ne i64 %and, 0, !dbg !2574
  br i1 %tobool20, label %if.then21, label %if.else, !dbg !2575

if.then21:                                        ; preds = %if.end17
  %21 = load %struct.digest_data_st*, %struct.digest_data_st** %expected, align 8, !dbg !2576
  %output_len22 = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %21, i32 0, i32 3, !dbg !2578
  %22 = load i64, i64* %output_len22, align 8, !dbg !2578
  %conv = trunc i64 %22 to i32, !dbg !2576
  store i32 %conv, i32* %got_len, align 4, !dbg !2579
  %23 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %mctx, align 8, !dbg !2580
  %24 = load i8*, i8** %got, align 8, !dbg !2582
  %25 = load i32, i32* %got_len, align 4, !dbg !2583
  %conv23 = zext i32 %25 to i64, !dbg !2583
  %call24 = call i32 @EVP_DigestFinalXOF(%struct.evp_md_ctx_st* %23, i8* %24, i64 %conv23), !dbg !2584
  %tobool25 = icmp ne i32 %call24, 0, !dbg !2584
  br i1 %tobool25, label %if.end28, label %if.then26, !dbg !2585

if.then26:                                        ; preds = %if.then21
  %26 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2586
  %err27 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %26, i32 0, i32 4, !dbg !2588
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.97, i32 0, i32 0), i8** %err27, align 8, !dbg !2589
  br label %err49, !dbg !2590

if.end28:                                         ; preds = %if.then21
  br label %if.end34, !dbg !2591

if.else:                                          ; preds = %if.end17
  %27 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %mctx, align 8, !dbg !2592
  %28 = load i8*, i8** %got, align 8, !dbg !2595
  %call29 = call i32 @EVP_DigestFinal(%struct.evp_md_ctx_st* %27, i8* %28, i32* %got_len), !dbg !2596
  %tobool30 = icmp ne i32 %call29, 0, !dbg !2596
  br i1 %tobool30, label %if.end33, label %if.then31, !dbg !2597

if.then31:                                        ; preds = %if.else
  %29 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2598
  %err32 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %29, i32 0, i32 4, !dbg !2600
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.98, i32 0, i32 0), i8** %err32, align 8, !dbg !2601
  br label %err49, !dbg !2602

if.end33:                                         ; preds = %if.else
  br label %if.end34

if.end34:                                         ; preds = %if.end33, %if.end28
  %30 = load %struct.digest_data_st*, %struct.digest_data_st** %expected, align 8, !dbg !2603
  %output_len35 = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %30, i32 0, i32 3, !dbg !2605
  %31 = load i64, i64* %output_len35, align 8, !dbg !2605
  %conv36 = trunc i64 %31 to i32, !dbg !2603
  %32 = load i32, i32* %got_len, align 4, !dbg !2606
  %call37 = call i32 @test_int_eq(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 418, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.100, i32 0, i32 0), i32 %conv36, i32 %32), !dbg !2607
  %tobool38 = icmp ne i32 %call37, 0, !dbg !2607
  br i1 %tobool38, label %if.end41, label %if.then39, !dbg !2608

if.then39:                                        ; preds = %if.end34
  %33 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2609
  %err40 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %33, i32 0, i32 4, !dbg !2611
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.101, i32 0, i32 0), i8** %err40, align 8, !dbg !2612
  br label %err49, !dbg !2613

if.end41:                                         ; preds = %if.end34
  %34 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2614
  %35 = load %struct.digest_data_st*, %struct.digest_data_st** %expected, align 8, !dbg !2616
  %output = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %35, i32 0, i32 2, !dbg !2617
  %36 = load i8*, i8** %output, align 8, !dbg !2617
  %37 = load %struct.digest_data_st*, %struct.digest_data_st** %expected, align 8, !dbg !2618
  %output_len42 = getelementptr inbounds %struct.digest_data_st, %struct.digest_data_st* %37, i32 0, i32 3, !dbg !2619
  %38 = load i64, i64* %output_len42, align 8, !dbg !2619
  %39 = load i8*, i8** %got, align 8, !dbg !2620
  %40 = load i32, i32* %got_len, align 4, !dbg !2621
  %conv43 = zext i32 %40 to i64, !dbg !2621
  %call44 = call i32 @memory_err_compare(%struct.evp_test_st* %34, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.102, i32 0, i32 0), i8* %36, i64 %38, i8* %39, i64 %conv43), !dbg !2622
  %tobool45 = icmp ne i32 %call44, 0, !dbg !2622
  br i1 %tobool45, label %if.end47, label %if.then46, !dbg !2623

if.then46:                                        ; preds = %if.end41
  br label %err49, !dbg !2624

if.end47:                                         ; preds = %if.end41
  %41 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2625
  %err48 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %41, i32 0, i32 4, !dbg !2626
  store i8* null, i8** %err48, align 8, !dbg !2627
  br label %err49, !dbg !2625

err49:                                            ; preds = %if.end47, %if.then46, %if.then39, %if.then31, %if.then26, %if.then15, %if.then10, %if.then6, %if.then
  %42 = load i8*, i8** %got, align 8, !dbg !2628
  call void @CRYPTO_free(i8* %42, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 430), !dbg !2629
  %43 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %mctx, align 8, !dbg !2630
  call void @EVP_MD_CTX_free(%struct.evp_md_ctx_st* %43), !dbg !2631
  ret i32 1, !dbg !2632
}

declare %struct.evp_md_st* @EVP_get_digestbyname(i8*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal void @sk_EVP_TEST_BUFFER_pop_free(%struct.stack_st_EVP_TEST_BUFFER* %sk, void (%struct.evp_test_buffer_st*)* %freefunc) #5 !dbg !2633 {
entry:
  %sk.addr = alloca %struct.stack_st_EVP_TEST_BUFFER*, align 8
  %freefunc.addr = alloca void (%struct.evp_test_buffer_st*)*, align 8
  store %struct.stack_st_EVP_TEST_BUFFER* %sk, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, metadata !2640, metadata !207), !dbg !2641
  store void (%struct.evp_test_buffer_st*)* %freefunc, void (%struct.evp_test_buffer_st*)** %freefunc.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.evp_test_buffer_st*)** %freefunc.addr, metadata !2642, metadata !207), !dbg !2643
  %0 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8, !dbg !2644
  %1 = bitcast %struct.stack_st_EVP_TEST_BUFFER* %0 to %struct.stack_st*, !dbg !2645
  %2 = load void (%struct.evp_test_buffer_st*)*, void (%struct.evp_test_buffer_st*)** %freefunc.addr, align 8, !dbg !2646
  %3 = bitcast void (%struct.evp_test_buffer_st*)* %2 to void (i8*)*, !dbg !2647
  call void @OPENSSL_sk_pop_free(%struct.stack_st* %1, void (i8*)* %3), !dbg !2648
  ret void, !dbg !2649
}

; Function Attrs: nounwind uwtable
define internal void @evp_test_buffer_free(%struct.evp_test_buffer_st* %db) #0 !dbg !2650 {
entry:
  %db.addr = alloca %struct.evp_test_buffer_st*, align 8
  store %struct.evp_test_buffer_st* %db, %struct.evp_test_buffer_st** %db.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_buffer_st** %db.addr, metadata !2651, metadata !207), !dbg !2652
  %0 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db.addr, align 8, !dbg !2653
  %cmp = icmp ne %struct.evp_test_buffer_st* %0, null, !dbg !2655
  br i1 %cmp, label %if.then, label %if.end, !dbg !2656

if.then:                                          ; preds = %entry
  %1 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db.addr, align 8, !dbg !2657
  %buf = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %1, i32 0, i32 0, !dbg !2659
  %2 = load i8*, i8** %buf, align 8, !dbg !2659
  call void @CRYPTO_free(i8* %2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 113), !dbg !2660
  %3 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db.addr, align 8, !dbg !2661
  %4 = bitcast %struct.evp_test_buffer_st* %3 to i8*, !dbg !2661
  call void @CRYPTO_free(i8* %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 114), !dbg !2662
  br label %if.end, !dbg !2663

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !2664
}

declare void @OPENSSL_sk_pop_free(%struct.stack_st*, void (i8*)*) #2

; Function Attrs: nounwind uwtable
define internal i32 @evp_test_buffer_append(i8* %value, %struct.stack_st_EVP_TEST_BUFFER** %sk) #0 !dbg !2665 {
entry:
  %retval = alloca i32, align 4
  %value.addr = alloca i8*, align 8
  %sk.addr = alloca %struct.stack_st_EVP_TEST_BUFFER**, align 8
  %db = alloca %struct.evp_test_buffer_st*, align 8
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !2669, metadata !207), !dbg !2670
  store %struct.stack_st_EVP_TEST_BUFFER** %sk, %struct.stack_st_EVP_TEST_BUFFER*** %sk.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_st_EVP_TEST_BUFFER*** %sk.addr, metadata !2671, metadata !207), !dbg !2672
  call void @llvm.dbg.declare(metadata %struct.evp_test_buffer_st** %db, metadata !2673, metadata !207), !dbg !2674
  store %struct.evp_test_buffer_st* null, %struct.evp_test_buffer_st** %db, align 8, !dbg !2674
  %call = call i8* @CRYPTO_malloc(i64 32, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 126), !dbg !2675
  %0 = bitcast i8* %call to %struct.evp_test_buffer_st*, !dbg !2675
  store %struct.evp_test_buffer_st* %0, %struct.evp_test_buffer_st** %db, align 8, !dbg !2677
  %1 = bitcast %struct.evp_test_buffer_st* %0 to i8*, !dbg !2678
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 126, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.91, i32 0, i32 0), i8* %1), !dbg !2679
  %tobool = icmp ne i32 %call1, 0, !dbg !2681
  br i1 %tobool, label %if.end, label %if.then, !dbg !2682

if.then:                                          ; preds = %entry
  br label %err, !dbg !2683

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %value.addr, align 8, !dbg !2684
  %3 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2686
  %buf = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %3, i32 0, i32 0, !dbg !2687
  %4 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2688
  %buflen = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %4, i32 0, i32 1, !dbg !2689
  %call2 = call i32 @parse_bin(i8* %2, i8** %buf, i64* %buflen), !dbg !2690
  %tobool3 = icmp ne i32 %call2, 0, !dbg !2690
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !2691

if.then4:                                         ; preds = %if.end
  br label %err, !dbg !2692

if.end5:                                          ; preds = %if.end
  %5 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2693
  %count = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %5, i32 0, i32 2, !dbg !2694
  store i64 1, i64* %count, align 8, !dbg !2695
  %6 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2696
  %count_set = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %6, i32 0, i32 3, !dbg !2697
  store i32 0, i32* %count_set, align 8, !dbg !2698
  %7 = load %struct.stack_st_EVP_TEST_BUFFER**, %struct.stack_st_EVP_TEST_BUFFER*** %sk.addr, align 8, !dbg !2699
  %8 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %7, align 8, !dbg !2701
  %cmp = icmp eq %struct.stack_st_EVP_TEST_BUFFER* %8, null, !dbg !2702
  br i1 %cmp, label %land.lhs.true, label %if.end10, !dbg !2703

land.lhs.true:                                    ; preds = %if.end5
  %call6 = call %struct.stack_st_EVP_TEST_BUFFER* @sk_EVP_TEST_BUFFER_new_null(), !dbg !2704
  %9 = load %struct.stack_st_EVP_TEST_BUFFER**, %struct.stack_st_EVP_TEST_BUFFER*** %sk.addr, align 8, !dbg !2706
  store %struct.stack_st_EVP_TEST_BUFFER* %call6, %struct.stack_st_EVP_TEST_BUFFER** %9, align 8, !dbg !2707
  %10 = bitcast %struct.stack_st_EVP_TEST_BUFFER* %call6 to i8*, !dbg !2708
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 134, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.92, i32 0, i32 0), i8* %10), !dbg !2709
  %tobool8 = icmp ne i32 %call7, 0, !dbg !2711
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !2712

if.then9:                                         ; preds = %land.lhs.true
  br label %err, !dbg !2713

if.end10:                                         ; preds = %land.lhs.true, %if.end5
  %11 = load %struct.stack_st_EVP_TEST_BUFFER**, %struct.stack_st_EVP_TEST_BUFFER*** %sk.addr, align 8, !dbg !2714
  %12 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %11, align 8, !dbg !2716
  %13 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2717
  %call11 = call i32 @sk_EVP_TEST_BUFFER_push(%struct.stack_st_EVP_TEST_BUFFER* %12, %struct.evp_test_buffer_st* %13), !dbg !2718
  %tobool12 = icmp ne i32 %call11, 0, !dbg !2718
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !2719

if.then13:                                        ; preds = %if.end10
  br label %err, !dbg !2720

if.end14:                                         ; preds = %if.end10
  store i32 1, i32* %retval, align 4, !dbg !2721
  br label %return, !dbg !2721

err:                                              ; preds = %if.then13, %if.then9, %if.then4, %if.then
  %14 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2722
  call void @evp_test_buffer_free(%struct.evp_test_buffer_st* %14), !dbg !2723
  store i32 0, i32* %retval, align 4, !dbg !2724
  br label %return, !dbg !2724

return:                                           ; preds = %err, %if.end14
  %15 = load i32, i32* %retval, align 4, !dbg !2725
  ret i32 %15, !dbg !2725
}

; Function Attrs: nounwind uwtable
define internal i32 @evp_test_buffer_set_count(i8* %value, %struct.stack_st_EVP_TEST_BUFFER* %sk) #0 !dbg !2726 {
entry:
  %retval = alloca i32, align 4
  %value.addr = alloca i8*, align 8
  %sk.addr = alloca %struct.stack_st_EVP_TEST_BUFFER*, align 8
  %db = alloca %struct.evp_test_buffer_st*, align 8
  %count = alloca i32, align 4
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !2729, metadata !207), !dbg !2730
  store %struct.stack_st_EVP_TEST_BUFFER* %sk, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, metadata !2731, metadata !207), !dbg !2732
  call void @llvm.dbg.declare(metadata %struct.evp_test_buffer_st** %db, metadata !2733, metadata !207), !dbg !2734
  call void @llvm.dbg.declare(metadata i32* %count, metadata !2735, metadata !207), !dbg !2736
  %0 = load i8*, i8** %value.addr, align 8, !dbg !2737
  %call = call i32 @atoi(i8* %0) #7, !dbg !2738
  store i32 %call, i32* %count, align 4, !dbg !2736
  %1 = load i32, i32* %count, align 4, !dbg !2739
  %cmp = icmp sle i32 %1, 0, !dbg !2741
  br i1 %cmp, label %if.then, label %if.end, !dbg !2742

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !2743
  br label %return, !dbg !2743

if.end:                                           ; preds = %entry
  %2 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8, !dbg !2744
  %cmp1 = icmp eq %struct.stack_st_EVP_TEST_BUFFER* %2, null, !dbg !2746
  br i1 %cmp1, label %if.then4, label %lor.lhs.false, !dbg !2747

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8, !dbg !2748
  %call2 = call i32 @sk_EVP_TEST_BUFFER_num(%struct.stack_st_EVP_TEST_BUFFER* %3), !dbg !2750
  %cmp3 = icmp eq i32 %call2, 0, !dbg !2751
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !2752

if.then4:                                         ; preds = %lor.lhs.false, %if.end
  store i32 0, i32* %retval, align 4, !dbg !2753
  br label %return, !dbg !2753

if.end5:                                          ; preds = %lor.lhs.false
  %4 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8, !dbg !2754
  %5 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8, !dbg !2755
  %call6 = call i32 @sk_EVP_TEST_BUFFER_num(%struct.stack_st_EVP_TEST_BUFFER* %5), !dbg !2756
  %sub = sub nsw i32 %call6, 1, !dbg !2757
  %call7 = call %struct.evp_test_buffer_st* @sk_EVP_TEST_BUFFER_value(%struct.stack_st_EVP_TEST_BUFFER* %4, i32 %sub), !dbg !2758
  store %struct.evp_test_buffer_st* %call7, %struct.evp_test_buffer_st** %db, align 8, !dbg !2760
  %6 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2761
  %count_set = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %6, i32 0, i32 3, !dbg !2763
  %7 = load i32, i32* %count_set, align 8, !dbg !2763
  %cmp8 = icmp ne i32 %7, 0, !dbg !2764
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !2765

if.then9:                                         ; preds = %if.end5
  store i32 0, i32* %retval, align 4, !dbg !2766
  br label %return, !dbg !2766

if.end10:                                         ; preds = %if.end5
  %8 = load i32, i32* %count, align 4, !dbg !2767
  %conv = sext i32 %8 to i64, !dbg !2768
  %9 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2769
  %count11 = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %9, i32 0, i32 2, !dbg !2770
  store i64 %conv, i64* %count11, align 8, !dbg !2771
  %10 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2772
  %count_set12 = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %10, i32 0, i32 3, !dbg !2773
  store i32 1, i32* %count_set12, align 8, !dbg !2774
  store i32 1, i32* %retval, align 4, !dbg !2775
  br label %return, !dbg !2775

return:                                           ; preds = %if.end10, %if.then9, %if.then4, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !2776
  ret i32 %11, !dbg !2776
}

; Function Attrs: nounwind uwtable
define internal i32 @evp_test_buffer_ncopy(i8* %value, %struct.stack_st_EVP_TEST_BUFFER* %sk) #0 !dbg !2777 {
entry:
  %retval = alloca i32, align 4
  %value.addr = alloca i8*, align 8
  %sk.addr = alloca %struct.stack_st_EVP_TEST_BUFFER*, align 8
  %db = alloca %struct.evp_test_buffer_st*, align 8
  %tbuf = alloca i8*, align 8
  %p = alloca i8*, align 8
  %tbuflen = alloca i64, align 8
  %ncopy = alloca i32, align 4
  %i = alloca i32, align 4
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !2778, metadata !207), !dbg !2779
  store %struct.stack_st_EVP_TEST_BUFFER* %sk, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, metadata !2780, metadata !207), !dbg !2781
  call void @llvm.dbg.declare(metadata %struct.evp_test_buffer_st** %db, metadata !2782, metadata !207), !dbg !2783
  call void @llvm.dbg.declare(metadata i8** %tbuf, metadata !2784, metadata !207), !dbg !2785
  call void @llvm.dbg.declare(metadata i8** %p, metadata !2786, metadata !207), !dbg !2787
  call void @llvm.dbg.declare(metadata i64* %tbuflen, metadata !2788, metadata !207), !dbg !2789
  call void @llvm.dbg.declare(metadata i32* %ncopy, metadata !2790, metadata !207), !dbg !2791
  %0 = load i8*, i8** %value.addr, align 8, !dbg !2792
  %call = call i32 @atoi(i8* %0) #7, !dbg !2793
  store i32 %call, i32* %ncopy, align 4, !dbg !2791
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2794, metadata !207), !dbg !2795
  %1 = load i32, i32* %ncopy, align 4, !dbg !2796
  %cmp = icmp sle i32 %1, 0, !dbg !2798
  br i1 %cmp, label %if.then, label %if.end, !dbg !2799

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !2800
  br label %return, !dbg !2800

if.end:                                           ; preds = %entry
  %2 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8, !dbg !2801
  %cmp1 = icmp eq %struct.stack_st_EVP_TEST_BUFFER* %2, null, !dbg !2803
  br i1 %cmp1, label %if.then4, label %lor.lhs.false, !dbg !2804

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8, !dbg !2805
  %call2 = call i32 @sk_EVP_TEST_BUFFER_num(%struct.stack_st_EVP_TEST_BUFFER* %3), !dbg !2807
  %cmp3 = icmp eq i32 %call2, 0, !dbg !2808
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !2809

if.then4:                                         ; preds = %lor.lhs.false, %if.end
  store i32 0, i32* %retval, align 4, !dbg !2810
  br label %return, !dbg !2810

if.end5:                                          ; preds = %lor.lhs.false
  %4 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8, !dbg !2811
  %5 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8, !dbg !2812
  %call6 = call i32 @sk_EVP_TEST_BUFFER_num(%struct.stack_st_EVP_TEST_BUFFER* %5), !dbg !2813
  %sub = sub nsw i32 %call6, 1, !dbg !2814
  %call7 = call %struct.evp_test_buffer_st* @sk_EVP_TEST_BUFFER_value(%struct.stack_st_EVP_TEST_BUFFER* %4, i32 %sub), !dbg !2815
  store %struct.evp_test_buffer_st* %call7, %struct.evp_test_buffer_st** %db, align 8, !dbg !2817
  %6 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2818
  %buflen = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %6, i32 0, i32 1, !dbg !2819
  %7 = load i64, i64* %buflen, align 8, !dbg !2819
  %8 = load i32, i32* %ncopy, align 4, !dbg !2820
  %conv = sext i32 %8 to i64, !dbg !2820
  %mul = mul i64 %7, %conv, !dbg !2821
  store i64 %mul, i64* %tbuflen, align 8, !dbg !2822
  %9 = load i64, i64* %tbuflen, align 8, !dbg !2823
  %call8 = call i8* @CRYPTO_malloc(i64 %9, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 165), !dbg !2825
  store i8* %call8, i8** %tbuf, align 8, !dbg !2826
  %call9 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 165, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.93, i32 0, i32 0), i8* %call8), !dbg !2827
  %tobool = icmp ne i32 %call9, 0, !dbg !2829
  br i1 %tobool, label %if.end11, label %if.then10, !dbg !2830

if.then10:                                        ; preds = %if.end5
  store i32 0, i32* %retval, align 4, !dbg !2831
  br label %return, !dbg !2831

if.end11:                                         ; preds = %if.end5
  store i32 0, i32* %i, align 4, !dbg !2832
  %10 = load i8*, i8** %tbuf, align 8, !dbg !2834
  store i8* %10, i8** %p, align 8, !dbg !2835
  br label %for.cond, !dbg !2836

for.cond:                                         ; preds = %for.inc, %if.end11
  %11 = load i32, i32* %i, align 4, !dbg !2837
  %12 = load i32, i32* %ncopy, align 4, !dbg !2840
  %cmp12 = icmp slt i32 %11, %12, !dbg !2841
  br i1 %cmp12, label %for.body, label %for.end, !dbg !2842

for.body:                                         ; preds = %for.cond
  %13 = load i8*, i8** %p, align 8, !dbg !2843
  %14 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2844
  %buf = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %14, i32 0, i32 0, !dbg !2845
  %15 = load i8*, i8** %buf, align 8, !dbg !2845
  %16 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2846
  %buflen14 = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %16, i32 0, i32 1, !dbg !2847
  %17 = load i64, i64* %buflen14, align 8, !dbg !2847
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %15, i64 %17, i32 1, i1 false), !dbg !2848
  br label %for.inc, !dbg !2848

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !dbg !2849
  %inc = add nsw i32 %18, 1, !dbg !2849
  store i32 %inc, i32* %i, align 4, !dbg !2849
  %19 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2851
  %buflen15 = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %19, i32 0, i32 1, !dbg !2852
  %20 = load i64, i64* %buflen15, align 8, !dbg !2852
  %21 = load i8*, i8** %p, align 8, !dbg !2853
  %add.ptr = getelementptr inbounds i8, i8* %21, i64 %20, !dbg !2853
  store i8* %add.ptr, i8** %p, align 8, !dbg !2853
  br label %for.cond, !dbg !2854, !llvm.loop !2855

for.end:                                          ; preds = %for.cond
  %22 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2857
  %buf16 = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %22, i32 0, i32 0, !dbg !2858
  %23 = load i8*, i8** %buf16, align 8, !dbg !2858
  call void @CRYPTO_free(i8* %23, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 170), !dbg !2859
  %24 = load i8*, i8** %tbuf, align 8, !dbg !2860
  %25 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2861
  %buf17 = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %25, i32 0, i32 0, !dbg !2862
  store i8* %24, i8** %buf17, align 8, !dbg !2863
  %26 = load i64, i64* %tbuflen, align 8, !dbg !2864
  %27 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %db, align 8, !dbg !2865
  %buflen18 = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %27, i32 0, i32 1, !dbg !2866
  store i64 %26, i64* %buflen18, align 8, !dbg !2867
  store i32 1, i32* %retval, align 4, !dbg !2868
  br label %return, !dbg !2868

return:                                           ; preds = %for.end, %if.then10, %if.then4, %if.then
  %28 = load i32, i32* %retval, align 4, !dbg !2869
  ret i32 %28, !dbg !2869
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.stack_st_EVP_TEST_BUFFER* @sk_EVP_TEST_BUFFER_new_null() #5 !dbg !2870 {
entry:
  %call = call %struct.stack_st* @OPENSSL_sk_new_null(), !dbg !2873
  %0 = bitcast %struct.stack_st* %call to %struct.stack_st_EVP_TEST_BUFFER*, !dbg !2874
  ret %struct.stack_st_EVP_TEST_BUFFER* %0, !dbg !2875
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @sk_EVP_TEST_BUFFER_push(%struct.stack_st_EVP_TEST_BUFFER* %sk, %struct.evp_test_buffer_st* %ptr) #5 !dbg !2876 {
entry:
  %sk.addr = alloca %struct.stack_st_EVP_TEST_BUFFER*, align 8
  %ptr.addr = alloca %struct.evp_test_buffer_st*, align 8
  store %struct.stack_st_EVP_TEST_BUFFER* %sk, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, metadata !2879, metadata !207), !dbg !2880
  store %struct.evp_test_buffer_st* %ptr, %struct.evp_test_buffer_st** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_buffer_st** %ptr.addr, metadata !2881, metadata !207), !dbg !2882
  %0 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8, !dbg !2883
  %1 = bitcast %struct.stack_st_EVP_TEST_BUFFER* %0 to %struct.stack_st*, !dbg !2884
  %2 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %ptr.addr, align 8, !dbg !2885
  %3 = bitcast %struct.evp_test_buffer_st* %2 to i8*, !dbg !2886
  %call = call i32 @OPENSSL_sk_push(%struct.stack_st* %1, i8* %3), !dbg !2887
  ret i32 %call, !dbg !2888
}

declare %struct.stack_st* @OPENSSL_sk_new_null() #2

declare i32 @OPENSSL_sk_push(%struct.stack_st*, i8*) #2

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #3

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @sk_EVP_TEST_BUFFER_num(%struct.stack_st_EVP_TEST_BUFFER* %sk) #5 !dbg !2889 {
entry:
  %sk.addr = alloca %struct.stack_st_EVP_TEST_BUFFER*, align 8
  store %struct.stack_st_EVP_TEST_BUFFER* %sk, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, metadata !2894, metadata !207), !dbg !2895
  %0 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8, !dbg !2896
  %1 = bitcast %struct.stack_st_EVP_TEST_BUFFER* %0 to %struct.stack_st*, !dbg !2897
  %call = call i32 @OPENSSL_sk_num(%struct.stack_st* %1), !dbg !2898
  ret i32 %call, !dbg !2899
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.evp_test_buffer_st* @sk_EVP_TEST_BUFFER_value(%struct.stack_st_EVP_TEST_BUFFER* %sk, i32 %idx) #5 !dbg !2900 {
entry:
  %sk.addr = alloca %struct.stack_st_EVP_TEST_BUFFER*, align 8
  %idx.addr = alloca i32, align 4
  store %struct.stack_st_EVP_TEST_BUFFER* %sk, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, metadata !2903, metadata !207), !dbg !2904
  store i32 %idx, i32* %idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idx.addr, metadata !2905, metadata !207), !dbg !2906
  %0 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8, !dbg !2907
  %1 = bitcast %struct.stack_st_EVP_TEST_BUFFER* %0 to %struct.stack_st*, !dbg !2908
  %2 = load i32, i32* %idx.addr, align 4, !dbg !2909
  %call = call i8* @OPENSSL_sk_value(%struct.stack_st* %1, i32 %2), !dbg !2910
  %3 = bitcast i8* %call to %struct.evp_test_buffer_st*, !dbg !2911
  ret %struct.evp_test_buffer_st* %3, !dbg !2912
}

declare i32 @OPENSSL_sk_num(%struct.stack_st*) #2

declare i8* @OPENSSL_sk_value(%struct.stack_st*, i32) #2

declare %struct.evp_md_ctx_st* @EVP_MD_CTX_new() #2

declare i32 @EVP_DigestInit_ex(%struct.evp_md_ctx_st*, %struct.evp_md_st*, %struct.engine_st*) #2

; Function Attrs: nounwind uwtable
define internal i32 @evp_test_buffer_do(%struct.stack_st_EVP_TEST_BUFFER* %sk, i32 (i8*, i8*, i64)* %fn, i8* %ctx) #0 !dbg !2913 {
entry:
  %retval = alloca i32, align 4
  %sk.addr = alloca %struct.stack_st_EVP_TEST_BUFFER*, align 8
  %fn.addr = alloca i32 (i8*, i8*, i64)*, align 8
  %ctx.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %tb = alloca %struct.evp_test_buffer_st*, align 8
  %j = alloca i64, align 8
  store %struct.stack_st_EVP_TEST_BUFFER* %sk, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, metadata !2921, metadata !207), !dbg !2922
  store i32 (i8*, i8*, i64)* %fn, i32 (i8*, i8*, i64)** %fn.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (i8*, i8*, i64)** %fn.addr, metadata !2923, metadata !207), !dbg !2924
  store i8* %ctx, i8** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ctx.addr, metadata !2925, metadata !207), !dbg !2926
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2927, metadata !207), !dbg !2928
  store i32 0, i32* %i, align 4, !dbg !2929
  br label %for.cond, !dbg !2931

for.cond:                                         ; preds = %for.inc7, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2932
  %1 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8, !dbg !2935
  %call = call i32 @sk_EVP_TEST_BUFFER_num(%struct.stack_st_EVP_TEST_BUFFER* %1), !dbg !2936
  %cmp = icmp slt i32 %0, %call, !dbg !2937
  br i1 %cmp, label %for.body, label %for.end9, !dbg !2938

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.evp_test_buffer_st** %tb, metadata !2939, metadata !207), !dbg !2941
  %2 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %sk.addr, align 8, !dbg !2942
  %3 = load i32, i32* %i, align 4, !dbg !2943
  %call1 = call %struct.evp_test_buffer_st* @sk_EVP_TEST_BUFFER_value(%struct.stack_st_EVP_TEST_BUFFER* %2, i32 %3), !dbg !2944
  store %struct.evp_test_buffer_st* %call1, %struct.evp_test_buffer_st** %tb, align 8, !dbg !2941
  call void @llvm.dbg.declare(metadata i64* %j, metadata !2945, metadata !207), !dbg !2946
  store i64 0, i64* %j, align 8, !dbg !2947
  br label %for.cond2, !dbg !2949

for.cond2:                                        ; preds = %for.inc, %for.body
  %4 = load i64, i64* %j, align 8, !dbg !2950
  %5 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %tb, align 8, !dbg !2953
  %count = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %5, i32 0, i32 2, !dbg !2954
  %6 = load i64, i64* %count, align 8, !dbg !2954
  %cmp3 = icmp ult i64 %4, %6, !dbg !2955
  br i1 %cmp3, label %for.body4, label %for.end, !dbg !2956

for.body4:                                        ; preds = %for.cond2
  %7 = load i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64)** %fn.addr, align 8, !dbg !2957
  %8 = load i8*, i8** %ctx.addr, align 8, !dbg !2960
  %9 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %tb, align 8, !dbg !2961
  %buf = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %9, i32 0, i32 0, !dbg !2962
  %10 = load i8*, i8** %buf, align 8, !dbg !2962
  %11 = load %struct.evp_test_buffer_st*, %struct.evp_test_buffer_st** %tb, align 8, !dbg !2963
  %buflen = getelementptr inbounds %struct.evp_test_buffer_st, %struct.evp_test_buffer_st* %11, i32 0, i32 1, !dbg !2964
  %12 = load i64, i64* %buflen, align 8, !dbg !2964
  %call5 = call i32 %7(i8* %8, i8* %10, i64 %12), !dbg !2957
  %cmp6 = icmp sle i32 %call5, 0, !dbg !2965
  br i1 %cmp6, label %if.then, label %if.end, !dbg !2966

if.then:                                          ; preds = %for.body4
  store i32 0, i32* %retval, align 4, !dbg !2967
  br label %return, !dbg !2967

if.end:                                           ; preds = %for.body4
  br label %for.inc, !dbg !2968

for.inc:                                          ; preds = %if.end
  %13 = load i64, i64* %j, align 8, !dbg !2969
  %inc = add i64 %13, 1, !dbg !2969
  store i64 %inc, i64* %j, align 8, !dbg !2969
  br label %for.cond2, !dbg !2971, !llvm.loop !2972

for.end:                                          ; preds = %for.cond2
  br label %for.inc7, !dbg !2974

for.inc7:                                         ; preds = %for.end
  %14 = load i32, i32* %i, align 4, !dbg !2975
  %inc8 = add nsw i32 %14, 1, !dbg !2975
  store i32 %inc8, i32* %i, align 4, !dbg !2975
  br label %for.cond, !dbg !2977, !llvm.loop !2978

for.end9:                                         ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !2980
  br label %return, !dbg !2980

return:                                           ; preds = %for.end9, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !2981
  ret i32 %15, !dbg !2981
}

; Function Attrs: nounwind uwtable
define internal i32 @digest_update_fn(i8* %ctx, i8* %buf, i64 %buflen) #0 !dbg !2982 {
entry:
  %ctx.addr = alloca i8*, align 8
  %buf.addr = alloca i8*, align 8
  %buflen.addr = alloca i64, align 8
  store i8* %ctx, i8** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ctx.addr, metadata !2983, metadata !207), !dbg !2984
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !2985, metadata !207), !dbg !2986
  store i64 %buflen, i64* %buflen.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %buflen.addr, metadata !2987, metadata !207), !dbg !2988
  %0 = load i8*, i8** %ctx.addr, align 8, !dbg !2989
  %1 = bitcast i8* %0 to %struct.evp_md_ctx_st*, !dbg !2989
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !2990
  %3 = load i64, i64* %buflen.addr, align 8, !dbg !2991
  %call = call i32 @EVP_DigestUpdate(%struct.evp_md_ctx_st* %1, i8* %2, i64 %3), !dbg !2992
  ret i32 %call, !dbg !2993
}

declare i64 @EVP_MD_flags(%struct.evp_md_st*) #2

declare i32 @EVP_DigestFinalXOF(%struct.evp_md_ctx_st*, i8*, i64) #2

declare i32 @EVP_DigestFinal(%struct.evp_md_ctx_st*, i8*, i32*) #2

declare i32 @test_int_eq(i8*, i32, i8*, i8*, i32, i32) #2

declare void @EVP_MD_CTX_free(%struct.evp_md_ctx_st*) #2

declare i32 @EVP_DigestUpdate(%struct.evp_md_ctx_st*, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @digestsign_test_init(%struct.evp_test_st* %t, i8* %alg) #0 !dbg !2994 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %alg.addr = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !2995, metadata !207), !dbg !2996
  store i8* %alg, i8** %alg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %alg.addr, metadata !2997, metadata !207), !dbg !2998
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !2999
  %1 = load i8*, i8** %alg.addr, align 8, !dbg !3000
  %call = call i32 @digestsigver_test_init(%struct.evp_test_st* %0, i8* %1, i32 0, i32 0), !dbg !3001
  ret i32 %call, !dbg !3002
}

; Function Attrs: nounwind uwtable
define internal void @digestsigver_test_cleanup(%struct.evp_test_st* %t) #0 !dbg !3003 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %mdata = alloca %struct.DIGESTSIGN_DATA*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3004, metadata !207), !dbg !3005
  call void @llvm.dbg.declare(metadata %struct.DIGESTSIGN_DATA** %mdata, metadata !3006, metadata !207), !dbg !3024
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3025
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !3026
  %1 = load i8*, i8** %data, align 8, !dbg !3026
  %2 = bitcast i8* %1 to %struct.DIGESTSIGN_DATA*, !dbg !3025
  store %struct.DIGESTSIGN_DATA* %2, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3024
  %3 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3027
  %ctx = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %3, i32 0, i32 3, !dbg !3028
  %4 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %ctx, align 8, !dbg !3028
  call void @EVP_MD_CTX_free(%struct.evp_md_ctx_st* %4), !dbg !3029
  %5 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3030
  %input = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %5, i32 0, i32 5, !dbg !3031
  %6 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %input, align 8, !dbg !3031
  call void @sk_EVP_TEST_BUFFER_pop_free(%struct.stack_st_EVP_TEST_BUFFER* %6, void (%struct.evp_test_buffer_st*)* @evp_test_buffer_free), !dbg !3032
  %7 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3033
  %osin = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %7, i32 0, i32 6, !dbg !3034
  %8 = load i8*, i8** %osin, align 8, !dbg !3034
  call void @CRYPTO_free(i8* %8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2412), !dbg !3035
  %9 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3036
  %output = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %9, i32 0, i32 8, !dbg !3037
  %10 = load i8*, i8** %output, align 8, !dbg !3037
  call void @CRYPTO_free(i8* %10, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2413), !dbg !3038
  %11 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3039
  %12 = bitcast %struct.DIGESTSIGN_DATA* %11 to i8*, !dbg !3039
  call void @CRYPTO_free(i8* %12, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2414), !dbg !3040
  %13 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3041
  %data1 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %13, i32 0, i32 9, !dbg !3042
  store i8* null, i8** %data1, align 8, !dbg !3043
  ret void, !dbg !3044
}

; Function Attrs: nounwind uwtable
define internal i32 @digestsigver_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !3045 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %mdata = alloca %struct.DIGESTSIGN_DATA*, align 8
  %pkey = alloca %struct.evp_pkey_st*, align 8
  %rv = alloca i32, align 4
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3046, metadata !207), !dbg !3047
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !3048, metadata !207), !dbg !3049
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !3050, metadata !207), !dbg !3051
  call void @llvm.dbg.declare(metadata %struct.DIGESTSIGN_DATA** %mdata, metadata !3052, metadata !207), !dbg !3053
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3054
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !3055
  %1 = load i8*, i8** %data, align 8, !dbg !3055
  %2 = bitcast i8* %1 to %struct.DIGESTSIGN_DATA*, !dbg !3054
  store %struct.DIGESTSIGN_DATA* %2, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3053
  %3 = load i8*, i8** %keyword.addr, align 8, !dbg !3056
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i32 0, i32 0)) #7, !dbg !3058
  %cmp = icmp eq i32 %call, 0, !dbg !3059
  br i1 %cmp, label %if.then, label %if.end27, !dbg !3060

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.evp_pkey_st** %pkey, metadata !3061, metadata !207), !dbg !3063
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %pkey, align 8, !dbg !3063
  call void @llvm.dbg.declare(metadata i32* %rv, metadata !3064, metadata !207), !dbg !3065
  store i32 0, i32* %rv, align 4, !dbg !3065
  %4 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3066
  %is_verify = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %4, i32 0, i32 0, !dbg !3068
  %5 = load i32, i32* %is_verify, align 8, !dbg !3068
  %tobool = icmp ne i32 %5, 0, !dbg !3066
  br i1 %tobool, label %if.then1, label %if.end, !dbg !3069

if.then1:                                         ; preds = %if.then
  %6 = load i8*, i8** %value.addr, align 8, !dbg !3070
  %7 = load %struct.key_list_st*, %struct.key_list_st** @public_keys, align 8, !dbg !3071
  %call2 = call i32 @find_key(%struct.evp_pkey_st** %pkey, i8* %6, %struct.key_list_st* %7), !dbg !3072
  store i32 %call2, i32* %rv, align 4, !dbg !3073
  br label %if.end, !dbg !3074

if.end:                                           ; preds = %if.then1, %if.then
  %8 = load i32, i32* %rv, align 4, !dbg !3075
  %cmp3 = icmp eq i32 %8, 0, !dbg !3077
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !3078

if.then4:                                         ; preds = %if.end
  %9 = load i8*, i8** %value.addr, align 8, !dbg !3079
  %10 = load %struct.key_list_st*, %struct.key_list_st** @private_keys, align 8, !dbg !3080
  %call5 = call i32 @find_key(%struct.evp_pkey_st** %pkey, i8* %9, %struct.key_list_st* %10), !dbg !3081
  store i32 %call5, i32* %rv, align 4, !dbg !3082
  br label %if.end6, !dbg !3083

if.end6:                                          ; preds = %if.then4, %if.end
  %11 = load i32, i32* %rv, align 4, !dbg !3084
  %cmp7 = icmp eq i32 %11, 0, !dbg !3086
  br i1 %cmp7, label %if.then9, label %lor.lhs.false, !dbg !3087

lor.lhs.false:                                    ; preds = %if.end6
  %12 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !3088
  %cmp8 = icmp eq %struct.evp_pkey_st* %12, null, !dbg !3090
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !3091

if.then9:                                         ; preds = %lor.lhs.false, %if.end6
  %13 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3092
  %skip = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %13, i32 0, i32 2, !dbg !3094
  store i32 1, i32* %skip, align 8, !dbg !3095
  store i32 1, i32* %retval, align 4, !dbg !3096
  br label %return, !dbg !3096

if.end10:                                         ; preds = %lor.lhs.false
  %14 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3097
  %is_verify11 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %14, i32 0, i32 0, !dbg !3099
  %15 = load i32, i32* %is_verify11, align 8, !dbg !3099
  %tobool12 = icmp ne i32 %15, 0, !dbg !3097
  br i1 %tobool12, label %if.then13, label %if.end18, !dbg !3100

if.then13:                                        ; preds = %if.end10
  %16 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3101
  %ctx = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %16, i32 0, i32 3, !dbg !3104
  %17 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %ctx, align 8, !dbg !3104
  %18 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3105
  %pctx = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %18, i32 0, i32 4, !dbg !3106
  %19 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3107
  %md = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %19, i32 0, i32 2, !dbg !3108
  %20 = load %struct.evp_md_st*, %struct.evp_md_st** %md, align 8, !dbg !3108
  %21 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !3109
  %call14 = call i32 @EVP_DigestVerifyInit(%struct.evp_md_ctx_st* %17, %struct.evp_pkey_ctx_st** %pctx, %struct.evp_md_st* %20, %struct.engine_st* null, %struct.evp_pkey_st* %21), !dbg !3110
  %tobool15 = icmp ne i32 %call14, 0, !dbg !3110
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !3111

if.then16:                                        ; preds = %if.then13
  %22 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3112
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %22, i32 0, i32 4, !dbg !3113
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.105, i32 0, i32 0), i8** %err, align 8, !dbg !3114
  br label %if.end17, !dbg !3112

if.end17:                                         ; preds = %if.then16, %if.then13
  store i32 1, i32* %retval, align 4, !dbg !3115
  br label %return, !dbg !3115

if.end18:                                         ; preds = %if.end10
  %23 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3116
  %ctx19 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %23, i32 0, i32 3, !dbg !3118
  %24 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %ctx19, align 8, !dbg !3118
  %25 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3119
  %pctx20 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %25, i32 0, i32 4, !dbg !3120
  %26 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3121
  %md21 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %26, i32 0, i32 2, !dbg !3122
  %27 = load %struct.evp_md_st*, %struct.evp_md_st** %md21, align 8, !dbg !3122
  %28 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !3123
  %call22 = call i32 @EVP_DigestSignInit(%struct.evp_md_ctx_st* %24, %struct.evp_pkey_ctx_st** %pctx20, %struct.evp_md_st* %27, %struct.engine_st* null, %struct.evp_pkey_st* %28), !dbg !3124
  %tobool23 = icmp ne i32 %call22, 0, !dbg !3124
  br i1 %tobool23, label %if.end26, label %if.then24, !dbg !3125

if.then24:                                        ; preds = %if.end18
  %29 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3126
  %err25 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %29, i32 0, i32 4, !dbg !3127
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.106, i32 0, i32 0), i8** %err25, align 8, !dbg !3128
  br label %if.end26, !dbg !3126

if.end26:                                         ; preds = %if.then24, %if.end18
  store i32 1, i32* %retval, align 4, !dbg !3129
  br label %return, !dbg !3129

if.end27:                                         ; preds = %entry
  %30 = load i8*, i8** %keyword.addr, align 8, !dbg !3130
  %call28 = call i32 @strcmp(i8* %30, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.87, i32 0, i32 0)) #7, !dbg !3132
  %cmp29 = icmp eq i32 %call28, 0, !dbg !3133
  br i1 %cmp29, label %if.then30, label %if.end36, !dbg !3134

if.then30:                                        ; preds = %if.end27
  %31 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3135
  %is_oneshot = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %31, i32 0, i32 1, !dbg !3138
  %32 = load i32, i32* %is_oneshot, align 4, !dbg !3138
  %tobool31 = icmp ne i32 %32, 0, !dbg !3135
  br i1 %tobool31, label %if.then32, label %if.end34, !dbg !3139

if.then32:                                        ; preds = %if.then30
  %33 = load i8*, i8** %value.addr, align 8, !dbg !3140
  %34 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3141
  %osin = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %34, i32 0, i32 6, !dbg !3142
  %35 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3143
  %osin_len = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %35, i32 0, i32 7, !dbg !3144
  %call33 = call i32 @parse_bin(i8* %33, i8** %osin, i64* %osin_len), !dbg !3145
  store i32 %call33, i32* %retval, align 4, !dbg !3146
  br label %return, !dbg !3146

if.end34:                                         ; preds = %if.then30
  %36 = load i8*, i8** %value.addr, align 8, !dbg !3147
  %37 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3148
  %input = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %37, i32 0, i32 5, !dbg !3149
  %call35 = call i32 @evp_test_buffer_append(i8* %36, %struct.stack_st_EVP_TEST_BUFFER** %input), !dbg !3150
  store i32 %call35, i32* %retval, align 4, !dbg !3151
  br label %return, !dbg !3151

if.end36:                                         ; preds = %if.end27
  %38 = load i8*, i8** %keyword.addr, align 8, !dbg !3152
  %call37 = call i32 @strcmp(i8* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i32 0, i32 0)) #7, !dbg !3154
  %cmp38 = icmp eq i32 %call37, 0, !dbg !3155
  br i1 %cmp38, label %if.then39, label %if.end41, !dbg !3156

if.then39:                                        ; preds = %if.end36
  %39 = load i8*, i8** %value.addr, align 8, !dbg !3157
  %40 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3158
  %output = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %40, i32 0, i32 8, !dbg !3159
  %41 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3160
  %output_len = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %41, i32 0, i32 9, !dbg !3161
  %call40 = call i32 @parse_bin(i8* %39, i8** %output, i64* %output_len), !dbg !3162
  store i32 %call40, i32* %retval, align 4, !dbg !3163
  br label %return, !dbg !3163

if.end41:                                         ; preds = %if.end36
  %42 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3164
  %is_oneshot42 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %42, i32 0, i32 1, !dbg !3166
  %43 = load i32, i32* %is_oneshot42, align 4, !dbg !3166
  %tobool43 = icmp ne i32 %43, 0, !dbg !3164
  br i1 %tobool43, label %if.end57, label %if.then44, !dbg !3167

if.then44:                                        ; preds = %if.end41
  %44 = load i8*, i8** %keyword.addr, align 8, !dbg !3168
  %call45 = call i32 @strcmp(i8* %44, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.89, i32 0, i32 0)) #7, !dbg !3171
  %cmp46 = icmp eq i32 %call45, 0, !dbg !3172
  br i1 %cmp46, label %if.then47, label %if.end50, !dbg !3173

if.then47:                                        ; preds = %if.then44
  %45 = load i8*, i8** %value.addr, align 8, !dbg !3174
  %46 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3175
  %input48 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %46, i32 0, i32 5, !dbg !3176
  %47 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %input48, align 8, !dbg !3176
  %call49 = call i32 @evp_test_buffer_set_count(i8* %45, %struct.stack_st_EVP_TEST_BUFFER* %47), !dbg !3177
  store i32 %call49, i32* %retval, align 4, !dbg !3178
  br label %return, !dbg !3178

if.end50:                                         ; preds = %if.then44
  %48 = load i8*, i8** %keyword.addr, align 8, !dbg !3179
  %call51 = call i32 @strcmp(i8* %48, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.90, i32 0, i32 0)) #7, !dbg !3181
  %cmp52 = icmp eq i32 %call51, 0, !dbg !3182
  br i1 %cmp52, label %if.then53, label %if.end56, !dbg !3183

if.then53:                                        ; preds = %if.end50
  %49 = load i8*, i8** %value.addr, align 8, !dbg !3184
  %50 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3185
  %input54 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %50, i32 0, i32 5, !dbg !3186
  %51 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %input54, align 8, !dbg !3186
  %call55 = call i32 @evp_test_buffer_ncopy(i8* %49, %struct.stack_st_EVP_TEST_BUFFER* %51), !dbg !3187
  store i32 %call55, i32* %retval, align 4, !dbg !3188
  br label %return, !dbg !3188

if.end56:                                         ; preds = %if.end50
  br label %if.end57, !dbg !3189

if.end57:                                         ; preds = %if.end56, %if.end41
  %52 = load i8*, i8** %keyword.addr, align 8, !dbg !3190
  %call58 = call i32 @strcmp(i8* %52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.107, i32 0, i32 0)) #7, !dbg !3192
  %cmp59 = icmp eq i32 %call58, 0, !dbg !3193
  br i1 %cmp59, label %if.then60, label %if.end67, !dbg !3194

if.then60:                                        ; preds = %if.end57
  %53 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3195
  %pctx61 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %53, i32 0, i32 4, !dbg !3198
  %54 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %pctx61, align 8, !dbg !3198
  %cmp62 = icmp eq %struct.evp_pkey_ctx_st* %54, null, !dbg !3199
  br i1 %cmp62, label %if.then63, label %if.end64, !dbg !3200

if.then63:                                        ; preds = %if.then60
  store i32 0, i32* %retval, align 4, !dbg !3201
  br label %return, !dbg !3201

if.end64:                                         ; preds = %if.then60
  %55 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3202
  %56 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3203
  %pctx65 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %56, i32 0, i32 4, !dbg !3204
  %57 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %pctx65, align 8, !dbg !3204
  %58 = load i8*, i8** %value.addr, align 8, !dbg !3205
  %call66 = call i32 @pkey_test_ctrl(%struct.evp_test_st* %55, %struct.evp_pkey_ctx_st* %57, i8* %58), !dbg !3206
  store i32 %call66, i32* %retval, align 4, !dbg !3207
  br label %return, !dbg !3207

if.end67:                                         ; preds = %if.end57
  store i32 0, i32* %retval, align 4, !dbg !3208
  br label %return, !dbg !3208

return:                                           ; preds = %if.end67, %if.end64, %if.then63, %if.then53, %if.then47, %if.then39, %if.end34, %if.then32, %if.end26, %if.end17, %if.then9
  %59 = load i32, i32* %retval, align 4, !dbg !3209
  ret i32 %59, !dbg !3209
}

; Function Attrs: nounwind uwtable
define internal i32 @digestsign_test_run(%struct.evp_test_st* %t) #0 !dbg !3210 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %expected = alloca %struct.DIGESTSIGN_DATA*, align 8
  %got = alloca i8*, align 8
  %got_len = alloca i64, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3211, metadata !207), !dbg !3212
  call void @llvm.dbg.declare(metadata %struct.DIGESTSIGN_DATA** %expected, metadata !3213, metadata !207), !dbg !3214
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3215
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !3216
  %1 = load i8*, i8** %data, align 8, !dbg !3216
  %2 = bitcast i8* %1 to %struct.DIGESTSIGN_DATA*, !dbg !3215
  store %struct.DIGESTSIGN_DATA* %2, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !3214
  call void @llvm.dbg.declare(metadata i8** %got, metadata !3217, metadata !207), !dbg !3218
  store i8* null, i8** %got, align 8, !dbg !3218
  call void @llvm.dbg.declare(metadata i64* %got_len, metadata !3219, metadata !207), !dbg !3220
  %3 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !3221
  %input = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %3, i32 0, i32 5, !dbg !3223
  %4 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %input, align 8, !dbg !3223
  %5 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !3224
  %ctx = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %5, i32 0, i32 3, !dbg !3225
  %6 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %ctx, align 8, !dbg !3225
  %7 = bitcast %struct.evp_md_ctx_st* %6 to i8*, !dbg !3224
  %call = call i32 @evp_test_buffer_do(%struct.stack_st_EVP_TEST_BUFFER* %4, i32 (i8*, i8*, i64)* @digestsign_update_fn, i8* %7), !dbg !3226
  %tobool = icmp ne i32 %call, 0, !dbg !3226
  br i1 %tobool, label %if.end, label %if.then, !dbg !3227

if.then:                                          ; preds = %entry
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3228
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %8, i32 0, i32 4, !dbg !3230
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.96, i32 0, i32 0), i8** %err, align 8, !dbg !3231
  br label %err24, !dbg !3232

if.end:                                           ; preds = %entry
  %9 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !3233
  %ctx1 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %9, i32 0, i32 3, !dbg !3235
  %10 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %ctx1, align 8, !dbg !3235
  %call2 = call i32 @EVP_DigestSignFinal(%struct.evp_md_ctx_st* %10, i8* null, i64* %got_len), !dbg !3236
  %tobool3 = icmp ne i32 %call2, 0, !dbg !3236
  br i1 %tobool3, label %if.end6, label %if.then4, !dbg !3237

if.then4:                                         ; preds = %if.end
  %11 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3238
  %err5 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %11, i32 0, i32 4, !dbg !3240
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.111, i32 0, i32 0), i8** %err5, align 8, !dbg !3241
  br label %err24, !dbg !3242

if.end6:                                          ; preds = %if.end
  %12 = load i64, i64* %got_len, align 8, !dbg !3243
  %call7 = call i8* @CRYPTO_malloc(i64 %12, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2491), !dbg !3245
  store i8* %call7, i8** %got, align 8, !dbg !3246
  %call8 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2491, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.112, i32 0, i32 0), i8* %call7), !dbg !3247
  %tobool9 = icmp ne i32 %call8, 0, !dbg !3249
  br i1 %tobool9, label %if.end12, label %if.then10, !dbg !3250

if.then10:                                        ; preds = %if.end6
  %13 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3251
  %err11 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %13, i32 0, i32 4, !dbg !3253
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.113, i32 0, i32 0), i8** %err11, align 8, !dbg !3254
  br label %err24, !dbg !3255

if.end12:                                         ; preds = %if.end6
  %14 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !3256
  %ctx13 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %14, i32 0, i32 3, !dbg !3258
  %15 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %ctx13, align 8, !dbg !3258
  %16 = load i8*, i8** %got, align 8, !dbg !3259
  %call14 = call i32 @EVP_DigestSignFinal(%struct.evp_md_ctx_st* %15, i8* %16, i64* %got_len), !dbg !3260
  %tobool15 = icmp ne i32 %call14, 0, !dbg !3260
  br i1 %tobool15, label %if.end18, label %if.then16, !dbg !3261

if.then16:                                        ; preds = %if.end12
  %17 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3262
  %err17 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %17, i32 0, i32 4, !dbg !3264
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.114, i32 0, i32 0), i8** %err17, align 8, !dbg !3265
  br label %err24, !dbg !3266

if.end18:                                         ; preds = %if.end12
  %18 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3267
  %19 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !3269
  %output = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %19, i32 0, i32 8, !dbg !3270
  %20 = load i8*, i8** %output, align 8, !dbg !3270
  %21 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !3271
  %output_len = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %21, i32 0, i32 9, !dbg !3272
  %22 = load i64, i64* %output_len, align 8, !dbg !3272
  %23 = load i8*, i8** %got, align 8, !dbg !3273
  %24 = load i64, i64* %got_len, align 8, !dbg !3274
  %call19 = call i32 @memory_err_compare(%struct.evp_test_st* %18, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.115, i32 0, i32 0), i8* %20, i64 %22, i8* %23, i64 %24), !dbg !3275
  %tobool20 = icmp ne i32 %call19, 0, !dbg !3275
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !3276

if.then21:                                        ; preds = %if.end18
  br label %err24, !dbg !3277

if.end22:                                         ; preds = %if.end18
  %25 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3278
  %err23 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %25, i32 0, i32 4, !dbg !3279
  store i8* null, i8** %err23, align 8, !dbg !3280
  br label %err24, !dbg !3278

err24:                                            ; preds = %if.end22, %if.then21, %if.then16, %if.then10, %if.then4, %if.then
  %26 = load i8*, i8** %got, align 8, !dbg !3281
  call void @CRYPTO_free(i8* %26, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2506), !dbg !3282
  ret i32 1, !dbg !3283
}

; Function Attrs: nounwind uwtable
define internal i32 @digestsigver_test_init(%struct.evp_test_st* %t, i8* %alg, i32 %is_verify, i32 %is_oneshot) #0 !dbg !3284 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %alg.addr = alloca i8*, align 8
  %is_verify.addr = alloca i32, align 4
  %is_oneshot.addr = alloca i32, align 4
  %md = alloca %struct.evp_md_st*, align 8
  %mdat = alloca %struct.DIGESTSIGN_DATA*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3287, metadata !207), !dbg !3288
  store i8* %alg, i8** %alg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %alg.addr, metadata !3289, metadata !207), !dbg !3290
  store i32 %is_verify, i32* %is_verify.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %is_verify.addr, metadata !3291, metadata !207), !dbg !3292
  store i32 %is_oneshot, i32* %is_oneshot.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %is_oneshot.addr, metadata !3293, metadata !207), !dbg !3294
  call void @llvm.dbg.declare(metadata %struct.evp_md_st** %md, metadata !3295, metadata !207), !dbg !3296
  store %struct.evp_md_st* null, %struct.evp_md_st** %md, align 8, !dbg !3296
  call void @llvm.dbg.declare(metadata %struct.DIGESTSIGN_DATA** %mdat, metadata !3297, metadata !207), !dbg !3298
  %0 = load i8*, i8** %alg.addr, align 8, !dbg !3299
  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.41, i32 0, i32 0)) #7, !dbg !3301
  %cmp = icmp ne i32 %call, 0, !dbg !3302
  br i1 %cmp, label %if.then, label %if.end10, !dbg !3303

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %alg.addr, align 8, !dbg !3304
  %call1 = call %struct.evp_md_st* @EVP_get_digestbyname(i8* %1), !dbg !3307
  store %struct.evp_md_st* %call1, %struct.evp_md_st** %md, align 8, !dbg !3308
  %cmp2 = icmp eq %struct.evp_md_st* %call1, null, !dbg !3309
  br i1 %cmp2, label %if.then3, label %if.end9, !dbg !3310

if.then3:                                         ; preds = %if.then
  %2 = load i8*, i8** %alg.addr, align 8, !dbg !3311
  %call4 = call i32 @OBJ_sn2nid(i8* %2), !dbg !3314
  %cmp5 = icmp ne i32 %call4, 0, !dbg !3315
  br i1 %cmp5, label %if.then8, label %lor.lhs.false, !dbg !3316

lor.lhs.false:                                    ; preds = %if.then3
  %3 = load i8*, i8** %alg.addr, align 8, !dbg !3317
  %call6 = call i32 @OBJ_ln2nid(i8* %3), !dbg !3319
  %cmp7 = icmp ne i32 %call6, 0, !dbg !3320
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !3321

if.then8:                                         ; preds = %lor.lhs.false, %if.then3
  %4 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3322
  %skip = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %4, i32 0, i32 2, !dbg !3324
  store i32 1, i32* %skip, align 8, !dbg !3325
  store i32 1, i32* %retval, align 4, !dbg !3326
  br label %return, !dbg !3326

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %retval, align 4, !dbg !3327
  br label %return, !dbg !3327

if.end9:                                          ; preds = %if.then
  br label %if.end10, !dbg !3328

if.end10:                                         ; preds = %if.end9, %entry
  %call11 = call i8* @CRYPTO_zalloc(i64 72, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2388), !dbg !3329
  %5 = bitcast i8* %call11 to %struct.DIGESTSIGN_DATA*, !dbg !3329
  store %struct.DIGESTSIGN_DATA* %5, %struct.DIGESTSIGN_DATA** %mdat, align 8, !dbg !3331
  %6 = bitcast %struct.DIGESTSIGN_DATA* %5 to i8*, !dbg !3332
  %call12 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2388, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.86, i32 0, i32 0), i8* %6), !dbg !3333
  %tobool = icmp ne i32 %call12, 0, !dbg !3335
  br i1 %tobool, label %if.end14, label %if.then13, !dbg !3336

if.then13:                                        ; preds = %if.end10
  store i32 0, i32* %retval, align 4, !dbg !3337
  br label %return, !dbg !3337

if.end14:                                         ; preds = %if.end10
  %7 = load %struct.evp_md_st*, %struct.evp_md_st** %md, align 8, !dbg !3338
  %8 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdat, align 8, !dbg !3339
  %md15 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %8, i32 0, i32 2, !dbg !3340
  store %struct.evp_md_st* %7, %struct.evp_md_st** %md15, align 8, !dbg !3341
  %call16 = call %struct.evp_md_ctx_st* @EVP_MD_CTX_new(), !dbg !3342
  %9 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdat, align 8, !dbg !3344
  %ctx = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %9, i32 0, i32 3, !dbg !3345
  store %struct.evp_md_ctx_st* %call16, %struct.evp_md_ctx_st** %ctx, align 8, !dbg !3346
  %10 = bitcast %struct.evp_md_ctx_st* %call16 to i8*, !dbg !3344
  %call17 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2391, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.104, i32 0, i32 0), i8* %10), !dbg !3347
  %tobool18 = icmp ne i32 %call17, 0, !dbg !3349
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !3350

if.then19:                                        ; preds = %if.end14
  %11 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdat, align 8, !dbg !3351
  %12 = bitcast %struct.DIGESTSIGN_DATA* %11 to i8*, !dbg !3351
  call void @CRYPTO_free(i8* %12, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2392), !dbg !3353
  store i32 0, i32* %retval, align 4, !dbg !3354
  br label %return, !dbg !3354

if.end20:                                         ; preds = %if.end14
  %13 = load i32, i32* %is_verify.addr, align 4, !dbg !3355
  %14 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdat, align 8, !dbg !3356
  %is_verify21 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %14, i32 0, i32 0, !dbg !3357
  store i32 %13, i32* %is_verify21, align 8, !dbg !3358
  %15 = load i32, i32* %is_oneshot.addr, align 4, !dbg !3359
  %16 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdat, align 8, !dbg !3360
  %is_oneshot22 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %16, i32 0, i32 1, !dbg !3361
  store i32 %15, i32* %is_oneshot22, align 4, !dbg !3362
  %17 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdat, align 8, !dbg !3363
  %18 = bitcast %struct.DIGESTSIGN_DATA* %17 to i8*, !dbg !3363
  %19 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3364
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %19, i32 0, i32 9, !dbg !3365
  store i8* %18, i8** %data, align 8, !dbg !3366
  store i32 1, i32* %retval, align 4, !dbg !3367
  br label %return, !dbg !3367

return:                                           ; preds = %if.end20, %if.then19, %if.then13, %if.end, %if.then8
  %20 = load i32, i32* %retval, align 4, !dbg !3368
  ret i32 %20, !dbg !3368
}

declare i32 @EVP_DigestVerifyInit(%struct.evp_md_ctx_st*, %struct.evp_pkey_ctx_st**, %struct.evp_md_st*, %struct.engine_st*, %struct.evp_pkey_st*) #2

declare i32 @EVP_DigestSignInit(%struct.evp_md_ctx_st*, %struct.evp_pkey_ctx_st**, %struct.evp_md_st*, %struct.engine_st*, %struct.evp_pkey_st*) #2

; Function Attrs: nounwind uwtable
define internal i32 @pkey_test_ctrl(%struct.evp_test_st* %t, %struct.evp_pkey_ctx_st* %pctx, i8* %value) #0 !dbg !3369 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %pctx.addr = alloca %struct.evp_pkey_ctx_st*, align 8
  %value.addr = alloca i8*, align 8
  %rv = alloca i32, align 4
  %p = alloca i8*, align 8
  %tmpval = alloca i8*, align 8
  %nid = alloca i32, align 4
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3372, metadata !207), !dbg !3373
  store %struct.evp_pkey_ctx_st* %pctx, %struct.evp_pkey_ctx_st** %pctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_pkey_ctx_st** %pctx.addr, metadata !3374, metadata !207), !dbg !3375
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !3376, metadata !207), !dbg !3377
  call void @llvm.dbg.declare(metadata i32* %rv, metadata !3378, metadata !207), !dbg !3379
  call void @llvm.dbg.declare(metadata i8** %p, metadata !3380, metadata !207), !dbg !3381
  call void @llvm.dbg.declare(metadata i8** %tmpval, metadata !3382, metadata !207), !dbg !3383
  %0 = load i8*, i8** %value.addr, align 8, !dbg !3384
  %call = call i8* @CRYPTO_strdup(i8* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1334), !dbg !3386
  store i8* %call, i8** %tmpval, align 8, !dbg !3387
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1334, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.108, i32 0, i32 0), i8* %call), !dbg !3388
  %tobool = icmp ne i32 %call1, 0, !dbg !3390
  br i1 %tobool, label %if.end, label %if.then, !dbg !3391

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3392
  br label %return, !dbg !3392

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %tmpval, align 8, !dbg !3393
  %call2 = call i8* @strchr(i8* %1, i32 58) #7, !dbg !3394
  store i8* %call2, i8** %p, align 8, !dbg !3395
  %2 = load i8*, i8** %p, align 8, !dbg !3396
  %cmp = icmp ne i8* %2, null, !dbg !3398
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !3399

if.then3:                                         ; preds = %if.end
  %3 = load i8*, i8** %p, align 8, !dbg !3400
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !3400
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !3400
  store i8 0, i8* %3, align 1, !dbg !3401
  br label %if.end4, !dbg !3402

if.end4:                                          ; preds = %if.then3, %if.end
  %4 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %pctx.addr, align 8, !dbg !3403
  %5 = load i8*, i8** %tmpval, align 8, !dbg !3404
  %6 = load i8*, i8** %p, align 8, !dbg !3405
  %call5 = call i32 @EVP_PKEY_CTX_ctrl_str(%struct.evp_pkey_ctx_st* %4, i8* %5, i8* %6), !dbg !3406
  store i32 %call5, i32* %rv, align 4, !dbg !3407
  %7 = load i32, i32* %rv, align 4, !dbg !3408
  %cmp6 = icmp eq i32 %7, -2, !dbg !3410
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !3411

if.then7:                                         ; preds = %if.end4
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3412
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %8, i32 0, i32 4, !dbg !3414
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.109, i32 0, i32 0), i8** %err, align 8, !dbg !3415
  store i32 1, i32* %rv, align 4, !dbg !3416
  br label %if.end30, !dbg !3417

if.else:                                          ; preds = %if.end4
  %9 = load i8*, i8** %p, align 8, !dbg !3418
  %cmp8 = icmp ne i8* %9, null, !dbg !3421
  br i1 %cmp8, label %land.lhs.true, label %if.end29, !dbg !3422

land.lhs.true:                                    ; preds = %if.else
  %10 = load i32, i32* %rv, align 4, !dbg !3423
  %cmp9 = icmp sle i32 %10, 0, !dbg !3425
  br i1 %cmp9, label %if.then10, label %if.end29, !dbg !3426

if.then10:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %nid, metadata !3427, metadata !207), !dbg !3429
  %11 = load i8*, i8** %p, align 8, !dbg !3430
  %call11 = call i32 @OBJ_sn2nid(i8* %11), !dbg !3431
  store i32 %call11, i32* %nid, align 4, !dbg !3429
  %12 = load i32, i32* %nid, align 4, !dbg !3432
  %cmp12 = icmp eq i32 %12, 0, !dbg !3434
  br i1 %cmp12, label %if.then13, label %if.end15, !dbg !3435

if.then13:                                        ; preds = %if.then10
  %13 = load i8*, i8** %p, align 8, !dbg !3436
  %call14 = call i32 @OBJ_ln2nid(i8* %13), !dbg !3437
  store i32 %call14, i32* %nid, align 4, !dbg !3438
  br label %if.end15, !dbg !3439

if.end15:                                         ; preds = %if.then13, %if.then10
  %14 = load i32, i32* %nid, align 4, !dbg !3440
  %cmp16 = icmp ne i32 %14, 0, !dbg !3442
  br i1 %cmp16, label %land.lhs.true17, label %if.else26, !dbg !3443

land.lhs.true17:                                  ; preds = %if.end15
  %15 = load i32, i32* %nid, align 4, !dbg !3444
  %call18 = call i8* @OBJ_nid2sn(i32 %15), !dbg !3446
  %call19 = call %struct.evp_md_st* @EVP_get_digestbyname(i8* %call18), !dbg !3447
  %cmp20 = icmp eq %struct.evp_md_st* %call19, null, !dbg !3449
  br i1 %cmp20, label %land.lhs.true21, label %if.else26, !dbg !3450

land.lhs.true21:                                  ; preds = %land.lhs.true17
  %16 = load i32, i32* %nid, align 4, !dbg !3451
  %call22 = call i8* @OBJ_nid2sn(i32 %16), !dbg !3452
  %call23 = call %struct.evp_cipher_st* @EVP_get_cipherbyname(i8* %call22), !dbg !3453
  %cmp24 = icmp eq %struct.evp_cipher_st* %call23, null, !dbg !3454
  br i1 %cmp24, label %if.then25, label %if.else26, !dbg !3455

if.then25:                                        ; preds = %land.lhs.true21
  %17 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3457
  %skip = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %17, i32 0, i32 2, !dbg !3459
  store i32 1, i32* %skip, align 8, !dbg !3460
  store i32 1, i32* %rv, align 4, !dbg !3461
  br label %if.end28, !dbg !3462

if.else26:                                        ; preds = %land.lhs.true21, %land.lhs.true17, %if.end15
  %18 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3463
  %err27 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %18, i32 0, i32 4, !dbg !3465
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.110, i32 0, i32 0), i8** %err27, align 8, !dbg !3466
  store i32 1, i32* %rv, align 4, !dbg !3467
  br label %if.end28

if.end28:                                         ; preds = %if.else26, %if.then25
  br label %if.end29, !dbg !3468

if.end29:                                         ; preds = %if.end28, %land.lhs.true, %if.else
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then7
  %19 = load i8*, i8** %tmpval, align 8, !dbg !3469
  call void @CRYPTO_free(i8* %19, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1359), !dbg !3470
  %20 = load i32, i32* %rv, align 4, !dbg !3471
  %cmp31 = icmp sgt i32 %20, 0, !dbg !3472
  %conv = zext i1 %cmp31 to i32, !dbg !3472
  store i32 %conv, i32* %retval, align 4, !dbg !3473
  br label %return, !dbg !3473

return:                                           ; preds = %if.end30, %if.then
  %21 = load i32, i32* %retval, align 4, !dbg !3474
  ret i32 %21, !dbg !3474
}

declare i8* @CRYPTO_strdup(i8*, i8*, i32) #2

declare i32 @EVP_PKEY_CTX_ctrl_str(%struct.evp_pkey_ctx_st*, i8*, i8*) #2

declare i8* @OBJ_nid2sn(i32) #2

; Function Attrs: nounwind uwtable
define internal i32 @digestsign_update_fn(i8* %ctx, i8* %buf, i64 %buflen) #0 !dbg !3475 {
entry:
  %ctx.addr = alloca i8*, align 8
  %buf.addr = alloca i8*, align 8
  %buflen.addr = alloca i64, align 8
  store i8* %ctx, i8** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ctx.addr, metadata !3476, metadata !207), !dbg !3477
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !3478, metadata !207), !dbg !3479
  store i64 %buflen, i64* %buflen.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %buflen.addr, metadata !3480, metadata !207), !dbg !3481
  %0 = load i8*, i8** %ctx.addr, align 8, !dbg !3482
  %1 = bitcast i8* %0 to %struct.evp_md_ctx_st*, !dbg !3482
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !3483
  %3 = load i64, i64* %buflen.addr, align 8, !dbg !3484
  %call = call i32 @EVP_DigestUpdate(%struct.evp_md_ctx_st* %1, i8* %2, i64 %3), !dbg !3485
  ret i32 %call, !dbg !3486
}

declare i32 @EVP_DigestSignFinal(%struct.evp_md_ctx_st*, i8*, i64*) #2

; Function Attrs: nounwind uwtable
define internal i32 @digestverify_test_init(%struct.evp_test_st* %t, i8* %alg) #0 !dbg !3487 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %alg.addr = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3488, metadata !207), !dbg !3489
  store i8* %alg, i8** %alg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %alg.addr, metadata !3490, metadata !207), !dbg !3491
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3492
  %1 = load i8*, i8** %alg.addr, align 8, !dbg !3493
  %call = call i32 @digestsigver_test_init(%struct.evp_test_st* %0, i8* %1, i32 1, i32 0), !dbg !3494
  ret i32 %call, !dbg !3495
}

; Function Attrs: nounwind uwtable
define internal i32 @digestverify_test_run(%struct.evp_test_st* %t) #0 !dbg !3496 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %mdata = alloca %struct.DIGESTSIGN_DATA*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3497, metadata !207), !dbg !3498
  call void @llvm.dbg.declare(metadata %struct.DIGESTSIGN_DATA** %mdata, metadata !3499, metadata !207), !dbg !3500
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3501
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !3502
  %1 = load i8*, i8** %data, align 8, !dbg !3502
  %2 = bitcast i8* %1 to %struct.DIGESTSIGN_DATA*, !dbg !3501
  store %struct.DIGESTSIGN_DATA* %2, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3500
  %3 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3503
  %input = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %3, i32 0, i32 5, !dbg !3505
  %4 = load %struct.stack_st_EVP_TEST_BUFFER*, %struct.stack_st_EVP_TEST_BUFFER** %input, align 8, !dbg !3505
  %5 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3506
  %ctx = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %5, i32 0, i32 3, !dbg !3507
  %6 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %ctx, align 8, !dbg !3507
  %7 = bitcast %struct.evp_md_ctx_st* %6 to i8*, !dbg !3506
  %call = call i32 @evp_test_buffer_do(%struct.stack_st_EVP_TEST_BUFFER* %4, i32 (i8*, i8*, i64)* @digestverify_update_fn, i8* %7), !dbg !3508
  %tobool = icmp ne i32 %call, 0, !dbg !3508
  br i1 %tobool, label %if.end, label %if.then, !dbg !3509

if.then:                                          ; preds = %entry
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3510
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %8, i32 0, i32 4, !dbg !3512
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.96, i32 0, i32 0), i8** %err, align 8, !dbg !3513
  store i32 1, i32* %retval, align 4, !dbg !3514
  br label %return, !dbg !3514

if.end:                                           ; preds = %entry
  %9 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3515
  %ctx1 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %9, i32 0, i32 3, !dbg !3517
  %10 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %ctx1, align 8, !dbg !3517
  %11 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3518
  %output = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %11, i32 0, i32 8, !dbg !3519
  %12 = load i8*, i8** %output, align 8, !dbg !3519
  %13 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !3520
  %output_len = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %13, i32 0, i32 9, !dbg !3521
  %14 = load i64, i64* %output_len, align 8, !dbg !3521
  %call2 = call i32 @EVP_DigestVerifyFinal(%struct.evp_md_ctx_st* %10, i8* %12, i64 %14), !dbg !3522
  %cmp = icmp sle i32 %call2, 0, !dbg !3523
  br i1 %cmp, label %if.then3, label %if.end5, !dbg !3524

if.then3:                                         ; preds = %if.end
  %15 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3525
  %err4 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %15, i32 0, i32 4, !dbg !3526
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.117, i32 0, i32 0), i8** %err4, align 8, !dbg !3527
  br label %if.end5, !dbg !3525

if.end5:                                          ; preds = %if.then3, %if.end
  store i32 1, i32* %retval, align 4, !dbg !3528
  br label %return, !dbg !3528

return:                                           ; preds = %if.end5, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !3529
  ret i32 %16, !dbg !3529
}

; Function Attrs: nounwind uwtable
define internal i32 @digestverify_update_fn(i8* %ctx, i8* %buf, i64 %buflen) #0 !dbg !3530 {
entry:
  %ctx.addr = alloca i8*, align 8
  %buf.addr = alloca i8*, align 8
  %buflen.addr = alloca i64, align 8
  store i8* %ctx, i8** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ctx.addr, metadata !3531, metadata !207), !dbg !3532
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !3533, metadata !207), !dbg !3534
  store i64 %buflen, i64* %buflen.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %buflen.addr, metadata !3535, metadata !207), !dbg !3536
  %0 = load i8*, i8** %ctx.addr, align 8, !dbg !3537
  %1 = bitcast i8* %0 to %struct.evp_md_ctx_st*, !dbg !3537
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !3538
  %3 = load i64, i64* %buflen.addr, align 8, !dbg !3539
  %call = call i32 @EVP_DigestUpdate(%struct.evp_md_ctx_st* %1, i8* %2, i64 %3), !dbg !3540
  ret i32 %call, !dbg !3541
}

declare i32 @EVP_DigestVerifyFinal(%struct.evp_md_ctx_st*, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @encode_test_init(%struct.evp_test_st* %t, i8* %encoding) #0 !dbg !3542 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %encoding.addr = alloca i8*, align 8
  %edata = alloca %struct.encode_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3543, metadata !207), !dbg !3544
  store i8* %encoding, i8** %encoding.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %encoding.addr, metadata !3545, metadata !207), !dbg !3546
  call void @llvm.dbg.declare(metadata %struct.encode_data_st** %edata, metadata !3547, metadata !207), !dbg !3558
  %call = call i8* @CRYPTO_zalloc(i64 40, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1773), !dbg !3559
  %0 = bitcast i8* %call to %struct.encode_data_st*, !dbg !3559
  store %struct.encode_data_st* %0, %struct.encode_data_st** %edata, align 8, !dbg !3561
  %1 = bitcast %struct.encode_data_st* %0 to i8*, !dbg !3562
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1773, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.119, i32 0, i32 0), i8* %1), !dbg !3563
  %tobool = icmp ne i32 %call1, 0, !dbg !3565
  br i1 %tobool, label %if.end, label %if.then, !dbg !3566

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3567
  br label %return, !dbg !3567

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %encoding.addr, align 8, !dbg !3568
  %call2 = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.120, i32 0, i32 0)) #7, !dbg !3570
  %cmp = icmp eq i32 %call2, 0, !dbg !3571
  br i1 %cmp, label %if.then3, label %if.else, !dbg !3572

if.then3:                                         ; preds = %if.end
  %3 = load %struct.encode_data_st*, %struct.encode_data_st** %edata, align 8, !dbg !3573
  %encoding4 = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %3, i32 0, i32 4, !dbg !3575
  store i32 0, i32* %encoding4, align 8, !dbg !3576
  br label %if.end22, !dbg !3577

if.else:                                          ; preds = %if.end
  %4 = load i8*, i8** %encoding.addr, align 8, !dbg !3578
  %call5 = call i32 @strcmp(i8* %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.121, i32 0, i32 0)) #7, !dbg !3581
  %cmp6 = icmp eq i32 %call5, 0, !dbg !3582
  br i1 %cmp6, label %if.then7, label %if.else9, !dbg !3581

if.then7:                                         ; preds = %if.else
  %5 = load %struct.encode_data_st*, %struct.encode_data_st** %edata, align 8, !dbg !3583
  %encoding8 = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %5, i32 0, i32 4, !dbg !3585
  store i32 1, i32* %encoding8, align 8, !dbg !3586
  br label %if.end21, !dbg !3587

if.else9:                                         ; preds = %if.else
  %6 = load i8*, i8** %encoding.addr, align 8, !dbg !3588
  %call10 = call i32 @strcmp(i8* %6, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.122, i32 0, i32 0)) #7, !dbg !3591
  %cmp11 = icmp eq i32 %call10, 0, !dbg !3592
  br i1 %cmp11, label %if.then12, label %if.else19, !dbg !3591

if.then12:                                        ; preds = %if.else9
  %7 = load %struct.encode_data_st*, %struct.encode_data_st** %edata, align 8, !dbg !3593
  %encoding13 = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %7, i32 0, i32 4, !dbg !3595
  store i32 2, i32* %encoding13, align 8, !dbg !3596
  %call14 = call i8* @CRYPTO_strdup(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1781), !dbg !3597
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3599
  %expected_err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %8, i32 0, i32 6, !dbg !3600
  store i8* %call14, i8** %expected_err, align 8, !dbg !3601
  %call15 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1781, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.123, i32 0, i32 0), i8* %call14), !dbg !3602
  %tobool16 = icmp ne i32 %call15, 0, !dbg !3604
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !3605

if.then17:                                        ; preds = %if.then12
  br label %err, !dbg !3606

if.end18:                                         ; preds = %if.then12
  br label %if.end20, !dbg !3607

if.else19:                                        ; preds = %if.else9
  %9 = load i8*, i8** %encoding.addr, align 8, !dbg !3608
  call void (i8*, i32, i8*, ...) @test_error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1786, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.125, i32 0, i32 0), i8* %9), !dbg !3610
  br label %err, !dbg !3611

if.end20:                                         ; preds = %if.end18
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then7
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then3
  %10 = load %struct.encode_data_st*, %struct.encode_data_st** %edata, align 8, !dbg !3612
  %11 = bitcast %struct.encode_data_st* %10 to i8*, !dbg !3612
  %12 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3613
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %12, i32 0, i32 9, !dbg !3614
  store i8* %11, i8** %data, align 8, !dbg !3615
  store i32 1, i32* %retval, align 4, !dbg !3616
  br label %return, !dbg !3616

err:                                              ; preds = %if.else19, %if.then17
  %13 = load %struct.encode_data_st*, %struct.encode_data_st** %edata, align 8, !dbg !3617
  %14 = bitcast %struct.encode_data_st* %13 to i8*, !dbg !3617
  call void @CRYPTO_free(i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1792), !dbg !3618
  store i32 0, i32* %retval, align 4, !dbg !3619
  br label %return, !dbg !3619

return:                                           ; preds = %err, %if.end22, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !3620
  ret i32 %15, !dbg !3620
}

; Function Attrs: nounwind uwtable
define internal void @encode_test_cleanup(%struct.evp_test_st* %t) #0 !dbg !3621 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %edata = alloca %struct.encode_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3622, metadata !207), !dbg !3623
  call void @llvm.dbg.declare(metadata %struct.encode_data_st** %edata, metadata !3624, metadata !207), !dbg !3625
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3626
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !3627
  %1 = load i8*, i8** %data, align 8, !dbg !3627
  %2 = bitcast i8* %1 to %struct.encode_data_st*, !dbg !3626
  store %struct.encode_data_st* %2, %struct.encode_data_st** %edata, align 8, !dbg !3625
  %3 = load %struct.encode_data_st*, %struct.encode_data_st** %edata, align 8, !dbg !3628
  %input = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %3, i32 0, i32 0, !dbg !3629
  %4 = load i8*, i8** %input, align 8, !dbg !3629
  call void @CRYPTO_free(i8* %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1800), !dbg !3630
  %5 = load %struct.encode_data_st*, %struct.encode_data_st** %edata, align 8, !dbg !3631
  %output = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %5, i32 0, i32 2, !dbg !3632
  %6 = load i8*, i8** %output, align 8, !dbg !3632
  call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1801), !dbg !3633
  %7 = load %struct.encode_data_st*, %struct.encode_data_st** %edata, align 8, !dbg !3634
  %8 = bitcast %struct.encode_data_st* %7 to i8*, !dbg !3635
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 40, i32 8, i1 false), !dbg !3635
  ret void, !dbg !3636
}

; Function Attrs: nounwind uwtable
define internal i32 @encode_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !3637 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %edata = alloca %struct.encode_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3638, metadata !207), !dbg !3639
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !3640, metadata !207), !dbg !3641
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !3642, metadata !207), !dbg !3643
  call void @llvm.dbg.declare(metadata %struct.encode_data_st** %edata, metadata !3644, metadata !207), !dbg !3645
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3646
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !3647
  %1 = load i8*, i8** %data, align 8, !dbg !3647
  %2 = bitcast i8* %1 to %struct.encode_data_st*, !dbg !3646
  store %struct.encode_data_st* %2, %struct.encode_data_st** %edata, align 8, !dbg !3645
  %3 = load i8*, i8** %keyword.addr, align 8, !dbg !3648
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.87, i32 0, i32 0)) #7, !dbg !3650
  %cmp = icmp eq i32 %call, 0, !dbg !3651
  br i1 %cmp, label %if.then, label %if.end, !dbg !3652

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %value.addr, align 8, !dbg !3653
  %5 = load %struct.encode_data_st*, %struct.encode_data_st** %edata, align 8, !dbg !3654
  %input = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %5, i32 0, i32 0, !dbg !3655
  %6 = load %struct.encode_data_st*, %struct.encode_data_st** %edata, align 8, !dbg !3656
  %input_len = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %6, i32 0, i32 1, !dbg !3657
  %call1 = call i32 @parse_bin(i8* %4, i8** %input, i64* %input_len), !dbg !3658
  store i32 %call1, i32* %retval, align 4, !dbg !3659
  br label %return, !dbg !3659

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %keyword.addr, align 8, !dbg !3660
  %call2 = call i32 @strcmp(i8* %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i32 0, i32 0)) #7, !dbg !3662
  %cmp3 = icmp eq i32 %call2, 0, !dbg !3663
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !3664

if.then4:                                         ; preds = %if.end
  %8 = load i8*, i8** %value.addr, align 8, !dbg !3665
  %9 = load %struct.encode_data_st*, %struct.encode_data_st** %edata, align 8, !dbg !3666
  %output = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %9, i32 0, i32 2, !dbg !3667
  %10 = load %struct.encode_data_st*, %struct.encode_data_st** %edata, align 8, !dbg !3668
  %output_len = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %10, i32 0, i32 3, !dbg !3669
  %call5 = call i32 @parse_bin(i8* %8, i8** %output, i64* %output_len), !dbg !3670
  store i32 %call5, i32* %retval, align 4, !dbg !3671
  br label %return, !dbg !3671

if.end6:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !3672
  br label %return, !dbg !3672

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !3673
  ret i32 %11, !dbg !3673
}

; Function Attrs: nounwind uwtable
define internal i32 @encode_test_run(%struct.evp_test_st* %t) #0 !dbg !3674 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %expected = alloca %struct.encode_data_st*, align 8
  %encode_out = alloca i8*, align 8
  %decode_out = alloca i8*, align 8
  %output_len = alloca i32, align 4
  %chunk_len = alloca i32, align 4
  %decode_ctx = alloca %struct.evp_Encode_Ctx_st*, align 8
  %encode_ctx = alloca %struct.evp_Encode_Ctx_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3675, metadata !207), !dbg !3676
  call void @llvm.dbg.declare(metadata %struct.encode_data_st** %expected, metadata !3677, metadata !207), !dbg !3678
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3679
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !3680
  %1 = load i8*, i8** %data, align 8, !dbg !3680
  %2 = bitcast i8* %1 to %struct.encode_data_st*, !dbg !3679
  store %struct.encode_data_st* %2, %struct.encode_data_st** %expected, align 8, !dbg !3678
  call void @llvm.dbg.declare(metadata i8** %encode_out, metadata !3681, metadata !207), !dbg !3682
  store i8* null, i8** %encode_out, align 8, !dbg !3682
  call void @llvm.dbg.declare(metadata i8** %decode_out, metadata !3683, metadata !207), !dbg !3684
  store i8* null, i8** %decode_out, align 8, !dbg !3684
  call void @llvm.dbg.declare(metadata i32* %output_len, metadata !3685, metadata !207), !dbg !3686
  call void @llvm.dbg.declare(metadata i32* %chunk_len, metadata !3687, metadata !207), !dbg !3688
  call void @llvm.dbg.declare(metadata %struct.evp_Encode_Ctx_st** %decode_ctx, metadata !3689, metadata !207), !dbg !3693
  store %struct.evp_Encode_Ctx_st* null, %struct.evp_Encode_Ctx_st** %decode_ctx, align 8, !dbg !3693
  call void @llvm.dbg.declare(metadata %struct.evp_Encode_Ctx_st** %encode_ctx, metadata !3694, metadata !207), !dbg !3695
  store %struct.evp_Encode_Ctx_st* null, %struct.evp_Encode_Ctx_st** %encode_ctx, align 8, !dbg !3695
  %call = call %struct.evp_Encode_Ctx_st* @EVP_ENCODE_CTX_new(), !dbg !3696
  store %struct.evp_Encode_Ctx_st* %call, %struct.evp_Encode_Ctx_st** %decode_ctx, align 8, !dbg !3698
  %3 = bitcast %struct.evp_Encode_Ctx_st* %call to i8*, !dbg !3699
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1824, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.126, i32 0, i32 0), i8* %3), !dbg !3700
  %tobool = icmp ne i32 %call1, 0, !dbg !3702
  br i1 %tobool, label %if.end, label %if.then, !dbg !3703

if.then:                                          ; preds = %entry
  %4 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3704
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %4, i32 0, i32 4, !dbg !3706
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.127, i32 0, i32 0), i8** %err, align 8, !dbg !3707
  br label %err73, !dbg !3708

if.end:                                           ; preds = %entry
  %5 = load %struct.encode_data_st*, %struct.encode_data_st** %expected, align 8, !dbg !3709
  %encoding = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %5, i32 0, i32 4, !dbg !3711
  %6 = load i32, i32* %encoding, align 8, !dbg !3711
  %cmp = icmp eq i32 %6, 0, !dbg !3712
  br i1 %cmp, label %if.then2, label %if.end32, !dbg !3713

if.then2:                                         ; preds = %if.end
  %call3 = call %struct.evp_Encode_Ctx_st* @EVP_ENCODE_CTX_new(), !dbg !3714
  store %struct.evp_Encode_Ctx_st* %call3, %struct.evp_Encode_Ctx_st** %encode_ctx, align 8, !dbg !3717
  %7 = bitcast %struct.evp_Encode_Ctx_st* %call3 to i8*, !dbg !3718
  %call4 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1831, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.128, i32 0, i32 0), i8* %7), !dbg !3719
  %tobool5 = icmp ne i32 %call4, 0, !dbg !3721
  br i1 %tobool5, label %lor.lhs.false, label %if.then15, !dbg !3722

lor.lhs.false:                                    ; preds = %if.then2
  %8 = load %struct.encode_data_st*, %struct.encode_data_st** %expected, align 8, !dbg !3723
  %input_len = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %8, i32 0, i32 1, !dbg !3725
  %9 = load i64, i64* %input_len, align 8, !dbg !3725
  %add = add i64 %9, 2, !dbg !3726
  %div = udiv i64 %add, 3, !dbg !3727
  %mul = mul i64 %div, 4, !dbg !3728
  %10 = load %struct.encode_data_st*, %struct.encode_data_st** %expected, align 8, !dbg !3729
  %input_len6 = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %10, i32 0, i32 1, !dbg !3730
  %11 = load i64, i64* %input_len6, align 8, !dbg !3730
  %div7 = udiv i64 %11, 48, !dbg !3731
  %add8 = add i64 %div7, 1, !dbg !3732
  %mul9 = mul i64 %add8, 2, !dbg !3733
  %add10 = add i64 %mul, %mul9, !dbg !3734
  %add11 = add i64 %add10, 80, !dbg !3735
  %call12 = call i8* @CRYPTO_malloc(i64 %add11, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1833), !dbg !3736
  store i8* %call12, i8** %encode_out, align 8, !dbg !3737
  %call13 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1833, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.129, i32 0, i32 0), i8* %call12), !dbg !3738
  %tobool14 = icmp ne i32 %call13, 0, !dbg !3740
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !3741

if.then15:                                        ; preds = %lor.lhs.false, %if.then2
  br label %err73, !dbg !3743

if.end16:                                         ; preds = %lor.lhs.false
  %12 = load %struct.evp_Encode_Ctx_st*, %struct.evp_Encode_Ctx_st** %encode_ctx, align 8, !dbg !3744
  call void @EVP_EncodeInit(%struct.evp_Encode_Ctx_st* %12), !dbg !3745
  %13 = load %struct.evp_Encode_Ctx_st*, %struct.evp_Encode_Ctx_st** %encode_ctx, align 8, !dbg !3746
  %14 = load i8*, i8** %encode_out, align 8, !dbg !3748
  %15 = load %struct.encode_data_st*, %struct.encode_data_st** %expected, align 8, !dbg !3749
  %input = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %15, i32 0, i32 0, !dbg !3750
  %16 = load i8*, i8** %input, align 8, !dbg !3750
  %17 = load %struct.encode_data_st*, %struct.encode_data_st** %expected, align 8, !dbg !3751
  %input_len17 = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %17, i32 0, i32 1, !dbg !3752
  %18 = load i64, i64* %input_len17, align 8, !dbg !3752
  %conv = trunc i64 %18 to i32, !dbg !3751
  %call18 = call i32 @EVP_EncodeUpdate(%struct.evp_Encode_Ctx_st* %13, i8* %14, i32* %chunk_len, i8* %16, i32 %conv), !dbg !3753
  %cmp19 = icmp ne i32 %call18, 0, !dbg !3754
  %conv20 = zext i1 %cmp19 to i32, !dbg !3754
  %call21 = call i32 @test_true(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1838, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.130, i32 0, i32 0), i32 %conv20), !dbg !3755
  %tobool22 = icmp ne i32 %call21, 0, !dbg !3757
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !3758

if.then23:                                        ; preds = %if.end16
  br label %err73, !dbg !3759

if.end24:                                         ; preds = %if.end16
  %19 = load i32, i32* %chunk_len, align 4, !dbg !3760
  store i32 %19, i32* %output_len, align 4, !dbg !3761
  %20 = load %struct.evp_Encode_Ctx_st*, %struct.evp_Encode_Ctx_st** %encode_ctx, align 8, !dbg !3762
  %21 = load i8*, i8** %encode_out, align 8, !dbg !3763
  %22 = load i32, i32* %chunk_len, align 4, !dbg !3764
  %idx.ext = sext i32 %22 to i64, !dbg !3765
  %add.ptr = getelementptr inbounds i8, i8* %21, i64 %idx.ext, !dbg !3765
  call void @EVP_EncodeFinal(%struct.evp_Encode_Ctx_st* %20, i8* %add.ptr, i32* %chunk_len), !dbg !3766
  %23 = load i32, i32* %chunk_len, align 4, !dbg !3767
  %24 = load i32, i32* %output_len, align 4, !dbg !3768
  %add25 = add nsw i32 %24, %23, !dbg !3768
  store i32 %add25, i32* %output_len, align 4, !dbg !3768
  %25 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3769
  %26 = load %struct.encode_data_st*, %struct.encode_data_st** %expected, align 8, !dbg !3771
  %output = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %26, i32 0, i32 2, !dbg !3772
  %27 = load i8*, i8** %output, align 8, !dbg !3772
  %28 = load %struct.encode_data_st*, %struct.encode_data_st** %expected, align 8, !dbg !3773
  %output_len26 = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %28, i32 0, i32 3, !dbg !3774
  %29 = load i64, i64* %output_len26, align 8, !dbg !3774
  %30 = load i8*, i8** %encode_out, align 8, !dbg !3775
  %31 = load i32, i32* %output_len, align 4, !dbg !3776
  %conv27 = sext i32 %31 to i64, !dbg !3776
  %call28 = call i32 @memory_err_compare(%struct.evp_test_st* %25, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.131, i32 0, i32 0), i8* %27, i64 %29, i8* %30, i64 %conv27), !dbg !3777
  %tobool29 = icmp ne i32 %call28, 0, !dbg !3777
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !3778

if.then30:                                        ; preds = %if.end24
  br label %err73, !dbg !3779

if.end31:                                         ; preds = %if.end24
  br label %if.end32, !dbg !3780

if.end32:                                         ; preds = %if.end31, %if.end
  %32 = load %struct.encode_data_st*, %struct.encode_data_st** %expected, align 8, !dbg !3781
  %output_len33 = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %32, i32 0, i32 3, !dbg !3783
  %33 = load i64, i64* %output_len33, align 8, !dbg !3783
  %add34 = add i64 %33, 3, !dbg !3784
  %div35 = udiv i64 %add34, 4, !dbg !3785
  %mul36 = mul i64 %div35, 3, !dbg !3786
  %add37 = add i64 %mul36, 80, !dbg !3787
  %call38 = call i8* @CRYPTO_malloc(i64 %add37, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1853), !dbg !3788
  store i8* %call38, i8** %decode_out, align 8, !dbg !3789
  %call39 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1853, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.132, i32 0, i32 0), i8* %call38), !dbg !3790
  %tobool40 = icmp ne i32 %call39, 0, !dbg !3792
  br i1 %tobool40, label %if.end42, label %if.then41, !dbg !3793

if.then41:                                        ; preds = %if.end32
  br label %err73, !dbg !3794

if.end42:                                         ; preds = %if.end32
  %34 = load %struct.evp_Encode_Ctx_st*, %struct.evp_Encode_Ctx_st** %decode_ctx, align 8, !dbg !3795
  call void @EVP_DecodeInit(%struct.evp_Encode_Ctx_st* %34), !dbg !3796
  %35 = load %struct.evp_Encode_Ctx_st*, %struct.evp_Encode_Ctx_st** %decode_ctx, align 8, !dbg !3797
  %36 = load i8*, i8** %decode_out, align 8, !dbg !3799
  %37 = load %struct.encode_data_st*, %struct.encode_data_st** %expected, align 8, !dbg !3800
  %output43 = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %37, i32 0, i32 2, !dbg !3801
  %38 = load i8*, i8** %output43, align 8, !dbg !3801
  %39 = load %struct.encode_data_st*, %struct.encode_data_st** %expected, align 8, !dbg !3802
  %output_len44 = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %39, i32 0, i32 3, !dbg !3803
  %40 = load i64, i64* %output_len44, align 8, !dbg !3803
  %conv45 = trunc i64 %40 to i32, !dbg !3802
  %call46 = call i32 @EVP_DecodeUpdate(%struct.evp_Encode_Ctx_st* %35, i8* %36, i32* %chunk_len, i8* %38, i32 %conv45), !dbg !3804
  %cmp47 = icmp slt i32 %call46, 0, !dbg !3805
  br i1 %cmp47, label %if.then49, label %if.end51, !dbg !3806

if.then49:                                        ; preds = %if.end42
  %41 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3807
  %err50 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %41, i32 0, i32 4, !dbg !3809
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.124, i32 0, i32 0), i8** %err50, align 8, !dbg !3810
  br label %err73, !dbg !3811

if.end51:                                         ; preds = %if.end42
  %42 = load i32, i32* %chunk_len, align 4, !dbg !3812
  store i32 %42, i32* %output_len, align 4, !dbg !3813
  %43 = load %struct.evp_Encode_Ctx_st*, %struct.evp_Encode_Ctx_st** %decode_ctx, align 8, !dbg !3814
  %44 = load i8*, i8** %decode_out, align 8, !dbg !3816
  %45 = load i32, i32* %chunk_len, align 4, !dbg !3817
  %idx.ext52 = sext i32 %45 to i64, !dbg !3818
  %add.ptr53 = getelementptr inbounds i8, i8* %44, i64 %idx.ext52, !dbg !3818
  %call54 = call i32 @EVP_DecodeFinal(%struct.evp_Encode_Ctx_st* %43, i8* %add.ptr53, i32* %chunk_len), !dbg !3819
  %cmp55 = icmp ne i32 %call54, 1, !dbg !3820
  br i1 %cmp55, label %if.then57, label %if.end59, !dbg !3821

if.then57:                                        ; preds = %if.end51
  %46 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3822
  %err58 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %46, i32 0, i32 4, !dbg !3824
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.124, i32 0, i32 0), i8** %err58, align 8, !dbg !3825
  br label %err73, !dbg !3826

if.end59:                                         ; preds = %if.end51
  %47 = load i32, i32* %chunk_len, align 4, !dbg !3827
  %48 = load i32, i32* %output_len, align 4, !dbg !3828
  %add60 = add nsw i32 %48, %47, !dbg !3828
  store i32 %add60, i32* %output_len, align 4, !dbg !3828
  %49 = load %struct.encode_data_st*, %struct.encode_data_st** %expected, align 8, !dbg !3829
  %encoding61 = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %49, i32 0, i32 4, !dbg !3831
  %50 = load i32, i32* %encoding61, align 8, !dbg !3831
  %cmp62 = icmp ne i32 %50, 2, !dbg !3832
  br i1 %cmp62, label %land.lhs.true, label %if.end71, !dbg !3833

land.lhs.true:                                    ; preds = %if.end59
  %51 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3834
  %52 = load %struct.encode_data_st*, %struct.encode_data_st** %expected, align 8, !dbg !3836
  %input64 = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %52, i32 0, i32 0, !dbg !3837
  %53 = load i8*, i8** %input64, align 8, !dbg !3837
  %54 = load %struct.encode_data_st*, %struct.encode_data_st** %expected, align 8, !dbg !3838
  %input_len65 = getelementptr inbounds %struct.encode_data_st, %struct.encode_data_st* %54, i32 0, i32 1, !dbg !3839
  %55 = load i64, i64* %input_len65, align 8, !dbg !3839
  %56 = load i8*, i8** %decode_out, align 8, !dbg !3840
  %57 = load i32, i32* %output_len, align 4, !dbg !3841
  %conv66 = sext i32 %57 to i64, !dbg !3841
  %call67 = call i32 @memory_err_compare(%struct.evp_test_st* %51, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.133, i32 0, i32 0), i8* %53, i64 %55, i8* %56, i64 %conv66), !dbg !3842
  %tobool68 = icmp ne i32 %call67, 0, !dbg !3842
  br i1 %tobool68, label %if.end71, label %if.then69, !dbg !3843

if.then69:                                        ; preds = %land.lhs.true
  %58 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3845
  %err70 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %58, i32 0, i32 4, !dbg !3847
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.133, i32 0, i32 0), i8** %err70, align 8, !dbg !3848
  br label %err73, !dbg !3849

if.end71:                                         ; preds = %land.lhs.true, %if.end59
  %59 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3850
  %err72 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %59, i32 0, i32 4, !dbg !3851
  store i8* null, i8** %err72, align 8, !dbg !3852
  br label %err73, !dbg !3850

err73:                                            ; preds = %if.end71, %if.then69, %if.then57, %if.then49, %if.then41, %if.then30, %if.then23, %if.then15, %if.then
  %60 = load i8*, i8** %encode_out, align 8, !dbg !3853
  call void @CRYPTO_free(i8* %60, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1880), !dbg !3854
  %61 = load i8*, i8** %decode_out, align 8, !dbg !3855
  call void @CRYPTO_free(i8* %61, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1881), !dbg !3856
  %62 = load %struct.evp_Encode_Ctx_st*, %struct.evp_Encode_Ctx_st** %decode_ctx, align 8, !dbg !3857
  call void @EVP_ENCODE_CTX_free(%struct.evp_Encode_Ctx_st* %62), !dbg !3858
  %63 = load %struct.evp_Encode_Ctx_st*, %struct.evp_Encode_Ctx_st** %encode_ctx, align 8, !dbg !3859
  call void @EVP_ENCODE_CTX_free(%struct.evp_Encode_Ctx_st* %63), !dbg !3860
  ret i32 1, !dbg !3861
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #4

declare %struct.evp_Encode_Ctx_st* @EVP_ENCODE_CTX_new() #2

declare void @EVP_EncodeInit(%struct.evp_Encode_Ctx_st*) #2

declare i32 @test_true(i8*, i32, i8*, i32) #2

declare i32 @EVP_EncodeUpdate(%struct.evp_Encode_Ctx_st*, i8*, i32*, i8*, i32) #2

declare void @EVP_EncodeFinal(%struct.evp_Encode_Ctx_st*, i8*, i32*) #2

declare void @EVP_DecodeInit(%struct.evp_Encode_Ctx_st*) #2

declare i32 @EVP_DecodeUpdate(%struct.evp_Encode_Ctx_st*, i8*, i32*, i8*, i32) #2

declare i32 @EVP_DecodeFinal(%struct.evp_Encode_Ctx_st*, i8*, i32*) #2

declare void @EVP_ENCODE_CTX_free(%struct.evp_Encode_Ctx_st*) #2

; Function Attrs: nounwind uwtable
define internal i32 @kdf_test_init(%struct.evp_test_st* %t, i8* %name) #0 !dbg !3862 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %name.addr = alloca i8*, align 8
  %kdata = alloca %struct.kdf_data_st*, align 8
  %kdf_nid = alloca i32, align 4
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3863, metadata !207), !dbg !3864
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !3865, metadata !207), !dbg !3866
  call void @llvm.dbg.declare(metadata %struct.kdf_data_st** %kdata, metadata !3867, metadata !207), !dbg !3878
  call void @llvm.dbg.declare(metadata i32* %kdf_nid, metadata !3879, metadata !207), !dbg !3880
  %0 = load i8*, i8** %name.addr, align 8, !dbg !3881
  %call = call i32 @OBJ_sn2nid(i8* %0), !dbg !3882
  store i32 %call, i32* %kdf_nid, align 4, !dbg !3880
  %1 = load i32, i32* %kdf_nid, align 4, !dbg !3883
  %cmp = icmp eq i32 %1, 0, !dbg !3885
  br i1 %cmp, label %if.then, label %if.end, !dbg !3886

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %name.addr, align 8, !dbg !3887
  %call1 = call i32 @OBJ_ln2nid(i8* %2), !dbg !3888
  store i32 %call1, i32* %kdf_nid, align 4, !dbg !3889
  br label %if.end, !dbg !3890

if.end:                                           ; preds = %if.then, %entry
  %call2 = call i8* @CRYPTO_zalloc(i64 24, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1927), !dbg !3891
  %3 = bitcast i8* %call2 to %struct.kdf_data_st*, !dbg !3891
  store %struct.kdf_data_st* %3, %struct.kdf_data_st** %kdata, align 8, !dbg !3893
  %4 = bitcast %struct.kdf_data_st* %3 to i8*, !dbg !3894
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1927, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.135, i32 0, i32 0), i8* %4), !dbg !3895
  %tobool = icmp ne i32 %call3, 0, !dbg !3897
  br i1 %tobool, label %if.end5, label %if.then4, !dbg !3898

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !3899
  br label %return, !dbg !3899

if.end5:                                          ; preds = %if.end
  %5 = load i32, i32* %kdf_nid, align 4, !dbg !3900
  %call6 = call %struct.evp_kdf_ctx_st* @EVP_KDF_CTX_new_id(i32 %5), !dbg !3901
  %6 = load %struct.kdf_data_st*, %struct.kdf_data_st** %kdata, align 8, !dbg !3902
  %ctx = getelementptr inbounds %struct.kdf_data_st, %struct.kdf_data_st* %6, i32 0, i32 0, !dbg !3903
  store %struct.evp_kdf_ctx_st* %call6, %struct.evp_kdf_ctx_st** %ctx, align 8, !dbg !3904
  %7 = load %struct.kdf_data_st*, %struct.kdf_data_st** %kdata, align 8, !dbg !3905
  %ctx7 = getelementptr inbounds %struct.kdf_data_st, %struct.kdf_data_st* %7, i32 0, i32 0, !dbg !3907
  %8 = load %struct.evp_kdf_ctx_st*, %struct.evp_kdf_ctx_st** %ctx7, align 8, !dbg !3907
  %cmp8 = icmp eq %struct.evp_kdf_ctx_st* %8, null, !dbg !3908
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !3909

if.then9:                                         ; preds = %if.end5
  %9 = load %struct.kdf_data_st*, %struct.kdf_data_st** %kdata, align 8, !dbg !3910
  %10 = bitcast %struct.kdf_data_st* %9 to i8*, !dbg !3910
  call void @CRYPTO_free(i8* %10, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1931), !dbg !3912
  store i32 0, i32* %retval, align 4, !dbg !3913
  br label %return, !dbg !3913

if.end10:                                         ; preds = %if.end5
  %11 = load %struct.kdf_data_st*, %struct.kdf_data_st** %kdata, align 8, !dbg !3914
  %12 = bitcast %struct.kdf_data_st* %11 to i8*, !dbg !3914
  %13 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3915
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %13, i32 0, i32 9, !dbg !3916
  store i8* %12, i8** %data, align 8, !dbg !3917
  store i32 1, i32* %retval, align 4, !dbg !3918
  br label %return, !dbg !3918

return:                                           ; preds = %if.end10, %if.then9, %if.then4
  %14 = load i32, i32* %retval, align 4, !dbg !3919
  ret i32 %14, !dbg !3919
}

; Function Attrs: nounwind uwtable
define internal void @kdf_test_cleanup(%struct.evp_test_st* %t) #0 !dbg !3920 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %kdata = alloca %struct.kdf_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3921, metadata !207), !dbg !3922
  call void @llvm.dbg.declare(metadata %struct.kdf_data_st** %kdata, metadata !3923, metadata !207), !dbg !3924
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3925
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !3926
  %1 = load i8*, i8** %data, align 8, !dbg !3926
  %2 = bitcast i8* %1 to %struct.kdf_data_st*, !dbg !3925
  store %struct.kdf_data_st* %2, %struct.kdf_data_st** %kdata, align 8, !dbg !3924
  %3 = load %struct.kdf_data_st*, %struct.kdf_data_st** %kdata, align 8, !dbg !3927
  %output = getelementptr inbounds %struct.kdf_data_st, %struct.kdf_data_st* %3, i32 0, i32 1, !dbg !3928
  %4 = load i8*, i8** %output, align 8, !dbg !3928
  call void @CRYPTO_free(i8* %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1941), !dbg !3929
  %5 = load %struct.kdf_data_st*, %struct.kdf_data_st** %kdata, align 8, !dbg !3930
  %ctx = getelementptr inbounds %struct.kdf_data_st, %struct.kdf_data_st* %5, i32 0, i32 0, !dbg !3931
  %6 = load %struct.evp_kdf_ctx_st*, %struct.evp_kdf_ctx_st** %ctx, align 8, !dbg !3931
  call void @EVP_KDF_CTX_free(%struct.evp_kdf_ctx_st* %6), !dbg !3932
  ret void, !dbg !3933
}

; Function Attrs: nounwind uwtable
define internal i32 @kdf_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !3934 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %kdata = alloca %struct.kdf_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3935, metadata !207), !dbg !3936
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !3937, metadata !207), !dbg !3938
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !3939, metadata !207), !dbg !3940
  call void @llvm.dbg.declare(metadata %struct.kdf_data_st** %kdata, metadata !3941, metadata !207), !dbg !3942
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3943
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !3944
  %1 = load i8*, i8** %data, align 8, !dbg !3944
  %2 = bitcast i8* %1 to %struct.kdf_data_st*, !dbg !3943
  store %struct.kdf_data_st* %2, %struct.kdf_data_st** %kdata, align 8, !dbg !3942
  %3 = load i8*, i8** %keyword.addr, align 8, !dbg !3945
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i32 0, i32 0)) #7, !dbg !3947
  %cmp = icmp eq i32 %call, 0, !dbg !3948
  br i1 %cmp, label %if.then, label %if.end, !dbg !3949

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %value.addr, align 8, !dbg !3950
  %5 = load %struct.kdf_data_st*, %struct.kdf_data_st** %kdata, align 8, !dbg !3951
  %output = getelementptr inbounds %struct.kdf_data_st, %struct.kdf_data_st* %5, i32 0, i32 1, !dbg !3952
  %6 = load %struct.kdf_data_st*, %struct.kdf_data_st** %kdata, align 8, !dbg !3953
  %output_len = getelementptr inbounds %struct.kdf_data_st, %struct.kdf_data_st* %6, i32 0, i32 2, !dbg !3954
  %call1 = call i32 @parse_bin(i8* %4, i8** %output, i64* %output_len), !dbg !3955
  store i32 %call1, i32* %retval, align 4, !dbg !3956
  br label %return, !dbg !3956

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %keyword.addr, align 8, !dbg !3957
  %call2 = call i32 @strncmp(i8* %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.107, i32 0, i32 0), i64 4) #7, !dbg !3959
  %cmp3 = icmp eq i32 %call2, 0, !dbg !3960
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !3961

if.then4:                                         ; preds = %if.end
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3962
  %9 = load %struct.kdf_data_st*, %struct.kdf_data_st** %kdata, align 8, !dbg !3963
  %ctx = getelementptr inbounds %struct.kdf_data_st, %struct.kdf_data_st* %9, i32 0, i32 0, !dbg !3964
  %10 = load %struct.evp_kdf_ctx_st*, %struct.evp_kdf_ctx_st** %ctx, align 8, !dbg !3964
  %11 = load i8*, i8** %value.addr, align 8, !dbg !3965
  %call5 = call i32 @kdf_test_ctrl(%struct.evp_test_st* %8, %struct.evp_kdf_ctx_st* %10, i8* %11), !dbg !3966
  store i32 %call5, i32* %retval, align 4, !dbg !3967
  br label %return, !dbg !3967

if.end6:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !3968
  br label %return, !dbg !3968

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !3969
  ret i32 %12, !dbg !3969
}

; Function Attrs: nounwind uwtable
define internal i32 @kdf_test_run(%struct.evp_test_st* %t) #0 !dbg !3970 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %expected = alloca %struct.kdf_data_st*, align 8
  %got = alloca i8*, align 8
  %got_len = alloca i64, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !3971, metadata !207), !dbg !3972
  call void @llvm.dbg.declare(metadata %struct.kdf_data_st** %expected, metadata !3973, metadata !207), !dbg !3974
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3975
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !3976
  %1 = load i8*, i8** %data, align 8, !dbg !3976
  %2 = bitcast i8* %1 to %struct.kdf_data_st*, !dbg !3975
  store %struct.kdf_data_st* %2, %struct.kdf_data_st** %expected, align 8, !dbg !3974
  call void @llvm.dbg.declare(metadata i8** %got, metadata !3977, metadata !207), !dbg !3978
  store i8* null, i8** %got, align 8, !dbg !3978
  call void @llvm.dbg.declare(metadata i64* %got_len, metadata !3979, metadata !207), !dbg !3980
  %3 = load %struct.kdf_data_st*, %struct.kdf_data_st** %expected, align 8, !dbg !3981
  %output_len = getelementptr inbounds %struct.kdf_data_st, %struct.kdf_data_st* %3, i32 0, i32 2, !dbg !3982
  %4 = load i64, i64* %output_len, align 8, !dbg !3982
  store i64 %4, i64* %got_len, align 8, !dbg !3980
  %5 = load i64, i64* %got_len, align 8, !dbg !3983
  %call = call i8* @CRYPTO_malloc(i64 %5, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1998), !dbg !3985
  store i8* %call, i8** %got, align 8, !dbg !3986
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1998, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.112, i32 0, i32 0), i8* %call), !dbg !3987
  %tobool = icmp ne i32 %call1, 0, !dbg !3989
  br i1 %tobool, label %if.end, label %if.then, !dbg !3990

if.then:                                          ; preds = %entry
  %6 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !3991
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %6, i32 0, i32 4, !dbg !3993
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.127, i32 0, i32 0), i8** %err, align 8, !dbg !3994
  br label %err12, !dbg !3995

if.end:                                           ; preds = %entry
  %7 = load %struct.kdf_data_st*, %struct.kdf_data_st** %expected, align 8, !dbg !3996
  %ctx = getelementptr inbounds %struct.kdf_data_st, %struct.kdf_data_st* %7, i32 0, i32 0, !dbg !3998
  %8 = load %struct.evp_kdf_ctx_st*, %struct.evp_kdf_ctx_st** %ctx, align 8, !dbg !3998
  %9 = load i8*, i8** %got, align 8, !dbg !3999
  %10 = load i64, i64* %got_len, align 8, !dbg !4000
  %call2 = call i32 @EVP_KDF_derive(%struct.evp_kdf_ctx_st* %8, i8* %9, i64 %10), !dbg !4001
  %cmp = icmp sle i32 %call2, 0, !dbg !4002
  br i1 %cmp, label %if.then3, label %if.end5, !dbg !4003

if.then3:                                         ; preds = %if.end
  %11 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4004
  %err4 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %11, i32 0, i32 4, !dbg !4006
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.138, i32 0, i32 0), i8** %err4, align 8, !dbg !4007
  br label %err12, !dbg !4008

if.end5:                                          ; preds = %if.end
  %12 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4009
  %13 = load %struct.kdf_data_st*, %struct.kdf_data_st** %expected, align 8, !dbg !4011
  %output = getelementptr inbounds %struct.kdf_data_st, %struct.kdf_data_st* %13, i32 0, i32 1, !dbg !4012
  %14 = load i8*, i8** %output, align 8, !dbg !4012
  %15 = load %struct.kdf_data_st*, %struct.kdf_data_st** %expected, align 8, !dbg !4013
  %output_len6 = getelementptr inbounds %struct.kdf_data_st, %struct.kdf_data_st* %15, i32 0, i32 2, !dbg !4014
  %16 = load i64, i64* %output_len6, align 8, !dbg !4014
  %17 = load i8*, i8** %got, align 8, !dbg !4015
  %18 = load i64, i64* %got_len, align 8, !dbg !4016
  %call7 = call i32 @memory_err_compare(%struct.evp_test_st* %12, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.139, i32 0, i32 0), i8* %14, i64 %16, i8* %17, i64 %18), !dbg !4017
  %tobool8 = icmp ne i32 %call7, 0, !dbg !4017
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !4018

if.then9:                                         ; preds = %if.end5
  br label %err12, !dbg !4019

if.end10:                                         ; preds = %if.end5
  %19 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4020
  %err11 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %19, i32 0, i32 4, !dbg !4021
  store i8* null, i8** %err11, align 8, !dbg !4022
  br label %err12, !dbg !4020

err12:                                            ; preds = %if.end10, %if.then9, %if.then3, %if.then
  %20 = load i8*, i8** %got, align 8, !dbg !4023
  call void @CRYPTO_free(i8* %20, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2014), !dbg !4024
  ret i32 1, !dbg !4025
}

declare %struct.evp_kdf_ctx_st* @EVP_KDF_CTX_new_id(i32) #2

declare void @EVP_KDF_CTX_free(%struct.evp_kdf_ctx_st*) #2

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #3

; Function Attrs: nounwind uwtable
define internal i32 @kdf_test_ctrl(%struct.evp_test_st* %t, %struct.evp_kdf_ctx_st* %kctx, i8* %value) #0 !dbg !4026 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %kctx.addr = alloca %struct.evp_kdf_ctx_st*, align 8
  %value.addr = alloca i8*, align 8
  %rv = alloca i32, align 4
  %p = alloca i8*, align 8
  %tmpval = alloca i8*, align 8
  %nid = alloca i32, align 4
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4029, metadata !207), !dbg !4030
  store %struct.evp_kdf_ctx_st* %kctx, %struct.evp_kdf_ctx_st** %kctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_kdf_ctx_st** %kctx.addr, metadata !4031, metadata !207), !dbg !4032
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !4033, metadata !207), !dbg !4034
  call void @llvm.dbg.declare(metadata i32* %rv, metadata !4035, metadata !207), !dbg !4036
  call void @llvm.dbg.declare(metadata i8** %p, metadata !4037, metadata !207), !dbg !4038
  call void @llvm.dbg.declare(metadata i8** %tmpval, metadata !4039, metadata !207), !dbg !4040
  %0 = load i8*, i8** %value.addr, align 8, !dbg !4041
  %call = call i8* @CRYPTO_strdup(i8* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1951), !dbg !4043
  store i8* %call, i8** %tmpval, align 8, !dbg !4044
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1951, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.108, i32 0, i32 0), i8* %call), !dbg !4045
  %tobool = icmp ne i32 %call1, 0, !dbg !4047
  br i1 %tobool, label %if.end, label %if.then, !dbg !4048

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4049
  br label %return, !dbg !4049

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %tmpval, align 8, !dbg !4050
  %call2 = call i8* @strchr(i8* %1, i32 58) #7, !dbg !4051
  store i8* %call2, i8** %p, align 8, !dbg !4052
  %2 = load i8*, i8** %p, align 8, !dbg !4053
  %cmp = icmp ne i8* %2, null, !dbg !4055
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !4056

if.then3:                                         ; preds = %if.end
  %3 = load i8*, i8** %p, align 8, !dbg !4057
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !4057
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !4057
  store i8 0, i8* %3, align 1, !dbg !4058
  br label %if.end4, !dbg !4059

if.end4:                                          ; preds = %if.then3, %if.end
  %4 = load %struct.evp_kdf_ctx_st*, %struct.evp_kdf_ctx_st** %kctx.addr, align 8, !dbg !4060
  %5 = load i8*, i8** %tmpval, align 8, !dbg !4061
  %6 = load i8*, i8** %p, align 8, !dbg !4062
  %call5 = call i32 @EVP_KDF_ctrl_str(%struct.evp_kdf_ctx_st* %4, i8* %5, i8* %6), !dbg !4063
  store i32 %call5, i32* %rv, align 4, !dbg !4064
  %7 = load i32, i32* %rv, align 4, !dbg !4065
  %cmp6 = icmp eq i32 %7, -2, !dbg !4067
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !4068

if.then7:                                         ; preds = %if.end4
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4069
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %8, i32 0, i32 4, !dbg !4071
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.136, i32 0, i32 0), i8** %err, align 8, !dbg !4072
  store i32 1, i32* %rv, align 4, !dbg !4073
  br label %if.end30, !dbg !4074

if.else:                                          ; preds = %if.end4
  %9 = load i8*, i8** %p, align 8, !dbg !4075
  %cmp8 = icmp ne i8* %9, null, !dbg !4078
  br i1 %cmp8, label %land.lhs.true, label %if.end29, !dbg !4079

land.lhs.true:                                    ; preds = %if.else
  %10 = load i32, i32* %rv, align 4, !dbg !4080
  %cmp9 = icmp sle i32 %10, 0, !dbg !4082
  br i1 %cmp9, label %if.then10, label %if.end29, !dbg !4083

if.then10:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %nid, metadata !4084, metadata !207), !dbg !4086
  %11 = load i8*, i8** %p, align 8, !dbg !4087
  %call11 = call i32 @OBJ_sn2nid(i8* %11), !dbg !4088
  store i32 %call11, i32* %nid, align 4, !dbg !4086
  %12 = load i32, i32* %nid, align 4, !dbg !4089
  %cmp12 = icmp eq i32 %12, 0, !dbg !4091
  br i1 %cmp12, label %if.then13, label %if.end15, !dbg !4092

if.then13:                                        ; preds = %if.then10
  %13 = load i8*, i8** %p, align 8, !dbg !4093
  %call14 = call i32 @OBJ_ln2nid(i8* %13), !dbg !4094
  store i32 %call14, i32* %nid, align 4, !dbg !4095
  br label %if.end15, !dbg !4096

if.end15:                                         ; preds = %if.then13, %if.then10
  %14 = load i32, i32* %nid, align 4, !dbg !4097
  %cmp16 = icmp ne i32 %14, 0, !dbg !4099
  br i1 %cmp16, label %land.lhs.true17, label %if.else26, !dbg !4100

land.lhs.true17:                                  ; preds = %if.end15
  %15 = load i32, i32* %nid, align 4, !dbg !4101
  %call18 = call i8* @OBJ_nid2sn(i32 %15), !dbg !4103
  %call19 = call %struct.evp_md_st* @EVP_get_digestbyname(i8* %call18), !dbg !4104
  %cmp20 = icmp eq %struct.evp_md_st* %call19, null, !dbg !4106
  br i1 %cmp20, label %land.lhs.true21, label %if.else26, !dbg !4107

land.lhs.true21:                                  ; preds = %land.lhs.true17
  %16 = load i32, i32* %nid, align 4, !dbg !4108
  %call22 = call i8* @OBJ_nid2sn(i32 %16), !dbg !4109
  %call23 = call %struct.evp_cipher_st* @EVP_get_cipherbyname(i8* %call22), !dbg !4110
  %cmp24 = icmp eq %struct.evp_cipher_st* %call23, null, !dbg !4111
  br i1 %cmp24, label %if.then25, label %if.else26, !dbg !4112

if.then25:                                        ; preds = %land.lhs.true21
  %17 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4114
  %skip = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %17, i32 0, i32 2, !dbg !4116
  store i32 1, i32* %skip, align 8, !dbg !4117
  store i32 1, i32* %rv, align 4, !dbg !4118
  br label %if.end28, !dbg !4119

if.else26:                                        ; preds = %land.lhs.true21, %land.lhs.true17, %if.end15
  %18 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4120
  %err27 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %18, i32 0, i32 4, !dbg !4122
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.137, i32 0, i32 0), i8** %err27, align 8, !dbg !4123
  store i32 1, i32* %rv, align 4, !dbg !4124
  br label %if.end28

if.end28:                                         ; preds = %if.else26, %if.then25
  br label %if.end29, !dbg !4125

if.end29:                                         ; preds = %if.end28, %land.lhs.true, %if.else
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then7
  %19 = load i8*, i8** %tmpval, align 8, !dbg !4126
  call void @CRYPTO_free(i8* %19, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1976), !dbg !4127
  %20 = load i32, i32* %rv, align 4, !dbg !4128
  %cmp31 = icmp sgt i32 %20, 0, !dbg !4129
  %conv = zext i1 %cmp31 to i32, !dbg !4129
  store i32 %conv, i32* %retval, align 4, !dbg !4130
  br label %return, !dbg !4130

return:                                           ; preds = %if.end30, %if.then
  %21 = load i32, i32* %retval, align 4, !dbg !4131
  ret i32 %21, !dbg !4131
}

declare i32 @EVP_KDF_ctrl_str(%struct.evp_kdf_ctx_st*, i8*, i8*) #2

declare i32 @EVP_KDF_derive(%struct.evp_kdf_ctx_st*, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @pkey_kdf_test_init(%struct.evp_test_st* %t, i8* %name) #0 !dbg !4132 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %name.addr = alloca i8*, align 8
  %kdata = alloca %struct.pkey_kdf_data_st*, align 8
  %kdf_nid = alloca i32, align 4
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4133, metadata !207), !dbg !4134
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !4135, metadata !207), !dbg !4136
  call void @llvm.dbg.declare(metadata %struct.pkey_kdf_data_st** %kdata, metadata !4137, metadata !207), !dbg !4145
  call void @llvm.dbg.declare(metadata i32* %kdf_nid, metadata !4146, metadata !207), !dbg !4147
  %0 = load i8*, i8** %name.addr, align 8, !dbg !4148
  %call = call i32 @OBJ_sn2nid(i8* %0), !dbg !4149
  store i32 %call, i32* %kdf_nid, align 4, !dbg !4147
  %1 = load i32, i32* %kdf_nid, align 4, !dbg !4150
  %cmp = icmp eq i32 %1, 0, !dbg !4152
  br i1 %cmp, label %if.then, label %if.end, !dbg !4153

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %name.addr, align 8, !dbg !4154
  %call1 = call i32 @OBJ_ln2nid(i8* %2), !dbg !4155
  store i32 %call1, i32* %kdf_nid, align 4, !dbg !4156
  br label %if.end, !dbg !4157

if.end:                                           ; preds = %if.then, %entry
  %call2 = call i8* @CRYPTO_zalloc(i64 24, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2058), !dbg !4158
  %3 = bitcast i8* %call2 to %struct.pkey_kdf_data_st*, !dbg !4158
  store %struct.pkey_kdf_data_st* %3, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4160
  %4 = bitcast %struct.pkey_kdf_data_st* %3 to i8*, !dbg !4161
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2058, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.135, i32 0, i32 0), i8* %4), !dbg !4162
  %tobool = icmp ne i32 %call3, 0, !dbg !4164
  br i1 %tobool, label %if.end5, label %if.then4, !dbg !4165

if.then4:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !4166
  br label %return, !dbg !4166

if.end5:                                          ; preds = %if.end
  %5 = load i32, i32* %kdf_nid, align 4, !dbg !4167
  %call6 = call %struct.evp_pkey_ctx_st* @EVP_PKEY_CTX_new_id(i32 %5, %struct.engine_st* null), !dbg !4168
  %6 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4169
  %ctx = getelementptr inbounds %struct.pkey_kdf_data_st, %struct.pkey_kdf_data_st* %6, i32 0, i32 0, !dbg !4170
  store %struct.evp_pkey_ctx_st* %call6, %struct.evp_pkey_ctx_st** %ctx, align 8, !dbg !4171
  %7 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4172
  %ctx7 = getelementptr inbounds %struct.pkey_kdf_data_st, %struct.pkey_kdf_data_st* %7, i32 0, i32 0, !dbg !4174
  %8 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx7, align 8, !dbg !4174
  %cmp8 = icmp eq %struct.evp_pkey_ctx_st* %8, null, !dbg !4175
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !4176

if.then9:                                         ; preds = %if.end5
  %9 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4177
  %10 = bitcast %struct.pkey_kdf_data_st* %9 to i8*, !dbg !4177
  call void @CRYPTO_free(i8* %10, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2062), !dbg !4179
  store i32 0, i32* %retval, align 4, !dbg !4180
  br label %return, !dbg !4180

if.end10:                                         ; preds = %if.end5
  %11 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4181
  %ctx11 = getelementptr inbounds %struct.pkey_kdf_data_st, %struct.pkey_kdf_data_st* %11, i32 0, i32 0, !dbg !4183
  %12 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx11, align 8, !dbg !4183
  %call12 = call i32 @EVP_PKEY_derive_init(%struct.evp_pkey_ctx_st* %12), !dbg !4184
  %cmp13 = icmp sle i32 %call12, 0, !dbg !4185
  br i1 %cmp13, label %if.then14, label %if.end16, !dbg !4186

if.then14:                                        ; preds = %if.end10
  %13 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4187
  %ctx15 = getelementptr inbounds %struct.pkey_kdf_data_st, %struct.pkey_kdf_data_st* %13, i32 0, i32 0, !dbg !4189
  %14 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx15, align 8, !dbg !4189
  call void @EVP_PKEY_CTX_free(%struct.evp_pkey_ctx_st* %14), !dbg !4190
  %15 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4191
  %16 = bitcast %struct.pkey_kdf_data_st* %15 to i8*, !dbg !4191
  call void @CRYPTO_free(i8* %16, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2067), !dbg !4192
  store i32 0, i32* %retval, align 4, !dbg !4193
  br label %return, !dbg !4193

if.end16:                                         ; preds = %if.end10
  %17 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4194
  %18 = bitcast %struct.pkey_kdf_data_st* %17 to i8*, !dbg !4194
  %19 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4195
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %19, i32 0, i32 9, !dbg !4196
  store i8* %18, i8** %data, align 8, !dbg !4197
  store i32 1, i32* %retval, align 4, !dbg !4198
  br label %return, !dbg !4198

return:                                           ; preds = %if.end16, %if.then14, %if.then9, %if.then4
  %20 = load i32, i32* %retval, align 4, !dbg !4199
  ret i32 %20, !dbg !4199
}

; Function Attrs: nounwind uwtable
define internal void @pkey_kdf_test_cleanup(%struct.evp_test_st* %t) #0 !dbg !4200 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %kdata = alloca %struct.pkey_kdf_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4201, metadata !207), !dbg !4202
  call void @llvm.dbg.declare(metadata %struct.pkey_kdf_data_st** %kdata, metadata !4203, metadata !207), !dbg !4204
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4205
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !4206
  %1 = load i8*, i8** %data, align 8, !dbg !4206
  %2 = bitcast i8* %1 to %struct.pkey_kdf_data_st*, !dbg !4205
  store %struct.pkey_kdf_data_st* %2, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4204
  %3 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4207
  %output = getelementptr inbounds %struct.pkey_kdf_data_st, %struct.pkey_kdf_data_st* %3, i32 0, i32 1, !dbg !4208
  %4 = load i8*, i8** %output, align 8, !dbg !4208
  call void @CRYPTO_free(i8* %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2077), !dbg !4209
  %5 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4210
  %ctx = getelementptr inbounds %struct.pkey_kdf_data_st, %struct.pkey_kdf_data_st* %5, i32 0, i32 0, !dbg !4211
  %6 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx, align 8, !dbg !4211
  call void @EVP_PKEY_CTX_free(%struct.evp_pkey_ctx_st* %6), !dbg !4212
  ret void, !dbg !4213
}

; Function Attrs: nounwind uwtable
define internal i32 @pkey_kdf_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !4214 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %kdata = alloca %struct.pkey_kdf_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4215, metadata !207), !dbg !4216
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !4217, metadata !207), !dbg !4218
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !4219, metadata !207), !dbg !4220
  call void @llvm.dbg.declare(metadata %struct.pkey_kdf_data_st** %kdata, metadata !4221, metadata !207), !dbg !4222
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4223
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !4224
  %1 = load i8*, i8** %data, align 8, !dbg !4224
  %2 = bitcast i8* %1 to %struct.pkey_kdf_data_st*, !dbg !4223
  store %struct.pkey_kdf_data_st* %2, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4222
  %3 = load i8*, i8** %keyword.addr, align 8, !dbg !4225
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i32 0, i32 0)) #7, !dbg !4227
  %cmp = icmp eq i32 %call, 0, !dbg !4228
  br i1 %cmp, label %if.then, label %if.end, !dbg !4229

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %value.addr, align 8, !dbg !4230
  %5 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4231
  %output = getelementptr inbounds %struct.pkey_kdf_data_st, %struct.pkey_kdf_data_st* %5, i32 0, i32 1, !dbg !4232
  %6 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4233
  %output_len = getelementptr inbounds %struct.pkey_kdf_data_st, %struct.pkey_kdf_data_st* %6, i32 0, i32 2, !dbg !4234
  %call1 = call i32 @parse_bin(i8* %4, i8** %output, i64* %output_len), !dbg !4235
  store i32 %call1, i32* %retval, align 4, !dbg !4236
  br label %return, !dbg !4236

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %keyword.addr, align 8, !dbg !4237
  %call2 = call i32 @strncmp(i8* %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.107, i32 0, i32 0), i64 4) #7, !dbg !4239
  %cmp3 = icmp eq i32 %call2, 0, !dbg !4240
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !4241

if.then4:                                         ; preds = %if.end
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4242
  %9 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %kdata, align 8, !dbg !4243
  %ctx = getelementptr inbounds %struct.pkey_kdf_data_st, %struct.pkey_kdf_data_st* %9, i32 0, i32 0, !dbg !4244
  %10 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx, align 8, !dbg !4244
  %11 = load i8*, i8** %value.addr, align 8, !dbg !4245
  %call5 = call i32 @pkey_test_ctrl(%struct.evp_test_st* %8, %struct.evp_pkey_ctx_st* %10, i8* %11), !dbg !4246
  store i32 %call5, i32* %retval, align 4, !dbg !4247
  br label %return, !dbg !4247

if.end6:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !4248
  br label %return, !dbg !4248

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !4249
  ret i32 %12, !dbg !4249
}

; Function Attrs: nounwind uwtable
define internal i32 @pkey_kdf_test_run(%struct.evp_test_st* %t) #0 !dbg !4250 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %expected = alloca %struct.pkey_kdf_data_st*, align 8
  %got = alloca i8*, align 8
  %got_len = alloca i64, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4251, metadata !207), !dbg !4252
  call void @llvm.dbg.declare(metadata %struct.pkey_kdf_data_st** %expected, metadata !4253, metadata !207), !dbg !4254
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4255
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !4256
  %1 = load i8*, i8** %data, align 8, !dbg !4256
  %2 = bitcast i8* %1 to %struct.pkey_kdf_data_st*, !dbg !4255
  store %struct.pkey_kdf_data_st* %2, %struct.pkey_kdf_data_st** %expected, align 8, !dbg !4254
  call void @llvm.dbg.declare(metadata i8** %got, metadata !4257, metadata !207), !dbg !4258
  store i8* null, i8** %got, align 8, !dbg !4258
  call void @llvm.dbg.declare(metadata i64* %got_len, metadata !4259, metadata !207), !dbg !4260
  %3 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %expected, align 8, !dbg !4261
  %output_len = getelementptr inbounds %struct.pkey_kdf_data_st, %struct.pkey_kdf_data_st* %3, i32 0, i32 2, !dbg !4262
  %4 = load i64, i64* %output_len, align 8, !dbg !4262
  store i64 %4, i64* %got_len, align 8, !dbg !4260
  %5 = load i64, i64* %got_len, align 8, !dbg !4263
  %call = call i8* @CRYPTO_malloc(i64 %5, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2099), !dbg !4265
  store i8* %call, i8** %got, align 8, !dbg !4266
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2099, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.112, i32 0, i32 0), i8* %call), !dbg !4267
  %tobool = icmp ne i32 %call1, 0, !dbg !4269
  br i1 %tobool, label %if.end, label %if.then, !dbg !4270

if.then:                                          ; preds = %entry
  %6 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4271
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %6, i32 0, i32 4, !dbg !4273
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.127, i32 0, i32 0), i8** %err, align 8, !dbg !4274
  br label %err13, !dbg !4275

if.end:                                           ; preds = %entry
  %7 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %expected, align 8, !dbg !4276
  %ctx = getelementptr inbounds %struct.pkey_kdf_data_st, %struct.pkey_kdf_data_st* %7, i32 0, i32 0, !dbg !4278
  %8 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx, align 8, !dbg !4278
  %9 = load i8*, i8** %got, align 8, !dbg !4279
  %call2 = call i32 @EVP_PKEY_derive(%struct.evp_pkey_ctx_st* %8, i8* %9, i64* %got_len), !dbg !4280
  %cmp = icmp sle i32 %call2, 0, !dbg !4281
  br i1 %cmp, label %if.then3, label %if.end5, !dbg !4282

if.then3:                                         ; preds = %if.end
  %10 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4283
  %err4 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %10, i32 0, i32 4, !dbg !4285
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.138, i32 0, i32 0), i8** %err4, align 8, !dbg !4286
  br label %err13, !dbg !4287

if.end5:                                          ; preds = %if.end
  %11 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %expected, align 8, !dbg !4288
  %output = getelementptr inbounds %struct.pkey_kdf_data_st, %struct.pkey_kdf_data_st* %11, i32 0, i32 1, !dbg !4290
  %12 = load i8*, i8** %output, align 8, !dbg !4290
  %13 = load %struct.pkey_kdf_data_st*, %struct.pkey_kdf_data_st** %expected, align 8, !dbg !4291
  %output_len6 = getelementptr inbounds %struct.pkey_kdf_data_st, %struct.pkey_kdf_data_st* %13, i32 0, i32 2, !dbg !4292
  %14 = load i64, i64* %output_len6, align 8, !dbg !4292
  %15 = load i8*, i8** %got, align 8, !dbg !4293
  %16 = load i64, i64* %got_len, align 8, !dbg !4294
  %call7 = call i32 @test_mem_eq(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2107, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.84, i32 0, i32 0), i8* %12, i64 %14, i8* %15, i64 %16), !dbg !4295
  %tobool8 = icmp ne i32 %call7, 0, !dbg !4295
  br i1 %tobool8, label %if.end11, label %if.then9, !dbg !4296

if.then9:                                         ; preds = %if.end5
  %17 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4297
  %err10 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %17, i32 0, i32 4, !dbg !4299
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.139, i32 0, i32 0), i8** %err10, align 8, !dbg !4300
  br label %err13, !dbg !4301

if.end11:                                         ; preds = %if.end5
  %18 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4302
  %err12 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %18, i32 0, i32 4, !dbg !4303
  store i8* null, i8** %err12, align 8, !dbg !4304
  br label %err13, !dbg !4302

err13:                                            ; preds = %if.end11, %if.then9, %if.then3, %if.then
  %19 = load i8*, i8** %got, align 8, !dbg !4305
  call void @CRYPTO_free(i8* %19, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2114), !dbg !4306
  ret i32 1, !dbg !4307
}

declare %struct.evp_pkey_ctx_st* @EVP_PKEY_CTX_new_id(i32, %struct.engine_st*) #2

declare i32 @EVP_PKEY_derive_init(%struct.evp_pkey_ctx_st*) #2

declare void @EVP_PKEY_CTX_free(%struct.evp_pkey_ctx_st*) #2

declare i32 @EVP_PKEY_derive(%struct.evp_pkey_ctx_st*, i8*, i64*) #2

; Function Attrs: nounwind uwtable
define internal i32 @keypair_test_init(%struct.evp_test_st* %t, i8* %pair) #0 !dbg !4308 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %pair.addr = alloca i8*, align 8
  %data = alloca %struct.keypair_test_data_st*, align 8
  %rv = alloca i32, align 4
  %pk = alloca %struct.evp_pkey_st*, align 8
  %pubk = alloca %struct.evp_pkey_st*, align 8
  %pub = alloca i8*, align 8
  %priv = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4309, metadata !207), !dbg !4310
  store i8* %pair, i8** %pair.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %pair.addr, metadata !4311, metadata !207), !dbg !4312
  call void @llvm.dbg.declare(metadata %struct.keypair_test_data_st** %data, metadata !4313, metadata !207), !dbg !4320
  call void @llvm.dbg.declare(metadata i32* %rv, metadata !4321, metadata !207), !dbg !4322
  store i32 0, i32* %rv, align 4, !dbg !4322
  call void @llvm.dbg.declare(metadata %struct.evp_pkey_st** %pk, metadata !4323, metadata !207), !dbg !4324
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %pk, align 8, !dbg !4324
  call void @llvm.dbg.declare(metadata %struct.evp_pkey_st** %pubk, metadata !4325, metadata !207), !dbg !4326
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %pubk, align 8, !dbg !4326
  call void @llvm.dbg.declare(metadata i8** %pub, metadata !4327, metadata !207), !dbg !4328
  call void @llvm.dbg.declare(metadata i8** %priv, metadata !4329, metadata !207), !dbg !4330
  store i8* null, i8** %priv, align 8, !dbg !4330
  %0 = load i8*, i8** %pair.addr, align 8, !dbg !4331
  %call = call i8* @CRYPTO_strdup(i8* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2144), !dbg !4333
  store i8* %call, i8** %priv, align 8, !dbg !4334
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2144, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.143, i32 0, i32 0), i8* %call), !dbg !4335
  %tobool = icmp ne i32 %call1, 0, !dbg !4337
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !4338

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %priv, align 8, !dbg !4339
  %call2 = call i8* @strchr(i8* %1, i32 58) #7, !dbg !4341
  store i8* %call2, i8** %pub, align 8, !dbg !4342
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2145, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.144, i32 0, i32 0), i8* %call2), !dbg !4343
  %tobool4 = icmp ne i32 %call3, 0, !dbg !4345
  br i1 %tobool4, label %if.end, label %if.then, !dbg !4346

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4348
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %2, i32 0, i32 4, !dbg !4350
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.145, i32 0, i32 0), i8** %err, align 8, !dbg !4351
  br label %end, !dbg !4352

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i8*, i8** %pub, align 8, !dbg !4353
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !4353
  store i8* %incdec.ptr, i8** %pub, align 8, !dbg !4353
  store i8 0, i8* %3, align 1, !dbg !4354
  %4 = load i8*, i8** %priv, align 8, !dbg !4355
  %5 = load %struct.key_list_st*, %struct.key_list_st** @private_keys, align 8, !dbg !4357
  %call5 = call i32 @find_key(%struct.evp_pkey_st** %pk, i8* %4, %struct.key_list_st* %5), !dbg !4358
  %cmp = icmp ne i32 %call5, 0, !dbg !4359
  %conv = zext i1 %cmp to i32, !dbg !4359
  %call6 = call i32 @test_true(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2151, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.146, i32 0, i32 0), i32 %conv), !dbg !4360
  %tobool7 = icmp ne i32 %call6, 0, !dbg !4362
  br i1 %tobool7, label %if.end10, label %if.then8, !dbg !4363

if.then8:                                         ; preds = %if.end
  %6 = load i8*, i8** %priv, align 8, !dbg !4364
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2152, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.147, i32 0, i32 0), i8* %6), !dbg !4366
  %7 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4367
  %err9 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %7, i32 0, i32 4, !dbg !4368
  store i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.148, i32 0, i32 0), i8** %err9, align 8, !dbg !4369
  br label %end, !dbg !4370

if.end10:                                         ; preds = %if.end
  %8 = load i8*, i8** %pub, align 8, !dbg !4371
  %9 = load %struct.key_list_st*, %struct.key_list_st** @public_keys, align 8, !dbg !4373
  %call11 = call i32 @find_key(%struct.evp_pkey_st** %pubk, i8* %8, %struct.key_list_st* %9), !dbg !4374
  %cmp12 = icmp ne i32 %call11, 0, !dbg !4375
  %conv13 = zext i1 %cmp12 to i32, !dbg !4375
  %call14 = call i32 @test_true(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2156, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.149, i32 0, i32 0), i32 %conv13), !dbg !4376
  %tobool15 = icmp ne i32 %call14, 0, !dbg !4378
  br i1 %tobool15, label %if.end18, label %if.then16, !dbg !4379

if.then16:                                        ; preds = %if.end10
  %10 = load i8*, i8** %pub, align 8, !dbg !4380
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2157, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.150, i32 0, i32 0), i8* %10), !dbg !4382
  %11 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4383
  %err17 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %11, i32 0, i32 4, !dbg !4384
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.151, i32 0, i32 0), i8** %err17, align 8, !dbg !4385
  br label %end, !dbg !4386

if.end18:                                         ; preds = %if.end10
  %12 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pk, align 8, !dbg !4387
  %cmp19 = icmp eq %struct.evp_pkey_st* %12, null, !dbg !4389
  br i1 %cmp19, label %land.lhs.true, label %if.end24, !dbg !4390

land.lhs.true:                                    ; preds = %if.end18
  %13 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pubk, align 8, !dbg !4391
  %cmp21 = icmp eq %struct.evp_pkey_st* %13, null, !dbg !4393
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !4394

if.then23:                                        ; preds = %land.lhs.true
  %14 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4395
  %skip = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %14, i32 0, i32 2, !dbg !4397
  store i32 1, i32* %skip, align 8, !dbg !4398
  store i32 1, i32* %rv, align 4, !dbg !4399
  br label %end, !dbg !4400

if.end24:                                         ; preds = %land.lhs.true, %if.end18
  %call25 = call i8* @CRYPTO_malloc(i64 16, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2169), !dbg !4401
  %15 = bitcast i8* %call25 to %struct.keypair_test_data_st*, !dbg !4401
  store %struct.keypair_test_data_st* %15, %struct.keypair_test_data_st** %data, align 8, !dbg !4403
  %16 = bitcast %struct.keypair_test_data_st* %15 to i8*, !dbg !4404
  %call26 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2169, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.152, i32 0, i32 0), i8* %16), !dbg !4405
  %tobool27 = icmp ne i32 %call26, 0, !dbg !4407
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !4408

if.then28:                                        ; preds = %if.end24
  br label %end, !dbg !4409

if.end29:                                         ; preds = %if.end24
  %17 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pk, align 8, !dbg !4410
  %18 = load %struct.keypair_test_data_st*, %struct.keypair_test_data_st** %data, align 8, !dbg !4411
  %privk = getelementptr inbounds %struct.keypair_test_data_st, %struct.keypair_test_data_st* %18, i32 0, i32 0, !dbg !4412
  store %struct.evp_pkey_st* %17, %struct.evp_pkey_st** %privk, align 8, !dbg !4413
  %19 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pubk, align 8, !dbg !4414
  %20 = load %struct.keypair_test_data_st*, %struct.keypair_test_data_st** %data, align 8, !dbg !4415
  %pubk30 = getelementptr inbounds %struct.keypair_test_data_st, %struct.keypair_test_data_st* %20, i32 0, i32 1, !dbg !4416
  store %struct.evp_pkey_st* %19, %struct.evp_pkey_st** %pubk30, align 8, !dbg !4417
  %21 = load %struct.keypair_test_data_st*, %struct.keypair_test_data_st** %data, align 8, !dbg !4418
  %22 = bitcast %struct.keypair_test_data_st* %21 to i8*, !dbg !4418
  %23 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4419
  %data31 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %23, i32 0, i32 9, !dbg !4420
  store i8* %22, i8** %data31, align 8, !dbg !4421
  store i32 1, i32* %rv, align 4, !dbg !4422
  %24 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4423
  %err32 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %24, i32 0, i32 4, !dbg !4424
  store i8* null, i8** %err32, align 8, !dbg !4425
  br label %end, !dbg !4423

end:                                              ; preds = %if.end29, %if.then28, %if.then23, %if.then16, %if.then8, %if.then
  %25 = load i8*, i8** %priv, align 8, !dbg !4426
  call void @CRYPTO_free(i8* %25, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2178), !dbg !4427
  %26 = load i32, i32* %rv, align 4, !dbg !4428
  ret i32 %26, !dbg !4429
}

; Function Attrs: nounwind uwtable
define internal void @keypair_test_cleanup(%struct.evp_test_st* %t) #0 !dbg !4430 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4431, metadata !207), !dbg !4432
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4433
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !4434
  %1 = load i8*, i8** %data, align 8, !dbg !4434
  call void @CRYPTO_free(i8* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2184), !dbg !4435
  %2 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4436
  %data1 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %2, i32 0, i32 9, !dbg !4437
  store i8* null, i8** %data1, align 8, !dbg !4438
  ret void, !dbg !4439
}

; Function Attrs: nounwind uwtable
define internal i32 @void_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !4440 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4441, metadata !207), !dbg !4442
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !4443, metadata !207), !dbg !4444
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !4445, metadata !207), !dbg !4446
  ret i32 0, !dbg !4447
}

; Function Attrs: nounwind uwtable
define internal i32 @keypair_test_run(%struct.evp_test_st* %t) #0 !dbg !4448 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %rv = alloca i32, align 4
  %pair = alloca %struct.keypair_test_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4449, metadata !207), !dbg !4450
  call void @llvm.dbg.declare(metadata i32* %rv, metadata !4451, metadata !207), !dbg !4452
  store i32 0, i32* %rv, align 4, !dbg !4452
  call void @llvm.dbg.declare(metadata %struct.keypair_test_data_st** %pair, metadata !4453, metadata !207), !dbg !4456
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4457
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !4458
  %1 = load i8*, i8** %data, align 8, !dbg !4458
  %2 = bitcast i8* %1 to %struct.keypair_test_data_st*, !dbg !4457
  store %struct.keypair_test_data_st* %2, %struct.keypair_test_data_st** %pair, align 8, !dbg !4456
  %3 = load %struct.keypair_test_data_st*, %struct.keypair_test_data_st** %pair, align 8, !dbg !4459
  %privk = getelementptr inbounds %struct.keypair_test_data_st, %struct.keypair_test_data_st* %3, i32 0, i32 0, !dbg !4461
  %4 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %privk, align 8, !dbg !4461
  %cmp = icmp eq %struct.evp_pkey_st* %4, null, !dbg !4462
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4463

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.keypair_test_data_st*, %struct.keypair_test_data_st** %pair, align 8, !dbg !4464
  %pubk = getelementptr inbounds %struct.keypair_test_data_st, %struct.keypair_test_data_st* %5, i32 0, i32 1, !dbg !4466
  %6 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pubk, align 8, !dbg !4466
  %cmp1 = icmp eq %struct.evp_pkey_st* %6, null, !dbg !4467
  br i1 %cmp1, label %if.then, label %if.end, !dbg !4468

if.then:                                          ; preds = %lor.lhs.false, %entry
  %7 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4469
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %7, i32 0, i32 4, !dbg !4471
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.153, i32 0, i32 0), i8** %err, align 8, !dbg !4472
  store i32 1, i32* %rv, align 4, !dbg !4473
  br label %end, !dbg !4474

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.keypair_test_data_st*, %struct.keypair_test_data_st** %pair, align 8, !dbg !4475
  %privk2 = getelementptr inbounds %struct.keypair_test_data_st, %struct.keypair_test_data_st* %8, i32 0, i32 0, !dbg !4477
  %9 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %privk2, align 8, !dbg !4477
  %10 = load %struct.keypair_test_data_st*, %struct.keypair_test_data_st** %pair, align 8, !dbg !4478
  %pubk3 = getelementptr inbounds %struct.keypair_test_data_st, %struct.keypair_test_data_st* %10, i32 0, i32 1, !dbg !4479
  %11 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pubk3, align 8, !dbg !4479
  %call = call i32 @EVP_PKEY_cmp(%struct.evp_pkey_st* %9, %struct.evp_pkey_st* %11), !dbg !4480
  store i32 %call, i32* %rv, align 4, !dbg !4481
  %cmp4 = icmp ne i32 %call, 1, !dbg !4482
  br i1 %cmp4, label %if.then5, label %if.end20, !dbg !4483

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %rv, align 4, !dbg !4484
  %cmp6 = icmp eq i32 0, %12, !dbg !4487
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !4488

if.then7:                                         ; preds = %if.then5
  %13 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4489
  %err8 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %13, i32 0, i32 4, !dbg !4491
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.154, i32 0, i32 0), i8** %err8, align 8, !dbg !4492
  br label %if.end19, !dbg !4493

if.else:                                          ; preds = %if.then5
  %14 = load i32, i32* %rv, align 4, !dbg !4494
  %cmp9 = icmp eq i32 -1, %14, !dbg !4497
  br i1 %cmp9, label %if.then10, label %if.else12, !dbg !4498

if.then10:                                        ; preds = %if.else
  %15 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4499
  %err11 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %15, i32 0, i32 4, !dbg !4501
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.153, i32 0, i32 0), i8** %err11, align 8, !dbg !4502
  br label %if.end18, !dbg !4503

if.else12:                                        ; preds = %if.else
  %16 = load i32, i32* %rv, align 4, !dbg !4504
  %cmp13 = icmp eq i32 -2, %16, !dbg !4507
  br i1 %cmp13, label %if.then14, label %if.else16, !dbg !4508

if.then14:                                        ; preds = %if.else12
  %17 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4509
  %err15 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %17, i32 0, i32 4, !dbg !4511
  store i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.155, i32 0, i32 0), i8** %err15, align 8, !dbg !4512
  br label %if.end17, !dbg !4513

if.else16:                                        ; preds = %if.else12
  call void (i8*, i32, i8*, ...) @test_error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2220, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.156, i32 0, i32 0)), !dbg !4514
  store i32 0, i32* %rv, align 4, !dbg !4516
  br label %end, !dbg !4517

if.end17:                                         ; preds = %if.then14
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then10
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.then7
  store i32 1, i32* %rv, align 4, !dbg !4518
  br label %end, !dbg !4519

if.end20:                                         ; preds = %if.end
  store i32 1, i32* %rv, align 4, !dbg !4520
  %18 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4521
  %err21 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %18, i32 0, i32 4, !dbg !4522
  store i8* null, i8** %err21, align 8, !dbg !4523
  br label %end, !dbg !4521

end:                                              ; preds = %if.end20, %if.end19, %if.else16, %if.then
  %19 = load i32, i32* %rv, align 4, !dbg !4524
  ret i32 %19, !dbg !4525
}

declare i32 @EVP_PKEY_cmp(%struct.evp_pkey_st*, %struct.evp_pkey_st*) #2

; Function Attrs: nounwind uwtable
define internal i32 @keygen_test_init(%struct.evp_test_st* %t, i8* %alg) #0 !dbg !4526 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %alg.addr = alloca i8*, align 8
  %data = alloca %struct.keygen_test_data_st*, align 8
  %genctx = alloca %struct.evp_pkey_ctx_st*, align 8
  %nid = alloca i32, align 4
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4527, metadata !207), !dbg !4528
  store i8* %alg, i8** %alg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %alg.addr, metadata !4529, metadata !207), !dbg !4530
  call void @llvm.dbg.declare(metadata %struct.keygen_test_data_st** %data, metadata !4531, metadata !207), !dbg !4538
  call void @llvm.dbg.declare(metadata %struct.evp_pkey_ctx_st** %genctx, metadata !4539, metadata !207), !dbg !4540
  call void @llvm.dbg.declare(metadata i32* %nid, metadata !4541, metadata !207), !dbg !4542
  %0 = load i8*, i8** %alg.addr, align 8, !dbg !4543
  %call = call i32 @OBJ_sn2nid(i8* %0), !dbg !4544
  store i32 %call, i32* %nid, align 4, !dbg !4542
  %1 = load i32, i32* %nid, align 4, !dbg !4545
  %cmp = icmp eq i32 %1, 0, !dbg !4547
  br i1 %cmp, label %if.then, label %if.end4, !dbg !4548

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %alg.addr, align 8, !dbg !4549
  %call1 = call i32 @OBJ_ln2nid(i8* %2), !dbg !4551
  store i32 %call1, i32* %nid, align 4, !dbg !4552
  %3 = load i32, i32* %nid, align 4, !dbg !4553
  %cmp2 = icmp eq i32 %3, 0, !dbg !4555
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !4556

if.then3:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4, !dbg !4557
  br label %return, !dbg !4557

if.end:                                           ; preds = %if.then
  br label %if.end4, !dbg !4558

if.end4:                                          ; preds = %if.end, %entry
  %4 = load i32, i32* %nid, align 4, !dbg !4559
  %call5 = call %struct.evp_pkey_ctx_st* @EVP_PKEY_CTX_new_id(i32 %4, %struct.engine_st* null), !dbg !4561
  store %struct.evp_pkey_ctx_st* %call5, %struct.evp_pkey_ctx_st** %genctx, align 8, !dbg !4562
  %5 = bitcast %struct.evp_pkey_ctx_st* %call5 to i8*, !dbg !4563
  %call6 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2264, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.158, i32 0, i32 0), i8* %5), !dbg !4564
  %tobool = icmp ne i32 %call6, 0, !dbg !4566
  br i1 %tobool, label %if.end8, label %if.then7, !dbg !4567

if.then7:                                         ; preds = %if.end4
  %6 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4568
  %skip = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %6, i32 0, i32 2, !dbg !4570
  store i32 1, i32* %skip, align 8, !dbg !4571
  store i32 1, i32* %retval, align 4, !dbg !4572
  br label %return, !dbg !4572

if.end8:                                          ; preds = %if.end4
  %7 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %genctx, align 8, !dbg !4573
  %call9 = call i32 @EVP_PKEY_keygen_init(%struct.evp_pkey_ctx_st* %7), !dbg !4575
  %cmp10 = icmp sle i32 %call9, 0, !dbg !4576
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !4577

if.then11:                                        ; preds = %if.end8
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4578
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %8, i32 0, i32 4, !dbg !4580
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.159, i32 0, i32 0), i8** %err, align 8, !dbg !4581
  br label %err21, !dbg !4582

if.end12:                                         ; preds = %if.end8
  %call13 = call i8* @CRYPTO_malloc(i64 16, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2275), !dbg !4583
  %9 = bitcast i8* %call13 to %struct.keygen_test_data_st*, !dbg !4583
  store %struct.keygen_test_data_st* %9, %struct.keygen_test_data_st** %data, align 8, !dbg !4585
  %10 = bitcast %struct.keygen_test_data_st* %9 to i8*, !dbg !4586
  %call14 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2275, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.152, i32 0, i32 0), i8* %10), !dbg !4587
  %tobool15 = icmp ne i32 %call14, 0, !dbg !4589
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !4590

if.then16:                                        ; preds = %if.end12
  br label %err21, !dbg !4591

if.end17:                                         ; preds = %if.end12
  %11 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %genctx, align 8, !dbg !4592
  %12 = load %struct.keygen_test_data_st*, %struct.keygen_test_data_st** %data, align 8, !dbg !4593
  %genctx18 = getelementptr inbounds %struct.keygen_test_data_st, %struct.keygen_test_data_st* %12, i32 0, i32 0, !dbg !4594
  store %struct.evp_pkey_ctx_st* %11, %struct.evp_pkey_ctx_st** %genctx18, align 8, !dbg !4595
  %13 = load %struct.keygen_test_data_st*, %struct.keygen_test_data_st** %data, align 8, !dbg !4596
  %keyname = getelementptr inbounds %struct.keygen_test_data_st, %struct.keygen_test_data_st* %13, i32 0, i32 1, !dbg !4597
  store i8* null, i8** %keyname, align 8, !dbg !4598
  %14 = load %struct.keygen_test_data_st*, %struct.keygen_test_data_st** %data, align 8, !dbg !4599
  %15 = bitcast %struct.keygen_test_data_st* %14 to i8*, !dbg !4599
  %16 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4600
  %data19 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %16, i32 0, i32 9, !dbg !4601
  store i8* %15, i8** %data19, align 8, !dbg !4602
  %17 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4603
  %err20 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %17, i32 0, i32 4, !dbg !4604
  store i8* null, i8** %err20, align 8, !dbg !4605
  store i32 1, i32* %retval, align 4, !dbg !4606
  br label %return, !dbg !4606

err21:                                            ; preds = %if.then16, %if.then11
  %18 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %genctx, align 8, !dbg !4607
  call void @EVP_PKEY_CTX_free(%struct.evp_pkey_ctx_st* %18), !dbg !4608
  store i32 0, i32* %retval, align 4, !dbg !4609
  br label %return, !dbg !4609

return:                                           ; preds = %err21, %if.end17, %if.then7, %if.then3
  %19 = load i32, i32* %retval, align 4, !dbg !4610
  ret i32 %19, !dbg !4610
}

; Function Attrs: nounwind uwtable
define internal void @keygen_test_cleanup(%struct.evp_test_st* %t) #0 !dbg !4611 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keygen = alloca %struct.keygen_test_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4612, metadata !207), !dbg !4613
  call void @llvm.dbg.declare(metadata %struct.keygen_test_data_st** %keygen, metadata !4614, metadata !207), !dbg !4615
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4616
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !4617
  %1 = load i8*, i8** %data, align 8, !dbg !4617
  %2 = bitcast i8* %1 to %struct.keygen_test_data_st*, !dbg !4616
  store %struct.keygen_test_data_st* %2, %struct.keygen_test_data_st** %keygen, align 8, !dbg !4615
  %3 = load %struct.keygen_test_data_st*, %struct.keygen_test_data_st** %keygen, align 8, !dbg !4618
  %genctx = getelementptr inbounds %struct.keygen_test_data_st, %struct.keygen_test_data_st* %3, i32 0, i32 0, !dbg !4619
  %4 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %genctx, align 8, !dbg !4619
  call void @EVP_PKEY_CTX_free(%struct.evp_pkey_ctx_st* %4), !dbg !4620
  %5 = load %struct.keygen_test_data_st*, %struct.keygen_test_data_st** %keygen, align 8, !dbg !4621
  %keyname = getelementptr inbounds %struct.keygen_test_data_st, %struct.keygen_test_data_st* %5, i32 0, i32 1, !dbg !4622
  %6 = load i8*, i8** %keyname, align 8, !dbg !4622
  call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2293), !dbg !4623
  %7 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4624
  %data1 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %7, i32 0, i32 9, !dbg !4625
  %8 = load i8*, i8** %data1, align 8, !dbg !4625
  call void @CRYPTO_free(i8* %8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2294), !dbg !4626
  %9 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4627
  %data2 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %9, i32 0, i32 9, !dbg !4628
  store i8* null, i8** %data2, align 8, !dbg !4629
  ret void, !dbg !4630
}

; Function Attrs: nounwind uwtable
define internal i32 @keygen_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !4631 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %keygen = alloca %struct.keygen_test_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4632, metadata !207), !dbg !4633
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !4634, metadata !207), !dbg !4635
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !4636, metadata !207), !dbg !4637
  call void @llvm.dbg.declare(metadata %struct.keygen_test_data_st** %keygen, metadata !4638, metadata !207), !dbg !4639
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4640
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !4641
  %1 = load i8*, i8** %data, align 8, !dbg !4641
  %2 = bitcast i8* %1 to %struct.keygen_test_data_st*, !dbg !4640
  store %struct.keygen_test_data_st* %2, %struct.keygen_test_data_st** %keygen, align 8, !dbg !4639
  %3 = load i8*, i8** %keyword.addr, align 8, !dbg !4642
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.160, i32 0, i32 0)) #7, !dbg !4644
  %cmp = icmp eq i32 %call, 0, !dbg !4645
  br i1 %cmp, label %if.then, label %if.end, !dbg !4646

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %value.addr, align 8, !dbg !4647
  %call1 = call i8* @CRYPTO_strdup(i8* %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2304), !dbg !4648
  %5 = load %struct.keygen_test_data_st*, %struct.keygen_test_data_st** %keygen, align 8, !dbg !4649
  %keyname = getelementptr inbounds %struct.keygen_test_data_st, %struct.keygen_test_data_st* %5, i32 0, i32 1, !dbg !4650
  store i8* %call1, i8** %keyname, align 8, !dbg !4651
  %call2 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2304, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.161, i32 0, i32 0), i8* %call1), !dbg !4652
  store i32 %call2, i32* %retval, align 4, !dbg !4654
  br label %return, !dbg !4654

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %keyword.addr, align 8, !dbg !4655
  %call3 = call i32 @strcmp(i8* %6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.107, i32 0, i32 0)) #7, !dbg !4657
  %cmp4 = icmp eq i32 %call3, 0, !dbg !4658
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !4659

if.then5:                                         ; preds = %if.end
  %7 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4660
  %8 = load %struct.keygen_test_data_st*, %struct.keygen_test_data_st** %keygen, align 8, !dbg !4661
  %genctx = getelementptr inbounds %struct.keygen_test_data_st, %struct.keygen_test_data_st* %8, i32 0, i32 0, !dbg !4662
  %9 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %genctx, align 8, !dbg !4662
  %10 = load i8*, i8** %value.addr, align 8, !dbg !4663
  %call6 = call i32 @pkey_test_ctrl(%struct.evp_test_st* %7, %struct.evp_pkey_ctx_st* %9, i8* %10), !dbg !4664
  store i32 %call6, i32* %retval, align 4, !dbg !4665
  br label %return, !dbg !4665

if.end7:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !4666
  br label %return, !dbg !4666

return:                                           ; preds = %if.end7, %if.then5, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !4667
  ret i32 %11, !dbg !4667
}

; Function Attrs: nounwind uwtable
define internal i32 @keygen_test_run(%struct.evp_test_st* %t) #0 !dbg !4668 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keygen = alloca %struct.keygen_test_data_st*, align 8
  %pkey = alloca %struct.evp_pkey_st*, align 8
  %key = alloca %struct.key_list_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4669, metadata !207), !dbg !4670
  call void @llvm.dbg.declare(metadata %struct.keygen_test_data_st** %keygen, metadata !4671, metadata !207), !dbg !4672
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4673
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !4674
  %1 = load i8*, i8** %data, align 8, !dbg !4674
  %2 = bitcast i8* %1 to %struct.keygen_test_data_st*, !dbg !4673
  store %struct.keygen_test_data_st* %2, %struct.keygen_test_data_st** %keygen, align 8, !dbg !4672
  call void @llvm.dbg.declare(metadata %struct.evp_pkey_st** %pkey, metadata !4675, metadata !207), !dbg !4676
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %pkey, align 8, !dbg !4676
  %3 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4677
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %3, i32 0, i32 4, !dbg !4678
  store i8* null, i8** %err, align 8, !dbg !4679
  %4 = load %struct.keygen_test_data_st*, %struct.keygen_test_data_st** %keygen, align 8, !dbg !4680
  %genctx = getelementptr inbounds %struct.keygen_test_data_st, %struct.keygen_test_data_st* %4, i32 0, i32 0, !dbg !4682
  %5 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %genctx, align 8, !dbg !4682
  %call = call i32 @EVP_PKEY_keygen(%struct.evp_pkey_ctx_st* %5, %struct.evp_pkey_st** %pkey), !dbg !4683
  %cmp = icmp sle i32 %call, 0, !dbg !4684
  br i1 %cmp, label %if.then, label %if.end, !dbg !4685

if.then:                                          ; preds = %entry
  %6 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4686
  %err1 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %6, i32 0, i32 4, !dbg !4688
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.162, i32 0, i32 0), i8** %err1, align 8, !dbg !4689
  br label %err18, !dbg !4690

if.end:                                           ; preds = %entry
  %7 = load %struct.keygen_test_data_st*, %struct.keygen_test_data_st** %keygen, align 8, !dbg !4691
  %keyname = getelementptr inbounds %struct.keygen_test_data_st, %struct.keygen_test_data_st* %7, i32 0, i32 1, !dbg !4693
  %8 = load i8*, i8** %keyname, align 8, !dbg !4693
  %cmp2 = icmp ne i8* %8, null, !dbg !4694
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !4695

if.then3:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.key_list_st** %key, metadata !4696, metadata !207), !dbg !4698
  %9 = load %struct.keygen_test_data_st*, %struct.keygen_test_data_st** %keygen, align 8, !dbg !4699
  %keyname4 = getelementptr inbounds %struct.keygen_test_data_st, %struct.keygen_test_data_st* %9, i32 0, i32 1, !dbg !4701
  %10 = load i8*, i8** %keyname4, align 8, !dbg !4701
  %11 = load %struct.key_list_st*, %struct.key_list_st** @private_keys, align 8, !dbg !4702
  %call5 = call i32 @find_key(%struct.evp_pkey_st** null, i8* %10, %struct.key_list_st* %11), !dbg !4703
  %tobool = icmp ne i32 %call5, 0, !dbg !4703
  br i1 %tobool, label %if.then6, label %if.end8, !dbg !4704

if.then6:                                         ; preds = %if.then3
  %12 = load %struct.keygen_test_data_st*, %struct.keygen_test_data_st** %keygen, align 8, !dbg !4705
  %keyname7 = getelementptr inbounds %struct.keygen_test_data_st, %struct.keygen_test_data_st* %12, i32 0, i32 1, !dbg !4707
  %13 = load i8*, i8** %keyname7, align 8, !dbg !4707
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2325, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.27, i32 0, i32 0), i8* %13), !dbg !4708
  br label %err18, !dbg !4709

if.end8:                                          ; preds = %if.then3
  %call9 = call i8* @CRYPTO_malloc(i64 24, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2329), !dbg !4710
  %14 = bitcast i8* %call9 to %struct.key_list_st*, !dbg !4710
  store %struct.key_list_st* %14, %struct.key_list_st** %key, align 8, !dbg !4712
  %15 = bitcast %struct.key_list_st* %14 to i8*, !dbg !4713
  %call10 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2329, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.28, i32 0, i32 0), i8* %15), !dbg !4714
  %tobool11 = icmp ne i32 %call10, 0, !dbg !4716
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !4717

if.then12:                                        ; preds = %if.end8
  br label %err18, !dbg !4718

if.end13:                                         ; preds = %if.end8
  %16 = load %struct.keygen_test_data_st*, %struct.keygen_test_data_st** %keygen, align 8, !dbg !4719
  %keyname14 = getelementptr inbounds %struct.keygen_test_data_st, %struct.keygen_test_data_st* %16, i32 0, i32 1, !dbg !4720
  %17 = load i8*, i8** %keyname14, align 8, !dbg !4720
  %18 = load %struct.key_list_st*, %struct.key_list_st** %key, align 8, !dbg !4721
  %name = getelementptr inbounds %struct.key_list_st, %struct.key_list_st* %18, i32 0, i32 0, !dbg !4722
  store i8* %17, i8** %name, align 8, !dbg !4723
  %19 = load %struct.keygen_test_data_st*, %struct.keygen_test_data_st** %keygen, align 8, !dbg !4724
  %keyname15 = getelementptr inbounds %struct.keygen_test_data_st, %struct.keygen_test_data_st* %19, i32 0, i32 1, !dbg !4725
  store i8* null, i8** %keyname15, align 8, !dbg !4726
  %20 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !4727
  %21 = load %struct.key_list_st*, %struct.key_list_st** %key, align 8, !dbg !4728
  %key16 = getelementptr inbounds %struct.key_list_st, %struct.key_list_st* %21, i32 0, i32 1, !dbg !4729
  store %struct.evp_pkey_st* %20, %struct.evp_pkey_st** %key16, align 8, !dbg !4730
  %22 = load %struct.key_list_st*, %struct.key_list_st** @private_keys, align 8, !dbg !4731
  %23 = load %struct.key_list_st*, %struct.key_list_st** %key, align 8, !dbg !4732
  %next = getelementptr inbounds %struct.key_list_st, %struct.key_list_st* %23, i32 0, i32 2, !dbg !4733
  store %struct.key_list_st* %22, %struct.key_list_st** %next, align 8, !dbg !4734
  %24 = load %struct.key_list_st*, %struct.key_list_st** %key, align 8, !dbg !4735
  store %struct.key_list_st* %24, %struct.key_list_st** @private_keys, align 8, !dbg !4736
  br label %if.end17, !dbg !4737

if.else:                                          ; preds = %if.end
  %25 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !4738
  call void @EVP_PKEY_free(%struct.evp_pkey_st* %25), !dbg !4740
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.end13
  store i32 1, i32* %retval, align 4, !dbg !4741
  br label %return, !dbg !4741

err18:                                            ; preds = %if.then12, %if.then6, %if.then
  %26 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !4742
  call void @EVP_PKEY_free(%struct.evp_pkey_st* %26), !dbg !4743
  store i32 0, i32* %retval, align 4, !dbg !4744
  br label %return, !dbg !4744

return:                                           ; preds = %err18, %if.end17
  %27 = load i32, i32* %retval, align 4, !dbg !4745
  ret i32 %27, !dbg !4745
}

declare i32 @EVP_PKEY_keygen_init(%struct.evp_pkey_ctx_st*) #2

declare i32 @EVP_PKEY_keygen(%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st**) #2

; Function Attrs: nounwind uwtable
define internal i32 @mac_test_init(%struct.evp_test_st* %t, i8* %alg) #0 !dbg !174 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %alg.addr = alloca i8*, align 8
  %mac = alloca %struct.evp_mac_st*, align 8
  %type = alloca i32, align 4
  %mdat = alloca %struct.mac_data_st*, align 8
  %sz = alloca i64, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4746, metadata !207), !dbg !4747
  store i8* %alg, i8** %alg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %alg.addr, metadata !4748, metadata !207), !dbg !4749
  call void @llvm.dbg.declare(metadata %struct.evp_mac_st** %mac, metadata !4750, metadata !207), !dbg !4755
  store %struct.evp_mac_st* null, %struct.evp_mac_st** %mac, align 8, !dbg !4755
  call void @llvm.dbg.declare(metadata i32* %type, metadata !4756, metadata !207), !dbg !4757
  store i32 0, i32* %type, align 4, !dbg !4757
  call void @llvm.dbg.declare(metadata %struct.mac_data_st** %mdat, metadata !4758, metadata !207), !dbg !4779
  %0 = load i8*, i8** %alg.addr, align 8, !dbg !4780
  %call = call %struct.evp_mac_st* @EVP_get_macbyname(i8* %0), !dbg !4782
  store %struct.evp_mac_st* %call, %struct.evp_mac_st** %mac, align 8, !dbg !4783
  %cmp = icmp eq %struct.evp_mac_st* %call, null, !dbg !4784
  br i1 %cmp, label %if.then, label %if.end32, !dbg !4785

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %sz, metadata !4786, metadata !207), !dbg !4788
  %1 = load i8*, i8** %alg.addr, align 8, !dbg !4789
  %call1 = call i64 @strlen(i8* %1) #7, !dbg !4790
  store i64 %call1, i64* %sz, align 8, !dbg !4788
  %2 = load i64, i64* %sz, align 8, !dbg !4791
  %cmp2 = icmp uge i64 %2, 13, !dbg !4793
  br i1 %cmp2, label %land.lhs.true, label %if.end, !dbg !4794

land.lhs.true:                                    ; preds = %if.then
  %3 = load i8*, i8** %alg.addr, align 8, !dbg !4795
  %4 = load i64, i64* %sz, align 8, !dbg !4797
  %add.ptr = getelementptr inbounds i8, i8* %3, i64 %4, !dbg !4798
  %add.ptr3 = getelementptr inbounds i8, i8* %add.ptr, i64 -12, !dbg !4799
  %call4 = call i32 @strcmp(i8* %add.ptr3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @mac_test_init.epilogue, i32 0, i32 0)) #7, !dbg !4800
  %cmp5 = icmp eq i32 %call4, 0, !dbg !4801
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !4802

if.then6:                                         ; preds = %land.lhs.true
  %5 = load i64, i64* %sz, align 8, !dbg !4804
  %sub = sub i64 %5, 12, !dbg !4804
  store i64 %sub, i64* %sz, align 8, !dbg !4804
  br label %if.end, !dbg !4805

if.end:                                           ; preds = %if.then6, %land.lhs.true, %if.then
  %6 = load i8*, i8** %alg.addr, align 8, !dbg !4806
  %7 = load i64, i64* %sz, align 8, !dbg !4808
  %call7 = call i32 @strncmp(i8* %6, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.164, i32 0, i32 0), i64 %7) #7, !dbg !4809
  %cmp8 = icmp eq i32 %call7, 0, !dbg !4810
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !4811

if.then9:                                         ; preds = %if.end
  store i32 855, i32* %type, align 4, !dbg !4812
  br label %if.end31, !dbg !4814

if.else:                                          ; preds = %if.end
  %8 = load i8*, i8** %alg.addr, align 8, !dbg !4815
  %9 = load i64, i64* %sz, align 8, !dbg !4818
  %call10 = call i32 @strncmp(i8* %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.165, i32 0, i32 0), i64 %9) #7, !dbg !4819
  %cmp11 = icmp eq i32 %call10, 0, !dbg !4820
  br i1 %cmp11, label %if.then12, label %if.else13, !dbg !4819

if.then12:                                        ; preds = %if.else
  store i32 894, i32* %type, align 4, !dbg !4821
  br label %if.end30, !dbg !4823

if.else13:                                        ; preds = %if.else
  %10 = load i8*, i8** %alg.addr, align 8, !dbg !4824
  %11 = load i64, i64* %sz, align 8, !dbg !4827
  %call14 = call i32 @strncmp(i8* %10, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.166, i32 0, i32 0), i64 %11) #7, !dbg !4828
  %cmp15 = icmp eq i32 %call14, 0, !dbg !4829
  br i1 %cmp15, label %if.then16, label %if.else17, !dbg !4828

if.then16:                                        ; preds = %if.else13
  store i32 1061, i32* %type, align 4, !dbg !4830
  br label %if.end29, !dbg !4832

if.else17:                                        ; preds = %if.else13
  %12 = load i8*, i8** %alg.addr, align 8, !dbg !4833
  %13 = load i64, i64* %sz, align 8, !dbg !4836
  %call18 = call i32 @strncmp(i8* %12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.167, i32 0, i32 0), i64 %13) #7, !dbg !4837
  %cmp19 = icmp eq i32 %call18, 0, !dbg !4838
  br i1 %cmp19, label %if.then20, label %if.else21, !dbg !4837

if.then20:                                        ; preds = %if.else17
  store i32 1062, i32* %type, align 4, !dbg !4839
  br label %if.end28, !dbg !4841

if.else21:                                        ; preds = %if.else17
  %14 = load i8*, i8** %alg.addr, align 8, !dbg !4842
  %call22 = call i32 @OBJ_sn2nid(i8* %14), !dbg !4845
  %cmp23 = icmp ne i32 %call22, 0, !dbg !4846
  br i1 %cmp23, label %if.then26, label %lor.lhs.false, !dbg !4847

lor.lhs.false:                                    ; preds = %if.else21
  %15 = load i8*, i8** %alg.addr, align 8, !dbg !4848
  %call24 = call i32 @OBJ_ln2nid(i8* %15), !dbg !4850
  %cmp25 = icmp ne i32 %call24, 0, !dbg !4851
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !4852

if.then26:                                        ; preds = %lor.lhs.false, %if.else21
  %16 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4853
  %skip = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %16, i32 0, i32 2, !dbg !4855
  store i32 1, i32* %skip, align 8, !dbg !4856
  store i32 1, i32* %retval, align 4, !dbg !4857
  br label %return, !dbg !4857

if.end27:                                         ; preds = %lor.lhs.false
  store i32 0, i32* %retval, align 4, !dbg !4858
  br label %return, !dbg !4858

if.end28:                                         ; preds = %if.then20
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then16
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.then12
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then9
  br label %if.end32, !dbg !4859

if.end32:                                         ; preds = %if.end31, %entry
  %call33 = call i8* @CRYPTO_zalloc(i64 128, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 930), !dbg !4860
  %17 = bitcast i8* %call33 to %struct.mac_data_st*, !dbg !4860
  store %struct.mac_data_st* %17, %struct.mac_data_st** %mdat, align 8, !dbg !4861
  %18 = load i32, i32* %type, align 4, !dbg !4862
  %19 = load %struct.mac_data_st*, %struct.mac_data_st** %mdat, align 8, !dbg !4863
  %type34 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %19, i32 0, i32 1, !dbg !4864
  store i32 %18, i32* %type34, align 8, !dbg !4865
  %20 = load %struct.evp_mac_st*, %struct.evp_mac_st** %mac, align 8, !dbg !4866
  %21 = load %struct.mac_data_st*, %struct.mac_data_st** %mdat, align 8, !dbg !4867
  %mac35 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %21, i32 0, i32 0, !dbg !4868
  store %struct.evp_mac_st* %20, %struct.evp_mac_st** %mac35, align 8, !dbg !4869
  %call36 = call %struct.stack_st_OPENSSL_STRING* @sk_OPENSSL_STRING_new_null(), !dbg !4870
  %22 = load %struct.mac_data_st*, %struct.mac_data_st** %mdat, align 8, !dbg !4871
  %controls = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %22, i32 0, i32 15, !dbg !4872
  store %struct.stack_st_OPENSSL_STRING* %call36, %struct.stack_st_OPENSSL_STRING** %controls, align 8, !dbg !4873
  %23 = load %struct.mac_data_st*, %struct.mac_data_st** %mdat, align 8, !dbg !4874
  %24 = bitcast %struct.mac_data_st* %23 to i8*, !dbg !4874
  %25 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4875
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %25, i32 0, i32 9, !dbg !4876
  store i8* %24, i8** %data, align 8, !dbg !4877
  store i32 1, i32* %retval, align 4, !dbg !4878
  br label %return, !dbg !4878

return:                                           ; preds = %if.end32, %if.end27, %if.then26
  %26 = load i32, i32* %retval, align 4, !dbg !4879
  ret i32 %26, !dbg !4879
}

; Function Attrs: nounwind uwtable
define internal void @mac_test_cleanup(%struct.evp_test_st* %t) #0 !dbg !4880 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %mdat = alloca %struct.mac_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4881, metadata !207), !dbg !4882
  call void @llvm.dbg.declare(metadata %struct.mac_data_st** %mdat, metadata !4883, metadata !207), !dbg !4884
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4885
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !4886
  %1 = load i8*, i8** %data, align 8, !dbg !4886
  %2 = bitcast i8* %1 to %struct.mac_data_st*, !dbg !4885
  store %struct.mac_data_st* %2, %struct.mac_data_st** %mdat, align 8, !dbg !4884
  %3 = load %struct.mac_data_st*, %struct.mac_data_st** %mdat, align 8, !dbg !4887
  %controls = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %3, i32 0, i32 15, !dbg !4888
  %4 = load %struct.stack_st_OPENSSL_STRING*, %struct.stack_st_OPENSSL_STRING** %controls, align 8, !dbg !4888
  call void @sk_OPENSSL_STRING_pop_free(%struct.stack_st_OPENSSL_STRING* %4, void (i8*)* @openssl_free), !dbg !4889
  %5 = load %struct.mac_data_st*, %struct.mac_data_st** %mdat, align 8, !dbg !4890
  %alg = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %5, i32 0, i32 2, !dbg !4891
  %6 = load i8*, i8** %alg, align 8, !dbg !4891
  call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 949), !dbg !4892
  %7 = load %struct.mac_data_st*, %struct.mac_data_st** %mdat, align 8, !dbg !4893
  %key = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %7, i32 0, i32 3, !dbg !4894
  %8 = load i8*, i8** %key, align 8, !dbg !4894
  call void @CRYPTO_free(i8* %8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 950), !dbg !4895
  %9 = load %struct.mac_data_st*, %struct.mac_data_st** %mdat, align 8, !dbg !4896
  %iv = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %9, i32 0, i32 5, !dbg !4897
  %10 = load i8*, i8** %iv, align 8, !dbg !4897
  call void @CRYPTO_free(i8* %10, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 951), !dbg !4898
  %11 = load %struct.mac_data_st*, %struct.mac_data_st** %mdat, align 8, !dbg !4899
  %custom = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %11, i32 0, i32 11, !dbg !4900
  %12 = load i8*, i8** %custom, align 8, !dbg !4900
  call void @CRYPTO_free(i8* %12, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 952), !dbg !4901
  %13 = load %struct.mac_data_st*, %struct.mac_data_st** %mdat, align 8, !dbg !4902
  %salt = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %13, i32 0, i32 13, !dbg !4903
  %14 = load i8*, i8** %salt, align 8, !dbg !4903
  call void @CRYPTO_free(i8* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 953), !dbg !4904
  %15 = load %struct.mac_data_st*, %struct.mac_data_st** %mdat, align 8, !dbg !4905
  %input = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %15, i32 0, i32 7, !dbg !4906
  %16 = load i8*, i8** %input, align 8, !dbg !4906
  call void @CRYPTO_free(i8* %16, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 954), !dbg !4907
  %17 = load %struct.mac_data_st*, %struct.mac_data_st** %mdat, align 8, !dbg !4908
  %output = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %17, i32 0, i32 9, !dbg !4909
  %18 = load i8*, i8** %output, align 8, !dbg !4909
  call void @CRYPTO_free(i8* %18, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 955), !dbg !4910
  ret void, !dbg !4911
}

; Function Attrs: nounwind uwtable
define internal i32 @mac_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !4912 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %mdata = alloca %struct.mac_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !4913, metadata !207), !dbg !4914
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !4915, metadata !207), !dbg !4916
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !4917, metadata !207), !dbg !4918
  call void @llvm.dbg.declare(metadata %struct.mac_data_st** %mdata, metadata !4919, metadata !207), !dbg !4920
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !4921
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !4922
  %1 = load i8*, i8** %data, align 8, !dbg !4922
  %2 = bitcast i8* %1 to %struct.mac_data_st*, !dbg !4921
  store %struct.mac_data_st* %2, %struct.mac_data_st** %mdata, align 8, !dbg !4920
  %3 = load i8*, i8** %keyword.addr, align 8, !dbg !4923
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i32 0, i32 0)) #7, !dbg !4925
  %cmp = icmp eq i32 %call, 0, !dbg !4926
  br i1 %cmp, label %if.then, label %if.end, !dbg !4927

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %value.addr, align 8, !dbg !4928
  %5 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !4929
  %key = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %5, i32 0, i32 3, !dbg !4930
  %6 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !4931
  %key_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %6, i32 0, i32 4, !dbg !4932
  %call1 = call i32 @parse_bin(i8* %4, i8** %key, i64* %key_len), !dbg !4933
  store i32 %call1, i32* %retval, align 4, !dbg !4934
  br label %return, !dbg !4934

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %keyword.addr, align 8, !dbg !4935
  %call2 = call i32 @strcmp(i8* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48, i32 0, i32 0)) #7, !dbg !4937
  %cmp3 = icmp eq i32 %call2, 0, !dbg !4938
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !4939

if.then4:                                         ; preds = %if.end
  %8 = load i8*, i8** %value.addr, align 8, !dbg !4940
  %9 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !4941
  %iv = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %9, i32 0, i32 5, !dbg !4942
  %10 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !4943
  %iv_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %10, i32 0, i32 6, !dbg !4944
  %call5 = call i32 @parse_bin(i8* %8, i8** %iv, i64* %iv_len), !dbg !4945
  store i32 %call5, i32* %retval, align 4, !dbg !4946
  br label %return, !dbg !4946

if.end6:                                          ; preds = %if.end
  %11 = load i8*, i8** %keyword.addr, align 8, !dbg !4947
  %call7 = call i32 @strcmp(i8* %11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.168, i32 0, i32 0)) #7, !dbg !4949
  %cmp8 = icmp eq i32 %call7, 0, !dbg !4950
  br i1 %cmp8, label %if.then9, label %if.end11, !dbg !4951

if.then9:                                         ; preds = %if.end6
  %12 = load i8*, i8** %value.addr, align 8, !dbg !4952
  %13 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !4953
  %custom = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %13, i32 0, i32 11, !dbg !4954
  %14 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !4955
  %custom_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %14, i32 0, i32 12, !dbg !4956
  %call10 = call i32 @parse_bin(i8* %12, i8** %custom, i64* %custom_len), !dbg !4957
  store i32 %call10, i32* %retval, align 4, !dbg !4958
  br label %return, !dbg !4958

if.end11:                                         ; preds = %if.end6
  %15 = load i8*, i8** %keyword.addr, align 8, !dbg !4959
  %call12 = call i32 @strcmp(i8* %15, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0)) #7, !dbg !4961
  %cmp13 = icmp eq i32 %call12, 0, !dbg !4962
  br i1 %cmp13, label %if.then14, label %if.end16, !dbg !4963

if.then14:                                        ; preds = %if.end11
  %16 = load i8*, i8** %value.addr, align 8, !dbg !4964
  %17 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !4965
  %salt = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %17, i32 0, i32 13, !dbg !4966
  %18 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !4967
  %salt_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %18, i32 0, i32 14, !dbg !4968
  %call15 = call i32 @parse_bin(i8* %16, i8** %salt, i64* %salt_len), !dbg !4969
  store i32 %call15, i32* %retval, align 4, !dbg !4970
  br label %return, !dbg !4970

if.end16:                                         ; preds = %if.end11
  %19 = load i8*, i8** %keyword.addr, align 8, !dbg !4971
  %call17 = call i32 @strcmp(i8* %19, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.170, i32 0, i32 0)) #7, !dbg !4973
  %cmp18 = icmp eq i32 %call17, 0, !dbg !4974
  br i1 %cmp18, label %if.then19, label %if.end24, !dbg !4975

if.then19:                                        ; preds = %if.end16
  %20 = load i8*, i8** %value.addr, align 8, !dbg !4976
  %call20 = call i8* @CRYPTO_strdup(i8* %20, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 972), !dbg !4978
  %21 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !4979
  %alg = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %21, i32 0, i32 2, !dbg !4980
  store i8* %call20, i8** %alg, align 8, !dbg !4981
  %22 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !4982
  %alg21 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %22, i32 0, i32 2, !dbg !4984
  %23 = load i8*, i8** %alg21, align 8, !dbg !4984
  %tobool = icmp ne i8* %23, null, !dbg !4982
  br i1 %tobool, label %if.end23, label %if.then22, !dbg !4985

if.then22:                                        ; preds = %if.then19
  store i32 0, i32* %retval, align 4, !dbg !4986
  br label %return, !dbg !4986

if.end23:                                         ; preds = %if.then19
  store i32 1, i32* %retval, align 4, !dbg !4987
  br label %return, !dbg !4987

if.end24:                                         ; preds = %if.end16
  %24 = load i8*, i8** %keyword.addr, align 8, !dbg !4988
  %call25 = call i32 @strcmp(i8* %24, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.87, i32 0, i32 0)) #7, !dbg !4990
  %cmp26 = icmp eq i32 %call25, 0, !dbg !4991
  br i1 %cmp26, label %if.then27, label %if.end29, !dbg !4992

if.then27:                                        ; preds = %if.end24
  %25 = load i8*, i8** %value.addr, align 8, !dbg !4993
  %26 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !4994
  %input = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %26, i32 0, i32 7, !dbg !4995
  %27 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !4996
  %input_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %27, i32 0, i32 8, !dbg !4997
  %call28 = call i32 @parse_bin(i8* %25, i8** %input, i64* %input_len), !dbg !4998
  store i32 %call28, i32* %retval, align 4, !dbg !4999
  br label %return, !dbg !4999

if.end29:                                         ; preds = %if.end24
  %28 = load i8*, i8** %keyword.addr, align 8, !dbg !5000
  %call30 = call i32 @strcmp(i8* %28, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i32 0, i32 0)) #7, !dbg !5002
  %cmp31 = icmp eq i32 %call30, 0, !dbg !5003
  br i1 %cmp31, label %if.then32, label %if.end34, !dbg !5004

if.then32:                                        ; preds = %if.end29
  %29 = load i8*, i8** %value.addr, align 8, !dbg !5005
  %30 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !5006
  %output = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %30, i32 0, i32 9, !dbg !5007
  %31 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !5008
  %output_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %31, i32 0, i32 10, !dbg !5009
  %call33 = call i32 @parse_bin(i8* %29, i8** %output, i64* %output_len), !dbg !5010
  store i32 %call33, i32* %retval, align 4, !dbg !5011
  br label %return, !dbg !5011

if.end34:                                         ; preds = %if.end29
  %32 = load i8*, i8** %keyword.addr, align 8, !dbg !5012
  %call35 = call i32 @strcmp(i8* %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.107, i32 0, i32 0)) #7, !dbg !5014
  %cmp36 = icmp eq i32 %call35, 0, !dbg !5015
  br i1 %cmp36, label %if.then37, label %if.end41, !dbg !5016

if.then37:                                        ; preds = %if.end34
  %33 = load %struct.mac_data_st*, %struct.mac_data_st** %mdata, align 8, !dbg !5017
  %controls = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %33, i32 0, i32 15, !dbg !5018
  %34 = load %struct.stack_st_OPENSSL_STRING*, %struct.stack_st_OPENSSL_STRING** %controls, align 8, !dbg !5018
  %35 = load i8*, i8** %value.addr, align 8, !dbg !5019
  %call38 = call i8* @CRYPTO_strdup(i8* %35, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 983), !dbg !5020
  %call39 = call i32 @sk_OPENSSL_STRING_push(%struct.stack_st_OPENSSL_STRING* %34, i8* %call38), !dbg !5021
  %cmp40 = icmp ne i32 %call39, 0, !dbg !5022
  %conv = zext i1 %cmp40 to i32, !dbg !5022
  store i32 %conv, i32* %retval, align 4, !dbg !5023
  br label %return, !dbg !5023

if.end41:                                         ; preds = %if.end34
  store i32 0, i32* %retval, align 4, !dbg !5024
  br label %return, !dbg !5024

return:                                           ; preds = %if.end41, %if.then37, %if.then32, %if.then27, %if.end23, %if.then22, %if.then14, %if.then9, %if.then4, %if.then
  %36 = load i32, i32* %retval, align 4, !dbg !5025
  ret i32 %36, !dbg !5025
}

; Function Attrs: nounwind uwtable
define internal i32 @mac_test_run(%struct.evp_test_st* %t) #0 !dbg !5026 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %expected = alloca %struct.mac_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !5027, metadata !207), !dbg !5028
  call void @llvm.dbg.declare(metadata %struct.mac_data_st** %expected, metadata !5029, metadata !207), !dbg !5030
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5031
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !5032
  %1 = load i8*, i8** %data, align 8, !dbg !5032
  %2 = bitcast i8* %1 to %struct.mac_data_st*, !dbg !5031
  store %struct.mac_data_st* %2, %struct.mac_data_st** %expected, align 8, !dbg !5030
  %3 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5033
  %mac = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %3, i32 0, i32 0, !dbg !5035
  %4 = load %struct.evp_mac_st*, %struct.evp_mac_st** %mac, align 8, !dbg !5035
  %cmp = icmp ne %struct.evp_mac_st* %4, null, !dbg !5036
  br i1 %cmp, label %if.then, label %if.end, !dbg !5037

if.then:                                          ; preds = %entry
  %5 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5038
  %call = call i32 @mac_test_run_mac(%struct.evp_test_st* %5), !dbg !5039
  store i32 %call, i32* %retval, align 4, !dbg !5040
  br label %return, !dbg !5040

if.end:                                           ; preds = %entry
  %6 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5041
  %call1 = call i32 @mac_test_run_pkey(%struct.evp_test_st* %6), !dbg !5042
  store i32 %call1, i32* %retval, align 4, !dbg !5043
  br label %return, !dbg !5043

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !5044
  ret i32 %7, !dbg !5044
}

declare %struct.evp_mac_st* @EVP_get_macbyname(i8*) #2

; Function Attrs: inlinehint nounwind uwtable
define internal %struct.stack_st_OPENSSL_STRING* @sk_OPENSSL_STRING_new_null() #5 !dbg !5045 {
entry:
  %call = call %struct.stack_st* @OPENSSL_sk_new_null(), !dbg !5048
  %0 = bitcast %struct.stack_st* %call to %struct.stack_st_OPENSSL_STRING*, !dbg !5049
  ret %struct.stack_st_OPENSSL_STRING* %0, !dbg !5050
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @sk_OPENSSL_STRING_pop_free(%struct.stack_st_OPENSSL_STRING* %sk, void (i8*)* %freefunc) #5 !dbg !5051 {
entry:
  %sk.addr = alloca %struct.stack_st_OPENSSL_STRING*, align 8
  %freefunc.addr = alloca void (i8*)*, align 8
  store %struct.stack_st_OPENSSL_STRING* %sk, %struct.stack_st_OPENSSL_STRING** %sk.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_st_OPENSSL_STRING** %sk.addr, metadata !5058, metadata !207), !dbg !5059
  store void (i8*)* %freefunc, void (i8*)** %freefunc.addr, align 8
  call void @llvm.dbg.declare(metadata void (i8*)** %freefunc.addr, metadata !5060, metadata !207), !dbg !5061
  %0 = load %struct.stack_st_OPENSSL_STRING*, %struct.stack_st_OPENSSL_STRING** %sk.addr, align 8, !dbg !5062
  %1 = bitcast %struct.stack_st_OPENSSL_STRING* %0 to %struct.stack_st*, !dbg !5063
  %2 = load void (i8*)*, void (i8*)** %freefunc.addr, align 8, !dbg !5064
  call void @OPENSSL_sk_pop_free(%struct.stack_st* %1, void (i8*)* %2), !dbg !5065
  ret void, !dbg !5066
}

; Function Attrs: nounwind uwtable
define internal void @openssl_free(i8* %m) #0 !dbg !5067 {
entry:
  %m.addr = alloca i8*, align 8
  store i8* %m, i8** %m.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %m.addr, metadata !5068, metadata !207), !dbg !5069
  %0 = load i8*, i8** %m.addr, align 8, !dbg !5070
  call void @CRYPTO_free(i8* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 941), !dbg !5071
  ret void, !dbg !5072
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @sk_OPENSSL_STRING_push(%struct.stack_st_OPENSSL_STRING* %sk, i8* %ptr) #5 !dbg !5073 {
entry:
  %sk.addr = alloca %struct.stack_st_OPENSSL_STRING*, align 8
  %ptr.addr = alloca i8*, align 8
  store %struct.stack_st_OPENSSL_STRING* %sk, %struct.stack_st_OPENSSL_STRING** %sk.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_st_OPENSSL_STRING** %sk.addr, metadata !5076, metadata !207), !dbg !5077
  store i8* %ptr, i8** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ptr.addr, metadata !5078, metadata !207), !dbg !5079
  %0 = load %struct.stack_st_OPENSSL_STRING*, %struct.stack_st_OPENSSL_STRING** %sk.addr, align 8, !dbg !5080
  %1 = bitcast %struct.stack_st_OPENSSL_STRING* %0 to %struct.stack_st*, !dbg !5081
  %2 = load i8*, i8** %ptr.addr, align 8, !dbg !5082
  %call = call i32 @OPENSSL_sk_push(%struct.stack_st* %1, i8* %2), !dbg !5083
  ret i32 %call, !dbg !5084
}

; Function Attrs: nounwind uwtable
define internal i32 @mac_test_run_mac(%struct.evp_test_st* %t) #0 !dbg !5085 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %expected = alloca %struct.mac_data_st*, align 8
  %ctx = alloca %struct.evp_mac_ctx_st*, align 8
  %algo = alloca i8*, align 8
  %algo_ctrl = alloca i32, align 4
  %got = alloca i8*, align 8
  %got_len = alloca i64, align 8
  %rv = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca i8*, align 8
  %tmpval = alloca i8*, align 8
  %value = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !5086, metadata !207), !dbg !5087
  call void @llvm.dbg.declare(metadata %struct.mac_data_st** %expected, metadata !5088, metadata !207), !dbg !5089
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5090
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !5091
  %1 = load i8*, i8** %data, align 8, !dbg !5091
  %2 = bitcast i8* %1 to %struct.mac_data_st*, !dbg !5090
  store %struct.mac_data_st* %2, %struct.mac_data_st** %expected, align 8, !dbg !5089
  call void @llvm.dbg.declare(metadata %struct.evp_mac_ctx_st** %ctx, metadata !5092, metadata !207), !dbg !5096
  store %struct.evp_mac_ctx_st* null, %struct.evp_mac_ctx_st** %ctx, align 8, !dbg !5096
  call void @llvm.dbg.declare(metadata i8** %algo, metadata !5097, metadata !207), !dbg !5098
  store i8* null, i8** %algo, align 8, !dbg !5098
  call void @llvm.dbg.declare(metadata i32* %algo_ctrl, metadata !5099, metadata !207), !dbg !5100
  store i32 0, i32* %algo_ctrl, align 4, !dbg !5100
  call void @llvm.dbg.declare(metadata i8** %got, metadata !5101, metadata !207), !dbg !5102
  store i8* null, i8** %got, align 8, !dbg !5102
  call void @llvm.dbg.declare(metadata i64* %got_len, metadata !5103, metadata !207), !dbg !5104
  call void @llvm.dbg.declare(metadata i32* %rv, metadata !5105, metadata !207), !dbg !5106
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5107, metadata !207), !dbg !5108
  %3 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5109
  %alg = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %3, i32 0, i32 2, !dbg !5111
  %4 = load i8*, i8** %alg, align 8, !dbg !5111
  %cmp = icmp eq i8* %4, null, !dbg !5112
  br i1 %cmp, label %if.then, label %if.else, !dbg !5113

if.then:                                          ; preds = %entry
  %5 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5114
  %mac = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %5, i32 0, i32 0, !dbg !5115
  %6 = load %struct.evp_mac_st*, %struct.evp_mac_st** %mac, align 8, !dbg !5115
  %call = call i32 @EVP_MAC_nid(%struct.evp_mac_st* %6), !dbg !5116
  %call1 = call i8* @OBJ_nid2sn(i32 %call), !dbg !5117
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1105, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.171, i32 0, i32 0), i8* %call1), !dbg !5119
  br label %if.end, !dbg !5121

if.else:                                          ; preds = %entry
  %7 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5122
  %mac2 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %7, i32 0, i32 0, !dbg !5123
  %8 = load %struct.evp_mac_st*, %struct.evp_mac_st** %mac2, align 8, !dbg !5123
  %call3 = call i32 @EVP_MAC_nid(%struct.evp_mac_st* %8), !dbg !5124
  %call4 = call i8* @OBJ_nid2sn(i32 %call3), !dbg !5125
  %9 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5126
  %alg5 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %9, i32 0, i32 2, !dbg !5127
  %10 = load i8*, i8** %alg5, align 8, !dbg !5127
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1108, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.172, i32 0, i32 0), i8* %call4, i8* %10), !dbg !5128
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5129
  %mac6 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %11, i32 0, i32 0, !dbg !5131
  %12 = load %struct.evp_mac_st*, %struct.evp_mac_st** %mac6, align 8, !dbg !5131
  %call7 = call %struct.evp_mac_ctx_st* @EVP_MAC_CTX_new(%struct.evp_mac_st* %12), !dbg !5132
  store %struct.evp_mac_ctx_st* %call7, %struct.evp_mac_ctx_st** %ctx, align 8, !dbg !5133
  %cmp8 = icmp eq %struct.evp_mac_ctx_st* %call7, null, !dbg !5134
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !5135

if.then9:                                         ; preds = %if.end
  %13 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5136
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %13, i32 0, i32 4, !dbg !5138
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.173, i32 0, i32 0), i8** %err, align 8, !dbg !5139
  br label %err140, !dbg !5140

if.end10:                                         ; preds = %if.end
  %14 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5141
  %alg11 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %14, i32 0, i32 2, !dbg !5143
  %15 = load i8*, i8** %alg11, align 8, !dbg !5143
  %cmp12 = icmp ne i8* %15, null, !dbg !5144
  br i1 %cmp12, label %land.lhs.true, label %if.end22, !dbg !5145

land.lhs.true:                                    ; preds = %if.end10
  store i32 5, i32* %algo_ctrl, align 4, !dbg !5146
  %16 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5148
  %alg13 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %16, i32 0, i32 2, !dbg !5149
  %17 = load i8*, i8** %alg13, align 8, !dbg !5149
  %call14 = call %struct.evp_cipher_st* @EVP_get_cipherbyname(i8* %17), !dbg !5150
  %18 = bitcast %struct.evp_cipher_st* %call14 to i8*, !dbg !5150
  store i8* %18, i8** %algo, align 8, !dbg !5151
  %cmp15 = icmp eq i8* %18, null, !dbg !5152
  br i1 %cmp15, label %land.lhs.true16, label %if.end22, !dbg !5153

land.lhs.true16:                                  ; preds = %land.lhs.true
  store i32 4, i32* %algo_ctrl, align 4, !dbg !5154
  %19 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5155
  %alg17 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %19, i32 0, i32 2, !dbg !5156
  %20 = load i8*, i8** %alg17, align 8, !dbg !5156
  %call18 = call %struct.evp_md_st* @EVP_get_digestbyname(i8* %20), !dbg !5157
  %21 = bitcast %struct.evp_md_st* %call18 to i8*, !dbg !5157
  store i8* %21, i8** %algo, align 8, !dbg !5158
  %cmp19 = icmp eq i8* %21, null, !dbg !5159
  br i1 %cmp19, label %if.then20, label %if.end22, !dbg !5160

if.then20:                                        ; preds = %land.lhs.true16
  %22 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5162
  %err21 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %22, i32 0, i32 4, !dbg !5164
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.174, i32 0, i32 0), i8** %err21, align 8, !dbg !5165
  br label %err140, !dbg !5166

if.end22:                                         ; preds = %land.lhs.true16, %land.lhs.true, %if.end10
  %23 = load i32, i32* %algo_ctrl, align 4, !dbg !5167
  %cmp23 = icmp ne i32 %23, 0, !dbg !5169
  br i1 %cmp23, label %if.then24, label %if.end35, !dbg !5170

if.then24:                                        ; preds = %if.end22
  %24 = load %struct.evp_mac_ctx_st*, %struct.evp_mac_ctx_st** %ctx, align 8, !dbg !5171
  %25 = load i32, i32* %algo_ctrl, align 4, !dbg !5173
  %26 = load i8*, i8** %algo, align 8, !dbg !5174
  %call25 = call i32 (%struct.evp_mac_ctx_st*, i32, ...) @EVP_MAC_ctrl(%struct.evp_mac_ctx_st* %24, i32 %25, i8* %26), !dbg !5175
  store i32 %call25, i32* %rv, align 4, !dbg !5176
  %27 = load i32, i32* %rv, align 4, !dbg !5177
  %cmp26 = icmp eq i32 %27, -2, !dbg !5179
  br i1 %cmp26, label %if.then27, label %if.else29, !dbg !5180

if.then27:                                        ; preds = %if.then24
  %28 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5181
  %err28 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %28, i32 0, i32 4, !dbg !5183
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.175, i32 0, i32 0), i8** %err28, align 8, !dbg !5184
  br label %err140, !dbg !5185

if.else29:                                        ; preds = %if.then24
  %29 = load i32, i32* %rv, align 4, !dbg !5186
  %cmp30 = icmp sle i32 %29, 0, !dbg !5188
  br i1 %cmp30, label %if.then31, label %if.end33, !dbg !5189

if.then31:                                        ; preds = %if.else29
  %30 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5190
  %err32 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %30, i32 0, i32 4, !dbg !5192
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.176, i32 0, i32 0), i8** %err32, align 8, !dbg !5193
  br label %err140, !dbg !5194

if.end33:                                         ; preds = %if.else29
  br label %if.end34

if.end34:                                         ; preds = %if.end33
  br label %if.end35, !dbg !5195

if.end35:                                         ; preds = %if.end34, %if.end22
  %31 = load %struct.evp_mac_ctx_st*, %struct.evp_mac_ctx_st** %ctx, align 8, !dbg !5196
  %32 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5197
  %key = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %32, i32 0, i32 3, !dbg !5198
  %33 = load i8*, i8** %key, align 8, !dbg !5198
  %34 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5199
  %key_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %34, i32 0, i32 4, !dbg !5200
  %35 = load i64, i64* %key_len, align 8, !dbg !5200
  %call36 = call i32 (%struct.evp_mac_ctx_st*, i32, ...) @EVP_MAC_ctrl(%struct.evp_mac_ctx_st* %31, i32 1, i8* %33, i64 %35), !dbg !5201
  store i32 %call36, i32* %rv, align 4, !dbg !5202
  %36 = load i32, i32* %rv, align 4, !dbg !5203
  %cmp37 = icmp eq i32 %36, -2, !dbg !5205
  br i1 %cmp37, label %if.then38, label %if.else40, !dbg !5206

if.then38:                                        ; preds = %if.end35
  %37 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5207
  %err39 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %37, i32 0, i32 4, !dbg !5209
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.175, i32 0, i32 0), i8** %err39, align 8, !dbg !5210
  br label %err140, !dbg !5211

if.else40:                                        ; preds = %if.end35
  %38 = load i32, i32* %rv, align 4, !dbg !5212
  %cmp41 = icmp sle i32 %38, 0, !dbg !5214
  br i1 %cmp41, label %if.then42, label %if.end44, !dbg !5215

if.then42:                                        ; preds = %if.else40
  %39 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5216
  %err43 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %39, i32 0, i32 4, !dbg !5218
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.176, i32 0, i32 0), i8** %err43, align 8, !dbg !5219
  br label %err140, !dbg !5220

if.end44:                                         ; preds = %if.else40
  br label %if.end45

if.end45:                                         ; preds = %if.end44
  %40 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5221
  %custom = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %40, i32 0, i32 11, !dbg !5223
  %41 = load i8*, i8** %custom, align 8, !dbg !5223
  %cmp46 = icmp ne i8* %41, null, !dbg !5224
  br i1 %cmp46, label %if.then47, label %if.end59, !dbg !5225

if.then47:                                        ; preds = %if.end45
  %42 = load %struct.evp_mac_ctx_st*, %struct.evp_mac_ctx_st** %ctx, align 8, !dbg !5226
  %43 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5228
  %custom48 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %43, i32 0, i32 11, !dbg !5229
  %44 = load i8*, i8** %custom48, align 8, !dbg !5229
  %45 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5230
  %custom_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %45, i32 0, i32 12, !dbg !5231
  %46 = load i64, i64* %custom_len, align 8, !dbg !5231
  %call49 = call i32 (%struct.evp_mac_ctx_st*, i32, ...) @EVP_MAC_ctrl(%struct.evp_mac_ctx_st* %42, i32 8, i8* %44, i64 %46), !dbg !5232
  store i32 %call49, i32* %rv, align 4, !dbg !5233
  %47 = load i32, i32* %rv, align 4, !dbg !5234
  %cmp50 = icmp eq i32 %47, -2, !dbg !5236
  br i1 %cmp50, label %if.then51, label %if.else53, !dbg !5237

if.then51:                                        ; preds = %if.then47
  %48 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5238
  %err52 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %48, i32 0, i32 4, !dbg !5240
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.175, i32 0, i32 0), i8** %err52, align 8, !dbg !5241
  br label %err140, !dbg !5242

if.else53:                                        ; preds = %if.then47
  %49 = load i32, i32* %rv, align 4, !dbg !5243
  %cmp54 = icmp sle i32 %49, 0, !dbg !5245
  br i1 %cmp54, label %if.then55, label %if.end57, !dbg !5246

if.then55:                                        ; preds = %if.else53
  %50 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5247
  %err56 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %50, i32 0, i32 4, !dbg !5249
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.176, i32 0, i32 0), i8** %err56, align 8, !dbg !5250
  br label %err140, !dbg !5251

if.end57:                                         ; preds = %if.else53
  br label %if.end58

if.end58:                                         ; preds = %if.end57
  br label %if.end59, !dbg !5252

if.end59:                                         ; preds = %if.end58, %if.end45
  %51 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5253
  %salt = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %51, i32 0, i32 13, !dbg !5255
  %52 = load i8*, i8** %salt, align 8, !dbg !5255
  %cmp60 = icmp ne i8* %52, null, !dbg !5256
  br i1 %cmp60, label %if.then61, label %if.end73, !dbg !5257

if.then61:                                        ; preds = %if.end59
  %53 = load %struct.evp_mac_ctx_st*, %struct.evp_mac_ctx_st** %ctx, align 8, !dbg !5258
  %54 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5260
  %salt62 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %54, i32 0, i32 13, !dbg !5261
  %55 = load i8*, i8** %salt62, align 8, !dbg !5261
  %56 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5262
  %salt_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %56, i32 0, i32 14, !dbg !5263
  %57 = load i64, i64* %salt_len, align 8, !dbg !5263
  %call63 = call i32 (%struct.evp_mac_ctx_st*, i32, ...) @EVP_MAC_ctrl(%struct.evp_mac_ctx_st* %53, i32 10, i8* %55, i64 %57), !dbg !5264
  store i32 %call63, i32* %rv, align 4, !dbg !5265
  %58 = load i32, i32* %rv, align 4, !dbg !5266
  %cmp64 = icmp eq i32 %58, -2, !dbg !5268
  br i1 %cmp64, label %if.then65, label %if.else67, !dbg !5269

if.then65:                                        ; preds = %if.then61
  %59 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5270
  %err66 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %59, i32 0, i32 4, !dbg !5272
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.175, i32 0, i32 0), i8** %err66, align 8, !dbg !5273
  br label %err140, !dbg !5274

if.else67:                                        ; preds = %if.then61
  %60 = load i32, i32* %rv, align 4, !dbg !5275
  %cmp68 = icmp sle i32 %60, 0, !dbg !5277
  br i1 %cmp68, label %if.then69, label %if.end71, !dbg !5278

if.then69:                                        ; preds = %if.else67
  %61 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5279
  %err70 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %61, i32 0, i32 4, !dbg !5281
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.176, i32 0, i32 0), i8** %err70, align 8, !dbg !5282
  br label %err140, !dbg !5283

if.end71:                                         ; preds = %if.else67
  br label %if.end72

if.end72:                                         ; preds = %if.end71
  br label %if.end73, !dbg !5284

if.end73:                                         ; preds = %if.end72, %if.end59
  %62 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5285
  %iv = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %62, i32 0, i32 5, !dbg !5287
  %63 = load i8*, i8** %iv, align 8, !dbg !5287
  %cmp74 = icmp ne i8* %63, null, !dbg !5288
  br i1 %cmp74, label %if.then75, label %if.end87, !dbg !5289

if.then75:                                        ; preds = %if.end73
  %64 = load %struct.evp_mac_ctx_st*, %struct.evp_mac_ctx_st** %ctx, align 8, !dbg !5290
  %65 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5292
  %iv76 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %65, i32 0, i32 5, !dbg !5293
  %66 = load i8*, i8** %iv76, align 8, !dbg !5293
  %67 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5294
  %iv_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %67, i32 0, i32 6, !dbg !5295
  %68 = load i64, i64* %iv_len, align 8, !dbg !5295
  %call77 = call i32 (%struct.evp_mac_ctx_st*, i32, ...) @EVP_MAC_ctrl(%struct.evp_mac_ctx_st* %64, i32 7, i8* %66, i64 %68), !dbg !5296
  store i32 %call77, i32* %rv, align 4, !dbg !5297
  %69 = load i32, i32* %rv, align 4, !dbg !5298
  %cmp78 = icmp eq i32 %69, -2, !dbg !5300
  br i1 %cmp78, label %if.then79, label %if.else81, !dbg !5301

if.then79:                                        ; preds = %if.then75
  %70 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5302
  %err80 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %70, i32 0, i32 4, !dbg !5304
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.175, i32 0, i32 0), i8** %err80, align 8, !dbg !5305
  br label %err140, !dbg !5306

if.else81:                                        ; preds = %if.then75
  %71 = load i32, i32* %rv, align 4, !dbg !5307
  %cmp82 = icmp sle i32 %71, 0, !dbg !5309
  br i1 %cmp82, label %if.then83, label %if.end85, !dbg !5310

if.then83:                                        ; preds = %if.else81
  %72 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5311
  %err84 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %72, i32 0, i32 4, !dbg !5313
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.176, i32 0, i32 0), i8** %err84, align 8, !dbg !5314
  br label %err140, !dbg !5315

if.end85:                                         ; preds = %if.else81
  br label %if.end86

if.end86:                                         ; preds = %if.end85
  br label %if.end87, !dbg !5316

if.end87:                                         ; preds = %if.end86, %if.end73
  store i32 0, i32* %i, align 4, !dbg !5317
  br label %for.cond, !dbg !5319

for.cond:                                         ; preds = %for.inc, %if.end87
  %73 = load i32, i32* %i, align 4, !dbg !5320
  %74 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5323
  %controls = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %74, i32 0, i32 15, !dbg !5324
  %75 = load %struct.stack_st_OPENSSL_STRING*, %struct.stack_st_OPENSSL_STRING** %controls, align 8, !dbg !5324
  %call88 = call i32 @sk_OPENSSL_STRING_num(%struct.stack_st_OPENSSL_STRING* %75), !dbg !5325
  %cmp89 = icmp slt i32 %73, %call88, !dbg !5326
  br i1 %cmp89, label %for.body, label %for.end, !dbg !5327

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i8** %p, metadata !5328, metadata !207), !dbg !5330
  call void @llvm.dbg.declare(metadata i8** %tmpval, metadata !5331, metadata !207), !dbg !5332
  call void @llvm.dbg.declare(metadata i8** %value, metadata !5333, metadata !207), !dbg !5334
  %76 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5335
  %controls90 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %76, i32 0, i32 15, !dbg !5336
  %77 = load %struct.stack_st_OPENSSL_STRING*, %struct.stack_st_OPENSSL_STRING** %controls90, align 8, !dbg !5336
  %78 = load i32, i32* %i, align 4, !dbg !5337
  %call91 = call i8* @sk_OPENSSL_STRING_value(%struct.stack_st_OPENSSL_STRING* %77, i32 %78), !dbg !5338
  store i8* %call91, i8** %value, align 8, !dbg !5334
  %79 = load i8*, i8** %value, align 8, !dbg !5339
  %call92 = call i8* @CRYPTO_strdup(i8* %79, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1193), !dbg !5341
  store i8* %call92, i8** %tmpval, align 8, !dbg !5342
  %call93 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1193, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.108, i32 0, i32 0), i8* %call92), !dbg !5343
  %tobool = icmp ne i32 %call93, 0, !dbg !5345
  br i1 %tobool, label %if.end96, label %if.then94, !dbg !5346

if.then94:                                        ; preds = %for.body
  %80 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5347
  %err95 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %80, i32 0, i32 4, !dbg !5349
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.176, i32 0, i32 0), i8** %err95, align 8, !dbg !5350
  br label %err140, !dbg !5351

if.end96:                                         ; preds = %for.body
  %81 = load i8*, i8** %tmpval, align 8, !dbg !5352
  %call97 = call i8* @strchr(i8* %81, i32 58) #7, !dbg !5353
  store i8* %call97, i8** %p, align 8, !dbg !5354
  %82 = load i8*, i8** %p, align 8, !dbg !5355
  %cmp98 = icmp ne i8* %82, null, !dbg !5357
  br i1 %cmp98, label %if.then99, label %if.end100, !dbg !5358

if.then99:                                        ; preds = %if.end96
  %83 = load i8*, i8** %p, align 8, !dbg !5359
  %incdec.ptr = getelementptr inbounds i8, i8* %83, i32 1, !dbg !5359
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !5359
  store i8 0, i8* %83, align 1, !dbg !5360
  br label %if.end100, !dbg !5361

if.end100:                                        ; preds = %if.then99, %if.end96
  %84 = load %struct.evp_mac_ctx_st*, %struct.evp_mac_ctx_st** %ctx, align 8, !dbg !5362
  %85 = load i8*, i8** %tmpval, align 8, !dbg !5363
  %86 = load i8*, i8** %p, align 8, !dbg !5364
  %call101 = call i32 @EVP_MAC_ctrl_str(%struct.evp_mac_ctx_st* %84, i8* %85, i8* %86), !dbg !5365
  store i32 %call101, i32* %rv, align 4, !dbg !5366
  %87 = load i8*, i8** %tmpval, align 8, !dbg !5367
  call void @CRYPTO_free(i8* %87, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1201), !dbg !5368
  %88 = load i32, i32* %rv, align 4, !dbg !5369
  %cmp102 = icmp eq i32 %88, -2, !dbg !5371
  br i1 %cmp102, label %if.then103, label %if.else105, !dbg !5372

if.then103:                                       ; preds = %if.end100
  %89 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5373
  %err104 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %89, i32 0, i32 4, !dbg !5375
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.175, i32 0, i32 0), i8** %err104, align 8, !dbg !5376
  br label %err140, !dbg !5377

if.else105:                                       ; preds = %if.end100
  %90 = load i32, i32* %rv, align 4, !dbg !5378
  %cmp106 = icmp sle i32 %90, 0, !dbg !5380
  br i1 %cmp106, label %if.then107, label %if.end109, !dbg !5381

if.then107:                                       ; preds = %if.else105
  %91 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5382
  %err108 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %91, i32 0, i32 4, !dbg !5384
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.176, i32 0, i32 0), i8** %err108, align 8, !dbg !5385
  br label %err140, !dbg !5386

if.end109:                                        ; preds = %if.else105
  br label %if.end110

if.end110:                                        ; preds = %if.end109
  br label %for.inc, !dbg !5387

for.inc:                                          ; preds = %if.end110
  %92 = load i32, i32* %i, align 4, !dbg !5388
  %inc = add nsw i32 %92, 1, !dbg !5388
  store i32 %inc, i32* %i, align 4, !dbg !5388
  br label %for.cond, !dbg !5390, !llvm.loop !5391

for.end:                                          ; preds = %for.cond
  %93 = load %struct.evp_mac_ctx_st*, %struct.evp_mac_ctx_st** %ctx, align 8, !dbg !5393
  %call111 = call i32 @EVP_MAC_init(%struct.evp_mac_ctx_st* %93), !dbg !5395
  %tobool112 = icmp ne i32 %call111, 0, !dbg !5395
  br i1 %tobool112, label %if.end115, label %if.then113, !dbg !5396

if.then113:                                       ; preds = %for.end
  %94 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5397
  %err114 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %94, i32 0, i32 4, !dbg !5399
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.177, i32 0, i32 0), i8** %err114, align 8, !dbg !5400
  br label %err140, !dbg !5401

if.end115:                                        ; preds = %for.end
  %95 = load %struct.evp_mac_ctx_st*, %struct.evp_mac_ctx_st** %ctx, align 8, !dbg !5402
  %96 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5404
  %input = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %96, i32 0, i32 7, !dbg !5405
  %97 = load i8*, i8** %input, align 8, !dbg !5405
  %98 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5406
  %input_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %98, i32 0, i32 8, !dbg !5407
  %99 = load i64, i64* %input_len, align 8, !dbg !5407
  %call116 = call i32 @EVP_MAC_update(%struct.evp_mac_ctx_st* %95, i8* %97, i64 %99), !dbg !5408
  %tobool117 = icmp ne i32 %call116, 0, !dbg !5408
  br i1 %tobool117, label %if.end120, label %if.then118, !dbg !5409

if.then118:                                       ; preds = %if.end115
  %100 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5410
  %err119 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %100, i32 0, i32 4, !dbg !5412
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.178, i32 0, i32 0), i8** %err119, align 8, !dbg !5413
  br label %err140, !dbg !5414

if.end120:                                        ; preds = %if.end115
  %101 = load %struct.evp_mac_ctx_st*, %struct.evp_mac_ctx_st** %ctx, align 8, !dbg !5415
  %call121 = call i32 @EVP_MAC_final(%struct.evp_mac_ctx_st* %101, i8* null, i64* %got_len), !dbg !5417
  %tobool122 = icmp ne i32 %call121, 0, !dbg !5417
  br i1 %tobool122, label %if.end125, label %if.then123, !dbg !5418

if.then123:                                       ; preds = %if.end120
  %102 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5419
  %err124 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %102, i32 0, i32 4, !dbg !5421
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.179, i32 0, i32 0), i8** %err124, align 8, !dbg !5422
  br label %err140, !dbg !5423

if.end125:                                        ; preds = %if.end120
  %103 = load i64, i64* %got_len, align 8, !dbg !5424
  %call126 = call i8* @CRYPTO_malloc(i64 %103, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1222), !dbg !5426
  store i8* %call126, i8** %got, align 8, !dbg !5427
  %call127 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1222, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.112, i32 0, i32 0), i8* %call126), !dbg !5428
  %tobool128 = icmp ne i32 %call127, 0, !dbg !5430
  br i1 %tobool128, label %if.end131, label %if.then129, !dbg !5431

if.then129:                                       ; preds = %if.end125
  %104 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5432
  %err130 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %104, i32 0, i32 4, !dbg !5434
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i32 0, i32 0), i8** %err130, align 8, !dbg !5435
  br label %err140, !dbg !5436

if.end131:                                        ; preds = %if.end125
  %105 = load %struct.evp_mac_ctx_st*, %struct.evp_mac_ctx_st** %ctx, align 8, !dbg !5437
  %106 = load i8*, i8** %got, align 8, !dbg !5439
  %call132 = call i32 @EVP_MAC_final(%struct.evp_mac_ctx_st* %105, i8* %106, i64* %got_len), !dbg !5440
  %tobool133 = icmp ne i32 %call132, 0, !dbg !5440
  br i1 %tobool133, label %lor.lhs.false, label %if.then136, !dbg !5441

lor.lhs.false:                                    ; preds = %if.end131
  %107 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5442
  %108 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5444
  %output = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %108, i32 0, i32 9, !dbg !5445
  %109 = load i8*, i8** %output, align 8, !dbg !5445
  %110 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5446
  %output_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %110, i32 0, i32 10, !dbg !5447
  %111 = load i64, i64* %output_len, align 8, !dbg !5447
  %112 = load i8*, i8** %got, align 8, !dbg !5448
  %113 = load i64, i64* %got_len, align 8, !dbg !5449
  %call134 = call i32 @memory_err_compare(%struct.evp_test_st* %107, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.180, i32 0, i32 0), i8* %109, i64 %111, i8* %112, i64 %113), !dbg !5450
  %tobool135 = icmp ne i32 %call134, 0, !dbg !5450
  br i1 %tobool135, label %if.end138, label %if.then136, !dbg !5451

if.then136:                                       ; preds = %lor.lhs.false, %if.end131
  %114 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5452
  %err137 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %114, i32 0, i32 4, !dbg !5454
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.180, i32 0, i32 0), i8** %err137, align 8, !dbg !5455
  br label %err140, !dbg !5456

if.end138:                                        ; preds = %lor.lhs.false
  %115 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5457
  %err139 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %115, i32 0, i32 4, !dbg !5458
  store i8* null, i8** %err139, align 8, !dbg !5459
  br label %err140, !dbg !5457

err140:                                           ; preds = %if.end138, %if.then136, %if.then129, %if.then123, %if.then118, %if.then113, %if.then107, %if.then103, %if.then94, %if.then83, %if.then79, %if.then69, %if.then65, %if.then55, %if.then51, %if.then42, %if.then38, %if.then31, %if.then27, %if.then20, %if.then9
  %116 = load %struct.evp_mac_ctx_st*, %struct.evp_mac_ctx_st** %ctx, align 8, !dbg !5460
  call void @EVP_MAC_CTX_free(%struct.evp_mac_ctx_st* %116), !dbg !5461
  %117 = load i8*, i8** %got, align 8, !dbg !5462
  call void @CRYPTO_free(i8* %117, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1236), !dbg !5463
  ret i32 1, !dbg !5464
}

; Function Attrs: nounwind uwtable
define internal i32 @mac_test_run_pkey(%struct.evp_test_st* %t) #0 !dbg !5465 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %expected = alloca %struct.mac_data_st*, align 8
  %mctx = alloca %struct.evp_md_ctx_st*, align 8
  %pctx = alloca %struct.evp_pkey_ctx_st*, align 8
  %genctx = alloca %struct.evp_pkey_ctx_st*, align 8
  %key = alloca %struct.evp_pkey_st*, align 8
  %md = alloca %struct.evp_md_st*, align 8
  %got = alloca i8*, align 8
  %got_len = alloca i64, align 8
  %i = alloca i32, align 4
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !5466, metadata !207), !dbg !5467
  call void @llvm.dbg.declare(metadata %struct.mac_data_st** %expected, metadata !5468, metadata !207), !dbg !5469
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5470
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !5471
  %1 = load i8*, i8** %data, align 8, !dbg !5471
  %2 = bitcast i8* %1 to %struct.mac_data_st*, !dbg !5470
  store %struct.mac_data_st* %2, %struct.mac_data_st** %expected, align 8, !dbg !5469
  call void @llvm.dbg.declare(metadata %struct.evp_md_ctx_st** %mctx, metadata !5472, metadata !207), !dbg !5473
  store %struct.evp_md_ctx_st* null, %struct.evp_md_ctx_st** %mctx, align 8, !dbg !5473
  call void @llvm.dbg.declare(metadata %struct.evp_pkey_ctx_st** %pctx, metadata !5474, metadata !207), !dbg !5475
  store %struct.evp_pkey_ctx_st* null, %struct.evp_pkey_ctx_st** %pctx, align 8, !dbg !5475
  call void @llvm.dbg.declare(metadata %struct.evp_pkey_ctx_st** %genctx, metadata !5476, metadata !207), !dbg !5477
  store %struct.evp_pkey_ctx_st* null, %struct.evp_pkey_ctx_st** %genctx, align 8, !dbg !5477
  call void @llvm.dbg.declare(metadata %struct.evp_pkey_st** %key, metadata !5478, metadata !207), !dbg !5479
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %key, align 8, !dbg !5479
  call void @llvm.dbg.declare(metadata %struct.evp_md_st** %md, metadata !5480, metadata !207), !dbg !5481
  store %struct.evp_md_st* null, %struct.evp_md_st** %md, align 8, !dbg !5481
  call void @llvm.dbg.declare(metadata i8** %got, metadata !5482, metadata !207), !dbg !5483
  store i8* null, i8** %got, align 8, !dbg !5483
  call void @llvm.dbg.declare(metadata i64* %got_len, metadata !5484, metadata !207), !dbg !5485
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5486, metadata !207), !dbg !5487
  %3 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5488
  %alg = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %3, i32 0, i32 2, !dbg !5490
  %4 = load i8*, i8** %alg, align 8, !dbg !5490
  %cmp = icmp eq i8* %4, null, !dbg !5491
  br i1 %cmp, label %if.then, label %if.else, !dbg !5492

if.then:                                          ; preds = %entry
  %5 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5493
  %type = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %5, i32 0, i32 1, !dbg !5494
  %6 = load i32, i32* %type, align 8, !dbg !5494
  %call = call i8* @OBJ_nid2sn(i32 %6), !dbg !5495
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1021, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.181, i32 0, i32 0), i8* %call), !dbg !5496
  br label %if.end, !dbg !5498

if.else:                                          ; preds = %entry
  %7 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5499
  %type1 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %7, i32 0, i32 1, !dbg !5500
  %8 = load i32, i32* %type1, align 8, !dbg !5500
  %call2 = call i8* @OBJ_nid2sn(i32 %8), !dbg !5501
  %9 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5502
  %alg3 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %9, i32 0, i32 2, !dbg !5503
  %10 = load i8*, i8** %alg3, align 8, !dbg !5503
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1024, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.182, i32 0, i32 0), i8* %call2, i8* %10), !dbg !5504
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %11 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5505
  %type4 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %11, i32 0, i32 1, !dbg !5507
  %12 = load i32, i32* %type4, align 8, !dbg !5507
  %cmp5 = icmp eq i32 %12, 894, !dbg !5508
  br i1 %cmp5, label %if.then6, label %if.else11, !dbg !5509

if.then6:                                         ; preds = %if.end
  %13 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5510
  %key7 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %13, i32 0, i32 3, !dbg !5511
  %14 = load i8*, i8** %key7, align 8, !dbg !5511
  %15 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5512
  %key_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %15, i32 0, i32 4, !dbg !5513
  %16 = load i64, i64* %key_len, align 8, !dbg !5513
  %17 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5514
  %alg8 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %17, i32 0, i32 2, !dbg !5515
  %18 = load i8*, i8** %alg8, align 8, !dbg !5515
  %call9 = call %struct.evp_cipher_st* @EVP_get_cipherbyname(i8* %18), !dbg !5516
  %call10 = call %struct.evp_pkey_st* @EVP_PKEY_new_CMAC_key(%struct.engine_st* null, i8* %14, i64 %16, %struct.evp_cipher_st* %call9), !dbg !5517
  store %struct.evp_pkey_st* %call10, %struct.evp_pkey_st** %key, align 8, !dbg !5518
  br label %if.end16, !dbg !5519

if.else11:                                        ; preds = %if.end
  %19 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5520
  %type12 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %19, i32 0, i32 1, !dbg !5521
  %20 = load i32, i32* %type12, align 8, !dbg !5521
  %21 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5522
  %key13 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %21, i32 0, i32 3, !dbg !5523
  %22 = load i8*, i8** %key13, align 8, !dbg !5523
  %23 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5524
  %key_len14 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %23, i32 0, i32 4, !dbg !5525
  %24 = load i64, i64* %key_len14, align 8, !dbg !5525
  %call15 = call %struct.evp_pkey_st* @EVP_PKEY_new_raw_private_key(i32 %20, %struct.engine_st* null, i8* %22, i64 %24), !dbg !5526
  store %struct.evp_pkey_st* %call15, %struct.evp_pkey_st** %key, align 8, !dbg !5527
  br label %if.end16

if.end16:                                         ; preds = %if.else11, %if.then6
  %25 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %key, align 8, !dbg !5528
  %cmp17 = icmp eq %struct.evp_pkey_st* %25, null, !dbg !5530
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !5531

if.then18:                                        ; preds = %if.end16
  %26 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5532
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %26, i32 0, i32 4, !dbg !5534
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.183, i32 0, i32 0), i8** %err, align 8, !dbg !5535
  br label %err74, !dbg !5536

if.end19:                                         ; preds = %if.end16
  %27 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5537
  %type20 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %27, i32 0, i32 1, !dbg !5539
  %28 = load i32, i32* %type20, align 8, !dbg !5539
  %cmp21 = icmp eq i32 %28, 855, !dbg !5540
  br i1 %cmp21, label %if.then22, label %if.end29, !dbg !5541

if.then22:                                        ; preds = %if.end19
  %29 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5542
  %alg23 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %29, i32 0, i32 2, !dbg !5545
  %30 = load i8*, i8** %alg23, align 8, !dbg !5545
  %call24 = call %struct.evp_md_st* @EVP_get_digestbyname(i8* %30), !dbg !5546
  store %struct.evp_md_st* %call24, %struct.evp_md_st** %md, align 8, !dbg !5547
  %31 = bitcast %struct.evp_md_st* %call24 to i8*, !dbg !5548
  %call25 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1046, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.184, i32 0, i32 0), i8* %31), !dbg !5549
  %tobool = icmp ne i32 %call25, 0, !dbg !5551
  br i1 %tobool, label %if.end28, label %if.then26, !dbg !5552

if.then26:                                        ; preds = %if.then22
  %32 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5553
  %err27 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %32, i32 0, i32 4, !dbg !5555
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.185, i32 0, i32 0), i8** %err27, align 8, !dbg !5556
  br label %err74, !dbg !5557

if.end28:                                         ; preds = %if.then22
  br label %if.end29, !dbg !5558

if.end29:                                         ; preds = %if.end28, %if.end19
  %call30 = call %struct.evp_md_ctx_st* @EVP_MD_CTX_new(), !dbg !5559
  store %struct.evp_md_ctx_st* %call30, %struct.evp_md_ctx_st** %mctx, align 8, !dbg !5561
  %33 = bitcast %struct.evp_md_ctx_st* %call30 to i8*, !dbg !5562
  %call31 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1051, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.94, i32 0, i32 0), i8* %33), !dbg !5563
  %tobool32 = icmp ne i32 %call31, 0, !dbg !5565
  br i1 %tobool32, label %if.end35, label %if.then33, !dbg !5566

if.then33:                                        ; preds = %if.end29
  %34 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5567
  %err34 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %34, i32 0, i32 4, !dbg !5569
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.127, i32 0, i32 0), i8** %err34, align 8, !dbg !5570
  br label %err74, !dbg !5571

if.end35:                                         ; preds = %if.end29
  %35 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %mctx, align 8, !dbg !5572
  %36 = load %struct.evp_md_st*, %struct.evp_md_st** %md, align 8, !dbg !5574
  %37 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %key, align 8, !dbg !5575
  %call36 = call i32 @EVP_DigestSignInit(%struct.evp_md_ctx_st* %35, %struct.evp_pkey_ctx_st** %pctx, %struct.evp_md_st* %36, %struct.engine_st* null, %struct.evp_pkey_st* %37), !dbg !5576
  %tobool37 = icmp ne i32 %call36, 0, !dbg !5576
  br i1 %tobool37, label %if.end40, label %if.then38, !dbg !5577

if.then38:                                        ; preds = %if.end35
  %38 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5578
  %err39 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %38, i32 0, i32 4, !dbg !5580
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.106, i32 0, i32 0), i8** %err39, align 8, !dbg !5581
  br label %err74, !dbg !5582

if.end40:                                         ; preds = %if.end35
  store i32 0, i32* %i, align 4, !dbg !5583
  br label %for.cond, !dbg !5585

for.cond:                                         ; preds = %for.inc, %if.end40
  %39 = load i32, i32* %i, align 4, !dbg !5586
  %40 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5589
  %controls = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %40, i32 0, i32 15, !dbg !5590
  %41 = load %struct.stack_st_OPENSSL_STRING*, %struct.stack_st_OPENSSL_STRING** %controls, align 8, !dbg !5590
  %call41 = call i32 @sk_OPENSSL_STRING_num(%struct.stack_st_OPENSSL_STRING* %41), !dbg !5591
  %cmp42 = icmp slt i32 %39, %call41, !dbg !5592
  br i1 %cmp42, label %for.body, label %for.end, !dbg !5593

for.body:                                         ; preds = %for.cond
  %42 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5594
  %43 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %pctx, align 8, !dbg !5596
  %44 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5597
  %controls43 = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %44, i32 0, i32 15, !dbg !5598
  %45 = load %struct.stack_st_OPENSSL_STRING*, %struct.stack_st_OPENSSL_STRING** %controls43, align 8, !dbg !5598
  %46 = load i32, i32* %i, align 4, !dbg !5599
  %call44 = call i8* @sk_OPENSSL_STRING_value(%struct.stack_st_OPENSSL_STRING* %45, i32 %46), !dbg !5600
  %call45 = call i32 @mac_test_ctrl_pkey(%struct.evp_test_st* %42, %struct.evp_pkey_ctx_st* %43, i8* %call44), !dbg !5601
  %tobool46 = icmp ne i32 %call45, 0, !dbg !5601
  br i1 %tobool46, label %if.end49, label %if.then47, !dbg !5602

if.then47:                                        ; preds = %for.body
  %47 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5603
  %err48 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %47, i32 0, i32 4, !dbg !5605
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.186, i32 0, i32 0), i8** %err48, align 8, !dbg !5606
  br label %err74, !dbg !5607

if.end49:                                         ; preds = %for.body
  br label %for.inc, !dbg !5608

for.inc:                                          ; preds = %if.end49
  %48 = load i32, i32* %i, align 4, !dbg !5610
  %inc = add nsw i32 %48, 1, !dbg !5610
  store i32 %inc, i32* %i, align 4, !dbg !5610
  br label %for.cond, !dbg !5612, !llvm.loop !5613

for.end:                                          ; preds = %for.cond
  %49 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %mctx, align 8, !dbg !5615
  %50 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5617
  %input = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %50, i32 0, i32 7, !dbg !5618
  %51 = load i8*, i8** %input, align 8, !dbg !5618
  %52 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5619
  %input_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %52, i32 0, i32 8, !dbg !5620
  %53 = load i64, i64* %input_len, align 8, !dbg !5620
  %call50 = call i32 @EVP_DigestUpdate(%struct.evp_md_ctx_st* %49, i8* %51, i64 %53), !dbg !5621
  %tobool51 = icmp ne i32 %call50, 0, !dbg !5621
  br i1 %tobool51, label %if.end54, label %if.then52, !dbg !5622

if.then52:                                        ; preds = %for.end
  %54 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5623
  %err53 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %54, i32 0, i32 4, !dbg !5625
  store i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.187, i32 0, i32 0), i8** %err53, align 8, !dbg !5626
  br label %err74, !dbg !5627

if.end54:                                         ; preds = %for.end
  %55 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %mctx, align 8, !dbg !5628
  %call55 = call i32 @EVP_DigestSignFinal(%struct.evp_md_ctx_st* %55, i8* null, i64* %got_len), !dbg !5630
  %tobool56 = icmp ne i32 %call55, 0, !dbg !5630
  br i1 %tobool56, label %if.end59, label %if.then57, !dbg !5631

if.then57:                                        ; preds = %if.end54
  %56 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5632
  %err58 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %56, i32 0, i32 4, !dbg !5634
  store i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.111, i32 0, i32 0), i8** %err58, align 8, !dbg !5635
  br label %err74, !dbg !5636

if.end59:                                         ; preds = %if.end54
  %57 = load i64, i64* %got_len, align 8, !dbg !5637
  %call60 = call i8* @CRYPTO_malloc(i64 %57, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1074), !dbg !5639
  store i8* %call60, i8** %got, align 8, !dbg !5640
  %call61 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1074, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.112, i32 0, i32 0), i8* %call60), !dbg !5641
  %tobool62 = icmp ne i32 %call61, 0, !dbg !5643
  br i1 %tobool62, label %if.end65, label %if.then63, !dbg !5644

if.then63:                                        ; preds = %if.end59
  %58 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5645
  %err64 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %58, i32 0, i32 4, !dbg !5647
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.65, i32 0, i32 0), i8** %err64, align 8, !dbg !5648
  br label %err74, !dbg !5649

if.end65:                                         ; preds = %if.end59
  %59 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %mctx, align 8, !dbg !5650
  %60 = load i8*, i8** %got, align 8, !dbg !5652
  %call66 = call i32 @EVP_DigestSignFinal(%struct.evp_md_ctx_st* %59, i8* %60, i64* %got_len), !dbg !5653
  %tobool67 = icmp ne i32 %call66, 0, !dbg !5653
  br i1 %tobool67, label %lor.lhs.false, label %if.then70, !dbg !5654

lor.lhs.false:                                    ; preds = %if.end65
  %61 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5655
  %62 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5657
  %output = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %62, i32 0, i32 9, !dbg !5658
  %63 = load i8*, i8** %output, align 8, !dbg !5658
  %64 = load %struct.mac_data_st*, %struct.mac_data_st** %expected, align 8, !dbg !5659
  %output_len = getelementptr inbounds %struct.mac_data_st, %struct.mac_data_st* %64, i32 0, i32 10, !dbg !5660
  %65 = load i64, i64* %output_len, align 8, !dbg !5660
  %66 = load i8*, i8** %got, align 8, !dbg !5661
  %67 = load i64, i64* %got_len, align 8, !dbg !5662
  %call68 = call i32 @memory_err_compare(%struct.evp_test_st* %61, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.180, i32 0, i32 0), i8* %63, i64 %65, i8* %66, i64 %67), !dbg !5663
  %tobool69 = icmp ne i32 %call68, 0, !dbg !5663
  br i1 %tobool69, label %if.end72, label %if.then70, !dbg !5664

if.then70:                                        ; preds = %lor.lhs.false, %if.end65
  %68 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5666
  %err71 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %68, i32 0, i32 4, !dbg !5668
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.180, i32 0, i32 0), i8** %err71, align 8, !dbg !5669
  br label %err74, !dbg !5670

if.end72:                                         ; preds = %lor.lhs.false
  %69 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5671
  %err73 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %69, i32 0, i32 4, !dbg !5672
  store i8* null, i8** %err73, align 8, !dbg !5673
  br label %err74, !dbg !5671

err74:                                            ; preds = %if.end72, %if.then70, %if.then63, %if.then57, %if.then52, %if.then47, %if.then38, %if.then33, %if.then26, %if.then18
  %70 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %mctx, align 8, !dbg !5674
  call void @EVP_MD_CTX_free(%struct.evp_md_ctx_st* %70), !dbg !5675
  %71 = load i8*, i8** %got, align 8, !dbg !5676
  call void @CRYPTO_free(i8* %71, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1088), !dbg !5677
  %72 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %genctx, align 8, !dbg !5678
  call void @EVP_PKEY_CTX_free(%struct.evp_pkey_ctx_st* %72), !dbg !5679
  %73 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %key, align 8, !dbg !5680
  call void @EVP_PKEY_free(%struct.evp_pkey_st* %73), !dbg !5681
  ret i32 1, !dbg !5682
}

declare i32 @EVP_MAC_nid(%struct.evp_mac_st*) #2

declare %struct.evp_mac_ctx_st* @EVP_MAC_CTX_new(%struct.evp_mac_st*) #2

declare i32 @EVP_MAC_ctrl(%struct.evp_mac_ctx_st*, i32, ...) #2

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @sk_OPENSSL_STRING_num(%struct.stack_st_OPENSSL_STRING* %sk) #5 !dbg !5683 {
entry:
  %sk.addr = alloca %struct.stack_st_OPENSSL_STRING*, align 8
  store %struct.stack_st_OPENSSL_STRING* %sk, %struct.stack_st_OPENSSL_STRING** %sk.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_st_OPENSSL_STRING** %sk.addr, metadata !5688, metadata !207), !dbg !5689
  %0 = load %struct.stack_st_OPENSSL_STRING*, %struct.stack_st_OPENSSL_STRING** %sk.addr, align 8, !dbg !5690
  %1 = bitcast %struct.stack_st_OPENSSL_STRING* %0 to %struct.stack_st*, !dbg !5691
  %call = call i32 @OPENSSL_sk_num(%struct.stack_st* %1), !dbg !5692
  ret i32 %call, !dbg !5693
}

; Function Attrs: inlinehint nounwind uwtable
define internal i8* @sk_OPENSSL_STRING_value(%struct.stack_st_OPENSSL_STRING* %sk, i32 %idx) #5 !dbg !5694 {
entry:
  %sk.addr = alloca %struct.stack_st_OPENSSL_STRING*, align 8
  %idx.addr = alloca i32, align 4
  store %struct.stack_st_OPENSSL_STRING* %sk, %struct.stack_st_OPENSSL_STRING** %sk.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stack_st_OPENSSL_STRING** %sk.addr, metadata !5697, metadata !207), !dbg !5698
  store i32 %idx, i32* %idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %idx.addr, metadata !5699, metadata !207), !dbg !5700
  %0 = load %struct.stack_st_OPENSSL_STRING*, %struct.stack_st_OPENSSL_STRING** %sk.addr, align 8, !dbg !5701
  %1 = bitcast %struct.stack_st_OPENSSL_STRING* %0 to %struct.stack_st*, !dbg !5702
  %2 = load i32, i32* %idx.addr, align 4, !dbg !5703
  %call = call i8* @OPENSSL_sk_value(%struct.stack_st* %1, i32 %2), !dbg !5704
  ret i8* %call, !dbg !5705
}

declare i32 @EVP_MAC_ctrl_str(%struct.evp_mac_ctx_st*, i8*, i8*) #2

declare i32 @EVP_MAC_init(%struct.evp_mac_ctx_st*) #2

declare i32 @EVP_MAC_update(%struct.evp_mac_ctx_st*, i8*, i64) #2

declare i32 @EVP_MAC_final(%struct.evp_mac_ctx_st*, i8*, i64*) #2

declare void @EVP_MAC_CTX_free(%struct.evp_mac_ctx_st*) #2

declare %struct.evp_pkey_st* @EVP_PKEY_new_CMAC_key(%struct.engine_st*, i8*, i64, %struct.evp_cipher_st*) #2

; Function Attrs: nounwind uwtable
define internal i32 @mac_test_ctrl_pkey(%struct.evp_test_st* %t, %struct.evp_pkey_ctx_st* %pctx, i8* %value) #0 !dbg !5706 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %pctx.addr = alloca %struct.evp_pkey_ctx_st*, align 8
  %value.addr = alloca i8*, align 8
  %rv = alloca i32, align 4
  %p = alloca i8*, align 8
  %tmpval = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !5707, metadata !207), !dbg !5708
  store %struct.evp_pkey_ctx_st* %pctx, %struct.evp_pkey_ctx_st** %pctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_pkey_ctx_st** %pctx.addr, metadata !5709, metadata !207), !dbg !5710
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !5711, metadata !207), !dbg !5712
  call void @llvm.dbg.declare(metadata i32* %rv, metadata !5713, metadata !207), !dbg !5714
  call void @llvm.dbg.declare(metadata i8** %p, metadata !5715, metadata !207), !dbg !5716
  call void @llvm.dbg.declare(metadata i8** %tmpval, metadata !5717, metadata !207), !dbg !5718
  %0 = load i8*, i8** %value.addr, align 8, !dbg !5719
  %call = call i8* @CRYPTO_strdup(i8* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 993), !dbg !5721
  store i8* %call, i8** %tmpval, align 8, !dbg !5722
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 993, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.108, i32 0, i32 0), i8* %call), !dbg !5723
  %tobool = icmp ne i32 %call1, 0, !dbg !5725
  br i1 %tobool, label %if.end, label %if.then, !dbg !5726

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !5727
  br label %return, !dbg !5727

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %tmpval, align 8, !dbg !5728
  %call2 = call i8* @strchr(i8* %1, i32 58) #7, !dbg !5729
  store i8* %call2, i8** %p, align 8, !dbg !5730
  %2 = load i8*, i8** %p, align 8, !dbg !5731
  %cmp = icmp ne i8* %2, null, !dbg !5733
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !5734

if.then3:                                         ; preds = %if.end
  %3 = load i8*, i8** %p, align 8, !dbg !5735
  %incdec.ptr = getelementptr inbounds i8, i8* %3, i32 1, !dbg !5735
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !5735
  store i8 0, i8* %3, align 1, !dbg !5736
  br label %if.end4, !dbg !5737

if.end4:                                          ; preds = %if.then3, %if.end
  %4 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %pctx.addr, align 8, !dbg !5738
  %5 = load i8*, i8** %tmpval, align 8, !dbg !5739
  %6 = load i8*, i8** %p, align 8, !dbg !5740
  %call5 = call i32 @EVP_PKEY_CTX_ctrl_str(%struct.evp_pkey_ctx_st* %4, i8* %5, i8* %6), !dbg !5741
  store i32 %call5, i32* %rv, align 4, !dbg !5742
  %7 = load i32, i32* %rv, align 4, !dbg !5743
  %cmp6 = icmp eq i32 %7, -2, !dbg !5745
  br i1 %cmp6, label %if.then7, label %if.else, !dbg !5746

if.then7:                                         ; preds = %if.end4
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5747
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %8, i32 0, i32 4, !dbg !5748
  store i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.109, i32 0, i32 0), i8** %err, align 8, !dbg !5749
  br label %if.end13, !dbg !5747

if.else:                                          ; preds = %if.end4
  %9 = load i32, i32* %rv, align 4, !dbg !5750
  %cmp8 = icmp sle i32 %9, 0, !dbg !5752
  br i1 %cmp8, label %if.then9, label %if.else11, !dbg !5753

if.then9:                                         ; preds = %if.else
  %10 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5754
  %err10 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %10, i32 0, i32 4, !dbg !5755
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.110, i32 0, i32 0), i8** %err10, align 8, !dbg !5756
  br label %if.end12, !dbg !5754

if.else11:                                        ; preds = %if.else
  store i32 1, i32* %rv, align 4, !dbg !5757
  br label %if.end12

if.end12:                                         ; preds = %if.else11, %if.then9
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.then7
  %11 = load i8*, i8** %tmpval, align 8, !dbg !5758
  call void @CRYPTO_free(i8* %11, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1005), !dbg !5759
  %12 = load i32, i32* %rv, align 4, !dbg !5760
  %cmp14 = icmp sgt i32 %12, 0, !dbg !5761
  %conv = zext i1 %cmp14 to i32, !dbg !5761
  store i32 %conv, i32* %retval, align 4, !dbg !5762
  br label %return, !dbg !5762

return:                                           ; preds = %if.end13, %if.then
  %13 = load i32, i32* %retval, align 4, !dbg !5763
  ret i32 %13, !dbg !5763
}

; Function Attrs: nounwind uwtable
define internal i32 @oneshot_digestsign_test_init(%struct.evp_test_st* %t, i8* %alg) #0 !dbg !5764 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %alg.addr = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !5765, metadata !207), !dbg !5766
  store i8* %alg, i8** %alg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %alg.addr, metadata !5767, metadata !207), !dbg !5768
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5769
  %1 = load i8*, i8** %alg.addr, align 8, !dbg !5770
  %call = call i32 @digestsigver_test_init(%struct.evp_test_st* %0, i8* %1, i32 0, i32 1), !dbg !5771
  ret i32 %call, !dbg !5772
}

; Function Attrs: nounwind uwtable
define internal i32 @oneshot_digestsign_test_run(%struct.evp_test_st* %t) #0 !dbg !5773 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %expected = alloca %struct.DIGESTSIGN_DATA*, align 8
  %got = alloca i8*, align 8
  %got_len = alloca i64, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !5774, metadata !207), !dbg !5775
  call void @llvm.dbg.declare(metadata %struct.DIGESTSIGN_DATA** %expected, metadata !5776, metadata !207), !dbg !5777
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5778
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !5779
  %1 = load i8*, i8** %data, align 8, !dbg !5779
  %2 = bitcast i8* %1 to %struct.DIGESTSIGN_DATA*, !dbg !5778
  store %struct.DIGESTSIGN_DATA* %2, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !5777
  call void @llvm.dbg.declare(metadata i8** %got, metadata !5780, metadata !207), !dbg !5781
  store i8* null, i8** %got, align 8, !dbg !5781
  call void @llvm.dbg.declare(metadata i64* %got_len, metadata !5782, metadata !207), !dbg !5783
  %3 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !5784
  %ctx = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %3, i32 0, i32 3, !dbg !5786
  %4 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %ctx, align 8, !dbg !5786
  %5 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !5787
  %osin = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %5, i32 0, i32 6, !dbg !5788
  %6 = load i8*, i8** %osin, align 8, !dbg !5788
  %7 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !5789
  %osin_len = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %7, i32 0, i32 7, !dbg !5790
  %8 = load i64, i64* %osin_len, align 8, !dbg !5790
  %call = call i32 @EVP_DigestSign(%struct.evp_md_ctx_st* %4, i8* null, i64* %got_len, i8* %6, i64 %8), !dbg !5791
  %tobool = icmp ne i32 %call, 0, !dbg !5791
  br i1 %tobool, label %if.end, label %if.then, !dbg !5792

if.then:                                          ; preds = %entry
  %9 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5793
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %9, i32 0, i32 4, !dbg !5795
  store i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.189, i32 0, i32 0), i8** %err, align 8, !dbg !5796
  br label %err20, !dbg !5797

if.end:                                           ; preds = %entry
  %10 = load i64, i64* %got_len, align 8, !dbg !5798
  %call1 = call i8* @CRYPTO_malloc(i64 %10, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2568), !dbg !5800
  store i8* %call1, i8** %got, align 8, !dbg !5801
  %call2 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2568, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.112, i32 0, i32 0), i8* %call1), !dbg !5802
  %tobool3 = icmp ne i32 %call2, 0, !dbg !5804
  br i1 %tobool3, label %if.end6, label %if.then4, !dbg !5805

if.then4:                                         ; preds = %if.end
  %11 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5806
  %err5 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %11, i32 0, i32 4, !dbg !5808
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.113, i32 0, i32 0), i8** %err5, align 8, !dbg !5809
  br label %err20, !dbg !5810

if.end6:                                          ; preds = %if.end
  %12 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !5811
  %ctx7 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %12, i32 0, i32 3, !dbg !5813
  %13 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %ctx7, align 8, !dbg !5813
  %14 = load i8*, i8** %got, align 8, !dbg !5814
  %15 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !5815
  %osin8 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %15, i32 0, i32 6, !dbg !5816
  %16 = load i8*, i8** %osin8, align 8, !dbg !5816
  %17 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !5817
  %osin_len9 = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %17, i32 0, i32 7, !dbg !5818
  %18 = load i64, i64* %osin_len9, align 8, !dbg !5818
  %call10 = call i32 @EVP_DigestSign(%struct.evp_md_ctx_st* %13, i8* %14, i64* %got_len, i8* %16, i64 %18), !dbg !5819
  %tobool11 = icmp ne i32 %call10, 0, !dbg !5819
  br i1 %tobool11, label %if.end14, label %if.then12, !dbg !5820

if.then12:                                        ; preds = %if.end6
  %19 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5821
  %err13 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %19, i32 0, i32 4, !dbg !5823
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.190, i32 0, i32 0), i8** %err13, align 8, !dbg !5824
  br label %err20, !dbg !5825

if.end14:                                         ; preds = %if.end6
  %20 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5826
  %21 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !5828
  %output = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %21, i32 0, i32 8, !dbg !5829
  %22 = load i8*, i8** %output, align 8, !dbg !5829
  %23 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %expected, align 8, !dbg !5830
  %output_len = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %23, i32 0, i32 9, !dbg !5831
  %24 = load i64, i64* %output_len, align 8, !dbg !5831
  %25 = load i8*, i8** %got, align 8, !dbg !5832
  %26 = load i64, i64* %got_len, align 8, !dbg !5833
  %call15 = call i32 @memory_err_compare(%struct.evp_test_st* %20, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.115, i32 0, i32 0), i8* %22, i64 %24, i8* %25, i64 %26), !dbg !5834
  %tobool16 = icmp ne i32 %call15, 0, !dbg !5834
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !5835

if.then17:                                        ; preds = %if.end14
  br label %err20, !dbg !5836

if.end18:                                         ; preds = %if.end14
  %27 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5837
  %err19 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %27, i32 0, i32 4, !dbg !5838
  store i8* null, i8** %err19, align 8, !dbg !5839
  br label %err20, !dbg !5837

err20:                                            ; preds = %if.end18, %if.then17, %if.then12, %if.then4, %if.then
  %28 = load i8*, i8** %got, align 8, !dbg !5840
  call void @CRYPTO_free(i8* %28, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2584), !dbg !5841
  ret i32 1, !dbg !5842
}

declare i32 @EVP_DigestSign(%struct.evp_md_ctx_st*, i8*, i64*, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @oneshot_digestverify_test_init(%struct.evp_test_st* %t, i8* %alg) #0 !dbg !5843 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %alg.addr = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !5844, metadata !207), !dbg !5845
  store i8* %alg, i8** %alg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %alg.addr, metadata !5846, metadata !207), !dbg !5847
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5848
  %1 = load i8*, i8** %alg.addr, align 8, !dbg !5849
  %call = call i32 @digestsigver_test_init(%struct.evp_test_st* %0, i8* %1, i32 1, i32 1), !dbg !5850
  ret i32 %call, !dbg !5851
}

; Function Attrs: nounwind uwtable
define internal i32 @oneshot_digestverify_test_run(%struct.evp_test_st* %t) #0 !dbg !5852 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %mdata = alloca %struct.DIGESTSIGN_DATA*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !5853, metadata !207), !dbg !5854
  call void @llvm.dbg.declare(metadata %struct.DIGESTSIGN_DATA** %mdata, metadata !5855, metadata !207), !dbg !5856
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5857
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !5858
  %1 = load i8*, i8** %data, align 8, !dbg !5858
  %2 = bitcast i8* %1 to %struct.DIGESTSIGN_DATA*, !dbg !5857
  store %struct.DIGESTSIGN_DATA* %2, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !5856
  %3 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !5859
  %ctx = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %3, i32 0, i32 3, !dbg !5861
  %4 = load %struct.evp_md_ctx_st*, %struct.evp_md_ctx_st** %ctx, align 8, !dbg !5861
  %5 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !5862
  %output = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %5, i32 0, i32 8, !dbg !5863
  %6 = load i8*, i8** %output, align 8, !dbg !5863
  %7 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !5864
  %output_len = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %7, i32 0, i32 9, !dbg !5865
  %8 = load i64, i64* %output_len, align 8, !dbg !5865
  %9 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !5866
  %osin = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %9, i32 0, i32 6, !dbg !5867
  %10 = load i8*, i8** %osin, align 8, !dbg !5867
  %11 = load %struct.DIGESTSIGN_DATA*, %struct.DIGESTSIGN_DATA** %mdata, align 8, !dbg !5868
  %osin_len = getelementptr inbounds %struct.DIGESTSIGN_DATA, %struct.DIGESTSIGN_DATA* %11, i32 0, i32 7, !dbg !5869
  %12 = load i64, i64* %osin_len, align 8, !dbg !5869
  %call = call i32 @EVP_DigestVerify(%struct.evp_md_ctx_st* %4, i8* %6, i64 %8, i8* %10, i64 %12), !dbg !5870
  %cmp = icmp sle i32 %call, 0, !dbg !5871
  br i1 %cmp, label %if.then, label %if.end, !dbg !5872

if.then:                                          ; preds = %entry
  %13 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5873
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %13, i32 0, i32 4, !dbg !5874
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.117, i32 0, i32 0), i8** %err, align 8, !dbg !5875
  br label %if.end, !dbg !5873

if.end:                                           ; preds = %if.then, %entry
  ret i32 1, !dbg !5876
}

declare i32 @EVP_DigestVerify(%struct.evp_md_ctx_st*, i8*, i64, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @pbe_test_init(%struct.evp_test_st* %t, i8* %alg) #0 !dbg !5877 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %alg.addr = alloca i8*, align 8
  %pdat = alloca %struct.pbe_data_st*, align 8
  %pbe_type = alloca i32, align 4
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !5878, metadata !207), !dbg !5879
  store i8* %alg, i8** %alg.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %alg.addr, metadata !5880, metadata !207), !dbg !5881
  call void @llvm.dbg.declare(metadata %struct.pbe_data_st** %pdat, metadata !5882, metadata !207), !dbg !5904
  call void @llvm.dbg.declare(metadata i32* %pbe_type, metadata !5905, metadata !207), !dbg !5906
  store i32 0, i32* %pbe_type, align 4, !dbg !5906
  %0 = load i8*, i8** %alg.addr, align 8, !dbg !5907
  %call = call i32 @strcmp(i8* %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.193, i32 0, i32 0)) #7, !dbg !5909
  %cmp = icmp eq i32 %call, 0, !dbg !5910
  br i1 %cmp, label %if.then, label %if.else, !dbg !5911

if.then:                                          ; preds = %entry
  store i32 1, i32* %pbe_type, align 4, !dbg !5912
  br label %if.end10, !dbg !5914

if.else:                                          ; preds = %entry
  %1 = load i8*, i8** %alg.addr, align 8, !dbg !5915
  %call1 = call i32 @strcmp(i8* %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.194, i32 0, i32 0)) #7, !dbg !5918
  %cmp2 = icmp eq i32 %call1, 0, !dbg !5919
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !5918

if.then3:                                         ; preds = %if.else
  store i32 2, i32* %pbe_type, align 4, !dbg !5920
  br label %if.end9, !dbg !5922

if.else4:                                         ; preds = %if.else
  %2 = load i8*, i8** %alg.addr, align 8, !dbg !5923
  %call5 = call i32 @strcmp(i8* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.195, i32 0, i32 0)) #7, !dbg !5926
  %cmp6 = icmp eq i32 %call5, 0, !dbg !5927
  br i1 %cmp6, label %if.then7, label %if.else8, !dbg !5926

if.then7:                                         ; preds = %if.else4
  store i32 3, i32* %pbe_type, align 4, !dbg !5928
  br label %if.end, !dbg !5930

if.else8:                                         ; preds = %if.else4
  %3 = load i8*, i8** %alg.addr, align 8, !dbg !5931
  call void (i8*, i32, i8*, ...) @test_error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1655, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.196, i32 0, i32 0), i8* %3), !dbg !5933
  br label %if.end

if.end:                                           ; preds = %if.else8, %if.then7
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then3
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then
  %call11 = call i8* @CRYPTO_zalloc(i64 104, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1657), !dbg !5934
  %4 = bitcast i8* %call11 to %struct.pbe_data_st*, !dbg !5934
  store %struct.pbe_data_st* %4, %struct.pbe_data_st** %pdat, align 8, !dbg !5935
  %5 = load i32, i32* %pbe_type, align 4, !dbg !5936
  %6 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdat, align 8, !dbg !5937
  %pbe_type12 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %6, i32 0, i32 0, !dbg !5938
  store i32 %5, i32* %pbe_type12, align 8, !dbg !5939
  %7 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdat, align 8, !dbg !5940
  %8 = bitcast %struct.pbe_data_st* %7 to i8*, !dbg !5940
  %9 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5941
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %9, i32 0, i32 9, !dbg !5942
  store i8* %8, i8** %data, align 8, !dbg !5943
  ret i32 1, !dbg !5944
}

; Function Attrs: nounwind uwtable
define internal void @pbe_test_cleanup(%struct.evp_test_st* %t) #0 !dbg !5945 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %pdat = alloca %struct.pbe_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !5946, metadata !207), !dbg !5947
  call void @llvm.dbg.declare(metadata %struct.pbe_data_st** %pdat, metadata !5948, metadata !207), !dbg !5949
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5950
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !5951
  %1 = load i8*, i8** %data, align 8, !dbg !5951
  %2 = bitcast i8* %1 to %struct.pbe_data_st*, !dbg !5950
  store %struct.pbe_data_st* %2, %struct.pbe_data_st** %pdat, align 8, !dbg !5949
  %3 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdat, align 8, !dbg !5952
  %pass = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %3, i32 0, i32 8, !dbg !5953
  %4 = load i8*, i8** %pass, align 8, !dbg !5953
  call void @CRYPTO_free(i8* %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1667), !dbg !5954
  %5 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdat, align 8, !dbg !5955
  %salt = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %5, i32 0, i32 10, !dbg !5956
  %6 = load i8*, i8** %salt, align 8, !dbg !5956
  call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1668), !dbg !5957
  %7 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdat, align 8, !dbg !5958
  %key = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %7, i32 0, i32 12, !dbg !5959
  %8 = load i8*, i8** %key, align 8, !dbg !5959
  call void @CRYPTO_free(i8* %8, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1669), !dbg !5960
  ret void, !dbg !5961
}

; Function Attrs: nounwind uwtable
define internal i32 @pbe_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !5962 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %pdata = alloca %struct.pbe_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !5963, metadata !207), !dbg !5964
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !5965, metadata !207), !dbg !5966
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !5967, metadata !207), !dbg !5968
  call void @llvm.dbg.declare(metadata %struct.pbe_data_st** %pdata, metadata !5969, metadata !207), !dbg !5970
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !5971
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !5972
  %1 = load i8*, i8** %data, align 8, !dbg !5972
  %2 = bitcast i8* %1 to %struct.pbe_data_st*, !dbg !5971
  store %struct.pbe_data_st* %2, %struct.pbe_data_st** %pdata, align 8, !dbg !5970
  %3 = load i8*, i8** %keyword.addr, align 8, !dbg !5973
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.197, i32 0, i32 0)) #7, !dbg !5975
  %cmp = icmp eq i32 %call, 0, !dbg !5976
  br i1 %cmp, label %if.then, label %if.end, !dbg !5977

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %value.addr, align 8, !dbg !5978
  %5 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !5979
  %pass = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %5, i32 0, i32 8, !dbg !5980
  %6 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !5981
  %pass_len = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %6, i32 0, i32 9, !dbg !5982
  %call1 = call i32 @parse_bin(i8* %4, i8** %pass, i64* %pass_len), !dbg !5983
  store i32 %call1, i32* %retval, align 4, !dbg !5984
  br label %return, !dbg !5984

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %keyword.addr, align 8, !dbg !5985
  %call2 = call i32 @strcmp(i8* %7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.169, i32 0, i32 0)) #7, !dbg !5987
  %cmp3 = icmp eq i32 %call2, 0, !dbg !5988
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !5989

if.then4:                                         ; preds = %if.end
  %8 = load i8*, i8** %value.addr, align 8, !dbg !5990
  %9 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !5991
  %salt = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %9, i32 0, i32 10, !dbg !5992
  %10 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !5993
  %salt_len = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %10, i32 0, i32 11, !dbg !5994
  %call5 = call i32 @parse_bin(i8* %8, i8** %salt, i64* %salt_len), !dbg !5995
  store i32 %call5, i32* %retval, align 4, !dbg !5996
  br label %return, !dbg !5996

if.end6:                                          ; preds = %if.end
  %11 = load i8*, i8** %keyword.addr, align 8, !dbg !5997
  %call7 = call i32 @strcmp(i8* %11, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i32 0, i32 0)) #7, !dbg !5999
  %cmp8 = icmp eq i32 %call7, 0, !dbg !6000
  br i1 %cmp8, label %if.then9, label %if.end11, !dbg !6001

if.then9:                                         ; preds = %if.end6
  %12 = load i8*, i8** %value.addr, align 8, !dbg !6002
  %13 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6003
  %key = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %13, i32 0, i32 12, !dbg !6004
  %14 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6005
  %key_len = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %14, i32 0, i32 13, !dbg !6006
  %call10 = call i32 @parse_bin(i8* %12, i8** %key, i64* %key_len), !dbg !6007
  store i32 %call10, i32* %retval, align 4, !dbg !6008
  br label %return, !dbg !6008

if.end11:                                         ; preds = %if.end6
  %15 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6009
  %pbe_type = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %15, i32 0, i32 0, !dbg !6011
  %16 = load i32, i32* %pbe_type, align 8, !dbg !6011
  %cmp12 = icmp eq i32 %16, 2, !dbg !6012
  br i1 %cmp12, label %if.then13, label %if.else, !dbg !6013

if.then13:                                        ; preds = %if.end11
  %17 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6014
  %18 = load i8*, i8** %keyword.addr, align 8, !dbg !6015
  %19 = load i8*, i8** %value.addr, align 8, !dbg !6016
  %call14 = call i32 @pbkdf2_test_parse(%struct.evp_test_st* %17, i8* %18, i8* %19), !dbg !6017
  store i32 %call14, i32* %retval, align 4, !dbg !6018
  br label %return, !dbg !6018

if.else:                                          ; preds = %if.end11
  %20 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6019
  %pbe_type15 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %20, i32 0, i32 0, !dbg !6021
  %21 = load i32, i32* %pbe_type15, align 8, !dbg !6021
  %cmp16 = icmp eq i32 %21, 3, !dbg !6022
  br i1 %cmp16, label %if.then17, label %if.else19, !dbg !6023

if.then17:                                        ; preds = %if.else
  %22 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6024
  %23 = load i8*, i8** %keyword.addr, align 8, !dbg !6025
  %24 = load i8*, i8** %value.addr, align 8, !dbg !6026
  %call18 = call i32 @pkcs12_test_parse(%struct.evp_test_st* %22, i8* %23, i8* %24), !dbg !6027
  store i32 %call18, i32* %retval, align 4, !dbg !6028
  br label %return, !dbg !6028

if.else19:                                        ; preds = %if.else
  %25 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6029
  %pbe_type20 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %25, i32 0, i32 0, !dbg !6031
  %26 = load i32, i32* %pbe_type20, align 8, !dbg !6031
  %cmp21 = icmp eq i32 %26, 1, !dbg !6032
  br i1 %cmp21, label %if.then22, label %if.end24, !dbg !6033

if.then22:                                        ; preds = %if.else19
  %27 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6034
  %28 = load i8*, i8** %keyword.addr, align 8, !dbg !6035
  %29 = load i8*, i8** %value.addr, align 8, !dbg !6036
  %call23 = call i32 @scrypt_test_parse(%struct.evp_test_st* %27, i8* %28, i8* %29), !dbg !6037
  store i32 %call23, i32* %retval, align 4, !dbg !6038
  br label %return, !dbg !6038

if.end24:                                         ; preds = %if.else19
  br label %if.end25

if.end25:                                         ; preds = %if.end24
  br label %if.end26

if.end26:                                         ; preds = %if.end25
  store i32 0, i32* %retval, align 4, !dbg !6039
  br label %return, !dbg !6039

return:                                           ; preds = %if.end26, %if.then22, %if.then17, %if.then13, %if.then9, %if.then4, %if.then
  %30 = load i32, i32* %retval, align 4, !dbg !6040
  ret i32 %30, !dbg !6040
}

; Function Attrs: nounwind uwtable
define internal i32 @pbe_test_run(%struct.evp_test_st* %t) #0 !dbg !6041 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %expected = alloca %struct.pbe_data_st*, align 8
  %key = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6042, metadata !207), !dbg !6043
  call void @llvm.dbg.declare(metadata %struct.pbe_data_st** %expected, metadata !6044, metadata !207), !dbg !6045
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6046
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !6047
  %1 = load i8*, i8** %data, align 8, !dbg !6047
  %2 = bitcast i8* %1 to %struct.pbe_data_st*, !dbg !6046
  store %struct.pbe_data_st* %2, %struct.pbe_data_st** %expected, align 8, !dbg !6045
  call void @llvm.dbg.declare(metadata i8** %key, metadata !6048, metadata !207), !dbg !6049
  %3 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6050
  %key_len = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %3, i32 0, i32 13, !dbg !6052
  %4 = load i64, i64* %key_len, align 8, !dbg !6052
  %call = call i8* @CRYPTO_malloc(i64 %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1699), !dbg !6053
  store i8* %call, i8** %key, align 8, !dbg !6054
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1699, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.209, i32 0, i32 0), i8* %call), !dbg !6055
  %tobool = icmp ne i32 %call1, 0, !dbg !6057
  br i1 %tobool, label %if.end, label %if.then, !dbg !6058

if.then:                                          ; preds = %entry
  %5 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6059
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %5, i32 0, i32 4, !dbg !6061
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.127, i32 0, i32 0), i8** %err, align 8, !dbg !6062
  br label %err59, !dbg !6063

if.end:                                           ; preds = %entry
  %6 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6064
  %pbe_type = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %6, i32 0, i32 0, !dbg !6066
  %7 = load i32, i32* %pbe_type, align 8, !dbg !6066
  %cmp = icmp eq i32 %7, 2, !dbg !6067
  br i1 %cmp, label %if.then2, label %if.else, !dbg !6068

if.then2:                                         ; preds = %if.end
  %8 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6069
  %pass = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %8, i32 0, i32 8, !dbg !6072
  %9 = load i8*, i8** %pass, align 8, !dbg !6072
  %10 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6073
  %pass_len = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %10, i32 0, i32 9, !dbg !6074
  %11 = load i64, i64* %pass_len, align 8, !dbg !6074
  %conv = trunc i64 %11 to i32, !dbg !6073
  %12 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6075
  %salt = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %12, i32 0, i32 10, !dbg !6076
  %13 = load i8*, i8** %salt, align 8, !dbg !6076
  %14 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6077
  %salt_len = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %14, i32 0, i32 11, !dbg !6078
  %15 = load i64, i64* %salt_len, align 8, !dbg !6078
  %conv3 = trunc i64 %15 to i32, !dbg !6077
  %16 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6079
  %iter = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %16, i32 0, i32 6, !dbg !6080
  %17 = load i32, i32* %iter, align 4, !dbg !6080
  %18 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6081
  %md = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %18, i32 0, i32 7, !dbg !6082
  %19 = load %struct.evp_md_st*, %struct.evp_md_st** %md, align 8, !dbg !6082
  %20 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6083
  %key_len4 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %20, i32 0, i32 13, !dbg !6084
  %21 = load i64, i64* %key_len4, align 8, !dbg !6084
  %conv5 = trunc i64 %21 to i32, !dbg !6083
  %22 = load i8*, i8** %key, align 8, !dbg !6085
  %call6 = call i32 @PKCS5_PBKDF2_HMAC(i8* %9, i32 %conv, i8* %13, i32 %conv3, i32 %17, %struct.evp_md_st* %19, i32 %conv5, i8* %22), !dbg !6086
  %cmp7 = icmp eq i32 %call6, 0, !dbg !6087
  br i1 %cmp7, label %if.then9, label %if.end11, !dbg !6088

if.then9:                                         ; preds = %if.then2
  %23 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6089
  %err10 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %23, i32 0, i32 4, !dbg !6091
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.210, i32 0, i32 0), i8** %err10, align 8, !dbg !6092
  br label %err59, !dbg !6093

if.end11:                                         ; preds = %if.then2
  br label %if.end50, !dbg !6094

if.else:                                          ; preds = %if.end
  %24 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6095
  %pbe_type12 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %24, i32 0, i32 0, !dbg !6098
  %25 = load i32, i32* %pbe_type12, align 8, !dbg !6098
  %cmp13 = icmp eq i32 %25, 1, !dbg !6099
  br i1 %cmp13, label %if.then15, label %if.else27, !dbg !6095

if.then15:                                        ; preds = %if.else
  %26 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6100
  %pass16 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %26, i32 0, i32 8, !dbg !6103
  %27 = load i8*, i8** %pass16, align 8, !dbg !6103
  %28 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6104
  %pass_len17 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %28, i32 0, i32 9, !dbg !6105
  %29 = load i64, i64* %pass_len17, align 8, !dbg !6105
  %30 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6106
  %salt18 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %30, i32 0, i32 10, !dbg !6107
  %31 = load i8*, i8** %salt18, align 8, !dbg !6107
  %32 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6108
  %salt_len19 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %32, i32 0, i32 11, !dbg !6109
  %33 = load i64, i64* %salt_len19, align 8, !dbg !6109
  %34 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6110
  %N = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %34, i32 0, i32 1, !dbg !6111
  %35 = load i64, i64* %N, align 8, !dbg !6111
  %36 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6112
  %r = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %36, i32 0, i32 2, !dbg !6113
  %37 = load i64, i64* %r, align 8, !dbg !6113
  %38 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6114
  %p = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %38, i32 0, i32 3, !dbg !6115
  %39 = load i64, i64* %p, align 8, !dbg !6115
  %40 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6116
  %maxmem = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %40, i32 0, i32 4, !dbg !6117
  %41 = load i64, i64* %maxmem, align 8, !dbg !6117
  %42 = load i8*, i8** %key, align 8, !dbg !6118
  %43 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6119
  %key_len20 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %43, i32 0, i32 13, !dbg !6120
  %44 = load i64, i64* %key_len20, align 8, !dbg !6120
  %call21 = call i32 @EVP_PBE_scrypt(i8* %27, i64 %29, i8* %31, i64 %33, i64 %35, i64 %37, i64 %39, i64 %41, i8* %42, i64 %44), !dbg !6121
  %cmp22 = icmp eq i32 %call21, 0, !dbg !6122
  br i1 %cmp22, label %if.then24, label %if.end26, !dbg !6123

if.then24:                                        ; preds = %if.then15
  %45 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6124
  %err25 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %45, i32 0, i32 4, !dbg !6126
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.211, i32 0, i32 0), i8** %err25, align 8, !dbg !6127
  br label %err59, !dbg !6128

if.end26:                                         ; preds = %if.then15
  br label %if.end49, !dbg !6129

if.else27:                                        ; preds = %if.else
  %46 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6130
  %pbe_type28 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %46, i32 0, i32 0, !dbg !6133
  %47 = load i32, i32* %pbe_type28, align 8, !dbg !6133
  %cmp29 = icmp eq i32 %47, 3, !dbg !6134
  br i1 %cmp29, label %if.then31, label %if.end48, !dbg !6130

if.then31:                                        ; preds = %if.else27
  %48 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6135
  %pass32 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %48, i32 0, i32 8, !dbg !6138
  %49 = load i8*, i8** %pass32, align 8, !dbg !6138
  %50 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6139
  %pass_len33 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %50, i32 0, i32 9, !dbg !6140
  %51 = load i64, i64* %pass_len33, align 8, !dbg !6140
  %conv34 = trunc i64 %51 to i32, !dbg !6139
  %52 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6141
  %salt35 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %52, i32 0, i32 10, !dbg !6142
  %53 = load i8*, i8** %salt35, align 8, !dbg !6142
  %54 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6143
  %salt_len36 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %54, i32 0, i32 11, !dbg !6144
  %55 = load i64, i64* %salt_len36, align 8, !dbg !6144
  %conv37 = trunc i64 %55 to i32, !dbg !6143
  %56 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6145
  %id = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %56, i32 0, i32 5, !dbg !6146
  %57 = load i32, i32* %id, align 8, !dbg !6146
  %58 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6147
  %iter38 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %58, i32 0, i32 6, !dbg !6148
  %59 = load i32, i32* %iter38, align 4, !dbg !6148
  %60 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6149
  %key_len39 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %60, i32 0, i32 13, !dbg !6150
  %61 = load i64, i64* %key_len39, align 8, !dbg !6150
  %conv40 = trunc i64 %61 to i32, !dbg !6149
  %62 = load i8*, i8** %key, align 8, !dbg !6151
  %63 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6152
  %md41 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %63, i32 0, i32 7, !dbg !6153
  %64 = load %struct.evp_md_st*, %struct.evp_md_st** %md41, align 8, !dbg !6153
  %call42 = call i32 @PKCS12_key_gen_uni(i8* %49, i32 %conv34, i8* %53, i32 %conv37, i32 %57, i32 %59, i32 %conv40, i8* %62, %struct.evp_md_st* %64), !dbg !6154
  %cmp43 = icmp eq i32 %call42, 0, !dbg !6155
  br i1 %cmp43, label %if.then45, label %if.end47, !dbg !6156

if.then45:                                        ; preds = %if.then31
  %65 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6157
  %err46 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %65, i32 0, i32 4, !dbg !6159
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.212, i32 0, i32 0), i8** %err46, align 8, !dbg !6160
  br label %err59, !dbg !6161

if.end47:                                         ; preds = %if.then31
  br label %if.end48, !dbg !6162

if.end48:                                         ; preds = %if.end47, %if.else27
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.end26
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.end11
  %66 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6163
  %67 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6165
  %key51 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %67, i32 0, i32 12, !dbg !6166
  %68 = load i8*, i8** %key51, align 8, !dbg !6166
  %69 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6167
  %key_len52 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %69, i32 0, i32 13, !dbg !6168
  %70 = load i64, i64* %key_len52, align 8, !dbg !6168
  %71 = load i8*, i8** %key, align 8, !dbg !6169
  %72 = load %struct.pbe_data_st*, %struct.pbe_data_st** %expected, align 8, !dbg !6170
  %key_len53 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %72, i32 0, i32 13, !dbg !6171
  %73 = load i64, i64* %key_len53, align 8, !dbg !6171
  %call54 = call i32 @memory_err_compare(%struct.evp_test_st* %66, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.213, i32 0, i32 0), i8* %68, i64 %70, i8* %71, i64 %73), !dbg !6172
  %tobool55 = icmp ne i32 %call54, 0, !dbg !6172
  br i1 %tobool55, label %if.end57, label %if.then56, !dbg !6173

if.then56:                                        ; preds = %if.end50
  br label %err59, !dbg !6174

if.end57:                                         ; preds = %if.end50
  %74 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6175
  %err58 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %74, i32 0, i32 4, !dbg !6176
  store i8* null, i8** %err58, align 8, !dbg !6177
  br label %err59, !dbg !6175

err59:                                            ; preds = %if.end57, %if.then56, %if.then45, %if.then24, %if.then9, %if.then
  %75 = load i8*, i8** %key, align 8, !dbg !6178
  call void @CRYPTO_free(i8* %75, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1736), !dbg !6179
  ret i32 1, !dbg !6180
}

; Function Attrs: nounwind uwtable
define internal i32 @pbkdf2_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !6181 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %pdata = alloca %struct.pbe_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6182, metadata !207), !dbg !6183
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !6184, metadata !207), !dbg !6185
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !6186, metadata !207), !dbg !6187
  call void @llvm.dbg.declare(metadata %struct.pbe_data_st** %pdata, metadata !6188, metadata !207), !dbg !6189
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6190
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !6191
  %1 = load i8*, i8** %data, align 8, !dbg !6191
  %2 = bitcast i8* %1 to %struct.pbe_data_st*, !dbg !6190
  store %struct.pbe_data_st* %2, %struct.pbe_data_st** %pdata, align 8, !dbg !6189
  %3 = load i8*, i8** %keyword.addr, align 8, !dbg !6192
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0)) #7, !dbg !6194
  %cmp = icmp eq i32 %call, 0, !dbg !6195
  br i1 %cmp, label %if.then, label %if.end5, !dbg !6196

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %value.addr, align 8, !dbg !6197
  %call1 = call i32 @atoi(i8* %4) #7, !dbg !6199
  %5 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6200
  %iter = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %5, i32 0, i32 6, !dbg !6201
  store i32 %call1, i32* %iter, align 4, !dbg !6202
  %6 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6203
  %iter2 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %6, i32 0, i32 6, !dbg !6205
  %7 = load i32, i32* %iter2, align 4, !dbg !6205
  %cmp3 = icmp sle i32 %7, 0, !dbg !6206
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !6207

if.then4:                                         ; preds = %if.then
  store i32 -1, i32* %retval, align 4, !dbg !6208
  br label %return, !dbg !6208

if.end:                                           ; preds = %if.then
  store i32 1, i32* %retval, align 4, !dbg !6209
  br label %return, !dbg !6209

if.end5:                                          ; preds = %entry
  %8 = load i8*, i8** %keyword.addr, align 8, !dbg !6210
  %call6 = call i32 @strcmp(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.198, i32 0, i32 0)) #7, !dbg !6212
  %cmp7 = icmp eq i32 %call6, 0, !dbg !6213
  br i1 %cmp7, label %if.then8, label %if.end14, !dbg !6214

if.then8:                                         ; preds = %if.end5
  %9 = load i8*, i8** %value.addr, align 8, !dbg !6215
  %call9 = call %struct.evp_md_st* @EVP_get_digestbyname(i8* %9), !dbg !6217
  %10 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6218
  %md = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %10, i32 0, i32 7, !dbg !6219
  store %struct.evp_md_st* %call9, %struct.evp_md_st** %md, align 8, !dbg !6220
  %11 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6221
  %md10 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %11, i32 0, i32 7, !dbg !6223
  %12 = load %struct.evp_md_st*, %struct.evp_md_st** %md10, align 8, !dbg !6223
  %cmp11 = icmp eq %struct.evp_md_st* %12, null, !dbg !6224
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !6225

if.then12:                                        ; preds = %if.then8
  store i32 -1, i32* %retval, align 4, !dbg !6226
  br label %return, !dbg !6226

if.end13:                                         ; preds = %if.then8
  store i32 1, i32* %retval, align 4, !dbg !6227
  br label %return, !dbg !6227

if.end14:                                         ; preds = %if.end5
  store i32 0, i32* %retval, align 4, !dbg !6228
  br label %return, !dbg !6228

return:                                           ; preds = %if.end14, %if.end13, %if.then12, %if.end, %if.then4
  %13 = load i32, i32* %retval, align 4, !dbg !6229
  ret i32 %13, !dbg !6229
}

; Function Attrs: nounwind uwtable
define internal i32 @pkcs12_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !6230 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %pdata = alloca %struct.pbe_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6231, metadata !207), !dbg !6232
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !6233, metadata !207), !dbg !6234
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !6235, metadata !207), !dbg !6236
  call void @llvm.dbg.declare(metadata %struct.pbe_data_st** %pdata, metadata !6237, metadata !207), !dbg !6238
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6239
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !6240
  %1 = load i8*, i8** %data, align 8, !dbg !6240
  %2 = bitcast i8* %1 to %struct.pbe_data_st*, !dbg !6239
  store %struct.pbe_data_st* %2, %struct.pbe_data_st** %pdata, align 8, !dbg !6238
  %3 = load i8*, i8** %keyword.addr, align 8, !dbg !6241
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.199, i32 0, i32 0)) #7, !dbg !6243
  %cmp = icmp eq i32 %call, 0, !dbg !6244
  br i1 %cmp, label %if.then, label %if.end5, !dbg !6245

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %value.addr, align 8, !dbg !6246
  %call1 = call i32 @atoi(i8* %4) #7, !dbg !6248
  %5 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6249
  %id = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %5, i32 0, i32 5, !dbg !6250
  store i32 %call1, i32* %id, align 8, !dbg !6251
  %6 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6252
  %id2 = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %6, i32 0, i32 5, !dbg !6254
  %7 = load i32, i32* %id2, align 8, !dbg !6254
  %cmp3 = icmp sle i32 %7, 0, !dbg !6255
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !6256

if.then4:                                         ; preds = %if.then
  store i32 -1, i32* %retval, align 4, !dbg !6257
  br label %return, !dbg !6257

if.end:                                           ; preds = %if.then
  store i32 1, i32* %retval, align 4, !dbg !6258
  br label %return, !dbg !6258

if.end5:                                          ; preds = %entry
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6259
  %9 = load i8*, i8** %keyword.addr, align 8, !dbg !6260
  %10 = load i8*, i8** %value.addr, align 8, !dbg !6261
  %call6 = call i32 @pbkdf2_test_parse(%struct.evp_test_st* %8, i8* %9, i8* %10), !dbg !6262
  store i32 %call6, i32* %retval, align 4, !dbg !6263
  br label %return, !dbg !6263

return:                                           ; preds = %if.end5, %if.end, %if.then4
  %11 = load i32, i32* %retval, align 4, !dbg !6264
  ret i32 %11, !dbg !6264
}

; Function Attrs: nounwind uwtable
define internal i32 @scrypt_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !6265 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %pdata = alloca %struct.pbe_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6266, metadata !207), !dbg !6267
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !6268, metadata !207), !dbg !6269
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !6270, metadata !207), !dbg !6271
  call void @llvm.dbg.declare(metadata %struct.pbe_data_st** %pdata, metadata !6272, metadata !207), !dbg !6273
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6274
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !6275
  %1 = load i8*, i8** %data, align 8, !dbg !6275
  %2 = bitcast i8* %1 to %struct.pbe_data_st*, !dbg !6274
  store %struct.pbe_data_st* %2, %struct.pbe_data_st** %pdata, align 8, !dbg !6273
  %3 = load i8*, i8** %keyword.addr, align 8, !dbg !6276
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.200, i32 0, i32 0)) #7, !dbg !6278
  %cmp = icmp eq i32 %call, 0, !dbg !6279
  br i1 %cmp, label %if.then, label %if.end, !dbg !6280

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %value.addr, align 8, !dbg !6281
  %5 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6282
  %N = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %5, i32 0, i32 1, !dbg !6283
  %call1 = call i32 @parse_uint64(i8* %4, i64* %N), !dbg !6284
  store i32 %call1, i32* %retval, align 4, !dbg !6285
  br label %return, !dbg !6285

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %keyword.addr, align 8, !dbg !6286
  %call2 = call i32 @strcmp(i8* %6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.201, i32 0, i32 0)) #7, !dbg !6288
  %cmp3 = icmp eq i32 %call2, 0, !dbg !6289
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !6290

if.then4:                                         ; preds = %if.end
  %7 = load i8*, i8** %value.addr, align 8, !dbg !6291
  %8 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6292
  %p = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %8, i32 0, i32 3, !dbg !6293
  %call5 = call i32 @parse_uint64(i8* %7, i64* %p), !dbg !6294
  store i32 %call5, i32* %retval, align 4, !dbg !6295
  br label %return, !dbg !6295

if.end6:                                          ; preds = %if.end
  %9 = load i8*, i8** %keyword.addr, align 8, !dbg !6296
  %call7 = call i32 @strcmp(i8* %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.202, i32 0, i32 0)) #7, !dbg !6298
  %cmp8 = icmp eq i32 %call7, 0, !dbg !6299
  br i1 %cmp8, label %if.then9, label %if.end11, !dbg !6300

if.then9:                                         ; preds = %if.end6
  %10 = load i8*, i8** %value.addr, align 8, !dbg !6301
  %11 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6302
  %r = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %11, i32 0, i32 2, !dbg !6303
  %call10 = call i32 @parse_uint64(i8* %10, i64* %r), !dbg !6304
  store i32 %call10, i32* %retval, align 4, !dbg !6305
  br label %return, !dbg !6305

if.end11:                                         ; preds = %if.end6
  %12 = load i8*, i8** %keyword.addr, align 8, !dbg !6306
  %call12 = call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.203, i32 0, i32 0)) #7, !dbg !6308
  %cmp13 = icmp eq i32 %call12, 0, !dbg !6309
  br i1 %cmp13, label %if.then14, label %if.end16, !dbg !6310

if.then14:                                        ; preds = %if.end11
  %13 = load i8*, i8** %value.addr, align 8, !dbg !6311
  %14 = load %struct.pbe_data_st*, %struct.pbe_data_st** %pdata, align 8, !dbg !6312
  %maxmem = getelementptr inbounds %struct.pbe_data_st, %struct.pbe_data_st* %14, i32 0, i32 4, !dbg !6313
  %call15 = call i32 @parse_uint64(i8* %13, i64* %maxmem), !dbg !6314
  store i32 %call15, i32* %retval, align 4, !dbg !6315
  br label %return, !dbg !6315

if.end16:                                         ; preds = %if.end11
  store i32 0, i32* %retval, align 4, !dbg !6316
  br label %return, !dbg !6316

return:                                           ; preds = %if.end16, %if.then14, %if.then9, %if.then4, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !6317
  ret i32 %15, !dbg !6317
}

; Function Attrs: nounwind uwtable
define internal i32 @parse_uint64(i8* %value, i64* %pr) #0 !dbg !6318 {
entry:
  %retval = alloca i32, align 4
  %value.addr = alloca i8*, align 8
  %pr.addr = alloca i64*, align 8
  %p = alloca i8*, align 8
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !6322, metadata !207), !dbg !6323
  store i64* %pr, i64** %pr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %pr.addr, metadata !6324, metadata !207), !dbg !6325
  call void @llvm.dbg.declare(metadata i8** %p, metadata !6326, metadata !207), !dbg !6327
  %0 = load i8*, i8** %value.addr, align 8, !dbg !6328
  store i8* %0, i8** %p, align 8, !dbg !6327
  %1 = load i8*, i8** %p, align 8, !dbg !6329
  %2 = load i8, i8* %1, align 1, !dbg !6331
  %conv = sext i8 %2 to i32, !dbg !6332
  %cmp = icmp ne i32 %conv, 0, !dbg !6333
  %conv1 = zext i1 %cmp to i32, !dbg !6333
  %call = call i32 @test_true(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1567, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.204, i32 0, i32 0), i32 %conv1), !dbg !6334
  %tobool = icmp ne i32 %call, 0, !dbg !6334
  br i1 %tobool, label %if.end, label %if.then, !dbg !6335

if.then:                                          ; preds = %entry
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1568, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.205, i32 0, i32 0)), !dbg !6336
  store i32 -1, i32* %retval, align 4, !dbg !6338
  br label %return, !dbg !6338

if.end:                                           ; preds = %entry
  %3 = load i64*, i64** %pr.addr, align 8, !dbg !6339
  store i64 0, i64* %3, align 8, !dbg !6341
  br label %for.cond, !dbg !6342

for.cond:                                         ; preds = %if.end15, %if.end
  %4 = load i8*, i8** %p, align 8, !dbg !6343
  %5 = load i8, i8* %4, align 1, !dbg !6346
  %tobool2 = icmp ne i8 %5, 0, !dbg !6347
  br i1 %tobool2, label %for.body, label %for.end, !dbg !6347

for.body:                                         ; preds = %for.cond
  %6 = load i64*, i64** %pr.addr, align 8, !dbg !6348
  %7 = load i64, i64* %6, align 8, !dbg !6351
  %cmp3 = icmp ugt i64 %7, 1844674407370955161, !dbg !6352
  br i1 %cmp3, label %if.then5, label %if.end6, !dbg !6353

if.then5:                                         ; preds = %for.body
  %8 = load i8*, i8** %value.addr, align 8, !dbg !6354
  call void (i8*, i32, i8*, ...) @test_error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1573, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.206, i32 0, i32 0), i8* %8), !dbg !6356
  store i32 -1, i32* %retval, align 4, !dbg !6357
  br label %return, !dbg !6357

if.end6:                                          ; preds = %for.body
  %9 = load i64*, i64** %pr.addr, align 8, !dbg !6358
  %10 = load i64, i64* %9, align 8, !dbg !6359
  %mul = mul i64 %10, 10, !dbg !6359
  store i64 %mul, i64* %9, align 8, !dbg !6359
  %11 = load i8*, i8** %p, align 8, !dbg !6360
  %12 = load i8, i8* %11, align 1, !dbg !6362
  %conv7 = zext i8 %12 to i32, !dbg !6363
  %idxprom = sext i32 %conv7 to i64, !dbg !6364
  %call8 = call i16** @__ctype_b_loc() #1, !dbg !6365
  %13 = load i16*, i16** %call8, align 8, !dbg !6366
  %arrayidx = getelementptr inbounds i16, i16* %13, i64 %idxprom, !dbg !6364
  %14 = load i16, i16* %arrayidx, align 2, !dbg !6364
  %conv9 = zext i16 %14 to i32, !dbg !6364
  %and = and i32 %conv9, 2048, !dbg !6367
  %cmp10 = icmp ne i32 %and, 0, !dbg !6366
  %conv11 = zext i1 %cmp10 to i32, !dbg !6366
  %call12 = call i32 @test_true(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1577, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.207, i32 0, i32 0), i32 %conv11), !dbg !6368
  %tobool13 = icmp ne i32 %call12, 0, !dbg !6364
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !6370

if.then14:                                        ; preds = %if.end6
  %15 = load i8*, i8** %value.addr, align 8, !dbg !6371
  call void (i8*, i32, i8*, ...) @test_error(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1578, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.208, i32 0, i32 0), i8* %15), !dbg !6373
  store i32 -1, i32* %retval, align 4, !dbg !6374
  br label %return, !dbg !6374

if.end15:                                         ; preds = %if.end6
  %16 = load i8*, i8** %p, align 8, !dbg !6375
  %17 = load i8, i8* %16, align 1, !dbg !6376
  %conv16 = sext i8 %17 to i32, !dbg !6376
  %sub = sub nsw i32 %conv16, 48, !dbg !6377
  %conv17 = sext i32 %sub to i64, !dbg !6376
  %18 = load i64*, i64** %pr.addr, align 8, !dbg !6378
  %19 = load i64, i64* %18, align 8, !dbg !6379
  %add = add i64 %19, %conv17, !dbg !6379
  store i64 %add, i64* %18, align 8, !dbg !6379
  %20 = load i8*, i8** %p, align 8, !dbg !6380
  %incdec.ptr = getelementptr inbounds i8, i8* %20, i32 1, !dbg !6380
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !6380
  br label %for.cond, !dbg !6381, !llvm.loop !6383

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !6385
  br label %return, !dbg !6385

return:                                           ; preds = %for.end, %if.then14, %if.then5, %if.then
  %21 = load i32, i32* %retval, align 4, !dbg !6386
  ret i32 %21, !dbg !6386
}

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() #6

declare i32 @PKCS5_PBKDF2_HMAC(i8*, i32, i8*, i32, i32, %struct.evp_md_st*, i32, i8*) #2

declare i32 @EVP_PBE_scrypt(i8*, i64, i8*, i64, i64, i64, i64, i64, i8*, i64) #2

declare i32 @PKCS12_key_gen_uni(i8*, i32, i8*, i32, i32, i32, i32, i8*, %struct.evp_md_st*) #2

; Function Attrs: nounwind uwtable
define internal i32 @decrypt_test_init(%struct.evp_test_st* %t, i8* %name) #0 !dbg !6387 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %name.addr = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6388, metadata !207), !dbg !6389
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !6390, metadata !207), !dbg !6391
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6392
  %1 = load i8*, i8** %name.addr, align 8, !dbg !6393
  %call = call i32 @pkey_test_init(%struct.evp_test_st* %0, i8* %1, i32 0, i32 (%struct.evp_pkey_ctx_st*)* @EVP_PKEY_decrypt_init, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* @EVP_PKEY_decrypt), !dbg !6394
  ret i32 %call, !dbg !6395
}

; Function Attrs: nounwind uwtable
define internal void @pkey_test_cleanup(%struct.evp_test_st* %t) #0 !dbg !6396 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %kdata = alloca %struct.pkey_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6397, metadata !207), !dbg !6398
  call void @llvm.dbg.declare(metadata %struct.pkey_data_st** %kdata, metadata !6399, metadata !207), !dbg !6413
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6414
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !6415
  %1 = load i8*, i8** %data, align 8, !dbg !6415
  %2 = bitcast i8* %1 to %struct.pkey_data_st*, !dbg !6414
  store %struct.pkey_data_st* %2, %struct.pkey_data_st** %kdata, align 8, !dbg !6413
  %3 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6416
  %input = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %3, i32 0, i32 2, !dbg !6417
  %4 = load i8*, i8** %input, align 8, !dbg !6417
  call void @CRYPTO_free(i8* %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1323), !dbg !6418
  %5 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6419
  %output = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %5, i32 0, i32 4, !dbg !6420
  %6 = load i8*, i8** %output, align 8, !dbg !6420
  call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1324), !dbg !6421
  %7 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6422
  %ctx = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %7, i32 0, i32 0, !dbg !6423
  %8 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx, align 8, !dbg !6423
  call void @EVP_PKEY_CTX_free(%struct.evp_pkey_ctx_st* %8), !dbg !6424
  ret void, !dbg !6425
}

; Function Attrs: nounwind uwtable
define internal i32 @pkey_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !6426 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %kdata = alloca %struct.pkey_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6427, metadata !207), !dbg !6428
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !6429, metadata !207), !dbg !6430
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !6431, metadata !207), !dbg !6432
  call void @llvm.dbg.declare(metadata %struct.pkey_data_st** %kdata, metadata !6433, metadata !207), !dbg !6434
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6435
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !6436
  %1 = load i8*, i8** %data, align 8, !dbg !6436
  %2 = bitcast i8* %1 to %struct.pkey_data_st*, !dbg !6435
  store %struct.pkey_data_st* %2, %struct.pkey_data_st** %kdata, align 8, !dbg !6434
  %3 = load i8*, i8** %keyword.addr, align 8, !dbg !6437
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.87, i32 0, i32 0)) #7, !dbg !6439
  %cmp = icmp eq i32 %call, 0, !dbg !6440
  br i1 %cmp, label %if.then, label %if.end, !dbg !6441

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %value.addr, align 8, !dbg !6442
  %5 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6443
  %input = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %5, i32 0, i32 2, !dbg !6444
  %6 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6445
  %input_len = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %6, i32 0, i32 3, !dbg !6446
  %call1 = call i32 @parse_bin(i8* %4, i8** %input, i64* %input_len), !dbg !6447
  store i32 %call1, i32* %retval, align 4, !dbg !6448
  br label %return, !dbg !6448

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %keyword.addr, align 8, !dbg !6449
  %call2 = call i32 @strcmp(i8* %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.88, i32 0, i32 0)) #7, !dbg !6451
  %cmp3 = icmp eq i32 %call2, 0, !dbg !6452
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !6453

if.then4:                                         ; preds = %if.end
  %8 = load i8*, i8** %value.addr, align 8, !dbg !6454
  %9 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6455
  %output = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %9, i32 0, i32 4, !dbg !6456
  %10 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6457
  %output_len = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %10, i32 0, i32 5, !dbg !6458
  %call5 = call i32 @parse_bin(i8* %8, i8** %output, i64* %output_len), !dbg !6459
  store i32 %call5, i32* %retval, align 4, !dbg !6460
  br label %return, !dbg !6460

if.end6:                                          ; preds = %if.end
  %11 = load i8*, i8** %keyword.addr, align 8, !dbg !6461
  %call7 = call i32 @strcmp(i8* %11, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.107, i32 0, i32 0)) #7, !dbg !6463
  %cmp8 = icmp eq i32 %call7, 0, !dbg !6464
  br i1 %cmp8, label %if.then9, label %if.end11, !dbg !6465

if.then9:                                         ; preds = %if.end6
  %12 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6466
  %13 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6467
  %ctx = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %13, i32 0, i32 0, !dbg !6468
  %14 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx, align 8, !dbg !6468
  %15 = load i8*, i8** %value.addr, align 8, !dbg !6469
  %call10 = call i32 @pkey_test_ctrl(%struct.evp_test_st* %12, %struct.evp_pkey_ctx_st* %14, i8* %15), !dbg !6470
  store i32 %call10, i32* %retval, align 4, !dbg !6471
  br label %return, !dbg !6471

if.end11:                                         ; preds = %if.end6
  store i32 0, i32* %retval, align 4, !dbg !6472
  br label %return, !dbg !6472

return:                                           ; preds = %if.end11, %if.then9, %if.then4, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !6473
  ret i32 %16, !dbg !6473
}

; Function Attrs: nounwind uwtable
define internal i32 @pkey_test_run(%struct.evp_test_st* %t) #0 !dbg !6474 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %expected = alloca %struct.pkey_data_st*, align 8
  %got = alloca i8*, align 8
  %got_len = alloca i64, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6475, metadata !207), !dbg !6476
  call void @llvm.dbg.declare(metadata %struct.pkey_data_st** %expected, metadata !6477, metadata !207), !dbg !6478
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6479
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !6480
  %1 = load i8*, i8** %data, align 8, !dbg !6480
  %2 = bitcast i8* %1 to %struct.pkey_data_st*, !dbg !6479
  store %struct.pkey_data_st* %2, %struct.pkey_data_st** %expected, align 8, !dbg !6478
  call void @llvm.dbg.declare(metadata i8** %got, metadata !6481, metadata !207), !dbg !6482
  store i8* null, i8** %got, align 8, !dbg !6482
  call void @llvm.dbg.declare(metadata i64* %got_len, metadata !6483, metadata !207), !dbg !6484
  %3 = load %struct.pkey_data_st*, %struct.pkey_data_st** %expected, align 8, !dbg !6485
  %keyop = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %3, i32 0, i32 1, !dbg !6487
  %4 = load i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)** %keyop, align 8, !dbg !6487
  %5 = load %struct.pkey_data_st*, %struct.pkey_data_st** %expected, align 8, !dbg !6488
  %ctx = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %5, i32 0, i32 0, !dbg !6489
  %6 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx, align 8, !dbg !6489
  %7 = load %struct.pkey_data_st*, %struct.pkey_data_st** %expected, align 8, !dbg !6490
  %input = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %7, i32 0, i32 2, !dbg !6491
  %8 = load i8*, i8** %input, align 8, !dbg !6491
  %9 = load %struct.pkey_data_st*, %struct.pkey_data_st** %expected, align 8, !dbg !6492
  %input_len = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %9, i32 0, i32 3, !dbg !6493
  %10 = load i64, i64* %input_len, align 8, !dbg !6493
  %call = call i32 %4(%struct.evp_pkey_ctx_st* %6, i8* null, i64* %got_len, i8* %8, i64 %10), !dbg !6485
  %cmp = icmp sle i32 %call, 0, !dbg !6494
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6495

lor.lhs.false:                                    ; preds = %entry
  %11 = load i64, i64* %got_len, align 8, !dbg !6496
  %call1 = call i8* @CRYPTO_malloc(i64 %11, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1384), !dbg !6498
  store i8* %call1, i8** %got, align 8, !dbg !6499
  %call2 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1384, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.112, i32 0, i32 0), i8* %call1), !dbg !6500
  %tobool = icmp ne i32 %call2, 0, !dbg !6502
  br i1 %tobool, label %if.end, label %if.then, !dbg !6503

if.then:                                          ; preds = %lor.lhs.false, %entry
  %12 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6505
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %12, i32 0, i32 4, !dbg !6507
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.217, i32 0, i32 0), i8** %err, align 8, !dbg !6508
  br label %err17, !dbg !6509

if.end:                                           ; preds = %lor.lhs.false
  %13 = load %struct.pkey_data_st*, %struct.pkey_data_st** %expected, align 8, !dbg !6510
  %keyop3 = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %13, i32 0, i32 1, !dbg !6512
  %14 = load i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)** %keyop3, align 8, !dbg !6512
  %15 = load %struct.pkey_data_st*, %struct.pkey_data_st** %expected, align 8, !dbg !6513
  %ctx4 = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %15, i32 0, i32 0, !dbg !6514
  %16 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx4, align 8, !dbg !6514
  %17 = load i8*, i8** %got, align 8, !dbg !6515
  %18 = load %struct.pkey_data_st*, %struct.pkey_data_st** %expected, align 8, !dbg !6516
  %input5 = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %18, i32 0, i32 2, !dbg !6517
  %19 = load i8*, i8** %input5, align 8, !dbg !6517
  %20 = load %struct.pkey_data_st*, %struct.pkey_data_st** %expected, align 8, !dbg !6518
  %input_len6 = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %20, i32 0, i32 3, !dbg !6519
  %21 = load i64, i64* %input_len6, align 8, !dbg !6519
  %call7 = call i32 %14(%struct.evp_pkey_ctx_st* %16, i8* %17, i64* %got_len, i8* %19, i64 %21), !dbg !6510
  %cmp8 = icmp sle i32 %call7, 0, !dbg !6520
  br i1 %cmp8, label %if.then9, label %if.end11, !dbg !6521

if.then9:                                         ; preds = %if.end
  %22 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6522
  %err10 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %22, i32 0, i32 4, !dbg !6524
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.218, i32 0, i32 0), i8** %err10, align 8, !dbg !6525
  br label %err17, !dbg !6526

if.end11:                                         ; preds = %if.end
  %23 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6527
  %24 = load %struct.pkey_data_st*, %struct.pkey_data_st** %expected, align 8, !dbg !6529
  %output = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %24, i32 0, i32 4, !dbg !6530
  %25 = load i8*, i8** %output, align 8, !dbg !6530
  %26 = load %struct.pkey_data_st*, %struct.pkey_data_st** %expected, align 8, !dbg !6531
  %output_len = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %26, i32 0, i32 5, !dbg !6532
  %27 = load i64, i64* %output_len, align 8, !dbg !6532
  %28 = load i8*, i8** %got, align 8, !dbg !6533
  %29 = load i64, i64* %got_len, align 8, !dbg !6534
  %call12 = call i32 @memory_err_compare(%struct.evp_test_st* %23, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.219, i32 0, i32 0), i8* %25, i64 %27, i8* %28, i64 %29), !dbg !6535
  %tobool13 = icmp ne i32 %call12, 0, !dbg !6535
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !6536

if.then14:                                        ; preds = %if.end11
  br label %err17, !dbg !6537

if.end15:                                         ; preds = %if.end11
  %30 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6538
  %err16 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %30, i32 0, i32 4, !dbg !6539
  store i8* null, i8** %err16, align 8, !dbg !6540
  br label %err17, !dbg !6538

err17:                                            ; preds = %if.end15, %if.then14, %if.then9, %if.then
  %31 = load i8*, i8** %got, align 8, !dbg !6541
  call void @CRYPTO_free(i8* %31, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1400), !dbg !6542
  ret i32 1, !dbg !6543
}

; Function Attrs: nounwind uwtable
define internal i32 @pkey_test_init(%struct.evp_test_st* %t, i8* %name, i32 %use_public, i32 (%struct.evp_pkey_ctx_st*)* %keyopinit, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* %keyop) #0 !dbg !6544 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %name.addr = alloca i8*, align 8
  %use_public.addr = alloca i32, align 4
  %keyopinit.addr = alloca i32 (%struct.evp_pkey_ctx_st*)*, align 8
  %keyop.addr = alloca i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, align 8
  %kdata = alloca %struct.pkey_data_st*, align 8
  %pkey = alloca %struct.evp_pkey_st*, align 8
  %rv = alloca i32, align 4
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6550, metadata !207), !dbg !6551
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !6552, metadata !207), !dbg !6553
  store i32 %use_public, i32* %use_public.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %use_public.addr, metadata !6554, metadata !207), !dbg !6555
  store i32 (%struct.evp_pkey_ctx_st*)* %keyopinit, i32 (%struct.evp_pkey_ctx_st*)** %keyopinit.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (%struct.evp_pkey_ctx_st*)** %keyopinit.addr, metadata !6556, metadata !207), !dbg !6557
  store i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* %keyop, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)** %keyop.addr, align 8
  call void @llvm.dbg.declare(metadata i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)** %keyop.addr, metadata !6558, metadata !207), !dbg !6559
  call void @llvm.dbg.declare(metadata %struct.pkey_data_st** %kdata, metadata !6560, metadata !207), !dbg !6561
  call void @llvm.dbg.declare(metadata %struct.evp_pkey_st** %pkey, metadata !6562, metadata !207), !dbg !6563
  store %struct.evp_pkey_st* null, %struct.evp_pkey_st** %pkey, align 8, !dbg !6563
  call void @llvm.dbg.declare(metadata i32* %rv, metadata !6564, metadata !207), !dbg !6565
  store i32 0, i32* %rv, align 4, !dbg !6565
  %0 = load i32, i32* %use_public.addr, align 4, !dbg !6566
  %tobool = icmp ne i32 %0, 0, !dbg !6566
  br i1 %tobool, label %if.then, label %if.end, !dbg !6568

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %name.addr, align 8, !dbg !6569
  %2 = load %struct.key_list_st*, %struct.key_list_st** @public_keys, align 8, !dbg !6570
  %call = call i32 @find_key(%struct.evp_pkey_st** %pkey, i8* %1, %struct.key_list_st* %2), !dbg !6571
  store i32 %call, i32* %rv, align 4, !dbg !6572
  br label %if.end, !dbg !6573

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32, i32* %rv, align 4, !dbg !6574
  %cmp = icmp eq i32 %3, 0, !dbg !6576
  br i1 %cmp, label %if.then1, label %if.end3, !dbg !6577

if.then1:                                         ; preds = %if.end
  %4 = load i8*, i8** %name.addr, align 8, !dbg !6578
  %5 = load %struct.key_list_st*, %struct.key_list_st** @private_keys, align 8, !dbg !6579
  %call2 = call i32 @find_key(%struct.evp_pkey_st** %pkey, i8* %4, %struct.key_list_st* %5), !dbg !6580
  store i32 %call2, i32* %rv, align 4, !dbg !6581
  br label %if.end3, !dbg !6582

if.end3:                                          ; preds = %if.then1, %if.end
  %6 = load i32, i32* %rv, align 4, !dbg !6583
  %cmp4 = icmp eq i32 %6, 0, !dbg !6585
  br i1 %cmp4, label %if.then6, label %lor.lhs.false, !dbg !6586

lor.lhs.false:                                    ; preds = %if.end3
  %7 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !6587
  %cmp5 = icmp eq %struct.evp_pkey_st* %7, null, !dbg !6589
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !6590

if.then6:                                         ; preds = %lor.lhs.false, %if.end3
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6591
  %skip = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %8, i32 0, i32 2, !dbg !6593
  store i32 1, i32* %skip, align 8, !dbg !6594
  store i32 1, i32* %retval, align 4, !dbg !6595
  br label %return, !dbg !6595

if.end7:                                          ; preds = %lor.lhs.false
  %call8 = call i8* @CRYPTO_zalloc(i64 48, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1303), !dbg !6596
  %9 = bitcast i8* %call8 to %struct.pkey_data_st*, !dbg !6596
  store %struct.pkey_data_st* %9, %struct.pkey_data_st** %kdata, align 8, !dbg !6598
  %10 = bitcast %struct.pkey_data_st* %9 to i8*, !dbg !6599
  %call9 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1303, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.135, i32 0, i32 0), i8* %10), !dbg !6600
  %tobool10 = icmp ne i32 %call9, 0, !dbg !6602
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !6603

if.then11:                                        ; preds = %if.end7
  %11 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !6604
  call void @EVP_PKEY_free(%struct.evp_pkey_st* %11), !dbg !6606
  store i32 0, i32* %retval, align 4, !dbg !6607
  br label %return, !dbg !6607

if.end12:                                         ; preds = %if.end7
  %12 = load i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)*, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)** %keyop.addr, align 8, !dbg !6608
  %13 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6609
  %keyop13 = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %13, i32 0, i32 1, !dbg !6610
  store i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* %12, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)** %keyop13, align 8, !dbg !6611
  %14 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !6612
  %call14 = call %struct.evp_pkey_ctx_st* @EVP_PKEY_CTX_new(%struct.evp_pkey_st* %14, %struct.engine_st* null), !dbg !6614
  %15 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6615
  %ctx = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %15, i32 0, i32 0, !dbg !6616
  store %struct.evp_pkey_ctx_st* %call14, %struct.evp_pkey_ctx_st** %ctx, align 8, !dbg !6617
  %16 = bitcast %struct.evp_pkey_ctx_st* %call14 to i8*, !dbg !6615
  %call15 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1308, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.215, i32 0, i32 0), i8* %16), !dbg !6618
  %tobool16 = icmp ne i32 %call15, 0, !dbg !6620
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !6621

if.then17:                                        ; preds = %if.end12
  %17 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %pkey, align 8, !dbg !6622
  call void @EVP_PKEY_free(%struct.evp_pkey_st* %17), !dbg !6624
  %18 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6625
  %19 = bitcast %struct.pkey_data_st* %18 to i8*, !dbg !6625
  call void @CRYPTO_free(i8* %19, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1310), !dbg !6626
  store i32 0, i32* %retval, align 4, !dbg !6627
  br label %return, !dbg !6627

if.end18:                                         ; preds = %if.end12
  %20 = load i32 (%struct.evp_pkey_ctx_st*)*, i32 (%struct.evp_pkey_ctx_st*)** %keyopinit.addr, align 8, !dbg !6628
  %21 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6630
  %ctx19 = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %21, i32 0, i32 0, !dbg !6631
  %22 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx19, align 8, !dbg !6631
  %call20 = call i32 %20(%struct.evp_pkey_ctx_st* %22), !dbg !6628
  %cmp21 = icmp sle i32 %call20, 0, !dbg !6632
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !6633

if.then22:                                        ; preds = %if.end18
  %23 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6634
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %23, i32 0, i32 4, !dbg !6635
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.216, i32 0, i32 0), i8** %err, align 8, !dbg !6636
  br label %if.end23, !dbg !6634

if.end23:                                         ; preds = %if.then22, %if.end18
  %24 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6637
  %25 = bitcast %struct.pkey_data_st* %24 to i8*, !dbg !6637
  %26 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6638
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %26, i32 0, i32 9, !dbg !6639
  store i8* %25, i8** %data, align 8, !dbg !6640
  store i32 1, i32* %retval, align 4, !dbg !6641
  br label %return, !dbg !6641

return:                                           ; preds = %if.end23, %if.then17, %if.then11, %if.then6
  %27 = load i32, i32* %retval, align 4, !dbg !6642
  ret i32 %27, !dbg !6642
}

declare i32 @EVP_PKEY_decrypt_init(%struct.evp_pkey_ctx_st*) #2

declare i32 @EVP_PKEY_decrypt(%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64) #2

declare %struct.evp_pkey_ctx_st* @EVP_PKEY_CTX_new(%struct.evp_pkey_st*, %struct.engine_st*) #2

; Function Attrs: nounwind uwtable
define internal i32 @pderive_test_init(%struct.evp_test_st* %t, i8* %name) #0 !dbg !6643 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %name.addr = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6644, metadata !207), !dbg !6645
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !6646, metadata !207), !dbg !6647
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6648
  %1 = load i8*, i8** %name.addr, align 8, !dbg !6649
  %call = call i32 @pkey_test_init(%struct.evp_test_st* %0, i8* %1, i32 0, i32 (%struct.evp_pkey_ctx_st*)* @EVP_PKEY_derive_init, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* null), !dbg !6650
  ret i32 %call, !dbg !6651
}

; Function Attrs: nounwind uwtable
define internal i32 @pderive_test_parse(%struct.evp_test_st* %t, i8* %keyword, i8* %value) #0 !dbg !6652 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %keyword.addr = alloca i8*, align 8
  %value.addr = alloca i8*, align 8
  %kdata = alloca %struct.pkey_data_st*, align 8
  %peer = alloca %struct.evp_pkey_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6653, metadata !207), !dbg !6654
  store i8* %keyword, i8** %keyword.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %keyword.addr, metadata !6655, metadata !207), !dbg !6656
  store i8* %value, i8** %value.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %value.addr, metadata !6657, metadata !207), !dbg !6658
  call void @llvm.dbg.declare(metadata %struct.pkey_data_st** %kdata, metadata !6659, metadata !207), !dbg !6660
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6661
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !6662
  %1 = load i8*, i8** %data, align 8, !dbg !6662
  %2 = bitcast i8* %1 to %struct.pkey_data_st*, !dbg !6661
  store %struct.pkey_data_st* %2, %struct.pkey_data_st** %kdata, align 8, !dbg !6660
  %3 = load i8*, i8** %keyword.addr, align 8, !dbg !6663
  %call = call i32 @strcmp(i8* %3, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.221, i32 0, i32 0)) #7, !dbg !6665
  %cmp = icmp eq i32 %call, 0, !dbg !6666
  br i1 %cmp, label %if.then, label %if.end8, !dbg !6667

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.evp_pkey_st** %peer, metadata !6668, metadata !207), !dbg !6670
  %4 = load i8*, i8** %value.addr, align 8, !dbg !6671
  %5 = load %struct.key_list_st*, %struct.key_list_st** @public_keys, align 8, !dbg !6673
  %call1 = call i32 @find_key(%struct.evp_pkey_st** %peer, i8* %4, %struct.key_list_st* %5), !dbg !6674
  %cmp2 = icmp eq i32 %call1, 0, !dbg !6675
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !6676

if.then3:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4, !dbg !6677
  br label %return, !dbg !6677

if.end:                                           ; preds = %if.then
  %6 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6678
  %ctx = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %6, i32 0, i32 0, !dbg !6680
  %7 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx, align 8, !dbg !6680
  %8 = load %struct.evp_pkey_st*, %struct.evp_pkey_st** %peer, align 8, !dbg !6681
  %call4 = call i32 @EVP_PKEY_derive_set_peer(%struct.evp_pkey_ctx_st* %7, %struct.evp_pkey_st* %8), !dbg !6682
  %cmp5 = icmp sle i32 %call4, 0, !dbg !6683
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !6684

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6685
  br label %return, !dbg !6685

if.end7:                                          ; preds = %if.end
  store i32 1, i32* %retval, align 4, !dbg !6686
  br label %return, !dbg !6686

if.end8:                                          ; preds = %entry
  %9 = load i8*, i8** %keyword.addr, align 8, !dbg !6687
  %call9 = call i32 @strcmp(i8* %9, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.222, i32 0, i32 0)) #7, !dbg !6689
  %cmp10 = icmp eq i32 %call9, 0, !dbg !6690
  br i1 %cmp10, label %if.then11, label %if.end13, !dbg !6691

if.then11:                                        ; preds = %if.end8
  %10 = load i8*, i8** %value.addr, align 8, !dbg !6692
  %11 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6693
  %output = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %11, i32 0, i32 4, !dbg !6694
  %12 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6695
  %output_len = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %12, i32 0, i32 5, !dbg !6696
  %call12 = call i32 @parse_bin(i8* %10, i8** %output, i64* %output_len), !dbg !6697
  store i32 %call12, i32* %retval, align 4, !dbg !6698
  br label %return, !dbg !6698

if.end13:                                         ; preds = %if.end8
  %13 = load i8*, i8** %keyword.addr, align 8, !dbg !6699
  %call14 = call i32 @strcmp(i8* %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.107, i32 0, i32 0)) #7, !dbg !6701
  %cmp15 = icmp eq i32 %call14, 0, !dbg !6702
  br i1 %cmp15, label %if.then16, label %if.end19, !dbg !6703

if.then16:                                        ; preds = %if.end13
  %14 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6704
  %15 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6705
  %ctx17 = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %15, i32 0, i32 0, !dbg !6706
  %16 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx17, align 8, !dbg !6706
  %17 = load i8*, i8** %value.addr, align 8, !dbg !6707
  %call18 = call i32 @pkey_test_ctrl(%struct.evp_test_st* %14, %struct.evp_pkey_ctx_st* %16, i8* %17), !dbg !6708
  store i32 %call18, i32* %retval, align 4, !dbg !6709
  br label %return, !dbg !6709

if.end19:                                         ; preds = %if.end13
  store i32 0, i32* %retval, align 4, !dbg !6710
  br label %return, !dbg !6710

return:                                           ; preds = %if.end19, %if.then16, %if.then11, %if.end7, %if.then6, %if.then3
  %18 = load i32, i32* %retval, align 4, !dbg !6711
  ret i32 %18, !dbg !6711
}

; Function Attrs: nounwind uwtable
define internal i32 @pderive_test_run(%struct.evp_test_st* %t) #0 !dbg !6712 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %expected = alloca %struct.pkey_data_st*, align 8
  %got = alloca i8*, align 8
  %got_len = alloca i64, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6713, metadata !207), !dbg !6714
  call void @llvm.dbg.declare(metadata %struct.pkey_data_st** %expected, metadata !6715, metadata !207), !dbg !6716
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6717
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !6718
  %1 = load i8*, i8** %data, align 8, !dbg !6718
  %2 = bitcast i8* %1 to %struct.pkey_data_st*, !dbg !6717
  store %struct.pkey_data_st* %2, %struct.pkey_data_st** %expected, align 8, !dbg !6716
  call void @llvm.dbg.declare(metadata i8** %got, metadata !6719, metadata !207), !dbg !6720
  store i8* null, i8** %got, align 8, !dbg !6720
  call void @llvm.dbg.declare(metadata i64* %got_len, metadata !6721, metadata !207), !dbg !6722
  %3 = load %struct.pkey_data_st*, %struct.pkey_data_st** %expected, align 8, !dbg !6723
  %ctx = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %3, i32 0, i32 0, !dbg !6725
  %4 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx, align 8, !dbg !6725
  %call = call i32 @EVP_PKEY_derive(%struct.evp_pkey_ctx_st* %4, i8* null, i64* %got_len), !dbg !6726
  %cmp = icmp sle i32 %call, 0, !dbg !6727
  br i1 %cmp, label %if.then, label %if.end, !dbg !6728

if.then:                                          ; preds = %entry
  %5 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6729
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %5, i32 0, i32 4, !dbg !6731
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.223, i32 0, i32 0), i8** %err, align 8, !dbg !6732
  br label %err17, !dbg !6733

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %got_len, align 8, !dbg !6734
  %call1 = call i8* @CRYPTO_malloc(i64 %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1504), !dbg !6736
  store i8* %call1, i8** %got, align 8, !dbg !6737
  %call2 = call i32 @test_ptr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1504, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.112, i32 0, i32 0), i8* %call1), !dbg !6738
  %tobool = icmp ne i32 %call2, 0, !dbg !6740
  br i1 %tobool, label %if.end5, label %if.then3, !dbg !6741

if.then3:                                         ; preds = %if.end
  %7 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6742
  %err4 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %7, i32 0, i32 4, !dbg !6744
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.223, i32 0, i32 0), i8** %err4, align 8, !dbg !6745
  br label %err17, !dbg !6746

if.end5:                                          ; preds = %if.end
  %8 = load %struct.pkey_data_st*, %struct.pkey_data_st** %expected, align 8, !dbg !6747
  %ctx6 = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %8, i32 0, i32 0, !dbg !6749
  %9 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx6, align 8, !dbg !6749
  %10 = load i8*, i8** %got, align 8, !dbg !6750
  %call7 = call i32 @EVP_PKEY_derive(%struct.evp_pkey_ctx_st* %9, i8* %10, i64* %got_len), !dbg !6751
  %cmp8 = icmp sle i32 %call7, 0, !dbg !6752
  br i1 %cmp8, label %if.then9, label %if.end11, !dbg !6753

if.then9:                                         ; preds = %if.end5
  %11 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6754
  %err10 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %11, i32 0, i32 4, !dbg !6756
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.223, i32 0, i32 0), i8** %err10, align 8, !dbg !6757
  br label %err17, !dbg !6758

if.end11:                                         ; preds = %if.end5
  %12 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6759
  %13 = load %struct.pkey_data_st*, %struct.pkey_data_st** %expected, align 8, !dbg !6761
  %output = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %13, i32 0, i32 4, !dbg !6762
  %14 = load i8*, i8** %output, align 8, !dbg !6762
  %15 = load %struct.pkey_data_st*, %struct.pkey_data_st** %expected, align 8, !dbg !6763
  %output_len = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %15, i32 0, i32 5, !dbg !6764
  %16 = load i64, i64* %output_len, align 8, !dbg !6764
  %17 = load i8*, i8** %got, align 8, !dbg !6765
  %18 = load i64, i64* %got_len, align 8, !dbg !6766
  %call12 = call i32 @memory_err_compare(%struct.evp_test_st* %12, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.224, i32 0, i32 0), i8* %14, i64 %16, i8* %17, i64 %18), !dbg !6767
  %tobool13 = icmp ne i32 %call12, 0, !dbg !6767
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !6768

if.then14:                                        ; preds = %if.end11
  br label %err17, !dbg !6769

if.end15:                                         ; preds = %if.end11
  %19 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6770
  %err16 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %19, i32 0, i32 4, !dbg !6771
  store i8* null, i8** %err16, align 8, !dbg !6772
  br label %err17, !dbg !6770

err17:                                            ; preds = %if.end15, %if.then14, %if.then9, %if.then3, %if.then
  %20 = load i8*, i8** %got, align 8, !dbg !6773
  call void @CRYPTO_free(i8* %20, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 1519), !dbg !6774
  ret i32 1, !dbg !6775
}

declare i32 @EVP_PKEY_derive_set_peer(%struct.evp_pkey_ctx_st*, %struct.evp_pkey_st*) #2

; Function Attrs: nounwind uwtable
define internal i32 @sign_test_init(%struct.evp_test_st* %t, i8* %name) #0 !dbg !6776 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %name.addr = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6777, metadata !207), !dbg !6778
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !6779, metadata !207), !dbg !6780
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6781
  %1 = load i8*, i8** %name.addr, align 8, !dbg !6782
  %call = call i32 @pkey_test_init(%struct.evp_test_st* %0, i8* %1, i32 0, i32 (%struct.evp_pkey_ctx_st*)* @EVP_PKEY_sign_init, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* @EVP_PKEY_sign), !dbg !6783
  ret i32 %call, !dbg !6784
}

declare i32 @EVP_PKEY_sign_init(%struct.evp_pkey_ctx_st*) #2

declare i32 @EVP_PKEY_sign(%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @verify_recover_test_init(%struct.evp_test_st* %t, i8* %name) #0 !dbg !6785 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %name.addr = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6786, metadata !207), !dbg !6787
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !6788, metadata !207), !dbg !6789
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6790
  %1 = load i8*, i8** %name.addr, align 8, !dbg !6791
  %call = call i32 @pkey_test_init(%struct.evp_test_st* %0, i8* %1, i32 1, i32 (%struct.evp_pkey_ctx_st*)* @EVP_PKEY_verify_recover_init, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* @EVP_PKEY_verify_recover), !dbg !6792
  ret i32 %call, !dbg !6793
}

declare i32 @EVP_PKEY_verify_recover_init(%struct.evp_pkey_ctx_st*) #2

declare i32 @EVP_PKEY_verify_recover(%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @verify_test_init(%struct.evp_test_st* %t, i8* %name) #0 !dbg !6794 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %name.addr = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6795, metadata !207), !dbg !6796
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !6797, metadata !207), !dbg !6798
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6799
  %1 = load i8*, i8** %name.addr, align 8, !dbg !6800
  %call = call i32 @pkey_test_init(%struct.evp_test_st* %0, i8* %1, i32 1, i32 (%struct.evp_pkey_ctx_st*)* @EVP_PKEY_verify_init, i32 (%struct.evp_pkey_ctx_st*, i8*, i64*, i8*, i64)* null), !dbg !6801
  ret i32 %call, !dbg !6802
}

; Function Attrs: nounwind uwtable
define internal i32 @verify_test_run(%struct.evp_test_st* %t) #0 !dbg !6803 {
entry:
  %t.addr = alloca %struct.evp_test_st*, align 8
  %kdata = alloca %struct.pkey_data_st*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6804, metadata !207), !dbg !6805
  call void @llvm.dbg.declare(metadata %struct.pkey_data_st** %kdata, metadata !6806, metadata !207), !dbg !6807
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6808
  %data = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 9, !dbg !6809
  %1 = load i8*, i8** %data, align 8, !dbg !6809
  %2 = bitcast i8* %1 to %struct.pkey_data_st*, !dbg !6808
  store %struct.pkey_data_st* %2, %struct.pkey_data_st** %kdata, align 8, !dbg !6807
  %3 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6810
  %ctx = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %3, i32 0, i32 0, !dbg !6812
  %4 = load %struct.evp_pkey_ctx_st*, %struct.evp_pkey_ctx_st** %ctx, align 8, !dbg !6812
  %5 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6813
  %output = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %5, i32 0, i32 4, !dbg !6814
  %6 = load i8*, i8** %output, align 8, !dbg !6814
  %7 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6815
  %output_len = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %7, i32 0, i32 5, !dbg !6816
  %8 = load i64, i64* %output_len, align 8, !dbg !6816
  %9 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6817
  %input = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %9, i32 0, i32 2, !dbg !6818
  %10 = load i8*, i8** %input, align 8, !dbg !6818
  %11 = load %struct.pkey_data_st*, %struct.pkey_data_st** %kdata, align 8, !dbg !6819
  %input_len = getelementptr inbounds %struct.pkey_data_st, %struct.pkey_data_st* %11, i32 0, i32 3, !dbg !6820
  %12 = load i64, i64* %input_len, align 8, !dbg !6820
  %call = call i32 @EVP_PKEY_verify(%struct.evp_pkey_ctx_st* %4, i8* %6, i64 %8, i8* %10, i64 %12), !dbg !6821
  %cmp = icmp sle i32 %call, 0, !dbg !6822
  br i1 %cmp, label %if.then, label %if.end, !dbg !6823

if.then:                                          ; preds = %entry
  %13 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6824
  %err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %13, i32 0, i32 4, !dbg !6825
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.117, i32 0, i32 0), i8** %err, align 8, !dbg !6826
  br label %if.end, !dbg !6824

if.end:                                           ; preds = %if.then, %entry
  ret i32 1, !dbg !6827
}

declare i32 @EVP_PKEY_verify_init(%struct.evp_pkey_ctx_st*) #2

declare i32 @EVP_PKEY_verify(%struct.evp_pkey_ctx_st*, i8*, i64, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @check_test_error(%struct.evp_test_st* %t) #0 !dbg !6828 {
entry:
  %retval = alloca i32, align 4
  %t.addr = alloca %struct.evp_test_st*, align 8
  %err = alloca i64, align 8
  %func = alloca i8*, align 8
  %reason = alloca i8*, align 8
  store %struct.evp_test_st* %t, %struct.evp_test_st** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.evp_test_st** %t.addr, metadata !6829, metadata !207), !dbg !6830
  call void @llvm.dbg.declare(metadata i64* %err, metadata !6831, metadata !207), !dbg !6832
  call void @llvm.dbg.declare(metadata i8** %func, metadata !6833, metadata !207), !dbg !6834
  call void @llvm.dbg.declare(metadata i8** %reason, metadata !6835, metadata !207), !dbg !6836
  %0 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6837
  %err1 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %0, i32 0, i32 4, !dbg !6839
  %1 = load i8*, i8** %err1, align 8, !dbg !6839
  %cmp = icmp eq i8* %1, null, !dbg !6840
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6841

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6842
  %expected_err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %2, i32 0, i32 6, !dbg !6844
  %3 = load i8*, i8** %expected_err, align 8, !dbg !6844
  %cmp2 = icmp eq i8* %3, null, !dbg !6845
  br i1 %cmp2, label %if.then, label %if.end, !dbg !6846

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4, !dbg !6847
  br label %return, !dbg !6847

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6848
  %err3 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %4, i32 0, i32 4, !dbg !6850
  %5 = load i8*, i8** %err3, align 8, !dbg !6850
  %cmp4 = icmp ne i8* %5, null, !dbg !6851
  br i1 %cmp4, label %land.lhs.true5, label %if.end20, !dbg !6852

land.lhs.true5:                                   ; preds = %if.end
  %6 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6853
  %expected_err6 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %6, i32 0, i32 6, !dbg !6855
  %7 = load i8*, i8** %expected_err6, align 8, !dbg !6855
  %cmp7 = icmp eq i8* %7, null, !dbg !6856
  br i1 %cmp7, label %if.then8, label %if.end20, !dbg !6857

if.then8:                                         ; preds = %land.lhs.true5
  %8 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6858
  %aux_err = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %8, i32 0, i32 5, !dbg !6861
  %9 = load i8*, i8** %aux_err, align 8, !dbg !6861
  %cmp9 = icmp ne i8* %9, null, !dbg !6862
  br i1 %cmp9, label %if.then10, label %if.else, !dbg !6863

if.then10:                                        ; preds = %if.then8
  %10 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6864
  %s = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %10, i32 0, i32 0, !dbg !6866
  %test_file = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s, i32 0, i32 0, !dbg !6867
  %11 = load i8*, i8** %test_file, align 8, !dbg !6867
  %12 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6868
  %s11 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %12, i32 0, i32 0, !dbg !6869
  %start = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s11, i32 0, i32 3, !dbg !6870
  %13 = load i32, i32* %start, align 4, !dbg !6870
  %14 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6871
  %aux_err12 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %14, i32 0, i32 5, !dbg !6872
  %15 = load i8*, i8** %aux_err12, align 8, !dbg !6872
  %16 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6873
  %err13 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %16, i32 0, i32 4, !dbg !6874
  %17 = load i8*, i8** %err13, align 8, !dbg !6874
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2694, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.229, i32 0, i32 0), i8* %11, i32 %13, i8* %15, i8* %17), !dbg !6875
  br label %if.end19, !dbg !6876

if.else:                                          ; preds = %if.then8
  %18 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6877
  %s14 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %18, i32 0, i32 0, !dbg !6879
  %test_file15 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s14, i32 0, i32 0, !dbg !6880
  %19 = load i8*, i8** %test_file15, align 8, !dbg !6880
  %20 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6881
  %s16 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %20, i32 0, i32 0, !dbg !6882
  %start17 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s16, i32 0, i32 3, !dbg !6883
  %21 = load i32, i32* %start17, align 4, !dbg !6883
  %22 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6884
  %err18 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %22, i32 0, i32 4, !dbg !6885
  %23 = load i8*, i8** %err18, align 8, !dbg !6885
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2697, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.230, i32 0, i32 0), i8* %19, i32 %21, i8* %23), !dbg !6886
  br label %if.end19

if.end19:                                         ; preds = %if.else, %if.then10
  store i32 0, i32* %retval, align 4, !dbg !6887
  br label %return, !dbg !6887

if.end20:                                         ; preds = %land.lhs.true5, %if.end
  %24 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6888
  %err21 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %24, i32 0, i32 4, !dbg !6890
  %25 = load i8*, i8** %err21, align 8, !dbg !6890
  %cmp22 = icmp eq i8* %25, null, !dbg !6891
  br i1 %cmp22, label %land.lhs.true23, label %if.end32, !dbg !6892

land.lhs.true23:                                  ; preds = %if.end20
  %26 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6893
  %expected_err24 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %26, i32 0, i32 6, !dbg !6895
  %27 = load i8*, i8** %expected_err24, align 8, !dbg !6895
  %cmp25 = icmp ne i8* %27, null, !dbg !6896
  br i1 %cmp25, label %if.then26, label %if.end32, !dbg !6897

if.then26:                                        ; preds = %land.lhs.true23
  %28 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6898
  %s27 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %28, i32 0, i32 0, !dbg !6900
  %test_file28 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s27, i32 0, i32 0, !dbg !6901
  %29 = load i8*, i8** %test_file28, align 8, !dbg !6901
  %30 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6902
  %s29 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %30, i32 0, i32 0, !dbg !6903
  %start30 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s29, i32 0, i32 3, !dbg !6904
  %31 = load i32, i32* %start30, align 4, !dbg !6904
  %32 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6905
  %expected_err31 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %32, i32 0, i32 6, !dbg !6906
  %33 = load i8*, i8** %expected_err31, align 8, !dbg !6906
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2703, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.231, i32 0, i32 0), i8* %29, i32 %31, i8* %33), !dbg !6907
  store i32 0, i32* %retval, align 4, !dbg !6908
  br label %return, !dbg !6908

if.end32:                                         ; preds = %land.lhs.true23, %if.end20
  %34 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6909
  %err33 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %34, i32 0, i32 4, !dbg !6911
  %35 = load i8*, i8** %err33, align 8, !dbg !6911
  %36 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6912
  %expected_err34 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %36, i32 0, i32 6, !dbg !6913
  %37 = load i8*, i8** %expected_err34, align 8, !dbg !6913
  %call = call i32 @strcmp(i8* %35, i8* %37) #7, !dbg !6914
  %cmp35 = icmp ne i32 %call, 0, !dbg !6915
  br i1 %cmp35, label %if.then36, label %if.end43, !dbg !6916

if.then36:                                        ; preds = %if.end32
  %38 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6917
  %s37 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %38, i32 0, i32 0, !dbg !6919
  %test_file38 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s37, i32 0, i32 0, !dbg !6920
  %39 = load i8*, i8** %test_file38, align 8, !dbg !6920
  %40 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6921
  %s39 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %40, i32 0, i32 0, !dbg !6922
  %start40 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s39, i32 0, i32 3, !dbg !6923
  %41 = load i32, i32* %start40, align 4, !dbg !6923
  %42 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6924
  %expected_err41 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %42, i32 0, i32 6, !dbg !6925
  %43 = load i8*, i8** %expected_err41, align 8, !dbg !6925
  %44 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6926
  %err42 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %44, i32 0, i32 4, !dbg !6927
  %45 = load i8*, i8** %err42, align 8, !dbg !6927
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2709, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.232, i32 0, i32 0), i8* %39, i32 %41, i8* %43, i8* %45), !dbg !6928
  store i32 0, i32* %retval, align 4, !dbg !6929
  br label %return, !dbg !6929

if.end43:                                         ; preds = %if.end32
  %46 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6930
  %func44 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %46, i32 0, i32 7, !dbg !6932
  %47 = load i8*, i8** %func44, align 8, !dbg !6932
  %cmp45 = icmp eq i8* %47, null, !dbg !6933
  br i1 %cmp45, label %land.lhs.true46, label %if.end50, !dbg !6934

land.lhs.true46:                                  ; preds = %if.end43
  %48 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6935
  %reason47 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %48, i32 0, i32 8, !dbg !6937
  %49 = load i8*, i8** %reason47, align 8, !dbg !6937
  %cmp48 = icmp eq i8* %49, null, !dbg !6938
  br i1 %cmp48, label %if.then49, label %if.end50, !dbg !6939

if.then49:                                        ; preds = %land.lhs.true46
  store i32 1, i32* %retval, align 4, !dbg !6940
  br label %return, !dbg !6940

if.end50:                                         ; preds = %land.lhs.true46, %if.end43
  %50 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6941
  %func51 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %50, i32 0, i32 7, !dbg !6943
  %51 = load i8*, i8** %func51, align 8, !dbg !6943
  %cmp52 = icmp eq i8* %51, null, !dbg !6944
  br i1 %cmp52, label %if.then55, label %lor.lhs.false, !dbg !6945

lor.lhs.false:                                    ; preds = %if.end50
  %52 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6946
  %reason53 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %52, i32 0, i32 8, !dbg !6948
  %53 = load i8*, i8** %reason53, align 8, !dbg !6948
  %cmp54 = icmp eq i8* %53, null, !dbg !6949
  br i1 %cmp54, label %if.then55, label %if.end60, !dbg !6950

if.then55:                                        ; preds = %lor.lhs.false, %if.end50
  %54 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6951
  %s56 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %54, i32 0, i32 0, !dbg !6953
  %test_file57 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s56, i32 0, i32 0, !dbg !6954
  %55 = load i8*, i8** %test_file57, align 8, !dbg !6954
  %56 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6955
  %s58 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %56, i32 0, i32 0, !dbg !6956
  %start59 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s58, i32 0, i32 3, !dbg !6957
  %57 = load i32, i32* %start59, align 4, !dbg !6957
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2718, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.233, i32 0, i32 0), i8* %55, i32 %57), !dbg !6958
  store i32 0, i32* %retval, align 4, !dbg !6959
  br label %return, !dbg !6959

if.end60:                                         ; preds = %lor.lhs.false
  %call61 = call i64 @ERR_peek_error(), !dbg !6960
  store i64 %call61, i64* %err, align 8, !dbg !6961
  %58 = load i64, i64* %err, align 8, !dbg !6962
  %cmp62 = icmp eq i64 %58, 0, !dbg !6964
  br i1 %cmp62, label %if.then63, label %if.end70, !dbg !6965

if.then63:                                        ; preds = %if.end60
  %59 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6966
  %s64 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %59, i32 0, i32 0, !dbg !6968
  %test_file65 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s64, i32 0, i32 0, !dbg !6969
  %60 = load i8*, i8** %test_file65, align 8, !dbg !6969
  %61 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6970
  %s66 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %61, i32 0, i32 0, !dbg !6971
  %start67 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s66, i32 0, i32 3, !dbg !6972
  %62 = load i32, i32* %start67, align 4, !dbg !6972
  %63 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6973
  %func68 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %63, i32 0, i32 7, !dbg !6974
  %64 = load i8*, i8** %func68, align 8, !dbg !6974
  %65 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6975
  %reason69 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %65, i32 0, i32 8, !dbg !6976
  %66 = load i8*, i8** %reason69, align 8, !dbg !6976
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2725, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.234, i32 0, i32 0), i8* %60, i32 %62, i8* %64, i8* %66), !dbg !6977
  store i32 0, i32* %retval, align 4, !dbg !6978
  br label %return, !dbg !6978

if.end70:                                         ; preds = %if.end60
  %67 = load i64, i64* %err, align 8, !dbg !6979
  %call71 = call i8* @ERR_func_error_string(i64 %67), !dbg !6980
  store i8* %call71, i8** %func, align 8, !dbg !6981
  %68 = load i64, i64* %err, align 8, !dbg !6982
  %call72 = call i8* @ERR_reason_error_string(i64 %68), !dbg !6983
  store i8* %call72, i8** %reason, align 8, !dbg !6984
  %69 = load i8*, i8** %func, align 8, !dbg !6985
  %cmp73 = icmp eq i8* %69, null, !dbg !6987
  br i1 %cmp73, label %land.lhs.true74, label %if.end83, !dbg !6988

land.lhs.true74:                                  ; preds = %if.end70
  %70 = load i8*, i8** %reason, align 8, !dbg !6989
  %cmp75 = icmp eq i8* %70, null, !dbg !6991
  br i1 %cmp75, label %if.then76, label %if.end83, !dbg !6992

if.then76:                                        ; preds = %land.lhs.true74
  %71 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6993
  %s77 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %71, i32 0, i32 0, !dbg !6995
  %test_file78 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s77, i32 0, i32 0, !dbg !6996
  %72 = load i8*, i8** %test_file78, align 8, !dbg !6996
  %73 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !6997
  %s79 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %73, i32 0, i32 0, !dbg !6998
  %start80 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s79, i32 0, i32 3, !dbg !6999
  %74 = load i32, i32* %start80, align 4, !dbg !6999
  %75 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !7000
  %func81 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %75, i32 0, i32 7, !dbg !7001
  %76 = load i8*, i8** %func81, align 8, !dbg !7001
  %77 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !7002
  %reason82 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %77, i32 0, i32 8, !dbg !7003
  %78 = load i8*, i8** %reason82, align 8, !dbg !7003
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2734, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.235, i32 0, i32 0), i8* %72, i32 %74, i8* %76, i8* %78), !dbg !7004
  store i32 1, i32* %retval, align 4, !dbg !7005
  br label %return, !dbg !7005

if.end83:                                         ; preds = %land.lhs.true74, %if.end70
  %79 = load i8*, i8** %func, align 8, !dbg !7006
  %80 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !7008
  %func84 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %80, i32 0, i32 7, !dbg !7009
  %81 = load i8*, i8** %func84, align 8, !dbg !7009
  %call85 = call i32 @strcmp(i8* %79, i8* %81) #7, !dbg !7010
  %cmp86 = icmp eq i32 %call85, 0, !dbg !7011
  br i1 %cmp86, label %land.lhs.true87, label %if.end92, !dbg !7012

land.lhs.true87:                                  ; preds = %if.end83
  %82 = load i8*, i8** %reason, align 8, !dbg !7013
  %83 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !7015
  %reason88 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %83, i32 0, i32 8, !dbg !7016
  %84 = load i8*, i8** %reason88, align 8, !dbg !7016
  %call89 = call i32 @strcmp(i8* %82, i8* %84) #7, !dbg !7017
  %cmp90 = icmp eq i32 %call89, 0, !dbg !7018
  br i1 %cmp90, label %if.then91, label %if.end92, !dbg !7019

if.then91:                                        ; preds = %land.lhs.true87
  store i32 1, i32* %retval, align 4, !dbg !7020
  br label %return, !dbg !7020

if.end92:                                         ; preds = %land.lhs.true87, %if.end83
  %85 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !7021
  %s93 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %85, i32 0, i32 0, !dbg !7022
  %test_file94 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s93, i32 0, i32 0, !dbg !7023
  %86 = load i8*, i8** %test_file94, align 8, !dbg !7023
  %87 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !7024
  %s95 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %87, i32 0, i32 0, !dbg !7025
  %start96 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %s95, i32 0, i32 3, !dbg !7026
  %88 = load i32, i32* %start96, align 4, !dbg !7026
  %89 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !7027
  %func97 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %89, i32 0, i32 7, !dbg !7028
  %90 = load i8*, i8** %func97, align 8, !dbg !7028
  %91 = load %struct.evp_test_st*, %struct.evp_test_st** %t.addr, align 8, !dbg !7029
  %reason98 = getelementptr inbounds %struct.evp_test_st, %struct.evp_test_st* %91, i32 0, i32 8, !dbg !7030
  %92 = load i8*, i8** %reason98, align 8, !dbg !7030
  %93 = load i8*, i8** %func, align 8, !dbg !7031
  %94 = load i8*, i8** %reason, align 8, !dbg !7032
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), i32 2742, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.236, i32 0, i32 0), i8* %86, i32 %88, i8* %90, i8* %92, i8* %93, i8* %94), !dbg !7033
  store i32 0, i32* %retval, align 4, !dbg !7034
  br label %return, !dbg !7034

return:                                           ; preds = %if.end92, %if.then91, %if.then76, %if.then63, %if.then55, %if.then49, %if.then36, %if.then26, %if.end19, %if.then
  %95 = load i32, i32* %retval, align 4, !dbg !7035
  ret i32 %95, !dbg !7035
}

declare i8* @ERR_func_error_string(i64) #2

declare i8* @ERR_reason_error_string(i64) #2

declare void @test_clearstanza(%struct.stanza_st*) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!199, !200}
!llvm.ident = !{!201}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.9.0 (tags/RELEASE_390/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !30, globals: !69)
!1 = !DIFile(filename: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs/[inter]test--evp_test-bin-evp_test.o.i", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs")
!2 = !{!3, !9, !15}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !4, line: 1753, size: 32, align: 32, elements: !5)
!4 = !DIFile(filename: "test/evp_test.c", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs")
!5 = !{!6, !7, !8}
!6 = !DIEnumerator(name: "BASE64_CANONICAL_ENCODING", value: 0)
!7 = !DIEnumerator(name: "BASE64_VALID_ENCODING", value: 1)
!8 = !DIEnumerator(name: "BASE64_INVALID_ENCODING", value: 2)
!9 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "pbe_type_enum", file: !4, line: 1536, size: 32, align: 32, elements: !10)
!10 = !{!11, !12, !13, !14}
!11 = !DIEnumerator(name: "PBE_TYPE_INVALID", value: 0)
!12 = !DIEnumerator(name: "PBE_TYPE_SCRYPT", value: 1)
!13 = !DIEnumerator(name: "PBE_TYPE_PBKDF2", value: 2)
!14 = !DIEnumerator(name: "PBE_TYPE_PKCS12", value: 3)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !16, line: 46, size: 32, align: 32, elements: !17)
!16 = !DIFile(filename: "/usr/include/ctype.h", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs")
!17 = !{!18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29}
!18 = !DIEnumerator(name: "_ISupper", value: 256)
!19 = !DIEnumerator(name: "_ISlower", value: 512)
!20 = !DIEnumerator(name: "_ISalpha", value: 1024)
!21 = !DIEnumerator(name: "_ISdigit", value: 2048)
!22 = !DIEnumerator(name: "_ISxdigit", value: 4096)
!23 = !DIEnumerator(name: "_ISspace", value: 8192)
!24 = !DIEnumerator(name: "_ISprint", value: 16384)
!25 = !DIEnumerator(name: "_ISgraph", value: 32768)
!26 = !DIEnumerator(name: "_ISblank", value: 1)
!27 = !DIEnumerator(name: "_IScntrl", value: 2)
!28 = !DIEnumerator(name: "_ISpunct", value: 4)
!29 = !DIEnumerator(name: "_ISalnum", value: 8)
!30 = !{!31, !32, !33, !36, !40, !44, !47, !49, !51, !61, !64, !57, !66, !67}
!31 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!33 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !34, line: 216, baseType: !35)
!34 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs")
!35 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!36 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64, align: 64)
!37 = !DIDerivedType(tag: DW_TAG_typedef, name: "OPENSSL_STACK", file: !38, line: 17, baseType: !39)
!38 = !DIFile(filename: "include/openssl/stack.h", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs")
!39 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_st", file: !38, line: 17, flags: DIFlagFwdDecl)
!40 = !DIDerivedType(tag: DW_TAG_typedef, name: "OPENSSL_sk_freefunc", file: !38, line: 20, baseType: !41)
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64, align: 64)
!42 = !DISubroutineType(types: !43)
!43 = !{null, !32}
!44 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !45, size: 64, align: 64)
!45 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_st_EVP_TEST_BUFFER", file: !46, line: 11, flags: DIFlagFwdDecl)
!46 = !DIFile(filename: "test/evp_test.h", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs")
!47 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64, align: 64)
!48 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!49 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64, align: 64)
!50 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !37)
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64, align: 64)
!52 = !DIDerivedType(tag: DW_TAG_typedef, name: "EVP_TEST_BUFFER", file: !46, line: 10, baseType: !53)
!53 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "evp_test_buffer_st", file: !4, line: 103, size: 256, align: 64, elements: !54)
!54 = !{!55, !58, !59, !60}
!55 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !53, file: !4, line: 104, baseType: !56, size: 64, align: 64)
!56 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !57, size: 64, align: 64)
!57 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!58 = !DIDerivedType(tag: DW_TAG_member, name: "buflen", scope: !53, file: !4, line: 105, baseType: !33, size: 64, align: 64, offset: 64)
!59 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !53, file: !4, line: 106, baseType: !33, size: 64, align: 64, offset: 128)
!60 = !DIDerivedType(tag: DW_TAG_member, name: "count_set", scope: !53, file: !4, line: 107, baseType: !31, size: 32, align: 32, offset: 192)
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !62, size: 64, align: 64)
!62 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_st_OPENSSL_STRING", file: !63, line: 159, flags: DIFlagFwdDecl)
!63 = !DIFile(filename: "include/openssl/safestack.h", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs")
!64 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !65, size: 64, align: 64)
!65 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!66 = !DIBasicType(name: "unsigned short", size: 16, align: 16, encoding: DW_ATE_unsigned)
!67 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !68, size: 64, align: 64)
!68 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !65)
!69 = !{!70, !88, !158, !159, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !178, !179, !180, !181, !182, !183, !184, !185, !186, !198}
!70 = distinct !DIGlobalVariable(name: "options", scope: !71, file: !4, line: 3036, type: !85, isLocal: true, isDefinition: true, variable: [9 x %struct.options_st]* @test_get_options.options)
!71 = distinct !DISubprogram(name: "test_get_options", scope: !4, file: !4, line: 3036, type: !72, isLocal: false, isDefinition: true, scopeLine: 3036, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!72 = !DISubroutineType(types: !73)
!73 = !{!74}
!74 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !75, size: 64, align: 64)
!75 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !76)
!76 = !DIDerivedType(tag: DW_TAG_typedef, name: "OPTIONS", file: !77, line: 280, baseType: !78)
!77 = !DIFile(filename: "apps/include/opt.h", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs")
!78 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "options_st", file: !77, line: 269, size: 192, align: 64, elements: !79)
!79 = !{!80, !81, !82, !83}
!80 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !78, file: !77, line: 270, baseType: !67, size: 64, align: 64)
!81 = !DIDerivedType(tag: DW_TAG_member, name: "retval", scope: !78, file: !77, line: 271, baseType: !31, size: 32, align: 32, offset: 64)
!82 = !DIDerivedType(tag: DW_TAG_member, name: "valtype", scope: !78, file: !77, line: 278, baseType: !31, size: 32, align: 32, offset: 96)
!83 = !DIDerivedType(tag: DW_TAG_member, name: "helpstr", scope: !78, file: !77, line: 279, baseType: !67, size: 64, align: 64, offset: 128)
!84 = !{}
!85 = !DICompositeType(tag: DW_TAG_array_type, baseType: !75, size: 1728, align: 64, elements: !86)
!86 = !{!87}
!87 = !DISubrange(count: 9)
!88 = distinct !DIGlobalVariable(name: "evp_test_list", scope: !0, file: !4, line: 2624, type: !89, isLocal: true, isDefinition: true, variable: [19 x %struct.evp_test_method_st*]* @evp_test_list)
!89 = !DICompositeType(tag: DW_TAG_array_type, baseType: !90, size: 1216, align: 64, elements: !156)
!90 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !91, size: 64, align: 64)
!91 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !92)
!92 = !DIDerivedType(tag: DW_TAG_typedef, name: "EVP_TEST_METHOD", file: !4, line: 26, baseType: !93)
!93 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "evp_test_method_st", file: !4, line: 46, size: 320, align: 64, elements: !94)
!94 = !{!95, !96, !144, !148, !152}
!95 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !93, file: !4, line: 48, baseType: !67, size: 64, align: 64)
!96 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !93, file: !4, line: 50, baseType: !97, size: 64, align: 64, offset: 64)
!97 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !98, size: 64, align: 64)
!98 = !DISubroutineType(types: !99)
!99 = !{!31, !100, !67}
!100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !101, size: 64, align: 64)
!101 = !DIDerivedType(tag: DW_TAG_typedef, name: "EVP_TEST", file: !4, line: 41, baseType: !102)
!102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "evp_test_st", file: !4, line: 31, size: 36288, align: 64, elements: !103)
!103 = !{!104, !135, !136, !137, !138, !139, !140, !141, !142, !143}
!104 = !DIDerivedType(tag: DW_TAG_member, name: "s", scope: !102, file: !4, line: 32, baseType: !105, size: 35712, align: 64)
!105 = !DIDerivedType(tag: DW_TAG_typedef, name: "STANZA", file: !106, line: 498, baseType: !107)
!106 = !DIFile(filename: "test/testutil.h", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs")
!107 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stanza_st", file: !106, line: 486, size: 35712, align: 64, elements: !108)
!108 = !{!109, !110, !115, !116, !117, !118, !119, !120, !121, !130, !131}
!109 = !DIDerivedType(tag: DW_TAG_member, name: "test_file", scope: !107, file: !106, line: 487, baseType: !67, size: 64, align: 64)
!110 = !DIDerivedType(tag: DW_TAG_member, name: "fp", scope: !107, file: !106, line: 488, baseType: !111, size: 64, align: 64, offset: 64)
!111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !112, size: 64, align: 64)
!112 = !DIDerivedType(tag: DW_TAG_typedef, name: "BIO", file: !113, line: 79, baseType: !114)
!113 = !DIFile(filename: "include/openssl/ossl_typ.h", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs")
!114 = !DICompositeType(tag: DW_TAG_structure_type, name: "bio_st", file: !113, line: 79, flags: DIFlagFwdDecl)
!115 = !DIDerivedType(tag: DW_TAG_member, name: "curr", scope: !107, file: !106, line: 489, baseType: !31, size: 32, align: 32, offset: 128)
!116 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !107, file: !106, line: 490, baseType: !31, size: 32, align: 32, offset: 160)
!117 = !DIDerivedType(tag: DW_TAG_member, name: "errors", scope: !107, file: !106, line: 491, baseType: !31, size: 32, align: 32, offset: 192)
!118 = !DIDerivedType(tag: DW_TAG_member, name: "numtests", scope: !107, file: !106, line: 492, baseType: !31, size: 32, align: 32, offset: 224)
!119 = !DIDerivedType(tag: DW_TAG_member, name: "numskip", scope: !107, file: !106, line: 493, baseType: !31, size: 32, align: 32, offset: 256)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "numpairs", scope: !107, file: !106, line: 494, baseType: !31, size: 32, align: 32, offset: 288)
!121 = !DIDerivedType(tag: DW_TAG_member, name: "pairs", scope: !107, file: !106, line: 495, baseType: !122, size: 2560, align: 64, offset: 320)
!122 = !DICompositeType(tag: DW_TAG_array_type, baseType: !123, size: 2560, align: 64, elements: !128)
!123 = !DIDerivedType(tag: DW_TAG_typedef, name: "PAIR", file: !106, line: 484, baseType: !124)
!124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pair_st", file: !106, line: 481, size: 128, align: 64, elements: !125)
!125 = !{!126, !127}
!126 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !124, file: !106, line: 482, baseType: !64, size: 64, align: 64)
!127 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !124, file: !106, line: 483, baseType: !64, size: 64, align: 64, offset: 64)
!128 = !{!129}
!129 = !DISubrange(count: 20)
!130 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !107, file: !106, line: 496, baseType: !111, size: 64, align: 64, offset: 2880)
!131 = !DIDerivedType(tag: DW_TAG_member, name: "buff", scope: !107, file: !106, line: 497, baseType: !132, size: 32768, align: 8, offset: 2944)
!132 = !DICompositeType(tag: DW_TAG_array_type, baseType: !65, size: 32768, align: 8, elements: !133)
!133 = !{!134}
!134 = !DISubrange(count: 4096)
!135 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !102, file: !4, line: 33, baseType: !64, size: 64, align: 64, offset: 35712)
!136 = !DIDerivedType(tag: DW_TAG_member, name: "skip", scope: !102, file: !4, line: 34, baseType: !31, size: 32, align: 32, offset: 35776)
!137 = !DIDerivedType(tag: DW_TAG_member, name: "meth", scope: !102, file: !4, line: 35, baseType: !90, size: 64, align: 64, offset: 35840)
!138 = !DIDerivedType(tag: DW_TAG_member, name: "err", scope: !102, file: !4, line: 36, baseType: !67, size: 64, align: 64, offset: 35904)
!139 = !DIDerivedType(tag: DW_TAG_member, name: "aux_err", scope: !102, file: !4, line: 36, baseType: !67, size: 64, align: 64, offset: 35968)
!140 = !DIDerivedType(tag: DW_TAG_member, name: "expected_err", scope: !102, file: !4, line: 37, baseType: !64, size: 64, align: 64, offset: 36032)
!141 = !DIDerivedType(tag: DW_TAG_member, name: "func", scope: !102, file: !4, line: 38, baseType: !64, size: 64, align: 64, offset: 36096)
!142 = !DIDerivedType(tag: DW_TAG_member, name: "reason", scope: !102, file: !4, line: 39, baseType: !64, size: 64, align: 64, offset: 36160)
!143 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !102, file: !4, line: 40, baseType: !32, size: 64, align: 64, offset: 36224)
!144 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !93, file: !4, line: 52, baseType: !145, size: 64, align: 64, offset: 128)
!145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !146, size: 64, align: 64)
!146 = !DISubroutineType(types: !147)
!147 = !{null, !100}
!148 = !DIDerivedType(tag: DW_TAG_member, name: "parse", scope: !93, file: !4, line: 54, baseType: !149, size: 64, align: 64, offset: 192)
!149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 64, align: 64)
!150 = !DISubroutineType(types: !151)
!151 = !{!31, !100, !67, !67}
!152 = !DIDerivedType(tag: DW_TAG_member, name: "run_test", scope: !93, file: !4, line: 56, baseType: !153, size: 64, align: 64, offset: 256)
!153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !154, size: 64, align: 64)
!154 = !DISubroutineType(types: !155)
!155 = !{!31, !100}
!156 = !{!157}
!157 = !DISubrange(count: 19)
!158 = distinct !DIGlobalVariable(name: "cipher_test_method", scope: !0, file: !4, line: 834, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @cipher_test_method)
!159 = distinct !DIGlobalVariable(name: "aux_err", scope: !160, file: !4, line: 777, type: !161, isLocal: true, isDefinition: true, variable: [64 x i8]* @cipher_test_run.aux_err)
!160 = distinct !DISubprogram(name: "cipher_test_run", scope: !4, file: !4, line: 755, type: !154, isLocal: true, isDefinition: true, scopeLine: 756, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!161 = !DICompositeType(tag: DW_TAG_array_type, baseType: !65, size: 512, align: 8, elements: !162)
!162 = !{!163}
!163 = !DISubrange(count: 64)
!164 = distinct !DIGlobalVariable(name: "digest_test_method", scope: !0, file: !4, line: 435, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @digest_test_method)
!165 = distinct !DIGlobalVariable(name: "digestsign_test_method", scope: !0, file: !4, line: 2510, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @digestsign_test_method)
!166 = distinct !DIGlobalVariable(name: "digestverify_test_method", scope: !0, file: !4, line: 2544, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @digestverify_test_method)
!167 = distinct !DIGlobalVariable(name: "encode_test_method", scope: !0, file: !4, line: 1887, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @encode_test_method)
!168 = distinct !DIGlobalVariable(name: "kdf_test_method", scope: !0, file: !4, line: 2018, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @kdf_test_method)
!169 = distinct !DIGlobalVariable(name: "pkey_kdf_test_method", scope: !0, file: !4, line: 2118, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @pkey_kdf_test_method)
!170 = distinct !DIGlobalVariable(name: "keypair_test_method", scope: !0, file: !4, line: 2235, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @keypair_test_method)
!171 = distinct !DIGlobalVariable(name: "keygen_test_method", scope: !0, file: !4, line: 2347, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @keygen_test_method)
!172 = distinct !DIGlobalVariable(name: "mac_test_method", scope: !0, file: !4, line: 1249, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @mac_test_method)
!173 = distinct !DIGlobalVariable(name: "epilogue", scope: !174, file: !4, line: 887, type: !175, isLocal: true, isDefinition: true, variable: [13 x i8]* @mac_test_init.epilogue)
!174 = distinct !DISubprogram(name: "mac_test_init", scope: !4, file: !4, line: 874, type: !98, isLocal: true, isDefinition: true, scopeLine: 875, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!175 = !DICompositeType(tag: DW_TAG_array_type, baseType: !68, size: 104, align: 8, elements: !176)
!176 = !{!177}
!177 = !DISubrange(count: 13)
!178 = distinct !DIGlobalVariable(name: "oneshot_digestsign_test_method", scope: !0, file: !4, line: 2588, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @oneshot_digestsign_test_method)
!179 = distinct !DIGlobalVariable(name: "oneshot_digestverify_test_method", scope: !0, file: !4, line: 2611, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @oneshot_digestverify_test_method)
!180 = distinct !DIGlobalVariable(name: "pbe_test_method", scope: !0, file: !4, line: 1740, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @pbe_test_method)
!181 = distinct !DIGlobalVariable(name: "pdecrypt_test_method", scope: !0, file: !4, line: 1437, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @pdecrypt_test_method)
!182 = distinct !DIGlobalVariable(name: "pderive_test_method", scope: !0, file: !4, line: 1523, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @pderive_test_method)
!183 = distinct !DIGlobalVariable(name: "psign_test_method", scope: !0, file: !4, line: 1409, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @psign_test_method)
!184 = distinct !DIGlobalVariable(name: "pverify_recover_test_method", scope: !0, file: !4, line: 1423, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @pverify_recover_test_method)
!185 = distinct !DIGlobalVariable(name: "pverify_test_method", scope: !0, file: !4, line: 1460, type: !91, isLocal: true, isDefinition: true, variable: %struct.evp_test_method_st* @pverify_test_method)
!186 = distinct !DIGlobalVariable(name: "public_keys", scope: !0, file: !4, line: 73, type: !187, isLocal: true, isDefinition: true, variable: %struct.key_list_st** @public_keys)
!187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !188, size: 64, align: 64)
!188 = !DIDerivedType(tag: DW_TAG_typedef, name: "KEY_LIST", file: !4, line: 67, baseType: !189)
!189 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "key_list_st", file: !4, line: 63, size: 192, align: 64, elements: !190)
!190 = !{!191, !192, !196}
!191 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !189, file: !4, line: 64, baseType: !64, size: 64, align: 64)
!192 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !189, file: !4, line: 65, baseType: !193, size: 64, align: 64, offset: 64)
!193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !194, size: 64, align: 64)
!194 = !DIDerivedType(tag: DW_TAG_typedef, name: "EVP_PKEY", file: !113, line: 95, baseType: !195)
!195 = !DICompositeType(tag: DW_TAG_structure_type, name: "evp_pkey_st", file: !113, line: 95, flags: DIFlagFwdDecl)
!196 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !189, file: !4, line: 66, baseType: !197, size: 64, align: 64, offset: 128)
!197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !189, size: 64, align: 64)
!198 = distinct !DIGlobalVariable(name: "private_keys", scope: !0, file: !4, line: 72, type: !187, isLocal: true, isDefinition: true, variable: %struct.key_list_st** @private_keys)
!199 = !{i32 2, !"Dwarf Version", i32 4}
!200 = !{i32 2, !"Debug Info Version", i32 3}
!201 = !{!"clang version 3.9.0 (tags/RELEASE_390/final)"}
!202 = !DILocation(line: 3036, column: 6, scope: !71)
!203 = distinct !DISubprogram(name: "setup_tests", scope: !4, file: !4, line: 3038, type: !204, isLocal: false, isDefinition: true, scopeLine: 3039, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!204 = !DISubroutineType(types: !205)
!205 = !{!31}
!206 = !DILocalVariable(name: "n", scope: !203, file: !4, line: 3040, type: !33)
!207 = !DIExpression()
!208 = !DILocation(line: 3040, column: 12, scope: !203)
!209 = !DILocation(line: 3040, column: 16, scope: !203)
!210 = !DILocation(line: 3042, column: 9, scope: !211)
!211 = distinct !DILexicalBlock(scope: !203, file: !4, line: 3042, column: 9)
!212 = !DILocation(line: 3042, column: 11, scope: !211)
!213 = !DILocation(line: 3042, column: 9, scope: !203)
!214 = !DILocation(line: 3043, column: 9, scope: !211)
!215 = !DILocation(line: 3045, column: 53, scope: !203)
!216 = !DILocation(line: 3045, column: 5, scope: !203)
!217 = !DILocation(line: 3046, column: 5, scope: !203)
!218 = !DILocation(line: 3047, column: 1, scope: !203)
!219 = distinct !DISubprogram(name: "run_file_tests", scope: !4, file: !4, line: 3003, type: !220, isLocal: true, isDefinition: true, scopeLine: 3004, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!220 = !DISubroutineType(types: !221)
!221 = !{!31, !31}
!222 = !DILocalVariable(name: "i", arg: 1, scope: !219, file: !4, line: 3003, type: !31)
!223 = !DILocation(line: 3003, column: 31, scope: !219)
!224 = !DILocalVariable(name: "t", scope: !219, file: !4, line: 3005, type: !100)
!225 = !DILocation(line: 3005, column: 15, scope: !219)
!226 = !DILocalVariable(name: "testfile", scope: !219, file: !4, line: 3006, type: !67)
!227 = !DILocation(line: 3006, column: 17, scope: !219)
!228 = !DILocation(line: 3006, column: 46, scope: !219)
!229 = !DILocation(line: 3006, column: 28, scope: !219)
!230 = !DILocalVariable(name: "c", scope: !219, file: !4, line: 3007, type: !31)
!231 = !DILocation(line: 3007, column: 9, scope: !219)
!232 = !DILocation(line: 3009, column: 82, scope: !233)
!233 = distinct !DILexicalBlock(scope: !219, file: !4, line: 3009, column: 9)
!234 = !DILocation(line: 3009, column: 80, scope: !233)
!235 = !DILocation(line: 3009, column: 78, scope: !233)
!236 = !DILocation(line: 3009, column: 10, scope: !237)
!237 = !DILexicalBlockFile(scope: !233, file: !4, discriminator: 1)
!238 = !DILocation(line: 3009, column: 10, scope: !233)
!239 = !DILocation(line: 3009, column: 9, scope: !219)
!240 = !DILocation(line: 3010, column: 9, scope: !233)
!241 = !DILocation(line: 3011, column: 27, scope: !242)
!242 = distinct !DILexicalBlock(scope: !219, file: !4, line: 3011, column: 9)
!243 = !DILocation(line: 3011, column: 30, scope: !242)
!244 = !DILocation(line: 3011, column: 33, scope: !242)
!245 = !DILocation(line: 3011, column: 10, scope: !242)
!246 = !DILocation(line: 3011, column: 9, scope: !219)
!247 = !DILocation(line: 3012, column: 21, scope: !248)
!248 = distinct !DILexicalBlock(scope: !242, file: !4, line: 3011, column: 44)
!249 = !DILocation(line: 3012, column: 9, scope: !248)
!250 = !DILocation(line: 3013, column: 9, scope: !248)
!251 = !DILocation(line: 3016, column: 5, scope: !219)
!252 = !DILocation(line: 3016, column: 27, scope: !253)
!253 = !DILexicalBlockFile(scope: !219, file: !4, discriminator: 1)
!254 = !DILocation(line: 3016, column: 30, scope: !253)
!255 = !DILocation(line: 3016, column: 32, scope: !253)
!256 = !DILocation(line: 3016, column: 18, scope: !253)
!257 = !DILocation(line: 3016, column: 13, scope: !253)
!258 = !DILocation(line: 3016, column: 12, scope: !253)
!259 = !DILocation(line: 3016, column: 5, scope: !253)
!260 = !DILocation(line: 3017, column: 19, scope: !261)
!261 = distinct !DILexicalBlock(scope: !219, file: !4, line: 3016, column: 15)
!262 = !DILocation(line: 3017, column: 13, scope: !261)
!263 = !DILocation(line: 3017, column: 11, scope: !261)
!264 = !DILocation(line: 3018, column: 13, scope: !265)
!265 = distinct !DILexicalBlock(scope: !261, file: !4, line: 3018, column: 13)
!266 = !DILocation(line: 3018, column: 16, scope: !265)
!267 = !DILocation(line: 3018, column: 13, scope: !261)
!268 = !DILocation(line: 3019, column: 13, scope: !265)
!269 = distinct !{!269, !251}
!270 = !DILocation(line: 3020, column: 13, scope: !271)
!271 = distinct !DILexicalBlock(scope: !261, file: !4, line: 3020, column: 13)
!272 = !DILocation(line: 3020, column: 15, scope: !271)
!273 = !DILocation(line: 3020, column: 20, scope: !271)
!274 = !DILocation(line: 3020, column: 33, scope: !275)
!275 = !DILexicalBlockFile(scope: !271, file: !4, discriminator: 1)
!276 = !DILocation(line: 3020, column: 24, scope: !275)
!277 = !DILocation(line: 3020, column: 13, scope: !275)
!278 = !DILocation(line: 3021, column: 13, scope: !279)
!279 = distinct !DILexicalBlock(scope: !271, file: !4, line: 3020, column: 37)
!280 = !DILocation(line: 3021, column: 16, scope: !279)
!281 = !DILocation(line: 3021, column: 18, scope: !279)
!282 = !DILocation(line: 3021, column: 24, scope: !279)
!283 = !DILocation(line: 3022, column: 13, scope: !279)
!284 = !DILocation(line: 3016, column: 5, scope: !285)
!285 = !DILexicalBlockFile(scope: !219, file: !4, discriminator: 2)
!286 = !DILocation(line: 3025, column: 20, scope: !219)
!287 = !DILocation(line: 3025, column: 23, scope: !219)
!288 = !DILocation(line: 3025, column: 5, scope: !219)
!289 = !DILocation(line: 3026, column: 16, scope: !219)
!290 = !DILocation(line: 3026, column: 5, scope: !219)
!291 = !DILocation(line: 3028, column: 19, scope: !219)
!292 = !DILocation(line: 3028, column: 5, scope: !219)
!293 = !DILocation(line: 3029, column: 19, scope: !219)
!294 = !DILocation(line: 3029, column: 5, scope: !219)
!295 = !DILocation(line: 3030, column: 14, scope: !219)
!296 = !DILocation(line: 3030, column: 17, scope: !219)
!297 = !DILocation(line: 3030, column: 19, scope: !219)
!298 = !DILocation(line: 3030, column: 5, scope: !219)
!299 = !DILocation(line: 3031, column: 9, scope: !219)
!300 = !DILocation(line: 3031, column: 12, scope: !219)
!301 = !DILocation(line: 3031, column: 14, scope: !219)
!302 = !DILocation(line: 3031, column: 7, scope: !219)
!303 = !DILocation(line: 3032, column: 17, scope: !219)
!304 = !DILocation(line: 3032, column: 5, scope: !219)
!305 = !DILocation(line: 3033, column: 12, scope: !219)
!306 = !DILocation(line: 3033, column: 14, scope: !219)
!307 = !DILocation(line: 3033, column: 5, scope: !219)
!308 = !DILocation(line: 3034, column: 1, scope: !219)
!309 = distinct !DISubprogram(name: "parse", scope: !4, file: !4, line: 2839, type: !154, isLocal: true, isDefinition: true, scopeLine: 2840, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!310 = !DILocalVariable(name: "t", arg: 1, scope: !309, file: !4, line: 2839, type: !100)
!311 = !DILocation(line: 2839, column: 28, scope: !309)
!312 = !DILocalVariable(name: "key", scope: !309, file: !4, line: 2841, type: !187)
!313 = !DILocation(line: 2841, column: 15, scope: !309)
!314 = !DILocalVariable(name: "klist", scope: !309, file: !4, line: 2841, type: !315)
!315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !187, size: 64, align: 64)
!316 = !DILocation(line: 2841, column: 22, scope: !309)
!317 = !DILocalVariable(name: "pkey", scope: !309, file: !4, line: 2842, type: !193)
!318 = !DILocation(line: 2842, column: 15, scope: !309)
!319 = !DILocalVariable(name: "pp", scope: !309, file: !4, line: 2843, type: !320)
!320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !123, size: 64, align: 64)
!321 = !DILocation(line: 2843, column: 11, scope: !309)
!322 = !DILocalVariable(name: "i", scope: !309, file: !4, line: 2844, type: !31)
!323 = !DILocation(line: 2844, column: 9, scope: !309)
!324 = !DILocation(line: 2844, column: 5, scope: !309)
!325 = !DILocation(line: 2847, column: 5, scope: !309)
!326 = distinct !{!326, !325}
!327 = !DILocation(line: 2848, column: 27, scope: !328)
!328 = distinct !DILexicalBlock(scope: !329, file: !4, line: 2848, column: 13)
!329 = distinct !DILexicalBlock(scope: !309, file: !4, line: 2847, column: 8)
!330 = !DILocation(line: 2848, column: 30, scope: !328)
!331 = !DILocation(line: 2848, column: 32, scope: !328)
!332 = !DILocation(line: 2848, column: 18, scope: !328)
!333 = !DILocation(line: 2848, column: 13, scope: !328)
!334 = !DILocation(line: 2848, column: 13, scope: !329)
!335 = !DILocation(line: 2849, column: 13, scope: !328)
!336 = !DILocation(line: 2850, column: 20, scope: !329)
!337 = !DILocation(line: 2850, column: 9, scope: !329)
!338 = !DILocation(line: 2851, column: 31, scope: !339)
!339 = distinct !DILexicalBlock(scope: !329, file: !4, line: 2851, column: 13)
!340 = !DILocation(line: 2851, column: 34, scope: !339)
!341 = !DILocation(line: 2851, column: 14, scope: !339)
!342 = !DILocation(line: 2851, column: 13, scope: !329)
!343 = !DILocation(line: 2852, column: 13, scope: !339)
!344 = !DILocation(line: 2853, column: 5, scope: !329)
!345 = !DILocation(line: 2853, column: 14, scope: !346)
!346 = !DILexicalBlockFile(scope: !309, file: !4, discriminator: 1)
!347 = !DILocation(line: 2853, column: 17, scope: !346)
!348 = !DILocation(line: 2853, column: 19, scope: !346)
!349 = !DILocation(line: 2853, column: 28, scope: !346)
!350 = !DILocation(line: 2853, column: 5, scope: !346)
!351 = !DILocation(line: 2854, column: 11, scope: !309)
!352 = !DILocation(line: 2854, column: 14, scope: !309)
!353 = !DILocation(line: 2854, column: 16, scope: !309)
!354 = !DILocation(line: 2854, column: 8, scope: !309)
!355 = !DILocation(line: 2857, column: 11, scope: !309)
!356 = !DILocation(line: 2858, column: 10, scope: !309)
!357 = !DILocation(line: 2859, column: 16, scope: !358)
!358 = distinct !DILexicalBlock(scope: !309, file: !4, line: 2859, column: 9)
!359 = !DILocation(line: 2859, column: 20, scope: !358)
!360 = !DILocation(line: 2859, column: 9, scope: !358)
!361 = !DILocation(line: 2859, column: 39, scope: !358)
!362 = !DILocation(line: 2859, column: 9, scope: !309)
!363 = !DILocation(line: 2860, column: 40, scope: !364)
!364 = distinct !DILexicalBlock(scope: !358, file: !4, line: 2859, column: 45)
!365 = !DILocation(line: 2860, column: 43, scope: !364)
!366 = !DILocation(line: 2860, column: 45, scope: !364)
!367 = !DILocation(line: 2860, column: 16, scope: !364)
!368 = !DILocation(line: 2860, column: 14, scope: !364)
!369 = !DILocation(line: 2861, column: 13, scope: !370)
!370 = distinct !DILexicalBlock(scope: !364, file: !4, line: 2861, column: 13)
!371 = !DILocation(line: 2861, column: 18, scope: !370)
!372 = !DILocation(line: 2861, column: 25, scope: !370)
!373 = !DILocation(line: 2861, column: 29, scope: !374)
!374 = !DILexicalBlockFile(scope: !370, file: !4, discriminator: 1)
!375 = !DILocation(line: 2861, column: 13, scope: !374)
!376 = !DILocation(line: 2862, column: 27, scope: !377)
!377 = distinct !DILexicalBlock(scope: !370, file: !4, line: 2861, column: 48)
!378 = !DILocation(line: 2862, column: 13, scope: !377)
!379 = !DILocation(line: 2863, column: 77, scope: !377)
!380 = !DILocation(line: 2863, column: 81, scope: !377)
!381 = !DILocation(line: 2863, column: 13, scope: !377)
!382 = !DILocation(line: 2864, column: 13, scope: !377)
!383 = !DILocation(line: 2865, column: 13, scope: !377)
!384 = !DILocation(line: 2867, column: 15, scope: !364)
!385 = !DILocation(line: 2868, column: 5, scope: !364)
!386 = !DILocation(line: 2868, column: 23, scope: !387)
!387 = !DILexicalBlockFile(scope: !388, file: !4, discriminator: 1)
!388 = distinct !DILexicalBlock(scope: !358, file: !4, line: 2868, column: 16)
!389 = !DILocation(line: 2868, column: 27, scope: !387)
!390 = !DILocation(line: 2868, column: 16, scope: !387)
!391 = !DILocation(line: 2868, column: 45, scope: !387)
!392 = !DILocation(line: 2869, column: 36, scope: !393)
!393 = distinct !DILexicalBlock(scope: !388, file: !4, line: 2868, column: 51)
!394 = !DILocation(line: 2869, column: 39, scope: !393)
!395 = !DILocation(line: 2869, column: 41, scope: !393)
!396 = !DILocation(line: 2869, column: 16, scope: !393)
!397 = !DILocation(line: 2869, column: 14, scope: !393)
!398 = !DILocation(line: 2870, column: 13, scope: !399)
!399 = distinct !DILexicalBlock(scope: !393, file: !4, line: 2870, column: 13)
!400 = !DILocation(line: 2870, column: 18, scope: !399)
!401 = !DILocation(line: 2870, column: 25, scope: !399)
!402 = !DILocation(line: 2870, column: 29, scope: !403)
!403 = !DILexicalBlockFile(scope: !399, file: !4, discriminator: 1)
!404 = !DILocation(line: 2870, column: 13, scope: !403)
!405 = !DILocation(line: 2871, column: 27, scope: !406)
!406 = distinct !DILexicalBlock(scope: !399, file: !4, line: 2870, column: 48)
!407 = !DILocation(line: 2871, column: 13, scope: !406)
!408 = !DILocation(line: 2872, column: 76, scope: !406)
!409 = !DILocation(line: 2872, column: 80, scope: !406)
!410 = !DILocation(line: 2872, column: 13, scope: !406)
!411 = !DILocation(line: 2873, column: 13, scope: !406)
!412 = !DILocation(line: 2874, column: 13, scope: !406)
!413 = !DILocation(line: 2876, column: 15, scope: !393)
!414 = !DILocation(line: 2877, column: 5, scope: !393)
!415 = !DILocation(line: 2877, column: 23, scope: !416)
!416 = !DILexicalBlockFile(scope: !417, file: !4, discriminator: 1)
!417 = distinct !DILexicalBlock(scope: !388, file: !4, line: 2877, column: 16)
!418 = !DILocation(line: 2877, column: 27, scope: !416)
!419 = !DILocation(line: 2877, column: 16, scope: !416)
!420 = !DILocation(line: 2877, column: 49, scope: !416)
!421 = !DILocation(line: 2878, column: 16, scope: !417)
!422 = !DILocation(line: 2878, column: 26, scope: !416)
!423 = !DILocation(line: 2878, column: 30, scope: !416)
!424 = !DILocation(line: 2878, column: 19, scope: !416)
!425 = !DILocation(line: 2878, column: 51, scope: !416)
!426 = !DILocation(line: 2877, column: 16, scope: !427)
!427 = !DILexicalBlockFile(scope: !388, file: !4, discriminator: 2)
!428 = !DILocalVariable(name: "strnid", scope: !429, file: !4, line: 2879, type: !64)
!429 = distinct !DILexicalBlock(scope: !417, file: !4, line: 2878, column: 58)
!430 = !DILocation(line: 2879, column: 15, scope: !429)
!431 = !DILocalVariable(name: "keydata", scope: !429, file: !4, line: 2879, type: !64)
!432 = !DILocation(line: 2879, column: 30, scope: !429)
!433 = !DILocalVariable(name: "keybin", scope: !429, file: !4, line: 2880, type: !56)
!434 = !DILocation(line: 2880, column: 24, scope: !429)
!435 = !DILocalVariable(name: "keylen", scope: !429, file: !4, line: 2881, type: !33)
!436 = !DILocation(line: 2881, column: 16, scope: !429)
!437 = !DILocalVariable(name: "nid", scope: !429, file: !4, line: 2882, type: !31)
!438 = !DILocation(line: 2882, column: 13, scope: !429)
!439 = !DILocation(line: 2884, column: 20, scope: !440)
!440 = distinct !DILexicalBlock(scope: !429, file: !4, line: 2884, column: 13)
!441 = !DILocation(line: 2884, column: 24, scope: !440)
!442 = !DILocation(line: 2884, column: 13, scope: !440)
!443 = !DILocation(line: 2884, column: 46, scope: !440)
!444 = !DILocation(line: 2884, column: 13, scope: !429)
!445 = !DILocation(line: 2885, column: 19, scope: !440)
!446 = !DILocation(line: 2885, column: 13, scope: !440)
!447 = !DILocation(line: 2887, column: 19, scope: !440)
!448 = !DILocation(line: 2889, column: 25, scope: !429)
!449 = !DILocation(line: 2889, column: 29, scope: !429)
!450 = !DILocation(line: 2889, column: 18, scope: !429)
!451 = !DILocation(line: 2889, column: 16, scope: !429)
!452 = !DILocation(line: 2890, column: 13, scope: !453)
!453 = distinct !DILexicalBlock(scope: !429, file: !4, line: 2890, column: 13)
!454 = !DILocation(line: 2890, column: 20, scope: !453)
!455 = !DILocation(line: 2890, column: 13, scope: !429)
!456 = !DILocation(line: 2891, column: 20, scope: !457)
!457 = distinct !DILexicalBlock(scope: !453, file: !4, line: 2890, column: 28)
!458 = !DILocation(line: 2891, column: 23, scope: !457)
!459 = !DILocation(line: 2892, column: 30, scope: !457)
!460 = !DILocation(line: 2892, column: 23, scope: !457)
!461 = !DILocation(line: 2892, column: 21, scope: !457)
!462 = !DILocation(line: 2893, column: 17, scope: !463)
!463 = distinct !DILexicalBlock(scope: !457, file: !4, line: 2893, column: 17)
!464 = !DILocation(line: 2893, column: 25, scope: !463)
!465 = !DILocation(line: 2893, column: 17, scope: !457)
!466 = !DILocation(line: 2894, column: 25, scope: !463)
!467 = !DILocation(line: 2894, column: 28, scope: !463)
!468 = !DILocation(line: 2894, column: 17, scope: !463)
!469 = !DILocation(line: 2895, column: 9, scope: !457)
!470 = !DILocation(line: 2896, column: 13, scope: !471)
!471 = distinct !DILexicalBlock(scope: !429, file: !4, line: 2896, column: 13)
!472 = !DILocation(line: 2896, column: 21, scope: !471)
!473 = !DILocation(line: 2896, column: 13, scope: !429)
!474 = !DILocation(line: 2897, column: 76, scope: !475)
!475 = distinct !DILexicalBlock(scope: !471, file: !4, line: 2896, column: 29)
!476 = !DILocation(line: 2897, column: 80, scope: !475)
!477 = !DILocation(line: 2897, column: 13, scope: !475)
!478 = !DILocation(line: 2898, column: 13, scope: !475)
!479 = !DILocation(line: 2901, column: 27, scope: !429)
!480 = !DILocation(line: 2901, column: 15, scope: !429)
!481 = !DILocation(line: 2901, column: 13, scope: !429)
!482 = !DILocation(line: 2902, column: 13, scope: !483)
!483 = distinct !DILexicalBlock(scope: !429, file: !4, line: 2902, column: 13)
!484 = !DILocation(line: 2902, column: 17, scope: !483)
!485 = !DILocation(line: 2902, column: 13, scope: !429)
!486 = !DILocation(line: 2903, column: 13, scope: !487)
!487 = distinct !DILexicalBlock(scope: !483, file: !4, line: 2902, column: 23)
!488 = !DILocation(line: 2904, column: 13, scope: !487)
!489 = !DILocation(line: 2906, column: 24, scope: !490)
!490 = distinct !DILexicalBlock(scope: !429, file: !4, line: 2906, column: 13)
!491 = !DILocation(line: 2906, column: 14, scope: !490)
!492 = !DILocation(line: 2906, column: 13, scope: !429)
!493 = !DILocation(line: 2907, column: 13, scope: !494)
!494 = distinct !DILexicalBlock(scope: !490, file: !4, line: 2906, column: 52)
!495 = !DILocation(line: 2908, column: 13, scope: !494)
!496 = !DILocation(line: 2910, column: 13, scope: !497)
!497 = distinct !DILexicalBlock(scope: !429, file: !4, line: 2910, column: 13)
!498 = !DILocation(line: 2910, column: 19, scope: !497)
!499 = !DILocation(line: 2910, column: 13, scope: !429)
!500 = !DILocation(line: 2911, column: 49, scope: !497)
!501 = !DILocation(line: 2911, column: 59, scope: !497)
!502 = !DILocation(line: 2911, column: 67, scope: !497)
!503 = !DILocation(line: 2911, column: 20, scope: !497)
!504 = !DILocation(line: 2911, column: 18, scope: !497)
!505 = !DILocation(line: 2911, column: 13, scope: !497)
!506 = !DILocation(line: 2913, column: 48, scope: !497)
!507 = !DILocation(line: 2913, column: 58, scope: !497)
!508 = !DILocation(line: 2913, column: 66, scope: !497)
!509 = !DILocation(line: 2913, column: 20, scope: !497)
!510 = !DILocation(line: 2913, column: 18, scope: !497)
!511 = !DILocation(line: 2914, column: 13, scope: !512)
!512 = distinct !DILexicalBlock(scope: !429, file: !4, line: 2914, column: 13)
!513 = !DILocation(line: 2914, column: 18, scope: !512)
!514 = !DILocation(line: 2914, column: 25, scope: !512)
!515 = !DILocation(line: 2914, column: 29, scope: !516)
!516 = !DILexicalBlockFile(scope: !512, file: !4, discriminator: 1)
!517 = !DILocation(line: 2914, column: 13, scope: !516)
!518 = !DILocation(line: 2915, column: 70, scope: !519)
!519 = distinct !DILexicalBlock(scope: !512, file: !4, line: 2914, column: 48)
!520 = !DILocation(line: 2915, column: 74, scope: !519)
!521 = !DILocation(line: 2915, column: 13, scope: !519)
!522 = !DILocation(line: 2916, column: 25, scope: !519)
!523 = !DILocation(line: 2916, column: 13, scope: !519)
!524 = !DILocation(line: 2917, column: 13, scope: !519)
!525 = !DILocation(line: 2918, column: 13, scope: !519)
!526 = !DILocation(line: 2920, column: 21, scope: !429)
!527 = !DILocation(line: 2920, column: 9, scope: !429)
!528 = !DILocation(line: 2921, column: 5, scope: !429)
!529 = !DILocation(line: 2924, column: 9, scope: !530)
!530 = distinct !DILexicalBlock(scope: !309, file: !4, line: 2924, column: 9)
!531 = !DILocation(line: 2924, column: 15, scope: !530)
!532 = !DILocation(line: 2924, column: 9, scope: !309)
!533 = !DILocation(line: 2925, column: 27, scope: !534)
!534 = distinct !DILexicalBlock(scope: !535, file: !4, line: 2925, column: 13)
!535 = distinct !DILexicalBlock(scope: !530, file: !4, line: 2924, column: 23)
!536 = !DILocation(line: 2925, column: 31, scope: !534)
!537 = !DILocation(line: 2925, column: 39, scope: !534)
!538 = !DILocation(line: 2925, column: 38, scope: !534)
!539 = !DILocation(line: 2925, column: 13, scope: !534)
!540 = !DILocation(line: 2925, column: 13, scope: !535)
!541 = !DILocation(line: 2926, column: 68, scope: !542)
!542 = distinct !DILexicalBlock(scope: !534, file: !4, line: 2925, column: 47)
!543 = !DILocation(line: 2926, column: 72, scope: !542)
!544 = !DILocation(line: 2926, column: 13, scope: !542)
!545 = !DILocation(line: 2927, column: 13, scope: !542)
!546 = !DILocation(line: 2929, column: 92, scope: !547)
!547 = distinct !DILexicalBlock(scope: !535, file: !4, line: 2929, column: 13)
!548 = !DILocation(line: 2929, column: 90, scope: !547)
!549 = !DILocation(line: 2929, column: 86, scope: !547)
!550 = !DILocation(line: 2929, column: 14, scope: !551)
!551 = !DILexicalBlockFile(scope: !547, file: !4, discriminator: 1)
!552 = !DILocation(line: 2929, column: 14, scope: !547)
!553 = !DILocation(line: 2929, column: 13, scope: !535)
!554 = !DILocation(line: 2930, column: 13, scope: !547)
!555 = !DILocation(line: 2931, column: 32, scope: !535)
!556 = !DILocation(line: 2931, column: 21, scope: !535)
!557 = !DILocation(line: 2931, column: 9, scope: !535)
!558 = !DILocation(line: 2931, column: 14, scope: !535)
!559 = !DILocation(line: 2931, column: 19, scope: !535)
!560 = !DILocation(line: 2934, column: 12, scope: !561)
!561 = distinct !DILexicalBlock(scope: !535, file: !4, line: 2934, column: 12)
!562 = !DILocation(line: 2934, column: 17, scope: !561)
!563 = !DILocation(line: 2934, column: 24, scope: !561)
!564 = !DILocation(line: 2934, column: 34, scope: !565)
!565 = !DILexicalBlockFile(scope: !561, file: !4, discriminator: 1)
!566 = !DILocation(line: 2934, column: 39, scope: !565)
!567 = !DILocation(line: 2934, column: 27, scope: !565)
!568 = !DILocation(line: 2934, column: 52, scope: !565)
!569 = !DILocation(line: 2934, column: 12, scope: !565)
!570 = !DILocation(line: 2939, column: 37, scope: !571)
!571 = distinct !DILexicalBlock(scope: !561, file: !4, line: 2934, column: 61)
!572 = !DILocation(line: 2939, column: 13, scope: !571)
!573 = !DILocation(line: 2941, column: 9, scope: !571)
!574 = !DILocation(line: 2943, column: 20, scope: !535)
!575 = !DILocation(line: 2943, column: 9, scope: !535)
!576 = !DILocation(line: 2943, column: 14, scope: !535)
!577 = !DILocation(line: 2943, column: 18, scope: !535)
!578 = !DILocation(line: 2944, column: 22, scope: !535)
!579 = !DILocation(line: 2944, column: 21, scope: !535)
!580 = !DILocation(line: 2944, column: 9, scope: !535)
!581 = !DILocation(line: 2944, column: 14, scope: !535)
!582 = !DILocation(line: 2944, column: 19, scope: !535)
!583 = !DILocation(line: 2945, column: 18, scope: !535)
!584 = !DILocation(line: 2945, column: 10, scope: !535)
!585 = !DILocation(line: 2945, column: 16, scope: !535)
!586 = !DILocation(line: 2948, column: 13, scope: !587)
!587 = distinct !DILexicalBlock(scope: !535, file: !4, line: 2948, column: 13)
!588 = !DILocation(line: 2948, column: 16, scope: !587)
!589 = !DILocation(line: 2948, column: 18, scope: !587)
!590 = !DILocation(line: 2948, column: 27, scope: !587)
!591 = !DILocation(line: 2948, column: 13, scope: !535)
!592 = !DILocation(line: 2949, column: 81, scope: !587)
!593 = !DILocation(line: 2949, column: 84, scope: !587)
!594 = !DILocation(line: 2949, column: 86, scope: !587)
!595 = !DILocation(line: 2949, column: 13, scope: !587)
!596 = !DILocation(line: 2950, column: 9, scope: !535)
!597 = !DILocation(line: 2954, column: 96, scope: !598)
!598 = distinct !DILexicalBlock(scope: !309, file: !4, line: 2954, column: 9)
!599 = !DILocation(line: 2954, column: 100, scope: !598)
!600 = !DILocation(line: 2954, column: 86, scope: !598)
!601 = !DILocation(line: 2954, column: 76, scope: !598)
!602 = !DILocation(line: 2954, column: 79, scope: !598)
!603 = !DILocation(line: 2954, column: 84, scope: !598)
!604 = !DILocation(line: 2954, column: 10, scope: !605)
!605 = !DILexicalBlockFile(scope: !598, file: !4, discriminator: 1)
!606 = !DILocation(line: 2954, column: 10, scope: !598)
!607 = !DILocation(line: 2954, column: 9, scope: !309)
!608 = !DILocation(line: 2955, column: 9, scope: !598)
!609 = !DILocation(line: 2956, column: 10, scope: !610)
!610 = distinct !DILexicalBlock(scope: !309, file: !4, line: 2956, column: 9)
!611 = !DILocation(line: 2956, column: 13, scope: !610)
!612 = !DILocation(line: 2956, column: 19, scope: !610)
!613 = !DILocation(line: 2956, column: 24, scope: !610)
!614 = !DILocation(line: 2956, column: 27, scope: !610)
!615 = !DILocation(line: 2956, column: 31, scope: !610)
!616 = !DILocation(line: 2956, column: 9, scope: !309)
!617 = !DILocation(line: 2957, column: 65, scope: !618)
!618 = distinct !DILexicalBlock(scope: !610, file: !4, line: 2956, column: 39)
!619 = !DILocation(line: 2957, column: 69, scope: !618)
!620 = !DILocation(line: 2957, column: 74, scope: !618)
!621 = !DILocation(line: 2957, column: 78, scope: !618)
!622 = !DILocation(line: 2957, column: 9, scope: !618)
!623 = !DILocation(line: 2958, column: 9, scope: !618)
!624 = !DILocation(line: 2960, column: 9, scope: !625)
!625 = distinct !DILexicalBlock(scope: !309, file: !4, line: 2960, column: 9)
!626 = !DILocation(line: 2960, column: 12, scope: !625)
!627 = !DILocation(line: 2960, column: 17, scope: !625)
!628 = !DILocation(line: 2960, column: 9, scope: !309)
!629 = !DILocation(line: 2962, column: 9, scope: !630)
!630 = distinct !DILexicalBlock(scope: !625, file: !4, line: 2960, column: 23)
!631 = !DILocation(line: 2965, column: 12, scope: !632)
!632 = distinct !DILexicalBlock(scope: !309, file: !4, line: 2965, column: 5)
!633 = !DILocation(line: 2965, column: 18, scope: !632)
!634 = !DILocation(line: 2965, column: 10, scope: !632)
!635 = !DILocation(line: 2965, column: 23, scope: !636)
!636 = !DILexicalBlockFile(scope: !637, file: !4, discriminator: 1)
!637 = distinct !DILexicalBlock(scope: !632, file: !4, line: 2965, column: 5)
!638 = !DILocation(line: 2965, column: 27, scope: !636)
!639 = !DILocation(line: 2965, column: 30, scope: !636)
!640 = !DILocation(line: 2965, column: 32, scope: !636)
!641 = !DILocation(line: 2965, column: 25, scope: !636)
!642 = !DILocation(line: 2965, column: 5, scope: !636)
!643 = !DILocation(line: 2966, column: 20, scope: !644)
!644 = distinct !DILexicalBlock(scope: !645, file: !4, line: 2966, column: 13)
!645 = distinct !DILexicalBlock(scope: !637, file: !4, line: 2965, column: 53)
!646 = !DILocation(line: 2966, column: 24, scope: !644)
!647 = !DILocation(line: 2966, column: 13, scope: !644)
!648 = !DILocation(line: 2966, column: 39, scope: !644)
!649 = !DILocation(line: 2966, column: 13, scope: !645)
!650 = !DILocation(line: 2967, column: 17, scope: !651)
!651 = distinct !DILexicalBlock(scope: !652, file: !4, line: 2967, column: 17)
!652 = distinct !DILexicalBlock(scope: !644, file: !4, line: 2966, column: 45)
!653 = !DILocation(line: 2967, column: 20, scope: !651)
!654 = !DILocation(line: 2967, column: 33, scope: !651)
!655 = !DILocation(line: 2967, column: 17, scope: !652)
!656 = !DILocation(line: 2968, column: 86, scope: !657)
!657 = distinct !DILexicalBlock(scope: !651, file: !4, line: 2967, column: 41)
!658 = !DILocation(line: 2968, column: 89, scope: !657)
!659 = !DILocation(line: 2968, column: 91, scope: !657)
!660 = !DILocation(line: 2968, column: 17, scope: !657)
!661 = !DILocation(line: 2969, column: 17, scope: !657)
!662 = !DILocation(line: 2971, column: 42, scope: !652)
!663 = !DILocation(line: 2971, column: 31, scope: !652)
!664 = !DILocation(line: 2971, column: 13, scope: !652)
!665 = !DILocation(line: 2971, column: 16, scope: !652)
!666 = !DILocation(line: 2971, column: 29, scope: !652)
!667 = !DILocation(line: 2972, column: 9, scope: !652)
!668 = !DILocation(line: 2972, column: 27, scope: !669)
!669 = !DILexicalBlockFile(scope: !670, file: !4, discriminator: 1)
!670 = distinct !DILexicalBlock(scope: !644, file: !4, line: 2972, column: 20)
!671 = !DILocation(line: 2972, column: 31, scope: !669)
!672 = !DILocation(line: 2972, column: 20, scope: !669)
!673 = !DILocation(line: 2972, column: 48, scope: !669)
!674 = !DILocation(line: 2973, column: 17, scope: !675)
!675 = distinct !DILexicalBlock(scope: !676, file: !4, line: 2973, column: 17)
!676 = distinct !DILexicalBlock(scope: !670, file: !4, line: 2972, column: 54)
!677 = !DILocation(line: 2973, column: 20, scope: !675)
!678 = !DILocation(line: 2973, column: 25, scope: !675)
!679 = !DILocation(line: 2973, column: 17, scope: !676)
!680 = !DILocation(line: 2974, column: 90, scope: !681)
!681 = distinct !DILexicalBlock(scope: !675, file: !4, line: 2973, column: 33)
!682 = !DILocation(line: 2974, column: 93, scope: !681)
!683 = !DILocation(line: 2974, column: 95, scope: !681)
!684 = !DILocation(line: 2974, column: 17, scope: !681)
!685 = !DILocation(line: 2975, column: 17, scope: !681)
!686 = !DILocation(line: 2977, column: 34, scope: !676)
!687 = !DILocation(line: 2977, column: 23, scope: !676)
!688 = !DILocation(line: 2977, column: 13, scope: !676)
!689 = !DILocation(line: 2977, column: 16, scope: !676)
!690 = !DILocation(line: 2977, column: 21, scope: !676)
!691 = !DILocation(line: 2978, column: 9, scope: !676)
!692 = !DILocation(line: 2978, column: 27, scope: !693)
!693 = !DILexicalBlockFile(scope: !694, file: !4, discriminator: 1)
!694 = distinct !DILexicalBlock(scope: !670, file: !4, line: 2978, column: 20)
!695 = !DILocation(line: 2978, column: 31, scope: !693)
!696 = !DILocation(line: 2978, column: 20, scope: !693)
!697 = !DILocation(line: 2978, column: 46, scope: !693)
!698 = !DILocation(line: 2979, column: 17, scope: !699)
!699 = distinct !DILexicalBlock(scope: !700, file: !4, line: 2979, column: 17)
!700 = distinct !DILexicalBlock(scope: !694, file: !4, line: 2978, column: 52)
!701 = !DILocation(line: 2979, column: 20, scope: !699)
!702 = !DILocation(line: 2979, column: 27, scope: !699)
!703 = !DILocation(line: 2979, column: 17, scope: !700)
!704 = !DILocation(line: 2980, column: 86, scope: !705)
!705 = distinct !DILexicalBlock(scope: !699, file: !4, line: 2979, column: 35)
!706 = !DILocation(line: 2980, column: 89, scope: !705)
!707 = !DILocation(line: 2980, column: 91, scope: !705)
!708 = !DILocation(line: 2980, column: 17, scope: !705)
!709 = !DILocation(line: 2981, column: 17, scope: !705)
!710 = !DILocation(line: 2983, column: 36, scope: !700)
!711 = !DILocation(line: 2983, column: 25, scope: !700)
!712 = !DILocation(line: 2983, column: 13, scope: !700)
!713 = !DILocation(line: 2983, column: 16, scope: !700)
!714 = !DILocation(line: 2983, column: 23, scope: !700)
!715 = !DILocation(line: 2984, column: 9, scope: !700)
!716 = !DILocalVariable(name: "rv", scope: !717, file: !4, line: 2986, type: !31)
!717 = distinct !DILexicalBlock(scope: !694, file: !4, line: 2984, column: 16)
!718 = !DILocation(line: 2986, column: 17, scope: !717)
!719 = !DILocation(line: 2986, column: 22, scope: !717)
!720 = !DILocation(line: 2986, column: 25, scope: !717)
!721 = !DILocation(line: 2986, column: 31, scope: !717)
!722 = !DILocation(line: 2986, column: 37, scope: !717)
!723 = !DILocation(line: 2986, column: 40, scope: !717)
!724 = !DILocation(line: 2986, column: 44, scope: !717)
!725 = !DILocation(line: 2986, column: 49, scope: !717)
!726 = !DILocation(line: 2986, column: 53, scope: !717)
!727 = !DILocation(line: 2988, column: 17, scope: !728)
!728 = distinct !DILexicalBlock(scope: !717, file: !4, line: 2988, column: 17)
!729 = !DILocation(line: 2988, column: 20, scope: !728)
!730 = !DILocation(line: 2988, column: 17, scope: !717)
!731 = !DILocation(line: 2989, column: 83, scope: !732)
!732 = distinct !DILexicalBlock(scope: !728, file: !4, line: 2988, column: 26)
!733 = !DILocation(line: 2989, column: 86, scope: !732)
!734 = !DILocation(line: 2989, column: 88, scope: !732)
!735 = !DILocation(line: 2989, column: 94, scope: !732)
!736 = !DILocation(line: 2989, column: 98, scope: !732)
!737 = !DILocation(line: 2989, column: 17, scope: !732)
!738 = !DILocation(line: 2990, column: 17, scope: !732)
!739 = !DILocation(line: 2992, column: 17, scope: !740)
!740 = distinct !DILexicalBlock(scope: !717, file: !4, line: 2992, column: 17)
!741 = !DILocation(line: 2992, column: 20, scope: !740)
!742 = !DILocation(line: 2992, column: 17, scope: !717)
!743 = !DILocation(line: 2993, column: 66, scope: !744)
!744 = distinct !DILexicalBlock(scope: !740, file: !4, line: 2992, column: 25)
!745 = !DILocation(line: 2993, column: 69, scope: !744)
!746 = !DILocation(line: 2993, column: 71, scope: !744)
!747 = !DILocation(line: 2993, column: 77, scope: !744)
!748 = !DILocation(line: 2993, column: 81, scope: !744)
!749 = !DILocation(line: 2993, column: 86, scope: !744)
!750 = !DILocation(line: 2993, column: 90, scope: !744)
!751 = !DILocation(line: 2993, column: 17, scope: !744)
!752 = !DILocation(line: 2995, column: 17, scope: !744)
!753 = !DILocation(line: 2998, column: 5, scope: !645)
!754 = !DILocation(line: 2965, column: 44, scope: !755)
!755 = !DILexicalBlockFile(scope: !637, file: !4, discriminator: 2)
!756 = !DILocation(line: 2965, column: 49, scope: !755)
!757 = !DILocation(line: 2965, column: 5, scope: !755)
!758 = distinct !{!758, !759}
!759 = !DILocation(line: 2965, column: 5, scope: !309)
!760 = !DILocation(line: 3000, column: 5, scope: !309)
!761 = !DILocation(line: 3001, column: 1, scope: !309)
!762 = distinct !DISubprogram(name: "run_test", scope: !4, file: !4, line: 2750, type: !154, isLocal: true, isDefinition: true, scopeLine: 2751, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!763 = !DILocalVariable(name: "t", arg: 1, scope: !762, file: !4, line: 2750, type: !100)
!764 = !DILocation(line: 2750, column: 31, scope: !762)
!765 = !DILocation(line: 2752, column: 9, scope: !766)
!766 = distinct !DILexicalBlock(scope: !762, file: !4, line: 2752, column: 9)
!767 = !DILocation(line: 2752, column: 12, scope: !766)
!768 = !DILocation(line: 2752, column: 17, scope: !766)
!769 = !DILocation(line: 2752, column: 9, scope: !762)
!770 = !DILocation(line: 2753, column: 9, scope: !766)
!771 = !DILocation(line: 2754, column: 5, scope: !762)
!772 = !DILocation(line: 2754, column: 8, scope: !762)
!773 = !DILocation(line: 2754, column: 10, scope: !762)
!774 = !DILocation(line: 2754, column: 18, scope: !762)
!775 = !DILocation(line: 2755, column: 9, scope: !776)
!776 = distinct !DILexicalBlock(scope: !762, file: !4, line: 2755, column: 9)
!777 = !DILocation(line: 2755, column: 12, scope: !776)
!778 = !DILocation(line: 2755, column: 9, scope: !762)
!779 = !DILocation(line: 2756, column: 9, scope: !780)
!780 = distinct !DILexicalBlock(scope: !776, file: !4, line: 2755, column: 18)
!781 = !DILocation(line: 2756, column: 12, scope: !780)
!782 = !DILocation(line: 2756, column: 14, scope: !780)
!783 = !DILocation(line: 2756, column: 21, scope: !780)
!784 = !DILocation(line: 2757, column: 5, scope: !780)
!785 = !DILocation(line: 2759, column: 13, scope: !786)
!786 = distinct !DILexicalBlock(scope: !787, file: !4, line: 2759, column: 13)
!787 = distinct !DILexicalBlock(scope: !776, file: !4, line: 2757, column: 12)
!788 = !DILocation(line: 2759, column: 16, scope: !786)
!789 = !DILocation(line: 2759, column: 20, scope: !786)
!790 = !DILocation(line: 2759, column: 27, scope: !786)
!791 = !DILocation(line: 2759, column: 30, scope: !792)
!792 = !DILexicalBlockFile(scope: !786, file: !4, discriminator: 1)
!793 = !DILocation(line: 2759, column: 33, scope: !792)
!794 = !DILocation(line: 2759, column: 39, scope: !792)
!795 = !DILocation(line: 2759, column: 48, scope: !792)
!796 = !DILocation(line: 2759, column: 51, scope: !792)
!797 = !DILocation(line: 2759, column: 13, scope: !792)
!798 = !DILocation(line: 2760, column: 33, scope: !799)
!799 = distinct !DILexicalBlock(scope: !786, file: !4, line: 2759, column: 57)
!800 = !DILocation(line: 2760, column: 36, scope: !799)
!801 = !DILocation(line: 2760, column: 38, scope: !799)
!802 = !DILocation(line: 2760, column: 49, scope: !799)
!803 = !DILocation(line: 2760, column: 52, scope: !799)
!804 = !DILocation(line: 2760, column: 54, scope: !799)
!805 = !DILocation(line: 2760, column: 61, scope: !799)
!806 = !DILocation(line: 2760, column: 64, scope: !799)
!807 = !DILocation(line: 2760, column: 70, scope: !799)
!808 = !DILocation(line: 2760, column: 13, scope: !799)
!809 = !DILocation(line: 2762, column: 13, scope: !799)
!810 = !DILocation(line: 2764, column: 31, scope: !811)
!811 = distinct !DILexicalBlock(scope: !787, file: !4, line: 2764, column: 13)
!812 = !DILocation(line: 2764, column: 14, scope: !811)
!813 = !DILocation(line: 2764, column: 13, scope: !787)
!814 = !DILocation(line: 2765, column: 13, scope: !815)
!815 = distinct !DILexicalBlock(scope: !811, file: !4, line: 2764, column: 35)
!816 = !DILocation(line: 2766, column: 13, scope: !815)
!817 = !DILocation(line: 2766, column: 16, scope: !815)
!818 = !DILocation(line: 2766, column: 18, scope: !815)
!819 = !DILocation(line: 2766, column: 24, scope: !815)
!820 = !DILocation(line: 2767, column: 9, scope: !815)
!821 = !DILocation(line: 2771, column: 5, scope: !762)
!822 = !DILocation(line: 2772, column: 1, scope: !762)
!823 = distinct !DISubprogram(name: "clear_test", scope: !4, file: !4, line: 2657, type: !146, isLocal: true, isDefinition: true, scopeLine: 2658, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!824 = !DILocalVariable(name: "t", arg: 1, scope: !823, file: !4, line: 2657, type: !100)
!825 = !DILocation(line: 2657, column: 34, scope: !823)
!826 = !DILocation(line: 2659, column: 23, scope: !823)
!827 = !DILocation(line: 2659, column: 26, scope: !823)
!828 = !DILocation(line: 2659, column: 5, scope: !823)
!829 = !DILocation(line: 2660, column: 5, scope: !823)
!830 = !DILocation(line: 2661, column: 9, scope: !831)
!831 = distinct !DILexicalBlock(scope: !823, file: !4, line: 2661, column: 9)
!832 = !DILocation(line: 2661, column: 12, scope: !831)
!833 = !DILocation(line: 2661, column: 17, scope: !831)
!834 = !DILocation(line: 2661, column: 9, scope: !823)
!835 = !DILocation(line: 2662, column: 13, scope: !836)
!836 = distinct !DILexicalBlock(scope: !837, file: !4, line: 2662, column: 13)
!837 = distinct !DILexicalBlock(scope: !831, file: !4, line: 2661, column: 25)
!838 = !DILocation(line: 2662, column: 16, scope: !836)
!839 = !DILocation(line: 2662, column: 21, scope: !836)
!840 = !DILocation(line: 2662, column: 13, scope: !837)
!841 = !DILocation(line: 2663, column: 13, scope: !836)
!842 = !DILocation(line: 2663, column: 16, scope: !836)
!843 = !DILocation(line: 2663, column: 22, scope: !836)
!844 = !DILocation(line: 2663, column: 30, scope: !836)
!845 = !DILocation(line: 2664, column: 21, scope: !837)
!846 = !DILocation(line: 2664, column: 24, scope: !837)
!847 = !DILocation(line: 2664, column: 9, scope: !837)
!848 = !DILocation(line: 2665, column: 9, scope: !837)
!849 = !DILocation(line: 2665, column: 12, scope: !837)
!850 = !DILocation(line: 2665, column: 17, scope: !837)
!851 = !DILocation(line: 2666, column: 5, scope: !837)
!852 = !DILocation(line: 2667, column: 17, scope: !823)
!853 = !DILocation(line: 2667, column: 20, scope: !823)
!854 = !DILocation(line: 2667, column: 5, scope: !823)
!855 = !DILocation(line: 2668, column: 5, scope: !823)
!856 = !DILocation(line: 2668, column: 8, scope: !823)
!857 = !DILocation(line: 2668, column: 21, scope: !823)
!858 = !DILocation(line: 2669, column: 17, scope: !823)
!859 = !DILocation(line: 2669, column: 20, scope: !823)
!860 = !DILocation(line: 2669, column: 5, scope: !823)
!861 = !DILocation(line: 2670, column: 5, scope: !823)
!862 = !DILocation(line: 2670, column: 8, scope: !823)
!863 = !DILocation(line: 2670, column: 13, scope: !823)
!864 = !DILocation(line: 2671, column: 17, scope: !823)
!865 = !DILocation(line: 2671, column: 20, scope: !823)
!866 = !DILocation(line: 2671, column: 5, scope: !823)
!867 = !DILocation(line: 2672, column: 5, scope: !823)
!868 = !DILocation(line: 2672, column: 8, scope: !823)
!869 = !DILocation(line: 2672, column: 15, scope: !823)
!870 = !DILocation(line: 2675, column: 5, scope: !823)
!871 = !DILocation(line: 2675, column: 8, scope: !823)
!872 = !DILocation(line: 2675, column: 12, scope: !823)
!873 = !DILocation(line: 2676, column: 5, scope: !823)
!874 = !DILocation(line: 2676, column: 8, scope: !823)
!875 = !DILocation(line: 2676, column: 13, scope: !823)
!876 = !DILocation(line: 2677, column: 5, scope: !823)
!877 = !DILocation(line: 2677, column: 8, scope: !823)
!878 = !DILocation(line: 2677, column: 13, scope: !823)
!879 = !DILocation(line: 2678, column: 1, scope: !823)
!880 = distinct !DISubprogram(name: "free_key_list", scope: !4, file: !4, line: 2786, type: !881, isLocal: true, isDefinition: true, scopeLine: 2787, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!881 = !DISubroutineType(types: !882)
!882 = !{null, !187}
!883 = !DILocalVariable(name: "lst", arg: 1, scope: !880, file: !4, line: 2786, type: !187)
!884 = !DILocation(line: 2786, column: 37, scope: !880)
!885 = !DILocation(line: 2788, column: 5, scope: !880)
!886 = !DILocation(line: 2788, column: 12, scope: !887)
!887 = !DILexicalBlockFile(scope: !880, file: !4, discriminator: 1)
!888 = !DILocation(line: 2788, column: 16, scope: !887)
!889 = !DILocation(line: 2788, column: 5, scope: !887)
!890 = !DILocalVariable(name: "next", scope: !891, file: !4, line: 2789, type: !187)
!891 = distinct !DILexicalBlock(scope: !880, file: !4, line: 2788, column: 24)
!892 = !DILocation(line: 2789, column: 19, scope: !891)
!893 = !DILocation(line: 2789, column: 26, scope: !891)
!894 = !DILocation(line: 2789, column: 31, scope: !891)
!895 = !DILocation(line: 2791, column: 23, scope: !891)
!896 = !DILocation(line: 2791, column: 28, scope: !891)
!897 = !DILocation(line: 2791, column: 9, scope: !891)
!898 = !DILocation(line: 2792, column: 21, scope: !891)
!899 = !DILocation(line: 2792, column: 26, scope: !891)
!900 = !DILocation(line: 2792, column: 9, scope: !891)
!901 = !DILocation(line: 2793, column: 21, scope: !891)
!902 = !DILocation(line: 2793, column: 9, scope: !891)
!903 = !DILocation(line: 2794, column: 15, scope: !891)
!904 = !DILocation(line: 2794, column: 13, scope: !891)
!905 = !DILocation(line: 2788, column: 5, scope: !906)
!906 = !DILexicalBlockFile(scope: !880, file: !4, discriminator: 2)
!907 = distinct !{!907, !885}
!908 = !DILocation(line: 2796, column: 1, scope: !880)
!909 = distinct !DISubprogram(name: "key_unsupported", scope: !4, file: !4, line: 2801, type: !204, isLocal: true, isDefinition: true, scopeLine: 2802, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!910 = !DILocalVariable(name: "err", scope: !909, file: !4, line: 2803, type: !911)
!911 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!912 = !DILocation(line: 2803, column: 10, scope: !909)
!913 = !DILocation(line: 2803, column: 16, scope: !909)
!914 = !DILocation(line: 2805, column: 17, scope: !915)
!915 = distinct !DILexicalBlock(scope: !909, file: !4, line: 2805, column: 9)
!916 = !DILocation(line: 2805, column: 22, scope: !915)
!917 = !DILocation(line: 2805, column: 30, scope: !915)
!918 = !DILocation(line: 2805, column: 9, scope: !915)
!919 = !DILocation(line: 2805, column: 40, scope: !915)
!920 = !DILocation(line: 2806, column: 13, scope: !915)
!921 = !DILocation(line: 2806, column: 24, scope: !922)
!922 = !DILexicalBlockFile(scope: !915, file: !4, discriminator: 1)
!923 = !DILocation(line: 2806, column: 29, scope: !922)
!924 = !DILocation(line: 2806, column: 16, scope: !922)
!925 = !DILocation(line: 2806, column: 39, scope: !922)
!926 = !DILocation(line: 2805, column: 9, scope: !927)
!927 = !DILexicalBlockFile(scope: !909, file: !4, discriminator: 1)
!928 = !DILocation(line: 2807, column: 9, scope: !929)
!929 = distinct !DILexicalBlock(scope: !915, file: !4, line: 2806, column: 47)
!930 = !DILocation(line: 2808, column: 9, scope: !929)
!931 = !DILocation(line: 2816, column: 17, scope: !932)
!932 = distinct !DILexicalBlock(scope: !909, file: !4, line: 2816, column: 9)
!933 = !DILocation(line: 2816, column: 22, scope: !932)
!934 = !DILocation(line: 2816, column: 30, scope: !932)
!935 = !DILocation(line: 2816, column: 9, scope: !932)
!936 = !DILocation(line: 2816, column: 40, scope: !932)
!937 = !DILocation(line: 2817, column: 9, scope: !932)
!938 = !DILocation(line: 2817, column: 20, scope: !939)
!939 = !DILexicalBlockFile(scope: !932, file: !4, discriminator: 1)
!940 = !DILocation(line: 2817, column: 25, scope: !939)
!941 = !DILocation(line: 2817, column: 12, scope: !939)
!942 = !DILocation(line: 2817, column: 35, scope: !939)
!943 = !DILocation(line: 2816, column: 9, scope: !927)
!944 = !DILocation(line: 2818, column: 9, scope: !945)
!945 = distinct !DILexicalBlock(scope: !932, file: !4, line: 2817, column: 43)
!946 = !DILocation(line: 2819, column: 9, scope: !945)
!947 = !DILocation(line: 2822, column: 5, scope: !909)
!948 = !DILocation(line: 2823, column: 1, scope: !909)
!949 = distinct !DISubprogram(name: "parse_bin", scope: !4, file: !4, line: 269, type: !950, isLocal: true, isDefinition: true, scopeLine: 270, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!950 = !DISubroutineType(types: !951)
!951 = !{!31, !67, !952, !953}
!952 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !56, size: 64, align: 64)
!953 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !33, size: 64, align: 64)
!954 = !DILocalVariable(name: "value", arg: 1, scope: !949, file: !4, line: 269, type: !67)
!955 = !DILocation(line: 269, column: 34, scope: !949)
!956 = !DILocalVariable(name: "buf", arg: 2, scope: !949, file: !4, line: 269, type: !952)
!957 = !DILocation(line: 269, column: 57, scope: !949)
!958 = !DILocalVariable(name: "buflen", arg: 3, scope: !949, file: !4, line: 269, type: !953)
!959 = !DILocation(line: 269, column: 70, scope: !949)
!960 = !DILocalVariable(name: "len", scope: !949, file: !4, line: 271, type: !911)
!961 = !DILocation(line: 271, column: 10, scope: !949)
!962 = !DILocation(line: 274, column: 16, scope: !963)
!963 = distinct !DILexicalBlock(scope: !949, file: !4, line: 274, column: 9)
!964 = !DILocation(line: 274, column: 9, scope: !963)
!965 = !DILocation(line: 274, column: 31, scope: !963)
!966 = !DILocation(line: 274, column: 9, scope: !949)
!967 = !DILocation(line: 275, column: 10, scope: !968)
!968 = distinct !DILexicalBlock(scope: !963, file: !4, line: 274, column: 37)
!969 = !DILocation(line: 275, column: 14, scope: !968)
!970 = !DILocation(line: 276, column: 10, scope: !968)
!971 = !DILocation(line: 276, column: 17, scope: !968)
!972 = !DILocation(line: 277, column: 9, scope: !968)
!973 = !DILocation(line: 281, column: 10, scope: !974)
!974 = distinct !DILexicalBlock(scope: !949, file: !4, line: 281, column: 9)
!975 = !DILocation(line: 281, column: 9, scope: !974)
!976 = !DILocation(line: 281, column: 16, scope: !974)
!977 = !DILocation(line: 281, column: 9, scope: !949)
!978 = !DILocation(line: 287, column: 16, scope: !979)
!979 = distinct !DILexicalBlock(scope: !974, file: !4, line: 281, column: 25)
!980 = !DILocation(line: 287, column: 10, scope: !979)
!981 = !DILocation(line: 287, column: 14, scope: !979)
!982 = !DILocation(line: 288, column: 14, scope: !983)
!983 = distinct !DILexicalBlock(scope: !979, file: !4, line: 288, column: 13)
!984 = !DILocation(line: 288, column: 13, scope: !983)
!985 = !DILocation(line: 288, column: 18, scope: !983)
!986 = !DILocation(line: 288, column: 13, scope: !979)
!987 = !DILocation(line: 289, column: 13, scope: !983)
!988 = !DILocation(line: 290, column: 11, scope: !979)
!989 = !DILocation(line: 290, column: 10, scope: !979)
!990 = !DILocation(line: 290, column: 15, scope: !979)
!991 = !DILocation(line: 291, column: 10, scope: !979)
!992 = !DILocation(line: 291, column: 17, scope: !979)
!993 = !DILocation(line: 292, column: 9, scope: !979)
!994 = !DILocation(line: 296, column: 9, scope: !995)
!995 = distinct !DILexicalBlock(scope: !949, file: !4, line: 296, column: 9)
!996 = !DILocation(line: 296, column: 18, scope: !995)
!997 = !DILocation(line: 296, column: 9, scope: !949)
!998 = !DILocalVariable(name: "vlen", scope: !999, file: !4, line: 297, type: !33)
!999 = distinct !DILexicalBlock(scope: !995, file: !4, line: 296, column: 26)
!1000 = !DILocation(line: 297, column: 16, scope: !999)
!1001 = !DILocation(line: 297, column: 30, scope: !999)
!1002 = !DILocation(line: 297, column: 23, scope: !999)
!1003 = !DILocation(line: 299, column: 13, scope: !1004)
!1004 = distinct !DILexicalBlock(scope: !999, file: !4, line: 299, column: 13)
!1005 = !DILocation(line: 299, column: 18, scope: !1004)
!1006 = !DILocation(line: 299, column: 23, scope: !1004)
!1007 = !DILocation(line: 299, column: 32, scope: !1008)
!1008 = !DILexicalBlockFile(scope: !1004, file: !4, discriminator: 1)
!1009 = !DILocation(line: 299, column: 37, scope: !1008)
!1010 = !DILocation(line: 299, column: 26, scope: !1008)
!1011 = !DILocation(line: 299, column: 42, scope: !1008)
!1012 = !DILocation(line: 299, column: 13, scope: !1008)
!1013 = !DILocation(line: 300, column: 13, scope: !1004)
!1014 = !DILocation(line: 301, column: 13, scope: !999)
!1015 = !DILocation(line: 302, column: 25, scope: !999)
!1016 = !DILocation(line: 302, column: 32, scope: !999)
!1017 = !DILocation(line: 302, column: 38, scope: !999)
!1018 = !DILocation(line: 302, column: 16, scope: !999)
!1019 = !DILocation(line: 302, column: 10, scope: !999)
!1020 = !DILocation(line: 302, column: 14, scope: !999)
!1021 = !DILocation(line: 303, column: 17, scope: !999)
!1022 = !DILocation(line: 303, column: 16, scope: !999)
!1023 = !DILocation(line: 303, column: 21, scope: !999)
!1024 = !DILocation(line: 303, column: 9, scope: !999)
!1025 = !DILocation(line: 307, column: 111, scope: !1026)
!1026 = distinct !DILexicalBlock(scope: !949, file: !4, line: 307, column: 9)
!1027 = !DILocation(line: 307, column: 92, scope: !1026)
!1028 = !DILocation(line: 307, column: 86, scope: !1026)
!1029 = !DILocation(line: 307, column: 90, scope: !1026)
!1030 = !DILocation(line: 307, column: 10, scope: !1031)
!1031 = !DILexicalBlockFile(scope: !1026, file: !4, discriminator: 1)
!1032 = !DILocation(line: 307, column: 10, scope: !1026)
!1033 = !DILocation(line: 307, column: 9, scope: !949)
!1034 = !DILocation(line: 308, column: 63, scope: !1035)
!1035 = distinct !DILexicalBlock(scope: !1026, file: !4, line: 307, column: 126)
!1036 = !DILocation(line: 308, column: 9, scope: !1035)
!1037 = !DILocation(line: 309, column: 9, scope: !1035)
!1038 = !DILocation(line: 310, column: 9, scope: !1035)
!1039 = !DILocation(line: 313, column: 15, scope: !949)
!1040 = !DILocation(line: 313, column: 6, scope: !949)
!1041 = !DILocation(line: 313, column: 13, scope: !949)
!1042 = !DILocation(line: 314, column: 5, scope: !949)
!1043 = !DILocation(line: 315, column: 1, scope: !949)
!1044 = distinct !DISubprogram(name: "find_key", scope: !4, file: !4, line: 2774, type: !1045, isLocal: true, isDefinition: true, scopeLine: 2775, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!31, !1047, !67, !187}
!1047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !193, size: 64, align: 64)
!1048 = !DILocalVariable(name: "ppk", arg: 1, scope: !1044, file: !4, line: 2774, type: !1047)
!1049 = !DILocation(line: 2774, column: 32, scope: !1044)
!1050 = !DILocalVariable(name: "name", arg: 2, scope: !1044, file: !4, line: 2774, type: !67)
!1051 = !DILocation(line: 2774, column: 49, scope: !1044)
!1052 = !DILocalVariable(name: "lst", arg: 3, scope: !1044, file: !4, line: 2774, type: !187)
!1053 = !DILocation(line: 2774, column: 65, scope: !1044)
!1054 = !DILocation(line: 2776, column: 5, scope: !1044)
!1055 = !DILocation(line: 2776, column: 12, scope: !1056)
!1056 = !DILexicalBlockFile(scope: !1057, file: !4, discriminator: 1)
!1057 = distinct !DILexicalBlock(scope: !1058, file: !4, line: 2776, column: 5)
!1058 = distinct !DILexicalBlock(scope: !1044, file: !4, line: 2776, column: 5)
!1059 = !DILocation(line: 2776, column: 16, scope: !1056)
!1060 = !DILocation(line: 2776, column: 5, scope: !1056)
!1061 = !DILocation(line: 2777, column: 20, scope: !1062)
!1062 = distinct !DILexicalBlock(scope: !1063, file: !4, line: 2777, column: 13)
!1063 = distinct !DILexicalBlock(scope: !1057, file: !4, line: 2776, column: 41)
!1064 = !DILocation(line: 2777, column: 25, scope: !1062)
!1065 = !DILocation(line: 2777, column: 31, scope: !1062)
!1066 = !DILocation(line: 2777, column: 13, scope: !1062)
!1067 = !DILocation(line: 2777, column: 37, scope: !1062)
!1068 = !DILocation(line: 2777, column: 13, scope: !1063)
!1069 = !DILocation(line: 2778, column: 17, scope: !1070)
!1070 = distinct !DILexicalBlock(scope: !1071, file: !4, line: 2778, column: 17)
!1071 = distinct !DILexicalBlock(scope: !1062, file: !4, line: 2777, column: 43)
!1072 = !DILocation(line: 2778, column: 21, scope: !1070)
!1073 = !DILocation(line: 2778, column: 17, scope: !1071)
!1074 = !DILocation(line: 2779, column: 24, scope: !1070)
!1075 = !DILocation(line: 2779, column: 29, scope: !1070)
!1076 = !DILocation(line: 2779, column: 18, scope: !1070)
!1077 = !DILocation(line: 2779, column: 22, scope: !1070)
!1078 = !DILocation(line: 2779, column: 17, scope: !1070)
!1079 = !DILocation(line: 2780, column: 13, scope: !1071)
!1080 = !DILocation(line: 2782, column: 5, scope: !1063)
!1081 = !DILocation(line: 2776, column: 30, scope: !1082)
!1082 = !DILexicalBlockFile(scope: !1057, file: !4, discriminator: 2)
!1083 = !DILocation(line: 2776, column: 35, scope: !1082)
!1084 = !DILocation(line: 2776, column: 28, scope: !1082)
!1085 = !DILocation(line: 2776, column: 5, scope: !1082)
!1086 = distinct !{!1086, !1054}
!1087 = !DILocation(line: 2783, column: 5, scope: !1044)
!1088 = !DILocation(line: 2784, column: 1, scope: !1044)
!1089 = distinct !DISubprogram(name: "take_value", scope: !4, file: !4, line: 2828, type: !1090, isLocal: true, isDefinition: true, scopeLine: 2829, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!1090 = !DISubroutineType(types: !1091)
!1091 = !{!64, !320}
!1092 = !DILocalVariable(name: "pp", arg: 1, scope: !1089, file: !4, line: 2828, type: !320)
!1093 = !DILocation(line: 2828, column: 31, scope: !1089)
!1094 = !DILocalVariable(name: "p", scope: !1089, file: !4, line: 2830, type: !64)
!1095 = !DILocation(line: 2830, column: 11, scope: !1089)
!1096 = !DILocation(line: 2830, column: 15, scope: !1089)
!1097 = !DILocation(line: 2830, column: 19, scope: !1089)
!1098 = !DILocation(line: 2832, column: 5, scope: !1089)
!1099 = !DILocation(line: 2832, column: 9, scope: !1089)
!1100 = !DILocation(line: 2832, column: 15, scope: !1089)
!1101 = !DILocation(line: 2833, column: 12, scope: !1089)
!1102 = !DILocation(line: 2833, column: 5, scope: !1089)
!1103 = distinct !DISubprogram(name: "find_test", scope: !4, file: !4, line: 2646, type: !1104, isLocal: true, isDefinition: true, scopeLine: 2647, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!1104 = !DISubroutineType(types: !1105)
!1105 = !{!90, !67}
!1106 = !DILocalVariable(name: "name", arg: 1, scope: !1103, file: !4, line: 2646, type: !67)
!1107 = !DILocation(line: 2646, column: 53, scope: !1103)
!1108 = !DILocalVariable(name: "tt", scope: !1103, file: !4, line: 2648, type: !1109)
!1109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !90, size: 64, align: 64)
!1110 = !DILocation(line: 2648, column: 29, scope: !1103)
!1111 = !DILocation(line: 2650, column: 13, scope: !1112)
!1112 = distinct !DILexicalBlock(scope: !1103, file: !4, line: 2650, column: 5)
!1113 = !DILocation(line: 2650, column: 10, scope: !1112)
!1114 = !DILocation(line: 2650, column: 31, scope: !1115)
!1115 = !DILexicalBlockFile(scope: !1116, file: !4, discriminator: 1)
!1116 = distinct !DILexicalBlock(scope: !1112, file: !4, line: 2650, column: 5)
!1117 = !DILocation(line: 2650, column: 30, scope: !1115)
!1118 = !DILocation(line: 2650, column: 5, scope: !1115)
!1119 = !DILocation(line: 2651, column: 20, scope: !1120)
!1120 = distinct !DILexicalBlock(scope: !1121, file: !4, line: 2651, column: 13)
!1121 = distinct !DILexicalBlock(scope: !1116, file: !4, line: 2650, column: 41)
!1122 = !DILocation(line: 2651, column: 28, scope: !1120)
!1123 = !DILocation(line: 2651, column: 27, scope: !1120)
!1124 = !DILocation(line: 2651, column: 33, scope: !1120)
!1125 = !DILocation(line: 2651, column: 13, scope: !1120)
!1126 = !DILocation(line: 2651, column: 39, scope: !1120)
!1127 = !DILocation(line: 2651, column: 13, scope: !1121)
!1128 = !DILocation(line: 2652, column: 21, scope: !1120)
!1129 = !DILocation(line: 2652, column: 20, scope: !1120)
!1130 = !DILocation(line: 2652, column: 13, scope: !1120)
!1131 = !DILocation(line: 2653, column: 5, scope: !1121)
!1132 = !DILocation(line: 2650, column: 37, scope: !1133)
!1133 = !DILexicalBlockFile(scope: !1116, file: !4, discriminator: 2)
!1134 = !DILocation(line: 2650, column: 5, scope: !1133)
!1135 = distinct !{!1135, !1136}
!1136 = !DILocation(line: 2650, column: 5, scope: !1103)
!1137 = !DILocation(line: 2654, column: 5, scope: !1103)
!1138 = !DILocation(line: 2655, column: 1, scope: !1103)
!1139 = distinct !DISubprogram(name: "unescape", scope: !4, file: !4, line: 228, type: !1140, isLocal: true, isDefinition: true, scopeLine: 230, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!1140 = !DISubroutineType(types: !1141)
!1141 = !{!56, !67, !33, !953}
!1142 = !DILocalVariable(name: "input", arg: 1, scope: !1139, file: !4, line: 228, type: !67)
!1143 = !DILocation(line: 228, column: 44, scope: !1139)
!1144 = !DILocalVariable(name: "input_len", arg: 2, scope: !1139, file: !4, line: 228, type: !33)
!1145 = !DILocation(line: 228, column: 58, scope: !1139)
!1146 = !DILocalVariable(name: "out_len", arg: 3, scope: !1139, file: !4, line: 229, type: !953)
!1147 = !DILocation(line: 229, column: 40, scope: !1139)
!1148 = !DILocalVariable(name: "ret", scope: !1139, file: !4, line: 231, type: !56)
!1149 = !DILocation(line: 231, column: 20, scope: !1139)
!1150 = !DILocalVariable(name: "p", scope: !1139, file: !4, line: 231, type: !56)
!1151 = !DILocation(line: 231, column: 26, scope: !1139)
!1152 = !DILocalVariable(name: "i", scope: !1139, file: !4, line: 232, type: !33)
!1153 = !DILocation(line: 232, column: 12, scope: !1139)
!1154 = !DILocation(line: 234, column: 9, scope: !1155)
!1155 = distinct !DILexicalBlock(scope: !1139, file: !4, line: 234, column: 9)
!1156 = !DILocation(line: 234, column: 19, scope: !1155)
!1157 = !DILocation(line: 234, column: 9, scope: !1139)
!1158 = !DILocation(line: 235, column: 10, scope: !1159)
!1159 = distinct !DILexicalBlock(scope: !1155, file: !4, line: 234, column: 25)
!1160 = !DILocation(line: 235, column: 18, scope: !1159)
!1161 = !DILocation(line: 236, column: 16, scope: !1159)
!1162 = !DILocation(line: 236, column: 9, scope: !1159)
!1163 = !DILocation(line: 240, column: 106, scope: !1164)
!1164 = distinct !DILexicalBlock(scope: !1139, file: !4, line: 240, column: 9)
!1165 = !DILocation(line: 240, column: 92, scope: !1164)
!1166 = !DILocation(line: 240, column: 90, scope: !1164)
!1167 = !DILocation(line: 240, column: 86, scope: !1164)
!1168 = !DILocation(line: 240, column: 10, scope: !1169)
!1169 = !DILexicalBlockFile(scope: !1164, file: !4, discriminator: 1)
!1170 = !DILocation(line: 240, column: 10, scope: !1164)
!1171 = !DILocation(line: 240, column: 9, scope: !1139)
!1172 = !DILocation(line: 241, column: 9, scope: !1164)
!1173 = !DILocation(line: 243, column: 12, scope: !1174)
!1174 = distinct !DILexicalBlock(scope: !1139, file: !4, line: 243, column: 5)
!1175 = !DILocation(line: 243, column: 10, scope: !1174)
!1176 = !DILocation(line: 243, column: 17, scope: !1177)
!1177 = !DILexicalBlockFile(scope: !1178, file: !4, discriminator: 1)
!1178 = distinct !DILexicalBlock(scope: !1174, file: !4, line: 243, column: 5)
!1179 = !DILocation(line: 243, column: 21, scope: !1177)
!1180 = !DILocation(line: 243, column: 19, scope: !1177)
!1181 = !DILocation(line: 243, column: 5, scope: !1177)
!1182 = !DILocation(line: 244, column: 14, scope: !1183)
!1183 = distinct !DILexicalBlock(scope: !1184, file: !4, line: 244, column: 13)
!1184 = distinct !DILexicalBlock(scope: !1178, file: !4, line: 243, column: 37)
!1185 = !DILocation(line: 244, column: 13, scope: !1183)
!1186 = !DILocation(line: 244, column: 20, scope: !1183)
!1187 = !DILocation(line: 244, column: 13, scope: !1184)
!1188 = !DILocation(line: 245, column: 17, scope: !1189)
!1189 = distinct !DILexicalBlock(scope: !1190, file: !4, line: 245, column: 17)
!1190 = distinct !DILexicalBlock(scope: !1183, file: !4, line: 244, column: 29)
!1191 = !DILocation(line: 245, column: 22, scope: !1189)
!1192 = !DILocation(line: 245, column: 32, scope: !1189)
!1193 = !DILocation(line: 245, column: 19, scope: !1189)
!1194 = !DILocation(line: 245, column: 36, scope: !1189)
!1195 = !DILocation(line: 245, column: 40, scope: !1196)
!1196 = !DILexicalBlockFile(scope: !1189, file: !4, discriminator: 1)
!1197 = !DILocation(line: 245, column: 39, scope: !1196)
!1198 = !DILocation(line: 245, column: 48, scope: !1196)
!1199 = !DILocation(line: 245, column: 17, scope: !1196)
!1200 = !DILocation(line: 246, column: 17, scope: !1201)
!1201 = distinct !DILexicalBlock(scope: !1189, file: !4, line: 245, column: 56)
!1202 = !DILocation(line: 247, column: 17, scope: !1201)
!1203 = !DILocation(line: 249, column: 15, scope: !1190)
!1204 = !DILocation(line: 249, column: 18, scope: !1190)
!1205 = !DILocation(line: 250, column: 14, scope: !1190)
!1206 = !DILocation(line: 251, column: 18, scope: !1190)
!1207 = !DILocation(line: 252, column: 9, scope: !1190)
!1208 = !DILocation(line: 253, column: 26, scope: !1209)
!1209 = distinct !DILexicalBlock(scope: !1183, file: !4, line: 252, column: 16)
!1210 = !DILocation(line: 253, column: 20, scope: !1209)
!1211 = !DILocation(line: 253, column: 15, scope: !1209)
!1212 = !DILocation(line: 253, column: 18, scope: !1209)
!1213 = !DILocation(line: 255, column: 5, scope: !1184)
!1214 = !DILocation(line: 243, column: 33, scope: !1215)
!1215 = !DILexicalBlockFile(scope: !1178, file: !4, discriminator: 2)
!1216 = !DILocation(line: 243, column: 5, scope: !1215)
!1217 = distinct !{!1217, !1218}
!1218 = !DILocation(line: 243, column: 5, scope: !1139)
!1219 = !DILocation(line: 257, column: 16, scope: !1139)
!1220 = !DILocation(line: 257, column: 20, scope: !1139)
!1221 = !DILocation(line: 257, column: 18, scope: !1139)
!1222 = !DILocation(line: 257, column: 6, scope: !1139)
!1223 = !DILocation(line: 257, column: 14, scope: !1139)
!1224 = !DILocation(line: 258, column: 12, scope: !1139)
!1225 = !DILocation(line: 258, column: 5, scope: !1139)
!1226 = !DILocation(line: 261, column: 17, scope: !1139)
!1227 = !DILocation(line: 261, column: 5, scope: !1139)
!1228 = !DILocation(line: 262, column: 5, scope: !1139)
!1229 = !DILocation(line: 263, column: 1, scope: !1139)
!1230 = distinct !DISubprogram(name: "cipher_test_init", scope: !4, file: !4, line: 468, type: !98, isLocal: true, isDefinition: true, scopeLine: 469, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!1231 = !DILocalVariable(name: "t", arg: 1, scope: !1230, file: !4, line: 468, type: !100)
!1232 = !DILocation(line: 468, column: 39, scope: !1230)
!1233 = !DILocalVariable(name: "alg", arg: 2, scope: !1230, file: !4, line: 468, type: !67)
!1234 = !DILocation(line: 468, column: 54, scope: !1230)
!1235 = !DILocalVariable(name: "cipher", scope: !1230, file: !4, line: 470, type: !1236)
!1236 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1237, size: 64, align: 64)
!1237 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1238)
!1238 = !DIDerivedType(tag: DW_TAG_typedef, name: "EVP_CIPHER", file: !113, line: 89, baseType: !1239)
!1239 = !DICompositeType(tag: DW_TAG_structure_type, name: "evp_cipher_st", file: !113, line: 89, flags: DIFlagFwdDecl)
!1240 = !DILocation(line: 470, column: 23, scope: !1230)
!1241 = !DILocalVariable(name: "cdat", scope: !1230, file: !4, line: 471, type: !1242)
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64, align: 64)
!1243 = !DIDerivedType(tag: DW_TAG_typedef, name: "CIPHER_DATA", file: !4, line: 466, baseType: !1244)
!1244 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cipher_data_st", file: !4, line: 448, size: 1280, align: 64, elements: !1245)
!1245 = !{!1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1261, !1263, !1264}
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "cipher", scope: !1244, file: !4, line: 449, baseType: !1236, size: 64, align: 64)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "enc", scope: !1244, file: !4, line: 450, baseType: !31, size: 32, align: 32, offset: 64)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "aead", scope: !1244, file: !4, line: 452, baseType: !31, size: 32, align: 32, offset: 96)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !1244, file: !4, line: 453, baseType: !56, size: 64, align: 64, offset: 128)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "key_len", scope: !1244, file: !4, line: 454, baseType: !33, size: 64, align: 64, offset: 192)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "iv", scope: !1244, file: !4, line: 455, baseType: !56, size: 64, align: 64, offset: 256)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "iv_len", scope: !1244, file: !4, line: 456, baseType: !33, size: 64, align: 64, offset: 320)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "plaintext", scope: !1244, file: !4, line: 457, baseType: !56, size: 64, align: 64, offset: 384)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "plaintext_len", scope: !1244, file: !4, line: 458, baseType: !33, size: 64, align: 64, offset: 448)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "ciphertext", scope: !1244, file: !4, line: 459, baseType: !56, size: 64, align: 64, offset: 512)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "ciphertext_len", scope: !1244, file: !4, line: 460, baseType: !33, size: 64, align: 64, offset: 576)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "aad", scope: !1244, file: !4, line: 462, baseType: !1258, size: 256, align: 64, offset: 640)
!1258 = !DICompositeType(tag: DW_TAG_array_type, baseType: !56, size: 256, align: 64, elements: !1259)
!1259 = !{!1260}
!1260 = !DISubrange(count: 4)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "aad_len", scope: !1244, file: !4, line: 463, baseType: !1262, size: 256, align: 64, offset: 896)
!1262 = !DICompositeType(tag: DW_TAG_array_type, baseType: !33, size: 256, align: 64, elements: !1259)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "tag", scope: !1244, file: !4, line: 464, baseType: !56, size: 64, align: 64, offset: 1152)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "tag_len", scope: !1244, file: !4, line: 465, baseType: !33, size: 64, align: 64, offset: 1216)
!1265 = !DILocation(line: 471, column: 18, scope: !1230)
!1266 = !DILocalVariable(name: "m", scope: !1230, file: !4, line: 472, type: !31)
!1267 = !DILocation(line: 472, column: 9, scope: !1230)
!1268 = !DILocation(line: 474, column: 40, scope: !1269)
!1269 = distinct !DILexicalBlock(scope: !1230, file: !4, line: 474, column: 9)
!1270 = !DILocation(line: 474, column: 19, scope: !1269)
!1271 = !DILocation(line: 474, column: 17, scope: !1269)
!1272 = !DILocation(line: 474, column: 46, scope: !1269)
!1273 = !DILocation(line: 474, column: 9, scope: !1230)
!1274 = !DILocation(line: 476, column: 24, scope: !1275)
!1275 = distinct !DILexicalBlock(scope: !1276, file: !4, line: 476, column: 13)
!1276 = distinct !DILexicalBlock(scope: !1269, file: !4, line: 474, column: 54)
!1277 = !DILocation(line: 476, column: 13, scope: !1275)
!1278 = !DILocation(line: 476, column: 29, scope: !1275)
!1279 = !DILocation(line: 476, column: 34, scope: !1275)
!1280 = !DILocation(line: 476, column: 48, scope: !1281)
!1281 = !DILexicalBlockFile(scope: !1275, file: !4, discriminator: 1)
!1282 = !DILocation(line: 476, column: 37, scope: !1281)
!1283 = !DILocation(line: 476, column: 53, scope: !1281)
!1284 = !DILocation(line: 476, column: 13, scope: !1281)
!1285 = !DILocation(line: 477, column: 13, scope: !1286)
!1286 = distinct !DILexicalBlock(scope: !1275, file: !4, line: 476, column: 59)
!1287 = !DILocation(line: 477, column: 16, scope: !1286)
!1288 = !DILocation(line: 477, column: 21, scope: !1286)
!1289 = !DILocation(line: 478, column: 13, scope: !1286)
!1290 = !DILocation(line: 480, column: 9, scope: !1276)
!1291 = !DILocation(line: 482, column: 12, scope: !1230)
!1292 = !DILocation(line: 482, column: 10, scope: !1230)
!1293 = !DILocation(line: 483, column: 20, scope: !1230)
!1294 = !DILocation(line: 483, column: 5, scope: !1230)
!1295 = !DILocation(line: 483, column: 11, scope: !1230)
!1296 = !DILocation(line: 483, column: 18, scope: !1230)
!1297 = !DILocation(line: 484, column: 5, scope: !1230)
!1298 = !DILocation(line: 484, column: 11, scope: !1230)
!1299 = !DILocation(line: 484, column: 15, scope: !1230)
!1300 = !DILocation(line: 485, column: 27, scope: !1230)
!1301 = !DILocation(line: 485, column: 10, scope: !1230)
!1302 = !DILocation(line: 485, column: 35, scope: !1230)
!1303 = !DILocation(line: 485, column: 9, scope: !1230)
!1304 = !DILocation(line: 485, column: 7, scope: !1230)
!1305 = !DILocation(line: 486, column: 9, scope: !1306)
!1306 = distinct !DILexicalBlock(scope: !1230, file: !4, line: 486, column: 9)
!1307 = !DILocation(line: 486, column: 11, scope: !1306)
!1308 = !DILocation(line: 487, column: 13, scope: !1306)
!1309 = !DILocation(line: 487, column: 16, scope: !1310)
!1310 = !DILexicalBlockFile(scope: !1306, file: !4, discriminator: 1)
!1311 = !DILocation(line: 487, column: 18, scope: !1310)
!1312 = !DILocation(line: 488, column: 13, scope: !1306)
!1313 = !DILocation(line: 488, column: 16, scope: !1310)
!1314 = !DILocation(line: 488, column: 18, scope: !1310)
!1315 = !DILocation(line: 489, column: 13, scope: !1306)
!1316 = !DILocation(line: 489, column: 16, scope: !1310)
!1317 = !DILocation(line: 489, column: 18, scope: !1310)
!1318 = !DILocation(line: 486, column: 9, scope: !1319)
!1319 = !DILexicalBlockFile(scope: !1230, file: !4, discriminator: 1)
!1320 = !DILocation(line: 490, column: 22, scope: !1306)
!1321 = !DILocation(line: 490, column: 9, scope: !1306)
!1322 = !DILocation(line: 490, column: 15, scope: !1306)
!1323 = !DILocation(line: 490, column: 20, scope: !1306)
!1324 = !DILocation(line: 491, column: 31, scope: !1325)
!1325 = distinct !DILexicalBlock(scope: !1306, file: !4, line: 491, column: 14)
!1326 = !DILocation(line: 491, column: 14, scope: !1325)
!1327 = !DILocation(line: 491, column: 39, scope: !1325)
!1328 = !DILocation(line: 491, column: 14, scope: !1306)
!1329 = !DILocation(line: 492, column: 9, scope: !1325)
!1330 = !DILocation(line: 492, column: 15, scope: !1325)
!1331 = !DILocation(line: 492, column: 20, scope: !1325)
!1332 = !DILocation(line: 494, column: 9, scope: !1325)
!1333 = !DILocation(line: 494, column: 15, scope: !1325)
!1334 = !DILocation(line: 494, column: 20, scope: !1325)
!1335 = !DILocation(line: 496, column: 15, scope: !1230)
!1336 = !DILocation(line: 496, column: 5, scope: !1230)
!1337 = !DILocation(line: 496, column: 8, scope: !1230)
!1338 = !DILocation(line: 496, column: 13, scope: !1230)
!1339 = !DILocation(line: 497, column: 5, scope: !1230)
!1340 = !DILocation(line: 498, column: 1, scope: !1230)
!1341 = distinct !DISubprogram(name: "cipher_test_cleanup", scope: !4, file: !4, line: 500, type: !146, isLocal: true, isDefinition: true, scopeLine: 501, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!1342 = !DILocalVariable(name: "t", arg: 1, scope: !1341, file: !4, line: 500, type: !100)
!1343 = !DILocation(line: 500, column: 43, scope: !1341)
!1344 = !DILocalVariable(name: "i", scope: !1341, file: !4, line: 502, type: !31)
!1345 = !DILocation(line: 502, column: 9, scope: !1341)
!1346 = !DILocalVariable(name: "cdat", scope: !1341, file: !4, line: 503, type: !1242)
!1347 = !DILocation(line: 503, column: 18, scope: !1341)
!1348 = !DILocation(line: 503, column: 25, scope: !1341)
!1349 = !DILocation(line: 503, column: 28, scope: !1341)
!1350 = !DILocation(line: 505, column: 17, scope: !1341)
!1351 = !DILocation(line: 505, column: 23, scope: !1341)
!1352 = !DILocation(line: 505, column: 5, scope: !1341)
!1353 = !DILocation(line: 506, column: 17, scope: !1341)
!1354 = !DILocation(line: 506, column: 23, scope: !1341)
!1355 = !DILocation(line: 506, column: 5, scope: !1341)
!1356 = !DILocation(line: 507, column: 17, scope: !1341)
!1357 = !DILocation(line: 507, column: 23, scope: !1341)
!1358 = !DILocation(line: 507, column: 5, scope: !1341)
!1359 = !DILocation(line: 508, column: 17, scope: !1341)
!1360 = !DILocation(line: 508, column: 23, scope: !1341)
!1361 = !DILocation(line: 508, column: 5, scope: !1341)
!1362 = !DILocation(line: 509, column: 12, scope: !1363)
!1363 = distinct !DILexicalBlock(scope: !1341, file: !4, line: 509, column: 5)
!1364 = !DILocation(line: 509, column: 10, scope: !1363)
!1365 = !DILocation(line: 509, column: 17, scope: !1366)
!1366 = !DILexicalBlockFile(scope: !1367, file: !4, discriminator: 1)
!1367 = distinct !DILexicalBlock(scope: !1363, file: !4, line: 509, column: 5)
!1368 = !DILocation(line: 509, column: 19, scope: !1366)
!1369 = !DILocation(line: 509, column: 5, scope: !1366)
!1370 = !DILocation(line: 510, column: 31, scope: !1367)
!1371 = !DILocation(line: 510, column: 21, scope: !1367)
!1372 = !DILocation(line: 510, column: 27, scope: !1367)
!1373 = !DILocation(line: 510, column: 9, scope: !1367)
!1374 = !DILocation(line: 509, column: 25, scope: !1375)
!1375 = !DILexicalBlockFile(scope: !1367, file: !4, discriminator: 2)
!1376 = !DILocation(line: 509, column: 5, scope: !1375)
!1377 = distinct !{!1377, !1378}
!1378 = !DILocation(line: 509, column: 5, scope: !1341)
!1379 = !DILocation(line: 511, column: 17, scope: !1341)
!1380 = !DILocation(line: 511, column: 23, scope: !1341)
!1381 = !DILocation(line: 511, column: 5, scope: !1341)
!1382 = !DILocation(line: 512, column: 1, scope: !1341)
!1383 = distinct !DISubprogram(name: "cipher_test_parse", scope: !4, file: !4, line: 514, type: !150, isLocal: true, isDefinition: true, scopeLine: 516, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!1384 = !DILocalVariable(name: "t", arg: 1, scope: !1383, file: !4, line: 514, type: !100)
!1385 = !DILocation(line: 514, column: 40, scope: !1383)
!1386 = !DILocalVariable(name: "keyword", arg: 2, scope: !1383, file: !4, line: 514, type: !67)
!1387 = !DILocation(line: 514, column: 55, scope: !1383)
!1388 = !DILocalVariable(name: "value", arg: 3, scope: !1383, file: !4, line: 515, type: !67)
!1389 = !DILocation(line: 515, column: 42, scope: !1383)
!1390 = !DILocalVariable(name: "cdat", scope: !1383, file: !4, line: 517, type: !1242)
!1391 = !DILocation(line: 517, column: 18, scope: !1383)
!1392 = !DILocation(line: 517, column: 25, scope: !1383)
!1393 = !DILocation(line: 517, column: 28, scope: !1383)
!1394 = !DILocalVariable(name: "i", scope: !1383, file: !4, line: 518, type: !31)
!1395 = !DILocation(line: 518, column: 9, scope: !1383)
!1396 = !DILocation(line: 520, column: 16, scope: !1397)
!1397 = distinct !DILexicalBlock(scope: !1383, file: !4, line: 520, column: 9)
!1398 = !DILocation(line: 520, column: 9, scope: !1397)
!1399 = !DILocation(line: 520, column: 32, scope: !1397)
!1400 = !DILocation(line: 520, column: 9, scope: !1383)
!1401 = !DILocation(line: 521, column: 26, scope: !1397)
!1402 = !DILocation(line: 521, column: 34, scope: !1397)
!1403 = !DILocation(line: 521, column: 40, scope: !1397)
!1404 = !DILocation(line: 521, column: 46, scope: !1397)
!1405 = !DILocation(line: 521, column: 52, scope: !1397)
!1406 = !DILocation(line: 521, column: 16, scope: !1397)
!1407 = !DILocation(line: 521, column: 9, scope: !1397)
!1408 = !DILocation(line: 522, column: 16, scope: !1409)
!1409 = distinct !DILexicalBlock(scope: !1383, file: !4, line: 522, column: 9)
!1410 = !DILocation(line: 522, column: 9, scope: !1409)
!1411 = !DILocation(line: 522, column: 31, scope: !1409)
!1412 = !DILocation(line: 522, column: 9, scope: !1383)
!1413 = !DILocation(line: 523, column: 26, scope: !1409)
!1414 = !DILocation(line: 523, column: 34, scope: !1409)
!1415 = !DILocation(line: 523, column: 40, scope: !1409)
!1416 = !DILocation(line: 523, column: 45, scope: !1409)
!1417 = !DILocation(line: 523, column: 51, scope: !1409)
!1418 = !DILocation(line: 523, column: 16, scope: !1409)
!1419 = !DILocation(line: 523, column: 9, scope: !1409)
!1420 = !DILocation(line: 524, column: 16, scope: !1421)
!1421 = distinct !DILexicalBlock(scope: !1383, file: !4, line: 524, column: 9)
!1422 = !DILocation(line: 524, column: 9, scope: !1421)
!1423 = !DILocation(line: 524, column: 38, scope: !1421)
!1424 = !DILocation(line: 524, column: 9, scope: !1383)
!1425 = !DILocation(line: 525, column: 26, scope: !1421)
!1426 = !DILocation(line: 525, column: 34, scope: !1421)
!1427 = !DILocation(line: 525, column: 40, scope: !1421)
!1428 = !DILocation(line: 525, column: 52, scope: !1421)
!1429 = !DILocation(line: 525, column: 58, scope: !1421)
!1430 = !DILocation(line: 525, column: 16, scope: !1421)
!1431 = !DILocation(line: 525, column: 9, scope: !1421)
!1432 = !DILocation(line: 526, column: 16, scope: !1433)
!1433 = distinct !DILexicalBlock(scope: !1383, file: !4, line: 526, column: 9)
!1434 = !DILocation(line: 526, column: 9, scope: !1433)
!1435 = !DILocation(line: 526, column: 39, scope: !1433)
!1436 = !DILocation(line: 526, column: 9, scope: !1383)
!1437 = !DILocation(line: 527, column: 26, scope: !1433)
!1438 = !DILocation(line: 527, column: 34, scope: !1433)
!1439 = !DILocation(line: 527, column: 40, scope: !1433)
!1440 = !DILocation(line: 527, column: 53, scope: !1433)
!1441 = !DILocation(line: 527, column: 59, scope: !1433)
!1442 = !DILocation(line: 527, column: 16, scope: !1433)
!1443 = !DILocation(line: 527, column: 9, scope: !1433)
!1444 = !DILocation(line: 528, column: 9, scope: !1445)
!1445 = distinct !DILexicalBlock(scope: !1383, file: !4, line: 528, column: 9)
!1446 = !DILocation(line: 528, column: 15, scope: !1445)
!1447 = !DILocation(line: 528, column: 9, scope: !1383)
!1448 = !DILocation(line: 529, column: 20, scope: !1449)
!1449 = distinct !DILexicalBlock(scope: !1450, file: !4, line: 529, column: 13)
!1450 = distinct !DILexicalBlock(scope: !1445, file: !4, line: 528, column: 21)
!1451 = !DILocation(line: 529, column: 13, scope: !1449)
!1452 = !DILocation(line: 529, column: 36, scope: !1449)
!1453 = !DILocation(line: 529, column: 13, scope: !1450)
!1454 = !DILocation(line: 530, column: 20, scope: !1455)
!1455 = distinct !DILexicalBlock(scope: !1456, file: !4, line: 530, column: 13)
!1456 = distinct !DILexicalBlock(scope: !1449, file: !4, line: 529, column: 42)
!1457 = !DILocation(line: 530, column: 18, scope: !1455)
!1458 = !DILocation(line: 530, column: 25, scope: !1459)
!1459 = !DILexicalBlockFile(scope: !1460, file: !4, discriminator: 1)
!1460 = distinct !DILexicalBlock(scope: !1455, file: !4, line: 530, column: 13)
!1461 = !DILocation(line: 530, column: 27, scope: !1459)
!1462 = !DILocation(line: 530, column: 13, scope: !1459)
!1463 = !DILocation(line: 531, column: 31, scope: !1464)
!1464 = distinct !DILexicalBlock(scope: !1465, file: !4, line: 531, column: 21)
!1465 = distinct !DILexicalBlock(scope: !1460, file: !4, line: 530, column: 37)
!1466 = !DILocation(line: 531, column: 21, scope: !1464)
!1467 = !DILocation(line: 531, column: 27, scope: !1464)
!1468 = !DILocation(line: 531, column: 34, scope: !1464)
!1469 = !DILocation(line: 531, column: 21, scope: !1465)
!1470 = !DILocation(line: 532, column: 38, scope: !1464)
!1471 = !DILocation(line: 532, column: 56, scope: !1464)
!1472 = !DILocation(line: 532, column: 46, scope: !1464)
!1473 = !DILocation(line: 532, column: 52, scope: !1464)
!1474 = !DILocation(line: 532, column: 75, scope: !1464)
!1475 = !DILocation(line: 532, column: 61, scope: !1464)
!1476 = !DILocation(line: 532, column: 67, scope: !1464)
!1477 = !DILocation(line: 532, column: 28, scope: !1464)
!1478 = !DILocation(line: 532, column: 21, scope: !1464)
!1479 = !DILocation(line: 533, column: 13, scope: !1465)
!1480 = !DILocation(line: 530, column: 33, scope: !1481)
!1481 = !DILexicalBlockFile(scope: !1460, file: !4, discriminator: 2)
!1482 = !DILocation(line: 530, column: 13, scope: !1481)
!1483 = distinct !{!1483, !1484}
!1484 = !DILocation(line: 530, column: 13, scope: !1456)
!1485 = !DILocation(line: 534, column: 13, scope: !1456)
!1486 = !DILocation(line: 536, column: 20, scope: !1487)
!1487 = distinct !DILexicalBlock(scope: !1450, file: !4, line: 536, column: 13)
!1488 = !DILocation(line: 536, column: 13, scope: !1487)
!1489 = !DILocation(line: 536, column: 36, scope: !1487)
!1490 = !DILocation(line: 536, column: 13, scope: !1450)
!1491 = !DILocation(line: 537, column: 30, scope: !1487)
!1492 = !DILocation(line: 537, column: 38, scope: !1487)
!1493 = !DILocation(line: 537, column: 44, scope: !1487)
!1494 = !DILocation(line: 537, column: 50, scope: !1487)
!1495 = !DILocation(line: 537, column: 56, scope: !1487)
!1496 = !DILocation(line: 537, column: 20, scope: !1487)
!1497 = !DILocation(line: 537, column: 13, scope: !1487)
!1498 = !DILocation(line: 538, column: 5, scope: !1450)
!1499 = !DILocation(line: 540, column: 16, scope: !1500)
!1500 = distinct !DILexicalBlock(scope: !1383, file: !4, line: 540, column: 9)
!1501 = !DILocation(line: 540, column: 9, scope: !1500)
!1502 = !DILocation(line: 540, column: 38, scope: !1500)
!1503 = !DILocation(line: 540, column: 9, scope: !1383)
!1504 = !DILocation(line: 541, column: 20, scope: !1505)
!1505 = distinct !DILexicalBlock(scope: !1506, file: !4, line: 541, column: 13)
!1506 = distinct !DILexicalBlock(scope: !1500, file: !4, line: 540, column: 44)
!1507 = !DILocation(line: 541, column: 13, scope: !1505)
!1508 = !DILocation(line: 541, column: 38, scope: !1505)
!1509 = !DILocation(line: 541, column: 13, scope: !1506)
!1510 = !DILocation(line: 542, column: 13, scope: !1505)
!1511 = !DILocation(line: 542, column: 19, scope: !1505)
!1512 = !DILocation(line: 542, column: 23, scope: !1505)
!1513 = !DILocation(line: 543, column: 25, scope: !1514)
!1514 = distinct !DILexicalBlock(scope: !1505, file: !4, line: 543, column: 18)
!1515 = !DILocation(line: 543, column: 18, scope: !1514)
!1516 = !DILocation(line: 543, column: 43, scope: !1514)
!1517 = !DILocation(line: 543, column: 18, scope: !1505)
!1518 = !DILocation(line: 544, column: 13, scope: !1514)
!1519 = !DILocation(line: 544, column: 19, scope: !1514)
!1520 = !DILocation(line: 544, column: 23, scope: !1514)
!1521 = !DILocation(line: 546, column: 13, scope: !1514)
!1522 = !DILocation(line: 547, column: 9, scope: !1506)
!1523 = !DILocation(line: 549, column: 5, scope: !1383)
!1524 = !DILocation(line: 550, column: 1, scope: !1383)
!1525 = !DILocalVariable(name: "t", arg: 1, scope: !160, file: !4, line: 755, type: !100)
!1526 = !DILocation(line: 755, column: 38, scope: !160)
!1527 = !DILocalVariable(name: "cdat", scope: !160, file: !4, line: 757, type: !1242)
!1528 = !DILocation(line: 757, column: 18, scope: !160)
!1529 = !DILocation(line: 757, column: 25, scope: !160)
!1530 = !DILocation(line: 757, column: 28, scope: !160)
!1531 = !DILocalVariable(name: "rv", scope: !160, file: !4, line: 758, type: !31)
!1532 = !DILocation(line: 758, column: 9, scope: !160)
!1533 = !DILocalVariable(name: "frag", scope: !160, file: !4, line: 758, type: !31)
!1534 = !DILocation(line: 758, column: 13, scope: !160)
!1535 = !DILocalVariable(name: "out_misalign", scope: !160, file: !4, line: 759, type: !33)
!1536 = !DILocation(line: 759, column: 12, scope: !160)
!1537 = !DILocalVariable(name: "inp_misalign", scope: !160, file: !4, line: 759, type: !33)
!1538 = !DILocation(line: 759, column: 26, scope: !160)
!1539 = !DILocation(line: 761, column: 10, scope: !1540)
!1540 = distinct !DILexicalBlock(scope: !160, file: !4, line: 761, column: 9)
!1541 = !DILocation(line: 761, column: 16, scope: !1540)
!1542 = !DILocation(line: 761, column: 9, scope: !160)
!1543 = !DILocation(line: 762, column: 9, scope: !1544)
!1544 = distinct !DILexicalBlock(scope: !1540, file: !4, line: 761, column: 21)
!1545 = !DILocation(line: 762, column: 12, scope: !1544)
!1546 = !DILocation(line: 762, column: 16, scope: !1544)
!1547 = !DILocation(line: 763, column: 9, scope: !1544)
!1548 = !DILocation(line: 765, column: 10, scope: !1549)
!1549 = distinct !DILexicalBlock(scope: !160, file: !4, line: 765, column: 9)
!1550 = !DILocation(line: 765, column: 16, scope: !1549)
!1551 = !DILocation(line: 765, column: 19, scope: !1549)
!1552 = !DILocation(line: 765, column: 43, scope: !1553)
!1553 = !DILexicalBlockFile(scope: !1549, file: !4, discriminator: 1)
!1554 = !DILocation(line: 765, column: 49, scope: !1553)
!1555 = !DILocation(line: 765, column: 22, scope: !1553)
!1556 = !DILocation(line: 765, column: 9, scope: !1553)
!1557 = !DILocation(line: 767, column: 31, scope: !1558)
!1558 = distinct !DILexicalBlock(scope: !1559, file: !4, line: 767, column: 13)
!1559 = distinct !DILexicalBlock(scope: !1549, file: !4, line: 765, column: 58)
!1560 = !DILocation(line: 767, column: 37, scope: !1558)
!1561 = !DILocation(line: 767, column: 14, scope: !1558)
!1562 = !DILocation(line: 767, column: 45, scope: !1558)
!1563 = !DILocation(line: 767, column: 56, scope: !1558)
!1564 = !DILocation(line: 767, column: 13, scope: !1559)
!1565 = !DILocation(line: 768, column: 13, scope: !1566)
!1566 = distinct !DILexicalBlock(scope: !1558, file: !4, line: 767, column: 68)
!1567 = !DILocation(line: 768, column: 16, scope: !1566)
!1568 = !DILocation(line: 768, column: 20, scope: !1566)
!1569 = !DILocation(line: 769, column: 13, scope: !1566)
!1570 = !DILocation(line: 771, column: 5, scope: !1559)
!1571 = !DILocation(line: 772, column: 9, scope: !1572)
!1572 = distinct !DILexicalBlock(scope: !160, file: !4, line: 772, column: 9)
!1573 = !DILocation(line: 772, column: 15, scope: !1572)
!1574 = !DILocation(line: 772, column: 20, scope: !1572)
!1575 = !DILocation(line: 772, column: 24, scope: !1576)
!1576 = !DILexicalBlockFile(scope: !1572, file: !4, discriminator: 1)
!1577 = !DILocation(line: 772, column: 30, scope: !1576)
!1578 = !DILocation(line: 772, column: 9, scope: !1576)
!1579 = !DILocation(line: 773, column: 9, scope: !1580)
!1580 = distinct !DILexicalBlock(scope: !1572, file: !4, line: 772, column: 35)
!1581 = !DILocation(line: 773, column: 12, scope: !1580)
!1582 = !DILocation(line: 773, column: 16, scope: !1580)
!1583 = !DILocation(line: 774, column: 9, scope: !1580)
!1584 = !DILocation(line: 776, column: 23, scope: !1585)
!1585 = distinct !DILexicalBlock(scope: !160, file: !4, line: 776, column: 5)
!1586 = !DILocation(line: 776, column: 10, scope: !1585)
!1587 = !DILocation(line: 776, column: 28, scope: !1588)
!1588 = !DILexicalBlockFile(scope: !1589, file: !4, discriminator: 1)
!1589 = distinct !DILexicalBlock(scope: !1585, file: !4, line: 776, column: 5)
!1590 = !DILocation(line: 776, column: 41, scope: !1588)
!1591 = !DILocation(line: 776, column: 5, scope: !1588)
!1592 = !DILocation(line: 778, column: 9, scope: !1593)
!1593 = distinct !DILexicalBlock(scope: !1589, file: !4, line: 776, column: 48)
!1594 = !DILocation(line: 778, column: 12, scope: !1593)
!1595 = !DILocation(line: 778, column: 20, scope: !1593)
!1596 = !DILocation(line: 779, column: 27, scope: !1597)
!1597 = distinct !DILexicalBlock(scope: !1593, file: !4, line: 779, column: 9)
!1598 = !DILocation(line: 779, column: 14, scope: !1597)
!1599 = !DILocation(line: 779, column: 41, scope: !1600)
!1600 = !DILexicalBlockFile(scope: !1601, file: !4, discriminator: 1)
!1601 = distinct !DILexicalBlock(scope: !1597, file: !4, line: 779, column: 9)
!1602 = !DILocation(line: 779, column: 54, scope: !1600)
!1603 = !DILocation(line: 779, column: 9, scope: !1600)
!1604 = !DILocation(line: 780, column: 17, scope: !1605)
!1605 = distinct !DILexicalBlock(scope: !1606, file: !4, line: 780, column: 17)
!1606 = distinct !DILexicalBlock(scope: !1601, file: !4, line: 779, column: 76)
!1607 = !DILocation(line: 780, column: 30, scope: !1605)
!1608 = !DILocation(line: 780, column: 17, scope: !1606)
!1609 = !DILocation(line: 784, column: 30, scope: !1610)
!1610 = distinct !DILexicalBlock(scope: !1605, file: !4, line: 780, column: 45)
!1611 = !DILocation(line: 785, column: 30, scope: !1610)
!1612 = !DILocation(line: 782, column: 17, scope: !1610)
!1613 = !DILocation(line: 786, column: 13, scope: !1610)
!1614 = !DILocation(line: 789, column: 30, scope: !1615)
!1615 = distinct !DILexicalBlock(scope: !1605, file: !4, line: 786, column: 20)
!1616 = !DILocation(line: 790, column: 30, scope: !1615)
!1617 = !DILocation(line: 791, column: 30, scope: !1615)
!1618 = !DILocation(line: 787, column: 17, scope: !1615)
!1619 = !DILocation(line: 793, column: 17, scope: !1620)
!1620 = distinct !DILexicalBlock(scope: !1606, file: !4, line: 793, column: 17)
!1621 = !DILocation(line: 793, column: 23, scope: !1620)
!1622 = !DILocation(line: 793, column: 17, scope: !1606)
!1623 = !DILocation(line: 794, column: 38, scope: !1624)
!1624 = distinct !DILexicalBlock(scope: !1620, file: !4, line: 793, column: 28)
!1625 = !DILocation(line: 794, column: 44, scope: !1624)
!1626 = !DILocation(line: 794, column: 58, scope: !1624)
!1627 = !DILocation(line: 794, column: 72, scope: !1624)
!1628 = !DILocation(line: 794, column: 22, scope: !1624)
!1629 = !DILocation(line: 794, column: 20, scope: !1624)
!1630 = !DILocation(line: 796, column: 21, scope: !1631)
!1631 = distinct !DILexicalBlock(scope: !1624, file: !4, line: 796, column: 21)
!1632 = !DILocation(line: 796, column: 24, scope: !1631)
!1633 = !DILocation(line: 796, column: 21, scope: !1624)
!1634 = !DILocation(line: 797, column: 25, scope: !1635)
!1635 = distinct !DILexicalBlock(scope: !1636, file: !4, line: 797, column: 25)
!1636 = distinct !DILexicalBlock(scope: !1631, file: !4, line: 796, column: 30)
!1637 = !DILocation(line: 797, column: 28, scope: !1635)
!1638 = !DILocation(line: 797, column: 25, scope: !1636)
!1639 = !DILocation(line: 798, column: 25, scope: !1635)
!1640 = !DILocation(line: 799, column: 21, scope: !1636)
!1641 = !DILocation(line: 801, column: 13, scope: !1624)
!1642 = !DILocation(line: 802, column: 17, scope: !1643)
!1643 = distinct !DILexicalBlock(scope: !1606, file: !4, line: 802, column: 17)
!1644 = !DILocation(line: 802, column: 23, scope: !1643)
!1645 = !DILocation(line: 802, column: 27, scope: !1643)
!1646 = !DILocation(line: 802, column: 17, scope: !1606)
!1647 = !DILocation(line: 803, column: 38, scope: !1648)
!1648 = distinct !DILexicalBlock(scope: !1643, file: !4, line: 802, column: 33)
!1649 = !DILocation(line: 803, column: 44, scope: !1648)
!1650 = !DILocation(line: 803, column: 58, scope: !1648)
!1651 = !DILocation(line: 803, column: 72, scope: !1648)
!1652 = !DILocation(line: 803, column: 22, scope: !1648)
!1653 = !DILocation(line: 803, column: 20, scope: !1648)
!1654 = !DILocation(line: 805, column: 21, scope: !1655)
!1655 = distinct !DILexicalBlock(scope: !1648, file: !4, line: 805, column: 21)
!1656 = !DILocation(line: 805, column: 24, scope: !1655)
!1657 = !DILocation(line: 805, column: 21, scope: !1648)
!1658 = !DILocation(line: 806, column: 25, scope: !1659)
!1659 = distinct !DILexicalBlock(scope: !1660, file: !4, line: 806, column: 25)
!1660 = distinct !DILexicalBlock(scope: !1655, file: !4, line: 805, column: 30)
!1661 = !DILocation(line: 806, column: 28, scope: !1659)
!1662 = !DILocation(line: 806, column: 25, scope: !1660)
!1663 = !DILocation(line: 807, column: 25, scope: !1659)
!1664 = !DILocation(line: 808, column: 21, scope: !1660)
!1665 = !DILocation(line: 810, column: 13, scope: !1648)
!1666 = !DILocation(line: 811, column: 9, scope: !1606)
!1667 = !DILocation(line: 779, column: 72, scope: !1668)
!1668 = !DILexicalBlockFile(scope: !1601, file: !4, discriminator: 2)
!1669 = !DILocation(line: 779, column: 9, scope: !1668)
!1670 = distinct !{!1670, !1671}
!1671 = !DILocation(line: 779, column: 9, scope: !1593)
!1672 = !DILocation(line: 813, column: 13, scope: !1673)
!1673 = distinct !DILexicalBlock(scope: !1593, file: !4, line: 813, column: 13)
!1674 = !DILocation(line: 813, column: 26, scope: !1673)
!1675 = !DILocation(line: 813, column: 31, scope: !1673)
!1676 = !DILocation(line: 813, column: 34, scope: !1677)
!1677 = !DILexicalBlockFile(scope: !1673, file: !4, discriminator: 1)
!1678 = !DILocation(line: 813, column: 39, scope: !1677)
!1679 = !DILocation(line: 813, column: 13, scope: !1677)
!1680 = !DILocation(line: 818, column: 17, scope: !1681)
!1681 = distinct !DILexicalBlock(scope: !1682, file: !4, line: 818, column: 17)
!1682 = distinct !DILexicalBlock(scope: !1673, file: !4, line: 813, column: 45)
!1683 = !DILocation(line: 818, column: 23, scope: !1681)
!1684 = !DILocation(line: 818, column: 28, scope: !1681)
!1685 = !DILocation(line: 819, column: 21, scope: !1681)
!1686 = !DILocation(line: 819, column: 42, scope: !1687)
!1687 = !DILexicalBlockFile(scope: !1681, file: !4, discriminator: 1)
!1688 = !DILocation(line: 819, column: 48, scope: !1687)
!1689 = !DILocation(line: 819, column: 25, scope: !1687)
!1690 = !DILocation(line: 819, column: 56, scope: !1687)
!1691 = !DILocation(line: 819, column: 67, scope: !1687)
!1692 = !DILocation(line: 820, column: 21, scope: !1681)
!1693 = !DILocation(line: 820, column: 42, scope: !1687)
!1694 = !DILocation(line: 820, column: 48, scope: !1687)
!1695 = !DILocation(line: 820, column: 25, scope: !1687)
!1696 = !DILocation(line: 820, column: 56, scope: !1687)
!1697 = !DILocation(line: 820, column: 67, scope: !1687)
!1698 = !DILocation(line: 821, column: 21, scope: !1681)
!1699 = !DILocation(line: 821, column: 42, scope: !1687)
!1700 = !DILocation(line: 821, column: 48, scope: !1687)
!1701 = !DILocation(line: 821, column: 25, scope: !1687)
!1702 = !DILocation(line: 821, column: 56, scope: !1687)
!1703 = !DILocation(line: 821, column: 67, scope: !1687)
!1704 = !DILocation(line: 818, column: 17, scope: !1705)
!1705 = !DILexicalBlockFile(scope: !1682, file: !4, discriminator: 1)
!1706 = !DILocation(line: 822, column: 17, scope: !1681)
!1707 = !DILocation(line: 823, column: 26, scope: !1682)
!1708 = !DILocation(line: 824, column: 17, scope: !1682)
!1709 = !DILocation(line: 825, column: 9, scope: !1682)
!1710 = !DILocation(line: 826, column: 25, scope: !1711)
!1711 = distinct !DILexicalBlock(scope: !1673, file: !4, line: 825, column: 16)
!1712 = !DILocation(line: 776, column: 5, scope: !1713)
!1713 = !DILexicalBlockFile(scope: !1589, file: !4, discriminator: 2)
!1714 = distinct !{!1714, !1715}
!1715 = !DILocation(line: 776, column: 5, scope: !160)
!1716 = !DILocation(line: 829, column: 5, scope: !160)
!1717 = !DILocation(line: 829, column: 8, scope: !160)
!1718 = !DILocation(line: 829, column: 16, scope: !160)
!1719 = !DILocation(line: 831, column: 5, scope: !160)
!1720 = !DILocation(line: 832, column: 1, scope: !160)
!1721 = distinct !DISubprogram(name: "cipher_test_enc", scope: !4, file: !4, line: 552, type: !1722, isLocal: true, isDefinition: true, scopeLine: 554, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!1722 = !DISubroutineType(types: !1723)
!1723 = !{!31, !100, !31, !33, !33, !31}
!1724 = !DILocalVariable(name: "t", arg: 1, scope: !1721, file: !4, line: 552, type: !100)
!1725 = !DILocation(line: 552, column: 38, scope: !1721)
!1726 = !DILocalVariable(name: "enc", arg: 2, scope: !1721, file: !4, line: 552, type: !31)
!1727 = !DILocation(line: 552, column: 45, scope: !1721)
!1728 = !DILocalVariable(name: "out_misalign", arg: 3, scope: !1721, file: !4, line: 553, type: !33)
!1729 = !DILocation(line: 553, column: 35, scope: !1721)
!1730 = !DILocalVariable(name: "inp_misalign", arg: 4, scope: !1721, file: !4, line: 553, type: !33)
!1731 = !DILocation(line: 553, column: 56, scope: !1721)
!1732 = !DILocalVariable(name: "frag", arg: 5, scope: !1721, file: !4, line: 553, type: !31)
!1733 = !DILocation(line: 553, column: 74, scope: !1721)
!1734 = !DILocalVariable(name: "expected", scope: !1721, file: !4, line: 555, type: !1242)
!1735 = !DILocation(line: 555, column: 18, scope: !1721)
!1736 = !DILocation(line: 555, column: 29, scope: !1721)
!1737 = !DILocation(line: 555, column: 32, scope: !1721)
!1738 = !DILocalVariable(name: "in", scope: !1721, file: !4, line: 556, type: !56)
!1739 = !DILocation(line: 556, column: 20, scope: !1721)
!1740 = !DILocalVariable(name: "expected_out", scope: !1721, file: !4, line: 556, type: !56)
!1741 = !DILocation(line: 556, column: 25, scope: !1721)
!1742 = !DILocalVariable(name: "tmp", scope: !1721, file: !4, line: 556, type: !56)
!1743 = !DILocation(line: 556, column: 40, scope: !1721)
!1744 = !DILocalVariable(name: "in_len", scope: !1721, file: !4, line: 557, type: !33)
!1745 = !DILocation(line: 557, column: 12, scope: !1721)
!1746 = !DILocalVariable(name: "out_len", scope: !1721, file: !4, line: 557, type: !33)
!1747 = !DILocation(line: 557, column: 20, scope: !1721)
!1748 = !DILocalVariable(name: "donelen", scope: !1721, file: !4, line: 557, type: !33)
!1749 = !DILocation(line: 557, column: 29, scope: !1721)
!1750 = !DILocalVariable(name: "ok", scope: !1721, file: !4, line: 558, type: !31)
!1751 = !DILocation(line: 558, column: 9, scope: !1721)
!1752 = !DILocalVariable(name: "tmplen", scope: !1721, file: !4, line: 558, type: !31)
!1753 = !DILocation(line: 558, column: 17, scope: !1721)
!1754 = !DILocalVariable(name: "chunklen", scope: !1721, file: !4, line: 558, type: !31)
!1755 = !DILocation(line: 558, column: 25, scope: !1721)
!1756 = !DILocalVariable(name: "tmpflen", scope: !1721, file: !4, line: 558, type: !31)
!1757 = !DILocation(line: 558, column: 35, scope: !1721)
!1758 = !DILocalVariable(name: "i", scope: !1721, file: !4, line: 558, type: !31)
!1759 = !DILocation(line: 558, column: 44, scope: !1721)
!1760 = !DILocalVariable(name: "ctx", scope: !1721, file: !4, line: 559, type: !1761)
!1761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1762, size: 64, align: 64)
!1762 = !DIDerivedType(tag: DW_TAG_typedef, name: "EVP_CIPHER_CTX", file: !113, line: 90, baseType: !1763)
!1763 = !DICompositeType(tag: DW_TAG_structure_type, name: "evp_cipher_ctx_st", file: !113, line: 90, flags: DIFlagFwdDecl)
!1764 = !DILocation(line: 559, column: 21, scope: !1721)
!1765 = !DILocation(line: 561, column: 5, scope: !1721)
!1766 = !DILocation(line: 561, column: 8, scope: !1721)
!1767 = !DILocation(line: 561, column: 12, scope: !1721)
!1768 = !DILocation(line: 562, column: 79, scope: !1769)
!1769 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 562, column: 9)
!1770 = !DILocation(line: 562, column: 77, scope: !1769)
!1771 = !DILocation(line: 562, column: 73, scope: !1769)
!1772 = !DILocation(line: 562, column: 10, scope: !1773)
!1773 = !DILexicalBlockFile(scope: !1769, file: !4, discriminator: 1)
!1774 = !DILocation(line: 562, column: 10, scope: !1769)
!1775 = !DILocation(line: 562, column: 9, scope: !1721)
!1776 = !DILocation(line: 563, column: 9, scope: !1769)
!1777 = !DILocation(line: 564, column: 30, scope: !1721)
!1778 = !DILocation(line: 564, column: 5, scope: !1721)
!1779 = !DILocation(line: 565, column: 9, scope: !1780)
!1780 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 565, column: 9)
!1781 = !DILocation(line: 565, column: 9, scope: !1721)
!1782 = !DILocation(line: 566, column: 14, scope: !1783)
!1783 = distinct !DILexicalBlock(scope: !1780, file: !4, line: 565, column: 14)
!1784 = !DILocation(line: 566, column: 24, scope: !1783)
!1785 = !DILocation(line: 566, column: 12, scope: !1783)
!1786 = !DILocation(line: 567, column: 18, scope: !1783)
!1787 = !DILocation(line: 567, column: 28, scope: !1783)
!1788 = !DILocation(line: 567, column: 16, scope: !1783)
!1789 = !DILocation(line: 568, column: 24, scope: !1783)
!1790 = !DILocation(line: 568, column: 34, scope: !1783)
!1791 = !DILocation(line: 568, column: 22, scope: !1783)
!1792 = !DILocation(line: 569, column: 19, scope: !1783)
!1793 = !DILocation(line: 569, column: 29, scope: !1783)
!1794 = !DILocation(line: 569, column: 17, scope: !1783)
!1795 = !DILocation(line: 570, column: 5, scope: !1783)
!1796 = !DILocation(line: 571, column: 14, scope: !1797)
!1797 = distinct !DILexicalBlock(scope: !1780, file: !4, line: 570, column: 12)
!1798 = !DILocation(line: 571, column: 24, scope: !1797)
!1799 = !DILocation(line: 571, column: 12, scope: !1797)
!1800 = !DILocation(line: 572, column: 18, scope: !1797)
!1801 = !DILocation(line: 572, column: 28, scope: !1797)
!1802 = !DILocation(line: 572, column: 16, scope: !1797)
!1803 = !DILocation(line: 573, column: 24, scope: !1797)
!1804 = !DILocation(line: 573, column: 34, scope: !1797)
!1805 = !DILocation(line: 573, column: 22, scope: !1797)
!1806 = !DILocation(line: 574, column: 19, scope: !1797)
!1807 = !DILocation(line: 574, column: 29, scope: !1797)
!1808 = !DILocation(line: 574, column: 17, scope: !1797)
!1809 = !DILocation(line: 576, column: 9, scope: !1810)
!1810 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 576, column: 9)
!1811 = !DILocation(line: 576, column: 22, scope: !1810)
!1812 = !DILocation(line: 576, column: 9, scope: !1721)
!1813 = !DILocation(line: 580, column: 29, scope: !1814)
!1814 = distinct !DILexicalBlock(scope: !1810, file: !4, line: 576, column: 37)
!1815 = !DILocation(line: 580, column: 44, scope: !1814)
!1816 = !DILocation(line: 580, column: 42, scope: !1814)
!1817 = !DILocation(line: 580, column: 51, scope: !1814)
!1818 = !DILocation(line: 580, column: 15, scope: !1814)
!1819 = !DILocation(line: 580, column: 13, scope: !1814)
!1820 = !DILocation(line: 581, column: 14, scope: !1821)
!1821 = distinct !DILexicalBlock(scope: !1814, file: !4, line: 581, column: 13)
!1822 = !DILocation(line: 581, column: 13, scope: !1814)
!1823 = !DILocation(line: 582, column: 13, scope: !1821)
!1824 = !DILocation(line: 583, column: 21, scope: !1814)
!1825 = !DILocation(line: 583, column: 27, scope: !1814)
!1826 = !DILocation(line: 583, column: 25, scope: !1814)
!1827 = !DILocation(line: 583, column: 41, scope: !1814)
!1828 = !DILocation(line: 583, column: 45, scope: !1814)
!1829 = !DILocation(line: 583, column: 14, scope: !1814)
!1830 = !DILocation(line: 583, column: 12, scope: !1814)
!1831 = !DILocation(line: 584, column: 5, scope: !1814)
!1832 = !DILocation(line: 585, column: 32, scope: !1833)
!1833 = distinct !DILexicalBlock(scope: !1810, file: !4, line: 584, column: 12)
!1834 = !DILocation(line: 585, column: 47, scope: !1833)
!1835 = !DILocation(line: 585, column: 45, scope: !1833)
!1836 = !DILocation(line: 585, column: 55, scope: !1833)
!1837 = !DILocation(line: 585, column: 28, scope: !1833)
!1838 = !DILocation(line: 585, column: 22, scope: !1833)
!1839 = !DILocation(line: 594, column: 29, scope: !1833)
!1840 = !DILocation(line: 594, column: 44, scope: !1833)
!1841 = !DILocation(line: 594, column: 42, scope: !1833)
!1842 = !DILocation(line: 594, column: 51, scope: !1833)
!1843 = !DILocation(line: 594, column: 62, scope: !1833)
!1844 = !DILocation(line: 594, column: 60, scope: !1833)
!1845 = !DILocation(line: 594, column: 77, scope: !1833)
!1846 = !DILocation(line: 594, column: 75, scope: !1833)
!1847 = !DILocation(line: 594, column: 15, scope: !1833)
!1848 = !DILocation(line: 594, column: 13, scope: !1833)
!1849 = !DILocation(line: 596, column: 14, scope: !1850)
!1850 = distinct !DILexicalBlock(scope: !1833, file: !4, line: 596, column: 13)
!1851 = !DILocation(line: 596, column: 13, scope: !1833)
!1852 = !DILocation(line: 597, column: 13, scope: !1850)
!1853 = !DILocation(line: 598, column: 21, scope: !1833)
!1854 = !DILocation(line: 598, column: 27, scope: !1833)
!1855 = !DILocation(line: 598, column: 25, scope: !1833)
!1856 = !DILocation(line: 598, column: 42, scope: !1833)
!1857 = !DILocation(line: 598, column: 40, scope: !1833)
!1858 = !DILocation(line: 598, column: 49, scope: !1833)
!1859 = !DILocation(line: 599, column: 21, scope: !1833)
!1860 = !DILocation(line: 598, column: 58, scope: !1833)
!1861 = !DILocation(line: 599, column: 35, scope: !1833)
!1862 = !DILocation(line: 599, column: 39, scope: !1833)
!1863 = !DILocation(line: 598, column: 14, scope: !1833)
!1864 = !DILocation(line: 598, column: 12, scope: !1833)
!1865 = !DILocation(line: 601, column: 28, scope: !1866)
!1866 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 601, column: 9)
!1867 = !DILocation(line: 601, column: 33, scope: !1866)
!1868 = !DILocation(line: 601, column: 43, scope: !1866)
!1869 = !DILocation(line: 601, column: 68, scope: !1866)
!1870 = !DILocation(line: 601, column: 10, scope: !1866)
!1871 = !DILocation(line: 601, column: 9, scope: !1721)
!1872 = !DILocation(line: 602, column: 9, scope: !1873)
!1873 = distinct !DILexicalBlock(scope: !1866, file: !4, line: 601, column: 74)
!1874 = !DILocation(line: 602, column: 12, scope: !1873)
!1875 = !DILocation(line: 602, column: 16, scope: !1873)
!1876 = !DILocation(line: 603, column: 9, scope: !1873)
!1877 = !DILocation(line: 605, column: 9, scope: !1878)
!1878 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 605, column: 9)
!1879 = !DILocation(line: 605, column: 19, scope: !1878)
!1880 = !DILocation(line: 605, column: 9, scope: !1721)
!1881 = !DILocation(line: 606, column: 13, scope: !1882)
!1882 = distinct !DILexicalBlock(scope: !1883, file: !4, line: 606, column: 13)
!1883 = distinct !DILexicalBlock(scope: !1878, file: !4, line: 605, column: 23)
!1884 = !DILocation(line: 606, column: 23, scope: !1882)
!1885 = !DILocation(line: 606, column: 13, scope: !1883)
!1886 = !DILocation(line: 607, column: 38, scope: !1887)
!1887 = distinct !DILexicalBlock(scope: !1888, file: !4, line: 607, column: 17)
!1888 = distinct !DILexicalBlock(scope: !1882, file: !4, line: 606, column: 29)
!1889 = !DILocation(line: 608, column: 38, scope: !1887)
!1890 = !DILocation(line: 608, column: 48, scope: !1887)
!1891 = !DILocation(line: 607, column: 18, scope: !1887)
!1892 = !DILocation(line: 607, column: 17, scope: !1888)
!1893 = !DILocation(line: 609, column: 17, scope: !1894)
!1894 = distinct !DILexicalBlock(scope: !1887, file: !4, line: 608, column: 60)
!1895 = !DILocation(line: 609, column: 20, scope: !1894)
!1896 = !DILocation(line: 609, column: 24, scope: !1894)
!1897 = !DILocation(line: 610, column: 17, scope: !1894)
!1898 = !DILocation(line: 612, column: 9, scope: !1888)
!1899 = !DILocation(line: 612, column: 20, scope: !1900)
!1900 = !DILexicalBlockFile(scope: !1901, file: !4, discriminator: 1)
!1901 = distinct !DILexicalBlock(scope: !1882, file: !4, line: 612, column: 20)
!1902 = !DILocation(line: 612, column: 30, scope: !1900)
!1903 = !DILocation(line: 612, column: 73, scope: !1900)
!1904 = !DILocation(line: 612, column: 48, scope: !1900)
!1905 = !DILocation(line: 612, column: 40, scope: !1900)
!1906 = !DILocation(line: 612, column: 37, scope: !1900)
!1907 = !DILocation(line: 613, column: 13, scope: !1908)
!1908 = distinct !DILexicalBlock(scope: !1901, file: !4, line: 612, column: 79)
!1909 = !DILocation(line: 613, column: 16, scope: !1908)
!1910 = !DILocation(line: 613, column: 20, scope: !1908)
!1911 = !DILocation(line: 614, column: 13, scope: !1908)
!1912 = !DILocation(line: 616, column: 5, scope: !1883)
!1913 = !DILocation(line: 617, column: 9, scope: !1914)
!1914 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 617, column: 9)
!1915 = !DILocation(line: 617, column: 19, scope: !1914)
!1916 = !DILocation(line: 617, column: 9, scope: !1721)
!1917 = !DILocalVariable(name: "tag", scope: !1918, file: !4, line: 618, type: !56)
!1918 = distinct !DILexicalBlock(scope: !1914, file: !4, line: 617, column: 25)
!1919 = !DILocation(line: 618, column: 24, scope: !1918)
!1920 = !DILocation(line: 623, column: 13, scope: !1921)
!1921 = distinct !DILexicalBlock(scope: !1918, file: !4, line: 623, column: 13)
!1922 = !DILocation(line: 623, column: 17, scope: !1921)
!1923 = !DILocation(line: 623, column: 20, scope: !1924)
!1924 = !DILexicalBlockFile(scope: !1921, file: !4, discriminator: 1)
!1925 = !DILocation(line: 623, column: 30, scope: !1924)
!1926 = !DILocation(line: 623, column: 35, scope: !1924)
!1927 = !DILocation(line: 623, column: 13, scope: !1924)
!1928 = !DILocation(line: 624, column: 13, scope: !1929)
!1929 = distinct !DILexicalBlock(scope: !1921, file: !4, line: 623, column: 47)
!1930 = !DILocation(line: 624, column: 16, scope: !1929)
!1931 = !DILocation(line: 624, column: 20, scope: !1929)
!1932 = !DILocation(line: 625, column: 17, scope: !1929)
!1933 = !DILocation(line: 626, column: 9, scope: !1929)
!1934 = !DILocation(line: 627, column: 13, scope: !1935)
!1935 = distinct !DILexicalBlock(scope: !1921, file: !4, line: 626, column: 16)
!1936 = !DILocation(line: 627, column: 16, scope: !1935)
!1937 = !DILocation(line: 627, column: 20, scope: !1935)
!1938 = !DILocation(line: 628, column: 19, scope: !1935)
!1939 = !DILocation(line: 628, column: 29, scope: !1935)
!1940 = !DILocation(line: 628, column: 17, scope: !1935)
!1941 = !DILocation(line: 630, column: 13, scope: !1942)
!1942 = distinct !DILexicalBlock(scope: !1918, file: !4, line: 630, column: 13)
!1943 = !DILocation(line: 630, column: 17, scope: !1942)
!1944 = !DILocation(line: 630, column: 20, scope: !1945)
!1945 = !DILexicalBlockFile(scope: !1942, file: !4, discriminator: 1)
!1946 = !DILocation(line: 630, column: 30, scope: !1945)
!1947 = !DILocation(line: 630, column: 35, scope: !1945)
!1948 = !DILocation(line: 630, column: 13, scope: !1945)
!1949 = !DILocation(line: 631, column: 38, scope: !1950)
!1950 = distinct !DILexicalBlock(scope: !1951, file: !4, line: 631, column: 17)
!1951 = distinct !DILexicalBlock(scope: !1942, file: !4, line: 630, column: 43)
!1952 = !DILocation(line: 632, column: 38, scope: !1950)
!1953 = !DILocation(line: 632, column: 48, scope: !1950)
!1954 = !DILocation(line: 632, column: 57, scope: !1950)
!1955 = !DILocation(line: 631, column: 18, scope: !1950)
!1956 = !DILocation(line: 631, column: 17, scope: !1951)
!1957 = !DILocation(line: 633, column: 17, scope: !1950)
!1958 = !DILocation(line: 634, column: 9, scope: !1951)
!1959 = !DILocation(line: 635, column: 5, scope: !1918)
!1960 = !DILocation(line: 637, column: 40, scope: !1961)
!1961 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 637, column: 9)
!1962 = !DILocation(line: 637, column: 45, scope: !1961)
!1963 = !DILocation(line: 637, column: 55, scope: !1961)
!1964 = !DILocation(line: 637, column: 10, scope: !1961)
!1965 = !DILocation(line: 637, column: 9, scope: !1721)
!1966 = !DILocation(line: 638, column: 9, scope: !1967)
!1967 = distinct !DILexicalBlock(scope: !1961, file: !4, line: 637, column: 65)
!1968 = !DILocation(line: 638, column: 12, scope: !1967)
!1969 = !DILocation(line: 638, column: 16, scope: !1967)
!1970 = !DILocation(line: 639, column: 9, scope: !1967)
!1971 = !DILocation(line: 641, column: 28, scope: !1972)
!1972 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 641, column: 9)
!1973 = !DILocation(line: 641, column: 44, scope: !1972)
!1974 = !DILocation(line: 641, column: 54, scope: !1972)
!1975 = !DILocation(line: 641, column: 59, scope: !1972)
!1976 = !DILocation(line: 641, column: 69, scope: !1972)
!1977 = !DILocation(line: 641, column: 10, scope: !1972)
!1978 = !DILocation(line: 641, column: 9, scope: !1721)
!1979 = !DILocation(line: 642, column: 9, scope: !1980)
!1980 = distinct !DILexicalBlock(scope: !1972, file: !4, line: 641, column: 78)
!1981 = !DILocation(line: 642, column: 12, scope: !1980)
!1982 = !DILocation(line: 642, column: 16, scope: !1980)
!1983 = !DILocation(line: 643, column: 9, scope: !1980)
!1984 = !DILocation(line: 646, column: 10, scope: !1985)
!1985 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 646, column: 9)
!1986 = !DILocation(line: 646, column: 14, scope: !1985)
!1987 = !DILocation(line: 646, column: 17, scope: !1988)
!1988 = !DILexicalBlockFile(scope: !1985, file: !4, discriminator: 1)
!1989 = !DILocation(line: 646, column: 27, scope: !1988)
!1990 = !DILocation(line: 646, column: 32, scope: !1988)
!1991 = !DILocation(line: 646, column: 9, scope: !1988)
!1992 = !DILocation(line: 647, column: 34, scope: !1993)
!1993 = distinct !DILexicalBlock(scope: !1994, file: !4, line: 647, column: 13)
!1994 = distinct !DILexicalBlock(scope: !1985, file: !4, line: 646, column: 44)
!1995 = !DILocation(line: 648, column: 34, scope: !1993)
!1996 = !DILocation(line: 648, column: 44, scope: !1993)
!1997 = !DILocation(line: 648, column: 53, scope: !1993)
!1998 = !DILocation(line: 648, column: 63, scope: !1993)
!1999 = !DILocation(line: 647, column: 14, scope: !1993)
!2000 = !DILocation(line: 647, column: 13, scope: !1994)
!2001 = !DILocation(line: 649, column: 13, scope: !2002)
!2002 = distinct !DILexicalBlock(scope: !1993, file: !4, line: 648, column: 69)
!2003 = !DILocation(line: 649, column: 16, scope: !2002)
!2004 = !DILocation(line: 649, column: 20, scope: !2002)
!2005 = !DILocation(line: 650, column: 13, scope: !2002)
!2006 = !DILocation(line: 652, column: 5, scope: !1994)
!2007 = !DILocation(line: 654, column: 9, scope: !2008)
!2008 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 654, column: 9)
!2009 = !DILocation(line: 654, column: 19, scope: !2008)
!2010 = !DILocation(line: 654, column: 24, scope: !2008)
!2011 = !DILocation(line: 654, column: 9, scope: !1721)
!2012 = !DILocation(line: 655, column: 31, scope: !2013)
!2013 = distinct !DILexicalBlock(scope: !2014, file: !4, line: 655, column: 13)
!2014 = distinct !DILexicalBlock(scope: !2008, file: !4, line: 654, column: 32)
!2015 = !DILocation(line: 655, column: 56, scope: !2013)
!2016 = !DILocation(line: 655, column: 14, scope: !2013)
!2017 = !DILocation(line: 655, column: 13, scope: !2014)
!2018 = !DILocation(line: 656, column: 13, scope: !2019)
!2019 = distinct !DILexicalBlock(scope: !2013, file: !4, line: 655, column: 66)
!2020 = !DILocation(line: 656, column: 16, scope: !2019)
!2021 = !DILocation(line: 656, column: 20, scope: !2019)
!2022 = !DILocation(line: 657, column: 13, scope: !2019)
!2023 = !DILocation(line: 659, column: 5, scope: !2014)
!2024 = !DILocation(line: 660, column: 9, scope: !2025)
!2025 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 660, column: 9)
!2026 = !DILocation(line: 660, column: 19, scope: !2025)
!2027 = !DILocation(line: 660, column: 26, scope: !2025)
!2028 = !DILocation(line: 660, column: 9, scope: !1721)
!2029 = !DILocation(line: 661, column: 9, scope: !2030)
!2030 = distinct !DILexicalBlock(scope: !2025, file: !4, line: 660, column: 34)
!2031 = !DILocation(line: 661, column: 12, scope: !2030)
!2032 = !DILocation(line: 661, column: 16, scope: !2030)
!2033 = !DILocation(line: 662, column: 14, scope: !2034)
!2034 = distinct !DILexicalBlock(scope: !2030, file: !4, line: 662, column: 13)
!2035 = !DILocation(line: 662, column: 13, scope: !2030)
!2036 = !DILocation(line: 663, column: 20, scope: !2037)
!2037 = distinct !DILexicalBlock(scope: !2038, file: !4, line: 663, column: 13)
!2038 = distinct !DILexicalBlock(scope: !2034, file: !4, line: 662, column: 20)
!2039 = !DILocation(line: 663, column: 18, scope: !2037)
!2040 = !DILocation(line: 663, column: 39, scope: !2041)
!2041 = !DILexicalBlockFile(scope: !2042, file: !4, discriminator: 1)
!2042 = distinct !DILexicalBlock(scope: !2037, file: !4, line: 663, column: 13)
!2043 = !DILocation(line: 663, column: 25, scope: !2041)
!2044 = !DILocation(line: 663, column: 35, scope: !2041)
!2045 = !DILocation(line: 663, column: 42, scope: !2041)
!2046 = !DILocation(line: 663, column: 13, scope: !2041)
!2047 = !DILocation(line: 664, column: 39, scope: !2048)
!2048 = distinct !DILexicalBlock(scope: !2049, file: !4, line: 664, column: 21)
!2049 = distinct !DILexicalBlock(scope: !2042, file: !4, line: 663, column: 55)
!2050 = !DILocation(line: 664, column: 74, scope: !2048)
!2051 = !DILocation(line: 664, column: 60, scope: !2048)
!2052 = !DILocation(line: 664, column: 70, scope: !2048)
!2053 = !DILocation(line: 665, column: 57, scope: !2048)
!2054 = !DILocation(line: 665, column: 39, scope: !2048)
!2055 = !DILocation(line: 665, column: 49, scope: !2048)
!2056 = !DILocation(line: 664, column: 22, scope: !2048)
!2057 = !DILocation(line: 664, column: 21, scope: !2049)
!2058 = !DILocation(line: 666, column: 21, scope: !2048)
!2059 = !DILocation(line: 667, column: 13, scope: !2049)
!2060 = !DILocation(line: 663, column: 51, scope: !2061)
!2061 = !DILexicalBlockFile(scope: !2042, file: !4, discriminator: 2)
!2062 = !DILocation(line: 663, column: 13, scope: !2061)
!2063 = distinct !{!2063, !2064}
!2064 = !DILocation(line: 663, column: 13, scope: !2038)
!2065 = !DILocation(line: 668, column: 9, scope: !2038)
!2066 = !DILocation(line: 672, column: 20, scope: !2067)
!2067 = distinct !DILexicalBlock(scope: !2068, file: !4, line: 672, column: 13)
!2068 = distinct !DILexicalBlock(scope: !2034, file: !4, line: 668, column: 16)
!2069 = !DILocation(line: 672, column: 18, scope: !2067)
!2070 = !DILocation(line: 672, column: 39, scope: !2071)
!2071 = !DILexicalBlockFile(scope: !2072, file: !4, discriminator: 1)
!2072 = distinct !DILexicalBlock(scope: !2067, file: !4, line: 672, column: 13)
!2073 = !DILocation(line: 672, column: 25, scope: !2071)
!2074 = !DILocation(line: 672, column: 35, scope: !2071)
!2075 = !DILocation(line: 672, column: 42, scope: !2071)
!2076 = !DILocation(line: 672, column: 13, scope: !2071)
!2077 = !DILocation(line: 673, column: 39, scope: !2078)
!2078 = distinct !DILexicalBlock(scope: !2079, file: !4, line: 673, column: 21)
!2079 = distinct !DILexicalBlock(scope: !2072, file: !4, line: 672, column: 55)
!2080 = !DILocation(line: 673, column: 21, scope: !2078)
!2081 = !DILocation(line: 673, column: 31, scope: !2078)
!2082 = !DILocation(line: 673, column: 42, scope: !2078)
!2083 = !DILocation(line: 673, column: 21, scope: !2079)
!2084 = !DILocation(line: 674, column: 43, scope: !2085)
!2085 = distinct !DILexicalBlock(scope: !2086, file: !4, line: 674, column: 25)
!2086 = distinct !DILexicalBlock(scope: !2078, file: !4, line: 673, column: 47)
!2087 = !DILocation(line: 674, column: 78, scope: !2085)
!2088 = !DILocation(line: 674, column: 64, scope: !2085)
!2089 = !DILocation(line: 674, column: 74, scope: !2085)
!2090 = !DILocation(line: 674, column: 26, scope: !2085)
!2091 = !DILocation(line: 674, column: 25, scope: !2086)
!2092 = !DILocation(line: 675, column: 25, scope: !2085)
!2093 = !DILocation(line: 676, column: 28, scope: !2086)
!2094 = !DILocation(line: 677, column: 17, scope: !2086)
!2095 = !DILocation(line: 678, column: 39, scope: !2096)
!2096 = distinct !DILexicalBlock(scope: !2079, file: !4, line: 678, column: 21)
!2097 = !DILocation(line: 678, column: 21, scope: !2096)
!2098 = !DILocation(line: 678, column: 31, scope: !2096)
!2099 = !DILocation(line: 678, column: 42, scope: !2096)
!2100 = !DILocation(line: 678, column: 21, scope: !2079)
!2101 = !DILocation(line: 679, column: 43, scope: !2102)
!2102 = distinct !DILexicalBlock(scope: !2103, file: !4, line: 679, column: 25)
!2103 = distinct !DILexicalBlock(scope: !2096, file: !4, line: 678, column: 47)
!2104 = !DILocation(line: 680, column: 57, scope: !2102)
!2105 = !DILocation(line: 680, column: 43, scope: !2102)
!2106 = !DILocation(line: 680, column: 53, scope: !2102)
!2107 = !DILocation(line: 680, column: 62, scope: !2102)
!2108 = !DILocation(line: 680, column: 60, scope: !2102)
!2109 = !DILocation(line: 681, column: 61, scope: !2102)
!2110 = !DILocation(line: 681, column: 43, scope: !2102)
!2111 = !DILocation(line: 681, column: 53, scope: !2102)
!2112 = !DILocation(line: 681, column: 64, scope: !2102)
!2113 = !DILocation(line: 679, column: 26, scope: !2102)
!2114 = !DILocation(line: 679, column: 25, scope: !2103)
!2115 = !DILocation(line: 682, column: 25, scope: !2102)
!2116 = !DILocation(line: 683, column: 50, scope: !2103)
!2117 = !DILocation(line: 683, column: 32, scope: !2103)
!2118 = !DILocation(line: 683, column: 42, scope: !2103)
!2119 = !DILocation(line: 683, column: 53, scope: !2103)
!2120 = !DILocation(line: 683, column: 29, scope: !2103)
!2121 = !DILocation(line: 684, column: 17, scope: !2103)
!2122 = !DILocation(line: 685, column: 39, scope: !2123)
!2123 = distinct !DILexicalBlock(scope: !2079, file: !4, line: 685, column: 21)
!2124 = !DILocation(line: 685, column: 21, scope: !2123)
!2125 = !DILocation(line: 685, column: 31, scope: !2123)
!2126 = !DILocation(line: 685, column: 42, scope: !2123)
!2127 = !DILocation(line: 686, column: 21, scope: !2123)
!2128 = !DILocation(line: 686, column: 42, scope: !2129)
!2129 = !DILexicalBlockFile(scope: !2123, file: !4, discriminator: 1)
!2130 = !DILocation(line: 687, column: 56, scope: !2123)
!2131 = !DILocation(line: 687, column: 42, scope: !2123)
!2132 = !DILocation(line: 687, column: 52, scope: !2123)
!2133 = !DILocation(line: 687, column: 61, scope: !2123)
!2134 = !DILocation(line: 687, column: 59, scope: !2123)
!2135 = !DILocation(line: 686, column: 25, scope: !2129)
!2136 = !DILocation(line: 685, column: 21, scope: !2137)
!2137 = !DILexicalBlockFile(scope: !2079, file: !4, discriminator: 1)
!2138 = !DILocation(line: 688, column: 21, scope: !2123)
!2139 = !DILocation(line: 689, column: 13, scope: !2079)
!2140 = !DILocation(line: 672, column: 51, scope: !2141)
!2141 = !DILexicalBlockFile(scope: !2072, file: !4, discriminator: 2)
!2142 = !DILocation(line: 672, column: 13, scope: !2141)
!2143 = distinct !{!2143, !2144}
!2144 = !DILocation(line: 672, column: 13, scope: !2068)
!2145 = !DILocation(line: 691, column: 5, scope: !2030)
!2146 = !DILocation(line: 692, column: 32, scope: !1721)
!2147 = !DILocation(line: 692, column: 5, scope: !1721)
!2148 = !DILocation(line: 693, column: 5, scope: !1721)
!2149 = !DILocation(line: 693, column: 8, scope: !1721)
!2150 = !DILocation(line: 693, column: 12, scope: !1721)
!2151 = !DILocation(line: 694, column: 12, scope: !1721)
!2152 = !DILocation(line: 695, column: 10, scope: !2153)
!2153 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 695, column: 9)
!2154 = !DILocation(line: 695, column: 9, scope: !1721)
!2155 = !DILocation(line: 697, column: 31, scope: !2156)
!2156 = distinct !DILexicalBlock(scope: !2157, file: !4, line: 697, column: 13)
!2157 = distinct !DILexicalBlock(scope: !2153, file: !4, line: 695, column: 16)
!2158 = !DILocation(line: 697, column: 36, scope: !2156)
!2159 = !DILocation(line: 697, column: 42, scope: !2156)
!2160 = !DILocation(line: 697, column: 40, scope: !2156)
!2161 = !DILocation(line: 697, column: 65, scope: !2156)
!2162 = !DILocation(line: 697, column: 69, scope: !2156)
!2163 = !DILocation(line: 697, column: 14, scope: !2156)
!2164 = !DILocation(line: 697, column: 13, scope: !2157)
!2165 = !DILocation(line: 698, column: 13, scope: !2156)
!2166 = !DILocation(line: 699, column: 5, scope: !2157)
!2167 = !DILocation(line: 701, column: 13, scope: !2168)
!2168 = distinct !DILexicalBlock(scope: !2169, file: !4, line: 701, column: 13)
!2169 = distinct !DILexicalBlock(scope: !2153, file: !4, line: 699, column: 12)
!2170 = !DILocation(line: 701, column: 20, scope: !2168)
!2171 = !DILocation(line: 701, column: 13, scope: !2169)
!2172 = !DILocation(line: 702, column: 35, scope: !2173)
!2173 = distinct !DILexicalBlock(scope: !2174, file: !4, line: 702, column: 17)
!2174 = distinct !DILexicalBlock(scope: !2168, file: !4, line: 701, column: 25)
!2175 = !DILocation(line: 702, column: 40, scope: !2173)
!2176 = !DILocation(line: 702, column: 46, scope: !2173)
!2177 = !DILocation(line: 702, column: 44, scope: !2173)
!2178 = !DILocation(line: 702, column: 71, scope: !2173)
!2179 = !DILocation(line: 702, column: 18, scope: !2173)
!2180 = !DILocation(line: 702, column: 17, scope: !2174)
!2181 = !DILocation(line: 703, column: 17, scope: !2173)
!2182 = !DILocation(line: 704, column: 23, scope: !2174)
!2183 = !DILocation(line: 704, column: 20, scope: !2174)
!2184 = !DILocation(line: 705, column: 15, scope: !2174)
!2185 = !DILocation(line: 706, column: 19, scope: !2174)
!2186 = !DILocation(line: 707, column: 9, scope: !2174)
!2187 = !DILocation(line: 708, column: 13, scope: !2188)
!2188 = distinct !DILexicalBlock(scope: !2169, file: !4, line: 708, column: 13)
!2189 = !DILocation(line: 708, column: 20, scope: !2188)
!2190 = !DILocation(line: 708, column: 13, scope: !2169)
!2191 = !DILocation(line: 709, column: 35, scope: !2192)
!2192 = distinct !DILexicalBlock(scope: !2193, file: !4, line: 709, column: 17)
!2193 = distinct !DILexicalBlock(scope: !2188, file: !4, line: 708, column: 25)
!2194 = !DILocation(line: 709, column: 40, scope: !2192)
!2195 = !DILocation(line: 709, column: 46, scope: !2192)
!2196 = !DILocation(line: 709, column: 44, scope: !2192)
!2197 = !DILocation(line: 709, column: 61, scope: !2192)
!2198 = !DILocation(line: 709, column: 59, scope: !2192)
!2199 = !DILocation(line: 710, column: 35, scope: !2192)
!2200 = !DILocation(line: 710, column: 39, scope: !2192)
!2201 = !DILocation(line: 710, column: 46, scope: !2192)
!2202 = !DILocation(line: 709, column: 18, scope: !2192)
!2203 = !DILocation(line: 709, column: 17, scope: !2193)
!2204 = !DILocation(line: 711, column: 17, scope: !2192)
!2205 = !DILocation(line: 712, column: 23, scope: !2193)
!2206 = !DILocation(line: 712, column: 20, scope: !2193)
!2207 = !DILocation(line: 713, column: 19, scope: !2193)
!2208 = !DILocation(line: 713, column: 26, scope: !2193)
!2209 = !DILocation(line: 713, column: 16, scope: !2193)
!2210 = !DILocation(line: 714, column: 20, scope: !2193)
!2211 = !DILocation(line: 715, column: 9, scope: !2193)
!2212 = !DILocation(line: 716, column: 13, scope: !2213)
!2213 = distinct !DILexicalBlock(scope: !2169, file: !4, line: 716, column: 13)
!2214 = !DILocation(line: 716, column: 20, scope: !2213)
!2215 = !DILocation(line: 716, column: 13, scope: !2169)
!2216 = !DILocation(line: 717, column: 35, scope: !2217)
!2217 = distinct !DILexicalBlock(scope: !2218, file: !4, line: 717, column: 17)
!2218 = distinct !DILexicalBlock(scope: !2213, file: !4, line: 716, column: 26)
!2219 = !DILocation(line: 717, column: 40, scope: !2217)
!2220 = !DILocation(line: 717, column: 46, scope: !2217)
!2221 = !DILocation(line: 717, column: 44, scope: !2217)
!2222 = !DILocation(line: 717, column: 61, scope: !2217)
!2223 = !DILocation(line: 717, column: 59, scope: !2217)
!2224 = !DILocation(line: 718, column: 35, scope: !2217)
!2225 = !DILocation(line: 717, column: 18, scope: !2217)
!2226 = !DILocation(line: 717, column: 17, scope: !2218)
!2227 = !DILocation(line: 719, column: 17, scope: !2217)
!2228 = !DILocation(line: 720, column: 23, scope: !2218)
!2229 = !DILocation(line: 720, column: 20, scope: !2218)
!2230 = !DILocation(line: 721, column: 9, scope: !2218)
!2231 = !DILocation(line: 723, column: 29, scope: !2232)
!2232 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 723, column: 9)
!2233 = !DILocation(line: 723, column: 34, scope: !2232)
!2234 = !DILocation(line: 723, column: 40, scope: !2232)
!2235 = !DILocation(line: 723, column: 38, scope: !2232)
!2236 = !DILocation(line: 723, column: 55, scope: !2232)
!2237 = !DILocation(line: 723, column: 53, scope: !2232)
!2238 = !DILocation(line: 723, column: 10, scope: !2232)
!2239 = !DILocation(line: 723, column: 9, scope: !1721)
!2240 = !DILocation(line: 724, column: 9, scope: !2241)
!2241 = distinct !DILexicalBlock(scope: !2232, file: !4, line: 723, column: 74)
!2242 = !DILocation(line: 724, column: 12, scope: !2241)
!2243 = !DILocation(line: 724, column: 16, scope: !2241)
!2244 = !DILocation(line: 725, column: 9, scope: !2241)
!2245 = !DILocation(line: 727, column: 29, scope: !2246)
!2246 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 727, column: 9)
!2247 = !DILocation(line: 727, column: 50, scope: !2246)
!2248 = !DILocation(line: 727, column: 64, scope: !2246)
!2249 = !DILocation(line: 728, column: 29, scope: !2246)
!2250 = !DILocation(line: 728, column: 35, scope: !2246)
!2251 = !DILocation(line: 728, column: 33, scope: !2246)
!2252 = !DILocation(line: 728, column: 49, scope: !2246)
!2253 = !DILocation(line: 728, column: 58, scope: !2246)
!2254 = !DILocation(line: 728, column: 56, scope: !2246)
!2255 = !DILocation(line: 727, column: 10, scope: !2246)
!2256 = !DILocation(line: 727, column: 9, scope: !1721)
!2257 = !DILocation(line: 729, column: 9, scope: !2246)
!2258 = !DILocation(line: 730, column: 9, scope: !2259)
!2259 = distinct !DILexicalBlock(scope: !1721, file: !4, line: 730, column: 9)
!2260 = !DILocation(line: 730, column: 13, scope: !2259)
!2261 = !DILocation(line: 730, column: 16, scope: !2262)
!2262 = !DILexicalBlockFile(scope: !2259, file: !4, discriminator: 1)
!2263 = !DILocation(line: 730, column: 26, scope: !2262)
!2264 = !DILocation(line: 730, column: 9, scope: !2262)
!2265 = !DILocalVariable(name: "rtag", scope: !2266, file: !4, line: 731, type: !2267)
!2266 = distinct !DILexicalBlock(scope: !2259, file: !4, line: 730, column: 32)
!2267 = !DICompositeType(tag: DW_TAG_array_type, baseType: !57, size: 128, align: 8, elements: !2268)
!2268 = !{!2269}
!2269 = !DISubrange(count: 16)
!2270 = !DILocation(line: 731, column: 23, scope: !2266)
!2271 = !DILocation(line: 733, column: 90, scope: !2272)
!2272 = distinct !DILexicalBlock(scope: !2266, file: !4, line: 733, column: 13)
!2273 = !DILocation(line: 733, column: 100, scope: !2272)
!2274 = !DILocation(line: 733, column: 14, scope: !2272)
!2275 = !DILocation(line: 733, column: 13, scope: !2266)
!2276 = !DILocation(line: 734, column: 13, scope: !2277)
!2277 = distinct !DILexicalBlock(scope: !2272, file: !4, line: 733, column: 124)
!2278 = !DILocation(line: 734, column: 16, scope: !2277)
!2279 = !DILocation(line: 734, column: 20, scope: !2277)
!2280 = !DILocation(line: 735, column: 13, scope: !2277)
!2281 = !DILocation(line: 737, column: 34, scope: !2282)
!2282 = distinct !DILexicalBlock(scope: !2266, file: !4, line: 737, column: 13)
!2283 = !DILocation(line: 738, column: 34, scope: !2282)
!2284 = !DILocation(line: 738, column: 44, scope: !2282)
!2285 = !DILocation(line: 738, column: 53, scope: !2282)
!2286 = !DILocation(line: 737, column: 14, scope: !2282)
!2287 = !DILocation(line: 737, column: 13, scope: !2266)
!2288 = !DILocation(line: 739, column: 13, scope: !2289)
!2289 = distinct !DILexicalBlock(scope: !2282, file: !4, line: 738, column: 60)
!2290 = !DILocation(line: 739, column: 16, scope: !2289)
!2291 = !DILocation(line: 739, column: 20, scope: !2289)
!2292 = !DILocation(line: 740, column: 13, scope: !2289)
!2293 = !DILocation(line: 742, column: 33, scope: !2294)
!2294 = distinct !DILexicalBlock(scope: !2266, file: !4, line: 742, column: 13)
!2295 = !DILocation(line: 743, column: 33, scope: !2294)
!2296 = !DILocation(line: 743, column: 43, scope: !2294)
!2297 = !DILocation(line: 743, column: 48, scope: !2294)
!2298 = !DILocation(line: 743, column: 58, scope: !2294)
!2299 = !DILocation(line: 744, column: 33, scope: !2294)
!2300 = !DILocation(line: 744, column: 39, scope: !2294)
!2301 = !DILocation(line: 744, column: 49, scope: !2294)
!2302 = !DILocation(line: 742, column: 14, scope: !2294)
!2303 = !DILocation(line: 742, column: 13, scope: !2266)
!2304 = !DILocation(line: 745, column: 13, scope: !2294)
!2305 = !DILocation(line: 746, column: 5, scope: !2266)
!2306 = !DILocation(line: 747, column: 5, scope: !1721)
!2307 = !DILocation(line: 747, column: 8, scope: !1721)
!2308 = !DILocation(line: 747, column: 12, scope: !1721)
!2309 = !DILocation(line: 748, column: 8, scope: !1721)
!2310 = !DILocation(line: 748, column: 5, scope: !1721)
!2311 = !DILocation(line: 750, column: 17, scope: !1721)
!2312 = !DILocation(line: 750, column: 5, scope: !1721)
!2313 = !DILocation(line: 751, column: 25, scope: !1721)
!2314 = !DILocation(line: 751, column: 5, scope: !1721)
!2315 = !DILocation(line: 752, column: 12, scope: !1721)
!2316 = !DILocation(line: 752, column: 5, scope: !1721)
!2317 = distinct !DISubprogram(name: "memory_err_compare", scope: !4, file: !4, line: 84, type: !2318, isLocal: true, isDefinition: true, scopeLine: 87, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2318 = !DISubroutineType(types: !2319)
!2319 = !{!31, !100, !67, !47, !33, !47, !33}
!2320 = !DILocalVariable(name: "t", arg: 1, scope: !2317, file: !4, line: 84, type: !100)
!2321 = !DILocation(line: 84, column: 41, scope: !2317)
!2322 = !DILocalVariable(name: "err", arg: 2, scope: !2317, file: !4, line: 84, type: !67)
!2323 = !DILocation(line: 84, column: 56, scope: !2317)
!2324 = !DILocalVariable(name: "expected", arg: 3, scope: !2317, file: !4, line: 85, type: !47)
!2325 = !DILocation(line: 85, column: 43, scope: !2317)
!2326 = !DILocalVariable(name: "expected_len", arg: 4, scope: !2317, file: !4, line: 85, type: !33)
!2327 = !DILocation(line: 85, column: 60, scope: !2317)
!2328 = !DILocalVariable(name: "got", arg: 5, scope: !2317, file: !4, line: 86, type: !47)
!2329 = !DILocation(line: 86, column: 43, scope: !2317)
!2330 = !DILocalVariable(name: "got_len", arg: 6, scope: !2317, file: !4, line: 86, type: !33)
!2331 = !DILocation(line: 86, column: 55, scope: !2317)
!2332 = !DILocalVariable(name: "r", scope: !2317, file: !4, line: 88, type: !31)
!2333 = !DILocation(line: 88, column: 9, scope: !2317)
!2334 = !DILocation(line: 90, column: 9, scope: !2335)
!2335 = distinct !DILexicalBlock(scope: !2317, file: !4, line: 90, column: 9)
!2336 = !DILocation(line: 90, column: 12, scope: !2335)
!2337 = !DILocation(line: 90, column: 25, scope: !2335)
!2338 = !DILocation(line: 90, column: 32, scope: !2335)
!2339 = !DILocation(line: 90, column: 42, scope: !2340)
!2340 = !DILexicalBlockFile(scope: !2335, file: !4, discriminator: 1)
!2341 = !DILocation(line: 90, column: 45, scope: !2340)
!2342 = !DILocation(line: 90, column: 59, scope: !2340)
!2343 = !DILocation(line: 90, column: 35, scope: !2340)
!2344 = !DILocation(line: 90, column: 64, scope: !2340)
!2345 = !DILocation(line: 90, column: 9, scope: !2340)
!2346 = !DILocation(line: 91, column: 68, scope: !2335)
!2347 = !DILocation(line: 91, column: 78, scope: !2335)
!2348 = !DILocation(line: 91, column: 92, scope: !2335)
!2349 = !DILocation(line: 91, column: 97, scope: !2335)
!2350 = !DILocation(line: 91, column: 14, scope: !2335)
!2351 = !DILocation(line: 91, column: 13, scope: !2335)
!2352 = !DILocation(line: 91, column: 11, scope: !2335)
!2353 = !DILocation(line: 91, column: 9, scope: !2335)
!2354 = !DILocation(line: 93, column: 67, scope: !2335)
!2355 = !DILocation(line: 93, column: 77, scope: !2335)
!2356 = !DILocation(line: 93, column: 91, scope: !2335)
!2357 = !DILocation(line: 93, column: 96, scope: !2335)
!2358 = !DILocation(line: 93, column: 13, scope: !2335)
!2359 = !DILocation(line: 93, column: 11, scope: !2335)
!2360 = !DILocation(line: 94, column: 10, scope: !2361)
!2361 = distinct !DILexicalBlock(scope: !2317, file: !4, line: 94, column: 9)
!2362 = !DILocation(line: 94, column: 9, scope: !2317)
!2363 = !DILocation(line: 95, column: 18, scope: !2361)
!2364 = !DILocation(line: 95, column: 9, scope: !2361)
!2365 = !DILocation(line: 95, column: 12, scope: !2361)
!2366 = !DILocation(line: 95, column: 16, scope: !2361)
!2367 = !DILocation(line: 96, column: 12, scope: !2317)
!2368 = !DILocation(line: 96, column: 5, scope: !2317)
!2369 = distinct !DISubprogram(name: "digest_test_init", scope: !4, file: !4, line: 332, type: !98, isLocal: true, isDefinition: true, scopeLine: 333, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2370 = !DILocalVariable(name: "t", arg: 1, scope: !2369, file: !4, line: 332, type: !100)
!2371 = !DILocation(line: 332, column: 39, scope: !2369)
!2372 = !DILocalVariable(name: "alg", arg: 2, scope: !2369, file: !4, line: 332, type: !67)
!2373 = !DILocation(line: 332, column: 54, scope: !2369)
!2374 = !DILocalVariable(name: "mdat", scope: !2369, file: !4, line: 334, type: !2375)
!2375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2376, size: 64, align: 64)
!2376 = !DIDerivedType(tag: DW_TAG_typedef, name: "DIGEST_DATA", file: !4, line: 330, baseType: !2377)
!2377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "digest_data_st", file: !4, line: 322, size: 256, align: 64, elements: !2378)
!2378 = !{!2379, !2384, !2385, !2386}
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "digest", scope: !2377, file: !4, line: 324, baseType: !2380, size: 64, align: 64)
!2380 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2381, size: 64, align: 64)
!2381 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2382)
!2382 = !DIDerivedType(tag: DW_TAG_typedef, name: "EVP_MD", file: !113, line: 91, baseType: !2383)
!2383 = !DICompositeType(tag: DW_TAG_structure_type, name: "evp_md_st", file: !113, line: 91, flags: DIFlagFwdDecl)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "input", scope: !2377, file: !4, line: 326, baseType: !44, size: 64, align: 64, offset: 64)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !2377, file: !4, line: 328, baseType: !56, size: 64, align: 64, offset: 128)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "output_len", scope: !2377, file: !4, line: 329, baseType: !33, size: 64, align: 64, offset: 192)
!2387 = !DILocation(line: 334, column: 18, scope: !2369)
!2388 = !DILocalVariable(name: "digest", scope: !2369, file: !4, line: 335, type: !2380)
!2389 = !DILocation(line: 335, column: 19, scope: !2369)
!2390 = !DILocation(line: 337, column: 40, scope: !2391)
!2391 = distinct !DILexicalBlock(scope: !2369, file: !4, line: 337, column: 9)
!2392 = !DILocation(line: 337, column: 19, scope: !2391)
!2393 = !DILocation(line: 337, column: 17, scope: !2391)
!2394 = !DILocation(line: 337, column: 46, scope: !2391)
!2395 = !DILocation(line: 337, column: 9, scope: !2369)
!2396 = !DILocation(line: 339, column: 24, scope: !2397)
!2397 = distinct !DILexicalBlock(scope: !2398, file: !4, line: 339, column: 13)
!2398 = distinct !DILexicalBlock(scope: !2391, file: !4, line: 337, column: 54)
!2399 = !DILocation(line: 339, column: 13, scope: !2397)
!2400 = !DILocation(line: 339, column: 29, scope: !2397)
!2401 = !DILocation(line: 339, column: 34, scope: !2397)
!2402 = !DILocation(line: 339, column: 48, scope: !2403)
!2403 = !DILexicalBlockFile(scope: !2397, file: !4, discriminator: 1)
!2404 = !DILocation(line: 339, column: 37, scope: !2403)
!2405 = !DILocation(line: 339, column: 53, scope: !2403)
!2406 = !DILocation(line: 339, column: 13, scope: !2403)
!2407 = !DILocation(line: 340, column: 13, scope: !2408)
!2408 = distinct !DILexicalBlock(scope: !2397, file: !4, line: 339, column: 59)
!2409 = !DILocation(line: 340, column: 16, scope: !2408)
!2410 = !DILocation(line: 340, column: 21, scope: !2408)
!2411 = !DILocation(line: 341, column: 13, scope: !2408)
!2412 = !DILocation(line: 343, column: 9, scope: !2398)
!2413 = !DILocation(line: 345, column: 90, scope: !2414)
!2414 = distinct !DILexicalBlock(scope: !2369, file: !4, line: 345, column: 9)
!2415 = !DILocation(line: 345, column: 88, scope: !2414)
!2416 = !DILocation(line: 345, column: 83, scope: !2414)
!2417 = !DILocation(line: 345, column: 10, scope: !2418)
!2418 = !DILexicalBlockFile(scope: !2414, file: !4, discriminator: 1)
!2419 = !DILocation(line: 345, column: 10, scope: !2414)
!2420 = !DILocation(line: 345, column: 9, scope: !2369)
!2421 = !DILocation(line: 346, column: 9, scope: !2414)
!2422 = !DILocation(line: 347, column: 15, scope: !2369)
!2423 = !DILocation(line: 347, column: 5, scope: !2369)
!2424 = !DILocation(line: 347, column: 8, scope: !2369)
!2425 = !DILocation(line: 347, column: 13, scope: !2369)
!2426 = !DILocation(line: 348, column: 20, scope: !2369)
!2427 = !DILocation(line: 348, column: 5, scope: !2369)
!2428 = !DILocation(line: 348, column: 11, scope: !2369)
!2429 = !DILocation(line: 348, column: 18, scope: !2369)
!2430 = !DILocation(line: 349, column: 5, scope: !2369)
!2431 = !DILocation(line: 350, column: 1, scope: !2369)
!2432 = distinct !DISubprogram(name: "digest_test_cleanup", scope: !4, file: !4, line: 352, type: !146, isLocal: true, isDefinition: true, scopeLine: 353, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2433 = !DILocalVariable(name: "t", arg: 1, scope: !2432, file: !4, line: 352, type: !100)
!2434 = !DILocation(line: 352, column: 43, scope: !2432)
!2435 = !DILocalVariable(name: "mdat", scope: !2432, file: !4, line: 354, type: !2375)
!2436 = !DILocation(line: 354, column: 18, scope: !2432)
!2437 = !DILocation(line: 354, column: 25, scope: !2432)
!2438 = !DILocation(line: 354, column: 28, scope: !2432)
!2439 = !DILocation(line: 356, column: 33, scope: !2432)
!2440 = !DILocation(line: 356, column: 39, scope: !2432)
!2441 = !DILocation(line: 356, column: 5, scope: !2432)
!2442 = !DILocation(line: 357, column: 17, scope: !2432)
!2443 = !DILocation(line: 357, column: 23, scope: !2432)
!2444 = !DILocation(line: 357, column: 5, scope: !2432)
!2445 = !DILocation(line: 358, column: 1, scope: !2432)
!2446 = distinct !DISubprogram(name: "digest_test_parse", scope: !4, file: !4, line: 360, type: !150, isLocal: true, isDefinition: true, scopeLine: 362, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2447 = !DILocalVariable(name: "t", arg: 1, scope: !2446, file: !4, line: 360, type: !100)
!2448 = !DILocation(line: 360, column: 40, scope: !2446)
!2449 = !DILocalVariable(name: "keyword", arg: 2, scope: !2446, file: !4, line: 361, type: !67)
!2450 = !DILocation(line: 361, column: 42, scope: !2446)
!2451 = !DILocalVariable(name: "value", arg: 3, scope: !2446, file: !4, line: 361, type: !67)
!2452 = !DILocation(line: 361, column: 63, scope: !2446)
!2453 = !DILocalVariable(name: "mdata", scope: !2446, file: !4, line: 363, type: !2375)
!2454 = !DILocation(line: 363, column: 18, scope: !2446)
!2455 = !DILocation(line: 363, column: 26, scope: !2446)
!2456 = !DILocation(line: 363, column: 29, scope: !2446)
!2457 = !DILocation(line: 365, column: 16, scope: !2458)
!2458 = distinct !DILexicalBlock(scope: !2446, file: !4, line: 365, column: 9)
!2459 = !DILocation(line: 365, column: 9, scope: !2458)
!2460 = !DILocation(line: 365, column: 34, scope: !2458)
!2461 = !DILocation(line: 365, column: 9, scope: !2446)
!2462 = !DILocation(line: 366, column: 39, scope: !2458)
!2463 = !DILocation(line: 366, column: 47, scope: !2458)
!2464 = !DILocation(line: 366, column: 54, scope: !2458)
!2465 = !DILocation(line: 366, column: 16, scope: !2458)
!2466 = !DILocation(line: 366, column: 9, scope: !2458)
!2467 = !DILocation(line: 367, column: 16, scope: !2468)
!2468 = distinct !DILexicalBlock(scope: !2446, file: !4, line: 367, column: 9)
!2469 = !DILocation(line: 367, column: 9, scope: !2468)
!2470 = !DILocation(line: 367, column: 35, scope: !2468)
!2471 = !DILocation(line: 367, column: 9, scope: !2446)
!2472 = !DILocation(line: 368, column: 26, scope: !2468)
!2473 = !DILocation(line: 368, column: 34, scope: !2468)
!2474 = !DILocation(line: 368, column: 41, scope: !2468)
!2475 = !DILocation(line: 368, column: 50, scope: !2468)
!2476 = !DILocation(line: 368, column: 57, scope: !2468)
!2477 = !DILocation(line: 368, column: 16, scope: !2468)
!2478 = !DILocation(line: 368, column: 9, scope: !2468)
!2479 = !DILocation(line: 369, column: 16, scope: !2480)
!2480 = distinct !DILexicalBlock(scope: !2446, file: !4, line: 369, column: 9)
!2481 = !DILocation(line: 369, column: 9, scope: !2480)
!2482 = !DILocation(line: 369, column: 34, scope: !2480)
!2483 = !DILocation(line: 369, column: 9, scope: !2446)
!2484 = !DILocation(line: 370, column: 42, scope: !2480)
!2485 = !DILocation(line: 370, column: 49, scope: !2480)
!2486 = !DILocation(line: 370, column: 56, scope: !2480)
!2487 = !DILocation(line: 370, column: 16, scope: !2480)
!2488 = !DILocation(line: 370, column: 9, scope: !2480)
!2489 = !DILocation(line: 371, column: 16, scope: !2490)
!2490 = distinct !DILexicalBlock(scope: !2446, file: !4, line: 371, column: 9)
!2491 = !DILocation(line: 371, column: 9, scope: !2490)
!2492 = !DILocation(line: 371, column: 34, scope: !2490)
!2493 = !DILocation(line: 371, column: 9, scope: !2446)
!2494 = !DILocation(line: 372, column: 38, scope: !2490)
!2495 = !DILocation(line: 372, column: 45, scope: !2490)
!2496 = !DILocation(line: 372, column: 52, scope: !2490)
!2497 = !DILocation(line: 372, column: 16, scope: !2490)
!2498 = !DILocation(line: 372, column: 9, scope: !2490)
!2499 = !DILocation(line: 373, column: 5, scope: !2446)
!2500 = !DILocation(line: 374, column: 1, scope: !2446)
!2501 = distinct !DISubprogram(name: "digest_test_run", scope: !4, file: !4, line: 381, type: !154, isLocal: true, isDefinition: true, scopeLine: 382, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2502 = !DILocalVariable(name: "t", arg: 1, scope: !2501, file: !4, line: 381, type: !100)
!2503 = !DILocation(line: 381, column: 38, scope: !2501)
!2504 = !DILocalVariable(name: "expected", scope: !2501, file: !4, line: 383, type: !2375)
!2505 = !DILocation(line: 383, column: 18, scope: !2501)
!2506 = !DILocation(line: 383, column: 29, scope: !2501)
!2507 = !DILocation(line: 383, column: 32, scope: !2501)
!2508 = !DILocalVariable(name: "mctx", scope: !2501, file: !4, line: 384, type: !2509)
!2509 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2510, size: 64, align: 64)
!2510 = !DIDerivedType(tag: DW_TAG_typedef, name: "EVP_MD_CTX", file: !113, line: 92, baseType: !2511)
!2511 = !DICompositeType(tag: DW_TAG_structure_type, name: "evp_md_ctx_st", file: !113, line: 92, flags: DIFlagFwdDecl)
!2512 = !DILocation(line: 384, column: 17, scope: !2501)
!2513 = !DILocalVariable(name: "got", scope: !2501, file: !4, line: 385, type: !56)
!2514 = !DILocation(line: 385, column: 20, scope: !2501)
!2515 = !DILocalVariable(name: "got_len", scope: !2501, file: !4, line: 386, type: !2516)
!2516 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!2517 = !DILocation(line: 386, column: 18, scope: !2501)
!2518 = !DILocation(line: 388, column: 5, scope: !2501)
!2519 = !DILocation(line: 388, column: 8, scope: !2501)
!2520 = !DILocation(line: 388, column: 12, scope: !2501)
!2521 = !DILocation(line: 389, column: 77, scope: !2522)
!2522 = distinct !DILexicalBlock(scope: !2501, file: !4, line: 389, column: 9)
!2523 = !DILocation(line: 389, column: 75, scope: !2522)
!2524 = !DILocation(line: 389, column: 70, scope: !2522)
!2525 = !DILocation(line: 389, column: 10, scope: !2526)
!2526 = !DILexicalBlockFile(scope: !2522, file: !4, discriminator: 1)
!2527 = !DILocation(line: 389, column: 10, scope: !2522)
!2528 = !DILocation(line: 389, column: 9, scope: !2501)
!2529 = !DILocation(line: 390, column: 9, scope: !2522)
!2530 = !DILocation(line: 392, column: 25, scope: !2501)
!2531 = !DILocation(line: 392, column: 35, scope: !2501)
!2532 = !DILocation(line: 392, column: 46, scope: !2501)
!2533 = !DILocation(line: 392, column: 53, scope: !2534)
!2534 = !DILexicalBlockFile(scope: !2501, file: !4, discriminator: 1)
!2535 = !DILocation(line: 392, column: 63, scope: !2534)
!2536 = !DILocation(line: 392, column: 25, scope: !2534)
!2537 = !DILocation(line: 392, column: 25, scope: !2538)
!2538 = !DILexicalBlockFile(scope: !2501, file: !4, discriminator: 2)
!2539 = !DILocation(line: 392, column: 25, scope: !2540)
!2540 = !DILexicalBlockFile(scope: !2501, file: !4, discriminator: 3)
!2541 = !DILocation(line: 392, column: 11, scope: !2540)
!2542 = !DILocation(line: 392, column: 9, scope: !2540)
!2543 = !DILocation(line: 394, column: 50, scope: !2544)
!2544 = distinct !DILexicalBlock(scope: !2501, file: !4, line: 394, column: 9)
!2545 = !DILocation(line: 394, column: 10, scope: !2544)
!2546 = !DILocation(line: 394, column: 9, scope: !2501)
!2547 = !DILocation(line: 395, column: 9, scope: !2544)
!2548 = !DILocation(line: 397, column: 28, scope: !2549)
!2549 = distinct !DILexicalBlock(scope: !2501, file: !4, line: 397, column: 9)
!2550 = !DILocation(line: 397, column: 34, scope: !2549)
!2551 = !DILocation(line: 397, column: 44, scope: !2549)
!2552 = !DILocation(line: 397, column: 10, scope: !2549)
!2553 = !DILocation(line: 397, column: 9, scope: !2501)
!2554 = !DILocation(line: 398, column: 9, scope: !2555)
!2555 = distinct !DILexicalBlock(scope: !2549, file: !4, line: 397, column: 58)
!2556 = !DILocation(line: 398, column: 12, scope: !2555)
!2557 = !DILocation(line: 398, column: 16, scope: !2555)
!2558 = !DILocation(line: 399, column: 9, scope: !2555)
!2559 = !DILocation(line: 401, column: 29, scope: !2560)
!2560 = distinct !DILexicalBlock(scope: !2501, file: !4, line: 401, column: 9)
!2561 = !DILocation(line: 401, column: 39, scope: !2560)
!2562 = !DILocation(line: 401, column: 64, scope: !2560)
!2563 = !DILocation(line: 401, column: 10, scope: !2560)
!2564 = !DILocation(line: 401, column: 9, scope: !2501)
!2565 = !DILocation(line: 402, column: 9, scope: !2566)
!2566 = distinct !DILexicalBlock(scope: !2560, file: !4, line: 401, column: 71)
!2567 = !DILocation(line: 402, column: 12, scope: !2566)
!2568 = !DILocation(line: 402, column: 16, scope: !2566)
!2569 = !DILocation(line: 403, column: 9, scope: !2566)
!2570 = !DILocation(line: 406, column: 22, scope: !2571)
!2571 = distinct !DILexicalBlock(scope: !2501, file: !4, line: 406, column: 9)
!2572 = !DILocation(line: 406, column: 32, scope: !2571)
!2573 = !DILocation(line: 406, column: 9, scope: !2571)
!2574 = !DILocation(line: 406, column: 40, scope: !2571)
!2575 = !DILocation(line: 406, column: 9, scope: !2501)
!2576 = !DILocation(line: 407, column: 19, scope: !2577)
!2577 = distinct !DILexicalBlock(scope: !2571, file: !4, line: 406, column: 50)
!2578 = !DILocation(line: 407, column: 29, scope: !2577)
!2579 = !DILocation(line: 407, column: 17, scope: !2577)
!2580 = !DILocation(line: 408, column: 33, scope: !2581)
!2581 = distinct !DILexicalBlock(scope: !2577, file: !4, line: 408, column: 13)
!2582 = !DILocation(line: 408, column: 39, scope: !2581)
!2583 = !DILocation(line: 408, column: 44, scope: !2581)
!2584 = !DILocation(line: 408, column: 14, scope: !2581)
!2585 = !DILocation(line: 408, column: 13, scope: !2577)
!2586 = !DILocation(line: 409, column: 13, scope: !2587)
!2587 = distinct !DILexicalBlock(scope: !2581, file: !4, line: 408, column: 54)
!2588 = !DILocation(line: 409, column: 16, scope: !2587)
!2589 = !DILocation(line: 409, column: 20, scope: !2587)
!2590 = !DILocation(line: 410, column: 13, scope: !2587)
!2591 = !DILocation(line: 412, column: 5, scope: !2577)
!2592 = !DILocation(line: 413, column: 30, scope: !2593)
!2593 = distinct !DILexicalBlock(scope: !2594, file: !4, line: 413, column: 13)
!2594 = distinct !DILexicalBlock(scope: !2571, file: !4, line: 412, column: 12)
!2595 = !DILocation(line: 413, column: 36, scope: !2593)
!2596 = !DILocation(line: 413, column: 14, scope: !2593)
!2597 = !DILocation(line: 413, column: 13, scope: !2594)
!2598 = !DILocation(line: 414, column: 13, scope: !2599)
!2599 = distinct !DILexicalBlock(scope: !2593, file: !4, line: 413, column: 52)
!2600 = !DILocation(line: 414, column: 16, scope: !2599)
!2601 = !DILocation(line: 414, column: 20, scope: !2599)
!2602 = !DILocation(line: 415, column: 13, scope: !2599)
!2603 = !DILocation(line: 418, column: 81, scope: !2604)
!2604 = distinct !DILexicalBlock(scope: !2501, file: !4, line: 418, column: 9)
!2605 = !DILocation(line: 418, column: 91, scope: !2604)
!2606 = !DILocation(line: 418, column: 103, scope: !2604)
!2607 = !DILocation(line: 418, column: 10, scope: !2604)
!2608 = !DILocation(line: 418, column: 9, scope: !2501)
!2609 = !DILocation(line: 419, column: 9, scope: !2610)
!2610 = distinct !DILexicalBlock(scope: !2604, file: !4, line: 418, column: 113)
!2611 = !DILocation(line: 419, column: 12, scope: !2610)
!2612 = !DILocation(line: 419, column: 16, scope: !2610)
!2613 = !DILocation(line: 420, column: 9, scope: !2610)
!2614 = !DILocation(line: 422, column: 29, scope: !2615)
!2615 = distinct !DILexicalBlock(scope: !2501, file: !4, line: 422, column: 9)
!2616 = !DILocation(line: 423, column: 29, scope: !2615)
!2617 = !DILocation(line: 423, column: 39, scope: !2615)
!2618 = !DILocation(line: 423, column: 47, scope: !2615)
!2619 = !DILocation(line: 423, column: 57, scope: !2615)
!2620 = !DILocation(line: 424, column: 29, scope: !2615)
!2621 = !DILocation(line: 424, column: 34, scope: !2615)
!2622 = !DILocation(line: 422, column: 10, scope: !2615)
!2623 = !DILocation(line: 422, column: 9, scope: !2501)
!2624 = !DILocation(line: 425, column: 9, scope: !2615)
!2625 = !DILocation(line: 427, column: 5, scope: !2501)
!2626 = !DILocation(line: 427, column: 8, scope: !2501)
!2627 = !DILocation(line: 427, column: 12, scope: !2501)
!2628 = !DILocation(line: 430, column: 17, scope: !2501)
!2629 = !DILocation(line: 430, column: 5, scope: !2501)
!2630 = !DILocation(line: 431, column: 21, scope: !2501)
!2631 = !DILocation(line: 431, column: 5, scope: !2501)
!2632 = !DILocation(line: 432, column: 5, scope: !2501)
!2633 = distinct !DISubprogram(name: "sk_EVP_TEST_BUFFER_pop_free", scope: !46, file: !46, line: 11, type: !2634, isLocal: true, isDefinition: true, scopeLine: 11, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2634 = !DISubroutineType(types: !2635)
!2635 = !{null, !44, !2636}
!2636 = !DIDerivedType(tag: DW_TAG_typedef, name: "sk_EVP_TEST_BUFFER_freefunc", file: !46, line: 11, baseType: !2637)
!2637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2638, size: 64, align: 64)
!2638 = !DISubroutineType(types: !2639)
!2639 = !{null, !51}
!2640 = !DILocalVariable(name: "sk", arg: 1, scope: !2633, file: !46, line: 11, type: !44)
!2641 = !DILocation(line: 11, column: 3073, scope: !2633)
!2642 = !DILocalVariable(name: "freefunc", arg: 2, scope: !2633, file: !46, line: 11, type: !2636)
!2643 = !DILocation(line: 11, column: 3105, scope: !2633)
!2644 = !DILocation(line: 11, column: 3154, scope: !2633)
!2645 = !DILocation(line: 11, column: 3137, scope: !2633)
!2646 = !DILocation(line: 11, column: 3179, scope: !2633)
!2647 = !DILocation(line: 11, column: 3158, scope: !2633)
!2648 = !DILocation(line: 11, column: 3117, scope: !2633)
!2649 = !DILocation(line: 11, column: 3190, scope: !2633)
!2650 = distinct !DISubprogram(name: "evp_test_buffer_free", scope: !4, file: !4, line: 110, type: !2638, isLocal: true, isDefinition: true, scopeLine: 111, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2651 = !DILocalVariable(name: "db", arg: 1, scope: !2650, file: !4, line: 110, type: !51)
!2652 = !DILocation(line: 110, column: 51, scope: !2650)
!2653 = !DILocation(line: 112, column: 9, scope: !2654)
!2654 = distinct !DILexicalBlock(scope: !2650, file: !4, line: 112, column: 9)
!2655 = !DILocation(line: 112, column: 12, scope: !2654)
!2656 = !DILocation(line: 112, column: 9, scope: !2650)
!2657 = !DILocation(line: 113, column: 21, scope: !2658)
!2658 = distinct !DILexicalBlock(scope: !2654, file: !4, line: 112, column: 20)
!2659 = !DILocation(line: 113, column: 25, scope: !2658)
!2660 = !DILocation(line: 113, column: 9, scope: !2658)
!2661 = !DILocation(line: 114, column: 21, scope: !2658)
!2662 = !DILocation(line: 114, column: 9, scope: !2658)
!2663 = !DILocation(line: 115, column: 5, scope: !2658)
!2664 = !DILocation(line: 116, column: 1, scope: !2650)
!2665 = distinct !DISubprogram(name: "evp_test_buffer_append", scope: !4, file: !4, line: 121, type: !2666, isLocal: true, isDefinition: true, scopeLine: 123, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2666 = !DISubroutineType(types: !2667)
!2667 = !{!31, !67, !2668}
!2668 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !44, size: 64, align: 64)
!2669 = !DILocalVariable(name: "value", arg: 1, scope: !2665, file: !4, line: 121, type: !67)
!2670 = !DILocation(line: 121, column: 47, scope: !2665)
!2671 = !DILocalVariable(name: "sk", arg: 2, scope: !2665, file: !4, line: 122, type: !2668)
!2672 = !DILocation(line: 122, column: 69, scope: !2665)
!2673 = !DILocalVariable(name: "db", scope: !2665, file: !4, line: 124, type: !51)
!2674 = !DILocation(line: 124, column: 22, scope: !2665)
!2675 = !DILocation(line: 126, column: 84, scope: !2676)
!2676 = distinct !DILexicalBlock(scope: !2665, file: !4, line: 126, column: 9)
!2677 = !DILocation(line: 126, column: 82, scope: !2676)
!2678 = !DILocation(line: 126, column: 79, scope: !2676)
!2679 = !DILocation(line: 126, column: 10, scope: !2680)
!2680 = !DILexicalBlockFile(scope: !2676, file: !4, discriminator: 1)
!2681 = !DILocation(line: 126, column: 10, scope: !2676)
!2682 = !DILocation(line: 126, column: 9, scope: !2665)
!2683 = !DILocation(line: 127, column: 9, scope: !2676)
!2684 = !DILocation(line: 129, column: 20, scope: !2685)
!2685 = distinct !DILexicalBlock(scope: !2665, file: !4, line: 129, column: 9)
!2686 = !DILocation(line: 129, column: 28, scope: !2685)
!2687 = !DILocation(line: 129, column: 32, scope: !2685)
!2688 = !DILocation(line: 129, column: 38, scope: !2685)
!2689 = !DILocation(line: 129, column: 42, scope: !2685)
!2690 = !DILocation(line: 129, column: 10, scope: !2685)
!2691 = !DILocation(line: 129, column: 9, scope: !2665)
!2692 = !DILocation(line: 130, column: 9, scope: !2685)
!2693 = !DILocation(line: 131, column: 5, scope: !2665)
!2694 = !DILocation(line: 131, column: 9, scope: !2665)
!2695 = !DILocation(line: 131, column: 15, scope: !2665)
!2696 = !DILocation(line: 132, column: 5, scope: !2665)
!2697 = !DILocation(line: 132, column: 9, scope: !2665)
!2698 = !DILocation(line: 132, column: 19, scope: !2665)
!2699 = !DILocation(line: 134, column: 10, scope: !2700)
!2700 = distinct !DILexicalBlock(scope: !2665, file: !4, line: 134, column: 9)
!2701 = !DILocation(line: 134, column: 9, scope: !2700)
!2702 = !DILocation(line: 134, column: 13, scope: !2700)
!2703 = !DILocation(line: 134, column: 20, scope: !2700)
!2704 = !DILocation(line: 134, column: 102, scope: !2705)
!2705 = !DILexicalBlockFile(scope: !2700, file: !4, discriminator: 1)
!2706 = !DILocation(line: 134, column: 97, scope: !2705)
!2707 = !DILocation(line: 134, column: 100, scope: !2705)
!2708 = !DILocation(line: 134, column: 96, scope: !2705)
!2709 = !DILocation(line: 134, column: 24, scope: !2710)
!2710 = !DILexicalBlockFile(scope: !2705, file: !4, discriminator: 2)
!2711 = !DILocation(line: 134, column: 24, scope: !2705)
!2712 = !DILocation(line: 134, column: 9, scope: !2705)
!2713 = !DILocation(line: 135, column: 9, scope: !2700)
!2714 = !DILocation(line: 136, column: 35, scope: !2715)
!2715 = distinct !DILexicalBlock(scope: !2665, file: !4, line: 136, column: 9)
!2716 = !DILocation(line: 136, column: 34, scope: !2715)
!2717 = !DILocation(line: 136, column: 39, scope: !2715)
!2718 = !DILocation(line: 136, column: 10, scope: !2715)
!2719 = !DILocation(line: 136, column: 9, scope: !2665)
!2720 = !DILocation(line: 137, column: 9, scope: !2715)
!2721 = !DILocation(line: 139, column: 5, scope: !2665)
!2722 = !DILocation(line: 142, column: 26, scope: !2665)
!2723 = !DILocation(line: 142, column: 5, scope: !2665)
!2724 = !DILocation(line: 143, column: 5, scope: !2665)
!2725 = !DILocation(line: 144, column: 1, scope: !2665)
!2726 = distinct !DISubprogram(name: "evp_test_buffer_set_count", scope: !4, file: !4, line: 179, type: !2727, isLocal: true, isDefinition: true, scopeLine: 181, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2727 = !DISubroutineType(types: !2728)
!2728 = !{!31, !67, !44}
!2729 = !DILocalVariable(name: "value", arg: 1, scope: !2726, file: !4, line: 179, type: !67)
!2730 = !DILocation(line: 179, column: 50, scope: !2726)
!2731 = !DILocalVariable(name: "sk", arg: 2, scope: !2726, file: !4, line: 180, type: !44)
!2732 = !DILocation(line: 180, column: 71, scope: !2726)
!2733 = !DILocalVariable(name: "db", scope: !2726, file: !4, line: 182, type: !51)
!2734 = !DILocation(line: 182, column: 22, scope: !2726)
!2735 = !DILocalVariable(name: "count", scope: !2726, file: !4, line: 183, type: !31)
!2736 = !DILocation(line: 183, column: 9, scope: !2726)
!2737 = !DILocation(line: 183, column: 22, scope: !2726)
!2738 = !DILocation(line: 183, column: 17, scope: !2726)
!2739 = !DILocation(line: 185, column: 9, scope: !2740)
!2740 = distinct !DILexicalBlock(scope: !2726, file: !4, line: 185, column: 9)
!2741 = !DILocation(line: 185, column: 15, scope: !2740)
!2742 = !DILocation(line: 185, column: 9, scope: !2726)
!2743 = !DILocation(line: 186, column: 9, scope: !2740)
!2744 = !DILocation(line: 188, column: 9, scope: !2745)
!2745 = distinct !DILexicalBlock(scope: !2726, file: !4, line: 188, column: 9)
!2746 = !DILocation(line: 188, column: 12, scope: !2745)
!2747 = !DILocation(line: 188, column: 19, scope: !2745)
!2748 = !DILocation(line: 188, column: 45, scope: !2749)
!2749 = !DILexicalBlockFile(scope: !2745, file: !4, discriminator: 1)
!2750 = !DILocation(line: 188, column: 22, scope: !2749)
!2751 = !DILocation(line: 188, column: 49, scope: !2749)
!2752 = !DILocation(line: 188, column: 9, scope: !2749)
!2753 = !DILocation(line: 189, column: 9, scope: !2745)
!2754 = !DILocation(line: 191, column: 35, scope: !2726)
!2755 = !DILocation(line: 191, column: 62, scope: !2726)
!2756 = !DILocation(line: 191, column: 39, scope: !2726)
!2757 = !DILocation(line: 191, column: 66, scope: !2726)
!2758 = !DILocation(line: 191, column: 10, scope: !2759)
!2759 = !DILexicalBlockFile(scope: !2726, file: !4, discriminator: 1)
!2760 = !DILocation(line: 191, column: 8, scope: !2726)
!2761 = !DILocation(line: 192, column: 9, scope: !2762)
!2762 = distinct !DILexicalBlock(scope: !2726, file: !4, line: 192, column: 9)
!2763 = !DILocation(line: 192, column: 13, scope: !2762)
!2764 = !DILocation(line: 192, column: 23, scope: !2762)
!2765 = !DILocation(line: 192, column: 9, scope: !2726)
!2766 = !DILocation(line: 193, column: 9, scope: !2762)
!2767 = !DILocation(line: 195, column: 25, scope: !2726)
!2768 = !DILocation(line: 195, column: 17, scope: !2726)
!2769 = !DILocation(line: 195, column: 5, scope: !2726)
!2770 = !DILocation(line: 195, column: 9, scope: !2726)
!2771 = !DILocation(line: 195, column: 15, scope: !2726)
!2772 = !DILocation(line: 196, column: 5, scope: !2726)
!2773 = !DILocation(line: 196, column: 9, scope: !2726)
!2774 = !DILocation(line: 196, column: 19, scope: !2726)
!2775 = !DILocation(line: 197, column: 5, scope: !2726)
!2776 = !DILocation(line: 198, column: 1, scope: !2726)
!2777 = distinct !DISubprogram(name: "evp_test_buffer_ncopy", scope: !4, file: !4, line: 149, type: !2727, isLocal: true, isDefinition: true, scopeLine: 151, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2778 = !DILocalVariable(name: "value", arg: 1, scope: !2777, file: !4, line: 149, type: !67)
!2779 = !DILocation(line: 149, column: 46, scope: !2777)
!2780 = !DILocalVariable(name: "sk", arg: 2, scope: !2777, file: !4, line: 150, type: !44)
!2781 = !DILocation(line: 150, column: 67, scope: !2777)
!2782 = !DILocalVariable(name: "db", scope: !2777, file: !4, line: 152, type: !51)
!2783 = !DILocation(line: 152, column: 22, scope: !2777)
!2784 = !DILocalVariable(name: "tbuf", scope: !2777, file: !4, line: 153, type: !56)
!2785 = !DILocation(line: 153, column: 20, scope: !2777)
!2786 = !DILocalVariable(name: "p", scope: !2777, file: !4, line: 153, type: !56)
!2787 = !DILocation(line: 153, column: 27, scope: !2777)
!2788 = !DILocalVariable(name: "tbuflen", scope: !2777, file: !4, line: 154, type: !33)
!2789 = !DILocation(line: 154, column: 12, scope: !2777)
!2790 = !DILocalVariable(name: "ncopy", scope: !2777, file: !4, line: 155, type: !31)
!2791 = !DILocation(line: 155, column: 9, scope: !2777)
!2792 = !DILocation(line: 155, column: 22, scope: !2777)
!2793 = !DILocation(line: 155, column: 17, scope: !2777)
!2794 = !DILocalVariable(name: "i", scope: !2777, file: !4, line: 156, type: !31)
!2795 = !DILocation(line: 156, column: 9, scope: !2777)
!2796 = !DILocation(line: 158, column: 9, scope: !2797)
!2797 = distinct !DILexicalBlock(scope: !2777, file: !4, line: 158, column: 9)
!2798 = !DILocation(line: 158, column: 15, scope: !2797)
!2799 = !DILocation(line: 158, column: 9, scope: !2777)
!2800 = !DILocation(line: 159, column: 9, scope: !2797)
!2801 = !DILocation(line: 160, column: 9, scope: !2802)
!2802 = distinct !DILexicalBlock(scope: !2777, file: !4, line: 160, column: 9)
!2803 = !DILocation(line: 160, column: 12, scope: !2802)
!2804 = !DILocation(line: 160, column: 19, scope: !2802)
!2805 = !DILocation(line: 160, column: 45, scope: !2806)
!2806 = !DILexicalBlockFile(scope: !2802, file: !4, discriminator: 1)
!2807 = !DILocation(line: 160, column: 22, scope: !2806)
!2808 = !DILocation(line: 160, column: 49, scope: !2806)
!2809 = !DILocation(line: 160, column: 9, scope: !2806)
!2810 = !DILocation(line: 161, column: 9, scope: !2802)
!2811 = !DILocation(line: 162, column: 35, scope: !2777)
!2812 = !DILocation(line: 162, column: 62, scope: !2777)
!2813 = !DILocation(line: 162, column: 39, scope: !2777)
!2814 = !DILocation(line: 162, column: 66, scope: !2777)
!2815 = !DILocation(line: 162, column: 10, scope: !2816)
!2816 = !DILexicalBlockFile(scope: !2777, file: !4, discriminator: 1)
!2817 = !DILocation(line: 162, column: 8, scope: !2777)
!2818 = !DILocation(line: 164, column: 15, scope: !2777)
!2819 = !DILocation(line: 164, column: 19, scope: !2777)
!2820 = !DILocation(line: 164, column: 28, scope: !2777)
!2821 = !DILocation(line: 164, column: 26, scope: !2777)
!2822 = !DILocation(line: 164, column: 13, scope: !2777)
!2823 = !DILocation(line: 165, column: 98, scope: !2824)
!2824 = distinct !DILexicalBlock(scope: !2777, file: !4, line: 165, column: 9)
!2825 = !DILocation(line: 165, column: 84, scope: !2824)
!2826 = !DILocation(line: 165, column: 82, scope: !2824)
!2827 = !DILocation(line: 165, column: 10, scope: !2828)
!2828 = !DILexicalBlockFile(scope: !2824, file: !4, discriminator: 1)
!2829 = !DILocation(line: 165, column: 10, scope: !2824)
!2830 = !DILocation(line: 165, column: 9, scope: !2777)
!2831 = !DILocation(line: 166, column: 9, scope: !2824)
!2832 = !DILocation(line: 167, column: 12, scope: !2833)
!2833 = distinct !DILexicalBlock(scope: !2777, file: !4, line: 167, column: 5)
!2834 = !DILocation(line: 167, column: 21, scope: !2833)
!2835 = !DILocation(line: 167, column: 19, scope: !2833)
!2836 = !DILocation(line: 167, column: 10, scope: !2833)
!2837 = !DILocation(line: 167, column: 27, scope: !2838)
!2838 = !DILexicalBlockFile(scope: !2839, file: !4, discriminator: 1)
!2839 = distinct !DILexicalBlock(scope: !2833, file: !4, line: 167, column: 5)
!2840 = !DILocation(line: 167, column: 31, scope: !2838)
!2841 = !DILocation(line: 167, column: 29, scope: !2838)
!2842 = !DILocation(line: 167, column: 5, scope: !2838)
!2843 = !DILocation(line: 168, column: 16, scope: !2839)
!2844 = !DILocation(line: 168, column: 19, scope: !2839)
!2845 = !DILocation(line: 168, column: 23, scope: !2839)
!2846 = !DILocation(line: 168, column: 28, scope: !2839)
!2847 = !DILocation(line: 168, column: 32, scope: !2839)
!2848 = !DILocation(line: 168, column: 9, scope: !2839)
!2849 = !DILocation(line: 167, column: 39, scope: !2850)
!2850 = !DILexicalBlockFile(scope: !2839, file: !4, discriminator: 2)
!2851 = !DILocation(line: 167, column: 48, scope: !2850)
!2852 = !DILocation(line: 167, column: 52, scope: !2850)
!2853 = !DILocation(line: 167, column: 45, scope: !2850)
!2854 = !DILocation(line: 167, column: 5, scope: !2850)
!2855 = distinct !{!2855, !2856}
!2856 = !DILocation(line: 167, column: 5, scope: !2777)
!2857 = !DILocation(line: 170, column: 17, scope: !2777)
!2858 = !DILocation(line: 170, column: 21, scope: !2777)
!2859 = !DILocation(line: 170, column: 5, scope: !2777)
!2860 = !DILocation(line: 171, column: 15, scope: !2777)
!2861 = !DILocation(line: 171, column: 5, scope: !2777)
!2862 = !DILocation(line: 171, column: 9, scope: !2777)
!2863 = !DILocation(line: 171, column: 13, scope: !2777)
!2864 = !DILocation(line: 172, column: 18, scope: !2777)
!2865 = !DILocation(line: 172, column: 5, scope: !2777)
!2866 = !DILocation(line: 172, column: 9, scope: !2777)
!2867 = !DILocation(line: 172, column: 16, scope: !2777)
!2868 = !DILocation(line: 173, column: 5, scope: !2777)
!2869 = !DILocation(line: 174, column: 1, scope: !2777)
!2870 = distinct !DISubprogram(name: "sk_EVP_TEST_BUFFER_new_null", scope: !46, file: !46, line: 11, type: !2871, isLocal: true, isDefinition: true, scopeLine: 11, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2871 = !DISubroutineType(types: !2872)
!2872 = !{!44}
!2873 = !DILocation(line: 11, column: 1040, scope: !2870)
!2874 = !DILocation(line: 11, column: 1005, scope: !2870)
!2875 = !DILocation(line: 11, column: 998, scope: !2870)
!2876 = distinct !DISubprogram(name: "sk_EVP_TEST_BUFFER_push", scope: !46, file: !46, line: 11, type: !2877, isLocal: true, isDefinition: true, scopeLine: 11, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2877 = !DISubroutineType(types: !2878)
!2878 = !{!31, !44, !51}
!2879 = !DILocalVariable(name: "sk", arg: 1, scope: !2876, file: !46, line: 11, type: !44)
!2880 = !DILocation(line: 11, column: 2308, scope: !2876)
!2881 = !DILocalVariable(name: "ptr", arg: 2, scope: !2876, file: !46, line: 11, type: !51)
!2882 = !DILocation(line: 11, column: 2329, scope: !2876)
!2883 = !DILocation(line: 11, column: 2376, scope: !2876)
!2884 = !DILocation(line: 11, column: 2359, scope: !2876)
!2885 = !DILocation(line: 11, column: 2394, scope: !2876)
!2886 = !DILocation(line: 11, column: 2380, scope: !2876)
!2887 = !DILocation(line: 11, column: 2343, scope: !2876)
!2888 = !DILocation(line: 11, column: 2336, scope: !2876)
!2889 = distinct !DISubprogram(name: "sk_EVP_TEST_BUFFER_num", scope: !46, file: !46, line: 11, type: !2890, isLocal: true, isDefinition: true, scopeLine: 11, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2890 = !DISubroutineType(types: !2891)
!2891 = !{!31, !2892}
!2892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2893, size: 64, align: 64)
!2893 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !45)
!2894 = !DILocalVariable(name: "sk", arg: 1, scope: !2889, file: !46, line: 11, type: !2892)
!2895 = !DILocation(line: 11, column: 398, scope: !2889)
!2896 = !DILocation(line: 11, column: 449, scope: !2889)
!2897 = !DILocation(line: 11, column: 426, scope: !2889)
!2898 = !DILocation(line: 11, column: 411, scope: !2889)
!2899 = !DILocation(line: 11, column: 404, scope: !2889)
!2900 = distinct !DISubprogram(name: "sk_EVP_TEST_BUFFER_value", scope: !46, file: !46, line: 11, type: !2901, isLocal: true, isDefinition: true, scopeLine: 11, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2901 = !DISubroutineType(types: !2902)
!2902 = !{!51, !2892, !31}
!2903 = !DILocalVariable(name: "sk", arg: 1, scope: !2900, file: !46, line: 11, type: !2892)
!2904 = !DILocation(line: 11, column: 575, scope: !2900)
!2905 = !DILocalVariable(name: "idx", arg: 2, scope: !2900, file: !46, line: 11, type: !31)
!2906 = !DILocation(line: 11, column: 583, scope: !2900)
!2907 = !DILocation(line: 11, column: 656, scope: !2900)
!2908 = !DILocation(line: 11, column: 633, scope: !2900)
!2909 = !DILocation(line: 11, column: 660, scope: !2900)
!2910 = !DILocation(line: 11, column: 616, scope: !2900)
!2911 = !DILocation(line: 11, column: 597, scope: !2900)
!2912 = !DILocation(line: 11, column: 590, scope: !2900)
!2913 = distinct !DISubprogram(name: "evp_test_buffer_do", scope: !4, file: !4, line: 203, type: !2914, isLocal: true, isDefinition: true, scopeLine: 208, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2914 = !DISubroutineType(types: !2915)
!2915 = !{!31, !44, !2916, !32}
!2916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2917, size: 64, align: 64)
!2917 = !DISubroutineType(types: !2918)
!2918 = !{!31, !32, !2919, !33}
!2919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2920, size: 64, align: 64)
!2920 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !57)
!2921 = !DILocalVariable(name: "sk", arg: 1, scope: !2913, file: !4, line: 203, type: !44)
!2922 = !DILocation(line: 203, column: 64, scope: !2913)
!2923 = !DILocalVariable(name: "fn", arg: 2, scope: !2913, file: !4, line: 204, type: !2916)
!2924 = !DILocation(line: 204, column: 37, scope: !2913)
!2925 = !DILocalVariable(name: "ctx", arg: 3, scope: !2913, file: !4, line: 207, type: !32)
!2926 = !DILocation(line: 207, column: 37, scope: !2913)
!2927 = !DILocalVariable(name: "i", scope: !2913, file: !4, line: 209, type: !31)
!2928 = !DILocation(line: 209, column: 9, scope: !2913)
!2929 = !DILocation(line: 211, column: 12, scope: !2930)
!2930 = distinct !DILexicalBlock(scope: !2913, file: !4, line: 211, column: 5)
!2931 = !DILocation(line: 211, column: 10, scope: !2930)
!2932 = !DILocation(line: 211, column: 17, scope: !2933)
!2933 = !DILexicalBlockFile(scope: !2934, file: !4, discriminator: 1)
!2934 = distinct !DILexicalBlock(scope: !2930, file: !4, line: 211, column: 5)
!2935 = !DILocation(line: 211, column: 44, scope: !2933)
!2936 = !DILocation(line: 211, column: 21, scope: !2933)
!2937 = !DILocation(line: 211, column: 19, scope: !2933)
!2938 = !DILocation(line: 211, column: 5, scope: !2933)
!2939 = !DILocalVariable(name: "tb", scope: !2940, file: !4, line: 212, type: !51)
!2940 = distinct !DILexicalBlock(scope: !2934, file: !4, line: 211, column: 54)
!2941 = !DILocation(line: 212, column: 26, scope: !2940)
!2942 = !DILocation(line: 212, column: 56, scope: !2940)
!2943 = !DILocation(line: 212, column: 60, scope: !2940)
!2944 = !DILocation(line: 212, column: 31, scope: !2940)
!2945 = !DILocalVariable(name: "j", scope: !2940, file: !4, line: 213, type: !33)
!2946 = !DILocation(line: 213, column: 16, scope: !2940)
!2947 = !DILocation(line: 215, column: 16, scope: !2948)
!2948 = distinct !DILexicalBlock(scope: !2940, file: !4, line: 215, column: 9)
!2949 = !DILocation(line: 215, column: 14, scope: !2948)
!2950 = !DILocation(line: 215, column: 21, scope: !2951)
!2951 = !DILexicalBlockFile(scope: !2952, file: !4, discriminator: 1)
!2952 = distinct !DILexicalBlock(scope: !2948, file: !4, line: 215, column: 9)
!2953 = !DILocation(line: 215, column: 25, scope: !2951)
!2954 = !DILocation(line: 215, column: 29, scope: !2951)
!2955 = !DILocation(line: 215, column: 23, scope: !2951)
!2956 = !DILocation(line: 215, column: 9, scope: !2951)
!2957 = !DILocation(line: 216, column: 17, scope: !2958)
!2958 = distinct !DILexicalBlock(scope: !2959, file: !4, line: 216, column: 17)
!2959 = distinct !DILexicalBlock(scope: !2952, file: !4, line: 215, column: 41)
!2960 = !DILocation(line: 216, column: 20, scope: !2958)
!2961 = !DILocation(line: 216, column: 25, scope: !2958)
!2962 = !DILocation(line: 216, column: 29, scope: !2958)
!2963 = !DILocation(line: 216, column: 34, scope: !2958)
!2964 = !DILocation(line: 216, column: 38, scope: !2958)
!2965 = !DILocation(line: 216, column: 46, scope: !2958)
!2966 = !DILocation(line: 216, column: 17, scope: !2959)
!2967 = !DILocation(line: 217, column: 17, scope: !2958)
!2968 = !DILocation(line: 218, column: 9, scope: !2959)
!2969 = !DILocation(line: 215, column: 37, scope: !2970)
!2970 = !DILexicalBlockFile(scope: !2952, file: !4, discriminator: 2)
!2971 = !DILocation(line: 215, column: 9, scope: !2970)
!2972 = distinct !{!2972, !2973}
!2973 = !DILocation(line: 215, column: 9, scope: !2940)
!2974 = !DILocation(line: 219, column: 5, scope: !2940)
!2975 = !DILocation(line: 211, column: 50, scope: !2976)
!2976 = !DILexicalBlockFile(scope: !2934, file: !4, discriminator: 2)
!2977 = !DILocation(line: 211, column: 5, scope: !2976)
!2978 = distinct !{!2978, !2979}
!2979 = !DILocation(line: 211, column: 5, scope: !2913)
!2980 = !DILocation(line: 220, column: 5, scope: !2913)
!2981 = !DILocation(line: 221, column: 1, scope: !2913)
!2982 = distinct !DISubprogram(name: "digest_update_fn", scope: !4, file: !4, line: 376, type: !2917, isLocal: true, isDefinition: true, scopeLine: 377, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2983 = !DILocalVariable(name: "ctx", arg: 1, scope: !2982, file: !4, line: 376, type: !32)
!2984 = !DILocation(line: 376, column: 35, scope: !2982)
!2985 = !DILocalVariable(name: "buf", arg: 2, scope: !2982, file: !4, line: 376, type: !2919)
!2986 = !DILocation(line: 376, column: 61, scope: !2982)
!2987 = !DILocalVariable(name: "buflen", arg: 3, scope: !2982, file: !4, line: 376, type: !33)
!2988 = !DILocation(line: 376, column: 73, scope: !2982)
!2989 = !DILocation(line: 378, column: 29, scope: !2982)
!2990 = !DILocation(line: 378, column: 34, scope: !2982)
!2991 = !DILocation(line: 378, column: 39, scope: !2982)
!2992 = !DILocation(line: 378, column: 12, scope: !2982)
!2993 = !DILocation(line: 378, column: 5, scope: !2982)
!2994 = distinct !DISubprogram(name: "digestsign_test_init", scope: !4, file: !4, line: 2401, type: !98, isLocal: true, isDefinition: true, scopeLine: 2402, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!2995 = !DILocalVariable(name: "t", arg: 1, scope: !2994, file: !4, line: 2401, type: !100)
!2996 = !DILocation(line: 2401, column: 43, scope: !2994)
!2997 = !DILocalVariable(name: "alg", arg: 2, scope: !2994, file: !4, line: 2401, type: !67)
!2998 = !DILocation(line: 2401, column: 58, scope: !2994)
!2999 = !DILocation(line: 2403, column: 35, scope: !2994)
!3000 = !DILocation(line: 2403, column: 38, scope: !2994)
!3001 = !DILocation(line: 2403, column: 12, scope: !2994)
!3002 = !DILocation(line: 2403, column: 5, scope: !2994)
!3003 = distinct !DISubprogram(name: "digestsigver_test_cleanup", scope: !4, file: !4, line: 2406, type: !146, isLocal: true, isDefinition: true, scopeLine: 2407, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3004 = !DILocalVariable(name: "t", arg: 1, scope: !3003, file: !4, line: 2406, type: !100)
!3005 = !DILocation(line: 2406, column: 49, scope: !3003)
!3006 = !DILocalVariable(name: "mdata", scope: !3003, file: !4, line: 2408, type: !3007)
!3007 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3008, size: 64, align: 64)
!3008 = !DIDerivedType(tag: DW_TAG_typedef, name: "DIGESTSIGN_DATA", file: !4, line: 2370, baseType: !3009)
!3009 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !4, line: 2359, size: 576, align: 64, elements: !3010)
!3010 = !{!3011, !3012, !3013, !3014, !3015, !3019, !3020, !3021, !3022, !3023}
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "is_verify", scope: !3009, file: !4, line: 2360, baseType: !31, size: 32, align: 32)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "is_oneshot", scope: !3009, file: !4, line: 2361, baseType: !31, size: 32, align: 32, offset: 32)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "md", scope: !3009, file: !4, line: 2362, baseType: !2380, size: 64, align: 64, offset: 64)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "ctx", scope: !3009, file: !4, line: 2363, baseType: !2509, size: 64, align: 64, offset: 128)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "pctx", scope: !3009, file: !4, line: 2364, baseType: !3016, size: 64, align: 64, offset: 192)
!3016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3017, size: 64, align: 64)
!3017 = !DIDerivedType(tag: DW_TAG_typedef, name: "EVP_PKEY_CTX", file: !113, line: 100, baseType: !3018)
!3018 = !DICompositeType(tag: DW_TAG_structure_type, name: "evp_pkey_ctx_st", file: !113, line: 100, flags: DIFlagFwdDecl)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "input", scope: !3009, file: !4, line: 2365, baseType: !44, size: 64, align: 64, offset: 256)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "osin", scope: !3009, file: !4, line: 2366, baseType: !56, size: 64, align: 64, offset: 320)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "osin_len", scope: !3009, file: !4, line: 2367, baseType: !33, size: 64, align: 64, offset: 384)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !3009, file: !4, line: 2368, baseType: !56, size: 64, align: 64, offset: 448)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "output_len", scope: !3009, file: !4, line: 2369, baseType: !33, size: 64, align: 64, offset: 512)
!3024 = !DILocation(line: 2408, column: 22, scope: !3003)
!3025 = !DILocation(line: 2408, column: 30, scope: !3003)
!3026 = !DILocation(line: 2408, column: 33, scope: !3003)
!3027 = !DILocation(line: 2410, column: 21, scope: !3003)
!3028 = !DILocation(line: 2410, column: 28, scope: !3003)
!3029 = !DILocation(line: 2410, column: 5, scope: !3003)
!3030 = !DILocation(line: 2411, column: 33, scope: !3003)
!3031 = !DILocation(line: 2411, column: 40, scope: !3003)
!3032 = !DILocation(line: 2411, column: 5, scope: !3003)
!3033 = !DILocation(line: 2412, column: 17, scope: !3003)
!3034 = !DILocation(line: 2412, column: 24, scope: !3003)
!3035 = !DILocation(line: 2412, column: 5, scope: !3003)
!3036 = !DILocation(line: 2413, column: 17, scope: !3003)
!3037 = !DILocation(line: 2413, column: 24, scope: !3003)
!3038 = !DILocation(line: 2413, column: 5, scope: !3003)
!3039 = !DILocation(line: 2414, column: 17, scope: !3003)
!3040 = !DILocation(line: 2414, column: 5, scope: !3003)
!3041 = !DILocation(line: 2415, column: 5, scope: !3003)
!3042 = !DILocation(line: 2415, column: 8, scope: !3003)
!3043 = !DILocation(line: 2415, column: 13, scope: !3003)
!3044 = !DILocation(line: 2416, column: 1, scope: !3003)
!3045 = distinct !DISubprogram(name: "digestsigver_test_parse", scope: !4, file: !4, line: 2418, type: !150, isLocal: true, isDefinition: true, scopeLine: 2420, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3046 = !DILocalVariable(name: "t", arg: 1, scope: !3045, file: !4, line: 2418, type: !100)
!3047 = !DILocation(line: 2418, column: 46, scope: !3045)
!3048 = !DILocalVariable(name: "keyword", arg: 2, scope: !3045, file: !4, line: 2419, type: !67)
!3049 = !DILocation(line: 2419, column: 48, scope: !3045)
!3050 = !DILocalVariable(name: "value", arg: 3, scope: !3045, file: !4, line: 2419, type: !67)
!3051 = !DILocation(line: 2419, column: 69, scope: !3045)
!3052 = !DILocalVariable(name: "mdata", scope: !3045, file: !4, line: 2421, type: !3007)
!3053 = !DILocation(line: 2421, column: 22, scope: !3045)
!3054 = !DILocation(line: 2421, column: 30, scope: !3045)
!3055 = !DILocation(line: 2421, column: 33, scope: !3045)
!3056 = !DILocation(line: 2423, column: 16, scope: !3057)
!3057 = distinct !DILexicalBlock(scope: !3045, file: !4, line: 2423, column: 9)
!3058 = !DILocation(line: 2423, column: 9, scope: !3057)
!3059 = !DILocation(line: 2423, column: 32, scope: !3057)
!3060 = !DILocation(line: 2423, column: 9, scope: !3045)
!3061 = !DILocalVariable(name: "pkey", scope: !3062, file: !4, line: 2424, type: !193)
!3062 = distinct !DILexicalBlock(scope: !3057, file: !4, line: 2423, column: 38)
!3063 = !DILocation(line: 2424, column: 19, scope: !3062)
!3064 = !DILocalVariable(name: "rv", scope: !3062, file: !4, line: 2425, type: !31)
!3065 = !DILocation(line: 2425, column: 13, scope: !3062)
!3066 = !DILocation(line: 2427, column: 13, scope: !3067)
!3067 = distinct !DILexicalBlock(scope: !3062, file: !4, line: 2427, column: 13)
!3068 = !DILocation(line: 2427, column: 20, scope: !3067)
!3069 = !DILocation(line: 2427, column: 13, scope: !3062)
!3070 = !DILocation(line: 2428, column: 34, scope: !3067)
!3071 = !DILocation(line: 2428, column: 41, scope: !3067)
!3072 = !DILocation(line: 2428, column: 18, scope: !3067)
!3073 = !DILocation(line: 2428, column: 16, scope: !3067)
!3074 = !DILocation(line: 2428, column: 13, scope: !3067)
!3075 = !DILocation(line: 2429, column: 13, scope: !3076)
!3076 = distinct !DILexicalBlock(scope: !3062, file: !4, line: 2429, column: 13)
!3077 = !DILocation(line: 2429, column: 16, scope: !3076)
!3078 = !DILocation(line: 2429, column: 13, scope: !3062)
!3079 = !DILocation(line: 2430, column: 34, scope: !3076)
!3080 = !DILocation(line: 2430, column: 41, scope: !3076)
!3081 = !DILocation(line: 2430, column: 18, scope: !3076)
!3082 = !DILocation(line: 2430, column: 16, scope: !3076)
!3083 = !DILocation(line: 2430, column: 13, scope: !3076)
!3084 = !DILocation(line: 2431, column: 13, scope: !3085)
!3085 = distinct !DILexicalBlock(scope: !3062, file: !4, line: 2431, column: 13)
!3086 = !DILocation(line: 2431, column: 16, scope: !3085)
!3087 = !DILocation(line: 2431, column: 21, scope: !3085)
!3088 = !DILocation(line: 2431, column: 24, scope: !3089)
!3089 = !DILexicalBlockFile(scope: !3085, file: !4, discriminator: 1)
!3090 = !DILocation(line: 2431, column: 29, scope: !3089)
!3091 = !DILocation(line: 2431, column: 13, scope: !3089)
!3092 = !DILocation(line: 2432, column: 13, scope: !3093)
!3093 = distinct !DILexicalBlock(scope: !3085, file: !4, line: 2431, column: 37)
!3094 = !DILocation(line: 2432, column: 16, scope: !3093)
!3095 = !DILocation(line: 2432, column: 21, scope: !3093)
!3096 = !DILocation(line: 2433, column: 13, scope: !3093)
!3097 = !DILocation(line: 2435, column: 13, scope: !3098)
!3098 = distinct !DILexicalBlock(scope: !3062, file: !4, line: 2435, column: 13)
!3099 = !DILocation(line: 2435, column: 20, scope: !3098)
!3100 = !DILocation(line: 2435, column: 13, scope: !3062)
!3101 = !DILocation(line: 2436, column: 39, scope: !3102)
!3102 = distinct !DILexicalBlock(scope: !3103, file: !4, line: 2436, column: 17)
!3103 = distinct !DILexicalBlock(scope: !3098, file: !4, line: 2435, column: 31)
!3104 = !DILocation(line: 2436, column: 46, scope: !3102)
!3105 = !DILocation(line: 2436, column: 52, scope: !3102)
!3106 = !DILocation(line: 2436, column: 59, scope: !3102)
!3107 = !DILocation(line: 2436, column: 65, scope: !3102)
!3108 = !DILocation(line: 2436, column: 72, scope: !3102)
!3109 = !DILocation(line: 2437, column: 44, scope: !3102)
!3110 = !DILocation(line: 2436, column: 18, scope: !3102)
!3111 = !DILocation(line: 2436, column: 17, scope: !3103)
!3112 = !DILocation(line: 2438, column: 17, scope: !3102)
!3113 = !DILocation(line: 2438, column: 20, scope: !3102)
!3114 = !DILocation(line: 2438, column: 24, scope: !3102)
!3115 = !DILocation(line: 2439, column: 13, scope: !3103)
!3116 = !DILocation(line: 2441, column: 33, scope: !3117)
!3117 = distinct !DILexicalBlock(scope: !3062, file: !4, line: 2441, column: 13)
!3118 = !DILocation(line: 2441, column: 40, scope: !3117)
!3119 = !DILocation(line: 2441, column: 46, scope: !3117)
!3120 = !DILocation(line: 2441, column: 53, scope: !3117)
!3121 = !DILocation(line: 2441, column: 59, scope: !3117)
!3122 = !DILocation(line: 2441, column: 66, scope: !3117)
!3123 = !DILocation(line: 2442, column: 33, scope: !3117)
!3124 = !DILocation(line: 2441, column: 14, scope: !3117)
!3125 = !DILocation(line: 2441, column: 13, scope: !3062)
!3126 = !DILocation(line: 2443, column: 13, scope: !3117)
!3127 = !DILocation(line: 2443, column: 16, scope: !3117)
!3128 = !DILocation(line: 2443, column: 20, scope: !3117)
!3129 = !DILocation(line: 2444, column: 9, scope: !3062)
!3130 = !DILocation(line: 2447, column: 16, scope: !3131)
!3131 = distinct !DILexicalBlock(scope: !3045, file: !4, line: 2447, column: 9)
!3132 = !DILocation(line: 2447, column: 9, scope: !3131)
!3133 = !DILocation(line: 2447, column: 34, scope: !3131)
!3134 = !DILocation(line: 2447, column: 9, scope: !3045)
!3135 = !DILocation(line: 2448, column: 13, scope: !3136)
!3136 = distinct !DILexicalBlock(scope: !3137, file: !4, line: 2448, column: 13)
!3137 = distinct !DILexicalBlock(scope: !3131, file: !4, line: 2447, column: 40)
!3138 = !DILocation(line: 2448, column: 20, scope: !3136)
!3139 = !DILocation(line: 2448, column: 13, scope: !3137)
!3140 = !DILocation(line: 2449, column: 30, scope: !3136)
!3141 = !DILocation(line: 2449, column: 38, scope: !3136)
!3142 = !DILocation(line: 2449, column: 45, scope: !3136)
!3143 = !DILocation(line: 2449, column: 52, scope: !3136)
!3144 = !DILocation(line: 2449, column: 59, scope: !3136)
!3145 = !DILocation(line: 2449, column: 20, scope: !3136)
!3146 = !DILocation(line: 2449, column: 13, scope: !3136)
!3147 = !DILocation(line: 2450, column: 39, scope: !3137)
!3148 = !DILocation(line: 2450, column: 47, scope: !3137)
!3149 = !DILocation(line: 2450, column: 54, scope: !3137)
!3150 = !DILocation(line: 2450, column: 16, scope: !3137)
!3151 = !DILocation(line: 2450, column: 9, scope: !3137)
!3152 = !DILocation(line: 2452, column: 16, scope: !3153)
!3153 = distinct !DILexicalBlock(scope: !3045, file: !4, line: 2452, column: 9)
!3154 = !DILocation(line: 2452, column: 9, scope: !3153)
!3155 = !DILocation(line: 2452, column: 35, scope: !3153)
!3156 = !DILocation(line: 2452, column: 9, scope: !3045)
!3157 = !DILocation(line: 2453, column: 26, scope: !3153)
!3158 = !DILocation(line: 2453, column: 34, scope: !3153)
!3159 = !DILocation(line: 2453, column: 41, scope: !3153)
!3160 = !DILocation(line: 2453, column: 50, scope: !3153)
!3161 = !DILocation(line: 2453, column: 57, scope: !3153)
!3162 = !DILocation(line: 2453, column: 16, scope: !3153)
!3163 = !DILocation(line: 2453, column: 9, scope: !3153)
!3164 = !DILocation(line: 2455, column: 10, scope: !3165)
!3165 = distinct !DILexicalBlock(scope: !3045, file: !4, line: 2455, column: 9)
!3166 = !DILocation(line: 2455, column: 17, scope: !3165)
!3167 = !DILocation(line: 2455, column: 9, scope: !3045)
!3168 = !DILocation(line: 2456, column: 20, scope: !3169)
!3169 = distinct !DILexicalBlock(scope: !3170, file: !4, line: 2456, column: 13)
!3170 = distinct !DILexicalBlock(scope: !3165, file: !4, line: 2455, column: 29)
!3171 = !DILocation(line: 2456, column: 13, scope: !3169)
!3172 = !DILocation(line: 2456, column: 38, scope: !3169)
!3173 = !DILocation(line: 2456, column: 13, scope: !3170)
!3174 = !DILocation(line: 2457, column: 46, scope: !3169)
!3175 = !DILocation(line: 2457, column: 53, scope: !3169)
!3176 = !DILocation(line: 2457, column: 60, scope: !3169)
!3177 = !DILocation(line: 2457, column: 20, scope: !3169)
!3178 = !DILocation(line: 2457, column: 13, scope: !3169)
!3179 = !DILocation(line: 2458, column: 20, scope: !3180)
!3180 = distinct !DILexicalBlock(scope: !3170, file: !4, line: 2458, column: 13)
!3181 = !DILocation(line: 2458, column: 13, scope: !3180)
!3182 = !DILocation(line: 2458, column: 38, scope: !3180)
!3183 = !DILocation(line: 2458, column: 13, scope: !3170)
!3184 = !DILocation(line: 2459, column: 42, scope: !3180)
!3185 = !DILocation(line: 2459, column: 49, scope: !3180)
!3186 = !DILocation(line: 2459, column: 56, scope: !3180)
!3187 = !DILocation(line: 2459, column: 20, scope: !3180)
!3188 = !DILocation(line: 2459, column: 13, scope: !3180)
!3189 = !DILocation(line: 2460, column: 5, scope: !3170)
!3190 = !DILocation(line: 2461, column: 16, scope: !3191)
!3191 = distinct !DILexicalBlock(scope: !3045, file: !4, line: 2461, column: 9)
!3192 = !DILocation(line: 2461, column: 9, scope: !3191)
!3193 = !DILocation(line: 2461, column: 33, scope: !3191)
!3194 = !DILocation(line: 2461, column: 9, scope: !3045)
!3195 = !DILocation(line: 2462, column: 13, scope: !3196)
!3196 = distinct !DILexicalBlock(scope: !3197, file: !4, line: 2462, column: 13)
!3197 = distinct !DILexicalBlock(scope: !3191, file: !4, line: 2461, column: 39)
!3198 = !DILocation(line: 2462, column: 20, scope: !3196)
!3199 = !DILocation(line: 2462, column: 25, scope: !3196)
!3200 = !DILocation(line: 2462, column: 13, scope: !3197)
!3201 = !DILocation(line: 2463, column: 13, scope: !3196)
!3202 = !DILocation(line: 2464, column: 31, scope: !3197)
!3203 = !DILocation(line: 2464, column: 34, scope: !3197)
!3204 = !DILocation(line: 2464, column: 41, scope: !3197)
!3205 = !DILocation(line: 2464, column: 47, scope: !3197)
!3206 = !DILocation(line: 2464, column: 16, scope: !3197)
!3207 = !DILocation(line: 2464, column: 9, scope: !3197)
!3208 = !DILocation(line: 2466, column: 5, scope: !3045)
!3209 = !DILocation(line: 2467, column: 1, scope: !3045)
!3210 = distinct !DISubprogram(name: "digestsign_test_run", scope: !4, file: !4, line: 2475, type: !154, isLocal: true, isDefinition: true, scopeLine: 2476, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3211 = !DILocalVariable(name: "t", arg: 1, scope: !3210, file: !4, line: 2475, type: !100)
!3212 = !DILocation(line: 2475, column: 42, scope: !3210)
!3213 = !DILocalVariable(name: "expected", scope: !3210, file: !4, line: 2477, type: !3007)
!3214 = !DILocation(line: 2477, column: 22, scope: !3210)
!3215 = !DILocation(line: 2477, column: 33, scope: !3210)
!3216 = !DILocation(line: 2477, column: 36, scope: !3210)
!3217 = !DILocalVariable(name: "got", scope: !3210, file: !4, line: 2478, type: !56)
!3218 = !DILocation(line: 2478, column: 20, scope: !3210)
!3219 = !DILocalVariable(name: "got_len", scope: !3210, file: !4, line: 2479, type: !33)
!3220 = !DILocation(line: 2479, column: 12, scope: !3210)
!3221 = !DILocation(line: 2481, column: 29, scope: !3222)
!3222 = distinct !DILexicalBlock(scope: !3210, file: !4, line: 2481, column: 9)
!3223 = !DILocation(line: 2481, column: 39, scope: !3222)
!3224 = !DILocation(line: 2482, column: 29, scope: !3222)
!3225 = !DILocation(line: 2482, column: 39, scope: !3222)
!3226 = !DILocation(line: 2481, column: 10, scope: !3222)
!3227 = !DILocation(line: 2481, column: 9, scope: !3210)
!3228 = !DILocation(line: 2483, column: 9, scope: !3229)
!3229 = distinct !DILexicalBlock(scope: !3222, file: !4, line: 2482, column: 45)
!3230 = !DILocation(line: 2483, column: 12, scope: !3229)
!3231 = !DILocation(line: 2483, column: 16, scope: !3229)
!3232 = !DILocation(line: 2484, column: 9, scope: !3229)
!3233 = !DILocation(line: 2487, column: 30, scope: !3234)
!3234 = distinct !DILexicalBlock(scope: !3210, file: !4, line: 2487, column: 9)
!3235 = !DILocation(line: 2487, column: 40, scope: !3234)
!3236 = !DILocation(line: 2487, column: 10, scope: !3234)
!3237 = !DILocation(line: 2487, column: 9, scope: !3210)
!3238 = !DILocation(line: 2488, column: 9, scope: !3239)
!3239 = distinct !DILexicalBlock(scope: !3234, file: !4, line: 2487, column: 61)
!3240 = !DILocation(line: 2488, column: 12, scope: !3239)
!3241 = !DILocation(line: 2488, column: 16, scope: !3239)
!3242 = !DILocation(line: 2489, column: 9, scope: !3239)
!3243 = !DILocation(line: 2491, column: 97, scope: !3244)
!3244 = distinct !DILexicalBlock(scope: !3210, file: !4, line: 2491, column: 9)
!3245 = !DILocation(line: 2491, column: 83, scope: !3244)
!3246 = !DILocation(line: 2491, column: 81, scope: !3244)
!3247 = !DILocation(line: 2491, column: 10, scope: !3248)
!3248 = !DILexicalBlockFile(scope: !3244, file: !4, discriminator: 1)
!3249 = !DILocation(line: 2491, column: 10, scope: !3244)
!3250 = !DILocation(line: 2491, column: 9, scope: !3210)
!3251 = !DILocation(line: 2492, column: 9, scope: !3252)
!3252 = distinct !DILexicalBlock(scope: !3244, file: !4, line: 2491, column: 133)
!3253 = !DILocation(line: 2492, column: 12, scope: !3252)
!3254 = !DILocation(line: 2492, column: 16, scope: !3252)
!3255 = !DILocation(line: 2493, column: 9, scope: !3252)
!3256 = !DILocation(line: 2495, column: 30, scope: !3257)
!3257 = distinct !DILexicalBlock(scope: !3210, file: !4, line: 2495, column: 9)
!3258 = !DILocation(line: 2495, column: 40, scope: !3257)
!3259 = !DILocation(line: 2495, column: 45, scope: !3257)
!3260 = !DILocation(line: 2495, column: 10, scope: !3257)
!3261 = !DILocation(line: 2495, column: 9, scope: !3210)
!3262 = !DILocation(line: 2496, column: 9, scope: !3263)
!3263 = distinct !DILexicalBlock(scope: !3257, file: !4, line: 2495, column: 61)
!3264 = !DILocation(line: 2496, column: 12, scope: !3263)
!3265 = !DILocation(line: 2496, column: 16, scope: !3263)
!3266 = !DILocation(line: 2497, column: 9, scope: !3263)
!3267 = !DILocation(line: 2499, column: 29, scope: !3268)
!3268 = distinct !DILexicalBlock(scope: !3210, file: !4, line: 2499, column: 9)
!3269 = !DILocation(line: 2500, column: 29, scope: !3268)
!3270 = !DILocation(line: 2500, column: 39, scope: !3268)
!3271 = !DILocation(line: 2500, column: 47, scope: !3268)
!3272 = !DILocation(line: 2500, column: 57, scope: !3268)
!3273 = !DILocation(line: 2501, column: 29, scope: !3268)
!3274 = !DILocation(line: 2501, column: 34, scope: !3268)
!3275 = !DILocation(line: 2499, column: 10, scope: !3268)
!3276 = !DILocation(line: 2499, column: 9, scope: !3210)
!3277 = !DILocation(line: 2502, column: 9, scope: !3268)
!3278 = !DILocation(line: 2504, column: 5, scope: !3210)
!3279 = !DILocation(line: 2504, column: 8, scope: !3210)
!3280 = !DILocation(line: 2504, column: 12, scope: !3210)
!3281 = !DILocation(line: 2506, column: 17, scope: !3210)
!3282 = !DILocation(line: 2506, column: 5, scope: !3210)
!3283 = !DILocation(line: 2507, column: 5, scope: !3210)
!3284 = distinct !DISubprogram(name: "digestsigver_test_init", scope: !4, file: !4, line: 2372, type: !3285, isLocal: true, isDefinition: true, scopeLine: 2374, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3285 = !DISubroutineType(types: !3286)
!3286 = !{!31, !100, !67, !31, !31}
!3287 = !DILocalVariable(name: "t", arg: 1, scope: !3284, file: !4, line: 2372, type: !100)
!3288 = !DILocation(line: 2372, column: 45, scope: !3284)
!3289 = !DILocalVariable(name: "alg", arg: 2, scope: !3284, file: !4, line: 2372, type: !67)
!3290 = !DILocation(line: 2372, column: 60, scope: !3284)
!3291 = !DILocalVariable(name: "is_verify", arg: 3, scope: !3284, file: !4, line: 2372, type: !31)
!3292 = !DILocation(line: 2372, column: 69, scope: !3284)
!3293 = !DILocalVariable(name: "is_oneshot", arg: 4, scope: !3284, file: !4, line: 2373, type: !31)
!3294 = !DILocation(line: 2373, column: 39, scope: !3284)
!3295 = !DILocalVariable(name: "md", scope: !3284, file: !4, line: 2375, type: !2380)
!3296 = !DILocation(line: 2375, column: 19, scope: !3284)
!3297 = !DILocalVariable(name: "mdat", scope: !3284, file: !4, line: 2376, type: !3007)
!3298 = !DILocation(line: 2376, column: 22, scope: !3284)
!3299 = !DILocation(line: 2378, column: 16, scope: !3300)
!3300 = distinct !DILexicalBlock(scope: !3284, file: !4, line: 2378, column: 9)
!3301 = !DILocation(line: 2378, column: 9, scope: !3300)
!3302 = !DILocation(line: 2378, column: 29, scope: !3300)
!3303 = !DILocation(line: 2378, column: 9, scope: !3284)
!3304 = !DILocation(line: 2379, column: 40, scope: !3305)
!3305 = distinct !DILexicalBlock(scope: !3306, file: !4, line: 2379, column: 13)
!3306 = distinct !DILexicalBlock(scope: !3300, file: !4, line: 2378, column: 35)
!3307 = !DILocation(line: 2379, column: 19, scope: !3305)
!3308 = !DILocation(line: 2379, column: 17, scope: !3305)
!3309 = !DILocation(line: 2379, column: 46, scope: !3305)
!3310 = !DILocation(line: 2379, column: 13, scope: !3306)
!3311 = !DILocation(line: 2381, column: 28, scope: !3312)
!3312 = distinct !DILexicalBlock(scope: !3313, file: !4, line: 2381, column: 17)
!3313 = distinct !DILexicalBlock(scope: !3305, file: !4, line: 2379, column: 54)
!3314 = !DILocation(line: 2381, column: 17, scope: !3312)
!3315 = !DILocation(line: 2381, column: 33, scope: !3312)
!3316 = !DILocation(line: 2381, column: 38, scope: !3312)
!3317 = !DILocation(line: 2381, column: 52, scope: !3318)
!3318 = !DILexicalBlockFile(scope: !3312, file: !4, discriminator: 1)
!3319 = !DILocation(line: 2381, column: 41, scope: !3318)
!3320 = !DILocation(line: 2381, column: 57, scope: !3318)
!3321 = !DILocation(line: 2381, column: 17, scope: !3318)
!3322 = !DILocation(line: 2382, column: 17, scope: !3323)
!3323 = distinct !DILexicalBlock(scope: !3312, file: !4, line: 2381, column: 63)
!3324 = !DILocation(line: 2382, column: 20, scope: !3323)
!3325 = !DILocation(line: 2382, column: 25, scope: !3323)
!3326 = !DILocation(line: 2383, column: 17, scope: !3323)
!3327 = !DILocation(line: 2385, column: 13, scope: !3313)
!3328 = !DILocation(line: 2387, column: 5, scope: !3306)
!3329 = !DILocation(line: 2388, column: 91, scope: !3330)
!3330 = distinct !DILexicalBlock(scope: !3284, file: !4, line: 2388, column: 9)
!3331 = !DILocation(line: 2388, column: 89, scope: !3330)
!3332 = !DILocation(line: 2388, column: 84, scope: !3330)
!3333 = !DILocation(line: 2388, column: 10, scope: !3334)
!3334 = !DILexicalBlockFile(scope: !3330, file: !4, discriminator: 1)
!3335 = !DILocation(line: 2388, column: 10, scope: !3330)
!3336 = !DILocation(line: 2388, column: 9, scope: !3284)
!3337 = !DILocation(line: 2389, column: 9, scope: !3330)
!3338 = !DILocation(line: 2390, column: 16, scope: !3284)
!3339 = !DILocation(line: 2390, column: 5, scope: !3284)
!3340 = !DILocation(line: 2390, column: 11, scope: !3284)
!3341 = !DILocation(line: 2390, column: 14, scope: !3284)
!3342 = !DILocation(line: 2391, column: 88, scope: !3343)
!3343 = distinct !DILexicalBlock(scope: !3284, file: !4, line: 2391, column: 9)
!3344 = !DILocation(line: 2391, column: 76, scope: !3343)
!3345 = !DILocation(line: 2391, column: 82, scope: !3343)
!3346 = !DILocation(line: 2391, column: 86, scope: !3343)
!3347 = !DILocation(line: 2391, column: 10, scope: !3348)
!3348 = !DILexicalBlockFile(scope: !3343, file: !4, discriminator: 1)
!3349 = !DILocation(line: 2391, column: 10, scope: !3343)
!3350 = !DILocation(line: 2391, column: 9, scope: !3284)
!3351 = !DILocation(line: 2392, column: 21, scope: !3352)
!3352 = distinct !DILexicalBlock(scope: !3343, file: !4, line: 2391, column: 107)
!3353 = !DILocation(line: 2392, column: 9, scope: !3352)
!3354 = !DILocation(line: 2393, column: 9, scope: !3352)
!3355 = !DILocation(line: 2395, column: 23, scope: !3284)
!3356 = !DILocation(line: 2395, column: 5, scope: !3284)
!3357 = !DILocation(line: 2395, column: 11, scope: !3284)
!3358 = !DILocation(line: 2395, column: 21, scope: !3284)
!3359 = !DILocation(line: 2396, column: 24, scope: !3284)
!3360 = !DILocation(line: 2396, column: 5, scope: !3284)
!3361 = !DILocation(line: 2396, column: 11, scope: !3284)
!3362 = !DILocation(line: 2396, column: 22, scope: !3284)
!3363 = !DILocation(line: 2397, column: 15, scope: !3284)
!3364 = !DILocation(line: 2397, column: 5, scope: !3284)
!3365 = !DILocation(line: 2397, column: 8, scope: !3284)
!3366 = !DILocation(line: 2397, column: 13, scope: !3284)
!3367 = !DILocation(line: 2398, column: 5, scope: !3284)
!3368 = !DILocation(line: 2399, column: 1, scope: !3284)
!3369 = distinct !DISubprogram(name: "pkey_test_ctrl", scope: !4, file: !4, line: 1328, type: !3370, isLocal: true, isDefinition: true, scopeLine: 1330, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3370 = !DISubroutineType(types: !3371)
!3371 = !{!31, !100, !3016, !67}
!3372 = !DILocalVariable(name: "t", arg: 1, scope: !3369, file: !4, line: 1328, type: !100)
!3373 = !DILocation(line: 1328, column: 37, scope: !3369)
!3374 = !DILocalVariable(name: "pctx", arg: 2, scope: !3369, file: !4, line: 1328, type: !3016)
!3375 = !DILocation(line: 1328, column: 54, scope: !3369)
!3376 = !DILocalVariable(name: "value", arg: 3, scope: !3369, file: !4, line: 1329, type: !67)
!3377 = !DILocation(line: 1329, column: 39, scope: !3369)
!3378 = !DILocalVariable(name: "rv", scope: !3369, file: !4, line: 1331, type: !31)
!3379 = !DILocation(line: 1331, column: 9, scope: !3369)
!3380 = !DILocalVariable(name: "p", scope: !3369, file: !4, line: 1332, type: !64)
!3381 = !DILocation(line: 1332, column: 11, scope: !3369)
!3382 = !DILocalVariable(name: "tmpval", scope: !3369, file: !4, line: 1332, type: !64)
!3383 = !DILocation(line: 1332, column: 15, scope: !3369)
!3384 = !DILocation(line: 1334, column: 101, scope: !3385)
!3385 = distinct !DILexicalBlock(scope: !3369, file: !4, line: 1334, column: 9)
!3386 = !DILocation(line: 1334, column: 87, scope: !3385)
!3387 = !DILocation(line: 1334, column: 85, scope: !3385)
!3388 = !DILocation(line: 1334, column: 10, scope: !3389)
!3389 = !DILexicalBlockFile(scope: !3385, file: !4, discriminator: 1)
!3390 = !DILocation(line: 1334, column: 10, scope: !3385)
!3391 = !DILocation(line: 1334, column: 9, scope: !3369)
!3392 = !DILocation(line: 1335, column: 9, scope: !3385)
!3393 = !DILocation(line: 1336, column: 16, scope: !3369)
!3394 = !DILocation(line: 1336, column: 9, scope: !3369)
!3395 = !DILocation(line: 1336, column: 7, scope: !3369)
!3396 = !DILocation(line: 1337, column: 9, scope: !3397)
!3397 = distinct !DILexicalBlock(scope: !3369, file: !4, line: 1337, column: 9)
!3398 = !DILocation(line: 1337, column: 11, scope: !3397)
!3399 = !DILocation(line: 1337, column: 9, scope: !3369)
!3400 = !DILocation(line: 1338, column: 11, scope: !3397)
!3401 = !DILocation(line: 1338, column: 14, scope: !3397)
!3402 = !DILocation(line: 1338, column: 9, scope: !3397)
!3403 = !DILocation(line: 1339, column: 32, scope: !3369)
!3404 = !DILocation(line: 1339, column: 38, scope: !3369)
!3405 = !DILocation(line: 1339, column: 46, scope: !3369)
!3406 = !DILocation(line: 1339, column: 10, scope: !3369)
!3407 = !DILocation(line: 1339, column: 8, scope: !3369)
!3408 = !DILocation(line: 1340, column: 9, scope: !3409)
!3409 = distinct !DILexicalBlock(scope: !3369, file: !4, line: 1340, column: 9)
!3410 = !DILocation(line: 1340, column: 12, scope: !3409)
!3411 = !DILocation(line: 1340, column: 9, scope: !3369)
!3412 = !DILocation(line: 1341, column: 9, scope: !3413)
!3413 = distinct !DILexicalBlock(scope: !3409, file: !4, line: 1340, column: 19)
!3414 = !DILocation(line: 1341, column: 12, scope: !3413)
!3415 = !DILocation(line: 1341, column: 16, scope: !3413)
!3416 = !DILocation(line: 1342, column: 12, scope: !3413)
!3417 = !DILocation(line: 1343, column: 5, scope: !3413)
!3418 = !DILocation(line: 1343, column: 16, scope: !3419)
!3419 = !DILexicalBlockFile(scope: !3420, file: !4, discriminator: 1)
!3420 = distinct !DILexicalBlock(scope: !3409, file: !4, line: 1343, column: 16)
!3421 = !DILocation(line: 1343, column: 18, scope: !3419)
!3422 = !DILocation(line: 1343, column: 25, scope: !3419)
!3423 = !DILocation(line: 1343, column: 28, scope: !3424)
!3424 = !DILexicalBlockFile(scope: !3420, file: !4, discriminator: 2)
!3425 = !DILocation(line: 1343, column: 31, scope: !3424)
!3426 = !DILocation(line: 1343, column: 16, scope: !3424)
!3427 = !DILocalVariable(name: "nid", scope: !3428, file: !4, line: 1345, type: !31)
!3428 = distinct !DILexicalBlock(scope: !3420, file: !4, line: 1343, column: 37)
!3429 = !DILocation(line: 1345, column: 13, scope: !3428)
!3430 = !DILocation(line: 1345, column: 30, scope: !3428)
!3431 = !DILocation(line: 1345, column: 19, scope: !3428)
!3432 = !DILocation(line: 1347, column: 13, scope: !3433)
!3433 = distinct !DILexicalBlock(scope: !3428, file: !4, line: 1347, column: 13)
!3434 = !DILocation(line: 1347, column: 17, scope: !3433)
!3435 = !DILocation(line: 1347, column: 13, scope: !3428)
!3436 = !DILocation(line: 1348, column: 31, scope: !3433)
!3437 = !DILocation(line: 1348, column: 20, scope: !3433)
!3438 = !DILocation(line: 1348, column: 18, scope: !3433)
!3439 = !DILocation(line: 1348, column: 14, scope: !3433)
!3440 = !DILocation(line: 1349, column: 13, scope: !3441)
!3441 = distinct !DILexicalBlock(scope: !3428, file: !4, line: 1349, column: 13)
!3442 = !DILocation(line: 1349, column: 17, scope: !3441)
!3443 = !DILocation(line: 1350, column: 17, scope: !3441)
!3444 = !DILocation(line: 1350, column: 52, scope: !3445)
!3445 = !DILexicalBlockFile(scope: !3441, file: !4, discriminator: 1)
!3446 = !DILocation(line: 1350, column: 41, scope: !3445)
!3447 = !DILocation(line: 1350, column: 20, scope: !3448)
!3448 = !DILexicalBlockFile(scope: !3445, file: !4, discriminator: 2)
!3449 = !DILocation(line: 1350, column: 58, scope: !3445)
!3450 = !DILocation(line: 1351, column: 16, scope: !3441)
!3451 = !DILocation(line: 1351, column: 51, scope: !3445)
!3452 = !DILocation(line: 1351, column: 40, scope: !3445)
!3453 = !DILocation(line: 1351, column: 19, scope: !3448)
!3454 = !DILocation(line: 1351, column: 57, scope: !3445)
!3455 = !DILocation(line: 1349, column: 13, scope: !3456)
!3456 = !DILexicalBlockFile(scope: !3428, file: !4, discriminator: 1)
!3457 = !DILocation(line: 1352, column: 13, scope: !3458)
!3458 = distinct !DILexicalBlock(scope: !3441, file: !4, line: 1351, column: 53)
!3459 = !DILocation(line: 1352, column: 16, scope: !3458)
!3460 = !DILocation(line: 1352, column: 21, scope: !3458)
!3461 = !DILocation(line: 1353, column: 16, scope: !3458)
!3462 = !DILocation(line: 1354, column: 9, scope: !3458)
!3463 = !DILocation(line: 1355, column: 13, scope: !3464)
!3464 = distinct !DILexicalBlock(scope: !3441, file: !4, line: 1354, column: 16)
!3465 = !DILocation(line: 1355, column: 16, scope: !3464)
!3466 = !DILocation(line: 1355, column: 20, scope: !3464)
!3467 = !DILocation(line: 1356, column: 16, scope: !3464)
!3468 = !DILocation(line: 1358, column: 5, scope: !3428)
!3469 = !DILocation(line: 1359, column: 17, scope: !3369)
!3470 = !DILocation(line: 1359, column: 5, scope: !3369)
!3471 = !DILocation(line: 1360, column: 12, scope: !3369)
!3472 = !DILocation(line: 1360, column: 15, scope: !3369)
!3473 = !DILocation(line: 1360, column: 5, scope: !3369)
!3474 = !DILocation(line: 1361, column: 1, scope: !3369)
!3475 = distinct !DISubprogram(name: "digestsign_update_fn", scope: !4, file: !4, line: 2469, type: !2917, isLocal: true, isDefinition: true, scopeLine: 2471, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3476 = !DILocalVariable(name: "ctx", arg: 1, scope: !3475, file: !4, line: 2469, type: !32)
!3477 = !DILocation(line: 2469, column: 39, scope: !3475)
!3478 = !DILocalVariable(name: "buf", arg: 2, scope: !3475, file: !4, line: 2469, type: !2919)
!3479 = !DILocation(line: 2469, column: 65, scope: !3475)
!3480 = !DILocalVariable(name: "buflen", arg: 3, scope: !3475, file: !4, line: 2470, type: !33)
!3481 = !DILocation(line: 2470, column: 40, scope: !3475)
!3482 = !DILocation(line: 2472, column: 29, scope: !3475)
!3483 = !DILocation(line: 2472, column: 33, scope: !3475)
!3484 = !DILocation(line: 2472, column: 37, scope: !3475)
!3485 = !DILocation(line: 2472, column: 12, scope: !3475)
!3486 = !DILocation(line: 2472, column: 5, scope: !3475)
!3487 = distinct !DISubprogram(name: "digestverify_test_init", scope: !4, file: !4, line: 2518, type: !98, isLocal: true, isDefinition: true, scopeLine: 2519, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3488 = !DILocalVariable(name: "t", arg: 1, scope: !3487, file: !4, line: 2518, type: !100)
!3489 = !DILocation(line: 2518, column: 45, scope: !3487)
!3490 = !DILocalVariable(name: "alg", arg: 2, scope: !3487, file: !4, line: 2518, type: !67)
!3491 = !DILocation(line: 2518, column: 60, scope: !3487)
!3492 = !DILocation(line: 2520, column: 35, scope: !3487)
!3493 = !DILocation(line: 2520, column: 38, scope: !3487)
!3494 = !DILocation(line: 2520, column: 12, scope: !3487)
!3495 = !DILocation(line: 2520, column: 5, scope: !3487)
!3496 = distinct !DISubprogram(name: "digestverify_test_run", scope: !4, file: !4, line: 2529, type: !154, isLocal: true, isDefinition: true, scopeLine: 2530, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3497 = !DILocalVariable(name: "t", arg: 1, scope: !3496, file: !4, line: 2529, type: !100)
!3498 = !DILocation(line: 2529, column: 44, scope: !3496)
!3499 = !DILocalVariable(name: "mdata", scope: !3496, file: !4, line: 2531, type: !3007)
!3500 = !DILocation(line: 2531, column: 22, scope: !3496)
!3501 = !DILocation(line: 2531, column: 30, scope: !3496)
!3502 = !DILocation(line: 2531, column: 33, scope: !3496)
!3503 = !DILocation(line: 2533, column: 29, scope: !3504)
!3504 = distinct !DILexicalBlock(scope: !3496, file: !4, line: 2533, column: 9)
!3505 = !DILocation(line: 2533, column: 36, scope: !3504)
!3506 = !DILocation(line: 2533, column: 67, scope: !3504)
!3507 = !DILocation(line: 2533, column: 74, scope: !3504)
!3508 = !DILocation(line: 2533, column: 10, scope: !3504)
!3509 = !DILocation(line: 2533, column: 9, scope: !3496)
!3510 = !DILocation(line: 2534, column: 9, scope: !3511)
!3511 = distinct !DILexicalBlock(scope: !3504, file: !4, line: 2533, column: 80)
!3512 = !DILocation(line: 2534, column: 12, scope: !3511)
!3513 = !DILocation(line: 2534, column: 16, scope: !3511)
!3514 = !DILocation(line: 2535, column: 9, scope: !3511)
!3515 = !DILocation(line: 2538, column: 31, scope: !3516)
!3516 = distinct !DILexicalBlock(scope: !3496, file: !4, line: 2538, column: 9)
!3517 = !DILocation(line: 2538, column: 38, scope: !3516)
!3518 = !DILocation(line: 2538, column: 43, scope: !3516)
!3519 = !DILocation(line: 2538, column: 50, scope: !3516)
!3520 = !DILocation(line: 2539, column: 31, scope: !3516)
!3521 = !DILocation(line: 2539, column: 38, scope: !3516)
!3522 = !DILocation(line: 2538, column: 9, scope: !3516)
!3523 = !DILocation(line: 2539, column: 50, scope: !3516)
!3524 = !DILocation(line: 2538, column: 9, scope: !3496)
!3525 = !DILocation(line: 2540, column: 9, scope: !3516)
!3526 = !DILocation(line: 2540, column: 12, scope: !3516)
!3527 = !DILocation(line: 2540, column: 16, scope: !3516)
!3528 = !DILocation(line: 2541, column: 5, scope: !3496)
!3529 = !DILocation(line: 2542, column: 1, scope: !3496)
!3530 = distinct !DISubprogram(name: "digestverify_update_fn", scope: !4, file: !4, line: 2523, type: !2917, isLocal: true, isDefinition: true, scopeLine: 2525, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3531 = !DILocalVariable(name: "ctx", arg: 1, scope: !3530, file: !4, line: 2523, type: !32)
!3532 = !DILocation(line: 2523, column: 41, scope: !3530)
!3533 = !DILocalVariable(name: "buf", arg: 2, scope: !3530, file: !4, line: 2523, type: !2919)
!3534 = !DILocation(line: 2523, column: 67, scope: !3530)
!3535 = !DILocalVariable(name: "buflen", arg: 3, scope: !3530, file: !4, line: 2524, type: !33)
!3536 = !DILocation(line: 2524, column: 42, scope: !3530)
!3537 = !DILocation(line: 2526, column: 29, scope: !3530)
!3538 = !DILocation(line: 2526, column: 33, scope: !3530)
!3539 = !DILocation(line: 2526, column: 37, scope: !3530)
!3540 = !DILocation(line: 2526, column: 12, scope: !3530)
!3541 = !DILocation(line: 2526, column: 5, scope: !3530)
!3542 = distinct !DISubprogram(name: "encode_test_init", scope: !4, file: !4, line: 1769, type: !98, isLocal: true, isDefinition: true, scopeLine: 1770, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3543 = !DILocalVariable(name: "t", arg: 1, scope: !3542, file: !4, line: 1769, type: !100)
!3544 = !DILocation(line: 1769, column: 39, scope: !3542)
!3545 = !DILocalVariable(name: "encoding", arg: 2, scope: !3542, file: !4, line: 1769, type: !67)
!3546 = !DILocation(line: 1769, column: 54, scope: !3542)
!3547 = !DILocalVariable(name: "edata", scope: !3542, file: !4, line: 1771, type: !3548)
!3548 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3549, size: 64, align: 64)
!3549 = !DIDerivedType(tag: DW_TAG_typedef, name: "ENCODE_DATA", file: !4, line: 1767, baseType: !3550)
!3550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "encode_data_st", file: !4, line: 1759, size: 320, align: 64, elements: !3551)
!3551 = !{!3552, !3553, !3554, !3555, !3556}
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "input", scope: !3550, file: !4, line: 1761, baseType: !56, size: 64, align: 64)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "input_len", scope: !3550, file: !4, line: 1762, baseType: !33, size: 64, align: 64, offset: 64)
!3554 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !3550, file: !4, line: 1764, baseType: !56, size: 64, align: 64, offset: 128)
!3555 = !DIDerivedType(tag: DW_TAG_member, name: "output_len", scope: !3550, file: !4, line: 1765, baseType: !33, size: 64, align: 64, offset: 192)
!3556 = !DIDerivedType(tag: DW_TAG_member, name: "encoding", scope: !3550, file: !4, line: 1766, baseType: !3557, size: 32, align: 32, offset: 256)
!3557 = !DIDerivedType(tag: DW_TAG_typedef, name: "base64_encoding_type", file: !4, line: 1757, baseType: !3)
!3558 = !DILocation(line: 1771, column: 18, scope: !3542)
!3559 = !DILocation(line: 1773, column: 94, scope: !3560)
!3560 = distinct !DILexicalBlock(scope: !3542, file: !4, line: 1773, column: 9)
!3561 = !DILocation(line: 1773, column: 92, scope: !3560)
!3562 = !DILocation(line: 1773, column: 86, scope: !3560)
!3563 = !DILocation(line: 1773, column: 10, scope: !3564)
!3564 = !DILexicalBlockFile(scope: !3560, file: !4, discriminator: 1)
!3565 = !DILocation(line: 1773, column: 10, scope: !3560)
!3566 = !DILocation(line: 1773, column: 9, scope: !3542)
!3567 = !DILocation(line: 1774, column: 9, scope: !3560)
!3568 = !DILocation(line: 1775, column: 16, scope: !3569)
!3569 = distinct !DILexicalBlock(scope: !3542, file: !4, line: 1775, column: 9)
!3570 = !DILocation(line: 1775, column: 9, scope: !3569)
!3571 = !DILocation(line: 1775, column: 39, scope: !3569)
!3572 = !DILocation(line: 1775, column: 9, scope: !3542)
!3573 = !DILocation(line: 1776, column: 9, scope: !3574)
!3574 = distinct !DILexicalBlock(scope: !3569, file: !4, line: 1775, column: 45)
!3575 = !DILocation(line: 1776, column: 16, scope: !3574)
!3576 = !DILocation(line: 1776, column: 25, scope: !3574)
!3577 = !DILocation(line: 1777, column: 5, scope: !3574)
!3578 = !DILocation(line: 1777, column: 23, scope: !3579)
!3579 = !DILexicalBlockFile(scope: !3580, file: !4, discriminator: 1)
!3580 = distinct !DILexicalBlock(scope: !3569, file: !4, line: 1777, column: 16)
!3581 = !DILocation(line: 1777, column: 16, scope: !3579)
!3582 = !DILocation(line: 1777, column: 42, scope: !3579)
!3583 = !DILocation(line: 1778, column: 9, scope: !3584)
!3584 = distinct !DILexicalBlock(scope: !3580, file: !4, line: 1777, column: 48)
!3585 = !DILocation(line: 1778, column: 16, scope: !3584)
!3586 = !DILocation(line: 1778, column: 25, scope: !3584)
!3587 = !DILocation(line: 1779, column: 5, scope: !3584)
!3588 = !DILocation(line: 1779, column: 23, scope: !3589)
!3589 = !DILexicalBlockFile(scope: !3590, file: !4, discriminator: 1)
!3590 = distinct !DILexicalBlock(scope: !3580, file: !4, line: 1779, column: 16)
!3591 = !DILocation(line: 1779, column: 16, scope: !3589)
!3592 = !DILocation(line: 1779, column: 44, scope: !3589)
!3593 = !DILocation(line: 1780, column: 9, scope: !3594)
!3594 = distinct !DILexicalBlock(scope: !3590, file: !4, line: 1779, column: 50)
!3595 = !DILocation(line: 1780, column: 16, scope: !3594)
!3596 = !DILocation(line: 1780, column: 25, scope: !3594)
!3597 = !DILocation(line: 1781, column: 120, scope: !3598)
!3598 = distinct !DILexicalBlock(scope: !3594, file: !4, line: 1781, column: 13)
!3599 = !DILocation(line: 1781, column: 102, scope: !3598)
!3600 = !DILocation(line: 1781, column: 105, scope: !3598)
!3601 = !DILocation(line: 1781, column: 118, scope: !3598)
!3602 = !DILocation(line: 1781, column: 14, scope: !3603)
!3603 = !DILexicalBlockFile(scope: !3598, file: !4, discriminator: 1)
!3604 = !DILocation(line: 1781, column: 14, scope: !3598)
!3605 = !DILocation(line: 1781, column: 13, scope: !3594)
!3606 = !DILocation(line: 1782, column: 13, scope: !3598)
!3607 = !DILocation(line: 1783, column: 5, scope: !3594)
!3608 = !DILocation(line: 1784, column: 80, scope: !3609)
!3609 = distinct !DILexicalBlock(scope: !3590, file: !4, line: 1783, column: 12)
!3610 = !DILocation(line: 1784, column: 9, scope: !3609)
!3611 = !DILocation(line: 1787, column: 9, scope: !3609)
!3612 = !DILocation(line: 1789, column: 15, scope: !3542)
!3613 = !DILocation(line: 1789, column: 5, scope: !3542)
!3614 = !DILocation(line: 1789, column: 8, scope: !3542)
!3615 = !DILocation(line: 1789, column: 13, scope: !3542)
!3616 = !DILocation(line: 1790, column: 5, scope: !3542)
!3617 = !DILocation(line: 1792, column: 17, scope: !3542)
!3618 = !DILocation(line: 1792, column: 5, scope: !3542)
!3619 = !DILocation(line: 1793, column: 5, scope: !3542)
!3620 = !DILocation(line: 1794, column: 1, scope: !3542)
!3621 = distinct !DISubprogram(name: "encode_test_cleanup", scope: !4, file: !4, line: 1796, type: !146, isLocal: true, isDefinition: true, scopeLine: 1797, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3622 = !DILocalVariable(name: "t", arg: 1, scope: !3621, file: !4, line: 1796, type: !100)
!3623 = !DILocation(line: 1796, column: 43, scope: !3621)
!3624 = !DILocalVariable(name: "edata", scope: !3621, file: !4, line: 1798, type: !3548)
!3625 = !DILocation(line: 1798, column: 18, scope: !3621)
!3626 = !DILocation(line: 1798, column: 26, scope: !3621)
!3627 = !DILocation(line: 1798, column: 29, scope: !3621)
!3628 = !DILocation(line: 1800, column: 17, scope: !3621)
!3629 = !DILocation(line: 1800, column: 24, scope: !3621)
!3630 = !DILocation(line: 1800, column: 5, scope: !3621)
!3631 = !DILocation(line: 1801, column: 17, scope: !3621)
!3632 = !DILocation(line: 1801, column: 24, scope: !3621)
!3633 = !DILocation(line: 1801, column: 5, scope: !3621)
!3634 = !DILocation(line: 1802, column: 12, scope: !3621)
!3635 = !DILocation(line: 1802, column: 5, scope: !3621)
!3636 = !DILocation(line: 1803, column: 1, scope: !3621)
!3637 = distinct !DISubprogram(name: "encode_test_parse", scope: !4, file: !4, line: 1805, type: !150, isLocal: true, isDefinition: true, scopeLine: 1807, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3638 = !DILocalVariable(name: "t", arg: 1, scope: !3637, file: !4, line: 1805, type: !100)
!3639 = !DILocation(line: 1805, column: 40, scope: !3637)
!3640 = !DILocalVariable(name: "keyword", arg: 2, scope: !3637, file: !4, line: 1806, type: !67)
!3641 = !DILocation(line: 1806, column: 42, scope: !3637)
!3642 = !DILocalVariable(name: "value", arg: 3, scope: !3637, file: !4, line: 1806, type: !67)
!3643 = !DILocation(line: 1806, column: 63, scope: !3637)
!3644 = !DILocalVariable(name: "edata", scope: !3637, file: !4, line: 1808, type: !3548)
!3645 = !DILocation(line: 1808, column: 18, scope: !3637)
!3646 = !DILocation(line: 1808, column: 26, scope: !3637)
!3647 = !DILocation(line: 1808, column: 29, scope: !3637)
!3648 = !DILocation(line: 1810, column: 16, scope: !3649)
!3649 = distinct !DILexicalBlock(scope: !3637, file: !4, line: 1810, column: 9)
!3650 = !DILocation(line: 1810, column: 9, scope: !3649)
!3651 = !DILocation(line: 1810, column: 34, scope: !3649)
!3652 = !DILocation(line: 1810, column: 9, scope: !3637)
!3653 = !DILocation(line: 1811, column: 26, scope: !3649)
!3654 = !DILocation(line: 1811, column: 34, scope: !3649)
!3655 = !DILocation(line: 1811, column: 41, scope: !3649)
!3656 = !DILocation(line: 1811, column: 49, scope: !3649)
!3657 = !DILocation(line: 1811, column: 56, scope: !3649)
!3658 = !DILocation(line: 1811, column: 16, scope: !3649)
!3659 = !DILocation(line: 1811, column: 9, scope: !3649)
!3660 = !DILocation(line: 1812, column: 16, scope: !3661)
!3661 = distinct !DILexicalBlock(scope: !3637, file: !4, line: 1812, column: 9)
!3662 = !DILocation(line: 1812, column: 9, scope: !3661)
!3663 = !DILocation(line: 1812, column: 35, scope: !3661)
!3664 = !DILocation(line: 1812, column: 9, scope: !3637)
!3665 = !DILocation(line: 1813, column: 26, scope: !3661)
!3666 = !DILocation(line: 1813, column: 34, scope: !3661)
!3667 = !DILocation(line: 1813, column: 41, scope: !3661)
!3668 = !DILocation(line: 1813, column: 50, scope: !3661)
!3669 = !DILocation(line: 1813, column: 57, scope: !3661)
!3670 = !DILocation(line: 1813, column: 16, scope: !3661)
!3671 = !DILocation(line: 1813, column: 9, scope: !3661)
!3672 = !DILocation(line: 1814, column: 5, scope: !3637)
!3673 = !DILocation(line: 1815, column: 1, scope: !3637)
!3674 = distinct !DISubprogram(name: "encode_test_run", scope: !4, file: !4, line: 1817, type: !154, isLocal: true, isDefinition: true, scopeLine: 1818, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3675 = !DILocalVariable(name: "t", arg: 1, scope: !3674, file: !4, line: 1817, type: !100)
!3676 = !DILocation(line: 1817, column: 38, scope: !3674)
!3677 = !DILocalVariable(name: "expected", scope: !3674, file: !4, line: 1819, type: !3548)
!3678 = !DILocation(line: 1819, column: 18, scope: !3674)
!3679 = !DILocation(line: 1819, column: 29, scope: !3674)
!3680 = !DILocation(line: 1819, column: 32, scope: !3674)
!3681 = !DILocalVariable(name: "encode_out", scope: !3674, file: !4, line: 1820, type: !56)
!3682 = !DILocation(line: 1820, column: 20, scope: !3674)
!3683 = !DILocalVariable(name: "decode_out", scope: !3674, file: !4, line: 1820, type: !56)
!3684 = !DILocation(line: 1820, column: 39, scope: !3674)
!3685 = !DILocalVariable(name: "output_len", scope: !3674, file: !4, line: 1821, type: !31)
!3686 = !DILocation(line: 1821, column: 9, scope: !3674)
!3687 = !DILocalVariable(name: "chunk_len", scope: !3674, file: !4, line: 1821, type: !31)
!3688 = !DILocation(line: 1821, column: 21, scope: !3674)
!3689 = !DILocalVariable(name: "decode_ctx", scope: !3674, file: !4, line: 1822, type: !3690)
!3690 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3691, size: 64, align: 64)
!3691 = !DIDerivedType(tag: DW_TAG_typedef, name: "EVP_ENCODE_CTX", file: !113, line: 104, baseType: !3692)
!3692 = !DICompositeType(tag: DW_TAG_structure_type, name: "evp_Encode_Ctx_st", file: !113, line: 104, flags: DIFlagFwdDecl)
!3693 = !DILocation(line: 1822, column: 21, scope: !3674)
!3694 = !DILocalVariable(name: "encode_ctx", scope: !3674, file: !4, line: 1822, type: !3690)
!3695 = !DILocation(line: 1822, column: 40, scope: !3674)
!3696 = !DILocation(line: 1824, column: 94, scope: !3697)
!3697 = distinct !DILexicalBlock(scope: !3674, file: !4, line: 1824, column: 9)
!3698 = !DILocation(line: 1824, column: 92, scope: !3697)
!3699 = !DILocation(line: 1824, column: 81, scope: !3697)
!3700 = !DILocation(line: 1824, column: 10, scope: !3701)
!3701 = !DILexicalBlockFile(scope: !3697, file: !4, discriminator: 1)
!3702 = !DILocation(line: 1824, column: 10, scope: !3697)
!3703 = !DILocation(line: 1824, column: 9, scope: !3674)
!3704 = !DILocation(line: 1825, column: 9, scope: !3705)
!3705 = distinct !DILexicalBlock(scope: !3697, file: !4, line: 1824, column: 117)
!3706 = !DILocation(line: 1825, column: 12, scope: !3705)
!3707 = !DILocation(line: 1825, column: 16, scope: !3705)
!3708 = !DILocation(line: 1826, column: 9, scope: !3705)
!3709 = !DILocation(line: 1829, column: 9, scope: !3710)
!3710 = distinct !DILexicalBlock(scope: !3674, file: !4, line: 1829, column: 9)
!3711 = !DILocation(line: 1829, column: 19, scope: !3710)
!3712 = !DILocation(line: 1829, column: 28, scope: !3710)
!3713 = !DILocation(line: 1829, column: 9, scope: !3674)
!3714 = !DILocation(line: 1831, column: 98, scope: !3715)
!3715 = distinct !DILexicalBlock(scope: !3716, file: !4, line: 1831, column: 13)
!3716 = distinct !DILexicalBlock(scope: !3710, file: !4, line: 1829, column: 58)
!3717 = !DILocation(line: 1831, column: 96, scope: !3715)
!3718 = !DILocation(line: 1831, column: 85, scope: !3715)
!3719 = !DILocation(line: 1831, column: 14, scope: !3720)
!3720 = !DILexicalBlockFile(scope: !3715, file: !4, discriminator: 2)
!3721 = !DILocation(line: 1831, column: 14, scope: !3715)
!3722 = !DILocation(line: 1832, column: 17, scope: !3715)
!3723 = !DILocation(line: 1832, column: 125, scope: !3724)
!3724 = !DILexicalBlockFile(scope: !3715, file: !4, discriminator: 1)
!3725 = !DILocation(line: 1832, column: 135, scope: !3724)
!3726 = !DILocation(line: 1832, column: 145, scope: !3724)
!3727 = !DILocation(line: 1832, column: 148, scope: !3724)
!3728 = !DILocation(line: 1832, column: 150, scope: !3724)
!3729 = !DILocation(line: 1832, column: 156, scope: !3724)
!3730 = !DILocation(line: 1832, column: 166, scope: !3724)
!3731 = !DILocation(line: 1832, column: 176, scope: !3724)
!3732 = !DILocation(line: 1832, column: 179, scope: !3724)
!3733 = !DILocation(line: 1832, column: 182, scope: !3724)
!3734 = !DILocation(line: 1832, column: 153, scope: !3724)
!3735 = !DILocation(line: 1832, column: 184, scope: !3724)
!3736 = !DILocation(line: 1832, column: 107, scope: !3724)
!3737 = !DILocation(line: 1832, column: 105, scope: !3724)
!3738 = !DILocation(line: 1832, column: 21, scope: !3739)
!3739 = !DILexicalBlockFile(scope: !3724, file: !4, discriminator: 2)
!3740 = !DILocation(line: 1832, column: 21, scope: !3724)
!3741 = !DILocation(line: 1831, column: 13, scope: !3742)
!3742 = !DILexicalBlockFile(scope: !3716, file: !4, discriminator: 1)
!3743 = !DILocation(line: 1834, column: 13, scope: !3715)
!3744 = !DILocation(line: 1836, column: 24, scope: !3716)
!3745 = !DILocation(line: 1836, column: 9, scope: !3716)
!3746 = !DILocation(line: 1837, column: 128, scope: !3747)
!3747 = distinct !DILexicalBlock(scope: !3716, file: !4, line: 1837, column: 13)
!3748 = !DILocation(line: 1837, column: 140, scope: !3747)
!3749 = !DILocation(line: 1837, column: 164, scope: !3747)
!3750 = !DILocation(line: 1837, column: 174, scope: !3747)
!3751 = !DILocation(line: 1837, column: 181, scope: !3747)
!3752 = !DILocation(line: 1837, column: 191, scope: !3747)
!3753 = !DILocation(line: 1837, column: 111, scope: !3747)
!3754 = !DILocation(line: 1837, column: 203, scope: !3747)
!3755 = !DILocation(line: 1837, column: 14, scope: !3756)
!3756 = !DILexicalBlockFile(scope: !3747, file: !4, discriminator: 1)
!3757 = !DILocation(line: 1837, column: 14, scope: !3747)
!3758 = !DILocation(line: 1837, column: 13, scope: !3716)
!3759 = !DILocation(line: 1839, column: 13, scope: !3747)
!3760 = !DILocation(line: 1841, column: 22, scope: !3716)
!3761 = !DILocation(line: 1841, column: 20, scope: !3716)
!3762 = !DILocation(line: 1843, column: 25, scope: !3716)
!3763 = !DILocation(line: 1843, column: 37, scope: !3716)
!3764 = !DILocation(line: 1843, column: 50, scope: !3716)
!3765 = !DILocation(line: 1843, column: 48, scope: !3716)
!3766 = !DILocation(line: 1843, column: 9, scope: !3716)
!3767 = !DILocation(line: 1844, column: 23, scope: !3716)
!3768 = !DILocation(line: 1844, column: 20, scope: !3716)
!3769 = !DILocation(line: 1846, column: 33, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3716, file: !4, line: 1846, column: 13)
!3771 = !DILocation(line: 1847, column: 33, scope: !3770)
!3772 = !DILocation(line: 1847, column: 43, scope: !3770)
!3773 = !DILocation(line: 1847, column: 51, scope: !3770)
!3774 = !DILocation(line: 1847, column: 61, scope: !3770)
!3775 = !DILocation(line: 1848, column: 33, scope: !3770)
!3776 = !DILocation(line: 1848, column: 45, scope: !3770)
!3777 = !DILocation(line: 1846, column: 14, scope: !3770)
!3778 = !DILocation(line: 1846, column: 13, scope: !3716)
!3779 = !DILocation(line: 1849, column: 13, scope: !3770)
!3780 = !DILocation(line: 1850, column: 5, scope: !3716)
!3781 = !DILocation(line: 1852, column: 114, scope: !3782)
!3782 = distinct !DILexicalBlock(scope: !3674, file: !4, line: 1852, column: 9)
!3783 = !DILocation(line: 1852, column: 124, scope: !3782)
!3784 = !DILocation(line: 1852, column: 135, scope: !3782)
!3785 = !DILocation(line: 1852, column: 138, scope: !3782)
!3786 = !DILocation(line: 1852, column: 140, scope: !3782)
!3787 = !DILocation(line: 1852, column: 142, scope: !3782)
!3788 = !DILocation(line: 1852, column: 97, scope: !3782)
!3789 = !DILocation(line: 1852, column: 95, scope: !3782)
!3790 = !DILocation(line: 1852, column: 10, scope: !3791)
!3791 = !DILexicalBlockFile(scope: !3782, file: !4, discriminator: 1)
!3792 = !DILocation(line: 1852, column: 10, scope: !3782)
!3793 = !DILocation(line: 1852, column: 9, scope: !3674)
!3794 = !DILocation(line: 1854, column: 9, scope: !3782)
!3795 = !DILocation(line: 1856, column: 20, scope: !3674)
!3796 = !DILocation(line: 1856, column: 5, scope: !3674)
!3797 = !DILocation(line: 1857, column: 26, scope: !3798)
!3798 = distinct !DILexicalBlock(scope: !3674, file: !4, line: 1857, column: 9)
!3799 = !DILocation(line: 1857, column: 38, scope: !3798)
!3800 = !DILocation(line: 1857, column: 62, scope: !3798)
!3801 = !DILocation(line: 1857, column: 72, scope: !3798)
!3802 = !DILocation(line: 1858, column: 26, scope: !3798)
!3803 = !DILocation(line: 1858, column: 36, scope: !3798)
!3804 = !DILocation(line: 1857, column: 9, scope: !3798)
!3805 = !DILocation(line: 1858, column: 48, scope: !3798)
!3806 = !DILocation(line: 1857, column: 9, scope: !3674)
!3807 = !DILocation(line: 1859, column: 9, scope: !3808)
!3808 = distinct !DILexicalBlock(scope: !3798, file: !4, line: 1858, column: 53)
!3809 = !DILocation(line: 1859, column: 12, scope: !3808)
!3810 = !DILocation(line: 1859, column: 16, scope: !3808)
!3811 = !DILocation(line: 1860, column: 9, scope: !3808)
!3812 = !DILocation(line: 1862, column: 18, scope: !3674)
!3813 = !DILocation(line: 1862, column: 16, scope: !3674)
!3814 = !DILocation(line: 1864, column: 25, scope: !3815)
!3815 = distinct !DILexicalBlock(scope: !3674, file: !4, line: 1864, column: 9)
!3816 = !DILocation(line: 1864, column: 37, scope: !3815)
!3817 = !DILocation(line: 1864, column: 50, scope: !3815)
!3818 = !DILocation(line: 1864, column: 48, scope: !3815)
!3819 = !DILocation(line: 1864, column: 9, scope: !3815)
!3820 = !DILocation(line: 1864, column: 73, scope: !3815)
!3821 = !DILocation(line: 1864, column: 9, scope: !3674)
!3822 = !DILocation(line: 1865, column: 9, scope: !3823)
!3823 = distinct !DILexicalBlock(scope: !3815, file: !4, line: 1864, column: 79)
!3824 = !DILocation(line: 1865, column: 12, scope: !3823)
!3825 = !DILocation(line: 1865, column: 16, scope: !3823)
!3826 = !DILocation(line: 1866, column: 9, scope: !3823)
!3827 = !DILocation(line: 1868, column: 19, scope: !3674)
!3828 = !DILocation(line: 1868, column: 16, scope: !3674)
!3829 = !DILocation(line: 1870, column: 9, scope: !3830)
!3830 = distinct !DILexicalBlock(scope: !3674, file: !4, line: 1870, column: 9)
!3831 = !DILocation(line: 1870, column: 19, scope: !3830)
!3832 = !DILocation(line: 1870, column: 28, scope: !3830)
!3833 = !DILocation(line: 1871, column: 13, scope: !3830)
!3834 = !DILocation(line: 1871, column: 36, scope: !3835)
!3835 = !DILexicalBlockFile(scope: !3830, file: !4, discriminator: 1)
!3836 = !DILocation(line: 1872, column: 36, scope: !3830)
!3837 = !DILocation(line: 1872, column: 46, scope: !3830)
!3838 = !DILocation(line: 1872, column: 53, scope: !3830)
!3839 = !DILocation(line: 1872, column: 63, scope: !3830)
!3840 = !DILocation(line: 1873, column: 36, scope: !3830)
!3841 = !DILocation(line: 1873, column: 48, scope: !3830)
!3842 = !DILocation(line: 1871, column: 17, scope: !3835)
!3843 = !DILocation(line: 1870, column: 9, scope: !3844)
!3844 = !DILexicalBlockFile(scope: !3674, file: !4, discriminator: 1)
!3845 = !DILocation(line: 1874, column: 9, scope: !3846)
!3846 = distinct !DILexicalBlock(scope: !3830, file: !4, line: 1873, column: 61)
!3847 = !DILocation(line: 1874, column: 12, scope: !3846)
!3848 = !DILocation(line: 1874, column: 16, scope: !3846)
!3849 = !DILocation(line: 1875, column: 9, scope: !3846)
!3850 = !DILocation(line: 1878, column: 5, scope: !3674)
!3851 = !DILocation(line: 1878, column: 8, scope: !3674)
!3852 = !DILocation(line: 1878, column: 12, scope: !3674)
!3853 = !DILocation(line: 1880, column: 17, scope: !3674)
!3854 = !DILocation(line: 1880, column: 5, scope: !3674)
!3855 = !DILocation(line: 1881, column: 17, scope: !3674)
!3856 = !DILocation(line: 1881, column: 5, scope: !3674)
!3857 = !DILocation(line: 1882, column: 25, scope: !3674)
!3858 = !DILocation(line: 1882, column: 5, scope: !3674)
!3859 = !DILocation(line: 1883, column: 25, scope: !3674)
!3860 = !DILocation(line: 1883, column: 5, scope: !3674)
!3861 = !DILocation(line: 1884, column: 5, scope: !3674)
!3862 = distinct !DISubprogram(name: "kdf_test_init", scope: !4, file: !4, line: 1912, type: !98, isLocal: true, isDefinition: true, scopeLine: 1913, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3863 = !DILocalVariable(name: "t", arg: 1, scope: !3862, file: !4, line: 1912, type: !100)
!3864 = !DILocation(line: 1912, column: 36, scope: !3862)
!3865 = !DILocalVariable(name: "name", arg: 2, scope: !3862, file: !4, line: 1912, type: !67)
!3866 = !DILocation(line: 1912, column: 51, scope: !3862)
!3867 = !DILocalVariable(name: "kdata", scope: !3862, file: !4, line: 1914, type: !3868)
!3868 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3869, size: 64, align: 64)
!3869 = !DIDerivedType(tag: DW_TAG_typedef, name: "KDF_DATA", file: !4, line: 1906, baseType: !3870)
!3870 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kdf_data_st", file: !4, line: 1900, size: 192, align: 64, elements: !3871)
!3871 = !{!3872, !3876, !3877}
!3872 = !DIDerivedType(tag: DW_TAG_member, name: "ctx", scope: !3870, file: !4, line: 1902, baseType: !3873, size: 64, align: 64)
!3873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3874, size: 64, align: 64)
!3874 = !DIDerivedType(tag: DW_TAG_typedef, name: "EVP_KDF_CTX", file: !113, line: 102, baseType: !3875)
!3875 = !DICompositeType(tag: DW_TAG_structure_type, name: "evp_kdf_ctx_st", file: !113, line: 102, flags: DIFlagFwdDecl)
!3876 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !3870, file: !4, line: 1904, baseType: !56, size: 64, align: 64, offset: 64)
!3877 = !DIDerivedType(tag: DW_TAG_member, name: "output_len", scope: !3870, file: !4, line: 1905, baseType: !33, size: 64, align: 64, offset: 128)
!3878 = !DILocation(line: 1914, column: 15, scope: !3862)
!3879 = !DILocalVariable(name: "kdf_nid", scope: !3862, file: !4, line: 1915, type: !31)
!3880 = !DILocation(line: 1915, column: 9, scope: !3862)
!3881 = !DILocation(line: 1915, column: 30, scope: !3862)
!3882 = !DILocation(line: 1915, column: 19, scope: !3862)
!3883 = !DILocation(line: 1924, column: 9, scope: !3884)
!3884 = distinct !DILexicalBlock(scope: !3862, file: !4, line: 1924, column: 9)
!3885 = !DILocation(line: 1924, column: 17, scope: !3884)
!3886 = !DILocation(line: 1924, column: 9, scope: !3862)
!3887 = !DILocation(line: 1925, column: 30, scope: !3884)
!3888 = !DILocation(line: 1925, column: 19, scope: !3884)
!3889 = !DILocation(line: 1925, column: 17, scope: !3884)
!3890 = !DILocation(line: 1925, column: 9, scope: !3884)
!3891 = !DILocation(line: 1927, column: 94, scope: !3892)
!3892 = distinct !DILexicalBlock(scope: !3862, file: !4, line: 1927, column: 9)
!3893 = !DILocation(line: 1927, column: 92, scope: !3892)
!3894 = !DILocation(line: 1927, column: 86, scope: !3892)
!3895 = !DILocation(line: 1927, column: 10, scope: !3896)
!3896 = !DILexicalBlockFile(scope: !3892, file: !4, discriminator: 1)
!3897 = !DILocation(line: 1927, column: 10, scope: !3892)
!3898 = !DILocation(line: 1927, column: 9, scope: !3862)
!3899 = !DILocation(line: 1928, column: 9, scope: !3892)
!3900 = !DILocation(line: 1929, column: 37, scope: !3862)
!3901 = !DILocation(line: 1929, column: 18, scope: !3862)
!3902 = !DILocation(line: 1929, column: 5, scope: !3862)
!3903 = !DILocation(line: 1929, column: 12, scope: !3862)
!3904 = !DILocation(line: 1929, column: 16, scope: !3862)
!3905 = !DILocation(line: 1930, column: 9, scope: !3906)
!3906 = distinct !DILexicalBlock(scope: !3862, file: !4, line: 1930, column: 9)
!3907 = !DILocation(line: 1930, column: 16, scope: !3906)
!3908 = !DILocation(line: 1930, column: 20, scope: !3906)
!3909 = !DILocation(line: 1930, column: 9, scope: !3862)
!3910 = !DILocation(line: 1931, column: 21, scope: !3911)
!3911 = distinct !DILexicalBlock(scope: !3906, file: !4, line: 1930, column: 28)
!3912 = !DILocation(line: 1931, column: 9, scope: !3911)
!3913 = !DILocation(line: 1932, column: 9, scope: !3911)
!3914 = !DILocation(line: 1934, column: 15, scope: !3862)
!3915 = !DILocation(line: 1934, column: 5, scope: !3862)
!3916 = !DILocation(line: 1934, column: 8, scope: !3862)
!3917 = !DILocation(line: 1934, column: 13, scope: !3862)
!3918 = !DILocation(line: 1935, column: 5, scope: !3862)
!3919 = !DILocation(line: 1936, column: 1, scope: !3862)
!3920 = distinct !DISubprogram(name: "kdf_test_cleanup", scope: !4, file: !4, line: 1938, type: !146, isLocal: true, isDefinition: true, scopeLine: 1939, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3921 = !DILocalVariable(name: "t", arg: 1, scope: !3920, file: !4, line: 1938, type: !100)
!3922 = !DILocation(line: 1938, column: 40, scope: !3920)
!3923 = !DILocalVariable(name: "kdata", scope: !3920, file: !4, line: 1940, type: !3868)
!3924 = !DILocation(line: 1940, column: 15, scope: !3920)
!3925 = !DILocation(line: 1940, column: 23, scope: !3920)
!3926 = !DILocation(line: 1940, column: 26, scope: !3920)
!3927 = !DILocation(line: 1941, column: 17, scope: !3920)
!3928 = !DILocation(line: 1941, column: 24, scope: !3920)
!3929 = !DILocation(line: 1941, column: 5, scope: !3920)
!3930 = !DILocation(line: 1942, column: 22, scope: !3920)
!3931 = !DILocation(line: 1942, column: 29, scope: !3920)
!3932 = !DILocation(line: 1942, column: 5, scope: !3920)
!3933 = !DILocation(line: 1943, column: 1, scope: !3920)
!3934 = distinct !DISubprogram(name: "kdf_test_parse", scope: !4, file: !4, line: 1980, type: !150, isLocal: true, isDefinition: true, scopeLine: 1982, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3935 = !DILocalVariable(name: "t", arg: 1, scope: !3934, file: !4, line: 1980, type: !100)
!3936 = !DILocation(line: 1980, column: 37, scope: !3934)
!3937 = !DILocalVariable(name: "keyword", arg: 2, scope: !3934, file: !4, line: 1981, type: !67)
!3938 = !DILocation(line: 1981, column: 39, scope: !3934)
!3939 = !DILocalVariable(name: "value", arg: 3, scope: !3934, file: !4, line: 1981, type: !67)
!3940 = !DILocation(line: 1981, column: 60, scope: !3934)
!3941 = !DILocalVariable(name: "kdata", scope: !3934, file: !4, line: 1983, type: !3868)
!3942 = !DILocation(line: 1983, column: 15, scope: !3934)
!3943 = !DILocation(line: 1983, column: 23, scope: !3934)
!3944 = !DILocation(line: 1983, column: 26, scope: !3934)
!3945 = !DILocation(line: 1985, column: 16, scope: !3946)
!3946 = distinct !DILexicalBlock(scope: !3934, file: !4, line: 1985, column: 9)
!3947 = !DILocation(line: 1985, column: 9, scope: !3946)
!3948 = !DILocation(line: 1985, column: 35, scope: !3946)
!3949 = !DILocation(line: 1985, column: 9, scope: !3934)
!3950 = !DILocation(line: 1986, column: 26, scope: !3946)
!3951 = !DILocation(line: 1986, column: 34, scope: !3946)
!3952 = !DILocation(line: 1986, column: 41, scope: !3946)
!3953 = !DILocation(line: 1986, column: 50, scope: !3946)
!3954 = !DILocation(line: 1986, column: 57, scope: !3946)
!3955 = !DILocation(line: 1986, column: 16, scope: !3946)
!3956 = !DILocation(line: 1986, column: 9, scope: !3946)
!3957 = !DILocation(line: 1987, column: 17, scope: !3958)
!3958 = distinct !DILexicalBlock(scope: !3934, file: !4, line: 1987, column: 9)
!3959 = !DILocation(line: 1987, column: 9, scope: !3958)
!3960 = !DILocation(line: 1987, column: 37, scope: !3958)
!3961 = !DILocation(line: 1987, column: 9, scope: !3934)
!3962 = !DILocation(line: 1988, column: 30, scope: !3958)
!3963 = !DILocation(line: 1988, column: 33, scope: !3958)
!3964 = !DILocation(line: 1988, column: 40, scope: !3958)
!3965 = !DILocation(line: 1988, column: 45, scope: !3958)
!3966 = !DILocation(line: 1988, column: 16, scope: !3958)
!3967 = !DILocation(line: 1988, column: 9, scope: !3958)
!3968 = !DILocation(line: 1989, column: 5, scope: !3934)
!3969 = !DILocation(line: 1990, column: 1, scope: !3934)
!3970 = distinct !DISubprogram(name: "kdf_test_run", scope: !4, file: !4, line: 1992, type: !154, isLocal: true, isDefinition: true, scopeLine: 1993, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!3971 = !DILocalVariable(name: "t", arg: 1, scope: !3970, file: !4, line: 1992, type: !100)
!3972 = !DILocation(line: 1992, column: 35, scope: !3970)
!3973 = !DILocalVariable(name: "expected", scope: !3970, file: !4, line: 1994, type: !3868)
!3974 = !DILocation(line: 1994, column: 15, scope: !3970)
!3975 = !DILocation(line: 1994, column: 26, scope: !3970)
!3976 = !DILocation(line: 1994, column: 29, scope: !3970)
!3977 = !DILocalVariable(name: "got", scope: !3970, file: !4, line: 1995, type: !56)
!3978 = !DILocation(line: 1995, column: 20, scope: !3970)
!3979 = !DILocalVariable(name: "got_len", scope: !3970, file: !4, line: 1996, type: !33)
!3980 = !DILocation(line: 1996, column: 12, scope: !3970)
!3981 = !DILocation(line: 1996, column: 22, scope: !3970)
!3982 = !DILocation(line: 1996, column: 32, scope: !3970)
!3983 = !DILocation(line: 1998, column: 97, scope: !3984)
!3984 = distinct !DILexicalBlock(scope: !3970, file: !4, line: 1998, column: 9)
!3985 = !DILocation(line: 1998, column: 83, scope: !3984)
!3986 = !DILocation(line: 1998, column: 81, scope: !3984)
!3987 = !DILocation(line: 1998, column: 10, scope: !3988)
!3988 = !DILexicalBlockFile(scope: !3984, file: !4, discriminator: 1)
!3989 = !DILocation(line: 1998, column: 10, scope: !3984)
!3990 = !DILocation(line: 1998, column: 9, scope: !3970)
!3991 = !DILocation(line: 1999, column: 9, scope: !3992)
!3992 = distinct !DILexicalBlock(scope: !3984, file: !4, line: 1998, column: 133)
!3993 = !DILocation(line: 1999, column: 12, scope: !3992)
!3994 = !DILocation(line: 1999, column: 16, scope: !3992)
!3995 = !DILocation(line: 2000, column: 9, scope: !3992)
!3996 = !DILocation(line: 2002, column: 24, scope: !3997)
!3997 = distinct !DILexicalBlock(scope: !3970, file: !4, line: 2002, column: 9)
!3998 = !DILocation(line: 2002, column: 34, scope: !3997)
!3999 = !DILocation(line: 2002, column: 39, scope: !3997)
!4000 = !DILocation(line: 2002, column: 44, scope: !3997)
!4001 = !DILocation(line: 2002, column: 9, scope: !3997)
!4002 = !DILocation(line: 2002, column: 53, scope: !3997)
!4003 = !DILocation(line: 2002, column: 9, scope: !3970)
!4004 = !DILocation(line: 2003, column: 9, scope: !4005)
!4005 = distinct !DILexicalBlock(scope: !3997, file: !4, line: 2002, column: 59)
!4006 = !DILocation(line: 2003, column: 12, scope: !4005)
!4007 = !DILocation(line: 2003, column: 16, scope: !4005)
!4008 = !DILocation(line: 2004, column: 9, scope: !4005)
!4009 = !DILocation(line: 2006, column: 29, scope: !4010)
!4010 = distinct !DILexicalBlock(scope: !3970, file: !4, line: 2006, column: 9)
!4011 = !DILocation(line: 2007, column: 29, scope: !4010)
!4012 = !DILocation(line: 2007, column: 39, scope: !4010)
!4013 = !DILocation(line: 2007, column: 47, scope: !4010)
!4014 = !DILocation(line: 2007, column: 57, scope: !4010)
!4015 = !DILocation(line: 2008, column: 29, scope: !4010)
!4016 = !DILocation(line: 2008, column: 34, scope: !4010)
!4017 = !DILocation(line: 2006, column: 10, scope: !4010)
!4018 = !DILocation(line: 2006, column: 9, scope: !3970)
!4019 = !DILocation(line: 2009, column: 9, scope: !4010)
!4020 = !DILocation(line: 2011, column: 5, scope: !3970)
!4021 = !DILocation(line: 2011, column: 8, scope: !3970)
!4022 = !DILocation(line: 2011, column: 12, scope: !3970)
!4023 = !DILocation(line: 2014, column: 17, scope: !3970)
!4024 = !DILocation(line: 2014, column: 5, scope: !3970)
!4025 = !DILocation(line: 2015, column: 5, scope: !3970)
!4026 = distinct !DISubprogram(name: "kdf_test_ctrl", scope: !4, file: !4, line: 1945, type: !4027, isLocal: true, isDefinition: true, scopeLine: 1947, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4027 = !DISubroutineType(types: !4028)
!4028 = !{!31, !100, !3873, !67}
!4029 = !DILocalVariable(name: "t", arg: 1, scope: !4026, file: !4, line: 1945, type: !100)
!4030 = !DILocation(line: 1945, column: 36, scope: !4026)
!4031 = !DILocalVariable(name: "kctx", arg: 2, scope: !4026, file: !4, line: 1945, type: !3873)
!4032 = !DILocation(line: 1945, column: 52, scope: !4026)
!4033 = !DILocalVariable(name: "value", arg: 3, scope: !4026, file: !4, line: 1946, type: !67)
!4034 = !DILocation(line: 1946, column: 38, scope: !4026)
!4035 = !DILocalVariable(name: "rv", scope: !4026, file: !4, line: 1948, type: !31)
!4036 = !DILocation(line: 1948, column: 9, scope: !4026)
!4037 = !DILocalVariable(name: "p", scope: !4026, file: !4, line: 1949, type: !64)
!4038 = !DILocation(line: 1949, column: 11, scope: !4026)
!4039 = !DILocalVariable(name: "tmpval", scope: !4026, file: !4, line: 1949, type: !64)
!4040 = !DILocation(line: 1949, column: 15, scope: !4026)
!4041 = !DILocation(line: 1951, column: 101, scope: !4042)
!4042 = distinct !DILexicalBlock(scope: !4026, file: !4, line: 1951, column: 9)
!4043 = !DILocation(line: 1951, column: 87, scope: !4042)
!4044 = !DILocation(line: 1951, column: 85, scope: !4042)
!4045 = !DILocation(line: 1951, column: 10, scope: !4046)
!4046 = !DILexicalBlockFile(scope: !4042, file: !4, discriminator: 1)
!4047 = !DILocation(line: 1951, column: 10, scope: !4042)
!4048 = !DILocation(line: 1951, column: 9, scope: !4026)
!4049 = !DILocation(line: 1952, column: 9, scope: !4042)
!4050 = !DILocation(line: 1953, column: 16, scope: !4026)
!4051 = !DILocation(line: 1953, column: 9, scope: !4026)
!4052 = !DILocation(line: 1953, column: 7, scope: !4026)
!4053 = !DILocation(line: 1954, column: 9, scope: !4054)
!4054 = distinct !DILexicalBlock(scope: !4026, file: !4, line: 1954, column: 9)
!4055 = !DILocation(line: 1954, column: 11, scope: !4054)
!4056 = !DILocation(line: 1954, column: 9, scope: !4026)
!4057 = !DILocation(line: 1955, column: 11, scope: !4054)
!4058 = !DILocation(line: 1955, column: 14, scope: !4054)
!4059 = !DILocation(line: 1955, column: 9, scope: !4054)
!4060 = !DILocation(line: 1956, column: 27, scope: !4026)
!4061 = !DILocation(line: 1956, column: 33, scope: !4026)
!4062 = !DILocation(line: 1956, column: 41, scope: !4026)
!4063 = !DILocation(line: 1956, column: 10, scope: !4026)
!4064 = !DILocation(line: 1956, column: 8, scope: !4026)
!4065 = !DILocation(line: 1957, column: 9, scope: !4066)
!4066 = distinct !DILexicalBlock(scope: !4026, file: !4, line: 1957, column: 9)
!4067 = !DILocation(line: 1957, column: 12, scope: !4066)
!4068 = !DILocation(line: 1957, column: 9, scope: !4026)
!4069 = !DILocation(line: 1958, column: 9, scope: !4070)
!4070 = distinct !DILexicalBlock(scope: !4066, file: !4, line: 1957, column: 19)
!4071 = !DILocation(line: 1958, column: 12, scope: !4070)
!4072 = !DILocation(line: 1958, column: 16, scope: !4070)
!4073 = !DILocation(line: 1959, column: 12, scope: !4070)
!4074 = !DILocation(line: 1960, column: 5, scope: !4070)
!4075 = !DILocation(line: 1960, column: 16, scope: !4076)
!4076 = !DILexicalBlockFile(scope: !4077, file: !4, discriminator: 1)
!4077 = distinct !DILexicalBlock(scope: !4066, file: !4, line: 1960, column: 16)
!4078 = !DILocation(line: 1960, column: 18, scope: !4076)
!4079 = !DILocation(line: 1960, column: 25, scope: !4076)
!4080 = !DILocation(line: 1960, column: 28, scope: !4081)
!4081 = !DILexicalBlockFile(scope: !4077, file: !4, discriminator: 2)
!4082 = !DILocation(line: 1960, column: 31, scope: !4081)
!4083 = !DILocation(line: 1960, column: 16, scope: !4081)
!4084 = !DILocalVariable(name: "nid", scope: !4085, file: !4, line: 1962, type: !31)
!4085 = distinct !DILexicalBlock(scope: !4077, file: !4, line: 1960, column: 37)
!4086 = !DILocation(line: 1962, column: 13, scope: !4085)
!4087 = !DILocation(line: 1962, column: 30, scope: !4085)
!4088 = !DILocation(line: 1962, column: 19, scope: !4085)
!4089 = !DILocation(line: 1964, column: 13, scope: !4090)
!4090 = distinct !DILexicalBlock(scope: !4085, file: !4, line: 1964, column: 13)
!4091 = !DILocation(line: 1964, column: 17, scope: !4090)
!4092 = !DILocation(line: 1964, column: 13, scope: !4085)
!4093 = !DILocation(line: 1965, column: 31, scope: !4090)
!4094 = !DILocation(line: 1965, column: 20, scope: !4090)
!4095 = !DILocation(line: 1965, column: 18, scope: !4090)
!4096 = !DILocation(line: 1965, column: 14, scope: !4090)
!4097 = !DILocation(line: 1966, column: 13, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !4085, file: !4, line: 1966, column: 13)
!4099 = !DILocation(line: 1966, column: 17, scope: !4098)
!4100 = !DILocation(line: 1967, column: 17, scope: !4098)
!4101 = !DILocation(line: 1967, column: 52, scope: !4102)
!4102 = !DILexicalBlockFile(scope: !4098, file: !4, discriminator: 1)
!4103 = !DILocation(line: 1967, column: 41, scope: !4102)
!4104 = !DILocation(line: 1967, column: 20, scope: !4105)
!4105 = !DILexicalBlockFile(scope: !4102, file: !4, discriminator: 2)
!4106 = !DILocation(line: 1967, column: 58, scope: !4102)
!4107 = !DILocation(line: 1968, column: 16, scope: !4098)
!4108 = !DILocation(line: 1968, column: 51, scope: !4102)
!4109 = !DILocation(line: 1968, column: 40, scope: !4102)
!4110 = !DILocation(line: 1968, column: 19, scope: !4105)
!4111 = !DILocation(line: 1968, column: 57, scope: !4102)
!4112 = !DILocation(line: 1966, column: 13, scope: !4113)
!4113 = !DILexicalBlockFile(scope: !4085, file: !4, discriminator: 1)
!4114 = !DILocation(line: 1969, column: 13, scope: !4115)
!4115 = distinct !DILexicalBlock(scope: !4098, file: !4, line: 1968, column: 53)
!4116 = !DILocation(line: 1969, column: 16, scope: !4115)
!4117 = !DILocation(line: 1969, column: 21, scope: !4115)
!4118 = !DILocation(line: 1970, column: 16, scope: !4115)
!4119 = !DILocation(line: 1971, column: 9, scope: !4115)
!4120 = !DILocation(line: 1972, column: 13, scope: !4121)
!4121 = distinct !DILexicalBlock(scope: !4098, file: !4, line: 1971, column: 16)
!4122 = !DILocation(line: 1972, column: 16, scope: !4121)
!4123 = !DILocation(line: 1972, column: 20, scope: !4121)
!4124 = !DILocation(line: 1973, column: 16, scope: !4121)
!4125 = !DILocation(line: 1975, column: 5, scope: !4085)
!4126 = !DILocation(line: 1976, column: 17, scope: !4026)
!4127 = !DILocation(line: 1976, column: 5, scope: !4026)
!4128 = !DILocation(line: 1977, column: 12, scope: !4026)
!4129 = !DILocation(line: 1977, column: 15, scope: !4026)
!4130 = !DILocation(line: 1977, column: 5, scope: !4026)
!4131 = !DILocation(line: 1978, column: 1, scope: !4026)
!4132 = distinct !DISubprogram(name: "pkey_kdf_test_init", scope: !4, file: !4, line: 2043, type: !98, isLocal: true, isDefinition: true, scopeLine: 2044, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4133 = !DILocalVariable(name: "t", arg: 1, scope: !4132, file: !4, line: 2043, type: !100)
!4134 = !DILocation(line: 2043, column: 41, scope: !4132)
!4135 = !DILocalVariable(name: "name", arg: 2, scope: !4132, file: !4, line: 2043, type: !67)
!4136 = !DILocation(line: 2043, column: 56, scope: !4132)
!4137 = !DILocalVariable(name: "kdata", scope: !4132, file: !4, line: 2045, type: !4138)
!4138 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4139, size: 64, align: 64)
!4139 = !DIDerivedType(tag: DW_TAG_typedef, name: "PKEY_KDF_DATA", file: !4, line: 2037, baseType: !4140)
!4140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pkey_kdf_data_st", file: !4, line: 2031, size: 192, align: 64, elements: !4141)
!4141 = !{!4142, !4143, !4144}
!4142 = !DIDerivedType(tag: DW_TAG_member, name: "ctx", scope: !4140, file: !4, line: 2033, baseType: !3016, size: 64, align: 64)
!4143 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !4140, file: !4, line: 2035, baseType: !56, size: 64, align: 64, offset: 64)
!4144 = !DIDerivedType(tag: DW_TAG_member, name: "output_len", scope: !4140, file: !4, line: 2036, baseType: !33, size: 64, align: 64, offset: 128)
!4145 = !DILocation(line: 2045, column: 20, scope: !4132)
!4146 = !DILocalVariable(name: "kdf_nid", scope: !4132, file: !4, line: 2046, type: !31)
!4147 = !DILocation(line: 2046, column: 9, scope: !4132)
!4148 = !DILocation(line: 2046, column: 30, scope: !4132)
!4149 = !DILocation(line: 2046, column: 19, scope: !4132)
!4150 = !DILocation(line: 2055, column: 9, scope: !4151)
!4151 = distinct !DILexicalBlock(scope: !4132, file: !4, line: 2055, column: 9)
!4152 = !DILocation(line: 2055, column: 17, scope: !4151)
!4153 = !DILocation(line: 2055, column: 9, scope: !4132)
!4154 = !DILocation(line: 2056, column: 30, scope: !4151)
!4155 = !DILocation(line: 2056, column: 19, scope: !4151)
!4156 = !DILocation(line: 2056, column: 17, scope: !4151)
!4157 = !DILocation(line: 2056, column: 9, scope: !4151)
!4158 = !DILocation(line: 2058, column: 94, scope: !4159)
!4159 = distinct !DILexicalBlock(scope: !4132, file: !4, line: 2058, column: 9)
!4160 = !DILocation(line: 2058, column: 92, scope: !4159)
!4161 = !DILocation(line: 2058, column: 86, scope: !4159)
!4162 = !DILocation(line: 2058, column: 10, scope: !4163)
!4163 = !DILexicalBlockFile(scope: !4159, file: !4, discriminator: 1)
!4164 = !DILocation(line: 2058, column: 10, scope: !4159)
!4165 = !DILocation(line: 2058, column: 9, scope: !4132)
!4166 = !DILocation(line: 2059, column: 9, scope: !4159)
!4167 = !DILocation(line: 2060, column: 38, scope: !4132)
!4168 = !DILocation(line: 2060, column: 18, scope: !4132)
!4169 = !DILocation(line: 2060, column: 5, scope: !4132)
!4170 = !DILocation(line: 2060, column: 12, scope: !4132)
!4171 = !DILocation(line: 2060, column: 16, scope: !4132)
!4172 = !DILocation(line: 2061, column: 9, scope: !4173)
!4173 = distinct !DILexicalBlock(scope: !4132, file: !4, line: 2061, column: 9)
!4174 = !DILocation(line: 2061, column: 16, scope: !4173)
!4175 = !DILocation(line: 2061, column: 20, scope: !4173)
!4176 = !DILocation(line: 2061, column: 9, scope: !4132)
!4177 = !DILocation(line: 2062, column: 21, scope: !4178)
!4178 = distinct !DILexicalBlock(scope: !4173, file: !4, line: 2061, column: 28)
!4179 = !DILocation(line: 2062, column: 9, scope: !4178)
!4180 = !DILocation(line: 2063, column: 9, scope: !4178)
!4181 = !DILocation(line: 2065, column: 30, scope: !4182)
!4182 = distinct !DILexicalBlock(scope: !4132, file: !4, line: 2065, column: 9)
!4183 = !DILocation(line: 2065, column: 37, scope: !4182)
!4184 = !DILocation(line: 2065, column: 9, scope: !4182)
!4185 = !DILocation(line: 2065, column: 42, scope: !4182)
!4186 = !DILocation(line: 2065, column: 9, scope: !4132)
!4187 = !DILocation(line: 2066, column: 27, scope: !4188)
!4188 = distinct !DILexicalBlock(scope: !4182, file: !4, line: 2065, column: 48)
!4189 = !DILocation(line: 2066, column: 34, scope: !4188)
!4190 = !DILocation(line: 2066, column: 9, scope: !4188)
!4191 = !DILocation(line: 2067, column: 21, scope: !4188)
!4192 = !DILocation(line: 2067, column: 9, scope: !4188)
!4193 = !DILocation(line: 2068, column: 9, scope: !4188)
!4194 = !DILocation(line: 2070, column: 15, scope: !4132)
!4195 = !DILocation(line: 2070, column: 5, scope: !4132)
!4196 = !DILocation(line: 2070, column: 8, scope: !4132)
!4197 = !DILocation(line: 2070, column: 13, scope: !4132)
!4198 = !DILocation(line: 2071, column: 5, scope: !4132)
!4199 = !DILocation(line: 2072, column: 1, scope: !4132)
!4200 = distinct !DISubprogram(name: "pkey_kdf_test_cleanup", scope: !4, file: !4, line: 2074, type: !146, isLocal: true, isDefinition: true, scopeLine: 2075, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4201 = !DILocalVariable(name: "t", arg: 1, scope: !4200, file: !4, line: 2074, type: !100)
!4202 = !DILocation(line: 2074, column: 45, scope: !4200)
!4203 = !DILocalVariable(name: "kdata", scope: !4200, file: !4, line: 2076, type: !4138)
!4204 = !DILocation(line: 2076, column: 20, scope: !4200)
!4205 = !DILocation(line: 2076, column: 28, scope: !4200)
!4206 = !DILocation(line: 2076, column: 31, scope: !4200)
!4207 = !DILocation(line: 2077, column: 17, scope: !4200)
!4208 = !DILocation(line: 2077, column: 24, scope: !4200)
!4209 = !DILocation(line: 2077, column: 5, scope: !4200)
!4210 = !DILocation(line: 2078, column: 23, scope: !4200)
!4211 = !DILocation(line: 2078, column: 30, scope: !4200)
!4212 = !DILocation(line: 2078, column: 5, scope: !4200)
!4213 = !DILocation(line: 2079, column: 1, scope: !4200)
!4214 = distinct !DISubprogram(name: "pkey_kdf_test_parse", scope: !4, file: !4, line: 2081, type: !150, isLocal: true, isDefinition: true, scopeLine: 2083, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4215 = !DILocalVariable(name: "t", arg: 1, scope: !4214, file: !4, line: 2081, type: !100)
!4216 = !DILocation(line: 2081, column: 42, scope: !4214)
!4217 = !DILocalVariable(name: "keyword", arg: 2, scope: !4214, file: !4, line: 2082, type: !67)
!4218 = !DILocation(line: 2082, column: 44, scope: !4214)
!4219 = !DILocalVariable(name: "value", arg: 3, scope: !4214, file: !4, line: 2082, type: !67)
!4220 = !DILocation(line: 2082, column: 65, scope: !4214)
!4221 = !DILocalVariable(name: "kdata", scope: !4214, file: !4, line: 2084, type: !4138)
!4222 = !DILocation(line: 2084, column: 20, scope: !4214)
!4223 = !DILocation(line: 2084, column: 28, scope: !4214)
!4224 = !DILocation(line: 2084, column: 31, scope: !4214)
!4225 = !DILocation(line: 2086, column: 16, scope: !4226)
!4226 = distinct !DILexicalBlock(scope: !4214, file: !4, line: 2086, column: 9)
!4227 = !DILocation(line: 2086, column: 9, scope: !4226)
!4228 = !DILocation(line: 2086, column: 35, scope: !4226)
!4229 = !DILocation(line: 2086, column: 9, scope: !4214)
!4230 = !DILocation(line: 2087, column: 26, scope: !4226)
!4231 = !DILocation(line: 2087, column: 34, scope: !4226)
!4232 = !DILocation(line: 2087, column: 41, scope: !4226)
!4233 = !DILocation(line: 2087, column: 50, scope: !4226)
!4234 = !DILocation(line: 2087, column: 57, scope: !4226)
!4235 = !DILocation(line: 2087, column: 16, scope: !4226)
!4236 = !DILocation(line: 2087, column: 9, scope: !4226)
!4237 = !DILocation(line: 2088, column: 17, scope: !4238)
!4238 = distinct !DILexicalBlock(scope: !4214, file: !4, line: 2088, column: 9)
!4239 = !DILocation(line: 2088, column: 9, scope: !4238)
!4240 = !DILocation(line: 2088, column: 37, scope: !4238)
!4241 = !DILocation(line: 2088, column: 9, scope: !4214)
!4242 = !DILocation(line: 2089, column: 31, scope: !4238)
!4243 = !DILocation(line: 2089, column: 34, scope: !4238)
!4244 = !DILocation(line: 2089, column: 41, scope: !4238)
!4245 = !DILocation(line: 2089, column: 46, scope: !4238)
!4246 = !DILocation(line: 2089, column: 16, scope: !4238)
!4247 = !DILocation(line: 2089, column: 9, scope: !4238)
!4248 = !DILocation(line: 2090, column: 5, scope: !4214)
!4249 = !DILocation(line: 2091, column: 1, scope: !4214)
!4250 = distinct !DISubprogram(name: "pkey_kdf_test_run", scope: !4, file: !4, line: 2093, type: !154, isLocal: true, isDefinition: true, scopeLine: 2094, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4251 = !DILocalVariable(name: "t", arg: 1, scope: !4250, file: !4, line: 2093, type: !100)
!4252 = !DILocation(line: 2093, column: 40, scope: !4250)
!4253 = !DILocalVariable(name: "expected", scope: !4250, file: !4, line: 2095, type: !4138)
!4254 = !DILocation(line: 2095, column: 20, scope: !4250)
!4255 = !DILocation(line: 2095, column: 31, scope: !4250)
!4256 = !DILocation(line: 2095, column: 34, scope: !4250)
!4257 = !DILocalVariable(name: "got", scope: !4250, file: !4, line: 2096, type: !56)
!4258 = !DILocation(line: 2096, column: 20, scope: !4250)
!4259 = !DILocalVariable(name: "got_len", scope: !4250, file: !4, line: 2097, type: !33)
!4260 = !DILocation(line: 2097, column: 12, scope: !4250)
!4261 = !DILocation(line: 2097, column: 22, scope: !4250)
!4262 = !DILocation(line: 2097, column: 32, scope: !4250)
!4263 = !DILocation(line: 2099, column: 97, scope: !4264)
!4264 = distinct !DILexicalBlock(scope: !4250, file: !4, line: 2099, column: 9)
!4265 = !DILocation(line: 2099, column: 83, scope: !4264)
!4266 = !DILocation(line: 2099, column: 81, scope: !4264)
!4267 = !DILocation(line: 2099, column: 10, scope: !4268)
!4268 = !DILexicalBlockFile(scope: !4264, file: !4, discriminator: 1)
!4269 = !DILocation(line: 2099, column: 10, scope: !4264)
!4270 = !DILocation(line: 2099, column: 9, scope: !4250)
!4271 = !DILocation(line: 2100, column: 9, scope: !4272)
!4272 = distinct !DILexicalBlock(scope: !4264, file: !4, line: 2099, column: 133)
!4273 = !DILocation(line: 2100, column: 12, scope: !4272)
!4274 = !DILocation(line: 2100, column: 16, scope: !4272)
!4275 = !DILocation(line: 2101, column: 9, scope: !4272)
!4276 = !DILocation(line: 2103, column: 25, scope: !4277)
!4277 = distinct !DILexicalBlock(scope: !4250, file: !4, line: 2103, column: 9)
!4278 = !DILocation(line: 2103, column: 35, scope: !4277)
!4279 = !DILocation(line: 2103, column: 40, scope: !4277)
!4280 = !DILocation(line: 2103, column: 9, scope: !4277)
!4281 = !DILocation(line: 2103, column: 55, scope: !4277)
!4282 = !DILocation(line: 2103, column: 9, scope: !4250)
!4283 = !DILocation(line: 2104, column: 9, scope: !4284)
!4284 = distinct !DILexicalBlock(scope: !4277, file: !4, line: 2103, column: 61)
!4285 = !DILocation(line: 2104, column: 12, scope: !4284)
!4286 = !DILocation(line: 2104, column: 16, scope: !4284)
!4287 = !DILocation(line: 2105, column: 9, scope: !4284)
!4288 = !DILocation(line: 2107, column: 74, scope: !4289)
!4289 = distinct !DILexicalBlock(scope: !4250, file: !4, line: 2107, column: 9)
!4290 = !DILocation(line: 2107, column: 84, scope: !4289)
!4291 = !DILocation(line: 2107, column: 92, scope: !4289)
!4292 = !DILocation(line: 2107, column: 102, scope: !4289)
!4293 = !DILocation(line: 2107, column: 114, scope: !4289)
!4294 = !DILocation(line: 2107, column: 119, scope: !4289)
!4295 = !DILocation(line: 2107, column: 10, scope: !4289)
!4296 = !DILocation(line: 2107, column: 9, scope: !4250)
!4297 = !DILocation(line: 2108, column: 9, scope: !4298)
!4298 = distinct !DILexicalBlock(scope: !4289, file: !4, line: 2107, column: 129)
!4299 = !DILocation(line: 2108, column: 12, scope: !4298)
!4300 = !DILocation(line: 2108, column: 16, scope: !4298)
!4301 = !DILocation(line: 2109, column: 9, scope: !4298)
!4302 = !DILocation(line: 2111, column: 5, scope: !4250)
!4303 = !DILocation(line: 2111, column: 8, scope: !4250)
!4304 = !DILocation(line: 2111, column: 12, scope: !4250)
!4305 = !DILocation(line: 2114, column: 17, scope: !4250)
!4306 = !DILocation(line: 2114, column: 5, scope: !4250)
!4307 = !DILocation(line: 2115, column: 5, scope: !4250)
!4308 = distinct !DISubprogram(name: "keypair_test_init", scope: !4, file: !4, line: 2136, type: !98, isLocal: true, isDefinition: true, scopeLine: 2137, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4309 = !DILocalVariable(name: "t", arg: 1, scope: !4308, file: !4, line: 2136, type: !100)
!4310 = !DILocation(line: 2136, column: 40, scope: !4308)
!4311 = !DILocalVariable(name: "pair", arg: 2, scope: !4308, file: !4, line: 2136, type: !67)
!4312 = !DILocation(line: 2136, column: 55, scope: !4308)
!4313 = !DILocalVariable(name: "data", scope: !4308, file: !4, line: 2138, type: !4314)
!4314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4315, size: 64, align: 64)
!4315 = !DIDerivedType(tag: DW_TAG_typedef, name: "KEYPAIR_TEST_DATA", file: !4, line: 2134, baseType: !4316)
!4316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "keypair_test_data_st", file: !4, line: 2131, size: 128, align: 64, elements: !4317)
!4317 = !{!4318, !4319}
!4318 = !DIDerivedType(tag: DW_TAG_member, name: "privk", scope: !4316, file: !4, line: 2132, baseType: !193, size: 64, align: 64)
!4319 = !DIDerivedType(tag: DW_TAG_member, name: "pubk", scope: !4316, file: !4, line: 2133, baseType: !193, size: 64, align: 64, offset: 64)
!4320 = !DILocation(line: 2138, column: 24, scope: !4308)
!4321 = !DILocalVariable(name: "rv", scope: !4308, file: !4, line: 2139, type: !31)
!4322 = !DILocation(line: 2139, column: 9, scope: !4308)
!4323 = !DILocalVariable(name: "pk", scope: !4308, file: !4, line: 2140, type: !193)
!4324 = !DILocation(line: 2140, column: 15, scope: !4308)
!4325 = !DILocalVariable(name: "pubk", scope: !4308, file: !4, line: 2140, type: !193)
!4326 = !DILocation(line: 2140, column: 26, scope: !4308)
!4327 = !DILocalVariable(name: "pub", scope: !4308, file: !4, line: 2141, type: !64)
!4328 = !DILocation(line: 2141, column: 11, scope: !4308)
!4329 = !DILocalVariable(name: "priv", scope: !4308, file: !4, line: 2141, type: !64)
!4330 = !DILocation(line: 2141, column: 17, scope: !4308)
!4331 = !DILocation(line: 2144, column: 96, scope: !4332)
!4332 = distinct !DILexicalBlock(scope: !4308, file: !4, line: 2144, column: 9)
!4333 = !DILocation(line: 2144, column: 82, scope: !4332)
!4334 = !DILocation(line: 2144, column: 80, scope: !4332)
!4335 = !DILocation(line: 2144, column: 10, scope: !4336)
!4336 = !DILexicalBlockFile(scope: !4332, file: !4, discriminator: 2)
!4337 = !DILocation(line: 2144, column: 10, scope: !4332)
!4338 = !DILocation(line: 2145, column: 13, scope: !4332)
!4339 = !DILocation(line: 2145, column: 91, scope: !4340)
!4340 = !DILexicalBlockFile(scope: !4332, file: !4, discriminator: 1)
!4341 = !DILocation(line: 2145, column: 84, scope: !4340)
!4342 = !DILocation(line: 2145, column: 82, scope: !4340)
!4343 = !DILocation(line: 2145, column: 17, scope: !4344)
!4344 = !DILexicalBlockFile(scope: !4340, file: !4, discriminator: 2)
!4345 = !DILocation(line: 2145, column: 17, scope: !4340)
!4346 = !DILocation(line: 2144, column: 9, scope: !4347)
!4347 = !DILexicalBlockFile(scope: !4308, file: !4, discriminator: 1)
!4348 = !DILocation(line: 2146, column: 9, scope: !4349)
!4349 = distinct !DILexicalBlock(scope: !4332, file: !4, line: 2145, column: 104)
!4350 = !DILocation(line: 2146, column: 12, scope: !4349)
!4351 = !DILocation(line: 2146, column: 16, scope: !4349)
!4352 = !DILocation(line: 2147, column: 9, scope: !4349)
!4353 = !DILocation(line: 2149, column: 9, scope: !4308)
!4354 = !DILocation(line: 2149, column: 12, scope: !4308)
!4355 = !DILocation(line: 2151, column: 97, scope: !4356)
!4356 = distinct !DILexicalBlock(scope: !4308, file: !4, line: 2151, column: 9)
!4357 = !DILocation(line: 2151, column: 103, scope: !4356)
!4358 = !DILocation(line: 2151, column: 83, scope: !4356)
!4359 = !DILocation(line: 2151, column: 118, scope: !4356)
!4360 = !DILocation(line: 2151, column: 10, scope: !4361)
!4361 = !DILexicalBlockFile(scope: !4356, file: !4, discriminator: 1)
!4362 = !DILocation(line: 2151, column: 10, scope: !4356)
!4363 = !DILocation(line: 2151, column: 9, scope: !4308)
!4364 = !DILocation(line: 2152, column: 74, scope: !4365)
!4365 = distinct !DILexicalBlock(scope: !4356, file: !4, line: 2151, column: 125)
!4366 = !DILocation(line: 2152, column: 9, scope: !4365)
!4367 = !DILocation(line: 2153, column: 9, scope: !4365)
!4368 = !DILocation(line: 2153, column: 12, scope: !4365)
!4369 = !DILocation(line: 2153, column: 16, scope: !4365)
!4370 = !DILocation(line: 2154, column: 9, scope: !4365)
!4371 = !DILocation(line: 2156, column: 99, scope: !4372)
!4372 = distinct !DILexicalBlock(scope: !4308, file: !4, line: 2156, column: 9)
!4373 = !DILocation(line: 2156, column: 104, scope: !4372)
!4374 = !DILocation(line: 2156, column: 83, scope: !4372)
!4375 = !DILocation(line: 2156, column: 118, scope: !4372)
!4376 = !DILocation(line: 2156, column: 10, scope: !4377)
!4377 = !DILexicalBlockFile(scope: !4372, file: !4, discriminator: 1)
!4378 = !DILocation(line: 2156, column: 10, scope: !4372)
!4379 = !DILocation(line: 2156, column: 9, scope: !4308)
!4380 = !DILocation(line: 2157, column: 73, scope: !4381)
!4381 = distinct !DILexicalBlock(scope: !4372, file: !4, line: 2156, column: 125)
!4382 = !DILocation(line: 2157, column: 9, scope: !4381)
!4383 = !DILocation(line: 2158, column: 9, scope: !4381)
!4384 = !DILocation(line: 2158, column: 12, scope: !4381)
!4385 = !DILocation(line: 2158, column: 16, scope: !4381)
!4386 = !DILocation(line: 2159, column: 9, scope: !4381)
!4387 = !DILocation(line: 2162, column: 9, scope: !4388)
!4388 = distinct !DILexicalBlock(scope: !4308, file: !4, line: 2162, column: 9)
!4389 = !DILocation(line: 2162, column: 12, scope: !4388)
!4390 = !DILocation(line: 2162, column: 19, scope: !4388)
!4391 = !DILocation(line: 2162, column: 22, scope: !4392)
!4392 = !DILexicalBlockFile(scope: !4388, file: !4, discriminator: 1)
!4393 = !DILocation(line: 2162, column: 27, scope: !4392)
!4394 = !DILocation(line: 2162, column: 9, scope: !4392)
!4395 = !DILocation(line: 2164, column: 9, scope: !4396)
!4396 = distinct !DILexicalBlock(scope: !4388, file: !4, line: 2162, column: 36)
!4397 = !DILocation(line: 2164, column: 12, scope: !4396)
!4398 = !DILocation(line: 2164, column: 17, scope: !4396)
!4399 = !DILocation(line: 2165, column: 12, scope: !4396)
!4400 = !DILocation(line: 2166, column: 9, scope: !4396)
!4401 = !DILocation(line: 2169, column: 91, scope: !4402)
!4402 = distinct !DILexicalBlock(scope: !4308, file: !4, line: 2169, column: 9)
!4403 = !DILocation(line: 2169, column: 89, scope: !4402)
!4404 = !DILocation(line: 2169, column: 84, scope: !4402)
!4405 = !DILocation(line: 2169, column: 10, scope: !4406)
!4406 = !DILexicalBlockFile(scope: !4402, file: !4, discriminator: 1)
!4407 = !DILocation(line: 2169, column: 10, scope: !4402)
!4408 = !DILocation(line: 2169, column: 9, scope: !4308)
!4409 = !DILocation(line: 2170, column: 9, scope: !4402)
!4410 = !DILocation(line: 2171, column: 19, scope: !4308)
!4411 = !DILocation(line: 2171, column: 5, scope: !4308)
!4412 = !DILocation(line: 2171, column: 11, scope: !4308)
!4413 = !DILocation(line: 2171, column: 17, scope: !4308)
!4414 = !DILocation(line: 2172, column: 18, scope: !4308)
!4415 = !DILocation(line: 2172, column: 5, scope: !4308)
!4416 = !DILocation(line: 2172, column: 11, scope: !4308)
!4417 = !DILocation(line: 2172, column: 16, scope: !4308)
!4418 = !DILocation(line: 2173, column: 15, scope: !4308)
!4419 = !DILocation(line: 2173, column: 5, scope: !4308)
!4420 = !DILocation(line: 2173, column: 8, scope: !4308)
!4421 = !DILocation(line: 2173, column: 13, scope: !4308)
!4422 = !DILocation(line: 2174, column: 8, scope: !4308)
!4423 = !DILocation(line: 2175, column: 5, scope: !4308)
!4424 = !DILocation(line: 2175, column: 8, scope: !4308)
!4425 = !DILocation(line: 2175, column: 12, scope: !4308)
!4426 = !DILocation(line: 2178, column: 17, scope: !4308)
!4427 = !DILocation(line: 2178, column: 5, scope: !4308)
!4428 = !DILocation(line: 2179, column: 12, scope: !4308)
!4429 = !DILocation(line: 2179, column: 5, scope: !4308)
!4430 = distinct !DISubprogram(name: "keypair_test_cleanup", scope: !4, file: !4, line: 2182, type: !146, isLocal: true, isDefinition: true, scopeLine: 2183, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4431 = !DILocalVariable(name: "t", arg: 1, scope: !4430, file: !4, line: 2182, type: !100)
!4432 = !DILocation(line: 2182, column: 44, scope: !4430)
!4433 = !DILocation(line: 2184, column: 17, scope: !4430)
!4434 = !DILocation(line: 2184, column: 20, scope: !4430)
!4435 = !DILocation(line: 2184, column: 5, scope: !4430)
!4436 = !DILocation(line: 2185, column: 5, scope: !4430)
!4437 = !DILocation(line: 2185, column: 8, scope: !4430)
!4438 = !DILocation(line: 2185, column: 13, scope: !4430)
!4439 = !DILocation(line: 2186, column: 1, scope: !4430)
!4440 = distinct !DISubprogram(name: "void_test_parse", scope: !4, file: !4, line: 2191, type: !150, isLocal: true, isDefinition: true, scopeLine: 2192, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4441 = !DILocalVariable(name: "t", arg: 1, scope: !4440, file: !4, line: 2191, type: !100)
!4442 = !DILocation(line: 2191, column: 38, scope: !4440)
!4443 = !DILocalVariable(name: "keyword", arg: 2, scope: !4440, file: !4, line: 2191, type: !67)
!4444 = !DILocation(line: 2191, column: 53, scope: !4440)
!4445 = !DILocalVariable(name: "value", arg: 3, scope: !4440, file: !4, line: 2191, type: !67)
!4446 = !DILocation(line: 2191, column: 74, scope: !4440)
!4447 = !DILocation(line: 2193, column: 5, scope: !4440)
!4448 = distinct !DISubprogram(name: "keypair_test_run", scope: !4, file: !4, line: 2196, type: !154, isLocal: true, isDefinition: true, scopeLine: 2197, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4449 = !DILocalVariable(name: "t", arg: 1, scope: !4448, file: !4, line: 2196, type: !100)
!4450 = !DILocation(line: 2196, column: 39, scope: !4448)
!4451 = !DILocalVariable(name: "rv", scope: !4448, file: !4, line: 2198, type: !31)
!4452 = !DILocation(line: 2198, column: 9, scope: !4448)
!4453 = !DILocalVariable(name: "pair", scope: !4448, file: !4, line: 2199, type: !4454)
!4454 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4455, size: 64, align: 64)
!4455 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4315)
!4456 = !DILocation(line: 2199, column: 30, scope: !4448)
!4457 = !DILocation(line: 2199, column: 37, scope: !4448)
!4458 = !DILocation(line: 2199, column: 40, scope: !4448)
!4459 = !DILocation(line: 2201, column: 9, scope: !4460)
!4460 = distinct !DILexicalBlock(scope: !4448, file: !4, line: 2201, column: 9)
!4461 = !DILocation(line: 2201, column: 15, scope: !4460)
!4462 = !DILocation(line: 2201, column: 21, scope: !4460)
!4463 = !DILocation(line: 2201, column: 28, scope: !4460)
!4464 = !DILocation(line: 2201, column: 31, scope: !4465)
!4465 = !DILexicalBlockFile(scope: !4460, file: !4, discriminator: 1)
!4466 = !DILocation(line: 2201, column: 37, scope: !4465)
!4467 = !DILocation(line: 2201, column: 42, scope: !4465)
!4468 = !DILocation(line: 2201, column: 9, scope: !4465)
!4469 = !DILocation(line: 2207, column: 9, scope: !4470)
!4470 = distinct !DILexicalBlock(scope: !4460, file: !4, line: 2201, column: 51)
!4471 = !DILocation(line: 2207, column: 12, scope: !4470)
!4472 = !DILocation(line: 2207, column: 16, scope: !4470)
!4473 = !DILocation(line: 2208, column: 12, scope: !4470)
!4474 = !DILocation(line: 2209, column: 9, scope: !4470)
!4475 = !DILocation(line: 2212, column: 28, scope: !4476)
!4476 = distinct !DILexicalBlock(scope: !4448, file: !4, line: 2212, column: 9)
!4477 = !DILocation(line: 2212, column: 34, scope: !4476)
!4478 = !DILocation(line: 2212, column: 41, scope: !4476)
!4479 = !DILocation(line: 2212, column: 47, scope: !4476)
!4480 = !DILocation(line: 2212, column: 15, scope: !4476)
!4481 = !DILocation(line: 2212, column: 13, scope: !4476)
!4482 = !DILocation(line: 2212, column: 54, scope: !4476)
!4483 = !DILocation(line: 2212, column: 9, scope: !4448)
!4484 = !DILocation(line: 2213, column: 19, scope: !4485)
!4485 = distinct !DILexicalBlock(scope: !4486, file: !4, line: 2213, column: 14)
!4486 = distinct !DILexicalBlock(scope: !4476, file: !4, line: 2212, column: 61)
!4487 = !DILocation(line: 2213, column: 16, scope: !4485)
!4488 = !DILocation(line: 2213, column: 14, scope: !4486)
!4489 = !DILocation(line: 2214, column: 13, scope: !4490)
!4490 = distinct !DILexicalBlock(scope: !4485, file: !4, line: 2213, column: 24)
!4491 = !DILocation(line: 2214, column: 16, scope: !4490)
!4492 = !DILocation(line: 2214, column: 20, scope: !4490)
!4493 = !DILocation(line: 2215, column: 9, scope: !4490)
!4494 = !DILocation(line: 2215, column: 27, scope: !4495)
!4495 = !DILexicalBlockFile(scope: !4496, file: !4, discriminator: 1)
!4496 = distinct !DILexicalBlock(scope: !4485, file: !4, line: 2215, column: 21)
!4497 = !DILocation(line: 2215, column: 24, scope: !4495)
!4498 = !DILocation(line: 2215, column: 21, scope: !4495)
!4499 = !DILocation(line: 2216, column: 13, scope: !4500)
!4500 = distinct !DILexicalBlock(scope: !4496, file: !4, line: 2215, column: 32)
!4501 = !DILocation(line: 2216, column: 16, scope: !4500)
!4502 = !DILocation(line: 2216, column: 20, scope: !4500)
!4503 = !DILocation(line: 2217, column: 9, scope: !4500)
!4504 = !DILocation(line: 2217, column: 27, scope: !4505)
!4505 = !DILexicalBlockFile(scope: !4506, file: !4, discriminator: 1)
!4506 = distinct !DILexicalBlock(scope: !4496, file: !4, line: 2217, column: 21)
!4507 = !DILocation(line: 2217, column: 24, scope: !4505)
!4508 = !DILocation(line: 2217, column: 21, scope: !4505)
!4509 = !DILocation(line: 2218, column: 13, scope: !4510)
!4510 = distinct !DILexicalBlock(scope: !4506, file: !4, line: 2217, column: 32)
!4511 = !DILocation(line: 2218, column: 16, scope: !4510)
!4512 = !DILocation(line: 2218, column: 20, scope: !4510)
!4513 = !DILocation(line: 2219, column: 9, scope: !4510)
!4514 = !DILocation(line: 2220, column: 13, scope: !4515)
!4515 = distinct !DILexicalBlock(scope: !4506, file: !4, line: 2219, column: 16)
!4516 = !DILocation(line: 2221, column: 16, scope: !4515)
!4517 = !DILocation(line: 2222, column: 13, scope: !4515)
!4518 = !DILocation(line: 2224, column: 12, scope: !4486)
!4519 = !DILocation(line: 2225, column: 9, scope: !4486)
!4520 = !DILocation(line: 2228, column: 8, scope: !4448)
!4521 = !DILocation(line: 2229, column: 5, scope: !4448)
!4522 = !DILocation(line: 2229, column: 8, scope: !4448)
!4523 = !DILocation(line: 2229, column: 12, scope: !4448)
!4524 = !DILocation(line: 2232, column: 12, scope: !4448)
!4525 = !DILocation(line: 2232, column: 5, scope: !4448)
!4526 = distinct !DISubprogram(name: "keygen_test_init", scope: !4, file: !4, line: 2252, type: !98, isLocal: true, isDefinition: true, scopeLine: 2253, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4527 = !DILocalVariable(name: "t", arg: 1, scope: !4526, file: !4, line: 2252, type: !100)
!4528 = !DILocation(line: 2252, column: 39, scope: !4526)
!4529 = !DILocalVariable(name: "alg", arg: 2, scope: !4526, file: !4, line: 2252, type: !67)
!4530 = !DILocation(line: 2252, column: 54, scope: !4526)
!4531 = !DILocalVariable(name: "data", scope: !4526, file: !4, line: 2254, type: !4532)
!4532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4533, size: 64, align: 64)
!4533 = !DIDerivedType(tag: DW_TAG_typedef, name: "KEYGEN_TEST_DATA", file: !4, line: 2250, baseType: !4534)
!4534 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "keygen_test_data_st", file: !4, line: 2247, size: 128, align: 64, elements: !4535)
!4535 = !{!4536, !4537}
!4536 = !DIDerivedType(tag: DW_TAG_member, name: "genctx", scope: !4534, file: !4, line: 2248, baseType: !3016, size: 64, align: 64)
!4537 = !DIDerivedType(tag: DW_TAG_member, name: "keyname", scope: !4534, file: !4, line: 2249, baseType: !64, size: 64, align: 64, offset: 64)
!4538 = !DILocation(line: 2254, column: 23, scope: !4526)
!4539 = !DILocalVariable(name: "genctx", scope: !4526, file: !4, line: 2255, type: !3016)
!4540 = !DILocation(line: 2255, column: 19, scope: !4526)
!4541 = !DILocalVariable(name: "nid", scope: !4526, file: !4, line: 2256, type: !31)
!4542 = !DILocation(line: 2256, column: 9, scope: !4526)
!4543 = !DILocation(line: 2256, column: 26, scope: !4526)
!4544 = !DILocation(line: 2256, column: 15, scope: !4526)
!4545 = !DILocation(line: 2258, column: 9, scope: !4546)
!4546 = distinct !DILexicalBlock(scope: !4526, file: !4, line: 2258, column: 9)
!4547 = !DILocation(line: 2258, column: 13, scope: !4546)
!4548 = !DILocation(line: 2258, column: 9, scope: !4526)
!4549 = !DILocation(line: 2259, column: 26, scope: !4550)
!4550 = distinct !DILexicalBlock(scope: !4546, file: !4, line: 2258, column: 19)
!4551 = !DILocation(line: 2259, column: 15, scope: !4550)
!4552 = !DILocation(line: 2259, column: 13, scope: !4550)
!4553 = !DILocation(line: 2260, column: 13, scope: !4554)
!4554 = distinct !DILexicalBlock(scope: !4550, file: !4, line: 2260, column: 13)
!4555 = !DILocation(line: 2260, column: 17, scope: !4554)
!4556 = !DILocation(line: 2260, column: 13, scope: !4550)
!4557 = !DILocation(line: 2261, column: 13, scope: !4554)
!4558 = !DILocation(line: 2262, column: 5, scope: !4550)
!4559 = !DILocation(line: 2264, column: 116, scope: !4560)
!4560 = distinct !DILexicalBlock(scope: !4526, file: !4, line: 2264, column: 9)
!4561 = !DILocation(line: 2264, column: 96, scope: !4560)
!4562 = !DILocation(line: 2264, column: 94, scope: !4560)
!4563 = !DILocation(line: 2264, column: 87, scope: !4560)
!4564 = !DILocation(line: 2264, column: 10, scope: !4565)
!4565 = !DILexicalBlockFile(scope: !4560, file: !4, discriminator: 1)
!4566 = !DILocation(line: 2264, column: 10, scope: !4560)
!4567 = !DILocation(line: 2264, column: 9, scope: !4526)
!4568 = !DILocation(line: 2266, column: 9, scope: !4569)
!4569 = distinct !DILexicalBlock(scope: !4560, file: !4, line: 2264, column: 13)
!4570 = !DILocation(line: 2266, column: 12, scope: !4569)
!4571 = !DILocation(line: 2266, column: 17, scope: !4569)
!4572 = !DILocation(line: 2267, column: 9, scope: !4569)
!4573 = !DILocation(line: 2270, column: 30, scope: !4574)
!4574 = distinct !DILexicalBlock(scope: !4526, file: !4, line: 2270, column: 9)
!4575 = !DILocation(line: 2270, column: 9, scope: !4574)
!4576 = !DILocation(line: 2270, column: 38, scope: !4574)
!4577 = !DILocation(line: 2270, column: 9, scope: !4526)
!4578 = !DILocation(line: 2271, column: 9, scope: !4579)
!4579 = distinct !DILexicalBlock(scope: !4574, file: !4, line: 2270, column: 44)
!4580 = !DILocation(line: 2271, column: 12, scope: !4579)
!4581 = !DILocation(line: 2271, column: 16, scope: !4579)
!4582 = !DILocation(line: 2272, column: 9, scope: !4579)
!4583 = !DILocation(line: 2275, column: 91, scope: !4584)
!4584 = distinct !DILexicalBlock(scope: !4526, file: !4, line: 2275, column: 9)
!4585 = !DILocation(line: 2275, column: 89, scope: !4584)
!4586 = !DILocation(line: 2275, column: 84, scope: !4584)
!4587 = !DILocation(line: 2275, column: 10, scope: !4588)
!4588 = !DILexicalBlockFile(scope: !4584, file: !4, discriminator: 1)
!4589 = !DILocation(line: 2275, column: 10, scope: !4584)
!4590 = !DILocation(line: 2275, column: 9, scope: !4526)
!4591 = !DILocation(line: 2276, column: 9, scope: !4584)
!4592 = !DILocation(line: 2277, column: 20, scope: !4526)
!4593 = !DILocation(line: 2277, column: 5, scope: !4526)
!4594 = !DILocation(line: 2277, column: 11, scope: !4526)
!4595 = !DILocation(line: 2277, column: 18, scope: !4526)
!4596 = !DILocation(line: 2278, column: 5, scope: !4526)
!4597 = !DILocation(line: 2278, column: 11, scope: !4526)
!4598 = !DILocation(line: 2278, column: 19, scope: !4526)
!4599 = !DILocation(line: 2279, column: 15, scope: !4526)
!4600 = !DILocation(line: 2279, column: 5, scope: !4526)
!4601 = !DILocation(line: 2279, column: 8, scope: !4526)
!4602 = !DILocation(line: 2279, column: 13, scope: !4526)
!4603 = !DILocation(line: 2280, column: 5, scope: !4526)
!4604 = !DILocation(line: 2280, column: 8, scope: !4526)
!4605 = !DILocation(line: 2280, column: 12, scope: !4526)
!4606 = !DILocation(line: 2281, column: 5, scope: !4526)
!4607 = !DILocation(line: 2284, column: 23, scope: !4526)
!4608 = !DILocation(line: 2284, column: 5, scope: !4526)
!4609 = !DILocation(line: 2285, column: 5, scope: !4526)
!4610 = !DILocation(line: 2286, column: 1, scope: !4526)
!4611 = distinct !DISubprogram(name: "keygen_test_cleanup", scope: !4, file: !4, line: 2288, type: !146, isLocal: true, isDefinition: true, scopeLine: 2289, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4612 = !DILocalVariable(name: "t", arg: 1, scope: !4611, file: !4, line: 2288, type: !100)
!4613 = !DILocation(line: 2288, column: 43, scope: !4611)
!4614 = !DILocalVariable(name: "keygen", scope: !4611, file: !4, line: 2290, type: !4532)
!4615 = !DILocation(line: 2290, column: 23, scope: !4611)
!4616 = !DILocation(line: 2290, column: 32, scope: !4611)
!4617 = !DILocation(line: 2290, column: 35, scope: !4611)
!4618 = !DILocation(line: 2292, column: 23, scope: !4611)
!4619 = !DILocation(line: 2292, column: 31, scope: !4611)
!4620 = !DILocation(line: 2292, column: 5, scope: !4611)
!4621 = !DILocation(line: 2293, column: 17, scope: !4611)
!4622 = !DILocation(line: 2293, column: 25, scope: !4611)
!4623 = !DILocation(line: 2293, column: 5, scope: !4611)
!4624 = !DILocation(line: 2294, column: 17, scope: !4611)
!4625 = !DILocation(line: 2294, column: 20, scope: !4611)
!4626 = !DILocation(line: 2294, column: 5, scope: !4611)
!4627 = !DILocation(line: 2295, column: 5, scope: !4611)
!4628 = !DILocation(line: 2295, column: 8, scope: !4611)
!4629 = !DILocation(line: 2295, column: 13, scope: !4611)
!4630 = !DILocation(line: 2296, column: 1, scope: !4611)
!4631 = distinct !DISubprogram(name: "keygen_test_parse", scope: !4, file: !4, line: 2298, type: !150, isLocal: true, isDefinition: true, scopeLine: 2300, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4632 = !DILocalVariable(name: "t", arg: 1, scope: !4631, file: !4, line: 2298, type: !100)
!4633 = !DILocation(line: 2298, column: 40, scope: !4631)
!4634 = !DILocalVariable(name: "keyword", arg: 2, scope: !4631, file: !4, line: 2299, type: !67)
!4635 = !DILocation(line: 2299, column: 42, scope: !4631)
!4636 = !DILocalVariable(name: "value", arg: 3, scope: !4631, file: !4, line: 2299, type: !67)
!4637 = !DILocation(line: 2299, column: 63, scope: !4631)
!4638 = !DILocalVariable(name: "keygen", scope: !4631, file: !4, line: 2301, type: !4532)
!4639 = !DILocation(line: 2301, column: 23, scope: !4631)
!4640 = !DILocation(line: 2301, column: 32, scope: !4631)
!4641 = !DILocation(line: 2301, column: 35, scope: !4631)
!4642 = !DILocation(line: 2303, column: 16, scope: !4643)
!4643 = distinct !DILexicalBlock(scope: !4631, file: !4, line: 2303, column: 9)
!4644 = !DILocation(line: 2303, column: 9, scope: !4643)
!4645 = !DILocation(line: 2303, column: 36, scope: !4643)
!4646 = !DILocation(line: 2303, column: 9, scope: !4631)
!4647 = !DILocation(line: 2304, column: 125, scope: !4643)
!4648 = !DILocation(line: 2304, column: 111, scope: !4643)
!4649 = !DILocation(line: 2304, column: 93, scope: !4643)
!4650 = !DILocation(line: 2304, column: 101, scope: !4643)
!4651 = !DILocation(line: 2304, column: 109, scope: !4643)
!4652 = !DILocation(line: 2304, column: 16, scope: !4653)
!4653 = !DILexicalBlockFile(scope: !4643, file: !4, discriminator: 1)
!4654 = !DILocation(line: 2304, column: 9, scope: !4643)
!4655 = !DILocation(line: 2305, column: 16, scope: !4656)
!4656 = distinct !DILexicalBlock(scope: !4631, file: !4, line: 2305, column: 9)
!4657 = !DILocation(line: 2305, column: 9, scope: !4656)
!4658 = !DILocation(line: 2305, column: 33, scope: !4656)
!4659 = !DILocation(line: 2305, column: 9, scope: !4631)
!4660 = !DILocation(line: 2306, column: 31, scope: !4656)
!4661 = !DILocation(line: 2306, column: 34, scope: !4656)
!4662 = !DILocation(line: 2306, column: 42, scope: !4656)
!4663 = !DILocation(line: 2306, column: 50, scope: !4656)
!4664 = !DILocation(line: 2306, column: 16, scope: !4656)
!4665 = !DILocation(line: 2306, column: 9, scope: !4656)
!4666 = !DILocation(line: 2307, column: 5, scope: !4631)
!4667 = !DILocation(line: 2308, column: 1, scope: !4631)
!4668 = distinct !DISubprogram(name: "keygen_test_run", scope: !4, file: !4, line: 2310, type: !154, isLocal: true, isDefinition: true, scopeLine: 2311, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4669 = !DILocalVariable(name: "t", arg: 1, scope: !4668, file: !4, line: 2310, type: !100)
!4670 = !DILocation(line: 2310, column: 38, scope: !4668)
!4671 = !DILocalVariable(name: "keygen", scope: !4668, file: !4, line: 2312, type: !4532)
!4672 = !DILocation(line: 2312, column: 23, scope: !4668)
!4673 = !DILocation(line: 2312, column: 32, scope: !4668)
!4674 = !DILocation(line: 2312, column: 35, scope: !4668)
!4675 = !DILocalVariable(name: "pkey", scope: !4668, file: !4, line: 2313, type: !193)
!4676 = !DILocation(line: 2313, column: 15, scope: !4668)
!4677 = !DILocation(line: 2315, column: 5, scope: !4668)
!4678 = !DILocation(line: 2315, column: 8, scope: !4668)
!4679 = !DILocation(line: 2315, column: 12, scope: !4668)
!4680 = !DILocation(line: 2316, column: 25, scope: !4681)
!4681 = distinct !DILexicalBlock(scope: !4668, file: !4, line: 2316, column: 9)
!4682 = !DILocation(line: 2316, column: 33, scope: !4681)
!4683 = !DILocation(line: 2316, column: 9, scope: !4681)
!4684 = !DILocation(line: 2316, column: 48, scope: !4681)
!4685 = !DILocation(line: 2316, column: 9, scope: !4668)
!4686 = !DILocation(line: 2317, column: 9, scope: !4687)
!4687 = distinct !DILexicalBlock(scope: !4681, file: !4, line: 2316, column: 54)
!4688 = !DILocation(line: 2317, column: 12, scope: !4687)
!4689 = !DILocation(line: 2317, column: 16, scope: !4687)
!4690 = !DILocation(line: 2318, column: 9, scope: !4687)
!4691 = !DILocation(line: 2321, column: 9, scope: !4692)
!4692 = distinct !DILexicalBlock(scope: !4668, file: !4, line: 2321, column: 9)
!4693 = !DILocation(line: 2321, column: 17, scope: !4692)
!4694 = !DILocation(line: 2321, column: 25, scope: !4692)
!4695 = !DILocation(line: 2321, column: 9, scope: !4668)
!4696 = !DILocalVariable(name: "key", scope: !4697, file: !4, line: 2322, type: !187)
!4697 = distinct !DILexicalBlock(scope: !4692, file: !4, line: 2321, column: 33)
!4698 = !DILocation(line: 2322, column: 19, scope: !4697)
!4699 = !DILocation(line: 2324, column: 27, scope: !4700)
!4700 = distinct !DILexicalBlock(scope: !4697, file: !4, line: 2324, column: 13)
!4701 = !DILocation(line: 2324, column: 35, scope: !4700)
!4702 = !DILocation(line: 2324, column: 44, scope: !4700)
!4703 = !DILocation(line: 2324, column: 13, scope: !4700)
!4704 = !DILocation(line: 2324, column: 13, scope: !4697)
!4705 = !DILocation(line: 2325, column: 68, scope: !4706)
!4706 = distinct !DILexicalBlock(scope: !4700, file: !4, line: 2324, column: 59)
!4707 = !DILocation(line: 2325, column: 76, scope: !4706)
!4708 = !DILocation(line: 2325, column: 13, scope: !4706)
!4709 = !DILocation(line: 2326, column: 13, scope: !4706)
!4710 = !DILocation(line: 2329, column: 92, scope: !4711)
!4711 = distinct !DILexicalBlock(scope: !4697, file: !4, line: 2329, column: 13)
!4712 = !DILocation(line: 2329, column: 90, scope: !4711)
!4713 = !DILocation(line: 2329, column: 86, scope: !4711)
!4714 = !DILocation(line: 2329, column: 14, scope: !4715)
!4715 = !DILexicalBlockFile(scope: !4711, file: !4, discriminator: 1)
!4716 = !DILocation(line: 2329, column: 14, scope: !4711)
!4717 = !DILocation(line: 2329, column: 13, scope: !4697)
!4718 = !DILocation(line: 2330, column: 13, scope: !4711)
!4719 = !DILocation(line: 2331, column: 21, scope: !4697)
!4720 = !DILocation(line: 2331, column: 29, scope: !4697)
!4721 = !DILocation(line: 2331, column: 9, scope: !4697)
!4722 = !DILocation(line: 2331, column: 14, scope: !4697)
!4723 = !DILocation(line: 2331, column: 19, scope: !4697)
!4724 = !DILocation(line: 2332, column: 9, scope: !4697)
!4725 = !DILocation(line: 2332, column: 17, scope: !4697)
!4726 = !DILocation(line: 2332, column: 25, scope: !4697)
!4727 = !DILocation(line: 2333, column: 20, scope: !4697)
!4728 = !DILocation(line: 2333, column: 9, scope: !4697)
!4729 = !DILocation(line: 2333, column: 14, scope: !4697)
!4730 = !DILocation(line: 2333, column: 18, scope: !4697)
!4731 = !DILocation(line: 2334, column: 21, scope: !4697)
!4732 = !DILocation(line: 2334, column: 9, scope: !4697)
!4733 = !DILocation(line: 2334, column: 14, scope: !4697)
!4734 = !DILocation(line: 2334, column: 19, scope: !4697)
!4735 = !DILocation(line: 2335, column: 24, scope: !4697)
!4736 = !DILocation(line: 2335, column: 22, scope: !4697)
!4737 = !DILocation(line: 2336, column: 5, scope: !4697)
!4738 = !DILocation(line: 2337, column: 23, scope: !4739)
!4739 = distinct !DILexicalBlock(scope: !4692, file: !4, line: 2336, column: 12)
!4740 = !DILocation(line: 2337, column: 9, scope: !4739)
!4741 = !DILocation(line: 2340, column: 5, scope: !4668)
!4742 = !DILocation(line: 2343, column: 19, scope: !4668)
!4743 = !DILocation(line: 2343, column: 5, scope: !4668)
!4744 = !DILocation(line: 2344, column: 5, scope: !4668)
!4745 = !DILocation(line: 2345, column: 1, scope: !4668)
!4746 = !DILocalVariable(name: "t", arg: 1, scope: !174, file: !4, line: 874, type: !100)
!4747 = !DILocation(line: 874, column: 36, scope: !174)
!4748 = !DILocalVariable(name: "alg", arg: 2, scope: !174, file: !4, line: 874, type: !67)
!4749 = !DILocation(line: 874, column: 51, scope: !174)
!4750 = !DILocalVariable(name: "mac", scope: !174, file: !4, line: 876, type: !4751)
!4751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4752, size: 64, align: 64)
!4752 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4753)
!4753 = !DIDerivedType(tag: DW_TAG_typedef, name: "EVP_MAC", file: !113, line: 93, baseType: !4754)
!4754 = !DICompositeType(tag: DW_TAG_structure_type, name: "evp_mac_st", file: !113, line: 93, flags: DIFlagFwdDecl)
!4755 = !DILocation(line: 876, column: 20, scope: !174)
!4756 = !DILocalVariable(name: "type", scope: !174, file: !4, line: 877, type: !31)
!4757 = !DILocation(line: 877, column: 9, scope: !174)
!4758 = !DILocalVariable(name: "mdat", scope: !174, file: !4, line: 878, type: !4759)
!4759 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4760, size: 64, align: 64)
!4760 = !DIDerivedType(tag: DW_TAG_typedef, name: "MAC_DATA", file: !4, line: 872, baseType: !4761)
!4761 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mac_data_st", file: !4, line: 847, size: 1024, align: 64, elements: !4762)
!4762 = !{!4763, !4764, !4765, !4766, !4767, !4768, !4769, !4770, !4771, !4772, !4773, !4774, !4775, !4776, !4777, !4778}
!4763 = !DIDerivedType(tag: DW_TAG_member, name: "mac", scope: !4761, file: !4, line: 849, baseType: !4751, size: 64, align: 64)
!4764 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4761, file: !4, line: 850, baseType: !31, size: 32, align: 32, offset: 64)
!4765 = !DIDerivedType(tag: DW_TAG_member, name: "alg", scope: !4761, file: !4, line: 852, baseType: !64, size: 64, align: 64, offset: 128)
!4766 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !4761, file: !4, line: 854, baseType: !56, size: 64, align: 64, offset: 192)
!4767 = !DIDerivedType(tag: DW_TAG_member, name: "key_len", scope: !4761, file: !4, line: 855, baseType: !33, size: 64, align: 64, offset: 256)
!4768 = !DIDerivedType(tag: DW_TAG_member, name: "iv", scope: !4761, file: !4, line: 857, baseType: !56, size: 64, align: 64, offset: 320)
!4769 = !DIDerivedType(tag: DW_TAG_member, name: "iv_len", scope: !4761, file: !4, line: 858, baseType: !33, size: 64, align: 64, offset: 384)
!4770 = !DIDerivedType(tag: DW_TAG_member, name: "input", scope: !4761, file: !4, line: 860, baseType: !56, size: 64, align: 64, offset: 448)
!4771 = !DIDerivedType(tag: DW_TAG_member, name: "input_len", scope: !4761, file: !4, line: 861, baseType: !33, size: 64, align: 64, offset: 512)
!4772 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !4761, file: !4, line: 863, baseType: !56, size: 64, align: 64, offset: 576)
!4773 = !DIDerivedType(tag: DW_TAG_member, name: "output_len", scope: !4761, file: !4, line: 864, baseType: !33, size: 64, align: 64, offset: 640)
!4774 = !DIDerivedType(tag: DW_TAG_member, name: "custom", scope: !4761, file: !4, line: 865, baseType: !56, size: 64, align: 64, offset: 704)
!4775 = !DIDerivedType(tag: DW_TAG_member, name: "custom_len", scope: !4761, file: !4, line: 866, baseType: !33, size: 64, align: 64, offset: 768)
!4776 = !DIDerivedType(tag: DW_TAG_member, name: "salt", scope: !4761, file: !4, line: 868, baseType: !56, size: 64, align: 64, offset: 832)
!4777 = !DIDerivedType(tag: DW_TAG_member, name: "salt_len", scope: !4761, file: !4, line: 869, baseType: !33, size: 64, align: 64, offset: 896)
!4778 = !DIDerivedType(tag: DW_TAG_member, name: "controls", scope: !4761, file: !4, line: 871, baseType: !61, size: 64, align: 64, offset: 960)
!4779 = !DILocation(line: 878, column: 15, scope: !174)
!4780 = !DILocation(line: 880, column: 34, scope: !4781)
!4781 = distinct !DILexicalBlock(scope: !174, file: !4, line: 880, column: 9)
!4782 = !DILocation(line: 880, column: 16, scope: !4781)
!4783 = !DILocation(line: 880, column: 14, scope: !4781)
!4784 = !DILocation(line: 880, column: 40, scope: !4781)
!4785 = !DILocation(line: 880, column: 9, scope: !174)
!4786 = !DILocalVariable(name: "sz", scope: !4787, file: !4, line: 886, type: !33)
!4787 = distinct !DILexicalBlock(scope: !4781, file: !4, line: 880, column: 48)
!4788 = !DILocation(line: 886, column: 16, scope: !4787)
!4789 = !DILocation(line: 886, column: 28, scope: !4787)
!4790 = !DILocation(line: 886, column: 21, scope: !4787)
!4791 = !DILocation(line: 889, column: 13, scope: !4792)
!4792 = distinct !DILexicalBlock(scope: !4787, file: !4, line: 889, column: 13)
!4793 = !DILocation(line: 889, column: 16, scope: !4792)
!4794 = !DILocation(line: 890, column: 13, scope: !4792)
!4795 = !DILocation(line: 890, column: 23, scope: !4796)
!4796 = !DILexicalBlockFile(scope: !4792, file: !4, discriminator: 1)
!4797 = !DILocation(line: 890, column: 29, scope: !4796)
!4798 = !DILocation(line: 890, column: 27, scope: !4796)
!4799 = !DILocation(line: 890, column: 32, scope: !4796)
!4800 = !DILocation(line: 890, column: 16, scope: !4796)
!4801 = !DILocation(line: 890, column: 68, scope: !4796)
!4802 = !DILocation(line: 889, column: 13, scope: !4803)
!4803 = !DILexicalBlockFile(scope: !4787, file: !4, discriminator: 1)
!4804 = !DILocation(line: 891, column: 16, scope: !4792)
!4805 = !DILocation(line: 891, column: 13, scope: !4792)
!4806 = !DILocation(line: 893, column: 21, scope: !4807)
!4807 = distinct !DILexicalBlock(scope: !4787, file: !4, line: 893, column: 13)
!4808 = !DILocation(line: 893, column: 34, scope: !4807)
!4809 = !DILocation(line: 893, column: 13, scope: !4807)
!4810 = !DILocation(line: 893, column: 38, scope: !4807)
!4811 = !DILocation(line: 893, column: 13, scope: !4787)
!4812 = !DILocation(line: 894, column: 18, scope: !4813)
!4813 = distinct !DILexicalBlock(scope: !4807, file: !4, line: 893, column: 44)
!4814 = !DILocation(line: 895, column: 9, scope: !4813)
!4815 = !DILocation(line: 895, column: 28, scope: !4816)
!4816 = !DILexicalBlockFile(scope: !4817, file: !4, discriminator: 1)
!4817 = distinct !DILexicalBlock(scope: !4807, file: !4, line: 895, column: 20)
!4818 = !DILocation(line: 895, column: 41, scope: !4816)
!4819 = !DILocation(line: 895, column: 20, scope: !4816)
!4820 = !DILocation(line: 895, column: 45, scope: !4816)
!4821 = !DILocation(line: 897, column: 18, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !4817, file: !4, line: 895, column: 51)
!4823 = !DILocation(line: 902, column: 9, scope: !4822)
!4824 = !DILocation(line: 902, column: 28, scope: !4825)
!4825 = !DILexicalBlockFile(scope: !4826, file: !4, discriminator: 1)
!4826 = distinct !DILexicalBlock(scope: !4817, file: !4, line: 902, column: 20)
!4827 = !DILocation(line: 902, column: 45, scope: !4825)
!4828 = !DILocation(line: 902, column: 20, scope: !4825)
!4829 = !DILocation(line: 902, column: 49, scope: !4825)
!4830 = !DILocation(line: 904, column: 18, scope: !4831)
!4831 = distinct !DILexicalBlock(scope: !4826, file: !4, line: 902, column: 55)
!4832 = !DILocation(line: 909, column: 9, scope: !4831)
!4833 = !DILocation(line: 909, column: 28, scope: !4834)
!4834 = !DILexicalBlockFile(scope: !4835, file: !4, discriminator: 1)
!4835 = distinct !DILexicalBlock(scope: !4826, file: !4, line: 909, column: 20)
!4836 = !DILocation(line: 909, column: 44, scope: !4834)
!4837 = !DILocation(line: 909, column: 20, scope: !4834)
!4838 = !DILocation(line: 909, column: 48, scope: !4834)
!4839 = !DILocation(line: 911, column: 18, scope: !4840)
!4840 = distinct !DILexicalBlock(scope: !4835, file: !4, line: 909, column: 54)
!4841 = !DILocation(line: 916, column: 9, scope: !4840)
!4842 = !DILocation(line: 921, column: 28, scope: !4843)
!4843 = distinct !DILexicalBlock(scope: !4844, file: !4, line: 921, column: 17)
!4844 = distinct !DILexicalBlock(scope: !4835, file: !4, line: 916, column: 16)
!4845 = !DILocation(line: 921, column: 17, scope: !4843)
!4846 = !DILocation(line: 921, column: 33, scope: !4843)
!4847 = !DILocation(line: 921, column: 38, scope: !4843)
!4848 = !DILocation(line: 921, column: 52, scope: !4849)
!4849 = !DILexicalBlockFile(scope: !4843, file: !4, discriminator: 1)
!4850 = !DILocation(line: 921, column: 41, scope: !4849)
!4851 = !DILocation(line: 921, column: 57, scope: !4849)
!4852 = !DILocation(line: 921, column: 17, scope: !4849)
!4853 = !DILocation(line: 922, column: 17, scope: !4854)
!4854 = distinct !DILexicalBlock(scope: !4843, file: !4, line: 921, column: 63)
!4855 = !DILocation(line: 922, column: 20, scope: !4854)
!4856 = !DILocation(line: 922, column: 25, scope: !4854)
!4857 = !DILocation(line: 923, column: 17, scope: !4854)
!4858 = !DILocation(line: 926, column: 13, scope: !4844)
!4859 = !DILocation(line: 928, column: 5, scope: !4787)
!4860 = !DILocation(line: 930, column: 12, scope: !174)
!4861 = !DILocation(line: 930, column: 10, scope: !174)
!4862 = !DILocation(line: 931, column: 18, scope: !174)
!4863 = !DILocation(line: 931, column: 5, scope: !174)
!4864 = !DILocation(line: 931, column: 11, scope: !174)
!4865 = !DILocation(line: 931, column: 16, scope: !174)
!4866 = !DILocation(line: 932, column: 17, scope: !174)
!4867 = !DILocation(line: 932, column: 5, scope: !174)
!4868 = !DILocation(line: 932, column: 11, scope: !174)
!4869 = !DILocation(line: 932, column: 15, scope: !174)
!4870 = !DILocation(line: 933, column: 22, scope: !174)
!4871 = !DILocation(line: 933, column: 5, scope: !174)
!4872 = !DILocation(line: 933, column: 11, scope: !174)
!4873 = !DILocation(line: 933, column: 20, scope: !174)
!4874 = !DILocation(line: 934, column: 15, scope: !174)
!4875 = !DILocation(line: 934, column: 5, scope: !174)
!4876 = !DILocation(line: 934, column: 8, scope: !174)
!4877 = !DILocation(line: 934, column: 13, scope: !174)
!4878 = !DILocation(line: 935, column: 5, scope: !174)
!4879 = !DILocation(line: 936, column: 1, scope: !174)
!4880 = distinct !DISubprogram(name: "mac_test_cleanup", scope: !4, file: !4, line: 944, type: !146, isLocal: true, isDefinition: true, scopeLine: 945, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4881 = !DILocalVariable(name: "t", arg: 1, scope: !4880, file: !4, line: 944, type: !100)
!4882 = !DILocation(line: 944, column: 40, scope: !4880)
!4883 = !DILocalVariable(name: "mdat", scope: !4880, file: !4, line: 946, type: !4759)
!4884 = !DILocation(line: 946, column: 15, scope: !4880)
!4885 = !DILocation(line: 946, column: 22, scope: !4880)
!4886 = !DILocation(line: 946, column: 25, scope: !4880)
!4887 = !DILocation(line: 948, column: 32, scope: !4880)
!4888 = !DILocation(line: 948, column: 38, scope: !4880)
!4889 = !DILocation(line: 948, column: 5, scope: !4880)
!4890 = !DILocation(line: 949, column: 17, scope: !4880)
!4891 = !DILocation(line: 949, column: 23, scope: !4880)
!4892 = !DILocation(line: 949, column: 5, scope: !4880)
!4893 = !DILocation(line: 950, column: 17, scope: !4880)
!4894 = !DILocation(line: 950, column: 23, scope: !4880)
!4895 = !DILocation(line: 950, column: 5, scope: !4880)
!4896 = !DILocation(line: 951, column: 17, scope: !4880)
!4897 = !DILocation(line: 951, column: 23, scope: !4880)
!4898 = !DILocation(line: 951, column: 5, scope: !4880)
!4899 = !DILocation(line: 952, column: 17, scope: !4880)
!4900 = !DILocation(line: 952, column: 23, scope: !4880)
!4901 = !DILocation(line: 952, column: 5, scope: !4880)
!4902 = !DILocation(line: 953, column: 17, scope: !4880)
!4903 = !DILocation(line: 953, column: 23, scope: !4880)
!4904 = !DILocation(line: 953, column: 5, scope: !4880)
!4905 = !DILocation(line: 954, column: 17, scope: !4880)
!4906 = !DILocation(line: 954, column: 23, scope: !4880)
!4907 = !DILocation(line: 954, column: 5, scope: !4880)
!4908 = !DILocation(line: 955, column: 17, scope: !4880)
!4909 = !DILocation(line: 955, column: 23, scope: !4880)
!4910 = !DILocation(line: 955, column: 5, scope: !4880)
!4911 = !DILocation(line: 956, column: 1, scope: !4880)
!4912 = distinct !DISubprogram(name: "mac_test_parse", scope: !4, file: !4, line: 958, type: !150, isLocal: true, isDefinition: true, scopeLine: 960, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!4913 = !DILocalVariable(name: "t", arg: 1, scope: !4912, file: !4, line: 958, type: !100)
!4914 = !DILocation(line: 958, column: 37, scope: !4912)
!4915 = !DILocalVariable(name: "keyword", arg: 2, scope: !4912, file: !4, line: 959, type: !67)
!4916 = !DILocation(line: 959, column: 39, scope: !4912)
!4917 = !DILocalVariable(name: "value", arg: 3, scope: !4912, file: !4, line: 959, type: !67)
!4918 = !DILocation(line: 959, column: 60, scope: !4912)
!4919 = !DILocalVariable(name: "mdata", scope: !4912, file: !4, line: 961, type: !4759)
!4920 = !DILocation(line: 961, column: 15, scope: !4912)
!4921 = !DILocation(line: 961, column: 23, scope: !4912)
!4922 = !DILocation(line: 961, column: 26, scope: !4912)
!4923 = !DILocation(line: 963, column: 16, scope: !4924)
!4924 = distinct !DILexicalBlock(scope: !4912, file: !4, line: 963, column: 9)
!4925 = !DILocation(line: 963, column: 9, scope: !4924)
!4926 = !DILocation(line: 963, column: 32, scope: !4924)
!4927 = !DILocation(line: 963, column: 9, scope: !4912)
!4928 = !DILocation(line: 964, column: 26, scope: !4924)
!4929 = !DILocation(line: 964, column: 34, scope: !4924)
!4930 = !DILocation(line: 964, column: 41, scope: !4924)
!4931 = !DILocation(line: 964, column: 47, scope: !4924)
!4932 = !DILocation(line: 964, column: 54, scope: !4924)
!4933 = !DILocation(line: 964, column: 16, scope: !4924)
!4934 = !DILocation(line: 964, column: 9, scope: !4924)
!4935 = !DILocation(line: 965, column: 16, scope: !4936)
!4936 = distinct !DILexicalBlock(scope: !4912, file: !4, line: 965, column: 9)
!4937 = !DILocation(line: 965, column: 9, scope: !4936)
!4938 = !DILocation(line: 965, column: 31, scope: !4936)
!4939 = !DILocation(line: 965, column: 9, scope: !4912)
!4940 = !DILocation(line: 966, column: 26, scope: !4936)
!4941 = !DILocation(line: 966, column: 34, scope: !4936)
!4942 = !DILocation(line: 966, column: 41, scope: !4936)
!4943 = !DILocation(line: 966, column: 46, scope: !4936)
!4944 = !DILocation(line: 966, column: 53, scope: !4936)
!4945 = !DILocation(line: 966, column: 16, scope: !4936)
!4946 = !DILocation(line: 966, column: 9, scope: !4936)
!4947 = !DILocation(line: 967, column: 16, scope: !4948)
!4948 = distinct !DILexicalBlock(scope: !4912, file: !4, line: 967, column: 9)
!4949 = !DILocation(line: 967, column: 9, scope: !4948)
!4950 = !DILocation(line: 967, column: 35, scope: !4948)
!4951 = !DILocation(line: 967, column: 9, scope: !4912)
!4952 = !DILocation(line: 968, column: 26, scope: !4948)
!4953 = !DILocation(line: 968, column: 34, scope: !4948)
!4954 = !DILocation(line: 968, column: 41, scope: !4948)
!4955 = !DILocation(line: 968, column: 50, scope: !4948)
!4956 = !DILocation(line: 968, column: 57, scope: !4948)
!4957 = !DILocation(line: 968, column: 16, scope: !4948)
!4958 = !DILocation(line: 968, column: 9, scope: !4948)
!4959 = !DILocation(line: 969, column: 16, scope: !4960)
!4960 = distinct !DILexicalBlock(scope: !4912, file: !4, line: 969, column: 9)
!4961 = !DILocation(line: 969, column: 9, scope: !4960)
!4962 = !DILocation(line: 969, column: 33, scope: !4960)
!4963 = !DILocation(line: 969, column: 9, scope: !4912)
!4964 = !DILocation(line: 970, column: 26, scope: !4960)
!4965 = !DILocation(line: 970, column: 34, scope: !4960)
!4966 = !DILocation(line: 970, column: 41, scope: !4960)
!4967 = !DILocation(line: 970, column: 48, scope: !4960)
!4968 = !DILocation(line: 970, column: 55, scope: !4960)
!4969 = !DILocation(line: 970, column: 16, scope: !4960)
!4970 = !DILocation(line: 970, column: 9, scope: !4960)
!4971 = !DILocation(line: 971, column: 16, scope: !4972)
!4972 = distinct !DILexicalBlock(scope: !4912, file: !4, line: 971, column: 9)
!4973 = !DILocation(line: 971, column: 9, scope: !4972)
!4974 = !DILocation(line: 971, column: 38, scope: !4972)
!4975 = !DILocation(line: 971, column: 9, scope: !4912)
!4976 = !DILocation(line: 972, column: 36, scope: !4977)
!4977 = distinct !DILexicalBlock(scope: !4972, file: !4, line: 971, column: 44)
!4978 = !DILocation(line: 972, column: 22, scope: !4977)
!4979 = !DILocation(line: 972, column: 9, scope: !4977)
!4980 = !DILocation(line: 972, column: 16, scope: !4977)
!4981 = !DILocation(line: 972, column: 20, scope: !4977)
!4982 = !DILocation(line: 973, column: 14, scope: !4983)
!4983 = distinct !DILexicalBlock(scope: !4977, file: !4, line: 973, column: 13)
!4984 = !DILocation(line: 973, column: 21, scope: !4983)
!4985 = !DILocation(line: 973, column: 13, scope: !4977)
!4986 = !DILocation(line: 974, column: 13, scope: !4983)
!4987 = !DILocation(line: 975, column: 9, scope: !4977)
!4988 = !DILocation(line: 977, column: 16, scope: !4989)
!4989 = distinct !DILexicalBlock(scope: !4912, file: !4, line: 977, column: 9)
!4990 = !DILocation(line: 977, column: 9, scope: !4989)
!4991 = !DILocation(line: 977, column: 34, scope: !4989)
!4992 = !DILocation(line: 977, column: 9, scope: !4912)
!4993 = !DILocation(line: 978, column: 26, scope: !4989)
!4994 = !DILocation(line: 978, column: 34, scope: !4989)
!4995 = !DILocation(line: 978, column: 41, scope: !4989)
!4996 = !DILocation(line: 978, column: 49, scope: !4989)
!4997 = !DILocation(line: 978, column: 56, scope: !4989)
!4998 = !DILocation(line: 978, column: 16, scope: !4989)
!4999 = !DILocation(line: 978, column: 9, scope: !4989)
!5000 = !DILocation(line: 979, column: 16, scope: !5001)
!5001 = distinct !DILexicalBlock(scope: !4912, file: !4, line: 979, column: 9)
!5002 = !DILocation(line: 979, column: 9, scope: !5001)
!5003 = !DILocation(line: 979, column: 35, scope: !5001)
!5004 = !DILocation(line: 979, column: 9, scope: !4912)
!5005 = !DILocation(line: 980, column: 26, scope: !5001)
!5006 = !DILocation(line: 980, column: 34, scope: !5001)
!5007 = !DILocation(line: 980, column: 41, scope: !5001)
!5008 = !DILocation(line: 980, column: 50, scope: !5001)
!5009 = !DILocation(line: 980, column: 57, scope: !5001)
!5010 = !DILocation(line: 980, column: 16, scope: !5001)
!5011 = !DILocation(line: 980, column: 9, scope: !5001)
!5012 = !DILocation(line: 981, column: 16, scope: !5013)
!5013 = distinct !DILexicalBlock(scope: !4912, file: !4, line: 981, column: 9)
!5014 = !DILocation(line: 981, column: 9, scope: !5013)
!5015 = !DILocation(line: 981, column: 33, scope: !5013)
!5016 = !DILocation(line: 981, column: 9, scope: !4912)
!5017 = !DILocation(line: 982, column: 39, scope: !5013)
!5018 = !DILocation(line: 982, column: 46, scope: !5013)
!5019 = !DILocation(line: 983, column: 53, scope: !5013)
!5020 = !DILocation(line: 983, column: 39, scope: !5013)
!5021 = !DILocation(line: 982, column: 16, scope: !5013)
!5022 = !DILocation(line: 983, column: 85, scope: !5013)
!5023 = !DILocation(line: 982, column: 9, scope: !5013)
!5024 = !DILocation(line: 984, column: 5, scope: !4912)
!5025 = !DILocation(line: 985, column: 1, scope: !4912)
!5026 = distinct !DISubprogram(name: "mac_test_run", scope: !4, file: !4, line: 1240, type: !154, isLocal: true, isDefinition: true, scopeLine: 1241, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5027 = !DILocalVariable(name: "t", arg: 1, scope: !5026, file: !4, line: 1240, type: !100)
!5028 = !DILocation(line: 1240, column: 35, scope: !5026)
!5029 = !DILocalVariable(name: "expected", scope: !5026, file: !4, line: 1242, type: !4759)
!5030 = !DILocation(line: 1242, column: 15, scope: !5026)
!5031 = !DILocation(line: 1242, column: 26, scope: !5026)
!5032 = !DILocation(line: 1242, column: 29, scope: !5026)
!5033 = !DILocation(line: 1244, column: 9, scope: !5034)
!5034 = distinct !DILexicalBlock(scope: !5026, file: !4, line: 1244, column: 9)
!5035 = !DILocation(line: 1244, column: 19, scope: !5034)
!5036 = !DILocation(line: 1244, column: 23, scope: !5034)
!5037 = !DILocation(line: 1244, column: 9, scope: !5026)
!5038 = !DILocation(line: 1245, column: 33, scope: !5034)
!5039 = !DILocation(line: 1245, column: 16, scope: !5034)
!5040 = !DILocation(line: 1245, column: 9, scope: !5034)
!5041 = !DILocation(line: 1246, column: 30, scope: !5026)
!5042 = !DILocation(line: 1246, column: 12, scope: !5026)
!5043 = !DILocation(line: 1246, column: 5, scope: !5026)
!5044 = !DILocation(line: 1247, column: 1, scope: !5026)
!5045 = distinct !DISubprogram(name: "sk_OPENSSL_STRING_new_null", scope: !63, file: !63, line: 159, type: !5046, isLocal: true, isDefinition: true, scopeLine: 159, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5046 = !DISubroutineType(types: !5047)
!5047 = !{!61}
!5048 = !DILocation(line: 159, column: 948, scope: !5045)
!5049 = !DILocation(line: 159, column: 914, scope: !5045)
!5050 = !DILocation(line: 159, column: 907, scope: !5045)
!5051 = distinct !DISubprogram(name: "sk_OPENSSL_STRING_pop_free", scope: !63, file: !63, line: 159, type: !5052, isLocal: true, isDefinition: true, scopeLine: 159, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5052 = !DISubroutineType(types: !5053)
!5053 = !{null, !61, !5054}
!5054 = !DIDerivedType(tag: DW_TAG_typedef, name: "sk_OPENSSL_STRING_freefunc", file: !63, line: 159, baseType: !5055)
!5055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5056, size: 64, align: 64)
!5056 = !DISubroutineType(types: !5057)
!5057 = !{null, !64}
!5058 = !DILocalVariable(name: "sk", arg: 1, scope: !5051, file: !63, line: 159, type: !61)
!5059 = !DILocation(line: 159, column: 2836, scope: !5051)
!5060 = !DILocalVariable(name: "freefunc", arg: 2, scope: !5051, file: !63, line: 159, type: !5054)
!5061 = !DILocation(line: 159, column: 2867, scope: !5051)
!5062 = !DILocation(line: 159, column: 2916, scope: !5051)
!5063 = !DILocation(line: 159, column: 2899, scope: !5051)
!5064 = !DILocation(line: 159, column: 2941, scope: !5051)
!5065 = !DILocation(line: 159, column: 2879, scope: !5051)
!5066 = !DILocation(line: 159, column: 2952, scope: !5051)
!5067 = distinct !DISubprogram(name: "openssl_free", scope: !4, file: !4, line: 939, type: !5056, isLocal: true, isDefinition: true, scopeLine: 940, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5068 = !DILocalVariable(name: "m", arg: 1, scope: !5067, file: !4, line: 939, type: !64)
!5069 = !DILocation(line: 939, column: 32, scope: !5067)
!5070 = !DILocation(line: 941, column: 17, scope: !5067)
!5071 = !DILocation(line: 941, column: 5, scope: !5067)
!5072 = !DILocation(line: 942, column: 1, scope: !5067)
!5073 = distinct !DISubprogram(name: "sk_OPENSSL_STRING_push", scope: !63, file: !63, line: 159, type: !5074, isLocal: true, isDefinition: true, scopeLine: 159, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5074 = !DISubroutineType(types: !5075)
!5075 = !{!31, !61, !64}
!5076 = !DILocalVariable(name: "sk", arg: 1, scope: !5073, file: !63, line: 159, type: !61)
!5077 = !DILocation(line: 159, column: 2145, scope: !5073)
!5078 = !DILocalVariable(name: "ptr", arg: 2, scope: !5073, file: !63, line: 159, type: !64)
!5079 = !DILocation(line: 159, column: 2155, scope: !5073)
!5080 = !DILocation(line: 159, column: 2202, scope: !5073)
!5081 = !DILocation(line: 159, column: 2185, scope: !5073)
!5082 = !DILocation(line: 159, column: 2220, scope: !5073)
!5083 = !DILocation(line: 159, column: 2169, scope: !5073)
!5084 = !DILocation(line: 159, column: 2162, scope: !5073)
!5085 = distinct !DISubprogram(name: "mac_test_run_mac", scope: !4, file: !4, line: 1094, type: !154, isLocal: true, isDefinition: true, scopeLine: 1095, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5086 = !DILocalVariable(name: "t", arg: 1, scope: !5085, file: !4, line: 1094, type: !100)
!5087 = !DILocation(line: 1094, column: 39, scope: !5085)
!5088 = !DILocalVariable(name: "expected", scope: !5085, file: !4, line: 1096, type: !4759)
!5089 = !DILocation(line: 1096, column: 15, scope: !5085)
!5090 = !DILocation(line: 1096, column: 26, scope: !5085)
!5091 = !DILocation(line: 1096, column: 29, scope: !5085)
!5092 = !DILocalVariable(name: "ctx", scope: !5085, file: !4, line: 1097, type: !5093)
!5093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5094, size: 64, align: 64)
!5094 = !DIDerivedType(tag: DW_TAG_typedef, name: "EVP_MAC_CTX", file: !113, line: 94, baseType: !5095)
!5095 = !DICompositeType(tag: DW_TAG_structure_type, name: "evp_mac_ctx_st", file: !113, line: 94, flags: DIFlagFwdDecl)
!5096 = !DILocation(line: 1097, column: 18, scope: !5085)
!5097 = !DILocalVariable(name: "algo", scope: !5085, file: !4, line: 1098, type: !47)
!5098 = !DILocation(line: 1098, column: 17, scope: !5085)
!5099 = !DILocalVariable(name: "algo_ctrl", scope: !5085, file: !4, line: 1099, type: !31)
!5100 = !DILocation(line: 1099, column: 9, scope: !5085)
!5101 = !DILocalVariable(name: "got", scope: !5085, file: !4, line: 1100, type: !56)
!5102 = !DILocation(line: 1100, column: 20, scope: !5085)
!5103 = !DILocalVariable(name: "got_len", scope: !5085, file: !4, line: 1101, type: !33)
!5104 = !DILocation(line: 1101, column: 12, scope: !5085)
!5105 = !DILocalVariable(name: "rv", scope: !5085, file: !4, line: 1102, type: !31)
!5106 = !DILocation(line: 1102, column: 9, scope: !5085)
!5107 = !DILocalVariable(name: "i", scope: !5085, file: !4, line: 1102, type: !31)
!5108 = !DILocation(line: 1102, column: 13, scope: !5085)
!5109 = !DILocation(line: 1104, column: 9, scope: !5110)
!5110 = distinct !DILexicalBlock(scope: !5085, file: !4, line: 1104, column: 9)
!5111 = !DILocation(line: 1104, column: 19, scope: !5110)
!5112 = !DILocation(line: 1104, column: 23, scope: !5110)
!5113 = !DILocation(line: 1104, column: 9, scope: !5085)
!5114 = !DILocation(line: 1105, column: 97, scope: !5110)
!5115 = !DILocation(line: 1105, column: 107, scope: !5110)
!5116 = !DILocation(line: 1105, column: 85, scope: !5110)
!5117 = !DILocation(line: 1105, column: 74, scope: !5118)
!5118 = !DILexicalBlockFile(scope: !5110, file: !4, discriminator: 1)
!5119 = !DILocation(line: 1105, column: 9, scope: !5120)
!5120 = !DILexicalBlockFile(scope: !5110, file: !4, discriminator: 2)
!5121 = !DILocation(line: 1105, column: 9, scope: !5110)
!5122 = !DILocation(line: 1107, column: 72, scope: !5110)
!5123 = !DILocation(line: 1107, column: 82, scope: !5110)
!5124 = !DILocation(line: 1107, column: 60, scope: !5110)
!5125 = !DILocation(line: 1107, column: 49, scope: !5118)
!5126 = !DILocation(line: 1107, column: 89, scope: !5110)
!5127 = !DILocation(line: 1107, column: 99, scope: !5110)
!5128 = !DILocation(line: 1107, column: 9, scope: !5120)
!5129 = !DILocation(line: 1118, column: 32, scope: !5130)
!5130 = distinct !DILexicalBlock(scope: !5085, file: !4, line: 1118, column: 9)
!5131 = !DILocation(line: 1118, column: 42, scope: !5130)
!5132 = !DILocation(line: 1118, column: 16, scope: !5130)
!5133 = !DILocation(line: 1118, column: 14, scope: !5130)
!5134 = !DILocation(line: 1118, column: 48, scope: !5130)
!5135 = !DILocation(line: 1118, column: 9, scope: !5085)
!5136 = !DILocation(line: 1119, column: 9, scope: !5137)
!5137 = distinct !DILexicalBlock(scope: !5130, file: !4, line: 1118, column: 56)
!5138 = !DILocation(line: 1119, column: 12, scope: !5137)
!5139 = !DILocation(line: 1119, column: 16, scope: !5137)
!5140 = !DILocation(line: 1120, column: 9, scope: !5137)
!5141 = !DILocation(line: 1123, column: 9, scope: !5142)
!5142 = distinct !DILexicalBlock(scope: !5085, file: !4, line: 1123, column: 9)
!5143 = !DILocation(line: 1123, column: 19, scope: !5142)
!5144 = !DILocation(line: 1123, column: 23, scope: !5142)
!5145 = !DILocation(line: 1124, column: 8, scope: !5142)
!5146 = !DILocation(line: 1124, column: 23, scope: !5147)
!5147 = !DILexicalBlockFile(scope: !5142, file: !4, discriminator: 1)
!5148 = !DILocation(line: 1125, column: 42, scope: !5142)
!5149 = !DILocation(line: 1125, column: 52, scope: !5142)
!5150 = !DILocation(line: 1125, column: 21, scope: !5142)
!5151 = !DILocation(line: 1125, column: 19, scope: !5142)
!5152 = !DILocation(line: 1125, column: 58, scope: !5142)
!5153 = !DILocation(line: 1126, column: 12, scope: !5142)
!5154 = !DILocation(line: 1126, column: 26, scope: !5147)
!5155 = !DILocation(line: 1127, column: 45, scope: !5142)
!5156 = !DILocation(line: 1127, column: 55, scope: !5142)
!5157 = !DILocation(line: 1127, column: 24, scope: !5142)
!5158 = !DILocation(line: 1127, column: 22, scope: !5142)
!5159 = !DILocation(line: 1127, column: 61, scope: !5142)
!5160 = !DILocation(line: 1123, column: 9, scope: !5161)
!5161 = !DILexicalBlockFile(scope: !5085, file: !4, discriminator: 1)
!5162 = !DILocation(line: 1128, column: 9, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5142, file: !4, line: 1127, column: 70)
!5164 = !DILocation(line: 1128, column: 12, scope: !5163)
!5165 = !DILocation(line: 1128, column: 16, scope: !5163)
!5166 = !DILocation(line: 1129, column: 9, scope: !5163)
!5167 = !DILocation(line: 1133, column: 9, scope: !5168)
!5168 = distinct !DILexicalBlock(scope: !5085, file: !4, line: 1133, column: 9)
!5169 = !DILocation(line: 1133, column: 19, scope: !5168)
!5170 = !DILocation(line: 1133, column: 9, scope: !5085)
!5171 = !DILocation(line: 1134, column: 27, scope: !5172)
!5172 = distinct !DILexicalBlock(scope: !5168, file: !4, line: 1133, column: 25)
!5173 = !DILocation(line: 1134, column: 32, scope: !5172)
!5174 = !DILocation(line: 1134, column: 43, scope: !5172)
!5175 = !DILocation(line: 1134, column: 14, scope: !5172)
!5176 = !DILocation(line: 1134, column: 12, scope: !5172)
!5177 = !DILocation(line: 1135, column: 13, scope: !5178)
!5178 = distinct !DILexicalBlock(scope: !5172, file: !4, line: 1135, column: 13)
!5179 = !DILocation(line: 1135, column: 16, scope: !5178)
!5180 = !DILocation(line: 1135, column: 13, scope: !5172)
!5181 = !DILocation(line: 1136, column: 13, scope: !5182)
!5182 = distinct !DILexicalBlock(scope: !5178, file: !4, line: 1135, column: 23)
!5183 = !DILocation(line: 1136, column: 16, scope: !5182)
!5184 = !DILocation(line: 1136, column: 20, scope: !5182)
!5185 = !DILocation(line: 1137, column: 13, scope: !5182)
!5186 = !DILocation(line: 1138, column: 20, scope: !5187)
!5187 = distinct !DILexicalBlock(scope: !5178, file: !4, line: 1138, column: 20)
!5188 = !DILocation(line: 1138, column: 23, scope: !5187)
!5189 = !DILocation(line: 1138, column: 20, scope: !5178)
!5190 = !DILocation(line: 1139, column: 13, scope: !5191)
!5191 = distinct !DILexicalBlock(scope: !5187, file: !4, line: 1138, column: 29)
!5192 = !DILocation(line: 1139, column: 16, scope: !5191)
!5193 = !DILocation(line: 1139, column: 20, scope: !5191)
!5194 = !DILocation(line: 1140, column: 13, scope: !5191)
!5195 = !DILocation(line: 1142, column: 5, scope: !5172)
!5196 = !DILocation(line: 1144, column: 23, scope: !5085)
!5197 = !DILocation(line: 1145, column: 23, scope: !5085)
!5198 = !DILocation(line: 1145, column: 33, scope: !5085)
!5199 = !DILocation(line: 1145, column: 38, scope: !5085)
!5200 = !DILocation(line: 1145, column: 48, scope: !5085)
!5201 = !DILocation(line: 1144, column: 10, scope: !5085)
!5202 = !DILocation(line: 1144, column: 8, scope: !5085)
!5203 = !DILocation(line: 1146, column: 9, scope: !5204)
!5204 = distinct !DILexicalBlock(scope: !5085, file: !4, line: 1146, column: 9)
!5205 = !DILocation(line: 1146, column: 12, scope: !5204)
!5206 = !DILocation(line: 1146, column: 9, scope: !5085)
!5207 = !DILocation(line: 1147, column: 9, scope: !5208)
!5208 = distinct !DILexicalBlock(scope: !5204, file: !4, line: 1146, column: 19)
!5209 = !DILocation(line: 1147, column: 12, scope: !5208)
!5210 = !DILocation(line: 1147, column: 16, scope: !5208)
!5211 = !DILocation(line: 1148, column: 9, scope: !5208)
!5212 = !DILocation(line: 1149, column: 16, scope: !5213)
!5213 = distinct !DILexicalBlock(scope: !5204, file: !4, line: 1149, column: 16)
!5214 = !DILocation(line: 1149, column: 19, scope: !5213)
!5215 = !DILocation(line: 1149, column: 16, scope: !5204)
!5216 = !DILocation(line: 1150, column: 9, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5213, file: !4, line: 1149, column: 25)
!5218 = !DILocation(line: 1150, column: 12, scope: !5217)
!5219 = !DILocation(line: 1150, column: 16, scope: !5217)
!5220 = !DILocation(line: 1151, column: 9, scope: !5217)
!5221 = !DILocation(line: 1153, column: 9, scope: !5222)
!5222 = distinct !DILexicalBlock(scope: !5085, file: !4, line: 1153, column: 9)
!5223 = !DILocation(line: 1153, column: 19, scope: !5222)
!5224 = !DILocation(line: 1153, column: 26, scope: !5222)
!5225 = !DILocation(line: 1153, column: 9, scope: !5085)
!5226 = !DILocation(line: 1154, column: 27, scope: !5227)
!5227 = distinct !DILexicalBlock(scope: !5222, file: !4, line: 1153, column: 34)
!5228 = !DILocation(line: 1155, column: 27, scope: !5227)
!5229 = !DILocation(line: 1155, column: 37, scope: !5227)
!5230 = !DILocation(line: 1155, column: 45, scope: !5227)
!5231 = !DILocation(line: 1155, column: 55, scope: !5227)
!5232 = !DILocation(line: 1154, column: 14, scope: !5227)
!5233 = !DILocation(line: 1154, column: 12, scope: !5227)
!5234 = !DILocation(line: 1156, column: 13, scope: !5235)
!5235 = distinct !DILexicalBlock(scope: !5227, file: !4, line: 1156, column: 13)
!5236 = !DILocation(line: 1156, column: 16, scope: !5235)
!5237 = !DILocation(line: 1156, column: 13, scope: !5227)
!5238 = !DILocation(line: 1157, column: 13, scope: !5239)
!5239 = distinct !DILexicalBlock(scope: !5235, file: !4, line: 1156, column: 23)
!5240 = !DILocation(line: 1157, column: 16, scope: !5239)
!5241 = !DILocation(line: 1157, column: 20, scope: !5239)
!5242 = !DILocation(line: 1158, column: 13, scope: !5239)
!5243 = !DILocation(line: 1159, column: 20, scope: !5244)
!5244 = distinct !DILexicalBlock(scope: !5235, file: !4, line: 1159, column: 20)
!5245 = !DILocation(line: 1159, column: 23, scope: !5244)
!5246 = !DILocation(line: 1159, column: 20, scope: !5235)
!5247 = !DILocation(line: 1160, column: 13, scope: !5248)
!5248 = distinct !DILexicalBlock(scope: !5244, file: !4, line: 1159, column: 29)
!5249 = !DILocation(line: 1160, column: 16, scope: !5248)
!5250 = !DILocation(line: 1160, column: 20, scope: !5248)
!5251 = !DILocation(line: 1161, column: 13, scope: !5248)
!5252 = !DILocation(line: 1163, column: 5, scope: !5227)
!5253 = !DILocation(line: 1165, column: 9, scope: !5254)
!5254 = distinct !DILexicalBlock(scope: !5085, file: !4, line: 1165, column: 9)
!5255 = !DILocation(line: 1165, column: 19, scope: !5254)
!5256 = !DILocation(line: 1165, column: 24, scope: !5254)
!5257 = !DILocation(line: 1165, column: 9, scope: !5085)
!5258 = !DILocation(line: 1166, column: 27, scope: !5259)
!5259 = distinct !DILexicalBlock(scope: !5254, file: !4, line: 1165, column: 32)
!5260 = !DILocation(line: 1167, column: 27, scope: !5259)
!5261 = !DILocation(line: 1167, column: 37, scope: !5259)
!5262 = !DILocation(line: 1167, column: 43, scope: !5259)
!5263 = !DILocation(line: 1167, column: 53, scope: !5259)
!5264 = !DILocation(line: 1166, column: 14, scope: !5259)
!5265 = !DILocation(line: 1166, column: 12, scope: !5259)
!5266 = !DILocation(line: 1168, column: 13, scope: !5267)
!5267 = distinct !DILexicalBlock(scope: !5259, file: !4, line: 1168, column: 13)
!5268 = !DILocation(line: 1168, column: 16, scope: !5267)
!5269 = !DILocation(line: 1168, column: 13, scope: !5259)
!5270 = !DILocation(line: 1169, column: 13, scope: !5271)
!5271 = distinct !DILexicalBlock(scope: !5267, file: !4, line: 1168, column: 23)
!5272 = !DILocation(line: 1169, column: 16, scope: !5271)
!5273 = !DILocation(line: 1169, column: 20, scope: !5271)
!5274 = !DILocation(line: 1170, column: 13, scope: !5271)
!5275 = !DILocation(line: 1171, column: 20, scope: !5276)
!5276 = distinct !DILexicalBlock(scope: !5267, file: !4, line: 1171, column: 20)
!5277 = !DILocation(line: 1171, column: 23, scope: !5276)
!5278 = !DILocation(line: 1171, column: 20, scope: !5267)
!5279 = !DILocation(line: 1172, column: 13, scope: !5280)
!5280 = distinct !DILexicalBlock(scope: !5276, file: !4, line: 1171, column: 29)
!5281 = !DILocation(line: 1172, column: 16, scope: !5280)
!5282 = !DILocation(line: 1172, column: 20, scope: !5280)
!5283 = !DILocation(line: 1173, column: 13, scope: !5280)
!5284 = !DILocation(line: 1175, column: 5, scope: !5259)
!5285 = !DILocation(line: 1177, column: 9, scope: !5286)
!5286 = distinct !DILexicalBlock(scope: !5085, file: !4, line: 1177, column: 9)
!5287 = !DILocation(line: 1177, column: 19, scope: !5286)
!5288 = !DILocation(line: 1177, column: 22, scope: !5286)
!5289 = !DILocation(line: 1177, column: 9, scope: !5085)
!5290 = !DILocation(line: 1178, column: 27, scope: !5291)
!5291 = distinct !DILexicalBlock(scope: !5286, file: !4, line: 1177, column: 30)
!5292 = !DILocation(line: 1179, column: 27, scope: !5291)
!5293 = !DILocation(line: 1179, column: 37, scope: !5291)
!5294 = !DILocation(line: 1179, column: 41, scope: !5291)
!5295 = !DILocation(line: 1179, column: 51, scope: !5291)
!5296 = !DILocation(line: 1178, column: 14, scope: !5291)
!5297 = !DILocation(line: 1178, column: 12, scope: !5291)
!5298 = !DILocation(line: 1180, column: 13, scope: !5299)
!5299 = distinct !DILexicalBlock(scope: !5291, file: !4, line: 1180, column: 13)
!5300 = !DILocation(line: 1180, column: 16, scope: !5299)
!5301 = !DILocation(line: 1180, column: 13, scope: !5291)
!5302 = !DILocation(line: 1181, column: 13, scope: !5303)
!5303 = distinct !DILexicalBlock(scope: !5299, file: !4, line: 1180, column: 23)
!5304 = !DILocation(line: 1181, column: 16, scope: !5303)
!5305 = !DILocation(line: 1181, column: 20, scope: !5303)
!5306 = !DILocation(line: 1182, column: 13, scope: !5303)
!5307 = !DILocation(line: 1183, column: 20, scope: !5308)
!5308 = distinct !DILexicalBlock(scope: !5299, file: !4, line: 1183, column: 20)
!5309 = !DILocation(line: 1183, column: 23, scope: !5308)
!5310 = !DILocation(line: 1183, column: 20, scope: !5299)
!5311 = !DILocation(line: 1184, column: 13, scope: !5312)
!5312 = distinct !DILexicalBlock(scope: !5308, file: !4, line: 1183, column: 29)
!5313 = !DILocation(line: 1184, column: 16, scope: !5312)
!5314 = !DILocation(line: 1184, column: 20, scope: !5312)
!5315 = !DILocation(line: 1185, column: 13, scope: !5312)
!5316 = !DILocation(line: 1187, column: 5, scope: !5291)
!5317 = !DILocation(line: 1189, column: 12, scope: !5318)
!5318 = distinct !DILexicalBlock(scope: !5085, file: !4, line: 1189, column: 5)
!5319 = !DILocation(line: 1189, column: 10, scope: !5318)
!5320 = !DILocation(line: 1189, column: 17, scope: !5321)
!5321 = !DILexicalBlockFile(scope: !5322, file: !4, discriminator: 1)
!5322 = distinct !DILexicalBlock(scope: !5318, file: !4, line: 1189, column: 5)
!5323 = !DILocation(line: 1189, column: 43, scope: !5321)
!5324 = !DILocation(line: 1189, column: 53, scope: !5321)
!5325 = !DILocation(line: 1189, column: 21, scope: !5321)
!5326 = !DILocation(line: 1189, column: 19, scope: !5321)
!5327 = !DILocation(line: 1189, column: 5, scope: !5321)
!5328 = !DILocalVariable(name: "p", scope: !5329, file: !4, line: 1190, type: !64)
!5329 = distinct !DILexicalBlock(scope: !5322, file: !4, line: 1189, column: 69)
!5330 = !DILocation(line: 1190, column: 15, scope: !5329)
!5331 = !DILocalVariable(name: "tmpval", scope: !5329, file: !4, line: 1190, type: !64)
!5332 = !DILocation(line: 1190, column: 19, scope: !5329)
!5333 = !DILocalVariable(name: "value", scope: !5329, file: !4, line: 1191, type: !64)
!5334 = !DILocation(line: 1191, column: 15, scope: !5329)
!5335 = !DILocation(line: 1191, column: 47, scope: !5329)
!5336 = !DILocation(line: 1191, column: 57, scope: !5329)
!5337 = !DILocation(line: 1191, column: 67, scope: !5329)
!5338 = !DILocation(line: 1191, column: 23, scope: !5329)
!5339 = !DILocation(line: 1193, column: 105, scope: !5340)
!5340 = distinct !DILexicalBlock(scope: !5329, file: !4, line: 1193, column: 13)
!5341 = !DILocation(line: 1193, column: 91, scope: !5340)
!5342 = !DILocation(line: 1193, column: 89, scope: !5340)
!5343 = !DILocation(line: 1193, column: 14, scope: !5344)
!5344 = !DILexicalBlockFile(scope: !5340, file: !4, discriminator: 1)
!5345 = !DILocation(line: 1193, column: 14, scope: !5340)
!5346 = !DILocation(line: 1193, column: 13, scope: !5329)
!5347 = !DILocation(line: 1194, column: 13, scope: !5348)
!5348 = distinct !DILexicalBlock(scope: !5340, file: !4, line: 1193, column: 139)
!5349 = !DILocation(line: 1194, column: 16, scope: !5348)
!5350 = !DILocation(line: 1194, column: 20, scope: !5348)
!5351 = !DILocation(line: 1195, column: 13, scope: !5348)
!5352 = !DILocation(line: 1197, column: 20, scope: !5329)
!5353 = !DILocation(line: 1197, column: 13, scope: !5329)
!5354 = !DILocation(line: 1197, column: 11, scope: !5329)
!5355 = !DILocation(line: 1198, column: 13, scope: !5356)
!5356 = distinct !DILexicalBlock(scope: !5329, file: !4, line: 1198, column: 13)
!5357 = !DILocation(line: 1198, column: 15, scope: !5356)
!5358 = !DILocation(line: 1198, column: 13, scope: !5329)
!5359 = !DILocation(line: 1199, column: 15, scope: !5356)
!5360 = !DILocation(line: 1199, column: 18, scope: !5356)
!5361 = !DILocation(line: 1199, column: 13, scope: !5356)
!5362 = !DILocation(line: 1200, column: 31, scope: !5329)
!5363 = !DILocation(line: 1200, column: 36, scope: !5329)
!5364 = !DILocation(line: 1200, column: 44, scope: !5329)
!5365 = !DILocation(line: 1200, column: 14, scope: !5329)
!5366 = !DILocation(line: 1200, column: 12, scope: !5329)
!5367 = !DILocation(line: 1201, column: 21, scope: !5329)
!5368 = !DILocation(line: 1201, column: 9, scope: !5329)
!5369 = !DILocation(line: 1202, column: 13, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5329, file: !4, line: 1202, column: 13)
!5371 = !DILocation(line: 1202, column: 16, scope: !5370)
!5372 = !DILocation(line: 1202, column: 13, scope: !5329)
!5373 = !DILocation(line: 1203, column: 13, scope: !5374)
!5374 = distinct !DILexicalBlock(scope: !5370, file: !4, line: 1202, column: 23)
!5375 = !DILocation(line: 1203, column: 16, scope: !5374)
!5376 = !DILocation(line: 1203, column: 20, scope: !5374)
!5377 = !DILocation(line: 1204, column: 13, scope: !5374)
!5378 = !DILocation(line: 1205, column: 20, scope: !5379)
!5379 = distinct !DILexicalBlock(scope: !5370, file: !4, line: 1205, column: 20)
!5380 = !DILocation(line: 1205, column: 23, scope: !5379)
!5381 = !DILocation(line: 1205, column: 20, scope: !5370)
!5382 = !DILocation(line: 1206, column: 13, scope: !5383)
!5383 = distinct !DILexicalBlock(scope: !5379, file: !4, line: 1205, column: 29)
!5384 = !DILocation(line: 1206, column: 16, scope: !5383)
!5385 = !DILocation(line: 1206, column: 20, scope: !5383)
!5386 = !DILocation(line: 1207, column: 13, scope: !5383)
!5387 = !DILocation(line: 1209, column: 5, scope: !5329)
!5388 = !DILocation(line: 1189, column: 65, scope: !5389)
!5389 = !DILexicalBlockFile(scope: !5322, file: !4, discriminator: 2)
!5390 = !DILocation(line: 1189, column: 5, scope: !5389)
!5391 = distinct !{!5391, !5392}
!5392 = !DILocation(line: 1189, column: 5, scope: !5085)
!5393 = !DILocation(line: 1210, column: 23, scope: !5394)
!5394 = distinct !DILexicalBlock(scope: !5085, file: !4, line: 1210, column: 9)
!5395 = !DILocation(line: 1210, column: 10, scope: !5394)
!5396 = !DILocation(line: 1210, column: 9, scope: !5085)
!5397 = !DILocation(line: 1211, column: 9, scope: !5398)
!5398 = distinct !DILexicalBlock(scope: !5394, file: !4, line: 1210, column: 29)
!5399 = !DILocation(line: 1211, column: 12, scope: !5398)
!5400 = !DILocation(line: 1211, column: 16, scope: !5398)
!5401 = !DILocation(line: 1212, column: 9, scope: !5398)
!5402 = !DILocation(line: 1214, column: 25, scope: !5403)
!5403 = distinct !DILexicalBlock(scope: !5085, file: !4, line: 1214, column: 9)
!5404 = !DILocation(line: 1214, column: 30, scope: !5403)
!5405 = !DILocation(line: 1214, column: 40, scope: !5403)
!5406 = !DILocation(line: 1214, column: 47, scope: !5403)
!5407 = !DILocation(line: 1214, column: 57, scope: !5403)
!5408 = !DILocation(line: 1214, column: 10, scope: !5403)
!5409 = !DILocation(line: 1214, column: 9, scope: !5085)
!5410 = !DILocation(line: 1215, column: 9, scope: !5411)
!5411 = distinct !DILexicalBlock(scope: !5403, file: !4, line: 1214, column: 69)
!5412 = !DILocation(line: 1215, column: 12, scope: !5411)
!5413 = !DILocation(line: 1215, column: 16, scope: !5411)
!5414 = !DILocation(line: 1216, column: 9, scope: !5411)
!5415 = !DILocation(line: 1218, column: 24, scope: !5416)
!5416 = distinct !DILexicalBlock(scope: !5085, file: !4, line: 1218, column: 9)
!5417 = !DILocation(line: 1218, column: 10, scope: !5416)
!5418 = !DILocation(line: 1218, column: 9, scope: !5085)
!5419 = !DILocation(line: 1219, column: 9, scope: !5420)
!5420 = distinct !DILexicalBlock(scope: !5416, file: !4, line: 1218, column: 45)
!5421 = !DILocation(line: 1219, column: 12, scope: !5420)
!5422 = !DILocation(line: 1219, column: 16, scope: !5420)
!5423 = !DILocation(line: 1220, column: 9, scope: !5420)
!5424 = !DILocation(line: 1222, column: 97, scope: !5425)
!5425 = distinct !DILexicalBlock(scope: !5085, file: !4, line: 1222, column: 9)
!5426 = !DILocation(line: 1222, column: 83, scope: !5425)
!5427 = !DILocation(line: 1222, column: 81, scope: !5425)
!5428 = !DILocation(line: 1222, column: 10, scope: !5429)
!5429 = !DILexicalBlockFile(scope: !5425, file: !4, discriminator: 1)
!5430 = !DILocation(line: 1222, column: 10, scope: !5425)
!5431 = !DILocation(line: 1222, column: 9, scope: !5085)
!5432 = !DILocation(line: 1223, column: 9, scope: !5433)
!5433 = distinct !DILexicalBlock(scope: !5425, file: !4, line: 1222, column: 133)
!5434 = !DILocation(line: 1223, column: 12, scope: !5433)
!5435 = !DILocation(line: 1223, column: 16, scope: !5433)
!5436 = !DILocation(line: 1224, column: 9, scope: !5433)
!5437 = !DILocation(line: 1226, column: 24, scope: !5438)
!5438 = distinct !DILexicalBlock(scope: !5085, file: !4, line: 1226, column: 9)
!5439 = !DILocation(line: 1226, column: 29, scope: !5438)
!5440 = !DILocation(line: 1226, column: 10, scope: !5438)
!5441 = !DILocation(line: 1227, column: 9, scope: !5438)
!5442 = !DILocation(line: 1227, column: 32, scope: !5443)
!5443 = !DILexicalBlockFile(scope: !5438, file: !4, discriminator: 1)
!5444 = !DILocation(line: 1228, column: 32, scope: !5438)
!5445 = !DILocation(line: 1228, column: 42, scope: !5438)
!5446 = !DILocation(line: 1228, column: 50, scope: !5438)
!5447 = !DILocation(line: 1228, column: 60, scope: !5438)
!5448 = !DILocation(line: 1229, column: 32, scope: !5438)
!5449 = !DILocation(line: 1229, column: 37, scope: !5438)
!5450 = !DILocation(line: 1227, column: 13, scope: !5443)
!5451 = !DILocation(line: 1226, column: 9, scope: !5161)
!5452 = !DILocation(line: 1230, column: 9, scope: !5453)
!5453 = distinct !DILexicalBlock(scope: !5438, file: !4, line: 1229, column: 47)
!5454 = !DILocation(line: 1230, column: 12, scope: !5453)
!5455 = !DILocation(line: 1230, column: 16, scope: !5453)
!5456 = !DILocation(line: 1231, column: 9, scope: !5453)
!5457 = !DILocation(line: 1233, column: 5, scope: !5085)
!5458 = !DILocation(line: 1233, column: 8, scope: !5085)
!5459 = !DILocation(line: 1233, column: 12, scope: !5085)
!5460 = !DILocation(line: 1235, column: 22, scope: !5085)
!5461 = !DILocation(line: 1235, column: 5, scope: !5085)
!5462 = !DILocation(line: 1236, column: 17, scope: !5085)
!5463 = !DILocation(line: 1236, column: 5, scope: !5085)
!5464 = !DILocation(line: 1237, column: 5, scope: !5085)
!5465 = distinct !DISubprogram(name: "mac_test_run_pkey", scope: !4, file: !4, line: 1009, type: !154, isLocal: true, isDefinition: true, scopeLine: 1010, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5466 = !DILocalVariable(name: "t", arg: 1, scope: !5465, file: !4, line: 1009, type: !100)
!5467 = !DILocation(line: 1009, column: 40, scope: !5465)
!5468 = !DILocalVariable(name: "expected", scope: !5465, file: !4, line: 1011, type: !4759)
!5469 = !DILocation(line: 1011, column: 15, scope: !5465)
!5470 = !DILocation(line: 1011, column: 26, scope: !5465)
!5471 = !DILocation(line: 1011, column: 29, scope: !5465)
!5472 = !DILocalVariable(name: "mctx", scope: !5465, file: !4, line: 1012, type: !2509)
!5473 = !DILocation(line: 1012, column: 17, scope: !5465)
!5474 = !DILocalVariable(name: "pctx", scope: !5465, file: !4, line: 1013, type: !3016)
!5475 = !DILocation(line: 1013, column: 19, scope: !5465)
!5476 = !DILocalVariable(name: "genctx", scope: !5465, file: !4, line: 1013, type: !3016)
!5477 = !DILocation(line: 1013, column: 32, scope: !5465)
!5478 = !DILocalVariable(name: "key", scope: !5465, file: !4, line: 1014, type: !193)
!5479 = !DILocation(line: 1014, column: 15, scope: !5465)
!5480 = !DILocalVariable(name: "md", scope: !5465, file: !4, line: 1015, type: !2380)
!5481 = !DILocation(line: 1015, column: 19, scope: !5465)
!5482 = !DILocalVariable(name: "got", scope: !5465, file: !4, line: 1016, type: !56)
!5483 = !DILocation(line: 1016, column: 20, scope: !5465)
!5484 = !DILocalVariable(name: "got_len", scope: !5465, file: !4, line: 1017, type: !33)
!5485 = !DILocation(line: 1017, column: 12, scope: !5465)
!5486 = !DILocalVariable(name: "i", scope: !5465, file: !4, line: 1018, type: !31)
!5487 = !DILocation(line: 1018, column: 9, scope: !5465)
!5488 = !DILocation(line: 1020, column: 9, scope: !5489)
!5489 = distinct !DILexicalBlock(scope: !5465, file: !4, line: 1020, column: 9)
!5490 = !DILocation(line: 1020, column: 19, scope: !5489)
!5491 = !DILocation(line: 1020, column: 23, scope: !5489)
!5492 = !DILocation(line: 1020, column: 9, scope: !5465)
!5493 = !DILocation(line: 1021, column: 86, scope: !5489)
!5494 = !DILocation(line: 1021, column: 96, scope: !5489)
!5495 = !DILocation(line: 1021, column: 75, scope: !5489)
!5496 = !DILocation(line: 1021, column: 9, scope: !5497)
!5497 = !DILexicalBlockFile(scope: !5489, file: !4, discriminator: 1)
!5498 = !DILocation(line: 1021, column: 9, scope: !5489)
!5499 = !DILocation(line: 1023, column: 61, scope: !5489)
!5500 = !DILocation(line: 1023, column: 71, scope: !5489)
!5501 = !DILocation(line: 1023, column: 50, scope: !5489)
!5502 = !DILocation(line: 1023, column: 78, scope: !5489)
!5503 = !DILocation(line: 1023, column: 88, scope: !5489)
!5504 = !DILocation(line: 1023, column: 9, scope: !5497)
!5505 = !DILocation(line: 1034, column: 9, scope: !5506)
!5506 = distinct !DILexicalBlock(scope: !5465, file: !4, line: 1034, column: 9)
!5507 = !DILocation(line: 1034, column: 19, scope: !5506)
!5508 = !DILocation(line: 1034, column: 24, scope: !5506)
!5509 = !DILocation(line: 1034, column: 9, scope: !5465)
!5510 = !DILocation(line: 1035, column: 42, scope: !5506)
!5511 = !DILocation(line: 1035, column: 52, scope: !5506)
!5512 = !DILocation(line: 1035, column: 57, scope: !5506)
!5513 = !DILocation(line: 1035, column: 67, scope: !5506)
!5514 = !DILocation(line: 1036, column: 58, scope: !5506)
!5515 = !DILocation(line: 1036, column: 68, scope: !5506)
!5516 = !DILocation(line: 1036, column: 37, scope: !5506)
!5517 = !DILocation(line: 1035, column: 15, scope: !5506)
!5518 = !DILocation(line: 1035, column: 13, scope: !5506)
!5519 = !DILocation(line: 1035, column: 9, scope: !5506)
!5520 = !DILocation(line: 1038, column: 44, scope: !5506)
!5521 = !DILocation(line: 1038, column: 54, scope: !5506)
!5522 = !DILocation(line: 1038, column: 65, scope: !5506)
!5523 = !DILocation(line: 1038, column: 75, scope: !5506)
!5524 = !DILocation(line: 1039, column: 44, scope: !5506)
!5525 = !DILocation(line: 1039, column: 54, scope: !5506)
!5526 = !DILocation(line: 1038, column: 15, scope: !5506)
!5527 = !DILocation(line: 1038, column: 13, scope: !5506)
!5528 = !DILocation(line: 1040, column: 9, scope: !5529)
!5529 = distinct !DILexicalBlock(scope: !5465, file: !4, line: 1040, column: 9)
!5530 = !DILocation(line: 1040, column: 13, scope: !5529)
!5531 = !DILocation(line: 1040, column: 9, scope: !5465)
!5532 = !DILocation(line: 1041, column: 9, scope: !5533)
!5533 = distinct !DILexicalBlock(scope: !5529, file: !4, line: 1040, column: 21)
!5534 = !DILocation(line: 1041, column: 12, scope: !5533)
!5535 = !DILocation(line: 1041, column: 16, scope: !5533)
!5536 = !DILocation(line: 1042, column: 9, scope: !5533)
!5537 = !DILocation(line: 1045, column: 9, scope: !5538)
!5538 = distinct !DILexicalBlock(scope: !5465, file: !4, line: 1045, column: 9)
!5539 = !DILocation(line: 1045, column: 19, scope: !5538)
!5540 = !DILocation(line: 1045, column: 24, scope: !5538)
!5541 = !DILocation(line: 1045, column: 9, scope: !5465)
!5542 = !DILocation(line: 1046, column: 118, scope: !5543)
!5543 = distinct !DILexicalBlock(scope: !5544, file: !4, line: 1046, column: 13)
!5544 = distinct !DILexicalBlock(scope: !5538, file: !4, line: 1045, column: 32)
!5545 = !DILocation(line: 1046, column: 128, scope: !5543)
!5546 = !DILocation(line: 1046, column: 97, scope: !5543)
!5547 = !DILocation(line: 1046, column: 95, scope: !5543)
!5548 = !DILocation(line: 1046, column: 92, scope: !5543)
!5549 = !DILocation(line: 1046, column: 14, scope: !5550)
!5550 = !DILexicalBlockFile(scope: !5543, file: !4, discriminator: 1)
!5551 = !DILocation(line: 1046, column: 14, scope: !5543)
!5552 = !DILocation(line: 1046, column: 13, scope: !5544)
!5553 = !DILocation(line: 1047, column: 13, scope: !5554)
!5554 = distinct !DILexicalBlock(scope: !5543, file: !4, line: 1046, column: 135)
!5555 = !DILocation(line: 1047, column: 16, scope: !5554)
!5556 = !DILocation(line: 1047, column: 20, scope: !5554)
!5557 = !DILocation(line: 1048, column: 13, scope: !5554)
!5558 = !DILocation(line: 1050, column: 5, scope: !5544)
!5559 = !DILocation(line: 1051, column: 78, scope: !5560)
!5560 = distinct !DILexicalBlock(scope: !5465, file: !4, line: 1051, column: 9)
!5561 = !DILocation(line: 1051, column: 76, scope: !5560)
!5562 = !DILocation(line: 1051, column: 71, scope: !5560)
!5563 = !DILocation(line: 1051, column: 10, scope: !5564)
!5564 = !DILexicalBlockFile(scope: !5560, file: !4, discriminator: 1)
!5565 = !DILocation(line: 1051, column: 10, scope: !5560)
!5566 = !DILocation(line: 1051, column: 9, scope: !5465)
!5567 = !DILocation(line: 1052, column: 9, scope: !5568)
!5568 = distinct !DILexicalBlock(scope: !5560, file: !4, line: 1051, column: 97)
!5569 = !DILocation(line: 1052, column: 12, scope: !5568)
!5570 = !DILocation(line: 1052, column: 16, scope: !5568)
!5571 = !DILocation(line: 1053, column: 9, scope: !5568)
!5572 = !DILocation(line: 1055, column: 29, scope: !5573)
!5573 = distinct !DILexicalBlock(scope: !5465, file: !4, line: 1055, column: 9)
!5574 = !DILocation(line: 1055, column: 42, scope: !5573)
!5575 = !DILocation(line: 1055, column: 51, scope: !5573)
!5576 = !DILocation(line: 1055, column: 10, scope: !5573)
!5577 = !DILocation(line: 1055, column: 9, scope: !5465)
!5578 = !DILocation(line: 1056, column: 9, scope: !5579)
!5579 = distinct !DILexicalBlock(scope: !5573, file: !4, line: 1055, column: 57)
!5580 = !DILocation(line: 1056, column: 12, scope: !5579)
!5581 = !DILocation(line: 1056, column: 16, scope: !5579)
!5582 = !DILocation(line: 1057, column: 9, scope: !5579)
!5583 = !DILocation(line: 1059, column: 12, scope: !5584)
!5584 = distinct !DILexicalBlock(scope: !5465, file: !4, line: 1059, column: 5)
!5585 = !DILocation(line: 1059, column: 10, scope: !5584)
!5586 = !DILocation(line: 1059, column: 17, scope: !5587)
!5587 = !DILexicalBlockFile(scope: !5588, file: !4, discriminator: 1)
!5588 = distinct !DILexicalBlock(scope: !5584, file: !4, line: 1059, column: 5)
!5589 = !DILocation(line: 1059, column: 43, scope: !5587)
!5590 = !DILocation(line: 1059, column: 53, scope: !5587)
!5591 = !DILocation(line: 1059, column: 21, scope: !5587)
!5592 = !DILocation(line: 1059, column: 19, scope: !5587)
!5593 = !DILocation(line: 1059, column: 5, scope: !5587)
!5594 = !DILocation(line: 1060, column: 33, scope: !5595)
!5595 = distinct !DILexicalBlock(scope: !5588, file: !4, line: 1060, column: 13)
!5596 = !DILocation(line: 1060, column: 36, scope: !5595)
!5597 = !DILocation(line: 1061, column: 57, scope: !5595)
!5598 = !DILocation(line: 1061, column: 67, scope: !5595)
!5599 = !DILocation(line: 1062, column: 57, scope: !5595)
!5600 = !DILocation(line: 1061, column: 33, scope: !5595)
!5601 = !DILocation(line: 1060, column: 14, scope: !5595)
!5602 = !DILocation(line: 1060, column: 13, scope: !5588)
!5603 = !DILocation(line: 1063, column: 13, scope: !5604)
!5604 = distinct !DILexicalBlock(scope: !5595, file: !4, line: 1062, column: 62)
!5605 = !DILocation(line: 1063, column: 16, scope: !5604)
!5606 = !DILocation(line: 1063, column: 20, scope: !5604)
!5607 = !DILocation(line: 1064, column: 13, scope: !5604)
!5608 = !DILocation(line: 1062, column: 59, scope: !5609)
!5609 = !DILexicalBlockFile(scope: !5595, file: !4, discriminator: 1)
!5610 = !DILocation(line: 1059, column: 65, scope: !5611)
!5611 = !DILexicalBlockFile(scope: !5588, file: !4, discriminator: 2)
!5612 = !DILocation(line: 1059, column: 5, scope: !5611)
!5613 = distinct !{!5613, !5614}
!5614 = !DILocation(line: 1059, column: 5, scope: !5465)
!5615 = !DILocation(line: 1066, column: 27, scope: !5616)
!5616 = distinct !DILexicalBlock(scope: !5465, file: !4, line: 1066, column: 9)
!5617 = !DILocation(line: 1066, column: 32, scope: !5616)
!5618 = !DILocation(line: 1066, column: 42, scope: !5616)
!5619 = !DILocation(line: 1066, column: 48, scope: !5616)
!5620 = !DILocation(line: 1066, column: 58, scope: !5616)
!5621 = !DILocation(line: 1066, column: 10, scope: !5616)
!5622 = !DILocation(line: 1066, column: 9, scope: !5465)
!5623 = !DILocation(line: 1067, column: 9, scope: !5624)
!5624 = distinct !DILexicalBlock(scope: !5616, file: !4, line: 1066, column: 70)
!5625 = !DILocation(line: 1067, column: 12, scope: !5624)
!5626 = !DILocation(line: 1067, column: 16, scope: !5624)
!5627 = !DILocation(line: 1068, column: 9, scope: !5624)
!5628 = !DILocation(line: 1070, column: 30, scope: !5629)
!5629 = distinct !DILexicalBlock(scope: !5465, file: !4, line: 1070, column: 9)
!5630 = !DILocation(line: 1070, column: 10, scope: !5629)
!5631 = !DILocation(line: 1070, column: 9, scope: !5465)
!5632 = !DILocation(line: 1071, column: 9, scope: !5633)
!5633 = distinct !DILexicalBlock(scope: !5629, file: !4, line: 1070, column: 52)
!5634 = !DILocation(line: 1071, column: 12, scope: !5633)
!5635 = !DILocation(line: 1071, column: 16, scope: !5633)
!5636 = !DILocation(line: 1072, column: 9, scope: !5633)
!5637 = !DILocation(line: 1074, column: 97, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5465, file: !4, line: 1074, column: 9)
!5639 = !DILocation(line: 1074, column: 83, scope: !5638)
!5640 = !DILocation(line: 1074, column: 81, scope: !5638)
!5641 = !DILocation(line: 1074, column: 10, scope: !5642)
!5642 = !DILexicalBlockFile(scope: !5638, file: !4, discriminator: 1)
!5643 = !DILocation(line: 1074, column: 10, scope: !5638)
!5644 = !DILocation(line: 1074, column: 9, scope: !5465)
!5645 = !DILocation(line: 1075, column: 9, scope: !5646)
!5646 = distinct !DILexicalBlock(scope: !5638, file: !4, line: 1074, column: 133)
!5647 = !DILocation(line: 1075, column: 12, scope: !5646)
!5648 = !DILocation(line: 1075, column: 16, scope: !5646)
!5649 = !DILocation(line: 1076, column: 9, scope: !5646)
!5650 = !DILocation(line: 1078, column: 30, scope: !5651)
!5651 = distinct !DILexicalBlock(scope: !5465, file: !4, line: 1078, column: 9)
!5652 = !DILocation(line: 1078, column: 36, scope: !5651)
!5653 = !DILocation(line: 1078, column: 10, scope: !5651)
!5654 = !DILocation(line: 1079, column: 13, scope: !5651)
!5655 = !DILocation(line: 1079, column: 36, scope: !5656)
!5656 = !DILexicalBlockFile(scope: !5651, file: !4, discriminator: 1)
!5657 = !DILocation(line: 1080, column: 36, scope: !5651)
!5658 = !DILocation(line: 1080, column: 46, scope: !5651)
!5659 = !DILocation(line: 1080, column: 54, scope: !5651)
!5660 = !DILocation(line: 1080, column: 64, scope: !5651)
!5661 = !DILocation(line: 1081, column: 36, scope: !5651)
!5662 = !DILocation(line: 1081, column: 41, scope: !5651)
!5663 = !DILocation(line: 1079, column: 17, scope: !5656)
!5664 = !DILocation(line: 1078, column: 9, scope: !5665)
!5665 = !DILexicalBlockFile(scope: !5465, file: !4, discriminator: 1)
!5666 = !DILocation(line: 1082, column: 9, scope: !5667)
!5667 = distinct !DILexicalBlock(scope: !5651, file: !4, line: 1081, column: 51)
!5668 = !DILocation(line: 1082, column: 12, scope: !5667)
!5669 = !DILocation(line: 1082, column: 16, scope: !5667)
!5670 = !DILocation(line: 1083, column: 9, scope: !5667)
!5671 = !DILocation(line: 1085, column: 5, scope: !5465)
!5672 = !DILocation(line: 1085, column: 8, scope: !5465)
!5673 = !DILocation(line: 1085, column: 12, scope: !5465)
!5674 = !DILocation(line: 1087, column: 21, scope: !5465)
!5675 = !DILocation(line: 1087, column: 5, scope: !5465)
!5676 = !DILocation(line: 1088, column: 17, scope: !5465)
!5677 = !DILocation(line: 1088, column: 5, scope: !5465)
!5678 = !DILocation(line: 1089, column: 23, scope: !5465)
!5679 = !DILocation(line: 1089, column: 5, scope: !5465)
!5680 = !DILocation(line: 1090, column: 19, scope: !5465)
!5681 = !DILocation(line: 1090, column: 5, scope: !5465)
!5682 = !DILocation(line: 1091, column: 5, scope: !5465)
!5683 = distinct !DISubprogram(name: "sk_OPENSSL_STRING_num", scope: !63, file: !63, line: 159, type: !5684, isLocal: true, isDefinition: true, scopeLine: 159, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5684 = !DISubroutineType(types: !5685)
!5685 = !{!31, !5686}
!5686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5687, size: 64, align: 64)
!5687 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !62)
!5688 = !DILocalVariable(name: "sk", arg: 1, scope: !5683, file: !63, line: 159, type: !5686)
!5689 = !DILocation(line: 159, column: 337, scope: !5683)
!5690 = !DILocation(line: 159, column: 388, scope: !5683)
!5691 = !DILocation(line: 159, column: 365, scope: !5683)
!5692 = !DILocation(line: 159, column: 350, scope: !5683)
!5693 = !DILocation(line: 159, column: 343, scope: !5683)
!5694 = distinct !DISubprogram(name: "sk_OPENSSL_STRING_value", scope: !63, file: !63, line: 159, type: !5695, isLocal: true, isDefinition: true, scopeLine: 159, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5695 = !DISubroutineType(types: !5696)
!5696 = !{!64, !5686, !31}
!5697 = !DILocalVariable(name: "sk", arg: 1, scope: !5694, file: !63, line: 159, type: !5686)
!5698 = !DILocation(line: 159, column: 501, scope: !5694)
!5699 = !DILocalVariable(name: "idx", arg: 2, scope: !5694, file: !63, line: 159, type: !31)
!5700 = !DILocation(line: 159, column: 509, scope: !5694)
!5701 = !DILocation(line: 159, column: 571, scope: !5694)
!5702 = !DILocation(line: 159, column: 548, scope: !5694)
!5703 = !DILocation(line: 159, column: 575, scope: !5694)
!5704 = !DILocation(line: 159, column: 531, scope: !5694)
!5705 = !DILocation(line: 159, column: 516, scope: !5694)
!5706 = distinct !DISubprogram(name: "mac_test_ctrl_pkey", scope: !4, file: !4, line: 987, type: !3370, isLocal: true, isDefinition: true, scopeLine: 989, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5707 = !DILocalVariable(name: "t", arg: 1, scope: !5706, file: !4, line: 987, type: !100)
!5708 = !DILocation(line: 987, column: 41, scope: !5706)
!5709 = !DILocalVariable(name: "pctx", arg: 2, scope: !5706, file: !4, line: 987, type: !3016)
!5710 = !DILocation(line: 987, column: 58, scope: !5706)
!5711 = !DILocalVariable(name: "value", arg: 3, scope: !5706, file: !4, line: 988, type: !67)
!5712 = !DILocation(line: 988, column: 43, scope: !5706)
!5713 = !DILocalVariable(name: "rv", scope: !5706, file: !4, line: 990, type: !31)
!5714 = !DILocation(line: 990, column: 9, scope: !5706)
!5715 = !DILocalVariable(name: "p", scope: !5706, file: !4, line: 991, type: !64)
!5716 = !DILocation(line: 991, column: 11, scope: !5706)
!5717 = !DILocalVariable(name: "tmpval", scope: !5706, file: !4, line: 991, type: !64)
!5718 = !DILocation(line: 991, column: 15, scope: !5706)
!5719 = !DILocation(line: 993, column: 100, scope: !5720)
!5720 = distinct !DILexicalBlock(scope: !5706, file: !4, line: 993, column: 9)
!5721 = !DILocation(line: 993, column: 86, scope: !5720)
!5722 = !DILocation(line: 993, column: 84, scope: !5720)
!5723 = !DILocation(line: 993, column: 10, scope: !5724)
!5724 = !DILexicalBlockFile(scope: !5720, file: !4, discriminator: 1)
!5725 = !DILocation(line: 993, column: 10, scope: !5720)
!5726 = !DILocation(line: 993, column: 9, scope: !5706)
!5727 = !DILocation(line: 994, column: 9, scope: !5720)
!5728 = !DILocation(line: 995, column: 16, scope: !5706)
!5729 = !DILocation(line: 995, column: 9, scope: !5706)
!5730 = !DILocation(line: 995, column: 7, scope: !5706)
!5731 = !DILocation(line: 996, column: 9, scope: !5732)
!5732 = distinct !DILexicalBlock(scope: !5706, file: !4, line: 996, column: 9)
!5733 = !DILocation(line: 996, column: 11, scope: !5732)
!5734 = !DILocation(line: 996, column: 9, scope: !5706)
!5735 = !DILocation(line: 997, column: 11, scope: !5732)
!5736 = !DILocation(line: 997, column: 14, scope: !5732)
!5737 = !DILocation(line: 997, column: 9, scope: !5732)
!5738 = !DILocation(line: 998, column: 32, scope: !5706)
!5739 = !DILocation(line: 998, column: 38, scope: !5706)
!5740 = !DILocation(line: 998, column: 46, scope: !5706)
!5741 = !DILocation(line: 998, column: 10, scope: !5706)
!5742 = !DILocation(line: 998, column: 8, scope: !5706)
!5743 = !DILocation(line: 999, column: 9, scope: !5744)
!5744 = distinct !DILexicalBlock(scope: !5706, file: !4, line: 999, column: 9)
!5745 = !DILocation(line: 999, column: 12, scope: !5744)
!5746 = !DILocation(line: 999, column: 9, scope: !5706)
!5747 = !DILocation(line: 1000, column: 9, scope: !5744)
!5748 = !DILocation(line: 1000, column: 12, scope: !5744)
!5749 = !DILocation(line: 1000, column: 16, scope: !5744)
!5750 = !DILocation(line: 1001, column: 14, scope: !5751)
!5751 = distinct !DILexicalBlock(scope: !5744, file: !4, line: 1001, column: 14)
!5752 = !DILocation(line: 1001, column: 17, scope: !5751)
!5753 = !DILocation(line: 1001, column: 14, scope: !5744)
!5754 = !DILocation(line: 1002, column: 9, scope: !5751)
!5755 = !DILocation(line: 1002, column: 12, scope: !5751)
!5756 = !DILocation(line: 1002, column: 16, scope: !5751)
!5757 = !DILocation(line: 1004, column: 12, scope: !5751)
!5758 = !DILocation(line: 1005, column: 17, scope: !5706)
!5759 = !DILocation(line: 1005, column: 5, scope: !5706)
!5760 = !DILocation(line: 1006, column: 12, scope: !5706)
!5761 = !DILocation(line: 1006, column: 15, scope: !5706)
!5762 = !DILocation(line: 1006, column: 5, scope: !5706)
!5763 = !DILocation(line: 1007, column: 1, scope: !5706)
!5764 = distinct !DISubprogram(name: "oneshot_digestsign_test_init", scope: !4, file: !4, line: 2552, type: !98, isLocal: true, isDefinition: true, scopeLine: 2553, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5765 = !DILocalVariable(name: "t", arg: 1, scope: !5764, file: !4, line: 2552, type: !100)
!5766 = !DILocation(line: 2552, column: 51, scope: !5764)
!5767 = !DILocalVariable(name: "alg", arg: 2, scope: !5764, file: !4, line: 2552, type: !67)
!5768 = !DILocation(line: 2552, column: 66, scope: !5764)
!5769 = !DILocation(line: 2554, column: 35, scope: !5764)
!5770 = !DILocation(line: 2554, column: 38, scope: !5764)
!5771 = !DILocation(line: 2554, column: 12, scope: !5764)
!5772 = !DILocation(line: 2554, column: 5, scope: !5764)
!5773 = distinct !DISubprogram(name: "oneshot_digestsign_test_run", scope: !4, file: !4, line: 2557, type: !154, isLocal: true, isDefinition: true, scopeLine: 2558, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5774 = !DILocalVariable(name: "t", arg: 1, scope: !5773, file: !4, line: 2557, type: !100)
!5775 = !DILocation(line: 2557, column: 50, scope: !5773)
!5776 = !DILocalVariable(name: "expected", scope: !5773, file: !4, line: 2559, type: !3007)
!5777 = !DILocation(line: 2559, column: 22, scope: !5773)
!5778 = !DILocation(line: 2559, column: 33, scope: !5773)
!5779 = !DILocation(line: 2559, column: 36, scope: !5773)
!5780 = !DILocalVariable(name: "got", scope: !5773, file: !4, line: 2560, type: !56)
!5781 = !DILocation(line: 2560, column: 20, scope: !5773)
!5782 = !DILocalVariable(name: "got_len", scope: !5773, file: !4, line: 2561, type: !33)
!5783 = !DILocation(line: 2561, column: 12, scope: !5773)
!5784 = !DILocation(line: 2563, column: 25, scope: !5785)
!5785 = distinct !DILexicalBlock(scope: !5773, file: !4, line: 2563, column: 9)
!5786 = !DILocation(line: 2563, column: 35, scope: !5785)
!5787 = !DILocation(line: 2564, column: 25, scope: !5785)
!5788 = !DILocation(line: 2564, column: 35, scope: !5785)
!5789 = !DILocation(line: 2564, column: 41, scope: !5785)
!5790 = !DILocation(line: 2564, column: 51, scope: !5785)
!5791 = !DILocation(line: 2563, column: 10, scope: !5785)
!5792 = !DILocation(line: 2563, column: 9, scope: !5773)
!5793 = !DILocation(line: 2565, column: 9, scope: !5794)
!5794 = distinct !DILexicalBlock(scope: !5785, file: !4, line: 2564, column: 62)
!5795 = !DILocation(line: 2565, column: 12, scope: !5794)
!5796 = !DILocation(line: 2565, column: 16, scope: !5794)
!5797 = !DILocation(line: 2566, column: 9, scope: !5794)
!5798 = !DILocation(line: 2568, column: 97, scope: !5799)
!5799 = distinct !DILexicalBlock(scope: !5773, file: !4, line: 2568, column: 9)
!5800 = !DILocation(line: 2568, column: 83, scope: !5799)
!5801 = !DILocation(line: 2568, column: 81, scope: !5799)
!5802 = !DILocation(line: 2568, column: 10, scope: !5803)
!5803 = !DILexicalBlockFile(scope: !5799, file: !4, discriminator: 1)
!5804 = !DILocation(line: 2568, column: 10, scope: !5799)
!5805 = !DILocation(line: 2568, column: 9, scope: !5773)
!5806 = !DILocation(line: 2569, column: 9, scope: !5807)
!5807 = distinct !DILexicalBlock(scope: !5799, file: !4, line: 2568, column: 133)
!5808 = !DILocation(line: 2569, column: 12, scope: !5807)
!5809 = !DILocation(line: 2569, column: 16, scope: !5807)
!5810 = !DILocation(line: 2570, column: 9, scope: !5807)
!5811 = !DILocation(line: 2572, column: 25, scope: !5812)
!5812 = distinct !DILexicalBlock(scope: !5773, file: !4, line: 2572, column: 9)
!5813 = !DILocation(line: 2572, column: 35, scope: !5812)
!5814 = !DILocation(line: 2572, column: 40, scope: !5812)
!5815 = !DILocation(line: 2573, column: 25, scope: !5812)
!5816 = !DILocation(line: 2573, column: 35, scope: !5812)
!5817 = !DILocation(line: 2573, column: 41, scope: !5812)
!5818 = !DILocation(line: 2573, column: 51, scope: !5812)
!5819 = !DILocation(line: 2572, column: 10, scope: !5812)
!5820 = !DILocation(line: 2572, column: 9, scope: !5773)
!5821 = !DILocation(line: 2574, column: 9, scope: !5822)
!5822 = distinct !DILexicalBlock(scope: !5812, file: !4, line: 2573, column: 62)
!5823 = !DILocation(line: 2574, column: 12, scope: !5822)
!5824 = !DILocation(line: 2574, column: 16, scope: !5822)
!5825 = !DILocation(line: 2575, column: 9, scope: !5822)
!5826 = !DILocation(line: 2577, column: 29, scope: !5827)
!5827 = distinct !DILexicalBlock(scope: !5773, file: !4, line: 2577, column: 9)
!5828 = !DILocation(line: 2578, column: 29, scope: !5827)
!5829 = !DILocation(line: 2578, column: 39, scope: !5827)
!5830 = !DILocation(line: 2578, column: 47, scope: !5827)
!5831 = !DILocation(line: 2578, column: 57, scope: !5827)
!5832 = !DILocation(line: 2579, column: 29, scope: !5827)
!5833 = !DILocation(line: 2579, column: 34, scope: !5827)
!5834 = !DILocation(line: 2577, column: 10, scope: !5827)
!5835 = !DILocation(line: 2577, column: 9, scope: !5773)
!5836 = !DILocation(line: 2580, column: 9, scope: !5827)
!5837 = !DILocation(line: 2582, column: 5, scope: !5773)
!5838 = !DILocation(line: 2582, column: 8, scope: !5773)
!5839 = !DILocation(line: 2582, column: 12, scope: !5773)
!5840 = !DILocation(line: 2584, column: 17, scope: !5773)
!5841 = !DILocation(line: 2584, column: 5, scope: !5773)
!5842 = !DILocation(line: 2585, column: 5, scope: !5773)
!5843 = distinct !DISubprogram(name: "oneshot_digestverify_test_init", scope: !4, file: !4, line: 2596, type: !98, isLocal: true, isDefinition: true, scopeLine: 2597, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5844 = !DILocalVariable(name: "t", arg: 1, scope: !5843, file: !4, line: 2596, type: !100)
!5845 = !DILocation(line: 2596, column: 53, scope: !5843)
!5846 = !DILocalVariable(name: "alg", arg: 2, scope: !5843, file: !4, line: 2596, type: !67)
!5847 = !DILocation(line: 2596, column: 68, scope: !5843)
!5848 = !DILocation(line: 2598, column: 35, scope: !5843)
!5849 = !DILocation(line: 2598, column: 38, scope: !5843)
!5850 = !DILocation(line: 2598, column: 12, scope: !5843)
!5851 = !DILocation(line: 2598, column: 5, scope: !5843)
!5852 = distinct !DISubprogram(name: "oneshot_digestverify_test_run", scope: !4, file: !4, line: 2601, type: !154, isLocal: true, isDefinition: true, scopeLine: 2602, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5853 = !DILocalVariable(name: "t", arg: 1, scope: !5852, file: !4, line: 2601, type: !100)
!5854 = !DILocation(line: 2601, column: 52, scope: !5852)
!5855 = !DILocalVariable(name: "mdata", scope: !5852, file: !4, line: 2603, type: !3007)
!5856 = !DILocation(line: 2603, column: 22, scope: !5852)
!5857 = !DILocation(line: 2603, column: 30, scope: !5852)
!5858 = !DILocation(line: 2603, column: 33, scope: !5852)
!5859 = !DILocation(line: 2605, column: 26, scope: !5860)
!5860 = distinct !DILexicalBlock(scope: !5852, file: !4, line: 2605, column: 9)
!5861 = !DILocation(line: 2605, column: 33, scope: !5860)
!5862 = !DILocation(line: 2605, column: 38, scope: !5860)
!5863 = !DILocation(line: 2605, column: 45, scope: !5860)
!5864 = !DILocation(line: 2605, column: 53, scope: !5860)
!5865 = !DILocation(line: 2605, column: 60, scope: !5860)
!5866 = !DILocation(line: 2606, column: 26, scope: !5860)
!5867 = !DILocation(line: 2606, column: 33, scope: !5860)
!5868 = !DILocation(line: 2606, column: 39, scope: !5860)
!5869 = !DILocation(line: 2606, column: 46, scope: !5860)
!5870 = !DILocation(line: 2605, column: 9, scope: !5860)
!5871 = !DILocation(line: 2606, column: 56, scope: !5860)
!5872 = !DILocation(line: 2605, column: 9, scope: !5852)
!5873 = !DILocation(line: 2607, column: 9, scope: !5860)
!5874 = !DILocation(line: 2607, column: 12, scope: !5860)
!5875 = !DILocation(line: 2607, column: 16, scope: !5860)
!5876 = !DILocation(line: 2608, column: 5, scope: !5852)
!5877 = distinct !DISubprogram(name: "pbe_test_init", scope: !4, file: !4, line: 1638, type: !98, isLocal: true, isDefinition: true, scopeLine: 1639, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5878 = !DILocalVariable(name: "t", arg: 1, scope: !5877, file: !4, line: 1638, type: !100)
!5879 = !DILocation(line: 1638, column: 36, scope: !5877)
!5880 = !DILocalVariable(name: "alg", arg: 2, scope: !5877, file: !4, line: 1638, type: !67)
!5881 = !DILocation(line: 1638, column: 51, scope: !5877)
!5882 = !DILocalVariable(name: "pdat", scope: !5877, file: !4, line: 1640, type: !5883)
!5883 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5884, size: 64, align: 64)
!5884 = !DIDerivedType(tag: DW_TAG_typedef, name: "PBE_DATA", file: !4, line: 1557, baseType: !5885)
!5885 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pbe_data_st", file: !4, line: 1541, size: 832, align: 64, elements: !5886)
!5886 = !{!5887, !5889, !5892, !5893, !5894, !5895, !5896, !5897, !5898, !5899, !5900, !5901, !5902, !5903}
!5887 = !DIDerivedType(tag: DW_TAG_member, name: "pbe_type", scope: !5885, file: !4, line: 1542, baseType: !5888, size: 32, align: 32)
!5888 = !DIDerivedType(tag: DW_TAG_typedef, name: "PBE_TYPE", file: !4, line: 1539, baseType: !9)
!5889 = !DIDerivedType(tag: DW_TAG_member, name: "N", scope: !5885, file: !4, line: 1544, baseType: !5890, size: 64, align: 64, offset: 64)
!5890 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !5891, line: 55, baseType: !35)
!5891 = !DIFile(filename: "/usr/include/stdint.h", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs")
!5892 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !5885, file: !4, line: 1544, baseType: !5890, size: 64, align: 64, offset: 128)
!5893 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !5885, file: !4, line: 1544, baseType: !5890, size: 64, align: 64, offset: 192)
!5894 = !DIDerivedType(tag: DW_TAG_member, name: "maxmem", scope: !5885, file: !4, line: 1544, baseType: !5890, size: 64, align: 64, offset: 256)
!5895 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !5885, file: !4, line: 1546, baseType: !31, size: 32, align: 32, offset: 320)
!5896 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !5885, file: !4, line: 1546, baseType: !31, size: 32, align: 32, offset: 352)
!5897 = !DIDerivedType(tag: DW_TAG_member, name: "md", scope: !5885, file: !4, line: 1547, baseType: !2380, size: 64, align: 64, offset: 384)
!5898 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !5885, file: !4, line: 1549, baseType: !56, size: 64, align: 64, offset: 448)
!5899 = !DIDerivedType(tag: DW_TAG_member, name: "pass_len", scope: !5885, file: !4, line: 1550, baseType: !33, size: 64, align: 64, offset: 512)
!5900 = !DIDerivedType(tag: DW_TAG_member, name: "salt", scope: !5885, file: !4, line: 1552, baseType: !56, size: 64, align: 64, offset: 576)
!5901 = !DIDerivedType(tag: DW_TAG_member, name: "salt_len", scope: !5885, file: !4, line: 1553, baseType: !33, size: 64, align: 64, offset: 640)
!5902 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !5885, file: !4, line: 1555, baseType: !56, size: 64, align: 64, offset: 704)
!5903 = !DIDerivedType(tag: DW_TAG_member, name: "key_len", scope: !5885, file: !4, line: 1556, baseType: !33, size: 64, align: 64, offset: 768)
!5904 = !DILocation(line: 1640, column: 15, scope: !5877)
!5905 = !DILocalVariable(name: "pbe_type", scope: !5877, file: !4, line: 1641, type: !5888)
!5906 = !DILocation(line: 1641, column: 14, scope: !5877)
!5907 = !DILocation(line: 1643, column: 16, scope: !5908)
!5908 = distinct !DILexicalBlock(scope: !5877, file: !4, line: 1643, column: 9)
!5909 = !DILocation(line: 1643, column: 9, scope: !5908)
!5910 = !DILocation(line: 1643, column: 31, scope: !5908)
!5911 = !DILocation(line: 1643, column: 9, scope: !5877)
!5912 = !DILocation(line: 1645, column: 18, scope: !5913)
!5913 = distinct !DILexicalBlock(scope: !5908, file: !4, line: 1643, column: 37)
!5914 = !DILocation(line: 1650, column: 5, scope: !5913)
!5915 = !DILocation(line: 1650, column: 23, scope: !5916)
!5916 = !DILexicalBlockFile(scope: !5917, file: !4, discriminator: 1)
!5917 = distinct !DILexicalBlock(scope: !5908, file: !4, line: 1650, column: 16)
!5918 = !DILocation(line: 1650, column: 16, scope: !5916)
!5919 = !DILocation(line: 1650, column: 38, scope: !5916)
!5920 = !DILocation(line: 1651, column: 18, scope: !5921)
!5921 = distinct !DILexicalBlock(scope: !5917, file: !4, line: 1650, column: 44)
!5922 = !DILocation(line: 1652, column: 5, scope: !5921)
!5923 = !DILocation(line: 1652, column: 23, scope: !5924)
!5924 = !DILexicalBlockFile(scope: !5925, file: !4, discriminator: 1)
!5925 = distinct !DILexicalBlock(scope: !5917, file: !4, line: 1652, column: 16)
!5926 = !DILocation(line: 1652, column: 16, scope: !5924)
!5927 = !DILocation(line: 1652, column: 38, scope: !5924)
!5928 = !DILocation(line: 1653, column: 18, scope: !5929)
!5929 = distinct !DILexicalBlock(scope: !5925, file: !4, line: 1652, column: 44)
!5930 = !DILocation(line: 1654, column: 5, scope: !5929)
!5931 = !DILocation(line: 1655, column: 73, scope: !5932)
!5932 = distinct !DILexicalBlock(scope: !5925, file: !4, line: 1654, column: 12)
!5933 = !DILocation(line: 1655, column: 9, scope: !5932)
!5934 = !DILocation(line: 1657, column: 12, scope: !5877)
!5935 = !DILocation(line: 1657, column: 10, scope: !5877)
!5936 = !DILocation(line: 1658, column: 22, scope: !5877)
!5937 = !DILocation(line: 1658, column: 5, scope: !5877)
!5938 = !DILocation(line: 1658, column: 11, scope: !5877)
!5939 = !DILocation(line: 1658, column: 20, scope: !5877)
!5940 = !DILocation(line: 1659, column: 15, scope: !5877)
!5941 = !DILocation(line: 1659, column: 5, scope: !5877)
!5942 = !DILocation(line: 1659, column: 8, scope: !5877)
!5943 = !DILocation(line: 1659, column: 13, scope: !5877)
!5944 = !DILocation(line: 1660, column: 5, scope: !5877)
!5945 = distinct !DISubprogram(name: "pbe_test_cleanup", scope: !4, file: !4, line: 1663, type: !146, isLocal: true, isDefinition: true, scopeLine: 1664, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5946 = !DILocalVariable(name: "t", arg: 1, scope: !5945, file: !4, line: 1663, type: !100)
!5947 = !DILocation(line: 1663, column: 40, scope: !5945)
!5948 = !DILocalVariable(name: "pdat", scope: !5945, file: !4, line: 1665, type: !5883)
!5949 = !DILocation(line: 1665, column: 15, scope: !5945)
!5950 = !DILocation(line: 1665, column: 22, scope: !5945)
!5951 = !DILocation(line: 1665, column: 25, scope: !5945)
!5952 = !DILocation(line: 1667, column: 17, scope: !5945)
!5953 = !DILocation(line: 1667, column: 23, scope: !5945)
!5954 = !DILocation(line: 1667, column: 5, scope: !5945)
!5955 = !DILocation(line: 1668, column: 17, scope: !5945)
!5956 = !DILocation(line: 1668, column: 23, scope: !5945)
!5957 = !DILocation(line: 1668, column: 5, scope: !5945)
!5958 = !DILocation(line: 1669, column: 17, scope: !5945)
!5959 = !DILocation(line: 1669, column: 23, scope: !5945)
!5960 = !DILocation(line: 1669, column: 5, scope: !5945)
!5961 = !DILocation(line: 1670, column: 1, scope: !5945)
!5962 = distinct !DISubprogram(name: "pbe_test_parse", scope: !4, file: !4, line: 1672, type: !150, isLocal: true, isDefinition: true, scopeLine: 1674, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!5963 = !DILocalVariable(name: "t", arg: 1, scope: !5962, file: !4, line: 1672, type: !100)
!5964 = !DILocation(line: 1672, column: 37, scope: !5962)
!5965 = !DILocalVariable(name: "keyword", arg: 2, scope: !5962, file: !4, line: 1673, type: !67)
!5966 = !DILocation(line: 1673, column: 39, scope: !5962)
!5967 = !DILocalVariable(name: "value", arg: 3, scope: !5962, file: !4, line: 1673, type: !67)
!5968 = !DILocation(line: 1673, column: 60, scope: !5962)
!5969 = !DILocalVariable(name: "pdata", scope: !5962, file: !4, line: 1675, type: !5883)
!5970 = !DILocation(line: 1675, column: 15, scope: !5962)
!5971 = !DILocation(line: 1675, column: 23, scope: !5962)
!5972 = !DILocation(line: 1675, column: 26, scope: !5962)
!5973 = !DILocation(line: 1677, column: 16, scope: !5974)
!5974 = distinct !DILexicalBlock(scope: !5962, file: !4, line: 1677, column: 9)
!5975 = !DILocation(line: 1677, column: 9, scope: !5974)
!5976 = !DILocation(line: 1677, column: 37, scope: !5974)
!5977 = !DILocation(line: 1677, column: 9, scope: !5962)
!5978 = !DILocation(line: 1678, column: 26, scope: !5974)
!5979 = !DILocation(line: 1678, column: 34, scope: !5974)
!5980 = !DILocation(line: 1678, column: 41, scope: !5974)
!5981 = !DILocation(line: 1678, column: 48, scope: !5974)
!5982 = !DILocation(line: 1678, column: 55, scope: !5974)
!5983 = !DILocation(line: 1678, column: 16, scope: !5974)
!5984 = !DILocation(line: 1678, column: 9, scope: !5974)
!5985 = !DILocation(line: 1679, column: 16, scope: !5986)
!5986 = distinct !DILexicalBlock(scope: !5962, file: !4, line: 1679, column: 9)
!5987 = !DILocation(line: 1679, column: 9, scope: !5986)
!5988 = !DILocation(line: 1679, column: 33, scope: !5986)
!5989 = !DILocation(line: 1679, column: 9, scope: !5962)
!5990 = !DILocation(line: 1680, column: 26, scope: !5986)
!5991 = !DILocation(line: 1680, column: 34, scope: !5986)
!5992 = !DILocation(line: 1680, column: 41, scope: !5986)
!5993 = !DILocation(line: 1680, column: 48, scope: !5986)
!5994 = !DILocation(line: 1680, column: 55, scope: !5986)
!5995 = !DILocation(line: 1680, column: 16, scope: !5986)
!5996 = !DILocation(line: 1680, column: 9, scope: !5986)
!5997 = !DILocation(line: 1681, column: 16, scope: !5998)
!5998 = distinct !DILexicalBlock(scope: !5962, file: !4, line: 1681, column: 9)
!5999 = !DILocation(line: 1681, column: 9, scope: !5998)
!6000 = !DILocation(line: 1681, column: 32, scope: !5998)
!6001 = !DILocation(line: 1681, column: 9, scope: !5962)
!6002 = !DILocation(line: 1682, column: 26, scope: !5998)
!6003 = !DILocation(line: 1682, column: 34, scope: !5998)
!6004 = !DILocation(line: 1682, column: 41, scope: !5998)
!6005 = !DILocation(line: 1682, column: 47, scope: !5998)
!6006 = !DILocation(line: 1682, column: 54, scope: !5998)
!6007 = !DILocation(line: 1682, column: 16, scope: !5998)
!6008 = !DILocation(line: 1682, column: 9, scope: !5998)
!6009 = !DILocation(line: 1683, column: 9, scope: !6010)
!6010 = distinct !DILexicalBlock(scope: !5962, file: !4, line: 1683, column: 9)
!6011 = !DILocation(line: 1683, column: 16, scope: !6010)
!6012 = !DILocation(line: 1683, column: 25, scope: !6010)
!6013 = !DILocation(line: 1683, column: 9, scope: !5962)
!6014 = !DILocation(line: 1684, column: 34, scope: !6010)
!6015 = !DILocation(line: 1684, column: 37, scope: !6010)
!6016 = !DILocation(line: 1684, column: 46, scope: !6010)
!6017 = !DILocation(line: 1684, column: 16, scope: !6010)
!6018 = !DILocation(line: 1684, column: 9, scope: !6010)
!6019 = !DILocation(line: 1685, column: 14, scope: !6020)
!6020 = distinct !DILexicalBlock(scope: !6010, file: !4, line: 1685, column: 14)
!6021 = !DILocation(line: 1685, column: 21, scope: !6020)
!6022 = !DILocation(line: 1685, column: 30, scope: !6020)
!6023 = !DILocation(line: 1685, column: 14, scope: !6010)
!6024 = !DILocation(line: 1686, column: 34, scope: !6020)
!6025 = !DILocation(line: 1686, column: 37, scope: !6020)
!6026 = !DILocation(line: 1686, column: 46, scope: !6020)
!6027 = !DILocation(line: 1686, column: 16, scope: !6020)
!6028 = !DILocation(line: 1686, column: 9, scope: !6020)
!6029 = !DILocation(line: 1688, column: 14, scope: !6030)
!6030 = distinct !DILexicalBlock(scope: !6020, file: !4, line: 1688, column: 14)
!6031 = !DILocation(line: 1688, column: 21, scope: !6030)
!6032 = !DILocation(line: 1688, column: 30, scope: !6030)
!6033 = !DILocation(line: 1688, column: 14, scope: !6020)
!6034 = !DILocation(line: 1689, column: 34, scope: !6030)
!6035 = !DILocation(line: 1689, column: 37, scope: !6030)
!6036 = !DILocation(line: 1689, column: 46, scope: !6030)
!6037 = !DILocation(line: 1689, column: 16, scope: !6030)
!6038 = !DILocation(line: 1689, column: 9, scope: !6030)
!6039 = !DILocation(line: 1691, column: 5, scope: !5962)
!6040 = !DILocation(line: 1692, column: 1, scope: !5962)
!6041 = distinct !DISubprogram(name: "pbe_test_run", scope: !4, file: !4, line: 1694, type: !154, isLocal: true, isDefinition: true, scopeLine: 1695, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6042 = !DILocalVariable(name: "t", arg: 1, scope: !6041, file: !4, line: 1694, type: !100)
!6043 = !DILocation(line: 1694, column: 35, scope: !6041)
!6044 = !DILocalVariable(name: "expected", scope: !6041, file: !4, line: 1696, type: !5883)
!6045 = !DILocation(line: 1696, column: 15, scope: !6041)
!6046 = !DILocation(line: 1696, column: 26, scope: !6041)
!6047 = !DILocation(line: 1696, column: 29, scope: !6041)
!6048 = !DILocalVariable(name: "key", scope: !6041, file: !4, line: 1697, type: !56)
!6049 = !DILocation(line: 1697, column: 20, scope: !6041)
!6050 = !DILocation(line: 1699, column: 107, scope: !6051)
!6051 = distinct !DILexicalBlock(scope: !6041, file: !4, line: 1699, column: 9)
!6052 = !DILocation(line: 1699, column: 117, scope: !6051)
!6053 = !DILocation(line: 1699, column: 93, scope: !6051)
!6054 = !DILocation(line: 1699, column: 91, scope: !6051)
!6055 = !DILocation(line: 1699, column: 10, scope: !6056)
!6056 = !DILexicalBlockFile(scope: !6051, file: !4, discriminator: 1)
!6057 = !DILocation(line: 1699, column: 10, scope: !6051)
!6058 = !DILocation(line: 1699, column: 9, scope: !6041)
!6059 = !DILocation(line: 1700, column: 9, scope: !6060)
!6060 = distinct !DILexicalBlock(scope: !6051, file: !4, line: 1699, column: 153)
!6061 = !DILocation(line: 1700, column: 12, scope: !6060)
!6062 = !DILocation(line: 1700, column: 16, scope: !6060)
!6063 = !DILocation(line: 1701, column: 9, scope: !6060)
!6064 = !DILocation(line: 1703, column: 9, scope: !6065)
!6065 = distinct !DILexicalBlock(scope: !6041, file: !4, line: 1703, column: 9)
!6066 = !DILocation(line: 1703, column: 19, scope: !6065)
!6067 = !DILocation(line: 1703, column: 28, scope: !6065)
!6068 = !DILocation(line: 1703, column: 9, scope: !6041)
!6069 = !DILocation(line: 1704, column: 39, scope: !6070)
!6070 = distinct !DILexicalBlock(scope: !6071, file: !4, line: 1704, column: 13)
!6071 = distinct !DILexicalBlock(scope: !6065, file: !4, line: 1703, column: 48)
!6072 = !DILocation(line: 1704, column: 49, scope: !6070)
!6073 = !DILocation(line: 1704, column: 55, scope: !6070)
!6074 = !DILocation(line: 1704, column: 65, scope: !6070)
!6075 = !DILocation(line: 1705, column: 31, scope: !6070)
!6076 = !DILocation(line: 1705, column: 41, scope: !6070)
!6077 = !DILocation(line: 1705, column: 47, scope: !6070)
!6078 = !DILocation(line: 1705, column: 57, scope: !6070)
!6079 = !DILocation(line: 1706, column: 31, scope: !6070)
!6080 = !DILocation(line: 1706, column: 41, scope: !6070)
!6081 = !DILocation(line: 1706, column: 47, scope: !6070)
!6082 = !DILocation(line: 1706, column: 57, scope: !6070)
!6083 = !DILocation(line: 1707, column: 31, scope: !6070)
!6084 = !DILocation(line: 1707, column: 41, scope: !6070)
!6085 = !DILocation(line: 1707, column: 50, scope: !6070)
!6086 = !DILocation(line: 1704, column: 13, scope: !6070)
!6087 = !DILocation(line: 1707, column: 55, scope: !6070)
!6088 = !DILocation(line: 1704, column: 13, scope: !6071)
!6089 = !DILocation(line: 1708, column: 13, scope: !6090)
!6090 = distinct !DILexicalBlock(scope: !6070, file: !4, line: 1707, column: 61)
!6091 = !DILocation(line: 1708, column: 16, scope: !6090)
!6092 = !DILocation(line: 1708, column: 20, scope: !6090)
!6093 = !DILocation(line: 1709, column: 13, scope: !6090)
!6094 = !DILocation(line: 1712, column: 5, scope: !6071)
!6095 = !DILocation(line: 1712, column: 16, scope: !6096)
!6096 = !DILexicalBlockFile(scope: !6097, file: !4, discriminator: 1)
!6097 = distinct !DILexicalBlock(scope: !6065, file: !4, line: 1712, column: 16)
!6098 = !DILocation(line: 1712, column: 26, scope: !6096)
!6099 = !DILocation(line: 1712, column: 35, scope: !6096)
!6100 = !DILocation(line: 1713, column: 42, scope: !6101)
!6101 = distinct !DILexicalBlock(scope: !6102, file: !4, line: 1713, column: 13)
!6102 = distinct !DILexicalBlock(scope: !6097, file: !4, line: 1712, column: 55)
!6103 = !DILocation(line: 1713, column: 52, scope: !6101)
!6104 = !DILocation(line: 1713, column: 58, scope: !6101)
!6105 = !DILocation(line: 1713, column: 68, scope: !6101)
!6106 = !DILocation(line: 1714, column: 28, scope: !6101)
!6107 = !DILocation(line: 1714, column: 38, scope: !6101)
!6108 = !DILocation(line: 1714, column: 44, scope: !6101)
!6109 = !DILocation(line: 1714, column: 54, scope: !6101)
!6110 = !DILocation(line: 1714, column: 64, scope: !6101)
!6111 = !DILocation(line: 1714, column: 74, scope: !6101)
!6112 = !DILocation(line: 1715, column: 28, scope: !6101)
!6113 = !DILocation(line: 1715, column: 38, scope: !6101)
!6114 = !DILocation(line: 1715, column: 41, scope: !6101)
!6115 = !DILocation(line: 1715, column: 51, scope: !6101)
!6116 = !DILocation(line: 1715, column: 54, scope: !6101)
!6117 = !DILocation(line: 1715, column: 64, scope: !6101)
!6118 = !DILocation(line: 1716, column: 28, scope: !6101)
!6119 = !DILocation(line: 1716, column: 33, scope: !6101)
!6120 = !DILocation(line: 1716, column: 43, scope: !6101)
!6121 = !DILocation(line: 1713, column: 13, scope: !6101)
!6122 = !DILocation(line: 1716, column: 52, scope: !6101)
!6123 = !DILocation(line: 1713, column: 13, scope: !6102)
!6124 = !DILocation(line: 1717, column: 13, scope: !6125)
!6125 = distinct !DILexicalBlock(scope: !6101, file: !4, line: 1716, column: 58)
!6126 = !DILocation(line: 1717, column: 16, scope: !6125)
!6127 = !DILocation(line: 1717, column: 20, scope: !6125)
!6128 = !DILocation(line: 1718, column: 13, scope: !6125)
!6129 = !DILocation(line: 1721, column: 5, scope: !6102)
!6130 = !DILocation(line: 1721, column: 16, scope: !6131)
!6131 = !DILexicalBlockFile(scope: !6132, file: !4, discriminator: 1)
!6132 = distinct !DILexicalBlock(scope: !6097, file: !4, line: 1721, column: 16)
!6133 = !DILocation(line: 1721, column: 26, scope: !6131)
!6134 = !DILocation(line: 1721, column: 35, scope: !6131)
!6135 = !DILocation(line: 1722, column: 32, scope: !6136)
!6136 = distinct !DILexicalBlock(scope: !6137, file: !4, line: 1722, column: 13)
!6137 = distinct !DILexicalBlock(scope: !6132, file: !4, line: 1721, column: 55)
!6138 = !DILocation(line: 1722, column: 42, scope: !6136)
!6139 = !DILocation(line: 1722, column: 48, scope: !6136)
!6140 = !DILocation(line: 1722, column: 58, scope: !6136)
!6141 = !DILocation(line: 1723, column: 32, scope: !6136)
!6142 = !DILocation(line: 1723, column: 42, scope: !6136)
!6143 = !DILocation(line: 1723, column: 48, scope: !6136)
!6144 = !DILocation(line: 1723, column: 58, scope: !6136)
!6145 = !DILocation(line: 1724, column: 32, scope: !6136)
!6146 = !DILocation(line: 1724, column: 42, scope: !6136)
!6147 = !DILocation(line: 1724, column: 46, scope: !6136)
!6148 = !DILocation(line: 1724, column: 56, scope: !6136)
!6149 = !DILocation(line: 1724, column: 62, scope: !6136)
!6150 = !DILocation(line: 1724, column: 72, scope: !6136)
!6151 = !DILocation(line: 1725, column: 32, scope: !6136)
!6152 = !DILocation(line: 1725, column: 37, scope: !6136)
!6153 = !DILocation(line: 1725, column: 47, scope: !6136)
!6154 = !DILocation(line: 1722, column: 13, scope: !6136)
!6155 = !DILocation(line: 1725, column: 51, scope: !6136)
!6156 = !DILocation(line: 1722, column: 13, scope: !6137)
!6157 = !DILocation(line: 1726, column: 13, scope: !6158)
!6158 = distinct !DILexicalBlock(scope: !6136, file: !4, line: 1725, column: 57)
!6159 = !DILocation(line: 1726, column: 16, scope: !6158)
!6160 = !DILocation(line: 1726, column: 20, scope: !6158)
!6161 = !DILocation(line: 1727, column: 13, scope: !6158)
!6162 = !DILocation(line: 1729, column: 5, scope: !6137)
!6163 = !DILocation(line: 1730, column: 29, scope: !6164)
!6164 = distinct !DILexicalBlock(scope: !6041, file: !4, line: 1730, column: 9)
!6165 = !DILocation(line: 1730, column: 48, scope: !6164)
!6166 = !DILocation(line: 1730, column: 58, scope: !6164)
!6167 = !DILocation(line: 1730, column: 63, scope: !6164)
!6168 = !DILocation(line: 1730, column: 73, scope: !6164)
!6169 = !DILocation(line: 1731, column: 29, scope: !6164)
!6170 = !DILocation(line: 1731, column: 34, scope: !6164)
!6171 = !DILocation(line: 1731, column: 44, scope: !6164)
!6172 = !DILocation(line: 1730, column: 10, scope: !6164)
!6173 = !DILocation(line: 1730, column: 9, scope: !6041)
!6174 = !DILocation(line: 1732, column: 9, scope: !6164)
!6175 = !DILocation(line: 1734, column: 5, scope: !6041)
!6176 = !DILocation(line: 1734, column: 8, scope: !6041)
!6177 = !DILocation(line: 1734, column: 12, scope: !6041)
!6178 = !DILocation(line: 1736, column: 17, scope: !6041)
!6179 = !DILocation(line: 1736, column: 5, scope: !6041)
!6180 = !DILocation(line: 1737, column: 5, scope: !6041)
!6181 = distinct !DISubprogram(name: "pbkdf2_test_parse", scope: !4, file: !4, line: 1604, type: !150, isLocal: true, isDefinition: true, scopeLine: 1606, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6182 = !DILocalVariable(name: "t", arg: 1, scope: !6181, file: !4, line: 1604, type: !100)
!6183 = !DILocation(line: 1604, column: 40, scope: !6181)
!6184 = !DILocalVariable(name: "keyword", arg: 2, scope: !6181, file: !4, line: 1605, type: !67)
!6185 = !DILocation(line: 1605, column: 42, scope: !6181)
!6186 = !DILocalVariable(name: "value", arg: 3, scope: !6181, file: !4, line: 1605, type: !67)
!6187 = !DILocation(line: 1605, column: 63, scope: !6181)
!6188 = !DILocalVariable(name: "pdata", scope: !6181, file: !4, line: 1607, type: !5883)
!6189 = !DILocation(line: 1607, column: 15, scope: !6181)
!6190 = !DILocation(line: 1607, column: 23, scope: !6181)
!6191 = !DILocation(line: 1607, column: 26, scope: !6181)
!6192 = !DILocation(line: 1609, column: 16, scope: !6193)
!6193 = distinct !DILexicalBlock(scope: !6181, file: !4, line: 1609, column: 9)
!6194 = !DILocation(line: 1609, column: 9, scope: !6193)
!6195 = !DILocation(line: 1609, column: 33, scope: !6193)
!6196 = !DILocation(line: 1609, column: 9, scope: !6181)
!6197 = !DILocation(line: 1610, column: 28, scope: !6198)
!6198 = distinct !DILexicalBlock(scope: !6193, file: !4, line: 1609, column: 39)
!6199 = !DILocation(line: 1610, column: 23, scope: !6198)
!6200 = !DILocation(line: 1610, column: 9, scope: !6198)
!6201 = !DILocation(line: 1610, column: 16, scope: !6198)
!6202 = !DILocation(line: 1610, column: 21, scope: !6198)
!6203 = !DILocation(line: 1611, column: 13, scope: !6204)
!6204 = distinct !DILexicalBlock(scope: !6198, file: !4, line: 1611, column: 13)
!6205 = !DILocation(line: 1611, column: 20, scope: !6204)
!6206 = !DILocation(line: 1611, column: 25, scope: !6204)
!6207 = !DILocation(line: 1611, column: 13, scope: !6198)
!6208 = !DILocation(line: 1612, column: 13, scope: !6204)
!6209 = !DILocation(line: 1613, column: 9, scope: !6198)
!6210 = !DILocation(line: 1615, column: 16, scope: !6211)
!6211 = distinct !DILexicalBlock(scope: !6181, file: !4, line: 1615, column: 9)
!6212 = !DILocation(line: 1615, column: 9, scope: !6211)
!6213 = !DILocation(line: 1615, column: 31, scope: !6211)
!6214 = !DILocation(line: 1615, column: 9, scope: !6181)
!6215 = !DILocation(line: 1616, column: 42, scope: !6216)
!6216 = distinct !DILexicalBlock(scope: !6211, file: !4, line: 1615, column: 37)
!6217 = !DILocation(line: 1616, column: 21, scope: !6216)
!6218 = !DILocation(line: 1616, column: 9, scope: !6216)
!6219 = !DILocation(line: 1616, column: 16, scope: !6216)
!6220 = !DILocation(line: 1616, column: 19, scope: !6216)
!6221 = !DILocation(line: 1617, column: 13, scope: !6222)
!6222 = distinct !DILexicalBlock(scope: !6216, file: !4, line: 1617, column: 13)
!6223 = !DILocation(line: 1617, column: 20, scope: !6222)
!6224 = !DILocation(line: 1617, column: 23, scope: !6222)
!6225 = !DILocation(line: 1617, column: 13, scope: !6216)
!6226 = !DILocation(line: 1618, column: 13, scope: !6222)
!6227 = !DILocation(line: 1619, column: 9, scope: !6216)
!6228 = !DILocation(line: 1621, column: 5, scope: !6181)
!6229 = !DILocation(line: 1622, column: 1, scope: !6181)
!6230 = distinct !DISubprogram(name: "pkcs12_test_parse", scope: !4, file: !4, line: 1624, type: !150, isLocal: true, isDefinition: true, scopeLine: 1626, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6231 = !DILocalVariable(name: "t", arg: 1, scope: !6230, file: !4, line: 1624, type: !100)
!6232 = !DILocation(line: 1624, column: 40, scope: !6230)
!6233 = !DILocalVariable(name: "keyword", arg: 2, scope: !6230, file: !4, line: 1625, type: !67)
!6234 = !DILocation(line: 1625, column: 42, scope: !6230)
!6235 = !DILocalVariable(name: "value", arg: 3, scope: !6230, file: !4, line: 1625, type: !67)
!6236 = !DILocation(line: 1625, column: 63, scope: !6230)
!6237 = !DILocalVariable(name: "pdata", scope: !6230, file: !4, line: 1627, type: !5883)
!6238 = !DILocation(line: 1627, column: 15, scope: !6230)
!6239 = !DILocation(line: 1627, column: 23, scope: !6230)
!6240 = !DILocation(line: 1627, column: 26, scope: !6230)
!6241 = !DILocation(line: 1629, column: 16, scope: !6242)
!6242 = distinct !DILexicalBlock(scope: !6230, file: !4, line: 1629, column: 9)
!6243 = !DILocation(line: 1629, column: 9, scope: !6242)
!6244 = !DILocation(line: 1629, column: 31, scope: !6242)
!6245 = !DILocation(line: 1629, column: 9, scope: !6230)
!6246 = !DILocation(line: 1630, column: 26, scope: !6247)
!6247 = distinct !DILexicalBlock(scope: !6242, file: !4, line: 1629, column: 37)
!6248 = !DILocation(line: 1630, column: 21, scope: !6247)
!6249 = !DILocation(line: 1630, column: 9, scope: !6247)
!6250 = !DILocation(line: 1630, column: 16, scope: !6247)
!6251 = !DILocation(line: 1630, column: 19, scope: !6247)
!6252 = !DILocation(line: 1631, column: 13, scope: !6253)
!6253 = distinct !DILexicalBlock(scope: !6247, file: !4, line: 1631, column: 13)
!6254 = !DILocation(line: 1631, column: 20, scope: !6253)
!6255 = !DILocation(line: 1631, column: 23, scope: !6253)
!6256 = !DILocation(line: 1631, column: 13, scope: !6247)
!6257 = !DILocation(line: 1632, column: 13, scope: !6253)
!6258 = !DILocation(line: 1633, column: 9, scope: !6247)
!6259 = !DILocation(line: 1635, column: 30, scope: !6230)
!6260 = !DILocation(line: 1635, column: 33, scope: !6230)
!6261 = !DILocation(line: 1635, column: 42, scope: !6230)
!6262 = !DILocation(line: 1635, column: 12, scope: !6230)
!6263 = !DILocation(line: 1635, column: 5, scope: !6230)
!6264 = !DILocation(line: 1636, column: 1, scope: !6230)
!6265 = distinct !DISubprogram(name: "scrypt_test_parse", scope: !4, file: !4, line: 1587, type: !150, isLocal: true, isDefinition: true, scopeLine: 1589, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6266 = !DILocalVariable(name: "t", arg: 1, scope: !6265, file: !4, line: 1587, type: !100)
!6267 = !DILocation(line: 1587, column: 40, scope: !6265)
!6268 = !DILocalVariable(name: "keyword", arg: 2, scope: !6265, file: !4, line: 1588, type: !67)
!6269 = !DILocation(line: 1588, column: 42, scope: !6265)
!6270 = !DILocalVariable(name: "value", arg: 3, scope: !6265, file: !4, line: 1588, type: !67)
!6271 = !DILocation(line: 1588, column: 63, scope: !6265)
!6272 = !DILocalVariable(name: "pdata", scope: !6265, file: !4, line: 1590, type: !5883)
!6273 = !DILocation(line: 1590, column: 15, scope: !6265)
!6274 = !DILocation(line: 1590, column: 23, scope: !6265)
!6275 = !DILocation(line: 1590, column: 26, scope: !6265)
!6276 = !DILocation(line: 1592, column: 16, scope: !6277)
!6277 = distinct !DILexicalBlock(scope: !6265, file: !4, line: 1592, column: 9)
!6278 = !DILocation(line: 1592, column: 9, scope: !6277)
!6279 = !DILocation(line: 1592, column: 30, scope: !6277)
!6280 = !DILocation(line: 1592, column: 9, scope: !6265)
!6281 = !DILocation(line: 1593, column: 29, scope: !6277)
!6282 = !DILocation(line: 1593, column: 37, scope: !6277)
!6283 = !DILocation(line: 1593, column: 44, scope: !6277)
!6284 = !DILocation(line: 1593, column: 16, scope: !6277)
!6285 = !DILocation(line: 1593, column: 9, scope: !6277)
!6286 = !DILocation(line: 1594, column: 16, scope: !6287)
!6287 = distinct !DILexicalBlock(scope: !6265, file: !4, line: 1594, column: 9)
!6288 = !DILocation(line: 1594, column: 9, scope: !6287)
!6289 = !DILocation(line: 1594, column: 30, scope: !6287)
!6290 = !DILocation(line: 1594, column: 9, scope: !6265)
!6291 = !DILocation(line: 1595, column: 29, scope: !6287)
!6292 = !DILocation(line: 1595, column: 37, scope: !6287)
!6293 = !DILocation(line: 1595, column: 44, scope: !6287)
!6294 = !DILocation(line: 1595, column: 16, scope: !6287)
!6295 = !DILocation(line: 1595, column: 9, scope: !6287)
!6296 = !DILocation(line: 1596, column: 16, scope: !6297)
!6297 = distinct !DILexicalBlock(scope: !6265, file: !4, line: 1596, column: 9)
!6298 = !DILocation(line: 1596, column: 9, scope: !6297)
!6299 = !DILocation(line: 1596, column: 30, scope: !6297)
!6300 = !DILocation(line: 1596, column: 9, scope: !6265)
!6301 = !DILocation(line: 1597, column: 29, scope: !6297)
!6302 = !DILocation(line: 1597, column: 37, scope: !6297)
!6303 = !DILocation(line: 1597, column: 44, scope: !6297)
!6304 = !DILocation(line: 1597, column: 16, scope: !6297)
!6305 = !DILocation(line: 1597, column: 9, scope: !6297)
!6306 = !DILocation(line: 1598, column: 16, scope: !6307)
!6307 = distinct !DILexicalBlock(scope: !6265, file: !4, line: 1598, column: 9)
!6308 = !DILocation(line: 1598, column: 9, scope: !6307)
!6309 = !DILocation(line: 1598, column: 35, scope: !6307)
!6310 = !DILocation(line: 1598, column: 9, scope: !6265)
!6311 = !DILocation(line: 1599, column: 29, scope: !6307)
!6312 = !DILocation(line: 1599, column: 37, scope: !6307)
!6313 = !DILocation(line: 1599, column: 44, scope: !6307)
!6314 = !DILocation(line: 1599, column: 16, scope: !6307)
!6315 = !DILocation(line: 1599, column: 9, scope: !6307)
!6316 = !DILocation(line: 1600, column: 5, scope: !6265)
!6317 = !DILocation(line: 1601, column: 1, scope: !6265)
!6318 = distinct !DISubprogram(name: "parse_uint64", scope: !4, file: !4, line: 1563, type: !6319, isLocal: true, isDefinition: true, scopeLine: 1564, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6319 = !DISubroutineType(types: !6320)
!6320 = !{!31, !67, !6321}
!6321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5890, size: 64, align: 64)
!6322 = !DILocalVariable(name: "value", arg: 1, scope: !6318, file: !4, line: 1563, type: !67)
!6323 = !DILocation(line: 1563, column: 37, scope: !6318)
!6324 = !DILocalVariable(name: "pr", arg: 2, scope: !6318, file: !4, line: 1563, type: !6321)
!6325 = !DILocation(line: 1563, column: 54, scope: !6318)
!6326 = !DILocalVariable(name: "p", scope: !6318, file: !4, line: 1565, type: !67)
!6327 = !DILocation(line: 1565, column: 17, scope: !6318)
!6328 = !DILocation(line: 1565, column: 21, scope: !6318)
!6329 = !DILocation(line: 1567, column: 53, scope: !6330)
!6330 = distinct !DILexicalBlock(scope: !6318, file: !4, line: 1567, column: 9)
!6331 = !DILocation(line: 1567, column: 52, scope: !6330)
!6332 = !DILocation(line: 1567, column: 51, scope: !6330)
!6333 = !DILocation(line: 1567, column: 56, scope: !6330)
!6334 = !DILocation(line: 1567, column: 10, scope: !6330)
!6335 = !DILocation(line: 1567, column: 9, scope: !6318)
!6336 = !DILocation(line: 1568, column: 9, scope: !6337)
!6337 = distinct !DILexicalBlock(scope: !6330, file: !4, line: 1567, column: 63)
!6338 = !DILocation(line: 1569, column: 9, scope: !6337)
!6339 = !DILocation(line: 1571, column: 11, scope: !6340)
!6340 = distinct !DILexicalBlock(scope: !6318, file: !4, line: 1571, column: 5)
!6341 = !DILocation(line: 1571, column: 14, scope: !6340)
!6342 = !DILocation(line: 1571, column: 10, scope: !6340)
!6343 = !DILocation(line: 1571, column: 20, scope: !6344)
!6344 = !DILexicalBlockFile(scope: !6345, file: !4, discriminator: 1)
!6345 = distinct !DILexicalBlock(scope: !6340, file: !4, line: 1571, column: 5)
!6346 = !DILocation(line: 1571, column: 19, scope: !6344)
!6347 = !DILocation(line: 1571, column: 5, scope: !6344)
!6348 = !DILocation(line: 1572, column: 14, scope: !6349)
!6349 = distinct !DILexicalBlock(scope: !6350, file: !4, line: 1572, column: 13)
!6350 = distinct !DILexicalBlock(scope: !6345, file: !4, line: 1571, column: 25)
!6351 = !DILocation(line: 1572, column: 13, scope: !6349)
!6352 = !DILocation(line: 1572, column: 17, scope: !6349)
!6353 = !DILocation(line: 1572, column: 13, scope: !6350)
!6354 = !DILocation(line: 1573, column: 82, scope: !6355)
!6355 = distinct !DILexicalBlock(scope: !6349, file: !4, line: 1572, column: 35)
!6356 = !DILocation(line: 1573, column: 13, scope: !6355)
!6357 = !DILocation(line: 1574, column: 13, scope: !6355)
!6358 = !DILocation(line: 1576, column: 10, scope: !6350)
!6359 = !DILocation(line: 1576, column: 13, scope: !6350)
!6360 = !DILocation(line: 1577, column: 29, scope: !6361)
!6361 = distinct !DILexicalBlock(scope: !6350, file: !4, line: 1577, column: 13)
!6362 = !DILocation(line: 1577, column: 28, scope: !6361)
!6363 = !DILocation(line: 1577, column: 34, scope: !6361)
!6364 = !DILocation(line: 1577, column: 14, scope: !6361)
!6365 = !DILocation(line: 1577, column: 16, scope: !6361)
!6366 = !DILocation(line: 1577, column: 15, scope: !6361)
!6367 = !DILocation(line: 1577, column: 17, scope: !6361)
!6368 = !DILocation(line: 1577, column: 14, scope: !6369)
!6369 = !DILexicalBlockFile(scope: !6361, file: !4, discriminator: 1)
!6370 = !DILocation(line: 1577, column: 13, scope: !6350)
!6371 = !DILocation(line: 1578, column: 83, scope: !6372)
!6372 = distinct !DILexicalBlock(scope: !6361, file: !4, line: 1577, column: 22)
!6373 = !DILocation(line: 1578, column: 13, scope: !6372)
!6374 = !DILocation(line: 1579, column: 13, scope: !6372)
!6375 = !DILocation(line: 1581, column: 17, scope: !6350)
!6376 = !DILocation(line: 1581, column: 16, scope: !6350)
!6377 = !DILocation(line: 1581, column: 19, scope: !6350)
!6378 = !DILocation(line: 1581, column: 10, scope: !6350)
!6379 = !DILocation(line: 1581, column: 13, scope: !6350)
!6380 = !DILocation(line: 1582, column: 10, scope: !6350)
!6381 = !DILocation(line: 1571, column: 5, scope: !6382)
!6382 = !DILexicalBlockFile(scope: !6345, file: !4, discriminator: 2)
!6383 = distinct !{!6383, !6384}
!6384 = !DILocation(line: 1571, column: 5, scope: !6318)
!6385 = !DILocation(line: 1584, column: 5, scope: !6318)
!6386 = !DILocation(line: 1585, column: 1, scope: !6318)
!6387 = distinct !DISubprogram(name: "decrypt_test_init", scope: !4, file: !4, line: 1431, type: !98, isLocal: true, isDefinition: true, scopeLine: 1432, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6388 = !DILocalVariable(name: "t", arg: 1, scope: !6387, file: !4, line: 1431, type: !100)
!6389 = !DILocation(line: 1431, column: 40, scope: !6387)
!6390 = !DILocalVariable(name: "name", arg: 2, scope: !6387, file: !4, line: 1431, type: !67)
!6391 = !DILocation(line: 1431, column: 55, scope: !6387)
!6392 = !DILocation(line: 1433, column: 27, scope: !6387)
!6393 = !DILocation(line: 1433, column: 30, scope: !6387)
!6394 = !DILocation(line: 1433, column: 12, scope: !6387)
!6395 = !DILocation(line: 1433, column: 5, scope: !6387)
!6396 = distinct !DISubprogram(name: "pkey_test_cleanup", scope: !4, file: !4, line: 1319, type: !146, isLocal: true, isDefinition: true, scopeLine: 1320, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6397 = !DILocalVariable(name: "t", arg: 1, scope: !6396, file: !4, line: 1319, type: !100)
!6398 = !DILocation(line: 1319, column: 41, scope: !6396)
!6399 = !DILocalVariable(name: "kdata", scope: !6396, file: !4, line: 1321, type: !6400)
!6400 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6401, size: 64, align: 64)
!6401 = !DIDerivedType(tag: DW_TAG_typedef, name: "PKEY_DATA", file: !4, line: 1276, baseType: !6402)
!6402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pkey_data_st", file: !4, line: 1263, size: 384, align: 64, elements: !6403)
!6403 = !{!6404, !6405, !6409, !6410, !6411, !6412}
!6404 = !DIDerivedType(tag: DW_TAG_member, name: "ctx", scope: !6402, file: !4, line: 1265, baseType: !3016, size: 64, align: 64)
!6405 = !DIDerivedType(tag: DW_TAG_member, name: "keyop", scope: !6402, file: !4, line: 1267, baseType: !6406, size: 64, align: 64, offset: 64)
!6406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6407, size: 64, align: 64)
!6407 = !DISubroutineType(types: !6408)
!6408 = !{!31, !3016, !56, !953, !2919, !33}
!6409 = !DIDerivedType(tag: DW_TAG_member, name: "input", scope: !6402, file: !4, line: 1271, baseType: !56, size: 64, align: 64, offset: 128)
!6410 = !DIDerivedType(tag: DW_TAG_member, name: "input_len", scope: !6402, file: !4, line: 1272, baseType: !33, size: 64, align: 64, offset: 192)
!6411 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !6402, file: !4, line: 1274, baseType: !56, size: 64, align: 64, offset: 256)
!6412 = !DIDerivedType(tag: DW_TAG_member, name: "output_len", scope: !6402, file: !4, line: 1275, baseType: !33, size: 64, align: 64, offset: 320)
!6413 = !DILocation(line: 1321, column: 16, scope: !6396)
!6414 = !DILocation(line: 1321, column: 24, scope: !6396)
!6415 = !DILocation(line: 1321, column: 27, scope: !6396)
!6416 = !DILocation(line: 1323, column: 17, scope: !6396)
!6417 = !DILocation(line: 1323, column: 24, scope: !6396)
!6418 = !DILocation(line: 1323, column: 5, scope: !6396)
!6419 = !DILocation(line: 1324, column: 17, scope: !6396)
!6420 = !DILocation(line: 1324, column: 24, scope: !6396)
!6421 = !DILocation(line: 1324, column: 5, scope: !6396)
!6422 = !DILocation(line: 1325, column: 23, scope: !6396)
!6423 = !DILocation(line: 1325, column: 30, scope: !6396)
!6424 = !DILocation(line: 1325, column: 5, scope: !6396)
!6425 = !DILocation(line: 1326, column: 1, scope: !6396)
!6426 = distinct !DISubprogram(name: "pkey_test_parse", scope: !4, file: !4, line: 1363, type: !150, isLocal: true, isDefinition: true, scopeLine: 1365, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6427 = !DILocalVariable(name: "t", arg: 1, scope: !6426, file: !4, line: 1363, type: !100)
!6428 = !DILocation(line: 1363, column: 38, scope: !6426)
!6429 = !DILocalVariable(name: "keyword", arg: 2, scope: !6426, file: !4, line: 1364, type: !67)
!6430 = !DILocation(line: 1364, column: 40, scope: !6426)
!6431 = !DILocalVariable(name: "value", arg: 3, scope: !6426, file: !4, line: 1364, type: !67)
!6432 = !DILocation(line: 1364, column: 61, scope: !6426)
!6433 = !DILocalVariable(name: "kdata", scope: !6426, file: !4, line: 1366, type: !6400)
!6434 = !DILocation(line: 1366, column: 16, scope: !6426)
!6435 = !DILocation(line: 1366, column: 24, scope: !6426)
!6436 = !DILocation(line: 1366, column: 27, scope: !6426)
!6437 = !DILocation(line: 1367, column: 16, scope: !6438)
!6438 = distinct !DILexicalBlock(scope: !6426, file: !4, line: 1367, column: 9)
!6439 = !DILocation(line: 1367, column: 9, scope: !6438)
!6440 = !DILocation(line: 1367, column: 34, scope: !6438)
!6441 = !DILocation(line: 1367, column: 9, scope: !6426)
!6442 = !DILocation(line: 1368, column: 26, scope: !6438)
!6443 = !DILocation(line: 1368, column: 34, scope: !6438)
!6444 = !DILocation(line: 1368, column: 41, scope: !6438)
!6445 = !DILocation(line: 1368, column: 49, scope: !6438)
!6446 = !DILocation(line: 1368, column: 56, scope: !6438)
!6447 = !DILocation(line: 1368, column: 16, scope: !6438)
!6448 = !DILocation(line: 1368, column: 9, scope: !6438)
!6449 = !DILocation(line: 1369, column: 16, scope: !6450)
!6450 = distinct !DILexicalBlock(scope: !6426, file: !4, line: 1369, column: 9)
!6451 = !DILocation(line: 1369, column: 9, scope: !6450)
!6452 = !DILocation(line: 1369, column: 35, scope: !6450)
!6453 = !DILocation(line: 1369, column: 9, scope: !6426)
!6454 = !DILocation(line: 1370, column: 26, scope: !6450)
!6455 = !DILocation(line: 1370, column: 34, scope: !6450)
!6456 = !DILocation(line: 1370, column: 41, scope: !6450)
!6457 = !DILocation(line: 1370, column: 50, scope: !6450)
!6458 = !DILocation(line: 1370, column: 57, scope: !6450)
!6459 = !DILocation(line: 1370, column: 16, scope: !6450)
!6460 = !DILocation(line: 1370, column: 9, scope: !6450)
!6461 = !DILocation(line: 1371, column: 16, scope: !6462)
!6462 = distinct !DILexicalBlock(scope: !6426, file: !4, line: 1371, column: 9)
!6463 = !DILocation(line: 1371, column: 9, scope: !6462)
!6464 = !DILocation(line: 1371, column: 33, scope: !6462)
!6465 = !DILocation(line: 1371, column: 9, scope: !6426)
!6466 = !DILocation(line: 1372, column: 31, scope: !6462)
!6467 = !DILocation(line: 1372, column: 34, scope: !6462)
!6468 = !DILocation(line: 1372, column: 41, scope: !6462)
!6469 = !DILocation(line: 1372, column: 46, scope: !6462)
!6470 = !DILocation(line: 1372, column: 16, scope: !6462)
!6471 = !DILocation(line: 1372, column: 9, scope: !6462)
!6472 = !DILocation(line: 1373, column: 5, scope: !6426)
!6473 = !DILocation(line: 1374, column: 1, scope: !6426)
!6474 = distinct !DISubprogram(name: "pkey_test_run", scope: !4, file: !4, line: 1376, type: !154, isLocal: true, isDefinition: true, scopeLine: 1377, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6475 = !DILocalVariable(name: "t", arg: 1, scope: !6474, file: !4, line: 1376, type: !100)
!6476 = !DILocation(line: 1376, column: 36, scope: !6474)
!6477 = !DILocalVariable(name: "expected", scope: !6474, file: !4, line: 1378, type: !6400)
!6478 = !DILocation(line: 1378, column: 16, scope: !6474)
!6479 = !DILocation(line: 1378, column: 27, scope: !6474)
!6480 = !DILocation(line: 1378, column: 30, scope: !6474)
!6481 = !DILocalVariable(name: "got", scope: !6474, file: !4, line: 1379, type: !56)
!6482 = !DILocation(line: 1379, column: 20, scope: !6474)
!6483 = !DILocalVariable(name: "got_len", scope: !6474, file: !4, line: 1380, type: !33)
!6484 = !DILocation(line: 1380, column: 12, scope: !6474)
!6485 = !DILocation(line: 1382, column: 9, scope: !6486)
!6486 = distinct !DILexicalBlock(scope: !6474, file: !4, line: 1382, column: 9)
!6487 = !DILocation(line: 1382, column: 19, scope: !6486)
!6488 = !DILocation(line: 1382, column: 25, scope: !6486)
!6489 = !DILocation(line: 1382, column: 35, scope: !6486)
!6490 = !DILocation(line: 1383, column: 25, scope: !6486)
!6491 = !DILocation(line: 1383, column: 35, scope: !6486)
!6492 = !DILocation(line: 1383, column: 42, scope: !6486)
!6493 = !DILocation(line: 1383, column: 52, scope: !6486)
!6494 = !DILocation(line: 1383, column: 63, scope: !6486)
!6495 = !DILocation(line: 1384, column: 13, scope: !6486)
!6496 = !DILocation(line: 1384, column: 104, scope: !6497)
!6497 = !DILexicalBlockFile(scope: !6486, file: !4, discriminator: 1)
!6498 = !DILocation(line: 1384, column: 90, scope: !6497)
!6499 = !DILocation(line: 1384, column: 88, scope: !6497)
!6500 = !DILocation(line: 1384, column: 17, scope: !6501)
!6501 = !DILexicalBlockFile(scope: !6497, file: !4, discriminator: 2)
!6502 = !DILocation(line: 1384, column: 17, scope: !6497)
!6503 = !DILocation(line: 1382, column: 9, scope: !6504)
!6504 = !DILexicalBlockFile(scope: !6474, file: !4, discriminator: 1)
!6505 = !DILocation(line: 1385, column: 9, scope: !6506)
!6506 = distinct !DILexicalBlock(scope: !6486, file: !4, line: 1384, column: 140)
!6507 = !DILocation(line: 1385, column: 12, scope: !6506)
!6508 = !DILocation(line: 1385, column: 16, scope: !6506)
!6509 = !DILocation(line: 1386, column: 9, scope: !6506)
!6510 = !DILocation(line: 1388, column: 9, scope: !6511)
!6511 = distinct !DILexicalBlock(scope: !6474, file: !4, line: 1388, column: 9)
!6512 = !DILocation(line: 1388, column: 19, scope: !6511)
!6513 = !DILocation(line: 1388, column: 25, scope: !6511)
!6514 = !DILocation(line: 1388, column: 35, scope: !6511)
!6515 = !DILocation(line: 1388, column: 40, scope: !6511)
!6516 = !DILocation(line: 1389, column: 25, scope: !6511)
!6517 = !DILocation(line: 1389, column: 35, scope: !6511)
!6518 = !DILocation(line: 1389, column: 42, scope: !6511)
!6519 = !DILocation(line: 1389, column: 52, scope: !6511)
!6520 = !DILocation(line: 1389, column: 63, scope: !6511)
!6521 = !DILocation(line: 1388, column: 9, scope: !6474)
!6522 = !DILocation(line: 1390, column: 9, scope: !6523)
!6523 = distinct !DILexicalBlock(scope: !6511, file: !4, line: 1389, column: 69)
!6524 = !DILocation(line: 1390, column: 12, scope: !6523)
!6525 = !DILocation(line: 1390, column: 16, scope: !6523)
!6526 = !DILocation(line: 1391, column: 9, scope: !6523)
!6527 = !DILocation(line: 1393, column: 29, scope: !6528)
!6528 = distinct !DILexicalBlock(scope: !6474, file: !4, line: 1393, column: 9)
!6529 = !DILocation(line: 1394, column: 29, scope: !6528)
!6530 = !DILocation(line: 1394, column: 39, scope: !6528)
!6531 = !DILocation(line: 1394, column: 47, scope: !6528)
!6532 = !DILocation(line: 1394, column: 57, scope: !6528)
!6533 = !DILocation(line: 1395, column: 29, scope: !6528)
!6534 = !DILocation(line: 1395, column: 34, scope: !6528)
!6535 = !DILocation(line: 1393, column: 10, scope: !6528)
!6536 = !DILocation(line: 1393, column: 9, scope: !6474)
!6537 = !DILocation(line: 1396, column: 9, scope: !6528)
!6538 = !DILocation(line: 1398, column: 5, scope: !6474)
!6539 = !DILocation(line: 1398, column: 8, scope: !6474)
!6540 = !DILocation(line: 1398, column: 12, scope: !6474)
!6541 = !DILocation(line: 1400, column: 17, scope: !6474)
!6542 = !DILocation(line: 1400, column: 5, scope: !6474)
!6543 = !DILocation(line: 1401, column: 5, scope: !6474)
!6544 = distinct !DISubprogram(name: "pkey_test_init", scope: !4, file: !4, line: 1282, type: !6545, isLocal: true, isDefinition: true, scopeLine: 1289, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6545 = !DISubroutineType(types: !6546)
!6546 = !{!31, !100, !67, !31, !6547, !6406}
!6547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6548, size: 64, align: 64)
!6548 = !DISubroutineType(types: !6549)
!6549 = !{!31, !3016}
!6550 = !DILocalVariable(name: "t", arg: 1, scope: !6544, file: !4, line: 1282, type: !100)
!6551 = !DILocation(line: 1282, column: 37, scope: !6544)
!6552 = !DILocalVariable(name: "name", arg: 2, scope: !6544, file: !4, line: 1282, type: !67)
!6553 = !DILocation(line: 1282, column: 52, scope: !6544)
!6554 = !DILocalVariable(name: "use_public", arg: 3, scope: !6544, file: !4, line: 1283, type: !31)
!6555 = !DILocation(line: 1283, column: 31, scope: !6544)
!6556 = !DILocalVariable(name: "keyopinit", arg: 4, scope: !6544, file: !4, line: 1284, type: !6547)
!6557 = !DILocation(line: 1284, column: 33, scope: !6544)
!6558 = !DILocalVariable(name: "keyop", arg: 5, scope: !6544, file: !4, line: 1285, type: !6406)
!6559 = !DILocation(line: 1285, column: 33, scope: !6544)
!6560 = !DILocalVariable(name: "kdata", scope: !6544, file: !4, line: 1290, type: !6400)
!6561 = !DILocation(line: 1290, column: 16, scope: !6544)
!6562 = !DILocalVariable(name: "pkey", scope: !6544, file: !4, line: 1291, type: !193)
!6563 = !DILocation(line: 1291, column: 15, scope: !6544)
!6564 = !DILocalVariable(name: "rv", scope: !6544, file: !4, line: 1292, type: !31)
!6565 = !DILocation(line: 1292, column: 9, scope: !6544)
!6566 = !DILocation(line: 1294, column: 9, scope: !6567)
!6567 = distinct !DILexicalBlock(scope: !6544, file: !4, line: 1294, column: 9)
!6568 = !DILocation(line: 1294, column: 9, scope: !6544)
!6569 = !DILocation(line: 1295, column: 30, scope: !6567)
!6570 = !DILocation(line: 1295, column: 36, scope: !6567)
!6571 = !DILocation(line: 1295, column: 14, scope: !6567)
!6572 = !DILocation(line: 1295, column: 12, scope: !6567)
!6573 = !DILocation(line: 1295, column: 9, scope: !6567)
!6574 = !DILocation(line: 1296, column: 9, scope: !6575)
!6575 = distinct !DILexicalBlock(scope: !6544, file: !4, line: 1296, column: 9)
!6576 = !DILocation(line: 1296, column: 12, scope: !6575)
!6577 = !DILocation(line: 1296, column: 9, scope: !6544)
!6578 = !DILocation(line: 1297, column: 30, scope: !6575)
!6579 = !DILocation(line: 1297, column: 36, scope: !6575)
!6580 = !DILocation(line: 1297, column: 14, scope: !6575)
!6581 = !DILocation(line: 1297, column: 12, scope: !6575)
!6582 = !DILocation(line: 1297, column: 9, scope: !6575)
!6583 = !DILocation(line: 1298, column: 9, scope: !6584)
!6584 = distinct !DILexicalBlock(scope: !6544, file: !4, line: 1298, column: 9)
!6585 = !DILocation(line: 1298, column: 12, scope: !6584)
!6586 = !DILocation(line: 1298, column: 17, scope: !6584)
!6587 = !DILocation(line: 1298, column: 20, scope: !6588)
!6588 = !DILexicalBlockFile(scope: !6584, file: !4, discriminator: 1)
!6589 = !DILocation(line: 1298, column: 25, scope: !6588)
!6590 = !DILocation(line: 1298, column: 9, scope: !6588)
!6591 = !DILocation(line: 1299, column: 9, scope: !6592)
!6592 = distinct !DILexicalBlock(scope: !6584, file: !4, line: 1298, column: 33)
!6593 = !DILocation(line: 1299, column: 12, scope: !6592)
!6594 = !DILocation(line: 1299, column: 17, scope: !6592)
!6595 = !DILocation(line: 1300, column: 9, scope: !6592)
!6596 = !DILocation(line: 1303, column: 94, scope: !6597)
!6597 = distinct !DILexicalBlock(scope: !6544, file: !4, line: 1303, column: 9)
!6598 = !DILocation(line: 1303, column: 92, scope: !6597)
!6599 = !DILocation(line: 1303, column: 86, scope: !6597)
!6600 = !DILocation(line: 1303, column: 10, scope: !6601)
!6601 = !DILexicalBlockFile(scope: !6597, file: !4, discriminator: 1)
!6602 = !DILocation(line: 1303, column: 10, scope: !6597)
!6603 = !DILocation(line: 1303, column: 9, scope: !6544)
!6604 = !DILocation(line: 1304, column: 23, scope: !6605)
!6605 = distinct !DILexicalBlock(scope: !6597, file: !4, line: 1303, column: 151)
!6606 = !DILocation(line: 1304, column: 9, scope: !6605)
!6607 = !DILocation(line: 1305, column: 9, scope: !6605)
!6608 = !DILocation(line: 1307, column: 20, scope: !6544)
!6609 = !DILocation(line: 1307, column: 5, scope: !6544)
!6610 = !DILocation(line: 1307, column: 12, scope: !6544)
!6611 = !DILocation(line: 1307, column: 18, scope: !6544)
!6612 = !DILocation(line: 1308, column: 119, scope: !6613)
!6613 = distinct !DILexicalBlock(scope: !6544, file: !4, line: 1308, column: 9)
!6614 = !DILocation(line: 1308, column: 102, scope: !6613)
!6615 = !DILocation(line: 1308, column: 89, scope: !6613)
!6616 = !DILocation(line: 1308, column: 96, scope: !6613)
!6617 = !DILocation(line: 1308, column: 100, scope: !6613)
!6618 = !DILocation(line: 1308, column: 10, scope: !6619)
!6619 = !DILexicalBlockFile(scope: !6613, file: !4, discriminator: 1)
!6620 = !DILocation(line: 1308, column: 10, scope: !6613)
!6621 = !DILocation(line: 1308, column: 9, scope: !6544)
!6622 = !DILocation(line: 1309, column: 23, scope: !6623)
!6623 = distinct !DILexicalBlock(scope: !6613, file: !4, line: 1308, column: 13)
!6624 = !DILocation(line: 1309, column: 9, scope: !6623)
!6625 = !DILocation(line: 1310, column: 21, scope: !6623)
!6626 = !DILocation(line: 1310, column: 9, scope: !6623)
!6627 = !DILocation(line: 1311, column: 9, scope: !6623)
!6628 = !DILocation(line: 1313, column: 9, scope: !6629)
!6629 = distinct !DILexicalBlock(scope: !6544, file: !4, line: 1313, column: 9)
!6630 = !DILocation(line: 1313, column: 19, scope: !6629)
!6631 = !DILocation(line: 1313, column: 26, scope: !6629)
!6632 = !DILocation(line: 1313, column: 31, scope: !6629)
!6633 = !DILocation(line: 1313, column: 9, scope: !6544)
!6634 = !DILocation(line: 1314, column: 9, scope: !6629)
!6635 = !DILocation(line: 1314, column: 12, scope: !6629)
!6636 = !DILocation(line: 1314, column: 16, scope: !6629)
!6637 = !DILocation(line: 1315, column: 15, scope: !6544)
!6638 = !DILocation(line: 1315, column: 5, scope: !6544)
!6639 = !DILocation(line: 1315, column: 8, scope: !6544)
!6640 = !DILocation(line: 1315, column: 13, scope: !6544)
!6641 = !DILocation(line: 1316, column: 5, scope: !6544)
!6642 = !DILocation(line: 1317, column: 1, scope: !6544)
!6643 = distinct !DISubprogram(name: "pderive_test_init", scope: !4, file: !4, line: 1469, type: !98, isLocal: true, isDefinition: true, scopeLine: 1470, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6644 = !DILocalVariable(name: "t", arg: 1, scope: !6643, file: !4, line: 1469, type: !100)
!6645 = !DILocation(line: 1469, column: 40, scope: !6643)
!6646 = !DILocalVariable(name: "name", arg: 2, scope: !6643, file: !4, line: 1469, type: !67)
!6647 = !DILocation(line: 1469, column: 55, scope: !6643)
!6648 = !DILocation(line: 1471, column: 27, scope: !6643)
!6649 = !DILocation(line: 1471, column: 30, scope: !6643)
!6650 = !DILocation(line: 1471, column: 12, scope: !6643)
!6651 = !DILocation(line: 1471, column: 5, scope: !6643)
!6652 = distinct !DISubprogram(name: "pderive_test_parse", scope: !4, file: !4, line: 1474, type: !150, isLocal: true, isDefinition: true, scopeLine: 1476, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6653 = !DILocalVariable(name: "t", arg: 1, scope: !6652, file: !4, line: 1474, type: !100)
!6654 = !DILocation(line: 1474, column: 41, scope: !6652)
!6655 = !DILocalVariable(name: "keyword", arg: 2, scope: !6652, file: !4, line: 1475, type: !67)
!6656 = !DILocation(line: 1475, column: 43, scope: !6652)
!6657 = !DILocalVariable(name: "value", arg: 3, scope: !6652, file: !4, line: 1475, type: !67)
!6658 = !DILocation(line: 1475, column: 64, scope: !6652)
!6659 = !DILocalVariable(name: "kdata", scope: !6652, file: !4, line: 1477, type: !6400)
!6660 = !DILocation(line: 1477, column: 16, scope: !6652)
!6661 = !DILocation(line: 1477, column: 24, scope: !6652)
!6662 = !DILocation(line: 1477, column: 27, scope: !6652)
!6663 = !DILocation(line: 1479, column: 16, scope: !6664)
!6664 = distinct !DILexicalBlock(scope: !6652, file: !4, line: 1479, column: 9)
!6665 = !DILocation(line: 1479, column: 9, scope: !6664)
!6666 = !DILocation(line: 1479, column: 36, scope: !6664)
!6667 = !DILocation(line: 1479, column: 9, scope: !6652)
!6668 = !DILocalVariable(name: "peer", scope: !6669, file: !4, line: 1480, type: !193)
!6669 = distinct !DILexicalBlock(scope: !6664, file: !4, line: 1479, column: 42)
!6670 = !DILocation(line: 1480, column: 19, scope: !6669)
!6671 = !DILocation(line: 1481, column: 29, scope: !6672)
!6672 = distinct !DILexicalBlock(scope: !6669, file: !4, line: 1481, column: 13)
!6673 = !DILocation(line: 1481, column: 36, scope: !6672)
!6674 = !DILocation(line: 1481, column: 13, scope: !6672)
!6675 = !DILocation(line: 1481, column: 49, scope: !6672)
!6676 = !DILocation(line: 1481, column: 13, scope: !6669)
!6677 = !DILocation(line: 1482, column: 13, scope: !6672)
!6678 = !DILocation(line: 1483, column: 38, scope: !6679)
!6679 = distinct !DILexicalBlock(scope: !6669, file: !4, line: 1483, column: 13)
!6680 = !DILocation(line: 1483, column: 45, scope: !6679)
!6681 = !DILocation(line: 1483, column: 50, scope: !6679)
!6682 = !DILocation(line: 1483, column: 13, scope: !6679)
!6683 = !DILocation(line: 1483, column: 56, scope: !6679)
!6684 = !DILocation(line: 1483, column: 13, scope: !6669)
!6685 = !DILocation(line: 1484, column: 13, scope: !6679)
!6686 = !DILocation(line: 1485, column: 9, scope: !6669)
!6687 = !DILocation(line: 1487, column: 16, scope: !6688)
!6688 = distinct !DILexicalBlock(scope: !6652, file: !4, line: 1487, column: 9)
!6689 = !DILocation(line: 1487, column: 9, scope: !6688)
!6690 = !DILocation(line: 1487, column: 41, scope: !6688)
!6691 = !DILocation(line: 1487, column: 9, scope: !6652)
!6692 = !DILocation(line: 1488, column: 26, scope: !6688)
!6693 = !DILocation(line: 1488, column: 34, scope: !6688)
!6694 = !DILocation(line: 1488, column: 41, scope: !6688)
!6695 = !DILocation(line: 1488, column: 50, scope: !6688)
!6696 = !DILocation(line: 1488, column: 57, scope: !6688)
!6697 = !DILocation(line: 1488, column: 16, scope: !6688)
!6698 = !DILocation(line: 1488, column: 9, scope: !6688)
!6699 = !DILocation(line: 1489, column: 16, scope: !6700)
!6700 = distinct !DILexicalBlock(scope: !6652, file: !4, line: 1489, column: 9)
!6701 = !DILocation(line: 1489, column: 9, scope: !6700)
!6702 = !DILocation(line: 1489, column: 33, scope: !6700)
!6703 = !DILocation(line: 1489, column: 9, scope: !6652)
!6704 = !DILocation(line: 1490, column: 31, scope: !6700)
!6705 = !DILocation(line: 1490, column: 34, scope: !6700)
!6706 = !DILocation(line: 1490, column: 41, scope: !6700)
!6707 = !DILocation(line: 1490, column: 46, scope: !6700)
!6708 = !DILocation(line: 1490, column: 16, scope: !6700)
!6709 = !DILocation(line: 1490, column: 9, scope: !6700)
!6710 = !DILocation(line: 1491, column: 5, scope: !6652)
!6711 = !DILocation(line: 1492, column: 1, scope: !6652)
!6712 = distinct !DISubprogram(name: "pderive_test_run", scope: !4, file: !4, line: 1494, type: !154, isLocal: true, isDefinition: true, scopeLine: 1495, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6713 = !DILocalVariable(name: "t", arg: 1, scope: !6712, file: !4, line: 1494, type: !100)
!6714 = !DILocation(line: 1494, column: 39, scope: !6712)
!6715 = !DILocalVariable(name: "expected", scope: !6712, file: !4, line: 1496, type: !6400)
!6716 = !DILocation(line: 1496, column: 16, scope: !6712)
!6717 = !DILocation(line: 1496, column: 27, scope: !6712)
!6718 = !DILocation(line: 1496, column: 30, scope: !6712)
!6719 = !DILocalVariable(name: "got", scope: !6712, file: !4, line: 1497, type: !56)
!6720 = !DILocation(line: 1497, column: 20, scope: !6712)
!6721 = !DILocalVariable(name: "got_len", scope: !6712, file: !4, line: 1498, type: !33)
!6722 = !DILocation(line: 1498, column: 12, scope: !6712)
!6723 = !DILocation(line: 1500, column: 25, scope: !6724)
!6724 = distinct !DILexicalBlock(scope: !6712, file: !4, line: 1500, column: 9)
!6725 = !DILocation(line: 1500, column: 35, scope: !6724)
!6726 = !DILocation(line: 1500, column: 9, scope: !6724)
!6727 = !DILocation(line: 1500, column: 55, scope: !6724)
!6728 = !DILocation(line: 1500, column: 9, scope: !6712)
!6729 = !DILocation(line: 1501, column: 9, scope: !6730)
!6730 = distinct !DILexicalBlock(scope: !6724, file: !4, line: 1500, column: 61)
!6731 = !DILocation(line: 1501, column: 12, scope: !6730)
!6732 = !DILocation(line: 1501, column: 16, scope: !6730)
!6733 = !DILocation(line: 1502, column: 9, scope: !6730)
!6734 = !DILocation(line: 1504, column: 97, scope: !6735)
!6735 = distinct !DILexicalBlock(scope: !6712, file: !4, line: 1504, column: 9)
!6736 = !DILocation(line: 1504, column: 83, scope: !6735)
!6737 = !DILocation(line: 1504, column: 81, scope: !6735)
!6738 = !DILocation(line: 1504, column: 10, scope: !6739)
!6739 = !DILexicalBlockFile(scope: !6735, file: !4, discriminator: 1)
!6740 = !DILocation(line: 1504, column: 10, scope: !6735)
!6741 = !DILocation(line: 1504, column: 9, scope: !6712)
!6742 = !DILocation(line: 1505, column: 9, scope: !6743)
!6743 = distinct !DILexicalBlock(scope: !6735, file: !4, line: 1504, column: 133)
!6744 = !DILocation(line: 1505, column: 12, scope: !6743)
!6745 = !DILocation(line: 1505, column: 16, scope: !6743)
!6746 = !DILocation(line: 1506, column: 9, scope: !6743)
!6747 = !DILocation(line: 1508, column: 25, scope: !6748)
!6748 = distinct !DILexicalBlock(scope: !6712, file: !4, line: 1508, column: 9)
!6749 = !DILocation(line: 1508, column: 35, scope: !6748)
!6750 = !DILocation(line: 1508, column: 40, scope: !6748)
!6751 = !DILocation(line: 1508, column: 9, scope: !6748)
!6752 = !DILocation(line: 1508, column: 55, scope: !6748)
!6753 = !DILocation(line: 1508, column: 9, scope: !6712)
!6754 = !DILocation(line: 1509, column: 9, scope: !6755)
!6755 = distinct !DILexicalBlock(scope: !6748, file: !4, line: 1508, column: 61)
!6756 = !DILocation(line: 1509, column: 12, scope: !6755)
!6757 = !DILocation(line: 1509, column: 16, scope: !6755)
!6758 = !DILocation(line: 1510, column: 9, scope: !6755)
!6759 = !DILocation(line: 1512, column: 29, scope: !6760)
!6760 = distinct !DILexicalBlock(scope: !6712, file: !4, line: 1512, column: 9)
!6761 = !DILocation(line: 1513, column: 29, scope: !6760)
!6762 = !DILocation(line: 1513, column: 39, scope: !6760)
!6763 = !DILocation(line: 1513, column: 47, scope: !6760)
!6764 = !DILocation(line: 1513, column: 57, scope: !6760)
!6765 = !DILocation(line: 1514, column: 29, scope: !6760)
!6766 = !DILocation(line: 1514, column: 34, scope: !6760)
!6767 = !DILocation(line: 1512, column: 10, scope: !6760)
!6768 = !DILocation(line: 1512, column: 9, scope: !6712)
!6769 = !DILocation(line: 1515, column: 9, scope: !6760)
!6770 = !DILocation(line: 1517, column: 5, scope: !6712)
!6771 = !DILocation(line: 1517, column: 8, scope: !6712)
!6772 = !DILocation(line: 1517, column: 12, scope: !6712)
!6773 = !DILocation(line: 1519, column: 17, scope: !6712)
!6774 = !DILocation(line: 1519, column: 5, scope: !6712)
!6775 = !DILocation(line: 1520, column: 5, scope: !6712)
!6776 = distinct !DISubprogram(name: "sign_test_init", scope: !4, file: !4, line: 1404, type: !98, isLocal: true, isDefinition: true, scopeLine: 1405, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6777 = !DILocalVariable(name: "t", arg: 1, scope: !6776, file: !4, line: 1404, type: !100)
!6778 = !DILocation(line: 1404, column: 37, scope: !6776)
!6779 = !DILocalVariable(name: "name", arg: 2, scope: !6776, file: !4, line: 1404, type: !67)
!6780 = !DILocation(line: 1404, column: 52, scope: !6776)
!6781 = !DILocation(line: 1406, column: 27, scope: !6776)
!6782 = !DILocation(line: 1406, column: 30, scope: !6776)
!6783 = !DILocation(line: 1406, column: 12, scope: !6776)
!6784 = !DILocation(line: 1406, column: 5, scope: !6776)
!6785 = distinct !DISubprogram(name: "verify_recover_test_init", scope: !4, file: !4, line: 1417, type: !98, isLocal: true, isDefinition: true, scopeLine: 1418, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6786 = !DILocalVariable(name: "t", arg: 1, scope: !6785, file: !4, line: 1417, type: !100)
!6787 = !DILocation(line: 1417, column: 47, scope: !6785)
!6788 = !DILocalVariable(name: "name", arg: 2, scope: !6785, file: !4, line: 1417, type: !67)
!6789 = !DILocation(line: 1417, column: 62, scope: !6785)
!6790 = !DILocation(line: 1419, column: 27, scope: !6785)
!6791 = !DILocation(line: 1419, column: 30, scope: !6785)
!6792 = !DILocation(line: 1419, column: 12, scope: !6785)
!6793 = !DILocation(line: 1419, column: 5, scope: !6785)
!6794 = distinct !DISubprogram(name: "verify_test_init", scope: !4, file: !4, line: 1445, type: !98, isLocal: true, isDefinition: true, scopeLine: 1446, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6795 = !DILocalVariable(name: "t", arg: 1, scope: !6794, file: !4, line: 1445, type: !100)
!6796 = !DILocation(line: 1445, column: 39, scope: !6794)
!6797 = !DILocalVariable(name: "name", arg: 2, scope: !6794, file: !4, line: 1445, type: !67)
!6798 = !DILocation(line: 1445, column: 54, scope: !6794)
!6799 = !DILocation(line: 1447, column: 27, scope: !6794)
!6800 = !DILocation(line: 1447, column: 30, scope: !6794)
!6801 = !DILocation(line: 1447, column: 12, scope: !6794)
!6802 = !DILocation(line: 1447, column: 5, scope: !6794)
!6803 = distinct !DISubprogram(name: "verify_test_run", scope: !4, file: !4, line: 1450, type: !154, isLocal: true, isDefinition: true, scopeLine: 1451, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6804 = !DILocalVariable(name: "t", arg: 1, scope: !6803, file: !4, line: 1450, type: !100)
!6805 = !DILocation(line: 1450, column: 38, scope: !6803)
!6806 = !DILocalVariable(name: "kdata", scope: !6803, file: !4, line: 1452, type: !6400)
!6807 = !DILocation(line: 1452, column: 16, scope: !6803)
!6808 = !DILocation(line: 1452, column: 24, scope: !6803)
!6809 = !DILocation(line: 1452, column: 27, scope: !6803)
!6810 = !DILocation(line: 1454, column: 25, scope: !6811)
!6811 = distinct !DILexicalBlock(scope: !6803, file: !4, line: 1454, column: 9)
!6812 = !DILocation(line: 1454, column: 32, scope: !6811)
!6813 = !DILocation(line: 1454, column: 37, scope: !6811)
!6814 = !DILocation(line: 1454, column: 44, scope: !6811)
!6815 = !DILocation(line: 1454, column: 52, scope: !6811)
!6816 = !DILocation(line: 1454, column: 59, scope: !6811)
!6817 = !DILocation(line: 1455, column: 25, scope: !6811)
!6818 = !DILocation(line: 1455, column: 32, scope: !6811)
!6819 = !DILocation(line: 1455, column: 39, scope: !6811)
!6820 = !DILocation(line: 1455, column: 46, scope: !6811)
!6821 = !DILocation(line: 1454, column: 9, scope: !6811)
!6822 = !DILocation(line: 1455, column: 57, scope: !6811)
!6823 = !DILocation(line: 1454, column: 9, scope: !6803)
!6824 = !DILocation(line: 1456, column: 9, scope: !6811)
!6825 = !DILocation(line: 1456, column: 12, scope: !6811)
!6826 = !DILocation(line: 1456, column: 16, scope: !6811)
!6827 = !DILocation(line: 1457, column: 5, scope: !6803)
!6828 = distinct !DISubprogram(name: "check_test_error", scope: !4, file: !4, line: 2683, type: !154, isLocal: true, isDefinition: true, scopeLine: 2684, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !84)
!6829 = !DILocalVariable(name: "t", arg: 1, scope: !6828, file: !4, line: 2683, type: !100)
!6830 = !DILocation(line: 2683, column: 39, scope: !6828)
!6831 = !DILocalVariable(name: "err", scope: !6828, file: !4, line: 2685, type: !35)
!6832 = !DILocation(line: 2685, column: 19, scope: !6828)
!6833 = !DILocalVariable(name: "func", scope: !6828, file: !4, line: 2686, type: !67)
!6834 = !DILocation(line: 2686, column: 17, scope: !6828)
!6835 = !DILocalVariable(name: "reason", scope: !6828, file: !4, line: 2687, type: !67)
!6836 = !DILocation(line: 2687, column: 17, scope: !6828)
!6837 = !DILocation(line: 2689, column: 9, scope: !6838)
!6838 = distinct !DILexicalBlock(scope: !6828, file: !4, line: 2689, column: 9)
!6839 = !DILocation(line: 2689, column: 12, scope: !6838)
!6840 = !DILocation(line: 2689, column: 16, scope: !6838)
!6841 = !DILocation(line: 2689, column: 23, scope: !6838)
!6842 = !DILocation(line: 2689, column: 26, scope: !6843)
!6843 = !DILexicalBlockFile(scope: !6838, file: !4, discriminator: 1)
!6844 = !DILocation(line: 2689, column: 29, scope: !6843)
!6845 = !DILocation(line: 2689, column: 42, scope: !6843)
!6846 = !DILocation(line: 2689, column: 9, scope: !6843)
!6847 = !DILocation(line: 2690, column: 9, scope: !6838)
!6848 = !DILocation(line: 2691, column: 9, scope: !6849)
!6849 = distinct !DILexicalBlock(scope: !6828, file: !4, line: 2691, column: 9)
!6850 = !DILocation(line: 2691, column: 12, scope: !6849)
!6851 = !DILocation(line: 2691, column: 16, scope: !6849)
!6852 = !DILocation(line: 2691, column: 23, scope: !6849)
!6853 = !DILocation(line: 2691, column: 26, scope: !6854)
!6854 = !DILexicalBlockFile(scope: !6849, file: !4, discriminator: 1)
!6855 = !DILocation(line: 2691, column: 29, scope: !6854)
!6856 = !DILocation(line: 2691, column: 42, scope: !6854)
!6857 = !DILocation(line: 2691, column: 9, scope: !6854)
!6858 = !DILocation(line: 2692, column: 13, scope: !6859)
!6859 = distinct !DILexicalBlock(scope: !6860, file: !4, line: 2692, column: 13)
!6860 = distinct !DILexicalBlock(scope: !6849, file: !4, line: 2691, column: 51)
!6861 = !DILocation(line: 2692, column: 16, scope: !6859)
!6862 = !DILocation(line: 2692, column: 24, scope: !6859)
!6863 = !DILocation(line: 2692, column: 13, scope: !6860)
!6864 = !DILocation(line: 2693, column: 73, scope: !6865)
!6865 = distinct !DILexicalBlock(scope: !6859, file: !4, line: 2692, column: 32)
!6866 = !DILocation(line: 2693, column: 76, scope: !6865)
!6867 = !DILocation(line: 2693, column: 78, scope: !6865)
!6868 = !DILocation(line: 2693, column: 89, scope: !6865)
!6869 = !DILocation(line: 2693, column: 92, scope: !6865)
!6870 = !DILocation(line: 2693, column: 94, scope: !6865)
!6871 = !DILocation(line: 2693, column: 101, scope: !6865)
!6872 = !DILocation(line: 2693, column: 104, scope: !6865)
!6873 = !DILocation(line: 2693, column: 113, scope: !6865)
!6874 = !DILocation(line: 2693, column: 116, scope: !6865)
!6875 = !DILocation(line: 2693, column: 13, scope: !6865)
!6876 = !DILocation(line: 2695, column: 9, scope: !6865)
!6877 = !DILocation(line: 2696, column: 68, scope: !6878)
!6878 = distinct !DILexicalBlock(scope: !6859, file: !4, line: 2695, column: 16)
!6879 = !DILocation(line: 2696, column: 71, scope: !6878)
!6880 = !DILocation(line: 2696, column: 73, scope: !6878)
!6881 = !DILocation(line: 2696, column: 84, scope: !6878)
!6882 = !DILocation(line: 2696, column: 87, scope: !6878)
!6883 = !DILocation(line: 2696, column: 89, scope: !6878)
!6884 = !DILocation(line: 2696, column: 96, scope: !6878)
!6885 = !DILocation(line: 2696, column: 99, scope: !6878)
!6886 = !DILocation(line: 2696, column: 13, scope: !6878)
!6887 = !DILocation(line: 2699, column: 9, scope: !6860)
!6888 = !DILocation(line: 2701, column: 9, scope: !6889)
!6889 = distinct !DILexicalBlock(scope: !6828, file: !4, line: 2701, column: 9)
!6890 = !DILocation(line: 2701, column: 12, scope: !6889)
!6891 = !DILocation(line: 2701, column: 16, scope: !6889)
!6892 = !DILocation(line: 2701, column: 23, scope: !6889)
!6893 = !DILocation(line: 2701, column: 26, scope: !6894)
!6894 = !DILexicalBlockFile(scope: !6889, file: !4, discriminator: 1)
!6895 = !DILocation(line: 2701, column: 29, scope: !6894)
!6896 = !DILocation(line: 2701, column: 42, scope: !6894)
!6897 = !DILocation(line: 2701, column: 9, scope: !6894)
!6898 = !DILocation(line: 2702, column: 52, scope: !6899)
!6899 = distinct !DILexicalBlock(scope: !6889, file: !4, line: 2701, column: 51)
!6900 = !DILocation(line: 2702, column: 55, scope: !6899)
!6901 = !DILocation(line: 2702, column: 57, scope: !6899)
!6902 = !DILocation(line: 2702, column: 68, scope: !6899)
!6903 = !DILocation(line: 2702, column: 71, scope: !6899)
!6904 = !DILocation(line: 2702, column: 73, scope: !6899)
!6905 = !DILocation(line: 2702, column: 80, scope: !6899)
!6906 = !DILocation(line: 2702, column: 83, scope: !6899)
!6907 = !DILocation(line: 2702, column: 9, scope: !6899)
!6908 = !DILocation(line: 2704, column: 9, scope: !6899)
!6909 = !DILocation(line: 2707, column: 16, scope: !6910)
!6910 = distinct !DILexicalBlock(scope: !6828, file: !4, line: 2707, column: 9)
!6911 = !DILocation(line: 2707, column: 19, scope: !6910)
!6912 = !DILocation(line: 2707, column: 24, scope: !6910)
!6913 = !DILocation(line: 2707, column: 27, scope: !6910)
!6914 = !DILocation(line: 2707, column: 9, scope: !6910)
!6915 = !DILocation(line: 2707, column: 41, scope: !6910)
!6916 = !DILocation(line: 2707, column: 9, scope: !6828)
!6917 = !DILocation(line: 2708, column: 40, scope: !6918)
!6918 = distinct !DILexicalBlock(scope: !6910, file: !4, line: 2707, column: 47)
!6919 = !DILocation(line: 2708, column: 43, scope: !6918)
!6920 = !DILocation(line: 2708, column: 45, scope: !6918)
!6921 = !DILocation(line: 2708, column: 56, scope: !6918)
!6922 = !DILocation(line: 2708, column: 59, scope: !6918)
!6923 = !DILocation(line: 2708, column: 61, scope: !6918)
!6924 = !DILocation(line: 2708, column: 68, scope: !6918)
!6925 = !DILocation(line: 2708, column: 71, scope: !6918)
!6926 = !DILocation(line: 2708, column: 85, scope: !6918)
!6927 = !DILocation(line: 2708, column: 88, scope: !6918)
!6928 = !DILocation(line: 2708, column: 9, scope: !6918)
!6929 = !DILocation(line: 2710, column: 9, scope: !6918)
!6930 = !DILocation(line: 2713, column: 9, scope: !6931)
!6931 = distinct !DILexicalBlock(scope: !6828, file: !4, line: 2713, column: 9)
!6932 = !DILocation(line: 2713, column: 12, scope: !6931)
!6933 = !DILocation(line: 2713, column: 17, scope: !6931)
!6934 = !DILocation(line: 2713, column: 24, scope: !6931)
!6935 = !DILocation(line: 2713, column: 27, scope: !6936)
!6936 = !DILexicalBlockFile(scope: !6931, file: !4, discriminator: 1)
!6937 = !DILocation(line: 2713, column: 30, scope: !6936)
!6938 = !DILocation(line: 2713, column: 37, scope: !6936)
!6939 = !DILocation(line: 2713, column: 9, scope: !6936)
!6940 = !DILocation(line: 2714, column: 9, scope: !6931)
!6941 = !DILocation(line: 2716, column: 9, scope: !6942)
!6942 = distinct !DILexicalBlock(scope: !6828, file: !4, line: 2716, column: 9)
!6943 = !DILocation(line: 2716, column: 12, scope: !6942)
!6944 = !DILocation(line: 2716, column: 17, scope: !6942)
!6945 = !DILocation(line: 2716, column: 24, scope: !6942)
!6946 = !DILocation(line: 2716, column: 27, scope: !6947)
!6947 = !DILexicalBlockFile(scope: !6942, file: !4, discriminator: 1)
!6948 = !DILocation(line: 2716, column: 30, scope: !6947)
!6949 = !DILocation(line: 2716, column: 37, scope: !6947)
!6950 = !DILocation(line: 2716, column: 9, scope: !6947)
!6951 = !DILocation(line: 2717, column: 61, scope: !6952)
!6952 = distinct !DILexicalBlock(scope: !6942, file: !4, line: 2716, column: 46)
!6953 = !DILocation(line: 2717, column: 64, scope: !6952)
!6954 = !DILocation(line: 2717, column: 66, scope: !6952)
!6955 = !DILocation(line: 2717, column: 77, scope: !6952)
!6956 = !DILocation(line: 2717, column: 80, scope: !6952)
!6957 = !DILocation(line: 2717, column: 82, scope: !6952)
!6958 = !DILocation(line: 2717, column: 9, scope: !6952)
!6959 = !DILocation(line: 2719, column: 9, scope: !6952)
!6960 = !DILocation(line: 2722, column: 11, scope: !6828)
!6961 = !DILocation(line: 2722, column: 9, scope: !6828)
!6962 = !DILocation(line: 2723, column: 9, scope: !6963)
!6963 = distinct !DILexicalBlock(scope: !6828, file: !4, line: 2723, column: 9)
!6964 = !DILocation(line: 2723, column: 13, scope: !6963)
!6965 = !DILocation(line: 2723, column: 9, scope: !6828)
!6966 = !DILocation(line: 2724, column: 54, scope: !6967)
!6967 = distinct !DILexicalBlock(scope: !6963, file: !4, line: 2723, column: 19)
!6968 = !DILocation(line: 2724, column: 57, scope: !6967)
!6969 = !DILocation(line: 2724, column: 59, scope: !6967)
!6970 = !DILocation(line: 2724, column: 70, scope: !6967)
!6971 = !DILocation(line: 2724, column: 73, scope: !6967)
!6972 = !DILocation(line: 2724, column: 75, scope: !6967)
!6973 = !DILocation(line: 2724, column: 82, scope: !6967)
!6974 = !DILocation(line: 2724, column: 85, scope: !6967)
!6975 = !DILocation(line: 2724, column: 91, scope: !6967)
!6976 = !DILocation(line: 2724, column: 94, scope: !6967)
!6977 = !DILocation(line: 2724, column: 9, scope: !6967)
!6978 = !DILocation(line: 2726, column: 9, scope: !6967)
!6979 = !DILocation(line: 2729, column: 34, scope: !6828)
!6980 = !DILocation(line: 2729, column: 12, scope: !6828)
!6981 = !DILocation(line: 2729, column: 10, scope: !6828)
!6982 = !DILocation(line: 2730, column: 38, scope: !6828)
!6983 = !DILocation(line: 2730, column: 14, scope: !6828)
!6984 = !DILocation(line: 2730, column: 12, scope: !6828)
!6985 = !DILocation(line: 2731, column: 9, scope: !6986)
!6986 = distinct !DILexicalBlock(scope: !6828, file: !4, line: 2731, column: 9)
!6987 = !DILocation(line: 2731, column: 14, scope: !6986)
!6988 = !DILocation(line: 2731, column: 21, scope: !6986)
!6989 = !DILocation(line: 2731, column: 24, scope: !6990)
!6990 = !DILexicalBlockFile(scope: !6986, file: !4, discriminator: 1)
!6991 = !DILocation(line: 2731, column: 31, scope: !6990)
!6992 = !DILocation(line: 2731, column: 9, scope: !6990)
!6993 = !DILocation(line: 2732, column: 85, scope: !6994)
!6994 = distinct !DILexicalBlock(scope: !6986, file: !4, line: 2731, column: 40)
!6995 = !DILocation(line: 2732, column: 88, scope: !6994)
!6996 = !DILocation(line: 2732, column: 90, scope: !6994)
!6997 = !DILocation(line: 2732, column: 101, scope: !6994)
!6998 = !DILocation(line: 2732, column: 104, scope: !6994)
!6999 = !DILocation(line: 2732, column: 106, scope: !6994)
!7000 = !DILocation(line: 2732, column: 113, scope: !6994)
!7001 = !DILocation(line: 2732, column: 116, scope: !6994)
!7002 = !DILocation(line: 2732, column: 122, scope: !6994)
!7003 = !DILocation(line: 2732, column: 125, scope: !6994)
!7004 = !DILocation(line: 2732, column: 9, scope: !6994)
!7005 = !DILocation(line: 2735, column: 9, scope: !6994)
!7006 = !DILocation(line: 2738, column: 16, scope: !7007)
!7007 = distinct !DILexicalBlock(scope: !6828, file: !4, line: 2738, column: 9)
!7008 = !DILocation(line: 2738, column: 22, scope: !7007)
!7009 = !DILocation(line: 2738, column: 25, scope: !7007)
!7010 = !DILocation(line: 2738, column: 9, scope: !7007)
!7011 = !DILocation(line: 2738, column: 31, scope: !7007)
!7012 = !DILocation(line: 2738, column: 36, scope: !7007)
!7013 = !DILocation(line: 2738, column: 46, scope: !7014)
!7014 = !DILexicalBlockFile(scope: !7007, file: !4, discriminator: 1)
!7015 = !DILocation(line: 2738, column: 54, scope: !7014)
!7016 = !DILocation(line: 2738, column: 57, scope: !7014)
!7017 = !DILocation(line: 2738, column: 39, scope: !7014)
!7018 = !DILocation(line: 2738, column: 65, scope: !7014)
!7019 = !DILocation(line: 2738, column: 9, scope: !7014)
!7020 = !DILocation(line: 2739, column: 9, scope: !7007)
!7021 = !DILocation(line: 2741, column: 57, scope: !6828)
!7022 = !DILocation(line: 2741, column: 60, scope: !6828)
!7023 = !DILocation(line: 2741, column: 62, scope: !6828)
!7024 = !DILocation(line: 2741, column: 73, scope: !6828)
!7025 = !DILocation(line: 2741, column: 76, scope: !6828)
!7026 = !DILocation(line: 2741, column: 78, scope: !6828)
!7027 = !DILocation(line: 2741, column: 85, scope: !6828)
!7028 = !DILocation(line: 2741, column: 88, scope: !6828)
!7029 = !DILocation(line: 2741, column: 94, scope: !6828)
!7030 = !DILocation(line: 2741, column: 97, scope: !6828)
!7031 = !DILocation(line: 2741, column: 105, scope: !6828)
!7032 = !DILocation(line: 2741, column: 111, scope: !6828)
!7033 = !DILocation(line: 2741, column: 5, scope: !6828)
!7034 = !DILocation(line: 2744, column: 5, scope: !6828)
!7035 = !DILocation(line: 2745, column: 1, scope: !6828)
