; ModuleID = '/home/ubuntu_1604/Desktop/openssl_bcmake_outputs/[task]test--bntest/[inter]test--bntest-bin-bntest.o.i'
source_filename = "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs/[task]test--bntest/[inter]test--bntest-bin-bntest.o.i"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.options_st = type { i8*, i32, i32, i8* }
%struct.bignum_ctx = type opaque
%struct.mpitest_st = type { i8*, i8*, i64 }
%struct.filetest_st = type { i8*, i32 (%struct.stanza_st*)* }
%struct.stanza_st = type { i8*, %struct.bio_st*, i32, i32, i32, i32, i32, i32, [20 x %struct.pair_st], %struct.bio_st*, [4096 x i8] }
%struct.pair_st = type { i8*, i8* }
%struct.bio_st = type opaque
%struct.bignum_st = type opaque
%struct.bn_recp_ctx_st = type opaque
%struct.bn_mont_ctx_st = type opaque
%struct.bn_gencb_st = type opaque

@test_get_options.test_options = internal constant [10 x %struct.options_st] [%struct.options_st { i8* getelementptr inbounds ([0 x i8], [0 x i8]* @OPT_HELP_STR, i32 0, i32 0), i32 1, i32 45, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([0 x i8], [0 x i8]* @OPT_HELP_STR, i32 0, i32 0), i32 1, i32 45, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i32 500, i32 45, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 501, i32 45, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.5, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i32 502, i32 115, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32 503, i32 110, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i32 504, i32 112, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i32 0, i32 0), i32 505, i32 110, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.13, i32 0, i32 0) }, %struct.options_st { i8* getelementptr inbounds ([0 x i8], [0 x i8]* @OPT_HELP_STR, i32 0, i32 0), i32 1, i32 45, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.14, i32 0, i32 0) }, %struct.options_st zeroinitializer], align 16
@OPT_HELP_STR = external constant [0 x i8], align 1
@.str = private unnamed_addr constant [31 x i8] c"Usage: %s [options] [file...]\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"Valid options are:\0A\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Display this summary\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"list\00", align 1
@.str.5 = private unnamed_addr constant [36 x i8] c"Display the list of tests available\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@.str.7 = private unnamed_addr constant [32 x i8] c"Run a single test by id or name\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"iter\00", align 1
@.str.9 = private unnamed_addr constant [33 x i8] c"Run a single iteration of a test\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"indent\00", align 1
@.str.11 = private unnamed_addr constant [31 x i8] c"Number of tabs added to output\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"seed\00", align 1
@.str.13 = private unnamed_addr constant [35 x i8] c"Seed value to randomize tests with\00", align 1
@.str.14 = private unnamed_addr constant [53 x i8] c"file\09File to run tests on. Normal tests are not run\0A\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"test/bntest.c\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"ctx = BN_CTX_new()\00", align 1
@ctx = internal global %struct.bignum_ctx* null, align 8
@.str.17 = private unnamed_addr constant [9 x i8] c"test_sub\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"test_div_recip\00", align 1
@.str.19 = private unnamed_addr constant [9 x i8] c"test_mod\00", align 1
@.str.20 = private unnamed_addr constant [18 x i8] c"test_modexp_mont5\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"test_kronecker\00", align 1
@.str.22 = private unnamed_addr constant [10 x i8] c"test_rand\00", align 1
@.str.23 = private unnamed_addr constant [15 x i8] c"test_bn2padded\00", align 1
@.str.24 = private unnamed_addr constant [12 x i8] c"test_dec2bn\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"test_hex2bn\00", align 1
@.str.26 = private unnamed_addr constant [12 x i8] c"test_asc2bn\00", align 1
@.str.27 = private unnamed_addr constant [9 x i8] c"test_mpi\00", align 1
@.str.28 = private unnamed_addr constant [13 x i8] c"test_negzero\00", align 1
@.str.29 = private unnamed_addr constant [12 x i8] c"test_badmod\00", align 1
@.str.30 = private unnamed_addr constant [16 x i8] c"test_expmodzero\00", align 1
@.str.31 = private unnamed_addr constant [15 x i8] c"test_expmodone\00", align 1
@.str.32 = private unnamed_addr constant [16 x i8] c"test_smallprime\00", align 1
@.str.33 = private unnamed_addr constant [10 x i8] c"test_swap\00", align 1
@.str.34 = private unnamed_addr constant [14 x i8] c"test_gf2m_add\00", align 1
@.str.35 = private unnamed_addr constant [14 x i8] c"test_gf2m_mod\00", align 1
@.str.36 = private unnamed_addr constant [14 x i8] c"test_gf2m_mul\00", align 1
@.str.37 = private unnamed_addr constant [14 x i8] c"test_gf2m_sqr\00", align 1
@.str.38 = private unnamed_addr constant [17 x i8] c"test_gf2m_modinv\00", align 1
@.str.39 = private unnamed_addr constant [17 x i8] c"test_gf2m_moddiv\00", align 1
@.str.40 = private unnamed_addr constant [17 x i8] c"test_gf2m_modexp\00", align 1
@.str.41 = private unnamed_addr constant [18 x i8] c"test_gf2m_modsqrt\00", align 1
@.str.42 = private unnamed_addr constant [23 x i8] c"test_gf2m_modsolvequad\00", align 1
@.str.43 = private unnamed_addr constant [14 x i8] c"test_is_prime\00", align 1
@.str.44 = private unnamed_addr constant [15 x i8] c"test_not_prime\00", align 1
@.str.45 = private unnamed_addr constant [15 x i8] c"run_file_tests\00", align 1
@.str.46 = private unnamed_addr constant [13 x i8] c"a = BN_new()\00", align 1
@.str.47 = private unnamed_addr constant [13 x i8] c"b = BN_new()\00", align 1
@.str.48 = private unnamed_addr constant [13 x i8] c"c = BN_new()\00", align 1
@.str.49 = private unnamed_addr constant [17 x i8] c"BN_set_bit(a, i)\00", align 1
@.str.50 = private unnamed_addr constant [2 x i8] c"0\00", align 1
@.str.51 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@rand_neg.neg = internal global i32 0, align 4
@rand_neg.sign = internal global [8 x i32] [i32 0, i32 0, i32 0, i32 1, i32 1, i32 0, i32 1, i32 1], align 16
@.str.52 = private unnamed_addr constant [13 x i8] c"d = BN_new()\00", align 1
@.str.53 = private unnamed_addr constant [13 x i8] c"e = BN_new()\00", align 1
@.str.54 = private unnamed_addr constant [25 x i8] c"recp = BN_RECP_CTX_new()\00", align 1
@.str.55 = private unnamed_addr constant [2 x i8] c"d\00", align 1
@.str.56 = private unnamed_addr constant [2 x i8] c"e\00", align 1
@.str.57 = private unnamed_addr constant [13 x i8] c"p = BN_new()\00", align 1
@.str.58 = private unnamed_addr constant [13 x i8] c"m = BN_new()\00", align 1
@.str.59 = private unnamed_addr constant [13 x i8] c"n = BN_new()\00", align 1
@.str.60 = private unnamed_addr constant [25 x i8] c"mont = BN_MONT_CTX_new()\00", align 1
@.str.61 = private unnamed_addr constant [49 x i8] c"BN_mod_exp_mont_consttime(d, a, p, m, ctx, NULL)\00", align 1
@.str.62 = private unnamed_addr constant [257 x i8] c"7878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878787878\00", align 1
@.str.63 = private unnamed_addr constant [257 x i8] c"095D72C08C097BA488C5E439C655A192EAFB6380073D8C2664668EDDB4060744E16E57FB4EDB9AE10A0CEFCDC28A894F689A128379DB279D48A2E20849D685939B7803BCF46CEBF5C533FB0DD35B080593DE5472E3FE5DB951B8BFF9B4CB8F039CC638A5EE8CDD703719F8000E6A9F63BEED5F2FCD52FF293EA05A251BB4AB81\00", align 1
@.str.64 = private unnamed_addr constant [257 x i8] c"D78AF684E71DB0C39CFF4E64FB9DB567132CB9C50CC98009FEB820B26F2DED9B91B9B5E2B83AE0AE4EB4E0523CA726BFBE969B89FD754F674CE99118C3F2D1C5D81FDC7C54E02B60262B241D53C040E99E45826ECA37A804668E690E1AFC1CA42C9A15D84D4954425F0B7642FC0BD9D7B24E2618D2DCC9B729D944BADACFDDAF\00", align 1
@bn1strings = internal global [17 x i8*] [i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.97, i32 0, i32 0), i8* null], align 16
@bn2strings = internal global [17 x i8*] [i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.99, i32 0, i32 0), i8* null], align 16
@test_modexp_mont5.ahex = internal global [13 x i8*] [i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.74, i32 0, i32 0), i8* null], align 16
@.str.65 = private unnamed_addr constant [55 x i8] c"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\00", align 1
@.str.66 = private unnamed_addr constant [65 x i8] c"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\00", align 1
@.str.67 = private unnamed_addr constant [65 x i8] c"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8FFEADBCFC4DAE7FFF908E92820306B\00", align 1
@.str.68 = private unnamed_addr constant [65 x i8] c"9544D954000000006C0000000000000000000000000000000000000000000000\00", align 1
@.str.69 = private unnamed_addr constant [65 x i8] c"00000000000000000000FF030202FFFFF8FFEBDBCFC4DAE7FFF908E92820306B\00", align 1
@.str.70 = private unnamed_addr constant [65 x i8] c"9544D954000000006C000000FF0302030000000000FFFFFFFFFFFFFFFFFFFFFF\00", align 1
@.str.71 = private unnamed_addr constant [65 x i8] c"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01FC00FF02FFFFFFFF\00", align 1
@.str.72 = private unnamed_addr constant [65 x i8] c"00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FCFD\00", align 1
@.str.73 = private unnamed_addr constant [65 x i8] c"FCFFFFFFFFFF000000000000000000FF0302030000000000FFFFFFFFFFFFFFFF\00", align 1
@.str.74 = private unnamed_addr constant [65 x i8] c"FF00FCFDFDFF030202FF00000000FFFFFFFFFFFFFFFFFF00FCFDFCFFFFFFFFFF\00", align 1
@test_modexp_mont5.nhex = internal global [13 x i8*] [i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.81, i32 0, i32 0), i8* null], align 16
@.str.75 = private unnamed_addr constant [65 x i8] c"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF8F8F8F8000000\00", align 1
@.str.76 = private unnamed_addr constant [65 x i8] c"00000010000000006C0000000000000000000000000000000000000000000000\00", align 1
@.str.77 = private unnamed_addr constant [65 x i8] c"00000000000000000000000000000000000000FFFFFFFFFFFFF8F8F8F8000000\00", align 1
@.str.78 = private unnamed_addr constant [65 x i8] c"00000010000000006C000000000000000000000000FFFFFFFFFFFFFFFFFFFFFF\00", align 1
@.str.79 = private unnamed_addr constant [65 x i8] c"00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\00", align 1
@.str.80 = private unnamed_addr constant [65 x i8] c"FFFFFFFFFFFF000000000000000000000000000000000000FFFFFFFFFFFFFFFF\00", align 1
@.str.81 = private unnamed_addr constant [65 x i8] c"FFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\00", align 1
@.str.82 = private unnamed_addr constant [42 x i8] c"BN_mod_mul_montgomery(c, a, a, mont, ctx)\00", align 1
@.str.83 = private unnamed_addr constant [42 x i8] c"BN_mod_mul_montgomery(d, a, b, mont, ctx)\00", align 1
@.str.84 = private unnamed_addr constant [193 x i8] c"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\00", align 1
@.str.85 = private unnamed_addr constant [129 x i8] c"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\00", align 1
@.str.86 = private unnamed_addr constant [42 x i8] c"BN_mod_mul_montgomery(d, a, a, mont, ctx)\00", align 1
@.str.87 = private unnamed_addr constant [257 x i8] c"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2020202020DF\00", align 1
@.str.88 = private unnamed_addr constant [257 x i8] c"2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020FF2020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020202020\00", align 1
@.str.89 = private unnamed_addr constant [257 x i8] c"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF2020202020FF\00", align 1
@.str.90 = private unnamed_addr constant [257 x i8] c"1FA53F26F8811C58BE0357897AA5E165693230BC9DF5F01DFA6A2D59229EC69D9DE6A89C36E3B6957B22D6FAAD5A3C73AE587B710DBE92E83D3A9A3339A085CBB58F508CA4F837924BB52CC1698B7FDC2FD74362456A595A5B58E38E38E38E38E38E38E38E38E38E38E38E38E38E38E38E38E38E38E38E38E38E38E38E38E38E\00", align 1
@.str.91 = private unnamed_addr constant [36 x i8] c"BN_from_montgomery(e, a, mont, ctx)\00", align 1
@.str.92 = private unnamed_addr constant [49 x i8] c"BN_mod_exp_mont_consttime(d, e, p, m, ctx, NULL)\00", align 1
@.str.93 = private unnamed_addr constant [35 x i8] c"BN_mod_exp_simple(a, e, p, m, ctx)\00", align 1
@.str.94 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.95 = private unnamed_addr constant [65 x i8] c"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000FFFFFFFF00\00", align 1
@.str.96 = private unnamed_addr constant [65 x i8] c"0000000000000000000000000000000000000000000000000000000000000000\00", align 1
@.str.97 = private unnamed_addr constant [65 x i8] c"00000000000000000000000000000000000000000000000000FFFFFFFFFFFFFF\00", align 1
@.str.98 = private unnamed_addr constant [65 x i8] c"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000FFFFFFFF0000000000\00", align 1
@.str.99 = private unnamed_addr constant [65 x i8] c"000000000000000000000000000000000000000000FFFFFFFFFFFFFF00000000\00", align 1
@.str.100 = private unnamed_addr constant [13 x i8] c"r = BN_new()\00", align 1
@.str.101 = private unnamed_addr constant [13 x i8] c"t = BN_new()\00", align 1
@.str.102 = private unnamed_addr constant [50 x i8] c"BN_generate_prime_ex(b, 512, 0, NULL, NULL, NULL)\00", align 1
@.str.103 = private unnamed_addr constant [29 x i8] c"BN_bntest_rand(a, 512, 0, 0)\00", align 1
@.str.104 = private unnamed_addr constant [14 x i8] c"BN_copy(t, b)\00", align 1
@.str.105 = private unnamed_addr constant [18 x i8] c"BN_sub_word(t, 1)\00", align 1
@.str.106 = private unnamed_addr constant [17 x i8] c"BN_rshift1(t, t)\00", align 1
@.str.107 = private unnamed_addr constant [33 x i8] c"BN_mod_exp_recp(r, a, t, b, ctx)\00", align 1
@.str.108 = private unnamed_addr constant [18 x i8] c"BN_add_word(r, 1)\00", align 1
@.str.109 = private unnamed_addr constant [14 x i8] c"BN_ucmp(r, b)\00", align 1
@.str.110 = private unnamed_addr constant [35 x i8] c"Legendre symbol computation failed\00", align 1
@.str.111 = private unnamed_addr constant [36 x i8] c"kronecker = BN_kronecker(a, b, ctx)\00", align 1
@.str.112 = private unnamed_addr constant [3 x i8] c"-1\00", align 1
@.str.113 = private unnamed_addr constant [9 x i8] c"legendre\00", align 1
@.str.114 = private unnamed_addr constant [10 x i8] c"kronecker\00", align 1
@.str.115 = private unnamed_addr constant [14 x i8] c"bn = BN_new()\00", align 1
@.str.116 = private unnamed_addr constant [23 x i8] c"BN_rand(bn, 0, 0 , 0 )\00", align 1
@.str.117 = private unnamed_addr constant [23 x i8] c"BN_rand(bn, 0, 1 , 1 )\00", align 1
@.str.118 = private unnamed_addr constant [23 x i8] c"BN_rand(bn, 1, 0 , 0 )\00", align 1
@.str.119 = private unnamed_addr constant [3 x i8] c"bn\00", align 1
@.str.120 = private unnamed_addr constant [23 x i8] c"BN_rand(bn, 1, 1 , 0 )\00", align 1
@.str.121 = private unnamed_addr constant [24 x i8] c"BN_rand(bn, 1, -1 , 1 )\00", align 1
@.str.122 = private unnamed_addr constant [23 x i8] c"BN_rand(bn, 2, 1 , 0 )\00", align 1
@.str.123 = private unnamed_addr constant [2 x i8] c"3\00", align 1
@.str.124 = private unnamed_addr constant [21 x i8] c"parsedecBN(&bn, \220\22)\00", align 1
@.str.125 = private unnamed_addr constant [2 x i8] c"1\00", align 1
@.str.126 = private unnamed_addr constant [23 x i8] c"parsedecBN(&bn, \22256\22)\00", align 1
@.str.127 = private unnamed_addr constant [4 x i8] c"256\00", align 1
@.str.128 = private unnamed_addr constant [23 x i8] c"parsedecBN(&bn, \22-42\22)\00", align 1
@.str.129 = private unnamed_addr constant [4 x i8] c"-42\00", align 1
@.str.130 = private unnamed_addr constant [3 x i8] c"42\00", align 1
@.str.131 = private unnamed_addr constant [21 x i8] c"parsedecBN(&bn, \221\22)\00", align 1
@.str.132 = private unnamed_addr constant [22 x i8] c"parsedecBN(&bn, \22-0\22)\00", align 1
@.str.133 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.134 = private unnamed_addr constant [3 x i8] c"-0\00", align 1
@.str.135 = private unnamed_addr constant [49 x i8] c"parsedecBN(&bn, \2242trailing garbage is ignored\22)\00", align 1
@.str.136 = private unnamed_addr constant [30 x i8] c"42trailing garbage is ignored\00", align 1
@.str.137 = private unnamed_addr constant [18 x i8] c"parseBN(&bn, \220\22)\00", align 1
@.str.138 = private unnamed_addr constant [20 x i8] c"parseBN(&bn, \22256\22)\00", align 1
@.str.139 = private unnamed_addr constant [6 x i8] c"0x256\00", align 1
@.str.140 = private unnamed_addr constant [20 x i8] c"parseBN(&bn, \22-42\22)\00", align 1
@.str.141 = private unnamed_addr constant [5 x i8] c"0x42\00", align 1
@.str.142 = private unnamed_addr constant [19 x i8] c"parseBN(&bn, \22cb\22)\00", align 1
@.str.143 = private unnamed_addr constant [3 x i8] c"cb\00", align 1
@.str.144 = private unnamed_addr constant [5 x i8] c"0xCB\00", align 1
@.str.145 = private unnamed_addr constant [19 x i8] c"parseBN(&bn, \22-0\22)\00", align 1
@.str.146 = private unnamed_addr constant [47 x i8] c"parseBN(&bn, \22abctrailing garbage is ignored\22)\00", align 1
@.str.147 = private unnamed_addr constant [31 x i8] c"abctrailing garbage is ignored\00", align 1
@.str.148 = private unnamed_addr constant [6 x i8] c"0xabc\00", align 1
@.str.149 = private unnamed_addr constant [20 x i8] c"BN_asc2bn(&bn, \220\22)\00", align 1
@.str.150 = private unnamed_addr constant [22 x i8] c"BN_asc2bn(&bn, \22256\22)\00", align 1
@.str.151 = private unnamed_addr constant [22 x i8] c"BN_asc2bn(&bn, \22-42\22)\00", align 1
@.str.152 = private unnamed_addr constant [25 x i8] c"BN_asc2bn(&bn, \220x1234\22)\00", align 1
@.str.153 = private unnamed_addr constant [7 x i8] c"0x1234\00", align 1
@.str.154 = private unnamed_addr constant [25 x i8] c"BN_asc2bn(&bn, \220X1234\22)\00", align 1
@.str.155 = private unnamed_addr constant [7 x i8] c"0X1234\00", align 1
@.str.156 = private unnamed_addr constant [26 x i8] c"BN_asc2bn(&bn, \22-0xabcd\22)\00", align 1
@.str.157 = private unnamed_addr constant [8 x i8] c"-0xabcd\00", align 1
@.str.158 = private unnamed_addr constant [7 x i8] c"0xabcd\00", align 1
@.str.159 = private unnamed_addr constant [21 x i8] c"BN_asc2bn(&bn, \22-0\22)\00", align 1
@.str.160 = private unnamed_addr constant [49 x i8] c"BN_asc2bn(&bn, \22123trailing garbage is ignored\22)\00", align 1
@.str.161 = private unnamed_addr constant [31 x i8] c"123trailing garbage is ignored\00", align 1
@.str.162 = private unnamed_addr constant [4 x i8] c"123\00", align 1
@kMPITests = internal constant [6 x %struct.mpitest_st] [%struct.mpitest_st { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.171, i32 0, i32 0), i64 4 }, %struct.mpitest_st { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.172, i32 0, i32 0), i64 5 }, %struct.mpitest_st { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.173, i32 0, i32 0), i64 5 }, %struct.mpitest_st { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.174, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.175, i32 0, i32 0), i64 6 }, %struct.mpitest_st { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.176, i32 0, i32 0), i64 6 }, %struct.mpitest_st { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.177, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.178, i32 0, i32 0), i64 6 }], align 16
@.str.163 = private unnamed_addr constant [29 x i8] c"BN_asc2bn(&bn, test->base10)\00", align 1
@.str.164 = private unnamed_addr constant [8 x i8] c"mpi_len\00", align 1
@.str.165 = private unnamed_addr constant [16 x i8] c"sizeof(scratch)\00", align 1
@.str.166 = private unnamed_addr constant [34 x i8] c"mpi_len2 = BN_bn2mpi(bn, scratch)\00", align 1
@.str.167 = private unnamed_addr constant [10 x i8] c"test->mpi\00", align 1
@.str.168 = private unnamed_addr constant [8 x i8] c"scratch\00", align 1
@.str.169 = private unnamed_addr constant [40 x i8] c"bn2 = BN_mpi2bn(scratch, mpi_len, NULL)\00", align 1
@.str.170 = private unnamed_addr constant [4 x i8] c"bn2\00", align 1
@.str.171 = private unnamed_addr constant [5 x i8] zeroinitializer, align 1
@.str.172 = private unnamed_addr constant [6 x i8] c"\00\00\00\01\01\00", align 1
@.str.173 = private unnamed_addr constant [6 x i8] c"\00\00\00\01\81\00", align 1
@.str.174 = private unnamed_addr constant [4 x i8] c"128\00", align 1
@.str.175 = private unnamed_addr constant [7 x i8] c"\00\00\00\02\00\80\00", align 1
@.str.176 = private unnamed_addr constant [7 x i8] c"\00\00\00\02\01\00\00", align 1
@.str.177 = private unnamed_addr constant [5 x i8] c"-256\00", align 1
@.str.178 = private unnamed_addr constant [7 x i8] c"\00\00\00\02\81\00\00", align 1
@.str.179 = private unnamed_addr constant [18 x i8] c"BN_set_word(a, 1)\00", align 1
@.str.180 = private unnamed_addr constant [21 x i8] c"BN_mul(c, a, b, ctx)\00", align 1
@.str.181 = private unnamed_addr constant [21 x i8] c"numerator = BN_new()\00", align 1
@.str.182 = private unnamed_addr constant [23 x i8] c"denominator = BN_new()\00", align 1
@.str.183 = private unnamed_addr constant [26 x i8] c"BN_set_word(numerator, 1)\00", align 1
@.str.184 = private unnamed_addr constant [28 x i8] c"BN_set_word(denominator, 2)\00", align 1
@.str.185 = private unnamed_addr constant [42 x i8] c"BN_div(a, b, numerator, denominator, ctx)\00", align 1
@.str.186 = private unnamed_addr constant [28 x i8] c"BN_set_word(denominator, 1)\00", align 1
@.str.187 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str.188 = private unnamed_addr constant [16 x i8] c"zero = BN_new()\00", align 1
@.str.189 = private unnamed_addr constant [40 x i8] c"BN_div(a, b, BN_value_one(), zero, ctx)\00", align 1
@.str.190 = private unnamed_addr constant [57 x i8] c"BN_mod_mul(a, BN_value_one(), BN_value_one(), zero, ctx)\00", align 1
@.str.191 = private unnamed_addr constant [57 x i8] c"BN_mod_exp(a, BN_value_one(), BN_value_one(), zero, ctx)\00", align 1
@.str.192 = private unnamed_addr constant [68 x i8] c"BN_mod_exp_mont(a, BN_value_one(), BN_value_one(), zero, ctx, NULL)\00", align 1
@.str.193 = private unnamed_addr constant [78 x i8] c"BN_mod_exp_mont_consttime(a, BN_value_one(), BN_value_one(), zero, ctx, NULL)\00", align 1
@.str.194 = private unnamed_addr constant [33 x i8] c"BN_MONT_CTX_set(mont, zero, ctx)\00", align 1
@.str.195 = private unnamed_addr constant [19 x i8] c"BN_set_word(b, 16)\00", align 1
@.str.196 = private unnamed_addr constant [30 x i8] c"BN_MONT_CTX_set(mont, b, ctx)\00", align 1
@.str.197 = private unnamed_addr constant [65 x i8] c"BN_mod_exp_mont(a, BN_value_one(), BN_value_one(), b, ctx, NULL)\00", align 1
@.str.198 = private unnamed_addr constant [75 x i8] c"BN_mod_exp_mont_consttime(a, BN_value_one(), BN_value_one(), b, ctx, NULL)\00", align 1
@.str.199 = private unnamed_addr constant [45 x i8] c"BN_mod_exp(r, a, zero, BN_value_one(), NULL)\00", align 1
@.str.200 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.201 = private unnamed_addr constant [56 x i8] c"BN_mod_exp_mont(r, a, zero, BN_value_one(), NULL, NULL)\00", align 1
@.str.202 = private unnamed_addr constant [66 x i8] c"BN_mod_exp_mont_consttime(r, a, zero, BN_value_one(), NULL, NULL)\00", align 1
@.str.203 = private unnamed_addr constant [62 x i8] c"BN_mod_exp_mont_word(r, 42, zero, BN_value_one(), NULL, NULL)\00", align 1
@.str.204 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str.205 = private unnamed_addr constant [2 x i8] c"m\00", align 1
@.str.206 = private unnamed_addr constant [18 x i8] c"BN_set_word(p, 0)\00", align 1
@.str.207 = private unnamed_addr constant [18 x i8] c"BN_set_word(m, 1)\00", align 1
@.str.208 = private unnamed_addr constant [29 x i8] c"BN_mod_exp(r, a, p, m, NULL)\00", align 1
@.str.209 = private unnamed_addr constant [40 x i8] c"BN_mod_exp_mont(r, a, p, m, NULL, NULL)\00", align 1
@.str.210 = private unnamed_addr constant [50 x i8] c"BN_mod_exp_mont_consttime(r, a, p, m, NULL, NULL)\00", align 1
@.str.211 = private unnamed_addr constant [45 x i8] c"BN_mod_exp_mont_word(r, 1, p, m, NULL, NULL)\00", align 1
@.str.212 = private unnamed_addr constant [36 x i8] c"BN_mod_exp_simple(r, a, p, m, NULL)\00", align 1
@.str.213 = private unnamed_addr constant [34 x i8] c"BN_mod_exp_recp(r, a, p, m, NULL)\00", align 1
@test_smallprime.kBits = internal constant i32 10, align 4
@.str.214 = private unnamed_addr constant [57 x i8] c"BN_generate_prime_ex(r, (int)kBits, 0, NULL, NULL, NULL)\00", align 1
@.str.215 = private unnamed_addr constant [15 x i8] c"BN_num_bits(r)\00", align 1
@.str.216 = private unnamed_addr constant [6 x i8] c"kBits\00", align 1
@.str.217 = private unnamed_addr constant [5 x i8] c"swap\00", align 1
@.str.218 = private unnamed_addr constant [11 x i8] c"cswap true\00", align 1
@.str.219 = private unnamed_addr constant [12 x i8] c"cswap false\00", align 1
@.str.220 = private unnamed_addr constant [12 x i8] c"swap, flags\00", align 1
@.str.221 = private unnamed_addr constant [34 x i8] c"BN_get_flags(b, BN_FLG_CONSTTIME)\00", align 1
@.str.222 = private unnamed_addr constant [34 x i8] c"BN_get_flags(a, BN_FLG_CONSTTIME)\00", align 1
@.str.223 = private unnamed_addr constant [18 x i8] c"cswap true, flags\00", align 1
@.str.224 = private unnamed_addr constant [19 x i8] c"cswap false, flags\00", align 1
@.str.225 = private unnamed_addr constant [20 x i8] c"unexpected %s value\00", align 1
@.str.226 = private unnamed_addr constant [9 x i8] c"expected\00", align 1
@.str.227 = private unnamed_addr constant [7 x i8] c"actual\00", align 1
@.str.228 = private unnamed_addr constant [67 x i8] c"(BN_is_odd(a) && BN_is_odd(c)) || (!BN_is_odd(a) && !BN_is_odd(c))\00", align 1
@.str.229 = private unnamed_addr constant [16 x i8] c"b[0] = BN_new()\00", align 1
@.str.230 = private unnamed_addr constant [16 x i8] c"b[1] = BN_new()\00", align 1
@p0 = internal global [6 x i32] [i32 163, i32 7, i32 6, i32 3, i32 0, i32 -1], align 16
@p1 = internal global [4 x i32] [i32 193, i32 15, i32 0, i32 -1], align 16
@.str.231 = private unnamed_addr constant [13 x i8] c"f = BN_new()\00", align 1
@.str.232 = private unnamed_addr constant [13 x i8] c"g = BN_new()\00", align 1
@.str.233 = private unnamed_addr constant [13 x i8] c"h = BN_new()\00", align 1
@.str.234 = private unnamed_addr constant [2 x i8] c"f\00", align 1
@.str.235 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.236 = private unnamed_addr constant [43 x i8] c"%d tests found no roots; probably an error\00", align 1
@.str.237 = private unnamed_addr constant [26 x i8] c"BN_set_word(r, primes[i])\00", align 1
@primes = internal global [5 x i32] [i32 2, i32 3, i32 5, i32 7, i32 17863], align 16
@.str.238 = private unnamed_addr constant [48 x i8] c"BN_is_prime_fasttest_ex(r, 1, ctx, trial, NULL)\00", align 1
@.str.239 = private unnamed_addr constant [30 x i8] c"BN_set_word(r, not_primes[i])\00", align 1
@not_primes = internal global [4 x i32] [i32 -1, i32 0, i32 1, i32 4], align 16
@.str.240 = private unnamed_addr constant [31 x i8] c"s = OPENSSL_zalloc(sizeof(*s))\00", align 1
@file_test_run.filetests = internal constant [11 x %struct.filetest_st] [%struct.filetest_st { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.241, i32 0, i32 0), i32 (%struct.stanza_st*)* @file_sum }, %struct.filetest_st { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.242, i32 0, i32 0), i32 (%struct.stanza_st*)* @file_lshift1 }, %struct.filetest_st { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.243, i32 0, i32 0), i32 (%struct.stanza_st*)* @file_lshift }, %struct.filetest_st { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.244, i32 0, i32 0), i32 (%struct.stanza_st*)* @file_rshift }, %struct.filetest_st { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.245, i32 0, i32 0), i32 (%struct.stanza_st*)* @file_square }, %struct.filetest_st { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.246, i32 0, i32 0), i32 (%struct.stanza_st*)* @file_product }, %struct.filetest_st { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.247, i32 0, i32 0), i32 (%struct.stanza_st*)* @file_quotient }, %struct.filetest_st { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.248, i32 0, i32 0), i32 (%struct.stanza_st*)* @file_modmul }, %struct.filetest_st { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.249, i32 0, i32 0), i32 (%struct.stanza_st*)* @file_modexp }, %struct.filetest_st { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.250, i32 0, i32 0), i32 (%struct.stanza_st*)* @file_exp }, %struct.filetest_st { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.251, i32 0, i32 0), i32 (%struct.stanza_st*)* @file_modsqrt }], align 16
@.str.241 = private unnamed_addr constant [4 x i8] c"Sum\00", align 1
@.str.242 = private unnamed_addr constant [8 x i8] c"LShift1\00", align 1
@.str.243 = private unnamed_addr constant [7 x i8] c"LShift\00", align 1
@.str.244 = private unnamed_addr constant [7 x i8] c"RShift\00", align 1
@.str.245 = private unnamed_addr constant [7 x i8] c"Square\00", align 1
@.str.246 = private unnamed_addr constant [8 x i8] c"Product\00", align 1
@.str.247 = private unnamed_addr constant [9 x i8] c"Quotient\00", align 1
@.str.248 = private unnamed_addr constant [7 x i8] c"ModMul\00", align 1
@.str.249 = private unnamed_addr constant [7 x i8] c"ModExp\00", align 1
@.str.250 = private unnamed_addr constant [4 x i8] c"Exp\00", align 1
@.str.251 = private unnamed_addr constant [8 x i8] c"ModSqrt\00", align 1
@.str.252 = private unnamed_addr constant [22 x i8] c"%s:%d: Failed %s test\00", align 1
@.str.253 = private unnamed_addr constant [20 x i8] c"%s:%d: Unknown test\00", align 1
@.str.254 = private unnamed_addr constant [18 x i8] c"a = getBN(s, \22A\22)\00", align 1
@.str.255 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.256 = private unnamed_addr constant [18 x i8] c"b = getBN(s, \22B\22)\00", align 1
@.str.257 = private unnamed_addr constant [2 x i8] c"B\00", align 1
@.str.258 = private unnamed_addr constant [22 x i8] c"sum = getBN(s, \22Sum\22)\00", align 1
@.str.259 = private unnamed_addr constant [15 x i8] c"ret = BN_new()\00", align 1
@.str.260 = private unnamed_addr constant [18 x i8] c"BN_add(ret, a, b)\00", align 1
@.str.261 = private unnamed_addr constant [6 x i8] c"A + B\00", align 1
@.str.262 = private unnamed_addr constant [20 x i8] c"BN_sub(ret, sum, a)\00", align 1
@.str.263 = private unnamed_addr constant [8 x i8] c"Sum - A\00", align 1
@.str.264 = private unnamed_addr constant [20 x i8] c"BN_sub(ret, sum, b)\00", align 1
@.str.265 = private unnamed_addr constant [8 x i8] c"Sum - B\00", align 1
@.str.266 = private unnamed_addr constant [16 x i8] c"BN_copy(ret, a)\00", align 1
@.str.267 = private unnamed_addr constant [20 x i8] c"BN_add(ret, ret, b)\00", align 1
@.str.268 = private unnamed_addr constant [15 x i8] c"A + B (r is a)\00", align 1
@.str.269 = private unnamed_addr constant [16 x i8] c"BN_copy(ret, b)\00", align 1
@.str.270 = private unnamed_addr constant [20 x i8] c"BN_add(ret, a, ret)\00", align 1
@.str.271 = private unnamed_addr constant [15 x i8] c"A + B (r is b)\00", align 1
@.str.272 = private unnamed_addr constant [18 x i8] c"BN_copy(ret, sum)\00", align 1
@.str.273 = private unnamed_addr constant [20 x i8] c"BN_sub(ret, ret, a)\00", align 1
@.str.274 = private unnamed_addr constant [17 x i8] c"Sum - A (r is a)\00", align 1
@.str.275 = private unnamed_addr constant [22 x i8] c"BN_sub(ret, sum, ret)\00", align 1
@.str.276 = private unnamed_addr constant [17 x i8] c"Sum - A (r is b)\00", align 1
@.str.277 = private unnamed_addr constant [20 x i8] c"BN_sub(ret, ret, b)\00", align 1
@.str.278 = private unnamed_addr constant [17 x i8] c"Sum - B (r is a)\00", align 1
@.str.279 = private unnamed_addr constant [17 x i8] c"Sum - B (r is b)\00", align 1
@.str.280 = private unnamed_addr constant [19 x i8] c"BN_uadd(ret, a, b)\00", align 1
@.str.281 = private unnamed_addr constant [7 x i8] c"A +u B\00", align 1
@.str.282 = private unnamed_addr constant [21 x i8] c"BN_usub(ret, sum, a)\00", align 1
@.str.283 = private unnamed_addr constant [9 x i8] c"Sum -u A\00", align 1
@.str.284 = private unnamed_addr constant [21 x i8] c"BN_usub(ret, sum, b)\00", align 1
@.str.285 = private unnamed_addr constant [9 x i8] c"Sum -u B\00", align 1
@.str.286 = private unnamed_addr constant [21 x i8] c"BN_uadd(ret, ret, b)\00", align 1
@.str.287 = private unnamed_addr constant [16 x i8] c"A +u B (r is a)\00", align 1
@.str.288 = private unnamed_addr constant [21 x i8] c"BN_uadd(ret, a, ret)\00", align 1
@.str.289 = private unnamed_addr constant [16 x i8] c"A +u B (r is b)\00", align 1
@.str.290 = private unnamed_addr constant [21 x i8] c"BN_usub(ret, ret, a)\00", align 1
@.str.291 = private unnamed_addr constant [18 x i8] c"Sum -u A (r is a)\00", align 1
@.str.292 = private unnamed_addr constant [23 x i8] c"BN_usub(ret, sum, ret)\00", align 1
@.str.293 = private unnamed_addr constant [18 x i8] c"Sum -u A (r is b)\00", align 1
@.str.294 = private unnamed_addr constant [21 x i8] c"BN_usub(ret, ret, b)\00", align 1
@.str.295 = private unnamed_addr constant [18 x i8] c"Sum -u B (r is a)\00", align 1
@.str.296 = private unnamed_addr constant [18 x i8] c"Sum -u B (r is b)\00", align 1
@.str.297 = private unnamed_addr constant [25 x i8] c"BN_add_word(ret, b_word)\00", align 1
@.str.298 = private unnamed_addr constant [13 x i8] c"A + B (word)\00", align 1
@.str.299 = private unnamed_addr constant [25 x i8] c"BN_sub_word(ret, b_word)\00", align 1
@.str.300 = private unnamed_addr constant [15 x i8] c"Sum - B (word)\00", align 1
@.str.301 = private unnamed_addr constant [21 x i8] c"%s:%d: Can't find %s\00", align 1
@.str.302 = private unnamed_addr constant [22 x i8] c"Could not decode '%s'\00", align 1
@.str.303 = private unnamed_addr constant [30 x i8] c"lshift1 = getBN(s, \22LShift1\22)\00", align 1
@.str.304 = private unnamed_addr constant [15 x i8] c"two = BN_new()\00", align 1
@.str.305 = private unnamed_addr constant [21 x i8] c"remainder = BN_new()\00", align 1
@.str.306 = private unnamed_addr constant [20 x i8] c"BN_set_word(two, 2)\00", align 1
@.str.307 = private unnamed_addr constant [18 x i8] c"BN_add(ret, a, a)\00", align 1
@.str.308 = private unnamed_addr constant [6 x i8] c"A + A\00", align 1
@.str.309 = private unnamed_addr constant [25 x i8] c"BN_mul(ret, a, two, ctx)\00", align 1
@.str.310 = private unnamed_addr constant [6 x i8] c"A * 2\00", align 1
@.str.311 = private unnamed_addr constant [42 x i8] c"BN_div(ret, remainder, lshift1, two, ctx)\00", align 1
@.str.312 = private unnamed_addr constant [12 x i8] c"LShift1 / 2\00", align 1
@.str.313 = private unnamed_addr constant [12 x i8] c"LShift1 % 2\00", align 1
@.str.314 = private unnamed_addr constant [19 x i8] c"BN_lshift1(ret, a)\00", align 1
@.str.315 = private unnamed_addr constant [7 x i8] c"A << 1\00", align 1
@.str.316 = private unnamed_addr constant [25 x i8] c"BN_rshift1(ret, lshift1)\00", align 1
@.str.317 = private unnamed_addr constant [12 x i8] c"LShift >> 1\00", align 1
@.str.318 = private unnamed_addr constant [23 x i8] c"BN_set_bit(lshift1, 0)\00", align 1
@.str.319 = private unnamed_addr constant [38 x i8] c"BN_div(ret, NULL , lshift1, two, ctx)\00", align 1
@.str.320 = private unnamed_addr constant [18 x i8] c"(LShift1 | 1) / 2\00", align 1
@.str.321 = private unnamed_addr constant [18 x i8] c"(LShift | 1) >> 1\00", align 1
@.str.322 = private unnamed_addr constant [28 x i8] c"lshift = getBN(s, \22LShift\22)\00", align 1
@.str.323 = private unnamed_addr constant [2 x i8] c"N\00", align 1
@.str.324 = private unnamed_addr constant [21 x i8] c"BN_lshift(ret, a, n)\00", align 1
@.str.325 = private unnamed_addr constant [7 x i8] c"A << N\00", align 1
@.str.326 = private unnamed_addr constant [26 x i8] c"BN_rshift(ret, lshift, n)\00", align 1
@.str.327 = private unnamed_addr constant [7 x i8] c"A >> N\00", align 1
@.str.328 = private unnamed_addr constant [26 x i8] c"ret = getBN(s, attribute)\00", align 1
@.str.329 = private unnamed_addr constant [24 x i8] c"word = BN_get_word(ret)\00", align 1
@.str.330 = private unnamed_addr constant [8 x i8] c"INT_MAX\00", align 1
@.str.331 = private unnamed_addr constant [28 x i8] c"rshift = getBN(s, \22RShift\22)\00", align 1
@.str.332 = private unnamed_addr constant [21 x i8] c"BN_rshift(ret, a, n)\00", align 1
@.str.333 = private unnamed_addr constant [19 x i8] c"BN_rshift1(ret, a)\00", align 1
@.str.334 = private unnamed_addr constant [17 x i8] c"A >> 1 (rshift1)\00", align 1
@.str.335 = private unnamed_addr constant [28 x i8] c"square = getBN(s, \22Square\22)\00", align 1
@.str.336 = private unnamed_addr constant [20 x i8] c"BN_sqr(ret, a, ctx)\00", align 1
@.str.337 = private unnamed_addr constant [4 x i8] c"A^2\00", align 1
@.str.338 = private unnamed_addr constant [23 x i8] c"BN_mul(ret, a, a, ctx)\00", align 1
@.str.339 = private unnamed_addr constant [6 x i8] c"A * A\00", align 1
@.str.340 = private unnamed_addr constant [39 x i8] c"BN_div(ret, remainder, square, a, ctx)\00", align 1
@.str.341 = private unnamed_addr constant [11 x i8] c"Square / A\00", align 1
@.str.342 = private unnamed_addr constant [11 x i8] c"Square % A\00", align 1
@.str.343 = private unnamed_addr constant [30 x i8] c"product = getBN(s, \22Product\22)\00", align 1
@.str.344 = private unnamed_addr constant [23 x i8] c"BN_mul(ret, a, b, ctx)\00", align 1
@.str.345 = private unnamed_addr constant [6 x i8] c"A * B\00", align 1
@.str.346 = private unnamed_addr constant [40 x i8] c"BN_div(ret, remainder, product, a, ctx)\00", align 1
@.str.347 = private unnamed_addr constant [12 x i8] c"Product / A\00", align 1
@.str.348 = private unnamed_addr constant [12 x i8] c"Product % A\00", align 1
@.str.349 = private unnamed_addr constant [40 x i8] c"BN_div(ret, remainder, product, b, ctx)\00", align 1
@.str.350 = private unnamed_addr constant [12 x i8] c"Product / B\00", align 1
@.str.351 = private unnamed_addr constant [12 x i8] c"Product % B\00", align 1
@.str.352 = private unnamed_addr constant [32 x i8] c"quotient = getBN(s, \22Quotient\22)\00", align 1
@.str.353 = private unnamed_addr constant [34 x i8] c"remainder = getBN(s, \22Remainder\22)\00", align 1
@.str.354 = private unnamed_addr constant [10 x i8] c"Remainder\00", align 1
@.str.355 = private unnamed_addr constant [16 x i8] c"ret2 = BN_new()\00", align 1
@.str.356 = private unnamed_addr constant [17 x i8] c"nnmod = BN_new()\00", align 1
@.str.357 = private unnamed_addr constant [29 x i8] c"BN_div(ret, ret2, a, b, ctx)\00", align 1
@.str.358 = private unnamed_addr constant [6 x i8] c"A / B\00", align 1
@.str.359 = private unnamed_addr constant [6 x i8] c"A % B\00", align 1
@.str.360 = private unnamed_addr constant [30 x i8] c"BN_mul(ret, quotient, b, ctx)\00", align 1
@.str.361 = private unnamed_addr constant [28 x i8] c"BN_add(ret, ret, remainder)\00", align 1
@.str.362 = private unnamed_addr constant [25 x i8] c"Quotient * B + Remainder\00", align 1
@.str.363 = private unnamed_addr constant [27 x i8] c"Got A %% B (word) mismatch\00", align 1
@.str.364 = private unnamed_addr constant [13 x i8] c"A / B (word)\00", align 1
@.str.365 = private unnamed_addr constant [26 x i8] c"BN_copy(nnmod, remainder)\00", align 1
@.str.366 = private unnamed_addr constant [24 x i8] c"BN_add(nnmod, nnmod, b)\00", align 1
@.str.367 = private unnamed_addr constant [25 x i8] c"BN_nnmod(ret, a, b, ctx)\00", align 1
@.str.368 = private unnamed_addr constant [21 x i8] c"A % B (non-negative)\00", align 1
@.str.369 = private unnamed_addr constant [18 x i8] c"m = getBN(s, \22M\22)\00", align 1
@.str.370 = private unnamed_addr constant [2 x i8] c"M\00", align 1
@.str.371 = private unnamed_addr constant [29 x i8] c"mod_mul = getBN(s, \22ModMul\22)\00", align 1
@.str.372 = private unnamed_addr constant [30 x i8] c"BN_mod_mul(ret, a, b, m, ctx)\00", align 1
@.str.373 = private unnamed_addr constant [14 x i8] c"A * B (mod M)\00", align 1
@.str.374 = private unnamed_addr constant [30 x i8] c"BN_MONT_CTX_set(mont, m, ctx)\00", align 1
@.str.375 = private unnamed_addr constant [27 x i8] c"BN_nnmod(a_tmp, a, m, ctx)\00", align 1
@.str.376 = private unnamed_addr constant [27 x i8] c"BN_nnmod(b_tmp, b, m, ctx)\00", align 1
@.str.377 = private unnamed_addr constant [42 x i8] c"BN_to_montgomery(a_tmp, a_tmp, mont, ctx)\00", align 1
@.str.378 = private unnamed_addr constant [42 x i8] c"BN_to_montgomery(b_tmp, b_tmp, mont, ctx)\00", align 1
@.str.379 = private unnamed_addr constant [52 x i8] c"BN_mod_mul_montgomery(ret, a_tmp, b_tmp, mont, ctx)\00", align 1
@.str.380 = private unnamed_addr constant [40 x i8] c"BN_from_montgomery(ret, ret, mont, ctx)\00", align 1
@.str.381 = private unnamed_addr constant [21 x i8] c"A * B (mod M) (mont)\00", align 1
@.str.382 = private unnamed_addr constant [18 x i8] c"e = getBN(s, \22E\22)\00", align 1
@.str.383 = private unnamed_addr constant [2 x i8] c"E\00", align 1
@.str.384 = private unnamed_addr constant [29 x i8] c"mod_exp = getBN(s, \22ModExp\22)\00", align 1
@.str.385 = private unnamed_addr constant [30 x i8] c"BN_mod_exp(ret, a, e, m, ctx)\00", align 1
@.str.386 = private unnamed_addr constant [14 x i8] c"A ^ E (mod M)\00", align 1
@.str.387 = private unnamed_addr constant [41 x i8] c"BN_mod_exp_mont(ret, a, e, m, ctx, NULL)\00", align 1
@.str.388 = private unnamed_addr constant [21 x i8] c"A ^ E (mod M) (mont)\00", align 1
@.str.389 = private unnamed_addr constant [51 x i8] c"BN_mod_exp_mont_consttime(ret, a, e, m, ctx, NULL)\00", align 1
@.str.390 = private unnamed_addr constant [26 x i8] c"A ^ E (mod M) (mont const\00", align 1
@.str.391 = private unnamed_addr constant [13 x i8] c"050505050505\00", align 1
@.str.392 = private unnamed_addr constant [3 x i8] c"02\00", align 1
@.str.393 = private unnamed_addr constant [379 x i8] c"414141414141414141414127414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\00", align 1
@.str.394 = private unnamed_addr constant [28 x i8] c"BN_mod_exp(d, a, b, c, ctx)\00", align 1
@.str.395 = private unnamed_addr constant [21 x i8] c"BN_mul(e, a, a, ctx)\00", align 1
@.str.396 = private unnamed_addr constant [22 x i8] c"exp = getBN(s, \22Exp\22)\00", align 1
@.str.397 = private unnamed_addr constant [23 x i8] c"BN_exp(ret, a, e, ctx)\00", align 1
@.str.398 = private unnamed_addr constant [6 x i8] c"A ^ E\00", align 1
@.str.399 = private unnamed_addr constant [18 x i8] c"p = getBN(s, \22P\22)\00", align 1
@.str.400 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@.str.401 = private unnamed_addr constant [31 x i8] c"mod_sqrt = getBN(s, \22ModSqrt\22)\00", align 1
@.str.402 = private unnamed_addr constant [28 x i8] c"BN_mod_sqrt(ret, a, p, ctx)\00", align 1
@.str.403 = private unnamed_addr constant [21 x i8] c"BN_sub(ret2, p, ret)\00", align 1
@.str.404 = private unnamed_addr constant [16 x i8] c"sqrt(A) (mod P)\00", align 1

; Function Attrs: nounwind uwtable
define %struct.options_st* @test_get_options() #0 !dbg !9 {
entry:
  ret %struct.options_st* getelementptr inbounds ([10 x %struct.options_st], [10 x %struct.options_st]* @test_get_options.test_options, i32 0, i32 0), !dbg !131
}

; Function Attrs: nounwind uwtable
define i32 @setup_tests() #0 !dbg !132 {
entry:
  %retval = alloca i32, align 4
  %n = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %n, metadata !133, metadata !134), !dbg !135
  %call = call i64 @test_get_argument_count(), !dbg !136
  %conv = trunc i64 %call to i32, !dbg !136
  store i32 %conv, i32* %n, align 4, !dbg !135
  %call1 = call %struct.bignum_ctx* @BN_CTX_new(), !dbg !137
  store %struct.bignum_ctx* %call1, %struct.bignum_ctx** @ctx, align 8, !dbg !139
  %0 = bitcast %struct.bignum_ctx* %call1 to i8*, !dbg !140
  %call2 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2280, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i32 0, i32 0), i8* %0), !dbg !141
  %tobool = icmp ne i32 %call2, 0, !dbg !143
  br i1 %tobool, label %if.end, label %if.then, !dbg !144

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !145
  br label %return, !dbg !145

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %n, align 4, !dbg !146
  %cmp = icmp eq i32 %1, 0, !dbg !148
  br i1 %cmp, label %if.then4, label %if.else, !dbg !149

if.then4:                                         ; preds = %if.end
  call void @add_test(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0), i32 ()* @test_sub), !dbg !150
  call void @add_test(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0), i32 ()* @test_div_recip), !dbg !152
  call void @add_test(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.19, i32 0, i32 0), i32 ()* @test_mod), !dbg !153
  call void @add_test(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.20, i32 0, i32 0), i32 ()* @test_modexp_mont5), !dbg !154
  call void @add_test(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0), i32 ()* @test_kronecker), !dbg !155
  call void @add_test(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.22, i32 0, i32 0), i32 ()* @test_rand), !dbg !156
  call void @add_test(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23, i32 0, i32 0), i32 ()* @test_bn2padded), !dbg !157
  call void @add_test(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i32 0, i32 0), i32 ()* @test_dec2bn), !dbg !158
  call void @add_test(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i32 ()* @test_hex2bn), !dbg !159
  call void @add_test(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i32 0, i32 0), i32 ()* @test_asc2bn), !dbg !160
  call void @add_all_tests(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27, i32 0, i32 0), i32 (i32)* @test_mpi, i32 6, i32 1), !dbg !161
  call void @add_test(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.28, i32 0, i32 0), i32 ()* @test_negzero), !dbg !162
  call void @add_test(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i32 0, i32 0), i32 ()* @test_badmod), !dbg !163
  call void @add_test(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i32 0, i32 0), i32 ()* @test_expmodzero), !dbg !164
  call void @add_test(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0), i32 ()* @test_expmodone), !dbg !165
  call void @add_test(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.32, i32 0, i32 0), i32 ()* @test_smallprime), !dbg !166
  call void @add_test(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.33, i32 0, i32 0), i32 ()* @test_swap), !dbg !167
  call void @add_test(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.34, i32 0, i32 0), i32 ()* @test_gf2m_add), !dbg !168
  call void @add_test(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.35, i32 0, i32 0), i32 ()* @test_gf2m_mod), !dbg !169
  call void @add_test(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.36, i32 0, i32 0), i32 ()* @test_gf2m_mul), !dbg !170
  call void @add_test(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.37, i32 0, i32 0), i32 ()* @test_gf2m_sqr), !dbg !171
  call void @add_test(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.38, i32 0, i32 0), i32 ()* @test_gf2m_modinv), !dbg !172
  call void @add_test(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.39, i32 0, i32 0), i32 ()* @test_gf2m_moddiv), !dbg !173
  call void @add_test(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.40, i32 0, i32 0), i32 ()* @test_gf2m_modexp), !dbg !174
  call void @add_test(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i32 0, i32 0), i32 ()* @test_gf2m_modsqrt), !dbg !175
  call void @add_test(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.42, i32 0, i32 0), i32 ()* @test_gf2m_modsolvequad), !dbg !176
  call void @add_all_tests(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.43, i32 0, i32 0), i32 (i32)* @test_is_prime, i32 5, i32 1), !dbg !177
  call void @add_all_tests(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.44, i32 0, i32 0), i32 (i32)* @test_not_prime, i32 4, i32 1), !dbg !178
  br label %if.end5, !dbg !179

if.else:                                          ; preds = %if.end
  %2 = load i32, i32* %n, align 4, !dbg !180
  call void @add_all_tests(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.45, i32 0, i32 0), i32 (i32)* @run_file_tests, i32 %2, i32 1), !dbg !182
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then4
  store i32 1, i32* %retval, align 4, !dbg !183
  br label %return, !dbg !183

return:                                           ; preds = %if.end5, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !184
  ret i32 %3, !dbg !184
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i64 @test_get_argument_count() #2

declare i32 @test_ptr(i8*, i32, i8*, i8*) #2

declare %struct.bignum_ctx* @BN_CTX_new() #2

declare void @add_test(i8*, i32 ()*) #2

; Function Attrs: nounwind uwtable
define internal i32 @test_sub() #0 !dbg !185 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca %struct.bignum_st*, align 8
  %c = alloca %struct.bignum_st*, align 8
  %i = alloca i32, align 4
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !186, metadata !134), !dbg !190
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !190
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b, metadata !191, metadata !134), !dbg !192
  store %struct.bignum_st* null, %struct.bignum_st** %b, align 8, !dbg !192
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !193, metadata !134), !dbg !194
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !194
  call void @llvm.dbg.declare(metadata i32* %i, metadata !195, metadata !134), !dbg !196
  call void @llvm.dbg.declare(metadata i32* %st, metadata !197, metadata !134), !dbg !198
  store i32 0, i32* %st, align 4, !dbg !198
  %call = call %struct.bignum_st* @BN_new(), !dbg !199
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !201
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !202
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 231, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %0), !dbg !203
  %tobool = icmp ne i32 %call1, 0, !dbg !205
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !206

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !207
  store %struct.bignum_st* %call2, %struct.bignum_st** %b, align 8, !dbg !209
  %1 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !210
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 232, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i32 0, i32 0), i8* %1), !dbg !211
  %tobool4 = icmp ne i32 %call3, 0, !dbg !213
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !214

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !215
  store %struct.bignum_st* %call6, %struct.bignum_st** %c, align 8, !dbg !216
  %2 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !217
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 233, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %2), !dbg !218
  %tobool8 = icmp ne i32 %call7, 0, !dbg !219
  br i1 %tobool8, label %if.end, label %if.then, !dbg !220

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !222

if.end:                                           ; preds = %lor.lhs.false5
  store i32 0, i32* %i, align 4, !dbg !223
  br label %for.cond, !dbg !225

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4, !dbg !226
  %cmp = icmp slt i32 %3, 150, !dbg !229
  br i1 %cmp, label %for.body, label %for.end, !dbg !230

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %i, align 4, !dbg !231
  %cmp9 = icmp slt i32 %4, 50, !dbg !234
  br i1 %cmp9, label %if.then10, label %if.else, !dbg !235

if.then10:                                        ; preds = %for.body
  %5 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !236
  %call11 = call i32 @BN_bntest_rand(%struct.bignum_st* %5, i32 512, i32 0, i32 0), !dbg !238
  %6 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !239
  %7 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !240
  %call12 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %6, %struct.bignum_st* %7), !dbg !241
  %8 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !242
  %9 = load i32, i32* %i, align 4, !dbg !244
  %call13 = call i32 @BN_set_bit(%struct.bignum_st* %8, i32 %9), !dbg !245
  %call14 = call i32 @test_int_ne(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 240, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i32 0, i32 0), i32 %call13, i32 0), !dbg !246
  %tobool15 = icmp ne i32 %call14, 0, !dbg !248
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !249

if.then16:                                        ; preds = %if.then10
  br label %err, !dbg !250

if.end17:                                         ; preds = %if.then10
  %10 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !251
  %11 = load i32, i32* %i, align 4, !dbg !252
  %conv = sext i32 %11 to i64, !dbg !252
  %call18 = call i32 @BN_add_word(%struct.bignum_st* %10, i64 %conv), !dbg !253
  br label %if.end22, !dbg !254

if.else:                                          ; preds = %for.body
  %12 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !255
  %13 = load i32, i32* %i, align 4, !dbg !257
  %add = add nsw i32 400, %13, !dbg !258
  %sub = sub nsw i32 %add, 50, !dbg !259
  %call19 = call i32 @BN_bntest_rand(%struct.bignum_st* %12, i32 %sub, i32 0, i32 0), !dbg !260
  %14 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !261
  %call20 = call i32 @rand_neg(), !dbg !262
  call void @BN_set_negative(%struct.bignum_st* %14, i32 %call20), !dbg !263
  %15 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !265
  %call21 = call i32 @rand_neg(), !dbg !266
  call void @BN_set_negative(%struct.bignum_st* %15, i32 %call21), !dbg !267
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.end17
  %16 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !268
  %17 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !269
  %18 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !270
  %call23 = call i32 @BN_sub(%struct.bignum_st* %16, %struct.bignum_st* %17, %struct.bignum_st* %18), !dbg !271
  %19 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !272
  %20 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !273
  %21 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !274
  %call24 = call i32 @BN_add(%struct.bignum_st* %19, %struct.bignum_st* %20, %struct.bignum_st* %21), !dbg !275
  %22 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !276
  %23 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !277
  %24 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !278
  %call25 = call i32 @BN_sub(%struct.bignum_st* %22, %struct.bignum_st* %23, %struct.bignum_st* %24), !dbg !279
  %25 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !280
  %call26 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 251, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.51, i32 0, i32 0), %struct.bignum_st* %25), !dbg !282
  %tobool27 = icmp ne i32 %call26, 0, !dbg !282
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !283

if.then28:                                        ; preds = %if.end22
  br label %err, !dbg !284

if.end29:                                         ; preds = %if.end22
  br label %for.inc, !dbg !285

for.inc:                                          ; preds = %if.end29
  %26 = load i32, i32* %i, align 4, !dbg !286
  %inc = add nsw i32 %26, 1, !dbg !286
  store i32 %inc, i32* %i, align 4, !dbg !286
  br label %for.cond, !dbg !288, !llvm.loop !289

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %st, align 4, !dbg !291
  br label %err, !dbg !292

err:                                              ; preds = %for.end, %if.then28, %if.then16, %if.then
  %27 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !293
  call void @BN_free(%struct.bignum_st* %27), !dbg !294
  %28 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !295
  call void @BN_free(%struct.bignum_st* %28), !dbg !296
  %29 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !297
  call void @BN_free(%struct.bignum_st* %29), !dbg !298
  %30 = load i32, i32* %st, align 4, !dbg !299
  ret i32 %30, !dbg !300
}

; Function Attrs: nounwind uwtable
define internal i32 @test_div_recip() #0 !dbg !301 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca %struct.bignum_st*, align 8
  %c = alloca %struct.bignum_st*, align 8
  %d = alloca %struct.bignum_st*, align 8
  %e = alloca %struct.bignum_st*, align 8
  %recp = alloca %struct.bn_recp_ctx_st*, align 8
  %st = alloca i32, align 4
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !302, metadata !134), !dbg !303
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !303
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b, metadata !304, metadata !134), !dbg !305
  store %struct.bignum_st* null, %struct.bignum_st** %b, align 8, !dbg !305
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !306, metadata !134), !dbg !307
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !307
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %d, metadata !308, metadata !134), !dbg !309
  store %struct.bignum_st* null, %struct.bignum_st** %d, align 8, !dbg !309
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %e, metadata !310, metadata !134), !dbg !311
  store %struct.bignum_st* null, %struct.bignum_st** %e, align 8, !dbg !311
  call void @llvm.dbg.declare(metadata %struct.bn_recp_ctx_st** %recp, metadata !312, metadata !134), !dbg !316
  store %struct.bn_recp_ctx_st* null, %struct.bn_recp_ctx_st** %recp, align 8, !dbg !316
  call void @llvm.dbg.declare(metadata i32* %st, metadata !317, metadata !134), !dbg !318
  store i32 0, i32* %st, align 4, !dbg !318
  call void @llvm.dbg.declare(metadata i32* %i, metadata !319, metadata !134), !dbg !320
  %call = call %struct.bignum_st* @BN_new(), !dbg !321
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !323
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !324
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 269, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %0), !dbg !325
  %tobool = icmp ne i32 %call1, 0, !dbg !327
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !328

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !329
  store %struct.bignum_st* %call2, %struct.bignum_st** %b, align 8, !dbg !331
  %1 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !332
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 270, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i32 0, i32 0), i8* %1), !dbg !333
  %tobool4 = icmp ne i32 %call3, 0, !dbg !335
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !336

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !337
  store %struct.bignum_st* %call6, %struct.bignum_st** %c, align 8, !dbg !338
  %2 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !339
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 271, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %2), !dbg !340
  %tobool8 = icmp ne i32 %call7, 0, !dbg !341
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !342

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %call10 = call %struct.bignum_st* @BN_new(), !dbg !343
  store %struct.bignum_st* %call10, %struct.bignum_st** %d, align 8, !dbg !344
  %3 = bitcast %struct.bignum_st* %call10 to i8*, !dbg !345
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 272, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i8* %3), !dbg !346
  %tobool12 = icmp ne i32 %call11, 0, !dbg !347
  br i1 %tobool12, label %lor.lhs.false13, label %if.then, !dbg !348

lor.lhs.false13:                                  ; preds = %lor.lhs.false9
  %call14 = call %struct.bignum_st* @BN_new(), !dbg !349
  store %struct.bignum_st* %call14, %struct.bignum_st** %e, align 8, !dbg !350
  %4 = bitcast %struct.bignum_st* %call14 to i8*, !dbg !351
  %call15 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 273, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i32 0, i32 0), i8* %4), !dbg !352
  %tobool16 = icmp ne i32 %call15, 0, !dbg !353
  br i1 %tobool16, label %lor.lhs.false17, label %if.then, !dbg !354

lor.lhs.false17:                                  ; preds = %lor.lhs.false13
  %call18 = call %struct.bn_recp_ctx_st* @BN_RECP_CTX_new(), !dbg !355
  store %struct.bn_recp_ctx_st* %call18, %struct.bn_recp_ctx_st** %recp, align 8, !dbg !356
  %5 = bitcast %struct.bn_recp_ctx_st* %call18 to i8*, !dbg !357
  %call19 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 274, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.54, i32 0, i32 0), i8* %5), !dbg !358
  %tobool20 = icmp ne i32 %call19, 0, !dbg !359
  br i1 %tobool20, label %if.end, label %if.then, !dbg !360

if.then:                                          ; preds = %lor.lhs.false17, %lor.lhs.false13, %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !362

if.end:                                           ; preds = %lor.lhs.false17
  store i32 0, i32* %i, align 4, !dbg !363
  br label %for.cond, !dbg !365

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %i, align 4, !dbg !366
  %cmp = icmp slt i32 %6, 150, !dbg !369
  br i1 %cmp, label %for.body, label %for.end, !dbg !370

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4, !dbg !371
  %cmp21 = icmp slt i32 %7, 50, !dbg !374
  br i1 %cmp21, label %if.then22, label %if.else, !dbg !375

if.then22:                                        ; preds = %for.body
  %8 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !376
  %call23 = call i32 @BN_bntest_rand(%struct.bignum_st* %8, i32 400, i32 0, i32 0), !dbg !378
  %9 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !379
  %10 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !380
  %call24 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %9, %struct.bignum_st* %10), !dbg !381
  %11 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !382
  %12 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !383
  %13 = load i32, i32* %i, align 4, !dbg !384
  %call25 = call i32 @BN_lshift(%struct.bignum_st* %11, %struct.bignum_st* %12, i32 %13), !dbg !385
  %14 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !386
  %15 = load i32, i32* %i, align 4, !dbg !387
  %conv = sext i32 %15 to i64, !dbg !387
  %call26 = call i32 @BN_add_word(%struct.bignum_st* %14, i64 %conv), !dbg !388
  br label %if.end28, !dbg !389

if.else:                                          ; preds = %for.body
  %16 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !390
  %17 = load i32, i32* %i, align 4, !dbg !391
  %sub = sub nsw i32 %17, 50, !dbg !392
  %mul = mul nsw i32 3, %sub, !dbg !393
  %add = add nsw i32 50, %mul, !dbg !394
  %call27 = call i32 @BN_bntest_rand(%struct.bignum_st* %16, i32 %add, i32 0, i32 0), !dbg !395
  br label %if.end28

if.end28:                                         ; preds = %if.else, %if.then22
  %18 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !396
  %call29 = call i32 @rand_neg(), !dbg !397
  call void @BN_set_negative(%struct.bignum_st* %18, i32 %call29), !dbg !398
  %19 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !400
  %call30 = call i32 @rand_neg(), !dbg !401
  call void @BN_set_negative(%struct.bignum_st* %19, i32 %call30), !dbg !402
  %20 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp, align 8, !dbg !403
  %21 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !404
  %22 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !405
  %call31 = call i32 @BN_RECP_CTX_set(%struct.bn_recp_ctx_st* %20, %struct.bignum_st* %21, %struct.bignum_ctx* %22), !dbg !406
  %23 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !407
  %24 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !408
  %25 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !409
  %26 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp, align 8, !dbg !410
  %27 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !411
  %call32 = call i32 @BN_div_recp(%struct.bignum_st* %23, %struct.bignum_st* %24, %struct.bignum_st* %25, %struct.bn_recp_ctx_st* %26, %struct.bignum_ctx* %27), !dbg !412
  %28 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !413
  %29 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !414
  %30 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !415
  %31 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !416
  %call33 = call i32 @BN_mul(%struct.bignum_st* %28, %struct.bignum_st* %29, %struct.bignum_st* %30, %struct.bignum_ctx* %31), !dbg !417
  %32 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !418
  %33 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !419
  %34 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !420
  %call34 = call i32 @BN_add(%struct.bignum_st* %32, %struct.bignum_st* %33, %struct.bignum_st* %34), !dbg !421
  %35 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !422
  %36 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !423
  %37 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !424
  %call35 = call i32 @BN_sub(%struct.bignum_st* %35, %struct.bignum_st* %36, %struct.bignum_st* %37), !dbg !425
  %38 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !426
  %call36 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 292, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0), %struct.bignum_st* %38), !dbg !428
  %tobool37 = icmp ne i32 %call36, 0, !dbg !428
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !429

if.then38:                                        ; preds = %if.end28
  br label %err, !dbg !430

if.end39:                                         ; preds = %if.end28
  br label %for.inc, !dbg !431

for.inc:                                          ; preds = %if.end39
  %39 = load i32, i32* %i, align 4, !dbg !432
  %inc = add nsw i32 %39, 1, !dbg !432
  store i32 %inc, i32* %i, align 4, !dbg !432
  br label %for.cond, !dbg !434, !llvm.loop !435

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %st, align 4, !dbg !437
  br label %err, !dbg !438

err:                                              ; preds = %for.end, %if.then38, %if.then
  %40 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !439
  call void @BN_free(%struct.bignum_st* %40), !dbg !440
  %41 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !441
  call void @BN_free(%struct.bignum_st* %41), !dbg !442
  %42 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !443
  call void @BN_free(%struct.bignum_st* %42), !dbg !444
  %43 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !445
  call void @BN_free(%struct.bignum_st* %43), !dbg !446
  %44 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !447
  call void @BN_free(%struct.bignum_st* %44), !dbg !448
  %45 = load %struct.bn_recp_ctx_st*, %struct.bn_recp_ctx_st** %recp, align 8, !dbg !449
  call void @BN_RECP_CTX_free(%struct.bn_recp_ctx_st* %45), !dbg !450
  %46 = load i32, i32* %st, align 4, !dbg !451
  ret i32 %46, !dbg !452
}

; Function Attrs: nounwind uwtable
define internal i32 @test_mod() #0 !dbg !453 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca %struct.bignum_st*, align 8
  %c = alloca %struct.bignum_st*, align 8
  %d = alloca %struct.bignum_st*, align 8
  %e = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !454, metadata !134), !dbg !455
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !455
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b, metadata !456, metadata !134), !dbg !457
  store %struct.bignum_st* null, %struct.bignum_st** %b, align 8, !dbg !457
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !458, metadata !134), !dbg !459
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !459
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %d, metadata !460, metadata !134), !dbg !461
  store %struct.bignum_st* null, %struct.bignum_st** %d, align 8, !dbg !461
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %e, metadata !462, metadata !134), !dbg !463
  store %struct.bignum_st* null, %struct.bignum_st** %e, align 8, !dbg !463
  call void @llvm.dbg.declare(metadata i32* %st, metadata !464, metadata !134), !dbg !465
  store i32 0, i32* %st, align 4, !dbg !465
  call void @llvm.dbg.declare(metadata i32* %i, metadata !466, metadata !134), !dbg !467
  %call = call %struct.bignum_st* @BN_new(), !dbg !468
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !470
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !471
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 312, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %0), !dbg !472
  %tobool = icmp ne i32 %call1, 0, !dbg !474
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !475

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !476
  store %struct.bignum_st* %call2, %struct.bignum_st** %b, align 8, !dbg !478
  %1 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !479
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 313, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i32 0, i32 0), i8* %1), !dbg !480
  %tobool4 = icmp ne i32 %call3, 0, !dbg !482
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !483

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !484
  store %struct.bignum_st* %call6, %struct.bignum_st** %c, align 8, !dbg !485
  %2 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !486
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 314, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %2), !dbg !487
  %tobool8 = icmp ne i32 %call7, 0, !dbg !488
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !489

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %call10 = call %struct.bignum_st* @BN_new(), !dbg !490
  store %struct.bignum_st* %call10, %struct.bignum_st** %d, align 8, !dbg !491
  %3 = bitcast %struct.bignum_st* %call10 to i8*, !dbg !492
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 315, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i8* %3), !dbg !493
  %tobool12 = icmp ne i32 %call11, 0, !dbg !494
  br i1 %tobool12, label %lor.lhs.false13, label %if.then, !dbg !495

lor.lhs.false13:                                  ; preds = %lor.lhs.false9
  %call14 = call %struct.bignum_st* @BN_new(), !dbg !496
  store %struct.bignum_st* %call14, %struct.bignum_st** %e, align 8, !dbg !497
  %4 = bitcast %struct.bignum_st* %call14 to i8*, !dbg !498
  %call15 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 316, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i32 0, i32 0), i8* %4), !dbg !499
  %tobool16 = icmp ne i32 %call15, 0, !dbg !500
  br i1 %tobool16, label %if.end, label %if.then, !dbg !501

if.then:                                          ; preds = %lor.lhs.false13, %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !503

if.end:                                           ; preds = %lor.lhs.false13
  %5 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !504
  %call17 = call i32 @BN_bntest_rand(%struct.bignum_st* %5, i32 1024, i32 0, i32 0), !dbg !505
  store i32 0, i32* %i, align 4, !dbg !506
  br label %for.cond, !dbg !508

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i32, i32* %i, align 4, !dbg !509
  %cmp = icmp slt i32 %6, 100, !dbg !512
  br i1 %cmp, label %for.body, label %for.end, !dbg !513

for.body:                                         ; preds = %for.cond
  %7 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !514
  %8 = load i32, i32* %i, align 4, !dbg !516
  %mul = mul nsw i32 %8, 10, !dbg !517
  %add = add nsw i32 450, %mul, !dbg !518
  %call18 = call i32 @BN_bntest_rand(%struct.bignum_st* %7, i32 %add, i32 0, i32 0), !dbg !519
  %9 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !520
  %call19 = call i32 @rand_neg(), !dbg !521
  call void @BN_set_negative(%struct.bignum_st* %9, i32 %call19), !dbg !522
  %10 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !524
  %call20 = call i32 @rand_neg(), !dbg !525
  call void @BN_set_negative(%struct.bignum_st* %10, i32 %call20), !dbg !526
  %11 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !527
  %12 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !528
  %13 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !529
  %14 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !530
  %call21 = call i32 @BN_div(%struct.bignum_st* null, %struct.bignum_st* %11, %struct.bignum_st* %12, %struct.bignum_st* %13, %struct.bignum_ctx* %14), !dbg !531
  %15 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !532
  %16 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !533
  %17 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !534
  %18 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !535
  %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !536
  %call22 = call i32 @BN_div(%struct.bignum_st* %15, %struct.bignum_st* %16, %struct.bignum_st* %17, %struct.bignum_st* %18, %struct.bignum_ctx* %19), !dbg !537
  %20 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !538
  %21 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !539
  %22 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !540
  %call23 = call i32 @BN_sub(%struct.bignum_st* %20, %struct.bignum_st* %21, %struct.bignum_st* %22), !dbg !541
  %23 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !542
  %call24 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 327, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i32 0, i32 0), %struct.bignum_st* %23), !dbg !544
  %tobool25 = icmp ne i32 %call24, 0, !dbg !544
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !545

if.then26:                                        ; preds = %for.body
  br label %err, !dbg !546

if.end27:                                         ; preds = %for.body
  br label %for.inc, !dbg !547

for.inc:                                          ; preds = %if.end27
  %24 = load i32, i32* %i, align 4, !dbg !548
  %inc = add nsw i32 %24, 1, !dbg !548
  store i32 %inc, i32* %i, align 4, !dbg !548
  br label %for.cond, !dbg !550, !llvm.loop !551

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %st, align 4, !dbg !553
  br label %err, !dbg !554

err:                                              ; preds = %for.end, %if.then26, %if.then
  %25 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !555
  call void @BN_free(%struct.bignum_st* %25), !dbg !556
  %26 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !557
  call void @BN_free(%struct.bignum_st* %26), !dbg !558
  %27 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !559
  call void @BN_free(%struct.bignum_st* %27), !dbg !560
  %28 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !561
  call void @BN_free(%struct.bignum_st* %28), !dbg !562
  %29 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !563
  call void @BN_free(%struct.bignum_st* %29), !dbg !564
  %30 = load i32, i32* %st, align 4, !dbg !565
  ret i32 %30, !dbg !566
}

; Function Attrs: nounwind uwtable
define internal i32 @test_modexp_mont5() #0 !dbg !47 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %p = alloca %struct.bignum_st*, align 8
  %m = alloca %struct.bignum_st*, align 8
  %d = alloca %struct.bignum_st*, align 8
  %e = alloca %struct.bignum_st*, align 8
  %b = alloca %struct.bignum_st*, align 8
  %n = alloca %struct.bignum_st*, align 8
  %c = alloca %struct.bignum_st*, align 8
  %mont = alloca %struct.bn_mont_ctx_st*, align 8
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !567, metadata !134), !dbg !568
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !568
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %p, metadata !569, metadata !134), !dbg !570
  store %struct.bignum_st* null, %struct.bignum_st** %p, align 8, !dbg !570
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %m, metadata !571, metadata !134), !dbg !572
  store %struct.bignum_st* null, %struct.bignum_st** %m, align 8, !dbg !572
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %d, metadata !573, metadata !134), !dbg !574
  store %struct.bignum_st* null, %struct.bignum_st** %d, align 8, !dbg !574
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %e, metadata !575, metadata !134), !dbg !576
  store %struct.bignum_st* null, %struct.bignum_st** %e, align 8, !dbg !576
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b, metadata !577, metadata !134), !dbg !578
  store %struct.bignum_st* null, %struct.bignum_st** %b, align 8, !dbg !578
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %n, metadata !579, metadata !134), !dbg !580
  store %struct.bignum_st* null, %struct.bignum_st** %n, align 8, !dbg !580
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !581, metadata !134), !dbg !582
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !582
  call void @llvm.dbg.declare(metadata %struct.bn_mont_ctx_st** %mont, metadata !583, metadata !134), !dbg !587
  store %struct.bn_mont_ctx_st* null, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !587
  call void @llvm.dbg.declare(metadata i32* %st, metadata !588, metadata !134), !dbg !589
  store i32 0, i32* %st, align 4, !dbg !589
  %call = call %struct.bignum_st* @BN_new(), !dbg !590
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !592
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !593
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 391, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %0), !dbg !594
  %tobool = icmp ne i32 %call1, 0, !dbg !596
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !597

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !598
  store %struct.bignum_st* %call2, %struct.bignum_st** %p, align 8, !dbg !600
  %1 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !601
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 392, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.57, i32 0, i32 0), i8* %1), !dbg !602
  %tobool4 = icmp ne i32 %call3, 0, !dbg !604
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !605

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !606
  store %struct.bignum_st* %call6, %struct.bignum_st** %m, align 8, !dbg !607
  %2 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !608
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 393, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.58, i32 0, i32 0), i8* %2), !dbg !609
  %tobool8 = icmp ne i32 %call7, 0, !dbg !610
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !611

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %call10 = call %struct.bignum_st* @BN_new(), !dbg !612
  store %struct.bignum_st* %call10, %struct.bignum_st** %d, align 8, !dbg !613
  %3 = bitcast %struct.bignum_st* %call10 to i8*, !dbg !614
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 394, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i8* %3), !dbg !615
  %tobool12 = icmp ne i32 %call11, 0, !dbg !616
  br i1 %tobool12, label %lor.lhs.false13, label %if.then, !dbg !617

lor.lhs.false13:                                  ; preds = %lor.lhs.false9
  %call14 = call %struct.bignum_st* @BN_new(), !dbg !618
  store %struct.bignum_st* %call14, %struct.bignum_st** %e, align 8, !dbg !619
  %4 = bitcast %struct.bignum_st* %call14 to i8*, !dbg !620
  %call15 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 395, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i32 0, i32 0), i8* %4), !dbg !621
  %tobool16 = icmp ne i32 %call15, 0, !dbg !622
  br i1 %tobool16, label %lor.lhs.false17, label %if.then, !dbg !623

lor.lhs.false17:                                  ; preds = %lor.lhs.false13
  %call18 = call %struct.bignum_st* @BN_new(), !dbg !624
  store %struct.bignum_st* %call18, %struct.bignum_st** %b, align 8, !dbg !625
  %5 = bitcast %struct.bignum_st* %call18 to i8*, !dbg !626
  %call19 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 396, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i32 0, i32 0), i8* %5), !dbg !627
  %tobool20 = icmp ne i32 %call19, 0, !dbg !628
  br i1 %tobool20, label %lor.lhs.false21, label %if.then, !dbg !629

lor.lhs.false21:                                  ; preds = %lor.lhs.false17
  %call22 = call %struct.bignum_st* @BN_new(), !dbg !630
  store %struct.bignum_st* %call22, %struct.bignum_st** %n, align 8, !dbg !631
  %6 = bitcast %struct.bignum_st* %call22 to i8*, !dbg !632
  %call23 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 397, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.59, i32 0, i32 0), i8* %6), !dbg !633
  %tobool24 = icmp ne i32 %call23, 0, !dbg !634
  br i1 %tobool24, label %lor.lhs.false25, label %if.then, !dbg !635

lor.lhs.false25:                                  ; preds = %lor.lhs.false21
  %call26 = call %struct.bignum_st* @BN_new(), !dbg !636
  store %struct.bignum_st* %call26, %struct.bignum_st** %c, align 8, !dbg !637
  %7 = bitcast %struct.bignum_st* %call26 to i8*, !dbg !638
  %call27 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 398, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %7), !dbg !639
  %tobool28 = icmp ne i32 %call27, 0, !dbg !640
  br i1 %tobool28, label %lor.lhs.false29, label %if.then, !dbg !641

lor.lhs.false29:                                  ; preds = %lor.lhs.false25
  %call30 = call %struct.bn_mont_ctx_st* @BN_MONT_CTX_new(), !dbg !642
  store %struct.bn_mont_ctx_st* %call30, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !643
  %8 = bitcast %struct.bn_mont_ctx_st* %call30 to i8*, !dbg !644
  %call31 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 399, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.60, i32 0, i32 0), i8* %8), !dbg !645
  %tobool32 = icmp ne i32 %call31, 0, !dbg !646
  br i1 %tobool32, label %if.end, label %if.then, !dbg !647

if.then:                                          ; preds = %lor.lhs.false29, %lor.lhs.false25, %lor.lhs.false21, %lor.lhs.false17, %lor.lhs.false13, %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !649

if.end:                                           ; preds = %lor.lhs.false29
  %9 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !650
  %call33 = call i32 @BN_bntest_rand(%struct.bignum_st* %9, i32 1024, i32 0, i32 1), !dbg !651
  %10 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !652
  %call34 = call i32 @BN_bntest_rand(%struct.bignum_st* %10, i32 1024, i32 0, i32 0), !dbg !653
  %11 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !654
  %call35 = call i32 @BN_set_word(%struct.bignum_st* %11, i64 0), !dbg !655
  %12 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !656
  %13 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !658
  %14 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !659
  %15 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !660
  %16 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !661
  %call36 = call i32 @BN_mod_exp_mont_consttime(%struct.bignum_st* %12, %struct.bignum_st* %13, %struct.bignum_st* %14, %struct.bignum_st* %15, %struct.bignum_ctx* %16, %struct.bn_mont_ctx_st* null), !dbg !662
  %cmp = icmp ne i32 %call36, 0, !dbg !663
  %conv = zext i1 %cmp to i32, !dbg !663
  %call37 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 406, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.61, i32 0, i32 0), i32 %conv), !dbg !664
  %tobool38 = icmp ne i32 %call37, 0, !dbg !666
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !667

if.then39:                                        ; preds = %if.end
  br label %err, !dbg !668

if.end40:                                         ; preds = %if.end
  %17 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !669
  %call41 = call i32 @test_BN_eq_one(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 408, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0), %struct.bignum_st* %17), !dbg !671
  %tobool42 = icmp ne i32 %call41, 0, !dbg !671
  br i1 %tobool42, label %if.end44, label %if.then43, !dbg !672

if.then43:                                        ; preds = %if.end40
  br label %err, !dbg !673

if.end44:                                         ; preds = %if.end40
  %call45 = call i32 @BN_hex2bn(%struct.bignum_st** %a, i8* getelementptr inbounds ([257 x i8], [257 x i8]* @.str.62, i32 0, i32 0)), !dbg !674
  %call46 = call i32 @BN_hex2bn(%struct.bignum_st** %b, i8* getelementptr inbounds ([257 x i8], [257 x i8]* @.str.63, i32 0, i32 0)), !dbg !675
  %call47 = call i32 @BN_hex2bn(%struct.bignum_st** %n, i8* getelementptr inbounds ([257 x i8], [257 x i8]* @.str.64, i32 0, i32 0)), !dbg !676
  %18 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !677
  %19 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !678
  %20 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !679
  %call48 = call i32 @BN_MONT_CTX_set(%struct.bn_mont_ctx_st* %18, %struct.bignum_st* %19, %struct.bignum_ctx* %20), !dbg !680
  %21 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !681
  %22 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !682
  %23 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !683
  %24 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !684
  %25 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !685
  %call49 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %21, %struct.bignum_st* %22, %struct.bignum_st* %23, %struct.bn_mont_ctx_st* %24, %struct.bignum_ctx* %25), !dbg !686
  %26 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !687
  %27 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !688
  %28 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !689
  %29 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !690
  %30 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !691
  %call50 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %26, %struct.bignum_st* %27, %struct.bignum_st* %28, %struct.bn_mont_ctx_st* %29, %struct.bignum_ctx* %30), !dbg !692
  %31 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !693
  %32 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !695
  %call51 = call i32 @test_BN_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 430, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0), %struct.bignum_st* %31, %struct.bignum_st* %32), !dbg !696
  %tobool52 = icmp ne i32 %call51, 0, !dbg !696
  br i1 %tobool52, label %if.end54, label %if.then53, !dbg !697

if.then53:                                        ; preds = %if.end44
  br label %err, !dbg !698

if.end54:                                         ; preds = %if.end44
  %call55 = call i32 @parse_bigBN(%struct.bignum_st** %n, i8** getelementptr inbounds ([17 x i8*], [17 x i8*]* @bn1strings, i32 0, i32 0)), !dbg !699
  %call56 = call i32 @parse_bigBN(%struct.bignum_st** %a, i8** getelementptr inbounds ([17 x i8*], [17 x i8*]* @bn2strings, i32 0, i32 0)), !dbg !700
  %33 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !701
  call void @BN_free(%struct.bignum_st* %33), !dbg !702
  %34 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !703
  %call57 = call %struct.bignum_st* @BN_dup(%struct.bignum_st* %34), !dbg !704
  store %struct.bignum_st* %call57, %struct.bignum_st** %b, align 8, !dbg !705
  %35 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !706
  %36 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !707
  %37 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !708
  %call58 = call i32 @BN_MONT_CTX_set(%struct.bn_mont_ctx_st* %35, %struct.bignum_st* %36, %struct.bignum_ctx* %37), !dbg !709
  %38 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !710
  %39 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !711
  %40 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !712
  %41 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !713
  %42 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !714
  %call59 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %38, %struct.bignum_st* %39, %struct.bignum_st* %40, %struct.bn_mont_ctx_st* %41, %struct.bignum_ctx* %42), !dbg !715
  %43 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !716
  %44 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !717
  %45 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !718
  %46 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !719
  %47 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !720
  %call60 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %43, %struct.bignum_st* %44, %struct.bignum_st* %45, %struct.bn_mont_ctx_st* %46, %struct.bignum_ctx* %47), !dbg !721
  %48 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !722
  %49 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !724
  %call61 = call i32 @test_BN_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 441, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0), %struct.bignum_st* %48, %struct.bignum_st* %49), !dbg !725
  %tobool62 = icmp ne i32 %call61, 0, !dbg !725
  br i1 %tobool62, label %if.end64, label %if.then63, !dbg !726

if.then63:                                        ; preds = %if.end54
  br label %err, !dbg !727

if.end64:                                         ; preds = %if.end54
  %call65 = call i32 @parse_bigBN(%struct.bignum_st** %a, i8** getelementptr inbounds ([13 x i8*], [13 x i8*]* @test_modexp_mont5.ahex, i32 0, i32 0)), !dbg !728
  %call66 = call i32 @parse_bigBN(%struct.bignum_st** %n, i8** getelementptr inbounds ([13 x i8*], [13 x i8*]* @test_modexp_mont5.nhex, i32 0, i32 0)), !dbg !730
  %50 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !731
  call void @BN_free(%struct.bignum_st* %50), !dbg !732
  %51 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !733
  %call67 = call %struct.bignum_st* @BN_dup(%struct.bignum_st* %51), !dbg !734
  store %struct.bignum_st* %call67, %struct.bignum_st** %b, align 8, !dbg !735
  %52 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !736
  %53 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !737
  %54 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !738
  %call68 = call i32 @BN_MONT_CTX_set(%struct.bn_mont_ctx_st* %52, %struct.bignum_st* %53, %struct.bignum_ctx* %54), !dbg !739
  %55 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !740
  %56 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !742
  %57 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !743
  %58 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !744
  %59 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !745
  %call69 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %55, %struct.bignum_st* %56, %struct.bignum_st* %57, %struct.bn_mont_ctx_st* %58, %struct.bignum_ctx* %59), !dbg !746
  %cmp70 = icmp ne i32 %call69, 0, !dbg !747
  %conv71 = zext i1 %cmp70 to i32, !dbg !747
  %call72 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 483, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.82, i32 0, i32 0), i32 %conv71), !dbg !748
  %tobool73 = icmp ne i32 %call72, 0, !dbg !750
  br i1 %tobool73, label %lor.lhs.false74, label %if.then83, !dbg !751

lor.lhs.false74:                                  ; preds = %if.end64
  %60 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !752
  %61 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !754
  %62 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !755
  %63 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !756
  %64 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !757
  %call75 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %60, %struct.bignum_st* %61, %struct.bignum_st* %62, %struct.bn_mont_ctx_st* %63, %struct.bignum_ctx* %64), !dbg !758
  %cmp76 = icmp ne i32 %call75, 0, !dbg !759
  %conv77 = zext i1 %cmp76 to i32, !dbg !759
  %call78 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 484, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.83, i32 0, i32 0), i32 %conv77), !dbg !760
  %tobool79 = icmp ne i32 %call78, 0, !dbg !762
  br i1 %tobool79, label %lor.lhs.false80, label %if.then83, !dbg !763

lor.lhs.false80:                                  ; preds = %lor.lhs.false74
  %65 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !764
  %66 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !765
  %call81 = call i32 @test_BN_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 485, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0), %struct.bignum_st* %65, %struct.bignum_st* %66), !dbg !766
  %tobool82 = icmp ne i32 %call81, 0, !dbg !766
  br i1 %tobool82, label %if.end84, label %if.then83, !dbg !767

if.then83:                                        ; preds = %lor.lhs.false80, %lor.lhs.false74, %if.end64
  br label %err, !dbg !768

if.end84:                                         ; preds = %lor.lhs.false80
  %call85 = call i32 @BN_hex2bn(%struct.bignum_st** %a, i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.84, i32 0, i32 0)), !dbg !769
  %call86 = call i32 @BN_hex2bn(%struct.bignum_st** %n, i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.85, i32 0, i32 0)), !dbg !770
  %67 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !771
  %68 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !772
  %69 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !773
  %call87 = call i32 @BN_MONT_CTX_set(%struct.bn_mont_ctx_st* %67, %struct.bignum_st* %68, %struct.bignum_ctx* %69), !dbg !774
  %70 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !775
  %71 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !777
  %72 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !778
  %73 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !779
  %74 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !780
  %call88 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %70, %struct.bignum_st* %71, %struct.bignum_st* %72, %struct.bn_mont_ctx_st* %73, %struct.bignum_ctx* %74), !dbg !781
  %cmp89 = icmp ne i32 %call88, 0, !dbg !782
  %conv90 = zext i1 %cmp89 to i32, !dbg !782
  %call91 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 497, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.86, i32 0, i32 0), i32 %conv90), !dbg !783
  %tobool92 = icmp ne i32 %call91, 0, !dbg !785
  br i1 %tobool92, label %if.end94, label %if.then93, !dbg !786

if.then93:                                        ; preds = %if.end84
  br label %err, !dbg !787

if.end94:                                         ; preds = %if.end84
  %call95 = call i32 @BN_hex2bn(%struct.bignum_st** %a, i8* getelementptr inbounds ([257 x i8], [257 x i8]* @.str.87, i32 0, i32 0)), !dbg !788
  %call96 = call i32 @BN_hex2bn(%struct.bignum_st** %b, i8* getelementptr inbounds ([257 x i8], [257 x i8]* @.str.88, i32 0, i32 0)), !dbg !789
  %call97 = call i32 @BN_hex2bn(%struct.bignum_st** %n, i8* getelementptr inbounds ([257 x i8], [257 x i8]* @.str.89, i32 0, i32 0)), !dbg !790
  %75 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !791
  %76 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !792
  %77 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !793
  %call98 = call i32 @BN_MONT_CTX_set(%struct.bn_mont_ctx_st* %75, %struct.bignum_st* %76, %struct.bignum_ctx* %77), !dbg !794
  %78 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !795
  %79 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !796
  %80 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !797
  %81 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !798
  %82 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !799
  %83 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !800
  %call99 = call i32 @BN_mod_exp_mont_consttime(%struct.bignum_st* %78, %struct.bignum_st* %79, %struct.bignum_st* %80, %struct.bignum_st* %81, %struct.bignum_ctx* %82, %struct.bn_mont_ctx_st* %83), !dbg !801
  %84 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !802
  %85 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !803
  %86 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !804
  %87 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !805
  %88 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !806
  %89 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !807
  %call100 = call i32 @BN_mod_exp_mont(%struct.bignum_st* %84, %struct.bignum_st* %85, %struct.bignum_st* %86, %struct.bignum_st* %87, %struct.bignum_ctx* %88, %struct.bn_mont_ctx_st* %89), !dbg !808
  %90 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !809
  %91 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !811
  %call101 = call i32 @test_BN_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 519, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0), %struct.bignum_st* %90, %struct.bignum_st* %91), !dbg !812
  %tobool102 = icmp ne i32 %call101, 0, !dbg !812
  br i1 %tobool102, label %if.end104, label %if.then103, !dbg !813

if.then103:                                       ; preds = %if.end94
  br label %err, !dbg !814

if.end104:                                        ; preds = %if.end94
  %call105 = call i32 @BN_hex2bn(%struct.bignum_st** %a, i8* getelementptr inbounds ([257 x i8], [257 x i8]* @.str.87, i32 0, i32 0)), !dbg !815
  %call106 = call i32 @BN_hex2bn(%struct.bignum_st** %b, i8* getelementptr inbounds ([257 x i8], [257 x i8]* @.str.90, i32 0, i32 0)), !dbg !816
  %call107 = call i32 @BN_hex2bn(%struct.bignum_st** %n, i8* getelementptr inbounds ([257 x i8], [257 x i8]* @.str.87, i32 0, i32 0)), !dbg !817
  %92 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !818
  %93 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !819
  %94 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !820
  %call108 = call i32 @BN_MONT_CTX_set(%struct.bn_mont_ctx_st* %92, %struct.bignum_st* %93, %struct.bignum_ctx* %94), !dbg !821
  %95 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !822
  %96 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !823
  %97 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !824
  %98 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !825
  %99 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !826
  %100 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !827
  %call109 = call i32 @BN_mod_exp_mont_consttime(%struct.bignum_st* %95, %struct.bignum_st* %96, %struct.bignum_st* %97, %struct.bignum_st* %98, %struct.bignum_ctx* %99, %struct.bn_mont_ctx_st* %100), !dbg !828
  %101 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !829
  %call110 = call i32 @BN_set_word(%struct.bignum_st* %101, i64 0), !dbg !830
  %102 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !831
  %103 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !833
  %call111 = call i32 @test_BN_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 544, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0), %struct.bignum_st* %102, %struct.bignum_st* %103), !dbg !834
  %tobool112 = icmp ne i32 %call111, 0, !dbg !834
  br i1 %tobool112, label %if.end114, label %if.then113, !dbg !835

if.then113:                                       ; preds = %if.end104
  br label %err, !dbg !836

if.end114:                                        ; preds = %if.end104
  %104 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !837
  %call115 = call i32 @BN_bntest_rand(%struct.bignum_st* %104, i32 1024, i32 0, i32 0), !dbg !838
  %105 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !839
  %call116 = call i32 @BN_set_word(%struct.bignum_st* %105, i64 0), !dbg !840
  %106 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !841
  %107 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !843
  %108 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !844
  %109 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !845
  %110 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !846
  %call117 = call i32 @BN_mod_exp_mont_consttime(%struct.bignum_st* %106, %struct.bignum_st* %107, %struct.bignum_st* %108, %struct.bignum_st* %109, %struct.bignum_ctx* %110, %struct.bn_mont_ctx_st* null), !dbg !847
  %cmp118 = icmp ne i32 %call117, 0, !dbg !848
  %conv119 = zext i1 %cmp118 to i32, !dbg !848
  %call120 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 550, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.61, i32 0, i32 0), i32 %conv119), !dbg !849
  %tobool121 = icmp ne i32 %call120, 0, !dbg !851
  br i1 %tobool121, label %lor.lhs.false122, label %if.then125, !dbg !852

lor.lhs.false122:                                 ; preds = %if.end114
  %111 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !853
  %call123 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 551, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0), %struct.bignum_st* %111), !dbg !855
  %tobool124 = icmp ne i32 %call123, 0, !dbg !855
  br i1 %tobool124, label %if.end126, label %if.then125, !dbg !856

if.then125:                                       ; preds = %lor.lhs.false122, %if.end114
  br label %err, !dbg !857

if.end126:                                        ; preds = %lor.lhs.false122
  %112 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !858
  %call127 = call i32 @BN_set_word(%struct.bignum_st* %112, i64 1), !dbg !859
  %113 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !860
  %114 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !861
  %115 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !862
  %call128 = call i32 @BN_MONT_CTX_set(%struct.bn_mont_ctx_st* %113, %struct.bignum_st* %114, %struct.bignum_ctx* %115), !dbg !863
  %116 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !864
  %117 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !866
  %118 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !867
  %119 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !868
  %call129 = call i32 @BN_from_montgomery(%struct.bignum_st* %116, %struct.bignum_st* %117, %struct.bn_mont_ctx_st* %118, %struct.bignum_ctx* %119), !dbg !869
  %cmp130 = icmp ne i32 %call129, 0, !dbg !870
  %conv131 = zext i1 %cmp130 to i32, !dbg !870
  %call132 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 561, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.91, i32 0, i32 0), i32 %conv131), !dbg !871
  %tobool133 = icmp ne i32 %call132, 0, !dbg !873
  br i1 %tobool133, label %lor.lhs.false134, label %if.then149, !dbg !874

lor.lhs.false134:                                 ; preds = %if.end126
  %120 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !875
  %121 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !877
  %122 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !878
  %123 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !879
  %124 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !880
  %call135 = call i32 @BN_mod_exp_mont_consttime(%struct.bignum_st* %120, %struct.bignum_st* %121, %struct.bignum_st* %122, %struct.bignum_st* %123, %struct.bignum_ctx* %124, %struct.bn_mont_ctx_st* null), !dbg !881
  %cmp136 = icmp ne i32 %call135, 0, !dbg !882
  %conv137 = zext i1 %cmp136 to i32, !dbg !882
  %call138 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 562, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.92, i32 0, i32 0), i32 %conv137), !dbg !883
  %tobool139 = icmp ne i32 %call138, 0, !dbg !885
  br i1 %tobool139, label %lor.lhs.false140, label %if.then149, !dbg !886

lor.lhs.false140:                                 ; preds = %lor.lhs.false134
  %125 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !887
  %126 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !888
  %127 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !889
  %128 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !890
  %129 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !891
  %call141 = call i32 @BN_mod_exp_simple(%struct.bignum_st* %125, %struct.bignum_st* %126, %struct.bignum_st* %127, %struct.bignum_st* %128, %struct.bignum_ctx* %129), !dbg !892
  %cmp142 = icmp ne i32 %call141, 0, !dbg !893
  %conv143 = zext i1 %cmp142 to i32, !dbg !893
  %call144 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 563, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.93, i32 0, i32 0), i32 %conv143), !dbg !894
  %tobool145 = icmp ne i32 %call144, 0, !dbg !895
  br i1 %tobool145, label %lor.lhs.false146, label %if.then149, !dbg !896

lor.lhs.false146:                                 ; preds = %lor.lhs.false140
  %130 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !897
  %131 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !898
  %call147 = call i32 @test_BN_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 564, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0), %struct.bignum_st* %130, %struct.bignum_st* %131), !dbg !899
  %tobool148 = icmp ne i32 %call147, 0, !dbg !899
  br i1 %tobool148, label %if.end150, label %if.then149, !dbg !900

if.then149:                                       ; preds = %lor.lhs.false146, %lor.lhs.false140, %lor.lhs.false134, %if.end126
  br label %err, !dbg !901

if.end150:                                        ; preds = %lor.lhs.false146
  %132 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !902
  %call151 = call i32 @BN_bntest_rand(%struct.bignum_st* %132, i32 1024, i32 0, i32 0), !dbg !903
  %133 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !904
  %134 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !906
  %135 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !907
  %136 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !908
  %137 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !909
  %call152 = call i32 @BN_mod_exp_mont_consttime(%struct.bignum_st* %133, %struct.bignum_st* %134, %struct.bignum_st* %135, %struct.bignum_st* %136, %struct.bignum_ctx* %137, %struct.bn_mont_ctx_st* null), !dbg !910
  %cmp153 = icmp ne i32 %call152, 0, !dbg !911
  %conv154 = zext i1 %cmp153 to i32, !dbg !911
  %call155 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 569, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.92, i32 0, i32 0), i32 %conv154), !dbg !912
  %tobool156 = icmp ne i32 %call155, 0, !dbg !914
  br i1 %tobool156, label %lor.lhs.false157, label %if.then166, !dbg !915

lor.lhs.false157:                                 ; preds = %if.end150
  %138 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !916
  %139 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !918
  %140 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !919
  %141 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !920
  %142 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !921
  %call158 = call i32 @BN_mod_exp_simple(%struct.bignum_st* %138, %struct.bignum_st* %139, %struct.bignum_st* %140, %struct.bignum_st* %141, %struct.bignum_ctx* %142), !dbg !922
  %cmp159 = icmp ne i32 %call158, 0, !dbg !923
  %conv160 = zext i1 %cmp159 to i32, !dbg !923
  %call161 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 570, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.93, i32 0, i32 0), i32 %conv160), !dbg !924
  %tobool162 = icmp ne i32 %call161, 0, !dbg !926
  br i1 %tobool162, label %lor.lhs.false163, label %if.then166, !dbg !927

lor.lhs.false163:                                 ; preds = %lor.lhs.false157
  %143 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !928
  %144 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !929
  %call164 = call i32 @test_BN_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 571, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0), %struct.bignum_st* %143, %struct.bignum_st* %144), !dbg !930
  %tobool165 = icmp ne i32 %call164, 0, !dbg !930
  br i1 %tobool165, label %if.end167, label %if.then166, !dbg !931

if.then166:                                       ; preds = %lor.lhs.false163, %lor.lhs.false157, %if.end150
  br label %err, !dbg !932

if.end167:                                        ; preds = %lor.lhs.false163
  store i32 1, i32* %st, align 4, !dbg !933
  br label %err, !dbg !934

err:                                              ; preds = %if.end167, %if.then166, %if.then149, %if.then125, %if.then113, %if.then103, %if.then93, %if.then83, %if.then63, %if.then53, %if.then43, %if.then39, %if.then
  %145 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !935
  call void @BN_MONT_CTX_free(%struct.bn_mont_ctx_st* %145), !dbg !936
  %146 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !937
  call void @BN_free(%struct.bignum_st* %146), !dbg !938
  %147 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !939
  call void @BN_free(%struct.bignum_st* %147), !dbg !940
  %148 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !941
  call void @BN_free(%struct.bignum_st* %148), !dbg !942
  %149 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !943
  call void @BN_free(%struct.bignum_st* %149), !dbg !944
  %150 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !945
  call void @BN_free(%struct.bignum_st* %150), !dbg !946
  %151 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !947
  call void @BN_free(%struct.bignum_st* %151), !dbg !948
  %152 = load %struct.bignum_st*, %struct.bignum_st** %n, align 8, !dbg !949
  call void @BN_free(%struct.bignum_st* %152), !dbg !950
  %153 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !951
  call void @BN_free(%struct.bignum_st* %153), !dbg !952
  %154 = load i32, i32* %st, align 4, !dbg !953
  ret i32 %154, !dbg !954
}

; Function Attrs: nounwind uwtable
define internal i32 @test_kronecker() #0 !dbg !955 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca %struct.bignum_st*, align 8
  %r = alloca %struct.bignum_st*, align 8
  %t = alloca %struct.bignum_st*, align 8
  %i = alloca i32, align 4
  %legendre = alloca i32, align 4
  %kronecker = alloca i32, align 4
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !956, metadata !134), !dbg !957
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !957
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b, metadata !958, metadata !134), !dbg !959
  store %struct.bignum_st* null, %struct.bignum_st** %b, align 8, !dbg !959
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %r, metadata !960, metadata !134), !dbg !961
  store %struct.bignum_st* null, %struct.bignum_st** %r, align 8, !dbg !961
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %t, metadata !962, metadata !134), !dbg !963
  store %struct.bignum_st* null, %struct.bignum_st** %t, align 8, !dbg !963
  call void @llvm.dbg.declare(metadata i32* %i, metadata !964, metadata !134), !dbg !965
  call void @llvm.dbg.declare(metadata i32* %legendre, metadata !966, metadata !134), !dbg !967
  call void @llvm.dbg.declare(metadata i32* %kronecker, metadata !968, metadata !134), !dbg !969
  call void @llvm.dbg.declare(metadata i32* %st, metadata !970, metadata !134), !dbg !971
  store i32 0, i32* %st, align 4, !dbg !971
  %call = call %struct.bignum_st* @BN_new(), !dbg !972
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !974
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !975
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 970, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %0), !dbg !976
  %tobool = icmp ne i32 %call1, 0, !dbg !978
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !979

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !980
  store %struct.bignum_st* %call2, %struct.bignum_st** %b, align 8, !dbg !982
  %1 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !983
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 971, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i32 0, i32 0), i8* %1), !dbg !984
  %tobool4 = icmp ne i32 %call3, 0, !dbg !986
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !987

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !988
  store %struct.bignum_st* %call6, %struct.bignum_st** %r, align 8, !dbg !989
  %2 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !990
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 972, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100, i32 0, i32 0), i8* %2), !dbg !991
  %tobool8 = icmp ne i32 %call7, 0, !dbg !992
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !993

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %call10 = call %struct.bignum_st* @BN_new(), !dbg !994
  store %struct.bignum_st* %call10, %struct.bignum_st** %t, align 8, !dbg !995
  %3 = bitcast %struct.bignum_st* %call10 to i8*, !dbg !996
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 973, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.101, i32 0, i32 0), i8* %3), !dbg !997
  %tobool12 = icmp ne i32 %call11, 0, !dbg !998
  br i1 %tobool12, label %if.end, label %if.then, !dbg !999

if.then:                                          ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !1001

if.end:                                           ; preds = %lor.lhs.false9
  %4 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1002
  %call13 = call i32 @BN_generate_prime_ex(%struct.bignum_st* %4, i32 512, i32 0, %struct.bignum_st* null, %struct.bignum_st* null, %struct.bn_gencb_st* null), !dbg !1004
  %cmp = icmp ne i32 %call13, 0, !dbg !1005
  %conv = zext i1 %cmp to i32, !dbg !1005
  %call14 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 986, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.102, i32 0, i32 0), i32 %conv), !dbg !1006
  %tobool15 = icmp ne i32 %call14, 0, !dbg !1008
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !1009

if.then16:                                        ; preds = %if.end
  br label %err, !dbg !1010

if.end17:                                         ; preds = %if.end
  %5 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1011
  %call18 = call i32 @rand_neg(), !dbg !1012
  call void @BN_set_negative(%struct.bignum_st* %5, i32 %call18), !dbg !1013
  store i32 0, i32* %i, align 4, !dbg !1014
  br label %for.cond, !dbg !1016

for.cond:                                         ; preds = %for.inc, %if.end17
  %6 = load i32, i32* %i, align 4, !dbg !1017
  %cmp19 = icmp slt i32 %6, 100, !dbg !1020
  br i1 %cmp19, label %for.body, label %for.end, !dbg !1021

for.body:                                         ; preds = %for.cond
  %7 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !1022
  %call21 = call i32 @BN_bntest_rand(%struct.bignum_st* %7, i32 512, i32 0, i32 0), !dbg !1025
  %cmp22 = icmp ne i32 %call21, 0, !dbg !1026
  %conv23 = zext i1 %cmp22 to i32, !dbg !1026
  %call24 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 991, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.103, i32 0, i32 0), i32 %conv23), !dbg !1027
  %tobool25 = icmp ne i32 %call24, 0, !dbg !1029
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !1030

if.then26:                                        ; preds = %for.body
  br label %err, !dbg !1031

if.end27:                                         ; preds = %for.body
  %8 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !1032
  %call28 = call i32 @rand_neg(), !dbg !1033
  call void @BN_set_negative(%struct.bignum_st* %8, i32 %call28), !dbg !1034
  %9 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !1036
  %10 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1038
  %call29 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %9, %struct.bignum_st* %10), !dbg !1039
  %cmp30 = icmp ne %struct.bignum_st* %call29, null, !dbg !1040
  %conv31 = zext i1 %cmp30 to i32, !dbg !1040
  %call32 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 996, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.104, i32 0, i32 0), i32 %conv31), !dbg !1041
  %tobool33 = icmp ne i32 %call32, 0, !dbg !1043
  br i1 %tobool33, label %if.end35, label %if.then34, !dbg !1044

if.then34:                                        ; preds = %if.end27
  br label %err, !dbg !1045

if.end35:                                         ; preds = %if.end27
  %11 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !1046
  call void @BN_set_negative(%struct.bignum_st* %11, i32 0), !dbg !1047
  %12 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !1048
  %call36 = call i32 @BN_sub_word(%struct.bignum_st* %12, i64 1), !dbg !1050
  %cmp37 = icmp ne i32 %call36, 0, !dbg !1051
  %conv38 = zext i1 %cmp37 to i32, !dbg !1051
  %call39 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 999, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.105, i32 0, i32 0), i32 %conv38), !dbg !1052
  %tobool40 = icmp ne i32 %call39, 0, !dbg !1054
  br i1 %tobool40, label %if.end42, label %if.then41, !dbg !1055

if.then41:                                        ; preds = %if.end35
  br label %err, !dbg !1056

if.end42:                                         ; preds = %if.end35
  %13 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !1057
  %14 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !1059
  %call43 = call i32 @BN_rshift1(%struct.bignum_st* %13, %struct.bignum_st* %14), !dbg !1060
  %cmp44 = icmp ne i32 %call43, 0, !dbg !1061
  %conv45 = zext i1 %cmp44 to i32, !dbg !1061
  %call46 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1001, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.106, i32 0, i32 0), i32 %conv45), !dbg !1062
  %tobool47 = icmp ne i32 %call46, 0, !dbg !1064
  br i1 %tobool47, label %if.end49, label %if.then48, !dbg !1065

if.then48:                                        ; preds = %if.end42
  br label %err, !dbg !1066

if.end49:                                         ; preds = %if.end42
  %15 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1067
  call void @BN_set_negative(%struct.bignum_st* %15, i32 0), !dbg !1068
  %16 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !1069
  %17 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !1071
  %18 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !1072
  %19 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1073
  %20 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !1074
  %call50 = call i32 @BN_mod_exp_recp(%struct.bignum_st* %16, %struct.bignum_st* %17, %struct.bignum_st* %18, %struct.bignum_st* %19, %struct.bignum_ctx* %20), !dbg !1075
  %cmp51 = icmp ne i32 %call50, 0, !dbg !1076
  %conv52 = zext i1 %cmp51 to i32, !dbg !1076
  %call53 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1006, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.107, i32 0, i32 0), i32 %conv52), !dbg !1077
  %tobool54 = icmp ne i32 %call53, 0, !dbg !1079
  br i1 %tobool54, label %if.end56, label %if.then55, !dbg !1080

if.then55:                                        ; preds = %if.end49
  br label %err, !dbg !1081

if.end56:                                         ; preds = %if.end49
  %21 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1082
  call void @BN_set_negative(%struct.bignum_st* %21, i32 1), !dbg !1083
  %22 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !1084
  %call57 = call i32 @BN_is_word(%struct.bignum_st* %22, i64 1), !dbg !1086
  %tobool58 = icmp ne i32 %call57, 0, !dbg !1086
  br i1 %tobool58, label %if.then59, label %if.else, !dbg !1087

if.then59:                                        ; preds = %if.end56
  store i32 1, i32* %legendre, align 4, !dbg !1088
  br label %if.end77, !dbg !1089

if.else:                                          ; preds = %if.end56
  %23 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !1090
  %call60 = call i32 @BN_is_zero(%struct.bignum_st* %23), !dbg !1092
  %tobool61 = icmp ne i32 %call60, 0, !dbg !1092
  br i1 %tobool61, label %if.then62, label %if.else63, !dbg !1093

if.then62:                                        ; preds = %if.else
  store i32 0, i32* %legendre, align 4, !dbg !1094
  br label %if.end76, !dbg !1095

if.else63:                                        ; preds = %if.else
  %24 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !1096
  %call64 = call i32 @BN_add_word(%struct.bignum_st* %24, i64 1), !dbg !1099
  %cmp65 = icmp ne i32 %call64, 0, !dbg !1100
  %conv66 = zext i1 %cmp65 to i32, !dbg !1100
  %call67 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1015, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.108, i32 0, i32 0), i32 %conv66), !dbg !1101
  %tobool68 = icmp ne i32 %call67, 0, !dbg !1103
  br i1 %tobool68, label %if.end70, label %if.then69, !dbg !1104

if.then69:                                        ; preds = %if.else63
  br label %err, !dbg !1105

if.end70:                                         ; preds = %if.else63
  %25 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !1106
  %26 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1108
  %call71 = call i32 @BN_ucmp(%struct.bignum_st* %25, %struct.bignum_st* %26), !dbg !1109
  %call72 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1017, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i32 0, i32 0), i32 %call71, i32 0), !dbg !1110
  %tobool73 = icmp ne i32 %call72, 0, !dbg !1112
  br i1 %tobool73, label %if.end75, label %if.then74, !dbg !1113

if.then74:                                        ; preds = %if.end70
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1018, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.110, i32 0, i32 0)), !dbg !1114
  br label %err, !dbg !1116

if.end75:                                         ; preds = %if.end70
  store i32 -1, i32* %legendre, align 4, !dbg !1117
  br label %if.end76

if.end76:                                         ; preds = %if.end75, %if.then62
  br label %if.end77

if.end77:                                         ; preds = %if.end76, %if.then59
  %27 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !1118
  %28 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1120
  %29 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !1121
  %call78 = call i32 @BN_kronecker(%struct.bignum_st* %27, %struct.bignum_st* %28, %struct.bignum_ctx* %29), !dbg !1122
  store i32 %call78, i32* %kronecker, align 4, !dbg !1123
  %call79 = call i32 @test_int_ge(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1024, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i32 0, i32 0), i32 %call78, i32 -1), !dbg !1124
  %tobool80 = icmp ne i32 %call79, 0, !dbg !1126
  br i1 %tobool80, label %if.end82, label %if.then81, !dbg !1127

if.then81:                                        ; preds = %if.end77
  br label %err, !dbg !1128

if.end82:                                         ; preds = %if.end77
  %30 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !1129
  %call83 = call i32 @BN_is_negative(%struct.bignum_st* %30), !dbg !1131
  %tobool84 = icmp ne i32 %call83, 0, !dbg !1131
  br i1 %tobool84, label %land.lhs.true, label %if.end88, !dbg !1132

land.lhs.true:                                    ; preds = %if.end82
  %31 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1133
  %call85 = call i32 @BN_is_negative(%struct.bignum_st* %31), !dbg !1135
  %tobool86 = icmp ne i32 %call85, 0, !dbg !1135
  br i1 %tobool86, label %if.then87, label %if.end88, !dbg !1136

if.then87:                                        ; preds = %land.lhs.true
  %32 = load i32, i32* %kronecker, align 4, !dbg !1137
  %sub = sub nsw i32 0, %32, !dbg !1138
  store i32 %sub, i32* %kronecker, align 4, !dbg !1139
  br label %if.end88, !dbg !1140

if.end88:                                         ; preds = %if.then87, %land.lhs.true, %if.end82
  %33 = load i32, i32* %legendre, align 4, !dbg !1141
  %34 = load i32, i32* %kronecker, align 4, !dbg !1143
  %call89 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1030, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.114, i32 0, i32 0), i32 %33, i32 %34), !dbg !1144
  %tobool90 = icmp ne i32 %call89, 0, !dbg !1144
  br i1 %tobool90, label %if.end92, label %if.then91, !dbg !1145

if.then91:                                        ; preds = %if.end88
  br label %err, !dbg !1146

if.end92:                                         ; preds = %if.end88
  br label %for.inc, !dbg !1147

for.inc:                                          ; preds = %if.end92
  %35 = load i32, i32* %i, align 4, !dbg !1148
  %inc = add nsw i32 %35, 1, !dbg !1148
  store i32 %inc, i32* %i, align 4, !dbg !1148
  br label %for.cond, !dbg !1150, !llvm.loop !1151

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %st, align 4, !dbg !1153
  br label %err, !dbg !1154

err:                                              ; preds = %for.end, %if.then91, %if.then81, %if.then74, %if.then69, %if.then55, %if.then48, %if.then41, %if.then34, %if.then26, %if.then16, %if.then
  %36 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !1155
  call void @BN_free(%struct.bignum_st* %36), !dbg !1156
  %37 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1157
  call void @BN_free(%struct.bignum_st* %37), !dbg !1158
  %38 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !1159
  call void @BN_free(%struct.bignum_st* %38), !dbg !1160
  %39 = load %struct.bignum_st*, %struct.bignum_st** %t, align 8, !dbg !1161
  call void @BN_free(%struct.bignum_st* %39), !dbg !1162
  %40 = load i32, i32* %st, align 4, !dbg !1163
  ret i32 %40, !dbg !1164
}

; Function Attrs: nounwind uwtable
define internal i32 @test_rand() #0 !dbg !1165 {
entry:
  %retval = alloca i32, align 4
  %bn = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %bn, metadata !1166, metadata !134), !dbg !1167
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1167
  call void @llvm.dbg.declare(metadata i32* %st, metadata !1168, metadata !134), !dbg !1169
  store i32 0, i32* %st, align 4, !dbg !1169
  %call = call %struct.bignum_st* @BN_new(), !dbg !1170
  store %struct.bignum_st* %call, %struct.bignum_st** %bn, align 8, !dbg !1172
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !1173
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1902, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.115, i32 0, i32 0), i8* %0), !dbg !1174
  %tobool = icmp ne i32 %call1, 0, !dbg !1176
  br i1 %tobool, label %if.end, label %if.then, !dbg !1177

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !1178
  br label %return, !dbg !1178

if.end:                                           ; preds = %entry
  %1 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1179
  %call2 = call i32 @BN_rand(%struct.bignum_st* %1, i32 0, i32 0, i32 0), !dbg !1181
  %cmp = icmp ne i32 %call2, 0, !dbg !1182
  %conv = zext i1 %cmp to i32, !dbg !1182
  %call3 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1906, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.116, i32 0, i32 0), i32 %conv), !dbg !1183
  %tobool4 = icmp ne i32 %call3, 0, !dbg !1185
  br i1 %tobool4, label %lor.lhs.false, label %if.then43, !dbg !1186

lor.lhs.false:                                    ; preds = %if.end
  %2 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1187
  %call5 = call i32 @BN_rand(%struct.bignum_st* %2, i32 0, i32 1, i32 1), !dbg !1189
  %cmp6 = icmp ne i32 %call5, 0, !dbg !1190
  %conv7 = zext i1 %cmp6 to i32, !dbg !1190
  %call8 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1907, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.117, i32 0, i32 0), i32 %conv7), !dbg !1191
  %tobool9 = icmp ne i32 %call8, 0, !dbg !1193
  br i1 %tobool9, label %lor.lhs.false10, label %if.then43, !dbg !1194

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %3 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1195
  %call11 = call i32 @BN_rand(%struct.bignum_st* %3, i32 1, i32 0, i32 0), !dbg !1196
  %cmp12 = icmp ne i32 %call11, 0, !dbg !1197
  %conv13 = zext i1 %cmp12 to i32, !dbg !1197
  %call14 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1908, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.118, i32 0, i32 0), i32 %conv13), !dbg !1198
  %tobool15 = icmp ne i32 %call14, 0, !dbg !1199
  br i1 %tobool15, label %lor.lhs.false16, label %if.then43, !dbg !1200

lor.lhs.false16:                                  ; preds = %lor.lhs.false10
  %4 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1201
  %call17 = call i32 @test_BN_eq_one(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1909, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %4), !dbg !1202
  %tobool18 = icmp ne i32 %call17, 0, !dbg !1202
  br i1 %tobool18, label %lor.lhs.false19, label %if.then43, !dbg !1203

lor.lhs.false19:                                  ; preds = %lor.lhs.false16
  %5 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1204
  %call20 = call i32 @BN_rand(%struct.bignum_st* %5, i32 1, i32 1, i32 0), !dbg !1205
  %cmp21 = icmp ne i32 %call20, 0, !dbg !1206
  %conv22 = zext i1 %cmp21 to i32, !dbg !1206
  %call23 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1910, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.120, i32 0, i32 0), i32 %conv22), !dbg !1207
  %tobool24 = icmp ne i32 %call23, 0, !dbg !1208
  br i1 %tobool24, label %lor.lhs.false25, label %if.then43, !dbg !1209

lor.lhs.false25:                                  ; preds = %lor.lhs.false19
  %6 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1210
  %call26 = call i32 @BN_rand(%struct.bignum_st* %6, i32 1, i32 -1, i32 1), !dbg !1211
  %cmp27 = icmp ne i32 %call26, 0, !dbg !1212
  %conv28 = zext i1 %cmp27 to i32, !dbg !1212
  %call29 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1911, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.121, i32 0, i32 0), i32 %conv28), !dbg !1213
  %tobool30 = icmp ne i32 %call29, 0, !dbg !1214
  br i1 %tobool30, label %lor.lhs.false31, label %if.then43, !dbg !1215

lor.lhs.false31:                                  ; preds = %lor.lhs.false25
  %7 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1216
  %call32 = call i32 @test_BN_eq_one(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1912, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %7), !dbg !1217
  %tobool33 = icmp ne i32 %call32, 0, !dbg !1217
  br i1 %tobool33, label %lor.lhs.false34, label %if.then43, !dbg !1218

lor.lhs.false34:                                  ; preds = %lor.lhs.false31
  %8 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1219
  %call35 = call i32 @BN_rand(%struct.bignum_st* %8, i32 2, i32 1, i32 0), !dbg !1220
  %cmp36 = icmp ne i32 %call35, 0, !dbg !1221
  %conv37 = zext i1 %cmp36 to i32, !dbg !1221
  %call38 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1913, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.122, i32 0, i32 0), i32 %conv37), !dbg !1222
  %tobool39 = icmp ne i32 %call38, 0, !dbg !1223
  br i1 %tobool39, label %lor.lhs.false40, label %if.then43, !dbg !1224

lor.lhs.false40:                                  ; preds = %lor.lhs.false34
  %9 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1225
  %call41 = call i32 @test_BN_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1914, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i32 0, i32 0), %struct.bignum_st* %9, i64 3), !dbg !1226
  %tobool42 = icmp ne i32 %call41, 0, !dbg !1226
  br i1 %tobool42, label %if.end44, label %if.then43, !dbg !1227

if.then43:                                        ; preds = %lor.lhs.false40, %lor.lhs.false34, %lor.lhs.false31, %lor.lhs.false25, %lor.lhs.false19, %lor.lhs.false16, %lor.lhs.false10, %lor.lhs.false, %if.end
  br label %err, !dbg !1229

if.end44:                                         ; preds = %lor.lhs.false40
  store i32 1, i32* %st, align 4, !dbg !1230
  br label %err, !dbg !1231

err:                                              ; preds = %if.end44, %if.then43
  %10 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1232
  call void @BN_free(%struct.bignum_st* %10), !dbg !1233
  %11 = load i32, i32* %st, align 4, !dbg !1234
  store i32 %11, i32* %retval, align 4, !dbg !1235
  br label %return, !dbg !1235

return:                                           ; preds = %err, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !1236
  ret i32 %12, !dbg !1236
}

; Function Attrs: nounwind uwtable
define internal i32 @test_bn2padded() #0 !dbg !1237 {
entry:
  %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !1238
  %cmp = icmp ne %struct.bignum_ctx* %0, null, !dbg !1239
  %conv = zext i1 %cmp to i32, !dbg !1239
  ret i32 %conv, !dbg !1240
}

; Function Attrs: nounwind uwtable
define internal i32 @test_dec2bn() #0 !dbg !1241 {
entry:
  %bn = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %bn, metadata !1242, metadata !134), !dbg !1243
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1243
  call void @llvm.dbg.declare(metadata i32* %st, metadata !1244, metadata !134), !dbg !1245
  store i32 0, i32* %st, align 4, !dbg !1245
  %call = call i32 @parsedecBN(%struct.bignum_st** %bn, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i32 0, i32 0)), !dbg !1246
  %call1 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1669, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), i32 %call, i32 1), !dbg !1248
  %tobool = icmp ne i32 %call1, 0, !dbg !1250
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !1251

lor.lhs.false:                                    ; preds = %entry
  %0 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1252
  %call2 = call i32 @test_BN_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1670, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i32 0, i32 0), %struct.bignum_st* %0, i64 0), !dbg !1254
  %tobool3 = icmp ne i32 %call2, 0, !dbg !1254
  br i1 %tobool3, label %lor.lhs.false4, label %if.then, !dbg !1255

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %1 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1256
  %call5 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1671, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %1), !dbg !1257
  %tobool6 = icmp ne i32 %call5, 0, !dbg !1257
  br i1 %tobool6, label %lor.lhs.false7, label %if.then, !dbg !1258

lor.lhs.false7:                                   ; preds = %lor.lhs.false4
  %2 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1259
  %call8 = call i32 @test_BN_le_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1672, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %2), !dbg !1260
  %tobool9 = icmp ne i32 %call8, 0, !dbg !1260
  br i1 %tobool9, label %lor.lhs.false10, label %if.then, !dbg !1261

lor.lhs.false10:                                  ; preds = %lor.lhs.false7
  %3 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1262
  %call11 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1673, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %3), !dbg !1263
  %tobool12 = icmp ne i32 %call11, 0, !dbg !1263
  br i1 %tobool12, label %lor.lhs.false13, label %if.then, !dbg !1264

lor.lhs.false13:                                  ; preds = %lor.lhs.false10
  %4 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1265
  %call14 = call i32 @test_BN_even(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1674, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %4), !dbg !1266
  %tobool15 = icmp ne i32 %call14, 0, !dbg !1266
  br i1 %tobool15, label %if.end, label %if.then, !dbg !1267

if.then:                                          ; preds = %lor.lhs.false13, %lor.lhs.false10, %lor.lhs.false7, %lor.lhs.false4, %lor.lhs.false, %entry
  br label %err, !dbg !1269

if.end:                                           ; preds = %lor.lhs.false13
  %5 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1270
  call void @BN_free(%struct.bignum_st* %5), !dbg !1271
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1272
  %call16 = call i32 @parsedecBN(%struct.bignum_st** %bn, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.127, i32 0, i32 0)), !dbg !1273
  %call17 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1679, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i32 0, i32 0), i32 %call16, i32 3), !dbg !1275
  %tobool18 = icmp ne i32 %call17, 0, !dbg !1277
  br i1 %tobool18, label %lor.lhs.false19, label %if.then34, !dbg !1278

lor.lhs.false19:                                  ; preds = %if.end
  %6 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1279
  %call20 = call i32 @test_BN_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1680, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.127, i32 0, i32 0), %struct.bignum_st* %6, i64 256), !dbg !1281
  %tobool21 = icmp ne i32 %call20, 0, !dbg !1281
  br i1 %tobool21, label %lor.lhs.false22, label %if.then34, !dbg !1282

lor.lhs.false22:                                  ; preds = %lor.lhs.false19
  %7 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1283
  %call23 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1681, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %7), !dbg !1284
  %tobool24 = icmp ne i32 %call23, 0, !dbg !1284
  br i1 %tobool24, label %lor.lhs.false25, label %if.then34, !dbg !1285

lor.lhs.false25:                                  ; preds = %lor.lhs.false22
  %8 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1286
  %call26 = call i32 @test_BN_gt_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1682, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %8), !dbg !1287
  %tobool27 = icmp ne i32 %call26, 0, !dbg !1287
  br i1 %tobool27, label %lor.lhs.false28, label %if.then34, !dbg !1288

lor.lhs.false28:                                  ; preds = %lor.lhs.false25
  %9 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1289
  %call29 = call i32 @test_BN_ne_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1683, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %9), !dbg !1290
  %tobool30 = icmp ne i32 %call29, 0, !dbg !1290
  br i1 %tobool30, label %lor.lhs.false31, label %if.then34, !dbg !1291

lor.lhs.false31:                                  ; preds = %lor.lhs.false28
  %10 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1292
  %call32 = call i32 @test_BN_even(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1684, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %10), !dbg !1293
  %tobool33 = icmp ne i32 %call32, 0, !dbg !1293
  br i1 %tobool33, label %if.end35, label %if.then34, !dbg !1294

if.then34:                                        ; preds = %lor.lhs.false31, %lor.lhs.false28, %lor.lhs.false25, %lor.lhs.false22, %lor.lhs.false19, %if.end
  br label %err, !dbg !1295

if.end35:                                         ; preds = %lor.lhs.false31
  %11 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1296
  call void @BN_free(%struct.bignum_st* %11), !dbg !1297
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1298
  %call36 = call i32 @parsedecBN(%struct.bignum_st** %bn, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.129, i32 0, i32 0)), !dbg !1299
  %call37 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1689, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i32 0, i32 0), i32 %call36, i32 3), !dbg !1301
  %tobool38 = icmp ne i32 %call37, 0, !dbg !1303
  br i1 %tobool38, label %lor.lhs.false39, label %if.then54, !dbg !1304

lor.lhs.false39:                                  ; preds = %if.end35
  %12 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1305
  %call40 = call i32 @test_BN_abs_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1690, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.130, i32 0, i32 0), %struct.bignum_st* %12, i64 42), !dbg !1307
  %tobool41 = icmp ne i32 %call40, 0, !dbg !1307
  br i1 %tobool41, label %lor.lhs.false42, label %if.then54, !dbg !1308

lor.lhs.false42:                                  ; preds = %lor.lhs.false39
  %13 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1309
  %call43 = call i32 @test_BN_lt_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1691, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %13), !dbg !1310
  %tobool44 = icmp ne i32 %call43, 0, !dbg !1310
  br i1 %tobool44, label %lor.lhs.false45, label %if.then54, !dbg !1311

lor.lhs.false45:                                  ; preds = %lor.lhs.false42
  %14 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1312
  %call46 = call i32 @test_BN_le_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1692, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %14), !dbg !1313
  %tobool47 = icmp ne i32 %call46, 0, !dbg !1313
  br i1 %tobool47, label %lor.lhs.false48, label %if.then54, !dbg !1314

lor.lhs.false48:                                  ; preds = %lor.lhs.false45
  %15 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1315
  %call49 = call i32 @test_BN_ne_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1693, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %15), !dbg !1316
  %tobool50 = icmp ne i32 %call49, 0, !dbg !1316
  br i1 %tobool50, label %lor.lhs.false51, label %if.then54, !dbg !1317

lor.lhs.false51:                                  ; preds = %lor.lhs.false48
  %16 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1318
  %call52 = call i32 @test_BN_even(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1694, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %16), !dbg !1319
  %tobool53 = icmp ne i32 %call52, 0, !dbg !1319
  br i1 %tobool53, label %if.end55, label %if.then54, !dbg !1320

if.then54:                                        ; preds = %lor.lhs.false51, %lor.lhs.false48, %lor.lhs.false45, %lor.lhs.false42, %lor.lhs.false39, %if.end35
  br label %err, !dbg !1321

if.end55:                                         ; preds = %lor.lhs.false51
  %17 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1322
  call void @BN_free(%struct.bignum_st* %17), !dbg !1323
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1324
  %call56 = call i32 @parsedecBN(%struct.bignum_st** %bn, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0)), !dbg !1325
  %call57 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1699, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), i32 %call56, i32 1), !dbg !1327
  %tobool58 = icmp ne i32 %call57, 0, !dbg !1329
  br i1 %tobool58, label %lor.lhs.false59, label %if.then77, !dbg !1330

lor.lhs.false59:                                  ; preds = %if.end55
  %18 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1331
  %call60 = call i32 @test_BN_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1700, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), %struct.bignum_st* %18, i64 1), !dbg !1333
  %tobool61 = icmp ne i32 %call60, 0, !dbg !1333
  br i1 %tobool61, label %lor.lhs.false62, label %if.then77, !dbg !1334

lor.lhs.false62:                                  ; preds = %lor.lhs.false59
  %19 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1335
  %call63 = call i32 @test_BN_ne_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1701, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %19), !dbg !1336
  %tobool64 = icmp ne i32 %call63, 0, !dbg !1336
  br i1 %tobool64, label %lor.lhs.false65, label %if.then77, !dbg !1337

lor.lhs.false65:                                  ; preds = %lor.lhs.false62
  %20 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1338
  %call66 = call i32 @test_BN_gt_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1702, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %20), !dbg !1339
  %tobool67 = icmp ne i32 %call66, 0, !dbg !1339
  br i1 %tobool67, label %lor.lhs.false68, label %if.then77, !dbg !1340

lor.lhs.false68:                                  ; preds = %lor.lhs.false65
  %21 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1341
  %call69 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1703, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %21), !dbg !1342
  %tobool70 = icmp ne i32 %call69, 0, !dbg !1342
  br i1 %tobool70, label %lor.lhs.false71, label %if.then77, !dbg !1343

lor.lhs.false71:                                  ; preds = %lor.lhs.false68
  %22 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1344
  %call72 = call i32 @test_BN_eq_one(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1704, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %22), !dbg !1345
  %tobool73 = icmp ne i32 %call72, 0, !dbg !1345
  br i1 %tobool73, label %lor.lhs.false74, label %if.then77, !dbg !1346

lor.lhs.false74:                                  ; preds = %lor.lhs.false71
  %23 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1347
  %call75 = call i32 @test_BN_odd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1705, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %23), !dbg !1348
  %tobool76 = icmp ne i32 %call75, 0, !dbg !1348
  br i1 %tobool76, label %if.end78, label %if.then77, !dbg !1349

if.then77:                                        ; preds = %lor.lhs.false74, %lor.lhs.false71, %lor.lhs.false68, %lor.lhs.false65, %lor.lhs.false62, %lor.lhs.false59, %if.end55
  br label %err, !dbg !1350

if.end78:                                         ; preds = %lor.lhs.false74
  %24 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1351
  call void @BN_free(%struct.bignum_st* %24), !dbg !1352
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1353
  %call79 = call i32 @parsedecBN(%struct.bignum_st** %bn, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.134, i32 0, i32 0)), !dbg !1354
  %call80 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1710, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.133, i32 0, i32 0), i32 %call79, i32 2), !dbg !1356
  %tobool81 = icmp ne i32 %call80, 0, !dbg !1358
  br i1 %tobool81, label %lor.lhs.false82, label %if.then94, !dbg !1359

lor.lhs.false82:                                  ; preds = %if.end78
  %25 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1360
  %call83 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1711, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %25), !dbg !1362
  %tobool84 = icmp ne i32 %call83, 0, !dbg !1362
  br i1 %tobool84, label %lor.lhs.false85, label %if.then94, !dbg !1363

lor.lhs.false85:                                  ; preds = %lor.lhs.false82
  %26 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1364
  %call86 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1712, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %26), !dbg !1365
  %tobool87 = icmp ne i32 %call86, 0, !dbg !1365
  br i1 %tobool87, label %lor.lhs.false88, label %if.then94, !dbg !1366

lor.lhs.false88:                                  ; preds = %lor.lhs.false85
  %27 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1367
  %call89 = call i32 @test_BN_le_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1713, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %27), !dbg !1368
  %tobool90 = icmp ne i32 %call89, 0, !dbg !1368
  br i1 %tobool90, label %lor.lhs.false91, label %if.then94, !dbg !1369

lor.lhs.false91:                                  ; preds = %lor.lhs.false88
  %28 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1370
  %call92 = call i32 @test_BN_even(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1714, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %28), !dbg !1371
  %tobool93 = icmp ne i32 %call92, 0, !dbg !1371
  br i1 %tobool93, label %if.end95, label %if.then94, !dbg !1372

if.then94:                                        ; preds = %lor.lhs.false91, %lor.lhs.false88, %lor.lhs.false85, %lor.lhs.false82, %if.end78
  br label %err, !dbg !1373

if.end95:                                         ; preds = %lor.lhs.false91
  %29 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1374
  call void @BN_free(%struct.bignum_st* %29), !dbg !1375
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1376
  %call96 = call i32 @parsedecBN(%struct.bignum_st** %bn, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.136, i32 0, i32 0)), !dbg !1377
  %call97 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1719, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.133, i32 0, i32 0), i32 %call96, i32 2), !dbg !1379
  %tobool98 = icmp ne i32 %call97, 0, !dbg !1381
  br i1 %tobool98, label %lor.lhs.false99, label %if.then114, !dbg !1382

lor.lhs.false99:                                  ; preds = %if.end95
  %30 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1383
  %call100 = call i32 @test_BN_abs_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1720, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.130, i32 0, i32 0), %struct.bignum_st* %30, i64 42), !dbg !1385
  %tobool101 = icmp ne i32 %call100, 0, !dbg !1385
  br i1 %tobool101, label %lor.lhs.false102, label %if.then114, !dbg !1386

lor.lhs.false102:                                 ; preds = %lor.lhs.false99
  %31 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1387
  %call103 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1721, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %31), !dbg !1388
  %tobool104 = icmp ne i32 %call103, 0, !dbg !1388
  br i1 %tobool104, label %lor.lhs.false105, label %if.then114, !dbg !1389

lor.lhs.false105:                                 ; preds = %lor.lhs.false102
  %32 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1390
  %call106 = call i32 @test_BN_gt_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1722, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %32), !dbg !1391
  %tobool107 = icmp ne i32 %call106, 0, !dbg !1391
  br i1 %tobool107, label %lor.lhs.false108, label %if.then114, !dbg !1392

lor.lhs.false108:                                 ; preds = %lor.lhs.false105
  %33 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1393
  %call109 = call i32 @test_BN_ne_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1723, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %33), !dbg !1394
  %tobool110 = icmp ne i32 %call109, 0, !dbg !1394
  br i1 %tobool110, label %lor.lhs.false111, label %if.then114, !dbg !1395

lor.lhs.false111:                                 ; preds = %lor.lhs.false108
  %34 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1396
  %call112 = call i32 @test_BN_even(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1724, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %34), !dbg !1397
  %tobool113 = icmp ne i32 %call112, 0, !dbg !1397
  br i1 %tobool113, label %if.end115, label %if.then114, !dbg !1398

if.then114:                                       ; preds = %lor.lhs.false111, %lor.lhs.false108, %lor.lhs.false105, %lor.lhs.false102, %lor.lhs.false99, %if.end95
  br label %err, !dbg !1399

if.end115:                                        ; preds = %lor.lhs.false111
  store i32 1, i32* %st, align 4, !dbg !1400
  br label %err, !dbg !1401

err:                                              ; preds = %if.end115, %if.then114, %if.then94, %if.then77, %if.then54, %if.then34, %if.then
  %35 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1402
  call void @BN_free(%struct.bignum_st* %35), !dbg !1403
  %36 = load i32, i32* %st, align 4, !dbg !1404
  ret i32 %36, !dbg !1405
}

; Function Attrs: nounwind uwtable
define internal i32 @test_hex2bn() #0 !dbg !1406 {
entry:
  %bn = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %bn, metadata !1407, metadata !134), !dbg !1408
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1408
  call void @llvm.dbg.declare(metadata i32* %st, metadata !1409, metadata !134), !dbg !1410
  store i32 0, i32* %st, align 4, !dbg !1410
  %call = call i32 @parseBN(%struct.bignum_st** %bn, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i32 0, i32 0)), !dbg !1411
  %call1 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1738, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), i32 %call, i32 1), !dbg !1413
  %tobool = icmp ne i32 %call1, 0, !dbg !1415
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !1416

lor.lhs.false:                                    ; preds = %entry
  %0 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1417
  %call2 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1739, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %0), !dbg !1419
  %tobool3 = icmp ne i32 %call2, 0, !dbg !1419
  br i1 %tobool3, label %lor.lhs.false4, label %if.then, !dbg !1420

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %1 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1421
  %call5 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1740, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %1), !dbg !1422
  %tobool6 = icmp ne i32 %call5, 0, !dbg !1422
  br i1 %tobool6, label %lor.lhs.false7, label %if.then, !dbg !1423

lor.lhs.false7:                                   ; preds = %lor.lhs.false4
  %2 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1424
  %call8 = call i32 @test_BN_even(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1741, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %2), !dbg !1425
  %tobool9 = icmp ne i32 %call8, 0, !dbg !1425
  br i1 %tobool9, label %if.end, label %if.then, !dbg !1426

if.then:                                          ; preds = %lor.lhs.false7, %lor.lhs.false4, %lor.lhs.false, %entry
  br label %err, !dbg !1428

if.end:                                           ; preds = %lor.lhs.false7
  %3 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1429
  call void @BN_free(%struct.bignum_st* %3), !dbg !1430
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1431
  %call10 = call i32 @parseBN(%struct.bignum_st** %bn, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.127, i32 0, i32 0)), !dbg !1432
  %call11 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1746, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.138, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i32 0, i32 0), i32 %call10, i32 3), !dbg !1434
  %tobool12 = icmp ne i32 %call11, 0, !dbg !1436
  br i1 %tobool12, label %lor.lhs.false13, label %if.then28, !dbg !1437

lor.lhs.false13:                                  ; preds = %if.end
  %4 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1438
  %call14 = call i32 @test_BN_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1747, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.139, i32 0, i32 0), %struct.bignum_st* %4, i64 598), !dbg !1440
  %tobool15 = icmp ne i32 %call14, 0, !dbg !1440
  br i1 %tobool15, label %lor.lhs.false16, label %if.then28, !dbg !1441

lor.lhs.false16:                                  ; preds = %lor.lhs.false13
  %5 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1442
  %call17 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1748, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %5), !dbg !1443
  %tobool18 = icmp ne i32 %call17, 0, !dbg !1443
  br i1 %tobool18, label %lor.lhs.false19, label %if.then28, !dbg !1444

lor.lhs.false19:                                  ; preds = %lor.lhs.false16
  %6 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1445
  %call20 = call i32 @test_BN_gt_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1749, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %6), !dbg !1446
  %tobool21 = icmp ne i32 %call20, 0, !dbg !1446
  br i1 %tobool21, label %lor.lhs.false22, label %if.then28, !dbg !1447

lor.lhs.false22:                                  ; preds = %lor.lhs.false19
  %7 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1448
  %call23 = call i32 @test_BN_ne_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1750, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %7), !dbg !1449
  %tobool24 = icmp ne i32 %call23, 0, !dbg !1449
  br i1 %tobool24, label %lor.lhs.false25, label %if.then28, !dbg !1450

lor.lhs.false25:                                  ; preds = %lor.lhs.false22
  %8 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1451
  %call26 = call i32 @test_BN_even(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1751, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %8), !dbg !1452
  %tobool27 = icmp ne i32 %call26, 0, !dbg !1452
  br i1 %tobool27, label %if.end29, label %if.then28, !dbg !1453

if.then28:                                        ; preds = %lor.lhs.false25, %lor.lhs.false22, %lor.lhs.false19, %lor.lhs.false16, %lor.lhs.false13, %if.end
  br label %err, !dbg !1454

if.end29:                                         ; preds = %lor.lhs.false25
  %9 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1455
  call void @BN_free(%struct.bignum_st* %9), !dbg !1456
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1457
  %call30 = call i32 @parseBN(%struct.bignum_st** %bn, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.129, i32 0, i32 0)), !dbg !1458
  %call31 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1756, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.140, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i32 0, i32 0), i32 %call30, i32 3), !dbg !1460
  %tobool32 = icmp ne i32 %call31, 0, !dbg !1462
  br i1 %tobool32, label %lor.lhs.false33, label %if.then48, !dbg !1463

lor.lhs.false33:                                  ; preds = %if.end29
  %10 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1464
  %call34 = call i32 @test_BN_abs_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1757, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.141, i32 0, i32 0), %struct.bignum_st* %10, i64 66), !dbg !1466
  %tobool35 = icmp ne i32 %call34, 0, !dbg !1466
  br i1 %tobool35, label %lor.lhs.false36, label %if.then48, !dbg !1467

lor.lhs.false36:                                  ; preds = %lor.lhs.false33
  %11 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1468
  %call37 = call i32 @test_BN_lt_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1758, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %11), !dbg !1469
  %tobool38 = icmp ne i32 %call37, 0, !dbg !1469
  br i1 %tobool38, label %lor.lhs.false39, label %if.then48, !dbg !1470

lor.lhs.false39:                                  ; preds = %lor.lhs.false36
  %12 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1471
  %call40 = call i32 @test_BN_le_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1759, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %12), !dbg !1472
  %tobool41 = icmp ne i32 %call40, 0, !dbg !1472
  br i1 %tobool41, label %lor.lhs.false42, label %if.then48, !dbg !1473

lor.lhs.false42:                                  ; preds = %lor.lhs.false39
  %13 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1474
  %call43 = call i32 @test_BN_ne_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1760, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %13), !dbg !1475
  %tobool44 = icmp ne i32 %call43, 0, !dbg !1475
  br i1 %tobool44, label %lor.lhs.false45, label %if.then48, !dbg !1476

lor.lhs.false45:                                  ; preds = %lor.lhs.false42
  %14 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1477
  %call46 = call i32 @test_BN_even(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1761, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %14), !dbg !1478
  %tobool47 = icmp ne i32 %call46, 0, !dbg !1478
  br i1 %tobool47, label %if.end49, label %if.then48, !dbg !1479

if.then48:                                        ; preds = %lor.lhs.false45, %lor.lhs.false42, %lor.lhs.false39, %lor.lhs.false36, %lor.lhs.false33, %if.end29
  br label %err, !dbg !1480

if.end49:                                         ; preds = %lor.lhs.false45
  %15 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1481
  call void @BN_free(%struct.bignum_st* %15), !dbg !1482
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1483
  %call50 = call i32 @parseBN(%struct.bignum_st** %bn, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.143, i32 0, i32 0)), !dbg !1484
  %call51 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1766, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.142, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.133, i32 0, i32 0), i32 %call50, i32 2), !dbg !1486
  %tobool52 = icmp ne i32 %call51, 0, !dbg !1488
  br i1 %tobool52, label %lor.lhs.false53, label %if.then68, !dbg !1489

lor.lhs.false53:                                  ; preds = %if.end49
  %16 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1490
  %call54 = call i32 @test_BN_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1767, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.144, i32 0, i32 0), %struct.bignum_st* %16, i64 203), !dbg !1492
  %tobool55 = icmp ne i32 %call54, 0, !dbg !1492
  br i1 %tobool55, label %lor.lhs.false56, label %if.then68, !dbg !1493

lor.lhs.false56:                                  ; preds = %lor.lhs.false53
  %17 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1494
  %call57 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1768, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %17), !dbg !1495
  %tobool58 = icmp ne i32 %call57, 0, !dbg !1495
  br i1 %tobool58, label %lor.lhs.false59, label %if.then68, !dbg !1496

lor.lhs.false59:                                  ; preds = %lor.lhs.false56
  %18 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1497
  %call60 = call i32 @test_BN_gt_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1769, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %18), !dbg !1498
  %tobool61 = icmp ne i32 %call60, 0, !dbg !1498
  br i1 %tobool61, label %lor.lhs.false62, label %if.then68, !dbg !1499

lor.lhs.false62:                                  ; preds = %lor.lhs.false59
  %19 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1500
  %call63 = call i32 @test_BN_ne_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1770, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %19), !dbg !1501
  %tobool64 = icmp ne i32 %call63, 0, !dbg !1501
  br i1 %tobool64, label %lor.lhs.false65, label %if.then68, !dbg !1502

lor.lhs.false65:                                  ; preds = %lor.lhs.false62
  %20 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1503
  %call66 = call i32 @test_BN_odd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1771, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %20), !dbg !1504
  %tobool67 = icmp ne i32 %call66, 0, !dbg !1504
  br i1 %tobool67, label %if.end69, label %if.then68, !dbg !1505

if.then68:                                        ; preds = %lor.lhs.false65, %lor.lhs.false62, %lor.lhs.false59, %lor.lhs.false56, %lor.lhs.false53, %if.end49
  br label %err, !dbg !1506

if.end69:                                         ; preds = %lor.lhs.false65
  %21 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1507
  call void @BN_free(%struct.bignum_st* %21), !dbg !1508
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1509
  %call70 = call i32 @parseBN(%struct.bignum_st** %bn, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.134, i32 0, i32 0)), !dbg !1510
  %call71 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1776, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.133, i32 0, i32 0), i32 %call70, i32 2), !dbg !1512
  %tobool72 = icmp ne i32 %call71, 0, !dbg !1514
  br i1 %tobool72, label %lor.lhs.false73, label %if.then85, !dbg !1515

lor.lhs.false73:                                  ; preds = %if.end69
  %22 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1516
  %call74 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1777, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %22), !dbg !1518
  %tobool75 = icmp ne i32 %call74, 0, !dbg !1518
  br i1 %tobool75, label %lor.lhs.false76, label %if.then85, !dbg !1519

lor.lhs.false76:                                  ; preds = %lor.lhs.false73
  %23 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1520
  %call77 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1778, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %23), !dbg !1521
  %tobool78 = icmp ne i32 %call77, 0, !dbg !1521
  br i1 %tobool78, label %lor.lhs.false79, label %if.then85, !dbg !1522

lor.lhs.false79:                                  ; preds = %lor.lhs.false76
  %24 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1523
  %call80 = call i32 @test_BN_le_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1779, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %24), !dbg !1524
  %tobool81 = icmp ne i32 %call80, 0, !dbg !1524
  br i1 %tobool81, label %lor.lhs.false82, label %if.then85, !dbg !1525

lor.lhs.false82:                                  ; preds = %lor.lhs.false79
  %25 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1526
  %call83 = call i32 @test_BN_even(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1780, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %25), !dbg !1527
  %tobool84 = icmp ne i32 %call83, 0, !dbg !1527
  br i1 %tobool84, label %if.end86, label %if.then85, !dbg !1528

if.then85:                                        ; preds = %lor.lhs.false82, %lor.lhs.false79, %lor.lhs.false76, %lor.lhs.false73, %if.end69
  br label %err, !dbg !1529

if.end86:                                         ; preds = %lor.lhs.false82
  %26 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1530
  call void @BN_free(%struct.bignum_st* %26), !dbg !1531
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1532
  %call87 = call i32 @parseBN(%struct.bignum_st** %bn, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.147, i32 0, i32 0)), !dbg !1533
  %call88 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1785, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.146, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i32 0, i32 0), i32 %call87, i32 3), !dbg !1535
  %tobool89 = icmp ne i32 %call88, 0, !dbg !1537
  br i1 %tobool89, label %lor.lhs.false90, label %if.then105, !dbg !1538

lor.lhs.false90:                                  ; preds = %if.end86
  %27 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1539
  %call91 = call i32 @test_BN_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1786, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.148, i32 0, i32 0), %struct.bignum_st* %27, i64 2748), !dbg !1541
  %tobool92 = icmp ne i32 %call91, 0, !dbg !1541
  br i1 %tobool92, label %lor.lhs.false93, label %if.then105, !dbg !1542

lor.lhs.false93:                                  ; preds = %lor.lhs.false90
  %28 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1543
  %call94 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1787, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %28), !dbg !1544
  %tobool95 = icmp ne i32 %call94, 0, !dbg !1544
  br i1 %tobool95, label %lor.lhs.false96, label %if.then105, !dbg !1545

lor.lhs.false96:                                  ; preds = %lor.lhs.false93
  %29 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1546
  %call97 = call i32 @test_BN_gt_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1788, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %29), !dbg !1547
  %tobool98 = icmp ne i32 %call97, 0, !dbg !1547
  br i1 %tobool98, label %lor.lhs.false99, label %if.then105, !dbg !1548

lor.lhs.false99:                                  ; preds = %lor.lhs.false96
  %30 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1549
  %call100 = call i32 @test_BN_ne_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1789, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %30), !dbg !1550
  %tobool101 = icmp ne i32 %call100, 0, !dbg !1550
  br i1 %tobool101, label %lor.lhs.false102, label %if.then105, !dbg !1551

lor.lhs.false102:                                 ; preds = %lor.lhs.false99
  %31 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1552
  %call103 = call i32 @test_BN_even(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1790, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %31), !dbg !1553
  %tobool104 = icmp ne i32 %call103, 0, !dbg !1553
  br i1 %tobool104, label %if.end106, label %if.then105, !dbg !1554

if.then105:                                       ; preds = %lor.lhs.false102, %lor.lhs.false99, %lor.lhs.false96, %lor.lhs.false93, %lor.lhs.false90, %if.end86
  br label %err, !dbg !1555

if.end106:                                        ; preds = %lor.lhs.false102
  store i32 1, i32* %st, align 4, !dbg !1556
  br label %err, !dbg !1557

err:                                              ; preds = %if.end106, %if.then105, %if.then85, %if.then68, %if.then48, %if.then28, %if.then
  %32 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1558
  call void @BN_free(%struct.bignum_st* %32), !dbg !1559
  %33 = load i32, i32* %st, align 4, !dbg !1560
  ret i32 %33, !dbg !1561
}

; Function Attrs: nounwind uwtable
define internal i32 @test_asc2bn() #0 !dbg !1562 {
entry:
  %bn = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %bn, metadata !1563, metadata !134), !dbg !1564
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1564
  call void @llvm.dbg.declare(metadata i32* %st, metadata !1565, metadata !134), !dbg !1566
  store i32 0, i32* %st, align 4, !dbg !1566
  %call = call %struct.bignum_st* @BN_new(), !dbg !1567
  store %struct.bignum_st* %call, %struct.bignum_st** %bn, align 8, !dbg !1569
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !1570
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1804, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.115, i32 0, i32 0), i8* %0), !dbg !1571
  %tobool = icmp ne i32 %call1, 0, !dbg !1573
  br i1 %tobool, label %if.end, label %if.then, !dbg !1574

if.then:                                          ; preds = %entry
  br label %err, !dbg !1575

if.end:                                           ; preds = %entry
  %call2 = call i32 @BN_asc2bn(%struct.bignum_st** %bn, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i32 0, i32 0)), !dbg !1576
  %cmp = icmp ne i32 %call2, 0, !dbg !1578
  %conv = zext i1 %cmp to i32, !dbg !1578
  %call3 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1807, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.149, i32 0, i32 0), i32 %conv), !dbg !1579
  %tobool4 = icmp ne i32 %call3, 0, !dbg !1581
  br i1 %tobool4, label %lor.lhs.false, label %if.then10, !dbg !1582

lor.lhs.false:                                    ; preds = %if.end
  %1 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1583
  %call5 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1808, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %1), !dbg !1585
  %tobool6 = icmp ne i32 %call5, 0, !dbg !1585
  br i1 %tobool6, label %lor.lhs.false7, label %if.then10, !dbg !1586

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %2 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1587
  %call8 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1809, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %2), !dbg !1588
  %tobool9 = icmp ne i32 %call8, 0, !dbg !1588
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !1589

if.then10:                                        ; preds = %lor.lhs.false7, %lor.lhs.false, %if.end
  br label %err, !dbg !1591

if.end11:                                         ; preds = %lor.lhs.false7
  %call12 = call i32 @BN_asc2bn(%struct.bignum_st** %bn, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.127, i32 0, i32 0)), !dbg !1592
  %cmp13 = icmp ne i32 %call12, 0, !dbg !1594
  %conv14 = zext i1 %cmp13 to i32, !dbg !1594
  %call15 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1812, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.150, i32 0, i32 0), i32 %conv14), !dbg !1595
  %tobool16 = icmp ne i32 %call15, 0, !dbg !1597
  br i1 %tobool16, label %lor.lhs.false17, label %if.then23, !dbg !1598

lor.lhs.false17:                                  ; preds = %if.end11
  %3 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1599
  %call18 = call i32 @test_BN_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1813, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.127, i32 0, i32 0), %struct.bignum_st* %3, i64 256), !dbg !1601
  %tobool19 = icmp ne i32 %call18, 0, !dbg !1601
  br i1 %tobool19, label %lor.lhs.false20, label %if.then23, !dbg !1602

lor.lhs.false20:                                  ; preds = %lor.lhs.false17
  %4 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1603
  %call21 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1814, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %4), !dbg !1604
  %tobool22 = icmp ne i32 %call21, 0, !dbg !1604
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !1605

if.then23:                                        ; preds = %lor.lhs.false20, %lor.lhs.false17, %if.end11
  br label %err, !dbg !1606

if.end24:                                         ; preds = %lor.lhs.false20
  %call25 = call i32 @BN_asc2bn(%struct.bignum_st** %bn, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.129, i32 0, i32 0)), !dbg !1607
  %cmp26 = icmp ne i32 %call25, 0, !dbg !1609
  %conv27 = zext i1 %cmp26 to i32, !dbg !1609
  %call28 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1817, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.151, i32 0, i32 0), i32 %conv27), !dbg !1610
  %tobool29 = icmp ne i32 %call28, 0, !dbg !1612
  br i1 %tobool29, label %lor.lhs.false30, label %if.then36, !dbg !1613

lor.lhs.false30:                                  ; preds = %if.end24
  %5 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1614
  %call31 = call i32 @test_BN_abs_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1818, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.130, i32 0, i32 0), %struct.bignum_st* %5, i64 42), !dbg !1616
  %tobool32 = icmp ne i32 %call31, 0, !dbg !1616
  br i1 %tobool32, label %lor.lhs.false33, label %if.then36, !dbg !1617

lor.lhs.false33:                                  ; preds = %lor.lhs.false30
  %6 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1618
  %call34 = call i32 @test_BN_lt_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1819, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %6), !dbg !1619
  %tobool35 = icmp ne i32 %call34, 0, !dbg !1619
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !1620

if.then36:                                        ; preds = %lor.lhs.false33, %lor.lhs.false30, %if.end24
  br label %err, !dbg !1621

if.end37:                                         ; preds = %lor.lhs.false33
  %call38 = call i32 @BN_asc2bn(%struct.bignum_st** %bn, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.153, i32 0, i32 0)), !dbg !1622
  %cmp39 = icmp ne i32 %call38, 0, !dbg !1624
  %conv40 = zext i1 %cmp39 to i32, !dbg !1624
  %call41 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1822, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.152, i32 0, i32 0), i32 %conv40), !dbg !1625
  %tobool42 = icmp ne i32 %call41, 0, !dbg !1627
  br i1 %tobool42, label %lor.lhs.false43, label %if.then49, !dbg !1628

lor.lhs.false43:                                  ; preds = %if.end37
  %7 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1629
  %call44 = call i32 @test_BN_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1823, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.153, i32 0, i32 0), %struct.bignum_st* %7, i64 4660), !dbg !1631
  %tobool45 = icmp ne i32 %call44, 0, !dbg !1631
  br i1 %tobool45, label %lor.lhs.false46, label %if.then49, !dbg !1632

lor.lhs.false46:                                  ; preds = %lor.lhs.false43
  %8 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1633
  %call47 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1824, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %8), !dbg !1634
  %tobool48 = icmp ne i32 %call47, 0, !dbg !1634
  br i1 %tobool48, label %if.end50, label %if.then49, !dbg !1635

if.then49:                                        ; preds = %lor.lhs.false46, %lor.lhs.false43, %if.end37
  br label %err, !dbg !1636

if.end50:                                         ; preds = %lor.lhs.false46
  %call51 = call i32 @BN_asc2bn(%struct.bignum_st** %bn, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.155, i32 0, i32 0)), !dbg !1637
  %cmp52 = icmp ne i32 %call51, 0, !dbg !1639
  %conv53 = zext i1 %cmp52 to i32, !dbg !1639
  %call54 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1827, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.154, i32 0, i32 0), i32 %conv53), !dbg !1640
  %tobool55 = icmp ne i32 %call54, 0, !dbg !1642
  br i1 %tobool55, label %lor.lhs.false56, label %if.then62, !dbg !1643

lor.lhs.false56:                                  ; preds = %if.end50
  %9 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1644
  %call57 = call i32 @test_BN_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1828, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.153, i32 0, i32 0), %struct.bignum_st* %9, i64 4660), !dbg !1646
  %tobool58 = icmp ne i32 %call57, 0, !dbg !1646
  br i1 %tobool58, label %lor.lhs.false59, label %if.then62, !dbg !1647

lor.lhs.false59:                                  ; preds = %lor.lhs.false56
  %10 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1648
  %call60 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1829, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %10), !dbg !1649
  %tobool61 = icmp ne i32 %call60, 0, !dbg !1649
  br i1 %tobool61, label %if.end63, label %if.then62, !dbg !1650

if.then62:                                        ; preds = %lor.lhs.false59, %lor.lhs.false56, %if.end50
  br label %err, !dbg !1651

if.end63:                                         ; preds = %lor.lhs.false59
  %call64 = call i32 @BN_asc2bn(%struct.bignum_st** %bn, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.157, i32 0, i32 0)), !dbg !1652
  %cmp65 = icmp ne i32 %call64, 0, !dbg !1654
  %conv66 = zext i1 %cmp65 to i32, !dbg !1654
  %call67 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1832, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.156, i32 0, i32 0), i32 %conv66), !dbg !1655
  %tobool68 = icmp ne i32 %call67, 0, !dbg !1657
  br i1 %tobool68, label %lor.lhs.false69, label %if.then75, !dbg !1658

lor.lhs.false69:                                  ; preds = %if.end63
  %11 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1659
  %call70 = call i32 @test_BN_abs_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1833, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.158, i32 0, i32 0), %struct.bignum_st* %11, i64 43981), !dbg !1661
  %tobool71 = icmp ne i32 %call70, 0, !dbg !1661
  br i1 %tobool71, label %lor.lhs.false72, label %if.then75, !dbg !1662

lor.lhs.false72:                                  ; preds = %lor.lhs.false69
  %12 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1663
  %call73 = call i32 @test_BN_lt_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1834, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %12), !dbg !1664
  %tobool74 = icmp ne i32 %call73, 0, !dbg !1664
  br i1 %tobool74, label %if.end76, label %if.then75, !dbg !1665

if.then75:                                        ; preds = %lor.lhs.false72, %lor.lhs.false69, %if.end63
  br label %err, !dbg !1666

if.end76:                                         ; preds = %lor.lhs.false72
  %call77 = call i32 @BN_asc2bn(%struct.bignum_st** %bn, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.134, i32 0, i32 0)), !dbg !1667
  %cmp78 = icmp ne i32 %call77, 0, !dbg !1669
  %conv79 = zext i1 %cmp78 to i32, !dbg !1669
  %call80 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1837, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.159, i32 0, i32 0), i32 %conv79), !dbg !1670
  %tobool81 = icmp ne i32 %call80, 0, !dbg !1672
  br i1 %tobool81, label %lor.lhs.false82, label %if.then88, !dbg !1673

lor.lhs.false82:                                  ; preds = %if.end76
  %13 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1674
  %call83 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1838, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %13), !dbg !1676
  %tobool84 = icmp ne i32 %call83, 0, !dbg !1676
  br i1 %tobool84, label %lor.lhs.false85, label %if.then88, !dbg !1677

lor.lhs.false85:                                  ; preds = %lor.lhs.false82
  %14 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1678
  %call86 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1839, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %14), !dbg !1679
  %tobool87 = icmp ne i32 %call86, 0, !dbg !1679
  br i1 %tobool87, label %if.end89, label %if.then88, !dbg !1680

if.then88:                                        ; preds = %lor.lhs.false85, %lor.lhs.false82, %if.end76
  br label %err, !dbg !1681

if.end89:                                         ; preds = %lor.lhs.false85
  %call90 = call i32 @BN_asc2bn(%struct.bignum_st** %bn, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.161, i32 0, i32 0)), !dbg !1682
  %cmp91 = icmp ne i32 %call90, 0, !dbg !1684
  %conv92 = zext i1 %cmp91 to i32, !dbg !1684
  %call93 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1842, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.160, i32 0, i32 0), i32 %conv92), !dbg !1685
  %tobool94 = icmp ne i32 %call93, 0, !dbg !1687
  br i1 %tobool94, label %lor.lhs.false95, label %if.then101, !dbg !1688

lor.lhs.false95:                                  ; preds = %if.end89
  %15 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1689
  %call96 = call i32 @test_BN_eq_word(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1843, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.162, i32 0, i32 0), %struct.bignum_st* %15, i64 123), !dbg !1691
  %tobool97 = icmp ne i32 %call96, 0, !dbg !1691
  br i1 %tobool97, label %lor.lhs.false98, label %if.then101, !dbg !1692

lor.lhs.false98:                                  ; preds = %lor.lhs.false95
  %16 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1693
  %call99 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1844, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), %struct.bignum_st* %16), !dbg !1694
  %tobool100 = icmp ne i32 %call99, 0, !dbg !1694
  br i1 %tobool100, label %if.end102, label %if.then101, !dbg !1695

if.then101:                                       ; preds = %lor.lhs.false98, %lor.lhs.false95, %if.end89
  br label %err, !dbg !1696

if.end102:                                        ; preds = %lor.lhs.false98
  store i32 1, i32* %st, align 4, !dbg !1697
  br label %err, !dbg !1698

err:                                              ; preds = %if.end102, %if.then101, %if.then88, %if.then75, %if.then62, %if.then49, %if.then36, %if.then23, %if.then10, %if.then
  %17 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1699
  call void @BN_free(%struct.bignum_st* %17), !dbg !1700
  %18 = load i32, i32* %st, align 4, !dbg !1701
  ret i32 %18, !dbg !1702
}

declare void @add_all_tests(i8*, i32 (i32)*, i32, i32) #2

; Function Attrs: nounwind uwtable
define internal i32 @test_mpi(i32 %i) #0 !dbg !1703 {
entry:
  %i.addr = alloca i32, align 4
  %scratch = alloca [8 x i8], align 1
  %test = alloca %struct.mpitest_st*, align 8
  %mpi_len = alloca i64, align 8
  %mpi_len2 = alloca i64, align 8
  %bn = alloca %struct.bignum_st*, align 8
  %bn2 = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !1706, metadata !134), !dbg !1707
  call void @llvm.dbg.declare(metadata [8 x i8]* %scratch, metadata !1708, metadata !134), !dbg !1713
  call void @llvm.dbg.declare(metadata %struct.mpitest_st** %test, metadata !1714, metadata !134), !dbg !1716
  %0 = load i32, i32* %i.addr, align 4, !dbg !1717
  %idxprom = sext i32 %0 to i64, !dbg !1718
  %arrayidx = getelementptr inbounds [6 x %struct.mpitest_st], [6 x %struct.mpitest_st]* @kMPITests, i64 0, i64 %idxprom, !dbg !1718
  store %struct.mpitest_st* %arrayidx, %struct.mpitest_st** %test, align 8, !dbg !1716
  call void @llvm.dbg.declare(metadata i64* %mpi_len, metadata !1719, metadata !134), !dbg !1720
  call void @llvm.dbg.declare(metadata i64* %mpi_len2, metadata !1721, metadata !134), !dbg !1722
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %bn, metadata !1723, metadata !134), !dbg !1724
  store %struct.bignum_st* null, %struct.bignum_st** %bn, align 8, !dbg !1724
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %bn2, metadata !1725, metadata !134), !dbg !1726
  store %struct.bignum_st* null, %struct.bignum_st** %bn2, align 8, !dbg !1726
  call void @llvm.dbg.declare(metadata i32* %st, metadata !1727, metadata !134), !dbg !1728
  store i32 0, i32* %st, align 4, !dbg !1728
  %call = call %struct.bignum_st* @BN_new(), !dbg !1729
  store %struct.bignum_st* %call, %struct.bignum_st** %bn, align 8, !dbg !1731
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !1732
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1871, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.115, i32 0, i32 0), i8* %1), !dbg !1733
  %tobool = icmp ne i32 %call1, 0, !dbg !1735
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !1736

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.mpitest_st*, %struct.mpitest_st** %test, align 8, !dbg !1737
  %base10 = getelementptr inbounds %struct.mpitest_st, %struct.mpitest_st* %2, i32 0, i32 0, !dbg !1739
  %3 = load i8*, i8** %base10, align 8, !dbg !1739
  %call2 = call i32 @BN_asc2bn(%struct.bignum_st** %bn, i8* %3), !dbg !1740
  %cmp = icmp ne i32 %call2, 0, !dbg !1741
  %conv = zext i1 %cmp to i32, !dbg !1741
  %call3 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1872, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.163, i32 0, i32 0), i32 %conv), !dbg !1742
  %tobool4 = icmp ne i32 %call3, 0, !dbg !1744
  br i1 %tobool4, label %if.end, label %if.then, !dbg !1745

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %err, !dbg !1747

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1748
  %call5 = call i32 @BN_bn2mpi(%struct.bignum_st* %4, i8* null), !dbg !1749
  %conv6 = sext i32 %call5 to i64, !dbg !1749
  store i64 %conv6, i64* %mpi_len, align 8, !dbg !1750
  %5 = load i64, i64* %mpi_len, align 8, !dbg !1751
  %call7 = call i32 @test_size_t_le(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1875, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.164, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.165, i32 0, i32 0), i64 %5, i64 8), !dbg !1753
  %tobool8 = icmp ne i32 %call7, 0, !dbg !1753
  br i1 %tobool8, label %if.end10, label %if.then9, !dbg !1754

if.then9:                                         ; preds = %if.end
  br label %err, !dbg !1755

if.end10:                                         ; preds = %if.end
  %6 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1756
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %scratch, i32 0, i32 0, !dbg !1758
  %call11 = call i32 @BN_bn2mpi(%struct.bignum_st* %6, i8* %arraydecay), !dbg !1759
  %conv12 = sext i32 %call11 to i64, !dbg !1759
  store i64 %conv12, i64* %mpi_len2, align 8, !dbg !1760
  %7 = load i64, i64* %mpi_len, align 8, !dbg !1761
  %call13 = call i32 @test_size_t_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1878, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.166, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.164, i32 0, i32 0), i64 %conv12, i64 %7), !dbg !1762
  %tobool14 = icmp ne i32 %call13, 0, !dbg !1764
  br i1 %tobool14, label %lor.lhs.false15, label %if.then20, !dbg !1765

lor.lhs.false15:                                  ; preds = %if.end10
  %8 = load %struct.mpitest_st*, %struct.mpitest_st** %test, align 8, !dbg !1766
  %mpi = getelementptr inbounds %struct.mpitest_st, %struct.mpitest_st* %8, i32 0, i32 1, !dbg !1768
  %9 = load i8*, i8** %mpi, align 8, !dbg !1768
  %10 = load %struct.mpitest_st*, %struct.mpitest_st** %test, align 8, !dbg !1769
  %mpi_len16 = getelementptr inbounds %struct.mpitest_st, %struct.mpitest_st* %10, i32 0, i32 2, !dbg !1770
  %11 = load i64, i64* %mpi_len16, align 8, !dbg !1770
  %arraydecay17 = getelementptr inbounds [8 x i8], [8 x i8]* %scratch, i32 0, i32 0, !dbg !1771
  %12 = load i64, i64* %mpi_len, align 8, !dbg !1772
  %call18 = call i32 @test_mem_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1879, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.167, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.168, i32 0, i32 0), i8* %9, i64 %11, i8* %arraydecay17, i64 %12), !dbg !1773
  %tobool19 = icmp ne i32 %call18, 0, !dbg !1773
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !1774

if.then20:                                        ; preds = %lor.lhs.false15, %if.end10
  br label %err, !dbg !1775

if.end21:                                         ; preds = %lor.lhs.false15
  %arraydecay22 = getelementptr inbounds [8 x i8], [8 x i8]* %scratch, i32 0, i32 0, !dbg !1776
  %13 = load i64, i64* %mpi_len, align 8, !dbg !1778
  %conv23 = trunc i64 %13 to i32, !dbg !1778
  %call24 = call %struct.bignum_st* @BN_mpi2bn(i8* %arraydecay22, i32 %conv23, %struct.bignum_st* null), !dbg !1779
  store %struct.bignum_st* %call24, %struct.bignum_st** %bn2, align 8, !dbg !1780
  %14 = bitcast %struct.bignum_st* %call24 to i8*, !dbg !1781
  %call25 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1882, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.169, i32 0, i32 0), i8* %14), !dbg !1782
  %tobool26 = icmp ne i32 %call25, 0, !dbg !1784
  br i1 %tobool26, label %if.end28, label %if.then27, !dbg !1785

if.then27:                                        ; preds = %if.end21
  br label %err, !dbg !1786

if.end28:                                         ; preds = %if.end21
  %15 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1787
  %16 = load %struct.bignum_st*, %struct.bignum_st** %bn2, align 8, !dbg !1789
  %call29 = call i32 @test_BN_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1885, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.170, i32 0, i32 0), %struct.bignum_st* %15, %struct.bignum_st* %16), !dbg !1790
  %tobool30 = icmp ne i32 %call29, 0, !dbg !1790
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !1791

if.then31:                                        ; preds = %if.end28
  %17 = load %struct.bignum_st*, %struct.bignum_st** %bn2, align 8, !dbg !1792
  call void @BN_free(%struct.bignum_st* %17), !dbg !1794
  br label %err, !dbg !1795

if.end32:                                         ; preds = %if.end28
  %18 = load %struct.bignum_st*, %struct.bignum_st** %bn2, align 8, !dbg !1796
  call void @BN_free(%struct.bignum_st* %18), !dbg !1797
  store i32 1, i32* %st, align 4, !dbg !1798
  br label %err, !dbg !1799

err:                                              ; preds = %if.end32, %if.then31, %if.then27, %if.then20, %if.then9, %if.then
  %19 = load %struct.bignum_st*, %struct.bignum_st** %bn, align 8, !dbg !1800
  call void @BN_free(%struct.bignum_st* %19), !dbg !1801
  %20 = load i32, i32* %st, align 4, !dbg !1802
  ret i32 %20, !dbg !1803
}

; Function Attrs: nounwind uwtable
define internal i32 @test_negzero() #0 !dbg !1804 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca %struct.bignum_st*, align 8
  %c = alloca %struct.bignum_st*, align 8
  %d = alloca %struct.bignum_st*, align 8
  %numerator = alloca %struct.bignum_st*, align 8
  %denominator = alloca %struct.bignum_st*, align 8
  %consttime = alloca i32, align 4
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !1805, metadata !134), !dbg !1806
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !1806
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b, metadata !1807, metadata !134), !dbg !1808
  store %struct.bignum_st* null, %struct.bignum_st** %b, align 8, !dbg !1808
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !1809, metadata !134), !dbg !1810
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !1810
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %d, metadata !1811, metadata !134), !dbg !1812
  store %struct.bignum_st* null, %struct.bignum_st** %d, align 8, !dbg !1812
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %numerator, metadata !1813, metadata !134), !dbg !1814
  store %struct.bignum_st* null, %struct.bignum_st** %numerator, align 8, !dbg !1814
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %denominator, metadata !1815, metadata !134), !dbg !1816
  store %struct.bignum_st* null, %struct.bignum_st** %denominator, align 8, !dbg !1816
  call void @llvm.dbg.declare(metadata i32* %consttime, metadata !1817, metadata !134), !dbg !1818
  call void @llvm.dbg.declare(metadata i32* %st, metadata !1819, metadata !134), !dbg !1820
  store i32 0, i32* %st, align 4, !dbg !1820
  %call = call %struct.bignum_st* @BN_new(), !dbg !1821
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !1823
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !1824
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1929, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %0), !dbg !1825
  %tobool = icmp ne i32 %call1, 0, !dbg !1827
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !1828

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !1829
  store %struct.bignum_st* %call2, %struct.bignum_st** %b, align 8, !dbg !1831
  %1 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !1832
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1930, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i32 0, i32 0), i8* %1), !dbg !1833
  %tobool4 = icmp ne i32 %call3, 0, !dbg !1835
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !1836

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !1837
  store %struct.bignum_st* %call6, %struct.bignum_st** %c, align 8, !dbg !1838
  %2 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !1839
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1931, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %2), !dbg !1840
  %tobool8 = icmp ne i32 %call7, 0, !dbg !1841
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !1842

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %call10 = call %struct.bignum_st* @BN_new(), !dbg !1843
  store %struct.bignum_st* %call10, %struct.bignum_st** %d, align 8, !dbg !1844
  %3 = bitcast %struct.bignum_st* %call10 to i8*, !dbg !1845
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1932, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i8* %3), !dbg !1846
  %tobool12 = icmp ne i32 %call11, 0, !dbg !1847
  br i1 %tobool12, label %if.end, label %if.then, !dbg !1848

if.then:                                          ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !1850

if.end:                                           ; preds = %lor.lhs.false9
  %4 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !1851
  %call13 = call i32 @BN_set_word(%struct.bignum_st* %4, i64 1), !dbg !1853
  %cmp = icmp ne i32 %call13, 0, !dbg !1854
  %conv = zext i1 %cmp to i32, !dbg !1854
  %call14 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1936, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.179, i32 0, i32 0), i32 %conv), !dbg !1855
  %tobool15 = icmp ne i32 %call14, 0, !dbg !1857
  br i1 %tobool15, label %if.end17, label %if.then16, !dbg !1858

if.then16:                                        ; preds = %if.end
  br label %err, !dbg !1859

if.end17:                                         ; preds = %if.end
  %5 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !1860
  call void @BN_set_negative(%struct.bignum_st* %5, i32 1), !dbg !1861
  %6 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1862
  %call18 = call i32 @BN_set_word(%struct.bignum_st* %6, i64 0), !dbg !1863
  %7 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !1864
  %8 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !1866
  %9 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1867
  %10 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !1868
  %call19 = call i32 @BN_mul(%struct.bignum_st* %7, %struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_ctx* %10), !dbg !1869
  %cmp20 = icmp ne i32 %call19, 0, !dbg !1870
  %conv21 = zext i1 %cmp20 to i32, !dbg !1870
  %call22 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1940, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.180, i32 0, i32 0), i32 %conv21), !dbg !1871
  %tobool23 = icmp ne i32 %call22, 0, !dbg !1873
  br i1 %tobool23, label %if.end25, label %if.then24, !dbg !1874

if.then24:                                        ; preds = %if.end17
  br label %err, !dbg !1875

if.end25:                                         ; preds = %if.end17
  %11 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !1876
  %call26 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1942, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.51, i32 0, i32 0), %struct.bignum_st* %11), !dbg !1878
  %tobool27 = icmp ne i32 %call26, 0, !dbg !1878
  br i1 %tobool27, label %lor.lhs.false28, label %if.then31, !dbg !1879

lor.lhs.false28:                                  ; preds = %if.end25
  %12 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !1880
  %call29 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1943, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.51, i32 0, i32 0), %struct.bignum_st* %12), !dbg !1882
  %tobool30 = icmp ne i32 %call29, 0, !dbg !1882
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !1883

if.then31:                                        ; preds = %lor.lhs.false28, %if.end25
  br label %err, !dbg !1884

if.end32:                                         ; preds = %lor.lhs.false28
  store i32 0, i32* %consttime, align 4, !dbg !1885
  br label %for.cond, !dbg !1887

for.cond:                                         ; preds = %for.inc, %if.end32
  %13 = load i32, i32* %consttime, align 4, !dbg !1888
  %cmp33 = icmp slt i32 %13, 2, !dbg !1891
  br i1 %cmp33, label %for.body, label %for.end, !dbg !1892

for.body:                                         ; preds = %for.cond
  %call35 = call %struct.bignum_st* @BN_new(), !dbg !1893
  store %struct.bignum_st* %call35, %struct.bignum_st** %numerator, align 8, !dbg !1896
  %14 = bitcast %struct.bignum_st* %call35 to i8*, !dbg !1897
  %call36 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1947, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.181, i32 0, i32 0), i8* %14), !dbg !1898
  %tobool37 = icmp ne i32 %call36, 0, !dbg !1900
  br i1 %tobool37, label %lor.lhs.false38, label %if.then42, !dbg !1901

lor.lhs.false38:                                  ; preds = %for.body
  %call39 = call %struct.bignum_st* @BN_new(), !dbg !1902
  store %struct.bignum_st* %call39, %struct.bignum_st** %denominator, align 8, !dbg !1904
  %15 = bitcast %struct.bignum_st* %call39 to i8*, !dbg !1905
  %call40 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1948, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.182, i32 0, i32 0), i8* %15), !dbg !1906
  %tobool41 = icmp ne i32 %call40, 0, !dbg !1908
  br i1 %tobool41, label %if.end43, label %if.then42, !dbg !1909

if.then42:                                        ; preds = %lor.lhs.false38, %for.body
  br label %err, !dbg !1911

if.end43:                                         ; preds = %lor.lhs.false38
  %16 = load i32, i32* %consttime, align 4, !dbg !1912
  %tobool44 = icmp ne i32 %16, 0, !dbg !1912
  br i1 %tobool44, label %if.then45, label %if.end46, !dbg !1914

if.then45:                                        ; preds = %if.end43
  %17 = load %struct.bignum_st*, %struct.bignum_st** %numerator, align 8, !dbg !1915
  call void @BN_set_flags(%struct.bignum_st* %17, i32 4), !dbg !1917
  %18 = load %struct.bignum_st*, %struct.bignum_st** %denominator, align 8, !dbg !1918
  call void @BN_set_flags(%struct.bignum_st* %18, i32 4), !dbg !1919
  br label %if.end46, !dbg !1920

if.end46:                                         ; preds = %if.then45, %if.end43
  %19 = load %struct.bignum_st*, %struct.bignum_st** %numerator, align 8, !dbg !1921
  %call47 = call i32 @BN_set_word(%struct.bignum_st* %19, i64 1), !dbg !1923
  %cmp48 = icmp ne i32 %call47, 0, !dbg !1924
  %conv49 = zext i1 %cmp48 to i32, !dbg !1924
  %call50 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1955, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.183, i32 0, i32 0), i32 %conv49), !dbg !1925
  %tobool51 = icmp ne i32 %call50, 0, !dbg !1927
  br i1 %tobool51, label %lor.lhs.false52, label %if.then58, !dbg !1928

lor.lhs.false52:                                  ; preds = %if.end46
  %20 = load %struct.bignum_st*, %struct.bignum_st** %denominator, align 8, !dbg !1929
  %call53 = call i32 @BN_set_word(%struct.bignum_st* %20, i64 2), !dbg !1931
  %cmp54 = icmp ne i32 %call53, 0, !dbg !1932
  %conv55 = zext i1 %cmp54 to i32, !dbg !1932
  %call56 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1956, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.184, i32 0, i32 0), i32 %conv55), !dbg !1933
  %tobool57 = icmp ne i32 %call56, 0, !dbg !1935
  br i1 %tobool57, label %if.end59, label %if.then58, !dbg !1936

if.then58:                                        ; preds = %lor.lhs.false52, %if.end46
  br label %err, !dbg !1937

if.end59:                                         ; preds = %lor.lhs.false52
  %21 = load %struct.bignum_st*, %struct.bignum_st** %numerator, align 8, !dbg !1938
  call void @BN_set_negative(%struct.bignum_st* %21, i32 1), !dbg !1939
  %22 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !1940
  %23 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1942
  %24 = load %struct.bignum_st*, %struct.bignum_st** %numerator, align 8, !dbg !1943
  %25 = load %struct.bignum_st*, %struct.bignum_st** %denominator, align 8, !dbg !1944
  %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !1945
  %call60 = call i32 @BN_div(%struct.bignum_st* %22, %struct.bignum_st* %23, %struct.bignum_st* %24, %struct.bignum_st* %25, %struct.bignum_ctx* %26), !dbg !1946
  %cmp61 = icmp ne i32 %call60, 0, !dbg !1947
  %conv62 = zext i1 %cmp61 to i32, !dbg !1947
  %call63 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1959, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.185, i32 0, i32 0), i32 %conv62), !dbg !1948
  %tobool64 = icmp ne i32 %call63, 0, !dbg !1950
  br i1 %tobool64, label %lor.lhs.false65, label %if.then71, !dbg !1951

lor.lhs.false65:                                  ; preds = %if.end59
  %27 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !1952
  %call66 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1960, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0), %struct.bignum_st* %27), !dbg !1954
  %tobool67 = icmp ne i32 %call66, 0, !dbg !1954
  br i1 %tobool67, label %lor.lhs.false68, label %if.then71, !dbg !1955

lor.lhs.false68:                                  ; preds = %lor.lhs.false65
  %28 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !1956
  %call69 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1961, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0), %struct.bignum_st* %28), !dbg !1957
  %tobool70 = icmp ne i32 %call69, 0, !dbg !1957
  br i1 %tobool70, label %if.end72, label %if.then71, !dbg !1958

if.then71:                                        ; preds = %lor.lhs.false68, %lor.lhs.false65, %if.end59
  br label %err, !dbg !1959

if.end72:                                         ; preds = %lor.lhs.false68
  %29 = load %struct.bignum_st*, %struct.bignum_st** %denominator, align 8, !dbg !1960
  %call73 = call i32 @BN_set_word(%struct.bignum_st* %29, i64 1), !dbg !1962
  %cmp74 = icmp ne i32 %call73, 0, !dbg !1963
  %conv75 = zext i1 %cmp74 to i32, !dbg !1963
  %call76 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1965, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.186, i32 0, i32 0), i32 %conv75), !dbg !1964
  %tobool77 = icmp ne i32 %call76, 0, !dbg !1966
  br i1 %tobool77, label %lor.lhs.false78, label %if.then90, !dbg !1967

lor.lhs.false78:                                  ; preds = %if.end72
  %30 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !1968
  %31 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1970
  %32 = load %struct.bignum_st*, %struct.bignum_st** %numerator, align 8, !dbg !1971
  %33 = load %struct.bignum_st*, %struct.bignum_st** %denominator, align 8, !dbg !1972
  %34 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !1973
  %call79 = call i32 @BN_div(%struct.bignum_st* %30, %struct.bignum_st* %31, %struct.bignum_st* %32, %struct.bignum_st* %33, %struct.bignum_ctx* %34), !dbg !1974
  %cmp80 = icmp ne i32 %call79, 0, !dbg !1975
  %conv81 = zext i1 %cmp80 to i32, !dbg !1975
  %call82 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1966, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.185, i32 0, i32 0), i32 %conv81), !dbg !1976
  %tobool83 = icmp ne i32 %call82, 0, !dbg !1978
  br i1 %tobool83, label %lor.lhs.false84, label %if.then90, !dbg !1979

lor.lhs.false84:                                  ; preds = %lor.lhs.false78
  %35 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1980
  %call85 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1967, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.187, i32 0, i32 0), %struct.bignum_st* %35), !dbg !1981
  %tobool86 = icmp ne i32 %call85, 0, !dbg !1981
  br i1 %tobool86, label %lor.lhs.false87, label %if.then90, !dbg !1982

lor.lhs.false87:                                  ; preds = %lor.lhs.false84
  %36 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !1983
  %call88 = call i32 @test_BN_ge_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1968, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.187, i32 0, i32 0), %struct.bignum_st* %36), !dbg !1984
  %tobool89 = icmp ne i32 %call88, 0, !dbg !1984
  br i1 %tobool89, label %if.end91, label %if.then90, !dbg !1985

if.then90:                                        ; preds = %lor.lhs.false87, %lor.lhs.false84, %lor.lhs.false78, %if.end72
  br label %err, !dbg !1986

if.end91:                                         ; preds = %lor.lhs.false87
  %37 = load %struct.bignum_st*, %struct.bignum_st** %numerator, align 8, !dbg !1987
  call void @BN_free(%struct.bignum_st* %37), !dbg !1988
  %38 = load %struct.bignum_st*, %struct.bignum_st** %denominator, align 8, !dbg !1989
  call void @BN_free(%struct.bignum_st* %38), !dbg !1990
  store %struct.bignum_st* null, %struct.bignum_st** %denominator, align 8, !dbg !1991
  store %struct.bignum_st* null, %struct.bignum_st** %numerator, align 8, !dbg !1992
  br label %for.inc, !dbg !1993

for.inc:                                          ; preds = %if.end91
  %39 = load i32, i32* %consttime, align 4, !dbg !1994
  %inc = add nsw i32 %39, 1, !dbg !1994
  store i32 %inc, i32* %consttime, align 4, !dbg !1994
  br label %for.cond, !dbg !1996, !llvm.loop !1997

for.end:                                          ; preds = %for.cond
  %40 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !1999
  %call92 = call i32 @BN_set_word(%struct.bignum_st* %40, i64 0), !dbg !2000
  %41 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2001
  call void @BN_set_negative(%struct.bignum_st* %41, i32 1), !dbg !2002
  %42 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2003
  %call93 = call i32 @BN_is_negative(%struct.bignum_st* %42), !dbg !2005
  %tobool94 = icmp ne i32 %call93, 0, !dbg !2005
  br i1 %tobool94, label %if.then95, label %if.end96, !dbg !2006

if.then95:                                        ; preds = %for.end
  br label %err, !dbg !2007

if.end96:                                         ; preds = %for.end
  store i32 1, i32* %st, align 4, !dbg !2008
  br label %err, !dbg !2009

err:                                              ; preds = %if.end96, %if.then95, %if.then90, %if.then71, %if.then58, %if.then42, %if.then31, %if.then24, %if.then16, %if.then
  %43 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2010
  call void @BN_free(%struct.bignum_st* %43), !dbg !2011
  %44 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2012
  call void @BN_free(%struct.bignum_st* %44), !dbg !2013
  %45 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2014
  call void @BN_free(%struct.bignum_st* %45), !dbg !2015
  %46 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !2016
  call void @BN_free(%struct.bignum_st* %46), !dbg !2017
  %47 = load %struct.bignum_st*, %struct.bignum_st** %numerator, align 8, !dbg !2018
  call void @BN_free(%struct.bignum_st* %47), !dbg !2019
  %48 = load %struct.bignum_st*, %struct.bignum_st** %denominator, align 8, !dbg !2020
  call void @BN_free(%struct.bignum_st* %48), !dbg !2021
  %49 = load i32, i32* %st, align 4, !dbg !2022
  ret i32 %49, !dbg !2023
}

; Function Attrs: nounwind uwtable
define internal i32 @test_badmod() #0 !dbg !2024 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca %struct.bignum_st*, align 8
  %zero = alloca %struct.bignum_st*, align 8
  %mont = alloca %struct.bn_mont_ctx_st*, align 8
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !2025, metadata !134), !dbg !2026
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !2026
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b, metadata !2027, metadata !134), !dbg !2028
  store %struct.bignum_st* null, %struct.bignum_st** %b, align 8, !dbg !2028
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %zero, metadata !2029, metadata !134), !dbg !2030
  store %struct.bignum_st* null, %struct.bignum_st** %zero, align 8, !dbg !2030
  call void @llvm.dbg.declare(metadata %struct.bn_mont_ctx_st** %mont, metadata !2031, metadata !134), !dbg !2032
  store %struct.bn_mont_ctx_st* null, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !2032
  call void @llvm.dbg.declare(metadata i32* %st, metadata !2033, metadata !134), !dbg !2034
  store i32 0, i32* %st, align 4, !dbg !2034
  %call = call %struct.bignum_st* @BN_new(), !dbg !2035
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !2037
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !2038
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1998, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %0), !dbg !2039
  %tobool = icmp ne i32 %call1, 0, !dbg !2041
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2042

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !2043
  store %struct.bignum_st* %call2, %struct.bignum_st** %b, align 8, !dbg !2045
  %1 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !2046
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1999, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i32 0, i32 0), i8* %1), !dbg !2047
  %tobool4 = icmp ne i32 %call3, 0, !dbg !2049
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !2050

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !2051
  store %struct.bignum_st* %call6, %struct.bignum_st** %zero, align 8, !dbg !2052
  %2 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !2053
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2000, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.188, i32 0, i32 0), i8* %2), !dbg !2054
  %tobool8 = icmp ne i32 %call7, 0, !dbg !2055
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !2056

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %call10 = call %struct.bn_mont_ctx_st* @BN_MONT_CTX_new(), !dbg !2057
  store %struct.bn_mont_ctx_st* %call10, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !2058
  %3 = bitcast %struct.bn_mont_ctx_st* %call10 to i8*, !dbg !2059
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2001, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.60, i32 0, i32 0), i8* %3), !dbg !2060
  %tobool12 = icmp ne i32 %call11, 0, !dbg !2061
  br i1 %tobool12, label %if.end, label %if.then, !dbg !2062

if.then:                                          ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !2064

if.end:                                           ; preds = %lor.lhs.false9
  %4 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !2065
  %call13 = call i32 @BN_set_word(%struct.bignum_st* %4, i64 0), !dbg !2066
  %5 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2067
  %6 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2069
  %call14 = call %struct.bignum_st* @BN_value_one(), !dbg !2070
  %7 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !2071
  %8 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !2072
  %call15 = call i32 @BN_div(%struct.bignum_st* %5, %struct.bignum_st* %6, %struct.bignum_st* %call14, %struct.bignum_st* %7, %struct.bignum_ctx* %8), !dbg !2073
  %cmp = icmp ne i32 %call15, 0, !dbg !2075
  %conv = zext i1 %cmp to i32, !dbg !2075
  %call16 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2005, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.189, i32 0, i32 0), i32 %conv), !dbg !2076
  %tobool17 = icmp ne i32 %call16, 0, !dbg !2078
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !2079

if.then18:                                        ; preds = %if.end
  br label %err, !dbg !2080

if.end19:                                         ; preds = %if.end
  call void @ERR_clear_error(), !dbg !2081
  %9 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2082
  %call20 = call %struct.bignum_st* @BN_value_one(), !dbg !2084
  %call21 = call %struct.bignum_st* @BN_value_one(), !dbg !2085
  %10 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !2087
  %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !2088
  %call22 = call i32 @BN_mod_mul(%struct.bignum_st* %9, %struct.bignum_st* %call20, %struct.bignum_st* %call21, %struct.bignum_st* %10, %struct.bignum_ctx* %11), !dbg !2089
  %cmp23 = icmp ne i32 %call22, 0, !dbg !2091
  %conv24 = zext i1 %cmp23 to i32, !dbg !2091
  %call25 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2009, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.190, i32 0, i32 0), i32 %conv24), !dbg !2092
  %tobool26 = icmp ne i32 %call25, 0, !dbg !2094
  br i1 %tobool26, label %if.end28, label %if.then27, !dbg !2095

if.then27:                                        ; preds = %if.end19
  br label %err, !dbg !2096

if.end28:                                         ; preds = %if.end19
  call void @ERR_clear_error(), !dbg !2097
  %12 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2098
  %call29 = call %struct.bignum_st* @BN_value_one(), !dbg !2100
  %call30 = call %struct.bignum_st* @BN_value_one(), !dbg !2101
  %13 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !2103
  %14 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !2104
  %call31 = call i32 @BN_mod_exp(%struct.bignum_st* %12, %struct.bignum_st* %call29, %struct.bignum_st* %call30, %struct.bignum_st* %13, %struct.bignum_ctx* %14), !dbg !2105
  %cmp32 = icmp ne i32 %call31, 0, !dbg !2107
  %conv33 = zext i1 %cmp32 to i32, !dbg !2107
  %call34 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2013, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.191, i32 0, i32 0), i32 %conv33), !dbg !2108
  %tobool35 = icmp ne i32 %call34, 0, !dbg !2110
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !2111

if.then36:                                        ; preds = %if.end28
  br label %err, !dbg !2112

if.end37:                                         ; preds = %if.end28
  call void @ERR_clear_error(), !dbg !2113
  %15 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2114
  %call38 = call %struct.bignum_st* @BN_value_one(), !dbg !2116
  %call39 = call %struct.bignum_st* @BN_value_one(), !dbg !2117
  %16 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !2119
  %17 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !2120
  %call40 = call i32 @BN_mod_exp_mont(%struct.bignum_st* %15, %struct.bignum_st* %call38, %struct.bignum_st* %call39, %struct.bignum_st* %16, %struct.bignum_ctx* %17, %struct.bn_mont_ctx_st* null), !dbg !2121
  %cmp41 = icmp ne i32 %call40, 0, !dbg !2123
  %conv42 = zext i1 %cmp41 to i32, !dbg !2123
  %call43 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2018, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.192, i32 0, i32 0), i32 %conv42), !dbg !2124
  %tobool44 = icmp ne i32 %call43, 0, !dbg !2126
  br i1 %tobool44, label %if.end46, label %if.then45, !dbg !2127

if.then45:                                        ; preds = %if.end37
  br label %err, !dbg !2128

if.end46:                                         ; preds = %if.end37
  call void @ERR_clear_error(), !dbg !2129
  %18 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2130
  %call47 = call %struct.bignum_st* @BN_value_one(), !dbg !2132
  %call48 = call %struct.bignum_st* @BN_value_one(), !dbg !2133
  %19 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !2135
  %20 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !2136
  %call49 = call i32 @BN_mod_exp_mont_consttime(%struct.bignum_st* %18, %struct.bignum_st* %call47, %struct.bignum_st* %call48, %struct.bignum_st* %19, %struct.bignum_ctx* %20, %struct.bn_mont_ctx_st* null), !dbg !2137
  %cmp50 = icmp ne i32 %call49, 0, !dbg !2139
  %conv51 = zext i1 %cmp50 to i32, !dbg !2139
  %call52 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2023, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.193, i32 0, i32 0), i32 %conv51), !dbg !2140
  %tobool53 = icmp ne i32 %call52, 0, !dbg !2142
  br i1 %tobool53, label %if.end55, label %if.then54, !dbg !2143

if.then54:                                        ; preds = %if.end46
  br label %err, !dbg !2144

if.end55:                                         ; preds = %if.end46
  call void @ERR_clear_error(), !dbg !2145
  %21 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !2146
  %22 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !2148
  %23 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !2149
  %call56 = call i32 @BN_MONT_CTX_set(%struct.bn_mont_ctx_st* %21, %struct.bignum_st* %22, %struct.bignum_ctx* %23), !dbg !2150
  %cmp57 = icmp ne i32 %call56, 0, !dbg !2151
  %conv58 = zext i1 %cmp57 to i32, !dbg !2151
  %call59 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2027, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.194, i32 0, i32 0), i32 %conv58), !dbg !2152
  %tobool60 = icmp ne i32 %call59, 0, !dbg !2154
  br i1 %tobool60, label %if.end62, label %if.then61, !dbg !2155

if.then61:                                        ; preds = %if.end55
  br label %err, !dbg !2156

if.end62:                                         ; preds = %if.end55
  call void @ERR_clear_error(), !dbg !2157
  %24 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2158
  %call63 = call i32 @BN_set_word(%struct.bignum_st* %24, i64 16), !dbg !2160
  %cmp64 = icmp ne i32 %call63, 0, !dbg !2161
  %conv65 = zext i1 %cmp64 to i32, !dbg !2161
  %call66 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2032, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.195, i32 0, i32 0), i32 %conv65), !dbg !2162
  %tobool67 = icmp ne i32 %call66, 0, !dbg !2164
  br i1 %tobool67, label %if.end69, label %if.then68, !dbg !2165

if.then68:                                        ; preds = %if.end62
  br label %err, !dbg !2166

if.end69:                                         ; preds = %if.end62
  %25 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !2167
  %26 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2169
  %27 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !2170
  %call70 = call i32 @BN_MONT_CTX_set(%struct.bn_mont_ctx_st* %25, %struct.bignum_st* %26, %struct.bignum_ctx* %27), !dbg !2171
  %cmp71 = icmp ne i32 %call70, 0, !dbg !2172
  %conv72 = zext i1 %cmp71 to i32, !dbg !2172
  %call73 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2035, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.196, i32 0, i32 0), i32 %conv72), !dbg !2173
  %tobool74 = icmp ne i32 %call73, 0, !dbg !2175
  br i1 %tobool74, label %if.end76, label %if.then75, !dbg !2176

if.then75:                                        ; preds = %if.end69
  br label %err, !dbg !2177

if.end76:                                         ; preds = %if.end69
  call void @ERR_clear_error(), !dbg !2178
  %28 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2179
  %call77 = call %struct.bignum_st* @BN_value_one(), !dbg !2181
  %call78 = call %struct.bignum_st* @BN_value_one(), !dbg !2182
  %29 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2184
  %30 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !2185
  %call79 = call i32 @BN_mod_exp_mont(%struct.bignum_st* %28, %struct.bignum_st* %call77, %struct.bignum_st* %call78, %struct.bignum_st* %29, %struct.bignum_ctx* %30, %struct.bn_mont_ctx_st* null), !dbg !2186
  %cmp80 = icmp ne i32 %call79, 0, !dbg !2188
  %conv81 = zext i1 %cmp80 to i32, !dbg !2188
  %call82 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2040, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.197, i32 0, i32 0), i32 %conv81), !dbg !2189
  %tobool83 = icmp ne i32 %call82, 0, !dbg !2191
  br i1 %tobool83, label %if.end85, label %if.then84, !dbg !2192

if.then84:                                        ; preds = %if.end76
  br label %err, !dbg !2193

if.end85:                                         ; preds = %if.end76
  call void @ERR_clear_error(), !dbg !2194
  %31 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2195
  %call86 = call %struct.bignum_st* @BN_value_one(), !dbg !2197
  %call87 = call %struct.bignum_st* @BN_value_one(), !dbg !2198
  %32 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2200
  %33 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !2201
  %call88 = call i32 @BN_mod_exp_mont_consttime(%struct.bignum_st* %31, %struct.bignum_st* %call86, %struct.bignum_st* %call87, %struct.bignum_st* %32, %struct.bignum_ctx* %33, %struct.bn_mont_ctx_st* null), !dbg !2202
  %cmp89 = icmp ne i32 %call88, 0, !dbg !2204
  %conv90 = zext i1 %cmp89 to i32, !dbg !2204
  %call91 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2045, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.198, i32 0, i32 0), i32 %conv90), !dbg !2205
  %tobool92 = icmp ne i32 %call91, 0, !dbg !2207
  br i1 %tobool92, label %if.end94, label %if.then93, !dbg !2208

if.then93:                                        ; preds = %if.end85
  br label %err, !dbg !2209

if.end94:                                         ; preds = %if.end85
  call void @ERR_clear_error(), !dbg !2210
  store i32 1, i32* %st, align 4, !dbg !2211
  br label %err, !dbg !2212

err:                                              ; preds = %if.end94, %if.then93, %if.then84, %if.then75, %if.then68, %if.then61, %if.then54, %if.then45, %if.then36, %if.then27, %if.then18, %if.then
  %34 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2213
  call void @BN_free(%struct.bignum_st* %34), !dbg !2214
  %35 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2215
  call void @BN_free(%struct.bignum_st* %35), !dbg !2216
  %36 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !2217
  call void @BN_free(%struct.bignum_st* %36), !dbg !2218
  %37 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !2219
  call void @BN_MONT_CTX_free(%struct.bn_mont_ctx_st* %37), !dbg !2220
  %38 = load i32, i32* %st, align 4, !dbg !2221
  ret i32 %38, !dbg !2222
}

; Function Attrs: nounwind uwtable
define internal i32 @test_expmodzero() #0 !dbg !2223 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %r = alloca %struct.bignum_st*, align 8
  %zero = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !2224, metadata !134), !dbg !2225
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !2225
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %r, metadata !2226, metadata !134), !dbg !2227
  store %struct.bignum_st* null, %struct.bignum_st** %r, align 8, !dbg !2227
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %zero, metadata !2228, metadata !134), !dbg !2229
  store %struct.bignum_st* null, %struct.bignum_st** %zero, align 8, !dbg !2229
  call void @llvm.dbg.declare(metadata i32* %st, metadata !2230, metadata !134), !dbg !2231
  store i32 0, i32* %st, align 4, !dbg !2231
  %call = call %struct.bignum_st* @BN_new(), !dbg !2232
  store %struct.bignum_st* %call, %struct.bignum_st** %zero, align 8, !dbg !2234
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !2235
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2063, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.188, i32 0, i32 0), i8* %0), !dbg !2236
  %tobool = icmp ne i32 %call1, 0, !dbg !2238
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2239

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !2240
  store %struct.bignum_st* %call2, %struct.bignum_st** %a, align 8, !dbg !2242
  %1 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !2243
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2064, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %1), !dbg !2244
  %tobool4 = icmp ne i32 %call3, 0, !dbg !2246
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !2247

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !2248
  store %struct.bignum_st* %call6, %struct.bignum_st** %r, align 8, !dbg !2249
  %2 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !2250
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2065, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100, i32 0, i32 0), i8* %2), !dbg !2251
  %tobool8 = icmp ne i32 %call7, 0, !dbg !2252
  br i1 %tobool8, label %if.end, label %if.then, !dbg !2253

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !2255

if.end:                                           ; preds = %lor.lhs.false5
  %3 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !2256
  %call9 = call i32 @BN_set_word(%struct.bignum_st* %3, i64 0), !dbg !2257
  %4 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2258
  %5 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2260
  %6 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !2261
  %call10 = call %struct.bignum_st* @BN_value_one(), !dbg !2262
  %call11 = call i32 @BN_mod_exp(%struct.bignum_st* %4, %struct.bignum_st* %5, %struct.bignum_st* %6, %struct.bignum_st* %call10, %struct.bignum_ctx* null), !dbg !2263
  %cmp = icmp ne i32 %call11, 0, !dbg !2265
  %conv = zext i1 %cmp to i32, !dbg !2265
  %call12 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2069, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.199, i32 0, i32 0), i32 %conv), !dbg !2266
  %tobool13 = icmp ne i32 %call12, 0, !dbg !2268
  br i1 %tobool13, label %lor.lhs.false14, label %if.then47, !dbg !2269

lor.lhs.false14:                                  ; preds = %if.end
  %7 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2270
  %call15 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2070, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.200, i32 0, i32 0), %struct.bignum_st* %7), !dbg !2272
  %tobool16 = icmp ne i32 %call15, 0, !dbg !2272
  br i1 %tobool16, label %lor.lhs.false17, label %if.then47, !dbg !2273

lor.lhs.false17:                                  ; preds = %lor.lhs.false14
  %8 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2274
  %9 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2275
  %10 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !2276
  %call18 = call %struct.bignum_st* @BN_value_one(), !dbg !2277
  %call19 = call i32 @BN_mod_exp_mont(%struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_st* %10, %struct.bignum_st* %call18, %struct.bignum_ctx* null, %struct.bn_mont_ctx_st* null), !dbg !2278
  %cmp20 = icmp ne i32 %call19, 0, !dbg !2280
  %conv21 = zext i1 %cmp20 to i32, !dbg !2280
  %call22 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2072, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.201, i32 0, i32 0), i32 %conv21), !dbg !2281
  %tobool23 = icmp ne i32 %call22, 0, !dbg !2283
  br i1 %tobool23, label %lor.lhs.false24, label %if.then47, !dbg !2284

lor.lhs.false24:                                  ; preds = %lor.lhs.false17
  %11 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2285
  %call25 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2073, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.200, i32 0, i32 0), %struct.bignum_st* %11), !dbg !2286
  %tobool26 = icmp ne i32 %call25, 0, !dbg !2286
  br i1 %tobool26, label %lor.lhs.false27, label %if.then47, !dbg !2287

lor.lhs.false27:                                  ; preds = %lor.lhs.false24
  %12 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2288
  %13 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2289
  %14 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !2290
  %call28 = call %struct.bignum_st* @BN_value_one(), !dbg !2291
  %call29 = call i32 @BN_mod_exp_mont_consttime(%struct.bignum_st* %12, %struct.bignum_st* %13, %struct.bignum_st* %14, %struct.bignum_st* %call28, %struct.bignum_ctx* null, %struct.bn_mont_ctx_st* null), !dbg !2292
  %cmp30 = icmp ne i32 %call29, 0, !dbg !2293
  %conv31 = zext i1 %cmp30 to i32, !dbg !2293
  %call32 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2076, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.202, i32 0, i32 0), i32 %conv31), !dbg !2294
  %tobool33 = icmp ne i32 %call32, 0, !dbg !2295
  br i1 %tobool33, label %lor.lhs.false34, label %if.then47, !dbg !2296

lor.lhs.false34:                                  ; preds = %lor.lhs.false27
  %15 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2297
  %call35 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2077, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.200, i32 0, i32 0), %struct.bignum_st* %15), !dbg !2298
  %tobool36 = icmp ne i32 %call35, 0, !dbg !2298
  br i1 %tobool36, label %lor.lhs.false37, label %if.then47, !dbg !2299

lor.lhs.false37:                                  ; preds = %lor.lhs.false34
  %16 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2300
  %17 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !2301
  %call38 = call %struct.bignum_st* @BN_value_one(), !dbg !2302
  %call39 = call i32 @BN_mod_exp_mont_word(%struct.bignum_st* %16, i64 42, %struct.bignum_st* %17, %struct.bignum_st* %call38, %struct.bignum_ctx* null, %struct.bn_mont_ctx_st* null), !dbg !2303
  %cmp40 = icmp ne i32 %call39, 0, !dbg !2304
  %conv41 = zext i1 %cmp40 to i32, !dbg !2304
  %call42 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2079, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.203, i32 0, i32 0), i32 %conv41), !dbg !2305
  %tobool43 = icmp ne i32 %call42, 0, !dbg !2306
  br i1 %tobool43, label %lor.lhs.false44, label %if.then47, !dbg !2307

lor.lhs.false44:                                  ; preds = %lor.lhs.false37
  %18 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2308
  %call45 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2080, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.200, i32 0, i32 0), %struct.bignum_st* %18), !dbg !2309
  %tobool46 = icmp ne i32 %call45, 0, !dbg !2309
  br i1 %tobool46, label %if.end48, label %if.then47, !dbg !2310

if.then47:                                        ; preds = %lor.lhs.false44, %lor.lhs.false37, %lor.lhs.false34, %lor.lhs.false27, %lor.lhs.false24, %lor.lhs.false17, %lor.lhs.false14, %if.end
  br label %err, !dbg !2311

if.end48:                                         ; preds = %lor.lhs.false44
  store i32 1, i32* %st, align 4, !dbg !2312
  br label %err, !dbg !2313

err:                                              ; preds = %if.end48, %if.then47, %if.then
  %19 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !2314
  call void @BN_free(%struct.bignum_st* %19), !dbg !2315
  %20 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2316
  call void @BN_free(%struct.bignum_st* %20), !dbg !2317
  %21 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2318
  call void @BN_free(%struct.bignum_st* %21), !dbg !2319
  %22 = load i32, i32* %st, align 4, !dbg !2320
  ret i32 %22, !dbg !2321
}

; Function Attrs: nounwind uwtable
define internal i32 @test_expmodone() #0 !dbg !2322 {
entry:
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  %r = alloca %struct.bignum_st*, align 8
  %a = alloca %struct.bignum_st*, align 8
  %p = alloca %struct.bignum_st*, align 8
  %m = alloca %struct.bignum_st*, align 8
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !2323, metadata !134), !dbg !2324
  store i32 0, i32* %ret, align 4, !dbg !2324
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2325, metadata !134), !dbg !2326
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %r, metadata !2327, metadata !134), !dbg !2328
  %call = call %struct.bignum_st* @BN_new(), !dbg !2329
  store %struct.bignum_st* %call, %struct.bignum_st** %r, align 8, !dbg !2328
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !2330, metadata !134), !dbg !2331
  %call1 = call %struct.bignum_st* @BN_new(), !dbg !2332
  store %struct.bignum_st* %call1, %struct.bignum_st** %a, align 8, !dbg !2331
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %p, metadata !2333, metadata !134), !dbg !2334
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !2335
  store %struct.bignum_st* %call2, %struct.bignum_st** %p, align 8, !dbg !2334
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %m, metadata !2336, metadata !134), !dbg !2337
  %call3 = call %struct.bignum_st* @BN_new(), !dbg !2338
  store %struct.bignum_st* %call3, %struct.bignum_st** %m, align 8, !dbg !2337
  %0 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2339
  %1 = bitcast %struct.bignum_st* %0 to i8*, !dbg !2339
  %call4 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2099, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.200, i32 0, i32 0), i8* %1), !dbg !2341
  %tobool = icmp ne i32 %call4, 0, !dbg !2341
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2342

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2343
  %3 = bitcast %struct.bignum_st* %2 to i8*, !dbg !2343
  %call5 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2100, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.94, i32 0, i32 0), i8* %3), !dbg !2345
  %tobool6 = icmp ne i32 %call5, 0, !dbg !2345
  br i1 %tobool6, label %lor.lhs.false7, label %if.then, !dbg !2346

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %4 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !2347
  %5 = bitcast %struct.bignum_st* %4 to i8*, !dbg !2347
  %call8 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2101, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.204, i32 0, i32 0), i8* %5), !dbg !2348
  %tobool9 = icmp ne i32 %call8, 0, !dbg !2348
  br i1 %tobool9, label %lor.lhs.false10, label %if.then, !dbg !2349

lor.lhs.false10:                                  ; preds = %lor.lhs.false7
  %6 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !2350
  %7 = bitcast %struct.bignum_st* %6 to i8*, !dbg !2350
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2102, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.204, i32 0, i32 0), i8* %7), !dbg !2351
  %tobool12 = icmp ne i32 %call11, 0, !dbg !2351
  br i1 %tobool12, label %lor.lhs.false13, label %if.then, !dbg !2352

lor.lhs.false13:                                  ; preds = %lor.lhs.false10
  %8 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !2353
  %9 = bitcast %struct.bignum_st* %8 to i8*, !dbg !2353
  %call14 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.205, i32 0, i32 0), i8* %9), !dbg !2354
  %tobool15 = icmp ne i32 %call14, 0, !dbg !2354
  br i1 %tobool15, label %lor.lhs.false16, label %if.then, !dbg !2355

lor.lhs.false16:                                  ; preds = %lor.lhs.false13
  %10 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2356
  %call17 = call i32 @BN_set_word(%struct.bignum_st* %10, i64 1), !dbg !2357
  %cmp = icmp ne i32 %call17, 0, !dbg !2358
  %conv = zext i1 %cmp to i32, !dbg !2358
  %call18 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2104, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.179, i32 0, i32 0), i32 %conv), !dbg !2359
  %tobool19 = icmp ne i32 %call18, 0, !dbg !2361
  br i1 %tobool19, label %lor.lhs.false20, label %if.then, !dbg !2362

lor.lhs.false20:                                  ; preds = %lor.lhs.false16
  %11 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !2363
  %call21 = call i32 @BN_set_word(%struct.bignum_st* %11, i64 0), !dbg !2364
  %cmp22 = icmp ne i32 %call21, 0, !dbg !2365
  %conv23 = zext i1 %cmp22 to i32, !dbg !2365
  %call24 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2105, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.206, i32 0, i32 0), i32 %conv23), !dbg !2366
  %tobool25 = icmp ne i32 %call24, 0, !dbg !2367
  br i1 %tobool25, label %lor.lhs.false26, label %if.then, !dbg !2368

lor.lhs.false26:                                  ; preds = %lor.lhs.false20
  %12 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !2369
  %call27 = call i32 @BN_set_word(%struct.bignum_st* %12, i64 1), !dbg !2370
  %cmp28 = icmp ne i32 %call27, 0, !dbg !2371
  %conv29 = zext i1 %cmp28 to i32, !dbg !2371
  %call30 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2106, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.207, i32 0, i32 0), i32 %conv29), !dbg !2372
  %tobool31 = icmp ne i32 %call30, 0, !dbg !2373
  br i1 %tobool31, label %if.end, label %if.then, !dbg !2374

if.then:                                          ; preds = %lor.lhs.false26, %lor.lhs.false20, %lor.lhs.false16, %lor.lhs.false13, %lor.lhs.false10, %lor.lhs.false7, %lor.lhs.false, %entry
  br label %err, !dbg !2376

if.end:                                           ; preds = %lor.lhs.false26
  store i32 0, i32* %i, align 4, !dbg !2377
  br label %for.cond, !dbg !2379

for.cond:                                         ; preds = %for.inc, %if.end
  %13 = load i32, i32* %i, align 4, !dbg !2380
  %cmp32 = icmp slt i32 %13, 2, !dbg !2383
  br i1 %cmp32, label %for.body, label %for.end, !dbg !2384

for.body:                                         ; preds = %for.cond
  %14 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2385
  %15 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2388
  %16 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !2389
  %17 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !2390
  %call34 = call i32 @BN_mod_exp(%struct.bignum_st* %14, %struct.bignum_st* %15, %struct.bignum_st* %16, %struct.bignum_st* %17, %struct.bignum_ctx* null), !dbg !2391
  %cmp35 = icmp ne i32 %call34, 0, !dbg !2392
  %conv36 = zext i1 %cmp35 to i32, !dbg !2392
  %call37 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2111, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.208, i32 0, i32 0), i32 %conv36), !dbg !2393
  %tobool38 = icmp ne i32 %call37, 0, !dbg !2395
  br i1 %tobool38, label %lor.lhs.false39, label %if.then87, !dbg !2396

lor.lhs.false39:                                  ; preds = %for.body
  %18 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2397
  %call40 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2112, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.200, i32 0, i32 0), %struct.bignum_st* %18), !dbg !2399
  %tobool41 = icmp ne i32 %call40, 0, !dbg !2399
  br i1 %tobool41, label %lor.lhs.false42, label %if.then87, !dbg !2400

lor.lhs.false42:                                  ; preds = %lor.lhs.false39
  %19 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2401
  %20 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2402
  %21 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !2403
  %22 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !2404
  %call43 = call i32 @BN_mod_exp_mont(%struct.bignum_st* %19, %struct.bignum_st* %20, %struct.bignum_st* %21, %struct.bignum_st* %22, %struct.bignum_ctx* null, %struct.bn_mont_ctx_st* null), !dbg !2405
  %cmp44 = icmp ne i32 %call43, 0, !dbg !2406
  %conv45 = zext i1 %cmp44 to i32, !dbg !2406
  %call46 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2113, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.209, i32 0, i32 0), i32 %conv45), !dbg !2407
  %tobool47 = icmp ne i32 %call46, 0, !dbg !2409
  br i1 %tobool47, label %lor.lhs.false48, label %if.then87, !dbg !2410

lor.lhs.false48:                                  ; preds = %lor.lhs.false42
  %23 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2411
  %call49 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2114, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.200, i32 0, i32 0), %struct.bignum_st* %23), !dbg !2412
  %tobool50 = icmp ne i32 %call49, 0, !dbg !2412
  br i1 %tobool50, label %lor.lhs.false51, label %if.then87, !dbg !2413

lor.lhs.false51:                                  ; preds = %lor.lhs.false48
  %24 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2414
  %25 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2415
  %26 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !2416
  %27 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !2417
  %call52 = call i32 @BN_mod_exp_mont_consttime(%struct.bignum_st* %24, %struct.bignum_st* %25, %struct.bignum_st* %26, %struct.bignum_st* %27, %struct.bignum_ctx* null, %struct.bn_mont_ctx_st* null), !dbg !2418
  %cmp53 = icmp ne i32 %call52, 0, !dbg !2419
  %conv54 = zext i1 %cmp53 to i32, !dbg !2419
  %call55 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2115, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.210, i32 0, i32 0), i32 %conv54), !dbg !2420
  %tobool56 = icmp ne i32 %call55, 0, !dbg !2421
  br i1 %tobool56, label %lor.lhs.false57, label %if.then87, !dbg !2422

lor.lhs.false57:                                  ; preds = %lor.lhs.false51
  %28 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2423
  %call58 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2116, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.200, i32 0, i32 0), %struct.bignum_st* %28), !dbg !2424
  %tobool59 = icmp ne i32 %call58, 0, !dbg !2424
  br i1 %tobool59, label %lor.lhs.false60, label %if.then87, !dbg !2425

lor.lhs.false60:                                  ; preds = %lor.lhs.false57
  %29 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2426
  %30 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !2427
  %31 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !2428
  %call61 = call i32 @BN_mod_exp_mont_word(%struct.bignum_st* %29, i64 1, %struct.bignum_st* %30, %struct.bignum_st* %31, %struct.bignum_ctx* null, %struct.bn_mont_ctx_st* null), !dbg !2429
  %cmp62 = icmp ne i32 %call61, 0, !dbg !2430
  %conv63 = zext i1 %cmp62 to i32, !dbg !2430
  %call64 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2117, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.211, i32 0, i32 0), i32 %conv63), !dbg !2431
  %tobool65 = icmp ne i32 %call64, 0, !dbg !2432
  br i1 %tobool65, label %lor.lhs.false66, label %if.then87, !dbg !2433

lor.lhs.false66:                                  ; preds = %lor.lhs.false60
  %32 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2434
  %call67 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2118, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.200, i32 0, i32 0), %struct.bignum_st* %32), !dbg !2435
  %tobool68 = icmp ne i32 %call67, 0, !dbg !2435
  br i1 %tobool68, label %lor.lhs.false69, label %if.then87, !dbg !2436

lor.lhs.false69:                                  ; preds = %lor.lhs.false66
  %33 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2437
  %34 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2438
  %35 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !2439
  %36 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !2440
  %call70 = call i32 @BN_mod_exp_simple(%struct.bignum_st* %33, %struct.bignum_st* %34, %struct.bignum_st* %35, %struct.bignum_st* %36, %struct.bignum_ctx* null), !dbg !2441
  %cmp71 = icmp ne i32 %call70, 0, !dbg !2442
  %conv72 = zext i1 %cmp71 to i32, !dbg !2442
  %call73 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2119, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.212, i32 0, i32 0), i32 %conv72), !dbg !2443
  %tobool74 = icmp ne i32 %call73, 0, !dbg !2444
  br i1 %tobool74, label %lor.lhs.false75, label %if.then87, !dbg !2445

lor.lhs.false75:                                  ; preds = %lor.lhs.false69
  %37 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2446
  %call76 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2120, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.200, i32 0, i32 0), %struct.bignum_st* %37), !dbg !2447
  %tobool77 = icmp ne i32 %call76, 0, !dbg !2447
  br i1 %tobool77, label %lor.lhs.false78, label %if.then87, !dbg !2448

lor.lhs.false78:                                  ; preds = %lor.lhs.false75
  %38 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2449
  %39 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2450
  %40 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !2451
  %41 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !2452
  %call79 = call i32 @BN_mod_exp_recp(%struct.bignum_st* %38, %struct.bignum_st* %39, %struct.bignum_st* %40, %struct.bignum_st* %41, %struct.bignum_ctx* null), !dbg !2453
  %cmp80 = icmp ne i32 %call79, 0, !dbg !2454
  %conv81 = zext i1 %cmp80 to i32, !dbg !2454
  %call82 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2121, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.213, i32 0, i32 0), i32 %conv81), !dbg !2455
  %tobool83 = icmp ne i32 %call82, 0, !dbg !2456
  br i1 %tobool83, label %lor.lhs.false84, label %if.then87, !dbg !2457

lor.lhs.false84:                                  ; preds = %lor.lhs.false78
  %42 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2458
  %call85 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2122, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.200, i32 0, i32 0), %struct.bignum_st* %42), !dbg !2459
  %tobool86 = icmp ne i32 %call85, 0, !dbg !2459
  br i1 %tobool86, label %if.end88, label %if.then87, !dbg !2460

if.then87:                                        ; preds = %lor.lhs.false84, %lor.lhs.false78, %lor.lhs.false75, %lor.lhs.false69, %lor.lhs.false66, %lor.lhs.false60, %lor.lhs.false57, %lor.lhs.false51, %lor.lhs.false48, %lor.lhs.false42, %lor.lhs.false39, %for.body
  br label %err, !dbg !2462

if.end88:                                         ; preds = %lor.lhs.false84
  %43 = load i32, i32* %i, align 4, !dbg !2463
  %cmp89 = icmp eq i32 %43, 0, !dbg !2465
  br i1 %cmp89, label %if.then91, label %if.end92, !dbg !2466

if.then91:                                        ; preds = %if.end88
  %44 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !2467
  call void @BN_set_negative(%struct.bignum_st* %44, i32 1), !dbg !2468
  br label %if.end92, !dbg !2468

if.end92:                                         ; preds = %if.then91, %if.end88
  br label %for.inc, !dbg !2469

for.inc:                                          ; preds = %if.end92
  %45 = load i32, i32* %i, align 4, !dbg !2470
  %inc = add nsw i32 %45, 1, !dbg !2470
  store i32 %inc, i32* %i, align 4, !dbg !2470
  br label %for.cond, !dbg !2472, !llvm.loop !2473

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %ret, align 4, !dbg !2475
  br label %err, !dbg !2476

err:                                              ; preds = %for.end, %if.then87, %if.then
  %46 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2477
  call void @BN_free(%struct.bignum_st* %46), !dbg !2478
  %47 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2479
  call void @BN_free(%struct.bignum_st* %47), !dbg !2480
  %48 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !2481
  call void @BN_free(%struct.bignum_st* %48), !dbg !2482
  %49 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !2483
  call void @BN_free(%struct.bignum_st* %49), !dbg !2484
  %50 = load i32, i32* %ret, align 4, !dbg !2485
  ret i32 %50, !dbg !2486
}

; Function Attrs: nounwind uwtable
define internal i32 @test_smallprime() #0 !dbg !71 {
entry:
  %r = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %r, metadata !2487, metadata !134), !dbg !2488
  call void @llvm.dbg.declare(metadata i32* %st, metadata !2489, metadata !134), !dbg !2490
  store i32 0, i32* %st, align 4, !dbg !2490
  %call = call %struct.bignum_st* @BN_new(), !dbg !2491
  store %struct.bignum_st* %call, %struct.bignum_st** %r, align 8, !dbg !2493
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !2494
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2144, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100, i32 0, i32 0), i8* %0), !dbg !2495
  %tobool = icmp ne i32 %call1, 0, !dbg !2497
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2498

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2499
  %call2 = call i32 @BN_generate_prime_ex(%struct.bignum_st* %1, i32 10, i32 0, %struct.bignum_st* null, %struct.bignum_st* null, %struct.bn_gencb_st* null), !dbg !2501
  %cmp = icmp ne i32 %call2, 0, !dbg !2502
  %conv = zext i1 %cmp to i32, !dbg !2502
  %call3 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2146, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.214, i32 0, i32 0), i32 %conv), !dbg !2503
  %tobool4 = icmp ne i32 %call3, 0, !dbg !2505
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !2506

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %2 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2507
  %call6 = call i32 @BN_num_bits(%struct.bignum_st* %2), !dbg !2508
  %call7 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2147, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.215, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.216, i32 0, i32 0), i32 %call6, i32 10), !dbg !2509
  %tobool8 = icmp ne i32 %call7, 0, !dbg !2510
  br i1 %tobool8, label %if.end, label %if.then, !dbg !2511

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !2513

if.end:                                           ; preds = %lor.lhs.false5
  store i32 1, i32* %st, align 4, !dbg !2514
  br label %err, !dbg !2515

err:                                              ; preds = %if.end, %if.then
  %3 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !2516
  call void @BN_free(%struct.bignum_st* %3), !dbg !2517
  %4 = load i32, i32* %st, align 4, !dbg !2518
  ret i32 %4, !dbg !2519
}

; Function Attrs: nounwind uwtable
define internal i32 @test_swap() #0 !dbg !2520 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca %struct.bignum_st*, align 8
  %c = alloca %struct.bignum_st*, align 8
  %d = alloca %struct.bignum_st*, align 8
  %top = alloca i32, align 4
  %cond = alloca i32, align 4
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !2521, metadata !134), !dbg !2522
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !2522
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b, metadata !2523, metadata !134), !dbg !2524
  store %struct.bignum_st* null, %struct.bignum_st** %b, align 8, !dbg !2524
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !2525, metadata !134), !dbg !2526
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !2526
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %d, metadata !2527, metadata !134), !dbg !2528
  store %struct.bignum_st* null, %struct.bignum_st** %d, align 8, !dbg !2528
  call void @llvm.dbg.declare(metadata i32* %top, metadata !2529, metadata !134), !dbg !2530
  call void @llvm.dbg.declare(metadata i32* %cond, metadata !2531, metadata !134), !dbg !2532
  call void @llvm.dbg.declare(metadata i32* %st, metadata !2533, metadata !134), !dbg !2534
  store i32 0, i32* %st, align 4, !dbg !2534
  %call = call %struct.bignum_st* @BN_new(), !dbg !2535
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !2537
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !2538
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 159, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %0), !dbg !2539
  %tobool = icmp ne i32 %call1, 0, !dbg !2541
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2542

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !2543
  store %struct.bignum_st* %call2, %struct.bignum_st** %b, align 8, !dbg !2545
  %1 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !2546
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 160, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i32 0, i32 0), i8* %1), !dbg !2547
  %tobool4 = icmp ne i32 %call3, 0, !dbg !2549
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !2550

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !2551
  store %struct.bignum_st* %call6, %struct.bignum_st** %c, align 8, !dbg !2552
  %2 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !2553
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 161, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %2), !dbg !2554
  %tobool8 = icmp ne i32 %call7, 0, !dbg !2555
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !2556

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %call10 = call %struct.bignum_st* @BN_new(), !dbg !2557
  store %struct.bignum_st* %call10, %struct.bignum_st** %d, align 8, !dbg !2558
  %3 = bitcast %struct.bignum_st* %call10 to i8*, !dbg !2559
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 162, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i8* %3), !dbg !2560
  %tobool12 = icmp ne i32 %call11, 0, !dbg !2561
  br i1 %tobool12, label %if.end, label %if.then, !dbg !2562

if.then:                                          ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !2564

if.end:                                           ; preds = %lor.lhs.false9
  %4 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2565
  %call13 = call i32 @BN_bntest_rand(%struct.bignum_st* %4, i32 1024, i32 1, i32 0), !dbg !2566
  %5 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2567
  %call14 = call i32 @BN_bntest_rand(%struct.bignum_st* %5, i32 1024, i32 1, i32 0), !dbg !2568
  %6 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2569
  %7 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2570
  %call15 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %6, %struct.bignum_st* %7), !dbg !2571
  %8 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !2572
  %9 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2573
  %call16 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %8, %struct.bignum_st* %9), !dbg !2574
  %10 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2575
  %call17 = call i32 @BN_num_bits(%struct.bignum_st* %10), !dbg !2576
  %div = sdiv i32 %call17, 64, !dbg !2577
  store i32 %div, i32* %top, align 4, !dbg !2578
  %11 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2579
  %12 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2580
  call void @BN_swap(%struct.bignum_st* %11, %struct.bignum_st* %12), !dbg !2581
  %13 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2582
  %14 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !2584
  %call18 = call i32 @equalBN(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.217, i32 0, i32 0), %struct.bignum_st* %13, %struct.bignum_st* %14), !dbg !2585
  %tobool19 = icmp ne i32 %call18, 0, !dbg !2585
  br i1 %tobool19, label %lor.lhs.false20, label %if.then23, !dbg !2586

lor.lhs.false20:                                  ; preds = %if.end
  %15 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2587
  %16 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2589
  %call21 = call i32 @equalBN(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.217, i32 0, i32 0), %struct.bignum_st* %15, %struct.bignum_st* %16), !dbg !2590
  %tobool22 = icmp ne i32 %call21, 0, !dbg !2590
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !2591

if.then23:                                        ; preds = %lor.lhs.false20, %if.end
  br label %err, !dbg !2592

if.end24:                                         ; preds = %lor.lhs.false20
  store i32 1, i32* %cond, align 4, !dbg !2593
  %17 = load i32, i32* %cond, align 4, !dbg !2594
  %conv = sext i32 %17 to i64, !dbg !2594
  %18 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2595
  %19 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2596
  %20 = load i32, i32* %top, align 4, !dbg !2597
  call void @BN_consttime_swap(i64 %conv, %struct.bignum_st* %18, %struct.bignum_st* %19, i32 %20), !dbg !2598
  %21 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2599
  %22 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2601
  %call25 = call i32 @equalBN(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.218, i32 0, i32 0), %struct.bignum_st* %21, %struct.bignum_st* %22), !dbg !2602
  %tobool26 = icmp ne i32 %call25, 0, !dbg !2602
  br i1 %tobool26, label %lor.lhs.false27, label %if.then30, !dbg !2603

lor.lhs.false27:                                  ; preds = %if.end24
  %23 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2604
  %24 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !2606
  %call28 = call i32 @equalBN(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.218, i32 0, i32 0), %struct.bignum_st* %23, %struct.bignum_st* %24), !dbg !2607
  %tobool29 = icmp ne i32 %call28, 0, !dbg !2607
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !2608

if.then30:                                        ; preds = %lor.lhs.false27, %if.end24
  br label %err, !dbg !2609

if.end31:                                         ; preds = %lor.lhs.false27
  store i32 0, i32* %cond, align 4, !dbg !2610
  %25 = load i32, i32* %cond, align 4, !dbg !2611
  %conv32 = sext i32 %25 to i64, !dbg !2611
  %26 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2612
  %27 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2613
  %28 = load i32, i32* %top, align 4, !dbg !2614
  call void @BN_consttime_swap(i64 %conv32, %struct.bignum_st* %26, %struct.bignum_st* %27, i32 %28), !dbg !2615
  %29 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2616
  %30 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2618
  %call33 = call i32 @equalBN(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.219, i32 0, i32 0), %struct.bignum_st* %29, %struct.bignum_st* %30), !dbg !2619
  %tobool34 = icmp ne i32 %call33, 0, !dbg !2619
  br i1 %tobool34, label %lor.lhs.false35, label %if.then38, !dbg !2620

lor.lhs.false35:                                  ; preds = %if.end31
  %31 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2621
  %32 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !2623
  %call36 = call i32 @equalBN(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.219, i32 0, i32 0), %struct.bignum_st* %31, %struct.bignum_st* %32), !dbg !2624
  %tobool37 = icmp ne i32 %call36, 0, !dbg !2624
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !2625

if.then38:                                        ; preds = %lor.lhs.false35, %if.end31
  br label %err, !dbg !2626

if.end39:                                         ; preds = %lor.lhs.false35
  %33 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2627
  call void @BN_set_flags(%struct.bignum_st* %33, i32 4), !dbg !2628
  %34 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2629
  %35 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2630
  call void @BN_swap(%struct.bignum_st* %34, %struct.bignum_st* %35), !dbg !2631
  %36 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2632
  %37 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !2634
  %call40 = call i32 @equalBN(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.220, i32 0, i32 0), %struct.bignum_st* %36, %struct.bignum_st* %37), !dbg !2635
  %tobool41 = icmp ne i32 %call40, 0, !dbg !2635
  br i1 %tobool41, label %lor.lhs.false42, label %if.then56, !dbg !2636

lor.lhs.false42:                                  ; preds = %if.end39
  %38 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2637
  %39 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2639
  %call43 = call i32 @equalBN(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.220, i32 0, i32 0), %struct.bignum_st* %38, %struct.bignum_st* %39), !dbg !2640
  %tobool44 = icmp ne i32 %call43, 0, !dbg !2640
  br i1 %tobool44, label %lor.lhs.false45, label %if.then56, !dbg !2641

lor.lhs.false45:                                  ; preds = %lor.lhs.false42
  %40 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2642
  %call46 = call i32 @BN_get_flags(%struct.bignum_st* %40, i32 4), !dbg !2643
  %cmp = icmp ne i32 %call46, 0, !dbg !2644
  %conv47 = zext i1 %cmp to i32, !dbg !2644
  %call48 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 197, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.221, i32 0, i32 0), i32 %conv47), !dbg !2645
  %tobool49 = icmp ne i32 %call48, 0, !dbg !2647
  br i1 %tobool49, label %lor.lhs.false50, label %if.then56, !dbg !2648

lor.lhs.false50:                                  ; preds = %lor.lhs.false45
  %41 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2649
  %call51 = call i32 @BN_get_flags(%struct.bignum_st* %41, i32 4), !dbg !2650
  %cmp52 = icmp ne i32 %call51, 0, !dbg !2651
  %conv53 = zext i1 %cmp52 to i32, !dbg !2651
  %call54 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 198, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.222, i32 0, i32 0), i32 %conv53), !dbg !2652
  %tobool55 = icmp ne i32 %call54, 0, !dbg !2653
  br i1 %tobool55, label %if.end57, label %if.then56, !dbg !2654

if.then56:                                        ; preds = %lor.lhs.false50, %lor.lhs.false45, %lor.lhs.false42, %if.end39
  br label %err, !dbg !2655

if.end57:                                         ; preds = %lor.lhs.false50
  store i32 1, i32* %cond, align 4, !dbg !2656
  %42 = load i32, i32* %cond, align 4, !dbg !2657
  %conv58 = sext i32 %42 to i64, !dbg !2657
  %43 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2658
  %44 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2659
  %45 = load i32, i32* %top, align 4, !dbg !2660
  call void @BN_consttime_swap(i64 %conv58, %struct.bignum_st* %43, %struct.bignum_st* %44, i32 %45), !dbg !2661
  %46 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2662
  %47 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2664
  %call59 = call i32 @equalBN(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.223, i32 0, i32 0), %struct.bignum_st* %46, %struct.bignum_st* %47), !dbg !2665
  %tobool60 = icmp ne i32 %call59, 0, !dbg !2665
  br i1 %tobool60, label %lor.lhs.false61, label %if.then76, !dbg !2666

lor.lhs.false61:                                  ; preds = %if.end57
  %48 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2667
  %49 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !2669
  %call62 = call i32 @equalBN(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.223, i32 0, i32 0), %struct.bignum_st* %48, %struct.bignum_st* %49), !dbg !2670
  %tobool63 = icmp ne i32 %call62, 0, !dbg !2670
  br i1 %tobool63, label %lor.lhs.false64, label %if.then76, !dbg !2671

lor.lhs.false64:                                  ; preds = %lor.lhs.false61
  %50 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2672
  %call65 = call i32 @BN_get_flags(%struct.bignum_st* %50, i32 4), !dbg !2673
  %cmp66 = icmp ne i32 %call65, 0, !dbg !2674
  %conv67 = zext i1 %cmp66 to i32, !dbg !2674
  %call68 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 205, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.222, i32 0, i32 0), i32 %conv67), !dbg !2675
  %tobool69 = icmp ne i32 %call68, 0, !dbg !2677
  br i1 %tobool69, label %lor.lhs.false70, label %if.then76, !dbg !2678

lor.lhs.false70:                                  ; preds = %lor.lhs.false64
  %51 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2679
  %call71 = call i32 @BN_get_flags(%struct.bignum_st* %51, i32 4), !dbg !2680
  %cmp72 = icmp ne i32 %call71, 0, !dbg !2681
  %conv73 = zext i1 %cmp72 to i32, !dbg !2681
  %call74 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 206, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.221, i32 0, i32 0), i32 %conv73), !dbg !2682
  %tobool75 = icmp ne i32 %call74, 0, !dbg !2683
  br i1 %tobool75, label %if.end77, label %if.then76, !dbg !2684

if.then76:                                        ; preds = %lor.lhs.false70, %lor.lhs.false64, %lor.lhs.false61, %if.end57
  br label %err, !dbg !2685

if.end77:                                         ; preds = %lor.lhs.false70
  store i32 0, i32* %cond, align 4, !dbg !2686
  %52 = load i32, i32* %cond, align 4, !dbg !2687
  %conv78 = sext i32 %52 to i64, !dbg !2687
  %53 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2688
  %54 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2689
  %55 = load i32, i32* %top, align 4, !dbg !2690
  call void @BN_consttime_swap(i64 %conv78, %struct.bignum_st* %53, %struct.bignum_st* %54, i32 %55), !dbg !2691
  %56 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2692
  %57 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2694
  %call79 = call i32 @equalBN(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.224, i32 0, i32 0), %struct.bignum_st* %56, %struct.bignum_st* %57), !dbg !2695
  %tobool80 = icmp ne i32 %call79, 0, !dbg !2695
  br i1 %tobool80, label %lor.lhs.false81, label %if.then96, !dbg !2696

lor.lhs.false81:                                  ; preds = %if.end77
  %58 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2697
  %59 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !2699
  %call82 = call i32 @equalBN(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.224, i32 0, i32 0), %struct.bignum_st* %58, %struct.bignum_st* %59), !dbg !2700
  %tobool83 = icmp ne i32 %call82, 0, !dbg !2700
  br i1 %tobool83, label %lor.lhs.false84, label %if.then96, !dbg !2701

lor.lhs.false84:                                  ; preds = %lor.lhs.false81
  %60 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2702
  %call85 = call i32 @BN_get_flags(%struct.bignum_st* %60, i32 4), !dbg !2703
  %cmp86 = icmp ne i32 %call85, 0, !dbg !2704
  %conv87 = zext i1 %cmp86 to i32, !dbg !2704
  %call88 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 213, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.222, i32 0, i32 0), i32 %conv87), !dbg !2705
  %tobool89 = icmp ne i32 %call88, 0, !dbg !2707
  br i1 %tobool89, label %lor.lhs.false90, label %if.then96, !dbg !2708

lor.lhs.false90:                                  ; preds = %lor.lhs.false84
  %61 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2709
  %call91 = call i32 @BN_get_flags(%struct.bignum_st* %61, i32 4), !dbg !2710
  %cmp92 = icmp ne i32 %call91, 0, !dbg !2711
  %conv93 = zext i1 %cmp92 to i32, !dbg !2711
  %call94 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 214, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.221, i32 0, i32 0), i32 %conv93), !dbg !2712
  %tobool95 = icmp ne i32 %call94, 0, !dbg !2713
  br i1 %tobool95, label %if.end97, label %if.then96, !dbg !2714

if.then96:                                        ; preds = %lor.lhs.false90, %lor.lhs.false84, %lor.lhs.false81, %if.end77
  br label %err, !dbg !2715

if.end97:                                         ; preds = %lor.lhs.false90
  store i32 1, i32* %st, align 4, !dbg !2716
  br label %err, !dbg !2717

err:                                              ; preds = %if.end97, %if.then96, %if.then76, %if.then56, %if.then38, %if.then30, %if.then23, %if.then
  %62 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2718
  call void @BN_free(%struct.bignum_st* %62), !dbg !2719
  %63 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2720
  call void @BN_free(%struct.bignum_st* %63), !dbg !2721
  %64 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2722
  call void @BN_free(%struct.bignum_st* %64), !dbg !2723
  %65 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !2724
  call void @BN_free(%struct.bignum_st* %65), !dbg !2725
  %66 = load i32, i32* %st, align 4, !dbg !2726
  ret i32 %66, !dbg !2727
}

; Function Attrs: nounwind uwtable
define internal i32 @test_gf2m_add() #0 !dbg !2728 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca %struct.bignum_st*, align 8
  %c = alloca %struct.bignum_st*, align 8
  %i = alloca i32, align 4
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !2729, metadata !134), !dbg !2730
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !2730
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b, metadata !2731, metadata !134), !dbg !2732
  store %struct.bignum_st* null, %struct.bignum_st** %b, align 8, !dbg !2732
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !2733, metadata !134), !dbg !2734
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !2734
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2735, metadata !134), !dbg !2736
  call void @llvm.dbg.declare(metadata i32* %st, metadata !2737, metadata !134), !dbg !2738
  store i32 0, i32* %st, align 4, !dbg !2738
  %call = call %struct.bignum_st* @BN_new(), !dbg !2739
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !2741
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !2742
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 595, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %0), !dbg !2743
  %tobool = icmp ne i32 %call1, 0, !dbg !2745
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2746

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !2747
  store %struct.bignum_st* %call2, %struct.bignum_st** %b, align 8, !dbg !2749
  %1 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !2750
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 596, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i32 0, i32 0), i8* %1), !dbg !2751
  %tobool4 = icmp ne i32 %call3, 0, !dbg !2753
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !2754

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !2755
  store %struct.bignum_st* %call6, %struct.bignum_st** %c, align 8, !dbg !2756
  %2 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !2757
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 597, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %2), !dbg !2758
  %tobool8 = icmp ne i32 %call7, 0, !dbg !2759
  br i1 %tobool8, label %if.end, label %if.then, !dbg !2760

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !2762

if.end:                                           ; preds = %lor.lhs.false5
  store i32 0, i32* %i, align 4, !dbg !2763
  br label %for.cond, !dbg !2765

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4, !dbg !2766
  %cmp = icmp slt i32 %3, 100, !dbg !2769
  br i1 %cmp, label %for.body, label %for.end, !dbg !2770

for.body:                                         ; preds = %for.cond
  %4 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2771
  %call9 = call i32 @BN_rand(%struct.bignum_st* %4, i32 512, i32 0, i32 0), !dbg !2773
  %5 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2774
  %call10 = call %struct.bignum_st* @BN_value_one(), !dbg !2775
  %call11 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %5, %struct.bignum_st* %call10), !dbg !2776
  %6 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2778
  %call12 = call i32 @rand_neg(), !dbg !2779
  call void @BN_set_negative(%struct.bignum_st* %6, i32 %call12), !dbg !2780
  %7 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2781
  %call13 = call i32 @rand_neg(), !dbg !2782
  call void @BN_set_negative(%struct.bignum_st* %7, i32 %call13), !dbg !2783
  %8 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2784
  %9 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2785
  %10 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2786
  %call14 = call i32 @BN_GF2m_add(%struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_st* %10), !dbg !2787
  %11 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2788
  %call15 = call i32 @BN_is_odd(%struct.bignum_st* %11), !dbg !2790
  %tobool16 = icmp ne i32 %call15, 0, !dbg !2790
  br i1 %tobool16, label %land.lhs.true, label %lor.rhs, !dbg !2791

land.lhs.true:                                    ; preds = %for.body
  %12 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2792
  %call17 = call i32 @BN_is_odd(%struct.bignum_st* %12), !dbg !2794
  %tobool18 = icmp ne i32 %call17, 0, !dbg !2794
  br i1 %tobool18, label %lor.end, label %lor.rhs, !dbg !2795

lor.rhs:                                          ; preds = %land.lhs.true, %for.body
  %13 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2796
  %call19 = call i32 @BN_is_odd(%struct.bignum_st* %13), !dbg !2798
  %tobool20 = icmp ne i32 %call19, 0, !dbg !2798
  br i1 %tobool20, label %land.end, label %land.rhs, !dbg !2799

land.rhs:                                         ; preds = %lor.rhs
  %14 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2800
  %call21 = call i32 @BN_is_odd(%struct.bignum_st* %14), !dbg !2802
  %tobool22 = icmp ne i32 %call21, 0, !dbg !2803
  %lnot = xor i1 %tobool22, true, !dbg !2803
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %15 = phi i1 [ false, %lor.rhs ], [ %lnot, %land.rhs ]
  br label %lor.end, !dbg !2804

lor.end:                                          ; preds = %land.end, %land.lhs.true
  %16 = phi i1 [ true, %land.lhs.true ], [ %15, %land.end ]
  %lor.ext = zext i1 %16 to i32, !dbg !2806
  %cmp23 = icmp ne i32 %lor.ext, 0, !dbg !2808
  %conv = zext i1 %cmp23 to i32, !dbg !2808
  %call24 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 608, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.228, i32 0, i32 0), i32 %conv), !dbg !2809
  %tobool25 = icmp ne i32 %call24, 0, !dbg !2809
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !2810

if.then26:                                        ; preds = %lor.end
  br label %err, !dbg !2811

if.end27:                                         ; preds = %lor.end
  %17 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2812
  %18 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2813
  %19 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2814
  %call28 = call i32 @BN_GF2m_add(%struct.bignum_st* %17, %struct.bignum_st* %18, %struct.bignum_st* %19), !dbg !2815
  %20 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2816
  %call29 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 612, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.51, i32 0, i32 0), %struct.bignum_st* %20), !dbg !2818
  %tobool30 = icmp ne i32 %call29, 0, !dbg !2818
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !2819

if.then31:                                        ; preds = %if.end27
  br label %err, !dbg !2820

if.end32:                                         ; preds = %if.end27
  br label %for.inc, !dbg !2821

for.inc:                                          ; preds = %if.end32
  %21 = load i32, i32* %i, align 4, !dbg !2822
  %inc = add nsw i32 %21, 1, !dbg !2822
  store i32 %inc, i32* %i, align 4, !dbg !2822
  br label %for.cond, !dbg !2824, !llvm.loop !2825

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %st, align 4, !dbg !2827
  br label %err, !dbg !2828

err:                                              ; preds = %for.end, %if.then31, %if.then26, %if.then
  %22 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2829
  call void @BN_free(%struct.bignum_st* %22), !dbg !2830
  %23 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !2831
  call void @BN_free(%struct.bignum_st* %23), !dbg !2832
  %24 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2833
  call void @BN_free(%struct.bignum_st* %24), !dbg !2834
  %25 = load i32, i32* %st, align 4, !dbg !2835
  ret i32 %25, !dbg !2836
}

; Function Attrs: nounwind uwtable
define internal i32 @test_gf2m_mod() #0 !dbg !2837 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca [2 x %struct.bignum_st*], align 16
  %c = alloca %struct.bignum_st*, align 8
  %d = alloca %struct.bignum_st*, align 8
  %e = alloca %struct.bignum_st*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !2838, metadata !134), !dbg !2839
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !2839
  call void @llvm.dbg.declare(metadata [2 x %struct.bignum_st*]* %b, metadata !2840, metadata !134), !dbg !2844
  %0 = bitcast [2 x %struct.bignum_st*]* %b to i8*, !dbg !2844
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 16, i32 16, i1 false), !dbg !2844
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !2845, metadata !134), !dbg !2846
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !2846
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %d, metadata !2847, metadata !134), !dbg !2848
  store %struct.bignum_st* null, %struct.bignum_st** %d, align 8, !dbg !2848
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %e, metadata !2849, metadata !134), !dbg !2850
  store %struct.bignum_st* null, %struct.bignum_st** %e, align 8, !dbg !2850
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2851, metadata !134), !dbg !2852
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2853, metadata !134), !dbg !2854
  call void @llvm.dbg.declare(metadata i32* %st, metadata !2855, metadata !134), !dbg !2856
  store i32 0, i32* %st, align 4, !dbg !2856
  %call = call %struct.bignum_st* @BN_new(), !dbg !2857
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !2859
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !2860
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 628, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %1), !dbg !2861
  %tobool = icmp ne i32 %call1, 0, !dbg !2863
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !2864

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !2865
  %arrayidx = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !2867
  store %struct.bignum_st* %call2, %struct.bignum_st** %arrayidx, align 16, !dbg !2868
  %2 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !2867
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 629, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.229, i32 0, i32 0), i8* %2), !dbg !2869
  %tobool4 = icmp ne i32 %call3, 0, !dbg !2871
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !2872

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !2873
  %arrayidx7 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !2874
  store %struct.bignum_st* %call6, %struct.bignum_st** %arrayidx7, align 8, !dbg !2875
  %3 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !2874
  %call8 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 630, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.230, i32 0, i32 0), i8* %3), !dbg !2876
  %tobool9 = icmp ne i32 %call8, 0, !dbg !2877
  br i1 %tobool9, label %lor.lhs.false10, label %if.then, !dbg !2878

lor.lhs.false10:                                  ; preds = %lor.lhs.false5
  %call11 = call %struct.bignum_st* @BN_new(), !dbg !2879
  store %struct.bignum_st* %call11, %struct.bignum_st** %c, align 8, !dbg !2880
  %4 = bitcast %struct.bignum_st* %call11 to i8*, !dbg !2881
  %call12 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 631, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %4), !dbg !2882
  %tobool13 = icmp ne i32 %call12, 0, !dbg !2883
  br i1 %tobool13, label %lor.lhs.false14, label %if.then, !dbg !2884

lor.lhs.false14:                                  ; preds = %lor.lhs.false10
  %call15 = call %struct.bignum_st* @BN_new(), !dbg !2885
  store %struct.bignum_st* %call15, %struct.bignum_st** %d, align 8, !dbg !2886
  %5 = bitcast %struct.bignum_st* %call15 to i8*, !dbg !2887
  %call16 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 632, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i8* %5), !dbg !2888
  %tobool17 = icmp ne i32 %call16, 0, !dbg !2889
  br i1 %tobool17, label %lor.lhs.false18, label %if.then, !dbg !2890

lor.lhs.false18:                                  ; preds = %lor.lhs.false14
  %call19 = call %struct.bignum_st* @BN_new(), !dbg !2891
  store %struct.bignum_st* %call19, %struct.bignum_st** %e, align 8, !dbg !2892
  %6 = bitcast %struct.bignum_st* %call19 to i8*, !dbg !2893
  %call20 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 633, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i32 0, i32 0), i8* %6), !dbg !2894
  %tobool21 = icmp ne i32 %call20, 0, !dbg !2895
  br i1 %tobool21, label %if.end, label %if.then, !dbg !2896

if.then:                                          ; preds = %lor.lhs.false18, %lor.lhs.false14, %lor.lhs.false10, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !2898

if.end:                                           ; preds = %lor.lhs.false18
  %arrayidx22 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !2899
  %7 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx22, align 16, !dbg !2899
  %call23 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([6 x i32], [6 x i32]* @p0, i32 0, i32 0), %struct.bignum_st* %7), !dbg !2900
  %arrayidx24 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !2901
  %8 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx24, align 8, !dbg !2901
  %call25 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([4 x i32], [4 x i32]* @p1, i32 0, i32 0), %struct.bignum_st* %8), !dbg !2902
  store i32 0, i32* %i, align 4, !dbg !2903
  br label %for.cond, !dbg !2905

for.cond:                                         ; preds = %for.inc40, %if.end
  %9 = load i32, i32* %i, align 4, !dbg !2906
  %cmp = icmp slt i32 %9, 100, !dbg !2909
  br i1 %cmp, label %for.body, label %for.end42, !dbg !2910

for.body:                                         ; preds = %for.cond
  %10 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2911
  %call26 = call i32 @BN_bntest_rand(%struct.bignum_st* %10, i32 1024, i32 0, i32 0), !dbg !2913
  store i32 0, i32* %j, align 4, !dbg !2914
  br label %for.cond27, !dbg !2916

for.cond27:                                       ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4, !dbg !2917
  %cmp28 = icmp slt i32 %11, 2, !dbg !2920
  br i1 %cmp28, label %for.body29, label %for.end, !dbg !2921

for.body29:                                       ; preds = %for.cond27
  %12 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2922
  %13 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2924
  %14 = load i32, i32* %j, align 4, !dbg !2925
  %idxprom = sext i32 %14 to i64, !dbg !2926
  %arrayidx30 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom, !dbg !2926
  %15 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx30, align 8, !dbg !2926
  %call31 = call i32 @BN_GF2m_mod(%struct.bignum_st* %12, %struct.bignum_st* %13, %struct.bignum_st* %15), !dbg !2927
  %16 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !2928
  %17 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2929
  %18 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2930
  %call32 = call i32 @BN_GF2m_add(%struct.bignum_st* %16, %struct.bignum_st* %17, %struct.bignum_st* %18), !dbg !2931
  %19 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !2932
  %20 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !2933
  %21 = load i32, i32* %j, align 4, !dbg !2934
  %idxprom33 = sext i32 %21 to i64, !dbg !2935
  %arrayidx34 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom33, !dbg !2935
  %22 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx34, align 8, !dbg !2935
  %call35 = call i32 @BN_GF2m_mod(%struct.bignum_st* %19, %struct.bignum_st* %20, %struct.bignum_st* %22), !dbg !2936
  %23 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !2937
  %call36 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 646, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i32 0, i32 0), %struct.bignum_st* %23), !dbg !2939
  %tobool37 = icmp ne i32 %call36, 0, !dbg !2939
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !2940

if.then38:                                        ; preds = %for.body29
  br label %err, !dbg !2941

if.end39:                                         ; preds = %for.body29
  br label %for.inc, !dbg !2942

for.inc:                                          ; preds = %if.end39
  %24 = load i32, i32* %j, align 4, !dbg !2943
  %inc = add nsw i32 %24, 1, !dbg !2943
  store i32 %inc, i32* %j, align 4, !dbg !2943
  br label %for.cond27, !dbg !2945, !llvm.loop !2946

for.end:                                          ; preds = %for.cond27
  br label %for.inc40, !dbg !2948

for.inc40:                                        ; preds = %for.end
  %25 = load i32, i32* %i, align 4, !dbg !2949
  %inc41 = add nsw i32 %25, 1, !dbg !2949
  store i32 %inc41, i32* %i, align 4, !dbg !2949
  br label %for.cond, !dbg !2951, !llvm.loop !2952

for.end42:                                        ; preds = %for.cond
  store i32 1, i32* %st, align 4, !dbg !2954
  br label %err, !dbg !2955

err:                                              ; preds = %for.end42, %if.then38, %if.then
  %26 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !2956
  call void @BN_free(%struct.bignum_st* %26), !dbg !2957
  %arrayidx43 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !2958
  %27 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx43, align 16, !dbg !2958
  call void @BN_free(%struct.bignum_st* %27), !dbg !2959
  %arrayidx44 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !2960
  %28 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx44, align 8, !dbg !2960
  call void @BN_free(%struct.bignum_st* %28), !dbg !2961
  %29 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !2962
  call void @BN_free(%struct.bignum_st* %29), !dbg !2963
  %30 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !2964
  call void @BN_free(%struct.bignum_st* %30), !dbg !2965
  %31 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !2966
  call void @BN_free(%struct.bignum_st* %31), !dbg !2967
  %32 = load i32, i32* %st, align 4, !dbg !2968
  ret i32 %32, !dbg !2969
}

; Function Attrs: nounwind uwtable
define internal i32 @test_gf2m_mul() #0 !dbg !2970 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca [2 x %struct.bignum_st*], align 16
  %c = alloca %struct.bignum_st*, align 8
  %d = alloca %struct.bignum_st*, align 8
  %e = alloca %struct.bignum_st*, align 8
  %f = alloca %struct.bignum_st*, align 8
  %g = alloca %struct.bignum_st*, align 8
  %h = alloca %struct.bignum_st*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !2971, metadata !134), !dbg !2972
  call void @llvm.dbg.declare(metadata [2 x %struct.bignum_st*]* %b, metadata !2973, metadata !134), !dbg !2974
  %0 = bitcast [2 x %struct.bignum_st*]* %b to i8*, !dbg !2974
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 16, i32 16, i1 false), !dbg !2974
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !2975, metadata !134), !dbg !2976
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !2976
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %d, metadata !2977, metadata !134), !dbg !2978
  store %struct.bignum_st* null, %struct.bignum_st** %d, align 8, !dbg !2978
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %e, metadata !2979, metadata !134), !dbg !2980
  store %struct.bignum_st* null, %struct.bignum_st** %e, align 8, !dbg !2980
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %f, metadata !2981, metadata !134), !dbg !2982
  store %struct.bignum_st* null, %struct.bignum_st** %f, align 8, !dbg !2982
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %g, metadata !2983, metadata !134), !dbg !2984
  store %struct.bignum_st* null, %struct.bignum_st** %g, align 8, !dbg !2984
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %h, metadata !2985, metadata !134), !dbg !2986
  store %struct.bignum_st* null, %struct.bignum_st** %h, align 8, !dbg !2986
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2987, metadata !134), !dbg !2988
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2989, metadata !134), !dbg !2990
  call void @llvm.dbg.declare(metadata i32* %st, metadata !2991, metadata !134), !dbg !2992
  store i32 0, i32* %st, align 4, !dbg !2992
  %call = call %struct.bignum_st* @BN_new(), !dbg !2993
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !2995
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !2996
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 667, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %1), !dbg !2997
  %tobool = icmp ne i32 %call1, 0, !dbg !2999
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3000

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !3001
  %arrayidx = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3003
  store %struct.bignum_st* %call2, %struct.bignum_st** %arrayidx, align 16, !dbg !3004
  %2 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !3003
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 668, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.229, i32 0, i32 0), i8* %2), !dbg !3005
  %tobool4 = icmp ne i32 %call3, 0, !dbg !3007
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !3008

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !3009
  %arrayidx7 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3010
  store %struct.bignum_st* %call6, %struct.bignum_st** %arrayidx7, align 8, !dbg !3011
  %3 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !3010
  %call8 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 669, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.230, i32 0, i32 0), i8* %3), !dbg !3012
  %tobool9 = icmp ne i32 %call8, 0, !dbg !3013
  br i1 %tobool9, label %lor.lhs.false10, label %if.then, !dbg !3014

lor.lhs.false10:                                  ; preds = %lor.lhs.false5
  %call11 = call %struct.bignum_st* @BN_new(), !dbg !3015
  store %struct.bignum_st* %call11, %struct.bignum_st** %c, align 8, !dbg !3016
  %4 = bitcast %struct.bignum_st* %call11 to i8*, !dbg !3017
  %call12 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 670, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %4), !dbg !3018
  %tobool13 = icmp ne i32 %call12, 0, !dbg !3019
  br i1 %tobool13, label %lor.lhs.false14, label %if.then, !dbg !3020

lor.lhs.false14:                                  ; preds = %lor.lhs.false10
  %call15 = call %struct.bignum_st* @BN_new(), !dbg !3021
  store %struct.bignum_st* %call15, %struct.bignum_st** %d, align 8, !dbg !3022
  %5 = bitcast %struct.bignum_st* %call15 to i8*, !dbg !3023
  %call16 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 671, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i8* %5), !dbg !3024
  %tobool17 = icmp ne i32 %call16, 0, !dbg !3025
  br i1 %tobool17, label %lor.lhs.false18, label %if.then, !dbg !3026

lor.lhs.false18:                                  ; preds = %lor.lhs.false14
  %call19 = call %struct.bignum_st* @BN_new(), !dbg !3027
  store %struct.bignum_st* %call19, %struct.bignum_st** %e, align 8, !dbg !3028
  %6 = bitcast %struct.bignum_st* %call19 to i8*, !dbg !3029
  %call20 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 672, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i32 0, i32 0), i8* %6), !dbg !3030
  %tobool21 = icmp ne i32 %call20, 0, !dbg !3031
  br i1 %tobool21, label %lor.lhs.false22, label %if.then, !dbg !3032

lor.lhs.false22:                                  ; preds = %lor.lhs.false18
  %call23 = call %struct.bignum_st* @BN_new(), !dbg !3033
  store %struct.bignum_st* %call23, %struct.bignum_st** %f, align 8, !dbg !3034
  %7 = bitcast %struct.bignum_st* %call23 to i8*, !dbg !3035
  %call24 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 673, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.231, i32 0, i32 0), i8* %7), !dbg !3036
  %tobool25 = icmp ne i32 %call24, 0, !dbg !3037
  br i1 %tobool25, label %lor.lhs.false26, label %if.then, !dbg !3038

lor.lhs.false26:                                  ; preds = %lor.lhs.false22
  %call27 = call %struct.bignum_st* @BN_new(), !dbg !3039
  store %struct.bignum_st* %call27, %struct.bignum_st** %g, align 8, !dbg !3040
  %8 = bitcast %struct.bignum_st* %call27 to i8*, !dbg !3041
  %call28 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 674, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.232, i32 0, i32 0), i8* %8), !dbg !3042
  %tobool29 = icmp ne i32 %call28, 0, !dbg !3043
  br i1 %tobool29, label %lor.lhs.false30, label %if.then, !dbg !3044

lor.lhs.false30:                                  ; preds = %lor.lhs.false26
  %call31 = call %struct.bignum_st* @BN_new(), !dbg !3045
  store %struct.bignum_st* %call31, %struct.bignum_st** %h, align 8, !dbg !3046
  %9 = bitcast %struct.bignum_st* %call31 to i8*, !dbg !3047
  %call32 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 675, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.233, i32 0, i32 0), i8* %9), !dbg !3048
  %tobool33 = icmp ne i32 %call32, 0, !dbg !3049
  br i1 %tobool33, label %if.end, label %if.then, !dbg !3050

if.then:                                          ; preds = %lor.lhs.false30, %lor.lhs.false26, %lor.lhs.false22, %lor.lhs.false18, %lor.lhs.false14, %lor.lhs.false10, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !3052

if.end:                                           ; preds = %lor.lhs.false30
  %arrayidx34 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3053
  %10 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx34, align 16, !dbg !3053
  %call35 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([6 x i32], [6 x i32]* @p0, i32 0, i32 0), %struct.bignum_st* %10), !dbg !3054
  %arrayidx36 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3055
  %11 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx36, align 8, !dbg !3055
  %call37 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([4 x i32], [4 x i32]* @p1, i32 0, i32 0), %struct.bignum_st* %11), !dbg !3056
  store i32 0, i32* %i, align 4, !dbg !3057
  br label %for.cond, !dbg !3059

for.cond:                                         ; preds = %for.inc59, %if.end
  %12 = load i32, i32* %i, align 4, !dbg !3060
  %cmp = icmp slt i32 %12, 100, !dbg !3063
  br i1 %cmp, label %for.body, label %for.end61, !dbg !3064

for.body:                                         ; preds = %for.cond
  %13 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3065
  %call38 = call i32 @BN_bntest_rand(%struct.bignum_st* %13, i32 1024, i32 0, i32 0), !dbg !3067
  %14 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3068
  %call39 = call i32 @BN_bntest_rand(%struct.bignum_st* %14, i32 1024, i32 0, i32 0), !dbg !3069
  %15 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3070
  %call40 = call i32 @BN_bntest_rand(%struct.bignum_st* %15, i32 1024, i32 0, i32 0), !dbg !3071
  store i32 0, i32* %j, align 4, !dbg !3072
  br label %for.cond41, !dbg !3074

for.cond41:                                       ; preds = %for.inc, %for.body
  %16 = load i32, i32* %j, align 4, !dbg !3075
  %cmp42 = icmp slt i32 %16, 2, !dbg !3078
  br i1 %cmp42, label %for.body43, label %for.end, !dbg !3079

for.body43:                                       ; preds = %for.cond41
  %17 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3080
  %18 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3082
  %19 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3083
  %20 = load i32, i32* %j, align 4, !dbg !3084
  %idxprom = sext i32 %20 to i64, !dbg !3085
  %arrayidx44 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom, !dbg !3085
  %21 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx44, align 8, !dbg !3085
  %22 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3086
  %call45 = call i32 @BN_GF2m_mod_mul(%struct.bignum_st* %17, %struct.bignum_st* %18, %struct.bignum_st* %19, %struct.bignum_st* %21, %struct.bignum_ctx* %22), !dbg !3087
  %23 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3088
  %24 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3089
  %25 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3090
  %call46 = call i32 @BN_GF2m_add(%struct.bignum_st* %23, %struct.bignum_st* %24, %struct.bignum_st* %25), !dbg !3091
  %26 = load %struct.bignum_st*, %struct.bignum_st** %g, align 8, !dbg !3092
  %27 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3093
  %28 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3094
  %29 = load i32, i32* %j, align 4, !dbg !3095
  %idxprom47 = sext i32 %29 to i64, !dbg !3096
  %arrayidx48 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom47, !dbg !3096
  %30 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx48, align 8, !dbg !3096
  %31 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3097
  %call49 = call i32 @BN_GF2m_mod_mul(%struct.bignum_st* %26, %struct.bignum_st* %27, %struct.bignum_st* %28, %struct.bignum_st* %30, %struct.bignum_ctx* %31), !dbg !3098
  %32 = load %struct.bignum_st*, %struct.bignum_st** %h, align 8, !dbg !3099
  %33 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3100
  %34 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3101
  %35 = load i32, i32* %j, align 4, !dbg !3102
  %idxprom50 = sext i32 %35 to i64, !dbg !3103
  %arrayidx51 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom50, !dbg !3103
  %36 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx51, align 8, !dbg !3103
  %37 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3104
  %call52 = call i32 @BN_GF2m_mod_mul(%struct.bignum_st* %32, %struct.bignum_st* %33, %struct.bignum_st* %34, %struct.bignum_st* %36, %struct.bignum_ctx* %37), !dbg !3105
  %38 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3106
  %39 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3107
  %40 = load %struct.bignum_st*, %struct.bignum_st** %g, align 8, !dbg !3108
  %call53 = call i32 @BN_GF2m_add(%struct.bignum_st* %38, %struct.bignum_st* %39, %struct.bignum_st* %40), !dbg !3109
  %41 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3110
  %42 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3111
  %43 = load %struct.bignum_st*, %struct.bignum_st** %h, align 8, !dbg !3112
  %call54 = call i32 @BN_GF2m_add(%struct.bignum_st* %41, %struct.bignum_st* %42, %struct.bignum_st* %43), !dbg !3113
  %44 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3114
  %call55 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 693, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.234, i32 0, i32 0), %struct.bignum_st* %44), !dbg !3116
  %tobool56 = icmp ne i32 %call55, 0, !dbg !3116
  br i1 %tobool56, label %if.end58, label %if.then57, !dbg !3117

if.then57:                                        ; preds = %for.body43
  br label %err, !dbg !3118

if.end58:                                         ; preds = %for.body43
  br label %for.inc, !dbg !3119

for.inc:                                          ; preds = %if.end58
  %45 = load i32, i32* %j, align 4, !dbg !3120
  %inc = add nsw i32 %45, 1, !dbg !3120
  store i32 %inc, i32* %j, align 4, !dbg !3120
  br label %for.cond41, !dbg !3122, !llvm.loop !3123

for.end:                                          ; preds = %for.cond41
  br label %for.inc59, !dbg !3125

for.inc59:                                        ; preds = %for.end
  %46 = load i32, i32* %i, align 4, !dbg !3126
  %inc60 = add nsw i32 %46, 1, !dbg !3126
  store i32 %inc60, i32* %i, align 4, !dbg !3126
  br label %for.cond, !dbg !3128, !llvm.loop !3129

for.end61:                                        ; preds = %for.cond
  store i32 1, i32* %st, align 4, !dbg !3131
  br label %err, !dbg !3132

err:                                              ; preds = %for.end61, %if.then57, %if.then
  %47 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3133
  call void @BN_free(%struct.bignum_st* %47), !dbg !3134
  %arrayidx62 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3135
  %48 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx62, align 16, !dbg !3135
  call void @BN_free(%struct.bignum_st* %48), !dbg !3136
  %arrayidx63 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3137
  %49 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx63, align 8, !dbg !3137
  call void @BN_free(%struct.bignum_st* %49), !dbg !3138
  %50 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3139
  call void @BN_free(%struct.bignum_st* %50), !dbg !3140
  %51 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3141
  call void @BN_free(%struct.bignum_st* %51), !dbg !3142
  %52 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3143
  call void @BN_free(%struct.bignum_st* %52), !dbg !3144
  %53 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3145
  call void @BN_free(%struct.bignum_st* %53), !dbg !3146
  %54 = load %struct.bignum_st*, %struct.bignum_st** %g, align 8, !dbg !3147
  call void @BN_free(%struct.bignum_st* %54), !dbg !3148
  %55 = load %struct.bignum_st*, %struct.bignum_st** %h, align 8, !dbg !3149
  call void @BN_free(%struct.bignum_st* %55), !dbg !3150
  %56 = load i32, i32* %st, align 4, !dbg !3151
  ret i32 %56, !dbg !3152
}

; Function Attrs: nounwind uwtable
define internal i32 @test_gf2m_sqr() #0 !dbg !3153 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca [2 x %struct.bignum_st*], align 16
  %c = alloca %struct.bignum_st*, align 8
  %d = alloca %struct.bignum_st*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !3154, metadata !134), !dbg !3155
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !3155
  call void @llvm.dbg.declare(metadata [2 x %struct.bignum_st*]* %b, metadata !3156, metadata !134), !dbg !3157
  %0 = bitcast [2 x %struct.bignum_st*]* %b to i8*, !dbg !3157
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 16, i32 16, i1 false), !dbg !3157
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !3158, metadata !134), !dbg !3159
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !3159
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %d, metadata !3160, metadata !134), !dbg !3161
  store %struct.bignum_st* null, %struct.bignum_st** %d, align 8, !dbg !3161
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3162, metadata !134), !dbg !3163
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3164, metadata !134), !dbg !3165
  call void @llvm.dbg.declare(metadata i32* %st, metadata !3166, metadata !134), !dbg !3167
  store i32 0, i32* %st, align 4, !dbg !3167
  %call = call %struct.bignum_st* @BN_new(), !dbg !3168
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !3170
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !3171
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 717, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %1), !dbg !3172
  %tobool = icmp ne i32 %call1, 0, !dbg !3174
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3175

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !3176
  %arrayidx = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3178
  store %struct.bignum_st* %call2, %struct.bignum_st** %arrayidx, align 16, !dbg !3179
  %2 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !3178
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 718, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.229, i32 0, i32 0), i8* %2), !dbg !3180
  %tobool4 = icmp ne i32 %call3, 0, !dbg !3182
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !3183

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !3184
  %arrayidx7 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3185
  store %struct.bignum_st* %call6, %struct.bignum_st** %arrayidx7, align 8, !dbg !3186
  %3 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !3185
  %call8 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 719, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.230, i32 0, i32 0), i8* %3), !dbg !3187
  %tobool9 = icmp ne i32 %call8, 0, !dbg !3188
  br i1 %tobool9, label %lor.lhs.false10, label %if.then, !dbg !3189

lor.lhs.false10:                                  ; preds = %lor.lhs.false5
  %call11 = call %struct.bignum_st* @BN_new(), !dbg !3190
  store %struct.bignum_st* %call11, %struct.bignum_st** %c, align 8, !dbg !3191
  %4 = bitcast %struct.bignum_st* %call11 to i8*, !dbg !3192
  %call12 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 720, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %4), !dbg !3193
  %tobool13 = icmp ne i32 %call12, 0, !dbg !3194
  br i1 %tobool13, label %lor.lhs.false14, label %if.then, !dbg !3195

lor.lhs.false14:                                  ; preds = %lor.lhs.false10
  %call15 = call %struct.bignum_st* @BN_new(), !dbg !3196
  store %struct.bignum_st* %call15, %struct.bignum_st** %d, align 8, !dbg !3197
  %5 = bitcast %struct.bignum_st* %call15 to i8*, !dbg !3198
  %call16 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 721, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i8* %5), !dbg !3199
  %tobool17 = icmp ne i32 %call16, 0, !dbg !3200
  br i1 %tobool17, label %if.end, label %if.then, !dbg !3201

if.then:                                          ; preds = %lor.lhs.false14, %lor.lhs.false10, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !3203

if.end:                                           ; preds = %lor.lhs.false14
  %arrayidx18 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3204
  %6 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx18, align 16, !dbg !3204
  %call19 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([6 x i32], [6 x i32]* @p0, i32 0, i32 0), %struct.bignum_st* %6), !dbg !3205
  %arrayidx20 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3206
  %7 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx20, align 8, !dbg !3206
  %call21 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([4 x i32], [4 x i32]* @p1, i32 0, i32 0), %struct.bignum_st* %7), !dbg !3207
  store i32 0, i32* %i, align 4, !dbg !3208
  br label %for.cond, !dbg !3210

for.cond:                                         ; preds = %for.inc37, %if.end
  %8 = load i32, i32* %i, align 4, !dbg !3211
  %cmp = icmp slt i32 %8, 100, !dbg !3214
  br i1 %cmp, label %for.body, label %for.end39, !dbg !3215

for.body:                                         ; preds = %for.cond
  %9 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3216
  %call22 = call i32 @BN_bntest_rand(%struct.bignum_st* %9, i32 1024, i32 0, i32 0), !dbg !3218
  store i32 0, i32* %j, align 4, !dbg !3219
  br label %for.cond23, !dbg !3221

for.cond23:                                       ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4, !dbg !3222
  %cmp24 = icmp slt i32 %10, 2, !dbg !3225
  br i1 %cmp24, label %for.body25, label %for.end, !dbg !3226

for.body25:                                       ; preds = %for.cond23
  %11 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3227
  %12 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3229
  %13 = load i32, i32* %j, align 4, !dbg !3230
  %idxprom = sext i32 %13 to i64, !dbg !3231
  %arrayidx26 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom, !dbg !3231
  %14 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx26, align 8, !dbg !3231
  %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3232
  %call27 = call i32 @BN_GF2m_mod_sqr(%struct.bignum_st* %11, %struct.bignum_st* %12, %struct.bignum_st* %14, %struct.bignum_ctx* %15), !dbg !3233
  %16 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3234
  %17 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3235
  %call28 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %16, %struct.bignum_st* %17), !dbg !3236
  %18 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3237
  %19 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3238
  %20 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3239
  %21 = load i32, i32* %j, align 4, !dbg !3240
  %idxprom29 = sext i32 %21 to i64, !dbg !3241
  %arrayidx30 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom29, !dbg !3241
  %22 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx30, align 8, !dbg !3241
  %23 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3242
  %call31 = call i32 @BN_GF2m_mod_mul(%struct.bignum_st* %18, %struct.bignum_st* %19, %struct.bignum_st* %20, %struct.bignum_st* %22, %struct.bignum_ctx* %23), !dbg !3243
  %24 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3244
  %25 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3245
  %26 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3246
  %call32 = call i32 @BN_GF2m_add(%struct.bignum_st* %24, %struct.bignum_st* %25, %struct.bignum_st* %26), !dbg !3247
  %27 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3248
  %call33 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 735, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0), %struct.bignum_st* %27), !dbg !3250
  %tobool34 = icmp ne i32 %call33, 0, !dbg !3250
  br i1 %tobool34, label %if.end36, label %if.then35, !dbg !3251

if.then35:                                        ; preds = %for.body25
  br label %err, !dbg !3252

if.end36:                                         ; preds = %for.body25
  br label %for.inc, !dbg !3253

for.inc:                                          ; preds = %if.end36
  %28 = load i32, i32* %j, align 4, !dbg !3254
  %inc = add nsw i32 %28, 1, !dbg !3254
  store i32 %inc, i32* %j, align 4, !dbg !3254
  br label %for.cond23, !dbg !3256, !llvm.loop !3257

for.end:                                          ; preds = %for.cond23
  br label %for.inc37, !dbg !3259

for.inc37:                                        ; preds = %for.end
  %29 = load i32, i32* %i, align 4, !dbg !3260
  %inc38 = add nsw i32 %29, 1, !dbg !3260
  store i32 %inc38, i32* %i, align 4, !dbg !3260
  br label %for.cond, !dbg !3262, !llvm.loop !3263

for.end39:                                        ; preds = %for.cond
  store i32 1, i32* %st, align 4, !dbg !3265
  br label %err, !dbg !3266

err:                                              ; preds = %for.end39, %if.then35, %if.then
  %30 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3267
  call void @BN_free(%struct.bignum_st* %30), !dbg !3268
  %arrayidx40 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3269
  %31 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx40, align 16, !dbg !3269
  call void @BN_free(%struct.bignum_st* %31), !dbg !3270
  %arrayidx41 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3271
  %32 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx41, align 8, !dbg !3271
  call void @BN_free(%struct.bignum_st* %32), !dbg !3272
  %33 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3273
  call void @BN_free(%struct.bignum_st* %33), !dbg !3274
  %34 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3275
  call void @BN_free(%struct.bignum_st* %34), !dbg !3276
  %35 = load i32, i32* %st, align 4, !dbg !3277
  ret i32 %35, !dbg !3278
}

; Function Attrs: nounwind uwtable
define internal i32 @test_gf2m_modinv() #0 !dbg !3279 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca [2 x %struct.bignum_st*], align 16
  %c = alloca %struct.bignum_st*, align 8
  %d = alloca %struct.bignum_st*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !3280, metadata !134), !dbg !3281
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !3281
  call void @llvm.dbg.declare(metadata [2 x %struct.bignum_st*]* %b, metadata !3282, metadata !134), !dbg !3283
  %0 = bitcast [2 x %struct.bignum_st*]* %b to i8*, !dbg !3283
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 16, i32 16, i1 false), !dbg !3283
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !3284, metadata !134), !dbg !3285
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !3285
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %d, metadata !3286, metadata !134), !dbg !3287
  store %struct.bignum_st* null, %struct.bignum_st** %d, align 8, !dbg !3287
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3288, metadata !134), !dbg !3289
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3290, metadata !134), !dbg !3291
  call void @llvm.dbg.declare(metadata i32* %st, metadata !3292, metadata !134), !dbg !3293
  store i32 0, i32* %st, align 4, !dbg !3293
  %call = call %struct.bignum_st* @BN_new(), !dbg !3294
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !3296
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !3297
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 754, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %1), !dbg !3298
  %tobool = icmp ne i32 %call1, 0, !dbg !3300
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3301

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !3302
  %arrayidx = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3304
  store %struct.bignum_st* %call2, %struct.bignum_st** %arrayidx, align 16, !dbg !3305
  %2 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !3304
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 755, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.229, i32 0, i32 0), i8* %2), !dbg !3306
  %tobool4 = icmp ne i32 %call3, 0, !dbg !3308
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !3309

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !3310
  %arrayidx7 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3311
  store %struct.bignum_st* %call6, %struct.bignum_st** %arrayidx7, align 8, !dbg !3312
  %3 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !3311
  %call8 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 756, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.230, i32 0, i32 0), i8* %3), !dbg !3313
  %tobool9 = icmp ne i32 %call8, 0, !dbg !3314
  br i1 %tobool9, label %lor.lhs.false10, label %if.then, !dbg !3315

lor.lhs.false10:                                  ; preds = %lor.lhs.false5
  %call11 = call %struct.bignum_st* @BN_new(), !dbg !3316
  store %struct.bignum_st* %call11, %struct.bignum_st** %c, align 8, !dbg !3317
  %4 = bitcast %struct.bignum_st* %call11 to i8*, !dbg !3318
  %call12 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 757, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %4), !dbg !3319
  %tobool13 = icmp ne i32 %call12, 0, !dbg !3320
  br i1 %tobool13, label %lor.lhs.false14, label %if.then, !dbg !3321

lor.lhs.false14:                                  ; preds = %lor.lhs.false10
  %call15 = call %struct.bignum_st* @BN_new(), !dbg !3322
  store %struct.bignum_st* %call15, %struct.bignum_st** %d, align 8, !dbg !3323
  %5 = bitcast %struct.bignum_st* %call15 to i8*, !dbg !3324
  %call16 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 758, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i8* %5), !dbg !3325
  %tobool17 = icmp ne i32 %call16, 0, !dbg !3326
  br i1 %tobool17, label %if.end, label %if.then, !dbg !3327

if.then:                                          ; preds = %lor.lhs.false14, %lor.lhs.false10, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !3329

if.end:                                           ; preds = %lor.lhs.false14
  %arrayidx18 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3330
  %6 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx18, align 16, !dbg !3330
  %call19 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([6 x i32], [6 x i32]* @p0, i32 0, i32 0), %struct.bignum_st* %6), !dbg !3331
  %arrayidx20 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3332
  %7 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx20, align 8, !dbg !3332
  %call21 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([4 x i32], [4 x i32]* @p1, i32 0, i32 0), %struct.bignum_st* %7), !dbg !3333
  store i32 0, i32* %i, align 4, !dbg !3334
  br label %for.cond, !dbg !3336

for.cond:                                         ; preds = %for.inc35, %if.end
  %8 = load i32, i32* %i, align 4, !dbg !3337
  %cmp = icmp slt i32 %8, 100, !dbg !3340
  br i1 %cmp, label %for.body, label %for.end37, !dbg !3341

for.body:                                         ; preds = %for.cond
  %9 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3342
  %call22 = call i32 @BN_bntest_rand(%struct.bignum_st* %9, i32 512, i32 0, i32 0), !dbg !3344
  store i32 0, i32* %j, align 4, !dbg !3345
  br label %for.cond23, !dbg !3347

for.cond23:                                       ; preds = %for.inc, %for.body
  %10 = load i32, i32* %j, align 4, !dbg !3348
  %cmp24 = icmp slt i32 %10, 2, !dbg !3351
  br i1 %cmp24, label %for.body25, label %for.end, !dbg !3352

for.body25:                                       ; preds = %for.cond23
  %11 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3353
  %12 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3355
  %13 = load i32, i32* %j, align 4, !dbg !3356
  %idxprom = sext i32 %13 to i64, !dbg !3357
  %arrayidx26 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom, !dbg !3357
  %14 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx26, align 8, !dbg !3357
  %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3358
  %call27 = call i32 @BN_GF2m_mod_inv(%struct.bignum_st* %11, %struct.bignum_st* %12, %struct.bignum_st* %14, %struct.bignum_ctx* %15), !dbg !3359
  %16 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3360
  %17 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3361
  %18 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3362
  %19 = load i32, i32* %j, align 4, !dbg !3363
  %idxprom28 = sext i32 %19 to i64, !dbg !3364
  %arrayidx29 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom28, !dbg !3364
  %20 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx29, align 8, !dbg !3364
  %21 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3365
  %call30 = call i32 @BN_GF2m_mod_mul(%struct.bignum_st* %16, %struct.bignum_st* %17, %struct.bignum_st* %18, %struct.bignum_st* %20, %struct.bignum_ctx* %21), !dbg !3366
  %22 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3367
  %call31 = call i32 @test_BN_eq_one(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 770, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0), %struct.bignum_st* %22), !dbg !3369
  %tobool32 = icmp ne i32 %call31, 0, !dbg !3369
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !3370

if.then33:                                        ; preds = %for.body25
  br label %err, !dbg !3371

if.end34:                                         ; preds = %for.body25
  br label %for.inc, !dbg !3372

for.inc:                                          ; preds = %if.end34
  %23 = load i32, i32* %j, align 4, !dbg !3373
  %inc = add nsw i32 %23, 1, !dbg !3373
  store i32 %inc, i32* %j, align 4, !dbg !3373
  br label %for.cond23, !dbg !3375, !llvm.loop !3376

for.end:                                          ; preds = %for.cond23
  br label %for.inc35, !dbg !3378

for.inc35:                                        ; preds = %for.end
  %24 = load i32, i32* %i, align 4, !dbg !3379
  %inc36 = add nsw i32 %24, 1, !dbg !3379
  store i32 %inc36, i32* %i, align 4, !dbg !3379
  br label %for.cond, !dbg !3381, !llvm.loop !3382

for.end37:                                        ; preds = %for.cond
  store i32 1, i32* %st, align 4, !dbg !3384
  br label %err, !dbg !3385

err:                                              ; preds = %for.end37, %if.then33, %if.then
  %25 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3386
  call void @BN_free(%struct.bignum_st* %25), !dbg !3387
  %arrayidx38 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3388
  %26 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx38, align 16, !dbg !3388
  call void @BN_free(%struct.bignum_st* %26), !dbg !3389
  %arrayidx39 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3390
  %27 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx39, align 8, !dbg !3390
  call void @BN_free(%struct.bignum_st* %27), !dbg !3391
  %28 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3392
  call void @BN_free(%struct.bignum_st* %28), !dbg !3393
  %29 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3394
  call void @BN_free(%struct.bignum_st* %29), !dbg !3395
  %30 = load i32, i32* %st, align 4, !dbg !3396
  ret i32 %30, !dbg !3397
}

; Function Attrs: nounwind uwtable
define internal i32 @test_gf2m_moddiv() #0 !dbg !3398 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca [2 x %struct.bignum_st*], align 16
  %c = alloca %struct.bignum_st*, align 8
  %d = alloca %struct.bignum_st*, align 8
  %e = alloca %struct.bignum_st*, align 8
  %f = alloca %struct.bignum_st*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !3399, metadata !134), !dbg !3400
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !3400
  call void @llvm.dbg.declare(metadata [2 x %struct.bignum_st*]* %b, metadata !3401, metadata !134), !dbg !3402
  %0 = bitcast [2 x %struct.bignum_st*]* %b to i8*, !dbg !3402
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 16, i32 16, i1 false), !dbg !3402
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !3403, metadata !134), !dbg !3404
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !3404
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %d, metadata !3405, metadata !134), !dbg !3406
  store %struct.bignum_st* null, %struct.bignum_st** %d, align 8, !dbg !3406
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %e, metadata !3407, metadata !134), !dbg !3408
  store %struct.bignum_st* null, %struct.bignum_st** %e, align 8, !dbg !3408
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %f, metadata !3409, metadata !134), !dbg !3410
  store %struct.bignum_st* null, %struct.bignum_st** %f, align 8, !dbg !3410
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3411, metadata !134), !dbg !3412
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3413, metadata !134), !dbg !3414
  call void @llvm.dbg.declare(metadata i32* %st, metadata !3415, metadata !134), !dbg !3416
  store i32 0, i32* %st, align 4, !dbg !3416
  %call = call %struct.bignum_st* @BN_new(), !dbg !3417
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !3419
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !3420
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 790, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %1), !dbg !3421
  %tobool = icmp ne i32 %call1, 0, !dbg !3423
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3424

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !3425
  %arrayidx = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3427
  store %struct.bignum_st* %call2, %struct.bignum_st** %arrayidx, align 16, !dbg !3428
  %2 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !3427
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 791, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.229, i32 0, i32 0), i8* %2), !dbg !3429
  %tobool4 = icmp ne i32 %call3, 0, !dbg !3431
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !3432

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !3433
  %arrayidx7 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3434
  store %struct.bignum_st* %call6, %struct.bignum_st** %arrayidx7, align 8, !dbg !3435
  %3 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !3434
  %call8 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 792, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.230, i32 0, i32 0), i8* %3), !dbg !3436
  %tobool9 = icmp ne i32 %call8, 0, !dbg !3437
  br i1 %tobool9, label %lor.lhs.false10, label %if.then, !dbg !3438

lor.lhs.false10:                                  ; preds = %lor.lhs.false5
  %call11 = call %struct.bignum_st* @BN_new(), !dbg !3439
  store %struct.bignum_st* %call11, %struct.bignum_st** %c, align 8, !dbg !3440
  %4 = bitcast %struct.bignum_st* %call11 to i8*, !dbg !3441
  %call12 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 793, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %4), !dbg !3442
  %tobool13 = icmp ne i32 %call12, 0, !dbg !3443
  br i1 %tobool13, label %lor.lhs.false14, label %if.then, !dbg !3444

lor.lhs.false14:                                  ; preds = %lor.lhs.false10
  %call15 = call %struct.bignum_st* @BN_new(), !dbg !3445
  store %struct.bignum_st* %call15, %struct.bignum_st** %d, align 8, !dbg !3446
  %5 = bitcast %struct.bignum_st* %call15 to i8*, !dbg !3447
  %call16 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 794, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i8* %5), !dbg !3448
  %tobool17 = icmp ne i32 %call16, 0, !dbg !3449
  br i1 %tobool17, label %lor.lhs.false18, label %if.then, !dbg !3450

lor.lhs.false18:                                  ; preds = %lor.lhs.false14
  %call19 = call %struct.bignum_st* @BN_new(), !dbg !3451
  store %struct.bignum_st* %call19, %struct.bignum_st** %e, align 8, !dbg !3452
  %6 = bitcast %struct.bignum_st* %call19 to i8*, !dbg !3453
  %call20 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 795, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i32 0, i32 0), i8* %6), !dbg !3454
  %tobool21 = icmp ne i32 %call20, 0, !dbg !3455
  br i1 %tobool21, label %lor.lhs.false22, label %if.then, !dbg !3456

lor.lhs.false22:                                  ; preds = %lor.lhs.false18
  %call23 = call %struct.bignum_st* @BN_new(), !dbg !3457
  store %struct.bignum_st* %call23, %struct.bignum_st** %f, align 8, !dbg !3458
  %7 = bitcast %struct.bignum_st* %call23 to i8*, !dbg !3459
  %call24 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 796, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.231, i32 0, i32 0), i8* %7), !dbg !3460
  %tobool25 = icmp ne i32 %call24, 0, !dbg !3461
  br i1 %tobool25, label %if.end, label %if.then, !dbg !3462

if.then:                                          ; preds = %lor.lhs.false22, %lor.lhs.false18, %lor.lhs.false14, %lor.lhs.false10, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !3464

if.end:                                           ; preds = %lor.lhs.false22
  %arrayidx26 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3465
  %8 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx26, align 16, !dbg !3465
  %call27 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([6 x i32], [6 x i32]* @p0, i32 0, i32 0), %struct.bignum_st* %8), !dbg !3466
  %arrayidx28 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3467
  %9 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx28, align 8, !dbg !3467
  %call29 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([4 x i32], [4 x i32]* @p1, i32 0, i32 0), %struct.bignum_st* %9), !dbg !3468
  store i32 0, i32* %i, align 4, !dbg !3469
  br label %for.cond, !dbg !3471

for.cond:                                         ; preds = %for.inc47, %if.end
  %10 = load i32, i32* %i, align 4, !dbg !3472
  %cmp = icmp slt i32 %10, 100, !dbg !3475
  br i1 %cmp, label %for.body, label %for.end49, !dbg !3476

for.body:                                         ; preds = %for.cond
  %11 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3477
  %call30 = call i32 @BN_bntest_rand(%struct.bignum_st* %11, i32 512, i32 0, i32 0), !dbg !3479
  %12 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3480
  %call31 = call i32 @BN_bntest_rand(%struct.bignum_st* %12, i32 512, i32 0, i32 0), !dbg !3481
  store i32 0, i32* %j, align 4, !dbg !3482
  br label %for.cond32, !dbg !3484

for.cond32:                                       ; preds = %for.inc, %for.body
  %13 = load i32, i32* %j, align 4, !dbg !3485
  %cmp33 = icmp slt i32 %13, 2, !dbg !3488
  br i1 %cmp33, label %for.body34, label %for.end, !dbg !3489

for.body34:                                       ; preds = %for.cond32
  %14 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3490
  %15 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3492
  %16 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3493
  %17 = load i32, i32* %j, align 4, !dbg !3494
  %idxprom = sext i32 %17 to i64, !dbg !3495
  %arrayidx35 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom, !dbg !3495
  %18 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx35, align 8, !dbg !3495
  %19 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3496
  %call36 = call i32 @BN_GF2m_mod_div(%struct.bignum_st* %14, %struct.bignum_st* %15, %struct.bignum_st* %16, %struct.bignum_st* %18, %struct.bignum_ctx* %19), !dbg !3497
  %20 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3498
  %21 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3499
  %22 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3500
  %23 = load i32, i32* %j, align 4, !dbg !3501
  %idxprom37 = sext i32 %23 to i64, !dbg !3502
  %arrayidx38 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom37, !dbg !3502
  %24 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx38, align 8, !dbg !3502
  %25 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3503
  %call39 = call i32 @BN_GF2m_mod_mul(%struct.bignum_st* %20, %struct.bignum_st* %21, %struct.bignum_st* %22, %struct.bignum_st* %24, %struct.bignum_ctx* %25), !dbg !3504
  %26 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3505
  %27 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3506
  %28 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3507
  %29 = load i32, i32* %j, align 4, !dbg !3508
  %idxprom40 = sext i32 %29 to i64, !dbg !3509
  %arrayidx41 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom40, !dbg !3509
  %30 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx41, align 8, !dbg !3509
  %31 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3510
  %call42 = call i32 @BN_GF2m_mod_div(%struct.bignum_st* %26, %struct.bignum_st* %27, %struct.bignum_st* %28, %struct.bignum_st* %30, %struct.bignum_ctx* %31), !dbg !3511
  %32 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3512
  %call43 = call i32 @test_BN_eq_one(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 810, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.234, i32 0, i32 0), %struct.bignum_st* %32), !dbg !3514
  %tobool44 = icmp ne i32 %call43, 0, !dbg !3514
  br i1 %tobool44, label %if.end46, label %if.then45, !dbg !3515

if.then45:                                        ; preds = %for.body34
  br label %err, !dbg !3516

if.end46:                                         ; preds = %for.body34
  br label %for.inc, !dbg !3517

for.inc:                                          ; preds = %if.end46
  %33 = load i32, i32* %j, align 4, !dbg !3518
  %inc = add nsw i32 %33, 1, !dbg !3518
  store i32 %inc, i32* %j, align 4, !dbg !3518
  br label %for.cond32, !dbg !3520, !llvm.loop !3521

for.end:                                          ; preds = %for.cond32
  br label %for.inc47, !dbg !3523

for.inc47:                                        ; preds = %for.end
  %34 = load i32, i32* %i, align 4, !dbg !3524
  %inc48 = add nsw i32 %34, 1, !dbg !3524
  store i32 %inc48, i32* %i, align 4, !dbg !3524
  br label %for.cond, !dbg !3526, !llvm.loop !3527

for.end49:                                        ; preds = %for.cond
  store i32 1, i32* %st, align 4, !dbg !3529
  br label %err, !dbg !3530

err:                                              ; preds = %for.end49, %if.then45, %if.then
  %35 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3531
  call void @BN_free(%struct.bignum_st* %35), !dbg !3532
  %arrayidx50 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3533
  %36 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx50, align 16, !dbg !3533
  call void @BN_free(%struct.bignum_st* %36), !dbg !3534
  %arrayidx51 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3535
  %37 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx51, align 8, !dbg !3535
  call void @BN_free(%struct.bignum_st* %37), !dbg !3536
  %38 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3537
  call void @BN_free(%struct.bignum_st* %38), !dbg !3538
  %39 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3539
  call void @BN_free(%struct.bignum_st* %39), !dbg !3540
  %40 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3541
  call void @BN_free(%struct.bignum_st* %40), !dbg !3542
  %41 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3543
  call void @BN_free(%struct.bignum_st* %41), !dbg !3544
  %42 = load i32, i32* %st, align 4, !dbg !3545
  ret i32 %42, !dbg !3546
}

; Function Attrs: nounwind uwtable
define internal i32 @test_gf2m_modexp() #0 !dbg !3547 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca [2 x %struct.bignum_st*], align 16
  %c = alloca %struct.bignum_st*, align 8
  %d = alloca %struct.bignum_st*, align 8
  %e = alloca %struct.bignum_st*, align 8
  %f = alloca %struct.bignum_st*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !3548, metadata !134), !dbg !3549
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !3549
  call void @llvm.dbg.declare(metadata [2 x %struct.bignum_st*]* %b, metadata !3550, metadata !134), !dbg !3551
  %0 = bitcast [2 x %struct.bignum_st*]* %b to i8*, !dbg !3551
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 16, i32 16, i1 false), !dbg !3551
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !3552, metadata !134), !dbg !3553
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !3553
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %d, metadata !3554, metadata !134), !dbg !3555
  store %struct.bignum_st* null, %struct.bignum_st** %d, align 8, !dbg !3555
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %e, metadata !3556, metadata !134), !dbg !3557
  store %struct.bignum_st* null, %struct.bignum_st** %e, align 8, !dbg !3557
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %f, metadata !3558, metadata !134), !dbg !3559
  store %struct.bignum_st* null, %struct.bignum_st** %f, align 8, !dbg !3559
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3560, metadata !134), !dbg !3561
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3562, metadata !134), !dbg !3563
  call void @llvm.dbg.declare(metadata i32* %st, metadata !3564, metadata !134), !dbg !3565
  store i32 0, i32* %st, align 4, !dbg !3565
  %call = call %struct.bignum_st* @BN_new(), !dbg !3566
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !3568
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !3569
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 832, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %1), !dbg !3570
  %tobool = icmp ne i32 %call1, 0, !dbg !3572
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3573

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !3574
  %arrayidx = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3576
  store %struct.bignum_st* %call2, %struct.bignum_st** %arrayidx, align 16, !dbg !3577
  %2 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !3576
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 833, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.229, i32 0, i32 0), i8* %2), !dbg !3578
  %tobool4 = icmp ne i32 %call3, 0, !dbg !3580
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !3581

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !3582
  %arrayidx7 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3583
  store %struct.bignum_st* %call6, %struct.bignum_st** %arrayidx7, align 8, !dbg !3584
  %3 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !3583
  %call8 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 834, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.230, i32 0, i32 0), i8* %3), !dbg !3585
  %tobool9 = icmp ne i32 %call8, 0, !dbg !3586
  br i1 %tobool9, label %lor.lhs.false10, label %if.then, !dbg !3587

lor.lhs.false10:                                  ; preds = %lor.lhs.false5
  %call11 = call %struct.bignum_st* @BN_new(), !dbg !3588
  store %struct.bignum_st* %call11, %struct.bignum_st** %c, align 8, !dbg !3589
  %4 = bitcast %struct.bignum_st* %call11 to i8*, !dbg !3590
  %call12 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 835, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %4), !dbg !3591
  %tobool13 = icmp ne i32 %call12, 0, !dbg !3592
  br i1 %tobool13, label %lor.lhs.false14, label %if.then, !dbg !3593

lor.lhs.false14:                                  ; preds = %lor.lhs.false10
  %call15 = call %struct.bignum_st* @BN_new(), !dbg !3594
  store %struct.bignum_st* %call15, %struct.bignum_st** %d, align 8, !dbg !3595
  %5 = bitcast %struct.bignum_st* %call15 to i8*, !dbg !3596
  %call16 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 836, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i8* %5), !dbg !3597
  %tobool17 = icmp ne i32 %call16, 0, !dbg !3598
  br i1 %tobool17, label %lor.lhs.false18, label %if.then, !dbg !3599

lor.lhs.false18:                                  ; preds = %lor.lhs.false14
  %call19 = call %struct.bignum_st* @BN_new(), !dbg !3600
  store %struct.bignum_st* %call19, %struct.bignum_st** %e, align 8, !dbg !3601
  %6 = bitcast %struct.bignum_st* %call19 to i8*, !dbg !3602
  %call20 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 837, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i32 0, i32 0), i8* %6), !dbg !3603
  %tobool21 = icmp ne i32 %call20, 0, !dbg !3604
  br i1 %tobool21, label %lor.lhs.false22, label %if.then, !dbg !3605

lor.lhs.false22:                                  ; preds = %lor.lhs.false18
  %call23 = call %struct.bignum_st* @BN_new(), !dbg !3606
  store %struct.bignum_st* %call23, %struct.bignum_st** %f, align 8, !dbg !3607
  %7 = bitcast %struct.bignum_st* %call23 to i8*, !dbg !3608
  %call24 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 838, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.231, i32 0, i32 0), i8* %7), !dbg !3609
  %tobool25 = icmp ne i32 %call24, 0, !dbg !3610
  br i1 %tobool25, label %if.end, label %if.then, !dbg !3611

if.then:                                          ; preds = %lor.lhs.false22, %lor.lhs.false18, %lor.lhs.false14, %lor.lhs.false10, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !3613

if.end:                                           ; preds = %lor.lhs.false22
  %arrayidx26 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3614
  %8 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx26, align 16, !dbg !3614
  %call27 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([6 x i32], [6 x i32]* @p0, i32 0, i32 0), %struct.bignum_st* %8), !dbg !3615
  %arrayidx28 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3616
  %9 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx28, align 8, !dbg !3616
  %call29 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([4 x i32], [4 x i32]* @p1, i32 0, i32 0), %struct.bignum_st* %9), !dbg !3617
  store i32 0, i32* %i, align 4, !dbg !3618
  br label %for.cond, !dbg !3620

for.cond:                                         ; preds = %for.inc53, %if.end
  %10 = load i32, i32* %i, align 4, !dbg !3621
  %cmp = icmp slt i32 %10, 100, !dbg !3624
  br i1 %cmp, label %for.body, label %for.end55, !dbg !3625

for.body:                                         ; preds = %for.cond
  %11 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3626
  %call30 = call i32 @BN_bntest_rand(%struct.bignum_st* %11, i32 512, i32 0, i32 0), !dbg !3628
  %12 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3629
  %call31 = call i32 @BN_bntest_rand(%struct.bignum_st* %12, i32 512, i32 0, i32 0), !dbg !3630
  %13 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3631
  %call32 = call i32 @BN_bntest_rand(%struct.bignum_st* %13, i32 512, i32 0, i32 0), !dbg !3632
  store i32 0, i32* %j, align 4, !dbg !3633
  br label %for.cond33, !dbg !3635

for.cond33:                                       ; preds = %for.inc, %for.body
  %14 = load i32, i32* %j, align 4, !dbg !3636
  %cmp34 = icmp slt i32 %14, 2, !dbg !3639
  br i1 %cmp34, label %for.body35, label %for.end, !dbg !3640

for.body35:                                       ; preds = %for.cond33
  %15 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3641
  %16 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3643
  %17 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3644
  %18 = load i32, i32* %j, align 4, !dbg !3645
  %idxprom = sext i32 %18 to i64, !dbg !3646
  %arrayidx36 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom, !dbg !3646
  %19 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx36, align 8, !dbg !3646
  %20 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3647
  %call37 = call i32 @BN_GF2m_mod_exp(%struct.bignum_st* %15, %struct.bignum_st* %16, %struct.bignum_st* %17, %struct.bignum_st* %19, %struct.bignum_ctx* %20), !dbg !3648
  %21 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3649
  %22 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3650
  %23 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3651
  %24 = load i32, i32* %j, align 4, !dbg !3652
  %idxprom38 = sext i32 %24 to i64, !dbg !3653
  %arrayidx39 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom38, !dbg !3653
  %25 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx39, align 8, !dbg !3653
  %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3654
  %call40 = call i32 @BN_GF2m_mod_exp(%struct.bignum_st* %21, %struct.bignum_st* %22, %struct.bignum_st* %23, %struct.bignum_st* %25, %struct.bignum_ctx* %26), !dbg !3655
  %27 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3656
  %28 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3657
  %29 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3658
  %30 = load i32, i32* %j, align 4, !dbg !3659
  %idxprom41 = sext i32 %30 to i64, !dbg !3660
  %arrayidx42 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom41, !dbg !3660
  %31 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx42, align 8, !dbg !3660
  %32 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3661
  %call43 = call i32 @BN_GF2m_mod_mul(%struct.bignum_st* %27, %struct.bignum_st* %28, %struct.bignum_st* %29, %struct.bignum_st* %31, %struct.bignum_ctx* %32), !dbg !3662
  %33 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3663
  %34 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3664
  %35 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3665
  %call44 = call i32 @BN_add(%struct.bignum_st* %33, %struct.bignum_st* %34, %struct.bignum_st* %35), !dbg !3666
  %36 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3667
  %37 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3668
  %38 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3669
  %39 = load i32, i32* %j, align 4, !dbg !3670
  %idxprom45 = sext i32 %39 to i64, !dbg !3671
  %arrayidx46 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom45, !dbg !3671
  %40 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx46, align 8, !dbg !3671
  %41 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3672
  %call47 = call i32 @BN_GF2m_mod_exp(%struct.bignum_st* %36, %struct.bignum_st* %37, %struct.bignum_st* %38, %struct.bignum_st* %40, %struct.bignum_ctx* %41), !dbg !3673
  %42 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3674
  %43 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3675
  %44 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3676
  %call48 = call i32 @BN_GF2m_add(%struct.bignum_st* %42, %struct.bignum_st* %43, %struct.bignum_st* %44), !dbg !3677
  %45 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3678
  %call49 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 856, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.234, i32 0, i32 0), %struct.bignum_st* %45), !dbg !3680
  %tobool50 = icmp ne i32 %call49, 0, !dbg !3680
  br i1 %tobool50, label %if.end52, label %if.then51, !dbg !3681

if.then51:                                        ; preds = %for.body35
  br label %err, !dbg !3682

if.end52:                                         ; preds = %for.body35
  br label %for.inc, !dbg !3683

for.inc:                                          ; preds = %if.end52
  %46 = load i32, i32* %j, align 4, !dbg !3684
  %inc = add nsw i32 %46, 1, !dbg !3684
  store i32 %inc, i32* %j, align 4, !dbg !3684
  br label %for.cond33, !dbg !3686, !llvm.loop !3687

for.end:                                          ; preds = %for.cond33
  br label %for.inc53, !dbg !3689

for.inc53:                                        ; preds = %for.end
  %47 = load i32, i32* %i, align 4, !dbg !3690
  %inc54 = add nsw i32 %47, 1, !dbg !3690
  store i32 %inc54, i32* %i, align 4, !dbg !3690
  br label %for.cond, !dbg !3692, !llvm.loop !3693

for.end55:                                        ; preds = %for.cond
  store i32 1, i32* %st, align 4, !dbg !3695
  br label %err, !dbg !3696

err:                                              ; preds = %for.end55, %if.then51, %if.then
  %48 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3697
  call void @BN_free(%struct.bignum_st* %48), !dbg !3698
  %arrayidx56 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3699
  %49 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx56, align 16, !dbg !3699
  call void @BN_free(%struct.bignum_st* %49), !dbg !3700
  %arrayidx57 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3701
  %50 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx57, align 8, !dbg !3701
  call void @BN_free(%struct.bignum_st* %50), !dbg !3702
  %51 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3703
  call void @BN_free(%struct.bignum_st* %51), !dbg !3704
  %52 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3705
  call void @BN_free(%struct.bignum_st* %52), !dbg !3706
  %53 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3707
  call void @BN_free(%struct.bignum_st* %53), !dbg !3708
  %54 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3709
  call void @BN_free(%struct.bignum_st* %54), !dbg !3710
  %55 = load i32, i32* %st, align 4, !dbg !3711
  ret i32 %55, !dbg !3712
}

; Function Attrs: nounwind uwtable
define internal i32 @test_gf2m_modsqrt() #0 !dbg !3713 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca [2 x %struct.bignum_st*], align 16
  %c = alloca %struct.bignum_st*, align 8
  %d = alloca %struct.bignum_st*, align 8
  %e = alloca %struct.bignum_st*, align 8
  %f = alloca %struct.bignum_st*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !3714, metadata !134), !dbg !3715
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !3715
  call void @llvm.dbg.declare(metadata [2 x %struct.bignum_st*]* %b, metadata !3716, metadata !134), !dbg !3717
  %0 = bitcast [2 x %struct.bignum_st*]* %b to i8*, !dbg !3717
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 16, i32 16, i1 false), !dbg !3717
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !3718, metadata !134), !dbg !3719
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !3719
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %d, metadata !3720, metadata !134), !dbg !3721
  store %struct.bignum_st* null, %struct.bignum_st** %d, align 8, !dbg !3721
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %e, metadata !3722, metadata !134), !dbg !3723
  store %struct.bignum_st* null, %struct.bignum_st** %e, align 8, !dbg !3723
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %f, metadata !3724, metadata !134), !dbg !3725
  store %struct.bignum_st* null, %struct.bignum_st** %f, align 8, !dbg !3725
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3726, metadata !134), !dbg !3727
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3728, metadata !134), !dbg !3729
  call void @llvm.dbg.declare(metadata i32* %st, metadata !3730, metadata !134), !dbg !3731
  store i32 0, i32* %st, align 4, !dbg !3731
  %call = call %struct.bignum_st* @BN_new(), !dbg !3732
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !3734
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !3735
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 878, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %1), !dbg !3736
  %tobool = icmp ne i32 %call1, 0, !dbg !3738
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3739

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !3740
  %arrayidx = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3742
  store %struct.bignum_st* %call2, %struct.bignum_st** %arrayidx, align 16, !dbg !3743
  %2 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !3742
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 879, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.229, i32 0, i32 0), i8* %2), !dbg !3744
  %tobool4 = icmp ne i32 %call3, 0, !dbg !3746
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !3747

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !3748
  %arrayidx7 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3749
  store %struct.bignum_st* %call6, %struct.bignum_st** %arrayidx7, align 8, !dbg !3750
  %3 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !3749
  %call8 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 880, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.230, i32 0, i32 0), i8* %3), !dbg !3751
  %tobool9 = icmp ne i32 %call8, 0, !dbg !3752
  br i1 %tobool9, label %lor.lhs.false10, label %if.then, !dbg !3753

lor.lhs.false10:                                  ; preds = %lor.lhs.false5
  %call11 = call %struct.bignum_st* @BN_new(), !dbg !3754
  store %struct.bignum_st* %call11, %struct.bignum_st** %c, align 8, !dbg !3755
  %4 = bitcast %struct.bignum_st* %call11 to i8*, !dbg !3756
  %call12 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 881, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %4), !dbg !3757
  %tobool13 = icmp ne i32 %call12, 0, !dbg !3758
  br i1 %tobool13, label %lor.lhs.false14, label %if.then, !dbg !3759

lor.lhs.false14:                                  ; preds = %lor.lhs.false10
  %call15 = call %struct.bignum_st* @BN_new(), !dbg !3760
  store %struct.bignum_st* %call15, %struct.bignum_st** %d, align 8, !dbg !3761
  %5 = bitcast %struct.bignum_st* %call15 to i8*, !dbg !3762
  %call16 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 882, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i8* %5), !dbg !3763
  %tobool17 = icmp ne i32 %call16, 0, !dbg !3764
  br i1 %tobool17, label %lor.lhs.false18, label %if.then, !dbg !3765

lor.lhs.false18:                                  ; preds = %lor.lhs.false14
  %call19 = call %struct.bignum_st* @BN_new(), !dbg !3766
  store %struct.bignum_st* %call19, %struct.bignum_st** %e, align 8, !dbg !3767
  %6 = bitcast %struct.bignum_st* %call19 to i8*, !dbg !3768
  %call20 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 883, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i32 0, i32 0), i8* %6), !dbg !3769
  %tobool21 = icmp ne i32 %call20, 0, !dbg !3770
  br i1 %tobool21, label %lor.lhs.false22, label %if.then, !dbg !3771

lor.lhs.false22:                                  ; preds = %lor.lhs.false18
  %call23 = call %struct.bignum_st* @BN_new(), !dbg !3772
  store %struct.bignum_st* %call23, %struct.bignum_st** %f, align 8, !dbg !3773
  %7 = bitcast %struct.bignum_st* %call23 to i8*, !dbg !3774
  %call24 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 884, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.231, i32 0, i32 0), i8* %7), !dbg !3775
  %tobool25 = icmp ne i32 %call24, 0, !dbg !3776
  br i1 %tobool25, label %if.end, label %if.then, !dbg !3777

if.then:                                          ; preds = %lor.lhs.false22, %lor.lhs.false18, %lor.lhs.false14, %lor.lhs.false10, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !3779

if.end:                                           ; preds = %lor.lhs.false22
  %arrayidx26 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3780
  %8 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx26, align 16, !dbg !3780
  %call27 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([6 x i32], [6 x i32]* @p0, i32 0, i32 0), %struct.bignum_st* %8), !dbg !3781
  %arrayidx28 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3782
  %9 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx28, align 8, !dbg !3782
  %call29 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([4 x i32], [4 x i32]* @p1, i32 0, i32 0), %struct.bignum_st* %9), !dbg !3783
  store i32 0, i32* %i, align 4, !dbg !3784
  br label %for.cond, !dbg !3786

for.cond:                                         ; preds = %for.inc47, %if.end
  %10 = load i32, i32* %i, align 4, !dbg !3787
  %cmp = icmp slt i32 %10, 100, !dbg !3790
  br i1 %cmp, label %for.body, label %for.end49, !dbg !3791

for.body:                                         ; preds = %for.cond
  %11 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3792
  %call30 = call i32 @BN_bntest_rand(%struct.bignum_st* %11, i32 512, i32 0, i32 0), !dbg !3794
  store i32 0, i32* %j, align 4, !dbg !3795
  br label %for.cond31, !dbg !3797

for.cond31:                                       ; preds = %for.inc, %for.body
  %12 = load i32, i32* %j, align 4, !dbg !3798
  %cmp32 = icmp slt i32 %12, 2, !dbg !3801
  br i1 %cmp32, label %for.body33, label %for.end, !dbg !3802

for.body33:                                       ; preds = %for.cond31
  %13 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3803
  %14 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3805
  %15 = load i32, i32* %j, align 4, !dbg !3806
  %idxprom = sext i32 %15 to i64, !dbg !3807
  %arrayidx34 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom, !dbg !3807
  %16 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx34, align 8, !dbg !3807
  %call35 = call i32 @BN_GF2m_mod(%struct.bignum_st* %13, %struct.bignum_st* %14, %struct.bignum_st* %16), !dbg !3808
  %17 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3809
  %18 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3810
  %19 = load i32, i32* %j, align 4, !dbg !3811
  %idxprom36 = sext i32 %19 to i64, !dbg !3812
  %arrayidx37 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom36, !dbg !3812
  %20 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx37, align 8, !dbg !3812
  %21 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3813
  %call38 = call i32 @BN_GF2m_mod_sqrt(%struct.bignum_st* %17, %struct.bignum_st* %18, %struct.bignum_st* %20, %struct.bignum_ctx* %21), !dbg !3814
  %22 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3815
  %23 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3816
  %24 = load i32, i32* %j, align 4, !dbg !3817
  %idxprom39 = sext i32 %24 to i64, !dbg !3818
  %arrayidx40 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom39, !dbg !3818
  %25 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx40, align 8, !dbg !3818
  %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3819
  %call41 = call i32 @BN_GF2m_mod_sqr(%struct.bignum_st* %22, %struct.bignum_st* %23, %struct.bignum_st* %25, %struct.bignum_ctx* %26), !dbg !3820
  %27 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3821
  %28 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3822
  %29 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3823
  %call42 = call i32 @BN_GF2m_add(%struct.bignum_st* %27, %struct.bignum_st* %28, %struct.bignum_st* %29), !dbg !3824
  %30 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3825
  %call43 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 898, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.234, i32 0, i32 0), %struct.bignum_st* %30), !dbg !3827
  %tobool44 = icmp ne i32 %call43, 0, !dbg !3827
  br i1 %tobool44, label %if.end46, label %if.then45, !dbg !3828

if.then45:                                        ; preds = %for.body33
  br label %err, !dbg !3829

if.end46:                                         ; preds = %for.body33
  br label %for.inc, !dbg !3830

for.inc:                                          ; preds = %if.end46
  %31 = load i32, i32* %j, align 4, !dbg !3831
  %inc = add nsw i32 %31, 1, !dbg !3831
  store i32 %inc, i32* %j, align 4, !dbg !3831
  br label %for.cond31, !dbg !3833, !llvm.loop !3834

for.end:                                          ; preds = %for.cond31
  br label %for.inc47, !dbg !3836

for.inc47:                                        ; preds = %for.end
  %32 = load i32, i32* %i, align 4, !dbg !3837
  %inc48 = add nsw i32 %32, 1, !dbg !3837
  store i32 %inc48, i32* %i, align 4, !dbg !3837
  br label %for.cond, !dbg !3839, !llvm.loop !3840

for.end49:                                        ; preds = %for.cond
  store i32 1, i32* %st, align 4, !dbg !3842
  br label %err, !dbg !3843

err:                                              ; preds = %for.end49, %if.then45, %if.then
  %33 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3844
  call void @BN_free(%struct.bignum_st* %33), !dbg !3845
  %arrayidx50 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3846
  %34 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx50, align 16, !dbg !3846
  call void @BN_free(%struct.bignum_st* %34), !dbg !3847
  %arrayidx51 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3848
  %35 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx51, align 8, !dbg !3848
  call void @BN_free(%struct.bignum_st* %35), !dbg !3849
  %36 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3850
  call void @BN_free(%struct.bignum_st* %36), !dbg !3851
  %37 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3852
  call void @BN_free(%struct.bignum_st* %37), !dbg !3853
  %38 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3854
  call void @BN_free(%struct.bignum_st* %38), !dbg !3855
  %39 = load %struct.bignum_st*, %struct.bignum_st** %f, align 8, !dbg !3856
  call void @BN_free(%struct.bignum_st* %39), !dbg !3857
  %40 = load i32, i32* %st, align 4, !dbg !3858
  ret i32 %40, !dbg !3859
}

; Function Attrs: nounwind uwtable
define internal i32 @test_gf2m_modsolvequad() #0 !dbg !3860 {
entry:
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca [2 x %struct.bignum_st*], align 16
  %c = alloca %struct.bignum_st*, align 8
  %d = alloca %struct.bignum_st*, align 8
  %e = alloca %struct.bignum_st*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %s = alloca i32, align 4
  %t = alloca i32, align 4
  %st = alloca i32, align 4
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !3861, metadata !134), !dbg !3862
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !3862
  call void @llvm.dbg.declare(metadata [2 x %struct.bignum_st*]* %b, metadata !3863, metadata !134), !dbg !3864
  %0 = bitcast [2 x %struct.bignum_st*]* %b to i8*, !dbg !3864
  call void @llvm.memset.p0i8.i64(i8* %0, i8 0, i64 16, i32 16, i1 false), !dbg !3864
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !3865, metadata !134), !dbg !3866
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !3866
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %d, metadata !3867, metadata !134), !dbg !3868
  store %struct.bignum_st* null, %struct.bignum_st** %d, align 8, !dbg !3868
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %e, metadata !3869, metadata !134), !dbg !3870
  store %struct.bignum_st* null, %struct.bignum_st** %e, align 8, !dbg !3870
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3871, metadata !134), !dbg !3872
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3873, metadata !134), !dbg !3874
  call void @llvm.dbg.declare(metadata i32* %s, metadata !3875, metadata !134), !dbg !3876
  store i32 0, i32* %s, align 4, !dbg !3876
  call void @llvm.dbg.declare(metadata i32* %t, metadata !3877, metadata !134), !dbg !3878
  call void @llvm.dbg.declare(metadata i32* %st, metadata !3879, metadata !134), !dbg !3880
  store i32 0, i32* %st, align 4, !dbg !3880
  %call = call %struct.bignum_st* @BN_new(), !dbg !3881
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !3883
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !3884
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 920, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i32 0, i32 0), i8* %1), !dbg !3885
  %tobool = icmp ne i32 %call1, 0, !dbg !3887
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3888

lor.lhs.false:                                    ; preds = %entry
  %call2 = call %struct.bignum_st* @BN_new(), !dbg !3889
  %arrayidx = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3891
  store %struct.bignum_st* %call2, %struct.bignum_st** %arrayidx, align 16, !dbg !3892
  %2 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !3891
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 921, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.229, i32 0, i32 0), i8* %2), !dbg !3893
  %tobool4 = icmp ne i32 %call3, 0, !dbg !3895
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !3896

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !3897
  %arrayidx7 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3898
  store %struct.bignum_st* %call6, %struct.bignum_st** %arrayidx7, align 8, !dbg !3899
  %3 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !3898
  %call8 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 922, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.230, i32 0, i32 0), i8* %3), !dbg !3900
  %tobool9 = icmp ne i32 %call8, 0, !dbg !3901
  br i1 %tobool9, label %lor.lhs.false10, label %if.then, !dbg !3902

lor.lhs.false10:                                  ; preds = %lor.lhs.false5
  %call11 = call %struct.bignum_st* @BN_new(), !dbg !3903
  store %struct.bignum_st* %call11, %struct.bignum_st** %c, align 8, !dbg !3904
  %4 = bitcast %struct.bignum_st* %call11 to i8*, !dbg !3905
  %call12 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 923, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i32 0, i32 0), i8* %4), !dbg !3906
  %tobool13 = icmp ne i32 %call12, 0, !dbg !3907
  br i1 %tobool13, label %lor.lhs.false14, label %if.then, !dbg !3908

lor.lhs.false14:                                  ; preds = %lor.lhs.false10
  %call15 = call %struct.bignum_st* @BN_new(), !dbg !3909
  store %struct.bignum_st* %call15, %struct.bignum_st** %d, align 8, !dbg !3910
  %5 = bitcast %struct.bignum_st* %call15 to i8*, !dbg !3911
  %call16 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 924, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i8* %5), !dbg !3912
  %tobool17 = icmp ne i32 %call16, 0, !dbg !3913
  br i1 %tobool17, label %lor.lhs.false18, label %if.then, !dbg !3914

lor.lhs.false18:                                  ; preds = %lor.lhs.false14
  %call19 = call %struct.bignum_st* @BN_new(), !dbg !3915
  store %struct.bignum_st* %call19, %struct.bignum_st** %e, align 8, !dbg !3916
  %6 = bitcast %struct.bignum_st* %call19 to i8*, !dbg !3917
  %call20 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 925, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.53, i32 0, i32 0), i8* %6), !dbg !3918
  %tobool21 = icmp ne i32 %call20, 0, !dbg !3919
  br i1 %tobool21, label %if.end, label %if.then, !dbg !3920

if.then:                                          ; preds = %lor.lhs.false18, %lor.lhs.false14, %lor.lhs.false10, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !3922

if.end:                                           ; preds = %lor.lhs.false18
  %arrayidx22 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !3923
  %7 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx22, align 16, !dbg !3923
  %call23 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([6 x i32], [6 x i32]* @p0, i32 0, i32 0), %struct.bignum_st* %7), !dbg !3924
  %arrayidx24 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !3925
  %8 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx24, align 8, !dbg !3925
  %call25 = call i32 @BN_GF2m_arr2poly(i32* getelementptr inbounds ([4 x i32], [4 x i32]* @p1, i32 0, i32 0), %struct.bignum_st* %8), !dbg !3926
  store i32 0, i32* %i, align 4, !dbg !3927
  br label %for.cond, !dbg !3929

for.cond:                                         ; preds = %for.inc48, %if.end
  %9 = load i32, i32* %i, align 4, !dbg !3930
  %cmp = icmp slt i32 %9, 100, !dbg !3933
  br i1 %cmp, label %for.body, label %for.end50, !dbg !3934

for.body:                                         ; preds = %for.cond
  %10 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3935
  %call26 = call i32 @BN_bntest_rand(%struct.bignum_st* %10, i32 512, i32 0, i32 0), !dbg !3937
  store i32 0, i32* %j, align 4, !dbg !3938
  br label %for.cond27, !dbg !3940

for.cond27:                                       ; preds = %for.inc, %for.body
  %11 = load i32, i32* %j, align 4, !dbg !3941
  %cmp28 = icmp slt i32 %11, 2, !dbg !3944
  br i1 %cmp28, label %for.body29, label %for.end, !dbg !3945

for.body29:                                       ; preds = %for.cond27
  %12 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3946
  %13 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3948
  %14 = load i32, i32* %j, align 4, !dbg !3949
  %idxprom = sext i32 %14 to i64, !dbg !3950
  %arrayidx30 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom, !dbg !3950
  %15 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx30, align 8, !dbg !3950
  %16 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3951
  %call31 = call i32 @BN_GF2m_mod_solve_quad(%struct.bignum_st* %12, %struct.bignum_st* %13, %struct.bignum_st* %15, %struct.bignum_ctx* %16), !dbg !3952
  store i32 %call31, i32* %t, align 4, !dbg !3953
  %17 = load i32, i32* %t, align 4, !dbg !3954
  %tobool32 = icmp ne i32 %17, 0, !dbg !3954
  br i1 %tobool32, label %if.then33, label %if.end46, !dbg !3956

if.then33:                                        ; preds = %for.body29
  %18 = load i32, i32* %s, align 4, !dbg !3957
  %inc = add nsw i32 %18, 1, !dbg !3957
  store i32 %inc, i32* %s, align 4, !dbg !3957
  %19 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3959
  %20 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3960
  %21 = load i32, i32* %j, align 4, !dbg !3961
  %idxprom34 = sext i32 %21 to i64, !dbg !3962
  %arrayidx35 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom34, !dbg !3962
  %22 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx35, align 8, !dbg !3962
  %23 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !3963
  %call36 = call i32 @BN_GF2m_mod_sqr(%struct.bignum_st* %19, %struct.bignum_st* %20, %struct.bignum_st* %22, %struct.bignum_ctx* %23), !dbg !3964
  %24 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3965
  %25 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !3966
  %26 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3967
  %call37 = call i32 @BN_GF2m_add(%struct.bignum_st* %24, %struct.bignum_st* %25, %struct.bignum_st* %26), !dbg !3968
  %27 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3969
  %28 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !3970
  %29 = load i32, i32* %j, align 4, !dbg !3971
  %idxprom38 = sext i32 %29 to i64, !dbg !3972
  %arrayidx39 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 %idxprom38, !dbg !3972
  %30 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx39, align 8, !dbg !3972
  %call40 = call i32 @BN_GF2m_mod(%struct.bignum_st* %27, %struct.bignum_st* %28, %struct.bignum_st* %30), !dbg !3973
  %31 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3974
  %32 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3975
  %33 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !3976
  %call41 = call i32 @BN_GF2m_add(%struct.bignum_st* %31, %struct.bignum_st* %32, %struct.bignum_st* %33), !dbg !3977
  %34 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !3978
  %call42 = call i32 @test_BN_eq_zero(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 944, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i32 0, i32 0), %struct.bignum_st* %34), !dbg !3980
  %tobool43 = icmp ne i32 %call42, 0, !dbg !3980
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !3981

if.then44:                                        ; preds = %if.then33
  br label %err, !dbg !3982

if.end45:                                         ; preds = %if.then33
  br label %if.end46, !dbg !3983

if.end46:                                         ; preds = %if.end45, %for.body29
  br label %for.inc, !dbg !3984

for.inc:                                          ; preds = %if.end46
  %35 = load i32, i32* %j, align 4, !dbg !3985
  %inc47 = add nsw i32 %35, 1, !dbg !3985
  store i32 %inc47, i32* %j, align 4, !dbg !3985
  br label %for.cond27, !dbg !3987, !llvm.loop !3988

for.end:                                          ; preds = %for.cond27
  br label %for.inc48, !dbg !3990

for.inc48:                                        ; preds = %for.end
  %36 = load i32, i32* %i, align 4, !dbg !3991
  %inc49 = add nsw i32 %36, 1, !dbg !3991
  store i32 %inc49, i32* %i, align 4, !dbg !3991
  br label %for.cond, !dbg !3993, !llvm.loop !3994

for.end50:                                        ; preds = %for.cond
  %37 = load i32, i32* %s, align 4, !dbg !3996
  %call51 = call i32 @test_int_ge(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 949, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.235, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50, i32 0, i32 0), i32 %37, i32 0), !dbg !3998
  %tobool52 = icmp ne i32 %call51, 0, !dbg !3998
  br i1 %tobool52, label %if.end54, label %if.then53, !dbg !3999

if.then53:                                        ; preds = %for.end50
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 950, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.236, i32 0, i32 0), i32 100), !dbg !4000
  br label %err, !dbg !4002

if.end54:                                         ; preds = %for.end50
  store i32 1, i32* %st, align 4, !dbg !4003
  br label %err, !dbg !4004

err:                                              ; preds = %if.end54, %if.then53, %if.then44, %if.then
  %38 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4005
  call void @BN_free(%struct.bignum_st* %38), !dbg !4006
  %arrayidx55 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 0, !dbg !4007
  %39 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx55, align 16, !dbg !4007
  call void @BN_free(%struct.bignum_st* %39), !dbg !4008
  %arrayidx56 = getelementptr inbounds [2 x %struct.bignum_st*], [2 x %struct.bignum_st*]* %b, i64 0, i64 1, !dbg !4009
  %40 = load %struct.bignum_st*, %struct.bignum_st** %arrayidx56, align 8, !dbg !4009
  call void @BN_free(%struct.bignum_st* %40), !dbg !4010
  %41 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !4011
  call void @BN_free(%struct.bignum_st* %41), !dbg !4012
  %42 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !4013
  call void @BN_free(%struct.bignum_st* %42), !dbg !4014
  %43 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !4015
  call void @BN_free(%struct.bignum_st* %43), !dbg !4016
  %44 = load i32, i32* %st, align 4, !dbg !4017
  ret i32 %44, !dbg !4018
}

; Function Attrs: nounwind uwtable
define internal i32 @test_is_prime(i32 %i) #0 !dbg !4019 {
entry:
  %i.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %r = alloca %struct.bignum_st*, align 8
  %trial = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !4020, metadata !134), !dbg !4021
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !4022, metadata !134), !dbg !4023
  store i32 0, i32* %ret, align 4, !dbg !4023
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %r, metadata !4024, metadata !134), !dbg !4025
  store %struct.bignum_st* null, %struct.bignum_st** %r, align 8, !dbg !4025
  call void @llvm.dbg.declare(metadata i32* %trial, metadata !4026, metadata !134), !dbg !4027
  %call = call %struct.bignum_st* @BN_new(), !dbg !4028
  store %struct.bignum_st* %call, %struct.bignum_st** %r, align 8, !dbg !4030
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !4031
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2164, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100, i32 0, i32 0), i8* %0), !dbg !4032
  %tobool = icmp ne i32 %call1, 0, !dbg !4034
  br i1 %tobool, label %if.end, label %if.then, !dbg !4035

if.then:                                          ; preds = %entry
  br label %err, !dbg !4036

if.end:                                           ; preds = %entry
  store i32 0, i32* %trial, align 4, !dbg !4037
  br label %for.cond, !dbg !4039

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %trial, align 4, !dbg !4040
  %cmp = icmp sle i32 %1, 1, !dbg !4043
  br i1 %cmp, label %for.body, label %for.end, !dbg !4044

for.body:                                         ; preds = %for.cond
  %2 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !4045
  %3 = load i32, i32* %i.addr, align 4, !dbg !4048
  %idxprom = sext i32 %3 to i64, !dbg !4049
  %arrayidx = getelementptr inbounds [5 x i32], [5 x i32]* @primes, i64 0, i64 %idxprom, !dbg !4049
  %4 = load i32, i32* %arrayidx, align 4, !dbg !4049
  %conv = sext i32 %4 to i64, !dbg !4049
  %call2 = call i32 @BN_set_word(%struct.bignum_st* %2, i64 %conv), !dbg !4050
  %cmp3 = icmp ne i32 %call2, 0, !dbg !4051
  %conv4 = zext i1 %cmp3 to i32, !dbg !4051
  %call5 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2168, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.237, i32 0, i32 0), i32 %conv4), !dbg !4052
  %tobool6 = icmp ne i32 %call5, 0, !dbg !4054
  br i1 %tobool6, label %lor.lhs.false, label %if.then10, !dbg !4055

lor.lhs.false:                                    ; preds = %for.body
  %5 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !4056
  %6 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !4058
  %7 = load i32, i32* %trial, align 4, !dbg !4059
  %call7 = call i32 @BN_is_prime_fasttest_ex(%struct.bignum_st* %5, i32 1, %struct.bignum_ctx* %6, i32 %7, %struct.bn_gencb_st* null), !dbg !4060
  %call8 = call i32 @test_int_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2170, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.238, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.125, i32 0, i32 0), i32 %call7, i32 1), !dbg !4061
  %tobool9 = icmp ne i32 %call8, 0, !dbg !4063
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !4064

if.then10:                                        ; preds = %lor.lhs.false, %for.body
  br label %err, !dbg !4066

if.end11:                                         ; preds = %lor.lhs.false
  br label %for.inc, !dbg !4067

for.inc:                                          ; preds = %if.end11
  %8 = load i32, i32* %trial, align 4, !dbg !4068
  %inc = add nsw i32 %8, 1, !dbg !4068
  store i32 %inc, i32* %trial, align 4, !dbg !4068
  br label %for.cond, !dbg !4070, !llvm.loop !4071

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %ret, align 4, !dbg !4073
  br label %err, !dbg !4074

err:                                              ; preds = %for.end, %if.then10, %if.then
  %9 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !4075
  call void @BN_free(%struct.bignum_st* %9), !dbg !4076
  %10 = load i32, i32* %ret, align 4, !dbg !4077
  ret i32 %10, !dbg !4078
}

; Function Attrs: nounwind uwtable
define internal i32 @test_not_prime(i32 %i) #0 !dbg !4079 {
entry:
  %i.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %r = alloca %struct.bignum_st*, align 8
  %trial = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !4080, metadata !134), !dbg !4081
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !4082, metadata !134), !dbg !4083
  store i32 0, i32* %ret, align 4, !dbg !4083
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %r, metadata !4084, metadata !134), !dbg !4085
  store %struct.bignum_st* null, %struct.bignum_st** %r, align 8, !dbg !4085
  call void @llvm.dbg.declare(metadata i32* %trial, metadata !4086, metadata !134), !dbg !4087
  %call = call %struct.bignum_st* @BN_new(), !dbg !4088
  store %struct.bignum_st* %call, %struct.bignum_st** %r, align 8, !dbg !4090
  %0 = bitcast %struct.bignum_st* %call to i8*, !dbg !4091
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2188, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100, i32 0, i32 0), i8* %0), !dbg !4092
  %tobool = icmp ne i32 %call1, 0, !dbg !4094
  br i1 %tobool, label %if.end, label %if.then, !dbg !4095

if.then:                                          ; preds = %entry
  br label %err, !dbg !4096

if.end:                                           ; preds = %entry
  store i32 0, i32* %trial, align 4, !dbg !4097
  br label %for.cond, !dbg !4099

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %trial, align 4, !dbg !4100
  %cmp = icmp sle i32 %1, 1, !dbg !4103
  br i1 %cmp, label %for.body, label %for.end, !dbg !4104

for.body:                                         ; preds = %for.cond
  %2 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !4105
  %3 = load i32, i32* %i.addr, align 4, !dbg !4108
  %idxprom = sext i32 %3 to i64, !dbg !4109
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @not_primes, i64 0, i64 %idxprom, !dbg !4109
  %4 = load i32, i32* %arrayidx, align 4, !dbg !4109
  %conv = sext i32 %4 to i64, !dbg !4109
  %call2 = call i32 @BN_set_word(%struct.bignum_st* %2, i64 %conv), !dbg !4110
  %cmp3 = icmp ne i32 %call2, 0, !dbg !4111
  %conv4 = zext i1 %cmp3 to i32, !dbg !4111
  %call5 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2192, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.239, i32 0, i32 0), i32 %conv4), !dbg !4112
  %tobool6 = icmp ne i32 %call5, 0, !dbg !4114
  br i1 %tobool6, label %lor.lhs.false, label %if.then12, !dbg !4115

lor.lhs.false:                                    ; preds = %for.body
  %5 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !4116
  %6 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !4118
  %7 = load i32, i32* %trial, align 4, !dbg !4119
  %call7 = call i32 @BN_is_prime_fasttest_ex(%struct.bignum_st* %5, i32 1, %struct.bignum_ctx* %6, i32 %7, %struct.bn_gencb_st* null), !dbg !4120
  %cmp8 = icmp ne i32 %call7, 0, !dbg !4121
  %conv9 = zext i1 %cmp8 to i32, !dbg !4121
  %call10 = call i32 @test_false(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2193, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.238, i32 0, i32 0), i32 %conv9), !dbg !4122
  %tobool11 = icmp ne i32 %call10, 0, !dbg !4124
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !4125

if.then12:                                        ; preds = %lor.lhs.false, %for.body
  br label %err, !dbg !4127

if.end13:                                         ; preds = %lor.lhs.false
  br label %for.inc, !dbg !4128

for.inc:                                          ; preds = %if.end13
  %8 = load i32, i32* %trial, align 4, !dbg !4129
  %inc = add nsw i32 %8, 1, !dbg !4129
  store i32 %inc, i32* %trial, align 4, !dbg !4129
  br label %for.cond, !dbg !4131, !llvm.loop !4132

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %ret, align 4, !dbg !4134
  br label %err, !dbg !4135

err:                                              ; preds = %for.end, %if.then12, %if.then
  %9 = load %struct.bignum_st*, %struct.bignum_st** %r, align 8, !dbg !4136
  call void @BN_free(%struct.bignum_st* %9), !dbg !4137
  %10 = load i32, i32* %ret, align 4, !dbg !4138
  ret i32 %10, !dbg !4139
}

; Function Attrs: nounwind uwtable
define internal i32 @run_file_tests(i32 %i) #0 !dbg !4140 {
entry:
  %retval = alloca i32, align 4
  %i.addr = alloca i32, align 4
  %s = alloca %struct.stanza_st*, align 8
  %testfile = alloca i8*, align 8
  %c = alloca i32, align 4
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !4141, metadata !134), !dbg !4142
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s, metadata !4143, metadata !134), !dbg !4144
  store %struct.stanza_st* null, %struct.stanza_st** %s, align 8, !dbg !4144
  call void @llvm.dbg.declare(metadata i8** %testfile, metadata !4145, metadata !134), !dbg !4146
  %0 = load i32, i32* %i.addr, align 4, !dbg !4147
  %conv = sext i32 %0 to i64, !dbg !4147
  %call = call i8* @test_get_argument(i64 %conv), !dbg !4148
  store i8* %call, i8** %testfile, align 8, !dbg !4146
  call void @llvm.dbg.declare(metadata i32* %c, metadata !4149, metadata !134), !dbg !4150
  %call1 = call i8* @CRYPTO_zalloc(i64 4464, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2241), !dbg !4151
  %1 = bitcast i8* %call1 to %struct.stanza_st*, !dbg !4151
  store %struct.stanza_st* %1, %struct.stanza_st** %s, align 8, !dbg !4153
  %2 = bitcast %struct.stanza_st* %1 to i8*, !dbg !4154
  %call2 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2241, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.240, i32 0, i32 0), i8* %2), !dbg !4155
  %tobool = icmp ne i32 %call2, 0, !dbg !4157
  br i1 %tobool, label %if.end, label %if.then, !dbg !4158

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !4159
  br label %return, !dbg !4159

if.end:                                           ; preds = %entry
  %3 = load %struct.stanza_st*, %struct.stanza_st** %s, align 8, !dbg !4160
  %4 = load i8*, i8** %testfile, align 8, !dbg !4162
  %call3 = call i32 @test_start_file(%struct.stanza_st* %3, i8* %4), !dbg !4163
  %tobool4 = icmp ne i32 %call3, 0, !dbg !4163
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !4164

if.then5:                                         ; preds = %if.end
  %5 = load %struct.stanza_st*, %struct.stanza_st** %s, align 8, !dbg !4165
  %6 = bitcast %struct.stanza_st* %5 to i8*, !dbg !4165
  call void @CRYPTO_free(i8* %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2244), !dbg !4167
  store i32 0, i32* %retval, align 4, !dbg !4168
  br label %return, !dbg !4168

if.end6:                                          ; preds = %if.end
  br label %while.cond, !dbg !4169

while.cond:                                       ; preds = %if.end18, %if.then13, %if.end6
  %7 = load %struct.stanza_st*, %struct.stanza_st** %s, align 8, !dbg !4170
  %fp = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %7, i32 0, i32 1, !dbg !4172
  %8 = load %struct.bio_st*, %struct.bio_st** %fp, align 8, !dbg !4172
  %call7 = call i64 @BIO_ctrl(%struct.bio_st* %8, i32 2, i64 0, i8* null), !dbg !4173
  %conv8 = trunc i64 %call7 to i32, !dbg !4174
  %tobool9 = icmp ne i32 %conv8, 0, !dbg !4174
  br i1 %tobool9, label %land.end, label %land.rhs, !dbg !4175

land.rhs:                                         ; preds = %while.cond
  %9 = load %struct.stanza_st*, %struct.stanza_st** %s, align 8, !dbg !4176
  %call10 = call i32 @test_readstanza(%struct.stanza_st* %9), !dbg !4178
  %tobool11 = icmp ne i32 %call10, 0, !dbg !4179
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %10 = phi i1 [ false, %while.cond ], [ %tobool11, %land.rhs ]
  br i1 %10, label %while.body, label %while.end, !dbg !4180

while.body:                                       ; preds = %land.end
  %11 = load %struct.stanza_st*, %struct.stanza_st** %s, align 8, !dbg !4182
  %numpairs = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %11, i32 0, i32 7, !dbg !4185
  %12 = load i32, i32* %numpairs, align 4, !dbg !4185
  %cmp = icmp eq i32 %12, 0, !dbg !4186
  br i1 %cmp, label %if.then13, label %if.end14, !dbg !4187

if.then13:                                        ; preds = %while.body
  br label %while.cond, !dbg !4188, !llvm.loop !4189

if.end14:                                         ; preds = %while.body
  %13 = load %struct.stanza_st*, %struct.stanza_st** %s, align 8, !dbg !4190
  %call15 = call i32 @file_test_run(%struct.stanza_st* %13), !dbg !4192
  %tobool16 = icmp ne i32 %call15, 0, !dbg !4192
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !4193

if.then17:                                        ; preds = %if.end14
  %14 = load %struct.stanza_st*, %struct.stanza_st** %s, align 8, !dbg !4194
  %errors = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %14, i32 0, i32 4, !dbg !4195
  %15 = load i32, i32* %errors, align 8, !dbg !4196
  %inc = add nsw i32 %15, 1, !dbg !4196
  store i32 %inc, i32* %errors, align 8, !dbg !4196
  br label %if.end18, !dbg !4194

if.end18:                                         ; preds = %if.then17, %if.end14
  %16 = load %struct.stanza_st*, %struct.stanza_st** %s, align 8, !dbg !4197
  %numtests = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %16, i32 0, i32 5, !dbg !4198
  %17 = load i32, i32* %numtests, align 4, !dbg !4199
  %inc19 = add nsw i32 %17, 1, !dbg !4199
  store i32 %inc19, i32* %numtests, align 4, !dbg !4199
  %18 = load %struct.stanza_st*, %struct.stanza_st** %s, align 8, !dbg !4200
  call void @test_clearstanza(%struct.stanza_st* %18), !dbg !4201
  br label %while.cond, !dbg !4202, !llvm.loop !4189

while.end:                                        ; preds = %land.end
  %19 = load %struct.stanza_st*, %struct.stanza_st** %s, align 8, !dbg !4204
  %call20 = call i32 @test_end_file(%struct.stanza_st* %19), !dbg !4205
  %20 = load %struct.stanza_st*, %struct.stanza_st** %s, align 8, !dbg !4206
  %errors21 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %20, i32 0, i32 4, !dbg !4207
  %21 = load i32, i32* %errors21, align 8, !dbg !4207
  store i32 %21, i32* %c, align 4, !dbg !4208
  %22 = load %struct.stanza_st*, %struct.stanza_st** %s, align 8, !dbg !4209
  %23 = bitcast %struct.stanza_st* %22 to i8*, !dbg !4209
  call void @CRYPTO_free(i8* %23, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2259), !dbg !4210
  %24 = load i32, i32* %c, align 4, !dbg !4211
  %cmp22 = icmp eq i32 %24, 0, !dbg !4212
  %conv23 = zext i1 %cmp22 to i32, !dbg !4212
  store i32 %conv23, i32* %retval, align 4, !dbg !4213
  br label %return, !dbg !4213

return:                                           ; preds = %while.end, %if.then5, %if.then
  %25 = load i32, i32* %retval, align 4, !dbg !4214
  ret i32 %25, !dbg !4214
}

; Function Attrs: nounwind uwtable
define void @cleanup_tests() #0 !dbg !4215 {
entry:
  %0 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !4218
  call void @BN_CTX_free(%struct.bignum_ctx* %0), !dbg !4219
  ret void, !dbg !4220
}

declare void @BN_CTX_free(%struct.bignum_ctx*) #2

declare %struct.bignum_st* @BN_new() #2

declare i32 @BN_bntest_rand(%struct.bignum_st*, i32, i32, i32) #2

declare %struct.bignum_st* @BN_copy(%struct.bignum_st*, %struct.bignum_st*) #2

declare i32 @test_int_ne(i8*, i32, i8*, i8*, i32, i32) #2

declare i32 @BN_set_bit(%struct.bignum_st*, i32) #2

declare i32 @BN_add_word(%struct.bignum_st*, i64) #2

declare void @BN_set_negative(%struct.bignum_st*, i32) #2

; Function Attrs: nounwind uwtable
define internal i32 @rand_neg() #0 !dbg !38 {
entry:
  %0 = load i32, i32* @rand_neg.neg, align 4, !dbg !4221
  %inc = add i32 %0, 1, !dbg !4221
  store i32 %inc, i32* @rand_neg.neg, align 4, !dbg !4221
  %rem = urem i32 %0, 8, !dbg !4222
  %idxprom = zext i32 %rem to i64, !dbg !4223
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* @rand_neg.sign, i64 0, i64 %idxprom, !dbg !4223
  %1 = load i32, i32* %arrayidx, align 4, !dbg !4223
  ret i32 %1, !dbg !4224
}

declare i32 @BN_sub(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*) #2

declare i32 @BN_add(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*) #2

declare i32 @test_BN_eq_zero(i8*, i32, i8*, %struct.bignum_st*) #2

declare void @BN_free(%struct.bignum_st*) #2

declare %struct.bn_recp_ctx_st* @BN_RECP_CTX_new() #2

declare i32 @BN_lshift(%struct.bignum_st*, %struct.bignum_st*, i32) #2

declare i32 @BN_RECP_CTX_set(%struct.bn_recp_ctx_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i32 @BN_div_recp(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bn_recp_ctx_st*, %struct.bignum_ctx*) #2

declare i32 @BN_mul(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare void @BN_RECP_CTX_free(%struct.bn_recp_ctx_st*) #2

declare i32 @BN_div(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare %struct.bn_mont_ctx_st* @BN_MONT_CTX_new() #2

declare i32 @BN_set_word(%struct.bignum_st*, i64) #2

declare i32 @test_true(i8*, i32, i8*, i32) #2

declare i32 @BN_mod_exp_mont_consttime(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*, %struct.bn_mont_ctx_st*) #2

declare i32 @test_BN_eq_one(i8*, i32, i8*, %struct.bignum_st*) #2

declare i32 @BN_hex2bn(%struct.bignum_st**, i8*) #2

declare i32 @BN_MONT_CTX_set(%struct.bn_mont_ctx_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i32 @BN_mod_mul_montgomery(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bn_mont_ctx_st*, %struct.bignum_ctx*) #2

declare i32 @test_BN_eq(i8*, i32, i8*, i8*, %struct.bignum_st*, %struct.bignum_st*) #2

; Function Attrs: nounwind uwtable
define internal i32 @parse_bigBN(%struct.bignum_st** %out, i8** %bn_strings) #0 !dbg !4225 {
entry:
  %out.addr = alloca %struct.bignum_st**, align 8
  %bn_strings.addr = alloca i8**, align 8
  %bigstring = alloca i8*, align 8
  %ret = alloca i32, align 4
  store %struct.bignum_st** %out, %struct.bignum_st*** %out.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bignum_st*** %out.addr, metadata !4230, metadata !134), !dbg !4231
  store i8** %bn_strings, i8*** %bn_strings.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %bn_strings.addr, metadata !4232, metadata !134), !dbg !4233
  call void @llvm.dbg.declare(metadata i8** %bigstring, metadata !4234, metadata !134), !dbg !4235
  %0 = load i8**, i8*** %bn_strings.addr, align 8, !dbg !4236
  %call = call i8* @glue_strings(i8** %0, i64* null), !dbg !4237
  store i8* %call, i8** %bigstring, align 8, !dbg !4235
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !4238, metadata !134), !dbg !4239
  %1 = load %struct.bignum_st**, %struct.bignum_st*** %out.addr, align 8, !dbg !4240
  %2 = load i8*, i8** %bigstring, align 8, !dbg !4241
  %call1 = call i32 @BN_hex2bn(%struct.bignum_st** %1, i8* %2), !dbg !4242
  store i32 %call1, i32* %ret, align 4, !dbg !4239
  %3 = load i8*, i8** %bigstring, align 8, !dbg !4243
  call void @CRYPTO_free(i8* %3, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 78), !dbg !4244
  %4 = load i32, i32* %ret, align 4, !dbg !4245
  ret i32 %4, !dbg !4246
}

declare %struct.bignum_st* @BN_dup(%struct.bignum_st*) #2

declare i32 @test_false(i8*, i32, i8*, i32) #2

declare i32 @BN_mod_exp_mont(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*, %struct.bn_mont_ctx_st*) #2

declare i32 @BN_from_montgomery(%struct.bignum_st*, %struct.bignum_st*, %struct.bn_mont_ctx_st*, %struct.bignum_ctx*) #2

declare i32 @BN_mod_exp_simple(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare void @BN_MONT_CTX_free(%struct.bn_mont_ctx_st*) #2

declare i8* @glue_strings(i8**, i64*) #2

declare void @CRYPTO_free(i8*, i8*, i32) #2

declare i32 @BN_generate_prime_ex(%struct.bignum_st*, i32, i32, %struct.bignum_st*, %struct.bignum_st*, %struct.bn_gencb_st*) #2

declare i32 @BN_sub_word(%struct.bignum_st*, i64) #2

declare i32 @BN_rshift1(%struct.bignum_st*, %struct.bignum_st*) #2

declare i32 @BN_mod_exp_recp(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i32 @BN_is_word(%struct.bignum_st*, i64) #2

declare i32 @BN_is_zero(%struct.bignum_st*) #2

declare i32 @test_int_eq(i8*, i32, i8*, i8*, i32, i32) #2

declare i32 @BN_ucmp(%struct.bignum_st*, %struct.bignum_st*) #2

declare void @test_info(i8*, i32, i8*, ...) #2

declare i32 @test_int_ge(i8*, i32, i8*, i8*, i32, i32) #2

declare i32 @BN_kronecker(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i32 @BN_is_negative(%struct.bignum_st*) #2

declare i32 @BN_rand(%struct.bignum_st*, i32, i32, i32) #2

declare i32 @test_BN_eq_word(i8*, i32, i8*, i8*, %struct.bignum_st*, i64) #2

; Function Attrs: nounwind uwtable
define internal i32 @parsedecBN(%struct.bignum_st** %out, i8* %in) #0 !dbg !4247 {
entry:
  %out.addr = alloca %struct.bignum_st**, align 8
  %in.addr = alloca i8*, align 8
  store %struct.bignum_st** %out, %struct.bignum_st*** %out.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bignum_st*** %out.addr, metadata !4250, metadata !134), !dbg !4251
  store i8* %in, i8** %in.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %in.addr, metadata !4252, metadata !134), !dbg !4253
  %0 = load %struct.bignum_st**, %struct.bignum_st*** %out.addr, align 8, !dbg !4254
  store %struct.bignum_st* null, %struct.bignum_st** %0, align 8, !dbg !4255
  %1 = load %struct.bignum_st**, %struct.bignum_st*** %out.addr, align 8, !dbg !4256
  %2 = load i8*, i8** %in.addr, align 8, !dbg !4257
  %call = call i32 @BN_dec2bn(%struct.bignum_st** %1, i8* %2), !dbg !4258
  ret i32 %call, !dbg !4259
}

declare i32 @test_BN_le_zero(i8*, i32, i8*, %struct.bignum_st*) #2

declare i32 @test_BN_ge_zero(i8*, i32, i8*, %struct.bignum_st*) #2

declare i32 @test_BN_even(i8*, i32, i8*, %struct.bignum_st*) #2

declare i32 @test_BN_gt_zero(i8*, i32, i8*, %struct.bignum_st*) #2

declare i32 @test_BN_ne_zero(i8*, i32, i8*, %struct.bignum_st*) #2

declare i32 @test_BN_abs_eq_word(i8*, i32, i8*, i8*, %struct.bignum_st*, i64) #2

declare i32 @test_BN_lt_zero(i8*, i32, i8*, %struct.bignum_st*) #2

declare i32 @test_BN_odd(i8*, i32, i8*, %struct.bignum_st*) #2

declare i32 @BN_dec2bn(%struct.bignum_st**, i8*) #2

; Function Attrs: nounwind uwtable
define internal i32 @parseBN(%struct.bignum_st** %out, i8* %in) #0 !dbg !4260 {
entry:
  %out.addr = alloca %struct.bignum_st**, align 8
  %in.addr = alloca i8*, align 8
  store %struct.bignum_st** %out, %struct.bignum_st*** %out.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bignum_st*** %out.addr, metadata !4261, metadata !134), !dbg !4262
  store i8* %in, i8** %in.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %in.addr, metadata !4263, metadata !134), !dbg !4264
  %0 = load %struct.bignum_st**, %struct.bignum_st*** %out.addr, align 8, !dbg !4265
  store %struct.bignum_st* null, %struct.bignum_st** %0, align 8, !dbg !4266
  %1 = load %struct.bignum_st**, %struct.bignum_st*** %out.addr, align 8, !dbg !4267
  %2 = load i8*, i8** %in.addr, align 8, !dbg !4268
  %call = call i32 @BN_hex2bn(%struct.bignum_st** %1, i8* %2), !dbg !4269
  ret i32 %call, !dbg !4270
}

declare i32 @BN_asc2bn(%struct.bignum_st**, i8*) #2

declare i32 @BN_bn2mpi(%struct.bignum_st*, i8*) #2

declare i32 @test_size_t_le(i8*, i32, i8*, i8*, i64, i64) #2

declare i32 @test_size_t_eq(i8*, i32, i8*, i8*, i64, i64) #2

declare i32 @test_mem_eq(i8*, i32, i8*, i8*, i8*, i64, i8*, i64) #2

declare %struct.bignum_st* @BN_mpi2bn(i8*, i32, %struct.bignum_st*) #2

declare void @BN_set_flags(%struct.bignum_st*, i32) #2

declare %struct.bignum_st* @BN_value_one() #2

declare void @ERR_clear_error() #2

declare i32 @BN_mod_mul(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i32 @BN_mod_exp(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i32 @BN_mod_exp_mont_word(%struct.bignum_st*, i64, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*, %struct.bn_mont_ctx_st*) #2

declare i32 @BN_num_bits(%struct.bignum_st*) #2

declare void @BN_swap(%struct.bignum_st*, %struct.bignum_st*) #2

; Function Attrs: nounwind uwtable
define internal i32 @equalBN(i8* %op, %struct.bignum_st* %expected, %struct.bignum_st* %actual) #0 !dbg !4271 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca i8*, align 8
  %expected.addr = alloca %struct.bignum_st*, align 8
  %actual.addr = alloca %struct.bignum_st*, align 8
  store i8* %op, i8** %op.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %op.addr, metadata !4276, metadata !134), !dbg !4277
  store %struct.bignum_st* %expected, %struct.bignum_st** %expected.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %expected.addr, metadata !4278, metadata !134), !dbg !4279
  store %struct.bignum_st* %actual, %struct.bignum_st** %actual.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %actual.addr, metadata !4280, metadata !134), !dbg !4281
  %0 = load %struct.bignum_st*, %struct.bignum_st** %expected.addr, align 8, !dbg !4282
  %1 = load %struct.bignum_st*, %struct.bignum_st** %actual.addr, align 8, !dbg !4284
  %call = call i32 @BN_cmp(%struct.bignum_st* %0, %struct.bignum_st* %1), !dbg !4285
  %cmp = icmp eq i32 %call, 0, !dbg !4286
  br i1 %cmp, label %if.then, label %if.end, !dbg !4287

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !4288
  br label %return, !dbg !4288

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %op.addr, align 8, !dbg !4289
  call void (i8*, i32, i8*, ...) @test_error(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 136, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.225, i32 0, i32 0), i8* %2), !dbg !4290
  %3 = load %struct.bignum_st*, %struct.bignum_st** %expected.addr, align 8, !dbg !4291
  %4 = load %struct.bignum_st*, %struct.bignum_st** %actual.addr, align 8, !dbg !4292
  %call1 = call i32 @test_BN_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 137, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.226, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.227, i32 0, i32 0), %struct.bignum_st* %3, %struct.bignum_st* %4), !dbg !4293
  store i32 0, i32* %retval, align 4, !dbg !4294
  br label %return, !dbg !4294

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !4295
  ret i32 %5, !dbg !4295
}

declare void @BN_consttime_swap(i64, %struct.bignum_st*, %struct.bignum_st*, i32) #2

declare i32 @BN_get_flags(%struct.bignum_st*, i32) #2

declare i32 @BN_cmp(%struct.bignum_st*, %struct.bignum_st*) #2

declare void @test_error(i8*, i32, i8*, ...) #2

declare i32 @BN_GF2m_add(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*) #2

declare i32 @BN_is_odd(%struct.bignum_st*) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #3

declare i32 @BN_GF2m_arr2poly(i32*, %struct.bignum_st*) #2

declare i32 @BN_GF2m_mod(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*) #2

declare i32 @BN_GF2m_mod_mul(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i32 @BN_GF2m_mod_sqr(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i32 @BN_GF2m_mod_inv(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i32 @BN_GF2m_mod_div(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i32 @BN_GF2m_mod_exp(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i32 @BN_GF2m_mod_sqrt(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i32 @BN_GF2m_mod_solve_quad(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i32 @BN_is_prime_fasttest_ex(%struct.bignum_st*, i32, %struct.bignum_ctx*, i32, %struct.bn_gencb_st*) #2

declare i8* @test_get_argument(i64) #2

declare i8* @CRYPTO_zalloc(i64, i8*, i32) #2

declare i32 @test_start_file(%struct.stanza_st*, i8*) #2

declare i64 @BIO_ctrl(%struct.bio_st*, i32, i64, i8*) #2

declare i32 @test_readstanza(%struct.stanza_st*) #2

; Function Attrs: nounwind uwtable
define internal i32 @file_test_run(%struct.stanza_st* %s) #0 !dbg !84 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct.stanza_st*, align 8
  %numtests = alloca i32, align 4
  %tp = alloca %struct.filetest_st*, align 8
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !4296, metadata !134), !dbg !4297
  call void @llvm.dbg.declare(metadata i32* %numtests, metadata !4298, metadata !134), !dbg !4299
  store i32 11, i32* %numtests, align 4, !dbg !4299
  call void @llvm.dbg.declare(metadata %struct.filetest_st** %tp, metadata !4300, metadata !134), !dbg !4302
  store %struct.filetest_st* getelementptr inbounds ([11 x %struct.filetest_st], [11 x %struct.filetest_st]* @file_test_run.filetests, i32 0, i32 0), %struct.filetest_st** %tp, align 8, !dbg !4302
  br label %for.cond, !dbg !4303

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %numtests, align 4, !dbg !4304
  %dec = add nsw i32 %0, -1, !dbg !4304
  store i32 %dec, i32* %numtests, align 4, !dbg !4304
  %cmp = icmp sge i32 %dec, 0, !dbg !4308
  br i1 %cmp, label %for.body, label %for.end, !dbg !4309

for.body:                                         ; preds = %for.cond
  %1 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !4310
  %2 = load %struct.filetest_st*, %struct.filetest_st** %tp, align 8, !dbg !4313
  %name = getelementptr inbounds %struct.filetest_st, %struct.filetest_st* %2, i32 0, i32 0, !dbg !4314
  %3 = load i8*, i8** %name, align 8, !dbg !4314
  %call = call i8* @findattr(%struct.stanza_st* %1, i8* %3), !dbg !4315
  %cmp1 = icmp ne i8* %call, null, !dbg !4316
  br i1 %cmp1, label %if.then, label %if.end5, !dbg !4317

if.then:                                          ; preds = %for.body
  %4 = load %struct.filetest_st*, %struct.filetest_st** %tp, align 8, !dbg !4318
  %func = getelementptr inbounds %struct.filetest_st, %struct.filetest_st* %4, i32 0, i32 1, !dbg !4321
  %5 = load i32 (%struct.stanza_st*)*, i32 (%struct.stanza_st*)** %func, align 8, !dbg !4321
  %6 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !4322
  %call2 = call i32 %5(%struct.stanza_st* %6), !dbg !4318
  %tobool = icmp ne i32 %call2, 0, !dbg !4318
  br i1 %tobool, label %if.end, label %if.then3, !dbg !4323

if.then3:                                         ; preds = %if.then
  %7 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !4324
  %test_file = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %7, i32 0, i32 0, !dbg !4326
  %8 = load i8*, i8** %test_file, align 8, !dbg !4326
  %9 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !4327
  %start = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %9, i32 0, i32 3, !dbg !4328
  %10 = load i32, i32* %start, align 4, !dbg !4328
  %11 = load %struct.filetest_st*, %struct.filetest_st** %tp, align 8, !dbg !4329
  %name4 = getelementptr inbounds %struct.filetest_st, %struct.filetest_st* %11, i32 0, i32 0, !dbg !4330
  %12 = load i8*, i8** %name4, align 8, !dbg !4330
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2225, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.252, i32 0, i32 0), i8* %8, i32 %10, i8* %12), !dbg !4331
  store i32 0, i32* %retval, align 4, !dbg !4332
  br label %return, !dbg !4332

if.end:                                           ; preds = %if.then
  store i32 1, i32* %retval, align 4, !dbg !4333
  br label %return, !dbg !4333

if.end5:                                          ; preds = %for.body
  br label %for.inc, !dbg !4334

for.inc:                                          ; preds = %if.end5
  %13 = load %struct.filetest_st*, %struct.filetest_st** %tp, align 8, !dbg !4335
  %incdec.ptr = getelementptr inbounds %struct.filetest_st, %struct.filetest_st* %13, i32 1, !dbg !4335
  store %struct.filetest_st* %incdec.ptr, %struct.filetest_st** %tp, align 8, !dbg !4335
  br label %for.cond, !dbg !4337, !llvm.loop !4338

for.end:                                          ; preds = %for.cond
  %14 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !4339
  %test_file6 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %14, i32 0, i32 0, !dbg !4340
  %15 = load i8*, i8** %test_file6, align 8, !dbg !4340
  %16 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !4341
  %start7 = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %16, i32 0, i32 3, !dbg !4342
  %17 = load i32, i32* %start7, align 4, !dbg !4342
  call void (i8*, i32, i8*, ...) @test_info(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 2231, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.253, i32 0, i32 0), i8* %15, i32 %17), !dbg !4343
  store i32 0, i32* %retval, align 4, !dbg !4344
  br label %return, !dbg !4344

return:                                           ; preds = %for.end, %if.end, %if.then3
  %18 = load i32, i32* %retval, align 4, !dbg !4345
  ret i32 %18, !dbg !4345
}

declare void @test_clearstanza(%struct.stanza_st*) #2

declare i32 @test_end_file(%struct.stanza_st*) #2

; Function Attrs: nounwind uwtable
define internal i32 @file_sum(%struct.stanza_st* %s) #0 !dbg !4346 {
entry:
  %s.addr = alloca %struct.stanza_st*, align 8
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca %struct.bignum_st*, align 8
  %sum = alloca %struct.bignum_st*, align 8
  %ret = alloca %struct.bignum_st*, align 8
  %b_word = alloca i64, align 8
  %st = alloca i32, align 4
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !4347, metadata !134), !dbg !4348
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !4349, metadata !134), !dbg !4350
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !4350
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b, metadata !4351, metadata !134), !dbg !4352
  store %struct.bignum_st* null, %struct.bignum_st** %b, align 8, !dbg !4352
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %sum, metadata !4353, metadata !134), !dbg !4354
  store %struct.bignum_st* null, %struct.bignum_st** %sum, align 8, !dbg !4354
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret, metadata !4355, metadata !134), !dbg !4356
  store %struct.bignum_st* null, %struct.bignum_st** %ret, align 8, !dbg !4356
  call void @llvm.dbg.declare(metadata i64* %b_word, metadata !4357, metadata !134), !dbg !4358
  call void @llvm.dbg.declare(metadata i32* %st, metadata !4359, metadata !134), !dbg !4360
  store i32 0, i32* %st, align 4, !dbg !4360
  %0 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !4361
  %call = call %struct.bignum_st* @getBN(%struct.stanza_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.255, i32 0, i32 0)), !dbg !4363
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !4364
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !4365
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1049, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.254, i32 0, i32 0), i8* %1), !dbg !4366
  %tobool = icmp ne i32 %call1, 0, !dbg !4368
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !4369

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !4370
  %call2 = call %struct.bignum_st* @getBN(%struct.stanza_st* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.257, i32 0, i32 0)), !dbg !4372
  store %struct.bignum_st* %call2, %struct.bignum_st** %b, align 8, !dbg !4373
  %3 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !4374
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1050, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.256, i32 0, i32 0), i8* %3), !dbg !4375
  %tobool4 = icmp ne i32 %call3, 0, !dbg !4377
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !4378

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %4 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !4379
  %call6 = call %struct.bignum_st* @getBN(%struct.stanza_st* %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.241, i32 0, i32 0)), !dbg !4380
  store %struct.bignum_st* %call6, %struct.bignum_st** %sum, align 8, !dbg !4381
  %5 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !4382
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1051, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.258, i32 0, i32 0), i8* %5), !dbg !4383
  %tobool8 = icmp ne i32 %call7, 0, !dbg !4384
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !4385

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %call10 = call %struct.bignum_st* @BN_new(), !dbg !4386
  store %struct.bignum_st* %call10, %struct.bignum_st** %ret, align 8, !dbg !4387
  %6 = bitcast %struct.bignum_st* %call10 to i8*, !dbg !4388
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1052, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.259, i32 0, i32 0), i8* %6), !dbg !4389
  %tobool12 = icmp ne i32 %call11, 0, !dbg !4390
  br i1 %tobool12, label %if.end, label %if.then, !dbg !4391

if.then:                                          ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !4393

if.end:                                           ; preds = %lor.lhs.false9
  %7 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4394
  %8 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4396
  %9 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4397
  %call13 = call i32 @BN_add(%struct.bignum_st* %7, %struct.bignum_st* %8, %struct.bignum_st* %9), !dbg !4398
  %cmp = icmp ne i32 %call13, 0, !dbg !4399
  %conv = zext i1 %cmp to i32, !dbg !4399
  %call14 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1055, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.260, i32 0, i32 0), i32 %conv), !dbg !4400
  %tobool15 = icmp ne i32 %call14, 0, !dbg !4402
  br i1 %tobool15, label %lor.lhs.false16, label %if.then37, !dbg !4403

lor.lhs.false16:                                  ; preds = %if.end
  %10 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4404
  %11 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4406
  %call17 = call i32 @equalBN(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.261, i32 0, i32 0), %struct.bignum_st* %10, %struct.bignum_st* %11), !dbg !4407
  %tobool18 = icmp ne i32 %call17, 0, !dbg !4407
  br i1 %tobool18, label %lor.lhs.false19, label %if.then37, !dbg !4408

lor.lhs.false19:                                  ; preds = %lor.lhs.false16
  %12 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4409
  %13 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4410
  %14 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4411
  %call20 = call i32 @BN_sub(%struct.bignum_st* %12, %struct.bignum_st* %13, %struct.bignum_st* %14), !dbg !4412
  %cmp21 = icmp ne i32 %call20, 0, !dbg !4413
  %conv22 = zext i1 %cmp21 to i32, !dbg !4413
  %call23 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1057, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.262, i32 0, i32 0), i32 %conv22), !dbg !4414
  %tobool24 = icmp ne i32 %call23, 0, !dbg !4416
  br i1 %tobool24, label %lor.lhs.false25, label %if.then37, !dbg !4417

lor.lhs.false25:                                  ; preds = %lor.lhs.false19
  %15 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4418
  %16 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4419
  %call26 = call i32 @equalBN(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.263, i32 0, i32 0), %struct.bignum_st* %15, %struct.bignum_st* %16), !dbg !4420
  %tobool27 = icmp ne i32 %call26, 0, !dbg !4420
  br i1 %tobool27, label %lor.lhs.false28, label %if.then37, !dbg !4421

lor.lhs.false28:                                  ; preds = %lor.lhs.false25
  %17 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4422
  %18 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4423
  %19 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4424
  %call29 = call i32 @BN_sub(%struct.bignum_st* %17, %struct.bignum_st* %18, %struct.bignum_st* %19), !dbg !4425
  %cmp30 = icmp ne i32 %call29, 0, !dbg !4426
  %conv31 = zext i1 %cmp30 to i32, !dbg !4426
  %call32 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1059, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.264, i32 0, i32 0), i32 %conv31), !dbg !4427
  %tobool33 = icmp ne i32 %call32, 0, !dbg !4428
  br i1 %tobool33, label %lor.lhs.false34, label %if.then37, !dbg !4429

lor.lhs.false34:                                  ; preds = %lor.lhs.false28
  %20 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4430
  %21 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4431
  %call35 = call i32 @equalBN(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.265, i32 0, i32 0), %struct.bignum_st* %20, %struct.bignum_st* %21), !dbg !4432
  %tobool36 = icmp ne i32 %call35, 0, !dbg !4432
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !4433

if.then37:                                        ; preds = %lor.lhs.false34, %lor.lhs.false28, %lor.lhs.false25, %lor.lhs.false19, %lor.lhs.false16, %if.end
  br label %err, !dbg !4434

if.end38:                                         ; preds = %lor.lhs.false34
  %22 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4435
  %23 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4437
  %call39 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %22, %struct.bignum_st* %23), !dbg !4438
  %cmp40 = icmp ne %struct.bignum_st* %call39, null, !dbg !4439
  %conv41 = zext i1 %cmp40 to i32, !dbg !4439
  %call42 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1068, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.266, i32 0, i32 0), i32 %conv41), !dbg !4440
  %tobool43 = icmp ne i32 %call42, 0, !dbg !4442
  br i1 %tobool43, label %lor.lhs.false44, label %if.then128, !dbg !4443

lor.lhs.false44:                                  ; preds = %if.end38
  %24 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4444
  %25 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4446
  %26 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4447
  %call45 = call i32 @BN_add(%struct.bignum_st* %24, %struct.bignum_st* %25, %struct.bignum_st* %26), !dbg !4448
  %cmp46 = icmp ne i32 %call45, 0, !dbg !4449
  %conv47 = zext i1 %cmp46 to i32, !dbg !4449
  %call48 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1069, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.267, i32 0, i32 0), i32 %conv47), !dbg !4450
  %tobool49 = icmp ne i32 %call48, 0, !dbg !4452
  br i1 %tobool49, label %lor.lhs.false50, label %if.then128, !dbg !4453

lor.lhs.false50:                                  ; preds = %lor.lhs.false44
  %27 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4454
  %28 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4455
  %call51 = call i32 @equalBN(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.268, i32 0, i32 0), %struct.bignum_st* %27, %struct.bignum_st* %28), !dbg !4456
  %tobool52 = icmp ne i32 %call51, 0, !dbg !4456
  br i1 %tobool52, label %lor.lhs.false53, label %if.then128, !dbg !4457

lor.lhs.false53:                                  ; preds = %lor.lhs.false50
  %29 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4458
  %30 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4459
  %call54 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %29, %struct.bignum_st* %30), !dbg !4460
  %cmp55 = icmp ne %struct.bignum_st* %call54, null, !dbg !4461
  %conv56 = zext i1 %cmp55 to i32, !dbg !4461
  %call57 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1071, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.269, i32 0, i32 0), i32 %conv56), !dbg !4462
  %tobool58 = icmp ne i32 %call57, 0, !dbg !4463
  br i1 %tobool58, label %lor.lhs.false59, label %if.then128, !dbg !4464

lor.lhs.false59:                                  ; preds = %lor.lhs.false53
  %31 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4465
  %32 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4466
  %33 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4467
  %call60 = call i32 @BN_add(%struct.bignum_st* %31, %struct.bignum_st* %32, %struct.bignum_st* %33), !dbg !4468
  %cmp61 = icmp ne i32 %call60, 0, !dbg !4469
  %conv62 = zext i1 %cmp61 to i32, !dbg !4469
  %call63 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1072, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.270, i32 0, i32 0), i32 %conv62), !dbg !4470
  %tobool64 = icmp ne i32 %call63, 0, !dbg !4471
  br i1 %tobool64, label %lor.lhs.false65, label %if.then128, !dbg !4472

lor.lhs.false65:                                  ; preds = %lor.lhs.false59
  %34 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4473
  %35 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4474
  %call66 = call i32 @equalBN(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.271, i32 0, i32 0), %struct.bignum_st* %34, %struct.bignum_st* %35), !dbg !4475
  %tobool67 = icmp ne i32 %call66, 0, !dbg !4475
  br i1 %tobool67, label %lor.lhs.false68, label %if.then128, !dbg !4476

lor.lhs.false68:                                  ; preds = %lor.lhs.false65
  %36 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4477
  %37 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4478
  %call69 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %36, %struct.bignum_st* %37), !dbg !4479
  %cmp70 = icmp ne %struct.bignum_st* %call69, null, !dbg !4480
  %conv71 = zext i1 %cmp70 to i32, !dbg !4480
  %call72 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1074, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.272, i32 0, i32 0), i32 %conv71), !dbg !4481
  %tobool73 = icmp ne i32 %call72, 0, !dbg !4482
  br i1 %tobool73, label %lor.lhs.false74, label %if.then128, !dbg !4483

lor.lhs.false74:                                  ; preds = %lor.lhs.false68
  %38 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4484
  %39 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4485
  %40 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4486
  %call75 = call i32 @BN_sub(%struct.bignum_st* %38, %struct.bignum_st* %39, %struct.bignum_st* %40), !dbg !4487
  %cmp76 = icmp ne i32 %call75, 0, !dbg !4488
  %conv77 = zext i1 %cmp76 to i32, !dbg !4488
  %call78 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1075, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.273, i32 0, i32 0), i32 %conv77), !dbg !4489
  %tobool79 = icmp ne i32 %call78, 0, !dbg !4490
  br i1 %tobool79, label %lor.lhs.false80, label %if.then128, !dbg !4491

lor.lhs.false80:                                  ; preds = %lor.lhs.false74
  %41 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4492
  %42 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4493
  %call81 = call i32 @equalBN(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.274, i32 0, i32 0), %struct.bignum_st* %41, %struct.bignum_st* %42), !dbg !4494
  %tobool82 = icmp ne i32 %call81, 0, !dbg !4494
  br i1 %tobool82, label %lor.lhs.false83, label %if.then128, !dbg !4495

lor.lhs.false83:                                  ; preds = %lor.lhs.false80
  %43 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4496
  %44 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4497
  %call84 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %43, %struct.bignum_st* %44), !dbg !4498
  %cmp85 = icmp ne %struct.bignum_st* %call84, null, !dbg !4499
  %conv86 = zext i1 %cmp85 to i32, !dbg !4499
  %call87 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1077, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.266, i32 0, i32 0), i32 %conv86), !dbg !4500
  %tobool88 = icmp ne i32 %call87, 0, !dbg !4501
  br i1 %tobool88, label %lor.lhs.false89, label %if.then128, !dbg !4502

lor.lhs.false89:                                  ; preds = %lor.lhs.false83
  %45 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4503
  %46 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4504
  %47 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4505
  %call90 = call i32 @BN_sub(%struct.bignum_st* %45, %struct.bignum_st* %46, %struct.bignum_st* %47), !dbg !4506
  %cmp91 = icmp ne i32 %call90, 0, !dbg !4507
  %conv92 = zext i1 %cmp91 to i32, !dbg !4507
  %call93 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1078, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.275, i32 0, i32 0), i32 %conv92), !dbg !4508
  %tobool94 = icmp ne i32 %call93, 0, !dbg !4509
  br i1 %tobool94, label %lor.lhs.false95, label %if.then128, !dbg !4510

lor.lhs.false95:                                  ; preds = %lor.lhs.false89
  %48 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4511
  %49 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4512
  %call96 = call i32 @equalBN(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.276, i32 0, i32 0), %struct.bignum_st* %48, %struct.bignum_st* %49), !dbg !4513
  %tobool97 = icmp ne i32 %call96, 0, !dbg !4513
  br i1 %tobool97, label %lor.lhs.false98, label %if.then128, !dbg !4514

lor.lhs.false98:                                  ; preds = %lor.lhs.false95
  %50 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4515
  %51 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4516
  %call99 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %50, %struct.bignum_st* %51), !dbg !4517
  %cmp100 = icmp ne %struct.bignum_st* %call99, null, !dbg !4518
  %conv101 = zext i1 %cmp100 to i32, !dbg !4518
  %call102 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1080, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.272, i32 0, i32 0), i32 %conv101), !dbg !4519
  %tobool103 = icmp ne i32 %call102, 0, !dbg !4520
  br i1 %tobool103, label %lor.lhs.false104, label %if.then128, !dbg !4521

lor.lhs.false104:                                 ; preds = %lor.lhs.false98
  %52 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4522
  %53 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4523
  %54 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4524
  %call105 = call i32 @BN_sub(%struct.bignum_st* %52, %struct.bignum_st* %53, %struct.bignum_st* %54), !dbg !4525
  %cmp106 = icmp ne i32 %call105, 0, !dbg !4526
  %conv107 = zext i1 %cmp106 to i32, !dbg !4526
  %call108 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1081, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.277, i32 0, i32 0), i32 %conv107), !dbg !4527
  %tobool109 = icmp ne i32 %call108, 0, !dbg !4528
  br i1 %tobool109, label %lor.lhs.false110, label %if.then128, !dbg !4529

lor.lhs.false110:                                 ; preds = %lor.lhs.false104
  %55 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4530
  %56 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4531
  %call111 = call i32 @equalBN(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.278, i32 0, i32 0), %struct.bignum_st* %55, %struct.bignum_st* %56), !dbg !4532
  %tobool112 = icmp ne i32 %call111, 0, !dbg !4532
  br i1 %tobool112, label %lor.lhs.false113, label %if.then128, !dbg !4533

lor.lhs.false113:                                 ; preds = %lor.lhs.false110
  %57 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4534
  %58 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4535
  %call114 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %57, %struct.bignum_st* %58), !dbg !4536
  %cmp115 = icmp ne %struct.bignum_st* %call114, null, !dbg !4537
  %conv116 = zext i1 %cmp115 to i32, !dbg !4537
  %call117 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1083, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.269, i32 0, i32 0), i32 %conv116), !dbg !4538
  %tobool118 = icmp ne i32 %call117, 0, !dbg !4539
  br i1 %tobool118, label %lor.lhs.false119, label %if.then128, !dbg !4540

lor.lhs.false119:                                 ; preds = %lor.lhs.false113
  %59 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4541
  %60 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4542
  %61 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4543
  %call120 = call i32 @BN_sub(%struct.bignum_st* %59, %struct.bignum_st* %60, %struct.bignum_st* %61), !dbg !4544
  %cmp121 = icmp ne i32 %call120, 0, !dbg !4545
  %conv122 = zext i1 %cmp121 to i32, !dbg !4545
  %call123 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1084, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.275, i32 0, i32 0), i32 %conv122), !dbg !4546
  %tobool124 = icmp ne i32 %call123, 0, !dbg !4547
  br i1 %tobool124, label %lor.lhs.false125, label %if.then128, !dbg !4548

lor.lhs.false125:                                 ; preds = %lor.lhs.false119
  %62 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4549
  %63 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4550
  %call126 = call i32 @equalBN(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.279, i32 0, i32 0), %struct.bignum_st* %62, %struct.bignum_st* %63), !dbg !4551
  %tobool127 = icmp ne i32 %call126, 0, !dbg !4551
  br i1 %tobool127, label %if.end129, label %if.then128, !dbg !4552

if.then128:                                       ; preds = %lor.lhs.false125, %lor.lhs.false119, %lor.lhs.false113, %lor.lhs.false110, %lor.lhs.false104, %lor.lhs.false98, %lor.lhs.false95, %lor.lhs.false89, %lor.lhs.false83, %lor.lhs.false80, %lor.lhs.false74, %lor.lhs.false68, %lor.lhs.false65, %lor.lhs.false59, %lor.lhs.false53, %lor.lhs.false50, %lor.lhs.false44, %if.end38
  br label %err, !dbg !4553

if.end129:                                        ; preds = %lor.lhs.false125
  %64 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4554
  %call130 = call i32 @BN_is_negative(%struct.bignum_st* %64), !dbg !4556
  %tobool131 = icmp ne i32 %call130, 0, !dbg !4556
  br i1 %tobool131, label %if.end258, label %land.lhs.true, !dbg !4557

land.lhs.true:                                    ; preds = %if.end129
  %65 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4558
  %call132 = call i32 @BN_is_negative(%struct.bignum_st* %65), !dbg !4560
  %tobool133 = icmp ne i32 %call132, 0, !dbg !4560
  br i1 %tobool133, label %if.end258, label %land.lhs.true134, !dbg !4561

land.lhs.true134:                                 ; preds = %land.lhs.true
  %66 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4562
  %67 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4564
  %call135 = call i32 @BN_cmp(%struct.bignum_st* %66, %struct.bignum_st* %67), !dbg !4565
  %cmp136 = icmp sge i32 %call135, 0, !dbg !4566
  br i1 %cmp136, label %if.then138, label %if.end258, !dbg !4567

if.then138:                                       ; preds = %land.lhs.true134
  %68 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4568
  %69 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4571
  %70 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4572
  %call139 = call i32 @BN_uadd(%struct.bignum_st* %68, %struct.bignum_st* %69, %struct.bignum_st* %70), !dbg !4573
  %cmp140 = icmp ne i32 %call139, 0, !dbg !4574
  %conv141 = zext i1 %cmp140 to i32, !dbg !4574
  %call142 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1096, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.280, i32 0, i32 0), i32 %conv141), !dbg !4575
  %tobool143 = icmp ne i32 %call142, 0, !dbg !4577
  br i1 %tobool143, label %lor.lhs.false144, label %if.then165, !dbg !4578

lor.lhs.false144:                                 ; preds = %if.then138
  %71 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4579
  %72 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4581
  %call145 = call i32 @equalBN(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.281, i32 0, i32 0), %struct.bignum_st* %71, %struct.bignum_st* %72), !dbg !4582
  %tobool146 = icmp ne i32 %call145, 0, !dbg !4582
  br i1 %tobool146, label %lor.lhs.false147, label %if.then165, !dbg !4583

lor.lhs.false147:                                 ; preds = %lor.lhs.false144
  %73 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4584
  %74 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4585
  %75 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4586
  %call148 = call i32 @BN_usub(%struct.bignum_st* %73, %struct.bignum_st* %74, %struct.bignum_st* %75), !dbg !4587
  %cmp149 = icmp ne i32 %call148, 0, !dbg !4588
  %conv150 = zext i1 %cmp149 to i32, !dbg !4588
  %call151 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1098, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.282, i32 0, i32 0), i32 %conv150), !dbg !4589
  %tobool152 = icmp ne i32 %call151, 0, !dbg !4591
  br i1 %tobool152, label %lor.lhs.false153, label %if.then165, !dbg !4592

lor.lhs.false153:                                 ; preds = %lor.lhs.false147
  %76 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4593
  %77 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4594
  %call154 = call i32 @equalBN(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.283, i32 0, i32 0), %struct.bignum_st* %76, %struct.bignum_st* %77), !dbg !4595
  %tobool155 = icmp ne i32 %call154, 0, !dbg !4595
  br i1 %tobool155, label %lor.lhs.false156, label %if.then165, !dbg !4596

lor.lhs.false156:                                 ; preds = %lor.lhs.false153
  %78 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4597
  %79 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4598
  %80 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4599
  %call157 = call i32 @BN_usub(%struct.bignum_st* %78, %struct.bignum_st* %79, %struct.bignum_st* %80), !dbg !4600
  %cmp158 = icmp ne i32 %call157, 0, !dbg !4601
  %conv159 = zext i1 %cmp158 to i32, !dbg !4601
  %call160 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1100, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.284, i32 0, i32 0), i32 %conv159), !dbg !4602
  %tobool161 = icmp ne i32 %call160, 0, !dbg !4603
  br i1 %tobool161, label %lor.lhs.false162, label %if.then165, !dbg !4604

lor.lhs.false162:                                 ; preds = %lor.lhs.false156
  %81 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4605
  %82 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4606
  %call163 = call i32 @equalBN(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.285, i32 0, i32 0), %struct.bignum_st* %81, %struct.bignum_st* %82), !dbg !4607
  %tobool164 = icmp ne i32 %call163, 0, !dbg !4607
  br i1 %tobool164, label %if.end166, label %if.then165, !dbg !4608

if.then165:                                       ; preds = %lor.lhs.false162, %lor.lhs.false156, %lor.lhs.false153, %lor.lhs.false147, %lor.lhs.false144, %if.then138
  br label %err, !dbg !4610

if.end166:                                        ; preds = %lor.lhs.false162
  %83 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4611
  %84 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4613
  %call167 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %83, %struct.bignum_st* %84), !dbg !4614
  %cmp168 = icmp ne %struct.bignum_st* %call167, null, !dbg !4615
  %conv169 = zext i1 %cmp168 to i32, !dbg !4615
  %call170 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1108, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.266, i32 0, i32 0), i32 %conv169), !dbg !4616
  %tobool171 = icmp ne i32 %call170, 0, !dbg !4618
  br i1 %tobool171, label %lor.lhs.false172, label %if.then256, !dbg !4619

lor.lhs.false172:                                 ; preds = %if.end166
  %85 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4620
  %86 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4622
  %87 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4623
  %call173 = call i32 @BN_uadd(%struct.bignum_st* %85, %struct.bignum_st* %86, %struct.bignum_st* %87), !dbg !4624
  %cmp174 = icmp ne i32 %call173, 0, !dbg !4625
  %conv175 = zext i1 %cmp174 to i32, !dbg !4625
  %call176 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1109, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.286, i32 0, i32 0), i32 %conv175), !dbg !4626
  %tobool177 = icmp ne i32 %call176, 0, !dbg !4628
  br i1 %tobool177, label %lor.lhs.false178, label %if.then256, !dbg !4629

lor.lhs.false178:                                 ; preds = %lor.lhs.false172
  %88 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4630
  %89 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4631
  %call179 = call i32 @equalBN(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.287, i32 0, i32 0), %struct.bignum_st* %88, %struct.bignum_st* %89), !dbg !4632
  %tobool180 = icmp ne i32 %call179, 0, !dbg !4632
  br i1 %tobool180, label %lor.lhs.false181, label %if.then256, !dbg !4633

lor.lhs.false181:                                 ; preds = %lor.lhs.false178
  %90 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4634
  %91 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4635
  %call182 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %90, %struct.bignum_st* %91), !dbg !4636
  %cmp183 = icmp ne %struct.bignum_st* %call182, null, !dbg !4637
  %conv184 = zext i1 %cmp183 to i32, !dbg !4637
  %call185 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1111, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.269, i32 0, i32 0), i32 %conv184), !dbg !4638
  %tobool186 = icmp ne i32 %call185, 0, !dbg !4639
  br i1 %tobool186, label %lor.lhs.false187, label %if.then256, !dbg !4640

lor.lhs.false187:                                 ; preds = %lor.lhs.false181
  %92 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4641
  %93 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4642
  %94 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4643
  %call188 = call i32 @BN_uadd(%struct.bignum_st* %92, %struct.bignum_st* %93, %struct.bignum_st* %94), !dbg !4644
  %cmp189 = icmp ne i32 %call188, 0, !dbg !4645
  %conv190 = zext i1 %cmp189 to i32, !dbg !4645
  %call191 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1112, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.288, i32 0, i32 0), i32 %conv190), !dbg !4646
  %tobool192 = icmp ne i32 %call191, 0, !dbg !4647
  br i1 %tobool192, label %lor.lhs.false193, label %if.then256, !dbg !4648

lor.lhs.false193:                                 ; preds = %lor.lhs.false187
  %95 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4649
  %96 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4650
  %call194 = call i32 @equalBN(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.289, i32 0, i32 0), %struct.bignum_st* %95, %struct.bignum_st* %96), !dbg !4651
  %tobool195 = icmp ne i32 %call194, 0, !dbg !4651
  br i1 %tobool195, label %lor.lhs.false196, label %if.then256, !dbg !4652

lor.lhs.false196:                                 ; preds = %lor.lhs.false193
  %97 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4653
  %98 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4654
  %call197 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %97, %struct.bignum_st* %98), !dbg !4655
  %cmp198 = icmp ne %struct.bignum_st* %call197, null, !dbg !4656
  %conv199 = zext i1 %cmp198 to i32, !dbg !4656
  %call200 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1114, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.272, i32 0, i32 0), i32 %conv199), !dbg !4657
  %tobool201 = icmp ne i32 %call200, 0, !dbg !4658
  br i1 %tobool201, label %lor.lhs.false202, label %if.then256, !dbg !4659

lor.lhs.false202:                                 ; preds = %lor.lhs.false196
  %99 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4660
  %100 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4661
  %101 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4662
  %call203 = call i32 @BN_usub(%struct.bignum_st* %99, %struct.bignum_st* %100, %struct.bignum_st* %101), !dbg !4663
  %cmp204 = icmp ne i32 %call203, 0, !dbg !4664
  %conv205 = zext i1 %cmp204 to i32, !dbg !4664
  %call206 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1115, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.290, i32 0, i32 0), i32 %conv205), !dbg !4665
  %tobool207 = icmp ne i32 %call206, 0, !dbg !4666
  br i1 %tobool207, label %lor.lhs.false208, label %if.then256, !dbg !4667

lor.lhs.false208:                                 ; preds = %lor.lhs.false202
  %102 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4668
  %103 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4669
  %call209 = call i32 @equalBN(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.291, i32 0, i32 0), %struct.bignum_st* %102, %struct.bignum_st* %103), !dbg !4670
  %tobool210 = icmp ne i32 %call209, 0, !dbg !4670
  br i1 %tobool210, label %lor.lhs.false211, label %if.then256, !dbg !4671

lor.lhs.false211:                                 ; preds = %lor.lhs.false208
  %104 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4672
  %105 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4673
  %call212 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %104, %struct.bignum_st* %105), !dbg !4674
  %cmp213 = icmp ne %struct.bignum_st* %call212, null, !dbg !4675
  %conv214 = zext i1 %cmp213 to i32, !dbg !4675
  %call215 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1117, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.266, i32 0, i32 0), i32 %conv214), !dbg !4676
  %tobool216 = icmp ne i32 %call215, 0, !dbg !4677
  br i1 %tobool216, label %lor.lhs.false217, label %if.then256, !dbg !4678

lor.lhs.false217:                                 ; preds = %lor.lhs.false211
  %106 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4679
  %107 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4680
  %108 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4681
  %call218 = call i32 @BN_usub(%struct.bignum_st* %106, %struct.bignum_st* %107, %struct.bignum_st* %108), !dbg !4682
  %cmp219 = icmp ne i32 %call218, 0, !dbg !4683
  %conv220 = zext i1 %cmp219 to i32, !dbg !4683
  %call221 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1118, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.292, i32 0, i32 0), i32 %conv220), !dbg !4684
  %tobool222 = icmp ne i32 %call221, 0, !dbg !4685
  br i1 %tobool222, label %lor.lhs.false223, label %if.then256, !dbg !4686

lor.lhs.false223:                                 ; preds = %lor.lhs.false217
  %109 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4687
  %110 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4688
  %call224 = call i32 @equalBN(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.293, i32 0, i32 0), %struct.bignum_st* %109, %struct.bignum_st* %110), !dbg !4689
  %tobool225 = icmp ne i32 %call224, 0, !dbg !4689
  br i1 %tobool225, label %lor.lhs.false226, label %if.then256, !dbg !4690

lor.lhs.false226:                                 ; preds = %lor.lhs.false223
  %111 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4691
  %112 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4692
  %call227 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %111, %struct.bignum_st* %112), !dbg !4693
  %cmp228 = icmp ne %struct.bignum_st* %call227, null, !dbg !4694
  %conv229 = zext i1 %cmp228 to i32, !dbg !4694
  %call230 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1120, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.272, i32 0, i32 0), i32 %conv229), !dbg !4695
  %tobool231 = icmp ne i32 %call230, 0, !dbg !4696
  br i1 %tobool231, label %lor.lhs.false232, label %if.then256, !dbg !4697

lor.lhs.false232:                                 ; preds = %lor.lhs.false226
  %113 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4698
  %114 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4699
  %115 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4700
  %call233 = call i32 @BN_usub(%struct.bignum_st* %113, %struct.bignum_st* %114, %struct.bignum_st* %115), !dbg !4701
  %cmp234 = icmp ne i32 %call233, 0, !dbg !4702
  %conv235 = zext i1 %cmp234 to i32, !dbg !4702
  %call236 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1121, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.294, i32 0, i32 0), i32 %conv235), !dbg !4703
  %tobool237 = icmp ne i32 %call236, 0, !dbg !4704
  br i1 %tobool237, label %lor.lhs.false238, label %if.then256, !dbg !4705

lor.lhs.false238:                                 ; preds = %lor.lhs.false232
  %116 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4706
  %117 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4707
  %call239 = call i32 @equalBN(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.295, i32 0, i32 0), %struct.bignum_st* %116, %struct.bignum_st* %117), !dbg !4708
  %tobool240 = icmp ne i32 %call239, 0, !dbg !4708
  br i1 %tobool240, label %lor.lhs.false241, label %if.then256, !dbg !4709

lor.lhs.false241:                                 ; preds = %lor.lhs.false238
  %118 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4710
  %119 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4711
  %call242 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %118, %struct.bignum_st* %119), !dbg !4712
  %cmp243 = icmp ne %struct.bignum_st* %call242, null, !dbg !4713
  %conv244 = zext i1 %cmp243 to i32, !dbg !4713
  %call245 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1123, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.269, i32 0, i32 0), i32 %conv244), !dbg !4714
  %tobool246 = icmp ne i32 %call245, 0, !dbg !4715
  br i1 %tobool246, label %lor.lhs.false247, label %if.then256, !dbg !4716

lor.lhs.false247:                                 ; preds = %lor.lhs.false241
  %120 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4717
  %121 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4718
  %122 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4719
  %call248 = call i32 @BN_usub(%struct.bignum_st* %120, %struct.bignum_st* %121, %struct.bignum_st* %122), !dbg !4720
  %cmp249 = icmp ne i32 %call248, 0, !dbg !4721
  %conv250 = zext i1 %cmp249 to i32, !dbg !4721
  %call251 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1124, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.292, i32 0, i32 0), i32 %conv250), !dbg !4722
  %tobool252 = icmp ne i32 %call251, 0, !dbg !4723
  br i1 %tobool252, label %lor.lhs.false253, label %if.then256, !dbg !4724

lor.lhs.false253:                                 ; preds = %lor.lhs.false247
  %123 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4725
  %124 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4726
  %call254 = call i32 @equalBN(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.296, i32 0, i32 0), %struct.bignum_st* %123, %struct.bignum_st* %124), !dbg !4727
  %tobool255 = icmp ne i32 %call254, 0, !dbg !4727
  br i1 %tobool255, label %if.end257, label %if.then256, !dbg !4728

if.then256:                                       ; preds = %lor.lhs.false253, %lor.lhs.false247, %lor.lhs.false241, %lor.lhs.false238, %lor.lhs.false232, %lor.lhs.false226, %lor.lhs.false223, %lor.lhs.false217, %lor.lhs.false211, %lor.lhs.false208, %lor.lhs.false202, %lor.lhs.false196, %lor.lhs.false193, %lor.lhs.false187, %lor.lhs.false181, %lor.lhs.false178, %lor.lhs.false172, %if.end166
  br label %err, !dbg !4729

if.end257:                                        ; preds = %lor.lhs.false253
  br label %if.end258, !dbg !4730

if.end258:                                        ; preds = %if.end257, %land.lhs.true134, %land.lhs.true, %if.end129
  %125 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4731
  %call259 = call i64 @BN_get_word(%struct.bignum_st* %125), !dbg !4732
  store i64 %call259, i64* %b_word, align 8, !dbg !4733
  %126 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4734
  %call260 = call i32 @BN_is_negative(%struct.bignum_st* %126), !dbg !4736
  %tobool261 = icmp ne i32 %call260, 0, !dbg !4736
  br i1 %tobool261, label %if.end297, label %land.lhs.true262, !dbg !4737

land.lhs.true262:                                 ; preds = %if.end258
  %127 = load i64, i64* %b_word, align 8, !dbg !4738
  %cmp263 = icmp ne i64 %127, -1, !dbg !4740
  br i1 %cmp263, label %if.then265, label %if.end297, !dbg !4741

if.then265:                                       ; preds = %land.lhs.true262
  %128 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4742
  %129 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4745
  %call266 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %128, %struct.bignum_st* %129), !dbg !4746
  %cmp267 = icmp ne %struct.bignum_st* %call266, null, !dbg !4747
  %conv268 = zext i1 %cmp267 to i32, !dbg !4747
  %call269 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1134, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.266, i32 0, i32 0), i32 %conv268), !dbg !4748
  %tobool270 = icmp ne i32 %call269, 0, !dbg !4750
  br i1 %tobool270, label %lor.lhs.false271, label %if.then295, !dbg !4751

lor.lhs.false271:                                 ; preds = %if.then265
  %130 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4752
  %131 = load i64, i64* %b_word, align 8, !dbg !4754
  %call272 = call i32 @BN_add_word(%struct.bignum_st* %130, i64 %131), !dbg !4755
  %cmp273 = icmp ne i32 %call272, 0, !dbg !4756
  %conv274 = zext i1 %cmp273 to i32, !dbg !4756
  %call275 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1135, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.297, i32 0, i32 0), i32 %conv274), !dbg !4757
  %tobool276 = icmp ne i32 %call275, 0, !dbg !4759
  br i1 %tobool276, label %lor.lhs.false277, label %if.then295, !dbg !4760

lor.lhs.false277:                                 ; preds = %lor.lhs.false271
  %132 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4761
  %133 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4762
  %call278 = call i32 @equalBN(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.298, i32 0, i32 0), %struct.bignum_st* %132, %struct.bignum_st* %133), !dbg !4763
  %tobool279 = icmp ne i32 %call278, 0, !dbg !4763
  br i1 %tobool279, label %lor.lhs.false280, label %if.then295, !dbg !4764

lor.lhs.false280:                                 ; preds = %lor.lhs.false277
  %134 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4765
  %135 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4766
  %call281 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %134, %struct.bignum_st* %135), !dbg !4767
  %cmp282 = icmp ne %struct.bignum_st* %call281, null, !dbg !4768
  %conv283 = zext i1 %cmp282 to i32, !dbg !4768
  %call284 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1137, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.272, i32 0, i32 0), i32 %conv283), !dbg !4769
  %tobool285 = icmp ne i32 %call284, 0, !dbg !4770
  br i1 %tobool285, label %lor.lhs.false286, label %if.then295, !dbg !4771

lor.lhs.false286:                                 ; preds = %lor.lhs.false280
  %136 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4772
  %137 = load i64, i64* %b_word, align 8, !dbg !4773
  %call287 = call i32 @BN_sub_word(%struct.bignum_st* %136, i64 %137), !dbg !4774
  %cmp288 = icmp ne i32 %call287, 0, !dbg !4775
  %conv289 = zext i1 %cmp288 to i32, !dbg !4775
  %call290 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1138, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.299, i32 0, i32 0), i32 %conv289), !dbg !4776
  %tobool291 = icmp ne i32 %call290, 0, !dbg !4777
  br i1 %tobool291, label %lor.lhs.false292, label %if.then295, !dbg !4778

lor.lhs.false292:                                 ; preds = %lor.lhs.false286
  %138 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4779
  %139 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4780
  %call293 = call i32 @equalBN(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.300, i32 0, i32 0), %struct.bignum_st* %138, %struct.bignum_st* %139), !dbg !4781
  %tobool294 = icmp ne i32 %call293, 0, !dbg !4781
  br i1 %tobool294, label %if.end296, label %if.then295, !dbg !4782

if.then295:                                       ; preds = %lor.lhs.false292, %lor.lhs.false286, %lor.lhs.false280, %lor.lhs.false277, %lor.lhs.false271, %if.then265
  br label %err, !dbg !4784

if.end296:                                        ; preds = %lor.lhs.false292
  br label %if.end297, !dbg !4785

if.end297:                                        ; preds = %if.end296, %land.lhs.true262, %if.end258
  store i32 1, i32* %st, align 4, !dbg !4786
  br label %err, !dbg !4787

err:                                              ; preds = %if.end297, %if.then295, %if.then256, %if.then165, %if.then128, %if.then37, %if.then
  %140 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4788
  call void @BN_free(%struct.bignum_st* %140), !dbg !4789
  %141 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !4790
  call void @BN_free(%struct.bignum_st* %141), !dbg !4791
  %142 = load %struct.bignum_st*, %struct.bignum_st** %sum, align 8, !dbg !4792
  call void @BN_free(%struct.bignum_st* %142), !dbg !4793
  %143 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4794
  call void @BN_free(%struct.bignum_st* %143), !dbg !4795
  %144 = load i32, i32* %st, align 4, !dbg !4796
  ret i32 %144, !dbg !4797
}

; Function Attrs: nounwind uwtable
define internal i32 @file_lshift1(%struct.stanza_st* %s) #0 !dbg !4798 {
entry:
  %s.addr = alloca %struct.stanza_st*, align 8
  %a = alloca %struct.bignum_st*, align 8
  %lshift1 = alloca %struct.bignum_st*, align 8
  %zero = alloca %struct.bignum_st*, align 8
  %ret = alloca %struct.bignum_st*, align 8
  %two = alloca %struct.bignum_st*, align 8
  %remainder = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !4799, metadata !134), !dbg !4800
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !4801, metadata !134), !dbg !4802
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !4802
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %lshift1, metadata !4803, metadata !134), !dbg !4804
  store %struct.bignum_st* null, %struct.bignum_st** %lshift1, align 8, !dbg !4804
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %zero, metadata !4805, metadata !134), !dbg !4806
  store %struct.bignum_st* null, %struct.bignum_st** %zero, align 8, !dbg !4806
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret, metadata !4807, metadata !134), !dbg !4808
  store %struct.bignum_st* null, %struct.bignum_st** %ret, align 8, !dbg !4808
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %two, metadata !4809, metadata !134), !dbg !4810
  store %struct.bignum_st* null, %struct.bignum_st** %two, align 8, !dbg !4810
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %remainder, metadata !4811, metadata !134), !dbg !4812
  store %struct.bignum_st* null, %struct.bignum_st** %remainder, align 8, !dbg !4812
  call void @llvm.dbg.declare(metadata i32* %st, metadata !4813, metadata !134), !dbg !4814
  store i32 0, i32* %st, align 4, !dbg !4814
  %0 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !4815
  %call = call %struct.bignum_st* @getBN(%struct.stanza_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.255, i32 0, i32 0)), !dbg !4817
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !4818
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !4819
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1158, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.254, i32 0, i32 0), i8* %1), !dbg !4820
  %tobool = icmp ne i32 %call1, 0, !dbg !4822
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !4823

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !4824
  %call2 = call %struct.bignum_st* @getBN(%struct.stanza_st* %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.242, i32 0, i32 0)), !dbg !4826
  store %struct.bignum_st* %call2, %struct.bignum_st** %lshift1, align 8, !dbg !4827
  %3 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !4828
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1159, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.303, i32 0, i32 0), i8* %3), !dbg !4829
  %tobool4 = icmp ne i32 %call3, 0, !dbg !4831
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !4832

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !4833
  store %struct.bignum_st* %call6, %struct.bignum_st** %zero, align 8, !dbg !4834
  %4 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !4835
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1160, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.188, i32 0, i32 0), i8* %4), !dbg !4836
  %tobool8 = icmp ne i32 %call7, 0, !dbg !4837
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !4838

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %call10 = call %struct.bignum_st* @BN_new(), !dbg !4839
  store %struct.bignum_st* %call10, %struct.bignum_st** %ret, align 8, !dbg !4840
  %5 = bitcast %struct.bignum_st* %call10 to i8*, !dbg !4841
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1161, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.259, i32 0, i32 0), i8* %5), !dbg !4842
  %tobool12 = icmp ne i32 %call11, 0, !dbg !4843
  br i1 %tobool12, label %lor.lhs.false13, label %if.then, !dbg !4844

lor.lhs.false13:                                  ; preds = %lor.lhs.false9
  %call14 = call %struct.bignum_st* @BN_new(), !dbg !4845
  store %struct.bignum_st* %call14, %struct.bignum_st** %two, align 8, !dbg !4846
  %6 = bitcast %struct.bignum_st* %call14 to i8*, !dbg !4847
  %call15 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1162, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.304, i32 0, i32 0), i8* %6), !dbg !4848
  %tobool16 = icmp ne i32 %call15, 0, !dbg !4849
  br i1 %tobool16, label %lor.lhs.false17, label %if.then, !dbg !4850

lor.lhs.false17:                                  ; preds = %lor.lhs.false13
  %call18 = call %struct.bignum_st* @BN_new(), !dbg !4851
  store %struct.bignum_st* %call18, %struct.bignum_st** %remainder, align 8, !dbg !4852
  %7 = bitcast %struct.bignum_st* %call18 to i8*, !dbg !4853
  %call19 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1163, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.305, i32 0, i32 0), i8* %7), !dbg !4854
  %tobool20 = icmp ne i32 %call19, 0, !dbg !4855
  br i1 %tobool20, label %if.end, label %if.then, !dbg !4856

if.then:                                          ; preds = %lor.lhs.false17, %lor.lhs.false13, %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !4858

if.end:                                           ; preds = %lor.lhs.false17
  %8 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !4859
  %call21 = call i32 @BN_set_word(%struct.bignum_st* %8, i64 0), !dbg !4860
  %9 = load %struct.bignum_st*, %struct.bignum_st** %two, align 8, !dbg !4861
  %call22 = call i32 @BN_set_word(%struct.bignum_st* %9, i64 2), !dbg !4863
  %cmp = icmp ne i32 %call22, 0, !dbg !4864
  %conv = zext i1 %cmp to i32, !dbg !4864
  %call23 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1168, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.306, i32 0, i32 0), i32 %conv), !dbg !4865
  %tobool24 = icmp ne i32 %call23, 0, !dbg !4867
  br i1 %tobool24, label %lor.lhs.false25, label %if.then82, !dbg !4868

lor.lhs.false25:                                  ; preds = %if.end
  %10 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4869
  %11 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4871
  %12 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4872
  %call26 = call i32 @BN_add(%struct.bignum_st* %10, %struct.bignum_st* %11, %struct.bignum_st* %12), !dbg !4873
  %cmp27 = icmp ne i32 %call26, 0, !dbg !4874
  %conv28 = zext i1 %cmp27 to i32, !dbg !4874
  %call29 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1169, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.307, i32 0, i32 0), i32 %conv28), !dbg !4875
  %tobool30 = icmp ne i32 %call29, 0, !dbg !4877
  br i1 %tobool30, label %lor.lhs.false31, label %if.then82, !dbg !4878

lor.lhs.false31:                                  ; preds = %lor.lhs.false25
  %13 = load %struct.bignum_st*, %struct.bignum_st** %lshift1, align 8, !dbg !4879
  %14 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4880
  %call32 = call i32 @equalBN(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.308, i32 0, i32 0), %struct.bignum_st* %13, %struct.bignum_st* %14), !dbg !4881
  %tobool33 = icmp ne i32 %call32, 0, !dbg !4881
  br i1 %tobool33, label %lor.lhs.false34, label %if.then82, !dbg !4882

lor.lhs.false34:                                  ; preds = %lor.lhs.false31
  %15 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4883
  %16 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4884
  %17 = load %struct.bignum_st*, %struct.bignum_st** %two, align 8, !dbg !4885
  %18 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !4886
  %call35 = call i32 @BN_mul(%struct.bignum_st* %15, %struct.bignum_st* %16, %struct.bignum_st* %17, %struct.bignum_ctx* %18), !dbg !4887
  %cmp36 = icmp ne i32 %call35, 0, !dbg !4888
  %conv37 = zext i1 %cmp36 to i32, !dbg !4888
  %call38 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1171, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.309, i32 0, i32 0), i32 %conv37), !dbg !4889
  %tobool39 = icmp ne i32 %call38, 0, !dbg !4890
  br i1 %tobool39, label %lor.lhs.false40, label %if.then82, !dbg !4891

lor.lhs.false40:                                  ; preds = %lor.lhs.false34
  %19 = load %struct.bignum_st*, %struct.bignum_st** %lshift1, align 8, !dbg !4892
  %20 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4893
  %call41 = call i32 @equalBN(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.310, i32 0, i32 0), %struct.bignum_st* %19, %struct.bignum_st* %20), !dbg !4894
  %tobool42 = icmp ne i32 %call41, 0, !dbg !4894
  br i1 %tobool42, label %lor.lhs.false43, label %if.then82, !dbg !4895

lor.lhs.false43:                                  ; preds = %lor.lhs.false40
  %21 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4896
  %22 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !4897
  %23 = load %struct.bignum_st*, %struct.bignum_st** %lshift1, align 8, !dbg !4898
  %24 = load %struct.bignum_st*, %struct.bignum_st** %two, align 8, !dbg !4899
  %25 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !4900
  %call44 = call i32 @BN_div(%struct.bignum_st* %21, %struct.bignum_st* %22, %struct.bignum_st* %23, %struct.bignum_st* %24, %struct.bignum_ctx* %25), !dbg !4901
  %cmp45 = icmp ne i32 %call44, 0, !dbg !4902
  %conv46 = zext i1 %cmp45 to i32, !dbg !4902
  %call47 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1173, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.311, i32 0, i32 0), i32 %conv46), !dbg !4903
  %tobool48 = icmp ne i32 %call47, 0, !dbg !4904
  br i1 %tobool48, label %lor.lhs.false49, label %if.then82, !dbg !4905

lor.lhs.false49:                                  ; preds = %lor.lhs.false43
  %26 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4906
  %27 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4907
  %call50 = call i32 @equalBN(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.312, i32 0, i32 0), %struct.bignum_st* %26, %struct.bignum_st* %27), !dbg !4908
  %tobool51 = icmp ne i32 %call50, 0, !dbg !4908
  br i1 %tobool51, label %lor.lhs.false52, label %if.then82, !dbg !4909

lor.lhs.false52:                                  ; preds = %lor.lhs.false49
  %28 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !4910
  %29 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !4911
  %call53 = call i32 @equalBN(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.313, i32 0, i32 0), %struct.bignum_st* %28, %struct.bignum_st* %29), !dbg !4912
  %tobool54 = icmp ne i32 %call53, 0, !dbg !4912
  br i1 %tobool54, label %lor.lhs.false55, label %if.then82, !dbg !4913

lor.lhs.false55:                                  ; preds = %lor.lhs.false52
  %30 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4914
  %31 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4915
  %call56 = call i32 @BN_lshift1(%struct.bignum_st* %30, %struct.bignum_st* %31), !dbg !4916
  %cmp57 = icmp ne i32 %call56, 0, !dbg !4917
  %conv58 = zext i1 %cmp57 to i32, !dbg !4917
  %call59 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1176, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.314, i32 0, i32 0), i32 %conv58), !dbg !4918
  %tobool60 = icmp ne i32 %call59, 0, !dbg !4919
  br i1 %tobool60, label %lor.lhs.false61, label %if.then82, !dbg !4920

lor.lhs.false61:                                  ; preds = %lor.lhs.false55
  %32 = load %struct.bignum_st*, %struct.bignum_st** %lshift1, align 8, !dbg !4921
  %33 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4922
  %call62 = call i32 @equalBN(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.315, i32 0, i32 0), %struct.bignum_st* %32, %struct.bignum_st* %33), !dbg !4923
  %tobool63 = icmp ne i32 %call62, 0, !dbg !4923
  br i1 %tobool63, label %lor.lhs.false64, label %if.then82, !dbg !4924

lor.lhs.false64:                                  ; preds = %lor.lhs.false61
  %34 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4925
  %35 = load %struct.bignum_st*, %struct.bignum_st** %lshift1, align 8, !dbg !4926
  %call65 = call i32 @BN_rshift1(%struct.bignum_st* %34, %struct.bignum_st* %35), !dbg !4927
  %cmp66 = icmp ne i32 %call65, 0, !dbg !4928
  %conv67 = zext i1 %cmp66 to i32, !dbg !4928
  %call68 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1178, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.316, i32 0, i32 0), i32 %conv67), !dbg !4929
  %tobool69 = icmp ne i32 %call68, 0, !dbg !4930
  br i1 %tobool69, label %lor.lhs.false70, label %if.then82, !dbg !4931

lor.lhs.false70:                                  ; preds = %lor.lhs.false64
  %36 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4932
  %37 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4933
  %call71 = call i32 @equalBN(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.317, i32 0, i32 0), %struct.bignum_st* %36, %struct.bignum_st* %37), !dbg !4934
  %tobool72 = icmp ne i32 %call71, 0, !dbg !4934
  br i1 %tobool72, label %lor.lhs.false73, label %if.then82, !dbg !4935

lor.lhs.false73:                                  ; preds = %lor.lhs.false70
  %38 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4936
  %39 = load %struct.bignum_st*, %struct.bignum_st** %lshift1, align 8, !dbg !4937
  %call74 = call i32 @BN_rshift1(%struct.bignum_st* %38, %struct.bignum_st* %39), !dbg !4938
  %cmp75 = icmp ne i32 %call74, 0, !dbg !4939
  %conv76 = zext i1 %cmp75 to i32, !dbg !4939
  %call77 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1180, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.316, i32 0, i32 0), i32 %conv76), !dbg !4940
  %tobool78 = icmp ne i32 %call77, 0, !dbg !4941
  br i1 %tobool78, label %lor.lhs.false79, label %if.then82, !dbg !4942

lor.lhs.false79:                                  ; preds = %lor.lhs.false73
  %40 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4943
  %41 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4944
  %call80 = call i32 @equalBN(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.317, i32 0, i32 0), %struct.bignum_st* %40, %struct.bignum_st* %41), !dbg !4945
  %tobool81 = icmp ne i32 %call80, 0, !dbg !4945
  br i1 %tobool81, label %if.end83, label %if.then82, !dbg !4946

if.then82:                                        ; preds = %lor.lhs.false79, %lor.lhs.false73, %lor.lhs.false70, %lor.lhs.false64, %lor.lhs.false61, %lor.lhs.false55, %lor.lhs.false52, %lor.lhs.false49, %lor.lhs.false43, %lor.lhs.false40, %lor.lhs.false34, %lor.lhs.false31, %lor.lhs.false25, %if.end
  br label %err, !dbg !4947

if.end83:                                         ; preds = %lor.lhs.false79
  %42 = load %struct.bignum_st*, %struct.bignum_st** %lshift1, align 8, !dbg !4948
  %call84 = call i32 @BN_set_bit(%struct.bignum_st* %42, i32 0), !dbg !4950
  %cmp85 = icmp ne i32 %call84, 0, !dbg !4951
  %conv86 = zext i1 %cmp85 to i32, !dbg !4951
  %call87 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1185, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.318, i32 0, i32 0), i32 %conv86), !dbg !4952
  %tobool88 = icmp ne i32 %call87, 0, !dbg !4954
  br i1 %tobool88, label %lor.lhs.false89, label %if.then107, !dbg !4955

lor.lhs.false89:                                  ; preds = %if.end83
  %43 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4956
  %44 = load %struct.bignum_st*, %struct.bignum_st** %lshift1, align 8, !dbg !4958
  %45 = load %struct.bignum_st*, %struct.bignum_st** %two, align 8, !dbg !4959
  %46 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !4960
  %call90 = call i32 @BN_div(%struct.bignum_st* %43, %struct.bignum_st* null, %struct.bignum_st* %44, %struct.bignum_st* %45, %struct.bignum_ctx* %46), !dbg !4961
  %cmp91 = icmp ne i32 %call90, 0, !dbg !4962
  %conv92 = zext i1 %cmp91 to i32, !dbg !4962
  %call93 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1186, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.319, i32 0, i32 0), i32 %conv92), !dbg !4963
  %tobool94 = icmp ne i32 %call93, 0, !dbg !4965
  br i1 %tobool94, label %lor.lhs.false95, label %if.then107, !dbg !4966

lor.lhs.false95:                                  ; preds = %lor.lhs.false89
  %47 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4967
  %48 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4968
  %call96 = call i32 @equalBN(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.320, i32 0, i32 0), %struct.bignum_st* %47, %struct.bignum_st* %48), !dbg !4969
  %tobool97 = icmp ne i32 %call96, 0, !dbg !4969
  br i1 %tobool97, label %lor.lhs.false98, label %if.then107, !dbg !4970

lor.lhs.false98:                                  ; preds = %lor.lhs.false95
  %49 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4971
  %50 = load %struct.bignum_st*, %struct.bignum_st** %lshift1, align 8, !dbg !4972
  %call99 = call i32 @BN_rshift1(%struct.bignum_st* %49, %struct.bignum_st* %50), !dbg !4973
  %cmp100 = icmp ne i32 %call99, 0, !dbg !4974
  %conv101 = zext i1 %cmp100 to i32, !dbg !4974
  %call102 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1188, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.316, i32 0, i32 0), i32 %conv101), !dbg !4975
  %tobool103 = icmp ne i32 %call102, 0, !dbg !4976
  br i1 %tobool103, label %lor.lhs.false104, label %if.then107, !dbg !4977

lor.lhs.false104:                                 ; preds = %lor.lhs.false98
  %51 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4978
  %52 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4979
  %call105 = call i32 @equalBN(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.321, i32 0, i32 0), %struct.bignum_st* %51, %struct.bignum_st* %52), !dbg !4980
  %tobool106 = icmp ne i32 %call105, 0, !dbg !4980
  br i1 %tobool106, label %if.end108, label %if.then107, !dbg !4981

if.then107:                                       ; preds = %lor.lhs.false104, %lor.lhs.false98, %lor.lhs.false95, %lor.lhs.false89, %if.end83
  br label %err, !dbg !4982

if.end108:                                        ; preds = %lor.lhs.false104
  store i32 1, i32* %st, align 4, !dbg !4983
  br label %err, !dbg !4984

err:                                              ; preds = %if.end108, %if.then107, %if.then82, %if.then
  %53 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !4985
  call void @BN_free(%struct.bignum_st* %53), !dbg !4986
  %54 = load %struct.bignum_st*, %struct.bignum_st** %lshift1, align 8, !dbg !4987
  call void @BN_free(%struct.bignum_st* %54), !dbg !4988
  %55 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !4989
  call void @BN_free(%struct.bignum_st* %55), !dbg !4990
  %56 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !4991
  call void @BN_free(%struct.bignum_st* %56), !dbg !4992
  %57 = load %struct.bignum_st*, %struct.bignum_st** %two, align 8, !dbg !4993
  call void @BN_free(%struct.bignum_st* %57), !dbg !4994
  %58 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !4995
  call void @BN_free(%struct.bignum_st* %58), !dbg !4996
  %59 = load i32, i32* %st, align 4, !dbg !4997
  ret i32 %59, !dbg !4998
}

; Function Attrs: nounwind uwtable
define internal i32 @file_lshift(%struct.stanza_st* %s) #0 !dbg !4999 {
entry:
  %s.addr = alloca %struct.stanza_st*, align 8
  %a = alloca %struct.bignum_st*, align 8
  %lshift = alloca %struct.bignum_st*, align 8
  %ret = alloca %struct.bignum_st*, align 8
  %n = alloca i32, align 4
  %st = alloca i32, align 4
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !5000, metadata !134), !dbg !5001
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !5002, metadata !134), !dbg !5003
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !5003
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %lshift, metadata !5004, metadata !134), !dbg !5005
  store %struct.bignum_st* null, %struct.bignum_st** %lshift, align 8, !dbg !5005
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret, metadata !5006, metadata !134), !dbg !5007
  store %struct.bignum_st* null, %struct.bignum_st** %ret, align 8, !dbg !5007
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5008, metadata !134), !dbg !5009
  store i32 0, i32* %n, align 4, !dbg !5009
  call void @llvm.dbg.declare(metadata i32* %st, metadata !5010, metadata !134), !dbg !5011
  store i32 0, i32* %st, align 4, !dbg !5011
  %0 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5012
  %call = call %struct.bignum_st* @getBN(%struct.stanza_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.255, i32 0, i32 0)), !dbg !5014
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !5015
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !5016
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1209, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.254, i32 0, i32 0), i8* %1), !dbg !5017
  %tobool = icmp ne i32 %call1, 0, !dbg !5019
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5020

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5021
  %call2 = call %struct.bignum_st* @getBN(%struct.stanza_st* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.243, i32 0, i32 0)), !dbg !5023
  store %struct.bignum_st* %call2, %struct.bignum_st** %lshift, align 8, !dbg !5024
  %3 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !5025
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1210, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.322, i32 0, i32 0), i8* %3), !dbg !5026
  %tobool4 = icmp ne i32 %call3, 0, !dbg !5028
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !5029

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !5030
  store %struct.bignum_st* %call6, %struct.bignum_st** %ret, align 8, !dbg !5031
  %4 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !5032
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1211, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.259, i32 0, i32 0), i8* %4), !dbg !5033
  %tobool8 = icmp ne i32 %call7, 0, !dbg !5034
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !5035

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %5 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5036
  %call10 = call i32 @getint(%struct.stanza_st* %5, i32* %n, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.323, i32 0, i32 0)), !dbg !5037
  %tobool11 = icmp ne i32 %call10, 0, !dbg !5037
  br i1 %tobool11, label %if.end, label %if.then, !dbg !5038

if.then:                                          ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !5040

if.end:                                           ; preds = %lor.lhs.false9
  %6 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5041
  %7 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5043
  %8 = load i32, i32* %n, align 4, !dbg !5044
  %call12 = call i32 @BN_lshift(%struct.bignum_st* %6, %struct.bignum_st* %7, i32 %8), !dbg !5045
  %cmp = icmp ne i32 %call12, 0, !dbg !5046
  %conv = zext i1 %cmp to i32, !dbg !5046
  %call13 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1215, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.324, i32 0, i32 0), i32 %conv), !dbg !5047
  %tobool14 = icmp ne i32 %call13, 0, !dbg !5049
  br i1 %tobool14, label %lor.lhs.false15, label %if.then27, !dbg !5050

lor.lhs.false15:                                  ; preds = %if.end
  %9 = load %struct.bignum_st*, %struct.bignum_st** %lshift, align 8, !dbg !5051
  %10 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5053
  %call16 = call i32 @equalBN(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.325, i32 0, i32 0), %struct.bignum_st* %9, %struct.bignum_st* %10), !dbg !5054
  %tobool17 = icmp ne i32 %call16, 0, !dbg !5054
  br i1 %tobool17, label %lor.lhs.false18, label %if.then27, !dbg !5055

lor.lhs.false18:                                  ; preds = %lor.lhs.false15
  %11 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5056
  %12 = load %struct.bignum_st*, %struct.bignum_st** %lshift, align 8, !dbg !5057
  %13 = load i32, i32* %n, align 4, !dbg !5058
  %call19 = call i32 @BN_rshift(%struct.bignum_st* %11, %struct.bignum_st* %12, i32 %13), !dbg !5059
  %cmp20 = icmp ne i32 %call19, 0, !dbg !5060
  %conv21 = zext i1 %cmp20 to i32, !dbg !5060
  %call22 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1217, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.326, i32 0, i32 0), i32 %conv21), !dbg !5061
  %tobool23 = icmp ne i32 %call22, 0, !dbg !5063
  br i1 %tobool23, label %lor.lhs.false24, label %if.then27, !dbg !5064

lor.lhs.false24:                                  ; preds = %lor.lhs.false18
  %14 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5065
  %15 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5066
  %call25 = call i32 @equalBN(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.327, i32 0, i32 0), %struct.bignum_st* %14, %struct.bignum_st* %15), !dbg !5067
  %tobool26 = icmp ne i32 %call25, 0, !dbg !5067
  br i1 %tobool26, label %if.end28, label %if.then27, !dbg !5068

if.then27:                                        ; preds = %lor.lhs.false24, %lor.lhs.false18, %lor.lhs.false15, %if.end
  br label %err, !dbg !5069

if.end28:                                         ; preds = %lor.lhs.false24
  store i32 1, i32* %st, align 4, !dbg !5070
  br label %err, !dbg !5071

err:                                              ; preds = %if.end28, %if.then27, %if.then
  %16 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5072
  call void @BN_free(%struct.bignum_st* %16), !dbg !5073
  %17 = load %struct.bignum_st*, %struct.bignum_st** %lshift, align 8, !dbg !5074
  call void @BN_free(%struct.bignum_st* %17), !dbg !5075
  %18 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5076
  call void @BN_free(%struct.bignum_st* %18), !dbg !5077
  %19 = load i32, i32* %st, align 4, !dbg !5078
  ret i32 %19, !dbg !5079
}

; Function Attrs: nounwind uwtable
define internal i32 @file_rshift(%struct.stanza_st* %s) #0 !dbg !5080 {
entry:
  %s.addr = alloca %struct.stanza_st*, align 8
  %a = alloca %struct.bignum_st*, align 8
  %rshift = alloca %struct.bignum_st*, align 8
  %ret = alloca %struct.bignum_st*, align 8
  %n = alloca i32, align 4
  %st = alloca i32, align 4
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !5081, metadata !134), !dbg !5082
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !5083, metadata !134), !dbg !5084
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !5084
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %rshift, metadata !5085, metadata !134), !dbg !5086
  store %struct.bignum_st* null, %struct.bignum_st** %rshift, align 8, !dbg !5086
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret, metadata !5087, metadata !134), !dbg !5088
  store %struct.bignum_st* null, %struct.bignum_st** %ret, align 8, !dbg !5088
  call void @llvm.dbg.declare(metadata i32* %n, metadata !5089, metadata !134), !dbg !5090
  store i32 0, i32* %n, align 4, !dbg !5090
  call void @llvm.dbg.declare(metadata i32* %st, metadata !5091, metadata !134), !dbg !5092
  store i32 0, i32* %st, align 4, !dbg !5092
  %0 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5093
  %call = call %struct.bignum_st* @getBN(%struct.stanza_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.255, i32 0, i32 0)), !dbg !5095
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !5096
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !5097
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1234, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.254, i32 0, i32 0), i8* %1), !dbg !5098
  %tobool = icmp ne i32 %call1, 0, !dbg !5100
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5101

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5102
  %call2 = call %struct.bignum_st* @getBN(%struct.stanza_st* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.244, i32 0, i32 0)), !dbg !5104
  store %struct.bignum_st* %call2, %struct.bignum_st** %rshift, align 8, !dbg !5105
  %3 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !5106
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1235, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.331, i32 0, i32 0), i8* %3), !dbg !5107
  %tobool4 = icmp ne i32 %call3, 0, !dbg !5109
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !5110

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = call %struct.bignum_st* @BN_new(), !dbg !5111
  store %struct.bignum_st* %call6, %struct.bignum_st** %ret, align 8, !dbg !5112
  %4 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !5113
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1236, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.259, i32 0, i32 0), i8* %4), !dbg !5114
  %tobool8 = icmp ne i32 %call7, 0, !dbg !5115
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !5116

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %5 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5117
  %call10 = call i32 @getint(%struct.stanza_st* %5, i32* %n, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.323, i32 0, i32 0)), !dbg !5118
  %tobool11 = icmp ne i32 %call10, 0, !dbg !5118
  br i1 %tobool11, label %if.end, label %if.then, !dbg !5119

if.then:                                          ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !5121

if.end:                                           ; preds = %lor.lhs.false9
  %6 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5122
  %7 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5124
  %8 = load i32, i32* %n, align 4, !dbg !5125
  %call12 = call i32 @BN_rshift(%struct.bignum_st* %6, %struct.bignum_st* %7, i32 %8), !dbg !5126
  %cmp = icmp ne i32 %call12, 0, !dbg !5127
  %conv = zext i1 %cmp to i32, !dbg !5127
  %call13 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1240, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.332, i32 0, i32 0), i32 %conv), !dbg !5128
  %tobool14 = icmp ne i32 %call13, 0, !dbg !5130
  br i1 %tobool14, label %lor.lhs.false15, label %if.then18, !dbg !5131

lor.lhs.false15:                                  ; preds = %if.end
  %9 = load %struct.bignum_st*, %struct.bignum_st** %rshift, align 8, !dbg !5132
  %10 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5134
  %call16 = call i32 @equalBN(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.327, i32 0, i32 0), %struct.bignum_st* %9, %struct.bignum_st* %10), !dbg !5135
  %tobool17 = icmp ne i32 %call16, 0, !dbg !5135
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !5136

if.then18:                                        ; preds = %lor.lhs.false15, %if.end
  br label %err, !dbg !5137

if.end19:                                         ; preds = %lor.lhs.false15
  %11 = load i32, i32* %n, align 4, !dbg !5138
  %cmp20 = icmp eq i32 %11, 1, !dbg !5140
  br i1 %cmp20, label %if.then22, label %if.end33, !dbg !5141

if.then22:                                        ; preds = %if.end19
  %12 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5142
  %13 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5145
  %call23 = call i32 @BN_rshift1(%struct.bignum_st* %12, %struct.bignum_st* %13), !dbg !5146
  %cmp24 = icmp ne i32 %call23, 0, !dbg !5147
  %conv25 = zext i1 %cmp24 to i32, !dbg !5147
  %call26 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1246, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.333, i32 0, i32 0), i32 %conv25), !dbg !5148
  %tobool27 = icmp ne i32 %call26, 0, !dbg !5150
  br i1 %tobool27, label %lor.lhs.false28, label %if.then31, !dbg !5151

lor.lhs.false28:                                  ; preds = %if.then22
  %14 = load %struct.bignum_st*, %struct.bignum_st** %rshift, align 8, !dbg !5152
  %15 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5154
  %call29 = call i32 @equalBN(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.334, i32 0, i32 0), %struct.bignum_st* %14, %struct.bignum_st* %15), !dbg !5155
  %tobool30 = icmp ne i32 %call29, 0, !dbg !5155
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !5156

if.then31:                                        ; preds = %lor.lhs.false28, %if.then22
  br label %err, !dbg !5158

if.end32:                                         ; preds = %lor.lhs.false28
  br label %if.end33, !dbg !5159

if.end33:                                         ; preds = %if.end32, %if.end19
  store i32 1, i32* %st, align 4, !dbg !5160
  br label %err, !dbg !5161

err:                                              ; preds = %if.end33, %if.then31, %if.then18, %if.then
  %16 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5162
  call void @BN_free(%struct.bignum_st* %16), !dbg !5163
  %17 = load %struct.bignum_st*, %struct.bignum_st** %rshift, align 8, !dbg !5164
  call void @BN_free(%struct.bignum_st* %17), !dbg !5165
  %18 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5166
  call void @BN_free(%struct.bignum_st* %18), !dbg !5167
  %19 = load i32, i32* %st, align 4, !dbg !5168
  ret i32 %19, !dbg !5169
}

; Function Attrs: nounwind uwtable
define internal i32 @file_square(%struct.stanza_st* %s) #0 !dbg !5170 {
entry:
  %s.addr = alloca %struct.stanza_st*, align 8
  %a = alloca %struct.bignum_st*, align 8
  %square = alloca %struct.bignum_st*, align 8
  %zero = alloca %struct.bignum_st*, align 8
  %ret = alloca %struct.bignum_st*, align 8
  %remainder = alloca %struct.bignum_st*, align 8
  %tmp = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !5171, metadata !134), !dbg !5172
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !5173, metadata !134), !dbg !5174
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !5174
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %square, metadata !5175, metadata !134), !dbg !5176
  store %struct.bignum_st* null, %struct.bignum_st** %square, align 8, !dbg !5176
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %zero, metadata !5177, metadata !134), !dbg !5178
  store %struct.bignum_st* null, %struct.bignum_st** %zero, align 8, !dbg !5178
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret, metadata !5179, metadata !134), !dbg !5180
  store %struct.bignum_st* null, %struct.bignum_st** %ret, align 8, !dbg !5180
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %remainder, metadata !5181, metadata !134), !dbg !5182
  store %struct.bignum_st* null, %struct.bignum_st** %remainder, align 8, !dbg !5182
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %tmp, metadata !5183, metadata !134), !dbg !5184
  store %struct.bignum_st* null, %struct.bignum_st** %tmp, align 8, !dbg !5184
  call void @llvm.dbg.declare(metadata i32* %st, metadata !5185, metadata !134), !dbg !5186
  store i32 0, i32* %st, align 4, !dbg !5186
  %0 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5187
  %call = call %struct.bignum_st* @getBN(%struct.stanza_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.255, i32 0, i32 0)), !dbg !5189
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !5190
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !5191
  %call2 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1265, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.254, i32 0, i32 0), i8* %1), !dbg !5192
  %tobool = icmp ne i32 %call2, 0, !dbg !5194
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5195

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5196
  %call3 = call %struct.bignum_st* @getBN(%struct.stanza_st* %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.245, i32 0, i32 0)), !dbg !5198
  store %struct.bignum_st* %call3, %struct.bignum_st** %square, align 8, !dbg !5199
  %3 = bitcast %struct.bignum_st* %call3 to i8*, !dbg !5200
  %call4 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1266, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.335, i32 0, i32 0), i8* %3), !dbg !5201
  %tobool5 = icmp ne i32 %call4, 0, !dbg !5203
  br i1 %tobool5, label %lor.lhs.false6, label %if.then, !dbg !5204

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %call7 = call %struct.bignum_st* @BN_new(), !dbg !5205
  store %struct.bignum_st* %call7, %struct.bignum_st** %zero, align 8, !dbg !5206
  %4 = bitcast %struct.bignum_st* %call7 to i8*, !dbg !5207
  %call8 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1267, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.188, i32 0, i32 0), i8* %4), !dbg !5208
  %tobool9 = icmp ne i32 %call8, 0, !dbg !5209
  br i1 %tobool9, label %lor.lhs.false10, label %if.then, !dbg !5210

lor.lhs.false10:                                  ; preds = %lor.lhs.false6
  %call11 = call %struct.bignum_st* @BN_new(), !dbg !5211
  store %struct.bignum_st* %call11, %struct.bignum_st** %ret, align 8, !dbg !5212
  %5 = bitcast %struct.bignum_st* %call11 to i8*, !dbg !5213
  %call12 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1268, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.259, i32 0, i32 0), i8* %5), !dbg !5214
  %tobool13 = icmp ne i32 %call12, 0, !dbg !5215
  br i1 %tobool13, label %lor.lhs.false14, label %if.then, !dbg !5216

lor.lhs.false14:                                  ; preds = %lor.lhs.false10
  %call15 = call %struct.bignum_st* @BN_new(), !dbg !5217
  store %struct.bignum_st* %call15, %struct.bignum_st** %remainder, align 8, !dbg !5218
  %6 = bitcast %struct.bignum_st* %call15 to i8*, !dbg !5219
  %call16 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1269, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.305, i32 0, i32 0), i8* %6), !dbg !5220
  %tobool17 = icmp ne i32 %call16, 0, !dbg !5221
  br i1 %tobool17, label %if.end, label %if.then, !dbg !5222

if.then:                                          ; preds = %lor.lhs.false14, %lor.lhs.false10, %lor.lhs.false6, %lor.lhs.false, %entry
  br label %err, !dbg !5224

if.end:                                           ; preds = %lor.lhs.false14
  %7 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !5225
  %call18 = call i32 @BN_set_word(%struct.bignum_st* %7, i64 0), !dbg !5226
  %8 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5227
  %9 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5229
  %10 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5230
  %call19 = call i32 @BN_sqr(%struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_ctx* %10), !dbg !5231
  %cmp = icmp ne i32 %call19, 0, !dbg !5232
  %conv = zext i1 %cmp to i32, !dbg !5232
  %call20 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1273, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.336, i32 0, i32 0), i32 %conv), !dbg !5233
  %tobool21 = icmp ne i32 %call20, 0, !dbg !5235
  br i1 %tobool21, label %lor.lhs.false22, label %if.then46, !dbg !5236

lor.lhs.false22:                                  ; preds = %if.end
  %11 = load %struct.bignum_st*, %struct.bignum_st** %square, align 8, !dbg !5237
  %12 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5239
  %call23 = call i32 @equalBN(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.337, i32 0, i32 0), %struct.bignum_st* %11, %struct.bignum_st* %12), !dbg !5240
  %tobool24 = icmp ne i32 %call23, 0, !dbg !5240
  br i1 %tobool24, label %lor.lhs.false25, label %if.then46, !dbg !5241

lor.lhs.false25:                                  ; preds = %lor.lhs.false22
  %13 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5242
  %14 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5243
  %15 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5244
  %16 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5245
  %call26 = call i32 @BN_mul(%struct.bignum_st* %13, %struct.bignum_st* %14, %struct.bignum_st* %15, %struct.bignum_ctx* %16), !dbg !5246
  %cmp27 = icmp ne i32 %call26, 0, !dbg !5247
  %conv28 = zext i1 %cmp27 to i32, !dbg !5247
  %call29 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1275, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.338, i32 0, i32 0), i32 %conv28), !dbg !5248
  %tobool30 = icmp ne i32 %call29, 0, !dbg !5250
  br i1 %tobool30, label %lor.lhs.false31, label %if.then46, !dbg !5251

lor.lhs.false31:                                  ; preds = %lor.lhs.false25
  %17 = load %struct.bignum_st*, %struct.bignum_st** %square, align 8, !dbg !5252
  %18 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5253
  %call32 = call i32 @equalBN(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.339, i32 0, i32 0), %struct.bignum_st* %17, %struct.bignum_st* %18), !dbg !5254
  %tobool33 = icmp ne i32 %call32, 0, !dbg !5254
  br i1 %tobool33, label %lor.lhs.false34, label %if.then46, !dbg !5255

lor.lhs.false34:                                  ; preds = %lor.lhs.false31
  %19 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5256
  %20 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !5257
  %21 = load %struct.bignum_st*, %struct.bignum_st** %square, align 8, !dbg !5258
  %22 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5259
  %23 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5260
  %call35 = call i32 @BN_div(%struct.bignum_st* %19, %struct.bignum_st* %20, %struct.bignum_st* %21, %struct.bignum_st* %22, %struct.bignum_ctx* %23), !dbg !5261
  %cmp36 = icmp ne i32 %call35, 0, !dbg !5262
  %conv37 = zext i1 %cmp36 to i32, !dbg !5262
  %call38 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1277, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.340, i32 0, i32 0), i32 %conv37), !dbg !5263
  %tobool39 = icmp ne i32 %call38, 0, !dbg !5264
  br i1 %tobool39, label %lor.lhs.false40, label %if.then46, !dbg !5265

lor.lhs.false40:                                  ; preds = %lor.lhs.false34
  %24 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5266
  %25 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5267
  %call41 = call i32 @equalBN(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.341, i32 0, i32 0), %struct.bignum_st* %24, %struct.bignum_st* %25), !dbg !5268
  %tobool42 = icmp ne i32 %call41, 0, !dbg !5268
  br i1 %tobool42, label %lor.lhs.false43, label %if.then46, !dbg !5269

lor.lhs.false43:                                  ; preds = %lor.lhs.false40
  %26 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !5270
  %27 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !5271
  %call44 = call i32 @equalBN(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.342, i32 0, i32 0), %struct.bignum_st* %26, %struct.bignum_st* %27), !dbg !5272
  %tobool45 = icmp ne i32 %call44, 0, !dbg !5272
  br i1 %tobool45, label %if.end47, label %if.then46, !dbg !5273

if.then46:                                        ; preds = %lor.lhs.false43, %lor.lhs.false40, %lor.lhs.false34, %lor.lhs.false31, %lor.lhs.false25, %lor.lhs.false22, %if.end
  br label %err, !dbg !5274

if.end47:                                         ; preds = %lor.lhs.false43
  store i32 1, i32* %st, align 4, !dbg !5275
  br label %err, !dbg !5276

err:                                              ; preds = %if.end47, %if.then46, %if.then
  %28 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5277
  call void @BN_free(%struct.bignum_st* %28), !dbg !5278
  %29 = load %struct.bignum_st*, %struct.bignum_st** %square, align 8, !dbg !5279
  call void @BN_free(%struct.bignum_st* %29), !dbg !5280
  %30 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !5281
  call void @BN_free(%struct.bignum_st* %30), !dbg !5282
  %31 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5283
  call void @BN_free(%struct.bignum_st* %31), !dbg !5284
  %32 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !5285
  call void @BN_free(%struct.bignum_st* %32), !dbg !5286
  %33 = load %struct.bignum_st*, %struct.bignum_st** %tmp, align 8, !dbg !5287
  call void @BN_free(%struct.bignum_st* %33), !dbg !5288
  %34 = load i32, i32* %st, align 4, !dbg !5289
  ret i32 %34, !dbg !5290
}

; Function Attrs: nounwind uwtable
define internal i32 @file_product(%struct.stanza_st* %s) #0 !dbg !5291 {
entry:
  %s.addr = alloca %struct.stanza_st*, align 8
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca %struct.bignum_st*, align 8
  %product = alloca %struct.bignum_st*, align 8
  %ret = alloca %struct.bignum_st*, align 8
  %remainder = alloca %struct.bignum_st*, align 8
  %zero = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !5292, metadata !134), !dbg !5293
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !5294, metadata !134), !dbg !5295
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !5295
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b, metadata !5296, metadata !134), !dbg !5297
  store %struct.bignum_st* null, %struct.bignum_st** %b, align 8, !dbg !5297
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %product, metadata !5298, metadata !134), !dbg !5299
  store %struct.bignum_st* null, %struct.bignum_st** %product, align 8, !dbg !5299
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret, metadata !5300, metadata !134), !dbg !5301
  store %struct.bignum_st* null, %struct.bignum_st** %ret, align 8, !dbg !5301
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %remainder, metadata !5302, metadata !134), !dbg !5303
  store %struct.bignum_st* null, %struct.bignum_st** %remainder, align 8, !dbg !5303
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %zero, metadata !5304, metadata !134), !dbg !5305
  store %struct.bignum_st* null, %struct.bignum_st** %zero, align 8, !dbg !5305
  call void @llvm.dbg.declare(metadata i32* %st, metadata !5306, metadata !134), !dbg !5307
  store i32 0, i32* %st, align 4, !dbg !5307
  %0 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5308
  %call = call %struct.bignum_st* @getBN(%struct.stanza_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.255, i32 0, i32 0)), !dbg !5310
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !5311
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !5312
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1325, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.254, i32 0, i32 0), i8* %1), !dbg !5313
  %tobool = icmp ne i32 %call1, 0, !dbg !5315
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5316

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5317
  %call2 = call %struct.bignum_st* @getBN(%struct.stanza_st* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.257, i32 0, i32 0)), !dbg !5319
  store %struct.bignum_st* %call2, %struct.bignum_st** %b, align 8, !dbg !5320
  %3 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !5321
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1326, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.256, i32 0, i32 0), i8* %3), !dbg !5322
  %tobool4 = icmp ne i32 %call3, 0, !dbg !5324
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !5325

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %4 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5326
  %call6 = call %struct.bignum_st* @getBN(%struct.stanza_st* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.246, i32 0, i32 0)), !dbg !5327
  store %struct.bignum_st* %call6, %struct.bignum_st** %product, align 8, !dbg !5328
  %5 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !5329
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1327, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.343, i32 0, i32 0), i8* %5), !dbg !5330
  %tobool8 = icmp ne i32 %call7, 0, !dbg !5331
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !5332

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %call10 = call %struct.bignum_st* @BN_new(), !dbg !5333
  store %struct.bignum_st* %call10, %struct.bignum_st** %ret, align 8, !dbg !5334
  %6 = bitcast %struct.bignum_st* %call10 to i8*, !dbg !5335
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1328, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.259, i32 0, i32 0), i8* %6), !dbg !5336
  %tobool12 = icmp ne i32 %call11, 0, !dbg !5337
  br i1 %tobool12, label %lor.lhs.false13, label %if.then, !dbg !5338

lor.lhs.false13:                                  ; preds = %lor.lhs.false9
  %call14 = call %struct.bignum_st* @BN_new(), !dbg !5339
  store %struct.bignum_st* %call14, %struct.bignum_st** %remainder, align 8, !dbg !5340
  %7 = bitcast %struct.bignum_st* %call14 to i8*, !dbg !5341
  %call15 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1329, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.305, i32 0, i32 0), i8* %7), !dbg !5342
  %tobool16 = icmp ne i32 %call15, 0, !dbg !5343
  br i1 %tobool16, label %lor.lhs.false17, label %if.then, !dbg !5344

lor.lhs.false17:                                  ; preds = %lor.lhs.false13
  %call18 = call %struct.bignum_st* @BN_new(), !dbg !5345
  store %struct.bignum_st* %call18, %struct.bignum_st** %zero, align 8, !dbg !5346
  %8 = bitcast %struct.bignum_st* %call18 to i8*, !dbg !5347
  %call19 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1330, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.188, i32 0, i32 0), i8* %8), !dbg !5348
  %tobool20 = icmp ne i32 %call19, 0, !dbg !5349
  br i1 %tobool20, label %if.end, label %if.then, !dbg !5350

if.then:                                          ; preds = %lor.lhs.false17, %lor.lhs.false13, %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !5352

if.end:                                           ; preds = %lor.lhs.false17
  %9 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !5353
  %call21 = call i32 @BN_set_word(%struct.bignum_st* %9, i64 0), !dbg !5354
  %10 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5355
  %11 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5357
  %12 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5358
  %13 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5359
  %call22 = call i32 @BN_mul(%struct.bignum_st* %10, %struct.bignum_st* %11, %struct.bignum_st* %12, %struct.bignum_ctx* %13), !dbg !5360
  %cmp = icmp ne i32 %call22, 0, !dbg !5361
  %conv = zext i1 %cmp to i32, !dbg !5361
  %call23 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1335, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.344, i32 0, i32 0), i32 %conv), !dbg !5362
  %tobool24 = icmp ne i32 %call23, 0, !dbg !5364
  br i1 %tobool24, label %lor.lhs.false25, label %if.then52, !dbg !5365

lor.lhs.false25:                                  ; preds = %if.end
  %14 = load %struct.bignum_st*, %struct.bignum_st** %product, align 8, !dbg !5366
  %15 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5368
  %call26 = call i32 @equalBN(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.345, i32 0, i32 0), %struct.bignum_st* %14, %struct.bignum_st* %15), !dbg !5369
  %tobool27 = icmp ne i32 %call26, 0, !dbg !5369
  br i1 %tobool27, label %lor.lhs.false28, label %if.then52, !dbg !5370

lor.lhs.false28:                                  ; preds = %lor.lhs.false25
  %16 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5371
  %17 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !5372
  %18 = load %struct.bignum_st*, %struct.bignum_st** %product, align 8, !dbg !5373
  %19 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5374
  %20 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5375
  %call29 = call i32 @BN_div(%struct.bignum_st* %16, %struct.bignum_st* %17, %struct.bignum_st* %18, %struct.bignum_st* %19, %struct.bignum_ctx* %20), !dbg !5376
  %cmp30 = icmp ne i32 %call29, 0, !dbg !5377
  %conv31 = zext i1 %cmp30 to i32, !dbg !5377
  %call32 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1337, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.346, i32 0, i32 0), i32 %conv31), !dbg !5378
  %tobool33 = icmp ne i32 %call32, 0, !dbg !5380
  br i1 %tobool33, label %lor.lhs.false34, label %if.then52, !dbg !5381

lor.lhs.false34:                                  ; preds = %lor.lhs.false28
  %21 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5382
  %22 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5383
  %call35 = call i32 @equalBN(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.347, i32 0, i32 0), %struct.bignum_st* %21, %struct.bignum_st* %22), !dbg !5384
  %tobool36 = icmp ne i32 %call35, 0, !dbg !5384
  br i1 %tobool36, label %lor.lhs.false37, label %if.then52, !dbg !5385

lor.lhs.false37:                                  ; preds = %lor.lhs.false34
  %23 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !5386
  %24 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !5387
  %call38 = call i32 @equalBN(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.348, i32 0, i32 0), %struct.bignum_st* %23, %struct.bignum_st* %24), !dbg !5388
  %tobool39 = icmp ne i32 %call38, 0, !dbg !5388
  br i1 %tobool39, label %lor.lhs.false40, label %if.then52, !dbg !5389

lor.lhs.false40:                                  ; preds = %lor.lhs.false37
  %25 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5390
  %26 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !5391
  %27 = load %struct.bignum_st*, %struct.bignum_st** %product, align 8, !dbg !5392
  %28 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5393
  %29 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5394
  %call41 = call i32 @BN_div(%struct.bignum_st* %25, %struct.bignum_st* %26, %struct.bignum_st* %27, %struct.bignum_st* %28, %struct.bignum_ctx* %29), !dbg !5395
  %cmp42 = icmp ne i32 %call41, 0, !dbg !5396
  %conv43 = zext i1 %cmp42 to i32, !dbg !5396
  %call44 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1340, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.349, i32 0, i32 0), i32 %conv43), !dbg !5397
  %tobool45 = icmp ne i32 %call44, 0, !dbg !5398
  br i1 %tobool45, label %lor.lhs.false46, label %if.then52, !dbg !5399

lor.lhs.false46:                                  ; preds = %lor.lhs.false40
  %30 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5400
  %31 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5401
  %call47 = call i32 @equalBN(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.350, i32 0, i32 0), %struct.bignum_st* %30, %struct.bignum_st* %31), !dbg !5402
  %tobool48 = icmp ne i32 %call47, 0, !dbg !5402
  br i1 %tobool48, label %lor.lhs.false49, label %if.then52, !dbg !5403

lor.lhs.false49:                                  ; preds = %lor.lhs.false46
  %32 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !5404
  %33 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !5405
  %call50 = call i32 @equalBN(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.351, i32 0, i32 0), %struct.bignum_st* %32, %struct.bignum_st* %33), !dbg !5406
  %tobool51 = icmp ne i32 %call50, 0, !dbg !5406
  br i1 %tobool51, label %if.end53, label %if.then52, !dbg !5407

if.then52:                                        ; preds = %lor.lhs.false49, %lor.lhs.false46, %lor.lhs.false40, %lor.lhs.false37, %lor.lhs.false34, %lor.lhs.false28, %lor.lhs.false25, %if.end
  br label %err, !dbg !5408

if.end53:                                         ; preds = %lor.lhs.false49
  store i32 1, i32* %st, align 4, !dbg !5409
  br label %err, !dbg !5410

err:                                              ; preds = %if.end53, %if.then52, %if.then
  %34 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5411
  call void @BN_free(%struct.bignum_st* %34), !dbg !5412
  %35 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5413
  call void @BN_free(%struct.bignum_st* %35), !dbg !5414
  %36 = load %struct.bignum_st*, %struct.bignum_st** %product, align 8, !dbg !5415
  call void @BN_free(%struct.bignum_st* %36), !dbg !5416
  %37 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5417
  call void @BN_free(%struct.bignum_st* %37), !dbg !5418
  %38 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !5419
  call void @BN_free(%struct.bignum_st* %38), !dbg !5420
  %39 = load %struct.bignum_st*, %struct.bignum_st** %zero, align 8, !dbg !5421
  call void @BN_free(%struct.bignum_st* %39), !dbg !5422
  %40 = load i32, i32* %st, align 4, !dbg !5423
  ret i32 %40, !dbg !5424
}

; Function Attrs: nounwind uwtable
define internal i32 @file_quotient(%struct.stanza_st* %s) #0 !dbg !5425 {
entry:
  %s.addr = alloca %struct.stanza_st*, align 8
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca %struct.bignum_st*, align 8
  %quotient = alloca %struct.bignum_st*, align 8
  %remainder = alloca %struct.bignum_st*, align 8
  %ret = alloca %struct.bignum_st*, align 8
  %ret2 = alloca %struct.bignum_st*, align 8
  %nnmod = alloca %struct.bignum_st*, align 8
  %b_word = alloca i64, align 8
  %ret_word = alloca i64, align 8
  %st = alloca i32, align 4
  %remainder_word = alloca i64, align 8
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !5426, metadata !134), !dbg !5427
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !5428, metadata !134), !dbg !5429
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !5429
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b, metadata !5430, metadata !134), !dbg !5431
  store %struct.bignum_st* null, %struct.bignum_st** %b, align 8, !dbg !5431
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %quotient, metadata !5432, metadata !134), !dbg !5433
  store %struct.bignum_st* null, %struct.bignum_st** %quotient, align 8, !dbg !5433
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %remainder, metadata !5434, metadata !134), !dbg !5435
  store %struct.bignum_st* null, %struct.bignum_st** %remainder, align 8, !dbg !5435
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret, metadata !5436, metadata !134), !dbg !5437
  store %struct.bignum_st* null, %struct.bignum_st** %ret, align 8, !dbg !5437
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret2, metadata !5438, metadata !134), !dbg !5439
  store %struct.bignum_st* null, %struct.bignum_st** %ret2, align 8, !dbg !5439
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %nnmod, metadata !5440, metadata !134), !dbg !5441
  store %struct.bignum_st* null, %struct.bignum_st** %nnmod, align 8, !dbg !5441
  call void @llvm.dbg.declare(metadata i64* %b_word, metadata !5442, metadata !134), !dbg !5443
  call void @llvm.dbg.declare(metadata i64* %ret_word, metadata !5444, metadata !134), !dbg !5445
  call void @llvm.dbg.declare(metadata i32* %st, metadata !5446, metadata !134), !dbg !5447
  store i32 0, i32* %st, align 4, !dbg !5447
  %0 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5448
  %call = call %struct.bignum_st* @getBN(%struct.stanza_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.255, i32 0, i32 0)), !dbg !5450
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !5451
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !5452
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1363, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.254, i32 0, i32 0), i8* %1), !dbg !5453
  %tobool = icmp ne i32 %call1, 0, !dbg !5455
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5456

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5457
  %call2 = call %struct.bignum_st* @getBN(%struct.stanza_st* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.257, i32 0, i32 0)), !dbg !5459
  store %struct.bignum_st* %call2, %struct.bignum_st** %b, align 8, !dbg !5460
  %3 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !5461
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1364, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.256, i32 0, i32 0), i8* %3), !dbg !5462
  %tobool4 = icmp ne i32 %call3, 0, !dbg !5464
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !5465

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %4 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5466
  %call6 = call %struct.bignum_st* @getBN(%struct.stanza_st* %4, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.247, i32 0, i32 0)), !dbg !5467
  store %struct.bignum_st* %call6, %struct.bignum_st** %quotient, align 8, !dbg !5468
  %5 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !5469
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1365, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.352, i32 0, i32 0), i8* %5), !dbg !5470
  %tobool8 = icmp ne i32 %call7, 0, !dbg !5471
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !5472

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %6 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5473
  %call10 = call %struct.bignum_st* @getBN(%struct.stanza_st* %6, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.354, i32 0, i32 0)), !dbg !5474
  store %struct.bignum_st* %call10, %struct.bignum_st** %remainder, align 8, !dbg !5475
  %7 = bitcast %struct.bignum_st* %call10 to i8*, !dbg !5476
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1366, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.353, i32 0, i32 0), i8* %7), !dbg !5477
  %tobool12 = icmp ne i32 %call11, 0, !dbg !5478
  br i1 %tobool12, label %lor.lhs.false13, label %if.then, !dbg !5479

lor.lhs.false13:                                  ; preds = %lor.lhs.false9
  %call14 = call %struct.bignum_st* @BN_new(), !dbg !5480
  store %struct.bignum_st* %call14, %struct.bignum_st** %ret, align 8, !dbg !5481
  %8 = bitcast %struct.bignum_st* %call14 to i8*, !dbg !5482
  %call15 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1367, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.259, i32 0, i32 0), i8* %8), !dbg !5483
  %tobool16 = icmp ne i32 %call15, 0, !dbg !5484
  br i1 %tobool16, label %lor.lhs.false17, label %if.then, !dbg !5485

lor.lhs.false17:                                  ; preds = %lor.lhs.false13
  %call18 = call %struct.bignum_st* @BN_new(), !dbg !5486
  store %struct.bignum_st* %call18, %struct.bignum_st** %ret2, align 8, !dbg !5487
  %9 = bitcast %struct.bignum_st* %call18 to i8*, !dbg !5488
  %call19 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1368, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.355, i32 0, i32 0), i8* %9), !dbg !5489
  %tobool20 = icmp ne i32 %call19, 0, !dbg !5490
  br i1 %tobool20, label %lor.lhs.false21, label %if.then, !dbg !5491

lor.lhs.false21:                                  ; preds = %lor.lhs.false17
  %call22 = call %struct.bignum_st* @BN_new(), !dbg !5492
  store %struct.bignum_st* %call22, %struct.bignum_st** %nnmod, align 8, !dbg !5493
  %10 = bitcast %struct.bignum_st* %call22 to i8*, !dbg !5494
  %call23 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1369, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.356, i32 0, i32 0), i8* %10), !dbg !5495
  %tobool24 = icmp ne i32 %call23, 0, !dbg !5496
  br i1 %tobool24, label %if.end, label %if.then, !dbg !5497

if.then:                                          ; preds = %lor.lhs.false21, %lor.lhs.false17, %lor.lhs.false13, %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !5499

if.end:                                           ; preds = %lor.lhs.false21
  %11 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5500
  %12 = load %struct.bignum_st*, %struct.bignum_st** %ret2, align 8, !dbg !5502
  %13 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5503
  %14 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5504
  %15 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5505
  %call25 = call i32 @BN_div(%struct.bignum_st* %11, %struct.bignum_st* %12, %struct.bignum_st* %13, %struct.bignum_st* %14, %struct.bignum_ctx* %15), !dbg !5506
  %cmp = icmp ne i32 %call25, 0, !dbg !5507
  %conv = zext i1 %cmp to i32, !dbg !5507
  %call26 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1372, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.357, i32 0, i32 0), i32 %conv), !dbg !5508
  %tobool27 = icmp ne i32 %call26, 0, !dbg !5510
  br i1 %tobool27, label %lor.lhs.false28, label %if.then49, !dbg !5511

lor.lhs.false28:                                  ; preds = %if.end
  %16 = load %struct.bignum_st*, %struct.bignum_st** %quotient, align 8, !dbg !5512
  %17 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5514
  %call29 = call i32 @equalBN(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.358, i32 0, i32 0), %struct.bignum_st* %16, %struct.bignum_st* %17), !dbg !5515
  %tobool30 = icmp ne i32 %call29, 0, !dbg !5515
  br i1 %tobool30, label %lor.lhs.false31, label %if.then49, !dbg !5516

lor.lhs.false31:                                  ; preds = %lor.lhs.false28
  %18 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !5517
  %19 = load %struct.bignum_st*, %struct.bignum_st** %ret2, align 8, !dbg !5518
  %call32 = call i32 @equalBN(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.359, i32 0, i32 0), %struct.bignum_st* %18, %struct.bignum_st* %19), !dbg !5519
  %tobool33 = icmp ne i32 %call32, 0, !dbg !5519
  br i1 %tobool33, label %lor.lhs.false34, label %if.then49, !dbg !5520

lor.lhs.false34:                                  ; preds = %lor.lhs.false31
  %20 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5521
  %21 = load %struct.bignum_st*, %struct.bignum_st** %quotient, align 8, !dbg !5522
  %22 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5523
  %23 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5524
  %call35 = call i32 @BN_mul(%struct.bignum_st* %20, %struct.bignum_st* %21, %struct.bignum_st* %22, %struct.bignum_ctx* %23), !dbg !5525
  %cmp36 = icmp ne i32 %call35, 0, !dbg !5526
  %conv37 = zext i1 %cmp36 to i32, !dbg !5526
  %call38 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1375, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.360, i32 0, i32 0), i32 %conv37), !dbg !5527
  %tobool39 = icmp ne i32 %call38, 0, !dbg !5529
  br i1 %tobool39, label %lor.lhs.false40, label %if.then49, !dbg !5530

lor.lhs.false40:                                  ; preds = %lor.lhs.false34
  %24 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5531
  %25 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5532
  %26 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !5533
  %call41 = call i32 @BN_add(%struct.bignum_st* %24, %struct.bignum_st* %25, %struct.bignum_st* %26), !dbg !5534
  %cmp42 = icmp ne i32 %call41, 0, !dbg !5535
  %conv43 = zext i1 %cmp42 to i32, !dbg !5535
  %call44 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1376, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.361, i32 0, i32 0), i32 %conv43), !dbg !5536
  %tobool45 = icmp ne i32 %call44, 0, !dbg !5537
  br i1 %tobool45, label %lor.lhs.false46, label %if.then49, !dbg !5538

lor.lhs.false46:                                  ; preds = %lor.lhs.false40
  %27 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5539
  %28 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5540
  %call47 = call i32 @equalBN(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.362, i32 0, i32 0), %struct.bignum_st* %27, %struct.bignum_st* %28), !dbg !5541
  %tobool48 = icmp ne i32 %call47, 0, !dbg !5541
  br i1 %tobool48, label %if.end50, label %if.then49, !dbg !5542

if.then49:                                        ; preds = %lor.lhs.false46, %lor.lhs.false40, %lor.lhs.false34, %lor.lhs.false31, %lor.lhs.false28, %if.end
  br label %err, !dbg !5543

if.end50:                                         ; preds = %lor.lhs.false46
  %29 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5544
  %call51 = call i64 @BN_get_word(%struct.bignum_st* %29), !dbg !5545
  store i64 %call51, i64* %b_word, align 8, !dbg !5546
  %30 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5547
  %call52 = call i32 @BN_is_negative(%struct.bignum_st* %30), !dbg !5549
  %tobool53 = icmp ne i32 %call52, 0, !dbg !5549
  br i1 %tobool53, label %if.end77, label %land.lhs.true, !dbg !5550

land.lhs.true:                                    ; preds = %if.end50
  %31 = load i64, i64* %b_word, align 8, !dbg !5551
  %cmp54 = icmp ne i64 %31, -1, !dbg !5553
  br i1 %cmp54, label %if.then56, label %if.end77, !dbg !5554

if.then56:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i64* %remainder_word, metadata !5555, metadata !134), !dbg !5557
  %32 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !5558
  %call57 = call i64 @BN_get_word(%struct.bignum_st* %32), !dbg !5559
  store i64 %call57, i64* %remainder_word, align 8, !dbg !5557
  %33 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5560
  %34 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5562
  %call58 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %33, %struct.bignum_st* %34), !dbg !5563
  %35 = bitcast %struct.bignum_st* %call58 to i8*, !dbg !5563
  %call59 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1389, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.266, i32 0, i32 0), i8* %35), !dbg !5564
  %tobool60 = icmp ne i32 %call59, 0, !dbg !5566
  br i1 %tobool60, label %if.end62, label %if.then61, !dbg !5567

if.then61:                                        ; preds = %if.then56
  br label %err, !dbg !5568

if.end62:                                         ; preds = %if.then56
  %36 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5569
  %37 = load i64, i64* %b_word, align 8, !dbg !5570
  %call63 = call i64 @BN_div_word(%struct.bignum_st* %36, i64 %37), !dbg !5571
  store i64 %call63, i64* %ret_word, align 8, !dbg !5572
  %38 = load i64, i64* %ret_word, align 8, !dbg !5573
  %39 = load i64, i64* %remainder_word, align 8, !dbg !5575
  %cmp64 = icmp ne i64 %38, %39, !dbg !5576
  br i1 %cmp64, label %if.then66, label %if.end67, !dbg !5577

if.then66:                                        ; preds = %if.end62
  call void (i8*, i32, i8*, ...) @test_error(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1398, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.363, i32 0, i32 0)), !dbg !5578
  br label %err, !dbg !5580

if.end67:                                         ; preds = %if.end62
  %40 = load %struct.bignum_st*, %struct.bignum_st** %quotient, align 8, !dbg !5581
  %41 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5583
  %call68 = call i32 @equalBN(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.364, i32 0, i32 0), %struct.bignum_st* %40, %struct.bignum_st* %41), !dbg !5584
  %tobool69 = icmp ne i32 %call68, 0, !dbg !5584
  br i1 %tobool69, label %if.end71, label %if.then70, !dbg !5585

if.then70:                                        ; preds = %if.end67
  br label %err, !dbg !5586

if.end71:                                         ; preds = %if.end67
  %42 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5587
  %43 = load i64, i64* %b_word, align 8, !dbg !5588
  %call72 = call i64 @BN_mod_word(%struct.bignum_st* %42, i64 %43), !dbg !5589
  store i64 %call72, i64* %ret_word, align 8, !dbg !5590
  %44 = load i64, i64* %ret_word, align 8, !dbg !5591
  %45 = load i64, i64* %remainder_word, align 8, !dbg !5593
  %cmp73 = icmp ne i64 %44, %45, !dbg !5594
  br i1 %cmp73, label %if.then75, label %if.end76, !dbg !5595

if.then75:                                        ; preds = %if.end71
  call void (i8*, i32, i8*, ...) @test_error(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1412, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.363, i32 0, i32 0)), !dbg !5596
  br label %err, !dbg !5598

if.end76:                                         ; preds = %if.end71
  br label %if.end77, !dbg !5599

if.end77:                                         ; preds = %if.end76, %land.lhs.true, %if.end50
  %46 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5600
  %call78 = call i32 @BN_is_negative(%struct.bignum_st* %46), !dbg !5602
  %tobool79 = icmp ne i32 %call78, 0, !dbg !5602
  br i1 %tobool79, label %if.end106, label %if.then80, !dbg !5603

if.then80:                                        ; preds = %if.end77
  %47 = load %struct.bignum_st*, %struct.bignum_st** %nnmod, align 8, !dbg !5604
  %48 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !5607
  %call81 = call %struct.bignum_st* @BN_copy(%struct.bignum_st* %47, %struct.bignum_st* %48), !dbg !5608
  %cmp82 = icmp ne %struct.bignum_st* %call81, null, !dbg !5609
  %conv83 = zext i1 %cmp82 to i32, !dbg !5609
  %call84 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1420, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.365, i32 0, i32 0), i32 %conv83), !dbg !5610
  %tobool85 = icmp ne i32 %call84, 0, !dbg !5612
  br i1 %tobool85, label %lor.lhs.false86, label %if.then104, !dbg !5613

lor.lhs.false86:                                  ; preds = %if.then80
  %49 = load %struct.bignum_st*, %struct.bignum_st** %nnmod, align 8, !dbg !5614
  %call87 = call i32 @BN_is_negative(%struct.bignum_st* %49), !dbg !5616
  %tobool88 = icmp ne i32 %call87, 0, !dbg !5616
  br i1 %tobool88, label %land.lhs.true89, label %lor.lhs.false95, !dbg !5617

land.lhs.true89:                                  ; preds = %lor.lhs.false86
  %50 = load %struct.bignum_st*, %struct.bignum_st** %nnmod, align 8, !dbg !5618
  %51 = load %struct.bignum_st*, %struct.bignum_st** %nnmod, align 8, !dbg !5619
  %52 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5620
  %call90 = call i32 @BN_add(%struct.bignum_st* %50, %struct.bignum_st* %51, %struct.bignum_st* %52), !dbg !5621
  %cmp91 = icmp ne i32 %call90, 0, !dbg !5622
  %conv92 = zext i1 %cmp91 to i32, !dbg !5622
  %call93 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1422, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.366, i32 0, i32 0), i32 %conv92), !dbg !5623
  %tobool94 = icmp ne i32 %call93, 0, !dbg !5625
  br i1 %tobool94, label %lor.lhs.false95, label %if.then104, !dbg !5626

lor.lhs.false95:                                  ; preds = %land.lhs.true89, %lor.lhs.false86
  %53 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5627
  %54 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5628
  %55 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5629
  %56 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5630
  %call96 = call i32 @BN_nnmod(%struct.bignum_st* %53, %struct.bignum_st* %54, %struct.bignum_st* %55, %struct.bignum_ctx* %56), !dbg !5631
  %cmp97 = icmp ne i32 %call96, 0, !dbg !5632
  %conv98 = zext i1 %cmp97 to i32, !dbg !5632
  %call99 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1423, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.367, i32 0, i32 0), i32 %conv98), !dbg !5633
  %tobool100 = icmp ne i32 %call99, 0, !dbg !5634
  br i1 %tobool100, label %lor.lhs.false101, label %if.then104, !dbg !5635

lor.lhs.false101:                                 ; preds = %lor.lhs.false95
  %57 = load %struct.bignum_st*, %struct.bignum_st** %nnmod, align 8, !dbg !5636
  %58 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5637
  %call102 = call i32 @equalBN(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.368, i32 0, i32 0), %struct.bignum_st* %57, %struct.bignum_st* %58), !dbg !5638
  %tobool103 = icmp ne i32 %call102, 0, !dbg !5638
  br i1 %tobool103, label %if.end105, label %if.then104, !dbg !5639

if.then104:                                       ; preds = %lor.lhs.false101, %lor.lhs.false95, %land.lhs.true89, %if.then80
  br label %err, !dbg !5641

if.end105:                                        ; preds = %lor.lhs.false101
  br label %if.end106, !dbg !5642

if.end106:                                        ; preds = %if.end105, %if.end77
  store i32 1, i32* %st, align 4, !dbg !5643
  br label %err, !dbg !5644

err:                                              ; preds = %if.end106, %if.then104, %if.then75, %if.then70, %if.then66, %if.then61, %if.then49, %if.then
  %59 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5645
  call void @BN_free(%struct.bignum_st* %59), !dbg !5646
  %60 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5647
  call void @BN_free(%struct.bignum_st* %60), !dbg !5648
  %61 = load %struct.bignum_st*, %struct.bignum_st** %quotient, align 8, !dbg !5649
  call void @BN_free(%struct.bignum_st* %61), !dbg !5650
  %62 = load %struct.bignum_st*, %struct.bignum_st** %remainder, align 8, !dbg !5651
  call void @BN_free(%struct.bignum_st* %62), !dbg !5652
  %63 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5653
  call void @BN_free(%struct.bignum_st* %63), !dbg !5654
  %64 = load %struct.bignum_st*, %struct.bignum_st** %ret2, align 8, !dbg !5655
  call void @BN_free(%struct.bignum_st* %64), !dbg !5656
  %65 = load %struct.bignum_st*, %struct.bignum_st** %nnmod, align 8, !dbg !5657
  call void @BN_free(%struct.bignum_st* %65), !dbg !5658
  %66 = load i32, i32* %st, align 4, !dbg !5659
  ret i32 %66, !dbg !5660
}

; Function Attrs: nounwind uwtable
define internal i32 @file_modmul(%struct.stanza_st* %s) #0 !dbg !5661 {
entry:
  %s.addr = alloca %struct.stanza_st*, align 8
  %a = alloca %struct.bignum_st*, align 8
  %b = alloca %struct.bignum_st*, align 8
  %m = alloca %struct.bignum_st*, align 8
  %mod_mul = alloca %struct.bignum_st*, align 8
  %ret = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  %mont = alloca %struct.bn_mont_ctx_st*, align 8
  %a_tmp = alloca %struct.bignum_st*, align 8
  %b_tmp = alloca %struct.bignum_st*, align 8
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !5662, metadata !134), !dbg !5663
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !5664, metadata !134), !dbg !5665
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !5665
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b, metadata !5666, metadata !134), !dbg !5667
  store %struct.bignum_st* null, %struct.bignum_st** %b, align 8, !dbg !5667
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %m, metadata !5668, metadata !134), !dbg !5669
  store %struct.bignum_st* null, %struct.bignum_st** %m, align 8, !dbg !5669
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %mod_mul, metadata !5670, metadata !134), !dbg !5671
  store %struct.bignum_st* null, %struct.bignum_st** %mod_mul, align 8, !dbg !5671
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret, metadata !5672, metadata !134), !dbg !5673
  store %struct.bignum_st* null, %struct.bignum_st** %ret, align 8, !dbg !5673
  call void @llvm.dbg.declare(metadata i32* %st, metadata !5674, metadata !134), !dbg !5675
  store i32 0, i32* %st, align 4, !dbg !5675
  %0 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5676
  %call = call %struct.bignum_st* @getBN(%struct.stanza_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.255, i32 0, i32 0)), !dbg !5678
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !5679
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !5680
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1445, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.254, i32 0, i32 0), i8* %1), !dbg !5681
  %tobool = icmp ne i32 %call1, 0, !dbg !5683
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5684

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5685
  %call2 = call %struct.bignum_st* @getBN(%struct.stanza_st* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.257, i32 0, i32 0)), !dbg !5687
  store %struct.bignum_st* %call2, %struct.bignum_st** %b, align 8, !dbg !5688
  %3 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !5689
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1446, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.256, i32 0, i32 0), i8* %3), !dbg !5690
  %tobool4 = icmp ne i32 %call3, 0, !dbg !5692
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !5693

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %4 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5694
  %call6 = call %struct.bignum_st* @getBN(%struct.stanza_st* %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.370, i32 0, i32 0)), !dbg !5695
  store %struct.bignum_st* %call6, %struct.bignum_st** %m, align 8, !dbg !5696
  %5 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !5697
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1447, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.369, i32 0, i32 0), i8* %5), !dbg !5698
  %tobool8 = icmp ne i32 %call7, 0, !dbg !5699
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !5700

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %6 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5701
  %call10 = call %struct.bignum_st* @getBN(%struct.stanza_st* %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.248, i32 0, i32 0)), !dbg !5702
  store %struct.bignum_st* %call10, %struct.bignum_st** %mod_mul, align 8, !dbg !5703
  %7 = bitcast %struct.bignum_st* %call10 to i8*, !dbg !5704
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1448, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.371, i32 0, i32 0), i8* %7), !dbg !5705
  %tobool12 = icmp ne i32 %call11, 0, !dbg !5706
  br i1 %tobool12, label %lor.lhs.false13, label %if.then, !dbg !5707

lor.lhs.false13:                                  ; preds = %lor.lhs.false9
  %call14 = call %struct.bignum_st* @BN_new(), !dbg !5708
  store %struct.bignum_st* %call14, %struct.bignum_st** %ret, align 8, !dbg !5709
  %8 = bitcast %struct.bignum_st* %call14 to i8*, !dbg !5710
  %call15 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1449, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.259, i32 0, i32 0), i8* %8), !dbg !5711
  %tobool16 = icmp ne i32 %call15, 0, !dbg !5712
  br i1 %tobool16, label %if.end, label %if.then, !dbg !5713

if.then:                                          ; preds = %lor.lhs.false13, %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !5715

if.end:                                           ; preds = %lor.lhs.false13
  %9 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5716
  %10 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5718
  %11 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5719
  %12 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !5720
  %13 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5721
  %call17 = call i32 @BN_mod_mul(%struct.bignum_st* %9, %struct.bignum_st* %10, %struct.bignum_st* %11, %struct.bignum_st* %12, %struct.bignum_ctx* %13), !dbg !5722
  %cmp = icmp ne i32 %call17, 0, !dbg !5723
  %conv = zext i1 %cmp to i32, !dbg !5723
  %call18 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1452, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.372, i32 0, i32 0), i32 %conv), !dbg !5724
  %tobool19 = icmp ne i32 %call18, 0, !dbg !5726
  br i1 %tobool19, label %lor.lhs.false20, label %if.then23, !dbg !5727

lor.lhs.false20:                                  ; preds = %if.end
  %14 = load %struct.bignum_st*, %struct.bignum_st** %mod_mul, align 8, !dbg !5728
  %15 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5730
  %call21 = call i32 @equalBN(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.373, i32 0, i32 0), %struct.bignum_st* %14, %struct.bignum_st* %15), !dbg !5731
  %tobool22 = icmp ne i32 %call21, 0, !dbg !5731
  br i1 %tobool22, label %if.end24, label %if.then23, !dbg !5732

if.then23:                                        ; preds = %lor.lhs.false20, %if.end
  br label %err, !dbg !5733

if.end24:                                         ; preds = %lor.lhs.false20
  %16 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !5734
  %call25 = call i32 @BN_is_odd(%struct.bignum_st* %16), !dbg !5736
  %tobool26 = icmp ne i32 %call25, 0, !dbg !5736
  br i1 %tobool26, label %if.then27, label %if.end90, !dbg !5737

if.then27:                                        ; preds = %if.end24
  call void @llvm.dbg.declare(metadata %struct.bn_mont_ctx_st** %mont, metadata !5738, metadata !134), !dbg !5740
  %call28 = call %struct.bn_mont_ctx_st* @BN_MONT_CTX_new(), !dbg !5741
  store %struct.bn_mont_ctx_st* %call28, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !5740
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a_tmp, metadata !5742, metadata !134), !dbg !5743
  %call29 = call %struct.bignum_st* @BN_new(), !dbg !5744
  store %struct.bignum_st* %call29, %struct.bignum_st** %a_tmp, align 8, !dbg !5743
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b_tmp, metadata !5745, metadata !134), !dbg !5746
  %call30 = call %struct.bignum_st* @BN_new(), !dbg !5747
  store %struct.bignum_st* %call30, %struct.bignum_st** %b_tmp, align 8, !dbg !5746
  %17 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !5748
  %cmp31 = icmp eq %struct.bn_mont_ctx_st* %17, null, !dbg !5750
  br i1 %cmp31, label %if.then84, label %lor.lhs.false33, !dbg !5751

lor.lhs.false33:                                  ; preds = %if.then27
  %18 = load %struct.bignum_st*, %struct.bignum_st** %a_tmp, align 8, !dbg !5752
  %cmp34 = icmp eq %struct.bignum_st* %18, null, !dbg !5754
  br i1 %cmp34, label %if.then84, label %lor.lhs.false36, !dbg !5755

lor.lhs.false36:                                  ; preds = %lor.lhs.false33
  %19 = load %struct.bignum_st*, %struct.bignum_st** %b_tmp, align 8, !dbg !5756
  %cmp37 = icmp eq %struct.bignum_st* %19, null, !dbg !5758
  br i1 %cmp37, label %if.then84, label %lor.lhs.false39, !dbg !5759

lor.lhs.false39:                                  ; preds = %lor.lhs.false36
  %20 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !5760
  %21 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !5761
  %22 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5762
  %call40 = call i32 @BN_MONT_CTX_set(%struct.bn_mont_ctx_st* %20, %struct.bignum_st* %21, %struct.bignum_ctx* %22), !dbg !5763
  %cmp41 = icmp ne i32 %call40, 0, !dbg !5764
  %conv42 = zext i1 %cmp41 to i32, !dbg !5764
  %call43 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1463, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.374, i32 0, i32 0), i32 %conv42), !dbg !5765
  %tobool44 = icmp ne i32 %call43, 0, !dbg !5767
  br i1 %tobool44, label %lor.lhs.false45, label %if.then84, !dbg !5768

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %23 = load %struct.bignum_st*, %struct.bignum_st** %a_tmp, align 8, !dbg !5769
  %24 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5770
  %25 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !5771
  %26 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5772
  %call46 = call i32 @BN_nnmod(%struct.bignum_st* %23, %struct.bignum_st* %24, %struct.bignum_st* %25, %struct.bignum_ctx* %26), !dbg !5773
  %cmp47 = icmp ne i32 %call46, 0, !dbg !5774
  %conv48 = zext i1 %cmp47 to i32, !dbg !5774
  %call49 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1464, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.375, i32 0, i32 0), i32 %conv48), !dbg !5775
  %tobool50 = icmp ne i32 %call49, 0, !dbg !5776
  br i1 %tobool50, label %lor.lhs.false51, label %if.then84, !dbg !5777

lor.lhs.false51:                                  ; preds = %lor.lhs.false45
  %27 = load %struct.bignum_st*, %struct.bignum_st** %b_tmp, align 8, !dbg !5778
  %28 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5779
  %29 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !5780
  %30 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5781
  %call52 = call i32 @BN_nnmod(%struct.bignum_st* %27, %struct.bignum_st* %28, %struct.bignum_st* %29, %struct.bignum_ctx* %30), !dbg !5782
  %cmp53 = icmp ne i32 %call52, 0, !dbg !5783
  %conv54 = zext i1 %cmp53 to i32, !dbg !5783
  %call55 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1465, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.376, i32 0, i32 0), i32 %conv54), !dbg !5784
  %tobool56 = icmp ne i32 %call55, 0, !dbg !5785
  br i1 %tobool56, label %lor.lhs.false57, label %if.then84, !dbg !5786

lor.lhs.false57:                                  ; preds = %lor.lhs.false51
  %31 = load %struct.bignum_st*, %struct.bignum_st** %a_tmp, align 8, !dbg !5787
  %32 = load %struct.bignum_st*, %struct.bignum_st** %a_tmp, align 8, !dbg !5788
  %33 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !5789
  %34 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5790
  %call58 = call i32 @BN_to_montgomery(%struct.bignum_st* %31, %struct.bignum_st* %32, %struct.bn_mont_ctx_st* %33, %struct.bignum_ctx* %34), !dbg !5791
  %cmp59 = icmp ne i32 %call58, 0, !dbg !5792
  %conv60 = zext i1 %cmp59 to i32, !dbg !5792
  %call61 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1466, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.377, i32 0, i32 0), i32 %conv60), !dbg !5793
  %tobool62 = icmp ne i32 %call61, 0, !dbg !5794
  br i1 %tobool62, label %lor.lhs.false63, label %if.then84, !dbg !5795

lor.lhs.false63:                                  ; preds = %lor.lhs.false57
  %35 = load %struct.bignum_st*, %struct.bignum_st** %b_tmp, align 8, !dbg !5796
  %36 = load %struct.bignum_st*, %struct.bignum_st** %b_tmp, align 8, !dbg !5797
  %37 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !5798
  %38 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5799
  %call64 = call i32 @BN_to_montgomery(%struct.bignum_st* %35, %struct.bignum_st* %36, %struct.bn_mont_ctx_st* %37, %struct.bignum_ctx* %38), !dbg !5800
  %cmp65 = icmp ne i32 %call64, 0, !dbg !5801
  %conv66 = zext i1 %cmp65 to i32, !dbg !5801
  %call67 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1467, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.378, i32 0, i32 0), i32 %conv66), !dbg !5802
  %tobool68 = icmp ne i32 %call67, 0, !dbg !5803
  br i1 %tobool68, label %lor.lhs.false69, label %if.then84, !dbg !5804

lor.lhs.false69:                                  ; preds = %lor.lhs.false63
  %39 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5805
  %40 = load %struct.bignum_st*, %struct.bignum_st** %a_tmp, align 8, !dbg !5806
  %41 = load %struct.bignum_st*, %struct.bignum_st** %b_tmp, align 8, !dbg !5807
  %42 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !5808
  %43 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5809
  %call70 = call i32 @BN_mod_mul_montgomery(%struct.bignum_st* %39, %struct.bignum_st* %40, %struct.bignum_st* %41, %struct.bn_mont_ctx_st* %42, %struct.bignum_ctx* %43), !dbg !5810
  %cmp71 = icmp ne i32 %call70, 0, !dbg !5811
  %conv72 = zext i1 %cmp71 to i32, !dbg !5811
  %call73 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1469, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.379, i32 0, i32 0), i32 %conv72), !dbg !5812
  %tobool74 = icmp ne i32 %call73, 0, !dbg !5813
  br i1 %tobool74, label %lor.lhs.false75, label %if.then84, !dbg !5814

lor.lhs.false75:                                  ; preds = %lor.lhs.false69
  %44 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5815
  %45 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5816
  %46 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !5817
  %47 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5818
  %call76 = call i32 @BN_from_montgomery(%struct.bignum_st* %44, %struct.bignum_st* %45, %struct.bn_mont_ctx_st* %46, %struct.bignum_ctx* %47), !dbg !5819
  %cmp77 = icmp ne i32 %call76, 0, !dbg !5820
  %conv78 = zext i1 %cmp77 to i32, !dbg !5820
  %call79 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1470, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.380, i32 0, i32 0), i32 %conv78), !dbg !5821
  %tobool80 = icmp ne i32 %call79, 0, !dbg !5822
  br i1 %tobool80, label %lor.lhs.false81, label %if.then84, !dbg !5823

lor.lhs.false81:                                  ; preds = %lor.lhs.false75
  %48 = load %struct.bignum_st*, %struct.bignum_st** %mod_mul, align 8, !dbg !5824
  %49 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5825
  %call82 = call i32 @equalBN(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.381, i32 0, i32 0), %struct.bignum_st* %48, %struct.bignum_st* %49), !dbg !5826
  %tobool83 = icmp ne i32 %call82, 0, !dbg !5826
  br i1 %tobool83, label %if.else, label %if.then84, !dbg !5827

if.then84:                                        ; preds = %lor.lhs.false81, %lor.lhs.false75, %lor.lhs.false69, %lor.lhs.false63, %lor.lhs.false57, %lor.lhs.false51, %lor.lhs.false45, %lor.lhs.false39, %lor.lhs.false36, %lor.lhs.false33, %if.then27
  store i32 0, i32* %st, align 4, !dbg !5829
  br label %if.end85, !dbg !5830

if.else:                                          ; preds = %lor.lhs.false81
  store i32 1, i32* %st, align 4, !dbg !5831
  br label %if.end85

if.end85:                                         ; preds = %if.else, %if.then84
  %50 = load %struct.bn_mont_ctx_st*, %struct.bn_mont_ctx_st** %mont, align 8, !dbg !5832
  call void @BN_MONT_CTX_free(%struct.bn_mont_ctx_st* %50), !dbg !5833
  %51 = load %struct.bignum_st*, %struct.bignum_st** %a_tmp, align 8, !dbg !5834
  call void @BN_free(%struct.bignum_st* %51), !dbg !5835
  %52 = load %struct.bignum_st*, %struct.bignum_st** %b_tmp, align 8, !dbg !5836
  call void @BN_free(%struct.bignum_st* %52), !dbg !5837
  %53 = load i32, i32* %st, align 4, !dbg !5838
  %cmp86 = icmp eq i32 %53, 0, !dbg !5840
  br i1 %cmp86, label %if.then88, label %if.end89, !dbg !5841

if.then88:                                        ; preds = %if.end85
  br label %err, !dbg !5842

if.end89:                                         ; preds = %if.end85
  br label %if.end90, !dbg !5843

if.end90:                                         ; preds = %if.end89, %if.end24
  store i32 1, i32* %st, align 4, !dbg !5844
  br label %err, !dbg !5845

err:                                              ; preds = %if.end90, %if.then88, %if.then23, %if.then
  %54 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5846
  call void @BN_free(%struct.bignum_st* %54), !dbg !5847
  %55 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5848
  call void @BN_free(%struct.bignum_st* %55), !dbg !5849
  %56 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !5850
  call void @BN_free(%struct.bignum_st* %56), !dbg !5851
  %57 = load %struct.bignum_st*, %struct.bignum_st** %mod_mul, align 8, !dbg !5852
  call void @BN_free(%struct.bignum_st* %57), !dbg !5853
  %58 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5854
  call void @BN_free(%struct.bignum_st* %58), !dbg !5855
  %59 = load i32, i32* %st, align 4, !dbg !5856
  ret i32 %59, !dbg !5857
}

; Function Attrs: nounwind uwtable
define internal i32 @file_modexp(%struct.stanza_st* %s) #0 !dbg !5858 {
entry:
  %s.addr = alloca %struct.stanza_st*, align 8
  %a = alloca %struct.bignum_st*, align 8
  %e = alloca %struct.bignum_st*, align 8
  %m = alloca %struct.bignum_st*, align 8
  %mod_exp = alloca %struct.bignum_st*, align 8
  %ret = alloca %struct.bignum_st*, align 8
  %b = alloca %struct.bignum_st*, align 8
  %c = alloca %struct.bignum_st*, align 8
  %d = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !5859, metadata !134), !dbg !5860
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !5861, metadata !134), !dbg !5862
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !5862
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %e, metadata !5863, metadata !134), !dbg !5864
  store %struct.bignum_st* null, %struct.bignum_st** %e, align 8, !dbg !5864
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %m, metadata !5865, metadata !134), !dbg !5866
  store %struct.bignum_st* null, %struct.bignum_st** %m, align 8, !dbg !5866
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %mod_exp, metadata !5867, metadata !134), !dbg !5868
  store %struct.bignum_st* null, %struct.bignum_st** %mod_exp, align 8, !dbg !5868
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret, metadata !5869, metadata !134), !dbg !5870
  store %struct.bignum_st* null, %struct.bignum_st** %ret, align 8, !dbg !5870
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %b, metadata !5871, metadata !134), !dbg !5872
  store %struct.bignum_st* null, %struct.bignum_st** %b, align 8, !dbg !5872
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %c, metadata !5873, metadata !134), !dbg !5874
  store %struct.bignum_st* null, %struct.bignum_st** %c, align 8, !dbg !5874
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %d, metadata !5875, metadata !134), !dbg !5876
  store %struct.bignum_st* null, %struct.bignum_st** %d, align 8, !dbg !5876
  call void @llvm.dbg.declare(metadata i32* %st, metadata !5877, metadata !134), !dbg !5878
  store i32 0, i32* %st, align 4, !dbg !5878
  %0 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5879
  %call = call %struct.bignum_st* @getBN(%struct.stanza_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.255, i32 0, i32 0)), !dbg !5881
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !5882
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !5883
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1498, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.254, i32 0, i32 0), i8* %1), !dbg !5884
  %tobool = icmp ne i32 %call1, 0, !dbg !5886
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5887

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5888
  %call2 = call %struct.bignum_st* @getBN(%struct.stanza_st* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.383, i32 0, i32 0)), !dbg !5890
  store %struct.bignum_st* %call2, %struct.bignum_st** %e, align 8, !dbg !5891
  %3 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !5892
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1499, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.382, i32 0, i32 0), i8* %3), !dbg !5893
  %tobool4 = icmp ne i32 %call3, 0, !dbg !5895
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !5896

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %4 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5897
  %call6 = call %struct.bignum_st* @getBN(%struct.stanza_st* %4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.370, i32 0, i32 0)), !dbg !5898
  store %struct.bignum_st* %call6, %struct.bignum_st** %m, align 8, !dbg !5899
  %5 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !5900
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1500, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.369, i32 0, i32 0), i8* %5), !dbg !5901
  %tobool8 = icmp ne i32 %call7, 0, !dbg !5902
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !5903

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %6 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !5904
  %call10 = call %struct.bignum_st* @getBN(%struct.stanza_st* %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.249, i32 0, i32 0)), !dbg !5905
  store %struct.bignum_st* %call10, %struct.bignum_st** %mod_exp, align 8, !dbg !5906
  %7 = bitcast %struct.bignum_st* %call10 to i8*, !dbg !5907
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1501, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.384, i32 0, i32 0), i8* %7), !dbg !5908
  %tobool12 = icmp ne i32 %call11, 0, !dbg !5909
  br i1 %tobool12, label %lor.lhs.false13, label %if.then, !dbg !5910

lor.lhs.false13:                                  ; preds = %lor.lhs.false9
  %call14 = call %struct.bignum_st* @BN_new(), !dbg !5911
  store %struct.bignum_st* %call14, %struct.bignum_st** %ret, align 8, !dbg !5912
  %8 = bitcast %struct.bignum_st* %call14 to i8*, !dbg !5913
  %call15 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1502, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.259, i32 0, i32 0), i8* %8), !dbg !5914
  %tobool16 = icmp ne i32 %call15, 0, !dbg !5915
  br i1 %tobool16, label %lor.lhs.false17, label %if.then, !dbg !5916

lor.lhs.false17:                                  ; preds = %lor.lhs.false13
  %call18 = call %struct.bignum_st* @BN_new(), !dbg !5917
  store %struct.bignum_st* %call18, %struct.bignum_st** %d, align 8, !dbg !5918
  %9 = bitcast %struct.bignum_st* %call18 to i8*, !dbg !5919
  %call19 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1503, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.52, i32 0, i32 0), i8* %9), !dbg !5920
  %tobool20 = icmp ne i32 %call19, 0, !dbg !5921
  br i1 %tobool20, label %if.end, label %if.then, !dbg !5922

if.then:                                          ; preds = %lor.lhs.false17, %lor.lhs.false13, %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !5924

if.end:                                           ; preds = %lor.lhs.false17
  %10 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5925
  %11 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5927
  %12 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !5928
  %13 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !5929
  %14 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5930
  %call21 = call i32 @BN_mod_exp(%struct.bignum_st* %10, %struct.bignum_st* %11, %struct.bignum_st* %12, %struct.bignum_st* %13, %struct.bignum_ctx* %14), !dbg !5931
  %cmp = icmp ne i32 %call21, 0, !dbg !5932
  %conv = zext i1 %cmp to i32, !dbg !5932
  %call22 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1506, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.385, i32 0, i32 0), i32 %conv), !dbg !5933
  %tobool23 = icmp ne i32 %call22, 0, !dbg !5935
  br i1 %tobool23, label %lor.lhs.false24, label %if.then27, !dbg !5936

lor.lhs.false24:                                  ; preds = %if.end
  %15 = load %struct.bignum_st*, %struct.bignum_st** %mod_exp, align 8, !dbg !5937
  %16 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5939
  %call25 = call i32 @equalBN(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.386, i32 0, i32 0), %struct.bignum_st* %15, %struct.bignum_st* %16), !dbg !5940
  %tobool26 = icmp ne i32 %call25, 0, !dbg !5940
  br i1 %tobool26, label %if.end28, label %if.then27, !dbg !5941

if.then27:                                        ; preds = %lor.lhs.false24, %if.end
  br label %err, !dbg !5942

if.end28:                                         ; preds = %lor.lhs.false24
  %17 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !5943
  %call29 = call i32 @BN_is_odd(%struct.bignum_st* %17), !dbg !5945
  %tobool30 = icmp ne i32 %call29, 0, !dbg !5945
  br i1 %tobool30, label %if.then31, label %if.end51, !dbg !5946

if.then31:                                        ; preds = %if.end28
  %18 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5947
  %19 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5950
  %20 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !5951
  %21 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !5952
  %22 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5953
  %call32 = call i32 @BN_mod_exp_mont(%struct.bignum_st* %18, %struct.bignum_st* %19, %struct.bignum_st* %20, %struct.bignum_st* %21, %struct.bignum_ctx* %22, %struct.bn_mont_ctx_st* null), !dbg !5954
  %cmp33 = icmp ne i32 %call32, 0, !dbg !5955
  %conv34 = zext i1 %cmp33 to i32, !dbg !5955
  %call35 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1511, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.387, i32 0, i32 0), i32 %conv34), !dbg !5956
  %tobool36 = icmp ne i32 %call35, 0, !dbg !5958
  br i1 %tobool36, label %lor.lhs.false37, label %if.then49, !dbg !5959

lor.lhs.false37:                                  ; preds = %if.then31
  %23 = load %struct.bignum_st*, %struct.bignum_st** %mod_exp, align 8, !dbg !5960
  %24 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5962
  %call38 = call i32 @equalBN(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.388, i32 0, i32 0), %struct.bignum_st* %23, %struct.bignum_st* %24), !dbg !5963
  %tobool39 = icmp ne i32 %call38, 0, !dbg !5963
  br i1 %tobool39, label %lor.lhs.false40, label %if.then49, !dbg !5964

lor.lhs.false40:                                  ; preds = %lor.lhs.false37
  %25 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5965
  %26 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5966
  %27 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !5967
  %28 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !5968
  %29 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5969
  %call41 = call i32 @BN_mod_exp_mont_consttime(%struct.bignum_st* %25, %struct.bignum_st* %26, %struct.bignum_st* %27, %struct.bignum_st* %28, %struct.bignum_ctx* %29, %struct.bn_mont_ctx_st* null), !dbg !5970
  %cmp42 = icmp ne i32 %call41, 0, !dbg !5971
  %conv43 = zext i1 %cmp42 to i32, !dbg !5971
  %call44 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1514, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.389, i32 0, i32 0), i32 %conv43), !dbg !5972
  %tobool45 = icmp ne i32 %call44, 0, !dbg !5974
  br i1 %tobool45, label %lor.lhs.false46, label %if.then49, !dbg !5975

lor.lhs.false46:                                  ; preds = %lor.lhs.false40
  %30 = load %struct.bignum_st*, %struct.bignum_st** %mod_exp, align 8, !dbg !5976
  %31 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !5977
  %call47 = call i32 @equalBN(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.390, i32 0, i32 0), %struct.bignum_st* %30, %struct.bignum_st* %31), !dbg !5978
  %tobool48 = icmp ne i32 %call47, 0, !dbg !5978
  br i1 %tobool48, label %if.end50, label %if.then49, !dbg !5979

if.then49:                                        ; preds = %lor.lhs.false46, %lor.lhs.false40, %lor.lhs.false37, %if.then31
  br label %err, !dbg !5981

if.end50:                                         ; preds = %lor.lhs.false46
  br label %if.end51, !dbg !5982

if.end51:                                         ; preds = %if.end50, %if.end28
  %call52 = call i32 @BN_hex2bn(%struct.bignum_st** %a, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.391, i32 0, i32 0)), !dbg !5983
  %call53 = call i32 @BN_hex2bn(%struct.bignum_st** %b, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.392, i32 0, i32 0)), !dbg !5984
  %call54 = call i32 @BN_hex2bn(%struct.bignum_st** %c, i8* getelementptr inbounds ([379 x i8], [379 x i8]* @.str.393, i32 0, i32 0)), !dbg !5985
  %32 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !5986
  %33 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !5988
  %34 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !5989
  %35 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !5990
  %36 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !5991
  %call55 = call i32 @BN_mod_exp(%struct.bignum_st* %32, %struct.bignum_st* %33, %struct.bignum_st* %34, %struct.bignum_st* %35, %struct.bignum_ctx* %36), !dbg !5992
  %cmp56 = icmp ne i32 %call55, 0, !dbg !5993
  %conv57 = zext i1 %cmp56 to i32, !dbg !5993
  %call58 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1529, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.394, i32 0, i32 0), i32 %conv57), !dbg !5994
  %tobool59 = icmp ne i32 %call58, 0, !dbg !5996
  br i1 %tobool59, label %lor.lhs.false60, label %if.then69, !dbg !5997

lor.lhs.false60:                                  ; preds = %if.end51
  %37 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !5998
  %38 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !6000
  %39 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !6001
  %40 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !6002
  %call61 = call i32 @BN_mul(%struct.bignum_st* %37, %struct.bignum_st* %38, %struct.bignum_st* %39, %struct.bignum_ctx* %40), !dbg !6003
  %cmp62 = icmp ne i32 %call61, 0, !dbg !6004
  %conv63 = zext i1 %cmp62 to i32, !dbg !6004
  %call64 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1530, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.395, i32 0, i32 0), i32 %conv63), !dbg !6005
  %tobool65 = icmp ne i32 %call64, 0, !dbg !6007
  br i1 %tobool65, label %lor.lhs.false66, label %if.then69, !dbg !6008

lor.lhs.false66:                                  ; preds = %lor.lhs.false60
  %41 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !6009
  %42 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !6010
  %call67 = call i32 @test_BN_eq(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1531, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.56, i32 0, i32 0), %struct.bignum_st* %41, %struct.bignum_st* %42), !dbg !6011
  %tobool68 = icmp ne i32 %call67, 0, !dbg !6011
  br i1 %tobool68, label %if.end70, label %if.then69, !dbg !6012

if.then69:                                        ; preds = %lor.lhs.false66, %lor.lhs.false60, %if.end51
  br label %err, !dbg !6013

if.end70:                                         ; preds = %lor.lhs.false66
  store i32 1, i32* %st, align 4, !dbg !6014
  br label %err, !dbg !6015

err:                                              ; preds = %if.end70, %if.then69, %if.then49, %if.then27, %if.then
  %43 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !6016
  call void @BN_free(%struct.bignum_st* %43), !dbg !6017
  %44 = load %struct.bignum_st*, %struct.bignum_st** %b, align 8, !dbg !6018
  call void @BN_free(%struct.bignum_st* %44), !dbg !6019
  %45 = load %struct.bignum_st*, %struct.bignum_st** %c, align 8, !dbg !6020
  call void @BN_free(%struct.bignum_st* %45), !dbg !6021
  %46 = load %struct.bignum_st*, %struct.bignum_st** %d, align 8, !dbg !6022
  call void @BN_free(%struct.bignum_st* %46), !dbg !6023
  %47 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !6024
  call void @BN_free(%struct.bignum_st* %47), !dbg !6025
  %48 = load %struct.bignum_st*, %struct.bignum_st** %m, align 8, !dbg !6026
  call void @BN_free(%struct.bignum_st* %48), !dbg !6027
  %49 = load %struct.bignum_st*, %struct.bignum_st** %mod_exp, align 8, !dbg !6028
  call void @BN_free(%struct.bignum_st* %49), !dbg !6029
  %50 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !6030
  call void @BN_free(%struct.bignum_st* %50), !dbg !6031
  %51 = load i32, i32* %st, align 4, !dbg !6032
  ret i32 %51, !dbg !6033
}

; Function Attrs: nounwind uwtable
define internal i32 @file_exp(%struct.stanza_st* %s) #0 !dbg !6034 {
entry:
  %s.addr = alloca %struct.stanza_st*, align 8
  %a = alloca %struct.bignum_st*, align 8
  %e = alloca %struct.bignum_st*, align 8
  %exp = alloca %struct.bignum_st*, align 8
  %ret = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !6035, metadata !134), !dbg !6036
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !6037, metadata !134), !dbg !6038
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !6038
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %e, metadata !6039, metadata !134), !dbg !6040
  store %struct.bignum_st* null, %struct.bignum_st** %e, align 8, !dbg !6040
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %exp, metadata !6041, metadata !134), !dbg !6042
  store %struct.bignum_st* null, %struct.bignum_st** %exp, align 8, !dbg !6042
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret, metadata !6043, metadata !134), !dbg !6044
  store %struct.bignum_st* null, %struct.bignum_st** %ret, align 8, !dbg !6044
  call void @llvm.dbg.declare(metadata i32* %st, metadata !6045, metadata !134), !dbg !6046
  store i32 0, i32* %st, align 4, !dbg !6046
  %0 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !6047
  %call = call %struct.bignum_st* @getBN(%struct.stanza_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.255, i32 0, i32 0)), !dbg !6049
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !6050
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !6051
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1552, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.254, i32 0, i32 0), i8* %1), !dbg !6052
  %tobool = icmp ne i32 %call1, 0, !dbg !6054
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !6055

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !6056
  %call2 = call %struct.bignum_st* @getBN(%struct.stanza_st* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.383, i32 0, i32 0)), !dbg !6058
  store %struct.bignum_st* %call2, %struct.bignum_st** %e, align 8, !dbg !6059
  %3 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !6060
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1553, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.382, i32 0, i32 0), i8* %3), !dbg !6061
  %tobool4 = icmp ne i32 %call3, 0, !dbg !6063
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !6064

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %4 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !6065
  %call6 = call %struct.bignum_st* @getBN(%struct.stanza_st* %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.250, i32 0, i32 0)), !dbg !6066
  store %struct.bignum_st* %call6, %struct.bignum_st** %exp, align 8, !dbg !6067
  %5 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !6068
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1554, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.396, i32 0, i32 0), i8* %5), !dbg !6069
  %tobool8 = icmp ne i32 %call7, 0, !dbg !6070
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !6071

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %call10 = call %struct.bignum_st* @BN_new(), !dbg !6072
  store %struct.bignum_st* %call10, %struct.bignum_st** %ret, align 8, !dbg !6073
  %6 = bitcast %struct.bignum_st* %call10 to i8*, !dbg !6074
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1555, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.259, i32 0, i32 0), i8* %6), !dbg !6075
  %tobool12 = icmp ne i32 %call11, 0, !dbg !6076
  br i1 %tobool12, label %if.end, label %if.then, !dbg !6077

if.then:                                          ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !6079

if.end:                                           ; preds = %lor.lhs.false9
  %7 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !6080
  %8 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !6082
  %9 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !6083
  %10 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !6084
  %call13 = call i32 @BN_exp(%struct.bignum_st* %7, %struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_ctx* %10), !dbg !6085
  %cmp = icmp ne i32 %call13, 0, !dbg !6086
  %conv = zext i1 %cmp to i32, !dbg !6086
  %call14 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1558, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.397, i32 0, i32 0), i32 %conv), !dbg !6087
  %tobool15 = icmp ne i32 %call14, 0, !dbg !6089
  br i1 %tobool15, label %lor.lhs.false16, label %if.then19, !dbg !6090

lor.lhs.false16:                                  ; preds = %if.end
  %11 = load %struct.bignum_st*, %struct.bignum_st** %exp, align 8, !dbg !6091
  %12 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !6093
  %call17 = call i32 @equalBN(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.398, i32 0, i32 0), %struct.bignum_st* %11, %struct.bignum_st* %12), !dbg !6094
  %tobool18 = icmp ne i32 %call17, 0, !dbg !6094
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !6095

if.then19:                                        ; preds = %lor.lhs.false16, %if.end
  br label %err, !dbg !6096

if.end20:                                         ; preds = %lor.lhs.false16
  store i32 1, i32* %st, align 4, !dbg !6097
  br label %err, !dbg !6098

err:                                              ; preds = %if.end20, %if.then19, %if.then
  %13 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !6099
  call void @BN_free(%struct.bignum_st* %13), !dbg !6100
  %14 = load %struct.bignum_st*, %struct.bignum_st** %e, align 8, !dbg !6101
  call void @BN_free(%struct.bignum_st* %14), !dbg !6102
  %15 = load %struct.bignum_st*, %struct.bignum_st** %exp, align 8, !dbg !6103
  call void @BN_free(%struct.bignum_st* %15), !dbg !6104
  %16 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !6105
  call void @BN_free(%struct.bignum_st* %16), !dbg !6106
  %17 = load i32, i32* %st, align 4, !dbg !6107
  ret i32 %17, !dbg !6108
}

; Function Attrs: nounwind uwtable
define internal i32 @file_modsqrt(%struct.stanza_st* %s) #0 !dbg !6109 {
entry:
  %s.addr = alloca %struct.stanza_st*, align 8
  %a = alloca %struct.bignum_st*, align 8
  %p = alloca %struct.bignum_st*, align 8
  %mod_sqrt = alloca %struct.bignum_st*, align 8
  %ret = alloca %struct.bignum_st*, align 8
  %ret2 = alloca %struct.bignum_st*, align 8
  %st = alloca i32, align 4
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !6110, metadata !134), !dbg !6111
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %a, metadata !6112, metadata !134), !dbg !6113
  store %struct.bignum_st* null, %struct.bignum_st** %a, align 8, !dbg !6113
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %p, metadata !6114, metadata !134), !dbg !6115
  store %struct.bignum_st* null, %struct.bignum_st** %p, align 8, !dbg !6115
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %mod_sqrt, metadata !6116, metadata !134), !dbg !6117
  store %struct.bignum_st* null, %struct.bignum_st** %mod_sqrt, align 8, !dbg !6117
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret, metadata !6118, metadata !134), !dbg !6119
  store %struct.bignum_st* null, %struct.bignum_st** %ret, align 8, !dbg !6119
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret2, metadata !6120, metadata !134), !dbg !6121
  store %struct.bignum_st* null, %struct.bignum_st** %ret2, align 8, !dbg !6121
  call void @llvm.dbg.declare(metadata i32* %st, metadata !6122, metadata !134), !dbg !6123
  store i32 0, i32* %st, align 4, !dbg !6123
  %0 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !6124
  %call = call %struct.bignum_st* @getBN(%struct.stanza_st* %0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.255, i32 0, i32 0)), !dbg !6126
  store %struct.bignum_st* %call, %struct.bignum_st** %a, align 8, !dbg !6127
  %1 = bitcast %struct.bignum_st* %call to i8*, !dbg !6128
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1576, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.254, i32 0, i32 0), i8* %1), !dbg !6129
  %tobool = icmp ne i32 %call1, 0, !dbg !6131
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !6132

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !6133
  %call2 = call %struct.bignum_st* @getBN(%struct.stanza_st* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.400, i32 0, i32 0)), !dbg !6135
  store %struct.bignum_st* %call2, %struct.bignum_st** %p, align 8, !dbg !6136
  %3 = bitcast %struct.bignum_st* %call2 to i8*, !dbg !6137
  %call3 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1577, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.399, i32 0, i32 0), i8* %3), !dbg !6138
  %tobool4 = icmp ne i32 %call3, 0, !dbg !6140
  br i1 %tobool4, label %lor.lhs.false5, label %if.then, !dbg !6141

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %4 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !6142
  %call6 = call %struct.bignum_st* @getBN(%struct.stanza_st* %4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.251, i32 0, i32 0)), !dbg !6143
  store %struct.bignum_st* %call6, %struct.bignum_st** %mod_sqrt, align 8, !dbg !6144
  %5 = bitcast %struct.bignum_st* %call6 to i8*, !dbg !6145
  %call7 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1578, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.401, i32 0, i32 0), i8* %5), !dbg !6146
  %tobool8 = icmp ne i32 %call7, 0, !dbg !6147
  br i1 %tobool8, label %lor.lhs.false9, label %if.then, !dbg !6148

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %call10 = call %struct.bignum_st* @BN_new(), !dbg !6149
  store %struct.bignum_st* %call10, %struct.bignum_st** %ret, align 8, !dbg !6150
  %6 = bitcast %struct.bignum_st* %call10 to i8*, !dbg !6151
  %call11 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1579, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.259, i32 0, i32 0), i8* %6), !dbg !6152
  %tobool12 = icmp ne i32 %call11, 0, !dbg !6153
  br i1 %tobool12, label %lor.lhs.false13, label %if.then, !dbg !6154

lor.lhs.false13:                                  ; preds = %lor.lhs.false9
  %call14 = call %struct.bignum_st* @BN_new(), !dbg !6155
  store %struct.bignum_st* %call14, %struct.bignum_st** %ret2, align 8, !dbg !6156
  %7 = bitcast %struct.bignum_st* %call14 to i8*, !dbg !6157
  %call15 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1580, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.355, i32 0, i32 0), i8* %7), !dbg !6158
  %tobool16 = icmp ne i32 %call15, 0, !dbg !6159
  br i1 %tobool16, label %if.end, label %if.then, !dbg !6160

if.then:                                          ; preds = %lor.lhs.false13, %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %entry
  br label %err, !dbg !6162

if.end:                                           ; preds = %lor.lhs.false13
  %8 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !6163
  %9 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !6165
  %10 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !6166
  %11 = load %struct.bignum_ctx*, %struct.bignum_ctx** @ctx, align 8, !dbg !6167
  %call17 = call %struct.bignum_st* @BN_mod_sqrt(%struct.bignum_st* %8, %struct.bignum_st* %9, %struct.bignum_st* %10, %struct.bignum_ctx* %11), !dbg !6168
  %cmp = icmp ne %struct.bignum_st* %call17, null, !dbg !6169
  %conv = zext i1 %cmp to i32, !dbg !6169
  %call18 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1584, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.402, i32 0, i32 0), i32 %conv), !dbg !6170
  %tobool19 = icmp ne i32 %call18, 0, !dbg !6172
  br i1 %tobool19, label %lor.lhs.false20, label %if.then26, !dbg !6173

lor.lhs.false20:                                  ; preds = %if.end
  %12 = load %struct.bignum_st*, %struct.bignum_st** %ret2, align 8, !dbg !6174
  %13 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !6176
  %14 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !6177
  %call21 = call i32 @BN_sub(%struct.bignum_st* %12, %struct.bignum_st* %13, %struct.bignum_st* %14), !dbg !6178
  %cmp22 = icmp ne i32 %call21, 0, !dbg !6179
  %conv23 = zext i1 %cmp22 to i32, !dbg !6179
  %call24 = call i32 @test_true(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 1585, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.403, i32 0, i32 0), i32 %conv23), !dbg !6180
  %tobool25 = icmp ne i32 %call24, 0, !dbg !6182
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !6183

if.then26:                                        ; preds = %lor.lhs.false20, %if.end
  br label %err, !dbg !6184

if.end27:                                         ; preds = %lor.lhs.false20
  %15 = load %struct.bignum_st*, %struct.bignum_st** %ret2, align 8, !dbg !6185
  %16 = load %struct.bignum_st*, %struct.bignum_st** %mod_sqrt, align 8, !dbg !6187
  %call28 = call i32 @BN_cmp(%struct.bignum_st* %15, %struct.bignum_st* %16), !dbg !6188
  %cmp29 = icmp ne i32 %call28, 0, !dbg !6189
  br i1 %cmp29, label %land.lhs.true, label %if.end34, !dbg !6190

land.lhs.true:                                    ; preds = %if.end27
  %17 = load %struct.bignum_st*, %struct.bignum_st** %mod_sqrt, align 8, !dbg !6191
  %18 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !6193
  %call31 = call i32 @equalBN(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.404, i32 0, i32 0), %struct.bignum_st* %17, %struct.bignum_st* %18), !dbg !6194
  %tobool32 = icmp ne i32 %call31, 0, !dbg !6194
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !6195

if.then33:                                        ; preds = %land.lhs.true
  br label %err, !dbg !6196

if.end34:                                         ; preds = %land.lhs.true, %if.end27
  store i32 1, i32* %st, align 4, !dbg !6197
  br label %err, !dbg !6198

err:                                              ; preds = %if.end34, %if.then33, %if.then26, %if.then
  %19 = load %struct.bignum_st*, %struct.bignum_st** %a, align 8, !dbg !6199
  call void @BN_free(%struct.bignum_st* %19), !dbg !6200
  %20 = load %struct.bignum_st*, %struct.bignum_st** %p, align 8, !dbg !6201
  call void @BN_free(%struct.bignum_st* %20), !dbg !6202
  %21 = load %struct.bignum_st*, %struct.bignum_st** %mod_sqrt, align 8, !dbg !6203
  call void @BN_free(%struct.bignum_st* %21), !dbg !6204
  %22 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !6205
  call void @BN_free(%struct.bignum_st* %22), !dbg !6206
  %23 = load %struct.bignum_st*, %struct.bignum_st** %ret2, align 8, !dbg !6207
  call void @BN_free(%struct.bignum_st* %23), !dbg !6208
  %24 = load i32, i32* %st, align 4, !dbg !6209
  ret i32 %24, !dbg !6210
}

; Function Attrs: nounwind uwtable
define internal i8* @findattr(%struct.stanza_st* %s, i8* %key) #0 !dbg !6211 {
entry:
  %retval = alloca i8*, align 8
  %s.addr = alloca %struct.stanza_st*, align 8
  %key.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %pp = alloca %struct.pair_st*, align 8
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !6214, metadata !134), !dbg !6215
  store i8* %key, i8** %key.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %key.addr, metadata !6216, metadata !134), !dbg !6217
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6218, metadata !134), !dbg !6219
  %0 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !6220
  %numpairs = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %0, i32 0, i32 7, !dbg !6221
  %1 = load i32, i32* %numpairs, align 4, !dbg !6221
  store i32 %1, i32* %i, align 4, !dbg !6219
  call void @llvm.dbg.declare(metadata %struct.pair_st** %pp, metadata !6222, metadata !134), !dbg !6224
  %2 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !6225
  %pairs = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %2, i32 0, i32 8, !dbg !6226
  %arraydecay = getelementptr inbounds [20 x %struct.pair_st], [20 x %struct.pair_st]* %pairs, i32 0, i32 0, !dbg !6225
  store %struct.pair_st* %arraydecay, %struct.pair_st** %pp, align 8, !dbg !6224
  br label %for.cond, !dbg !6227

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4, !dbg !6228
  %dec = add nsw i32 %3, -1, !dbg !6228
  store i32 %dec, i32* %i, align 4, !dbg !6228
  %cmp = icmp sge i32 %dec, 0, !dbg !6232
  br i1 %cmp, label %for.body, label %for.end, !dbg !6233

for.body:                                         ; preds = %for.cond
  %4 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !6234
  %key1 = getelementptr inbounds %struct.pair_st, %struct.pair_st* %4, i32 0, i32 0, !dbg !6236
  %5 = load i8*, i8** %key1, align 8, !dbg !6236
  %6 = load i8*, i8** %key.addr, align 8, !dbg !6237
  %call = call i32 @strcasecmp(i8* %5, i8* %6) #5, !dbg !6238
  %cmp2 = icmp eq i32 %call, 0, !dbg !6239
  br i1 %cmp2, label %if.then, label %if.end, !dbg !6240

if.then:                                          ; preds = %for.body
  %7 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !6241
  %value = getelementptr inbounds %struct.pair_st, %struct.pair_st* %7, i32 0, i32 1, !dbg !6242
  %8 = load i8*, i8** %value, align 8, !dbg !6242
  store i8* %8, i8** %retval, align 8, !dbg !6243
  br label %return, !dbg !6243

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6244

for.inc:                                          ; preds = %if.end
  %9 = load %struct.pair_st*, %struct.pair_st** %pp, align 8, !dbg !6246
  %incdec.ptr = getelementptr inbounds %struct.pair_st, %struct.pair_st* %9, i32 1, !dbg !6246
  store %struct.pair_st* %incdec.ptr, %struct.pair_st** %pp, align 8, !dbg !6246
  br label %for.cond, !dbg !6248, !llvm.loop !6249

for.end:                                          ; preds = %for.cond
  store i8* null, i8** %retval, align 8, !dbg !6250
  br label %return, !dbg !6250

return:                                           ; preds = %for.end, %if.then
  %10 = load i8*, i8** %retval, align 8, !dbg !6251
  ret i8* %10, !dbg !6251
}

; Function Attrs: nounwind uwtable
define internal %struct.bignum_st* @getBN(%struct.stanza_st* %s, i8* %attribute) #0 !dbg !6252 {
entry:
  %retval = alloca %struct.bignum_st*, align 8
  %s.addr = alloca %struct.stanza_st*, align 8
  %attribute.addr = alloca i8*, align 8
  %hex = alloca i8*, align 8
  %ret = alloca %struct.bignum_st*, align 8
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !6255, metadata !134), !dbg !6256
  store i8* %attribute, i8** %attribute.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %attribute.addr, metadata !6257, metadata !134), !dbg !6258
  call void @llvm.dbg.declare(metadata i8** %hex, metadata !6259, metadata !134), !dbg !6260
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret, metadata !6261, metadata !134), !dbg !6262
  store %struct.bignum_st* null, %struct.bignum_st** %ret, align 8, !dbg !6262
  %0 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !6263
  %1 = load i8*, i8** %attribute.addr, align 8, !dbg !6265
  %call = call i8* @findattr(%struct.stanza_st* %0, i8* %1), !dbg !6266
  store i8* %call, i8** %hex, align 8, !dbg !6267
  %cmp = icmp eq i8* %call, null, !dbg !6268
  br i1 %cmp, label %if.then, label %if.end, !dbg !6269

if.then:                                          ; preds = %entry
  %2 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !6270
  %test_file = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %2, i32 0, i32 0, !dbg !6272
  %3 = load i8*, i8** %test_file, align 8, !dbg !6272
  %4 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !6273
  %start = getelementptr inbounds %struct.stanza_st, %struct.stanza_st* %4, i32 0, i32 3, !dbg !6274
  %5 = load i32, i32* %start, align 4, !dbg !6274
  %6 = load i8*, i8** %attribute.addr, align 8, !dbg !6275
  call void (i8*, i32, i8*, ...) @test_error(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 103, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.301, i32 0, i32 0), i8* %3, i32 %5, i8* %6), !dbg !6276
  store %struct.bignum_st* null, %struct.bignum_st** %retval, align 8, !dbg !6277
  br label %return, !dbg !6277

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %hex, align 8, !dbg !6278
  %call1 = call i32 @parseBN(%struct.bignum_st** %ret, i8* %7), !dbg !6280
  %8 = load i8*, i8** %hex, align 8, !dbg !6281
  %call2 = call i64 @strlen(i8* %8) #5, !dbg !6282
  %conv = trunc i64 %call2 to i32, !dbg !6284
  %cmp3 = icmp ne i32 %call1, %conv, !dbg !6285
  br i1 %cmp3, label %if.then5, label %if.end6, !dbg !6286

if.then5:                                         ; preds = %if.end
  %9 = load i8*, i8** %hex, align 8, !dbg !6287
  call void (i8*, i32, i8*, ...) @test_error(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 108, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.302, i32 0, i32 0), i8* %9), !dbg !6289
  store %struct.bignum_st* null, %struct.bignum_st** %retval, align 8, !dbg !6290
  br label %return, !dbg !6290

if.end6:                                          ; preds = %if.end
  %10 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !6291
  store %struct.bignum_st* %10, %struct.bignum_st** %retval, align 8, !dbg !6292
  br label %return, !dbg !6292

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %11 = load %struct.bignum_st*, %struct.bignum_st** %retval, align 8, !dbg !6293
  ret %struct.bignum_st* %11, !dbg !6293
}

declare i32 @BN_uadd(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*) #2

declare i32 @BN_usub(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*) #2

declare i64 @BN_get_word(%struct.bignum_st*) #2

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #4

declare i32 @BN_lshift1(%struct.bignum_st*, %struct.bignum_st*) #2

; Function Attrs: nounwind uwtable
define internal i32 @getint(%struct.stanza_st* %s, i32* %out, i8* %attribute) #0 !dbg !6294 {
entry:
  %s.addr = alloca %struct.stanza_st*, align 8
  %out.addr = alloca i32*, align 8
  %attribute.addr = alloca i8*, align 8
  %ret = alloca %struct.bignum_st*, align 8
  %word = alloca i64, align 8
  %st = alloca i32, align 4
  store %struct.stanza_st* %s, %struct.stanza_st** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.stanza_st** %s.addr, metadata !6298, metadata !134), !dbg !6299
  store i32* %out, i32** %out.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %out.addr, metadata !6300, metadata !134), !dbg !6301
  store i8* %attribute, i8** %attribute.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %attribute.addr, metadata !6302, metadata !134), !dbg !6303
  call void @llvm.dbg.declare(metadata %struct.bignum_st** %ret, metadata !6304, metadata !134), !dbg !6305
  call void @llvm.dbg.declare(metadata i64* %word, metadata !6306, metadata !134), !dbg !6307
  call void @llvm.dbg.declare(metadata i32* %st, metadata !6308, metadata !134), !dbg !6309
  store i32 0, i32* %st, align 4, !dbg !6309
  %0 = load %struct.stanza_st*, %struct.stanza_st** %s.addr, align 8, !dbg !6310
  %1 = load i8*, i8** %attribute.addr, align 8, !dbg !6312
  %call = call %struct.bignum_st* @getBN(%struct.stanza_st* %0, i8* %1), !dbg !6313
  store %struct.bignum_st* %call, %struct.bignum_st** %ret, align 8, !dbg !6314
  %2 = bitcast %struct.bignum_st* %call to i8*, !dbg !6315
  %call1 = call i32 @test_ptr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 120, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.328, i32 0, i32 0), i8* %2), !dbg !6316
  %tobool = icmp ne i32 %call1, 0, !dbg !6318
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !6319

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !6320
  %call2 = call i64 @BN_get_word(%struct.bignum_st* %3), !dbg !6322
  store i64 %call2, i64* %word, align 8, !dbg !6323
  %call3 = call i32 @test_ulong_le(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 121, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.329, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.330, i32 0, i32 0), i64 %call2, i64 2147483647), !dbg !6324
  %tobool4 = icmp ne i32 %call3, 0, !dbg !6326
  br i1 %tobool4, label %if.end, label %if.then, !dbg !6327

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %err, !dbg !6329

if.end:                                           ; preds = %lor.lhs.false
  %4 = load i64, i64* %word, align 8, !dbg !6330
  %conv = trunc i64 %4 to i32, !dbg !6331
  %5 = load i32*, i32** %out.addr, align 8, !dbg !6332
  store i32 %conv, i32* %5, align 4, !dbg !6333
  store i32 1, i32* %st, align 4, !dbg !6334
  br label %err, !dbg !6335

err:                                              ; preds = %if.end, %if.then
  %6 = load %struct.bignum_st*, %struct.bignum_st** %ret, align 8, !dbg !6336
  call void @BN_free(%struct.bignum_st* %6), !dbg !6337
  %7 = load i32, i32* %st, align 4, !dbg !6338
  ret i32 %7, !dbg !6339
}

declare i32 @BN_rshift(%struct.bignum_st*, %struct.bignum_st*, i32) #2

declare i32 @test_ulong_le(i8*, i32, i8*, i8*, i64, i64) #2

declare i32 @BN_sqr(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i64 @BN_div_word(%struct.bignum_st*, i64) #2

declare i64 @BN_mod_word(%struct.bignum_st*, i64) #2

declare i32 @BN_nnmod(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare i32 @BN_to_montgomery(%struct.bignum_st*, %struct.bignum_st*, %struct.bn_mont_ctx_st*, %struct.bignum_ctx*) #2

declare i32 @BN_exp(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

declare %struct.bignum_st* @BN_mod_sqrt(%struct.bignum_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) #2

; Function Attrs: nounwind readonly
declare i32 @strcasecmp(i8*, i8*) #4

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!128, !129}
!llvm.ident = !{!130}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.9.0 (tags/RELEASE_390/final)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !3, globals: !7)
!1 = !DIFile(filename: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs/[task]test--bntest/[inter]test--bntest-bin-bntest.o.i", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs/[task]test--bntest")
!2 = !{}
!3 = !{!4, !5, !6}
!4 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!5 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!6 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!7 = !{!8, !29, !34, !36, !37, !42, !46, !51, !52, !56, !57, !70, !72, !74, !78, !82, !83}
!8 = distinct !DIGlobalVariable(name: "test_options", scope: !9, file: !10, line: 2267, type: !26, isLocal: true, isDefinition: true, variable: [10 x %struct.options_st]* @test_get_options.test_options)
!9 = distinct !DISubprogram(name: "test_get_options", scope: !10, file: !10, line: 2264, type: !11, isLocal: false, isDefinition: true, scopeLine: 2265, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!10 = !DIFile(filename: "test/bntest.c", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs/[task]test--bntest")
!11 = !DISubroutineType(types: !12)
!12 = !{!13}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64, align: 64)
!14 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !15)
!15 = !DIDerivedType(tag: DW_TAG_typedef, name: "OPTIONS", file: !16, line: 280, baseType: !17)
!16 = !DIFile(filename: "apps/include/opt.h", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs/[task]test--bntest")
!17 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "options_st", file: !16, line: 269, size: 192, align: 64, elements: !18)
!18 = !{!19, !23, !24, !25}
!19 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !17, file: !16, line: 270, baseType: !20, size: 64, align: 64)
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64, align: 64)
!21 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !22)
!22 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!23 = !DIDerivedType(tag: DW_TAG_member, name: "retval", scope: !17, file: !16, line: 271, baseType: !4, size: 32, align: 32, offset: 64)
!24 = !DIDerivedType(tag: DW_TAG_member, name: "valtype", scope: !17, file: !16, line: 278, baseType: !4, size: 32, align: 32, offset: 96)
!25 = !DIDerivedType(tag: DW_TAG_member, name: "helpstr", scope: !17, file: !16, line: 279, baseType: !20, size: 64, align: 64, offset: 128)
!26 = !DICompositeType(tag: DW_TAG_array_type, baseType: !14, size: 1920, align: 64, elements: !27)
!27 = !{!28}
!28 = !DISubrange(count: 10)
!29 = distinct !DIGlobalVariable(name: "ctx", scope: !0, file: !10, line: 46, type: !30, isLocal: true, isDefinition: true, variable: %struct.bignum_ctx** @ctx)
!30 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64, align: 64)
!31 = !DIDerivedType(tag: DW_TAG_typedef, name: "BN_CTX", file: !32, line: 81, baseType: !33)
!32 = !DIFile(filename: "include/openssl/ossl_typ.h", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs/[task]test--bntest")
!33 = !DICompositeType(tag: DW_TAG_structure_type, name: "bignum_ctx", file: !32, line: 81, flags: DIFlagFwdDecl)
!34 = distinct !DIGlobalVariable(name: "NUM0", scope: !0, file: !10, line: 44, type: !35, isLocal: true, isDefinition: true, variable: i32 100)
!35 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4)
!36 = distinct !DIGlobalVariable(name: "NUM1", scope: !0, file: !10, line: 45, type: !35, isLocal: true, isDefinition: true, variable: i32 50)
!37 = distinct !DIGlobalVariable(name: "neg", scope: !38, file: !10, line: 147, type: !41, isLocal: true, isDefinition: true, variable: i32* @rand_neg.neg)
!38 = distinct !DISubprogram(name: "rand_neg", scope: !10, file: !10, line: 145, type: !39, isLocal: true, isDefinition: true, scopeLine: 146, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!39 = !DISubroutineType(types: !40)
!40 = !{!4}
!41 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!42 = distinct !DIGlobalVariable(name: "sign", scope: !38, file: !10, line: 148, type: !43, isLocal: true, isDefinition: true, variable: [8 x i32]* @rand_neg.sign)
!43 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 256, align: 32, elements: !44)
!44 = !{!45}
!45 = !DISubrange(count: 8)
!46 = distinct !DIGlobalVariable(name: "ahex", scope: !47, file: !10, line: 446, type: !48, isLocal: true, isDefinition: true, variable: [13 x i8*]* @test_modexp_mont5.ahex)
!47 = distinct !DISubprogram(name: "test_modexp_mont5", scope: !10, file: !10, line: 384, type: !39, isLocal: true, isDefinition: true, scopeLine: 385, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!48 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 832, align: 64, elements: !49)
!49 = !{!50}
!50 = !DISubrange(count: 13)
!51 = distinct !DIGlobalVariable(name: "nhex", scope: !47, file: !10, line: 461, type: !48, isLocal: true, isDefinition: true, variable: [13 x i8*]* @test_modexp_mont5.nhex)
!52 = distinct !DIGlobalVariable(name: "bn1strings", scope: !0, file: !10, line: 340, type: !53, isLocal: true, isDefinition: true, variable: [17 x i8*]* @bn1strings)
!53 = !DICompositeType(tag: DW_TAG_array_type, baseType: !20, size: 1088, align: 64, elements: !54)
!54 = !{!55}
!55 = !DISubrange(count: 17)
!56 = distinct !DIGlobalVariable(name: "bn2strings", scope: !0, file: !10, line: 360, type: !53, isLocal: true, isDefinition: true, variable: [17 x i8*]* @bn2strings)
!57 = distinct !DIGlobalVariable(name: "kMPITests", scope: !0, file: !10, line: 1853, type: !58, isLocal: true, isDefinition: true, variable: [6 x %struct.mpitest_st]* @kMPITests)
!58 = !DICompositeType(tag: DW_TAG_array_type, baseType: !59, size: 1152, align: 64, elements: !68)
!59 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !60)
!60 = !DIDerivedType(tag: DW_TAG_typedef, name: "MPITEST", file: !10, line: 42, baseType: !61)
!61 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mpitest_st", file: !10, line: 38, size: 192, align: 64, elements: !62)
!62 = !{!63, !64, !65}
!63 = !DIDerivedType(tag: DW_TAG_member, name: "base10", scope: !61, file: !10, line: 39, baseType: !20, size: 64, align: 64)
!64 = !DIDerivedType(tag: DW_TAG_member, name: "mpi", scope: !61, file: !10, line: 40, baseType: !20, size: 64, align: 64, offset: 64)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "mpi_len", scope: !61, file: !10, line: 41, baseType: !66, size: 64, align: 64, offset: 128)
!66 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !67, line: 216, baseType: !6)
!67 = !DIFile(filename: "/usr/lib/gcc/x86_64-linux-gnu/5/include/stddef.h", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs/[task]test--bntest")
!68 = !{!69}
!69 = !DISubrange(count: 6)
!70 = distinct !DIGlobalVariable(name: "kBits", scope: !71, file: !10, line: 2140, type: !35, isLocal: true, isDefinition: true, variable: i32* @test_smallprime.kBits)
!71 = distinct !DISubprogram(name: "test_smallprime", scope: !10, file: !10, line: 2138, type: !39, isLocal: true, isDefinition: true, scopeLine: 2139, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!72 = distinct !DIGlobalVariable(name: "p0", scope: !0, file: !10, line: 52, type: !73, isLocal: true, isDefinition: true, variable: [6 x i32]* @p0)
!73 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 192, align: 32, elements: !68)
!74 = distinct !DIGlobalVariable(name: "p1", scope: !0, file: !10, line: 53, type: !75, isLocal: true, isDefinition: true, variable: [4 x i32]* @p1)
!75 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 128, align: 32, elements: !76)
!76 = !{!77}
!77 = !DISubrange(count: 4)
!78 = distinct !DIGlobalVariable(name: "primes", scope: !0, file: !10, line: 2156, type: !79, isLocal: true, isDefinition: true, variable: [5 x i32]* @primes)
!79 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4, size: 160, align: 32, elements: !80)
!80 = !{!81}
!81 = !DISubrange(count: 5)
!82 = distinct !DIGlobalVariable(name: "not_primes", scope: !0, file: !10, line: 2180, type: !75, isLocal: true, isDefinition: true, variable: [4 x i32]* @not_primes)
!83 = distinct !DIGlobalVariable(name: "filetests", scope: !84, file: !10, line: 2205, type: !118, isLocal: true, isDefinition: true, variable: [11 x %struct.filetest_st]* @file_test_run.filetests)
!84 = distinct !DISubprogram(name: "file_test_run", scope: !10, file: !10, line: 2203, type: !85, isLocal: true, isDefinition: true, scopeLine: 2204, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!85 = !DISubroutineType(types: !86)
!86 = !{!4, !87}
!87 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !88, size: 64, align: 64)
!88 = !DIDerivedType(tag: DW_TAG_typedef, name: "STANZA", file: !89, line: 498, baseType: !90)
!89 = !DIFile(filename: "test/testutil.h", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs/[task]test--bntest")
!90 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stanza_st", file: !89, line: 486, size: 35712, align: 64, elements: !91)
!91 = !{!92, !93, !97, !98, !99, !100, !101, !102, !103, !113, !114}
!92 = !DIDerivedType(tag: DW_TAG_member, name: "test_file", scope: !90, file: !89, line: 487, baseType: !20, size: 64, align: 64)
!93 = !DIDerivedType(tag: DW_TAG_member, name: "fp", scope: !90, file: !89, line: 488, baseType: !94, size: 64, align: 64, offset: 64)
!94 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !95, size: 64, align: 64)
!95 = !DIDerivedType(tag: DW_TAG_typedef, name: "BIO", file: !32, line: 79, baseType: !96)
!96 = !DICompositeType(tag: DW_TAG_structure_type, name: "bio_st", file: !32, line: 79, flags: DIFlagFwdDecl)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "curr", scope: !90, file: !89, line: 489, baseType: !4, size: 32, align: 32, offset: 128)
!98 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !90, file: !89, line: 490, baseType: !4, size: 32, align: 32, offset: 160)
!99 = !DIDerivedType(tag: DW_TAG_member, name: "errors", scope: !90, file: !89, line: 491, baseType: !4, size: 32, align: 32, offset: 192)
!100 = !DIDerivedType(tag: DW_TAG_member, name: "numtests", scope: !90, file: !89, line: 492, baseType: !4, size: 32, align: 32, offset: 224)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "numskip", scope: !90, file: !89, line: 493, baseType: !4, size: 32, align: 32, offset: 256)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "numpairs", scope: !90, file: !89, line: 494, baseType: !4, size: 32, align: 32, offset: 288)
!103 = !DIDerivedType(tag: DW_TAG_member, name: "pairs", scope: !90, file: !89, line: 495, baseType: !104, size: 2560, align: 64, offset: 320)
!104 = !DICompositeType(tag: DW_TAG_array_type, baseType: !105, size: 2560, align: 64, elements: !111)
!105 = !DIDerivedType(tag: DW_TAG_typedef, name: "PAIR", file: !89, line: 484, baseType: !106)
!106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pair_st", file: !89, line: 481, size: 128, align: 64, elements: !107)
!107 = !{!108, !110}
!108 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !106, file: !89, line: 482, baseType: !109, size: 64, align: 64)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !22, size: 64, align: 64)
!110 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !106, file: !89, line: 483, baseType: !109, size: 64, align: 64, offset: 64)
!111 = !{!112}
!112 = !DISubrange(count: 20)
!113 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !90, file: !89, line: 496, baseType: !94, size: 64, align: 64, offset: 2880)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "buff", scope: !90, file: !89, line: 497, baseType: !115, size: 32768, align: 8, offset: 2944)
!115 = !DICompositeType(tag: DW_TAG_array_type, baseType: !22, size: 32768, align: 8, elements: !116)
!116 = !{!117}
!117 = !DISubrange(count: 4096)
!118 = !DICompositeType(tag: DW_TAG_array_type, baseType: !119, size: 1408, align: 64, elements: !126)
!119 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !120)
!120 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILETEST", file: !10, line: 36, baseType: !121)
!121 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "filetest_st", file: !10, line: 33, size: 128, align: 64, elements: !122)
!122 = !{!123, !124}
!123 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !121, file: !10, line: 34, baseType: !20, size: 64, align: 64)
!124 = !DIDerivedType(tag: DW_TAG_member, name: "func", scope: !121, file: !10, line: 35, baseType: !125, size: 64, align: 64, offset: 64)
!125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !85, size: 64, align: 64)
!126 = !{!127}
!127 = !DISubrange(count: 11)
!128 = !{i32 2, !"Dwarf Version", i32 4}
!129 = !{i32 2, !"Debug Info Version", i32 3}
!130 = !{!"clang version 3.9.0 (tags/RELEASE_390/final)"}
!131 = !DILocation(line: 2273, column: 5, scope: !9)
!132 = distinct !DISubprogram(name: "setup_tests", scope: !10, file: !10, line: 2276, type: !39, isLocal: false, isDefinition: true, scopeLine: 2277, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!133 = !DILocalVariable(name: "n", scope: !132, file: !10, line: 2278, type: !4)
!134 = !DIExpression()
!135 = !DILocation(line: 2278, column: 9, scope: !132)
!136 = !DILocation(line: 2278, column: 13, scope: !132)
!137 = !DILocation(line: 2280, column: 70, scope: !138)
!138 = distinct !DILexicalBlock(scope: !132, file: !10, line: 2280, column: 9)
!139 = !DILocation(line: 2280, column: 68, scope: !138)
!140 = !DILocation(line: 2280, column: 64, scope: !138)
!141 = !DILocation(line: 2280, column: 10, scope: !142)
!142 = !DILexicalBlockFile(scope: !138, file: !10, discriminator: 1)
!143 = !DILocation(line: 2280, column: 10, scope: !138)
!144 = !DILocation(line: 2280, column: 9, scope: !132)
!145 = !DILocation(line: 2281, column: 9, scope: !138)
!146 = !DILocation(line: 2283, column: 9, scope: !147)
!147 = distinct !DILexicalBlock(scope: !132, file: !10, line: 2283, column: 9)
!148 = !DILocation(line: 2283, column: 11, scope: !147)
!149 = !DILocation(line: 2283, column: 9, scope: !132)
!150 = !DILocation(line: 2284, column: 9, scope: !151)
!151 = distinct !DILexicalBlock(scope: !147, file: !10, line: 2283, column: 17)
!152 = !DILocation(line: 2285, column: 9, scope: !151)
!153 = !DILocation(line: 2286, column: 9, scope: !151)
!154 = !DILocation(line: 2287, column: 9, scope: !151)
!155 = !DILocation(line: 2288, column: 9, scope: !151)
!156 = !DILocation(line: 2289, column: 9, scope: !151)
!157 = !DILocation(line: 2290, column: 9, scope: !151)
!158 = !DILocation(line: 2291, column: 9, scope: !151)
!159 = !DILocation(line: 2292, column: 9, scope: !151)
!160 = !DILocation(line: 2293, column: 9, scope: !151)
!161 = !DILocation(line: 2294, column: 9, scope: !151)
!162 = !DILocation(line: 2295, column: 9, scope: !151)
!163 = !DILocation(line: 2296, column: 9, scope: !151)
!164 = !DILocation(line: 2297, column: 9, scope: !151)
!165 = !DILocation(line: 2298, column: 9, scope: !151)
!166 = !DILocation(line: 2299, column: 9, scope: !151)
!167 = !DILocation(line: 2300, column: 9, scope: !151)
!168 = !DILocation(line: 2302, column: 9, scope: !151)
!169 = !DILocation(line: 2303, column: 9, scope: !151)
!170 = !DILocation(line: 2304, column: 9, scope: !151)
!171 = !DILocation(line: 2305, column: 9, scope: !151)
!172 = !DILocation(line: 2306, column: 9, scope: !151)
!173 = !DILocation(line: 2307, column: 9, scope: !151)
!174 = !DILocation(line: 2308, column: 9, scope: !151)
!175 = !DILocation(line: 2309, column: 9, scope: !151)
!176 = !DILocation(line: 2310, column: 9, scope: !151)
!177 = !DILocation(line: 2312, column: 9, scope: !151)
!178 = !DILocation(line: 2313, column: 9, scope: !151)
!179 = !DILocation(line: 2314, column: 5, scope: !151)
!180 = !DILocation(line: 2315, column: 57, scope: !181)
!181 = distinct !DILexicalBlock(scope: !147, file: !10, line: 2314, column: 12)
!182 = !DILocation(line: 2315, column: 9, scope: !181)
!183 = !DILocation(line: 2317, column: 5, scope: !132)
!184 = !DILocation(line: 2318, column: 1, scope: !132)
!185 = distinct !DISubprogram(name: "test_sub", scope: !10, file: !10, line: 226, type: !39, isLocal: true, isDefinition: true, scopeLine: 227, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!186 = !DILocalVariable(name: "a", scope: !185, file: !10, line: 228, type: !187)
!187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !188, size: 64, align: 64)
!188 = !DIDerivedType(tag: DW_TAG_typedef, name: "BIGNUM", file: !32, line: 80, baseType: !189)
!189 = !DICompositeType(tag: DW_TAG_structure_type, name: "bignum_st", file: !32, line: 80, flags: DIFlagFwdDecl)
!190 = !DILocation(line: 228, column: 13, scope: !185)
!191 = !DILocalVariable(name: "b", scope: !185, file: !10, line: 228, type: !187)
!192 = !DILocation(line: 228, column: 23, scope: !185)
!193 = !DILocalVariable(name: "c", scope: !185, file: !10, line: 228, type: !187)
!194 = !DILocation(line: 228, column: 34, scope: !185)
!195 = !DILocalVariable(name: "i", scope: !185, file: !10, line: 229, type: !4)
!196 = !DILocation(line: 229, column: 9, scope: !185)
!197 = !DILocalVariable(name: "st", scope: !185, file: !10, line: 229, type: !4)
!198 = !DILocation(line: 229, column: 12, scope: !185)
!199 = !DILocation(line: 231, column: 61, scope: !200)
!200 = distinct !DILexicalBlock(scope: !185, file: !10, line: 231, column: 9)
!201 = !DILocation(line: 231, column: 59, scope: !200)
!202 = !DILocation(line: 231, column: 57, scope: !200)
!203 = !DILocation(line: 231, column: 10, scope: !204)
!204 = !DILexicalBlockFile(scope: !200, file: !10, discriminator: 2)
!205 = !DILocation(line: 231, column: 10, scope: !200)
!206 = !DILocation(line: 232, column: 13, scope: !200)
!207 = !DILocation(line: 232, column: 68, scope: !208)
!208 = !DILexicalBlockFile(scope: !200, file: !10, discriminator: 1)
!209 = !DILocation(line: 232, column: 66, scope: !208)
!210 = !DILocation(line: 232, column: 64, scope: !208)
!211 = !DILocation(line: 232, column: 17, scope: !212)
!212 = !DILexicalBlockFile(scope: !208, file: !10, discriminator: 2)
!213 = !DILocation(line: 232, column: 17, scope: !208)
!214 = !DILocation(line: 233, column: 13, scope: !200)
!215 = !DILocation(line: 233, column: 68, scope: !208)
!216 = !DILocation(line: 233, column: 66, scope: !208)
!217 = !DILocation(line: 233, column: 64, scope: !208)
!218 = !DILocation(line: 233, column: 17, scope: !212)
!219 = !DILocation(line: 233, column: 17, scope: !208)
!220 = !DILocation(line: 231, column: 9, scope: !221)
!221 = !DILexicalBlockFile(scope: !185, file: !10, discriminator: 1)
!222 = !DILocation(line: 234, column: 9, scope: !200)
!223 = !DILocation(line: 236, column: 12, scope: !224)
!224 = distinct !DILexicalBlock(scope: !185, file: !10, line: 236, column: 5)
!225 = !DILocation(line: 236, column: 10, scope: !224)
!226 = !DILocation(line: 236, column: 17, scope: !227)
!227 = !DILexicalBlockFile(scope: !228, file: !10, discriminator: 1)
!228 = distinct !DILexicalBlock(scope: !224, file: !10, line: 236, column: 5)
!229 = !DILocation(line: 236, column: 19, scope: !227)
!230 = !DILocation(line: 236, column: 5, scope: !227)
!231 = !DILocation(line: 237, column: 13, scope: !232)
!232 = distinct !DILexicalBlock(scope: !233, file: !10, line: 237, column: 13)
!233 = distinct !DILexicalBlock(scope: !228, file: !10, line: 236, column: 39)
!234 = !DILocation(line: 237, column: 15, scope: !232)
!235 = !DILocation(line: 237, column: 13, scope: !233)
!236 = !DILocation(line: 238, column: 28, scope: !237)
!237 = distinct !DILexicalBlock(scope: !232, file: !10, line: 237, column: 23)
!238 = !DILocation(line: 238, column: 13, scope: !237)
!239 = !DILocation(line: 239, column: 21, scope: !237)
!240 = !DILocation(line: 239, column: 24, scope: !237)
!241 = !DILocation(line: 239, column: 13, scope: !237)
!242 = !DILocation(line: 240, column: 88, scope: !243)
!243 = distinct !DILexicalBlock(scope: !237, file: !10, line: 240, column: 17)
!244 = !DILocation(line: 240, column: 91, scope: !243)
!245 = !DILocation(line: 240, column: 77, scope: !243)
!246 = !DILocation(line: 240, column: 18, scope: !247)
!247 = !DILexicalBlockFile(scope: !243, file: !10, discriminator: 1)
!248 = !DILocation(line: 240, column: 18, scope: !243)
!249 = !DILocation(line: 240, column: 17, scope: !237)
!250 = !DILocation(line: 241, column: 17, scope: !243)
!251 = !DILocation(line: 242, column: 25, scope: !237)
!252 = !DILocation(line: 242, column: 28, scope: !237)
!253 = !DILocation(line: 242, column: 13, scope: !237)
!254 = !DILocation(line: 243, column: 9, scope: !237)
!255 = !DILocation(line: 244, column: 28, scope: !256)
!256 = distinct !DILexicalBlock(scope: !232, file: !10, line: 243, column: 16)
!257 = !DILocation(line: 244, column: 37, scope: !256)
!258 = !DILocation(line: 244, column: 35, scope: !256)
!259 = !DILocation(line: 244, column: 39, scope: !256)
!260 = !DILocation(line: 244, column: 13, scope: !256)
!261 = !DILocation(line: 245, column: 29, scope: !256)
!262 = !DILocation(line: 245, column: 32, scope: !256)
!263 = !DILocation(line: 245, column: 13, scope: !264)
!264 = !DILexicalBlockFile(scope: !256, file: !10, discriminator: 1)
!265 = !DILocation(line: 246, column: 29, scope: !256)
!266 = !DILocation(line: 246, column: 32, scope: !256)
!267 = !DILocation(line: 246, column: 13, scope: !264)
!268 = !DILocation(line: 248, column: 16, scope: !233)
!269 = !DILocation(line: 248, column: 19, scope: !233)
!270 = !DILocation(line: 248, column: 22, scope: !233)
!271 = !DILocation(line: 248, column: 9, scope: !233)
!272 = !DILocation(line: 249, column: 16, scope: !233)
!273 = !DILocation(line: 249, column: 19, scope: !233)
!274 = !DILocation(line: 249, column: 22, scope: !233)
!275 = !DILocation(line: 249, column: 9, scope: !233)
!276 = !DILocation(line: 250, column: 16, scope: !233)
!277 = !DILocation(line: 250, column: 19, scope: !233)
!278 = !DILocation(line: 250, column: 22, scope: !233)
!279 = !DILocation(line: 250, column: 9, scope: !233)
!280 = !DILocation(line: 251, column: 57, scope: !281)
!281 = distinct !DILexicalBlock(scope: !233, file: !10, line: 251, column: 13)
!282 = !DILocation(line: 251, column: 14, scope: !281)
!283 = !DILocation(line: 251, column: 13, scope: !233)
!284 = !DILocation(line: 252, column: 13, scope: !281)
!285 = !DILocation(line: 253, column: 5, scope: !233)
!286 = !DILocation(line: 236, column: 35, scope: !287)
!287 = !DILexicalBlockFile(scope: !228, file: !10, discriminator: 2)
!288 = !DILocation(line: 236, column: 5, scope: !287)
!289 = distinct !{!289, !290}
!290 = !DILocation(line: 236, column: 5, scope: !185)
!291 = !DILocation(line: 254, column: 8, scope: !185)
!292 = !DILocation(line: 254, column: 5, scope: !185)
!293 = !DILocation(line: 256, column: 13, scope: !185)
!294 = !DILocation(line: 256, column: 5, scope: !185)
!295 = !DILocation(line: 257, column: 13, scope: !185)
!296 = !DILocation(line: 257, column: 5, scope: !185)
!297 = !DILocation(line: 258, column: 13, scope: !185)
!298 = !DILocation(line: 258, column: 5, scope: !185)
!299 = !DILocation(line: 259, column: 12, scope: !185)
!300 = !DILocation(line: 259, column: 5, scope: !185)
!301 = distinct !DISubprogram(name: "test_div_recip", scope: !10, file: !10, line: 263, type: !39, isLocal: true, isDefinition: true, scopeLine: 264, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!302 = !DILocalVariable(name: "a", scope: !301, file: !10, line: 265, type: !187)
!303 = !DILocation(line: 265, column: 13, scope: !301)
!304 = !DILocalVariable(name: "b", scope: !301, file: !10, line: 265, type: !187)
!305 = !DILocation(line: 265, column: 23, scope: !301)
!306 = !DILocalVariable(name: "c", scope: !301, file: !10, line: 265, type: !187)
!307 = !DILocation(line: 265, column: 34, scope: !301)
!308 = !DILocalVariable(name: "d", scope: !301, file: !10, line: 265, type: !187)
!309 = !DILocation(line: 265, column: 45, scope: !301)
!310 = !DILocalVariable(name: "e", scope: !301, file: !10, line: 265, type: !187)
!311 = !DILocation(line: 265, column: 56, scope: !301)
!312 = !DILocalVariable(name: "recp", scope: !301, file: !10, line: 266, type: !313)
!313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !314, size: 64, align: 64)
!314 = !DIDerivedType(tag: DW_TAG_typedef, name: "BN_RECP_CTX", file: !32, line: 84, baseType: !315)
!315 = !DICompositeType(tag: DW_TAG_structure_type, name: "bn_recp_ctx_st", file: !32, line: 84, flags: DIFlagFwdDecl)
!316 = !DILocation(line: 266, column: 18, scope: !301)
!317 = !DILocalVariable(name: "st", scope: !301, file: !10, line: 267, type: !4)
!318 = !DILocation(line: 267, column: 9, scope: !301)
!319 = !DILocalVariable(name: "i", scope: !301, file: !10, line: 267, type: !4)
!320 = !DILocation(line: 267, column: 17, scope: !301)
!321 = !DILocation(line: 269, column: 61, scope: !322)
!322 = distinct !DILexicalBlock(scope: !301, file: !10, line: 269, column: 9)
!323 = !DILocation(line: 269, column: 59, scope: !322)
!324 = !DILocation(line: 269, column: 57, scope: !322)
!325 = !DILocation(line: 269, column: 10, scope: !326)
!326 = !DILexicalBlockFile(scope: !322, file: !10, discriminator: 2)
!327 = !DILocation(line: 269, column: 10, scope: !322)
!328 = !DILocation(line: 270, column: 13, scope: !322)
!329 = !DILocation(line: 270, column: 68, scope: !330)
!330 = !DILexicalBlockFile(scope: !322, file: !10, discriminator: 1)
!331 = !DILocation(line: 270, column: 66, scope: !330)
!332 = !DILocation(line: 270, column: 64, scope: !330)
!333 = !DILocation(line: 270, column: 17, scope: !334)
!334 = !DILexicalBlockFile(scope: !330, file: !10, discriminator: 2)
!335 = !DILocation(line: 270, column: 17, scope: !330)
!336 = !DILocation(line: 271, column: 13, scope: !322)
!337 = !DILocation(line: 271, column: 68, scope: !330)
!338 = !DILocation(line: 271, column: 66, scope: !330)
!339 = !DILocation(line: 271, column: 64, scope: !330)
!340 = !DILocation(line: 271, column: 17, scope: !334)
!341 = !DILocation(line: 271, column: 17, scope: !330)
!342 = !DILocation(line: 272, column: 13, scope: !322)
!343 = !DILocation(line: 272, column: 68, scope: !330)
!344 = !DILocation(line: 272, column: 66, scope: !330)
!345 = !DILocation(line: 272, column: 64, scope: !330)
!346 = !DILocation(line: 272, column: 17, scope: !334)
!347 = !DILocation(line: 272, column: 17, scope: !330)
!348 = !DILocation(line: 273, column: 13, scope: !322)
!349 = !DILocation(line: 273, column: 68, scope: !330)
!350 = !DILocation(line: 273, column: 66, scope: !330)
!351 = !DILocation(line: 273, column: 64, scope: !330)
!352 = !DILocation(line: 273, column: 17, scope: !334)
!353 = !DILocation(line: 273, column: 17, scope: !330)
!354 = !DILocation(line: 274, column: 13, scope: !322)
!355 = !DILocation(line: 274, column: 83, scope: !330)
!356 = !DILocation(line: 274, column: 81, scope: !330)
!357 = !DILocation(line: 274, column: 76, scope: !330)
!358 = !DILocation(line: 274, column: 17, scope: !334)
!359 = !DILocation(line: 274, column: 17, scope: !330)
!360 = !DILocation(line: 269, column: 9, scope: !361)
!361 = !DILexicalBlockFile(scope: !301, file: !10, discriminator: 1)
!362 = !DILocation(line: 275, column: 9, scope: !322)
!363 = !DILocation(line: 277, column: 12, scope: !364)
!364 = distinct !DILexicalBlock(scope: !301, file: !10, line: 277, column: 5)
!365 = !DILocation(line: 277, column: 10, scope: !364)
!366 = !DILocation(line: 277, column: 17, scope: !367)
!367 = !DILexicalBlockFile(scope: !368, file: !10, discriminator: 1)
!368 = distinct !DILexicalBlock(scope: !364, file: !10, line: 277, column: 5)
!369 = !DILocation(line: 277, column: 19, scope: !367)
!370 = !DILocation(line: 277, column: 5, scope: !367)
!371 = !DILocation(line: 278, column: 13, scope: !372)
!372 = distinct !DILexicalBlock(scope: !373, file: !10, line: 278, column: 13)
!373 = distinct !DILexicalBlock(scope: !368, file: !10, line: 277, column: 39)
!374 = !DILocation(line: 278, column: 15, scope: !372)
!375 = !DILocation(line: 278, column: 13, scope: !373)
!376 = !DILocation(line: 279, column: 28, scope: !377)
!377 = distinct !DILexicalBlock(scope: !372, file: !10, line: 278, column: 23)
!378 = !DILocation(line: 279, column: 13, scope: !377)
!379 = !DILocation(line: 280, column: 21, scope: !377)
!380 = !DILocation(line: 280, column: 24, scope: !377)
!381 = !DILocation(line: 280, column: 13, scope: !377)
!382 = !DILocation(line: 281, column: 23, scope: !377)
!383 = !DILocation(line: 281, column: 26, scope: !377)
!384 = !DILocation(line: 281, column: 29, scope: !377)
!385 = !DILocation(line: 281, column: 13, scope: !377)
!386 = !DILocation(line: 282, column: 25, scope: !377)
!387 = !DILocation(line: 282, column: 28, scope: !377)
!388 = !DILocation(line: 282, column: 13, scope: !377)
!389 = !DILocation(line: 283, column: 9, scope: !377)
!390 = !DILocation(line: 284, column: 28, scope: !372)
!391 = !DILocation(line: 284, column: 41, scope: !372)
!392 = !DILocation(line: 284, column: 43, scope: !372)
!393 = !DILocation(line: 284, column: 38, scope: !372)
!394 = !DILocation(line: 284, column: 34, scope: !372)
!395 = !DILocation(line: 284, column: 13, scope: !372)
!396 = !DILocation(line: 285, column: 25, scope: !373)
!397 = !DILocation(line: 285, column: 28, scope: !373)
!398 = !DILocation(line: 285, column: 9, scope: !399)
!399 = !DILexicalBlockFile(scope: !373, file: !10, discriminator: 1)
!400 = !DILocation(line: 286, column: 25, scope: !373)
!401 = !DILocation(line: 286, column: 28, scope: !373)
!402 = !DILocation(line: 286, column: 9, scope: !399)
!403 = !DILocation(line: 287, column: 25, scope: !373)
!404 = !DILocation(line: 287, column: 31, scope: !373)
!405 = !DILocation(line: 287, column: 34, scope: !373)
!406 = !DILocation(line: 287, column: 9, scope: !373)
!407 = !DILocation(line: 288, column: 21, scope: !373)
!408 = !DILocation(line: 288, column: 24, scope: !373)
!409 = !DILocation(line: 288, column: 27, scope: !373)
!410 = !DILocation(line: 288, column: 30, scope: !373)
!411 = !DILocation(line: 288, column: 36, scope: !373)
!412 = !DILocation(line: 288, column: 9, scope: !373)
!413 = !DILocation(line: 289, column: 16, scope: !373)
!414 = !DILocation(line: 289, column: 19, scope: !373)
!415 = !DILocation(line: 289, column: 22, scope: !373)
!416 = !DILocation(line: 289, column: 25, scope: !373)
!417 = !DILocation(line: 289, column: 9, scope: !373)
!418 = !DILocation(line: 290, column: 16, scope: !373)
!419 = !DILocation(line: 290, column: 19, scope: !373)
!420 = !DILocation(line: 290, column: 22, scope: !373)
!421 = !DILocation(line: 290, column: 9, scope: !373)
!422 = !DILocation(line: 291, column: 16, scope: !373)
!423 = !DILocation(line: 291, column: 19, scope: !373)
!424 = !DILocation(line: 291, column: 22, scope: !373)
!425 = !DILocation(line: 291, column: 9, scope: !373)
!426 = !DILocation(line: 292, column: 57, scope: !427)
!427 = distinct !DILexicalBlock(scope: !373, file: !10, line: 292, column: 13)
!428 = !DILocation(line: 292, column: 14, scope: !427)
!429 = !DILocation(line: 292, column: 13, scope: !373)
!430 = !DILocation(line: 293, column: 13, scope: !427)
!431 = !DILocation(line: 294, column: 5, scope: !373)
!432 = !DILocation(line: 277, column: 35, scope: !433)
!433 = !DILexicalBlockFile(scope: !368, file: !10, discriminator: 2)
!434 = !DILocation(line: 277, column: 5, scope: !433)
!435 = distinct !{!435, !436}
!436 = !DILocation(line: 277, column: 5, scope: !301)
!437 = !DILocation(line: 295, column: 8, scope: !301)
!438 = !DILocation(line: 295, column: 5, scope: !301)
!439 = !DILocation(line: 297, column: 13, scope: !301)
!440 = !DILocation(line: 297, column: 5, scope: !301)
!441 = !DILocation(line: 298, column: 13, scope: !301)
!442 = !DILocation(line: 298, column: 5, scope: !301)
!443 = !DILocation(line: 299, column: 13, scope: !301)
!444 = !DILocation(line: 299, column: 5, scope: !301)
!445 = !DILocation(line: 300, column: 13, scope: !301)
!446 = !DILocation(line: 300, column: 5, scope: !301)
!447 = !DILocation(line: 301, column: 13, scope: !301)
!448 = !DILocation(line: 301, column: 5, scope: !301)
!449 = !DILocation(line: 302, column: 22, scope: !301)
!450 = !DILocation(line: 302, column: 5, scope: !301)
!451 = !DILocation(line: 303, column: 12, scope: !301)
!452 = !DILocation(line: 303, column: 5, scope: !301)
!453 = distinct !DISubprogram(name: "test_mod", scope: !10, file: !10, line: 307, type: !39, isLocal: true, isDefinition: true, scopeLine: 308, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!454 = !DILocalVariable(name: "a", scope: !453, file: !10, line: 309, type: !187)
!455 = !DILocation(line: 309, column: 13, scope: !453)
!456 = !DILocalVariable(name: "b", scope: !453, file: !10, line: 309, type: !187)
!457 = !DILocation(line: 309, column: 23, scope: !453)
!458 = !DILocalVariable(name: "c", scope: !453, file: !10, line: 309, type: !187)
!459 = !DILocation(line: 309, column: 34, scope: !453)
!460 = !DILocalVariable(name: "d", scope: !453, file: !10, line: 309, type: !187)
!461 = !DILocation(line: 309, column: 45, scope: !453)
!462 = !DILocalVariable(name: "e", scope: !453, file: !10, line: 309, type: !187)
!463 = !DILocation(line: 309, column: 56, scope: !453)
!464 = !DILocalVariable(name: "st", scope: !453, file: !10, line: 310, type: !4)
!465 = !DILocation(line: 310, column: 9, scope: !453)
!466 = !DILocalVariable(name: "i", scope: !453, file: !10, line: 310, type: !4)
!467 = !DILocation(line: 310, column: 17, scope: !453)
!468 = !DILocation(line: 312, column: 61, scope: !469)
!469 = distinct !DILexicalBlock(scope: !453, file: !10, line: 312, column: 9)
!470 = !DILocation(line: 312, column: 59, scope: !469)
!471 = !DILocation(line: 312, column: 57, scope: !469)
!472 = !DILocation(line: 312, column: 10, scope: !473)
!473 = !DILexicalBlockFile(scope: !469, file: !10, discriminator: 2)
!474 = !DILocation(line: 312, column: 10, scope: !469)
!475 = !DILocation(line: 313, column: 13, scope: !469)
!476 = !DILocation(line: 313, column: 68, scope: !477)
!477 = !DILexicalBlockFile(scope: !469, file: !10, discriminator: 1)
!478 = !DILocation(line: 313, column: 66, scope: !477)
!479 = !DILocation(line: 313, column: 64, scope: !477)
!480 = !DILocation(line: 313, column: 17, scope: !481)
!481 = !DILexicalBlockFile(scope: !477, file: !10, discriminator: 2)
!482 = !DILocation(line: 313, column: 17, scope: !477)
!483 = !DILocation(line: 314, column: 13, scope: !469)
!484 = !DILocation(line: 314, column: 68, scope: !477)
!485 = !DILocation(line: 314, column: 66, scope: !477)
!486 = !DILocation(line: 314, column: 64, scope: !477)
!487 = !DILocation(line: 314, column: 17, scope: !481)
!488 = !DILocation(line: 314, column: 17, scope: !477)
!489 = !DILocation(line: 315, column: 13, scope: !469)
!490 = !DILocation(line: 315, column: 68, scope: !477)
!491 = !DILocation(line: 315, column: 66, scope: !477)
!492 = !DILocation(line: 315, column: 64, scope: !477)
!493 = !DILocation(line: 315, column: 17, scope: !481)
!494 = !DILocation(line: 315, column: 17, scope: !477)
!495 = !DILocation(line: 316, column: 13, scope: !469)
!496 = !DILocation(line: 316, column: 68, scope: !477)
!497 = !DILocation(line: 316, column: 66, scope: !477)
!498 = !DILocation(line: 316, column: 64, scope: !477)
!499 = !DILocation(line: 316, column: 17, scope: !481)
!500 = !DILocation(line: 316, column: 17, scope: !477)
!501 = !DILocation(line: 312, column: 9, scope: !502)
!502 = !DILexicalBlockFile(scope: !453, file: !10, discriminator: 1)
!503 = !DILocation(line: 317, column: 9, scope: !469)
!504 = !DILocation(line: 319, column: 20, scope: !453)
!505 = !DILocation(line: 319, column: 5, scope: !453)
!506 = !DILocation(line: 320, column: 12, scope: !507)
!507 = distinct !DILexicalBlock(scope: !453, file: !10, line: 320, column: 5)
!508 = !DILocation(line: 320, column: 10, scope: !507)
!509 = !DILocation(line: 320, column: 17, scope: !510)
!510 = !DILexicalBlockFile(scope: !511, file: !10, discriminator: 1)
!511 = distinct !DILexicalBlock(scope: !507, file: !10, line: 320, column: 5)
!512 = !DILocation(line: 320, column: 19, scope: !510)
!513 = !DILocation(line: 320, column: 5, scope: !510)
!514 = !DILocation(line: 321, column: 24, scope: !515)
!515 = distinct !DILexicalBlock(scope: !511, file: !10, line: 320, column: 32)
!516 = !DILocation(line: 321, column: 33, scope: !515)
!517 = !DILocation(line: 321, column: 35, scope: !515)
!518 = !DILocation(line: 321, column: 31, scope: !515)
!519 = !DILocation(line: 321, column: 9, scope: !515)
!520 = !DILocation(line: 322, column: 25, scope: !515)
!521 = !DILocation(line: 322, column: 28, scope: !515)
!522 = !DILocation(line: 322, column: 9, scope: !523)
!523 = !DILexicalBlockFile(scope: !515, file: !10, discriminator: 1)
!524 = !DILocation(line: 323, column: 25, scope: !515)
!525 = !DILocation(line: 323, column: 28, scope: !515)
!526 = !DILocation(line: 323, column: 9, scope: !523)
!527 = !DILocation(line: 324, column: 10, scope: !515)
!528 = !DILocation(line: 324, column: 14, scope: !515)
!529 = !DILocation(line: 324, column: 18, scope: !515)
!530 = !DILocation(line: 324, column: 22, scope: !515)
!531 = !DILocation(line: 324, column: 9, scope: !515)
!532 = !DILocation(line: 325, column: 16, scope: !515)
!533 = !DILocation(line: 325, column: 19, scope: !515)
!534 = !DILocation(line: 325, column: 22, scope: !515)
!535 = !DILocation(line: 325, column: 25, scope: !515)
!536 = !DILocation(line: 325, column: 28, scope: !515)
!537 = !DILocation(line: 325, column: 9, scope: !515)
!538 = !DILocation(line: 326, column: 16, scope: !515)
!539 = !DILocation(line: 326, column: 19, scope: !515)
!540 = !DILocation(line: 326, column: 22, scope: !515)
!541 = !DILocation(line: 326, column: 9, scope: !515)
!542 = !DILocation(line: 327, column: 57, scope: !543)
!543 = distinct !DILexicalBlock(scope: !515, file: !10, line: 327, column: 13)
!544 = !DILocation(line: 327, column: 14, scope: !543)
!545 = !DILocation(line: 327, column: 13, scope: !515)
!546 = !DILocation(line: 328, column: 13, scope: !543)
!547 = !DILocation(line: 329, column: 5, scope: !515)
!548 = !DILocation(line: 320, column: 28, scope: !549)
!549 = !DILexicalBlockFile(scope: !511, file: !10, discriminator: 2)
!550 = !DILocation(line: 320, column: 5, scope: !549)
!551 = distinct !{!551, !552}
!552 = !DILocation(line: 320, column: 5, scope: !453)
!553 = !DILocation(line: 330, column: 8, scope: !453)
!554 = !DILocation(line: 330, column: 5, scope: !453)
!555 = !DILocation(line: 332, column: 13, scope: !453)
!556 = !DILocation(line: 332, column: 5, scope: !453)
!557 = !DILocation(line: 333, column: 13, scope: !453)
!558 = !DILocation(line: 333, column: 5, scope: !453)
!559 = !DILocation(line: 334, column: 13, scope: !453)
!560 = !DILocation(line: 334, column: 5, scope: !453)
!561 = !DILocation(line: 335, column: 13, scope: !453)
!562 = !DILocation(line: 335, column: 5, scope: !453)
!563 = !DILocation(line: 336, column: 13, scope: !453)
!564 = !DILocation(line: 336, column: 5, scope: !453)
!565 = !DILocation(line: 337, column: 12, scope: !453)
!566 = !DILocation(line: 337, column: 5, scope: !453)
!567 = !DILocalVariable(name: "a", scope: !47, file: !10, line: 386, type: !187)
!568 = !DILocation(line: 386, column: 13, scope: !47)
!569 = !DILocalVariable(name: "p", scope: !47, file: !10, line: 386, type: !187)
!570 = !DILocation(line: 386, column: 23, scope: !47)
!571 = !DILocalVariable(name: "m", scope: !47, file: !10, line: 386, type: !187)
!572 = !DILocation(line: 386, column: 34, scope: !47)
!573 = !DILocalVariable(name: "d", scope: !47, file: !10, line: 386, type: !187)
!574 = !DILocation(line: 386, column: 45, scope: !47)
!575 = !DILocalVariable(name: "e", scope: !47, file: !10, line: 386, type: !187)
!576 = !DILocation(line: 386, column: 56, scope: !47)
!577 = !DILocalVariable(name: "b", scope: !47, file: !10, line: 387, type: !187)
!578 = !DILocation(line: 387, column: 13, scope: !47)
!579 = !DILocalVariable(name: "n", scope: !47, file: !10, line: 387, type: !187)
!580 = !DILocation(line: 387, column: 23, scope: !47)
!581 = !DILocalVariable(name: "c", scope: !47, file: !10, line: 387, type: !187)
!582 = !DILocation(line: 387, column: 34, scope: !47)
!583 = !DILocalVariable(name: "mont", scope: !47, file: !10, line: 388, type: !584)
!584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !585, size: 64, align: 64)
!585 = !DIDerivedType(tag: DW_TAG_typedef, name: "BN_MONT_CTX", file: !32, line: 83, baseType: !586)
!586 = !DICompositeType(tag: DW_TAG_structure_type, name: "bn_mont_ctx_st", file: !32, line: 83, flags: DIFlagFwdDecl)
!587 = !DILocation(line: 388, column: 18, scope: !47)
!588 = !DILocalVariable(name: "st", scope: !47, file: !10, line: 389, type: !4)
!589 = !DILocation(line: 389, column: 9, scope: !47)
!590 = !DILocation(line: 391, column: 61, scope: !591)
!591 = distinct !DILexicalBlock(scope: !47, file: !10, line: 391, column: 9)
!592 = !DILocation(line: 391, column: 59, scope: !591)
!593 = !DILocation(line: 391, column: 57, scope: !591)
!594 = !DILocation(line: 391, column: 10, scope: !595)
!595 = !DILexicalBlockFile(scope: !591, file: !10, discriminator: 2)
!596 = !DILocation(line: 391, column: 10, scope: !591)
!597 = !DILocation(line: 392, column: 13, scope: !591)
!598 = !DILocation(line: 392, column: 68, scope: !599)
!599 = !DILexicalBlockFile(scope: !591, file: !10, discriminator: 1)
!600 = !DILocation(line: 392, column: 66, scope: !599)
!601 = !DILocation(line: 392, column: 64, scope: !599)
!602 = !DILocation(line: 392, column: 17, scope: !603)
!603 = !DILexicalBlockFile(scope: !599, file: !10, discriminator: 2)
!604 = !DILocation(line: 392, column: 17, scope: !599)
!605 = !DILocation(line: 393, column: 13, scope: !591)
!606 = !DILocation(line: 393, column: 68, scope: !599)
!607 = !DILocation(line: 393, column: 66, scope: !599)
!608 = !DILocation(line: 393, column: 64, scope: !599)
!609 = !DILocation(line: 393, column: 17, scope: !603)
!610 = !DILocation(line: 393, column: 17, scope: !599)
!611 = !DILocation(line: 394, column: 13, scope: !591)
!612 = !DILocation(line: 394, column: 68, scope: !599)
!613 = !DILocation(line: 394, column: 66, scope: !599)
!614 = !DILocation(line: 394, column: 64, scope: !599)
!615 = !DILocation(line: 394, column: 17, scope: !603)
!616 = !DILocation(line: 394, column: 17, scope: !599)
!617 = !DILocation(line: 395, column: 13, scope: !591)
!618 = !DILocation(line: 395, column: 68, scope: !599)
!619 = !DILocation(line: 395, column: 66, scope: !599)
!620 = !DILocation(line: 395, column: 64, scope: !599)
!621 = !DILocation(line: 395, column: 17, scope: !603)
!622 = !DILocation(line: 395, column: 17, scope: !599)
!623 = !DILocation(line: 396, column: 13, scope: !591)
!624 = !DILocation(line: 396, column: 68, scope: !599)
!625 = !DILocation(line: 396, column: 66, scope: !599)
!626 = !DILocation(line: 396, column: 64, scope: !599)
!627 = !DILocation(line: 396, column: 17, scope: !603)
!628 = !DILocation(line: 396, column: 17, scope: !599)
!629 = !DILocation(line: 397, column: 13, scope: !591)
!630 = !DILocation(line: 397, column: 68, scope: !599)
!631 = !DILocation(line: 397, column: 66, scope: !599)
!632 = !DILocation(line: 397, column: 64, scope: !599)
!633 = !DILocation(line: 397, column: 17, scope: !603)
!634 = !DILocation(line: 397, column: 17, scope: !599)
!635 = !DILocation(line: 398, column: 13, scope: !591)
!636 = !DILocation(line: 398, column: 68, scope: !599)
!637 = !DILocation(line: 398, column: 66, scope: !599)
!638 = !DILocation(line: 398, column: 64, scope: !599)
!639 = !DILocation(line: 398, column: 17, scope: !603)
!640 = !DILocation(line: 398, column: 17, scope: !599)
!641 = !DILocation(line: 399, column: 13, scope: !591)
!642 = !DILocation(line: 399, column: 83, scope: !599)
!643 = !DILocation(line: 399, column: 81, scope: !599)
!644 = !DILocation(line: 399, column: 76, scope: !599)
!645 = !DILocation(line: 399, column: 17, scope: !603)
!646 = !DILocation(line: 399, column: 17, scope: !599)
!647 = !DILocation(line: 391, column: 9, scope: !648)
!648 = !DILexicalBlockFile(scope: !47, file: !10, discriminator: 1)
!649 = !DILocation(line: 400, column: 9, scope: !591)
!650 = !DILocation(line: 402, column: 20, scope: !47)
!651 = !DILocation(line: 402, column: 5, scope: !47)
!652 = !DILocation(line: 404, column: 20, scope: !47)
!653 = !DILocation(line: 404, column: 5, scope: !47)
!654 = !DILocation(line: 405, column: 19, scope: !47)
!655 = !DILocation(line: 405, column: 6, scope: !47)
!656 = !DILocation(line: 406, column: 121, scope: !657)
!657 = distinct !DILexicalBlock(scope: !47, file: !10, line: 406, column: 9)
!658 = !DILocation(line: 406, column: 124, scope: !657)
!659 = !DILocation(line: 406, column: 127, scope: !657)
!660 = !DILocation(line: 406, column: 130, scope: !657)
!661 = !DILocation(line: 406, column: 133, scope: !657)
!662 = !DILocation(line: 406, column: 95, scope: !657)
!663 = !DILocation(line: 406, column: 12, scope: !657)
!664 = !DILocation(line: 406, column: 10, scope: !665)
!665 = !DILexicalBlockFile(scope: !657, file: !10, discriminator: 1)
!666 = !DILocation(line: 406, column: 10, scope: !657)
!667 = !DILocation(line: 406, column: 9, scope: !47)
!668 = !DILocation(line: 407, column: 9, scope: !657)
!669 = !DILocation(line: 408, column: 52, scope: !670)
!670 = distinct !DILexicalBlock(scope: !47, file: !10, line: 408, column: 9)
!671 = !DILocation(line: 408, column: 10, scope: !670)
!672 = !DILocation(line: 408, column: 9, scope: !47)
!673 = !DILocation(line: 409, column: 9, scope: !670)
!674 = !DILocation(line: 412, column: 5, scope: !47)
!675 = !DILocation(line: 417, column: 5, scope: !47)
!676 = !DILocation(line: 422, column: 5, scope: !47)
!677 = !DILocation(line: 427, column: 21, scope: !47)
!678 = !DILocation(line: 427, column: 27, scope: !47)
!679 = !DILocation(line: 427, column: 30, scope: !47)
!680 = !DILocation(line: 427, column: 5, scope: !47)
!681 = !DILocation(line: 428, column: 27, scope: !47)
!682 = !DILocation(line: 428, column: 30, scope: !47)
!683 = !DILocation(line: 428, column: 33, scope: !47)
!684 = !DILocation(line: 428, column: 36, scope: !47)
!685 = !DILocation(line: 428, column: 42, scope: !47)
!686 = !DILocation(line: 428, column: 5, scope: !47)
!687 = !DILocation(line: 429, column: 27, scope: !47)
!688 = !DILocation(line: 429, column: 30, scope: !47)
!689 = !DILocation(line: 429, column: 33, scope: !47)
!690 = !DILocation(line: 429, column: 36, scope: !47)
!691 = !DILocation(line: 429, column: 42, scope: !47)
!692 = !DILocation(line: 429, column: 5, scope: !47)
!693 = !DILocation(line: 430, column: 53, scope: !694)
!694 = distinct !DILexicalBlock(scope: !47, file: !10, line: 430, column: 9)
!695 = !DILocation(line: 430, column: 56, scope: !694)
!696 = !DILocation(line: 430, column: 10, scope: !694)
!697 = !DILocation(line: 430, column: 9, scope: !47)
!698 = !DILocation(line: 431, column: 9, scope: !694)
!699 = !DILocation(line: 434, column: 5, scope: !47)
!700 = !DILocation(line: 435, column: 5, scope: !47)
!701 = !DILocation(line: 436, column: 13, scope: !47)
!702 = !DILocation(line: 436, column: 5, scope: !47)
!703 = !DILocation(line: 437, column: 16, scope: !47)
!704 = !DILocation(line: 437, column: 9, scope: !47)
!705 = !DILocation(line: 437, column: 7, scope: !47)
!706 = !DILocation(line: 438, column: 21, scope: !47)
!707 = !DILocation(line: 438, column: 27, scope: !47)
!708 = !DILocation(line: 438, column: 30, scope: !47)
!709 = !DILocation(line: 438, column: 5, scope: !47)
!710 = !DILocation(line: 439, column: 27, scope: !47)
!711 = !DILocation(line: 439, column: 30, scope: !47)
!712 = !DILocation(line: 439, column: 33, scope: !47)
!713 = !DILocation(line: 439, column: 36, scope: !47)
!714 = !DILocation(line: 439, column: 42, scope: !47)
!715 = !DILocation(line: 439, column: 5, scope: !47)
!716 = !DILocation(line: 440, column: 27, scope: !47)
!717 = !DILocation(line: 440, column: 30, scope: !47)
!718 = !DILocation(line: 440, column: 33, scope: !47)
!719 = !DILocation(line: 440, column: 36, scope: !47)
!720 = !DILocation(line: 440, column: 42, scope: !47)
!721 = !DILocation(line: 440, column: 5, scope: !47)
!722 = !DILocation(line: 441, column: 53, scope: !723)
!723 = distinct !DILexicalBlock(scope: !47, file: !10, line: 441, column: 9)
!724 = !DILocation(line: 441, column: 56, scope: !723)
!725 = !DILocation(line: 441, column: 10, scope: !723)
!726 = !DILocation(line: 441, column: 9, scope: !47)
!727 = !DILocation(line: 442, column: 9, scope: !723)
!728 = !DILocation(line: 477, column: 9, scope: !729)
!729 = distinct !DILexicalBlock(scope: !47, file: !10, line: 445, column: 5)
!730 = !DILocation(line: 478, column: 9, scope: !729)
!731 = !DILocation(line: 480, column: 13, scope: !47)
!732 = !DILocation(line: 480, column: 5, scope: !47)
!733 = !DILocation(line: 481, column: 16, scope: !47)
!734 = !DILocation(line: 481, column: 9, scope: !47)
!735 = !DILocation(line: 481, column: 7, scope: !47)
!736 = !DILocation(line: 482, column: 21, scope: !47)
!737 = !DILocation(line: 482, column: 27, scope: !47)
!738 = !DILocation(line: 482, column: 30, scope: !47)
!739 = !DILocation(line: 482, column: 5, scope: !47)
!740 = !DILocation(line: 483, column: 110, scope: !741)
!741 = distinct !DILexicalBlock(scope: !47, file: !10, line: 483, column: 9)
!742 = !DILocation(line: 483, column: 113, scope: !741)
!743 = !DILocation(line: 483, column: 116, scope: !741)
!744 = !DILocation(line: 483, column: 119, scope: !741)
!745 = !DILocation(line: 483, column: 125, scope: !741)
!746 = !DILocation(line: 483, column: 88, scope: !741)
!747 = !DILocation(line: 483, column: 131, scope: !741)
!748 = !DILocation(line: 483, column: 10, scope: !749)
!749 = !DILexicalBlockFile(scope: !741, file: !10, discriminator: 2)
!750 = !DILocation(line: 483, column: 10, scope: !741)
!751 = !DILocation(line: 484, column: 13, scope: !741)
!752 = !DILocation(line: 484, column: 117, scope: !753)
!753 = !DILexicalBlockFile(scope: !741, file: !10, discriminator: 1)
!754 = !DILocation(line: 484, column: 120, scope: !753)
!755 = !DILocation(line: 484, column: 123, scope: !753)
!756 = !DILocation(line: 484, column: 126, scope: !753)
!757 = !DILocation(line: 484, column: 132, scope: !753)
!758 = !DILocation(line: 484, column: 95, scope: !753)
!759 = !DILocation(line: 484, column: 138, scope: !753)
!760 = !DILocation(line: 484, column: 17, scope: !761)
!761 = !DILexicalBlockFile(scope: !753, file: !10, discriminator: 2)
!762 = !DILocation(line: 484, column: 17, scope: !753)
!763 = !DILocation(line: 485, column: 13, scope: !741)
!764 = !DILocation(line: 485, column: 60, scope: !753)
!765 = !DILocation(line: 485, column: 63, scope: !753)
!766 = !DILocation(line: 485, column: 17, scope: !753)
!767 = !DILocation(line: 483, column: 9, scope: !648)
!768 = !DILocation(line: 486, column: 9, scope: !741)
!769 = !DILocation(line: 489, column: 5, scope: !47)
!770 = !DILocation(line: 493, column: 5, scope: !47)
!771 = !DILocation(line: 496, column: 21, scope: !47)
!772 = !DILocation(line: 496, column: 27, scope: !47)
!773 = !DILocation(line: 496, column: 30, scope: !47)
!774 = !DILocation(line: 496, column: 5, scope: !47)
!775 = !DILocation(line: 497, column: 111, scope: !776)
!776 = distinct !DILexicalBlock(scope: !47, file: !10, line: 497, column: 9)
!777 = !DILocation(line: 497, column: 114, scope: !776)
!778 = !DILocation(line: 497, column: 117, scope: !776)
!779 = !DILocation(line: 497, column: 120, scope: !776)
!780 = !DILocation(line: 497, column: 126, scope: !776)
!781 = !DILocation(line: 497, column: 89, scope: !776)
!782 = !DILocation(line: 497, column: 132, scope: !776)
!783 = !DILocation(line: 497, column: 10, scope: !784)
!784 = !DILexicalBlockFile(scope: !776, file: !10, discriminator: 1)
!785 = !DILocation(line: 497, column: 10, scope: !776)
!786 = !DILocation(line: 497, column: 9, scope: !47)
!787 = !DILocation(line: 498, column: 9, scope: !776)
!788 = !DILocation(line: 501, column: 5, scope: !47)
!789 = !DILocation(line: 506, column: 5, scope: !47)
!790 = !DILocation(line: 511, column: 5, scope: !47)
!791 = !DILocation(line: 516, column: 21, scope: !47)
!792 = !DILocation(line: 516, column: 27, scope: !47)
!793 = !DILocation(line: 516, column: 30, scope: !47)
!794 = !DILocation(line: 516, column: 5, scope: !47)
!795 = !DILocation(line: 517, column: 31, scope: !47)
!796 = !DILocation(line: 517, column: 34, scope: !47)
!797 = !DILocation(line: 517, column: 37, scope: !47)
!798 = !DILocation(line: 517, column: 40, scope: !47)
!799 = !DILocation(line: 517, column: 43, scope: !47)
!800 = !DILocation(line: 517, column: 48, scope: !47)
!801 = !DILocation(line: 517, column: 5, scope: !47)
!802 = !DILocation(line: 518, column: 21, scope: !47)
!803 = !DILocation(line: 518, column: 24, scope: !47)
!804 = !DILocation(line: 518, column: 27, scope: !47)
!805 = !DILocation(line: 518, column: 30, scope: !47)
!806 = !DILocation(line: 518, column: 33, scope: !47)
!807 = !DILocation(line: 518, column: 38, scope: !47)
!808 = !DILocation(line: 518, column: 5, scope: !47)
!809 = !DILocation(line: 519, column: 53, scope: !810)
!810 = distinct !DILexicalBlock(scope: !47, file: !10, line: 519, column: 9)
!811 = !DILocation(line: 519, column: 56, scope: !810)
!812 = !DILocation(line: 519, column: 10, scope: !810)
!813 = !DILocation(line: 519, column: 9, scope: !47)
!814 = !DILocation(line: 520, column: 9, scope: !810)
!815 = !DILocation(line: 526, column: 5, scope: !47)
!816 = !DILocation(line: 531, column: 5, scope: !47)
!817 = !DILocation(line: 536, column: 5, scope: !47)
!818 = !DILocation(line: 541, column: 21, scope: !47)
!819 = !DILocation(line: 541, column: 27, scope: !47)
!820 = !DILocation(line: 541, column: 30, scope: !47)
!821 = !DILocation(line: 541, column: 5, scope: !47)
!822 = !DILocation(line: 542, column: 31, scope: !47)
!823 = !DILocation(line: 542, column: 34, scope: !47)
!824 = !DILocation(line: 542, column: 37, scope: !47)
!825 = !DILocation(line: 542, column: 40, scope: !47)
!826 = !DILocation(line: 542, column: 43, scope: !47)
!827 = !DILocation(line: 542, column: 48, scope: !47)
!828 = !DILocation(line: 542, column: 5, scope: !47)
!829 = !DILocation(line: 543, column: 19, scope: !47)
!830 = !DILocation(line: 543, column: 6, scope: !47)
!831 = !DILocation(line: 544, column: 53, scope: !832)
!832 = distinct !DILexicalBlock(scope: !47, file: !10, line: 544, column: 9)
!833 = !DILocation(line: 544, column: 56, scope: !832)
!834 = !DILocation(line: 544, column: 10, scope: !832)
!835 = !DILocation(line: 544, column: 9, scope: !47)
!836 = !DILocation(line: 545, column: 9, scope: !832)
!837 = !DILocation(line: 548, column: 20, scope: !47)
!838 = !DILocation(line: 548, column: 5, scope: !47)
!839 = !DILocation(line: 549, column: 19, scope: !47)
!840 = !DILocation(line: 549, column: 6, scope: !47)
!841 = !DILocation(line: 550, column: 121, scope: !842)
!842 = distinct !DILexicalBlock(scope: !47, file: !10, line: 550, column: 9)
!843 = !DILocation(line: 550, column: 124, scope: !842)
!844 = !DILocation(line: 550, column: 127, scope: !842)
!845 = !DILocation(line: 550, column: 130, scope: !842)
!846 = !DILocation(line: 550, column: 133, scope: !842)
!847 = !DILocation(line: 550, column: 95, scope: !842)
!848 = !DILocation(line: 550, column: 12, scope: !842)
!849 = !DILocation(line: 550, column: 10, scope: !850)
!850 = !DILexicalBlockFile(scope: !842, file: !10, discriminator: 2)
!851 = !DILocation(line: 550, column: 10, scope: !842)
!852 = !DILocation(line: 551, column: 13, scope: !842)
!853 = !DILocation(line: 551, column: 60, scope: !854)
!854 = !DILexicalBlockFile(scope: !842, file: !10, discriminator: 1)
!855 = !DILocation(line: 551, column: 17, scope: !854)
!856 = !DILocation(line: 550, column: 9, scope: !648)
!857 = !DILocation(line: 552, column: 9, scope: !842)
!858 = !DILocation(line: 559, column: 19, scope: !47)
!859 = !DILocation(line: 559, column: 6, scope: !47)
!860 = !DILocation(line: 560, column: 21, scope: !47)
!861 = !DILocation(line: 560, column: 27, scope: !47)
!862 = !DILocation(line: 560, column: 30, scope: !47)
!863 = !DILocation(line: 560, column: 5, scope: !47)
!864 = !DILocation(line: 561, column: 101, scope: !865)
!865 = distinct !DILexicalBlock(scope: !47, file: !10, line: 561, column: 9)
!866 = !DILocation(line: 561, column: 104, scope: !865)
!867 = !DILocation(line: 561, column: 107, scope: !865)
!868 = !DILocation(line: 561, column: 113, scope: !865)
!869 = !DILocation(line: 561, column: 82, scope: !865)
!870 = !DILocation(line: 561, column: 119, scope: !865)
!871 = !DILocation(line: 561, column: 10, scope: !872)
!872 = !DILexicalBlockFile(scope: !865, file: !10, discriminator: 2)
!873 = !DILocation(line: 561, column: 10, scope: !865)
!874 = !DILocation(line: 562, column: 13, scope: !865)
!875 = !DILocation(line: 562, column: 128, scope: !876)
!876 = !DILexicalBlockFile(scope: !865, file: !10, discriminator: 1)
!877 = !DILocation(line: 562, column: 131, scope: !876)
!878 = !DILocation(line: 562, column: 134, scope: !876)
!879 = !DILocation(line: 562, column: 137, scope: !876)
!880 = !DILocation(line: 562, column: 140, scope: !876)
!881 = !DILocation(line: 562, column: 102, scope: !876)
!882 = !DILocation(line: 562, column: 19, scope: !876)
!883 = !DILocation(line: 562, column: 17, scope: !884)
!884 = !DILexicalBlockFile(scope: !876, file: !10, discriminator: 2)
!885 = !DILocation(line: 562, column: 17, scope: !876)
!886 = !DILocation(line: 563, column: 13, scope: !865)
!887 = !DILocation(line: 563, column: 106, scope: !876)
!888 = !DILocation(line: 563, column: 109, scope: !876)
!889 = !DILocation(line: 563, column: 112, scope: !876)
!890 = !DILocation(line: 563, column: 115, scope: !876)
!891 = !DILocation(line: 563, column: 118, scope: !876)
!892 = !DILocation(line: 563, column: 88, scope: !876)
!893 = !DILocation(line: 563, column: 124, scope: !876)
!894 = !DILocation(line: 563, column: 17, scope: !884)
!895 = !DILocation(line: 563, column: 17, scope: !876)
!896 = !DILocation(line: 564, column: 13, scope: !865)
!897 = !DILocation(line: 564, column: 60, scope: !876)
!898 = !DILocation(line: 564, column: 63, scope: !876)
!899 = !DILocation(line: 564, column: 17, scope: !876)
!900 = !DILocation(line: 561, column: 9, scope: !648)
!901 = !DILocation(line: 565, column: 9, scope: !865)
!902 = !DILocation(line: 568, column: 20, scope: !47)
!903 = !DILocation(line: 568, column: 5, scope: !47)
!904 = !DILocation(line: 569, column: 121, scope: !905)
!905 = distinct !DILexicalBlock(scope: !47, file: !10, line: 569, column: 9)
!906 = !DILocation(line: 569, column: 124, scope: !905)
!907 = !DILocation(line: 569, column: 127, scope: !905)
!908 = !DILocation(line: 569, column: 130, scope: !905)
!909 = !DILocation(line: 569, column: 133, scope: !905)
!910 = !DILocation(line: 569, column: 95, scope: !905)
!911 = !DILocation(line: 569, column: 12, scope: !905)
!912 = !DILocation(line: 569, column: 10, scope: !913)
!913 = !DILexicalBlockFile(scope: !905, file: !10, discriminator: 2)
!914 = !DILocation(line: 569, column: 10, scope: !905)
!915 = !DILocation(line: 570, column: 13, scope: !905)
!916 = !DILocation(line: 570, column: 106, scope: !917)
!917 = !DILexicalBlockFile(scope: !905, file: !10, discriminator: 1)
!918 = !DILocation(line: 570, column: 109, scope: !917)
!919 = !DILocation(line: 570, column: 112, scope: !917)
!920 = !DILocation(line: 570, column: 115, scope: !917)
!921 = !DILocation(line: 570, column: 118, scope: !917)
!922 = !DILocation(line: 570, column: 88, scope: !917)
!923 = !DILocation(line: 570, column: 124, scope: !917)
!924 = !DILocation(line: 570, column: 17, scope: !925)
!925 = !DILexicalBlockFile(scope: !917, file: !10, discriminator: 2)
!926 = !DILocation(line: 570, column: 17, scope: !917)
!927 = !DILocation(line: 571, column: 13, scope: !905)
!928 = !DILocation(line: 571, column: 60, scope: !917)
!929 = !DILocation(line: 571, column: 63, scope: !917)
!930 = !DILocation(line: 571, column: 17, scope: !917)
!931 = !DILocation(line: 569, column: 9, scope: !648)
!932 = !DILocation(line: 572, column: 9, scope: !905)
!933 = !DILocation(line: 574, column: 8, scope: !47)
!934 = !DILocation(line: 574, column: 5, scope: !47)
!935 = !DILocation(line: 577, column: 22, scope: !47)
!936 = !DILocation(line: 577, column: 5, scope: !47)
!937 = !DILocation(line: 578, column: 13, scope: !47)
!938 = !DILocation(line: 578, column: 5, scope: !47)
!939 = !DILocation(line: 579, column: 13, scope: !47)
!940 = !DILocation(line: 579, column: 5, scope: !47)
!941 = !DILocation(line: 580, column: 13, scope: !47)
!942 = !DILocation(line: 580, column: 5, scope: !47)
!943 = !DILocation(line: 581, column: 13, scope: !47)
!944 = !DILocation(line: 581, column: 5, scope: !47)
!945 = !DILocation(line: 582, column: 13, scope: !47)
!946 = !DILocation(line: 582, column: 5, scope: !47)
!947 = !DILocation(line: 583, column: 13, scope: !47)
!948 = !DILocation(line: 583, column: 5, scope: !47)
!949 = !DILocation(line: 584, column: 13, scope: !47)
!950 = !DILocation(line: 584, column: 5, scope: !47)
!951 = !DILocation(line: 585, column: 13, scope: !47)
!952 = !DILocation(line: 585, column: 5, scope: !47)
!953 = !DILocation(line: 586, column: 12, scope: !47)
!954 = !DILocation(line: 586, column: 5, scope: !47)
!955 = distinct !DISubprogram(name: "test_kronecker", scope: !10, file: !10, line: 965, type: !39, isLocal: true, isDefinition: true, scopeLine: 966, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!956 = !DILocalVariable(name: "a", scope: !955, file: !10, line: 967, type: !187)
!957 = !DILocation(line: 967, column: 13, scope: !955)
!958 = !DILocalVariable(name: "b", scope: !955, file: !10, line: 967, type: !187)
!959 = !DILocation(line: 967, column: 23, scope: !955)
!960 = !DILocalVariable(name: "r", scope: !955, file: !10, line: 967, type: !187)
!961 = !DILocation(line: 967, column: 34, scope: !955)
!962 = !DILocalVariable(name: "t", scope: !955, file: !10, line: 967, type: !187)
!963 = !DILocation(line: 967, column: 45, scope: !955)
!964 = !DILocalVariable(name: "i", scope: !955, file: !10, line: 968, type: !4)
!965 = !DILocation(line: 968, column: 9, scope: !955)
!966 = !DILocalVariable(name: "legendre", scope: !955, file: !10, line: 968, type: !4)
!967 = !DILocation(line: 968, column: 12, scope: !955)
!968 = !DILocalVariable(name: "kronecker", scope: !955, file: !10, line: 968, type: !4)
!969 = !DILocation(line: 968, column: 22, scope: !955)
!970 = !DILocalVariable(name: "st", scope: !955, file: !10, line: 968, type: !4)
!971 = !DILocation(line: 968, column: 33, scope: !955)
!972 = !DILocation(line: 970, column: 61, scope: !973)
!973 = distinct !DILexicalBlock(scope: !955, file: !10, line: 970, column: 9)
!974 = !DILocation(line: 970, column: 59, scope: !973)
!975 = !DILocation(line: 970, column: 57, scope: !973)
!976 = !DILocation(line: 970, column: 10, scope: !977)
!977 = !DILexicalBlockFile(scope: !973, file: !10, discriminator: 2)
!978 = !DILocation(line: 970, column: 10, scope: !973)
!979 = !DILocation(line: 971, column: 13, scope: !973)
!980 = !DILocation(line: 971, column: 68, scope: !981)
!981 = !DILexicalBlockFile(scope: !973, file: !10, discriminator: 1)
!982 = !DILocation(line: 971, column: 66, scope: !981)
!983 = !DILocation(line: 971, column: 64, scope: !981)
!984 = !DILocation(line: 971, column: 17, scope: !985)
!985 = !DILexicalBlockFile(scope: !981, file: !10, discriminator: 2)
!986 = !DILocation(line: 971, column: 17, scope: !981)
!987 = !DILocation(line: 972, column: 13, scope: !973)
!988 = !DILocation(line: 972, column: 68, scope: !981)
!989 = !DILocation(line: 972, column: 66, scope: !981)
!990 = !DILocation(line: 972, column: 64, scope: !981)
!991 = !DILocation(line: 972, column: 17, scope: !985)
!992 = !DILocation(line: 972, column: 17, scope: !981)
!993 = !DILocation(line: 973, column: 13, scope: !973)
!994 = !DILocation(line: 973, column: 68, scope: !981)
!995 = !DILocation(line: 973, column: 66, scope: !981)
!996 = !DILocation(line: 973, column: 64, scope: !981)
!997 = !DILocation(line: 973, column: 17, scope: !985)
!998 = !DILocation(line: 973, column: 17, scope: !981)
!999 = !DILocation(line: 970, column: 9, scope: !1000)
!1000 = !DILexicalBlockFile(scope: !955, file: !10, discriminator: 1)
!1001 = !DILocation(line: 974, column: 9, scope: !973)
!1002 = !DILocation(line: 986, column: 117, scope: !1003)
!1003 = distinct !DILexicalBlock(scope: !955, file: !10, line: 986, column: 9)
!1004 = !DILocation(line: 986, column: 96, scope: !1003)
!1005 = !DILocation(line: 986, column: 12, scope: !1003)
!1006 = !DILocation(line: 986, column: 10, scope: !1007)
!1007 = !DILexicalBlockFile(scope: !1003, file: !10, discriminator: 1)
!1008 = !DILocation(line: 986, column: 10, scope: !1003)
!1009 = !DILocation(line: 986, column: 9, scope: !955)
!1010 = !DILocation(line: 987, column: 9, scope: !1003)
!1011 = !DILocation(line: 988, column: 21, scope: !955)
!1012 = !DILocation(line: 988, column: 24, scope: !955)
!1013 = !DILocation(line: 988, column: 5, scope: !1000)
!1014 = !DILocation(line: 990, column: 12, scope: !1015)
!1015 = distinct !DILexicalBlock(scope: !955, file: !10, line: 990, column: 5)
!1016 = !DILocation(line: 990, column: 10, scope: !1015)
!1017 = !DILocation(line: 990, column: 17, scope: !1018)
!1018 = !DILexicalBlockFile(scope: !1019, file: !10, discriminator: 1)
!1019 = distinct !DILexicalBlock(scope: !1015, file: !10, line: 990, column: 5)
!1020 = !DILocation(line: 990, column: 19, scope: !1018)
!1021 = !DILocation(line: 990, column: 5, scope: !1018)
!1022 = !DILocation(line: 991, column: 94, scope: !1023)
!1023 = distinct !DILexicalBlock(scope: !1024, file: !10, line: 991, column: 13)
!1024 = distinct !DILexicalBlock(scope: !1019, file: !10, line: 990, column: 32)
!1025 = !DILocation(line: 991, column: 79, scope: !1023)
!1026 = !DILocation(line: 991, column: 109, scope: !1023)
!1027 = !DILocation(line: 991, column: 14, scope: !1028)
!1028 = !DILexicalBlockFile(scope: !1023, file: !10, discriminator: 1)
!1029 = !DILocation(line: 991, column: 14, scope: !1023)
!1030 = !DILocation(line: 991, column: 13, scope: !1024)
!1031 = !DILocation(line: 992, column: 13, scope: !1023)
!1032 = !DILocation(line: 993, column: 25, scope: !1024)
!1033 = !DILocation(line: 993, column: 28, scope: !1024)
!1034 = !DILocation(line: 993, column: 9, scope: !1035)
!1035 = !DILexicalBlockFile(scope: !1024, file: !10, discriminator: 1)
!1036 = !DILocation(line: 996, column: 72, scope: !1037)
!1037 = distinct !DILexicalBlock(scope: !1024, file: !10, line: 996, column: 13)
!1038 = !DILocation(line: 996, column: 75, scope: !1037)
!1039 = !DILocation(line: 996, column: 64, scope: !1037)
!1040 = !DILocation(line: 996, column: 79, scope: !1037)
!1041 = !DILocation(line: 996, column: 14, scope: !1042)
!1042 = !DILexicalBlockFile(scope: !1037, file: !10, discriminator: 1)
!1043 = !DILocation(line: 996, column: 14, scope: !1037)
!1044 = !DILocation(line: 996, column: 13, scope: !1024)
!1045 = !DILocation(line: 997, column: 13, scope: !1037)
!1046 = !DILocation(line: 998, column: 25, scope: !1024)
!1047 = !DILocation(line: 998, column: 9, scope: !1024)
!1048 = !DILocation(line: 999, column: 80, scope: !1049)
!1049 = distinct !DILexicalBlock(scope: !1024, file: !10, line: 999, column: 13)
!1050 = !DILocation(line: 999, column: 68, scope: !1049)
!1051 = !DILocation(line: 999, column: 87, scope: !1049)
!1052 = !DILocation(line: 999, column: 14, scope: !1053)
!1053 = !DILexicalBlockFile(scope: !1049, file: !10, discriminator: 1)
!1054 = !DILocation(line: 999, column: 14, scope: !1049)
!1055 = !DILocation(line: 999, column: 13, scope: !1024)
!1056 = !DILocation(line: 1000, column: 13, scope: !1049)
!1057 = !DILocation(line: 1001, column: 79, scope: !1058)
!1058 = distinct !DILexicalBlock(scope: !1024, file: !10, line: 1001, column: 13)
!1059 = !DILocation(line: 1001, column: 82, scope: !1058)
!1060 = !DILocation(line: 1001, column: 68, scope: !1058)
!1061 = !DILocation(line: 1001, column: 86, scope: !1058)
!1062 = !DILocation(line: 1001, column: 14, scope: !1063)
!1063 = !DILexicalBlockFile(scope: !1058, file: !10, discriminator: 1)
!1064 = !DILocation(line: 1001, column: 14, scope: !1058)
!1065 = !DILocation(line: 1001, column: 13, scope: !1024)
!1066 = !DILocation(line: 1002, column: 13, scope: !1058)
!1067 = !DILocation(line: 1004, column: 25, scope: !1024)
!1068 = !DILocation(line: 1004, column: 9, scope: !1024)
!1069 = !DILocation(line: 1006, column: 100, scope: !1070)
!1070 = distinct !DILexicalBlock(scope: !1024, file: !10, line: 1006, column: 13)
!1071 = !DILocation(line: 1006, column: 103, scope: !1070)
!1072 = !DILocation(line: 1006, column: 106, scope: !1070)
!1073 = !DILocation(line: 1006, column: 109, scope: !1070)
!1074 = !DILocation(line: 1006, column: 112, scope: !1070)
!1075 = !DILocation(line: 1006, column: 84, scope: !1070)
!1076 = !DILocation(line: 1006, column: 118, scope: !1070)
!1077 = !DILocation(line: 1006, column: 14, scope: !1078)
!1078 = !DILexicalBlockFile(scope: !1070, file: !10, discriminator: 1)
!1079 = !DILocation(line: 1006, column: 14, scope: !1070)
!1080 = !DILocation(line: 1006, column: 13, scope: !1024)
!1081 = !DILocation(line: 1007, column: 13, scope: !1070)
!1082 = !DILocation(line: 1008, column: 25, scope: !1024)
!1083 = !DILocation(line: 1008, column: 9, scope: !1024)
!1084 = !DILocation(line: 1010, column: 24, scope: !1085)
!1085 = distinct !DILexicalBlock(scope: !1024, file: !10, line: 1010, column: 13)
!1086 = !DILocation(line: 1010, column: 13, scope: !1085)
!1087 = !DILocation(line: 1010, column: 13, scope: !1024)
!1088 = !DILocation(line: 1011, column: 22, scope: !1085)
!1089 = !DILocation(line: 1011, column: 13, scope: !1085)
!1090 = !DILocation(line: 1012, column: 29, scope: !1091)
!1091 = distinct !DILexicalBlock(scope: !1085, file: !10, line: 1012, column: 18)
!1092 = !DILocation(line: 1012, column: 18, scope: !1091)
!1093 = !DILocation(line: 1012, column: 18, scope: !1085)
!1094 = !DILocation(line: 1013, column: 22, scope: !1091)
!1095 = !DILocation(line: 1013, column: 13, scope: !1091)
!1096 = !DILocation(line: 1015, column: 85, scope: !1097)
!1097 = distinct !DILexicalBlock(scope: !1098, file: !10, line: 1015, column: 17)
!1098 = distinct !DILexicalBlock(scope: !1091, file: !10, line: 1014, column: 14)
!1099 = !DILocation(line: 1015, column: 73, scope: !1097)
!1100 = !DILocation(line: 1015, column: 92, scope: !1097)
!1101 = !DILocation(line: 1015, column: 18, scope: !1102)
!1102 = !DILexicalBlockFile(scope: !1097, file: !10, discriminator: 1)
!1103 = !DILocation(line: 1015, column: 18, scope: !1097)
!1104 = !DILocation(line: 1015, column: 17, scope: !1098)
!1105 = !DILocation(line: 1016, column: 17, scope: !1097)
!1106 = !DILocation(line: 1017, column: 83, scope: !1107)
!1107 = distinct !DILexicalBlock(scope: !1098, file: !10, line: 1017, column: 17)
!1108 = !DILocation(line: 1017, column: 86, scope: !1107)
!1109 = !DILocation(line: 1017, column: 75, scope: !1107)
!1110 = !DILocation(line: 1017, column: 18, scope: !1111)
!1111 = !DILexicalBlockFile(scope: !1107, file: !10, discriminator: 1)
!1112 = !DILocation(line: 1017, column: 18, scope: !1107)
!1113 = !DILocation(line: 1017, column: 17, scope: !1098)
!1114 = !DILocation(line: 1018, column: 17, scope: !1115)
!1115 = distinct !DILexicalBlock(scope: !1107, file: !10, line: 1017, column: 94)
!1116 = !DILocation(line: 1019, column: 17, scope: !1115)
!1117 = !DILocation(line: 1021, column: 22, scope: !1098)
!1118 = !DILocation(line: 1024, column: 119, scope: !1119)
!1119 = distinct !DILexicalBlock(scope: !1024, file: !10, line: 1024, column: 13)
!1120 = !DILocation(line: 1024, column: 122, scope: !1119)
!1121 = !DILocation(line: 1024, column: 125, scope: !1119)
!1122 = !DILocation(line: 1024, column: 106, scope: !1119)
!1123 = !DILocation(line: 1024, column: 104, scope: !1119)
!1124 = !DILocation(line: 1024, column: 14, scope: !1125)
!1125 = !DILexicalBlockFile(scope: !1119, file: !10, discriminator: 1)
!1126 = !DILocation(line: 1024, column: 14, scope: !1119)
!1127 = !DILocation(line: 1024, column: 13, scope: !1024)
!1128 = !DILocation(line: 1025, column: 13, scope: !1119)
!1129 = !DILocation(line: 1027, column: 28, scope: !1130)
!1130 = distinct !DILexicalBlock(scope: !1024, file: !10, line: 1027, column: 13)
!1131 = !DILocation(line: 1027, column: 13, scope: !1130)
!1132 = !DILocation(line: 1027, column: 31, scope: !1130)
!1133 = !DILocation(line: 1027, column: 49, scope: !1134)
!1134 = !DILexicalBlockFile(scope: !1130, file: !10, discriminator: 1)
!1135 = !DILocation(line: 1027, column: 34, scope: !1134)
!1136 = !DILocation(line: 1027, column: 13, scope: !1134)
!1137 = !DILocation(line: 1028, column: 26, scope: !1130)
!1138 = !DILocation(line: 1028, column: 25, scope: !1130)
!1139 = !DILocation(line: 1028, column: 23, scope: !1130)
!1140 = !DILocation(line: 1028, column: 13, scope: !1130)
!1141 = !DILocation(line: 1030, column: 74, scope: !1142)
!1142 = distinct !DILexicalBlock(scope: !1024, file: !10, line: 1030, column: 13)
!1143 = !DILocation(line: 1030, column: 84, scope: !1142)
!1144 = !DILocation(line: 1030, column: 14, scope: !1142)
!1145 = !DILocation(line: 1030, column: 13, scope: !1024)
!1146 = !DILocation(line: 1031, column: 13, scope: !1142)
!1147 = !DILocation(line: 1032, column: 5, scope: !1024)
!1148 = !DILocation(line: 990, column: 28, scope: !1149)
!1149 = !DILexicalBlockFile(scope: !1019, file: !10, discriminator: 2)
!1150 = !DILocation(line: 990, column: 5, scope: !1149)
!1151 = distinct !{!1151, !1152}
!1152 = !DILocation(line: 990, column: 5, scope: !955)
!1153 = !DILocation(line: 1034, column: 8, scope: !955)
!1154 = !DILocation(line: 1034, column: 5, scope: !955)
!1155 = !DILocation(line: 1036, column: 13, scope: !955)
!1156 = !DILocation(line: 1036, column: 5, scope: !955)
!1157 = !DILocation(line: 1037, column: 13, scope: !955)
!1158 = !DILocation(line: 1037, column: 5, scope: !955)
!1159 = !DILocation(line: 1038, column: 13, scope: !955)
!1160 = !DILocation(line: 1038, column: 5, scope: !955)
!1161 = !DILocation(line: 1039, column: 13, scope: !955)
!1162 = !DILocation(line: 1039, column: 5, scope: !955)
!1163 = !DILocation(line: 1040, column: 12, scope: !955)
!1164 = !DILocation(line: 1040, column: 5, scope: !955)
!1165 = distinct !DISubprogram(name: "test_rand", scope: !10, file: !10, line: 1897, type: !39, isLocal: true, isDefinition: true, scopeLine: 1898, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1166 = !DILocalVariable(name: "bn", scope: !1165, file: !10, line: 1899, type: !187)
!1167 = !DILocation(line: 1899, column: 13, scope: !1165)
!1168 = !DILocalVariable(name: "st", scope: !1165, file: !10, line: 1900, type: !4)
!1169 = !DILocation(line: 1900, column: 9, scope: !1165)
!1170 = !DILocation(line: 1902, column: 64, scope: !1171)
!1171 = distinct !DILexicalBlock(scope: !1165, file: !10, line: 1902, column: 9)
!1172 = !DILocation(line: 1902, column: 62, scope: !1171)
!1173 = !DILocation(line: 1902, column: 59, scope: !1171)
!1174 = !DILocation(line: 1902, column: 10, scope: !1175)
!1175 = !DILexicalBlockFile(scope: !1171, file: !10, discriminator: 1)
!1176 = !DILocation(line: 1902, column: 10, scope: !1171)
!1177 = !DILocation(line: 1902, column: 9, scope: !1165)
!1178 = !DILocation(line: 1903, column: 9, scope: !1171)
!1179 = !DILocation(line: 1906, column: 79, scope: !1180)
!1180 = distinct !DILexicalBlock(scope: !1165, file: !10, line: 1906, column: 9)
!1181 = !DILocation(line: 1906, column: 71, scope: !1180)
!1182 = !DILocation(line: 1906, column: 95, scope: !1180)
!1183 = !DILocation(line: 1906, column: 10, scope: !1184)
!1184 = !DILexicalBlockFile(scope: !1180, file: !10, discriminator: 2)
!1185 = !DILocation(line: 1906, column: 10, scope: !1180)
!1186 = !DILocation(line: 1907, column: 13, scope: !1180)
!1187 = !DILocation(line: 1907, column: 86, scope: !1188)
!1188 = !DILexicalBlockFile(scope: !1180, file: !10, discriminator: 1)
!1189 = !DILocation(line: 1907, column: 78, scope: !1188)
!1190 = !DILocation(line: 1907, column: 102, scope: !1188)
!1191 = !DILocation(line: 1907, column: 17, scope: !1192)
!1192 = !DILexicalBlockFile(scope: !1188, file: !10, discriminator: 2)
!1193 = !DILocation(line: 1907, column: 17, scope: !1188)
!1194 = !DILocation(line: 1908, column: 13, scope: !1180)
!1195 = !DILocation(line: 1908, column: 85, scope: !1188)
!1196 = !DILocation(line: 1908, column: 77, scope: !1188)
!1197 = !DILocation(line: 1908, column: 101, scope: !1188)
!1198 = !DILocation(line: 1908, column: 17, scope: !1192)
!1199 = !DILocation(line: 1908, column: 17, scope: !1188)
!1200 = !DILocation(line: 1909, column: 13, scope: !1180)
!1201 = !DILocation(line: 1909, column: 61, scope: !1188)
!1202 = !DILocation(line: 1909, column: 17, scope: !1188)
!1203 = !DILocation(line: 1910, column: 13, scope: !1180)
!1204 = !DILocation(line: 1910, column: 86, scope: !1188)
!1205 = !DILocation(line: 1910, column: 78, scope: !1188)
!1206 = !DILocation(line: 1910, column: 102, scope: !1188)
!1207 = !DILocation(line: 1910, column: 17, scope: !1192)
!1208 = !DILocation(line: 1910, column: 17, scope: !1188)
!1209 = !DILocation(line: 1911, column: 13, scope: !1180)
!1210 = !DILocation(line: 1911, column: 86, scope: !1188)
!1211 = !DILocation(line: 1911, column: 78, scope: !1188)
!1212 = !DILocation(line: 1911, column: 103, scope: !1188)
!1213 = !DILocation(line: 1911, column: 17, scope: !1192)
!1214 = !DILocation(line: 1911, column: 17, scope: !1188)
!1215 = !DILocation(line: 1912, column: 13, scope: !1180)
!1216 = !DILocation(line: 1912, column: 61, scope: !1188)
!1217 = !DILocation(line: 1912, column: 17, scope: !1188)
!1218 = !DILocation(line: 1913, column: 13, scope: !1180)
!1219 = !DILocation(line: 1913, column: 85, scope: !1188)
!1220 = !DILocation(line: 1913, column: 77, scope: !1188)
!1221 = !DILocation(line: 1913, column: 101, scope: !1188)
!1222 = !DILocation(line: 1913, column: 17, scope: !1192)
!1223 = !DILocation(line: 1913, column: 17, scope: !1188)
!1224 = !DILocation(line: 1914, column: 13, scope: !1180)
!1225 = !DILocation(line: 1914, column: 67, scope: !1188)
!1226 = !DILocation(line: 1914, column: 17, scope: !1188)
!1227 = !DILocation(line: 1906, column: 9, scope: !1228)
!1228 = !DILexicalBlockFile(scope: !1165, file: !10, discriminator: 1)
!1229 = !DILocation(line: 1915, column: 9, scope: !1180)
!1230 = !DILocation(line: 1917, column: 8, scope: !1165)
!1231 = !DILocation(line: 1917, column: 5, scope: !1165)
!1232 = !DILocation(line: 1919, column: 13, scope: !1165)
!1233 = !DILocation(line: 1919, column: 5, scope: !1165)
!1234 = !DILocation(line: 1920, column: 12, scope: !1165)
!1235 = !DILocation(line: 1920, column: 5, scope: !1165)
!1236 = !DILocation(line: 1921, column: 1, scope: !1165)
!1237 = distinct !DISubprogram(name: "test_bn2padded", scope: !10, file: !10, line: 1603, type: !39, isLocal: true, isDefinition: true, scopeLine: 1604, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1238 = !DILocation(line: 1660, column: 12, scope: !1237)
!1239 = !DILocation(line: 1660, column: 16, scope: !1237)
!1240 = !DILocation(line: 1660, column: 5, scope: !1237)
!1241 = distinct !DISubprogram(name: "test_dec2bn", scope: !10, file: !10, line: 1664, type: !39, isLocal: true, isDefinition: true, scopeLine: 1665, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1242 = !DILocalVariable(name: "bn", scope: !1241, file: !10, line: 1666, type: !187)
!1243 = !DILocation(line: 1666, column: 13, scope: !1241)
!1244 = !DILocalVariable(name: "st", scope: !1241, file: !10, line: 1667, type: !4)
!1245 = !DILocation(line: 1667, column: 9, scope: !1241)
!1246 = !DILocation(line: 1669, column: 76, scope: !1247)
!1247 = distinct !DILexicalBlock(scope: !1241, file: !10, line: 1669, column: 9)
!1248 = !DILocation(line: 1669, column: 10, scope: !1249)
!1249 = !DILexicalBlockFile(scope: !1247, file: !10, discriminator: 2)
!1250 = !DILocation(line: 1669, column: 10, scope: !1247)
!1251 = !DILocation(line: 1670, column: 13, scope: !1247)
!1252 = !DILocation(line: 1670, column: 67, scope: !1253)
!1253 = !DILexicalBlockFile(scope: !1247, file: !10, discriminator: 1)
!1254 = !DILocation(line: 1670, column: 17, scope: !1253)
!1255 = !DILocation(line: 1671, column: 13, scope: !1247)
!1256 = !DILocation(line: 1671, column: 62, scope: !1253)
!1257 = !DILocation(line: 1671, column: 17, scope: !1253)
!1258 = !DILocation(line: 1672, column: 13, scope: !1247)
!1259 = !DILocation(line: 1672, column: 62, scope: !1253)
!1260 = !DILocation(line: 1672, column: 17, scope: !1253)
!1261 = !DILocation(line: 1673, column: 13, scope: !1247)
!1262 = !DILocation(line: 1673, column: 62, scope: !1253)
!1263 = !DILocation(line: 1673, column: 17, scope: !1253)
!1264 = !DILocation(line: 1674, column: 13, scope: !1247)
!1265 = !DILocation(line: 1674, column: 59, scope: !1253)
!1266 = !DILocation(line: 1674, column: 17, scope: !1253)
!1267 = !DILocation(line: 1669, column: 9, scope: !1268)
!1268 = !DILexicalBlockFile(scope: !1241, file: !10, discriminator: 1)
!1269 = !DILocation(line: 1675, column: 9, scope: !1247)
!1270 = !DILocation(line: 1676, column: 13, scope: !1241)
!1271 = !DILocation(line: 1676, column: 5, scope: !1241)
!1272 = !DILocation(line: 1677, column: 8, scope: !1241)
!1273 = !DILocation(line: 1679, column: 78, scope: !1274)
!1274 = distinct !DILexicalBlock(scope: !1241, file: !10, line: 1679, column: 9)
!1275 = !DILocation(line: 1679, column: 10, scope: !1276)
!1276 = !DILexicalBlockFile(scope: !1274, file: !10, discriminator: 2)
!1277 = !DILocation(line: 1679, column: 10, scope: !1274)
!1278 = !DILocation(line: 1680, column: 13, scope: !1274)
!1279 = !DILocation(line: 1680, column: 69, scope: !1280)
!1280 = !DILexicalBlockFile(scope: !1274, file: !10, discriminator: 1)
!1281 = !DILocation(line: 1680, column: 17, scope: !1280)
!1282 = !DILocation(line: 1681, column: 13, scope: !1274)
!1283 = !DILocation(line: 1681, column: 62, scope: !1280)
!1284 = !DILocation(line: 1681, column: 17, scope: !1280)
!1285 = !DILocation(line: 1682, column: 13, scope: !1274)
!1286 = !DILocation(line: 1682, column: 62, scope: !1280)
!1287 = !DILocation(line: 1682, column: 17, scope: !1280)
!1288 = !DILocation(line: 1683, column: 13, scope: !1274)
!1289 = !DILocation(line: 1683, column: 62, scope: !1280)
!1290 = !DILocation(line: 1683, column: 17, scope: !1280)
!1291 = !DILocation(line: 1684, column: 13, scope: !1274)
!1292 = !DILocation(line: 1684, column: 59, scope: !1280)
!1293 = !DILocation(line: 1684, column: 17, scope: !1280)
!1294 = !DILocation(line: 1679, column: 9, scope: !1268)
!1295 = !DILocation(line: 1685, column: 9, scope: !1274)
!1296 = !DILocation(line: 1686, column: 13, scope: !1241)
!1297 = !DILocation(line: 1686, column: 5, scope: !1241)
!1298 = !DILocation(line: 1687, column: 8, scope: !1241)
!1299 = !DILocation(line: 1689, column: 78, scope: !1300)
!1300 = distinct !DILexicalBlock(scope: !1241, file: !10, line: 1689, column: 9)
!1301 = !DILocation(line: 1689, column: 10, scope: !1302)
!1302 = !DILexicalBlockFile(scope: !1300, file: !10, discriminator: 2)
!1303 = !DILocation(line: 1689, column: 10, scope: !1300)
!1304 = !DILocation(line: 1690, column: 13, scope: !1300)
!1305 = !DILocation(line: 1690, column: 72, scope: !1306)
!1306 = !DILexicalBlockFile(scope: !1300, file: !10, discriminator: 1)
!1307 = !DILocation(line: 1690, column: 17, scope: !1306)
!1308 = !DILocation(line: 1691, column: 13, scope: !1300)
!1309 = !DILocation(line: 1691, column: 62, scope: !1306)
!1310 = !DILocation(line: 1691, column: 17, scope: !1306)
!1311 = !DILocation(line: 1692, column: 13, scope: !1300)
!1312 = !DILocation(line: 1692, column: 62, scope: !1306)
!1313 = !DILocation(line: 1692, column: 17, scope: !1306)
!1314 = !DILocation(line: 1693, column: 13, scope: !1300)
!1315 = !DILocation(line: 1693, column: 62, scope: !1306)
!1316 = !DILocation(line: 1693, column: 17, scope: !1306)
!1317 = !DILocation(line: 1694, column: 13, scope: !1300)
!1318 = !DILocation(line: 1694, column: 59, scope: !1306)
!1319 = !DILocation(line: 1694, column: 17, scope: !1306)
!1320 = !DILocation(line: 1689, column: 9, scope: !1268)
!1321 = !DILocation(line: 1695, column: 9, scope: !1300)
!1322 = !DILocation(line: 1696, column: 13, scope: !1241)
!1323 = !DILocation(line: 1696, column: 5, scope: !1241)
!1324 = !DILocation(line: 1697, column: 8, scope: !1241)
!1325 = !DILocation(line: 1699, column: 76, scope: !1326)
!1326 = distinct !DILexicalBlock(scope: !1241, file: !10, line: 1699, column: 9)
!1327 = !DILocation(line: 1699, column: 10, scope: !1328)
!1328 = !DILexicalBlockFile(scope: !1326, file: !10, discriminator: 2)
!1329 = !DILocation(line: 1699, column: 10, scope: !1326)
!1330 = !DILocation(line: 1700, column: 13, scope: !1326)
!1331 = !DILocation(line: 1700, column: 67, scope: !1332)
!1332 = !DILexicalBlockFile(scope: !1326, file: !10, discriminator: 1)
!1333 = !DILocation(line: 1700, column: 17, scope: !1332)
!1334 = !DILocation(line: 1701, column: 13, scope: !1326)
!1335 = !DILocation(line: 1701, column: 62, scope: !1332)
!1336 = !DILocation(line: 1701, column: 17, scope: !1332)
!1337 = !DILocation(line: 1702, column: 13, scope: !1326)
!1338 = !DILocation(line: 1702, column: 62, scope: !1332)
!1339 = !DILocation(line: 1702, column: 17, scope: !1332)
!1340 = !DILocation(line: 1703, column: 13, scope: !1326)
!1341 = !DILocation(line: 1703, column: 62, scope: !1332)
!1342 = !DILocation(line: 1703, column: 17, scope: !1332)
!1343 = !DILocation(line: 1704, column: 13, scope: !1326)
!1344 = !DILocation(line: 1704, column: 61, scope: !1332)
!1345 = !DILocation(line: 1704, column: 17, scope: !1332)
!1346 = !DILocation(line: 1705, column: 13, scope: !1326)
!1347 = !DILocation(line: 1705, column: 58, scope: !1332)
!1348 = !DILocation(line: 1705, column: 17, scope: !1332)
!1349 = !DILocation(line: 1699, column: 9, scope: !1268)
!1350 = !DILocation(line: 1706, column: 9, scope: !1326)
!1351 = !DILocation(line: 1707, column: 13, scope: !1241)
!1352 = !DILocation(line: 1707, column: 5, scope: !1241)
!1353 = !DILocation(line: 1708, column: 8, scope: !1241)
!1354 = !DILocation(line: 1710, column: 77, scope: !1355)
!1355 = distinct !DILexicalBlock(scope: !1241, file: !10, line: 1710, column: 9)
!1356 = !DILocation(line: 1710, column: 10, scope: !1357)
!1357 = !DILexicalBlockFile(scope: !1355, file: !10, discriminator: 2)
!1358 = !DILocation(line: 1710, column: 10, scope: !1355)
!1359 = !DILocation(line: 1711, column: 13, scope: !1355)
!1360 = !DILocation(line: 1711, column: 62, scope: !1361)
!1361 = !DILexicalBlockFile(scope: !1355, file: !10, discriminator: 1)
!1362 = !DILocation(line: 1711, column: 17, scope: !1361)
!1363 = !DILocation(line: 1712, column: 13, scope: !1355)
!1364 = !DILocation(line: 1712, column: 62, scope: !1361)
!1365 = !DILocation(line: 1712, column: 17, scope: !1361)
!1366 = !DILocation(line: 1713, column: 13, scope: !1355)
!1367 = !DILocation(line: 1713, column: 62, scope: !1361)
!1368 = !DILocation(line: 1713, column: 17, scope: !1361)
!1369 = !DILocation(line: 1714, column: 13, scope: !1355)
!1370 = !DILocation(line: 1714, column: 59, scope: !1361)
!1371 = !DILocation(line: 1714, column: 17, scope: !1361)
!1372 = !DILocation(line: 1710, column: 9, scope: !1268)
!1373 = !DILocation(line: 1715, column: 9, scope: !1355)
!1374 = !DILocation(line: 1716, column: 13, scope: !1241)
!1375 = !DILocation(line: 1716, column: 5, scope: !1241)
!1376 = !DILocation(line: 1717, column: 8, scope: !1241)
!1377 = !DILocation(line: 1719, column: 104, scope: !1378)
!1378 = distinct !DILexicalBlock(scope: !1241, file: !10, line: 1719, column: 9)
!1379 = !DILocation(line: 1719, column: 10, scope: !1380)
!1380 = !DILexicalBlockFile(scope: !1378, file: !10, discriminator: 2)
!1381 = !DILocation(line: 1719, column: 10, scope: !1378)
!1382 = !DILocation(line: 1720, column: 13, scope: !1378)
!1383 = !DILocation(line: 1720, column: 72, scope: !1384)
!1384 = !DILexicalBlockFile(scope: !1378, file: !10, discriminator: 1)
!1385 = !DILocation(line: 1720, column: 17, scope: !1384)
!1386 = !DILocation(line: 1721, column: 13, scope: !1378)
!1387 = !DILocation(line: 1721, column: 62, scope: !1384)
!1388 = !DILocation(line: 1721, column: 17, scope: !1384)
!1389 = !DILocation(line: 1722, column: 13, scope: !1378)
!1390 = !DILocation(line: 1722, column: 62, scope: !1384)
!1391 = !DILocation(line: 1722, column: 17, scope: !1384)
!1392 = !DILocation(line: 1723, column: 13, scope: !1378)
!1393 = !DILocation(line: 1723, column: 62, scope: !1384)
!1394 = !DILocation(line: 1723, column: 17, scope: !1384)
!1395 = !DILocation(line: 1724, column: 13, scope: !1378)
!1396 = !DILocation(line: 1724, column: 59, scope: !1384)
!1397 = !DILocation(line: 1724, column: 17, scope: !1384)
!1398 = !DILocation(line: 1719, column: 9, scope: !1268)
!1399 = !DILocation(line: 1725, column: 9, scope: !1378)
!1400 = !DILocation(line: 1727, column: 8, scope: !1241)
!1401 = !DILocation(line: 1727, column: 5, scope: !1241)
!1402 = !DILocation(line: 1729, column: 13, scope: !1241)
!1403 = !DILocation(line: 1729, column: 5, scope: !1241)
!1404 = !DILocation(line: 1730, column: 12, scope: !1241)
!1405 = !DILocation(line: 1730, column: 5, scope: !1241)
!1406 = distinct !DISubprogram(name: "test_hex2bn", scope: !10, file: !10, line: 1733, type: !39, isLocal: true, isDefinition: true, scopeLine: 1734, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1407 = !DILocalVariable(name: "bn", scope: !1406, file: !10, line: 1735, type: !187)
!1408 = !DILocation(line: 1735, column: 13, scope: !1406)
!1409 = !DILocalVariable(name: "st", scope: !1406, file: !10, line: 1736, type: !4)
!1410 = !DILocation(line: 1736, column: 9, scope: !1406)
!1411 = !DILocation(line: 1738, column: 73, scope: !1412)
!1412 = distinct !DILexicalBlock(scope: !1406, file: !10, line: 1738, column: 9)
!1413 = !DILocation(line: 1738, column: 10, scope: !1414)
!1414 = !DILexicalBlockFile(scope: !1412, file: !10, discriminator: 2)
!1415 = !DILocation(line: 1738, column: 10, scope: !1412)
!1416 = !DILocation(line: 1739, column: 13, scope: !1412)
!1417 = !DILocation(line: 1739, column: 62, scope: !1418)
!1418 = !DILexicalBlockFile(scope: !1412, file: !10, discriminator: 1)
!1419 = !DILocation(line: 1739, column: 17, scope: !1418)
!1420 = !DILocation(line: 1740, column: 13, scope: !1412)
!1421 = !DILocation(line: 1740, column: 62, scope: !1418)
!1422 = !DILocation(line: 1740, column: 17, scope: !1418)
!1423 = !DILocation(line: 1741, column: 13, scope: !1412)
!1424 = !DILocation(line: 1741, column: 59, scope: !1418)
!1425 = !DILocation(line: 1741, column: 17, scope: !1418)
!1426 = !DILocation(line: 1738, column: 9, scope: !1427)
!1427 = !DILexicalBlockFile(scope: !1406, file: !10, discriminator: 1)
!1428 = !DILocation(line: 1742, column: 9, scope: !1412)
!1429 = !DILocation(line: 1743, column: 13, scope: !1406)
!1430 = !DILocation(line: 1743, column: 5, scope: !1406)
!1431 = !DILocation(line: 1744, column: 8, scope: !1406)
!1432 = !DILocation(line: 1746, column: 75, scope: !1433)
!1433 = distinct !DILexicalBlock(scope: !1406, file: !10, line: 1746, column: 9)
!1434 = !DILocation(line: 1746, column: 10, scope: !1435)
!1435 = !DILexicalBlockFile(scope: !1433, file: !10, discriminator: 2)
!1436 = !DILocation(line: 1746, column: 10, scope: !1433)
!1437 = !DILocation(line: 1747, column: 13, scope: !1433)
!1438 = !DILocation(line: 1747, column: 71, scope: !1439)
!1439 = !DILexicalBlockFile(scope: !1433, file: !10, discriminator: 1)
!1440 = !DILocation(line: 1747, column: 17, scope: !1439)
!1441 = !DILocation(line: 1748, column: 13, scope: !1433)
!1442 = !DILocation(line: 1748, column: 62, scope: !1439)
!1443 = !DILocation(line: 1748, column: 17, scope: !1439)
!1444 = !DILocation(line: 1749, column: 13, scope: !1433)
!1445 = !DILocation(line: 1749, column: 62, scope: !1439)
!1446 = !DILocation(line: 1749, column: 17, scope: !1439)
!1447 = !DILocation(line: 1750, column: 13, scope: !1433)
!1448 = !DILocation(line: 1750, column: 62, scope: !1439)
!1449 = !DILocation(line: 1750, column: 17, scope: !1439)
!1450 = !DILocation(line: 1751, column: 13, scope: !1433)
!1451 = !DILocation(line: 1751, column: 59, scope: !1439)
!1452 = !DILocation(line: 1751, column: 17, scope: !1439)
!1453 = !DILocation(line: 1746, column: 9, scope: !1427)
!1454 = !DILocation(line: 1752, column: 9, scope: !1433)
!1455 = !DILocation(line: 1753, column: 13, scope: !1406)
!1456 = !DILocation(line: 1753, column: 5, scope: !1406)
!1457 = !DILocation(line: 1754, column: 8, scope: !1406)
!1458 = !DILocation(line: 1756, column: 75, scope: !1459)
!1459 = distinct !DILexicalBlock(scope: !1406, file: !10, line: 1756, column: 9)
!1460 = !DILocation(line: 1756, column: 10, scope: !1461)
!1461 = !DILexicalBlockFile(scope: !1459, file: !10, discriminator: 2)
!1462 = !DILocation(line: 1756, column: 10, scope: !1459)
!1463 = !DILocation(line: 1757, column: 13, scope: !1459)
!1464 = !DILocation(line: 1757, column: 74, scope: !1465)
!1465 = !DILexicalBlockFile(scope: !1459, file: !10, discriminator: 1)
!1466 = !DILocation(line: 1757, column: 17, scope: !1465)
!1467 = !DILocation(line: 1758, column: 13, scope: !1459)
!1468 = !DILocation(line: 1758, column: 62, scope: !1465)
!1469 = !DILocation(line: 1758, column: 17, scope: !1465)
!1470 = !DILocation(line: 1759, column: 13, scope: !1459)
!1471 = !DILocation(line: 1759, column: 62, scope: !1465)
!1472 = !DILocation(line: 1759, column: 17, scope: !1465)
!1473 = !DILocation(line: 1760, column: 13, scope: !1459)
!1474 = !DILocation(line: 1760, column: 62, scope: !1465)
!1475 = !DILocation(line: 1760, column: 17, scope: !1465)
!1476 = !DILocation(line: 1761, column: 13, scope: !1459)
!1477 = !DILocation(line: 1761, column: 59, scope: !1465)
!1478 = !DILocation(line: 1761, column: 17, scope: !1465)
!1479 = !DILocation(line: 1756, column: 9, scope: !1427)
!1480 = !DILocation(line: 1762, column: 9, scope: !1459)
!1481 = !DILocation(line: 1763, column: 13, scope: !1406)
!1482 = !DILocation(line: 1763, column: 5, scope: !1406)
!1483 = !DILocation(line: 1764, column: 8, scope: !1406)
!1484 = !DILocation(line: 1766, column: 74, scope: !1485)
!1485 = distinct !DILexicalBlock(scope: !1406, file: !10, line: 1766, column: 9)
!1486 = !DILocation(line: 1766, column: 10, scope: !1487)
!1487 = !DILexicalBlockFile(scope: !1485, file: !10, discriminator: 2)
!1488 = !DILocation(line: 1766, column: 10, scope: !1485)
!1489 = !DILocation(line: 1767, column: 13, scope: !1485)
!1490 = !DILocation(line: 1767, column: 70, scope: !1491)
!1491 = !DILexicalBlockFile(scope: !1485, file: !10, discriminator: 1)
!1492 = !DILocation(line: 1767, column: 17, scope: !1491)
!1493 = !DILocation(line: 1768, column: 13, scope: !1485)
!1494 = !DILocation(line: 1768, column: 62, scope: !1491)
!1495 = !DILocation(line: 1768, column: 17, scope: !1491)
!1496 = !DILocation(line: 1769, column: 13, scope: !1485)
!1497 = !DILocation(line: 1769, column: 62, scope: !1491)
!1498 = !DILocation(line: 1769, column: 17, scope: !1491)
!1499 = !DILocation(line: 1770, column: 13, scope: !1485)
!1500 = !DILocation(line: 1770, column: 62, scope: !1491)
!1501 = !DILocation(line: 1770, column: 17, scope: !1491)
!1502 = !DILocation(line: 1771, column: 13, scope: !1485)
!1503 = !DILocation(line: 1771, column: 58, scope: !1491)
!1504 = !DILocation(line: 1771, column: 17, scope: !1491)
!1505 = !DILocation(line: 1766, column: 9, scope: !1427)
!1506 = !DILocation(line: 1772, column: 9, scope: !1485)
!1507 = !DILocation(line: 1773, column: 13, scope: !1406)
!1508 = !DILocation(line: 1773, column: 5, scope: !1406)
!1509 = !DILocation(line: 1774, column: 8, scope: !1406)
!1510 = !DILocation(line: 1776, column: 74, scope: !1511)
!1511 = distinct !DILexicalBlock(scope: !1406, file: !10, line: 1776, column: 9)
!1512 = !DILocation(line: 1776, column: 10, scope: !1513)
!1513 = !DILexicalBlockFile(scope: !1511, file: !10, discriminator: 2)
!1514 = !DILocation(line: 1776, column: 10, scope: !1511)
!1515 = !DILocation(line: 1777, column: 13, scope: !1511)
!1516 = !DILocation(line: 1777, column: 62, scope: !1517)
!1517 = !DILexicalBlockFile(scope: !1511, file: !10, discriminator: 1)
!1518 = !DILocation(line: 1777, column: 17, scope: !1517)
!1519 = !DILocation(line: 1778, column: 13, scope: !1511)
!1520 = !DILocation(line: 1778, column: 62, scope: !1517)
!1521 = !DILocation(line: 1778, column: 17, scope: !1517)
!1522 = !DILocation(line: 1779, column: 13, scope: !1511)
!1523 = !DILocation(line: 1779, column: 62, scope: !1517)
!1524 = !DILocation(line: 1779, column: 17, scope: !1517)
!1525 = !DILocation(line: 1780, column: 13, scope: !1511)
!1526 = !DILocation(line: 1780, column: 59, scope: !1517)
!1527 = !DILocation(line: 1780, column: 17, scope: !1517)
!1528 = !DILocation(line: 1776, column: 9, scope: !1427)
!1529 = !DILocation(line: 1781, column: 9, scope: !1511)
!1530 = !DILocation(line: 1782, column: 13, scope: !1406)
!1531 = !DILocation(line: 1782, column: 5, scope: !1406)
!1532 = !DILocation(line: 1783, column: 8, scope: !1406)
!1533 = !DILocation(line: 1785, column: 102, scope: !1534)
!1534 = distinct !DILexicalBlock(scope: !1406, file: !10, line: 1785, column: 9)
!1535 = !DILocation(line: 1785, column: 10, scope: !1536)
!1536 = !DILexicalBlockFile(scope: !1534, file: !10, discriminator: 2)
!1537 = !DILocation(line: 1785, column: 10, scope: !1534)
!1538 = !DILocation(line: 1786, column: 13, scope: !1534)
!1539 = !DILocation(line: 1786, column: 71, scope: !1540)
!1540 = !DILexicalBlockFile(scope: !1534, file: !10, discriminator: 1)
!1541 = !DILocation(line: 1786, column: 17, scope: !1540)
!1542 = !DILocation(line: 1787, column: 13, scope: !1534)
!1543 = !DILocation(line: 1787, column: 62, scope: !1540)
!1544 = !DILocation(line: 1787, column: 17, scope: !1540)
!1545 = !DILocation(line: 1788, column: 13, scope: !1534)
!1546 = !DILocation(line: 1788, column: 62, scope: !1540)
!1547 = !DILocation(line: 1788, column: 17, scope: !1540)
!1548 = !DILocation(line: 1789, column: 13, scope: !1534)
!1549 = !DILocation(line: 1789, column: 62, scope: !1540)
!1550 = !DILocation(line: 1789, column: 17, scope: !1540)
!1551 = !DILocation(line: 1790, column: 13, scope: !1534)
!1552 = !DILocation(line: 1790, column: 59, scope: !1540)
!1553 = !DILocation(line: 1790, column: 17, scope: !1540)
!1554 = !DILocation(line: 1785, column: 9, scope: !1427)
!1555 = !DILocation(line: 1791, column: 9, scope: !1534)
!1556 = !DILocation(line: 1792, column: 8, scope: !1406)
!1557 = !DILocation(line: 1792, column: 5, scope: !1406)
!1558 = !DILocation(line: 1795, column: 13, scope: !1406)
!1559 = !DILocation(line: 1795, column: 5, scope: !1406)
!1560 = !DILocation(line: 1796, column: 12, scope: !1406)
!1561 = !DILocation(line: 1796, column: 5, scope: !1406)
!1562 = distinct !DISubprogram(name: "test_asc2bn", scope: !10, file: !10, line: 1799, type: !39, isLocal: true, isDefinition: true, scopeLine: 1800, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1563 = !DILocalVariable(name: "bn", scope: !1562, file: !10, line: 1801, type: !187)
!1564 = !DILocation(line: 1801, column: 13, scope: !1562)
!1565 = !DILocalVariable(name: "st", scope: !1562, file: !10, line: 1802, type: !4)
!1566 = !DILocation(line: 1802, column: 9, scope: !1562)
!1567 = !DILocation(line: 1804, column: 64, scope: !1568)
!1568 = distinct !DILexicalBlock(scope: !1562, file: !10, line: 1804, column: 9)
!1569 = !DILocation(line: 1804, column: 62, scope: !1568)
!1570 = !DILocation(line: 1804, column: 59, scope: !1568)
!1571 = !DILocation(line: 1804, column: 10, scope: !1572)
!1572 = !DILexicalBlockFile(scope: !1568, file: !10, discriminator: 1)
!1573 = !DILocation(line: 1804, column: 10, scope: !1568)
!1574 = !DILocation(line: 1804, column: 9, scope: !1562)
!1575 = !DILocation(line: 1805, column: 9, scope: !1568)
!1576 = !DILocation(line: 1807, column: 69, scope: !1577)
!1577 = distinct !DILexicalBlock(scope: !1562, file: !10, line: 1807, column: 9)
!1578 = !DILocation(line: 1807, column: 90, scope: !1577)
!1579 = !DILocation(line: 1807, column: 10, scope: !1580)
!1580 = !DILexicalBlockFile(scope: !1577, file: !10, discriminator: 2)
!1581 = !DILocation(line: 1807, column: 10, scope: !1577)
!1582 = !DILocation(line: 1808, column: 13, scope: !1577)
!1583 = !DILocation(line: 1808, column: 62, scope: !1584)
!1584 = !DILexicalBlockFile(scope: !1577, file: !10, discriminator: 1)
!1585 = !DILocation(line: 1808, column: 17, scope: !1584)
!1586 = !DILocation(line: 1809, column: 13, scope: !1577)
!1587 = !DILocation(line: 1809, column: 62, scope: !1584)
!1588 = !DILocation(line: 1809, column: 17, scope: !1584)
!1589 = !DILocation(line: 1807, column: 9, scope: !1590)
!1590 = !DILexicalBlockFile(scope: !1562, file: !10, discriminator: 1)
!1591 = !DILocation(line: 1810, column: 9, scope: !1577)
!1592 = !DILocation(line: 1812, column: 71, scope: !1593)
!1593 = distinct !DILexicalBlock(scope: !1562, file: !10, line: 1812, column: 9)
!1594 = !DILocation(line: 1812, column: 94, scope: !1593)
!1595 = !DILocation(line: 1812, column: 10, scope: !1596)
!1596 = !DILexicalBlockFile(scope: !1593, file: !10, discriminator: 2)
!1597 = !DILocation(line: 1812, column: 10, scope: !1593)
!1598 = !DILocation(line: 1813, column: 13, scope: !1593)
!1599 = !DILocation(line: 1813, column: 69, scope: !1600)
!1600 = !DILexicalBlockFile(scope: !1593, file: !10, discriminator: 1)
!1601 = !DILocation(line: 1813, column: 17, scope: !1600)
!1602 = !DILocation(line: 1814, column: 13, scope: !1593)
!1603 = !DILocation(line: 1814, column: 62, scope: !1600)
!1604 = !DILocation(line: 1814, column: 17, scope: !1600)
!1605 = !DILocation(line: 1812, column: 9, scope: !1590)
!1606 = !DILocation(line: 1815, column: 9, scope: !1593)
!1607 = !DILocation(line: 1817, column: 71, scope: !1608)
!1608 = distinct !DILexicalBlock(scope: !1562, file: !10, line: 1817, column: 9)
!1609 = !DILocation(line: 1817, column: 94, scope: !1608)
!1610 = !DILocation(line: 1817, column: 10, scope: !1611)
!1611 = !DILexicalBlockFile(scope: !1608, file: !10, discriminator: 2)
!1612 = !DILocation(line: 1817, column: 10, scope: !1608)
!1613 = !DILocation(line: 1818, column: 13, scope: !1608)
!1614 = !DILocation(line: 1818, column: 72, scope: !1615)
!1615 = !DILexicalBlockFile(scope: !1608, file: !10, discriminator: 1)
!1616 = !DILocation(line: 1818, column: 17, scope: !1615)
!1617 = !DILocation(line: 1819, column: 13, scope: !1608)
!1618 = !DILocation(line: 1819, column: 62, scope: !1615)
!1619 = !DILocation(line: 1819, column: 17, scope: !1615)
!1620 = !DILocation(line: 1817, column: 9, scope: !1590)
!1621 = !DILocation(line: 1820, column: 9, scope: !1608)
!1622 = !DILocation(line: 1822, column: 74, scope: !1623)
!1623 = distinct !DILexicalBlock(scope: !1562, file: !10, line: 1822, column: 9)
!1624 = !DILocation(line: 1822, column: 100, scope: !1623)
!1625 = !DILocation(line: 1822, column: 10, scope: !1626)
!1626 = !DILexicalBlockFile(scope: !1623, file: !10, discriminator: 2)
!1627 = !DILocation(line: 1822, column: 10, scope: !1623)
!1628 = !DILocation(line: 1823, column: 13, scope: !1623)
!1629 = !DILocation(line: 1823, column: 72, scope: !1630)
!1630 = !DILexicalBlockFile(scope: !1623, file: !10, discriminator: 1)
!1631 = !DILocation(line: 1823, column: 17, scope: !1630)
!1632 = !DILocation(line: 1824, column: 13, scope: !1623)
!1633 = !DILocation(line: 1824, column: 62, scope: !1630)
!1634 = !DILocation(line: 1824, column: 17, scope: !1630)
!1635 = !DILocation(line: 1822, column: 9, scope: !1590)
!1636 = !DILocation(line: 1825, column: 9, scope: !1623)
!1637 = !DILocation(line: 1827, column: 74, scope: !1638)
!1638 = distinct !DILexicalBlock(scope: !1562, file: !10, line: 1827, column: 9)
!1639 = !DILocation(line: 1827, column: 100, scope: !1638)
!1640 = !DILocation(line: 1827, column: 10, scope: !1641)
!1641 = !DILexicalBlockFile(scope: !1638, file: !10, discriminator: 2)
!1642 = !DILocation(line: 1827, column: 10, scope: !1638)
!1643 = !DILocation(line: 1828, column: 13, scope: !1638)
!1644 = !DILocation(line: 1828, column: 72, scope: !1645)
!1645 = !DILexicalBlockFile(scope: !1638, file: !10, discriminator: 1)
!1646 = !DILocation(line: 1828, column: 17, scope: !1645)
!1647 = !DILocation(line: 1829, column: 13, scope: !1638)
!1648 = !DILocation(line: 1829, column: 62, scope: !1645)
!1649 = !DILocation(line: 1829, column: 17, scope: !1645)
!1650 = !DILocation(line: 1827, column: 9, scope: !1590)
!1651 = !DILocation(line: 1830, column: 9, scope: !1638)
!1652 = !DILocation(line: 1832, column: 75, scope: !1653)
!1653 = distinct !DILexicalBlock(scope: !1562, file: !10, line: 1832, column: 9)
!1654 = !DILocation(line: 1832, column: 102, scope: !1653)
!1655 = !DILocation(line: 1832, column: 10, scope: !1656)
!1656 = !DILexicalBlockFile(scope: !1653, file: !10, discriminator: 2)
!1657 = !DILocation(line: 1832, column: 10, scope: !1653)
!1658 = !DILocation(line: 1833, column: 13, scope: !1653)
!1659 = !DILocation(line: 1833, column: 76, scope: !1660)
!1660 = !DILexicalBlockFile(scope: !1653, file: !10, discriminator: 1)
!1661 = !DILocation(line: 1833, column: 17, scope: !1660)
!1662 = !DILocation(line: 1834, column: 13, scope: !1653)
!1663 = !DILocation(line: 1834, column: 62, scope: !1660)
!1664 = !DILocation(line: 1834, column: 17, scope: !1660)
!1665 = !DILocation(line: 1832, column: 9, scope: !1590)
!1666 = !DILocation(line: 1835, column: 9, scope: !1653)
!1667 = !DILocation(line: 1837, column: 70, scope: !1668)
!1668 = distinct !DILexicalBlock(scope: !1562, file: !10, line: 1837, column: 9)
!1669 = !DILocation(line: 1837, column: 92, scope: !1668)
!1670 = !DILocation(line: 1837, column: 10, scope: !1671)
!1671 = !DILexicalBlockFile(scope: !1668, file: !10, discriminator: 2)
!1672 = !DILocation(line: 1837, column: 10, scope: !1668)
!1673 = !DILocation(line: 1838, column: 13, scope: !1668)
!1674 = !DILocation(line: 1838, column: 62, scope: !1675)
!1675 = !DILexicalBlockFile(scope: !1668, file: !10, discriminator: 1)
!1676 = !DILocation(line: 1838, column: 17, scope: !1675)
!1677 = !DILocation(line: 1839, column: 13, scope: !1668)
!1678 = !DILocation(line: 1839, column: 62, scope: !1675)
!1679 = !DILocation(line: 1839, column: 17, scope: !1675)
!1680 = !DILocation(line: 1837, column: 9, scope: !1590)
!1681 = !DILocation(line: 1840, column: 9, scope: !1668)
!1682 = !DILocation(line: 1842, column: 98, scope: !1683)
!1683 = distinct !DILexicalBlock(scope: !1562, file: !10, line: 1842, column: 9)
!1684 = !DILocation(line: 1842, column: 148, scope: !1683)
!1685 = !DILocation(line: 1842, column: 10, scope: !1686)
!1686 = !DILexicalBlockFile(scope: !1683, file: !10, discriminator: 2)
!1687 = !DILocation(line: 1842, column: 10, scope: !1683)
!1688 = !DILocation(line: 1843, column: 13, scope: !1683)
!1689 = !DILocation(line: 1843, column: 69, scope: !1690)
!1690 = !DILexicalBlockFile(scope: !1683, file: !10, discriminator: 1)
!1691 = !DILocation(line: 1843, column: 17, scope: !1690)
!1692 = !DILocation(line: 1844, column: 13, scope: !1683)
!1693 = !DILocation(line: 1844, column: 62, scope: !1690)
!1694 = !DILocation(line: 1844, column: 17, scope: !1690)
!1695 = !DILocation(line: 1842, column: 9, scope: !1590)
!1696 = !DILocation(line: 1845, column: 9, scope: !1683)
!1697 = !DILocation(line: 1847, column: 8, scope: !1562)
!1698 = !DILocation(line: 1847, column: 5, scope: !1562)
!1699 = !DILocation(line: 1849, column: 13, scope: !1562)
!1700 = !DILocation(line: 1849, column: 5, scope: !1562)
!1701 = !DILocation(line: 1850, column: 12, scope: !1562)
!1702 = !DILocation(line: 1850, column: 5, scope: !1562)
!1703 = distinct !DISubprogram(name: "test_mpi", scope: !10, file: !10, line: 1862, type: !1704, isLocal: true, isDefinition: true, scopeLine: 1863, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1704 = !DISubroutineType(types: !1705)
!1705 = !{!4, !4}
!1706 = !DILocalVariable(name: "i", arg: 1, scope: !1703, file: !10, line: 1862, type: !4)
!1707 = !DILocation(line: 1862, column: 25, scope: !1703)
!1708 = !DILocalVariable(name: "scratch", scope: !1703, file: !10, line: 1864, type: !1709)
!1709 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1710, size: 64, align: 8, elements: !44)
!1710 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !1711, line: 48, baseType: !1712)
!1711 = !DIFile(filename: "/usr/include/stdint.h", directory: "/home/ubuntu_1604/Desktop/openssl_bcmake_outputs/[task]test--bntest")
!1712 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!1713 = !DILocation(line: 1864, column: 13, scope: !1703)
!1714 = !DILocalVariable(name: "test", scope: !1703, file: !10, line: 1865, type: !1715)
!1715 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !59, size: 64, align: 64)
!1716 = !DILocation(line: 1865, column: 20, scope: !1703)
!1717 = !DILocation(line: 1865, column: 38, scope: !1703)
!1718 = !DILocation(line: 1865, column: 28, scope: !1703)
!1719 = !DILocalVariable(name: "mpi_len", scope: !1703, file: !10, line: 1866, type: !66)
!1720 = !DILocation(line: 1866, column: 12, scope: !1703)
!1721 = !DILocalVariable(name: "mpi_len2", scope: !1703, file: !10, line: 1866, type: !66)
!1722 = !DILocation(line: 1866, column: 21, scope: !1703)
!1723 = !DILocalVariable(name: "bn", scope: !1703, file: !10, line: 1867, type: !187)
!1724 = !DILocation(line: 1867, column: 13, scope: !1703)
!1725 = !DILocalVariable(name: "bn2", scope: !1703, file: !10, line: 1868, type: !187)
!1726 = !DILocation(line: 1868, column: 13, scope: !1703)
!1727 = !DILocalVariable(name: "st", scope: !1703, file: !10, line: 1869, type: !4)
!1728 = !DILocation(line: 1869, column: 9, scope: !1703)
!1729 = !DILocation(line: 1871, column: 64, scope: !1730)
!1730 = distinct !DILexicalBlock(scope: !1703, file: !10, line: 1871, column: 9)
!1731 = !DILocation(line: 1871, column: 62, scope: !1730)
!1732 = !DILocation(line: 1871, column: 59, scope: !1730)
!1733 = !DILocation(line: 1871, column: 10, scope: !1734)
!1734 = !DILexicalBlockFile(scope: !1730, file: !10, discriminator: 2)
!1735 = !DILocation(line: 1871, column: 10, scope: !1730)
!1736 = !DILocation(line: 1872, column: 13, scope: !1730)
!1737 = !DILocation(line: 1872, column: 98, scope: !1738)
!1738 = !DILexicalBlockFile(scope: !1730, file: !10, discriminator: 1)
!1739 = !DILocation(line: 1872, column: 104, scope: !1738)
!1740 = !DILocation(line: 1872, column: 83, scope: !1738)
!1741 = !DILocation(line: 1872, column: 113, scope: !1738)
!1742 = !DILocation(line: 1872, column: 17, scope: !1743)
!1743 = !DILexicalBlockFile(scope: !1738, file: !10, discriminator: 2)
!1744 = !DILocation(line: 1872, column: 17, scope: !1738)
!1745 = !DILocation(line: 1871, column: 9, scope: !1746)
!1746 = !DILexicalBlockFile(scope: !1703, file: !10, discriminator: 1)
!1747 = !DILocation(line: 1873, column: 9, scope: !1730)
!1748 = !DILocation(line: 1874, column: 25, scope: !1703)
!1749 = !DILocation(line: 1874, column: 15, scope: !1703)
!1750 = !DILocation(line: 1874, column: 13, scope: !1703)
!1751 = !DILocation(line: 1875, column: 78, scope: !1752)
!1752 = distinct !DILexicalBlock(scope: !1703, file: !10, line: 1875, column: 9)
!1753 = !DILocation(line: 1875, column: 10, scope: !1752)
!1754 = !DILocation(line: 1875, column: 9, scope: !1703)
!1755 = !DILocation(line: 1876, column: 9, scope: !1752)
!1756 = !DILocation(line: 1878, column: 117, scope: !1757)
!1757 = distinct !DILexicalBlock(scope: !1703, file: !10, line: 1878, column: 9)
!1758 = !DILocation(line: 1878, column: 121, scope: !1757)
!1759 = !DILocation(line: 1878, column: 107, scope: !1757)
!1760 = !DILocation(line: 1878, column: 105, scope: !1757)
!1761 = !DILocation(line: 1878, column: 131, scope: !1757)
!1762 = !DILocation(line: 1878, column: 10, scope: !1763)
!1763 = !DILexicalBlockFile(scope: !1757, file: !10, discriminator: 2)
!1764 = !DILocation(line: 1878, column: 10, scope: !1757)
!1765 = !DILocation(line: 1879, column: 13, scope: !1757)
!1766 = !DILocation(line: 1879, column: 76, scope: !1767)
!1767 = !DILexicalBlockFile(scope: !1757, file: !10, discriminator: 1)
!1768 = !DILocation(line: 1879, column: 82, scope: !1767)
!1769 = !DILocation(line: 1879, column: 87, scope: !1767)
!1770 = !DILocation(line: 1879, column: 93, scope: !1767)
!1771 = !DILocation(line: 1879, column: 102, scope: !1767)
!1772 = !DILocation(line: 1879, column: 111, scope: !1767)
!1773 = !DILocation(line: 1879, column: 17, scope: !1767)
!1774 = !DILocation(line: 1878, column: 9, scope: !1746)
!1775 = !DILocation(line: 1880, column: 9, scope: !1757)
!1776 = !DILocation(line: 1882, column: 101, scope: !1777)
!1777 = distinct !DILexicalBlock(scope: !1703, file: !10, line: 1882, column: 9)
!1778 = !DILocation(line: 1882, column: 110, scope: !1777)
!1779 = !DILocation(line: 1882, column: 91, scope: !1777)
!1780 = !DILocation(line: 1882, column: 89, scope: !1777)
!1781 = !DILocation(line: 1882, column: 85, scope: !1777)
!1782 = !DILocation(line: 1882, column: 10, scope: !1783)
!1783 = !DILexicalBlockFile(scope: !1777, file: !10, discriminator: 1)
!1784 = !DILocation(line: 1882, column: 10, scope: !1777)
!1785 = !DILocation(line: 1882, column: 9, scope: !1703)
!1786 = !DILocation(line: 1883, column: 9, scope: !1777)
!1787 = !DILocation(line: 1885, column: 57, scope: !1788)
!1788 = distinct !DILexicalBlock(scope: !1703, file: !10, line: 1885, column: 9)
!1789 = !DILocation(line: 1885, column: 61, scope: !1788)
!1790 = !DILocation(line: 1885, column: 10, scope: !1788)
!1791 = !DILocation(line: 1885, column: 9, scope: !1703)
!1792 = !DILocation(line: 1886, column: 17, scope: !1793)
!1793 = distinct !DILexicalBlock(scope: !1788, file: !10, line: 1885, column: 67)
!1794 = !DILocation(line: 1886, column: 9, scope: !1793)
!1795 = !DILocation(line: 1887, column: 9, scope: !1793)
!1796 = !DILocation(line: 1889, column: 13, scope: !1703)
!1797 = !DILocation(line: 1889, column: 5, scope: !1703)
!1798 = !DILocation(line: 1891, column: 8, scope: !1703)
!1799 = !DILocation(line: 1891, column: 5, scope: !1703)
!1800 = !DILocation(line: 1893, column: 13, scope: !1703)
!1801 = !DILocation(line: 1893, column: 5, scope: !1703)
!1802 = !DILocation(line: 1894, column: 12, scope: !1703)
!1803 = !DILocation(line: 1894, column: 5, scope: !1703)
!1804 = distinct !DISubprogram(name: "test_negzero", scope: !10, file: !10, line: 1923, type: !39, isLocal: true, isDefinition: true, scopeLine: 1924, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!1805 = !DILocalVariable(name: "a", scope: !1804, file: !10, line: 1925, type: !187)
!1806 = !DILocation(line: 1925, column: 13, scope: !1804)
!1807 = !DILocalVariable(name: "b", scope: !1804, file: !10, line: 1925, type: !187)
!1808 = !DILocation(line: 1925, column: 23, scope: !1804)
!1809 = !DILocalVariable(name: "c", scope: !1804, file: !10, line: 1925, type: !187)
!1810 = !DILocation(line: 1925, column: 34, scope: !1804)
!1811 = !DILocalVariable(name: "d", scope: !1804, file: !10, line: 1925, type: !187)
!1812 = !DILocation(line: 1925, column: 45, scope: !1804)
!1813 = !DILocalVariable(name: "numerator", scope: !1804, file: !10, line: 1926, type: !187)
!1814 = !DILocation(line: 1926, column: 13, scope: !1804)
!1815 = !DILocalVariable(name: "denominator", scope: !1804, file: !10, line: 1926, type: !187)
!1816 = !DILocation(line: 1926, column: 31, scope: !1804)
!1817 = !DILocalVariable(name: "consttime", scope: !1804, file: !10, line: 1927, type: !4)
!1818 = !DILocation(line: 1927, column: 9, scope: !1804)
!1819 = !DILocalVariable(name: "st", scope: !1804, file: !10, line: 1927, type: !4)
!1820 = !DILocation(line: 1927, column: 20, scope: !1804)
!1821 = !DILocation(line: 1929, column: 62, scope: !1822)
!1822 = distinct !DILexicalBlock(scope: !1804, file: !10, line: 1929, column: 9)
!1823 = !DILocation(line: 1929, column: 60, scope: !1822)
!1824 = !DILocation(line: 1929, column: 58, scope: !1822)
!1825 = !DILocation(line: 1929, column: 10, scope: !1826)
!1826 = !DILexicalBlockFile(scope: !1822, file: !10, discriminator: 2)
!1827 = !DILocation(line: 1929, column: 10, scope: !1822)
!1828 = !DILocation(line: 1930, column: 13, scope: !1822)
!1829 = !DILocation(line: 1930, column: 69, scope: !1830)
!1830 = !DILexicalBlockFile(scope: !1822, file: !10, discriminator: 1)
!1831 = !DILocation(line: 1930, column: 67, scope: !1830)
!1832 = !DILocation(line: 1930, column: 65, scope: !1830)
!1833 = !DILocation(line: 1930, column: 17, scope: !1834)
!1834 = !DILexicalBlockFile(scope: !1830, file: !10, discriminator: 2)
!1835 = !DILocation(line: 1930, column: 17, scope: !1830)
!1836 = !DILocation(line: 1931, column: 13, scope: !1822)
!1837 = !DILocation(line: 1931, column: 69, scope: !1830)
!1838 = !DILocation(line: 1931, column: 67, scope: !1830)
!1839 = !DILocation(line: 1931, column: 65, scope: !1830)
!1840 = !DILocation(line: 1931, column: 17, scope: !1834)
!1841 = !DILocation(line: 1931, column: 17, scope: !1830)
!1842 = !DILocation(line: 1932, column: 13, scope: !1822)
!1843 = !DILocation(line: 1932, column: 69, scope: !1830)
!1844 = !DILocation(line: 1932, column: 67, scope: !1830)
!1845 = !DILocation(line: 1932, column: 65, scope: !1830)
!1846 = !DILocation(line: 1932, column: 17, scope: !1834)
!1847 = !DILocation(line: 1932, column: 17, scope: !1830)
!1848 = !DILocation(line: 1929, column: 9, scope: !1849)
!1849 = !DILexicalBlockFile(scope: !1804, file: !10, discriminator: 1)
!1850 = !DILocation(line: 1933, column: 9, scope: !1822)
!1851 = !DILocation(line: 1936, column: 77, scope: !1852)
!1852 = distinct !DILexicalBlock(scope: !1804, file: !10, line: 1936, column: 9)
!1853 = !DILocation(line: 1936, column: 65, scope: !1852)
!1854 = !DILocation(line: 1936, column: 84, scope: !1852)
!1855 = !DILocation(line: 1936, column: 10, scope: !1856)
!1856 = !DILexicalBlockFile(scope: !1852, file: !10, discriminator: 1)
!1857 = !DILocation(line: 1936, column: 10, scope: !1852)
!1858 = !DILocation(line: 1936, column: 9, scope: !1804)
!1859 = !DILocation(line: 1937, column: 9, scope: !1852)
!1860 = !DILocation(line: 1938, column: 21, scope: !1804)
!1861 = !DILocation(line: 1938, column: 5, scope: !1804)
!1862 = !DILocation(line: 1939, column: 19, scope: !1804)
!1863 = !DILocation(line: 1939, column: 6, scope: !1804)
!1864 = !DILocation(line: 1940, column: 75, scope: !1865)
!1865 = distinct !DILexicalBlock(scope: !1804, file: !10, line: 1940, column: 9)
!1866 = !DILocation(line: 1940, column: 78, scope: !1865)
!1867 = !DILocation(line: 1940, column: 81, scope: !1865)
!1868 = !DILocation(line: 1940, column: 84, scope: !1865)
!1869 = !DILocation(line: 1940, column: 68, scope: !1865)
!1870 = !DILocation(line: 1940, column: 90, scope: !1865)
!1871 = !DILocation(line: 1940, column: 10, scope: !1872)
!1872 = !DILexicalBlockFile(scope: !1865, file: !10, discriminator: 1)
!1873 = !DILocation(line: 1940, column: 10, scope: !1865)
!1874 = !DILocation(line: 1940, column: 9, scope: !1804)
!1875 = !DILocation(line: 1941, column: 9, scope: !1865)
!1876 = !DILocation(line: 1942, column: 54, scope: !1877)
!1877 = distinct !DILexicalBlock(scope: !1804, file: !10, line: 1942, column: 9)
!1878 = !DILocation(line: 1942, column: 10, scope: !1877)
!1879 = !DILocation(line: 1943, column: 13, scope: !1877)
!1880 = !DILocation(line: 1943, column: 61, scope: !1881)
!1881 = !DILexicalBlockFile(scope: !1877, file: !10, discriminator: 1)
!1882 = !DILocation(line: 1943, column: 17, scope: !1881)
!1883 = !DILocation(line: 1942, column: 9, scope: !1849)
!1884 = !DILocation(line: 1944, column: 9, scope: !1877)
!1885 = !DILocation(line: 1946, column: 20, scope: !1886)
!1886 = distinct !DILexicalBlock(scope: !1804, file: !10, line: 1946, column: 5)
!1887 = !DILocation(line: 1946, column: 10, scope: !1886)
!1888 = !DILocation(line: 1946, column: 25, scope: !1889)
!1889 = !DILexicalBlockFile(scope: !1890, file: !10, discriminator: 1)
!1890 = distinct !DILexicalBlock(scope: !1886, file: !10, line: 1946, column: 5)
!1891 = !DILocation(line: 1946, column: 35, scope: !1889)
!1892 = !DILocation(line: 1946, column: 5, scope: !1889)
!1893 = !DILocation(line: 1947, column: 82, scope: !1894)
!1894 = distinct !DILexicalBlock(scope: !1895, file: !10, line: 1947, column: 13)
!1895 = distinct !DILexicalBlock(scope: !1890, file: !10, line: 1946, column: 53)
!1896 = !DILocation(line: 1947, column: 80, scope: !1894)
!1897 = !DILocation(line: 1947, column: 70, scope: !1894)
!1898 = !DILocation(line: 1947, column: 14, scope: !1899)
!1899 = !DILexicalBlockFile(scope: !1894, file: !10, discriminator: 2)
!1900 = !DILocation(line: 1947, column: 14, scope: !1894)
!1901 = !DILocation(line: 1948, column: 17, scope: !1894)
!1902 = !DILocation(line: 1948, column: 93, scope: !1903)
!1903 = !DILexicalBlockFile(scope: !1894, file: !10, discriminator: 1)
!1904 = !DILocation(line: 1948, column: 91, scope: !1903)
!1905 = !DILocation(line: 1948, column: 79, scope: !1903)
!1906 = !DILocation(line: 1948, column: 21, scope: !1907)
!1907 = !DILexicalBlockFile(scope: !1903, file: !10, discriminator: 2)
!1908 = !DILocation(line: 1948, column: 21, scope: !1903)
!1909 = !DILocation(line: 1947, column: 13, scope: !1910)
!1910 = !DILexicalBlockFile(scope: !1895, file: !10, discriminator: 1)
!1911 = !DILocation(line: 1949, column: 13, scope: !1894)
!1912 = !DILocation(line: 1950, column: 13, scope: !1913)
!1913 = distinct !DILexicalBlock(scope: !1895, file: !10, line: 1950, column: 13)
!1914 = !DILocation(line: 1950, column: 13, scope: !1895)
!1915 = !DILocation(line: 1951, column: 26, scope: !1916)
!1916 = distinct !DILexicalBlock(scope: !1913, file: !10, line: 1950, column: 24)
!1917 = !DILocation(line: 1951, column: 13, scope: !1916)
!1918 = !DILocation(line: 1952, column: 26, scope: !1916)
!1919 = !DILocation(line: 1952, column: 13, scope: !1916)
!1920 = !DILocation(line: 1953, column: 9, scope: !1916)
!1921 = !DILocation(line: 1955, column: 89, scope: !1922)
!1922 = distinct !DILexicalBlock(scope: !1895, file: !10, line: 1955, column: 13)
!1923 = !DILocation(line: 1955, column: 77, scope: !1922)
!1924 = !DILocation(line: 1955, column: 104, scope: !1922)
!1925 = !DILocation(line: 1955, column: 14, scope: !1926)
!1926 = !DILexicalBlockFile(scope: !1922, file: !10, discriminator: 2)
!1927 = !DILocation(line: 1955, column: 14, scope: !1922)
!1928 = !DILocation(line: 1956, column: 17, scope: !1922)
!1929 = !DILocation(line: 1956, column: 98, scope: !1930)
!1930 = !DILexicalBlockFile(scope: !1922, file: !10, discriminator: 1)
!1931 = !DILocation(line: 1956, column: 86, scope: !1930)
!1932 = !DILocation(line: 1956, column: 115, scope: !1930)
!1933 = !DILocation(line: 1956, column: 21, scope: !1934)
!1934 = !DILexicalBlockFile(scope: !1930, file: !10, discriminator: 2)
!1935 = !DILocation(line: 1956, column: 21, scope: !1930)
!1936 = !DILocation(line: 1955, column: 13, scope: !1910)
!1937 = !DILocation(line: 1957, column: 13, scope: !1922)
!1938 = !DILocation(line: 1958, column: 25, scope: !1895)
!1939 = !DILocation(line: 1958, column: 9, scope: !1895)
!1940 = !DILocation(line: 1959, column: 100, scope: !1941)
!1941 = distinct !DILexicalBlock(scope: !1895, file: !10, line: 1959, column: 13)
!1942 = !DILocation(line: 1959, column: 103, scope: !1941)
!1943 = !DILocation(line: 1959, column: 106, scope: !1941)
!1944 = !DILocation(line: 1959, column: 117, scope: !1941)
!1945 = !DILocation(line: 1959, column: 130, scope: !1941)
!1946 = !DILocation(line: 1959, column: 93, scope: !1941)
!1947 = !DILocation(line: 1959, column: 136, scope: !1941)
!1948 = !DILocation(line: 1959, column: 14, scope: !1949)
!1949 = !DILexicalBlockFile(scope: !1941, file: !10, discriminator: 2)
!1950 = !DILocation(line: 1959, column: 14, scope: !1941)
!1951 = !DILocation(line: 1960, column: 17, scope: !1941)
!1952 = !DILocation(line: 1960, column: 65, scope: !1953)
!1953 = !DILexicalBlockFile(scope: !1941, file: !10, discriminator: 1)
!1954 = !DILocation(line: 1960, column: 21, scope: !1953)
!1955 = !DILocation(line: 1961, column: 17, scope: !1941)
!1956 = !DILocation(line: 1961, column: 65, scope: !1953)
!1957 = !DILocation(line: 1961, column: 21, scope: !1953)
!1958 = !DILocation(line: 1959, column: 13, scope: !1910)
!1959 = !DILocation(line: 1962, column: 13, scope: !1941)
!1960 = !DILocation(line: 1965, column: 91, scope: !1961)
!1961 = distinct !DILexicalBlock(scope: !1895, file: !10, line: 1965, column: 13)
!1962 = !DILocation(line: 1965, column: 79, scope: !1961)
!1963 = !DILocation(line: 1965, column: 108, scope: !1961)
!1964 = !DILocation(line: 1965, column: 14, scope: !1965)
!1965 = !DILexicalBlockFile(scope: !1961, file: !10, discriminator: 2)
!1966 = !DILocation(line: 1965, column: 14, scope: !1961)
!1967 = !DILocation(line: 1966, column: 17, scope: !1961)
!1968 = !DILocation(line: 1966, column: 107, scope: !1969)
!1969 = !DILexicalBlockFile(scope: !1961, file: !10, discriminator: 1)
!1970 = !DILocation(line: 1966, column: 110, scope: !1969)
!1971 = !DILocation(line: 1966, column: 113, scope: !1969)
!1972 = !DILocation(line: 1966, column: 124, scope: !1969)
!1973 = !DILocation(line: 1966, column: 137, scope: !1969)
!1974 = !DILocation(line: 1966, column: 100, scope: !1969)
!1975 = !DILocation(line: 1966, column: 143, scope: !1969)
!1976 = !DILocation(line: 1966, column: 21, scope: !1977)
!1977 = !DILexicalBlockFile(scope: !1969, file: !10, discriminator: 2)
!1978 = !DILocation(line: 1966, column: 21, scope: !1969)
!1979 = !DILocation(line: 1967, column: 17, scope: !1961)
!1980 = !DILocation(line: 1967, column: 65, scope: !1969)
!1981 = !DILocation(line: 1967, column: 21, scope: !1969)
!1982 = !DILocation(line: 1968, column: 17, scope: !1961)
!1983 = !DILocation(line: 1968, column: 65, scope: !1969)
!1984 = !DILocation(line: 1968, column: 21, scope: !1969)
!1985 = !DILocation(line: 1965, column: 13, scope: !1910)
!1986 = !DILocation(line: 1969, column: 13, scope: !1961)
!1987 = !DILocation(line: 1970, column: 17, scope: !1895)
!1988 = !DILocation(line: 1970, column: 9, scope: !1895)
!1989 = !DILocation(line: 1971, column: 17, scope: !1895)
!1990 = !DILocation(line: 1971, column: 9, scope: !1895)
!1991 = !DILocation(line: 1972, column: 33, scope: !1895)
!1992 = !DILocation(line: 1972, column: 19, scope: !1895)
!1993 = !DILocation(line: 1973, column: 5, scope: !1895)
!1994 = !DILocation(line: 1946, column: 49, scope: !1995)
!1995 = !DILexicalBlockFile(scope: !1890, file: !10, discriminator: 2)
!1996 = !DILocation(line: 1946, column: 5, scope: !1995)
!1997 = distinct !{!1997, !1998}
!1998 = !DILocation(line: 1946, column: 5, scope: !1804)
!1999 = !DILocation(line: 1976, column: 19, scope: !1804)
!2000 = !DILocation(line: 1976, column: 6, scope: !1804)
!2001 = !DILocation(line: 1977, column: 21, scope: !1804)
!2002 = !DILocation(line: 1977, column: 5, scope: !1804)
!2003 = !DILocation(line: 1978, column: 24, scope: !2004)
!2004 = distinct !DILexicalBlock(scope: !1804, file: !10, line: 1978, column: 9)
!2005 = !DILocation(line: 1978, column: 9, scope: !2004)
!2006 = !DILocation(line: 1978, column: 9, scope: !1804)
!2007 = !DILocation(line: 1979, column: 9, scope: !2004)
!2008 = !DILocation(line: 1980, column: 8, scope: !1804)
!2009 = !DILocation(line: 1980, column: 5, scope: !1804)
!2010 = !DILocation(line: 1983, column: 13, scope: !1804)
!2011 = !DILocation(line: 1983, column: 5, scope: !1804)
!2012 = !DILocation(line: 1984, column: 13, scope: !1804)
!2013 = !DILocation(line: 1984, column: 5, scope: !1804)
!2014 = !DILocation(line: 1985, column: 13, scope: !1804)
!2015 = !DILocation(line: 1985, column: 5, scope: !1804)
!2016 = !DILocation(line: 1986, column: 13, scope: !1804)
!2017 = !DILocation(line: 1986, column: 5, scope: !1804)
!2018 = !DILocation(line: 1987, column: 13, scope: !1804)
!2019 = !DILocation(line: 1987, column: 5, scope: !1804)
!2020 = !DILocation(line: 1988, column: 13, scope: !1804)
!2021 = !DILocation(line: 1988, column: 5, scope: !1804)
!2022 = !DILocation(line: 1989, column: 12, scope: !1804)
!2023 = !DILocation(line: 1989, column: 5, scope: !1804)
!2024 = distinct !DISubprogram(name: "test_badmod", scope: !10, file: !10, line: 1992, type: !39, isLocal: true, isDefinition: true, scopeLine: 1993, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2025 = !DILocalVariable(name: "a", scope: !2024, file: !10, line: 1994, type: !187)
!2026 = !DILocation(line: 1994, column: 13, scope: !2024)
!2027 = !DILocalVariable(name: "b", scope: !2024, file: !10, line: 1994, type: !187)
!2028 = !DILocation(line: 1994, column: 23, scope: !2024)
!2029 = !DILocalVariable(name: "zero", scope: !2024, file: !10, line: 1994, type: !187)
!2030 = !DILocation(line: 1994, column: 34, scope: !2024)
!2031 = !DILocalVariable(name: "mont", scope: !2024, file: !10, line: 1995, type: !584)
!2032 = !DILocation(line: 1995, column: 18, scope: !2024)
!2033 = !DILocalVariable(name: "st", scope: !2024, file: !10, line: 1996, type: !4)
!2034 = !DILocation(line: 1996, column: 9, scope: !2024)
!2035 = !DILocation(line: 1998, column: 62, scope: !2036)
!2036 = distinct !DILexicalBlock(scope: !2024, file: !10, line: 1998, column: 9)
!2037 = !DILocation(line: 1998, column: 60, scope: !2036)
!2038 = !DILocation(line: 1998, column: 58, scope: !2036)
!2039 = !DILocation(line: 1998, column: 10, scope: !2040)
!2040 = !DILexicalBlockFile(scope: !2036, file: !10, discriminator: 2)
!2041 = !DILocation(line: 1998, column: 10, scope: !2036)
!2042 = !DILocation(line: 1999, column: 13, scope: !2036)
!2043 = !DILocation(line: 1999, column: 69, scope: !2044)
!2044 = !DILexicalBlockFile(scope: !2036, file: !10, discriminator: 1)
!2045 = !DILocation(line: 1999, column: 67, scope: !2044)
!2046 = !DILocation(line: 1999, column: 65, scope: !2044)
!2047 = !DILocation(line: 1999, column: 17, scope: !2048)
!2048 = !DILexicalBlockFile(scope: !2044, file: !10, discriminator: 2)
!2049 = !DILocation(line: 1999, column: 17, scope: !2044)
!2050 = !DILocation(line: 2000, column: 13, scope: !2036)
!2051 = !DILocation(line: 2000, column: 75, scope: !2044)
!2052 = !DILocation(line: 2000, column: 73, scope: !2044)
!2053 = !DILocation(line: 2000, column: 68, scope: !2044)
!2054 = !DILocation(line: 2000, column: 17, scope: !2048)
!2055 = !DILocation(line: 2000, column: 17, scope: !2044)
!2056 = !DILocation(line: 2001, column: 13, scope: !2036)
!2057 = !DILocation(line: 2001, column: 84, scope: !2044)
!2058 = !DILocation(line: 2001, column: 82, scope: !2044)
!2059 = !DILocation(line: 2001, column: 77, scope: !2044)
!2060 = !DILocation(line: 2001, column: 17, scope: !2048)
!2061 = !DILocation(line: 2001, column: 17, scope: !2044)
!2062 = !DILocation(line: 1998, column: 9, scope: !2063)
!2063 = !DILexicalBlockFile(scope: !2024, file: !10, discriminator: 1)
!2064 = !DILocation(line: 2002, column: 9, scope: !2036)
!2065 = !DILocation(line: 2003, column: 19, scope: !2024)
!2066 = !DILocation(line: 2003, column: 6, scope: !2024)
!2067 = !DILocation(line: 2005, column: 95, scope: !2068)
!2068 = distinct !DILexicalBlock(scope: !2024, file: !10, line: 2005, column: 9)
!2069 = !DILocation(line: 2005, column: 98, scope: !2068)
!2070 = !DILocation(line: 2005, column: 101, scope: !2068)
!2071 = !DILocation(line: 2005, column: 117, scope: !2068)
!2072 = !DILocation(line: 2005, column: 123, scope: !2068)
!2073 = !DILocation(line: 2005, column: 88, scope: !2074)
!2074 = !DILexicalBlockFile(scope: !2068, file: !10, discriminator: 1)
!2075 = !DILocation(line: 2005, column: 129, scope: !2068)
!2076 = !DILocation(line: 2005, column: 10, scope: !2077)
!2077 = !DILexicalBlockFile(scope: !2068, file: !10, discriminator: 2)
!2078 = !DILocation(line: 2005, column: 10, scope: !2068)
!2079 = !DILocation(line: 2005, column: 9, scope: !2024)
!2080 = !DILocation(line: 2006, column: 9, scope: !2068)
!2081 = !DILocation(line: 2007, column: 5, scope: !2024)
!2082 = !DILocation(line: 2009, column: 116, scope: !2083)
!2083 = distinct !DILexicalBlock(scope: !2024, file: !10, line: 2009, column: 9)
!2084 = !DILocation(line: 2009, column: 119, scope: !2083)
!2085 = !DILocation(line: 2009, column: 135, scope: !2086)
!2086 = !DILexicalBlockFile(scope: !2083, file: !10, discriminator: 1)
!2087 = !DILocation(line: 2009, column: 151, scope: !2083)
!2088 = !DILocation(line: 2009, column: 157, scope: !2083)
!2089 = !DILocation(line: 2009, column: 105, scope: !2090)
!2090 = !DILexicalBlockFile(scope: !2083, file: !10, discriminator: 2)
!2091 = !DILocation(line: 2009, column: 163, scope: !2083)
!2092 = !DILocation(line: 2009, column: 10, scope: !2093)
!2093 = !DILexicalBlockFile(scope: !2083, file: !10, discriminator: 3)
!2094 = !DILocation(line: 2009, column: 10, scope: !2083)
!2095 = !DILocation(line: 2009, column: 9, scope: !2024)
!2096 = !DILocation(line: 2010, column: 9, scope: !2083)
!2097 = !DILocation(line: 2011, column: 5, scope: !2024)
!2098 = !DILocation(line: 2013, column: 116, scope: !2099)
!2099 = distinct !DILexicalBlock(scope: !2024, file: !10, line: 2013, column: 9)
!2100 = !DILocation(line: 2013, column: 119, scope: !2099)
!2101 = !DILocation(line: 2013, column: 135, scope: !2102)
!2102 = !DILexicalBlockFile(scope: !2099, file: !10, discriminator: 1)
!2103 = !DILocation(line: 2013, column: 151, scope: !2099)
!2104 = !DILocation(line: 2013, column: 157, scope: !2099)
!2105 = !DILocation(line: 2013, column: 105, scope: !2106)
!2106 = !DILexicalBlockFile(scope: !2099, file: !10, discriminator: 2)
!2107 = !DILocation(line: 2013, column: 163, scope: !2099)
!2108 = !DILocation(line: 2013, column: 10, scope: !2109)
!2109 = !DILexicalBlockFile(scope: !2099, file: !10, discriminator: 3)
!2110 = !DILocation(line: 2013, column: 10, scope: !2099)
!2111 = !DILocation(line: 2013, column: 9, scope: !2024)
!2112 = !DILocation(line: 2014, column: 9, scope: !2099)
!2113 = !DILocation(line: 2015, column: 5, scope: !2024)
!2114 = !DILocation(line: 2017, column: 100, scope: !2115)
!2115 = distinct !DILexicalBlock(scope: !2024, file: !10, line: 2017, column: 9)
!2116 = !DILocation(line: 2017, column: 103, scope: !2115)
!2117 = !DILocation(line: 2017, column: 119, scope: !2118)
!2118 = !DILexicalBlockFile(scope: !2115, file: !10, discriminator: 1)
!2119 = !DILocation(line: 2017, column: 135, scope: !2115)
!2120 = !DILocation(line: 2017, column: 141, scope: !2115)
!2121 = !DILocation(line: 2017, column: 84, scope: !2122)
!2122 = !DILexicalBlockFile(scope: !2115, file: !10, discriminator: 2)
!2123 = !DILocation(line: 2017, column: 12, scope: !2115)
!2124 = !DILocation(line: 2017, column: 10, scope: !2125)
!2125 = !DILexicalBlockFile(scope: !2115, file: !10, discriminator: 3)
!2126 = !DILocation(line: 2017, column: 10, scope: !2115)
!2127 = !DILocation(line: 2017, column: 9, scope: !2024)
!2128 = !DILocation(line: 2019, column: 9, scope: !2115)
!2129 = !DILocation(line: 2020, column: 5, scope: !2024)
!2130 = !DILocation(line: 2022, column: 120, scope: !2131)
!2131 = distinct !DILexicalBlock(scope: !2024, file: !10, line: 2022, column: 9)
!2132 = !DILocation(line: 2022, column: 123, scope: !2131)
!2133 = !DILocation(line: 2022, column: 139, scope: !2134)
!2134 = !DILexicalBlockFile(scope: !2131, file: !10, discriminator: 1)
!2135 = !DILocation(line: 2022, column: 155, scope: !2131)
!2136 = !DILocation(line: 2022, column: 161, scope: !2131)
!2137 = !DILocation(line: 2022, column: 94, scope: !2138)
!2138 = !DILexicalBlockFile(scope: !2131, file: !10, discriminator: 2)
!2139 = !DILocation(line: 2022, column: 12, scope: !2131)
!2140 = !DILocation(line: 2022, column: 10, scope: !2141)
!2141 = !DILexicalBlockFile(scope: !2131, file: !10, discriminator: 3)
!2142 = !DILocation(line: 2022, column: 10, scope: !2131)
!2143 = !DILocation(line: 2022, column: 9, scope: !2024)
!2144 = !DILocation(line: 2024, column: 9, scope: !2131)
!2145 = !DILocation(line: 2025, column: 5, scope: !2024)
!2146 = !DILocation(line: 2027, column: 97, scope: !2147)
!2147 = distinct !DILexicalBlock(scope: !2024, file: !10, line: 2027, column: 9)
!2148 = !DILocation(line: 2027, column: 103, scope: !2147)
!2149 = !DILocation(line: 2027, column: 109, scope: !2147)
!2150 = !DILocation(line: 2027, column: 81, scope: !2147)
!2151 = !DILocation(line: 2027, column: 115, scope: !2147)
!2152 = !DILocation(line: 2027, column: 10, scope: !2153)
!2153 = !DILexicalBlockFile(scope: !2147, file: !10, discriminator: 1)
!2154 = !DILocation(line: 2027, column: 10, scope: !2147)
!2155 = !DILocation(line: 2027, column: 9, scope: !2024)
!2156 = !DILocation(line: 2028, column: 9, scope: !2147)
!2157 = !DILocation(line: 2029, column: 5, scope: !2024)
!2158 = !DILocation(line: 2032, column: 78, scope: !2159)
!2159 = distinct !DILexicalBlock(scope: !2024, file: !10, line: 2032, column: 9)
!2160 = !DILocation(line: 2032, column: 66, scope: !2159)
!2161 = !DILocation(line: 2032, column: 86, scope: !2159)
!2162 = !DILocation(line: 2032, column: 10, scope: !2163)
!2163 = !DILexicalBlockFile(scope: !2159, file: !10, discriminator: 1)
!2164 = !DILocation(line: 2032, column: 10, scope: !2159)
!2165 = !DILocation(line: 2032, column: 9, scope: !2024)
!2166 = !DILocation(line: 2033, column: 9, scope: !2159)
!2167 = !DILocation(line: 2035, column: 94, scope: !2168)
!2168 = distinct !DILexicalBlock(scope: !2024, file: !10, line: 2035, column: 9)
!2169 = !DILocation(line: 2035, column: 100, scope: !2168)
!2170 = !DILocation(line: 2035, column: 103, scope: !2168)
!2171 = !DILocation(line: 2035, column: 78, scope: !2168)
!2172 = !DILocation(line: 2035, column: 109, scope: !2168)
!2173 = !DILocation(line: 2035, column: 10, scope: !2174)
!2174 = !DILexicalBlockFile(scope: !2168, file: !10, discriminator: 1)
!2175 = !DILocation(line: 2035, column: 10, scope: !2168)
!2176 = !DILocation(line: 2035, column: 9, scope: !2024)
!2177 = !DILocation(line: 2036, column: 9, scope: !2168)
!2178 = !DILocation(line: 2037, column: 5, scope: !2024)
!2179 = !DILocation(line: 2039, column: 97, scope: !2180)
!2180 = distinct !DILexicalBlock(scope: !2024, file: !10, line: 2039, column: 9)
!2181 = !DILocation(line: 2039, column: 100, scope: !2180)
!2182 = !DILocation(line: 2039, column: 116, scope: !2183)
!2183 = !DILexicalBlockFile(scope: !2180, file: !10, discriminator: 1)
!2184 = !DILocation(line: 2039, column: 132, scope: !2180)
!2185 = !DILocation(line: 2039, column: 135, scope: !2180)
!2186 = !DILocation(line: 2039, column: 81, scope: !2187)
!2187 = !DILexicalBlockFile(scope: !2180, file: !10, discriminator: 2)
!2188 = !DILocation(line: 2039, column: 12, scope: !2180)
!2189 = !DILocation(line: 2039, column: 10, scope: !2190)
!2190 = !DILexicalBlockFile(scope: !2180, file: !10, discriminator: 3)
!2191 = !DILocation(line: 2039, column: 10, scope: !2180)
!2192 = !DILocation(line: 2039, column: 9, scope: !2024)
!2193 = !DILocation(line: 2041, column: 9, scope: !2180)
!2194 = !DILocation(line: 2042, column: 5, scope: !2024)
!2195 = !DILocation(line: 2044, column: 117, scope: !2196)
!2196 = distinct !DILexicalBlock(scope: !2024, file: !10, line: 2044, column: 9)
!2197 = !DILocation(line: 2044, column: 120, scope: !2196)
!2198 = !DILocation(line: 2044, column: 136, scope: !2199)
!2199 = !DILexicalBlockFile(scope: !2196, file: !10, discriminator: 1)
!2200 = !DILocation(line: 2044, column: 152, scope: !2196)
!2201 = !DILocation(line: 2044, column: 155, scope: !2196)
!2202 = !DILocation(line: 2044, column: 91, scope: !2203)
!2203 = !DILexicalBlockFile(scope: !2196, file: !10, discriminator: 2)
!2204 = !DILocation(line: 2044, column: 12, scope: !2196)
!2205 = !DILocation(line: 2044, column: 10, scope: !2206)
!2206 = !DILexicalBlockFile(scope: !2196, file: !10, discriminator: 3)
!2207 = !DILocation(line: 2044, column: 10, scope: !2196)
!2208 = !DILocation(line: 2044, column: 9, scope: !2024)
!2209 = !DILocation(line: 2046, column: 9, scope: !2196)
!2210 = !DILocation(line: 2047, column: 5, scope: !2024)
!2211 = !DILocation(line: 2049, column: 8, scope: !2024)
!2212 = !DILocation(line: 2049, column: 5, scope: !2024)
!2213 = !DILocation(line: 2051, column: 13, scope: !2024)
!2214 = !DILocation(line: 2051, column: 5, scope: !2024)
!2215 = !DILocation(line: 2052, column: 13, scope: !2024)
!2216 = !DILocation(line: 2052, column: 5, scope: !2024)
!2217 = !DILocation(line: 2053, column: 13, scope: !2024)
!2218 = !DILocation(line: 2053, column: 5, scope: !2024)
!2219 = !DILocation(line: 2054, column: 22, scope: !2024)
!2220 = !DILocation(line: 2054, column: 5, scope: !2024)
!2221 = !DILocation(line: 2055, column: 12, scope: !2024)
!2222 = !DILocation(line: 2055, column: 5, scope: !2024)
!2223 = distinct !DISubprogram(name: "test_expmodzero", scope: !10, file: !10, line: 2058, type: !39, isLocal: true, isDefinition: true, scopeLine: 2059, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2224 = !DILocalVariable(name: "a", scope: !2223, file: !10, line: 2060, type: !187)
!2225 = !DILocation(line: 2060, column: 13, scope: !2223)
!2226 = !DILocalVariable(name: "r", scope: !2223, file: !10, line: 2060, type: !187)
!2227 = !DILocation(line: 2060, column: 23, scope: !2223)
!2228 = !DILocalVariable(name: "zero", scope: !2223, file: !10, line: 2060, type: !187)
!2229 = !DILocation(line: 2060, column: 34, scope: !2223)
!2230 = !DILocalVariable(name: "st", scope: !2223, file: !10, line: 2061, type: !4)
!2231 = !DILocation(line: 2061, column: 9, scope: !2223)
!2232 = !DILocation(line: 2063, column: 68, scope: !2233)
!2233 = distinct !DILexicalBlock(scope: !2223, file: !10, line: 2063, column: 9)
!2234 = !DILocation(line: 2063, column: 66, scope: !2233)
!2235 = !DILocation(line: 2063, column: 61, scope: !2233)
!2236 = !DILocation(line: 2063, column: 10, scope: !2237)
!2237 = !DILexicalBlockFile(scope: !2233, file: !10, discriminator: 2)
!2238 = !DILocation(line: 2063, column: 10, scope: !2233)
!2239 = !DILocation(line: 2064, column: 13, scope: !2233)
!2240 = !DILocation(line: 2064, column: 69, scope: !2241)
!2241 = !DILexicalBlockFile(scope: !2233, file: !10, discriminator: 1)
!2242 = !DILocation(line: 2064, column: 67, scope: !2241)
!2243 = !DILocation(line: 2064, column: 65, scope: !2241)
!2244 = !DILocation(line: 2064, column: 17, scope: !2245)
!2245 = !DILexicalBlockFile(scope: !2241, file: !10, discriminator: 2)
!2246 = !DILocation(line: 2064, column: 17, scope: !2241)
!2247 = !DILocation(line: 2065, column: 13, scope: !2233)
!2248 = !DILocation(line: 2065, column: 69, scope: !2241)
!2249 = !DILocation(line: 2065, column: 67, scope: !2241)
!2250 = !DILocation(line: 2065, column: 65, scope: !2241)
!2251 = !DILocation(line: 2065, column: 17, scope: !2245)
!2252 = !DILocation(line: 2065, column: 17, scope: !2241)
!2253 = !DILocation(line: 2063, column: 9, scope: !2254)
!2254 = !DILexicalBlockFile(scope: !2223, file: !10, discriminator: 1)
!2255 = !DILocation(line: 2066, column: 9, scope: !2233)
!2256 = !DILocation(line: 2067, column: 19, scope: !2223)
!2257 = !DILocation(line: 2067, column: 6, scope: !2223)
!2258 = !DILocation(line: 2069, column: 103, scope: !2259)
!2259 = distinct !DILexicalBlock(scope: !2223, file: !10, line: 2069, column: 9)
!2260 = !DILocation(line: 2069, column: 106, scope: !2259)
!2261 = !DILocation(line: 2069, column: 109, scope: !2259)
!2262 = !DILocation(line: 2069, column: 115, scope: !2259)
!2263 = !DILocation(line: 2069, column: 92, scope: !2264)
!2264 = !DILexicalBlockFile(scope: !2259, file: !10, discriminator: 2)
!2265 = !DILocation(line: 2069, column: 12, scope: !2259)
!2266 = !DILocation(line: 2069, column: 10, scope: !2267)
!2267 = !DILexicalBlockFile(scope: !2259, file: !10, discriminator: 3)
!2268 = !DILocation(line: 2069, column: 10, scope: !2259)
!2269 = !DILocation(line: 2070, column: 13, scope: !2259)
!2270 = !DILocation(line: 2070, column: 61, scope: !2271)
!2271 = !DILexicalBlockFile(scope: !2259, file: !10, discriminator: 1)
!2272 = !DILocation(line: 2070, column: 17, scope: !2271)
!2273 = !DILocation(line: 2071, column: 13, scope: !2259)
!2274 = !DILocation(line: 2071, column: 95, scope: !2271)
!2275 = !DILocation(line: 2071, column: 98, scope: !2271)
!2276 = !DILocation(line: 2071, column: 101, scope: !2271)
!2277 = !DILocation(line: 2071, column: 107, scope: !2271)
!2278 = !DILocation(line: 2071, column: 79, scope: !2279)
!2279 = !DILexicalBlockFile(scope: !2271, file: !10, discriminator: 2)
!2280 = !DILocation(line: 2071, column: 19, scope: !2271)
!2281 = !DILocation(line: 2071, column: 17, scope: !2282)
!2282 = !DILexicalBlockFile(scope: !2271, file: !10, discriminator: 3)
!2283 = !DILocation(line: 2071, column: 17, scope: !2271)
!2284 = !DILocation(line: 2073, column: 13, scope: !2259)
!2285 = !DILocation(line: 2073, column: 61, scope: !2271)
!2286 = !DILocation(line: 2073, column: 17, scope: !2271)
!2287 = !DILocation(line: 2074, column: 13, scope: !2259)
!2288 = !DILocation(line: 2074, column: 115, scope: !2271)
!2289 = !DILocation(line: 2074, column: 118, scope: !2271)
!2290 = !DILocation(line: 2074, column: 121, scope: !2271)
!2291 = !DILocation(line: 2074, column: 127, scope: !2271)
!2292 = !DILocation(line: 2074, column: 89, scope: !2279)
!2293 = !DILocation(line: 2074, column: 19, scope: !2271)
!2294 = !DILocation(line: 2074, column: 17, scope: !2282)
!2295 = !DILocation(line: 2074, column: 17, scope: !2271)
!2296 = !DILocation(line: 2077, column: 13, scope: !2259)
!2297 = !DILocation(line: 2077, column: 61, scope: !2271)
!2298 = !DILocation(line: 2077, column: 17, scope: !2271)
!2299 = !DILocation(line: 2078, column: 13, scope: !2259)
!2300 = !DILocation(line: 2078, column: 106, scope: !2271)
!2301 = !DILocation(line: 2078, column: 113, scope: !2271)
!2302 = !DILocation(line: 2078, column: 119, scope: !2271)
!2303 = !DILocation(line: 2078, column: 85, scope: !2279)
!2304 = !DILocation(line: 2078, column: 19, scope: !2271)
!2305 = !DILocation(line: 2078, column: 17, scope: !2282)
!2306 = !DILocation(line: 2078, column: 17, scope: !2271)
!2307 = !DILocation(line: 2080, column: 13, scope: !2259)
!2308 = !DILocation(line: 2080, column: 61, scope: !2271)
!2309 = !DILocation(line: 2080, column: 17, scope: !2271)
!2310 = !DILocation(line: 2069, column: 9, scope: !2254)
!2311 = !DILocation(line: 2081, column: 9, scope: !2259)
!2312 = !DILocation(line: 2083, column: 8, scope: !2223)
!2313 = !DILocation(line: 2083, column: 5, scope: !2223)
!2314 = !DILocation(line: 2085, column: 13, scope: !2223)
!2315 = !DILocation(line: 2085, column: 5, scope: !2223)
!2316 = !DILocation(line: 2086, column: 13, scope: !2223)
!2317 = !DILocation(line: 2086, column: 5, scope: !2223)
!2318 = !DILocation(line: 2087, column: 13, scope: !2223)
!2319 = !DILocation(line: 2087, column: 5, scope: !2223)
!2320 = !DILocation(line: 2088, column: 12, scope: !2223)
!2321 = !DILocation(line: 2088, column: 5, scope: !2223)
!2322 = distinct !DISubprogram(name: "test_expmodone", scope: !10, file: !10, line: 2091, type: !39, isLocal: true, isDefinition: true, scopeLine: 2092, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2323 = !DILocalVariable(name: "ret", scope: !2322, file: !10, line: 2093, type: !4)
!2324 = !DILocation(line: 2093, column: 9, scope: !2322)
!2325 = !DILocalVariable(name: "i", scope: !2322, file: !10, line: 2093, type: !4)
!2326 = !DILocation(line: 2093, column: 18, scope: !2322)
!2327 = !DILocalVariable(name: "r", scope: !2322, file: !10, line: 2094, type: !187)
!2328 = !DILocation(line: 2094, column: 13, scope: !2322)
!2329 = !DILocation(line: 2094, column: 17, scope: !2322)
!2330 = !DILocalVariable(name: "a", scope: !2322, file: !10, line: 2095, type: !187)
!2331 = !DILocation(line: 2095, column: 13, scope: !2322)
!2332 = !DILocation(line: 2095, column: 17, scope: !2322)
!2333 = !DILocalVariable(name: "p", scope: !2322, file: !10, line: 2096, type: !187)
!2334 = !DILocation(line: 2096, column: 13, scope: !2322)
!2335 = !DILocation(line: 2096, column: 17, scope: !2322)
!2336 = !DILocalVariable(name: "m", scope: !2322, file: !10, line: 2097, type: !187)
!2337 = !DILocation(line: 2097, column: 13, scope: !2322)
!2338 = !DILocation(line: 2097, column: 17, scope: !2322)
!2339 = !DILocation(line: 2099, column: 47, scope: !2340)
!2340 = distinct !DILexicalBlock(scope: !2322, file: !10, line: 2099, column: 9)
!2341 = !DILocation(line: 2099, column: 10, scope: !2340)
!2342 = !DILocation(line: 2100, column: 13, scope: !2340)
!2343 = !DILocation(line: 2100, column: 54, scope: !2344)
!2344 = !DILexicalBlockFile(scope: !2340, file: !10, discriminator: 1)
!2345 = !DILocation(line: 2100, column: 17, scope: !2344)
!2346 = !DILocation(line: 2101, column: 13, scope: !2340)
!2347 = !DILocation(line: 2101, column: 54, scope: !2344)
!2348 = !DILocation(line: 2101, column: 17, scope: !2344)
!2349 = !DILocation(line: 2102, column: 13, scope: !2340)
!2350 = !DILocation(line: 2102, column: 54, scope: !2344)
!2351 = !DILocation(line: 2102, column: 17, scope: !2344)
!2352 = !DILocation(line: 2103, column: 13, scope: !2340)
!2353 = !DILocation(line: 2103, column: 54, scope: !2344)
!2354 = !DILocation(line: 2103, column: 17, scope: !2344)
!2355 = !DILocation(line: 2104, column: 13, scope: !2340)
!2356 = !DILocation(line: 2104, column: 84, scope: !2344)
!2357 = !DILocation(line: 2104, column: 72, scope: !2344)
!2358 = !DILocation(line: 2104, column: 91, scope: !2344)
!2359 = !DILocation(line: 2104, column: 17, scope: !2360)
!2360 = !DILexicalBlockFile(scope: !2344, file: !10, discriminator: 2)
!2361 = !DILocation(line: 2104, column: 17, scope: !2344)
!2362 = !DILocation(line: 2105, column: 13, scope: !2340)
!2363 = !DILocation(line: 2105, column: 84, scope: !2344)
!2364 = !DILocation(line: 2105, column: 72, scope: !2344)
!2365 = !DILocation(line: 2105, column: 91, scope: !2344)
!2366 = !DILocation(line: 2105, column: 17, scope: !2360)
!2367 = !DILocation(line: 2105, column: 17, scope: !2344)
!2368 = !DILocation(line: 2106, column: 13, scope: !2340)
!2369 = !DILocation(line: 2106, column: 84, scope: !2344)
!2370 = !DILocation(line: 2106, column: 72, scope: !2344)
!2371 = !DILocation(line: 2106, column: 91, scope: !2344)
!2372 = !DILocation(line: 2106, column: 17, scope: !2360)
!2373 = !DILocation(line: 2106, column: 17, scope: !2344)
!2374 = !DILocation(line: 2099, column: 9, scope: !2375)
!2375 = !DILexicalBlockFile(scope: !2322, file: !10, discriminator: 1)
!2376 = !DILocation(line: 2107, column: 9, scope: !2340)
!2377 = !DILocation(line: 2110, column: 12, scope: !2378)
!2378 = distinct !DILexicalBlock(scope: !2322, file: !10, line: 2110, column: 5)
!2379 = !DILocation(line: 2110, column: 10, scope: !2378)
!2380 = !DILocation(line: 2110, column: 17, scope: !2381)
!2381 = !DILexicalBlockFile(scope: !2382, file: !10, discriminator: 1)
!2382 = distinct !DILexicalBlock(scope: !2378, file: !10, line: 2110, column: 5)
!2383 = !DILocation(line: 2110, column: 19, scope: !2381)
!2384 = !DILocation(line: 2110, column: 5, scope: !2381)
!2385 = !DILocation(line: 2111, column: 91, scope: !2386)
!2386 = distinct !DILexicalBlock(scope: !2387, file: !10, line: 2111, column: 13)
!2387 = distinct !DILexicalBlock(scope: !2382, file: !10, line: 2110, column: 29)
!2388 = !DILocation(line: 2111, column: 94, scope: !2386)
!2389 = !DILocation(line: 2111, column: 97, scope: !2386)
!2390 = !DILocation(line: 2111, column: 100, scope: !2386)
!2391 = !DILocation(line: 2111, column: 80, scope: !2386)
!2392 = !DILocation(line: 2111, column: 16, scope: !2386)
!2393 = !DILocation(line: 2111, column: 14, scope: !2394)
!2394 = !DILexicalBlockFile(scope: !2386, file: !10, discriminator: 2)
!2395 = !DILocation(line: 2111, column: 14, scope: !2386)
!2396 = !DILocation(line: 2112, column: 17, scope: !2386)
!2397 = !DILocation(line: 2112, column: 65, scope: !2398)
!2398 = !DILexicalBlockFile(scope: !2386, file: !10, discriminator: 1)
!2399 = !DILocation(line: 2112, column: 21, scope: !2398)
!2400 = !DILocation(line: 2113, column: 17, scope: !2386)
!2401 = !DILocation(line: 2113, column: 114, scope: !2398)
!2402 = !DILocation(line: 2113, column: 117, scope: !2398)
!2403 = !DILocation(line: 2113, column: 120, scope: !2398)
!2404 = !DILocation(line: 2113, column: 123, scope: !2398)
!2405 = !DILocation(line: 2113, column: 98, scope: !2398)
!2406 = !DILocation(line: 2113, column: 23, scope: !2398)
!2407 = !DILocation(line: 2113, column: 21, scope: !2408)
!2408 = !DILexicalBlockFile(scope: !2398, file: !10, discriminator: 2)
!2409 = !DILocation(line: 2113, column: 21, scope: !2398)
!2410 = !DILocation(line: 2114, column: 17, scope: !2386)
!2411 = !DILocation(line: 2114, column: 65, scope: !2398)
!2412 = !DILocation(line: 2114, column: 21, scope: !2398)
!2413 = !DILocation(line: 2115, column: 17, scope: !2386)
!2414 = !DILocation(line: 2115, column: 134, scope: !2398)
!2415 = !DILocation(line: 2115, column: 137, scope: !2398)
!2416 = !DILocation(line: 2115, column: 140, scope: !2398)
!2417 = !DILocation(line: 2115, column: 143, scope: !2398)
!2418 = !DILocation(line: 2115, column: 108, scope: !2398)
!2419 = !DILocation(line: 2115, column: 23, scope: !2398)
!2420 = !DILocation(line: 2115, column: 21, scope: !2408)
!2421 = !DILocation(line: 2115, column: 21, scope: !2398)
!2422 = !DILocation(line: 2116, column: 17, scope: !2386)
!2423 = !DILocation(line: 2116, column: 65, scope: !2398)
!2424 = !DILocation(line: 2116, column: 21, scope: !2398)
!2425 = !DILocation(line: 2117, column: 17, scope: !2386)
!2426 = !DILocation(line: 2117, column: 124, scope: !2398)
!2427 = !DILocation(line: 2117, column: 130, scope: !2398)
!2428 = !DILocation(line: 2117, column: 133, scope: !2398)
!2429 = !DILocation(line: 2117, column: 103, scope: !2398)
!2430 = !DILocation(line: 2117, column: 23, scope: !2398)
!2431 = !DILocation(line: 2117, column: 21, scope: !2408)
!2432 = !DILocation(line: 2117, column: 21, scope: !2398)
!2433 = !DILocation(line: 2118, column: 17, scope: !2386)
!2434 = !DILocation(line: 2118, column: 65, scope: !2398)
!2435 = !DILocation(line: 2118, column: 21, scope: !2398)
!2436 = !DILocation(line: 2119, column: 17, scope: !2386)
!2437 = !DILocation(line: 2119, column: 112, scope: !2398)
!2438 = !DILocation(line: 2119, column: 115, scope: !2398)
!2439 = !DILocation(line: 2119, column: 118, scope: !2398)
!2440 = !DILocation(line: 2119, column: 121, scope: !2398)
!2441 = !DILocation(line: 2119, column: 94, scope: !2398)
!2442 = !DILocation(line: 2119, column: 23, scope: !2398)
!2443 = !DILocation(line: 2119, column: 21, scope: !2408)
!2444 = !DILocation(line: 2119, column: 21, scope: !2398)
!2445 = !DILocation(line: 2120, column: 17, scope: !2386)
!2446 = !DILocation(line: 2120, column: 65, scope: !2398)
!2447 = !DILocation(line: 2120, column: 21, scope: !2398)
!2448 = !DILocation(line: 2121, column: 17, scope: !2386)
!2449 = !DILocation(line: 2121, column: 108, scope: !2398)
!2450 = !DILocation(line: 2121, column: 111, scope: !2398)
!2451 = !DILocation(line: 2121, column: 114, scope: !2398)
!2452 = !DILocation(line: 2121, column: 117, scope: !2398)
!2453 = !DILocation(line: 2121, column: 92, scope: !2398)
!2454 = !DILocation(line: 2121, column: 23, scope: !2398)
!2455 = !DILocation(line: 2121, column: 21, scope: !2408)
!2456 = !DILocation(line: 2121, column: 21, scope: !2398)
!2457 = !DILocation(line: 2122, column: 17, scope: !2386)
!2458 = !DILocation(line: 2122, column: 65, scope: !2398)
!2459 = !DILocation(line: 2122, column: 21, scope: !2398)
!2460 = !DILocation(line: 2111, column: 13, scope: !2461)
!2461 = !DILexicalBlockFile(scope: !2387, file: !10, discriminator: 1)
!2462 = !DILocation(line: 2123, column: 13, scope: !2386)
!2463 = !DILocation(line: 2125, column: 13, scope: !2464)
!2464 = distinct !DILexicalBlock(scope: !2387, file: !10, line: 2125, column: 13)
!2465 = !DILocation(line: 2125, column: 15, scope: !2464)
!2466 = !DILocation(line: 2125, column: 13, scope: !2387)
!2467 = !DILocation(line: 2126, column: 29, scope: !2464)
!2468 = !DILocation(line: 2126, column: 13, scope: !2464)
!2469 = !DILocation(line: 2127, column: 5, scope: !2387)
!2470 = !DILocation(line: 2110, column: 25, scope: !2471)
!2471 = !DILexicalBlockFile(scope: !2382, file: !10, discriminator: 2)
!2472 = !DILocation(line: 2110, column: 5, scope: !2471)
!2473 = distinct !{!2473, !2474}
!2474 = !DILocation(line: 2110, column: 5, scope: !2322)
!2475 = !DILocation(line: 2129, column: 9, scope: !2322)
!2476 = !DILocation(line: 2129, column: 5, scope: !2322)
!2477 = !DILocation(line: 2131, column: 13, scope: !2322)
!2478 = !DILocation(line: 2131, column: 5, scope: !2322)
!2479 = !DILocation(line: 2132, column: 13, scope: !2322)
!2480 = !DILocation(line: 2132, column: 5, scope: !2322)
!2481 = !DILocation(line: 2133, column: 13, scope: !2322)
!2482 = !DILocation(line: 2133, column: 5, scope: !2322)
!2483 = !DILocation(line: 2134, column: 13, scope: !2322)
!2484 = !DILocation(line: 2134, column: 5, scope: !2322)
!2485 = !DILocation(line: 2135, column: 12, scope: !2322)
!2486 = !DILocation(line: 2135, column: 5, scope: !2322)
!2487 = !DILocalVariable(name: "r", scope: !71, file: !10, line: 2141, type: !187)
!2488 = !DILocation(line: 2141, column: 13, scope: !71)
!2489 = !DILocalVariable(name: "st", scope: !71, file: !10, line: 2142, type: !4)
!2490 = !DILocation(line: 2142, column: 9, scope: !71)
!2491 = !DILocation(line: 2144, column: 62, scope: !2492)
!2492 = distinct !DILexicalBlock(scope: !71, file: !10, line: 2144, column: 9)
!2493 = !DILocation(line: 2144, column: 60, scope: !2492)
!2494 = !DILocation(line: 2144, column: 58, scope: !2492)
!2495 = !DILocation(line: 2144, column: 10, scope: !2496)
!2496 = !DILexicalBlockFile(scope: !2492, file: !10, discriminator: 2)
!2497 = !DILocation(line: 2144, column: 10, scope: !2492)
!2498 = !DILocation(line: 2145, column: 13, scope: !2492)
!2499 = !DILocation(line: 2145, column: 101, scope: !2500)
!2500 = !DILexicalBlockFile(scope: !2492, file: !10, discriminator: 1)
!2501 = !DILocation(line: 2145, column: 80, scope: !2500)
!2502 = !DILocation(line: 2145, column: 19, scope: !2500)
!2503 = !DILocation(line: 2145, column: 17, scope: !2504)
!2504 = !DILexicalBlockFile(scope: !2500, file: !10, discriminator: 2)
!2505 = !DILocation(line: 2145, column: 17, scope: !2500)
!2506 = !DILocation(line: 2147, column: 13, scope: !2492)
!2507 = !DILocation(line: 2147, column: 91, scope: !2500)
!2508 = !DILocation(line: 2147, column: 79, scope: !2500)
!2509 = !DILocation(line: 2147, column: 17, scope: !2504)
!2510 = !DILocation(line: 2147, column: 17, scope: !2500)
!2511 = !DILocation(line: 2144, column: 9, scope: !2512)
!2512 = !DILexicalBlockFile(scope: !71, file: !10, discriminator: 1)
!2513 = !DILocation(line: 2148, column: 9, scope: !2492)
!2514 = !DILocation(line: 2150, column: 8, scope: !71)
!2515 = !DILocation(line: 2150, column: 5, scope: !71)
!2516 = !DILocation(line: 2152, column: 13, scope: !71)
!2517 = !DILocation(line: 2152, column: 5, scope: !71)
!2518 = !DILocation(line: 2153, column: 12, scope: !71)
!2519 = !DILocation(line: 2153, column: 5, scope: !71)
!2520 = distinct !DISubprogram(name: "test_swap", scope: !10, file: !10, line: 154, type: !39, isLocal: true, isDefinition: true, scopeLine: 155, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2521 = !DILocalVariable(name: "a", scope: !2520, file: !10, line: 156, type: !187)
!2522 = !DILocation(line: 156, column: 13, scope: !2520)
!2523 = !DILocalVariable(name: "b", scope: !2520, file: !10, line: 156, type: !187)
!2524 = !DILocation(line: 156, column: 23, scope: !2520)
!2525 = !DILocalVariable(name: "c", scope: !2520, file: !10, line: 156, type: !187)
!2526 = !DILocation(line: 156, column: 34, scope: !2520)
!2527 = !DILocalVariable(name: "d", scope: !2520, file: !10, line: 156, type: !187)
!2528 = !DILocation(line: 156, column: 45, scope: !2520)
!2529 = !DILocalVariable(name: "top", scope: !2520, file: !10, line: 157, type: !4)
!2530 = !DILocation(line: 157, column: 9, scope: !2520)
!2531 = !DILocalVariable(name: "cond", scope: !2520, file: !10, line: 157, type: !4)
!2532 = !DILocation(line: 157, column: 14, scope: !2520)
!2533 = !DILocalVariable(name: "st", scope: !2520, file: !10, line: 157, type: !4)
!2534 = !DILocation(line: 157, column: 20, scope: !2520)
!2535 = !DILocation(line: 159, column: 61, scope: !2536)
!2536 = distinct !DILexicalBlock(scope: !2520, file: !10, line: 159, column: 9)
!2537 = !DILocation(line: 159, column: 59, scope: !2536)
!2538 = !DILocation(line: 159, column: 57, scope: !2536)
!2539 = !DILocation(line: 159, column: 10, scope: !2540)
!2540 = !DILexicalBlockFile(scope: !2536, file: !10, discriminator: 2)
!2541 = !DILocation(line: 159, column: 10, scope: !2536)
!2542 = !DILocation(line: 160, column: 13, scope: !2536)
!2543 = !DILocation(line: 160, column: 68, scope: !2544)
!2544 = !DILexicalBlockFile(scope: !2536, file: !10, discriminator: 1)
!2545 = !DILocation(line: 160, column: 66, scope: !2544)
!2546 = !DILocation(line: 160, column: 64, scope: !2544)
!2547 = !DILocation(line: 160, column: 17, scope: !2548)
!2548 = !DILexicalBlockFile(scope: !2544, file: !10, discriminator: 2)
!2549 = !DILocation(line: 160, column: 17, scope: !2544)
!2550 = !DILocation(line: 161, column: 13, scope: !2536)
!2551 = !DILocation(line: 161, column: 68, scope: !2544)
!2552 = !DILocation(line: 161, column: 66, scope: !2544)
!2553 = !DILocation(line: 161, column: 64, scope: !2544)
!2554 = !DILocation(line: 161, column: 17, scope: !2548)
!2555 = !DILocation(line: 161, column: 17, scope: !2544)
!2556 = !DILocation(line: 162, column: 13, scope: !2536)
!2557 = !DILocation(line: 162, column: 68, scope: !2544)
!2558 = !DILocation(line: 162, column: 66, scope: !2544)
!2559 = !DILocation(line: 162, column: 64, scope: !2544)
!2560 = !DILocation(line: 162, column: 17, scope: !2548)
!2561 = !DILocation(line: 162, column: 17, scope: !2544)
!2562 = !DILocation(line: 159, column: 9, scope: !2563)
!2563 = !DILexicalBlockFile(scope: !2520, file: !10, discriminator: 1)
!2564 = !DILocation(line: 163, column: 9, scope: !2536)
!2565 = !DILocation(line: 165, column: 20, scope: !2520)
!2566 = !DILocation(line: 165, column: 5, scope: !2520)
!2567 = !DILocation(line: 166, column: 20, scope: !2520)
!2568 = !DILocation(line: 166, column: 5, scope: !2520)
!2569 = !DILocation(line: 167, column: 13, scope: !2520)
!2570 = !DILocation(line: 167, column: 16, scope: !2520)
!2571 = !DILocation(line: 167, column: 5, scope: !2520)
!2572 = !DILocation(line: 168, column: 13, scope: !2520)
!2573 = !DILocation(line: 168, column: 16, scope: !2520)
!2574 = !DILocation(line: 168, column: 5, scope: !2520)
!2575 = !DILocation(line: 169, column: 23, scope: !2520)
!2576 = !DILocation(line: 169, column: 11, scope: !2520)
!2577 = !DILocation(line: 169, column: 25, scope: !2520)
!2578 = !DILocation(line: 169, column: 9, scope: !2520)
!2579 = !DILocation(line: 172, column: 13, scope: !2520)
!2580 = !DILocation(line: 172, column: 16, scope: !2520)
!2581 = !DILocation(line: 172, column: 5, scope: !2520)
!2582 = !DILocation(line: 173, column: 26, scope: !2583)
!2583 = distinct !DILexicalBlock(scope: !2520, file: !10, line: 173, column: 9)
!2584 = !DILocation(line: 173, column: 29, scope: !2583)
!2585 = !DILocation(line: 173, column: 10, scope: !2583)
!2586 = !DILocation(line: 174, column: 13, scope: !2583)
!2587 = !DILocation(line: 174, column: 33, scope: !2588)
!2588 = !DILexicalBlockFile(scope: !2583, file: !10, discriminator: 1)
!2589 = !DILocation(line: 174, column: 36, scope: !2588)
!2590 = !DILocation(line: 174, column: 17, scope: !2588)
!2591 = !DILocation(line: 173, column: 9, scope: !2563)
!2592 = !DILocation(line: 175, column: 9, scope: !2583)
!2593 = !DILocation(line: 178, column: 10, scope: !2520)
!2594 = !DILocation(line: 179, column: 23, scope: !2520)
!2595 = !DILocation(line: 179, column: 29, scope: !2520)
!2596 = !DILocation(line: 179, column: 32, scope: !2520)
!2597 = !DILocation(line: 179, column: 35, scope: !2520)
!2598 = !DILocation(line: 179, column: 5, scope: !2520)
!2599 = !DILocation(line: 180, column: 32, scope: !2600)
!2600 = distinct !DILexicalBlock(scope: !2520, file: !10, line: 180, column: 9)
!2601 = !DILocation(line: 180, column: 35, scope: !2600)
!2602 = !DILocation(line: 180, column: 10, scope: !2600)
!2603 = !DILocation(line: 181, column: 13, scope: !2600)
!2604 = !DILocation(line: 181, column: 39, scope: !2605)
!2605 = !DILexicalBlockFile(scope: !2600, file: !10, discriminator: 1)
!2606 = !DILocation(line: 181, column: 42, scope: !2605)
!2607 = !DILocation(line: 181, column: 17, scope: !2605)
!2608 = !DILocation(line: 180, column: 9, scope: !2563)
!2609 = !DILocation(line: 182, column: 9, scope: !2600)
!2610 = !DILocation(line: 185, column: 10, scope: !2520)
!2611 = !DILocation(line: 186, column: 23, scope: !2520)
!2612 = !DILocation(line: 186, column: 29, scope: !2520)
!2613 = !DILocation(line: 186, column: 32, scope: !2520)
!2614 = !DILocation(line: 186, column: 35, scope: !2520)
!2615 = !DILocation(line: 186, column: 5, scope: !2520)
!2616 = !DILocation(line: 187, column: 33, scope: !2617)
!2617 = distinct !DILexicalBlock(scope: !2520, file: !10, line: 187, column: 9)
!2618 = !DILocation(line: 187, column: 36, scope: !2617)
!2619 = !DILocation(line: 187, column: 10, scope: !2617)
!2620 = !DILocation(line: 188, column: 13, scope: !2617)
!2621 = !DILocation(line: 188, column: 40, scope: !2622)
!2622 = !DILexicalBlockFile(scope: !2617, file: !10, discriminator: 1)
!2623 = !DILocation(line: 188, column: 43, scope: !2622)
!2624 = !DILocation(line: 188, column: 17, scope: !2622)
!2625 = !DILocation(line: 187, column: 9, scope: !2563)
!2626 = !DILocation(line: 189, column: 9, scope: !2617)
!2627 = !DILocation(line: 192, column: 18, scope: !2520)
!2628 = !DILocation(line: 192, column: 5, scope: !2520)
!2629 = !DILocation(line: 194, column: 13, scope: !2520)
!2630 = !DILocation(line: 194, column: 16, scope: !2520)
!2631 = !DILocation(line: 194, column: 5, scope: !2520)
!2632 = !DILocation(line: 195, column: 33, scope: !2633)
!2633 = distinct !DILexicalBlock(scope: !2520, file: !10, line: 195, column: 9)
!2634 = !DILocation(line: 195, column: 36, scope: !2633)
!2635 = !DILocation(line: 195, column: 10, scope: !2633)
!2636 = !DILocation(line: 196, column: 13, scope: !2633)
!2637 = !DILocation(line: 196, column: 40, scope: !2638)
!2638 = !DILexicalBlockFile(scope: !2633, file: !10, discriminator: 1)
!2639 = !DILocation(line: 196, column: 43, scope: !2638)
!2640 = !DILocation(line: 196, column: 17, scope: !2638)
!2641 = !DILocation(line: 197, column: 13, scope: !2633)
!2642 = !DILocation(line: 197, column: 100, scope: !2638)
!2643 = !DILocation(line: 197, column: 87, scope: !2638)
!2644 = !DILocation(line: 197, column: 110, scope: !2638)
!2645 = !DILocation(line: 197, column: 17, scope: !2646)
!2646 = !DILexicalBlockFile(scope: !2638, file: !10, discriminator: 2)
!2647 = !DILocation(line: 197, column: 17, scope: !2638)
!2648 = !DILocation(line: 198, column: 13, scope: !2633)
!2649 = !DILocation(line: 198, column: 101, scope: !2638)
!2650 = !DILocation(line: 198, column: 88, scope: !2638)
!2651 = !DILocation(line: 198, column: 111, scope: !2638)
!2652 = !DILocation(line: 198, column: 17, scope: !2646)
!2653 = !DILocation(line: 198, column: 17, scope: !2638)
!2654 = !DILocation(line: 195, column: 9, scope: !2563)
!2655 = !DILocation(line: 199, column: 9, scope: !2633)
!2656 = !DILocation(line: 201, column: 10, scope: !2520)
!2657 = !DILocation(line: 202, column: 23, scope: !2520)
!2658 = !DILocation(line: 202, column: 29, scope: !2520)
!2659 = !DILocation(line: 202, column: 32, scope: !2520)
!2660 = !DILocation(line: 202, column: 35, scope: !2520)
!2661 = !DILocation(line: 202, column: 5, scope: !2520)
!2662 = !DILocation(line: 203, column: 39, scope: !2663)
!2663 = distinct !DILexicalBlock(scope: !2520, file: !10, line: 203, column: 9)
!2664 = !DILocation(line: 203, column: 42, scope: !2663)
!2665 = !DILocation(line: 203, column: 10, scope: !2663)
!2666 = !DILocation(line: 204, column: 13, scope: !2663)
!2667 = !DILocation(line: 204, column: 46, scope: !2668)
!2668 = !DILexicalBlockFile(scope: !2663, file: !10, discriminator: 1)
!2669 = !DILocation(line: 204, column: 49, scope: !2668)
!2670 = !DILocation(line: 204, column: 17, scope: !2668)
!2671 = !DILocation(line: 205, column: 13, scope: !2663)
!2672 = !DILocation(line: 205, column: 100, scope: !2668)
!2673 = !DILocation(line: 205, column: 87, scope: !2668)
!2674 = !DILocation(line: 205, column: 110, scope: !2668)
!2675 = !DILocation(line: 205, column: 17, scope: !2676)
!2676 = !DILexicalBlockFile(scope: !2668, file: !10, discriminator: 2)
!2677 = !DILocation(line: 205, column: 17, scope: !2668)
!2678 = !DILocation(line: 206, column: 13, scope: !2663)
!2679 = !DILocation(line: 206, column: 101, scope: !2668)
!2680 = !DILocation(line: 206, column: 88, scope: !2668)
!2681 = !DILocation(line: 206, column: 111, scope: !2668)
!2682 = !DILocation(line: 206, column: 17, scope: !2676)
!2683 = !DILocation(line: 206, column: 17, scope: !2668)
!2684 = !DILocation(line: 203, column: 9, scope: !2563)
!2685 = !DILocation(line: 207, column: 9, scope: !2663)
!2686 = !DILocation(line: 209, column: 10, scope: !2520)
!2687 = !DILocation(line: 210, column: 23, scope: !2520)
!2688 = !DILocation(line: 210, column: 29, scope: !2520)
!2689 = !DILocation(line: 210, column: 32, scope: !2520)
!2690 = !DILocation(line: 210, column: 35, scope: !2520)
!2691 = !DILocation(line: 210, column: 5, scope: !2520)
!2692 = !DILocation(line: 211, column: 40, scope: !2693)
!2693 = distinct !DILexicalBlock(scope: !2520, file: !10, line: 211, column: 9)
!2694 = !DILocation(line: 211, column: 43, scope: !2693)
!2695 = !DILocation(line: 211, column: 10, scope: !2693)
!2696 = !DILocation(line: 212, column: 13, scope: !2693)
!2697 = !DILocation(line: 212, column: 47, scope: !2698)
!2698 = !DILexicalBlockFile(scope: !2693, file: !10, discriminator: 1)
!2699 = !DILocation(line: 212, column: 50, scope: !2698)
!2700 = !DILocation(line: 212, column: 17, scope: !2698)
!2701 = !DILocation(line: 213, column: 13, scope: !2693)
!2702 = !DILocation(line: 213, column: 100, scope: !2698)
!2703 = !DILocation(line: 213, column: 87, scope: !2698)
!2704 = !DILocation(line: 213, column: 110, scope: !2698)
!2705 = !DILocation(line: 213, column: 17, scope: !2706)
!2706 = !DILexicalBlockFile(scope: !2698, file: !10, discriminator: 2)
!2707 = !DILocation(line: 213, column: 17, scope: !2698)
!2708 = !DILocation(line: 214, column: 13, scope: !2693)
!2709 = !DILocation(line: 214, column: 101, scope: !2698)
!2710 = !DILocation(line: 214, column: 88, scope: !2698)
!2711 = !DILocation(line: 214, column: 111, scope: !2698)
!2712 = !DILocation(line: 214, column: 17, scope: !2706)
!2713 = !DILocation(line: 214, column: 17, scope: !2698)
!2714 = !DILocation(line: 211, column: 9, scope: !2563)
!2715 = !DILocation(line: 215, column: 9, scope: !2693)
!2716 = !DILocation(line: 217, column: 8, scope: !2520)
!2717 = !DILocation(line: 217, column: 5, scope: !2520)
!2718 = !DILocation(line: 219, column: 13, scope: !2520)
!2719 = !DILocation(line: 219, column: 5, scope: !2520)
!2720 = !DILocation(line: 220, column: 13, scope: !2520)
!2721 = !DILocation(line: 220, column: 5, scope: !2520)
!2722 = !DILocation(line: 221, column: 13, scope: !2520)
!2723 = !DILocation(line: 221, column: 5, scope: !2520)
!2724 = !DILocation(line: 222, column: 13, scope: !2520)
!2725 = !DILocation(line: 222, column: 5, scope: !2520)
!2726 = !DILocation(line: 223, column: 12, scope: !2520)
!2727 = !DILocation(line: 223, column: 5, scope: !2520)
!2728 = distinct !DISubprogram(name: "test_gf2m_add", scope: !10, file: !10, line: 590, type: !39, isLocal: true, isDefinition: true, scopeLine: 591, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2729 = !DILocalVariable(name: "a", scope: !2728, file: !10, line: 592, type: !187)
!2730 = !DILocation(line: 592, column: 13, scope: !2728)
!2731 = !DILocalVariable(name: "b", scope: !2728, file: !10, line: 592, type: !187)
!2732 = !DILocation(line: 592, column: 23, scope: !2728)
!2733 = !DILocalVariable(name: "c", scope: !2728, file: !10, line: 592, type: !187)
!2734 = !DILocation(line: 592, column: 34, scope: !2728)
!2735 = !DILocalVariable(name: "i", scope: !2728, file: !10, line: 593, type: !4)
!2736 = !DILocation(line: 593, column: 9, scope: !2728)
!2737 = !DILocalVariable(name: "st", scope: !2728, file: !10, line: 593, type: !4)
!2738 = !DILocation(line: 593, column: 12, scope: !2728)
!2739 = !DILocation(line: 595, column: 61, scope: !2740)
!2740 = distinct !DILexicalBlock(scope: !2728, file: !10, line: 595, column: 9)
!2741 = !DILocation(line: 595, column: 59, scope: !2740)
!2742 = !DILocation(line: 595, column: 57, scope: !2740)
!2743 = !DILocation(line: 595, column: 10, scope: !2744)
!2744 = !DILexicalBlockFile(scope: !2740, file: !10, discriminator: 2)
!2745 = !DILocation(line: 595, column: 10, scope: !2740)
!2746 = !DILocation(line: 596, column: 13, scope: !2740)
!2747 = !DILocation(line: 596, column: 68, scope: !2748)
!2748 = !DILexicalBlockFile(scope: !2740, file: !10, discriminator: 1)
!2749 = !DILocation(line: 596, column: 66, scope: !2748)
!2750 = !DILocation(line: 596, column: 64, scope: !2748)
!2751 = !DILocation(line: 596, column: 17, scope: !2752)
!2752 = !DILexicalBlockFile(scope: !2748, file: !10, discriminator: 2)
!2753 = !DILocation(line: 596, column: 17, scope: !2748)
!2754 = !DILocation(line: 597, column: 13, scope: !2740)
!2755 = !DILocation(line: 597, column: 68, scope: !2748)
!2756 = !DILocation(line: 597, column: 66, scope: !2748)
!2757 = !DILocation(line: 597, column: 64, scope: !2748)
!2758 = !DILocation(line: 597, column: 17, scope: !2752)
!2759 = !DILocation(line: 597, column: 17, scope: !2748)
!2760 = !DILocation(line: 595, column: 9, scope: !2761)
!2761 = !DILexicalBlockFile(scope: !2728, file: !10, discriminator: 1)
!2762 = !DILocation(line: 598, column: 9, scope: !2740)
!2763 = !DILocation(line: 600, column: 12, scope: !2764)
!2764 = distinct !DILexicalBlock(scope: !2728, file: !10, line: 600, column: 5)
!2765 = !DILocation(line: 600, column: 10, scope: !2764)
!2766 = !DILocation(line: 600, column: 17, scope: !2767)
!2767 = !DILexicalBlockFile(scope: !2768, file: !10, discriminator: 1)
!2768 = distinct !DILexicalBlock(scope: !2764, file: !10, line: 600, column: 5)
!2769 = !DILocation(line: 600, column: 19, scope: !2767)
!2770 = !DILocation(line: 600, column: 5, scope: !2767)
!2771 = !DILocation(line: 601, column: 17, scope: !2772)
!2772 = distinct !DILexicalBlock(scope: !2768, file: !10, line: 600, column: 32)
!2773 = !DILocation(line: 601, column: 9, scope: !2772)
!2774 = !DILocation(line: 602, column: 17, scope: !2772)
!2775 = !DILocation(line: 602, column: 20, scope: !2772)
!2776 = !DILocation(line: 602, column: 9, scope: !2777)
!2777 = !DILexicalBlockFile(scope: !2772, file: !10, discriminator: 1)
!2778 = !DILocation(line: 603, column: 25, scope: !2772)
!2779 = !DILocation(line: 603, column: 28, scope: !2772)
!2780 = !DILocation(line: 603, column: 9, scope: !2777)
!2781 = !DILocation(line: 604, column: 25, scope: !2772)
!2782 = !DILocation(line: 604, column: 28, scope: !2772)
!2783 = !DILocation(line: 604, column: 9, scope: !2777)
!2784 = !DILocation(line: 605, column: 21, scope: !2772)
!2785 = !DILocation(line: 605, column: 24, scope: !2772)
!2786 = !DILocation(line: 605, column: 27, scope: !2772)
!2787 = !DILocation(line: 605, column: 9, scope: !2772)
!2788 = !DILocation(line: 607, column: 98, scope: !2789)
!2789 = distinct !DILexicalBlock(scope: !2772, file: !10, line: 607, column: 13)
!2790 = !DILocation(line: 607, column: 88, scope: !2789)
!2791 = !DILocation(line: 607, column: 101, scope: !2789)
!2792 = !DILocation(line: 607, column: 114, scope: !2793)
!2793 = !DILexicalBlockFile(scope: !2789, file: !10, discriminator: 1)
!2794 = !DILocation(line: 607, column: 104, scope: !2793)
!2795 = !DILocation(line: 607, column: 118, scope: !2793)
!2796 = !DILocation(line: 607, column: 133, scope: !2797)
!2797 = !DILexicalBlockFile(scope: !2789, file: !10, discriminator: 2)
!2798 = !DILocation(line: 607, column: 123, scope: !2797)
!2799 = !DILocation(line: 607, column: 136, scope: !2797)
!2800 = !DILocation(line: 607, column: 150, scope: !2801)
!2801 = !DILexicalBlockFile(scope: !2789, file: !10, discriminator: 3)
!2802 = !DILocation(line: 607, column: 140, scope: !2801)
!2803 = !DILocation(line: 607, column: 139, scope: !2801)
!2804 = !DILocation(line: 607, column: 118, scope: !2805)
!2805 = !DILexicalBlockFile(scope: !2789, file: !10, discriminator: 4)
!2806 = !DILocation(line: 607, column: 118, scope: !2807)
!2807 = !DILexicalBlockFile(scope: !2789, file: !10, discriminator: 5)
!2808 = !DILocation(line: 607, column: 155, scope: !2807)
!2809 = !DILocation(line: 607, column: 14, scope: !2807)
!2810 = !DILocation(line: 607, column: 13, scope: !2807)
!2811 = !DILocation(line: 609, column: 13, scope: !2789)
!2812 = !DILocation(line: 610, column: 21, scope: !2772)
!2813 = !DILocation(line: 610, column: 24, scope: !2772)
!2814 = !DILocation(line: 610, column: 27, scope: !2772)
!2815 = !DILocation(line: 610, column: 9, scope: !2772)
!2816 = !DILocation(line: 612, column: 57, scope: !2817)
!2817 = distinct !DILexicalBlock(scope: !2772, file: !10, line: 612, column: 13)
!2818 = !DILocation(line: 612, column: 14, scope: !2817)
!2819 = !DILocation(line: 612, column: 13, scope: !2772)
!2820 = !DILocation(line: 613, column: 13, scope: !2817)
!2821 = !DILocation(line: 614, column: 5, scope: !2772)
!2822 = !DILocation(line: 600, column: 28, scope: !2823)
!2823 = !DILexicalBlockFile(scope: !2768, file: !10, discriminator: 2)
!2824 = !DILocation(line: 600, column: 5, scope: !2823)
!2825 = distinct !{!2825, !2826}
!2826 = !DILocation(line: 600, column: 5, scope: !2728)
!2827 = !DILocation(line: 615, column: 8, scope: !2728)
!2828 = !DILocation(line: 615, column: 5, scope: !2728)
!2829 = !DILocation(line: 617, column: 13, scope: !2728)
!2830 = !DILocation(line: 617, column: 5, scope: !2728)
!2831 = !DILocation(line: 618, column: 13, scope: !2728)
!2832 = !DILocation(line: 618, column: 5, scope: !2728)
!2833 = !DILocation(line: 619, column: 13, scope: !2728)
!2834 = !DILocation(line: 619, column: 5, scope: !2728)
!2835 = !DILocation(line: 620, column: 12, scope: !2728)
!2836 = !DILocation(line: 620, column: 5, scope: !2728)
!2837 = distinct !DISubprogram(name: "test_gf2m_mod", scope: !10, file: !10, line: 623, type: !39, isLocal: true, isDefinition: true, scopeLine: 624, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2838 = !DILocalVariable(name: "a", scope: !2837, file: !10, line: 625, type: !187)
!2839 = !DILocation(line: 625, column: 13, scope: !2837)
!2840 = !DILocalVariable(name: "b", scope: !2837, file: !10, line: 625, type: !2841)
!2841 = !DICompositeType(tag: DW_TAG_array_type, baseType: !187, size: 128, align: 64, elements: !2842)
!2842 = !{!2843}
!2843 = !DISubrange(count: 2)
!2844 = !DILocation(line: 625, column: 23, scope: !2837)
!2845 = !DILocalVariable(name: "c", scope: !2837, file: !10, line: 625, type: !187)
!2846 = !DILocation(line: 625, column: 44, scope: !2837)
!2847 = !DILocalVariable(name: "d", scope: !2837, file: !10, line: 625, type: !187)
!2848 = !DILocation(line: 625, column: 55, scope: !2837)
!2849 = !DILocalVariable(name: "e", scope: !2837, file: !10, line: 625, type: !187)
!2850 = !DILocation(line: 625, column: 66, scope: !2837)
!2851 = !DILocalVariable(name: "i", scope: !2837, file: !10, line: 626, type: !4)
!2852 = !DILocation(line: 626, column: 9, scope: !2837)
!2853 = !DILocalVariable(name: "j", scope: !2837, file: !10, line: 626, type: !4)
!2854 = !DILocation(line: 626, column: 12, scope: !2837)
!2855 = !DILocalVariable(name: "st", scope: !2837, file: !10, line: 626, type: !4)
!2856 = !DILocation(line: 626, column: 15, scope: !2837)
!2857 = !DILocation(line: 628, column: 61, scope: !2858)
!2858 = distinct !DILexicalBlock(scope: !2837, file: !10, line: 628, column: 9)
!2859 = !DILocation(line: 628, column: 59, scope: !2858)
!2860 = !DILocation(line: 628, column: 57, scope: !2858)
!2861 = !DILocation(line: 628, column: 10, scope: !2862)
!2862 = !DILexicalBlockFile(scope: !2858, file: !10, discriminator: 2)
!2863 = !DILocation(line: 628, column: 10, scope: !2858)
!2864 = !DILocation(line: 629, column: 13, scope: !2858)
!2865 = !DILocation(line: 629, column: 74, scope: !2866)
!2866 = !DILexicalBlockFile(scope: !2858, file: !10, discriminator: 1)
!2867 = !DILocation(line: 629, column: 67, scope: !2866)
!2868 = !DILocation(line: 629, column: 72, scope: !2866)
!2869 = !DILocation(line: 629, column: 17, scope: !2870)
!2870 = !DILexicalBlockFile(scope: !2866, file: !10, discriminator: 2)
!2871 = !DILocation(line: 629, column: 17, scope: !2866)
!2872 = !DILocation(line: 630, column: 13, scope: !2858)
!2873 = !DILocation(line: 630, column: 74, scope: !2866)
!2874 = !DILocation(line: 630, column: 67, scope: !2866)
!2875 = !DILocation(line: 630, column: 72, scope: !2866)
!2876 = !DILocation(line: 630, column: 17, scope: !2870)
!2877 = !DILocation(line: 630, column: 17, scope: !2866)
!2878 = !DILocation(line: 631, column: 13, scope: !2858)
!2879 = !DILocation(line: 631, column: 68, scope: !2866)
!2880 = !DILocation(line: 631, column: 66, scope: !2866)
!2881 = !DILocation(line: 631, column: 64, scope: !2866)
!2882 = !DILocation(line: 631, column: 17, scope: !2870)
!2883 = !DILocation(line: 631, column: 17, scope: !2866)
!2884 = !DILocation(line: 632, column: 13, scope: !2858)
!2885 = !DILocation(line: 632, column: 68, scope: !2866)
!2886 = !DILocation(line: 632, column: 66, scope: !2866)
!2887 = !DILocation(line: 632, column: 64, scope: !2866)
!2888 = !DILocation(line: 632, column: 17, scope: !2870)
!2889 = !DILocation(line: 632, column: 17, scope: !2866)
!2890 = !DILocation(line: 633, column: 13, scope: !2858)
!2891 = !DILocation(line: 633, column: 68, scope: !2866)
!2892 = !DILocation(line: 633, column: 66, scope: !2866)
!2893 = !DILocation(line: 633, column: 64, scope: !2866)
!2894 = !DILocation(line: 633, column: 17, scope: !2870)
!2895 = !DILocation(line: 633, column: 17, scope: !2866)
!2896 = !DILocation(line: 628, column: 9, scope: !2897)
!2897 = !DILexicalBlockFile(scope: !2837, file: !10, discriminator: 1)
!2898 = !DILocation(line: 634, column: 9, scope: !2858)
!2899 = !DILocation(line: 636, column: 26, scope: !2837)
!2900 = !DILocation(line: 636, column: 5, scope: !2837)
!2901 = !DILocation(line: 637, column: 26, scope: !2837)
!2902 = !DILocation(line: 637, column: 5, scope: !2837)
!2903 = !DILocation(line: 639, column: 12, scope: !2904)
!2904 = distinct !DILexicalBlock(scope: !2837, file: !10, line: 639, column: 5)
!2905 = !DILocation(line: 639, column: 10, scope: !2904)
!2906 = !DILocation(line: 639, column: 17, scope: !2907)
!2907 = !DILexicalBlockFile(scope: !2908, file: !10, discriminator: 1)
!2908 = distinct !DILexicalBlock(scope: !2904, file: !10, line: 639, column: 5)
!2909 = !DILocation(line: 639, column: 19, scope: !2907)
!2910 = !DILocation(line: 639, column: 5, scope: !2907)
!2911 = !DILocation(line: 640, column: 24, scope: !2912)
!2912 = distinct !DILexicalBlock(scope: !2908, file: !10, line: 639, column: 32)
!2913 = !DILocation(line: 640, column: 9, scope: !2912)
!2914 = !DILocation(line: 641, column: 16, scope: !2915)
!2915 = distinct !DILexicalBlock(scope: !2912, file: !10, line: 641, column: 9)
!2916 = !DILocation(line: 641, column: 14, scope: !2915)
!2917 = !DILocation(line: 641, column: 21, scope: !2918)
!2918 = !DILexicalBlockFile(scope: !2919, file: !10, discriminator: 1)
!2919 = distinct !DILexicalBlock(scope: !2915, file: !10, line: 641, column: 9)
!2920 = !DILocation(line: 641, column: 23, scope: !2918)
!2921 = !DILocation(line: 641, column: 9, scope: !2918)
!2922 = !DILocation(line: 642, column: 25, scope: !2923)
!2923 = distinct !DILexicalBlock(scope: !2919, file: !10, line: 641, column: 33)
!2924 = !DILocation(line: 642, column: 28, scope: !2923)
!2925 = !DILocation(line: 642, column: 33, scope: !2923)
!2926 = !DILocation(line: 642, column: 31, scope: !2923)
!2927 = !DILocation(line: 642, column: 13, scope: !2923)
!2928 = !DILocation(line: 643, column: 25, scope: !2923)
!2929 = !DILocation(line: 643, column: 28, scope: !2923)
!2930 = !DILocation(line: 643, column: 31, scope: !2923)
!2931 = !DILocation(line: 643, column: 13, scope: !2923)
!2932 = !DILocation(line: 644, column: 25, scope: !2923)
!2933 = !DILocation(line: 644, column: 28, scope: !2923)
!2934 = !DILocation(line: 644, column: 33, scope: !2923)
!2935 = !DILocation(line: 644, column: 31, scope: !2923)
!2936 = !DILocation(line: 644, column: 13, scope: !2923)
!2937 = !DILocation(line: 646, column: 61, scope: !2938)
!2938 = distinct !DILexicalBlock(scope: !2923, file: !10, line: 646, column: 17)
!2939 = !DILocation(line: 646, column: 18, scope: !2938)
!2940 = !DILocation(line: 646, column: 17, scope: !2923)
!2941 = !DILocation(line: 647, column: 17, scope: !2938)
!2942 = !DILocation(line: 648, column: 9, scope: !2923)
!2943 = !DILocation(line: 641, column: 29, scope: !2944)
!2944 = !DILexicalBlockFile(scope: !2919, file: !10, discriminator: 2)
!2945 = !DILocation(line: 641, column: 9, scope: !2944)
!2946 = distinct !{!2946, !2947}
!2947 = !DILocation(line: 641, column: 9, scope: !2912)
!2948 = !DILocation(line: 649, column: 5, scope: !2912)
!2949 = !DILocation(line: 639, column: 28, scope: !2950)
!2950 = !DILexicalBlockFile(scope: !2908, file: !10, discriminator: 2)
!2951 = !DILocation(line: 639, column: 5, scope: !2950)
!2952 = distinct !{!2952, !2953}
!2953 = !DILocation(line: 639, column: 5, scope: !2837)
!2954 = !DILocation(line: 650, column: 8, scope: !2837)
!2955 = !DILocation(line: 650, column: 5, scope: !2837)
!2956 = !DILocation(line: 652, column: 13, scope: !2837)
!2957 = !DILocation(line: 652, column: 5, scope: !2837)
!2958 = !DILocation(line: 653, column: 13, scope: !2837)
!2959 = !DILocation(line: 653, column: 5, scope: !2837)
!2960 = !DILocation(line: 654, column: 13, scope: !2837)
!2961 = !DILocation(line: 654, column: 5, scope: !2837)
!2962 = !DILocation(line: 655, column: 13, scope: !2837)
!2963 = !DILocation(line: 655, column: 5, scope: !2837)
!2964 = !DILocation(line: 656, column: 13, scope: !2837)
!2965 = !DILocation(line: 656, column: 5, scope: !2837)
!2966 = !DILocation(line: 657, column: 13, scope: !2837)
!2967 = !DILocation(line: 657, column: 5, scope: !2837)
!2968 = !DILocation(line: 658, column: 12, scope: !2837)
!2969 = !DILocation(line: 658, column: 5, scope: !2837)
!2970 = distinct !DISubprogram(name: "test_gf2m_mul", scope: !10, file: !10, line: 661, type: !39, isLocal: true, isDefinition: true, scopeLine: 662, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!2971 = !DILocalVariable(name: "a", scope: !2970, file: !10, line: 663, type: !187)
!2972 = !DILocation(line: 663, column: 13, scope: !2970)
!2973 = !DILocalVariable(name: "b", scope: !2970, file: !10, line: 663, type: !2841)
!2974 = !DILocation(line: 663, column: 17, scope: !2970)
!2975 = !DILocalVariable(name: "c", scope: !2970, file: !10, line: 663, type: !187)
!2976 = !DILocation(line: 663, column: 38, scope: !2970)
!2977 = !DILocalVariable(name: "d", scope: !2970, file: !10, line: 663, type: !187)
!2978 = !DILocation(line: 663, column: 49, scope: !2970)
!2979 = !DILocalVariable(name: "e", scope: !2970, file: !10, line: 664, type: !187)
!2980 = !DILocation(line: 664, column: 13, scope: !2970)
!2981 = !DILocalVariable(name: "f", scope: !2970, file: !10, line: 664, type: !187)
!2982 = !DILocation(line: 664, column: 23, scope: !2970)
!2983 = !DILocalVariable(name: "g", scope: !2970, file: !10, line: 664, type: !187)
!2984 = !DILocation(line: 664, column: 34, scope: !2970)
!2985 = !DILocalVariable(name: "h", scope: !2970, file: !10, line: 664, type: !187)
!2986 = !DILocation(line: 664, column: 45, scope: !2970)
!2987 = !DILocalVariable(name: "i", scope: !2970, file: !10, line: 665, type: !4)
!2988 = !DILocation(line: 665, column: 9, scope: !2970)
!2989 = !DILocalVariable(name: "j", scope: !2970, file: !10, line: 665, type: !4)
!2990 = !DILocation(line: 665, column: 12, scope: !2970)
!2991 = !DILocalVariable(name: "st", scope: !2970, file: !10, line: 665, type: !4)
!2992 = !DILocation(line: 665, column: 15, scope: !2970)
!2993 = !DILocation(line: 667, column: 61, scope: !2994)
!2994 = distinct !DILexicalBlock(scope: !2970, file: !10, line: 667, column: 9)
!2995 = !DILocation(line: 667, column: 59, scope: !2994)
!2996 = !DILocation(line: 667, column: 57, scope: !2994)
!2997 = !DILocation(line: 667, column: 10, scope: !2998)
!2998 = !DILexicalBlockFile(scope: !2994, file: !10, discriminator: 2)
!2999 = !DILocation(line: 667, column: 10, scope: !2994)
!3000 = !DILocation(line: 668, column: 13, scope: !2994)
!3001 = !DILocation(line: 668, column: 74, scope: !3002)
!3002 = !DILexicalBlockFile(scope: !2994, file: !10, discriminator: 1)
!3003 = !DILocation(line: 668, column: 67, scope: !3002)
!3004 = !DILocation(line: 668, column: 72, scope: !3002)
!3005 = !DILocation(line: 668, column: 17, scope: !3006)
!3006 = !DILexicalBlockFile(scope: !3002, file: !10, discriminator: 2)
!3007 = !DILocation(line: 668, column: 17, scope: !3002)
!3008 = !DILocation(line: 669, column: 13, scope: !2994)
!3009 = !DILocation(line: 669, column: 74, scope: !3002)
!3010 = !DILocation(line: 669, column: 67, scope: !3002)
!3011 = !DILocation(line: 669, column: 72, scope: !3002)
!3012 = !DILocation(line: 669, column: 17, scope: !3006)
!3013 = !DILocation(line: 669, column: 17, scope: !3002)
!3014 = !DILocation(line: 670, column: 13, scope: !2994)
!3015 = !DILocation(line: 670, column: 68, scope: !3002)
!3016 = !DILocation(line: 670, column: 66, scope: !3002)
!3017 = !DILocation(line: 670, column: 64, scope: !3002)
!3018 = !DILocation(line: 670, column: 17, scope: !3006)
!3019 = !DILocation(line: 670, column: 17, scope: !3002)
!3020 = !DILocation(line: 671, column: 13, scope: !2994)
!3021 = !DILocation(line: 671, column: 68, scope: !3002)
!3022 = !DILocation(line: 671, column: 66, scope: !3002)
!3023 = !DILocation(line: 671, column: 64, scope: !3002)
!3024 = !DILocation(line: 671, column: 17, scope: !3006)
!3025 = !DILocation(line: 671, column: 17, scope: !3002)
!3026 = !DILocation(line: 672, column: 13, scope: !2994)
!3027 = !DILocation(line: 672, column: 68, scope: !3002)
!3028 = !DILocation(line: 672, column: 66, scope: !3002)
!3029 = !DILocation(line: 672, column: 64, scope: !3002)
!3030 = !DILocation(line: 672, column: 17, scope: !3006)
!3031 = !DILocation(line: 672, column: 17, scope: !3002)
!3032 = !DILocation(line: 673, column: 13, scope: !2994)
!3033 = !DILocation(line: 673, column: 68, scope: !3002)
!3034 = !DILocation(line: 673, column: 66, scope: !3002)
!3035 = !DILocation(line: 673, column: 64, scope: !3002)
!3036 = !DILocation(line: 673, column: 17, scope: !3006)
!3037 = !DILocation(line: 673, column: 17, scope: !3002)
!3038 = !DILocation(line: 674, column: 13, scope: !2994)
!3039 = !DILocation(line: 674, column: 68, scope: !3002)
!3040 = !DILocation(line: 674, column: 66, scope: !3002)
!3041 = !DILocation(line: 674, column: 64, scope: !3002)
!3042 = !DILocation(line: 674, column: 17, scope: !3006)
!3043 = !DILocation(line: 674, column: 17, scope: !3002)
!3044 = !DILocation(line: 675, column: 13, scope: !2994)
!3045 = !DILocation(line: 675, column: 68, scope: !3002)
!3046 = !DILocation(line: 675, column: 66, scope: !3002)
!3047 = !DILocation(line: 675, column: 64, scope: !3002)
!3048 = !DILocation(line: 675, column: 17, scope: !3006)
!3049 = !DILocation(line: 675, column: 17, scope: !3002)
!3050 = !DILocation(line: 667, column: 9, scope: !3051)
!3051 = !DILexicalBlockFile(scope: !2970, file: !10, discriminator: 1)
!3052 = !DILocation(line: 676, column: 9, scope: !2994)
!3053 = !DILocation(line: 678, column: 26, scope: !2970)
!3054 = !DILocation(line: 678, column: 5, scope: !2970)
!3055 = !DILocation(line: 679, column: 26, scope: !2970)
!3056 = !DILocation(line: 679, column: 5, scope: !2970)
!3057 = !DILocation(line: 681, column: 12, scope: !3058)
!3058 = distinct !DILexicalBlock(scope: !2970, file: !10, line: 681, column: 5)
!3059 = !DILocation(line: 681, column: 10, scope: !3058)
!3060 = !DILocation(line: 681, column: 17, scope: !3061)
!3061 = !DILexicalBlockFile(scope: !3062, file: !10, discriminator: 1)
!3062 = distinct !DILexicalBlock(scope: !3058, file: !10, line: 681, column: 5)
!3063 = !DILocation(line: 681, column: 19, scope: !3061)
!3064 = !DILocation(line: 681, column: 5, scope: !3061)
!3065 = !DILocation(line: 682, column: 24, scope: !3066)
!3066 = distinct !DILexicalBlock(scope: !3062, file: !10, line: 681, column: 32)
!3067 = !DILocation(line: 682, column: 9, scope: !3066)
!3068 = !DILocation(line: 683, column: 24, scope: !3066)
!3069 = !DILocation(line: 683, column: 9, scope: !3066)
!3070 = !DILocation(line: 684, column: 24, scope: !3066)
!3071 = !DILocation(line: 684, column: 9, scope: !3066)
!3072 = !DILocation(line: 685, column: 16, scope: !3073)
!3073 = distinct !DILexicalBlock(scope: !3066, file: !10, line: 685, column: 9)
!3074 = !DILocation(line: 685, column: 14, scope: !3073)
!3075 = !DILocation(line: 685, column: 21, scope: !3076)
!3076 = !DILexicalBlockFile(scope: !3077, file: !10, discriminator: 1)
!3077 = distinct !DILexicalBlock(scope: !3073, file: !10, line: 685, column: 9)
!3078 = !DILocation(line: 685, column: 23, scope: !3076)
!3079 = !DILocation(line: 685, column: 9, scope: !3076)
!3080 = !DILocation(line: 686, column: 29, scope: !3081)
!3081 = distinct !DILexicalBlock(scope: !3077, file: !10, line: 685, column: 33)
!3082 = !DILocation(line: 686, column: 32, scope: !3081)
!3083 = !DILocation(line: 686, column: 35, scope: !3081)
!3084 = !DILocation(line: 686, column: 40, scope: !3081)
!3085 = !DILocation(line: 686, column: 38, scope: !3081)
!3086 = !DILocation(line: 686, column: 44, scope: !3081)
!3087 = !DILocation(line: 686, column: 13, scope: !3081)
!3088 = !DILocation(line: 687, column: 25, scope: !3081)
!3089 = !DILocation(line: 687, column: 28, scope: !3081)
!3090 = !DILocation(line: 687, column: 31, scope: !3081)
!3091 = !DILocation(line: 687, column: 13, scope: !3081)
!3092 = !DILocation(line: 688, column: 29, scope: !3081)
!3093 = !DILocation(line: 688, column: 32, scope: !3081)
!3094 = !DILocation(line: 688, column: 35, scope: !3081)
!3095 = !DILocation(line: 688, column: 40, scope: !3081)
!3096 = !DILocation(line: 688, column: 38, scope: !3081)
!3097 = !DILocation(line: 688, column: 44, scope: !3081)
!3098 = !DILocation(line: 688, column: 13, scope: !3081)
!3099 = !DILocation(line: 689, column: 29, scope: !3081)
!3100 = !DILocation(line: 689, column: 32, scope: !3081)
!3101 = !DILocation(line: 689, column: 35, scope: !3081)
!3102 = !DILocation(line: 689, column: 40, scope: !3081)
!3103 = !DILocation(line: 689, column: 38, scope: !3081)
!3104 = !DILocation(line: 689, column: 44, scope: !3081)
!3105 = !DILocation(line: 689, column: 13, scope: !3081)
!3106 = !DILocation(line: 690, column: 25, scope: !3081)
!3107 = !DILocation(line: 690, column: 28, scope: !3081)
!3108 = !DILocation(line: 690, column: 31, scope: !3081)
!3109 = !DILocation(line: 690, column: 13, scope: !3081)
!3110 = !DILocation(line: 691, column: 25, scope: !3081)
!3111 = !DILocation(line: 691, column: 28, scope: !3081)
!3112 = !DILocation(line: 691, column: 31, scope: !3081)
!3113 = !DILocation(line: 691, column: 13, scope: !3081)
!3114 = !DILocation(line: 693, column: 61, scope: !3115)
!3115 = distinct !DILexicalBlock(scope: !3081, file: !10, line: 693, column: 17)
!3116 = !DILocation(line: 693, column: 18, scope: !3115)
!3117 = !DILocation(line: 693, column: 17, scope: !3081)
!3118 = !DILocation(line: 694, column: 17, scope: !3115)
!3119 = !DILocation(line: 695, column: 9, scope: !3081)
!3120 = !DILocation(line: 685, column: 29, scope: !3121)
!3121 = !DILexicalBlockFile(scope: !3077, file: !10, discriminator: 2)
!3122 = !DILocation(line: 685, column: 9, scope: !3121)
!3123 = distinct !{!3123, !3124}
!3124 = !DILocation(line: 685, column: 9, scope: !3066)
!3125 = !DILocation(line: 696, column: 5, scope: !3066)
!3126 = !DILocation(line: 681, column: 28, scope: !3127)
!3127 = !DILexicalBlockFile(scope: !3062, file: !10, discriminator: 2)
!3128 = !DILocation(line: 681, column: 5, scope: !3127)
!3129 = distinct !{!3129, !3130}
!3130 = !DILocation(line: 681, column: 5, scope: !2970)
!3131 = !DILocation(line: 697, column: 8, scope: !2970)
!3132 = !DILocation(line: 697, column: 5, scope: !2970)
!3133 = !DILocation(line: 700, column: 13, scope: !2970)
!3134 = !DILocation(line: 700, column: 5, scope: !2970)
!3135 = !DILocation(line: 701, column: 13, scope: !2970)
!3136 = !DILocation(line: 701, column: 5, scope: !2970)
!3137 = !DILocation(line: 702, column: 13, scope: !2970)
!3138 = !DILocation(line: 702, column: 5, scope: !2970)
!3139 = !DILocation(line: 703, column: 13, scope: !2970)
!3140 = !DILocation(line: 703, column: 5, scope: !2970)
!3141 = !DILocation(line: 704, column: 13, scope: !2970)
!3142 = !DILocation(line: 704, column: 5, scope: !2970)
!3143 = !DILocation(line: 705, column: 13, scope: !2970)
!3144 = !DILocation(line: 705, column: 5, scope: !2970)
!3145 = !DILocation(line: 706, column: 13, scope: !2970)
!3146 = !DILocation(line: 706, column: 5, scope: !2970)
!3147 = !DILocation(line: 707, column: 13, scope: !2970)
!3148 = !DILocation(line: 707, column: 5, scope: !2970)
!3149 = !DILocation(line: 708, column: 13, scope: !2970)
!3150 = !DILocation(line: 708, column: 5, scope: !2970)
!3151 = !DILocation(line: 709, column: 12, scope: !2970)
!3152 = !DILocation(line: 709, column: 5, scope: !2970)
!3153 = distinct !DISubprogram(name: "test_gf2m_sqr", scope: !10, file: !10, line: 712, type: !39, isLocal: true, isDefinition: true, scopeLine: 713, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3154 = !DILocalVariable(name: "a", scope: !3153, file: !10, line: 714, type: !187)
!3155 = !DILocation(line: 714, column: 13, scope: !3153)
!3156 = !DILocalVariable(name: "b", scope: !3153, file: !10, line: 714, type: !2841)
!3157 = !DILocation(line: 714, column: 23, scope: !3153)
!3158 = !DILocalVariable(name: "c", scope: !3153, file: !10, line: 714, type: !187)
!3159 = !DILocation(line: 714, column: 44, scope: !3153)
!3160 = !DILocalVariable(name: "d", scope: !3153, file: !10, line: 714, type: !187)
!3161 = !DILocation(line: 714, column: 55, scope: !3153)
!3162 = !DILocalVariable(name: "i", scope: !3153, file: !10, line: 715, type: !4)
!3163 = !DILocation(line: 715, column: 9, scope: !3153)
!3164 = !DILocalVariable(name: "j", scope: !3153, file: !10, line: 715, type: !4)
!3165 = !DILocation(line: 715, column: 12, scope: !3153)
!3166 = !DILocalVariable(name: "st", scope: !3153, file: !10, line: 715, type: !4)
!3167 = !DILocation(line: 715, column: 15, scope: !3153)
!3168 = !DILocation(line: 717, column: 61, scope: !3169)
!3169 = distinct !DILexicalBlock(scope: !3153, file: !10, line: 717, column: 9)
!3170 = !DILocation(line: 717, column: 59, scope: !3169)
!3171 = !DILocation(line: 717, column: 57, scope: !3169)
!3172 = !DILocation(line: 717, column: 10, scope: !3173)
!3173 = !DILexicalBlockFile(scope: !3169, file: !10, discriminator: 2)
!3174 = !DILocation(line: 717, column: 10, scope: !3169)
!3175 = !DILocation(line: 718, column: 13, scope: !3169)
!3176 = !DILocation(line: 718, column: 74, scope: !3177)
!3177 = !DILexicalBlockFile(scope: !3169, file: !10, discriminator: 1)
!3178 = !DILocation(line: 718, column: 67, scope: !3177)
!3179 = !DILocation(line: 718, column: 72, scope: !3177)
!3180 = !DILocation(line: 718, column: 17, scope: !3181)
!3181 = !DILexicalBlockFile(scope: !3177, file: !10, discriminator: 2)
!3182 = !DILocation(line: 718, column: 17, scope: !3177)
!3183 = !DILocation(line: 719, column: 13, scope: !3169)
!3184 = !DILocation(line: 719, column: 74, scope: !3177)
!3185 = !DILocation(line: 719, column: 67, scope: !3177)
!3186 = !DILocation(line: 719, column: 72, scope: !3177)
!3187 = !DILocation(line: 719, column: 17, scope: !3181)
!3188 = !DILocation(line: 719, column: 17, scope: !3177)
!3189 = !DILocation(line: 720, column: 13, scope: !3169)
!3190 = !DILocation(line: 720, column: 68, scope: !3177)
!3191 = !DILocation(line: 720, column: 66, scope: !3177)
!3192 = !DILocation(line: 720, column: 64, scope: !3177)
!3193 = !DILocation(line: 720, column: 17, scope: !3181)
!3194 = !DILocation(line: 720, column: 17, scope: !3177)
!3195 = !DILocation(line: 721, column: 13, scope: !3169)
!3196 = !DILocation(line: 721, column: 68, scope: !3177)
!3197 = !DILocation(line: 721, column: 66, scope: !3177)
!3198 = !DILocation(line: 721, column: 64, scope: !3177)
!3199 = !DILocation(line: 721, column: 17, scope: !3181)
!3200 = !DILocation(line: 721, column: 17, scope: !3177)
!3201 = !DILocation(line: 717, column: 9, scope: !3202)
!3202 = !DILexicalBlockFile(scope: !3153, file: !10, discriminator: 1)
!3203 = !DILocation(line: 722, column: 9, scope: !3169)
!3204 = !DILocation(line: 724, column: 26, scope: !3153)
!3205 = !DILocation(line: 724, column: 5, scope: !3153)
!3206 = !DILocation(line: 725, column: 26, scope: !3153)
!3207 = !DILocation(line: 725, column: 5, scope: !3153)
!3208 = !DILocation(line: 727, column: 12, scope: !3209)
!3209 = distinct !DILexicalBlock(scope: !3153, file: !10, line: 727, column: 5)
!3210 = !DILocation(line: 727, column: 10, scope: !3209)
!3211 = !DILocation(line: 727, column: 17, scope: !3212)
!3212 = !DILexicalBlockFile(scope: !3213, file: !10, discriminator: 1)
!3213 = distinct !DILexicalBlock(scope: !3209, file: !10, line: 727, column: 5)
!3214 = !DILocation(line: 727, column: 19, scope: !3212)
!3215 = !DILocation(line: 727, column: 5, scope: !3212)
!3216 = !DILocation(line: 728, column: 24, scope: !3217)
!3217 = distinct !DILexicalBlock(scope: !3213, file: !10, line: 727, column: 32)
!3218 = !DILocation(line: 728, column: 9, scope: !3217)
!3219 = !DILocation(line: 729, column: 16, scope: !3220)
!3220 = distinct !DILexicalBlock(scope: !3217, file: !10, line: 729, column: 9)
!3221 = !DILocation(line: 729, column: 14, scope: !3220)
!3222 = !DILocation(line: 729, column: 21, scope: !3223)
!3223 = !DILexicalBlockFile(scope: !3224, file: !10, discriminator: 1)
!3224 = distinct !DILexicalBlock(scope: !3220, file: !10, line: 729, column: 9)
!3225 = !DILocation(line: 729, column: 23, scope: !3223)
!3226 = !DILocation(line: 729, column: 9, scope: !3223)
!3227 = !DILocation(line: 730, column: 29, scope: !3228)
!3228 = distinct !DILexicalBlock(scope: !3224, file: !10, line: 729, column: 33)
!3229 = !DILocation(line: 730, column: 32, scope: !3228)
!3230 = !DILocation(line: 730, column: 37, scope: !3228)
!3231 = !DILocation(line: 730, column: 35, scope: !3228)
!3232 = !DILocation(line: 730, column: 41, scope: !3228)
!3233 = !DILocation(line: 730, column: 13, scope: !3228)
!3234 = !DILocation(line: 731, column: 21, scope: !3228)
!3235 = !DILocation(line: 731, column: 24, scope: !3228)
!3236 = !DILocation(line: 731, column: 13, scope: !3228)
!3237 = !DILocation(line: 732, column: 29, scope: !3228)
!3238 = !DILocation(line: 732, column: 32, scope: !3228)
!3239 = !DILocation(line: 732, column: 35, scope: !3228)
!3240 = !DILocation(line: 732, column: 40, scope: !3228)
!3241 = !DILocation(line: 732, column: 38, scope: !3228)
!3242 = !DILocation(line: 732, column: 44, scope: !3228)
!3243 = !DILocation(line: 732, column: 13, scope: !3228)
!3244 = !DILocation(line: 733, column: 25, scope: !3228)
!3245 = !DILocation(line: 733, column: 28, scope: !3228)
!3246 = !DILocation(line: 733, column: 31, scope: !3228)
!3247 = !DILocation(line: 733, column: 13, scope: !3228)
!3248 = !DILocation(line: 735, column: 61, scope: !3249)
!3249 = distinct !DILexicalBlock(scope: !3228, file: !10, line: 735, column: 17)
!3250 = !DILocation(line: 735, column: 18, scope: !3249)
!3251 = !DILocation(line: 735, column: 17, scope: !3228)
!3252 = !DILocation(line: 736, column: 17, scope: !3249)
!3253 = !DILocation(line: 737, column: 9, scope: !3228)
!3254 = !DILocation(line: 729, column: 29, scope: !3255)
!3255 = !DILexicalBlockFile(scope: !3224, file: !10, discriminator: 2)
!3256 = !DILocation(line: 729, column: 9, scope: !3255)
!3257 = distinct !{!3257, !3258}
!3258 = !DILocation(line: 729, column: 9, scope: !3217)
!3259 = !DILocation(line: 738, column: 5, scope: !3217)
!3260 = !DILocation(line: 727, column: 28, scope: !3261)
!3261 = !DILexicalBlockFile(scope: !3213, file: !10, discriminator: 2)
!3262 = !DILocation(line: 727, column: 5, scope: !3261)
!3263 = distinct !{!3263, !3264}
!3264 = !DILocation(line: 727, column: 5, scope: !3153)
!3265 = !DILocation(line: 739, column: 8, scope: !3153)
!3266 = !DILocation(line: 739, column: 5, scope: !3153)
!3267 = !DILocation(line: 741, column: 13, scope: !3153)
!3268 = !DILocation(line: 741, column: 5, scope: !3153)
!3269 = !DILocation(line: 742, column: 13, scope: !3153)
!3270 = !DILocation(line: 742, column: 5, scope: !3153)
!3271 = !DILocation(line: 743, column: 13, scope: !3153)
!3272 = !DILocation(line: 743, column: 5, scope: !3153)
!3273 = !DILocation(line: 744, column: 13, scope: !3153)
!3274 = !DILocation(line: 744, column: 5, scope: !3153)
!3275 = !DILocation(line: 745, column: 13, scope: !3153)
!3276 = !DILocation(line: 745, column: 5, scope: !3153)
!3277 = !DILocation(line: 746, column: 12, scope: !3153)
!3278 = !DILocation(line: 746, column: 5, scope: !3153)
!3279 = distinct !DISubprogram(name: "test_gf2m_modinv", scope: !10, file: !10, line: 749, type: !39, isLocal: true, isDefinition: true, scopeLine: 750, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3280 = !DILocalVariable(name: "a", scope: !3279, file: !10, line: 751, type: !187)
!3281 = !DILocation(line: 751, column: 13, scope: !3279)
!3282 = !DILocalVariable(name: "b", scope: !3279, file: !10, line: 751, type: !2841)
!3283 = !DILocation(line: 751, column: 23, scope: !3279)
!3284 = !DILocalVariable(name: "c", scope: !3279, file: !10, line: 751, type: !187)
!3285 = !DILocation(line: 751, column: 44, scope: !3279)
!3286 = !DILocalVariable(name: "d", scope: !3279, file: !10, line: 751, type: !187)
!3287 = !DILocation(line: 751, column: 55, scope: !3279)
!3288 = !DILocalVariable(name: "i", scope: !3279, file: !10, line: 752, type: !4)
!3289 = !DILocation(line: 752, column: 9, scope: !3279)
!3290 = !DILocalVariable(name: "j", scope: !3279, file: !10, line: 752, type: !4)
!3291 = !DILocation(line: 752, column: 12, scope: !3279)
!3292 = !DILocalVariable(name: "st", scope: !3279, file: !10, line: 752, type: !4)
!3293 = !DILocation(line: 752, column: 15, scope: !3279)
!3294 = !DILocation(line: 754, column: 61, scope: !3295)
!3295 = distinct !DILexicalBlock(scope: !3279, file: !10, line: 754, column: 9)
!3296 = !DILocation(line: 754, column: 59, scope: !3295)
!3297 = !DILocation(line: 754, column: 57, scope: !3295)
!3298 = !DILocation(line: 754, column: 10, scope: !3299)
!3299 = !DILexicalBlockFile(scope: !3295, file: !10, discriminator: 2)
!3300 = !DILocation(line: 754, column: 10, scope: !3295)
!3301 = !DILocation(line: 755, column: 13, scope: !3295)
!3302 = !DILocation(line: 755, column: 74, scope: !3303)
!3303 = !DILexicalBlockFile(scope: !3295, file: !10, discriminator: 1)
!3304 = !DILocation(line: 755, column: 67, scope: !3303)
!3305 = !DILocation(line: 755, column: 72, scope: !3303)
!3306 = !DILocation(line: 755, column: 17, scope: !3307)
!3307 = !DILexicalBlockFile(scope: !3303, file: !10, discriminator: 2)
!3308 = !DILocation(line: 755, column: 17, scope: !3303)
!3309 = !DILocation(line: 756, column: 13, scope: !3295)
!3310 = !DILocation(line: 756, column: 74, scope: !3303)
!3311 = !DILocation(line: 756, column: 67, scope: !3303)
!3312 = !DILocation(line: 756, column: 72, scope: !3303)
!3313 = !DILocation(line: 756, column: 17, scope: !3307)
!3314 = !DILocation(line: 756, column: 17, scope: !3303)
!3315 = !DILocation(line: 757, column: 13, scope: !3295)
!3316 = !DILocation(line: 757, column: 68, scope: !3303)
!3317 = !DILocation(line: 757, column: 66, scope: !3303)
!3318 = !DILocation(line: 757, column: 64, scope: !3303)
!3319 = !DILocation(line: 757, column: 17, scope: !3307)
!3320 = !DILocation(line: 757, column: 17, scope: !3303)
!3321 = !DILocation(line: 758, column: 13, scope: !3295)
!3322 = !DILocation(line: 758, column: 68, scope: !3303)
!3323 = !DILocation(line: 758, column: 66, scope: !3303)
!3324 = !DILocation(line: 758, column: 64, scope: !3303)
!3325 = !DILocation(line: 758, column: 17, scope: !3307)
!3326 = !DILocation(line: 758, column: 17, scope: !3303)
!3327 = !DILocation(line: 754, column: 9, scope: !3328)
!3328 = !DILexicalBlockFile(scope: !3279, file: !10, discriminator: 1)
!3329 = !DILocation(line: 759, column: 9, scope: !3295)
!3330 = !DILocation(line: 761, column: 26, scope: !3279)
!3331 = !DILocation(line: 761, column: 5, scope: !3279)
!3332 = !DILocation(line: 762, column: 26, scope: !3279)
!3333 = !DILocation(line: 762, column: 5, scope: !3279)
!3334 = !DILocation(line: 764, column: 12, scope: !3335)
!3335 = distinct !DILexicalBlock(scope: !3279, file: !10, line: 764, column: 5)
!3336 = !DILocation(line: 764, column: 10, scope: !3335)
!3337 = !DILocation(line: 764, column: 17, scope: !3338)
!3338 = !DILexicalBlockFile(scope: !3339, file: !10, discriminator: 1)
!3339 = distinct !DILexicalBlock(scope: !3335, file: !10, line: 764, column: 5)
!3340 = !DILocation(line: 764, column: 19, scope: !3338)
!3341 = !DILocation(line: 764, column: 5, scope: !3338)
!3342 = !DILocation(line: 765, column: 24, scope: !3343)
!3343 = distinct !DILexicalBlock(scope: !3339, file: !10, line: 764, column: 32)
!3344 = !DILocation(line: 765, column: 9, scope: !3343)
!3345 = !DILocation(line: 766, column: 16, scope: !3346)
!3346 = distinct !DILexicalBlock(scope: !3343, file: !10, line: 766, column: 9)
!3347 = !DILocation(line: 766, column: 14, scope: !3346)
!3348 = !DILocation(line: 766, column: 21, scope: !3349)
!3349 = !DILexicalBlockFile(scope: !3350, file: !10, discriminator: 1)
!3350 = distinct !DILexicalBlock(scope: !3346, file: !10, line: 766, column: 9)
!3351 = !DILocation(line: 766, column: 23, scope: !3349)
!3352 = !DILocation(line: 766, column: 9, scope: !3349)
!3353 = !DILocation(line: 767, column: 29, scope: !3354)
!3354 = distinct !DILexicalBlock(scope: !3350, file: !10, line: 766, column: 33)
!3355 = !DILocation(line: 767, column: 32, scope: !3354)
!3356 = !DILocation(line: 767, column: 37, scope: !3354)
!3357 = !DILocation(line: 767, column: 35, scope: !3354)
!3358 = !DILocation(line: 767, column: 41, scope: !3354)
!3359 = !DILocation(line: 767, column: 13, scope: !3354)
!3360 = !DILocation(line: 768, column: 29, scope: !3354)
!3361 = !DILocation(line: 768, column: 32, scope: !3354)
!3362 = !DILocation(line: 768, column: 35, scope: !3354)
!3363 = !DILocation(line: 768, column: 40, scope: !3354)
!3364 = !DILocation(line: 768, column: 38, scope: !3354)
!3365 = !DILocation(line: 768, column: 44, scope: !3354)
!3366 = !DILocation(line: 768, column: 13, scope: !3354)
!3367 = !DILocation(line: 770, column: 60, scope: !3368)
!3368 = distinct !DILexicalBlock(scope: !3354, file: !10, line: 770, column: 17)
!3369 = !DILocation(line: 770, column: 18, scope: !3368)
!3370 = !DILocation(line: 770, column: 17, scope: !3354)
!3371 = !DILocation(line: 771, column: 17, scope: !3368)
!3372 = !DILocation(line: 772, column: 9, scope: !3354)
!3373 = !DILocation(line: 766, column: 29, scope: !3374)
!3374 = !DILexicalBlockFile(scope: !3350, file: !10, discriminator: 2)
!3375 = !DILocation(line: 766, column: 9, scope: !3374)
!3376 = distinct !{!3376, !3377}
!3377 = !DILocation(line: 766, column: 9, scope: !3343)
!3378 = !DILocation(line: 773, column: 5, scope: !3343)
!3379 = !DILocation(line: 764, column: 28, scope: !3380)
!3380 = !DILexicalBlockFile(scope: !3339, file: !10, discriminator: 2)
!3381 = !DILocation(line: 764, column: 5, scope: !3380)
!3382 = distinct !{!3382, !3383}
!3383 = !DILocation(line: 764, column: 5, scope: !3279)
!3384 = !DILocation(line: 774, column: 8, scope: !3279)
!3385 = !DILocation(line: 774, column: 5, scope: !3279)
!3386 = !DILocation(line: 776, column: 13, scope: !3279)
!3387 = !DILocation(line: 776, column: 5, scope: !3279)
!3388 = !DILocation(line: 777, column: 13, scope: !3279)
!3389 = !DILocation(line: 777, column: 5, scope: !3279)
!3390 = !DILocation(line: 778, column: 13, scope: !3279)
!3391 = !DILocation(line: 778, column: 5, scope: !3279)
!3392 = !DILocation(line: 779, column: 13, scope: !3279)
!3393 = !DILocation(line: 779, column: 5, scope: !3279)
!3394 = !DILocation(line: 780, column: 13, scope: !3279)
!3395 = !DILocation(line: 780, column: 5, scope: !3279)
!3396 = !DILocation(line: 781, column: 12, scope: !3279)
!3397 = !DILocation(line: 781, column: 5, scope: !3279)
!3398 = distinct !DISubprogram(name: "test_gf2m_moddiv", scope: !10, file: !10, line: 784, type: !39, isLocal: true, isDefinition: true, scopeLine: 785, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3399 = !DILocalVariable(name: "a", scope: !3398, file: !10, line: 786, type: !187)
!3400 = !DILocation(line: 786, column: 13, scope: !3398)
!3401 = !DILocalVariable(name: "b", scope: !3398, file: !10, line: 786, type: !2841)
!3402 = !DILocation(line: 786, column: 23, scope: !3398)
!3403 = !DILocalVariable(name: "c", scope: !3398, file: !10, line: 786, type: !187)
!3404 = !DILocation(line: 786, column: 44, scope: !3398)
!3405 = !DILocalVariable(name: "d", scope: !3398, file: !10, line: 786, type: !187)
!3406 = !DILocation(line: 786, column: 55, scope: !3398)
!3407 = !DILocalVariable(name: "e", scope: !3398, file: !10, line: 787, type: !187)
!3408 = !DILocation(line: 787, column: 13, scope: !3398)
!3409 = !DILocalVariable(name: "f", scope: !3398, file: !10, line: 787, type: !187)
!3410 = !DILocation(line: 787, column: 23, scope: !3398)
!3411 = !DILocalVariable(name: "i", scope: !3398, file: !10, line: 788, type: !4)
!3412 = !DILocation(line: 788, column: 9, scope: !3398)
!3413 = !DILocalVariable(name: "j", scope: !3398, file: !10, line: 788, type: !4)
!3414 = !DILocation(line: 788, column: 12, scope: !3398)
!3415 = !DILocalVariable(name: "st", scope: !3398, file: !10, line: 788, type: !4)
!3416 = !DILocation(line: 788, column: 15, scope: !3398)
!3417 = !DILocation(line: 790, column: 61, scope: !3418)
!3418 = distinct !DILexicalBlock(scope: !3398, file: !10, line: 790, column: 9)
!3419 = !DILocation(line: 790, column: 59, scope: !3418)
!3420 = !DILocation(line: 790, column: 57, scope: !3418)
!3421 = !DILocation(line: 790, column: 10, scope: !3422)
!3422 = !DILexicalBlockFile(scope: !3418, file: !10, discriminator: 2)
!3423 = !DILocation(line: 790, column: 10, scope: !3418)
!3424 = !DILocation(line: 791, column: 13, scope: !3418)
!3425 = !DILocation(line: 791, column: 74, scope: !3426)
!3426 = !DILexicalBlockFile(scope: !3418, file: !10, discriminator: 1)
!3427 = !DILocation(line: 791, column: 67, scope: !3426)
!3428 = !DILocation(line: 791, column: 72, scope: !3426)
!3429 = !DILocation(line: 791, column: 17, scope: !3430)
!3430 = !DILexicalBlockFile(scope: !3426, file: !10, discriminator: 2)
!3431 = !DILocation(line: 791, column: 17, scope: !3426)
!3432 = !DILocation(line: 792, column: 13, scope: !3418)
!3433 = !DILocation(line: 792, column: 74, scope: !3426)
!3434 = !DILocation(line: 792, column: 67, scope: !3426)
!3435 = !DILocation(line: 792, column: 72, scope: !3426)
!3436 = !DILocation(line: 792, column: 17, scope: !3430)
!3437 = !DILocation(line: 792, column: 17, scope: !3426)
!3438 = !DILocation(line: 793, column: 13, scope: !3418)
!3439 = !DILocation(line: 793, column: 68, scope: !3426)
!3440 = !DILocation(line: 793, column: 66, scope: !3426)
!3441 = !DILocation(line: 793, column: 64, scope: !3426)
!3442 = !DILocation(line: 793, column: 17, scope: !3430)
!3443 = !DILocation(line: 793, column: 17, scope: !3426)
!3444 = !DILocation(line: 794, column: 13, scope: !3418)
!3445 = !DILocation(line: 794, column: 68, scope: !3426)
!3446 = !DILocation(line: 794, column: 66, scope: !3426)
!3447 = !DILocation(line: 794, column: 64, scope: !3426)
!3448 = !DILocation(line: 794, column: 17, scope: !3430)
!3449 = !DILocation(line: 794, column: 17, scope: !3426)
!3450 = !DILocation(line: 795, column: 13, scope: !3418)
!3451 = !DILocation(line: 795, column: 68, scope: !3426)
!3452 = !DILocation(line: 795, column: 66, scope: !3426)
!3453 = !DILocation(line: 795, column: 64, scope: !3426)
!3454 = !DILocation(line: 795, column: 17, scope: !3430)
!3455 = !DILocation(line: 795, column: 17, scope: !3426)
!3456 = !DILocation(line: 796, column: 13, scope: !3418)
!3457 = !DILocation(line: 796, column: 68, scope: !3426)
!3458 = !DILocation(line: 796, column: 66, scope: !3426)
!3459 = !DILocation(line: 796, column: 64, scope: !3426)
!3460 = !DILocation(line: 796, column: 17, scope: !3430)
!3461 = !DILocation(line: 796, column: 17, scope: !3426)
!3462 = !DILocation(line: 790, column: 9, scope: !3463)
!3463 = !DILexicalBlockFile(scope: !3398, file: !10, discriminator: 1)
!3464 = !DILocation(line: 797, column: 9, scope: !3418)
!3465 = !DILocation(line: 799, column: 26, scope: !3398)
!3466 = !DILocation(line: 799, column: 5, scope: !3398)
!3467 = !DILocation(line: 800, column: 26, scope: !3398)
!3468 = !DILocation(line: 800, column: 5, scope: !3398)
!3469 = !DILocation(line: 802, column: 12, scope: !3470)
!3470 = distinct !DILexicalBlock(scope: !3398, file: !10, line: 802, column: 5)
!3471 = !DILocation(line: 802, column: 10, scope: !3470)
!3472 = !DILocation(line: 802, column: 17, scope: !3473)
!3473 = !DILexicalBlockFile(scope: !3474, file: !10, discriminator: 1)
!3474 = distinct !DILexicalBlock(scope: !3470, file: !10, line: 802, column: 5)
!3475 = !DILocation(line: 802, column: 19, scope: !3473)
!3476 = !DILocation(line: 802, column: 5, scope: !3473)
!3477 = !DILocation(line: 803, column: 24, scope: !3478)
!3478 = distinct !DILexicalBlock(scope: !3474, file: !10, line: 802, column: 32)
!3479 = !DILocation(line: 803, column: 9, scope: !3478)
!3480 = !DILocation(line: 804, column: 24, scope: !3478)
!3481 = !DILocation(line: 804, column: 9, scope: !3478)
!3482 = !DILocation(line: 805, column: 16, scope: !3483)
!3483 = distinct !DILexicalBlock(scope: !3478, file: !10, line: 805, column: 9)
!3484 = !DILocation(line: 805, column: 14, scope: !3483)
!3485 = !DILocation(line: 805, column: 21, scope: !3486)
!3486 = !DILexicalBlockFile(scope: !3487, file: !10, discriminator: 1)
!3487 = distinct !DILexicalBlock(scope: !3483, file: !10, line: 805, column: 9)
!3488 = !DILocation(line: 805, column: 23, scope: !3486)
!3489 = !DILocation(line: 805, column: 9, scope: !3486)
!3490 = !DILocation(line: 806, column: 29, scope: !3491)
!3491 = distinct !DILexicalBlock(scope: !3487, file: !10, line: 805, column: 33)
!3492 = !DILocation(line: 806, column: 32, scope: !3491)
!3493 = !DILocation(line: 806, column: 35, scope: !3491)
!3494 = !DILocation(line: 806, column: 40, scope: !3491)
!3495 = !DILocation(line: 806, column: 38, scope: !3491)
!3496 = !DILocation(line: 806, column: 44, scope: !3491)
!3497 = !DILocation(line: 806, column: 13, scope: !3491)
!3498 = !DILocation(line: 807, column: 29, scope: !3491)
!3499 = !DILocation(line: 807, column: 32, scope: !3491)
!3500 = !DILocation(line: 807, column: 35, scope: !3491)
!3501 = !DILocation(line: 807, column: 40, scope: !3491)
!3502 = !DILocation(line: 807, column: 38, scope: !3491)
!3503 = !DILocation(line: 807, column: 44, scope: !3491)
!3504 = !DILocation(line: 807, column: 13, scope: !3491)
!3505 = !DILocation(line: 808, column: 29, scope: !3491)
!3506 = !DILocation(line: 808, column: 32, scope: !3491)
!3507 = !DILocation(line: 808, column: 35, scope: !3491)
!3508 = !DILocation(line: 808, column: 40, scope: !3491)
!3509 = !DILocation(line: 808, column: 38, scope: !3491)
!3510 = !DILocation(line: 808, column: 44, scope: !3491)
!3511 = !DILocation(line: 808, column: 13, scope: !3491)
!3512 = !DILocation(line: 810, column: 60, scope: !3513)
!3513 = distinct !DILexicalBlock(scope: !3491, file: !10, line: 810, column: 17)
!3514 = !DILocation(line: 810, column: 18, scope: !3513)
!3515 = !DILocation(line: 810, column: 17, scope: !3491)
!3516 = !DILocation(line: 811, column: 17, scope: !3513)
!3517 = !DILocation(line: 812, column: 9, scope: !3491)
!3518 = !DILocation(line: 805, column: 29, scope: !3519)
!3519 = !DILexicalBlockFile(scope: !3487, file: !10, discriminator: 2)
!3520 = !DILocation(line: 805, column: 9, scope: !3519)
!3521 = distinct !{!3521, !3522}
!3522 = !DILocation(line: 805, column: 9, scope: !3478)
!3523 = !DILocation(line: 813, column: 5, scope: !3478)
!3524 = !DILocation(line: 802, column: 28, scope: !3525)
!3525 = !DILexicalBlockFile(scope: !3474, file: !10, discriminator: 2)
!3526 = !DILocation(line: 802, column: 5, scope: !3525)
!3527 = distinct !{!3527, !3528}
!3528 = !DILocation(line: 802, column: 5, scope: !3398)
!3529 = !DILocation(line: 814, column: 8, scope: !3398)
!3530 = !DILocation(line: 814, column: 5, scope: !3398)
!3531 = !DILocation(line: 816, column: 13, scope: !3398)
!3532 = !DILocation(line: 816, column: 5, scope: !3398)
!3533 = !DILocation(line: 817, column: 13, scope: !3398)
!3534 = !DILocation(line: 817, column: 5, scope: !3398)
!3535 = !DILocation(line: 818, column: 13, scope: !3398)
!3536 = !DILocation(line: 818, column: 5, scope: !3398)
!3537 = !DILocation(line: 819, column: 13, scope: !3398)
!3538 = !DILocation(line: 819, column: 5, scope: !3398)
!3539 = !DILocation(line: 820, column: 13, scope: !3398)
!3540 = !DILocation(line: 820, column: 5, scope: !3398)
!3541 = !DILocation(line: 821, column: 13, scope: !3398)
!3542 = !DILocation(line: 821, column: 5, scope: !3398)
!3543 = !DILocation(line: 822, column: 13, scope: !3398)
!3544 = !DILocation(line: 822, column: 5, scope: !3398)
!3545 = !DILocation(line: 823, column: 12, scope: !3398)
!3546 = !DILocation(line: 823, column: 5, scope: !3398)
!3547 = distinct !DISubprogram(name: "test_gf2m_modexp", scope: !10, file: !10, line: 826, type: !39, isLocal: true, isDefinition: true, scopeLine: 827, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3548 = !DILocalVariable(name: "a", scope: !3547, file: !10, line: 828, type: !187)
!3549 = !DILocation(line: 828, column: 13, scope: !3547)
!3550 = !DILocalVariable(name: "b", scope: !3547, file: !10, line: 828, type: !2841)
!3551 = !DILocation(line: 828, column: 23, scope: !3547)
!3552 = !DILocalVariable(name: "c", scope: !3547, file: !10, line: 828, type: !187)
!3553 = !DILocation(line: 828, column: 44, scope: !3547)
!3554 = !DILocalVariable(name: "d", scope: !3547, file: !10, line: 828, type: !187)
!3555 = !DILocation(line: 828, column: 55, scope: !3547)
!3556 = !DILocalVariable(name: "e", scope: !3547, file: !10, line: 829, type: !187)
!3557 = !DILocation(line: 829, column: 13, scope: !3547)
!3558 = !DILocalVariable(name: "f", scope: !3547, file: !10, line: 829, type: !187)
!3559 = !DILocation(line: 829, column: 23, scope: !3547)
!3560 = !DILocalVariable(name: "i", scope: !3547, file: !10, line: 830, type: !4)
!3561 = !DILocation(line: 830, column: 9, scope: !3547)
!3562 = !DILocalVariable(name: "j", scope: !3547, file: !10, line: 830, type: !4)
!3563 = !DILocation(line: 830, column: 12, scope: !3547)
!3564 = !DILocalVariable(name: "st", scope: !3547, file: !10, line: 830, type: !4)
!3565 = !DILocation(line: 830, column: 15, scope: !3547)
!3566 = !DILocation(line: 832, column: 61, scope: !3567)
!3567 = distinct !DILexicalBlock(scope: !3547, file: !10, line: 832, column: 9)
!3568 = !DILocation(line: 832, column: 59, scope: !3567)
!3569 = !DILocation(line: 832, column: 57, scope: !3567)
!3570 = !DILocation(line: 832, column: 10, scope: !3571)
!3571 = !DILexicalBlockFile(scope: !3567, file: !10, discriminator: 2)
!3572 = !DILocation(line: 832, column: 10, scope: !3567)
!3573 = !DILocation(line: 833, column: 13, scope: !3567)
!3574 = !DILocation(line: 833, column: 74, scope: !3575)
!3575 = !DILexicalBlockFile(scope: !3567, file: !10, discriminator: 1)
!3576 = !DILocation(line: 833, column: 67, scope: !3575)
!3577 = !DILocation(line: 833, column: 72, scope: !3575)
!3578 = !DILocation(line: 833, column: 17, scope: !3579)
!3579 = !DILexicalBlockFile(scope: !3575, file: !10, discriminator: 2)
!3580 = !DILocation(line: 833, column: 17, scope: !3575)
!3581 = !DILocation(line: 834, column: 13, scope: !3567)
!3582 = !DILocation(line: 834, column: 74, scope: !3575)
!3583 = !DILocation(line: 834, column: 67, scope: !3575)
!3584 = !DILocation(line: 834, column: 72, scope: !3575)
!3585 = !DILocation(line: 834, column: 17, scope: !3579)
!3586 = !DILocation(line: 834, column: 17, scope: !3575)
!3587 = !DILocation(line: 835, column: 13, scope: !3567)
!3588 = !DILocation(line: 835, column: 68, scope: !3575)
!3589 = !DILocation(line: 835, column: 66, scope: !3575)
!3590 = !DILocation(line: 835, column: 64, scope: !3575)
!3591 = !DILocation(line: 835, column: 17, scope: !3579)
!3592 = !DILocation(line: 835, column: 17, scope: !3575)
!3593 = !DILocation(line: 836, column: 13, scope: !3567)
!3594 = !DILocation(line: 836, column: 68, scope: !3575)
!3595 = !DILocation(line: 836, column: 66, scope: !3575)
!3596 = !DILocation(line: 836, column: 64, scope: !3575)
!3597 = !DILocation(line: 836, column: 17, scope: !3579)
!3598 = !DILocation(line: 836, column: 17, scope: !3575)
!3599 = !DILocation(line: 837, column: 13, scope: !3567)
!3600 = !DILocation(line: 837, column: 68, scope: !3575)
!3601 = !DILocation(line: 837, column: 66, scope: !3575)
!3602 = !DILocation(line: 837, column: 64, scope: !3575)
!3603 = !DILocation(line: 837, column: 17, scope: !3579)
!3604 = !DILocation(line: 837, column: 17, scope: !3575)
!3605 = !DILocation(line: 838, column: 13, scope: !3567)
!3606 = !DILocation(line: 838, column: 68, scope: !3575)
!3607 = !DILocation(line: 838, column: 66, scope: !3575)
!3608 = !DILocation(line: 838, column: 64, scope: !3575)
!3609 = !DILocation(line: 838, column: 17, scope: !3579)
!3610 = !DILocation(line: 838, column: 17, scope: !3575)
!3611 = !DILocation(line: 832, column: 9, scope: !3612)
!3612 = !DILexicalBlockFile(scope: !3547, file: !10, discriminator: 1)
!3613 = !DILocation(line: 839, column: 9, scope: !3567)
!3614 = !DILocation(line: 841, column: 26, scope: !3547)
!3615 = !DILocation(line: 841, column: 5, scope: !3547)
!3616 = !DILocation(line: 842, column: 26, scope: !3547)
!3617 = !DILocation(line: 842, column: 5, scope: !3547)
!3618 = !DILocation(line: 844, column: 12, scope: !3619)
!3619 = distinct !DILexicalBlock(scope: !3547, file: !10, line: 844, column: 5)
!3620 = !DILocation(line: 844, column: 10, scope: !3619)
!3621 = !DILocation(line: 844, column: 17, scope: !3622)
!3622 = !DILexicalBlockFile(scope: !3623, file: !10, discriminator: 1)
!3623 = distinct !DILexicalBlock(scope: !3619, file: !10, line: 844, column: 5)
!3624 = !DILocation(line: 844, column: 19, scope: !3622)
!3625 = !DILocation(line: 844, column: 5, scope: !3622)
!3626 = !DILocation(line: 845, column: 24, scope: !3627)
!3627 = distinct !DILexicalBlock(scope: !3623, file: !10, line: 844, column: 32)
!3628 = !DILocation(line: 845, column: 9, scope: !3627)
!3629 = !DILocation(line: 846, column: 24, scope: !3627)
!3630 = !DILocation(line: 846, column: 9, scope: !3627)
!3631 = !DILocation(line: 847, column: 24, scope: !3627)
!3632 = !DILocation(line: 847, column: 9, scope: !3627)
!3633 = !DILocation(line: 848, column: 16, scope: !3634)
!3634 = distinct !DILexicalBlock(scope: !3627, file: !10, line: 848, column: 9)
!3635 = !DILocation(line: 848, column: 14, scope: !3634)
!3636 = !DILocation(line: 848, column: 21, scope: !3637)
!3637 = !DILexicalBlockFile(scope: !3638, file: !10, discriminator: 1)
!3638 = distinct !DILexicalBlock(scope: !3634, file: !10, line: 848, column: 9)
!3639 = !DILocation(line: 848, column: 23, scope: !3637)
!3640 = !DILocation(line: 848, column: 9, scope: !3637)
!3641 = !DILocation(line: 849, column: 29, scope: !3642)
!3642 = distinct !DILexicalBlock(scope: !3638, file: !10, line: 848, column: 33)
!3643 = !DILocation(line: 849, column: 32, scope: !3642)
!3644 = !DILocation(line: 849, column: 35, scope: !3642)
!3645 = !DILocation(line: 849, column: 40, scope: !3642)
!3646 = !DILocation(line: 849, column: 38, scope: !3642)
!3647 = !DILocation(line: 849, column: 44, scope: !3642)
!3648 = !DILocation(line: 849, column: 13, scope: !3642)
!3649 = !DILocation(line: 850, column: 29, scope: !3642)
!3650 = !DILocation(line: 850, column: 32, scope: !3642)
!3651 = !DILocation(line: 850, column: 35, scope: !3642)
!3652 = !DILocation(line: 850, column: 40, scope: !3642)
!3653 = !DILocation(line: 850, column: 38, scope: !3642)
!3654 = !DILocation(line: 850, column: 44, scope: !3642)
!3655 = !DILocation(line: 850, column: 13, scope: !3642)
!3656 = !DILocation(line: 851, column: 29, scope: !3642)
!3657 = !DILocation(line: 851, column: 32, scope: !3642)
!3658 = !DILocation(line: 851, column: 35, scope: !3642)
!3659 = !DILocation(line: 851, column: 40, scope: !3642)
!3660 = !DILocation(line: 851, column: 38, scope: !3642)
!3661 = !DILocation(line: 851, column: 44, scope: !3642)
!3662 = !DILocation(line: 851, column: 13, scope: !3642)
!3663 = !DILocation(line: 852, column: 20, scope: !3642)
!3664 = !DILocation(line: 852, column: 23, scope: !3642)
!3665 = !DILocation(line: 852, column: 26, scope: !3642)
!3666 = !DILocation(line: 852, column: 13, scope: !3642)
!3667 = !DILocation(line: 853, column: 29, scope: !3642)
!3668 = !DILocation(line: 853, column: 32, scope: !3642)
!3669 = !DILocation(line: 853, column: 35, scope: !3642)
!3670 = !DILocation(line: 853, column: 40, scope: !3642)
!3671 = !DILocation(line: 853, column: 38, scope: !3642)
!3672 = !DILocation(line: 853, column: 44, scope: !3642)
!3673 = !DILocation(line: 853, column: 13, scope: !3642)
!3674 = !DILocation(line: 854, column: 25, scope: !3642)
!3675 = !DILocation(line: 854, column: 28, scope: !3642)
!3676 = !DILocation(line: 854, column: 31, scope: !3642)
!3677 = !DILocation(line: 854, column: 13, scope: !3642)
!3678 = !DILocation(line: 856, column: 61, scope: !3679)
!3679 = distinct !DILexicalBlock(scope: !3642, file: !10, line: 856, column: 17)
!3680 = !DILocation(line: 856, column: 18, scope: !3679)
!3681 = !DILocation(line: 856, column: 17, scope: !3642)
!3682 = !DILocation(line: 857, column: 17, scope: !3679)
!3683 = !DILocation(line: 858, column: 9, scope: !3642)
!3684 = !DILocation(line: 848, column: 29, scope: !3685)
!3685 = !DILexicalBlockFile(scope: !3638, file: !10, discriminator: 2)
!3686 = !DILocation(line: 848, column: 9, scope: !3685)
!3687 = distinct !{!3687, !3688}
!3688 = !DILocation(line: 848, column: 9, scope: !3627)
!3689 = !DILocation(line: 859, column: 5, scope: !3627)
!3690 = !DILocation(line: 844, column: 28, scope: !3691)
!3691 = !DILexicalBlockFile(scope: !3623, file: !10, discriminator: 2)
!3692 = !DILocation(line: 844, column: 5, scope: !3691)
!3693 = distinct !{!3693, !3694}
!3694 = !DILocation(line: 844, column: 5, scope: !3547)
!3695 = !DILocation(line: 860, column: 8, scope: !3547)
!3696 = !DILocation(line: 860, column: 5, scope: !3547)
!3697 = !DILocation(line: 862, column: 13, scope: !3547)
!3698 = !DILocation(line: 862, column: 5, scope: !3547)
!3699 = !DILocation(line: 863, column: 13, scope: !3547)
!3700 = !DILocation(line: 863, column: 5, scope: !3547)
!3701 = !DILocation(line: 864, column: 13, scope: !3547)
!3702 = !DILocation(line: 864, column: 5, scope: !3547)
!3703 = !DILocation(line: 865, column: 13, scope: !3547)
!3704 = !DILocation(line: 865, column: 5, scope: !3547)
!3705 = !DILocation(line: 866, column: 13, scope: !3547)
!3706 = !DILocation(line: 866, column: 5, scope: !3547)
!3707 = !DILocation(line: 867, column: 13, scope: !3547)
!3708 = !DILocation(line: 867, column: 5, scope: !3547)
!3709 = !DILocation(line: 868, column: 13, scope: !3547)
!3710 = !DILocation(line: 868, column: 5, scope: !3547)
!3711 = !DILocation(line: 869, column: 12, scope: !3547)
!3712 = !DILocation(line: 869, column: 5, scope: !3547)
!3713 = distinct !DISubprogram(name: "test_gf2m_modsqrt", scope: !10, file: !10, line: 872, type: !39, isLocal: true, isDefinition: true, scopeLine: 873, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3714 = !DILocalVariable(name: "a", scope: !3713, file: !10, line: 874, type: !187)
!3715 = !DILocation(line: 874, column: 13, scope: !3713)
!3716 = !DILocalVariable(name: "b", scope: !3713, file: !10, line: 874, type: !2841)
!3717 = !DILocation(line: 874, column: 23, scope: !3713)
!3718 = !DILocalVariable(name: "c", scope: !3713, file: !10, line: 874, type: !187)
!3719 = !DILocation(line: 874, column: 44, scope: !3713)
!3720 = !DILocalVariable(name: "d", scope: !3713, file: !10, line: 874, type: !187)
!3721 = !DILocation(line: 874, column: 55, scope: !3713)
!3722 = !DILocalVariable(name: "e", scope: !3713, file: !10, line: 875, type: !187)
!3723 = !DILocation(line: 875, column: 13, scope: !3713)
!3724 = !DILocalVariable(name: "f", scope: !3713, file: !10, line: 875, type: !187)
!3725 = !DILocation(line: 875, column: 23, scope: !3713)
!3726 = !DILocalVariable(name: "i", scope: !3713, file: !10, line: 876, type: !4)
!3727 = !DILocation(line: 876, column: 9, scope: !3713)
!3728 = !DILocalVariable(name: "j", scope: !3713, file: !10, line: 876, type: !4)
!3729 = !DILocation(line: 876, column: 12, scope: !3713)
!3730 = !DILocalVariable(name: "st", scope: !3713, file: !10, line: 876, type: !4)
!3731 = !DILocation(line: 876, column: 15, scope: !3713)
!3732 = !DILocation(line: 878, column: 61, scope: !3733)
!3733 = distinct !DILexicalBlock(scope: !3713, file: !10, line: 878, column: 9)
!3734 = !DILocation(line: 878, column: 59, scope: !3733)
!3735 = !DILocation(line: 878, column: 57, scope: !3733)
!3736 = !DILocation(line: 878, column: 10, scope: !3737)
!3737 = !DILexicalBlockFile(scope: !3733, file: !10, discriminator: 2)
!3738 = !DILocation(line: 878, column: 10, scope: !3733)
!3739 = !DILocation(line: 879, column: 13, scope: !3733)
!3740 = !DILocation(line: 879, column: 74, scope: !3741)
!3741 = !DILexicalBlockFile(scope: !3733, file: !10, discriminator: 1)
!3742 = !DILocation(line: 879, column: 67, scope: !3741)
!3743 = !DILocation(line: 879, column: 72, scope: !3741)
!3744 = !DILocation(line: 879, column: 17, scope: !3745)
!3745 = !DILexicalBlockFile(scope: !3741, file: !10, discriminator: 2)
!3746 = !DILocation(line: 879, column: 17, scope: !3741)
!3747 = !DILocation(line: 880, column: 13, scope: !3733)
!3748 = !DILocation(line: 880, column: 74, scope: !3741)
!3749 = !DILocation(line: 880, column: 67, scope: !3741)
!3750 = !DILocation(line: 880, column: 72, scope: !3741)
!3751 = !DILocation(line: 880, column: 17, scope: !3745)
!3752 = !DILocation(line: 880, column: 17, scope: !3741)
!3753 = !DILocation(line: 881, column: 13, scope: !3733)
!3754 = !DILocation(line: 881, column: 68, scope: !3741)
!3755 = !DILocation(line: 881, column: 66, scope: !3741)
!3756 = !DILocation(line: 881, column: 64, scope: !3741)
!3757 = !DILocation(line: 881, column: 17, scope: !3745)
!3758 = !DILocation(line: 881, column: 17, scope: !3741)
!3759 = !DILocation(line: 882, column: 13, scope: !3733)
!3760 = !DILocation(line: 882, column: 68, scope: !3741)
!3761 = !DILocation(line: 882, column: 66, scope: !3741)
!3762 = !DILocation(line: 882, column: 64, scope: !3741)
!3763 = !DILocation(line: 882, column: 17, scope: !3745)
!3764 = !DILocation(line: 882, column: 17, scope: !3741)
!3765 = !DILocation(line: 883, column: 13, scope: !3733)
!3766 = !DILocation(line: 883, column: 68, scope: !3741)
!3767 = !DILocation(line: 883, column: 66, scope: !3741)
!3768 = !DILocation(line: 883, column: 64, scope: !3741)
!3769 = !DILocation(line: 883, column: 17, scope: !3745)
!3770 = !DILocation(line: 883, column: 17, scope: !3741)
!3771 = !DILocation(line: 884, column: 13, scope: !3733)
!3772 = !DILocation(line: 884, column: 68, scope: !3741)
!3773 = !DILocation(line: 884, column: 66, scope: !3741)
!3774 = !DILocation(line: 884, column: 64, scope: !3741)
!3775 = !DILocation(line: 884, column: 17, scope: !3745)
!3776 = !DILocation(line: 884, column: 17, scope: !3741)
!3777 = !DILocation(line: 878, column: 9, scope: !3778)
!3778 = !DILexicalBlockFile(scope: !3713, file: !10, discriminator: 1)
!3779 = !DILocation(line: 885, column: 9, scope: !3733)
!3780 = !DILocation(line: 887, column: 26, scope: !3713)
!3781 = !DILocation(line: 887, column: 5, scope: !3713)
!3782 = !DILocation(line: 888, column: 26, scope: !3713)
!3783 = !DILocation(line: 888, column: 5, scope: !3713)
!3784 = !DILocation(line: 890, column: 12, scope: !3785)
!3785 = distinct !DILexicalBlock(scope: !3713, file: !10, line: 890, column: 5)
!3786 = !DILocation(line: 890, column: 10, scope: !3785)
!3787 = !DILocation(line: 890, column: 17, scope: !3788)
!3788 = !DILexicalBlockFile(scope: !3789, file: !10, discriminator: 1)
!3789 = distinct !DILexicalBlock(scope: !3785, file: !10, line: 890, column: 5)
!3790 = !DILocation(line: 890, column: 19, scope: !3788)
!3791 = !DILocation(line: 890, column: 5, scope: !3788)
!3792 = !DILocation(line: 891, column: 24, scope: !3793)
!3793 = distinct !DILexicalBlock(scope: !3789, file: !10, line: 890, column: 32)
!3794 = !DILocation(line: 891, column: 9, scope: !3793)
!3795 = !DILocation(line: 892, column: 16, scope: !3796)
!3796 = distinct !DILexicalBlock(scope: !3793, file: !10, line: 892, column: 9)
!3797 = !DILocation(line: 892, column: 14, scope: !3796)
!3798 = !DILocation(line: 892, column: 21, scope: !3799)
!3799 = !DILexicalBlockFile(scope: !3800, file: !10, discriminator: 1)
!3800 = distinct !DILexicalBlock(scope: !3796, file: !10, line: 892, column: 9)
!3801 = !DILocation(line: 892, column: 23, scope: !3799)
!3802 = !DILocation(line: 892, column: 9, scope: !3799)
!3803 = !DILocation(line: 893, column: 25, scope: !3804)
!3804 = distinct !DILexicalBlock(scope: !3800, file: !10, line: 892, column: 33)
!3805 = !DILocation(line: 893, column: 28, scope: !3804)
!3806 = !DILocation(line: 893, column: 33, scope: !3804)
!3807 = !DILocation(line: 893, column: 31, scope: !3804)
!3808 = !DILocation(line: 893, column: 13, scope: !3804)
!3809 = !DILocation(line: 894, column: 30, scope: !3804)
!3810 = !DILocation(line: 894, column: 33, scope: !3804)
!3811 = !DILocation(line: 894, column: 38, scope: !3804)
!3812 = !DILocation(line: 894, column: 36, scope: !3804)
!3813 = !DILocation(line: 894, column: 42, scope: !3804)
!3814 = !DILocation(line: 894, column: 13, scope: !3804)
!3815 = !DILocation(line: 895, column: 29, scope: !3804)
!3816 = !DILocation(line: 895, column: 32, scope: !3804)
!3817 = !DILocation(line: 895, column: 37, scope: !3804)
!3818 = !DILocation(line: 895, column: 35, scope: !3804)
!3819 = !DILocation(line: 895, column: 41, scope: !3804)
!3820 = !DILocation(line: 895, column: 13, scope: !3804)
!3821 = !DILocation(line: 896, column: 25, scope: !3804)
!3822 = !DILocation(line: 896, column: 28, scope: !3804)
!3823 = !DILocation(line: 896, column: 31, scope: !3804)
!3824 = !DILocation(line: 896, column: 13, scope: !3804)
!3825 = !DILocation(line: 898, column: 61, scope: !3826)
!3826 = distinct !DILexicalBlock(scope: !3804, file: !10, line: 898, column: 17)
!3827 = !DILocation(line: 898, column: 18, scope: !3826)
!3828 = !DILocation(line: 898, column: 17, scope: !3804)
!3829 = !DILocation(line: 899, column: 17, scope: !3826)
!3830 = !DILocation(line: 900, column: 9, scope: !3804)
!3831 = !DILocation(line: 892, column: 29, scope: !3832)
!3832 = !DILexicalBlockFile(scope: !3800, file: !10, discriminator: 2)
!3833 = !DILocation(line: 892, column: 9, scope: !3832)
!3834 = distinct !{!3834, !3835}
!3835 = !DILocation(line: 892, column: 9, scope: !3793)
!3836 = !DILocation(line: 901, column: 5, scope: !3793)
!3837 = !DILocation(line: 890, column: 28, scope: !3838)
!3838 = !DILexicalBlockFile(scope: !3789, file: !10, discriminator: 2)
!3839 = !DILocation(line: 890, column: 5, scope: !3838)
!3840 = distinct !{!3840, !3841}
!3841 = !DILocation(line: 890, column: 5, scope: !3713)
!3842 = !DILocation(line: 902, column: 8, scope: !3713)
!3843 = !DILocation(line: 902, column: 5, scope: !3713)
!3844 = !DILocation(line: 904, column: 13, scope: !3713)
!3845 = !DILocation(line: 904, column: 5, scope: !3713)
!3846 = !DILocation(line: 905, column: 13, scope: !3713)
!3847 = !DILocation(line: 905, column: 5, scope: !3713)
!3848 = !DILocation(line: 906, column: 13, scope: !3713)
!3849 = !DILocation(line: 906, column: 5, scope: !3713)
!3850 = !DILocation(line: 907, column: 13, scope: !3713)
!3851 = !DILocation(line: 907, column: 5, scope: !3713)
!3852 = !DILocation(line: 908, column: 13, scope: !3713)
!3853 = !DILocation(line: 908, column: 5, scope: !3713)
!3854 = !DILocation(line: 909, column: 13, scope: !3713)
!3855 = !DILocation(line: 909, column: 5, scope: !3713)
!3856 = !DILocation(line: 910, column: 13, scope: !3713)
!3857 = !DILocation(line: 910, column: 5, scope: !3713)
!3858 = !DILocation(line: 911, column: 12, scope: !3713)
!3859 = !DILocation(line: 911, column: 5, scope: !3713)
!3860 = distinct !DISubprogram(name: "test_gf2m_modsolvequad", scope: !10, file: !10, line: 914, type: !39, isLocal: true, isDefinition: true, scopeLine: 915, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!3861 = !DILocalVariable(name: "a", scope: !3860, file: !10, line: 916, type: !187)
!3862 = !DILocation(line: 916, column: 13, scope: !3860)
!3863 = !DILocalVariable(name: "b", scope: !3860, file: !10, line: 916, type: !2841)
!3864 = !DILocation(line: 916, column: 23, scope: !3860)
!3865 = !DILocalVariable(name: "c", scope: !3860, file: !10, line: 916, type: !187)
!3866 = !DILocation(line: 916, column: 44, scope: !3860)
!3867 = !DILocalVariable(name: "d", scope: !3860, file: !10, line: 916, type: !187)
!3868 = !DILocation(line: 916, column: 55, scope: !3860)
!3869 = !DILocalVariable(name: "e", scope: !3860, file: !10, line: 917, type: !187)
!3870 = !DILocation(line: 917, column: 13, scope: !3860)
!3871 = !DILocalVariable(name: "i", scope: !3860, file: !10, line: 918, type: !4)
!3872 = !DILocation(line: 918, column: 9, scope: !3860)
!3873 = !DILocalVariable(name: "j", scope: !3860, file: !10, line: 918, type: !4)
!3874 = !DILocation(line: 918, column: 12, scope: !3860)
!3875 = !DILocalVariable(name: "s", scope: !3860, file: !10, line: 918, type: !4)
!3876 = !DILocation(line: 918, column: 15, scope: !3860)
!3877 = !DILocalVariable(name: "t", scope: !3860, file: !10, line: 918, type: !4)
!3878 = !DILocation(line: 918, column: 22, scope: !3860)
!3879 = !DILocalVariable(name: "st", scope: !3860, file: !10, line: 918, type: !4)
!3880 = !DILocation(line: 918, column: 25, scope: !3860)
!3881 = !DILocation(line: 920, column: 61, scope: !3882)
!3882 = distinct !DILexicalBlock(scope: !3860, file: !10, line: 920, column: 9)
!3883 = !DILocation(line: 920, column: 59, scope: !3882)
!3884 = !DILocation(line: 920, column: 57, scope: !3882)
!3885 = !DILocation(line: 920, column: 10, scope: !3886)
!3886 = !DILexicalBlockFile(scope: !3882, file: !10, discriminator: 2)
!3887 = !DILocation(line: 920, column: 10, scope: !3882)
!3888 = !DILocation(line: 921, column: 13, scope: !3882)
!3889 = !DILocation(line: 921, column: 74, scope: !3890)
!3890 = !DILexicalBlockFile(scope: !3882, file: !10, discriminator: 1)
!3891 = !DILocation(line: 921, column: 67, scope: !3890)
!3892 = !DILocation(line: 921, column: 72, scope: !3890)
!3893 = !DILocation(line: 921, column: 17, scope: !3894)
!3894 = !DILexicalBlockFile(scope: !3890, file: !10, discriminator: 2)
!3895 = !DILocation(line: 921, column: 17, scope: !3890)
!3896 = !DILocation(line: 922, column: 13, scope: !3882)
!3897 = !DILocation(line: 922, column: 74, scope: !3890)
!3898 = !DILocation(line: 922, column: 67, scope: !3890)
!3899 = !DILocation(line: 922, column: 72, scope: !3890)
!3900 = !DILocation(line: 922, column: 17, scope: !3894)
!3901 = !DILocation(line: 922, column: 17, scope: !3890)
!3902 = !DILocation(line: 923, column: 13, scope: !3882)
!3903 = !DILocation(line: 923, column: 68, scope: !3890)
!3904 = !DILocation(line: 923, column: 66, scope: !3890)
!3905 = !DILocation(line: 923, column: 64, scope: !3890)
!3906 = !DILocation(line: 923, column: 17, scope: !3894)
!3907 = !DILocation(line: 923, column: 17, scope: !3890)
!3908 = !DILocation(line: 924, column: 13, scope: !3882)
!3909 = !DILocation(line: 924, column: 68, scope: !3890)
!3910 = !DILocation(line: 924, column: 66, scope: !3890)
!3911 = !DILocation(line: 924, column: 64, scope: !3890)
!3912 = !DILocation(line: 924, column: 17, scope: !3894)
!3913 = !DILocation(line: 924, column: 17, scope: !3890)
!3914 = !DILocation(line: 925, column: 13, scope: !3882)
!3915 = !DILocation(line: 925, column: 68, scope: !3890)
!3916 = !DILocation(line: 925, column: 66, scope: !3890)
!3917 = !DILocation(line: 925, column: 64, scope: !3890)
!3918 = !DILocation(line: 925, column: 17, scope: !3894)
!3919 = !DILocation(line: 925, column: 17, scope: !3890)
!3920 = !DILocation(line: 920, column: 9, scope: !3921)
!3921 = !DILexicalBlockFile(scope: !3860, file: !10, discriminator: 1)
!3922 = !DILocation(line: 926, column: 9, scope: !3882)
!3923 = !DILocation(line: 928, column: 26, scope: !3860)
!3924 = !DILocation(line: 928, column: 5, scope: !3860)
!3925 = !DILocation(line: 929, column: 26, scope: !3860)
!3926 = !DILocation(line: 929, column: 5, scope: !3860)
!3927 = !DILocation(line: 931, column: 12, scope: !3928)
!3928 = distinct !DILexicalBlock(scope: !3860, file: !10, line: 931, column: 5)
!3929 = !DILocation(line: 931, column: 10, scope: !3928)
!3930 = !DILocation(line: 931, column: 17, scope: !3931)
!3931 = !DILexicalBlockFile(scope: !3932, file: !10, discriminator: 1)
!3932 = distinct !DILexicalBlock(scope: !3928, file: !10, line: 931, column: 5)
!3933 = !DILocation(line: 931, column: 19, scope: !3931)
!3934 = !DILocation(line: 931, column: 5, scope: !3931)
!3935 = !DILocation(line: 932, column: 24, scope: !3936)
!3936 = distinct !DILexicalBlock(scope: !3932, file: !10, line: 931, column: 32)
!3937 = !DILocation(line: 932, column: 9, scope: !3936)
!3938 = !DILocation(line: 933, column: 16, scope: !3939)
!3939 = distinct !DILexicalBlock(scope: !3936, file: !10, line: 933, column: 9)
!3940 = !DILocation(line: 933, column: 14, scope: !3939)
!3941 = !DILocation(line: 933, column: 21, scope: !3942)
!3942 = !DILexicalBlockFile(scope: !3943, file: !10, discriminator: 1)
!3943 = distinct !DILexicalBlock(scope: !3939, file: !10, line: 933, column: 9)
!3944 = !DILocation(line: 933, column: 23, scope: !3942)
!3945 = !DILocation(line: 933, column: 9, scope: !3942)
!3946 = !DILocation(line: 934, column: 40, scope: !3947)
!3947 = distinct !DILexicalBlock(scope: !3943, file: !10, line: 933, column: 33)
!3948 = !DILocation(line: 934, column: 43, scope: !3947)
!3949 = !DILocation(line: 934, column: 48, scope: !3947)
!3950 = !DILocation(line: 934, column: 46, scope: !3947)
!3951 = !DILocation(line: 934, column: 52, scope: !3947)
!3952 = !DILocation(line: 934, column: 17, scope: !3947)
!3953 = !DILocation(line: 934, column: 15, scope: !3947)
!3954 = !DILocation(line: 935, column: 17, scope: !3955)
!3955 = distinct !DILexicalBlock(scope: !3947, file: !10, line: 935, column: 17)
!3956 = !DILocation(line: 935, column: 17, scope: !3947)
!3957 = !DILocation(line: 936, column: 18, scope: !3958)
!3958 = distinct !DILexicalBlock(scope: !3955, file: !10, line: 935, column: 20)
!3959 = !DILocation(line: 937, column: 33, scope: !3958)
!3960 = !DILocation(line: 937, column: 36, scope: !3958)
!3961 = !DILocation(line: 937, column: 41, scope: !3958)
!3962 = !DILocation(line: 937, column: 39, scope: !3958)
!3963 = !DILocation(line: 937, column: 45, scope: !3958)
!3964 = !DILocation(line: 937, column: 17, scope: !3958)
!3965 = !DILocation(line: 938, column: 29, scope: !3958)
!3966 = !DILocation(line: 938, column: 32, scope: !3958)
!3967 = !DILocation(line: 938, column: 35, scope: !3958)
!3968 = !DILocation(line: 938, column: 17, scope: !3958)
!3969 = !DILocation(line: 939, column: 29, scope: !3958)
!3970 = !DILocation(line: 939, column: 32, scope: !3958)
!3971 = !DILocation(line: 939, column: 37, scope: !3958)
!3972 = !DILocation(line: 939, column: 35, scope: !3958)
!3973 = !DILocation(line: 939, column: 17, scope: !3958)
!3974 = !DILocation(line: 940, column: 29, scope: !3958)
!3975 = !DILocation(line: 940, column: 32, scope: !3958)
!3976 = !DILocation(line: 940, column: 35, scope: !3958)
!3977 = !DILocation(line: 940, column: 17, scope: !3958)
!3978 = !DILocation(line: 944, column: 65, scope: !3979)
!3979 = distinct !DILexicalBlock(scope: !3958, file: !10, line: 944, column: 21)
!3980 = !DILocation(line: 944, column: 22, scope: !3979)
!3981 = !DILocation(line: 944, column: 21, scope: !3958)
!3982 = !DILocation(line: 945, column: 21, scope: !3979)
!3983 = !DILocation(line: 946, column: 13, scope: !3958)
!3984 = !DILocation(line: 947, column: 9, scope: !3947)
!3985 = !DILocation(line: 933, column: 29, scope: !3986)
!3986 = !DILexicalBlockFile(scope: !3943, file: !10, discriminator: 2)
!3987 = !DILocation(line: 933, column: 9, scope: !3986)
!3988 = distinct !{!3988, !3989}
!3989 = !DILocation(line: 933, column: 9, scope: !3936)
!3990 = !DILocation(line: 948, column: 5, scope: !3936)
!3991 = !DILocation(line: 931, column: 28, scope: !3992)
!3992 = !DILexicalBlockFile(scope: !3932, file: !10, discriminator: 2)
!3993 = !DILocation(line: 931, column: 5, scope: !3992)
!3994 = distinct !{!3994, !3995}
!3995 = !DILocation(line: 931, column: 5, scope: !3860)
!3996 = !DILocation(line: 949, column: 54, scope: !3997)
!3997 = distinct !DILexicalBlock(scope: !3860, file: !10, line: 949, column: 9)
!3998 = !DILocation(line: 949, column: 10, scope: !3997)
!3999 = !DILocation(line: 949, column: 9, scope: !3860)
!4000 = !DILocation(line: 950, column: 9, scope: !4001)
!4001 = distinct !DILexicalBlock(scope: !3997, file: !10, line: 949, column: 61)
!4002 = !DILocation(line: 951, column: 9, scope: !4001)
!4003 = !DILocation(line: 953, column: 8, scope: !3860)
!4004 = !DILocation(line: 953, column: 5, scope: !3860)
!4005 = !DILocation(line: 955, column: 13, scope: !3860)
!4006 = !DILocation(line: 955, column: 5, scope: !3860)
!4007 = !DILocation(line: 956, column: 13, scope: !3860)
!4008 = !DILocation(line: 956, column: 5, scope: !3860)
!4009 = !DILocation(line: 957, column: 13, scope: !3860)
!4010 = !DILocation(line: 957, column: 5, scope: !3860)
!4011 = !DILocation(line: 958, column: 13, scope: !3860)
!4012 = !DILocation(line: 958, column: 5, scope: !3860)
!4013 = !DILocation(line: 959, column: 13, scope: !3860)
!4014 = !DILocation(line: 959, column: 5, scope: !3860)
!4015 = !DILocation(line: 960, column: 13, scope: !3860)
!4016 = !DILocation(line: 960, column: 5, scope: !3860)
!4017 = !DILocation(line: 961, column: 12, scope: !3860)
!4018 = !DILocation(line: 961, column: 5, scope: !3860)
!4019 = distinct !DISubprogram(name: "test_is_prime", scope: !10, file: !10, line: 2158, type: !1704, isLocal: true, isDefinition: true, scopeLine: 2159, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4020 = !DILocalVariable(name: "i", arg: 1, scope: !4019, file: !10, line: 2158, type: !4)
!4021 = !DILocation(line: 2158, column: 30, scope: !4019)
!4022 = !DILocalVariable(name: "ret", scope: !4019, file: !10, line: 2160, type: !4)
!4023 = !DILocation(line: 2160, column: 9, scope: !4019)
!4024 = !DILocalVariable(name: "r", scope: !4019, file: !10, line: 2161, type: !187)
!4025 = !DILocation(line: 2161, column: 13, scope: !4019)
!4026 = !DILocalVariable(name: "trial", scope: !4019, file: !10, line: 2162, type: !4)
!4027 = !DILocation(line: 2162, column: 9, scope: !4019)
!4028 = !DILocation(line: 2164, column: 62, scope: !4029)
!4029 = distinct !DILexicalBlock(scope: !4019, file: !10, line: 2164, column: 9)
!4030 = !DILocation(line: 2164, column: 60, scope: !4029)
!4031 = !DILocation(line: 2164, column: 58, scope: !4029)
!4032 = !DILocation(line: 2164, column: 10, scope: !4033)
!4033 = !DILexicalBlockFile(scope: !4029, file: !10, discriminator: 1)
!4034 = !DILocation(line: 2164, column: 10, scope: !4029)
!4035 = !DILocation(line: 2164, column: 9, scope: !4019)
!4036 = !DILocation(line: 2165, column: 9, scope: !4029)
!4037 = !DILocation(line: 2167, column: 16, scope: !4038)
!4038 = distinct !DILexicalBlock(scope: !4019, file: !10, line: 2167, column: 5)
!4039 = !DILocation(line: 2167, column: 10, scope: !4038)
!4040 = !DILocation(line: 2167, column: 21, scope: !4041)
!4041 = !DILexicalBlockFile(scope: !4042, file: !10, discriminator: 1)
!4042 = distinct !DILexicalBlock(scope: !4038, file: !10, line: 2167, column: 5)
!4043 = !DILocation(line: 2167, column: 27, scope: !4041)
!4044 = !DILocation(line: 2167, column: 5, scope: !4041)
!4045 = !DILocation(line: 2168, column: 89, scope: !4046)
!4046 = distinct !DILexicalBlock(scope: !4047, file: !10, line: 2168, column: 13)
!4047 = distinct !DILexicalBlock(scope: !4042, file: !10, line: 2167, column: 42)
!4048 = !DILocation(line: 2168, column: 99, scope: !4046)
!4049 = !DILocation(line: 2168, column: 92, scope: !4046)
!4050 = !DILocation(line: 2168, column: 77, scope: !4046)
!4051 = !DILocation(line: 2168, column: 104, scope: !4046)
!4052 = !DILocation(line: 2168, column: 14, scope: !4053)
!4053 = !DILexicalBlockFile(scope: !4046, file: !10, discriminator: 2)
!4054 = !DILocation(line: 2168, column: 14, scope: !4046)
!4055 = !DILocation(line: 2169, column: 17, scope: !4046)
!4056 = !DILocation(line: 2169, column: 103, scope: !4057)
!4057 = !DILexicalBlockFile(scope: !4046, file: !10, discriminator: 1)
!4058 = !DILocation(line: 2169, column: 109, scope: !4057)
!4059 = !DILocation(line: 2169, column: 114, scope: !4057)
!4060 = !DILocation(line: 2169, column: 79, scope: !4057)
!4061 = !DILocation(line: 2169, column: 21, scope: !4062)
!4062 = !DILexicalBlockFile(scope: !4057, file: !10, discriminator: 2)
!4063 = !DILocation(line: 2169, column: 21, scope: !4057)
!4064 = !DILocation(line: 2168, column: 13, scope: !4065)
!4065 = !DILexicalBlockFile(scope: !4047, file: !10, discriminator: 1)
!4066 = !DILocation(line: 2171, column: 13, scope: !4046)
!4067 = !DILocation(line: 2172, column: 5, scope: !4047)
!4068 = !DILocation(line: 2167, column: 33, scope: !4069)
!4069 = !DILexicalBlockFile(scope: !4042, file: !10, discriminator: 2)
!4070 = !DILocation(line: 2167, column: 5, scope: !4069)
!4071 = distinct !{!4071, !4072}
!4072 = !DILocation(line: 2167, column: 5, scope: !4019)
!4073 = !DILocation(line: 2174, column: 9, scope: !4019)
!4074 = !DILocation(line: 2174, column: 5, scope: !4019)
!4075 = !DILocation(line: 2176, column: 13, scope: !4019)
!4076 = !DILocation(line: 2176, column: 5, scope: !4019)
!4077 = !DILocation(line: 2177, column: 12, scope: !4019)
!4078 = !DILocation(line: 2177, column: 5, scope: !4019)
!4079 = distinct !DISubprogram(name: "test_not_prime", scope: !10, file: !10, line: 2182, type: !1704, isLocal: true, isDefinition: true, scopeLine: 2183, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4080 = !DILocalVariable(name: "i", arg: 1, scope: !4079, file: !10, line: 2182, type: !4)
!4081 = !DILocation(line: 2182, column: 31, scope: !4079)
!4082 = !DILocalVariable(name: "ret", scope: !4079, file: !10, line: 2184, type: !4)
!4083 = !DILocation(line: 2184, column: 9, scope: !4079)
!4084 = !DILocalVariable(name: "r", scope: !4079, file: !10, line: 2185, type: !187)
!4085 = !DILocation(line: 2185, column: 13, scope: !4079)
!4086 = !DILocalVariable(name: "trial", scope: !4079, file: !10, line: 2186, type: !4)
!4087 = !DILocation(line: 2186, column: 9, scope: !4079)
!4088 = !DILocation(line: 2188, column: 62, scope: !4089)
!4089 = distinct !DILexicalBlock(scope: !4079, file: !10, line: 2188, column: 9)
!4090 = !DILocation(line: 2188, column: 60, scope: !4089)
!4091 = !DILocation(line: 2188, column: 58, scope: !4089)
!4092 = !DILocation(line: 2188, column: 10, scope: !4093)
!4093 = !DILexicalBlockFile(scope: !4089, file: !10, discriminator: 1)
!4094 = !DILocation(line: 2188, column: 10, scope: !4089)
!4095 = !DILocation(line: 2188, column: 9, scope: !4079)
!4096 = !DILocation(line: 2189, column: 9, scope: !4089)
!4097 = !DILocation(line: 2191, column: 16, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !4079, file: !10, line: 2191, column: 5)
!4099 = !DILocation(line: 2191, column: 10, scope: !4098)
!4100 = !DILocation(line: 2191, column: 21, scope: !4101)
!4101 = !DILexicalBlockFile(scope: !4102, file: !10, discriminator: 1)
!4102 = distinct !DILexicalBlock(scope: !4098, file: !10, line: 2191, column: 5)
!4103 = !DILocation(line: 2191, column: 27, scope: !4101)
!4104 = !DILocation(line: 2191, column: 5, scope: !4101)
!4105 = !DILocation(line: 2192, column: 93, scope: !4106)
!4106 = distinct !DILexicalBlock(scope: !4107, file: !10, line: 2192, column: 13)
!4107 = distinct !DILexicalBlock(scope: !4102, file: !10, line: 2191, column: 42)
!4108 = !DILocation(line: 2192, column: 107, scope: !4106)
!4109 = !DILocation(line: 2192, column: 96, scope: !4106)
!4110 = !DILocation(line: 2192, column: 81, scope: !4106)
!4111 = !DILocation(line: 2192, column: 112, scope: !4106)
!4112 = !DILocation(line: 2192, column: 14, scope: !4113)
!4113 = !DILexicalBlockFile(scope: !4106, file: !10, discriminator: 2)
!4114 = !DILocation(line: 2192, column: 14, scope: !4106)
!4115 = !DILocation(line: 2193, column: 17, scope: !4106)
!4116 = !DILocation(line: 2193, column: 131, scope: !4117)
!4117 = !DILexicalBlockFile(scope: !4106, file: !10, discriminator: 1)
!4118 = !DILocation(line: 2193, column: 137, scope: !4117)
!4119 = !DILocation(line: 2193, column: 142, scope: !4117)
!4120 = !DILocation(line: 2193, column: 107, scope: !4117)
!4121 = !DILocation(line: 2193, column: 23, scope: !4117)
!4122 = !DILocation(line: 2193, column: 21, scope: !4123)
!4123 = !DILexicalBlockFile(scope: !4117, file: !10, discriminator: 2)
!4124 = !DILocation(line: 2193, column: 21, scope: !4117)
!4125 = !DILocation(line: 2192, column: 13, scope: !4126)
!4126 = !DILexicalBlockFile(scope: !4107, file: !10, discriminator: 1)
!4127 = !DILocation(line: 2194, column: 13, scope: !4106)
!4128 = !DILocation(line: 2195, column: 5, scope: !4107)
!4129 = !DILocation(line: 2191, column: 33, scope: !4130)
!4130 = !DILexicalBlockFile(scope: !4102, file: !10, discriminator: 2)
!4131 = !DILocation(line: 2191, column: 5, scope: !4130)
!4132 = distinct !{!4132, !4133}
!4133 = !DILocation(line: 2191, column: 5, scope: !4079)
!4134 = !DILocation(line: 2197, column: 9, scope: !4079)
!4135 = !DILocation(line: 2197, column: 5, scope: !4079)
!4136 = !DILocation(line: 2199, column: 13, scope: !4079)
!4137 = !DILocation(line: 2199, column: 5, scope: !4079)
!4138 = !DILocation(line: 2200, column: 12, scope: !4079)
!4139 = !DILocation(line: 2200, column: 5, scope: !4079)
!4140 = distinct !DISubprogram(name: "run_file_tests", scope: !10, file: !10, line: 2235, type: !1704, isLocal: true, isDefinition: true, scopeLine: 2236, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4141 = !DILocalVariable(name: "i", arg: 1, scope: !4140, file: !10, line: 2235, type: !4)
!4142 = !DILocation(line: 2235, column: 31, scope: !4140)
!4143 = !DILocalVariable(name: "s", scope: !4140, file: !10, line: 2237, type: !87)
!4144 = !DILocation(line: 2237, column: 13, scope: !4140)
!4145 = !DILocalVariable(name: "testfile", scope: !4140, file: !10, line: 2238, type: !109)
!4146 = !DILocation(line: 2238, column: 11, scope: !4140)
!4147 = !DILocation(line: 2238, column: 40, scope: !4140)
!4148 = !DILocation(line: 2238, column: 22, scope: !4140)
!4149 = !DILocalVariable(name: "c", scope: !4140, file: !10, line: 2239, type: !4)
!4150 = !DILocation(line: 2239, column: 9, scope: !4140)
!4151 = !DILocation(line: 2241, column: 80, scope: !4152)
!4152 = distinct !DILexicalBlock(scope: !4140, file: !10, line: 2241, column: 9)
!4153 = !DILocation(line: 2241, column: 78, scope: !4152)
!4154 = !DILocation(line: 2241, column: 76, scope: !4152)
!4155 = !DILocation(line: 2241, column: 10, scope: !4156)
!4156 = !DILexicalBlockFile(scope: !4152, file: !10, discriminator: 1)
!4157 = !DILocation(line: 2241, column: 10, scope: !4152)
!4158 = !DILocation(line: 2241, column: 9, scope: !4140)
!4159 = !DILocation(line: 2242, column: 9, scope: !4152)
!4160 = !DILocation(line: 2243, column: 26, scope: !4161)
!4161 = distinct !DILexicalBlock(scope: !4140, file: !10, line: 2243, column: 9)
!4162 = !DILocation(line: 2243, column: 29, scope: !4161)
!4163 = !DILocation(line: 2243, column: 10, scope: !4161)
!4164 = !DILocation(line: 2243, column: 9, scope: !4140)
!4165 = !DILocation(line: 2244, column: 21, scope: !4166)
!4166 = distinct !DILexicalBlock(scope: !4161, file: !10, line: 2243, column: 40)
!4167 = !DILocation(line: 2244, column: 9, scope: !4166)
!4168 = !DILocation(line: 2245, column: 9, scope: !4166)
!4169 = !DILocation(line: 2249, column: 5, scope: !4140)
!4170 = !DILocation(line: 2249, column: 27, scope: !4171)
!4171 = !DILexicalBlockFile(scope: !4140, file: !10, discriminator: 1)
!4172 = !DILocation(line: 2249, column: 30, scope: !4171)
!4173 = !DILocation(line: 2249, column: 18, scope: !4171)
!4174 = !DILocation(line: 2249, column: 13, scope: !4171)
!4175 = !DILocation(line: 2249, column: 14, scope: !4171)
!4176 = !DILocation(line: 2249, column: 33, scope: !4177)
!4177 = !DILexicalBlockFile(scope: !4140, file: !10, discriminator: 2)
!4178 = !DILocation(line: 2249, column: 17, scope: !4177)
!4179 = !DILocation(line: 2249, column: 14, scope: !4177)
!4180 = !DILocation(line: 2249, column: 5, scope: !4181)
!4181 = !DILexicalBlockFile(scope: !4140, file: !10, discriminator: 3)
!4182 = !DILocation(line: 2250, column: 13, scope: !4183)
!4183 = distinct !DILexicalBlock(scope: !4184, file: !10, line: 2250, column: 13)
!4184 = distinct !DILexicalBlock(scope: !4140, file: !10, line: 2249, column: 37)
!4185 = !DILocation(line: 2250, column: 16, scope: !4183)
!4186 = !DILocation(line: 2250, column: 25, scope: !4183)
!4187 = !DILocation(line: 2250, column: 13, scope: !4184)
!4188 = !DILocation(line: 2251, column: 13, scope: !4183)
!4189 = distinct !{!4189, !4169}
!4190 = !DILocation(line: 2252, column: 28, scope: !4191)
!4191 = distinct !DILexicalBlock(scope: !4184, file: !10, line: 2252, column: 13)
!4192 = !DILocation(line: 2252, column: 14, scope: !4191)
!4193 = !DILocation(line: 2252, column: 13, scope: !4184)
!4194 = !DILocation(line: 2253, column: 13, scope: !4191)
!4195 = !DILocation(line: 2253, column: 16, scope: !4191)
!4196 = !DILocation(line: 2253, column: 22, scope: !4191)
!4197 = !DILocation(line: 2254, column: 9, scope: !4184)
!4198 = !DILocation(line: 2254, column: 12, scope: !4184)
!4199 = !DILocation(line: 2254, column: 20, scope: !4184)
!4200 = !DILocation(line: 2255, column: 26, scope: !4184)
!4201 = !DILocation(line: 2255, column: 9, scope: !4184)
!4202 = !DILocation(line: 2249, column: 5, scope: !4203)
!4203 = !DILexicalBlockFile(scope: !4140, file: !10, discriminator: 4)
!4204 = !DILocation(line: 2257, column: 19, scope: !4140)
!4205 = !DILocation(line: 2257, column: 5, scope: !4140)
!4206 = !DILocation(line: 2258, column: 9, scope: !4140)
!4207 = !DILocation(line: 2258, column: 12, scope: !4140)
!4208 = !DILocation(line: 2258, column: 7, scope: !4140)
!4209 = !DILocation(line: 2259, column: 17, scope: !4140)
!4210 = !DILocation(line: 2259, column: 5, scope: !4140)
!4211 = !DILocation(line: 2261, column: 12, scope: !4140)
!4212 = !DILocation(line: 2261, column: 14, scope: !4140)
!4213 = !DILocation(line: 2261, column: 5, scope: !4140)
!4214 = !DILocation(line: 2262, column: 1, scope: !4140)
!4215 = distinct !DISubprogram(name: "cleanup_tests", scope: !10, file: !10, line: 2320, type: !4216, isLocal: false, isDefinition: true, scopeLine: 2321, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4216 = !DISubroutineType(types: !4217)
!4217 = !{null}
!4218 = !DILocation(line: 2322, column: 17, scope: !4215)
!4219 = !DILocation(line: 2322, column: 5, scope: !4215)
!4220 = !DILocation(line: 2323, column: 1, scope: !4215)
!4221 = !DILocation(line: 150, column: 21, scope: !38)
!4222 = !DILocation(line: 150, column: 25, scope: !38)
!4223 = !DILocation(line: 150, column: 12, scope: !38)
!4224 = !DILocation(line: 150, column: 5, scope: !38)
!4225 = distinct !DISubprogram(name: "parse_bigBN", scope: !10, file: !10, line: 73, type: !4226, isLocal: true, isDefinition: true, scopeLine: 74, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4226 = !DISubroutineType(types: !4227)
!4227 = !{!4, !4228, !4229}
!4228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !187, size: 64, align: 64)
!4229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !20, size: 64, align: 64)
!4230 = !DILocalVariable(name: "out", arg: 1, scope: !4225, file: !10, line: 73, type: !4228)
!4231 = !DILocation(line: 73, column: 33, scope: !4225)
!4232 = !DILocalVariable(name: "bn_strings", arg: 2, scope: !4225, file: !10, line: 73, type: !4229)
!4233 = !DILocation(line: 73, column: 50, scope: !4225)
!4234 = !DILocalVariable(name: "bigstring", scope: !4225, file: !10, line: 75, type: !109)
!4235 = !DILocation(line: 75, column: 11, scope: !4225)
!4236 = !DILocation(line: 75, column: 36, scope: !4225)
!4237 = !DILocation(line: 75, column: 23, scope: !4225)
!4238 = !DILocalVariable(name: "ret", scope: !4225, file: !10, line: 76, type: !4)
!4239 = !DILocation(line: 76, column: 9, scope: !4225)
!4240 = !DILocation(line: 76, column: 25, scope: !4225)
!4241 = !DILocation(line: 76, column: 30, scope: !4225)
!4242 = !DILocation(line: 76, column: 15, scope: !4225)
!4243 = !DILocation(line: 78, column: 17, scope: !4225)
!4244 = !DILocation(line: 78, column: 5, scope: !4225)
!4245 = !DILocation(line: 79, column: 12, scope: !4225)
!4246 = !DILocation(line: 79, column: 5, scope: !4225)
!4247 = distinct !DISubprogram(name: "parsedecBN", scope: !10, file: !10, line: 91, type: !4248, isLocal: true, isDefinition: true, scopeLine: 92, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4248 = !DISubroutineType(types: !4249)
!4249 = !{!4, !4228, !20}
!4250 = !DILocalVariable(name: "out", arg: 1, scope: !4247, file: !10, line: 91, type: !4228)
!4251 = !DILocation(line: 91, column: 32, scope: !4247)
!4252 = !DILocalVariable(name: "in", arg: 2, scope: !4247, file: !10, line: 91, type: !20)
!4253 = !DILocation(line: 91, column: 49, scope: !4247)
!4254 = !DILocation(line: 93, column: 6, scope: !4247)
!4255 = !DILocation(line: 93, column: 10, scope: !4247)
!4256 = !DILocation(line: 94, column: 22, scope: !4247)
!4257 = !DILocation(line: 94, column: 27, scope: !4247)
!4258 = !DILocation(line: 94, column: 12, scope: !4247)
!4259 = !DILocation(line: 94, column: 5, scope: !4247)
!4260 = distinct !DISubprogram(name: "parseBN", scope: !10, file: !10, line: 85, type: !4248, isLocal: true, isDefinition: true, scopeLine: 86, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4261 = !DILocalVariable(name: "out", arg: 1, scope: !4260, file: !10, line: 85, type: !4228)
!4262 = !DILocation(line: 85, column: 29, scope: !4260)
!4263 = !DILocalVariable(name: "in", arg: 2, scope: !4260, file: !10, line: 85, type: !20)
!4264 = !DILocation(line: 85, column: 46, scope: !4260)
!4265 = !DILocation(line: 87, column: 6, scope: !4260)
!4266 = !DILocation(line: 87, column: 10, scope: !4260)
!4267 = !DILocation(line: 88, column: 22, scope: !4260)
!4268 = !DILocation(line: 88, column: 27, scope: !4260)
!4269 = !DILocation(line: 88, column: 12, scope: !4260)
!4270 = !DILocation(line: 88, column: 5, scope: !4260)
!4271 = distinct !DISubprogram(name: "equalBN", scope: !10, file: !10, line: 131, type: !4272, isLocal: true, isDefinition: true, scopeLine: 132, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4272 = !DISubroutineType(types: !4273)
!4273 = !{!4, !20, !4274, !4274}
!4274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4275, size: 64, align: 64)
!4275 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !188)
!4276 = !DILocalVariable(name: "op", arg: 1, scope: !4271, file: !10, line: 131, type: !20)
!4277 = !DILocation(line: 131, column: 32, scope: !4271)
!4278 = !DILocalVariable(name: "expected", arg: 2, scope: !4271, file: !10, line: 131, type: !4274)
!4279 = !DILocation(line: 131, column: 50, scope: !4271)
!4280 = !DILocalVariable(name: "actual", arg: 3, scope: !4271, file: !10, line: 131, type: !4274)
!4281 = !DILocation(line: 131, column: 74, scope: !4271)
!4282 = !DILocation(line: 133, column: 16, scope: !4283)
!4283 = distinct !DILexicalBlock(scope: !4271, file: !10, line: 133, column: 9)
!4284 = !DILocation(line: 133, column: 26, scope: !4283)
!4285 = !DILocation(line: 133, column: 9, scope: !4283)
!4286 = !DILocation(line: 133, column: 34, scope: !4283)
!4287 = !DILocation(line: 133, column: 9, scope: !4271)
!4288 = !DILocation(line: 134, column: 9, scope: !4283)
!4289 = !DILocation(line: 136, column: 61, scope: !4271)
!4290 = !DILocation(line: 136, column: 5, scope: !4271)
!4291 = !DILocation(line: 137, column: 60, scope: !4271)
!4292 = !DILocation(line: 137, column: 70, scope: !4271)
!4293 = !DILocation(line: 137, column: 5, scope: !4271)
!4294 = !DILocation(line: 138, column: 5, scope: !4271)
!4295 = !DILocation(line: 139, column: 1, scope: !4271)
!4296 = !DILocalVariable(name: "s", arg: 1, scope: !84, file: !10, line: 2203, type: !87)
!4297 = !DILocation(line: 2203, column: 34, scope: !84)
!4298 = !DILocalVariable(name: "numtests", scope: !84, file: !10, line: 2218, type: !4)
!4299 = !DILocation(line: 2218, column: 9, scope: !84)
!4300 = !DILocalVariable(name: "tp", scope: !84, file: !10, line: 2219, type: !4301)
!4301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !119, size: 64, align: 64)
!4302 = !DILocation(line: 2219, column: 21, scope: !84)
!4303 = !DILocation(line: 2221, column: 5, scope: !84)
!4304 = !DILocation(line: 2221, column: 13, scope: !4305)
!4305 = !DILexicalBlockFile(scope: !4306, file: !10, discriminator: 1)
!4306 = distinct !DILexicalBlock(scope: !4307, file: !10, line: 2221, column: 5)
!4307 = distinct !DILexicalBlock(scope: !84, file: !10, line: 2221, column: 5)
!4308 = !DILocation(line: 2221, column: 24, scope: !4305)
!4309 = !DILocation(line: 2221, column: 5, scope: !4305)
!4310 = !DILocation(line: 2222, column: 22, scope: !4311)
!4311 = distinct !DILexicalBlock(scope: !4312, file: !10, line: 2222, column: 13)
!4312 = distinct !DILexicalBlock(scope: !4306, file: !10, line: 2221, column: 36)
!4313 = !DILocation(line: 2222, column: 25, scope: !4311)
!4314 = !DILocation(line: 2222, column: 29, scope: !4311)
!4315 = !DILocation(line: 2222, column: 13, scope: !4311)
!4316 = !DILocation(line: 2222, column: 35, scope: !4311)
!4317 = !DILocation(line: 2222, column: 13, scope: !4312)
!4318 = !DILocation(line: 2223, column: 18, scope: !4319)
!4319 = distinct !DILexicalBlock(scope: !4320, file: !10, line: 2223, column: 17)
!4320 = distinct !DILexicalBlock(scope: !4311, file: !10, line: 2222, column: 43)
!4321 = !DILocation(line: 2223, column: 22, scope: !4319)
!4322 = !DILocation(line: 2223, column: 27, scope: !4319)
!4323 = !DILocation(line: 2223, column: 17, scope: !4320)
!4324 = !DILocation(line: 2224, column: 44, scope: !4325)
!4325 = distinct !DILexicalBlock(scope: !4319, file: !10, line: 2223, column: 31)
!4326 = !DILocation(line: 2224, column: 47, scope: !4325)
!4327 = !DILocation(line: 2224, column: 58, scope: !4325)
!4328 = !DILocation(line: 2224, column: 61, scope: !4325)
!4329 = !DILocation(line: 2224, column: 68, scope: !4325)
!4330 = !DILocation(line: 2224, column: 72, scope: !4325)
!4331 = !DILocation(line: 2224, column: 17, scope: !4325)
!4332 = !DILocation(line: 2226, column: 17, scope: !4325)
!4333 = !DILocation(line: 2228, column: 13, scope: !4320)
!4334 = !DILocation(line: 2230, column: 5, scope: !4312)
!4335 = !DILocation(line: 2221, column: 32, scope: !4336)
!4336 = !DILexicalBlockFile(scope: !4306, file: !10, discriminator: 2)
!4337 = !DILocation(line: 2221, column: 5, scope: !4336)
!4338 = distinct !{!4338, !4303}
!4339 = !DILocation(line: 2231, column: 61, scope: !84)
!4340 = !DILocation(line: 2231, column: 64, scope: !84)
!4341 = !DILocation(line: 2231, column: 75, scope: !84)
!4342 = !DILocation(line: 2231, column: 78, scope: !84)
!4343 = !DILocation(line: 2231, column: 5, scope: !84)
!4344 = !DILocation(line: 2232, column: 5, scope: !84)
!4345 = !DILocation(line: 2233, column: 1, scope: !84)
!4346 = distinct !DISubprogram(name: "file_sum", scope: !10, file: !10, line: 1043, type: !85, isLocal: true, isDefinition: true, scopeLine: 1044, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4347 = !DILocalVariable(name: "s", arg: 1, scope: !4346, file: !10, line: 1043, type: !87)
!4348 = !DILocation(line: 1043, column: 29, scope: !4346)
!4349 = !DILocalVariable(name: "a", scope: !4346, file: !10, line: 1045, type: !187)
!4350 = !DILocation(line: 1045, column: 13, scope: !4346)
!4351 = !DILocalVariable(name: "b", scope: !4346, file: !10, line: 1045, type: !187)
!4352 = !DILocation(line: 1045, column: 23, scope: !4346)
!4353 = !DILocalVariable(name: "sum", scope: !4346, file: !10, line: 1045, type: !187)
!4354 = !DILocation(line: 1045, column: 34, scope: !4346)
!4355 = !DILocalVariable(name: "ret", scope: !4346, file: !10, line: 1045, type: !187)
!4356 = !DILocation(line: 1045, column: 47, scope: !4346)
!4357 = !DILocalVariable(name: "b_word", scope: !4346, file: !10, line: 1046, type: !6)
!4358 = !DILocation(line: 1046, column: 19, scope: !4346)
!4359 = !DILocalVariable(name: "st", scope: !4346, file: !10, line: 1047, type: !4)
!4360 = !DILocation(line: 1047, column: 9, scope: !4346)
!4361 = !DILocation(line: 1049, column: 75, scope: !4362)
!4362 = distinct !DILexicalBlock(scope: !4346, file: !10, line: 1049, column: 9)
!4363 = !DILocation(line: 1049, column: 69, scope: !4362)
!4364 = !DILocation(line: 1049, column: 67, scope: !4362)
!4365 = !DILocation(line: 1049, column: 65, scope: !4362)
!4366 = !DILocation(line: 1049, column: 10, scope: !4367)
!4367 = !DILexicalBlockFile(scope: !4362, file: !10, discriminator: 2)
!4368 = !DILocation(line: 1049, column: 10, scope: !4362)
!4369 = !DILocation(line: 1050, column: 13, scope: !4362)
!4370 = !DILocation(line: 1050, column: 82, scope: !4371)
!4371 = !DILexicalBlockFile(scope: !4362, file: !10, discriminator: 1)
!4372 = !DILocation(line: 1050, column: 76, scope: !4371)
!4373 = !DILocation(line: 1050, column: 74, scope: !4371)
!4374 = !DILocation(line: 1050, column: 72, scope: !4371)
!4375 = !DILocation(line: 1050, column: 17, scope: !4376)
!4376 = !DILexicalBlockFile(scope: !4371, file: !10, discriminator: 2)
!4377 = !DILocation(line: 1050, column: 17, scope: !4371)
!4378 = !DILocation(line: 1051, column: 13, scope: !4362)
!4379 = !DILocation(line: 1051, column: 88, scope: !4371)
!4380 = !DILocation(line: 1051, column: 82, scope: !4371)
!4381 = !DILocation(line: 1051, column: 80, scope: !4371)
!4382 = !DILocation(line: 1051, column: 76, scope: !4371)
!4383 = !DILocation(line: 1051, column: 17, scope: !4376)
!4384 = !DILocation(line: 1051, column: 17, scope: !4371)
!4385 = !DILocation(line: 1052, column: 13, scope: !4362)
!4386 = !DILocation(line: 1052, column: 73, scope: !4371)
!4387 = !DILocation(line: 1052, column: 71, scope: !4371)
!4388 = !DILocation(line: 1052, column: 67, scope: !4371)
!4389 = !DILocation(line: 1052, column: 17, scope: !4376)
!4390 = !DILocation(line: 1052, column: 17, scope: !4371)
!4391 = !DILocation(line: 1049, column: 9, scope: !4392)
!4392 = !DILexicalBlockFile(scope: !4346, file: !10, discriminator: 1)
!4393 = !DILocation(line: 1053, column: 9, scope: !4362)
!4394 = !DILocation(line: 1055, column: 72, scope: !4395)
!4395 = distinct !DILexicalBlock(scope: !4346, file: !10, line: 1055, column: 9)
!4396 = !DILocation(line: 1055, column: 77, scope: !4395)
!4397 = !DILocation(line: 1055, column: 80, scope: !4395)
!4398 = !DILocation(line: 1055, column: 65, scope: !4395)
!4399 = !DILocation(line: 1055, column: 84, scope: !4395)
!4400 = !DILocation(line: 1055, column: 10, scope: !4401)
!4401 = !DILexicalBlockFile(scope: !4395, file: !10, discriminator: 2)
!4402 = !DILocation(line: 1055, column: 10, scope: !4395)
!4403 = !DILocation(line: 1056, column: 13, scope: !4395)
!4404 = !DILocation(line: 1056, column: 34, scope: !4405)
!4405 = !DILexicalBlockFile(scope: !4395, file: !10, discriminator: 1)
!4406 = !DILocation(line: 1056, column: 39, scope: !4405)
!4407 = !DILocation(line: 1056, column: 17, scope: !4405)
!4408 = !DILocation(line: 1057, column: 13, scope: !4395)
!4409 = !DILocation(line: 1057, column: 81, scope: !4405)
!4410 = !DILocation(line: 1057, column: 86, scope: !4405)
!4411 = !DILocation(line: 1057, column: 91, scope: !4405)
!4412 = !DILocation(line: 1057, column: 74, scope: !4405)
!4413 = !DILocation(line: 1057, column: 95, scope: !4405)
!4414 = !DILocation(line: 1057, column: 17, scope: !4415)
!4415 = !DILexicalBlockFile(scope: !4405, file: !10, discriminator: 2)
!4416 = !DILocation(line: 1057, column: 17, scope: !4405)
!4417 = !DILocation(line: 1058, column: 13, scope: !4395)
!4418 = !DILocation(line: 1058, column: 36, scope: !4405)
!4419 = !DILocation(line: 1058, column: 39, scope: !4405)
!4420 = !DILocation(line: 1058, column: 17, scope: !4405)
!4421 = !DILocation(line: 1059, column: 13, scope: !4395)
!4422 = !DILocation(line: 1059, column: 81, scope: !4405)
!4423 = !DILocation(line: 1059, column: 86, scope: !4405)
!4424 = !DILocation(line: 1059, column: 91, scope: !4405)
!4425 = !DILocation(line: 1059, column: 74, scope: !4405)
!4426 = !DILocation(line: 1059, column: 95, scope: !4405)
!4427 = !DILocation(line: 1059, column: 17, scope: !4415)
!4428 = !DILocation(line: 1059, column: 17, scope: !4405)
!4429 = !DILocation(line: 1060, column: 13, scope: !4395)
!4430 = !DILocation(line: 1060, column: 36, scope: !4405)
!4431 = !DILocation(line: 1060, column: 39, scope: !4405)
!4432 = !DILocation(line: 1060, column: 17, scope: !4405)
!4433 = !DILocation(line: 1055, column: 9, scope: !4392)
!4434 = !DILocation(line: 1061, column: 9, scope: !4395)
!4435 = !DILocation(line: 1068, column: 71, scope: !4436)
!4436 = distinct !DILexicalBlock(scope: !4346, file: !10, line: 1068, column: 9)
!4437 = !DILocation(line: 1068, column: 76, scope: !4436)
!4438 = !DILocation(line: 1068, column: 63, scope: !4436)
!4439 = !DILocation(line: 1068, column: 80, scope: !4436)
!4440 = !DILocation(line: 1068, column: 10, scope: !4441)
!4441 = !DILexicalBlockFile(scope: !4436, file: !10, discriminator: 2)
!4442 = !DILocation(line: 1068, column: 10, scope: !4436)
!4443 = !DILocation(line: 1069, column: 13, scope: !4436)
!4444 = !DILocation(line: 1069, column: 81, scope: !4445)
!4445 = !DILexicalBlockFile(scope: !4436, file: !10, discriminator: 1)
!4446 = !DILocation(line: 1069, column: 86, scope: !4445)
!4447 = !DILocation(line: 1069, column: 91, scope: !4445)
!4448 = !DILocation(line: 1069, column: 74, scope: !4445)
!4449 = !DILocation(line: 1069, column: 95, scope: !4445)
!4450 = !DILocation(line: 1069, column: 17, scope: !4451)
!4451 = !DILexicalBlockFile(scope: !4445, file: !10, discriminator: 2)
!4452 = !DILocation(line: 1069, column: 17, scope: !4445)
!4453 = !DILocation(line: 1070, column: 13, scope: !4436)
!4454 = !DILocation(line: 1070, column: 43, scope: !4445)
!4455 = !DILocation(line: 1070, column: 48, scope: !4445)
!4456 = !DILocation(line: 1070, column: 17, scope: !4445)
!4457 = !DILocation(line: 1071, column: 13, scope: !4436)
!4458 = !DILocation(line: 1071, column: 78, scope: !4445)
!4459 = !DILocation(line: 1071, column: 83, scope: !4445)
!4460 = !DILocation(line: 1071, column: 70, scope: !4445)
!4461 = !DILocation(line: 1071, column: 87, scope: !4445)
!4462 = !DILocation(line: 1071, column: 17, scope: !4451)
!4463 = !DILocation(line: 1071, column: 17, scope: !4445)
!4464 = !DILocation(line: 1072, column: 13, scope: !4436)
!4465 = !DILocation(line: 1072, column: 81, scope: !4445)
!4466 = !DILocation(line: 1072, column: 86, scope: !4445)
!4467 = !DILocation(line: 1072, column: 89, scope: !4445)
!4468 = !DILocation(line: 1072, column: 74, scope: !4445)
!4469 = !DILocation(line: 1072, column: 95, scope: !4445)
!4470 = !DILocation(line: 1072, column: 17, scope: !4451)
!4471 = !DILocation(line: 1072, column: 17, scope: !4445)
!4472 = !DILocation(line: 1073, column: 13, scope: !4436)
!4473 = !DILocation(line: 1073, column: 43, scope: !4445)
!4474 = !DILocation(line: 1073, column: 48, scope: !4445)
!4475 = !DILocation(line: 1073, column: 17, scope: !4445)
!4476 = !DILocation(line: 1074, column: 13, scope: !4436)
!4477 = !DILocation(line: 1074, column: 80, scope: !4445)
!4478 = !DILocation(line: 1074, column: 85, scope: !4445)
!4479 = !DILocation(line: 1074, column: 72, scope: !4445)
!4480 = !DILocation(line: 1074, column: 91, scope: !4445)
!4481 = !DILocation(line: 1074, column: 17, scope: !4451)
!4482 = !DILocation(line: 1074, column: 17, scope: !4445)
!4483 = !DILocation(line: 1075, column: 13, scope: !4436)
!4484 = !DILocation(line: 1075, column: 81, scope: !4445)
!4485 = !DILocation(line: 1075, column: 86, scope: !4445)
!4486 = !DILocation(line: 1075, column: 91, scope: !4445)
!4487 = !DILocation(line: 1075, column: 74, scope: !4445)
!4488 = !DILocation(line: 1075, column: 95, scope: !4445)
!4489 = !DILocation(line: 1075, column: 17, scope: !4451)
!4490 = !DILocation(line: 1075, column: 17, scope: !4445)
!4491 = !DILocation(line: 1076, column: 13, scope: !4436)
!4492 = !DILocation(line: 1076, column: 45, scope: !4445)
!4493 = !DILocation(line: 1076, column: 48, scope: !4445)
!4494 = !DILocation(line: 1076, column: 17, scope: !4445)
!4495 = !DILocation(line: 1077, column: 13, scope: !4436)
!4496 = !DILocation(line: 1077, column: 78, scope: !4445)
!4497 = !DILocation(line: 1077, column: 83, scope: !4445)
!4498 = !DILocation(line: 1077, column: 70, scope: !4445)
!4499 = !DILocation(line: 1077, column: 87, scope: !4445)
!4500 = !DILocation(line: 1077, column: 17, scope: !4451)
!4501 = !DILocation(line: 1077, column: 17, scope: !4445)
!4502 = !DILocation(line: 1078, column: 13, scope: !4436)
!4503 = !DILocation(line: 1078, column: 83, scope: !4445)
!4504 = !DILocation(line: 1078, column: 88, scope: !4445)
!4505 = !DILocation(line: 1078, column: 93, scope: !4445)
!4506 = !DILocation(line: 1078, column: 76, scope: !4445)
!4507 = !DILocation(line: 1078, column: 99, scope: !4445)
!4508 = !DILocation(line: 1078, column: 17, scope: !4451)
!4509 = !DILocation(line: 1078, column: 17, scope: !4445)
!4510 = !DILocation(line: 1079, column: 13, scope: !4436)
!4511 = !DILocation(line: 1079, column: 45, scope: !4445)
!4512 = !DILocation(line: 1079, column: 48, scope: !4445)
!4513 = !DILocation(line: 1079, column: 17, scope: !4445)
!4514 = !DILocation(line: 1080, column: 13, scope: !4436)
!4515 = !DILocation(line: 1080, column: 80, scope: !4445)
!4516 = !DILocation(line: 1080, column: 85, scope: !4445)
!4517 = !DILocation(line: 1080, column: 72, scope: !4445)
!4518 = !DILocation(line: 1080, column: 91, scope: !4445)
!4519 = !DILocation(line: 1080, column: 17, scope: !4451)
!4520 = !DILocation(line: 1080, column: 17, scope: !4445)
!4521 = !DILocation(line: 1081, column: 13, scope: !4436)
!4522 = !DILocation(line: 1081, column: 81, scope: !4445)
!4523 = !DILocation(line: 1081, column: 86, scope: !4445)
!4524 = !DILocation(line: 1081, column: 91, scope: !4445)
!4525 = !DILocation(line: 1081, column: 74, scope: !4445)
!4526 = !DILocation(line: 1081, column: 95, scope: !4445)
!4527 = !DILocation(line: 1081, column: 17, scope: !4451)
!4528 = !DILocation(line: 1081, column: 17, scope: !4445)
!4529 = !DILocation(line: 1082, column: 13, scope: !4436)
!4530 = !DILocation(line: 1082, column: 45, scope: !4445)
!4531 = !DILocation(line: 1082, column: 48, scope: !4445)
!4532 = !DILocation(line: 1082, column: 17, scope: !4445)
!4533 = !DILocation(line: 1083, column: 13, scope: !4436)
!4534 = !DILocation(line: 1083, column: 78, scope: !4445)
!4535 = !DILocation(line: 1083, column: 83, scope: !4445)
!4536 = !DILocation(line: 1083, column: 70, scope: !4445)
!4537 = !DILocation(line: 1083, column: 87, scope: !4445)
!4538 = !DILocation(line: 1083, column: 17, scope: !4451)
!4539 = !DILocation(line: 1083, column: 17, scope: !4445)
!4540 = !DILocation(line: 1084, column: 13, scope: !4436)
!4541 = !DILocation(line: 1084, column: 83, scope: !4445)
!4542 = !DILocation(line: 1084, column: 88, scope: !4445)
!4543 = !DILocation(line: 1084, column: 93, scope: !4445)
!4544 = !DILocation(line: 1084, column: 76, scope: !4445)
!4545 = !DILocation(line: 1084, column: 99, scope: !4445)
!4546 = !DILocation(line: 1084, column: 17, scope: !4451)
!4547 = !DILocation(line: 1084, column: 17, scope: !4445)
!4548 = !DILocation(line: 1085, column: 13, scope: !4436)
!4549 = !DILocation(line: 1085, column: 45, scope: !4445)
!4550 = !DILocation(line: 1085, column: 48, scope: !4445)
!4551 = !DILocation(line: 1085, column: 17, scope: !4445)
!4552 = !DILocation(line: 1068, column: 9, scope: !4392)
!4553 = !DILocation(line: 1086, column: 9, scope: !4436)
!4554 = !DILocation(line: 1095, column: 25, scope: !4555)
!4555 = distinct !DILexicalBlock(scope: !4346, file: !10, line: 1095, column: 9)
!4556 = !DILocation(line: 1095, column: 10, scope: !4555)
!4557 = !DILocation(line: 1095, column: 28, scope: !4555)
!4558 = !DILocation(line: 1095, column: 47, scope: !4559)
!4559 = !DILexicalBlockFile(scope: !4555, file: !10, discriminator: 1)
!4560 = !DILocation(line: 1095, column: 32, scope: !4559)
!4561 = !DILocation(line: 1095, column: 50, scope: !4559)
!4562 = !DILocation(line: 1095, column: 60, scope: !4563)
!4563 = !DILexicalBlockFile(scope: !4555, file: !10, discriminator: 2)
!4564 = !DILocation(line: 1095, column: 63, scope: !4563)
!4565 = !DILocation(line: 1095, column: 53, scope: !4563)
!4566 = !DILocation(line: 1095, column: 66, scope: !4563)
!4567 = !DILocation(line: 1095, column: 9, scope: !4563)
!4568 = !DILocation(line: 1096, column: 78, scope: !4569)
!4569 = distinct !DILexicalBlock(scope: !4570, file: !10, line: 1096, column: 13)
!4570 = distinct !DILexicalBlock(scope: !4555, file: !10, line: 1095, column: 72)
!4571 = !DILocation(line: 1096, column: 83, scope: !4569)
!4572 = !DILocation(line: 1096, column: 86, scope: !4569)
!4573 = !DILocation(line: 1096, column: 70, scope: !4569)
!4574 = !DILocation(line: 1096, column: 90, scope: !4569)
!4575 = !DILocation(line: 1096, column: 14, scope: !4576)
!4576 = !DILexicalBlockFile(scope: !4569, file: !10, discriminator: 2)
!4577 = !DILocation(line: 1096, column: 14, scope: !4569)
!4578 = !DILocation(line: 1097, column: 17, scope: !4569)
!4579 = !DILocation(line: 1097, column: 39, scope: !4580)
!4580 = !DILexicalBlockFile(scope: !4569, file: !10, discriminator: 1)
!4581 = !DILocation(line: 1097, column: 44, scope: !4580)
!4582 = !DILocation(line: 1097, column: 21, scope: !4580)
!4583 = !DILocation(line: 1098, column: 17, scope: !4569)
!4584 = !DILocation(line: 1098, column: 87, scope: !4580)
!4585 = !DILocation(line: 1098, column: 92, scope: !4580)
!4586 = !DILocation(line: 1098, column: 97, scope: !4580)
!4587 = !DILocation(line: 1098, column: 79, scope: !4580)
!4588 = !DILocation(line: 1098, column: 101, scope: !4580)
!4589 = !DILocation(line: 1098, column: 21, scope: !4590)
!4590 = !DILexicalBlockFile(scope: !4580, file: !10, discriminator: 2)
!4591 = !DILocation(line: 1098, column: 21, scope: !4580)
!4592 = !DILocation(line: 1099, column: 17, scope: !4569)
!4593 = !DILocation(line: 1099, column: 41, scope: !4580)
!4594 = !DILocation(line: 1099, column: 44, scope: !4580)
!4595 = !DILocation(line: 1099, column: 21, scope: !4580)
!4596 = !DILocation(line: 1100, column: 17, scope: !4569)
!4597 = !DILocation(line: 1100, column: 87, scope: !4580)
!4598 = !DILocation(line: 1100, column: 92, scope: !4580)
!4599 = !DILocation(line: 1100, column: 97, scope: !4580)
!4600 = !DILocation(line: 1100, column: 79, scope: !4580)
!4601 = !DILocation(line: 1100, column: 101, scope: !4580)
!4602 = !DILocation(line: 1100, column: 21, scope: !4590)
!4603 = !DILocation(line: 1100, column: 21, scope: !4580)
!4604 = !DILocation(line: 1101, column: 17, scope: !4569)
!4605 = !DILocation(line: 1101, column: 41, scope: !4580)
!4606 = !DILocation(line: 1101, column: 44, scope: !4580)
!4607 = !DILocation(line: 1101, column: 21, scope: !4580)
!4608 = !DILocation(line: 1096, column: 13, scope: !4609)
!4609 = !DILexicalBlockFile(scope: !4570, file: !10, discriminator: 1)
!4610 = !DILocation(line: 1102, column: 13, scope: !4569)
!4611 = !DILocation(line: 1108, column: 75, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !4570, file: !10, line: 1108, column: 13)
!4613 = !DILocation(line: 1108, column: 80, scope: !4612)
!4614 = !DILocation(line: 1108, column: 67, scope: !4612)
!4615 = !DILocation(line: 1108, column: 84, scope: !4612)
!4616 = !DILocation(line: 1108, column: 14, scope: !4617)
!4617 = !DILexicalBlockFile(scope: !4612, file: !10, discriminator: 2)
!4618 = !DILocation(line: 1108, column: 14, scope: !4612)
!4619 = !DILocation(line: 1109, column: 17, scope: !4612)
!4620 = !DILocation(line: 1109, column: 87, scope: !4621)
!4621 = !DILexicalBlockFile(scope: !4612, file: !10, discriminator: 1)
!4622 = !DILocation(line: 1109, column: 92, scope: !4621)
!4623 = !DILocation(line: 1109, column: 97, scope: !4621)
!4624 = !DILocation(line: 1109, column: 79, scope: !4621)
!4625 = !DILocation(line: 1109, column: 101, scope: !4621)
!4626 = !DILocation(line: 1109, column: 21, scope: !4627)
!4627 = !DILexicalBlockFile(scope: !4621, file: !10, discriminator: 2)
!4628 = !DILocation(line: 1109, column: 21, scope: !4621)
!4629 = !DILocation(line: 1110, column: 17, scope: !4612)
!4630 = !DILocation(line: 1110, column: 48, scope: !4621)
!4631 = !DILocation(line: 1110, column: 53, scope: !4621)
!4632 = !DILocation(line: 1110, column: 21, scope: !4621)
!4633 = !DILocation(line: 1111, column: 17, scope: !4612)
!4634 = !DILocation(line: 1111, column: 82, scope: !4621)
!4635 = !DILocation(line: 1111, column: 87, scope: !4621)
!4636 = !DILocation(line: 1111, column: 74, scope: !4621)
!4637 = !DILocation(line: 1111, column: 91, scope: !4621)
!4638 = !DILocation(line: 1111, column: 21, scope: !4627)
!4639 = !DILocation(line: 1111, column: 21, scope: !4621)
!4640 = !DILocation(line: 1112, column: 17, scope: !4612)
!4641 = !DILocation(line: 1112, column: 87, scope: !4621)
!4642 = !DILocation(line: 1112, column: 92, scope: !4621)
!4643 = !DILocation(line: 1112, column: 95, scope: !4621)
!4644 = !DILocation(line: 1112, column: 79, scope: !4621)
!4645 = !DILocation(line: 1112, column: 101, scope: !4621)
!4646 = !DILocation(line: 1112, column: 21, scope: !4627)
!4647 = !DILocation(line: 1112, column: 21, scope: !4621)
!4648 = !DILocation(line: 1113, column: 17, scope: !4612)
!4649 = !DILocation(line: 1113, column: 48, scope: !4621)
!4650 = !DILocation(line: 1113, column: 53, scope: !4621)
!4651 = !DILocation(line: 1113, column: 21, scope: !4621)
!4652 = !DILocation(line: 1114, column: 17, scope: !4612)
!4653 = !DILocation(line: 1114, column: 84, scope: !4621)
!4654 = !DILocation(line: 1114, column: 89, scope: !4621)
!4655 = !DILocation(line: 1114, column: 76, scope: !4621)
!4656 = !DILocation(line: 1114, column: 95, scope: !4621)
!4657 = !DILocation(line: 1114, column: 21, scope: !4627)
!4658 = !DILocation(line: 1114, column: 21, scope: !4621)
!4659 = !DILocation(line: 1115, column: 17, scope: !4612)
!4660 = !DILocation(line: 1115, column: 87, scope: !4621)
!4661 = !DILocation(line: 1115, column: 92, scope: !4621)
!4662 = !DILocation(line: 1115, column: 97, scope: !4621)
!4663 = !DILocation(line: 1115, column: 79, scope: !4621)
!4664 = !DILocation(line: 1115, column: 101, scope: !4621)
!4665 = !DILocation(line: 1115, column: 21, scope: !4627)
!4666 = !DILocation(line: 1115, column: 21, scope: !4621)
!4667 = !DILocation(line: 1116, column: 17, scope: !4612)
!4668 = !DILocation(line: 1116, column: 50, scope: !4621)
!4669 = !DILocation(line: 1116, column: 53, scope: !4621)
!4670 = !DILocation(line: 1116, column: 21, scope: !4621)
!4671 = !DILocation(line: 1117, column: 17, scope: !4612)
!4672 = !DILocation(line: 1117, column: 82, scope: !4621)
!4673 = !DILocation(line: 1117, column: 87, scope: !4621)
!4674 = !DILocation(line: 1117, column: 74, scope: !4621)
!4675 = !DILocation(line: 1117, column: 91, scope: !4621)
!4676 = !DILocation(line: 1117, column: 21, scope: !4627)
!4677 = !DILocation(line: 1117, column: 21, scope: !4621)
!4678 = !DILocation(line: 1118, column: 17, scope: !4612)
!4679 = !DILocation(line: 1118, column: 89, scope: !4621)
!4680 = !DILocation(line: 1118, column: 94, scope: !4621)
!4681 = !DILocation(line: 1118, column: 99, scope: !4621)
!4682 = !DILocation(line: 1118, column: 81, scope: !4621)
!4683 = !DILocation(line: 1118, column: 105, scope: !4621)
!4684 = !DILocation(line: 1118, column: 21, scope: !4627)
!4685 = !DILocation(line: 1118, column: 21, scope: !4621)
!4686 = !DILocation(line: 1119, column: 17, scope: !4612)
!4687 = !DILocation(line: 1119, column: 50, scope: !4621)
!4688 = !DILocation(line: 1119, column: 53, scope: !4621)
!4689 = !DILocation(line: 1119, column: 21, scope: !4621)
!4690 = !DILocation(line: 1120, column: 17, scope: !4612)
!4691 = !DILocation(line: 1120, column: 84, scope: !4621)
!4692 = !DILocation(line: 1120, column: 89, scope: !4621)
!4693 = !DILocation(line: 1120, column: 76, scope: !4621)
!4694 = !DILocation(line: 1120, column: 95, scope: !4621)
!4695 = !DILocation(line: 1120, column: 21, scope: !4627)
!4696 = !DILocation(line: 1120, column: 21, scope: !4621)
!4697 = !DILocation(line: 1121, column: 17, scope: !4612)
!4698 = !DILocation(line: 1121, column: 87, scope: !4621)
!4699 = !DILocation(line: 1121, column: 92, scope: !4621)
!4700 = !DILocation(line: 1121, column: 97, scope: !4621)
!4701 = !DILocation(line: 1121, column: 79, scope: !4621)
!4702 = !DILocation(line: 1121, column: 101, scope: !4621)
!4703 = !DILocation(line: 1121, column: 21, scope: !4627)
!4704 = !DILocation(line: 1121, column: 21, scope: !4621)
!4705 = !DILocation(line: 1122, column: 17, scope: !4612)
!4706 = !DILocation(line: 1122, column: 50, scope: !4621)
!4707 = !DILocation(line: 1122, column: 53, scope: !4621)
!4708 = !DILocation(line: 1122, column: 21, scope: !4621)
!4709 = !DILocation(line: 1123, column: 17, scope: !4612)
!4710 = !DILocation(line: 1123, column: 82, scope: !4621)
!4711 = !DILocation(line: 1123, column: 87, scope: !4621)
!4712 = !DILocation(line: 1123, column: 74, scope: !4621)
!4713 = !DILocation(line: 1123, column: 91, scope: !4621)
!4714 = !DILocation(line: 1123, column: 21, scope: !4627)
!4715 = !DILocation(line: 1123, column: 21, scope: !4621)
!4716 = !DILocation(line: 1124, column: 17, scope: !4612)
!4717 = !DILocation(line: 1124, column: 89, scope: !4621)
!4718 = !DILocation(line: 1124, column: 94, scope: !4621)
!4719 = !DILocation(line: 1124, column: 99, scope: !4621)
!4720 = !DILocation(line: 1124, column: 81, scope: !4621)
!4721 = !DILocation(line: 1124, column: 105, scope: !4621)
!4722 = !DILocation(line: 1124, column: 21, scope: !4627)
!4723 = !DILocation(line: 1124, column: 21, scope: !4621)
!4724 = !DILocation(line: 1125, column: 17, scope: !4612)
!4725 = !DILocation(line: 1125, column: 50, scope: !4621)
!4726 = !DILocation(line: 1125, column: 53, scope: !4621)
!4727 = !DILocation(line: 1125, column: 21, scope: !4621)
!4728 = !DILocation(line: 1108, column: 13, scope: !4609)
!4729 = !DILocation(line: 1126, column: 13, scope: !4612)
!4730 = !DILocation(line: 1127, column: 5, scope: !4570)
!4731 = !DILocation(line: 1132, column: 26, scope: !4346)
!4732 = !DILocation(line: 1132, column: 14, scope: !4346)
!4733 = !DILocation(line: 1132, column: 12, scope: !4346)
!4734 = !DILocation(line: 1133, column: 25, scope: !4735)
!4735 = distinct !DILexicalBlock(scope: !4346, file: !10, line: 1133, column: 9)
!4736 = !DILocation(line: 1133, column: 10, scope: !4735)
!4737 = !DILocation(line: 1133, column: 28, scope: !4735)
!4738 = !DILocation(line: 1133, column: 31, scope: !4739)
!4739 = !DILexicalBlockFile(scope: !4735, file: !10, discriminator: 1)
!4740 = !DILocation(line: 1133, column: 38, scope: !4739)
!4741 = !DILocation(line: 1133, column: 9, scope: !4739)
!4742 = !DILocation(line: 1134, column: 75, scope: !4743)
!4743 = distinct !DILexicalBlock(scope: !4744, file: !10, line: 1134, column: 13)
!4744 = distinct !DILexicalBlock(scope: !4735, file: !10, line: 1133, column: 60)
!4745 = !DILocation(line: 1134, column: 80, scope: !4743)
!4746 = !DILocation(line: 1134, column: 67, scope: !4743)
!4747 = !DILocation(line: 1134, column: 84, scope: !4743)
!4748 = !DILocation(line: 1134, column: 14, scope: !4749)
!4749 = !DILexicalBlockFile(scope: !4743, file: !10, discriminator: 2)
!4750 = !DILocation(line: 1134, column: 14, scope: !4743)
!4751 = !DILocation(line: 1135, column: 17, scope: !4743)
!4752 = !DILocation(line: 1135, column: 95, scope: !4753)
!4753 = !DILexicalBlockFile(scope: !4743, file: !10, discriminator: 1)
!4754 = !DILocation(line: 1135, column: 100, scope: !4753)
!4755 = !DILocation(line: 1135, column: 83, scope: !4753)
!4756 = !DILocation(line: 1135, column: 109, scope: !4753)
!4757 = !DILocation(line: 1135, column: 21, scope: !4758)
!4758 = !DILexicalBlockFile(scope: !4753, file: !10, discriminator: 2)
!4759 = !DILocation(line: 1135, column: 21, scope: !4753)
!4760 = !DILocation(line: 1136, column: 17, scope: !4743)
!4761 = !DILocation(line: 1136, column: 45, scope: !4753)
!4762 = !DILocation(line: 1136, column: 50, scope: !4753)
!4763 = !DILocation(line: 1136, column: 21, scope: !4753)
!4764 = !DILocation(line: 1137, column: 17, scope: !4743)
!4765 = !DILocation(line: 1137, column: 84, scope: !4753)
!4766 = !DILocation(line: 1137, column: 89, scope: !4753)
!4767 = !DILocation(line: 1137, column: 76, scope: !4753)
!4768 = !DILocation(line: 1137, column: 95, scope: !4753)
!4769 = !DILocation(line: 1137, column: 21, scope: !4758)
!4770 = !DILocation(line: 1137, column: 21, scope: !4753)
!4771 = !DILocation(line: 1138, column: 17, scope: !4743)
!4772 = !DILocation(line: 1138, column: 95, scope: !4753)
!4773 = !DILocation(line: 1138, column: 100, scope: !4753)
!4774 = !DILocation(line: 1138, column: 83, scope: !4753)
!4775 = !DILocation(line: 1138, column: 109, scope: !4753)
!4776 = !DILocation(line: 1138, column: 21, scope: !4758)
!4777 = !DILocation(line: 1138, column: 21, scope: !4753)
!4778 = !DILocation(line: 1139, column: 17, scope: !4743)
!4779 = !DILocation(line: 1139, column: 47, scope: !4753)
!4780 = !DILocation(line: 1139, column: 50, scope: !4753)
!4781 = !DILocation(line: 1139, column: 21, scope: !4753)
!4782 = !DILocation(line: 1134, column: 13, scope: !4783)
!4783 = !DILexicalBlockFile(scope: !4744, file: !10, discriminator: 1)
!4784 = !DILocation(line: 1140, column: 13, scope: !4743)
!4785 = !DILocation(line: 1141, column: 5, scope: !4744)
!4786 = !DILocation(line: 1142, column: 8, scope: !4346)
!4787 = !DILocation(line: 1142, column: 5, scope: !4346)
!4788 = !DILocation(line: 1145, column: 13, scope: !4346)
!4789 = !DILocation(line: 1145, column: 5, scope: !4346)
!4790 = !DILocation(line: 1146, column: 13, scope: !4346)
!4791 = !DILocation(line: 1146, column: 5, scope: !4346)
!4792 = !DILocation(line: 1147, column: 13, scope: !4346)
!4793 = !DILocation(line: 1147, column: 5, scope: !4346)
!4794 = !DILocation(line: 1148, column: 13, scope: !4346)
!4795 = !DILocation(line: 1148, column: 5, scope: !4346)
!4796 = !DILocation(line: 1149, column: 12, scope: !4346)
!4797 = !DILocation(line: 1149, column: 5, scope: !4346)
!4798 = distinct !DISubprogram(name: "file_lshift1", scope: !10, file: !10, line: 1152, type: !85, isLocal: true, isDefinition: true, scopeLine: 1153, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!4799 = !DILocalVariable(name: "s", arg: 1, scope: !4798, file: !10, line: 1152, type: !87)
!4800 = !DILocation(line: 1152, column: 33, scope: !4798)
!4801 = !DILocalVariable(name: "a", scope: !4798, file: !10, line: 1154, type: !187)
!4802 = !DILocation(line: 1154, column: 13, scope: !4798)
!4803 = !DILocalVariable(name: "lshift1", scope: !4798, file: !10, line: 1154, type: !187)
!4804 = !DILocation(line: 1154, column: 23, scope: !4798)
!4805 = !DILocalVariable(name: "zero", scope: !4798, file: !10, line: 1154, type: !187)
!4806 = !DILocation(line: 1154, column: 40, scope: !4798)
!4807 = !DILocalVariable(name: "ret", scope: !4798, file: !10, line: 1154, type: !187)
!4808 = !DILocation(line: 1154, column: 54, scope: !4798)
!4809 = !DILocalVariable(name: "two", scope: !4798, file: !10, line: 1155, type: !187)
!4810 = !DILocation(line: 1155, column: 13, scope: !4798)
!4811 = !DILocalVariable(name: "remainder", scope: !4798, file: !10, line: 1155, type: !187)
!4812 = !DILocation(line: 1155, column: 25, scope: !4798)
!4813 = !DILocalVariable(name: "st", scope: !4798, file: !10, line: 1156, type: !4)
!4814 = !DILocation(line: 1156, column: 9, scope: !4798)
!4815 = !DILocation(line: 1158, column: 75, scope: !4816)
!4816 = distinct !DILexicalBlock(scope: !4798, file: !10, line: 1158, column: 9)
!4817 = !DILocation(line: 1158, column: 69, scope: !4816)
!4818 = !DILocation(line: 1158, column: 67, scope: !4816)
!4819 = !DILocation(line: 1158, column: 65, scope: !4816)
!4820 = !DILocation(line: 1158, column: 10, scope: !4821)
!4821 = !DILexicalBlockFile(scope: !4816, file: !10, discriminator: 2)
!4822 = !DILocation(line: 1158, column: 10, scope: !4816)
!4823 = !DILocation(line: 1159, column: 13, scope: !4816)
!4824 = !DILocation(line: 1159, column: 100, scope: !4825)
!4825 = !DILexicalBlockFile(scope: !4816, file: !10, discriminator: 1)
!4826 = !DILocation(line: 1159, column: 94, scope: !4825)
!4827 = !DILocation(line: 1159, column: 92, scope: !4825)
!4828 = !DILocation(line: 1159, column: 84, scope: !4825)
!4829 = !DILocation(line: 1159, column: 17, scope: !4830)
!4830 = !DILexicalBlockFile(scope: !4825, file: !10, discriminator: 2)
!4831 = !DILocation(line: 1159, column: 17, scope: !4825)
!4832 = !DILocation(line: 1160, column: 13, scope: !4816)
!4833 = !DILocation(line: 1160, column: 75, scope: !4825)
!4834 = !DILocation(line: 1160, column: 73, scope: !4825)
!4835 = !DILocation(line: 1160, column: 68, scope: !4825)
!4836 = !DILocation(line: 1160, column: 17, scope: !4830)
!4837 = !DILocation(line: 1160, column: 17, scope: !4825)
!4838 = !DILocation(line: 1161, column: 13, scope: !4816)
!4839 = !DILocation(line: 1161, column: 73, scope: !4825)
!4840 = !DILocation(line: 1161, column: 71, scope: !4825)
!4841 = !DILocation(line: 1161, column: 67, scope: !4825)
!4842 = !DILocation(line: 1161, column: 17, scope: !4830)
!4843 = !DILocation(line: 1161, column: 17, scope: !4825)
!4844 = !DILocation(line: 1162, column: 13, scope: !4816)
!4845 = !DILocation(line: 1162, column: 73, scope: !4825)
!4846 = !DILocation(line: 1162, column: 71, scope: !4825)
!4847 = !DILocation(line: 1162, column: 67, scope: !4825)
!4848 = !DILocation(line: 1162, column: 17, scope: !4830)
!4849 = !DILocation(line: 1162, column: 17, scope: !4825)
!4850 = !DILocation(line: 1163, column: 13, scope: !4816)
!4851 = !DILocation(line: 1163, column: 85, scope: !4825)
!4852 = !DILocation(line: 1163, column: 83, scope: !4825)
!4853 = !DILocation(line: 1163, column: 73, scope: !4825)
!4854 = !DILocation(line: 1163, column: 17, scope: !4830)
!4855 = !DILocation(line: 1163, column: 17, scope: !4825)
!4856 = !DILocation(line: 1158, column: 9, scope: !4857)
!4857 = !DILexicalBlockFile(scope: !4798, file: !10, discriminator: 1)
!4858 = !DILocation(line: 1164, column: 9, scope: !4816)
!4859 = !DILocation(line: 1166, column: 19, scope: !4798)
!4860 = !DILocation(line: 1166, column: 6, scope: !4798)
!4861 = !DILocation(line: 1168, column: 79, scope: !4862)
!4862 = distinct !DILexicalBlock(scope: !4798, file: !10, line: 1168, column: 9)
!4863 = !DILocation(line: 1168, column: 67, scope: !4862)
!4864 = !DILocation(line: 1168, column: 88, scope: !4862)
!4865 = !DILocation(line: 1168, column: 10, scope: !4866)
!4866 = !DILexicalBlockFile(scope: !4862, file: !10, discriminator: 2)
!4867 = !DILocation(line: 1168, column: 10, scope: !4862)
!4868 = !DILocation(line: 1169, column: 13, scope: !4862)
!4869 = !DILocation(line: 1169, column: 79, scope: !4870)
!4870 = !DILexicalBlockFile(scope: !4862, file: !10, discriminator: 1)
!4871 = !DILocation(line: 1169, column: 84, scope: !4870)
!4872 = !DILocation(line: 1169, column: 87, scope: !4870)
!4873 = !DILocation(line: 1169, column: 72, scope: !4870)
!4874 = !DILocation(line: 1169, column: 91, scope: !4870)
!4875 = !DILocation(line: 1169, column: 17, scope: !4876)
!4876 = !DILexicalBlockFile(scope: !4870, file: !10, discriminator: 2)
!4877 = !DILocation(line: 1169, column: 17, scope: !4870)
!4878 = !DILocation(line: 1170, column: 13, scope: !4862)
!4879 = !DILocation(line: 1170, column: 34, scope: !4870)
!4880 = !DILocation(line: 1170, column: 43, scope: !4870)
!4881 = !DILocation(line: 1170, column: 17, scope: !4870)
!4882 = !DILocation(line: 1171, column: 13, scope: !4862)
!4883 = !DILocation(line: 1171, column: 86, scope: !4870)
!4884 = !DILocation(line: 1171, column: 91, scope: !4870)
!4885 = !DILocation(line: 1171, column: 94, scope: !4870)
!4886 = !DILocation(line: 1171, column: 99, scope: !4870)
!4887 = !DILocation(line: 1171, column: 79, scope: !4870)
!4888 = !DILocation(line: 1171, column: 105, scope: !4870)
!4889 = !DILocation(line: 1171, column: 17, scope: !4876)
!4890 = !DILocation(line: 1171, column: 17, scope: !4870)
!4891 = !DILocation(line: 1172, column: 13, scope: !4862)
!4892 = !DILocation(line: 1172, column: 34, scope: !4870)
!4893 = !DILocation(line: 1172, column: 43, scope: !4870)
!4894 = !DILocation(line: 1172, column: 17, scope: !4870)
!4895 = !DILocation(line: 1173, column: 13, scope: !4862)
!4896 = !DILocation(line: 1173, column: 103, scope: !4870)
!4897 = !DILocation(line: 1173, column: 108, scope: !4870)
!4898 = !DILocation(line: 1173, column: 119, scope: !4870)
!4899 = !DILocation(line: 1173, column: 128, scope: !4870)
!4900 = !DILocation(line: 1173, column: 133, scope: !4870)
!4901 = !DILocation(line: 1173, column: 96, scope: !4870)
!4902 = !DILocation(line: 1173, column: 139, scope: !4870)
!4903 = !DILocation(line: 1173, column: 17, scope: !4876)
!4904 = !DILocation(line: 1173, column: 17, scope: !4870)
!4905 = !DILocation(line: 1174, column: 13, scope: !4862)
!4906 = !DILocation(line: 1174, column: 40, scope: !4870)
!4907 = !DILocation(line: 1174, column: 43, scope: !4870)
!4908 = !DILocation(line: 1174, column: 17, scope: !4870)
!4909 = !DILocation(line: 1175, column: 13, scope: !4862)
!4910 = !DILocation(line: 1175, column: 40, scope: !4870)
!4911 = !DILocation(line: 1175, column: 46, scope: !4870)
!4912 = !DILocation(line: 1175, column: 17, scope: !4870)
!4913 = !DILocation(line: 1176, column: 13, scope: !4862)
!4914 = !DILocation(line: 1176, column: 84, scope: !4870)
!4915 = !DILocation(line: 1176, column: 89, scope: !4870)
!4916 = !DILocation(line: 1176, column: 73, scope: !4870)
!4917 = !DILocation(line: 1176, column: 93, scope: !4870)
!4918 = !DILocation(line: 1176, column: 17, scope: !4876)
!4919 = !DILocation(line: 1176, column: 17, scope: !4870)
!4920 = !DILocation(line: 1177, column: 13, scope: !4862)
!4921 = !DILocation(line: 1177, column: 35, scope: !4870)
!4922 = !DILocation(line: 1177, column: 44, scope: !4870)
!4923 = !DILocation(line: 1177, column: 17, scope: !4870)
!4924 = !DILocation(line: 1178, column: 13, scope: !4862)
!4925 = !DILocation(line: 1178, column: 90, scope: !4870)
!4926 = !DILocation(line: 1178, column: 95, scope: !4870)
!4927 = !DILocation(line: 1178, column: 79, scope: !4870)
!4928 = !DILocation(line: 1178, column: 105, scope: !4870)
!4929 = !DILocation(line: 1178, column: 17, scope: !4876)
!4930 = !DILocation(line: 1178, column: 17, scope: !4870)
!4931 = !DILocation(line: 1179, column: 13, scope: !4862)
!4932 = !DILocation(line: 1179, column: 40, scope: !4870)
!4933 = !DILocation(line: 1179, column: 43, scope: !4870)
!4934 = !DILocation(line: 1179, column: 17, scope: !4870)
!4935 = !DILocation(line: 1180, column: 13, scope: !4862)
!4936 = !DILocation(line: 1180, column: 90, scope: !4870)
!4937 = !DILocation(line: 1180, column: 95, scope: !4870)
!4938 = !DILocation(line: 1180, column: 79, scope: !4870)
!4939 = !DILocation(line: 1180, column: 105, scope: !4870)
!4940 = !DILocation(line: 1180, column: 17, scope: !4876)
!4941 = !DILocation(line: 1180, column: 17, scope: !4870)
!4942 = !DILocation(line: 1181, column: 13, scope: !4862)
!4943 = !DILocation(line: 1181, column: 40, scope: !4870)
!4944 = !DILocation(line: 1181, column: 43, scope: !4870)
!4945 = !DILocation(line: 1181, column: 17, scope: !4870)
!4946 = !DILocation(line: 1168, column: 9, scope: !4857)
!4947 = !DILocation(line: 1182, column: 9, scope: !4862)
!4948 = !DILocation(line: 1185, column: 81, scope: !4949)
!4949 = distinct !DILexicalBlock(scope: !4798, file: !10, line: 1185, column: 9)
!4950 = !DILocation(line: 1185, column: 70, scope: !4949)
!4951 = !DILocation(line: 1185, column: 94, scope: !4949)
!4952 = !DILocation(line: 1185, column: 10, scope: !4953)
!4953 = !DILexicalBlockFile(scope: !4949, file: !10, discriminator: 2)
!4954 = !DILocation(line: 1185, column: 10, scope: !4949)
!4955 = !DILocation(line: 1186, column: 13, scope: !4949)
!4956 = !DILocation(line: 1186, column: 99, scope: !4957)
!4957 = !DILexicalBlockFile(scope: !4949, file: !10, discriminator: 1)
!4958 = !DILocation(line: 1186, column: 18, scope: !4957)
!4959 = !DILocation(line: 1186, column: 27, scope: !4957)
!4960 = !DILocation(line: 1186, column: 32, scope: !4957)
!4961 = !DILocation(line: 1186, column: 92, scope: !4957)
!4962 = !DILocation(line: 1186, column: 38, scope: !4957)
!4963 = !DILocation(line: 1186, column: 17, scope: !4964)
!4964 = !DILexicalBlockFile(scope: !4957, file: !10, discriminator: 2)
!4965 = !DILocation(line: 1186, column: 17, scope: !4957)
!4966 = !DILocation(line: 1187, column: 13, scope: !4949)
!4967 = !DILocation(line: 1187, column: 46, scope: !4957)
!4968 = !DILocation(line: 1187, column: 49, scope: !4957)
!4969 = !DILocation(line: 1187, column: 17, scope: !4957)
!4970 = !DILocation(line: 1188, column: 13, scope: !4949)
!4971 = !DILocation(line: 1188, column: 90, scope: !4957)
!4972 = !DILocation(line: 1188, column: 95, scope: !4957)
!4973 = !DILocation(line: 1188, column: 79, scope: !4957)
!4974 = !DILocation(line: 1188, column: 105, scope: !4957)
!4975 = !DILocation(line: 1188, column: 17, scope: !4964)
!4976 = !DILocation(line: 1188, column: 17, scope: !4957)
!4977 = !DILocation(line: 1189, column: 13, scope: !4949)
!4978 = !DILocation(line: 1189, column: 46, scope: !4957)
!4979 = !DILocation(line: 1189, column: 49, scope: !4957)
!4980 = !DILocation(line: 1189, column: 17, scope: !4957)
!4981 = !DILocation(line: 1185, column: 9, scope: !4857)
!4982 = !DILocation(line: 1190, column: 9, scope: !4949)
!4983 = !DILocation(line: 1192, column: 8, scope: !4798)
!4984 = !DILocation(line: 1192, column: 5, scope: !4798)
!4985 = !DILocation(line: 1194, column: 13, scope: !4798)
!4986 = !DILocation(line: 1194, column: 5, scope: !4798)
!4987 = !DILocation(line: 1195, column: 13, scope: !4798)
!4988 = !DILocation(line: 1195, column: 5, scope: !4798)
!4989 = !DILocation(line: 1196, column: 13, scope: !4798)
!4990 = !DILocation(line: 1196, column: 5, scope: !4798)
!4991 = !DILocation(line: 1197, column: 13, scope: !4798)
!4992 = !DILocation(line: 1197, column: 5, scope: !4798)
!4993 = !DILocation(line: 1198, column: 13, scope: !4798)
!4994 = !DILocation(line: 1198, column: 5, scope: !4798)
!4995 = !DILocation(line: 1199, column: 13, scope: !4798)
!4996 = !DILocation(line: 1199, column: 5, scope: !4798)
!4997 = !DILocation(line: 1201, column: 12, scope: !4798)
!4998 = !DILocation(line: 1201, column: 5, scope: !4798)
!4999 = distinct !DISubprogram(name: "file_lshift", scope: !10, file: !10, line: 1204, type: !85, isLocal: true, isDefinition: true, scopeLine: 1205, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5000 = !DILocalVariable(name: "s", arg: 1, scope: !4999, file: !10, line: 1204, type: !87)
!5001 = !DILocation(line: 1204, column: 32, scope: !4999)
!5002 = !DILocalVariable(name: "a", scope: !4999, file: !10, line: 1206, type: !187)
!5003 = !DILocation(line: 1206, column: 13, scope: !4999)
!5004 = !DILocalVariable(name: "lshift", scope: !4999, file: !10, line: 1206, type: !187)
!5005 = !DILocation(line: 1206, column: 23, scope: !4999)
!5006 = !DILocalVariable(name: "ret", scope: !4999, file: !10, line: 1206, type: !187)
!5007 = !DILocation(line: 1206, column: 39, scope: !4999)
!5008 = !DILocalVariable(name: "n", scope: !4999, file: !10, line: 1207, type: !4)
!5009 = !DILocation(line: 1207, column: 9, scope: !4999)
!5010 = !DILocalVariable(name: "st", scope: !4999, file: !10, line: 1207, type: !4)
!5011 = !DILocation(line: 1207, column: 16, scope: !4999)
!5012 = !DILocation(line: 1209, column: 75, scope: !5013)
!5013 = distinct !DILexicalBlock(scope: !4999, file: !10, line: 1209, column: 9)
!5014 = !DILocation(line: 1209, column: 69, scope: !5013)
!5015 = !DILocation(line: 1209, column: 67, scope: !5013)
!5016 = !DILocation(line: 1209, column: 65, scope: !5013)
!5017 = !DILocation(line: 1209, column: 10, scope: !5018)
!5018 = !DILexicalBlockFile(scope: !5013, file: !10, discriminator: 2)
!5019 = !DILocation(line: 1209, column: 10, scope: !5013)
!5020 = !DILocation(line: 1210, column: 13, scope: !5013)
!5021 = !DILocation(line: 1210, column: 97, scope: !5022)
!5022 = !DILexicalBlockFile(scope: !5013, file: !10, discriminator: 1)
!5023 = !DILocation(line: 1210, column: 91, scope: !5022)
!5024 = !DILocation(line: 1210, column: 89, scope: !5022)
!5025 = !DILocation(line: 1210, column: 82, scope: !5022)
!5026 = !DILocation(line: 1210, column: 17, scope: !5027)
!5027 = !DILexicalBlockFile(scope: !5022, file: !10, discriminator: 2)
!5028 = !DILocation(line: 1210, column: 17, scope: !5022)
!5029 = !DILocation(line: 1211, column: 13, scope: !5013)
!5030 = !DILocation(line: 1211, column: 73, scope: !5022)
!5031 = !DILocation(line: 1211, column: 71, scope: !5022)
!5032 = !DILocation(line: 1211, column: 67, scope: !5022)
!5033 = !DILocation(line: 1211, column: 17, scope: !5027)
!5034 = !DILocation(line: 1211, column: 17, scope: !5022)
!5035 = !DILocation(line: 1212, column: 13, scope: !5013)
!5036 = !DILocation(line: 1212, column: 24, scope: !5022)
!5037 = !DILocation(line: 1212, column: 17, scope: !5022)
!5038 = !DILocation(line: 1209, column: 9, scope: !5039)
!5039 = !DILexicalBlockFile(scope: !4999, file: !10, discriminator: 1)
!5040 = !DILocation(line: 1213, column: 9, scope: !5013)
!5041 = !DILocation(line: 1215, column: 78, scope: !5042)
!5042 = distinct !DILexicalBlock(scope: !4999, file: !10, line: 1215, column: 9)
!5043 = !DILocation(line: 1215, column: 83, scope: !5042)
!5044 = !DILocation(line: 1215, column: 86, scope: !5042)
!5045 = !DILocation(line: 1215, column: 68, scope: !5042)
!5046 = !DILocation(line: 1215, column: 90, scope: !5042)
!5047 = !DILocation(line: 1215, column: 10, scope: !5048)
!5048 = !DILexicalBlockFile(scope: !5042, file: !10, discriminator: 2)
!5049 = !DILocation(line: 1215, column: 10, scope: !5042)
!5050 = !DILocation(line: 1216, column: 13, scope: !5042)
!5051 = !DILocation(line: 1216, column: 35, scope: !5052)
!5052 = !DILexicalBlockFile(scope: !5042, file: !10, discriminator: 1)
!5053 = !DILocation(line: 1216, column: 43, scope: !5052)
!5054 = !DILocation(line: 1216, column: 17, scope: !5052)
!5055 = !DILocation(line: 1217, column: 13, scope: !5042)
!5056 = !DILocation(line: 1217, column: 90, scope: !5052)
!5057 = !DILocation(line: 1217, column: 95, scope: !5052)
!5058 = !DILocation(line: 1217, column: 103, scope: !5052)
!5059 = !DILocation(line: 1217, column: 80, scope: !5052)
!5060 = !DILocation(line: 1217, column: 107, scope: !5052)
!5061 = !DILocation(line: 1217, column: 17, scope: !5062)
!5062 = !DILexicalBlockFile(scope: !5052, file: !10, discriminator: 2)
!5063 = !DILocation(line: 1217, column: 17, scope: !5052)
!5064 = !DILocation(line: 1218, column: 13, scope: !5042)
!5065 = !DILocation(line: 1218, column: 35, scope: !5052)
!5066 = !DILocation(line: 1218, column: 38, scope: !5052)
!5067 = !DILocation(line: 1218, column: 17, scope: !5052)
!5068 = !DILocation(line: 1215, column: 9, scope: !5039)
!5069 = !DILocation(line: 1219, column: 9, scope: !5042)
!5070 = !DILocation(line: 1221, column: 8, scope: !4999)
!5071 = !DILocation(line: 1221, column: 5, scope: !4999)
!5072 = !DILocation(line: 1223, column: 13, scope: !4999)
!5073 = !DILocation(line: 1223, column: 5, scope: !4999)
!5074 = !DILocation(line: 1224, column: 13, scope: !4999)
!5075 = !DILocation(line: 1224, column: 5, scope: !4999)
!5076 = !DILocation(line: 1225, column: 13, scope: !4999)
!5077 = !DILocation(line: 1225, column: 5, scope: !4999)
!5078 = !DILocation(line: 1226, column: 12, scope: !4999)
!5079 = !DILocation(line: 1226, column: 5, scope: !4999)
!5080 = distinct !DISubprogram(name: "file_rshift", scope: !10, file: !10, line: 1229, type: !85, isLocal: true, isDefinition: true, scopeLine: 1230, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5081 = !DILocalVariable(name: "s", arg: 1, scope: !5080, file: !10, line: 1229, type: !87)
!5082 = !DILocation(line: 1229, column: 32, scope: !5080)
!5083 = !DILocalVariable(name: "a", scope: !5080, file: !10, line: 1231, type: !187)
!5084 = !DILocation(line: 1231, column: 13, scope: !5080)
!5085 = !DILocalVariable(name: "rshift", scope: !5080, file: !10, line: 1231, type: !187)
!5086 = !DILocation(line: 1231, column: 23, scope: !5080)
!5087 = !DILocalVariable(name: "ret", scope: !5080, file: !10, line: 1231, type: !187)
!5088 = !DILocation(line: 1231, column: 39, scope: !5080)
!5089 = !DILocalVariable(name: "n", scope: !5080, file: !10, line: 1232, type: !4)
!5090 = !DILocation(line: 1232, column: 9, scope: !5080)
!5091 = !DILocalVariable(name: "st", scope: !5080, file: !10, line: 1232, type: !4)
!5092 = !DILocation(line: 1232, column: 16, scope: !5080)
!5093 = !DILocation(line: 1234, column: 75, scope: !5094)
!5094 = distinct !DILexicalBlock(scope: !5080, file: !10, line: 1234, column: 9)
!5095 = !DILocation(line: 1234, column: 69, scope: !5094)
!5096 = !DILocation(line: 1234, column: 67, scope: !5094)
!5097 = !DILocation(line: 1234, column: 65, scope: !5094)
!5098 = !DILocation(line: 1234, column: 10, scope: !5099)
!5099 = !DILexicalBlockFile(scope: !5094, file: !10, discriminator: 2)
!5100 = !DILocation(line: 1234, column: 10, scope: !5094)
!5101 = !DILocation(line: 1235, column: 13, scope: !5094)
!5102 = !DILocation(line: 1235, column: 97, scope: !5103)
!5103 = !DILexicalBlockFile(scope: !5094, file: !10, discriminator: 1)
!5104 = !DILocation(line: 1235, column: 91, scope: !5103)
!5105 = !DILocation(line: 1235, column: 89, scope: !5103)
!5106 = !DILocation(line: 1235, column: 82, scope: !5103)
!5107 = !DILocation(line: 1235, column: 17, scope: !5108)
!5108 = !DILexicalBlockFile(scope: !5103, file: !10, discriminator: 2)
!5109 = !DILocation(line: 1235, column: 17, scope: !5103)
!5110 = !DILocation(line: 1236, column: 13, scope: !5094)
!5111 = !DILocation(line: 1236, column: 73, scope: !5103)
!5112 = !DILocation(line: 1236, column: 71, scope: !5103)
!5113 = !DILocation(line: 1236, column: 67, scope: !5103)
!5114 = !DILocation(line: 1236, column: 17, scope: !5108)
!5115 = !DILocation(line: 1236, column: 17, scope: !5103)
!5116 = !DILocation(line: 1237, column: 13, scope: !5094)
!5117 = !DILocation(line: 1237, column: 24, scope: !5103)
!5118 = !DILocation(line: 1237, column: 17, scope: !5103)
!5119 = !DILocation(line: 1234, column: 9, scope: !5120)
!5120 = !DILexicalBlockFile(scope: !5080, file: !10, discriminator: 1)
!5121 = !DILocation(line: 1238, column: 9, scope: !5094)
!5122 = !DILocation(line: 1240, column: 78, scope: !5123)
!5123 = distinct !DILexicalBlock(scope: !5080, file: !10, line: 1240, column: 9)
!5124 = !DILocation(line: 1240, column: 83, scope: !5123)
!5125 = !DILocation(line: 1240, column: 86, scope: !5123)
!5126 = !DILocation(line: 1240, column: 68, scope: !5123)
!5127 = !DILocation(line: 1240, column: 90, scope: !5123)
!5128 = !DILocation(line: 1240, column: 10, scope: !5129)
!5129 = !DILexicalBlockFile(scope: !5123, file: !10, discriminator: 2)
!5130 = !DILocation(line: 1240, column: 10, scope: !5123)
!5131 = !DILocation(line: 1241, column: 13, scope: !5123)
!5132 = !DILocation(line: 1241, column: 35, scope: !5133)
!5133 = !DILexicalBlockFile(scope: !5123, file: !10, discriminator: 1)
!5134 = !DILocation(line: 1241, column: 43, scope: !5133)
!5135 = !DILocation(line: 1241, column: 17, scope: !5133)
!5136 = !DILocation(line: 1240, column: 9, scope: !5120)
!5137 = !DILocation(line: 1242, column: 9, scope: !5123)
!5138 = !DILocation(line: 1245, column: 9, scope: !5139)
!5139 = distinct !DILexicalBlock(scope: !5080, file: !10, line: 1245, column: 9)
!5140 = !DILocation(line: 1245, column: 11, scope: !5139)
!5141 = !DILocation(line: 1245, column: 9, scope: !5080)
!5142 = !DILocation(line: 1246, column: 81, scope: !5143)
!5143 = distinct !DILexicalBlock(scope: !5144, file: !10, line: 1246, column: 13)
!5144 = distinct !DILexicalBlock(scope: !5139, file: !10, line: 1245, column: 17)
!5145 = !DILocation(line: 1246, column: 86, scope: !5143)
!5146 = !DILocation(line: 1246, column: 70, scope: !5143)
!5147 = !DILocation(line: 1246, column: 90, scope: !5143)
!5148 = !DILocation(line: 1246, column: 14, scope: !5149)
!5149 = !DILexicalBlockFile(scope: !5143, file: !10, discriminator: 2)
!5150 = !DILocation(line: 1246, column: 14, scope: !5143)
!5151 = !DILocation(line: 1247, column: 17, scope: !5143)
!5152 = !DILocation(line: 1247, column: 49, scope: !5153)
!5153 = !DILexicalBlockFile(scope: !5143, file: !10, discriminator: 1)
!5154 = !DILocation(line: 1247, column: 57, scope: !5153)
!5155 = !DILocation(line: 1247, column: 21, scope: !5153)
!5156 = !DILocation(line: 1246, column: 13, scope: !5157)
!5157 = !DILexicalBlockFile(scope: !5144, file: !10, discriminator: 1)
!5158 = !DILocation(line: 1248, column: 13, scope: !5143)
!5159 = !DILocation(line: 1249, column: 5, scope: !5144)
!5160 = !DILocation(line: 1250, column: 8, scope: !5080)
!5161 = !DILocation(line: 1250, column: 5, scope: !5080)
!5162 = !DILocation(line: 1253, column: 13, scope: !5080)
!5163 = !DILocation(line: 1253, column: 5, scope: !5080)
!5164 = !DILocation(line: 1254, column: 13, scope: !5080)
!5165 = !DILocation(line: 1254, column: 5, scope: !5080)
!5166 = !DILocation(line: 1255, column: 13, scope: !5080)
!5167 = !DILocation(line: 1255, column: 5, scope: !5080)
!5168 = !DILocation(line: 1256, column: 12, scope: !5080)
!5169 = !DILocation(line: 1256, column: 5, scope: !5080)
!5170 = distinct !DISubprogram(name: "file_square", scope: !10, file: !10, line: 1259, type: !85, isLocal: true, isDefinition: true, scopeLine: 1260, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5171 = !DILocalVariable(name: "s", arg: 1, scope: !5170, file: !10, line: 1259, type: !87)
!5172 = !DILocation(line: 1259, column: 32, scope: !5170)
!5173 = !DILocalVariable(name: "a", scope: !5170, file: !10, line: 1261, type: !187)
!5174 = !DILocation(line: 1261, column: 13, scope: !5170)
!5175 = !DILocalVariable(name: "square", scope: !5170, file: !10, line: 1261, type: !187)
!5176 = !DILocation(line: 1261, column: 23, scope: !5170)
!5177 = !DILocalVariable(name: "zero", scope: !5170, file: !10, line: 1261, type: !187)
!5178 = !DILocation(line: 1261, column: 39, scope: !5170)
!5179 = !DILocalVariable(name: "ret", scope: !5170, file: !10, line: 1261, type: !187)
!5180 = !DILocation(line: 1261, column: 53, scope: !5170)
!5181 = !DILocalVariable(name: "remainder", scope: !5170, file: !10, line: 1262, type: !187)
!5182 = !DILocation(line: 1262, column: 13, scope: !5170)
!5183 = !DILocalVariable(name: "tmp", scope: !5170, file: !10, line: 1262, type: !187)
!5184 = !DILocation(line: 1262, column: 31, scope: !5170)
!5185 = !DILocalVariable(name: "st", scope: !5170, file: !10, line: 1263, type: !4)
!5186 = !DILocation(line: 1263, column: 9, scope: !5170)
!5187 = !DILocation(line: 1265, column: 75, scope: !5188)
!5188 = distinct !DILexicalBlock(scope: !5170, file: !10, line: 1265, column: 9)
!5189 = !DILocation(line: 1265, column: 69, scope: !5188)
!5190 = !DILocation(line: 1265, column: 67, scope: !5188)
!5191 = !DILocation(line: 1265, column: 65, scope: !5188)
!5192 = !DILocation(line: 1265, column: 10, scope: !5193)
!5193 = !DILexicalBlockFile(scope: !5188, file: !10, discriminator: 2)
!5194 = !DILocation(line: 1265, column: 10, scope: !5188)
!5195 = !DILocation(line: 1266, column: 13, scope: !5188)
!5196 = !DILocation(line: 1266, column: 97, scope: !5197)
!5197 = !DILexicalBlockFile(scope: !5188, file: !10, discriminator: 1)
!5198 = !DILocation(line: 1266, column: 91, scope: !5197)
!5199 = !DILocation(line: 1266, column: 89, scope: !5197)
!5200 = !DILocation(line: 1266, column: 82, scope: !5197)
!5201 = !DILocation(line: 1266, column: 17, scope: !5202)
!5202 = !DILexicalBlockFile(scope: !5197, file: !10, discriminator: 2)
!5203 = !DILocation(line: 1266, column: 17, scope: !5197)
!5204 = !DILocation(line: 1267, column: 13, scope: !5188)
!5205 = !DILocation(line: 1267, column: 75, scope: !5197)
!5206 = !DILocation(line: 1267, column: 73, scope: !5197)
!5207 = !DILocation(line: 1267, column: 68, scope: !5197)
!5208 = !DILocation(line: 1267, column: 17, scope: !5202)
!5209 = !DILocation(line: 1267, column: 17, scope: !5197)
!5210 = !DILocation(line: 1268, column: 13, scope: !5188)
!5211 = !DILocation(line: 1268, column: 73, scope: !5197)
!5212 = !DILocation(line: 1268, column: 71, scope: !5197)
!5213 = !DILocation(line: 1268, column: 67, scope: !5197)
!5214 = !DILocation(line: 1268, column: 17, scope: !5202)
!5215 = !DILocation(line: 1268, column: 17, scope: !5197)
!5216 = !DILocation(line: 1269, column: 13, scope: !5188)
!5217 = !DILocation(line: 1269, column: 85, scope: !5197)
!5218 = !DILocation(line: 1269, column: 83, scope: !5197)
!5219 = !DILocation(line: 1269, column: 73, scope: !5197)
!5220 = !DILocation(line: 1269, column: 17, scope: !5202)
!5221 = !DILocation(line: 1269, column: 17, scope: !5197)
!5222 = !DILocation(line: 1265, column: 9, scope: !5223)
!5223 = !DILexicalBlockFile(scope: !5170, file: !10, discriminator: 1)
!5224 = !DILocation(line: 1270, column: 9, scope: !5188)
!5225 = !DILocation(line: 1272, column: 19, scope: !5170)
!5226 = !DILocation(line: 1272, column: 6, scope: !5170)
!5227 = !DILocation(line: 1273, column: 74, scope: !5228)
!5228 = distinct !DILexicalBlock(scope: !5170, file: !10, line: 1273, column: 9)
!5229 = !DILocation(line: 1273, column: 79, scope: !5228)
!5230 = !DILocation(line: 1273, column: 82, scope: !5228)
!5231 = !DILocation(line: 1273, column: 67, scope: !5228)
!5232 = !DILocation(line: 1273, column: 88, scope: !5228)
!5233 = !DILocation(line: 1273, column: 10, scope: !5234)
!5234 = !DILexicalBlockFile(scope: !5228, file: !10, discriminator: 2)
!5235 = !DILocation(line: 1273, column: 10, scope: !5228)
!5236 = !DILocation(line: 1274, column: 13, scope: !5228)
!5237 = !DILocation(line: 1274, column: 32, scope: !5238)
!5238 = !DILexicalBlockFile(scope: !5228, file: !10, discriminator: 1)
!5239 = !DILocation(line: 1274, column: 40, scope: !5238)
!5240 = !DILocation(line: 1274, column: 17, scope: !5238)
!5241 = !DILocation(line: 1275, column: 13, scope: !5228)
!5242 = !DILocation(line: 1275, column: 84, scope: !5238)
!5243 = !DILocation(line: 1275, column: 89, scope: !5238)
!5244 = !DILocation(line: 1275, column: 92, scope: !5238)
!5245 = !DILocation(line: 1275, column: 95, scope: !5238)
!5246 = !DILocation(line: 1275, column: 77, scope: !5238)
!5247 = !DILocation(line: 1275, column: 101, scope: !5238)
!5248 = !DILocation(line: 1275, column: 17, scope: !5249)
!5249 = !DILexicalBlockFile(scope: !5238, file: !10, discriminator: 2)
!5250 = !DILocation(line: 1275, column: 17, scope: !5238)
!5251 = !DILocation(line: 1276, column: 13, scope: !5228)
!5252 = !DILocation(line: 1276, column: 34, scope: !5238)
!5253 = !DILocation(line: 1276, column: 42, scope: !5238)
!5254 = !DILocation(line: 1276, column: 17, scope: !5238)
!5255 = !DILocation(line: 1277, column: 13, scope: !5228)
!5256 = !DILocation(line: 1277, column: 100, scope: !5238)
!5257 = !DILocation(line: 1277, column: 105, scope: !5238)
!5258 = !DILocation(line: 1277, column: 116, scope: !5238)
!5259 = !DILocation(line: 1277, column: 124, scope: !5238)
!5260 = !DILocation(line: 1277, column: 127, scope: !5238)
!5261 = !DILocation(line: 1277, column: 93, scope: !5238)
!5262 = !DILocation(line: 1277, column: 133, scope: !5238)
!5263 = !DILocation(line: 1277, column: 17, scope: !5249)
!5264 = !DILocation(line: 1277, column: 17, scope: !5238)
!5265 = !DILocation(line: 1278, column: 13, scope: !5228)
!5266 = !DILocation(line: 1278, column: 39, scope: !5238)
!5267 = !DILocation(line: 1278, column: 42, scope: !5238)
!5268 = !DILocation(line: 1278, column: 17, scope: !5238)
!5269 = !DILocation(line: 1279, column: 13, scope: !5228)
!5270 = !DILocation(line: 1279, column: 39, scope: !5238)
!5271 = !DILocation(line: 1279, column: 45, scope: !5238)
!5272 = !DILocation(line: 1279, column: 17, scope: !5238)
!5273 = !DILocation(line: 1273, column: 9, scope: !5223)
!5274 = !DILocation(line: 1280, column: 9, scope: !5228)
!5275 = !DILocation(line: 1308, column: 8, scope: !5170)
!5276 = !DILocation(line: 1308, column: 5, scope: !5170)
!5277 = !DILocation(line: 1310, column: 13, scope: !5170)
!5278 = !DILocation(line: 1310, column: 5, scope: !5170)
!5279 = !DILocation(line: 1311, column: 13, scope: !5170)
!5280 = !DILocation(line: 1311, column: 5, scope: !5170)
!5281 = !DILocation(line: 1312, column: 13, scope: !5170)
!5282 = !DILocation(line: 1312, column: 5, scope: !5170)
!5283 = !DILocation(line: 1313, column: 13, scope: !5170)
!5284 = !DILocation(line: 1313, column: 5, scope: !5170)
!5285 = !DILocation(line: 1314, column: 13, scope: !5170)
!5286 = !DILocation(line: 1314, column: 5, scope: !5170)
!5287 = !DILocation(line: 1315, column: 13, scope: !5170)
!5288 = !DILocation(line: 1315, column: 5, scope: !5170)
!5289 = !DILocation(line: 1316, column: 12, scope: !5170)
!5290 = !DILocation(line: 1316, column: 5, scope: !5170)
!5291 = distinct !DISubprogram(name: "file_product", scope: !10, file: !10, line: 1319, type: !85, isLocal: true, isDefinition: true, scopeLine: 1320, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5292 = !DILocalVariable(name: "s", arg: 1, scope: !5291, file: !10, line: 1319, type: !87)
!5293 = !DILocation(line: 1319, column: 33, scope: !5291)
!5294 = !DILocalVariable(name: "a", scope: !5291, file: !10, line: 1321, type: !187)
!5295 = !DILocation(line: 1321, column: 13, scope: !5291)
!5296 = !DILocalVariable(name: "b", scope: !5291, file: !10, line: 1321, type: !187)
!5297 = !DILocation(line: 1321, column: 23, scope: !5291)
!5298 = !DILocalVariable(name: "product", scope: !5291, file: !10, line: 1321, type: !187)
!5299 = !DILocation(line: 1321, column: 34, scope: !5291)
!5300 = !DILocalVariable(name: "ret", scope: !5291, file: !10, line: 1321, type: !187)
!5301 = !DILocation(line: 1321, column: 51, scope: !5291)
!5302 = !DILocalVariable(name: "remainder", scope: !5291, file: !10, line: 1322, type: !187)
!5303 = !DILocation(line: 1322, column: 13, scope: !5291)
!5304 = !DILocalVariable(name: "zero", scope: !5291, file: !10, line: 1322, type: !187)
!5305 = !DILocation(line: 1322, column: 31, scope: !5291)
!5306 = !DILocalVariable(name: "st", scope: !5291, file: !10, line: 1323, type: !4)
!5307 = !DILocation(line: 1323, column: 9, scope: !5291)
!5308 = !DILocation(line: 1325, column: 75, scope: !5309)
!5309 = distinct !DILexicalBlock(scope: !5291, file: !10, line: 1325, column: 9)
!5310 = !DILocation(line: 1325, column: 69, scope: !5309)
!5311 = !DILocation(line: 1325, column: 67, scope: !5309)
!5312 = !DILocation(line: 1325, column: 65, scope: !5309)
!5313 = !DILocation(line: 1325, column: 10, scope: !5314)
!5314 = !DILexicalBlockFile(scope: !5309, file: !10, discriminator: 2)
!5315 = !DILocation(line: 1325, column: 10, scope: !5309)
!5316 = !DILocation(line: 1326, column: 13, scope: !5309)
!5317 = !DILocation(line: 1326, column: 82, scope: !5318)
!5318 = !DILexicalBlockFile(scope: !5309, file: !10, discriminator: 1)
!5319 = !DILocation(line: 1326, column: 76, scope: !5318)
!5320 = !DILocation(line: 1326, column: 74, scope: !5318)
!5321 = !DILocation(line: 1326, column: 72, scope: !5318)
!5322 = !DILocation(line: 1326, column: 17, scope: !5323)
!5323 = !DILexicalBlockFile(scope: !5318, file: !10, discriminator: 2)
!5324 = !DILocation(line: 1326, column: 17, scope: !5318)
!5325 = !DILocation(line: 1327, column: 13, scope: !5309)
!5326 = !DILocation(line: 1327, column: 100, scope: !5318)
!5327 = !DILocation(line: 1327, column: 94, scope: !5318)
!5328 = !DILocation(line: 1327, column: 92, scope: !5318)
!5329 = !DILocation(line: 1327, column: 84, scope: !5318)
!5330 = !DILocation(line: 1327, column: 17, scope: !5323)
!5331 = !DILocation(line: 1327, column: 17, scope: !5318)
!5332 = !DILocation(line: 1328, column: 13, scope: !5309)
!5333 = !DILocation(line: 1328, column: 73, scope: !5318)
!5334 = !DILocation(line: 1328, column: 71, scope: !5318)
!5335 = !DILocation(line: 1328, column: 67, scope: !5318)
!5336 = !DILocation(line: 1328, column: 17, scope: !5323)
!5337 = !DILocation(line: 1328, column: 17, scope: !5318)
!5338 = !DILocation(line: 1329, column: 13, scope: !5309)
!5339 = !DILocation(line: 1329, column: 85, scope: !5318)
!5340 = !DILocation(line: 1329, column: 83, scope: !5318)
!5341 = !DILocation(line: 1329, column: 73, scope: !5318)
!5342 = !DILocation(line: 1329, column: 17, scope: !5323)
!5343 = !DILocation(line: 1329, column: 17, scope: !5318)
!5344 = !DILocation(line: 1330, column: 13, scope: !5309)
!5345 = !DILocation(line: 1330, column: 75, scope: !5318)
!5346 = !DILocation(line: 1330, column: 73, scope: !5318)
!5347 = !DILocation(line: 1330, column: 68, scope: !5318)
!5348 = !DILocation(line: 1330, column: 17, scope: !5323)
!5349 = !DILocation(line: 1330, column: 17, scope: !5318)
!5350 = !DILocation(line: 1325, column: 9, scope: !5351)
!5351 = !DILexicalBlockFile(scope: !5291, file: !10, discriminator: 1)
!5352 = !DILocation(line: 1331, column: 9, scope: !5309)
!5353 = !DILocation(line: 1333, column: 19, scope: !5291)
!5354 = !DILocation(line: 1333, column: 6, scope: !5291)
!5355 = !DILocation(line: 1335, column: 77, scope: !5356)
!5356 = distinct !DILexicalBlock(scope: !5291, file: !10, line: 1335, column: 9)
!5357 = !DILocation(line: 1335, column: 82, scope: !5356)
!5358 = !DILocation(line: 1335, column: 85, scope: !5356)
!5359 = !DILocation(line: 1335, column: 88, scope: !5356)
!5360 = !DILocation(line: 1335, column: 70, scope: !5356)
!5361 = !DILocation(line: 1335, column: 94, scope: !5356)
!5362 = !DILocation(line: 1335, column: 10, scope: !5363)
!5363 = !DILexicalBlockFile(scope: !5356, file: !10, discriminator: 2)
!5364 = !DILocation(line: 1335, column: 10, scope: !5356)
!5365 = !DILocation(line: 1336, column: 13, scope: !5356)
!5366 = !DILocation(line: 1336, column: 34, scope: !5367)
!5367 = !DILexicalBlockFile(scope: !5356, file: !10, discriminator: 1)
!5368 = !DILocation(line: 1336, column: 43, scope: !5367)
!5369 = !DILocation(line: 1336, column: 17, scope: !5367)
!5370 = !DILocation(line: 1337, column: 13, scope: !5356)
!5371 = !DILocation(line: 1337, column: 101, scope: !5367)
!5372 = !DILocation(line: 1337, column: 106, scope: !5367)
!5373 = !DILocation(line: 1337, column: 117, scope: !5367)
!5374 = !DILocation(line: 1337, column: 126, scope: !5367)
!5375 = !DILocation(line: 1337, column: 129, scope: !5367)
!5376 = !DILocation(line: 1337, column: 94, scope: !5367)
!5377 = !DILocation(line: 1337, column: 135, scope: !5367)
!5378 = !DILocation(line: 1337, column: 17, scope: !5379)
!5379 = !DILexicalBlockFile(scope: !5367, file: !10, discriminator: 2)
!5380 = !DILocation(line: 1337, column: 17, scope: !5367)
!5381 = !DILocation(line: 1338, column: 13, scope: !5356)
!5382 = !DILocation(line: 1338, column: 40, scope: !5367)
!5383 = !DILocation(line: 1338, column: 43, scope: !5367)
!5384 = !DILocation(line: 1338, column: 17, scope: !5367)
!5385 = !DILocation(line: 1339, column: 13, scope: !5356)
!5386 = !DILocation(line: 1339, column: 40, scope: !5367)
!5387 = !DILocation(line: 1339, column: 46, scope: !5367)
!5388 = !DILocation(line: 1339, column: 17, scope: !5367)
!5389 = !DILocation(line: 1340, column: 13, scope: !5356)
!5390 = !DILocation(line: 1340, column: 101, scope: !5367)
!5391 = !DILocation(line: 1340, column: 106, scope: !5367)
!5392 = !DILocation(line: 1340, column: 117, scope: !5367)
!5393 = !DILocation(line: 1340, column: 126, scope: !5367)
!5394 = !DILocation(line: 1340, column: 129, scope: !5367)
!5395 = !DILocation(line: 1340, column: 94, scope: !5367)
!5396 = !DILocation(line: 1340, column: 135, scope: !5367)
!5397 = !DILocation(line: 1340, column: 17, scope: !5379)
!5398 = !DILocation(line: 1340, column: 17, scope: !5367)
!5399 = !DILocation(line: 1341, column: 13, scope: !5356)
!5400 = !DILocation(line: 1341, column: 40, scope: !5367)
!5401 = !DILocation(line: 1341, column: 43, scope: !5367)
!5402 = !DILocation(line: 1341, column: 17, scope: !5367)
!5403 = !DILocation(line: 1342, column: 13, scope: !5356)
!5404 = !DILocation(line: 1342, column: 40, scope: !5367)
!5405 = !DILocation(line: 1342, column: 46, scope: !5367)
!5406 = !DILocation(line: 1342, column: 17, scope: !5367)
!5407 = !DILocation(line: 1335, column: 9, scope: !5351)
!5408 = !DILocation(line: 1343, column: 9, scope: !5356)
!5409 = !DILocation(line: 1345, column: 8, scope: !5291)
!5410 = !DILocation(line: 1345, column: 5, scope: !5291)
!5411 = !DILocation(line: 1347, column: 13, scope: !5291)
!5412 = !DILocation(line: 1347, column: 5, scope: !5291)
!5413 = !DILocation(line: 1348, column: 13, scope: !5291)
!5414 = !DILocation(line: 1348, column: 5, scope: !5291)
!5415 = !DILocation(line: 1349, column: 13, scope: !5291)
!5416 = !DILocation(line: 1349, column: 5, scope: !5291)
!5417 = !DILocation(line: 1350, column: 13, scope: !5291)
!5418 = !DILocation(line: 1350, column: 5, scope: !5291)
!5419 = !DILocation(line: 1351, column: 13, scope: !5291)
!5420 = !DILocation(line: 1351, column: 5, scope: !5291)
!5421 = !DILocation(line: 1352, column: 13, scope: !5291)
!5422 = !DILocation(line: 1352, column: 5, scope: !5291)
!5423 = !DILocation(line: 1353, column: 12, scope: !5291)
!5424 = !DILocation(line: 1353, column: 5, scope: !5291)
!5425 = distinct !DISubprogram(name: "file_quotient", scope: !10, file: !10, line: 1356, type: !85, isLocal: true, isDefinition: true, scopeLine: 1357, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5426 = !DILocalVariable(name: "s", arg: 1, scope: !5425, file: !10, line: 1356, type: !87)
!5427 = !DILocation(line: 1356, column: 34, scope: !5425)
!5428 = !DILocalVariable(name: "a", scope: !5425, file: !10, line: 1358, type: !187)
!5429 = !DILocation(line: 1358, column: 13, scope: !5425)
!5430 = !DILocalVariable(name: "b", scope: !5425, file: !10, line: 1358, type: !187)
!5431 = !DILocation(line: 1358, column: 23, scope: !5425)
!5432 = !DILocalVariable(name: "quotient", scope: !5425, file: !10, line: 1358, type: !187)
!5433 = !DILocation(line: 1358, column: 34, scope: !5425)
!5434 = !DILocalVariable(name: "remainder", scope: !5425, file: !10, line: 1358, type: !187)
!5435 = !DILocation(line: 1358, column: 52, scope: !5425)
!5436 = !DILocalVariable(name: "ret", scope: !5425, file: !10, line: 1359, type: !187)
!5437 = !DILocation(line: 1359, column: 13, scope: !5425)
!5438 = !DILocalVariable(name: "ret2", scope: !5425, file: !10, line: 1359, type: !187)
!5439 = !DILocation(line: 1359, column: 25, scope: !5425)
!5440 = !DILocalVariable(name: "nnmod", scope: !5425, file: !10, line: 1359, type: !187)
!5441 = !DILocation(line: 1359, column: 39, scope: !5425)
!5442 = !DILocalVariable(name: "b_word", scope: !5425, file: !10, line: 1360, type: !6)
!5443 = !DILocation(line: 1360, column: 19, scope: !5425)
!5444 = !DILocalVariable(name: "ret_word", scope: !5425, file: !10, line: 1360, type: !6)
!5445 = !DILocation(line: 1360, column: 27, scope: !5425)
!5446 = !DILocalVariable(name: "st", scope: !5425, file: !10, line: 1361, type: !4)
!5447 = !DILocation(line: 1361, column: 9, scope: !5425)
!5448 = !DILocation(line: 1363, column: 75, scope: !5449)
!5449 = distinct !DILexicalBlock(scope: !5425, file: !10, line: 1363, column: 9)
!5450 = !DILocation(line: 1363, column: 69, scope: !5449)
!5451 = !DILocation(line: 1363, column: 67, scope: !5449)
!5452 = !DILocation(line: 1363, column: 65, scope: !5449)
!5453 = !DILocation(line: 1363, column: 10, scope: !5454)
!5454 = !DILexicalBlockFile(scope: !5449, file: !10, discriminator: 2)
!5455 = !DILocation(line: 1363, column: 10, scope: !5449)
!5456 = !DILocation(line: 1364, column: 13, scope: !5449)
!5457 = !DILocation(line: 1364, column: 82, scope: !5458)
!5458 = !DILexicalBlockFile(scope: !5449, file: !10, discriminator: 1)
!5459 = !DILocation(line: 1364, column: 76, scope: !5458)
!5460 = !DILocation(line: 1364, column: 74, scope: !5458)
!5461 = !DILocation(line: 1364, column: 72, scope: !5458)
!5462 = !DILocation(line: 1364, column: 17, scope: !5463)
!5463 = !DILexicalBlockFile(scope: !5458, file: !10, discriminator: 2)
!5464 = !DILocation(line: 1364, column: 17, scope: !5458)
!5465 = !DILocation(line: 1365, column: 13, scope: !5449)
!5466 = !DILocation(line: 1365, column: 103, scope: !5458)
!5467 = !DILocation(line: 1365, column: 97, scope: !5458)
!5468 = !DILocation(line: 1365, column: 95, scope: !5458)
!5469 = !DILocation(line: 1365, column: 86, scope: !5458)
!5470 = !DILocation(line: 1365, column: 17, scope: !5463)
!5471 = !DILocation(line: 1365, column: 17, scope: !5458)
!5472 = !DILocation(line: 1366, column: 13, scope: !5449)
!5473 = !DILocation(line: 1366, column: 106, scope: !5458)
!5474 = !DILocation(line: 1366, column: 100, scope: !5458)
!5475 = !DILocation(line: 1366, column: 98, scope: !5458)
!5476 = !DILocation(line: 1366, column: 88, scope: !5458)
!5477 = !DILocation(line: 1366, column: 17, scope: !5463)
!5478 = !DILocation(line: 1366, column: 17, scope: !5458)
!5479 = !DILocation(line: 1367, column: 13, scope: !5449)
!5480 = !DILocation(line: 1367, column: 73, scope: !5458)
!5481 = !DILocation(line: 1367, column: 71, scope: !5458)
!5482 = !DILocation(line: 1367, column: 67, scope: !5458)
!5483 = !DILocation(line: 1367, column: 17, scope: !5463)
!5484 = !DILocation(line: 1367, column: 17, scope: !5458)
!5485 = !DILocation(line: 1368, column: 13, scope: !5449)
!5486 = !DILocation(line: 1368, column: 75, scope: !5458)
!5487 = !DILocation(line: 1368, column: 73, scope: !5458)
!5488 = !DILocation(line: 1368, column: 68, scope: !5458)
!5489 = !DILocation(line: 1368, column: 17, scope: !5463)
!5490 = !DILocation(line: 1368, column: 17, scope: !5458)
!5491 = !DILocation(line: 1369, column: 13, scope: !5449)
!5492 = !DILocation(line: 1369, column: 77, scope: !5458)
!5493 = !DILocation(line: 1369, column: 75, scope: !5458)
!5494 = !DILocation(line: 1369, column: 69, scope: !5458)
!5495 = !DILocation(line: 1369, column: 17, scope: !5463)
!5496 = !DILocation(line: 1369, column: 17, scope: !5458)
!5497 = !DILocation(line: 1363, column: 9, scope: !5498)
!5498 = !DILexicalBlockFile(scope: !5425, file: !10, discriminator: 1)
!5499 = !DILocation(line: 1370, column: 9, scope: !5449)
!5500 = !DILocation(line: 1372, column: 83, scope: !5501)
!5501 = distinct !DILexicalBlock(scope: !5425, file: !10, line: 1372, column: 9)
!5502 = !DILocation(line: 1372, column: 88, scope: !5501)
!5503 = !DILocation(line: 1372, column: 94, scope: !5501)
!5504 = !DILocation(line: 1372, column: 97, scope: !5501)
!5505 = !DILocation(line: 1372, column: 100, scope: !5501)
!5506 = !DILocation(line: 1372, column: 76, scope: !5501)
!5507 = !DILocation(line: 1372, column: 106, scope: !5501)
!5508 = !DILocation(line: 1372, column: 10, scope: !5509)
!5509 = !DILexicalBlockFile(scope: !5501, file: !10, discriminator: 2)
!5510 = !DILocation(line: 1372, column: 10, scope: !5501)
!5511 = !DILocation(line: 1373, column: 13, scope: !5501)
!5512 = !DILocation(line: 1373, column: 34, scope: !5513)
!5513 = !DILexicalBlockFile(scope: !5501, file: !10, discriminator: 1)
!5514 = !DILocation(line: 1373, column: 44, scope: !5513)
!5515 = !DILocation(line: 1373, column: 17, scope: !5513)
!5516 = !DILocation(line: 1374, column: 13, scope: !5501)
!5517 = !DILocation(line: 1374, column: 34, scope: !5513)
!5518 = !DILocation(line: 1374, column: 45, scope: !5513)
!5519 = !DILocation(line: 1374, column: 17, scope: !5513)
!5520 = !DILocation(line: 1375, column: 13, scope: !5501)
!5521 = !DILocation(line: 1375, column: 91, scope: !5513)
!5522 = !DILocation(line: 1375, column: 96, scope: !5513)
!5523 = !DILocation(line: 1375, column: 106, scope: !5513)
!5524 = !DILocation(line: 1375, column: 109, scope: !5513)
!5525 = !DILocation(line: 1375, column: 84, scope: !5513)
!5526 = !DILocation(line: 1375, column: 115, scope: !5513)
!5527 = !DILocation(line: 1375, column: 17, scope: !5528)
!5528 = !DILexicalBlockFile(scope: !5513, file: !10, discriminator: 2)
!5529 = !DILocation(line: 1375, column: 17, scope: !5513)
!5530 = !DILocation(line: 1376, column: 13, scope: !5501)
!5531 = !DILocation(line: 1376, column: 89, scope: !5513)
!5532 = !DILocation(line: 1376, column: 94, scope: !5513)
!5533 = !DILocation(line: 1376, column: 99, scope: !5513)
!5534 = !DILocation(line: 1376, column: 82, scope: !5513)
!5535 = !DILocation(line: 1376, column: 111, scope: !5513)
!5536 = !DILocation(line: 1376, column: 17, scope: !5528)
!5537 = !DILocation(line: 1376, column: 17, scope: !5513)
!5538 = !DILocation(line: 1377, column: 13, scope: !5501)
!5539 = !DILocation(line: 1377, column: 53, scope: !5513)
!5540 = !DILocation(line: 1377, column: 56, scope: !5513)
!5541 = !DILocation(line: 1377, column: 17, scope: !5513)
!5542 = !DILocation(line: 1372, column: 9, scope: !5498)
!5543 = !DILocation(line: 1378, column: 9, scope: !5501)
!5544 = !DILocation(line: 1384, column: 26, scope: !5425)
!5545 = !DILocation(line: 1384, column: 14, scope: !5425)
!5546 = !DILocation(line: 1384, column: 12, scope: !5425)
!5547 = !DILocation(line: 1385, column: 25, scope: !5548)
!5548 = distinct !DILexicalBlock(scope: !5425, file: !10, line: 1385, column: 9)
!5549 = !DILocation(line: 1385, column: 10, scope: !5548)
!5550 = !DILocation(line: 1385, column: 28, scope: !5548)
!5551 = !DILocation(line: 1385, column: 31, scope: !5552)
!5552 = !DILexicalBlockFile(scope: !5548, file: !10, discriminator: 1)
!5553 = !DILocation(line: 1385, column: 38, scope: !5552)
!5554 = !DILocation(line: 1385, column: 9, scope: !5552)
!5555 = !DILocalVariable(name: "remainder_word", scope: !5556, file: !10, line: 1386, type: !6)
!5556 = distinct !DILexicalBlock(scope: !5548, file: !10, line: 1385, column: 60)
!5557 = !DILocation(line: 1386, column: 23, scope: !5556)
!5558 = !DILocation(line: 1386, column: 52, scope: !5556)
!5559 = !DILocation(line: 1386, column: 40, scope: !5556)
!5560 = !DILocation(line: 1389, column: 73, scope: !5561)
!5561 = distinct !DILexicalBlock(scope: !5556, file: !10, line: 1389, column: 13)
!5562 = !DILocation(line: 1389, column: 78, scope: !5561)
!5563 = !DILocation(line: 1389, column: 65, scope: !5561)
!5564 = !DILocation(line: 1389, column: 14, scope: !5565)
!5565 = !DILexicalBlockFile(scope: !5561, file: !10, discriminator: 1)
!5566 = !DILocation(line: 1389, column: 14, scope: !5561)
!5567 = !DILocation(line: 1389, column: 13, scope: !5556)
!5568 = !DILocation(line: 1390, column: 13, scope: !5561)
!5569 = !DILocation(line: 1391, column: 32, scope: !5556)
!5570 = !DILocation(line: 1391, column: 37, scope: !5556)
!5571 = !DILocation(line: 1391, column: 20, scope: !5556)
!5572 = !DILocation(line: 1391, column: 18, scope: !5556)
!5573 = !DILocation(line: 1392, column: 13, scope: !5574)
!5574 = distinct !DILexicalBlock(scope: !5556, file: !10, line: 1392, column: 13)
!5575 = !DILocation(line: 1392, column: 25, scope: !5574)
!5576 = !DILocation(line: 1392, column: 22, scope: !5574)
!5577 = !DILocation(line: 1392, column: 13, scope: !5556)
!5578 = !DILocation(line: 1398, column: 13, scope: !5579)
!5579 = distinct !DILexicalBlock(scope: !5574, file: !10, line: 1392, column: 41)
!5580 = !DILocation(line: 1400, column: 13, scope: !5579)
!5581 = !DILocation(line: 1402, column: 39, scope: !5582)
!5582 = distinct !DILexicalBlock(scope: !5556, file: !10, line: 1402, column: 13)
!5583 = !DILocation(line: 1402, column: 49, scope: !5582)
!5584 = !DILocation(line: 1402, column: 14, scope: !5582)
!5585 = !DILocation(line: 1402, column: 13, scope: !5556)
!5586 = !DILocation(line: 1403, column: 13, scope: !5582)
!5587 = !DILocation(line: 1405, column: 32, scope: !5556)
!5588 = !DILocation(line: 1405, column: 35, scope: !5556)
!5589 = !DILocation(line: 1405, column: 20, scope: !5556)
!5590 = !DILocation(line: 1405, column: 18, scope: !5556)
!5591 = !DILocation(line: 1406, column: 13, scope: !5592)
!5592 = distinct !DILexicalBlock(scope: !5556, file: !10, line: 1406, column: 13)
!5593 = !DILocation(line: 1406, column: 25, scope: !5592)
!5594 = !DILocation(line: 1406, column: 22, scope: !5592)
!5595 = !DILocation(line: 1406, column: 13, scope: !5556)
!5596 = !DILocation(line: 1412, column: 13, scope: !5597)
!5597 = distinct !DILexicalBlock(scope: !5592, file: !10, line: 1406, column: 41)
!5598 = !DILocation(line: 1414, column: 13, scope: !5597)
!5599 = !DILocation(line: 1416, column: 5, scope: !5556)
!5600 = !DILocation(line: 1419, column: 25, scope: !5601)
!5601 = distinct !DILexicalBlock(scope: !5425, file: !10, line: 1419, column: 9)
!5602 = !DILocation(line: 1419, column: 10, scope: !5601)
!5603 = !DILocation(line: 1419, column: 9, scope: !5425)
!5604 = !DILocation(line: 1420, column: 85, scope: !5605)
!5605 = distinct !DILexicalBlock(scope: !5606, file: !10, line: 1420, column: 13)
!5606 = distinct !DILexicalBlock(scope: !5601, file: !10, line: 1419, column: 29)
!5607 = !DILocation(line: 1420, column: 92, scope: !5605)
!5608 = !DILocation(line: 1420, column: 77, scope: !5605)
!5609 = !DILocation(line: 1420, column: 104, scope: !5605)
!5610 = !DILocation(line: 1420, column: 14, scope: !5611)
!5611 = !DILexicalBlockFile(scope: !5605, file: !10, discriminator: 2)
!5612 = !DILocation(line: 1420, column: 14, scope: !5605)
!5613 = !DILocation(line: 1421, column: 17, scope: !5605)
!5614 = !DILocation(line: 1421, column: 36, scope: !5615)
!5615 = !DILexicalBlockFile(scope: !5605, file: !10, discriminator: 1)
!5616 = !DILocation(line: 1421, column: 21, scope: !5615)
!5617 = !DILocation(line: 1422, column: 25, scope: !5605)
!5618 = !DILocation(line: 1422, column: 97, scope: !5615)
!5619 = !DILocation(line: 1422, column: 104, scope: !5615)
!5620 = !DILocation(line: 1422, column: 111, scope: !5615)
!5621 = !DILocation(line: 1422, column: 90, scope: !5615)
!5622 = !DILocation(line: 1422, column: 115, scope: !5615)
!5623 = !DILocation(line: 1422, column: 29, scope: !5624)
!5624 = !DILexicalBlockFile(scope: !5615, file: !10, discriminator: 2)
!5625 = !DILocation(line: 1422, column: 29, scope: !5615)
!5626 = !DILocation(line: 1423, column: 17, scope: !5605)
!5627 = !DILocation(line: 1423, column: 92, scope: !5615)
!5628 = !DILocation(line: 1423, column: 97, scope: !5615)
!5629 = !DILocation(line: 1423, column: 100, scope: !5615)
!5630 = !DILocation(line: 1423, column: 103, scope: !5615)
!5631 = !DILocation(line: 1423, column: 83, scope: !5615)
!5632 = !DILocation(line: 1423, column: 109, scope: !5615)
!5633 = !DILocation(line: 1423, column: 21, scope: !5624)
!5634 = !DILocation(line: 1423, column: 21, scope: !5615)
!5635 = !DILocation(line: 1424, column: 17, scope: !5605)
!5636 = !DILocation(line: 1424, column: 53, scope: !5615)
!5637 = !DILocation(line: 1424, column: 60, scope: !5615)
!5638 = !DILocation(line: 1424, column: 21, scope: !5615)
!5639 = !DILocation(line: 1420, column: 13, scope: !5640)
!5640 = !DILexicalBlockFile(scope: !5606, file: !10, discriminator: 1)
!5641 = !DILocation(line: 1425, column: 13, scope: !5605)
!5642 = !DILocation(line: 1426, column: 5, scope: !5606)
!5643 = !DILocation(line: 1428, column: 8, scope: !5425)
!5644 = !DILocation(line: 1428, column: 5, scope: !5425)
!5645 = !DILocation(line: 1430, column: 13, scope: !5425)
!5646 = !DILocation(line: 1430, column: 5, scope: !5425)
!5647 = !DILocation(line: 1431, column: 13, scope: !5425)
!5648 = !DILocation(line: 1431, column: 5, scope: !5425)
!5649 = !DILocation(line: 1432, column: 13, scope: !5425)
!5650 = !DILocation(line: 1432, column: 5, scope: !5425)
!5651 = !DILocation(line: 1433, column: 13, scope: !5425)
!5652 = !DILocation(line: 1433, column: 5, scope: !5425)
!5653 = !DILocation(line: 1434, column: 13, scope: !5425)
!5654 = !DILocation(line: 1434, column: 5, scope: !5425)
!5655 = !DILocation(line: 1435, column: 13, scope: !5425)
!5656 = !DILocation(line: 1435, column: 5, scope: !5425)
!5657 = !DILocation(line: 1436, column: 13, scope: !5425)
!5658 = !DILocation(line: 1436, column: 5, scope: !5425)
!5659 = !DILocation(line: 1437, column: 12, scope: !5425)
!5660 = !DILocation(line: 1437, column: 5, scope: !5425)
!5661 = distinct !DISubprogram(name: "file_modmul", scope: !10, file: !10, line: 1440, type: !85, isLocal: true, isDefinition: true, scopeLine: 1441, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5662 = !DILocalVariable(name: "s", arg: 1, scope: !5661, file: !10, line: 1440, type: !87)
!5663 = !DILocation(line: 1440, column: 32, scope: !5661)
!5664 = !DILocalVariable(name: "a", scope: !5661, file: !10, line: 1442, type: !187)
!5665 = !DILocation(line: 1442, column: 13, scope: !5661)
!5666 = !DILocalVariable(name: "b", scope: !5661, file: !10, line: 1442, type: !187)
!5667 = !DILocation(line: 1442, column: 23, scope: !5661)
!5668 = !DILocalVariable(name: "m", scope: !5661, file: !10, line: 1442, type: !187)
!5669 = !DILocation(line: 1442, column: 34, scope: !5661)
!5670 = !DILocalVariable(name: "mod_mul", scope: !5661, file: !10, line: 1442, type: !187)
!5671 = !DILocation(line: 1442, column: 45, scope: !5661)
!5672 = !DILocalVariable(name: "ret", scope: !5661, file: !10, line: 1442, type: !187)
!5673 = !DILocation(line: 1442, column: 62, scope: !5661)
!5674 = !DILocalVariable(name: "st", scope: !5661, file: !10, line: 1443, type: !4)
!5675 = !DILocation(line: 1443, column: 9, scope: !5661)
!5676 = !DILocation(line: 1445, column: 75, scope: !5677)
!5677 = distinct !DILexicalBlock(scope: !5661, file: !10, line: 1445, column: 9)
!5678 = !DILocation(line: 1445, column: 69, scope: !5677)
!5679 = !DILocation(line: 1445, column: 67, scope: !5677)
!5680 = !DILocation(line: 1445, column: 65, scope: !5677)
!5681 = !DILocation(line: 1445, column: 10, scope: !5682)
!5682 = !DILexicalBlockFile(scope: !5677, file: !10, discriminator: 2)
!5683 = !DILocation(line: 1445, column: 10, scope: !5677)
!5684 = !DILocation(line: 1446, column: 13, scope: !5677)
!5685 = !DILocation(line: 1446, column: 82, scope: !5686)
!5686 = !DILexicalBlockFile(scope: !5677, file: !10, discriminator: 1)
!5687 = !DILocation(line: 1446, column: 76, scope: !5686)
!5688 = !DILocation(line: 1446, column: 74, scope: !5686)
!5689 = !DILocation(line: 1446, column: 72, scope: !5686)
!5690 = !DILocation(line: 1446, column: 17, scope: !5691)
!5691 = !DILexicalBlockFile(scope: !5686, file: !10, discriminator: 2)
!5692 = !DILocation(line: 1446, column: 17, scope: !5686)
!5693 = !DILocation(line: 1447, column: 13, scope: !5677)
!5694 = !DILocation(line: 1447, column: 82, scope: !5686)
!5695 = !DILocation(line: 1447, column: 76, scope: !5686)
!5696 = !DILocation(line: 1447, column: 74, scope: !5686)
!5697 = !DILocation(line: 1447, column: 72, scope: !5686)
!5698 = !DILocation(line: 1447, column: 17, scope: !5691)
!5699 = !DILocation(line: 1447, column: 17, scope: !5686)
!5700 = !DILocation(line: 1448, column: 13, scope: !5677)
!5701 = !DILocation(line: 1448, column: 99, scope: !5686)
!5702 = !DILocation(line: 1448, column: 93, scope: !5686)
!5703 = !DILocation(line: 1448, column: 91, scope: !5686)
!5704 = !DILocation(line: 1448, column: 83, scope: !5686)
!5705 = !DILocation(line: 1448, column: 17, scope: !5691)
!5706 = !DILocation(line: 1448, column: 17, scope: !5686)
!5707 = !DILocation(line: 1449, column: 13, scope: !5677)
!5708 = !DILocation(line: 1449, column: 73, scope: !5686)
!5709 = !DILocation(line: 1449, column: 71, scope: !5686)
!5710 = !DILocation(line: 1449, column: 67, scope: !5686)
!5711 = !DILocation(line: 1449, column: 17, scope: !5691)
!5712 = !DILocation(line: 1449, column: 17, scope: !5686)
!5713 = !DILocation(line: 1445, column: 9, scope: !5714)
!5714 = !DILexicalBlockFile(scope: !5661, file: !10, discriminator: 1)
!5715 = !DILocation(line: 1450, column: 9, scope: !5677)
!5716 = !DILocation(line: 1452, column: 88, scope: !5717)
!5717 = distinct !DILexicalBlock(scope: !5661, file: !10, line: 1452, column: 9)
!5718 = !DILocation(line: 1452, column: 93, scope: !5717)
!5719 = !DILocation(line: 1452, column: 96, scope: !5717)
!5720 = !DILocation(line: 1452, column: 99, scope: !5717)
!5721 = !DILocation(line: 1452, column: 102, scope: !5717)
!5722 = !DILocation(line: 1452, column: 77, scope: !5717)
!5723 = !DILocation(line: 1452, column: 108, scope: !5717)
!5724 = !DILocation(line: 1452, column: 10, scope: !5725)
!5725 = !DILexicalBlockFile(scope: !5717, file: !10, discriminator: 2)
!5726 = !DILocation(line: 1452, column: 10, scope: !5717)
!5727 = !DILocation(line: 1453, column: 13, scope: !5717)
!5728 = !DILocation(line: 1453, column: 42, scope: !5729)
!5729 = !DILexicalBlockFile(scope: !5717, file: !10, discriminator: 1)
!5730 = !DILocation(line: 1453, column: 51, scope: !5729)
!5731 = !DILocation(line: 1453, column: 17, scope: !5729)
!5732 = !DILocation(line: 1452, column: 9, scope: !5714)
!5733 = !DILocation(line: 1454, column: 9, scope: !5717)
!5734 = !DILocation(line: 1456, column: 19, scope: !5735)
!5735 = distinct !DILexicalBlock(scope: !5661, file: !10, line: 1456, column: 9)
!5736 = !DILocation(line: 1456, column: 9, scope: !5735)
!5737 = !DILocation(line: 1456, column: 9, scope: !5661)
!5738 = !DILocalVariable(name: "mont", scope: !5739, file: !10, line: 1458, type: !584)
!5739 = distinct !DILexicalBlock(scope: !5735, file: !10, line: 1456, column: 23)
!5740 = !DILocation(line: 1458, column: 22, scope: !5739)
!5741 = !DILocation(line: 1458, column: 29, scope: !5739)
!5742 = !DILocalVariable(name: "a_tmp", scope: !5739, file: !10, line: 1459, type: !187)
!5743 = !DILocation(line: 1459, column: 17, scope: !5739)
!5744 = !DILocation(line: 1459, column: 25, scope: !5739)
!5745 = !DILocalVariable(name: "b_tmp", scope: !5739, file: !10, line: 1460, type: !187)
!5746 = !DILocation(line: 1460, column: 17, scope: !5739)
!5747 = !DILocation(line: 1460, column: 25, scope: !5739)
!5748 = !DILocation(line: 1462, column: 13, scope: !5749)
!5749 = distinct !DILexicalBlock(scope: !5739, file: !10, line: 1462, column: 13)
!5750 = !DILocation(line: 1462, column: 18, scope: !5749)
!5751 = !DILocation(line: 1462, column: 25, scope: !5749)
!5752 = !DILocation(line: 1462, column: 28, scope: !5753)
!5753 = !DILexicalBlockFile(scope: !5749, file: !10, discriminator: 1)
!5754 = !DILocation(line: 1462, column: 34, scope: !5753)
!5755 = !DILocation(line: 1462, column: 42, scope: !5753)
!5756 = !DILocation(line: 1462, column: 45, scope: !5757)
!5757 = !DILexicalBlockFile(scope: !5749, file: !10, discriminator: 2)
!5758 = !DILocation(line: 1462, column: 51, scope: !5757)
!5759 = !DILocation(line: 1463, column: 16, scope: !5749)
!5760 = !DILocation(line: 1463, column: 103, scope: !5753)
!5761 = !DILocation(line: 1463, column: 109, scope: !5753)
!5762 = !DILocation(line: 1463, column: 112, scope: !5753)
!5763 = !DILocation(line: 1463, column: 87, scope: !5753)
!5764 = !DILocation(line: 1463, column: 118, scope: !5753)
!5765 = !DILocation(line: 1463, column: 20, scope: !5766)
!5766 = !DILexicalBlockFile(scope: !5753, file: !10, discriminator: 2)
!5767 = !DILocation(line: 1463, column: 20, scope: !5753)
!5768 = !DILocation(line: 1464, column: 17, scope: !5749)
!5769 = !DILocation(line: 1464, column: 94, scope: !5753)
!5770 = !DILocation(line: 1464, column: 101, scope: !5753)
!5771 = !DILocation(line: 1464, column: 104, scope: !5753)
!5772 = !DILocation(line: 1464, column: 107, scope: !5753)
!5773 = !DILocation(line: 1464, column: 85, scope: !5753)
!5774 = !DILocation(line: 1464, column: 113, scope: !5753)
!5775 = !DILocation(line: 1464, column: 21, scope: !5766)
!5776 = !DILocation(line: 1464, column: 21, scope: !5753)
!5777 = !DILocation(line: 1465, column: 17, scope: !5749)
!5778 = !DILocation(line: 1465, column: 94, scope: !5753)
!5779 = !DILocation(line: 1465, column: 101, scope: !5753)
!5780 = !DILocation(line: 1465, column: 104, scope: !5753)
!5781 = !DILocation(line: 1465, column: 107, scope: !5753)
!5782 = !DILocation(line: 1465, column: 85, scope: !5753)
!5783 = !DILocation(line: 1465, column: 113, scope: !5753)
!5784 = !DILocation(line: 1465, column: 21, scope: !5766)
!5785 = !DILocation(line: 1465, column: 21, scope: !5753)
!5786 = !DILocation(line: 1466, column: 17, scope: !5749)
!5787 = !DILocation(line: 1466, column: 117, scope: !5753)
!5788 = !DILocation(line: 1466, column: 124, scope: !5753)
!5789 = !DILocation(line: 1466, column: 131, scope: !5753)
!5790 = !DILocation(line: 1466, column: 137, scope: !5753)
!5791 = !DILocation(line: 1466, column: 100, scope: !5753)
!5792 = !DILocation(line: 1466, column: 143, scope: !5753)
!5793 = !DILocation(line: 1466, column: 21, scope: !5766)
!5794 = !DILocation(line: 1466, column: 21, scope: !5753)
!5795 = !DILocation(line: 1467, column: 17, scope: !5749)
!5796 = !DILocation(line: 1467, column: 117, scope: !5753)
!5797 = !DILocation(line: 1467, column: 124, scope: !5753)
!5798 = !DILocation(line: 1467, column: 131, scope: !5753)
!5799 = !DILocation(line: 1467, column: 137, scope: !5753)
!5800 = !DILocation(line: 1467, column: 100, scope: !5753)
!5801 = !DILocation(line: 1467, column: 143, scope: !5753)
!5802 = !DILocation(line: 1467, column: 21, scope: !5766)
!5803 = !DILocation(line: 1467, column: 21, scope: !5753)
!5804 = !DILocation(line: 1468, column: 17, scope: !5749)
!5805 = !DILocation(line: 1468, column: 101, scope: !5753)
!5806 = !DILocation(line: 1468, column: 106, scope: !5753)
!5807 = !DILocation(line: 1468, column: 113, scope: !5753)
!5808 = !DILocation(line: 1468, column: 120, scope: !5753)
!5809 = !DILocation(line: 1468, column: 126, scope: !5753)
!5810 = !DILocation(line: 1468, column: 79, scope: !5753)
!5811 = !DILocation(line: 1468, column: 132, scope: !5753)
!5812 = !DILocation(line: 1468, column: 21, scope: !5766)
!5813 = !DILocation(line: 1468, column: 21, scope: !5753)
!5814 = !DILocation(line: 1470, column: 17, scope: !5749)
!5815 = !DILocation(line: 1470, column: 117, scope: !5753)
!5816 = !DILocation(line: 1470, column: 122, scope: !5753)
!5817 = !DILocation(line: 1470, column: 127, scope: !5753)
!5818 = !DILocation(line: 1470, column: 133, scope: !5753)
!5819 = !DILocation(line: 1470, column: 98, scope: !5753)
!5820 = !DILocation(line: 1470, column: 139, scope: !5753)
!5821 = !DILocation(line: 1470, column: 21, scope: !5766)
!5822 = !DILocation(line: 1470, column: 21, scope: !5753)
!5823 = !DILocation(line: 1471, column: 17, scope: !5749)
!5824 = !DILocation(line: 1471, column: 53, scope: !5753)
!5825 = !DILocation(line: 1471, column: 62, scope: !5753)
!5826 = !DILocation(line: 1471, column: 21, scope: !5753)
!5827 = !DILocation(line: 1462, column: 13, scope: !5828)
!5828 = !DILexicalBlockFile(scope: !5739, file: !10, discriminator: 3)
!5829 = !DILocation(line: 1472, column: 16, scope: !5749)
!5830 = !DILocation(line: 1472, column: 13, scope: !5749)
!5831 = !DILocation(line: 1474, column: 16, scope: !5749)
!5832 = !DILocation(line: 1475, column: 26, scope: !5739)
!5833 = !DILocation(line: 1475, column: 9, scope: !5739)
!5834 = !DILocation(line: 1476, column: 17, scope: !5739)
!5835 = !DILocation(line: 1476, column: 9, scope: !5739)
!5836 = !DILocation(line: 1477, column: 17, scope: !5739)
!5837 = !DILocation(line: 1477, column: 9, scope: !5739)
!5838 = !DILocation(line: 1478, column: 13, scope: !5839)
!5839 = distinct !DILexicalBlock(scope: !5739, file: !10, line: 1478, column: 13)
!5840 = !DILocation(line: 1478, column: 16, scope: !5839)
!5841 = !DILocation(line: 1478, column: 13, scope: !5739)
!5842 = !DILocation(line: 1479, column: 13, scope: !5839)
!5843 = !DILocation(line: 1480, column: 5, scope: !5739)
!5844 = !DILocation(line: 1482, column: 8, scope: !5661)
!5845 = !DILocation(line: 1482, column: 5, scope: !5661)
!5846 = !DILocation(line: 1484, column: 13, scope: !5661)
!5847 = !DILocation(line: 1484, column: 5, scope: !5661)
!5848 = !DILocation(line: 1485, column: 13, scope: !5661)
!5849 = !DILocation(line: 1485, column: 5, scope: !5661)
!5850 = !DILocation(line: 1486, column: 13, scope: !5661)
!5851 = !DILocation(line: 1486, column: 5, scope: !5661)
!5852 = !DILocation(line: 1487, column: 13, scope: !5661)
!5853 = !DILocation(line: 1487, column: 5, scope: !5661)
!5854 = !DILocation(line: 1488, column: 13, scope: !5661)
!5855 = !DILocation(line: 1488, column: 5, scope: !5661)
!5856 = !DILocation(line: 1489, column: 12, scope: !5661)
!5857 = !DILocation(line: 1489, column: 5, scope: !5661)
!5858 = distinct !DISubprogram(name: "file_modexp", scope: !10, file: !10, line: 1492, type: !85, isLocal: true, isDefinition: true, scopeLine: 1493, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!5859 = !DILocalVariable(name: "s", arg: 1, scope: !5858, file: !10, line: 1492, type: !87)
!5860 = !DILocation(line: 1492, column: 32, scope: !5858)
!5861 = !DILocalVariable(name: "a", scope: !5858, file: !10, line: 1494, type: !187)
!5862 = !DILocation(line: 1494, column: 13, scope: !5858)
!5863 = !DILocalVariable(name: "e", scope: !5858, file: !10, line: 1494, type: !187)
!5864 = !DILocation(line: 1494, column: 23, scope: !5858)
!5865 = !DILocalVariable(name: "m", scope: !5858, file: !10, line: 1494, type: !187)
!5866 = !DILocation(line: 1494, column: 34, scope: !5858)
!5867 = !DILocalVariable(name: "mod_exp", scope: !5858, file: !10, line: 1494, type: !187)
!5868 = !DILocation(line: 1494, column: 45, scope: !5858)
!5869 = !DILocalVariable(name: "ret", scope: !5858, file: !10, line: 1494, type: !187)
!5870 = !DILocation(line: 1494, column: 62, scope: !5858)
!5871 = !DILocalVariable(name: "b", scope: !5858, file: !10, line: 1495, type: !187)
!5872 = !DILocation(line: 1495, column: 13, scope: !5858)
!5873 = !DILocalVariable(name: "c", scope: !5858, file: !10, line: 1495, type: !187)
!5874 = !DILocation(line: 1495, column: 23, scope: !5858)
!5875 = !DILocalVariable(name: "d", scope: !5858, file: !10, line: 1495, type: !187)
!5876 = !DILocation(line: 1495, column: 34, scope: !5858)
!5877 = !DILocalVariable(name: "st", scope: !5858, file: !10, line: 1496, type: !4)
!5878 = !DILocation(line: 1496, column: 9, scope: !5858)
!5879 = !DILocation(line: 1498, column: 75, scope: !5880)
!5880 = distinct !DILexicalBlock(scope: !5858, file: !10, line: 1498, column: 9)
!5881 = !DILocation(line: 1498, column: 69, scope: !5880)
!5882 = !DILocation(line: 1498, column: 67, scope: !5880)
!5883 = !DILocation(line: 1498, column: 65, scope: !5880)
!5884 = !DILocation(line: 1498, column: 10, scope: !5885)
!5885 = !DILexicalBlockFile(scope: !5880, file: !10, discriminator: 2)
!5886 = !DILocation(line: 1498, column: 10, scope: !5880)
!5887 = !DILocation(line: 1499, column: 13, scope: !5880)
!5888 = !DILocation(line: 1499, column: 82, scope: !5889)
!5889 = !DILexicalBlockFile(scope: !5880, file: !10, discriminator: 1)
!5890 = !DILocation(line: 1499, column: 76, scope: !5889)
!5891 = !DILocation(line: 1499, column: 74, scope: !5889)
!5892 = !DILocation(line: 1499, column: 72, scope: !5889)
!5893 = !DILocation(line: 1499, column: 17, scope: !5894)
!5894 = !DILexicalBlockFile(scope: !5889, file: !10, discriminator: 2)
!5895 = !DILocation(line: 1499, column: 17, scope: !5889)
!5896 = !DILocation(line: 1500, column: 13, scope: !5880)
!5897 = !DILocation(line: 1500, column: 82, scope: !5889)
!5898 = !DILocation(line: 1500, column: 76, scope: !5889)
!5899 = !DILocation(line: 1500, column: 74, scope: !5889)
!5900 = !DILocation(line: 1500, column: 72, scope: !5889)
!5901 = !DILocation(line: 1500, column: 17, scope: !5894)
!5902 = !DILocation(line: 1500, column: 17, scope: !5889)
!5903 = !DILocation(line: 1501, column: 13, scope: !5880)
!5904 = !DILocation(line: 1501, column: 99, scope: !5889)
!5905 = !DILocation(line: 1501, column: 93, scope: !5889)
!5906 = !DILocation(line: 1501, column: 91, scope: !5889)
!5907 = !DILocation(line: 1501, column: 83, scope: !5889)
!5908 = !DILocation(line: 1501, column: 17, scope: !5894)
!5909 = !DILocation(line: 1501, column: 17, scope: !5889)
!5910 = !DILocation(line: 1502, column: 13, scope: !5880)
!5911 = !DILocation(line: 1502, column: 73, scope: !5889)
!5912 = !DILocation(line: 1502, column: 71, scope: !5889)
!5913 = !DILocation(line: 1502, column: 67, scope: !5889)
!5914 = !DILocation(line: 1502, column: 17, scope: !5894)
!5915 = !DILocation(line: 1502, column: 17, scope: !5889)
!5916 = !DILocation(line: 1503, column: 13, scope: !5880)
!5917 = !DILocation(line: 1503, column: 69, scope: !5889)
!5918 = !DILocation(line: 1503, column: 67, scope: !5889)
!5919 = !DILocation(line: 1503, column: 65, scope: !5889)
!5920 = !DILocation(line: 1503, column: 17, scope: !5894)
!5921 = !DILocation(line: 1503, column: 17, scope: !5889)
!5922 = !DILocation(line: 1498, column: 9, scope: !5923)
!5923 = !DILexicalBlockFile(scope: !5858, file: !10, discriminator: 1)
!5924 = !DILocation(line: 1504, column: 9, scope: !5880)
!5925 = !DILocation(line: 1506, column: 88, scope: !5926)
!5926 = distinct !DILexicalBlock(scope: !5858, file: !10, line: 1506, column: 9)
!5927 = !DILocation(line: 1506, column: 93, scope: !5926)
!5928 = !DILocation(line: 1506, column: 96, scope: !5926)
!5929 = !DILocation(line: 1506, column: 99, scope: !5926)
!5930 = !DILocation(line: 1506, column: 102, scope: !5926)
!5931 = !DILocation(line: 1506, column: 77, scope: !5926)
!5932 = !DILocation(line: 1506, column: 108, scope: !5926)
!5933 = !DILocation(line: 1506, column: 10, scope: !5934)
!5934 = !DILexicalBlockFile(scope: !5926, file: !10, discriminator: 2)
!5935 = !DILocation(line: 1506, column: 10, scope: !5926)
!5936 = !DILocation(line: 1507, column: 13, scope: !5926)
!5937 = !DILocation(line: 1507, column: 42, scope: !5938)
!5938 = !DILexicalBlockFile(scope: !5926, file: !10, discriminator: 1)
!5939 = !DILocation(line: 1507, column: 51, scope: !5938)
!5940 = !DILocation(line: 1507, column: 17, scope: !5938)
!5941 = !DILocation(line: 1506, column: 9, scope: !5923)
!5942 = !DILocation(line: 1508, column: 9, scope: !5926)
!5943 = !DILocation(line: 1510, column: 19, scope: !5944)
!5944 = distinct !DILexicalBlock(scope: !5858, file: !10, line: 1510, column: 9)
!5945 = !DILocation(line: 1510, column: 9, scope: !5944)
!5946 = !DILocation(line: 1510, column: 9, scope: !5858)
!5947 = !DILocation(line: 1511, column: 108, scope: !5948)
!5948 = distinct !DILexicalBlock(scope: !5949, file: !10, line: 1511, column: 13)
!5949 = distinct !DILexicalBlock(scope: !5944, file: !10, line: 1510, column: 23)
!5950 = !DILocation(line: 1511, column: 113, scope: !5948)
!5951 = !DILocation(line: 1511, column: 116, scope: !5948)
!5952 = !DILocation(line: 1511, column: 119, scope: !5948)
!5953 = !DILocation(line: 1511, column: 122, scope: !5948)
!5954 = !DILocation(line: 1511, column: 92, scope: !5948)
!5955 = !DILocation(line: 1511, column: 16, scope: !5948)
!5956 = !DILocation(line: 1511, column: 14, scope: !5957)
!5957 = !DILexicalBlockFile(scope: !5948, file: !10, discriminator: 2)
!5958 = !DILocation(line: 1511, column: 14, scope: !5948)
!5959 = !DILocation(line: 1512, column: 17, scope: !5948)
!5960 = !DILocation(line: 1512, column: 53, scope: !5961)
!5961 = !DILexicalBlockFile(scope: !5948, file: !10, discriminator: 1)
!5962 = !DILocation(line: 1512, column: 62, scope: !5961)
!5963 = !DILocation(line: 1512, column: 21, scope: !5961)
!5964 = !DILocation(line: 1513, column: 17, scope: !5948)
!5965 = !DILocation(line: 1513, column: 104, scope: !5961)
!5966 = !DILocation(line: 1513, column: 109, scope: !5961)
!5967 = !DILocation(line: 1513, column: 112, scope: !5961)
!5968 = !DILocation(line: 1513, column: 115, scope: !5961)
!5969 = !DILocation(line: 1513, column: 118, scope: !5961)
!5970 = !DILocation(line: 1513, column: 78, scope: !5961)
!5971 = !DILocation(line: 1513, column: 23, scope: !5961)
!5972 = !DILocation(line: 1513, column: 21, scope: !5973)
!5973 = !DILexicalBlockFile(scope: !5961, file: !10, discriminator: 2)
!5974 = !DILocation(line: 1513, column: 21, scope: !5961)
!5975 = !DILocation(line: 1515, column: 17, scope: !5948)
!5976 = !DILocation(line: 1515, column: 58, scope: !5961)
!5977 = !DILocation(line: 1515, column: 67, scope: !5961)
!5978 = !DILocation(line: 1515, column: 21, scope: !5961)
!5979 = !DILocation(line: 1511, column: 13, scope: !5980)
!5980 = !DILexicalBlockFile(scope: !5949, file: !10, discriminator: 1)
!5981 = !DILocation(line: 1516, column: 13, scope: !5948)
!5982 = !DILocation(line: 1517, column: 5, scope: !5949)
!5983 = !DILocation(line: 1520, column: 5, scope: !5858)
!5984 = !DILocation(line: 1521, column: 5, scope: !5858)
!5985 = !DILocation(line: 1522, column: 5, scope: !5858)
!5986 = !DILocation(line: 1529, column: 86, scope: !5987)
!5987 = distinct !DILexicalBlock(scope: !5858, file: !10, line: 1529, column: 9)
!5988 = !DILocation(line: 1529, column: 89, scope: !5987)
!5989 = !DILocation(line: 1529, column: 92, scope: !5987)
!5990 = !DILocation(line: 1529, column: 95, scope: !5987)
!5991 = !DILocation(line: 1529, column: 98, scope: !5987)
!5992 = !DILocation(line: 1529, column: 75, scope: !5987)
!5993 = !DILocation(line: 1529, column: 104, scope: !5987)
!5994 = !DILocation(line: 1529, column: 10, scope: !5995)
!5995 = !DILexicalBlockFile(scope: !5987, file: !10, discriminator: 2)
!5996 = !DILocation(line: 1529, column: 10, scope: !5987)
!5997 = !DILocation(line: 1530, column: 9, scope: !5987)
!5998 = !DILocation(line: 1530, column: 78, scope: !5999)
!5999 = !DILexicalBlockFile(scope: !5987, file: !10, discriminator: 1)
!6000 = !DILocation(line: 1530, column: 81, scope: !5999)
!6001 = !DILocation(line: 1530, column: 84, scope: !5999)
!6002 = !DILocation(line: 1530, column: 87, scope: !5999)
!6003 = !DILocation(line: 1530, column: 71, scope: !5999)
!6004 = !DILocation(line: 1530, column: 93, scope: !5999)
!6005 = !DILocation(line: 1530, column: 13, scope: !6006)
!6006 = !DILexicalBlockFile(scope: !5999, file: !10, discriminator: 2)
!6007 = !DILocation(line: 1530, column: 13, scope: !5999)
!6008 = !DILocation(line: 1531, column: 9, scope: !5987)
!6009 = !DILocation(line: 1531, column: 57, scope: !5999)
!6010 = !DILocation(line: 1531, column: 60, scope: !5999)
!6011 = !DILocation(line: 1531, column: 13, scope: !5999)
!6012 = !DILocation(line: 1529, column: 9, scope: !5923)
!6013 = !DILocation(line: 1532, column: 9, scope: !5987)
!6014 = !DILocation(line: 1534, column: 8, scope: !5858)
!6015 = !DILocation(line: 1534, column: 5, scope: !5858)
!6016 = !DILocation(line: 1536, column: 13, scope: !5858)
!6017 = !DILocation(line: 1536, column: 5, scope: !5858)
!6018 = !DILocation(line: 1537, column: 13, scope: !5858)
!6019 = !DILocation(line: 1537, column: 5, scope: !5858)
!6020 = !DILocation(line: 1538, column: 13, scope: !5858)
!6021 = !DILocation(line: 1538, column: 5, scope: !5858)
!6022 = !DILocation(line: 1539, column: 13, scope: !5858)
!6023 = !DILocation(line: 1539, column: 5, scope: !5858)
!6024 = !DILocation(line: 1540, column: 13, scope: !5858)
!6025 = !DILocation(line: 1540, column: 5, scope: !5858)
!6026 = !DILocation(line: 1541, column: 13, scope: !5858)
!6027 = !DILocation(line: 1541, column: 5, scope: !5858)
!6028 = !DILocation(line: 1542, column: 13, scope: !5858)
!6029 = !DILocation(line: 1542, column: 5, scope: !5858)
!6030 = !DILocation(line: 1543, column: 13, scope: !5858)
!6031 = !DILocation(line: 1543, column: 5, scope: !5858)
!6032 = !DILocation(line: 1544, column: 12, scope: !5858)
!6033 = !DILocation(line: 1544, column: 5, scope: !5858)
!6034 = distinct !DISubprogram(name: "file_exp", scope: !10, file: !10, line: 1547, type: !85, isLocal: true, isDefinition: true, scopeLine: 1548, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!6035 = !DILocalVariable(name: "s", arg: 1, scope: !6034, file: !10, line: 1547, type: !87)
!6036 = !DILocation(line: 1547, column: 29, scope: !6034)
!6037 = !DILocalVariable(name: "a", scope: !6034, file: !10, line: 1549, type: !187)
!6038 = !DILocation(line: 1549, column: 13, scope: !6034)
!6039 = !DILocalVariable(name: "e", scope: !6034, file: !10, line: 1549, type: !187)
!6040 = !DILocation(line: 1549, column: 23, scope: !6034)
!6041 = !DILocalVariable(name: "exp", scope: !6034, file: !10, line: 1549, type: !187)
!6042 = !DILocation(line: 1549, column: 34, scope: !6034)
!6043 = !DILocalVariable(name: "ret", scope: !6034, file: !10, line: 1549, type: !187)
!6044 = !DILocation(line: 1549, column: 47, scope: !6034)
!6045 = !DILocalVariable(name: "st", scope: !6034, file: !10, line: 1550, type: !4)
!6046 = !DILocation(line: 1550, column: 9, scope: !6034)
!6047 = !DILocation(line: 1552, column: 75, scope: !6048)
!6048 = distinct !DILexicalBlock(scope: !6034, file: !10, line: 1552, column: 9)
!6049 = !DILocation(line: 1552, column: 69, scope: !6048)
!6050 = !DILocation(line: 1552, column: 67, scope: !6048)
!6051 = !DILocation(line: 1552, column: 65, scope: !6048)
!6052 = !DILocation(line: 1552, column: 10, scope: !6053)
!6053 = !DILexicalBlockFile(scope: !6048, file: !10, discriminator: 2)
!6054 = !DILocation(line: 1552, column: 10, scope: !6048)
!6055 = !DILocation(line: 1553, column: 13, scope: !6048)
!6056 = !DILocation(line: 1553, column: 82, scope: !6057)
!6057 = !DILexicalBlockFile(scope: !6048, file: !10, discriminator: 1)
!6058 = !DILocation(line: 1553, column: 76, scope: !6057)
!6059 = !DILocation(line: 1553, column: 74, scope: !6057)
!6060 = !DILocation(line: 1553, column: 72, scope: !6057)
!6061 = !DILocation(line: 1553, column: 17, scope: !6062)
!6062 = !DILexicalBlockFile(scope: !6057, file: !10, discriminator: 2)
!6063 = !DILocation(line: 1553, column: 17, scope: !6057)
!6064 = !DILocation(line: 1554, column: 13, scope: !6048)
!6065 = !DILocation(line: 1554, column: 88, scope: !6057)
!6066 = !DILocation(line: 1554, column: 82, scope: !6057)
!6067 = !DILocation(line: 1554, column: 80, scope: !6057)
!6068 = !DILocation(line: 1554, column: 76, scope: !6057)
!6069 = !DILocation(line: 1554, column: 17, scope: !6062)
!6070 = !DILocation(line: 1554, column: 17, scope: !6057)
!6071 = !DILocation(line: 1555, column: 13, scope: !6048)
!6072 = !DILocation(line: 1555, column: 73, scope: !6057)
!6073 = !DILocation(line: 1555, column: 71, scope: !6057)
!6074 = !DILocation(line: 1555, column: 67, scope: !6057)
!6075 = !DILocation(line: 1555, column: 17, scope: !6062)
!6076 = !DILocation(line: 1555, column: 17, scope: !6057)
!6077 = !DILocation(line: 1552, column: 9, scope: !6078)
!6078 = !DILexicalBlockFile(scope: !6034, file: !10, discriminator: 1)
!6079 = !DILocation(line: 1556, column: 9, scope: !6048)
!6080 = !DILocation(line: 1558, column: 77, scope: !6081)
!6081 = distinct !DILexicalBlock(scope: !6034, file: !10, line: 1558, column: 9)
!6082 = !DILocation(line: 1558, column: 82, scope: !6081)
!6083 = !DILocation(line: 1558, column: 85, scope: !6081)
!6084 = !DILocation(line: 1558, column: 88, scope: !6081)
!6085 = !DILocation(line: 1558, column: 70, scope: !6081)
!6086 = !DILocation(line: 1558, column: 94, scope: !6081)
!6087 = !DILocation(line: 1558, column: 10, scope: !6088)
!6088 = !DILexicalBlockFile(scope: !6081, file: !10, discriminator: 2)
!6089 = !DILocation(line: 1558, column: 10, scope: !6081)
!6090 = !DILocation(line: 1559, column: 13, scope: !6081)
!6091 = !DILocation(line: 1559, column: 34, scope: !6092)
!6092 = !DILexicalBlockFile(scope: !6081, file: !10, discriminator: 1)
!6093 = !DILocation(line: 1559, column: 39, scope: !6092)
!6094 = !DILocation(line: 1559, column: 17, scope: !6092)
!6095 = !DILocation(line: 1558, column: 9, scope: !6078)
!6096 = !DILocation(line: 1560, column: 9, scope: !6081)
!6097 = !DILocation(line: 1562, column: 8, scope: !6034)
!6098 = !DILocation(line: 1562, column: 5, scope: !6034)
!6099 = !DILocation(line: 1564, column: 13, scope: !6034)
!6100 = !DILocation(line: 1564, column: 5, scope: !6034)
!6101 = !DILocation(line: 1565, column: 13, scope: !6034)
!6102 = !DILocation(line: 1565, column: 5, scope: !6034)
!6103 = !DILocation(line: 1566, column: 13, scope: !6034)
!6104 = !DILocation(line: 1566, column: 5, scope: !6034)
!6105 = !DILocation(line: 1567, column: 13, scope: !6034)
!6106 = !DILocation(line: 1567, column: 5, scope: !6034)
!6107 = !DILocation(line: 1568, column: 12, scope: !6034)
!6108 = !DILocation(line: 1568, column: 5, scope: !6034)
!6109 = distinct !DISubprogram(name: "file_modsqrt", scope: !10, file: !10, line: 1571, type: !85, isLocal: true, isDefinition: true, scopeLine: 1572, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!6110 = !DILocalVariable(name: "s", arg: 1, scope: !6109, file: !10, line: 1571, type: !87)
!6111 = !DILocation(line: 1571, column: 33, scope: !6109)
!6112 = !DILocalVariable(name: "a", scope: !6109, file: !10, line: 1573, type: !187)
!6113 = !DILocation(line: 1573, column: 13, scope: !6109)
!6114 = !DILocalVariable(name: "p", scope: !6109, file: !10, line: 1573, type: !187)
!6115 = !DILocation(line: 1573, column: 23, scope: !6109)
!6116 = !DILocalVariable(name: "mod_sqrt", scope: !6109, file: !10, line: 1573, type: !187)
!6117 = !DILocation(line: 1573, column: 34, scope: !6109)
!6118 = !DILocalVariable(name: "ret", scope: !6109, file: !10, line: 1573, type: !187)
!6119 = !DILocation(line: 1573, column: 52, scope: !6109)
!6120 = !DILocalVariable(name: "ret2", scope: !6109, file: !10, line: 1573, type: !187)
!6121 = !DILocation(line: 1573, column: 65, scope: !6109)
!6122 = !DILocalVariable(name: "st", scope: !6109, file: !10, line: 1574, type: !4)
!6123 = !DILocation(line: 1574, column: 9, scope: !6109)
!6124 = !DILocation(line: 1576, column: 75, scope: !6125)
!6125 = distinct !DILexicalBlock(scope: !6109, file: !10, line: 1576, column: 9)
!6126 = !DILocation(line: 1576, column: 69, scope: !6125)
!6127 = !DILocation(line: 1576, column: 67, scope: !6125)
!6128 = !DILocation(line: 1576, column: 65, scope: !6125)
!6129 = !DILocation(line: 1576, column: 10, scope: !6130)
!6130 = !DILexicalBlockFile(scope: !6125, file: !10, discriminator: 2)
!6131 = !DILocation(line: 1576, column: 10, scope: !6125)
!6132 = !DILocation(line: 1577, column: 13, scope: !6125)
!6133 = !DILocation(line: 1577, column: 82, scope: !6134)
!6134 = !DILexicalBlockFile(scope: !6125, file: !10, discriminator: 1)
!6135 = !DILocation(line: 1577, column: 76, scope: !6134)
!6136 = !DILocation(line: 1577, column: 74, scope: !6134)
!6137 = !DILocation(line: 1577, column: 72, scope: !6134)
!6138 = !DILocation(line: 1577, column: 17, scope: !6139)
!6139 = !DILexicalBlockFile(scope: !6134, file: !10, discriminator: 2)
!6140 = !DILocation(line: 1577, column: 17, scope: !6134)
!6141 = !DILocation(line: 1578, column: 13, scope: !6125)
!6142 = !DILocation(line: 1578, column: 102, scope: !6134)
!6143 = !DILocation(line: 1578, column: 96, scope: !6134)
!6144 = !DILocation(line: 1578, column: 94, scope: !6134)
!6145 = !DILocation(line: 1578, column: 85, scope: !6134)
!6146 = !DILocation(line: 1578, column: 17, scope: !6139)
!6147 = !DILocation(line: 1578, column: 17, scope: !6134)
!6148 = !DILocation(line: 1579, column: 13, scope: !6125)
!6149 = !DILocation(line: 1579, column: 73, scope: !6134)
!6150 = !DILocation(line: 1579, column: 71, scope: !6134)
!6151 = !DILocation(line: 1579, column: 67, scope: !6134)
!6152 = !DILocation(line: 1579, column: 17, scope: !6139)
!6153 = !DILocation(line: 1579, column: 17, scope: !6134)
!6154 = !DILocation(line: 1580, column: 13, scope: !6125)
!6155 = !DILocation(line: 1580, column: 75, scope: !6134)
!6156 = !DILocation(line: 1580, column: 73, scope: !6134)
!6157 = !DILocation(line: 1580, column: 68, scope: !6134)
!6158 = !DILocation(line: 1580, column: 17, scope: !6139)
!6159 = !DILocation(line: 1580, column: 17, scope: !6134)
!6160 = !DILocation(line: 1576, column: 9, scope: !6161)
!6161 = !DILexicalBlockFile(scope: !6109, file: !10, discriminator: 1)
!6162 = !DILocation(line: 1581, column: 9, scope: !6125)
!6163 = !DILocation(line: 1584, column: 87, scope: !6164)
!6164 = distinct !DILexicalBlock(scope: !6109, file: !10, line: 1584, column: 9)
!6165 = !DILocation(line: 1584, column: 92, scope: !6164)
!6166 = !DILocation(line: 1584, column: 95, scope: !6164)
!6167 = !DILocation(line: 1584, column: 98, scope: !6164)
!6168 = !DILocation(line: 1584, column: 75, scope: !6164)
!6169 = !DILocation(line: 1584, column: 104, scope: !6164)
!6170 = !DILocation(line: 1584, column: 10, scope: !6171)
!6171 = !DILexicalBlockFile(scope: !6164, file: !10, discriminator: 2)
!6172 = !DILocation(line: 1584, column: 10, scope: !6164)
!6173 = !DILocation(line: 1585, column: 13, scope: !6164)
!6174 = !DILocation(line: 1585, column: 82, scope: !6175)
!6175 = !DILexicalBlockFile(scope: !6164, file: !10, discriminator: 1)
!6176 = !DILocation(line: 1585, column: 88, scope: !6175)
!6177 = !DILocation(line: 1585, column: 91, scope: !6175)
!6178 = !DILocation(line: 1585, column: 75, scope: !6175)
!6179 = !DILocation(line: 1585, column: 97, scope: !6175)
!6180 = !DILocation(line: 1585, column: 17, scope: !6181)
!6181 = !DILexicalBlockFile(scope: !6175, file: !10, discriminator: 2)
!6182 = !DILocation(line: 1585, column: 17, scope: !6175)
!6183 = !DILocation(line: 1584, column: 9, scope: !6161)
!6184 = !DILocation(line: 1586, column: 9, scope: !6164)
!6185 = !DILocation(line: 1589, column: 16, scope: !6186)
!6186 = distinct !DILexicalBlock(scope: !6109, file: !10, line: 1589, column: 9)
!6187 = !DILocation(line: 1589, column: 22, scope: !6186)
!6188 = !DILocation(line: 1589, column: 9, scope: !6186)
!6189 = !DILocation(line: 1589, column: 32, scope: !6186)
!6190 = !DILocation(line: 1590, column: 13, scope: !6186)
!6191 = !DILocation(line: 1590, column: 44, scope: !6192)
!6192 = !DILexicalBlockFile(scope: !6186, file: !10, discriminator: 1)
!6193 = !DILocation(line: 1590, column: 54, scope: !6192)
!6194 = !DILocation(line: 1590, column: 17, scope: !6192)
!6195 = !DILocation(line: 1589, column: 9, scope: !6161)
!6196 = !DILocation(line: 1591, column: 9, scope: !6186)
!6197 = !DILocation(line: 1593, column: 8, scope: !6109)
!6198 = !DILocation(line: 1593, column: 5, scope: !6109)
!6199 = !DILocation(line: 1595, column: 13, scope: !6109)
!6200 = !DILocation(line: 1595, column: 5, scope: !6109)
!6201 = !DILocation(line: 1596, column: 13, scope: !6109)
!6202 = !DILocation(line: 1596, column: 5, scope: !6109)
!6203 = !DILocation(line: 1597, column: 13, scope: !6109)
!6204 = !DILocation(line: 1597, column: 5, scope: !6109)
!6205 = !DILocation(line: 1598, column: 13, scope: !6109)
!6206 = !DILocation(line: 1598, column: 5, scope: !6109)
!6207 = !DILocation(line: 1599, column: 13, scope: !6109)
!6208 = !DILocation(line: 1599, column: 5, scope: !6109)
!6209 = !DILocation(line: 1600, column: 12, scope: !6109)
!6210 = !DILocation(line: 1600, column: 5, scope: !6109)
!6211 = distinct !DISubprogram(name: "findattr", scope: !10, file: !10, line: 59, type: !6212, isLocal: true, isDefinition: true, scopeLine: 60, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!6212 = !DISubroutineType(types: !6213)
!6213 = !{!20, !87, !20}
!6214 = !DILocalVariable(name: "s", arg: 1, scope: !6211, file: !10, line: 59, type: !87)
!6215 = !DILocation(line: 59, column: 37, scope: !6211)
!6216 = !DILocalVariable(name: "key", arg: 2, scope: !6211, file: !10, line: 59, type: !20)
!6217 = !DILocation(line: 59, column: 52, scope: !6211)
!6218 = !DILocalVariable(name: "i", scope: !6211, file: !10, line: 61, type: !4)
!6219 = !DILocation(line: 61, column: 9, scope: !6211)
!6220 = !DILocation(line: 61, column: 13, scope: !6211)
!6221 = !DILocation(line: 61, column: 16, scope: !6211)
!6222 = !DILocalVariable(name: "pp", scope: !6211, file: !10, line: 62, type: !6223)
!6223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !105, size: 64, align: 64)
!6224 = !DILocation(line: 62, column: 11, scope: !6211)
!6225 = !DILocation(line: 62, column: 16, scope: !6211)
!6226 = !DILocation(line: 62, column: 19, scope: !6211)
!6227 = !DILocation(line: 64, column: 5, scope: !6211)
!6228 = !DILocation(line: 64, column: 13, scope: !6229)
!6229 = !DILexicalBlockFile(scope: !6230, file: !10, discriminator: 1)
!6230 = distinct !DILexicalBlock(scope: !6231, file: !10, line: 64, column: 5)
!6231 = distinct !DILexicalBlock(scope: !6211, file: !10, line: 64, column: 5)
!6232 = !DILocation(line: 64, column: 17, scope: !6229)
!6233 = !DILocation(line: 64, column: 5, scope: !6229)
!6234 = !DILocation(line: 65, column: 24, scope: !6235)
!6235 = distinct !DILexicalBlock(scope: !6230, file: !10, line: 65, column: 13)
!6236 = !DILocation(line: 65, column: 28, scope: !6235)
!6237 = !DILocation(line: 65, column: 33, scope: !6235)
!6238 = !DILocation(line: 65, column: 13, scope: !6235)
!6239 = !DILocation(line: 65, column: 38, scope: !6235)
!6240 = !DILocation(line: 65, column: 13, scope: !6230)
!6241 = !DILocation(line: 66, column: 20, scope: !6235)
!6242 = !DILocation(line: 66, column: 24, scope: !6235)
!6243 = !DILocation(line: 66, column: 13, scope: !6235)
!6244 = !DILocation(line: 65, column: 41, scope: !6245)
!6245 = !DILexicalBlockFile(scope: !6235, file: !10, discriminator: 1)
!6246 = !DILocation(line: 64, column: 25, scope: !6247)
!6247 = !DILexicalBlockFile(scope: !6230, file: !10, discriminator: 2)
!6248 = !DILocation(line: 64, column: 5, scope: !6247)
!6249 = distinct !{!6249, !6227}
!6250 = !DILocation(line: 67, column: 5, scope: !6211)
!6251 = !DILocation(line: 68, column: 1, scope: !6211)
!6252 = distinct !DISubprogram(name: "getBN", scope: !10, file: !10, line: 97, type: !6253, isLocal: true, isDefinition: true, scopeLine: 98, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!6253 = !DISubroutineType(types: !6254)
!6254 = !{!187, !87, !20}
!6255 = !DILocalVariable(name: "s", arg: 1, scope: !6252, file: !10, line: 97, type: !87)
!6256 = !DILocation(line: 97, column: 30, scope: !6252)
!6257 = !DILocalVariable(name: "attribute", arg: 2, scope: !6252, file: !10, line: 97, type: !20)
!6258 = !DILocation(line: 97, column: 45, scope: !6252)
!6259 = !DILocalVariable(name: "hex", scope: !6252, file: !10, line: 99, type: !20)
!6260 = !DILocation(line: 99, column: 17, scope: !6252)
!6261 = !DILocalVariable(name: "ret", scope: !6252, file: !10, line: 100, type: !187)
!6262 = !DILocation(line: 100, column: 13, scope: !6252)
!6263 = !DILocation(line: 102, column: 25, scope: !6264)
!6264 = distinct !DILexicalBlock(scope: !6252, file: !10, line: 102, column: 9)
!6265 = !DILocation(line: 102, column: 28, scope: !6264)
!6266 = !DILocation(line: 102, column: 16, scope: !6264)
!6267 = !DILocation(line: 102, column: 14, scope: !6264)
!6268 = !DILocation(line: 102, column: 40, scope: !6264)
!6269 = !DILocation(line: 102, column: 9, scope: !6252)
!6270 = !DILocation(line: 103, column: 66, scope: !6271)
!6271 = distinct !DILexicalBlock(scope: !6264, file: !10, line: 102, column: 48)
!6272 = !DILocation(line: 103, column: 69, scope: !6271)
!6273 = !DILocation(line: 103, column: 80, scope: !6271)
!6274 = !DILocation(line: 103, column: 83, scope: !6271)
!6275 = !DILocation(line: 103, column: 90, scope: !6271)
!6276 = !DILocation(line: 103, column: 9, scope: !6271)
!6277 = !DILocation(line: 104, column: 9, scope: !6271)
!6278 = !DILocation(line: 107, column: 23, scope: !6279)
!6279 = distinct !DILexicalBlock(scope: !6252, file: !10, line: 107, column: 9)
!6280 = !DILocation(line: 107, column: 9, scope: !6279)
!6281 = !DILocation(line: 107, column: 43, scope: !6279)
!6282 = !DILocation(line: 107, column: 36, scope: !6283)
!6283 = !DILexicalBlockFile(scope: !6279, file: !10, discriminator: 1)
!6284 = !DILocation(line: 107, column: 31, scope: !6279)
!6285 = !DILocation(line: 107, column: 28, scope: !6279)
!6286 = !DILocation(line: 107, column: 9, scope: !6252)
!6287 = !DILocation(line: 108, column: 67, scope: !6288)
!6288 = distinct !DILexicalBlock(scope: !6279, file: !10, line: 107, column: 49)
!6289 = !DILocation(line: 108, column: 9, scope: !6288)
!6290 = !DILocation(line: 109, column: 9, scope: !6288)
!6291 = !DILocation(line: 111, column: 12, scope: !6252)
!6292 = !DILocation(line: 111, column: 5, scope: !6252)
!6293 = !DILocation(line: 112, column: 1, scope: !6252)
!6294 = distinct !DISubprogram(name: "getint", scope: !10, file: !10, line: 114, type: !6295, isLocal: true, isDefinition: true, scopeLine: 115, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!6295 = !DISubroutineType(types: !6296)
!6296 = !{!4, !87, !6297, !20}
!6297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4, size: 64, align: 64)
!6298 = !DILocalVariable(name: "s", arg: 1, scope: !6294, file: !10, line: 114, type: !87)
!6299 = !DILocation(line: 114, column: 27, scope: !6294)
!6300 = !DILocalVariable(name: "out", arg: 2, scope: !6294, file: !10, line: 114, type: !6297)
!6301 = !DILocation(line: 114, column: 35, scope: !6294)
!6302 = !DILocalVariable(name: "attribute", arg: 3, scope: !6294, file: !10, line: 114, type: !20)
!6303 = !DILocation(line: 114, column: 52, scope: !6294)
!6304 = !DILocalVariable(name: "ret", scope: !6294, file: !10, line: 116, type: !187)
!6305 = !DILocation(line: 116, column: 13, scope: !6294)
!6306 = !DILocalVariable(name: "word", scope: !6294, file: !10, line: 117, type: !6)
!6307 = !DILocation(line: 117, column: 19, scope: !6294)
!6308 = !DILocalVariable(name: "st", scope: !6294, file: !10, line: 118, type: !4)
!6309 = !DILocation(line: 118, column: 9, scope: !6294)
!6310 = !DILocation(line: 120, column: 82, scope: !6311)
!6311 = distinct !DILexicalBlock(scope: !6294, file: !10, line: 120, column: 9)
!6312 = !DILocation(line: 120, column: 85, scope: !6311)
!6313 = !DILocation(line: 120, column: 76, scope: !6311)
!6314 = !DILocation(line: 120, column: 74, scope: !6311)
!6315 = !DILocation(line: 120, column: 70, scope: !6311)
!6316 = !DILocation(line: 120, column: 10, scope: !6317)
!6317 = !DILexicalBlockFile(scope: !6311, file: !10, discriminator: 2)
!6318 = !DILocation(line: 120, column: 10, scope: !6311)
!6319 = !DILocation(line: 121, column: 13, scope: !6311)
!6320 = !DILocation(line: 121, column: 110, scope: !6321)
!6321 = !DILexicalBlockFile(scope: !6311, file: !10, discriminator: 1)
!6322 = !DILocation(line: 121, column: 98, scope: !6321)
!6323 = !DILocation(line: 121, column: 96, scope: !6321)
!6324 = !DILocation(line: 121, column: 17, scope: !6325)
!6325 = !DILexicalBlockFile(scope: !6321, file: !10, discriminator: 2)
!6326 = !DILocation(line: 121, column: 17, scope: !6321)
!6327 = !DILocation(line: 120, column: 9, scope: !6328)
!6328 = !DILexicalBlockFile(scope: !6294, file: !10, discriminator: 1)
!6329 = !DILocation(line: 122, column: 9, scope: !6311)
!6330 = !DILocation(line: 124, column: 17, scope: !6294)
!6331 = !DILocation(line: 124, column: 12, scope: !6294)
!6332 = !DILocation(line: 124, column: 6, scope: !6294)
!6333 = !DILocation(line: 124, column: 10, scope: !6294)
!6334 = !DILocation(line: 125, column: 8, scope: !6294)
!6335 = !DILocation(line: 125, column: 5, scope: !6294)
!6336 = !DILocation(line: 127, column: 13, scope: !6294)
!6337 = !DILocation(line: 127, column: 5, scope: !6294)
!6338 = !DILocation(line: 128, column: 12, scope: !6294)
!6339 = !DILocation(line: 128, column: 5, scope: !6294)
