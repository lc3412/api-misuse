commit 71edc9f87118c1237f04e17b79e041584a94b108
Author: Daniel Roethlisberger <daniel@roe.ch>
Date:   Wed Sep 26 00:31:56 2018 +0200

    Improve error handling for cert and key loading
    
    Issue:		#224 #225

diff --git a/pxyconn.c b/pxyconn.c
index 6e1a2f2..45e615e 100644
--- a/pxyconn.c
+++ b/pxyconn.c
@@ -720,8 +720,10 @@ pxy_srcsslctx_create(pxy_conn_ctx_t *ctx, X509 *crt, STACK_OF(X509) *chain,
                      EVP_PKEY *key)
 {
 	SSL_CTX *sslctx = SSL_CTX_new(ctx->opts->sslmethod());
-	if (!sslctx)
+	if (!sslctx) {
+		ctx->enomem = 1;
 		return NULL;
+	}
 
 	pxy_sslctx_setoptions(sslctx, ctx);
 
@@ -766,8 +768,16 @@ pxy_srcsslctx_create(pxy_conn_ctx_t *ctx, X509 *crt, STACK_OF(X509) *chain,
 		EC_KEY_free(ecdh);
 	}
 #endif /* !OPENSSL_NO_ECDH */
-	SSL_CTX_use_certificate(sslctx, crt);
-	SSL_CTX_use_PrivateKey(sslctx, key);
+	if (SSL_CTX_use_certificate(sslctx, crt) != 1) {
+		log_dbg_printf("loading src server certificate failed\n");
+		SSL_CTX_free(sslctx);
+		return NULL;
+	}
+	if (SSL_CTX_use_PrivateKey(sslctx, key) != 1) {
+		log_dbg_printf("loading src server key failed\n");
+		SSL_CTX_free(sslctx);
+		return NULL;
+	}
 	for (int i = 0; i < sk_X509_num(chain); i++) {
 		X509 *c = sk_X509_value(chain, i);
 		ssl_x509_refcount_inc(c); /* next call consumes a reference */
@@ -975,10 +985,8 @@ pxy_srcssl_create(pxy_conn_ctx_t *ctx, SSL *origssl)
 	SSL_CTX *sslctx = pxy_srcsslctx_create(ctx, cert->crt, cert->chain,
 	                                       cert->key);
 	cert_free(cert);
-	if (!sslctx) {
-		ctx->enomem = 1;
+	if (!sslctx)
 		return NULL;
-	}
 	SSL *ssl = SSL_new(sslctx);
 	SSL_CTX_free(sslctx); /* SSL_new() increments refcount */
 	if (!ssl) {
@@ -1090,7 +1098,6 @@ pxy_ossl_servername_cb(SSL *ssl, UNUSED int *al, void *arg)
 		                                 ctx->opts->key);
 		if (!newsslctx) {
 			X509_free(newcrt);
-			ctx->enomem = 1;
 			return SSL_TLSEXT_ERR_NOACK;
 		}
 		SSL_set_SSL_CTX(ssl, newsslctx); /* decr's old incr new refc */
@@ -1129,7 +1136,6 @@ pxy_dstssl_create(pxy_conn_ctx_t *ctx)
 		if (SSL_CTX_set_min_proto_version(sslctx, ctx->opts->sslversion) == 0 ||
 			SSL_CTX_set_max_proto_version(sslctx, ctx->opts->sslversion) == 0) {
 			SSL_CTX_free(sslctx);
-			ctx->enomem = 1;
 			return NULL;
 		}
 	}
@@ -1142,13 +1148,17 @@ pxy_dstssl_create(pxy_conn_ctx_t *ctx)
 		SSL_CTX_set_verify(sslctx, SSL_VERIFY_NONE, NULL);
 	}
 
-	if (ctx->opts->clientcrt) {
-		if (!SSL_CTX_use_certificate(sslctx, ctx->opts->clientcrt))
-			log_dbg_printf("loading client certificate failed");
+	if (ctx->opts->clientcrt &&
+	    (SSL_CTX_use_certificate(sslctx, ctx->opts->clientcrt) != 1)) {
+		log_dbg_printf("loading dst client certificate failed\n");
+		SSL_CTX_free(sslctx);
+		return NULL;
 	}
-	if (ctx->opts->clientkey) {
-		if (!SSL_CTX_use_PrivateKey(sslctx, ctx->opts->clientkey))
-			log_dbg_printf("loading client key failed");
+	if (ctx->opts->clientkey &&
+	    (SSL_CTX_use_PrivateKey(sslctx, ctx->opts->clientkey) != 1)) {
+		log_dbg_printf("loading dst client key failed\n");
+		SSL_CTX_free(sslctx);
+		return NULL;
 	}
 
 	ssl = SSL_new(sslctx);
diff --git a/ssl.c b/ssl.c
index 6dc9a4e..6c850b1 100644
--- a/ssl.c
+++ b/ssl.c
@@ -1263,18 +1263,21 @@ leave1:
  * Copies the certificate stack to the SSL_CTX internal data structures
  * and increases reference counts accordingly.
  */
-void
+int
 ssl_x509chain_use(SSL_CTX *sslctx, X509 *crt, STACK_OF(X509) *chain)
 {
-	SSL_CTX_use_certificate(sslctx, crt);
+	if (SSL_CTX_use_certificate(sslctx, crt) != 1)
+		return -1;
 
 	for (int i = 0; i < sk_X509_num(chain); i++) {
 		X509 *tmpcrt;
 
 		tmpcrt = sk_X509_value(chain, i);
 		ssl_x509_refcount_inc(tmpcrt);
-		SSL_CTX_add_extra_chain_cert(sslctx, tmpcrt);
+		if (SSL_CTX_add_extra_chain_cert(sslctx, tmpcrt) != 1)
+			return -1;
 	}
+	return 0;
 }
 
 /*
diff --git a/ssl.h b/ssl.h
index cc019d8..03f1769 100644
--- a/ssl.h
+++ b/ssl.h
@@ -250,7 +250,8 @@ char * ssl_x509_to_pem(X509 *) NONNULL(1) MALLOC;
 void ssl_x509_refcount_inc(X509 *) NONNULL(1);
 
 int ssl_x509chain_load(X509 **, STACK_OF(X509) **, const char *) NONNULL(2,3);
-void ssl_x509chain_use(SSL_CTX *, X509 *, STACK_OF(X509) *) NONNULL(1,2,3);
+int ssl_x509chain_use(SSL_CTX *, X509 *, STACK_OF(X509) *)
+    NONNULL(1,2,3) WUNRES;
 
 char * ssl_session_to_str(SSL_SESSION *) NONNULL(1) MALLOC;
 int ssl_session_is_valid(SSL_SESSION *) NONNULL(1);
